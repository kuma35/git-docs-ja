# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-09-25 05:51+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/gitprotocol-pack.txt:2
#, no-wrap
msgid "gitprotocol-pack(5)"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/gitprotocol-pack.txt:5
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:7
msgid "gitprotocol-pack - How packs are transferred over-the-wire"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/gitprotocol-pack.txt:9
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:12
#, no-wrap
msgid "<over-the-wire-protocol>\n"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/gitprotocol-pack.txt:14
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:21
msgid ""
"Git supports transferring data in packfiles over the ssh://, git://, http:// "
"and file:// transports.  There exist two sets of protocols, one for pushing "
"data from a client to a server and another for fetching data from a server "
"to a client.  The three transports (ssh, git, file) use the same protocol to "
"transfer data. http is documented in linkgit:gitprotocol-http[5]."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:28
msgid ""
"The processes invoked in the canonical Git implementation are 'upload-pack' "
"on the server side and 'fetch-pack' on the client side for fetching data; "
"then 'receive-pack' on the server and 'send-pack' on the client for pushing "
"data.  The protocol functions to have a server tell a client what is "
"currently on the server, then for the two to negotiate the smallest amount "
"of data to send in order to fully update one or the other."
msgstr ""
"正規の Git 実装で呼び出されるプロセスは、サーバー側では `upload-pack` 、クラ"
"イアント側ではデータを取得(fetch)するための `fetch-pack` です。 それから、"
"データをプッシュするためには、サーバー側では `receive-pack` 、クライアント側"
"では `send-pack` です。 プロトコルは、サーバーが現在サーバー上にあるものをク"
"ライアントに通知し、それから双方で送信する最小量のデータをネゴシエートして、"
"一方または他方を完全に更新するよう機能します。"

#. type: Title ==
#: ../Documentation-sedout/gitprotocol-pack.txt:29
#, no-wrap
msgid "pkt-line Format"
msgstr "pkt-line Format"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:36
msgid ""
"The descriptions below build on the pkt-line format described in linkgit:"
"gitprotocol-common[5]. When the grammar indicate `PKT-LINE(...)`, unless "
"otherwise noted the usual pkt-line LF rules apply: the sender SHOULD include "
"a LF, but the receiver MUST NOT complain if it is not present."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:38
msgid "An error packet is a special pkt-line that contains an error string."
msgstr "エラーパケットは、エラー文字列を含む特別な pkt-line です。"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:41
#, no-wrap
msgid "  error-line     =  PKT-LINE(\"ERR\" SP explanation-text)\n"
msgstr "  error-line     =  PKT-LINE(\"ERR\" SP explanation-text)\n"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:46
msgid ""
"Throughout the protocol, where `PKT-LINE(...)` is expected, an error packet "
"MAY be sent. Once this packet is sent by a client or a server, the data "
"transfer process defined in this protocol is terminated."
msgstr ""
"`PKT-LINE(...)` が期待されるそのプロトコル中の何処であっても、エラーパケット"
"が送信される場合があります。 このパケットがクライアントまたはサーバーによって"
"送信されると、そのプロトコルで定義されたデータ転送プロセスは終了します。"

#. type: Title ==
#: ../Documentation-sedout/gitprotocol-pack.txt:47
#, no-wrap
msgid "Transports"
msgstr "Transports"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:56
msgid ""
"There are three transports over which the packfile protocol is initiated.  "
"The Git transport is a simple, unauthenticated server that takes the command "
"(almost always 'upload-pack', though Git servers can be configured to be "
"globally writable, in which 'receive- pack' initiation is also allowed) with "
"which the client wishes to communicate and executes it and connects it to "
"the requesting process."
msgstr ""
"パックファイルプロトコルが開始される転送(transport)は 3 つあります。 Git 転送"
"は、クライアントが希望するコマンド (ほとんどの場合 `upload-pack` ですが、Git "
"サーバーはグローバルに書き込み可能に構成でき、 `receive-pack` 開始も許可され"
"ます) を受け取る単純な非認証サーバーです。 通信して実行し、リクエスト元のプロ"
"セスに接続します。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:60
msgid ""
"In the SSH transport, the client just runs the 'upload-pack' or 'receive-"
"pack' process on the server over the SSH protocol and then communicates with "
"that invoked process over the SSH connection."
msgstr ""
"SSH 転送では、クライアントは SSH プロトコルを介してサーバー上で `upload-"
"pack` または `receive-pack` プロセスを実行し、SSH 接続を介して、その呼び出さ"
"れたプロセスと通信します。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:63
msgid ""
"The file:// transport runs the 'upload-pack' or 'receive-pack' process "
"locally and communicates with it over a pipe."
msgstr ""
"`file://` 転送は、 `upload-pack` または `receive-pack` プロセスをローカルで実"
"行し、パイプを介して通信します。"

#. type: Title ==
#: ../Documentation-sedout/gitprotocol-pack.txt:64
#, no-wrap
msgid "Extra Parameters"
msgstr "Extra Parameters"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:70
msgid ""
"The protocol provides a mechanism in which clients can send additional "
"information in its first message to the server. These are called \"Extra "
"Parameters\", and are supported by the Git, SSH, and HTTP protocols."
msgstr ""
"このプロトコルは、クライアントが最初のメッセージで追加情報をサーバーに送信で"
"きるメカニズムを提供します。 これらは「追加パラメーター」(Extra Parameters)と"
"呼ばれ、Git と SSH と HTTP プロトコルでサポートされています。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:72
msgid "Each Extra Parameter takes the form of `<key>=<value>` or `<key>`."
msgstr ""
"各追加パラメーター(Extra Parameter)は、 `<key>=<value>` 形式または `<key>` 形"
"式を取ります。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:77
msgid ""
"Servers that receive any such Extra Parameters MUST ignore all unrecognized "
"keys. Currently, the only Extra Parameter recognized is \"version\" with a "
"value of '1' or '2'.  See linkgit:gitprotocol-v2[5] for more information on "
"protocol version 2."
msgstr ""

#. type: Title ==
#: ../Documentation-sedout/gitprotocol-pack.txt:78
#, no-wrap
msgid "Git Transport"
msgstr "Git Transport"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:84
msgid ""
"The Git transport starts off by sending the command and repository on the "
"wire using the pkt-line format, followed by a NUL byte and a hostname "
"parameter, terminated by a NUL byte."
msgstr ""
"Git 転送(transport)は、 pkt-line 形式を使用してネットワーク上でコマンドとリポ"
"ジトリを送信することから始まり、その後に NUL バイトとホスト名パラメーターが続"
"き、NUL バイトで終了します。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:86
#, no-wrap
msgid "   0033git-upload-pack /project.git\\0host=myserver.com\\0\n"
msgstr "   0033git-upload-pack /project.git\\0host=myserver.com\\0\n"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:89
msgid ""
"The transport may send Extra Parameters by adding an additional NUL byte, "
"and then adding one or more NUL-terminated strings:"
msgstr ""
"その転送は、NUL バイトを追加し、そして更に 1 つ以上の、 NUL で終了する文字列"
"を追加することによって、追加のパラメーター(Extra Parameters)を送信できます:"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:91
#, no-wrap
msgid "   003egit-upload-pack /project.git\\0host=myserver.com\\0\\0version=1\\0\n"
msgstr "   003egit-upload-pack /project.git\\0host=myserver.com\\0\\0version=1\\0\n"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:101
#, no-wrap
msgid ""
"   git-proto-request = request-command SP pathname NUL\n"
"\t\t       [ host-parameter NUL ] [ NUL extra-parameters ]\n"
"   request-command   = \"git-upload-pack\" / \"git-receive-pack\" /\n"
"\t\t       \"git-upload-archive\"   ; case sensitive\n"
"   pathname          = *( %x01-ff ) ; exclude NUL\n"
"   host-parameter    = \"host=\" hostname [ \":\" port ]\n"
"   extra-parameters  = 1*extra-parameter\n"
"   extra-parameter   = 1*( %x01-ff ) NUL\n"
msgstr ""
"   git-proto-request = request-command SP pathname NUL\n"
"\t\t       [ host-parameter NUL ] [ NUL extra-parameters ]\n"
"   request-command   = \"git-upload-pack\" / \"git-receive-pack\" /\n"
"\t\t       \"git-upload-archive\"   ; case sensitive\n"
"   pathname          = *( %x01-ff ) ; exclude NUL\n"
"   host-parameter    = \"host=\" hostname [ \":\" port ]\n"
"   extra-parameters  = 1*extra-parameter\n"
"   extra-parameter   = 1*( %x01-ff ) NUL\n"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:106
msgid ""
"host-parameter is used for the git-daemon name based virtual hosting.  See --"
"interpolated-path option to git daemon, with the %H/%CH format characters."
msgstr ""
"host-parameter は、 git-daemon の 名前ベースの仮想ホスティング(name based "
"virtual hosting)に使用されます。 `%H/%CH` 形式の文字を使用した git デーモン"
"の `--interpolated-path` オプションを参照してください。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:109
msgid ""
"Basically what the Git client is doing to connect to an 'upload-pack' "
"process on the server side over the Git protocol is this:"
msgstr ""
"基本的に、GitクライアントがGitプロトコルを介してサーバー側の `upload-pack` プ"
"ロセスに接続するために行っていることは以下のとおりです:"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:113
#, no-wrap
msgid ""
"   $ echo -e -n \\\n"
"     \"003agit-upload-pack /schacon/gitbook.git\\0host=example.com\\0\" |\n"
"     nc -v example.com 9418\n"
msgstr ""
"   $ echo -e -n \\\n"
"     \"003agit-upload-pack /schacon/gitbook.git\\0host=example.com\\0\" |\n"
"     nc -v example.com 9418\n"

#. type: Title ==
#: ../Documentation-sedout/gitprotocol-pack.txt:115
#, no-wrap
msgid "SSH Transport"
msgstr "SSH Transport"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:121
msgid ""
"Initiating the upload-pack or receive-pack processes over SSH is executing "
"the binary on the server via SSH remote execution.  It is basically "
"equivalent to running this:"
msgstr ""
"SSH 経由で upload-pack または receive-pack プロセスを開始することは、SSH リ"
"モート実行を介してサーバー上でバイナリを実行することです。 これは基本的に以下"
"を実行するのと同じです:"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:123
#, no-wrap
msgid "   $ ssh git.example.com \"git-upload-pack '/project.git'\"\n"
msgstr "   $ ssh git.example.com \"git-upload-pack '/project.git'\"\n"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:129
msgid ""
"For a server to support Git pushing and pulling for a given user over SSH, "
"that user needs to be able to execute one or both of those commands via the "
"SSH shell that they are provided on login.  On some systems, that shell "
"access is limited to only being able to run those two commands, or even just "
"one of them."
msgstr ""
"サーバーが SSH を介して特定のユーザーの Git プッシュおよびプルをサポートする"
"には、そのユーザーが、ログイン時に提供される SSH シェルを介して、これらのコマ"
"ンドのいずれかまたは両方を実行できる必要があります。 一部のシステムでは、その"
"シェル アクセスは、これら 2 つのコマンドの実行のみ、またはそれらの 1 つだけに"
"制限されています。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:134
msgid ""
"In an ssh:// format URI, it's absolute in the URI, so the '/' after the host "
"name (or port number) is sent as an argument, which is then read by the "
"remote git-upload-pack exactly as is, so it's effectively an absolute path "
"in the remote filesystem."
msgstr ""
"`ssh://` 形式の URI では、これは URI 内で絶対的であるため、ホスト名 (または"
"ポート番号) の後の `/` が引数として送信され、リモートの git-upload-pack に"
"よってそのまま読み取られます。 そのため、実質的にはリモートファイルシステムの"
"絶対パスです。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:139
#, no-wrap
msgid ""
"       git clone ssh://user@example.com/project.git\n"
"\t\t    |\n"
"\t\t    v\n"
"    ssh user@example.com \"git-upload-pack '/project.git'\"\n"
msgstr ""
"       git clone ssh://user@example.com/project.git\n"
"\t\t    |\n"
"\t\t    v\n"
"    ssh user@example.com \"git-upload-pack '/project.git'\"\n"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:142
msgid ""
"In a \"user@host:path\" format URI, its relative to the user's home "
"directory, because the Git client will run:"
msgstr ""
"`user@host:path` 形式の URI では、Git クライアントが実行されるため、ユーザー"
"のホーム ディレクトリに相対的です:"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:147
#, no-wrap
msgid ""
"     git clone user@example.com:project.git\n"
"\t\t    |\n"
"\t\t    v\n"
"  ssh user@example.com \"git-upload-pack 'project.git'\"\n"
msgstr ""
"     git clone user@example.com:project.git\n"
"\t\t    |\n"
"\t\t    v\n"
"  ssh user@example.com \"git-upload-pack 'project.git'\"\n"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:150
msgid ""
"The exception is if a '~' is used, in which case we execute it without the "
"leading '/'."
msgstr ""
"例外は、 `~`  が使用されている場合です。この場合、先頭の `/` なしで実行されま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:155
#, no-wrap
msgid ""
"      ssh://user@example.com/~alice/project.git,\n"
"\t\t     |\n"
"\t\t     v\n"
"   ssh user@example.com \"git-upload-pack '~alice/project.git'\"\n"
msgstr ""
"      ssh://user@example.com/~alice/project.git,\n"
"\t\t     |\n"
"\t\t     v\n"
"   ssh user@example.com \"git-upload-pack '~alice/project.git'\"\n"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:161
msgid ""
"Depending on the value of the `protocol.version` configuration variable, Git "
"may attempt to send Extra Parameters as a colon-separated string in the "
"GIT_PROTOCOL environment variable. This is done only if the `ssh.variant` "
"configuration variable indicates that the ssh command supports passing "
"environment variables as an argument."
msgstr ""
"`protocol.version` 構成変数の値に応じて、Git は GIT_PROTOCOL 環境変数のコロン"
"(`:`)で区切られた文字列を追加パラメーター(Extra Parameters)として送信しようと"
"する場合があります。 これは、 `ssh.variant` 構成変数で、ssh コマンドが環境変"
"数を引数として渡すことをサポートすることを示している場合にのみ行われます。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:163
msgid "A few things to remember here:"
msgstr "ここでいくつか覚えておいて欲しいことがあります:"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:166
msgid ""
"The \"command name\" is spelled with dash (e.g. git-upload-pack), but this "
"can be overridden by the client;"
msgstr ""
"「コマンド名」はダッシュ(`-`)で続けて綴られます (例: git-upload-pack) が、こ"
"れはクライアントによってオーバーライドできます。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:168
msgid "The repository path is always quoted with single quotes."
msgstr "リポジトリパスは常に一重引用符(single quotes)で囲みます。"

#. type: Title ==
#: ../Documentation-sedout/gitprotocol-pack.txt:169
#, no-wrap
msgid "Fetching Data From a Server"
msgstr "Fetching Data From a Server"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:176
msgid ""
"When one Git repository wants to get data that a second repository has, the "
"first can 'fetch' from the second.  This operation determines what data the "
"server has that the client does not then streams that data down to the "
"client in packfile format."
msgstr ""
"ある Git リポジトリが 2 つ目のリポジトリにあるデータを取得したい場合、最初の "
"Git リポジトリは 2つめ目のリポジトリから「fetch」(取得)できます。 この操作"
"は、サーバーが持っていてクライアントが持っていないデータを判別し、そのデータ"
"を packfile 形式でクライアントにストリーミングします。"

#. type: Title ==
#: ../Documentation-sedout/gitprotocol-pack.txt:178
#: ../Documentation-sedout/gitprotocol-pack.txt:511
#, no-wrap
msgid "Reference Discovery"
msgstr "Reference Discovery"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:185
msgid ""
"When the client initially connects the server will immediately respond with "
"a version number (if \"version=1\" is sent as an Extra Parameter), and a "
"listing of each reference it has (all branches and tags) along with the "
"object name that each reference currently points to."
msgstr ""
"クライアントが最初に接続すると、サーバーはすぐに、バージョン番号 "
"(\"version=1\" が追加パラメーター(Extra Parameter)として送信された場合) と、"
"それが持つ各参照 (すべてのブランチとタグ) のリストと、各参照が現在指している"
"オブジェクト名で、応答します。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:197
#, no-wrap
msgid ""
"   $ echo -e -n \"0045git-upload-pack /schacon/gitbook.git\\0host=example.com\\0\\0version=1\\0\" |\n"
"      nc -v example.com 9418\n"
"   000eversion 1\n"
"   00887217a7c7e582c46cec22a130adf4b9d7d950fba0 HEAD\\0multi_ack thin-pack\n"
"\t\tside-band side-band-64k ofs-delta shallow no-progress include-tag\n"
"   00441d3fcd5ced445d1abc402225c0b8a1299641f497 refs/heads/integration\n"
"   003f7217a7c7e582c46cec22a130adf4b9d7d950fba0 refs/heads/master\n"
"   003cb88d2441cac0977faf98efc80305012112238d9d refs/tags/v0.9\n"
"   003c525128480b96c89e6418b1e40909bf6c5b2d580f refs/tags/v1.0\n"
"   003fe92df48743b7bc7d26bcaabfddde0a1e20cae47c refs/tags/v1.0^{}\n"
"   0000\n"
msgstr ""
"   $ echo -e -n \"0045git-upload-pack /schacon/gitbook.git\\0host=example.com\\0\\0version=1\\0\" |\n"
"      nc -v example.com 9418\n"
"   000eversion 1\n"
"   00887217a7c7e582c46cec22a130adf4b9d7d950fba0 HEAD\\0multi_ack thin-pack\n"
"\t\tside-band side-band-64k ofs-delta shallow no-progress include-tag\n"
"   00441d3fcd5ced445d1abc402225c0b8a1299641f497 refs/heads/integration\n"
"   003f7217a7c7e582c46cec22a130adf4b9d7d950fba0 refs/heads/master\n"
"   003cb88d2441cac0977faf98efc80305012112238d9d refs/tags/v0.9\n"
"   003c525128480b96c89e6418b1e40909bf6c5b2d580f refs/tags/v1.0\n"
"   003fe92df48743b7bc7d26bcaabfddde0a1e20cae47c refs/tags/v1.0^{}\n"
"   0000\n"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:201
msgid ""
"The returned response is a pkt-line stream describing each ref and its "
"current value.  The stream MUST be sorted by name according to the C locale "
"ordering."
msgstr ""
"返される応答は、各refとその現在の値を説明する pkt-line ストリームです。 その"
"ストリームは、C ロケールの順序に従って名前でソートする必要があります。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:205
msgid ""
"If HEAD is a valid ref, HEAD MUST appear as the first advertised ref.  If "
"HEAD is not a valid ref, HEAD MUST NOT appear in the advertisement list at "
"all, but other refs may still appear."
msgstr ""
"HEAD が有効な ref である場合、HEAD は最初に広告(advertise)された ref として表"
"示されなければなりません。 HEAD が有効な ref でない場合、HEAD は広告"
"(advertise)リストにまったく表示されてはなりませんが、他の ref は表示される可"
"能性があります。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:210
msgid ""
"The stream MUST include capability declarations behind a NUL on the first "
"ref. The peeled value of a ref (that is \"ref^{}\") MUST be immediately "
"after the ref itself, if presented. A conforming server MUST peel the ref if "
"it's an annotated tag."
msgstr ""
"ストリームは、最初のrefの NUL の後ろに機能宣言を含める必要があります。 ref の"
"皮をむいた値(the (peeled value) (つまり、`ref^{}`) は、提示される場合、ref 自"
"体の直後になければなりません。 準拠するサーバーは、注釈付きタグの場合、ref を"
"皮むき(peel)しなければなりません。"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:216
#, no-wrap
msgid ""
"  advertised-refs  =  *1(\"version 1\")\n"
"\t\t      (no-refs / list-of-refs)\n"
"\t\t      *shallow\n"
"\t\t      flush-pkt\n"
msgstr ""
"  advertised-refs  =  *1(\"version 1\")\n"
"\t\t      (no-refs / list-of-refs)\n"
"\t\t      *shallow\n"
"\t\t      flush-pkt\n"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:219
#, no-wrap
msgid ""
"  no-refs          =  PKT-LINE(zero-id SP \"capabilities^{}\"\n"
"\t\t      NUL capability-list)\n"
msgstr ""
"  no-refs          =  PKT-LINE(zero-id SP \"capabilities^{}\"\n"
"\t\t      NUL capability-list)\n"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:223
#, no-wrap
msgid ""
"  list-of-refs     =  first-ref *other-ref\n"
"  first-ref        =  PKT-LINE(obj-id SP refname\n"
"\t\t      NUL capability-list)\n"
msgstr ""
"  list-of-refs     =  first-ref *other-ref\n"
"  first-ref        =  PKT-LINE(obj-id SP refname\n"
"\t\t      NUL capability-list)\n"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:227
#, no-wrap
msgid ""
"  other-ref        =  PKT-LINE(other-tip / other-peeled)\n"
"  other-tip        =  obj-id SP refname\n"
"  other-peeled     =  obj-id SP refname \"^{}\"\n"
msgstr ""
"  other-ref        =  PKT-LINE(other-tip / other-peeled)\n"
"  other-tip        =  obj-id SP refname\n"
"  other-peeled     =  obj-id SP refname \"^{}\"\n"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:229
#, no-wrap
msgid "  shallow          =  PKT-LINE(\"shallow\" SP obj-id)\n"
msgstr "  shallow          =  PKT-LINE(\"shallow\" SP obj-id)\n"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:233
#, no-wrap
msgid ""
"  capability-list  =  capability *(SP capability)\n"
"  capability       =  1*(LC_ALPHA / DIGIT / \"-\" / \"_\")\n"
"  LC_ALPHA         =  %x61-7A\n"
msgstr ""
"  capability-list  =  capability *(SP capability)\n"
"  capability       =  1*(LC_ALPHA / DIGIT / \"-\" / \"_\")\n"
"  LC_ALPHA         =  %x61-7A\n"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:237
msgid ""
"Server and client MUST use lowercase for obj-id, both MUST treat obj-id as "
"case-insensitive."
msgstr ""
"サーバーとクライアントは obj-id に英小文字を使用する必要があり、サーバーとク"
"ライアントどちらも obj-id を英大文字と英小文字を区別しないものとして扱わなけ"
"ればなりません。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:240
msgid ""
"See protocol-capabilities.txt for a list of allowed server capabilities and "
"descriptions."
msgstr ""
"許可されているサーバー機能と説明のリストについては、 protocol-capabilities."
"txt を参照してください。"

#. type: Title ==
#: ../Documentation-sedout/gitprotocol-pack.txt:241
#, no-wrap
msgid "Packfile Negotiation"
msgstr "Packfile Negotiation"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:248
msgid ""
"After reference and capabilities discovery, the client can decide to "
"terminate the connection by sending a flush-pkt, telling the server it can "
"now gracefully terminate, and disconnect, when it does not need any pack "
"data. This can happen with the ls-remote command, and also can happen when "
"the client already is up to date."
msgstr ""
"参照と機能の検出後、クライアントは、 パックデータが不要になった時、 flush-"
"pkt を送信して接続を終了することを決定し、サーバーに正常に終了できるように"
"なったことを伝え、切断できます。 これは ls-remote コマンドで発生する可能性が"
"あり、そしてまた、クライアントが既に最新の状態である場合にも発生する可能性が"
"あります。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:255
msgid ""
"Otherwise, it enters the negotiation phase, where the client and server "
"determine what the minimal packfile necessary for transport is, by telling "
"the server what objects it wants, its shallow objects (if any), and the "
"maximum commit depth it wants (if any).  The client will also send a list of "
"the capabilities it wants to be in effect, out of what the server said it "
"could do with the first 'want' line."
msgstr ""
"それ以外の場合は、ネゴシエーション フェーズに入り、クライアントとサーバーは、"
"必要なオブジェクトや、浅い(shallow)オブジェクト (存在する場合)や、必要なコ"
"ミットの最大深度 (対応する場合) をサーバーに伝えることによって、転送に必要な"
"最小限のパックファイルを決定します。 クライアントは、サーバーが最初の `want` "
"行に対して、実行できると言った機能の中から、有効にしたい機能のリストも送信し"
"ます。"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:262
#, no-wrap
msgid ""
"  upload-request    =  want-list\n"
"\t\t       *shallow-line\n"
"\t\t       *1depth-request\n"
"\t\t       [filter-request]\n"
"\t\t       flush-pkt\n"
msgstr ""
"  upload-request    =  want-list\n"
"\t\t       *shallow-line\n"
"\t\t       *1depth-request\n"
"\t\t       [filter-request]\n"
"\t\t       flush-pkt\n"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:265
#, no-wrap
msgid ""
"  want-list         =  first-want\n"
"\t\t       *additional-want\n"
msgstr ""
"  want-list         =  first-want\n"
"\t\t       *additional-want\n"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:267
#, no-wrap
msgid "  shallow-line      =  PKT-LINE(\"shallow\" SP obj-id)\n"
msgstr "  shallow-line      =  PKT-LINE(\"shallow\" SP obj-id)\n"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:271
#, no-wrap
msgid ""
"  depth-request     =  PKT-LINE(\"deepen\" SP depth) /\n"
"\t\t       PKT-LINE(\"deepen-since\" SP timestamp) /\n"
"\t\t       PKT-LINE(\"deepen-not\" SP ref)\n"
msgstr ""
"  depth-request     =  PKT-LINE(\"deepen\" SP depth) /\n"
"\t\t       PKT-LINE(\"deepen-since\" SP timestamp) /\n"
"\t\t       PKT-LINE(\"deepen-not\" SP ref)\n"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:274
#, no-wrap
msgid ""
"  first-want        =  PKT-LINE(\"want\" SP obj-id SP capability-list)\n"
"  additional-want   =  PKT-LINE(\"want\" SP obj-id)\n"
msgstr ""
"  first-want        =  PKT-LINE(\"want\" SP obj-id SP capability-list)\n"
"  additional-want   =  PKT-LINE(\"want\" SP obj-id)\n"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:276
#, no-wrap
msgid "  depth             =  1*DIGIT\n"
msgstr "  depth             =  1*DIGIT\n"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:278
#, no-wrap
msgid "  filter-request    =  PKT-LINE(\"filter\" SP filter-spec)\n"
msgstr "  filter-request    =  PKT-LINE(\"filter\" SP filter-spec)\n"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:285
msgid ""
"Clients MUST send all the obj-ids it wants from the reference discovery "
"phase as 'want' lines. Clients MUST send at least one 'want' command in the "
"request body. Clients MUST NOT mention an obj-id in a 'want' command which "
"did not appear in the response obtained through ref discovery."
msgstr ""
"クライアントは、参照検出フェーズから必要なすべての obj-id を `want` 行として"
"送信する必要があります。 クライアントは、リクエスト本文で少なくとも 1 つの "
"`want` コマンドを送信する必要があります。 クライアントは、ref 検出によって取"
"得された応答に表示されなかった obj-id について `want` コマンドで言及してはな"
"りません。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:290
msgid ""
"The client MUST write all obj-ids which it only has shallow copies of "
"(meaning that it does not have the parents of a commit) as 'shallow' lines "
"so that the server is aware of the limitations of the client's history."
msgstr ""
"クライアントは、サーバーがクライアントの履歴の制限を認識できるように、浅い"
"(shallow)コピーしか持たない (つまり、コミットの親を持たない) すべての obj-id "
"を `shallow` 行として書き込まなければなりません。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:299
msgid ""
"The client now sends the maximum commit history depth it wants for this "
"transaction, which is the number of commits it wants from the tip of the "
"history, if any, as a 'deepen' line.  A depth of 0 is the same as not making "
"a depth request. The client does not want to receive any commits beyond this "
"depth, nor does it want objects needed only to complete those commits. "
"Commits whose parents are not received as a result are defined as shallow "
"and marked as such in the server. This information is sent back to the "
"client in the next step."
msgstr ""
"クライアントは、この取引(transaction)に必要な最大のコミット履歴の深さを送信し"
"ます。 これは、履歴の先端から必要なコミットの数であり、存在する場合は "
"`deepen` 行として送信します。 深度 0 は、深度(depth)リクエストを行わないこと"
"と同じです。 クライアントは、この深さを超えるコミットを受け取りたくないし、そ"
"れらのコミットを完了するためだけに必要なオブジェクトも欲していません。 結果と"
"して親が受信されないコミットは、浅い(shallow)ものとして定義され、サーバーでそ"
"のようにマークされます。 この情報は、次のステップでクライアントに送り返されま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:306
msgid ""
"The client can optionally request that pack-objects omit various objects "
"from the packfile using one of several filtering techniques.  These are "
"intended for use with partial clone and partial fetch operations. An object "
"that does not meet a filter-spec value is omitted unless explicitly "
"requested in a 'want' line. See `rev-list` for possible filter-spec values."
msgstr ""
"クライアントはオプションで、いくつかのフィルタリング手法の 1 つを使用して、 "
"pack-objects が パックファイルからさまざまなオブジェクトを省略するように要求"
"できます。 これらは、部分(partial)クローンおよび部分(partial)フェッチ操作で使"
"用するためのものです。 `want` 行で明示的に要求されない限り、 filter-spec 値を"
"満たさないオブジェクトは省略されます。 可能な filter-spec 値については、 "
"`rev-list` を参照してください。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:310
msgid ""
"Once all the 'want's and 'shallow's (and optional 'deepen') are transferred, "
"clients MUST send a flush-pkt, to tell the server side that it is done "
"sending the list."
msgstr ""
"すべての `want` と `shallow` (およびオプションの `deepen` ) が転送されると、"
"クライアントは、リストの送信が完了したことをサーバー側に通知するために、 "
"flush-pkt を送信する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:315
msgid ""
"Otherwise, if the client sent a positive depth request, the server will "
"determine which commits will and will not be shallow and send this "
"information to the client. If the client did not request a positive depth, "
"this step is skipped."
msgstr ""
"それ以外の場合、クライアントが正の深さ(depth)のリクエストを送信した場合、サー"
"バーはどのコミットが浅い(shallow)かどうかを判断し、その情報をクライアントに送"
"信します。 クライアントが正の深さをリクエストしなかった場合、この手順はスキッ"
"プされます。"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:320
#, no-wrap
msgid ""
"  shallow-update   =  *shallow-line\n"
"\t\t      *unshallow-line\n"
"\t\t      flush-pkt\n"
msgstr ""
"  shallow-update   =  *shallow-line\n"
"\t\t      *unshallow-line\n"
"\t\t      flush-pkt\n"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:322
#, no-wrap
msgid "  shallow-line     =  PKT-LINE(\"shallow\" SP obj-id)\n"
msgstr "  shallow-line     =  PKT-LINE(\"shallow\" SP obj-id)\n"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:324
#, no-wrap
msgid "  unshallow-line   =  PKT-LINE(\"unshallow\" SP obj-id)\n"
msgstr "  unshallow-line   =  PKT-LINE(\"unshallow\" SP obj-id)\n"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:329
msgid ""
"If the client has requested a positive depth, the server will compute the "
"set of commits which are no deeper than the desired depth. The set of "
"commits start at the client's wants."
msgstr ""
"クライアントが正の深さをリクエストした場合、サーバーは目的の深さまでの一連の"
"コミットを計算します。 一連のコミットは、クライアントの要求(wants)から始まり"
"ます。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:336
msgid ""
"The server writes 'shallow' lines for each commit whose parents will not be "
"sent as a result. The server writes an 'unshallow' line for each commit "
"which the client has indicated is shallow, but is no longer shallow at the "
"currently requested depth (that is, its parents will now be sent). The "
"server MUST NOT mark as unshallow anything which the client has not "
"indicated was shallow."
msgstr ""
"サーバーは、結果として親が送信されないコミットごとに `shallow` 行を書き込みま"
"す。 サーバーは、クライアントが浅いと示したコミットごとに、現在要求されている"
"深さ(depth)ではもはや浅く(shallow)は無いため、 `unshallow` 行を書き込みます"
"(つまり、その親が送信されます)。 サーバーは、クライアントが浅い(shallow)と示"
"していないものを非浅い(unshallow)としてマークしてはなりません。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:343
msgid ""
"Now the client will send a list of the obj-ids it has using 'have' lines, so "
"the server can make a packfile that only contains the objects that the "
"client needs. In multi_ack mode, the canonical implementation will send up "
"to 32 of these at a time, then will send a flush-pkt. The canonical "
"implementation will skip ahead and send the next 32 immediately, so that "
"there is always a block of 32 \"in-flight on the wire\" at a time."
msgstr ""
"これで、クライアントは `have` 行を使用して、所有している obj-id のリストを送"
"信するため、サーバーはクライアントが必要とするオブジェクトのみを含むパック"
"ファイルを作成できます。 multi_ack モードでは、正規の実装はこれらを一度に最"
"大 32 個送信して、それから flush-pkt を送信します。 正規の実装では、先にス"
"キップして次の 32 をすぐに送信し、一度に 32 の 「送信中」(in-flight on the "
"wire)のブロックが常に存在するようにします。"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:347
#, no-wrap
msgid ""
"  upload-haves      =  have-list\n"
"\t\t       compute-end\n"
msgstr ""
"  upload-haves      =  have-list\n"
"\t\t       compute-end\n"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:351
#, no-wrap
msgid ""
"  have-list         =  *have-line\n"
"  have-line         =  PKT-LINE(\"have\" SP obj-id)\n"
"  compute-end       =  flush-pkt / PKT-LINE(\"done\")\n"
msgstr ""
"  have-list         =  *have-line\n"
"  have-line         =  PKT-LINE(\"have\" SP obj-id)\n"
"  compute-end       =  flush-pkt / PKT-LINE(\"done\")\n"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:357
msgid ""
"If the server reads 'have' lines, it then will respond by ACKing any of the "
"obj-ids the client said it had that the server also has. The server will ACK "
"obj-ids differently depending on which ack mode is chosen by the client."
msgstr ""
"サーバーが `have` 行を読み取ると、サーバーも持っているとクライアントが言った "
"obj-id のいずれかに ACK を返すことで応答します。 サーバーは、クライアントが選"
"択した ack モードに応じて、異なる方法で obj-id を ACK します。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:359
msgid "In multi_ack mode:"
msgstr "multi_ack モードでは:"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:362
msgid ""
"the server will respond with 'ACK obj-id continue' for any common commits."
msgstr ""
"サーバーは、一般的なコミットに対して `ACK obj-id continue` で応答します。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:366
msgid ""
"once the server has found an acceptable common base commit and is ready to "
"make a packfile, it will blindly ACK all 'have' obj-ids back to the client."
msgstr ""
"サーバーが受け入れ可能な共通ベースのコミットを見つけ、パックファイルを作成す"
"る準備が整うと、サーバーはすべての `have` obj-id を盲目的にクライアントに返し"
"ます。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:369
msgid ""
"the server will then send a 'NAK' and then wait for another response from "
"the client - either a 'done' or another list of 'have' lines."
msgstr ""
"サーバーは `NAK` を送信し、クライアントからの別の応答を待ちます。それは "
"`done` または `have` 行の別のリストのいずれかです。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:371
msgid "In multi_ack_detailed mode:"
msgstr "multi_ack_detailed モードでは:"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:375
msgid ""
"the server will differentiate the ACKs where it is signaling that it is "
"ready to send data with 'ACK obj-id ready' lines, and signals the identified "
"common commits with 'ACK obj-id common' lines."
msgstr ""
"サーバーは、 `ACK obj-id ready` 行でデータを送信する準備ができていることを通"
"知する ACK を識別し、そして、 `ACK obj-id common` 行で識別された共通コミット"
"を通知します。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:377
msgid "Without either multi_ack or multi_ack_detailed:"
msgstr "multi_ack または multi_ack_detailed を使用しない場合:"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:380
msgid ""
"upload-pack sends \"ACK obj-id\" on the first common object it finds.  After "
"that it says nothing until the client gives it a \"done\"."
msgstr ""
"upload-pack は、最初に見つけた共通オブジェクトに対して `ACK obj-id` を送信し"
"ます。 その後、クライアントが `done` するまで何も言いません。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:384
msgid ""
"upload-pack sends \"NAK\" on a flush-pkt if no common object has been found "
"yet.  If one has been found, and thus an ACK was already sent, it's silent "
"on the flush-pkt."
msgstr ""
"共通オブジェクトがまだ見つからない場合、 upload-pack は flush-pkt で `NAK` を"
"送信します。 1 つ見つかった場合、ACK が既に送信されている場合は、 flush-pkt "
"では何も言いません。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:396
msgid ""
"After the client has gotten enough ACK responses that it can determine that "
"the server has enough information to send an efficient packfile (in the "
"canonical implementation, this is determined when it has received enough "
"ACKs that it can color everything left in the --date-order queue as common "
"with the server, or the --date-order queue is empty), or the client "
"determines that it wants to give up (in the canonical implementation, this "
"is determined when the client sends 256 'have' lines without getting any of "
"them ACKed by the server - meaning there is nothing in common and the server "
"should just send all of its objects), then the client will send a 'done' "
"command.  The 'done' command signals to the server that the client is ready "
"to receive its packfile data."
msgstr ""
"クライアントが十分な ACK 応答を取得して、サーバーが効率的なパックファイルを送"
"信するのに十分な情報を持っていると判断した場合(正規の実装では、 これは `--"
"date-order` キューに残っているすべてをサーバーと共通のものとして色付けできる"
"ほど十分な ACK を受信した場合、 または `--date-order` キューが空である場合、"
"に決定されます)、またはクライアントがあきらめたい(wants to give up)と判断した"
"場合(正規の実装では、これは、クライアントが 256 の `have｀行をサーバーからの "
"ACK を取得せずに送信したとき -- これはサーバーとの共通点がなく、サーバーはす"
"べてのオブジェクトを送信する必要があることを意味します-- に決定されます)、ク"
"ライアントは `done` コマンドを送信します。 `done` コマンドは、クライアントが"
"パックファイルデータを受信する準備ができていることをサーバーに通知します。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:401
msgid ""
"However, the 256 limit *only* turns on in the canonical client "
"implementation if we have received at least one \"ACK %s continue\" during a "
"prior round.  This helps to ensure that at least one common ancestor is "
"found before we give up entirely."
msgstr ""
"ただし、256 の制限は、前のラウンド中に少なくとも 1 つの `ACK %s continue` を"
"受信した場合にのみ、正規のクライアント実装で有効になります。 これにより、完全"
"にあきらめる(give up)前に、共通の祖先を少なくとも 1 つ見つけることができま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:408
msgid ""
"Once the 'done' line is read from the client, the server will either send a "
"final 'ACK obj-id' or it will send a 'NAK'. 'obj-id' is the object name of "
"the last commit determined to be common. The server only sends ACK after "
"'done' if there is at least one common base and multi_ack or "
"multi_ack_detailed is enabled. The server always sends NAK after 'done' if "
"there is no common base found."
msgstr ""
"`done` 行がクライアントから読み取られると、サーバーは最後の `ACK obj-id` を送"
"信するか、あるいは `NAK`を送信する場合があります。 `obj-id` は、一般的である"
"と判断された最後のコミットのオブジェクト名です。 サーバーは、少なくとも 1 つ"
"の共通ベースがあり、 multi_ack または multi_ack_detailed が有効になっている場"
"合にのみ、 `done` 後に ACK を送信します。 共通のベースが見つからない場合、"
"サーバーは `done` 後に常に NAK を送信します。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:412
msgid ""
"Instead of 'ACK' or 'NAK', the server may send an error message (for "
"example, if it does not recognize an object in a 'want' line received from "
"the client)."
msgstr ""
"`ACK` または `NAK` の代わりに、サーバーはエラーメッセージを送信する場合があり"
"ます(たとえば、クライアントから受信した `want` 行のオブジェクトを認識できない"
"場合)。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:414
msgid "Then the server will start sending its packfile data."
msgstr "その後、サーバーはパックファイルデータの送信を開始します。"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:421
#, no-wrap
msgid ""
"  server-response = *ack_multi ack / nak\n"
"  ack_multi       = PKT-LINE(\"ACK\" SP obj-id ack_status)\n"
"  ack_status      = \"continue\" / \"common\" / \"ready\"\n"
"  ack             = PKT-LINE(\"ACK\" SP obj-id)\n"
"  nak             = PKT-LINE(\"NAK\")\n"
msgstr ""
"  server-response = *ack_multi ack / nak\n"
"  ack_multi       = PKT-LINE(\"ACK\" SP obj-id ack_status)\n"
"  ack_status      = \"continue\" / \"common\" / \"ready\"\n"
"  ack             = PKT-LINE(\"ACK\" SP obj-id)\n"
"  nak             = PKT-LINE(\"NAK\")\n"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:424
msgid "A simple clone may look like this (with no 'have' lines):"
msgstr "単純なクローンは以下のようになります(`have` 行はありません):"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:434
#, no-wrap
msgid ""
"   C: 0054want 74730d410fcb6603ace96f1dc55ea6196122532d multi_ack \\\n"
"     side-band-64k ofs-delta\\n\n"
"   C: 0032want 7d1665144a3a975c05f1f43902ddaf084e784dbe\\n\n"
"   C: 0032want 5a3f6be755bbb7deae50065988cbfa1ffa9ab68a\\n\n"
"   C: 0032want 7e47fe2bd8d01d481f44d7af0531bd93d3b21c01\\n\n"
"   C: 0032want 74730d410fcb6603ace96f1dc55ea6196122532d\\n\n"
"   C: 0000\n"
"   C: 0009done\\n\n"
msgstr ""
"   C: 0054want 74730d410fcb6603ace96f1dc55ea6196122532d multi_ack \\\n"
"     side-band-64k ofs-delta\\n\n"
"   C: 0032want 7d1665144a3a975c05f1f43902ddaf084e784dbe\\n\n"
"   C: 0032want 5a3f6be755bbb7deae50065988cbfa1ffa9ab68a\\n\n"
"   C: 0032want 7e47fe2bd8d01d481f44d7af0531bd93d3b21c01\\n\n"
"   C: 0032want 74730d410fcb6603ace96f1dc55ea6196122532d\\n\n"
"   C: 0000\n"
"   C: 0009done\\n\n"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:437
#, no-wrap
msgid ""
"   S: 0008NAK\\n\n"
"   S: [PACKFILE]\n"
msgstr ""
"   S: 0008NAK\\n\n"
"   S: [PACKFILE]\n"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:440
msgid "An incremental update (fetch) response might look like this:"
msgstr "増分更新(fetch)応答は以下のようになります:"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:451
#, no-wrap
msgid ""
"   C: 0054want 74730d410fcb6603ace96f1dc55ea6196122532d multi_ack \\\n"
"     side-band-64k ofs-delta\\n\n"
"   C: 0032want 7d1665144a3a975c05f1f43902ddaf084e784dbe\\n\n"
"   C: 0032want 5a3f6be755bbb7deae50065988cbfa1ffa9ab68a\\n\n"
"   C: 0000\n"
"   C: 0032have 7e47fe2bd8d01d481f44d7af0531bd93d3b21c01\\n\n"
"   C: [30 more have lines]\n"
"   C: 0032have 74730d410fcb6603ace96f1dc55ea6196122532d\\n\n"
"   C: 0000\n"
msgstr ""
"   C: 0054want 74730d410fcb6603ace96f1dc55ea6196122532d multi_ack \\\n"
"     side-band-64k ofs-delta\\n\n"
"   C: 0032want 7d1665144a3a975c05f1f43902ddaf084e784dbe\\n\n"
"   C: 0032want 5a3f6be755bbb7deae50065988cbfa1ffa9ab68a\\n\n"
"   C: 0000\n"
"   C: 0032have 7e47fe2bd8d01d481f44d7af0531bd93d3b21c01\\n\n"
"   C: [30 more have lines]\n"
"   C: 0032have 74730d410fcb6603ace96f1dc55ea6196122532d\\n\n"
"   C: 0000\n"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:455
#, no-wrap
msgid ""
"   S: 003aACK 7e47fe2bd8d01d481f44d7af0531bd93d3b21c01 continue\\n\n"
"   S: 003aACK 74730d410fcb6603ace96f1dc55ea6196122532d continue\\n\n"
"   S: 0008NAK\\n\n"
msgstr ""
"   S: 003aACK 7e47fe2bd8d01d481f44d7af0531bd93d3b21c01 continue\\n\n"
"   S: 003aACK 74730d410fcb6603ace96f1dc55ea6196122532d continue\\n\n"
"   S: 0008NAK\\n\n"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:457
#, no-wrap
msgid "   C: 0009done\\n\n"
msgstr "   C: 0009done\\n\n"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:460
#, no-wrap
msgid ""
"   S: 0031ACK 74730d410fcb6603ace96f1dc55ea6196122532d\\n\n"
"   S: [PACKFILE]\n"
msgstr ""
"   S: 0031ACK 74730d410fcb6603ace96f1dc55ea6196122532d\\n\n"
"   S: [PACKFILE]\n"

#. type: Title ==
#: ../Documentation-sedout/gitprotocol-pack.txt:463
#, no-wrap
msgid "Packfile Data"
msgstr "Packfile Data"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:469
msgid ""
"Now that the client and server have finished negotiation about what the "
"minimal amount of data that needs to be sent to the client is, the server "
"will construct and send the required data in packfile format."
msgstr ""
"クライアントとサーバーは、クライアントに送信する必要があるデータの最小量につ"
"いてのネゴシエーションを終了したので、サーバーは必要なデータを作成してパック"
"ファイル形式で送信します。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:471
msgid ""
"See linkgit:gitformat-pack[5] for what the packfile itself actually looks "
"like."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:474
msgid ""
"If 'side-band' or 'side-band-64k' capabilities have been specified by the "
"client, the server will send the packfile data multiplexed."
msgstr ""
"`side-band` または `side-band-64k` 機能がクライアントによって指定されている場"
"合、サーバーはパックファイルデータを多重化して送信します。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:478
msgid ""
"Each packet starting with the packet-line length of the amount of data that "
"follows, followed by a single byte specifying the sideband the following "
"data is coming in on."
msgstr ""
"各パケットは、後続のデータ量のパケット行長さで始まり、後続のデータが入ってく"
"るサイドバンドを指定する 1 バイトが続きます。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:483
msgid ""
"In 'side-band' mode, it will send up to 999 data bytes plus 1 control code, "
"for a total of up to 1000 bytes in a pkt-line.  In 'side-band-64k' mode it "
"will send up to 65519 data bytes plus 1 control code, for a total of up to "
"65520 bytes in a pkt-line."
msgstr ""
"`side-band` モードでは、最大 999 データ バイトと 1 つの制御コード、つまり合計"
"で最大 1000 バイトを pkt-line で送信します。 `side-band-64k` モードでは、最"
"大 65519 データ バイトと 1 つの制御コード、つまり合計で最大 65520 バイトを "
"pkt-line で送信します。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:488
msgid ""
"The sideband byte will be a '1', '2' or a '3'. Sideband '1' will contain "
"packfile data, sideband '2' will be used for progress information that the "
"client will generally print to stderr and sideband '3' is used for error "
"information."
msgstr ""
"サイドバンドバイトは「1」または「2」または「3」になります。 サイドバンド `1` "
"には packfile データが含まれ、サイドバンド `2` はクライアントが通常 stderr に"
"出力する進捗情報に使用され、サイドバンド `3` はエラー情報に使用されます。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:491
msgid ""
"If no 'side-band' capability was specified, the server will stream the "
"entire packfile without multiplexing."
msgstr ""
"`side-band` 機能が指定されていない場合、サーバーは多重化せずにパックファイル"
"全体をストリーミングします。"

#. type: Title ==
#: ../Documentation-sedout/gitprotocol-pack.txt:493
#, no-wrap
msgid "Pushing Data To a Server"
msgstr "Pushing Data To a Server"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:501
msgid ""
"Pushing data to a server will invoke the 'receive-pack' process on the "
"server, which will allow the client to tell it which references it should "
"update and then send all the data the server will need for those new "
"references to be complete.  Once all the data is received and validated, the "
"server will then update its references to what the client specified."
msgstr ""
"データをサーバーにプッシュすると、サーバー上で `receive-pack` プロセスが呼び"
"出されます。これにより、クライアントは更新する必要がある参照をクライアントに"
"通知し、それらの新しい参照を完結させるためにサーバーが必要とするすべてのデー"
"タを送信できます。 すべてのデータが受信されて検証(validate)されると、サーバー"
"はその参照をクライアントが指定したものに更新します。"

#. type: Title ==
#: ../Documentation-sedout/gitprotocol-pack.txt:502
#, no-wrap
msgid "Authentication"
msgstr "Authentication"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:510
msgid ""
"The protocol itself contains no authentication mechanisms.  That is to be "
"handled by the transport, such as SSH, before the 'receive-pack' process is "
"invoked.  If 'receive-pack' is configured over the Git transport, those "
"repositories will be writable by anyone who can access that port (9418) as "
"that transport is unauthenticated."
msgstr ""
"プロトコル自体には、認証メカニズムは含まれていません。 これは、 `receive-"
"pack` プロセスが呼び出される前に、SSH などの転送(transport)によって処理されま"
"す。 `receive-pack` がGit転送(transport)上で構成されている場合、その転送"
"(transport)は認証されていないため、そのポート(9418)にアクセスできる人なら誰で"
"もこれらのリポジトリに書き込みできます。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:520
msgid ""
"The reference discovery phase is done nearly the same way as it is in the "
"fetching protocol. Each reference obj-id and name on the server is sent in "
"packet-line format to the client, followed by a flush-pkt.  The only real "
"difference is that the capability listing is different - the only possible "
"values are 'report-status', 'report-status-v2', 'delete-refs', 'ofs-delta', "
"'atomic' and 'push-options'."
msgstr ""
"参照検出フェーズは、フェッチプロトコル(the fetching protocol)とほぼ同じ方法で"
"行われます。 サーバー上の各参照 obj-id と名前は、 packet-line 形式でクライア"
"ントに送信され、その後に flush-pkt が続きます。 唯一の違いは、機能リストが異"
"なることです。可能な値は、 `report-status`, `report-status-v2`, `delete-"
"refs`, `ofs-delta`, `atomic`, `push-options` のみです。"

#. type: Title ==
#: ../Documentation-sedout/gitprotocol-pack.txt:521
#, no-wrap
msgid "Reference Update Request and Packfile Transfer"
msgstr "Reference Update Request and Packfile Transfer"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:529
msgid ""
"Once the client knows what references the server is at, it can send a list "
"of reference update requests.  For each reference on the server that it "
"wants to update, it sends a line listing the obj-id currently on the server, "
"the obj-id the client would like to update it to and the name of the "
"reference."
msgstr ""
"クライアントがサーバー上にある参照を知ったら、参照更新リクエストのリストを送"
"信できます。 更新するサーバー上の参照ごとに、現在サーバー上にある obj-id と、"
"クライアントが更新したい obj-id と、参照の名前を、リストした行を送信します。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:531
msgid "This list is followed by a flush-pkt."
msgstr "このリストの後には、flush-pkt が続きます。"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:534
#, no-wrap
msgid "  update-requests   =  *shallow ( command-list | push-cert )\n"
msgstr "  update-requests   =  *shallow ( command-list | push-cert )\n"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:536
#, no-wrap
msgid "  shallow           =  PKT-LINE(\"shallow\" SP obj-id)\n"
msgstr "  shallow           =  PKT-LINE(\"shallow\" SP obj-id)\n"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:540
#, no-wrap
msgid ""
"  command-list      =  PKT-LINE(command NUL capability-list)\n"
"\t\t       *PKT-LINE(command)\n"
"\t\t       flush-pkt\n"
msgstr ""
"  command-list      =  PKT-LINE(command NUL capability-list)\n"
"\t\t       *PKT-LINE(command)\n"
"\t\t       flush-pkt\n"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:545
#, no-wrap
msgid ""
"  command           =  create / delete / update\n"
"  create            =  zero-id SP new-id  SP name\n"
"  delete            =  old-id  SP zero-id SP name\n"
"  update            =  old-id  SP new-id  SP name\n"
msgstr ""
"  command           =  create / delete / update\n"
"  create            =  zero-id SP new-id  SP name\n"
"  delete            =  old-id  SP zero-id SP name\n"
"  update            =  old-id  SP new-id  SP name\n"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:548
#, no-wrap
msgid ""
"  old-id            =  obj-id\n"
"  new-id            =  obj-id\n"
msgstr ""
"  old-id            =  obj-id\n"
"  new-id            =  obj-id\n"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:559
#, no-wrap
msgid ""
"  push-cert         = PKT-LINE(\"push-cert\" NUL capability-list LF)\n"
"\t\t      PKT-LINE(\"certificate version 0.1\" LF)\n"
"\t\t      PKT-LINE(\"pusher\" SP ident LF)\n"
"\t\t      PKT-LINE(\"pushee\" SP url LF)\n"
"\t\t      PKT-LINE(\"nonce\" SP nonce LF)\n"
"\t\t      *PKT-LINE(\"push-option\" SP push-option LF)\n"
"\t\t      PKT-LINE(LF)\n"
"\t\t      *PKT-LINE(command LF)\n"
"\t\t      *PKT-LINE(gpg-signature-lines LF)\n"
"\t\t      PKT-LINE(\"push-cert-end\" LF)\n"
msgstr ""
"  push-cert         = PKT-LINE(\"push-cert\" NUL capability-list LF)\n"
"\t\t      PKT-LINE(\"certificate version 0.1\" LF)\n"
"\t\t      PKT-LINE(\"pusher\" SP ident LF)\n"
"\t\t      PKT-LINE(\"pushee\" SP url LF)\n"
"\t\t      PKT-LINE(\"nonce\" SP nonce LF)\n"
"\t\t      *PKT-LINE(\"push-option\" SP push-option LF)\n"
"\t\t      PKT-LINE(LF)\n"
"\t\t      *PKT-LINE(command LF)\n"
"\t\t      *PKT-LINE(gpg-signature-lines LF)\n"
"\t\t      PKT-LINE(\"push-cert-end\" LF)\n"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:561
#, no-wrap
msgid "  push-option       =  1*( VCHAR | SP )\n"
msgstr "  push-option       =  1*( VCHAR | SP )\n"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:566
msgid ""
"If the server has advertised the 'push-options' capability and the client "
"has specified 'push-options' as part of the capability list above, the "
"client then sends its push options followed by a flush-pkt."
msgstr ""
"サーバーが `push-options` 機能を広告し、クライアントが上記の機能リストの一部"
"として `push-options` を指定した場合、クライアントはプッシュオプションに続い"
"て flush-pkt を送信します。"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:569
#, no-wrap
msgid "  push-options      =  *PKT-LINE(push-option) flush-pkt\n"
msgstr "  push-options      =  *PKT-LINE(push-option) flush-pkt\n"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:576
msgid ""
"For backwards compatibility with older Git servers, if the client sends a "
"push cert and push options, it MUST send its push options both embedded "
"within the push cert and after the push cert. (Note that the push options "
"within the cert are prefixed, but the push options after the cert are not.) "
"Both these lists MUST be the same, modulo the prefix."
msgstr ""
"古い Git サーバーとの下位互換性のために、クライアントがプッシュ証明書とプッ"
"シュオプションを送信する場合、プッシュ証明書内に埋め込まれたプッシュオプショ"
"ンと、プッシュ証明書の後のプッシュオプションの両方を送信する必要があります。 "
"(注意: 証明書内のプッシュオプションにはプレフィックスが付いていますが、証明書"
"の後のプッシュオプションには付いていないことに注意してください。) これらのリ"
"ストは、プレフィックスを除けば、両方とも同一でなければなりません。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:580
msgid ""
"After that the packfile that should contain all the objects that the server "
"will need to complete the new references will be sent."
msgstr ""
"その後、サーバーが新しい参照を完結させるために必要なすべてのオブジェクトを含"
"むパックファイルが送信されます。"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:583
#, no-wrap
msgid "  packfile          =  \"PACK\" 28*(OCTET)\n"
msgstr "  packfile          =  \"PACK\" 28*(OCTET)\n"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:587
msgid ""
"If the receiving end does not support delete-refs, the sending end MUST NOT "
"ask for delete command."
msgstr ""
"受信側が delete-refs をサポートしていない場合、送信側は delete コマンドを要求"
"してはなりません。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:592
msgid ""
"If the receiving end does not support push-cert, the sending end MUST NOT "
"send a push-cert command.  When a push-cert command is sent, command-list "
"MUST NOT be sent; the commands recorded in the push certificate is used "
"instead."
msgstr ""
"受信側がプッシュ証明書をサポートしていない場合、送信側はプッシュ証明書コマン"
"ドを送信してはいけません。 push-cert コマンドが送信される場合、command-list "
"は送信してはいけません。 代わりに、プッシュ証明書に記録されているコマンド"
"(commands)が使用されます。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:594
msgid "The packfile MUST NOT be sent if the only command used is 'delete'."
msgstr ""
"使用されるコマンドが `delete` のみの場合、パックファイルを送信してはなりませ"
"ん。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:600
#, no-wrap
msgid ""
"A packfile MUST be sent if either create or update command is used,\n"
"even if the server already has all the necessary objects.  In this\n"
"case the client MUST send an empty packfile.   The only time this\n"
"is likely to happen is if the client is creating\n"
"a new branch or a tag that points to an existing obj-id.\n"
msgstr ""
"create または update コマンドを使用する場合は、サーバーに必要なすべての\n"
"オブジェクトが既にある場合でも、パックファイルを送信する必要があります。\n"
"の場合、クライアントは空のパックファイルを送信する必要があります。\n"
"クライアントが既存の obj-id を指す新しいブランチまたはタグを\n"
"作成している場合に、これが発生する可能性が高いです。\n"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:606
msgid ""
"The server will receive the packfile, unpack it, then validate each "
"reference that is being updated that it hasn't changed while the request was "
"being processed (the obj-id is still the same as the old-id), and it will "
"run any update hooks to make sure that the update is acceptable.  If all of "
"that is fine, the server will then update the references."
msgstr ""
"サーバーはパックファイルを受け取り、アンパックし、更新中の各参照がリクエスト"
"の処理中に変更されていないこと(obj-id は古い old-id と同一のままでである)を検"
"証(validate)し、更新フックを実行して、更新が受け入れられることを確かめます。 "
"すべて問題なければ、サーバーは参照を更新します。"

#. type: Title ==
#: ../Documentation-sedout/gitprotocol-pack.txt:607
#, no-wrap
msgid "Push Certificate"
msgstr "Push Certificate"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:614
msgid ""
"A push certificate begins with a set of header lines.  After the header and "
"an empty line, the protocol commands follow, one per line. Note that the "
"trailing LF in push-cert PKT-LINEs is _not_ optional; it must be present."
msgstr ""
"プッシュ証明書は一連のヘッダー行で始まります。 ヘッダーと1行の空行の後に、プ"
"ロトコル コマンドが 1 行に 1 つずつ続きます。 push-cert PKT-LINE の末尾の LF "
"は「オプションでは無い」ことに注意してください。 しかし push-cert PKT-LINE の"
"末尾の LF は存在していなければなりません。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:616
msgid "Currently, the following header fields are defined:"
msgstr "現在、以下のヘッダーフィールドが定義されています:"

#. type: Labeled list
#: ../Documentation-sedout/gitprotocol-pack.txt:617
#, no-wrap
msgid "`pusher` ident"
msgstr "`pusher` ID"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:620
msgid "Identify the GPG key in \"Human Readable Name <email@address>\" format."
msgstr "`Human Readable Name <email@address>` 形式で GPG キーを識別します。"

#. type: Labeled list
#: ../Documentation-sedout/gitprotocol-pack.txt:621
#, no-wrap
msgid "`pushee` url"
msgstr "`pushee` URL"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:625
msgid ""
"The repository URL (anonymized, if the URL contains authentication material) "
"the user who ran `git push` intended to push into."
msgstr ""
"`git push` を実行したユーザーがプッシュしようとしていたリポジトリ URL (URL に"
"認証情報が含まれている場合は匿名化)。"

#. type: Labeled list
#: ../Documentation-sedout/gitprotocol-pack.txt:626
#, no-wrap
msgid "`nonce` nonce"
msgstr "`nonce` ノンス"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:630
msgid ""
"The 'nonce' string the receiving repository asked the pushing user to "
"include in the certificate, to prevent replay attacks."
msgstr ""
"リプレイ攻撃(replay attacks)を防ぐために、受信リポジトリ側がプッシュするユー"
"ザーに証明書に含めるように要求した「ノンス」(nonce)文字列。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:635
msgid ""
"The GPG signature lines are a detached signature for the contents recorded "
"in the push certificate before the signature block begins.  The detached "
"signature is used to certify that the commands were given by the pusher, who "
"must be the signer."
msgstr ""
"GPG 署名行は、署名ブロックが開始される前にプッシュ証明書に記録された、コンテ"
"ンツから切り離された署名(detached signature)です。 切り離された署名(detached "
"signature)は、署名者(signer)でなければならないプッシャー(pusher)によってコマ"
"ンドが与えられたことを証明するために使用されます。"

#. type: Title ==
#: ../Documentation-sedout/gitprotocol-pack.txt:636
#, no-wrap
msgid "Report Status"
msgstr "Report Status"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:646
msgid ""
"After receiving the pack data from the sender, the receiver sends a report "
"if 'report-status' or 'report-status-v2' capability is in effect.  It is a "
"short listing of what happened in that update.  It will first list the "
"status of the packfile unpacking as either 'unpack ok' or 'unpack [error]'.  "
"Then it will list the status for each of the references that it tried to "
"update.  Each line is either 'ok [refname]' if the update was successful, or "
"'ng [refname] [error]' if the update was not."
msgstr ""
"送信側からパックデータを受信した後、 `report-status` または `report-status` "
"機能が有効な場合、受信側はレポートを送信します。 これは、その更新で何が起こっ"
"たかの短いリストです。 最初に、パックファイルのアンパックのステータスが "
"`unpack ok` または `unpack [error]` としてリストされます。 次に、更新しようと"
"した各参照のステータスを一覧表示します。 各行は、更新が成功した場合は `ok "
"[refname]` 、更新が失敗した場合は `ng [refname] [error]` の、いずれかです。"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:651
#, no-wrap
msgid ""
"  report-status     = unpack-status\n"
"\t\t      1*(command-status)\n"
"\t\t      flush-pkt\n"
msgstr ""
"  report-status     = unpack-status\n"
"\t\t      1*(command-status)\n"
"\t\t      flush-pkt\n"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:654
#: ../Documentation-sedout/gitprotocol-pack.txt:675
#, no-wrap
msgid ""
"  unpack-status     = PKT-LINE(\"unpack\" SP unpack-result)\n"
"  unpack-result     = \"ok\" / error-msg\n"
msgstr ""
"  unpack-status     = PKT-LINE(\"unpack\" SP unpack-result)\n"
"  unpack-result     = \"ok\" / error-msg\n"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:658
#, no-wrap
msgid ""
"  command-status    = command-ok / command-fail\n"
"  command-ok        = PKT-LINE(\"ok\" SP refname)\n"
"  command-fail      = PKT-LINE(\"ng\" SP refname SP error-msg)\n"
msgstr ""
"  command-status    = command-ok / command-fail\n"
"  command-ok        = PKT-LINE(\"ok\" SP refname)\n"
"  command-fail      = PKT-LINE(\"ng\" SP refname SP error-msg)\n"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:660
#: ../Documentation-sedout/gitprotocol-pack.txt:684
#, no-wrap
msgid "  error-msg         = 1*(OCTET) ; where not \"ok\"\n"
msgstr "  error-msg         = 1*(OCTET) ; where not \"ok\"\n"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:667
msgid ""
"The 'report-status-v2' capability extends the protocol by adding new option "
"lines in order to support reporting of reference rewritten by the 'proc-"
"receive' hook.  The 'proc-receive' hook may handle a command for a pseudo-"
"reference which may create or update one or more references, and each "
"reference may have different name, different new-oid, and different old-oid."
msgstr ""
"`report-status-v2` 機能は、 `proc-receive` フックによって書き換え(rewritten)"
"られた参照のレポートをサポートするために、新しいオプション行を追加してプロト"
"コルを拡張(extend)します。 `proc-receive` フックは、1 つまたは複数の参照を作"
"成または更新する疑似参照(pseudo-reference)のコマンドを処理できます。各参照"
"は、異なる名前と、異なる new-oidと、異なる old-oid を、持つことができます。"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:672
#, no-wrap
msgid ""
"  report-status-v2  = unpack-status\n"
"\t\t      1*(command-status-v2)\n"
"\t\t      flush-pkt\n"
msgstr ""
"  report-status-v2  = unpack-status\n"
"\t\t      1*(command-status-v2)\n"
"\t\t      flush-pkt\n"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:679
#, no-wrap
msgid ""
"  command-status-v2 = command-ok-v2 / command-fail\n"
"  command-ok-v2     = command-ok\n"
"\t\t      *option-line\n"
msgstr ""
"  command-status-v2 = command-ok-v2 / command-fail\n"
"  command-ok-v2     = command-ok\n"
"\t\t      *option-line\n"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:682
#, no-wrap
msgid ""
"  command-ok        = PKT-LINE(\"ok\" SP refname)\n"
"  command-fail      = PKT-LINE(\"ng\" SP refname SP error-msg)\n"
msgstr ""
"  command-ok        = PKT-LINE(\"ok\" SP refname)\n"
"  command-fail      = PKT-LINE(\"ng\" SP refname SP error-msg)\n"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:689
#, no-wrap
msgid ""
"  option-line       = *1(option-refname)\n"
"\t\t      *1(option-old-oid)\n"
"\t\t      *1(option-new-oid)\n"
"\t\t      *1(option-forced-update)\n"
msgstr ""
"  option-line       = *1(option-refname)\n"
"\t\t      *1(option-old-oid)\n"
"\t\t      *1(option-new-oid)\n"
"\t\t      *1(option-forced-update)\n"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:694
#, no-wrap
msgid ""
"  option-refname    = PKT-LINE(\"option\" SP \"refname\" SP refname)\n"
"  option-old-oid    = PKT-LINE(\"option\" SP \"old-oid\" SP obj-id)\n"
"  option-new-oid    = PKT-LINE(\"option\" SP \"new-oid\" SP obj-id)\n"
"  option-force      = PKT-LINE(\"option\" SP \"forced-update\")\n"
msgstr ""
"  option-refname    = PKT-LINE(\"option\" SP \"refname\" SP refname)\n"
"  option-old-oid    = PKT-LINE(\"option\" SP \"old-oid\" SP obj-id)\n"
"  option-new-oid    = PKT-LINE(\"option\" SP \"new-oid\" SP obj-id)\n"
"  option-force      = PKT-LINE(\"option\" SP \"forced-update\")\n"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:703
msgid ""
"Updates can be unsuccessful for a number of reasons.  The reference can have "
"changed since the reference discovery phase was originally sent, meaning "
"someone pushed in the meantime.  The reference being pushed could be a non-"
"fast-forward reference and the update hooks or configuration could be set to "
"not allow that, etc.  Also, some references can be updated while others can "
"be rejected."
msgstr ""
"更新は、さまざまな理由で失敗する可能性があります。 参照検出フェーズが最初に送"
"信されてから参照が変更された可能性があります。つまり、その間に誰かがプッシュ"
"したことを意味します。 プッシュされる参照は非早送り(non-fast-forward)参照であ"
"る可能性があり、更新フックまたは構成がそれを許可しないように設定されている可"
"能性があります。 また、一部の参照は更新できまるけど、他の参照は拒否とかできま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:705
msgid "An example client/server communication might look like this:"
msgstr "クライアント/サーバー 通信の例は以下のようになります:"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:712
#, no-wrap
msgid ""
"   S: 006274730d410fcb6603ace96f1dc55ea6196122532d refs/heads/local\\0report-status delete-refs ofs-delta\\n\n"
"   S: 003e7d1665144a3a975c05f1f43902ddaf084e784dbe refs/heads/debug\\n\n"
"   S: 003f74730d410fcb6603ace96f1dc55ea6196122532d refs/heads/master\\n\n"
"   S: 003d74730d410fcb6603ace96f1dc55ea6196122532d refs/heads/team\\n\n"
"   S: 0000\n"
msgstr ""
"   S: 006274730d410fcb6603ace96f1dc55ea6196122532d refs/heads/local\\0report-status delete-refs ofs-delta\\n\n"
"   S: 003e7d1665144a3a975c05f1f43902ddaf084e784dbe refs/heads/debug\\n\n"
"   S: 003f74730d410fcb6603ace96f1dc55ea6196122532d refs/heads/master\\n\n"
"   S: 003d74730d410fcb6603ace96f1dc55ea6196122532d refs/heads/team\\n\n"
"   S: 0000\n"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:717
#, no-wrap
msgid ""
"   C: 00677d1665144a3a975c05f1f43902ddaf084e784dbe 74730d410fcb6603ace96f1dc55ea6196122532d refs/heads/debug\\n\n"
"   C: 006874730d410fcb6603ace96f1dc55ea6196122532d 5a3f6be755bbb7deae50065988cbfa1ffa9ab68a refs/heads/master\\n\n"
"   C: 0000\n"
"   C: [PACKDATA]\n"
msgstr ""
"   C: 00677d1665144a3a975c05f1f43902ddaf084e784dbe 74730d410fcb6603ace96f1dc55ea6196122532d refs/heads/debug\\n\n"
"   C: 006874730d410fcb6603ace96f1dc55ea6196122532d 5a3f6be755bbb7deae50065988cbfa1ffa9ab68a refs/heads/master\\n\n"
"   C: 0000\n"
"   C: [PACKDATA]\n"

#. type: delimited block -
#: ../Documentation-sedout/gitprotocol-pack.txt:721
#, no-wrap
msgid ""
"   S: 000eunpack ok\\n\n"
"   S: 0018ok refs/heads/debug\\n\n"
"   S: 002ang refs/heads/master non-fast-forward\\n\n"
msgstr ""
"   S: 000eunpack ok\\n\n"
"   S: 0018ok refs/heads/debug\\n\n"
"   S: 002ang refs/heads/master non-fast-forward\\n\n"

#. type: Title -
#: ../Documentation-sedout/gitprotocol-pack.txt:724
#, no-wrap
msgid "GIT"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitprotocol-pack.txt:725
msgid "Part of the linkgit:git[1] suite"
msgstr ""
