# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-11-04 04:38+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/git-sparse-checkout.txt:2
#, no-wrap
msgid "git-sparse-checkout(1)"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-sparse-checkout.txt:5
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:9
msgid ""
"git-sparse-checkout - Initialize and modify the sparse-checkout "
"configuration, which reduces the checkout to a set of paths given by a list "
"of patterns."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-sparse-checkout.txt:12
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:15
#, no-wrap
msgid "'git sparse-checkout <subcommand> [options]'\n"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-sparse-checkout.txt:18
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:22
msgid ""
"Initialize and modify the sparse-checkout configuration, which reduces the "
"checkout to a set of paths given by a list of patterns."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:26
msgid ""
"THIS COMMAND IS EXPERIMENTAL. ITS BEHAVIOR, AND THE BEHAVIOR OF OTHER "
"COMMANDS IN THE PRESENCE OF SPARSE-CHECKOUTS, WILL LIKELY CHANGE IN THE "
"FUTURE."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-sparse-checkout.txt:29
#, no-wrap
msgid "COMMANDS"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-sparse-checkout.txt:30
#, no-wrap
msgid "'list'"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:32
msgid "Describe the patterns in the sparse-checkout file."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-sparse-checkout.txt:33
#, no-wrap
msgid "'init'"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:40
msgid ""
"Enable the `core.sparseCheckout` setting. If the sparse-checkout file does "
"not exist, then populate it with patterns that match every file in the root "
"directory and no other directories, then will remove all directories tracked "
"by Git. Add patterns to the sparse-checkout file to repopulate the working "
"directory."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:44
msgid ""
"To avoid interfering with other worktrees, it first enables the `extensions."
"worktreeConfig` setting and makes sure to set the `core.sparseCheckout` "
"setting in the worktree-specific config file."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:48
msgid ""
"When `--cone` is provided, the `core.sparseCheckoutCone` setting is also "
"set, allowing for better performance with a limited set of patterns (see "
"'CONE PATTERN SET' below)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:55
msgid ""
"Use the `--[no-]sparse-index` option to toggle the use of the sparse index "
"format. This reduces the size of the index to be more closely aligned with "
"your sparse-checkout definition. This can have significant performance "
"advantages for commands such as `git status` or `git add`.  This feature is "
"still experimental. Some commands might be slower with a sparse index until "
"they are properly integrated with the feature."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:62
#, no-wrap
msgid ""
"**WARNING:** Using a sparse index requires modifying the index in a way\n"
"that is not completely understood by external tools. If you have trouble\n"
"with this compatibility, then run `git sparse-checkout init --no-sparse-index`\n"
"to rewrite your index to not be sparse. Older versions of Git will not\n"
"understand the sparse directory entries index extension and may fail to\n"
"interact with your repository until it is disabled.\n"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-sparse-checkout.txt:63
#, no-wrap
msgid "'set'"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:68
msgid ""
"Write a set of patterns to the sparse-checkout file, as given as a list of "
"arguments following the 'set' subcommand. Update the working directory to "
"match the new patterns. Enable the core.sparseCheckout config setting if it "
"is not already enabled."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:71
msgid ""
"When the `--stdin` option is provided, the patterns are read from standard "
"in as a newline-delimited list instead of from the arguments."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:79
msgid ""
"When `core.sparseCheckoutCone` is enabled, the input list is considered a "
"list of directories instead of sparse-checkout patterns. The command writes "
"patterns to the sparse-checkout file to include all files contained in those "
"directories (recursively) as well as files that are siblings of ancestor "
"directories. The input format matches the output of `git ls-tree --name-"
"only`.  This includes interpreting pathnames that begin with a double quote "
"(\") as C-style quoted strings."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-sparse-checkout.txt:80
#, no-wrap
msgid "'add'"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:86
msgid ""
"Update the sparse-checkout file to include additional patterns.  By default, "
"these patterns are read from the command-line arguments, but they can be "
"read from stdin using the `--stdin` option. When `core.sparseCheckoutCone` "
"is enabled, the given patterns are interpreted as directory names as in the "
"'set' subcommand."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-sparse-checkout.txt:87
#, no-wrap
msgid "'reapply'"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:96
msgid ""
"Reapply the sparsity pattern rules to paths in the working tree.  Commands "
"like merge or rebase can materialize paths to do their work (e.g. in order "
"to show you a conflict), and other sparse-checkout commands might fail to "
"sparsify an individual file (e.g. because it has unstaged changes or "
"conflicts).  In such cases, it can make sense to run `git sparse-checkout "
"reapply` later after cleaning up affected paths (e.g. resolving conflicts, "
"undoing or committing changes, etc.)."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-sparse-checkout.txt:97
#, no-wrap
msgid "'disable'"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:102
msgid ""
"Disable the `core.sparseCheckout` config setting, and restore the working "
"directory to include all files. Leaves the sparse-checkout file intact so a "
"later 'git sparse-checkout init' command may return the working directory to "
"the same state."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-sparse-checkout.txt:104
#, no-wrap
msgid "SPARSE CHECKOUT"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:113
msgid ""
"\"Sparse checkout\" allows populating the working directory sparsely.  It "
"uses the skip-worktree bit (see linkgit:git-update-index[1]) to tell Git "
"whether a file in the working directory is worth looking at. If the skip-"
"worktree bit is set, then the file is ignored in the working directory. Git "
"will not populate the contents of those files, which makes a sparse checkout "
"helpful when working in a repository with many files, but only a few are "
"important to the current user."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:119
msgid ""
"The `$GIT_DIR/info/sparse-checkout` file is used to define the skip-worktree "
"reference bitmap. When Git updates the working directory, it updates the "
"skip-worktree bits in the index based on this file. The files matching the "
"patterns in the file will appear in the working directory, and the rest will "
"not."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:124
msgid ""
"To enable the sparse-checkout feature, run `git sparse-checkout init` to "
"initialize a simple sparse-checkout file and enable the `core."
"sparseCheckout` config setting. Then, run `git sparse-checkout set` to "
"modify the patterns in the sparse-checkout file."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:127
msgid ""
"To repopulate the working directory with all files, use the `git sparse-"
"checkout disable` command."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-sparse-checkout.txt:130
#, no-wrap
msgid "FULL PATTERN SET"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:134
msgid ""
"By default, the sparse-checkout file uses the same syntax as `.gitignore` "
"files."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:138
msgid ""
"While `$GIT_DIR/info/sparse-checkout` is usually used to specify what files "
"are included, you can also specify what files are _not_ included, using "
"negative patterns. For example, to remove the file `unwanted`:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-sparse-checkout.txt:142
#, no-wrap
msgid ""
"/*\n"
"!unwanted\n"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-sparse-checkout.txt:146
#, no-wrap
msgid "CONE PATTERN SET"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:153
msgid ""
"The full pattern set allows for arbitrary pattern matches and complicated "
"inclusion/exclusion rules. These can result in O(N*M) pattern matches when "
"updating the index, where N is the number of patterns and M is the number of "
"paths in the index. To combat this performance issue, a more restricted "
"pattern set is allowed when `core.sparseCheckoutCone` is enabled."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:155
msgid "The accepted patterns in the cone pattern set are:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:157
#, no-wrap
msgid "*Recursive:* All paths inside a directory are included.\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:159
#, no-wrap
msgid "*Parent:* All files immediately inside a directory are included.\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:163
msgid ""
"In addition to the above two patterns, we also expect that all files in the "
"root directory are included. If a recursive pattern is added, then all "
"leading directories are added as parent patterns."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:167
msgid ""
"By default, when running `git sparse-checkout init`, the root directory is "
"added as a parent pattern. At this point, the sparse-checkout file contains "
"the following patterns:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-sparse-checkout.txt:171
#, no-wrap
msgid ""
"/*\n"
"!/*/\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:174
msgid ""
"This says \"include everything in root, but nothing two levels below root.\""
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:180
msgid ""
"When in cone mode, the `git sparse-checkout set` subcommand takes a list of "
"directories instead of a list of sparse-checkout patterns. In this mode, the "
"command `git sparse-checkout set A/B/C` sets the directory `A/B/C` as a "
"recursive pattern, the directories `A` and `A/B` are added as parent "
"patterns. The resulting sparse-checkout file is now"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-sparse-checkout.txt:189
#, no-wrap
msgid ""
"/*\n"
"!/*/\n"
"/A/\n"
"!/A/*/\n"
"/A/B/\n"
"!/A/B/*/\n"
"/A/B/C/\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:193
msgid ""
"Here, order matters, so the negative patterns are overridden by the positive "
"patterns that appear lower in the file."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:198
msgid ""
"If `core.sparseCheckoutCone=true`, then Git will parse the sparse-checkout "
"file expecting patterns of these types. Git will warn if the patterns do not "
"match.  If the patterns do match the expected format, then Git will use "
"faster hash- based algorithms to compute inclusion in the sparse-checkout."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:202
msgid ""
"In the cone mode case, the `git sparse-checkout list` subcommand will list "
"the directories that define the recursive patterns. For the example sparse-"
"checkout file above, the output is as follows:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-sparse-checkout.txt:206
#, no-wrap
msgid ""
"$ git sparse-checkout list\n"
"A/B/C\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:212
msgid ""
"If `core.ignoreCase=true`, then the pattern-matching algorithm will use a "
"case-insensitive check. This corrects for case mismatched filenames in the "
"'git sparse-checkout set' command to reflect the expected cone in the "
"working directory."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:222
msgid ""
"When changing the sparse-checkout patterns in cone mode, Git will inspect "
"each tracked directory that is not within the sparse-checkout cone to see if "
"it contains any untracked files. If all of those files are ignored due to "
"the `.gitignore` patterns, then the directory will be deleted. If any of the "
"untracked files within that directory is not ignored, then no deletions will "
"occur within that directory and a warning message will appear. If these "
"files are important, then reset your sparse-checkout definition so they are "
"included, use `git add` and `git commit` to store them, then remove any "
"remaining files manually to ensure Git can behave optimally."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-sparse-checkout.txt:225
#, no-wrap
msgid "SUBMODULES"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:236
msgid ""
"If your repository contains one or more submodules, then submodules are "
"populated based on interactions with the `git submodule` command.  "
"Specifically, `git submodule init -- <path>` will ensure the submodule at "
"`<path>` is present, while `git submodule deinit [-f] -- <path>` will remove "
"the files for the submodule at `<path>` (including any untracked files, "
"uncommitted changes, and unpushed history).  Similar to how sparse-checkout "
"removes files from the working tree but still leaves entries in the index, "
"deinitialized submodules are removed from the working directory but still "
"have an entry in the index."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:246
msgid ""
"Since submodules may have unpushed changes or untracked files, removing them "
"could result in data loss.  Thus, changing sparse inclusion/exclusion rules "
"will not cause an already checked out submodule to be removed from the "
"working copy.  Said another way, just as `checkout` will not cause "
"submodules to be automatically removed or initialized even when switching "
"between branches that remove or add submodules, using `sparse-checkout` to "
"reduce or expand the scope of \"interesting\" files will not cause "
"submodules to be automatically deinitialized or initialized either."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:253
msgid ""
"Further, the above facts mean that there are multiple reasons that \"tracked"
"\" files might not be present in the working copy: sparsity pattern "
"application from sparse-checkout, and submodule initialization state.  Thus, "
"commands like `git grep` that work on tracked files in the working copy may "
"return results that are limited by either or both of these restrictions."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-sparse-checkout.txt:256
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:260
msgid "linkgit:git-read-tree[1] linkgit:gitignore[5]"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-sparse-checkout.txt:262
#, no-wrap
msgid "GIT"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-sparse-checkout.txt:263
msgid "Part of the linkgit:git[1] suite"
msgstr ""
