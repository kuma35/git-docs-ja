# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-11-04 04:38+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/gitcli.txt:2
#, no-wrap
msgid "gitcli(7)"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/gitcli.txt:5
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:7
msgid "gitcli - Git command-line interface and conventions"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/gitcli.txt:9
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:11
msgid "gitcli"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/gitcli.txt:14
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:17
msgid "This manual describes the convention used throughout Git CLI."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:21
msgid ""
"Many commands take revisions (most often \"commits\", but sometimes \"tree-"
"ish\", depending on the context and command) and paths as their arguments.  "
"Here are the rules:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:26
msgid ""
"Revisions come first and then paths.  E.g. in `git diff v1.0 v2.0 arch/x86 "
"include/asm-x86`, `v1.0` and `v2.0` are revisions and `arch/x86` and "
"`include/asm-x86` are paths."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:34
msgid ""
"When an argument can be misunderstood as either a revision or a path, they "
"can be disambiguated by placing `--` between them.  E.g. `git diff -- HEAD` "
"is, \"I have a file called HEAD in my work tree.  Please show changes "
"between the version I staged in the index and what I have in the work tree "
"for that file\", not \"show difference between the HEAD commit and the work "
"tree as a whole\".  You can say `git diff HEAD --` to ask for the latter."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:40
msgid ""
"Without disambiguating `--`, Git makes a reasonable guess, but errors out "
"and asking you to disambiguate when ambiguous.  E.g. if you have a file "
"called HEAD in your work tree, `git diff HEAD` is ambiguous, and you have to "
"say either `git diff HEAD --` or `git diff -- HEAD` to disambiguate."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:46
msgid ""
"Because `--` disambiguates revisions and paths in some commands, it cannot "
"be used for those commands to separate options and revisions.  You can use "
"`--end-of-options` for this (it also works for commands that do not "
"distinguish between revisions in paths, in which case it is simply an alias "
"for `--`)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:50
msgid ""
"When writing a script that is expected to handle random user-input, it is a "
"good practice to make it explicit which arguments are which by placing "
"disambiguating `--` at appropriate places."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:54
msgid ""
"Many commands allow wildcards in paths, but you need to protect them from "
"getting globbed by the shell.  These two mean different things:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitcli.txt:58
#, no-wrap
msgid ""
"$ git restore *.c\n"
"$ git restore \\*.c\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:67
msgid ""
"The former lets your shell expand the fileglob, and you are asking the dot-C "
"files in your working tree to be overwritten with the version in the index.  "
"The latter passes the `*.c` to Git, and you are asking the paths in the "
"index that match the pattern to be checked out to your working tree.  After "
"running `git add hello.c; rm hello.c`, you will _not_ see `hello.c` in your "
"working tree with the former, but with the latter you will."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:71
msgid ""
"Just as the filesystem '.' (period) refers to the current directory, using a "
"'.' as a repository name in Git (a dot-repository) is a relative path and "
"means your current repository."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:74
msgid ""
"Here are the rules regarding the \"flags\" that you should follow when you "
"are scripting Git:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:77
msgid ""
"it's preferred to use the non-dashed form of Git commands, which means that "
"you should prefer `git foo` to `git-foo`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:80
msgid ""
"splitting short options to separate words (prefer `git foo -a -b` to `git "
"foo -ab`, the latter may not even work)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:86
msgid ""
"when a command-line option takes an argument, use the 'stuck' form.  In "
"other words, write `git foo -oArg` instead of `git foo -o Arg` for short "
"options, and `git foo --long-opt=Arg` instead of `git foo --long-opt Arg` "
"for long options.  An option that takes optional option-argument must be "
"written in the 'stuck' form."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:91
msgid ""
"when you give a revision parameter to a command, make sure the parameter is "
"not ambiguous with a name of a file in the work tree.  E.g. do not write "
"`git log -1 HEAD` but write `git log -1 HEAD --`; the former will not work "
"if you happen to have a file called `HEAD` in the work tree."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:99
msgid ""
"many commands allow a long option `--option` to be abbreviated only to their "
"unique prefix (e.g. if there is no other option whose name begins with "
"`opt`, you may be able to spell `--opt` to invoke the `--option` flag), but "
"you should fully spell them out when writing your scripts; later versions of "
"Git may introduce a new option whose name shares the same prefix, e.g. `--"
"optimize`, to make a short prefix that used to be unique no longer unique."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/gitcli.txt:102
#, no-wrap
msgid "ENHANCED OPTION PARSER"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:105
msgid ""
"From the Git 1.5.4 series and further, many Git commands (not all of them at "
"the time of the writing though) come with an enhanced option parser."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:107
msgid "Here is a list of the facilities provided by this option parser."
msgstr ""

#. type: Title ~
#: ../Documentation-sedout/gitcli.txt:110
#, no-wrap
msgid "Magic Options"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:113
msgid ""
"Commands which have the enhanced option parser activated all understand a "
"couple of magic command-line options:"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/gitcli.txt:114
#, no-wrap
msgid "`-h`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:116
msgid "gives a pretty printed usage of the command."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitcli.txt:121
#, no-wrap
msgid ""
"$ git describe -h\n"
"usage: git describe [<options>] <commit-ish>*\n"
"   or: git describe [<options>] --dirty\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitcli.txt:128
#, no-wrap
msgid ""
"    --contains            find the tag that comes after the commit\n"
"    --debug               debug search strategy on stderr\n"
"    --all                 use any ref\n"
"    --tags                use any tag, even unannotated\n"
"    --long                always use long format\n"
"    --abbrev[=<n>]        use <n> digits to display SHA-1s\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:134
msgid ""
"Note that some subcommand (e.g. `git grep`) may behave differently when "
"there are things on the command line other than `-h`, but `git subcmd -h` "
"without anything else on the command line is meant to consistently give the "
"usage."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/gitcli.txt:135
#, no-wrap
msgid "`--help-all`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:139
msgid ""
"Some Git commands take options that are only used for plumbing or that are "
"deprecated, and such options are hidden from the default usage. This option "
"gives the full list of options."
msgstr ""

#. type: Title ~
#: ../Documentation-sedout/gitcli.txt:142
#, no-wrap
msgid "Negating options"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:147
msgid ""
"Options with long option names can be negated by prefixing `--no-`. For "
"example, `git branch` has the option `--track` which is 'on' by default. You "
"can use `--no-track` to override that behaviour. The same goes for `--color` "
"and `--no-color`."
msgstr ""

#. type: Title ~
#: ../Documentation-sedout/gitcli.txt:150
#, no-wrap
msgid "Aggregating short options"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:154
msgid ""
"Commands that support the enhanced option parser allow you to aggregate "
"short options. This means that you can for example use `git rm -rf` or `git "
"clean -fdx`."
msgstr ""

#. type: Title ~
#: ../Documentation-sedout/gitcli.txt:157
#, no-wrap
msgid "Abbreviating long options"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:164
msgid ""
"Commands that support the enhanced option parser accepts unique prefix of a "
"long option as if it is fully spelled out, but use this with a caution.  For "
"example, `git commit --amen` behaves as if you typed `git commit --amend`, "
"but that is true only until a later version of Git introduces another option "
"that shares the same prefix, e.g. `git commit --amenity` option."
msgstr ""

#. type: Title ~
#: ../Documentation-sedout/gitcli.txt:167
#, no-wrap
msgid "Separating argument from the option"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:170
msgid ""
"You can write the mandatory option parameter to an option as a separate word "
"on the command line.  That means that all the following uses work:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitcli.txt:176
#, no-wrap
msgid ""
"$ git foo --long-opt=Arg\n"
"$ git foo --long-opt Arg\n"
"$ git foo -oArg\n"
"$ git foo -o Arg\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:180
msgid ""
"However, this is *NOT* allowed for switches with an optional value, where "
"the 'stuck' form must be used:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitcli.txt:184
#, no-wrap
msgid ""
"$ git describe --abbrev HEAD     # correct\n"
"$ git describe --abbrev=10 HEAD  # correct\n"
"$ git describe --abbrev 10 HEAD  # NOT WHAT YOU MEANT\n"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/gitcli.txt:188
#, no-wrap
msgid "NOTES ON FREQUENTLY CONFUSED OPTIONS"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:196
msgid ""
"Many commands that can work on files in the working tree and/or in the index "
"can take `--cached` and/or `--index` options.  Sometimes people incorrectly "
"think that, because the index was originally called cache, these two are "
"synonyms.  They are *not* -- these two options mean very different things."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:204
msgid ""
"The `--cached` option is used to ask a command that usually works on files "
"in the working tree to *only* work with the index.  For example, `git grep`, "
"when used without a commit to specify from which commit to look for strings "
"in, usually works on files in the working tree, but with the `--cached` "
"option, it looks for strings in the index."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:211
msgid ""
"The `--index` option is used to ask a command that usually works on files in "
"the working tree to *also* affect the index.  For example, `git stash apply` "
"usually merges changes recorded in a stash entry to the working tree, but "
"with the `--index` option, it also merges changes to the index as well."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:218
msgid ""
"`git apply` command can be used with `--cached` and `--index` (but not at "
"the same time).  Usually the command only affects the files in the working "
"tree, but with `--index`, it patches both the files and their index entries, "
"and with `--cached`, it modifies only the index entries."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:222
msgid ""
"See also https://lore.kernel.org/git/7v64clg5u9.fsf@assigned-by-dhcp.cox."
"net/ and https://lore.kernel.org/git/7vy7ej9g38.fsf@gitster.siamese.dyndns."
"org/ for further information."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:225
msgid ""
"Some other commands that also work on files in the working tree and/or in "
"the index can take `--staged` and/or `--worktree`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:228
msgid ""
"`--staged` is exactly like `--cached`, which is used to ask a command to "
"only work on the index, not the working tree."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:231
msgid ""
"`--worktree` is the opposite, to ask a command to work on the working tree "
"only, not the index."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:234
msgid ""
"The two options can be specified together to ask a command to work on both "
"the index and the working tree."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/gitcli.txt:236
#, no-wrap
msgid "GIT"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:237
msgid "Part of the linkgit:git[1] suite"
msgstr ""
