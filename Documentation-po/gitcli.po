# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 0.0\n"
"POT-Creation-Date: 2022-09-24 21:40+0900\n"
"PO-Revision-Date: 2022-02-16 08:01+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/gitcli.txt:2
#, no-wrap
msgid "gitcli(7)"
msgstr "gitcli(7)"

#. type: Title -
#: ../Documentation-sedout/gitcli.txt:5
#, no-wrap
msgid "NAME"
msgstr "NAME"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:7
msgid "gitcli - Git command-line interface and conventions"
msgstr "gitcli - Gitコマンドラインのインターフェイスと規則"

#. type: Title -
#: ../Documentation-sedout/gitcli.txt:9
#, no-wrap
msgid "SYNOPSIS"
msgstr "SYNOPSIS"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:11
msgid "gitcli"
msgstr "gitcli"

#. type: Title -
#: ../Documentation-sedout/gitcli.txt:14
#, no-wrap
msgid "DESCRIPTION"
msgstr "DESCRIPTION"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:17
msgid "This manual describes the convention used throughout Git CLI."
msgstr "このマニュアルでは Git CLI 全体で使用される規則について説明します。"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:21
msgid ""
"Many commands take revisions (most often \"commits\", but sometimes \"tree-"
"ish\", depending on the context and command) and paths as their arguments.  "
"Here are the rules:"
msgstr ""
"多くのコマンドは、引数としてリビジョン(revisions)(それはほとんどの場合「コ"
"ミット」(commits)ですが、文脈とコマンドによっては「ツリーっぽい」(tree-ish)場"
"合もあります)と、パス(paths)を取ります。ルールは以下のとおりです:"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:23
msgid "Options come first and then args."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:30
#, no-wrap
msgid ""
"A subcommand may take dashed options (which may take their own\n"
"arguments, e.g. \"--max-parents 2\") and arguments.  You SHOULD\n"
"give dashed options first and then arguments.  Some commands may\n"
"accept dashed options after you have already gave non-option\n"
"arguments (which may make the command ambiguous), but you should\n"
"not rely on it (because eventually we may find a way to fix\n"
"these ambiguity by enforcing the \"options then args\" rule).\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:35
msgid ""
"Revisions come first and then paths.  E.g. in `git diff v1.0 v2.0 arch/x86 "
"include/asm-x86`, `v1.0` and `v2.0` are revisions and `arch/x86` and "
"`include/asm-x86` are paths."
msgstr ""
"リビジョン達が最初に来て、その次にパス達が来ます。 例えば、 `git diff v1.0 "
"v2.0 arch/x86 include/asm-x86` では `v1.0` と `v2.0` はリビジョン達であり、 "
"`arch/x86` と `include/asm-x86` はパス達です。"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:43
msgid ""
"When an argument can be misunderstood as either a revision or a path, they "
"can be disambiguated by placing `--` between them.  E.g. `git diff -- HEAD` "
"is, \"I have a file called HEAD in my work tree.  Please show changes "
"between the version I staged in the index and what I have in the work tree "
"for that file\", not \"show difference between the HEAD commit and the work "
"tree as a whole\".  You can say `git diff HEAD --` to ask for the latter."
msgstr ""
"引数がリビジョンまたはパスのいずれかと誤解される可能性がある場合は、それらの"
"間に `--` を配置することで曖昧さを解消できます。例えば、 `git diff -- HEAD` "
"は、「作業ツリーにHEADというファイルがあります。インデックスにステージングし"
"たバージョンと、そのファイルの作業ツリーにあるバージョンとの変更を表示してく"
"ださい」であり、「HEADコミットとワークツリー全体の違いを表示する」ではありま"
"せん。後者を求めるには `git diff HEAD --` とします。"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:49
msgid ""
"Without disambiguating `--`, Git makes a reasonable guess, but errors out "
"and asking you to disambiguate when ambiguous.  E.g. if you have a file "
"called HEAD in your work tree, `git diff HEAD` is ambiguous, and you have to "
"say either `git diff HEAD --` or `git diff -- HEAD` to disambiguate."
msgstr ""
"`--` を明示しなくても、Gitは合理的な推測を行いますが、あいまいな場合はエラー"
"が発生し、あなたに明確にするように求めます。例えば、作業ツリーにHEADという"
"ファイルがある場合、 `git diff HEAD` はあいまいであり、曖昧さを解消するに"
"は、 `git diff HEAD --` または  `git diff -- HEAD` のいずれかを指定する必要が"
"あります。"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:55
msgid ""
"Because `--` disambiguates revisions and paths in some commands, it cannot "
"be used for those commands to separate options and revisions.  You can use "
"`--end-of-options` for this (it also works for commands that do not "
"distinguish between revisions in paths, in which case it is simply an alias "
"for `--`)."
msgstr ""
"一部のコマンドでは、 `--` はリビジョンとパスを明確に区別するために使われるた"
"め、これら一部のコマンドでオプションとリビジョンを分離するために使用すること"
"はできません。これら一部のコマンドではオプションとリビジョンを分離するために "
"`--end-of-options` を使用できます(これら以外のパスのリビジョンを区別しないコ"
"マンドでも機能します。その場合、 `--end-of-options` は単に `--` のエイリアス"
"です)。"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:59
msgid ""
"When writing a script that is expected to handle random user-input, it is a "
"good practice to make it explicit which arguments are which by placing "
"disambiguating `--` at appropriate places."
msgstr ""
"ランダムなユーザー入力を処理することが期待されるスクリプトを作成するときは、"
"適切な場所に曖昧さ回避の `--` を配置することにより、どの引数がどれであるかを"
"明示することをお勧めします。"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:63
msgid ""
"Many commands allow wildcards in paths, but you need to protect them from "
"getting globbed by the shell.  These two mean different things:"
msgstr ""
"多くのコマンドではパスにワイルドカードを使用できますが、シェルによってワイル"
"ドカードが取得されないように保護する必要があります。以下の2つの意味は異なりま"
"す:"

#. type: delimited block -
#: ../Documentation-sedout/gitcli.txt:67
#, no-wrap
msgid ""
"$ git restore *.c\n"
"$ git restore \\*.c\n"
msgstr ""
"$ git restore *.c\n"
"$ git restore \\*.c\n"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:76
msgid ""
"The former lets your shell expand the fileglob, and you are asking the dot-C "
"files in your working tree to be overwritten with the version in the index.  "
"The latter passes the `*.c` to Git, and you are asking the paths in the "
"index that match the pattern to be checked out to your working tree.  After "
"running `git add hello.c; rm hello.c`, you will _not_ see `hello.c` in your "
"working tree with the former, but with the latter you will."
msgstr ""
"前者を使用すると、シェルでfileglobを展開でき、作業ツリー内の C言語ソースファ"
"イル(dot-C)をインデックス内のバージョンで上書きするように要求されます。後者"
"は `*.c` をGitに渡し、作業ツリーにチェックアウトするパターンに一致するイン"
"デックス内のパスを要求しています。`git add hello.c; rm hello.c` を実行後、前"
"者では作業ツリーに `hello.c` は表示されませんが、後者では表示されます。"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:80
msgid ""
"Just as the filesystem '.' (period) refers to the current directory, using a "
"'.' as a repository name in Git (a dot-repository) is a relative path and "
"means your current repository."
msgstr ""
"ファイルシステムの `.` (ピリオド)が現在のディレクトリを参照するのと同じよう"
"に、Gitでリポジトリ名として `.` を使用すること(a dot-repository)は相対パスで"
"あり、あなたの現在のリポジトリを意味します。"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:83
msgid ""
"Here are the rules regarding the \"flags\" that you should follow when you "
"are scripting Git:"
msgstr ""
"Gitのスクリプトを作成するときに従う必要のある「フラグ」(flag)に関するルールは"
"以下のとおりです:"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:86
#, fuzzy
#| msgid ""
#| "it's preferred to use the non-dashed form of Git commands, which means "
#| "that you should prefer `git foo` to `git-foo`."
msgid ""
"It's preferred to use the non-dashed form of Git commands, which means that "
"you should prefer `git foo` to `git-foo`."
msgstr ""
"ダッシュで繋がない形式(non-dashed form)のGitコマンドを使用することをお勧めし"
"ます。つまり、 `git-foo` よりは `git foo` を使用すべきです。"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:89
#, fuzzy
#| msgid ""
#| "splitting short options to separate words (prefer `git foo -a -b` to `git "
#| "foo -ab`, the latter may not even work)."
msgid ""
"Splitting short options to separate words (prefer `git foo -a -b` to `git "
"foo -ab`, the latter may not even work)."
msgstr ""
"短いオプションは分割して単語に区切ります( `git foo -ab` よりも `git foo -a -"
"b` を優先します。前者は機能しない事があります)。"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:95
#, fuzzy
#| msgid ""
#| "when a command-line option takes an argument, use the 'stuck' form.  In "
#| "other words, write `git foo -oArg` instead of `git foo -o Arg` for short "
#| "options, and `git foo --long-opt=Arg` instead of `git foo --long-opt Arg` "
#| "for long options.  An option that takes optional option-argument must be "
#| "written in the 'stuck' form."
msgid ""
"When a command-line option takes an argument, use the 'stuck' form.  In "
"other words, write `git foo -oArg` instead of `git foo -o Arg` for short "
"options, and `git foo --long-opt=Arg` instead of `git foo --long-opt Arg` "
"for long options.  An option that takes optional option-argument must be "
"written in the 'stuck' form."
msgstr ""
"コマンドラインオプションが引数を取る場合は、串刺し形式(stuck' form) を使用し"
"ます。つまり、短いオプションの場合は `git foo -o Arg` の代わりに `git foo -"
"oArg` を記述し、長いオプションの場合は `git foo --long-opt Arg` の代わりに "
"`git foo --long-opt=Arg` を記述します。オプションのオプション引数をとるオプ"
"ションは、串刺し形式で記述する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:100
#, fuzzy
#| msgid ""
#| "when you give a revision parameter to a command, make sure the parameter "
#| "is not ambiguous with a name of a file in the work tree.  E.g. do not "
#| "write `git log -1 HEAD` but write `git log -1 HEAD --`; the former will "
#| "not work if you happen to have a file called `HEAD` in the work tree."
msgid ""
"When you give a revision parameter to a command, make sure the parameter is "
"not ambiguous with a name of a file in the work tree.  E.g. do not write "
"`git log -1 HEAD` but write `git log -1 HEAD --`; the former will not work "
"if you happen to have a file called `HEAD` in the work tree."
msgstr ""
"コマンドにリビジョンパラメータを指定するときは、そのパラメータが作業ツリー内"
"のファイルの名前と混同されないことを確認してください。例えば、 `git log -1 "
"HEAD` とは記述せず、`git log -1 HEAD --` と記述します。作業ツリーに `HEAD` と"
"いうファイルがある場合、前者は機能しません。"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:108
#, fuzzy
#| msgid ""
#| "many commands allow a long option `--option` to be abbreviated only to "
#| "their unique prefix (e.g. if there is no other option whose name begins "
#| "with `opt`, you may be able to spell `--opt` to invoke the `--option` "
#| "flag), but you should fully spell them out when writing your scripts; "
#| "later versions of Git may introduce a new option whose name shares the "
#| "same prefix, e.g. `--optimize`, to make a short prefix that used to be "
#| "unique no longer unique."
msgid ""
"Many commands allow a long option `--option` to be abbreviated only to their "
"unique prefix (e.g. if there is no other option whose name begins with "
"`opt`, you may be able to spell `--opt` to invoke the `--option` flag), but "
"you should fully spell them out when writing your scripts; later versions of "
"Git may introduce a new option whose name shares the same prefix, e.g. `--"
"optimize`, to make a short prefix that used to be unique no longer unique."
msgstr ""
"多くのコマンドでは、長いオプション `--option` を一意であるかぎり短いプレ"
"フィックスのみに省略できます(たとえば、名前が `opt` で始まるオプションが他に"
"ない場合は、 `--opt` と入力して `--option` フラグを呼び出すことができます)。"
"ただし、スクリプトを作成するときは、省略してはいけません。なぜならGitのより新"
"しいバージョンで、名前が同じプレフィックスを共有する新しいオプションが導入さ"
"れる可能性があるからです。例えば `--optimize` が導入されると、以前は一意で"
"あった短いプレフィックス(`--option` , `--opt`)を一意では無くしてしまいます。"

#. type: Title -
#: ../Documentation-sedout/gitcli.txt:111
#, no-wrap
msgid "ENHANCED OPTION PARSER"
msgstr "ENHANCED OPTION PARSER"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:114
msgid ""
"From the Git 1.5.4 series and further, many Git commands (not all of them at "
"the time of the writing though) come with an enhanced option parser."
msgstr ""
"Git 1.5.4シリーズ以降、多くのGitコマンド(この文書の執筆時点ではすべてではあり"
"ませんが)は、拡張オプションパーサーを備えています。"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:116
msgid "Here is a list of the facilities provided by this option parser."
msgstr "以下は、この拡張オプションパーサーによって提供される機能のリストです。"

#. type: Title ~
#: ../Documentation-sedout/gitcli.txt:119
#, no-wrap
msgid "Magic Options"
msgstr "Magic Options"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:122
msgid ""
"Commands which have the enhanced option parser activated all understand a "
"couple of magic command-line options:"
msgstr ""
"拡張オプションパーサーがアクティブになっているコマンドはすべて、いくつかの魔"
"法のコマンドラインオプション(magic command-line options)を理解します:"

#. type: Labeled list
#: ../Documentation-sedout/gitcli.txt:123
#, no-wrap
msgid "`-h`"
msgstr "`-h`"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:125
msgid "gives a pretty printed usage of the command."
msgstr "コマンドの、かなり整った使用法を提供します。"

#. type: delimited block -
#: ../Documentation-sedout/gitcli.txt:130
#, no-wrap
msgid ""
"$ git describe -h\n"
"usage: git describe [<options>] <commit-ish>*\n"
"   or: git describe [<options>] --dirty\n"
msgstr ""
"$ git describe -h\n"
"usage: git describe [<options>] <commit-ish>*\n"
"   or: git describe [<options>] --dirty\n"

#. type: delimited block -
#: ../Documentation-sedout/gitcli.txt:137
#, no-wrap
msgid ""
"    --contains            find the tag that comes after the commit\n"
"    --debug               debug search strategy on stderr\n"
"    --all                 use any ref\n"
"    --tags                use any tag, even unannotated\n"
"    --long                always use long format\n"
"    --abbrev[=<n>]        use <n> digits to display SHA-1s\n"
msgstr ""
"    --contains            find the tag that comes after the commit\n"
"    --debug               debug search strategy on stderr\n"
"    --all                 use any ref\n"
"    --tags                use any tag, even unannotated\n"
"    --long                always use long format\n"
"    --abbrev[=<n>]        use <n> digits to display SHA-1s\n"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:143
msgid ""
"Note that some subcommand (e.g. `git grep`) may behave differently when "
"there are things on the command line other than `-h`, but `git subcmd -h` "
"without anything else on the command line is meant to consistently give the "
"usage."
msgstr ""
"注意: 一部のサブコマンド(例: `git grep` )は、コマンドラインに `-h` 以外のもの"
"がある場合、動作が異なる場合がありますが、コマンドラインに何も含まれていない "
"`git subcmd -h` は、一貫して使用法を提供することを目的としています。"

#. type: Labeled list
#: ../Documentation-sedout/gitcli.txt:144
#, no-wrap
msgid "`--help-all`"
msgstr "`--help-all`"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:148
msgid ""
"Some Git commands take options that are only used for plumbing or that are "
"deprecated, and such options are hidden from the default usage. This option "
"gives the full list of options."
msgstr ""
"一部のGitコマンドは、配管コマンドにのみ使用されるオプションまたは非推奨のオプ"
"ションを取り、そのようなオプションはデフォルトの使用法から隠されています。 こ"
"のオプションはオプションの完全なリストを提供します。"

#. type: Title ~
#: ../Documentation-sedout/gitcli.txt:151
#, no-wrap
msgid "Negating options"
msgstr "否定オプション"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:156
msgid ""
"Options with long option names can be negated by prefixing `--no-`. For "
"example, `git branch` has the option `--track` which is 'on' by default. You "
"can use `--no-track` to override that behaviour. The same goes for `--color` "
"and `--no-color`."
msgstr ""
"長いオプションは、接頭辞 `--no-` を付けることで無効にできます。 たとえば、 "
"`git branch` にはオプション `--track` があります。これはデフォルトで 'on' で"
"す。 `--no-track` を使用して、その動作をオーバーライドできます。 `--color` "
"と `--no-color` についても同じことが言えます。"

#. type: Title ~
#: ../Documentation-sedout/gitcli.txt:159
#, no-wrap
msgid "Aggregating short options"
msgstr "短いオプションのおまとめ"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:163
msgid ""
"Commands that support the enhanced option parser allow you to aggregate "
"short options. This means that you can for example use `git rm -rf` or `git "
"clean -fdx`."
msgstr ""
"拡張オプションパーサーをサポートするコマンドを使用すると、短いオプションをお"
"まとめできます。これは、たとえば、 `git rm -rf` や `git clean -fdx` を使用で"
"きることを意味します。"

#. type: Title ~
#: ../Documentation-sedout/gitcli.txt:166
#, no-wrap
msgid "Abbreviating long options"
msgstr "長いオプションの省略"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:173
msgid ""
"Commands that support the enhanced option parser accepts unique prefix of a "
"long option as if it is fully spelled out, but use this with a caution.  For "
"example, `git commit --amen` behaves as if you typed `git commit --amend`, "
"but that is true only until a later version of Git introduces another option "
"that shares the same prefix, e.g. `git commit --amenity` option."
msgstr ""
"拡張オプションパーサーをサポートするコマンドは、クソ詳しく長いオプションの一"
"意なプレフィックスを受け入れますが、これは注意して使用してください。 たとえ"
"ば、 `git commit --amen` は `git commit --amend` と入力したかのように動作しま"
"すが、これは、後のバージョンのGitが同じプレフィックスを共有する別のオプション"
"を導入するまでのみ当てはまります。例えば `git commit --amenity` オプションが"
"導入されたら一意で無くなります。"

#. type: Title ~
#: ../Documentation-sedout/gitcli.txt:176
#, no-wrap
msgid "Separating argument from the option"
msgstr "Separating argument from the option"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:179
msgid ""
"You can write the mandatory option parameter to an option as a separate word "
"on the command line.  That means that all the following uses work:"
msgstr ""
"コマンドラインで、オプションの必須パラメータを単に区切られた単語として記述す"
"ることができます。これは、以下のすべての使い方が機能することを意味します:"

#. type: delimited block -
#: ../Documentation-sedout/gitcli.txt:185
#, no-wrap
msgid ""
"$ git foo --long-opt=Arg\n"
"$ git foo --long-opt Arg\n"
"$ git foo -oArg\n"
"$ git foo -o Arg\n"
msgstr ""
"$ git foo --long-opt=Arg\n"
"$ git foo --long-opt Arg\n"
"$ git foo -oArg\n"
"$ git foo -o Arg\n"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:189
msgid ""
"However, this is *NOT* allowed for switches with an optional value, where "
"the 'stuck' form must be used:"
msgstr ""
"ただし、これは必須ではないオプションの値を持つスイッチでは許可されていませ"
"ん。その場合は串刺し形式を使用する必要があります:"

#. type: delimited block -
#: ../Documentation-sedout/gitcli.txt:193
#, no-wrap
msgid ""
"$ git describe --abbrev HEAD     # correct\n"
"$ git describe --abbrev=10 HEAD  # correct\n"
"$ git describe --abbrev 10 HEAD  # NOT WHAT YOU MEANT\n"
msgstr ""
"$ git describe --abbrev HEAD     # correct\n"
"$ git describe --abbrev=10 HEAD  # correct\n"
"$ git describe --abbrev 10 HEAD  # NOT WHAT YOU MEANT\n"

#. type: Title -
#: ../Documentation-sedout/gitcli.txt:197
#, no-wrap
msgid "NOTES ON FREQUENTLY CONFUSED OPTIONS"
msgstr "注意：よく混同されるオプションに関する注記"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:205
msgid ""
"Many commands that can work on files in the working tree and/or in the index "
"can take `--cached` and/or `--index` options.  Sometimes people incorrectly "
"think that, because the index was originally called cache, these two are "
"synonyms.  They are *not* -- these two options mean very different things."
msgstr ""
"作業ツリーおよび/またはインデックス内のファイルを処理できる多くのコマンド"
"は、 `--cached` および/または `--index` オプションを使用できます。インデック"
"スは元々キャッシュと呼ばれていたため、これら2つは同義語であると誤解されること"
"があります。ちゃいます。これらの2つのオプションは非常に異なることを意味しま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:213
msgid ""
"The `--cached` option is used to ask a command that usually works on files "
"in the working tree to *only* work with the index.  For example, `git grep`, "
"when used without a commit to specify from which commit to look for strings "
"in, usually works on files in the working tree, but with the `--cached` "
"option, it looks for strings in the index."
msgstr ""
"`--cached` オプションは、通常は作業ツリー内のファイルで機能するコマンドに、"
"「インデックスのみで」機能するように要求するために使用されます。 たとえば、 "
"`git grep` をコミットせずに使用して、どのコミットから文字列を検索するかを指定"
"すると、通常は作業ツリー内のファイルで機能しますが、 `--cached` オプションを"
"使用するとインデックス内の文字列を検索します。"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:220
msgid ""
"The `--index` option is used to ask a command that usually works on files in "
"the working tree to *also* affect the index.  For example, `git stash apply` "
"usually merges changes recorded in a stash entry to the working tree, but "
"with the `--index` option, it also merges changes to the index as well."
msgstr ""
"`--index` オプションは、通常は作業ツリー内のファイルで機能するコマンドに、"
"「インデックスにも」影響を与えるように要求するために使用されます。たとえば、 "
"`git stash apply` は通常、stashエントリに記録された変更を作業ツリーにマージし"
"ますが、 `--index` オプションを使用すると、インデックスへの変更もマージしま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:227
msgid ""
"`git apply` command can be used with `--cached` and `--index` (but not at "
"the same time).  Usually the command only affects the files in the working "
"tree, but with `--index`, it patches both the files and their index entries, "
"and with `--cached`, it modifies only the index entries."
msgstr ""
"`git apply`コマンドは、 `--cached` または `--index` のいずれかを伴って使用で"
"きます(同時に使用することはできません。通常、このコマンドは作業ツリー内のファ"
"イルにのみ影響しますが、 `--index` を使用すると、ファイルとそのインデックスエ"
"ントリの両方にパッチが適用され、 `--cached` を使用すると、インデックスエント"
"リのみが変更されます。"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:231
msgid ""
"See also https://lore.kernel.org/git/7v64clg5u9.fsf@assigned-by-dhcp.cox."
"net/ and https://lore.kernel.org/git/7vy7ej9g38.fsf@gitster.siamese.dyndns."
"org/ for further information."
msgstr ""
"詳細については https://lore.kernel.org/git/7v64clg5u9.fsf@assigned-by-dhcp."
"cox.net/ と https://lore.kernel.org/git/7vy7ej9g38.fsf@gitster.siamese."
"dyndns.org/ も参照してください。"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:234
msgid ""
"Some other commands that also work on files in the working tree and/or in "
"the index can take `--staged` and/or `--worktree`."
msgstr ""
"作業ツリー および/または インデックス内のファイルに対しても機能する他のいくつ"
"かのコマンドは、 `--staged` および/または `--worktree` を取ることができます。"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:237
msgid ""
"`--staged` is exactly like `--cached`, which is used to ask a command to "
"only work on the index, not the working tree."
msgstr ""
"`--staged` は `--cached` とまったく同じです。これは、作業ツリーではなく、イン"
"デックスでのみ機能するようにコマンドに要求するために使用されます。"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:240
msgid ""
"`--worktree` is the opposite, to ask a command to work on the working tree "
"only, not the index."
msgstr ""
"`--worktree` は反対に、インデックスではなく、作業ツリーのみで作業するようにコ"
"マンドに要求します。"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:243
msgid ""
"The two options can be specified together to ask a command to work on both "
"the index and the working tree."
msgstr ""
"2つのオプションを一緒に指定して、インデックスと作業ツリーの両方で作業するよう"
"にコマンドに要求することができます。"

#. type: Title -
#: ../Documentation-sedout/gitcli.txt:245
#, no-wrap
msgid "GIT"
msgstr "GIT"

#. type: Plain text
#: ../Documentation-sedout/gitcli.txt:246
msgid "Part of the linkgit:git[1] suite"
msgstr "Part of the linkgit:git[1] suite"
