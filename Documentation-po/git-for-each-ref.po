# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-11-04 04:38+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/git-for-each-ref.txt:2
#, no-wrap
msgid "git-for-each-ref(1)"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-for-each-ref.txt:5
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:7
msgid "git-for-each-ref - Output information on each ref"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-for-each-ref.txt:9
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:16
#, no-wrap
msgid ""
"'git for-each-ref' [--count=<count>] [--shell|--perl|--python|--tcl]\n"
"\t\t   [(--sort=<key>)...] [--format=<format>] [<pattern>...]\n"
"\t\t   [--points-at=<object>]\n"
"\t\t   [--merged[=<object>]] [--no-merged[=<object>]]\n"
"\t\t   [--contains[=<object>]] [--no-contains[=<object>]]\n"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-for-each-ref.txt:18
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:26
msgid ""
"Iterate over all refs that match `<pattern>` and show them according to the "
"given `<format>`, after sorting them according to the given set of `<key>`.  "
"If `<count>` is given, stop after showing that many refs.  The interpolated "
"values in `<format>` can optionally be quoted as string literals in the "
"specified host language allowing their direct evaluation in that language."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-for-each-ref.txt:28
#, no-wrap
msgid "OPTIONS"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-for-each-ref.txt:29
#, no-wrap
msgid "<pattern>..."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:34
msgid ""
"If one or more patterns are given, only refs are shown that match against at "
"least one pattern, either using fnmatch(3) or literally, in the latter case "
"matching completely or from the beginning up to a slash."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-for-each-ref.txt:35
#, no-wrap
msgid "`--count=<count>`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:39
msgid ""
"By default the command shows all refs that match `<pattern>`.  This option "
"makes it stop after showing that many refs."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-for-each-ref.txt:40
#, no-wrap
msgid "`--sort=<key>`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:46
msgid ""
"A field name to sort on.  Prefix `-` to sort in descending order of the "
"value.  When unspecified, `refname` is used.  You may use the --sort=<key> "
"option multiple times, in which case the last key becomes the primary key."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-for-each-ref.txt:47
#, no-wrap
msgid "`--format=<format>`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:59
msgid ""
"A string that interpolates `%(fieldname)` from a ref being shown and the "
"object it points at.  If `fieldname` is prefixed with an asterisk (`*`) and "
"the ref points at a tag object, use the value for the field in the object "
"which the tag object refers to (instead of the field in the tag object).  "
"When unspecified, `<format>` defaults to `%(objectname) SPC %(objecttype) "
"TAB %(refname)`.  It also interpolates `%%` to `%`, and `%xx` where `xx` are "
"hex digits interpolates to character with hex code `xx`; for example `%00` "
"interpolates to `\\0` (NUL), `%09` to `\\t` (TAB) and `%0a` to `\\n` (LF)."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-for-each-ref.txt:60
#, no-wrap
msgid "`--color[=<when>]`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:64
msgid ""
"Respect any colors specified in the `--format` option. The `<when>` field "
"must be one of `always`, `never`, or `auto` (if `<when>` is absent, behave "
"as if `always` was given)."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-for-each-ref.txt:65
#, no-wrap
msgid "`--shell`"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-for-each-ref.txt:66
#, no-wrap
msgid "`--perl`"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-for-each-ref.txt:67
#, no-wrap
msgid "`--python`"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-for-each-ref.txt:68
#, no-wrap
msgid "`--tcl`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:73
msgid ""
"If given, strings that substitute `%(fieldname)` placeholders are quoted as "
"string literals suitable for the specified host language.  This is meant to "
"produce a scriptlet that can directly be `eval`ed."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-for-each-ref.txt:74
#, no-wrap
msgid "`--points-at=<object>`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:76
msgid "Only list refs which points at the given object."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-for-each-ref.txt:77
#, no-wrap
msgid "`--merged[=<object>]`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:80
msgid ""
"Only list refs whose tips are reachable from the specified commit (HEAD if "
"not specified)."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-for-each-ref.txt:81
#, no-wrap
msgid "`--no-merged[=<object>]`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:84
msgid ""
"Only list refs whose tips are not reachable from the specified commit (HEAD "
"if not specified)."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-for-each-ref.txt:85
#, no-wrap
msgid "`--contains[=<object>]`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:88
msgid ""
"Only list refs which contain the specified commit (HEAD if not specified)."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-for-each-ref.txt:89
#, no-wrap
msgid "`--no-contains[=<object>]`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:92
msgid ""
"Only list refs which don't contain the specified commit (HEAD if not "
"specified)."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-for-each-ref.txt:93
#, no-wrap
msgid "`--ignore-case`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:95
msgid "Sorting and filtering refs are case insensitive."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-for-each-ref.txt:97
#, no-wrap
msgid "FIELD NAMES"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:102
msgid ""
"Various values from structured fields in referenced objects can be used to "
"interpolate into the resulting output, or as sort keys."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:104
msgid "For all objects, the following names can be used:"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-for-each-ref.txt:105
#, no-wrap
msgid "refname"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:121
msgid ""
"The name of the ref (the part after $GIT_DIR/).  For a non-ambiguous short "
"name of the ref append `:short`.  The option core.warnAmbiguousRefs is used "
"to select the strict abbreviation mode. If `lstrip=<N>` (`rstrip=<N>`) is "
"appended, strips `<N>` slash-separated path components from the front (back) "
"of the refname (e.g. `%(refname:lstrip=2)` turns `refs/tags/foo` into `foo` "
"and `%(refname:rstrip=2)` turns `refs/tags/foo` into `refs`).  If `<N>` is a "
"negative number, strip as many path components as necessary from the "
"specified end to leave `-<N>` path components (e.g. `%(refname:lstrip=-2)` "
"turns `refs/tags/foo` into `tags/foo` and `%(refname:rstrip=-1)` turns `refs/"
"tags/foo` into `refs`). When the ref does not have enough components, the "
"result becomes an empty string if stripping with positive <N>, or it becomes "
"the full refname if stripping with negative <N>.  Neither is an error."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:123
msgid "`strip` can be used as a synonym to `lstrip`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-for-each-ref.txt:124
#, no-wrap
msgid "objecttype"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:126
msgid "The type of the object (`blob`, `tree`, `commit`, `tag`)."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-for-each-ref.txt:127
#, no-wrap
msgid "objectsize"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:131
msgid ""
"The size of the object (the same as 'git cat-file -s' reports).  Append `:"
"disk` to get the size, in bytes, that the object takes up on disk. See the "
"note about on-disk sizes in the `CAVEATS` section below."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-for-each-ref.txt:131
#, no-wrap
msgid "objectname"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:137
msgid ""
"The object name (aka SHA-1).  For a non-ambiguous abbreviation of the object "
"name append `:short`.  For an abbreviation of the object name with desired "
"length append `:short=<length>`, where the minimum length is MINIMUM_ABBREV. "
"The length may be exceeded to ensure unique object names."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-for-each-ref.txt:137
#, no-wrap
msgid "deltabase"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:141
msgid ""
"This expands to the object name of the delta base for the given object, if "
"it is stored as a delta.  Otherwise it expands to the null object name (all "
"zeroes)."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-for-each-ref.txt:142
#, no-wrap
msgid "upstream"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:152
msgid ""
"The name of a local ref which can be considered ``upstream'' from the "
"displayed ref. Respects `:short`, `:lstrip` and `:rstrip` in the same way as "
"`refname` above.  Additionally respects `:track` to show \"[ahead N, behind "
"M]\" and `:trackshort` to show the terse version: \">\" (ahead), \"<"
"\" (behind), \"<>\" (ahead and behind), or \"=\" (in sync). `:track` also "
"prints \"[gone]\" whenever unknown upstream ref is encountered. Append `:"
"track,nobracket` to show tracking information without brackets (i.e \"ahead "
"N, behind M\")."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:159
msgid ""
"For any remote-tracking branch `%(upstream)`, `%(upstream:remotename)` and `"
"%(upstream:remoteref)` refer to the name of the remote and the name of the "
"tracked remote ref, respectively. In other words, the remote-tracking branch "
"can be updated explicitly and individually by using the refspec `%(upstream:"
"remoteref):%(upstream)` to fetch from `%(upstream:remotename)`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:163
msgid ""
"Has no effect if the ref does not have tracking information associated with "
"it.  All the options apart from `nobracket` are mutually exclusive, but if "
"used together the last option is selected."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-for-each-ref.txt:164
#, no-wrap
msgid "push"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:170
msgid ""
"The name of a local ref which represents the `@{push}` location for the "
"displayed ref. Respects `:short`, `:lstrip`, `:rstrip`, `:track`, `:"
"trackshort`, `:remotename`, and `:remoteref` options as `upstream` does. "
"Produces an empty string if no `@{push}` ref is configured."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-for-each-ref.txt:171
#, no-wrap
msgid "HEAD"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:174
msgid ""
"'*' if HEAD matches current ref (the checked out branch), ' ' otherwise."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-for-each-ref.txt:175
#, no-wrap
msgid "color"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:180
msgid ""
"Change output color. Followed by `:<colorname>`, where color names are "
"described under Values in the \"CONFIGURATION FILE\" section of linkgit:git-"
"config[1].  For example, `%(color:bold red)`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-for-each-ref.txt:181
#, no-wrap
msgid "align"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:195
msgid ""
"Left-, middle-, or right-align the content between %(align:...) and %(end). "
"The \"align:\" is followed by `width=<width>` and `position=<position>` in "
"any order separated by a comma, where the `<position>` is either left, right "
"or middle, default being left and `<width>` is the total length of the "
"content with alignment. For brevity, the \"width=\" and/or \"position=\" "
"prefixes may be omitted, and bare <width> and <position> used instead.  For "
"instance, `%(align:<width>,<position>)`. If the contents length is more than "
"the width then no alignment is performed. If used with `--quote` everything "
"in between %(align:...) and %(end) is quoted, but if nested then only the "
"topmost level performs quoting."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-for-each-ref.txt:196
#, no-wrap
msgid "if"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:208
msgid ""
"Used as %(if)...%(then)...%(end) or %(if)...%(then)...%(else)...%(end).  If "
"there is an atom with value or string literal after the %(if) then "
"everything after the %(then) is printed, else if the %(else) atom is used, "
"then everything after %(else) is printed. We ignore space when evaluating "
"the string before %(then), this is useful when we use the %(HEAD) atom which "
"prints either \"*\" or \" \" and we want to apply the 'if' condition only on "
"the 'HEAD' ref.  Append \":equals=<string>\" or \":notequals=<string>\" to "
"compare the value between the %(if:...) and %(then) atoms with the given "
"string."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-for-each-ref.txt:209
#, no-wrap
msgid "symref"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:214
msgid ""
"The ref which the given symbolic ref refers to. If not a symbolic ref, "
"nothing is printed. Respects the `:short`, `:lstrip` and `:rstrip` options "
"in the same way as `refname` above."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-for-each-ref.txt:215
#, no-wrap
msgid "worktreepath"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:219
msgid ""
"The absolute path to the worktree in which the ref is checked out, if it is "
"checked out in any linked worktree. Empty string otherwise."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:225
msgid ""
"In addition to the above, for commit and tag objects, the header field names "
"(`tree`, `parent`, `object`, `type`, and `tag`) can be used to specify the "
"value in the header field.  Fields `tree` and `parent` can also be used with "
"modifier `:short` and `:short=<length>` just like `objectname`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:230
msgid ""
"For commit and tag objects, the special `creatordate` and `creator` fields "
"will correspond to the appropriate date or name-email-date tuple from the "
"`committer` or `tagger` fields depending on the object type.  These are "
"intended for working on a mix of annotated and lightweight tags."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:237
msgid ""
"Fields that have name-email-date tuple as its value (`author`, `committer`, "
"and `tagger`) can be suffixed with `name`, `email`, and `date` to extract "
"the named component.  For email fields (`authoremail`, `committeremail` and "
"`taggeremail`), `:trim` can be appended to get the email without angle "
"brackets, and `:localpart` to get the part before the `@` symbol out of the "
"trimmed email."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:239
msgid "The raw data in an object is `raw`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-for-each-ref.txt:240
#, no-wrap
msgid "raw:size"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:242
msgid "The raw data size of the object."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:246
msgid ""
"Note that `--format=%(raw)` can not be used with `--python`, `--shell`, `--"
"tcl`, because such language may not support arbitrary binary data in their "
"string variable type."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:249
msgid ""
"The message in a commit or a tag object is `contents`, from which `contents:"
"<part>` can be used to extract various parts out of:"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-for-each-ref.txt:250
#, no-wrap
msgid "contents:size"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:252
msgid "The size in bytes of the commit or tag message."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-for-each-ref.txt:253
#, no-wrap
msgid "contents:subject"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:260
msgid ""
"The first paragraph of the message, which typically is a single line, is "
"taken as the \"subject\" of the commit or the tag message.  Instead of "
"`contents:subject`, field `subject` can also be used to obtain same results. "
"`:sanitize` can be appended to `subject` for subject line suitable for "
"filename."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-for-each-ref.txt:261
#, no-wrap
msgid "contents:body"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:264
msgid ""
"The remainder of the commit or the tag message that follows the \"subject\"."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-for-each-ref.txt:265
#, no-wrap
msgid "contents:signature"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:267
msgid "The optional GPG signature of the tag."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-for-each-ref.txt:268
#, no-wrap
msgid "contents:lines=N"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:270
msgid "The first `N` lines of the message."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:275
msgid ""
"Additionally, the trailers as interpreted by linkgit:git-interpret-"
"trailers[1] are obtained as `trailers[:options]` (or by using the historical "
"alias `contents:trailers[:options]`). For valid [:option] values see "
"`trailers` section of linkgit:git-log[1]."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:279
msgid ""
"For sorting purposes, fields with numeric values sort in numeric order "
"(`objectsize`, `authordate`, `committerdate`, `creatordate`, `taggerdate`).  "
"All other fields are used to sort in their byte-value order."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:282
msgid ""
"There is also an option to sort by versions, this can be done by using the "
"fieldname `version:refname` or its alias `v:refname`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:286
msgid ""
"In any case, a field name that refers to a field inapplicable to the object "
"referred by the ref does not cause an error.  It returns an empty string "
"instead."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:290
msgid ""
"As a special case for the date-type fields, you may specify a format for the "
"date by adding `:` followed by date format name (see the values the `--date` "
"option to linkgit:git-rev-list[1] takes)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:293
msgid ""
"Some atoms like %(align) and %(if) always require a matching %(end).  We "
"call them \"opening atoms\" and sometimes denote them as %($open)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:298
msgid ""
"When a scripting language specific quoting is in effect, everything between "
"a top-level opening atom and its matching %(end) is evaluated according to "
"the semantics of the opening atom and only its result from the top-level is "
"quoted."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-for-each-ref.txt:301
#, no-wrap
msgid "EXAMPLES"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:305
msgid ""
"An example directly producing formatted text.  Show the most recent 3 tagged "
"commits:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-for-each-ref.txt:308
#: ../Documentation-sedout/git-for-each-ref.txt:324
#: ../Documentation-sedout/git-for-each-ref.txt:338
#, no-wrap
msgid "#!/bin/sh\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-for-each-ref.txt:314
#, no-wrap
msgid ""
"git for-each-ref --count=3 --sort='-*authordate' \\\n"
"--format='From: %(*authorname) %(*authoremail)\n"
"Subject: %(*subject)\n"
"Date: %(*authordate)\n"
"Ref: %(*refname)\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-for-each-ref.txt:317
#, no-wrap
msgid ""
"%(*body)\n"
"' 'refs/tags'\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:322
msgid ""
"A simple example showing the use of shell eval on the output, demonstrating "
"the use of --shell.  List the prefixes of all heads:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-for-each-ref.txt:331
#, no-wrap
msgid ""
"git for-each-ref --shell --format=\"ref=%(refname)\" refs/heads | \\\n"
"while read entry\n"
"do\n"
"\teval \"$entry\"\n"
"\techo `dirname $ref`\n"
"done\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:336
msgid ""
"A bit more elaborate report on tags, demonstrating that the format may be an "
"entire script:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-for-each-ref.txt:343
#, no-wrap
msgid ""
"fmt='\n"
"\tr=%(refname)\n"
"\tt=%(*objecttype)\n"
"\tT=${r#refs/tags/}\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-for-each-ref.txt:350
#, no-wrap
msgid ""
"\to=%(*objectname)\n"
"\tn=%(*authorname)\n"
"\te=%(*authoremail)\n"
"\ts=%(*subject)\n"
"\td=%(*authordate)\n"
"\tb=%(*body)\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-for-each-ref.txt:369
#, no-wrap
msgid ""
"\tkind=Tag\n"
"\tif test \"z$t\" = z\n"
"\tthen\n"
"\t\t# could be a lightweight tag\n"
"\t\tt=%(objecttype)\n"
"\t\tkind=\"Lightweight tag\"\n"
"\t\to=%(objectname)\n"
"\t\tn=%(authorname)\n"
"\t\te=%(authoremail)\n"
"\t\ts=%(subject)\n"
"\t\td=%(authordate)\n"
"\t\tb=%(body)\n"
"\tfi\n"
"\techo \"$kind $T points at a $t object $o\"\n"
"\tif test \"z$t\" = zcommit\n"
"\tthen\n"
"\t\techo \"The commit was authored by $n $e\n"
"at $d, and titled\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-for-each-ref.txt:371
#, no-wrap
msgid "    $s\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-for-each-ref.txt:378
#, no-wrap
msgid ""
"Its message reads as:\n"
"\"\n"
"\t\techo \"$b\" | sed -e \"s/^/    /\"\n"
"\t\techo\n"
"\tfi\n"
"'\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-for-each-ref.txt:384
#, no-wrap
msgid ""
"eval=`git for-each-ref --shell --format=\"$fmt\" \\\n"
"\t--sort='*objecttype' \\\n"
"\t--sort=-taggerdate \\\n"
"\trefs/tags`\n"
"eval \"$eval\"\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:389
msgid ""
"An example to show the usage of %(if)...%(then)...%(else)...%(end).  This "
"prefixes the current branch with a star."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-for-each-ref.txt:392
#, no-wrap
msgid "git for-each-ref --format=\"%(if)%(HEAD)%(then)* %(else)  %(end)%(refname:short)\" refs/heads/\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:397
msgid ""
"An example to show the usage of %(if)...%(then)...%(end).  This prints the "
"authorname, if present."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-for-each-ref.txt:400
#, no-wrap
msgid "git for-each-ref --format=\"%(refname)%(if)%(authorname)%(then) Authored by: %(authorname)%(end)\"\n"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-for-each-ref.txt:403
#, no-wrap
msgid "CAVEATS"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:411
msgid ""
"Note that the sizes of objects on disk are reported accurately, but care "
"should be taken in drawing conclusions about which refs or objects are "
"responsible for disk usage. The size of a packed non-delta object may be "
"much larger than the size of objects which delta against it, but the choice "
"of which object is the base and which is the delta is arbitrary and is "
"subject to change during a repack."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:415
msgid ""
"Note also that multiple copies of an object may be present in the object "
"database; in this case, it is undefined which copy's size or delta base will "
"be reported."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-for-each-ref.txt:417
#, no-wrap
msgid "NOTES"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-for-each-ref.txt:422
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:424
msgid "linkgit:git-show-ref[1]"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-for-each-ref.txt:426
#, no-wrap
msgid "GIT"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-for-each-ref.txt:427
msgid "Part of the linkgit:git[1] suite"
msgstr ""
