# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-10-01 00:25+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation/git-update-ref.txt:2
#, no-wrap
msgid "git-update-ref(1)"
msgstr ""

#. type: Title -
#: ../Documentation/git-update-ref.txt:5
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:7
msgid "git-update-ref - Update the object name stored in a ref safely"
msgstr ""

#. type: Title -
#: ../Documentation/git-update-ref.txt:9
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:12
#, no-wrap
msgid ""
"'git update-ref' [-m <reason>] [--no-deref] (-d <ref> [<oldvalue>] | "
"[--create-reflog] <ref> <newvalue> [<oldvalue>] | --stdin [-z])\n"
msgstr ""

#. type: Title -
#: ../Documentation/git-update-ref.txt:14
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:18
msgid ""
"Given two arguments, stores the <newvalue> in the <ref>, possibly "
"dereferencing the symbolic refs.  E.g. `git update-ref HEAD <newvalue>` "
"updates the current branch head to the new object."
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:27
msgid ""
"Given three arguments, stores the <newvalue> in the <ref>, possibly "
"dereferencing the symbolic refs, after verifying that the current value of "
"the <ref> matches <oldvalue>.  E.g. `git update-ref refs/heads/master "
"<newvalue> <oldvalue>` updates the master branch head to <newvalue> only if "
"its current value is <oldvalue>.  You can specify 40 \"0\" or an empty "
"string as <oldvalue> to make sure that the ref you are creating does not "
"exist."
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:31
msgid ""
"It also allows a \"ref\" file to be a symbolic pointer to another ref file "
"by starting with the four-byte header sequence of \"ref:\"."
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:39
msgid ""
"More importantly, it allows the update of a ref file to follow these "
"symbolic pointers, whether they are symlinks or these \"regular file "
"symbolic refs\".  It follows *real* symlinks only if they start with "
"\"refs/\": otherwise it will just try to read them and update them as a "
"regular file (i.e. it will allow the filesystem to follow them, but will "
"overwrite such a symlink to somewhere else with a regular filename)."
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:42
msgid ""
"If --no-deref is given, <ref> itself is overwritten, rather than the result "
"of following the symbolic pointers."
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:44
msgid "In general, using"
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:46
#, no-wrap
msgid "\tgit update-ref HEAD \"$head\"\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:48
msgid "should be a _lot_ safer than doing"
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:50
#, no-wrap
msgid "\techo \"$head\" > \"$GIT_DIR/HEAD\"\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:57
msgid ""
"both from a symlink following standpoint *and* an error checking "
"standpoint.  The \"refs/\" rule for symlinks means that symlinks that point "
"to \"outside\" the tree are safe: they'll be followed for reading but not "
"for writing (so we'll never write through a ref symlink to some other tree, "
"if you have copied a whole archive by creating a symlink tree)."
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:60
msgid ""
"With `-d` flag, it deletes the named <ref> after verifying it still contains "
"<oldvalue>."
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:63
msgid ""
"With `--stdin`, update-ref reads instructions from standard input and "
"performs all modifications together.  Specify commands of the form:"
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:73
#, no-wrap
msgid ""
"\tupdate SP <ref> SP <newvalue> [SP <oldvalue>] LF\n"
"\tcreate SP <ref> SP <newvalue> LF\n"
"\tdelete SP <ref> [SP <oldvalue>] LF\n"
"\tverify SP <ref> [SP <oldvalue>] LF\n"
"\toption SP <opt> LF\n"
"\tstart LF\n"
"\tprepare LF\n"
"\tcommit LF\n"
"\tabort LF\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:76
msgid ""
"With `--create-reflog`, update-ref will create a reflog for each ref even if "
"one would not ordinarily be created."
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:81
msgid ""
"Quote fields containing whitespace as if they were strings in C source code; "
"i.e., surrounded by double-quotes and with backslash escapes.  Use 40 \"0\" "
"characters or the empty string to specify a zero value.  To specify a "
"missing value, omit the value and its preceding SP entirely."
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:84
msgid ""
"Alternatively, use `-z` to specify in NUL-terminated format, without "
"quoting:"
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:94
#, no-wrap
msgid ""
"\tupdate SP <ref> NUL <newvalue> NUL [<oldvalue>] NUL\n"
"\tcreate SP <ref> NUL <newvalue> NUL\n"
"\tdelete SP <ref> NUL [<oldvalue>] NUL\n"
"\tverify SP <ref> NUL [<oldvalue>] NUL\n"
"\toption SP <opt> NUL\n"
"\tstart NUL\n"
"\tprepare NUL\n"
"\tcommit NUL\n"
"\tabort NUL\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:97
msgid ""
"In this format, use 40 \"0\" to specify a zero value, and use the empty "
"string to specify a missing value."
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:101
msgid ""
"In either format, values can be specified in any form that Git recognizes as "
"an object name.  Commands in any other format or a repeated <ref> produce an "
"error.  Command meanings are:"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-update-ref.txt:102
#, no-wrap
msgid "update"
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:107
msgid ""
"Set <ref> to <newvalue> after verifying <oldvalue>, if given.  Specify a "
"zero <newvalue> to ensure the ref does not exist after the update and/or a "
"zero <oldvalue> to make sure the ref does not exist before the update."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-update-ref.txt:108
#, no-wrap
msgid "create"
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:111
msgid ""
"Create <ref> with <newvalue> after verifying it does not exist.  The given "
"<newvalue> may not be zero."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-update-ref.txt:112
#, no-wrap
msgid "delete"
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:115
msgid ""
"Delete <ref> after verifying it exists with <oldvalue>, if given.  If given, "
"<oldvalue> may not be zero."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-update-ref.txt:116
#, no-wrap
msgid "verify"
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:119
msgid ""
"Verify <ref> against <oldvalue> but do not change it.  If <oldvalue> is zero "
"or missing, the ref must not exist."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-update-ref.txt:120
#, no-wrap
msgid "option"
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:124
msgid ""
"Modify behavior of the next command naming a <ref>.  The only valid option "
"is `no-deref` to avoid dereferencing a symbolic ref."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-update-ref.txt:125
#, no-wrap
msgid "start"
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:130
msgid ""
"Start a transaction. In contrast to a non-transactional session, a "
"transaction will automatically abort if the session ends without an explicit "
"commit. This command may create a new empty transaction when the current one "
"has been committed or aborted already."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-update-ref.txt:131
#, no-wrap
msgid "prepare"
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:135
msgid ""
"Prepare to commit the transaction. This will create lock files for all "
"queued reference updates. If one reference could not be locked, the "
"transaction will be aborted."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-update-ref.txt:136
#, no-wrap
msgid "commit"
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:139
msgid ""
"Commit all reference updates queued for the transaction, ending the "
"transaction."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-update-ref.txt:140
#, no-wrap
msgid "abort"
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:143
msgid ""
"Abort the transaction, releasing all locks if the transaction is in prepared "
"state."
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:149
msgid ""
"If all <ref>s can be locked with matching <oldvalue>s simultaneously, all "
"modifications are performed.  Otherwise, no modifications are performed.  "
"Note that while each individual <ref> is updated or deleted atomically, a "
"concurrent reader may still see a subset of the modifications."
msgstr ""

#. type: Title -
#: ../Documentation/git-update-ref.txt:151
#, no-wrap
msgid "LOGGING UPDATES"
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:159
msgid ""
"If config parameter \"core.logAllRefUpdates\" is true and the ref is one "
"under \"refs/heads/\", \"refs/remotes/\", \"refs/notes/\", or a pseudoref "
"like HEAD or ORIG_HEAD; or the file \"$GIT_DIR/logs/<ref>\" exists then `git "
"update-ref` will append a line to the log file \"$GIT_DIR/logs/<ref>\" "
"(dereferencing all symbolic refs before creating the log name) describing "
"the change in ref value.  Log lines are formatted as:"
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:161
#, no-wrap
msgid "    oldsha1 SP newsha1 SP committer LF\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:166
msgid ""
"Where \"oldsha1\" is the 40 character hexadecimal value previously stored in "
"<ref>, \"newsha1\" is the 40 character hexadecimal value of <newvalue> and "
"\"committer\" is the committer's name, email address and date in the "
"standard Git committer ident format."
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:168
msgid "Optionally with -m:"
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:170
#, no-wrap
msgid "    oldsha1 SP newsha1 SP committer TAB message LF\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:173
msgid ""
"Where all fields are as described above and \"message\" is the value "
"supplied to the -m option."
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:177
msgid ""
"An update will fail (without changing <ref>) if the current user is unable "
"to create a new log file, append to the existing log file or does not have "
"committer information available."
msgstr ""

#. type: Title -
#: ../Documentation/git-update-ref.txt:179
#, no-wrap
msgid "GIT"
msgstr ""

#. type: Plain text
#: ../Documentation/git-update-ref.txt:180
msgid "Part of the linkgit:git[1] suite"
msgstr ""
