# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-10-01 00:25+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation/gitsubmodules.txt:2
#, no-wrap
msgid "gitsubmodules(7)"
msgstr ""

#. type: Title -
#: ../Documentation/gitsubmodules.txt:5
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:7
msgid "gitsubmodules - Mounting one repository inside another"
msgstr ""

#. type: Title -
#: ../Documentation/gitsubmodules.txt:9
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:11
#, no-wrap
msgid " .gitmodules, $GIT_DIR/config\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/gitsubmodules.txt:14
#, no-wrap
msgid ""
"git submodule\n"
"git <command> --recurse-submodules\n"
msgstr ""

#. type: Title -
#: ../Documentation/gitsubmodules.txt:17
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:22
msgid ""
"A submodule is a repository embedded inside another repository.  The "
"submodule has its own history; the repository it is embedded in is called a "
"superproject."
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:28
msgid ""
"On the filesystem, a submodule usually (but not always - see FORMS below)  "
"consists of (i) a Git directory located under the `$GIT_DIR/modules/` "
"directory of its superproject, (ii) a working directory inside the "
"superproject's working directory, and a `.git` file at the root of the "
"submodule's working directory pointing to (i)."
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:34
msgid ""
"Assuming the submodule has a Git directory at `$GIT_DIR/modules/foo/` and a "
"working directory at `path/to/bar/`, the superproject tracks the submodule "
"via a `gitlink` entry in the tree at `path/to/bar` and an entry in its "
"`.gitmodules` file (see linkgit:gitmodules[5]) of the form "
"`submodule.foo.path = path/to/bar`."
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:37
msgid ""
"The `gitlink` entry contains the object name of the commit that the "
"superproject expects the submodule's working directory to be at."
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:41
msgid ""
"The section `submodule.foo.*` in the `.gitmodules` file gives additional "
"hints to Git's porcelain layer. For example, the `submodule.foo.url` setting "
"specifies where to obtain the submodule."
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:43
msgid "Submodules can be used for at least two different use cases:"
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:45
msgid "Using another project while maintaining independent history."
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:51
msgid ""
"Submodules allow you to contain the working tree of another project within "
"your own working tree while keeping the history of both projects "
"separate. Also, since submodules are fixed to an arbitrary version, the "
"other project can be independently developed without affecting the "
"superproject, allowing the superproject project to fix itself to new "
"versions only when desired."
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:56
msgid ""
"Splitting a (logically single) project into multiple repositories and tying "
"them back together. This can be used to overcome current limitations of "
"Git's implementation to have finer grained access:"
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:63
msgid ""
"Size of the Git repository: In its current form Git scales up poorly for "
"large repositories containing content that is not compressed by delta "
"computation between trees.  For example, you can use submodules to hold "
"large binary assets and these repositories can be shallowly cloned such that "
"you do not have a large history locally."
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:69
msgid ""
"Transfer size: In its current form Git requires the whole working tree "
"present. It does not allow partial trees to be transferred in fetch or "
"clone.  If the project you work on consists of multiple repositories tied "
"together as submodules in a superproject, you can avoid fetching the working "
"trees of the repositories you are not interested in."
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:72
msgid ""
"Access control: By restricting user access to submodules, this can be used "
"to implement read/write policies for different users."
msgstr ""

#. type: Title -
#: ../Documentation/gitsubmodules.txt:74
#, no-wrap
msgid "The configuration of submodules"
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:78
msgid ""
"Submodule operations can be configured using the following mechanisms (from "
"highest to lowest precedence):"
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:85
msgid ""
"The command line for those commands that support taking submodules as part "
"of their pathspecs. Most commands have a boolean flag `--recurse-submodules` "
"which specify whether to recurse into submodules.  Examples are `grep` and "
"`checkout`.  Some commands take enums, such as `fetch` and `push`, where you "
"can specify how submodules are affected."
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:90
msgid ""
"The configuration inside the submodule. This includes `$GIT_DIR/config` in "
"the submodule, but also settings in the tree such as a `.gitattributes` or "
"`.gitignore` files that specify behavior of commands inside the submodule."
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:96
msgid ""
"For example an effect from the submodule's `.gitignore` file would be "
"observed when you run `git status --ignore-submodules=none` in the "
"superproject. This collects information from the submodule's working "
"directory by running `status` in the submodule while paying attention to the "
"`.gitignore` file of the submodule."
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:102
msgid ""
"The submodule's `$GIT_DIR/config` file would come into play when running "
"`git push --recurse-submodules=check` in the superproject, as this would "
"check if the submodule has any changes not published to any remote. The "
"remotes are configured in the submodule as usual in the `$GIT_DIR/config` "
"file."
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:106
msgid ""
"The configuration file `$GIT_DIR/config` in the superproject.  Git only "
"recurses into active submodules (see \"ACTIVE SUBMODULES\" section below)."
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:110
msgid ""
"If the submodule is not yet initialized, then the configuration inside the "
"submodule does not exist yet, so where to obtain the submodule from is "
"configured here for example."
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:115
msgid ""
"The `.gitmodules` file inside the superproject. A project usually uses this "
"file to suggest defaults for the upstream collection of repositories for the "
"mapping that is required between a submodule's name and its path."
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:119
msgid ""
"This file mainly serves as the mapping between the name and path of "
"submodules in the superproject, such that the submodule's Git directory can "
"be located."
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:123
msgid ""
"If the submodule has never been initialized, this is the only place where "
"submodule configuration is found. It serves as the last fallback to specify "
"where to obtain the submodule from."
msgstr ""

#. type: Title -
#: ../Documentation/gitsubmodules.txt:125
#, no-wrap
msgid "FORMS"
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:128
msgid "Submodules can take the following forms:"
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:131
msgid ""
"The basic form described in DESCRIPTION with a Git directory, a working "
"directory, a `gitlink`, and a `.gitmodules` entry."
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:136
msgid ""
"\"Old-form\" submodule: A working directory with an embedded `.git` "
"directory, and the tracking `gitlink` and `.gitmodules` entry in the "
"superproject. This is typically found in repositories generated using older "
"versions of Git."
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:138
msgid "It is possible to construct these old form repositories manually."
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:142
msgid ""
"When deinitialized or deleted (see below), the submodule's Git directory is "
"automatically moved to `$GIT_DIR/modules/<name>/` of the superproject."
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:147
msgid ""
"Deinitialized submodule: A `gitlink`, and a `.gitmodules` entry, but no "
"submodule working directory. The submodule's Git directory may be there as "
"after deinitializing the Git directory is kept around.  The directory which "
"is supposed to be the working directory is empty instead."
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:152
msgid ""
"A submodule can be deinitialized by running `git submodule deinit`.  Besides "
"emptying the working directory, this command only modifies the "
"superproject's `$GIT_DIR/config` file, so the superproject's history is not "
"affected. This can be undone using `git submodule init`."
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:156
msgid ""
"Deleted submodule: A submodule can be deleted by running `git rm <submodule "
"path> && git commit`. This can be undone using `git revert`."
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:163
msgid ""
"The deletion removes the superproject's tracking data, which are both the "
"`gitlink` entry and the section in the `.gitmodules` file.  The submodule's "
"working directory is removed from the file system, but the Git directory is "
"kept around as it to make it possible to checkout past commits without "
"requiring fetching from another repository."
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:166
msgid ""
"To completely remove a submodule, manually delete "
"`$GIT_DIR/modules/<name>/`."
msgstr ""

#. type: Title -
#: ../Documentation/gitsubmodules.txt:168
#, no-wrap
msgid "ACTIVE SUBMODULES"
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:171
msgid "A submodule is considered active,"
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:173
msgid "if `submodule.<name>.active` is set to `true`"
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:175 ../Documentation/gitsubmodules.txt:179
msgid "or"
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:177
msgid "if the submodule's path matches the pathspec in `submodule.active`"
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:181
msgid "if `submodule.<name>.url` is set."
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:183
msgid "and these are evaluated in this order."
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:185
msgid "For example:"
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:194
#, no-wrap
msgid ""
"  [submodule \"foo\"]\n"
"    active = false\n"
"    url = https://example.org/foo\n"
"  [submodule \"bar\"]\n"
"    active = true\n"
"    url = https://example.org/bar\n"
"  [submodule \"baz\"]\n"
"    url = https://example.org/baz\n"
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:197
msgid ""
"In the above config only the submodule 'bar' and 'baz' are active, 'bar' due "
"to (1) and 'baz' due to (3). 'foo' is inactive because"
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:198
msgid "takes precedence over (3)"
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:200
msgid "Note that (3) is a historical artefact and will be ignored if the"
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:205
msgid ""
"and (2) specify that the submodule is not active. In other words, if we have "
"a `submodule.<name>.active` set to `false` or if the submodule's path is "
"excluded in the pathspec in `submodule.active`, the url doesn't matter "
"whether it is present or not. This is illustrated in the example that "
"follows."
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:207
#, no-wrap
msgid "[submodule \"foo\"]\n"
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:209
#, no-wrap
msgid ""
"active = true\n"
"url = https://example.org/foo\n"
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:210
#, no-wrap
msgid "[submodule \"bar\"]\n"
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:211
#, no-wrap
msgid "url = https://example.org/bar\n"
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:212
#, no-wrap
msgid "[submodule \"baz\"]\n"
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:213
#, no-wrap
msgid "url = https://example.org/baz\n"
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:214
#, no-wrap
msgid "[submodule \"bob\"]\n"
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:215
#, no-wrap
msgid "ignore = true\n"
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:216
#, no-wrap
msgid "[submodule]\n"
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:218
#, no-wrap
msgid ""
"active = b*\n"
"active = :(exclude) baz\n"
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:224
msgid ""
"In here all submodules except 'baz' (foo, bar, bob) are active.  'foo' due "
"to its own active flag and all the others due to the submodule active "
"pathspec, which specifies that any submodule starting with 'b' except 'baz' "
"are also active, regardless of the presence of the .url field."
msgstr ""

#. type: Title -
#: ../Documentation/gitsubmodules.txt:226
#, no-wrap
msgid "Workflow for a third party library"
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:230
#, no-wrap
msgid ""
"  # Add a submodule\n"
"  git submodule add <url> <path>\n"
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:235
#, no-wrap
msgid ""
"  # Occasionally update the submodule to a new version:\n"
"  git -C <path> checkout <new version>\n"
"  git add <path>\n"
"  git commit -m \"update submodule to new version\"\n"
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:238
#, no-wrap
msgid ""
"  # See the list of submodules in a superproject\n"
"  git submodule status\n"
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:240
#, no-wrap
msgid "  # See FORMS on removing submodules\n"
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:243
msgid "Workflow for an artificially split repo"
msgstr ""

#. type: delimited block -
#: ../Documentation/gitsubmodules.txt:248
#, no-wrap
msgid ""
"  # Enable recursion for relevant commands, such that\n"
"  # regular commands recurse into submodules by default\n"
"  git config --global submodule.recurse true\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/gitsubmodules.txt:253
#, no-wrap
msgid ""
"  # Unlike most other commands below, clone still needs\n"
"  # its own recurse flag:\n"
"  git clone --recurse <URL> <directory>\n"
"  cd <directory>\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/gitsubmodules.txt:257
#, no-wrap
msgid ""
"  # Get to know the code:\n"
"  git grep foo\n"
"  git ls-files --recurse-submodules\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/gitsubmodules.txt:260
#, no-wrap
msgid ""
"[NOTE]\n"
"`git ls-files` also requires its own `--recurse-submodules` flag.\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/gitsubmodules.txt:264
#, no-wrap
msgid ""
"  # Get new code\n"
"  git fetch\n"
"  git pull --rebase\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/gitsubmodules.txt:268
#, no-wrap
msgid ""
"  # Change worktree\n"
"  git checkout\n"
"  git reset\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/gitsubmodules.txt:270
#, no-wrap
msgid "Implementation details\n"
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:279
msgid ""
"When cloning or pulling a repository containing submodules the submodules "
"will not be checked out by default; you can instruct `clone` to recurse into "
"submodules. The `init` and `update` subcommands of `git submodule` will "
"maintain submodules checked out and at an appropriate revision in your "
"working tree. Alternatively you can set `submodule.recurse` to have "
"`checkout` recursing into submodules (note that `submodule.recurse` also "
"affects other Git commands, see linkgit:git-config[1] for a complete list)."
msgstr ""

#. type: Title -
#: ../Documentation/gitsubmodules.txt:282
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:284
msgid "linkgit:git-submodule[1], linkgit:gitmodules[5]."
msgstr ""

#. type: Title -
#: ../Documentation/gitsubmodules.txt:286
#, no-wrap
msgid "GIT"
msgstr ""

#. type: Plain text
#: ../Documentation/gitsubmodules.txt:287
msgid "Part of the linkgit:git[1] suite"
msgstr ""
