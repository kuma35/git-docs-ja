# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 0.0\n"
"POT-Creation-Date: 2022-09-24 21:41+0900\n"
"PO-Revision-Date: 2022-03-22 06:44+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/gitsubmodules.txt:2
#, no-wrap
msgid "gitsubmodules(7)"
msgstr "gitsubmodules(7)"

#. type: Title -
#: ../Documentation-sedout/gitsubmodules.txt:5
#, no-wrap
msgid "NAME"
msgstr "NAME"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:7
msgid "gitsubmodules - Mounting one repository inside another"
msgstr "gitsubmodules - あるリポジトリを別のリポジトリ内にマウントする"

#. type: Title -
#: ../Documentation-sedout/gitsubmodules.txt:9
#, no-wrap
msgid "SYNOPSIS"
msgstr "SYNOPSIS"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:11
#, no-wrap
msgid " .gitmodules, $GIT_DIR/config\n"
msgstr " .gitmodules, $GIT_DIR/config\n"

#. type: delimited block -
#: ../Documentation-sedout/gitsubmodules.txt:14
#, no-wrap
msgid ""
"git submodule\n"
"git <command> --recurse-submodules\n"
msgstr ""
"git submodule\n"
"git <command> --recurse-submodules\n"

#. type: Title -
#: ../Documentation-sedout/gitsubmodules.txt:17
#, no-wrap
msgid "DESCRIPTION"
msgstr "DESCRIPTION"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:22
msgid ""
"A submodule is a repository embedded inside another repository.  The "
"submodule has its own history; the repository it is embedded in is called a "
"superproject."
msgstr ""
"サブモジュール(submodule)は、別のリポジトリ内に埋め込まれたリポジトリです。サ"
"ブモジュールにはサブモジュール独自の履歴があります。 それが埋め込まれているリ"
"ポジトリはスーパープロジェクト(superproject)と呼ばれます。"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:28
msgid ""
"On the filesystem, a submodule usually (but not always - see FORMS below)  "
"consists of (i) a Git directory located under the `$GIT_DIR/modules/` "
"directory of its superproject, (ii) a working directory inside the "
"superproject's working directory, and a `.git` file at the root of the "
"submodule's working directory pointing to (i)."
msgstr ""
"ファイルシステムでは、サブモジュールは通常(常にではありませんが。以下のFORMS"
"を参照)、(i)スーパープロジェクトの `$GIT_DIR/modules/` ディレクトリの下にある"
"Gitディレクトリや、(ii)スーパープロジェクトの作業ディレクトリ内の作業ディレク"
"トリや、(i)の指すサブモジュールの作業ディレクトリのルートにある `.git` ファイ"
"ルで構成されます。"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:34
msgid ""
"Assuming the submodule has a Git directory at `$GIT_DIR/modules/foo/` and a "
"working directory at `path/to/bar/`, the superproject tracks the submodule "
"via a `gitlink` entry in the tree at `path/to/bar` and an entry in its `."
"gitmodules` file (see linkgit:gitmodules[5]) of the form `submodule.foo.path "
"= path/to/bar`."
msgstr ""
"サブモジュールのGitディレクトリが `$GIT_DIR/modules/foo/` にあり、作業ディレ"
"クトリが `path/to/bar/` にあるとすると、スーパープロジェクトは、ツリーの "
"`path/to/bar` にある `gitlink` エントリと、`submodule.foo.path = path/to/"
"bar` 形式の `.gitmodules` ファイル(linkgit: gitmodules[5] を参照)のエントリを"
"介してサブモジュールを追跡します。"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:37
msgid ""
"The `gitlink` entry contains the object name of the commit that the "
"superproject expects the submodule's working directory to be at."
msgstr ""
"`gitlink` エントリには、スーパープロジェクトがサブモジュールの作業ディレクト"
"リにあると予想するコミットのオブジェクト名が含まれています。"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:41
msgid ""
"The section `submodule.foo.*` in the `.gitmodules` file gives additional "
"hints to Git's porcelain layer. For example, the `submodule.foo.url` setting "
"specifies where to obtain the submodule."
msgstr ""
"`.gitmodules` ファイルのセクション `submodule.foo.*` は、Gitの磁器レイヤーに"
"追加のヒントを提供します。 たとえば、 `submodule.foo.url` 設定は、サブモ"
"ジュールを取得する場所を指定します。"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:43
msgid "Submodules can be used for at least two different use cases:"
msgstr "サブモジュールは、少なくとも2つの異なるユースケースに使用できます:"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:51
msgid ""
"Using another project while maintaining independent history.  Submodules "
"allow you to contain the working tree of another project within your own "
"working tree while keeping the history of both projects separate. Also, "
"since submodules are fixed to an arbitrary version, the other project can be "
"independently developed without affecting the superproject, allowing the "
"superproject project to fix itself to new versions only when desired."
msgstr ""
"独立した履歴を維持しながら別のプロジェクトを使用。サブモジュールを使用する"
"と、両方のプロジェクトの履歴を分離したまま、あなた独自の作業ツリー内に別のプ"
"ロジェクトの作業ツリーを含めることができます。また、サブモジュールは任意の"
"バージョンに固定できるため、別のプロジェクトは、スーパープロジェクトに影響を"
"与えることなく独立して開発でき、スーパープロジェクトプロジェクトが必要とした"
"場合にのみ別プロジェクトを新しいバージョンに固定できます。"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:56
msgid ""
"Splitting a (logically single) project into multiple repositories and tying "
"them back together. This can be used to overcome current limitations of "
"Git's implementation to have finer grained access:"
msgstr ""
"(論理的に単一の)プロジェクトを複数のリポジトリに分割し、それらを結び付けま"
"す。これを使用して、Gitの実装の現在の制限を克服し、よりきめ細かいアクセスを実"
"現できます:"

#. type: Labeled list
#: ../Documentation-sedout/gitsubmodules.txt:57
#, no-wrap
msgid "Size of the Git repository"
msgstr "Gitリポジトリのサイズ"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:64
#, no-wrap
msgid ""
"In its current form Git scales up poorly for large repositories containing\n"
"content that is not compressed by delta computation between trees.\n"
"For example, you can use submodules to hold large binary assets\n"
"and these repositories can be shallowly cloned such that you do not\n"
"have a large history locally.\n"
msgstr ""
"現在の形式では、\n"
"Gitは、ツリー間のデルタ計算によって圧縮されていないコンテンツを含む大規模なリポジトリではスケールアップが十分にできません。\n"
"たとえば、あなたはサブモジュールを使用して大きなバイナリアセットを保持し、\n"
"これらのリポジトリを浅く複製して、\n"
"ローカルに大きな履歴がないようにすることができます。\n"

#. type: Labeled list
#: ../Documentation-sedout/gitsubmodules.txt:65
#, no-wrap
msgid "Transfer size"
msgstr "転送サイズ"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:72
#, no-wrap
msgid ""
"In its current form Git requires the whole working tree present. It\n"
"does not allow partial trees to be transferred in fetch or clone.\n"
"If the project you work on consists of multiple repositories tied\n"
"together as submodules in a superproject, you can avoid fetching the\n"
"working trees of the repositories you are not interested in.\n"
msgstr ""
"現在の形式では、Gitは作業ツリー全体が存在する必要があります。\n"
"部分的なツリーをフェッチまたはクローンで転送することはできません。\n"
"あなたが作業しているプロジェクトが、\n"
"スーパープロジェクトのサブモジュールとして結合された複数のリポジトリで構成されている場合は、\n"
"関心のないリポジトリの作業ツリーをフェッチすることを回避できます。\n"

#. type: Labeled list
#: ../Documentation-sedout/gitsubmodules.txt:73
#, no-wrap
msgid "Access control"
msgstr "アクセス制御"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:77
#, no-wrap
msgid ""
"By restricting user access to submodules, this can be used to implement\n"
"read/write policies for different users.\n"
msgstr ""
"サブモジュールへのユーザーアクセスを制限することにより、\n"
"さまざまなユーザーの読み取り/書き込みポリシーを実装できます。\n"

#. type: Title -
#: ../Documentation-sedout/gitsubmodules.txt:80
#, no-wrap
msgid "The configuration of submodules"
msgstr "The configuration of submodules"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:84
msgid ""
"Submodule operations can be configured using the following mechanisms (from "
"highest to lowest precedence):"
msgstr ""
"サブモジュール操作は、以下のメカニズムを使用して構成(configure)できます(優先"
"順位の高い順です):"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:91
msgid ""
"The command line for those commands that support taking submodules as part "
"of their pathspecs. Most commands have a boolean flag `--recurse-submodules` "
"which specify whether to recurse into submodules.  Examples are `grep` and "
"`checkout`.  Some commands take enums, such as `fetch` and `push`, where you "
"can specify how submodules are affected."
msgstr ""
"パススペックの一部としてサブモジュールを使用することをサポートするコマンドの"
"コマンドライン。 ほとんどのコマンドには、サブモジュールに再帰するかどうかを指"
"定するブールフラグ `--recurse-submodules` があります。 例としては、 `grep` "
"や `checkout` があります。 `fetch` や `push` などの一部のコマンドは、サブモ"
"ジュールがどのように影響を受けるかを指定できる列挙型を取ります。"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:96
msgid ""
"The configuration inside the submodule. This includes `$GIT_DIR/config` in "
"the submodule, but also settings in the tree such as a `.gitattributes` or `."
"gitignore` files that specify behavior of commands inside the submodule."
msgstr ""
"サブモジュール内の構成。 これには、サブモジュール内の `$GIT_DIR/config` だけ"
"でなく、サブモジュール内のコマンドの動作を指定する `.gitattributes` または `."
"gitignore` ファイルなどのツリー内の設定も含まれます。"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:102
msgid ""
"For example an effect from the submodule's `.gitignore` file would be "
"observed when you run `git status --ignore-submodules=none` in the "
"superproject. This collects information from the submodule's working "
"directory by running `status` in the submodule while paying attention to the "
"`.gitignore` file of the submodule."
msgstr ""
"たとえば、スーパープロジェクトで `git status --ignore-submodules=none` を実行"
"すると、サブモジュールの `.gitignore` ファイルの効果が確認できます。これは、"
"サブモジュールの `.gitignore` ファイルに注意を払いながらサブモジュールで "
"`status` を実行することにより、サブモジュールの作業ディレクトリから情報を収集"
"します。"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:108
msgid ""
"The submodule's `$GIT_DIR/config` file would come into play when running "
"`git push --recurse-submodules=check` in the superproject, as this would "
"check if the submodule has any changes not published to any remote. The "
"remotes are configured in the submodule as usual in the `$GIT_DIR/config` "
"file."
msgstr ""
"サブモジュールの `$GIT_DIR/config` ファイルは、スーパープロジェクトで `git "
"push --recurse-submodules=check` を実行すると機能します。これは、サブモジュー"
"ルにリモートに公開されていない変更があるかどうかをチェックするためです。リ"
"モートは、通常どおりサブモジュールの `$GIT_DIR/config` ファイルで構成されま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:112
msgid ""
"The configuration file `$GIT_DIR/config` in the superproject.  Git only "
"recurses into active submodules (see \"ACTIVE SUBMODULES\" section below)."
msgstr ""
"スーパープロジェクトの構成ファイル `$GIT_DIR/config` 。Gitはアクティブなサブ"
"モジュールのみ再帰します(以下の「ACTIVE SUBMODULES」セクションを参照)。"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:116
msgid ""
"If the submodule is not yet initialized, then the configuration inside the "
"submodule does not exist yet, so where to obtain the submodule from is "
"configured here for example."
msgstr ""
"サブモジュールがまだ初期化されていない場合、サブモジュール内の構成"
"(configuration)はまだ存在しないため、たとえば、サブモジュールを取得する場所は"
"ここで構成されます。"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:121
msgid ""
"The `.gitmodules` file inside the superproject. A project usually uses this "
"file to suggest defaults for the upstream collection of repositories for the "
"mapping that is required between a submodule's name and its path."
msgstr ""
"スーパープロジェクト内の `.gitmodules` ファイル。プロジェクトは通常、このファ"
"イルを使用して、サブモジュールの名前とパスの間に必要なマッピングについて、上"
"流のリポジトリコレクションのデフォルトを提案します。"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:125
msgid ""
"This file mainly serves as the mapping between the name and path of "
"submodules in the superproject, such that the submodule's Git directory can "
"be located."
msgstr ""
"このファイルは主に、スーパープロジェクト内のサブモジュールの名前とパスの間の"
"マッピングとして機能し、サブモジュールのGitディレクトリを見つけることができま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:129
msgid ""
"If the submodule has never been initialized, this is the only place where "
"submodule configuration is found. It serves as the last fallback to specify "
"where to obtain the submodule from."
msgstr ""
"サブモジュールが初期化されていない場合、これはサブモジュール構成が見つかる唯"
"一の場所です。 これは、サブモジュールを取得する場所を指定するための最後の"
"フォールバックとして機能します。"

#. type: Title -
#: ../Documentation-sedout/gitsubmodules.txt:131
#, no-wrap
msgid "FORMS"
msgstr "FORMS"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:134
msgid "Submodules can take the following forms:"
msgstr "サブモジュールは以下の形式をとることができます:"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:137
msgid ""
"The basic form described in DESCRIPTION with a Git directory, a working "
"directory, a `gitlink`, and a `.gitmodules` entry."
msgstr ""
"DESCRIPTIONで説明されている、Gitディレクトリと、作業ディレクトリと、 "
"`gitlink` と、 `.gitmodules`エントリ、を含む基本形式。"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:142
msgid ""
"\"Old-form\" submodule: A working directory with an embedded `.git` "
"directory, and the tracking `gitlink` and `.gitmodules` entry in the "
"superproject. This is typically found in repositories generated using older "
"versions of Git."
msgstr ""
"「古い形式」のサブモジュール: `.git` ディレクトリが埋め込まれた作業ディレクト"
"リと、スーパープロジェクトの `gitlink` および `.gitmodules` エントリの追跡。 "
"これは通常、古いバージョンのGitを使用して生成されたリポジトリにあります。"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:144
msgid "It is possible to construct these old form repositories manually."
msgstr "これらの古い形式のリポジトリを手動で構築することは可能です。"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:148
msgid ""
"When deinitialized or deleted (see below), the submodule's Git directory is "
"automatically moved to `$GIT_DIR/modules/<name>/` of the superproject."
msgstr ""
"非初期化(deinitialized)または削除されると(以下を参照)、サブモジュールのGit"
"ディレクトリはスーパープロジェクトの `$GIT_DIR/modules/<name>/` に自動的に移"
"動されます。"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:153
msgid ""
"Deinitialized submodule: A `gitlink`, and a `.gitmodules` entry, but no "
"submodule working directory. The submodule's Git directory may be there as "
"after deinitializing the Git directory is kept around.  The directory which "
"is supposed to be the working directory is empty instead."
msgstr ""
"非初期化された(deinitialized)サブモジュール: `gitlink` と `.gitmodules` エン"
"トリがありますが、サブモジュールの作業ディレクトリはありません。サブモジュー"
"ルのGitディレクトリは、Gitディレクトリを初期化解除した後も保持されているた"
"め、そこにある可能性があります。 代わりに、作業ディレクトリであるはずのディレ"
"クトリが空になります。"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:158
msgid ""
"A submodule can be deinitialized by running `git submodule deinit`.  Besides "
"emptying the working directory, this command only modifies the "
"superproject's `$GIT_DIR/config` file, so the superproject's history is not "
"affected. This can be undone using `git submodule init`."
msgstr ""
"サブモジュールは、 `git submodule deinit` を実行することで非初期化"
"(deinitialized)できます。このコマンドは、作業ディレクトリを空にするだけでな"
"く、スーパープロジェクトの `$GIT_DIR/config` ファイルのみを変更するため、スー"
"パープロジェクトの履歴は影響を受けません。 これは、 `git submodule init` を使"
"用して元に戻すことができます。"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:162
msgid ""
"Deleted submodule: A submodule can be deleted by running `git rm <submodule "
"path> && git commit`. This can be undone using `git revert`."
msgstr ""
"削除されたサブモジュール: サブモジュールは、 `git rm <submodule path> && git "
"commit` を実行することで削除できます。これは、 `git revert` を使用して元に戻"
"すことができます。"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:169
msgid ""
"The deletion removes the superproject's tracking data, which are both the "
"`gitlink` entry and the section in the `.gitmodules` file.  The submodule's "
"working directory is removed from the file system, but the Git directory is "
"kept around as it to make it possible to checkout past commits without "
"requiring fetching from another repository."
msgstr ""
"削除すると、スーパープロジェクトの追跡データが削除されます。これは、 "
"`gitlink` エントリと `.gitmodules` ファイルのセクションの両方です。サブモ"
"ジュールの作業ディレクトリはファイルシステムから削除されますが、Gitディレクト"
"リは、別のリポジトリからフェッチすることなく過去のコミットをチェックアウトで"
"きるようにするために保持されます。"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:172
msgid ""
"To completely remove a submodule, manually delete `$GIT_DIR/modules/<name>/`."
msgstr ""
"サブモジュールを完全に削除するには、手動で `$GIT_DIR/modules/<name>/` を削除"
"します。"

#. type: Title -
#: ../Documentation-sedout/gitsubmodules.txt:174
#, no-wrap
msgid "ACTIVE SUBMODULES"
msgstr "ACTIVE SUBMODULES"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:177
msgid "A submodule is considered active,"
msgstr "サブモジュールがアクティブと見なされるには、"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:179
msgid "if `submodule.<name>.active` is set to `true`"
msgstr "if `submodule.<name>.active` が `true` に設定されている"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:181
#: ../Documentation-sedout/gitsubmodules.txt:185
msgid "or"
msgstr "or"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:183
msgid "if the submodule's path matches the pathspec in `submodule.active`"
msgstr "if サブモジュールのパスが `submodule.active` のパススペックと一致する"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:187
msgid "if `submodule.<name>.url` is set."
msgstr "if  `submodule.<name>.url` が設定されている"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:189
msgid "and these are evaluated in this order."
msgstr "これらは上記の順序で評価されます。"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:191
msgid "For example:"
msgstr "例:"

#. type: delimited block -
#: ../Documentation-sedout/gitsubmodules.txt:201
#, no-wrap
msgid ""
"  [submodule \"foo\"]\n"
"    active = false\n"
"    url = https://example.org/foo\n"
"  [submodule \"bar\"]\n"
"    active = true\n"
"    url = https://example.org/bar\n"
"  [submodule \"baz\"]\n"
"    url = https://example.org/baz\n"
msgstr ""
"  [submodule \"foo\"]\n"
"    active = false\n"
"    url = https://example.org/foo\n"
"  [submodule \"bar\"]\n"
"    active = true\n"
"    url = https://example.org/bar\n"
"  [submodule \"baz\"]\n"
"    url = https://example.org/baz\n"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:206
msgid ""
"In the above config only the submodule 'bar' and 'baz' are active, 'bar' due "
"to (1) and 'baz' due to (3). 'foo' is inactive because (1)  takes precedence "
"over (3)"
msgstr ""
"上記の構成では、サブモジュール `bar` と `baz` のみがアクティブになります。 "
"`bar` は上記(1)により、 `baz` は上記(3)によりアクティブになります。 (1)が(3)"
"よりも優先されるため、 `foo` は非アクティブです。"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:213
msgid ""
"Note that (3) is a historical artefact and will be ignored if the (1)  and "
"(2) specify that the submodule is not active. In other words, if we have a "
"`submodule.<name>.active` set to `false` or if the submodule's path is "
"excluded in the pathspec in `submodule.active`, the url doesn't matter "
"whether it is present or not. This is illustrated in the example that "
"follows."
msgstr ""
"上記(1)と(2)でサブモジュールがアクティブでないことを指定している場合は、(3)は"
"歴史的遺物であり、無視されることに注意してください。 つまり、 `submodule."
"<name>.active` が `false` に設定されている場合、またはサブモジュールのパスが "
"`submodule.active` のパススペックで除外されている場合、URLは存在するかどうか"
"は関係ありません。これを以下の例に示します。"

#. type: delimited block -
#: ../Documentation-sedout/gitsubmodules.txt:227
#, no-wrap
msgid ""
"  [submodule \"foo\"]\n"
"    active = true\n"
"    url = https://example.org/foo\n"
"  [submodule \"bar\"]\n"
"    url = https://example.org/bar\n"
"  [submodule \"baz\"]\n"
"    url = https://example.org/baz\n"
"  [submodule \"bob\"]\n"
"    ignore = true\n"
"  [submodule]\n"
"    active = b*\n"
"    active = :(exclude) baz\n"
msgstr ""
"  [submodule \"foo\"]\n"
"    active = true\n"
"    url = https://example.org/foo\n"
"  [submodule \"bar\"]\n"
"    url = https://example.org/bar\n"
"  [submodule \"baz\"]\n"
"    url = https://example.org/baz\n"
"  [submodule \"bob\"]\n"
"    ignore = true\n"
"  [submodule]\n"
"    active = b*\n"
"    active = :(exclude) baz\n"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:234
msgid ""
"In here all submodules except 'baz' (foo, bar, bob) are active.  'foo' due "
"to its own active flag and all the others due to the submodule active "
"pathspec, which specifies that any submodule starting with 'b' except 'baz' "
"are also active, regardless of the presence of the .url field."
msgstr ""
"ここでは、 baz を除くすべてのサブモジュール(foo、bar、bob)がアクティブになっ"
"ています。 foo はそれ自体のアクティブフラグによるものであり、他のすべては "
"submodule active パススペック によるものです。これは、 .url フィールドの存在"
"に関係なく、baz を除く 'b' で始まるすべてのサブモジュールもアクティブであるこ"
"とを指定します。"

#. type: Title -
#: ../Documentation-sedout/gitsubmodules.txt:236
#, no-wrap
msgid "Workflow for a third party library"
msgstr "Workflow for a third party library"

#. type: delimited block -
#: ../Documentation-sedout/gitsubmodules.txt:241
#, fuzzy, no-wrap
#| msgid ""
#| "  # Add a submodule\n"
#| "  git submodule add <url> <path>\n"
msgid ""
"  # Add a submodule\n"
"  git submodule add <URL> <path>\n"
msgstr ""
"  # サブモジュールの追加\n"
"  git submodule add <url> <path>\n"

#. type: delimited block -
#: ../Documentation-sedout/gitsubmodules.txt:246
#, no-wrap
msgid ""
"  # Occasionally update the submodule to a new version:\n"
"  git -C <path> checkout <new version>\n"
"  git add <path>\n"
"  git commit -m \"update submodule to new version\"\n"
msgstr ""
"  # ときどきサブモジュールを新しいバージョンに更新します:\n"
"  git -C <path> checkout <new version>\n"
"  git add <path>\n"
"  git commit -m \"update submodule to new version\"\n"

#. type: delimited block -
#: ../Documentation-sedout/gitsubmodules.txt:249
#, no-wrap
msgid ""
"  # See the list of submodules in a superproject\n"
"  git submodule status\n"
msgstr ""
"  # スーパープロジェクト内でサブモジュールのリストを表示します\n"
"  git submodule status\n"

#. type: delimited block -
#: ../Documentation-sedout/gitsubmodules.txt:251
#, no-wrap
msgid "  # See FORMS on removing submodules\n"
msgstr "  # サブモジュールの削除については、「FORMS」を参照してください\n"

#. type: Title -
#: ../Documentation-sedout/gitsubmodules.txt:255
#, no-wrap
msgid "Workflow for an artificially split repo"
msgstr "Workflow for an artificially split repo"

#. type: delimited block -
#: ../Documentation-sedout/gitsubmodules.txt:261
#, no-wrap
msgid ""
"  # Enable recursion for relevant commands, such that\n"
"  # regular commands recurse into submodules by default\n"
"  git config --global submodule.recurse true\n"
msgstr ""
"  # 関連するコマンドの再帰(recursion)を有効にし、\n"
"  # 対象のコマンドがデフォルトでサブモジュールで再帰処理するようにします\n"
"  git config --global submodule.recurse true\n"

#. type: delimited block -
#: ../Documentation-sedout/gitsubmodules.txt:266
#, no-wrap
msgid ""
"  # Unlike most other commands below, clone still needs\n"
"  # its own recurse flag:\n"
"  git clone --recurse <URL> <directory>\n"
"  cd <directory>\n"
msgstr ""
"  # 他のほとんどのコマンドとは異なり、\n"
"  # cloneには独自の再帰フラグが必要です:\n"
"  git clone --recurse <URL> <directory>\n"
"  cd <directory>\n"

#. type: delimited block -
#: ../Documentation-sedout/gitsubmodules.txt:270
#, no-wrap
msgid ""
"  # Get to know the code:\n"
"  git grep foo\n"
"  git ls-files --recurse-submodules\n"
msgstr ""
"  # (ソース)コードを知る為に取得する\n"
"  git grep foo\n"
"  git ls-files --recurse-submodules\n"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:275
msgid "`git ls-files` also requires its own `--recurse-submodules` flag."
msgstr ""
"`git ls-files` もまた、それ独自の `--recurse-submodules` フラグが必要です。"

#. type: delimited block -
#: ../Documentation-sedout/gitsubmodules.txt:280
#, no-wrap
msgid ""
"  # Get new code\n"
"  git fetch\n"
"  git pull --rebase\n"
msgstr ""
"  # 新しいコードを得る\n"
"  git fetch\n"
"  git pull --rebase\n"

#. type: delimited block -
#: ../Documentation-sedout/gitsubmodules.txt:284
#, no-wrap
msgid ""
"  # Change worktree\n"
"  git checkout\n"
"  git reset\n"
msgstr ""
"  # 作業ツリーの変更\n"
"  git checkout\n"
"  git reset\n"

#. type: Title -
#: ../Documentation-sedout/gitsubmodules.txt:288
#, no-wrap
msgid "Implementation details"
msgstr "Implementation details"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:297
msgid ""
"When cloning or pulling a repository containing submodules the submodules "
"will not be checked out by default; you can instruct `clone` to recurse into "
"submodules. The `init` and `update` subcommands of `git submodule` will "
"maintain submodules checked out and at an appropriate revision in your "
"working tree. Alternatively you can set `submodule.recurse` to have "
"`checkout` recursing into submodules (note that `submodule.recurse` also "
"affects other Git commands, see linkgit:git-config[1] for a complete list)."
msgstr ""
"サブモジュールを含むリポジトリのクローンを作成またはプルする場合、デフォルト"
"ではサブモジュールはチェックアウトされません。クローンにサブモジュールに再帰"
"するように指示できます。 `git submodule` の `init` および `update` サブコマン"
"ドは、チェックアウトされたサブモジュールを維持し、作業ツリーの適切なリビジョ"
"ンに維持します。 または、 `submodule.recurse` を設定して `checkout` をサブモ"
"ジュールに再帰させることもできます( `submodule.recurse` は他のGitコマンドにも"
"影響することに注意してください。完全なリストについてはlinkgit:git-config[1] "
"を参照してください)。"

#. type: Title -
#: ../Documentation-sedout/gitsubmodules.txt:300
#, no-wrap
msgid "SEE ALSO"
msgstr "SEE ALSO"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:302
msgid "linkgit:git-submodule[1], linkgit:gitmodules[5]."
msgstr "linkgit:git-submodule[1], linkgit:gitmodules[5]."

#. type: Title -
#: ../Documentation-sedout/gitsubmodules.txt:304
#, no-wrap
msgid "GIT"
msgstr "GIT"

#. type: Plain text
#: ../Documentation-sedout/gitsubmodules.txt:305
msgid "Part of the linkgit:git[1] suite"
msgstr "Part of the linkgit:git[1] suite"
