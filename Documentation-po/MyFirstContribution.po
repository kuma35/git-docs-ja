# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-11-04 04:38+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/MyFirstContribution.txt:2
#, no-wrap
msgid "My First Contribution to the Git Project"
msgstr ""

#. type: Title ==
#: ../Documentation-sedout/MyFirstContribution.txt:6
#, no-wrap
msgid "Summary"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:10
msgid ""
"This is a tutorial demonstrating the end-to-end workflow of creating a "
"change to the Git tree, sending it for review, and making changes based on "
"comments."
msgstr ""

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:12
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:16
msgid ""
"This tutorial assumes you're already fairly familiar with using Git to "
"manage source code.  The Git workflow steps will largely remain unexplained."
msgstr ""

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:18
#, no-wrap
msgid "Related Reading"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:22
msgid ""
"This tutorial aims to summarize the following documents, but the reader may "
"find useful additional context:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:24
msgid "`Documentation/SubmittingPatches`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:25
msgid "`Documentation/howto/new-command.txt`"
msgstr ""

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:27
#, no-wrap
msgid "Getting Help"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:30
msgid "If you get stuck, you can seek help in the following places."
msgstr ""

#. type: Title ====
#: ../Documentation-sedout/MyFirstContribution.txt:31
#, no-wrap
msgid "git@vger.kernel.org"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:41
msgid ""
"This is the main Git project mailing list where code reviews, version "
"announcements, design discussions, and more take place. Those interested in "
"contributing are welcome to post questions here. The Git list requires plain-"
"text-only emails and prefers inline and bottom-posting when replying to "
"mail; you will be CC'd in all replies to you. Optionally, you can subscribe "
"to the list by sending an email to majordomo@vger.kernel.org with "
"\"subscribe git\" in the body. The https://lore.kernel.org/git[archive] of "
"this mailing list is available to view in a browser."
msgstr ""

#. type: Title ====
#: ../Documentation-sedout/MyFirstContribution.txt:42
#, no-wrap
msgid "https://groups.google.com/forum/#!forum/git-mentoring[git-mentoring@googlegroups.com]"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:49
msgid ""
"This mailing list is targeted to new contributors and was created as a place "
"to post questions and receive answers outside of the public eye of the main "
"list.  Veteran contributors who are especially interested in helping mentor "
"newcomers are present on the list. In order to avoid search indexers, group "
"membership is required to view messages; anyone can join and no approval is "
"required."
msgstr ""

#. type: Title ====
#: ../Documentation-sedout/MyFirstContribution.txt:50
#, no-wrap
msgid "https://web.libera.chat/#git-devel[#git-devel] on Libera Chat"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:61
msgid ""
"This IRC channel is for conversations between Git contributors. If someone "
"is currently online and knows the answer to your question, you can receive "
"help in real time. Otherwise, you can read the https://colabti.org/irclogger/"
"irclogger_logs/git-devel[scrollback] to see whether someone answered you. "
"IRC does not allow offline private messaging, so if you try to private "
"message someone and then log out of IRC, they cannot respond to you. It's "
"better to ask your questions in the channel so that you can be answered if "
"you disconnect and so that others can learn from the conversation."
msgstr ""

#. type: Title ==
#: ../Documentation-sedout/MyFirstContribution.txt:63
#, no-wrap
msgid "Getting Started"
msgstr ""

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:66
#, no-wrap
msgid "Clone the Git Repository"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:71
msgid ""
"Git is mirrored in a number of locations. Clone the repository from one of "
"them; https://git-scm.com/downloads suggests one of the best places to clone "
"from is the mirror on GitHub."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:75
#, no-wrap
msgid ""
"$ git clone https://github.com/git/git git\n"
"$ cd git\n"
msgstr ""

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:78
#, no-wrap
msgid "Installing Dependencies"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:86
msgid ""
"To build Git from source, you need to have a handful of dependencies "
"installed on your system. For a hint of what's needed, you can take a look "
"at `INSTALL`, paying close attention to the section about Git's dependencies "
"on external programs and libraries. That document mentions a way to \"test-"
"drive\" our freshly built Git without installing; that's the method we'll be "
"using in this tutorial."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:89
msgid ""
"Make sure that your environment has everything you need by building your "
"brand new clone of Git from the above step:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:92
#, no-wrap
msgid "$ make\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:96
msgid ""
"The Git build is parallelizable. `-j#` is not included above but you can use "
"it as you prefer, here and elsewhere."
msgstr ""

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:98
#, no-wrap
msgid "Identify Problem to Solve"
msgstr ""

#. Use + to indicate fixed-width here; couldn't get ` to work nicely with the
#. quotes around "Pony Saying 'Um, Hello'".
#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:107
msgid ""
"In this tutorial, we will add a new command, +git psuh+, short for ``Pony "
"Saying `Um, Hello''' - a feature which has gone unimplemented despite a high "
"frequency of invocation during users' typical daily workflow."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:110
msgid ""
"(We've seen some other effort in this space with the implementation of "
"popular commands such as `sl`.)"
msgstr ""

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:112
#, no-wrap
msgid "Set Up Your Workspace"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:118
msgid ""
"Let's start by making a development branch to work on our changes. Per "
"`Documentation/SubmittingPatches`, since a brand new command is a new "
"feature, it's fine to base your work on `master`. However, in the future for "
"bugfixes, etc., you should check that document and base it on the "
"appropriate branch."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:122
msgid ""
"For the purposes of this document, we will base all our work on the `master` "
"branch of the upstream project. Create the `psuh` branch you will use for "
"development like so:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:125
#, no-wrap
msgid "$ git checkout -b psuh origin/master\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:129
msgid ""
"We'll make a number of commits here in order to demonstrate how to send a "
"topic with multiple patches up for review simultaneously."
msgstr ""

#. type: Title ==
#: ../Documentation-sedout/MyFirstContribution.txt:131
#, no-wrap
msgid "Code It Up!"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:135
msgid ""
"A reference implementation can be found at https://github.com/nasamuffin/git/"
"tree/psuh."
msgstr ""

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:137
#, no-wrap
msgid "Adding a New Command"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:144
msgid ""
"Lots of the subcommands are written as builtins, which means they are "
"implemented in C and compiled into the main `git` executable. Implementing "
"the very simple `psuh` command as a built-in will demonstrate the structure "
"of the codebase, the internal API, and the process of working together as a "
"contributor with the reviewers and maintainer to integrate this change into "
"the system."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:150
msgid ""
"Built-in subcommands are typically implemented in a function named \"cmd_\" "
"followed by the name of the subcommand, in a source file named after the "
"subcommand and contained within `builtin/`. So it makes sense to implement "
"your command in `builtin/psuh.c`. Create that file, and within it, write the "
"entry point for your command in a function matching the style and signature:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:153
#, no-wrap
msgid "int cmd_psuh(int argc, const char **argv, const char *prefix)\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:158
msgid ""
"We'll also need to add the declaration of psuh; open up `builtin.h`, find "
"the declaration for `cmd_pull`, and add a new line for `psuh` immediately "
"before it, in order to keep the declarations alphabetically sorted:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:161
#, no-wrap
msgid "int cmd_psuh(int argc, const char **argv, const char *prefix);\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:164
msgid "Be sure to `#include \"builtin.h\"` in your `psuh.c`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:167
msgid ""
"Go ahead and add some throwaway printf to that function. This is a decent "
"starting point as we can now add build rules and register the command."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:173
msgid ""
"Your throwaway text, as well as much of the text you will be adding over the "
"course of this tutorial, is user-facing. That means it needs to be "
"localizable. Take a look at `po/README` under \"Marking strings for "
"translation\".  Throughout the tutorial, we will mark strings for "
"translation as necessary; you should also do so when writing your user-"
"facing commands in the future."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:180
#, no-wrap
msgid ""
"int cmd_psuh(int argc, const char **argv, const char *prefix)\n"
"{\n"
"\tprintf(_(\"Pony saying hello goes here.\\n\"));\n"
"\treturn 0;\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:187
msgid ""
"Let's try to build it.  Open `Makefile`, find where `builtin/pull.o` is "
"added to `BUILTIN_OBJS`, and add `builtin/psuh.o` in the same way next to it "
"in alphabetical order. Once you've done so, move to the top-level directory "
"and build simply with `make`. Also add the `DEVELOPER=1` variable to turn on "
"some additional warnings:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:191
#, no-wrap
msgid ""
"$ echo DEVELOPER=1 >config.mak\n"
"$ make\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:196
msgid ""
"When you are developing the Git project, it's preferred that you use the "
"`DEVELOPER` flag; if there's some reason it doesn't work for you, you can "
"turn it off, but it's a good idea to mention the problem to the mailing list."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:199
msgid ""
"Great, now your new command builds happily on its own. But nobody invokes "
"it.  Let's change that."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:206
msgid ""
"The list of commands lives in `git.c`. We can register a new command by "
"adding a `cmd_struct` to the `commands[]` array. `struct cmd_struct` takes a "
"string with the command name, a function pointer to the command "
"implementation, and a setup option flag. For now, let's keep mimicking "
"`push`. Find the line where `cmd_push` is registered, copy it, and modify it "
"for `cmd_psuh`, placing the new line in alphabetical order (immediately "
"before `cmd_pull`)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:210
msgid ""
"The options are documented in `builtin.h` under \"Adding a new built-in.\" "
"Since we hope to print some data about the user's current workspace context "
"later, we need a Git directory, so choose `RUN_SETUP` as your only option."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:214
msgid ""
"Go ahead and build again. You should see a clean build, so let's kick the "
"tires and see if it works. There's a binary you can use to test with in the "
"`bin-wrappers` directory."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:217
#, no-wrap
msgid "$ ./bin-wrappers/git psuh\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:220
msgid "Check it out! You've got a command! Nice work! Let's commit this."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:225
msgid ""
"`git status` reveals modified `Makefile`, `builtin.h`, and `git.c` as well "
"as untracked `builtin/psuh.c` and `git-psuh`. First, let's take care of the "
"binary, which should be ignored. Open `.gitignore` in your editor, find `/"
"git-pull`, and add an entry for your new command in alphabetical order:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:235
#, no-wrap
msgid ""
"...\n"
"/git-prune-packed\n"
"/git-psuh\n"
"/git-pull\n"
"/git-push\n"
"/git-quiltimport\n"
"/git-range-diff\n"
"...\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:240
msgid ""
"Checking `git status` again should show that `git-psuh` has been removed "
"from the untracked list and `.gitignore` has been added to the modified "
"list. Now we can stage and commit:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:244
#, no-wrap
msgid ""
"$ git add Makefile builtin.h builtin/psuh.c git.c .gitignore\n"
"$ git commit -s\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:253
msgid ""
"You will be presented with your editor in order to write a commit message. "
"Start the commit with a 50-column or less subject line, including the name "
"of the component you're working on, followed by a blank line (always "
"required) and then the body of your commit message, which should provide the "
"bulk of the context.  Remember to be explicit and provide the \"Why\" of "
"your change, especially if it couldn't easily be understood from your diff. "
"When editing your commit message, don't remove the `Signed-off-by` trailer "
"which was added by `-s` above."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:256
#, no-wrap
msgid "psuh: add a built-in by popular demand\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:261
#, no-wrap
msgid ""
"Internal metrics indicate this is a command many users expect to be\n"
"present. So here's an implementation to help drive customer\n"
"satisfaction and engagement: a pony which doubtfully greets the user,\n"
"or, a Pony Saying \"Um, Hello\" (PSUH).\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:268
#, no-wrap
msgid ""
"This commit message is intentionally formatted to 72 columns per line,\n"
"starts with a single line as \"commit message subject\" that is written as\n"
"if to command the codebase to do something (add this, teach a command\n"
"that). The body of the message is designed to add information about the\n"
"commit that is not readily deduced from reading the associated diff,\n"
"such as answering the question \"why?\".\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:270
#, no-wrap
msgid "Signed-off-by: A U Thor <author@example.com>\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:277
msgid ""
"Go ahead and inspect your new commit with `git show`. \"psuh:\" indicates "
"you have modified mainly the `psuh` command. The subject line gives readers "
"an idea of what you've changed. The sign-off line (`-s`) indicates that you "
"agree to the Developer's Certificate of Origin 1.1 (see the `Documentation/"
"SubmittingPatches` +++[[dco]]+++ header)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:281
msgid ""
"For the remainder of the tutorial, the subject line only will be listed for "
"the sake of brevity. However, fully-fleshed example commit messages are "
"available on the reference implementation linked at the top of this document."
msgstr ""

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:283
#, no-wrap
msgid "Implementation"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:287
msgid ""
"It's probably useful to do at least something besides printing out a "
"string.  Let's start by having a look at everything we get."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:290
msgid ""
"Modify your `cmd_psuh` implementation to dump the args you're passed, "
"keeping existing `printf()` calls in place:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:293
#, no-wrap
msgid "\tint i;\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:295
#, no-wrap
msgid "\t...\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:302
#, no-wrap
msgid ""
"\tprintf(Q_(\"Your args (there is %d):\\n\",\n"
"\t\t  \"Your args (there are %d):\\n\",\n"
"\t\t  argc),\n"
"\t       argc);\n"
"\tfor (i = 0; i < argc; i++)\n"
"\t\tprintf(\"%d: %s\\n\", i, argv[i]);\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:305
#, no-wrap
msgid ""
"\tprintf(_(\"Your current working directory:\\n<top-level>%s%s\\n\"),\n"
"\t       prefix ? \"/\" : \"\", prefix ? prefix : \"\");\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:312
msgid ""
"Build and try it. As you may expect, there's pretty much just whatever we "
"give on the command line, including the name of our command. (If `prefix` is "
"empty for you, try `cd Documentation/ && ../bin-wrappers/git psuh`). That's "
"not so helpful. So what other context can we get?"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:315
msgid ""
"Add a line to `#include \"config.h\"`. Then, add the following bits to the "
"function body:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:318
#, no-wrap
msgid "\tconst char *cfg_name;\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:320
#: ../Documentation-sedout/MyFirstContribution.txt:379
#: ../Documentation-sedout/MyFirstContribution.txt:384
#: ../Documentation-sedout/MyFirstContribution.txt:419
#, no-wrap
msgid "...\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:326
#, no-wrap
msgid ""
"\tgit_config(git_default_config, NULL);\n"
"\tif (git_config_get_string_tmp(\"user.name\", &cfg_name) > 0)\n"
"\t\tprintf(_(\"No name is found in config\\n\"));\n"
"\telse\n"
"\t\tprintf(_(\"Your name: %s\\n\"), cfg_name);\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:333
msgid ""
"`git_config()` will grab the configuration from config files known to Git "
"and apply standard precedence rules. `git_config_get_string_tmp()` will look "
"up a specific key (\"user.name\") and give you the value. There are a number "
"of single-key lookup functions like this one; you can see them all (and more "
"info about how to use `git_config()`) in `Documentation/technical/api-config."
"txt`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:335
msgid ""
"You should see that the name printed matches the one you see when you run:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:338
#, no-wrap
msgid "$ git config --get user.name\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:342
msgid ""
"Great! Now we know how to check for values in the Git config. Let's commit "
"this too, so we don't lose our progress."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:346
#, no-wrap
msgid ""
"$ git add builtin/psuh.c\n"
"$ git commit -sm \"psuh: show parameters & config opts\"\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:351
msgid ""
"Again, the above is for sake of brevity in this tutorial. In a real change "
"you should not use `-m` but instead use the editor to write a meaningful "
"message."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:356
msgid ""
"Still, it'd be nice to know what the user's working context is like. Let's "
"see if we can print the name of the user's current branch. We can mimic the "
"`git status` implementation; the printer is located in `wt-status.c` and we "
"can see that the branch is held in a `struct wt_status`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:359
msgid ""
"`wt_status_print()` gets invoked by `cmd_status()` in `builtin/commit.c`.  "
"Looking at that implementation we see the status config being populated like "
"so:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:362
#, no-wrap
msgid "status_init_config(&s, git_status_config);\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:366
msgid ""
"But as we drill down, we can find that `status_init_config()` wraps a call "
"to `git_config()`. Let's modify the code we wrote in the previous commit."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:368
msgid "Be sure to include the header to allow you to use `struct wt_status`:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:370
#, no-wrap
msgid "#include \"wt-status.h\"\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:374
msgid ""
"Then modify your `cmd_psuh` implementation to declare your `struct "
"wt_status`, prepare it, and print its contents:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:377
#, no-wrap
msgid "\tstruct wt_status status;\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:382
#, no-wrap
msgid ""
"\twt_status_prepare(the_repository, &status);\n"
"\tgit_config(git_default_config, &status);\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:386
#, no-wrap
msgid "\tprintf(_(\"Your current branch: %s\\n\"), status.branch);\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:389
msgid ""
"Run it again. Check it out - here's the (verbose) name of your current "
"branch!"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:391
msgid "Let's commit this as well."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:395
#, no-wrap
msgid ""
"$ git add builtin/psuh.c\n"
"$ git commit -sm \"psuh: print the current branch\"\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:398
msgid "Now let's see if we can get some info about a specific commit."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:403
msgid ""
"Luckily, there are some helpers for us here. `commit.h` has a function "
"called `lookup_commit_reference_by_name` to which we can simply provide a "
"hardcoded string; `pretty.h` has an extremely handy `pp_commit_easy()` call "
"which doesn't require a full format object to be passed."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:405
msgid "Add the following includes:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:409
#, no-wrap
msgid ""
"#include \"commit.h\"\n"
"#include \"pretty.h\"\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:413
msgid ""
"Then, add the following lines within your implementation of `cmd_psuh()` "
"near the declarations and the logic, respectively."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:417
#, no-wrap
msgid ""
"\tstruct commit *c = NULL;\n"
"\tstruct strbuf commitline = STRBUF_INIT;\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:421
#, no-wrap
msgid "\tc = lookup_commit_reference_by_name(\"origin/master\");\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:426
#, no-wrap
msgid ""
"\tif (c != NULL) {\n"
"\t\tpp_commit_easy(CMIT_FMT_ONELINE, c, &commitline);\n"
"\t\tprintf(_(\"Current commit: %s\\n\"), commitline.buf);\n"
"\t}\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:431
msgid ""
"The `struct strbuf` provides some safety belts to your basic `char*`, one of "
"which is a length member to prevent buffer overruns. It needs to be "
"initialized nicely with `STRBUF_INIT`. Keep it in mind when you need to pass "
"around `char*`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:434
msgid ""
"`lookup_commit_reference_by_name` resolves the name you pass it, so you can "
"play with the value there and see what kind of things you can come up with."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:439
msgid ""
"`pp_commit_easy` is a convenience wrapper in `pretty.h` that takes a single "
"format enum shorthand, rather than an entire format struct. It then pretty-"
"prints the commit according to that shorthand. These are similar to the "
"formats available with `--pretty=FOO` in many Git commands."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:443
msgid ""
"Build it and run, and if you're using the same name in the example, you "
"should see the subject line of the most recent commit in `origin/master` "
"that you know about. Neat! Let's commit that as well."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:447
#, no-wrap
msgid ""
"$ git add builtin/psuh.c\n"
"$ git commit -sm \"psuh: display the top of origin/master\"\n"
msgstr ""

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:450
#, no-wrap
msgid "Adding Documentation"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:455
msgid ""
"Awesome! You've got a fantastic new command that you're ready to share with "
"the community. But hang on just a minute - this isn't very user-friendly. "
"Run the following:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:458
#, no-wrap
msgid "$ ./bin-wrappers/git help psuh\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:461
msgid "Your new command is undocumented! Let's fix that."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:469
msgid ""
"Take a look at `Documentation/git-*.txt`. These are the manpages for the "
"subcommands that Git knows about. You can open these up and take a look to "
"get acquainted with the format, but then go ahead and make a new file "
"`Documentation/git-psuh.txt`. Like with most of the documentation in the Git "
"project, help pages are written with AsciiDoc (see CodingGuidelines, "
"\"Writing Documentation\" section). Use the following template to fill out "
"your own manpage:"
msgstr ""

#.  Surprisingly difficult to embed AsciiDoc source within AsciiDoc.
#. type: delimited block .
#: ../Documentation-sedout/MyFirstContribution.txt:475
#, no-wrap
msgid ""
"git-psuh(1)\n"
"===========\n"
msgstr ""

#. type: delimited block .
#: ../Documentation-sedout/MyFirstContribution.txt:479
#, no-wrap
msgid ""
"NAME\n"
"----\n"
"git-psuh - Delight users' typo with a shy horse\n"
msgstr ""

#. type: delimited block .
#: ../Documentation-sedout/MyFirstContribution.txt:485
#, no-wrap
msgid ""
"SYNOPSIS\n"
"--------\n"
"[verse]\n"
"'git-psuh [<arg>...]'\n"
msgstr ""

#. type: delimited block .
#: ../Documentation-sedout/MyFirstContribution.txt:489
#, no-wrap
msgid ""
"DESCRIPTION\n"
"-----------\n"
"...\n"
msgstr ""

#. type: delimited block .
#: ../Documentation-sedout/MyFirstContribution.txt:493
#, no-wrap
msgid ""
"OPTIONS[[OPTIONS]]\n"
"------------------\n"
"...\n"
msgstr ""

#. type: delimited block .
#: ../Documentation-sedout/MyFirstContribution.txt:497
#, no-wrap
msgid ""
"OUTPUT\n"
"------\n"
"...\n"
msgstr ""

#. type: delimited block .
#: ../Documentation-sedout/MyFirstContribution.txt:499
#, no-wrap
msgid ""
"GIT\n"
"---\n"
msgstr ""

#. type: delimited block .
#: ../Documentation-sedout/MyFirstContribution.txt:501
msgid "Part of the linkgit:git[1] suite"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:509
msgid ""
"The most important pieces of this to note are the file header, underlined by "
"=, the NAME section, and the SYNOPSIS, which would normally contain the "
"grammar if your command took arguments. Try to use well-established manpage "
"headers so your documentation is consistent with other Git and UNIX "
"manpages; this makes life easier for your user, who can skip to the section "
"they know contains the information they need."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:512
msgid ""
"Before trying to build the docs, make sure you have the package `asciidoc` "
"installed."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:515
msgid ""
"Now that you've written your manpage, you'll need to build it explicitly. We "
"convert your AsciiDoc to troff which is man-readable like so:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:519
#, no-wrap
msgid ""
"$ make all doc\n"
"$ man Documentation/git-psuh.1\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:522
msgid "or"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:526
#, no-wrap
msgid ""
"$ make -C Documentation/ git-psuh.1\n"
"$ man Documentation/git-psuh.1\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:530
msgid ""
"While this isn't as satisfying as running through `git help`, you can at "
"least check that your help page looks right."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:534
msgid ""
"You can also check that the documentation coverage is good (that is, the "
"project sees that your command has been implemented as well as documented) "
"by running `make check-docs` from the top-level."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:536
msgid "Go ahead and commit your new documentation change."
msgstr ""

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:538
#, no-wrap
msgid "Adding Usage Text"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:543
msgid ""
"Try and run `./bin-wrappers/git psuh -h`. Your command should crash at the "
"end.  That's because `-h` is a special case which your command should handle "
"by printing usage."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:547
msgid ""
"Take a look at `Documentation/technical/api-parse-options.txt`. This is a "
"handy tool for pulling out options you need to be able to handle, and it "
"takes a usage string."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:550
msgid ""
"In order to use it, we'll need to prepare a NULL-terminated array of usage "
"strings and a `builtin_psuh_options` array."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:552
msgid "Add a line to `#include \"parse-options.h\"`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:554
msgid "At global scope, add your array of usage strings:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:560
#, no-wrap
msgid ""
"static const char * const psuh_usage[] = {\n"
"\tN_(\"git psuh [<arg>...]\"),\n"
"\tNULL,\n"
"};\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:565
msgid ""
"Then, within your `cmd_psuh()` implementation, we can declare and populate "
"our `option` struct. Ours is pretty boring but you can add more to it if you "
"want to explore `parse_options()` in more detail:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:570
#, no-wrap
msgid ""
"\tstruct option options[] = {\n"
"\t\tOPT_END()\n"
"\t};\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:574
msgid ""
"Finally, before you print your args and prefix, add the call to `parse-"
"options()`:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:577
#, no-wrap
msgid "\targc = parse_options(argc, argv, prefix, options, psuh_usage, 0);\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:583
msgid ""
"This call will modify your `argv` parameter. It will strip the options you "
"specified in `options` from `argv` and the locations pointed to from "
"`options` entries will be updated. Be sure to replace your `argc` with the "
"result from `parse_options()`, or you will be confused if you try to parse "
"`argv` later."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:590
msgid ""
"It's worth noting the special argument `--`. As you may be aware, many Unix "
"commands use `--` to indicate \"end of named parameters\" - all parameters "
"after the `--` are interpreted merely as positional arguments. (This can be "
"handy if you want to pass as a parameter something which would usually be "
"interpreted as a flag.) `parse_options()` will terminate parsing when it "
"reaches `--` and give you the rest of the options afterwards, untouched."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:605
msgid ""
"Now that you have a usage hint, you can teach Git how to show it in the "
"general command list shown by `git help git` or `git help -a`, which is "
"generated from `command-list.txt`. Find the line for 'git-pull' so you can "
"add your 'git-psuh' line above it in alphabetical order. Now, we can add "
"some attributes about the command which impacts where it shows up in the "
"aforementioned help commands. The top of `command-list.txt` shares some "
"information about what each attribute means; in those help pages, the "
"commands are sorted according to these attributes. `git psuh` is user-"
"facing, or porcelain - so we will mark it as \"mainporcelain\". For "
"\"mainporcelain\" commands, the comments at the top of `command-list.txt` "
"indicate we can also optionally add an attribute from another list; since "
"`git psuh` shows some information about the user's workspace but doesn't "
"modify anything, let's mark it as \"info\". Make sure to keep your "
"attributes in the same style as the rest of `command-list.txt` using spaces "
"to align and delineate them:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:611
#, no-wrap
msgid ""
"git-prune-packed                        plumbingmanipulators\n"
"git-psuh                                mainporcelain\t\tinfo\n"
"git-pull                                mainporcelain           remote\n"
"git-push                                mainporcelain           remote\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:615
msgid ""
"Build again. Now, when you run with `-h`, you should see your usage printed "
"and your command terminated before anything else interesting happens. Great!"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:617
msgid "Go ahead and commit this one, too."
msgstr ""

#. type: Title ==
#: ../Documentation-sedout/MyFirstContribution.txt:619
#, no-wrap
msgid "Testing"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:624
msgid ""
"It's important to test your code - even for a little toy command like this "
"one.  Moreover, your patch won't be accepted into the Git tree without "
"tests. Your tests should:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:626
msgid "Illustrate the current behavior of the feature"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:627
msgid "Prove the current behavior matches the expected behavior"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:628
msgid "Ensure the externally-visible behavior isn't broken in later changes"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:630
msgid "So let's write some tests."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:632
msgid "Related reading: `t/README`"
msgstr ""

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:634
#, no-wrap
msgid "Overview of Testing Structure"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:638
msgid ""
"The tests in Git live in `t/` and are named with a 4-digit decimal number "
"using the schema shown in the Naming Tests section of `t/README`."
msgstr ""

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:640
#, no-wrap
msgid "Writing Your Test"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:646
msgid ""
"Since this a toy command, let's go ahead and name the test with t9999. "
"However, as many of the family/subcmd combinations are full, best practice "
"seems to be to find a command close enough to the one you've added and share "
"its naming space."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:649
msgid ""
"Create a new file `t/t9999-psuh-tutorial.sh`. Begin with the header as so "
"(see \"Writing Tests\" and \"Source 'test-lib.sh'\" in `t/README`):"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:652
#, no-wrap
msgid "#!/bin/sh\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:654
#, no-wrap
msgid "test_description='git-psuh test\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:656
#, no-wrap
msgid "This test runs git-psuh and makes sure it does not crash.'\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:658
#, no-wrap
msgid ". ./test-lib.sh\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:663
msgid ""
"Tests are framed inside of a `test_expect_success` in order to output TAP "
"formatted results. Let's make sure that `git psuh` doesn't exit poorly and "
"does mention the right animal somewhere:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:669
#, no-wrap
msgid ""
"test_expect_success 'runs correctly with no args and good output' '\n"
"\tgit psuh >actual &&\n"
"\tgrep Pony actual\n"
"'\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:673
msgid ""
"Indicate that you've run everything you wanted by adding the following at "
"the bottom of your script:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:676
#, no-wrap
msgid "test_done\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:679
msgid "Make sure you mark your test script executable:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:682
#, no-wrap
msgid "$ chmod +x t/t9999-psuh-tutorial.sh\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:687
msgid ""
"You can get an idea of whether you created your new test script successfully "
"by running `make -C t test-lint`, which will check for things like test "
"number uniqueness, executable bit, and so on."
msgstr ""

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:689
#, no-wrap
msgid "Running Locally"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:692
msgid "Let's try and run locally:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:696
#, no-wrap
msgid ""
"$ make\n"
"$ cd t/ && prove t9999-psuh-tutorial.sh\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:699
msgid ""
"You can run the full test suite and ensure `git-psuh` didn't break anything:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:703
#, no-wrap
msgid ""
"$ cd t/\n"
"$ prove -j$(nproc) --shuffle t[0-9]*.sh\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:709
msgid ""
"You can also do this with `make test` or use any testing harness which can "
"speak TAP. `prove` can run concurrently. `shuffle` randomizes the order the "
"tests are run in, which makes them resilient against unwanted inter-test "
"dependencies. `prove` also makes the output nicer."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:711
msgid "Go ahead and commit this change, as well."
msgstr ""

#. type: Title ==
#: ../Documentation-sedout/MyFirstContribution.txt:713
#, no-wrap
msgid "Getting Ready to Share"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:721
msgid ""
"You may have noticed already that the Git project performs its code reviews "
"via emailed patches, which are then applied by the maintainer when they are "
"ready and approved by the community. The Git project does not accept patches "
"from pull requests, and the patches emailed for review need to be formatted "
"a specific way. At this point the tutorial diverges, in order to demonstrate "
"two different methods of formatting your patchset and getting it reviewed."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:725
msgid ""
"The first method to be covered is GitGitGadget, which is useful for those "
"already familiar with GitHub's common pull request workflow. This method "
"requires a GitHub account."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:730
msgid ""
"The second method to be covered is `git send-email`, which can give slightly "
"more fine-grained control over the emails to be sent. This method requires "
"some setup which can change depending on your system and will not be covered "
"in this tutorial."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:734
msgid ""
"Regardless of which method you choose, your engagement with reviewers will "
"be the same; the review process will be covered after the sections on "
"GitGitGadget and `git send-email`."
msgstr ""

#. type: Title ==
#: ../Documentation-sedout/MyFirstContribution.txt:736
#, no-wrap
msgid "Sending Patches via GitGitGadget"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:745
msgid ""
"One option for sending patches is to follow a typical pull request workflow "
"and send your patches out via GitGitGadget. GitGitGadget is a tool created "
"by Johannes Schindelin to make life as a Git contributor easier for those "
"used to the GitHub PR workflow. It allows contributors to open pull requests "
"against its mirror of the Git project, and does some magic to turn the PR "
"into a set of emails and send them out for you. It also runs the Git "
"continuous integration suite for you. It's documented at http://gitgitgadget."
"github.io."
msgstr ""

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:747
#, no-wrap
msgid "Forking `git/git` on GitHub"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:752
msgid ""
"Before you can send your patch off to be reviewed using GitGitGadget, you "
"will need to fork the Git project and upload your changes. First thing - "
"make sure you have a GitHub account."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:755
msgid ""
"Head to the https://github.com/git/git[GitHub mirror] and look for the Fork "
"button. Place your fork wherever you deem appropriate and create it."
msgstr ""

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:757
#, no-wrap
msgid "Uploading to Your Own Fork"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:764
msgid ""
"To upload your branch to your own fork, you'll need to add the new fork as a "
"remote. You can use `git remote -v` to show the remotes you have added "
"already.  From your new fork's page on GitHub, you can press \"Clone or "
"download\" to get the URL; then you need to run the following to add, "
"replacing your own URL and remote name for the examples provided:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:767
#, no-wrap
msgid "$ git remote add remotename git@github.com:remotename/git.git\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:770
msgid "or to use the HTTPS URL:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:773
#, no-wrap
msgid "$ git remote add remotename https://github.com/remotename/git/.git\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:778
msgid ""
"Run `git remote -v` again and you should see the new remote showing up.  "
"`git fetch remotename` (with the real name of your remote replaced) in order "
"to get ready to push."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:782
msgid ""
"Next, double-check that you've been doing all your development in a new "
"branch by running `git branch`. If you didn't, now is a good time to move "
"your new commits to their own branch."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:786
msgid ""
"As mentioned briefly at the beginning of this document, we are basing our "
"work on `master`, so go ahead and update as shown below, or using your "
"preferred workflow."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:791
#, no-wrap
msgid ""
"$ git checkout master\n"
"$ git pull -r\n"
"$ git rebase master psuh\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:795
msgid ""
"Finally, you're ready to push your new topic branch! (Due to our branch and "
"command name choices, be careful when you type the command below.)"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:798
#, no-wrap
msgid "$ git push remotename psuh\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:801
msgid ""
"Now you should be able to go and check out your newly created branch on "
"GitHub."
msgstr ""

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:803
#, no-wrap
msgid "Sending a PR to GitGitGadget"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:810
msgid ""
"In order to have your code tested and formatted for review, you need to "
"start by opening a Pull Request against `gitgitgadget/git`. Head to https://"
"github.com/gitgitgadget/git and open a PR either with the \"New pull request"
"\" button or the convenient \"Compare & pull request\" button that may "
"appear with the name of your newly pushed branch."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:813
msgid ""
"Review the PR's title and description, as it's used by GitGitGadget as the "
"cover letter for your change. When you're happy, submit your pull request."
msgstr ""

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:815
#, no-wrap
msgid "Running CI and Getting Ready to Send"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:824
msgid ""
"If it's your first time using GitGitGadget (which is likely, as you're using "
"this tutorial) then someone will need to give you permission to use the "
"tool.  As mentioned in the GitGitGadget documentation, you just need someone "
"who already uses it to comment on your PR with `/allow <username>`. "
"GitGitGadget will automatically run your PRs through the CI even without the "
"permission given but you will not be able to `/submit` your changes until "
"someone allows you to use the tool."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:832
msgid ""
"You can typically find someone who can `/allow` you on GitGitGadget by "
"either examining recent pull requests where someone has been granted `/"
"allow` (https://github.com/gitgitgadget/git/pulls?utf8=%E2%9C%93&q=is%3Apr+is"
"%3Aopen+%22%2Fallow%22[Search: is:pr is:open \"/allow\"]), in which case "
"both the author and the person who granted the `/allow` can now `/allow` "
"you, or by inquiring on the https://web.libera.chat/#git-devel[#git-devel] "
"IRC channel on Libera Chat linking your pull request and asking for someone "
"to `/allow` you."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:835
msgid ""
"If the CI fails, you can update your changes with `git rebase -i` and push "
"your branch again:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:838
#: ../Documentation-sedout/MyFirstContribution.txt:869
#, no-wrap
msgid "$ git push -f remotename psuh\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:842
msgid ""
"In fact, you should continue to make changes this way up until the point "
"when your patch is accepted into `next`."
msgstr ""

#. TODO https://github.com/gitgitgadget/gitgitgadget/issues/83
#. It'd be nice to be able to verify that the patch looks good before sending it
#. to everyone on Git mailing list.
#. [[check-work-ggg]]
#. === Check Your Work
#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:852
#, no-wrap
msgid "Sending Your Patches"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:857
msgid ""
"Now that your CI is passing and someone has granted you permission to use "
"GitGitGadget with the `/allow` command, sending out for review is as simple "
"as commenting on your PR with `/submit`."
msgstr ""

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:859
#, no-wrap
msgid "Updating With Comments"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:863
msgid ""
"Skip ahead to <<reviewing,Responding to Reviews>> for information on how to "
"reply to review comments you will receive on the mailing list."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:866
msgid ""
"Once you have your branch again in the shape you want following all review "
"comments, you can submit again:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:879
msgid ""
"Next, go look at your pull request against GitGitGadget; you should see the "
"CI has been kicked off again. Now while the CI is running is a good time for "
"you to modify your description at the top of the pull request thread; it "
"will be used again as the cover letter. You should use this space to "
"describe what has changed since your previous version, so that your "
"reviewers have some idea of what they're looking at. When the CI is done "
"running, you can comment once more with `/submit` - GitGitGadget will "
"automatically add a v2 mark to your changes."
msgstr ""

#. type: Title ==
#: ../Documentation-sedout/MyFirstContribution.txt:881
#, no-wrap
msgid "Sending Patches with `git send-email`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:888
msgid ""
"If you don't want to use GitGitGadget, you can also use Git itself to mail "
"your patches. Some benefits of using Git this way include finer grained "
"control of subject line (for example, being able to use the tag [RFC PATCH] "
"in the subject)  and being able to send a ``dry run'' mail to yourself to "
"ensure it all looks good before going out to the list."
msgstr ""

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:890
#, no-wrap
msgid "Prerequisite: Setting Up `git send-email`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:900
msgid ""
"Configuration for `send-email` can vary based on your operating system and "
"email provider, and so will not be covered in this tutorial, beyond stating "
"that in many distributions of Linux, `git-send-email` is not packaged "
"alongside the typical `git` install. You may need to install this additional "
"package; there are a number of resources online to help you do so. You will "
"also need to determine the right way to configure it to use your SMTP "
"server; again, as this configuration can change significantly based on your "
"system and email setup, it is out of scope for the context of this tutorial."
msgstr ""

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:902
#, no-wrap
msgid "Preparing Initial Patchset"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:906
msgid ""
"Sending emails with Git is a two-part process; before you can prepare the "
"emails themselves, you'll need to prepare the patches. Luckily, this is "
"pretty simple:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:909
#, no-wrap
msgid "$ git format-patch --cover-letter -o psuh/ master..psuh\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:914
msgid ""
"The `--cover-letter` parameter tells `format-patch` to create a cover letter "
"template for you. You will need to fill in the template before you're ready "
"to send - but for now, the template will be next to your other patches."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:918
msgid ""
"The `-o psuh/` parameter tells `format-patch` to place the patch files into "
"a directory. This is useful because `git send-email` can take a directory "
"and send out all the patches from there."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:926
msgid ""
"`master..psuh` tells `format-patch` to generate patches for the difference "
"between `master` and `psuh`. It will make one patch file per commit. After "
"you run, you can go have a look at each of the patches with your favorite "
"text editor and make sure everything looks alright; however, it's not "
"recommended to make code fixups via the patch file. It's a better idea to "
"make the change the normal way using `git rebase -i` or by adding a new "
"commit than by modifying a patch."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:936
msgid ""
"Optionally, you can also use the `--rfc` flag to prefix your patch subject "
"with ``[RFC PATCH]'' instead of ``[PATCH]''. RFC stands for ``request for "
"comments'' and indicates that while your code isn't quite ready for "
"submission, you'd like to begin the code review process. This can also be "
"used when your patch is a proposal, but you aren't sure whether the "
"community wants to solve the problem with that approach or not - to conduct "
"a sort of design review. You may also see on the list patches marked ``WIP'' "
"- this means they are incomplete but want reviewers to look at what they "
"have so far. You can add this flag with `--subject-prefix=WIP`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:939
msgid ""
"Check and make sure that your patches and cover letter template exist in the "
"directory you specified - you're nearly ready to send out your review!"
msgstr ""

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:941
#, no-wrap
msgid "Preparing Email"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:948
msgid ""
"In addition to an email per patch, the Git community also expects your "
"patches to come with a cover letter, typically with a subject line [PATCH 0/"
"x] (where x is the number of patches you're sending). Since you invoked "
"`format-patch` with `--cover-letter`, you've already got a template ready. "
"Open it up in your favorite editor."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:952
msgid ""
"You should see a number of headers present already. Check that your `From:` "
"header is correct. Then modify your `Subject:` to something which succinctly "
"covers the purpose of your entire topic branch, for example:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:955
#, no-wrap
msgid "Subject: [PATCH 0/7] adding the 'psuh' command\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:960
msgid ""
"Make sure you retain the ``[PATCH 0/X]'' part; that's what indicates to the "
"Git community that this email is the beginning of a review, and many "
"reviewers filter their email for this type of flag."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:963
msgid ""
"You'll need to add some extra parameters when you invoke `git send-email` to "
"add the cover letter."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:969
msgid ""
"Next you'll have to fill out the body of your cover letter. This is an "
"important component of change submission as it explains to the community "
"from a high level what you're trying to do, and why, in a way that's more "
"apparent than just looking at your diff. Be sure to explain anything your "
"diff doesn't make clear on its own."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:971
msgid "Here's an example body for `psuh`:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:976
#, no-wrap
msgid ""
"Our internal metrics indicate widespread interest in the command\n"
"git-psuh - that is, many users are trying to use it, but finding it is\n"
"unavailable, using some unknown workaround instead.\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:979
#, no-wrap
msgid ""
"The following handful of patches add the psuh command and implement some\n"
"handy features on top of it.\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:982
#, no-wrap
msgid ""
"This patchset is part of the MyFirstContribution tutorial and should not\n"
"be merged.\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:987
msgid ""
"The template created by `git format-patch --cover-letter` includes a "
"diffstat.  This gives reviewers a summary of what they're in for when "
"reviewing your topic.  The one generated for `psuh` from the sample "
"implementation looks like this:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:999
#, no-wrap
msgid ""
" Documentation/git-psuh.txt | 40 +++++++++++++++++++++\n"
" Makefile                   |  1 +\n"
" builtin.h                  |  1 +\n"
" builtin/psuh.c             | 73 ++++++++++++++++++++++++++++++++++++++\n"
" git.c                      |  1 +\n"
" t/t9999-psuh-tutorial.sh   | 12 +++++++\n"
" 6 files changed, 128 insertions(+)\n"
" create mode 100644 Documentation/git-psuh.txt\n"
" create mode 100644 builtin/psuh.c\n"
" create mode 100755 t/t9999-psuh-tutorial.sh\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1003
msgid ""
"Finally, the letter will include the version of Git used to generate the "
"patches. You can leave that string alone."
msgstr ""

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:1005
#, no-wrap
msgid "Sending Email"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1009
msgid ""
"At this point you should have a directory `psuh/` which is filled with your "
"patches and a cover letter. Time to mail it out! You can send it like this:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:1012
#, no-wrap
msgid "$ git send-email --to=target@example.com psuh/*.patch\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1016
msgid ""
"Check `git help send-email` for some other options which you may find "
"valuable, such as changing the Reply-to address or adding more CC and BCC "
"lines."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1020
msgid ""
"When you are sending a real patch, it will go to git@vger.kernel.org - but "
"please don't send your patchset from the tutorial to the real mailing list! "
"For now, you can send it to yourself, to make sure you understand how it "
"will look."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1025
msgid ""
"After you run the command above, you will be presented with an interactive "
"prompt for each patch that's about to go out. This gives you one last chance "
"to edit or quit sending something (but again, don't edit code this way). "
"Once you press `y` or `a` at these prompts your emails will be sent! "
"Congratulations!"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1028
msgid ""
"Awesome, now the community will drop everything and review your changes. "
"(Just kidding - be patient!)"
msgstr ""

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:1030
#, no-wrap
msgid "Sending v2"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1035
msgid ""
"Skip ahead to <<reviewing,Responding to Reviews>> for information on how to "
"handle comments from reviewers. Continue this section when your topic branch "
"is shaped the way you want it to look for your patchset v2."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1038
msgid ""
"When you're ready with the next iteration of your patch, the process is "
"fairly similar."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1040
msgid "First, generate your v2 patches again:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:1043
#, no-wrap
msgid "$ git format-patch -v2 --cover-letter -o psuh/ master..psuh\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1048
msgid ""
"This will add your v2 patches, all named like `v2-000n-my-commit-subject."
"patch`, to the `psuh/` directory. You may notice that they are sitting "
"alongside the v1 patches; that's fine, but be careful when you are ready to "
"send them."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1053
msgid ""
"Edit your cover letter again. Now is a good time to mention what's different "
"between your last version and now, if it's something significant. You do not "
"need the exact same body in your second cover letter; focus on explaining to "
"reviewers the changes you've made that may not be as visible."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1060
msgid ""
"You will also need to go and find the Message-Id of your previous cover "
"letter.  You can either note it when you send the first series, from the "
"output of `git send-email`, or you can look it up on the https://lore.kernel."
"org/git[mailing list]. Find your cover letter in the archives, click on it, "
"then click \"permalink\" or \"raw\" to reveal the Message-Id header. It "
"should match:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:1063
#, no-wrap
msgid "Message-Id: <foo.12345.author@example.com>\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1069
msgid ""
"Your Message-Id is `<foo.12345.author@example.com>`. This example will be "
"used below as well; make sure to replace it with the correct Message-Id for "
"your **previous cover letter** - that is, if you're sending v2, use the "
"Message-Id from v1; if you're sending v3, use the Message-Id from v2."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1074
msgid ""
"While you're looking at the email, you should also note who is CC'd, as it's "
"common practice in the mailing list to keep all CCs on a thread. You can add "
"these CC lines directly to your cover letter with a line like so in the "
"header (before the Subject line):"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:1077
#, no-wrap
msgid "CC: author@example.com, Othe R <other@example.com>\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1081
msgid ""
"Now send the emails again, paying close attention to which messages you pass "
"in to the command:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:1086
#, no-wrap
msgid ""
"$ git send-email --to=target@example.com\n"
"\t\t --in-reply-to=\"<foo.12345.author@example.com>\"\n"
"\t\t psuh/v2*\n"
msgstr ""

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:1089
#, no-wrap
msgid "Bonus Chapter: One-Patch Changes"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1098
msgid ""
"In some cases, your very small change may consist of only one patch. When "
"that happens, you only need to send one email. Your commit message should "
"already be meaningful and explain at a high level the purpose (what is "
"happening and why)  of your patch, but if you need to supply even more "
"context, you can do so below the `---` in your patch. Take the example "
"below, which was generated with `git format-patch` on a single commit, and "
"then edited to add the content between the `---` and the diffstat."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:1104
#, no-wrap
msgid ""
"From 1345bbb3f7ac74abde040c12e737204689a72723 Mon Sep 17 00:00:00 2001\n"
"From: A U Thor <author@example.com>\n"
"Date: Thu, 18 Apr 2019 15:11:02 -0700\n"
"Subject: [PATCH] README: change the grammar\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:1107
#, no-wrap
msgid ""
"I think it looks better this way. This part of the commit message will\n"
"end up in the commit-log.\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:1109
#, no-wrap
msgid ""
"Signed-off-by: A U Thor <author@example.com>\n"
"---\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:1115
msgid ""
"Let's have a wild discussion about grammar on the mailing list. This part of "
"my email will never end up in the commit log. Here is where I can add "
"additional context to the mailing list about my intent, outside of the "
"context of the commit log. This section was added after `git format-patch` "
"was run, by editing the patch file in a text editor."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:1118
#, no-wrap
msgid ""
" README.md | 2 +-\n"
" 1 file changed, 1 insertion(+), 1 deletion(-)\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:1126
#, no-wrap
msgid ""
"diff --git a/README.md b/README.md\n"
"index 88f126184c..38da593a60 100644\n"
"--- a/README.md\n"
"+++ b/README.md\n"
"@@ -3,7 +3,7 @@\n"
" Git - fast, scalable, distributed revision control system\n"
" =========================================================\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:1131
#, no-wrap
msgid ""
"-Git is a fast, scalable, distributed revision control system with an\n"
"+Git is a fast, scalable, and distributed revision control system with an\n"
" unusually rich command set that provides both high-level operations\n"
" and full access to internals.\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:1132
#, no-wrap
msgid "--\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:1134
msgid "2.21.0.392.gf8f6787159e-goog"
msgstr ""

#. type: Title ==
#: ../Documentation-sedout/MyFirstContribution.txt:1137
#, no-wrap
msgid "My Patch Got Emailed - Now What?"
msgstr ""

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:1140
#, no-wrap
msgid "Responding to Reviews"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1144
msgid ""
"After a few days, you will hopefully receive a reply to your patchset with "
"some comments. Woohoo! Now you can get back to work."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1150
msgid ""
"It's good manners to reply to each comment, notifying the reviewer that you "
"have made the change suggested, feel the original is better, or that the "
"comment inspired you to do something a new way which is superior to both the "
"original and the suggested change. This way reviewers don't need to inspect "
"your v2 to figure out whether you implemented their comment or not."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1156
msgid ""
"Reviewers may ask you about what you wrote in the patchset, either in the "
"proposed commit log message or in the changes themselves.  You should answer "
"these questions in your response messages, but often the reason why "
"reviewers asked these questions to understand what you meant to write is "
"because your patchset needed clarification to be understood."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1164
msgid ""
"Do not be satisfied by just answering their questions in your response and "
"hear them say that they now understand what you wanted to say.  Update your "
"patches to clarify the points reviewers had trouble with, and prepare your "
"v2; the words you used to explain your v1 to answer reviewers' questions may "
"be useful thing to use.  Your goal is to make your v2 clear enough so that "
"it becomes unnecessary for you to give the same explanation to the next "
"person who reads it."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1174
msgid ""
"If you are going to push back on a comment, be polite and explain why you "
"feel your original is better; be prepared that the reviewer may still "
"disagree with you, and the rest of the community may weigh in on one side or "
"the other. As with all code reviews, it's important to keep an open mind to "
"doing something a different way than you originally planned; other reviewers "
"have a different perspective on the project than you do, and may be thinking "
"of a valid side effect which had not occurred to you. It is always okay to "
"ask for clarification if you aren't sure why a change was suggested, or what "
"the reviewer is asking you to do."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1181
msgid ""
"Make sure your email client has a plaintext email mode and it is turned on; "
"the Git list rejects HTML email. Please also follow the mailing list "
"etiquette outlined in the https://kernel.googlesource.com/pub/scm/git/git/+/"
"todo/MaintNotes[Maintainer's Note], which are similar to etiquette rules in "
"most open source communities surrounding bottom-posting and inline replies."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1193
msgid ""
"When you're making changes to your code, it is cleanest - that is, the "
"resulting commits are easiest to look at - if you use `git rebase -i` "
"(interactive rebase). Take a look at this https://www.oreilly.com/library/"
"view/git-pocket-guide/9781449327507/ch10.html[overview] from O'Reilly. The "
"general idea is to modify each commit which requires changes; this way, "
"instead of having a patch A with a mistake, a patch B which was fine and "
"required no upstream reviews in v1, and a patch C which fixes patch A for "
"v2, you can just ship a v2 with a correct patch A and correct patch B. This "
"is changing history, but since it's local history which you haven't shared "
"with anyone, that is okay for now! (Later, it may not make sense to do this; "
"take a look at the section below this one for some context.)"
msgstr ""

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:1195
#, no-wrap
msgid "After Review Approval"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1206
msgid ""
"The Git project has four integration branches: `seen`, `next`, `master`, and "
"`maint`. Your change will be placed into `seen` fairly early on by the "
"maintainer while it is still in the review process; from there, when it is "
"ready for wider testing, it will be merged into `next`. Plenty of early "
"testers use `next` and may report issues. Eventually, changes in `next` will "
"make it to `master`, which is typically considered stable. Finally, when a "
"new release is cut, `maint` is used to base bugfixes onto. As mentioned at "
"the beginning of this document, you can read `Documents/SubmittingPatches` "
"for some more info about the use of the various integration branches."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1210
msgid ""
"Back to now: your code has been lauded by the upstream reviewers. It is "
"perfect.  It is ready to be accepted. You don't need to do anything else; "
"the maintainer will merge your topic branch to `next` and life is good."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1213
msgid ""
"However, if you discover it isn't so perfect after this point, you may need "
"to take some special steps depending on where you are in the process."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1219
msgid ""
"If the maintainer has announced in the \"What's cooking in git.git\" email "
"that your topic is marked for `next` - that is, that they plan to merge it "
"to `next` but have not yet done so - you should send an email asking the "
"maintainer to wait a little longer: \"I've sent v4 of my series and you "
"marked it for `next`, but I need to change this and that - please wait for "
"v5 before you merge it.\""
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1225
msgid ""
"If the topic has already been merged to `next`, rather than modifying your "
"patches with `git rebase -i`, you should make further changes incrementally "
"- that is, with another commit, based on top of the maintainer's topic "
"branch as detailed in https://github.com/gitster/git. Your work is still in "
"the same topic but is now incremental, rather than a wholesale rewrite of "
"the topic branch."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1229
msgid ""
"The topic branches in the maintainer's GitHub are mirrored in GitGitGadget, "
"so if you're sending your reviews out that way, you should be sure to open "
"your PR against the appropriate GitGitGadget/Git branch."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1232
msgid ""
"If you're using `git send-email`, you can use it the same way as before, but "
"you should generate your diffs from `<topic>..<mybranch>` and base your work "
"on `<topic>` instead of `master`."
msgstr ""
