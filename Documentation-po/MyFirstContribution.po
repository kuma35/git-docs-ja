# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 3.0\n"
"POT-Creation-Date: 2023-07-18 11:05+0900\n"
"PO-Revision-Date: 2023-07-22 15:44+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/MyFirstContribution.txt:2
#, no-wrap
msgid "My First Contribution to the Git Project"
msgstr "My First Contribution to the Git Project"

#. type: Title ==
#: ../Documentation-sedout/MyFirstContribution.txt:6
#, no-wrap
msgid "Summary"
msgstr "Summary"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:10
msgid ""
"This is a tutorial demonstrating the end-to-end workflow of creating a "
"change to the Git tree, sending it for review, and making changes based on "
"comments."
msgstr ""
"これは、Gitツリーに変更を加え、レビューのために送信し、コメントに基づいて変更"
"を加えるエンドツーエンドのワークフローを説明するチュートリアルです。"

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:12
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:16
msgid ""
"This tutorial assumes you're already fairly familiar with using Git to "
"manage source code.  The Git workflow steps will largely remain unexplained."
msgstr ""
"このチュートリアルは、あなたがGitを使用してソースコードを管理することにすでに"
"かなり精通していることを前提としています。 Gitワークフローの手順はほとんど説"
"明していません。"

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:18
#, no-wrap
msgid "Related Reading"
msgstr "Related Reading"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:22
msgid ""
"This tutorial aims to summarize the following documents, but the reader may "
"find useful additional context:"
msgstr ""
"このチュートリアルは、以下のドキュメントを要約することを目的としていますが、"
"読めば有用な追加事項を見つけることができるでしょう:"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:24
msgid "`Documentation/SubmittingPatches`"
msgstr "`Documentation/SubmittingPatches`"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:25
msgid "`Documentation/howto/new-command.txt`"
msgstr "`Documentation/howto/new-command.txt`"

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:27
#, no-wrap
msgid "Getting Help"
msgstr "Getting Help"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:30
msgid "If you get stuck, you can seek help in the following places."
msgstr "あなたが行き詰まった場合は、以下の場所で助けを求めることができます。"

#. type: Title ====
#: ../Documentation-sedout/MyFirstContribution.txt:31
#, no-wrap
msgid "git@vger.kernel.org"
msgstr "git@vger.kernel.org"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:41
msgid ""
"This is the main Git project mailing list where code reviews, version "
"announcements, design discussions, and more take place. Those interested in "
"contributing are welcome to post questions here. The Git list requires plain-"
"text-only emails and prefers inline and bottom-posting when replying to "
"mail; you will be CC'd in all replies to you. Optionally, you can subscribe "
"to the list by sending an email to majordomo@vger.kernel.org with "
"\"subscribe git\" in the body. The https://lore.kernel.org/git[archive] of "
"this mailing list is available to view in a browser."
msgstr ""
"これは、コードレビュー、バージョンアナウンス、デザインディスカッションなどが"
"行われるメインのGitプロジェクトメーリングリストです。 貢献に興味のある方は、"
"ここに質問を投稿してください。 Gitメーリングリストにはプレーンテキストのみの"
"電子メールが必要であり、メールに返信するときはインライン投稿とボトム投稿を優"
"先します。 あなたはあなたへのすべての返信でCCされます。 オプションで、本文に"
"「subscribe git」を付けてmajordomo@vger.kernel.orgに電子メールを送信すること"
"により、リストをサブスクライブできます。 このメーリングリストの https://lore."
"kernel.org/git[archive] はブラウザで表示できます。"

#. type: Title ====
#: ../Documentation-sedout/MyFirstContribution.txt:42
#, no-wrap
msgid "https://groups.google.com/forum/#!forum/git-mentoring[git-mentoring@googlegroups.com]"
msgstr "https://groups.google.com/forum/#!forum/git-mentoring[git-mentoring@googlegroups.com]"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:49
msgid ""
"This mailing list is targeted to new contributors and was created as a place "
"to post questions and receive answers outside of the public eye of the main "
"list.  Veteran contributors who are especially interested in helping mentor "
"newcomers are present on the list. In order to avoid search indexers, group "
"membership is required to view messages; anyone can join and no approval is "
"required."
msgstr ""
"このメーリングリストは、新しい寄稿者を対象としており、メインリストの一般の人"
"の目に触れないように質問を投稿したり回答を受け取ったりする場所として作成され"
"ました。 メンターの新参者を支援することに特に関心のあるベテランの貢献者がリス"
"トに含まれています。 検索インデクサーを回避するには、メッセージを表示するため"
"にグループメンバーシップが必要です。 誰でも参加でき、承認は必要ありません。"

#. type: Title ====
#: ../Documentation-sedout/MyFirstContribution.txt:50
#, no-wrap
msgid "https://web.libera.chat/#git-devel[#git-devel] on Libera Chat"
msgstr "https://web.libera.chat/#git-devel[#git-devel] on Libera Chat"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:61
msgid ""
"This IRC channel is for conversations between Git contributors. If someone "
"is currently online and knows the answer to your question, you can receive "
"help in real time. Otherwise, you can read the https://colabti.org/irclogger/"
"irclogger_logs/git-devel[scrollback] to see whether someone answered you. "
"IRC does not allow offline private messaging, so if you try to private "
"message someone and then log out of IRC, they cannot respond to you. It's "
"better to ask your questions in the channel so that you can be answered if "
"you disconnect and so that others can learn from the conversation."
msgstr ""
"このIRCチャネルは、Gitコントリビューター間の会話用です。 誰かが現在オンライン"
"で、あなたの質問に対する答えを知っている場合、あなたはリアルタイムで助けを受"
"け取ることができます。 それ以外の場合は、 https://colabti.org/irclogger/"
"irclogger_logs/git-devel[scrollback] を読んで、誰かがあなたに回答したかどうか"
"を確認できます。 IRCはオフラインのプライベートメッセージを許可していません。"
"そのため、誰かにプライベートメッセージを送信してから、IRCからログアウトしよう"
"とすると、その人はあなたに応答できません。 切断した場合に回答できるように、ま"
"た他の人が会話から学ぶことができるように、チャネルで質問することをお勧めしま"
"す。"

#. type: Title ==
#: ../Documentation-sedout/MyFirstContribution.txt:63
#, no-wrap
msgid "Getting Started"
msgstr "Getting Started"

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:66
#, no-wrap
msgid "Clone the Git Repository"
msgstr "Clone the Git Repository"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:71
msgid ""
"Git is mirrored in a number of locations. Clone the repository from one of "
"them; https://git-scm.com/downloads suggests one of the best places to clone "
"from is the mirror on GitHub."
msgstr ""
"Gitは多くの場所でミラーリングされています。 それらの1つからリポジトリのクロー"
"ンを作成します。 https://git-scm.com/downloads は、クローンを作成するのに最適"
"な場所の1つがGitHubのミラーであることを示しています。"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:75
#, no-wrap
msgid ""
"$ git clone https://github.com/git/git git\n"
"$ cd git\n"
msgstr ""
"$ git clone https://github.com/git/git git\n"
"$ cd git\n"

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:78
#, no-wrap
msgid "Installing Dependencies"
msgstr "依存関係のインストール"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:86
msgid ""
"To build Git from source, you need to have a handful of dependencies "
"installed on your system. For a hint of what's needed, you can take a look "
"at `INSTALL`, paying close attention to the section about Git's dependencies "
"on external programs and libraries. That document mentions a way to \"test-"
"drive\" our freshly built Git without installing; that's the method we'll be "
"using in this tutorial."
msgstr ""
"ソースからGitをビルドするには、あなたはシステムにいくつかの依存関係をインス"
"トールする必要があります。 必要なもののヒントについては、外部プログラムとライ"
"ブラリへのGitの依存関係に関するセクションに細心の注意を払って、 `INSTALL` を"
"見ることで分かります。 そのドキュメントには、インストールせずに新しく構築した"
"Gitを「テスト運転」(test-drive)する方法が記載されています。 これが、この"
"チュートリアルで使用する方法です。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:89
msgid ""
"Make sure that your environment has everything you need by building your "
"brand new clone of Git from the above step:"
msgstr ""
"上記手順でGitの新しいクローンを作成して、環境に必要なものがすべて揃っているこ"
"とを確認してください:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:92
#, no-wrap
msgid "$ make\n"
msgstr "$ make\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:96
msgid ""
"The Git build is parallelizable. `-j#` is not included above but you can use "
"it as you prefer, here and elsewhere."
msgstr ""
"Gitのビルドは並列化可能です。 `-j#` は上記に含まれていませんが、ここや他の場"
"所で好きなように使用できます。"

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:98
#, no-wrap
msgid "Identify Problem to Solve"
msgstr "Identify Problem to Solve"

#. Use + to indicate fixed-width here; couldn't get ` to work nicely with the
#. quotes around "Pony Saying 'Um, Hello'".
#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:107
msgid ""
"In this tutorial, we will add a new command, +git psuh+, short for ``Pony "
"Saying `Um, Hello''' - a feature which has gone unimplemented despite a high "
"frequency of invocation during users' typical daily workflow."
msgstr ""
"このチュートリアルでは、「Pony Saying `Um, Hello'」の略である新しいコマンド "
"+git psuh+ (訳注:pushでは無くてpsuh)を追加します。これは、ユーザーの通常の日"
"常のワークフローで頻繁に呼び出されるにもかかわらず、実装されていない機能で"
"す。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:110
msgid ""
"(We've seen some other effort in this space with the implementation of "
"popular commands such as `sl`.)"
msgstr "(この分野では `sl` のような人気コマンドの実装の他にも、いくつかの取り組みが見られます。)"

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:112
#, no-wrap
msgid "Set Up Your Workspace"
msgstr "Set Up Your Workspace"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:118
msgid ""
"Let's start by making a development branch to work on our changes. Per "
"`Documentation/SubmittingPatches`, since a brand new command is a new "
"feature, it's fine to base your work on `master`. However, in the future for "
"bugfixes, etc., you should check that document and base it on the "
"appropriate branch."
msgstr ""
"まず、変更に取り組むための開発ブランチを作成することから始めましょう。 "
"`Documentation/SubmittingPatches` によると、まったく新しいコマンドは新機能で"
"あるため、`master` に基づいて作業するのは問題ありません。 ただし、将来のバグ"
"修正などについては、そのドキュメントを確認し、適切なブランチに基づいて作成す"
"る必要があります。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:122
msgid ""
"For the purposes of this document, we will base all our work on the `master` "
"branch of the upstream project. Create the `psuh` branch you will use for "
"development like so:"
msgstr "このドキュメントでは、すべての作業を、アップストリームプロジェクトの `master` ブランチを基にして行います。 以下のように、開発に使用する `psuh` ブランチを作成します:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:125
#, no-wrap
msgid "$ git checkout -b psuh origin/master\n"
msgstr "$ git checkout -b psuh origin/master\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:129
msgid ""
"We'll make a number of commits here in order to demonstrate how to send a "
"topic with multiple patches up for review simultaneously."
msgstr ""
"私達は複数のパッチを含むトピックを同時に、レビューのために送信する方法を示す"
"ために、ここでいくつかのコミットを行います。"

#. type: Title ==
#: ../Documentation-sedout/MyFirstContribution.txt:131
#, no-wrap
msgid "Code It Up!"
msgstr "Code It Up!"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:135
msgid ""
"A reference implementation can be found at https://github.com/nasamuffin/git/"
"tree/psuh."
msgstr ""
"リファレンス実装は https://github.com/nasamuffin/git/tree/psuh にあります。"

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:137
#, no-wrap
msgid "Adding a New Command"
msgstr "Adding a New Command"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:144
msgid ""
"Lots of the subcommands are written as builtins, which means they are "
"implemented in C and compiled into the main `git` executable. Implementing "
"the very simple `psuh` command as a built-in will demonstrate the structure "
"of the codebase, the internal API, and the process of working together as a "
"contributor with the reviewers and maintainer to integrate this change into "
"the system."
msgstr ""
"沢山のサブコマンドが組み込みとして書かれています。つまり、C言語で実装され、メ"
"インの `git` 実行ファイルにコンパイルされているということです。非常にシンプル"
"な `psuh` コマンドを組み込みで実装することで、コードベースの構造や、内部 API"
"や、貢献者としてレビュー担当者やメンテナと共にこの変更をシステムに統合するプ"
"ロセス、を見せることができます。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:150
msgid ""
"Built-in subcommands are typically implemented in a function named \"cmd_\" "
"followed by the name of the subcommand, in a source file named after the "
"subcommand and contained within `builtin/`. So it makes sense to implement "
"your command in `builtin/psuh.c`. Create that file, and within it, write the "
"entry point for your command in a function matching the style and signature:"
msgstr ""
"組み込みサブコマンドは通常、 サブコマンドにちなんで名付けられ、 `cmd_` という"
"名前の関数の後にサブコマンドの名前が続く、 `builtin/` 内に含まれるソースファ"
"イルに実装されます。 したがって、コマンドを `builtin/psuh.c` に実装するのは理"
"にかなっています。 そのファイルを作成し、その中に、スタイルとシグネチャに一致"
"する関数であなたのコマンドのエントリポイントを記述します:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:153
#, no-wrap
msgid "int cmd_psuh(int argc, const char **argv, const char *prefix)\n"
msgstr "int cmd_psuh(int argc, const char **argv, const char *prefix)\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:158
msgid ""
"We'll also need to add the declaration of psuh; open up `builtin.h`, find "
"the declaration for `cmd_pull`, and add a new line for `psuh` immediately "
"before it, in order to keep the declarations alphabetically sorted:"
msgstr ""
"また、私達は psuhの宣言を追加する必要があります。 `builtin.h` を開き、宣言を"
"アルファベット順に保つために、 `cmd_pull` の宣言を見つけ、その直前に `psuh` "
"の行を追加します。"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:161
#, no-wrap
msgid "int cmd_psuh(int argc, const char **argv, const char *prefix);\n"
msgstr "int cmd_psuh(int argc, const char **argv, const char *prefix);\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:164
msgid "Be sure to `#include \"builtin.h\"` in your `psuh.c`."
msgstr "そして、あなたの `push.c` に必ず `#include \"builtin.h\"` を書き込んでください。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:167
msgid ""
"Go ahead and add some throwaway printf to that function. This is a decent "
"starting point as we can now add build rules and register the command."
msgstr "早速、その関数に使い捨てのprintfを追加します。 ビルドルールを追加してコマンドを登録できるようになったので、これは適切な開始点です。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:173
msgid ""
"Your throwaway text, as well as much of the text you will be adding over the "
"course of this tutorial, is user-facing. That means it needs to be "
"localizable. Take a look at `po/README` under \"Marking strings for "
"translation\".  Throughout the tutorial, we will mark strings for "
"translation as necessary; you should also do so when writing your user-"
"facing commands in the future."
msgstr ""
"あなたの使い捨てのテキスト、およびこのチュートリアルの過程で追加するテキスト"
"の多くは、ユーザー向けです。 つまり、ローカライズ可能である必要があります。  "
"`po/README.md` の 「Marking strings for translation」をご覧ください。 チュー"
"トリアル全体を通して、必要に応じて翻訳用の文字列にマークを付けます。 将来、"
"ユーザー向けのコマンドを作成するときにもそうする必要があります。"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:180
#, no-wrap
msgid ""
"int cmd_psuh(int argc, const char **argv, const char *prefix)\n"
"{\n"
"\tprintf(_(\"Pony saying hello goes here.\\n\"));\n"
"\treturn 0;\n"
"}\n"
msgstr ""
"int cmd_psuh(int argc, const char **argv, const char *prefix)\n"
"{\n"
"\tprintf(_(\"Pony saying hello goes here.\\n\"));\n"
"\treturn 0;\n"
"}\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:187
msgid ""
"Let's try to build it.  Open `Makefile`, find where `builtin/pull.o` is "
"added to `BUILTIN_OBJS`, and add `builtin/psuh.o` in the same way next to it "
"in alphabetical order. Once you've done so, move to the top-level directory "
"and build simply with `make`. Also add the `DEVELOPER=1` variable to turn on "
"some additional warnings:"
msgstr "ではビルドしてみましょう。 `Makefile` を開き、 `builtin /pull.o` が `BUILTIN_OBJS` に追加されている場所を見つけ、次に、それと同一の方法でアルファベット順になるように `builtin/psuh.o` を追加します。それができたら、最上位ディレクトリに移動し、 `make` を使用してビルドします。 また、 `DEVELOPER = 1` 変数を追加して、いくつかの追加の警告をオンにします:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:191
#, no-wrap
msgid ""
"$ echo DEVELOPER=1 >config.mak\n"
"$ make\n"
msgstr ""
"$ echo DEVELOPER=1 >config.mak\n"
"$ make\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:196
msgid ""
"When you are developing the Git project, it's preferred that you use the "
"`DEVELOPER` flag; if there's some reason it doesn't work for you, you can "
"turn it off, but it's a good idea to mention the problem to the mailing list."
msgstr ""
"あなたがGitプロジェクトを開発するときは、 `DEVELOPER` フラグを使用することを"
"お勧めします。 何らかの理由で機能しない場合は、オフにすることができますが、そ"
"の問題をメーリングリストに記載することをお勧めします。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:199
msgid ""
"Great, now your new command builds happily on its own. But nobody invokes "
"it.  Let's change that."
msgstr ""
"素晴らしい! これで、あなたの新しいコマンドそれ自体は問題なくビルドされます。 "
"しかし、まだ誰もそれを呼び出しません。次はそこをいじりましょう。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:206
msgid ""
"The list of commands lives in `git.c`. We can register a new command by "
"adding a `cmd_struct` to the `commands[]` array. `struct cmd_struct` takes a "
"string with the command name, a function pointer to the command "
"implementation, and a setup option flag. For now, let's keep mimicking "
"`push`. Find the line where `cmd_push` is registered, copy it, and modify it "
"for `cmd_psuh`, placing the new line in alphabetical order (immediately "
"before `cmd_pull`)."
msgstr "コマンドのリストは `git.c` にあります。 `commands[]` 配列に `cmd_struct` を追加することで、新しいコマンドを登録できます。 `struct cmd_struct` は、コマンド名、コマンドの実装への関数ポインタ、およびセットアップオプションフラグを含む文字列を受け取ります。 今のところは `push` を模倣し続けることしましょう。 `cmd_push` が登録されている行を見つけてコピーし、 `cmd_psuh` に変更して、新しい行をアルファベット順に(`cmd_pull` の直前に)配置します。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:210
msgid ""
"The options are documented in `builtin.h` under \"Adding a new built-in.\" "
"Since we hope to print some data about the user's current workspace context "
"later, we need a Git directory, so choose `RUN_SETUP` as your only option."
msgstr ""
"オプションは、「Adding a new built-in. 」の「builtin.h」に記載されています。 "
"後でユーザーの現在のワークスペースコンテキストに関するデータを出力したいの"
"で、Gitディレクトリが必要です。 そのため、あなたの唯一のオプションとして "
"`RUN_SETUP` を選択します。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:214
msgid ""
"Go ahead and build again. You should see a clean build, so let's kick the "
"tires and see if it works. There's a binary you can use to test with in the "
"`bin-wrappers` directory."
msgstr "早速、もう一度ビルドしてください。 きれいなビルドが表示されるはずなので、ざっと動かしてみて、それが機能するかどうかを確認しましょう。 `bin-wrappers` ディレクトリにあなたがテストに使用できるバイナリがあります。"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:217
#, no-wrap
msgid "$ ./bin-wrappers/git psuh\n"
msgstr "$ ./bin-wrappers/git psuh\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:220
msgid "Check it out! You've got a command! Nice work! Let's commit this."
msgstr ""
"見たまえ！あなたは今、コマンドをゲットしました！よくやった！ では、これをコ"
"ミットするとしましょう。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:225
msgid ""
"`git status` reveals modified `Makefile`, `builtin.h`, and `git.c` as well "
"as untracked `builtin/psuh.c` and `git-psuh`. First, let's take care of the "
"binary, which should be ignored. Open `.gitignore` in your editor, find `/"
"git-pull`, and add an entry for your new command in alphabetical order:"
msgstr ""
"`git status` は、変更された `Makefile` と `builtin.h` と` git.c` と 追跡され"
"ていない `builtin/psuh.c` と `git-psuh` を明らかにします。 まず、無視する必要"
"のあるバイナリを処理しましょう。 エディターで `.gitignore`を開き、 `/git-"
"pull` を見つけて、新しいコマンドのエントリをアルファベット順に追加します:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:235
#, no-wrap
msgid ""
"...\n"
"/git-prune-packed\n"
"/git-psuh\n"
"/git-pull\n"
"/git-push\n"
"/git-quiltimport\n"
"/git-range-diff\n"
"...\n"
msgstr ""
"...\n"
"/git-prune-packed\n"
"/git-psuh\n"
"/git-pull\n"
"/git-push\n"
"/git-quiltimport\n"
"/git-range-diff\n"
"...\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:240
msgid ""
"Checking `git status` again should show that `git-psuh` has been removed "
"from the untracked list and `.gitignore` has been added to the modified "
"list. Now we can stage and commit:"
msgstr ""
"`git status` をもう一度チェックすると、 `git-push` が追跡されていないリストか"
"ら削除され、 `.gitignore` が変更されたリストに追加されていることがわかりま"
"す。 これで、私達はステージングしてコミットできます:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:244
#, no-wrap
msgid ""
"$ git add Makefile builtin.h builtin/psuh.c git.c .gitignore\n"
"$ git commit -s\n"
msgstr ""
"$ git add Makefile builtin.h builtin/psuh.c git.c .gitignore\n"
"$ git commit -s\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:253
msgid ""
"You will be presented with your editor in order to write a commit message. "
"Start the commit with a 50-column or less subject line, including the name "
"of the component you're working on, followed by a blank line (always "
"required) and then the body of your commit message, which should provide the "
"bulk of the context.  Remember to be explicit and provide the \"Why\" of "
"your change, especially if it couldn't easily be understood from your diff. "
"When editing your commit message, don't remove the `Signed-off-by` trailer "
"which was added by `-s` above."
msgstr ""
"あなたがコミットメッセージを書くためにエディターが表示されます。 作業中のコン"
"ポーネントの名前を含む50桁以下の件名でコミットを開始し、その後に空行1行(常に"
"必須)、そして内容の大部分を提供するコミットメッセージの本文を続けます。 特"
"に、diffから簡単に理解できない場合は、変更の「理由」を明示して提供することを"
"忘れないでください。 コミットメッセージを編集する際に、上記 `-s` によって追加"
"された `Signed-off-by` トレーラーを削除しないでください。"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:256
#, no-wrap
msgid "psuh: add a built-in by popular demand\n"
msgstr "psuh: add a built-in by popular demand\n"

# 内部メトリックは、
# これが多くのユーザーが存在することを期待するコマンドであることを示しています。
# そこで、顧客満足度とエンゲージメントを促進するための実装を次に示します。
# ユーザーに疑わしい挨拶をするポニー、または「Um、Hello」（PSUH）と言うポニーです。
#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:261
#, no-wrap
msgid ""
"Internal metrics indicate this is a command many users expect to be\n"
"present. So here's an implementation to help drive customer\n"
"satisfaction and engagement: a pony which doubtfully greets the user,\n"
"or, a Pony Saying \"Um, Hello\" (PSUH).\n"
msgstr ""
"Internal metrics indicate this is a command many users expect to be\n"
"present. So here's an implementation to help drive customer\n"
"satisfaction and engagement: a pony which doubtfully greets the user,\n"
"or, a Pony Saying \"Um, Hello\" (PSUH).\n"

# このコミットメッセージは意図的に一行72桁のフォーマットになっており、
# "commit message subject" という一行で始まり、コードベースに何かを命令
# するように書かれています(これを追加しろ、そのコマンドを教える、等)。
# メッセージの本文は、関連する diff を読んだだけではわからないコミットに
# 関する情報、たとえば "なぜ？" という質問に答えるような情報を追加するよ
# うに意図されています。
#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:268
#, no-wrap
msgid ""
"This commit message is intentionally formatted to 72 columns per line,\n"
"starts with a single line as \"commit message subject\" that is written as\n"
"if to command the codebase to do something (add this, teach a command\n"
"that). The body of the message is designed to add information about the\n"
"commit that is not readily deduced from reading the associated diff,\n"
"such as answering the question \"why?\".\n"
msgstr ""
"This commit message is intentionally formatted to 72 columns per line,\n"
"starts with a single line as \"commit message subject\" that is written as\n"
"if to command the codebase to do something (add this, teach a command\n"
"that). The body of the message is designed to add information about the\n"
"commit that is not readily deduced from reading the associated diff,\n"
"such as answering the question \"why?\".\n"
"JP)このコミットメッセージは意図的に一行72桁のフォーマットになっており、\n"
"\"commit message subject\" という一行で始まり、コードベースに何かを命令\n"
"するように書かれています(これを追加しろ、そのコマンドを教える、等)。\n"
"メッセージの本文は、関連する diff を読んだだけではわからないコミットに\n"
"関する情報、たとえば \"なぜ？\" という質問に答えるような情報を追加するよ\n"
"うに意図されています。\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:270
#, no-wrap
msgid "Signed-off-by: A U Thor <author@example.com>\n"
msgstr "Signed-off-by: A U Thor <author@example.com>\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:277
msgid ""
"Go ahead and inspect your new commit with `git show`. \"psuh:\" indicates "
"you have modified mainly the `psuh` command. The subject line gives readers "
"an idea of what you've changed. The sign-off line (`-s`) indicates that you "
"agree to the Developer's Certificate of Origin 1.1 (see the `Documentation/"
"SubmittingPatches` +++[[dco]]+++ header)."
msgstr "早速、 `git show` を使用して新しいコミットを調べます。 \"psuh:\" は、主に `psuh` コマンドを変更したことを示します。 件名は、読者にあなたが何を変更したかについての考えを与えます。 サインオフライン(`-s`)は、Developer's Certificate of Origin 1.1(開発者の原産地証明書1.1)に同意することを示します(`Documentation/SubmittingPatches` +++[[dco]]+++ ヘッダー参照)。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:281
msgid ""
"For the remainder of the tutorial, the subject line only will be listed for "
"the sake of brevity. However, fully-fleshed example commit messages are "
"available on the reference implementation linked at the top of this document."
msgstr ""
"チュートリアルの残りの部分では、簡潔にするために件名のみをリストします。 ただ"
"し、完全に肉付けされたコミットメッセージの例は、このドキュメントの上部にリン"
"クされているリファレンス実装で入手できます。"

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:283
#, no-wrap
msgid "Implementation"
msgstr "Implementation"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:287
msgid ""
"It's probably useful to do at least something besides printing out a "
"string.  Let's start by having a look at everything we get."
msgstr ""
"文字列を出力する以外に、少なくとも何かを行うと便利です。 まず、私たちが得たも"
"のすべてを見てみましょう。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:290
msgid ""
"Modify your `cmd_psuh` implementation to dump the args you're passed, "
"keeping existing `printf()` calls in place:"
msgstr ""
"あなたの `cmd_psuh` 実装を変更して、渡された引数をダンプし、既存の "
"`printf()` 呼び出しはそのままにします:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:293
#, no-wrap
msgid "\tint i;\n"
msgstr "\tint i;\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:295
#, no-wrap
msgid "\t...\n"
msgstr "\t...\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:302
#, no-wrap
msgid ""
"\tprintf(Q_(\"Your args (there is %d):\\n\",\n"
"\t\t  \"Your args (there are %d):\\n\",\n"
"\t\t  argc),\n"
"\t       argc);\n"
"\tfor (i = 0; i < argc; i++)\n"
"\t\tprintf(\"%d: %s\\n\", i, argv[i]);\n"
msgstr ""
"\tprintf(Q_(\"Your args (there is %d):\\n\",\n"
"\t\t  \"Your args (there are %d):\\n\",\n"
"\t\t  argc),\n"
"\t       argc);\n"
"\tfor (i = 0; i < argc; i++)\n"
"\t\tprintf(\"%d: %s\\n\", i, argv[i]);\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:305
#, no-wrap
msgid ""
"\tprintf(_(\"Your current working directory:\\n<top-level>%s%s\\n\"),\n"
"\t       prefix ? \"/\" : \"\", prefix ? prefix : \"\");\n"
msgstr ""
"\tprintf(_(\"Your current working directory:\\n<top-level>%s%s\\n\"),\n"
"\t       prefix ? \"/\" : \"\", prefix ? prefix : \"\");\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:312
msgid ""
"Build and try it. As you may expect, there's pretty much just whatever we "
"give on the command line, including the name of our command. (If `prefix` is "
"empty for you, try `cd Documentation/ && ../bin-wrappers/git psuh`). That's "
"not so helpful. So what other context can we get?"
msgstr ""
"ビルドして試してみてください。 ご想像のとおり、私達のコマンドの名前を含め、私"
"達がコマンドラインで与えたものはほとんど何でもあります。 (`prefix` が空の場合"
"は、 `cd Documentation/ && ../bin-wrappers/git psuh` としてみてください)。 こ"
"れあまり役に立ちません。 では、私達は他にどのようなコンテキストを取得できるで"
"しょうか？"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:315
msgid ""
"Add a line to `#include \"config.h\"`. Then, add the following bits to the "
"function body:"
msgstr ""
"`#include \"config.h\"` 行を追加します。 そして関数本体にちょびっと追加しま"
"す:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:318
#, no-wrap
msgid "\tconst char *cfg_name;\n"
msgstr "\tconst char *cfg_name;\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:320
#: ../Documentation-sedout/MyFirstContribution.txt:379
#: ../Documentation-sedout/MyFirstContribution.txt:384
#: ../Documentation-sedout/MyFirstContribution.txt:419
#, no-wrap
msgid "...\n"
msgstr "...\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:326
#, no-wrap
msgid ""
"\tgit_config(git_default_config, NULL);\n"
"\tif (git_config_get_string_tmp(\"user.name\", &cfg_name) > 0)\n"
"\t\tprintf(_(\"No name is found in config\\n\"));\n"
"\telse\n"
"\t\tprintf(_(\"Your name: %s\\n\"), cfg_name);\n"
msgstr ""
"\tgit_config(git_default_config, NULL);\n"
"\tif (git_config_get_string_tmp(\"user.name\", &cfg_name) > 0)\n"
"\t\tprintf(_(\"No name is found in config\\n\"));\n"
"\telse\n"
"\t\tprintf(_(\"Your name: %s\\n\"), cfg_name);\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:333
msgid ""
"`git_config()` will grab the configuration from config files known to Git "
"and apply standard precedence rules. `git_config_get_string_tmp()` will look "
"up a specific key (\"user.name\") and give you the value. There are a number "
"of single-key lookup functions like this one; you can see them all (and more "
"info about how to use `git_config()`) in `Documentation/technical/api-config."
"txt`."
msgstr ""
"`git_config()` は、Gitに認識されている構成ファイルから構成を把握し、標準の優"
"先順位ルールを適用します。 `git_config_get_string_tmp()` は特定のキー(\"user."
"name\")を検索し、値を提供します。 このような単一キー探索関数は多数あります。 "
"それらすべて(および  `git_config()` の使用方法に関する詳細情報)は、 "
"`Documentation/technical/api-config.txt` で確認できます。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:335
msgid ""
"You should see that the name printed matches the one you see when you run:"
msgstr "出力された名前が、実行時に表示される名前と一致することがわかります:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:338
#, no-wrap
msgid "$ git config --get user.name\n"
msgstr "$ git config --get user.name\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:342
msgid ""
"Great! Now we know how to check for values in the Git config. Let's commit "
"this too, so we don't lose our progress."
msgstr ""
"すばらしい！ これで、Git構成の値を確認する方法がわかりました。 これもコミット"
"しましょう。そうすれば、自身の成果を失うことはありません。"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:346
#, no-wrap
msgid ""
"$ git add builtin/psuh.c\n"
"$ git commit -sm \"psuh: show parameters & config opts\"\n"
msgstr ""
"$ git add builtin/psuh.c\n"
"$ git commit -sm \"psuh: show parameters & config opts\"\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:351
msgid ""
"Again, the above is for sake of brevity in this tutorial. In a real change "
"you should not use `-m` but instead use the editor to write a meaningful "
"message."
msgstr ""
"繰り返しになりますが、上記のように `-m` で済ますのはチュートリアルを簡潔にす"
"るためです。 実際の変更では、 `-m` を使用するのではなく、エディターを使用して"
"意味のあるメッセージを記述してください。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:356
msgid ""
"Still, it'd be nice to know what the user's working context is like. Let's "
"see if we can print the name of the user's current branch. We can mimic the "
"`git status` implementation; the printer is located in `wt-status.c` and we "
"can see that the branch is held in a `struct wt_status`."
msgstr ""
"さらに、ユーザーの作業コンテキストがどのようなものかを知っておくと便利です。 "
"ユーザーの現在のブランチの名前を出力できるかどうかを見てみましょう。 `git "
"status` の実装を模倣できます。私達は、出力関数が `wt-status.c` にあり、ブラン"
"チが `struct wt_status` に保持されていることが分かりました。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:359
msgid ""
"`wt_status_print()` gets invoked by `cmd_status()` in `builtin/commit.c`.  "
"Looking at that implementation we see the status config being populated like "
"so:"
msgstr ""
"`wt_status_print()` は、 `builtin/commit.c` の `cmd_status()` によって呼び出"
"されます。 その実装を見ると、ステータス構成が以下のように入力されていることが"
"わかります:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:362
#, no-wrap
msgid "status_init_config(&s, git_status_config);\n"
msgstr "status_init_config(&s, git_status_config);\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:366
msgid ""
"But as we drill down, we can find that `status_init_config()` wraps a call "
"to `git_config()`. Let's modify the code we wrote in the previous commit."
msgstr ""
"しかし、ドリルダウンすると、 `status_init_config()` が `git_config()` の呼び"
"出しをラップしていることがわかります。 前のコミットで私達が書いたコードを変更"
"してみましょう。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:368
msgid "Be sure to include the header to allow you to use `struct wt_status`:"
msgstr ""
"`struct wt_status` を使用できるように、必ず以下のヘッダーファイルを含めてくだ"
"さい:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:370
#, no-wrap
msgid "#include \"wt-status.h\"\n"
msgstr "#include \"wt-status.h\"\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:374
msgid ""
"Then modify your `cmd_psuh` implementation to declare your `struct "
"wt_status`, prepare it, and print its contents:"
msgstr ""
"次に、 あなたの `cmd_psuh` 実装を変更して、 あなたの `struct wt_status` を宣"
"言し、準備して、その内容を出力します:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:377
#, no-wrap
msgid "\tstruct wt_status status;\n"
msgstr "\tstruct wt_status status;\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:382
#, no-wrap
msgid ""
"\twt_status_prepare(the_repository, &status);\n"
"\tgit_config(git_default_config, &status);\n"
msgstr ""
"\twt_status_prepare(the_repository, &status);\n"
"\tgit_config(git_default_config, &status);\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:386
#, no-wrap
msgid "\tprintf(_(\"Your current branch: %s\\n\"), status.branch);\n"
msgstr "\tprintf(_(\"Your current branch: %s\\n\"), status.branch);\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:389
msgid ""
"Run it again. Check it out - here's the (verbose) name of your current "
"branch!"
msgstr ""
"もう一度実行して、確認します。 -- これがあなたの現在のブランチの(冗長な)名前"
"です！"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:391
msgid "Let's commit this as well."
msgstr "これもコミットしましょう。"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:395
#, no-wrap
msgid ""
"$ git add builtin/psuh.c\n"
"$ git commit -sm \"psuh: print the current branch\"\n"
msgstr ""
"$ git add builtin/psuh.c\n"
"$ git commit -sm \"psuh: print the current branch\"\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:398
msgid "Now let's see if we can get some info about a specific commit."
msgstr ""
"(コミットしたので)今や、その特定のコミットに関する情報を私達が取得できるかど"
"うかを見てみましょう。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:403
msgid ""
"Luckily, there are some helpers for us here. `commit.h` has a function "
"called `lookup_commit_reference_by_name` to which we can simply provide a "
"hardcoded string; `pretty.h` has an extremely handy `pp_commit_easy()` call "
"which doesn't require a full format object to be passed."
msgstr ""
"幸いなことに、ここでは、私達のためにいくつかのヘルパーがあります。 `commit."
"h` には `lookup_commit_reference_by_name` という関数があり、ハードコードされ"
"た文字列を簡単に設定できます。 `pretty.h` には、完全な形式のオブジェクトを渡"
"す必要のない非常に便利な `pp_commit_easy()` 呼び出しがあります。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:405
msgid "Add the following includes:"
msgstr "以下のインクルードファイルを追加します:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:409
#, no-wrap
msgid ""
"#include \"commit.h\"\n"
"#include \"pretty.h\"\n"
msgstr ""
"#include \"commit.h\"\n"
"#include \"pretty.h\"\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:413
msgid ""
"Then, add the following lines within your implementation of `cmd_psuh()` "
"near the declarations and the logic, respectively."
msgstr ""
"次に、 `cmd_psuh()` の実装内で、宣言とロジックの近くにそれぞれ以下の行を追加"
"します。"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:417
#, no-wrap
msgid ""
"\tstruct commit *c = NULL;\n"
"\tstruct strbuf commitline = STRBUF_INIT;\n"
msgstr ""
"\tstruct commit *c = NULL;\n"
"\tstruct strbuf commitline = STRBUF_INIT;\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:421
#, no-wrap
msgid "\tc = lookup_commit_reference_by_name(\"origin/master\");\n"
msgstr "\tc = lookup_commit_reference_by_name(\"origin/master\");\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:426
#, no-wrap
msgid ""
"\tif (c != NULL) {\n"
"\t\tpp_commit_easy(CMIT_FMT_ONELINE, c, &commitline);\n"
"\t\tprintf(_(\"Current commit: %s\\n\"), commitline.buf);\n"
"\t}\n"
msgstr ""
"\tif (c != NULL) {\n"
"\t\tpp_commit_easy(CMIT_FMT_ONELINE, c, &commitline);\n"
"\t\tprintf(_(\"Current commit: %s\\n\"), commitline.buf);\n"
"\t}\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:431
msgid ""
"The `struct strbuf` provides some safety belts to your basic `char*`, one of "
"which is a length member to prevent buffer overruns. It needs to be "
"initialized nicely with `STRBUF_INIT`. Keep it in mind when you need to pass "
"around `char*`."
msgstr ""
"`struct strbuf` は、基本的な `char *` にいくつかの安全機構(safety belts)を提"
"供します。そのうちの1つは、バッファオーバーランを防ぐための長さのメンバーで"
"す。 これは `STRBUF_INIT` でうまく初期化する必要があります。 `char*` を渡す必"
"要がある場合は、この点に注意してください。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:434
msgid ""
"`lookup_commit_reference_by_name` resolves the name you pass it, so you can "
"play with the value there and see what kind of things you can come up with."
msgstr ""
"`lookup_commit_reference_by_name` は渡された名前を解決するので、その値で遊ん"
"でみて、どんなことを思いつくか見てみましょう。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:439
msgid ""
"`pp_commit_easy` is a convenience wrapper in `pretty.h` that takes a single "
"format enum shorthand, rather than an entire format struct. It then pretty-"
"prints the commit according to that shorthand. These are similar to the "
"formats available with `--pretty=FOO` in many Git commands."
msgstr ""
"`pp_commit_easy` は、フォーマット構造体全体ではなく、単一のフォーマット列挙型"
"の省略形をとる `pretty.h` の便利なラッパーです。 そしてそれから、その省略形に"
"従ってコミットをきれいに印刷(pretty-prints)します。 これらは、多くのGitコマン"
"ドで `--pretty=FOO` で使用できる形式に似ています。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:443
msgid ""
"Build it and run, and if you're using the same name in the example, you "
"should see the subject line of the most recent commit in `origin/master` "
"that you know about. Neat! Let's commit that as well."
msgstr ""
"ビルドして実行すると、あなたが例で同一の名前を使用している場合は、あなたが"
"知っている `origin/master` に最新のコミットの件名が表示されます。ちゃんとでき"
"ました！ これもコミットしましょう。"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:447
#, no-wrap
msgid ""
"$ git add builtin/psuh.c\n"
"$ git commit -sm \"psuh: display the top of origin/master\"\n"
msgstr ""
"$ git add builtin/psuh.c\n"
"$ git commit -sm \"psuh: display the top of origin/master\"\n"

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:450
#, no-wrap
msgid "Adding Documentation"
msgstr "Adding Documentation"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:455
msgid ""
"Awesome! You've got a fantastic new command that you're ready to share with "
"the community. But hang on just a minute - this isn't very user-friendly. "
"Run the following:"
msgstr ""
"素晴らしい！ あなたはコミュニティと共有する準備ができている素晴らしい新しいコ"
"マンドを持っています。 だがちょっと待って欲しい。 -- これはあまりユーザーフレ"
"ンドリーではありません。 以下を実行してみます:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:458
#, no-wrap
msgid "$ ./bin-wrappers/git help psuh\n"
msgstr "$ ./bin-wrappers/git help psuh\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:461
msgid "Your new command is undocumented! Let's fix that."
msgstr "あなたの新しいコマンドは文書化されていません！ これを直しましょう。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:469
msgid ""
"Take a look at `Documentation/git-*.txt`. These are the manpages for the "
"subcommands that Git knows about. You can open these up and take a look to "
"get acquainted with the format, but then go ahead and make a new file "
"`Documentation/git-psuh.txt`. Like with most of the documentation in the Git "
"project, help pages are written with AsciiDoc (see CodingGuidelines, "
"\"Writing Documentation\" section). Use the following template to fill out "
"your own manpage:"
msgstr "`Documentation/git-*.txt` を見てください。 これらは、Gitが知っているサブコマンドのマニュアルページです。 これらを開いてフォーマットを理解するために確認することもできますが、まずは新しいファイル `Documentation/git-psuh.txt` を作成します。 Gitプロジェクトのほとんどのドキュメントと同様に、ヘルプページは AsciiDoc で作成されています(CodingGuidelinesの「Writing Documentation」セクションを参照)。 以下のテンプレートに従ってあなた独自のmanpageを作成します:"

#.  Surprisingly difficult to embed AsciiDoc source within AsciiDoc.
#. type: delimited block .
#: ../Documentation-sedout/MyFirstContribution.txt:475
#, no-wrap
msgid ""
"git-psuh(1)\n"
"===========\n"
msgstr ""
"git-psuh(1)\n"
"===========\n"

#. type: delimited block .
#: ../Documentation-sedout/MyFirstContribution.txt:479
#, no-wrap
msgid ""
"NAME\n"
"----\n"
"git-psuh - Delight users' typo with a shy horse\n"
msgstr ""
"NAME\n"
"----\n"
"git-psuh - Delight users' typo with a shy horse\n"

#. type: delimited block .
#: ../Documentation-sedout/MyFirstContribution.txt:485
#, no-wrap
msgid ""
"SYNOPSIS\n"
"--------\n"
"[verse]\n"
"'git-psuh [<arg>...]'\n"
msgstr ""
"SYNOPSIS\n"
"--------\n"
"[verse]\n"
"'git-psuh [<arg>...]'\n"

#. type: delimited block .
#: ../Documentation-sedout/MyFirstContribution.txt:489
#, no-wrap
msgid ""
"DESCRIPTION\n"
"-----------\n"
"...\n"
msgstr ""
"DESCRIPTION\n"
"-----------\n"
"...\n"

#. type: delimited block .
#: ../Documentation-sedout/MyFirstContribution.txt:493
#, no-wrap
msgid ""
"OPTIONS[[OPTIONS]]\n"
"------------------\n"
"...\n"
msgstr ""
"OPTIONS[[OPTIONS]]\n"
"------------------\n"
"...\n"

#. type: delimited block .
#: ../Documentation-sedout/MyFirstContribution.txt:497
#, no-wrap
msgid ""
"OUTPUT\n"
"------\n"
"...\n"
msgstr ""
"OUTPUT\n"
"------\n"
"...\n"

#. type: delimited block .
#: ../Documentation-sedout/MyFirstContribution.txt:499
#, no-wrap
msgid ""
"GIT\n"
"---\n"
msgstr ""
"GIT\n"
"---\n"

#. type: delimited block .
#: ../Documentation-sedout/MyFirstContribution.txt:501
msgid "Part of the linkgit:git[1] suite"
msgstr "Part of the linkgit:git[1] suite"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:509
msgid ""
"The most important pieces of this to note are the file header, underlined by "
"=, the NAME section, and the SYNOPSIS, which would normally contain the "
"grammar if your command took arguments. Try to use well-established manpage "
"headers so your documentation is consistent with other Git and UNIX "
"manpages; this makes life easier for your user, who can skip to the section "
"they know contains the information they need."
msgstr ""
"注意すべき最も重要な部分は、 = で下線が引かれたファイルヘッダー、NAMEセクショ"
"ン、およびコマンドが引数を取る場合に通常は文法を含むSYNOPSISです。 ドキュメン"
"トが他のGitおよびUNIXのmanpageと一致するように、確立されたmanpageヘッダー"
"(well-established manpage headers)を使用するようにしてください。 これにより、"
"ユーザーは必要な情報が含まれていることがわかっているセクションにスキップでき"
"るため、ユーザーが楽をできます。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:512
msgid ""
"Before trying to build the docs, make sure you have the package `asciidoc` "
"installed."
msgstr ""
"ドキュメントを作成する前に、パッケージ `asciidoc` がインストールされているこ"
"とを確認してください。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:515
msgid ""
"Now that you've written your manpage, you'll need to build it explicitly. We "
"convert your AsciiDoc to troff which is man-readable like so:"
msgstr ""
"今や、あなたのmanpageを記述したので、明示的にそれをビルドする必要がありま"
"す。 以下のようにしてAsciiDocを人間が読めるtroffに変換します:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:519
#, no-wrap
msgid ""
"$ make all doc\n"
"$ man Documentation/git-psuh.1\n"
msgstr ""
"$ make all doc\n"
"$ man Documentation/git-psuh.1\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:522
msgid "or"
msgstr "または"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:526
#, no-wrap
msgid ""
"$ make -C Documentation/ git-psuh.1\n"
"$ man Documentation/git-psuh.1\n"
msgstr ""
"$ make -C Documentation/ git-psuh.1\n"
"$ man Documentation/git-psuh.1\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:530
msgid ""
"While this isn't as satisfying as running through `git help`, you can at "
"least check that your help page looks right."
msgstr ""
"これは `git help` を実行するほど満足のいくものではありませんが、少なくともあ"
"なたのヘルプページが正しく表示されていることを確認できます。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:534
msgid ""
"You can also check that the documentation coverage is good (that is, the "
"project sees that your command has been implemented as well as documented) "
"by running `make check-docs` from the top-level."
msgstr ""
"トップレベルから `make check-docs` を実行することで、ドキュメントの適用範囲が"
"良好であることを確認することもできます(つまり、プロジェクトはあなたのコマンド"
"が実装され、ドキュメント化されていることを確認します)。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:536
msgid "Go ahead and commit your new documentation change."
msgstr "早速、あなたの新しいドキュメントの変更をコミットします。"

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:538
#, no-wrap
msgid "Adding Usage Text"
msgstr "Adding Usage Text"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:543
msgid ""
"Try and run `./bin-wrappers/git psuh -h`. Your command should crash at the "
"end.  That's because `-h` is a special case which your command should handle "
"by printing usage."
msgstr ""
"`./bin-wrappers/git psuh -h` を実行してみてください。 コマンドは最後にクラッ"
"シュするはずです。 なぜならこれは、 `-h` が、あなたのコマンドが使用法の出力を"
"処理しなければならない特殊なケースであるためです。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:547
msgid ""
"Take a look at `Documentation/technical/api-parse-options.txt`. This is a "
"handy tool for pulling out options you need to be able to handle, and it "
"takes a usage string."
msgstr ""
"`Documentation/technical/api-parse-options.txt` をご覧下さい。 これはあなたが"
"扱えるようにする必要があるオプションを引っ張り出すめの便利なツールで、使用法"
"の文字列を受け取ります。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:550
msgid ""
"In order to use it, we'll need to prepare a NULL-terminated array of usage "
"strings and a `builtin_psuh_options` array."
msgstr ""
"これを使用するには、使用文字列のNULLで終了する配列と `builtin_psuh_options` "
"配列を準備する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:552
msgid "Add a line to `#include \"parse-options.h\"`."
msgstr "`#include \"parse-options.h\"` 行を追加します。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:554
msgid "At global scope, add your array of usage strings:"
msgstr "グローバルスコープで、あなたの使用法文字列の配列を追加します:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:560
#, no-wrap
msgid ""
"static const char * const psuh_usage[] = {\n"
"\tN_(\"git psuh [<arg>...]\"),\n"
"\tNULL,\n"
"};\n"
msgstr ""
"static const char * const psuh_usage[] = {\n"
"\tN_(\"git psuh [<arg>...]\"),\n"
"\tNULL,\n"
"};\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:565
msgid ""
"Then, within your `cmd_psuh()` implementation, we can declare and populate "
"our `option` struct. Ours is pretty boring but you can add more to it if you "
"want to explore `parse_options()` in more detail:"
msgstr ""
"次に、あなたの  `cmd_psuh()` 実装内で、 `option` 構造体を宣言して入力できま"
"す。 私たちのものはかなり退屈ですが、 `parse_options()` をより詳細に調べたい"
"場合は、さらに追加することができます:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:570
#, no-wrap
msgid ""
"\tstruct option options[] = {\n"
"\t\tOPT_END()\n"
"\t};\n"
msgstr ""
"\tstruct option options[] = {\n"
"\t\tOPT_END()\n"
"\t};\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:574
msgid ""
"Finally, before you print your args and prefix, add the call to `parse-"
"options()`:"
msgstr ""
"最後に、あなたの引数とプレフィックスを出力する前に、 `parse-options()` の呼び"
"出しを追加します:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:577
#, no-wrap
msgid "\targc = parse_options(argc, argv, prefix, options, psuh_usage, 0);\n"
msgstr "\targc = parse_options(argc, argv, prefix, options, psuh_usage, 0);\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:583
msgid ""
"This call will modify your `argv` parameter. It will strip the options you "
"specified in `options` from `argv` and the locations pointed to from "
"`options` entries will be updated. Be sure to replace your `argc` with the "
"result from `parse_options()`, or you will be confused if you try to parse "
"`argv` later."
msgstr ""
"この呼び出しにより、あなたの `argv` パラメーターが変更されます。  `argv` か"
"ら `options` で指定したオプションが削除され、 `options` エントリからポイント"
"された場所が更新されます。 必ず あなたの `argc` を `parse_options()` の結果に"
"置き換えてください。そうしないと、後で `argv` をパースしようとしたときに混乱"
"します。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:590
msgid ""
"It's worth noting the special argument `--`. As you may be aware, many Unix "
"commands use `--` to indicate \"end of named parameters\" - all parameters "
"after the `--` are interpreted merely as positional arguments. (This can be "
"handy if you want to pass as a parameter something which would usually be "
"interpreted as a flag.) `parse_options()` will terminate parsing when it "
"reaches `--` and give you the rest of the options afterwards, untouched."
msgstr ""
"特別な引数 `--` に注意する価値があります。 ご存知かもしれませんが、多くのUnix"
"コマンドは「名前付きパラメータの終わり」を示すために `--` を使用します -- `--"
"` の後のすべてのパラメータは単に位置引数として解釈されます。 (これは、通常は"
"フラグとして解釈されるものをパラメーターとして渡したい場合に便利です。) "
"`parse_options()` は `--` に達するとパースを終了し、その後、残りのオプション"
"をそのまま提供します。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:605
msgid ""
"Now that you have a usage hint, you can teach Git how to show it in the "
"general command list shown by `git help git` or `git help -a`, which is "
"generated from `command-list.txt`. Find the line for 'git-pull' so you can "
"add your 'git-psuh' line above it in alphabetical order. Now, we can add "
"some attributes about the command which impacts where it shows up in the "
"aforementioned help commands. The top of `command-list.txt` shares some "
"information about what each attribute means; in those help pages, the "
"commands are sorted according to these attributes. `git psuh` is user-"
"facing, or porcelain - so we will mark it as \"mainporcelain\". For "
"\"mainporcelain\" commands, the comments at the top of `command-list.txt` "
"indicate we can also optionally add an attribute from another list; since "
"`git psuh` shows some information about the user's workspace but doesn't "
"modify anything, let's mark it as \"info\". Make sure to keep your "
"attributes in the same style as the rest of `command-list.txt` using spaces "
"to align and delineate them:"
msgstr "今や、あなたは使用上のヒントが得られたので、 `command-list.txt` から生成される `git help git` または `git help -a` で示される一般的なコマンドリストにそれを表示する方法をGitに教えることができます。 あなたは `git-pull` の行を見つけて、その上に あなたの `git-psuh` 行をアルファベット順に追加できるようにします。これで、前述のヘルプコマンドのどこに表示されるかに影響を与える、コマンドに関するいくつかの属性を追加できます。 `command-list.txt` の上部は、各属性の意味に関する情報を共有しています。これらのヘルプページでは、コマンドはこれらの属性に従ってソートされています。 `git psuh` はユーザー向け、つまり磁器コマンドです。そのため、「mainporcelain」としてマークします。 「mainporcelain」コマンドの場合、 `command-list.txt` の上部にあるコメントは、オプションで別のリストから属性を追加することもできることを示しています。 `git psuh` はユーザーのワークスペースに関する情報を表示しますが、何も変更しないので、「info」としてマークしましょう。属性を他の `command-list.txt` と同一のスタイルに保ち、適宜空白を使用してそれらを整列して記述します:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:611
#, no-wrap
msgid ""
"git-prune-packed                        plumbingmanipulators\n"
"git-psuh                                mainporcelain\t\tinfo\n"
"git-pull                                mainporcelain           remote\n"
"git-push                                mainporcelain           remote\n"
msgstr ""
"git-prune-packed                        plumbingmanipulators\n"
"git-psuh                                mainporcelain\t\tinfo\n"
"git-pull                                mainporcelain           remote\n"
"git-push                                mainporcelain           remote\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:615
msgid ""
"Build again. Now, when you run with `-h`, you should see your usage printed "
"and your command terminated before anything else interesting happens. Great!"
msgstr ""
"再びビルドします。 これで、 `-h` を指定して実行すると、他に何か面白いことが起"
"こる前に、使用法が出力され、コマンドが終了するはずです。 すばらしい！"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:617
msgid "Go ahead and commit this one, too."
msgstr "それでは、これもコミットしておいてください。"

#. type: Title ==
#: ../Documentation-sedout/MyFirstContribution.txt:619
#, no-wrap
msgid "Testing"
msgstr "Testing"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:624
msgid ""
"It's important to test your code - even for a little toy command like this "
"one.  Moreover, your patch won't be accepted into the Git tree without "
"tests. Your tests should:"
msgstr ""
"あなたのコードをテストすることは重要です -- このような小さなおもちゃのような"
"コマンドであっても。 さらに、あなたのパッチはテストなしではGitツリーに受け入"
"れられません。 テストは以下のようにする必要があります:"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:626
msgid "Illustrate the current behavior of the feature"
msgstr "機能の現在の振る舞いを説明する"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:627
msgid "Prove the current behavior matches the expected behavior"
msgstr "現在の振る舞いが期待される振る舞いと一致することを証明する"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:628
msgid "Ensure the externally-visible behavior isn't broken in later changes"
msgstr "変更後に外部から見える動作が壊れていないことを確認します"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:630
msgid "So let's write some tests."
msgstr "それでは、いくつかのテストを書いてみましょう。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:632
msgid "Related reading: `t/README`"
msgstr "関連資料: `t/README`"

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:634
#, no-wrap
msgid "Overview of Testing Structure"
msgstr "Overview of Testing Structure"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:638
msgid ""
"The tests in Git live in `t/` and are named with a 4-digit decimal number "
"using the schema shown in the Naming Tests section of `t/README`."
msgstr ""
"Gitのテストは `t/` にあり、 `t/README` の NamingTestsセクションに示されている"
"スキーマを使用して4桁の10進数で名前が付けられます。"

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:640
#, no-wrap
msgid "Writing Your Test"
msgstr "Writing Your Test"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:646
msgid ""
"Since this a toy command, let's go ahead and name the test with t9999. "
"However, as many of the family/subcmd combinations are full, best practice "
"seems to be to find a command close enough to the one you've added and share "
"its naming space."
msgstr "今回はおもちゃコマンドなので、思い切ってテストにt9999という名前を付けましょう。 ただし、ファミリとサブコマンドの組み合わせの多くはいっぱいいっぱいであるため、ベストプラクティスは、追加したコマンドに十分近いコマンドを見つけて、その名前付け空間を共有することです。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:649
msgid ""
"Create a new file `t/t9999-psuh-tutorial.sh`. Begin with the header as so "
"(see \"Writing Tests\" and \"Source 'test-lib.sh'\" in `t/README`):"
msgstr ""
"新しいファイル `t/t9999-psuh-tutorial.sh` を作成します。 ヘッダーは以下のよう"
"に始めます(`t/README` の「WritingTests」および「Source 'test-lib.sh'」参照):"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:652
#, no-wrap
msgid "#!/bin/sh\n"
msgstr "#!/bin/sh\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:654
#, no-wrap
msgid "test_description='git-psuh test\n"
msgstr "test_description='git-psuh test\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:656
#, no-wrap
msgid "This test runs git-psuh and makes sure it does not crash.'\n"
msgstr "This test runs git-psuh and makes sure it does not crash.'\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:658
#, no-wrap
msgid ". ./test-lib.sh\n"
msgstr ". ./test-lib.sh\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:663
msgid ""
"Tests are framed inside of a `test_expect_success` in order to output TAP "
"formatted results. Let's make sure that `git psuh` doesn't exit poorly and "
"does mention the right animal somewhere:"
msgstr ""
"TAP形式の結果を出力するために、テストは `test_expect_success` 内にフレーム化"
"されます。 `git psuh` がうまく終了せず、どこかで適切な動物について言及してい"
"ることを確認しましょう:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:669
#, no-wrap
msgid ""
"test_expect_success 'runs correctly with no args and good output' '\n"
"\tgit psuh >actual &&\n"
"\tgrep Pony actual\n"
"'\n"
msgstr ""
"test_expect_success 'runs correctly with no args and good output' '\n"
"\tgit psuh >actual &&\n"
"\tgrep Pony actual\n"
"'\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:673
msgid ""
"Indicate that you've run everything you wanted by adding the following at "
"the bottom of your script:"
msgstr ""
"あなたのスクリプトの下部に以下を追加して、あなたが必要なすべてを実行したこと"
"を示します:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:676
#, no-wrap
msgid "test_done\n"
msgstr "test_done\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:679
msgid "Make sure you mark your test script executable:"
msgstr "あなたのテストスクリプトを実行可能としてマークしてください:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:682
#, no-wrap
msgid "$ chmod +x t/t9999-psuh-tutorial.sh\n"
msgstr "$ chmod +x t/t9999-psuh-tutorial.sh\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:687
msgid ""
"You can get an idea of whether you created your new test script successfully "
"by running `make -C t test-lint`, which will check for things like test "
"number uniqueness, executable bit, and so on."
msgstr ""
"`make -C t test-lint` を実行すると、新しいテストスクリプトが正常に作成された"
"かどうかがわかります。これにより、テスト番号の一意性や実行可能ビットなどが"
"チェックされます。"

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:689
#, no-wrap
msgid "Running Locally"
msgstr "Running Locally"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:692
msgid "Let's try and run locally:"
msgstr "ローカルで実行してみましょう:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:696
#, no-wrap
msgid ""
"$ make\n"
"$ cd t/ && prove t9999-psuh-tutorial.sh\n"
msgstr ""
"$ make\n"
"$ cd t/ && prove t9999-psuh-tutorial.sh\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:699
msgid ""
"You can run the full test suite and ensure `git-psuh` didn't break anything:"
msgstr ""
"あなたは完全なテストスイートを実行して、 `git-push` が何も壊さなかったことを"
"確認できます:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:703
#, no-wrap
msgid ""
"$ cd t/\n"
"$ prove -j$(nproc) --shuffle t[0-9]*.sh\n"
msgstr ""
"$ cd t/\n"
"$ prove -j$(nproc) --shuffle t[0-9]*.sh\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:709
msgid ""
"You can also do this with `make test` or use any testing harness which can "
"speak TAP. `prove` can run concurrently. `shuffle` randomizes the order the "
"tests are run in, which makes them resilient against unwanted inter-test "
"dependencies. `prove` also makes the output nicer."
msgstr ""
"これは、 `make test` を使用して行うことも、TAPを話すことができる任意のテスト"
"ハーネスを使用することもできます。 `prove` は同時に実行できます。 `shuffle`"
"は、テストが実行される順序をランダム化します。これにより、テスト間の不要な依"
"存関係に対する回復力が高まります。 `prove` は出力をより良くする事もします。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:711
msgid "Go ahead and commit this change, as well."
msgstr "では、この変更もコミットしておいてください。"

#. type: Title ==
#: ../Documentation-sedout/MyFirstContribution.txt:713
#, no-wrap
msgid "Getting Ready to Share: Anatomy of a Patch Series"
msgstr "共有の準備: パッチシリーズの解剖分析"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:720
msgid ""
"You may have noticed already that the Git project performs its code reviews "
"via emailed patches, which are then applied by the maintainer when they are "
"ready and approved by the community. The Git project does not accept "
"contributions from pull requests, and the patches emailed for review need to "
"be formatted a specific way."
msgstr ""
"あなたは、 Gitプロジェクトは電子メールで送信されたパッチを介してコード・レ"
"ビューが行われ、準備が整いコミュニティによって承認されると、メンテナーによっ"
"て適用されることに、既に気づかれていると思います。 Git プロジェクトはプル・リ"
"クエストからの貢献を受け入れません。また、レビューのために電子メールで送信さ"
"れるパッチは、指定の方法でフォーマットする必要があります。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:728
msgid ""
"Before taking a look at how to convert your commits into emailed patches, "
"let's analyze what the end result, a \"patch series\", looks like. Here is "
"an {patch-series}[example] of the summary view for a patch series on the web "
"interface of the {lore}[Git mailing list archive]:"
msgstr ""
"コミットを電子メールで送信されるパッチに変換する方法を検討する前に、最終結果"
"である「パッチ・シリーズ」がどのようになるかを分析してみましょう。 {patch-"
"series}[例] は、 {lore}[Git mailing list archive] のWebインターフェース上の"
"パッチ・シリーズの概要ビューです:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:754
#, no-wrap
msgid ""
"2022-02-18 18:40 [PATCH 0/3] libify reflog John Cai via GitGitGadget\n"
"2022-02-18 18:40 ` [PATCH 1/3] reflog: libify delete reflog function and helpers John Cai via GitGitGadget\n"
"2022-02-18 19:10   ` Ævar Arnfjörð Bjarmason [this message]\n"
"2022-02-18 19:39     ` Taylor Blau\n"
"2022-02-18 19:48       ` Ævar Arnfjörð Bjarmason\n"
"2022-02-18 19:35   ` Taylor Blau\n"
"2022-02-21  1:43     ` John Cai\n"
"2022-02-21  1:50       ` Taylor Blau\n"
"2022-02-23 19:50         ` John Cai\n"
"2022-02-18 20:00   ` // other replies elided\n"
"2022-02-18 18:40 ` [PATCH 2/3] reflog: call reflog_delete from reflog.c John Cai via GitGitGadget\n"
"2022-02-18 19:15   ` Ævar Arnfjörð Bjarmason\n"
"2022-02-18 20:26     ` Junio C Hamano\n"
"2022-02-18 18:40 ` [PATCH 3/3] stash: call reflog_delete from reflog.c John Cai via GitGitGadget\n"
"2022-02-18 19:20   ` Ævar Arnfjörð Bjarmason\n"
"2022-02-19  0:21     ` Taylor Blau\n"
"2022-02-22  2:36     ` John Cai\n"
"2022-02-22 10:51       ` Ævar Arnfjörð Bjarmason\n"
"2022-02-18 19:29 ` [PATCH 0/3] libify reflog Ævar Arnfjörð Bjarmason\n"
"2022-02-22 18:30 ` [PATCH v2 0/3] libify reflog John Cai via GitGitGadget\n"
"2022-02-22 18:30   ` [PATCH v2 1/3] stash: add test to ensure reflog --rewrite --updatref behavior John Cai via GitGitGadget\n"
"2022-02-23  8:54     ` Ævar Arnfjörð Bjarmason\n"
"2022-02-23 21:27       ` Junio C Hamano\n"
"// continued\n"
msgstr ""
"2022-02-18 18:40 [PATCH 0/3] libify reflog John Cai via GitGitGadget\n"
"2022-02-18 18:40 ` [PATCH 1/3] reflog: libify delete reflog function and helpers John Cai via GitGitGadget\n"
"2022-02-18 19:10   ` Ævar Arnfjörð Bjarmason [this message]\n"
"2022-02-18 19:39     ` Taylor Blau\n"
"2022-02-18 19:48       ` Ævar Arnfjörð Bjarmason\n"
"2022-02-18 19:35   ` Taylor Blau\n"
"2022-02-21  1:43     ` John Cai\n"
"2022-02-21  1:50       ` Taylor Blau\n"
"2022-02-23 19:50         ` John Cai\n"
"2022-02-18 20:00   ` // other replies elided\n"
"2022-02-18 18:40 ` [PATCH 2/3] reflog: call reflog_delete from reflog.c John Cai via GitGitGadget\n"
"2022-02-18 19:15   ` Ævar Arnfjörð Bjarmason\n"
"2022-02-18 20:26     ` Junio C Hamano\n"
"2022-02-18 18:40 ` [PATCH 3/3] stash: call reflog_delete from reflog.c John Cai via GitGitGadget\n"
"2022-02-18 19:20   ` Ævar Arnfjörð Bjarmason\n"
"2022-02-19  0:21     ` Taylor Blau\n"
"2022-02-22  2:36     ` John Cai\n"
"2022-02-22 10:51       ` Ævar Arnfjörð Bjarmason\n"
"2022-02-18 19:29 ` [PATCH 0/3] libify reflog Ævar Arnfjörð Bjarmason\n"
"2022-02-22 18:30 ` [PATCH v2 0/3] libify reflog John Cai via GitGitGadget\n"
"2022-02-22 18:30   ` [PATCH v2 1/3] stash: add test to ensure reflog --rewrite --updatref behavior John Cai via GitGitGadget\n"
"2022-02-23  8:54     ` Ævar Arnfjörð Bjarmason\n"
"2022-02-23 21:27       ` Junio C Hamano\n"
"// continued\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:757
msgid "We can note a few things:"
msgstr "以下の幾つかの点に留意してください:"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:761
msgid ""
"Each commit is sent as a separate email, with the commit message title as "
"subject, prefixed with \"[PATCH _i_/_n_]\" for the _i_-th commit of an _n_-"
"commit series."
msgstr ""
"各コミットは、 _n_ コミット シリーズの _i_ 番目のコミットを表す `[PATCH _i_/"
"_n_]` という接頭辞が付けられたコミット・メッセージのタイトルを件名として、個"
"別の電子メールとして送信されます。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:763
msgid ""
"Each patch is sent as a reply to an introductory email called the _cover "
"letter_ of the series, prefixed \"[PATCH 0/_n_]\"."
msgstr ""
"各パッチは、`[PATCH 0/_n_]` という接頭辞が付いた、シリーズの、 カバー・レター"
"と呼ばれる紹介メールへの返信として送信されます。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:768
msgid ""
"Subsequent iterations of the patch series are labelled \"PATCH v2\", \"PATCH "
"v3\", etc. in place of \"PATCH\". For example, \"[PATCH v2 1/3]\" would be "
"the first of three patches in the second iteration. Each iteration is sent "
"with a new cover letter (like \"[PATCH v2 0/3]\" above), itself a reply to "
"the cover letter of the previous iteration (more on that below)."
msgstr ""
"パッチ・シリーズの後続の反復は、「PATCH」の代わりに「PATCH v2」、「PATCH v3」"
"などのラベルが付けられます。 たとえば、「[PATCH v2 1/3]」は、2 回目の繰り返し"
"の 3 つのパッチの最初のパッチになります。 各反復は新しいカバー・レター "
"(「[PATCH v2 0/3]」など) と共に送信され、それ自体が前の反復のカバー・レターへ"
"の返信です(詳細下記)。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:772
msgid ""
"A single-patch topic is sent with \"[PATCH]\", \"[PATCH v2]\", etc. without "
"_i_/_n_ numbering (in the above thread overview, no single-patch topic "
"appears, though)."
msgstr ""
"シングル・パッチ・トピックは、_i_/_n_ 番号なしで「[PATCH]」、「[PATCH v2]」な"
"どで送信されます (ただし、上記の「スレッド概要」では、シングル・パッチ・ト"
"ピックは表示されません)。"

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:774
#, no-wrap
msgid "The cover letter"
msgstr "The cover letter"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:781
msgid ""
"In addition to an email per patch, the Git community also expects your "
"patches to come with a cover letter. This is an important component of "
"change submission as it explains to the community from a high level what "
"you're trying to do, and why, in a way that's more apparent than just "
"looking at your patches."
msgstr ""
"パッチごとの電子メールに加えて、Git コミュニティは、パッチにカバー・レターが"
"付属していることも期待しています。 これは変更提出(change submission)の重要な"
"要素であり、パッチを見るだけではなく、何をしようとしているのか、その理由をコ"
"ミュニティに高レベルで説明するものです。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:785
msgid ""
"The title of your cover letter should be something which succinctly covers "
"the purpose of your entire topic branch. It's often in the imperative mood, "
"just like our commit message titles. Here is how we'll title our series:"
msgstr ""
"カバー・レターのタイトルは、トピック・ブランチ全体の目的を簡潔に網羅するもの"
"にする必要があります。 コミット・メッセージのタイトルと同じように、しばしば命"
"令調になっています。 シリーズにタイトルを付ける方法は以下のとおりです:"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:786
#, no-wrap
msgid "---\n"
msgstr "---\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:788
#, no-wrap
msgid ""
"Add the 'psuh' command\n"
"---\n"
msgstr ""
"Add the 'psuh' command\n"
"---\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:795
msgid ""
"The body of the cover letter is used to give additional context to "
"reviewers.  Be sure to explain anything your patches don't make clear on "
"their own, but remember that since the cover letter is not recorded in the "
"commit history, anything that might be useful to future readers of the "
"repository's history should also be in your commit messages."
msgstr ""
"カバー・レターの本文は、レビュー担当者に追加のコンテキストを提供するために使"
"用されます。 パッチだけでは明らかにならないことは必ず説明してください。 ただ"
"し、カバー・レターはコミット履歴に記録されないため、将来リポジトリの履歴を読"
"む人にとって役立つ可能性があるものはコミット・メッセージにも記載する必要があ"
"ることを忘れないでください。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:797
msgid "Here's an example body for `psuh`:"
msgstr "ここで、 `push` の本文の例を以下に示します:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:802
#, no-wrap
msgid ""
"Our internal metrics indicate widespread interest in the command\n"
"git-psuh - that is, many users are trying to use it, but finding it is\n"
"unavailable, using some unknown workaround instead.\n"
msgstr ""
"Our internal metrics indicate widespread interest in the command\n"
"git-psuh - that is, many users are trying to use it, but finding it is\n"
"unavailable, using some unknown workaround instead.\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:805
#, no-wrap
msgid ""
"The following handful of patches add the psuh command and implement some\n"
"handy features on top of it.\n"
msgstr ""
"The following handful of patches add the psuh command and implement some\n"
"handy features on top of it.\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:808
#, no-wrap
msgid ""
"This patchset is part of the MyFirstContribution tutorial and should not\n"
"be merged.\n"
msgstr ""
"This patchset is part of the MyFirstContribution tutorial and should not\n"
"be merged.\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:812
msgid ""
"At this point the tutorial diverges, in order to demonstrate two different "
"methods of formatting your patchset and getting it reviewed."
msgstr ""
"ここから、 パッチ・セットをフォーマットしてレビューを受けるための 2 つの異な"
"る方法を示すために、チュートリアルは分岐します。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:816
msgid ""
"The first method to be covered is GitGitGadget, which is useful for those "
"already familiar with GitHub's common pull request workflow. This method "
"requires a GitHub account."
msgstr ""
"一番目の方法はGitGitGadgetです。これは、GitHubの一般的なプルリクエストワーク"
"フローに既に精通しているユーザーに役立ちます。 この方法ではGitHubアカウントが"
"必要です。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:821
msgid ""
"The second method to be covered is `git send-email`, which can give slightly "
"more fine-grained control over the emails to be sent. This method requires "
"some setup which can change depending on your system and will not be covered "
"in this tutorial."
msgstr ""
"2番目の方法は `git send-email` にて対応します。これにより、送信する電子メール"
"を少し細かく制御できます。 この方法には、システムに応じて変更される可能性のあ"
"るいくつかの設定が必要であり、このチュートリアルでは説明しません。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:825
msgid ""
"Regardless of which method you choose, your engagement with reviewers will "
"be the same; the review process will be covered after the sections on "
"GitGitGadget and `git send-email`."
msgstr ""
"どちらの方法を選択しても、レビュー担当者との関わりは同じです。 レビュープロセ"
"スについては、GitGitGadget と `git send-email` のセクションの後で説明します。"

#. type: Title ==
#: ../Documentation-sedout/MyFirstContribution.txt:827
#, no-wrap
msgid "Sending Patches via GitGitGadget"
msgstr "Sending Patches via GitGitGadget"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:836
msgid ""
"One option for sending patches is to follow a typical pull request workflow "
"and send your patches out via GitGitGadget. GitGitGadget is a tool created "
"by Johannes Schindelin to make life as a Git contributor easier for those "
"used to the GitHub PR workflow. It allows contributors to open pull requests "
"against its mirror of the Git project, and does some magic to turn the PR "
"into a set of emails and send them out for you. It also runs the Git "
"continuous integration suite for you. It's documented at http://gitgitgadget."
"github.io."
msgstr ""
"パッチを送信するためのオプションの一つは、一般的なプルリクエストワークフロー"
"に従い、GitGitGadgetを介してパッチを送信することです。 GitGitGadgetは、"
"GitHub PRワークフローに慣れている人にとって、Git寄稿者としての生活を容易にす"
"るために Johannes Schindelin によって作成されたツールです。 これにより、寄稿"
"者はGitプロジェクトのミラーに対してプルリクエストを開くことができ、PRを一連の"
"電子メールに変換して送信するための魔法を実行します。 また、Git継続的インテグ"
"レーションスイートも実行します。 これは http://gitgitgadget.github.io で文書"
"化されています。"

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:838
#, no-wrap
msgid "Forking `git/git` on GitHub"
msgstr "Forking `git/git` on GitHub"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:843
msgid ""
"Before you can send your patch off to be reviewed using GitGitGadget, you "
"will need to fork the Git project and upload your changes. First thing - "
"make sure you have a GitHub account."
msgstr ""
"あなたはGitGitGadgetを使用してレビューするためにパッチを送信する前に、Gitプロ"
"ジェクトをフォークして変更をアップロードする必要があります。 まず最初に、"
"GitHubアカウントを持っていることを確認してください。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:846
msgid ""
"Head to the https://github.com/git/git[GitHub mirror] and look for the Fork "
"button. Place your fork wherever you deem appropriate and create it."
msgstr ""
"https://github.com/git/git[GitHub mirror] に移動し、フォークボタン(Fork "
"button)を探します。 あなたの適切と思われる場所にあなたのフォークを配置作成し"
"ます。"

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:848
#, no-wrap
msgid "Uploading to Your Own Fork"
msgstr "Uploading to Your Own Fork"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:855
msgid ""
"To upload your branch to your own fork, you'll need to add the new fork as a "
"remote. You can use `git remote -v` to show the remotes you have added "
"already.  From your new fork's page on GitHub, you can press \"Clone or "
"download\" to get the URL; then you need to run the following to add, "
"replacing your own URL and remote name for the examples provided:"
msgstr ""
"ブランチを自分のフォークにアップロードするには、新しいフォークをリモートとし"
"て追加する必要があります。 `git remote -v` を使用して、すでに追加したリモート"
"を表示できます。 GitHubの新しいフォークのページから、「Clone or download」(ク"
"ローンまたはダウンロード)を押してURLを取得できます。 次に、以下を実行してリ"
"モートを追加し、提供されている例の独自のURLとリモート名を置き換える必要があり"
"ます:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:858
#, no-wrap
msgid "$ git remote add remotename git@github.com:remotename/git.git\n"
msgstr "$ git remote add remotename git@github.com:remotename/git.git\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:861
msgid "or to use the HTTPS URL:"
msgstr "または、HTTPS URL を使って:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:864
#, no-wrap
msgid "$ git remote add remotename https://github.com/remotename/git/.git\n"
msgstr "$ git remote add remotename https://github.com/remotename/git/.git\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:869
msgid ""
"Run `git remote -v` again and you should see the new remote showing up.  "
"`git fetch remotename` (with the real name of your remote replaced) in order "
"to get ready to push."
msgstr ""
"もう一度 `git remote -v` を実行すると、新しいリモートが表示されます。 プッ"
"シュの準備をするために、 `git fetch remotename` (remotenameの部分はあなたの実"
"際のリモートの名前に置き換えて下さい) とします。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:873
msgid ""
"Next, double-check that you've been doing all your development in a new "
"branch by running `git branch`. If you didn't, now is a good time to move "
"your new commits to their own branch."
msgstr ""
"次に、 `git branch` を実行して、あなたの全ての開発を新しいブランチで行ってい"
"ることを再確認します。 そうでない場合は、今が新しいコミットを独自のブランチに"
"移動する良い機会です。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:877
msgid ""
"As mentioned briefly at the beginning of this document, we are basing our "
"work on `master`, so go ahead and update as shown below, or using your "
"preferred workflow."
msgstr "このドキュメントの冒頭で簡単に説明したように、作業は `master` に基づいているため、以下に示すように更新しておくか、好みのワークフローを使用してください。"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:882
#, no-wrap
msgid ""
"$ git checkout master\n"
"$ git pull -r\n"
"$ git rebase master psuh\n"
msgstr ""
"$ git checkout master\n"
"$ git pull -r\n"
"$ git rebase master psuh\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:886
msgid ""
"Finally, you're ready to push your new topic branch! (Due to our branch and "
"command name choices, be careful when you type the command below.)"
msgstr "そして今や、あなたは新しいトピックブランチをプッシュする準備が整いました！ (ブランチ名をあなたの実際のに置き換えるのと、あなたのコマンド名がpushじゃなくてpsuhであることに注意して下さい。)"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:889
#, no-wrap
msgid "$ git push remotename psuh\n"
msgstr "$ git push remotename psuh\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:892
msgid ""
"Now you should be able to go and check out your newly created branch on "
"GitHub."
msgstr ""
"これで、あなたはGitHubで新しく作成したブランチにアクセスして確認できるように"
"なります。"

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:894
#, no-wrap
msgid "Sending a PR to GitGitGadget"
msgstr "Sending a PR to GitGitGadget"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:901
msgid ""
"In order to have your code tested and formatted for review, you need to "
"start by opening a Pull Request against `gitgitgadget/git`. Head to https://"
"github.com/gitgitgadget/git and open a PR either with the \"New pull "
"request\" button or the convenient \"Compare & pull request\" button that "
"may appear with the name of your newly pushed branch."
msgstr ""
"コードをテストしてレビュー用にフォーマットするには、まず、 `gitgitgadget/"
"git` に対してプルリクエストを開く必要があります。 https://github.com/"
"gitgitgadget/git にアクセスし、「New pull request」(新しいプルリクエスト)ボタ"
"ンまたは、新しくプッシュしたブランチの名前とともに表示される便利な「Compare "
"& pull request」(比較してプルリクエスト)ボタンを使用してPRを開きます。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:906
msgid ""
"Review the PR's title and description, as they're used by GitGitGadget "
"respectively as the subject and body of the cover letter for your change. "
"Refer to <<cover-letter,\"The cover letter\">> above for advice on how to "
"title your submission and what content to include in the description."
msgstr ""
"PR のタイトルと説明を確認してください。 GitGitGadget では、あなたの変更の、カ"
"バー・レターの件名と本文としてそれぞれ使用されます。 提出物にタイトルを付ける"
"方法と説明に含める内容については、上記 <<cover-letter,\"The cover letter\">> "
"を参照してください。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:916
msgid ""
"For single-patch contributions, your commit message should already be "
"meaningful and explain at a high level the purpose (what is happening and "
"why)  of your patch, so you usually do not need any additional context. In "
"that case, remove the PR description that GitHub automatically generates "
"from your commit message (your PR description should be empty). If you do "
"need to supply even more context, you can do so in that space and it will be "
"appended to the email that GitGitGadget will send, between the three-dash "
"line and the diffstat (see <<single-patch,Bonus Chapter: One-Patch Changes>> "
"for how this looks once submitted)."
msgstr ""
"単一パッチでの貢献の場合、あなたのコミット・メッセージはすでに意味のある内容"
"があり、それはパッチの目的 (何が起こっているのか、その理由) を高レベルで説明"
"しているべきであるため、通常は追加のコンテキストは必要ありません。 その場"
"合、 GitHub がコミット・メッセージから自動的に生成する PR の説明を削除します "
"(PR の説明は空にする必要があります)。 さらに多くのコンテキストを提供する必要"
"がある場合は、その場所で行うことができ、GitGitGadget が送信する電子メールの三"
"点鎖線(three-dash)と diffstat の間に追加されます (送信後の様子については "
"<<single-patch,Bonus Chapter: One-Patch Changes>> を参照してください)。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:918
msgid "When you're happy, submit your pull request."
msgstr "満足したら、プル・リクエストを送信します。"

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:920
#, no-wrap
msgid "Running CI and Getting Ready to Send"
msgstr "Running CI and Getting Ready to Send"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:929
msgid ""
"If it's your first time using GitGitGadget (which is likely, as you're using "
"this tutorial) then someone will need to give you permission to use the "
"tool.  As mentioned in the GitGitGadget documentation, you just need someone "
"who already uses it to comment on your PR with `/allow <username>`. "
"GitGitGadget will automatically run your PRs through the CI even without the "
"permission given but you will not be able to `/submit` your changes until "
"someone allows you to use the tool."
msgstr ""
"あなたがGitGitGadgetを初めて使用する場合(このチュートリアルを使用している可能"
"性が高い)、誰かがツールの使用許可を与える必要があります。 GitGitGadgetのド"
"キュメントに記載されているように、PRに `/allow<username>` を付けてコメントす"
"るにはすでにそれを使用している人が必要です。 GitGitGadgetは、許可が与えられて"
"いなくてもCIを介してPRを自動的に実行しますが、誰かがあなたにツールの使用を許"
"可するまで、あなたの変更を `/submit` することはできません。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:937
msgid ""
"You can typically find someone who can `/allow` you on GitGitGadget by "
"either examining recent pull requests where someone has been granted `/"
"allow` (https://github.com/gitgitgadget/git/pulls?"
"utf8=%E2%9C%93&q=is%3Apr+is%3Aopen+%22%2Fallow%22[Search: is:pr is:open \"/"
"allow\"]), in which case both the author and the person who granted the `/"
"allow` can now `/allow` you, or by inquiring on the https://web.libera.chat/"
"#git-devel[#git-devel] IRC channel on Libera Chat linking your pull request "
"and asking for someone to `/allow` you."
msgstr ""
"通常、GitGitGadgetであなたを `/allow` できる人を見つけるには、誰かに `/"
"allow` が付与されている最近のプルリクエストを調べます(https://github.com/"
"gitgitgadget/git/pulls?utf8=%E2%9C%93&q=is%3Apr+is%3Aopen+"
"%22%2Fallow%22[Search: is:pr is:open \"/allow\"])。この場合、作成者と `/"
"allow` を付与した人の両方が `/allow` できるようになります。 `/allow` するか、"
"またはLiberaChatの https://web.libera.chat/#git-devel[#git-devel] IRCチャネル"
"で、プルリクエストをリンクして誰かに `/allow` するように依頼してください。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:940
msgid ""
"If the CI fails, you can update your changes with `git rebase -i` and push "
"your branch again:"
msgstr ""
"CIに失敗した場合は、 `git rebase -i` を使用して変更を更新し、ブランチを再度"
"プッシュできます:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:943
#: ../Documentation-sedout/MyFirstContribution.txt:974
#, no-wrap
msgid "$ git push -f remotename psuh\n"
msgstr "$ git push -f remotename psuh\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:947
msgid ""
"In fact, you should continue to make changes this way up until the point "
"when your patch is accepted into `next`."
msgstr ""
"実際、パッチが  `next` に受け入れられるまで、この方法で変更を続ける必要があり"
"ます。"

#. TODO https://github.com/gitgitgadget/gitgitgadget/issues/83
#. It'd be nice to be able to verify that the patch looks good before sending it
#. to everyone on Git mailing list.
#. [[check-work-ggg]]
#. === Check Your Work
#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:957
#, no-wrap
msgid "Sending Your Patches"
msgstr "Sending Your Patches"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:962
msgid ""
"Now that your CI is passing and someone has granted you permission to use "
"GitGitGadget with the `/allow` command, sending out for review is as simple "
"as commenting on your PR with `/submit`."
msgstr ""
"あなたのCIを通過し、誰かが `/allow` コマンドでGitGitGadgetを使用する許可を与"
"えたのなら、レビューのために送信するのは、`/submit` でPRにコメントするのと同"
"じくらい簡単です。"

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:964
#, no-wrap
msgid "Updating With Comments"
msgstr "Updating With Comments"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:968
msgid ""
"Skip ahead to <<reviewing,Responding to Reviews>> for information on how to "
"reply to review comments you will receive on the mailing list."
msgstr ""
"メーリングリストで受け取るレビューコメントに返信する方法については、 "
"<<reviewing,Responding to Reviews>> に進んでください。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:971
msgid ""
"Once you have your branch again in the shape you want following all review "
"comments, you can submit again:"
msgstr ""
"すべてのレビューコメントに従って希望の形でブランチを作成したら、もう一度送信"
"できます:"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:984
msgid ""
"Next, go look at your pull request against GitGitGadget; you should see the "
"CI has been kicked off again. Now while the CI is running is a good time for "
"you to modify your description at the top of the pull request thread; it "
"will be used again as the cover letter. You should use this space to "
"describe what has changed since your previous version, so that your "
"reviewers have some idea of what they're looking at. When the CI is done "
"running, you can comment once more with `/submit` - GitGitGadget will "
"automatically add a v2 mark to your changes."
msgstr ""
"次に、GitGitGadgetに対するプルリクエストを確認します。 CIが再び開始されたこと"
"がわかります。 CIの実行中に、プルリクエストスレッドの上部にある説明を変更する"
"のに適したタイミングです。 カバーレターとして再び使用されます。 この場所を使"
"用して、以前のバージョンから何が変更されたかを説明し、レビュー担当者が何を見"
"ているのかをある程度把握できるようにする必要があります。 CIの実行が完了した"
"ら、 `/submit` でもう一度コメントできます。GitGitGadgetはあなたの変更にv2マー"
"クを自動的に追加します。"

#. type: Title ==
#: ../Documentation-sedout/MyFirstContribution.txt:986
#, no-wrap
msgid "Sending Patches with `git send-email`"
msgstr "Sending Patches with `git send-email`"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:993
msgid ""
"If you don't want to use GitGitGadget, you can also use Git itself to mail "
"your patches. Some benefits of using Git this way include finer grained "
"control of subject line (for example, being able to use the tag [RFC PATCH] "
"in the subject)  and being able to send a ``dry run'' mail to yourself to "
"ensure it all looks good before going out to the list."
msgstr ""
"GitGitGadgetを使用したくない場合は、Git自体を使用してパッチをメールで送信する"
"こともできます。 このようにGitを使用する利点には、件名をよりきめ細かく制御で"
"きること(たとえば、件名に [RFC PATCH]のタグを使用できること)や、メーリングリ"
"ストに投稿する前に自分用の「ドライラン」メールを送ってすべてがうまくいくこと"
"を確認できることがあります。"

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:995
#, no-wrap
msgid "Prerequisite: Setting Up `git send-email`"
msgstr "Prerequisite: Setting Up `git send-email`"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1005
msgid ""
"Configuration for `send-email` can vary based on your operating system and "
"email provider, and so will not be covered in this tutorial, beyond stating "
"that in many distributions of Linux, `git-send-email` is not packaged "
"alongside the typical `git` install. You may need to install this additional "
"package; there are a number of resources online to help you do so. You will "
"also need to determine the right way to configure it to use your SMTP "
"server; again, as this configuration can change significantly based on your "
"system and email setup, it is out of scope for the context of this tutorial."
msgstr ""
"send-email` の設定はオペレーティングシステムやメールプロバイダーによって異な"
"るので、このチュートリアルでは説明しません。 多くのLinuxディストリビューショ"
"ンでは、 `git-send-email` は通常の `git` インストールと一緒にパッケージされて"
"いません。 追加パッケージをインストールする必要があるかもしれません。 オンラ"
"インには、そのためのリソースがたくさんあります。 また、SMTPサーバーを使用する"
"ための正しい設定方法を決定する必要があります。 この設定はシステムやメールの設"
"定によって大きく変わる可能性があるので、このチュートリアルの範囲外です。"

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:1007
#, no-wrap
msgid "Preparing Initial Patchset"
msgstr "Preparing Initial Patchset"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1011
msgid ""
"Sending emails with Git is a two-part process; before you can prepare the "
"emails themselves, you'll need to prepare the patches. Luckily, this is "
"pretty simple:"
msgstr ""
"Gitを使用したメールの送信は2つの部分からなるプロセスです。 メール自体を準備す"
"る前に、パッチを準備する必要があります。 幸いなことに、これは非常に簡単です:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:1014
#, no-wrap
msgid "$ git format-patch --cover-letter -o psuh/ --base=auto psuh@{u}..psuh\n"
msgstr "$ git format-patch --cover-letter -o psuh/ --base=auto psuh@{u}..psuh\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1020
msgid ""
"The `--cover-letter` option tells `format-patch` to create a cover letter "
"template for you. You will need to fill in the template before you're ready "
"to send - but for now, the template will be next to your other patches."
msgstr "`--cover-letter` オプションは、`format-patch` にカバーレターのテンプレート・ファイルを作成するように指示します。 あなたは送信前にテンプレートに記入する必要があります。 しかし、今のところ、そのテンプレート・ファイルは他のパッチ・ファイルと一緒にあります。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1024
msgid ""
"The `-o psuh/` option tells `format-patch` to place the patch files into a "
"directory. This is useful because `git send-email` can take a directory and "
"send out all the patches from there."
msgstr ""
"`-o psuh /` オプションは、パッチファイルをディレクトリに配置するように "
"`format-patch` に指示します。 `git send-email` はディレクトリを取得し、そこか"
"らすべてのパッチを送信できるため、これは便利です。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1031
msgid ""
"The `--base=auto` option tells the command to record the \"base commit\", on "
"which the recipient is expected to apply the patch series.  The `auto` value "
"will cause `format-patch` to compute the base commit automatically, which is "
"the merge base of tip commit of the remote-tracking branch and the specified "
"revision range."
msgstr ""
"`--base=auto` オプションは、受信者が一連のパッチを適用すると予想されるベー"
"ス・コミットを記録するようにコマンドに指示します。 `auto` 値の指定により、 "
"`format-patch` はベース・コミットを自動的に計算します。これは、リモート追跡ブ"
"ランチの先端コミットのマージ・ベースと指定されたリビジョン範囲です。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1039
msgid ""
"The `psuh@{u}..psuh` option tells `format-patch` to generate patches for the "
"commits you created on the `psuh` branch since it forked from its upstream "
"(which is `origin/master` if you followed the example in the \"Set up your "
"workspace\" section).  If you are already on the `psuh` branch, you can just "
"say `@{u}`, which means \"commits on the current branch since it forked from "
"its upstream\", which is the same thing."
msgstr ""
"`psuh@{u}..psuh` オプションは `format-patch` に、上流(「Set up your "
"workspace」セクションの例に従った場合、これは `origin/master` です)から分岐し"
"たので `psuh` ブランチ(訳注: push ではなくて psuh)で作成したコミット用のパッ"
"チを生成するように指示します。 既に `psuh` ブランチにいる場合は、 単に `@{u}"
"` と言うことができます。これは、「上流から分岐したため、現在のブランチでコ"
"ミットする」ことを意味し、同じことを意味します。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1046
msgid ""
"The command will make one patch file per commit. After you run, you can go "
"have a look at each of the patches with your favorite text editor and make "
"sure everything looks alright; however, it's not recommended to make code "
"fixups via the patch file. It's a better idea to make the change the normal "
"way using `git rebase -i` or by adding a new commit than by modifying a "
"patch."
msgstr ""
"このコマンドは、コミットごとに 1 つのパッチ・ファイルを作成します。 実行した"
"後、お気に入りのテキスト・エディタで各パッチを調べて、すべてが適切に表示され"
"ることを確認できます。 ただし、パッチ・ファイルを使用してコードを修正すること"
"はお勧めしません。 パッチを変更するよりも、`git rebase -i` を使用するか、新し"
"いコミットを追加することによって、通常の方法で変更を加える方が良い考えです。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1056
msgid ""
"Optionally, you can also use the `--rfc` flag to prefix your patch subject "
"with ``[RFC PATCH]'' instead of ``[PATCH]''. RFC stands for ``request for "
"comments'' and indicates that while your code isn't quite ready for "
"submission, you'd like to begin the code review process. This can also be "
"used when your patch is a proposal, but you aren't sure whether the "
"community wants to solve the problem with that approach or not - to conduct "
"a sort of design review. You may also see on the list patches marked ``WIP'' "
"- this means they are incomplete but want reviewers to look at what they "
"have so far. You can add this flag with `--subject-prefix=WIP`."
msgstr ""
"オプションで、 `--rfc` フラグを使用して、パッチの件名の前に 「[PATCH]」ではな"
"く「[RFCPATCH]」を付けることもできます。 RFCは「request for comments」の略"
"で、コードを送信する準備が整っていないときに、コードレビュープロセスを開始す"
"ることを示しています。 これは、パッチが提案である場合にも使用できますが、コ"
"ミュニティがそのアプローチで問題を解決したいかどうか、つまり一種の設計レ"
"ビューを実施したいかどうかはわかりません。 「WIP」とマークされたパッチもリス"
"トに表示される場合があります。これは、パッチが不完全であることを意味します"
"が、レビュー担当者にこれまでのパッチを確認してもらいたいことを意味します。 こ"
"のフラグは `--subject-prefix=WIP` で追加できます。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1059
msgid ""
"Check and make sure that your patches and cover letter template exist in the "
"directory you specified - you're nearly ready to send out your review!"
msgstr ""
"パッチとカバーレターのテンプレートが指定したディレクトリに存在することを確認"
"してください。これであなたがレビューを送信する準備がほぼ整いました！"

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:1061
#, no-wrap
msgid "Preparing Email"
msgstr "Preparing Email"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1065
msgid ""
"Since you invoked `format-patch` with `--cover-letter`, you've already got a "
"cover letter template ready. Open it up in your favorite editor."
msgstr ""
"`--cover-letter` を指定して `format-patch` を呼び出したので、カバー・レターの"
"テンプレートは既に用意されています。 それをお気に入りのエディターで開きます。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1069
msgid ""
"You should see a number of headers present already. Check that your `From:` "
"header is correct. Then modify your `Subject:` (see <<cover-letter,above>> "
"for how to choose good title for your patch series):"
msgstr ""
"あなたは既に多数のヘッダーを拝んでいるはずです。 `From:` ヘッダーが正しいこと"
"を確認してください。 その次に、`Subject:` を変更します(パッチシリーズに適切な"
"タイトルを選ぶには、 <<cover-letter,上記>> を参照してください):"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:1072
#, no-wrap
msgid "Subject: [PATCH 0/7] Add the 'psuh' command\n"
msgstr "Subject: [PATCH 0/7] Add the 'psuh' command\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1077
msgid ""
"Make sure you retain the ``[PATCH 0/X]'' part; that's what indicates to the "
"Git community that this email is the beginning of a patch series, and many "
"reviewers filter their email for this type of flag."
msgstr ""
"必ず ”[PATCH 0/X]” の部分を保持してください。 これが、このメールがパッチ・シ"
"リーズの始まりであることをGitコミュニティに示しており、多くのレビュー担当者が"
"このタイプのフラグでメールをフィルタリングしています。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1080
msgid ""
"You'll need to add some extra parameters when you invoke `git send-email` to "
"add the cover letter."
msgstr ""
"あなたはカバーレターを追加するために `git send-email` を呼び出すときに、いく"
"つかの追加パラメーターを追加する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1083
msgid ""
"Next you'll have to fill out the body of your cover letter. Again, see "
"<<cover-letter,above>> for what content to include."
msgstr ""
"次に、カバーレターの本文を記入する必要があります。 繰り返しますが、含める内容"
"については <<cover-letter,above>> を参照してください。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1087
msgid ""
"The template created by `git format-patch --cover-letter` includes a "
"diffstat.  This gives reviewers a summary of what they're in for when "
"reviewing your topic.  The one generated for `psuh` from the sample "
"implementation looks like this:"
msgstr ""
"`git format-patch --cover-letter` によって作成されたテンプレートには、"
"diffstatが含まれています。 これにより、レビュー担当者は、トピックをレビューす"
"るときに何をしているのかを要約できます。 サンプル実装から `psuh` 用に生成され"
"たものは以下のようになります:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:1099
#, no-wrap
msgid ""
" Documentation/git-psuh.txt | 40 +++++++++++++++++++++\n"
" Makefile                   |  1 +\n"
" builtin.h                  |  1 +\n"
" builtin/psuh.c             | 73 ++++++++++++++++++++++++++++++++++++++\n"
" git.c                      |  1 +\n"
" t/t9999-psuh-tutorial.sh   | 12 +++++++\n"
" 6 files changed, 128 insertions(+)\n"
" create mode 100644 Documentation/git-psuh.txt\n"
" create mode 100644 builtin/psuh.c\n"
" create mode 100755 t/t9999-psuh-tutorial.sh\n"
msgstr ""
" Documentation/git-psuh.txt | 40 +++++++++++++++++++++\n"
" Makefile                   |  1 +\n"
" builtin.h                  |  1 +\n"
" builtin/psuh.c             | 73 ++++++++++++++++++++++++++++++++++++++\n"
" git.c                      |  1 +\n"
" t/t9999-psuh-tutorial.sh   | 12 +++++++\n"
" 6 files changed, 128 insertions(+)\n"
" create mode 100644 Documentation/git-psuh.txt\n"
" create mode 100644 builtin/psuh.c\n"
" create mode 100755 t/t9999-psuh-tutorial.sh\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1103
msgid ""
"Finally, the letter will include the version of Git used to generate the "
"patches. You can leave that string alone."
msgstr ""
"最後に、この手紙文にはパッチの生成に使用されたGitのバージョンが含まれます。 "
"この文字列は放っておいても大丈夫です。"

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:1105
#, no-wrap
msgid "Sending Email"
msgstr "Sending Email"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1109
msgid ""
"At this point you should have a directory `psuh/` which is filled with your "
"patches and a cover letter. Time to mail it out! You can send it like this:"
msgstr ""
"この時点で、パッチとカバーレターが入ったディレクトリ `psuh/` が作成されている"
"はずです。 あなたがそれを送信する時が来ました！  あなたは以下のように送信でき"
"ます:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:1112
#, no-wrap
msgid "$ git send-email --to=target@example.com psuh/*.patch\n"
msgstr "$ git send-email --to=target@example.com psuh/*.patch\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1116
msgid ""
"Check `git help send-email` for some other options which you may find "
"valuable, such as changing the Reply-to address or adding more CC and BCC "
"lines."
msgstr ""
"返信先アドレスの変更やCCおよびBCC行の追加など、役立つと思われるその他のオプ"
"ションについては、 `git help send-email` を確認してください。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1120
msgid ""
"When you are sending a real patch, it will go to git@vger.kernel.org - but "
"please don't send your patchset from the tutorial to the real mailing list! "
"For now, you can send it to yourself, to make sure you understand how it "
"will look."
msgstr ""
"実際のパッチを送信する場合、 git@vger.kernel.org に送信されますが、チュートリ"
"アルから実際のメーリングリストにパッチセットを送信しないでください。 今のとこ"
"ろ、それがどのように見えるかを確実に理解するために、それを自分自身に送信する"
"ことができます。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1125
msgid ""
"After you run the command above, you will be presented with an interactive "
"prompt for each patch that's about to go out. This gives you one last chance "
"to edit or quit sending something (but again, don't edit code this way). "
"Once you press `y` or `a` at these prompts your emails will be sent! "
"Congratulations!"
msgstr ""
"あなたが上記のコマンドを実行すると、各パッチが送信されるたびにインタラクティ"
"ブなプロンプトが表示されます。 これにより、何かを編集したり送信をやめたりする"
"最後のチャンスが得られます(ただし、繰り返しになりますが、この方法でコードを編"
"集してはいけません)。 これらのプロンプトで `y` または `a` を押すと、メールが"
"送信されます！ おめでとうございます！"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1128
msgid ""
"Awesome, now the community will drop everything and review your changes. "
"(Just kidding - be patient!)"
msgstr ""
"素晴らしい！これでコミュニティはすべてを捨ててあなたの変更をレビューすること"
"でしょう。 (冗談です、我慢が肝要です)"

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:1130
#, no-wrap
msgid "Sending v2"
msgstr "Sending v2"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1135
msgid ""
"This section will focus on how to send a v2 of your patchset. To learn what "
"should go into v2, skip ahead to <<reviewing,Responding to Reviews>> for "
"information on how to handle comments from reviewers."
msgstr ""
"このセクションでは、あなたのパッチセットの v2 を送信する方法に焦点を当てま"
"す。 v2 に何を含める必要があるかについては、 <<reviewing,Responding to "
"Reviews>> にスキップして、レビュー担当者からのコメントの処理方法を確認してく"
"ださい。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1138
msgid ""
"We'll reuse our `psuh` topic branch for v2. Before we make any changes, "
"we'll mark the tip of our v1 branch for easy reference:"
msgstr ""
"v2 の「psuh」トピック ブランチを再利用します。 変更を加える前に、簡単に参照で"
"きるように v1 ブランチの先端をマークします:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:1142
#, no-wrap
msgid ""
"$ git checkout psuh\n"
"$ git branch psuh-v1\n"
msgstr ""
"$ git checkout psuh\n"
"$ git branch psuh-v1\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1147
msgid ""
"Refine your patch series by using `git rebase -i` to adjust commits based "
"upon reviewer comments. Once the patch series is ready for submission, "
"generate your patches again, but with some new flags:"
msgstr ""
"レビュアーのコメントに基づいてコミットを調整するには、 `git rebase -i` を使用"
"してパッチ・シリーズを改良します。 パッチ・シリーズを送信する準備ができたら、"
"パッチを再度生成しますが、いくつかの新しいフラグを使用します:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:1150
#, no-wrap
msgid "$ git format-patch -v2 --cover-letter -o psuh/ --range-diff master..psuh-v1 master..\n"
msgstr "$ git format-patch -v2 --cover-letter -o psuh/ --range-diff master..psuh-v1 master..\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1156
msgid ""
"The `--range-diff master..psuh-v1` parameter tells `format-patch` to include "
"a range-diff between `psuh-v1` and `psuh` in the cover letter (see linkgit:"
"git-range-diff[1]). This helps tell reviewers about the differences between "
"your v1 and v2 patches."
msgstr ""
"`--range-diff master..psuh-v1` パラメータは、カバー・レターに `psuh-v1` と "
"`psuh` の間の範囲差分(range-diff)を含めるように `format-patch` に指示します "
"(linkgit:git-range-diff[1] 参照)。 これは、v1 パッチと v2 パッチの違いをレ"
"ビュアーに伝えるのに役立ちます。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1162
msgid ""
"The `-v2` parameter tells `format-patch` to output your patches as version "
"\"2\". For instance, you may notice that your v2 patches are all named like "
"`v2-000n-my-commit-subject.patch`. `-v2` will also format your patches by "
"prefixing them with \"[PATCH v2]\" instead of \"[PATCH]\", and your range-"
"diff will be prefaced with \"Range-diff against v1\"."
msgstr ""
"`-v2` パラメータは、パッチをバージョン「2」として出力するように `format-"
"patch` に指示します。 たとえば、v2 パッチはすべて `v2-000n-my-commit-subject."
"patch` のような名前になっていることに気付くかもしれません。 `-v2` は、"
"`[PATCH]` の代わりに `[PATCH v2]` をプレフィックスとしてパッチをフォーマット"
"し、 range-diff は `Range-diff against v1` で始まります。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1168
msgid ""
"After you run this command, `format-patch` will output the patches to the "
"`psuh/` directory, alongside the v1 patches. Using a single directory makes "
"it easy to refer to the old v1 patches while proofreading the v2 patches, "
"but you will need to be careful to send out only the v2 patches. We will use "
"a pattern like `psuh/v2-*.patch` (not `psuh/*.patch`, which would match v1 "
"and v2 patches)."
msgstr ""
"このコマンドを実行すると、 `format-patch` は v1 パッチと一緒に `psuh/` ディレ"
"クトリにパッチを出力します。 単一のディレクトリを使用すると、v2 パッチを校正"
"しながら古い v1 パッチを簡単に参照できますが、v2 パッチのみを送信するように注"
"意する必要があります。  `psuh/v2-*.patch` のようなパターンを使用します (v1 お"
"よび v2 パッチに一致する `psuh/*.patch` ではありません)。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1173
msgid ""
"Edit your cover letter again. Now is a good time to mention what's different "
"between your last version and now, if it's something significant. You do not "
"need the exact same body in your second cover letter; focus on explaining to "
"reviewers the changes you've made that may not be as visible."
msgstr ""
"カバーレターをもう一度編集します。 何か重要なことがあれば、今が前回のバージョ"
"ンと現在のバージョンの違いについて言及する良い機会です。 2番目のカバーレター"
"にまったく同じ本文は必要ありません。 レビューアの目に見えない可能性のある変更"
"を説明することに焦点を当てます。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1180
msgid ""
"You will also need to go and find the Message-ID of your previous cover "
"letter.  You can either note it when you send the first series, from the "
"output of `git send-email`, or you can look it up on the https://lore.kernel."
"org/git[mailing list]. Find your cover letter in the archives, click on it, "
"then click \"permalink\" or \"raw\" to reveal the Message-ID header. It "
"should match:"
msgstr "また、あなたはカバーレターのメッセージ ID を見つけなければなりません。 最初のシリーズを送信するときに `git send-email` の出力をメモしておくができますし、 https://lore.kernel.org/git[mailing list] で調べることもできます。アーカイブでカバーレターを見つてクリックし、 そして \"permalink\" または \"raw\" をクリックすると、 以下のような Message-ID ヘッダーが表示されます:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:1183
#, no-wrap
msgid "Message-ID: <foo.12345.author@example.com>\n"
msgstr "Message-ID: <foo.12345.author@example.com>\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1189
msgid ""
"Your Message-ID is `<foo.12345.author@example.com>`. This example will be "
"used below as well; make sure to replace it with the correct Message-ID for "
"your **previous cover letter** - that is, if you're sending v2, use the "
"Message-ID from v1; if you're sending v3, use the Message-ID from v2."
msgstr "あなたのメッセージIDは `<foo.12345.author@example.com>` です。 この文章では以降、この例を使います。 **previous cover letter** を正しいメッセージIDに置き換えてください。つまり、v2を送信する場合は、v1からのMessage-IDを使用します。 v3を送信する場合は、v2からのMessage-Idを使用します。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1194
msgid ""
"While you're looking at the email, you should also note who is CC'd, as it's "
"common practice in the mailing list to keep all CCs on a thread. You can add "
"these CC lines directly to your cover letter with a line like so in the "
"header (before the Subject line):"
msgstr ""
"メーリングリストではすべてのCCをスレッドに保持するのが一般的であるため、電子"
"メールを見ている間、誰がCCされているかにも注意する必要があります。 これらのCC"
"行は、ヘッダー(件名行の前)に以下のような行を使用して、カバーレターに直接追加"
"できます:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:1197
#, no-wrap
msgid "CC: author@example.com, Othe R <other@example.com>\n"
msgstr "CC: author@example.com, Othe R <other@example.com>\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1201
msgid ""
"Now send the emails again, paying close attention to which messages you pass "
"in to the command:"
msgstr ""
"コマンドに渡すメッセージに細心の注意を払いながら、もう一度メールを送信します:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:1206
#, no-wrap
msgid ""
"$ git send-email --to=target@example.com\n"
"\t\t --in-reply-to=\"<foo.12345.author@example.com>\"\n"
"\t\t psuh/v2-*.patch\n"
msgstr ""
"$ git send-email --to=target@example.com\n"
"\t\t --in-reply-to=\"<foo.12345.author@example.com>\"\n"
"\t\t psuh/v2-*.patch\n"

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:1209
#, no-wrap
msgid "Bonus Chapter: One-Patch Changes"
msgstr "Bonus Chapter: One-Patch Changes"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1218
msgid ""
"In some cases, your very small change may consist of only one patch. When "
"that happens, you only need to send one email. Your commit message should "
"already be meaningful and explain at a high level the purpose (what is "
"happening and why)  of your patch, but if you need to supply even more "
"context, you can do so below the `---` in your patch. Take the example "
"below, which was generated with `git format-patch` on a single commit, and "
"then edited to add the content between the `---` and the diffstat."
msgstr ""
"場合によっては、あなたのごくわずかな変更が1つのパッチのみで構成されていること"
"があります。 その場合、送信する必要があるのは1通のメールだけです。 コミット"
"メッセージはすでに意味があり、パッチの目的(何が起こっているのか、その理由)を"
"高レベルで説明しているはずですが、さらに多くのコンテキストを提供する必要があ"
"る場合は、パッチの `---` の下で行うことができます。 以下の例を見てください。"
"これは、1回のコミットで `git format-patch` を使用して生成され、編集されて、 "
"`---` とdiffstatの間にコンテンツが追加されています。"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:1224
#, no-wrap
msgid ""
"From 1345bbb3f7ac74abde040c12e737204689a72723 Mon Sep 17 00:00:00 2001\n"
"From: A U Thor <author@example.com>\n"
"Date: Thu, 18 Apr 2019 15:11:02 -0700\n"
"Subject: [PATCH] README: change the grammar\n"
msgstr ""
"From 1345bbb3f7ac74abde040c12e737204689a72723 Mon Sep 17 00:00:00 2001\n"
"From: A U Thor <author@example.com>\n"
"Date: Thu, 18 Apr 2019 15:11:02 -0700\n"
"Subject: [PATCH] README: change the grammar\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:1227
#, no-wrap
msgid ""
"I think it looks better this way. This part of the commit message will\n"
"end up in the commit-log.\n"
msgstr ""
"I think it looks better this way. This part of the commit message will\n"
"end up in the commit-log.\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:1229
#, no-wrap
msgid ""
"Signed-off-by: A U Thor <author@example.com>\n"
"---\n"
msgstr ""
"Signed-off-by: A U Thor <author@example.com>\n"
"---\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:1235
msgid ""
"Let's have a wild discussion about grammar on the mailing list. This part of "
"my email will never end up in the commit log. Here is where I can add "
"additional context to the mailing list about my intent, outside of the "
"context of the commit log. This section was added after `git format-patch` "
"was run, by editing the patch file in a text editor."
msgstr ""
"Let's have a wild discussion about grammar on the mailing list. This part of "
"my email will never end up in the commit log. Here is where I can add "
"additional context to the mailing list about my intent, outside of the "
"context of the commit log. This section was added after `git format-patch` "
"was run, by editing the patch file in a text editor."

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:1238
#, no-wrap
msgid ""
" README.md | 2 +-\n"
" 1 file changed, 1 insertion(+), 1 deletion(-)\n"
msgstr ""
" README.md | 2 +-\n"
" 1 file changed, 1 insertion(+), 1 deletion(-)\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:1246
#, no-wrap
msgid ""
"diff --git a/README.md b/README.md\n"
"index 88f126184c..38da593a60 100644\n"
"--- a/README.md\n"
"+++ b/README.md\n"
"@@ -3,7 +3,7 @@\n"
" Git - fast, scalable, distributed revision control system\n"
" =========================================================\n"
msgstr ""
"diff --git a/README.md b/README.md\n"
"index 88f126184c..38da593a60 100644\n"
"--- a/README.md\n"
"+++ b/README.md\n"
"@@ -3,7 +3,7 @@\n"
" Git - fast, scalable, distributed revision control system\n"
" =========================================================\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:1251
#, no-wrap
msgid ""
"-Git is a fast, scalable, distributed revision control system with an\n"
"+Git is a fast, scalable, and distributed revision control system with an\n"
" unusually rich command set that provides both high-level operations\n"
" and full access to internals.\n"
msgstr ""
"-Git is a fast, scalable, distributed revision control system with an\n"
"+Git is a fast, scalable, and distributed revision control system with an\n"
" unusually rich command set that provides both high-level operations\n"
" and full access to internals.\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:1252
#, no-wrap
msgid "--\n"
msgstr "--\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstContribution.txt:1254
msgid "2.21.0.392.gf8f6787159e-goog"
msgstr "2.21.0.392.gf8f6787159e-goog"

#. type: Title ==
#: ../Documentation-sedout/MyFirstContribution.txt:1257
#, no-wrap
msgid "My Patch Got Emailed - Now What?"
msgstr "My Patch Got Emailed - Now What?"

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:1260
#, no-wrap
msgid "Responding to Reviews"
msgstr "Responding to Reviews"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1264
msgid ""
"After a few days, you will hopefully receive a reply to your patchset with "
"some comments. Woohoo! Now you can get back to work."
msgstr "うまくいけば、数日後にはあなたのパッチセットへのコメント付きの返信が届くことでしょう。 やったね！ まぁともあれ、これであなたは本来の作業に戻ることができます。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1270
msgid ""
"It's good manners to reply to each comment, notifying the reviewer that you "
"have made the change suggested, feel the original is better, or that the "
"comment inspired you to do something a new way which is superior to both the "
"original and the suggested change. This way reviewers don't need to inspect "
"your v2 to figure out whether you implemented their comment or not."
msgstr "それぞれのコメントには、提案された変更を行ったこと、オリジナルの方が良いと思ったこと、あるいはコメントによって新しい方法を思いついたこと(オリジナルと提案された変更の両方が優れている) をレビュアーに知らせるのが良いマナーです。こうすることで、査読者は、あなたがコメントした事を実装したかどうかを判断するために、あなたのV2を検査する必要がなくなります。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1276
msgid ""
"Reviewers may ask you about what you wrote in the patchset, either in the "
"proposed commit log message or in the changes themselves.  You should answer "
"these questions in your response messages, but often the reason why "
"reviewers asked these questions to understand what you meant to write is "
"because your patchset needed clarification to be understood."
msgstr ""
"査読者は、提案されたコミットログメッセージまたは変更自体のいずれかで、パッチ"
"セットに何を書き込んだかについて質問する場合があります。 応答メッセージでこれ"
"らの質問に答える必要がありますが、多くの場合、レビュー担当者が、あなたが何を"
"書くつもりかを理解するためにこれらの質問をした理由は、パッチセットを理解する"
"ために説明が必要だったためです。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1284
msgid ""
"Do not be satisfied by just answering their questions in your response and "
"hear them say that they now understand what you wanted to say.  Update your "
"patches to clarify the points reviewers had trouble with, and prepare your "
"v2; the words you used to explain your v1 to answer reviewers' questions may "
"be useful thing to use.  Your goal is to make your v2 clear enough so that "
"it becomes unnecessary for you to give the same explanation to the next "
"person who reads it."
msgstr ""
"レビュアーの質問に答えて、レビュアーが「言いたいことがわかった」と言うだけ"
"で、満足してはいけないのです。 レビュアーが困っている点を明確にするためにパッ"
"チを更新し、v2を準備します。v1でレビュアーからの質問に答えるために使った言葉"
"が、役に立つかもしれません。 あなたの目標は、v2を十分に明確にして、次に読む人"
"に同じ説明をする必要がなくなるようにすることです。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1294
msgid ""
"If you are going to push back on a comment, be polite and explain why you "
"feel your original is better; be prepared that the reviewer may still "
"disagree with you, and the rest of the community may weigh in on one side or "
"the other. As with all code reviews, it's important to keep an open mind to "
"doing something a different way than you originally planned; other reviewers "
"have a different perspective on the project than you do, and may be thinking "
"of a valid side effect which had not occurred to you. It is always okay to "
"ask for clarification if you aren't sure why a change was suggested, or what "
"the reviewer is asking you to do."
msgstr "コメントに対して反論する場合は、礼儀正しく、なぜあなたのオリジナルの方が良いと思うのかを説明します。レビュアーがまだあなたに同意しないかもしれないことや、コミュニティの他のメンバーが双方の側に意見するかもしれないことを覚悟してください。他のレビュアーは、あなたとは異なる視点でプロジェクトを見ており、あなたには思いもよらなかったような副作用について考えているかもしれません。なぜその変更が提案されたのか、あるいは査読者があなたに何を求めているのかがわからない場合は、いつでも説明を求めてかまいません。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1301
msgid ""
"Make sure your email client has a plaintext email mode and it is turned on; "
"the Git list rejects HTML email. Please also follow the mailing list "
"etiquette outlined in the https://kernel.googlesource.com/pub/scm/git/git/+/"
"todo/MaintNotes[Maintainer's Note], which are similar to etiquette rules in "
"most open source communities surrounding bottom-posting and inline replies."
msgstr ""
"あなたの電子メールクライアントにプレーンテキストの電子メールモードがあり、オ"
"ンになっていることを確認してください。 GitメーリングリストはHTMLメールを拒否"
"します。 https://kernel.googlesource.com/pub/scm/git/git/+/todo/"
"MaintNotes[Maintainer's Note] で概説されているメーリングリストのエチケットに"
"も従ってください。 これは、ボトムポストやインラインリプライに関するほとんどの"
"オープンソースコミュニティのエチケットルールに似ています。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1313
msgid ""
"When you're making changes to your code, it is cleanest - that is, the "
"resulting commits are easiest to look at - if you use `git rebase -i` "
"(interactive rebase). Take a look at this https://www.oreilly.com/library/"
"view/git-pocket-guide/9781449327507/ch10.html[overview] from O'Reilly. The "
"general idea is to modify each commit which requires changes; this way, "
"instead of having a patch A with a mistake, a patch B which was fine and "
"required no upstream reviews in v1, and a patch C which fixes patch A for "
"v2, you can just ship a v2 with a correct patch A and correct patch B. This "
"is changing history, but since it's local history which you haven't shared "
"with anyone, that is okay for now! (Later, it may not make sense to do this; "
"take a look at the section below this one for some context.)"
msgstr ""
"コードに変更を加える場合、 `git rebase -i` (対話的リベース)を使用すると、最も"
"クリーンになります。つまり、結果のコミットが最も見やすくなります。 O'Reilly"
"の https://www.oreilly.com/library/view/git-pocket-guide/9781449327507/ch10."
"html[overview] ご覧ください。 一般的な考え方は、変更が必要な各コミットを変更"
"することです。 このようにすると、v1では間違いのあるパッチAと、問題なく上流の"
"レビューも必要ないパッチBと、v2ではパッチAを修正したパッチC、を用意する代わり"
"に、正しいパッチAと正しいパッチBでv2を出荷すればいいのです。これは履歴を変更"
"していますが、誰とも共有していないローカル履歴なので、今のところは問題ありま"
"せん。 (後でこれを行うのは意味がない場合があります。コンテキストについては、"
"次のセクションを参照してください。)"

#. type: Title ===
#: ../Documentation-sedout/MyFirstContribution.txt:1315
#, no-wrap
msgid "After Review Approval"
msgstr "After Review Approval"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1326
msgid ""
"The Git project has four integration branches: `seen`, `next`, `master`, and "
"`maint`. Your change will be placed into `seen` fairly early on by the "
"maintainer while it is still in the review process; from there, when it is "
"ready for wider testing, it will be merged into `next`. Plenty of early "
"testers use `next` and may report issues. Eventually, changes in `next` will "
"make it to `master`, which is typically considered stable. Finally, when a "
"new release is cut, `maint` is used to base bugfixes onto. As mentioned at "
"the beginning of this document, you can read `Documents/SubmittingPatches` "
"for some more info about the use of the various integration branches."
msgstr "Gitプロジェクトには、 `seen` と `next` と `master` と `maint` の4つの統合ブランチがあります。 変更は、レビュープロセスの途中で、メンテナによってかなり早い段階で「seen」(表示)されます。 そこから、より広範なテストの準備ができたら、`next` にマージされます。 多くの初期のテスターは `next` を使用し、問題を報告する可能性があります。 最終的に、 `next` を変更すると、通常は安定していると見なされる `master` になります。 最後に、新しいリリースが出ると、 `maint` がバグ修正のベースとして使用されます。 このドキュメントの冒頭で述べたように、さまざまな統合ブランチの使用に関する詳細については、「Documents/SubmittingPatches」を参照してください。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1330
msgid ""
"Back to now: your code has been lauded by the upstream reviewers. It is "
"perfect.  It is ready to be accepted. You don't need to do anything else; "
"the maintainer will merge your topic branch to `next` and life is good."
msgstr "話を戻します。 今や、 あなたのコードは上流のレビューアから賞賛されています。 あなたのコードは完璧で、 受け入れられる準備ができています。 他に何もする必要はありません。 メンテナはトピックブランチを `next` にマージし、最高な気分ですおすし。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1333
msgid ""
"However, if you discover it isn't so perfect after this point, you may need "
"to take some special steps depending on where you are in the process."
msgstr ""
"しかしながら、この時点以降に完全ではないことにあなたが気付いた場合は、あなた"
"がプロセスのどこにいるかに応じて、いくつかの特別な手順を実行する必要がありま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1339
msgid ""
"If the maintainer has announced in the \"What's cooking in git.git\" email "
"that your topic is marked for `next` - that is, that they plan to merge it "
"to `next` but have not yet done so - you should send an email asking the "
"maintainer to wait a little longer: \"I've sent v4 of my series and you "
"marked it for `next`, but I need to change this and that - please wait for "
"v5 before you merge it.\""
msgstr ""
"メンテナが「What's cooking in git.git」メールで、あなたのトピックに「next」の"
"マークが付けられていることを発表した場合、つまり、トピックを「next」にマージ"
"する予定であるが、まだマージしていない場合は、 メンテナにもう少し待つように依"
"頼するメールを送るべきです: 「シリーズのv4を送信し、 `next` のマークを付けま"
"したが、これを変更する必要があります。v5を待ってからマージしてください。」"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1345
msgid ""
"If the topic has already been merged to `next`, rather than modifying your "
"patches with `git rebase -i`, you should make further changes incrementally "
"- that is, with another commit, based on top of the maintainer's topic "
"branch as detailed in https://github.com/gitster/git. Your work is still in "
"the same topic but is now incremental, rather than a wholesale rewrite of "
"the topic branch."
msgstr ""
"トピックがすでに `next` にマージされている場合は、`git rebase -i` でパッチを"
"修正するのではなく、インクリメンタルに、つまり https://github.com/gitster/"
"git にあるようにメンテナのトピックブランチを基点として別のコミットで変更を加"
"えてください。 あなたの仕事はまだ同じトピックにありますが、トピックブランチの"
"大規模な書き直しではなく、インクリメンタルになっています。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1349
msgid ""
"The topic branches in the maintainer's GitHub are mirrored in GitGitGadget, "
"so if you're sending your reviews out that way, you should be sure to open "
"your PR against the appropriate GitGitGadget/Git branch."
msgstr ""
"メンテナのGitHubのトピックブランチはGitGitGadgetにミラーリングされているた"
"め、レビューをそのように送信する場合は、適切なGitGitGadget/Gitブランチに対し"
"てPRを開く必要があります。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstContribution.txt:1352
msgid ""
"If you're using `git send-email`, you can use it the same way as before, but "
"you should generate your diffs from `<topic>..<mybranch>` and base your work "
"on `<topic>` instead of `master`."
msgstr ""
"`git send-email` を使用している場合は、以前と同じように使用できますが、 "
"`<topic>..<mybranch>` からdiffを生成し、 `master` の代わりに `<topic>` に基づ"
"いて作業する必要があります。"
