# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 0.0\n"
"POT-Creation-Date: 2021-11-04 04:38+0900\n"
"PO-Revision-Date: 2022-03-22 21:00+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/githooks.txt:2
#, no-wrap
msgid "githooks(5)"
msgstr "githooks(5)"

#. type: Title -
#: ../Documentation-sedout/githooks.txt:5
#, no-wrap
msgid "NAME"
msgstr "NAME"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:7
msgid "githooks - Hooks used by Git"
msgstr "githooks - Gitで使われるフック"

#. type: Title -
#: ../Documentation-sedout/githooks.txt:9
#, no-wrap
msgid "SYNOPSIS"
msgstr "SYNOPSIS"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:11
msgid "$GIT_DIR/hooks/* (or \\`git config core.hooksPath`/*)"
msgstr "$GIT_DIR/hooks/* (or \\`git config core.hooksPath`/*)"

#. type: Title -
#: ../Documentation-sedout/githooks.txt:14
#, no-wrap
msgid "DESCRIPTION"
msgstr "DESCRIPTION"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:19
msgid ""
"Hooks are programs you can place in a hooks directory to trigger actions at "
"certain points in git's execution. Hooks that don't have the executable bit "
"set are ignored."
msgstr "フック(hook)は、フックディレクトリ(hooks directory)に配置して、gitの実行の特定の時点でアクションをトリガーできるプログラムです。実行可能ビットが設定されていないフックは無視されます。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:23
msgid ""
"By default the hooks directory is `$GIT_DIR/hooks`, but that can be changed "
"via the `core.hooksPath` configuration variable (see linkgit:git-config[1])."
msgstr "デフォルトでは、フックディレクトリ(ooks directory)は `$GIT_DIR/hooks` ですが、これは `core.hooksPath` 構成変数を介して変更できます(linkgit:git-config[1] を参照)。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:29
msgid ""
"Before Git invokes a hook, it changes its working directory to either "
"$GIT_DIR in a bare repository or the root of the working tree in a non-bare "
"repository. An exception are hooks triggered during a push ('pre-receive', "
"'update', 'post-receive', 'post-update', 'push-to-checkout') which are "
"always executed in $GIT_DIR."
msgstr "Gitはフックを呼び出す前に、ベアリポジトリでは作業ディレクトリを $GIT_DIRに変更し、非ベアリポジトリではの作業ディレクトリを作業ツリーのルートに変更します。例外は、プッシュ中にトリガーされるフック('pre-receive' 、'update' 、'post-receive' 、'post-update' 、'push-to-checkout')で、常に $GIT_DIR で実行されます。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:33
msgid ""
"Hooks can get their arguments via the environment, command-line arguments, "
"and stdin. See the documentation for each hook below for details."
msgstr "フックは、環境変数やコマンドライン引数やstdinを介して引数を取得できます。詳細については、以下の各フックのドキュメントを参照してください。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:39
msgid ""
"`git init` may copy hooks to the new repository, depending on its "
"configuration. See the \"TEMPLATE DIRECTORY\" section in linkgit:git-init[1] "
"for details. When the rest of this document refers to \"default hooks\" it's "
"talking about the default template shipped with Git."
msgstr "`git init` は、その構成に応じて、フックを新しいリポジトリにコピーする場合があります。詳細については、 linkgit:git-init[1] の「TEMPLAT EDIRECTORY」セクションを参照してください。このドキュメントの残りの部分で「デフォルトのフック」について言及している場合は、Gitに付属しているデフォルトのテンプレートについて説明しています。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:41
msgid "The currently supported hooks are described below."
msgstr "現在サポートされているフックを以下に説明します。"

#. type: Title -
#: ../Documentation-sedout/githooks.txt:43
#, no-wrap
msgid "HOOKS"
msgstr "HOOKS"

#. type: Title ~
#: ../Documentation-sedout/githooks.txt:46
#, no-wrap
msgid "applypatch-msg"
msgstr "applypatch-msg"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:52
msgid ""
"This hook is invoked by linkgit:git-am[1].  It takes a single parameter, the "
"name of the file that holds the proposed commit log message.  Exiting with a "
"non-zero status causes `git am` to abort before applying the patch."
msgstr "このフックは linkgit:git-am[1] によって呼び出されます。単一のパラメータとして、提案するコミットログメッセージを保持するファイルの名前を取ります。ゼロ以外のステータスで終了すると、パッチを適用する前に `git am` が中止されます。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:57
#: ../Documentation-sedout/githooks.txt:165
msgid ""
"The hook is allowed to edit the message file in place, and can be used to "
"normalize the message into some project standard format. It can also be used "
"to refuse the commit after inspecting the message file."
msgstr "フックを使用すると、メッセージファイルを所定の場所で編集でき、メッセージをプロジェクトの標準形式に正規化するために使用できます。 また、メッセージファイルを検査した後にコミットを拒否するために使用することもできます。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:60
msgid ""
"The default 'applypatch-msg' hook, when enabled, runs the 'commit-msg' hook, "
"if the latter is enabled."
msgstr "デフォルトの `applypatch-msg` フックが有効になっている場合に `commit-msg` フックが有効になっていれば、 `commit-msg` フックを実行します。"

#. type: Title ~
#: ../Documentation-sedout/githooks.txt:62
#, no-wrap
msgid "pre-applypatch"
msgstr "pre-applypatch"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:66
msgid ""
"This hook is invoked by linkgit:git-am[1].  It takes no parameter, and is "
"invoked after the patch is applied, but before a commit is made."
msgstr "このフックは linkgit:git-am[1] によって呼び出されます。これはパラメーターを受け取らず、パッチが適用された後、コミットが行われる前に呼び出されます。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:69
msgid ""
"If it exits with non-zero status, then the working tree will not be "
"committed after applying the patch."
msgstr "これがゼロ以外のステータスで終了する場合、パッチの適用後に作業ツリーはコミットされません。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:72
msgid ""
"It can be used to inspect the current working tree and refuse to make a "
"commit if it does not pass certain test."
msgstr "現在の作業ツリーを検査し、特定のテストに合格しない場合はコミットを拒否するために使用できます。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:75
msgid ""
"The default 'pre-applypatch' hook, when enabled, runs the 'pre-commit' hook, "
"if the latter is enabled."
msgstr "デフォルトの `pre-applypatch` フックが有効になっている場合に `pre-commit` フックが有効になっている場合は、 `pre-commit` フックが実行されます。"

#. type: Title ~
#: ../Documentation-sedout/githooks.txt:77
#, no-wrap
msgid "post-applypatch"
msgstr "post-applypatch"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:81
msgid ""
"This hook is invoked by linkgit:git-am[1].  It takes no parameter, and is "
"invoked after the patch is applied and a commit is made."
msgstr "このフックは linkgit:git-am[1] によって呼び出されます。これはパラメーターを受け取らず、パッチが適用されてコミットが行われた後に呼び出されます。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:84
msgid ""
"This hook is meant primarily for notification, and cannot affect the outcome "
"of `git am`."
msgstr "このフックは主に通知用であり、 `git am` の結果に影響を与えることはできません。"

#. type: Title ~
#: ../Documentation-sedout/githooks.txt:86
#, no-wrap
msgid "pre-commit"
msgstr "pre-commit"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:93
msgid ""
"This hook is invoked by linkgit:git-commit[1], and can be bypassed with the "
"`--no-verify` option.  It takes no parameters, and is invoked before "
"obtaining the proposed commit log message and making a commit.  Exiting with "
"a non-zero status from this script causes the `git commit` command to abort "
"before creating a commit."
msgstr "このフックは linkgit:git-commit[1] によって呼び出され、 `--no-verify` オプションでバイパスできます。パラメータを必要とせず、提案したコミットログメッセージを取得してコミットする前に呼び出されます。このスクリプトをゼロ以外のステータスで終了すると、コミットを作成する前に `git commit` コマンドが中止(abort)されます。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:97
msgid ""
"The default 'pre-commit' hook, when enabled, catches introduction of lines "
"with trailing whitespaces and aborts the commit when such a line is found."
msgstr "デフォルトの `pre-commit` フックを有効にすると、末尾に空白がある行の導入をキャッチし、そのような行が見つかるとコミットを中止(abort)します。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:101
msgid ""
"All the `git commit` hooks are invoked with the environment variable "
"`GIT_EDITOR=:` if the command will not bring up an editor to modify the "
"commit message."
msgstr "すべての `git commit` フックは環境変数 $GIT_EDITOR を `GIT_EDITOR=:` とすれば、 コミットメッセージを変更するためのエディターを起動しません。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:105
msgid ""
"The default 'pre-commit' hook, when enabled--and with the `hooks."
"allownonascii` config option unset or set to false--prevents the use of non-"
"ASCII filenames."
msgstr "デフォルトの `pre-commit` フックが有効になっていて、かつ、 `hooks.allownonascii` 構成オプションが設定されていないかfalseに設定されている場合、非ASCIIファイル名の使用を防止します。"

#. type: Title ~
#: ../Documentation-sedout/githooks.txt:107
#, no-wrap
msgid "pre-merge-commit"
msgstr "pre-merge-commit"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:115
msgid ""
"This hook is invoked by linkgit:git-merge[1], and can be bypassed with the "
"`--no-verify` option.  It takes no parameters, and is invoked after the "
"merge has been carried out successfully and before obtaining the proposed "
"commit log message to make a commit.  Exiting with a non-zero status from "
"this script causes the `git merge` command to abort before creating a commit."
msgstr "このフックは linkgit:git-merge[1] によって呼び出され、 `--no-verify` オプションでバイパスできます。パラメータを必要とせず、マージが正常に実行された後、提案したコミットログメッセージを取得してコミットする前に呼び出されます。このスクリプトをゼロ以外のステータスで終了すると、コミットを作成する前に `git merge` コマンドが中止(abort)されます。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:118
msgid ""
"The default 'pre-merge-commit' hook, when enabled, runs the 'pre-commit' "
"hook, if the latter is enabled."
msgstr "デフォルトの `pre-merge-commit` フックが有効になっている場合に `pre-commit` フック後者が有効になっている場合は、 `pre-commit` フックが実行されます。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:122
msgid ""
"This hook is invoked with the environment variable `GIT_EDITOR=:` if the "
"command will not bring up an editor to modify the commit message."
msgstr "このフックは環境変数 $GIT_EDITOR を `GIT_EDITOR=:` とすれば、 コミットメッセージを変更するためのエディターを起動しません。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:127
msgid ""
"If the merge cannot be carried out automatically, the conflicts need to be "
"resolved and the result committed separately (see linkgit:git-merge[1]). At "
"that point, this hook will not be executed, but the 'pre-commit' hook will, "
"if it is enabled."
msgstr "マージを自動的に実行できない場合は、競合を解決し、結果を個別にコミットする必要があります(linkgit:git-merge[1] 参照)。その時点では、このフックは実行されませんが、 `pre-commit` が有効になっている場合は `pre-commit` フックが実行されます。"

#. type: Title ~
#: ../Documentation-sedout/githooks.txt:129
#, no-wrap
msgid "prepare-commit-msg"
msgstr "prepare-commit-msg"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:133
msgid ""
"This hook is invoked by linkgit:git-commit[1] right after preparing the "
"default log message, and before the editor is started."
msgstr "このフックは、デフォルトのログメッセージを準備した直後、エディターを起動する前に、 linkgit:git-commit[1] によって呼び出されます。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:142
msgid ""
"It takes one to three parameters.  The first is the name of the file that "
"contains the commit log message.  The second is the source of the commit "
"message, and can be: `message` (if a `-m` or `-F` option was given); "
"`template` (if a `-t` option was given or the configuration option `commit."
"template` is set); `merge` (if the commit is a merge or a `.git/MERGE_MSG` "
"file exists); `squash` (if a `.git/SQUASH_MSG` file exists); or `commit`, "
"followed by a commit object name (if a `-c`, `-C` or `--amend` option was "
"given)."
msgstr "1つから3つのパラメーターを取ります。 1つ目は、内容がコミットログメッセージであるファイルの名前です。2番目はコミットメッセージのソースであり、`message`(`-m` または `-F` オプションが指定された場合)、 `template`( `-t` オプションが指定された場合、または構成オプション `commit.template` が設定されている場合)、 `merge`(コミットがマージであるか、 `.git/MERGE_MSG` ファイルが存在する場合)、 `squash`( `.git/SQUASH_MSG` ファイルが存在する場合)、または `commit`( `-c` または `-C` または `--amend` オプションが指定された場合)に続いて(3つ目のパラメータとして) commitオブジェクト名。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:144
msgid "If the exit status is non-zero, `git commit` will abort."
msgstr "終了ステータスがゼロ以外の場合、 `git commit` は中止(abort)されます。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:149
msgid ""
"The purpose of the hook is to edit the message file in place, and it is not "
"suppressed by the `--no-verify` option.  A non-zero exit means a failure of "
"the hook and aborts the commit.  It should not be used as replacement for "
"pre-commit hook."
msgstr "フックの目的は、メッセージファイルを所定の位置で編集することであり、 `--no-verify` オプションによって抑制されることはありません。ゼロ以外ステータスでの終了は、フックの失敗を意味し、コミットを中止(abort)します。pre-commitフックの代わりとして使用すべきではありません。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:152
msgid ""
"The sample `prepare-commit-msg` hook that comes with Git removes the help "
"message found in the commented portion of the commit template."
msgstr "Gitに付属するサンプルの `prepare-commit-msg` フックは、コミットテンプレートのコメント部分にあるヘルプメッセージを削除します。"

#. type: Title ~
#: ../Documentation-sedout/githooks.txt:154
#, no-wrap
msgid "commit-msg"
msgstr "commit-msg"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:160
msgid ""
"This hook is invoked by linkgit:git-commit[1] and linkgit:git-merge[1], and "
"can be bypassed with the `--no-verify` option.  It takes a single parameter, "
"the name of the file that holds the proposed commit log message.  Exiting "
"with a non-zero status causes the command to abort."
msgstr "このフックは linkgit:git-commit[1] と linkgit:git-merge[1] によって呼び出され、 `--no-verify` オプションでバイパスできます。単一のパラメータとして提案されたコミットログメッセージを保持するファイルの名前を取ります。ゼロ以外のステータスで終了すると、コマンドは中止(abort)されます。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:168
msgid ""
"The default 'commit-msg' hook, when enabled, detects duplicate `Signed-off-"
"by` trailers, and aborts the commit if one is found."
msgstr "デフォルトの `commit-msg` フックを有効にすると、重複する `Signed-off-by` トレーラーが検出され、見つかった場合はコミットが中止(abort)されます。"

#. type: Title ~
#: ../Documentation-sedout/githooks.txt:170
#, no-wrap
msgid "post-commit"
msgstr "post-commit"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:174
msgid ""
"This hook is invoked by linkgit:git-commit[1]. It takes no parameters, and "
"is invoked after a commit is made."
msgstr "このフックは linkgit:git-commit[1] によって呼び出されます。パラメータを必要とせず、コミットが行われた後に呼び出されます。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:177
msgid ""
"This hook is meant primarily for notification, and cannot affect the outcome "
"of `git commit`."
msgstr "このフックは主に通知用であり、 `git commit` の結果に影響を与えることはできません。"

#. type: Title ~
#: ../Documentation-sedout/githooks.txt:179
#, no-wrap
msgid "pre-rebase"
msgstr "pre-rebase"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:186
msgid ""
"This hook is called by linkgit:git-rebase[1] and can be used to prevent a "
"branch from getting rebased.  The hook may be called with one or two "
"parameters.  The first parameter is the upstream from which the series was "
"forked.  The second parameter is the branch being rebased, and is not set "
"when rebasing the current branch."
msgstr "このフックは linkgit:git-rebase[1] によって呼び出され、ブランチがリベースされるのを防ぐために使用できます。フックは、1つまたは2つのパラメーターで呼び出すことができます。最初のパラメーターは、シリーズがフォークされたアップストリームです。2番目のパラメーターは、リベースされるブランチであり、現在のブランチをリベースするときは設定されません。"

#. type: Title ~
#: ../Documentation-sedout/githooks.txt:188
#, no-wrap
msgid "post-checkout"
msgstr "post-checkout"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:199
msgid ""
"This hook is invoked when a linkgit:git-checkout[1] or linkgit:git-switch[1] "
"is run after having updated the worktree.  The hook is given three "
"parameters: the ref of the previous HEAD, the ref of the new HEAD (which may "
"or may not have changed), and a flag indicating whether the checkout was a "
"branch checkout (changing branches, flag=1) or a file checkout (retrieving a "
"file from the index, flag=0).  This hook cannot affect the outcome of `git "
"switch` or `git checkout`, other than that the hook's exit status becomes "
"the exit status of these two commands."
msgstr "このフックは、ワークツリーを更新した後に linkgit:git-checkout[1] または linkgit:git-switch[1] が実行されたときに呼び出されます。フックには、以前のHEADのref、新しいHEADのref(変更されている場合と変更されていない場合があります)、およびチェックアウトがブランチチェックアウト(ブランチの変更、flag=1)あるいはファイルのチェックアウト(インデックスからファイルを取得、flag=0)のいずれかであるかどうかを示すフラグ、の3つのパラメーターが与えられます。このフックは、フックの終了ステータスがこれら2つのコマンドの終了ステータスになることを除いて、 `git switch` または `git checkout` の結果に影響を与えることはできません。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:204
msgid ""
"It is also run after linkgit:git-clone[1], unless the `--no-checkout` (`-n`) "
"option is used. The first parameter given to the hook is the null-ref, the "
"second the ref of the new HEAD and the flag is always 1. Likewise for `git "
"worktree add` unless `--no-checkout` is used."
msgstr "これは `--no-checkout` (`-n`)オプションが使用されていない限り、 linkgit:git-clone[1]の後でも実行されます。 フックに指定された最初のパラメーターは null-refで、2番目は新しいHEADのrefであり、フラグは常に1です。`--no-checkout` が使用されていない限り、 `git worktree add` についても同様です。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:208
msgid ""
"This hook can be used to perform repository validity checks, auto-display "
"differences from the previous HEAD if different, or set working dir metadata "
"properties."
msgstr "このフックを使用して、リポジトリの有効性チェックを実行したり、以前のHEADとの違いを自動表示したり、作業ディレクトリのメタデータプロパティを設定したりできます。"

#. type: Title ~
#: ../Documentation-sedout/githooks.txt:210
#, no-wrap
msgid "post-merge"
msgstr "post-merge"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:217
msgid ""
"This hook is invoked by linkgit:git-merge[1], which happens when a `git "
"pull` is done on a local repository.  The hook takes a single parameter, a "
"status flag specifying whether or not the merge being done was a squash "
"merge.  This hook cannot affect the outcome of `git merge` and is not "
"executed, if the merge failed due to conflicts."
msgstr "このフックは linkgit:git-merge[1] によって呼び出されます。これは、ローカルリポジトリで `git pull` が実行されたときに発生します。フックは単一のパラメーター、つまり、実行されているマージがスカッシュマージ(squash merge)であるかどうかを指定するステータスフラグを受け取ります。このフックは `git merge` の結果に影響を与えることはできず、競合が原因でマージが失敗した場合は実行されません。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:222
msgid ""
"This hook can be used in conjunction with a corresponding pre-commit hook to "
"save and restore any form of metadata associated with the working tree (e."
"g.: permissions/ownership, ACLS, etc).  See contrib/hooks/setgitperms.perl "
"for an example of how to do this."
msgstr "このフックを対応するpre-commitフックと組み合わせて使用すると、作業ツリーに関連付けられている任意の形式のメタデータ(たとえば、権限/所有権、ACLSなど)を保存および復元できます。これを行う方法の例については、 contrib/hooks/setgitperms.perl を参照してください。"

#. type: Title ~
#: ../Documentation-sedout/githooks.txt:224
#, no-wrap
msgid "pre-push"
msgstr "pre-push"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:230
msgid ""
"This hook is called by linkgit:git-push[1] and can be used to prevent a push "
"from taking place.  The hook is called with two parameters which provide the "
"name and location of the destination remote, if a named remote is not being "
"used both values will be the same."
msgstr "このフックは linkgit:git-push[1] によって呼び出され、プッシュが行われないようにするために使用できます。フックは、宛先リモートの名前と場所を提供する2つのパラメーターで呼び出されます。名前付きリモートが使用されていない場合、両方の値は同一になります。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:233
msgid ""
"Information about what is to be pushed is provided on the hook's standard "
"input with lines of the form:"
msgstr "何をプッシュするかについての情報は、フックの標準入力に次の形式の行で提供されます:"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:235
#, no-wrap
msgid "  <local ref> SP <local object name> SP <remote ref> SP <remote object name> LF\n"
msgstr "  <local ref> SP <local object name> SP <remote ref> SP <remote object name> LF\n"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:238
msgid ""
"For instance, if the command +git push origin master:foreign+ were run the "
"hook would receive a line like the following:"
msgstr "たとえば、コマンド +git push origin master:foreign+ を実行すると、フックは以下のような行を受け取ります:"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:240
#, no-wrap
msgid "  refs/heads/master 67890 refs/heads/foreign 12345\n"
msgstr "  refs/heads/master 67890 refs/heads/foreign 12345\n"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:247
msgid ""
"although the full object name would be supplied.  If the foreign ref does "
"not yet exist the `<remote object name>` will be the all-zeroes object "
"name.  If a ref is to be deleted, the `<local ref>` will be supplied as "
"`(delete)` and the `<local object name>` will be the all-zeroes object "
"name.  If the local commit was specified by something other than a name "
"which could be expanded (such as `HEAD~`, or an object name) it will be "
"supplied as it was originally given."
msgstr "ただし、完全なオブジェクト名が提供されます。外部参照がまだ存在しない場合、 <remote object name> はすべてゼロのオブジェクト名になります。refを削除する場合は、 <local ref> が `(delete)` として提供され、 `<local object name>` がすべてゼロのオブジェクト名になります。ローカルコミットが拡張可能な名前以外の名前(`HEAD~` やオブジェクト名など)で指定された場合は、最初に指定されたとおりに提供されます。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:251
msgid ""
"If this hook exits with a non-zero status, `git push` will abort without "
"pushing anything.  Information about why the push is rejected may be sent to "
"the user by writing to standard error."
msgstr "このフックがゼロ以外のステータスで終了した場合、 `git push` は何もプッシュせずに中止(abort)します。プッシュが拒否された理由に関する情報は、標準エラーに書き込むことでユーザーに送信される場合があります。"

#. type: Title ~
#: ../Documentation-sedout/githooks.txt:254
#, no-wrap
msgid "pre-receive"
msgstr "pre-receive"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:261
msgid ""
"This hook is invoked by linkgit:git-receive-pack[1] when it reacts to `git "
"push` and updates reference(s) in its repository.  Just before starting to "
"update refs on the remote repository, the pre-receive hook is invoked.  Its "
"exit status determines the success or failure of the update."
msgstr "このフックは、 `git push` に反応し、リポジトリ内の参照を更新するときに、 linkgit:git-receive-pack[1] によって呼び出されます。リモートリポジトリのrefの更新を開始する直前に、pre-receiveフックが呼び出されます。その終了ステータスによって、更新の成功または失敗が決まります。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:265
msgid ""
"This hook executes once for the receive operation. It takes no arguments, "
"but for each ref to be updated it receives on standard input a line of the "
"format:"
msgstr "このフックは、受信操作に対して1回実行されます。引数は必要ありませんが、更新される各refについて、標準入力で以下の形式の行を受け取ります:"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:267
#: ../Documentation-sedout/githooks.txt:495
#, no-wrap
msgid "  <old-value> SP <new-value> SP <ref-name> LF\n"
msgstr "  <old-value> SP <new-value> SP <ref-name> LF\n"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:272
msgid ""
"where `<old-value>` is the old object name stored in the ref, `<new-value>` "
"is the new object name to be stored in the ref and `<ref-name>` is the full "
"name of the ref.  When creating a new ref, `<old-value>` is the all-zeroes "
"object name."
msgstr "ここで、 `<old-value>` は、refに保存されている古いオブジェクト名です。 `<new-value>` はrefに格納される新しいオブジェクト名です。 `<ref-name>` はrefのフルネームです。 新しいrefを作成する場合、 `<old-value>` はすべてゼロのオブジェクト名です。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:276
msgid ""
"If the hook exits with non-zero status, none of the refs will be updated. If "
"the hook exits with zero, updating of individual refs can still be prevented "
"by the <<update,'update'>> hook."
msgstr "フックがゼロ以外のステータスで終了した場合、どのrefも更新されません。フックがゼロで終了する場合でも、個々のrefの更新は<<update,'update'>>フックによって防ぐことができます。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:280
#: ../Documentation-sedout/githooks.txt:333
#: ../Documentation-sedout/githooks.txt:424
#: ../Documentation-sedout/githooks.txt:470
msgid ""
"Both standard output and standard error output are forwarded to `git send-"
"pack` on the other end, so you can simply `echo` messages for the user."
msgstr "標準出力と標準エラー出力の両方がもう一方の側の `git send-pack` に転送(forward)されるため、ユーザーにメッセージを `echo` するだけで済みます。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:289
#: ../Documentation-sedout/githooks.txt:438
msgid ""
"The number of push options given on the command line of `git push --push-"
"option=...` can be read from the environment variable "
"`GIT_PUSH_OPTION_COUNT`, and the options themselves are found in "
"`GIT_PUSH_OPTION_0`, `GIT_PUSH_OPTION_1`,...  If it is negotiated to not use "
"the push options phase, the environment variables will not be set. If the "
"client selects to use push options, but doesn't transmit any, the count "
"variable will be set to zero, `GIT_PUSH_OPTION_COUNT=0`."
msgstr "`git push --push-option=...` のコマンドラインで指定された、プッシュオプションの数は環境変数 `GIT_PUSH_OPTION_COUNT` から読み取ることができ、オプション自体は `GIT_PUSH_OPTION_0` 、 `GIT_PUSH_OPTION_1` 、 … から読み取る事ができます。プッシュオプションフェーズを使用しないように取り決めた場合、環境変数は設定されません。クライアントがプッシュオプションの使用を選択したが、何も送信しない場合、カウント変数はゼロ、つまり `GIT_PUSH_OPTION_COUNT=0` に設定されます。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:292
msgid ""
"See the section on \"Quarantine Environment\" in linkgit:git-receive-pack[1] "
"for some caveats."
msgstr "いくつかの注意点については、 linkgit:git-receive-pack[1] の「Quarantine Environment」のセクションを参照してください。"

#. type: Title ~
#: ../Documentation-sedout/githooks.txt:295
#, no-wrap
msgid "update"
msgstr "update"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:302
msgid ""
"This hook is invoked by linkgit:git-receive-pack[1] when it reacts to `git "
"push` and updates reference(s) in its repository.  Just before updating the "
"ref on the remote repository, the update hook is invoked.  Its exit status "
"determines the success or failure of the ref update."
msgstr "このフックは、 `git push` に反応し、リポジトリ内の参照を更新するときに、 linkgit:git-receive-pack[1] によって呼び出されます。リモートリポジトリのrefを更新する直前に、 update フックが呼び出されます。その終了ステータスによって、ref更新の成功または失敗が決まります。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:305
msgid ""
"The hook executes once for each ref to be updated, and takes three "
"parameters:"
msgstr "フックは、更新されるrefごとに1回実行され、以下の3つのパラメーターを取ります:"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:307
msgid "the name of the ref being updated,"
msgstr "更新されるrefの名前"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:308
msgid "the old object name stored in the ref,"
msgstr "refに保存されている古いオブジェクト名"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:309
msgid "and the new object name to be stored in the ref."
msgstr "refに格納される新しいオブジェクト名"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:313
msgid ""
"A zero exit from the update hook allows the ref to be updated.  Exiting with "
"a non-zero status prevents `git receive-pack` from updating that ref."
msgstr "更新フックがゼロステータスで終了すると、refを更新できます。ゼロ以外のステータスで終了すると、 `git receive-pack` はそのrefを更新できなくなります。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:318
msgid ""
"This hook can be used to prevent 'forced' update on certain refs by making "
"sure that the object name is a commit object that is a descendant of the "
"commit object named by the old object name.  That is, to enforce a \"fast-"
"forward only\" policy."
msgstr "このフックは、オブジェクト名が古いオブジェクト名で指定されたコミットオブジェクトの子孫であるコミットオブジェクトであることを確認することにより、特定のrefでの「強制」更新を防ぐために使用できます。つまり、「早送りのみ」(fast-forward only)のポリシーを適用します。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:323
msgid ""
"It could also be used to log the old..new status.  However, it does not know "
"the entire set of branches, so it would end up firing one e-mail per ref "
"when used naively, though.  The <<post-receive,'post-receive'>> hook is more "
"suited to that."
msgstr "また、 old..new ステータスをログに記録するために使用することもできます。ただし、ブランチのセット全体を認識しているわけではないため、単純に使用すると、refごとに1つの電子メールが送信されることになります。そのためには<<post-receive,'post-receive'>>フックの方が適しています。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:329
msgid ""
"In an environment that restricts the users' access only to git commands over "
"the wire, this hook can be used to implement access control without relying "
"on filesystem ownership and group membership. See linkgit:git-shell[1] for "
"how you might use the login shell to restrict the user's access to only git "
"commands."
msgstr "ユーザーのアクセスをネットワーク経由のgitコマンドのみに制限する環境では、このフックを使用して、ファイルシステムの所有権やグループメンバーシップに依存せずにアクセス制御を実装できます。ログインシェルを使用してユーザーのアクセスをgitコマンドのみに制限する方法については、 linkgit:git-shell[1] を参照してください。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:337
msgid ""
"The default 'update' hook, when enabled--and with `hooks.allowunannotated` "
"config option unset or set to false--prevents unannotated tags to be pushed."
msgstr "デフォルトの `update` フックが有効になっている場合 -- および `hooks.allowunannotated` 構成オプションが設定されていないかfalseに設定されている場合 -- 注釈のないタグ(unannotated tags)がプッシュされるのを防ぎます。"

#. type: Title ~
#: ../Documentation-sedout/githooks.txt:340
#, no-wrap
msgid "proc-receive"
msgstr "proc-receive"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:348
msgid ""
"This hook is invoked by linkgit:git-receive-pack[1].  If the server has set "
"the multi-valued config variable `receive.procReceiveRefs`, and the commands "
"sent to 'receive-pack' have matching reference names, these commands will be "
"executed by this hook, instead of by the internal `execute_commands()` "
"function.  This hook is responsible for updating the relevant references and "
"reporting the results back to 'receive-pack'."
msgstr "このフックは linkgit:git-receive-pack[1] によって呼び出されます。サーバーが複数値の構成変数 `receive.procReceiveRefs` を設定し、そして `receive-pack` に送信されるコマンドの参照名が一致する場合、これらのコマンドは、内部の `execute_commands()` 関数ではなく、このフックによって実行されます。このフックは、関連する参照を更新し、結果を `receive-pack` に報告する役割を果たします。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:354
msgid ""
"This hook executes once for the receive operation.  It takes no arguments, "
"but uses a pkt-line format protocol to communicate with 'receive-pack' to "
"read commands, push-options and send results.  In the following example for "
"the protocol, the letter 'S' stands for 'receive-pack' and the letter 'H' "
"stands for this hook."
msgstr "このフックは、受信操作に対して1回実行されます。引数は取りませんが、pkt-line形式のプロトコルを使用して `receive-pack` と通信し、コマンド、プッシュオプションを読み取り、結果を送信します。行かのプロトコルの例では、文字 `S` は `receive-pack` を表し、文字 `H` はこのフックを表します。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:360
#, no-wrap
msgid ""
"    # Version and features negotiation.\n"
"    S: PKT-LINE(version=1\\0push-options atomic...)\n"
"    S: flush-pkt\n"
"    H: PKT-LINE(version=1\\0push-options...)\n"
"    H: flush-pkt\n"
msgstr ""
"    # Version and features negotiation.\n"
"    S: PKT-LINE(version=1\\0push-options atomic...)\n"
"    S: flush-pkt\n"
"    H: PKT-LINE(version=1\\0push-options...)\n"
"    H: flush-pkt\n"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:369
#, no-wrap
msgid ""
"    # Send commands from server to the hook.\n"
"    S: PKT-LINE(<old-oid> <new-oid> <ref>)\n"
"    S: ... ...\n"
"    S: flush-pkt\n"
"    # Send push-options only if the 'push-options' feature is enabled.\n"
"    S: PKT-LINE(push-option)\n"
"    S: ... ...\n"
"    S: flush-pkt\n"
msgstr ""
"    # Send commands from server to the hook.\n"
"    S: PKT-LINE(<old-oid> <new-oid> <ref>)\n"
"    S: ... ...\n"
"    S: flush-pkt\n"
"    # Send push-options only if the 'push-options' feature is enabled.\n"
"    S: PKT-LINE(push-option)\n"
"    S: ... ...\n"
"    S: flush-pkt\n"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:387
#, no-wrap
msgid ""
"    # Receive result from the hook.\n"
"    # OK, run this command successfully.\n"
"    H: PKT-LINE(ok <ref>)\n"
"    # NO, I reject it.\n"
"    H: PKT-LINE(ng <ref> <reason>)\n"
"    # Fall through, let 'receive-pack' to execute it.\n"
"    H: PKT-LINE(ok <ref>)\n"
"    H: PKT-LINE(option fall-through)\n"
"    # OK, but has an alternate reference.  The alternate reference name\n"
"    # and other status can be given in option directives.\n"
"    H: PKT-LINE(ok <ref>)\n"
"    H: PKT-LINE(option refname <refname>)\n"
"    H: PKT-LINE(option old-oid <old-oid>)\n"
"    H: PKT-LINE(option new-oid <new-oid>)\n"
"    H: PKT-LINE(option forced-update)\n"
"    H: ... ...\n"
"    H: flush-pkt\n"
msgstr ""
"    # Receive result from the hook.\n"
"    # OK, run this command successfully.\n"
"    H: PKT-LINE(ok <ref>)\n"
"    # NO, I reject it.\n"
"    H: PKT-LINE(ng <ref> <reason>)\n"
"    # Fall through, let 'receive-pack' to execute it.\n"
"    H: PKT-LINE(ok <ref>)\n"
"    H: PKT-LINE(option fall-through)\n"
"    # OK, but has an alternate reference.  The alternate reference name\n"
"    # and other status can be given in option directives.\n"
"    H: PKT-LINE(ok <ref>)\n"
"    H: PKT-LINE(option refname <refname>)\n"
"    H: PKT-LINE(option old-oid <old-oid>)\n"
"    H: PKT-LINE(option new-oid <new-oid>)\n"
"    H: PKT-LINE(option forced-update)\n"
"    H: ... ...\n"
"    H: flush-pkt\n"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:394
msgid ""
"Each command for the 'proc-receive' hook may point to a pseudo-reference and "
"always has a zero-old as its old-oid, while the 'proc-receive' hook may "
"update an alternate reference and the alternate reference may exist already "
"with a non-zero old-oid.  For this case, this hook will use \"option\" "
"directives to report extended attributes for the reference given by the "
"leading \"ok\" directive."
msgstr "'proc-receive' フックの各コマンドは、疑似参照(pseudo-reference)を指す場合があり、そのold-oidとして常にゼロオールドを持ちます。一方、 `proc-receive` フックは代替参照(alternate reference)を更新する可能性があり、代替参照はゼロ以外のold-oidで既に存在する可能性があります。この場合、このフックは `option` ディレクティブを使用して、先頭の `ok` ディレクティブによって指定された参照の拡張属性を報告します。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:399
msgid ""
"The report of the commands of this hook should have the same order as the "
"input.  The exit status of the 'proc-receive' hook only determines the "
"success or failure of the group of commands sent to it, unless atomic push "
"is in use."
msgstr "このフックのコマンドの報告は、入力と同じ順序である必要があります。 `proc-receive` フックの終了ステータスは、アトミックプッシュ(atomic push)が使用されていない限り、送信したコマンドグループの成功または失敗のみを決定します。"

#. type: Title ~
#: ../Documentation-sedout/githooks.txt:402
#, no-wrap
msgid "post-receive"
msgstr "post-receive"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:408
#: ../Documentation-sedout/githooks.txt:447
msgid ""
"This hook is invoked by linkgit:git-receive-pack[1] when it reacts to `git "
"push` and updates reference(s) in its repository.  It executes on the remote "
"repository once after all the refs have been updated."
msgstr "このフックは、 `git push` に反応し、リポジトリ内の参照を更新するときに、 linkgit:git-receive-pack[1] によって呼び出されます。すべてのrefが更新された後、リモートリポジトリで実行されます。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:413
msgid ""
"This hook executes once for the receive operation.  It takes no arguments, "
"but gets the same information as the <<pre-receive,'pre-receive'>> hook does "
"on its standard input."
msgstr "このフックは、受信操作に対して1回実行されます。引数は取りませんが、 <<pre-receive,'pre-receive'>> フックが標準入力で行うのと同じ情報を取得します。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:416
msgid ""
"This hook does not affect the outcome of `git receive-pack`, as it is called "
"after the real work is done."
msgstr "このフックは、実際の作業が完了した後に呼び出されるため、 `git receive-pack` の結果には影響しません。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:420
msgid ""
"This supersedes the <<post-update,'post-update'>> hook in that it gets both "
"old and new values of all the refs in addition to their names."
msgstr "これは、名前に加えてすべてのrefの古い値と新しい値の両方を取得するという点で、 <<post-update,'post-update'>> フックに取って代わります。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:429
msgid ""
"The default 'post-receive' hook is empty, but there is a sample script `post-"
"receive-email` provided in the `contrib/hooks` directory in Git "
"distribution, which implements sending commit emails."
msgstr "デフォルトの `post-receive` フックは空ですが、Gitディストリビューションの `contrib/hooks` ディレクトリにサンプルスクリプト `post-receive-email` があり、コミットメールの送信を実装しています。"

#. type: Title ~
#: ../Documentation-sedout/githooks.txt:441
#, no-wrap
msgid "post-update"
msgstr "post-update"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:450
msgid ""
"It takes a variable number of parameters, each of which is the name of ref "
"that was actually updated."
msgstr "可変数のパラメーターを取ります。各パラメーターは、実際に更新されたrefの名前です。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:453
msgid ""
"This hook is meant primarily for notification, and cannot affect the outcome "
"of `git receive-pack`."
msgstr "このフックは主に通知用であり、 `git receive-pack` の結果に影響を与えることはできません。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:460
msgid ""
"The 'post-update' hook can tell what are the heads that were pushed, but it "
"does not know what their original and updated values are, so it is a poor "
"place to do log old..new. The <<post-receive,'post-receive'>> hook does get "
"both original and updated values of the refs. You might consider it instead "
"if you need them."
msgstr "'post-update' フックは、プッシュされたヘッドが何であるかを知ることができますが、元の値と更新された値が何であるかを知らないため、 logold..new を実行するのに適した場所ではありません。 <<post-receive,'post-receive'>>フックは、参照の元の値と更新された値の両方を取得するので、必要に応じて、このフックの代わりに検討することもできます。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:466
msgid ""
"When enabled, the default 'post-update' hook runs `git update-server-info` "
"to keep the information used by dumb transports (e.g., HTTP) up to date.  If "
"you are publishing a Git repository that is accessible via HTTP, you should "
"probably enable this hook."
msgstr "有効にすると、デフォルトの `post-update` フックが `git update-server-info` を実行して、バカ転送(dumb transports)(例:HTTP)で使用される情報を最新の状態に保ちます。 HTTP経由でアクセスできるGitリポジトリを公開している場合は、あなたはおそらくこのフックを有効にする必要があります。"

#. type: Title ~
#: ../Documentation-sedout/githooks.txt:472
#, no-wrap
msgid "reference-transaction"
msgstr "reference-transaction"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:478
msgid ""
"This hook is invoked by any Git command that performs reference updates. It "
"executes whenever a reference transaction is prepared, committed or aborted "
"and may thus get called multiple times. The hook does not cover symbolic "
"references (but that may change in the future)."
msgstr "このフックは、参照の更新を実行するGitコマンドによって呼び出されます。参照トランザクションが、準備またはコミットまたは中止されるたびに実行されるため、複数回呼び出される可能性があります。このフックはシンボリック参照をカバーしていません(ただし、将来変更される可能性があります)。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:481
msgid ""
"The hook takes exactly one argument, which is the current state the given "
"reference transaction is in:"
msgstr "フックは引数を1つだけ取りますが、これは指定された参照トランザクションの現在の状態です:"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:484
msgid ""
"\"prepared\": All reference updates have been queued to the transaction and "
"references were locked on disk."
msgstr "\"prepared\" : すべての参照更新がトランザクションのキューに入れられ、参照がディスク上でロックされました。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:487
msgid ""
"\"committed\": The reference transaction was committed and all references "
"now have their respective new value."
msgstr "\"committed\": 参照トランザクションがコミットされ、すべての参照にそれぞれの新しい値が追加されました。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:490
msgid ""
"\"aborted\": The reference transaction was aborted, no changes were "
"performed and the locks have been released."
msgstr "\"aborted\": 参照トランザクションが中止され、変更は実行されず、ロックが解放されました。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:493
msgid ""
"For each reference update that was added to the transaction, the hook "
"receives on standard input a line of the format:"
msgstr "トランザクションに追加された参照更新ごとに、フックは標準入力で以下の形式の行を受け取ります:"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:503
msgid ""
"where `<old-value>` is the old object name passed into the reference "
"transaction, `<new-value>` is the new object name to be stored in the ref "
"and `<ref-name>` is the full name of the ref. When force updating the "
"reference regardless of its current value or when the reference is to be "
"created anew, `<old-value>` is the all-zeroes object name. To distinguish "
"these cases, you can inspect the current value of `<ref-name>` via `git rev-"
"parse`."
msgstr "ここで、 `<old-value>` は、参照トランザクションに渡された古いオブジェクト名です。 `<new-value>` はrefに格納される新しいオブジェクト名であり、 `<ref-name>` はrefのフルネームです。現在の値に関係なく参照を強制的に更新する場合、または参照を新たに作成する場合は、 `<old-value>` はすべてゼロのオブジェクト名です。あなたは、これらのケースを区別するために、 `gitrev-parse` を介して `<ref-name>` の現在の値を調べることができます。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:508
msgid ""
"The exit status of the hook is ignored for any state except for the "
"\"prepared\" state. In the \"prepared\" state, a non-zero exit status will "
"cause the transaction to be aborted. The hook will not be called with "
"\"aborted\" state in that case."
msgstr "フックの終了ステータスは、「prepared」(準備済み)状態を除くすべての状態で無視されます。「prepared」状態では、ゼロ以外の終了ステータスにより、トランザクションが中止(abort)されます。その場合、フックは「中止」状態で呼び出さることはありません。"

#. type: Title ~
#: ../Documentation-sedout/githooks.txt:510
#, no-wrap
msgid "push-to-checkout"
msgstr "push-to-checkout"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:522
msgid ""
"This hook is invoked by linkgit:git-receive-pack[1] when it reacts to `git "
"push` and updates reference(s) in its repository, and when the push tries to "
"update the branch that is currently checked out and the `receive."
"denyCurrentBranch` configuration variable is set to `updateInstead`.  Such a "
"push by default is refused if the working tree and the index of the remote "
"repository has any difference from the currently checked out commit; when "
"both the working tree and the index match the current commit, they are "
"updated to match the newly pushed tip of the branch.  This hook is to be "
"used to override the default behaviour."
msgstr "プッシュが現在チェックアウトされているブランチを更新しようと試み、かつ、 `receive.denyCurrentBranch` 構成変数が `updateInstead` に設定されている場合、このフックは、 `git push` に反応し、リポジトリ内の参照を更新するときに、 linkgit:git-receive-pack[1] によって呼び出されます。作業ツリーとリモートリポジトリのインデックスが現在チェックアウトされているコミットと異なる場合、このようなプッシュはデフォルトで拒否されます。作業ツリーとインデックスの両方が現在のコミットと一致する場合、それらは、ブランチの新しくプッシュされた先端に一致するように更新されます。このフックは、デフォルトの動作をオーバーライドするために使用されます。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:530
msgid ""
"The hook receives the commit with which the tip of the current branch is "
"going to be updated.  It can exit with a non-zero status to refuse the push "
"(when it does so, it must not modify the index or the working tree).  Or it "
"can make any necessary changes to the working tree and to the index to bring "
"them to the desired state when the tip of the current branch is updated to "
"the new commit, and exit with a zero status."
msgstr "フックは、現在のブランチの先端が更新されるコミットを受け取ります。ゼロ以外のステータスで終了してプッシュを拒否できます(そうする場合は、インデックスまたは作業ツリーを変更してはいけません)。または、作業ツリーとインデックスに必要な変更を加えて、現在のブランチの先端が新しいコミットに更新されたときにそれらを目的の状態にし、ゼロステータスで終了することもできます。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:538
msgid ""
"For example, the hook can simply run `git read-tree -u -m HEAD \"$1\"` in "
"order to emulate `git fetch` that is run in the reverse direction with `git "
"push`, as the two-tree form of `git read-tree -u -m` is essentially the same "
"as `git switch` or `git checkout` that switches branches while keeping the "
"local changes in the working tree that do not interfere with the difference "
"between the branches."
msgstr "例えば、フックは単純に `git read-tree -u -m HEAD \"$1\"` を実行して、`git push` と逆方向に実行する `git fetch` をエミュレートすることができます。 `git read-tree -u -m` の二木形式(two-tree form)は、ブランチの違いを妨げない範囲で作業ツリー(working tree)のローカル変更を維持しながらブランチを切り替える `git switch` や `git checkout` と本質的に同じものだからです。"

#. type: Title ~
#: ../Documentation-sedout/githooks.txt:541
#, no-wrap
msgid "pre-auto-gc"
msgstr "pre-auto-gc"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:546
msgid ""
"This hook is invoked by `git gc --auto` (see linkgit:git-gc[1]). It takes no "
"parameter, and exiting with non-zero status from this script causes the `git "
"gc --auto` to abort."
msgstr "このフックは `git gc --auto` によって呼び出されます(linkgit:git-gc[1] を参照)。パラメータを必要とせず、このスクリプトをゼロ以外のステータスで終了させると、 `git gc --auto` が中止(abort)されます。"

#. type: Title ~
#: ../Documentation-sedout/githooks.txt:548
#, no-wrap
msgid "post-rewrite"
msgstr "post-rewrite"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:558
msgid ""
"This hook is invoked by commands that rewrite commits (linkgit:git-commit[1] "
"when called with `--amend` and linkgit:git-rebase[1]; however, full-history "
"(re)writing tools like linkgit:git-fast-import[1] or https://github.com/"
"newren/git-filter-repo[git-filter-repo] typically do not call it!).  Its "
"first argument denotes the command it was invoked by: currently one of "
"`amend` or `rebase`.  Further command-dependent arguments may be passed in "
"the future."
msgstr "このフックは、commitを書き換えるコマンド(`--amend` や linkgit:git-rebase[1] から呼び出された場合の linkgit:git-commit[1] 。ただし、 linkgit:git-fast-import[1]や https://github.com/newren/git-filter-repo[git-filter-repo] などの完全な履歴(再)書き込みツールは通常、呼び出さないでください！)によって呼び出されます。その最初の引数は、それが呼び出されたコマンドを示します。それは現在、`amend` または `rebase` のいずれかです。将来、コマンドに依存する引数がさらに渡される可能性があります。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:561
msgid ""
"The hook receives a list of the rewritten commits on stdin, in the format"
msgstr "フックは、stdinから、書き換えられたコミットのリストを以下の形式で受け取ります。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:563
#, no-wrap
msgid "  <old-object-name> SP <new-object-name> [ SP <extra-info> ] LF\n"
msgstr "  <old-object-name> SP <new-object-name> [ SP <extra-info> ] LF\n"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:567
msgid ""
"The 'extra-info' is again command-dependent.  If it is empty, the preceding "
"SP is also omitted.  Currently, no commands pass any 'extra-info'."
msgstr "`extra-info` もコマンド依存です。空の場合、先行するSPも省略されます。現在、 `extra-info` を渡すコマンドはありません。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:571
msgid ""
"The hook always runs after the automatic note copying (see \"notes.rewrite."
"<command>\" in linkgit:git-config[1]) has happened, and thus has access to "
"these notes."
msgstr "フックは常に、自動noteコピー(linkgit:git-config[1]の `notes.rewrite.<command>` 参照)が発生した後に実行されるため、フックはこれらのnoteにアクセスできます。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:573
msgid "The following command-specific comments apply:"
msgstr "以下のコマンド固有のコメントが適用されます:"

#. type: Labeled list
#: ../Documentation-sedout/githooks.txt:574
#, no-wrap
msgid "rebase"
msgstr "rebase"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:579
msgid ""
"For the 'squash' and 'fixup' operation, all commits that were squashed are "
"listed as being rewritten to the squashed commit.  This means that there "
"will be several lines sharing the same 'new-object-name'."
msgstr "'squash' 操作と 'fixup' 操作の場合、スカッシュされたすべてのコミットは、スカッシュされたコミットに書き換えられたものとしてリストされます。これは、同じ「new-object-name」を共有する複数の行があることを意味します。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:582
msgid ""
"The commits are guaranteed to be listed in the order that they were "
"processed by rebase."
msgstr "コミットは、リベースによって処理された順序でリストされることが保証されています。"

#. type: Title ~
#: ../Documentation-sedout/githooks.txt:584
#, no-wrap
msgid "sendemail-validate"
msgstr "sendemail-validate"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:590
msgid ""
"This hook is invoked by linkgit:git-send-email[1].  It takes a single "
"parameter, the name of the file that holds the e-mail to be sent.  Exiting "
"with a non-zero status causes `git send-email` to abort before sending any e-"
"mails."
msgstr "このフックは linkgit:git-send-email[1] によって呼び出されます。単一のパラメーターとして、送信する電子メールを保持するファイルの名前を取ります。ゼロ以外のステータスで終了すると、電子メールを送信する前に `git send-email` が中止(abort)されます。"

#. type: Title ~
#: ../Documentation-sedout/githooks.txt:592
#, no-wrap
msgid "fsmonitor-watchman"
msgstr "fsmonitor-watchman"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:597
msgid ""
"This hook is invoked when the configuration option `core.fsmonitor` is set "
"to `.git/hooks/fsmonitor-watchman` or `.git/hooks/fsmonitor-watchmanv2` "
"depending on the version of the hook to use."
msgstr "このフックは、使用するフックのバージョンに応じて、構成オプション `core.fsmonitor` が `.git/hooks/fsmonitor-watchman` または `.git/hooks/fsmonitor-watchmanv2` に設定されている場合に呼び出されます。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:600
msgid ""
"Version 1 takes two arguments, a version (1) and the time in elapsed "
"nanoseconds since midnight, January 1, 1970."
msgstr "バージョン1は、バージョン(つまり、1)と、1970年1月1日の0:00から経過したナノ秒単位の時間の、2つの引数を取ります。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:605
msgid ""
"Version 2 takes two arguments, a version (2) and a token that is used for "
"identifying changes since the token. For watchman this would be a clock id. "
"This version must output to stdout the new token followed by a NUL before "
"the list of files."
msgstr "バージョン2は、バージョン(つまり、2)と、トークン以降の変更を識別するために使用されるトークンの、2つの引数を取ります。ウォッチマン(watchman)の場合、これはクロックID(clock id)になります。このバージョンでは、新しいトークンの後のファイルのリストの前にNULを付けて標準出力しなければなりません。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:611
msgid ""
"The hook should output to stdout the list of all files in the working "
"directory that may have changed since the requested time.  The logic should "
"be inclusive so that it does not miss any potential changes.  The paths "
"should be relative to the root of the working directory and be separated by "
"a single NUL."
msgstr "フックは、要求された時間以降に変更された可能性のある作業ディレクトリ内のすべてのファイルのリストをstdoutに出力する必要があります。潜在的な変更を見逃さないように、ロジックは包括的(inclusive)である必要があります。パスは、作業ディレクトリのルートを基準にして、単一のNULで区切る必要があります。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:615
msgid ""
"It is OK to include files which have not actually changed.  All changes "
"including newly-created and deleted files should be included. When files are "
"renamed, both the old and the new name should be included."
msgstr "実際に変更されていないファイルを含めてもかまいません。新しく作成および削除されたファイルを含むすべての変更を含める必要があります。ファイルの名前を変更するときは、古い名前と新しい名前の両方を含める必要があります。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:619
msgid ""
"Git will limit what files it checks for changes as well as which directories "
"are checked for untracked files based on the path names given."
msgstr "Gitは、指定のパス名に基づいて、変更をチェックするファイルと、追跡されていないファイルをチェックするディレクトリを制限します。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:622
msgid ""
"An optimized way to tell git \"all files have changed\" is to return the "
"filename `/`."
msgstr "gitに「すべてのファイルが変更されました」と伝えるための最適化された方法は、ファイル名 `/` を返すことです。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:626
msgid ""
"The exit status determines whether git will use the data from the hook to "
"limit its search.  On error, it will fall back to verifying all files and "
"folders."
msgstr "終了ステータスは、gitがフックからのデータを使用して検索を制限するかどうかを決定します。エラーが発生すると、すべてのファイルとフォルダーの検証にフォールバックします。"

#. type: Title ~
#: ../Documentation-sedout/githooks.txt:628
#, no-wrap
msgid "p4-changelist"
msgstr "p4-changelist"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:631
#: ../Documentation-sedout/githooks.txt:648
#: ../Documentation-sedout/githooks.txt:665
msgid "This hook is invoked by `git-p4 submit`."
msgstr "このフックは `git-p4 submit` によって呼び出されます。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:637
msgid ""
"The `p4-changelist` hook is executed after the changelist message has been "
"edited by the user. It can be bypassed with the `--no-verify` option. It "
"takes a single parameter, the name of the file that holds the proposed "
"changelist text. Exiting with a non-zero status causes the command to abort."
msgstr "`p4-changelist` フックは、ユーザーがチェンジリストメッセージ(changelist message)を編集した後に実行されます。 `--no-verify` オプションでバイパスできます。提案されたチェンジリストテキストを保持するファイルの名前という単一のパラメータを取ります。ゼロ以外のステータスで終了すると、コマンドは中止(abort)されます。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:641
msgid ""
"The hook is allowed to edit the changelist file and can be used to normalize "
"the text into some project standard format. It can also be used to refuse "
"the Submit after inspect the message file."
msgstr "フックはチェンジリストファイル(changelist file)の編集を許可されており、テキストをプロジェクトの標準形式に正規化するために使用できます。また、メッセージファイルを検査した後に送信を拒否するために使用することもできます。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:643
#: ../Documentation-sedout/githooks.txt:660
#: ../Documentation-sedout/githooks.txt:672
msgid "Run `git-p4 submit --help` for details."
msgstr "詳細については、 `git-p4 submit --help` を実行してください。"

#. type: Title ~
#: ../Documentation-sedout/githooks.txt:645
#, no-wrap
msgid "p4-prepare-changelist"
msgstr "p4-prepare-changelist"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:654
msgid ""
"The `p4-prepare-changelist` hook is executed right after preparing the "
"default changelist message and before the editor is started.  It takes one "
"parameter, the name of the file that contains the changelist text. Exiting "
"with a non-zero status from the script will abort the process."
msgstr "`p4-prepare-changelist` フックは、デフォルトのチェンジリストメッセージ(changelist message)を準備した直後、エディタが起動する前に実行されます。これは、チェンジリストのテキストを含むファイルの名前という1つのパラメーターを取ります。スクリプトをゼロ以外のステータスで終了すると、プロセスが中止(abort)されます。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:658
msgid ""
"The purpose of the hook is to edit the message file in place, and it is not "
"suppressed by the `--no-verify` option. This hook is called even if `--"
"prepare-p4-only` is set."
msgstr "フックの目的は、メッセージファイルを所定の位置で編集することであり、`--no-verify` オプションによって抑制されることはありません。 このフックは、 `--prepare-p4-only` が設定されている場合でも呼び出されます。"

#. type: Title ~
#: ../Documentation-sedout/githooks.txt:662
#, no-wrap
msgid "p4-post-changelist"
msgstr "p4-post-changelist"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:670
msgid ""
"The `p4-post-changelist` hook is invoked after the submit has successfully "
"occurred in P4. It takes no parameters and is meant primarily for "
"notification and cannot affect the outcome of the git p4 submit action."
msgstr "`p4-post-changelist` フックは、送信(submit)がP4で正常に発生した後に呼び出されます。これはパラメーターを必要とせず、主に通知を目的としており、git p4 submitアクションの結果に影響を与えることはできません。"

#. type: Title ~
#: ../Documentation-sedout/githooks.txt:674
#, no-wrap
msgid "p4-pre-submit"
msgstr "p4-pre-submit"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:680
msgid ""
"This hook is invoked by `git-p4 submit`. It takes no parameters and nothing "
"from standard input. Exiting with non-zero status from this script prevent "
"`git-p4 submit` from launching. It can be bypassed with the `--no-verify` "
"command line option. Run `git-p4 submit --help` for details."
msgstr "このフックは `git-p4 submit` によって呼び出されます。これはパラメータをとらず、標準入力から何も取りません。このスクリプトをゼロ以外のステータスで終了すると、 `git-p4 submit` の起動を妨げます。 `--no-verify` コマンドラインオプションでバイパスできます。詳細については、 `git-p4 submit --help` を実行してください。"

#. type: Title ~
#: ../Documentation-sedout/githooks.txt:684
#, no-wrap
msgid "post-index-change"
msgstr "post-index-change"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:688
msgid ""
"This hook is invoked when the index is written in read-cache.c "
"do_write_locked_index."
msgstr "このフックは、インデックスが read-cache.c の do_write_locked_index に書き込まれるときに呼び出されます。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:692
msgid ""
"The first parameter passed to the hook is the indicator for the working "
"directory being updated.  \"1\" meaning working directory was updated or "
"\"0\" when the working directory was not updated."
msgstr "フックに渡される最初のパラメーターは、更新される作業ディレクトリのインジケーターです。「1」は作業ディレクトリが更新されたことを意味し、「0」は作業ディレクトリが更新されなかったことを意味します。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:697
msgid ""
"The second parameter passed to the hook is the indicator for whether or not "
"the index was updated and the skip-worktree bit could have changed.  \"1\" "
"meaning skip-worktree bits could have been updated and \"0\" meaning they "
"were not."
msgstr "フックに渡される2番目のパラメーターは、インデックスが更新され、 skip-worktree ビットが変更された可能性があるかどうかを示すインジケーターです。「1」はskip-worktreeビットが更新された可能性があることを意味し、「0」は更新されなかったことを意味します。"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:700
msgid ""
"Only one parameter should be set to \"1\" when the hook runs.  The hook "
"running passing \"1\", \"1\" should not be possible."
msgstr "フックの実行時に \"1\" に設定するパラメーターは1つだけです。 両方のパラメータを \"1\" に設定してはいけません。"

#. type: Title -
#: ../Documentation-sedout/githooks.txt:702
#, no-wrap
msgid "GIT"
msgstr "GIT"

#. type: Plain text
#: ../Documentation-sedout/githooks.txt:703
msgid "Part of the linkgit:git[1] suite"
msgstr "Part of the linkgit:git[1] suite"
