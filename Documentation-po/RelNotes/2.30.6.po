# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-07-18 11:06+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/RelNotes/2.30.6.txt:2
#, no-wrap
msgid "Git v2.30.6 Release Notes"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/2.30.6.txt:6
msgid ""
"This release addresses the security issues CVE-2022-39253 and "
"CVE-2022-39260."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/RelNotes/2.30.6.txt:8
#, no-wrap
msgid "Fixes since v2.30.5"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/2.30.6.txt:17
msgid ""
"CVE-2022-39253: When relying on the `--local` clone optimization, Git "
"dereferences symbolic links in the source repository before creating "
"hardlinks (or copies) of the dereferenced link in the destination "
"repository.  This can lead to surprising behavior where arbitrary files are "
"present in a repository's `$GIT_DIR` when cloning from a malicious "
"repository."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/2.30.6.txt:21
#, no-wrap
msgid ""
"Git will no longer dereference symbolic links via the `--local`\n"
"clone mechanism, and will instead refuse to clone repositories that\n"
"have symbolic links present in the `$GIT_DIR/objects` directory.\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/2.30.6.txt:24
msgid ""
"Additionally, the value of `protocol.file.allow` is changed to be \"user\" "
"by default."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/2.30.6.txt:30
msgid ""
"CVE-2022-39260: An overly-long command string given to `git shell` can "
"result in overflow in `split_cmdline()`, leading to arbitrary heap writes "
"and remote code execution when `git shell` is exposed and the directory "
"`$HOME/git-shell-commands` exists."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/2.30.6.txt:34
#, no-wrap
msgid ""
"`git shell` is taught to refuse interactive commands that are\n"
"longer than 4MiB in size. `split_cmdline()` is hardened to reject\n"
"inputs larger than 2GiB.\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/2.30.6.txt:37
msgid ""
"Credit for finding CVE-2022-39253 goes to Cory Snider of Mirantis. The fix "
"was authored by Taylor Blau, with help from Johannes Schindelin."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/2.30.6.txt:40
msgid ""
"Credit for finding CVE-2022-39260 goes to Kevin Backhouse of GitHub.  The "
"fix was authored by Kevin Backhouse, Jeff King, and Taylor Blau."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/2.30.6.txt:45
#, no-wrap
msgid ""
"Jeff King (2):\n"
"      shell: add basic tests\n"
"      shell: limit size of interactive commands\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/2.30.6.txt:48
#, no-wrap
msgid ""
"Kevin Backhouse (1):\n"
"      alias.c: reject too-long cmdline strings in split_cmdline()\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/2.30.6.txt:60
#, no-wrap
msgid ""
"Taylor Blau (11):\n"
"      builtin/clone.c: disallow `--local` clones with symlinks\n"
"      t/lib-submodule-update.sh: allow local submodules\n"
"      t/t1NNN: allow local submodules\n"
"      t/2NNNN: allow local submodules\n"
"      t/t3NNN: allow local submodules\n"
"      t/t4NNN: allow local submodules\n"
"      t/t5NNN: allow local submodules\n"
"      t/t6NNN: allow local submodules\n"
"      t/t7NNN: allow local submodules\n"
"      t/t9NNN: allow local submodules\n"
"      transport: make `protocol.file.allow` be \"user\" by default\n"
msgstr ""
