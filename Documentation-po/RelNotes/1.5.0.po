# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-11-04 05:35+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/RelNotes/1.5.0.txt:2
#, no-wrap
msgid "GIT v1.5.0 Release Notes"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/RelNotes/1.5.0.txt:5
#, no-wrap
msgid "Old news"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:12
msgid ""
"This section is for people who are upgrading from ancient versions of git.  "
"Although all of the changes in this section happened before the current "
"v1.4.4 release, they are summarized here in the v1.5.0 release notes for "
"people who skipped earlier versions."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:18
msgid ""
"As of git v1.5.0 there are some optional features that changes the "
"repository to allow data to be stored and transferred more efficiently.  "
"These features are not enabled by default, as they will make the repository "
"unusable with older versions of git.  Specifically, the available options "
"are:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:27
msgid ""
"There is a configuration variable core.legacyheaders that changes the format "
"of loose objects so that they are more efficient to pack and to send out of "
"the repository over git native protocol, since v1.4.2.  However, loose "
"objects written in the new format cannot be read by git older than that "
"version; people fetching from your repository using older clients over dumb "
"transports (e.g. http) using older versions of git will also be affected."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:30
#, no-wrap
msgid ""
"To let git use the new loose object format, you have to\n"
"set core.legacyheaders to false.\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:34
msgid ""
"Since v1.4.3, configuration repack.usedeltabaseoffset allows packfile to be "
"created in more space efficient format, which cannot be read by git older "
"than that version."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:37
#, no-wrap
msgid ""
"To let git use the new format for packfiles, you have to\n"
"set repack.usedeltabaseoffset to true.\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:45
msgid ""
"The above two new features are not enabled by default and you have to "
"explicitly ask for them, because they make repositories unreadable by older "
"versions of git, and in v1.5.0 we still do not enable them by default for "
"the same reason.  We will change this default probably 1 year after 1.4.2's "
"release, when it is reasonable to expect everybody to have new enough "
"version of git."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:54
msgid ""
"'git pack-refs' appeared in v1.4.4; this command allows tags to be accessed "
"much more efficiently than the traditional 'one-file-per-tag' format.  Older "
"git-native clients can still fetch from a repository that packed and pruned "
"refs (the server side needs to run the up-to-date version of git), but older "
"dumb transports cannot.  Packing of refs is done by an explicit user action, "
"either by use of \"git pack-refs --prune\" command or by use of \"git gc\" "
"command."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:58
msgid ""
"'git -p' to paginate anything -- many commands do pagination by default on a "
"tty.  Introduced between v1.4.1 and v1.4.2; this may surprise old timers."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:60
msgid "'git archive' superseded 'git tar-tree' in v1.4.3;"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:62
msgid "'git cvsserver' was new invention in v1.3.0;"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:65
msgid ""
"'git repo-config', 'git grep', 'git rebase' and 'gitk' were seriously "
"enhanced during v1.4.0 timeperiod."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:68
msgid ""
"'gitweb' became part of git.git during v1.4.0 timeperiod and seriously "
"modified since then."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:73
msgid ""
"reflog is an v1.4.0 invention.  This allows you to name a revision that a "
"branch used to be at (e.g. \"git diff master@{yesterday} master\" allows you "
"to see changes since yesterday's tip of the branch)."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/RelNotes/1.5.0.txt:76
#, no-wrap
msgid "Updates in v1.5.0 since v1.4.4 series"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:79
msgid "Index manipulation"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:83
msgid ""
"git-add is to add contents to the index (aka \"staging area\" for the next "
"commit), whether the file the contents happen to be is an existing one or a "
"newly created one."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:87
msgid ""
"git-add without any argument does not add everything anymore.  Use 'git-"
"add .' instead.  Also you can add otherwise ignored files with an -f option."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:90
msgid ""
"git-add tries to be more friendly to users by offering an interactive mode "
"(\"git-add -i\")."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:94
msgid ""
"git-commit <path> used to refuse to commit if <path> was different between "
"HEAD and the index (i.e. update-index was used on it earlier).  This check "
"was removed."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:98
msgid ""
"git-rm is much saner and safer.  It is used to remove paths from both the "
"index file and the working tree, and makes sure you are not losing any local "
"modification before doing so."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:101
msgid ""
"git-reset <tree> <paths>... can be used to revert index entries for selected "
"paths."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:105
msgid ""
"git-update-index is much less visible.  Many suggestions to use the command "
"in git output and documentation have now been replaced by simpler commands "
"such as \"git add\" or \"git rm\"."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:108
msgid "Repository layout and objects transfer"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:114
msgid ""
"The data for origin repository is stored in the configuration file $GIT_DIR/"
"config, not in $GIT_DIR/remotes/, for newly created clones.  The latter is "
"still supported and there is no need to convert your existing repository if "
"you are already comfortable with your workflow with the layout."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:117
msgid ""
"git-clone always uses what is known as \"separate remote\" layout for a "
"newly created repository with a working tree."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:128
#, no-wrap
msgid ""
"A repository with the separate remote layout starts with only\n"
"one default branch, 'master', to be used for your own\n"
"development.  Unlike the traditional layout that copied all\n"
"the upstream branches into your branch namespace (while\n"
"renaming their 'master' to your 'origin'), the new layout\n"
"puts upstream branches into local \"remote-tracking branches\"\n"
"with their own namespace. These can be referenced with names\n"
"such as \"origin/$upstream_branch_name\" and are stored in\n"
".git/refs/remotes rather than .git/refs/heads where normal\n"
"branches are stored.\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:136
msgid ""
"This layout keeps your own branch namespace less cluttered, avoids name "
"collision with your upstream, makes it possible to automatically track new "
"branches created at the remote after you clone from it, and makes it easier "
"to interact with more than one remote repository (you can use \"git remote\" "
"to add other repositories to track).  There might be some surprises:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:140
msgid ""
"'git branch' does not show the remote tracking branches.  It only lists your "
"own branches.  Use '-r' option to view the tracking branches."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:151
msgid ""
"If you are forking off of a branch obtained from the upstream, you would "
"have done something like 'git branch my-next next', because traditional "
"layout dropped the tracking branch 'next' into your own branch namespace.  "
"With the separate remote layout, you say 'git branch next origin/next', "
"which allows you to use the matching name 'next' for your own branch.  It "
"also allows you to track a remote other than 'origin' (i.e. where you "
"initially cloned from) and fork off of a branch from there the same way (e."
"g. \"git branch mingw j6t/master\")."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:154
#, no-wrap
msgid ""
"Repositories initialized with the traditional layout continue\n"
"to work.\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:163
msgid ""
"New branches that appear on the origin side after a clone is made are also "
"tracked automatically.  This is done with an wildcard refspec \"refs/heads/*:"
"refs/remotes/origin/*\", which older git does not understand, so if you "
"clone with 1.5.0, you would need to downgrade remote.*.fetch in the "
"configuration file to specify each branch you are interested in individually "
"if you plan to fetch into the repository with older versions of git (but why "
"would you?)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:168
msgid ""
"Similarly, wildcard refspec \"refs/heads/*:refs/remotes/me/*\" can be given "
"to \"git-push\" command to update the tracking branches that is used to "
"track the repository you are pushing from on the remote side."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:171
msgid ""
"git-branch and git-show-branch know remote tracking branches (use the "
"command line switch \"-r\" to list only tracked branches)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:175
msgid ""
"git-push can now be used to delete a remote branch or a tag.  This requires "
"the updated git on the remote side (use \"git push <remote> :refs/heads/"
"<branch>\" to delete \"branch\")."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:181
msgid ""
"git-push more aggressively keeps the transferred objects packed.  Earlier we "
"recommended to monitor amount of loose objects and repack regularly, but you "
"should repack when you accumulated too many small packs this way as well.  "
"Updated git-count-objects helps you with this."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:186
msgid ""
"git-fetch also more aggressively keeps the transferred objects packed.  This "
"behavior of git-push and git-fetch can be tweaked with a single "
"configuration transfer.unpacklimit (but usually there should not be any need "
"for a user to tweak it)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:189
msgid ""
"A new command, git-remote, can help you manage your remote tracking branch "
"definitions."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:194
msgid ""
"You may need to specify explicit paths for upload-pack and/or receive-pack "
"due to your ssh daemon configuration on the other end.  This can now be done "
"via remote.*.uploadpack and remote.*.receivepack configuration."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:197
msgid "Bare repositories"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:205
msgid ""
"Certain commands change their behavior in a bare repository (i.e. a "
"repository without associated working tree).  We use a fairly conservative "
"heuristic (if $GIT_DIR is \".git\", or ends with \"/.git\", the repository "
"is not bare) to decide if a repository is bare, but \"core.bare\" "
"configuration variable can be used to override the heuristic when it "
"misidentifies your repository."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:209
msgid ""
"git-fetch used to complain updating the current branch but this is now "
"allowed for a bare repository.  So is the use of 'git-branch -f' to update "
"the current branch."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:212
msgid ""
"Porcelain-ish commands that require a working tree refuses to work in a bare "
"repository."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:215
msgid "Reflog"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:224
msgid ""
"Reflog records the history from the view point of the local repository. In "
"other words, regardless of the real history, the reflog shows the history as "
"seen by one particular repository (this enables you to ask \"what was the "
"current revision in _this_ repository, yesterday at 1pm?\").  This facility "
"is enabled by default for repositories with working trees, and can be "
"accessed with the \"branch@{time}\" and \"branch@{Nth}\" notation."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:228
msgid ""
"\"git show-branch\" learned showing the reflog data with the new -g option.  "
"\"git log\" has -g option to view reflog entries in a more verbose manner."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:231
msgid ""
"git-branch knows how to rename branches and moves existing reflog data from "
"the old branch to the new one."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:239
msgid ""
"In addition to the reflog support in v1.4.4 series, HEAD reference maintains "
"its own log.  \"HEAD@{5.minutes.ago}\" means the commit you were at 5 "
"minutes ago, which takes branch switching into account.  If you want to know "
"where the tip of your current branch was at 5 minutes ago, you need to "
"explicitly say its name (e.g. \"master@{5.minutes.ago}\") or omit the "
"refname altogether i.e. \"@{5.minutes.ago}\"."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:245
msgid ""
"The commits referred to by reflog entries are now protected against "
"pruning.  The new command \"git reflog expire\" can be used to truncate "
"older reflog entries and entries that refer to commits that have been pruned "
"away previously with older versions of git."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:252
#, no-wrap
msgid ""
"Existing repositories that have been using reflog may get\n"
"complaints from fsck-objects and may not be able to run\n"
"git-repack, if you had run git-prune from older git; please\n"
"run \"git reflog expire --stale-fix --all\" first to remove\n"
"reflog entries that refer to commits that are no longer in\n"
"the repository when that happens.\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:255
msgid "Cruft removal"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:261
msgid ""
"We used to say \"old commits are retrievable using reflog and "
"'master@{yesterday}' syntax as long as you haven't run git-prune\".  We no "
"longer have to say the latter half of the above sentence, as git-prune does "
"not remove things reachable from reflog entries."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:266
msgid ""
"There is a toplevel garbage collector script, 'git-gc', that runs periodic "
"cleanup functions, including 'git-repack -a -d', 'git-reflog expire', 'git-"
"pack-refs --prune', and 'git-rerere gc'."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:272
msgid ""
"The output from fsck (\"fsck-objects\" is called just \"fsck\" now, but the "
"old name continues to work) was needlessly alarming in that it warned "
"missing objects that are reachable only from dangling objects.  This has "
"been corrected and the output is much more useful."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:275
msgid "Detached HEAD"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:279
msgid ""
"You can use 'git-checkout' to check out an arbitrary revision or a tag as "
"well, instead of named branches.  This will dissociate your HEAD from the "
"branch you are currently on."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:281
#, no-wrap
msgid "A typical use of this feature is to \"look around\".  E.g.\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:286
msgid ""
"$ git checkout v2.6.16 ... compile, test, etc.  $ git checkout v2.6.17 ... "
"compile, test, etc."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:291
msgid ""
"After detaching your HEAD, you can go back to an existing branch with usual "
"\"git checkout $branch\".  Also you can start a new branch using \"git "
"checkout -b $newbranch\" to start a new branch at that commit."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:296
msgid ""
"You can even pull from other repositories, make merges and commits while "
"your HEAD is detached.  Also you can use \"git reset\" to jump to arbitrary "
"commit, while still keeping your HEAD detached."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:301
#, no-wrap
msgid ""
"Remember that a detached state is volatile, i.e. it will be forgotten\n"
"as soon as you move away from it with the checkout or reset command,\n"
"unless a branch is created from it as mentioned above.  It is also\n"
"possible to rescue a lost detached state from the HEAD reflog.\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:304
msgid "Packed refs"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:310
msgid ""
"Repositories with hundreds of tags have been paying large overhead, both in "
"storage and in runtime, due to the traditional one-ref-per-file format.  A "
"new command, git-pack-refs, can be used to \"pack\" them in more efficient "
"representation (you can let git-gc do this for you)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:314
msgid ""
"Clones and fetches over dumb transports are now aware of packed refs and can "
"download from repositories that use them."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:317
msgid "Configuration"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:321
msgid ""
"configuration related to color setting are consolidated under color.* "
"namespace (older diff.color.*, status.color.* are still supported)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:323
msgid "'git-repo-config' command is accessible as 'git-config' now."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:326
msgid "Updated features"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:332
msgid ""
"git-describe uses better criteria to pick a base ref.  It used to pick the "
"one with the newest timestamp, but now it picks the one that is "
"topologically the closest (that is, among ancestors of commit C, the ref T "
"that has the shortest output from \"git-rev-list T..C\" is chosen)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:336
msgid ""
"git-describe gives the number of commits since the base ref between the "
"refname and the hash suffix.  E.g. the commit one before v2.6.20-rc6 in the "
"kernel repository is:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:338
#, no-wrap
msgid "v2.6.20-rc5-306-ga21b069\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:343
#, no-wrap
msgid ""
"which tells you that its object name begins with a21b069,\n"
"v2.6.20-rc5 is an ancestor of it (meaning, the commit\n"
"contains everything -rc5 has), and there are 306 commits\n"
"since v2.6.20-rc5.\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:346
msgid ""
"git-describe with --abbrev=0 can be used to show only the name of the base "
"ref."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:350
msgid ""
"git-blame learned a new option, --incremental, that tells it to output the "
"blames as they are assigned.  A sample script to use it is also included as "
"contrib/blameview."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:352
msgid "git-blame starts annotating from the working tree by default."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:355
msgid "Less external dependency"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:358
msgid ""
"We no longer require the \"merge\" program from the RCS suite.  All 3-way "
"file-level merges are now done internally."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:362
msgid ""
"The original implementation of git-merge-recursive which was in Python has "
"been removed; we have a C implementation of it now."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:366
msgid ""
"git-shortlog is no longer a Perl script.  It no longer requires output piped "
"from git-log; it can accept revision parameters directly on the command line."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:369
msgid "I18n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:378
msgid ""
"We have always encouraged the commit message to be encoded in UTF-8, but the "
"users are allowed to use legacy encoding as appropriate for their projects.  "
"This will continue to be the case.  However, a non UTF-8 commit encoding "
"_must_ be explicitly set with i18n.commitencoding in the repository where a "
"commit is made; otherwise git-commit-tree will complain if the log message "
"does not look like a valid UTF-8 string."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:388
msgid ""
"The value of i18n.commitencoding in the originating repository is recorded "
"in the commit object on the \"encoding\" header, if it is not UTF-8.  git-"
"log and friends notice this, and re-encodes the message to the log output "
"encoding when displaying, if they are different.  The log output encoding is "
"determined by \"git log --encoding=<encoding>\", i18n.logoutputencoding "
"configuration, or i18n.commitencoding configuration, in the decreasing order "
"of preference, and defaults to UTF-8."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:396
msgid ""
"Tools for e-mailed patch application now default to -u behavior; i.e. it "
"always re-codes from the e-mailed encoding to the encoding specified with "
"i18n.commitencoding.  This unfortunately forces projects that have happily "
"been using a legacy encoding without setting i18n.commitencoding to set the "
"configuration, but taken with other improvement, please excuse us for this "
"very minor one-time inconvenience."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:399
msgid "e-mailed patches"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:401
msgid "See the above I18n section."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:407
msgid ""
"git-format-patch now enables --binary without being asked.  git-am does "
"_not_ default to it, as sending binary patch via e-mail is unusual and is "
"harder to review than textual patches and it is prudent to require the "
"person who is applying the patch to explicitly ask for it."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:411
msgid ""
"The default suffix for git-format-patch output is now \".patch\", not \".txt"
"\".  This can be changed with --suffix=.txt option, or setting the config "
"variable \"format.suffix\" to \".txt\"."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:414
msgid "Foreign SCM interfaces"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/RelNotes/1.5.0.txt:415
#, no-wrap
msgid "- git-svn now requires the Perl SVN"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:416
msgid "libraries, the"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:417
#, no-wrap
msgid "command-line backend was too slow and limited.\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:421
msgid ""
"the 'commit' subcommand of git-svn has been renamed to 'set-tree', and "
"'dcommit' is the recommended replacement for day-to-day work."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:423
msgid "git fast-import backend."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:426
msgid "User support"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:428
msgid "Quite a lot of documentation updates."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:430
msgid "Bash completion scripts have been updated heavily."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:432
msgid "Better error messages for often used Porcelainish commands."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:435
msgid ""
"Git GUI.  This is a simple Tk based graphical interface for common Git "
"operations."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:438
msgid "Sliding mmap"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:444
msgid ""
"We used to assume that we can mmap the whole packfile while in use, but with "
"a large project this consumes huge virtual memory space and truly huge ones "
"would not fit in the userland address space on 32-bit platforms.  We now "
"mmap huge packfile in pieces to avoid this problem."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:447
msgid "Shallow clones"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:452
msgid ""
"There is a partial support for 'shallow' repositories that keeps only recent "
"history.  A 'shallow clone' is created by specifying how deep that truncated "
"history should be (e.g. \"git clone --depth 5 git://some.where/repo.git\")."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:454
#, no-wrap
msgid "Currently a shallow repository has number of limitations:\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:458
msgid ""
"Cloning and fetching _from_ a shallow clone are not supported (nor tested -- "
"so they might work by accident but they are not expected to)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:461
msgid "Pushing from nor into a shallow clone are not expected to work."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:466
msgid ""
"Merging inside a shallow repository would work as long as a merge base is "
"found in the recent history, but otherwise it will be like merging unrelated "
"histories and may result in huge conflicts."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/RelNotes/1.5.0.txt:469
#, no-wrap
msgid ""
"but this would be more than adequate for people who want to\n"
"look at near the tip of a big project with a deep history and\n"
"send patches in e-mail format.\n"
msgstr ""
