# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-11-04 04:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/git-cat-file.txt:2
#, no-wrap
msgid "git-cat-file(1)"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-cat-file.txt:5
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:7
msgid ""
"git-cat-file - Provide content or type and size information for repository "
"objects"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-cat-file.txt:10
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:14
#, no-wrap
msgid ""
"'git cat-file' (-t [--allow-unknown-type]| -s [--allow-unknown-type]| -e | -p | <type> | --textconv | --filters ) [--path=<path>] <object>\n"
"'git cat-file' (--batch[=<format>] | --batch-check[=<format>]) [ --textconv | --filters ] [--follow-symlinks]\n"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-cat-file.txt:16
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:21
msgid ""
"In its first form, the command provides the content or the type of an object "
"in the repository. The type is required unless `-t` or `-p` is used to find "
"the object type, or `-s` is used to find the object size, or `--textconv` or "
"`--filters` is used (which imply type \"blob\")."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:28
msgid ""
"In the second form, a list of objects (separated by linefeeds) is provided "
"on stdin, and the SHA-1, type, and size of each object is printed on stdout. "
"The output format can be overridden using the optional `<format>` argument. "
"If either `--textconv` or `--filters` was specified, the input is expected "
"to list the object names followed by the path name, separated by a single "
"whitespace, so that the appropriate drivers can be determined."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-cat-file.txt:30
#, no-wrap
msgid "OPTIONS"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-cat-file.txt:31
#, no-wrap
msgid "<object>"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:35
msgid ""
"The name of the object to show.  For a more complete list of ways to spell "
"object names, see the \"SPECIFYING REVISIONS\" section in linkgit:"
"gitrevisions[7]."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-cat-file.txt:36
#, no-wrap
msgid "`-t`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:39
msgid "Instead of the content, show the object type identified by `<object>`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-cat-file.txt:40
#, no-wrap
msgid "`-s`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:43
msgid "Instead of the content, show the object size identified by `<object>`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-cat-file.txt:44
#, no-wrap
msgid "`-e`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:48
msgid ""
"Exit with zero status if `<object>` exists and is a valid object. If "
"`<object>` is of an invalid format exit with non-zero and emits an error on "
"stderr."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-cat-file.txt:49
#, no-wrap
msgid "`-p`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:51
msgid "Pretty-print the contents of `<object>` based on its type."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-cat-file.txt:52
#, no-wrap
msgid "<type>"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:59
msgid ""
"Typically this matches the real type of `<object>` but asking for a type "
"that can trivially be dereferenced from the given `<object>` is also "
"permitted.  An example is to ask for a \"tree\" with `<object>` being a "
"commit object that contains it, or to ask for a \"blob\" with `<object>` "
"being a tag object that points at it."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-cat-file.txt:60
#, no-wrap
msgid "`--textconv`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:65
msgid ""
"Show the content as transformed by a textconv filter. In this case, "
"`<object>` has to be of the form `<tree-ish>:<path>`, or `:<path>` in order "
"to apply the filter to the content recorded in the index at `<path>`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-cat-file.txt:66
#, no-wrap
msgid "`--filters`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:71
msgid ""
"Show the content as converted by the filters configured in the current "
"working tree for the given `<path>` (i.e. smudge filters, end-of-line "
"conversion, etc). In this case, `<object>` has to be of the form `<tree-ish>:"
"<path>`, or `:<path>`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-cat-file.txt:72
#, no-wrap
msgid "`--path=<path>`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:76
msgid ""
"For use with `--textconv` or `--filters`, to allow specifying an object name "
"and a path separately, e.g. when it is difficult to figure out the revision "
"from which the blob came."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-cat-file.txt:77
#, no-wrap
msgid "`--batch`"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-cat-file.txt:78
#, no-wrap
msgid "`--batch=<format>`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:84
msgid ""
"Print object information and contents for each object provided on stdin.  "
"May not be combined with any other options or arguments except `--textconv` "
"or `--filters`, in which case the input lines also need to specify the path, "
"separated by whitespace.  See the section `BATCH OUTPUT` below for details."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-cat-file.txt:85
#, no-wrap
msgid "`--batch-check`"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-cat-file.txt:86
#, no-wrap
msgid "`--batch-check=<format>`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:92
msgid ""
"Print object information for each object provided on stdin.  May not be "
"combined with any other options or arguments except `--textconv` or `--"
"filters`, in which case the input lines also need to specify the path, "
"separated by whitespace.  See the section `BATCH OUTPUT` below for details."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-cat-file.txt:93
#, no-wrap
msgid "`--batch-all-objects`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:99
msgid ""
"Instead of reading a list of objects on stdin, perform the requested batch "
"operation on all objects in the repository and any alternate object stores "
"(not just reachable objects).  Requires `--batch` or `--batch-check` be "
"specified. Note that the objects are visited in order sorted by their hashes."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-cat-file.txt:100
#, no-wrap
msgid "`--buffer`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:106
msgid ""
"Normally batch output is flushed after each object is output, so that a "
"process can interactively read and write from `cat-file`. With this option, "
"the output uses normal stdio buffering; this is much more efficient when "
"invoking `--batch-check` on a large number of objects."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-cat-file.txt:107
#, no-wrap
msgid "`--unordered`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:116
msgid ""
"When `--batch-all-objects` is in use, visit objects in an order which may be "
"more efficient for accessing the object contents than hash order. The exact "
"details of the order are unspecified, but if you do not require a specific "
"order, this should generally result in faster output, especially with `--"
"batch`.  Note that `cat-file` will still show each object only once, even if "
"it is stored multiple times in the repository."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-cat-file.txt:117
#, no-wrap
msgid "`--allow-unknown-type`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:119
msgid "Allow `-s` or `-t` to query broken/corrupt objects of unknown type."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-cat-file.txt:120
#, no-wrap
msgid "`--follow-symlinks`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:129
msgid ""
"With `--batch` or `--batch-check`, follow symlinks inside the repository "
"when requesting objects with extended SHA-1 expressions of the form tree-ish:"
"path-in-tree.  Instead of providing output about the link itself, provide "
"output about the linked-to object.  If a symlink points outside the tree-ish "
"(e.g. a link to `/foo` or a root-level link to `../foo`), the portion of the "
"link which is outside the tree will be printed."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:133
msgid ""
"This option does not (currently) work correctly when an object in the index "
"is specified (e.g. `:link` instead of `HEAD:link`) rather than one in the "
"tree."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:136
msgid ""
"This option cannot (currently) be used unless `--batch` or `--batch-check` "
"is used."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:138
msgid "For example, consider a git repository containing:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:145
#, no-wrap
msgid ""
"\tf: a file containing \"hello\\n\"\n"
"\tlink: a symlink to f\n"
"\tdir/link: a symlink to ../f\n"
"\tplink: a symlink to ../f\n"
"\talink: a symlink to /etc/passwd\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:148
msgid ""
"For a regular file `f`, `echo HEAD:f | git cat-file --batch` would print"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:151
#, no-wrap
msgid "\tce013625030ba8dba906f756967f9e9ca394464a blob 6\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:156
msgid ""
"And `echo HEAD:link | git cat-file --batch --follow-symlinks` would print "
"the same thing, as would `HEAD:dir/link`, as they both point at `HEAD:f`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:159
msgid ""
"Without `--follow-symlinks`, these would print data about the symlink "
"itself.  In the case of `HEAD:link`, you would see"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:162
#, no-wrap
msgid "\t4d1ae35ba2c8ec712fa2a379db44ad639ca277bd blob 1\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:166
msgid ""
"Both `plink` and `alink` point outside the tree, so they would respectively "
"print:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:170
#, no-wrap
msgid ""
"\tsymlink 4\n"
"\t../f\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:173
#, no-wrap
msgid ""
"\tsymlink 11\n"
"\t/etc/passwd\n"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-cat-file.txt:177
#, no-wrap
msgid "OUTPUT"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:179
msgid "If `-t` is specified, one of the `<type>`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:181
msgid "If `-s` is specified, the size of the `<object>` in bytes."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:183
msgid "If `-e` is specified, no output, unless the `<object>` is malformed."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:185
msgid "If `-p` is specified, the contents of `<object>` are pretty-printed."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:188
msgid ""
"If `<type>` is specified, the raw (though uncompressed) contents of the "
"`<object>` will be returned."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-cat-file.txt:190
#, no-wrap
msgid "BATCH OUTPUT"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:196
msgid ""
"If `--batch` or `--batch-check` is given, `cat-file` will read objects from "
"stdin, one per line, and print information about them. By default, the whole "
"line is considered as an object, as if it were fed to linkgit:git-rev-"
"parse[1]."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:201
msgid ""
"You can specify the information shown for each object by using a custom "
"`<format>`. The `<format>` is copied literally to stdout for each object, "
"with placeholders of the form `%(atom)` expanded, followed by a newline. The "
"available atoms are:"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-cat-file.txt:202
#, no-wrap
msgid "`objectname`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:204
msgid "The full hex representation of the object name."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-cat-file.txt:205
#, no-wrap
msgid "`objecttype`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:207
msgid "The type of the object (the same as `cat-file -t` reports)."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-cat-file.txt:208
#, no-wrap
msgid "`objectsize`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:211
msgid "The size, in bytes, of the object (the same as `cat-file -s` reports)."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-cat-file.txt:212
#, no-wrap
msgid "`objectsize:disk`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:215
msgid ""
"The size, in bytes, that the object takes up on disk. See the note about on-"
"disk sizes in the `CAVEATS` section below."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-cat-file.txt:216
#, no-wrap
msgid "`deltabase`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:221
msgid ""
"If the object is stored as a delta on-disk, this expands to the full hex "
"representation of the delta base object name.  Otherwise, expands to the "
"null OID (all zeroes). See `CAVEATS` below."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-cat-file.txt:222
#, no-wrap
msgid "`rest`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:228
msgid ""
"If this atom is used in the output string, input lines are split at the "
"first whitespace boundary. All characters before that whitespace are "
"considered to be the object name; characters after that first run of "
"whitespace (i.e., the \"rest\" of the line) are output in place of the `"
"%(rest)` atom."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:231
msgid ""
"If no format is specified, the default format is `%(objectname)  "
"%(objecttype) %(objectsize)`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:235
msgid ""
"If `--batch` is specified, the object information is followed by the object "
"contents (consisting of `%(objectsize)` bytes), followed by a newline."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:237
msgid "For example, `--batch` without a custom format would produce:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-cat-file.txt:241
#, no-wrap
msgid ""
"<oid> SP <type> SP <size> LF\n"
"<contents> LF\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:244
msgid "Whereas `--batch-check='%(objectname) %(objecttype)'` would produce:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-cat-file.txt:247
#, no-wrap
msgid "<oid> SP <type> LF\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:251
msgid ""
"If a name is specified on stdin that cannot be resolved to an object in the "
"repository, then `cat-file` will ignore any custom format and print:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-cat-file.txt:254
#: ../Documentation-sedout/git-cat-file.txt:280
#, no-wrap
msgid "<object> SP missing LF\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:257
msgid ""
"If a name is specified that might refer to more than one object (an "
"ambiguous short sha), then `cat-file` will ignore any custom format and "
"print:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-cat-file.txt:260
#, no-wrap
msgid "<object> SP ambiguous LF\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:265
msgid ""
"If `--follow-symlinks` is used, and a symlink in the repository points "
"outside the repository, then `cat-file` will ignore any custom format and "
"print:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-cat-file.txt:269
#, no-wrap
msgid ""
"symlink SP <size> LF\n"
"<symlink> LF\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:274
msgid ""
"The symlink will either be absolute (beginning with a `/`), or relative to "
"the tree root.  For instance, if dir/link points to `../../foo`, then "
"`<symlink>` will be `../foo`.  `<size>` is the size of the symlink in bytes."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:277
msgid ""
"If `--follow-symlinks` is used, the following error messages will be "
"displayed:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:282
msgid "is printed when the initial symlink requested does not exist."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-cat-file.txt:286
#, no-wrap
msgid ""
"dangling SP <size> LF\n"
"<object> LF\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:289
msgid ""
"is printed when the initial symlink exists, but something that it "
"(transitive-of) points to does not."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-cat-file.txt:293
#, no-wrap
msgid ""
"loop SP <size> LF\n"
"<object> LF\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:296
msgid ""
"is printed for symlink loops (or any symlinks that require more than 40 link "
"resolutions to resolve)."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-cat-file.txt:300
#, no-wrap
msgid ""
"notdir SP <size> LF\n"
"<object> LF\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:303
msgid ""
"is printed when, during symlink resolution, a file is used as a directory "
"name."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-cat-file.txt:305
#, no-wrap
msgid "CAVEATS"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:313
msgid ""
"Note that the sizes of objects on disk are reported accurately, but care "
"should be taken in drawing conclusions about which refs or objects are "
"responsible for disk usage. The size of a packed non-delta object may be "
"much larger than the size of objects which delta against it, but the choice "
"of which object is the base and which is the delta is arbitrary and is "
"subject to change during a repack."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:317
msgid ""
"Note also that multiple copies of an object may be present in the object "
"database; in this case, it is undefined which copy's size or delta base will "
"be reported."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-cat-file.txt:319
#, no-wrap
msgid "GIT"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-cat-file.txt:320
msgid "Part of the linkgit:git[1] suite"
msgstr ""
