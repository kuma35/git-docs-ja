# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-10-01 00:25+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation/git-rev-parse.txt:2
#, no-wrap
msgid "git-rev-parse(1)"
msgstr ""

#. type: Title -
#: ../Documentation/git-rev-parse.txt:5
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:7
msgid "git-rev-parse - Pick out and massage parameters"
msgstr ""

#. type: Title -
#: ../Documentation/git-rev-parse.txt:10
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:13
#, no-wrap
msgid "'git rev-parse' [<options>] <args>...\n"
msgstr ""

#. type: Title -
#: ../Documentation/git-rev-parse.txt:15
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:23
msgid ""
"Many Git porcelainish commands take mixture of flags (i.e. parameters that "
"begin with a dash '-') and parameters meant for the underlying 'git "
"rev-list' command they use internally and flags and parameters for the other "
"commands they use downstream of 'git rev-list'.  This command is used to "
"distinguish between them."
msgstr ""

#. type: Title -
#: ../Documentation/git-rev-parse.txt:26
#, no-wrap
msgid "OPTIONS"
msgstr ""

#. type: Title ~
#: ../Documentation/git-rev-parse.txt:29
#, no-wrap
msgid "Operation Modes"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:32
msgid "Each of these options must appear first on the command line."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:33
#, no-wrap
msgid "--parseopt"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:35
msgid "Use 'git rev-parse' in option parsing mode (see PARSEOPT section below)."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:36
#, no-wrap
msgid "--sq-quote"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:40
msgid ""
"Use 'git rev-parse' in shell quoting mode (see SQ-QUOTE section below). In "
"contrast to the `--sq` option below, this mode does only quoting. Nothing "
"else is done to command input."
msgstr ""

#. type: Title ~
#: ../Documentation/git-rev-parse.txt:42
#, no-wrap
msgid "Options for --parseopt"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:44
#, no-wrap
msgid "--keep-dashdash"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:47
msgid ""
"Only meaningful in `--parseopt` mode. Tells the option parser to echo out "
"the first `--` met instead of skipping it."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:48
#, no-wrap
msgid "--stop-at-non-option"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:52
msgid ""
"Only meaningful in `--parseopt` mode.  Lets the option parser stop at the "
"first non-option argument.  This can be used to parse sub-commands that take "
"options themselves."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:53
#, no-wrap
msgid "--stuck-long"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:56
msgid ""
"Only meaningful in `--parseopt` mode. Output the options in their long form "
"if available, and with their arguments stuck."
msgstr ""

#. type: Title ~
#: ../Documentation/git-rev-parse.txt:58
#, no-wrap
msgid "Options for Filtering"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:60
#, no-wrap
msgid "--revs-only"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:63
msgid "Do not output flags and parameters not meant for 'git rev-list' command."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:64
#, no-wrap
msgid "--no-revs"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:67
msgid "Do not output flags and parameters meant for 'git rev-list' command."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:68
#, no-wrap
msgid "--flags"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:70
msgid "Do not output non-flag parameters."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:71
#, no-wrap
msgid "--no-flags"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:73
msgid "Do not output flag parameters."
msgstr ""

#. type: Title ~
#: ../Documentation/git-rev-parse.txt:75
#, no-wrap
msgid "Options for Output"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:77
#, no-wrap
msgid "--default <arg>"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:80
msgid "If there is no parameter given by the user, use `<arg>` instead."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:81
#, no-wrap
msgid "--prefix <arg>"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:86
msgid ""
"Behave as if 'git rev-parse' was invoked from the `<arg>` subdirectory of "
"the working tree.  Any relative filenames are resolved as if they are "
"prefixed by `<arg>` and will be printed in that form."
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:90
msgid ""
"This can be used to convert arguments to a command run in a subdirectory so "
"that they can still be used after moving to the top-level of the "
"repository.  For example:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-rev-parse.txt:96
#, no-wrap
msgid ""
"prefix=$(git rev-parse --show-prefix)\n"
"cd \"$(git rev-parse --show-toplevel)\"\n"
"# rev-parse provides the -- needed for 'set'\n"
"eval \"set $(git rev-parse --sq --prefix \"$prefix\" -- \"$@\")\"\n"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:98
#, no-wrap
msgid "--verify"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:103
msgid ""
"Verify that exactly one parameter is provided, and that it can be turned "
"into a raw 20-byte SHA-1 that can be used to access the object database. If "
"so, emit it to the standard output; otherwise, error out."
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:112
msgid ""
"If you want to make sure that the output actually names an object in your "
"object database and/or can be used as a specific type of object you require, "
"you can add the `^{type}` peeling operator to the parameter.  For example, "
"`git rev-parse \"$VAR^{commit}\"` will make sure `$VAR` names an existing "
"object that is a commit-ish (i.e. a commit, or an annotated tag that points "
"at a commit).  To make sure that `$VAR` names an existing object of any "
"type, `git rev-parse \"$VAR^{object}\"` can be used."
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:116
msgid ""
"Note that if you are verifying a name from an untrusted source, it is wise "
"to use `--end-of-options` so that the name argument is not mistaken for "
"another option."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:117
#, no-wrap
msgid "-q"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:118
#, no-wrap
msgid "--quiet"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:123
msgid ""
"Only meaningful in `--verify` mode. Do not output an error message if the "
"first argument is not a valid object name; instead exit with non-zero status "
"silently.  SHA-1s for valid object names are printed to stdout on success."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:124
#, no-wrap
msgid "--sq"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:132
msgid ""
"Usually the output is made one line per flag and parameter.  This option "
"makes output a single line, properly quoted for consumption by shell.  "
"Useful when you expect your parameter to contain whitespaces and newlines "
"(e.g. when using pickaxe `-S` with 'git diff-{asterisk}'). In contrast to "
"the `--sq-quote` option, the command input is still interpreted as usual."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:133
#, no-wrap
msgid "--short[=length]"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:138
msgid ""
"Same as `--verify` but shortens the object name to a unique prefix with at "
"least `length` characters. The minimum length is 4, the default is the "
"effective value of the `core.abbrev` configuration variable (see "
"linkgit:git-config[1])."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:139
#, no-wrap
msgid "--not"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:143
msgid ""
"When showing object names, prefix them with '{caret}' and strip '{caret}' "
"prefix from the object names that already have one."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:144
#, no-wrap
msgid "--abbrev-ref[=(strict|loose)]"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:148
msgid ""
"A non-ambiguous short name of the objects name.  The option "
"core.warnAmbiguousRefs is used to select the strict abbreviation mode."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:149
#, no-wrap
msgid "--symbolic"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:153
msgid ""
"Usually the object names are output in SHA-1 form (with possible '{caret}' "
"prefix); this option makes them output in a form as close to the original "
"input as possible."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:154
#, no-wrap
msgid "--symbolic-full-name"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:161
msgid ""
"This is similar to --symbolic, but it omits input that are not refs "
"(i.e. branch or tag names; or more explicitly disambiguating "
"\"heads/master\" form, when you want to name the \"master\" branch when "
"there is an unfortunately named tag \"master\"), and show them as full "
"refnames (e.g. \"refs/heads/master\")."
msgstr ""

#. type: Title ~
#: ../Documentation/git-rev-parse.txt:163
#, no-wrap
msgid "Options for Objects"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:165
#, no-wrap
msgid "--all"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:167
msgid "Show all refs found in `refs/`."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:168
#, no-wrap
msgid "--branches[=pattern]"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:169
#, no-wrap
msgid "--tags[=pattern]"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:170
#, no-wrap
msgid "--remotes[=pattern]"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:174
msgid ""
"Show all branches, tags, or remote-tracking branches, respectively (i.e., "
"refs found in `refs/heads`, `refs/tags`, or `refs/remotes`, respectively)."
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:178
msgid ""
"If a `pattern` is given, only refs matching the given shell glob are shown.  "
"If the pattern does not contain a globbing character (`?`, `*`, or `[`), it "
"is turned into a prefix match by appending `/*`."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:179
#, no-wrap
msgid "--glob=pattern"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:185
msgid ""
"Show all refs matching the shell glob pattern `pattern`. If the pattern does "
"not start with `refs/`, this is automatically prepended.  If the pattern "
"does not contain a globbing character (`?`, `*`, or `[`), it is turned into "
"a prefix match by appending `/*`."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:186
#, no-wrap
msgid "--exclude=<glob-pattern>"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:193
msgid ""
"Do not include refs matching '<glob-pattern>' that the next `--all`, "
"`--branches`, `--tags`, `--remotes`, or `--glob` would otherwise "
"consider. Repetitions of this option accumulate exclusion patterns up to the "
"next `--all`, `--branches`, `--tags`, `--remotes`, or `--glob` option (other "
"options or arguments do not clear accumulated patterns)."
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:199
msgid ""
"The patterns given should not begin with `refs/heads`, `refs/tags`, or "
"`refs/remotes` when applied to `--branches`, `--tags`, or `--remotes`, "
"respectively, and they must begin with `refs/` when applied to `--glob` or "
"`--all`. If a trailing '/{asterisk}' is intended, it must be given "
"explicitly."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:200
#, no-wrap
msgid "--disambiguate=<prefix>"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:205
msgid ""
"Show every object whose name begins with the given prefix.  The <prefix> "
"must be at least 4 hexadecimal digits long to avoid listing each and every "
"object in the repository by mistake."
msgstr ""

#. type: Title ~
#: ../Documentation/git-rev-parse.txt:207
#, no-wrap
msgid "Options for Files"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:209
#, no-wrap
msgid "--local-env-vars"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:214
msgid ""
"List the GIT_* environment variables that are local to the repository "
"(e.g. GIT_DIR or GIT_WORK_TREE, but not GIT_EDITOR).  Only the names of the "
"variables are listed, not their value, even if they are set."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:215
#, no-wrap
msgid "--path-format=(absolute|relative)"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:220
msgid ""
"Controls the behavior of certain other options. If specified as absolute, "
"the paths printed by those options will be absolute and canonical. If "
"specified as relative, the paths will be relative to the current working "
"directory if that is possible.  The default is option specific."
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:224
msgid ""
"This option may be specified multiple times and affects only the arguments "
"that follow it on the command line, either to the end of the command line or "
"the next instance of this option."
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:226
msgid "The following options are modified by `--path-format`:"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:227
#, no-wrap
msgid "--git-dir"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:231
msgid ""
"Show `$GIT_DIR` if defined. Otherwise show the path to the .git "
"directory. The path shown, when relative, is relative to the current working "
"directory."
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:235
msgid ""
"If `$GIT_DIR` is not defined and the current directory is not detected to "
"lie in a Git repository or work tree print a message to stderr and exit with "
"nonzero status."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:236
#, no-wrap
msgid "--git-common-dir"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:238
msgid "Show `$GIT_COMMON_DIR` if defined, else `$GIT_DIR`."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:239
#, no-wrap
msgid "--resolve-git-dir <path>"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:244
msgid ""
"Check if <path> is a valid repository or a gitfile that points at a valid "
"repository, and print the location of the repository.  If <path> is a "
"gitfile then the resolved path to the real repository is printed."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:245
#, no-wrap
msgid "--git-path <path>"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:251
msgid ""
"Resolve \"$GIT_DIR/<path>\" and takes other path relocation variables such "
"as $GIT_OBJECT_DIRECTORY, $GIT_INDEX_FILE... into account. For example, if "
"$GIT_OBJECT_DIRECTORY is set to /foo/bar then \"git rev-parse --git-path "
"objects/abc\" returns /foo/bar/abc."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:252
#, no-wrap
msgid "--show-toplevel"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:255
msgid ""
"Show the (by default, absolute) path of the top-level directory of the "
"working tree. If there is no working tree, report an error."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:256
#, no-wrap
msgid "--show-superproject-working-tree"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:261
msgid ""
"Show the absolute path of the root of the superproject's working tree (if "
"exists) that uses the current repository as its submodule.  Outputs nothing "
"if the current repository is not used as a submodule by any project."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:262
#, no-wrap
msgid "--shared-index-path"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:265
msgid ""
"Show the path to the shared index file in split index mode, or empty if not "
"in split-index mode."
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:267
msgid "The following options are unaffected by `--path-format`:"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:268
#, no-wrap
msgid "--absolute-git-dir"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:271
msgid "Like `--git-dir`, but its output is always the canonicalized absolute path."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:272
#, no-wrap
msgid "--is-inside-git-dir"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:275
msgid ""
"When the current working directory is below the repository directory print "
"\"true\", otherwise \"false\"."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:276
#, no-wrap
msgid "--is-inside-work-tree"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:279
msgid ""
"When the current working directory is inside the work tree of the repository "
"print \"true\", otherwise \"false\"."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:280
#, no-wrap
msgid "--is-bare-repository"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:282
msgid "When the repository is bare print \"true\", otherwise \"false\"."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:283
#, no-wrap
msgid "--is-shallow-repository"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:285
msgid "When the repository is shallow print \"true\", otherwise \"false\"."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:286
#, no-wrap
msgid "--show-cdup"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:290
msgid ""
"When the command is invoked from a subdirectory, show the path of the "
"top-level directory relative to the current directory (typically a sequence "
"of \"../\", or an empty string)."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:291
#, no-wrap
msgid "--show-prefix"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:295
msgid ""
"When the command is invoked from a subdirectory, show the path of the "
"current directory relative to the top-level directory."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:296
#, no-wrap
msgid "--show-object-format[=(storage|input|output)]"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:301
msgid ""
"Show the object format (hash algorithm) used for the repository for storage "
"inside the `.git` directory, input, or output. For input, multiple "
"algorithms may be printed, space-separated.  If not specified, the default "
"is \"storage\"."
msgstr ""

#. type: Title ~
#: ../Documentation/git-rev-parse.txt:304
#, no-wrap
msgid "Other Options"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:306
#, no-wrap
msgid "--since=datestring"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:307
#, no-wrap
msgid "--after=datestring"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:310
msgid ""
"Parse the date string, and output the corresponding --max-age= parameter for "
"'git rev-list'."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:311
#, no-wrap
msgid "--until=datestring"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:312
#, no-wrap
msgid "--before=datestring"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:315
msgid ""
"Parse the date string, and output the corresponding --min-age= parameter for "
"'git rev-list'."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:316
#, no-wrap
msgid "<args>..."
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:318
msgid "Flags and parameters to be parsed."
msgstr ""

#. type: Title -
#: ../Documentation/git-rev-parse.txt:323
#, no-wrap
msgid "PARSEOPT"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:328
msgid ""
"In `--parseopt` mode, 'git rev-parse' helps massaging options to bring to "
"shell scripts the same facilities C builtins have. It works as an option "
"normalizer (e.g. splits single switches aggregate values), a bit like "
"`getopt(1)` does."
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:333
msgid ""
"It takes on the standard input the specification of the options to parse and "
"understand, and echoes on the standard output a string suitable for `sh(1)` "
"`eval` to replace the arguments with normalized ones.  In case of error, it "
"outputs usage on the standard error stream, and exits with code 129."
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:336
msgid ""
"Note: Make sure you quote the result when passing it to `eval`.  See below "
"for an example."
msgstr ""

#. type: Title ~
#: ../Documentation/git-rev-parse.txt:338
#, no-wrap
msgid "Input Format"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:344
msgid ""
"'git rev-parse --parseopt' input format is fully text based. It has two "
"parts, separated by a line that contains only `--`. The lines before the "
"separator (should be one or more) are used for the usage.  The lines after "
"the separator describe the options."
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:346
msgid "Each line of options has this format:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-rev-parse.txt:349
#, no-wrap
msgid "<opt-spec><flags>*<arg-hint>? SP+ help LF\n"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:351
#, no-wrap
msgid "`<opt-spec>`"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:356
msgid ""
"its format is the short option character, then the long option name "
"separated by a comma. Both parts are not required, though at least one is "
"necessary. May not contain any of the `<flags>` characters.  `h,help`, "
"`dry-run` and `f` are examples of correct `<opt-spec>`."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:357
#, no-wrap
msgid "`<flags>`"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:359
msgid "`<flags>` are of `*`, `=`, `?` or `!`."
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:360
msgid "Use `=` if the option takes an argument."
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:364
msgid ""
"Use `?` to mean that the option takes an optional argument. You probably "
"want to use the `--stuck-long` mode to be able to unambiguously parse the "
"optional argument."
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:368
msgid ""
"Use `*` to mean that this option should not be listed in the usage generated "
"for the `-h` argument. It's shown for `--help-all` as documented in "
"linkgit:gitcli[7]."
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:370
msgid "Use `!` to not make the corresponding negated long option available."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-rev-parse.txt:371
#, no-wrap
msgid "`<arg-hint>`"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:376
msgid ""
"`<arg-hint>`, if specified, is used as a name of the argument in the help "
"output, for options that take arguments. `<arg-hint>` is terminated by the "
"first whitespace.  It is customary to use a dash to separate words in a "
"multi-word argument hint."
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:379
msgid ""
"The remainder of the line, after stripping the spaces, is used as the help "
"associated to the option."
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:383
msgid ""
"Blank lines are ignored, and lines that don't match this specification are "
"used as option group headers (start the line with a space to create such "
"lines on purpose)."
msgstr ""

#. type: Title ~
#: ../Documentation/git-rev-parse.txt:385 ../Documentation/git-rev-parse.txt:441
#, no-wrap
msgid "Example"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-rev-parse.txt:390
#, no-wrap
msgid ""
"OPTS_SPEC=\"\\\n"
"some-command [<options>] <args>...\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-rev-parse.txt:392
#, no-wrap
msgid ""
"some-command does foo and bar!\n"
"--\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-rev-parse.txt:394
#, no-wrap
msgid "h,help    show the help\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-rev-parse.txt:399
#, no-wrap
msgid ""
"foo       some nifty option --foo\n"
"bar=      some cool option --bar with an argument\n"
"baz=arg   another cool option --baz with a named argument\n"
"qux?path  qux may take a path argument but has meaning by itself\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-rev-parse.txt:402
#, no-wrap
msgid ""
"  An option group Header\n"
"C?        option C with an optional argument\"\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-rev-parse.txt:404
#, no-wrap
msgid ""
"eval \"$(echo \"$OPTS_SPEC\" | git rev-parse --parseopt -- \"$@\" || echo "
"exit $?)\"\n"
msgstr ""

#. type: Title ~
#: ../Documentation/git-rev-parse.txt:408
#, no-wrap
msgid "Usage text"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:412
msgid ""
"When `\"$@\"` is `-h` or `--help` in the above example, the following usage "
"text would be shown:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-rev-parse.txt:415
#, no-wrap
msgid "usage: some-command [<options>] <args>...\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-rev-parse.txt:417
#, no-wrap
msgid "    some-command does foo and bar!\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-rev-parse.txt:423
#, no-wrap
msgid ""
"    -h, --help            show the help\n"
"    --foo                 some nifty option --foo\n"
"    --bar ...             some cool option --bar with an argument\n"
"    --baz <arg>           another cool option --baz with a named argument\n"
"    --qux[=<path>]        qux may take a path argument but has meaning by "
"itself\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-rev-parse.txt:426
#, no-wrap
msgid ""
"An option group Header\n"
"    -C[...]               option C with an optional argument\n"
msgstr ""

#. type: Title -
#: ../Documentation/git-rev-parse.txt:429
#, no-wrap
msgid "SQ-QUOTE"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:435
msgid ""
"In `--sq-quote` mode, 'git rev-parse' echoes on the standard output a single "
"line suitable for `sh(1)` `eval`. This line is made by normalizing the "
"arguments following `--sq-quote`. Nothing other than quoting the arguments "
"is done."
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:439
msgid ""
"If you want command input to still be interpreted as usual by 'git "
"rev-parse' before the output is shell quoted, see the `--sq` option."
msgstr ""

#. type: delimited block -
#: ../Documentation/git-rev-parse.txt:451
#, no-wrap
msgid ""
"$ cat >your-git-script.sh <<\\EOF\n"
"#!/bin/sh\n"
"args=$(git rev-parse --sq-quote \"$@\")   # quote user-supplied arguments\n"
"command=\"git frotz -n24 $args\"          # and use it inside a "
"handcrafted\n"
"\t\t\t\t\t# command line\n"
"eval \"$command\"\n"
"EOF\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-rev-parse.txt:453
#, no-wrap
msgid "$ sh your-git-script.sh \"a b'c\"\n"
msgstr ""

#. type: Title -
#: ../Documentation/git-rev-parse.txt:456
#, no-wrap
msgid "EXAMPLES"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:459
msgid "Print the object name of the current commit:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-rev-parse.txt:462
#, no-wrap
msgid "$ git rev-parse --verify HEAD\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:465
msgid "Print the commit object name from the revision in the $REV shell variable:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-rev-parse.txt:468
#, no-wrap
msgid "$ git rev-parse --verify --end-of-options $REV^{commit}\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:471
msgid "This will error out if $REV is empty or not a valid revision."
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:473
msgid "Similar to above:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-rev-parse.txt:476
#, no-wrap
msgid "$ git rev-parse --default master --verify --end-of-options $REV\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:479
msgid "but if $REV is empty, the commit object name from master will be printed."
msgstr ""

#. type: Title -
#: ../Documentation/git-rev-parse.txt:481
#, no-wrap
msgid "GIT"
msgstr ""

#. type: Plain text
#: ../Documentation/git-rev-parse.txt:482
msgid "Part of the linkgit:git[1] suite"
msgstr ""
