# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 0.0\n"
"POT-Creation-Date: 2021-11-04 04:37+0900\n"
"PO-Revision-Date: 2021-12-30 13:19+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/git-rev-parse.txt:2
#, no-wrap
msgid "git-rev-parse(1)"
msgstr "git-rev-parse(1)"

#. type: Title -
#: ../Documentation-sedout/git-rev-parse.txt:5
#, no-wrap
msgid "NAME"
msgstr "NAME"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:7
msgid "git-rev-parse - Pick out and massage parameters"
msgstr "git-rev-parse - パラメータを選択してもみもみします。"

#. type: Title -
#: ../Documentation-sedout/git-rev-parse.txt:10
#, no-wrap
msgid "SYNOPSIS"
msgstr "SYNOPSIS"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:13
#, no-wrap
msgid "'git rev-parse' [<options>] <args>...\n"
msgstr "'git rev-parse' [<options>] <args>...\n"

#. type: Title -
#: ../Documentation-sedout/git-rev-parse.txt:15
#, no-wrap
msgid "DESCRIPTION"
msgstr "DESCRIPTION"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:23
msgid ""
"Many Git porcelainish commands take mixture of flags (i.e. parameters that "
"begin with a dash '-') and parameters meant for the underlying 'git rev-"
"list' command they use internally and flags and parameters for the other "
"commands they use downstream of 'git rev-list'.  This command is used to "
"distinguish between them."
msgstr "多くのGit磁器コマンドは、内部で使用されベースとなる `git rev-list` コマンド用のフラグとパラメーターの組み合わせと、 `git rev-list` の下流で使用する他のコマンドのフラグとパラメーターの組み合わせを使用します。このコマンドは、それらを識別するために使用されます。"

#. type: Title -
#: ../Documentation-sedout/git-rev-parse.txt:26
#, no-wrap
msgid "OPTIONS"
msgstr "OPTIONS"

#. type: Title ~
#: ../Documentation-sedout/git-rev-parse.txt:29
#, no-wrap
msgid "Operation Modes"
msgstr "Operation Modes"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:32
msgid "Each of these options must appear first on the command line."
msgstr "これらの各オプションは、コマンドラインの最初にある必要があります。"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:33
#, no-wrap
msgid "`--parseopt`"
msgstr "`--parseopt`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:35
msgid ""
"Use 'git rev-parse' in option parsing mode (see PARSEOPT section below)."
msgstr "オプション解析モードで `git rev-parse` を使用します(以下の PARSEOPT セクションを参照)。"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:36
#, no-wrap
msgid "`--sq-quote`"
msgstr "`--sq-quote`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:40
msgid ""
"Use 'git rev-parse' in shell quoting mode (see SQ-QUOTE section below). In "
"contrast to the `--sq` option below, this mode does only quoting. Nothing "
"else is done to command input."
msgstr "シェルクォートモードで 'git rev-parse' を使用します(以下の SQ-QUOTE セクションを参照)。以下の `--sq` オプションとは対照的に、このモードはクォートのみを実行します。コマンド入力に対して他に何も行われません。"

#. type: Title ~
#: ../Documentation-sedout/git-rev-parse.txt:42
#, no-wrap
msgid "Options for --parseopt"
msgstr "Options for `--parseopt`"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:44
#, no-wrap
msgid "`--keep-dashdash`"
msgstr "`--keep-dashdash`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:47
msgid ""
"Only meaningful in `--parseopt` mode. Tells the option parser to echo out "
"the first `--` met instead of skipping it."
msgstr "`--parseopt` モードでのみ意味があります。 オプションパーサーに、最初に出会った `--` をスキップするのではなく、エコー出力(echo out)するように指示します。"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:48
#, no-wrap
msgid "`--stop-at-non-option`"
msgstr "`--stop-at-non-option`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:52
msgid ""
"Only meaningful in `--parseopt` mode.  Lets the option parser stop at the "
"first non-option argument.  This can be used to parse sub-commands that take "
"options themselves."
msgstr "`--parseopt` モードでのみ意味があります。オプションパーサーを最初の非オプション引数で停止させます。これは、オプション自体を受け取るサブコマンドを解析するために使用できます。"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:53
#, no-wrap
msgid "`--stuck-long`"
msgstr "`--stuck-long`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:56
msgid ""
"Only meaningful in `--parseopt` mode. Output the options in their long form "
"if available, and with their arguments stuck."
msgstr "`--parseopt` モードでのみ意味があります。可能な場合は長い形式でオプションを出力し、それらの引数を固定(stick)します。"

#. type: Title ~
#: ../Documentation-sedout/git-rev-parse.txt:58
#, no-wrap
msgid "Options for Filtering"
msgstr "Options for Filtering"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:60
#, no-wrap
msgid "`--revs-only`"
msgstr "`--revs-only`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:63
msgid ""
"Do not output flags and parameters not meant for 'git rev-list' command."
msgstr "`git rev-list` コマンド用ではないフラグやパラメーターを出力しないでください。"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:64
#, no-wrap
msgid "`--no-revs`"
msgstr "`--no-revs`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:67
msgid "Do not output flags and parameters meant for 'git rev-list' command."
msgstr "`git rev-list` コマンド用のフラグとパラメーターを出力しないでください。"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:68
#, no-wrap
msgid "`--flags`"
msgstr "`--flags`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:70
msgid "Do not output non-flag parameters."
msgstr "非フラグパラメータを出力しないでください。"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:71
#, no-wrap
msgid "`--no-flags`"
msgstr "`--no-flags`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:73
msgid "Do not output flag parameters."
msgstr "フラグパラメータを出力しないでください。"

#. type: Title ~
#: ../Documentation-sedout/git-rev-parse.txt:75
#, no-wrap
msgid "Options for Output"
msgstr "Options for Output"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:77
#, no-wrap
msgid "`--default <arg>`"
msgstr "`--default <arg>`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:80
msgid "If there is no parameter given by the user, use `<arg>` instead."
msgstr "ユーザーが指定したパラメーターがない場合は、代わりに `<arg>` を使用してください。"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:81
#, no-wrap
msgid "`--prefix <arg>`"
msgstr "`--prefix <arg>`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:86
msgid ""
"Behave as if 'git rev-parse' was invoked from the `<arg>` subdirectory of "
"the working tree.  Any relative filenames are resolved as if they are "
"prefixed by `<arg>` and will be printed in that form."
msgstr "`git rev-parse` が作業ツリーの `<arg>` サブディレクトリから呼び出されたかのように動作します。相対ファイル名は、接頭辞が `<arg>` であるかのように解決され、その形式で出力されます。"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:90
msgid ""
"This can be used to convert arguments to a command run in a subdirectory so "
"that they can still be used after moving to the top-level of the "
"repository.  For example:"
msgstr "これを使用して、引数をサブディレクトリで実行されるコマンドに変換し、リポジトリの最上位に移動した後も使用できるようにすることができます。 例えば:"

#. type: delimited block -
#: ../Documentation-sedout/git-rev-parse.txt:96
#, no-wrap
msgid ""
"prefix=$(git rev-parse --show-prefix)\n"
"cd \"$(git rev-parse --show-toplevel)\"\n"
"# rev-parse provides the -- needed for 'set'\n"
"eval \"set $(git rev-parse --sq --prefix \"$prefix\" -- \"$@\")\"\n"
msgstr ""
"prefix=$(git rev-parse --show-prefix)\n"
"cd \"$(git rev-parse --show-toplevel)\"\n"
"# rev-parse provides the -- needed for 'set'\n"
"eval \"set $(git rev-parse --sq --prefix \"$prefix\" -- \"$@\")\"\n"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:98
#, no-wrap
msgid "`--verify`"
msgstr "`--verify`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:103
msgid ""
"Verify that exactly one parameter is provided, and that it can be turned "
"into a raw 20-byte SHA-1 that can be used to access the object database. If "
"so, emit it to the standard output; otherwise, error out."
msgstr "正確に1つのパラメーターが提供されていること、およびそれがオブジェクト・データベースへのアクセスに使用できる生の20バイトのSHA-1に変換できることを検証します。もしそうなら、それを標準出力に出力します。それ以外の場合は、エラー出力になります。"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:112
msgid ""
"If you want to make sure that the output actually names an object in your "
"object database and/or can be used as a specific type of object you require, "
"you can add the `^{type}` peeling operator to the parameter.  For example, "
"`git rev-parse \"$VAR^{commit}\"` will make sure `$VAR` names an existing "
"object that is a commit-ish (i.e. a commit, or an annotated tag that points "
"at a commit).  To make sure that `$VAR` names an existing object of any "
"type, `git rev-parse \"$VAR^{object}\"` can be used."
msgstr "出力が実際にオブジェクトデータベース内のオブジェクトに名前を付けていること、および/または必要な特定のタイプのオブジェクトとして使用できることを確認したい場合は、パラメータに `^{type}` 皮むき演算子(peeling operator)を追加できます。 たとえば、 `git rev-parse \"$VAR^{commit}\"` は、 `$VAR` がコミットっぽい既存のオブジェクト(つまりコミット、またはコミットを指す注釈付きタグ)に名前を付けることを確認します。 `$VAR` が任意のタイプの既存のオブジェクトに名前を付けるようにするには、 `git rev-parse \"$VAR^{object}\"` を使用できます。"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:116
msgid ""
"Note that if you are verifying a name from an untrusted source, it is wise "
"to use `--end-of-options` so that the name argument is not mistaken for "
"another option."
msgstr "注意: 信頼できないソースからの名前を検証(verify)する場合は、name引数が別のオプションと間違えられないように、 `--end-of-options` の使用が賢明です。"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:117
#, no-wrap
msgid "`-q`"
msgstr "`-q`"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:118
#, no-wrap
msgid "`--quiet`"
msgstr "`--quiet`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:123
msgid ""
"Only meaningful in `--verify` mode. Do not output an error message if the "
"first argument is not a valid object name; instead exit with non-zero status "
"silently.  SHA-1s for valid object names are printed to stdout on success."
msgstr "`--verify` モードでのみ意味があります。最初の引数が有効なオブジェクト名でない場合は、エラーメッセージを出力しないでください。代わりに、ゼロ以外のステータスで黙って終了(exit)します。有効なオブジェクト名のSHA-1は、成功するとstdoutに出力されます。"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:124
#, no-wrap
msgid "`--sq`"
msgstr "`--sq`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:132
msgid ""
"Usually the output is made one line per flag and parameter.  This option "
"makes output a single line, properly quoted for consumption by shell.  "
"Useful when you expect your parameter to contain whitespaces and newlines (e."
"g. when using pickaxe `-S` with 'git diff-{asterisk}'). In contrast to the "
"`--sq-quote` option, the command input is still interpreted as usual."
msgstr "通常、出力はフラグとパラメータごとに1行になります。このオプションは、シェルによって消費されるための適切に引用された1行の出力を作成します。パラメータに空白と改行が含まれていると予想される場合に便利です(たとえば、  pickaxe `-S` with 'git diff-{asterisk}' )。 `--sq-quote` オプションとは対照的に、コマンド入力は通常どおり解釈されます。"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:133
#, no-wrap
msgid "`--short[=length]`"
msgstr "`--short[=length]`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:138
msgid ""
"Same as `--verify` but shortens the object name to a unique prefix with at "
"least `length` characters. The minimum length is 4, the default is the "
"effective value of the `core.abbrev` configuration variable (see linkgit:git-"
"config[1])."
msgstr "`--verify` と同じですが、オブジェクト名を少なくとも `length` 文字の一意のプレフィックスに短縮します。最小の長さは4で、デフォルトは `core.abbrev` 構成変数の有効な値です(linkgit:git-config[1]を参照)。"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:139
#, no-wrap
msgid "`--not`"
msgstr "`--not`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:143
msgid ""
"When showing object names, prefix them with '{caret}' and strip '{caret}' "
"prefix from the object names that already have one."
msgstr "オブジェクト名を表示するときは、それらに `{caret}` というプレフィックスを付け、逆に既に、 `{caret}` プレフィックスを持っているオブジェクト名からは `{caret}` プレフィックスを削除します。"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:144
#, no-wrap
msgid "`--abbrev-ref[=(strict|loose)]`"
msgstr "`--abbrev-ref[=(strict|loose)]`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:148
msgid ""
"A non-ambiguous short name of the objects name.  The option core."
"warnAmbiguousRefs is used to select the strict abbreviation mode."
msgstr "オブジェクト名のあいまいでない短い名前。オプション core.warnAmbiguousRefs は、厳密な省略形モードを選択するために使用されます。"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:149
#, no-wrap
msgid "`--symbolic`"
msgstr "`--symbolic`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:153
msgid ""
"Usually the object names are output in SHA-1 form (with possible '{caret}' "
"prefix); this option makes them output in a form as close to the original "
"input as possible."
msgstr "通常、オブジェクト名はSHA-1形式で出力されます(可能な場合は `{caret}` プレフィックス付き)。このオプションを使用すると、入力されたオリジナルにできるだけ近い形式で出力されます。"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:154
#, no-wrap
msgid "`--symbolic-full-name`"
msgstr "`--symbolic-full-name`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:161
msgid ""
"This is similar to --symbolic, but it omits input that are not refs (i.e. "
"branch or tag names; or more explicitly disambiguating \"heads/master\" "
"form, when you want to name the \"master\" branch when there is an "
"unfortunately named tag \"master\"), and show them as full refnames (e.g. "
"\"refs/heads/master\")."
msgstr "これは `--symbolic` に似ていますが、ref(つまり、ブランチ名とタグ名。または、残念ながら `master` と名付けられたタグがあるとき `master` ブランチに名前を付けたい場合はより明確な `heads/master` 形式である)ではない入力を省略し、完全なrefname(例: \"refs/heads/master\")として表示します。"

#. type: Title ~
#: ../Documentation-sedout/git-rev-parse.txt:163
#, no-wrap
msgid "Options for Objects"
msgstr "Options for Objects"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:165
#, no-wrap
msgid "`--all`"
msgstr "`--all`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:167
msgid "Show all refs found in `refs/`."
msgstr "`refs/` で見つかったすべての参照を表示します。"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:168
#, no-wrap
msgid "`--branches[=pattern]`"
msgstr "`--branches[=pattern]`"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:169
#, no-wrap
msgid "`--tags[=pattern]`"
msgstr "`--tags[=pattern]`"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:170
#, no-wrap
msgid "`--remotes[=pattern]`"
msgstr "`--remotes[=pattern]`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:174
msgid ""
"Show all branches, tags, or remote-tracking branches, respectively (i.e., "
"refs found in `refs/heads`, `refs/tags`, or `refs/remotes`, respectively)."
msgstr "すべてのブランチまたはタグまたはリモートトラッキングブランチをそれぞれ表示します(つまり、それぞれ `refs/heads` または `refs/tags` または `refs/remotes` で見つかったref)。"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:178
msgid ""
"If a `pattern` is given, only refs matching the given shell glob are shown.  "
"If the pattern does not contain a globbing character (`?`, `*`, or `[`), it "
"is turned into a prefix match by appending `/*`."
msgstr "`pattern` が指定されている場合、指定されたシェルグロブに一致するrefのみが表示されます。パターンにグロビング文字(`?` または `*` または `[`)が含まれていない場合は、 `/*` を追加することでプレフィックス一致に変換されます。"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:179
#, no-wrap
msgid "`--glob=pattern`"
msgstr "`--glob=pattern`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:185
msgid ""
"Show all refs matching the shell glob pattern `pattern`. If the pattern does "
"not start with `refs/`, this is automatically prepended.  If the pattern "
"does not contain a globbing character (`?`, `*`, or `[`), it is turned into "
"a prefix match by appending `/*`."
msgstr "シェルグロブパターン `pattern` に一致するすべてのrefを表示します。 パターンが `refs/` で始まらない場合、自動的に先頭に追加されます。パターンにグロビング文字(`?` または `*` または `[`)が含まれていない場合は、 `/*` を追加することでプレフィックス一致に変換されます。"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:186
#, no-wrap
msgid "`--exclude=<glob-pattern>`"
msgstr "`--exclude=<glob-pattern>`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:193
msgid ""
"Do not include refs matching '<glob-pattern>' that the next `--all`, `--"
"branches`, `--tags`, `--remotes`, or `--glob` would otherwise consider. "
"Repetitions of this option accumulate exclusion patterns up to the next `--"
"all`, `--branches`, `--tags`, `--remotes`, or `--glob` option (other options "
"or arguments do not clear accumulated patterns)."
msgstr "このオプションに続く `--all` または `--branches` または `--tags` または `--remotes` または `--glob` がそれぞれ考慮する '<glob-pattern>' に一致するrefを含めないでください。このオプションを繰り返すと、次の `--all` または `--branches` または `--tags` または `--remotes` または `--glob` オプションまで除外パターンが蓄積されます(他のオプションや引数は蓄積されたパターンをクリアしませんされません)。"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:199
msgid ""
"The patterns given should not begin with `refs/heads`, `refs/tags`, or `refs/"
"remotes` when applied to `--branches`, `--tags`, or `--remotes`, "
"respectively, and they must begin with `refs/` when applied to `--glob` or "
"`--all`. If a trailing '/{asterisk}' is intended, it must be given "
"explicitly."
msgstr "与えられたパターンは、それぞれ `--branches` または `--tags` または `--remotes` に適用される場合、それぞれ `refs/heads` 、 `refs/tags` 、`refs/remotes` で始まるべきではありません。 `--glob` または `--all` に適用する場合は、 `refs/` で始める必要があります。末尾の '/{asterisk}' を意図している場合は、それを明示的に指定する必要があります。"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:200
#, no-wrap
msgid "`--disambiguate=<prefix>`"
msgstr "`--disambiguate=<prefix>`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:205
msgid ""
"Show every object whose name begins with the given prefix.  The <prefix> "
"must be at least 4 hexadecimal digits long to avoid listing each and every "
"object in the repository by mistake."
msgstr "名前が、指定されたプレフィックスで始まるすべてのオブジェクトを表示します。 <prefix> は、リポジトリ内のすべてのオブジェクトを誤ってリストしないように、少なくとも4桁の16進数である必要があります。"

#. type: Title ~
#: ../Documentation-sedout/git-rev-parse.txt:207
#, no-wrap
msgid "Options for Files"
msgstr "Options for Files"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:209
#, no-wrap
msgid "`--local-env-vars`"
msgstr "`--local-env-vars`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:214
msgid ""
"List the GIT_* environment variables that are local to the repository (e.g. "
"GIT_DIR or GIT_WORK_TREE, but not GIT_EDITOR).  Only the names of the "
"variables are listed, not their value, even if they are set."
msgstr "リポジトリローカルな GIT_* 環境変数を一覧表示します(例: GIT_DIRまたはGIT_WORK_TREE、ただしGIT_EDITORは除く)。 変数が設定されている場合でも、変数の名前のみがリストされ、値はリストされません。"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:215
#, no-wrap
msgid "`--path-format=(absolute|relative)`"
msgstr "`--path-format=(absolute|relative)`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:220
msgid ""
"Controls the behavior of certain other options. If specified as absolute, "
"the paths printed by those options will be absolute and canonical. If "
"specified as relative, the paths will be relative to the current working "
"directory if that is possible.  The default is option specific."
msgstr "他の特定のオプションの動作を制御します。absolute(絶対)を指定すると、これらのオプションによって出力されるパスは絶対パスかつ正規化されます。relative(相対)を指定すると、可能であれば、パスは現在の作業ディレクトリからの相対パスになります。デフォルトは対象の、他の特定のオプションそれぞれ固有です。"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:224
msgid ""
"This option may be specified multiple times and affects only the arguments "
"that follow it on the command line, either to the end of the command line or "
"the next instance of this option."
msgstr "このオプションは複数回指定でき、コマンドラインの最後か、またはこのオプションの次のインスタンスかの、いずれかに続くコマンドラインの引数にのみ影響します。"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:226
msgid "The following options are modified by `--path-format`:"
msgstr "以下のオプションは `--path-format` による変更対象です:"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:227
#, no-wrap
msgid "`--git-dir`"
msgstr "`--git-dir`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:231
msgid ""
"Show `$GIT_DIR` if defined. Otherwise show the path to the .git directory. "
"The path shown, when relative, is relative to the current working directory."
msgstr "定義されている場合は `$GIT_DIR` を表示します。それ以外の場合は、 `.git` ディレクトリへのパスを表示します。表示されているパスは、相対の場合、現在の作業ディレクトリからの相対パスです。"

# hideo@winston:~/work
# $ git rev-parse --git-dir
# fatal: not a git repository (or any of the parent directories): .git
#
# hideo@winston:~/work
# $ echo $?
# 128
#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:235
msgid ""
"If `$GIT_DIR` is not defined and the current directory is not detected to "
"lie in a Git repository or work tree print a message to stderr and exit with "
"nonzero status."
msgstr "`$GIT_DIR` が定義されておらず、現在のディレクトリがGitリポジトリまたは作業ツリーにあることが検出されない場合は、標準エラー出力にメッセージを出力し、ゼロ以外のステータスで終了(exit)します。"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:236
#, no-wrap
msgid "`--git-common-dir`"
msgstr "`--git-common-dir`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:238
msgid "Show `$GIT_COMMON_DIR` if defined, else `$GIT_DIR`."
msgstr "定義されている場合は `$GIT_COMMON_DIR` を表示し、そうでない場合は `$GIT_DIR` を表示します。"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:239
#, no-wrap
msgid "`--resolve-git-dir <path>`"
msgstr "`--resolve-git-dir <path>`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:244
msgid ""
"Check if <path> is a valid repository or a gitfile that points at a valid "
"repository, and print the location of the repository.  If <path> is a "
"gitfile then the resolved path to the real repository is printed."
msgstr "<path> が有効なリポジトリまたは有効なリポジトリを指す gitfile であるかどうかを確認し、リポジトリの場所を出力します。 <path> が gitfile の場合、実際のリポジトリへの解決されたパス(resoluved path)が出力されます。"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:245
#, no-wrap
msgid "`--git-path <path>`"
msgstr "`--git-path <path>`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:251
msgid ""
"Resolve \"$GIT_DIR/<path>\" and takes other path relocation variables such "
"as $GIT_OBJECT_DIRECTORY, $GIT_INDEX_FILE... into account. For example, if "
"$GIT_OBJECT_DIRECTORY is set to /foo/bar then \"git rev-parse --git-path "
"objects/abc\" returns /foo/bar/abc."
msgstr "`$GIT_DIR/<path>` を解決し、 $GIT_OBJECT_DIRECTORY、$GIT_INDEX_FILE…などの他のパス再配置変数を考慮に入れます。 たとえば、 $GIT_OBJECT_DIRECTORY が `/foo/bar` に設定されている場合、 `git rev-parse --git-path objects/abc` は `/foo/bar/abc` を返します。"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:252
#, no-wrap
msgid "`--show-toplevel`"
msgstr "`--show-toplevel`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:255
msgid ""
"Show the (by default, absolute) path of the top-level directory of the "
"working tree. If there is no working tree, report an error."
msgstr "作業ツリーの最上位ディレクトリの(デフォルトでは絶対)パスを表示します。作業ツリーがない場合は、エラーを報告します。"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:256
#, no-wrap
msgid "`--show-superproject-working-tree`"
msgstr "`--show-superproject-working-tree`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:261
msgid ""
"Show the absolute path of the root of the superproject's working tree (if "
"exists) that uses the current repository as its submodule.  Outputs nothing "
"if the current repository is not used as a submodule by any project."
msgstr "現在のリポジトリをサブモジュールとして使用するスーパープロジェクトの作業ツリー(存在する場合)のルート(root)の絶対パスを表示します。現在のリポジトリがどのプロジェクトでもサブモジュールとして使用されていない場合は、何も出力しません。"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:262
#, no-wrap
msgid "`--shared-index-path`"
msgstr "`--shared-index-path`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:265
msgid ""
"Show the path to the shared index file in split index mode, or empty if not "
"in split-index mode."
msgstr "共有インデックスファイル(shared index file)へのパスを分割インデックスモード(split index mode)で表示します。分割インデックスモードで無い場合は空です。"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:267
msgid "The following options are unaffected by `--path-format`:"
msgstr "以下のオプションは、 `--path-format` の影響を受けません:"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:268
#, no-wrap
msgid "`--absolute-git-dir`"
msgstr "`--absolute-git-dir`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:271
msgid ""
"Like `--git-dir`, but its output is always the canonicalized absolute path."
msgstr "`--git-dir` に似ていますが、その出力は常に正規化された絶対パスです。"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:272
#, no-wrap
msgid "`--is-inside-git-dir`"
msgstr "`--is-inside-git-dir`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:275
msgid ""
"When the current working directory is below the repository directory print "
"\"true\", otherwise \"false\"."
msgstr "現在の作業ディレクトリがリポジトリディレクトリ(訳注: 通常 `.git` ディレクトリ)の下にある場合は `true` 、それ以外の場合は `false` と出力します。"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:276
#, no-wrap
msgid "`--is-inside-work-tree`"
msgstr "`--is-inside-work-tree`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:279
msgid ""
"When the current working directory is inside the work tree of the repository "
"print \"true\", otherwise \"false\"."
msgstr "現在の作業ディレクトリがリポジトリの作業ツリー内にある場合は `true` 、それ以外の場合は `false` と出力します。(訳注 `.git` ディレクトリ内では `false`)"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:280
#, no-wrap
msgid "`--is-bare-repository`"
msgstr "`--is-bare-repository`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:282
msgid "When the repository is bare print \"true\", otherwise \"false\"."
msgstr "ベアリポジトリの場合は `true` 、それ以外の場合は `false` を出力。"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:283
#, no-wrap
msgid "`--is-shallow-repository`"
msgstr "`--is-shallow-repository`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:285
msgid "When the repository is shallow print \"true\", otherwise \"false\"."
msgstr "shallowリポジトリの場合は `true` 、そうでない場合は `false` を出力します。"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:286
#, no-wrap
msgid "`--show-cdup`"
msgstr "`--show-cdup`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:290
msgid ""
"When the command is invoked from a subdirectory, show the path of the top-"
"level directory relative to the current directory (typically a sequence of "
"\"../\", or an empty string)."
msgstr "コマンドがサブディレクトリから呼び出された場合は、現在のディレクトリを基準にした最上位ディレクトリのパスを表示します(通常は `../` のシーケンスまたは空の文字列)。(訳注:作業ディレクトリ内じゃない時はエラー)"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:291
#, no-wrap
msgid "`--show-prefix`"
msgstr "`--show-prefix`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:295
msgid ""
"When the command is invoked from a subdirectory, show the path of the "
"current directory relative to the top-level directory."
msgstr "コマンドがサブディレクトリから呼び出された場合は、最上位ディレクトリを基準にした現在のディレクトリのパスを表示します。(訳注:作業ディレクトリ内じゃない時はエラー)"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:296
#, no-wrap
msgid "`--show-object-format[=(storage|input|output)]`"
msgstr "`--show-object-format[=(storage|input|output)]`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:301
msgid ""
"Show the object format (hash algorithm) used for the repository for storage "
"inside the `.git` directory, input, or output. For input, multiple "
"algorithms may be printed, space-separated.  If not specified, the default "
"is \"storage\"."
msgstr "`.git` ディレクトリ内でリポジトリのために使われるストレージ(storage)、または入力(input)、または出力(output)に使われるオブジェクト形式(ハッシュアルゴリズム)を表示します。入力(input)の場合、複数のアルゴリズムがスペースで区切られて出力される場合があります。形式を指定しない場合、デフォルトは `storage` です。"

#. type: Title ~
#: ../Documentation-sedout/git-rev-parse.txt:304
#, no-wrap
msgid "Other Options"
msgstr "Other Options"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:306
#, no-wrap
msgid "`--since=datestring`"
msgstr "`--since=datestring`"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:307
#, no-wrap
msgid "`--after=datestring`"
msgstr "`--after=datestring`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:310
msgid ""
"Parse the date string, and output the corresponding --max-age= parameter for "
"'git rev-list'."
msgstr "日付文字列をパースし、 `git rev-list` に対応する `-max-age=` パラメーターを出力します。"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:311
#, no-wrap
msgid "`--until=datestring`"
msgstr "`--until=datestring`"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:312
#, no-wrap
msgid "`--before=datestring`"
msgstr "`--before=datestring`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:315
msgid ""
"Parse the date string, and output the corresponding --min-age= parameter for "
"'git rev-list'."
msgstr "日付文字列をパースし、 `git rev-list` に対応する `--min-age=` パラメーターを出力します。"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:316
#, no-wrap
msgid "<args>..."
msgstr "<args>..."

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:318
msgid "Flags and parameters to be parsed."
msgstr "パースされるフラグとパラメーター。"

#. type: Title -
#: ../Documentation-sedout/git-rev-parse.txt:323
#, no-wrap
msgid "PARSEOPT"
msgstr "PARSEOPT"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:328
msgid ""
"In `--parseopt` mode, 'git rev-parse' helps massaging options to bring to "
"shell scripts the same facilities C builtins have. It works as an option "
"normalizer (e.g. splits single switches aggregate values), a bit like "
"`getopt(1)` does."
msgstr "`--parseopt` モードでは、 `git rev-parse` は、オプションをもみもみして、Cビルトインと同じ機能をシェルスクリプトにもたらすのに役立ちます。これは、 `getopt(1)` と少し似た、オプションの正規化機能です(たとえば、単一のスイッチの集合を分割します)。"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:333
msgid ""
"It takes on the standard input the specification of the options to parse and "
"understand, and echoes on the standard output a string suitable for `sh(1)` "
"`eval` to replace the arguments with normalized ones.  In case of error, it "
"outputs usage on the standard error stream, and exits with code 129."
msgstr "パースおよび理解できるオプションの仕様を標準入力で受け取り、引数を正規化されたものに置き換えるために、`sh(1)` `eval` に適した文字列をエコーします。エラーが発生した場合は、標準エラーストリームで使用状況を出力し、コード129で終了します。"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:336
msgid ""
"Note: Make sure you quote the result when passing it to `eval`.  See below "
"for an example."
msgstr "注: 結果を `eval` に渡すときは、必ず引用符で囲んでください。例については、以下を参照してください。"

#. type: Title ~
#: ../Documentation-sedout/git-rev-parse.txt:338
#, no-wrap
msgid "Input Format"
msgstr "Input Format"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:344
msgid ""
"'git rev-parse --parseopt' input format is fully text based. It has two "
"parts, separated by a line that contains only `--`. The lines before the "
"separator (should be one or more) are used for the usage.  The lines after "
"the separator describe the options."
msgstr "`git rev-parse --parseopt` 入力形式は完全にテキストベースです。 `--` のみを含む行で区切られた2つの部分から構成されます。セパレーターの前の行(1つ以上である必要があります)が使用例に使用されます。区切り文字の後の行は、オプションを示しています。"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:346
msgid "Each line of options has this format:"
msgstr "オプションの各行の形式はいかのとおりです:"

#. type: delimited block -
#: ../Documentation-sedout/git-rev-parse.txt:349
#, no-wrap
msgid "<opt-spec><flags>*<arg-hint>? SP+ help LF\n"
msgstr "<opt-spec><flags>*<arg-hint>? SP+ help LF\n"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:351
#, no-wrap
msgid "`<opt-spec>`"
msgstr "`<opt-spec>`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:356
msgid ""
"its format is the short option character, then the long option name "
"separated by a comma. Both parts are not required, though at least one is "
"necessary. May not contain any of the `<flags>` characters.  `h,help`, `dry-"
"run` and `f` are examples of correct `<opt-spec>`."
msgstr "この形式は、短いオプション1文字で、続いてコンマ(',')で区切り、そして長いオプション名があります。少なくとも短長のうち1つは必要ですが、両方揃ってなくてもいいです。 `<flags>` 文字を含めることはできません。 `h,help` や `dry-run` や `f` は正しい `<opt-spec>` の例です。"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:357
#, no-wrap
msgid "`<flags>`"
msgstr "`<flags>`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:359
msgid "`<flags>` are of `*`, `=`, `?` or `!`."
msgstr "`<flags>` とは  `*` または `=` または `?` または `!` です。"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:360
msgid "Use `=` if the option takes an argument."
msgstr "オプションが引数を取る場合は、 `=` を使用します。"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:364
msgid ""
"Use `?` to mean that the option takes an optional argument. You probably "
"want to use the `--stuck-long` mode to be able to unambiguously parse the "
"optional argument."
msgstr "`?` の使用は、オプションがオプションの引数を取ることを意味します。オプションの引数を明確に解析できるようにするには、おそらく `--stuck-long` モードを使用する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:368
msgid ""
"Use `*` to mean that this option should not be listed in the usage generated "
"for the `-h` argument. It's shown for `--help-all` as documented in linkgit:"
"gitcli[7]."
msgstr "`*` を使用すると、このオプションが `-h` 引数に対して生成された使用法にリストされてはならないことを意味します。 linkgit:gitcli[7] に記載されているように、 `--help-all` には表示されます。"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:370
msgid "Use `!` to not make the corresponding negated long option available."
msgstr "`！` を使用すると、対応する否定されたlongオプションを使用可能にしません。"

#. type: Labeled list
#: ../Documentation-sedout/git-rev-parse.txt:371
#, no-wrap
msgid "`<arg-hint>`"
msgstr "`<arg-hint>`"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:376
msgid ""
"`<arg-hint>`, if specified, is used as a name of the argument in the help "
"output, for options that take arguments. `<arg-hint>` is terminated by the "
"first whitespace.  It is customary to use a dash to separate words in a "
"multi-word argument hint."
msgstr "`<arg-hint>` は、指定された場合、引数を取るオプションのヘルプ出力で引数の名前として使用されます。 `<arg-hint>` は最初の空白で終了します。複数単語の引数ヒントで単語を区切りたい時は、ダッシュを使う通例です。"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:379
msgid ""
"The remainder of the line, after stripping the spaces, is used as the help "
"associated to the option."
msgstr "スペースを取り除いた後の行の残りの部分は、オプションに関連付けられたヘルプとして使用されます。"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:383
msgid ""
"Blank lines are ignored, and lines that don't match this specification are "
"used as option group headers (start the line with a space to create such "
"lines on purpose)."
msgstr "空白行は無視され、この仕様に一致しない行はオプショングループヘッダーとして使用されます(意図的にそのような行を作成するためにはスペースで行を開始します)。"

#. type: Title ~
#: ../Documentation-sedout/git-rev-parse.txt:385
#: ../Documentation-sedout/git-rev-parse.txt:441
#, no-wrap
msgid "Example"
msgstr "Example"

#. type: delimited block -
#: ../Documentation-sedout/git-rev-parse.txt:390
#, no-wrap
msgid ""
"OPTS_SPEC=\"\\\n"
"some-command [<options>] <args>...\n"
msgstr ""
"OPTS_SPEC=\"\\\n"
"some-command [<options>] <args>...\n"

#. type: delimited block -
#: ../Documentation-sedout/git-rev-parse.txt:392
#, no-wrap
msgid ""
"some-command does foo and bar!\n"
"--\n"
msgstr ""
"some-command does foo and bar!\n"
"--\n"

#. type: delimited block -
#: ../Documentation-sedout/git-rev-parse.txt:394
#, no-wrap
msgid "h,help    show the help\n"
msgstr "h,help    show the help\n"

#. type: delimited block -
#: ../Documentation-sedout/git-rev-parse.txt:399
#, no-wrap
msgid ""
"foo       some nifty option --foo\n"
"bar=      some cool option --bar with an argument\n"
"baz=arg   another cool option --baz with a named argument\n"
"qux?path  qux may take a path argument but has meaning by itself\n"
msgstr ""
"foo       some nifty option --foo\n"
"bar=      some cool option --bar with an argument\n"
"baz=arg   another cool option --baz with a named argument\n"
"qux?path  qux may take a path argument but has meaning by itself\n"

#. type: delimited block -
#: ../Documentation-sedout/git-rev-parse.txt:402
#, no-wrap
msgid ""
"  An option group Header\n"
"C?        option C with an optional argument\"\n"
msgstr ""
"  An option group Header\n"
"C?        option C with an optional argument\"\n"

#. type: delimited block -
#: ../Documentation-sedout/git-rev-parse.txt:404
#, no-wrap
msgid "eval \"$(echo \"$OPTS_SPEC\" | git rev-parse --parseopt -- \"$@\" || echo exit $?)\"\n"
msgstr "eval \"$(echo \"$OPTS_SPEC\" | git rev-parse --parseopt -- \"$@\" || echo exit $?)\"\n"

#. type: Title ~
#: ../Documentation-sedout/git-rev-parse.txt:408
#, no-wrap
msgid "Usage text"
msgstr "Usage text"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:412
msgid ""
"When `\"$@\"` is `-h` or `--help` in the above example, the following usage "
"text would be shown:"
msgstr "上記の例で `\"$@\"` が `-h` または `--help` の場合、以下の使用法テキストが表示されます:"

#. type: delimited block -
#: ../Documentation-sedout/git-rev-parse.txt:415
#, no-wrap
msgid "usage: some-command [<options>] <args>...\n"
msgstr "usage: some-command [<options>] <args>...\n"

#. type: delimited block -
#: ../Documentation-sedout/git-rev-parse.txt:417
#, no-wrap
msgid "    some-command does foo and bar!\n"
msgstr "    some-command does foo and bar!\n"

#. type: delimited block -
#: ../Documentation-sedout/git-rev-parse.txt:423
#, no-wrap
msgid ""
"    -h, --help            show the help\n"
"    --foo                 some nifty option --foo\n"
"    --bar ...             some cool option --bar with an argument\n"
"    --baz <arg>           another cool option --baz with a named argument\n"
"    --qux[=<path>]        qux may take a path argument but has meaning by itself\n"
msgstr ""
"    -h, --help            show the help\n"
"    --foo                 some nifty option --foo\n"
"    --bar ...             some cool option --bar with an argument\n"
"    --baz <arg>           another cool option --baz with a named argument\n"
"    --qux[=<path>]        qux may take a path argument but has meaning by itself\n"

#. type: delimited block -
#: ../Documentation-sedout/git-rev-parse.txt:426
#, no-wrap
msgid ""
"An option group Header\n"
"    -C[...]               option C with an optional argument\n"
msgstr ""
"An option group Header\n"
"    -C[...]               option C with an optional argument\n"

#. type: Title -
#: ../Documentation-sedout/git-rev-parse.txt:429
#, no-wrap
msgid "SQ-QUOTE"
msgstr "SQ-QUOTE"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:435
msgid ""
"In `--sq-quote` mode, 'git rev-parse' echoes on the standard output a single "
"line suitable for `sh(1)` `eval`. This line is made by normalizing the "
"arguments following `--sq-quote`. Nothing other than quoting the arguments "
"is done."
msgstr "`--sq-quote` モードでは、 `git rev-parse` は、 `sh(1)` `eval` に適した1行を標準出力にエコーします。この行は、 `--sq-quote` に続く引数を正規化することによって作成されます。引数をクォートする以外に何も行いません。"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:439
msgid ""
"If you want command input to still be interpreted as usual by 'git rev-"
"parse' before the output is shell quoted, see the `--sq` option."
msgstr "出力がシェル引用符で囲まれる前に、コマンド入力を `git rev-parse` によって通常どおりに解釈するには `--sq` オプションを参照してください。"

#. type: delimited block -
#: ../Documentation-sedout/git-rev-parse.txt:451
#, no-wrap
msgid ""
"$ cat >your-git-script.sh <<\\EOF\n"
"#!/bin/sh\n"
"args=$(git rev-parse --sq-quote \"$@\")   # quote user-supplied arguments\n"
"command=\"git frotz -n24 $args\"          # and use it inside a handcrafted\n"
"\t\t\t\t\t# command line\n"
"eval \"$command\"\n"
"EOF\n"
msgstr ""
"$ cat >your-git-script.sh <<\\EOF\n"
"#!/bin/sh\n"
"args=$(git rev-parse --sq-quote \"$@\")   # quote user-supplied arguments\n"
"command=\"git frotz -n24 $args\"          # and use it inside a handcrafted\n"
"\t\t\t\t\t# command line\n"
"eval \"$command\"\n"
"EOF\n"

#. type: delimited block -
#: ../Documentation-sedout/git-rev-parse.txt:453
#, no-wrap
msgid "$ sh your-git-script.sh \"a b'c\"\n"
msgstr "$ sh your-git-script.sh \"a b'c\"\n"

#. type: Title -
#: ../Documentation-sedout/git-rev-parse.txt:456
#, no-wrap
msgid "EXAMPLES"
msgstr "EXAMPLES"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:459
msgid "Print the object name of the current commit:"
msgstr "現在のコミットのオブジェクト名を出力します:"

#. type: delimited block -
#: ../Documentation-sedout/git-rev-parse.txt:462
#, no-wrap
msgid "$ git rev-parse --verify HEAD\n"
msgstr "$ git rev-parse --verify HEAD\n"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:465
msgid ""
"Print the commit object name from the revision in the $REV shell variable:"
msgstr "$REV シェル変数のリビジョンからコミットオブジェクト名を出力します:"

#. type: delimited block -
#: ../Documentation-sedout/git-rev-parse.txt:468
#, no-wrap
msgid "$ git rev-parse --verify --end-of-options $REV^{commit}\n"
msgstr "$ git rev-parse --verify --end-of-options $REV^{commit}\n"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:471
msgid "This will error out if $REV is empty or not a valid revision."
msgstr "$REV が空であるか、有効なリビジョンでない場合エラーになります。"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:473
msgid "Similar to above:"
msgstr "上記と同様ですが…:"

#. type: delimited block -
#: ../Documentation-sedout/git-rev-parse.txt:476
#, no-wrap
msgid "$ git rev-parse --default master --verify --end-of-options $REV\n"
msgstr "$ git rev-parse --default master --verify --end-of-options $REV\n"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:479
msgid ""
"but if $REV is empty, the commit object name from master will be printed."
msgstr "これは、 $REV が空の場合、masterからのコミットオブジェクト名が出力されます。"

#. type: Title -
#: ../Documentation-sedout/git-rev-parse.txt:481
#, no-wrap
msgid "GIT"
msgstr "GIT"

#. type: Plain text
#: ../Documentation-sedout/git-rev-parse.txt:482
msgid "Part of the linkgit:git[1] suite"
msgstr "Part of the linkgit:git[1] suite"
