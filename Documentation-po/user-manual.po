# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 3.0\n"
"POT-Creation-Date: 2023-07-18 11:06+0900\n"
"PO-Revision-Date: 2023-08-11 05:19+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/user-manual.txt:1
#, no-wrap
msgid "Git User Manual"
msgstr "Git User Manual"

#. type: Title ==
#: ../Documentation-sedout/user-manual.txt:4
#, no-wrap
msgid "Introduction"
msgstr "Introduction"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:7
msgid "Git is a fast distributed revision control system."
msgstr "Gitは高速分散型リビジョン管理システムです。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:10
msgid ""
"This manual is designed to be readable by someone with basic UNIX command-"
"line skills, but no previous knowledge of Git."
msgstr ""
"この説明書は、基本的なUNIXコマンドラインスキルを持っているが、Gitの予備知識が"
"ない人でも読めるように設計されています。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:15
msgid ""
"<<repositories-and-branches>> and <<exploring-git-history>> explain how to "
"fetch and study a project using git--read these chapters to learn how to "
"build and test a particular version of a software project, search for "
"regressions, and so on."
msgstr ""
"<<repositories-and-branches>> と <<exploring-git-history>> は、gitを使用して"
"プロジェクトをフェッチして調査する方法を説明しています。これらの章を読んで、"
"ソフトウェアプロジェクトの特定のバージョンをビルド、テスト、デグレを探す方法"
"を学んで下さい。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:18
msgid ""
"People needing to do actual development will also want to read <<Developing-"
"With-git>> and <<sharing-development>>."
msgstr ""
"実際の開発を行う必要がある人は、 <<Developing-With-git>> と <<sharing-"
"development>> も読みたいと思うでしょう。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:20
msgid "Further chapters cover more specialized topics."
msgstr "それ以降の章では、より専門的なトピックについて説明します。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:24
msgid ""
"Comprehensive reference documentation is available through the man pages, or "
"linkgit:git-help[1] command.  For example, for the command `git clone "
"<repo>`, you can either use:"
msgstr ""
"包括的なリファレンスドキュメントは、マニュアルページまたは linkgit:git-"
"help[1] コマンドから入手できます。 たとえば、コマンド `git clone <repo>` の場"
"合、次のいずれかを使用できます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:27
#, no-wrap
msgid "$ man git-clone\n"
msgstr "$ man git-clone\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:30
msgid "or:"
msgstr "または:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:33
#, no-wrap
msgid "$ git help clone\n"
msgstr "$ git help clone\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:37
msgid ""
"With the latter, you can use the manual viewer of your choice; see linkgit:"
"git-help[1] for more information."
msgstr ""
"後者では、選択したマニュアルビューアを使用できます。 詳細については linkgit:"
"git-help[1] を参照してください。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:40
msgid ""
"See also <<git-quick-start>> for a brief overview of Git commands, without "
"any explanation."
msgstr ""
"詳しい説明なしでのGitコマンドの概要については、 <<git-quick-start>> も参照し"
"てください。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:43
msgid ""
"Finally, see <<todo>> for ways that you can help make this manual more "
"complete."
msgstr ""
"最後に、このマニュアルをより完全にするためにあなたが貢献する方法については、 "
"<<todo>> を参照してください。"

#. type: Title ==
#: ../Documentation-sedout/user-manual.txt:46
#, no-wrap
msgid "Repositories and Branches"
msgstr "Repositories and Branches"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:49
#, no-wrap
msgid "How to get a Git repository"
msgstr "How to get a Git repository"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:53
msgid ""
"It will be useful to have a Git repository to experiment with as you read "
"this manual."
msgstr "このマニュアルを読むときに、Gitリポジトリを試してみると便利です。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:57
msgid ""
"The best way to get one is by using the linkgit:git-clone[1] command to "
"download a copy of an existing repository.  If you don't already have a "
"project in mind, here are some interesting examples:"
msgstr ""
"これを取得する最良の方法は、 linkgit:git-clone[1] コマンドを使用して既存のリ"
"ポジトリのコピーをダウンロードすることです。あなたがプロジェクトをまだ考えて"
"いない場合は、いくつかの興味深い例を以下に示します:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:63
#, no-wrap
msgid ""
"\t# Git itself (approx. 40MB download):\n"
"$ git clone git://git.kernel.org/pub/scm/git/git.git\n"
"\t# the Linux kernel (approx. 640MB download):\n"
"$ git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git\n"
msgstr ""
"\t# Git itself (approx. 40MB download):\n"
"$ git clone git://git.kernel.org/pub/scm/git/git.git\n"
"\t# the Linux kernel (approx. 640MB download):\n"
"$ git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:67
msgid ""
"The initial clone may be time-consuming for a large project, but you will "
"only need to clone once."
msgstr ""
"大規模なプロジェクトでは、最初のクローン作成に時間がかかる場合がありますが、"
"クローン作成が必要になるのは1回だけです。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:74
msgid ""
"The clone command creates a new directory named after the project (`git` or "
"`linux` in the examples above).  After you cd into this directory, you will "
"see that it contains a copy of the project files, called the "
"<<def_working_tree,working tree>>, together with a special top-level "
"directory named `.git`, which contains all the information about the history "
"of the project."
msgstr ""
"cloneコマンドは、プロジェクトにちなんで名付けられた新しいディレクトリを作成し"
"ます(上記の例では `git` または `linux`)。このディレクトリにcdすると、 "
"<<def_working_tree,working tree>> と呼ばれるプロジェクトファイルのコピーと、"
"プロジェクトの歴史について全ての情報を含む `.git` という名前の特別なトップレ"
"ベルディレクトリが含まれていることがわかります。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:76
#, no-wrap
msgid "How to check out a different version of a project"
msgstr "プロジェクトの別のバージョンをチェックアウトする方法"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:82
msgid ""
"Git is best thought of as a tool for storing the history of a collection of "
"files.  It stores the history as a compressed collection of interrelated "
"snapshots of the project's contents.  In Git each such version is called a "
"<<def_commit,commit>>."
msgstr ""
"Gitは、ファイルのコレクションの履歴を保存するためのツールとして最もよく考えら"
"れています。プロジェクトのコンテンツの相互に関連するスナップショットの圧縮さ"
"れたコレクションとして履歴を保存します。 Gitでは、このような各バージョンは "
"<<def_commit,commit>> と呼ばれます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:87
msgid ""
"Those snapshots aren't necessarily all arranged in a single line from oldest "
"to newest; instead, work may simultaneously proceed along parallel lines of "
"development, called <<def_branch,branches>>, which may merge and diverge."
msgstr ""
"これらのスナップショットは、必ずしもすべてが古いものから新しいものへと一列に"
"配置されているわけではなく、作業は、 <<def_branch,branches>> と呼ばれる並行す"
"る開発ラインに沿って同時に進行する場合があります。これは、マージおよび分岐す"
"る場合があります。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:92
msgid ""
"A single Git repository can track development on multiple branches.  It does "
"this by keeping a list of <<def_head,heads>> which reference the latest "
"commit on each branch; the linkgit:git-branch[1] command shows you the list "
"of branch heads:"
msgstr ""
"単一のGitリポジトリで、複数のブランチの開発を追跡できます。これは、各ブランチ"
"の最新のコミットを参照する <<def_head,heads>> のリストを保持することによって"
"行われます。 linkgit:git-branch[1] コマンドは、ブランチヘッド(branch heads)を"
"一覧表示します。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:96
#, no-wrap
msgid ""
"$ git branch\n"
"* master\n"
msgstr ""
"$ git branch\n"
"* master\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:101
msgid ""
"A freshly cloned repository contains a single branch head, by default named "
"\"master\", with the working directory initialized to the state of the "
"project referred to by that branch head."
msgstr ""
"新しくクローンされたリポジトリには、デフォルトで「master」という名前の単一の"
"ブランチヘッドが含まれ、作業ディレクトリはそのブランチヘッドによって参照され"
"るプロジェクトの状態に初期化されます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:105
msgid ""
"Most projects also use <<def_tag,tags>>.  Tags, like heads, are references "
"into the project's history, and can be listed using the linkgit:git-tag[1] "
"command:"
msgstr ""
"ほとんどのプロジェクトは <<def_tag,tags>> も使用します。タグはヘッドのようで"
"あり、プロジェクトの履歴への参照であり、 linkgit:git-tag[1] コマンドを使用し"
"て一覧表示できます。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:118
#, no-wrap
msgid ""
"$ git tag -l\n"
"v2.6.11\n"
"v2.6.11-tree\n"
"v2.6.12\n"
"v2.6.12-rc2\n"
"v2.6.12-rc3\n"
"v2.6.12-rc4\n"
"v2.6.12-rc5\n"
"v2.6.12-rc6\n"
"v2.6.13\n"
"...\n"
msgstr ""
"$ git tag -l\n"
"v2.6.11\n"
"v2.6.11-tree\n"
"v2.6.12\n"
"v2.6.12-rc2\n"
"v2.6.12-rc3\n"
"v2.6.12-rc4\n"
"v2.6.12-rc5\n"
"v2.6.12-rc6\n"
"v2.6.13\n"
"...\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:122
msgid ""
"Tags are expected to always point at the same version of a project, while "
"heads are expected to advance as development progresses."
msgstr ""
"タグは常にプロジェクトの同じバージョンを指すことが期待されますが、開発が進む"
"につれてヘッドは前進することが期待されます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:125
msgid ""
"Create a new branch head pointing to one of these versions and check it out "
"using linkgit:git-switch[1]:"
msgstr ""
"これらのバージョンのいずれかを指す新しいブランチヘッドを作成し、 linkgit:git-"
"switch[1] を使用してチェックアウトします:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:128
#, no-wrap
msgid "$ git switch -c new v2.6.13\n"
msgstr "$ git switch -c new v2.6.13\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:133
msgid ""
"The working directory then reflects the contents that the project had when "
"it was tagged v2.6.13, and linkgit:git-branch[1] shows two branches, with an "
"asterisk marking the currently checked-out branch:"
msgstr ""
"作業ディレクトリは、v2.6.13 のタグが付けられたときにプロジェクトが持っていた"
"内容を反映し、 linkgit:git-branch[1] は2つのブランチを表示し、アスタリスクは"
"現在チェックアウトされているブランチを示します。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:138
#, no-wrap
msgid ""
"$ git branch\n"
"  master\n"
"* new\n"
msgstr ""
"$ git branch\n"
"  master\n"
"* new\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:142
msgid ""
"If you decide that you'd rather see version 2.6.17, you can modify the "
"current branch to point at v2.6.17 instead, with"
msgstr ""
"あなたがバージョン 2.6.17 を使用することにした場合は、以下のようにして、代わ"
"りに v2.6.17 を指すように現在のブランチを変更できます。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:145
#, no-wrap
msgid "$ git reset --hard v2.6.17\n"
msgstr "$ git reset --hard v2.6.17\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:151
msgid ""
"Note that if the current branch head was your only reference to a particular "
"point in history, then resetting that branch may leave you with no way to "
"find the history it used to point to; so use this command carefully."
msgstr ""
"注意: 現在のブランチヘッドが履歴内の特定のポイントへの唯一の参照である場合、"
"そのブランチをリセットすると、それが指していた履歴を見つける方法がなくなる可"
"能性があることに注意してください。したがって、このコマンドは慎重に使用してく"
"ださい。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:153
#, no-wrap
msgid "Understanding History: Commits"
msgstr "Understanding History: Commits"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:158
msgid ""
"Every change in the history of a project is represented by a commit.  The "
"linkgit:git-show[1] command shows the most recent commit on the current "
"branch:"
msgstr ""
"プロジェクトの履歴のすべての変更は、コミットによって表されます。 linkgit:git-"
"show[1] コマンドは、現在のブランチでの最新のコミットを表示します:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:164
#, no-wrap
msgid ""
"$ git show\n"
"commit 17cf781661e6d38f737f15f53ab552f1e95960d7\n"
"Author: Linus Torvalds <torvalds@ppc970.osdl.org.(none)>\n"
"Date:   Tue Apr 19 14:11:06 2005 -0700\n"
msgstr ""
"$ git show\n"
"commit 17cf781661e6d38f737f15f53ab552f1e95960d7\n"
"Author: Linus Torvalds <torvalds@ppc970.osdl.org.(none)>\n"
"Date:   Tue Apr 19 14:11:06 2005 -0700\n"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:166
#, no-wrap
msgid "    Remove duplicate getenv(DB_ENVIRONMENT) call\n"
msgstr "    Remove duplicate getenv(DB_ENVIRONMENT) call\n"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:168
#, no-wrap
msgid "    Noted by Tony Luck.\n"
msgstr "    Noted by Tony Luck.\n"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:174
#, no-wrap
msgid ""
"diff --git a/init-db.c b/init-db.c\n"
"index 65898fa..b002dc6 100644\n"
"--- a/init-db.c\n"
"+++ b/init-db.c\n"
"@@ -7,7 +7,7 @@\n"
msgstr ""
"diff --git a/init-db.c b/init-db.c\n"
"index 65898fa..b002dc6 100644\n"
"--- a/init-db.c\n"
"+++ b/init-db.c\n"
"@@ -7,7 +7,7 @@\n"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:180
#, no-wrap
msgid ""
" int main(int argc, char **argv)\n"
" {\n"
"-\tchar *sha1_dir = getenv(DB_ENVIRONMENT), *path;\n"
"+\tchar *sha1_dir, *path;\n"
" \tint len, i;\n"
msgstr ""
" int main(int argc, char **argv)\n"
" {\n"
"-\tchar *sha1_dir = getenv(DB_ENVIRONMENT), *path;\n"
"+\tchar *sha1_dir, *path;\n"
" \tint len, i;\n"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:182
#, no-wrap
msgid " \tif (mkdir(\".git\", 0755) < 0) {\n"
msgstr " \tif (mkdir(\".git\", 0755) < 0) {\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:186
msgid ""
"As you can see, a commit shows who made the latest change, what they did, "
"and why."
msgstr ""
"ご覧のとおり、コミットは、誰が最新の変更を行ったか、何をしたか、そしてその理"
"由を示しています。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:197
msgid ""
"Every commit has a 40-hexdigit id, sometimes called the \"object name\" or "
"the \"SHA-1 id\", shown on the first line of the `git show` output.  You can "
"usually refer to a commit by a shorter name, such as a tag or a branch name, "
"but this longer name can also be useful.  Most importantly, it is a globally "
"unique name for this commit: so if you tell somebody else the object name "
"(for example in email), then you are guaranteed that name will refer to the "
"same commit in their repository that it does in yours (assuming their "
"repository has that commit at all).  Since the object name is computed as a "
"hash over the contents of the commit, you are guaranteed that the commit can "
"never change without its name also changing."
msgstr ""
"すべてのコミットには16進40桁のIDがあります。それは「オブジェクト名」または"
"「SHA-1 ID」と呼ばれることもあり、「git show」出力の最初の行に表示されます。"
"通常、タグやブランチ名などの短い名前でコミットを参照できますが、この長い名前"
"も役立ちます。最も重要なことは、これはこのコミットにとってグローバルに一意の"
"名前です。したがって、他の誰かにオブジェクト名を(たとえば電子メールで)伝える"
"と、その名前が自分のリポジトリで行うのと同じコミットを参照することが保証され"
"ます(彼らのリポジトリにそのコミットがあると仮定します)。オブジェクト名はコ"
"ミットの内容に対するハッシュとして計算されるため、名前が変更されてなければコ"
"ミットも変更されてない事が保証されます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:201
msgid ""
"In fact, in <<git-concepts>> we shall see that everything stored in Git "
"history, including file data and directory contents, is stored in an object "
"with a name that is a hash of its contents."
msgstr ""
"実際、 <<git-concepts>> では、ファイルデータやディレクトリの内容など、Gitの履"
"歴に保存されているすべてのものが、その内容のハッシュである名前が付いたオブ"
"ジェクトに保存されていることがわかります。"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:203
#, no-wrap
msgid "Understanding history: commits, parents, and reachability"
msgstr "Understanding history: commits, parents, and reachability"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:209
msgid ""
"Every commit (except the very first commit in a project) also has a parent "
"commit which shows what happened before this commit.  Following the chain of "
"parents will eventually take you back to the beginning of the project."
msgstr ""
"(プロジェクトの最初のコミットを除く)すべてのコミットには、このコミットの前に"
"何が起こったかを示す親コミットもあります。親の連鎖をたどると、最終的にはプロ"
"ジェクトの最初に戻ります。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:216
msgid ""
"However, the commits do not form a simple list; Git allows lines of "
"development to diverge and then reconverge, and the point where two lines of "
"development reconverge is called a \"merge\".  The commit representing a "
"merge can therefore have more than one parent, with each parent representing "
"the most recent commit on one of the lines of development leading to that "
"point."
msgstr ""
"ただし、コミットは単純なリストを形成しません。 Gitを使用すると、開発ラインが"
"分岐してから再収束します。2つの開発ラインが再収束するポイントは「マージ」と呼"
"ばれます。したがって、マージを表すコミットは1つ以上の親を持つことができ、各親"
"はそれぞれがそのポイントにつながる開発ラインの1つで最も最近のコミットを表しま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:220
msgid ""
"The best way to see how this works is using the linkgit:gitk[1] command; "
"running gitk now on a Git repository and looking for merge commits will help "
"understand how Git organizes history."
msgstr ""
"これがどのように働くを確認する最良の方法は、 linkgit:gitk[1] コマンドを使用す"
"ることです。現在Gitリポジトリでgitkを実行し、マージコミットを探すと、Gitが履"
"歴を整理する方法を理解するのに役立ちます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:225
msgid ""
"In the following, we say that commit X is \"reachable\" from commit Y if "
"commit X is an ancestor of commit Y.  Equivalently, you could say that Y is "
"a descendant of X, or that there is a chain of parents leading from commit Y "
"to commit X."
msgstr ""
"以下、コミットXがコミットYの祖先である場合、コミットXはコミットYから「到達可"
"能」(reachable)であると言います。同様に、YはXの子孫である、コミットYからコ"
"ミットXにつながる親のチェーンがあると言えます。"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:227
#, no-wrap
msgid "Understanding history: History diagrams"
msgstr "Understanding history: History diagrams"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:232
msgid ""
"We will sometimes represent Git history using diagrams like the one below.  "
"Commits are shown as \"o\", and the links between them with lines drawn with "
"- / and \\.  Time goes left to right:"
msgstr ""
"以下のような図を使用して、Gitの履歴を表す場合があります。コミットは「o」とし"
"て表示され、コミット間の繋がりは、 `-` および `/` および `\\` で描かれた線で"
"示されます。時間は左から右に進みます:"

#. type: delimited block .
#: ../Documentation-sedout/user-manual.txt:240
#, no-wrap
msgid ""
"         o--o--o <-- Branch A\n"
"        /\n"
" o--o--o <-- master\n"
"        \\\n"
"         o--o--o <-- Branch B\n"
msgstr ""
"         o--o--o <-- Branch A\n"
"        /\n"
" o--o--o <-- master\n"
"        \\\n"
"         o--o--o <-- Branch B\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:244
msgid ""
"If we need to talk about a particular commit, the character \"o\" may be "
"replaced with another letter or number."
msgstr ""
"特定のコミットについて話す必要がある場合は、文字「o」を別の文字または数字に置"
"き換えることができます。"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:246
#, no-wrap
msgid "Understanding history: What is a branch?"
msgstr "Understanding history: What is a branch?"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:254
msgid ""
"When we need to be precise, we will use the word \"branch\" to mean a line "
"of development, and \"branch head\" (or just \"head\") to mean a reference "
"to the most recent commit on a branch.  In the example above, the branch "
"head named \"A\" is a pointer to one particular commit, but we refer to the "
"line of three commits leading up to that point as all being part of \"branch "
"A\"."
msgstr ""
"正確にする必要がある場合は、「ブランチ」という言葉を使用して開発ラインを意味"
"し、「ブランチヘッド」(branch head)(または単に「ヘッド」(head))という言葉を使"
"用して、ブランチでの最新のコミットへの参照を意味します。上記の例では、「A」と"
"いう名前のブランチヘッドは、1つの特定のコミットへのポインターですが、その時点"
"までの3つのコミットの連なった線をすべて「ブランチA」の一部として参照します。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:257
msgid ""
"However, when no confusion will result, we often just use the term "
"\"branch\" both for branches and for branch heads."
msgstr ""
"ただし、混乱が生じない場合は、ブランチとブランチヘッドの両方に「ブランチ」と"
"いう用語を使用することがよくあります。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:259
#, no-wrap
msgid "Manipulating branches"
msgstr "Manipulating branches"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:263
msgid ""
"Creating, deleting, and modifying branches is quick and easy; here's a "
"summary of the commands:"
msgstr ""
"ブランチの作成、削除、および変更は、素早く・簡単です。コマンドの概要は以下の"
"とおりです:"

#. type: Labeled list
#: ../Documentation-sedout/user-manual.txt:264
#, no-wrap
msgid "`git branch`"
msgstr "`git branch`"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:266
msgid "list all branches."
msgstr "全てのブランチを一覧表示します。"

#. type: Labeled list
#: ../Documentation-sedout/user-manual.txt:266
#, no-wrap
msgid "`git branch <branch>`"
msgstr "`git branch <branch>`"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:269
msgid ""
"create a new branch named `<branch>`, referencing the same point in history "
"as the current branch."
msgstr ""
"現在のブランチと同じ履歴ポイントを参照して、 `<branch>` という名前の新しいブ"
"ランチを作成します。"

#. type: Labeled list
#: ../Documentation-sedout/user-manual.txt:269
#, no-wrap
msgid "`git branch <branch> <start-point>`"
msgstr "`git branch <branch> <start-point>`"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:273
msgid ""
"create a new branch named `<branch>`, referencing `<start-point>`, which may "
"be specified any way you like, including using a branch name or a tag name."
msgstr ""
"`<start-point>` を参照して、 `<branch>` という名前の新しいブランチを作成しま"
"す。これは、ブランチ名やタグ名を使用するなど、任意の方法で指定できます。"

#. type: Labeled list
#: ../Documentation-sedout/user-manual.txt:273
#, no-wrap
msgid "`git branch -d <branch>`"
msgstr "`git branch -d <branch>`"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:277
msgid ""
"delete the branch `<branch>`; if the branch is not fully merged in its "
"upstream branch or contained in the current branch, this command will fail "
"with a warning."
msgstr ""
"ブランチ `<branch>`を削除します。ブランチがそのアップストリームブランチに完全"
"にマージされていないか、現在のブランチに含まれていない場合、このコマンドは警"
"告とともに失敗します。"

#. type: Labeled list
#: ../Documentation-sedout/user-manual.txt:277
#, no-wrap
msgid "`git branch -D <branch>`"
msgstr "`git branch -D <branch>`"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:279
msgid "delete the branch `<branch>` irrespective of its merged status."
msgstr "マージされたステータスに関係なく、ブランチ `<branch>` を削除します。"

#. type: Labeled list
#: ../Documentation-sedout/user-manual.txt:279
#, no-wrap
msgid "`git switch <branch>`"
msgstr "`git switch <branch>`"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:282
msgid ""
"make the current branch `<branch>`, updating the working directory to "
"reflect the version referenced by `<branch>`."
msgstr ""
"現在のブランチを `<branch>` にし、 `<branch>` によって参照されるバージョンを"
"反映するように作業ディレクトリを更新します。"

#. type: Labeled list
#: ../Documentation-sedout/user-manual.txt:282
#, no-wrap
msgid "`git switch -c <new> <start-point>`"
msgstr "`git switch -c <new> <start-point>`"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:285
msgid ""
"create a new branch `<new>` referencing `<start-point>`, and check it out."
msgstr ""
"`<start-point>` を参照する新しいブランチ `<new>` を作成し、それをチェックアウ"
"トします。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:289
msgid ""
"The special symbol \"HEAD\" can always be used to refer to the current "
"branch.  In fact, Git uses a file named `HEAD` in the `.git` directory to "
"remember which branch is current:"
msgstr ""
"特殊シンボル記号「HEAD」は、常に現在のブランチを参照するために使用できます。"
"実際、Gitは `.git` ディレクトリにある `HEAD` という名前のファイルを使用して、"
"現在のブランチを記憶しています。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:293
#, no-wrap
msgid ""
"$ cat .git/HEAD\n"
"ref: refs/heads/master\n"
msgstr ""
"$ cat .git/HEAD\n"
"ref: refs/heads/master\n"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:296
#, no-wrap
msgid "Examining an old version without creating a new branch"
msgstr "新しいブランチを作成せずに古いバージョンを調べる"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:301
msgid ""
"The `git switch` command normally expects a branch head, but will also "
"accept an arbitrary commit when invoked with --detach; for example, you can "
"check out the commit referenced by a tag:"
msgstr ""
"`git switch` コマンドは通常、ブランチヘッドを想定していますが、 `--detach` を"
"伴って呼び出されると任意のコミットも受け入れます。たとえば、タグによって参照"
"されるコミットをチェックアウトできます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:305
#, no-wrap
msgid ""
"$ git switch --detach v2.6.17\n"
"Note: checking out 'v2.6.17'.\n"
msgstr ""
"$ git switch --detach v2.6.17\n"
"Note: checking out 'v2.6.17'.\n"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:309
#, no-wrap
msgid ""
"You are in 'detached HEAD' state. You can look around, make experimental\n"
"changes and commit them, and you can discard any commits you make in this\n"
"state without impacting any branches by performing another switch.\n"
msgstr ""
"You are in 'detached HEAD' state. You can look around, make experimental\n"
"changes and commit them, and you can discard any commits you make in this\n"
"state without impacting any branches by performing another switch.\n"
"(あなたは「切り離されたHEAD」状態にあります。あなたは周りを見回し、\n"
"実験的な変更を加えてコミットすることができます。また、別のswitchを実行することで、\n"
"他のブランチに影響を与えることなく、この状態で行ったコミットを破棄できます。)\n"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:312
#, no-wrap
msgid ""
"If you want to create a new branch to retain commits you create, you may\n"
"do so (now or later) by using -c with the switch command again. Example:\n"
msgstr ""
"If you want to create a new branch to retain commits you create, you may\n"
"do so (now or later) by using -c with the switch command again. Example:\n"
"(作成したコミットを保持するために新しいブランチを作成する場合は、\n"
"switchコマンドで `-c` を再度使用して、(現在または後で)作成できます。例:)\n"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:314
#, no-wrap
msgid "  git switch -c new_branch_name\n"
msgstr "  git switch -c new_branch_name\n"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:316
#, no-wrap
msgid "HEAD is now at 427abfa Linux v2.6.17\n"
msgstr "HEAD is now at 427abfa Linux v2.6.17\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:320
msgid ""
"The HEAD then refers to the SHA-1 of the commit instead of to a branch, and "
"git branch shows that you are no longer on a branch:"
msgstr ""
"次に、HEADはブランチではなくコミットのSHA-1を参照し、 `git branch` は、あなた"
"がもはやブランチ上にいないことを示します:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:327
#, no-wrap
msgid ""
"$ cat .git/HEAD\n"
"427abfa28afedffadfca9dd8b067eb6d36bac53f\n"
"$ git branch\n"
"* (detached from v2.6.17)\n"
"  master\n"
msgstr ""
"$ cat .git/HEAD\n"
"427abfa28afedffadfca9dd8b067eb6d36bac53f\n"
"$ git branch\n"
"* (detached from v2.6.17)\n"
"  master\n"

# (ブランチから)「切り離されている」
# っていう意味かしらん
#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:330
msgid "In this case we say that the HEAD is \"detached\"."
msgstr "この場合、HEADは「切り離されている」(detached)と言います。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:334
#, no-wrap
msgid ""
"This is an easy way to check out a particular version without having to\n"
"make up a name for the new branch.   You can still create a new branch\n"
"(or tag) for this version later if you decide to.\n"
msgstr ""
"これは、新しいブランチの名前を作成しなくても、\n"
"特定のバージョンをチェックアウトする簡単な方法です。\n"
"必要に応じて、後でこのバージョンの新しいブランチ(またはタグ)を作成することもできます。\n"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:336
#, no-wrap
msgid "Examining branches from a remote repository"
msgstr "Examining branches from a remote repository"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:344
msgid ""
"The \"master\" branch that was created at the time you cloned is a copy of "
"the HEAD in the repository that you cloned from.  That repository may also "
"have had other branches, though, and your local repository keeps branches "
"which track each of those remote branches, called remote-tracking branches, "
"which you can view using the `-r` option to linkgit:git-branch[1]:"
msgstr ""
"クローン作成時に作成された「master」ブランチは、クローン作成元のリポジトリに"
"あるHEADのコピーです。ただし、そのリポジトリには他のブランチも含まれている可"
"能性があり、ローカルリポジトリには、リモート追跡ブランチ(remote-tracking "
"branch)と呼ばれる、これらのリモートブランチのそれぞれを追跡するブランチが保持"
"されます。これは、 linkgit:git-branch[1] の `-r` オプションを使用して表示でき"
"ます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:355
#, no-wrap
msgid ""
"$ git branch -r\n"
"  origin/HEAD\n"
"  origin/html\n"
"  origin/maint\n"
"  origin/man\n"
"  origin/master\n"
"  origin/next\n"
"  origin/seen\n"
"  origin/todo\n"
msgstr ""
"$ git branch -r\n"
"  origin/HEAD\n"
"  origin/html\n"
"  origin/maint\n"
"  origin/man\n"
"  origin/master\n"
"  origin/next\n"
"  origin/seen\n"
"  origin/todo\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:363
msgid ""
"In this example, \"origin\" is called a remote repository, or \"remote\" for "
"short. The branches of this repository are called \"remote branches\" from "
"our point of view. The remote-tracking branches listed above were created "
"based on the remote branches at clone time and will be updated by `git "
"fetch` (hence `git pull`) and `git push`. See <<Updating-a-repository-With-"
"git-fetch>> for details."
msgstr ""
"この例では、「origin」はリモートリポジトリ、または略して「リモート」(remote)"
"と呼ばれます。このリポジトリのブランチは、私たちの観点からは「リモートブラン"
"チ」と呼ばれます。上記のリモート追跡ブランチは、クローン時にリモートブランチ"
"に基づいて作成され、 `git fetch` (つまり `git pull` でも)と `git push` によっ"
"て更新されます。 詳細については、 <<Updating-a-repository-With-git-fetch>> を"
"参照してください。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:366
msgid ""
"You might want to build on one of these remote-tracking branches on a branch "
"of your own, just as you would for a tag:"
msgstr ""
"タグの場合と同じように、これらのリモート追跡ブランチの1つをあなた独自のブラン"
"チに構築することをお勧めします:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:369
#, no-wrap
msgid "$ git switch -c my-todo-copy origin/todo\n"
msgstr "$ git switch -c my-todo-copy origin/todo\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:373
msgid ""
"You can also check out `origin/todo` directly to examine it or write a one-"
"off patch.  See <<detached-head,detached head>>."
msgstr ""
"`origin/todo` を直接チェックアウトして調べたり、1回限りのパッチを作成したりす"
"ることもできます。 <<detached-head,detached head>> を参照してください。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:376
msgid ""
"Note that the name \"origin\" is just the name that Git uses by default to "
"refer to the repository that you cloned from."
msgstr ""
"注意: 「origin」という名前は、clone元のリポジトリを参照するためにGitがデフォ"
"ルトで使用する名前にすぎないことに注意してください。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:378
#, no-wrap
msgid "Naming branches, tags, and other references"
msgstr "Naming branches, tags, and other references"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:384
msgid ""
"Branches, remote-tracking branches, and tags are all references to commits.  "
"All references are named with a slash-separated path name starting with "
"`refs`; the names we've been using so far are actually shorthand:"
msgstr ""
"ブランチやリモート追跡ブランチやタグはすべてコミットへの参照です。すべての参"
"照は、 `refs` で始まるスラッシュ(`/`)で区切られたパス名で名前が付けられます。"
"これまで使用してきた名前は、実際には省略形です:"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:386
msgid "The branch `test` is short for `refs/heads/test`."
msgstr "ブランチ `test` は `refs/heads/test` の略です。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:387
msgid "The tag `v2.6.18` is short for `refs/tags/v2.6.18`."
msgstr "タグ `v2.6.18` は `refs/tags/v2.6.18` の略です。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:388
msgid "`origin/master` is short for `refs/remotes/origin/master`."
msgstr "`origin/master` は `refs/remotes/origin/master` の略です。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:391
msgid ""
"The full name is occasionally useful if, for example, there ever exists a "
"tag and a branch with the same name."
msgstr ""
"フルネームでの指定は、たとえば、同じ名前のタグとブランチが存在する場合に役立"
"つことがあります。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:396
msgid ""
"(Newly created refs are actually stored in the `.git/refs` directory, under "
"the path given by their name.  However, for efficiency reasons they may also "
"be packed together in a single file; see linkgit:git-pack-refs[1])."
msgstr ""
"(新しく作成されたrefは、実際にはその名前で指定されたパスで `.git/refs` ディレ"
"クトリに保存されます。ただし、効率上の理由から、単一のファイルにまとめてパッ"
"クすることもできます。 linkgit:git-pack-refs[1] を参照してください。)"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:400
msgid ""
"As another useful shortcut, the \"HEAD\" of a repository can be referred to "
"just using the name of that repository.  So, for example, \"origin\" is "
"usually a shortcut for the HEAD branch in the repository \"origin\"."
msgstr ""
"もう1つの便利な短縮形として、リポジトリの「HEAD」は、そのリポジトリの名前を使"
"用するだけで参照できます。したがって、たとえば、「origin」は通常、「リポジト"
"リ origin のHEADブランチ」の短縮形です。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:405
msgid ""
"For the complete list of paths which Git checks for references, and the "
"order it uses to decide which to choose when there are multiple references "
"with the same shorthand name, see the \"SPECIFYING REVISIONS\" section of "
"linkgit:gitrevisions[7]."
msgstr ""
"Gitが参照を調べるするパスの完全なリスト、および同じ省略名を持つ複数の参照があ"
"る場合に選択するために使用する順序については、 linkgit:gitrevisions[7] の"
"「SPECIFYING REVISIONS」セクションを参照してください。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:407
#, no-wrap
msgid "Updating a repository with git fetch"
msgstr "Updating a repository with git fetch"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:411
msgid ""
"After you clone a repository and commit a few changes of your own, you may "
"wish to check the original repository for updates."
msgstr ""
"リポジトリのクローンを作成し、独自の変更をいくつかコミットした後、あなたは元"
"のリポジトリで更新を確認することをお勧めします。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:416
msgid ""
"The `git-fetch` command, with no arguments, will update all of the remote-"
"tracking branches to the latest version found in the original repository.  "
"It will not touch any of your own branches--not even the \"master\" branch "
"that was created for you on clone."
msgstr ""
"引数を指定しない `git-fetch` コマンドは、あなたのリポジトリにある全てのリモー"
"ト追跡ブランチを元のリポジトリにある最新バージョンに更新します。それはあなた"
"自身のどのブランチにも影響しません。それはあなたクローンで作成した「master」"
"ブランチでさえ影響しません。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:418
#, no-wrap
msgid "Fetching branches from other repositories"
msgstr "Fetching branches from other repositories"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:422
msgid ""
"You can also track branches from repositories other than the one you cloned "
"from, using linkgit:git-remote[1]:"
msgstr ""
"あなたは linkgit:git-remote[1] を使用して、クローン元以外のリポジトリからブラ"
"ンチを追跡することもできます。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:431
#, no-wrap
msgid ""
"$ git remote add staging git://git.kernel.org/.../gregkh/staging.git\n"
"$ git fetch staging\n"
"...\n"
"From git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/staging\n"
" * [new branch]      master     -> staging/master\n"
" * [new branch]      staging-linus -> staging/staging-linus\n"
" * [new branch]      staging-next -> staging/staging-next\n"
msgstr ""
"$ git remote add staging git://git.kernel.org/.../gregkh/staging.git\n"
"$ git fetch staging\n"
"...\n"
"From git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/staging\n"
" * [new branch]      master     -> staging/master\n"
" * [new branch]      staging-linus -> staging/staging-linus\n"
" * [new branch]      staging-next -> staging/staging-next\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:435
msgid ""
"New remote-tracking branches will be stored under the shorthand name that "
"you gave `git remote add`, in this case `staging`:"
msgstr ""
"新しいリモート追跡ブランチは、 `git remote add` にて、今回は `staging` と名付"
"けた省略名で保存されます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:443
#, no-wrap
msgid ""
"$ git branch -r\n"
"  origin/HEAD -> origin/master\n"
"  origin/master\n"
"  staging/master\n"
"  staging/staging-linus\n"
"  staging/staging-next\n"
msgstr ""
"$ git branch -r\n"
"  origin/HEAD -> origin/master\n"
"  origin/master\n"
"  staging/master\n"
"  staging/staging-linus\n"
"  staging/staging-next\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:447
msgid ""
"If you run `git fetch <remote>` later, the remote-tracking branches for the "
"named `<remote>` will be updated."
msgstr ""
"後で `git fetch <remote>` を実行すると、 `<remote>` という名前のリモート追跡"
"ブランチが更新されます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:450
msgid ""
"If you examine the file `.git/config`, you will see that Git has added a new "
"stanza:"
msgstr ""
"ファイル `.git/config` を調べると、Gitが新しい一節を追加したことがわかります:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:458
#, no-wrap
msgid ""
"$ cat .git/config\n"
"...\n"
"[remote \"staging\"]\n"
"\turl = git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/staging.git\n"
"\tfetch = +refs/heads/*:refs/remotes/staging/*\n"
"...\n"
msgstr ""
"$ cat .git/config\n"
"...\n"
"[remote \"staging\"]\n"
"\turl = git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/staging.git\n"
"\tfetch = +refs/heads/*:refs/remotes/staging/*\n"
"...\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:464
msgid ""
"This is what causes Git to track the remote's branches; you may modify or "
"delete these configuration options by editing `.git/config` with a text "
"editor.  (See the \"CONFIGURATION FILE\" section of linkgit:git-config[1] "
"for details.)"
msgstr ""
"これが、Gitがリモートのブランチを追跡できる理由です。 テキストエディタで `."
"git/config` を編集することにより、これらの設定オプションを変更または削除でき"
"ます。 (詳細については、 linkgit:git-config[1] の「CONFIGURATION FILE」セク"
"ションを参照してください。)"

#. type: Title ==
#: ../Documentation-sedout/user-manual.txt:466
#, no-wrap
msgid "Exploring Git history"
msgstr "Exploring Git history"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:472
msgid ""
"Git is best thought of as a tool for storing the history of a collection of "
"files.  It does this by storing compressed snapshots of the contents of a "
"file hierarchy, together with \"commits\" which show the relationships "
"between these snapshots."
msgstr ""
"Gitは、ファイルのコレクションの履歴を保存するためのツールとして最もよく考えら"
"れています。これは、ファイル階層のコンテンツの圧縮されたスナップショットを、"
"これらのスナップショット間の関係を示す「コミット」とともに保存することによっ"
"て行われます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:475
msgid ""
"Git provides extremely flexible and fast tools for exploring the history of "
"a project."
msgstr ""
"Gitは、プロジェクトの履歴を探索するための非常に柔軟で高速なツールを提供しま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:478
msgid ""
"We start with one specialized tool that is useful for finding the commit "
"that introduced a bug into a project."
msgstr ""
"私達は、プロジェクトにバグを導入したコミットを見つけるのに役立つ、ある専用"
"ツールから始めることにします。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:480
#, no-wrap
msgid "How to use bisect to find a regression"
msgstr "How to use bisect to find a regression"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:487
msgid ""
"Suppose version 2.6.18 of your project worked, but the version at \"master\" "
"crashes.  Sometimes the best way to find the cause of such a regression is "
"to perform a brute-force search through the project's history to find the "
"particular commit that caused the problem.  The linkgit:git-bisect[1] "
"command can help you do this:"
msgstr ""
"あなたのプロジェクトのバージョン2.6.18は機能していしたが、「master」のバー"
"ジョンがクラッシュしたとします。このようなデグレの原因を見つける最良の方法"
"は、プロジェクトの履歴を総当たりで検索して、問題の原因となった特定のコミット"
"を見つけることです。 linkgit:git-bisect[1] コマンドは、あなたがこれを行う助け"
"となります:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:494
#, no-wrap
msgid ""
"$ git bisect start\n"
"$ git bisect good v2.6.18\n"
"$ git bisect bad master\n"
"Bisecting: 3537 revisions left to test after this\n"
"[65934a9a028b88e83e2b0f8b36618fe503349f8e] BLOCK: Make USB storage depend on SCSI rather than selecting it [try #6]\n"
msgstr ""
"$ git bisect start\n"
"$ git bisect good v2.6.18\n"
"$ git bisect bad master\n"
"Bisecting: 3537 revisions left to test after this\n"
"[65934a9a028b88e83e2b0f8b36618fe503349f8e] BLOCK: Make USB storage depend on SCSI rather than selecting it [try #6]\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:501
msgid ""
"If you run `git branch` at this point, you'll see that Git has temporarily "
"moved you in \"(no branch)\". HEAD is now detached from any branch and "
"points directly to a commit (with commit id 65934) that is reachable from "
"\"master\" but not from v2.6.18. Compile and test it, and see whether it "
"crashes. Assume it does crash. Then:"
msgstr ""
"この時点で `git branch` を実行すると、Gitが一時的に あなたを \"(no branch)\" "
"に移動させたことがわかります。HEADはブランチから切り離され、「master」からは"
"到達可能であるが v2.6.18 からは到達できないコミット(コミットID 65934)を直接指"
"します。コンパイルしてテストし、クラッシュするかどうかを確認します。クラッ"
"シュするとします。ならばあなたは以下のようにします:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:506
#, no-wrap
msgid ""
"$ git bisect bad\n"
"Bisecting: 1769 revisions left to test after this\n"
"[7eff82c8b1511017ae605f0c99ac275a7e21b867] i2c-core: Drop useless bitmaskings\n"
msgstr ""
"$ git bisect bad\n"
"Bisecting: 1769 revisions left to test after this\n"
"[7eff82c8b1511017ae605f0c99ac275a7e21b867] i2c-core: Drop useless bitmaskings\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:512
msgid ""
"checks out an older version.  Continue like this, telling Git at each stage "
"whether the version it gives you is good or bad, and notice that the number "
"of revisions left to test is cut approximately in half each time."
msgstr ""
"より古いバージョンをチェックアウトします。このように作業を続けて、各ステップ"
"で提供されるバージョンが良いか悪いかをGitに伝え、テストするために残されたリビ"
"ジョンの数が毎回約半分に削減されることに注目してください。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:517
msgid ""
"After about 13 tests (in this case), it will output the commit id of the "
"guilty commit.  You can then examine the commit with linkgit:git-show[1], "
"find out who wrote it, and mail them your bug report with the commit id.  "
"Finally, run"
msgstr ""
"(今回は)約13回のテストの後、有罪コミット(guilty commit)のコミットIDが出力され"
"ました。あなたは、次に、 linkgit:git-show[1] を使用してコミットを調べ、誰がコ"
"ミットを作成したかを調べ、コミットIDを使用してバグレポートをメールで送信でき"
"ます。そして最後に、あなたは以下を実行します:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:520
#, no-wrap
msgid "$ git bisect reset\n"
msgstr "$ git bisect reset\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:523
msgid "to return you to the branch you were on before."
msgstr "そうすると、あなたが以前にいたブランチに戻ります。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:529
msgid ""
"Note that the version which `git bisect` checks out for you at each point is "
"just a suggestion, and you're free to try a different version if you think "
"it would be a good idea.  For example, occasionally you may land on a commit "
"that broke something unrelated; run"
msgstr ""
"注意: `git bisect` が各時点でチェックアウトするバージョンは単なる提案であり、"
"そっちの方が良い考えであると思った場合は、別のバージョンを自由に試すことがで"
"きることに注意してください。 たとえば、関係のない何かを壊したコミットにたどり"
"着くことがあったりします。このようにしたいときは、以下のようにします。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:532
#, no-wrap
msgid "$ git bisect visualize\n"
msgstr "$ git bisect visualize\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:537
msgid ""
"which will run gitk and label the commit it chose with a marker that says "
"\"bisect\".  Choose a safe-looking commit nearby, note its commit id, and "
"check it out with:"
msgstr ""
"これはgitkを実行し、選択したコミットに「bisect」というマーカーでラベルを付け"
"ます。近くで安全に見えるコミットを選択し、そのコミットIDをメモして、以下のコ"
"マンドでチェックアウトします:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:540
#, no-wrap
msgid "$ git reset --hard fb47ddb2db\n"
msgstr "$ git reset --hard fb47ddb2db\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:544
msgid ""
"then test, run `bisect good` or `bisect bad` as appropriate, and continue."
msgstr ""
"そしてテストし、必要に応じて「bisect good」または「bisect bad」を実行して続行"
"します。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:548
msgid ""
"Instead of `git bisect visualize` and then `git reset --hard fb47ddb2db`, "
"you might just want to tell Git that you want to skip the current commit:"
msgstr ""
"`git bisect visualize` と `git reset --hard fb47ddb2db` を行う代わりに、現在"
"のコミットをスキップすることをGitに伝えたい場合があります:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:551
#, no-wrap
msgid "$ git bisect skip\n"
msgstr "$ git bisect skip\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:555
msgid ""
"In this case, though, Git may not eventually be able to tell the first bad "
"one between some first skipped commits and a later bad commit."
msgstr ""
"ただし、この場合、Gitは、最初にスキップされたコミットとその後の不正なコミット"
"の間で、最初の不正なコミットを最終的に判断できない可能性があります。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:560
msgid ""
"There are also ways to automate the bisecting process if you have a test "
"script that can tell a good from a bad commit. See linkgit:git-bisect[1] for "
"more information about this and other `git bisect` features."
msgstr ""
"良いコミットと悪いコミットを区別できるテストスクリプトがある場合は、bisecする"
"プロセスを自動化する方法もあります。この機能およびその他の `git bisect` 機能"
"の詳細については、 linkgit:git-bisect[1] を参照してください。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:562
#, no-wrap
msgid "Naming commits"
msgstr "Naming commits"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:565
msgid "We have seen several ways of naming commits already:"
msgstr "コミットに名前を付けるいくつかの方法をすでに見てきました:"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:567
msgid "40-hexdigit object name"
msgstr "16進40桁のオブジェクト名"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:569
msgid "branch name: refers to the commit at the head of the given branch"
msgstr "ブランチ名: 指定のブランチの先頭のコミットを参照します"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:572
msgid ""
"tag name: refers to the commit pointed to by the given tag (we've seen "
"branches and tags are special cases of <<how-git-stores-references,"
"references>>)."
msgstr ""
"タグ名: 指定のタグが指すコミットを参照します(ブランチとタグは <<how-git-"
"stores-references,参照>> の特殊なケースです)。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:573
msgid "HEAD: refers to the head of the current branch"
msgstr "HEAD: 現在のブランチのheadを参照します"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:577
msgid ""
"There are many more; see the \"SPECIFYING REVISIONS\" section of the linkgit:"
"gitrevisions[7] man page for the complete list of ways to name revisions.  "
"Some examples:"
msgstr ""
"その他いろいろ: リビジョンに名前を付ける方法の完全なリストについては、 "
"linkgit:gitrevisions[7] のマニュアルページの「SPECIFYING REVISIONS」セクショ"
"ンを参照してください。 例をいくつか:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:584
#, no-wrap
msgid ""
"$ git show fb47ddb2 # the first few characters of the object name\n"
"\t\t    # are usually enough to specify it uniquely\n"
"$ git show HEAD^    # the parent of the HEAD commit\n"
"$ git show HEAD^^   # the grandparent\n"
"$ git show HEAD~4   # the great-great-grandparent\n"
msgstr ""
"$ git show fb47ddb2 # オブジェクト名の最初の数文字は、\n"
"\t\t    # 通常、一意に指定するのに十分です。\n"
"$ git show HEAD^    # HEADコミットの親\n"
"$ git show HEAD^^   # 祖父母(grandparent;親の親)\n"
"$ git show HEAD~4   # 曽祖父母(great-great-grandparent)\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:589
msgid ""
"Recall that merge commits may have more than one parent; by default, `^` and "
"`~` follow the first parent listed in the commit, but you can also choose:"
msgstr ""
"マージコミットには複数の親が存在する可能性があることを思い出してください。 デ"
"フォルトでは、 `^` と `~` はそのコミットにリストされている最初の親を辿ります"
"が、以下のように選択することもできます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:593
#, no-wrap
msgid ""
"$ git show HEAD^1   # show the first parent of HEAD\n"
"$ git show HEAD^2   # show the second parent of HEAD\n"
msgstr ""
"$ git show HEAD^1   # HEADの(複数ある)親のうち1番目の親\n"
"$ git show HEAD^2   # HEADの複数ある親のうち2番目の親\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:597
msgid "In addition to HEAD, there are several other special names for commits:"
msgstr "HEADに加えて、コミットには他にもいくつかの特別な名前があります:"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:601
msgid ""
"Merges (to be discussed later), as well as operations such as `git reset`, "
"which change the currently checked-out commit, generally set ORIG_HEAD to "
"the value HEAD had before the current operation."
msgstr ""
"マージ(後で説明します)、および現在チェックアウトされているコミットを変更する "
"`git reset` などの操作では、通常、 ORIG_HEAD を、「現在の操作の前にHEADが持っ"
"ていた値」に設定します。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:605
msgid ""
"The `git fetch` operation always stores the head of the last fetched branch "
"in FETCH_HEAD.  For example, if you run `git fetch` without specifying a "
"local branch as the target of the operation"
msgstr ""
"`git fetch` 操作は、常に、最後にフェッチされたブランチのヘッドをFETCH_HEADに"
"格納します。 たとえば、以下のように、操作のターゲットとしてローカルブランチを"
"指定せずに `git fetch` を実行した場合"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:608
#, no-wrap
msgid "$ git fetch git://example.com/proj.git theirbranch\n"
msgstr "$ git fetch git://example.com/proj.git theirbranch\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:611
msgid "the fetched commits will still be available from FETCH_HEAD."
msgstr "フェッチされたコミットは、引き続きFETCH_HEADから利用できます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:615
msgid ""
"When we discuss merges we'll also see the special name MERGE_HEAD, which "
"refers to the other branch that we're merging in to the current branch."
msgstr ""
"マージについて説明すると、現在のブランチにマージしている他のブランチを指す特"
"別な名前MERGE_HEADもあります。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:619
msgid ""
"The linkgit:git-rev-parse[1] command is a low-level command that is "
"occasionally useful for translating some name for a commit to the object "
"name for that commit:"
msgstr ""
"linkgit:git-rev-parse[1] コマンドは、コミットの名前をそのコミットのオブジェク"
"ト名に変換するのに役立つことがある低レベルのコマンドです。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:623
#, no-wrap
msgid ""
"$ git rev-parse origin\n"
"e05db0fd4f31dde7005f075a84f96b360d05984b\n"
msgstr ""
"$ git rev-parse origin\n"
"e05db0fd4f31dde7005f075a84f96b360d05984b\n"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:626
#, no-wrap
msgid "Creating tags"
msgstr "Creating tags"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:630
msgid "We can also create a tag to refer to a particular commit; after running"
msgstr "特定のコミットを参照するタグを作成することもできます。以下を実行すると"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:633
#, no-wrap
msgid "$ git tag stable-1 1b2e1d63ff\n"
msgstr "$ git tag stable-1 1b2e1d63ff\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:636
msgid "You can use `stable-1` to refer to the commit 1b2e1d63ff."
msgstr "あなたは `stable-1` を使用して、コミット `1b2e1d63ff` を参照できます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:641
msgid ""
"This creates a \"lightweight\" tag.  If you would also like to include a "
"comment with the tag, and possibly sign it cryptographically, then you "
"should create a tag object instead; see the linkgit:git-tag[1] man page for "
"details."
msgstr ""
"これにより、「軽量」タグ(lightweight tag)が作成されます。タグにコメントを含"
"め、場合によっては暗号で署名する場合は、代わりにタグオブジェクトを作成する必"
"要があります。詳細については、 linkgit:git-tag[1] のマニュアルページを参照し"
"てください。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:643
#, no-wrap
msgid "Browsing revisions"
msgstr "Browsing revisions"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:648
msgid ""
"The linkgit:git-log[1] command can show lists of commits.  On its own, it "
"shows all commits reachable from the parent commit; but you can also make "
"more specific requests:"
msgstr ""
"linkgit:git-log[1] コマンドは、コミットのリストを表示できます。それ自体で、親"
"コミットから到達可能なすべてのコミットが表示されますが、より具体的なリクエス"
"トを行うこともできます。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:660
#, no-wrap
msgid ""
"$ git log v2.5..\t# commits since (not reachable from) v2.5\n"
"$ git log test..master\t# commits reachable from master but not test\n"
"$ git log master..test\t# ...reachable from test but not master\n"
"$ git log master...test\t# ...reachable from either test or master,\n"
"\t\t\t#    but not both\n"
"$ git log --since=\"2 weeks ago\" # commits from the last 2 weeks\n"
"$ git log Makefile      # commits which modify Makefile\n"
"$ git log fs/\t\t# ... which modify any file under fs/\n"
"$ git log -S'foo()'\t# commits which add or remove any file data\n"
"\t\t\t# matching the string 'foo()'\n"
msgstr ""
"$ git log v2.5..\t# commits since (not reachable from) v2.5\n"
"$ git log test..master\t# commits reachable from master but not test\n"
"$ git log master..test\t# ...reachable from test but not master\n"
"$ git log master...test\t# ...reachable from either test or master,\n"
"\t\t\t#    but not both\n"
"$ git log --since=\"2 weeks ago\" # commits from the last 2 weeks\n"
"$ git log Makefile      # commits which modify Makefile\n"
"$ git log fs/\t\t# ... which modify any file under fs/\n"
"$ git log -S'foo()'\t# commits which add or remove any file data\n"
"\t\t\t# matching the string 'foo()'\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:664
msgid ""
"And of course you can combine all of these; the following finds commits "
"since v2.5 which touch the `Makefile` or any file under `fs`:"
msgstr ""
"そしてもちろん、これらすべてを組み合わせることができます。 以下は、 "
"`Makefile` または `fs` ディレクトリより下の任意のファイル、を触った v2.5 以降"
"のコミットを検索します:"

# (訳注:タグの指定であるので存在するタグ名を指定する必要がある。手元では更にセパレータ `--` が必要だった)
#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:667
#, no-wrap
msgid "$ git log v2.5.. Makefile fs/\n"
msgstr "$ git log v2.5.. Makefile fs/\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:670
msgid "You can also ask git log to show patches:"
msgstr "パッチを表示するようにgit logに依頼することもできます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:673
#, no-wrap
msgid "$ git log -p\n"
msgstr "$ git log -p\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:677
msgid ""
"See the `--pretty` option in the linkgit:git-log[1] man page for more "
"display options."
msgstr ""
"その他の表示オプションについては、 linkgit:git-log[1] のマニュアルページの "
"`--pretty` オプションを参照してください。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:682
msgid ""
"Note that git log starts with the most recent commit and works backwards "
"through the parents; however, since Git history can contain multiple "
"independent lines of development, the particular order that commits are "
"listed in may be somewhat arbitrary."
msgstr ""
"git log は最新のコミットから始まり、親を介して逆方向に機能することに注意して"
"ください。 ただし、Gitの履歴には複数の独立した開発ラインが含まれる可能性があ"
"るため、コミットがリストされる順序は多少前後する可能性があります。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:684
#, no-wrap
msgid "Generating diffs"
msgstr "Generating diffs"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:688
msgid ""
"You can generate diffs between any two versions using linkgit:git-diff[1]:"
msgstr ""
"linkgit:git-diff[1] を使用して、任意の2つのバージョン間の差分(diff)を生成でき"
"ます。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:691
#, no-wrap
msgid "$ git diff master..test\n"
msgstr "$ git diff master..test\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:696
msgid ""
"That will produce the diff between the tips of the two branches.  If you'd "
"prefer to find the diff from their common ancestor to test, you can use "
"three dots instead of two:"
msgstr ""
"これにより、2つのブランチの先端の間にdiffが生じます。共通の祖先からのdiffを見"
"つけてテストしたい場合は、2つではなく3つのドットを使用できます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:699
#, no-wrap
msgid "$ git diff master...test\n"
msgstr "$ git diff master...test\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:703
msgid ""
"Sometimes what you want instead is a set of patches; for this you can use "
"linkgit:git-format-patch[1]:"
msgstr ""
"しばしば、あなたが必要なのは差分の代わりにパッチのセットである場合がありま"
"す。これには、 linkgit:git-format-patch[1] を使用できます。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:706
#, no-wrap
msgid "$ git format-patch master..test\n"
msgstr "$ git format-patch master..test\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:710
msgid ""
"will generate a file with a patch for each commit reachable from test but "
"not from master."
msgstr ""
"これは、masterからではなく、testから到達可能な各コミットのパッチを含むファイ"
"ルを生成します。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:712
#, no-wrap
msgid "Viewing old file versions"
msgstr "Viewing old file versions"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:718
msgid ""
"You can always view an old version of a file by just checking out the "
"correct revision first.  But sometimes it is more convenient to be able to "
"view an old version of a single file without checking anything out; this "
"command does that:"
msgstr ""
"あなたは、最初に正しいリビジョンをチェックアウトするだけで、いつでも古いバー"
"ジョンのファイルを表示できます。ただし、何もチェックアウトせずに古いバージョ"
"ンの単一ファイルを表示できる方が便利な場合もあります。以下のコマンドはそれを"
"行います:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:721
#, no-wrap
msgid "$ git show v2.5:fs/locks.c\n"
msgstr "$ git show v2.5:fs/locks.c\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:725
msgid ""
"Before the colon may be anything that names a commit, and after it may be "
"any path to a file tracked by Git."
msgstr ""
"コロン(`:`)の前にはコミットを指定するものがあり、その後にはGitによって追跡さ"
"れているファイルへのパスがあります。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:727
#: ../Documentation-sedout/user-manual.txt:2130
#, no-wrap
msgid "Examples"
msgstr "Examples"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:730
#, no-wrap
msgid "Counting the number of commits on a branch"
msgstr "Counting the number of commits on a branch"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:734
msgid ""
"Suppose you want to know how many commits you've made on `mybranch` since it "
"diverged from `origin`:"
msgstr ""
"あなたが `origin` から分岐して以来、 `mybranch` に対して行ったコミットの数を"
"知りたいとします:"

# $ git log --pretty=oneline origin..docs-ja | wc -l
# 107
#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:737
#, no-wrap
msgid "$ git log --pretty=oneline origin..mybranch | wc -l\n"
msgstr "$ git log --pretty=oneline origin..mybranch | wc -l\n"

# $ git rev-list origin..docs-ja | wc -l
# 107
#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:742
msgid ""
"Alternatively, you may often see this sort of thing done with the lower-"
"level command linkgit:git-rev-list[1], which just lists the SHA-1's of all "
"the given commits:"
msgstr ""
"あるいは、この種のことは、指定されたすべてのコミットのSHA-1を一覧表示するだけ"
"の低レベルのコマンド linkgit:git-rev-list[1] で行われることがよくあります:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:745
#, no-wrap
msgid "$ git rev-list origin..mybranch | wc -l\n"
msgstr "$ git rev-list origin..mybranch | wc -l\n"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:748
#, no-wrap
msgid "Check whether two branches point at the same history"
msgstr "2つのブランチが同じ履歴を指しているかどうかを確認します"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:752
msgid ""
"Suppose you want to check whether two branches point at the same point in "
"history."
msgstr ""
"あなたが、2つのブランチが履歴の同じポイントを指しているかどうかを確認したいと"
"します。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:755
#, no-wrap
msgid "$ git diff origin..master\n"
msgstr "$ git diff origin..master\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:761
msgid ""
"will tell you whether the contents of the project are the same at the two "
"branches; in theory, however, it's possible that the same project contents "
"could have been arrived at by two different historical routes.  You could "
"compare the object names:"
msgstr ""
"プロジェクトの内容が2つのブランチで同じであるかどうかがわかります。ただし、理"
"論的には、同じプロジェクトの内容が2つの異なる履歴ルートによって到達された可能"
"性があります。あなたはオブジェクト名を比較できます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:767
#, no-wrap
msgid ""
"$ git rev-list origin\n"
"e05db0fd4f31dde7005f075a84f96b360d05984b\n"
"$ git rev-list master\n"
"e05db0fd4f31dde7005f075a84f96b360d05984b\n"
msgstr ""
"$ git rev-list origin\n"
"e05db0fd4f31dde7005f075a84f96b360d05984b\n"
"$ git rev-list master\n"
"e05db0fd4f31dde7005f075a84f96b360d05984b\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:772
msgid ""
"Or you could recall that the `...` operator selects all commits reachable "
"from either one reference or the other but not both; so"
msgstr ""
"または、 `...` 演算子は、一方の参照または他方の参照から到達可能なすべてのコ"
"ミットを選択しますが、両方は選択しないことを思い出してください。ということで"
"以下を実行すると"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:775
#, no-wrap
msgid "$ git log origin...master\n"
msgstr "$ git log origin...master\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:778
msgid "will return no commits when the two branches are equal."
msgstr "この2つのブランチが等しい場合、コミットは返されません。"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:780
#, no-wrap
msgid "Find first tagged version including a given fix"
msgstr "指定の修正を含む最初のタグ付きバージョンを検索する"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:785
msgid ""
"Suppose you know that the commit e05db0fd fixed a certain problem.  You'd "
"like to find the earliest tagged release that contains that fix."
msgstr ""
"コミット e05db0fd が特定の問題を修正したことを知っているとします。その修正を"
"含む最も古いタグ付きリリースを見つけたいと思います。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:789
msgid ""
"Of course, there may be more than one answer--if the history branched after "
"commit e05db0fd, then there could be multiple \"earliest\" tagged releases."
msgstr ""
"ええ、もちろん、複数の答えがあるかもしれません。コミット e05db0fd の後に履歴"
"が分岐した場合、複数の「最も早い」タグ付きリリースが存在する可能性がありま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:791
msgid "You could just visually inspect the commits since e05db0fd:"
msgstr "あなたは e05db0fd 以降のコミットを視覚的に検査できます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:794
#, no-wrap
msgid "$ gitk e05db0fd..\n"
msgstr "$ gitk e05db0fd..\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:799
msgid ""
"or you can use linkgit:git-name-rev[1], which will give the commit a name "
"based on any tag it finds pointing to one of the commit's descendants:"
msgstr ""
"または、あなたは linkgit:git-name-rev[1] を使用できます。これにより、コミット"
"の子孫の1つを指すタグが見つかった場合は、そのコミットに名前が与えられます(訳"
"注:コミットの子孫の1つを指すタグが tags/v1.5.0-rc1 であったのでそこから辿っ"
"て e05db0fd は tags/v1.5.0-rc1^0~23 という「名前」になった):"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:803
#, no-wrap
msgid ""
"$ git name-rev --tags e05db0fd\n"
"e05db0fd tags/v1.5.0-rc1^0~23\n"
msgstr ""
"$ git name-rev --tags e05db0fd\n"
"e05db0fd tags/v1.5.0-rc1^0~23\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:807
msgid ""
"The linkgit:git-describe[1] command does the opposite, naming the revision "
"using a tag on which the given commit is based:"
msgstr ""
"linkgit:git-describe[1] コマンドは逆のことを行い、指定されたコミットの基に"
"なっているタグを使用してリビジョンに名前を付けます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:811
#, no-wrap
msgid ""
"$ git describe e05db0fd\n"
"v1.5.0-rc0-260-ge05db0f\n"
msgstr ""
"$ git describe e05db0fd\n"
"v1.5.0-rc0-260-ge05db0f\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:815
msgid ""
"but that may sometimes help you guess which tags might come after the given "
"commit."
msgstr ""
"これは、特定のコミット後にどのタグが来るかを推測するのに役立つ場合がありま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:818
msgid ""
"If you just want to verify whether a given tagged version contains a given "
"commit, you could use linkgit:git-merge-base[1]:"
msgstr ""
"あなたが特定のタグ付きバージョンに特定のコミットが含まれているかどうかを確認"
"したいだけの場合は、 linkgit:git-merge-base[1] を使用できます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:822
#, no-wrap
msgid ""
"$ git merge-base e05db0fd v1.5.0-rc1\n"
"e05db0fd4f31dde7005f075a84f96b360d05984b\n"
msgstr ""
"$ git merge-base e05db0fd v1.5.0-rc1\n"
"e05db0fd4f31dde7005f075a84f96b360d05984b\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:828
msgid ""
"The merge-base command finds a common ancestor of the given commits, and "
"always returns one or the other in the case where one is a descendant of the "
"other; so the above output shows that e05db0fd actually is an ancestor of "
"v1.5.0-rc1."
msgstr ""
"merge-baseコマンドは、指定されたコミットの共通の祖先を検索し、一方が他方の子"
"孫である場合は常にどちらか一方を返します。したがって、上記の出力は、e05db0fd"
"が実際にはv1.5.0-rc1の祖先であることを示しています。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:830
msgid "Alternatively, note that"
msgstr "あるいは、以下のように"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:833
#, no-wrap
msgid "$ git log v1.5.0-rc1..e05db0fd\n"
msgstr "$ git log v1.5.0-rc1..e05db0fd\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:837
msgid ""
"will produce empty output if and only if v1.5.0-rc1 includes e05db0fd, "
"because it outputs only commits that are not reachable from v1.5.0-rc1."
msgstr ""
"とすると、v1.5.0-rc1にe05db0fdが含まれている場合のみ、空の出力が生成されま"
"す。これは、v1.5.0-rc1から到達できないコミットのみを出力するためです。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:842
msgid ""
"As yet another alternative, the linkgit:git-show-branch[1] command lists the "
"commits reachable from its arguments with a display on the left-hand side "
"that indicates which arguments that commit is reachable from.  So, if you "
"run something like"
msgstr ""
"さらに別の方法として、 linkgit:git-show-branch[1] コマンドは、指定の引数から"
"到達可能なコミットを一覧表示し、その各行の左側にそのコミットが指定のどの引数"
"から到達可能かを示す表示を行います。よって、あなたが以下のようなものを実行す"
"る場合"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:851
#, no-wrap
msgid ""
"$ git show-branch e05db0fd v1.5.0-rc0 v1.5.0-rc1 v1.5.0-rc2\n"
"! [e05db0fd] Fix warnings in sha1_file.c - use C99 printf format if\n"
"available\n"
" ! [v1.5.0-rc0] GIT v1.5.0 preview\n"
"  ! [v1.5.0-rc1] GIT v1.5.0-rc1\n"
"   ! [v1.5.0-rc2] GIT v1.5.0-rc2\n"
"...\n"
msgstr ""
"$ git show-branch e05db0fd v1.5.0-rc0 v1.5.0-rc1 v1.5.0-rc2\n"
"! [e05db0fd] Fix warnings in sha1_file.c - use C99 printf format if\n"
"available\n"
" ! [v1.5.0-rc0] GIT v1.5.0 preview\n"
"  ! [v1.5.0-rc1] GIT v1.5.0-rc1\n"
"   ! [v1.5.0-rc2] GIT v1.5.0-rc2\n"
"...\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:854
msgid "then a line like"
msgstr "そしてこれに続く行は以下のようになります"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:858
#, no-wrap
msgid ""
"+ ++ [e05db0fd] Fix warnings in sha1_file.c - use C99 printf format if\n"
"available\n"
msgstr ""
"+ ++ [e05db0fd] Fix warnings in sha1_file.c - use C99 printf format if\n"
"available\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:862
msgid ""
"shows that e05db0fd is reachable from itself, from v1.5.0-rc1, and from "
"v1.5.0-rc2, and not from v1.5.0-rc0."
msgstr ""
"これは、e05db0fdが、v1.5.0-rc0からではなく、v1.5.0-rc1とv1.5.0-rc2から到達可"
"能であることを示しています。"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:864
#, no-wrap
msgid "Showing commits unique to a given branch"
msgstr "指定のブランチに固有のコミットを表示する"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:868
msgid ""
"Suppose you would like to see all the commits reachable from the branch head "
"named `master` but not from any other head in your repository."
msgstr ""
"`master` という名前のブランチヘッドから到達可能なすべてのコミットを確認したい"
"が、リポジトリ内の他のヘッドからは到達できないと仮定します。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:871
msgid ""
"We can list all the heads in this repository with linkgit:git-show-ref[1]:"
msgstr ""
"linkgit:git-show-ref[1] を使用して、このリポジトリ内のすべてのヘッドを一覧表"
"示できます。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:879
#, no-wrap
msgid ""
"$ git show-ref --heads\n"
"bf62196b5e363d73353a9dcf094c59595f3153b7 refs/heads/core-tutorial\n"
"db768d5504c1bb46f63ee9d6e1772bd047e05bf9 refs/heads/maint\n"
"a07157ac624b2524a059a3414e99f6f44bebc1e7 refs/heads/master\n"
"24dbc180ea14dc1aebe09f14c8ecf32010690627 refs/heads/tutorial-2\n"
"1e87486ae06626c2f31eaa63d26fc0fd646c8af2 refs/heads/tutorial-fixes\n"
msgstr ""
"$ git show-ref --heads\n"
"bf62196b5e363d73353a9dcf094c59595f3153b7 refs/heads/core-tutorial\n"
"db768d5504c1bb46f63ee9d6e1772bd047e05bf9 refs/heads/maint\n"
"a07157ac624b2524a059a3414e99f6f44bebc1e7 refs/heads/master\n"
"24dbc180ea14dc1aebe09f14c8ecf32010690627 refs/heads/tutorial-2\n"
"1e87486ae06626c2f31eaa63d26fc0fd646c8af2 refs/heads/tutorial-fixes\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:883
msgid ""
"We can get just the branch-head names, and remove `master`, with the help of "
"the standard utilities cut and grep:"
msgstr ""
"標準のユーティリティcutとgrepを使用して、ブランチヘッド名だけを取得し、 "
"`master` を削除できます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:890
#, no-wrap
msgid ""
"$ git show-ref --heads | cut -d' ' -f2 | grep -v '^refs/heads/master'\n"
"refs/heads/core-tutorial\n"
"refs/heads/maint\n"
"refs/heads/tutorial-2\n"
"refs/heads/tutorial-fixes\n"
msgstr ""
"$ git show-ref --heads | cut -d' ' -f2 | grep -v '^refs/heads/master'\n"
"refs/heads/core-tutorial\n"
"refs/heads/maint\n"
"refs/heads/tutorial-2\n"
"refs/heads/tutorial-fixes\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:894
msgid ""
"And then we can ask to see all the commits reachable from master but not "
"from these other heads:"
msgstr ""
"そして、masterから到達可能だけども他のヘッドからは到達できない全てのコミット"
"を確認するように依頼できます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:898
#, no-wrap
msgid ""
"$ gitk master --not $( git show-ref --heads | cut -d' ' -f2 |\n"
"\t\t\t\tgrep -v '^refs/heads/master' )\n"
msgstr ""
"$ gitk master --not $( git show-ref --heads | cut -d' ' -f2 |\n"
"\t\t\t\tgrep -v '^refs/heads/master' )\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:902
msgid ""
"Obviously, endless variations are possible; for example, to see all commits "
"reachable from some head but not from any tag in the repository:"
msgstr ""
"このようにすれば、明らかに、無限のバリエーションが可能です。 たとえば、リポジ"
"トリ内のタグからではなく、あるヘッドから到達可能なすべてのコミットを表示する"
"には、以下のようにします:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:905
#, no-wrap
msgid "$ gitk $( git show-ref --heads ) --not  $( git show-ref --tags )\n"
msgstr "$ gitk $( git show-ref --heads ) --not  $( git show-ref --tags )\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:909
msgid ""
"(See linkgit:gitrevisions[7] for explanations of commit-selecting syntax "
"such as `--not`.)"
msgstr ""
"( `--not` などのコミット選択構文の説明については、 linkgit:gitrevisions[7] を"
"参照してください。)"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:911
#, no-wrap
msgid "Creating a changelog and tarball for a software release"
msgstr "Creating a changelog and tarball for a software release"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:915
msgid ""
"The linkgit:git-archive[1] command can create a tar or zip archive from any "
"version of a project; for example:"
msgstr ""
"linkgit:git-archive[1] コマンドは、プロジェクトの任意のバージョンからtarまた"
"はzipアーカイブを作成できます。例えば:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:918
#, no-wrap
msgid "$ git archive -o latest.tar.gz --prefix=project/ HEAD\n"
msgstr "$ git archive -o latest.tar.gz --prefix=project/ HEAD\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:924
msgid ""
"will use HEAD to produce a gzipped tar archive in which each filename is "
"preceded by `project/`.  The output file format is inferred from the output "
"file extension if possible, see linkgit:git-archive[1] for details."
msgstr ""
"HEADを使用して、各ファイル名の前に `project/` が付いたgzip圧縮されたtarアーカ"
"イブを作成します。出力ファイル形式は、可能であれば出力ファイル拡張子から推測"
"されます。詳細については linkgit:git-archive[1] を参照してください。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:927
msgid ""
"Versions of Git older than 1.7.7 don't know about the `tar.gz` format, "
"you'll need to use gzip explicitly:"
msgstr ""
"1.7.7より古いバージョンのGitは、 `tar.gz`形式を認識していません。明示的にgzip"
"を使用する必要があります:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:930
#, no-wrap
msgid "$ git archive --format=tar --prefix=project/ HEAD | gzip >latest.tar.gz\n"
msgstr "$ git archive --format=tar --prefix=project/ HEAD | gzip >latest.tar.gz\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:935
msgid ""
"If you're releasing a new version of a software project, you may want to "
"simultaneously make a changelog to include in the release announcement."
msgstr ""
"ソフトウェアプロジェクトの新しいバージョンをリリースする場合は、リリースアナ"
"ウンスに含める変更ログを同時に作成することをお勧めします。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:938
msgid ""
"Linus Torvalds, for example, makes new kernel releases by tagging them, then "
"running:"
msgstr ""
"Linus Torvaldsは、たとえば、タグを付けて実行することにより、新しいカーネルリ"
"リースを作成します:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:941
#, no-wrap
msgid "$ release-script 2.6.12 2.6.13-rc6 2.6.13-rc7\n"
msgstr "$ release-script 2.6.12 2.6.13-rc6 2.6.13-rc7\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:944
msgid "where release-script is a shell script that looks like:"
msgstr "ここで、release-script は以下のようなシェルスクリプトです:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:956
#, no-wrap
msgid ""
"#!/bin/sh\n"
"stable=\"$1\"\n"
"last=\"$2\"\n"
"new=\"$3\"\n"
"echo \"# git tag v$new\"\n"
"echo \"git archive --prefix=linux-$new/ v$new | gzip -9 > ../linux-$new.tar.gz\"\n"
"echo \"git diff v$stable v$new | gzip -9 > ../patch-$new.gz\"\n"
"echo \"git log --no-merges v$new ^v$last > ../ChangeLog-$new\"\n"
"echo \"git shortlog --no-merges v$new ^v$last > ../ShortLog\"\n"
"echo \"git diff --stat --summary -M v$last v$new > ../diffstat-$new\"\n"
msgstr ""
"#!/bin/sh\n"
"stable=\"$1\"\n"
"last=\"$2\"\n"
"new=\"$3\"\n"
"echo \"# git tag v$new\"\n"
"echo \"git archive --prefix=linux-$new/ v$new | gzip -9 > ../linux-$new.tar.gz\"\n"
"echo \"git diff v$stable v$new | gzip -9 > ../patch-$new.gz\"\n"
"echo \"git log --no-merges v$new ^v$last > ../ChangeLog-$new\"\n"
"echo \"git shortlog --no-merges v$new ^v$last > ../ShortLog\"\n"
"echo \"git diff --stat --summary -M v$last v$new > ../diffstat-$new\"\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:960
msgid ""
"and then he just cut-and-pastes the output commands after verifying that "
"they look OK."
msgstr ""
"そしてそれから、シェルスクリプトが出力したコマンドが正常に見えることを確認し"
"た後、出力されたコマンドをカットアンドペーストします。"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:962
#, no-wrap
msgid "Finding commits referencing a file with given content"
msgstr "指定の内容を含むファイルを参照するコミットを検索する"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:967
msgid ""
"Somebody hands you a copy of a file, and asks which commits modified a file "
"such that it contained the given content either before or after the commit.  "
"You can find out with this:"
msgstr ""
"誰かがあなたにファイルのコピーを渡し、与えられた内容を含むようにファイルを変"
"更したコミットを、そのコミットの前と後のどちらで行ったかを尋ねます。 それを知"
"るには、以下のようにします:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:971
#, no-wrap
msgid ""
"$  git log --raw --abbrev=40 --pretty=oneline |\n"
"\tgrep -B 1 `git hash-object filename`\n"
msgstr ""
"$  git log --raw --abbrev=40 --pretty=oneline |\n"
"\tgrep -B 1 `git hash-object filename`\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:976
msgid ""
"Figuring out why this works is left as an exercise to the (advanced)  "
"student.  The linkgit:git-log[1], linkgit:git-diff-tree[1], and linkgit:git-"
"hash-object[1] man pages may prove helpful."
msgstr ""
"なぜこれが機能するのかを理解することは、(上級)学生への演習として残されていま"
"す。 linkgit:git-log[1] や linkgit:git-diff-tree[1] や linkgit:git-hash-"
"object[1] のマニュアルページが役に立つ事でしょう。"

#. type: Title ==
#: ../Documentation-sedout/user-manual.txt:978
#, no-wrap
msgid "Developing with Git"
msgstr "Gitでの開発作業"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:981
#, no-wrap
msgid "Telling Git your name"
msgstr "あなたの名前をGitに教える"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:985
msgid ""
"Before creating any commits, you should introduce yourself to Git.  The "
"easiest way to do so is to use linkgit:git-config[1]:"
msgstr ""
"コミットを作成する前に、あなた自身をGitに紹介すべきです。これを行う最も簡単な"
"方法は、 linkgit:git-config[1] を使用することです:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:989
#, no-wrap
msgid ""
"$ git config --global user.name 'Your Name Comes Here'\n"
"$ git config --global user.email 'you@yourdomain.example.com'\n"
msgstr ""
"$ git config --global user.name 'Your Name Comes Here'\n"
"$ git config --global user.email 'you@yourdomain.example.com'\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:993
msgid ""
"Which will add the following to a file named `.gitconfig` in your home "
"directory:"
msgstr ""
"これにより、あなたのホームディレクトリの `.gitconfig` という名前のファイルに"
"以下のものが追加されます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:998
#, no-wrap
msgid ""
"[user]\n"
"\tname = Your Name Comes Here\n"
"\temail = you@yourdomain.example.com\n"
msgstr ""
"[user]\n"
"\tname = Your Name Comes Here\n"
"\temail = you@yourdomain.example.com\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1003
msgid ""
"See the \"CONFIGURATION FILE\" section of linkgit:git-config[1] for details "
"on the configuration file.  The file is plain text, so you can also edit it "
"with your favorite editor."
msgstr ""
"構成ファイルの詳細については、 linkgit:git-config[1]の「CONFIGURATION FILE」"
"セクションを参照してください。ファイルはプレーンテキストなので、お気に入りの"
"エディタで編集することもできます。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:1006
#: ../Documentation-sedout/user-manual.txt:4335
#, no-wrap
msgid "Creating a new repository"
msgstr "Creating a new repository"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1009
msgid "Creating a new repository from scratch is very easy:"
msgstr "新しいリポジトリをイチから作成するのは非常に簡単です:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1014
#, no-wrap
msgid ""
"$ mkdir project\n"
"$ cd project\n"
"$ git init\n"
msgstr ""
"$ mkdir project\n"
"$ cd project\n"
"$ git init\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1017
msgid "If you have some initial content (say, a tarball):"
msgstr "初期コンテンツ(たとえば tarball)がある場合:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1024
#, no-wrap
msgid ""
"$ tar xzvf project.tar.gz\n"
"$ cd project\n"
"$ git init\n"
"$ git add . # include everything below ./ in the first commit:\n"
"$ git commit\n"
msgstr ""
"$ tar xzvf project.tar.gz\n"
"$ cd project\n"
"$ git init\n"
"$ git add . # include everything below ./ in the first commit:\n"
"$ git commit\n"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:1027
#, no-wrap
msgid "How to make a commit"
msgstr "How to make a commit"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1030
msgid "Creating a new commit takes three steps:"
msgstr "新しいコミットの以下の3つのステップがあります:"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1033
msgid ""
"Making some changes to the working directory using your favorite editor."
msgstr ""
"あなたのお気に入りのエディタを使用して、作業ディレクトリでいくつかの変更を加"
"えます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1034
msgid "Telling Git about your changes."
msgstr "あなたの変更をGitに知らせます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1036
msgid "Creating the commit using the content you told Git about in step 2."
msgstr "手順2でGitに知らせた内容でコミットを作成します。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1041
msgid ""
"In practice, you can interleave and repeat steps 1 and 2 as many times as "
"you want: in order to keep track of what you want committed at step 3, Git "
"maintains a snapshot of the tree's contents in a special staging area called "
"\"the index.\""
msgstr ""
"実際には、あなたが望むかぎりステップ1と2を何度でも行き来したり繰り返したりす"
"ることができます。ステップ3でコミットしたい内容を追跡するために、Gitは「イン"
"デックス」(index)と呼ばれる特別なステージング領域にツリーのコンテンツのスナッ"
"プショットを保持します。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1046
msgid ""
"At the beginning, the content of the index will be identical to that of the "
"HEAD.  The command `git diff --cached`, which shows the difference between "
"the HEAD and the index, should therefore produce no output at that point."
msgstr ""
"最初は、インデックスの内容はHEADの内容と同じになります。したがって、HEADとイ"
"ンデックスの違いを示すコマンド `git diff --cached` は、その時点では何も出力を"
"生成しないはずです。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1048
msgid "Modifying the index is easy:"
msgstr "インデックスの変更は簡単です:"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1050
msgid "To update the index with the contents of a new or modified file, use"
msgstr ""
"新規または変更されたファイルの内容でインデックスを更新するには、以下を使用し"
"ます"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1053
#, no-wrap
msgid "$ git add path/to/file\n"
msgstr "$ git add path/to/file\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1056
msgid "To remove a file from the index and from the working tree, use"
msgstr "インデックスと作業ツリーからファイルを削除するには、以下を使用します"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1059
#, no-wrap
msgid "$ git rm path/to/file\n"
msgstr "$ git rm path/to/file\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1062
msgid "After each step you can verify that"
msgstr "各ステップの後、あなたは以下のようにして確認できます"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1065
#, no-wrap
msgid "$ git diff --cached\n"
msgstr "$ git diff --cached\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1069
msgid ""
"always shows the difference between the HEAD and the index file--this is "
"what you'd commit if you created the commit now--and that"
msgstr ""
"常にHEADとインデックスファイルの違い示します(つまり、今、この時点でコミットを"
"作成した場合、何がコミットされる事になるのかを知る事ができます)"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1072
#, no-wrap
msgid "$ git diff\n"
msgstr "$ git diff\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1075
msgid "shows the difference between the working tree and the index file."
msgstr "これは、作業ツリーとインデックスファイルの違いを示しています。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1079
msgid ""
"Note that `git add` always adds just the current contents of a file to the "
"index; further changes to the same file will be ignored unless you run `git "
"add` on the file again."
msgstr ""
"注意: `git add` は常に、ファイルのその時点での内容をインデックスに追加するだ"
"けであることに注意してください。同じファイルに対して `git add` を再度実行しな"
"い限り、そのファイルへのその後の編集変更は無視されます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1081
msgid "When you're ready, just run"
msgstr "準備ができたら、あとは実行するだけです"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1084
#, no-wrap
msgid "$ git commit\n"
msgstr "$ git commit\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1088
msgid ""
"and Git will prompt you for a commit message and then create the new "
"commit.  Check to make sure it looks like what you expected with"
msgstr ""
"Gitはコミットメッセージの入力を求め、新しいコミットを作成します。以下のように"
"して、それがあなたが期待したもののように見えることをチェックしてください"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1091
#, no-wrap
msgid "$ git show\n"
msgstr "$ git show\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1094
msgid "As a special shortcut,"
msgstr "特別な省略形として、以下があります"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1097
#, no-wrap
msgid "$ git commit -a\n"
msgstr "$ git commit -a\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1101
msgid ""
"will update the index with any files that you've modified or removed and "
"create a commit, all in one step."
msgstr ""
"これは、変更または削除したファイルでインデックスを更新し、コミットを作成しま"
"す。それらを1ステップで実行します。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1104
msgid ""
"A number of commands are useful for keeping track of what you're about to "
"commit:"
msgstr "あなたの行ったコミットを追跡するために、いくつかのコマンドが役立ちます"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1114
#, no-wrap
msgid ""
"$ git diff --cached # difference between HEAD and the index; what\n"
"\t\t    # would be committed if you ran \"commit\" now.\n"
"$ git diff\t    # difference between the index file and your\n"
"\t\t    # working directory; changes that would not\n"
"\t\t    # be included if you ran \"commit\" now.\n"
"$ git diff HEAD\t    # difference between HEAD and working tree; what\n"
"\t\t    # would be committed if you ran \"commit -a\" now.\n"
"$ git status\t    # a brief per-file summary of the above.\n"
msgstr ""
"$ git diff --cached # HEADとインデックス間の差異。\n"
"\t\t    # 今、コミットを実行したら何がコミットされるかを知る。\n"
"$ git diff\t    # インデックスファイルと作業ディレクトリの違い。\n"
"\t\t    # 今、コミットを実行したら、\n"
"\t\t    # 何がそのコミットに「含まれない」かを知る。\n"
"$ git diff HEAD\t    # HEADと作業ツリーの違い。\n"
"\t\t    # 今、 `commit -a` を実行したら何がコミットされるかを知る。\n"
"$ git status\t    # 上記のファイルごとの簡単な要約。\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1120
msgid ""
"You can also use linkgit:git-gui[1] to create commits, view changes in the "
"index and the working tree files, and individually select diff hunks for "
"inclusion in the index (by right-clicking on the diff hunk and choosing "
"\"Stage Hunk For Commit\")."
msgstr ""
"linkgit:git-gui[1] を使用して、コミットを作成し、インデックスと作業ツリーファ"
"イルの変更を表示し、インデックスに含めるdiffハンクを個別に選択することもでき"
"ます(diffハンクを右クリックして「Stage Hunk For Commit」を選択します)。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:1122
#, no-wrap
msgid "Creating good commit messages"
msgstr "適切なコミットメッセージの作成"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1132
msgid ""
"Though not required, it's a good idea to begin the commit message with a "
"single short (less than 50 character) line summarizing the change, followed "
"by a blank line and then a more thorough description.  The text up to the "
"first blank line in a commit message is treated as the commit title, and "
"that title is used throughout Git.  For example, linkgit:git-format-patch[1] "
"turns a commit into email, and it uses the title on the Subject line and the "
"rest of the commit in the body."
msgstr ""
"必須ではありませんが、変更を要約した1行の短い行(50文字未満)でコミットメッセー"
"ジを開始し、その後に空行を続け、さらに詳細な説明を続けることをお勧めします。 "
"コミットメッセージの最初の空行までのテキストはコミットタイトルとして扱われ、"
"そのタイトルはGit全体で使用されます。たとえば、 linkgit:git-format-patch[1] "
"はコミットを電子メールに変換し、コミットタイトルを件名に使用し、コミットタイ"
"トル以降を本文として使用します。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:1135
#, no-wrap
msgid "Ignoring files"
msgstr "Ignoring files"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1144
msgid ""
"A project will often generate files that you do 'not' want to track with "
"Git.  This typically includes files generated by a build process or "
"temporary backup files made by your editor. Of course, 'not' tracking files "
"with Git is just a matter of 'not' calling `git add` on them. But it quickly "
"becomes annoying to have these untracked files lying around; e.g. they make "
"`git add .` practically useless, and they keep showing up in the output of "
"`git status`."
msgstr ""
"プロジェクトは、Gitで追跡したくないファイルを生成することがよくあります。これ"
"には通常、ビルドプロセスによって生成されたファイル、またはエディターによって"
"作成された一時バックアップファイルが含まれます。もちろん、Gitでファイルを追跡"
"しないのは、ファイルに対して「git add」を呼び出さないだけの問題です。しかし、"
"これらの追跡されていないファイルがたくさん横たわっているのはすぐにうっとおし"
"くなります。例えば それらは `git add .` を実質的に役に立たなくし、 `git "
"status` の出力に表示され続けます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1148
msgid ""
"You can tell Git to ignore certain files by creating a file called `."
"gitignore` in the top level of your working directory, with contents such as:"
msgstr ""
"あなたは、作業ディレクトリの最上位に `.gitignore` というファイルを作成し、以"
"下のような内容で特定のファイルを無視するようにGitに指示できます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1159
#, no-wrap
msgid ""
"# Lines starting with '#' are considered comments.\n"
"# Ignore any file named foo.txt.\n"
"foo.txt\n"
"# Ignore (generated) html files,\n"
"*.html\n"
"# except foo.html which is maintained by hand.\n"
"!foo.html\n"
"# Ignore objects and archives.\n"
"*.[oa]\n"
msgstr ""
"# '＃'で始まる行はコメントと見なされます。\n"
"# foo.txtという名前のファイルはすべて無視してください。\n"
"foo.txt\n"
"# (生成された) htmlファイルを無視します。\n"
"*.html\n"
"# 但し、手作業で管理されているfoo.htmlを除きます(無視しません)。\n"
"!foo.html\n"
"# オブジェクト(*.o)とアーカイブ(*.a)を無視します。\n"
"*.[oa]\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1165
msgid ""
"See linkgit:gitignore[5] for a detailed explanation of the syntax.  You can "
"also place .gitignore files in other directories in your working tree, and "
"they will apply to those directories and their subdirectories.  The `."
"gitignore` files can be added to your repository like any other files (just "
"run `git add"
msgstr ""
"構文の詳細な説明については、 linkgit:gitignore[5] を参照してください。作業ツ"
"リーの他のディレクトリに .gitignore ファイルを配置することもでき、それらはそ"
"れらのディレクトリとその下のサブディレクトリに適用されます。 `.gitignore` "
"ファイルは、他のファイルと同じようにリポジトリに追加できます"

#. type: Block title
#: ../Documentation-sedout/user-manual.txt:1165
#, no-wrap
msgid "gitignore` and `git commit`, as usual), which is convenient when the exclude"
msgstr "(通常どおり `git add .gitignore` と `git commit` を実行するだけです)。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1168
msgid ""
"patterns (such as patterns matching build output files) would also make "
"sense for other users who clone your repository."
msgstr ""
"これは、除外パターン(ビルド出力ファイルに一致するパターンなど)の場合に便利で"
"す。リポジトリのクローンを作成する他のユーザーにとっても意味があります。<"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1175
msgid ""
"If you wish the exclude patterns to affect only certain repositories "
"(instead of every repository for a given project), you may instead put them "
"in a file in your repository named `.git/info/exclude`, or in any file "
"specified by the `core.excludesFile` configuration variable.  Some Git "
"commands can also take exclude patterns directly on the command line.  See "
"linkgit:gitignore[5] for the details."
msgstr ""
"除外パターンが(特定のプロジェクトのすべてのリポジトリではなく、)特定のリポジ"
"トリにのみ影響するようにする場合は、代わりに、リポジトリ内の `.git/info/"
"exclude` という名前のファイル、または `core.excludesFile` 構成変数で指定され"
"たファイルに除外パターンを配置できます。一部のGitコマンドは、コマンドラインで"
"直接除外パターンを指定することもできます。詳細については、 linkgit:"
"gitignore[5] を参照してください。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:1177
#, no-wrap
msgid "How to merge"
msgstr "How to merge"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1181
msgid ""
"You can rejoin two diverging branches of development using linkgit:git-"
"merge[1]:"
msgstr "linkgit:git-merge[1]を使用して、2つに分岐したブランチを再結合できます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1184
#, no-wrap
msgid "$ git merge branchname\n"
msgstr "$ git merge branchname\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1188
msgid ""
"merges the development in the branch `branchname` into the current branch."
msgstr "ブランチ `branchname` を現在のブランチにマージします。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1199
msgid ""
"A merge is made by combining the changes made in `branchname` and the "
"changes made up to the latest commit in your current branch since their "
"histories forked. The work tree is overwritten by the result of the merge "
"when this combining is done cleanly, or overwritten by a half-merged results "
"when this combining results in conflicts.  Therefore, if you have "
"uncommitted changes touching the same files as the ones impacted by the "
"merge, Git will refuse to proceed. Most of the time, you will want to commit "
"your changes before you can merge, and if you don't, then linkgit:git-"
"stash[1] can take these changes away while you're doing the merge, and "
"reapply them afterwards."
msgstr ""
"マージは、 `branchname` で行われた変更と、履歴が分岐してから現在のブランチで"
"最新のコミットまでに行われた変更とを組み合わせることによって行われます。作業"
"ツリーは、この結合がクリーンに実行された場合はマージの結果によって上書きさ"
"れ、この結合が競合を引き起こした場合は半マージ(half-merged)された結果によって"
"上書きされます。したがって、マージの影響を受けたファイルと同じファイルに変更"
"を加えたコミットされていない変更がある場合、Gitは続行を拒否します。ほとんどの"
"場合、マージする前に変更をコミットする必要があります。コミットしない場合は、 "
"linkgit:git-stash[1] を使用すると、マージ中にこれらの変更を一旦取り除いて、後"
"で再適用できます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1206
msgid ""
"If the changes are independent enough, Git will automatically complete the "
"merge and commit the result (or reuse an existing commit in case of <<fast-"
"forwards,fast-forward>>, see below). On the other hand, if there are "
"conflicts--for example, if the same file is modified in two different ways "
"in the remote branch and the local branch--then you are warned; the output "
"may look something like this:"
msgstr ""
"変更が十分に独立している場合、Gitは自動的にマージを完了し、結果をコミットしま"
"す(または、<<fast-forwards,fast-forward>>の場合は、既存のコミットを再利用しま"
"す。これについては以下を参照してください)。 一方、競合がある場合--たとえば、"
"リモートブランチとローカルブランチで同じファイルが異なる方法で変更された場"
"合--は警告が表示されます。出力は以下のようになります:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1213
#, no-wrap
msgid ""
"$ git merge next\n"
" 100% (4/4) done\n"
"Auto-merged file.txt\n"
"CONFLICT (content): Merge conflict in file.txt\n"
"Automatic merge failed; fix conflicts and then commit the result.\n"
msgstr ""
"$ git merge next\n"
" 100% (4/4) done\n"
"Auto-merged file.txt\n"
"CONFLICT (content): Merge conflict in file.txt\n"
"Automatic merge failed; fix conflicts and then commit the result.\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1219
msgid ""
"Conflict markers are left in the problematic files, and after you resolve "
"the conflicts manually, you can update the index with the contents and run "
"Git commit, as you normally would when creating a new file."
msgstr ""
"問題のあるファイルには競合マーカーが残ります(訳注:つまり そのファイルは git "
"merge が編集したものです)。あなたは競合を手動で解決した後(訳注:当該ファイルを"
"手動で編集してセーブして)、新しいファイルを作成するときと同じように、インデッ"
"クスを更新してGit commitを実行できます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1223
msgid ""
"If you examine the resulting commit using gitk, you will see that it has two "
"parents, one pointing to the top of the current branch, and one to the top "
"of the other branch."
msgstr ""
"あなたがgitkを使用して結果のコミットを調べると、2つの親があり、1つは現在のブ"
"ランチの先頭を指し、もう1つはもう一方のブランチの先頭を指していることがわかる"
"はずです。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:1225
#, no-wrap
msgid "Resolving a merge"
msgstr "Resolving a merge"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1230
msgid ""
"When a merge isn't resolved automatically, Git leaves the index and the "
"working tree in a special state that gives you all the information you need "
"to help resolve the merge."
msgstr ""
"マージが自動的に解決されない場合、Gitはインデックスと作業ツリーを特別な状態の"
"ままにして、マージの解決に必要なすべての情報を提供します。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1234
msgid ""
"Files with conflicts are marked specially in the index, so until you resolve "
"the problem and update the index, linkgit:git-commit[1] will fail:"
msgstr ""
"特に、競合のあるファイルはインデックスでマークされるため、問題を解決してイン"
"デックスを更新するまで、 linkgit:git-commit[1] は失敗します:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1238
#, no-wrap
msgid ""
"$ git commit\n"
"file.txt: needs merge\n"
msgstr ""
"$ git commit\n"
"file.txt: needs merge\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1242
msgid ""
"Also, linkgit:git-status[1] will list those files as \"unmerged\", and the "
"files with conflicts will have conflict markers added, like this:"
msgstr ""
"また、 linkgit:git-status[1] は、これらのファイルを \"unmerged\" としてリスト"
"し、競合のあるファイルの内容には、以下のように競合マーカー(conflict marker)が"
"追加されます(訳注:ファイルの内容が以下のように変更されます):"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1249
#, no-wrap
msgid ""
"<<<<<<< HEAD:file.txt\n"
"Hello world\n"
"=======\n"
"Goodbye\n"
">>>>>>> 77976da35a11db4580b80ae27e8d65caf5208086:file.txt\n"
msgstr ""
"<<<<<<< HEAD:file.txt\n"
"Hello world\n"
"=======\n"
"Goodbye\n"
">>>>>>> 77976da35a11db4580b80ae27e8d65caf5208086:file.txt\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1252
msgid "All you need to do is edit the files to resolve the conflicts, and then"
msgstr ""
"あなたしなければならないことは、競合を解決するためにファイルを編集することで"
"す。そしてその後、以下のようにします。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1256
#, no-wrap
msgid ""
"$ git add file.txt\n"
"$ git commit\n"
msgstr ""
"$ git add file.txt\n"
"$ git commit\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1262
msgid ""
"Note that the commit message will already be filled in for you with some "
"information about the merge.  Normally you can just use this default message "
"unchanged, but you may add additional commentary of your own if desired."
msgstr ""
"注意: コミットメッセージには、マージに関するいくつかの情報がすでに入力されて"
"いることに注意してください。 通常、このデフォルトのメッセージは変更せずに使用"
"できますが、必要に応じて独自のコメントを追加することもできます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1265
msgid ""
"The above is all you need to know to resolve a simple merge.  But Git also "
"provides more information to help resolve conflicts:"
msgstr ""
"単純なマージを解決するために知っておく必要があるのは、上記ですべてです。 ただ"
"し、Gitは、競合の解決に役立つ詳細情報も提供します:"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:1267
#, no-wrap
msgid "Getting conflict-resolution help during a merge"
msgstr "マージ作業中に競合解決の助けを得る"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1272
msgid ""
"All of the changes that Git was able to merge automatically are already "
"added to the index file, so linkgit:git-diff[1] shows only the conflicts.  "
"It uses an unusual syntax:"
msgstr ""
"Gitが自動的にマージできたすべての変更は、すでにインデックスファイルに追加され"
"ているため、 linkgit:git-diff[1] は競合のみを表示します。それは普通でない構文"
"を使用します:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1285
#, no-wrap
msgid ""
"$ git diff\n"
"diff --cc file.txt\n"
"index 802992c,2b60207..0000000\n"
"--- a/file.txt\n"
"+++ b/file.txt\n"
"@@@ -1,1 -1,1 +1,5 @@@\n"
"++<<<<<<< HEAD:file.txt\n"
" +Hello world\n"
"++=======\n"
"+ Goodbye\n"
"++>>>>>>> 77976da35a11db4580b80ae27e8d65caf5208086:file.txt\n"
msgstr ""
"$ git diff\n"
"diff --cc file.txt\n"
"index 802992c,2b60207..0000000\n"
"--- a/file.txt\n"
"+++ b/file.txt\n"
"@@@ -1,1 -1,1 +1,5 @@@\n"
"++<<<<<<< HEAD:file.txt\n"
" +Hello world\n"
"++=======\n"
"+ Goodbye\n"
"++>>>>>>> 77976da35a11db4580b80ae27e8d65caf5208086:file.txt\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1291
msgid ""
"Recall that the commit which will be committed after we resolve this "
"conflict will have two parents instead of the usual one: one parent will be "
"HEAD, the tip of the current branch; the other will be the tip of the other "
"branch, which is stored temporarily in MERGE_HEAD."
msgstr ""
"この競合を解決した後にコミットされるコミットには、通常の親ではなく2つの親があ"
"ることを思い出してください。1つの親は現在のブランチの先端であるHEADになりま"
"す。もう一方は、MERGE_HEADに一時的に保存されるもう一方のブランチの先端になり"
"ます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1294
msgid ""
"During the merge, the index holds three versions of each file.  Each of "
"these three \"file stages\" represents a different version of the file:"
msgstr ""
"マージ中、インデックスは各ファイルについて3つのバージョンを保持します。これら"
"の3つの「ファイルステージ」(file stages)はそれぞれ、ファイルの異なるバージョ"
"ンを表します。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1299
#, no-wrap
msgid ""
"$ git show :1:file.txt\t# the file in a common ancestor of both branches\n"
"$ git show :2:file.txt\t# the version from HEAD.\n"
"$ git show :3:file.txt\t# the version from MERGE_HEAD.\n"
msgstr ""
"$ git show :1:file.txt\t# 両方のブランチの共通の祖先にあるファイル\n"
"$ git show :2:file.txt\t# the version from HEAD.\n"
"$ git show :3:file.txt\t# the version from MERGE_HEAD.\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1306
msgid ""
"When you ask linkgit:git-diff[1] to show the conflicts, it runs a three-way "
"diff between the conflicted merge results in the work tree with stages 2 and "
"3 to show only hunks whose contents come from both sides, mixed (in other "
"words, when a hunk's merge results come only from stage 2, that part is not "
"conflicting and is not shown.  Same for stage 3)."
msgstr ""
"linkgit:git-diff[1] に競合を表示するように要求すると、競合するマージ結果間で3"
"方向のdiffが実行され、ステージ2と3の作業ツリーで、内容がステージ2と3の両方が"
"あるハンクのみが混合されて表示されます(つまり、ハンクのマージ結果がステージ2"
"からのみ取得される場合、その部分は競合せず、表示されません。ステージ3について"
"も同じで、ハンクのマージ結果がステージ3からのみ取得される場合、その部分は競合"
"せず、表示されません)。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1314
msgid ""
"The diff above shows the differences between the working-tree version of "
"file.txt and the stage 2 and stage 3 versions.  So instead of preceding each "
"line by a single `+` or `-`, it now uses two columns: the first column is "
"used for differences between the first parent and the working directory "
"copy, and the second for differences between the second parent and the "
"working directory copy.  (See the \"COMBINED DIFF FORMAT\" section of "
"linkgit:git-diff-files[1] for a details of the format.)"
msgstr ""
"上記の差分は、file.txt の作業ツリーバージョンと、ステージ2バージョンと、ス"
"テージ3バージョンとの間の違いを示しています。したがって、各行の前に単一の "
"`+` または `-` を付ける代わりに、2つの桁を使用するようになりました。最初の桁"
"は最初の親と作業ディレクトリのコピーの違いに使用され、2番目の列は2番目の親と "
"作業ディレクトリのコピーの違いに使用されます。（形式の詳細については、 "
"linkgit: git-diff-files[1] の「COMBINED DIFF FORMAT」セクションを参照してくだ"
"さい。)"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1317
msgid ""
"After resolving the conflict in the obvious way (but before updating the "
"index), the diff will look like:"
msgstr ""
"あなたが編集するなどして、ちゃんと競合を解決した後(ただし、インデックスを更新"
"する前)でdiffを実行してみると以下のようになります:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1328
#, no-wrap
msgid ""
"$ git diff\n"
"diff --cc file.txt\n"
"index 802992c,2b60207..0000000\n"
"--- a/file.txt\n"
"+++ b/file.txt\n"
"@@@ -1,1 -1,1 +1,1 @@@\n"
"- Hello world\n"
" -Goodbye\n"
"++Goodbye world\n"
msgstr ""
"$ git diff\n"
"diff --cc file.txt\n"
"index 802992c,2b60207..0000000\n"
"--- a/file.txt\n"
"+++ b/file.txt\n"
"@@@ -1,1 -1,1 +1,1 @@@\n"
"- Hello world\n"
" -Goodbye\n"
"++Goodbye world\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1333
msgid ""
"This shows that our resolved version deleted \"Hello world\" from the first "
"parent, deleted \"Goodbye\" from the second parent, and added \"Goodbye "
"world\", which was previously absent from both."
msgstr ""
"これは、解決されたバージョンが最初の親から「Hello world」を削除し、2番目の親"
"から「Goodbye」を削除し、以前は両方に存在しなかった「Goodbye world」を追加し"
"たことを示しています。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1336
msgid ""
"Some special diff options allow diffing the working directory against any of "
"these stages:"
msgstr ""
"いくつかの特別なdiffオプションを使用すると、これらのステージのいずれかに対し"
"て作業ディレクトリとdiffを取ることができます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1344
#, no-wrap
msgid ""
"$ git diff -1 file.txt\t\t# diff against stage 1\n"
"$ git diff --base file.txt\t# same as the above\n"
"$ git diff -2 file.txt\t\t# diff against stage 2\n"
"$ git diff --ours file.txt\t# same as the above\n"
"$ git diff -3 file.txt\t\t# diff against stage 3\n"
"$ git diff --theirs file.txt\t# same as the above.\n"
msgstr ""
"$ git diff -1 file.txt\t\t# diff against stage 1\n"
"$ git diff --base file.txt\t# same as the above\n"
"$ git diff -2 file.txt\t\t# diff against stage 2\n"
"$ git diff --ours file.txt\t# same as the above\n"
"$ git diff -3 file.txt\t\t# diff against stage 3\n"
"$ git diff --theirs file.txt\t# same as the above.\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1354
msgid ""
"When using the 'ort' merge strategy (the default), before updating the "
"working tree with the result of the merge, Git writes a special ref named "
"AUTO_MERGE reflecting the state of the tree it is about to write. Conflicted "
"paths with textual conflicts that could not be automatically merged are "
"written to this tree with conflict markers, just as in the working tree. "
"AUTO_MERGE can thus be used with linkgit:git-diff[1] to show the changes "
"you've made so far to resolve conflicts. Using the same example as above, "
"after resolving the conflict we get:"
msgstr "(デフォルトの)「ort」マージ戦略を使用する場合、 Git は、マージの結果で作業ツリー(working tree)を更新する前に、 書き込もうとしているツリーの状態を反映する AUTO_MERGE という名前の特別な ref を書き込みます。 自動的にマージができなかったテキストの競合を伴う競合パスは、 作業ツリーと同様に、 競合マーカーとともにこのツリーに書き込まれます。 したがって、AUTO_MERGE を linkgit:git-diff[1] とともに使用すると、 競合を解決するためにこれまでに行った変更を表示できます。 上記と同じ例を使用して競合を解決すると、以下のようになります:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1368
#, no-wrap
msgid ""
"$ git diff AUTO_MERGE\n"
"diff --git a/file.txt b/file.txt\n"
"index cd10406..8bf5ae7 100644\n"
"--- a/file.txt\n"
"+++ b/file.txt\n"
"@@ -1,5 +1 @@\n"
"-<<<<<<< HEAD:file.txt\n"
"-Hello world\n"
"-=======\n"
"-Goodbye\n"
"->>>>>>> 77976da35a11db4580b80ae27e8d65caf5208086:file.txt\n"
"+Goodbye world\n"
msgstr ""
"$ git diff AUTO_MERGE\n"
"diff --git a/file.txt b/file.txt\n"
"index cd10406..8bf5ae7 100644\n"
"--- a/file.txt\n"
"+++ b/file.txt\n"
"@@ -1,5 +1 @@\n"
"-<<<<<<< HEAD:file.txt\n"
"-Hello world\n"
"-=======\n"
"-Goodbye\n"
"->>>>>>> 77976da35a11db4580b80ae27e8d65caf5208086:file.txt\n"
"+Goodbye world\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1372
msgid ""
"Notice that the diff shows we deleted the conflict markers and both versions "
"of the content line, and wrote \"Goodbye world\" instead."
msgstr "diffを見ると、 競合マーカー(conflict markers)と両方のバージョンの内容行(content line)が削除され、 代わりに「Goodbye world」と書き込まれたことがわかります。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1375
msgid ""
"The linkgit:git-log[1] and linkgit:gitk[1] commands also provide special "
"help for merges:"
msgstr ""
"linkgit:git-log[1] や linkgit:gitk[1] コマンドも、マージのためにに特別な援助"
"を提供します:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1379
#, no-wrap
msgid ""
"$ git log --merge\n"
"$ gitk --merge\n"
msgstr ""
"$ git log --merge\n"
"$ gitk --merge\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1383
msgid ""
"These will display all commits which exist only on HEAD or on MERGE_HEAD, "
"and which touch an unmerged file."
msgstr ""
"これらは、HEADまたはMERGE_HEADにのみ存在し、マージされていないファイルにアク"
"セスするすべてのコミットを表示します。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1386
msgid ""
"You may also use linkgit:git-mergetool[1], which lets you merge the unmerged "
"files using external tools such as Emacs or kdiff3."
msgstr ""
"あなたは linkgit:git-mergetool[1] を使用することもできます。これにより、Emacs"
"やkdiff3などの外部ツールを使用してマージされていないファイルをマージできま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1388
msgid "Each time you resolve the conflicts in a file and update the index:"
msgstr ""
"ファイル内の競合を解決するたびに、以下のようにしてインデックスを更新します:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1391
#, no-wrap
msgid "$ git add file.txt\n"
msgstr "$ git add file.txt\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1395
msgid ""
"the different stages of that file will be \"collapsed\", after which `git "
"diff` will (by default) no longer show diffs for that file."
msgstr ""
"そうすると、そのファイルのさまざまなステージが「折りたたまれ」(collapsed)、そ"
"の後、 `git diff` は(デフォルトでは)そのファイルのdiffを表示しなくなります。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:1397
#, no-wrap
msgid "Undoing a merge"
msgstr "マージを元に戻す"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1401
msgid ""
"If you get stuck and decide to just give up and throw the whole mess away, "
"you can always return to the pre-merge state with"
msgstr ""
"行き詰まり、あきらめて、混乱全体を捨てることにした場合は、いつでもマージ前の"
"状態に戻ることができます"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1404
#, no-wrap
msgid "$ git merge --abort\n"
msgstr "$ git merge --abort\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1407
msgid "Or, if you've already committed the merge that you want to throw away,"
msgstr ""
"または、あなたが破棄したいマージをすでにコミットしちゃってる場合は以下です"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1410
#, no-wrap
msgid "$ git reset --hard ORIG_HEAD\n"
msgstr "$ git reset --hard ORIG_HEAD\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1416
msgid ""
"However, this last command can be dangerous in some cases--never throw away "
"a commit you have already committed if that commit may itself have been "
"merged into another branch, as doing so may confuse further merges."
msgstr ""
"ただし、この最後のコマンドは危険な場合があります。コミット自体が別のブランチ"
"にマージされている可能性がある場合は、既にコミット済のコミットを破棄しないで"
"ください。これを行うと、さらにマージが混乱する可能性があります。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:1418
#, no-wrap
msgid "Fast-forward merges"
msgstr "Fast-forward merges"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1424
msgid ""
"There is one special case not mentioned above, which is treated "
"differently.  Normally, a merge results in a merge commit, with two parents, "
"one pointing at each of the two lines of development that were merged."
msgstr ""
"上記に記載されていない特殊なケースが1つあり、それは異なる方法で処理されます。"
"通常、マージは、マージされた2つの開発ラインのそれぞれを指す2つの親を持つマー"
"ジコミットをもたらします。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1430
msgid ""
"However, if the current branch is an ancestor of the other--so every commit "
"present in the current branch is already contained in the other branch--then "
"Git just performs a \"fast-forward\"; the head of the current branch is "
"moved forward to point at the head of the merged-in branch, without any new "
"commits being created."
msgstr ""
"けれども、現在のブランチが他のブランチの祖先である場合(したがって、現在のブラ"
"ンチに存在するすべてのコミットは、すでに他のブランチに含まれています)、Gitは"
"「fast-forward」(早送り)を実行するだけです。現在のブランチのヘッドは、新しい"
"コミットが作成されることなく、マージされたブランチのヘッドを指すように前方に"
"移動されます。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:1432
#, no-wrap
msgid "Fixing mistakes"
msgstr "作業ミスを修正する"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1437
msgid ""
"If you've messed up the working tree, but haven't yet committed your "
"mistake, you can return the entire working tree to the last committed state "
"with"
msgstr ""
"作業ツリーを台無しにしたが、まだ間違いをコミットしていない場合は、作業ツリー"
"全体を最後にコミットした状態に戻すことができます"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1440
#, no-wrap
msgid "$ git restore --staged --worktree :/\n"
msgstr "$ git restore --staged --worktree :/\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1444
msgid ""
"If you make a commit that you later wish you hadn't, there are two "
"fundamentally different ways to fix the problem:"
msgstr ""
"コミットしたのを後悔した時、問題を解決するためには、根本的に異なる2つの方法が"
"あります:"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1446
msgid "You can create a new commit that undoes whatever was done"
msgstr ""
"あなたは、古いコミットによって行われたことをすべて元に戻す新しいコミットを作"
"成できます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1448
msgid ""
"by the old commit.  This is the correct thing if your mistake has already "
"been made public."
msgstr "あなたの間違いがすでに公表されているなら、これは正しいことです。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1450
msgid "You can go back and modify the old commit.  You should"
msgstr "あなたは、履歴を遡って古いコミットを変更できます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1454
msgid ""
"never do this if you have already made the history public; Git does not "
"normally expect the \"history\" of a project to change, and cannot correctly "
"perform repeated merges from a branch that has had its history changed."
msgstr ""
"すでに履歴を公開している場合は、これは絶対にやってはいけません。Gitは通常、プ"
"ロジェクトの「履歴」が変更されることを期待しておらず、履歴が変更されたブラン"
"チから繰り返しマージを正しく実行することはできません。"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:1456
#, no-wrap
msgid "Fixing a mistake with a new commit"
msgstr "新しいコミットによって作業ミスを修正する"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1461
msgid ""
"Creating a new commit that reverts an earlier change is very easy; just pass "
"the linkgit:git-revert[1] command a reference to the bad commit; for "
"example, to revert the most recent commit:"
msgstr ""
"以前の変更を元に戻す新しいコミットを作成するのは非常に簡単です。 linkgit:git-"
"revert[1] コマンドに不正なコミットへの参照を渡すだけです。たとえば、最新のコ"
"ミットを元に戻すには、以下のようにします:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1464
#, no-wrap
msgid "$ git revert HEAD\n"
msgstr "$ git revert HEAD\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1468
msgid ""
"This will create a new commit which undoes the change in HEAD.  You will be "
"given a chance to edit the commit message for the new commit."
msgstr ""
"これにより、HEADの変更を元に戻す新しいコミットが作成されます。そしてあなたに"
"は新しいコミットのコミットメッセージを編集する機会が与えられます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1470
msgid "You can also revert an earlier change, for example, the next-to-last:"
msgstr ""
"以前の変更を元に戻すこともできます。たとえば、最後から2番目を指定します:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1473
#, no-wrap
msgid "$ git revert HEAD^\n"
msgstr "$ git revert HEAD^\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1480
msgid ""
"In this case Git will attempt to undo the old change while leaving intact "
"any changes made since then.  If more recent changes overlap with the "
"changes to be reverted, then you will be asked to fix conflicts manually, "
"just as in the case of <<resolving-a-merge, resolving a merge>>."
msgstr ""
"この場合、Gitは古い変更を元に戻そうとしますが、それ以降に行われた変更はそのま"
"ま残します。最近の変更が元に戻す変更と重複する場合は、<<resolving-a-merge, "
"resolving a merge>>の場合と同様に、競合を手動で修正するように求められます。"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:1482
#, no-wrap
msgid "Fixing a mistake by rewriting history"
msgstr "履歴を巻き戻す事によって作業ミスを修正する"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1487
msgid ""
"If the problematic commit is the most recent commit, and you have not yet "
"made that commit public, then you may just <<undoing-a-merge,destroy it "
"using `git reset`>>."
msgstr ""
"問題のあるコミットが最新のコミットであり、そのコミットをまだ公開していない場"
"合は、<<undoing-a-merge,`git reset` を使用して破棄>>することができます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1492
msgid ""
"Alternatively, you can edit the working directory and update the index to "
"fix your mistake, just as if you were going to <<how-to-make-a-commit,create "
"a new commit>>, then run"
msgstr ""
"あるいは、<<how-to-make-a-commit,create a new commit>>を実行する場合と同じよ"
"うに、作業ディレクトリを編集してインデックスを更新し、間違いを修正することも"
"できます。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1495
#: ../Documentation-sedout/user-manual.txt:2565
#, no-wrap
msgid "$ git commit --amend\n"
msgstr "$ git commit --amend\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1499
msgid ""
"which will replace the old commit by a new commit incorporating your "
"changes, giving you a chance to edit the old commit message first."
msgstr ""
"これにより、古いコミットが変更を組み込んだ新しいコミットに置き換えられ、最初"
"に古いコミットメッセージの方を編集する機会が与えられます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1503
msgid ""
"Again, you should never do this to a commit that may already have been "
"merged into another branch; use linkgit:git-revert[1] instead in that case."
msgstr ""
"繰り返しになりますが、すでに別のブランチにマージされている可能性のあるコミッ"
"トに対してこれを実行しないでください。 その場合は、代わりに linkgit:git-"
"revert[1] を使用してください。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1507
msgid ""
"It is also possible to replace commits further back in the history, but this "
"is an advanced topic to be left for <<cleaning-up-history,another chapter>>."
msgstr ""
"履歴のさらに古いコミットを置き換えることも可能ですが、これは<<cleaning-up-"
"history,別の章>>で扱う高度なトピックです。"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:1509
#, no-wrap
msgid "Checking out an old version of a file"
msgstr "Checking out an old version of a file"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1514
msgid ""
"In the process of undoing a previous bad change, you may find it useful to "
"check out an older version of a particular file using linkgit:git-"
"restore[1]. The command"
msgstr ""
"以前の悪い変更を元に戻すプロセスでは、 linkgit:git-restore[1] を使用して特定"
"のファイルの古いバージョンをチェックアウトすると便利な場合があります。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1517
#, no-wrap
msgid "$ git restore --source=HEAD^ path/to/file\n"
msgstr "$ git restore --source=HEAD^ path/to/file\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1521
msgid ""
"replaces path/to/file by the contents it had in the commit HEAD^, and also "
"updates the index to match.  It does not change branches."
msgstr ""
"これは path/to/fileを、コミットHEAD^にある内容に置き換え、それに一致するよう"
"にインデックスを更新します。ブランチは変更されません。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1525
msgid ""
"If you just want to look at an old version of the file, without modifying "
"the working directory, you can do that with linkgit:git-show[1]:"
msgstr ""
"作業ディレクトリを変更せずに古いバージョンのファイルを確認したい場合は、 "
"linkgit:git-show[1] を使用して確認できます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1528
#, no-wrap
msgid "$ git show HEAD^:path/to/file\n"
msgstr "$ git show HEAD^:path/to/file\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1531
msgid "which will display the given version of the file."
msgstr "これにより、指定のバージョンのファイルが表示されます。"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:1533
#, no-wrap
msgid "Temporarily setting aside work in progress"
msgstr "作業中の作業を一時的に保存しておく"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1541
msgid ""
"While you are in the middle of working on something complicated, you find an "
"unrelated but obvious and trivial bug.  You would like to fix it before "
"continuing.  You can use linkgit:git-stash[1] to save the current state of "
"your work, and after fixing the bug (or, optionally after doing so on a "
"different branch and then coming back), unstash the work-in-progress changes."
msgstr ""
"何か複雑なことに取り組んでいる最中に、無関係であるが明白で些細なバグを見つけ"
"たとします。取り組みを続行する前にちょいと修正したいと思います。 linkgit:git-"
"stash[1] を使用して作業の現在の状態を保存(stash;隠す)し、バグを修正した後(ま"
"たは、オプションで別のブランチで修正してから戻ってきた後)、保存(stash)してお"
"いた進行中の変更を取り戻し(unstash)ます。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1544
#, no-wrap
msgid "$ git stash push -m \"work in progress for foo feature\"\n"
msgstr "$ git stash push -m \"work in progress for foo feature\"\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1549
msgid ""
"This command will save your changes away to the `stash`, and reset your "
"working tree and the index to match the tip of your current branch.  Then "
"you can make your fix as usual."
msgstr ""
"このコマンドは、変更を `stash` に保存し、現在のブランチの先端に一致するように"
"作業ツリーとインデックスをリセットします。その後、通常どおりに(ちょいと)修正"
"を行うことができます。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1553
#, no-wrap
msgid ""
"... edit and test ...\n"
"$ git commit -a -m \"blorpl: typofix\"\n"
msgstr ""
"... edit and test ...\n"
"$ git commit -a -m \"blorpl: typofix\"\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1557
msgid ""
"After that, you can go back to what you were working on with `git stash pop`:"
msgstr "その後、 `git stash pop` で作業していたのに戻ることができます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1560
#, no-wrap
msgid "$ git stash pop\n"
msgstr "$ git stash pop\n"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:1564
#, no-wrap
msgid "Ensuring good performance"
msgstr "良好なパフォーマンスの確保"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1572
msgid ""
"On large repositories, Git depends on compression to keep the history "
"information from taking up too much space on disk or in memory.  Some Git "
"commands may automatically run linkgit:git-gc[1], so you don't have to worry "
"about running it manually.  However, compressing a large repository may take "
"a while, so you may want to call `gc` explicitly to avoid automatic "
"compression kicking in when it is not convenient."
msgstr ""
"大規模なリポジトリでは、Gitは圧縮に頼って、履歴情報がディスクまたはメモリ内の"
"スペースを占有しすぎないようにします。 一部のGitコマンドは linkgit:git-gc[1] "
"を自動的に実行する可能性があるため、手動で実行することを心配する必要はありま"
"せん。 ただし、大規模なリポジトリの圧縮には時間がかかる場合があるため、都合の"
"悪いときに自動圧縮が開始されないように、明示的に `gc` を呼び出すことをお勧め"
"します。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:1575
#, no-wrap
msgid "Ensuring reliability"
msgstr "信頼性の確保"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:1578
#, no-wrap
msgid "Checking the repository for corruption"
msgstr "リポジトリの破損をチェックする"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1583
msgid ""
"The linkgit:git-fsck[1] command runs a number of self-consistency checks on "
"the repository, and reports on any problems.  This may take some time."
msgstr ""
"linkgit:git-fsck[1] コマンドは、リポジトリに対していくつかの自己整合性チェッ"
"クを実行し、問題があれば報告します。これには時間がかかる場合があります。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1595
#, no-wrap
msgid ""
"$ git fsck\n"
"dangling commit 7281251ddd2a61e38657c827739c57015671a6b3\n"
"dangling commit 2706a059f258c6b245f298dc4ff2ccd30ec21a63\n"
"dangling commit 13472b7c4b80851a1bc551779171dcb03655e9b5\n"
"dangling blob 218761f9d90712d37a9c5e36f406f92202db07eb\n"
"dangling commit bf093535a34a4d35731aa2bd90fe6b176302f14f\n"
"dangling commit 8e4bec7f2ddaa268bef999853c25755452100f8e\n"
"dangling tree d50bb86186bf27b681d25af89d3b5b68382e4085\n"
"dangling tree b24c2473f1fd3d91352a624795be026d64c8841f\n"
"...\n"
msgstr ""
"$ git fsck\n"
"dangling commit 7281251ddd2a61e38657c827739c57015671a6b3\n"
"dangling commit 2706a059f258c6b245f298dc4ff2ccd30ec21a63\n"
"dangling commit 13472b7c4b80851a1bc551779171dcb03655e9b5\n"
"dangling blob 218761f9d90712d37a9c5e36f406f92202db07eb\n"
"dangling commit bf093535a34a4d35731aa2bd90fe6b176302f14f\n"
"dangling commit 8e4bec7f2ddaa268bef999853c25755452100f8e\n"
"dangling tree d50bb86186bf27b681d25af89d3b5b68382e4085\n"
"dangling tree b24c2473f1fd3d91352a624795be026d64c8841f\n"
"...\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1602
msgid ""
"You will see informational messages on dangling objects. They are objects "
"that still exist in the repository but are no longer referenced by any of "
"your branches, and can (and will) be removed after a while with `gc`.  You "
"can run `git fsck --no-dangling` to suppress these messages, and still view "
"real errors."
msgstr ""
"宙ぶらりんオブジェクト(dangling objects)に関するinfoメッセージが表示されま"
"す。これらはリポジトリにまだ存在しているが、どのブランチからも参照されていな"
"いオブジェクトであり、しばらくすると `gc` を使用して削除できます(削除される予"
"定です)。 `git fsck --no-dangling` を実行してこれらのinfoメッセージを抑制し、"
"errorメッセージだけを表示することができます。"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:1604
#, no-wrap
msgid "Recovering lost changes"
msgstr "失われた変更の回復"

#. type: Title =====
#: ../Documentation-sedout/user-manual.txt:1607
#, no-wrap
msgid "Reflogs"
msgstr "Reflogs"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1612
msgid ""
"Say you modify a branch with <<fixing-mistakes,`git reset --hard`>>, and "
"then realize that the branch was the only reference you had to that point in "
"history."
msgstr ""
"<<fixing-mistakes,`git reset --hard`>>を使用してブランチを変更し、そのブラン"
"チが履歴内のその時点への唯一の参照であることに気付いたとします。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1616
msgid ""
"Fortunately, Git also keeps a log, called a \"reflog\", of all the previous "
"values of each branch.  So in this case you can still find the old history "
"using, for example,"
msgstr ""
"幸い、Gitには、各ブランチの以前の値のすべてを保持する「reflog」と呼ばれるログ"
"があります。したがって、この場合でも、たとえば、以下を使用して古い履歴を見つ"
"けることができます。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1619
#, no-wrap
msgid "$ git log master@{1}\n"
msgstr "$ git log master@{1}\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1624
msgid ""
"This lists the commits reachable from the previous version of the `master` "
"branch head.  This syntax can be used with any Git command that accepts a "
"commit, not just with `git log`.  Some other examples:"
msgstr ""
"これは、以前のバージョンの `master` ブランチヘッドから到達可能なコミットを一"
"覧表示します。 この構文は、 `git log` だけでなく、コミットを受け入れる任意の"
"Gitコマンドで使用できます。 他のいくつかの例:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1631
#, no-wrap
msgid ""
"$ git show master@{2}\t\t# See where the branch pointed 2,\n"
"$ git show master@{3}\t\t# 3, ... changes ago.\n"
"$ gitk master@{yesterday}\t# See where it pointed yesterday,\n"
"$ gitk master@{\"1 week ago\"}\t# ... or last week\n"
"$ git log --walk-reflogs master\t# show reflog entries for master\n"
msgstr ""
"$ git show master@{2}\t\t# See where the branch pointed 2,\n"
"$ git show master@{3}\t\t# 3, ... changes ago.\n"
"$ gitk master@{yesterday}\t# See where it pointed yesterday,\n"
"$ gitk master@{\"1 week ago\"}\t# ... or last week\n"
"$ git log --walk-reflogs master\t# show reflog entries for master\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1634
msgid "A separate reflog is kept for the HEAD, so"
msgstr "HEAD用には個別のreflogが保持されるため、以下のようにできます"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1637
#, no-wrap
msgid "$ git show HEAD@{\"1 week ago\"}\n"
msgstr "$ git show HEAD@{\"1 week ago\"}\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1642
msgid ""
"will show what HEAD pointed to one week ago, not what the current branch "
"pointed to one week ago.  This allows you to see the history of what you've "
"checked out."
msgstr ""
"現在のブランチが1週間前に指し示したものではなく、HEADが1週間前に指し示したも"
"のを表示します。これにより、チェックアウトした内容の履歴を確認できます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1647
msgid ""
"The reflogs are kept by default for 30 days, after which they may be "
"pruned.  See linkgit:git-reflog[1] and linkgit:git-gc[1] to learn how to "
"control this pruning, and see the \"SPECIFYING REVISIONS\" section of "
"linkgit:gitrevisions[7] for details."
msgstr ""
"reflogはデフォルトで30日間保持され、その後、たぶん刈り取られます(prune)。この"
"刈り取りを制御する方法については、 linkgit:git-reflog[1] や linkgit:git-gc "
"[1] を参照してください。詳細については、 linkgit:gitrevisions[7]の"
"「SPECIFYING REVISIONS」セクションを参照してください。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1652
msgid ""
"Note that the reflog history is very different from normal Git history.  "
"While normal history is shared by every repository that works on the same "
"project, the reflog history is not shared: it tells you only about how the "
"branches in your local repository have changed over time."
msgstr ""
"注意: reflogの履歴は、通常のGitの履歴とは大きく異なることに注意してください。"
"通常の履歴は同じプロジェクトで動作するすべてのリポジトリで共有されますが、"
"reflogの履歴は共有されません。reflogは、ローカルリポジトリのブランチが時間の"
"経過とともにどのように変化したかについてのみ通知します。"

#. type: Title =====
#: ../Documentation-sedout/user-manual.txt:1654
#, no-wrap
msgid "Examining dangling objects"
msgstr "Examining dangling objects(宙ぶらりんオブジェクトを調べる)"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1662
msgid ""
"In some situations the reflog may not be able to save you.  For example, "
"suppose you delete a branch, then realize you need the history it "
"contained.  The reflog is also deleted; however, if you have not yet pruned "
"the repository, then you may still be able to find the lost commits in the "
"dangling objects that `git fsck` reports.  See <<dangling-objects>> for the "
"details."
msgstr ""
"状況によっては、reflogで保存できない場合があります。たとえば、ブランチを削除"
"して、そこに含まれる履歴が必要であることに気付いたとします。reflogも削除され"
"ます。ただし、リポジトリをまだ刈り取りしていない場合でも、 `git fsck` が報告"
"する宙ぶらりんオブジェクトで失われたコミットを見つけることができる場合があり"
"ます。 詳細については、 <<dangling-objects>>を参照してください。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1669
#, no-wrap
msgid ""
"$ git fsck\n"
"dangling commit 7281251ddd2a61e38657c827739c57015671a6b3\n"
"dangling commit 2706a059f258c6b245f298dc4ff2ccd30ec21a63\n"
"dangling commit 13472b7c4b80851a1bc551779171dcb03655e9b5\n"
"...\n"
msgstr ""
"$ git fsck\n"
"dangling commit 7281251ddd2a61e38657c827739c57015671a6b3\n"
"dangling commit 2706a059f258c6b245f298dc4ff2ccd30ec21a63\n"
"dangling commit 13472b7c4b80851a1bc551779171dcb03655e9b5\n"
"...\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1673
msgid "You can examine one of those dangling commits with, for example,"
msgstr ""
"あなたは、たとえば、以下のようにして、これらの宙ぶらりんコミットの1つを調べる"
"ことができます。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1676
#, no-wrap
msgid "$ gitk 7281251ddd --not --all\n"
msgstr "$ gitk 7281251ddd --not --all\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1685
msgid ""
"which does what it sounds like: it says that you want to see the commit "
"history that is described by the dangling commit(s), but not the history "
"that is described by all your existing branches and tags.  Thus you get "
"exactly the history reachable from that commit that is lost.  (And notice "
"that it might not be just one commit: we only report the \"tip of the line\" "
"as being dangling, but there might be a whole deep and complex commit "
"history that was dropped.)"
msgstr ""
"これを言葉で説明すると、つまり、宙ぶらりんコミットによって記述されたコミット"
"履歴を表示したいが、既存のすべてのブランチとタグによって記述された履歴は表示"
"したくないということです。したがって、失われたコミットから到達可能な履歴を正"
"確に取得できます。(そして、それが1つのコミットだけではない可能性があることに"
"注意してください。これは「開発ラインの先端」(tip of the line)が宙ぶらりんだと"
"報告するだけです。がしかし、全体に渡る深く複雑なコミット履歴が削除された可能"
"性があります。)"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1688
msgid ""
"If you decide you want the history back, you can always create a new "
"reference pointing to it, for example, a new branch:"
msgstr ""
"履歴を元に戻したい場合は、いつでもそれを指す新しい参照を作成できます。たとえ"
"ば、新しいブランチを作成できます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1691
#, no-wrap
msgid "$ git branch recovered-branch 7281251ddd\n"
msgstr "$ git branch recovered-branch 7281251ddd\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1695
msgid ""
"Other types of dangling objects (blobs and trees) are also possible, and "
"dangling objects can arise in other situations."
msgstr ""
"他のタイプの宙ぶらりんオブジェクト(ブロブとツリー)でもこれは可能であり、宙ぶ"
"らりんオブジェクトは他の状況でも発生する可能性があります。"

#. type: Title ==
#: ../Documentation-sedout/user-manual.txt:1698
#, no-wrap
msgid "Sharing development with others"
msgstr "Sharing development with others"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:1701
#, no-wrap
msgid "Getting updates with git pull"
msgstr "Getting updates with git pull"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1706
msgid ""
"After you clone a repository and commit a few changes of your own, you may "
"wish to check the original repository for updates and merge them into your "
"own work."
msgstr ""
"リポジトリのクローンを作成し、あなた独自の変更をいくつかコミットした後、元の"
"リポジトリで更新を確認し、それらをあなた独自の作業にマージすることをお勧めし"
"ます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1711
msgid ""
"We have already seen <<Updating-a-repository-With-git-fetch,how to keep "
"remote-tracking branches up to date>> with linkgit:git-fetch[1], and how to "
"merge two branches.  So you can merge in changes from the original "
"repository's master branch with:"
msgstr ""
"linkgit:git-fetch[1] を使用した<<Updating-a-repository-With-git-fetch,リモー"
"ト追跡ブランチを最新の状態に保つ方法>>や、2つのブランチをマージする方法につい"
"てはすでに説明しました。したがって、元のリポジトリのmasterブランチからの変更"
"を以下のようにマージできます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1715
#, no-wrap
msgid ""
"$ git fetch\n"
"$ git merge origin/master\n"
msgstr ""
"$ git fetch\n"
"$ git merge origin/master\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1719
msgid ""
"However, the linkgit:git-pull[1] command provides a way to do this in one "
"step:"
msgstr ""
"しかしながら、 linkgit:git-pull[1] コマンドは、これを1ステップで実行する方法"
"を提供します:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1722
#, no-wrap
msgid "$ git pull origin master\n"
msgstr "$ git pull origin master\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1728
msgid ""
"In fact, if you have `master` checked out, then this branch has been "
"configured by `git clone` to get changes from the HEAD branch of the origin "
"repository.  So often you can accomplish the above with just a simple"
msgstr ""
"実際、 あなたが `master` をチェックアウトしている場合、このブランチは、元のリ"
"ポジトリのHEADブランチから変更を取得するように `git clone` 実行時に構成済で"
"す。多くの場合、以下のように単純なもので上記を達成できます"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1731
#, no-wrap
msgid "$ git pull\n"
msgstr "$ git pull\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1736
msgid ""
"This command will fetch changes from the remote branches to your remote-"
"tracking branches `origin/*`, and merge the default branch into the current "
"branch."
msgstr ""
"このコマンドは、リモートブランチからリモート追跡ブランチ `origin/*` に変更を"
"フェッチし、そのデフォルトブランチを現在のブランチにマージします。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1743
msgid ""
"More generally, a branch that is created from a remote-tracking branch will "
"pull by default from that branch.  See the descriptions of the `branch."
"<name>.remote` and `branch.<name>.merge` options in linkgit:git-config[1], "
"and the discussion of the `--track` option in linkgit:git-checkout[1], to "
"learn how to control these defaults."
msgstr ""
"より一般的には、リモート追跡ブランチから作成されたブランチは、デフォルトでそ"
"のリモート追跡ブランチからプルされます。これらのデフォルトを制御する方法を学"
"ぶためには、 linkgit:git-config[1] の `branch.<name>.remote` や `branch."
"<name>.merge` オプションの説明と、 linkgit:git-checkout[1] の `--track` オプ"
"ションの説明を参照してください。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1747
msgid ""
"In addition to saving you keystrokes, `git pull` also helps you by producing "
"a default commit message documenting the branch and repository that you "
"pulled from."
msgstr ""
"`git pull` はキーストロークを節約するだけでなく、プル元のブランチとリポジトリ"
"を文書化したデフォルトのコミットメッセージを生成するのにも役立ちます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1751
msgid ""
"(But note that no such commit will be created in the case of a <<fast-"
"forwards,fast-forward>>; instead, your branch will just be updated to point "
"to the latest commit from the upstream branch.)"
msgstr ""
"(注意: ただし、<<fast-forwards,fast-forward>>の場合、そのようなコミットは作成"
"されないことに注意してください。代わりに、アップストリームブランチからの最新"
"のコミットを指すようにブランチが更新されます。)"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1755
msgid ""
"The `git pull` command can also be given `.` as the \"remote\" repository, "
"in which case it just merges in a branch from the current repository; so the "
"commands"
msgstr ""
"`git pull` コマンドに「リモートリポジトリ」として `.` を指定することもできま"
"す。この場合、現在のリポジトリからのブランチにマージされます。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1759
#, no-wrap
msgid ""
"$ git pull . branch\n"
"$ git merge branch\n"
msgstr ""
"$ git pull . branch\n"
"$ git merge branch\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1762
msgid "are roughly equivalent."
msgstr "よってこれらは、ほぼ同等です。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:1764
#, no-wrap
msgid "Submitting patches to a project"
msgstr "Submitting patches to a project"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1768
msgid ""
"If you just have a few changes, the simplest way to submit them may just be "
"to send them as patches in email:"
msgstr ""
"変更がいくつかある場合、それらを送信する最も簡単な方法は、パッチとして電子"
"メールで送信することです:"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1770
msgid "First, use linkgit:git-format-patch[1]; for example:"
msgstr "まずは linkgit:git-format-patch[1] の使用例です:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1773
#, no-wrap
msgid "$ git format-patch origin\n"
msgstr "$ git format-patch origin\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1777
msgid ""
"will produce a numbered series of files in the current directory, one for "
"each patch in the current branch but not in `origin/HEAD`."
msgstr ""
"そうすると、現在のディレクトリに番号付きの一連のファイルを生成します。現在の"
"ブランチのパッチごとに1つですが、 `origin/HEAD` についてのモノはありません。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1784
msgid ""
"`git format-patch` can include an initial \"cover letter\". You can insert "
"commentary on individual patches after the three dash line which `format-"
"patch` places after the commit message but before the patch itself.  If you "
"use `git notes` to track your cover letter material, `git format-patch --"
"notes` will include the commit's notes in a similar manner."
msgstr ""
"`git format-patch` は、最初に送付状(cover letter)を付けることができます。 "
"`format-patch` がコミットメッセージの後、パッチ自体の前に配置する3つの破線"
"(`---`)の後に、個々のパッチに関するコメントを挿入できます。送付状の素材を追跡"
"するために `git notes` を使用する場合、`git format-patch --notes` は同様の方"
"法でコミットのnoteを含みます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1790
msgid ""
"You can then import these into your mail client and send them by hand.  "
"However, if you have a lot to send at once, you may prefer to use the "
"linkgit:git-send-email[1] script to automate the process.  Consult the "
"mailing list for your project first to determine their requirements for "
"submitting patches."
msgstr ""
"次に、これらをメールクライアントにインポートして、手動で送信できます。 ただ"
"し、一度に送信するものが多い場合は、 linkgit:git-send-email[1] スクリプトを使"
"用してプロセスを自動化することをお勧めします。まずはプロジェクトのメーリング"
"リストを参照して、パッチを送信するための要件を決定してください。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:1792
#, no-wrap
msgid "Importing patches to a project"
msgstr "Importing patches to a project"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1798
msgid ""
"Git also provides a tool called linkgit:git-am[1] (am stands for \"apply "
"mailbox\"), for importing such an emailed series of patches.  Just save all "
"of the patch-containing messages, in order, into a single mailbox file, say "
"`patches.mbox`, then run"
msgstr ""
"Gitは、このような電子メールで送信された一連のパッチをインポートするための "
"linkgit:git-am[1] (amは「apply mailbox」の略)と呼ばれるツールも提供します。"
"パッチを含むすべてのメッセージを順番に1つのメールボックスファイル(`patches."
"mbox` など)に保存してから、以下を実行します"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1801
#, no-wrap
msgid "$ git am -3 patches.mbox\n"
msgstr "$ git am -3 patches.mbox\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1808
msgid ""
"Git will apply each patch in order; if any conflicts are found, it will "
"stop, and you can fix the conflicts as described in \"<<resolving-a-merge,"
"Resolving a merge>>\".  (The `-3` option tells Git to perform a merge; if "
"you would prefer it just to abort and leave your tree and index untouched, "
"you may omit that option.)"
msgstr ""
"Gitは各パッチを順番に適用します。競合が見つかった場合は停止し、<<resolving-a-"
"merge,Resolving a merge>>の説明に従って競合を修正できます。( `-3` オプション"
"は、Gitにマージを実行するように指示します。ツリーとインデックスを中止してその"
"ままにしておく場合は、そのオプションを省略できます。)"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1811
msgid ""
"Once the index is updated with the results of the conflict resolution, "
"instead of creating a new commit, just run"
msgstr ""
"競合解決の結果でインデックスが更新されたら、新しいコミットを作成する代わり"
"に、以下を実行するだけです。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1814
#, no-wrap
msgid "$ git am --continue\n"
msgstr "$ git am --continue\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1818
msgid ""
"and Git will create the commit for you and continue applying the remaining "
"patches from the mailbox."
msgstr ""
"こうすると、Gitはコミットを作成し、メールボックスから残りのパッチを適用し続け"
"ます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1822
msgid ""
"The final result will be a series of commits, one for each patch in the "
"original mailbox, with authorship and commit log message each taken from the "
"message containing each patch."
msgstr ""
"最終的な結果は、元のメールボックスのパッチごとに1つずつ、一連のコミットになり"
"ます。各パッチを含むメッセージから作者とコミットログメッセージが取得されま"
"す。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:1824
#, no-wrap
msgid "Public Git repositories"
msgstr "Public Git repositories"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1832
msgid ""
"Another way to submit changes to a project is to tell the maintainer of that "
"project to pull the changes from your repository using linkgit:git-pull[1].  "
"In the section \"<<getting-updates-With-git-pull, Getting updates with `git "
"pull`>>\" we described this as a way to get updates from the \"main\" "
"repository, but it works just as well in the other direction."
msgstr ""
"プロジェクトに変更を送信する別の方法は、 linkgit:git-pull[1] を使用して、リポ"
"ジトリから変更をプルするようにそのプロジェクトのメンテナに指示することです。 "
"「<<getting-updates-With-git-pull, Getting updates with `git pull`>>」のセク"
"ションでは、これを「メイン」リポジトリから更新を取得する方法として説明しまし"
"たが、 他の向きでも同様に機能します。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1837
msgid ""
"If you and the maintainer both have accounts on the same machine, then you "
"can just pull changes from each other's repositories directly; commands that "
"accept repository URLs as arguments will also accept a local directory name:"
msgstr ""
"あなたとメンテナの両方が同じマシン上にアカウントを持っている場合は、お互いの"
"リポジトリから直接変更をプルすることができます。リポジトリURLを引数として受け"
"入れるコマンドは、ローカルディレクトリ名も受け入れます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1841
#, no-wrap
msgid ""
"$ git clone /path/to/repository\n"
"$ git pull /path/to/other/repository\n"
msgstr ""
"$ git clone /path/to/repository\n"
"$ git pull /path/to/other/repository\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1844
msgid "or an ssh URL:"
msgstr "または ssh URL を指定できます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1847
#, no-wrap
msgid "$ git clone ssh://yourhost/~you/repository\n"
msgstr "$ git clone ssh://yourhost/~you/repository\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1851
msgid ""
"For projects with few developers, or for synchronizing a few private "
"repositories, this may be all you need."
msgstr ""
"開発者が少ないプロジェクトの場合、または少数のプライベートリポジトリを同期す"
"る場合は、これで十分な場合があります。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1856
msgid ""
"However, the more common way to do this is to maintain a separate public "
"repository (usually on a different host) for others to pull changes from.  "
"This is usually more convenient, and allows you to cleanly separate private "
"work in progress from publicly visible work."
msgstr ""
"けれども、これを行うためのより一般的な方法は、他のユーザーが変更をプルできる"
"ように、別のパブリックリポジトリ(通常は別のホスト上)を維持することです。これ"
"は通常、より便利であり、進行中の私的な作業を公に見える作業からきれいに分離す"
"ることができます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1863
msgid ""
"You will continue to do your day-to-day work in your personal repository, "
"but periodically \"push\" changes from your personal repository into your "
"public repository, allowing other developers to pull from that repository.  "
"So the flow of changes, in a situation where there is one other developer "
"with a public repository, looks like this:"
msgstr ""
"あなたは個人リポジトリで日常業務を継続しますが、定期的に個人リポジトリから公"
"開リポジトリに変更を「プッシュ」して、他の開発者がそのリポジトリからプルでき"
"るようにします。したがって、パブリックリポジトリを持つ他の開発者が1人いる状況"
"での変更のフローは、以下のようになります:"

#. type: delimited block .
#: ../Documentation-sedout/user-manual.txt:1874
#, no-wrap
msgid ""
"\t\t      you push\n"
"your personal repo ------------------> your public repo\n"
"      ^                                     |\n"
"      |                                     |\n"
"      | you pull                            | they pull\n"
"      |                                     |\n"
"      |                                     |\n"
"      |               they push             V\n"
"their public repo <------------------- their repo\n"
msgstr ""
"\t\t      you push\n"
"your personal repo ------------------> your public repo\n"
"      ^                                     |\n"
"      |                                     |\n"
"      | you pull                            | they pull\n"
"      |                                     |\n"
"      |                                     |\n"
"      |               they push             V\n"
"their public repo <------------------- their repo\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1877
msgid "We explain how to do this in the following sections."
msgstr "これを行う方法については、次のセクションで説明します。"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:1879
#, no-wrap
msgid "Setting up a public repository"
msgstr "Setting up a public repository"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1884
msgid ""
"Assume your personal repository is in the directory `~/proj`.  We first "
"create a new clone of the repository and tell `git daemon` that it is meant "
"to be public:"
msgstr ""
"あなたの個人リポジトリがディレクトリ `~/proj` にあると仮定します。 まず、リポ"
"ジトリの新しいクローンを作成し、それがパブリックであることを意図していること"
"を `git daemon` に伝えます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1888
#, no-wrap
msgid ""
"$ git clone --bare ~/proj proj.git\n"
"$ touch proj.git/git-daemon-export-ok\n"
msgstr ""
"$ git clone --bare ~/proj proj.git\n"
"$ touch proj.git/git-daemon-export-ok\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1893
msgid ""
"The resulting directory proj.git contains a \"bare\" git repository--it is "
"just the contents of the `.git` directory, without any files checked out "
"around it."
msgstr ""
"結果のディレクトリ proj.git には、ベアgitリポジトリ(bare;生の、むき出しの)が"
"含まれています。これは、 `.git` ディレクトリの内容であり、周囲にファイルが"
"チェックアウトされていません。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1897
msgid ""
"Next, copy `proj.git` to the server where you plan to host the public "
"repository.  You can use scp, rsync, or whatever is most convenient."
msgstr ""
"次に、パブリックリポジトリをホストする予定のサーバーに `proj.git` をコピーし"
"ます。 scpやrsyncなど、あなたが最も便利と思うツールを使う事ができます。"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:1899
#, no-wrap
msgid "Exporting a Git repository via the Git protocol"
msgstr "Gitプロトコルを介したGitリポジトリのエクスポート"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1902
msgid "This is the preferred method."
msgstr "これが推奨の方法です。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1908
msgid ""
"If someone else administers the server, they should tell you what directory "
"to put the repository in, and what `git://` URL it will appear at.  You can "
"then skip to the section \"<<pushing-changes-to-a-public-repository,Pushing "
"changes to a public repository>>\", below."
msgstr ""
"もし、他の誰かがサーバーを管理している場合は、リポジトリを配置するディレクト"
"リと、リポジトリが表示される `git://` URLを教えてもらってください。そして、以"
"下の「<<pushing-changes-to-a-public-repository,Pushing changes to a public "
"repository>>」のセクションまでスキップできます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1914
msgid ""
"Otherwise, all you need to do is start linkgit:git-daemon[1]; it will listen "
"on port 9418.  By default, it will allow access to any directory that looks "
"like a Git directory and contains the magic file git-daemon-export-ok.  "
"Passing some directory paths as `git daemon` arguments will further restrict "
"the exports to those paths."
msgstr ""
"それ以外の場合は、あなたは linkgit:git-daemon[1]を開始する必要があります。 "
"ポート9418でリッスンします。デフォルトでは、Gitディレクトリのように見え、マ"
"ジックファイルgit-daemon-export-okを含む任意のディレクトリへのアクセスが許可"
"されます。一部のディレクトリパスを `git daemon` の引数として渡すと、さらにそ"
"れらのパスへのエクスポートが制限されます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1918
msgid ""
"You can also run `git daemon` as an inetd service; see the linkgit:git-"
"daemon[1] man page for details.  (See especially the examples section.)"
msgstr ""
"`gitdaemon`をinetdサービスとして実行することもできます。 詳細については、 "
"linkgit:git-daemon[1] のマニュアルページを参照してください。(特に「examples」"
"セクションを参照してください。)"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:1920
#, no-wrap
msgid "Exporting a git repository via HTTP"
msgstr "Exporting a git repository via HTTP"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1924
msgid ""
"The Git protocol gives better performance and reliability, but on a host "
"with a web server set up, HTTP exports may be simpler to set up."
msgstr ""
"Gitプロトコルを使用した方がパフォーマンスと信頼性が向上しますが、Webサーバー"
"が設定済のホストでは、HTTPエクスポートの設定が簡単な場合があります。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1928
msgid ""
"All you need to do is place the newly created bare Git repository in a "
"directory that is exported by the web server, and make some adjustments to "
"give web clients some extra information they need:"
msgstr ""
"あなたは、新しく作成したベアGitリポジトリをWebサーバーによってエクスポートさ"
"れるディレクトリに配置し、Webクライアントに必要な追加情報を提供するためにいく"
"つかの調整を行うだけです:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1934
#, no-wrap
msgid ""
"$ mv proj.git /home/you/public_html/proj.git\n"
"$ cd proj.git\n"
"$ git --bare update-server-info\n"
"$ mv hooks/post-update.sample hooks/post-update\n"
msgstr ""
"$ mv proj.git /home/you/public_html/proj.git\n"
"$ cd proj.git\n"
"$ git --bare update-server-info\n"
"$ mv hooks/post-update.sample hooks/post-update\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1938
msgid ""
"(For an explanation of the last two lines, see linkgit:git-update-server-"
"info[1] and linkgit:githooks[5].)"
msgstr ""
"(最後の2行の説明については、 linkgit:git-update-server-info[1] と linkgit:"
"githooks[5] を参照してください。)"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1941
msgid ""
"Advertise the URL of `proj.git`.  Anybody else should then be able to clone "
"or pull from that URL, for example with a command line like:"
msgstr ""
"`proj.git` のURLを公表します。 そうすれば、他の誰もが、たとえば以下のようなコ"
"マンドラインを使用して、そのURLからクローンを作成したりプルしたりできるように"
"なります:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1944
#, no-wrap
msgid "$ git clone http://yourserver.com/~you/proj.git\n"
msgstr "$ git clone http://yourserver.com/~you/proj.git\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1950
msgid ""
"(See also link:howto/setup-git-server-over-http.html[setup-git-server-over-"
"http] for a slightly more sophisticated setup using WebDAV which also allows "
"pushing over HTTP.)"
msgstr ""
"(HTTPでプッシュすることもできるWebDAVを使用した少し洗練されたセットアップにつ"
"いては、 link:howto/setup-git-server-over-http.html[setup-git-server-over-"
"http] も参照してください。)"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:1952
#, no-wrap
msgid "Pushing changes to a public repository"
msgstr "Pushing changes to a public repository"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1959
msgid ""
"Note that the two techniques outlined above (exporting via <<exporting-via-"
"http,http>> or <<exporting-via-git,git>>) allow other maintainers to fetch "
"your latest changes, but they do not allow write access, which you will need "
"to update the public repository with the latest changes created in your "
"private repository."
msgstr ""
"上記の2つの手法(<<exporting-via-http,http>>または<<exporting-via-git,git>>を"
"介したエクスポート)では、他のメンテナが最新の変更をフェッチできますが、書き込"
"みアクセスは許可されないことに注意してください。これらはあなたのプライベート"
"リポジトリで作成された最新の変更であなたがパブリックリポジトリを更新する必要"
"があります。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1963
msgid ""
"The simplest way to do this is using linkgit:git-push[1] and ssh; to update "
"the remote branch named `master` with the latest state of your branch named "
"`master`, run"
msgstr ""
"これを行う最も簡単な方法は、 linkgit:git-push[1] とsshを使用することです。 "
"`master` という名前のリモートブランチを `master` という名前のブランチの最新の"
"状態で更新するには、以下のコマンドを実行します"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1966
#, no-wrap
msgid "$ git push ssh://yourserver.com/~you/proj.git master:master\n"
msgstr "$ git push ssh://yourserver.com/~you/proj.git master:master\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1969
msgid "or just"
msgstr "または単に"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1972
#, no-wrap
msgid "$ git push ssh://yourserver.com/~you/proj.git master\n"
msgstr "$ git push ssh://yourserver.com/~you/proj.git master\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1977
msgid ""
"As with `git fetch`, `git push` will complain if this does not result in a "
"<<fast-forwards,fast-forward>>; see the following section for details on "
"handling this case."
msgstr ""
"`git fetch` と同様に、これが<<fast-forwards,fast-forward>>にならない場合、 "
"`git push` は文句を言います。 この場合の処理の詳細については、次のセクション"
"を参照してください。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1984
msgid ""
"Note that the target of a `push` is normally a <<def_bare_repository,bare>> "
"repository.  You can also push to a repository that has a checked-out "
"working tree, but a push to update the currently checked-out branch is "
"denied by default to prevent confusion.  See the description of the receive."
"denyCurrentBranch option in linkgit:git-config[1] for details."
msgstr ""
"注意: `push` のターゲットは通常、<<def_bare_repository,ベア>>リポジトリである"
"ことに注意してください。チェックアウトされた作業ツリーがあるリポジトリにプッ"
"シュすることもできますが、混乱を防ぐために、現在チェックアウトされているブラ"
"ンチを更新するためのプッシュはデフォルトで拒否されます。詳細については、 "
"linkgit:git-config[1]の receive.denyCurrentBranch オプションの説明を参照して"
"ください。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1987
msgid ""
"As with `git fetch`, you may also set up configuration options to save "
"typing; so, for example:"
msgstr ""
"`git fetch` と同様に、入力を節約するための構成オプションを設定することもでき"
"ます。たとえば:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1990
#, no-wrap
msgid "$ git remote add public-repo ssh://yourserver.com/~you/proj.git\n"
msgstr "$ git remote add public-repo ssh://yourserver.com/~you/proj.git\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:1993
#: ../Documentation-sedout/user-manual.txt:2886
msgid "adds the following to `.git/config`:"
msgstr "とすると、 `.git/config` は以下のようになります:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:1998
#, no-wrap
msgid ""
"[remote \"public-repo\"]\n"
"\turl = yourserver.com:proj.git\n"
"\tfetch = +refs/heads/*:refs/remotes/example/*\n"
msgstr ""
"[remote \"public-repo\"]\n"
"\turl = yourserver.com:proj.git\n"
"\tfetch = +refs/heads/*:refs/remotes/example/*\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2001
msgid "which lets you do the same push with just"
msgstr "そうすると、以下のようにするだけで上記と同じプッシュをする事ができます"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2004
#, no-wrap
msgid "$ git push public-repo master\n"
msgstr "$ git push public-repo master\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2009
msgid ""
"See the explanations of the `remote.<name>.url`, `branch.<name>.remote`, and "
"`remote.<name>.push` options in linkgit:git-config[1] for details."
msgstr ""
"詳細については、 linkgit:git-config[1]の `remote.<name>.url` や `branch."
"<name>.remote` や `remote.<name>.push` オプションの説明を参照してください。"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:2011
#, no-wrap
msgid "What to do when a push fails"
msgstr "プッシュが失敗した場合の対処方法"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2015
msgid ""
"If a push would not result in a <<fast-forwards,fast-forward>> of the remote "
"branch, then it will fail with an error like:"
msgstr ""
"プッシュによってリモートブランチで<<fast-forwards,fast-forward>>が発生しない"
"場合は、以下のようなエラーで失敗します:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2023
#, no-wrap
msgid ""
" ! [rejected]        master -> master (non-fast-forward)\n"
"error: failed to push some refs to '...'\n"
"hint: Updates were rejected because the tip of your current branch is behind\n"
"hint: its remote counterpart. Integrate the remote changes (e.g.\n"
"hint: 'git pull ...') before pushing again.\n"
"hint: See the 'Note about fast-forwards' in 'git push --help' for details.\n"
msgstr ""
" ! [rejected]        master -> master (non-fast-forward)\n"
"error: failed to push some refs to '...'\n"
"hint: Updates were rejected because the tip of your current branch is behind\n"
"hint: its remote counterpart. Integrate the remote changes (e.g.\n"
"hint: 'git pull ...') before pushing again.\n"
"hint: See the 'Note about fast-forwards' in 'git push --help' for details.\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2026
msgid "This can happen, for example, if you:"
msgstr "これは、たとえば、以下の場合に発生する可能性があります:"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2028
msgid "use `git reset --hard` to remove already-published commits, or"
msgstr ""
"`git reset --hard` を使用して、すでに公開されているコミットを削除しようとした"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2030
msgid ""
"use `git commit --amend` to replace already-published commits (as in "
"<<fixing-a-mistake-by-rewriting-history>>), or"
msgstr ""
"`git commit --amend` を使用して、すでに公開されているコミットを置き換えようと"
"した(<<fixing-a-mistake-by-rewriting-history>>のように)"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2032
msgid ""
"use `git rebase` to rebase any already-published commits (as in <<using-git-"
"rebase>>)."
msgstr ""
"`git rebase` を使用して、すでに公開されているコミットをリベースしようとした"
"(<<using-git-rebase>>のように)"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2035
msgid ""
"You may force `git push` to perform the update anyway by preceding the "
"branch name with a plus sign:"
msgstr ""
"あなたはブランチ名の前にプラス記号(`+`)を付けることで、 `git push` に強制的に"
"更新を実行させることができます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2038
#, no-wrap
msgid "$ git push ssh://yourserver.com/~you/proj.git +master\n"
msgstr "$ git push ssh://yourserver.com/~you/proj.git +master\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2042
msgid ""
"Note the addition of the `+` sign.  Alternatively, you can use the `-f` flag "
"to force the remote update, as in:"
msgstr ""
"注意: 上記では `+` 記号が追加されていることに注意してください。または、以下の"
"ように、 `-f` フラグを使用してリモート更新を強制することもできます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2045
#, no-wrap
msgid "$ git push -f ssh://yourserver.com/~you/proj.git master\n"
msgstr "$ git push -f ssh://yourserver.com/~you/proj.git master\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2051
msgid ""
"Normally whenever a branch head in a public repository is modified, it is "
"modified to point to a descendant of the commit that it pointed to before.  "
"By forcing a push in this situation, you break that convention.  (See "
"<<problems-With-rewriting-history>>.)"
msgstr ""
"通常、パブリックリポジトリのブランチヘッドが変更されると、以前にポイントした"
"コミットの子孫を指すように変更されます。この状況でプッシュを強制することによ"
"り、あなたはその慣習を破ることになります。(<<problems-With-rewriting-"
"history>>を参照してください。)"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2056
msgid ""
"Nevertheless, this is a common practice for people that need a simple way to "
"publish a work-in-progress patch series, and it is an acceptable compromise "
"as long as you warn other developers that this is how you intend to manage "
"the branch."
msgstr ""
"それでも、これは進行中のパッチシリーズを公開する簡単な方法を必要とする人々に"
"とって一般的な方法であり、これがブランチの管理方法であることを他の開発者に警"
"告する限り、許容できる妥協案です。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2063
msgid ""
"It's also possible for a push to fail in this way when other people have the "
"right to push to the same repository.  In that case, the correct solution is "
"to retry the push after first updating your work: either by a pull, or by a "
"fetch followed by a rebase; see the <<setting-up-a-shared-repository,next "
"section>> and linkgit:gitcvs-migration[7] for more."
msgstr ""
"他の人が同じリポジトリにプッシュする権利を持っている場合、この方法でプッシュ"
"が失敗する可能性もあります。その場合、正しい解決策は、最初にプル、または"
"フェッチとそれに続くリベースのいずれかの作業を更新した後にプッシュを再試行す"
"ることです。詳細については、<<setting-up-a-shared-repository,次のセクション"
">> および linkgit:gitcvs-migration[7] を参照してください。"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:2065
#, no-wrap
msgid "Setting up a shared repository"
msgstr "Setting up a shared repository"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2072
msgid ""
"Another way to collaborate is by using a model similar to that commonly used "
"in CVS, where several developers with special rights all push to and pull "
"from a single shared repository.  See linkgit:gitcvs-migration[7] for "
"instructions on how to set this up."
msgstr ""
"共同作業するもう1つの方法は、CVSで一般的に使用されているモデルと同様のモデル"
"を使用することです。このモデルでは、特別な権限を持つ複数の開発者がすべて、単"
"一の共有リポジトリにプッシュおよびプルします。これを設定する方法については、 "
"linkgit:gitcvs-migration[7] を参照してください。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2078
msgid ""
"However, while there is nothing wrong with Git's support for shared "
"repositories, this mode of operation is not generally recommended, simply "
"because the mode of collaboration that Git supports--by exchanging patches "
"and pulling from public repositories--has so many advantages over the "
"central shared repository:"
msgstr ""
"けれども、共有リポジトリに対するGitのサポートに問題はありませんが、Gitがサ"
"ポートする、パッチをやり取りし公開リポジトリからプルすることによる共同作業"
"モードは中央共有リポジトリに比べて非常に多くの利点があるため、この操作モード"
"は通常は推奨されません:"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2085
msgid ""
"Git's ability to quickly import and merge patches allows a single maintainer "
"to process incoming changes even at very high rates.  And when that becomes "
"too much, `git pull` provides an easy way for that maintainer to delegate "
"this job to other maintainers while still allowing optional review of "
"incoming changes."
msgstr ""
"パッチをすばやくインポートしてマージするGitの機能により、1人のメンテナが非常"
"に高いレートでも受信した変更を処理できます。 そして、それが多すぎる場合、 "
"`git pull` は、そのメンテナがこのジョブを他のメンテナに委任するための簡単な方"
"法を提供しますが、それでも着信変更のオプションのレビューを許可します。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2090
msgid ""
"Since every developer's repository has the same complete copy of the project "
"history, no repository is special, and it is trivial for another developer "
"to take over maintenance of a project, either by mutual agreement, or "
"because a maintainer becomes unresponsive or difficult to work with."
msgstr ""
"すべての開発者のリポジトリにはプロジェクト履歴の同じ完全なコピーがあるため、"
"特別なリポジトリはありません。また、相互の合意によって、またはメンテナが応答"
"しなくなったり、作業が困難になったりしたために、別の開発者がプロジェクトのメ"
"ンテナンスを引き継ぐのは簡単です。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2093
msgid ""
"The lack of a central group of \"committers\" means there is less need for "
"formal decisions about who is \"in\" and who is \"out\"."
msgstr ""
"「コミッター」の中央グループがないということは、誰が「グループ内側」なのか、"
"誰が「グループ外側」なのかについての正式な決定の必要性が少ないことを意味しま"
"す。"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:2095
#, no-wrap
msgid "Allowing web browsing of a repository"
msgstr "Allowing web browsing of a repository"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2101
msgid ""
"The gitweb cgi script provides users an easy way to browse your project's "
"revisions, file contents and logs without having to install Git. Features "
"like RSS/Atom feeds and blame/annotation details may optionally be enabled."
msgstr ""
"gitweb cgiスクリプトを使用すると、Gitをインストールしなくても、プロジェクトの"
"リビジョン、ファイルの内容、ログを簡単に参照できます。 RSS/Atomフィードや"
"blame/annotationの詳細などの機能をオプションで有効にすることができます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2105
msgid ""
"The linkgit:git-instaweb[1] command provides a simple way to start browsing "
"the repository using gitweb. The default server when using instaweb is "
"lighttpd."
msgstr ""
"linkgit:git-instaweb[1] コマンドは、gitwebを使用してリポジトリの閲覧を開始す"
"る簡単な方法を提供します。 instawebを使用する場合のデフォルトのサーバーは"
"lighttpdです。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2109
msgid ""
"See the file gitweb/INSTALL in the Git source tree and linkgit:gitweb[1] for "
"instructions on details setting up a permanent installation with a CGI or "
"Perl capable server."
msgstr ""
"CGIまたはPerl対応サーバーを使用した永続的なインストールのセットアップの詳細に"
"ついては、Gitソースツリーのファイル gitweb/INSTALL および linkgit:gitweb[1] "
"を参照してください。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:2111
#, no-wrap
msgid "How to get a Git repository with minimal history"
msgstr "最小限の履歴でGitリポジトリを取得する方法"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2117
msgid ""
"A <<def_shallow_clone,shallow clone>>, with its truncated history, is useful "
"when one is interested only in recent history of a project and getting full "
"history from the upstream is expensive."
msgstr ""
"履歴が切り捨てられた<<def_shallow_clone,shallow clone>>は、プロジェクトの最近"
"の履歴のみに関心があり、アップストリームから完全な履歴を取得するのにコストが"
"かかる場合に役立ちます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2122
msgid ""
"A <<def_shallow_clone,shallow clone>> is created by specifying the linkgit:"
"git-clone[1] `--depth` switch. The depth can later be changed with the "
"linkgit:git-fetch[1] `--depth` switch, or full history restored with `--"
"unshallow`."
msgstr ""
"<<def_shallow_clone,shallow clone>>は、 linkgit:git-clone[1] に `--depth` ス"
"イッチを指定することで作成されます。深さは後で linkgit:git-fetch[1] の `--"
"depth` スイッチで変更するか、または、完全な履歴を `--unshallow` で復元するこ"
"とができます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2128
msgid ""
"Merging inside a <<def_shallow_clone,shallow clone>> will work as long as a "
"merge base is in the recent history.  Otherwise, it will be like merging "
"unrelated histories and may have to result in huge conflicts.  This "
"limitation may make such a repository unsuitable to be used in merge based "
"workflows."
msgstr ""
"<<def_shallow_clone,shallow clone>>内でのマージは、マージベースが取得してきた"
"最近の履歴にある限り機能します。そうでなければ、無関係な履歴をマージするよう"
"なものになり、大きな競合が発生する可能性があります。この制限により、このよう"
"なリポジトリはマージベースのワークフローでの使用に適さなくなる可能性がありま"
"す。"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:2133
#, no-wrap
msgid "Maintaining topic branches for a Linux subsystem maintainer"
msgstr "Maintaining topic branches for a Linux subsystem maintainer"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2137
msgid ""
"This describes how Tony Luck uses Git in his role as maintainer of the IA64 "
"architecture for the Linux kernel."
msgstr ""
"ここでは、Tony LuckがLinuxカーネルのIA64アーキテクチャーのメンテナーとしてGit"
"をどのように使用しているかを説明します。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2139
msgid "He uses two public branches:"
msgstr "彼は2つのパブリックブランチを使用しています:"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2144
msgid ""
"A \"test\" tree into which patches are initially placed so that they can get "
"some exposure when integrated with other ongoing development.  This tree is "
"available to Andrew for pulling into -mm whenever he wants."
msgstr ""
"他の進行中の開発と統合されたときにパッチがある程度の露出を得ることができるよ"
"うに、パッチが最初に配置される「test」ツリー。このツリーは、Andrewが必要なと"
"きにいつでも -mm にプルするために使用できます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2148
msgid ""
"A \"release\" tree into which tested patches are moved for final sanity "
"checking, and as a vehicle to send them upstream to Linus (by sending him a "
"\"please pull\" request.)"
msgstr ""
"テスト済のパッチが最終的な健全性チェックのために移動され、それらを上流のLinus"
"に送信(彼に「プルしてください」というリクエストを送信)するための手段としての"
"「release」ツリー"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2151
msgid ""
"He also uses a set of temporary branches (\"topic branches\"), each "
"containing a logical grouping of patches."
msgstr ""
"彼はまた、パッチの論理グループをそれぞれ含む一時的なブランチ(トピックブラン"
"チ)の組を使用します。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2154
msgid ""
"To set this up, first create your work tree by cloning Linus's public tree:"
msgstr ""
"これを設定するには、最初にLinusのパブリックツリーのクローンを作成して作業ツ"
"リーを作成します。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2158
#, no-wrap
msgid ""
"$ git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git work\n"
"$ cd work\n"
msgstr ""
"$ git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git work\n"
"$ cd work\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2165
msgid ""
"Linus's tree will be stored in the remote-tracking branch named origin/"
"master, and can be updated using linkgit:git-fetch[1]; you can track other "
"public trees using linkgit:git-remote[1] to set up a \"remote\" and linkgit:"
"git-fetch[1] to keep them up to date; see <<repositories-and-branches>>."
msgstr ""
"Linusのツリーは、 origin/master という名前のリモート追跡ブランチに保存され、 "
"linkgit:git-fetch[1] を使用して更新できます。 linkgit:git-remote[1] を使用し"
"て \"remote\" を設定し、 linkgit:git-fetch[1] を使用して他のパブリックツリー"
"を追跡し、それらを最新の状態に保つことができます。<<repositories-and-"
"branches>> を参照してください。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2170
msgid ""
"Now create the branches in which you are going to work; these start out at "
"the current tip of origin/master branch, and should be set up (using the `--"
"track` option to linkgit:git-branch[1]) to merge changes in from Linus by "
"default."
msgstr ""
"そして今、作業するブランチを作成します。 これらは現在の origin/master ブラン"
"チの先端から始まり、デフォルトでLinusからの変更をマージするように設定する必要"
"があります(linkgit:git-branch[1]の `--track` オプションを使用)。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2174
#, no-wrap
msgid ""
"$ git branch --track test origin/master\n"
"$ git branch --track release origin/master\n"
msgstr ""
"$ git branch --track test origin/master\n"
"$ git branch --track release origin/master\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2177
msgid "These can be easily kept up to date using linkgit:git-pull[1]."
msgstr ""
"これらは、 linkgit:git-pull[1] を使用して簡単に最新の状態に保つことができま"
"す。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2181
#, no-wrap
msgid ""
"$ git switch test && git pull\n"
"$ git switch release && git pull\n"
msgstr ""
"$ git switch test && git pull\n"
"$ git switch release && git pull\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2190
msgid ""
"Important note! If you have any local changes in these branches, then this "
"merge will create a commit object in the history (with no local changes Git "
"will simply do a \"fast-forward\" merge).  Many people dislike the \"noise\" "
"that this creates in the Linux history, so you should avoid doing this "
"capriciously in the `release` branch, as these noisy commits will become "
"part of the permanent history when you ask Linus to pull from the release "
"branch."
msgstr ""
"重要な注意点！ これらのブランチにローカルの変更がある場合、このマージは履歴に"
"コミットオブジェクトを作成します(ローカルの変更なしで、Gitは単に「fast-"
"forward」マージを実行します)。 多くの人がこれがLinuxの歴史に生み出す「ノイ"
"ズ」を嫌います。つまり、Linusにリリースブランチからプルするように依頼すると、"
"これらのノイズの多いコミットが永続的な履歴の一部になるため、 `release` ブラン"
"チでこれを気まぐれに行うことは避けてください。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2194
msgid ""
"A few configuration variables (see linkgit:git-config[1]) can make it easy "
"to push both branches to your public tree.  (See <<setting-up-a-public-"
"repository>>.)"
msgstr ""
"いくつかの構成変数(linkgit:git-config[1] を参照)を使用すると、両方のブランチ"
"をパブリックツリーに簡単にプッシュできます。(<<setting-up-a-public-"
"repository>> を参照してください。)"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2202
#, no-wrap
msgid ""
"$ cat >> .git/config <<EOF\n"
"[remote \"mytree\"]\n"
"\turl =  master.kernel.org:/pub/scm/linux/kernel/git/aegl/linux.git\n"
"\tpush = release\n"
"\tpush = test\n"
"EOF\n"
msgstr ""
"$ cat >> .git/config <<EOF\n"
"[remote \"mytree\"]\n"
"\turl =  master.kernel.org:/pub/scm/linux/kernel/git/aegl/linux.git\n"
"\tpush = release\n"
"\tpush = test\n"
"EOF\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2206
msgid ""
"Then you can push both the test and release trees using linkgit:git-push[1]:"
msgstr ""
"次に、 linkgit:git-push[1] を使用して、testツリーとreleaseツリーの両方をプッ"
"シュできます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2209
#, no-wrap
msgid "$ git push mytree\n"
msgstr "$ git push mytree\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2212
msgid "or push just one of the test and release branches using:"
msgstr ""
"または、以下を使用してtestブランチとreleaseブランチの1つだけをプッシュします:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2215
#, no-wrap
msgid "$ git push mytree test\n"
msgstr "$ git push mytree test\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2218
#: ../Documentation-sedout/user-manual.txt:2279
#: ../Documentation-sedout/user-manual.txt:3614
msgid "or"
msgstr "または"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2221
#, no-wrap
msgid "$ git push mytree release\n"
msgstr "$ git push mytree release\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2227
msgid ""
"Now to apply some patches from the community.  Think of a short snappy name "
"for a branch to hold this patch (or related group of patches), and create a "
"new branch from a recent stable tag of Linus's branch. Picking a stable base "
"for your branch will:"
msgstr ""
"次に、コミュニティからいくつかのパッチを適用します。 このパッチ(または関連す"
"るパッチのグループ)を保持するブランチの短い名前を考えて、Linusのブランチの最"
"近の安定したタグから新しいブランチを作成します。あなたのブランチの為に安定し"
"たベースを選択すると、以下のようになります:"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2229
msgid ""
"help you: by avoiding inclusion of unrelated and perhaps lightly tested "
"changes"
msgstr ""
"無関係でおそらく軽くテストされた変更を含めることを避けるのは、あなた自身への"
"助けになります。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2230
msgid "help future bug hunters that use `git bisect` to find problems"
msgstr "`git bisect` を使用して問題を見つける将来のバグハンターを支援する"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2233
#, no-wrap
msgid "$ git switch -c speed-up-spinlocks v2.6.35\n"
msgstr "$ git switch -c speed-up-spinlocks v2.6.35\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2238
msgid ""
"Now you apply the patch(es), run some tests, and commit the change(s).  If "
"the patch is a multi-part series, then you should apply each as a separate "
"commit to this branch."
msgstr ""
"次に、パッチを適用し、いくつかのテストを実行して、変更をコミットします。 パッ"
"チがマルチパートシリーズの場合は、それぞれを個別のコミットとしてこのブランチ"
"に適用する必要があります。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2241
#, no-wrap
msgid "$ ... patch ... test  ... commit [ ... patch ... test ... commit ]*\n"
msgstr "$ ... patch ... test  ... commit [ ... patch ... test ... commit ]*\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2245
msgid ""
"When you are happy with the state of this change, you can merge it into the "
"\"test\" branch in preparation to make it public:"
msgstr ""
"この変更の状態に満足したら、公開する準備として「test」ブランチにマージできま"
"す:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2248
#, no-wrap
msgid "$ git switch test && git merge speed-up-spinlocks\n"
msgstr "$ git switch test && git merge speed-up-spinlocks\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2252
msgid ""
"It is unlikely that you would have any conflicts here ... but you might if "
"you spent a while on this step and had also pulled new versions from "
"upstream."
msgstr ""
"ここで競合が発生する可能性はほとんどありません…ただし、この手順にしばらく時間"
"を費やし、アップストリームから新しいバージョンをプルした場合は、競合が発生す"
"る可能性があります。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2257
msgid ""
"Sometime later when enough time has passed and testing done, you can pull "
"the same branch into the `release` tree ready to go upstream.  This is where "
"you see the value of keeping each patch (or patch series) in its own "
"branch.  It means that the patches can be moved into the `release` tree in "
"any order."
msgstr ""
"しばらくして、十分な時間が経過してテストが完了したら、同じブランチを"
"「release」ツリーにプルして、アップストリームに進む準備をすることができます。"
"ここで、各パッチ（またはパッチシリーズ）を独自のブランチに保持することの価値"
"を確認できます。 これは、パッチを任意の順序で「release」ツリーに移動できるこ"
"とを意味します。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2260
#, no-wrap
msgid "$ git switch release && git merge speed-up-spinlocks\n"
msgstr "$ git switch release && git merge speed-up-spinlocks\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2266
msgid ""
"After a while, you will have a number of branches, and despite the well "
"chosen names you picked for each of them, you may forget what they are for, "
"or what status they are in.  To get a reminder of what changes are in a "
"specific branch, use:"
msgstr ""
"しばらくすると、いくつかのブランチが作成され、それぞれに適切に選択された名前"
"があるにもかかわらず、ブランチの目的や状態を忘れてしまう可能性があります。特"
"定のブランチにどのような変更があるか思い出すには以下を使用します:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2269
#, no-wrap
msgid "$ git log linux..branchname | git shortlog\n"
msgstr "$ git log linux..branchname | git shortlog\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2273
msgid ""
"To see whether it has already been merged into the test or release branches, "
"use:"
msgstr ""
"testブランチまたはreleaseブランチにすでにマージされているかどうかを確認するに"
"は、以下を使用します:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2276
#, no-wrap
msgid "$ git log test..branchname\n"
msgstr "$ git log test..branchname\n"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2282
#, no-wrap
msgid "$ git log release..branchname\n"
msgstr "$ git log release..branchname\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2286
msgid ""
"(If this branch has not yet been merged, you will see some log entries.  If "
"it has been merged, then there will be no output.)"
msgstr ""
"(このブランチがまだマージされていない場合は、いくつかのログエントリが表示され"
"ます。マージされている場合、出力はありません。)"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2291
msgid ""
"Once a patch completes the great cycle (moving from test to release, then "
"pulled by Linus, and finally coming back into your local `origin/master` "
"branch), the branch for this change is no longer needed.  You detect this "
"when the output from:"
msgstr ""
"パッチがその大きなサイクルを完了すると(testからreleaseに移動し、Linusによって"
"プルされ、最後にローカルの `origin/master` ブランチに戻るというサイクル)、こ"
"の、変更のためのブランチは不要になります。あなたは以下の出力時にそれを悟りま"
"す:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2294
#, no-wrap
msgid "$ git log origin..branchname\n"
msgstr "$ git log origin..branchname\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2297
msgid "is empty.  At this point the branch can be deleted:"
msgstr "これの出力が空です。この時点で、このブランチを削除できます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2300
#, no-wrap
msgid "$ git branch -d branchname\n"
msgstr "$ git branch -d branchname\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2306
msgid ""
"Some changes are so trivial that it is not necessary to create a separate "
"branch and then merge into each of the test and release branches.  For these "
"changes, just apply directly to the `release` branch, and then merge that "
"into the `test` branch."
msgstr ""
"一部の変更は非常に簡単なので、個別のブランチを作成してから、testブランチと"
"releaseブランチのそれぞれにマージする必要はありません。これらの変更について"
"は、 `release` ブランチに直接適用してから、それを `test` ブランチにマージして"
"ください。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2310
msgid ""
"After pushing your work to `mytree`, you can use linkgit:git-request-pull[1] "
"to prepare a \"please pull\" request message to send to Linus:"
msgstr ""
"作業を `mytree` にプッシュした後、 linkgit:git-request-pull[1] を使用して、"
"Linusに送信するための、「please pull」リクエストメッセージを準備できます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2314
#, no-wrap
msgid ""
"$ git push mytree\n"
"$ git request-pull origin mytree release\n"
msgstr ""
"$ git push mytree\n"
"$ git request-pull origin mytree release\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2317
msgid "Here are some of the scripts that simplify all this even further."
msgstr "これをさらに単純化するスクリプトのいくつかを以下に示します。"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:2319
#, no-wrap
msgid "update script"
msgstr "update script"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2323
msgid ""
"# Update a branch in my Git tree.  If the branch to be updated # is origin, "
"then pull from kernel.org.  Otherwise merge # origin/master branch into test|"
"release branch"
msgstr ""
"# Gitツリーのブランチを更新します。更新するブランチがoriginの場合は、kernel."
"orgからプルします。それ以外の場合は、origin/masterブランチを test ブランチ ま"
"たは releaseブランチにマージします"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2342
#, no-wrap
msgid ""
"case \"$1\" in\n"
"test|release)\n"
"\tgit checkout $1 && git pull . origin\n"
"\t;;\n"
"origin)\n"
"\tbefore=$(git rev-parse refs/remotes/origin/master)\n"
"\tgit fetch origin\n"
"\tafter=$(git rev-parse refs/remotes/origin/master)\n"
"\tif [ $before != $after ]\n"
"\tthen\n"
"\t\tgit log $before..$after | git shortlog\n"
"\tfi\n"
"\t;;\n"
"*)\n"
"\techo \"usage: $0 origin|test|release\" 1>&2\n"
"\texit 1\n"
"\t;;\n"
"esac\n"
msgstr ""
"case \"$1\" in\n"
"test|release)\n"
"\tgit checkout $1 && git pull . origin\n"
"\t;;\n"
"origin)\n"
"\tbefore=$(git rev-parse refs/remotes/origin/master)\n"
"\tgit fetch origin\n"
"\tafter=$(git rev-parse refs/remotes/origin/master)\n"
"\tif [ $before != $after ]\n"
"\tthen\n"
"\t\tgit log $before..$after | git shortlog\n"
"\tfi\n"
"\t;;\n"
"*)\n"
"\techo \"usage: $0 origin|test|release\" 1>&2\n"
"\texit 1\n"
"\t;;\n"
"esac\n"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:2345
#, no-wrap
msgid "merge script"
msgstr "merge script"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2347
msgid "# Merge a branch into either the test or release branch"
msgstr "# ブランチをtestブランチまたはreleaseブランチにマージします"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2349
msgid "pname=$0"
msgstr "pname=$0"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2355
#, no-wrap
msgid ""
"usage()\n"
"{\n"
"\techo \"usage: $pname branch test|release\" 1>&2\n"
"\texit 1\n"
"}\n"
msgstr ""
"usage()\n"
"{\n"
"\techo \"usage: $pname branch test|release\" 1>&2\n"
"\texit 1\n"
"}\n"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2360
#, no-wrap
msgid ""
"git show-ref -q --verify -- refs/heads/\"$1\" || {\n"
"\techo \"Can't see branch <$1>\" 1>&2\n"
"\tusage\n"
"}\n"
msgstr ""
"git show-ref -q --verify -- refs/heads/\"$1\" || {\n"
"\techo \"Can't see branch <$1>\" 1>&2\n"
"\tusage\n"
"}\n"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2374
#, no-wrap
msgid ""
"case \"$2\" in\n"
"test|release)\n"
"\tif [ $(git log $2..$1 | wc -c) -eq 0 ]\n"
"\tthen\n"
"\t\techo $1 already merged into $2 1>&2\n"
"\t\texit 1\n"
"\tfi\n"
"\tgit checkout $2 && git pull . $1\n"
"\t;;\n"
"*)\n"
"\tusage\n"
"\t;;\n"
"esac\n"
msgstr ""
"case \"$2\" in\n"
"test|release)\n"
"\tif [ $(git log $2..$1 | wc -c) -eq 0 ]\n"
"\tthen\n"
"\t\techo $1 already merged into $2 1>&2\n"
"\t\texit 1\n"
"\tfi\n"
"\tgit checkout $2 && git pull . $1\n"
"\t;;\n"
"*)\n"
"\tusage\n"
"\t;;\n"
"esac\n"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:2377
#, no-wrap
msgid "status script"
msgstr "status script"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2379
msgid "# report on status of my ia64 Git tree"
msgstr "# report on status of my ia64 Git tree"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2383
msgid "gb=$(tput setab 2)  rb=$(tput setab 1)  restore=$(tput setab 9)"
msgstr "gb=$(tput setab 2)  rb=$(tput setab 1)  restore=$(tput setab 9)"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2389
#, no-wrap
msgid ""
"if [ `git rev-list test..release | wc -c` -gt 0 ]\n"
"then\n"
"\techo $rb Warning: commits in release that are not in test $restore\n"
"\tgit log test..release\n"
"fi\n"
msgstr ""
"if [ `git rev-list test..release | wc -c` -gt 0 ]\n"
"then\n"
"\techo $rb Warning: commits in release that are not in test $restore\n"
"\tgit log test..release\n"
"fi\n"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2396
#, no-wrap
msgid ""
"for branch in `git show-ref --heads | sed 's|^.*/||'`\n"
"do\n"
"\tif [ $branch = test -o $branch = release ]\n"
"\tthen\n"
"\t\tcontinue\n"
"\tfi\n"
msgstr ""
"for branch in `git show-ref --heads | sed 's|^.*/||'`\n"
"do\n"
"\tif [ $branch = test -o $branch = release ]\n"
"\tthen\n"
"\t\tcontinue\n"
"\tfi\n"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2425
#, no-wrap
msgid ""
"\techo -n $gb ======= $branch ====== $restore \" \"\n"
"\tstatus=\n"
"\tfor ref in test release origin/master\n"
"\tdo\n"
"\t\tif [ `git rev-list $ref..$branch | wc -c` -gt 0 ]\n"
"\t\tthen\n"
"\t\t\tstatus=$status${ref:0:1}\n"
"\t\tfi\n"
"\tdone\n"
"\tcase $status in\n"
"\ttrl)\n"
"\t\techo $rb Need to pull into test $restore\n"
"\t\t;;\n"
"\trl)\n"
"\t\techo \"In test\"\n"
"\t\t;;\n"
"\tl)\n"
"\t\techo \"Waiting for linus\"\n"
"\t\t;;\n"
"\t\"\")\n"
"\t\techo $rb All done $restore\n"
"\t\t;;\n"
"\t*)\n"
"\t\techo $rb \"<$status>\" $restore\n"
"\t\t;;\n"
"\tesac\n"
"\tgit log origin/master..$branch | git shortlog\n"
"done\n"
msgstr ""
"\techo -n $gb ======= $branch ====== $restore \" \"\n"
"\tstatus=\n"
"\tfor ref in test release origin/master\n"
"\tdo\n"
"\t\tif [ `git rev-list $ref..$branch | wc -c` -gt 0 ]\n"
"\t\tthen\n"
"\t\t\tstatus=$status${ref:0:1}\n"
"\t\tfi\n"
"\tdone\n"
"\tcase $status in\n"
"\ttrl)\n"
"\t\techo $rb Need to pull into test $restore\n"
"\t\t;;\n"
"\trl)\n"
"\t\techo \"In test\"\n"
"\t\t;;\n"
"\tl)\n"
"\t\techo \"Waiting for linus\"\n"
"\t\t;;\n"
"\t\"\")\n"
"\t\techo $rb All done $restore\n"
"\t\t;;\n"
"\t*)\n"
"\t\techo $rb \"<$status>\" $restore\n"
"\t\t;;\n"
"\tesac\n"
"\tgit log origin/master..$branch | git shortlog\n"
"done\n"

#. type: Title ==
#: ../Documentation-sedout/user-manual.txt:2429
#, no-wrap
msgid "Rewriting history and maintaining patch series"
msgstr "Rewriting history and maintaining patch series"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2434
msgid ""
"Normally commits are only added to a project, never taken away or replaced.  "
"Git is designed with this assumption, and violating it will cause Git's "
"merge machinery (for example) to do the wrong thing."
msgstr ""
"通常、コミットはプロジェクトにのみ追加され、削除または置換されることはありま"
"せん。 Gitはこの仮定に基づいて設計されており、これに違反すると、(たとえ"
"ば、)Gitのマージ機構が間違ったことを実行することになります。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2437
msgid ""
"However, there is a situation in which it can be useful to violate this "
"assumption."
msgstr "しかしながら、この仮定に違反することが役立つ場合があります。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:2439
#, no-wrap
msgid "Creating the perfect patch series"
msgstr "Creating the perfect patch series"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2445
msgid ""
"Suppose you are a contributor to a large project, and you want to add a "
"complicated feature, and to present it to the other developers in a way that "
"makes it easy for them to read your changes, verify that they are correct, "
"and understand why you made each change."
msgstr ""
"例えば、あなたが大規模なプロジェクトの貢献者で、複雑な機能を追加したとき、他"
"の開発者があなたの変更を読んでそれらが正しいかどうかを確認するために、あなた"
"がそれぞれの変更を行った理由を理解しやすい方法で、提示したいとします。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2448
msgid ""
"If you present all of your changes as a single patch (or commit), they may "
"find that it is too much to digest all at once."
msgstr ""
"すべての変更をそれぞれ単一のパッチ(またはコミット)として提示すると、一度にす"
"べてを消化するには多すぎると思える事があります。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2451
msgid ""
"If you present them with the entire history of your work, complete with "
"mistakes, corrections, and dead ends, they may be overwhelmed."
msgstr ""
"あなたの仕事の全履歴を提示し、その間違い・訂正・行き詰まりでいっぱいいっぱい"
"にしたら、それを見る人達は閉口するかもしれません。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2453
msgid "So the ideal is usually to produce a series of patches such that:"
msgstr ""
"したがって、理想なのは、通常、以下のような一連のパッチを作成することです:"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2455
msgid "Each patch can be applied in order."
msgstr "各パッチは順番に適用できます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2458
msgid ""
"Each patch includes a single logical change, together with a message "
"explaining the change."
msgstr ""
"各パッチには、変更を説明するメッセージとともに、単一の論理的な変更が含まれて"
"います。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2462
msgid ""
"No patch introduces a regression: after applying any initial part of the "
"series, the resulting project still compiles and works, and has no bugs that "
"it didn't have before."
msgstr ""
"デグレを引き起こすパッチはありません。シリーズの最初の部分を適用した後でも、"
"結果のプロジェクトはコンパイルおよび動作し、以前にはなかったバグはありませ"
"ん。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2465
msgid ""
"The complete series produces the same end result as your own (probably much "
"messier!) development process did."
msgstr ""
"このシリーズ全体は、あなた自身の(これらのパッチシリーズよりおそらくもっともっ"
"と厄介であった)開発作業で行ったのと同じ最終結果を生み出します。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2469
msgid ""
"We will introduce some tools that can help you do this, explain how to use "
"them, and then explain some of the problems that can arise because you are "
"rewriting history."
msgstr ""
"これを行うのに役立ついくつかのツールを紹介し、それらの使用方法を説明してか"
"ら、履歴を書き換えているために発生する可能性のあるいくつかの問題について説明"
"します。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:2471
#, no-wrap
msgid "Keeping a patch series up to date using git rebase"
msgstr "Keeping a patch series up to date using git rebase"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2475
msgid ""
"Suppose that you create a branch `mywork` on a remote-tracking branch "
"`origin`, and create some commits on top of it:"
msgstr ""
"リモート追跡ブランチ `origin` にブランチ `mywork` を作成し、その先頭にいくつ"
"かのコミットを作成するとします:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2483
#, no-wrap
msgid ""
"$ git switch -c mywork origin\n"
"$ vi file.txt\n"
"$ git commit\n"
"$ vi otherfile.txt\n"
"$ git commit\n"
"...\n"
msgstr ""
"$ git switch -c mywork origin\n"
"$ vi file.txt\n"
"$ git commit\n"
"$ vi otherfile.txt\n"
"$ git commit\n"
"...\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2487
msgid ""
"You have performed no merges into mywork, so it is just a simple linear "
"sequence of patches on top of `origin`:"
msgstr ""
"myworkへのマージは実行されていないため、 `origin` の先頭にあるパッチの単純な"
"線形シーケンスです:"

#. type: delimited block .
#: ../Documentation-sedout/user-manual.txt:2492
#, no-wrap
msgid ""
" o--o--O <-- origin\n"
"        \\\n"
"\t a--b--c <-- mywork\n"
msgstr ""
" o--o--O <-- origin\n"
"        \\\n"
"\t a--b--c <-- mywork\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2496
msgid ""
"Some more interesting work has been done in the upstream project, and "
"`origin` has advanced:"
msgstr ""
"上流のプロジェクトでさらに興味深い作業が行われ、 `origin` が前進歩しました:"

#. type: delimited block .
#: ../Documentation-sedout/user-manual.txt:2501
#, no-wrap
msgid ""
" o--o--O--o--o--o <-- origin\n"
"        \\\n"
"         a--b--c <-- mywork\n"
msgstr ""
" o--o--O--o--o--o <-- origin\n"
"        \\\n"
"         a--b--c <-- mywork\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2505
msgid ""
"At this point, you could use `pull` to merge your changes back in; the "
"result would create a new merge commit, like this:"
msgstr ""
"この時点で、 `pull` を使用してあなたの変更をマージして戻すことができます。 そ"
"の結果、次のような新しいマージコミットが作成されます:"

#. type: delimited block .
#: ../Documentation-sedout/user-manual.txt:2510
#, no-wrap
msgid ""
" o--o--O--o--o--o <-- origin\n"
"        \\        \\\n"
"         a--b--c--m <-- mywork\n"
msgstr ""
" o--o--O--o--o--o <-- origin\n"
"        \\        \\\n"
"         a--b--c--m <-- mywork\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2515
msgid ""
"However, if you prefer to keep the history in mywork a simple series of "
"commits without any merges, you may instead choose to use linkgit:git-"
"rebase[1]:"
msgstr ""
"しかしながら、myworkの履歴をマージせずに単純な一連のコミットを保持したい場合"
"は、代わりに linkgit:git-rebase[1] を使用することを選択できます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2519
#, no-wrap
msgid ""
"$ git switch mywork\n"
"$ git rebase origin\n"
msgstr ""
"$ git switch mywork\n"
"$ git rebase origin\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2525
msgid ""
"This will remove each of your commits from mywork, temporarily saving them "
"as patches (in a directory named `.git/rebase-apply`), update mywork to "
"point at the latest version of origin, then apply each of the saved patches "
"to the new mywork.  The result will look like:"
msgstr ""
"これにより、各コミットがmyworkから削除され、一時的にパッチとして( `.git/"
"rebase-apply` という名前のディレクトリに)保存され、最新バージョンのoriginを指"
"すようにmyworkが更新され、保存された各パッチが新しいmyworkに適用されます。結"
"果は以下のようになります:"

#. type: delimited block .
#: ../Documentation-sedout/user-manual.txt:2531
#, no-wrap
msgid ""
" o--o--O--o--o--o <-- origin\n"
"\t\t \\\n"
"\t\t  a'--b'--c' <-- mywork\n"
msgstr ""
" o--o--O--o--o--o <-- origin\n"
"\t\t \\\n"
"\t\t  a'--b'--c' <-- mywork\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2537
msgid ""
"In the process, it may discover conflicts.  In that case it will stop and "
"allow you to fix the conflicts; after fixing conflicts, use `git add` to "
"update the index with those contents, and then, instead of running `git "
"commit`, just run"
msgstr ""
"その過程で、競合が見つかる可能性があります。その場合、rebaseは停止し、競合を"
"修正できるようになります。 競合を修正した後は、それらのコンテンツに対して "
"`git add` を使用してインデックスを更新します。そして ` git commit` を実行する"
"代わりに以下を実行します:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2540
#, no-wrap
msgid "$ git rebase --continue\n"
msgstr "$ git rebase --continue\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2543
msgid "and Git will continue applying the rest of the patches."
msgstr "そうすると、Gitは残りのパッチを適用し続けます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2546
msgid ""
"At any point you may use the `--abort` option to abort this process and "
"return mywork to the state it had before you started the rebase:"
msgstr ""
"あなたは、いつでも `--abort` オプションを使用してこの作業を中止し、リベースを"
"開始する前の状態にmyworkを戻すことができます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2549
#, no-wrap
msgid "$ git rebase --abort\n"
msgstr "$ git rebase --abort\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2556
msgid ""
"If you need to reorder or edit a number of commits in a branch, it may be "
"easier to use `git rebase -i`, which allows you to reorder and squash "
"commits, as well as marking them for individual editing during the rebase.  "
"See <<interactive-rebase>> for details, and <<reordering-patch-series>> for "
"alternatives."
msgstr ""
"ブランチ内の多数のコミットを並べ替えたり編集したりする必要がある場合は、 "
"`git rebase -i` を使用する方が簡単な場合があります。これにより、コミットを並"
"べ替えたり押しつぶしたり(squash)、リベース中に個別に編集できるようにマークを"
"付けたりできます。詳細については <<interactive-rebase>> を、代替案については "
"<<reordering-patch-series>> を参照してください。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:2558
#, no-wrap
msgid "Rewriting a single commit"
msgstr "Rewriting a single commit"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2562
msgid ""
"We saw in <<fixing-a-mistake-by-rewriting-history>> that you can replace the "
"most recent commit using"
msgstr ""
"<<fixing-a-mistake-by-rewriting-history>>で、以下のようにして最新のコミットを"
"置き換えることができることを確認しました"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2571
msgid ""
"which will replace the old commit by a new commit incorporating your "
"changes, giving you a chance to edit the old commit message first.  This is "
"useful for fixing typos in your last commit, or for adjusting the patch "
"contents of a poorly staged commit."
msgstr ""
"これにより、古いコミットが変更を組み込んだ新しいコミットに置き換えられ、最初"
"に古いコミットメッセージを編集する機会が与えられます。これは、最後のコミット"
"でのタイプミスを修正したり、ステージングが不十分なコミットのパッチの内容を調"
"整したりする場合に役立ちます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2574
msgid ""
"If you need to amend commits from deeper in your history, you can use "
"<<interactive-rebase,interactive rebase's `edit` instruction>>."
msgstr ""
"履歴のより深いところのコミットを修正する必要がある場合は、<<interactive-"
"rebase,対話的rebaseの「edit」命令>>を使用できます。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:2576
#, no-wrap
msgid "Reordering or selecting from a patch series"
msgstr "Reordering or selecting from a patch series"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2581
msgid ""
"Sometimes you want to edit a commit deeper in your history.  One approach is "
"to use `git format-patch` to create a series of patches and then reset the "
"state to before the patches:"
msgstr ""
"時々、あなたはあなたの歴史のより深いところにコミットを編集したいです。 1つの"
"アプローチとしては、 `git format-patch` を使用して一連のパッチを作成し、パッ"
"チ適用前の状態にリセットすることです:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2585
#, no-wrap
msgid ""
"$ git format-patch origin\n"
"$ git reset --hard origin\n"
msgstr ""
"$ git format-patch origin\n"
"$ git reset --hard origin\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2589
msgid ""
"Then modify, reorder, or eliminate patches as needed before applying them "
"again with linkgit:git-am[1]:"
msgstr ""
"そして linkgit:git-am[1] を使用してパッチを再度適用する前に、必要に応じてパッ"
"チを変更、並べ替え、または削除します:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2592
#, no-wrap
msgid "$ git am *.patch\n"
msgstr "$ git am *.patch\n"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:2595
#, no-wrap
msgid "Using interactive rebases"
msgstr "Using interactive rebases"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2600
msgid ""
"You can also edit a patch series with an interactive rebase.  This is the "
"same as <<reordering-patch-series,reordering a patch series using `format-"
"patch`>>, so use whichever interface you like best."
msgstr ""
"対話的なリベースで一連のパッチを編集することもできます。 これは <<reordering-"
"patch-series,`format-patch` を使用してパッチシリーズを並べ替える>>のと同じな"
"ので、あなたの最も好きなインターフェースを使用してください。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2603
msgid ""
"Rebase your current HEAD on the last commit you want to retain as-is.  For "
"example, if you want to reorder the last 5 commits, use:"
msgstr ""
"現在のHEADを、そのまま保持する最後のコミットに基づいてリベースします。たとえ"
"ば、最後の5つのコミットを並べ替える場合は、以下を使用します:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2606
#, no-wrap
msgid "$ git rebase -i HEAD~5\n"
msgstr "$ git rebase -i HEAD~5\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2610
msgid ""
"This will open your editor with a list of steps to be taken to perform your "
"rebase."
msgstr ""
"これにより、リベースを実行するために実行する手順のリストが表示されたエディタ"
"が開きます。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2615
#, no-wrap
msgid ""
"pick deadbee The oneline of this commit\n"
"pick fa1afe1 The oneline of the next commit\n"
"...\n"
msgstr ""
"pick deadbee The oneline of this commit\n"
"pick fa1afe1 The oneline of the next commit\n"
"...\n"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2633
#, no-wrap
msgid ""
"# Rebase c0ffeee..deadbee onto c0ffeee\n"
"#\n"
"# Commands:\n"
"#  p, pick = use commit\n"
"#  r, reword = use commit, but edit the commit message\n"
"#  e, edit = use commit, but stop for amending\n"
"#  s, squash = use commit, but meld into previous commit\n"
"#  f, fixup = like \"squash\", but discard this commit's log message\n"
"#  x, exec = run command (the rest of the line) using shell\n"
"#\n"
"# These lines can be re-ordered; they are executed from top to bottom.\n"
"#\n"
"# If you remove a line here THAT COMMIT WILL BE LOST.\n"
"#\n"
"# However, if you remove everything, the rebase will be aborted.\n"
"#\n"
"# Note that empty commits are commented out\n"
msgstr ""
"# Rebase c0ffeee..deadbee onto c0ffeee\n"
"#\n"
"# Commands:\n"
"#  p, pick = use commit\n"
"#  r, reword = use commit, but edit the commit message\n"
"#  e, edit = use commit, but stop for amending\n"
"#  s, squash = use commit, but meld into previous commit\n"
"#  f, fixup = like \"squash\", but discard this commit's log message\n"
"#  x, exec = run command (the rest of the line) using shell\n"
"#\n"
"# These lines can be re-ordered; they are executed from top to bottom.\n"
"#\n"
"# If you remove a line here THAT COMMIT WILL BE LOST.\n"
"#\n"
"# However, if you remove everything, the rebase will be aborted.\n"
"#\n"
"# Note that empty commits are commented out\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2639
msgid ""
"As explained in the comments, you can reorder commits, squash them together, "
"edit commit messages, etc. by editing the list.  Once you are satisfied, "
"save the list and close your editor, and the rebase will begin."
msgstr ""
"コメントで説明されているように、リストを編集することで、コミットの並べ替え、"
"まとめ、コミットメッセージの編集などを行うことができます。満足したら、リスト"
"を保存してエディタを閉じると、リベースが開始されます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2647
msgid ""
"The rebase will stop where `pick` has been replaced with `edit` or when a "
"step in the list fails to mechanically resolve conflicts and needs your "
"help.  When you are done editing and/or resolving conflicts you can continue "
"with `git rebase --continue`.  If you decide that things are getting too "
"hairy, you can always bail out with `git rebase --abort`.  Even after the "
"rebase is complete, you can still recover the original branch by using the "
"<<reflogs,reflog>>."
msgstr ""
"リベースは、 `pick` が `edit` に置き換えられた場合、またはリスト内のステップ"
"が競合を機械的に解決できず、あなたの助けが必要な場合に停止します。競合の編集"
"や解決が完了したら、 `git rebase --continue` で続行できます。途中で物事があま"
"りにもスパゲッティ(hairy)になっていると判断した場合は、いつでも `git rebase "
"--abort` で救済することができます。リベースが完了した後でも、<<reflogs,"
"reflog>>を使用して、元のブランチを回復できます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2650
msgid ""
"For a more detailed discussion of the procedure and additional tips, see the "
"\"INTERACTIVE MODE\" section of linkgit:git-rebase[1]."
msgstr ""
"手順と追加のヒントの詳細については、 linkgit:git-rebase[1] の「INTERACTIVE "
"MODE」セクションを参照してください。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:2652
#, no-wrap
msgid "Other tools"
msgstr "Other tools"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2657
msgid ""
"There are numerous other tools, such as StGit, which exist for the purpose "
"of maintaining a patch series.  These are outside of the scope of this "
"manual."
msgstr ""
"パッチシリーズを維持する目的で存在するStGitなど、他のツールは多数ありますが、"
"それらはこのマニュアルの範囲外です。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:2659
#, no-wrap
msgid "Problems with rewriting history"
msgstr "履歴の書き換えに関する問題"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2664
msgid ""
"The primary problem with rewriting the history of a branch has to do with "
"merging.  Suppose somebody fetches your branch and merges it into their "
"branch, with a result something like this:"
msgstr ""
"ブランチの履歴を書き換える際の主な問題は、マージに関係しています。誰かがあな"
"たのブランチをフェッチしてブランチにマージすると、以下のような結果になります:"

#. type: delimited block .
#: ../Documentation-sedout/user-manual.txt:2669
#, no-wrap
msgid ""
" o--o--O--o--o--o <-- origin\n"
"        \\        \\\n"
"         t--t--t--m <-- their branch:\n"
msgstr ""
" o--o--O--o--o--o <-- origin\n"
"        \\        \\\n"
"         t--t--t--m <-- their branch:\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2672
msgid "Then suppose you modify the last three commits:"
msgstr "次に、あなたが最後の3つのコミットを変更するとします:"

#. type: delimited block .
#: ../Documentation-sedout/user-manual.txt:2677
#, no-wrap
msgid ""
"\t o--o--o <-- new head of origin\n"
"\t/\n"
" o--o--O--o--o--o <-- old head of origin\n"
msgstr ""
"\t o--o--o <-- new head of origin\n"
"\t/\n"
" o--o--O--o--o--o <-- old head of origin\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2681
msgid ""
"If we examined all this history together in one repository, it will look "
"like:"
msgstr ""
"このすべての履歴を1つのリポジトリにまとめて見ると、以下のようになります:"

#. type: delimited block .
#: ../Documentation-sedout/user-manual.txt:2688
#, no-wrap
msgid ""
"\t o--o--o <-- new head of origin\n"
"\t/\n"
" o--o--O--o--o--o <-- old head of origin\n"
"        \\        \\\n"
"         t--t--t--m <-- their branch:\n"
msgstr ""
"\t o--o--o <-- new head of origin\n"
"\t/\n"
" o--o--O--o--o--o <-- old head of origin\n"
"        \\        \\\n"
"         t--t--t--m <-- their branch:\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2697
msgid ""
"Git has no way of knowing that the new head is an updated version of the old "
"head; it treats this situation exactly the same as it would if two "
"developers had independently done the work on the old and new heads in "
"parallel.  At this point, if someone attempts to merge the new head in to "
"their branch, Git will attempt to merge together the two (old and new) lines "
"of development, instead of trying to replace the old by the new.  The "
"results are likely to be unexpected."
msgstr ""
"Gitには、新しいヘッドが古いヘッドの更新バージョンであることを知る方法がありま"
"せん。この状況は、2人の開発者が独立して新旧のヘッドで並行して作業を行った場合"
"とまったく同じように扱われます。この時点で、誰かが新しいヘッドをブランチに"
"マージしようとすると、Gitは古いものを新しいものに置き換えようとするのではな"
"く、2つの(古いものと新しい)開発ラインをマージしようとします。結果は予想外の可"
"能性があります。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2702
msgid ""
"You may still choose to publish branches whose history is rewritten, and it "
"may be useful for others to be able to fetch those branches in order to "
"examine or test them, but they should not attempt to pull such branches into "
"their own work."
msgstr ""
"あなたは、履歴が書き換えられたブランチを公開することを選択することもできま"
"す。他の人がそれらのブランチを調べたりテストしたりするためにそれらのブランチ"
"をフェッチできると便利な場合がありますが、そのようなブランチを自分の作業に引"
"き込もうとしないでください。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2705
msgid ""
"For true distributed development that supports proper merging, published "
"branches should never be rewritten."
msgstr ""
"適切なマージをサポートする、本当に分散開発を行っている場合、公開されたブラン"
"チを書き直してはいけません。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:2707
#, no-wrap
msgid "Why bisecting merge commits can be harder than bisecting linear history"
msgstr "なぜマージコミットをbisectすることが線形履歴をbisectするよりも難しい場合があるのか"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2713
msgid ""
"The linkgit:git-bisect[1] command correctly handles history that includes "
"merge commits.  However, when the commit that it finds is a merge commit, "
"the user may need to work harder than usual to figure out why that commit "
"introduced a problem."
msgstr ""
"linkgit:git-bisect[1] コマンドは、マージコミットを含む履歴を正しく処理しま"
"す。ただし、検出されたコミットがマージコミットである場合、ユーザーは、そのコ"
"ミットが問題を引き起こした理由を理解するために、通常よりも慎重に作業する事を"
"心がけて下さい。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2715
msgid "Imagine this history:"
msgstr "以下の履歴があるとします:"

#. type: delimited block .
#: ../Documentation-sedout/user-manual.txt:2720
#, no-wrap
msgid ""
"      ---Z---o---X---...---o---A---C---D\n"
"          \\                       /\n"
"           o---o---Y---...---o---B\n"
msgstr ""
"      ---Z---o---X---...---o---A---C---D\n"
"          \\                       /\n"
"           o---o---Y---...---o---B\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2728
msgid ""
"Suppose that on the upper line of development, the meaning of one of the "
"functions that exists at Z is changed at commit X.  The commits from Z "
"leading to A change both the function's implementation and all calling sites "
"that exist at Z, as well as new calling sites they add, to be consistent.  "
"There is no bug at A."
msgstr ""
"開発の(図の)上側のラインで、コミットXでZに存在する関数の1つの意味が変更された"
"とします。AにつながるZからのコミットは、関数の実装とZに存在するすべての呼び出"
"し側の両方を変更し、一貫性を保つために、追加するする新しい呼び出し側も同様に"
"します。Aにはバグはありません。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2734
msgid ""
"Suppose that in the meantime on the lower line of development somebody adds "
"a new calling site for that function at commit Y.  The commits from Z "
"leading to B all assume the old semantics of that function and the callers "
"and the callee are consistent with each other.  There is no bug at B, either."
msgstr ""
"その間に、開発の(図の)下側のラインで、誰かがコミットYでその関数の新しい呼び出"
"し側を追加するとします。BにつながるZからのコミットはすべて、その関数の古いセ"
"マンティクスを想定しており、呼び出し元と呼び出し先は互いに一貫しています。Bに"
"もバグはありません。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2737
msgid ""
"Suppose further that the two development lines merge cleanly at C, so no "
"conflict resolution is required."
msgstr ""
"さらに、この上下2つの開発ラインがCできれいにマージされるため、競合の解決は必"
"要ないとします。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2744
msgid ""
"Nevertheless, the code at C is broken, because the callers added on the "
"lower line of development have not been converted to the new semantics "
"introduced on the upper line of development.  So if all you know is that D "
"is bad, that Z is good, and that linkgit:git-bisect[1] identifies C as the "
"culprit, how will you figure out that the problem is due to this change in "
"semantics?"
msgstr ""
"それにもかかわらず、開発の下側のラインで追加された呼び出し側は、開発の上側ラ"
"インに導入された新しいセマンティクスに変換されていないため、Cのコードは壊れて"
"います。したがって、Dがbad、Zがgoodで、linkgit:git-bisect[1] がCを原因として"
"特定していることだけを知っている場合、あなたは問題がこのセマンティクスの変更"
"によるものであることをどのようにして解き明かしますか？"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2754
msgid ""
"When the result of a `git bisect` is a non-merge commit, you should normally "
"be able to discover the problem by examining just that commit.  Developers "
"can make this easy by breaking their changes into small self-contained "
"commits.  That won't help in the case above, however, because the problem "
"isn't obvious from examination of any single commit; instead, a global view "
"of the development is required.  To make matters worse, the change in "
"semantics in the problematic function may be just one small part of the "
"changes in the upper line of development."
msgstr ""
"`git bisect` の結果が非マージコミットである場合、通常はそのコミットだけを調べ"
"ることで問題を発見できるはずです。開発者は、変更を小さな自己完結型のコミット"
"に分割することで、これを簡単に行うことができます。 ただし、上記の場合は、単一"
"のコミットを調べても問題が明らかではないため、これは役に立ちません。代わり"
"に、開発の全体的な俯瞰が必要です。さらに悪いことに、問題のある関数のセマン"
"ティクスの変更は、開発の上側ラインの変更のほんの一部にすぎない可能性がありま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2758
msgid ""
"On the other hand, if instead of merging at C you had rebased the history "
"between Z to B on top of A, you would have gotten this linear history:"
msgstr ""
"一方、Cでマージする代わりに、Aの上にZからBまでの履歴をリベースした場合、以下"
"の線形履歴が得られます:"

#. type: delimited block .
#: ../Documentation-sedout/user-manual.txt:2761
#, no-wrap
msgid "    ---Z---o---X--...---o---A---o---o---Y*--...---o---B*--D*\n"
msgstr "    ---Z---o---X--...---o---A---o---o---Y*--...---o---B*--D*\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2765
msgid ""
"Bisecting between Z and D* would hit a single culprit commit Y*, and "
"understanding why Y* was broken would probably be easier."
msgstr ""
"ZとD*の間のbisectは、単一の犯人コミットY*にヒットし、Y*が壊れた理由を理解する"
"のはおそらく簡単でしょう。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2770
msgid ""
"Partly for this reason, many experienced Git users, even when working on an "
"otherwise merge-heavy project, keep the history linear by rebasing against "
"the latest upstream version before publishing."
msgstr ""
"多くの経験豊富なGitユーザーが、他の方法でマージが多いプロジェクトで作業してい"
"る場合でも、公開する前に最新のアップストリームバージョンにリベースすることで"
"履歴を線形に保つのは、これが理由の一つです。"

#. type: Title ==
#: ../Documentation-sedout/user-manual.txt:2772
#, no-wrap
msgid "Advanced branch management"
msgstr "Advanced branch management"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:2775
#, no-wrap
msgid "Fetching individual branches"
msgstr "Fetching individual branches"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2780
msgid ""
"Instead of using linkgit:git-remote[1], you can also choose just to update "
"one branch at a time, and to store it locally under an arbitrary name:"
msgstr ""
"linkgit:git-remote[1] を使用する代わりに、一度に1つのブランチを更新し、それを"
"任意の名前でローカルに保存することもできます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2783
#, no-wrap
msgid "$ git fetch origin todo:my-todo-work\n"
msgstr "$ git fetch origin todo:my-todo-work\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2789
msgid ""
"The first argument, `origin`, just tells Git to fetch from the repository "
"you originally cloned from.  The second argument tells Git to fetch the "
"branch named `todo` from the remote repository, and to store it locally "
"under the name `refs/heads/my-todo-work`."
msgstr ""
"最初の引数 `origin` は、最初にクローンを作成したリポジトリからフェッチするよ"
"うにGitに指示するだけのものです。2番目の引数は、Gitに `todo` という名前のブラ"
"ンチをリモートリポジトリからフェッチし、それを `refs/heads/my-todo-work` とい"
"う名前でローカルに保存するように指示します。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2791
msgid "You can also fetch branches from other repositories; so"
msgstr "以下のように、他のリポジトリからブランチをフェッチすることもできます。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2794
#, no-wrap
msgid "$ git fetch git://example.com/proj.git master:example-master\n"
msgstr "$ git fetch git://example.com/proj.git master:example-master\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2801
msgid ""
"will create a new branch named `example-master` and store in it the branch "
"named `master` from the repository at the given URL.  If you already have a "
"branch named example-master, it will attempt to <<fast-forwards,fast-"
"forward>> to the commit given by example.com's master branch.  In more "
"detail:"
msgstr ""
"これは `example-master` という名前の新しいブランチを作成し、指定されたURLのリ"
"ポジトリの `master` という名前のブランチをその中に保存します。`example-"
"master` という名前のブランチがすでにある場合は、 `example.com` の masterブラ"
"ンチによって指定されたコミットに<<fast-forwards,fast-forward>>しようとしま"
"す。これについて詳細は次のセクションを参照下さい:"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:2803
#, no-wrap
msgid "git fetch and fast-forwards"
msgstr "git fetch and fast-forwards"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2810
msgid ""
"In the previous example, when updating an existing branch, `git fetch` "
"checks to make sure that the most recent commit on the remote branch is a "
"descendant of the most recent commit on your copy of the branch before "
"updating your copy of the branch to point at the new commit.  Git calls this "
"process a <<fast-forwards,fast-forward>>."
msgstr ""
"前の例では、既存のブランチを更新するときに、 `git fetch` は、新しいコミットを"
"指すようにブランチのコピーを更新する前に、リモートブランチの最新のコミットが"
"ブランチのコピーの最新のコミットの子孫であることを確認します。Gitはこのプロセ"
"スを<<fast-forwards,fast-forward>>と呼んでいます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2812
msgid "A fast-forward looks something like this:"
msgstr "fast-forwardになるのは以下のような感じの場合です:"

#. type: delimited block .
#: ../Documentation-sedout/user-manual.txt:2817
#, no-wrap
msgid ""
" o--o--o--o <-- old head of the branch\n"
"           \\\n"
"            o--o--o <-- new head of the branch\n"
msgstr ""
" o--o--o--o <-- old head of the branch\n"
"           \\\n"
"            o--o--o <-- new head of the branch\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2824
msgid ""
"In some cases it is possible that the new head will *not* actually be a "
"descendant of the old head.  For example, the developer may have realized a "
"serious mistake was made and decided to backtrack, resulting in a situation "
"like:"
msgstr ""
"場合によっては、新しいヘッドが実際には古いヘッドの子孫ではない可能性がありま"
"す。たとえば、開発者は重大なミスがあったことに気づき、バックトラックすること"
"を決定した可能性があり、その結果、以下のような状況になります:"

#. type: delimited block .
#: ../Documentation-sedout/user-manual.txt:2829
#, no-wrap
msgid ""
" o--o--o--o--a--b <-- old head of the branch\n"
"           \\\n"
"            o--o--o <-- new head of the branch\n"
msgstr ""
" o--o--o--o--a--b <-- old head of the branch\n"
"           \\\n"
"            o--o--o <-- new head of the branch\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2832
msgid "In this case, `git fetch` will fail, and print out a warning."
msgstr "この場合、 `git fetch` は失敗し、警告を出力します。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2838
msgid ""
"In that case, you can still force Git to update to the new head, as "
"described in the following section.  However, note that in the situation "
"above this may mean losing the commits labeled `a` and `b`, unless you've "
"already created a reference of your own pointing to them."
msgstr ""
"その場合でも、次のセクションで説明するように、Gitを強制的に新しいヘッドに更新"
"することができます。 ただし、上記の状況では、それらを指す独自の参照をすでに作"
"成している場合を除き、「a」や「b」というラベルの付いたコミットが失われる可能"
"性があることに注意してください。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:2840
#, no-wrap
msgid "Forcing git fetch to do non-fast-forward updates"
msgstr "Forcing git fetch to do non-fast-forward updates"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2844
msgid ""
"If git fetch fails because the new head of a branch is not a descendant of "
"the old head, you may force the update with:"
msgstr ""
"ブランチの新しいヘッドが古いヘッドの子孫ではないためにgit fetchが失敗した場合"
"は、以下のように更新を強制できます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2847
#, no-wrap
msgid "$ git fetch git://example.com/proj.git +master:refs/remotes/example/master\n"
msgstr "$ git fetch git://example.com/proj.git +master:refs/remotes/example/master\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2851
msgid ""
"Note the addition of the `+` sign.  Alternatively, you can use the `-f` flag "
"to force updates of all the fetched branches, as in:"
msgstr ""
"注意: `+` 記号が追加されていることに注意してください。または、以下のように、 "
"`-f` フラグを使用して、フェッチされたすべてのブランチを強制的に更新することも"
"できます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2854
#, no-wrap
msgid "$ git fetch -f origin\n"
msgstr "$ git fetch -f origin\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2858
msgid ""
"Be aware that commits that the old version of example/master pointed at may "
"be lost, as we saw in the previous section."
msgstr ""
"これは、前のセクションで述べたとおり、ポイントされた古いバージョンのexample/"
"masterが失われる可能性があることに注意してください。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:2860
#, no-wrap
msgid "Configuring remote-tracking branches"
msgstr "Configuring remote-tracking branches"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2866
msgid ""
"We saw above that `origin` is just a shortcut to refer to the repository "
"that you originally cloned from.  This information is stored in Git "
"configuration variables, which you can see using linkgit:git-config[1]:"
msgstr ""
"前述したように、 `origin` は、最初にクローンを作成したリポジトリを参照するた"
"めのショートカットにすぎません。この情報はGit構成変数に保存され、 linkgit:"
"git-config[1] を使用して確認できます。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2876
#, no-wrap
msgid ""
"$ git config -l\n"
"core.repositoryformatversion=0\n"
"core.filemode=true\n"
"core.logallrefupdates=true\n"
"remote.origin.url=git://git.kernel.org/pub/scm/git/git.git\n"
"remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*\n"
"branch.master.remote=origin\n"
"branch.master.merge=refs/heads/master\n"
msgstr ""
"$ git config -l\n"
"core.repositoryformatversion=0\n"
"core.filemode=true\n"
"core.logallrefupdates=true\n"
"remote.origin.url=git://git.kernel.org/pub/scm/git/git.git\n"
"remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*\n"
"branch.master.remote=origin\n"
"branch.master.merge=refs/heads/master\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2880
msgid ""
"If there are other repositories that you also use frequently, you can create "
"similar configuration options to save typing; for example,"
msgstr ""
"頻繁に使用する他のリポジトリがある場合、あなたは同様の構成オプションを作成し"
"て入力を省略できます。例えば、"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2883
#, no-wrap
msgid "$ git remote add example git://example.com/proj.git\n"
msgstr "$ git remote add example git://example.com/proj.git\n"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2891
#, no-wrap
msgid ""
"[remote \"example\"]\n"
"\turl = git://example.com/proj.git\n"
"\tfetch = +refs/heads/*:refs/remotes/example/*\n"
msgstr ""
"[remote \"example\"]\n"
"\turl = git://example.com/proj.git\n"
"\tfetch = +refs/heads/*:refs/remotes/example/*\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2895
msgid ""
"Also note that the above configuration can be performed by directly editing "
"the file `.git/config` instead of using linkgit:git-remote[1]."
msgstr ""
"注意: 上記の設定は、 linkgit:git-remote[1] を使用する代わりに、ファイル `."
"git/config` を直接編集することでも機能することに注意してください。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2898
msgid ""
"After configuring the remote, the following three commands will do the same "
"thing:"
msgstr "リモートを構成した後、以下の3つのコマンドは同じことを行います:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2903
#, no-wrap
msgid ""
"$ git fetch git://example.com/proj.git +refs/heads/*:refs/remotes/example/*\n"
"$ git fetch example +refs/heads/*:refs/remotes/example/*\n"
"$ git fetch example\n"
msgstr ""
"$ git fetch git://example.com/proj.git +refs/heads/*:refs/remotes/example/*\n"
"$ git fetch example +refs/heads/*:refs/remotes/example/*\n"
"$ git fetch example\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2908
msgid ""
"See linkgit:git-config[1] for more details on the configuration options "
"mentioned above and linkgit:git-fetch[1] for more details on the refspec "
"syntax."
msgstr ""
"上記の構成オプションの詳細については linkgit:git-config[1] を、refspec構文の"
"詳細については linkgit:git-fetch[1] を参照してください。"

#. type: Title ==
#: ../Documentation-sedout/user-manual.txt:2911
#, no-wrap
msgid "Git concepts"
msgstr "Gitの概念"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2916
msgid ""
"Git is built on a small number of simple but powerful ideas.  While it is "
"possible to get things done without understanding them, you will find Git "
"much more intuitive if you do."
msgstr ""
"Gitは、少数のシンプルで強力なアイデアに基づいて構築されています。これらのアイ"
"デアを理解しなくても物事を成し遂げることは可能ですが、理解した上での方がGitを"
"はるかに直感的に理解できるようになります。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2919
msgid ""
"We start with the most important, the <<def_object_database,object "
"database>> and the <<def_index,index>>."
msgstr ""
"私達は、最も重要な<<def_object_database,オブジェクト データベース>>と"
"<<def_index,インデックス>>から始めることにします。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:2921
#, no-wrap
msgid "The Object Database"
msgstr "The Object Database"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2932
msgid ""
"We already saw in <<understanding-commits>> that all commits are stored "
"under a 40-digit \"object name\".  In fact, all the information needed to "
"represent the history of a project is stored in objects with such names.  In "
"each case the name is calculated by taking the SHA-1 hash of the contents of "
"the object.  The SHA-1 hash is a cryptographic hash function.  What that "
"means to us is that it is impossible to find two different objects with the "
"same name.  This has a number of advantages; among others:"
msgstr ""
"私達はすでに<<understanding-commits>>で、すべてのコミットが40桁の「オブジェク"
"ト名」で保存されているのを見ました。実際、プロジェクトの履歴を表すために必要"
"なすべての情報は、そのような名前のオブジェクトに格納されています。いずれの場"
"合も、名前はオブジェクトのコンテンツのSHA-1ハッシュを使用して計算されます。"
"SHA-1ハッシュは暗号化ハッシュ関数です。それが私たちにとって意味することは、同"
"じ名前の2つの異なるオブジェクトを見つけることは不可能であるということです。こ"
"れには多くの利点があります:"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2935
msgid ""
"Git can quickly determine whether two objects are identical or not, just by "
"comparing names."
msgstr ""
"Gitは、名前を比較するだけで、2つのオブジェクトが同一であるかどうかをすばやく"
"判断できます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2938
msgid ""
"Since object names are computed the same way in every repository, the same "
"content stored in two repositories will always be stored under the same name."
msgstr ""
"オブジェクト名はすべてのリポジトリで同じ方法で計算されるため、2つのリポジトリ"
"に保存されている同じコンテンツ(same content)は常に同じ名前(same name)で保存さ"
"れます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2940
msgid ""
"Git can detect errors when it reads an object, by checking that the object's "
"name is still the SHA-1 hash of its contents."
msgstr ""
"Gitは、オブジェクトの名前がまだその内容のSHA-1ハッシュであるかどうかを確認す"
"ることによって、オブジェクトを読み取るときにエラーを検出できます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2943
msgid ""
"(See <<object-details>> for the details of the object formatting and SHA-1 "
"calculation.)"
msgstr ""
"(オブジェクトのフォーマットとSHA-1計算の詳細については、<<object-details>>を"
"参照してください。)"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2946
msgid ""
"There are four different types of objects: \"blob\", \"tree\", \"commit\", "
"and \"tag\"."
msgstr ""
"オブジェクトには \"blob\"、\"tree\"、\"commit\"、\"tag\" の4種類があります。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2948
msgid "A <<def_blob_object,\"blob\" object>> is used to store file data."
msgstr ""
"<<def_blob_object,ブロブ オブジェクト(\"blob\" object)>>は、ファイルデータを"
"格納するために使用されます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2951
msgid ""
"A <<def_tree_object,\"tree\" object>> ties one or more \"blob\" objects into "
"a directory structure. In addition, a tree object can refer to other tree "
"objects, thus creating a directory hierarchy."
msgstr ""
"<<def_tree_object,ツリーオブジェクト(\"tree\" object)>>は、1つ以上のブロブオ"
"ブジェクトをディレクトリ構造に結び付けます。さらに、ツリーオブジェクトは他の"
"ツリーオブジェクトを参照できるため、ディレクトリ階層が作成されます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2957
msgid ""
"A <<def_commit_object,\"commit\" object>> ties such directory hierarchies "
"together into a <<def_DAG,directed acyclic graph>> of revisions--each commit "
"contains the object name of exactly one tree designating the directory "
"hierarchy at the time of the commit. In addition, a commit refers to "
"\"parent\" commit objects that describe the history of how we arrived at "
"that directory hierarchy."
msgstr ""
"<<def_commit_object,コミットオブジェクト(\"commit\" object)>>は、そのような"
"ディレクトリ階層をリビジョンの<<def_DAG,有向非巡回グラフ(directed acyclic "
"graph)>>に結び付けます。各コミットには、その時点でディレクトリ階層を指定する"
"正確に1つのツリーのオブジェクト名が含まれます。さらにコミットは、そのディレク"
"トリ階層に到達した方法の履歴を説明する「親」コミットオブジェクトを参照しま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2961
msgid ""
"A <<def_tag_object,\"tag\" object>> symbolically identifies and can be used "
"to sign other objects. It contains the object name and type of another "
"object, a symbolic name (of course!) and, optionally, a signature."
msgstr ""
"<<def_tag_object,タグオブジェクト(\"tag\" object)>>はシンボリックに識別を行"
"い、他のオブジェクトに署名するために使用できます。 これには、オブジェクト名と"
"別のオブジェクトのタイプ、（もちろん）シンボリック名、およびオプションで署名"
"(signature)が含まれます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2963
msgid "The object types in some more detail:"
msgstr "オブジェクトタイプの詳細:"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:2965
#, no-wrap
msgid "Commit Object"
msgstr "Commit Object"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2971
msgid ""
"The \"commit\" object links a physical state of a tree with a description of "
"how we got there and why.  Use the `--pretty=raw` option to linkgit:git-"
"show[1] or linkgit:git-log[1] to examine your favorite commit:"
msgstr ""
"「commit」オブジェクトは、ツリーの物理的な状態を、そこに到達した方法とその理"
"由の説明にリンクします。 `--pretty=raw` オプションを伴った linkgit:git-"
"show[1] または linkgit:git-log[1] を使用し、あなたのお気に入りのコミットを調"
"べてみます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2979
#, no-wrap
msgid ""
"$ git show -s --pretty=raw 2be7fcb476\n"
"commit 2be7fcb4764f2dbcee52635b91fedb1b3dcf7ab4\n"
"tree fb3a8bdd0ceddd019615af4d57a53f43d8cee2bf\n"
"parent 257a84d9d02e90447b149af58b271c19405edb6a\n"
"author Dave Watson <dwatson@mimvista.com> 1187576872 -0400\n"
"committer Junio C Hamano <gitster@pobox.com> 1187591163 -0700\n"
msgstr ""
"$ git show -s --pretty=raw 2be7fcb476\n"
"commit 2be7fcb4764f2dbcee52635b91fedb1b3dcf7ab4\n"
"tree fb3a8bdd0ceddd019615af4d57a53f43d8cee2bf\n"
"parent 257a84d9d02e90447b149af58b271c19405edb6a\n"
"author Dave Watson <dwatson@mimvista.com> 1187576872 -0400\n"
"committer Junio C Hamano <gitster@pobox.com> 1187591163 -0700\n"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2981
#, no-wrap
msgid "    Fix misspelling of 'suppress' in docs\n"
msgstr "    Fix misspelling of 'suppress' in docs\n"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:2983
#, no-wrap
msgid "    Signed-off-by: Junio C Hamano <gitster@pobox.com>\n"
msgstr "    Signed-off-by: Junio C Hamano <gitster@pobox.com>\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2986
msgid "As you can see, a commit is defined by:"
msgstr "コミットは以下のように定義されています:"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2989
msgid ""
"a tree: The SHA-1 name of a tree object (as defined below), representing the "
"contents of a directory at a certain point in time."
msgstr ""
"ツリー(a tree): ツリーオブジェクトのSHA-1名(以下で定義)。特定の時点でのディレ"
"クトリの内容を表します。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2996
msgid ""
"parent(s): The SHA-1 name(s) of some number of commits which represent the "
"immediately previous step(s) in the history of the project.  The example "
"above has one parent; merge commits may have more than one.  A commit with "
"no parents is called a \"root\" commit, and represents the initial revision "
"of a project.  Each project must have at least one root.  A project can also "
"have multiple roots, though that isn't common (or necessarily a good idea)."
msgstr ""
"親(親達)(parent(s)): プロジェクトの履歴の直前のステップを表す、いくつかのコ"
"ミットのSHA-1名。上記の例には1つの親があります。マージコミットには複数のコ"
"ミットが含まれる場合があります。親のないコミットは「ルート」コミット(root "
"commit)と呼ばれ、プロジェクトの初期リビジョンを表します。各プロジェクトには、"
"少なくとも1つのルート(root)が必要です。プロジェクトは複数のルーツ(roots)を持"
"つこともできますが、それは一般的ではありません(または必ずしも良い考えではあり"
"ません)。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:2998
msgid ""
"an author: The name of the person responsible for this change, together with "
"its date."
msgstr "作者(an author): この変更の責任者の名前とその日付。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3002
msgid ""
"a committer: The name of the person who actually created the commit, with "
"the date it was done.  This may be different from the author, for example, "
"if the author was someone who wrote a patch and emailed it to the person who "
"used it to create the commit."
msgstr ""
"コミッター(a committer)：実際にコミットを作成した人の名前と、コミットが行われ"
"た日付。 これは、作者(auther)とは異なる場合があります。たとえば、作者がパッチ"
"を作成し、それを使用してコミットを作成した人に電子メールで送信した場合です。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3003
msgid "a comment describing this commit."
msgstr "このコミットを説明するコメント。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3011
msgid ""
"Note that a commit does not itself contain any information about what "
"actually changed; all changes are calculated by comparing the contents of "
"the tree referred to by this commit with the trees associated with its "
"parents.  In particular, Git does not attempt to record file renames "
"explicitly, though it can identify cases where the existence of the same "
"file data at changing paths suggests a rename.  (See, for example, the `-M` "
"option to linkgit:git-diff[1])."
msgstr ""
"注意: コミット自体には、実際に何が変更されたかに関する情報は含まれていないこ"
"とに注意してください。すべての変更は、このコミットによって参照されるツリーの"
"内容を、その親に関連付けられているツリーと比較することによって計算されます。"
"特に、Gitはファイルの名前変更を明示的に記録しようとはしませんが、パスの変更時"
"に同じファイルデータが存在することで名前変更が示唆される場合を特定できます。 "
"(たとえば、 linkgit:git-diff[1] の `-M` オプションを参照してください。)"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3015
msgid ""
"A commit is usually created by linkgit:git-commit[1], which creates a commit "
"whose parent is normally the current HEAD, and whose tree is taken from the "
"content currently stored in the index."
msgstr ""
"コミットは通常、 linkgit:git-commit[1] によって作成されます。これにより、親が"
"通常は現在のHEADであり、ツリーが現在インデックスに格納されているコンテンツか"
"ら取得されるコミットが作成されます。"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:3017
#, no-wrap
msgid "Tree Object"
msgstr "Tree Object"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3022
msgid ""
"The ever-versatile linkgit:git-show[1] command can also be used to examine "
"tree objects, but linkgit:git-ls-tree[1] will give you more details:"
msgstr ""
"汎用性の高い linkgit:git-show[1] コマンドを使用してツリーオブジェクトを調べる"
"こともできますが、あなたは linkgit:git-ls-tree[1] で詳細を確認できます。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3034
#, no-wrap
msgid ""
"$ git ls-tree fb3a8bdd0ce\n"
"100644 blob 63c918c667fa005ff12ad89437f2fdc80926e21c    .gitignore\n"
"100644 blob 5529b198e8d14decbe4ad99db3f7fb632de0439d    .mailmap\n"
"100644 blob 6ff87c4664981e4397625791c8ea3bbb5f2279a3    COPYING\n"
"040000 tree 2fb783e477100ce076f6bf57e4a6f026013dc745    Documentation\n"
"100755 blob 3c0032cec592a765692234f1cba47dfdcc3a9200    GIT-VERSION-GEN\n"
"100644 blob 289b046a443c0647624607d471289b2c7dcd470b    INSTALL\n"
"100644 blob 4eb463797adc693dc168b926b6932ff53f17d0b1    Makefile\n"
"100644 blob 548142c327a6790ff8821d67c2ee1eff7a656b52    README\n"
"...\n"
msgstr ""
"$ git ls-tree fb3a8bdd0ce\n"
"100644 blob 63c918c667fa005ff12ad89437f2fdc80926e21c    .gitignore\n"
"100644 blob 5529b198e8d14decbe4ad99db3f7fb632de0439d    .mailmap\n"
"100644 blob 6ff87c4664981e4397625791c8ea3bbb5f2279a3    COPYING\n"
"040000 tree 2fb783e477100ce076f6bf57e4a6f026013dc745    Documentation\n"
"100755 blob 3c0032cec592a765692234f1cba47dfdcc3a9200    GIT-VERSION-GEN\n"
"100644 blob 289b046a443c0647624607d471289b2c7dcd470b    INSTALL\n"
"100644 blob 4eb463797adc693dc168b926b6932ff53f17d0b1    Makefile\n"
"100644 blob 548142c327a6790ff8821d67c2ee1eff7a656b52    README\n"
"...\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3039
msgid ""
"As you can see, a tree object contains a list of entries, each with a mode, "
"object type, SHA-1 name, and name, sorted by name.  It represents the "
"contents of a single directory tree."
msgstr ""
"ご覧のとおり、ツリーオブジェクトにはエントリのリストが含まれており、各エント"
"リにはモード(mode)とオブジェクトタイプ(object type)とSHA-1名(SHA-1 name)と名"
"前(name)があり、名前でソートされています。これは、単一のディレクトリツリーの"
"内容を表します。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3048
msgid ""
"The object type may be a blob, representing the contents of a file, or "
"another tree, representing the contents of a subdirectory.  Since trees and "
"blobs, like all other objects, are named by the SHA-1 hash of their "
"contents, two trees have the same SHA-1 name if and only if their contents "
"(including, recursively, the contents of all subdirectories)  are "
"identical.  This allows Git to quickly determine the differences between two "
"related tree objects, since it can ignore any entries with identical object "
"names."
msgstr ""
"オブジェクトタイプは、ファイルの内容を表すブロブ(blob)でも、サブディレクトリ"
"の内容を表す別のツリーでもかまいません。 ツリー(tree)とブロブ(blob)は、他のす"
"べてのオブジェクトと同様に、その内容のSHA-1ハッシュによって名前が付けられるた"
"め、内容(再帰的にすべてのサブディレクトリの内容を含む)が同一である場合に限"
"り、2つのツリーは同じSHA-1名を持ちます。これにより、Gitは、同じオブジェクト名"
"を持つエントリを無視できるため、2つの関連するツリーオブジェクト間の違いをすば"
"やく判断できます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3051
msgid ""
"(Note: in the presence of submodules, trees may also have commits as "
"entries.  See <<submodules>> for documentation.)"
msgstr ""
"(注意: サブモジュールが存在する場合、ツリーにはエントリとしてコミットが含まれ"
"る場合もあります。その文書については、<<submodules>> を参照してください。)"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3054
msgid ""
"Note that the files all have mode 644 or 755: Git actually only pays "
"attention to the executable bit."
msgstr ""
"注意: すべてのファイルのモードが644または755であることに注意してください。Git"
"は実際には実行可能ビット(executable bit)にのみ注意を払います。"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:3056
#, no-wrap
msgid "Blob Object"
msgstr "Blob Object"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3060
msgid ""
"You can use linkgit:git-show[1] to examine the contents of a blob; take, for "
"example, the blob in the entry for `COPYING` from the tree above:"
msgstr ""
"あなたは linkgit:git-show[1] を使用して、ブロブ(blob)の内容を調べることができ"
"ます。たとえば、上のツリーから `COPYING` のエントリのブロブを取得します:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3063
#, no-wrap
msgid "$ git show 6ff87c4664\n"
msgstr "$ git show 6ff87c4664\n"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3068
#, no-wrap
msgid ""
" Note that the only valid version of the GPL as far as this project\n"
" is concerned is _this_ particular version of the license (ie v2, not\n"
" v2.2 or v3.x or whatever), unless explicitly otherwise stated.\n"
"...\n"
msgstr ""
" Note that the only valid version of the GPL as far as this project\n"
" is concerned is _this_ particular version of the license (ie v2, not\n"
" v2.2 or v3.x or whatever), unless explicitly otherwise stated.\n"
"...\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3072
msgid ""
"A \"blob\" object is nothing but a binary blob of data.  It doesn't refer to "
"anything else or have attributes of any kind."
msgstr ""
"「ブロブ」(blob)オブジェクトは、データのバイナリブロブ(バイナリの小さい塊)に"
"他なりません。それは他のものを参照したり、いかなる種類の属性も持っていませ"
"ん。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3078
msgid ""
"Since the blob is entirely defined by its data, if two files in a directory "
"tree (or in multiple different versions of the repository)  have the same "
"contents, they will share the same blob object. The object is totally "
"independent of its location in the directory tree, and renaming a file does "
"not change the object that file is associated with."
msgstr ""
"ブロブはそのデータによって完全に定義されるため、ディレクトリツリー(またはリポ"
"ジトリの複数の異なるバージョン)内の2つのファイルの内容が同じである場合、それ"
"らは同じブロブオブジェクトを共有します。オブジェクトはディレクトリツリー内の"
"場所から完全に独立しており、ファイルの名前を変更しても、ファイルが関連付けら"
"れているオブジェクトは変更されません。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3083
msgid ""
"Note that any tree or blob object can be examined using linkgit:git-show[1] "
"with the <revision>:<path> syntax.  This can sometimes be useful for "
"browsing the contents of a tree that is not currently checked out."
msgstr ""
"注意: <revision>:<path> 構文で linkgit:git-show[1] を使用すると、任意のツリー"
"またはブロブオブジェクトを調べることができることに注意してください。これは、"
"現在チェックアウトされていないツリーの内容を参照する場合に役立つことがありま"
"す。"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:3085
#, no-wrap
msgid "Trust"
msgstr "Trust(信頼性)"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3092
msgid ""
"If you receive the SHA-1 name of a blob from one source, and its contents "
"from another (possibly untrusted) source, you can still trust that those "
"contents are correct as long as the SHA-1 name agrees.  This is because the "
"SHA-1 is designed so that it is infeasible to find different contents that "
"produce the same hash."
msgstr ""
"あなたが、とあるソースからブロブのSHA-1名を受け取り、そのコンテンツを別の(お"
"そらく信頼できない)ソースから受け取った場合でも、SHA-1名が一致する限り、それ"
"らの内容が正しいと信頼できます。これは、SHA-1が、同じハッシュを生成する異なる"
"コンテンツを見つけることが不可能になるように設計されているためです。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3099
msgid ""
"Similarly, you need only trust the SHA-1 name of a top-level tree object to "
"trust the contents of the entire directory that it refers to, and if you "
"receive the SHA-1 name of a commit from a trusted source, then you can "
"easily verify the entire history of commits reachable through parents of "
"that commit, and all of those contents of the trees referred to by those "
"commits."
msgstr ""
"同様に、あなたがディレクトリ全体のコンテンツを信頼するためには、最上位ツリー"
"オブジェクトのSHA-1名を信頼する事だけでよいのです。信頼できるソースからコミッ"
"トのSHA-1名を受け取った場合、あなたは、そのコミットの親を介して到達可能なコ"
"ミットの履歴全体、およびそれらのコミットによって参照されるツリーのすべてのコ"
"ンテンツを簡単に確認できます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3105
msgid ""
"So to introduce some real trust in the system, the only thing you need to do "
"is to digitally sign just 'one' special note, which includes the name of a "
"top-level commit.  Your digital signature shows others that you trust that "
"commit, and the immutability of the history of commits tells others that "
"they can trust the whole history."
msgstr ""
"したがって、システムに実際の信頼を導入するには、トップレベルのコミットの名前"
"を含む「1つの」特別なメモにデジタル署名するだけです。あなたのデジタル署名は、"
"あなたがそのコミットを信頼していることを他の人に示し、コミットの履歴の不変性"
"は、彼らが履歴全体を信頼できることを他の人に伝えます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3110
msgid ""
"In other words, you can easily validate a whole archive by just sending out "
"a single email that tells the people the name (SHA-1 hash)  of the top "
"commit, and digitally sign that email using something like GPG/PGP."
msgstr ""
"いいかえると、あなたは、トップコミットの名前(SHA-1ハッシュ)を通知する一通の電"
"子メールを送信するだけでアーカイブ全体を簡単に検証し、GPG/PGPなどを使用してそ"
"の電子メールにデジタル署名することができます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3112
msgid "To assist in this, Git also provides the tag object..."
msgstr "これを支援するために、Gitはタグオブジェクトも提供しています…"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:3114
#, no-wrap
msgid "Tag Object"
msgstr "Tag Object"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3119
msgid ""
"A tag object contains an object, object type, tag name, the name of the "
"person (\"tagger\") who created the tag, and a message, which may contain a "
"signature, as can be seen using linkgit:git-cat-file[1]:"
msgstr ""
"タグオブジェクトには、オブジェクトとオブジェクトタイプとタグ名とタグを作成し"
"た人の名前(\"tagger\")と、 linkgit:git-cat-file[1] を使用して確認できるよう"
"に、署名を含む可能性のあるメッセージが含まれます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3126
#, no-wrap
msgid ""
"$ git cat-file tag v1.5.0\n"
"object 437b1b20df4b356c9342dac8d38849f24ef44f27\n"
"type commit\n"
"tag v1.5.0\n"
"tagger Junio C Hamano <junkio@cox.net> 1171411200 +0000\n"
msgstr ""
"$ git cat-file tag v1.5.0\n"
"object 437b1b20df4b356c9342dac8d38849f24ef44f27\n"
"type commit\n"
"tag v1.5.0\n"
"tagger Junio C Hamano <junkio@cox.net> 1171411200 +0000\n"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3130
#, no-wrap
msgid ""
"GIT 1.5.0\n"
"-----BEGIN PGP SIGNATURE-----\n"
"Version: GnuPG v1.4.6 (GNU/Linux)\n"
msgstr ""
"GIT 1.5.0\n"
"-----BEGIN PGP SIGNATURE-----\n"
"Version: GnuPG v1.4.6 (GNU/Linux)\n"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3135
#, no-wrap
msgid ""
"iD8DBQBF0lGqwMbZpPMRm5oRAuRiAJ9ohBLd7s2kqjkKlq1qqC57SbnmzQCdG4ui\n"
"nLE/L9aUXdWeTFPron96DLA=\n"
"=2E+0\n"
"-----END PGP SIGNATURE-----\n"
msgstr ""
"iD8DBQBF0lGqwMbZpPMRm5oRAuRiAJ9ohBLd7s2kqjkKlq1qqC57SbnmzQCdG4ui\n"
"nLE/L9aUXdWeTFPron96DLA=\n"
"=2E+0\n"
"-----END PGP SIGNATURE-----\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3141
msgid ""
"See the linkgit:git-tag[1] command to learn how to create and verify tag "
"objects.  (Note that linkgit:git-tag[1] can also be used to create "
"\"lightweight tags\", which are not tag objects at all, but just simple "
"references whose names begin with `refs/tags/`)."
msgstr ""
"タグオブジェクトを作成および検証する方法については、 linkgit:git-tag[1] コマ"
"ンドを参照してください。 (注意: linkgit:git-tag[1]を使用して、「軽量タグ」"
"(lightweight tags)を作成することもできます。これは、タグオブジェクトではな"
"く、名前が `refs/tags/` で始まる単純な参照です)。"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:3143
#, no-wrap
msgid "How Git stores objects efficiently: pack files"
msgstr "Gitがオブジェクトを効率的に保存する方法: pack files"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3147
msgid ""
"Newly created objects are initially created in a file named after the "
"object's SHA-1 hash (stored in `.git/objects`)."
msgstr ""
"新しく作成されたオブジェクトは、最初にオブジェクトのSHA-1ハッシュにちなんで名"
"付けられたファイル名のファイルとして作成されます( `.git/objects` に保存されま"
"す)。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3150
msgid ""
"Unfortunately this system becomes inefficient once a project has a lot of "
"objects.  Try this on an old project:"
msgstr ""
"残念ながら、プロジェクトに多くのオブジェクトがあると、このシステムは非効率に"
"なります。 古いプロジェクトで以下を試してください:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3154
#, no-wrap
msgid ""
"$ git count-objects\n"
"6930 objects, 47620 kilobytes\n"
msgstr ""
"$ git count-objects\n"
"6930 objects, 47620 kilobytes\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3159
msgid ""
"The first number is the number of objects which are kept in individual "
"files.  The second is the amount of space taken up by those \"loose\" "
"objects."
msgstr ""
"最初の数は、個々のファイルに保持されているオブジェクトの数です。 2つ目は、こ"
"れらの「緩い」オブジェクト(\"loose\" objects)が占めるスペースの量です。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3164
msgid ""
"You can save space and make Git faster by moving these loose objects in to a "
"\"pack file\", which stores a group of objects in an efficient compressed "
"format; the details of how pack files are formatted can be found in linkgit:"
"gitformat-pack[5]."
msgstr ""
"あなたは、これらの緩いオブジェクトを「パックファイル」(pack file)に移動するこ"
"とで、スペースを節約し、Gitを高速化できます。このファイルには、オブジェクトの"
"グループが効率的な圧縮形式で保存されます。 パックファイルのフォーマットの詳細"
"については、 linkgit:gitformat-pack[5] をご覧ください。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3166
msgid "To put the loose objects into a pack, just run git repack:"
msgstr "緩いオブジェクトをパックに入れるには、 git repack を実行するだけです:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3174
#, no-wrap
msgid ""
"$ git repack\n"
"Counting objects: 6020, done.\n"
"Delta compression using up to 4 threads.\n"
"Compressing objects: 100% (6020/6020), done.\n"
"Writing objects: 100% (6020/6020), done.\n"
"Total 6020 (delta 4070), reused 0 (delta 0)\n"
msgstr ""
"$ git repack\n"
"Counting objects: 6020, done.\n"
"Delta compression using up to 4 threads.\n"
"Compressing objects: 100% (6020/6020), done.\n"
"Writing objects: 100% (6020/6020), done.\n"
"Total 6020 (delta 4070), reused 0 (delta 0)\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3178
msgid ""
"This creates a single \"pack file\" in .git/objects/pack/ containing all "
"currently unpacked objects.  You can then run"
msgstr ""
"これにより、現在アンパックされているすべてのオブジェクトを含む単一の「パック"
"ファイル」が .git/objects/pack/ に作成されます。 あなたは、その後、以下を実行"
"できます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3181
#: ../Documentation-sedout/user-manual.txt:3272
#, no-wrap
msgid "$ git prune\n"
msgstr "$ git prune\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3188
msgid ""
"to remove any of the \"loose\" objects that are now contained in the pack.  "
"This will also remove any unreferenced objects (which may be created when, "
"for example, you use `git reset` to remove a commit).  You can verify that "
"the loose objects are gone by looking at the `.git/objects` directory or by "
"running"
msgstr ""
"これは、今やパックに格納済の緩いオブジェクト(\"loose\" objects)をすべて削除し"
"ます。これにより、参照されていないオブジェクトも削除されます(たとえば、 `git "
"reset` を使用してコミットを削除すると作成される可能性があります)。 `.git/"
"objects` ディレクトリを確認するか、以下を実行することで、緩んだオブジェクトが"
"なくなったことを確認できます。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3192
#, no-wrap
msgid ""
"$ git count-objects\n"
"0 objects, 0 kilobytes\n"
msgstr ""
"$ git count-objects\n"
"0 objects, 0 kilobytes\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3196
msgid ""
"Although the object files are gone, any commands that refer to those objects "
"will work exactly as they did before."
msgstr ""
"オブジェクトファイルはなくなりましたが、それらのオブジェクトを参照するコマン"
"ドは、以前とまったく同じように機能します。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3199
msgid ""
"The linkgit:git-gc[1] command performs packing, pruning, and more for you, "
"so is normally the only high-level command you need."
msgstr ""
"linkgit:git-gc[1] コマンドは、パッキング(packing)やプルーニング(pruning)を実"
"行します。このため、通常、あなたに必要な高レベルのコマンドはこのコマンドだけ"
"です。"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:3201
#, no-wrap
msgid "Dangling objects"
msgstr "Dangling objects(宙ぶらりんオブジェクト)"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3205
msgid ""
"The linkgit:git-fsck[1] command will sometimes complain about dangling "
"objects.  They are not a problem."
msgstr ""
"linkgit:git-fsck[1] コマンドは、宙ぶらりんオブジェクト(dangling objects)につ"
"いて文句を言うことがあります。それらは問題ではありません。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3211
msgid ""
"The most common cause of dangling objects is that you've rebased a branch, "
"or you have pulled from somebody else who rebased a branch--see <<cleaning-"
"up-history>>.  In that case, the old head of the original branch still "
"exists, as does everything it pointed to. The branch pointer itself just "
"doesn't, since you replaced it with another one."
msgstr ""
"宙ぶらりんオブジェクトの最も一般的な原因は、ブランチをリベースしたか、ブラン"
"チをリベースした他の誰かからプルしたことです。 <<cleaning-up-history>> を参照"
"してください。 その場合、元のブランチの古いヘッドは、それが指しているすべての"
"ものと同様に、まだ存在しています。ブランチポインタ自体は、別のポインタに置き"
"換えたため、存在していません。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3219
msgid ""
"There are also other situations that cause dangling objects. For example, a "
"\"dangling blob\" may arise because you did a `git add` of a file, but then, "
"before you actually committed it and made it part of the bigger picture, you "
"changed something else in that file and committed that *updated* thing--the "
"old state that you added originally ends up not being pointed to by any "
"commit or tree, so it's now a dangling blob object."
msgstr ""
"宙ぶらりんオブジェクトを引き起こす他の状況もあります。たとえば、ファイルに"
"「git add」を実行したために「宙ぶらりんブロブ」が発生する可能性があります。実"
"際にコミットして全体像の一部にする前に、そのファイル内の別の何かを変更し、そ"
"の更新されたものをコミットした場合--この時最初に追加した古い状態は、コミット"
"またはツリーによってポイントされないため、宙ぶらりんブロブオブジェクトになり"
"ます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3227
msgid ""
"Similarly, when the \"ort\" merge strategy runs, and finds that there are "
"criss-cross merges and thus more than one merge base (which is fairly "
"unusual, but it does happen), it will generate one temporary midway tree (or "
"possibly even more, if you had lots of criss-crossing merges and more than "
"two merge bases) as a temporary internal merge base, and again, those are "
"real objects, but the end result will not end up pointing to them, so they "
"end up \"dangling\" in your repository."
msgstr ""
"同様に、 \"ort\" マージ戦略が実行され、交差マージ(criss-cross merge)があり、"
"したがって複数のマージベースがあることがわかった場合(これはかなり珍しいです"
"が、実際に発生します)、一時的な内部マージベースとして1つの一時的な中間ツリー"
"を生成します。そして、それらは実際のオブジェクトですが、最終結果はそれらを指"
"すことにはならないため、リポジトリ内で「宙ぶらりん」になります(または、交差"
"マージが多数あり、マージベースが3つ以上ある場合は、さらに多くの可能性がありま"
"す)。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3233
msgid ""
"Generally, dangling objects aren't anything to worry about. They can even be "
"very useful: if you screw something up, the dangling objects can be how you "
"recover your old tree (say, you did a rebase, and realized that you really "
"didn't want to--you can look at what dangling objects you have, and decide "
"to reset your head to some old dangling state)."
msgstr ""
"一般的に、宙ぶらりんオブジェクトは心配する必要はありません。それらは非常に役"
"立つことさえあります。あなたが何かを台無しにした場合、宙ぶらりんオブジェクト"
"はあなたがあなたの古いツリーを回復する方法になることができます(たとえば、リ"
"ベースを行った後で、本当はリベースをやりたくなかった気づきました。持っている"
"宙ぶらりんオブジェクトを確認して、ヘッドを古い宙ぶらりん状態にリセットするこ"
"とができます)。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3235
msgid "For commits, you can just use:"
msgstr "コミットの場合は、あなたは以下を使用できます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3238
#, no-wrap
msgid "$ gitk <dangling-commit-sha-goes-here> --not --all\n"
msgstr "$ gitk <dangling-commit-sha-goes-here> --not --all\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3243
msgid ""
"This asks for all the history reachable from the given commit but not from "
"any branch, tag, or other reference.  If you decide it's something you want, "
"you can always create a new reference to it, e.g.,"
msgstr ""
"これは、指定されたコミットから到達可能なすべての履歴を要求しますが、ブラン"
"チ、タグ、またはその他の参照からは要求しません。 必要なものであると判断した場"
"合は、いつでも新しい参照を作成できます。たとえば、"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3246
#, no-wrap
msgid "$ git branch recovered-branch <dangling-commit-sha-goes-here>\n"
msgstr "$ git branch recovered-branch <dangling-commit-sha-goes-here>\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3250
msgid ""
"For blobs and trees, you can't do the same, but you can still examine them.  "
"You can just do"
msgstr ""
"ブロブとツリーの場合、同じことはできませんが、それでも調べることができます。 "
"あなたはただ以下のようにするだけです。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3253
#, no-wrap
msgid "$ git show <dangling-blob/tree-sha-goes-here>\n"
msgstr "$ git show <dangling-blob/tree-sha-goes-here>\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3258
msgid ""
"to show what the contents of the blob were (or, for a tree, basically what "
"the `ls` for that directory was), and that may give you some idea of what "
"the operation was that left that dangling object."
msgstr ""
"ブロブの内容が何であるか(または、ツリーの場合、基本的にそのディレクトリの "
"`ls` したのが何であるか)を示すために、それはあなたに宙ぶらりんオブジェクトを"
"残した操作が何であったかについてのいくらかの考えを与えるかもしれません。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3266
msgid ""
"Usually, dangling blobs and trees aren't very interesting. They're almost "
"always the result of either being a half-way mergebase (the blob will often "
"even have the conflict markers from a merge in it, if you have had "
"conflicting merges that you fixed up by hand), or simply because you "
"interrupted a `git fetch` with ^C or something like that, leaving _some_ of "
"the new objects in the object database, but just dangling and useless."
msgstr ""
"通常、宙ぶらりんのブロブやツリーはあまり興味深くはありません。ほとんどの場"
"合、それらは中途のマージベースであるか(手動で修正した競合するマージがあった場"
"合、ブローブにはマージからの競合マーカーが含まれることがよくあります)、また"
"は、`git fetch` で、あなたが ^C か何かで中断すると、オブジェクトデータベース"
"に新しいオブジェクトの一部を残す事が発生しますが、それらは役に立たない単なる"
"宙ぶらりんです。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3269
msgid ""
"Anyway, once you are sure that you're not interested in any dangling state, "
"you can just prune all unreachable objects:"
msgstr ""
"とにかく、あなたは宙ぶらりん状態に興味がないと確信したら、あなたは到達できな"
"いすべてのオブジェクトを削除できます:"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3279
msgid ""
"and they'll be gone. (You should only run `git prune` on a quiescent "
"repository--it's kind of like doing a filesystem fsck recovery: you don't "
"want to do that while the filesystem is mounted.  `git prune` is designed "
"not to cause any harm in such cases of concurrent accesses to a repository "
"but you might receive confusing or scary messages.)"
msgstr ""
"そしてそれらは消え去ります。(あなたは、静止した、活動していないリポジトリでの"
"み `git prune` を実行すべきです。これは、ファイルシステムのfsckリカバリを実行"
"するようなものです。あなたはfsckを、ファイルシステムがマウントされている間は"
"実行したくないでしょう。同様に `git prune` は、リポジトリへの同時アクセスの場"
"合でも害を及ぼさないように設計されていますが、紛らわしいメッセージや恐ろしい"
"メッセージを受け取る可能性があります。）"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:3281
#, no-wrap
msgid "Recovering from repository corruption"
msgstr "破損したリポジトリの回復"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3286
msgid ""
"By design, Git treats data trusted to it with caution.  However, even in the "
"absence of bugs in Git itself, it is still possible that hardware or "
"operating system errors could corrupt data."
msgstr ""
"設計上、Gitは信頼できるデータを慎重に扱います。ただし、Git自体にバグがない場"
"合でも、ハードウェアまたはオペレーティングシステムのエラーによってデータが破"
"損する可能性があります。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3290
msgid ""
"The first defense against such problems is backups.  You can back up a Git "
"directory using clone, or just using cp, tar, or any other backup mechanism."
msgstr ""
"このような問題に対する最初の防御策はバックアップです。cloneを使用するか、cp、"
"tar、またはその他のバックアップメカニズムを使用して、Gitディレクトリをバック"
"アップできます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3294
msgid ""
"As a last resort, you can search for the corrupted objects and attempt to "
"replace them by hand.  Back up your repository before attempting this in "
"case you corrupt things even more in the process."
msgstr ""
"最後の手段として、破損したオブジェクトを検索し、手動で置き換えることができま"
"す。その処理でさらに破損してしまう場合に備えて、これを試行する前にリポジトリ"
"をバックアップしてください。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3298
msgid ""
"We'll assume that the problem is a single missing or corrupted blob, which "
"is sometimes a solvable problem.  (Recovering missing trees and especially "
"commits is *much* harder)."
msgstr ""
"私達は、問題は単一の欠落または破損したブロブであると想定しますが、これは解決"
"可能な問題である場合があります。 (欠落しているツリー、特にコミットを回復する"
"ことは*非常に*困難です)。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3301
msgid ""
"Before starting, verify that there is corruption, and figure out where it is "
"with linkgit:git-fsck[1]; this may be time-consuming."
msgstr ""
"開始する前に、破損があることを確認し、 linkgit:git-fsck[1] を使用して破損がど"
"こにあるかを把握します。これにはけっこう時間がかかる場合があります。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3303
msgid "Assume the output looks like this:"
msgstr "出力が次のようになっているとします:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3309
#, no-wrap
msgid ""
"$ git fsck --full --no-dangling\n"
"broken link from    tree 2d9263c6d23595e7cb2a21e5ebbb53655278dff8\n"
"              to    blob 4b9458b3786228369c63936db65827de3cc06200\n"
"missing blob 4b9458b3786228369c63936db65827de3cc06200\n"
msgstr ""
"$ git fsck --full --no-dangling\n"
"broken link from    tree 2d9263c6d23595e7cb2a21e5ebbb53655278dff8\n"
"              to    blob 4b9458b3786228369c63936db65827de3cc06200\n"
"missing blob 4b9458b3786228369c63936db65827de3cc06200\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3317
msgid ""
"Now you know that blob 4b9458b3 is missing, and that the tree 2d9263c6 "
"points to it.  If you could find just one copy of that missing blob object, "
"possibly in some other repository, you could move it into `.git/"
"objects/4b/9458b3...` and be done.  Suppose you can't.  You can still "
"examine the tree that pointed to it with linkgit:git-ls-tree[1], which might "
"output something like:"
msgstr ""
"これで、ブロブ 4b9458b3 が欠落しており、ツリー 2d9263c6 がそれを指しているこ"
"とがわかります。欠落しているブロブブジェクトのコピーが1つだけ見つかった場合"
"は、おそらく他のリポジトリで、それを `.git/objects/4b/9458b3...` に移動して実"
"行できます。 しかし、あなたはそれができなかったということにしましょう。そうす"
"るってぇと、あなたは linkgit:git-ls-tree[1] を使用して、それを指しているツ"
"リーを調べることができます。これにより、以下のような出力が得られるかもしれま"
"せん:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3326
#, no-wrap
msgid ""
"$ git ls-tree 2d9263c6d23595e7cb2a21e5ebbb53655278dff8\n"
"100644 blob 8d14531846b95bfa3564b58ccfb7913a034323b8\t.gitignore\n"
"100644 blob ebf9bf84da0aab5ed944264a5db2a65fe3a3e883\t.mailmap\n"
"100644 blob ca442d313d86dc67e0a2e5d584b465bd382cbf5c\tCOPYING\n"
"...\n"
"100644 blob 4b9458b3786228369c63936db65827de3cc06200\tmyfile\n"
"...\n"
msgstr ""
"$ git ls-tree 2d9263c6d23595e7cb2a21e5ebbb53655278dff8\n"
"100644 blob 8d14531846b95bfa3564b58ccfb7913a034323b8\t.gitignore\n"
"100644 blob ebf9bf84da0aab5ed944264a5db2a65fe3a3e883\t.mailmap\n"
"100644 blob ca442d313d86dc67e0a2e5d584b465bd382cbf5c\tCOPYING\n"
"...\n"
"100644 blob 4b9458b3786228369c63936db65827de3cc06200\tmyfile\n"
"...\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3334
msgid ""
"So now you know that the missing blob was the data for a file named "
"`myfile`.  And chances are you can also identify the directory--let's say "
"it's in `somedirectory`.  If you're lucky the missing copy might be the same "
"as the copy you have checked out in your working tree at `somedirectory/"
"myfile`; you can test whether that's right with linkgit:git-hash-object[1]:"
msgstr ""
"これで、欠落しているブロブが `myfile` という名前のファイルのデータであること"
"がわかりました。 また、ディレクトリを特定できる可能性もあります。たとえば、"
"「somedirectory」にあるとします。 運が良ければ、不足しているコピーは、作業ツ"
"リーの `somedirectory/myfile` でチェックアウトしたコピーと同じである可能性が"
"あります。 linkgit:git-hash-object[1] を使用して、それが正しいかどうかをテス"
"トできます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3337
#, no-wrap
msgid "$ git hash-object -w somedirectory/myfile\n"
msgstr "$ git hash-object -w somedirectory/myfile\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3343
msgid ""
"which will create and store a blob object with the contents of somedirectory/"
"myfile, and output the SHA-1 of that object.  if you're extremely lucky it "
"might be 4b9458b3786228369c63936db65827de3cc06200, in which case you've "
"guessed right, and the corruption is fixed!"
msgstr ""
"これにより、 somedirectory/myfile の内容を含むブロブオブジェクトが作成および"
"保存され、そのオブジェクトのSHA-1が出力されます。 運が良ければ、"
"4b9458b3786228369c63936db65827de3cc06200 になる可能性があります。その場合は、"
"あなたの推測が正しかったということで、破損が修正されます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3346
msgid ""
"Otherwise, you need more information.  How do you tell which version of the "
"file has been lost?"
msgstr ""
"それ以外の場合は、より多くの情報が必要です。あなたはファイルのどのバージョン"
"が失われたかをどのように知ればよいのでしょうか？"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3348
msgid "The easiest way to do this is with:"
msgstr "これを行う最も簡単な方法は以下のとおりです:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3351
#, no-wrap
msgid "$ git log --raw --all --full-history -- somedirectory/myfile\n"
msgstr "$ git log --raw --all --full-history -- somedirectory/myfile\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3354
msgid "Because you're asking for raw output, you'll now get something like"
msgstr "あなたは生の出力を問い合わせたので、あなたは以下のようなものを得ます。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3361
#, no-wrap
msgid ""
"commit abc\n"
"Author:\n"
"Date:\n"
"...\n"
":100644 100644 4b9458b newsha M somedirectory/myfile\n"
msgstr ""
"commit abc\n"
"Author:\n"
"Date:\n"
"...\n"
":100644 100644 4b9458b newsha M somedirectory/myfile\n"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3366
#, no-wrap
msgid ""
"commit xyz\n"
"Author:\n"
"Date:\n"
msgstr ""
"commit xyz\n"
"Author:\n"
"Date:\n"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3369
#, no-wrap
msgid ""
"...\n"
":100644 100644 oldsha 4b9458b M somedirectory/myfile\n"
msgstr ""
"...\n"
":100644 100644 oldsha 4b9458b M somedirectory/myfile\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3375
msgid ""
"This tells you that the immediately following version of the file was "
"\"newsha\", and that the immediately preceding version was \"oldsha\".  You "
"also know the commit messages that went with the change from oldsha to "
"4b9458b and with the change from 4b9458b to newsha."
msgstr ""
"これは、ファイルの直前のバージョンが「newsha」であり、直前のバージョンが"
"「oldsha」であったことを示しています。 また、oldshaから4b9458bへの変更、およ"
"び4b9458bからnewshaへの変更に伴うコミットメッセージも分かります。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3378
msgid ""
"If you've been committing small enough changes, you may now have a good shot "
"at reconstructing the contents of the in-between state 4b9458b."
msgstr ""
"十分に小さな変更をコミットしている場合は、中間状態4b9458bの内容が再構築するの"
"に適している可能性があります。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3380
msgid "If you can do that, you can now recreate the missing object with"
msgstr ""
"もしそれが可能でであれば、あなたは不足しているオブジェクトを以下のように再作"
"成できます。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3383
#, no-wrap
msgid "$ git hash-object -w <recreated-file>\n"
msgstr "$ git hash-object -w <recreated-file>\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3386
msgid "and your repository is good again!"
msgstr "そしてあなたのリポジトリは再び正常になります。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3388
msgid "(Btw, you could have ignored the `fsck`, and started with doing a"
msgstr "(ところで、あなたは `fsck` を無視する事がでます。以下の通り始めます。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3391
#, no-wrap
msgid "$ git log --raw --all\n"
msgstr "$ git log --raw --all\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3396
msgid ""
"and just looked for the sha of the missing object (4b9458b) in that whole "
"thing. It's up to you--Git does *have* a lot of information, it is just "
"missing one particular blob version."
msgstr ""
"そして、その全体の中で行方不明のオブジェクト(4b9458b)のshaを探しました。そう"
"するかどうかはあなた次第です--Gitは多くの情報を*持っていて*、それはただ1つの"
"特定のブロブバージョンを失っているだけです。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:3398
#, no-wrap
msgid "The index"
msgstr "The index"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3403
msgid ""
"The index is a binary file (generally kept in `.git/index`) containing a "
"sorted list of path names, each with permissions and the SHA-1 of a blob "
"object; linkgit:git-ls-files[1] can show you the contents of the index:"
msgstr ""
"インデックスは、ソートされたパス名のリストを含むバイナリファイル(通常は `."
"git/index` に保持されます)であり、それぞれパーミッションとブロブオブジェクト"
"のSHA-1を含んでいます。 linkgit:git-ls-files[1] は、インデックスの内容を表示"
"できます。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3415
#, no-wrap
msgid ""
"$ git ls-files --stage\n"
"100644 63c918c667fa005ff12ad89437f2fdc80926e21c 0\t.gitignore\n"
"100644 5529b198e8d14decbe4ad99db3f7fb632de0439d 0\t.mailmap\n"
"100644 6ff87c4664981e4397625791c8ea3bbb5f2279a3 0\tCOPYING\n"
"100644 a37b2152bd26be2c2289e1f57a292534a51a93c7 0\tDocumentation/.gitignore\n"
"100644 fbefe9a45b00a54b58d94d06eca48b03d40a50e0 0\tDocumentation/Makefile\n"
"...\n"
"100644 2511aef8d89ab52be5ec6a5e46236b4b6bcd07ea 0\txdiff/xtypes.h\n"
"100644 2ade97b2574a9f77e7ae4002a4e07a6a38e46d07 0\txdiff/xutils.c\n"
"100644 d5de8292e05e7c36c4b68857c1cf9855e3d2f70a 0\txdiff/xutils.h\n"
msgstr ""
"$ git ls-files --stage\n"
"100644 63c918c667fa005ff12ad89437f2fdc80926e21c 0\t.gitignore\n"
"100644 5529b198e8d14decbe4ad99db3f7fb632de0439d 0\t.mailmap\n"
"100644 6ff87c4664981e4397625791c8ea3bbb5f2279a3 0\tCOPYING\n"
"100644 a37b2152bd26be2c2289e1f57a292534a51a93c7 0\tDocumentation/.gitignore\n"
"100644 fbefe9a45b00a54b58d94d06eca48b03d40a50e0 0\tDocumentation/Makefile\n"
"...\n"
"100644 2511aef8d89ab52be5ec6a5e46236b4b6bcd07ea 0\txdiff/xtypes.h\n"
"100644 2ade97b2574a9f77e7ae4002a4e07a6a38e46d07 0\txdiff/xutils.c\n"
"100644 d5de8292e05e7c36c4b68857c1cf9855e3d2f70a 0\txdiff/xutils.h\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3420
msgid ""
"Note that in older documentation you may see the index called the \"current "
"directory cache\" or just the \"cache\".  It has three important properties:"
msgstr ""
"注意: 古いドキュメントでは、「現在のディレクトリキャッシュ」または単に"
"「キャッシュ」と呼ばれるインデックスが表示される場合があることに注意してくだ"
"さい。 これには3つの重要な特性があります:"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3423
msgid ""
"The index contains all the information necessary to generate a single "
"(uniquely determined) tree object."
msgstr ""
"インデックスには、単一の(一意に決定された)ツリーオブジェクトを生成するために"
"必要なすべての情報が含まれています。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3427
msgid ""
"For example, running linkgit:git-commit[1] generates this tree object from "
"the index, stores it in the object database, and uses it as the tree object "
"associated with the new commit."
msgstr ""
"たとえば、 linkgit:git-commit[1] を実行すると、インデックスからこのツリーオブ"
"ジェクトが生成され、オブジェクトデータベースに保存され、新しいコミットに関連"
"付けられたツリーオブジェクトとして使用されます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3430
msgid ""
"The index enables fast comparisons between the tree object it defines and "
"the working tree."
msgstr ""
"インデックスを使用すると、インデックスが定義するツリーオブジェクトと作業ツ"
"リーをすばやく比較できます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3437
msgid ""
"It does this by storing some additional data for each entry (such as the "
"last modified time).  This data is not displayed above, and is not stored in "
"the created tree object, but it can be used to determine quickly which files "
"in the working directory differ from what was stored in the index, and thus "
"save Git from having to read all of the data from such files to look for "
"changes."
msgstr ""
"これは、エントリごとにいくつかの追加データ(最終変更時刻など)を保存することに"
"よって行われます。このデータは上に表示されず、作成されたツリーオブジェクトに"
"保存されませんが、作業ディレクトリ内のどのファイルがインデックスに保存されて"
"いるものと異なるかをすばやく判断するために使用できるため、Gitはそのようなファ"
"イルからすべてのデータを読み取って変更を探す必要がありません。 "

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3442
msgid ""
"It can efficiently represent information about merge conflicts between "
"different tree objects, allowing each pathname to be associated with "
"sufficient information about the trees involved that you can create a three-"
"way merge between them."
msgstr ""
"異なるツリーオブジェクト間のマージの競合に関する情報を効率的に表すことができ"
"るため、各パス名を、関連するツリーに関する十分な情報に関連付けて、それらの間"
"で3方向のマージを作成できます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3448
msgid ""
"We saw in <<conflict-resolution>> that during a merge the index can store "
"multiple versions of a single file (called \"stages\").  The third column in "
"the linkgit:git-ls-files[1] output above is the stage number, and will take "
"on values other than 0 for files with merge conflicts."
msgstr ""
"私達はマージ中に、インデックスが1つのファイルの複数のバージョン（「ステージ」"
"と呼ばれる）を格納できることを <<conflict-resolution>> で確認しました。上記"
"の linkgit:git-ls-files[1] 出力の3番目の列はステージ番号であり、マージの競合"
"があるファイルの場合は0以外の値を取ります。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3451
msgid ""
"The index is thus a sort of temporary staging area, which is filled with a "
"tree which you are in the process of working on."
msgstr ""
"したがって、インデックスは一種の一時的なステージング領域であり、作業中のツ"
"リーで埋められます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3454
msgid ""
"If you blow the index away entirely, you generally haven't lost any "
"information as long as you have the name of the tree that it described."
msgstr ""
"あなたがインデックスを完全に吹き飛ばしても、それが記述されたツリーの名前を"
"持っている限り、通常、情報は失われていません。"

#. type: Title ==
#: ../Documentation-sedout/user-manual.txt:3456
#, no-wrap
msgid "Submodules"
msgstr "Submodules"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3464
msgid ""
"Large projects are often composed of smaller, self-contained modules.  For "
"example, an embedded Linux distribution's source tree would include every "
"piece of software in the distribution with some local modifications; a movie "
"player might need to build against a specific, known-working version of a "
"decompression library; several independent programs might all share the same "
"build scripts."
msgstr ""
"大規模なプロジェクトは、多くの場合、より小さな自己完結型のモジュールで構成さ"
"れます。たとえば、組み込みLinuxディストリビューションのソースツリーには、いく"
"つかのローカルな変更を加えたディストリビューション内のすべてのソフトウェアが"
"含まれます。例えば動画プレーヤーは、特定の既知の動作バージョンの解凍ライブラ"
"リに対して構築する必要がある場合があります。複数の独立したプログラムがすべて"
"同じビルドスクリプトを共有する場合があります。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3470
msgid ""
"With centralized revision control systems this is often accomplished by "
"including every module in one single repository.  Developers can check out "
"all modules or only the modules they need to work with.  They can even "
"modify files across several modules in a single commit while moving things "
"around or updating APIs and translations."
msgstr ""
"一元化されたリビジョン管理システムでは、これは多くの場合、すべてのモジュール"
"を1つのリポジトリに含めることで実現されます。 開発者は、すべてのモジュールを"
"チェックアウトすることも、操作する必要のあるモジュールのみをチェックアウトす"
"ることもできます。 物事を移動したり、APIや翻訳を更新したりしながら、1回のコ"
"ミットで複数のモジュール間でファイルを変更することもできます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3476
msgid ""
"Git does not allow partial checkouts, so duplicating this approach in Git "
"would force developers to keep a local copy of modules they are not "
"interested in touching.  Commits in an enormous checkout would be slower "
"than you'd expect as Git would have to scan every directory for changes.  If "
"modules have a lot of local history, clones would take forever."
msgstr ""
"Gitでは部分的なチェックアウトが許可されていないため、Gitでこのアプローチを複"
"製すると、開発者は触れたくないモジュールのローカルコピーを保持する必要があり"
"ます。巨大なチェックアウトでのコミットは、Gitがすべてのディレクトリをスキャン"
"して変更を確認する必要があるため、あなたが期待するよりもずっと遅くなります。"
"モジュールに多くのローカル履歴がある場合、クローン操作は永遠に終わりません。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3484
msgid ""
"On the plus side, distributed revision control systems can much better "
"integrate with external sources.  In a centralized model, a single arbitrary "
"snapshot of the external project is exported from its own revision control "
"and then imported into the local revision control on a vendor branch.  All "
"the history is hidden.  With distributed revision control you can clone the "
"entire external history and much more easily follow development and re-merge "
"local changes."
msgstr ""
"プラス面として、分散型リビジョン管理システムは、外部ソースとはるかにうまく統"
"合できます。 一元化されたモデルでは、外部プロジェクトの単一の任意のスナップ"
"ショットが独自のリビジョン管理からエクスポートされ、ベンダーブランチのローカ"
"ルリビジョン管理にインポートされます。すべての歴史は隠されています。分散リビ"
"ジョン管理を使用すると、外部履歴全体のクローンを作成し、開発をより簡単に追跡"
"して、ローカルの変更を再マージできます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3492
msgid ""
"Git's submodule support allows a repository to contain, as a subdirectory, a "
"checkout of an external project.  Submodules maintain their own identity; "
"the submodule support just stores the submodule repository location and "
"commit ID, so other developers who clone the containing project "
"(\"superproject\") can easily clone all the submodules at the same "
"revision.  Partial checkouts of the superproject are possible: you can tell "
"Git to clone none, some or all of the submodules."
msgstr ""
"Gitはサブモジュールのサポートにより、リポジトリに外部プロジェクトのチェックア"
"ウトをサブディレクトリとして含めることができます。サブモジュールは独自のIDを"
"維持します。サブモジュールサポートは、サブモジュールリポジトリの場所とコミッ"
"トIDを格納するだけなので、包含するプロジェクト(\"superproject\")を複製する他"
"の開発者は、同一リビジョンのすべてのサブモジュールを簡単に複製できます。スー"
"パープロジェクトの部分的なチェックアウトができます。あなたはサブモジュールの"
"クローンを作成しない、一部、またはすべてを複製するようにGitに指示できます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3497
msgid ""
"The linkgit:git-submodule[1] command is available since Git 1.5.3.  Users "
"with Git 1.5.2 can look up the submodule commits in the repository and "
"manually check them out; earlier versions won't recognize the submodules at "
"all."
msgstr ""
"linkgit:git-submodule[1] コマンドは、Git1.5.3以降で使用できます。Git 1.5.2を"
"使用しているユーザーは、リポジトリでサブモジュールのコミットを検索し、手動で"
"チェックアウトできます。それ以前のバージョンはサブモジュールをまったく認識し"
"ません。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3500
msgid ""
"To see how submodule support works, create four example repositories that "
"can be used later as a submodule:"
msgstr ""
"サブモジュールのサポートがどのように機能するかを確認するには、ここで、後でサ"
"ブモジュールとして使用できる4つのリポジトリ例を作成します:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3514
#, no-wrap
msgid ""
"$ mkdir ~/git\n"
"$ cd ~/git\n"
"$ for i in a b c d\n"
"do\n"
"\tmkdir $i\n"
"\tcd $i\n"
"\tgit init\n"
"\techo \"module $i\" > $i.txt\n"
"\tgit add $i.txt\n"
"\tgit commit -m \"Initial commit, submodule $i\"\n"
"\tcd ..\n"
"done\n"
msgstr ""
"$ mkdir ~/git\n"
"$ cd ~/git\n"
"$ for i in a b c d\n"
"do\n"
"\tmkdir $i\n"
"\tcd $i\n"
"\tgit init\n"
"\techo \"module $i\" > $i.txt\n"
"\tgit add $i.txt\n"
"\tgit commit -m \"Initial commit, submodule $i\"\n"
"\tcd ..\n"
"done\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3517
msgid "Now create the superproject and add all the submodules:"
msgstr ""
"次に、スーパープロジェクトを作成し、すべてのサブモジュールを追加します:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3526
#, no-wrap
msgid ""
"$ mkdir super\n"
"$ cd super\n"
"$ git init\n"
"$ for i in a b c d\n"
"do\n"
"\tgit submodule add ~/git/$i $i\n"
"done\n"
msgstr ""
"$ mkdir super\n"
"$ cd super\n"
"$ git init\n"
"$ for i in a b c d\n"
"do\n"
"\tgit submodule add ~/git/$i $i\n"
"done\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3529
msgid "Do not use local URLs here if you plan to publish your superproject!"
msgstr ""
"！スーパープロジェクトを公開する予定がある場合は、ここでローカルURLを使用して"
"はいけません！"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3531
msgid "See what files `git submodule` created:"
msgstr "`git submodule` が作成したファイルをご覧下さい:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3535
#, no-wrap
msgid ""
"$ ls -a\n"
".  ..  .git  .gitmodules  a  b  c  d\n"
msgstr ""
"$ ls -a\n"
".  ..  .git  .gitmodules  a  b  c  d\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3538
msgid "The `git submodule add <repo> <path>` command does a couple of things:"
msgstr "`git submodule add <repo> <path>` コマンドは以下のことを行います:"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3541
msgid ""
"It clones the submodule from `<repo>` to the given `<path>` under the "
"current directory and by default checks out the master branch."
msgstr ""
"サブモジュールを `<repo>` から現在のディレクトリの下の指定された `<path>` に"
"複製し、デフォルトでmasterブランチをチェックアウトします。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3543
msgid ""
"It adds the submodule's clone path to the linkgit:gitmodules[5] file and "
"adds this file to the index, ready to be committed."
msgstr ""
"サブモジュールのクローンパスを linkgit:gitmodules[5] ファイルに追加し、この"
"ファイルをインデックスに追加して、コミットの準備をします。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3545
msgid ""
"It adds the submodule's current commit ID to the index, ready to be "
"committed."
msgstr ""
"サブモジュールの現在のコミットIDをインデックスに追加し、コミットの準備をしま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3547
msgid "Commit the superproject:"
msgstr "スーパープロジェクトをコミットします:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3550
#, no-wrap
msgid "$ git commit -m \"Add submodules a, b, c and d.\"\n"
msgstr "$ git commit -m \"Add submodules a, b, c and d.\"\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3553
msgid "Now clone the superproject:"
msgstr "次に、スーパープロジェクトのクローンを作成します:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3558
#, no-wrap
msgid ""
"$ cd ..\n"
"$ git clone super cloned\n"
"$ cd cloned\n"
msgstr ""
"$ cd ..\n"
"$ git clone super cloned\n"
"$ cd cloned\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3561
msgid "The submodule directories are there, but they're empty:"
msgstr "サブモジュールディレクトリは存在しますが、空です:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3570
#, no-wrap
msgid ""
"$ ls -a a\n"
".  ..\n"
"$ git submodule status\n"
"-d266b9873ad50488163457f025db7cdd9683d88b a\n"
"-e81d457da15309b4fef4249aba9b50187999670d b\n"
"-c1536a972b9affea0f16e0680ba87332dc059146 c\n"
"-d96249ff5d57de5de093e6baff9e0aafa5276a74 d\n"
msgstr ""
"$ ls -a a\n"
".  ..\n"
"$ git submodule status\n"
"-d266b9873ad50488163457f025db7cdd9683d88b a\n"
"-e81d457da15309b4fef4249aba9b50187999670d b\n"
"-c1536a972b9affea0f16e0680ba87332dc059146 c\n"
"-d96249ff5d57de5de093e6baff9e0aafa5276a74 d\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3575
msgid ""
"The commit object names shown above would be different for you, but they "
"should match the HEAD commit object names of your repositories.  You can "
"check it by running `git ls-remote ../a`."
msgstr ""
"上記のコミットオブジェクト名はユーザーによって異なりますが、リポジトリのHEAD"
"コミットオブジェクト名と一致している必要があります。 `git ls-remote ../a` を"
"実行することで確認できます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3578
msgid ""
"Pulling down the submodules is a two-step process. First run `git submodule "
"init` to add the submodule repository URLs to `.git/config`:"
msgstr ""
"サブモジュールを引き出すのは2段階のプロセスです。 最初に `git submodule "
"init` を実行して、サブモジュールリポジトリのURLを `.git/config` に追加します:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3581
#, no-wrap
msgid "$ git submodule init\n"
msgstr "$ git submodule init\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3585
msgid ""
"Now use `git submodule update` to clone the repositories and check out the "
"commits specified in the superproject:"
msgstr ""
"次に、 `git submodule update` を使用してリポジトリのクローンを作成し、スー"
"パープロジェクトでチェックアウトされているコミットを確認します:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3591
#, no-wrap
msgid ""
"$ git submodule update\n"
"$ cd a\n"
"$ ls -a\n"
".  ..  .git  a.txt\n"
msgstr ""
"$ git submodule update\n"
"$ cd a\n"
"$ ls -a\n"
".  ..  .git  a.txt\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3597
msgid ""
"One major difference between `git submodule update` and `git submodule add` "
"is that `git submodule update` checks out a specific commit, rather than the "
"tip of a branch. It's like checking out a tag: the head is detached, so "
"you're not working on a branch."
msgstr ""
"`git submodule update` と `git submodule add` の大きな違いの1つは、 `git "
"submodule update` がブランチの先端ではなく、特定のコミットをチェックアウトす"
"ることです。これは、タグをチェックアウトするようなものです。ヘッドが切り離さ"
"れているため、あなたはブランチで作業していません。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3602
#, no-wrap
msgid ""
"$ git branch\n"
"* (detached from d266b98)\n"
"  master\n"
msgstr ""
"$ git branch\n"
"* (detached from d266b98)\n"
"  master\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3608
msgid ""
"If you want to make a change within a submodule and you have a detached "
"head, then you should create or checkout a branch, make your changes, "
"publish the change within the submodule, and then update the superproject to "
"reference the new commit:"
msgstr ""
"サブモジュール内で変更を加えたい場合で、ヘッドが切り離されている場合は、ブラ"
"ンチを作成またはチェックアウトし、変更を加え、サブモジュール内で変更を公開し"
"てから、スーパープロジェクトを更新して新しいコミットを参照する必要があります:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3611
#, no-wrap
msgid "$ git switch master\n"
msgstr "$ git switch master\n"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3617
#, no-wrap
msgid "$ git switch -c fix-up\n"
msgstr "$ git switch -c fix-up\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3620
msgid "then"
msgstr "してから"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3637
#, no-wrap
msgid ""
"$ echo \"adding a line again\" >> a.txt\n"
"$ git commit -a -m \"Updated the submodule from within the superproject.\"\n"
"$ git push\n"
"$ cd ..\n"
"$ git diff\n"
"diff --git a/a b/a\n"
"index d266b98..261dfac 160000\n"
"--- a/a\n"
"+++ b/a\n"
"@@ -1 +1 @@\n"
"-Subproject commit d266b9873ad50488163457f025db7cdd9683d88b\n"
"+Subproject commit 261dfac35cb99d380eb966e102c1197139f7fa24\n"
"$ git add a\n"
"$ git commit -m \"Updated submodule a.\"\n"
"$ git push\n"
msgstr ""
"$ echo \"adding a line again\" >> a.txt\n"
"$ git commit -a -m \"Updated the submodule from within the superproject.\"\n"
"$ git push\n"
"$ cd ..\n"
"$ git diff\n"
"diff --git a/a b/a\n"
"index d266b98..261dfac 160000\n"
"--- a/a\n"
"+++ b/a\n"
"@@ -1 +1 @@\n"
"-Subproject commit d266b9873ad50488163457f025db7cdd9683d88b\n"
"+Subproject commit 261dfac35cb99d380eb966e102c1197139f7fa24\n"
"$ git add a\n"
"$ git commit -m \"Updated submodule a.\"\n"
"$ git push\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3641
msgid ""
"You have to run `git submodule update` after `git pull` if you want to "
"update submodules, too."
msgstr ""
"サブモジュールも更新する場合は、 `git pull` の後に `git submodule update` を"
"実行する必要があります。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:3643
#, no-wrap
msgid "Pitfalls with submodules"
msgstr "サブモジュールの落とし穴"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3648
msgid ""
"Always publish the submodule change before publishing the change to the "
"superproject that references it. If you forget to publish the submodule "
"change, others won't be able to clone the repository:"
msgstr ""
"サブモジュールの変更を参照するスーパープロジェクトに変更を公開する前に、必ず"
"サブモジュールの変更を公開してください。サブモジュールの変更を公開するのを忘"
"れると、他の人はリポジトリのクローンを作成できなくなります:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3663
#, no-wrap
msgid ""
"$ cd ~/git/super/a\n"
"$ echo i added another line to this file >> a.txt\n"
"$ git commit -a -m \"doing it wrong this time\"\n"
"$ cd ..\n"
"$ git add a\n"
"$ git commit -m \"Updated submodule a again.\"\n"
"$ git push\n"
"$ cd ~/git/cloned\n"
"$ git pull\n"
"$ git submodule update\n"
"error: pathspec '261dfac35cb99d380eb966e102c1197139f7fa24' did not match any file(s) known to git.\n"
"Did you forget to 'git add'?\n"
"Unable to checkout '261dfac35cb99d380eb966e102c1197139f7fa24' in submodule path 'a'\n"
msgstr ""
"$ cd ~/git/super/a\n"
"$ echo i added another line to this file >> a.txt\n"
"$ git commit -a -m \"doing it wrong this time\"\n"
"$ cd ..\n"
"$ git add a\n"
"$ git commit -m \"Updated submodule a again.\"\n"
"$ git push\n"
"$ cd ~/git/cloned\n"
"$ git pull\n"
"$ git submodule update\n"
"error: pathspec '261dfac35cb99d380eb966e102c1197139f7fa24' did not match any file(s) known to git.\n"
"Did you forget to 'git add'?\n"
"Unable to checkout '261dfac35cb99d380eb966e102c1197139f7fa24' in submodule path 'a'\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3672
msgid ""
"In older Git versions it could be easily forgotten to commit new or modified "
"files in a submodule, which silently leads to similar problems as not "
"pushing the submodule changes. Starting with Git 1.7.0 both `git status` and "
"`git diff` in the superproject show submodules as modified when they contain "
"new or modified files to protect against accidentally committing such a "
"state. `git diff` will also add a `-dirty` to the work tree side when "
"generating patch output or used with the `--submodule` option:"
msgstr ""
"古いバージョンのGitでは、サブモジュールで新しいファイルや変更されたファイルを"
"コミットすることを簡単に忘れてしまう可能性があります。これにより、サブモ"
"ジュールの変更をプッシュしないのと同様の問題が発生します。 Git 1.7.0以降、"
"スーパープロジェクトの `git status` と `git diff` はどちらも、サブモジュール"
"が誤ってそのような状態になるのを防ぐために、新しいファイルまたは変更された"
"ファイルが含まれている場合に変更されたものとして表示します。 `git diff` は、"
"パッチ出力を生成するとき、または `--submodule` オプションとともに使用するとき"
"に、作業ツリー側に `-dirty` と付加します:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3683
#, no-wrap
msgid ""
"$ git diff\n"
"diff --git a/sub b/sub\n"
"--- a/sub\n"
"+++ b/sub\n"
"@@ -1 +1 @@\n"
"-Subproject commit 3f356705649b5d566d97ff843cf193359229a453\n"
"+Subproject commit 3f356705649b5d566d97ff843cf193359229a453-dirty\n"
"$ git diff --submodule\n"
"Submodule sub 3f35670..3f35670-dirty:\n"
msgstr ""
"$ git diff\n"
"diff --git a/sub b/sub\n"
"--- a/sub\n"
"+++ b/sub\n"
"@@ -1 +1 @@\n"
"-Subproject commit 3f356705649b5d566d97ff843cf193359229a453\n"
"+Subproject commit 3f356705649b5d566d97ff843cf193359229a453-dirty\n"
"$ git diff --submodule\n"
"Submodule sub 3f35670..3f35670-dirty:\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3687
msgid ""
"You also should not rewind branches in a submodule beyond commits that were "
"ever recorded in any superproject."
msgstr ""
"また、スーパープロジェクトでこれまでに記録されたコミットを超えて、サブモ"
"ジュールのブランチを巻き戻さないでください。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3691
msgid ""
"It's not safe to run `git submodule update` if you've made and committed "
"changes within a submodule without checking out a branch first. They will be "
"silently overwritten:"
msgstr ""
"最初にブランチをチェックアウトせずにサブモジュール内で変更を加えてコミットし"
"た場合、 `git submodule update` を実行するのは安全ではありません。 それらは"
"黙って上書きされます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3703
#, no-wrap
msgid ""
"$ cat a.txt\n"
"module a\n"
"$ echo line added from private2 >> a.txt\n"
"$ git commit -a -m \"line added inside private2\"\n"
"$ cd ..\n"
"$ git submodule update\n"
"Submodule path 'a': checked out 'd266b9873ad50488163457f025db7cdd9683d88b'\n"
"$ cd a\n"
"$ cat a.txt\n"
"module a\n"
msgstr ""
"$ cat a.txt\n"
"module a\n"
"$ echo line added from private2 >> a.txt\n"
"$ git commit -a -m \"line added inside private2\"\n"
"$ cd ..\n"
"$ git submodule update\n"
"Submodule path 'a': checked out 'd266b9873ad50488163457f025db7cdd9683d88b'\n"
"$ cd a\n"
"$ cat a.txt\n"
"module a\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3706
msgid "The changes are still visible in the submodule's reflog."
msgstr "その変更は、サブモジュールのreflogに引き続き表示されます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3710
msgid ""
"If you have uncommitted changes in your submodule working tree, `git "
"submodule update` will not overwrite them.  Instead, you get the usual "
"warning about not being able switch from a dirty branch."
msgstr ""
"サブモジュールの作業ツリーにコミットされていない変更がある場合、 `git "
"submodule update` はそれらを上書きしません。 代わりに、ダーティブランチから切"
"り替えることができないという通常の警告が表示されます。"

#. type: Title ==
#: ../Documentation-sedout/user-manual.txt:3712
#, no-wrap
msgid "Low-level Git operations"
msgstr "Low-level Git operations"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3718
msgid ""
"Many of the higher-level commands were originally implemented as shell "
"scripts using a smaller core of low-level Git commands.  These can still be "
"useful when doing unusual things with Git, or just as a way to understand "
"its inner workings."
msgstr ""
"高レベルのコマンドの多くは、かつては低レベルのGitコマンドの小さなコアを使用す"
"るシェルスクリプトとして実装されていました。これらは、Gitで通常とは異なること"
"を行う場合、またはGitの内部動作を理解する方法としても役立ちます。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:3720
#, no-wrap
msgid "Object access and manipulation"
msgstr "Object access and manipulation"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3724
msgid ""
"The linkgit:git-cat-file[1] command can show the contents of any object, "
"though the higher-level linkgit:git-show[1] is usually more useful."
msgstr ""
"linkgit:git-cat-file[1] コマンドは、任意のオブジェクトの内容を表示できます"
"が、通常は、より高いレベルの linkgit:git-show[1] の方が便利です。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3727
msgid ""
"The linkgit:git-commit-tree[1] command allows constructing commits with "
"arbitrary parents and trees."
msgstr ""
"linkgit:git-commit-tree[1] コマンドを使用すると、任意の親とツリーを使用してコ"
"ミットを構築できます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3731
msgid ""
"A tree can be created with linkgit:git-write-tree[1] and its data can be "
"accessed by linkgit:git-ls-tree[1].  Two trees can be compared with linkgit:"
"git-diff-tree[1]."
msgstr ""
"ツリーは linkgit:git-write-tree[1] で作成でき、そのデータには linkgit:git-ls-"
"tree[1] でアクセスできます。 2つのツリーを linkgit:git-diff-tree[1] で比較で"
"きます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3735
msgid ""
"A tag is created with linkgit:git-mktag[1], and the signature can be "
"verified by linkgit:git-verify-tag[1], though it is normally simpler to use "
"linkgit:git-tag[1] for both."
msgstr ""
"タグは linkgit:git-mktag[1] で作成され、署名は linkgit:git-verify-tag[1] で確"
"認できますが、通常は両方に linkgit:git-tag[1] を使用する方が簡単です。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:3737
#, no-wrap
msgid "The Workflow"
msgstr "The Workflow"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3744
msgid ""
"High-level operations such as linkgit:git-commit[1] and linkgit:git-"
"restore[1] work by moving data between the working tree, the index, and the "
"object database.  Git provides low-level operations which perform each of "
"these steps individually."
msgstr ""
"linkgit:git-commit[1] や linkgit:git-restore[1] などの高レベルの操作は、作業"
"ツリー、インデックス、およびオブジェクトデータベース間でデータを移動すること"
"によって機能します。 Gitは、これらの各ステップを個別に実行する低レベルの操作"
"を提供します。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3750
msgid ""
"Generally, all Git operations work on the index file. Some operations work "
"*purely* on the index file (showing the current state of the index), but "
"most operations move data between the index file and either the database or "
"the working directory. Thus there are four main combinations:"
msgstr ""
"通常、すべてのGit操作はインデックスファイルで機能します。一部の操作はインデッ"
"クスファイルに対して*純粋に*機能します(インデックスの現在の状態を示す)が、ほ"
"とんどの操作は、インデックスファイルとデータベースまたは作業ディレクトリの間"
"でデータを移動します。 したがって、Git操作には4つの主要な組み合わせがありま"
"す:"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:3752
#, no-wrap
msgid "working directory -> index"
msgstr "working directory → index"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3758
msgid ""
"The linkgit:git-update-index[1] command updates the index with information "
"from the working directory.  You generally update the index information by "
"just specifying the filename you want to update, like so:"
msgstr ""
"linkgit:git-update-index[1] コマンドは、作業ディレクトリからの情報でインデッ"
"クスを更新します。 通常、以下のように、更新するファイル名を指定するだけでイン"
"デックス情報を更新します:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3761
#, no-wrap
msgid "$ git update-index filename\n"
msgstr "$ git update-index filename\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3766
msgid ""
"but to avoid common mistakes with filename globbing etc., the command will "
"not normally add totally new entries or remove old entries, i.e. it will "
"normally just update existing cache entries."
msgstr ""
"ただし、ファイル名のグロブなどでよくある間違いを避けるために、コマンドは通"
"常、まったく新しいエントリを追加したり、古いエントリを削除したりしません。つ"
"まり、通常は既存のキャッシュエントリを更新するだけです。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3770
msgid ""
"To tell Git that yes, you really do realize that certain files no longer "
"exist, or that new files should be added, you should use the `--remove` and "
"`--add` flags respectively."
msgstr ""
"つまり、特定のファイルがもう存在しないこと、または新しいファイルを追加する必"
"要があることをGitに伝えるには、それぞれ `--remove` フラグと `--add` フラグを"
"使用する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3777
msgid ""
"NOTE! A `--remove` flag does 'not' mean that subsequent filenames will "
"necessarily be removed: if the files still exist in your directory "
"structure, the index will be updated with their new status, not removed. The "
"only thing `--remove` means is that update-index will be considering a "
"removed file to be a valid thing, and if the file really does not exist any "
"more, it will update the index accordingly."
msgstr ""
"注意！ `--remove` フラグは、そのフラグの後ろに記述されたファイル名が必ずしも"
"削除されることを意味しません。ファイルがディレクトリ構造にまだ存在する場合、"
"インデックスは削除されずに新しいステータスで更新されます。 `--remove` が意味"
"する唯一のことは、update-indexが削除されたファイルを有効なものと見なし、ファ"
"イルが実際に存在しなくなった場合、それに応じてインデックスを更新することで"
"す。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3783
msgid ""
"As a special case, you can also do `git update-index --refresh`, which will "
"refresh the \"stat\" information of each index to match the current stat "
"information. It will 'not' update the object status itself, and it will only "
"update the fields that are used to quickly test whether an object still "
"matches its old backing store object."
msgstr ""
"特別な場合として、 `git update-index --refresh` を実行することもできます。こ"
"れにより、各インデックスの「統計」情報が現在の統計情報と一致するように更新さ"
"れます。オブジェクトのステータス自体は「更新されません」。オブジェクトが古い"
"バッキングストアオブジェクトとまだ一致するかどうかをすばやくテストするために"
"使用されるフィールドのみが更新されます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3786
msgid ""
"The previously introduced linkgit:git-add[1] is just a wrapper for linkgit:"
"git-update-index[1]."
msgstr ""
"以前紹介した linkgit:git-add[1] は、 linkgit:git-update-index[1] の単なるラッ"
"パーです。"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:3788
#, no-wrap
msgid "index -> object database"
msgstr "index → object database"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3791
msgid "You write your current index file to a \"tree\" object with the program"
msgstr ""
"あなたは、プログラムを使用して、現在のインデックスファイルを「ツリー」オブ"
"ジェクトに書き込みます"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3794
#, no-wrap
msgid "$ git write-tree\n"
msgstr "$ git write-tree\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3801
msgid ""
"that doesn't come with any options--it will just write out the current index "
"into the set of tree objects that describe that state, and it will return "
"the name of the resulting top-level tree. You can use that tree to re-"
"generate the index at any time by going in the other direction:"
msgstr ""
"これにはオプションはありません。現在のインデックスをその状態を説明するツリー"
"オブジェクトのセットに書き出すだけです。そして結果の最上位ツリーの名前が返さ"
"れます。 そのツリーを使用して、いつでも別の方向からインデックスを再生成できま"
"す:"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:3803
#, no-wrap
msgid "object database -> index"
msgstr "object database → index"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3809
msgid ""
"You read a \"tree\" file from the object database, and use that to populate "
"(and overwrite--don't do this if your index contains any unsaved state that "
"you might want to restore later!) your current index.  Normal operation is "
"just"
msgstr ""
"オブジェクトデータベースから「ツリー」ファイルを読み取り、それを使用して現在"
"のインデックスにデータを入力します(そして上書きします。後で復元する可能性のあ"
"る未保存の状態がインデックスに含まれている場合は、やってはいけません！)。通常"
"の操作は以下の通り"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3812
#, no-wrap
msgid "$ git read-tree <SHA-1 of tree>\n"
msgstr "$ git read-tree <SHA-1 of tree>\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3817
msgid ""
"and your index file will now be equivalent to the tree that you saved "
"earlier. However, that is only your 'index' file: your working directory "
"contents have not been modified."
msgstr ""
"これで、インデックスファイルは前に保存したツリーと同等になります。 ただし、こ"
"れは「インデックス」ファイルのみです。作業ディレクトリの内容は変更されていま"
"せん。"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:3819
#, no-wrap
msgid "index -> working directory"
msgstr "index → working directory"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3826
msgid ""
"You update your working directory from the index by \"checking out\" files. "
"This is not a very common operation, since normally you'd just keep your "
"files updated, and rather than write to your working directory, you'd tell "
"the index files about the changes in your working directory (i.e. `git "
"update-index`)."
msgstr ""
"ファイルを「チェックアウト」することにより、インデックスから作業ディレクトリ"
"を更新します。これはあまり一般的な操作ではありません。通常はファイルを更新し"
"たままにし、作業ディレクトリに書き込むのではなく、作業ディレクトリの変更につ"
"いてインデックスファイルに通知するためです(つまり、 `git update-index` )。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3831
msgid ""
"However, if you decide to jump to a new version, or check out somebody "
"else's version, or just restore a previous tree, you'd populate your index "
"file with read-tree, and then you need to check out the result with"
msgstr ""
"ただし、新しいバージョンにジャンプしたり、他の人のバージョンをチェックアウト"
"したり、以前のツリーを復元したりする場合は、インデックスファイルにread-treeを"
"入力してから、結果をチェックアウトする必要があります。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3834
#, no-wrap
msgid "$ git checkout-index filename\n"
msgstr "$ git checkout-index filename\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3837
msgid "or, if you want to check out all of the index, use `-a`."
msgstr ""
"または、すべてのインデックスをチェックアウトする場合は、 `-a` を使用します。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3842
msgid ""
"NOTE! `git checkout-index` normally refuses to overwrite old files, so if "
"you have an old version of the tree already checked out, you will need to "
"use the `-f` flag ('before' the `-a` flag or the filename) to 'force' the "
"checkout."
msgstr ""
"注意！ `git checkout-index` は通常、古いファイルの上書きを拒否するため、古い"
"バージョンのツリーが既にチェックアウトされている場合は、 `-f` フラグを指定す"
"る( `-a` フラグ または filename より前に指定する)とチェックアウトを強制しま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3846
msgid ""
"Finally, there are a few odds and ends which are not purely moving from one "
"representation to the other:"
msgstr "最後に、これまでの範疇にない半端な話題をいくつか:"

#. type: Title ====
#: ../Documentation-sedout/user-manual.txt:3848
#, no-wrap
msgid "Tying it all together"
msgstr "全てを結び付ける"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3854
msgid ""
"To commit a tree you have instantiated with `git write-tree`, you'd create a "
"\"commit\" object that refers to that tree and the history behind it--most "
"notably the \"parent\" commits that preceded it in history."
msgstr ""
"`git write-tree` でインスタンス化したツリーをコミットするには、そのツリーとそ"
"の背後にある履歴(最も注目すべきは、履歴上、その前にあった「親」のコミットで"
"す)を参照する「commit」オブジェクトを作成します。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3860
msgid ""
"Normally a \"commit\" has one parent: the previous state of the tree before "
"a certain change was made. However, sometimes it can have two or more parent "
"commits, in which case we call it a \"merge\", due to the fact that such a "
"commit brings together (\"merges\") two or more previous states represented "
"by other commits."
msgstr ""
"通常、「コミット」には1つの親があります。つまり、特定の変更が行われる前のツ"
"リーの以前の状態です。ただし、2つ以上の親コミットを持つ場合もあります。その場"
"合、そのようなコミットは、他のコミットによって表される2つ以上の以前の状態をま"
"とめる(「マージする」)ため、「マージ」と呼びます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3864
msgid ""
"In other words, while a \"tree\" represents a particular directory state of "
"a working directory, a \"commit\" represents that state in time, and "
"explains how we got there."
msgstr ""
"つまり、「ツリー」は作業ディレクトリの特定のディレクトリ状態を表し、「コミッ"
"ト」は時間内のその状態を表し、どのようにしてそこに到達したかを説明します。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3867
msgid ""
"You create a commit object by giving it the tree that describes the state at "
"the time of the commit, and a list of parents:"
msgstr ""
"コミット時の状態を説明するツリーと親のリストをオブジェクトに与えることで、コ"
"ミットオブジェクトを作成します:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3870
#, no-wrap
msgid "$ git commit-tree <tree> -p <parent> [(-p <parent2>)...]\n"
msgstr "$ git commit-tree <tree> -p <parent> [(-p <parent2>)...]\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3874
msgid ""
"and then giving the reason for the commit on stdin (either through "
"redirection from a pipe or file, or by just typing it at the tty)."
msgstr ""
"次に、stdinでコミットの理由を示します(パイプまたはファイルからのリダイレク"
"ト、またはttyで入力するだけ)。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3881
msgid ""
"`git commit-tree` will return the name of the object that represents that "
"commit, and you should save it away for later use. Normally, you'd commit a "
"new `HEAD` state, and while Git doesn't care where you save the note about "
"that state, in practice we tend to just write the result to the file pointed "
"at by `.git/HEAD`, so that we can always see what the last committed state "
"was."
msgstr ""
"`git commit-tree` は、そのコミットを表すオブジェクトの名前を返します。あなた"
"はそれを後で使用できるように保存しておくべきです。 通常、新しい `HEAD` 状態を"
"コミットし、Gitはその状態に関するメモをどこに保存するかを気にしませんが、実際"
"には、最後にコミットされた状態が何であったかを常に確認できるように、 `.git/"
"HEAD` が指すファイルに結果を書き込む傾向があります。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3883
msgid "Here is a picture that illustrates how various pieces fit together:"
msgstr "以下は、さまざまな部分がどのように組み合わされるかを示す図です:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3917
#, no-wrap
msgid ""
"                     commit-tree\n"
"                      commit obj\n"
"                       +----+\n"
"                       |    |\n"
"                       |    |\n"
"                       V    V\n"
"                    +-----------+\n"
"                    | Object DB |\n"
"                    |  Backing  |\n"
"                    |   Store   |\n"
"                    +-----------+\n"
"                       ^\n"
"           write-tree  |     |\n"
"             tree obj  |     |\n"
"                       |     |  read-tree\n"
"                       |     |  tree obj\n"
"                             V\n"
"                    +-----------+\n"
"                    |   Index   |\n"
"                    |  \"cache\"  |\n"
"                    +-----------+\n"
"         update-index  ^\n"
"             blob obj  |     |\n"
"                       |     |\n"
"    checkout-index -u  |     |  checkout-index\n"
"             stat      |     |  blob obj\n"
"                             V\n"
"                    +-----------+\n"
"                    |  Working  |\n"
"                    | Directory |\n"
"                    +-----------+\n"
msgstr ""
"                     commit-tree\n"
"                      commit obj\n"
"                       +----+\n"
"                       |    |\n"
"                       |    |\n"
"                       V    V\n"
"                    +-----------+\n"
"                    | Object DB |\n"
"                    |  Backing  |\n"
"                    |   Store   |\n"
"                    +-----------+\n"
"                       ^\n"
"           write-tree  |     |\n"
"             tree obj  |     |\n"
"                       |     |  read-tree\n"
"                       |     |  tree obj\n"
"                             V\n"
"                    +-----------+\n"
"                    |   Index   |\n"
"                    |  \"cache\"  |\n"
"                    +-----------+\n"
"         update-index  ^\n"
"             blob obj  |     |\n"
"                       |     |\n"
"    checkout-index -u  |     |  checkout-index\n"
"             stat      |     |  blob obj\n"
"                             V\n"
"                    +-----------+\n"
"                    |  Working  |\n"
"                    | Directory |\n"
"                    +-----------+\n"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:3922
#, no-wrap
msgid "Examining the data"
msgstr "Examining the data"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3928
msgid ""
"You can examine the data represented in the object database and the index "
"with various helper tools. For every object, you can use linkgit:git-cat-"
"file[1] to examine details about the object:"
msgstr ""
"あなたはさまざまなヘルパーツールを使用して、オブジェクトデータベースとイン"
"デックスに表示されているデータを調べることができます。すべてのオブジェクトに"
"ついて、 linkgit:git-cat-file[1] を使用して、オブジェクトに関する詳細を調べる"
"ことができます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3931
#, no-wrap
msgid "$ git cat-file -t <objectname>\n"
msgstr "$ git cat-file -t <objectname>\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3935
msgid ""
"shows the type of the object, and once you have the type (which is usually "
"implicit in where you find the object), you can use"
msgstr ""
"上記はオブジェクトのタイプを表示します。タイプを取得すると(もっとも、通常はオ"
"ブジェクトの配置場所で自明ではありますけれども)、以下を使用できます"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3938
#, no-wrap
msgid "$ git cat-file blob|tree|commit|tag <objectname>\n"
msgstr "$ git cat-file blob|tree|commit|tag <objectname>\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3944
msgid ""
"to show its contents. NOTE! Trees have binary content, and as a result there "
"is a special helper for showing that content, called `git ls-tree`, which "
"turns the binary content into a more easily readable form."
msgstr ""
"とすると、その内容を表示します。 注意！ ツリーの内容はバイナリです。よって、"
"その内容を表示するための「git ls-tree」と呼ばれる特別なヘルパーが、内容のバイ"
"ナリをより読みやすい形式に変換します。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3949
msgid ""
"It's especially instructive to look at \"commit\" objects, since those tend "
"to be small and fairly self-explanatory. In particular, if you follow the "
"convention of having the top commit name in `.git/HEAD`, you can do"
msgstr ""
"「コミット」オブジェクトは小さく、かなり自明である傾向があるため、それらを確"
"認することは特に有益です。 特に、あなたが `.git/HEAD` に先頭コミット名を付け"
"るという規則に従うと、以下のことができます。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3952
#, no-wrap
msgid "$ git cat-file commit HEAD\n"
msgstr "$ git cat-file commit HEAD\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3955
msgid "to see what the top commit was."
msgstr "は、先頭コミットが何であったかを表示します。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:3957
#, no-wrap
msgid "Merging multiple trees"
msgstr "Merging multiple trees"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3964
msgid ""
"Git can help you perform a three-way merge, which can in turn be used for a "
"many-way merge by repeating the merge procedure several times.  The usual "
"situation is that you only do one three-way merge (reconciling two lines of "
"history) and commit the result, but if you like to, you can merge several "
"branches in one go."
msgstr ""
"Gitは、3方向マージを実行するのに役立ちます。これは、マージ手順を数回繰り返す"
"ことで、多方向マージに使用できます。 通常の状況では、3方向マージ(2ラインの履"
"歴の調整)を1回だけ実行して結果をコミットしますが、必要に応じて、一度に複数の"
"ブランチをマージできます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3968
msgid ""
"To perform a three-way merge, you start with the two commits you want to "
"merge, find their closest common parent (a third commit), and compare the "
"trees corresponding to these three commits."
msgstr ""
"3方向マージを実行するには、マージする2つのコミットから開始し、最も近い共通の"
"親(3番目のコミット)を見つけて、これら3つのコミットに対応するツリーを比較しま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3971
msgid ""
"To get the \"base\" for the merge, look up the common parent of two commits:"
msgstr "マージの「ベース」を取得するには、2つのコミットの共通の親を検索します:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3974
#, no-wrap
msgid "$ git merge-base <commit1> <commit2>\n"
msgstr "$ git merge-base <commit1> <commit2>\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3979
msgid ""
"This prints the name of a commit they are both based on. You should now look "
"up the tree objects of those commits, which you can easily do with"
msgstr ""
"これにより、両方が基づいているコミットの名前が出力されます。これらのコミット"
"のツリーオブジェクトを検索する必要があります。これは、以下の方法で簡単に実行"
"できます"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3982
#, no-wrap
msgid "$ git cat-file commit <commitname> | head -1\n"
msgstr "$ git cat-file commit <commitname> | head -1\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3986
msgid ""
"since the tree object information is always the first line in a commit "
"object."
msgstr ""
"これは、ツリーオブジェクト情報は常にコミットオブジェクトの最初の行にからで"
"す。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3994
msgid ""
"Once you know the three trees you are going to merge (the one \"original\" "
"tree, aka the common tree, and the two \"result\" trees, aka the branches "
"you want to merge), you do a \"merge\" read into the index. This will "
"complain if it has to throw away your old index contents, so you should make "
"sure that you've committed those--in fact you would normally always do a "
"merge against your last commit (which should thus match what you have in "
"your current index anyway)."
msgstr ""
"マージする3つのツリー(1つの「元の」ツリー（別名共通ツリー）と2つの「結果」ツ"
"リー（別名マージするブランチ))が分かったら、インデックスに「マージ」読み取り"
"を行います。 古いインデックスの内容を破棄する必要がある場合には文句を言うの"
"で、それらをコミット済であることをことを確認する必要があります。実際、通常は"
"常に最後のコミットに対してマージを実行します(したがって、とにかく現在のイン"
"デックスにあるものと一致する必要があります)。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:3996
msgid "To do the merge, do"
msgstr "マージを行うには以下を行います"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:3999
#, no-wrap
msgid "$ git read-tree -m -u <origtree> <yourtree> <targettree>\n"
msgstr "$ git read-tree -m -u <origtree> <yourtree> <targettree>\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4004
msgid ""
"which will do all trivial merge operations for you directly in the index "
"file, and you can just write the result out with `git write-tree`."
msgstr ""
"これにより、とるにたりない些細な3方向マージ操作(trivial merge operations)の全"
"てがインデックスファイルに対して直接実行され、 `git write-tree` を使用して結"
"果を書き出すことができます。(訳注:trivial;ラテン語「3 本の道が合する所，あり"
"ふれたこと」の意がある)"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:4007
#, no-wrap
msgid "Merging multiple trees, continued"
msgstr "Merging multiple trees, continued"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4015
msgid ""
"Sadly, many merges aren't trivial. If there are files that have been added, "
"moved or removed, or if both branches have modified the same file, you will "
"be left with an index tree that contains \"merge entries\" in it. Such an "
"index tree can 'NOT' be written out to a tree object, and you will have to "
"resolve any such merge clashes using other tools before you can write out "
"the result."
msgstr ""
"悲しいことに、多くのマージはとるにたりないものでもなく些細なものでもありませ"
"ん。 追加、移動、または削除されたファイルがある場合、または両方のブランチが同"
"じファイルを変更した場合は、「マージエントリ」を含むインデックスツリーが残り"
"ます。 このようなインデックスツリーはツリーオブジェクトに書き出すことはできま"
"せん。結果を書き出す前に、他のツールを使用してこのようなマージの衝突を解決す"
"る必要があります。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4018
msgid ""
"You can examine such index state with `git ls-files --unmerged` command.  An "
"example:"
msgstr ""
"このようなインデックスの状態は、 `git ls-files --unmerged` コマンドで調べるこ"
"とができます。 たとえば:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:4025
#, no-wrap
msgid ""
"$ git read-tree -m $orig HEAD $target\n"
"$ git ls-files --unmerged\n"
"100644 263414f423d0e4d70dae8fe53fa34614ff3e2860 1\thello.c\n"
"100644 06fa6a24256dc7e560efa5687fa84b51f0263c3a 2\thello.c\n"
"100644 cc44c73eb783565da5831b4d820c962954019b69 3\thello.c\n"
msgstr ""
"$ git read-tree -m $orig HEAD $target\n"
"$ git ls-files --unmerged\n"
"100644 263414f423d0e4d70dae8fe53fa34614ff3e2860 1\thello.c\n"
"100644 06fa6a24256dc7e560efa5687fa84b51f0263c3a 2\thello.c\n"
"100644 cc44c73eb783565da5831b4d820c962954019b69 3\thello.c\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4032
msgid ""
"Each line of the `git ls-files --unmerged` output begins with the blob mode "
"bits, blob SHA-1, 'stage number', and the filename.  The 'stage number' is "
"Git's way to say which tree it came from: stage 1 corresponds to the `$orig` "
"tree, stage 2 to the `HEAD` tree, and stage 3 to the `$target` tree."
msgstr ""
"`git ls-files --unmerged` 出力の各行は、ブロブモードビット、ブロブ SHA-1、"
"「ステージ番号」、ファイル名 です。 「ステージ番号」は、Gitがどのツリーから来"
"たかを示す方法です。ステージ1は「$orig」ツリーに対応し、ステージ2は「HEAD」ツ"
"リーに対応し、ステージ3は「$target」ツリーに対応します。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4043
msgid ""
"Earlier we said that trivial merges are done inside `git read-tree -m`.  For "
"example, if the file did not change from `$orig` to `HEAD` or `$target`, or "
"if the file changed from `$orig` to `HEAD` and `$orig` to `$target` the same "
"way, obviously the final outcome is what is in `HEAD`.  What the above "
"example shows is that file `hello.c` was changed from `$orig` to `HEAD` and "
"`$orig` to `$target` in a different way.  You could resolve this by running "
"your favorite 3-way merge program, e.g.  `diff3`, `merge`, or Git's own "
"merge-file, on the blob objects from these three stages yourself, like this:"
msgstr ""
"ささいなマージは `git read-tree -m` 内で行われると先に述べました。 たとえば、"
"ファイルが `$orig` から、 `HEAD` または `$target` に変更されなかった場合、ま"
"たは同様に、ファイルが `$orig` から `HEAD` に変更され、かつ、 `$orig` が "
"`$target` に変更された場合、最終的な結果は明らかに `HEAD` にあるものです。上"
"記の例が示すのは、ファイル `hello.c` が `$orig` から `HEAD` に、かつ、 `$ "
"orig` から `$target` に別の方法で変更されたことです。これは、以下のように、あ"
"なたのお気に入りの3方向マージプログラム、例えば、これら3つのステージのブロブ"
"オブジェクトに対する `diff3` または `merge` またはGit独自の merge-file を実行"
"することで解決できます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:4049
#, no-wrap
msgid ""
"$ git cat-file blob 263414f >hello.c~1\n"
"$ git cat-file blob 06fa6a2 >hello.c~2\n"
"$ git cat-file blob cc44c73 >hello.c~3\n"
"$ git merge-file hello.c~2 hello.c~1 hello.c~3\n"
msgstr ""
"$ git cat-file blob 263414f >hello.c~1\n"
"$ git cat-file blob 06fa6a2 >hello.c~2\n"
"$ git cat-file blob cc44c73 >hello.c~3\n"
"$ git merge-file hello.c~2 hello.c~1 hello.c~3\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4055
msgid ""
"This would leave the merge result in `hello.c~2` file, along with conflict "
"markers if there are conflicts.  After verifying the merge result makes "
"sense, you can tell Git what the final merge result for this file is by:"
msgstr ""
"これにより、競合がある場合は競合マーカーとともに、マージ結果が `hello.c~2` "
"ファイルに残ります。マージ結果が理にかなっていることを確認した後、あなたは、"
"このファイルの最終的なマージ結果が何であるかをGitに伝えることができます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:4059
#, no-wrap
msgid ""
"$ mv -f hello.c~2 hello.c\n"
"$ git update-index hello.c\n"
msgstr ""
"$ mv -f hello.c~2 hello.c\n"
"$ git update-index hello.c\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4063
msgid ""
"When a path is in the \"unmerged\" state, running `git update-index` for "
"that path tells Git to mark the path resolved."
msgstr ""
"パスが「マージされていない」状態の場合、そのパスに対して `git update-index` "
"を実行すると、Gitにパスを解決済みとしてマークするように指示します。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4069
msgid ""
"The above is the description of a Git merge at the lowest level, to help you "
"understand what conceptually happens under the hood.  In practice, nobody, "
"not even Git itself, runs `git cat-file` three times for this.  There is a "
"`git merge-index` program that extracts the stages to temporary files and "
"calls a \"merge\" script on it:"
msgstr ""
"上記は、内部で概念的に何が起こるかを理解するのに役立つ、最下位レベルでのGit"
"マージの説明です。 実際には、Git自体でさえも、このために `git cat-file` を3回"
"実行する人は誰もいません。ステージを一時ファイルに抽出し、その上で「マージ」"
"スクリプトを呼び出す `git merge-index` プログラムがあります:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:4072
#, no-wrap
msgid "$ git merge-index git-merge-one-file hello.c\n"
msgstr "$ git merge-index git-merge-one-file hello.c\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4075
msgid ""
"and that is what higher level `git merge -s resolve` is implemented with."
msgstr ""
"そして、これが、より高いレベルの `git merge -s resolve` の実装になっていま"
"す。"

#. type: Title ==
#: ../Documentation-sedout/user-manual.txt:4077
#, no-wrap
msgid "Hacking Git"
msgstr "Hacking Git"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4081
msgid ""
"This chapter covers internal details of the Git implementation which "
"probably only Git developers need to understand."
msgstr ""
"この章では、おそらくGit開発者だけが理解する必要があるGit実装の内部の詳細につ"
"いて説明します。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:4083
#, no-wrap
msgid "Object storage format"
msgstr "Object storage format"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4089
msgid ""
"All objects have a statically determined \"type\" which identifies the "
"format of the object (i.e. how it is used, and how it can refer to other "
"objects).  There are currently four different object types: \"blob\", "
"\"tree\", \"commit\", and \"tag\"."
msgstr ""
"すべてのオブジェクトには、オブジェクトの形式(つまり、オブジェクトの使用方法や"
"他のオブジェクトの参照方法)を識別する、静的に決定された「タイプ」( \"type\" )"
"があります。 現在、「blob」、「tree」、「commit」、「tag」の4つの異なるオブ"
"ジェクトタイプがあります。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4097
msgid ""
"Regardless of object type, all objects share the following characteristics: "
"they are all deflated with zlib, and have a header that not only specifies "
"their type, but also provides size information about the data in the "
"object.  It's worth noting that the SHA-1 hash that is used to name the "
"object is the hash of the original data plus this header, so `sha1sum` "
"'file' does not match the object name for 'file'."
msgstr ""
"オブジェクトタイプに関係なく、すべてのオブジェクトは次の特性を共有します: す"
"べてzlibで圧縮され、タイプを指定するだけでなく、オブジェクト内のデータに関す"
"るサイズ情報も提供するヘッダーがあります。オブジェクトの名前付けに使用される"
"SHA-1ハッシュは、 元のデータ＋ヘッダー のハッシュであるため、 `sha1sum` "
"'file' は 'file' のオブジェクト名と一致しないことに注意してください。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4105
msgid ""
"As a result, the general consistency of an object can always be tested "
"independently of the contents or the type of the object: all objects can be "
"validated by verifying that (a) their hashes match the content of the file "
"and (b) the object successfully inflates to a stream of bytes that forms a "
"sequence of `<ascii type without space> + <space> + <ascii decimal size> + "
"<byte\\0> + <binary object data>`."
msgstr ""
"その結果、オブジェクトの一般的な整合性は、オブジェクトの内容やタイプに関係な"
"く常にテストできます。すべてのオブジェクトは、 (a)ハッシュがファイルの内容と"
"一致、かつ、 (b)オブジェクトが、 `<ascii type without space> + <space> + "
"<ascii decimal size> + <byte\\0> + <binary object data>` というシーケンスのバ"
"イトストリームへちゃんと解凍できることで検証できます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4111
msgid ""
"The structured objects can further have their structure and connectivity to "
"other objects verified. This is generally done with the `git fsck` program, "
"which generates a full dependency graph of all objects, and verifies their "
"internal consistency (in addition to just verifying their superficial "
"consistency through the hash)."
msgstr ""
"構造化オブジェクトは、その構造と他のオブジェクトへの接続をさらに検証できま"
"す。 これは通常、すべてのオブジェクトの完全な依存関係グラフを生成し、（ハッ"
"シュを介して表面的な一貫性を検証するだけでなく）内部の一貫性を検証する "
"`gitfsck` プログラムを使用して行われます。"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:4113
#, no-wrap
msgid "A birds-eye view of Git's source code"
msgstr "Gitのソースコードを俯瞰する"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4118
msgid ""
"It is not always easy for new developers to find their way through Git's "
"source code.  This section gives you a little guidance to show where to "
"start."
msgstr ""
"新しい開発者がGitのソースコードを見つけるのは必ずしも簡単ではありません。この"
"節では、あなたがどこから始めればよいかを示すちょっとしたガイダンスを提供しま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4120
msgid "A good place to start is with the contents of the initial commit, with:"
msgstr "開始するのに適した場所は、最初のコミットの内容から始めることです:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:4123
#, no-wrap
msgid "$ git switch --detach e83c5163\n"
msgstr "$ git switch --detach e83c5163\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4127
msgid ""
"The initial revision lays the foundation for almost everything Git has "
"today, but is small enough to read in one sitting."
msgstr ""
"最初のリビジョンは、Gitが今日持っているほとんどすべての基礎を築きますが、一度"
"に読むには十分小さくまとまっています。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4131
msgid ""
"Note that terminology has changed since that revision.  For example, the "
"README in that revision uses the word \"changeset\" to describe what we now "
"call a <<def_commit_object,commit>>."
msgstr ""
"そのリビジョン以降、用語が変更されていることに注意してください。 たとえば、そ"
"のリビジョンのREADMEは、 \"changeset\" という単語を使用して、今、 "
"<<def_commit_object,commit>> と呼んでいるものを説明しています。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4134
msgid ""
"Also, we do not call it \"cache\" any more, but rather \"index\"; however, "
"the file is still called `read-cache.h`."
msgstr "また、 私たちはそれを「キャッシュ」(cache)と呼ぶのではなく、「インデックス」(index)と呼びます。 ただし、ファイルの名前は依然として `read-cache.h` です。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4137
msgid ""
"If you grasp the ideas in that initial commit, you should check out a more "
"recent version and skim `read-cache-ll.h`, `object.h` and `commit.h`."
msgstr "あなたが最初のコミットでGitの考え方を把握したなら、あなたはより新しいバージョンをチェックして、 `read-cache-ll.h` と `object.h` と `commit.h` を読み下すべきです。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4145
msgid ""
"In the early days, Git (in the tradition of UNIX) was a bunch of programs "
"which were extremely simple, and which you used in scripts, piping the "
"output of one into another. This turned out to be good for initial "
"development, since it was easier to test new things.  However, recently many "
"of these parts have become builtins, and some of the core has been "
"\"libified\", i.e. put into libgit.a for performance, portability reasons, "
"and to avoid code duplication."
msgstr ""
"初期のGitは、(UNIXの伝統でである)非常に単純なプログラムの集まりであり、スクリ"
"プトで使用して、出力を別のプログラムにパイプしていました。 新しいものをテスト"
"するのが簡単だったので、これは初期開発に適していました。ただし、最近、これら"
"のパーツの多くが組み込みになり、コアの一部が「解放」( \"libified\" )されまし"
"た。つまり、パフォーマンス、移植性、およびコードの重複を避けるために libgit."
"a に配置されました。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4152
msgid ""
"By now, you know what the index is (and find the corresponding data "
"structures in `read-cache-ll.h`), and that there are just a couple of object "
"types (blobs, trees, commits and tags) which inherit their common structure "
"from `struct object`, which is their first member (and thus, you can cast e."
"g.  `(struct object *)commit` to achieve the _same_ as `&commit->object`, i."
"e.  get at the object name and flags)."
msgstr "今や、 あなたはインデックスが何であるかを知り(そして、それに対応するデータ構造は `read-cache-ll.h` にある)、 その最初のメンバーである `struct object` から共通の構造を継承するオブジェクトタイプ(blobs と trees と commits と tags)が幾つかあることを知りました(したがって、 たとえば `(struct object *)commit` とキャストして、 `&commit->object` と全く同様の事を行う事ができます。 つまり、 オブジェクト名とフラグを取得を取得できるのです)。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4154
msgid "Now is a good point to take a break to let this information sink in."
msgstr "ここで、この情報を吸収するために一服するとしましょう。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4160
msgid ""
"Next step: get familiar with the object naming.  Read <<naming-commits>>.  "
"There are quite a few ways to name an object (and not only revisions!).  All "
"of these are handled in `sha1_name.c`. Just have a quick look at the "
"function `get_sha1()`. A lot of the special handling is done by functions "
"like `get_sha1_basic()` or the likes."
msgstr ""
"次のステップ: オブジェクトの命名に慣れてください。 <<naming-commits>> を読ん"
"でください。 オブジェクトに名前を付ける方法はたくさんあります(リビジョンだけ"
"ではありません！)。 これらはすべて `sha1_name.c` で処理されます。 関数 "
"`get_sha1()` をざっと見てください。特別な処理の多くは、 `get_sha1_basic()` な"
"どの関数によって実行されます。"

# https://eow.alc.co.jp/search?q=get+into+the+groove
# get into the groove
# 〈俗〉調子が出る、絶好調になる、うまく適応する、〔新しい生活などの〕リズムに慣れる◆【参考】get into a groove
#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4163
msgid ""
"This is just to get you into the groove for the most libified part of Git: "
"the revision walker."
msgstr ""
"リビジョンウォーカー。これはGitの最も解放(libified)された部分にあなたがうまく"
"適応できるようにします。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4165
msgid "Basically, the initial version of `git log` was a shell script:"
msgstr ""
"基本から行きましょう。 `git log` の初期バージョンは、シェルスクリプトでした:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:4169
#, no-wrap
msgid ""
"$ git-rev-list --pretty $(git-rev-parse --default HEAD \"$@\") | \\\n"
"\tLESS=-S ${PAGER:-less}\n"
msgstr ""
"$ git-rev-list --pretty $(git-rev-parse --default HEAD \"$@\") | \\\n"
"\tLESS=-S ${PAGER:-less}\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4172
msgid "What does this mean?"
msgstr "これはどういう意味か？"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4177
msgid ""
"`git rev-list` is the original version of the revision walker, which "
"_always_ printed a list of revisions to stdout.  It is still functional, and "
"needs to, since most new Git commands start out as scripts using `git rev-"
"list`."
msgstr ""
"`git rev-list` は、リビジョンウォーカーのオリジナルバージョンであり、「常に」"
"stdoutにリビジョンのリストを出力します。ほとんどの新しいGitコマンドは `git "
"rev-list` を使用するスクリプトとして開始されるため、これは引き続き機能し続け"
"る必要があります。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4181
msgid ""
"`git rev-parse` is not as important any more; it was only used to filter out "
"options that were relevant for the different plumbing commands that were "
"called by the script."
msgstr ""
"`gitrev-parse` はもはやそれほど重要ではありません。これは、スクリプトによって"
"呼び出されたさまざまな配管コマンドに関連するオプションを除外するためにのみ使"
"用されました。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4185
msgid ""
"Most of what `git rev-list` did is contained in `revision.c` and `revision."
"h`.  It wraps the options in a struct named `rev_info`, which controls how "
"and what revisions are walked, and more."
msgstr ""
"`git rev-list` が行ったことのほとんどは、 `revision.c` と `revision.h` に含ま"
"れています。 オプションを `rev_info` という名前の構造体でラップします。この構"
"造体は、どのリビジョンをどのように歩くか(walk)などを制御します。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4193
msgid ""
"The original job of `git rev-parse` is now taken by the function "
"`setup_revisions()`, which parses the revisions and the common command-line "
"options for the revision walker. This information is stored in the struct "
"`rev_info` for later consumption. You can do your own command-line option "
"parsing after calling `setup_revisions()`. After that, you have to call "
"`prepare_revision_walk()` for initialization, and then you can get the "
"commits one by one with the function `get_revision()`."
msgstr ""
"`git rev-parse`の元々の仕事は、今や関数 `setup_revisions()` によって実行され"
"るようになりました。この関数は、リビジョンとリビジョンウォーカーの一般的なコ"
"マンドラインオプションを解析します。この情報は、後で使用できるように構造体 "
"`rev_info` に保存されます。 あなたは `setup_revisions()` を呼び出した後、独自"
"のコマンドラインオプション解析を行うことができます。 その後、初期化のために "
"`prepare_revision_walk()` を呼び出す必要があります。その後は、関数 "
"`get_revision()` を使用してコミットを1つずつ取得できます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4198
msgid ""
"If you are interested in more details of the revision walking process, just "
"have a look at the first implementation of `cmd_log()`; call `git show "
"v1.3.0~155^2~4` and scroll down to that function (note that you no longer "
"need to call `setup_pager()` directly)."
msgstr ""
"リビジョンウォーキング処理の詳細に興味があるなら `cmd_log()` の最初の実装をご"
"覧ください。 `git show v1.3.0~155^2~4` を呼び出し、その関数までスクロールダウ"
"ンします( `setup_pager()` を直接呼び出す必要がなくなったことに注意してくださ"
"い)。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4201
msgid ""
"Nowadays, `git log` is a builtin, which means that it is _contained_ in the "
"command `git`.  The source side of a builtin is"
msgstr ""
"今日では `git log` は組み込みです。つまり、コマンド `git` に含まれていること"
"を意味します。ビルトインのソースは、"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4205
msgid ""
"a function called `cmd_<bla>`, typically defined in `builtin/<bla.c>` (note "
"that older versions of Git used to have it in `builtin-<bla>.c` instead), "
"and declared in `builtin.h`."
msgstr ""
"`cmd_<bla>` と呼ばれる関数で、通常は `builtin.h` で宣言され、`builtin/<bla."
"c>` で定義されます(Gitの古いバージョンでは、代わりに `builtin-<bla>.c` に含ま"
"れていたことに注意してください)。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4207
msgid "an entry in the `commands[]` array in `git.c`, and"
msgstr "`git.c` の `commands[]` 配列のエントリ、および"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4209
msgid "an entry in `BUILTIN_OBJECTS` in the `Makefile`."
msgstr "`Makefile` の `BUILTIN_OBJECTS` エントリ。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4215
msgid ""
"Sometimes, more than one builtin is contained in one source file.  For "
"example, `cmd_whatchanged()` and `cmd_log()` both reside in `builtin/log.c`, "
"since they share quite a bit of code.  In that case, the commands which are "
"_not_ named like the `.c` file in which they live have to be listed in "
"`BUILT_INS` in the `Makefile`."
msgstr ""
"しばしば1つのソースファイルに複数のビルトインが含まれている場合があります。た"
"とえば、 `cmd_whatchanged()` と `cmd_log()` はどちらも、かなりのコードを共有"
"しているため、 `builtin/log.c` にあります。その場合、それらが存在する `.c` "
"ファイルのように名前が付けられていないコマンドは、 `Makefile` の `BUILT_INS` "
"にリストされている必要があります。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4218
msgid ""
"`git log` looks more complicated in C than it does in the original script, "
"but that allows for a much greater flexibility and performance."
msgstr ""
"`git log`は、元のスクリプトよりもC言語版の方が複雑に見えますが、これにより、"
"柔軟性とパフォーマンスが大幅に向上します。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4220
msgid "Here again it is a good point to take a pause."
msgstr "ここでも、一息入れることをお勧めします。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4223
msgid ""
"Lesson three is: study the code.  Really, it is the best way to learn about "
"the organization of Git (after you know the basic concepts)."
msgstr ""
"レッスン3: ソースコードを読んで学習します。マヂで、それはGitの機構について学"
"ぶための最良の方法です(あなたが基本的な概念を知った後であれば、ですが)。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4228
msgid ""
"So, think about something which you are interested in, say, \"how can I "
"access a blob just knowing the object name of it?\".  The first step is to "
"find a Git command with which you can do it.  In this example, it is either "
"`git show` or `git cat-file`."
msgstr ""
"そして、あなたが興味を持っている事について考えてください、例えば、「どうすれ"
"ばそれのオブジェクト名を知っているだけでブロブ(blob)にアクセスできます"
"か？」。 最初のステップは、それを実行できるGitコマンドを見つけることです。 こ"
"の例では、 `git show` または `git cat-file` のいずれかです。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4230
msgid "For the sake of clarity, let's stay with `git cat-file`, because it"
msgstr "ここでは分かりやすくするために、 `git cat-file` を使用します。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4232
msgid "is plumbing, and"
msgstr "これは配管コマンドで、そして"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4236
msgid ""
"was around even in the initial commit (it literally went only through some "
"20 revisions as `cat-file.c`, was renamed to `builtin/cat-file.c` when made "
"a builtin, and then saw less than 10 versions)."
msgstr ""
"それは最初のコミットに見つかりました(文字通り `cat-file.c` として約20のリビ"
"ジョンを経ただけで、ビルトインになったときに `builtin/cat-file.c` に名前が変"
"更され、その後10に満たないバージョンが表示されました)。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4239
msgid ""
"So, look into `builtin/cat-file.c`, search for `cmd_cat_file()` and look "
"what it does."
msgstr ""
"したがって、 `builtin/cat-file.c` を調べ、 `cmd_cat_file()` を検索して、それ"
"が何をするかを調べます。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:4246
#, no-wrap
msgid ""
"        git_config(git_default_config);\n"
"        if (argc != 3)\n"
"\t\tusage(\"git cat-file [-t|-s|-e|-p|<type>] <sha1>\");\n"
"        if (get_sha1(argv[2], sha1))\n"
"                die(\"Not a valid object name %s\", argv[2]);\n"
msgstr ""
"        git_config(git_default_config);\n"
"        if (argc != 3)\n"
"\t\tusage(\"git cat-file [-t|-s|-e|-p|<type>] <sha1>\");\n"
"        if (get_sha1(argv[2], sha1))\n"
"                die(\"Not a valid object name %s\", argv[2]);\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4252
msgid ""
"Let's skip over the obvious details; the only really interesting part here "
"is the call to `get_sha1()`.  It tries to interpret `argv[2]` as an object "
"name, and if it refers to an object which is present in the current "
"repository, it writes the resulting SHA-1 into the variable `sha1`."
msgstr ""
"自明な詳細は飛ばしましょう。 ここで本当に興味深いのは、 `get_sha1()` の呼び出"
"しだけです。 `argv[2]` をオブジェクト名として解釈しようとし、現在のリポジトリ"
"に存在するオブジェクトを参照している場合は、結果のSHA-1を変数 `sha1` に書き込"
"みます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4254
msgid "Two things are interesting here:"
msgstr "ここで興味深いのは以下の2つです:"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4258
msgid ""
"`get_sha1()` returns 0 on _success_.  This might surprise some new Git "
"hackers, but there is a long tradition in UNIX to return different negative "
"numbers in case of different errors--and 0 on success."
msgstr ""
"`get_sha1()`は成功で0を返します。これは一部の新しいGitハッカーを驚かせるかも"
"しれませんが、UNIXには、さまざまなエラーの場合にさまざまな負の数を返し、成功"
"した場合は0を返すという長い伝統があります。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4265
msgid ""
"the variable `sha1` in the function signature of `get_sha1()` is `unsigned "
"char *`, but is actually expected to be a pointer to `unsigned char[20]`.  "
"This variable will contain the 160-bit SHA-1 of the given commit.  Note that "
"whenever a SHA-1 is passed as `unsigned char *`, it is the binary "
"representation, as opposed to the ASCII representation in hex characters, "
"which is passed as `char *`."
msgstr ""
"`get_sha1()` の関数シグネチャの変数 `sha1` は `unsigned char *` ですが、実際"
"には `unsigned char[20]` へのポインタであることが期待されています。この変数に"
"は、指定されたコミットの160ビットのSHA-1が含まれます。SHA-1が `unsigned char "
"*` として渡される場合は常に、 `char *` として渡される16進文字のASCII表現とは"
"対照的に、バイナリ表現であることに注意してください。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4267
msgid "You will see both of these things throughout the code."
msgstr "コード全体でこれらの両方が表示されます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4269
msgid "Now, for the meat:"
msgstr "さて、肝心の部分は:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:4273
#, no-wrap
msgid ""
"        case 0:\n"
"                buf = read_object_with_reference(sha1, argv[1], &size, NULL);\n"
msgstr ""
"        case 0:\n"
"                buf = read_object_with_reference(sha1, argv[1], &size, NULL);\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4280
msgid ""
"This is how you read a blob (actually, not only a blob, but any type of "
"object).  To know how the function `read_object_with_reference()` actually "
"works, find the source code for it (something like `git grep "
"read_object_with | grep \":[a-z]\"` in the Git repository), and read the "
"source."
msgstr ""
"これはブロブ(実際にはブロブだけでなくあらゆるタイプのオブジェクト)を読み取る"
"方法です。 関数 `read_object_with_reference()` が実際にどのように機能するかを"
"知るには、(Gitのリポジトリで `git grep read_object_with | grep \":[a-z]\"` な"
"どして)そのソースコードを探して拝んでください。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4282
msgid ""
"To find out how the result can be used, just read on in `cmd_cat_file()`:"
msgstr "結果の使用方法を確認するには、 `cmd_cat_file()` を読んでください:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:4285
#, no-wrap
msgid "        write_or_die(1, buf, size);\n"
msgstr "        write_or_die(1, buf, size);\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4290
msgid ""
"Sometimes, you do not know where to look for a feature.  In many such cases, "
"it helps to search through the output of `git log`, and then `git show` the "
"corresponding commit."
msgstr ""
"機能を探す場所がわからない場合があります。このような多くの場合、 `git log` の"
"出力を検索してから、対応するコミットを `git show` すると役に立ちます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4294
msgid ""
"Example: If you know that there was some test case for `git bundle`, but do "
"not remember where it was (yes, you _could_ `git grep bundle t/`, but that "
"does not illustrate the point!):"
msgstr ""
"例: `git bundle` のテストケースがあったことはわかっているが、それがどこにあっ"
"たか覚えていない場合(はいもちろん、あなたは `git grep bundle t/` できますが、"
"そーゆー事を言いたい訳じゃない):"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:4297
#, no-wrap
msgid "$ git log --no-merges t/\n"
msgstr "$ git log --no-merges t/\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4302
msgid ""
"In the pager (`less`), just search for \"bundle\", go a few lines back, and "
"see that it is in commit 18449ab0.  Now just copy this object name, and "
"paste it into the command line"
msgstr ""
"ページャー(`less`)の中で、 \"bundle\" を検索し、数行前に戻って、それがコミッ"
"ト 18449ab0 にあることを確認します。このオブジェクト名をコピーして、コマンド"
"ラインに貼り付けます。"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:4305
#, no-wrap
msgid "$ git show 18449ab0\n"
msgstr "$ git show 18449ab0\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4308
msgid "Voila."
msgstr "できた！"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4311
msgid ""
"Another example: Find out what to do in order to make some script a builtin:"
msgstr "別の例: スクリプトを組み込みにするために何をすべきかを調べます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:4314
#, no-wrap
msgid "$ git log --no-merges --diff-filter=A builtin/*.c\n"
msgstr "$ git log --no-merges --diff-filter=A builtin/*.c\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4318
msgid ""
"You see, Git is actually the best tool to find out about the source of Git "
"itself!"
msgstr ""
"ほらこのとおり。Gitは実際、Git自体のソースを見つけるのに最適なツールです！"

#. type: Title ==
#: ../Documentation-sedout/user-manual.txt:4320
#, no-wrap
msgid "Git Glossary"
msgstr "Git用語集"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:4323
#, no-wrap
msgid "Git explained"
msgstr "Git解説"

#. type: Title ==
#: ../Documentation-sedout/user-manual.txt:4329
#, no-wrap
msgid "Git Quick Reference"
msgstr "Git Quick Reference"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4333
msgid ""
"This is a quick summary of the major commands; the previous chapters explain "
"how these work in more detail."
msgstr ""
"これは主要なコマンドの簡単な要約です。ここまでの章を読めば、これらがどのよう"
"に機能するか、より詳細に説明してあります。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4338
msgid "From a tarball:"
msgstr "tarballから持ってくる:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:4346
#, no-wrap
msgid ""
"$ tar xzf project.tar.gz\n"
"$ cd project\n"
"$ git init\n"
"Initialized empty Git repository in .git/\n"
"$ git add .\n"
"$ git commit\n"
msgstr ""
"$ tar xzf project.tar.gz\n"
"$ cd project\n"
"$ git init\n"
"Initialized empty Git repository in .git/\n"
"$ git add .\n"
"$ git commit\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4349
msgid "From a remote repository:"
msgstr "リモートのリポジトリから持ってくる:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:4353
#, no-wrap
msgid ""
"$ git clone git://example.com/pub/project.git\n"
"$ cd project\n"
msgstr ""
"$ git clone git://example.com/pub/project.git\n"
"$ cd project\n"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:4356
#, no-wrap
msgid "Managing branches"
msgstr "Managing branches"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:4363
#, no-wrap
msgid ""
"$ git branch\t\t\t# list all local branches in this repo\n"
"$ git switch test\t        # switch working directory to branch \"test\"\n"
"$ git branch new\t\t# create branch \"new\" starting at current HEAD\n"
"$ git branch -d new\t\t# delete branch \"new\"\n"
msgstr ""
"$ git branch\t\t\t# list all local branches in this repo\n"
"$ git switch test\t        # switch working directory to branch \"test\"\n"
"$ git branch new\t\t# create branch \"new\" starting at current HEAD\n"
"$ git branch -d new\t\t# delete branch \"new\"\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4366
msgid "Instead of basing a new branch on current HEAD (the default), use:"
msgstr ""
"現在のHEAD(デフォルト)に基づいて新しいブランチを作成する代わりに、以下を使用"
"します:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:4373
#, no-wrap
msgid ""
"$ git branch new test    # branch named \"test\"\n"
"$ git branch new v2.6.15 # tag named v2.6.15\n"
"$ git branch new HEAD^   # commit before the most recent\n"
"$ git branch new HEAD^^  # commit before that\n"
"$ git branch new test~10 # ten commits before tip of branch \"test\"\n"
msgstr ""
"$ git branch new test    # branch named \"test\"\n"
"$ git branch new v2.6.15 # tag named v2.6.15\n"
"$ git branch new HEAD^   # commit before the most recent\n"
"$ git branch new HEAD^^  # commit before that\n"
"$ git branch new test~10 # ten commits before tip of branch \"test\"\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4376
msgid "Create and switch to a new branch at the same time:"
msgstr "新しいブランチを作成と同時にその新しいブランチに切り替えます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:4379
#, no-wrap
msgid "$ git switch -c new v2.6.15\n"
msgstr "$ git switch -c new v2.6.15\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4382
msgid "Update and examine branches from the repository you cloned from:"
msgstr ""
"あなたがクローンを作成した元のリポジトリから持ってきてブランチを更新・調査し"
"ます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:4390
#, no-wrap
msgid ""
"$ git fetch\t\t# update\n"
"$ git branch -r\t\t# list\n"
"  origin/master\n"
"  origin/next\n"
"  ...\n"
"$ git switch -c masterwork origin/master\n"
msgstr ""
"$ git fetch\t\t# update\n"
"$ git branch -r\t\t# list\n"
"  origin/master\n"
"  origin/next\n"
"  ...\n"
"$ git switch -c masterwork origin/master\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4394
msgid ""
"Fetch a branch from a different repository, and give it a new name in your "
"repository:"
msgstr ""
"別のリポジトリからブランチを取得し、あなたのリポジトリで新しい名前を付けます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:4398
#, no-wrap
msgid ""
"$ git fetch git://example.com/project.git theirbranch:mybranch\n"
"$ git fetch git://example.com/project.git v2.6.15:mybranch\n"
msgstr ""
"$ git fetch git://example.com/project.git theirbranch:mybranch\n"
"$ git fetch git://example.com/project.git v2.6.15:mybranch\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4401
msgid "Keep a list of repositories you work with regularly:"
msgstr "定期的に使用するリポジトリのリストを保持します:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:4416
#, no-wrap
msgid ""
"$ git remote add example git://example.com/project.git\n"
"$ git remote\t\t\t# list remote repositories\n"
"example\n"
"origin\n"
"$ git remote show example\t# get details\n"
"* remote example\n"
"  URL: git://example.com/project.git\n"
"  Tracked remote branches\n"
"    master\n"
"    next\n"
"    ...\n"
"$ git fetch example\t\t# update branches from example\n"
"$ git branch -r\t\t\t# list all remote branches\n"
msgstr ""
"$ git remote add example git://example.com/project.git\n"
"$ git remote\t\t\t# list remote repositories\n"
"example\n"
"origin\n"
"$ git remote show example\t# get details\n"
"* remote example\n"
"  URL: git://example.com/project.git\n"
"  Tracked remote branches\n"
"    master\n"
"    next\n"
"    ...\n"
"$ git fetch example\t\t# update branches from example\n"
"$ git branch -r\t\t\t# list all remote branches\n"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:4420
#, no-wrap
msgid "Exploring history"
msgstr "Exploring history"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:4439
#, no-wrap
msgid ""
"$ gitk\t\t\t    # visualize and browse history\n"
"$ git log\t\t    # list all commits\n"
"$ git log src/\t\t    # ...modifying src/\n"
"$ git log v2.6.15..v2.6.16  # ...in v2.6.16, not in v2.6.15\n"
"$ git log master..test\t    # ...in branch test, not in branch master\n"
"$ git log test..master\t    # ...in branch master, but not in test\n"
"$ git log test...master\t    # ...in one branch, not in both\n"
"$ git log -S'foo()'\t    # ...where difference contain \"foo()\"\n"
"$ git log --since=\"2 weeks ago\"\n"
"$ git log -p\t\t    # show patches as well\n"
"$ git show\t\t    # most recent commit\n"
"$ git diff v2.6.15..v2.6.16 # diff between two tagged versions\n"
"$ git diff v2.6.15..HEAD    # diff with current head\n"
"$ git grep \"foo()\"\t    # search working directory for \"foo()\"\n"
"$ git grep v2.6.15 \"foo()\"  # search old tree for \"foo()\"\n"
"$ git show v2.6.15:a.txt    # look at old version of a.txt\n"
msgstr ""
"$ gitk\t\t\t    # visualize and browse history\n"
"$ git log\t\t    # list all commits\n"
"$ git log src/\t\t    # ...modifying src/\n"
"$ git log v2.6.15..v2.6.16  # ...in v2.6.16, not in v2.6.15\n"
"$ git log master..test\t    # ...in branch test, not in branch master\n"
"$ git log test..master\t    # ...in branch master, but not in test\n"
"$ git log test...master\t    # ...in one branch, not in both\n"
"$ git log -S'foo()'\t    # ...where difference contain \"foo()\"\n"
"$ git log --since=\"2 weeks ago\"\n"
"$ git log -p\t\t    # show patches as well\n"
"$ git show\t\t    # most recent commit\n"
"$ git diff v2.6.15..v2.6.16 # diff between two tagged versions\n"
"$ git diff v2.6.15..HEAD    # diff with current head\n"
"$ git grep \"foo()\"\t    # search working directory for \"foo()\"\n"
"$ git grep v2.6.15 \"foo()\"  # search old tree for \"foo()\"\n"
"$ git show v2.6.15:a.txt    # look at old version of a.txt\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4442
msgid "Search for regressions:"
msgstr "デグレ(regression)を探します:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:4452
#, no-wrap
msgid ""
"$ git bisect start\n"
"$ git bisect bad\t\t# current version is bad\n"
"$ git bisect good v2.6.13-rc2\t# last known good revision\n"
"Bisecting: 675 revisions left to test after this\n"
"\t\t\t\t# test here, then:\n"
"$ git bisect good\t\t# if this revision is good, or\n"
"$ git bisect bad\t\t# if this revision is bad.\n"
"\t\t\t\t# repeat until done.\n"
msgstr ""
"$ git bisect start\n"
"$ git bisect bad\t\t# current version is bad\n"
"$ git bisect good v2.6.13-rc2\t# last known good revision\n"
"Bisecting: 675 revisions left to test after this\n"
"\t\t\t\t# test here, then:\n"
"$ git bisect good\t\t# if this revision is good, or\n"
"$ git bisect bad\t\t# if this revision is bad.\n"
"\t\t\t\t# repeat until done.\n"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:4455
#, no-wrap
msgid "Making changes"
msgstr "Making changes"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4458
msgid "Make sure Git knows who to blame:"
msgstr "Gitにあなたが誰なのか教えてやってください:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:4465
#, no-wrap
msgid ""
"$ cat >>~/.gitconfig <<\\EOF\n"
"[user]\n"
"\tname = Your Name Comes Here\n"
"\temail = you@yourdomain.example.com\n"
"EOF\n"
msgstr ""
"$ cat >>~/.gitconfig <<\\EOF\n"
"[user]\n"
"\tname = Your Name Comes Here\n"
"\temail = you@yourdomain.example.com\n"
"EOF\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4469
msgid ""
"Select file contents to include in the next commit, then make the commit:"
msgstr "次のコミットに含めるファイルの内容を選択してから、コミットします:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:4475
#, no-wrap
msgid ""
"$ git add a.txt    # updated file\n"
"$ git add b.txt    # new file\n"
"$ git rm c.txt     # old file\n"
"$ git commit\n"
msgstr ""
"$ git add a.txt    # updated file\n"
"$ git add b.txt    # new file\n"
"$ git rm c.txt     # old file\n"
"$ git commit\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4478
msgid "Or, prepare and create the commit in one step:"
msgstr "または、ワンステップでコミットを準備・作成します:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:4482
#, no-wrap
msgid ""
"$ git commit d.txt # use latest content only of d.txt\n"
"$ git commit -a\t   # use latest content of all tracked files\n"
msgstr ""
"$ git commit d.txt # use latest content only of d.txt\n"
"$ git commit -a\t   # use latest content of all tracked files\n"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:4485
#, no-wrap
msgid "Merging"
msgstr "Merging"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:4492
#, no-wrap
msgid ""
"$ git merge test   # merge branch \"test\" into the current branch\n"
"$ git pull git://example.com/project.git master\n"
"\t\t   # fetch and merge in remote branch\n"
"$ git pull . test  # equivalent to git merge test\n"
msgstr ""
"$ git merge test   # merge branch \"test\" into the current branch\n"
"$ git pull git://example.com/project.git master\n"
"\t\t   # fetch and merge in remote branch\n"
"$ git pull . test  # equivalent to git merge test\n"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:4495
#, no-wrap
msgid "Sharing your changes"
msgstr "Sharing your changes"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4498
msgid "Importing or exporting patches:"
msgstr "パッチの輸出入(inport/export):"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:4503
#, no-wrap
msgid ""
"$ git format-patch origin..HEAD # format a patch for each commit\n"
"\t\t\t\t# in HEAD but not in origin\n"
"$ git am mbox # import patches from the mailbox \"mbox\"\n"
msgstr ""
"$ git format-patch origin..HEAD # format a patch for each commit\n"
"\t\t\t\t# in HEAD but not in origin\n"
"$ git am mbox # import patches from the mailbox \"mbox\"\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4507
msgid ""
"Fetch a branch in a different Git repository, then merge into the current "
"branch:"
msgstr ""
"別のGitリポジトリからブランチをフェッチしてから、現在のブランチにマージしま"
"す:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:4510
#, no-wrap
msgid "$ git pull git://example.com/project.git theirbranch\n"
msgstr "$ git pull git://example.com/project.git theirbranch\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4514
msgid ""
"Store the fetched branch into a local branch before merging into the current "
"branch:"
msgstr ""
"現在のブランチにマージする前に、フェッチしたブランチをローカルブランチに保存"
"します:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:4517
#, no-wrap
msgid "$ git pull git://example.com/project.git theirbranch:mybranch\n"
msgstr "$ git pull git://example.com/project.git theirbranch:mybranch\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4521
msgid ""
"After creating commits on a local branch, update the remote branch with your "
"commits:"
msgstr ""
"ローカルブランチでコミットを作成した後、あなたのコミットでリモートブランチを"
"更新します:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:4524
#, no-wrap
msgid "$ git push ssh://example.com/project.git mybranch:theirbranch\n"
msgstr "$ git push ssh://example.com/project.git mybranch:theirbranch\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4527
msgid "When remote and local branch are both named \"test\":"
msgstr ""
"リモートブランチとローカルブランチの両方に \"test\" という名前が付けられてい"
"る場合:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:4530
#, no-wrap
msgid "$ git push ssh://example.com/project.git test\n"
msgstr "$ git push ssh://example.com/project.git test\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4533
msgid "Shortcut version for a frequently used remote repository:"
msgstr "頻繁に使用されるリモートリポジトリのショートカットバージョン:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:4537
#, no-wrap
msgid ""
"$ git remote add example ssh://example.com/project.git\n"
"$ git push example test\n"
msgstr ""
"$ git remote add example ssh://example.com/project.git\n"
"$ git push example test\n"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:4540
#, no-wrap
msgid "Repository maintenance"
msgstr "Repository maintenance"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4543
msgid "Check for corruption:"
msgstr "破損(corruption)を確認します:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:4546
#, no-wrap
msgid "$ git fsck\n"
msgstr "$ git fsck\n"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4549
msgid "Recompress, remove unused cruft:"
msgstr "再圧縮し、未使用の残骸を取り除きます:"

#. type: delimited block -
#: ../Documentation-sedout/user-manual.txt:4552
#, no-wrap
msgid "$ git gc\n"
msgstr "$ git gc\n"

#. type: Title ==
#: ../Documentation-sedout/user-manual.txt:4557
#, no-wrap
msgid "Notes and todo list for this manual"
msgstr "Notes and todo list for this manual"

#. type: Title ===
#: ../Documentation-sedout/user-manual.txt:4560
#, no-wrap
msgid "Todo list"
msgstr "Todo list"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4563
msgid "This is a work in progress."
msgstr "これらは未だ作業中です。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4565
msgid "The basic requirements:"
msgstr "基本的な要件:"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4570
msgid ""
"It must be readable in order, from beginning to end, by someone intelligent "
"with a basic grasp of the UNIX command line, but without any special "
"knowledge of Git.  If necessary, any other prerequisites should be "
"specifically mentioned as they arise."
msgstr ""
"Gitの特別な知識がなくても、UNIXコマンドラインの基本を理解していれば、インテリ"
"ジェントな人であれば最初から最後まで読みやすくする必要があります。必要に応じ"
"て、その他の前提条件が発生したときに具体的に言及する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4574
msgid ""
"Whenever possible, section headings should clearly describe the task they "
"explain how to do, in language that requires no more knowledge than "
"necessary: for example, \"importing patches into a project\" rather than "
"\"the `git am` command\""
msgstr ""
"可能な場合は常に、セクションの見出しで、実行方法を説明するタスクを、必要以上"
"の知識を必要としない言語で明確に説明する必要があります。たとえば、 \"the "
"`git am` command\" ではなく \"importing patches into a project\" です。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4578
msgid ""
"Think about how to create a clear chapter dependency graph that will allow "
"people to get to important topics without necessarily reading everything in "
"between."
msgstr ""
"明確な章の依存関係グラフを作成する方法を考えてください。これにより、人々は必"
"ずしもその間のすべてを読むことなく、重要なトピックにたどり着くことができま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4580
msgid "Scan `Documentation/` for other stuff left out; in particular:"
msgstr ""
"省略されている他のものについては、 `Documentation/` を浚ってください。特に:"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4582
msgid "howto's"
msgstr "howtoと"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4583
msgid "some of `technical/`?"
msgstr "`technical/` のいくつかと"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4584
msgid "hooks"
msgstr "フック"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4585
msgid "list of commands in linkgit:git[1]"
msgstr "linkgit:git[1] のコマンドの一覧"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4587
msgid "Scan email archives for other stuff left out"
msgstr "メールアーカイブをスキャンして、省略されている他のものを探します"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4590
msgid ""
"Scan man pages to see if any assume more background than this manual "
"provides."
msgstr ""
"マニュアルページをスキャンして、このマニュアルが提供するよりも多くの背景を想"
"定しているものがあるかどうかを確認します。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4594
msgid ""
"Add more good examples.  Entire sections of just cookbook examples might be "
"a good idea; maybe make an \"advanced examples\" section a standard end-of-"
"chapter section?"
msgstr ""
"より良い例を追加します。 クックブックの例だけのセクションを記述するのは良い考"
"えです。 たいてい「高度な例」セクションを標準の章の最後のセクションにしますよ"
"ね？"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4596
msgid "Include cross-references to the glossary, where appropriate."
msgstr "必要に応じて、用語集への相互参照を含めます。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4599
msgid ""
"Add a section on working with other version control systems, including CVS, "
"Subversion, and just imports of series of release tarballs."
msgstr ""
"CVSやSubversionや一連のリリースtarballのインポートなど、他のバージョン管理シ"
"ステムの操作に関するセクションを追加します。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4601
msgid "Write a chapter on using plumbing and writing scripts."
msgstr "配管コマンドの使用とスクリプトの作成に関する章を作成します。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4603
msgid "Alternates, clone -reference, etc."
msgstr "代替、clone -reference、等。"

#. type: Plain text
#: ../Documentation-sedout/user-manual.txt:4606
#, no-wrap
msgid ""
"More on recovery from repository corruption.  See:\n"
"\thttps://lore.kernel.org/git/Pine.LNX.4.64.0702272039540.12485@woody.linux-foundation.org/\n"
"\thttps://lore.kernel.org/git/Pine.LNX.4.64.0702141033400.3604@woody.linux-foundation.org/\n"
msgstr ""
"リポジトリの破損からの回復の詳細は、以下:\n"
"\thttps://lore.kernel.org/git/Pine.LNX.4.64.0702272039540.12485@woody.linux-foundation.org/\n"
"\thttps://lore.kernel.org/git/Pine.LNX.4.64.0702141033400.3604@woody.linux-foundation.org/\n"
