# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 0.0\n"
"POT-Creation-Date: 2021-11-04 04:38+0900\n"
"PO-Revision-Date: 2022-02-22 04:36+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/git-format-patch.txt:2
#, no-wrap
msgid "git-format-patch(1)"
msgstr "git-format-patch(1)"

#. type: Title -
#: ../Documentation-sedout/git-format-patch.txt:5
#, no-wrap
msgid "NAME"
msgstr "NAME"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:7
msgid "git-format-patch - Prepare patches for e-mail submission"
msgstr "git-format-patch - 電子メール送信用のパッチを準備します"

#. type: Title -
#: ../Documentation-sedout/git-format-patch.txt:10
#, no-wrap
msgid "SYNOPSIS"
msgstr "SYNOPSIS"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:35
#, no-wrap
msgid ""
"'git format-patch' [-k] [(-o|--output-directory) <dir> | --stdout]\n"
"\t\t   [--no-thread | --thread[=<style>]]\n"
"\t\t   [(--attach|--inline)[=<boundary>] | --no-attach]\n"
"\t\t   [-s | --signoff]\n"
"\t\t   [--signature=<signature> | --no-signature]\n"
"\t\t   [--signature-file=<file>]\n"
"\t\t   [-n | --numbered | -N | --no-numbered]\n"
"\t\t   [--start-number <n>] [--numbered-files]\n"
"\t\t   [--in-reply-to=<message id>] [--suffix=.<sfx>]\n"
"\t\t   [--ignore-if-in-upstream]\n"
"\t\t   [--cover-from-description=<mode>]\n"
"\t\t   [--rfc] [--subject-prefix=<subject prefix>]\n"
"\t\t   [(--reroll-count|-v) <n>]\n"
"\t\t   [--to=<email>] [--cc=<email>]\n"
"\t\t   [--[no-]cover-letter] [--quiet]\n"
"\t\t   [--[no-]encode-email-headers]\n"
"\t\t   [--no-notes | --notes[=<ref>]]\n"
"\t\t   [--interdiff=<previous>]\n"
"\t\t   [--range-diff=<previous> [--creation-factor=<percent>]]\n"
"\t\t   [--filename-max-length=<n>]\n"
"\t\t   [--progress]\n"
"\t\t   [<common diff options>]\n"
"\t\t   [ <since> | <revision range> ]\n"
msgstr ""
"'git format-patch' [-k] [(-o|--output-directory) <dir> | --stdout]\n"
"\t\t   [--no-thread | --thread[=<style>]]\n"
"\t\t   [(--attach|--inline)[=<boundary>] | --no-attach]\n"
"\t\t   [-s | --signoff]\n"
"\t\t   [--signature=<signature> | --no-signature]\n"
"\t\t   [--signature-file=<file>]\n"
"\t\t   [-n | --numbered | -N | --no-numbered]\n"
"\t\t   [--start-number <n>] [--numbered-files]\n"
"\t\t   [--in-reply-to=<message id>] [--suffix=.<sfx>]\n"
"\t\t   [--ignore-if-in-upstream]\n"
"\t\t   [--cover-from-description=<mode>]\n"
"\t\t   [--rfc] [--subject-prefix=<subject prefix>]\n"
"\t\t   [(--reroll-count|-v) <n>]\n"
"\t\t   [--to=<email>] [--cc=<email>]\n"
"\t\t   [--[no-]cover-letter] [--quiet]\n"
"\t\t   [--[no-]encode-email-headers]\n"
"\t\t   [--no-notes | --notes[=<ref>]]\n"
"\t\t   [--interdiff=<previous>]\n"
"\t\t   [--range-diff=<previous> [--creation-factor=<percent>]]\n"
"\t\t   [--filename-max-length=<n>]\n"
"\t\t   [--progress]\n"
"\t\t   [<common diff options>]\n"
"\t\t   [ <since> | <revision range> ]\n"

#. type: Title -
#: ../Documentation-sedout/git-format-patch.txt:37
#, no-wrap
msgid "DESCRIPTION"
msgstr "DESCRIPTION"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:43
msgid ""
"Prepare each non-merge commit with its \"patch\" in one \"message\" per "
"commit, formatted to resemble a UNIX mailbox.  The output of this command is "
"convenient for e-mail submission or for use with 'git am'."
msgstr "UNIXメールボックスに似た形式で、コミットごとに1つの「メッセージ」に「パッチ」を含む各非マージコミットを準備します。このコマンドの出力は、電子メールの送信や「git am」での使用に便利です。"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:45
msgid "A \"message\" generated by the command consists of three parts:"
msgstr "コマンドによって生成される「メッセージ」は、以下の3つの部分で構成されます:"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:52
msgid ""
"A brief metadata header that begins with `From <commit>` with a fixed `Mon "
"Sep 17 00:00:00 2001` datestamp to help programs like \"file(1)\" to "
"recognize that the file is an output from this command, fields that record "
"the author identity, the author date, and the title of the change (taken "
"from the first paragraph of the commit log message)."
msgstr "短いメタデータヘッダー。「file(1)」などのプログラムが、ファイルがこのコマンドからの出力であることを認識できるように「From <commit>」と、固定の日付スタンプ「Mon Sep 17 00:00:00 2001」で始まり、 作者ID(author identity)や作者の日付(author date)や変更のタイトル(title of the change)(コミットログメッセージの最初の段落から取得)が記入されたフィールドがあります。"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:54
msgid "The second and subsequent paragraphs of the commit log message."
msgstr "コミットログメッセージの2番目以降の段落。"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:57
msgid ""
"The \"patch\", which is the \"diff -p --stat\" output (see linkgit:git-"
"diff[1]) between the commit and its parent."
msgstr "コミットとその親の間の「diff-p--stat」出力(linkgit: git-diff[1] 参照)である「パッチ」。"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:60
msgid ""
"The log message and the patch is separated by a line with a three-dash line."
msgstr "ログメッセージとパッチは、3本のダッシュ(`---`)で区切られています。"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:62
msgid "There are two ways to specify which commits to operate on."
msgstr "操作するコミットを指定する方法は2つあります。"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:66
msgid ""
"A single commit, <since>, specifies that the commits leading to the tip of "
"the current branch that are not in the history that leads to the <since> to "
"be output."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:70
msgid ""
"Generic <revision range> expression (see \"SPECIFYING REVISIONS\" section in "
"linkgit:gitrevisions[7]) means the commits in the specified range."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:76
msgid ""
"The first rule takes precedence in the case of a single <commit>.  To apply "
"the second rule, i.e., format everything since the beginning of history up "
"until <commit>, use the `--root` option: `git format-patch --root "
"<commit>`.  If you want to format only <commit> itself, you can do this with "
"`git format-patch -1 <commit>`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:83
msgid ""
"By default, each output file is numbered sequentially from 1, and uses the "
"first line of the commit message (massaged for pathname safety) as the "
"filename. With the `--numbered-files` option, the output file names will "
"only be numbers, without the first line of the commit appended.  The names "
"of the output files are printed to standard output, unless the `--stdout` "
"option is specified."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:91
msgid ""
"If `-o` is specified, output files are created in <dir>.  Otherwise they are "
"created in the current working directory. The default path can be set with "
"the `format.outputDirectory` configuration option.  The `-o` option takes "
"precedence over `format.outputDirectory`.  To store patches in the current "
"working directory even when `format.outputDirectory` points elsewhere, use `-"
"o .`. All directory components will be created."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:95
msgid ""
"By default, the subject of a single patch is \"[PATCH] \" followed by the "
"concatenation of lines from the commit message up to the first blank line "
"(see the DISCUSSION section of linkgit:git-commit[1])."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:99
msgid ""
"When multiple patches are output, the subject prefix will instead be "
"\"[PATCH n/m] \".  To force 1/1 to be added for a single patch, use `-n`.  "
"To omit patch numbers from the subject, use `-N`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:104
msgid ""
"If given `--thread`, `git-format-patch` will generate `In-Reply-To` and "
"`References` headers to make the second and subsequent patch mails appear as "
"replies to the first mail; this also generates a `Message-Id` header to "
"reference."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-format-patch.txt:106
#, no-wrap
msgid "OPTIONS"
msgstr "OPTIONS"

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:110
#, no-wrap
msgid "`-<n>`"
msgstr "`-<n>`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:112
msgid "Prepare patches from the topmost <n> commits."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:113
#, no-wrap
msgid "`-o <dir>`"
msgstr "`-o <dir>`"

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:114
#, no-wrap
msgid "`--output-directory <dir>`"
msgstr "`--output-directory <dir>`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:117
msgid ""
"Use <dir> to store the resulting files, instead of the current working "
"directory."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:118
#, no-wrap
msgid "`-n`"
msgstr "`-n`"

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:119
#, no-wrap
msgid "`--numbered`"
msgstr "`--numbered`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:121
msgid "Name output in '[PATCH n/m]' format, even with a single patch."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:122
#, no-wrap
msgid "`-N`"
msgstr "`-N`"

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:123
#, no-wrap
msgid "`--no-numbered`"
msgstr "`--no-numbered`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:125
msgid "Name output in '[PATCH]' format."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:126
#, no-wrap
msgid "`--start-number <n>`"
msgstr "`--start-number <n>`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:128
msgid "Start numbering the patches at <n> instead of 1."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:129
#, no-wrap
msgid "`--numbered-files`"
msgstr "`--numbered-files`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:132
msgid ""
"Output file names will be a simple number sequence without the default first "
"line of the commit appended."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:133
#, no-wrap
msgid "`-k`"
msgstr "`-k`"

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:134
#, no-wrap
msgid "`--keep-subject`"
msgstr "`--keep-subject`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:137
msgid ""
"Do not strip/add '[PATCH]' from the first line of the commit log message."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:138
#, no-wrap
msgid "`-s`"
msgstr "`-s`"

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:139
#, no-wrap
msgid "`--signoff`"
msgstr "`--signoff`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:143
msgid ""
"Add a `Signed-off-by` trailer to the commit message, using the committer "
"identity of yourself.  See the signoff option in linkgit:git-commit[1] for "
"more information."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:144
#, no-wrap
msgid "`--stdout`"
msgstr "`--stdout`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:147
msgid ""
"Print all commits to the standard output in mbox format, instead of creating "
"a file for each one."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:148
#, no-wrap
msgid "`--attach[=<boundary>]`"
msgstr "`--attach[=<boundary>]`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:152
msgid ""
"Create multipart/mixed attachment, the first part of which is the commit "
"message and the patch itself in the second part, with `Content-Disposition: "
"attachment`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:153
#, no-wrap
msgid "`--no-attach`"
msgstr "`--no-attach`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:156
msgid ""
"Disable the creation of an attachment, overriding the configuration setting."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:157
#, no-wrap
msgid "`--inline[=<boundary>]`"
msgstr "`--inline[=<boundary>]`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:161
msgid ""
"Create multipart/mixed attachment, the first part of which is the commit "
"message and the patch itself in the second part, with `Content-Disposition: "
"inline`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:162
#, no-wrap
msgid "`--thread[=<style>]`"
msgstr "`--thread[=<style>]`"

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:163
#, no-wrap
msgid "`--no-thread`"
msgstr "`--no-thread`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:168
msgid ""
"Controls addition of `In-Reply-To` and `References` headers to make the "
"second and subsequent mails appear as replies to the first.  Also controls "
"generation of the `Message-Id` header to reference."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:174
msgid ""
"The optional <style> argument can be either `shallow` or `deep`.  'shallow' "
"threading makes every mail a reply to the head of the series, where the head "
"is chosen from the cover letter, the `--in-reply-to`, and the first patch "
"mail, in this order.  'deep' threading makes every mail a reply to the "
"previous one."
msgstr "オプションの <style> 引数は、 `shallow` または `deep` のいずれかです。 「shallow」スレッドは、すべてのメールをシリーズの先頭に返信します。先頭は、送付状と `--in-reply-to` と最初のパッチメールからこの順序で選択されます。「deep」スレッドは、すべてのメールを前のメールへの返信にします。"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:178
msgid ""
"The default is `--no-thread`, unless the `format.thread` configuration is "
"set.  If `--thread` is specified without a style, it defaults to the style "
"specified by `format.thread` if any, or else `shallow`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:182
msgid ""
"Beware that the default for 'git send-email' is to thread emails itself.  If "
"you want `git format-patch` to take care of threading, you will want to "
"ensure that threading is disabled for `git send-email`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:183
#, no-wrap
msgid "`--in-reply-to=<message id>`"
msgstr "`--in-reply-to=<message id>`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:187
msgid ""
"Make the first mail (or all the mails with `--no-thread`) appear as a reply "
"to the given <message id>, which avoids breaking threads to provide a new "
"patch series."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:188
#, no-wrap
msgid "`--ignore-if-in-upstream`"
msgstr "`--ignore-if-in-upstream`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:194
msgid ""
"Do not include a patch that matches a commit in <until>..<since>.  This will "
"examine all patches reachable from <since> but not from <until> and compare "
"them with the patches being generated, and any patch that matches is ignored."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:195
#, no-wrap
msgid "`--cover-from-description=<mode>`"
msgstr "`--cover-from-description=<mode>`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:198
msgid ""
"Controls which parts of the cover letter will be automatically populated "
"using the branch's description."
msgstr "ブランチの説明を使用して、送付状のどの部分に自動的に入力されるかを制御します。"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:203
msgid ""
"If `<mode>` is `message` or `default`, the cover letter subject will be "
"populated with placeholder text. The body of the cover letter will be "
"populated with the branch's description. This is the default mode when no "
"configuration nor command line option is specified."
msgstr "`<mode>` が `message` または `default` の場合、送付状の件名にプレースホルダーテキストが入力されます。送付状の本文には、ブランチの説明が入力されます。 これは、構成またはコマンドラインオプションが指定されていない場合のデフォルトモードです。"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:207
msgid ""
"If `<mode>` is `subject`, the first paragraph of the branch description will "
"populate the cover letter subject. The remainder of the description will "
"populate the body of the cover letter."
msgstr "`<mode>` が `subject` の場合、ブランチの説明の最初の段落を送付状の件名に入力します。ブランチの説明の残りの部分は、送付状の本文に入力されます。"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:211
msgid ""
"If `<mode>` is `auto`, if the first paragraph of the branch description is "
"greater than 100 bytes, then the mode will be `message`, otherwise `subject` "
"will be used."
msgstr "`<mode>` が `auto` の場合、 ブランチの説明の最初の段落 > 100バイト なら、モードは `message` になり、そうでない場合は `subject` が使用されます。"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:214
msgid ""
"If `<mode>` is `none`, both the cover letter subject and body will be "
"populated with placeholder text."
msgstr "`<mode>` が `none` の場合、送付状の件名と本文の両方にプレースホルダーテキストが入力されます。"

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:215
#, no-wrap
msgid "`--subject-prefix=<subject prefix>`"
msgstr "`--subject-prefix=<subject prefix>`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:220
msgid ""
"Instead of the standard '[PATCH]' prefix in the subject line, instead use "
"'[<subject prefix>]'. This allows for useful naming of a patch series, and "
"can be combined with the `--numbered` option."
msgstr "件名の標準の '[PATCH]' プレフィックスの代わりに、 '[<subjectprefix>]' を使用してください。これにより、パッチシリーズの有用な命名が可能になり、 `--numbered` オプションと組み合わせることができます。"

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:221
#, no-wrap
msgid "`--filename-max-length=<n>`"
msgstr "`--filename-max-length=<n>`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:227
msgid ""
"Instead of the standard 64 bytes, chomp the generated output filenames at "
"around '<n>' bytes (too short a value will be silently raised to a "
"reasonable length).  Defaults to the value of the `format.filenameMaxLength` "
"configuration variable, or 64 if unconfigured."
msgstr "標準の64バイトの代わりに、生成された出力ファイル名を約 '<n>' バイトに切り捨て(短すぎると、値が適切な長さに黙って引き上げられます)。 デフォルトは `format.filenameMaxLength` 構成変数の値、または構成されていない場合は64です。"

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:228
#, no-wrap
msgid "`--rfc`"
msgstr "`--rfc`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:232
msgid ""
"Alias for `--subject-prefix=\"RFC PATCH\"`. RFC means \"Request For Comments"
"\"; use this when sending an experimental patch for discussion rather than "
"application."
msgstr "`--subject-prefix=\"RFC PATCH\"` のエイリアス。 RFCは「Request For Comments」を意味します。アプリケーションではなく、議論のために実験的なパッチを送信するときにこれを使用します。"

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:233
#, no-wrap
msgid "`-v <n>`"
msgstr "`-v <n>`"

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:234
#, no-wrap
msgid "`--reroll-count=<n>`"
msgstr "`--reroll-count=<n>`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:246
msgid ""
"Mark the series as the <n>-th iteration of the topic. The output filenames "
"have `v<n>` prepended to them, and the subject prefix (\"PATCH\" by default, "
"but configurable via the `--subject-prefix` option) has ` v<n>` appended to "
"it.  E.g.  `--reroll-count=4` may produce `v4-0001-add-makefile.patch` file "
"that has \"Subject: [PATCH v4 1/20] Add makefile\" in it.  `<n>` does not "
"have to be an integer (e.g. \"--reroll-count=4.4\", or \"--reroll-"
"count=4rev2\" are allowed), but the downside of using such a reroll-count is "
"that the range-diff/interdiff with the previous version does not state "
"exactly which version the new interation is compared against."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:247
#, no-wrap
msgid "`--to=<email>`"
msgstr "`--to=<email>`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:252
msgid ""
"Add a `To:` header to the email headers. This is in addition to any "
"configured headers, and may be used multiple times.  The negated form `--no-"
"to` discards all `To:` headers added so far (from config or command line)."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:253
#, no-wrap
msgid "`--cc=<email>`"
msgstr "`--cc=<email>`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:258
msgid ""
"Add a `Cc:` header to the email headers. This is in addition to any "
"configured headers, and may be used multiple times.  The negated form `--no-"
"cc` discards all `Cc:` headers added so far (from config or command line)."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:259
#, no-wrap
msgid "`--from`"
msgstr "`--from`"

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:260
#, no-wrap
msgid "`--from=<ident>`"
msgstr "`--from=<ident>`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:266
msgid ""
"Use `ident` in the `From:` header of each commit email. If the author ident "
"of the commit is not textually identical to the provided `ident`, place a "
"`From:` header in the body of the message with the original author. If no "
"`ident` is given, use the committer ident."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:273
msgid ""
"Note that this option is only useful if you are actually sending the emails "
"and want to identify yourself as the sender, but retain the original author "
"(and `git am` will correctly pick up the in-body header). Note also that "
"`git send-email` already handles this transformation for you, and this "
"option should not be used if you are feeding the result to `git send-email`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:274
#, no-wrap
msgid "`--add-header=<header>`"
msgstr "`--add-header=<header>`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:281
msgid ""
"Add an arbitrary header to the email headers.  This is in addition to any "
"configured headers, and may be used multiple times.  For example, `--add-"
"header=\"Organization: git-foo\"`.  The negated form `--no-add-header` "
"discards *all* (`To:`, `Cc:`, and custom) headers added so far from config "
"or command line."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:282
#, no-wrap
msgid "`--[no-]cover-letter`"
msgstr "`--[no-]cover-letter`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:286
msgid ""
"In addition to the patches, generate a cover letter file containing the "
"branch description, shortlog and the overall diffstat.  You can fill in a "
"description in the file before sending it out."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:287
#, no-wrap
msgid "`--encode-email-headers`"
msgstr "`--encode-email-headers`"

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:288
#, no-wrap
msgid "`--no-encode-email-headers`"
msgstr "`--no-encode-email-headers`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:293
msgid ""
"Encode email headers that have non-ASCII characters with \"Q-encoding"
"\" (described in RFC 2047), instead of outputting the headers verbatim. "
"Defaults to the value of the `format.encodeEmailHeaders` configuration "
"variable."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:294
#, no-wrap
msgid "`--interdiff=<previous>`"
msgstr "`--interdiff=<previous>`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:302
msgid ""
"As a reviewer aid, insert an interdiff into the cover letter, or as "
"commentary of the lone patch of a 1-patch series, showing the differences "
"between the previous version of the patch series and the series currently "
"being formatted. `previous` is a single revision naming the tip of the "
"previous series which shares a common base with the series being formatted "
"(for example `git format-patch --cover-letter --interdiff=feature/v1 -3 "
"feature/v2`)."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:303
#, no-wrap
msgid "`--range-diff=<previous>`"
msgstr "`--range-diff=<previous>`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:314
msgid ""
"As a reviewer aid, insert a range-diff (see linkgit:git-range-diff[1])  into "
"the cover letter, or as commentary of the lone patch of a 1-patch series, "
"showing the differences between the previous version of the patch series and "
"the series currently being formatted.  `previous` can be a single revision "
"naming the tip of the previous series if it shares a common base with the "
"series being formatted (for example `git format-patch --cover-letter --range-"
"diff=feature/v1 -3 feature/v2`), or a revision range if the two versions of "
"the series are disjoint (for example `git format-patch --cover-letter --"
"range-diff=feature/v1~3..feature/v1 -3 feature/v2`)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:319
msgid ""
"Note that diff options passed to the command affect how the primary product "
"of `format-patch` is generated, and they are not passed to the underlying "
"`range-diff` machinery used to generate the cover-letter material (this may "
"change in the future)."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:320
#, no-wrap
msgid "`--creation-factor=<percent>`"
msgstr "`--creation-factor=<percent>`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:325
msgid ""
"Used with `--range-diff`, tweak the heuristic which matches up commits "
"between the previous and current series of patches by adjusting the creation/"
"deletion cost fudge factor. See linkgit:git-range-diff[1])  for details."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:326
#, no-wrap
msgid "`--notes[=<ref>]`"
msgstr "`--notes[=<ref>]`"

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:327
#, no-wrap
msgid "`--no-notes`"
msgstr "`--no-notes`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:330
msgid ""
"Append the notes (see linkgit:git-notes[1]) for the commit after the three-"
"dash line."
msgstr "3つの破線(`---`)行の後に、コミットのnotes (linkgit: git-notes[1] を参照)を追加します。"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:338
msgid ""
"The expected use case of this is to write supporting explanation for the "
"commit that does not belong to the commit log message proper, and include it "
"with the patch submission. While one can simply write these explanations "
"after `format-patch` has run but before sending, keeping them as Git notes "
"allows them to be maintained between versions of the patch series (but see "
"the discussion of the `notes.rewrite` configuration options in linkgit:git-"
"notes[1] to use this workflow)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:341
msgid ""
"The default is `--no-notes`, unless the `format.notes` configuration is set."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:342
#, no-wrap
msgid "`--[no-]signature=<signature>`"
msgstr "`--[no-]signature=<signature>`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:347
msgid ""
"Add a signature to each message produced. Per RFC 3676 the signature is "
"separated from the body by a line with '-- ' on it. If the signature option "
"is omitted the signature defaults to the Git version number."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:348
#, no-wrap
msgid "`--signature-file=<file>`"
msgstr "`--signature-file=<file>`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:350
msgid "Works just like --signature except the signature is read from a file."
msgstr "署名がファイルから読み取られることを除いて、 `--signature` と同じように機能します。"

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:351
#, no-wrap
msgid "`--suffix=.<sfx>`"
msgstr "`--suffix=.<sfx>`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:356
msgid ""
"Instead of using `.patch` as the suffix for generated filenames, use "
"specified suffix.  A common alternative is `--suffix=.txt`.  Leaving this "
"empty will remove the `.patch` suffix."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:359
msgid ""
"Note that the leading character does not have to be a dot; for example, you "
"can use `--suffix=-patch` to get `0001-description-of-my-change-patch`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:360
#, no-wrap
msgid "`-q`"
msgstr "`-q`"

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:361
#, no-wrap
msgid "`--quiet`"
msgstr "`--quiet`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:363
msgid "Do not print the names of the generated files to standard output."
msgstr "生成されたファイルの名前を標準出力に出力しないでください。"

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:364
#, no-wrap
msgid "`--no-binary`"
msgstr "`--no-binary`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:369
msgid ""
"Do not output contents of changes in binary files, instead display a notice "
"that those files changed.  Patches generated using this option cannot be "
"applied properly, but they are still useful for code review."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:370
#, no-wrap
msgid "`--zero-commit`"
msgstr "`--zero-commit`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:373
msgid ""
"Output an all-zero hash in each patch's From header instead of the hash of "
"the commit."
msgstr "コミットのハッシュの代わりに、各パッチのFromヘッダーにすべてゼロのハッシュを出力します。"

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:374
#, no-wrap
msgid "`--[no-]base[=<commit>]`"
msgstr "`--[no-]base[=<commit>]`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:380
msgid ""
"Record the base tree information to identify the state the patch series "
"applies to.  See the BASE TREE INFORMATION section below for details. If "
"<commit> is \"auto\", a base commit is automatically chosen. The `--no-base` "
"option overrides a `format.useAutoBase` configuration."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:381
#, no-wrap
msgid "`--root`"
msgstr "`--root`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:387
msgid ""
"Treat the revision argument as a <revision range>, even if it is just a "
"single commit (that would normally be treated as a <since>).  Note that root "
"commits included in the specified range are always formatted as creation "
"patches, independently of this flag."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-format-patch.txt:388
#, no-wrap
msgid "`--progress`"
msgstr "`--progress`"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:390
msgid "Show progress reports on stderr as patches are generated."
msgstr "パッチが生成されるときに、stderrへ進捗レポートを表示します。"

#. type: Title -
#: ../Documentation-sedout/git-format-patch.txt:392
#, no-wrap
msgid "CONFIGURATION"
msgstr "CONFIGURATION"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:398
msgid ""
"You can specify extra mail header lines to be added to each message, "
"defaults for the subject prefix and file suffix, number patches when "
"outputting more than one patch, add \"To:\" or \"Cc:\" headers, configure "
"attachments, change the patch output directory, and sign off patches with "
"configuration variables."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-format-patch.txt:412
#, no-wrap
msgid ""
"[format]\n"
"\theaders = \"Organization: git-foo\\n\"\n"
"\tsubjectPrefix = CHANGE\n"
"\tsuffix = .txt\n"
"\tnumbered = auto\n"
"\tto = <email>\n"
"\tcc = <email>\n"
"\tattach [ = mime-boundary-string ]\n"
"\tsignOff = true\n"
"\toutputDirectory = <directory>\n"
"\tcoverLetter = auto\n"
"\tcoverFromDescription = auto\n"
msgstr ""
"[format]\n"
"\theaders = \"Organization: git-foo\\n\"\n"
"\tsubjectPrefix = CHANGE\n"
"\tsuffix = .txt\n"
"\tnumbered = auto\n"
"\tto = <email>\n"
"\tcc = <email>\n"
"\tattach [ = mime-boundary-string ]\n"
"\tsignOff = true\n"
"\toutputDirectory = <directory>\n"
"\tcoverLetter = auto\n"
"\tcoverFromDescription = auto\n"

#. type: Title -
#: ../Documentation-sedout/git-format-patch.txt:416
#, no-wrap
msgid "DISCUSSION"
msgstr "DISCUSSION"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:421
msgid ""
"The patch produced by 'git format-patch' is in UNIX mailbox format, with a "
"fixed \"magic\" time stamp to indicate that the file is output from format-"
"patch rather than a real mailbox, like so:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-format-patch.txt:431
#, no-wrap
msgid ""
"From 8f72bad1baf19a53459661343e21d6491c3908d3 Mon Sep 17 00:00:00 2001\n"
"From: Tony Luck <tony.luck@intel.com>\n"
"Date: Tue, 13 Jul 2010 11:42:54 -0700\n"
"Subject: [PATCH] =?UTF-8?q?[IA64]=20Put=20ia64=20config=20files=20on=20the=20?=\n"
" =?UTF-8?q?Uwe=20Kleine-K=C3=B6nig=20diet?=\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
msgstr ""
"From 8f72bad1baf19a53459661343e21d6491c3908d3 Mon Sep 17 00:00:00 2001\n"
"From: Tony Luck <tony.luck@intel.com>\n"
"Date: Tue, 13 Jul 2010 11:42:54 -0700\n"
"Subject: [PATCH] =?UTF-8?q?[IA64]=20Put=20ia64=20config=20files=20on=20the=20?=\n"
" =?UTF-8?q?Uwe=20Kleine-K=C3=B6nig=20diet?=\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: delimited block -
#: ../Documentation-sedout/git-format-patch.txt:434
#, no-wrap
msgid ""
"arch/arm config files were slimmed down using a python script\n"
"(See commit c2330e286f68f1c408b4aa6515ba49d57f05beae comment)\n"
msgstr ""
"arch/arm config files were slimmed down using a python script\n"
"(See commit c2330e286f68f1c408b4aa6515ba49d57f05beae comment)\n"

#. type: delimited block -
#: ../Documentation-sedout/git-format-patch.txt:437
#, no-wrap
msgid ""
"Do the same for ia64 so we can have sleek & trim looking\n"
"...\n"
msgstr ""
"Do the same for ia64 so we can have sleek & trim looking\n"
"...\n"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:445
msgid ""
"Typically it will be placed in a MUA's drafts folder, edited to add timely "
"commentary that should not go in the changelog after the three dashes, and "
"then sent as a message whose body, in our example, starts with \"arch/arm "
"config files were...\".  On the receiving end, readers can save interesting "
"patches in a UNIX mailbox and apply them with linkgit:git-am[1]."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:451
msgid ""
"When a patch is part of an ongoing discussion, the patch generated by 'git "
"format-patch' can be tweaked to take advantage of the 'git am --scissors' "
"feature.  After your response to the discussion comes a line that consists "
"solely of \"`-- >8 --`\" (scissors and perforation), followed by the patch "
"with unnecessary header fields removed:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-format-patch.txt:455
#, no-wrap
msgid ""
"...\n"
"> So we should do such-and-such.\n"
msgstr ""
"...\n"
"> So we should do such-and-such.\n"

#. type: delimited block -
#: ../Documentation-sedout/git-format-patch.txt:457
#, no-wrap
msgid "Makes sense to me.  How about this patch?\n"
msgstr "Makes sense to me.  How about this patch?\n"

#. type: delimited block -
#: ../Documentation-sedout/git-format-patch.txt:460
#, no-wrap
msgid ""
"-- >8 --\n"
"Subject: [IA64] Put ia64 config files on the Uwe Kleine-König diet\n"
msgstr ""
"-- >8 --\n"
"Subject: [IA64] Put ia64 config files on the Uwe Kleine-König diet\n"

#. type: delimited block -
#: ../Documentation-sedout/git-format-patch.txt:463
#, no-wrap
msgid ""
"arch/arm config files were slimmed down using a python script\n"
"...\n"
msgstr ""
"arch/arm config files were slimmed down using a python script\n"
"...\n"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:471
msgid ""
"When sending a patch this way, most often you are sending your own patch, so "
"in addition to the \"`From $SHA1 $magic_timestamp`\" marker you should omit "
"`From:` and `Date:` lines from the patch file.  The patch title is likely to "
"be different from the subject of the discussion the patch is in response to, "
"so it is likely that you would want to keep the Subject: line, like the "
"example above."
msgstr ""

#. type: Title ~
#: ../Documentation-sedout/git-format-patch.txt:473
#, no-wrap
msgid "Checking for patch corruption"
msgstr "パッチの破損のチェック"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:476
msgid ""
"Many mailers if not set up properly will corrupt whitespace.  Here are two "
"common types of corruption:"
msgstr "多くのメーラーは、適切に設定されていないと空白(whitespace)を破損します。破損の一般的な2つのタイプは以下のとおりです:"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:478
msgid "Empty context lines that do not have _any_ whitespace."
msgstr "どの空白(whitespace)もない空のコンテキスト行。"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:481
msgid ""
"Non-empty context lines that have one extra whitespace at the beginning."
msgstr "先頭に1つの余分な空白(whitespace)がある空でないコンテキスト行。"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:483
msgid "One way to test if your MUA is set up correctly is:"
msgstr "あなたのMUAが正しく設定されているかどうかをテストする方法のひとつは以下のとおりです:"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:487
msgid ""
"Send the patch to yourself, exactly the way you would, except with To: and "
"Cc: lines that do not contain the list and maintainer address."
msgstr "リストとメンテナのアドレスを含まない To: 行 と Cc: 行 を除き、全く同じ方法で、パッチを自分自身に送信します。"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:490
msgid ""
"Save that patch to a file in UNIX mailbox format.  Call it a.patch, say."
msgstr "そのパッチをUNIXメールボックス形式のファイルに保存します。それを a.patch と呼ぶことにしましょう。"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:492
msgid "Apply it:"
msgstr "それをapplyします:"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:497
#, no-wrap
msgid ""
"$ git fetch <project> master:test-apply\n"
"$ git switch test-apply\n"
"$ git restore --source=HEAD --staged --worktree :/\n"
"$ git am a.patch\n"
msgstr ""
"$ git fetch <project> master:test-apply\n"
"$ git switch test-apply\n"
"$ git restore --source=HEAD --staged --worktree :/\n"
"$ git am a.patch\n"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:499
msgid "If it does not apply correctly, there can be various reasons."
msgstr "これが正しく適用されない場合、さまざまな理由が考えられます。"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:504
msgid ""
"The patch itself does not apply cleanly.  That is _bad_ but does not have "
"much to do with your MUA.  You might want to rebase the patch with linkgit:"
"git-rebase[1] before regenerating it in this case."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:509
msgid ""
"The MUA corrupted your patch; \"am\" would complain that the patch does not "
"apply.  Look in the .git/rebase-apply/ subdirectory and see what 'patch' "
"file contains and check for the common corruption patterns mentioned above."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:517
msgid ""
"While at it, check the 'info' and 'final-commit' files as well.  If what is "
"in 'final-commit' is not exactly what you would want to see in the commit "
"log message, it is very likely that the receiver would end up hand editing "
"the log message when applying your patch.  Things like \"Hi, this is my "
"first patch.\\n\" in the patch e-mail should come after the three-dash line "
"that signals the end of the commit message."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-format-patch.txt:519
#, no-wrap
msgid "MUA-SPECIFIC HINTS"
msgstr "MUA-SPECIFIC HINTS"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:522
msgid ""
"Here are some hints on how to successfully submit patches inline using "
"various mailers."
msgstr "さまざまなメーラーを使用してパッチをインラインで正常に送信する方法に関するヒントをいくつか。"

#. type: Title ~
#: ../Documentation-sedout/git-format-patch.txt:524
#, no-wrap
msgid "GMail"
msgstr "GMail"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:530
msgid ""
"GMail does not have any way to turn off line wrapping in the web interface, "
"so it will mangle any emails that you send.  You can however use \"git send-"
"email\" and send your patches through the GMail SMTP server, or use any IMAP "
"email client to connect to the google IMAP server and forward the emails "
"through that."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:533
msgid ""
"For hints on using 'git send-email' to send your patches through the GMail "
"SMTP server, see the EXAMPLE section of linkgit:git-send-email[1]."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:536
msgid ""
"For hints on submission using the IMAP interface, see the EXAMPLE section of "
"linkgit:git-imap-send[1]."
msgstr ""

#. type: Title ~
#: ../Documentation-sedout/git-format-patch.txt:538
#, no-wrap
msgid "Thunderbird"
msgstr "Thunderbird"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:542
msgid ""
"By default, Thunderbird will both wrap emails as well as flag them as being "
"'format=flowed', both of which will make the resulting email unusable by Git."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:546
msgid ""
"There are three different approaches: use an add-on to turn off line wraps, "
"configure Thunderbird to not mangle patches, or use an external editor to "
"keep Thunderbird from mangling the patches."
msgstr ""

#. type: Title ^
#: ../Documentation-sedout/git-format-patch.txt:548
#, no-wrap
msgid "Approach #1 (add-on)"
msgstr "Approach #1 (add-on)"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:556
msgid ""
"Install the Toggle Word Wrap add-on that is available from https://addons."
"mozilla.org/thunderbird/addon/toggle-word-wrap/ It adds a menu entry "
"\"Enable Word Wrap\" in the composer's \"Options\" menu that you can tick "
"off. Now you can compose the message as you otherwise do (cut + paste, 'git "
"format-patch' | 'git imap-send', etc), but you have to insert line breaks "
"manually in any text that you type."
msgstr ""

#. type: Title ^
#: ../Documentation-sedout/git-format-patch.txt:558
#, no-wrap
msgid "Approach #2 (configuration)"
msgstr "Approach #2 (configuration)"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:560
msgid "Three steps:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:564
msgid ""
"Configure your mail server composition as plain text: Edit...Account "
"Settings...Composition & Addressing, uncheck \"Compose Messages in HTML\"."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:566
msgid "Configure your general composition window to not wrap."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:569
msgid ""
"In Thunderbird 2: Edit..Preferences..Composition, wrap plain text messages "
"at 0"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:575
msgid ""
"In Thunderbird 3: Edit..Preferences..Advanced..Config Editor.  Search for "
"\"mail.wrap_long_lines\".  Toggle it to make sure it is set to `false`. "
"Also, search for \"mailnews.wraplength\" and set the value to 0."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:580
msgid ""
"Disable the use of format=flowed: Edit..Preferences..Advanced..Config "
"Editor.  Search for \"mailnews.send_plaintext_flowed\".  Toggle it to make "
"sure it is set to `false`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:584
msgid ""
"After that is done, you should be able to compose email as you otherwise "
"would (cut + paste, 'git format-patch' | 'git imap-send', etc), and the "
"patches will not be mangled."
msgstr ""

#. type: Title ^
#: ../Documentation-sedout/git-format-patch.txt:586
#, no-wrap
msgid "Approach #3 (external editor)"
msgstr "Approach #3 (external editor)"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:591
msgid ""
"The following Thunderbird extensions are needed: AboutConfig from http://"
"aboutconfig.mozdev.org/ and External Editor from http://globs.org/articles."
"php?lng=en&pg=8"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:593
msgid "Prepare the patch as a text file using your method of choice."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:598
msgid ""
"Before opening a compose window, use Edit->Account Settings to uncheck the "
"\"Compose messages in HTML format\" setting in the \"Composition & Addressing"
"\" panel of the account to be used to send the patch."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:602
msgid ""
"In the main Thunderbird window, 'before' you open the compose window for the "
"patch, use Tools->about:config to set the following to the indicated values:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-format-patch.txt:606
#, no-wrap
msgid ""
"\tmailnews.send_plaintext_flowed  => false\n"
"\tmailnews.wraplength             => 0\n"
msgstr ""
"\tmailnews.send_plaintext_flowed  => false\n"
"\tmailnews.wraplength             => 0\n"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:609
msgid "Open a compose window and click the external editor icon."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:612
msgid ""
"In the external editor window, read in the patch file and exit the editor "
"normally."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:615
msgid ""
"Side note: it may be possible to do step 2 with about:config and the "
"following settings but no one's tried yet."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-format-patch.txt:620
#, no-wrap
msgid ""
"\tmail.html_compose                       => false\n"
"\tmail.identity.default.compose_html      => false\n"
"\tmail.identity.id?.compose_html          => false\n"
msgstr ""
"\tmail.html_compose                       => false\n"
"\tmail.identity.default.compose_html      => false\n"
"\tmail.identity.id?.compose_html          => false\n"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:625
msgid ""
"There is a script in contrib/thunderbird-patch-inline which can help you "
"include patches with Thunderbird in an easy way. To use it, do the steps "
"above and then use the script as the external editor."
msgstr ""

#. type: Title ~
#: ../Documentation-sedout/git-format-patch.txt:627
#, no-wrap
msgid "KMail"
msgstr "KMail"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:629
msgid "This should help you to submit patches inline using KMail."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:631
msgid "Prepare the patch as a text file."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:633
msgid "Click on New Mail."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:636
msgid ""
"Go under \"Options\" in the Composer window and be sure that \"Word wrap\" "
"is not set."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:638
msgid "Use Message -> Insert file... and insert the patch."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:641
msgid ""
"Back in the compose window: add whatever other text you wish to the message, "
"complete the addressing and subject fields, and press send."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-format-patch.txt:643
#, no-wrap
msgid "BASE TREE INFORMATION"
msgstr "BASE TREE INFORMATION"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:652
msgid ""
"The base tree information block is used for maintainers or third party "
"testers to know the exact state the patch series applies to. It consists of "
"the 'base commit', which is a well-known commit that is part of the stable "
"part of the project history everybody else works off of, and zero or more "
"'prerequisite patches', which are well-known patches in flight that is not "
"yet part of the 'base commit' that need to be applied on top of 'base "
"commit' in topological order before the patches can be applied."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:658
msgid ""
"The 'base commit' is shown as \"base-commit: \" followed by the 40-hex of "
"the commit object name.  A 'prerequisite patch' is shown as \"prerequisite-"
"patch-id: \" followed by the 40-hex 'patch id', which can be obtained by "
"passing the patch through the `git patch-id --stable` command."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:662
msgid ""
"Imagine that on top of the public commit P, you applied well-known patches "
"X, Y and Z from somebody else, and then built your three-patch series A, B, "
"C, the history would be like:"
msgstr ""

#. type: delimited block .
#: ../Documentation-sedout/git-format-patch.txt:665
#, no-wrap
msgid "---P---X---Y---Z---A---B---C\n"
msgstr "---P---X---Y---Z---A---B---C\n"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:672
msgid ""
"With `git format-patch --base=P -3 C` (or variants thereof, e.g. with `--"
"cover-letter` or using `Z..C` instead of `-3 C` to specify the range), the "
"base tree information block is shown at the end of the first message the "
"command outputs (either the first patch, or the cover letter), like this:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-format-patch.txt:678
#, no-wrap
msgid ""
"base-commit: P\n"
"prerequisite-patch-id: X\n"
"prerequisite-patch-id: Y\n"
"prerequisite-patch-id: Z\n"
msgstr ""
"base-commit: P\n"
"prerequisite-patch-id: X\n"
"prerequisite-patch-id: Y\n"
"prerequisite-patch-id: Z\n"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:681
msgid "For non-linear topology, such as"
msgstr ""

#. type: delimited block .
#: ../Documentation-sedout/git-format-patch.txt:686
#, no-wrap
msgid ""
"---P---X---A---M---C\n"
"    \\         /\n"
"     Y---Z---B\n"
msgstr ""
"---P---X---A---M---C\n"
"    \\         /\n"
"     Y---Z---B\n"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:691
msgid ""
"You can also use `git format-patch --base=P -3 C` to generate patches for A, "
"B and C, and the identifiers for P, X, Y, Z are appended at the end of the "
"first message."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:697
msgid ""
"If set `--base=auto` in cmdline, it will track base commit automatically, "
"the base commit will be the merge base of tip commit of the remote-tracking "
"branch and revision-range specified in cmdline.  For a local branch, you "
"need to track a remote branch by `git branch --set-upstream-to` before using "
"this option."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-format-patch.txt:699
#, no-wrap
msgid "EXAMPLES"
msgstr "EXAMPLES"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:703
msgid ""
"Extract commits between revisions R1 and R2, and apply them on top of the "
"current branch using 'git am' to cherry-pick them:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-format-patch.txt:706
#, no-wrap
msgid "$ git format-patch -k --stdout R1..R2 | git am -3 -k\n"
msgstr "$ git format-patch -k --stdout R1..R2 | git am -3 -k\n"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:710
msgid ""
"Extract all commits which are in the current branch but not in the origin "
"branch:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-format-patch.txt:713
#, no-wrap
msgid "$ git format-patch origin\n"
msgstr "$ git format-patch origin\n"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:716
msgid "For each commit a separate file is created in the current directory."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:719
msgid ""
"Extract all commits that lead to 'origin' since the inception of the project:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-format-patch.txt:722
#, no-wrap
msgid "$ git format-patch --root origin\n"
msgstr "$ git format-patch --root origin\n"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:725
msgid "The same as the previous one:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-format-patch.txt:728
#, no-wrap
msgid "$ git format-patch -M -B origin\n"
msgstr "$ git format-patch -M -B origin\n"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:735
msgid ""
"Additionally, it detects and handles renames and complete rewrites "
"intelligently to produce a renaming patch.  A renaming patch reduces the "
"amount of text output, and generally makes it easier to review.  Note that "
"non-Git \"patch\" programs won't understand renaming patches, so use it only "
"when you know the recipient uses Git to apply your patch."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:738
msgid ""
"Extract three topmost commits from the current branch and format them as e-"
"mailable patches:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-format-patch.txt:741
#, no-wrap
msgid "$ git format-patch -3\n"
msgstr "$ git format-patch -3\n"

#. type: Title -
#: ../Documentation-sedout/git-format-patch.txt:744
#, no-wrap
msgid "CAVEATS"
msgstr "CAVEATS"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:750
msgid ""
"Note that `format-patch` will omit merge commits from the output, even if "
"they are part of the requested range. A simple \"patch\" does not include "
"enough information for the receiving end to reproduce the same merge commit."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-format-patch.txt:752
#, no-wrap
msgid "SEE ALSO"
msgstr "SEE ALSO"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:754
msgid "linkgit:git-am[1], linkgit:git-send-email[1]"
msgstr "linkgit:git-am[1], linkgit:git-send-email[1]"

#. type: Title -
#: ../Documentation-sedout/git-format-patch.txt:756
#, no-wrap
msgid "GIT"
msgstr "GIT"

#. type: Plain text
#: ../Documentation-sedout/git-format-patch.txt:757
msgid "Part of the linkgit:git[1] suite"
msgstr "Part of the linkgit:git[1] suite"
