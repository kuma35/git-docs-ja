# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-11-04 04:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/git-pack-objects.txt:2
#, no-wrap
msgid "git-pack-objects(1)"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-pack-objects.txt:5
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:7
msgid "git-pack-objects - Create a packed archive of objects"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-pack-objects.txt:10
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:18
#, no-wrap
msgid ""
"'git pack-objects' [-q | --progress | --all-progress] [--all-progress-implied]\n"
"\t[--no-reuse-delta] [--delta-base-offset] [--non-empty]\n"
"\t[--local] [--incremental] [--window=<n>] [--depth=<n>]\n"
"\t[--revs [--unpacked | --all]] [--keep-pack=<pack-name>]\n"
"\t[--stdout [--filter=<filter-spec>] | base-name]\n"
"\t[--shallow] [--keep-true-parents] [--[no-]sparse] < object-list\n"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-pack-objects.txt:21
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:25
msgid ""
"Reads list of objects from the standard input, and writes either one or more "
"packed archives with the specified base-name to disk, or a packed archive to "
"the standard output."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:31
msgid ""
"A packed archive is an efficient way to transfer a set of objects between "
"two repositories as well as an access efficient archival format.  In a "
"packed archive, an object is either stored as a compressed whole or as a "
"difference from some other object.  The latter is often called a delta."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:35
msgid ""
"The packed archive format (.pack) is designed to be self-contained so that "
"it can be unpacked without any further information. Therefore, each object "
"that a delta depends upon must be present within the pack."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:41
msgid ""
"A pack index file (.idx) is generated for fast, random access to the objects "
"in the pack. Placing both the index file (.idx) and the packed archive (."
"pack) in the pack/ subdirectory of $GIT_OBJECT_DIRECTORY (or any of the "
"directories on $GIT_ALTERNATE_OBJECT_DIRECTORIES)  enables Git to read from "
"the pack archive."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:47
msgid ""
"The 'git unpack-objects' command can read the packed archive and expand the "
"objects contained in the pack into \"one-file one-object\" format; this is "
"typically done by the smart-pull commands when a pack is created on-the-fly "
"for efficient network transport by their peers."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-pack-objects.txt:50
#, no-wrap
msgid "OPTIONS"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-pack-objects.txt:51
#, no-wrap
msgid "base-name"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:58
msgid ""
"Write into pairs of files (.pack and .idx), using <base-name> to determine "
"the name of the created file.  When this option is used, the two files in a "
"pair are written in <base-name>-<SHA-1>.{pack,idx} files.  <SHA-1> is a hash "
"based on the pack content and is written to the standard output of the "
"command."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-pack-objects.txt:59
#, no-wrap
msgid "`--stdout`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:62
msgid ""
"Write the pack contents (what would have been written to .pack file) out to "
"the standard output."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-pack-objects.txt:63
#, no-wrap
msgid "`--revs`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:71
msgid ""
"Read the revision arguments from the standard input, instead of individual "
"object names.  The revision arguments are processed the same way as 'git rev-"
"list' with the `--objects` flag uses its `commit` arguments to build the "
"list of objects it outputs.  The objects on the resulting list are packed.  "
"Besides revisions, `--not` or `--shallow <SHA-1>` lines are also accepted."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-pack-objects.txt:72
#, no-wrap
msgid "`--unpacked`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:76
msgid ""
"This implies `--revs`.  When processing the list of revision arguments read "
"from the standard input, limit the objects packed to those that are not "
"already packed."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-pack-objects.txt:77
#, no-wrap
msgid "`--all`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:82
msgid ""
"This implies `--revs`.  In addition to the list of revision arguments read "
"from the standard input, pretend as if all refs under `refs/` are specified "
"to be included."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-pack-objects.txt:83
#, no-wrap
msgid "`--include-tag`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:87
msgid ""
"Include unasked-for annotated tags if the object they reference was included "
"in the resulting packfile.  This can be useful to send new tags to native "
"Git clients."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-pack-objects.txt:88
#, no-wrap
msgid "`--stdin-packs`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:94
msgid ""
"Read the basenames of packfiles (e.g., `pack-1234abcd.pack`)  from the "
"standard input, instead of object names or revision arguments. The resulting "
"pack contains all objects listed in the included packs (those not beginning "
"with `^`), excluding any objects listed in the excluded packs (beginning "
"with `^`)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:97
msgid ""
"Incompatible with `--revs`, or options that imply `--revs` (such as `--"
"all`), with the exception of `--unpacked`, which is compatible."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-pack-objects.txt:98
#, no-wrap
msgid "`--window=<n>`"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-pack-objects.txt:99
#, no-wrap
msgid "`--depth=<n>`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:109
msgid ""
"These two options affect how the objects contained in the pack are stored "
"using delta compression.  The objects are first internally sorted by type, "
"size and optionally names and compared against the other objects within --"
"window to see if using delta compression saves space.  --depth limits the "
"maximum delta depth; making it too deep affects the performance on the "
"unpacker side, because delta data needs to be applied that many times to get "
"to the necessary object."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:112
msgid ""
"The default value for --window is 10 and --depth is 50. The maximum depth is "
"4095."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-pack-objects.txt:113
#, no-wrap
msgid "`--window-memory=<n>`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:123
msgid ""
"This option provides an additional limit on top of `--window`; the window "
"size will dynamically scale down so as to not take up more than '<n>' bytes "
"in memory.  This is useful in repositories with a mix of large and small "
"objects to not run out of memory with a large window, but still be able to "
"take advantage of the large window for the smaller objects.  The size can be "
"suffixed with \"k\", \"m\", or \"g\".  `--window-memory=0` makes memory "
"usage unlimited.  The default is taken from the `pack.windowMemory` "
"configuration variable."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-pack-objects.txt:124
#, no-wrap
msgid "`--max-pack-size=<n>`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:135
msgid ""
"In unusual scenarios, you may not be able to create files larger than a "
"certain size on your filesystem, and this option can be used to tell the "
"command to split the output packfile into multiple independent packfiles, "
"each not larger than the given size. The size can be suffixed with \"k\", \"m"
"\", or \"g\". The minimum size allowed is limited to 1 MiB.  The default is "
"unlimited, unless the config variable `pack.packSizeLimit` is set. Note that "
"this option may result in a larger and slower repository; see the discussion "
"in `pack.packSizeLimit`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-pack-objects.txt:136
#, no-wrap
msgid "`--honor-pack-keep`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:140
msgid ""
"This flag causes an object already in a local pack that has a .keep file to "
"be ignored, even if it would have otherwise been packed."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-pack-objects.txt:141
#, no-wrap
msgid "`--keep-pack=<pack-name>`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:147
msgid ""
"This flag causes an object already in the given pack to be ignored, even if "
"it would have otherwise been packed. `<pack-name>` is the pack file name "
"without leading directory (e.g. `pack-123.pack`). The option could be "
"specified multiple times to keep multiple packs."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-pack-objects.txt:148
#, no-wrap
msgid "`--incremental`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:151
msgid ""
"This flag causes an object already in a pack to be ignored even if it would "
"have otherwise been packed."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-pack-objects.txt:152
#, no-wrap
msgid "`--local`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:156
msgid ""
"This flag causes an object that is borrowed from an alternate object store "
"to be ignored even if it would have otherwise been packed."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-pack-objects.txt:157
#, no-wrap
msgid "`--non-empty`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:160
msgid "Only create a packed archive if it would contain at least one object."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-pack-objects.txt:161
#, no-wrap
msgid "`--progress`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:166
msgid ""
"Progress status is reported on the standard error stream by default when it "
"is attached to a terminal, unless -q is specified. This flag forces progress "
"status even if the standard error stream is not directed to a terminal."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-pack-objects.txt:167
#, no-wrap
msgid "`--all-progress`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:177
msgid ""
"When --stdout is specified then progress report is displayed during the "
"object count and compression phases but inhibited during the write-out "
"phase. The reason is that in some cases the output stream is directly linked "
"to another command which may wish to display progress status of its own as "
"it processes incoming pack data.  This flag is like --progress except that "
"it forces progress report for the write-out phase as well even if --stdout "
"is used."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-pack-objects.txt:178
#, no-wrap
msgid "`--all-progress-implied`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:182
msgid ""
"This is used to imply --all-progress whenever progress display is "
"activated.  Unlike --all-progress this flag doesn't actually force any "
"progress display by itself."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-pack-objects.txt:183
#, no-wrap
msgid "`-q`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:186
msgid ""
"This flag makes the command not to report its progress on the standard error "
"stream."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-pack-objects.txt:187
#, no-wrap
msgid "`--no-reuse-delta`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:193
msgid ""
"When creating a packed archive in a repository that has existing packs, the "
"command reuses existing deltas.  This sometimes results in a slightly "
"suboptimal pack.  This flag tells the command not to reuse existing deltas "
"but compute them from scratch."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-pack-objects.txt:194
#, no-wrap
msgid "`--no-reuse-object`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:200
msgid ""
"This flag tells the command not to reuse existing object data at all, "
"including non deltified object, forcing recompression of everything.  This "
"implies --no-reuse-delta. Useful only in the obscure case where wholesale "
"enforcement of a different compression level on the packed data is desired."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-pack-objects.txt:201
#, no-wrap
msgid "`--compression=<n>`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:208
msgid ""
"Specifies compression level for newly-compressed data in the generated "
"pack.  If not specified, pack compression level is determined first by pack."
"compression, then by core.compression, and defaults to -1, the zlib default, "
"if neither is set.  Add --no-reuse-object if you want to force a uniform "
"compression level on all data no matter the source."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-pack-objects.txt:209
#, no-wrap
msgid "`--[no-]sparse`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:219
msgid ""
"Toggle the \"sparse\" algorithm to determine which objects to include in the "
"pack, when combined with the \"--revs\" option. This algorithm only walks "
"trees that appear in paths that introduce new objects.  This can have "
"significant performance benefits when computing a pack to send a small "
"change. However, it is possible that extra objects are added to the pack-"
"file if the included commits contain certain types of direct renames. If "
"this option is not included, it defaults to the value of `pack.useSparse`, "
"which is true unless otherwise specified."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-pack-objects.txt:220
#, no-wrap
msgid "`--thin`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:224
msgid ""
"Create a \"thin\" pack by omitting the common objects between a sender and a "
"receiver in order to reduce network transfer. This option only makes sense "
"in conjunction with --stdout."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:229
msgid ""
"Note: A thin pack violates the packed archive format by omitting required "
"objects and is thus unusable by Git without making it self-contained. Use "
"`git index-pack --fix-thin` (see linkgit:git-index-pack[1]) to restore the "
"self-contained property."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-pack-objects.txt:230
#, no-wrap
msgid "`--shallow`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:234
msgid ""
"Optimize a pack that will be provided to a client with a shallow "
"repository.  This option, combined with --thin, can result in a smaller pack "
"at the cost of speed."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-pack-objects.txt:235
#, no-wrap
msgid "`--delta-base-offset`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:245
msgid ""
"A packed archive can express the base object of a delta as either a 20-byte "
"object name or as an offset in the stream, but ancient versions of Git don't "
"understand the latter.  By default, 'git pack-objects' only uses the former "
"format for better compatibility.  This option allows the command to use the "
"latter format for compactness.  Depending on the average delta chain length, "
"this option typically shrinks the resulting packfile by 3-5 per-cent."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:250
msgid ""
"Note: Porcelain commands such as `git gc` (see linkgit:git-gc[1]), `git "
"repack` (see linkgit:git-repack[1]) pass this option by default in modern "
"Git when they put objects in your repository into pack files.  So does `git "
"bundle` (see linkgit:git-bundle[1]) when it creates a bundle."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-pack-objects.txt:251
#, no-wrap
msgid "`--threads=<n>`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:260
msgid ""
"Specifies the number of threads to spawn when searching for best delta "
"matches.  This requires that pack-objects be compiled with pthreads "
"otherwise this option is ignored with a warning.  This is meant to reduce "
"packing time on multiprocessor machines.  The required amount of memory for "
"the delta search window is however multiplied by the number of threads.  "
"Specifying 0 will cause Git to auto-detect the number of CPU's and set the "
"number of threads accordingly."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-pack-objects.txt:261
#, no-wrap
msgid "`--index-version=<version>[,<offset>]`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:265
msgid ""
"This is intended to be used by the test suite only. It allows to force the "
"version for the generated pack index, and to force 64-bit index entries on "
"objects located above the given offset."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-pack-objects.txt:266
#, no-wrap
msgid "`--keep-true-parents`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:269
msgid ""
"With this option, parents that are hidden by grafts are packed nevertheless."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-pack-objects.txt:270
#, no-wrap
msgid "`--filter=<filter-spec>`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:274
msgid ""
"Requires `--stdout`.  Omits certain objects (usually blobs) from the "
"resulting packfile.  See linkgit:git-rev-list[1] for valid `<filter-spec>` "
"forms."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-pack-objects.txt:275
#, no-wrap
msgid "`--no-filter`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:277
msgid "Turns off any previous `--filter=` argument."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-pack-objects.txt:278
#, no-wrap
msgid "`--missing=<missing-action>`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:281
msgid ""
"A debug option to help with future \"partial clone\" development.  This "
"option specifies how missing objects are handled."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:286
msgid ""
"The form '--missing=error' requests that pack-objects stop with an error if "
"a missing object is encountered.  If the repository is a partial clone, an "
"attempt to fetch missing objects will be made before declaring them "
"missing.  This is the default action."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:290
msgid ""
"The form '--missing=allow-any' will allow object traversal to continue if a "
"missing object is encountered.  No fetch of a missing object will occur.  "
"Missing objects will silently be omitted from the results."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:295
msgid ""
"The form '--missing=allow-promisor' is like 'allow-any', but will only allow "
"object traversal to continue for EXPECTED promisor missing objects.  No "
"fetch of a missing object will occur.  An unexpected missing object will "
"raise an error."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-pack-objects.txt:296
#, no-wrap
msgid "`--exclude-promisor-objects`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:302
msgid ""
"Omit objects that are known to be in the promisor remote.  (This option has "
"the purpose of operating only on locally created objects, so that when we "
"repack, we still maintain a distinction between locally created objects "
"[without .promisor] and objects from the promisor remote [with .promisor].)  "
"This is used with partial clone."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-pack-objects.txt:303
#, no-wrap
msgid "`--keep-unreachable`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:308
msgid ""
"Objects unreachable from the refs in packs named with --unpacked= option are "
"added to the resulting pack, in addition to the reachable objects that are "
"not in packs marked with *.keep files. This implies `--revs`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-pack-objects.txt:309
#, no-wrap
msgid "`--pack-loose-unreachable`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:312
msgid ""
"Pack unreachable loose objects (and their loose counterparts removed). This "
"implies `--revs`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-pack-objects.txt:313
#, no-wrap
msgid "`--unpack-unreachable`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:315
msgid "Keep unreachable objects in loose form. This implies `--revs`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-pack-objects.txt:316
#, no-wrap
msgid "`--delta-islands`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:319
msgid "Restrict delta matches based on \"islands\". See DELTA ISLANDS below."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-pack-objects.txt:322
#, no-wrap
msgid "DELTA ISLANDS"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:334
msgid ""
"When possible, `pack-objects` tries to reuse existing on-disk deltas to "
"avoid having to search for new ones on the fly. This is an important "
"optimization for serving fetches, because it means the server can avoid "
"inflating most objects at all and just send the bytes directly from disk. "
"This optimization can't work when an object is stored as a delta against a "
"base which the receiver does not have (and which we are not already "
"sending). In that case the server \"breaks\" the delta and has to find a new "
"one, which has a high CPU cost. Therefore it's important for performance "
"that the set of objects in on-disk delta relationships match what a client "
"would fetch."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:339
msgid ""
"In a normal repository, this tends to work automatically. The objects are "
"mostly reachable from the branches and tags, and that's what clients fetch. "
"Any deltas we find on the server are likely to be between objects the client "
"has or will have."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:349
msgid ""
"But in some repository setups, you may have several related but separate "
"groups of ref tips, with clients tending to fetch those groups "
"independently. For example, imagine that you are hosting several \"forks\" "
"of a repository in a single shared object store, and letting clients view "
"them as separate repositories through `GIT_NAMESPACE` or separate repos "
"using the alternates mechanism. A naive repack may find that the optimal "
"delta for an object is against a base that is only found in another fork. "
"But when a client fetches, they will not have the base object, and we'll "
"have to find a new delta on the fly."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:355
msgid ""
"A similar situation may exist if you have many refs outside of `refs/heads/` "
"and `refs/tags/` that point to related objects (e.g., `refs/pull` or `refs/"
"changes` used by some hosting providers). By default, clients fetch only "
"heads and tags, and deltas against objects found only in those other groups "
"cannot be sent as-is."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:363
msgid ""
"Delta islands solve this problem by allowing you to group your refs into "
"distinct \"islands\". Pack-objects computes which objects are reachable from "
"which islands, and refuses to make a delta from an object `A` against a base "
"which is not present in all of `A`'s islands. This results in slightly "
"larger packs (because we miss some delta opportunities), but guarantees that "
"a fetch of one island will not have to recompute deltas on the fly due to "
"crossing island boundaries."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:369
msgid ""
"When repacking with delta islands the delta window tends to get clogged with "
"candidates that are forbidden by the config. Repacking with a big --window "
"helps (and doesn't take as long as it otherwise might because we can reject "
"some object pairs based on islands before doing any computation on the "
"content)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:373
msgid ""
"Islands are configured via the `pack.island` option, which can be specified "
"multiple times. Each value is a left-anchored regular expressions matching "
"refnames. For example:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-pack-objects.txt:378
#, no-wrap
msgid ""
"[pack]\n"
"island = refs/heads/\n"
"island = refs/tags/\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:385
msgid ""
"puts heads and tags into an island (whose name is the empty string; see "
"below for more on naming). Any refs which do not match those regular "
"expressions (e.g., `refs/pull/123`) is not in any island. Any object which "
"is reachable only from `refs/pull/` (but not heads or tags) is therefore not "
"a candidate to be used as a base for `refs/heads/`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:393
msgid ""
"Refs are grouped into islands based on their \"names\", and two regexes that "
"produce the same name are considered to be in the same island. The names are "
"computed from the regexes by concatenating any capture groups from the "
"regex, with a '-' dash in between. (And if there are no capture groups, then "
"the name is the empty string, as in the above example.) This allows you to "
"create arbitrary numbers of islands. Only up to 14 such capture groups are "
"supported though."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:397
msgid ""
"For example, imagine you store the refs for each fork in `refs/virtual/ID`, "
"where `ID` is a numeric identifier. You might then configure:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-pack-objects.txt:403
#, no-wrap
msgid ""
"[pack]\n"
"island = refs/virtual/([0-9]+)/heads/\n"
"island = refs/virtual/([0-9]+)/tags/\n"
"island = refs/virtual/([0-9]+)/(pull)/\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:408
msgid ""
"That puts the heads and tags for each fork in their own island (named "
"\"1234\" or similar), and the pull refs for each go into their own \"1234-"
"pull\"."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:412
msgid ""
"Note that we pick a single island for each regex to go into, using \"last "
"one wins\" ordering (which allows repo-specific config to take precedence "
"over user-wide config, and so forth)."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-pack-objects.txt:415
#, no-wrap
msgid "CONFIGURATION"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:419
msgid ""
"Various configuration variables affect packing, see linkgit:git-config[1] "
"(search for \"pack\" and \"delta\")."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:423
msgid ""
"Notably, delta compression is not used on objects larger than the `core."
"bigFileThreshold` configuration variable and on files with the attribute "
"`delta` set to false."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-pack-objects.txt:425
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:429
msgid ""
"linkgit:git-rev-list[1] linkgit:git-repack[1] linkgit:git-prune-packed[1]"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-pack-objects.txt:431
#, no-wrap
msgid "GIT"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-pack-objects.txt:432
msgid "Part of the linkgit:git[1] suite"
msgstr ""
