# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 3.0\n"
"POT-Creation-Date: 2023-07-18 11:05+0900\n"
"PO-Revision-Date: 2023-10-12 09:03+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/git-rerere.txt:2
#, no-wrap
msgid "git-rerere(1)"
msgstr "git-rerere(1)"

#. type: Title -
#: ../Documentation-sedout/git-rerere.txt:5
#, no-wrap
msgid "NAME"
msgstr "NAME"

#. type: Plain text
#: ../Documentation-sedout/git-rerere.txt:7
msgid "git-rerere - Reuse recorded resolution of conflicted merges"
msgstr "git-rerere - 競合するマージの記録された競合解決決定を再利用する"

#. type: Title -
#: ../Documentation-sedout/git-rerere.txt:9
#, no-wrap
msgid "SYNOPSIS"
msgstr "SYNOPSIS"

#. type: Plain text
#: ../Documentation-sedout/git-rerere.txt:12
#, no-wrap
msgid "'git rerere' [clear | forget <pathspec>... | diff | status | remaining | gc]\n"
msgstr "'git rerere' [clear | forget <pathspec>... | diff | status | remaining | gc]\n"

#. type: Title -
#: ../Documentation-sedout/git-rerere.txt:14
#, no-wrap
msgid "DESCRIPTION"
msgstr "DESCRIPTION"

#. type: Plain text
#: ../Documentation-sedout/git-rerere.txt:20
msgid ""
"In a workflow employing relatively long lived topic branches, the developer "
"sometimes needs to resolve the same conflicts over and over again until the "
"topic branches are done (either merged to the \"release\" branch, or sent "
"out and accepted upstream)."
msgstr ""
"比較的長期間存続するトピックブランチを使用するワークフローでは、開発者は、ト"
"ピックブランチが完了するまで(「リリース」ブランチにマージされるか、アップスト"
"リームに送信されて受け入れられるまで)、同じ競合を何度も解決する必要がある場合"
"があります。"

#. type: Plain text
#: ../Documentation-sedout/git-rerere.txt:25
msgid ""
"This command assists the developer in this process by recording conflicted "
"automerge results and corresponding hand resolve results on the initial "
"manual merge, and applying previously recorded hand resolutions to their "
"corresponding automerge results."
msgstr ""
"このコマンドは、最初の手動マージにて、自動マージ結果の競合とそれに対応した手"
"動解決結果を記録しておいて、以後の自動マージ結果の競合に、その記録した手動競"
"合解決決定を適用することにより、この処理において開発者を支援します。"

#. type: Plain text
#: ../Documentation-sedout/git-rerere.txt:29
msgid ""
"You need to set the configuration variable `rerere.enabled` in order to "
"enable this command."
msgstr ""
"あなたがこのコマンドを有効にするには、構成変数 `rerere.enabled` を設定する必"
"要があります。"

#. type: Title -
#: ../Documentation-sedout/git-rerere.txt:32
#, no-wrap
msgid "COMMANDS"
msgstr "COMMANDS"

#. type: Plain text
#: ../Documentation-sedout/git-rerere.txt:37
msgid ""
"Normally, 'git rerere' is run without arguments or user-intervention.  "
"However, it has several commands that allow it to interact with its working "
"state."
msgstr ""
"通常、「git rerere」は、引数やユーザーの介入なしで実行されます。 ただし、動作"
"状態との対話を可能にするいくつかのコマンドがあります。"

#. type: Labeled list
#: ../Documentation-sedout/git-rerere.txt:38
#, no-wrap
msgid "'clear'"
msgstr "'clear'"

#. type: Plain text
#: ../Documentation-sedout/git-rerere.txt:43
msgid ""
"Reset the metadata used by rerere if a merge resolution is to be aborted.  "
"Calling 'git am [--skip|--abort]' or 'git rebase [--skip|--abort]' will "
"automatically invoke this command."
msgstr ""
"マージ競合解決決定を中止する場合は、rerereが使用するメタデータをリセットしま"
"す。 `git am [--skip|--abort]` または `git rebase [--skip|--abort]` を呼び出"
"すと、このコマンドが自動的に呼び出されます。"

#. type: Labeled list
#: ../Documentation-sedout/git-rerere.txt:44
#, no-wrap
msgid "'forget' <pathspec>"
msgstr "'forget' <pathspec>"

#. type: Plain text
#: ../Documentation-sedout/git-rerere.txt:48
msgid ""
"Reset the conflict resolutions which rerere has recorded for the current "
"conflict in <pathspec>."
msgstr ""
"<pathspec> の現在の競合について rerere が記録した競合解決決定をリセットしま"
"す。"

#. type: Labeled list
#: ../Documentation-sedout/git-rerere.txt:49
#, no-wrap
msgid "'diff'"
msgstr "'diff'"

#. type: Plain text
#: ../Documentation-sedout/git-rerere.txt:55
msgid ""
"Display diffs for the current state of the resolution.  It is useful for "
"tracking what has changed while the user is resolving conflicts.  Additional "
"arguments are passed directly to the system 'diff' command installed in PATH."
msgstr ""
"競合解決決定の現在の状態の差分を表示します。これは、ユーザーが競合を解決して"
"いる間に何が変更されたかを追跡するのに役立ちます。追加の引数は、PATHにインス"
"トールされているシステムの「diff」コマンドに直接渡されます。"

#. type: Labeled list
#: ../Documentation-sedout/git-rerere.txt:56
#, no-wrap
msgid "'status'"
msgstr "'status'"

#. type: Plain text
#: ../Documentation-sedout/git-rerere.txt:59
msgid "Print paths with conflicts whose merge resolution rerere will record."
msgstr "マージ競合解決決定がrerereで記録される競合のあるパスをプリントする。"

#. type: Labeled list
#: ../Documentation-sedout/git-rerere.txt:60
#, no-wrap
msgid "'remaining'"
msgstr "'remaining'"

#. type: Plain text
#: ../Documentation-sedout/git-rerere.txt:65
msgid ""
"Print paths with conflicts that have not been autoresolved by rerere.  This "
"includes paths whose resolutions cannot be tracked by rerere, such as "
"conflicting submodules."
msgstr ""
"rerereによって自動解決されていない競合のあるパスをプリントする。これには、競"
"合するサブモジュールなど、rerereで競合解決決定を追跡できないパスが含まれま"
"す。"

#. type: Labeled list
#: ../Documentation-sedout/git-rerere.txt:66
#, no-wrap
msgid "'gc'"
msgstr "'gc'"

#. type: Plain text
#: ../Documentation-sedout/git-rerere.txt:74
msgid ""
"Prune records of conflicted merges that occurred a long time ago.  By "
"default, unresolved conflicts older than 15 days and resolved conflicts "
"older than 60 days are pruned.  These defaults are controlled via the `gc."
"rerereUnresolved` and `gc.rerereResolved` configuration variables "
"respectively."
msgstr ""
"ずっと前に発生した競合するマージのレコードを剪定(prune)します。デフォルトで"
"は、15日より古い未解決の競合と、60日より古い解決済みの競合は剪定されます。こ"
"れらのデフォルトは、それぞれ `gc.rerereUnresolved` および `gc."
"rerereResolved` 構成変数を介して制御されます。"

#. type: Title -
#: ../Documentation-sedout/git-rerere.txt:77
#, no-wrap
msgid "DISCUSSION"
msgstr "DISCUSSION"

#. type: Plain text
#: ../Documentation-sedout/git-rerere.txt:83
msgid ""
"When your topic branch modifies an overlapping area that your master branch "
"(or upstream) touched since your topic branch forked from it, you may want "
"to test it with the latest master, even before your topic branch is ready to "
"be pushed upstream:"
msgstr ""
"トピックブランチが分岐してからマスターブランチ(またはアップストリーム)が触れ"
"た重複領域をトピックブランチが変更する場合、トピックブランチをアップストリー"
"ムにプッシュする準備ができる前であっても、最新のマスターでテストすることをお"
"勧めします:"

#. type: delimited block -
#: ../Documentation-sedout/git-rerere.txt:88
#, no-wrap
msgid ""
"              o---*---o topic\n"
"             /\n"
"    o---o---o---*---o---o master\n"
msgstr ""
"              o---*---o topic\n"
"             /\n"
"    o---o---o---*---o---o master\n"

#. type: Plain text
#: ../Documentation-sedout/git-rerere.txt:92
msgid ""
"For such a test, you need to merge master and topic somehow.  One way to do "
"it is to pull master into the topic branch:"
msgstr ""
"このようなテストでは、マスターとトピックを何らかの方法でマージする必要があり"
"ます。これを行う1つの方法は、マスターをトピックブランチにプルすることです:"

#. type: delimited block -
#: ../Documentation-sedout/git-rerere.txt:96
#, no-wrap
msgid ""
"\t$ git switch topic\n"
"\t$ git merge master\n"
msgstr ""
"\t$ git switch topic\n"
"\t$ git merge master\n"

#. type: delimited block -
#: ../Documentation-sedout/git-rerere.txt:100
#, no-wrap
msgid ""
"              o---*---o---+ topic\n"
"             /           /\n"
"    o---o---o---*---o---o master\n"
msgstr ""
"              o---*---o---+ topic\n"
"             /           /\n"
"    o---o---o---*---o---o master\n"

#. type: Plain text
#: ../Documentation-sedout/git-rerere.txt:106
msgid ""
"The commits marked with `*` touch the same area in the same file; you need "
"to resolve the conflicts when creating the commit marked with `+`.  Then you "
"can test the result to make sure your work-in-progress still works with what "
"is in the latest master."
msgstr ""
"`*` でマークされたコミットは、同じファイルの同じ領域にアクセスします。 `+` で"
"マークされたコミットを作成するときに競合を解決する必要があります。次に、結果"
"をテストして、進行中の作業が最新のマスターにあるもので引き続き機能することを"
"確認できます。"

#. type: Plain text
#: ../Documentation-sedout/git-rerere.txt:114
msgid ""
"After this test merge, there are two ways to continue your work on the "
"topic.  The easiest is to build on top of the test merge commit `+`, and "
"when your work in the topic branch is finally ready, pull the topic branch "
"into master, and/or ask the upstream to pull from you.  By that time, "
"however, the master or the upstream might have been advanced since the test "
"merge `+`, in which case the final commit graph would look like this:"
msgstr ""
"このテストマージの後、トピックの作業を続行するには2つの方法があります。最も簡"
"単なのは、テストマージコミット `+` の上に構築することです。トピックブランチで"
"の作業の準備ができたら、トピックブランチをマスターにプルするか、アップスト"
"リームにプルするように依頼します。ただし、その時点で、テストマージ `+` 以降、"
"マスターまたはアップストリームが進んでいる可能性があります。その場合、最終的"
"なコミットグラフは以下のようになります:"

#. type: delimited block -
#: ../Documentation-sedout/git-rerere.txt:121
#, no-wrap
msgid ""
"\t$ git switch topic\n"
"\t$ git merge master\n"
"\t$ ... work on both topic and master branches\n"
"\t$ git switch master\n"
"\t$ git merge topic\n"
msgstr ""
"\t$ git switch topic\n"
"\t$ git merge master\n"
"\t$ ... work on both topic and master branches\n"
"\t$ git switch master\n"
"\t$ git merge topic\n"

#. type: delimited block -
#: ../Documentation-sedout/git-rerere.txt:125
#, no-wrap
msgid ""
"              o---*---o---+---o---o topic\n"
"             /           /         \\\n"
"    o---o---o---*---o---o---o---o---+ master\n"
msgstr ""
"              o---*---o---+---o---o topic\n"
"             /           /         \\\n"
"    o---o---o---*---o---o---o---o---+ master\n"

#. type: Plain text
#: ../Documentation-sedout/git-rerere.txt:133
msgid ""
"When your topic branch is long-lived, however, your topic branch would end "
"up having many such \"Merge from master\" commits on it, which would "
"unnecessarily clutter the development history.  Readers of the Linux kernel "
"mailing list may remember that Linus complained about such too frequent test "
"merges when a subsystem maintainer asked to pull from a branch full of "
"\"useless merges\"."
msgstr ""
"けれども、トピックブランチの存続期間が長い場合、トピックブランチにはそのよう"
"な「マスターからのマージ」コミットが多数含まれることになり、開発履歴が不必要"
"に乱雑になります。Linuxカーネルメーリングリストの読者は、サブシステムのメンテ"
"ナが「役に立たないマージ」でいっぱいのブランチからプルするように要求したとき"
"に、Linusがテストマージの頻度が高すぎると不平を言ったことを覚えているかもしれ"
"ません。"

#. type: Plain text
#: ../Documentation-sedout/git-rerere.txt:137
msgid ""
"As an alternative, to keep the topic branch clean of test merges, you could "
"blow away the test merge, and keep building on top of the tip before the "
"test merge:"
msgstr ""
"別の方法として、トピックブランチでテストマージをクリーンに保つために、テスト"
"マージを吹き飛ばし、テストマージの前に、先端の先に構築し続けることができます:"

#. type: delimited block -
#: ../Documentation-sedout/git-rerere.txt:145
#, no-wrap
msgid ""
"\t$ git switch topic\n"
"\t$ git merge master\n"
"\t$ git reset --hard HEAD^ ;# rewind the test merge\n"
"\t$ ... work on both topic and master branches\n"
"\t$ git switch master\n"
"\t$ git merge topic\n"
msgstr ""
"\t$ git switch topic\n"
"\t$ git merge master\n"
"\t$ git reset --hard HEAD^ ;# rewind the test merge\n"
"\t$ ... work on both topic and master branches\n"
"\t$ git switch master\n"
"\t$ git merge topic\n"

#. type: delimited block -
#: ../Documentation-sedout/git-rerere.txt:149
#, no-wrap
msgid ""
"              o---*---o-------o---o topic\n"
"             /                     \\\n"
"    o---o---o---*---o---o---o---o---+ master\n"
msgstr ""
"              o---*---o-------o---o topic\n"
"             /                     \\\n"
"    o---o---o---*---o---o---o---o---+ master\n"

#. type: Plain text
#: ../Documentation-sedout/git-rerere.txt:159
msgid ""
"This would leave only one merge commit when your topic branch is finally "
"ready and merged into the master branch.  This merge would require you to "
"resolve the conflict, introduced by the commits marked with `*`.  However, "
"this conflict is often the same conflict you resolved when you created the "
"test merge you blew away.  'git rerere' helps you resolve this final "
"conflicted merge using the information from your earlier hand resolve."
msgstr ""
"これにより、トピックブランチの準備が整い、マスターブランチにマージされたとき"
"に、マージコミットが1つだけ残ります。 このマージでは、 `*` でマークされたコ"
"ミットによって導入された競合を解決する必要があります。ただし、この競合は、多"
"くの場合、吹き飛ばしたテストマージを作成したときに解決した競合と同じです。 "
"'git rerere' は、以前の手動解決からの情報を使用して、この最後の競合するマージ"
"を解決するのに役立ちます。"

#. type: Plain text
#: ../Documentation-sedout/git-rerere.txt:167
msgid ""
"Running the 'git rerere' command immediately after a conflicted automerge "
"records the conflicted working tree files, with the usual conflict markers "
"`<<<<<<<`, `=======`, and `>>>>>>>` in them.  Later, after you are done "
"resolving the conflicts, running 'git rerere' again will record the resolved "
"state of these files.  Suppose you did this when you created the test merge "
"of master into the topic branch."
msgstr ""
"競合する自動マージの直後に「git rerere」コマンドを実行すると、それらの中の、"
"通常の競合マーカー `<<<<<<<` と `=======` と `>>>>>>>` を使用して、競合する作"
"業ツリーファイルが記録されます。後で、競合の解決が完了した後、「git rerere」"
"を再度実行すると、これらのファイルの解決された状態が記録されます。 masterのト"
"ピックブランチへのテストマージを作成したときにこれを行ったとします。"

#. type: Plain text
#: ../Documentation-sedout/git-rerere.txt:177
msgid ""
"Next time, after seeing the same conflicted automerge, running 'git rerere' "
"will perform a three-way merge between the earlier conflicted automerge, the "
"earlier manual resolution, and the current conflicted automerge.  If this "
"three-way merge resolves cleanly, the result is written out to your working "
"tree file, so you do not have to manually resolve it.  Note that 'git "
"rerere' leaves the index file alone, so you still need to do the final "
"sanity checks with `git diff` (or `git diff -c`) and 'git add' when you are "
"satisfied."
msgstr ""
"次回、同じ競合する自動マージを確認した後、「git rerere」を実行すると、以前の"
"競合する自動マージ、以前の手動解決、および現在の競合する自動マージの間で3方向"
"のマージが実行されます。この3方向マージが正常に解決される場合、結果は作業ツ"
"リーファイルに書き出されるため、手動で解決する必要はありません。注意: 'git "
"rerere' はインデックスファイルをそのままにしておくので、結果に満足のいく場合"
"は、 `git diff` (または `git diff -c`)を使用して最終的な健全性チェックを行"
"い、そして、 'git add' する必要があることに注意してください。"

#. type: Plain text
#: ../Documentation-sedout/git-rerere.txt:185
msgid ""
"As a convenience measure, 'git merge' automatically invokes 'git rerere' "
"upon exiting with a failed automerge and 'git rerere' records the hand "
"resolve when it is a new conflict, or reuses the earlier hand resolve when "
"it is not.  'git commit' also invokes 'git rerere' when committing a merge "
"result.  What this means is that you do not have to do anything special "
"yourself (besides enabling the rerere.enabled config variable)."
msgstr ""
"より便利な方法として、「git merge」は、失敗した自動マージで終了すると自動的に"
"「git rerere」を呼び出し、「git rerere」は、新しい競合の場合は手動解決を記録"
"し、そうでない場合は以前の手動解決を再利用します。「git commit」は、マージ結"
"果をコミットするときに「git rerere」も呼び出します。 これが意味することは、"
"（rerere.enabled構成変数を有効にする以外に）自分で特別なことをする必要がない"
"ということです。"

#. type: Plain text
#: ../Documentation-sedout/git-rerere.txt:190
msgid ""
"In our example, when you do the test merge, the manual resolution is "
"recorded, and it will be reused when you do the actual merge later with the "
"updated master and topic branch, as long as the recorded resolution is still "
"applicable."
msgstr ""
"この例では、テストマージを実行すると、手動の競合解決決定が記録され、記録され"
"た競合解決決定が引き続き適用可能である限り、後で更新されたマスターブランチと"
"トピックブランチを使用して実際のマージを実行するときに再利用されます。"

#. type: Plain text
#: ../Documentation-sedout/git-rerere.txt:194
msgid ""
"The information 'git rerere' records is also used when running 'git "
"rebase'.  After blowing away the test merge and continuing development on "
"the topic branch:"
msgstr ""
"「git rerere」レコードの情報は、「git rebase」を実行するときにも使用されま"
"す。 テストマージを吹き飛ばし、トピックブランチで開発を続けた後:"

#. type: delimited block -
#: ../Documentation-sedout/git-rerere.txt:199
#, no-wrap
msgid ""
"              o---*---o-------o---o topic\n"
"             /\n"
"    o---o---o---*---o---o---o---o   master\n"
msgstr ""
"              o---*---o-------o---o topic\n"
"             /\n"
"    o---o---o---*---o---o---o---o   master\n"

#. type: delimited block -
#: ../Documentation-sedout/git-rerere.txt:201
#, no-wrap
msgid "\t$ git rebase master topic\n"
msgstr "\t$ git rebase master topic\n"

#. type: delimited block -
#: ../Documentation-sedout/git-rerere.txt:205
#, no-wrap
msgid ""
"\t\t\t\t  o---*---o-------o---o topic\n"
"\t\t\t\t /\n"
"    o---o---o---*---o---o---o---o   master\n"
msgstr ""
"\t\t\t\t  o---*---o-------o---o topic\n"
"\t\t\t\t /\n"
"    o---o---o---*---o---o---o---o   master\n"

#. type: Plain text
#: ../Documentation-sedout/git-rerere.txt:213
msgid ""
"you could run `git rebase master topic`, to bring yourself up to date before "
"your topic is ready to be sent upstream.  This would result in falling back "
"to a three-way merge, and it would conflict the same way as the test merge "
"you resolved earlier.  'git rerere' will be run by 'git rebase' to help you "
"resolve this conflict."
msgstr ""
"`git rebase master topic` を実行して、トピックをアップストリームに送信する準"
"備ができる前に最新の状態にすることができます。これにより、3方向マージにフォー"
"ルバックし、前に解決したテストマージと同じように競合します。 「git rerere」は"
"「git rebase」によって実行され、この競合を解決するのに役立ちます。"

#. type: Plain text
#: ../Documentation-sedout/git-rerere.txt:219
msgid ""
"[NOTE] 'git rerere' relies on the conflict markers in the file to detect the "
"conflict.  If the file already contains lines that look the same as lines "
"with conflict markers, 'git rerere' may fail to record a conflict "
"resolution.  To work around this, the `conflict-marker-size` setting in "
"linkgit:gitattributes[5] can be used."
msgstr ""
"[注] 'git rerere' は、ファイル内の競合マーカーに依存して競合を検出します。"
"ファイルに競合マーカーのある行と同じように見える行がすでに含まれている場合、"
"「git rerere」は競合解決の記録に失敗する可能性があります。これを回避するに"
"は、 linkgit:gitattributes[5] の `conflict-marker-size` 設定を使用できます。"

#. type: Title -
#: ../Documentation-sedout/git-rerere.txt:221
#, no-wrap
msgid "GIT"
msgstr "GIT"

#. type: Plain text
#: ../Documentation-sedout/git-rerere.txt:222
msgid "Part of the linkgit:git[1] suite"
msgstr "Part of the linkgit:git[1] suite"
