# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-11-04 04:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/git-rm.txt:2
#, no-wrap
msgid "git-rm(1)"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-rm.txt:5
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rm.txt:7
msgid "git-rm - Remove files from the working tree and from the index"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-rm.txt:9
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rm.txt:14
#, no-wrap
msgid ""
"'git rm' [-f | --force] [-n] [-r] [--cached] [--ignore-unmatch]\n"
"\t  [--quiet] [--pathspec-from-file=<file> [--pathspec-file-nul]]\n"
"\t  [--] [<pathspec>...]\n"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-rm.txt:16
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rm.txt:29
msgid ""
"Remove files matching pathspec from the index, or from the working tree and "
"the index. `git rm` will not remove a file from just your working directory. "
"(There is no option to remove a file only from the working tree and yet keep "
"it in the index; use `/bin/rm` if you want to do that.) The files being "
"removed have to be identical to the tip of the branch, and no updates to "
"their contents can be staged in the index, though that default behavior can "
"be overridden with the `-f` option.  When `--cached` is given, the staged "
"content has to match either the tip of the branch or the file on disk, "
"allowing the file to be removed from just the index. When sparse-checkouts "
"are in use (see linkgit:git-sparse-checkout[1]), `git rm` will only remove "
"paths within the sparse-checkout patterns."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-rm.txt:32
#, no-wrap
msgid "OPTIONS"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-rm.txt:33
#, no-wrap
msgid "<pathspec>..."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rm.txt:38
msgid ""
"Files to remove.  A leading directory name (e.g. `dir` to remove `dir/file1` "
"and `dir/file2`) can be given to remove all files in the directory, and "
"recursively all sub-directories, but this requires the `-r` option to be "
"explicitly given."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rm.txt:40
msgid "The command removes only the paths that are known to Git."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rm.txt:45
msgid ""
"File globbing matches across directory boundaries.  Thus, given two "
"directories `d` and `d2`, there is a difference between using `git rm 'd*'` "
"and `git rm 'd/*'`, as the former will also remove all of directory `d2`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rm.txt:47
msgid "For more details, see the 'pathspec' entry in linkgit:gitglossary[7]."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-rm.txt:48
#, no-wrap
msgid "`-f`"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-rm.txt:49
#, no-wrap
msgid "`--force`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rm.txt:51
msgid "Override the up-to-date check."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-rm.txt:52
#, no-wrap
msgid "`-n`"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-rm.txt:53
#, no-wrap
msgid "`--dry-run`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rm.txt:57
msgid ""
"Don't actually remove any file(s).  Instead, just show if they exist in the "
"index and would otherwise be removed by the command."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-rm.txt:58
#, no-wrap
msgid "`-r`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rm.txt:61
msgid "Allow recursive removal when a leading directory name is given."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-rm.txt:62
#, no-wrap
msgid "\\--"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rm.txt:66
msgid ""
"This option can be used to separate command-line options from the list of "
"files, (useful when filenames might be mistaken for command-line options)."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-rm.txt:67
#, no-wrap
msgid "`--cached`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rm.txt:71
msgid ""
"Use this option to unstage and remove paths only from the index.  Working "
"tree files, whether modified or not, will be left alone."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-rm.txt:72
#, no-wrap
msgid "`--ignore-unmatch`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rm.txt:74
msgid "Exit with a zero status even if no files matched."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-rm.txt:75
#, no-wrap
msgid "`-q`"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-rm.txt:76
#, no-wrap
msgid "`--quiet`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rm.txt:79
msgid ""
"`git rm` normally outputs one line (in the form of an `rm` command)  for "
"each file removed. This option suppresses that output."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-rm.txt:80
#, no-wrap
msgid "`--pathspec-from-file=<file>`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rm.txt:87
msgid ""
"Pathspec is passed in `<file>` instead of commandline args. If `<file>` is "
"exactly `-` then standard input is used. Pathspec elements are separated by "
"LF or CR/LF. Pathspec elements can be quoted as explained for the "
"configuration variable `core.quotePath` (see linkgit:git-config[1]). See "
"also `--pathspec-file-nul` and global `--literal-pathspecs`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-rm.txt:88
#, no-wrap
msgid "`--pathspec-file-nul`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rm.txt:92
msgid ""
"Only meaningful with `--pathspec-from-file`. Pathspec elements are separated "
"with NUL character and all other characters are taken literally (including "
"newlines and quotes)."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-rm.txt:95
#, no-wrap
msgid "REMOVING FILES THAT HAVE DISAPPEARED FROM THE FILESYSTEM"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rm.txt:100
msgid ""
"There is no option for `git rm` to remove from the index only the paths that "
"have disappeared from the filesystem. However, depending on the use case, "
"there are several ways that can be done."
msgstr ""

#. type: Title ~
#: ../Documentation-sedout/git-rm.txt:102
#, no-wrap
msgid "Using ``git commit -a''"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rm.txt:109
msgid ""
"If you intend that your next commit should record all modifications of "
"tracked files in the working tree and record all removals of files that have "
"been removed from the working tree with `rm` (as opposed to `git rm`), use "
"`git commit -a`, as it will automatically notice and record all removals.  "
"You can also have a similar effect without committing by using `git add -u`."
msgstr ""

#. type: Title ~
#: ../Documentation-sedout/git-rm.txt:111
#, no-wrap
msgid "Using ``git add -A''"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rm.txt:115
msgid ""
"When accepting a new code drop for a vendor branch, you probably want to "
"record both the removal of paths and additions of new paths as well as "
"modifications of existing paths."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rm.txt:118
msgid ""
"Typically you would first remove all tracked files from the working tree "
"using this command:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-rm.txt:121
#, no-wrap
msgid "git ls-files -z | xargs -0 rm -f\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rm.txt:125
msgid ""
"and then untar the new code in the working tree. Alternately you could "
"'rsync' the changes into the working tree."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rm.txt:128
msgid ""
"After that, the easiest way to record all removals, additions, and "
"modifications in the working tree is:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-rm.txt:131
#, no-wrap
msgid "git add -A\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rm.txt:134
msgid "See linkgit:git-add[1]."
msgstr ""

#. type: Title ~
#: ../Documentation-sedout/git-rm.txt:136
#, no-wrap
msgid "Other ways"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rm.txt:141
msgid ""
"If all you really want to do is to remove from the index the files that are "
"no longer present in the working tree (perhaps because your working tree is "
"dirty so that you cannot use `git commit -a`), use the following command:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-rm.txt:144
#, no-wrap
msgid "git diff --name-only --diff-filter=D -z | xargs -0 git rm --cached\n"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-rm.txt:147
#, no-wrap
msgid "SUBMODULES"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rm.txt:157
msgid ""
"Only submodules using a gitfile (which means they were cloned with a Git "
"version 1.7.8 or newer) will be removed from the work tree, as their "
"repository lives inside the .git directory of the superproject. If a "
"submodule (or one of those nested inside it)  still uses a .git directory, "
"`git rm` will move the submodules git directory into the superprojects git "
"directory to protect the submodule's history. If it exists the submodule."
"<name> section in the linkgit:gitmodules[5] file will also be removed and "
"that file will be staged (unless --cached or -n are used)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rm.txt:163
msgid ""
"A submodule is considered up to date when the HEAD is the same as recorded "
"in the index, no tracked files are modified and no untracked files that "
"aren't ignored are present in the submodules work tree.  Ignored files are "
"deemed expendable and won't stop a submodule's work tree from being removed."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rm.txt:167
msgid ""
"If you only want to remove the local checkout of a submodule from your work "
"tree without committing the removal, use linkgit:git-submodule[1] `deinit` "
"instead. Also see linkgit:gitsubmodules[7] for details on submodule removal."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-rm.txt:169
#, no-wrap
msgid "EXAMPLES"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-rm.txt:170
#, no-wrap
msgid "`git rm Documentation/\\*.txt`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rm.txt:173
msgid ""
"Removes all `*.txt` files from the index that are under the `Documentation` "
"directory and any of its subdirectories."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rm.txt:177
msgid ""
"Note that the asterisk `*` is quoted from the shell in this example; this "
"lets Git, and not the shell, expand the pathnames of files and "
"subdirectories under the `Documentation/` directory."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-rm.txt:178
#, no-wrap
msgid "`git rm -f git-*.sh`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rm.txt:182
msgid ""
"Because this example lets the shell expand the asterisk (i.e. you are "
"listing the files explicitly), it does not remove `subdir/git-foo.sh`."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-rm.txt:184
#, no-wrap
msgid "BUGS"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rm.txt:191
msgid ""
"Each time a superproject update removes a populated submodule (e.g. when "
"switching between commits before and after the removal) a stale submodule "
"checkout will remain in the old location. Removing the old directory is only "
"safe when it uses a gitfile, as otherwise the history of the submodule will "
"be deleted too. This step will be obsolete when recursive submodule update "
"has been implemented."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-rm.txt:193
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rm.txt:195
msgid "linkgit:git-add[1]"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-rm.txt:197
#, no-wrap
msgid "GIT"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rm.txt:198
msgid "Part of the linkgit:git[1] suite"
msgstr ""
