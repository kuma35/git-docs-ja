# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-10-01 00:25+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation/git-commit.txt:2
#, no-wrap
msgid "git-commit(1)"
msgstr ""

#. type: Title -
#: ../Documentation/git-commit.txt:5
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:7
msgid "git-commit - Record changes to the repository"
msgstr ""

#. type: Title -
#: ../Documentation/git-commit.txt:9
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:19
#, no-wrap
msgid ""
"'git commit' [-a | --interactive | --patch] [-s] [-v] [-u<mode>] [--amend]\n"
"\t   [--dry-run] [(-c | -C | --squash) <commit> | --fixup "
"[(amend|reword):]<commit>)]\n"
"\t   [-F <file> | -m <msg>] [--reset-author] [--allow-empty]\n"
"\t   [--allow-empty-message] [--no-verify] [-e] [--author=<author>]\n"
"\t   [--date=<date>] [--cleanup=<mode>] [--[no-]status]\n"
"\t   [-i | -o] [--pathspec-from-file=<file> [--pathspec-file-nul]]\n"
"\t   [(--trailer <token>[(=|:)<value>])...] [-S[<keyid>]]\n"
"\t   [--] [<pathspec>...]\n"
msgstr ""

#. type: Title -
#: ../Documentation/git-commit.txt:21
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:28
msgid ""
"Create a new commit containing the current contents of the index and the "
"given log message describing the changes. The new commit is a direct child "
"of HEAD, usually the tip of the current branch, and the branch is updated to "
"point to it (unless no branch is associated with the working tree, in which "
"case HEAD is \"detached\" as described in linkgit:git-checkout[1])."
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:30
msgid "The content to be committed can be specified in several ways:"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:34
msgid ""
"by using linkgit:git-add[1] to incrementally \"add\" changes to the index "
"before using the 'commit' command (Note: even modified files must be "
"\"added\");"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:37
msgid ""
"by using linkgit:git-rm[1] to remove files from the working tree and the "
"index, again before using the 'commit' command;"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:43
msgid ""
"by listing files as arguments to the 'commit' command (without --interactive "
"or --patch switch), in which case the commit will ignore changes staged in "
"the index, and instead record the current content of the listed files (which "
"must already be known to Git);"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:49
msgid ""
"by using the -a switch with the 'commit' command to automatically \"add\" "
"changes from all known files (i.e. all files that are already listed in the "
"index) and to automatically \"rm\" files in the index that have been removed "
"from the working tree, and then perform the actual commit;"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:55
msgid ""
"by using the --interactive or --patch switches with the 'commit' command to "
"decide one by one which files or hunks should be part of the commit in "
"addition to contents in the index, before finalizing the operation. See the "
"``Interactive Mode'' section of linkgit:git-add[1] to learn how to operate "
"these modes."
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:59
msgid ""
"The `--dry-run` option can be used to obtain a summary of what is included "
"by any of the above for the next commit by giving the same set of parameters "
"(options and paths)."
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:62
msgid ""
"If you make a commit and then find a mistake immediately after that, you can "
"recover from it with 'git reset'."
msgstr ""

#. type: Title -
#: ../Documentation/git-commit.txt:66
#, no-wrap
msgid "OPTIONS"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:67
#, no-wrap
msgid "-a"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:68
#, no-wrap
msgid "--all"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:72
msgid ""
"Tell the command to automatically stage files that have been modified and "
"deleted, but new files you have not told Git about are not affected."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:73
#, no-wrap
msgid "-p"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:74
#, no-wrap
msgid "--patch"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:78
msgid ""
"Use the interactive patch selection interface to choose which changes to "
"commit. See linkgit:git-add[1] for details."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:79
#, no-wrap
msgid "-C <commit>"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:80
#, no-wrap
msgid "--reuse-message=<commit>"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:84
msgid ""
"Take an existing commit object, and reuse the log message and the authorship "
"information (including the timestamp)  when creating the commit."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:85
#, no-wrap
msgid "-c <commit>"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:86
#, no-wrap
msgid "--reedit-message=<commit>"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:89
msgid ""
"Like '-C', but with `-c` the editor is invoked, so that the user can further "
"edit the commit message."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:90
#, no-wrap
msgid "--fixup=[(amend|reword):]<commit>"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:100
msgid ""
"Create a new commit which \"fixes up\" `<commit>` when applied with `git "
"rebase --autosquash`. Plain `--fixup=<commit>` creates a \"fixup!\" commit "
"which changes the content of `<commit>` but leaves its log message "
"untouched. `--fixup=amend:<commit>` is similar but creates an \"amend!\" "
"commit which also replaces the log message of `<commit>` with the log "
"message of the \"amend!\" commit.  `--fixup=reword:<commit>` creates an "
"\"amend!\" commit which replaces the log message of `<commit>` with its own "
"log message but makes no changes to the content of `<commit>`."
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:108
msgid ""
"The commit created by plain `--fixup=<commit>` has a subject composed of "
"\"fixup!\" followed by the subject line from <commit>, and is recognized "
"specially by `git rebase --autosquash`. The `-m` option may be used to "
"supplement the log message of the created commit, but the additional "
"commentary will be thrown away once the \"fixup!\" commit is squashed into "
"`<commit>` by `git rebase --autosquash`."
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:118
msgid ""
"The commit created by `--fixup=amend:<commit>` is similar but its subject is "
"instead prefixed with \"amend!\". The log message of <commit> is copied into "
"the log message of the \"amend!\" commit and opened in an editor so it can "
"be refined. When `git rebase --autosquash` squashes the \"amend!\" commit "
"into `<commit>`, the log message of `<commit>` is replaced by the refined "
"log message from the \"amend!\" commit. It is an error for the \"amend!\" "
"commit's log message to be empty unless `--allow-empty-message` is "
"specified."
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:124
msgid ""
"`--fixup=reword:<commit>` is shorthand for `--fixup=amend:<commit> "
"--only`. It creates an \"amend!\" commit with only a log message (ignoring "
"any changes staged in the index). When squashed by `git rebase "
"--autosquash`, it replaces the log message of `<commit>` without making any "
"other changes."
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:128
msgid ""
"Neither \"fixup!\" nor \"amend!\" commits change authorship of `<commit>` "
"when applied by `git rebase --autosquash`.  See linkgit:git-rebase[1] for "
"details."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:129
#, no-wrap
msgid "--squash=<commit>"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:135
msgid ""
"Construct a commit message for use with `rebase --autosquash`.  The commit "
"message subject line is taken from the specified commit with a prefix of "
"\"squash! \".  Can be used with additional commit message options "
"(`-m`/`-c`/`-C`/`-F`). See linkgit:git-rebase[1] for details."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:136
#, no-wrap
msgid "--reset-author"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:141
msgid ""
"When used with -C/-c/--amend options, or when committing after a conflicting "
"cherry-pick, declare that the authorship of the resulting commit now belongs "
"to the committer. This also renews the author timestamp."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:142
#, no-wrap
msgid "--short"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:145
msgid ""
"When doing a dry-run, give the output in the short-format. See "
"linkgit:git-status[1] for details. Implies `--dry-run`."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:146
#, no-wrap
msgid "--branch"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:148
msgid "Show the branch and tracking info even in short-format."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:149
#, no-wrap
msgid "--porcelain"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:153
msgid ""
"When doing a dry-run, give the output in a porcelain-ready format. See "
"linkgit:git-status[1] for details. Implies `--dry-run`."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:154
#, no-wrap
msgid "--long"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:157
msgid ""
"When doing a dry-run, give the output in the long-format.  Implies "
"`--dry-run`."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:158
#, no-wrap
msgid "-z"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:159
#, no-wrap
msgid "--null"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:166
msgid ""
"When showing `short` or `porcelain` status output, print the filename "
"verbatim and terminate the entries with NUL, instead of LF.  If no format is "
"given, implies the `--porcelain` output format.  Without the `-z` option, "
"filenames with \"unusual\" characters are quoted as explained for the "
"configuration variable `core.quotePath` (see linkgit:git-config[1])."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:167
#, no-wrap
msgid "-F <file>"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:168
#, no-wrap
msgid "--file=<file>"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:171
msgid ""
"Take the commit message from the given file.  Use '-' to read the message "
"from the standard input."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:172
#, no-wrap
msgid "--author=<author>"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:178
msgid ""
"Override the commit author. Specify an explicit author using the standard `A "
"U Thor <author@example.com>` format. Otherwise <author> is assumed to be a "
"pattern and is used to search for an existing commit by that author "
"(i.e. rev-list --all -i --author=<author>); the commit author is then copied "
"from the first such commit found."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:179
#, no-wrap
msgid "--date=<date>"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:181
msgid "Override the author date used in the commit."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:182
#, no-wrap
msgid "-m <msg>"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:183
#, no-wrap
msgid "--message=<msg>"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:187
msgid ""
"Use the given <msg> as the commit message.  If multiple `-m` options are "
"given, their values are concatenated as separate paragraphs."
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:189
msgid "The `-m` option is mutually exclusive with `-c`, `-C`, and `-F`."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:190
#, no-wrap
msgid "-t <file>"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:191
#, no-wrap
msgid "--template=<file>"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:200
msgid ""
"When editing the commit message, start the editor with the contents in the "
"given file.  The `commit.template` configuration variable is often used to "
"give this option implicitly to the command.  This mechanism can be used by "
"projects that want to guide participants with some hints on what to write in "
"the message in what order.  If the user exits the editor without editing the "
"message, the commit is aborted.  This has no effect when a message is given "
"by other means, e.g. with the `-m` or `-F` options."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:203
#, no-wrap
msgid "--trailer <token>[(=|:)<value>]"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:213
msgid ""
"Specify a (<token>, <value>) pair that should be applied as a "
"trailer. (e.g. `git commit --trailer \"Signed-off-by:C O Mitter \\ "
"<committer@example.com>\" --trailer \"Helped-by:C O Mitter \\ "
"<committer@example.com>\"` will add the \"Signed-off-by\" trailer and the "
"\"Helped-by\" trailer to the commit message.)  The `trailer.*` configuration "
"variables (linkgit:git-interpret-trailers[1]) can be used to define if a "
"duplicated trailer is omitted, where in the run of trailers each trailer "
"would appear, and other details."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:214
#, no-wrap
msgid "-n"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:215
#, no-wrap
msgid "--no-verify"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:218
msgid ""
"This option bypasses the pre-commit and commit-msg hooks.  See also "
"linkgit:githooks[5]."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:219
#, no-wrap
msgid "--allow-empty"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:224
msgid ""
"Usually recording a commit that has the exact same tree as its sole parent "
"commit is a mistake, and the command prevents you from making such a "
"commit.  This option bypasses the safety, and is primarily for use by "
"foreign SCM interface scripts."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:225
#, no-wrap
msgid "--allow-empty-message"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:230
msgid ""
"Like --allow-empty this command is primarily for use by foreign SCM "
"interface scripts. It allows you to create a commit with an empty commit "
"message without using plumbing commands like linkgit:git-commit-tree[1]."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:231
#, no-wrap
msgid "--cleanup=<mode>"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:235
msgid ""
"This option determines how the supplied commit message should be cleaned up "
"before committing.  The '<mode>' can be `strip`, `whitespace`, `verbatim`, "
"`scissors` or `default`."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:237
#, no-wrap
msgid "strip"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:240
msgid ""
"Strip leading and trailing empty lines, trailing whitespace, commentary and "
"collapse consecutive empty lines."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:240
#, no-wrap
msgid "whitespace"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:242
msgid "Same as `strip` except #commentary is not removed."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:242
#, no-wrap
msgid "verbatim"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:244
msgid "Do not change the message at all."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:244
#, no-wrap
msgid "scissors"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:248
msgid ""
"Same as `whitespace` except that everything from (and including)  the line "
"found below is truncated, if the message is to be edited.  \"`#`\" can be "
"customized with core.commentChar."
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:250
#, no-wrap
msgid "# ------------------------ >8 ------------------------\n"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:251
#, no-wrap
msgid "default"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:254
msgid "Same as `strip` if the message is to be edited.  Otherwise `whitespace`."
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:258
msgid ""
"The default can be changed by the `commit.cleanup` configuration variable "
"(see linkgit:git-config[1])."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:259
#, no-wrap
msgid "-e"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:260
#, no-wrap
msgid "--edit"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:265
msgid ""
"The message taken from file with `-F`, command line with `-m`, and from "
"commit object with `-C` are usually used as the commit log message "
"unmodified. This option lets you further edit the message taken from these "
"sources."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:266
#, no-wrap
msgid "--no-edit"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:270
msgid ""
"Use the selected commit message without launching an editor.  For example, "
"`git commit --amend --no-edit` amends a commit without changing its commit "
"message."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:271
#, no-wrap
msgid "--amend"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:281
msgid ""
"Replace the tip of the current branch by creating a new commit. The recorded "
"tree is prepared as usual (including the effect of the `-i` and `-o` options "
"and explicit pathspec), and the message from the original commit is used as "
"the starting point, instead of an empty message, when no other message is "
"specified from the command line via options such as `-m`, `-F`, `-c`, etc.  "
"The new commit has the same parents and author as the current one (the "
"`--reset-author` option can countermand this)."
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:284
msgid "It is a rough equivalent for:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-commit.txt:288
#, no-wrap
msgid ""
"\t$ git reset --soft HEAD^\n"
"\t$ ... do something else to come up with the right tree ...\n"
"\t$ git commit -c ORIG_HEAD\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:291
msgid "but can be used to amend a merge commit."
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:296
msgid ""
"You should understand the implications of rewriting history if you amend a "
"commit that has already been published.  (See the \"RECOVERING FROM UPSTREAM "
"REBASE\" section in linkgit:git-rebase[1].)"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:297
#, no-wrap
msgid "--no-post-rewrite"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:299
msgid "Bypass the post-rewrite hook."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:300
#, no-wrap
msgid "-i"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:301
#, no-wrap
msgid "--include"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:306
msgid ""
"Before making a commit out of staged contents so far, stage the contents of "
"paths given on the command line as well.  This is usually not what you want "
"unless you are concluding a conflicted merge."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:307
#, no-wrap
msgid "-o"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:308
#, no-wrap
msgid "--only"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:320
msgid ""
"Make a commit by taking the updated working tree contents of the paths "
"specified on the command line, disregarding any contents that have been "
"staged for other paths. This is the default mode of operation of 'git "
"commit' if any paths are given on the command line, in which case this "
"option can be omitted.  If this option is specified together with `--amend`, "
"then no paths need to be specified, which can be used to amend the last "
"commit without committing changes that have already been staged. If used "
"together with `--allow-empty` paths are also not required, and an empty "
"commit will be created."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:321
#, no-wrap
msgid "--pathspec-from-file=<file>"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:328
msgid ""
"Pathspec is passed in `<file>` instead of commandline args. If `<file>` is "
"exactly `-` then standard input is used. Pathspec elements are separated by "
"LF or CR/LF. Pathspec elements can be quoted as explained for the "
"configuration variable `core.quotePath` (see linkgit:git-config[1]). See "
"also `--pathspec-file-nul` and global `--literal-pathspecs`."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:329
#, no-wrap
msgid "--pathspec-file-nul"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:333
msgid ""
"Only meaningful with `--pathspec-from-file`. Pathspec elements are separated "
"with NUL character and all other characters are taken literally (including "
"newlines and quotes)."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:334
#, no-wrap
msgid "-u[<mode>]"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:335
#, no-wrap
msgid "--untracked-files[=<mode>]"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:337
msgid "Show untracked files."
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:342
msgid ""
"The mode parameter is optional (defaults to 'all'), and is used to specify "
"the handling of untracked files; when -u is not used, the default is "
"'normal', i.e. show untracked files and directories."
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:344
msgid "The possible options are:"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:346
#, no-wrap
msgid "'no'     - Show no untracked files\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:347
#, no-wrap
msgid "'normal' - Shows untracked files and directories\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:348
#, no-wrap
msgid "'all'    - Also shows individual files in untracked directories.\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:351
msgid ""
"The default can be changed using the status.showUntrackedFiles configuration "
"variable documented in linkgit:git-config[1]."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:353
#, no-wrap
msgid "-v"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:354
#, no-wrap
msgid "--verbose"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:363
msgid ""
"Show unified diff between the HEAD commit and what would be committed at the "
"bottom of the commit message template to help the user describe the commit "
"by reminding what changes the commit has.  Note that this diff output "
"doesn't have its lines prefixed with '#'. This diff will not be a part of "
"the commit message. See the `commit.verbose` configuration variable in "
"linkgit:git-config[1]."
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:367
msgid ""
"If specified twice, show in addition the unified diff between what would be "
"committed and the worktree files, i.e. the unstaged changes to tracked "
"files."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:368
#, no-wrap
msgid "-q"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:369
#, no-wrap
msgid "--quiet"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:371
msgid "Suppress commit summary message."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:372
#, no-wrap
msgid "--dry-run"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:376
msgid ""
"Do not create a commit, but show a list of paths that are to be committed, "
"paths with local changes that will be left uncommitted and paths that are "
"untracked."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:377
#, no-wrap
msgid "--status"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:382
msgid ""
"Include the output of linkgit:git-status[1] in the commit message template "
"when using an editor to prepare the commit message.  Defaults to on, but can "
"be used to override configuration variable commit.status."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:383
#, no-wrap
msgid "--no-status"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:387
msgid ""
"Do not include the output of linkgit:git-status[1] in the commit message "
"template when using an editor to prepare the default commit message."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:388
#, no-wrap
msgid "-S[<keyid>]"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:389
#, no-wrap
msgid "--gpg-sign[=<keyid>]"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:390
#, no-wrap
msgid "--no-gpg-sign"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:396
msgid ""
"GPG-sign commits. The `keyid` argument is optional and defaults to the "
"committer identity; if specified, it must be stuck to the option without a "
"space. `--no-gpg-sign` is useful to countermand both `commit.gpgSign` "
"configuration variable, and earlier `--gpg-sign`."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:397
#, no-wrap
msgid "\\--"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:399
msgid "Do not interpret any more arguments as options."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:400
#, no-wrap
msgid "<pathspec>..."
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:405
msgid ""
"When pathspec is given on the command line, commit the contents of the files "
"that match the pathspec without recording the changes already added to the "
"index. The contents of these files are also staged for the next commit on "
"top of what have been staged before."
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:407
msgid "For more details, see the 'pathspec' entry in linkgit:gitglossary[7]."
msgstr ""

#. type: Title -
#: ../Documentation/git-commit.txt:409
#, no-wrap
msgid "EXAMPLES"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:421
msgid ""
"When recording your own work, the contents of modified files in your working "
"tree are temporarily stored to a staging area called the \"index\" with 'git "
"add'.  A file can be reverted back, only in the index but not in the working "
"tree, to that of the last commit with `git restore --staged <file>`, which "
"effectively reverts 'git add' and prevents the changes to this file from "
"participating in the next commit.  After building the state to be committed "
"incrementally with these commands, `git commit` (without any pathname "
"parameter) is used to record what has been staged so far.  This is the most "
"basic form of the command.  An example:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-commit.txt:427
#, no-wrap
msgid ""
"$ edit hello.c\n"
"$ git rm goodbye.c\n"
"$ git add hello.c\n"
"$ git commit\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:435
msgid ""
"Instead of staging files after each individual change, you can tell `git "
"commit` to notice the changes to the files whose contents are tracked in "
"your working tree and do corresponding `git add` and `git rm` for you.  That "
"is, this example does the same as the earlier example if there is no other "
"change in your working tree:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-commit.txt:440
#, no-wrap
msgid ""
"$ edit hello.c\n"
"$ rm goodbye.c\n"
"$ git commit -a\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:445
msgid ""
"The command `git commit -a` first looks at your working tree, notices that "
"you have modified hello.c and removed goodbye.c, and performs necessary `git "
"add` and `git rm` for you."
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:450
msgid ""
"After staging changes to many files, you can alter the order the changes are "
"recorded in, by giving pathnames to `git commit`.  When pathnames are given, "
"the command makes a commit that only records the changes made to the named "
"paths:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-commit.txt:456
#, no-wrap
msgid ""
"$ edit hello.c hello.h\n"
"$ git add hello.c hello.h\n"
"$ edit Makefile\n"
"$ git commit Makefile\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:463
msgid ""
"This makes a commit that records the modification to `Makefile`.  The "
"changes staged for `hello.c` and `hello.h` are not included in the resulting "
"commit.  However, their changes are not lost -- they are still staged and "
"merely held back.  After the above sequence, if you do:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-commit.txt:466 ../Documentation/git-commit.txt:492
#, no-wrap
msgid "$ git commit\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:470
msgid ""
"this second commit would record the changes to `hello.c` and `hello.h` as "
"expected."
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:478
msgid ""
"After a merge (initiated by 'git merge' or 'git pull') stops because of "
"conflicts, cleanly merged paths are already staged to be committed for you, "
"and paths that conflicted are left in unmerged state.  You would have to "
"first check which paths are conflicting with 'git status' and after fixing "
"them manually in your working tree, you would stage the result as usual with "
"'git add':"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-commit.txt:484
#, no-wrap
msgid ""
"$ git status | grep unmerged\n"
"unmerged: hello.c\n"
"$ edit hello.c\n"
"$ git add hello.c\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:489
msgid ""
"After resolving conflicts and staging the result, `git ls-files -u` would "
"stop mentioning the conflicted path.  When you are done, run `git commit` to "
"finally record the merge:"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:500
msgid ""
"As with the case to record your own changes, you can use `-a` option to save "
"typing.  One difference is that during a merge resolution, you cannot use "
"`git commit` with pathnames to alter the order the changes are committed, "
"because the merge should be recorded as a single commit.  In fact, the "
"command refuses to run when given pathnames (but see `-i` option)."
msgstr ""

#. type: Title -
#: ../Documentation/git-commit.txt:502
#, no-wrap
msgid "COMMIT INFORMATION"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:506
msgid ""
"Author and committer information is taken from the following environment "
"variables, if set:"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:513
#, no-wrap
msgid ""
"\tGIT_AUTHOR_NAME\n"
"\tGIT_AUTHOR_EMAIL\n"
"\tGIT_AUTHOR_DATE\n"
"\tGIT_COMMITTER_NAME\n"
"\tGIT_COMMITTER_EMAIL\n"
"\tGIT_COMMITTER_DATE\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:515
msgid "(nb \"<\", \">\" and \"\\n\"s are stripped)"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:521
msgid ""
"The author and committer names are by convention some form of a personal "
"name (that is, the name by which other humans refer to you), although Git "
"does not enforce or require any particular form. Arbitrary Unicode may be "
"used, subject to the constraints listed above. This name has no effect on "
"authentication; for that, see the `credential.username` variable in "
"linkgit:git-config[1]."
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:528
msgid ""
"In case (some of) these environment variables are not set, the information "
"is taken from the configuration items `user.name` and `user.email`, or, if "
"not present, the environment variable EMAIL, or, if that is not set, system "
"user name and the hostname used for outgoing mail (taken from "
"`/etc/mailname` and falling back to the fully qualified hostname when that "
"file does not exist)."
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:532
msgid ""
"The `author.name` and `committer.name` and their corresponding email options "
"override `user.name` and `user.email` if set and are overridden themselves "
"by the environment variables."
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:535
msgid ""
"The typical usage is to set just the `user.name` and `user.email` variables; "
"the other options are provided for more complex use cases."
msgstr ""

#. type: Title -
#: ../Documentation/git-commit.txt:540
#, no-wrap
msgid "DISCUSSION"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:549
msgid ""
"Though not required, it's a good idea to begin the commit message with a "
"single short (less than 50 character) line summarizing the change, followed "
"by a blank line and then a more thorough description.  The text up to the "
"first blank line in a commit message is treated as the commit title, and "
"that title is used throughout Git.  For example, linkgit:git-format-patch[1] "
"turns a commit into email, and it uses the title on the Subject line and the "
"rest of the commit in the body."
msgstr ""

#. type: Title -
#: ../Documentation/git-commit.txt:553
#, no-wrap
msgid "ENVIRONMENT AND CONFIGURATION VARIABLES"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:558
msgid ""
"The editor used to edit the commit log message will be chosen from the "
"`GIT_EDITOR` environment variable, the core.editor configuration variable, "
"the `VISUAL` environment variable, or the `EDITOR` environment variable (in "
"that order).  See linkgit:git-var[1] for details."
msgstr ""

#. type: Title -
#: ../Documentation/git-commit.txt:560
#, no-wrap
msgid "HOOKS"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:564
msgid ""
"This command can run `commit-msg`, `prepare-commit-msg`, `pre-commit`, "
"`post-commit` and `post-rewrite` hooks.  See linkgit:githooks[5] for more "
"information."
msgstr ""

#. type: Title -
#: ../Documentation/git-commit.txt:566
#, no-wrap
msgid "FILES"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-commit.txt:568
#, no-wrap
msgid "`$GIT_DIR/COMMIT_EDITMSG`"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:574
msgid ""
"This file contains the commit message of a commit in progress.  If `git "
"commit` exits due to an error before creating a commit, any commit message "
"that has been provided by the user (e.g., in an editor session) will be "
"available in this file, but will be overwritten by the next invocation of "
"`git commit`."
msgstr ""

#. type: Title -
#: ../Documentation/git-commit.txt:576
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:582
msgid ""
"linkgit:git-add[1], linkgit:git-rm[1], linkgit:git-mv[1], "
"linkgit:git-merge[1], linkgit:git-commit-tree[1]"
msgstr ""

#. type: Title -
#: ../Documentation/git-commit.txt:584
#, no-wrap
msgid "GIT"
msgstr ""

#. type: Plain text
#: ../Documentation/git-commit.txt:585
msgid "Part of the linkgit:git[1] suite"
msgstr ""
