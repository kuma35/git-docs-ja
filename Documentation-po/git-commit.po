# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 0.0\n"
"POT-Creation-Date: 2022-09-24 21:41+0900\n"
"PO-Revision-Date: 2024-01-28 06:04+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/git-commit.txt:2
#, no-wrap
msgid "git-commit(1)"
msgstr "git-commit(1)"

#. type: Title -
#: ../Documentation-sedout/git-commit.txt:5
#, no-wrap
msgid "NAME"
msgstr "NAME"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:7
msgid "git-commit - Record changes to the repository"
msgstr "git-commit - 変更をリポジトリへ記録します"

#. type: Title -
#: ../Documentation-sedout/git-commit.txt:9
#, no-wrap
msgid "SYNOPSIS"
msgstr "SYNOPSIS"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:19
#, no-wrap
msgid ""
"'git commit' [-a | --interactive | --patch] [-s] [-v] [-u<mode>] [--amend]\n"
"\t   [--dry-run] [(-c | -C | --squash) <commit> | --fixup [(amend|reword):]<commit>)]\n"
"\t   [-F <file> | -m <msg>] [--reset-author] [--allow-empty]\n"
"\t   [--allow-empty-message] [--no-verify] [-e] [--author=<author>]\n"
"\t   [--date=<date>] [--cleanup=<mode>] [--[no-]status]\n"
"\t   [-i | -o] [--pathspec-from-file=<file> [--pathspec-file-nul]]\n"
"\t   [(--trailer <token>[(=|:)<value>])...] [-S[<keyid>]]\n"
"\t   [--] [<pathspec>...]\n"
msgstr ""
"'git commit' [-a | --interactive | --patch] [-s] [-v] [-u<mode>] [--amend]\n"
"\t   [--dry-run] [(-c | -C | --squash) <commit> | --fixup [(amend|reword):]<commit>)]\n"
"\t   [-F <file> | -m <msg>] [--reset-author] [--allow-empty]\n"
"\t   [--allow-empty-message] [--no-verify] [-e] [--author=<author>]\n"
"\t   [--date=<date>] [--cleanup=<mode>] [--[no-]status]\n"
"\t   [-i | -o] [--pathspec-from-file=<file> [--pathspec-file-nul]]\n"
"\t   [(--trailer <token>[(=|:)<value>])...] [-S[<keyid>]]\n"
"\t   [--] [<pathspec>...]\n"

#. type: Title -
#: ../Documentation-sedout/git-commit.txt:21
#, no-wrap
msgid "DESCRIPTION"
msgstr "DESCRIPTION"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:28
msgid ""
"Create a new commit containing the current contents of the index and the "
"given log message describing the changes. The new commit is a direct child "
"of HEAD, usually the tip of the current branch, and the branch is updated to "
"point to it (unless no branch is associated with the working tree, in which "
"case HEAD is \"detached\" as described in linkgit:git-checkout[1])."
msgstr ""
"インデックスの現在の内容と変更を説明する指定されたログメッセージを含む新しい"
"コミットを作成します。 新しいコミットはHEADの直接の子であり、通常は現在のブラ"
"ンチの先端であり、ブランチはそれを指すように更新されます(作業ツリーにブランチ"
"が関連付けられていない場合は、linkgit:git-checkout[1] で説明されているように"
"HEADが「切り離され」(detached)されます)。"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:30
msgid "The content to be committed can be specified in several ways:"
msgstr "コミットするコンテンツは、いくつかの方法で指定できます:"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:34
msgid ""
"by using linkgit:git-add[1] to incrementally \"add\" changes to the index "
"before using the 'commit' command (Note: even modified files must be \"added"
"\");"
msgstr ""
"linkgit:git-add[1] を使用して、「commit」コマンドを使用する前にインデックスに"
"変更を段階的に「追加」(add)します(注: 「変更」されたファイルも「add」コマンド"
"で「追加」するが必要があります)。"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:37
msgid ""
"by using linkgit:git-rm[1] to remove files from the working tree and the "
"index, again before using the 'commit' command;"
msgstr ""
"再び「commit」コマンドを使用する前に、 linkgit:git-rm[1] を使用して、作業ツ"
"リーとインデックスからファイルを削除します。"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:43
msgid ""
"by listing files as arguments to the 'commit' command (without --interactive "
"or --patch switch), in which case the commit will ignore changes staged in "
"the index, and instead record the current content of the listed files (which "
"must already be known to Git);"
msgstr ""
"「commit」コマンドの引数としてファイルをリストします(`--interactive` や `--"
"patch` スイッチがない場合)。 この場合、そのコミットはインデックスにステージン"
"グされた変更を無視し、代わりにリストされたファイル(これらはすでに Git に知ら"
"れている必要があります)の現在のコンテンツを記録します"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:49
msgid ""
"by using the -a switch with the 'commit' command to automatically \"add\" "
"changes from all known files (i.e. all files that are already listed in the "
"index) and to automatically \"rm\" files in the index that have been removed "
"from the working tree, and then perform the actual commit;"
msgstr ""
"「commit」コマンドで `-a` スイッチを使用して、すべての既知のファイル(つまり、"
"すでにインデックスにリストされているすべてのファイル)からの変更を自動的に"
"「add」(追加)し、作業ツリーから削除されたインデックス内のファイルを自動的に"
"「rm」(削除)してから、実際のコミットを実行します"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:55
msgid ""
"by using the --interactive or --patch switches with the 'commit' command to "
"decide one by one which files or hunks should be part of the commit in "
"addition to contents in the index, before finalizing the operation. See the "
"``Interactive Mode'' section of linkgit:git-add[1] to learn how to operate "
"these modes."
msgstr ""
"「commit」コマンドで `--interactive` または `--patch` スイッチを使用して、操"
"作を完了する前に、インデックスの内容に加えて、どのファイルまたはハンクをコ"
"ミットの一部にするかを1つずつ決定します。 これらのモードの操作方法について"
"は、 linkgit:git-add[1]の「Interactive Mode」セクションを参照してください。"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:59
msgid ""
"The `--dry-run` option can be used to obtain a summary of what is included "
"by any of the above for the next commit by giving the same set of parameters "
"(options and paths)."
msgstr ""
"`--dry-run` オプションは、同じパラメーターのセット(オプションとパス)を指定す"
"ることにより、次のコミットにて上記のいずれかに含まれるものの要約を取得するた"
"めに使用できます。"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:62
msgid ""
"If you make a commit and then find a mistake immediately after that, you can "
"recover from it with 'git reset'."
msgstr ""
"コミットを行い、その直後に間違いを見つけた場合は、「git reset」を使用してそれ"
"から回復できます。"

#. type: Title -
#: ../Documentation-sedout/git-commit.txt:66
#, no-wrap
msgid "OPTIONS"
msgstr "OPTIONS"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:67
#, no-wrap
msgid "`-a`"
msgstr "`-a`"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:68
#, no-wrap
msgid "`--all`"
msgstr "`--all`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:72
msgid ""
"Tell the command to automatically stage files that have been modified and "
"deleted, but new files you have not told Git about are not affected."
msgstr ""
"変更および削除されたファイルを自動的にステージングするようにコマンドに指示し"
"ますが、Gitに通知していない新しいファイルは影響を受けません。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:73
#, no-wrap
msgid "`-p`"
msgstr "`-p`"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:74
#, no-wrap
msgid "`--patch`"
msgstr "`--patch`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:78
msgid ""
"Use the interactive patch selection interface to choose which changes to "
"commit. See linkgit:git-add[1] for details."
msgstr ""
"対話的なパッチ選択インターフェイスを使用して、コミットする変更を選択します。 "
"詳細については、linkgit:git-add[1] を参照してください。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:79
#, no-wrap
msgid "`-C <commit>`"
msgstr "`-C <commit>`"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:80
#, no-wrap
msgid "`--reuse-message=<commit>`"
msgstr "`--reuse-message=<commit>`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:84
msgid ""
"Take an existing commit object, and reuse the log message and the authorship "
"information (including the timestamp)  when creating the commit."
msgstr ""
"既存のコミットオブジェクトを取得し、コミットを作成するときにログメッセージと"
"作者情報(タイムスタンプを含む)を再利用します。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:85
#, no-wrap
msgid "`-c <commit>`"
msgstr "`-c <commit>`"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:86
#, no-wrap
msgid "`--reedit-message=<commit>`"
msgstr "`--reedit-message=<commit>`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:89
msgid ""
"Like '-C', but with `-c` the editor is invoked, so that the user can further "
"edit the commit message."
msgstr "`-C` と同様ですが、 `-c` を使用するとエディターが呼び出されるため、ユーザーはコミットメッセージをさらに編集できます。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:90
#, no-wrap
msgid "`--fixup=[(amend|reword):]<commit>`"
msgstr "`--fixup=[(amend|reword):]<commit>`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:100
msgid ""
"Create a new commit which \"fixes up\" `<commit>` when applied with `git "
"rebase --autosquash`. Plain `--fixup=<commit>` creates a \"fixup!\" commit "
"which changes the content of `<commit>` but leaves its log message "
"untouched. `--fixup=amend:<commit>` is similar but creates an \"amend!\" "
"commit which also replaces the log message of `<commit>` with the log "
"message of the \"amend!\" commit.  `--fixup=reword:<commit>` creates an "
"\"amend!\" commit which replaces the log message of `<commit>` with its own "
"log message but makes no changes to the content of `<commit>`."
msgstr ""
"`git rebase --autosquash` を適用すると `<commit>` を「fixes up」(修正)する新"
"しいコミットを作成します。 プレーンな `--fixup=<commit>` は「fixup!」コミット"
"を作成します。 これは `<commit>` の内容を変更しますが、ログメッセージは変更さ"
"れません。 `--fixup=amend:<commit>` も同様ですが、「amend!」コミットを作成し"
"ます。 これにより `<commit>` のログメッセージも「amend!」コミットのログメッ"
"セージに置き換えられます。 `--fixup=reword:<commit>` は「amend!」コミットを作"
"成します。これは `<commit>` のログメッセージを独自のログメッセージに置き換え"
"る「amend!」コミットを作成しますが、 `<commit>` の内容は変更しません。"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:108
msgid ""
"The commit created by plain `--fixup=<commit>` has a subject composed of "
"\"fixup!\" followed by the subject line from <commit>, and is recognized "
"specially by `git rebase --autosquash`. The `-m` option may be used to "
"supplement the log message of the created commit, but the additional "
"commentary will be thrown away once the \"fixup!\" commit is squashed into "
"`<commit>` by `git rebase --autosquash`."
msgstr ""
"プレーンな `--fixup=<commit>` によって作成されたコミットは、 `fixup!` に "
"<commit> の件名行が続く件名を作り、これは `git rebase --autosquash`  によって"
"特別に認識されます。 `-m` オプションは、作成されたコミットのログメッセージを"
"補足するために使用できますが、「fixup!」コミットが `git rebase --autosquash` "
"によって `<commit>` に押しつぶされる(squash)と、追加のコメントは破棄されま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:118
msgid ""
"The commit created by `--fixup=amend:<commit>` is similar but its subject is "
"instead prefixed with \"amend!\". The log message of <commit> is copied into "
"the log message of the \"amend!\" commit and opened in an editor so it can "
"be refined. When `git rebase --autosquash` squashes the \"amend!\" commit "
"into `<commit>`, the log message of `<commit>` is replaced by the refined "
"log message from the \"amend!\" commit. It is an error for the \"amend!\" "
"commit's log message to be empty unless `--allow-empty-message` is specified."
msgstr ""
"`--fixup=amend:<commit>` によって作成されたコミットは似ていますが、その件名に"
"は代わりに `amend!` というプレフィックスが付いています。 <commit> のログメッ"
"セージが「amend!」コミットのログメッセージにコピーされ、エディターで開いた時"
"に調整できます。 `git rebase --autosquash` が「fixup!」を押しつぶす(squash)と"
"き `<commit>` にコミットすると、 `<commit>` のログメッセージは「amend!」コ"
"ミットからの修正されたログメッセージに置き換えられます。 「amend!」コミットの"
"ログメッセージが空であることは、 `--allow-empty-message` が指定されていない限"
"りエラーとなります。"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:124
msgid ""
"`--fixup=reword:<commit>` is shorthand for `--fixup=amend:<commit> --only`. "
"It creates an \"amend!\" commit with only a log message (ignoring any "
"changes staged in the index). When squashed by `git rebase --autosquash`, it "
"replaces the log message of `<commit>` without making any other changes."
msgstr ""
"`--fixup=reword:<commit>` は `--fixup=amend:<commit> --only` の省略形です。 "
"これはログメッセージのみで「amend!」コミットを作成します(インデックスにステー"
"ジングされた変更は無視します)。 `git rebase --autosquash` によって押しつぶさ"
"れる(squash)と、他の変更を加えることなく、 `<commit>` のログメッセージを置き"
"換えます。"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:128
msgid ""
"Neither \"fixup!\" nor \"amend!\" commits change authorship of `<commit>` "
"when applied by `git rebase --autosquash`.  See linkgit:git-rebase[1] for "
"details."
msgstr ""
"「fixup!」や「amend!」といったコミットは、 `git rebase --autosquash` で適用し"
"たときに `<commit>` の作者は変更しません。 詳しくは linkgit:git-rebase[1] を"
"参照してください。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:129
#, no-wrap
msgid "`--squash=<commit>`"
msgstr "`--squash=<commit>`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:135
msgid ""
"Construct a commit message for use with `rebase --autosquash`.  The commit "
"message subject line is taken from the specified commit with a prefix of "
"\"squash! \".  Can be used with additional commit message options (`-m`/`-c`/"
"`-C`/`-F`). See linkgit:git-rebase[1] for details."
msgstr ""
"`rebase --autosquash` で使用するコミットメッセージを作成します。 コミットメッ"
"セージの件名行は、プレフィックスが  \"squash! \" と指定されたコミットから取得"
"されます。 追加のコミットメッセージオプション(`-m`/`-c`/`-C`/`-F`)とともに使"
"用できます。 詳細については、 linkgit:git-rebase[1] を参照してください。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:136
#, no-wrap
msgid "`--reset-author`"
msgstr "`--reset-author`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:141
msgid ""
"When used with -C/-c/--amend options, or when committing after a conflicting "
"cherry-pick, declare that the authorship of the resulting commit now belongs "
"to the committer. This also renews the author timestamp."
msgstr ""
"`-C`/`-c`/`--amend` オプションとともに使用する場合、または競合するチェリー"
"ピックの後にコミットする場合は、結果のコミットの作者がコミッターに属すること"
"を宣言します。これにより、作者のタイムスタンプも更新されます。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:142
#, no-wrap
msgid "`--short`"
msgstr "`--short`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:145
msgid ""
"When doing a dry-run, give the output in the short-format. See linkgit:git-"
"status[1] for details. Implies `--dry-run`."
msgstr ""
"ドライランを行うときに、出力を短い形式で提供します。 詳細については、 "
"linkgit:git-status[1] を参照してください。 `--dry-run` の指定を含んでいます。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:146
#, no-wrap
msgid "`--branch`"
msgstr "`--branch`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:148
msgid "Show the branch and tracking info even in short-format."
msgstr "短い形式でもブランチと追跡情報を表示します。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:149
#, no-wrap
msgid "`--porcelain`"
msgstr "`--porcelain`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:153
msgid ""
"When doing a dry-run, give the output in a porcelain-ready format. See "
"linkgit:git-status[1] for details. Implies `--dry-run`."
msgstr ""
"ドライランを行うときに、磁器コマンド対応の形式で出力を提供します。 詳細につい"
"ては、 linkgit:git-status[1] を参照してください。 `--dry-run` の指定を含んで"
"います。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:154
#, no-wrap
msgid "`--long`"
msgstr "`--long`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:157
msgid ""
"When doing a dry-run, give the output in the long-format.  Implies `--dry-"
"run`."
msgstr ""
"ドライランを行うときに、出力を長い形式で提供します。 `--dry-run` の指定を含ん"
"でいます。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:158
#, no-wrap
msgid "`-z`"
msgstr "`-z`"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:159
#, no-wrap
msgid "`--null`"
msgstr "`--null`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:166
msgid ""
"When showing `short` or `porcelain` status output, print the filename "
"verbatim and terminate the entries with NUL, instead of LF.  If no format is "
"given, implies the `--porcelain` output format.  Without the `-z` option, "
"filenames with \"unusual\" characters are quoted as explained for the "
"configuration variable `core.quotePath` (see linkgit:git-config[1])."
msgstr ""
"`short` または `porcelain` ステータス出力を表示する場合は、ファイル名をそのま"
"ま(verbatim)出力し、LFではなくNULでエントリを終了します。 フォーマットが指定"
"されていない場合は、 `--porcelain` 出力フォーマットを意味します。 `-z` オプ"
"ションを指定しない場合、構成変数 `core.quotePath` で説明されているように、"
"「異常な」文字を含むファイル名がクォートされます(linkgit:git-config[1] 参"
"照)。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:167
#, no-wrap
msgid "`-F <file>`"
msgstr "`-F <file>`"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:168
#, no-wrap
msgid "`--file=<file>`"
msgstr "`--file=<file>`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:171
msgid ""
"Take the commit message from the given file.  Use '-' to read the message "
"from the standard input."
msgstr ""
"指定されたファイルからコミットメッセージを取得します。<file>に `-` を使用する"
"と、標準入力からメッセージを読み取ります。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:172
#, no-wrap
msgid "`--author=<author>`"
msgstr "`--author=<author>`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:178
msgid ""
"Override the commit author. Specify an explicit author using the standard `A "
"U Thor <author@example.com>` format. Otherwise <author> is assumed to be a "
"pattern and is used to search for an existing commit by that author (i.e. "
"rev-list --all -i --author=<author>); the commit author is then copied from "
"the first such commit found."
msgstr ""
"コミット作者をオーバーライドします。 標準の `A U Thor <author@example.com>` "
"形式を使用して明示的な作者を指定します。 それ以外の場合、 <author> はパターン"
"であると見なされ、その作者による既存のコミットを検索するために使用され(つま"
"り、 `rev-list --all -i --author=<author>`)、そして、コミットの作者は、最初に"
"見つかったそのようなコミットからコピーされます。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:179
#, no-wrap
msgid "`--date=<date>`"
msgstr "`--date=<date>`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:181
msgid "Override the author date used in the commit."
msgstr "コミットで使用された作者の日付を上書きします。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:182
#, no-wrap
msgid "`-m <msg>`"
msgstr "`-m <msg>`"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:183
#, no-wrap
msgid "`--message=<msg>`"
msgstr "`--message=<msg>`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:187
msgid ""
"Use the given <msg> as the commit message.  If multiple `-m` options are "
"given, their values are concatenated as separate paragraphs."
msgstr ""
"指定された<msg>をコミットメッセージとして使用します。 複数の `-m` オプション"
"が指定されている場合、それらの値は個別の段落として連結されます。"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:189
msgid "The `-m` option is mutually exclusive with `-c`, `-C`, and `-F`."
msgstr ""
"`-m` オプションは、 `-c` 、 `-C` 、 `-F` と相互に排他的(mutually exclusive)で"
"す。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:190
#, no-wrap
msgid "`-t <file>`"
msgstr "`-t <file>`"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:191
#, no-wrap
msgid "`--template=<file>`"
msgstr "`--template=<file>`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:200
msgid ""
"When editing the commit message, start the editor with the contents in the "
"given file.  The `commit.template` configuration variable is often used to "
"give this option implicitly to the command.  This mechanism can be used by "
"projects that want to guide participants with some hints on what to write in "
"the message in what order.  If the user exits the editor without editing the "
"message, the commit is aborted.  This has no effect when a message is given "
"by other means, e.g. with the `-m` or `-F` options."
msgstr ""
"コミットメッセージを編集するときは、指定されたファイルの内容でエディターを起"
"動します。 `commit.template` 構成変数は、このオプションをコマンドに暗黙的に与"
"えるためによく使用されます。 このメカニズムは、メッセージに何をどの順序で書き"
"込むかについてのヒントを参加者に案内したいプロジェクトで使用できます。 ユー"
"ザーがメッセージを編集せずにエディターを終了すると、コミットは中止(abort)され"
"ます。 これは、メッセージが他の手段、例えば `-m` または `-F` オプションを使用"
"して提供された場合には効果がありません。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:203
#, no-wrap
msgid "`--trailer <token>[(=|:)<value>]`"
msgstr "`--trailer <token>[(=|:)<value>]`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:213
msgid ""
"Specify a (<token>, <value>) pair that should be applied as a trailer. (e.g. "
"`git commit --trailer \"Signed-off-by:C O Mitter \\ <committer@example.com>"
"\" --trailer \"Helped-by:C O Mitter \\ <committer@example.com>\"` will add "
"the \"Signed-off-by\" trailer and the \"Helped-by\" trailer to the commit "
"message.)  The `trailer.*` configuration variables (linkgit:git-interpret-"
"trailers[1]) can be used to define if a duplicated trailer is omitted, where "
"in the run of trailers each trailer would appear, and other details."
msgstr ""
"トレーラーとして適用する必要がある<token>と<value>のペアを指定します。 (例:  "
"`git commit --trailer \"Signed-off-by:C O Mitter \\ <committer@example.com>"
"\" --trailer \"Helped-by:C O Mitter \\ <committer@example.com>\"` は「コミッ"
"トメッセージへ「Signed-off-by」トレーラーと「Helped-by」トレーラーを追加しま"
"す。)） `trailer.*` 構成変数(linkgit:git-interpret-trailers[1])を使用して、重"
"複したトレーラーを省略するかどうか、各トレーラーがトレーラー群の何処に表示さ"
"れるかや、その他の詳細を定義できます。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:214
#, no-wrap
msgid "`-n`"
msgstr "`-n`"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:215
#, no-wrap
msgid "`--[no-]verify`"
msgstr "`--[no-]verify`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:219
msgid ""
"By default, the pre-commit and commit-msg hooks are run.  When any of `--no-"
"verify` or `-n` is given, these are bypassed.  See also linkgit:githooks[5]."
msgstr "デフォルトでは、 pre-commit および commit-msg フックが実行されます。 `--no-verify` または `-n` のいずれかが指定された場合、これらのフックはバイパスされます。 linkgit:githooks[5] も参照してください。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:220
#, no-wrap
msgid "`--allow-empty`"
msgstr "`--allow-empty`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:225
msgid ""
"Usually recording a commit that has the exact same tree as its sole parent "
"commit is a mistake, and the command prevents you from making such a "
"commit.  This option bypasses the safety, and is primarily for use by "
"foreign SCM interface scripts."
msgstr ""
"通常、唯一の親コミットとまったく同じツリーを持つコミットを記録することは間違"
"いであり、コマンドはそのようなコミットを行うことを防ぎます。 このオプションは"
"その安全装置をバイパスします。主に外部SCMインターフェイススクリプトで使用する"
"ためのものです。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:226
#, no-wrap
msgid "`--allow-empty-message`"
msgstr "`--allow-empty-message`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:231
msgid ""
"Like --allow-empty this command is primarily for use by foreign SCM "
"interface scripts. It allows you to create a commit with an empty commit "
"message without using plumbing commands like linkgit:git-commit-tree[1]."
msgstr ""
"`--allow-empty` と同様に、このコマンドは主に外部SCMインターフェイススクリプト"
"で使用されます。 あなたは linkgit:git-commit-tree[1] のような配管コマンドを使"
"用せずに、空のコミットメッセージでコミットを作成できます。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:232
#, no-wrap
msgid "`--cleanup=<mode>`"
msgstr "`--cleanup=<mode>`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:236
msgid ""
"This option determines how the supplied commit message should be cleaned up "
"before committing.  The '<mode>' can be `strip`, `whitespace`, `verbatim`, "
"`scissors` or `default`."
msgstr ""
"このオプションは、提供されたコミットメッセージをコミットする前にクリーンアッ"
"プする方法を決定します。 <mode> は、 `strip` または `whitespace` または "
"`verbatim` または ` scissors` または `default` にすることができます。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:238
#, no-wrap
msgid "strip"
msgstr "strip"

# 参考：
# https://kledgeb.blogspot.com/2015/11/ubuntu-git-411-git-commit.html<
#
# 「strip」では、以下の整形を行います。
#
# コミットメッセージの前後にある空白行を削除する
# 行末の空白文字を削除する
# コメント行を削除する
# 連続した空白行を1行の空白行にまとめる
#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:241
msgid ""
"Strip leading and trailing empty lines, trailing whitespace, commentary and "
"collapse consecutive empty lines."
msgstr ""
"先頭と末尾の空行の削除と、行末の空白を削除と、コメントの削除を行い、連続する"
"空行を折りたたみます。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:241
#, no-wrap
msgid "whitespace"
msgstr "whitespace"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:243
msgid "Same as `strip` except #commentary is not removed."
msgstr "#コメント が削除されないことを除いて、`strip` と同一です。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:243
#, no-wrap
msgid "verbatim"
msgstr "verbatim"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:245
msgid "Do not change the message at all."
msgstr "メッセージは一切変更しません。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:245
#, no-wrap
msgid "scissors"
msgstr "scissors"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:249
msgid ""
"Same as `whitespace` except that everything from (and including)  the line "
"found below is truncated, if the message is to be edited.  \"`#`\" can be "
"customized with core.commentChar."
msgstr ""
"メッセージを編集する場合は、以下の行からの(そしてその行を含む)すべてが切り捨"
"てられることを除いて、 `whitespace` と同じです。 `#` はcore.commentCharでカス"
"タマイズできます。"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:251
#, no-wrap
msgid "# ------------------------ >8 ------------------------\n"
msgstr "# ------------------------ >8 ------------------------\n"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:252
#, no-wrap
msgid "default"
msgstr "default"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:255
msgid ""
"Same as `strip` if the message is to be edited.  Otherwise `whitespace`."
msgstr ""
"メッセージを編集する場合は `strip` と同一です。 それ以外の場合は "
"`whitespace` と同一です。"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:259
msgid ""
"The default can be changed by the `commit.cleanup` configuration variable "
"(see linkgit:git-config[1])."
msgstr ""
"デフォルトは、 `commit.cleanup` 構成変数によって変更できます(linkgit:git-"
"config[1] 参照)。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:260
#, no-wrap
msgid "`-e`"
msgstr "`-e`"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:261
#, no-wrap
msgid "`--edit`"
msgstr "`--edit`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:266
msgid ""
"The message taken from file with `-F`, command line with `-m`, and from "
"commit object with `-C` are usually used as the commit log message "
"unmodified. This option lets you further edit the message taken from these "
"sources."
msgstr ""
"`-F` を使用してファイルから取得したメッセージや、 `-m` を使用してコマンドライ"
"ンから取得したメッセージや、 `-C` を使用してコミットオブジェクトから取得した"
"メッセージは、通常、編集不可のコミットログメッセージとして使用されます。 この"
"オプションを使用すると、これらのソースから取得したメッセージをさらに編集でき"
"ます。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:267
#, no-wrap
msgid "`--no-edit`"
msgstr "`--no-edit`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:271
msgid ""
"Use the selected commit message without launching an editor.  For example, "
"`git commit --amend --no-edit` amends a commit without changing its commit "
"message."
msgstr ""
"エディターを起動せずに、選択したコミットメッセージを使用します。 たとえば、 "
"`git commit --amend --no-edit` は、コミットメッセージを変更せずにコミットを修"
"正します。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:272
#, no-wrap
msgid "`--amend`"
msgstr "`--amend`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:282
msgid ""
"Replace the tip of the current branch by creating a new commit. The recorded "
"tree is prepared as usual (including the effect of the `-i` and `-o` options "
"and explicit pathspec), and the message from the original commit is used as "
"the starting point, instead of an empty message, when no other message is "
"specified from the command line via options such as `-m`, `-F`, `-c`, etc.  "
"The new commit has the same parents and author as the current one (the `--"
"reset-author` option can countermand this)."
msgstr ""
"新しいコミットを作成して、現在のブランチの先端を置き換えます。 記録されたツ"
"リーは通常どおりに準備され(`-i` および `-o` オプションと明示的なパススペック"
"の効果を含む)、空のメッセージではなく、元のコミットからのメッセージが開始点と"
"して使用されます。 他のメッセージは、コマンドラインから `-m`, `-F`, `-c` など"
"のオプションを介して指定します。 新しいコミットには、現在のものと同じ親と作者"
"があります(`--reset-author` オプションはこれを打ち消すことができます)。"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:285
msgid "It is a rough equivalent for:"
msgstr "これは、以下とおおむね同じです:"

#. type: delimited block -
#: ../Documentation-sedout/git-commit.txt:289
#, no-wrap
msgid ""
"\t$ git reset --soft HEAD^\n"
"\t$ ... do something else to come up with the right tree ...\n"
"\t$ git commit -c ORIG_HEAD\n"
msgstr ""
"\t$ git reset --soft HEAD^\n"
"\t$ ... do something else to come up with the right tree ...\n"
"\t$ git commit -c ORIG_HEAD\n"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:292
msgid "but can be used to amend a merge commit."
msgstr "ただし、マージコミットを修正(amend)するために使用できます。"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:297
msgid ""
"You should understand the implications of rewriting history if you amend a "
"commit that has already been published.  (See the \"RECOVERING FROM UPSTREAM "
"REBASE\" section in linkgit:git-rebase[1].)"
msgstr ""
"すでに公開されているコミットを修正する場合、あなたは履歴の書き換えの影響を理"
"解する必要があります。 (linkgit:git-rebase[1] の「RECOVERING FROM UPSTREAM "
"REBASE」セクションを参照してください。)"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:298
#, no-wrap
msgid "`--no-post-rewrite`"
msgstr "`--no-post-rewrite`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:300
msgid "Bypass the post-rewrite hook."
msgstr "post-rewriteフックをバイパスします。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:301
#, no-wrap
msgid "`-i`"
msgstr "`-i`"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:302
#, no-wrap
msgid "`--include`"
msgstr "`--include`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:307
msgid ""
"Before making a commit out of staged contents so far, stage the contents of "
"paths given on the command line as well.  This is usually not what you want "
"unless you are concluding a conflicted merge."
msgstr ""
"これまでにステージングされたコンテンツからコミットを行う前に、コマンドライン"
"で指定されたパスのコンテンツもステージングします。 あなたが競合するマージを終"
"了させるのでない限り、これは通常、あなたが希望することはないでしょう。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:308
#, no-wrap
msgid "`-o`"
msgstr "`-o`"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:309
#, no-wrap
msgid "`--only`"
msgstr "`--only`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:321
msgid ""
"Make a commit by taking the updated working tree contents of the paths "
"specified on the command line, disregarding any contents that have been "
"staged for other paths. This is the default mode of operation of 'git "
"commit' if any paths are given on the command line, in which case this "
"option can be omitted.  If this option is specified together with `--amend`, "
"then no paths need to be specified, which can be used to amend the last "
"commit without committing changes that have already been staged. If used "
"together with `--allow-empty` paths are also not required, and an empty "
"commit will be created."
msgstr ""
"他のパス用にステージングされたコンテンツを無視して、コマンドラインで指定され"
"たパスの更新された作業ツリーのコンテンツを取得してコミットします。 これは、コ"
"マンドラインでパスが指定されている場合の「git commit」のデフォルトの動作モー"
"ドです。この場合、このオプションは省略できます。 このオプションを`--amend` と"
"一緒に指定する場合、パスを指定する必要はありません。これを使用すると、すでに"
"ステージングされている変更をコミットせずに最後のコミットを修正できます。 `--"
"allow-empty` パス と一緒に使用する場合もパスは必要ではなく、空のコミットが作"
"成されます。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:322
#, no-wrap
msgid "`--pathspec-from-file=<file>`"
msgstr "`--pathspec-from-file=<file>`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:329
msgid ""
"Pathspec is passed in `<file>` instead of commandline args. If `<file>` is "
"exactly `-` then standard input is used. Pathspec elements are separated by "
"LF or CR/LF. Pathspec elements can be quoted as explained for the "
"configuration variable `core.quotePath` (see linkgit:git-config[1]). See "
"also `--pathspec-file-nul` and global `--literal-pathspecs`."
msgstr ""
"パススペックは、コマンドライン引数の代わりに`<file>`で渡されます。 `<file>` "
"が正確に `-` の場合、標準入力が使用されます。 パススペック要素は、LFまたはCR/"
"LFで区切られます。 パススペック要素は、構成変数 `core.quotePath` で説明されて"
"いるようにクォートできます(linkgit:git-config[1] 参照)。 `--pathspec-file-"
"nul` および グローバル `--literal-pathspecs` も参照してください。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:330
#, no-wrap
msgid "`--pathspec-file-nul`"
msgstr "`--pathspec-file-nul`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:334
msgid ""
"Only meaningful with `--pathspec-from-file`. Pathspec elements are separated "
"with NUL character and all other characters are taken literally (including "
"newlines and quotes)."
msgstr ""
"`--pathspec-from-file` 指定時のみ意味があります。 パススペック要素はNUL文字で"
"区切られ、他のすべての文字は文字通りに解釈されます(改行と引用符を含む)。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:335
#, no-wrap
msgid "`-u[<mode>]`"
msgstr "`-u[<mode>]`"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:336
#, no-wrap
msgid "`--untracked-files[=<mode>]`"
msgstr "`--untracked-files[=<mode>]`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:338
msgid "Show untracked files."
msgstr "追跡されていないファイル(untracked files)を表示します。"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:343
msgid ""
"The mode parameter is optional (defaults to 'all'), and is used to specify "
"the handling of untracked files; when -u is not used, the default is "
"'normal', i.e. show untracked files and directories."
msgstr ""
"modeパラメーターはオプション(デフォルトは「all」)であり、追跡されていないファ"
"イルの処理を指定するために使用されます。 `-u` を使用しない場合、デフォルトは"
"「normal」です。つまり、追跡されていないファイルとディレクトリを表示します。"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:345
msgid "The possible options are:"
msgstr "可能なオプションは以下のとおりです:"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:347
#, no-wrap
msgid "'no'     - Show no untracked files\n"
msgstr "no - 追跡されていないファイルを表示します\n"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:348
#, no-wrap
msgid "'normal' - Shows untracked files and directories\n"
msgstr "normal - 追跡されていないファイルとディレクトリを表示します\n"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:349
#, no-wrap
msgid "'all'    - Also shows individual files in untracked directories.\n"
msgstr "all - 追跡されてないディレクトリ内の個々のファイルも表示します。\n"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:352
msgid ""
"The default can be changed using the status.showUntrackedFiles configuration "
"variable documented in linkgit:git-config[1]."
msgstr ""
"デフォルトは、 linkgit:git-config[1] に記載されている status."
"showUntrackedFiles 構成変数を使用して変更できます。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:354
#, no-wrap
msgid "`-v`"
msgstr "`-v`"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:355
#, no-wrap
msgid "`--verbose`"
msgstr "`--verbose`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:364
msgid ""
"Show unified diff between the HEAD commit and what would be committed at the "
"bottom of the commit message template to help the user describe the commit "
"by reminding what changes the commit has.  Note that this diff output "
"doesn't have its lines prefixed with '#'. This diff will not be a part of "
"the commit message. See the `commit.verbose` configuration variable in "
"linkgit:git-config[1]."
msgstr ""
"HEADコミットとコミットメッセージテンプレートの下部にコミットされる内容との"
"unified diffを表示して、ユーザーがコミットの変更内容を思い出させることでコ"
"ミットを説明できるようにします。 注意: このdiff出力には、接頭辞 `#` が付いた"
"行がないことに注意してください。 このdiffは、コミットメッセージの一部にはなり"
"ません。 linkgit:git-config[1] の `commit.verbose` 構成変数を参照してくださ"
"い。"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:368
msgid ""
"If specified twice, show in addition the unified diff between what would be "
"committed and the worktree files, i.e. the unstaged changes to tracked files."
msgstr ""
"2回指定した場合は、コミットされるものとワークツリーファイルの間のunified "
"diff、 つまり、追跡されたファイルへのステージングされていない変更を追加で表示"
"します。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:369
#, no-wrap
msgid "`-q`"
msgstr "`-q`"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:370
#, no-wrap
msgid "`--quiet`"
msgstr "`--quiet`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:372
msgid "Suppress commit summary message."
msgstr "コミット要約メッセージを抑制します。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:373
#, no-wrap
msgid "`--dry-run`"
msgstr "`--dry-run`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:377
msgid ""
"Do not create a commit, but show a list of paths that are to be committed, "
"paths with local changes that will be left uncommitted and paths that are "
"untracked."
msgstr ""
"コミットを作成しません。ただし、コミットされるパス、コミットされないままにな"
"るローカル変更のあるパス、および追跡されないパスのリストを表示します。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:378
#, no-wrap
msgid "`--status`"
msgstr "`--status`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:383
msgid ""
"Include the output of linkgit:git-status[1] in the commit message template "
"when using an editor to prepare the commit message.  Defaults to on, but can "
"be used to override configuration variable commit.status."
msgstr ""
"エディターを使用してコミットメッセージを準備する場合は、 linkgit:git-"
"status[1] の出力をコミットメッセージテンプレートに含めます。 デフォルトはオン"
"ではありますが、 構成変数 commit.status での指定をオーバーライドするために使"
"用できます。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:384
#, no-wrap
msgid "`--no-status`"
msgstr "`--no-status`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:388
msgid ""
"Do not include the output of linkgit:git-status[1] in the commit message "
"template when using an editor to prepare the default commit message."
msgstr ""
"エディターを使用してデフォルトのコミットメッセージを準備する場合は、 linkgit:"
"git-status[1] の出力をコミットメッセージテンプレートに含めません。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:389
#, no-wrap
msgid "`-S[<keyid>]`"
msgstr "`-S[<keyid>]`"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:390
#, no-wrap
msgid "`--gpg-sign[=<keyid>]`"
msgstr "`--gpg-sign[=<keyid>]`"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:391
#, no-wrap
msgid "`--no-gpg-sign`"
msgstr "`--no-gpg-sign`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:397
msgid ""
"GPG-sign commits. The `keyid` argument is optional and defaults to the "
"committer identity; if specified, it must be stuck to the option without a "
"space. `--no-gpg-sign` is useful to countermand both `commit.gpgSign` "
"configuration variable, and earlier `--gpg-sign`."
msgstr ""
"GPG署名コミット。 `keyid` 引数はオプションであり、デフォルトでコミッターIDに"
"なります。 指定する場合は、スペースなしでオプションに固定する必要がありま"
"す。 `--no-gpg-sign` は、`commit.gpgSign` 構成変数と、これより前で指定された "
"`--gpg-sign` の両方を打ち消すのに役立ちます。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:398
#, no-wrap
msgid "\\--"
msgstr "`--`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:400
msgid "Do not interpret any more arguments as options."
msgstr "これ以降の引数をオプションとして解釈しないでください。"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:401
#, no-wrap
msgid "<pathspec>..."
msgstr "<pathspec>..."

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:406
msgid ""
"When pathspec is given on the command line, commit the contents of the files "
"that match the pathspec without recording the changes already added to the "
"index. The contents of these files are also staged for the next commit on "
"top of what have been staged before."
msgstr ""
"コマンドラインでパススペックが指定されている場合、インデックスにすでに追加さ"
"れている変更を記録せずに、パススペックにマッチするファイルの内容をコミットし"
"ます。 これらのファイルの内容は、これより前にステージングされたものに加えて、"
"次のコミットのためにもステージングされます。"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:408
msgid "For more details, see the 'pathspec' entry in linkgit:gitglossary[7]."
msgstr ""
"詳細については、 linkgit:gitglossary[7]の「pathspec」エントリを参照してくださ"
"い。"

#. type: Title -
#: ../Documentation-sedout/git-commit.txt:410
#, no-wrap
msgid "EXAMPLES"
msgstr "EXAMPLES"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:422
msgid ""
"When recording your own work, the contents of modified files in your working "
"tree are temporarily stored to a staging area called the \"index\" with 'git "
"add'.  A file can be reverted back, only in the index but not in the working "
"tree, to that of the last commit with `git restore --staged <file>`, which "
"effectively reverts 'git add' and prevents the changes to this file from "
"participating in the next commit.  After building the state to be committed "
"incrementally with these commands, `git commit` (without any pathname "
"parameter) is used to record what has been staged so far.  This is the most "
"basic form of the command.  An example:"
msgstr ""
"自分の作業を記録する場合、作業ツリー内の変更されたファイルの内容は、「git "
"add」を使用して「インデックス」と呼ばれるステージング領域に一時的に保存されま"
"す。 ファイルは、インデックス内でのみ、作業ツリー内ではなく、 `git restore --"
"staged <file>` を使用して最後のコミットのファイルに戻すことができます。これに"
"より、 `git add` が効果的に元に戻され、このファイルへの変更を次のコミットに関"
"わらわせないようにします。 これらのコマンドを使用して増加的にコミットする状態"
"を構築した後、 `git commit` (パス名パラメーターなし)を使用して、これまでにス"
"テージングされたものを記録します。 これは、このコマンドの最も基本的な形式で"
"す。 例:"

#. type: delimited block -
#: ../Documentation-sedout/git-commit.txt:428
#, no-wrap
msgid ""
"$ edit hello.c\n"
"$ git rm goodbye.c\n"
"$ git add hello.c\n"
"$ git commit\n"
msgstr ""
"$ edit hello.c\n"
"$ git rm goodbye.c\n"
"$ git add hello.c\n"
"$ git commit\n"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:436
msgid ""
"Instead of staging files after each individual change, you can tell `git "
"commit` to notice the changes to the files whose contents are tracked in "
"your working tree and do corresponding `git add` and `git rm` for you.  That "
"is, this example does the same as the earlier example if there is no other "
"change in your working tree:"
msgstr ""
"個々の変更の後にファイルをステージングする代わりに、作業ツリーで内容が追跡さ"
"れているファイルへの変更を通知し、対応する `git add` と `git rm` を実行するよ"
"うに`gitcommit`に指示できます。 つまり、以下の例は、作業ツリーに他の変更がな"
"い場合、上記の例と同じように機能します:"

#. type: delimited block -
#: ../Documentation-sedout/git-commit.txt:441
#, no-wrap
msgid ""
"$ edit hello.c\n"
"$ rm goodbye.c\n"
"$ git commit -a\n"
msgstr ""
"$ edit hello.c\n"
"$ rm goodbye.c\n"
"$ git commit -a\n"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:446
msgid ""
"The command `git commit -a` first looks at your working tree, notices that "
"you have modified hello.c and removed goodbye.c, and performs necessary `git "
"add` and `git rm` for you."
msgstr ""
"コマンド `git commit -a` は、最初にあなたの作業ツリーを調べ、 あなたが "
"`hello.c` を変更して `goodbye.c` を削除したことを認識し、 必要な `git add` "
"と `git rm` を実行します。"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:451
msgid ""
"After staging changes to many files, you can alter the order the changes are "
"recorded in, by giving pathnames to `git commit`.  When pathnames are given, "
"the command makes a commit that only records the changes made to the named "
"paths:"
msgstr ""
"多くのファイルに変更をステージングした後、 `git commit` にパス名を指定するこ"
"とで、変更が記録される順序を変更できます。 パス名が指定されると、コマンドは、"
"指定されたパスに加えられた変更のみを記録するコミットを行います:"

#. type: delimited block -
#: ../Documentation-sedout/git-commit.txt:457
#, no-wrap
msgid ""
"$ edit hello.c hello.h\n"
"$ git add hello.c hello.h\n"
"$ edit Makefile\n"
"$ git commit Makefile\n"
msgstr ""
"$ edit hello.c hello.h\n"
"$ git add hello.c hello.h\n"
"$ edit Makefile\n"
"$ git commit Makefile\n"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:464
msgid ""
"This makes a commit that records the modification to `Makefile`.  The "
"changes staged for `hello.c` and `hello.h` are not included in the resulting "
"commit.  However, their changes are not lost -- they are still staged and "
"merely held back.  After the above sequence, if you do:"
msgstr ""
"これにより、`Makefile`への変更を記録するコミットが行われます。 `hello.c` と "
"`hello.h` に対してステージングされた変更は、結果のコミットには含まれません。 "
"ただし、それらの変更は失われません。それらはいまだステージングに留まっている"
"だけです。上記シーケンスの後、あなたが以下のようにした場合:"

#. type: delimited block -
#: ../Documentation-sedout/git-commit.txt:467
#: ../Documentation-sedout/git-commit.txt:493
#, no-wrap
msgid "$ git commit\n"
msgstr "$ git commit\n"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:471
msgid ""
"this second commit would record the changes to `hello.c` and `hello.h` as "
"expected."
msgstr ""
"この2番目のコミットは、期待どおりに `hello.c` と `hello.h` への変更を記録しま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:479
msgid ""
"After a merge (initiated by 'git merge' or 'git pull') stops because of "
"conflicts, cleanly merged paths are already staged to be committed for you, "
"and paths that conflicted are left in unmerged state.  You would have to "
"first check which paths are conflicting with 'git status' and after fixing "
"them manually in your working tree, you would stage the result as usual with "
"'git add':"
msgstr ""
"競合が原因でマージ(「git merge」または「git pull」によって開始）が停止(stop)"
"した後では、クリーンにマージされたパスはすでにステージングされてコミットさ"
"れ、競合したパスはマージされていない状態のままになります。 最初に、「git "
"status」で、どのパスが競合しているかを確認する必要があります。あなたの作業ツ"
"リーで手動で修正した後、通常どおり「git add」を使用して結果をステージングしま"
"す:"

#. type: delimited block -
#: ../Documentation-sedout/git-commit.txt:485
#, no-wrap
msgid ""
"$ git status | grep unmerged\n"
"unmerged: hello.c\n"
"$ edit hello.c\n"
"$ git add hello.c\n"
msgstr ""
"$ git status | grep unmerged\n"
"unmerged: hello.c\n"
"$ edit hello.c\n"
"$ git add hello.c\n"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:490
msgid ""
"After resolving conflicts and staging the result, `git ls-files -u` would "
"stop mentioning the conflicted path.  When you are done, run `git commit` to "
"finally record the merge:"
msgstr ""
"競合を解決して結果をステージングした後、 `git ls-files -u` は競合するパスへの"
"言及を停止します。 完了したら、 `git commit` を実行して、最終的にマージを記録"
"します:"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:501
msgid ""
"As with the case to record your own changes, you can use `-a` option to save "
"typing.  One difference is that during a merge resolution, you cannot use "
"`git commit` with pathnames to alter the order the changes are committed, "
"because the merge should be recorded as a single commit.  In fact, the "
"command refuses to run when given pathnames (but see `-i` option)."
msgstr ""
"独自の変更を記録する場合と同様に、 `-a` オプションを使用して入力を保存できま"
"す。 一つ違うのは、マージの解決中にパス名を伴って `git commit` を使用して、変"
"更がコミットされる順序を変更できないことです。これは、マージが単一のコミット"
"として記録される必要があるためです。 実際、パス名が指定されている場合、コマン"
"ドは実行を拒否します(ただし、 `-i` オプションも参照してください)。"

#. type: Title -
#: ../Documentation-sedout/git-commit.txt:503
#, no-wrap
msgid "COMMIT INFORMATION"
msgstr "COMMIT INFORMATION"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:507
msgid ""
"Author and committer information is taken from the following environment "
"variables, if set:"
msgstr ""
"作者とコミッターの情報は、以下の環境変数から取得されます(設定されてる場合):"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:514
#, no-wrap
msgid ""
"\tGIT_AUTHOR_NAME\n"
"\tGIT_AUTHOR_EMAIL\n"
"\tGIT_AUTHOR_DATE\n"
"\tGIT_COMMITTER_NAME\n"
"\tGIT_COMMITTER_EMAIL\n"
"\tGIT_COMMITTER_DATE\n"
msgstr ""
"\tGIT_AUTHOR_NAME\n"
"\tGIT_AUTHOR_EMAIL\n"
"\tGIT_AUTHOR_DATE\n"
"\tGIT_COMMITTER_NAME\n"
"\tGIT_COMMITTER_EMAIL\n"
"\tGIT_COMMITTER_DATE\n"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:516
msgid "(nb \"<\", \">\" and \"\\n\"s are stripped)"
msgstr "(注: \"<\" と \">\" と \"\\n\" は取り除きます)"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:522
msgid ""
"The author and committer names are by convention some form of a personal "
"name (that is, the name by which other humans refer to you), although Git "
"does not enforce or require any particular form. Arbitrary Unicode may be "
"used, subject to the constraints listed above. This name has no effect on "
"authentication; for that, see the `credential.username` variable in linkgit:"
"git-config[1]."
msgstr ""
"作者とコミッター名は、慣例により、個人名(つまり、他の人間があなたを参照する名"
"前)の形式ですが、Gitは特定の形式を強制または要求しません。 上記の制約に従っ"
"て、任意のUnicodeを使用できます。 この名前は認証には影響しません。認証には影"
"響させるためには、 linkgit:git-config[1]の `credential.username` 変数を参照し"
"てください。"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:529
msgid ""
"In case (some of) these environment variables are not set, the information "
"is taken from the configuration items `user.name` and `user.email`, or, if "
"not present, the environment variable EMAIL, or, if that is not set, system "
"user name and the hostname used for outgoing mail (taken from `/etc/"
"mailname` and falling back to the fully qualified hostname when that file "
"does not exist)."
msgstr ""
"これらの環境変数(の一部)が設定されていない場合、情報は構成アイテム `user."
"name` および `user.email` から取得され、それが存在しない場合は、環境変数EMAIL"
"から取得され、それが設定されてない場合は、 システムユーザー名や送信メールに使"
"用されるホスト名(`/etc/mailname` から取得され、そのファイルが存在しない場合は"
"完全修飾ホスト名にフォールバックします)から取得されます。"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:533
msgid ""
"The `author.name` and `committer.name` and their corresponding email options "
"override `user.name` and `user.email` if set and are overridden themselves "
"by the environment variables."
msgstr ""
"`author.name` と `committer.name` と、それらに対応する電子メールオプション"
"は、 設定されている場合はそれぞれ `user.name` と `user.email` をオーバーライ"
"ドし、環境変数によってオーバーライドされます。"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:536
msgid ""
"The typical usage is to set just the `user.name` and `user.email` variables; "
"the other options are provided for more complex use cases."
msgstr ""
"一般的な使用法は、 `user.name` 変数と `user.email` 変数のみを設定することで"
"す。 他のオプションは、より複雑なユースケースのために提供されています。"

#. type: Title -
#: ../Documentation-sedout/git-commit.txt:541
#, no-wrap
msgid "DISCUSSION"
msgstr "DISCUSSION"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:550
msgid ""
"Though not required, it's a good idea to begin the commit message with a "
"single short (less than 50 character) line summarizing the change, followed "
"by a blank line and then a more thorough description.  The text up to the "
"first blank line in a commit message is treated as the commit title, and "
"that title is used throughout Git.  For example, linkgit:git-format-patch[1] "
"turns a commit into email, and it uses the title on the Subject line and the "
"rest of the commit in the body."
msgstr ""
"必須ではありませんが、変更を要約した1行の短い(50文字未満の)行でコミットメッ"
"セージを開始し、その後に空行を続け、さらに詳細な説明を続けることをお勧めしま"
"す。 コミットメッセージの最初の空行までのテキストはコミットタイトルとして扱わ"
"れ、そのタイトルはGit全体で使用されます。 たとえば、 linkgit:git-format-"
"patch[1] はコミットを電子メールに変換し、コミットタイトルをメール件名に使い、"
"残りのコミットメッセージをメール本文に使います。"

#. type: Title -
#: ../Documentation-sedout/git-commit.txt:554
#, no-wrap
msgid "ENVIRONMENT AND CONFIGURATION VARIABLES"
msgstr "ENVIRONMENT AND CONFIGURATION VARIABLES"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:559
msgid ""
"The editor used to edit the commit log message will be chosen from the "
"`GIT_EDITOR` environment variable, the core.editor configuration variable, "
"the `VISUAL` environment variable, or the `EDITOR` environment variable (in "
"that order).  See linkgit:git-var[1] for details."
msgstr ""
"コミットログメッセージの編集に使用されるエディターは、 `GIT_EDITOR` 環境変数 "
"または core.editor 構成変数 または `VISUAL` 環境変数 または `EDITOR` 環境変数"
"から(この順序で)選択されます。 詳細については、 linkgit:git-var[1] を参照して"
"ください。"

#. type: Title -
#: ../Documentation-sedout/git-commit.txt:565
#, no-wrap
msgid "HOOKS"
msgstr "HOOKS"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:569
msgid ""
"This command can run `commit-msg`, `prepare-commit-msg`, `pre-commit`, `post-"
"commit` and `post-rewrite` hooks.  See linkgit:githooks[5] for more "
"information."
msgstr ""
"このコマンドは、 `commit-msg` フックと、 `prepare-commit-msg` フックと、 "
"`pre-commit` フックと、 `post-commit` フックと、 `post-rewrite` フック を実行"
"できます。 詳細については、 linkgit:githooks[5] を参照してください。"

#. type: Title -
#: ../Documentation-sedout/git-commit.txt:571
#, no-wrap
msgid "FILES"
msgstr "FILES"

#. type: Labeled list
#: ../Documentation-sedout/git-commit.txt:573
#, no-wrap
msgid "`$GIT_DIR/COMMIT_EDITMSG`"
msgstr "`$GIT_DIR/COMMIT_EDITMSG`"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:579
msgid ""
"This file contains the commit message of a commit in progress.  If `git "
"commit` exits due to an error before creating a commit, any commit message "
"that has been provided by the user (e.g., in an editor session) will be "
"available in this file, but will be overwritten by the next invocation of "
"`git commit`."
msgstr ""
"このファイルには、進行中のコミットのコミットメッセージが含まれています。 コ"
"ミットを作成する前にエラーが原因で `gitc ommit` が終了した場合、ユーザーに"
"よって提供されたコミットメッセージ(エディターセッションなど)は全てこのファイ"
"ルに残りますが、次の `git commit` の呼び出しによって上書きされます。"

#. type: Title -
#: ../Documentation-sedout/git-commit.txt:581
#, no-wrap
msgid "SEE ALSO"
msgstr "SEE ALSO"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:587
msgid ""
"linkgit:git-add[1], linkgit:git-rm[1], linkgit:git-mv[1], linkgit:git-"
"merge[1], linkgit:git-commit-tree[1]"
msgstr ""
"linkgit:git-add[1], linkgit:git-rm[1], linkgit:git-mv[1], linkgit:git-"
"merge[1], linkgit:git-commit-tree[1]"

#. type: Title -
#: ../Documentation-sedout/git-commit.txt:589
#, no-wrap
msgid "GIT"
msgstr "GIT"

#. type: Plain text
#: ../Documentation-sedout/git-commit.txt:590
msgid "Part of the linkgit:git[1] suite"
msgstr "Part of the linkgit:git[1] suite"
