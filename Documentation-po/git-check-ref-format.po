# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 0.0\n"
"POT-Creation-Date: 2021-11-04 04:37+0900\n"
"PO-Revision-Date: 2022-03-03 02:45+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/git-check-ref-format.txt:2
#, no-wrap
msgid "git-check-ref-format(1)"
msgstr "git-check-ref-format(1)"

#. type: Title -
#: ../Documentation-sedout/git-check-ref-format.txt:5
#, no-wrap
msgid "NAME"
msgstr "NAME"

#. type: Plain text
#: ../Documentation-sedout/git-check-ref-format.txt:7
msgid "git-check-ref-format - Ensures that a reference name is well formed"
msgstr "git-check-ref-format - 参照名が整形式であることを確認します"

#. type: Title -
#: ../Documentation-sedout/git-check-ref-format.txt:9
#, no-wrap
msgid "SYNOPSIS"
msgstr "SYNOPSIS"

#. type: Plain text
#: ../Documentation-sedout/git-check-ref-format.txt:15
#, no-wrap
msgid ""
"'git check-ref-format' [--normalize]\n"
"       [--[no-]allow-onelevel] [--refspec-pattern]\n"
"       <refname>\n"
"'git check-ref-format' --branch <branchname-shorthand>\n"
msgstr ""
"'git check-ref-format' [--normalize]\n"
"       [--[no-]allow-onelevel] [--refspec-pattern]\n"
"       <refname>\n"
"'git check-ref-format' --branch <branchname-shorthand>\n"

#. type: Title -
#: ../Documentation-sedout/git-check-ref-format.txt:17
#, no-wrap
msgid "DESCRIPTION"
msgstr "DESCRIPTION"

#. type: Plain text
#: ../Documentation-sedout/git-check-ref-format.txt:20
msgid ""
"Checks if a given 'refname' is acceptable, and exits with a non-zero status "
"if it is not."
msgstr "指定の refname が受け入れ可能かどうかを確認し、受け入れられない場合はゼロ以外のステータスで終了します。"

#. type: Plain text
#: ../Documentation-sedout/git-check-ref-format.txt:27
msgid ""
"A reference is used in Git to specify branches and tags.  A branch head is "
"stored in the `refs/heads` hierarchy, while a tag is stored in the `refs/"
"tags` hierarchy of the ref namespace (typically in `$GIT_DIR/refs/heads` and "
"`$GIT_DIR/refs/tags` directories or, as entries in file `$GIT_DIR/packed-"
"refs` if refs are packed by `git gc`)."
msgstr "参照はGitでブランチとタグを指定するために使用されます。ブランチヘッドは `refs/heads` 階層に格納され、タグはref名前空間の `refs/tags` 階層に格納されます(通常は `$GIT_DIR/refs/heads` ディレクトリと `$GIT_DIR/refs/tags` ディレクトリに、または refが `git gc` によってパックされている場合はファイル `$GIT_DIR/packed-refs` のエントリとしてあります)。"

#. type: Plain text
#: ../Documentation-sedout/git-check-ref-format.txt:29
msgid "Git imposes the following rules on how references are named:"
msgstr "Gitは、参照の命名方法に以下のルールを課しています:"

#. type: Plain text
#: ../Documentation-sedout/git-check-ref-format.txt:33
msgid ""
"They can include slash `/` for hierarchical (directory)  grouping, but no "
"slash-separated component can begin with a dot `.` or end with the sequence "
"`.lock`."
msgstr "階層(ディレクトリ)グループ化のためにスラッシュ(`/`)を含めることができますが、スラッシュで区切られたコンポーネントは、ドット(`.`)で開始したり、シーケンス `.lock` で終了したりすることはできません。"

#. type: Plain text
#: ../Documentation-sedout/git-check-ref-format.txt:38
msgid ""
"They must contain at least one `/`. This enforces the presence of a category "
"like `heads/`, `tags/` etc. but the actual names are not restricted.  If the "
"`--allow-onelevel` option is used, this rule is waived."
msgstr "少なくとも1つのスラッシュ(`/`)が含まれている必要があります。これにより、 `heads/` 、 `tags/` などのカテゴリの存在が強制されますが、実際の名前は制限されません。 `--allow-onelevel` オプションが使用されている場合、このルールは放棄されます。"

#. type: Plain text
#: ../Documentation-sedout/git-check-ref-format.txt:40
msgid "They cannot have two consecutive dots `..` anywhere."
msgstr "どこにも2つの連続したドット(`..`)を含めることはできません。"

#. type: Plain text
#: ../Documentation-sedout/git-check-ref-format.txt:44
msgid ""
"They cannot have ASCII control characters (i.e. bytes whose values are lower "
"than \\040, or \\177 `DEL`), space, tilde `~`, caret `^`, or colon `:` "
"anywhere."
msgstr "ASCII制御文字(つまり、値が \\040 未満のバイト または \\177(`DEL`))、スペース、チルダ(`~`)、キャレット(`^`)、コロン(`:`)はどこにでも含めることはできません。"

#. type: Plain text
#: ../Documentation-sedout/git-check-ref-format.txt:48
msgid ""
"They cannot have question-mark `?`, asterisk `*`, or open bracket `[` "
"anywhere.  See the `--refspec-pattern` option below for an exception to this "
"rule."
msgstr "疑問符(`？`)、アスタリスク(`*`)、角かっこ(`[`)がどこにあってもいけません。この規則の例外については、以下の `--refspec-pattern` オプションを参照してください。"

#. type: Plain text
#: ../Documentation-sedout/git-check-ref-format.txt:52
msgid ""
"They cannot begin or end with a slash `/` or contain multiple consecutive "
"slashes (see the `--normalize` option below for an exception to this rule)"
msgstr "スラッシュ(`/`)で開始または終了したり、複数の連続したスラッシュを含めることはできません(この規則の例外については、以下の `--normalize` オプションを参照してください)。"

#. type: Plain text
#: ../Documentation-sedout/git-check-ref-format.txt:54
msgid "They cannot end with a dot `.`."
msgstr "ドット(`.`)で終わらせることはできません。"

#. type: Plain text
#: ../Documentation-sedout/git-check-ref-format.txt:56
msgid "They cannot contain a sequence `@{`."
msgstr "シーケンス `@{` を含めることはできません。"

#. type: Plain text
#: ../Documentation-sedout/git-check-ref-format.txt:58
msgid "They cannot be the single character `@`."
msgstr "単一の文字 `@` にすることはできません。"

#. type: Plain text
#: ../Documentation-sedout/git-check-ref-format.txt:60
msgid "They cannot contain a `\\`."
msgstr "`\\` を含めることはできません。"

#. type: Plain text
#: ../Documentation-sedout/git-check-ref-format.txt:65
msgid ""
"These rules make it easy for shell script based tools to parse reference "
"names, pathname expansion by the shell when a reference name is used "
"unquoted (by mistake), and also avoid ambiguities in certain reference name "
"expressions (see linkgit:gitrevisions[7]):"
msgstr "これらのルールにより、シェルスクリプトをベースにしたツールで参照名を簡単にパースできるようになり、参照名が(誤って)引用符なしで使われたときにシェルでパス名を展開したり、特定の参照名表現におけるあいまいさを回避することができます(linkgit:gitrevisions[7] を参照)。"

#. type: Plain text
#: ../Documentation-sedout/git-check-ref-format.txt:69
msgid ""
"A double-dot `..` is often used as in `ref1..ref2`, and in some contexts "
"this notation means `^ref1 ref2` (i.e. not in `ref1` and in `ref2`)."
msgstr "二重ドット(`..`)は、 `ref1..ref2` などとよく使用されます。一部のコンテキストでは、この表記は `^ref1 ref2` を意味します(つまり、`ref1` に無く かつ `ref2` にある)。"

#. type: Plain text
#: ../Documentation-sedout/git-check-ref-format.txt:72
msgid ""
"A tilde `~` and caret `^` are used to introduce the postfix 'nth parent' and "
"'peel onion' operation."
msgstr "チルダ(`~`)とキャレット(`^`)は、接尾辞 'nth parent' (n番目の親)と 'peel onion' (玉ねぎ剥き)操作を導入するために使用されます。"

#. type: Plain text
#: ../Documentation-sedout/git-check-ref-format.txt:77
msgid ""
"A colon `:` is used as in `srcref:dstref` to mean \"use srcref\\'s value and "
"store it in dstref\" in fetch and push operations.  It may also be used to "
"select a specific object such as with 'git cat-file': \"git cat-file blob "
"v1.3.3:refs.c\"."
msgstr "コロン(`：`)は、 `srcref:dstref` のように、フェッチおよびプッシュ操作で「srcrefの値を使用してdstrefに格納する」ことを意味するために使用されます。 `git cat-file blob v1.3.3:refs.c` のようにして `git cat-file` などで特定のオブジェクトを選択するためにも使用できます。"

#. type: Plain text
#: ../Documentation-sedout/git-check-ref-format.txt:79
msgid "at-open-brace `@{` is used as a notation to access a reflog entry."
msgstr "at-open-brace(`@{`)は、reflogエントリにアクセスするための表記法として使用されます。"

#. type: Plain text
#: ../Documentation-sedout/git-check-ref-format.txt:98
msgid ""
"With the `--branch` option, the command takes a name and checks if it can be "
"used as a valid branch name (e.g. when creating a new branch). But be "
"cautious when using the previous checkout syntax that may refer to a "
"detached HEAD state.  The rule `git check-ref-format --branch $name` "
"implements may be stricter than what `git check-ref-format refs/heads/$name` "
"says (e.g. a dash may appear at the beginning of a ref component, but it is "
"explicitly forbidden at the beginning of a branch name).  When run with `--"
"branch` option in a repository, the input is first expanded for the "
"``previous checkout syntax'' `@{-n}`.  For example, `@{-1}` is a way to "
"refer the last thing that was checked out using \"git switch\" or \"git "
"checkout\" operation.  This option should be used by porcelains to accept "
"this syntax anywhere a branch name is expected, so they can act as if you "
"typed the branch name. As an exception note that, the ``previous checkout "
"operation'' might result in a commit object name when the N-th last thing "
"checked out was not a branch."
msgstr "`--branch` オプションを使用すると、コマンドは名前を取得し、それが有効なブランチ名として使用できるかどうかを確認します(たとえば、新しいブランチを作成するとき)。ただし、切り離された(detached)HEAD状態を参照する可能性のある、遡及チェックアウト構文(previous checkout syntax)を使用する場合は注意が必要です。 `git check-ref-format --branch $name` が実装するルールは、 `git check-ref-format refs/heads/$name` が言うことよりも厳しい場合があります(たとえば、参照コンポーネントの先頭にダッシュが表示される場合がありますが、ブランチ名の先頭では明示的に禁止されています)。リポジトリで `--branch` オプションを指定して実行すると、入力は最初に「遡及チェックアウト構文」 `@{-n}` 用に展開されます。たとえば、 `@{-1}` は、 `git switch` または `git checkout` 操作を使用して最後にチェックアウトされたものを参照する方法です。磁器コマンドでは、ブランチ名が必要な場所でこの構文を受け入れるために、このオプションを使用する必要があります。これにより、あなたがブランチ名を入力したかのように機能できます。注意: 「遡及チェックアウト操作」では、例外として、チェックアウトされたN番目の最後のものがブランチではなかった場合にコミットオブジェクト名が生成される可能性があることに注意してください。"

#. type: Title -
#: ../Documentation-sedout/git-check-ref-format.txt:100
#, no-wrap
msgid "OPTIONS"
msgstr "OPTIONS"

#. type: Labeled list
#: ../Documentation-sedout/git-check-ref-format.txt:101
#, no-wrap
msgid "`--[no-]allow-onelevel`"
msgstr "`--[no-]allow-onelevel`"

#. type: Plain text
#: ../Documentation-sedout/git-check-ref-format.txt:105
msgid ""
"Controls whether one-level refnames are accepted (i.e., refnames that do not "
"contain multiple `/`-separated components).  The default is `--no-allow-"
"onelevel`."
msgstr "1レベルのrefnameを受け入れるかどうかを制御します(つまり、複数の `/` で区切られたコンポーネントを含まないrefname)。 デフォルトは `--no-allow-onelevel` です。"

#. type: Labeled list
#: ../Documentation-sedout/git-check-ref-format.txt:106
#, no-wrap
msgid "`--refspec-pattern`"
msgstr "`--refspec-pattern`"

#. type: Plain text
#: ../Documentation-sedout/git-check-ref-format.txt:112
msgid ""
"Interpret <refname> as a reference name pattern for a refspec (as used with "
"remote repositories).  If this option is enabled, <refname> is allowed to "
"contain a single `*` in the refspec (e.g., `foo/bar*/baz` or `foo/bar*baz/` "
"but not `foo/bar*/baz*`)."
msgstr "<refname>を(リモートリポジトリで使用される)refspecの参照名パターンとして解釈します。このオプションを有効にすると、<refname>はrefspecに単一の `*` を含めることができます(例: `foo/bar*/baz` または `foo/bar*baz/` はOKですが、 `foo/bar*/baz*` はダメです)。"

#. type: Labeled list
#: ../Documentation-sedout/git-check-ref-format.txt:113
#, no-wrap
msgid "`--normalize`"
msgstr "`--normalize`"

#. type: Plain text
#: ../Documentation-sedout/git-check-ref-format.txt:120
msgid ""
"Normalize 'refname' by removing any leading slash (`/`)  characters and "
"collapsing runs of adjacent slashes between name components into a single "
"slash.  If the normalized refname is valid then print it to standard output "
"and exit with a status of 0, otherwise exit with a non-zero status.  (`--"
"print` is a deprecated way to spell `--normalize`.)"
msgstr "先行スラッシュ(`/`)文字を削除し、名前コンポーネント間の隣接するスラッシュを1つのスラッシュに折りたたむことにより、 'refname' を正規化します。正規化されたrefnameが有効な場合は、それを標準出力に出力し、ステータス0で終了します。それ以外の場合は、ゼロ以外のステータスで終了します。 ( `--print` は `--normalize` を綴る非推奨の方法です。)"

#. type: Title -
#: ../Documentation-sedout/git-check-ref-format.txt:123
#, no-wrap
msgid "EXAMPLES"
msgstr "EXAMPLES"

#. type: Plain text
#: ../Documentation-sedout/git-check-ref-format.txt:126
msgid "Print the name of the previous thing checked out:"
msgstr "チェックアウトしたのモノの一つ前のものの名前を印刷します:"

#. type: delimited block -
#: ../Documentation-sedout/git-check-ref-format.txt:129
#, no-wrap
msgid "$ git check-ref-format --branch @{-1}\n"
msgstr "$ git check-ref-format --branch @{-1}\n"

#. type: Plain text
#: ../Documentation-sedout/git-check-ref-format.txt:132
msgid "Determine the reference name to use for a new branch:"
msgstr "新しいブランチに使用する参照名を決定します:"

#. type: delimited block -
#: ../Documentation-sedout/git-check-ref-format.txt:136
#, no-wrap
msgid ""
"$ ref=$(git check-ref-format --normalize \"refs/heads/$newbranch\")||\n"
"{ echo \"we do not like '$newbranch' as a branch name.\" >&2 ; exit 1 ; }\n"
msgstr ""
"$ ref=$(git check-ref-format --normalize \"refs/heads/$newbranch\")||\n"
"{ echo \"we do not like '$newbranch' as a branch name.\" >&2 ; exit 1 ; }\n"

#. type: Title -
#: ../Documentation-sedout/git-check-ref-format.txt:139
#, no-wrap
msgid "GIT"
msgstr "GIT"

#. type: Plain text
#: ../Documentation-sedout/git-check-ref-format.txt:140
msgid "Part of the linkgit:git[1] suite"
msgstr "Part of the linkgit:git[1] suite"
