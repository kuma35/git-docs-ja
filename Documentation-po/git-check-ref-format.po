# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-10-01 00:25+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation/git-check-ref-format.txt:2
#, no-wrap
msgid "git-check-ref-format(1)"
msgstr ""

#. type: Title -
#: ../Documentation/git-check-ref-format.txt:5
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: ../Documentation/git-check-ref-format.txt:7
msgid "git-check-ref-format - Ensures that a reference name is well formed"
msgstr ""

#. type: Title -
#: ../Documentation/git-check-ref-format.txt:9
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: ../Documentation/git-check-ref-format.txt:15
#, no-wrap
msgid ""
"'git check-ref-format' [--normalize]\n"
"       [--[no-]allow-onelevel] [--refspec-pattern]\n"
"       <refname>\n"
"'git check-ref-format' --branch <branchname-shorthand>\n"
msgstr ""

#. type: Title -
#: ../Documentation/git-check-ref-format.txt:17
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: ../Documentation/git-check-ref-format.txt:20
msgid ""
"Checks if a given 'refname' is acceptable, and exits with a non-zero status "
"if it is not."
msgstr ""

#. type: Plain text
#: ../Documentation/git-check-ref-format.txt:27
msgid ""
"A reference is used in Git to specify branches and tags.  A branch head is "
"stored in the `refs/heads` hierarchy, while a tag is stored in the "
"`refs/tags` hierarchy of the ref namespace (typically in "
"`$GIT_DIR/refs/heads` and `$GIT_DIR/refs/tags` directories or, as entries in "
"file `$GIT_DIR/packed-refs` if refs are packed by `git gc`)."
msgstr ""

#. type: Plain text
#: ../Documentation/git-check-ref-format.txt:29
msgid "Git imposes the following rules on how references are named:"
msgstr ""

#. type: Plain text
#: ../Documentation/git-check-ref-format.txt:33
msgid ""
"They can include slash `/` for hierarchical (directory)  grouping, but no "
"slash-separated component can begin with a dot `.` or end with the sequence "
"`.lock`."
msgstr ""

#. type: Plain text
#: ../Documentation/git-check-ref-format.txt:38
msgid ""
"They must contain at least one `/`. This enforces the presence of a category "
"like `heads/`, `tags/` etc. but the actual names are not restricted.  If the "
"`--allow-onelevel` option is used, this rule is waived."
msgstr ""

#. type: Plain text
#: ../Documentation/git-check-ref-format.txt:40
msgid "They cannot have two consecutive dots `..` anywhere."
msgstr ""

#. type: Plain text
#: ../Documentation/git-check-ref-format.txt:44
msgid ""
"They cannot have ASCII control characters (i.e. bytes whose values are lower "
"than \\040, or \\177 `DEL`), space, tilde `~`, caret `^`, or colon `:` "
"anywhere."
msgstr ""

#. type: Plain text
#: ../Documentation/git-check-ref-format.txt:48
msgid ""
"They cannot have question-mark `?`, asterisk `*`, or open bracket `[` "
"anywhere.  See the `--refspec-pattern` option below for an exception to this "
"rule."
msgstr ""

#. type: Plain text
#: ../Documentation/git-check-ref-format.txt:52
msgid ""
"They cannot begin or end with a slash `/` or contain multiple consecutive "
"slashes (see the `--normalize` option below for an exception to this rule)"
msgstr ""

#. type: Plain text
#: ../Documentation/git-check-ref-format.txt:54
msgid "They cannot end with a dot `.`."
msgstr ""

#. type: Plain text
#: ../Documentation/git-check-ref-format.txt:56
msgid "They cannot contain a sequence `@{`."
msgstr ""

#. type: Plain text
#: ../Documentation/git-check-ref-format.txt:58
msgid "They cannot be the single character `@`."
msgstr ""

#. type: Plain text
#: ../Documentation/git-check-ref-format.txt:60
msgid "They cannot contain a `\\`."
msgstr ""

#. type: Plain text
#: ../Documentation/git-check-ref-format.txt:65
msgid ""
"These rules make it easy for shell script based tools to parse reference "
"names, pathname expansion by the shell when a reference name is used "
"unquoted (by mistake), and also avoid ambiguities in certain reference name "
"expressions (see linkgit:gitrevisions[7]):"
msgstr ""

#. type: Plain text
#: ../Documentation/git-check-ref-format.txt:69
msgid ""
"A double-dot `..` is often used as in `ref1..ref2`, and in some contexts "
"this notation means `^ref1 ref2` (i.e. not in `ref1` and in `ref2`)."
msgstr ""

#. type: Plain text
#: ../Documentation/git-check-ref-format.txt:72
msgid ""
"A tilde `~` and caret `^` are used to introduce the postfix 'nth parent' and "
"'peel onion' operation."
msgstr ""

#. type: Plain text
#: ../Documentation/git-check-ref-format.txt:77
msgid ""
"A colon `:` is used as in `srcref:dstref` to mean \"use srcref\\'s value and "
"store it in dstref\" in fetch and push operations.  It may also be used to "
"select a specific object such as with 'git cat-file': \"git cat-file blob "
"v1.3.3:refs.c\"."
msgstr ""

#. type: Plain text
#: ../Documentation/git-check-ref-format.txt:79
msgid "at-open-brace `@{` is used as a notation to access a reflog entry."
msgstr ""

#. type: Plain text
#: ../Documentation/git-check-ref-format.txt:98
msgid ""
"With the `--branch` option, the command takes a name and checks if it can be "
"used as a valid branch name (e.g. when creating a new branch). But be "
"cautious when using the previous checkout syntax that may refer to a "
"detached HEAD state.  The rule `git check-ref-format --branch $name` "
"implements may be stricter than what `git check-ref-format refs/heads/$name` "
"says (e.g. a dash may appear at the beginning of a ref component, but it is "
"explicitly forbidden at the beginning of a branch name).  When run with "
"`--branch` option in a repository, the input is first expanded for the "
"``previous checkout syntax'' `@{-n}`.  For example, `@{-1}` is a way to "
"refer the last thing that was checked out using \"git switch\" or \"git "
"checkout\" operation.  This option should be used by porcelains to accept "
"this syntax anywhere a branch name is expected, so they can act as if you "
"typed the branch name. As an exception note that, the ``previous checkout "
"operation'' might result in a commit object name when the N-th last thing "
"checked out was not a branch."
msgstr ""

#. type: Title -
#: ../Documentation/git-check-ref-format.txt:100
#, no-wrap
msgid "OPTIONS"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-check-ref-format.txt:101
#, no-wrap
msgid "--[no-]allow-onelevel"
msgstr ""

#. type: Plain text
#: ../Documentation/git-check-ref-format.txt:105
msgid ""
"Controls whether one-level refnames are accepted (i.e., refnames that do not "
"contain multiple `/`-separated components).  The default is "
"`--no-allow-onelevel`."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-check-ref-format.txt:106
#, no-wrap
msgid "--refspec-pattern"
msgstr ""

#. type: Plain text
#: ../Documentation/git-check-ref-format.txt:112
msgid ""
"Interpret <refname> as a reference name pattern for a refspec (as used with "
"remote repositories).  If this option is enabled, <refname> is allowed to "
"contain a single `*` in the refspec (e.g., `foo/bar*/baz` or `foo/bar*baz/` "
"but not `foo/bar*/baz*`)."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-check-ref-format.txt:113
#, no-wrap
msgid "--normalize"
msgstr ""

#. type: Plain text
#: ../Documentation/git-check-ref-format.txt:120
msgid ""
"Normalize 'refname' by removing any leading slash (`/`)  characters and "
"collapsing runs of adjacent slashes between name components into a single "
"slash.  If the normalized refname is valid then print it to standard output "
"and exit with a status of 0, otherwise exit with a non-zero status.  "
"(`--print` is a deprecated way to spell `--normalize`.)"
msgstr ""

#. type: Title -
#: ../Documentation/git-check-ref-format.txt:123
#, no-wrap
msgid "EXAMPLES"
msgstr ""

#. type: Plain text
#: ../Documentation/git-check-ref-format.txt:126
msgid "Print the name of the previous thing checked out:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-check-ref-format.txt:129
#, no-wrap
msgid "$ git check-ref-format --branch @{-1}\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-check-ref-format.txt:132
msgid "Determine the reference name to use for a new branch:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-check-ref-format.txt:136
#, no-wrap
msgid ""
"$ ref=$(git check-ref-format --normalize \"refs/heads/$newbranch\")||\n"
"{ echo \"we do not like '$newbranch' as a branch name.\" >&2 ; exit 1 ; }\n"
msgstr ""

#. type: Title -
#: ../Documentation/git-check-ref-format.txt:139
#, no-wrap
msgid "GIT"
msgstr ""

#. type: Plain text
#: ../Documentation/git-check-ref-format.txt:140
msgid "Part of the linkgit:git[1] suite"
msgstr ""
