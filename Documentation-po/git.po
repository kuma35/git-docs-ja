# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-10-01 00:25+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation/git.txt:2
#, no-wrap
msgid "git(1)"
msgstr ""

#. type: Title -
#: ../Documentation/git.txt:5
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:7
msgid "git - the stupid content tracker"
msgstr ""

#. type: Title -
#: ../Documentation/git.txt:10
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:18
#, no-wrap
msgid ""
"'git' [--version] [--help] [-C <path>] [-c <name>=<value>]\n"
"    [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n"
"    [-p|--paginate|-P|--no-pager] [--no-replace-objects] [--bare]\n"
"    [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n"
"    [--super-prefix=<path>] [--config-env=<name>=<envvar>]\n"
"    <command> [<args>]\n"
msgstr ""

#. type: Title -
#: ../Documentation/git.txt:20
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:24
msgid ""
"Git is a fast, scalable, distributed revision control system with an "
"unusually rich command set that provides both high-level operations and full "
"access to internals."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:29
msgid ""
"See linkgit:gittutorial[7] to get started, then see linkgit:giteveryday[7] "
"for a useful minimum set of commands.  The link:user-manual.html[Git User's "
"Manual] has a more in-depth introduction."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:34
msgid ""
"After you mastered the basic concepts, you can come back to this page to "
"learn what commands Git offers.  You can learn more about individual Git "
"commands with \"git help command\".  linkgit:gitcli[7] manual page gives you "
"an overview of the command-line command syntax."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:38
msgid ""
"A formatted and hyperlinked copy of the latest Git documentation can be "
"viewed at https://git.github.io/htmldocs/git.html or "
"https://git-scm.com/docs."
msgstr ""

#. type: Title -
#: ../Documentation/git.txt:41
#, no-wrap
msgid "OPTIONS"
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:42
#, no-wrap
msgid "--version"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:44
msgid "Prints the Git suite version that the 'git' program came from."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:48
msgid ""
"This option is internaly converted to `git version ...` and accepts the same "
"options as the linkgit:git-version[1] command. If `--help` is also given, it "
"takes precedence over `--version`."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:49
#, no-wrap
msgid "--help"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:54
msgid ""
"Prints the synopsis and a list of the most commonly used commands. If the "
"option `--all` or `-a` is given then all available commands are printed. If "
"a Git command is named this option will bring up the manual page for that "
"command."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:59
msgid ""
"Other options are available to control how the manual page is displayed. See "
"linkgit:git-help[1] for more information, because `git --help ...` is "
"converted internally into `git help ...`."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:60
#, no-wrap
msgid "-C <path>"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:66
msgid ""
"Run as if git was started in '<path>' instead of the current working "
"directory.  When multiple `-C` options are given, each subsequent "
"non-absolute `-C <path>` is interpreted relative to the preceding `-C "
"<path>`.  If '<path>' is present but empty, e.g. `-C \"\"`, then the current "
"working directory is left unchanged."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:71
msgid ""
"This option affects options that expect path name like `--git-dir` and "
"`--work-tree` in that their interpretations of the path names would be made "
"relative to the working directory caused by the `-C` option. For example the "
"following invocations are equivalent:"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:74
#, no-wrap
msgid ""
"    git --git-dir=a.git --work-tree=b -C c status\n"
"    git --git-dir=c/a.git --work-tree=c/b status\n"
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:75
#, no-wrap
msgid "-c <name>=<value>"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:80
msgid ""
"Pass a configuration parameter to the command. The value given will override "
"values from configuration files.  The <name> is expected in the same format "
"as listed by 'git config' (subkeys separated by dots)."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:86
msgid ""
"Note that omitting the `=` in `git -c foo.bar ...` is allowed and sets "
"`foo.bar` to the boolean true value (just like `[foo]bar` would in a config "
"file). Including the equals but with an empty value (like `git -c foo.bar= "
"...`) sets `foo.bar` to the empty string which `git config --type=bool` will "
"convert to `false`."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:87
#, no-wrap
msgid "--config-env=<name>=<envvar>"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:96
msgid ""
"Like `-c <name>=<value>`, give configuration variable '<name>' a value, "
"where <envvar> is the name of an environment variable from which to retrieve "
"the value. Unlike `-c` there is no shortcut for directly setting the value "
"to an empty string, instead the environment variable itself must be set to "
"the empty string.  It is an error if the `<envvar>` does not exist in the "
"environment. `<envvar>` may not contain an equals sign to avoid ambiguity "
"with `<name>` containing one."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:103
msgid ""
"This is useful for cases where you want to pass transitory configuration "
"options to git, but are doing so on OS's where other processes might be able "
"to read your cmdline (e.g. `/proc/self/cmdline`), but not your environ "
"(e.g. `/proc/self/environ`). That behavior is the default on Linux, but may "
"not be on your system."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:108
msgid ""
"Note that this might add security for variables such as `http.extraHeader` "
"where the sensitive information is part of the value, but not "
"e.g. `url.<base>.insteadOf` where the sensitive information can be part of "
"the key."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:109
#, no-wrap
msgid "--exec-path[=<path>]"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:114
msgid ""
"Path to wherever your core Git programs are installed.  This can also be "
"controlled by setting the GIT_EXEC_PATH environment variable. If no path is "
"given, 'git' will print the current setting and then exit."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:115
#, no-wrap
msgid "--html-path"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:118
msgid ""
"Print the path, without trailing slash, where Git's HTML documentation is "
"installed and exit."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:119
#, no-wrap
msgid "--man-path"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:122
msgid ""
"Print the manpath (see `man(1)`) for the man pages for this version of Git "
"and exit."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:123
#, no-wrap
msgid "--info-path"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:126
msgid ""
"Print the path where the Info files documenting this version of Git are "
"installed and exit."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:127
#, no-wrap
msgid "-p"
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:128
#, no-wrap
msgid "--paginate"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:133
msgid ""
"Pipe all output into 'less' (or if set, $PAGER) if standard output is a "
"terminal.  This overrides the `pager.<cmd>` configuration options (see the "
"\"Configuration Mechanism\" section below)."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:134
#, no-wrap
msgid "-P"
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:135
#, no-wrap
msgid "--no-pager"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:137
msgid "Do not pipe Git output into a pager."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:138
#, no-wrap
msgid "--git-dir=<path>"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:142
msgid ""
"Set the path to the repository (\".git\" directory). This can also be "
"controlled by setting the `GIT_DIR` environment variable. It can be an "
"absolute path or relative path to current working directory."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:153
msgid ""
"Specifying the location of the \".git\" directory using this option (or "
"`GIT_DIR` environment variable) turns off the repository discovery that "
"tries to find a directory with \".git\" subdirectory (which is how the "
"repository and the top-level of the working tree are discovered), and tells "
"Git that you are at the top level of the working tree.  If you are not at "
"the top-level directory of the working tree, you should tell Git where the "
"top-level of the working tree is, with the `--work-tree=<path>` option (or "
"`GIT_WORK_TREE` environment variable)"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:156
msgid ""
"If you just want to run git as if it was started in `<path>` then use `git "
"-C <path>`."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:157
#, no-wrap
msgid "--work-tree=<path>"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:164
msgid ""
"Set the path to the working tree. It can be an absolute path or a path "
"relative to the current working directory.  This can also be controlled by "
"setting the GIT_WORK_TREE environment variable and the core.worktree "
"configuration variable (see core.worktree in linkgit:git-config[1] for a "
"more detailed discussion)."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:165
#, no-wrap
msgid "--namespace=<path>"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:169
msgid ""
"Set the Git namespace.  See linkgit:gitnamespaces[7] for more details.  "
"Equivalent to setting the `GIT_NAMESPACE` environment variable."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:170
#, no-wrap
msgid "--super-prefix=<path>"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:174
msgid ""
"Currently for internal use only.  Set a prefix which gives a path from above "
"a repository down to its root.  One use is to give submodules context about "
"the superproject that invoked it."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:175
#, no-wrap
msgid "--bare"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:179
msgid ""
"Treat the repository as a bare repository.  If GIT_DIR environment is not "
"set, it is set to the current working directory."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:180
#, no-wrap
msgid "--no-replace-objects"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:183
msgid ""
"Do not use replacement refs to replace Git objects. See "
"linkgit:git-replace[1] for more information."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:184
#, no-wrap
msgid "--literal-pathspecs"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:188
msgid ""
"Treat pathspecs literally (i.e. no globbing, no pathspec magic).  This is "
"equivalent to setting the `GIT_LITERAL_PATHSPECS` environment variable to "
"`1`."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:189
#, no-wrap
msgid "--glob-pathspecs"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:194
msgid ""
"Add \"glob\" magic to all pathspec. This is equivalent to setting the "
"`GIT_GLOB_PATHSPECS` environment variable to `1`. Disabling globbing on "
"individual pathspecs can be done using pathspec magic \":(literal)\""
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:195
#, no-wrap
msgid "--noglob-pathspecs"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:200
msgid ""
"Add \"literal\" magic to all pathspec. This is equivalent to setting the "
"`GIT_NOGLOB_PATHSPECS` environment variable to `1`. Enabling globbing on "
"individual pathspecs can be done using pathspec magic \":(glob)\""
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:201
#, no-wrap
msgid "--icase-pathspecs"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:204
msgid ""
"Add \"icase\" magic to all pathspec. This is equivalent to setting the "
"`GIT_ICASE_PATHSPECS` environment variable to `1`."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:205
#, no-wrap
msgid "--no-optional-locks"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:208
msgid ""
"Do not perform optional operations that require locks. This is equivalent to "
"setting the `GIT_OPTIONAL_LOCKS` to `0`."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:209
#, no-wrap
msgid "--list-cmds=group[,group...]"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:218
msgid ""
"List commands by group. This is an internal/experimental option and may "
"change or be removed in the future. Supported groups are: builtins, parseopt "
"(builtin commands that use parse-options), main (all commands in libexec "
"directory), others (all other commands in `$PATH` that have git- prefix), "
"list-<category> (see categories in command-list.txt), nohelpers (exclude "
"helper commands), alias and config (retrieve command list from config "
"variable completion.commands)"
msgstr ""

#. type: Title -
#: ../Documentation/git.txt:220
#, no-wrap
msgid "GIT COMMANDS"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:224
msgid ""
"We divide Git into high level (\"porcelain\") commands and low level "
"(\"plumbing\") commands."
msgstr ""

#. type: Title -
#: ../Documentation/git.txt:226
#, no-wrap
msgid "High-level commands (porcelain)"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:230
msgid ""
"We separate the porcelain commands into the main commands and some ancillary "
"user utilities."
msgstr ""

#. type: Title ~
#: ../Documentation/git.txt:232
#, no-wrap
msgid "Main porcelain commands"
msgstr ""

#. type: Title ~
#: ../Documentation/git.txt:237
#, no-wrap
msgid "Ancillary Commands"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:239
msgid "Manipulators:"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:243
msgid "Interrogators:"
msgstr ""

#. type: Title ~
#: ../Documentation/git.txt:248
#, no-wrap
msgid "Interacting with Others"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:252
msgid ""
"These commands are to interact with foreign SCM and with other people via "
"patch over e-mail."
msgstr ""

#. type: Title ~
#: ../Documentation/git.txt:256
#, no-wrap
msgid "Reset, restore and revert"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:259
msgid ""
"There are three commands with similar names: `git reset`, `git restore` and "
"`git revert`."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:262
msgid ""
"linkgit:git-revert[1] is about making a new commit that reverts the changes "
"made by other commits."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:267
msgid ""
"linkgit:git-restore[1] is about restoring files in the working tree from "
"either the index or another commit. This command does not update your "
"branch. The command can also be used to restore files in the index from "
"another commit."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:271
msgid ""
"linkgit:git-reset[1] is about updating your branch, moving the tip in order "
"to add or remove commits from the branch. This operation changes the commit "
"history."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:274
msgid ""
"`git reset` can also be used to restore the index, overlapping with `git "
"restore`."
msgstr ""

#. type: Title -
#: ../Documentation/git.txt:277
#, no-wrap
msgid "Low-level commands (plumbing)"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:284
msgid ""
"Although Git includes its own porcelain layer, its low-level commands are "
"sufficient to support development of alternative porcelains.  Developers of "
"such porcelains might start by reading about linkgit:git-update-index[1] and "
"linkgit:git-read-tree[1]."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:291
msgid ""
"The interface (input, output, set of options and the semantics)  to these "
"low-level commands are meant to be a lot more stable than Porcelain level "
"commands, because these commands are primarily for scripted use.  The "
"interface to Porcelain commands on the other hand are subject to change in "
"order to improve the end user experience."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:297
msgid ""
"The following description divides the low-level commands into commands that "
"manipulate objects (in the repository, index, and working tree), commands "
"that interrogate and compare objects, and commands that move objects and "
"references between repositories."
msgstr ""

#. type: Title ~
#: ../Documentation/git.txt:300
#, no-wrap
msgid "Manipulation commands"
msgstr ""

#. type: Title ~
#: ../Documentation/git.txt:306
#, no-wrap
msgid "Interrogation commands"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:312
msgid ""
"In general, the interrogate commands do not touch the files in the working "
"tree."
msgstr ""

#. type: Title ~
#: ../Documentation/git.txt:315
#, no-wrap
msgid "Syncing repositories"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:321
msgid ""
"The following are helper commands used by the above; end users typically do "
"not use them directly."
msgstr ""

#. type: Title ~
#: ../Documentation/git.txt:326
#, no-wrap
msgid "Internal helper commands"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:330
msgid ""
"These are internal helper commands used by other commands; end users "
"typically do not use them directly."
msgstr ""

#. type: Title -
#: ../Documentation/git.txt:334
#, no-wrap
msgid "Guides"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:337
msgid "The following documentation pages are guides about Git concepts."
msgstr ""

#. type: Title -
#: ../Documentation/git.txt:342
#, no-wrap
msgid "Configuration Mechanism"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:347
msgid ""
"Git uses a simple text format to store customizations that are per "
"repository and are per user.  Such a configuration file may look like this:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git.txt:352
#, no-wrap
msgid ""
"#\n"
"# A '#' or ';' character indicates a comment.\n"
"#\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/git.txt:357
#, no-wrap
msgid ""
"; core variables\n"
"[core]\n"
"\t; Don't trust file modes\n"
"\tfilemode = false\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/git.txt:362
#, no-wrap
msgid ""
"; user identity\n"
"[user]\n"
"\tname = \"Junio C Hamano\"\n"
"\temail = \"gitster@pobox.com\"\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:368
msgid ""
"Various commands read from the configuration file and adjust their operation "
"accordingly.  See linkgit:git-config[1] for a list and more details about "
"the configuration mechanism."
msgstr ""

#. type: Title -
#: ../Documentation/git.txt:371
#, no-wrap
msgid "Identifier Terminology"
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:372
#, no-wrap
msgid "<object>"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:374
msgid "Indicates the object name for any type of object."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:375
#, no-wrap
msgid "<blob>"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:377
msgid "Indicates a blob object name."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:378
#, no-wrap
msgid "<tree>"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:380
msgid "Indicates a tree object name."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:381
#, no-wrap
msgid "<commit>"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:383
msgid "Indicates a commit object name."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:384
#, no-wrap
msgid "<tree-ish>"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:389
msgid ""
"Indicates a tree, commit or tag object name.  A command that takes a "
"<tree-ish> argument ultimately wants to operate on a <tree> object but "
"automatically dereferences <commit> and <tag> objects that point at a "
"<tree>."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:390
#, no-wrap
msgid "<commit-ish>"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:395
msgid ""
"Indicates a commit or tag object name.  A command that takes a <commit-ish> "
"argument ultimately wants to operate on a <commit> object but automatically "
"dereferences <tag> objects that point at a <commit>."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:396
#, no-wrap
msgid "<type>"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:399
msgid ""
"Indicates that an object type is required.  Currently one of: `blob`, "
"`tree`, `commit`, or `tag`."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:400
#, no-wrap
msgid "<file>"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:403
msgid ""
"Indicates a filename - almost always relative to the root of the tree "
"structure `GIT_INDEX_FILE` describes."
msgstr ""

#. type: Title -
#: ../Documentation/git.txt:405
#, no-wrap
msgid "Symbolic Identifiers"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:408
msgid ""
"Any Git command accepting any <object> can also use the following symbolic "
"notation:"
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:409
#, no-wrap
msgid "HEAD"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:411
msgid "indicates the head of the current branch."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:412
#, no-wrap
msgid "<tag>"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:415
msgid "a valid tag 'name' (i.e. a `refs/tags/<tag>` reference)."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:416
#, no-wrap
msgid "<head>"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:419
msgid "a valid head 'name' (i.e. a `refs/heads/<head>` reference)."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:422
msgid ""
"For a more complete list of ways to spell object names, see \"SPECIFYING "
"REVISIONS\" section in linkgit:gitrevisions[7]."
msgstr ""

#. type: Title -
#: ../Documentation/git.txt:425
#, no-wrap
msgid "File/Directory Structure"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:428
msgid "Please see the linkgit:gitrepository-layout[5] document."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:430
msgid "Read linkgit:githooks[5] for more details about each hook."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:433
msgid ""
"Higher level SCMs may provide and manage additional information in the "
"`$GIT_DIR`."
msgstr ""

#. type: Title -
#: ../Documentation/git.txt:436
#, no-wrap
msgid "Terminology"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:438
msgid "Please see linkgit:gitglossary[7]."
msgstr ""

#. type: Title -
#: ../Documentation/git.txt:441
#, no-wrap
msgid "Environment Variables"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:443
msgid "Various Git commands use the following environment variables:"
msgstr ""

#. type: Title ~
#: ../Documentation/git.txt:445
#, no-wrap
msgid "The Git Repository"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:449
msgid ""
"These environment variables apply to 'all' core Git commands. Nb: it is "
"worth noting that they may be used/overridden by SCMS sitting above Git so "
"take care if using a foreign front-end."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:450
#, no-wrap
msgid "`GIT_INDEX_FILE`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:454
msgid ""
"This environment allows the specification of an alternate index file. If not "
"specified, the default of `$GIT_DIR/index` is used."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:455
#, no-wrap
msgid "`GIT_INDEX_VERSION`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:460
msgid ""
"This environment variable allows the specification of an index version for "
"new repositories.  It won't affect existing index files.  By default index "
"file version 2 or 3 is used. See linkgit:git-update-index[1] for more "
"information."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:461
#, no-wrap
msgid "`GIT_OBJECT_DIRECTORY`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:466
msgid ""
"If the object storage directory is specified via this environment variable "
"then the sha1 directories are created underneath - otherwise the default "
"`$GIT_DIR/objects` directory is used."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:467
#, no-wrap
msgid "`GIT_ALTERNATE_OBJECT_DIRECTORIES`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:473
msgid ""
"Due to the immutable nature of Git objects, old objects can be archived into "
"shared, read-only directories. This variable specifies a \":\" separated (on "
"Windows \";\" separated) list of Git object directories which can be used to "
"search for Git objects. New objects will not be written to these "
"directories."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:479
msgid ""
"Entries that begin with `\"` (double-quote) will be interpreted as C-style "
"quoted paths, removing leading and trailing double-quotes and respecting "
"backslash escapes. E.g., the value "
"`\"path-with-\\\"-and-:-in-it\":vanilla-path` has two paths: "
"`path-with-\"-and-:-in-it` and `vanilla-path`."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:480
#, no-wrap
msgid "`GIT_DIR`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:485
msgid ""
"If the `GIT_DIR` environment variable is set then it specifies a path to use "
"instead of the default `.git` for the base of the repository.  The "
"`--git-dir` command-line option also sets this value."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:486
#, no-wrap
msgid "`GIT_WORK_TREE`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:490
msgid ""
"Set the path to the root of the working tree.  This can also be controlled "
"by the `--work-tree` command-line option and the core.worktree configuration "
"variable."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:491
#, no-wrap
msgid "`GIT_NAMESPACE`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:494
msgid ""
"Set the Git namespace; see linkgit:gitnamespaces[7] for details.  The "
"`--namespace` command-line option also sets this value."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:495
#, no-wrap
msgid "`GIT_CEILING_DIRECTORIES`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:509
msgid ""
"This should be a colon-separated list of absolute paths.  If set, it is a "
"list of directories that Git should not chdir up into while looking for a "
"repository directory (useful for excluding slow-loading network "
"directories).  It will not exclude the current working directory or a "
"GIT_DIR set on the command line or in the environment.  Normally, Git has to "
"read the entries in this list and resolve any symlink that might be present "
"in order to compare them with the current directory.  However, if even this "
"access is slow, you can add an empty entry to the list to tell Git that the "
"subsequent entries are not symlinks and needn't be resolved; e.g., "
"`GIT_CEILING_DIRECTORIES=/maybe/symlink::/very/slow/non/symlink`."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:510
#, no-wrap
msgid "`GIT_DISCOVERY_ACROSS_FILESYSTEM`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:519
msgid ""
"When run in a directory that does not have \".git\" repository directory, "
"Git tries to find such a directory in the parent directories to find the top "
"of the working tree, but by default it does not cross filesystem "
"boundaries.  This environment variable can be set to true to tell Git not to "
"stop at filesystem boundaries.  Like `GIT_CEILING_DIRECTORIES`, this will "
"not affect an explicit repository directory set via `GIT_DIR` or on the "
"command line."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:520
#, no-wrap
msgid "`GIT_COMMON_DIR`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:528
msgid ""
"If this variable is set to a path, non-worktree files that are normally in "
"$GIT_DIR will be taken from this path instead. Worktree-specific files such "
"as HEAD or index are taken from $GIT_DIR. See "
"linkgit:gitrepository-layout[5] and linkgit:git-worktree[1] for "
"details. This variable has lower precedence than other path variables such "
"as GIT_INDEX_FILE, GIT_OBJECT_DIRECTORY..."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:529
#, no-wrap
msgid "`GIT_DEFAULT_HASH`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:535
msgid ""
"If this variable is set, the default hash algorithm for new repositories "
"will be set to this value. This value is currently ignored when cloning; the "
"setting of the remote repository is used instead. The default is "
"\"sha1\". THIS VARIABLE IS EXPERIMENTAL! See `--object-format` in "
"linkgit:git-init[1]."
msgstr ""

#. type: Title ~
#: ../Documentation/git.txt:537
#, no-wrap
msgid "Git Commits"
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:538
#, no-wrap
msgid "`GIT_AUTHOR_NAME`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:542
msgid ""
"The human-readable name used in the author identity when creating commit or "
"tag objects, or when writing reflogs. Overrides the `user.name` and "
"`author.name` configuration settings."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:543
#, no-wrap
msgid "`GIT_AUTHOR_EMAIL`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:547
msgid ""
"The email address used in the author identity when creating commit or tag "
"objects, or when writing reflogs. Overrides the `user.email` and "
"`author.email` configuration settings."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:548
#, no-wrap
msgid "`GIT_AUTHOR_DATE`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:551
msgid ""
"The date used for the author identity when creating commit or tag objects, "
"or when writing reflogs. See linkgit:git-commit[1] for valid formats."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:552
#, no-wrap
msgid "`GIT_COMMITTER_NAME`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:556
msgid ""
"The human-readable name used in the committer identity when creating commit "
"or tag objects, or when writing reflogs. Overrides the `user.name` and "
"`committer.name` configuration settings."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:557
#, no-wrap
msgid "`GIT_COMMITTER_EMAIL`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:561
msgid ""
"The email address used in the author identity when creating commit or tag "
"objects, or when writing reflogs. Overrides the `user.email` and "
"`committer.email` configuration settings."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:562
#, no-wrap
msgid "`GIT_COMMITTER_DATE`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:565
msgid ""
"The date used for the committer identity when creating commit or tag "
"objects, or when writing reflogs. See linkgit:git-commit[1] for valid "
"formats."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:566
#, no-wrap
msgid "`EMAIL`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:569
msgid ""
"The email address used in the author and committer identities if no other "
"relevant environment variable or configuration setting has been set."
msgstr ""

#. type: Title ~
#: ../Documentation/git.txt:571
#, no-wrap
msgid "Git Diffs"
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:572
#, no-wrap
msgid "`GIT_DIFF_OPTS`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:577
msgid ""
"Only valid setting is \"--unified=??\" or \"-u??\" to set the number of "
"context lines shown when a unified diff is created.  This takes precedence "
"over any \"-U\" or \"--unified\" option value passed on the Git diff command "
"line."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:578
#, no-wrap
msgid "`GIT_EXTERNAL_DIFF`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:584
msgid ""
"When the environment variable `GIT_EXTERNAL_DIFF` is set, the program named "
"by it is called to generate diffs, and Git does not use its builtin diff "
"machinery.  For a path that is added, removed, or modified, "
"`GIT_EXTERNAL_DIFF` is called with 7 parameters:"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:586
msgid "path old-file old-hex old-mode new-file new-hex new-mode"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:588
msgid "where:"
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:589
#, no-wrap
msgid "<old|new>-file"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:590
msgid "are files GIT_EXTERNAL_DIFF can use to read the"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:591
#, no-wrap
msgid "contents of <old|new>,\n"
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:591
#, no-wrap
msgid "<old|new>-hex"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:592
msgid "are the 40-hexdigit SHA-1 hashes,"
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:592
#, no-wrap
msgid "<old|new>-mode"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:593
msgid "are the octal representation of the file modes."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:599
msgid ""
"The file parameters can point at the user's working file (e.g. `new-file` in "
"\"git-diff-files\"), `/dev/null` (e.g. `old-file` when a new file is added), "
"or a temporary file (e.g. `old-file` in the index).  `GIT_EXTERNAL_DIFF` "
"should not worry about unlinking the temporary file --- it is removed when "
"`GIT_EXTERNAL_DIFF` exits."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:602
msgid ""
"For a path that is unmerged, `GIT_EXTERNAL_DIFF` is called with 1 parameter, "
"<path>."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:605
msgid ""
"For each path `GIT_EXTERNAL_DIFF` is called, two environment variables, "
"`GIT_DIFF_PATH_COUNTER` and `GIT_DIFF_PATH_TOTAL` are set."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:606
#, no-wrap
msgid "`GIT_DIFF_PATH_COUNTER`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:608
msgid "A 1-based counter incremented by one for every path."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:609
#, no-wrap
msgid "`GIT_DIFF_PATH_TOTAL`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:611
msgid "The total number of paths."
msgstr ""

#. type: Title ~
#: ../Documentation/git.txt:613
#, no-wrap
msgid "other"
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:614
#, no-wrap
msgid "`GIT_MERGE_VERBOSITY`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:618
msgid ""
"A number controlling the amount of output shown by the recursive merge "
"strategy.  Overrides merge.verbosity.  See linkgit:git-merge[1]"
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:619
#, no-wrap
msgid "`GIT_PAGER`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:624
msgid ""
"This environment variable overrides `$PAGER`. If it is set to an empty "
"string or to the value \"cat\", Git will not launch a pager.  See also the "
"`core.pager` option in linkgit:git-config[1]."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:625
#, no-wrap
msgid "`GIT_PROGRESS_DELAY`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:628
msgid ""
"A number controlling how many seconds to delay before showing optional "
"progress indicators. Defaults to 2."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:629
#, no-wrap
msgid "`GIT_EDITOR`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:634
msgid ""
"This environment variable overrides `$EDITOR` and `$VISUAL`.  It is used by "
"several Git commands when, on interactive mode, an editor is to be "
"launched. See also linkgit:git-var[1] and the `core.editor` option in "
"linkgit:git-config[1]."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:635
#, no-wrap
msgid "`GIT_SEQUENCE_EDITOR`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:640
msgid ""
"This environment variable overrides the configured Git editor when editing "
"the todo list of an interactive rebase. See also linkgit:git-rebase[1] and "
"the `sequence.editor` option in linkgit:git-config[1]."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:641
#, no-wrap
msgid "`GIT_SSH`"
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:642
#, no-wrap
msgid "`GIT_SSH_COMMAND`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:649
msgid ""
"If either of these environment variables is set then 'git fetch' and 'git "
"push' will use the specified command instead of 'ssh' when they need to "
"connect to a remote system.  The command-line parameters passed to the "
"configured command are determined by the ssh variant.  See `ssh.variant` "
"option in linkgit:git-config[1] for details."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:655
msgid ""
"`$GIT_SSH_COMMAND` takes precedence over `$GIT_SSH`, and is interpreted by "
"the shell, which allows additional arguments to be included.  `$GIT_SSH` on "
"the other hand must be just the path to a program (which can be a wrapper "
"shell script, if additional arguments are needed)."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:659
msgid ""
"Usually it is easier to configure any desired options through your personal "
"`.ssh/config` file.  Please consult your ssh documentation for further "
"details."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:660
#, no-wrap
msgid "`GIT_SSH_VARIANT`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:665
msgid ""
"If this environment variable is set, it overrides Git's autodetection "
"whether `GIT_SSH`/`GIT_SSH_COMMAND`/`core.sshCommand` refer to OpenSSH, "
"plink or tortoiseplink. This variable overrides the config setting "
"`ssh.variant` that serves the same purpose."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:666
#, no-wrap
msgid "`GIT_ASKPASS`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:672
msgid ""
"If this environment variable is set, then Git commands which need to acquire "
"passwords or passphrases (e.g. for HTTP or IMAP authentication)  will call "
"this program with a suitable prompt as command-line argument and read the "
"password from its STDOUT. See also the `core.askPass` option in "
"linkgit:git-config[1]."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:673
#, no-wrap
msgid "`GIT_TERMINAL_PROMPT`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:676
msgid ""
"If this environment variable is set to `0`, git will not prompt on the "
"terminal (e.g., when asking for HTTP authentication)."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:677
#, no-wrap
msgid "`GIT_CONFIG_GLOBAL`"
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:678
#, no-wrap
msgid "`GIT_CONFIG_SYSTEM`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:686
msgid ""
"Take the configuration from the given files instead from global or "
"system-level configuration files. If `GIT_CONFIG_SYSTEM` is set, the system "
"config file defined at build time (usually `/etc/gitconfig`)  will not be "
"read. Likewise, if `GIT_CONFIG_GLOBAL` is set, neither `$HOME/.gitconfig` "
"nor `$XDG_CONFIG_HOME/git/config` will be read. Can be set to `/dev/null` to "
"skip reading configuration files of the respective level."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:687
#, no-wrap
msgid "`GIT_CONFIG_NOSYSTEM`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:694
msgid ""
"Whether to skip reading settings from the system-wide "
"`$(prefix)/etc/gitconfig` file.  This environment variable can be used along "
"with `$HOME` and `$XDG_CONFIG_HOME` to create a predictable environment for "
"a picky script, or you can set it temporarily to avoid using a buggy "
"`/etc/gitconfig` file while waiting for someone with sufficient permissions "
"to fix it."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:695
#, no-wrap
msgid "`GIT_FLUSH`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:705
#, no-wrap
msgid ""
"If this environment variable is set to \"1\", then commands such\n"
"as 'git blame' (in incremental mode), 'git rev-list', 'git log',\n"
"'git check-attr' and 'git check-ignore' will\n"
"force a flush of the output stream after each record have been\n"
"flushed. If this\n"
"variable is set to \"0\", the output of these commands will be done\n"
"using completely buffered I/O.   If this environment variable is\n"
"not set, Git will choose buffered or record-oriented flushing\n"
"based on whether stdout appears to be redirected to a file or not.\n"
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:706
#, no-wrap
msgid "`GIT_TRACE`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:709
msgid ""
"Enables general trace messages, e.g. alias expansion, built-in command "
"execution and external command execution."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:713 ../Documentation/git.txt:793
msgid ""
"If this variable is set to \"1\", \"2\" or \"true\" (comparison is case "
"insensitive), trace messages will be printed to stderr."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:718 ../Documentation/git.txt:798
msgid ""
"If the variable is set to an integer value greater than 2 and lower than 10 "
"(strictly) then Git will interpret this value as an open file descriptor and "
"will try to write the trace messages into this file descriptor."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:723
msgid ""
"Alternatively, if the variable is set to an absolute path (starting with a "
"'/' character), Git will interpret this as a file path and will try to "
"append the trace messages to it."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:726 ../Documentation/git.txt:815
msgid ""
"Unsetting the variable, or setting it to empty, \"0\" or \"false\" (case "
"insensitive) disables trace messages."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:727
#, no-wrap
msgid "`GIT_TRACE_FSMONITOR`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:730
msgid ""
"Enables trace messages for the filesystem monitor extension.  See "
"`GIT_TRACE` for available trace output options."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:731
#, no-wrap
msgid "`GIT_TRACE_PACK_ACCESS`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:737
msgid ""
"Enables trace messages for all accesses to any packs. For each access, the "
"pack file name and an offset in the pack is recorded. This may be helpful "
"for troubleshooting some pack-related performance problems.  See `GIT_TRACE` "
"for available trace output options."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:738
#, no-wrap
msgid "`GIT_TRACE_PACKET`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:744
msgid ""
"Enables trace messages for all packets coming in or out of a given "
"program. This can help with debugging object negotiation or other protocol "
"issues. Tracing is turned off at a packet starting with \"PACK\" (but see "
"`GIT_TRACE_PACKFILE` below).  See `GIT_TRACE` for available trace output "
"options."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:745
#, no-wrap
msgid "`GIT_TRACE_PACKFILE`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:752
msgid ""
"Enables tracing of packfiles sent or received by a given program. Unlike "
"other trace output, this trace is verbatim: no headers, and no quoting of "
"binary data. You almost certainly want to direct into a file (e.g., "
"`GIT_TRACE_PACKFILE=/tmp/my.pack`) rather than displaying it on the terminal "
"or mixing it with other trace output."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:755
msgid ""
"Note that this is currently only implemented for the client side of clones "
"and fetches."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:756
#, no-wrap
msgid "`GIT_TRACE_PERFORMANCE`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:760
msgid ""
"Enables performance related trace messages, e.g. total execution time of "
"each Git command.  See `GIT_TRACE` for available trace output options."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:761
#, no-wrap
msgid "`GIT_TRACE_REFS`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:764
msgid ""
"Enables trace messages for operations on the ref database.  See `GIT_TRACE` "
"for available trace output options."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:765
#, no-wrap
msgid "`GIT_TRACE_SETUP`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:769
msgid ""
"Enables trace messages printing the .git, working tree and current working "
"directory after Git has completed its setup phase.  See `GIT_TRACE` for "
"available trace output options."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:770
#, no-wrap
msgid "`GIT_TRACE_SHALLOW`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:774
msgid ""
"Enables trace messages that can help debugging fetching / cloning of shallow "
"repositories.  See `GIT_TRACE` for available trace output options."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:775
#, no-wrap
msgid "`GIT_TRACE_CURL`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:780
msgid ""
"Enables a curl full trace dump of all incoming and outgoing data, including "
"descriptive information, of the git transport protocol.  This is similar to "
"doing curl `--trace-ascii` on the command line.  See `GIT_TRACE` for "
"available trace output options."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:781
#, no-wrap
msgid "`GIT_TRACE_CURL_NO_DATA`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:784
msgid ""
"When a curl trace is enabled (see `GIT_TRACE_CURL` above), do not dump data "
"(that is, only dump info lines and headers)."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:785
#, no-wrap
msgid "`GIT_TRACE2`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:789
msgid ""
"Enables more detailed trace messages from the \"trace2\" library.  Output "
"from `GIT_TRACE2` is a simple text-based format for human readability."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:807
msgid ""
"Alternatively, if the variable is set to an absolute path (starting with a "
"'/' character), Git will interpret this as a file path and will try to "
"append the trace messages to it.  If the path already exists and is a "
"directory, the trace messages will be written to files (one per process)  in "
"that directory, named according to the last component of the SID and an "
"optional counter (to avoid filename collisions)."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:812
msgid ""
"In addition, if the variable is set to "
"`af_unix:[<socket_type>:]<absolute-pathname>`, Git will try to open the path "
"as a Unix Domain Socket.  The socket type can be either `stream` or `dgram`."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:818
msgid "See link:technical/api-trace2.html[Trace2 documentation] for full details."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:820
#, no-wrap
msgid "`GIT_TRACE2_EVENT`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:825
msgid ""
"This setting writes a JSON-based format that is suited for machine "
"interpretation.  See `GIT_TRACE2` for available trace output options and "
"link:technical/api-trace2.html[Trace2 documentation] for full details."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:826
#, no-wrap
msgid "`GIT_TRACE2_PERF`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:832
msgid ""
"In addition to the text-based messages available in `GIT_TRACE2`, this "
"setting writes a column-based format for understanding nesting regions.  See "
"`GIT_TRACE2` for available trace output options and "
"link:technical/api-trace2.html[Trace2 documentation] for full details."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:833
#, no-wrap
msgid "`GIT_TRACE_REDACT`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:837
msgid ""
"By default, when tracing is activated, Git redacts the values of cookies, "
"the \"Authorization:\" header, and the \"Proxy-Authorization:\" header. Set "
"this variable to `0` to prevent this redaction."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:838
#, no-wrap
msgid "`GIT_LITERAL_PATHSPECS`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:846
msgid ""
"Setting this variable to `1` will cause Git to treat all pathspecs "
"literally, rather than as glob patterns. For example, running "
"`GIT_LITERAL_PATHSPECS=1 git log -- '*.c'` will search for commits that "
"touch the path `*.c`, not any paths that the glob `*.c` matches. You might "
"want this if you are feeding literal paths to Git (e.g., paths previously "
"given to you by `git ls-tree`, `--raw` diff output, etc)."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:847
#, no-wrap
msgid "`GIT_GLOB_PATHSPECS`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:850
msgid ""
"Setting this variable to `1` will cause Git to treat all pathspecs as glob "
"patterns (aka \"glob\" magic)."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:851
#, no-wrap
msgid "`GIT_NOGLOB_PATHSPECS`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:854
msgid ""
"Setting this variable to `1` will cause Git to treat all pathspecs as "
"literal (aka \"literal\" magic)."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:855
#, no-wrap
msgid "`GIT_ICASE_PATHSPECS`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:858
msgid ""
"Setting this variable to `1` will cause Git to treat all pathspecs as "
"case-insensitive."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:859
#, no-wrap
msgid "`GIT_REFLOG_ACTION`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:868
msgid ""
"When a ref is updated, reflog entries are created to keep track of the "
"reason why the ref was updated (which is typically the name of the "
"high-level command that updated the ref), in addition to the old and new "
"values of the ref.  A scripted Porcelain command can use set_reflog_action "
"helper function in `git-sh-setup` to set its name to this variable when it "
"is invoked as the top level command by the end user, to be recorded in the "
"body of the reflog."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:869
#, no-wrap
msgid "`GIT_REF_PARANOIA`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:879
msgid ""
"If set to `1`, include broken or badly named refs when iterating over lists "
"of refs. In a normal, non-corrupted repository, this does nothing. However, "
"enabling it may help git to detect and abort some operations in the presence "
"of broken refs. Git sets this variable automatically when performing "
"destructive operations like linkgit:git-prune[1]. You should not need to set "
"it yourself unless you want to be paranoid about making sure an operation "
"has touched every ref (e.g., because you are cloning a repository to make a "
"backup)."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:880
#, no-wrap
msgid "`GIT_ALLOW_PROTOCOL`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:888
msgid ""
"If set to a colon-separated list of protocols, behave as if `protocol.allow` "
"is set to `never`, and each of the listed protocols has "
"`protocol.<name>.allow` set to `always` (overriding any existing "
"configuration). In other words, any protocol not mentioned will be "
"disallowed (i.e., this is a whitelist, not a blacklist). See the description "
"of `protocol.allow` in linkgit:git-config[1] for more details."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:889
#, no-wrap
msgid "`GIT_PROTOCOL_FROM_USER`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:895
msgid ""
"Set to 0 to prevent protocols used by fetch/push/clone which are configured "
"to the `user` state.  This is useful to restrict recursive submodule "
"initialization from an untrusted repository or for programs which feed "
"potentially-untrusted URLS to git commands.  See linkgit:git-config[1] for "
"more details."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:896
#, no-wrap
msgid "`GIT_PROTOCOL`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:901
msgid ""
"For internal use only.  Used in handshaking the wire protocol.  Contains a "
"colon ':' separated list of keys with optional values 'key[=value]'.  "
"Presence of unknown keys and values must be ignored."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:910
msgid ""
"Note that servers may need to be configured to allow this variable to pass "
"over some transports. It will be propagated automatically when accessing "
"local repositories (i.e., `file://` or a filesystem path), as well as over "
"the `git://` protocol. For git-over-http, it should work automatically in "
"most configurations, but see the discussion in "
"linkgit:git-http-backend[1]. For git-over-ssh, the ssh server may need to be "
"configured to allow clients to pass this variable (e.g., by using `AcceptEnv "
"GIT_PROTOCOL` with OpenSSH)."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:916
msgid ""
"This configuration is optional. If the variable is not propagated, then "
"clients will fall back to the original \"v0\" protocol (but may miss out on "
"some performance improvements or features). This variable currently only "
"affects clones and fetches; it is not yet used for pushes (but may be in the "
"future)."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:917
#, no-wrap
msgid "`GIT_OPTIONAL_LOCKS`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:924
msgid ""
"If set to `0`, Git will complete any requested operation without performing "
"any optional sub-operations that require taking a lock.  For example, this "
"will prevent `git status` from refreshing the index as a side effect. This "
"is useful for processes running in the background which do not want to cause "
"lock contention with other operations on the repository.  Defaults to `1`."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:925
#, no-wrap
msgid "`GIT_REDIRECT_STDIN`"
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:926
#, no-wrap
msgid "`GIT_REDIRECT_STDOUT`"
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:927
#, no-wrap
msgid "`GIT_REDIRECT_STDERR`"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:937
msgid ""
"Windows-only: allow redirecting the standard input/output/error handles to "
"paths specified by the environment variables. This is particularly useful in "
"multi-threaded applications where the canonical way to pass standard handles "
"via `CreateProcess()` is not an option because it would require the handles "
"to be marked inheritable (and consequently *every* spawned process would "
"inherit them, possibly blocking regular Git operations). The primary "
"intended use case is to use named pipes for communication "
"(e.g. `\\\\.\\pipe\\my-git-stdin-123`)."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:942
msgid ""
"Two special values are supported: `off` will simply close the corresponding "
"standard handle, and if `GIT_REDIRECT_STDERR` is `2>&1`, standard error will "
"be redirected to the same handle as standard output."
msgstr ""

#. type: Labeled list
#: ../Documentation/git.txt:943
#, no-wrap
msgid "`GIT_PRINT_SHA1_ELLIPSIS` (deprecated)"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:951
msgid ""
"If set to `yes`, print an ellipsis following an (abbreviated) SHA-1 value.  "
"This affects indications of detached HEADs (linkgit:git-checkout[1]) and the "
"raw diff output (linkgit:git-diff[1]).  Printing an ellipsis in the cases "
"mentioned is no longer considered adequate and support for it is likely to "
"be removed in the foreseeable future (along with the variable)."
msgstr ""

#. type: Title -
#: ../Documentation/git.txt:953
#, no-wrap
msgid "Discussion[[Discussion]]"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:958
msgid ""
"More detail on the following is available from the "
"link:user-manual.html#git-concepts[Git concepts chapter of the user-manual] "
"and linkgit:gitcore-tutorial[7]."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:965
msgid ""
"A Git project normally consists of a working directory with a \".git\" "
"subdirectory at the top level.  The .git directory contains, among other "
"things, a compressed object database representing the complete history of "
"the project, an \"index\" file which links that history to the current "
"contents of the working tree, and named pointers into that history such as "
"tags and branch heads."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:970
msgid ""
"The object database contains objects of three main types: blobs, which hold "
"file data; trees, which point to blobs and other trees to build up directory "
"hierarchies; and commits, which each reference a single tree and some number "
"of parent commits."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:975
msgid ""
"The commit, equivalent to what other systems call a \"changeset\" or "
"\"version\", represents a step in the project's history, and each parent "
"represents an immediately preceding step.  Commits with more than one parent "
"represent merges of independent lines of development."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:981
msgid ""
"All objects are named by the SHA-1 hash of their contents, normally written "
"as a string of 40 hex digits.  Such names are globally unique.  The entire "
"history leading up to a commit can be vouched for by signing just that "
"commit.  A fourth object type, the tag, is provided for this purpose."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:984
msgid ""
"When first created, objects are stored in individual files, but for "
"efficiency may later be compressed together into \"pack files\"."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:991
msgid ""
"Named pointers called refs mark interesting points in history.  A ref may "
"contain the SHA-1 name of an object or the name of another ref.  Refs with "
"names beginning `ref/head/` contain the SHA-1 name of the most recent commit "
"(or \"head\") of a branch under development.  SHA-1 names of tags of "
"interest are stored under `ref/tags/`.  A special ref named `HEAD` contains "
"the name of the currently checked-out branch."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:1000
msgid ""
"The index file is initialized with a list of all paths and, for each path, a "
"blob object and a set of attributes.  The blob object represents the "
"contents of the file as of the head of the current branch.  The attributes "
"(last modified time, size, etc.) are taken from the corresponding file in "
"the working tree.  Subsequent changes to the working tree can be found by "
"comparing these attributes.  The index may be updated with new content, and "
"new commits may be created from the content stored in the index."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:1004
msgid ""
"The index is also capable of storing multiple entries (called \"stages\")  "
"for a given pathname.  These stages are used to hold the various unmerged "
"version of a file when a merge is in progress."
msgstr ""

#. type: Title -
#: ../Documentation/git.txt:1006
#, no-wrap
msgid "FURTHER DOCUMENTATION"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:1011
msgid ""
"See the references in the \"description\" section to get started using Git.  "
"The following is probably more detail than necessary for a first-time user."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:1015
msgid ""
"The link:user-manual.html#git-concepts[Git concepts chapter of the "
"user-manual] and linkgit:gitcore-tutorial[7] both provide introductions to "
"the underlying Git architecture."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:1017
msgid "See linkgit:gitworkflows[7] for an overview of recommended workflows."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:1020
msgid ""
"See also the link:howto-index.html[howto] documents for some useful "
"examples."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:1023
msgid ""
"The internals are documented in the link:technical/api-index.html[Git API "
"documentation]."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:1026
msgid "Users migrating from CVS may also want to read linkgit:gitcvs-migration[7]."
msgstr ""

#. type: Title -
#: ../Documentation/git.txt:1029
#, no-wrap
msgid "Authors"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:1034
msgid ""
"Git was started by Linus Torvalds, and is currently maintained by Junio C "
"Hamano. Numerous contributions have come from the Git mailing list "
"<git@vger.kernel.org>.  http://www.openhub.net/p/git/contributors/summary "
"gives you a more complete list of contributors."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:1038
msgid ""
"If you have a clone of git.git itself, the output of linkgit:git-shortlog[1] "
"and linkgit:git-blame[1] can show you the authors for specific parts of the "
"project."
msgstr ""

#. type: Title -
#: ../Documentation/git.txt:1040
#, no-wrap
msgid "Reporting Bugs"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:1047
msgid ""
"Report bugs to the Git mailing list <git@vger.kernel.org> where the "
"development and maintenance is primarily done.  You do not have to be "
"subscribed to the list to send a message there.  See the list archive at "
"https://lore.kernel.org/git for previous bug reports and other discussions."
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:1050
msgid ""
"Issues which are security relevant should be disclosed privately to the Git "
"Security mailing list <git-security@googlegroups.com>."
msgstr ""

#. type: Title -
#: ../Documentation/git.txt:1052
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:1058
msgid ""
"linkgit:gittutorial[7], linkgit:gittutorial-2[7], linkgit:giteveryday[7], "
"linkgit:gitcvs-migration[7], linkgit:gitglossary[7], "
"linkgit:gitcore-tutorial[7], linkgit:gitcli[7], link:user-manual.html[The "
"Git User's Manual], linkgit:gitworkflows[7]"
msgstr ""

#. type: Title -
#: ../Documentation/git.txt:1060
#, no-wrap
msgid "GIT"
msgstr ""

#. type: Plain text
#: ../Documentation/git.txt:1061
msgid "Part of the linkgit:git[1] suite"
msgstr ""
