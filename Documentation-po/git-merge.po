# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 3.0\n"
"POT-Creation-Date: 2023-07-18 11:05+0900\n"
"PO-Revision-Date: 2024-01-10 07:58+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/git-merge.txt:2
#, no-wrap
msgid "git-merge(1)"
msgstr "git-merge(1)"

#. type: Title -
#: ../Documentation-sedout/git-merge.txt:5
#, no-wrap
msgid "NAME"
msgstr "NAME"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:7
msgid "git-merge - Join two or more development histories together"
msgstr "git-merge - 2つまたはそれ以上の開発履歴を結合します"

#. type: Title -
#: ../Documentation-sedout/git-merge.txt:10
#, no-wrap
msgid "SYNOPSIS"
msgstr "SYNOPSIS"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:18
#, no-wrap
msgid ""
"'git merge' [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]\n"
"\t[--no-verify] [-s <strategy>] [-X <strategy-option>] [-S[<keyid>]]\n"
"\t[--[no-]allow-unrelated-histories]\n"
"\t[--[no-]rerere-autoupdate] [-m <msg>] [-F <file>]\n"
"\t[--into-name <branch>] [<commit>...]\n"
"'git merge' (--continue | --abort | --quit)\n"
msgstr ""
"'git merge' [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]\n"
"\t[--no-verify] [-s <strategy>] [-X <strategy-option>] [-S[<keyid>]]\n"
"\t[--[no-]allow-unrelated-histories]\n"
"\t[--[no-]rerere-autoupdate] [-m <msg>] [-F <file>]\n"
"\t[--into-name <branch>] [<commit>...]\n"
"'git merge' (--continue | --abort | --quit)\n"

#. type: Title -
#: ../Documentation-sedout/git-merge.txt:20
#, no-wrap
msgid "DESCRIPTION"
msgstr "DESCRIPTION"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:26
msgid ""
"Incorporates changes from the named commits (since the time their histories "
"diverged from the current branch) into the current branch.  This command is "
"used by 'git pull' to incorporate changes from another repository and can be "
"used by hand to merge changes from one branch into another."
msgstr ""
"名前付きのコミット(その履歴が現在のブランチから分岐した時点以降のもの)からの"
"変更を現在のブランチに取り込みます。 このコマンドは、別のリポジトリからの変更"
"を組み込むために `git pull` によって使用され、そして、あるブランチから別のブ"
"ランチに変更をマージするために手動で使用できます。"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:29
msgid ""
"Assume the following history exists and the current branch is \"`master`\":"
msgstr "以下の履歴が存在し、現在のブランチが `master` であるとします:"

#. type: delimited block -
#: ../Documentation-sedout/git-merge.txt:34
#, no-wrap
msgid ""
"\t  A---B---C topic\n"
"\t /\n"
"    D---E---F---G master\n"
msgstr ""
"\t  A---B---C topic\n"
"\t /\n"
"    D---E---F---G master\n"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:42
msgid ""
"Then \"`git merge topic`\" will replay the changes made on the `topic` "
"branch since it diverged from `master` (i.e., `E`) until its current commit "
"(`C`) on top of `master`, and record the result in a new commit along with "
"the names of the two parent commits and a log message from the user "
"describing the changes. Before the operation, `ORIG_HEAD` is set to the tip "
"of the current branch (`C`)."
msgstr "次に、 `git merge topic` は、 `master` から分岐(ここでは `E`)してから、 `topic` ブランチの現在のコミット(`C`)まで `topic`ブランチに加えられた変更を `master` 上で再生(replay)します。 その結果を、 2つの親コミットの名前と、 変更を説明するユーザーからのログメッセージとともに、 新しいコミットに記録します。 操作前に `ORIG_HEAD` が現在のブランチの先端(`C`)に設定されます。"

#. type: delimited block -
#: ../Documentation-sedout/git-merge.txt:47
#, no-wrap
msgid ""
"\t  A---B---C topic\n"
"\t /         \\\n"
"    D---E---F---G---H master\n"
msgstr ""
"\t  A---B---C topic\n"
"\t /         \\\n"
"    D---E---F---G---H master\n"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:56
msgid ""
"The second syntax (\"`git merge --abort`\") can only be run after the merge "
"has resulted in conflicts. 'git merge --abort' will abort the merge process "
"and try to reconstruct the pre-merge state. However, if there were "
"uncommitted changes when the merge started (and especially if those changes "
"were further modified after the merge was started), 'git merge --abort' will "
"in some cases be unable to reconstruct the original (pre-merge) changes. "
"Therefore:"
msgstr ""
"2番目の構文(`git merge --abort`)は、マージによって競合が発生した後にのみ実行"
"できます。 `git merge --abort`はマージ処理を中止し、マージ前の状態を再構築し"
"ようとします。 ただし、マージの開始時にコミットされていない変更があった場合"
"(特に、マージの開始後にそれらの変更がさらに変更された場合)、 `git merge --"
"abort` は、元の(マージ前の)変更を再構築できない場合があります。つまり以下の事"
"が言えます:"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:60
#, no-wrap
msgid ""
"*Warning*: Running 'git merge' with non-trivial uncommitted changes is\n"
"discouraged: while possible, it may leave you in a state that is hard to\n"
"back out of in the case of a conflict.\n"
msgstr ""
"WARNING: 自明でない未コミットの変更に対して `git merge` を実行することは推奨されません。\n"
"可能ではありますが、\n"
"競合が発生した場合に元に戻すのが難しい状態になる可能性があります。\n"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:63
msgid ""
"The third syntax (\"`git merge --continue`\") can only be run after the "
"merge has resulted in conflicts."
msgstr ""
"3番目の構文(`git merge --continue`)は、マージによって競合が発生した後にのみ実"
"行できます。"

#. type: Title -
#: ../Documentation-sedout/git-merge.txt:65
#, no-wrap
msgid "OPTIONS"
msgstr "OPTIONS"

#. type: Labeled list
#: ../Documentation-sedout/git-merge.txt:70
#, no-wrap
msgid "`-m <msg>`"
msgstr "`-m <msg>`"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:73
msgid ""
"Set the commit message to be used for the merge commit (in case one is "
"created)."
msgstr ""
"マージコミットに使用するコミットメッセージを設定します(マージコミットが作成さ"
"れた場合)。"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:76
#: ../Documentation-sedout/git-merge.txt:93
msgid ""
"If `--log` is specified, a shortlog of the commits being merged will be "
"appended to the specified message."
msgstr ""
"`--log` が指定されている場合、マージされるコミットのショートログが与えられた"
"メッセージに追加されます。"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:80
msgid ""
"The 'git fmt-merge-msg' command can be used to give a good default for "
"automated 'git merge' invocations. The automated message can include the "
"branch description."
msgstr ""
"`git fmt-merge-msg` コマンドを使用して、自動化された `git merge` 呼び出しに適"
"切なデフォルトを与えることができます。 自動メッセージには、ブランチの説明を含"
"めることができます。"

#. type: Labeled list
#: ../Documentation-sedout/git-merge.txt:81
#, no-wrap
msgid "`--into-name <branch>`"
msgstr "`--into-name <branch>`"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:85
msgid ""
"Prepare the default merge message as if merging to the branch `<branch>`, "
"instead of the name of the real branch to which the merge is made."
msgstr ""
"マージ先の実際のブランチの名前ではなく、ブランチ `<branch>` にマージするかの"
"ように、デフォルトのマージ・メッセージを準備します。"

#. type: Labeled list
#: ../Documentation-sedout/git-merge.txt:86
#, no-wrap
msgid "`-F <file>`"
msgstr "`-F <file>`"

#. type: Labeled list
#: ../Documentation-sedout/git-merge.txt:87
#, no-wrap
msgid "`--file=<file>`"
msgstr "`--file=<file>`"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:90
msgid ""
"Read the commit message to be used for the merge commit (in case one is "
"created)."
msgstr ""
"マージコミットに使用されるコミットメッセージを読み取ります(マージコミットが作"
"成された場合)。"

#. type: Labeled list
#: ../Documentation-sedout/git-merge.txt:96
#, no-wrap
msgid "`--overwrite-ignore`"
msgstr "`--overwrite-ignore`"

#. type: Labeled list
#: ../Documentation-sedout/git-merge.txt:97
#, no-wrap
msgid "`--no-overwrite-ignore`"
msgstr "`--no-overwrite-ignore`"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:100
msgid ""
"Silently overwrite ignored files from the merge result. This is the default "
"behavior. Use `--no-overwrite-ignore` to abort."
msgstr ""
"マージ結果から無視されたファイルを黙って上書きします。 これがデフォルトの動作"
"です。 中止(abort)するには、 `--no-overwrite-ignore` を使用します。"

#. type: Labeled list
#: ../Documentation-sedout/git-merge.txt:101
#, no-wrap
msgid "`--abort`"
msgstr "`--abort`"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:105
msgid ""
"Abort the current conflict resolution process, and try to reconstruct the "
"pre-merge state. If an autostash entry is present, apply it to the worktree."
msgstr ""
"現在の競合解決プロセスを中止(abort)し、マージ前の状態を再構築してみてくださ"
"い。 自動スタッシュエントリが存在する場合は、それをワークツリーに適用します。"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:110
msgid ""
"If there were uncommitted worktree changes present when the merge started, "
"'git merge --abort' will in some cases be unable to reconstruct these "
"changes. It is therefore recommended to always commit or stash your changes "
"before running 'git merge'."
msgstr ""
"マージの開始時にコミットされていないワークツリーの変更が存在した場合、 `git "
"merge --abort` は、これらの変更を再構築できない場合があります。 したがって、 "
"`git merge` を実行する前に、常にあなたの変更をコミット、またはスタッシュして"
"おくことをお勧めします。"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:116
msgid ""
"'git merge --abort' is equivalent to 'git reset --merge' when `MERGE_HEAD` "
"is present unless `MERGE_AUTOSTASH` is also present in which case 'git merge "
"--abort' applies the stash entry to the worktree whereas 'git reset --merge' "
"will save the stashed changes in the stash list."
msgstr ""
"`git merge --abort` は、 `MERGE_HEAD` がある場合は `git reset --merge` と同じ"
"です。ただし `MERGE_AUTOSTASH` もある場合は `git merge --abort` はスタッシュ"
"エントリをワークツリーに適用しますが、 `git reset --merge` は スタッシュリス"
"トにスタッシュした変更を保持したままにします。"

#. type: Labeled list
#: ../Documentation-sedout/git-merge.txt:117
#, no-wrap
msgid "`--quit`"
msgstr "`--quit`"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:121
msgid ""
"Forget about the current merge in progress. Leave the index and the working "
"tree as-is. If `MERGE_AUTOSTASH` is present, the stash entry will be saved "
"to the stash list."
msgstr ""
"進行中の現在のマージを忘れさせます。 インデックスと作業ツリーはそのままにして"
"おきます。 `MERGE_AUTOSTASH` が存在する場合、スタッシュエントリはスタッシュリ"
"ストに保存されます。"

#. type: Labeled list
#: ../Documentation-sedout/git-merge.txt:122
#, no-wrap
msgid "`--continue`"
msgstr "`--continue`"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:126
msgid ""
"After a 'git merge' stops due to conflicts you can conclude the merge by "
"running 'git merge --continue' (see \"HOW TO RESOLVE CONFLICTS\" section "
"below)."
msgstr ""
"競合が原因で `git merge` が停止(stop)した後で、 `git merge --continue` を実行"
"してマージを終了できます(下記「HOW TO RESOLVE CONFLICTS」セクション参照)。"

#. type: Labeled list
#: ../Documentation-sedout/git-merge.txt:127
#, no-wrap
msgid "<commit>..."
msgstr "<commit>..."

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:131
msgid ""
"Commits, usually other branch heads, to merge into our branch.  Specifying "
"more than one commit will create a merge with more than two parents "
"(affectionately called an Octopus merge)."
msgstr ""
"私たちのブランチにマージするコミットです。通常は他のブランチヘッドです。 複数"
"のコミットを指定すると、3つ以上の親とのマージが作成されます(Octopusマージとい"
"う愛称で親しまれています)。"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:135
msgid ""
"If no commit is given from the command line, merge the remote-tracking "
"branches that the current branch is configured to use as its upstream.  See "
"also the configuration section of this manual page."
msgstr ""
"コマンドラインからコミットが指定されていない場合は、現在のブランチがアップス"
"トリームとして使用するように構成されているリモート追跡ブランチをマージしま"
"す。 このマニュアルページの構成(configuration)セクションも参照してください。"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:139
msgid ""
"When `FETCH_HEAD` (and no other commit) is specified, the branches recorded "
"in the `.git/FETCH_HEAD` file by the previous invocation of `git fetch` for "
"merging are merged to the current branch."
msgstr ""
"FETCH_HEAD` が指定された場合(他のコミットは指定しない場合)、直前の `git "
"fetch` によるマージによって `.git/FETCH_HEAD` ファイルに記録されたブランチ"
"は、現在のブランチにマージされます。"

#. type: Title -
#: ../Documentation-sedout/git-merge.txt:142
#, no-wrap
msgid "PRE-MERGE CHECKS"
msgstr "PRE-MERGE CHECKS"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:150
msgid ""
"Before applying outside changes, you should get your own work in good shape "
"and committed locally, so it will not be clobbered if there are conflicts.  "
"See also linkgit:git-stash[1].  'git pull' and 'git merge' will stop without "
"doing anything when local uncommitted changes overlap with files that 'git "
"pull'/'git merge' may need to update."
msgstr ""
"外部の変更を適用する前に、自分の作業を良好な状態にしてローカルでコミットしと"
"く必要があります。これにより、競合が発生した場合に作業が中断されることはなく"
"なります。 linkgit:git-stash[1] も参照してください。 `git pull`/`git merge` "
"は、ローカルのコミットされていない変更が `git pull`/`git merge` の更新が必要"
"なファイルと重複する場合、何もせずに停止(stop)します。"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:156
msgid ""
"To avoid recording unrelated changes in the merge commit, 'git pull' and "
"'git merge' will also abort if there are any changes registered in the index "
"relative to the `HEAD` commit.  (Special narrow exceptions to this rule may "
"exist depending on which merge strategy is in use, but generally, the index "
"must match HEAD.)"
msgstr ""
"マージコミットに無関係な変更が記録されないようにするために、 `HEAD` コミット"
"に関連する変更がインデックスに登録されている場合、 `git pull` と `git merge` "
"も中止(abort)されます。 (使用されているマージ戦略によっては、このルールに対す"
"る特別な狭い例外が存在する場合がありますが、通常、インデックスはHEADと一致す"
"る必要があります。)"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:159
msgid ""
"If all named commits are already ancestors of `HEAD`, 'git merge' will exit "
"early with the message \"Already up to date.\""
msgstr ""
"すべての名前付きコミットがすでに `HEAD` の祖先である場合、`git merge` は "
"\"Already up to date.\" (既に最新です)というメッセージで早期に終了(exit)しま"
"す。"

#. type: Title -
#: ../Documentation-sedout/git-merge.txt:161
#, no-wrap
msgid "FAST-FORWARD MERGE"
msgstr "FAST-FORWARD MERGE"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:171
msgid ""
"Often the current branch head is an ancestor of the named commit.  This is "
"the most common case especially when invoked from 'git pull': you are "
"tracking an upstream repository, you have committed no local changes, and "
"now you want to update to a newer upstream revision.  In this case, a new "
"commit is not needed to store the combined history; instead, the `HEAD` "
"(along with the index) is updated to point at the named commit, without "
"creating an extra merge commit."
msgstr ""
"多くの場合、現在のブランチヘッドは、指定のコミットの祖先です。 これは、特に "
"`git pull` から呼び出された場合に最も一般的なケースです: 例えば、あなたはアッ"
"プストリームリポジトリを追跡していて、ローカルの変更をコミットしていないの"
"で、新しいアップストリームリビジョンに更新する必要があります。 この場合、結合"
"された履歴を保存するために新しいコミットは必要ありませんが、代わりに、"
"「HEAD」（およびインデックス）は、追加のマージコミットを作成せずに、指定のコ"
"ミットを指すように更新されます。"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:173
msgid "This behavior can be suppressed with the `--no-ff` option."
msgstr "この振る舞いは、`--no-ff` オプションで抑制できます。"

#. type: Title -
#: ../Documentation-sedout/git-merge.txt:175
#, no-wrap
msgid "TRUE MERGE"
msgstr "TRUE MERGE"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:180
msgid ""
"Except in a fast-forward merge (see above), the branches to be merged must "
"be tied together by a merge commit that has both of them as its parents."
msgstr ""
"早送りマージ(fast-forward merge)(上記参照)を除いて、マージされるブランチは、"
"両方を親として持つマージコミットによって結合する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:185
msgid ""
"A merged version reconciling the changes from all branches to be merged is "
"committed, and your `HEAD`, index, and working tree are updated to it.  It "
"is possible to have modifications in the working tree as long as they do not "
"overlap; the update will preserve them."
msgstr ""
"マージされるすべてのブランチの変更を調整したマージバージョンがコミットされ、"
"`HEAD`、インデックス、作業ツリーがそのコミットに更新されます。 作業ツリーに"
"は、重ならない限りは変更を加えることができます。"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:188
msgid ""
"When it is not obvious how to reconcile the changes, the following happens:"
msgstr "変更を調停する方法が明確でない場合、以下のようになります:"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:190
msgid "The `HEAD` pointer stays the same."
msgstr "`HEAD` ポインタは同一のままです。"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:191
msgid "The `MERGE_HEAD` ref is set to point to the other branch head."
msgstr ""
"`MERGE_HEAD` ref は、他方のブランチヘッド(the other branch head)を指すように"
"設定されています。"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:193
msgid ""
"Paths that merged cleanly are updated both in the index file and in your "
"working tree."
msgstr ""
"正常にマージされたパスは、インデックスファイルとあなたの作業ツリーの両方で更"
"新されます。"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:199
msgid ""
"For conflicting paths, the index file records up to three versions: stage 1 "
"stores the version from the common ancestor, stage 2 from `HEAD`, and stage "
"3 from `MERGE_HEAD` (you can inspect the stages with `git ls-files -u`).  "
"The working tree files contain the result of the merge operation; i.e. 3-way "
"merge results with familiar conflict markers `<<<` `===` `>>>`."
msgstr "競合するパスの場合、インデックスファイルには最大3つのバージョンが記録されます:  ステージ1は、共通の祖先からのバージョンを格納し、ステージ2 は `HEAD` からのバージョン、 ステージ3 は `MERGE_HEAD` からのバージョンです(あなたは `git ls-files -u` でステージを検査できます)。 作業ツリーファイルにはマージ操作の結果が含まれています。 つまり、おなじみの競合マーカー `<<<` `===` `>>>` を使用した3方向マージの結果です。"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:203
msgid ""
"A special ref `AUTO_MERGE` is written, pointing to a tree corresponding to "
"the current content of the working tree (including conflict markers for "
"textual conflicts).  Note that this ref is only written when the 'ort' merge "
"strategy is used (the default)."
msgstr "特別なref `AUTO_MERGE` が書き込まれ、 作業ツリーの現在の内容に対応するツリーを指します(テキストの競合のための競合マーカーを含む)。 この ref は、 `ort` マージ戦略が使用される(これがデフォルトです)場合にのみ書き込まれることに注意してください。"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:207
msgid ""
"No other changes are made.  In particular, the local modifications you had "
"before you started merge will stay the same and the index entries for them "
"stay as they were, i.e. matching `HEAD`."
msgstr ""
"その他の変更は行われません。 特に、マージを開始する前に行ったローカルの変更は"
"同じままであり、それらのインデックスエントリはそのまま、つまり「HEAD」と一致"
"します。"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:210
msgid ""
"If you tried a merge which resulted in complex conflicts and want to start "
"over, you can recover with `git merge --abort`."
msgstr ""
"試しにマージした結果、複雑な競合が発生してしまったのでやり直したいという場合"
"は、 `git merge --abort` で回復(recover)することができます。"

#. type: Title -
#: ../Documentation-sedout/git-merge.txt:212
#, no-wrap
msgid "MERGING TAG"
msgstr "MERGING TAG"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:219
msgid ""
"When merging an annotated (and possibly signed) tag, Git always creates a "
"merge commit even if a fast-forward merge is possible, and the commit "
"message template is prepared with the tag message.  Additionally, if the tag "
"is signed, the signature check is reported as a comment in the message "
"template. See also linkgit:git-tag[1]."
msgstr ""
"注釈付きの(可能ならば署名された)タグをマージする場合、早送りマージが可能で"
"あっても、Gitは常にマージコミットを作成し、コミットメッセージテンプレートはタ"
"グメッセージ付きで準備されます。 さらに、タグが署名されている場合、シグネチャ"
"チェックはメッセージテンプレートのコメントとして報告されます。 linkgit:git-"
"tag[1] も参照してください。"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:223
msgid ""
"When you want to just integrate with the work leading to the commit that "
"happens to be tagged, e.g. synchronizing with an upstream release point, you "
"may not want to make an unnecessary merge commit."
msgstr ""
"たまたまタグ付けされたコミットにつながる作業と統合し、例えば、アップストリー"
"ムのリリースポイントと同期したい場合、あなたは不要なマージコミットを作成した"
"くない場合があります。"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:227
msgid ""
"In such a case, you can \"unwrap\" the tag yourself before feeding it to "
"`git merge`, or pass `--ff-only` when you do not have any work on your own. "
"e.g."
msgstr ""
"このような場合、タグを `git merge` にフィードする前に自分で「包装を解く」"
"(unwrap)か、自分で作業を行わない場合は `--ff-only` を渡すことができます。 例"
"えば以下ようにします"

#. type: delimited block -
#: ../Documentation-sedout/git-merge.txt:232
#, no-wrap
msgid ""
"git fetch origin\n"
"git merge v1.2.3^0\n"
"git merge --ff-only v1.2.3\n"
msgstr ""
"git fetch origin\n"
"git merge v1.2.3^0\n"
"git merge --ff-only v1.2.3\n"

#. type: Title -
#: ../Documentation-sedout/git-merge.txt:236
#, no-wrap
msgid "HOW CONFLICTS ARE PRESENTED"
msgstr "HOW CONFLICTS ARE PRESENTED"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:245
msgid ""
"During a merge, the working tree files are updated to reflect the result of "
"the merge.  Among the changes made to the common ancestor's version, non-"
"overlapping ones (that is, you changed an area of the file while the other "
"side left that area intact, or vice versa) are incorporated in the final "
"result verbatim.  When both sides made changes to the same area, however, "
"Git cannot randomly pick one side over the other, and asks you to resolve it "
"by leaving what both sides did to that area."
msgstr ""
"マージ中に、作業ツリーのファイルが更新されてマージの結果が反映されます。 共通"
"の祖先のバージョンに加えられた変更の中で、重複しないもの(つまり、ファイルの領"
"域を変更し、反対側がその領域をそのままにしておく、またはその逆)が最終結果にそ"
"のまま組み込まれます。 ただし、両方の側が同じ領域に変更を加えた場合、Gitは一"
"方の側をもう一方の側からランダムに選択することはできず、両方の側がその領域に"
"行ったことをファイルに残してあなたに解決するように求めます。"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:248
msgid ""
"By default, Git uses the same style as the one used by the \"merge\" program "
"from the RCS suite to present such a conflicted hunk, like this:"
msgstr ""
"デフォルトでは、GitはRCSスイートの「マージ」プログラムで使用されるものと同じ"
"スタイルを使用して、以下のように競合するハンクを表示します:"

#. type: delimited block -
#: ../Documentation-sedout/git-merge.txt:260
#, no-wrap
msgid ""
"Here are lines that are either unchanged from the common\n"
"ancestor, or cleanly resolved because only one side changed,\n"
"or cleanly resolved because both sides changed the same way.\n"
"<<<<<<< yours:sample.txt\n"
"Conflict resolution is hard;\n"
"let's go shopping.\n"
"=======\n"
"Git makes conflict resolution easy.\n"
">>>>>>> theirs:sample.txt\n"
"And here is another line that is cleanly resolved or unmodified.\n"
msgstr ""
"Here are lines that are either unchanged from the common\n"
"ancestor, or cleanly resolved because only one side changed,\n"
"or cleanly resolved because both sides changed the same way.\n"
"<<<<<<< yours:sample.txt\n"
"Conflict resolution is hard;\n"
"let's go shopping.\n"
"=======\n"
"Git makes conflict resolution easy.\n"
">>>>>>> theirs:sample.txt\n"
"And here is another line that is cleanly resolved or unmodified.\n"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:265
msgid ""
"The area where a pair of conflicting changes happened is marked with markers "
"`<<<<<<<`, `=======`, and `>>>>>>>`.  The part before the `=======` is "
"typically your side, and the part afterwards is typically their side."
msgstr ""
"競合する変更のペアが発生した領域は、マーカー  `<<<<<<<` 、 `=======` 、 "
"`>>>>>>>` でマークされます。 `=======` の前の部分は通常あなた側(your side)で"
"あり、後の部分は通常彼ら側(their side)です。"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:271
msgid ""
"The default format does not show what the original said in the conflicting "
"area.  You cannot tell how many lines are deleted and replaced with Barbie's "
"remark on your side.  The only thing you can tell is that your side wants to "
"say it is hard and you'd prefer to go shopping, while the other side wants "
"to claim it is easy."
msgstr ""
"デフォルトの形式では、競合している部分でオリジナルが何を言っているのかは分か"
"りません。 自分側の何行が削除され、バービー人形の発言に置き換えられているのか"
"は分かりません。 唯一わかるのは、あなた側(your side)は大変だから買い物に行き"
"たいと言いたいのに、相手側(the other size)は簡単だと主張したいということで"
"す。"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:275
msgid ""
"An alternative style can be used by setting the \"merge.conflictStyle\" "
"configuration variable to either \"diff3\" or \"zdiff3\".  In \"diff3\" "
"style, the above conflict may look like this:"
msgstr ""
"`merge.conflictStyle` 構成変数を `diff3` または `zdiff3` に設定することで、別"
"のスタイルを使用できます。 `diff3` スタイルでは、上記の競合は以下のようになり"
"ます:"

#. type: delimited block -
#: ../Documentation-sedout/git-merge.txt:291
#, no-wrap
msgid ""
"Here are lines that are either unchanged from the common\n"
"ancestor, or cleanly resolved because only one side changed,\n"
"<<<<<<< yours:sample.txt\n"
"or cleanly resolved because both sides changed the same way.\n"
"Conflict resolution is hard;\n"
"let's go shopping.\n"
"||||||| base:sample.txt\n"
"or cleanly resolved because both sides changed identically.\n"
"Conflict resolution is hard.\n"
"=======\n"
"or cleanly resolved because both sides changed the same way.\n"
"Git makes conflict resolution easy.\n"
">>>>>>> theirs:sample.txt\n"
"And here is another line that is cleanly resolved or unmodified.\n"
msgstr ""
"Here are lines that are either unchanged from the common\n"
"ancestor, or cleanly resolved because only one side changed,\n"
"<<<<<<< yours:sample.txt\n"
"or cleanly resolved because both sides changed the same way.\n"
"Conflict resolution is hard;\n"
"let's go shopping.\n"
"||||||| base:sample.txt\n"
"or cleanly resolved because both sides changed identically.\n"
"Conflict resolution is hard.\n"
"=======\n"
"or cleanly resolved because both sides changed the same way.\n"
"Git makes conflict resolution easy.\n"
">>>>>>> theirs:sample.txt\n"
"And here is another line that is cleanly resolved or unmodified.\n"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:294
msgid "while in \"zdiff3\" style, it may look like this:"
msgstr "`zdiff3` スタイルでは、以下のようになります:"

#. type: delimited block -
#: ../Documentation-sedout/git-merge.txt:309
#, no-wrap
msgid ""
"Here are lines that are either unchanged from the common\n"
"ancestor, or cleanly resolved because only one side changed,\n"
"or cleanly resolved because both sides changed the same way.\n"
"<<<<<<< yours:sample.txt\n"
"Conflict resolution is hard;\n"
"let's go shopping.\n"
"||||||| base:sample.txt\n"
"or cleanly resolved because both sides changed identically.\n"
"Conflict resolution is hard.\n"
"=======\n"
"Git makes conflict resolution easy.\n"
">>>>>>> theirs:sample.txt\n"
"And here is another line that is cleanly resolved or unmodified.\n"
msgstr ""
"Here are lines that are either unchanged from the common\n"
"ancestor, or cleanly resolved because only one side changed,\n"
"or cleanly resolved because both sides changed the same way.\n"
"<<<<<<< yours:sample.txt\n"
"Conflict resolution is hard;\n"
"let's go shopping.\n"
"||||||| base:sample.txt\n"
"or cleanly resolved because both sides changed identically.\n"
"Conflict resolution is hard.\n"
"=======\n"
"Git makes conflict resolution easy.\n"
">>>>>>> theirs:sample.txt\n"
"And here is another line that is cleanly resolved or unmodified.\n"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:317
msgid ""
"In addition to the `<<<<<<<`, `=======`, and `>>>>>>>` markers, it uses "
"another `|||||||` marker that is followed by the original text.  You can "
"tell that the original just stated a fact, and your side simply gave in to "
"that statement and gave up, while the other side tried to have a more "
"positive attitude.  You can sometimes come up with a better resolution by "
"viewing the original."
msgstr ""
"`<<<<<<<` 、 `=======`  、 `>>>>>>>` マーカーに加えて、`|||||||` マーカーにオ"
"リジナルのテキストが続きます。 オリジナルは事実を述べただけであり、あなたの側"
"(your side)は単にその声明に屈して諦めたのに対し、他の側(the oter side)はより"
"前向きな態度をとろうとしたことがわかります。 オリジナルを表示することで、より"
"良い解決策を思い付くことができる場合があります。"

#. type: Title -
#: ../Documentation-sedout/git-merge.txt:320
#, no-wrap
msgid "HOW TO RESOLVE CONFLICTS"
msgstr "HOW TO RESOLVE CONFLICTS"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:323
msgid "After seeing a conflict, you can do two things:"
msgstr "競合を目にした後、あなたは以下の2つのことができます:"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:328
msgid ""
"Decide not to merge.  The only clean-ups you need are to reset the index "
"file to the `HEAD` commit to reverse 2. and to clean up working tree changes "
"made by 2. and 3.; `git merge --abort` can be used for this."
msgstr ""
"マージしないことを決定します。 必要なクリーンアップは、インデックスファイル"
"を `HEAD` コミットにリセットして (2) をリバースし、 (2) と (3) によって行われ"
"た作業ツリーの変更をクリーンアップすることだけです。 これには `git merge --"
"abort` を使用できます。"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:335
msgid ""
"Resolve the conflicts.  Git will mark the conflicts in the working tree.  "
"Edit the files into shape and 'git add' them to the index.  Use 'git commit' "
"or 'git merge --continue' to seal the deal. The latter command checks "
"whether there is a (interrupted) merge in progress before calling 'git "
"commit'."
msgstr ""
"競合を解決します。 Gitは、作業ツリーの競合をマークします。 ファイルを編集して"
"形にし、`git add` してインデックスに追加します。 `git commit` または `git "
"merge --continue` を使用して、取引を成立させます。 後者のコマンドは、 `git "
"commit` を呼び出す前に、進行中の(中断(interrupted)された)マージがあるかどうか"
"をチェックします。"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:337
msgid "You can work through the conflict with a number of tools:"
msgstr "あなたはいくつかの道具を使用して、競合を解決できます:"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:340
msgid ""
"Use a mergetool.  `git mergetool` to launch a graphical mergetool which will "
"work you through the merge."
msgstr ""
"mergetoolの利用。 あなたが `git mergetool` を実行すると、グラフィカルな "
"mergetool が起動し、マージ作業を行えます。"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:345
msgid ""
"Look at the diffs.  `git diff` will show a three-way diff, highlighting "
"changes from both the `HEAD` and `MERGE_HEAD` versions. `git diff "
"AUTO_MERGE` will show what changes you've made so far to resolve textual "
"conflicts."
msgstr "diffを見てください。 `git diff` は3方向の差分を表示し、 `HEAD` バージョンと `MERGE_HEAD` バージョンの両方からの変更を強調表示します。 `git diff AUTO_MERGE` では、 あなたがテキストの競合を解決するためにこれまでに行った変更が表示されます。"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:349
msgid ""
"Look at the diffs from each branch. `git log --merge -p <path>` will show "
"diffs first for the `HEAD` version and then the `MERGE_HEAD` version."
msgstr ""
"各ブランチからのdiffを見てください。 `git log --merge -p <path>` は、最初に  "
"`HEAD` バージョンの差分を表示し、次に `MERGE_HEAD` バージョンを表示します。"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:354
msgid ""
"Look at the originals.  `git show :1:filename` shows the common ancestor, "
"`git show :2:filename` shows the `HEAD` version, and `git show :3:filename` "
"shows the `MERGE_HEAD` version."
msgstr ""
"オリジナルを見てください。 `git show :1:filename` は共通の祖先を示し、 `git "
"show :2:filename` は `HEAD` バージョンを示し、 `git show :3:filename` は "
"`MERGE_HEAD` バージョンを示します。"

#. type: Title -
#: ../Documentation-sedout/git-merge.txt:357
#, no-wrap
msgid "EXAMPLES"
msgstr "EXAMPLES"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:361
msgid ""
"Merge branches `fixes` and `enhancements` on top of the current branch, "
"making an octopus merge:"
msgstr ""
"現在のブランチにブランチ `fixes` と `enhancements` をマージし、octopusマージ"
"します:"

#. type: delimited block -
#: ../Documentation-sedout/git-merge.txt:364
#, no-wrap
msgid "$ git merge fixes enhancements\n"
msgstr "$ git merge fixes enhancements\n"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:368
msgid ""
"Merge branch `obsolete` into the current branch, using `ours` merge strategy:"
msgstr ""
"`ours` マージ戦略を使用して、ブランチ `obsolete` を現在のブランチにマージしま"
"す:"

#. type: delimited block -
#: ../Documentation-sedout/git-merge.txt:371
#, no-wrap
msgid "$ git merge -s ours obsolete\n"
msgstr "$ git merge -s ours obsolete\n"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:375
msgid ""
"Merge branch `maint` into the current branch, but do not make a new commit "
"automatically:"
msgstr ""
"ブランチ `maint` を現在のブランチにマージしますが、新しいコミットを自動的に行"
"わないでください:"

#. type: delimited block -
#: ../Documentation-sedout/git-merge.txt:378
#, no-wrap
msgid "$ git merge --no-commit maint\n"
msgstr "$ git merge --no-commit maint\n"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:382
msgid ""
"This can be used when you want to include further changes to the merge, or "
"want to write your own merge commit message."
msgstr ""
"これは、マージにさらに変更を加えたい場合、または独自のマージコミットメッセー"
"ジを作成したい場合に使用できます。"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:386
msgid ""
"You should refrain from abusing this option to sneak substantial changes "
"into a merge commit.  Small fixups like bumping release/version name would "
"be acceptable."
msgstr ""
"大幅な変更をマージコミットに忍び込ませるために、このオプションを悪用すること"
"は控えてください。 bumping release(微修正)/version name(バージョン名変更) の"
"ような小さな修正は許容されます。"

#. type: Title -
#: ../Documentation-sedout/git-merge.txt:391
#, no-wrap
msgid "CONFIGURATION"
msgstr "CONFIGURATION"

#. type: Labeled list
#: ../Documentation-sedout/git-merge.txt:393
#, no-wrap
msgid "branch.<name>.mergeOptions"
msgstr "branch.<name>.mergeOptions"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:397
msgid ""
"Sets default options for merging into branch <name>. The syntax and "
"supported options are the same as those of 'git merge', but option values "
"containing whitespace characters are currently not supported."
msgstr ""
"ブランチ <name> にマージするためのデフォルトオプションを設定します。 構文とサ"
"ポートされているオプションは `git merge` のものと同じですが、空白文字を含むオ"
"プション値は現在サポートされていません。"

#. type: Title -
#: ../Documentation-sedout/git-merge.txt:403
#, no-wrap
msgid "SEE ALSO"
msgstr "SEE ALSO"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:410
msgid ""
"linkgit:git-fmt-merge-msg[1], linkgit:git-pull[1], linkgit:gitattributes[5], "
"linkgit:git-reset[1], linkgit:git-diff[1], linkgit:git-ls-files[1], linkgit:"
"git-add[1], linkgit:git-rm[1], linkgit:git-mergetool[1]"
msgstr ""
"linkgit:git-fmt-merge-msg[1], linkgit:git-pull[1], linkgit:gitattributes[5], "
"linkgit:git-reset[1], linkgit:git-diff[1], linkgit:git-ls-files[1], linkgit:"
"git-add[1], linkgit:git-rm[1], linkgit:git-mergetool[1]"

#. type: Title -
#: ../Documentation-sedout/git-merge.txt:412
#, no-wrap
msgid "GIT"
msgstr "GIT"

#. type: Plain text
#: ../Documentation-sedout/git-merge.txt:413
msgid "Part of the linkgit:git[1] suite"
msgstr "Part of the linkgit:git[1] suite"
