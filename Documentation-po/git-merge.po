# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-10-01 00:25+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation/git-merge.txt:2
#, no-wrap
msgid "git-merge(1)"
msgstr ""

#. type: Title -
#: ../Documentation/git-merge.txt:5
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:7
msgid "git-merge - Join two or more development histories together"
msgstr ""

#. type: Title -
#: ../Documentation/git-merge.txt:10
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:17
#, no-wrap
msgid ""
"'git merge' [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]\n"
"\t[--no-verify] [-s <strategy>] [-X <strategy-option>] [-S[<keyid>]]\n"
"\t[--[no-]allow-unrelated-histories]\n"
"\t[--[no-]rerere-autoupdate] [-m <msg>] [-F <file>] [<commit>...]\n"
"'git merge' (--continue | --abort | --quit)\n"
msgstr ""

#. type: Title -
#: ../Documentation/git-merge.txt:19
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:25
msgid ""
"Incorporates changes from the named commits (since the time their histories "
"diverged from the current branch) into the current branch.  This command is "
"used by 'git pull' to incorporate changes from another repository and can be "
"used by hand to merge changes from one branch into another."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:28
msgid "Assume the following history exists and the current branch is \"`master`\":"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-merge.txt:33
#, no-wrap
msgid ""
"\t  A---B---C topic\n"
"\t /\n"
"    D---E---F---G master\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:40
msgid ""
"Then \"`git merge topic`\" will replay the changes made on the `topic` "
"branch since it diverged from `master` (i.e., `E`) until its current commit "
"(`C`) on top of `master`, and record the result in a new commit along with "
"the names of the two parent commits and a log message from the user "
"describing the changes."
msgstr ""

#. type: delimited block -
#: ../Documentation/git-merge.txt:45
#, no-wrap
msgid ""
"\t  A---B---C topic\n"
"\t /         \\\n"
"    D---E---F---G---H master\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:54
msgid ""
"The second syntax (\"`git merge --abort`\") can only be run after the merge "
"has resulted in conflicts. 'git merge --abort' will abort the merge process "
"and try to reconstruct the pre-merge state. However, if there were "
"uncommitted changes when the merge started (and especially if those changes "
"were further modified after the merge was started), 'git merge --abort' will "
"in some cases be unable to reconstruct the original (pre-merge) "
"changes. Therefore:"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:58
#, no-wrap
msgid ""
"*Warning*: Running 'git merge' with non-trivial uncommitted changes is\n"
"discouraged: while possible, it may leave you in a state that is hard to\n"
"back out of in the case of a conflict.\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:61
msgid ""
"The third syntax (\"`git merge --continue`\") can only be run after the "
"merge has resulted in conflicts."
msgstr ""

#. type: Title -
#: ../Documentation/git-merge.txt:63
#, no-wrap
msgid "OPTIONS"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-merge.txt:68
#, no-wrap
msgid "-m <msg>"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:71
msgid ""
"Set the commit message to be used for the merge commit (in case one is "
"created)."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:74 ../Documentation/git-merge.txt:86
msgid ""
"If `--log` is specified, a shortlog of the commits being merged will be "
"appended to the specified message."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:78
msgid ""
"The 'git fmt-merge-msg' command can be used to give a good default for "
"automated 'git merge' invocations. The automated message can include the "
"branch description."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-merge.txt:79
#, no-wrap
msgid "-F <file>"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-merge.txt:80
#, no-wrap
msgid "--file=<file>"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:83
msgid ""
"Read the commit message to be used for the merge commit (in case one is "
"created)."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-merge.txt:87
#, no-wrap
msgid "--rerere-autoupdate"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-merge.txt:88
#, no-wrap
msgid "--no-rerere-autoupdate"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:91
msgid ""
"Allow the rerere mechanism to update the index with the result of "
"auto-conflict resolution if possible."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-merge.txt:92
#, no-wrap
msgid "--overwrite-ignore"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-merge.txt:93
#, no-wrap
msgid "--no-overwrite-ignore"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:96
msgid ""
"Silently overwrite ignored files from the merge result. This is the default "
"behavior. Use `--no-overwrite-ignore` to abort."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-merge.txt:97
#, no-wrap
msgid "--abort"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:101
msgid ""
"Abort the current conflict resolution process, and try to reconstruct the "
"pre-merge state. If an autostash entry is present, apply it to the worktree."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:106
msgid ""
"If there were uncommitted worktree changes present when the merge started, "
"'git merge --abort' will in some cases be unable to reconstruct these "
"changes. It is therefore recommended to always commit or stash your changes "
"before running 'git merge'."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:112
msgid ""
"'git merge --abort' is equivalent to 'git reset --merge' when `MERGE_HEAD` "
"is present unless `MERGE_AUTOSTASH` is also present in which case 'git merge "
"--abort' applies the stash entry to the worktree whereas 'git reset --merge' "
"will save the stashed changes in the stash list."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-merge.txt:113
#, no-wrap
msgid "--quit"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:117
msgid ""
"Forget about the current merge in progress. Leave the index and the working "
"tree as-is. If `MERGE_AUTOSTASH` is present, the stash entry will be saved "
"to the stash list."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-merge.txt:118
#, no-wrap
msgid "--continue"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:122
msgid ""
"After a 'git merge' stops due to conflicts you can conclude the merge by "
"running 'git merge --continue' (see \"HOW TO RESOLVE CONFLICTS\" section "
"below)."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-merge.txt:123
#, no-wrap
msgid "<commit>..."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:127
msgid ""
"Commits, usually other branch heads, to merge into our branch.  Specifying "
"more than one commit will create a merge with more than two parents "
"(affectionately called an Octopus merge)."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:131
msgid ""
"If no commit is given from the command line, merge the remote-tracking "
"branches that the current branch is configured to use as its upstream.  See "
"also the configuration section of this manual page."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:135
msgid ""
"When `FETCH_HEAD` (and no other commit) is specified, the branches recorded "
"in the `.git/FETCH_HEAD` file by the previous invocation of `git fetch` for "
"merging are merged to the current branch."
msgstr ""

#. type: Title -
#: ../Documentation/git-merge.txt:138
#, no-wrap
msgid "PRE-MERGE CHECKS"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:146
msgid ""
"Before applying outside changes, you should get your own work in good shape "
"and committed locally, so it will not be clobbered if there are conflicts.  "
"See also linkgit:git-stash[1].  'git pull' and 'git merge' will stop without "
"doing anything when local uncommitted changes overlap with files that 'git "
"pull'/'git merge' may need to update."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:152
msgid ""
"To avoid recording unrelated changes in the merge commit, 'git pull' and "
"'git merge' will also abort if there are any changes registered in the index "
"relative to the `HEAD` commit.  (Special narrow exceptions to this rule may "
"exist depending on which merge strategy is in use, but generally, the index "
"must match HEAD.)"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:155
msgid ""
"If all named commits are already ancestors of `HEAD`, 'git merge' will exit "
"early with the message \"Already up to date.\""
msgstr ""

#. type: Title -
#: ../Documentation/git-merge.txt:157
#, no-wrap
msgid "FAST-FORWARD MERGE"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:167
msgid ""
"Often the current branch head is an ancestor of the named commit.  This is "
"the most common case especially when invoked from 'git pull': you are "
"tracking an upstream repository, you have committed no local changes, and "
"now you want to update to a newer upstream revision.  In this case, a new "
"commit is not needed to store the combined history; instead, the `HEAD` "
"(along with the index) is updated to point at the named commit, without "
"creating an extra merge commit."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:169
msgid "This behavior can be suppressed with the `--no-ff` option."
msgstr ""

#. type: Title -
#: ../Documentation/git-merge.txt:171
#, no-wrap
msgid "TRUE MERGE"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:176
msgid ""
"Except in a fast-forward merge (see above), the branches to be merged must "
"be tied together by a merge commit that has both of them as its parents."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:181
msgid ""
"A merged version reconciling the changes from all branches to be merged is "
"committed, and your `HEAD`, index, and working tree are updated to it.  It "
"is possible to have modifications in the working tree as long as they do not "
"overlap; the update will preserve them."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:184
msgid "When it is not obvious how to reconcile the changes, the following happens:"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:186
msgid "The `HEAD` pointer stays the same."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:187
msgid "The `MERGE_HEAD` ref is set to point to the other branch head."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:189
msgid ""
"Paths that merged cleanly are updated both in the index file and in your "
"working tree."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:195
msgid ""
"For conflicting paths, the index file records up to three versions: stage 1 "
"stores the version from the common ancestor, stage 2 from `HEAD`, and stage "
"3 from `MERGE_HEAD` (you can inspect the stages with `git ls-files -u`).  "
"The working tree files contain the result of the \"merge\" program; "
"i.e. 3-way merge results with familiar conflict markers `<<<` `===` `>>>`."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:199
msgid ""
"No other changes are made.  In particular, the local modifications you had "
"before you started merge will stay the same and the index entries for them "
"stay as they were, i.e. matching `HEAD`."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:202
msgid ""
"If you tried a merge which resulted in complex conflicts and want to start "
"over, you can recover with `git merge --abort`."
msgstr ""

#. type: Title -
#: ../Documentation/git-merge.txt:204
#, no-wrap
msgid "MERGING TAG"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:211
msgid ""
"When merging an annotated (and possibly signed) tag, Git always creates a "
"merge commit even if a fast-forward merge is possible, and the commit "
"message template is prepared with the tag message.  Additionally, if the tag "
"is signed, the signature check is reported as a comment in the message "
"template. See also linkgit:git-tag[1]."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:215
msgid ""
"When you want to just integrate with the work leading to the commit that "
"happens to be tagged, e.g. synchronizing with an upstream release point, you "
"may not want to make an unnecessary merge commit."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:219
msgid ""
"In such a case, you can \"unwrap\" the tag yourself before feeding it to "
"`git merge`, or pass `--ff-only` when you do not have any work on your "
"own. e.g."
msgstr ""

#. type: delimited block -
#: ../Documentation/git-merge.txt:224
#, no-wrap
msgid ""
"git fetch origin\n"
"git merge v1.2.3^0\n"
"git merge --ff-only v1.2.3\n"
msgstr ""

#. type: Title -
#: ../Documentation/git-merge.txt:228
#, no-wrap
msgid "HOW CONFLICTS ARE PRESENTED"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:237
msgid ""
"During a merge, the working tree files are updated to reflect the result of "
"the merge.  Among the changes made to the common ancestor's version, "
"non-overlapping ones (that is, you changed an area of the file while the "
"other side left that area intact, or vice versa) are incorporated in the "
"final result verbatim.  When both sides made changes to the same area, "
"however, Git cannot randomly pick one side over the other, and asks you to "
"resolve it by leaving what both sides did to that area."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:240
msgid ""
"By default, Git uses the same style as the one used by the \"merge\" program "
"from the RCS suite to present such a conflicted hunk, like this:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-merge.txt:251
#, no-wrap
msgid ""
"Here are lines that are either unchanged from the common\n"
"ancestor, or cleanly resolved because only one side changed.\n"
"<<<<<<< yours:sample.txt\n"
"Conflict resolution is hard;\n"
"let's go shopping.\n"
"=======\n"
"Git makes conflict resolution easy.\n"
">>>>>>> theirs:sample.txt\n"
"And here is another line that is cleanly resolved or unmodified.\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:256
msgid ""
"The area where a pair of conflicting changes happened is marked with markers "
"`<<<<<<<`, `=======`, and `>>>>>>>`.  The part before the `=======` is "
"typically your side, and the part afterwards is typically their side."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:262
msgid ""
"The default format does not show what the original said in the conflicting "
"area.  You cannot tell how many lines are deleted and replaced with Barbie's "
"remark on your side.  The only thing you can tell is that your side wants to "
"say it is hard and you'd prefer to go shopping, while the other side wants "
"to claim it is easy."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:266
msgid ""
"An alternative style can be used by setting the \"merge.conflictStyle\" "
"configuration variable to \"diff3\".  In \"diff3\" style, the above conflict "
"may look like this:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-merge.txt:279
#, no-wrap
msgid ""
"Here are lines that are either unchanged from the common\n"
"ancestor, or cleanly resolved because only one side changed.\n"
"<<<<<<< yours:sample.txt\n"
"Conflict resolution is hard;\n"
"let's go shopping.\n"
"|||||||\n"
"Conflict resolution is hard.\n"
"=======\n"
"Git makes conflict resolution easy.\n"
">>>>>>> theirs:sample.txt\n"
"And here is another line that is cleanly resolved or unmodified.\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:287
msgid ""
"In addition to the `<<<<<<<`, `=======`, and `>>>>>>>` markers, it uses "
"another `|||||||` marker that is followed by the original text.  You can "
"tell that the original just stated a fact, and your side simply gave in to "
"that statement and gave up, while the other side tried to have a more "
"positive attitude.  You can sometimes come up with a better resolution by "
"viewing the original."
msgstr ""

#. type: Title -
#: ../Documentation/git-merge.txt:290
#, no-wrap
msgid "HOW TO RESOLVE CONFLICTS"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:293
msgid "After seeing a conflict, you can do two things:"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:298
msgid ""
"Decide not to merge.  The only clean-ups you need are to reset the index "
"file to the `HEAD` commit to reverse 2. and to clean up working tree changes "
"made by 2. and 3.; `git merge --abort` can be used for this."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:305
msgid ""
"Resolve the conflicts.  Git will mark the conflicts in the working tree.  "
"Edit the files into shape and 'git add' them to the index.  Use 'git commit' "
"or 'git merge --continue' to seal the deal. The latter command checks "
"whether there is a (interrupted) merge in progress before calling 'git "
"commit'."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:307
msgid "You can work through the conflict with a number of tools:"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:310
msgid ""
"Use a mergetool.  `git mergetool` to launch a graphical mergetool which will "
"work you through the merge."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:314
msgid ""
"Look at the diffs.  `git diff` will show a three-way diff, highlighting "
"changes from both the `HEAD` and `MERGE_HEAD` versions."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:318
msgid ""
"Look at the diffs from each branch. `git log --merge -p <path>` will show "
"diffs first for the `HEAD` version and then the `MERGE_HEAD` version."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:323
msgid ""
"Look at the originals.  `git show :1:filename` shows the common ancestor, "
"`git show :2:filename` shows the `HEAD` version, and `git show :3:filename` "
"shows the `MERGE_HEAD` version."
msgstr ""

#. type: Title -
#: ../Documentation/git-merge.txt:326
#, no-wrap
msgid "EXAMPLES"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:330
msgid ""
"Merge branches `fixes` and `enhancements` on top of the current branch, "
"making an octopus merge:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-merge.txt:333
#, no-wrap
msgid "$ git merge fixes enhancements\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:337
msgid ""
"Merge branch `obsolete` into the current branch, using `ours` merge "
"strategy:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-merge.txt:340
#, no-wrap
msgid "$ git merge -s ours obsolete\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:344
msgid ""
"Merge branch `maint` into the current branch, but do not make a new commit "
"automatically:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-merge.txt:347
#, no-wrap
msgid "$ git merge --no-commit maint\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:351
msgid ""
"This can be used when you want to include further changes to the merge, or "
"want to write your own merge commit message."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:355
msgid ""
"You should refrain from abusing this option to sneak substantial changes "
"into a merge commit.  Small fixups like bumping release/version name would "
"be acceptable."
msgstr ""

#. type: Title -
#: ../Documentation/git-merge.txt:360
#, no-wrap
msgid "CONFIGURATION"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-merge.txt:363
#, no-wrap
msgid "branch.<name>.mergeOptions"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:367
msgid ""
"Sets default options for merging into branch <name>. The syntax and "
"supported options are the same as those of 'git merge', but option values "
"containing whitespace characters are currently not supported."
msgstr ""

#. type: Title -
#: ../Documentation/git-merge.txt:369
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:376
msgid ""
"linkgit:git-fmt-merge-msg[1], linkgit:git-pull[1], linkgit:gitattributes[5], "
"linkgit:git-reset[1], linkgit:git-diff[1], linkgit:git-ls-files[1], "
"linkgit:git-add[1], linkgit:git-rm[1], linkgit:git-mergetool[1]"
msgstr ""

#. type: Title -
#: ../Documentation/git-merge.txt:378
#, no-wrap
msgid "GIT"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge.txt:379
msgid "Part of the linkgit:git[1] suite"
msgstr ""
