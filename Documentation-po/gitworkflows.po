# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 2.0\n"
"POT-Creation-Date: 2022-09-24 21:41+0900\n"
"PO-Revision-Date: 2022-10-13 04:46+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/gitworkflows.txt:2
#, no-wrap
msgid "gitworkflows(7)"
msgstr "gitworkflows(7)"

#. type: Title -
#: ../Documentation-sedout/gitworkflows.txt:5
#, no-wrap
msgid "NAME"
msgstr "NAME"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:7
msgid "gitworkflows - An overview of recommended workflows with Git"
msgstr "gitworkflows - Gitで推奨の作業手順の概要"

#. type: Title -
#: ../Documentation-sedout/gitworkflows.txt:9
#, no-wrap
msgid "SYNOPSIS"
msgstr "SYNOPSIS"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:12
#, no-wrap
msgid "git *\n"
msgstr "git *\n"

#. type: Title -
#: ../Documentation-sedout/gitworkflows.txt:15
#, no-wrap
msgid "DESCRIPTION"
msgstr "DESCRIPTION"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:21
msgid ""
"This document attempts to write down and motivate some of the workflow "
"elements used for `git.git` itself.  Many ideas apply in general, though the "
"full workflow is rarely required for smaller projects with fewer people "
"involved."
msgstr ""
"この文書は、 `git.git` 自体に使用されるワークフロー要素のいくつかを書き留めて"
"動機付けしようとしています。一般に多くのアイデアが当てはまりますが、関係者が"
"少ない小規模なプロジェクトではこのような完全なワークフローが必要になることは"
"めったにありません。"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:26
msgid ""
"We formulate a set of 'rules' for quick reference, while the prose tries to "
"motivate each of them.  Do not always take them literally; you should value "
"good reasons for your actions higher than manpages such as this one."
msgstr ""
"私たちが、すぐに参照できるように一連の「ルール」を作ったのは、本当にみんなの"
"モチベーションを高めるためです。ですから常に文字通りに解釈する必要はありませ"
"ん。このような文章よりも、自分の行動に対する正当な理由を大切にしてください。"

#. type: Title -
#: ../Documentation-sedout/gitworkflows.txt:29
#, no-wrap
msgid "SEPARATE CHANGES"
msgstr "SEPARATE CHANGES"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:37
msgid ""
"As a general rule, you should try to split your changes into small logical "
"steps, and commit each of them.  They should be consistent, working "
"independently of any later commits, pass the test suite, etc.  This makes "
"the review process much easier, and the history much more useful for later "
"inspection and analysis, for example with linkgit:git-blame[1] and linkgit:"
"git-bisect[1]."
msgstr ""
"原則として、変更を小さな論理ステップに分割し、それぞれでコミットするようにし"
"てください。それらは一貫性があり、その後のコミットとは独立して機能し、テスト"
"スイートに合格する必要があります。これにより、レビュープロセスがはるかに簡単"
"になり、その履歴は、たとえば linkgit:git-blame[1] や linkgit:git-bisect[1]を"
"使用して後で検査や分析する時にはるかに役立ちます。"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:46
msgid ""
"To achieve this, try to split your work into small steps from the very "
"beginning. It is always easier to squash a few commits together than to "
"split one big commit into several.  Don't be afraid of making too small or "
"imperfect steps along the way. You can always go back later and edit the "
"commits with `git rebase --interactive` before you publish them.  You can "
"use `git stash push --keep-index` to run the test suite independent of other "
"uncommitted changes; see the EXAMPLES section of linkgit:git-stash[1]."
msgstr ""
"これを実現するには、最初から作業を小さなステップに分割してみてください。1つの"
"大きなコミットを複数に分割するよりも、いくつかのコミットをまとめる方が常に簡"
"単です。途中で小さすぎる、または不完全なステップを作成することを恐れないでく"
"ださい。いつでも後で戻って、公開する前に `git rebase --interactive` を使用し"
"てコミットを編集できます。 `git stash push --keep-index` を使用して、他のコ"
"ミットされていない変更とは無関係にテストスイートを実行できます。 linkgit:git-"
"stash[1] の「EXAMPLES」セクションを参照してください。"

#. type: Title -
#: ../Documentation-sedout/gitworkflows.txt:49
#, no-wrap
msgid "MANAGING BRANCHES"
msgstr "MANAGING BRANCHES"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:54
msgid ""
"There are two main tools that can be used to include changes from one branch "
"on another: linkgit:git-merge[1] and linkgit:git-cherry-pick[1]."
msgstr ""
"あるブランチから別のブランチへの変更を含めるために使用できる2つの主要なツール"
"があります。 linkgit:git-merge[1] と linkgit:git-cherry-pick[1] です。"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:58
msgid ""
"Merges have many advantages, so we try to solve as many problems as possible "
"with merges alone.  Cherry-picking is still occasionally useful; see "
"\"Merging upwards\" below for an example."
msgstr ""
"マージには多くの利点があるため、マージだけで可能な限り多くの問題を解決しよう"
"としています。 cherry-pickingまだ時々役に立ちます。例については、以下の"
"「Merging upwards」を参照してください。"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:66
msgid ""
"Most importantly, merging works at the branch level, while cherry-picking "
"works at the commit level.  This means that a merge can carry over the "
"changes from 1, 10, or 1000 commits with equal ease, which in turn means the "
"workflow scales much better to a large number of contributors (and "
"contributions).  Merges are also easier to understand because a merge commit "
"is a \"promise\" that all changes from all its parents are now included."
msgstr ""
"最も重要なことは、マージはブランチレベルで機能し、チェリーピッキングはコミッ"
"トレベルで機能することです。これは、マージが1、10、または1000のコミットからの"
"変更を同じように簡単に引き継ぐことができることを意味します。つまり、ワークフ"
"ローは多数の貢献者(および貢献)に対してはるかに適切にスケーリングされます。"
"マージコミットは、すべての親からのすべての変更が含まれた「約束」(promise)であ"
"るため、マージも理解しやすくなります。"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:69
msgid ""
"There is a tradeoff of course: merges require a more careful branch "
"management.  The following subsections discuss the important points."
msgstr ""
"もちろん、トレードオフがあります。マージには、より慎重なブランチ管理が必要で"
"す。以下のサブセクションでは、重要なポイントについて説明します。"

#. type: Title ~
#: ../Documentation-sedout/gitworkflows.txt:72
#, no-wrap
msgid "Graduation"
msgstr "Graduation"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:77
msgid ""
"As a given feature goes from experimental to stable, it also \"graduates\" "
"between the corresponding branches of the software.  `git.git` uses the "
"following 'integration branches':"
msgstr ""
"特定の機能が実験的なもの(experimental)から安定したもの(stable)に変わると、ソ"
"フトウェアの対応するブランチ間でも「段階的に」(graduates)移行します。 `git."
"git` は以下の「統合ブランチ」(integration branches)を使用します:"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:80
msgid ""
"'maint' tracks the commits that should go into the next \"maintenance release"
"\", i.e., update of the last released stable version;"
msgstr "`maint` は、次の「メンテナンスリリース」(maintenance release)、つまり最後にリリースされた安定バージョンの更新に入るコミットを追跡します"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:82
msgid "'master' tracks the commits that should go into the next release;"
msgstr "`master` は、次のリリースに入る予定のコミットを追跡します。"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:85
msgid ""
"'next' is intended as a testing branch for topics being tested for stability "
"for master."
msgstr "`next` は、masterの安定性をテストするトピックのテストブランチとして意図されています。"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:87
msgid "There is a fourth official branch that is used slightly differently:"
msgstr "少し異なる方法で使用される4番目の公式ブランチがあります:"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:91
msgid ""
"'seen' (patches seen by the maintainer) is an integration branch for things "
"that are not quite ready for inclusion yet (see \"Integration Branches\" "
"below)."
msgstr "`seen` (メンテナによって表示されるパッチ)は、まだ含める準備が整っていないモノの統合ブランチです(以下の「Integration Branches」を参照)。"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:94
msgid ""
"Each of the four branches is usually a direct descendant of the one above it."
msgstr "4つのブランチのそれぞれは、通常、その上のブランチの直接の子孫です。"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:98
msgid ""
"Conceptually, the feature enters at an unstable branch (usually 'next' or "
"'seen'), and \"graduates\" to 'master' for the next release once it is "
"considered stable enough."
msgstr ""
"概念的には、機能(feature)は不安定なブランチ(通常は「next」または「seen」)に入"
"り、十分に安定している(stable)と見なされると、次のリリースのために「master」"
"に「卒業」(graduates)します。"

#. type: Title ~
#: ../Documentation-sedout/gitworkflows.txt:101
#, no-wrap
msgid "Merging upwards"
msgstr "Merging upwards"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:106
msgid ""
"The \"downwards graduation\" discussed above cannot be done by actually "
"merging downwards, however, since that would merge 'all' changes on the "
"unstable branch into the stable one.  Hence the following:"
msgstr ""
"上記の「downwards graduation」(下向きの卒業)は、実際に下向きにマージすること"
"によって実行することはできません。なぜなら、不安定なブランチの「すべての」変"
"更が安定したブランチにマージされるためです。 したがって、以下のようになりま"
"す:"

#. type: Block title
#: ../Documentation-sedout/gitworkflows.txt:107
#, no-wrap
msgid "Merge upwards"
msgstr "Merge upwards"

#. type: Named 'caption' AttributeList argument for style 'caption'
#: ../Documentation-sedout/gitworkflows.txt:108
#: ../Documentation-sedout/gitworkflows.txt:139
#: ../Documentation-sedout/gitworkflows.txt:171
#: ../Documentation-sedout/gitworkflows.txt:199
#, no-wrap
msgid "Rule: "
msgstr "Rule: "

#. type: delimited block =
#: ../Documentation-sedout/gitworkflows.txt:113
msgid ""
"Always commit your fixes to the oldest supported branch that requires them.  "
"Then (periodically) merge the integration branches upwards into each other."
msgstr ""
"修正を必要とするサポートされている最も古いブランチに常に修正をコミットしま"
"す。 次に、 (定期的に)統合ブランチを互いに上向きにマージします。"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:120
msgid ""
"This gives a very controlled flow of fixes.  If you notice that you have "
"applied a fix to e.g. 'master' that is also required in 'maint', you will "
"need to cherry-pick it (using linkgit:git-cherry-pick[1])  downwards.  This "
"will happen a few times and is nothing to worry about unless you do it very "
"frequently."
msgstr "これにより、修正のフローが非常によく制御されます。たとえば、修正を適用したことに気付いた場合。 `maint` でも必要な `master` は、(linkgit:git-cherry-pick[1] を使用して)下向きにチェリーピックする必要があります。これは数回発生しますが、頻繁に実行しない限り心配する必要はありません。"

#. type: Block title
#: ../Documentation-sedout/gitworkflows.txt:123
#: ../Documentation-sedout/gitworkflows.txt:138
#, no-wrap
msgid "Topic branches"
msgstr "Topic branches"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:127
msgid ""
"Any nontrivial feature will require several patches to implement, and may "
"get extra bugfixes or improvements during its lifetime."
msgstr ""
"重要な機能を実装するにはいくつかのパッチが必要であり、その存続期間中に追加の"
"バグ修正または改善が行われる可能性があります。"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:133
msgid ""
"Committing everything directly on the integration branches leads to many "
"problems: Bad commits cannot be undone, so they must be reverted one by one, "
"which creates confusing histories and further error potential when you "
"forget to revert part of a group of changes.  Working in parallel mixes up "
"the changes, creating further confusion."
msgstr ""
"統合ブランチですべてを直接コミットすると、多くの問題が発生します。不正なコ"
"ミットは元に戻せないため、1つずつ元に戻す必要があります。これにより、変更のグ"
"ループの一部を元に戻すのを忘れると、混乱した履歴とエラーが発生する可能性があ"
"ります。並行して作業すると、変更がごちゃまぜになり、さらに混乱が生じます。"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:137
msgid ""
"Use of \"topic branches\" solves these problems.  The name is pretty self "
"explanatory, with a caveat that comes from the \"merge upwards\" rule above:"
msgstr ""
"「topic branches」(トピックブランチ)を使用すると、これらの問題が解決されま"
"す。名前はかなり自明ですが、上記の「merge upwards」(上向きにマージ)ルールに由"
"来する警告があります:"

#. type: delimited block =
#: ../Documentation-sedout/gitworkflows.txt:144
msgid ""
"Make a side branch for every topic (feature, bugfix, ...). Fork it off at "
"the oldest integration branch that you will eventually want to merge it into."
msgstr ""
"すべてのトピック(機能、バグ修正など)のサイドブランチを作成します。最終的に"
"マージする最も古い統合ブランチでフォークします。"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:147
msgid "Many things can then be done very naturally:"
msgstr "そうすれば、以下のように多くのことが非常に自然に実行できます:"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:154
msgid ""
"To get the feature/bugfix into an integration branch, simply merge it.  If "
"the topic has evolved further in the meantime, merge again.  (Note that you "
"do not necessarily have to merge it to the oldest integration branch first.  "
"For example, you can first merge a bugfix to 'next', give it some testing "
"time, and merge to 'maint' when you know it is stable.)"
msgstr ""
"機能/バグ修正を統合ブランチに取り込むには、それをマージするだけです。その間に"
"トピックがさらに進化した場合は、再度マージしてください。 (必ずしも最初に最も"
"古い統合ブランチにマージする必要はないことに注意してください。たとえば、最初"
"にバグ修正を next にマージし、テスト時間を与え、安定していることがわかったら "
"maint にマージできます。)"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:158
msgid ""
"If you find you need new features from the branch 'other' to continue "
"working on your topic, merge 'other' to 'topic'.  (However, do not do this "
"\"just habitually\", see below.)"
msgstr ""
"トピックの作業を続行するためにブランチ other の新機能が必要な場合は、 other "
"を topic にマージします。 (ただし、これを「習慣的に」行わないでください。以下"
"を参照してください。)"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:161
msgid ""
"If you find you forked off the wrong branch and want to move it \"back in "
"time\", use linkgit:git-rebase[1]."
msgstr ""
"分岐したブランチが間違っていることに気づき、それを「過去にさかのぼって」移動"
"したい場合は、 linkgit:git-rebase[1] を使用してください。"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:165
msgid ""
"Note that the last point clashes with the other two: a topic that has been "
"merged elsewhere should not be rebased.  See the section on RECOVERING FROM "
"UPSTREAM REBASE in linkgit:git-rebase[1]."
msgstr ""
"注意: 最後の項目が他の2つと衝突することに注意してください。他の場所でマージさ"
"れたトピックは、リベースしないでください。 linkgit:git-rebase[1] の"
"「RECOVERING FROM UPSTREAM REBASE」に関するセクションを参照してください。"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:169
msgid ""
"We should point out that \"habitually\" (regularly for no real reason)  "
"merging an integration branch into your topics -- and by extension, merging "
"anything upstream into anything downstream on a regular basis -- is frowned "
"upon:"
msgstr ""
"(通常は理由もなく)「習慣的に」統合ブランチをあなたのトピックにマージすること"
"(つまり、トピックを拡張し、定期的に上流からマージし続けること)は眉をひそめら"
"れる行為であることを指摘しておく必要があります。"

#. type: Block title
#: ../Documentation-sedout/gitworkflows.txt:170
#, no-wrap
msgid "Merge to downstream only at well-defined points"
msgstr "明確に定義されたポイントでのみ下流にマージします"

#. type: delimited block =
#: ../Documentation-sedout/gitworkflows.txt:176
msgid ""
"Do not merge to downstream except with a good reason: upstream API changes "
"affect your branch; your branch no longer merges to upstream cleanly; etc."
msgstr ""
"正当な理由がある場合を除いて、ダウンストリームにマージしないでください。正当"
"な理由とは、例えば、アップストリームAPIの変更がブランチに影響する、ブランチが"
"アップストリームにきれいにマージされなくなりました、等です。"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:184
msgid ""
"Otherwise, the topic that was merged to suddenly contains more than a single "
"(well-separated) change.  The many resulting small merges will greatly "
"clutter up history.  Anyone who later investigates the history of a file "
"will have to find out whether that merge affected the topic in development.  "
"An upstream might even inadvertently be merged into a \"more stable\" "
"branch.  And so on."
msgstr ""
"正当な理由以外の場合、マージされたトピックには、(激しくバラバラの)突然の複数"
"の変更が含まれます。結果として生じる多くの小さなマージは、履歴を大幅に混乱さ"
"せます。後でファイルの履歴を調査する人は、そのマージが開発中のトピックに影響"
"を与えたかどうかを確認する必要があります。アップストリームは、誤って「より安"
"定した」ブランチにマージされることさえあるかも等々。"

#. type: Title ~
#: ../Documentation-sedout/gitworkflows.txt:187
#, no-wrap
msgid "Throw-away integration"
msgstr "使い捨て統合"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:194
msgid ""
"If you followed the last paragraph, you will now have many small topic "
"branches, and occasionally wonder how they interact.  Perhaps the result of "
"merging them does not even work? But on the other hand, we want to avoid "
"merging them anywhere \"stable\" because such merges cannot easily be undone."
msgstr ""
"先程の話題についていうと、多くの小さなトピックブランチがあり、あなたはそれら"
"がどのように相互作用するのかワケワカメに思うことがあるでしょう。それらをマー"
"ジしたらちゃんと機能しないかも？ そして、このようなマージは簡単に元に戻せない"
"ため、我々はこれらに対して「安定した」場所でのマージは避けたいと考えていま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:197
msgid ""
"The solution, of course, is to make a merge that we can undo: merge into a "
"throw-away branch."
msgstr ""
"もちろん、解決策は、元に戻すことができるマージを作成することです。つまり、使"
"い捨てブランチ(throw-away branch)にマージします。"

#. type: Block title
#: ../Documentation-sedout/gitworkflows.txt:198
#, no-wrap
msgid "Throw-away integration branches"
msgstr "Throw-away integration branches"

#. type: delimited block =
#: ../Documentation-sedout/gitworkflows.txt:203
msgid ""
"To test the interaction of several topics, merge them into a throw-away "
"branch.  You must never base any work on such a branch!"
msgstr ""
"いくつかのトピックの相互作用をテストするには、それらを使い捨てのブランチに"
"マージします。あなたは決してそのようなブランチに基づいて作業を行ってはいけま"
"せん！"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:210
msgid ""
"If you make it (very) clear that this branch is going to be deleted right "
"after the testing, you can even publish this branch, for example to give the "
"testers a chance to work with it, or other developers a chance to see if "
"their in-progress work will be compatible.  `git.git` has such an official "
"throw-away integration branch called 'seen'."
msgstr ""
"テストの直後にこのブランチが削除されることを(非常に)明確にすると、このブラン"
"チを公開して、たとえば、テスターがこのブランチを操作できるようにしたり、他の"
"開発者が進行中の作業に互換性があるかどうかを確認したりすることもできます。 "
"`git.git` には、「seen」と呼ばれるそのような公式の使い捨て統合ブランチがあり"
"ます。"

#. type: Title ~
#: ../Documentation-sedout/gitworkflows.txt:213
#, no-wrap
msgid "Branch management for a release"
msgstr "Branch management for a release"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:218
msgid ""
"Assuming you are using the merge approach discussed above, when you are "
"releasing your project you will need to do some additional branch management "
"work."
msgstr ""
"上記のマージアプローチを使用していると仮定すると、プロジェクトをリリースする"
"ときに、追加のブランチ管理作業を行う必要があります。"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:221
msgid ""
"A feature release is created from the 'master' branch, since 'master' tracks "
"the commits that should go into the next feature release."
msgstr ""
"「master」は次の機能(feature)リリースに入るコミットを追跡するため、機能"
"(feature)リリースは「master」ブランチから作成されます。"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:226
msgid ""
"The 'master' branch is supposed to be a superset of 'maint'. If this "
"condition does not hold, then 'maint' contains some commits that are not "
"included on 'master'. The fixes represented by those commits will therefore "
"not be included in your feature release."
msgstr "master ブランチは、 maint のスーパーセットであると想定されています。この条件が満たされない場合、 maint には master に含まれていないコミットが含まれています。したがって、 maint のコミットによって表される修正は、機能(feature)リリースには含まれません。"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:228
msgid "To verify that 'master' is indeed a superset of 'maint', use git log:"
msgstr "master が実際に maint のスーパーセットであることを確認するには、 `git log` を使用します:"

#. type: Block title
#: ../Documentation-sedout/gitworkflows.txt:229
#, no-wrap
msgid "Verify 'master' is a superset of 'maint'"
msgstr "master が maint のスーパーセットであることを確認(verify)します:"

#. type: Named 'caption' AttributeList argument for style 'caption'
#: ../Documentation-sedout/gitworkflows.txt:230
#: ../Documentation-sedout/gitworkflows.txt:242
#: ../Documentation-sedout/gitworkflows.txt:272
#: ../Documentation-sedout/gitworkflows.txt:281
#: ../Documentation-sedout/gitworkflows.txt:301
#: ../Documentation-sedout/gitworkflows.txt:368
#: ../Documentation-sedout/gitworkflows.txt:382
#: ../Documentation-sedout/gitworkflows.txt:403
#: ../Documentation-sedout/gitworkflows.txt:425
#: ../Documentation-sedout/gitworkflows.txt:440
#: ../Documentation-sedout/gitworkflows.txt:454
#, no-wrap
msgid "Recipe: "
msgstr "Recipe: "

#. type: delimited block =
#: ../Documentation-sedout/gitworkflows.txt:233
msgid "`git log master..maint`"
msgstr "`git log master..maint`"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:237
msgid ""
"This command should not list any commits.  Otherwise, check out 'master' and "
"merge 'maint' into it."
msgstr ""
"このコマンドは、コミットを一切リストしないはずです。そうでない場合は、"
"「master」をチェックアウトし、「maint」をマージします。"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:240
msgid ""
"Now you can proceed with the creation of the feature release. Apply a tag to "
"the tip of 'master' indicating the release version:"
msgstr ""
"これで、あなたは機能(feature)リリースの作成に進むことができます。リリースバー"
"ジョンを示すタグを「master」の先端に適用します:"

#. type: Block title
#: ../Documentation-sedout/gitworkflows.txt:241
#, no-wrap
msgid "Release tagging"
msgstr "Release tagging"

#. type: delimited block =
#: ../Documentation-sedout/gitworkflows.txt:245
msgid "`git tag -s -m \"Git X.Y.Z\" vX.Y.Z master`"
msgstr "`git tag -s -m \"Git X.Y.Z\" vX.Y.Z master`"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:252
msgid ""
"You need to push the new tag to a public Git server (see \"DISTRIBUTED "
"WORKFLOWS\" below). This makes the tag available to others tracking your "
"project. The push could also trigger a post-update hook to perform release-"
"related items such as building release tarballs and preformatted "
"documentation pages."
msgstr ""
"あなたは新しいタグをパブリックGitサーバーにプッシュする必要があります(以下の"
"「DISTRIBUTED WORKFLOWS」参照)。これにより、プロジェクトを追跡している他の"
"ユーザーがタグを利用できるようになります。プッシュでは、更新後のフックをトリ"
"ガーして、リリースtarballの作成や事前にフォーマットされたドキュメントページな"
"どのリリース関連の項目を実行することもできます。"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:256
msgid ""
"Similarly, for a maintenance release, 'maint' is tracking the commits to be "
"released. Therefore, in the steps above simply tag and push 'maint' rather "
"than 'master'."
msgstr ""
"同様に、メンテナンスリリースの場合、「maint」はリリースされるコミットを追跡し"
"ます。ゆえに、タグのリリース手順では、「master」ではなく「maint」にタグを付け"
"てプッシュするだけです。"

#. type: Title ~
#: ../Documentation-sedout/gitworkflows.txt:259
#, no-wrap
msgid "Maintenance branch management after a feature release"
msgstr "機能リリース後のメンテナンスブランチ管理"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:262
msgid "After a feature release, you need to manage your maintenance branches."
msgstr ""
"機能(feature)リリース後、あなたはメンテナンスブランチを管理する必要がありま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:266
msgid ""
"First, if you wish to continue to release maintenance fixes for the feature "
"release made before the recent one, then you must create another branch to "
"track commits for that previous release."
msgstr ""
"まず、直近のリリースより前に行われた機能リリースのメンテナンス修正を引き続き"
"リリースする場合は、その前のリリースのコミットを追跡するために別のブランチを"
"作成する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:270
msgid ""
"To do this, the current maintenance branch is copied to another branch named "
"with the previous release version number (e.g. maint-X.Y.(Z-1)  where X.Y.Z "
"is the current release)."
msgstr ""
"これを行うために、現在のメンテナンスブランチは、以前のリリースバージョン番号"
"で名前が付けられた別のブランチにコピーされます(例: maint-X.Y.(Z-1) ここでX.Y."
"Zは現在のリリースとする)。"

#. type: Block title
#: ../Documentation-sedout/gitworkflows.txt:271
#, no-wrap
msgid "Copy maint"
msgstr "Copy maint"

#. type: delimited block =
#: ../Documentation-sedout/gitworkflows.txt:275
msgid "`git branch maint-X.Y.(Z-1) maint`"
msgstr "`git branch maint-X.Y.(Z-1) maint`"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:279
msgid ""
"The 'maint' branch should now be fast-forwarded to the newly released code "
"so that maintenance fixes can be tracked for the current release:"
msgstr "maint ブランチは、新しくリリースされたコードに早送り(fast-forwarded)され、現在のリリースのメンテナンス修正を追跡できるようになります:"

#. type: Block title
#: ../Documentation-sedout/gitworkflows.txt:280
#, no-wrap
msgid "Update maint to new release"
msgstr "Update maint to new release"

#. type: delimited block =
#: ../Documentation-sedout/gitworkflows.txt:284
msgid "`git checkout maint`"
msgstr "`git checkout maint`"

#. type: delimited block =
#: ../Documentation-sedout/gitworkflows.txt:285
msgid "`git merge --ff-only master`"
msgstr "`git merge --ff-only master`"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:291
msgid ""
"If the merge fails because it is not a fast-forward, then it is possible "
"some fixes on 'maint' were missed in the feature release.  This will not "
"happen if the content of the branches was verified as described in the "
"previous section."
msgstr ""
"早送り(fast-forwarded)ではないためにマージが失敗した場合は、機能リリースで"
"「maint」のいくつかの修正が欠落している可能性があります。前のセクションで説明"
"したようにブランチのコンテンツを検証(verify)した場合、これは発生しません。"

#. type: Title ~
#: ../Documentation-sedout/gitworkflows.txt:294
#, no-wrap
msgid "Branch management for next and seen after a feature release"
msgstr "機能リリース後の「next」と「seen」のブランチ管理"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:299
msgid ""
"After a feature release, the integration branch 'next' may optionally be "
"rewound and rebuilt from the tip of 'master' using the surviving topics on "
"'next':"
msgstr "機能のリリース後、統合ブランチ next は、オプションで、 next の残りのトピックを使用して、 master の先端から巻き戻されて再構築される場合があります:"

#. type: Block title
#: ../Documentation-sedout/gitworkflows.txt:300
#, no-wrap
msgid "Rewind and rebuild next"
msgstr "Rewind and rebuild `next`"

#. type: delimited block =
#: ../Documentation-sedout/gitworkflows.txt:304
msgid "`git switch -C next master`"
msgstr "`git switch -C next master`"

#. type: delimited block =
#: ../Documentation-sedout/gitworkflows.txt:305
msgid "`git merge ai/topic_in_next1`"
msgstr "`git merge ai/topic_in_next1`"

#. type: delimited block =
#: ../Documentation-sedout/gitworkflows.txt:306
msgid "`git merge ai/topic_in_next2`"
msgstr "`git merge ai/topic_in_next2`"

#. type: delimited block =
#: ../Documentation-sedout/gitworkflows.txt:307
msgid "..."
msgstr "..."

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:317
msgid ""
"The advantage of doing this is that the history of 'next' will be clean. For "
"example, some topics merged into 'next' may have initially looked promising, "
"but were later found to be undesirable or premature.  In such a case, the "
"topic is reverted out of 'next' but the fact remains in the history that it "
"was once merged and reverted. By recreating 'next', you give another "
"incarnation of such topics a clean slate to retry, and a feature release is "
"a good point in history to do so."
msgstr ""
"これを行うことの利点は、「next」の履歴がクリーンになることです。 たとえば、"
"「next」にマージされた一部のトピックは、最初は有望に見えたかもしれませんが、"
"後で望ましくないか時期尚早であることがわかりました。このような場合、トピック"
"は「next」から元に戻され(revert)ますが、一度マージされて元に戻されたという事"
"実は履歴に残ります。「next」を再作成することで、そのようなトピックの別の化身"
"に再試行するためのきれいな状態を与えることができます。機能のリリースは、これ"
"を行うための履歴上の良い地点です。"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:320
msgid ""
"If you do this, then you should make a public announcement indicating that "
"'next' was rewound and rebuilt."
msgstr ""
"これを行う場合は、「next」が巻き戻されて再構築されたことを示す公開アナウンス"
"を行う必要があります。"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:324
msgid ""
"The same rewind and rebuild process may be followed for 'seen'. A public "
"announcement is not necessary since 'seen' is a throw-away branch, as "
"described above."
msgstr ""
"「seen」についても、同じの巻き戻しと再構築のプロセスを行います。なお、上記の"
"とおり「seen」は使い捨てのブランチであるため、公の発表は必要ありません。"

#. type: Title -
#: ../Documentation-sedout/gitworkflows.txt:327
#, no-wrap
msgid "DISTRIBUTED WORKFLOWS"
msgstr "DISTRIBUTED WORKFLOWS"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:332
msgid ""
"After the last section, you should know how to manage topics.  In general, "
"you will not be the only person working on the project, so you will have to "
"share your work."
msgstr ""
"前セクションを読んだ今となっては、あなたはトピックを管理する方法を知っておく"
"べきです。 一般的に、プロジェクトに取り組んでいるのはあなただけではないので、"
"あなたの仕事は共有しなければなりません。"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:338
msgid ""
"Roughly speaking, there are two important workflows: merge and patch.  The "
"important difference is that the merge workflow can propagate full history, "
"including merges, while patches cannot.  Both workflows can be used in "
"parallel: in `git.git`, only subsystem maintainers use the merge workflow, "
"while everyone else sends patches."
msgstr ""
"大まかに言えば、マージとパッチという2つの重要な作業フローがあります。重要な違"
"いは、マージ作業フローはマージを含む完全な履歴を伝播できますが、パッチは伝播"
"できないことです。両方の作業フローを並行して使用できます。`git.git` では、サ"
"ブシステムメンテナのみがマージ作業フローを使用し、他のすべての作業フローは"
"パッチを送信します。"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:343
msgid ""
"Note that the maintainer(s) may impose restrictions, such as \"Signed-off-by"
"\" requirements, that all commits/patches submitted for inclusion must "
"adhere to.  Consult your project's documentation for more information."
msgstr ""
"注意: メンテナは、インクルードするために提出されたすべてのコミット/パッチが遵"
"守しなければならない「Signed-off-by」要件などの制限を課すことができることに注"
"意してください。より詳細な情報については、プロジェクトのドキュメントを参照し"
"てください。"

#. type: Title ~
#: ../Documentation-sedout/gitworkflows.txt:346
#, no-wrap
msgid "Merge workflow"
msgstr "Merge workflow"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:351
msgid ""
"The merge workflow works by copying branches between upstream and "
"downstream.  Upstream can merge contributions into the official history; "
"downstream base their work on the official history."
msgstr ""
"マージ作業フローは、上流(upstream)と下流(downstream)の間でブランチをコピーす"
"ることによって機能します。上流では、貢献の結果を公式の履歴に統合することがで"
"きます。下流では、公式の履歴に基づいて作業します。"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:353
msgid "There are three main tools that can be used for this:"
msgstr "これに使用できる主なツールは3つあります:"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:356
msgid ""
"linkgit:git-push[1] copies your branches to a remote repository, usually to "
"one that can be read by all involved parties;"
msgstr ""
"linkgit:git-push[1] は、ブランチをリモートリポジトリにコピーします。通常は、"
"関係者全員が読み取れるリポジトリにコピーします。"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:359
msgid ""
"linkgit:git-fetch[1] that copies remote branches to your repository; and"
msgstr ""
"linkgit:git-fetch[1] は、リモートブランチをあなたのリポジトリにコピーします。"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:361
msgid "linkgit:git-pull[1] that does fetch and merge in one go."
msgstr "linkgit:git-pull[1] は、フェッチしてマージするのを一度に行います。"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:364
msgid ""
"Note the last point.  Do 'not' use 'git pull' unless you actually want to "
"merge the remote branch."
msgstr ""
"注意: 最後の点に注意してください。 実際にリモートブランチをマージする場合を除"
"いて `git pull` を使用しないでください。"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:366
msgid "Getting changes out is easy:"
msgstr "変更を取得するのは簡単です:"

#. type: Block title
#: ../Documentation-sedout/gitworkflows.txt:367
#, no-wrap
msgid "Push/pull: Publishing branches/topics"
msgstr "push/pull: branches/topics の公開"

#. type: delimited block =
#: ../Documentation-sedout/gitworkflows.txt:372
msgid ""
"`git push <remote> <branch>` and tell everyone where they can fetch from."
msgstr ""
"`git push <remote> <branch>` を実行、そして、どこからフェッチできるかをみんな"
"に伝えます。"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:377
msgid ""
"You will still have to tell people by other means, such as mail.  (Git "
"provides the linkgit:git-request-pull[1] to send preformatted pull requests "
"to upstream maintainers to simplify this task.)"
msgstr ""
"あなたは今の所メールなどの他の手段で人々に伝えなければなりません。 (Gitは "
"linkgit:git-request-pull[1] を提供して、このタスクを簡素化するために、事前に"
"フォーマットされたプルリクエストをアップストリームのメンテナーに送信しま"
"す。 )"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:380
msgid ""
"If you just want to get the newest copies of the integration branches, "
"staying up to date is easy too:"
msgstr ""
"統合ブランチの最新のコピーを取得したいだけの場合は、最新の状態に保つのも簡単"
"です:"

#. type: Block title
#: ../Documentation-sedout/gitworkflows.txt:381
#, no-wrap
msgid "Push/pull: Staying up to date"
msgstr "push/pull: 最新の状態に保つ"

#. type: delimited block =
#: ../Documentation-sedout/gitworkflows.txt:385
msgid "Use `git fetch <remote>` or `git remote update` to stay up to date."
msgstr ""
"最新の状態に保つには `git fetch <remote>` または `git remote update` を使いま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:389
msgid ""
"Then simply fork your topic branches from the stable remotes as explained "
"earlier."
msgstr ""
"次に、以前に説明したように、安定したリモートからトピックブランチをフォークす"
"るだけです。"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:393
msgid ""
"If you are a maintainer and would like to merge other people's topic "
"branches to the integration branches, they will typically send a request to "
"do so by mail.  Such a request looks like"
msgstr ""
"あなたがメンテナであり、他の人のトピックブランチを統合ブランチにマージしたい"
"場合、他の人々は通常、メールでそうするようにリクエストを送信してきます。その"
"ようなリクエストは以下のようになります"

#. type: delimited block -
#: ../Documentation-sedout/gitworkflows.txt:397
#, no-wrap
msgid ""
"Please pull from\n"
"    <URL> <branch>\n"
msgstr ""
"Please pull from\n"
"    <URL> <branch>\n"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:401
msgid ""
"In that case, 'git pull' can do the fetch and merge in one go, as follows."
msgstr ""
"その場合、 `git pull` は、以下のように、フェッチとマージを一度に実行できま"
"す。"

#. type: Block title
#: ../Documentation-sedout/gitworkflows.txt:402
#, no-wrap
msgid "Push/pull: Merging remote topics"
msgstr "Push/pull: Merging remote topics"

#. type: delimited block =
#: ../Documentation-sedout/gitworkflows.txt:406
msgid "`git pull <URL> <branch>`"
msgstr "`git pull <URL> <branch>`"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:413
msgid ""
"Occasionally, the maintainer may get merge conflicts when they try to pull "
"changes from downstream.  In this case, they can ask downstream to do the "
"merge and resolve the conflicts themselves (perhaps they will know better "
"how to resolve them).  It is one of the rare cases where downstream 'should' "
"merge from upstream."
msgstr ""
"場合によっては、メンテナが下流(downstream)から変更をプルしようとすると、マー"
"ジの競合が発生することがあります。 この場合、下流にマージを実行して競合を彼ら"
"自身で解決するように依頼できます(おそらく、彼らは競合を解決する方法をよりよく"
"知っているでしょう)。これは、下流が上流(upsteram)からマージする必要があるまれ"
"なケースの1つです。"

#. type: Title ~
#: ../Documentation-sedout/gitworkflows.txt:416
#, no-wrap
msgid "Patch workflow"
msgstr "Patch workflow"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:423
msgid ""
"If you are a contributor that sends changes upstream in the form of emails, "
"you should use topic branches as usual (see above).  Then use linkgit:git-"
"format-patch[1] to generate the corresponding emails (highly recommended "
"over manually formatting them because it makes the maintainer's life easier)."
msgstr ""
"あなたが変更を電子メールの形式でアップストリームに送信する貢献者の場合は、通"
"常どおりトピックブランチを使用する必要があります(上記参照)。 次に、 linkgit:"
"git-format-patch[1] を使用して、対応する電子メールを生成します(メンテナの作業"
"が楽になるため、手動でフォーマットするよりもこれを使うのを強く推奨します)。"

#. type: Block title
#: ../Documentation-sedout/gitworkflows.txt:424
#, no-wrap
msgid "format-patch/am: Publishing branches/topics"
msgstr "format-patch/am: Publishing branches/topics"

#. type: delimited block =
#: ../Documentation-sedout/gitworkflows.txt:429
msgid ""
"`git format-patch -M upstream..topic` to turn them into preformatted patch "
"files"
msgstr ""
"`git format-patch -M upstream..topic` を使用して、事前に形式が決まっている"
"パッチファイルに変換します"

#. type: delimited block =
#: ../Documentation-sedout/gitworkflows.txt:430
msgid "`git send-email --to=<recipient> <patches>`"
msgstr "`git send-email --to=<recipient> <patches>`"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:434
msgid ""
"See the linkgit:git-format-patch[1] and linkgit:git-send-email[1] manpages "
"for further usage notes."
msgstr ""
"使用上の注意については、 linkgit:git-format-patch[1] と linkgit:git-send-"
"email[1] のmanpageを参照してください。"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:438
msgid ""
"If the maintainer tells you that your patch no longer applies to the current "
"upstream, you will have to rebase your topic (you cannot use a merge because "
"you cannot format-patch merges):"
msgstr ""
"あなたのパッチがもはや現在の上流(upstream)に適用されなくなったとメンテナが告"
"げた場合は、トピックをリベースする必要があります(format-patch マージができな"
"いため、マージを使用できません):"

#. type: Block title
#: ../Documentation-sedout/gitworkflows.txt:439
#, no-wrap
msgid "format-patch/am: Keeping topics up to date"
msgstr "format-patch/am: Keeping topics up to date"

#. type: delimited block =
#: ../Documentation-sedout/gitworkflows.txt:443
msgid "`git pull --rebase <URL> <branch>`"
msgstr "`git pull --rebase <URL> <branch>`"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:448
msgid ""
"You can then fix the conflicts during the rebase.  Presumably you have not "
"published your topic other than by mail, so rebasing it is not a problem."
msgstr ""
"あなたはその後、リベース中に競合を修正できます。おそらくあなたはメール以外で"
"あなたのトピックを公開していないので、それをリベースすることは問題ではありま"
"せん。"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:452
msgid ""
"If you receive such a patch series (as maintainer, or perhaps as a reader of "
"the mailing list it was sent to), save the mails to files, create a new "
"topic branch and use 'git am' to import the commits:"
msgstr ""
"あなたがこのようなパッチシリーズを受け取った場合(メンテナとして、または送信先"
"のメーリングリストの読者として)、メールをファイルに保存し、新しいトピックブラ"
"ンチを作成し、 `git am` を使用してコミットをインポートします:"

#. type: Block title
#: ../Documentation-sedout/gitworkflows.txt:453
#, no-wrap
msgid "format-patch/am: Importing patches"
msgstr "format-patch/am: Importing patches"

#. type: delimited block =
#: ../Documentation-sedout/gitworkflows.txt:457
msgid "`git am < patch`"
msgstr "`git am < patch`"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:463
msgid ""
"One feature worth pointing out is the three-way merge, which can help if you "
"get conflicts: `git am -3` will use index information contained in patches "
"to figure out the merge base.  See linkgit:git-am[1] for other options."
msgstr ""
"指摘する価値のある機能の1つは、競合が発生した場合に役立つ3方向マージです。 "
"`git am -3` は、パッチに含まれるインデックス情報を使用して、マージベースを把"
"握します。他のオプションについては linkgit:git-am[1] を参照してください。"

#. type: Title -
#: ../Documentation-sedout/gitworkflows.txt:466
#, no-wrap
msgid "SEE ALSO"
msgstr "SEE ALSO"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:475
msgid ""
"linkgit:gittutorial[7], linkgit:git-push[1], linkgit:git-pull[1], linkgit:"
"git-merge[1], linkgit:git-rebase[1], linkgit:git-format-patch[1], linkgit:"
"git-send-email[1], linkgit:git-am[1]"
msgstr ""
"linkgit:gittutorial[7], linkgit:git-push[1], linkgit:git-pull[1], linkgit:"
"git-merge[1], linkgit:git-rebase[1], linkgit:git-format-patch[1], linkgit:"
"git-send-email[1], linkgit:git-am[1]"

#. type: Title -
#: ../Documentation-sedout/gitworkflows.txt:477
#, no-wrap
msgid "GIT"
msgstr "GIT"

#. type: Plain text
#: ../Documentation-sedout/gitworkflows.txt:478
msgid "Part of the linkgit:git[1] suite"
msgstr "Part of the linkgit:git[1] suite"
