# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 0.0\n"
"POT-Creation-Date: 2021-11-04 04:37+0900\n"
"PO-Revision-Date: 2022-06-19 13:50+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/git-reset.txt:2
#, no-wrap
msgid "git-reset(1)"
msgstr "git-reset(1)"

#. type: Title -
#: ../Documentation-sedout/git-reset.txt:5
#, no-wrap
msgid "NAME"
msgstr "NAME"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:7
msgid "git-reset - Reset current HEAD to the specified state"
msgstr "git-reset - 現在のHEADを指定の状態にリセットします"

#. type: Title -
#: ../Documentation-sedout/git-reset.txt:9
#, no-wrap
msgid "SYNOPSIS"
msgstr "SYNOPSIS"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:15
#, no-wrap
msgid ""
"'git reset' [-q] [<tree-ish>] [--] <pathspec>...\n"
"'git reset' [-q] [--pathspec-from-file=<file> [--pathspec-file-nul]] [<tree-ish>]\n"
"'git reset' (--patch | -p) [<tree-ish>] [--] [<pathspec>...]\n"
"'git reset' [--soft | --mixed [-N] | --hard | --merge | --keep] [-q] [<commit>]\n"
msgstr ""
"'git reset' [-q] [<tree-ish>] [--] <pathspec>...\n"
"'git reset' [-q] [--pathspec-from-file=<file> [--pathspec-file-nul]] [<tree-ish>]\n"
"'git reset' (--patch | -p) [<tree-ish>] [--] [<pathspec>...]\n"
"'git reset' [--soft | --mixed [-N] | --hard | --merge | --keep] [-q] [<commit>]\n"

#. type: Title -
#: ../Documentation-sedout/git-reset.txt:17
#, no-wrap
msgid "DESCRIPTION"
msgstr "DESCRIPTION"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:22
msgid ""
"In the first three forms, copy entries from `<tree-ish>` to the index.  In "
"the last form, set the current branch head (`HEAD`) to `<commit>`, "
"optionally modifying index and working tree to match.  The `<tree-ish>`/"
"`<commit>` defaults to `HEAD` in all forms."
msgstr "最初の3つの形式は、エントリを`<tree-ish>` からインデックスにコピーします。 最後の形式では、現在のブランチヘッド(`HEAD`) を `<commit>` に設定し、オプションでインデックスと作業ツリーを一致するように変更します。 `<tree-ish>`/`<commit>` は、すべての形式でデフォルトで `HEAD` になります。"

#. type: Labeled list
#: ../Documentation-sedout/git-reset.txt:23
#, no-wrap
msgid "'git reset' [-q] [<tree-ish>] [--] <pathspec>..."
msgstr "`git reset' [-q] [<tree-ish>] [--] <pathspec>...`"

#. type: Labeled list
#: ../Documentation-sedout/git-reset.txt:24
#, no-wrap
msgid "'git reset' [-q] [--pathspec-from-file=<file> [--pathspec-file-nul]] [<tree-ish>]"
msgstr "`git reset [-q] [--pathspec-from-file=<file> [--pathspec-file-nul]] [<tree-ish>]`"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:28
msgid ""
"These forms reset the index entries for all paths that match the "
"`<pathspec>` to their state at `<tree-ish>`.  (It does not affect the "
"working tree or the current branch.)"
msgstr "これらの形式は、 `<pathspec>` を `<tree-ish>` の状態に一致させるすべてのパスのインデックスエントリをリセットします。 (作業ツリーや現在のブランチには影響しません。)"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:32
msgid ""
"This means that `git reset <pathspec>` is the opposite of `git add "
"<pathspec>`. This command is equivalent to `git restore [--source=<tree-"
"ish>] --staged <pathspec>...`."
msgstr "これは、  `git reset <pathspec>` が `git add <pathspec>` の反対であることを意味します。 このコマンドは、 `git restore [--source=<tree-ish>] --staged <pathspec>...` と同等です。"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:39
msgid ""
"After running `git reset <pathspec>` to update the index entry, you can use "
"linkgit:git-restore[1] to check the contents out of the index to the working "
"tree. Alternatively, using linkgit:git-restore[1] and specifying a commit "
"with `--source`, you can copy the contents of a path out of a commit to the "
"index and to the working tree in one go."
msgstr "`git reset <pathspec>` を実行してインデックスエントリを更新した後、 linkgit:git-restore[1] を使用して、インデックスの内容を作業ツリーにチェックアウトできます。 または、 linkgit:git-restore[1] を使用し、 `--source` でコミットを指定すると、コミットからインデックスと作業ツリーへのパスの内容を一度にコピーできます。"

#. type: Labeled list
#: ../Documentation-sedout/git-reset.txt:40
#, no-wrap
msgid "'git reset' (--patch | -p) [<tree-ish>] [--] [<pathspec>...]"
msgstr "`git reset (--patch | -p) [<tree-ish>] [--] [<pathspec>...]`"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:44
msgid ""
"Interactively select hunks in the difference between the index and `<tree-"
"ish>` (defaults to `HEAD`).  The chosen hunks are applied in reverse to the "
"index."
msgstr "インデックスと `<tree-ish>` (デフォルトは `HEAD`)の違いでハンクを対話的に選択します。 選択したハンクは、インデックスから適用を外します(apply in reverse)。"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:48
msgid ""
"This means that `git reset -p` is the opposite of `git add -p`, i.e.  you "
"can use it to selectively reset hunks. See the ``Interactive Mode'' section "
"of linkgit:git-add[1] to learn how to operate the `--patch` mode."
msgstr "これは、 `git reset -p` が `git add -p` の反対であることを意味します。つまり、これを使用してハンクを選択的にリセットできます。 `--patch` モードの操作方法については、 linkgit:git-add[1] の「Interactive Mode」セクションを参照してください。"

#. type: Labeled list
#: ../Documentation-sedout/git-reset.txt:49
#, no-wrap
msgid "'git reset' [<mode>] [<commit>]"
msgstr "`git reset [<mode>] [<commit>]`"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:54
msgid ""
"This form resets the current branch head to `<commit>` and possibly updates "
"the index (resetting it to the tree of `<commit>`) and the working tree "
"depending on `<mode>`. If `<mode>` is omitted, defaults to `--mixed`. The "
"`<mode>` must be one of the following:"
msgstr "この形式は、現在のブランチヘッドを `<commit>` にリセットし、場合によっては、 `<mode>` に応じて、インデックス(`<commit>` のツリーにリセット)と作業ツリーを更新します。 `<mode>` を省略すると、デフォルトで `--mixed` になります。 `<mode>` は以下のいずれかである必要があります:"

#. type: Labeled list
#: ../Documentation-sedout/git-reset.txt:56
#, no-wrap
msgid "`--soft`"
msgstr "`--soft`"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:61
msgid ""
"Does not touch the index file or the working tree at all (but resets the "
"head to `<commit>`, just like all modes do). This leaves all your changed "
"files \"Changes to be committed\", as `git status` would put it."
msgstr "インデックスファイルまたは作業ツリーにはまったく触りません(しかし、すべてのモードと同様に、ヘッドを `<commit>` にリセットします)。 これにより、 `git status` が示すように、変更されたすべてのファイルが「コミットされる変更」(Changes to be committed)のままになります。"

#. type: Labeled list
#: ../Documentation-sedout/git-reset.txt:62
#, no-wrap
msgid "`--mixed`"
msgstr "`--mixed`"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:66
msgid ""
"Resets the index but not the working tree (i.e., the changed files are "
"preserved but not marked for commit) and reports what has not been updated. "
"This is the default action."
msgstr "インデックスをリセットしますが、作業ツリーはリセットしません(つまり、変更されたファイルは保持されますが、コミットのマークは付けられません)。更新されていないものを報告します。 これがデフォルトのアクションです。"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:69
msgid ""
"If `-N` is specified, removed paths are marked as intent-to-add (see linkgit:"
"git-add[1])."
msgstr "`-N` が指定されている場合、削除されたパスはadd対象(intent-to-add)としてマークされます(linkgit:git-add[1] 参照)。"

#. type: Labeled list
#: ../Documentation-sedout/git-reset.txt:70
#, no-wrap
msgid "`--hard`"
msgstr "`--hard`"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:73
msgid ""
"Resets the index and working tree. Any changes to tracked files in the "
"working tree since `<commit>` are discarded."
msgstr "インデックスと作業ツリーをリセットします。 `<commit>` 以降の作業ツリー内の追跡中のファイルへの変更はすべて破棄されます。"

#. type: Labeled list
#: ../Documentation-sedout/git-reset.txt:74
#, no-wrap
msgid "`--merge`"
msgstr "`--merge`"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:81
msgid ""
"Resets the index and updates the files in the working tree that are "
"different between `<commit>` and `HEAD`, but keeps those which are different "
"between the index and working tree (i.e. which have changes which have not "
"been added).  If a file that is different between `<commit>` and the index "
"has unstaged changes, reset is aborted."
msgstr "インデックスをリセットし、作業ツリー内の `<commit>` と `HEAD` の間で異なるファイルを更新しますが、インデックスと作業ツリーの間で異なるファイル（つまり、まだ追加されていない変更があるもの）は保持します。 もし `<commit>` とインデックスの間で異なるファイルに、ステージされていない変更がある場合、リセットは中断(abort)されます。"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:84
msgid ""
"In other words, `--merge` does something like a `git read-tree -u -m "
"<commit>`, but carries forward unmerged index entries."
msgstr "つまり、 `--merge` は `git read-tree -u -m <commit>` のようなことをしますが、アンマージインデックスエントリは引き継ぎます。"

#. type: Labeled list
#: ../Documentation-sedout/git-reset.txt:85
#, no-wrap
msgid "`--keep`"
msgstr "`--keep`"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:90
msgid ""
"Resets index entries and updates files in the working tree that are "
"different between `<commit>` and `HEAD`.  If a file that is different "
"between `<commit>` and `HEAD` has local changes, reset is aborted."
msgstr "インデックスエントリをリセットし、 `<commit>` と `HEAD` で異なる作業ツリー内のファイルを更新します。  `<commit>` と `HEAD` で異なるファイルにローカル変更がある場合、リセットは中止(abort)されます。"

#. type: Labeled list
#: ../Documentation-sedout/git-reset.txt:91
#, no-wrap
msgid "`--[no-]recurse-submodules`"
msgstr "`--[no-]recurse-submodules`"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:96
msgid ""
"When the working tree is updated, using --recurse-submodules will also "
"recursively reset the working tree of all active submodules according to the "
"commit recorded in the superproject, also setting the submodules' HEAD to be "
"detached at that commit."
msgstr "作業ツリーが更新される時、 `--recurse-submodules` を使用すると、スーパープロジェクトに記録されたコミットに従ってすべてのアクティブなサブモジュールの作業ツリーが再帰的にリセットされ、そのコミット時にサブモジュールのHEADが切り離されるよう(detach)に設定されます。"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:100
msgid ""
"See \"Reset, restore and revert\" in linkgit:git[1] for the differences "
"between the three commands."
msgstr "3つのコマンドの違いについては、 linkgit:git[1] の「Reset, restore and revert」を参照してください。"

#. type: Title -
#: ../Documentation-sedout/git-reset.txt:103
#, no-wrap
msgid "OPTIONS"
msgstr "OPTIONS"

#. type: Labeled list
#: ../Documentation-sedout/git-reset.txt:105
#, no-wrap
msgid "`-q`"
msgstr "`-q`"

#. type: Labeled list
#: ../Documentation-sedout/git-reset.txt:106
#, no-wrap
msgid "`--quiet`"
msgstr "`--quiet`"

#. type: Labeled list
#: ../Documentation-sedout/git-reset.txt:107
#, no-wrap
msgid "`--no-quiet`"
msgstr "`--no-quiet`"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:111
msgid ""
"Be quiet, only report errors. The default behavior is set by the `reset."
"quiet` config option. `--quiet` and `--no-quiet` will override the default "
"behavior."
msgstr "静かにして、エラーだけを報告します。 デフォルトの動作は、 `reset.quiet` 構成オプションによって設定されます。  `--quiet` と `--no-quiet` はデフォルトの動作を上書きします。"

#. type: Labeled list
#: ../Documentation-sedout/git-reset.txt:112
#, no-wrap
msgid "`--pathspec-from-file=<file>`"
msgstr "`--pathspec-from-file=<file>`"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:119
msgid ""
"Pathspec is passed in `<file>` instead of commandline args. If `<file>` is "
"exactly `-` then standard input is used. Pathspec elements are separated by "
"LF or CR/LF. Pathspec elements can be quoted as explained for the "
"configuration variable `core.quotePath` (see linkgit:git-config[1]). See "
"also `--pathspec-file-nul` and global `--literal-pathspecs`."
msgstr "パススペックは、コマンドライン引数の代わりに `<file>` で渡されます。 `<file>` が正確に `-` の場合、標準入力が使用されます。 Pathspec要素は、LFまたはCR/LFで区切られます。 パススペック要素は、構成変数 `core.quotePath` で説明されているようにクォートできます(linkgit:git-config[1] 参照)。 `--pathspec-file-nul` および グローバルの `--literal-pathspecs` も参照してください。"

#. type: Labeled list
#: ../Documentation-sedout/git-reset.txt:120
#, no-wrap
msgid "`--pathspec-file-nul`"
msgstr "`--pathspec-file-nul`"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:124
msgid ""
"Only meaningful with `--pathspec-from-file`. Pathspec elements are separated "
"with NUL character and all other characters are taken literally (including "
"newlines and quotes)."
msgstr "`--pathspec-from-file` 指定時のみ意味があります。 パススペック要素はNUL文字で区切られ、他のすべての文字は文字通りに解釈されます(改行と引用符を含む)。"

#. type: Labeled list
#: ../Documentation-sedout/git-reset.txt:125
#, no-wrap
msgid "\\--"
msgstr "`--`"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:127
msgid "Do not interpret any more arguments as options."
msgstr "これ以降の引数をオプションとして解釈しないでください。"

#. type: Labeled list
#: ../Documentation-sedout/git-reset.txt:128
#, no-wrap
msgid "<pathspec>..."
msgstr "<pathspec>..."

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:130
msgid "Limits the paths affected by the operation."
msgstr "操作の影響を受けるパスを制限します。"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:132
msgid "For more details, see the 'pathspec' entry in linkgit:gitglossary[7]."
msgstr "詳細については、 linkgit:gitglossary[7] の「pathspec」エントリを参照してください。"

#. type: Title -
#: ../Documentation-sedout/git-reset.txt:134
#, no-wrap
msgid "EXAMPLES"
msgstr "EXAMPLES"

#. type: Labeled list
#: ../Documentation-sedout/git-reset.txt:136
#, no-wrap
msgid "Undo add"
msgstr "Undo add"

#. type: delimited block -
#: ../Documentation-sedout/git-reset.txt:144
#, no-wrap
msgid ""
"$ edit                                     <1>\n"
"$ git add frotz.c filfre.c\n"
"$ mailx                                    <2>\n"
"$ git reset                                <3>\n"
"$ git pull git://info.example.com/ nitfol  <4>\n"
msgstr ""
"$ edit                                     <1>\n"
"$ git add frotz.c filfre.c\n"
"$ mailx                                    <2>\n"
"$ git reset                                <3>\n"
"$ git pull git://info.example.com/ nitfol  <4>\n"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:150
msgid ""
"You are happily working on something, and find the changes in these files "
"are in good order.  You do not want to see them when you run `git diff`, "
"because you plan to work on other files and changes with these files are "
"distracting."
msgstr "あなたは喜んで何かに取り組んでおり、これらのファイルの変更が適切に行われていることがわかります。 あなたが `git diff` を実行するときにそれらを表示したくないのは、他のファイルで作業することを計画していて、これらのファイルでの変更が気を散らすためです。"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:151
msgid "Somebody asks you to pull, and the changes sound worthy of merging."
msgstr "誰かがあなたにプルを要求し、その変更がマージに値すると思われる場合。"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:156
msgid ""
"However, you already dirtied the index (i.e. your index does not match the "
"`HEAD` commit).  But you know the pull you are going to make does not affect "
"`frotz.c` or `filfre.c`, so you revert the index changes for these two "
"files.  Your changes in working tree remain there."
msgstr "しかしながら、あなたはすでにインデックスをダーティにしています(つまり、インデックスが `HEAD` コミットと一致していません)。 ただし、これから行うプルは `frotz.c` または `filfre.c` には影響しないため、これら2つのファイルのインデックスの変更を元に戻します。 作業ツリーのあなたの変更はそのまま残ります。"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:158
msgid ""
"Then you can pull and merge, leaving `frotz.c` and `filfre.c` changes still "
"in the working tree."
msgstr "それから、あなたは `frotz.c` と `filfre.c` の変更を作業ツリーに残したまま、プルしてマージできます。"

#. type: Labeled list
#: ../Documentation-sedout/git-reset.txt:159
#, no-wrap
msgid "Undo a commit and redo"
msgstr "Undo a commit and redo"

#. type: delimited block -
#: ../Documentation-sedout/git-reset.txt:166
#, no-wrap
msgid ""
"$ git commit ...\n"
"$ git reset --soft HEAD^      <1>\n"
"$ edit                        <2>\n"
"$ git commit -a -c ORIG_HEAD  <3>\n"
msgstr ""
"$ git commit ...\n"
"$ git reset --soft HEAD^      <1>\n"
"$ edit                        <2>\n"
"$ git commit -a -c ORIG_HEAD  <3>\n"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:171
msgid ""
"This is most often done when you remembered what you just committed is "
"incomplete, or you misspelled your commit message, or both.  Leaves working "
"tree as it was before \"reset\"."
msgstr "これは、コミットした内容が不完全であることを思い出した場合、コミットメッセージのスペルを間違えた場合、またはその両方の場合に最もよく行われます。 「リセット」前の状態で作業ツリーを残します。"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:172
msgid "Make corrections to working tree files."
msgstr "作業ツリーファイルを修正します。"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:175
msgid ""
"\"reset\" copies the old head to `.git/ORIG_HEAD`; redo the commit by "
"starting with its log message.  If you do not need to edit the message "
"further, you can give `-C` option instead."
msgstr "「リセット」は古いヘッドを `.git/ORIG_HEAD` にコピーします。 ログメッセージから始めて、コミットをやり直します。 メッセージをさらに編集する必要がない場合は、代わりに `-C` オプションを指定できます。"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:177
msgid "See also the `--amend` option to linkgit:git-commit[1]."
msgstr "linkgit:git-commit[1] の `--amend` オプションも参照してください。"

#. type: Labeled list
#: ../Documentation-sedout/git-reset.txt:178
#, no-wrap
msgid "Undo a commit, making it a topic branch"
msgstr "コミットを元に戻し(undo)、トピックブランチにします"

#. type: delimited block -
#: ../Documentation-sedout/git-reset.txt:184
#, no-wrap
msgid ""
"$ git branch topic/wip          <1>\n"
"$ git reset --hard HEAD~3       <2>\n"
"$ git switch topic/wip          <3>\n"
msgstr ""
"$ git branch topic/wip          <1>\n"
"$ git reset --hard HEAD~3       <2>\n"
"$ git switch topic/wip          <3>\n"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:190
msgid ""
"You have made some commits, but realize they were premature to be in the "
"`master` branch.  You want to continue polishing them in a topic branch, so "
"create `topic/wip` branch off of the current `HEAD`."
msgstr "あなたはいくつかのコミットをしましたが、それらが `master` ブランチに入るのは時期尚早であることに気づきました。 あなたはトピックブランチでそれらを磨き続けたいので、現在の `HEAD` から `topic/wip` ブランチを作成します。"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:191
msgid "Rewind the master branch to get rid of those three commits."
msgstr "masterブランチを巻き戻して、これら3つのコミットを取り除きます。"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:192
msgid "Switch to `topic/wip` branch and keep working."
msgstr "`topic/wip` ブランチに切り替えて、作業を続けます。"

#. type: Labeled list
#: ../Documentation-sedout/git-reset.txt:193
#, no-wrap
msgid "Undo commits permanently"
msgstr "Undo commits permanently"

#. type: delimited block -
#: ../Documentation-sedout/git-reset.txt:198
#, no-wrap
msgid ""
"$ git commit ...\n"
"$ git reset --hard HEAD~3   <1>\n"
msgstr ""
"$ git commit ...\n"
"$ git reset --hard HEAD~3   <1>\n"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:205
msgid ""
"The last three commits (`HEAD`, `HEAD^`, and `HEAD~2`) were bad and you do "
"not want to ever see them again.  Do *not* do this if you have already given "
"these commits to somebody else.  (See the \"RECOVERING FROM UPSTREAM REBASE"
"\" section in linkgit:git-rebase[1] for the implications of doing so.)"
msgstr "最後の3コミット(`HEAD` と `HEAD^` と `HEAD~2`)は悪かったので、二度と見たくありません。 あなたがこれらのコミットを他の誰かにすでに与えている場合は、これを行ってはいけません。 (そうすることの意味については、 linkgit:git-rebase[1] の「RECOVERING FROM UPSTREAM REBASE」セクションを参照してください。)"

#. type: Labeled list
#: ../Documentation-sedout/git-reset.txt:206
#, no-wrap
msgid "Undo a merge or pull"
msgstr "Undo a merge or pull"

#. type: delimited block -
#: ../Documentation-sedout/git-reset.txt:218
#, no-wrap
msgid ""
"$ git pull                         <1>\n"
"Auto-merging nitfol\n"
"CONFLICT (content): Merge conflict in nitfol\n"
"Automatic merge failed; fix conflicts and then commit the result.\n"
"$ git reset --hard                 <2>\n"
"$ git pull . topic/branch          <3>\n"
"Updating from 41223... to 13134...\n"
"Fast-forward\n"
"$ git reset --hard ORIG_HEAD       <4>\n"
msgstr ""
"$ git pull                         <1>\n"
"Auto-merging nitfol\n"
"CONFLICT (content): Merge conflict in nitfol\n"
"Automatic merge failed; fix conflicts and then commit the result.\n"
"$ git reset --hard                 <2>\n"
"$ git pull . topic/branch          <3>\n"
"Updating from 41223... to 13134...\n"
"Fast-forward\n"
"$ git reset --hard ORIG_HEAD       <4>\n"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:223
msgid ""
"Try to update from the upstream resulted in a lot of conflicts; you were not "
"ready to spend a lot of time merging right now, so you decide to do that "
"later."
msgstr "アップストリームから更新しようとすると、多くの競合が発生しました。 あなたは現在、マージに多くの時間を費やす準備ができていなかったため、後でマージすることにしました。"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:226
msgid ""
"\"pull\" has not made merge commit, so `git reset --hard` which is a synonym "
"for `git reset --hard HEAD` clears the mess from the index file and the "
"working tree."
msgstr "「プル」はマージコミットを行っていないため、 `git reset--hard HEAD` の同義語である `git reset --hard` は、インデックスファイルと作業ツリーから混乱を取り除きます。"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:228
msgid ""
"Merge a topic branch into the current branch, which resulted in a fast-"
"forward."
msgstr "トピックブランチを現在のブランチにマージします。これにより、早送り(fast-forward)が行われました。"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:233
msgid ""
"But you decided that the topic branch is not ready for public consumption "
"yet.  \"pull\" or \"merge\" always leaves the original tip of the current "
"branch in `ORIG_HEAD`, so resetting hard to it brings your index file and "
"the working tree back to that state, and resets the tip of the branch to "
"that commit."
msgstr "しかし、あなたはそのトピックブランチがまだ一般公開の準備ができていないと判断しました。 「pull」または「merge」は常に現在のブランチの元の先端を `ORIG_HEAD` に残すため、ハードにリセットするとインデックスファイルと作業ツリーがその状態に戻り、ブランチの先端がそのコミットにリセットされます。"

#. type: Labeled list
#: ../Documentation-sedout/git-reset.txt:234
#, no-wrap
msgid "Undo a merge or pull inside a dirty working tree"
msgstr "Undo a merge or pull inside a dirty working tree"

#. type: delimited block -
#: ../Documentation-sedout/git-reset.txt:243
#, no-wrap
msgid ""
"$ git pull                         <1>\n"
"Auto-merging nitfol\n"
"Merge made by recursive.\n"
" nitfol                |   20 +++++----\n"
" ...\n"
"$ git reset --merge ORIG_HEAD      <2>\n"
msgstr ""
"$ git pull                         <1>\n"
"Auto-merging nitfol\n"
"Merge made by recursive.\n"
" nitfol                |   20 +++++----\n"
" ...\n"
"$ git reset --merge ORIG_HEAD      <2>\n"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:249
msgid ""
"Even if you may have local modifications in your working tree, you can "
"safely say `git pull` when you know that the change in the other branch does "
"not overlap with them."
msgstr "作業ツリーにローカルの変更がある場合でも、他のブランチの変更がそれらと重複していないことがわかっている場合は、「git pull」と安全に言うことができます。"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:254
msgid ""
"After inspecting the result of the merge, you may find that the change in "
"the other branch is unsatisfactory.  Running `git reset --hard ORIG_HEAD` "
"will let you go back to where you were, but it will discard your local "
"changes, which you do not want.  `git reset --merge` keeps your local "
"changes."
msgstr "マージの結果を調べた後、他のブランチでの変更が不十分であることがわかる場合があります。 `git reset --hard ORIG_HEAD` を実行すると、元の場所に戻ることができますが、不要なローカルの変更は破棄されます。 `git reset --merge` は、ローカルの変更を保持します。"

#. type: Labeled list
#: ../Documentation-sedout/git-reset.txt:256
#, no-wrap
msgid "Interrupted workflow"
msgstr "Interrupted workflow"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:262
msgid ""
"Suppose you are interrupted by an urgent fix request while you are in the "
"middle of a large change.  The files in your working tree are not in any "
"shape to be committed yet, but you need to get to the other branch for a "
"quick bugfix."
msgstr "あなたが大規模な変更をしている最中に、緊急の修正リクエストによって中断されたとします。 作業ツリー内のファイルはまだコミットできる形ではありませんが、バグをすばやく修正するには、他のブランチにアクセスする必要があります。"

#. type: delimited block -
#: ../Documentation-sedout/git-reset.txt:273
#, no-wrap
msgid ""
"$ git switch feature  ;# you were working in \"feature\" branch and\n"
"$ work work work      ;# got interrupted\n"
"$ git commit -a -m \"snapshot WIP\"                 <1>\n"
"$ git switch master\n"
"$ fix fix fix\n"
"$ git commit ;# commit with real log\n"
"$ git switch feature\n"
"$ git reset --soft HEAD^ ;# go back to WIP state  <2>\n"
"$ git reset                                       <3>\n"
msgstr ""
"$ git switch feature  ;# you were working in \"feature\" branch and\n"
"$ work work work      ;# got interrupted\n"
"$ git commit -a -m \"snapshot WIP\"                 <1>\n"
"$ git switch master\n"
"$ fix fix fix\n"
"$ git commit ;# commit with real log\n"
"$ git switch feature\n"
"$ git reset --soft HEAD^ ;# go back to WIP state  <2>\n"
"$ git reset                                       <3>\n"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:276
msgid "This commit will get blown away so a throw-away log message is OK."
msgstr "このコミットは吹き飛ばされちゃうので、投げやりなログメッセージでOKです。"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:278
msgid ""
"This removes the 'WIP' commit from the commit history, and sets your working "
"tree to the state just before you made that snapshot."
msgstr "これにより、コミット履歴から「WIP」コミットが削除され、作業ツリーがスナップショットを作成する直前の状態に設定されます。"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:281
msgid ""
"At this point the index file still has all the WIP changes you committed as "
"'snapshot WIP'.  This updates the index to show your WIP files as "
"uncommitted."
msgstr "この時点で、インデックスファイルには「スナップショットWIP」としてコミットしたすべてのWIP変更がまだ含まれています。 これにより、インデックスが更新され、WIPファイルがコミットされていないものとして表示されます。"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:283
msgid "See also linkgit:git-stash[1]."
msgstr "linkgit:git-stash[1] も参照して下さい。"

#. type: Labeled list
#: ../Documentation-sedout/git-reset.txt:284
#, no-wrap
msgid "Reset a single file in the index"
msgstr "Reset a single file in the index"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:289
msgid ""
"Suppose you have added a file to your index, but later decide you do not "
"want to add it to your commit. You can remove the file from the index while "
"keeping your changes with git reset."
msgstr "インデックスにファイルを追加したが、後でそれをコミットに追加したくないと判断したとします。 git resetを使用して変更を保持しながら、ファイルをインデックスから削除できます。"

#. type: delimited block -
#: ../Documentation-sedout/git-reset.txt:294
#, no-wrap
msgid ""
"$ git reset -- frotz.c                      <1>\n"
"$ git commit -m \"Commit files in index\"     <2>\n"
"$ git add frotz.c                           <3>\n"
msgstr ""
"$ git reset -- frotz.c                      <1>\n"
"$ git commit -m \"Commit files in index\"     <2>\n"
"$ git add frotz.c                           <3>\n"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:298
msgid ""
"This removes the file from the index while keeping it in the working "
"directory."
msgstr "これにより、ファイルは作業ディレクトリに保持されたまま、インデックスから削除されます。"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:299
msgid "This commits all other changes in the index."
msgstr "これにより、インデックス内の他のすべての変更がコミットされます。"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:300
msgid "Adds the file to the index again."
msgstr "そのファイルをインデックスに再度追加します。"

#. type: Labeled list
#: ../Documentation-sedout/git-reset.txt:301
#, no-wrap
msgid "Keep changes in working tree while discarding some previous commits"
msgstr "以前のコミットを破棄しつつ作業ツリーの変更を保持する"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:308
msgid ""
"Suppose you are working on something and you commit it, and then you "
"continue working a bit more, but now you think that what you have in your "
"working tree should be in another branch that has nothing to do with what "
"you committed previously. You can start a new branch and reset it while "
"keeping the changes in your working tree."
msgstr "何かに取り組んでいて、それをコミットしてから、もう少し作業を続けたとして、作業ツリーにあるものは、以前にコミットしたものとは関係のない別のブランチにあるはずだと思います。 作業ツリーに変更を加えたまま、新しいブランチを開始してリセットできます。"

#. type: delimited block -
#: ../Documentation-sedout/git-reset.txt:317
#, no-wrap
msgid ""
"$ git tag start\n"
"$ git switch -c branch1\n"
"$ edit\n"
"$ git commit ...                            <1>\n"
"$ edit\n"
"$ git switch -c branch2                     <2>\n"
"$ git reset --keep start                    <3>\n"
msgstr ""
"$ git tag start\n"
"$ git switch -c branch1\n"
"$ edit\n"
"$ git commit ...                            <1>\n"
"$ edit\n"
"$ git switch -c branch2                     <2>\n"
"$ git reset --keep start                    <3>\n"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:320
msgid "This commits your first edits in `branch1`."
msgstr "これにより、`branch1` にあなたの最初の編集がコミットされます。"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:324
msgid ""
"In the ideal world, you could have realized that the earlier commit did not "
"belong to the new topic when you created and switched to `branch2` (i.e. "
"`git switch -c branch2 start`), but nobody is perfect."
msgstr "理想的な世界では、 あなたが `branch2` (つまり、 `git switch -c branch2 start`)を作成して切り替えたときに、以前のコミットが新しいトピックに属していないことに気付くかもしれませんが、完璧な人は誰もいません。"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:326
msgid ""
"But you can use `reset --keep` to remove the unwanted commit after you "
"switched to `branch2`."
msgstr "しかし、 あなたが `branch2` に切り替えた後は、 `reset --keep` を使用して不要なコミットを削除できます。"

#. type: Labeled list
#: ../Documentation-sedout/git-reset.txt:327
#, no-wrap
msgid "Split a commit apart into a sequence of commits"
msgstr "Split a commit apart into a sequence of commits"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:335
msgid ""
"Suppose that you have created lots of logically separate changes and "
"committed them together. Then, later you decide that it might be better to "
"have each logical chunk associated with its own commit. You can use git "
"reset to rewind history without changing the contents of your local files, "
"and then successively use `git add -p` to interactively select which hunks "
"to include into each commit, using `git commit -c` to pre-populate the "
"commit message."
msgstr "論理的に別々の変更をたくさん作成し、それらを一緒にコミットしたとします。 次に、後で、各論理チャンクを独自のコミットに関連付ける方がよい場合があると判断したとします。 あなたが git reset を使用すると、ローカルファイルの内容を変更せずに履歴を巻き戻すことができます。その後、`git add -p` を使用して各コミットに含めるハンクを対話的に選択し、 `git commit -c` でコミットメッセージをあらかじめ入力しておくことができます。"

#. type: delimited block -
#: ../Documentation-sedout/git-reset.txt:345
#, no-wrap
msgid ""
"$ git reset -N HEAD^                        <1>\n"
"$ git add -p                                <2>\n"
"$ git diff --cached                         <3>\n"
"$ git commit -c HEAD@{1}                    <4>\n"
"...                                         <5>\n"
"$ git add ...                               <6>\n"
"$ git diff --cached                         <7>\n"
"$ git commit ...                            <8>\n"
msgstr ""
"$ git reset -N HEAD^                        <1>\n"
"$ git add -p                                <2>\n"
"$ git diff --cached                         <3>\n"
"$ git commit -c HEAD@{1}                    <4>\n"
"...                                         <5>\n"
"$ git add ...                               <6>\n"
"$ git diff --cached                         <7>\n"
"$ git commit ...                            <8>\n"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:351
msgid ""
"First, reset the history back one commit so that we remove the original "
"commit, but leave the working tree with all the changes. The -N ensures that "
"any new files added with `HEAD` are still marked so that `git add -p` will "
"find them."
msgstr "まず、履歴をあるコミットにリセットして、元のコミットを削除しますが、すべての変更を作業ツリーに残します。 `-N` を使用すると、 `HEAD` で追加された新しいファイルにマークが付けられ、 `git add -p` がそれらを検出できるようになります。"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:355
msgid ""
"Next, we interactively select diff hunks to add using the `git add -p` "
"facility. This will ask you about each diff hunk in sequence and you can use "
"simple commands such as \"yes, include this\", \"No don't include this\" or "
"even the very powerful \"edit\" facility."
msgstr "次に、 私達は `git add -p` 機能を使用して、追加するdiffハンクを対話的に選択します。 これにより、各diffハンクについて順番に尋ねられ、「はい、これを含める」、「いいえ、これを含めない」、または非常に強力な「編集」機能などの簡単なコマンドを使用できます。"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:359
msgid ""
"Once satisfied with the hunks you want to include, you should verify what "
"has been prepared for the first commit by using `git diff --cached`. This "
"shows all the changes that have been moved into the index and are about to "
"be committed."
msgstr "あなたが含めたいハンクに満足したら、  `git diff --cached` を使用して、最初のコミットのために何が準備されているかを確認する必要があります。 これは、インデックスに移動され、コミットされようとしているすべての変更を示しています。"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:366
msgid ""
"Next, commit the changes stored in the index. The `-c` option specifies to "
"pre-populate the commit message from the original message that you started "
"with in the first commit. This is helpful to avoid retyping it. The `HEAD@{1}"
"` is a special notation for the commit that `HEAD` used to be at prior to "
"the original reset commit (1 change ago).  See linkgit:git-reflog[1] for "
"more details. You may also use any other valid commit reference."
msgstr "次に、インデックスに保存されている変更をコミットします。 `-c` オプションは、最初のコミットで開始した元のメッセージからコミットメッセージを事前入力することを指定します。 これは、再入力を避けるのに役立ちます。 `HEAD@{1}` は、元のリセットコミット(1変更前)の前に `HEAD` が使用されていたコミットの特別な表記です。 詳細については、 linkgit:git-reflog[1] を参照してください。 他の有効なコミット参照を使用することもできます。"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:368
msgid ""
"You can repeat steps 2-4 multiple times to break the original code into any "
"number of commits."
msgstr "あなたは手順2〜4を複数回繰り返して、元のコードを任意の数のコミットに分割できます。"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:371
msgid ""
"Now you've split out many of the changes into their own commits, and might "
"no longer use the patch mode of `git add`, in order to select all remaining "
"uncommitted changes."
msgstr "さて、あなたは多くの変更をそれぞれのコミットに分割したので、残りの未コミットの変更をすべて選択するために、もはや `git add` のパッチモードは使用しないかもしれません。"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:374
msgid ""
"Once again, check to verify that you've included what you want to. You may "
"also wish to verify that git diff doesn't show any remaining changes to be "
"committed later."
msgstr "もう一度、必要なものが含まれていることを確認してください。 また、git diffにて後でコミットする残りの変更が表示されないことを確認することもできます。"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:375
msgid "And finally create the final commit."
msgstr "そして最後に最終コミットを作成します。"

#. type: Title -
#: ../Documentation-sedout/git-reset.txt:378
#, no-wrap
msgid "DISCUSSION"
msgstr "DISCUSSION"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:381
msgid "The tables below show what happens when running:"
msgstr "以下の表は、実行時に何が起こるかを示しています:"

#. type: delimited block -
#: ../Documentation-sedout/git-reset.txt:384
#, no-wrap
msgid "git reset --option target\n"
msgstr "git reset --option target\n"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:388
msgid ""
"to reset the `HEAD` to another commit (`target`) with the different reset "
"options depending on the state of the files."
msgstr "ファイルの状態に応じて異なるリセットオプションを使用して、 `HEAD` を別のコミット(`target`)にリセットします。"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:397
msgid ""
"In these tables, `A`, `B`, `C` and `D` are some different states of a file. "
"For example, the first line of the first table means that if a file is in "
"state `A` in the working tree, in state `B` in the index, in state `C` in "
"`HEAD` and in state `D` in the target, then `git reset --soft target` will "
"leave the file in the working tree in state `A` and in the index in state "
"`B`.  It resets (i.e. moves) the `HEAD` (i.e. the tip of the current branch, "
"if you are on one) to `target` (which has the file in state `D`)."
msgstr "これらの表で、 `A` 、`B` 、`C` 、`D` はファイルのいくつかの異なる状態を表しています。例えば、最初のテーブルの1行目は、あるファイルが作業ツリーの状態 `A` 、インデックスの状態 `B` 、HEADの状態 `C`、ターゲットの状態 `D` にある場合、 `git reset --soft target` は作業ツリーの状態 `A` とインデックスの状態 `B`  を残したままにすることを意味しています。 これは、`HEAD` (つまり、現在のブランチの先端)を `target` (状態 `D` のファイルがある)にリセット(つまり移動)するものです。"

#. type: delimited block .
#: ../Documentation-sedout/git-reset.txt:406
#, no-wrap
msgid ""
"working index HEAD target         working index HEAD\n"
"----------------------------------------------------\n"
" A       B     C    D     --soft   A       B     D\n"
"\t\t\t  --mixed  A       D     D\n"
"\t\t\t  --hard   D       D     D\n"
"\t\t\t  --merge (disallowed)\n"
"\t\t\t  --keep  (disallowed)\n"
msgstr ""
"working index HEAD target         working index HEAD\n"
"----------------------------------------------------\n"
" A       B     C    D     --soft   A       B     D\n"
"\t\t\t  --mixed  A       D     D\n"
"\t\t\t  --hard   D       D     D\n"
"\t\t\t  --merge (disallowed)\n"
"\t\t\t  --keep  (disallowed)\n"

#. type: delimited block .
#: ../Documentation-sedout/git-reset.txt:416
#, no-wrap
msgid ""
"working index HEAD target         working index HEAD\n"
"----------------------------------------------------\n"
" A       B     C    C     --soft   A       B     C\n"
"\t\t\t  --mixed  A       C     C\n"
"\t\t\t  --hard   C       C     C\n"
"\t\t\t  --merge (disallowed)\n"
"\t\t\t  --keep   A       C     C\n"
msgstr ""
"working index HEAD target         working index HEAD\n"
"----------------------------------------------------\n"
" A       B     C    C     --soft   A       B     C\n"
"\t\t\t  --mixed  A       C     C\n"
"\t\t\t  --hard   C       C     C\n"
"\t\t\t  --merge (disallowed)\n"
"\t\t\t  --keep   A       C     C\n"

#. type: delimited block .
#: ../Documentation-sedout/git-reset.txt:426
#, no-wrap
msgid ""
"working index HEAD target         working index HEAD\n"
"----------------------------------------------------\n"
" B       B     C    D     --soft   B       B     D\n"
"\t\t\t  --mixed  B       D     D\n"
"\t\t\t  --hard   D       D     D\n"
"\t\t\t  --merge  D       D     D\n"
"\t\t\t  --keep  (disallowed)\n"
msgstr ""
"working index HEAD target         working index HEAD\n"
"----------------------------------------------------\n"
" B       B     C    D     --soft   B       B     D\n"
"\t\t\t  --mixed  B       D     D\n"
"\t\t\t  --hard   D       D     D\n"
"\t\t\t  --merge  D       D     D\n"
"\t\t\t  --keep  (disallowed)\n"

#. type: delimited block .
#: ../Documentation-sedout/git-reset.txt:436
#, no-wrap
msgid ""
"working index HEAD target         working index HEAD\n"
"----------------------------------------------------\n"
" B       B     C    C     --soft   B       B     C\n"
"\t\t\t  --mixed  B       C     C\n"
"\t\t\t  --hard   C       C     C\n"
"\t\t\t  --merge  C       C     C\n"
"\t\t\t  --keep   B       C     C\n"
msgstr ""
"working index HEAD target         working index HEAD\n"
"----------------------------------------------------\n"
" B       B     C    C     --soft   B       B     C\n"
"\t\t\t  --mixed  B       C     C\n"
"\t\t\t  --hard   C       C     C\n"
"\t\t\t  --merge  C       C     C\n"
"\t\t\t  --keep   B       C     C\n"

#. type: delimited block .
#: ../Documentation-sedout/git-reset.txt:446
#, no-wrap
msgid ""
"working index HEAD target         working index HEAD\n"
"----------------------------------------------------\n"
" B       C     C    D     --soft   B       C     D\n"
"\t\t\t  --mixed  B       D     D\n"
"\t\t\t  --hard   D       D     D\n"
"\t\t\t  --merge (disallowed)\n"
"\t\t\t  --keep  (disallowed)\n"
msgstr ""
"working index HEAD target         working index HEAD\n"
"----------------------------------------------------\n"
" B       C     C    D     --soft   B       C     D\n"
"\t\t\t  --mixed  B       D     D\n"
"\t\t\t  --hard   D       D     D\n"
"\t\t\t  --merge (disallowed)\n"
"\t\t\t  --keep  (disallowed)\n"

#. type: delimited block .
#: ../Documentation-sedout/git-reset.txt:456
#, no-wrap
msgid ""
"working index HEAD target         working index HEAD\n"
"----------------------------------------------------\n"
" B       C     C    C     --soft   B       C     C\n"
"\t\t\t  --mixed  B       C     C\n"
"\t\t\t  --hard   C       C     C\n"
"\t\t\t  --merge  B       C     C\n"
"\t\t\t  --keep   B       C     C\n"
msgstr ""
"working index HEAD target         working index HEAD\n"
"----------------------------------------------------\n"
" B       C     C    C     --soft   B       C     C\n"
"\t\t\t  --mixed  B       C     C\n"
"\t\t\t  --hard   C       C     C\n"
"\t\t\t  --merge  B       C     C\n"
"\t\t\t  --keep   B       C     C\n"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:466
msgid ""
"`reset --merge` is meant to be used when resetting out of a conflicted "
"merge. Any mergy operation guarantees that the working tree file that is "
"involved in the merge does not have a local change with respect to the index "
"before it starts, and that it writes the result out to the working tree. So "
"if we see some difference between the index and the target and also between "
"the index and the working tree, then it means that we are not resetting out "
"from a state that a mergy operation left after failing with a conflict. That "
"is why we disallow `--merge` option in this case."
msgstr "`reset --merge` は、競合するマージからリセットするときに使用することを目的としています。 マージ操作は、マージに関係する作業ツリーファイルが、開始前にインデックスに対してローカルな変更がないこと、そしてその結果を作業ツリーに書き出すことを保証しています。 したがって、インデックスとターゲットの間、およびインデックスと作業ツリーの間に何らかの違いが見られる場合、それは、マージ中の操作が競合で失敗した後に残した状態からリセットされていないことを意味します。 そのため、この場合は `--merge` オプションを使用を許可しません。"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:475
msgid ""
"`reset --keep` is meant to be used when removing some of the last commits in "
"the current branch while keeping changes in the working tree. If there could "
"be conflicts between the changes in the commit we want to remove and the "
"changes in the working tree we want to keep, the reset is disallowed. That's "
"why it is disallowed if there are both changes between the working tree and "
"`HEAD`, and between `HEAD` and the target. To be safe, it is also disallowed "
"when there are unmerged entries."
msgstr "`reset --keep` は、作業ツリーの変更を維持しながら、現在のブランチの最後のコミットの一部を削除するときに使用することを目的としています。 削除するコミットの変更と保持する作業ツリーの変更の間に競合が発生する可能性がある場合、リセットは許可されません。 そのため、作業ツリーと `HEAD` の間、および `HEAD` とターゲットの間の両方に変更がある場合、リセットは許可されません。 安全のため、アンマージエントリがある場合もリセットは許可されません。"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:478
msgid "The following tables show what happens when there are unmerged entries:"
msgstr "以下の表は、アンマージエントリがある場合に何が起こるかを示しています:"

#. type: delimited block .
#: ../Documentation-sedout/git-reset.txt:487
#, no-wrap
msgid ""
"working index HEAD target         working index HEAD\n"
"----------------------------------------------------\n"
" X       U     A    B     --soft  (disallowed)\n"
"\t\t\t  --mixed  X       B     B\n"
"\t\t\t  --hard   B       B     B\n"
"\t\t\t  --merge  B       B     B\n"
"\t\t\t  --keep  (disallowed)\n"
msgstr ""
"working index HEAD target         working index HEAD\n"
"----------------------------------------------------\n"
" X       U     A    B     --soft  (disallowed)\n"
"\t\t\t  --mixed  X       B     B\n"
"\t\t\t  --hard   B       B     B\n"
"\t\t\t  --merge  B       B     B\n"
"\t\t\t  --keep  (disallowed)\n"

#. type: delimited block .
#: ../Documentation-sedout/git-reset.txt:497
#, no-wrap
msgid ""
"working index HEAD target         working index HEAD\n"
"----------------------------------------------------\n"
" X       U     A    A     --soft  (disallowed)\n"
"\t\t\t  --mixed  X       A     A\n"
"\t\t\t  --hard   A       A     A\n"
"\t\t\t  --merge  A       A     A\n"
"\t\t\t  --keep  (disallowed)\n"
msgstr ""
"working index HEAD target         working index HEAD\n"
"----------------------------------------------------\n"
" X       U     A    A     --soft  (disallowed)\n"
"\t\t\t  --mixed  X       A     A\n"
"\t\t\t  --hard   A       A     A\n"
"\t\t\t  --merge  A       A     A\n"
"\t\t\t  --keep  (disallowed)\n"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:500
msgid "`X` means any state and `U` means an unmerged index."
msgstr "`X` は任意の状態を意味し、 `U` はアンマージインデックスを意味します。"

#. type: Title -
#: ../Documentation-sedout/git-reset.txt:502
#, no-wrap
msgid "GIT"
msgstr "GIT"

#. type: Plain text
#: ../Documentation-sedout/git-reset.txt:503
msgid "Part of the linkgit:git[1] suite"
msgstr "Part of the linkgit:git[1] suite"
