# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-10-01 00:25+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation/git-stash.txt:2
#, no-wrap
msgid "git-stash(1)"
msgstr ""

#. type: Title -
#: ../Documentation/git-stash.txt:5
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:7
msgid "git-stash - Stash the changes in a dirty working directory away"
msgstr ""

#. type: Title -
#: ../Documentation/git-stash.txt:9
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:23
#, no-wrap
msgid ""
"'git stash' list [<log-options>]\n"
"'git stash' show [-u|--include-untracked|--only-untracked] [<diff-options>] "
"[<stash>]\n"
"'git stash' drop [-q|--quiet] [<stash>]\n"
"'git stash' ( pop | apply ) [--index] [-q|--quiet] [<stash>]\n"
"'git stash' branch <branchname> [<stash>]\n"
"'git stash' [push [-p|--patch] [-k|--[no-]keep-index] [-q|--quiet]\n"
"\t     [-u|--include-untracked] [-a|--all] [-m|--message <message>]\n"
"\t     [--pathspec-from-file=<file> [--pathspec-file-nul]]\n"
"\t     [--] [<pathspec>...]]\n"
"'git stash' clear\n"
"'git stash' create [<message>]\n"
"'git stash' store [-m|--message <message>] [-q|--quiet] <commit>\n"
msgstr ""

#. type: Title -
#: ../Documentation/git-stash.txt:25
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:31
msgid ""
"Use `git stash` when you want to record the current state of the working "
"directory and the index, but want to go back to a clean working directory.  "
"The command saves your local modifications away and reverts the working "
"directory to match the `HEAD` commit."
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:39
msgid ""
"The modifications stashed away by this command can be listed with `git stash "
"list`, inspected with `git stash show`, and restored (potentially on top of "
"a different commit) with `git stash apply`.  Calling `git stash` without any "
"arguments is equivalent to `git stash push`.  A stash is by default listed "
"as \"WIP on 'branchname' ...\", but you can give a more descriptive message "
"on the command line when you create one."
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:46
msgid ""
"The latest stash you created is stored in `refs/stash`; older stashes are "
"found in the reflog of this reference and can be named using the usual "
"reflog syntax (e.g. `stash@{0}` is the most recently created stash, "
"`stash@{1}` is the one before it, `stash@{2.hours.ago}` is also "
"possible). Stashes may also be referenced by specifying just the stash index "
"(e.g. the integer `n` is equivalent to `stash@{n}`)."
msgstr ""

#. type: Title -
#: ../Documentation/git-stash.txt:48
#, no-wrap
msgid "COMMANDS"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-stash.txt:50
#, no-wrap
msgid ""
"push [-p|--patch] [-k|--[no-]keep-index] [-u|--include-untracked] [-a|--all] "
"[-q|--quiet] [-m|--message <message>] [--pathspec-from-file=<file> "
"[--pathspec-file-nul]] [--] [<pathspec>...]"
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:56
msgid ""
"Save your local modifications to a new 'stash entry' and roll them back to "
"HEAD (in the working tree and in the index).  The <message> part is optional "
"and gives the description along with the stashed state."
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:62
msgid ""
"For quickly making a snapshot, you can omit \"push\".  In this mode, "
"non-option arguments are not allowed to prevent a misspelled subcommand from "
"making an unwanted stash entry.  The two exceptions to this are `stash -p` "
"which acts as alias for `stash push -p` and pathspec elements, which are "
"allowed after a double hyphen `--` for disambiguation."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-stash.txt:63
#, no-wrap
msgid ""
"save [-p|--patch] [-k|--[no-]keep-index] [-u|--include-untracked] [-a|--all] "
"[-q|--quiet] [<message>]"
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:69
msgid ""
"This option is deprecated in favour of 'git stash push'.  It differs from "
"\"stash push\" in that it cannot take pathspec.  Instead, all non-option "
"arguments are concatenated to form the stash message."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-stash.txt:70
#, no-wrap
msgid "list [<log-options>]"
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:77
msgid ""
"List the stash entries that you currently have.  Each 'stash entry' is "
"listed with its name (e.g. `stash@{0}` is the latest entry, `stash@{1}` is "
"the one before, etc.), the name of the branch that was current when the "
"entry was made, and a short description of the commit the entry was based "
"on."
msgstr ""

#. type: delimited block -
#: ../Documentation/git-stash.txt:81
#, no-wrap
msgid ""
"stash@{0}: WIP on submit: 6ebd0e2... Update git-stash documentation\n"
"stash@{1}: On master: 9cc0589... Add git-stash\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:85
msgid ""
"The command takes options applicable to the 'git log' command to control "
"what is shown and how. See linkgit:git-log[1]."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-stash.txt:86
#, no-wrap
msgid "show [-u|--include-untracked|--only-untracked] [<diff-options>] [<stash>]"
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:98
msgid ""
"Show the changes recorded in the stash entry as a diff between the stashed "
"contents and the commit back when the stash entry was first created.  By "
"default, the command shows the diffstat, but it will accept any format known "
"to 'git diff' (e.g., `git stash show -p stash@{1}` to view the second most "
"recent entry in patch form).  If no `<diff-option>` is provided, the default "
"behavior will be given by the `stash.showStat`, and `stash.showPatch` config "
"variables. You can also use `stash.showIncludeUntracked` to set whether "
"`--include-untracked` is enabled by default."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-stash.txt:99
#, no-wrap
msgid "pop [--index] [-q|--quiet] [<stash>]"
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:105
msgid ""
"Remove a single stashed state from the stash list and apply it on top of the "
"current working tree state, i.e., do the inverse operation of `git stash "
"push`. The working directory must match the index."
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:109
msgid ""
"Applying the state can fail with conflicts; in this case, it is not removed "
"from the stash list. You need to resolve the conflicts by hand and call `git "
"stash drop` manually afterwards."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-stash.txt:110
#, no-wrap
msgid "apply [--index] [-q|--quiet] [<stash>]"
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:115
msgid ""
"Like `pop`, but do not remove the state from the stash list. Unlike `pop`, "
"`<stash>` may be any commit that looks like a commit created by `stash push` "
"or `stash create`."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-stash.txt:116
#, no-wrap
msgid "branch <branchname> [<stash>]"
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:123
msgid ""
"Creates and checks out a new branch named `<branchname>` starting from the "
"commit at which the `<stash>` was originally created, applies the changes "
"recorded in `<stash>` to the new working tree and index.  If that succeeds, "
"and `<stash>` is a reference of the form `stash@{<revision>}`, it then drops "
"the `<stash>`."
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:129
msgid ""
"This is useful if the branch on which you ran `git stash push` has changed "
"enough that `git stash apply` fails due to conflicts. Since the stash entry "
"is applied on top of the commit that was HEAD at the time `git stash` was "
"run, it restores the originally stashed state with no conflicts."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-stash.txt:130
#, no-wrap
msgid "clear"
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:134
msgid ""
"Remove all the stash entries. Note that those entries will then be subject "
"to pruning, and may be impossible to recover (see 'Examples' below for a "
"possible strategy)."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-stash.txt:135
#, no-wrap
msgid "drop [-q|--quiet] [<stash>]"
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:138
msgid "Remove a single stash entry from the list of stash entries."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-stash.txt:139
#, no-wrap
msgid "create"
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:146
msgid ""
"Create a stash entry (which is a regular commit object) and return its "
"object name, without storing it anywhere in the ref namespace.  This is "
"intended to be useful for scripts.  It is probably not the command you want "
"to use; see \"push\" above."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-stash.txt:147
#, no-wrap
msgid "store"
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:153
msgid ""
"Store a given stash created via 'git stash create' (which is a dangling "
"merge commit) in the stash ref, updating the stash reflog.  This is intended "
"to be useful for scripts.  It is probably not the command you want to use; "
"see \"push\" above."
msgstr ""

#. type: Title -
#: ../Documentation/git-stash.txt:155
#, no-wrap
msgid "OPTIONS"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-stash.txt:156
#, no-wrap
msgid "-a"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-stash.txt:157
#, no-wrap
msgid "--all"
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:159 ../Documentation/git-stash.txt:190 ../Documentation/git-stash.txt:196
msgid "This option is only valid for `push` and `save` commands."
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:162
msgid ""
"All ignored and untracked files are also stashed and then cleaned up with "
"`git clean`."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-stash.txt:163
#, no-wrap
msgid "-u"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-stash.txt:164
#, no-wrap
msgid "--include-untracked"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-stash.txt:165
#, no-wrap
msgid "--no-include-untracked"
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:169
msgid ""
"When used with the `push` and `save` commands, all untracked files are also "
"stashed and then cleaned up with `git clean`."
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:172
msgid ""
"When used with the `show` command, show the untracked files in the stash "
"entry as part of the diff."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-stash.txt:173
#, no-wrap
msgid "--only-untracked"
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:175
msgid "This option is only valid for the `show` command."
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:177
msgid "Show only the untracked files in the stash entry as part of the diff."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-stash.txt:178
#, no-wrap
msgid "--index"
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:180
msgid "This option is only valid for `pop` and `apply` commands."
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:185
msgid ""
"Tries to reinstate not only the working tree's changes, but also the index's "
"ones. However, this can fail, when you have conflicts (which are stored in "
"the index, where you therefore can no longer apply the changes as they were "
"originally)."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-stash.txt:186
#, no-wrap
msgid "-k"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-stash.txt:187
#, no-wrap
msgid "--keep-index"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-stash.txt:188
#, no-wrap
msgid "--no-keep-index"
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:192
msgid "All changes already added to the index are left intact."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-stash.txt:193
#, no-wrap
msgid "-p"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-stash.txt:194
#, no-wrap
msgid "--patch"
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:204
msgid ""
"Interactively select hunks from the diff between HEAD and the working tree "
"to be stashed.  The stash entry is constructed such that its index state is "
"the same as the index state of your repository, and its worktree contains "
"only the changes you selected interactively.  The selected changes are then "
"rolled back from your worktree. See the ``Interactive Mode'' section of "
"linkgit:git-add[1] to learn how to operate the `--patch` mode."
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:207
msgid ""
"The `--patch` option implies `--keep-index`.  You can use `--no-keep-index` "
"to override this."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-stash.txt:208
#, no-wrap
msgid "--pathspec-from-file=<file>"
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:210 ../Documentation/git-stash.txt:220 ../Documentation/git-stash.txt:234 ../Documentation/git-stash.txt:239
msgid "This option is only valid for `push` command."
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:217
msgid ""
"Pathspec is passed in `<file>` instead of commandline args. If `<file>` is "
"exactly `-` then standard input is used. Pathspec elements are separated by "
"LF or CR/LF. Pathspec elements can be quoted as explained for the "
"configuration variable `core.quotePath` (see linkgit:git-config[1]). See "
"also `--pathspec-file-nul` and global `--literal-pathspecs`."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-stash.txt:218
#, no-wrap
msgid "--pathspec-file-nul"
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:224
msgid ""
"Only meaningful with `--pathspec-from-file`. Pathspec elements are separated "
"with NUL character and all other characters are taken literally (including "
"newlines and quotes)."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-stash.txt:225
#, no-wrap
msgid "-q"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-stash.txt:226
#, no-wrap
msgid "--quiet"
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:229
msgid ""
"This option is only valid for `apply`, `drop`, `pop`, `push`, `save`, "
"`store` commands."
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:231
msgid "Quiet, suppress feedback messages."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-stash.txt:232
#, no-wrap
msgid "\\--"
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:236
msgid "Separates pathspec from options for disambiguation purposes."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-stash.txt:237
#, no-wrap
msgid "<pathspec>..."
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:244
msgid ""
"The new stash entry records the modified states only for the files that "
"match the pathspec.  The index entries and working tree files are then "
"rolled back to the state in HEAD only for these files, too, leaving files "
"that do not match the pathspec intact."
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:246
msgid "For more details, see the 'pathspec' entry in linkgit:gitglossary[7]."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-stash.txt:247
#, no-wrap
msgid "<stash>"
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:250
msgid ""
"This option is only valid for `apply`, `branch`, `drop`, `pop`, `show` "
"commands."
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:253
msgid ""
"A reference of the form `stash@{<revision>}`. When no `<stash>` is given, "
"the latest stash is assumed (that is, `stash@{0}`)."
msgstr ""

#. type: Title -
#: ../Documentation/git-stash.txt:255
#, no-wrap
msgid "DISCUSSION"
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:262
msgid ""
"A stash entry is represented as a commit whose tree records the state of the "
"working directory, and its first parent is the commit at `HEAD` when the "
"entry was created.  The tree of the second parent records the state of the "
"index when the entry is made, and it is made a child of the `HEAD` commit.  "
"The ancestry graph looks like this:"
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:266
#, no-wrap
msgid ""
"            .----W\n"
"           /    /\n"
"     -----H----I\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:270
msgid ""
"where `H` is the `HEAD` commit, `I` is a commit that records the state of "
"the index, and `W` is a commit that records the state of the working tree."
msgstr ""

#. type: Title -
#: ../Documentation/git-stash.txt:273
#, no-wrap
msgid "EXAMPLES"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-stash.txt:275
#, no-wrap
msgid "Pulling into a dirty tree"
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:281
msgid ""
"When you are in the middle of something, you learn that there are upstream "
"changes that are possibly relevant to what you are doing.  When your local "
"changes do not conflict with the changes in the upstream, a simple `git "
"pull` will let you move forward."
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:286
msgid ""
"However, there are cases in which your local changes do conflict with the "
"upstream changes, and `git pull` refuses to overwrite your changes.  In such "
"a case, you can stash your changes away, perform a pull, and then unstash, "
"like this:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-stash.txt:294
#, no-wrap
msgid ""
"$ git pull\n"
" ...\n"
"file foobar not up to date, cannot merge.\n"
"$ git stash\n"
"$ git pull\n"
"$ git stash pop\n"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-stash.txt:296
#, no-wrap
msgid "Interrupted workflow"
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:302
msgid ""
"When you are in the middle of something, your boss comes in and demands that "
"you fix something immediately.  Traditionally, you would make a commit to a "
"temporary branch to store your changes away, and return to your original "
"branch to make the emergency fix, like this:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-stash.txt:313
#, no-wrap
msgid ""
"# ... hack hack hack ...\n"
"$ git switch -c my_wip\n"
"$ git commit -a -m \"WIP\"\n"
"$ git switch master\n"
"$ edit emergency fix\n"
"$ git commit -a -m \"Fix in a hurry\"\n"
"$ git switch my_wip\n"
"$ git reset --soft HEAD^\n"
"# ... continue hacking ...\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:316
msgid "You can use 'git stash' to simplify the above, like this:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-stash.txt:324
#, no-wrap
msgid ""
"# ... hack hack hack ...\n"
"$ git stash\n"
"$ edit emergency fix\n"
"$ git commit -a -m \"Fix in a hurry\"\n"
"$ git stash pop\n"
"# ... continue hacking ...\n"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-stash.txt:326
#, no-wrap
msgid "Testing partial commits"
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:331
msgid ""
"You can use `git stash push --keep-index` when you want to make two or more "
"commits out of the changes in the work tree, and you want to test each "
"change before committing:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-stash.txt:342
#, no-wrap
msgid ""
"# ... hack hack hack ...\n"
"$ git add --patch foo            # add just first part to the index\n"
"$ git stash push --keep-index    # save all other changes to the stash\n"
"$ edit/build/test first part\n"
"$ git commit -m 'First part'     # commit fully tested change\n"
"$ git stash pop                  # prepare to work on all other changes\n"
"# ... repeat above five steps until one commit remains ...\n"
"$ edit/build/test remaining parts\n"
"$ git commit foo -m 'Remaining parts'\n"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-stash.txt:344
#, no-wrap
msgid "Recovering stash entries that were cleared/dropped erroneously"
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:350
msgid ""
"If you mistakenly drop or clear stash entries, they cannot be recovered "
"through the normal safety mechanisms.  However, you can try the following "
"incantation to get a list of stash entries that are still in your "
"repository, but not reachable any more:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-stash.txt:355
#, no-wrap
msgid ""
"git fsck --unreachable |\n"
"grep commit | cut -d\\  -f3 |\n"
"xargs git log --merges --no-walk --grep=WIP\n"
msgstr ""

#. type: Title -
#: ../Documentation/git-stash.txt:359
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:365
msgid ""
"linkgit:git-checkout[1], linkgit:git-commit[1], linkgit:git-reflog[1], "
"linkgit:git-reset[1], linkgit:git-switch[1]"
msgstr ""

#. type: Title -
#: ../Documentation/git-stash.txt:367
#, no-wrap
msgid "GIT"
msgstr ""

#. type: Plain text
#: ../Documentation/git-stash.txt:368
msgid "Part of the linkgit:git[1] suite"
msgstr ""
