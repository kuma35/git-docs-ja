# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 0.0\n"
"POT-Creation-Date: 2022-09-24 21:41+0900\n"
"PO-Revision-Date: 2022-05-17 09:16+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/git-stash.txt:2
#, no-wrap
msgid "git-stash(1)"
msgstr "git-stash(1)"

#. type: Title -
#: ../Documentation-sedout/git-stash.txt:5
#, no-wrap
msgid "NAME"
msgstr "NAME"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:7
msgid "git-stash - Stash the changes in a dirty working directory away"
msgstr "git-stash - 汚い作業ディレクトリの変更を隠します"

#. type: Title -
#: ../Documentation-sedout/git-stash.txt:9
#, no-wrap
msgid "SYNOPSIS"
msgstr "SYNOPSIS"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:23
#, fuzzy, no-wrap
#| msgid ""
#| "'git stash' list [<log-options>]\n"
#| "'git stash' show [-u|--include-untracked|--only-untracked] [<diff-options>] [<stash>]\n"
#| "'git stash' drop [-q|--quiet] [<stash>]\n"
#| "'git stash' ( pop | apply ) [--index] [-q|--quiet] [<stash>]\n"
#| "'git stash' branch <branchname> [<stash>]\n"
#| "'git stash' [push [-p|--patch] [-k|--[no-]keep-index] [-q|--quiet]\n"
#| "\t     [-u|--include-untracked] [-a|--all] [-m|--message <message>]\n"
#| "\t     [--pathspec-from-file=<file> [--pathspec-file-nul]]\n"
#| "\t     [--] [<pathspec>...]]\n"
#| "'git stash' clear\n"
#| "'git stash' create [<message>]\n"
#| "'git stash' store [-m|--message <message>] [-q|--quiet] <commit>\n"
msgid ""
"'git stash' list [<log-options>]\n"
"'git stash' show [-u|--include-untracked|--only-untracked] [<diff-options>] [<stash>]\n"
"'git stash' drop [-q|--quiet] [<stash>]\n"
"'git stash' ( pop | apply ) [--index] [-q|--quiet] [<stash>]\n"
"'git stash' branch <branchname> [<stash>]\n"
"'git stash' [push [-p|--patch] [-S|--staged] [-k|--[no-]keep-index] [-q|--quiet]\n"
"\t     [-u|--include-untracked] [-a|--all] [-m|--message <message>]\n"
"\t     [--pathspec-from-file=<file> [--pathspec-file-nul]]\n"
"\t     [--] [<pathspec>...]]\n"
"'git stash' clear\n"
"'git stash' create [<message>]\n"
"'git stash' store [-m|--message <message>] [-q|--quiet] <commit>\n"
msgstr ""
"'git stash' list [<log-options>]\n"
"'git stash' show [-u|--include-untracked|--only-untracked] [<diff-options>] [<stash>]\n"
"'git stash' drop [-q|--quiet] [<stash>]\n"
"'git stash' ( pop | apply ) [--index] [-q|--quiet] [<stash>]\n"
"'git stash' branch <branchname> [<stash>]\n"
"'git stash' [push [-p|--patch] [-k|--[no-]keep-index] [-q|--quiet]\n"
"\t     [-u|--include-untracked] [-a|--all] [-m|--message <message>]\n"
"\t     [--pathspec-from-file=<file> [--pathspec-file-nul]]\n"
"\t     [--] [<pathspec>...]]\n"
"'git stash' clear\n"
"'git stash' create [<message>]\n"
"'git stash' store [-m|--message <message>] [-q|--quiet] <commit>\n"

#. type: Title -
#: ../Documentation-sedout/git-stash.txt:25
#, no-wrap
msgid "DESCRIPTION"
msgstr "DESCRIPTION"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:31
msgid ""
"Use `git stash` when you want to record the current state of the working "
"directory and the index, but want to go back to a clean working directory.  "
"The command saves your local modifications away and reverts the working "
"directory to match the `HEAD` commit."
msgstr ""
"作業ディレクトリとインデックスの現在の状態を記録したいが、クリーンな作業ディ"
"レクトリに戻りたい場合は、`git stash` を使用します。 このコマンドは、ローカル"
"の変更を保存し、作業ディレクトリを元に戻して(revert)、`HEAD` コミットに一致さ"
"せます。"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:39
msgid ""
"The modifications stashed away by this command can be listed with `git stash "
"list`, inspected with `git stash show`, and restored (potentially on top of "
"a different commit) with `git stash apply`.  Calling `git stash` without any "
"arguments is equivalent to `git stash push`.  A stash is by default listed "
"as \"WIP on 'branchname' ...\", but you can give a more descriptive message "
"on the command line when you create one."
msgstr ""
"このコマンドによってスタッシュされた変更は、 `git stash list` で一覧表示さ"
"れ、 `git stash show` で調査され、 `git stash apply` で復元されます(それは別"
"のコミットの上にある可能性があります)。 引数なしで `git stash` を呼び出すこと"
"は、 `git stash push` と同等です。 スタッシュはデフォルトで `WIP on "
"'branchname' ...` としてリストされますが、作成するときにコマンドラインでより"
"説明的なメッセージを与える事ができます。"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:46
msgid ""
"The latest stash you created is stored in `refs/stash`; older stashes are "
"found in the reflog of this reference and can be named using the usual "
"reflog syntax (e.g. `stash@{0}` is the most recently created stash, "
"`stash@{1}` is the one before it, `stash@{2.hours.ago}` is also possible). "
"Stashes may also be referenced by specifying just the stash index (e.g. the "
"integer `n` is equivalent to `stash@{n}`)."
msgstr ""
"作成した 最新のスタッシュ は `refs/stash` に保存されます。 古いスタッシュはこ"
"のリファレンスのreflogにあり、通常のreflog構文を使用して名前を付けることがで"
"きます(たとえば、 `stash@{0}` は最後に作成されたスタッシュで、 `stash@{1}` は"
"その前のスタッシュです。 `stash@{2.hours.ago}` も可能です)。 スタッシュは、ス"
"タッシュインデックスのみを指定することによって参照することもできます(たとえ"
"ば、整数 `n` は `stash@{n}` と同等です)。"

#. type: Title -
#: ../Documentation-sedout/git-stash.txt:48
#, no-wrap
msgid "COMMANDS"
msgstr "COMMANDS"

#. type: Labeled list
#: ../Documentation-sedout/git-stash.txt:50
#, fuzzy, no-wrap
#| msgid "push [-p|--patch] [-k|--[no-]keep-index] [-u|--include-untracked] [-a|--all] [-q|--quiet] [-m|--message <message>] [--pathspec-from-file=<file> [--pathspec-file-nul]] [--] [<pathspec>...]"
msgid "push [-p|--patch] [-S|--staged] [-k|--[no-]keep-index] [-u|--include-untracked] [-a|--all] [-q|--quiet] [-m|--message <message>] [--pathspec-from-file=<file> [--pathspec-file-nul]] [--] [<pathspec>...]"
msgstr "`push [-p|--patch] [-k|--[no-]keep-index] [-u|--include-untracked] [-a|--all] [-q|--quiet] [-m|--message <message>] [--pathspec-from-file=<file> [--pathspec-file-nul]] [--] [<pathspec>...]`"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:56
msgid ""
"Save your local modifications to a new 'stash entry' and roll them back to "
"HEAD (in the working tree and in the index).  The <message> part is optional "
"and gives the description along with the stashed state."
msgstr ""
"あなたのローカルの変更を新しい「スタッシュエントリ」に保存し、それらをHEADに"
"巻き戻します(作業ツリー内とインデックス内で)。 <message> の部分はオプションで"
"あり、スタッシュ状態と共に説明を提供します。"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:62
msgid ""
"For quickly making a snapshot, you can omit \"push\".  In this mode, non-"
"option arguments are not allowed to prevent a misspelled subcommand from "
"making an unwanted stash entry.  The two exceptions to this are `stash -p` "
"which acts as alias for `stash push -p` and pathspec elements, which are "
"allowed after a double hyphen `--` for disambiguation."
msgstr ""
"スナップショットをすばやく作成するために、「push」を省略できます。 このモード"
"では、サブコマンドのスペルミスで不要なスタッシュエントリを作成するのを防ぐた"
"めの非オプション引数は許可されていません。 これに対する2つの例外は、 `stash "
"push -p` のエイリアスとして機能する `stash -p` と、曖昧さ解消のために二重ハイ"
"フン `--` の後ろで許可されるpathspec要素です。"

#. type: Labeled list
#: ../Documentation-sedout/git-stash.txt:63
#, fuzzy, no-wrap
#| msgid "save [-p|--patch] [-k|--[no-]keep-index] [-u|--include-untracked] [-a|--all] [-q|--quiet] [<message>]"
msgid "save [-p|--patch] [-S|--staged] [-k|--[no-]keep-index] [-u|--include-untracked] [-a|--all] [-q|--quiet] [<message>]"
msgstr "`save [-p|--patch] [-k|--[no-]keep-index] [-u|--include-untracked] [-a|--all] [-q|--quiet] [<message>]`"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:69
msgid ""
"This option is deprecated in favour of 'git stash push'.  It differs from "
"\"stash push\" in that it cannot take pathspec.  Instead, all non-option "
"arguments are concatenated to form the stash message."
msgstr ""
"このオプションは廃止され、 `git stash push` が採用されました。 pathspecをとる"
"ことができないという点で「stash push」とは異なります。 代わりに、オプション以"
"外のすべての引数が連結されて、スタッシュメッセージが形成されます。"

#. type: Labeled list
#: ../Documentation-sedout/git-stash.txt:70
#, no-wrap
msgid "list [<log-options>]"
msgstr "list [<log-options>]"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:77
msgid ""
"List the stash entries that you currently have.  Each 'stash entry' is "
"listed with its name (e.g. `stash@{0}` is the latest entry, `stash@{1}` is "
"the one before, etc.), the name of the branch that was current when the "
"entry was made, and a short description of the commit the entry was based on."
msgstr ""
"現在持っているスタッシュエントリを一覧表示します。 各「スタッシュエントリ」"
"は、その名前(たとえば、 `stash@{0}` は最新のエントリ、 `stash@{1}` はその前の"
"エントリ、など)と、 エントリが作成されたときの現在のブランチの名前と、エント"
"リが基づいていたコミットの簡単な説明と、ともに一覧表示されます。"

#. type: delimited block -
#: ../Documentation-sedout/git-stash.txt:81
#, no-wrap
msgid ""
"stash@{0}: WIP on submit: 6ebd0e2... Update git-stash documentation\n"
"stash@{1}: On master: 9cc0589... Add git-stash\n"
msgstr ""
"stash@{0}: WIP on submit: 6ebd0e2... Update git-stash documentation\n"
"stash@{1}: On master: 9cc0589... Add git-stash\n"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:85
msgid ""
"The command takes options applicable to the 'git log' command to control "
"what is shown and how. See linkgit:git-log[1]."
msgstr ""
"このコマンドは、 `git log` コマンドに適用可能なオプションを使用して、表示内容"
"と方法を制御します。 linkgit:git-log[1] を参照してください。"

#. type: Labeled list
#: ../Documentation-sedout/git-stash.txt:86
#, no-wrap
msgid "show [-u|--include-untracked|--only-untracked] [<diff-options>] [<stash>]"
msgstr "`show [-u|--include-untracked|--only-untracked] [<diff-options>] [<stash>]`"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:98
msgid ""
"Show the changes recorded in the stash entry as a diff between the stashed "
"contents and the commit back when the stash entry was first created.  By "
"default, the command shows the diffstat, but it will accept any format known "
"to 'git diff' (e.g., `git stash show -p stash@{1}` to view the second most "
"recent entry in patch form).  If no `<diff-option>` is provided, the default "
"behavior will be given by the `stash.showStat`, and `stash.showPatch` config "
"variables. You can also use `stash.showIncludeUntracked` to set whether `--"
"include-untracked` is enabled by default."
msgstr ""
"スタッシュエントリに記録された変更を、スタッシュされたコンテンツとスタッシュ"
"エントリが最初に作成されたときのコミットとの差分として表示します。 デフォルト"
"では、コマンドはdiffstatを表示しますが、 `git diff` として認識される任意の形"
"式を受け入れます(たとえば、パッチ形式で2番目に新しいエントリを表示するには "
"`git stash show -p stash@{1}`)。 `<diff-option>` が指定されていない場合、デ"
"フォルトの動作は `stash.showStat` および `stash.showPatch` 構成変数によって与"
"えられます。 `stash.showIncludeUntracked` を使用して、 `--include-untracked` "
"がデフォルトで有効になっているかどうかを設定することもできます。"

#. type: Labeled list
#: ../Documentation-sedout/git-stash.txt:99
#, no-wrap
msgid "pop [--index] [-q|--quiet] [<stash>]"
msgstr "`pop [--index] [-q|--quiet] [<stash>]`"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:105
msgid ""
"Remove a single stashed state from the stash list and apply it on top of the "
"current working tree state, i.e., do the inverse operation of `git stash "
"push`. The working directory must match the index."
msgstr ""
"スタッシュリストから単一のスタッシュ状態を削除し、現在の作業ツリー状態の上に"
"適用します。つまり、 `git stash push` の逆の操作を実行します。 作業ディレクト"
"リはインデックスと一致している必要があります。"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:109
msgid ""
"Applying the state can fail with conflicts; in this case, it is not removed "
"from the stash list. You need to resolve the conflicts by hand and call `git "
"stash drop` manually afterwards."
msgstr ""
"状態の適用は、競合で失敗する可能性があります。 この場合、スタッシュリストから"
"は削除されません。 競合を手動で解決し、後で手動で `git stash drop` を呼び出す"
"必要があります。"

#. type: Labeled list
#: ../Documentation-sedout/git-stash.txt:110
#, no-wrap
msgid "apply [--index] [-q|--quiet] [<stash>]"
msgstr "`apply [--index] [-q|--quiet] [<stash>]`"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:115
msgid ""
"Like `pop`, but do not remove the state from the stash list. Unlike `pop`, "
"`<stash>` may be any commit that looks like a commit created by `stash push` "
"or `stash create`."
msgstr ""
"`pop` と同様ですが、スタッシュリストから状態を削除しないでください。 `pop` と"
"は異なり 、`<stash>` は、`stash push` または `stash create` によって作成され"
"たコミットのように見える任意のコミットです。"

#. type: Labeled list
#: ../Documentation-sedout/git-stash.txt:116
#, no-wrap
msgid "branch <branchname> [<stash>]"
msgstr "branch <branchname> [<stash>]"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:123
msgid ""
"Creates and checks out a new branch named `<branchname>` starting from the "
"commit at which the `<stash>` was originally created, applies the changes "
"recorded in `<stash>` to the new working tree and index.  If that succeeds, "
"and `<stash>` is a reference of the form `stash@{<revision>}`, it then drops "
"the `<stash>`."
msgstr ""
"`<stash>` が元々作成された時のコミットから `<branchname>` という名前の新しい"
"ブランチを作成してチェックアウトし、 `<stash>` に記録された変更を新しい作業ツ"
"リーとインデックスに適用します。 それが成功し、 `<stash>` が "
"`stash@{<revision>}` 形式の参照である場合、 `<stash>` を削除します。"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:129
msgid ""
"This is useful if the branch on which you ran `git stash push` has changed "
"enough that `git stash apply` fails due to conflicts. Since the stash entry "
"is applied on top of the commit that was HEAD at the time `git stash` was "
"run, it restores the originally stashed state with no conflicts."
msgstr ""
"これは、あなたが `git stash push` を実行したブランチがとても変更されていて、"
"`git stash apply` が競合のために失敗した場合に便利です。 スタッシュエントリ"
"は、 `git stash` が実行されたときにHEADであったコミットの上に適用(apply)され"
"るため、競合することなく元のスタッシュされた状態を復元します。"

#. type: Labeled list
#: ../Documentation-sedout/git-stash.txt:130
#, no-wrap
msgid "clear"
msgstr "clear"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:134
msgid ""
"Remove all the stash entries. Note that those entries will then be subject "
"to pruning, and may be impossible to recover (see 'Examples' below for a "
"possible strategy)."
msgstr ""
"すべてのスタッシュエントリを削除します。 これらのエントリは刈り込みの対象とな"
"り、回復できない可能性があることに注意してください(可能な戦略については、下記"
"「Examples」を参照してください)。"

#. type: Labeled list
#: ../Documentation-sedout/git-stash.txt:135
#, no-wrap
msgid "drop [-q|--quiet] [<stash>]"
msgstr "`drop [-q|--quiet] [<stash>]`"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:138
msgid "Remove a single stash entry from the list of stash entries."
msgstr "スタッシュエントリリストからスタッシュエントリを1つ削除します。"

#. type: Labeled list
#: ../Documentation-sedout/git-stash.txt:139
#, no-wrap
msgid "create"
msgstr "create"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:146
msgid ""
"Create a stash entry (which is a regular commit object) and return its "
"object name, without storing it anywhere in the ref namespace.  This is "
"intended to be useful for scripts.  It is probably not the command you want "
"to use; see \"push\" above."
msgstr ""
"ref名前空間のどこにも保存せずに、スタッシュエントリ(通常のコミットオブジェク"
"ト)を作成し、そのオブジェクト名を返します。 これは、スクリプトで役立つことを"
"目的としています。 おそらくあなたがこのコマンドを使用することはありません。 "
"上記「push」を参照してください。"

#. type: Labeled list
#: ../Documentation-sedout/git-stash.txt:147
#, no-wrap
msgid "store"
msgstr "store"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:153
msgid ""
"Store a given stash created via 'git stash create' (which is a dangling "
"merge commit) in the stash ref, updating the stash reflog.  This is intended "
"to be useful for scripts.  It is probably not the command you want to use; "
"see \"push\" above."
msgstr ""
"`git stash create` を介して作成された特定のスタッシュ(これは宙ぶらりんマージ"
"コミット(dangling merge commit)です)をスタッシュrefに格納し、スタッシュreflog"
"を更新します。 これは、スクリプトで役立つことを目的としています。 おそらく、"
"あなたはこのコマンドを使用することはありません。 上記「push」を参照してくださ"
"い。"

#. type: Title -
#: ../Documentation-sedout/git-stash.txt:155
#, no-wrap
msgid "OPTIONS"
msgstr "OPTIONS"

#. type: Labeled list
#: ../Documentation-sedout/git-stash.txt:156
#, no-wrap
msgid "`-a`"
msgstr "`-a`"

#. type: Labeled list
#: ../Documentation-sedout/git-stash.txt:157
#, no-wrap
msgid "`--all`"
msgstr "`--all`"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:159
#: ../Documentation-sedout/git-stash.txt:190
#: ../Documentation-sedout/git-stash.txt:196
#: ../Documentation-sedout/git-stash.txt:211
msgid "This option is only valid for `push` and `save` commands."
msgstr "このオプションは、 `push` および `save` コマンドでのみ有効です。"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:162
msgid ""
"All ignored and untracked files are also stashed and then cleaned up with "
"`git clean`."
msgstr ""
"無視され追跡されていないすべてのファイルもスタッシュしてから、 `git clean` で"
"クリーンアップします。"

#. type: Labeled list
#: ../Documentation-sedout/git-stash.txt:163
#, no-wrap
msgid "`-u`"
msgstr "`-u`"

#. type: Labeled list
#: ../Documentation-sedout/git-stash.txt:164
#, no-wrap
msgid "`--include-untracked`"
msgstr "`--include-untracked`"

#. type: Labeled list
#: ../Documentation-sedout/git-stash.txt:165
#, no-wrap
msgid "`--no-include-untracked`"
msgstr "`--no-include-untracked`"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:169
msgid ""
"When used with the `push` and `save` commands, all untracked files are also "
"stashed and then cleaned up with `git clean`."
msgstr ""
"`push` および `save` コマンドと一緒に使用すると、追跡されていないすべてのファ"
"イルもスタッシュし、 `git clean` でクリーンアップします。"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:172
msgid ""
"When used with the `show` command, show the untracked files in the stash "
"entry as part of the diff."
msgstr ""
"`show` コマンドと一緒に使用すると、diffの一部としてスタッシュエントリの追跡さ"
"れていないファイルを表示します。"

#. type: Labeled list
#: ../Documentation-sedout/git-stash.txt:173
#, no-wrap
msgid "`--only-untracked`"
msgstr "`--only-untracked`"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:175
msgid "This option is only valid for the `show` command."
msgstr "このオプションは、 `show` コマンドでのみ有効です。"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:177
msgid "Show only the untracked files in the stash entry as part of the diff."
msgstr ""
"diffの一部として、スタッシュエントリ内の、追跡されていないファイル(untracked "
"files)のみを表示します。"

#. type: Labeled list
#: ../Documentation-sedout/git-stash.txt:178
#, no-wrap
msgid "`--index`"
msgstr "`--index`"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:180
msgid "This option is only valid for `pop` and `apply` commands."
msgstr "このオプションは、 `pop` および `apply` コマンドにのみ有効です。"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:185
msgid ""
"Tries to reinstate not only the working tree's changes, but also the index's "
"ones. However, this can fail, when you have conflicts (which are stored in "
"the index, where you therefore can no longer apply the changes as they were "
"originally)."
msgstr ""
"作業ツリーの変更だけでなく、インデックスの変更も復元しようと試みます。 ただ"
"し、競合がある場合(競合がインデックスに保存されているため、元の変更を適用でき"
"なくなる)、これは失敗する可能性があります。"

#. type: Labeled list
#: ../Documentation-sedout/git-stash.txt:186
#, no-wrap
msgid "`-k`"
msgstr "`-k`"

#. type: Labeled list
#: ../Documentation-sedout/git-stash.txt:187
#, no-wrap
msgid "`--keep-index`"
msgstr "`--keep-index`"

#. type: Labeled list
#: ../Documentation-sedout/git-stash.txt:188
#, no-wrap
msgid "`--no-keep-index`"
msgstr "`--no-keep-index`"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:192
msgid "All changes already added to the index are left intact."
msgstr "インデックスにすでに追加されているすべての変更はそのまま残ります。"

#. type: Labeled list
#: ../Documentation-sedout/git-stash.txt:193
#, no-wrap
msgid "`-p`"
msgstr "`-p`"

#. type: Labeled list
#: ../Documentation-sedout/git-stash.txt:194
#, no-wrap
msgid "`--patch`"
msgstr "`--patch`"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:204
msgid ""
"Interactively select hunks from the diff between HEAD and the working tree "
"to be stashed.  The stash entry is constructed such that its index state is "
"the same as the index state of your repository, and its worktree contains "
"only the changes you selected interactively.  The selected changes are then "
"rolled back from your worktree. See the ``Interactive Mode'' section of "
"linkgit:git-add[1] to learn how to operate the `--patch` mode."
msgstr ""
"HEADと作業ツリー間のdiffから、スタッシュするハンクを対話的に選択します。 ス"
"タッシュエントリは、リポジトリのインデックス状態と同じになるように構築され、"
"そのワークツリーには、対話的に選択した変更点のみが含まれます。 そして、選択し"
"た変更はワークツリーから巻き戻されます。 `--patch` モードの操作方法について"
"は、 linkgit:git-add[1] の「Interactive Mode」セクションを参照してください。"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:207
msgid ""
"The `--patch` option implies `--keep-index`.  You can use `--no-keep-index` "
"to override this."
msgstr ""
"`--patch` オプションは `--keep-index` の指定を含んでいます。あなたは `--no-"
"keep-index` を使用してこれを上書きできます。"

#. type: Labeled list
#: ../Documentation-sedout/git-stash.txt:208
#, no-wrap
msgid "`-S`"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-stash.txt:209
#, no-wrap
msgid "`--staged`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:215
msgid ""
"Stash only the changes that are currently staged. This is similar to basic "
"`git commit` except the state is committed to the stash instead of current "
"branch."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:217
msgid "The `--patch` option has priority over this one."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-stash.txt:218
#, no-wrap
msgid "`--pathspec-from-file=<file>`"
msgstr "`--pathspec-from-file=<file>`"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:220
#: ../Documentation-sedout/git-stash.txt:230
#: ../Documentation-sedout/git-stash.txt:244
#: ../Documentation-sedout/git-stash.txt:249
msgid "This option is only valid for `push` command."
msgstr "このオプションは、 `push` コマンドにのみ有効です。"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:227
msgid ""
"Pathspec is passed in `<file>` instead of commandline args. If `<file>` is "
"exactly `-` then standard input is used. Pathspec elements are separated by "
"LF or CR/LF. Pathspec elements can be quoted as explained for the "
"configuration variable `core.quotePath` (see linkgit:git-config[1]). See "
"also `--pathspec-file-nul` and global `--literal-pathspecs`."
msgstr ""
"pathspecは、コマンドライン引数の代わりに `<file>` で渡されます。 `<file>` が"
"正確に `-` の場合、標準入力が使用されます。 pathspec要素はLFまたはCR/LFで区切"
"られます。 pathspec要素は、構成変数 `core.quotePath` にて説明されているように"
"クォートできます(linkgit:git-config[1] 参照)。 `--pathspec-file-nul` および "
"グローバルの `--literal-pathspecs` も参照してください。"

#. type: Labeled list
#: ../Documentation-sedout/git-stash.txt:228
#, no-wrap
msgid "`--pathspec-file-nul`"
msgstr "`--pathspec-file-nul`"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:234
msgid ""
"Only meaningful with `--pathspec-from-file`. Pathspec elements are separated "
"with NUL character and all other characters are taken literally (including "
"newlines and quotes)."
msgstr ""
"このオプションは `--pathspec-from-file` でのみ意味があります。 pathspec要素は"
"NUL文字で区切られ、他のすべての文字は文字通りに解釈されます(改行と引用符を含"
"む)。"

#. type: Labeled list
#: ../Documentation-sedout/git-stash.txt:235
#, no-wrap
msgid "`-q`"
msgstr "`-q`"

#. type: Labeled list
#: ../Documentation-sedout/git-stash.txt:236
#, no-wrap
msgid "`--quiet`"
msgstr "`--quiet`"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:239
msgid ""
"This option is only valid for `apply`, `drop`, `pop`, `push`, `save`, "
"`store` commands."
msgstr ""
"このオプションは、 `apply`, `drop`, `pop`, `push`, `save`, `store` コマンドに"
"のみ有効です。"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:241
msgid "Quiet, suppress feedback messages."
msgstr "静かにして、フィードバックメッセージを抑制します。"

#. type: Labeled list
#: ../Documentation-sedout/git-stash.txt:242
#, no-wrap
msgid "\\--"
msgstr "`--`"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:246
msgid "Separates pathspec from options for disambiguation purposes."
msgstr "曖昧さ解消の目的のために pathspec をオプションから分離します。"

#. type: Labeled list
#: ../Documentation-sedout/git-stash.txt:247
#, no-wrap
msgid "<pathspec>..."
msgstr "<pathspec>..."

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:254
msgid ""
"The new stash entry records the modified states only for the files that "
"match the pathspec.  The index entries and working tree files are then "
"rolled back to the state in HEAD only for these files, too, leaving files "
"that do not match the pathspec intact."
msgstr ""
"新しいスタッシュエントリは、pathspecに一致するファイルについてのみ変更された"
"状態を記録します。 次に、インデックスエントリと作業ツリーファイルは、これらの"
"ファイルについてのみHEADの状態に巻き戻されされ、pathspecに一致しないファイル"
"はそのまま残ります。"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:256
msgid "For more details, see the 'pathspec' entry in linkgit:gitglossary[7]."
msgstr ""
"詳細については、 linkgit:gitglossary[7] の「pathspec」エントリを参照してくだ"
"さい。"

#. type: Labeled list
#: ../Documentation-sedout/git-stash.txt:257
#, no-wrap
msgid "<stash>"
msgstr "<stash>"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:260
msgid ""
"This option is only valid for `apply`, `branch`, `drop`, `pop`, `show` "
"commands."
msgstr ""
"このオプションは、 `apply`, `branch`, `drop`, `pop`, `show` コマンドにのみ有"
"効です。"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:263
msgid ""
"A reference of the form `stash@{<revision>}`. When no `<stash>` is given, "
"the latest stash is assumed (that is, `stash@{0}`)."
msgstr ""
"`stash@{<revision>}` 形式の参照。 `<stash>` が指定されていない場合、最新のス"
"タッシュ(`stash@{0}`)を想定します。"

#. type: Title -
#: ../Documentation-sedout/git-stash.txt:265
#, no-wrap
msgid "DISCUSSION"
msgstr "DISCUSSION"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:272
msgid ""
"A stash entry is represented as a commit whose tree records the state of the "
"working directory, and its first parent is the commit at `HEAD` when the "
"entry was created.  The tree of the second parent records the state of the "
"index when the entry is made, and it is made a child of the `HEAD` commit.  "
"The ancestry graph looks like this:"
msgstr ""
"スタッシュエントリーは、作業ディレクトリの状態を記録するツリーを持つコミット"
"として表現され、その最初の親はエントリーが作成された `HEAD` でのコミットとな"
"ります。 2番目の親のツリーは、エントリーが作成されたときのインデックスの状態"
"を記録しており、`HEAD` コミットの子として作られます。 祖先のグラフは以下のよ"
"うになります:"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:276
#, no-wrap
msgid ""
"            .----W\n"
"           /    /\n"
"     -----H----I\n"
msgstr ""
"            .----W\n"
"           /    /\n"
"     -----H----I\n"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:280
msgid ""
"where `H` is the `HEAD` commit, `I` is a commit that records the state of "
"the index, and `W` is a commit that records the state of the working tree."
msgstr ""
"ここで、 `H` は `HEAD` コミット、 `I` はインデックスの状態を記録するコミッ"
"ト、 `W` は作業ツリーの状態を記録するコミットです。"

#. type: Title -
#: ../Documentation-sedout/git-stash.txt:283
#, no-wrap
msgid "EXAMPLES"
msgstr "EXAMPLES"

#. type: Labeled list
#: ../Documentation-sedout/git-stash.txt:285
#, no-wrap
msgid "Pulling into a dirty tree"
msgstr "Pulling into a dirty tree"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:291
msgid ""
"When you are in the middle of something, you learn that there are upstream "
"changes that are possibly relevant to what you are doing.  When your local "
"changes do not conflict with the changes in the upstream, a simple `git "
"pull` will let you move forward."
msgstr ""
"あなたが何かしている最中、あなたがしていることにおそらく関連しているかもしれ"
"ないアップストリームの変更があったことを知りました。 あなたのローカルの変更が"
"アップストリームの変更と競合しない場合は、単純に `git pull `で先に進むことが"
"できます。"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:296
msgid ""
"However, there are cases in which your local changes do conflict with the "
"upstream changes, and `git pull` refuses to overwrite your changes.  In such "
"a case, you can stash your changes away, perform a pull, and then unstash, "
"like this:"
msgstr ""
"しかしながら、あなたのローカルの変更がアップストリームの変更と競合し、 `git "
"pull` が変更の上書きを拒否する場合があります。 このような場合、以下のように、"
"変更をスタッシュし、プルしてから、スタッシュ解除できます:"

#. type: delimited block -
#: ../Documentation-sedout/git-stash.txt:304
#, no-wrap
msgid ""
"$ git pull\n"
" ...\n"
"file foobar not up to date, cannot merge.\n"
"$ git stash\n"
"$ git pull\n"
"$ git stash pop\n"
msgstr ""
"$ git pull\n"
" ...\n"
"file foobar not up to date, cannot merge.\n"
"$ git stash\n"
"$ git pull\n"
"$ git stash pop\n"

#. type: Labeled list
#: ../Documentation-sedout/git-stash.txt:306
#, no-wrap
msgid "Interrupted workflow"
msgstr "Interrupted workflow"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:312
msgid ""
"When you are in the middle of something, your boss comes in and demands that "
"you fix something immediately.  Traditionally, you would make a commit to a "
"temporary branch to store your changes away, and return to your original "
"branch to make the emergency fix, like this:"
msgstr ""
"あなたが何かやってる真っ最中に、上司がやって来て、あなたにすぐに何かを直すよ"
"うに要求します。 従来は、一時的なブランチにコミットして変更を保存し、元のブラ"
"ンチに戻って以下のように緊急修正を行っていました:"

#. type: delimited block -
#: ../Documentation-sedout/git-stash.txt:323
#, no-wrap
msgid ""
"# ... hack hack hack ...\n"
"$ git switch -c my_wip\n"
"$ git commit -a -m \"WIP\"\n"
"$ git switch master\n"
"$ edit emergency fix\n"
"$ git commit -a -m \"Fix in a hurry\"\n"
"$ git switch my_wip\n"
"$ git reset --soft HEAD^\n"
"# ... continue hacking ...\n"
msgstr ""
"# ... hack hack hack ...\n"
"$ git switch -c my_wip\n"
"$ git commit -a -m \"WIP\"\n"
"$ git switch master\n"
"$ edit emergency fix\n"
"$ git commit -a -m \"Fix in a hurry\"\n"
"$ git switch my_wip\n"
"$ git reset --soft HEAD^\n"
"# ... continue hacking ...\n"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:326
msgid "You can use 'git stash' to simplify the above, like this:"
msgstr "`git stash` を使用することで上記を以下のように簡略化できます:"

#. type: delimited block -
#: ../Documentation-sedout/git-stash.txt:334
#, no-wrap
msgid ""
"# ... hack hack hack ...\n"
"$ git stash\n"
"$ edit emergency fix\n"
"$ git commit -a -m \"Fix in a hurry\"\n"
"$ git stash pop\n"
"# ... continue hacking ...\n"
msgstr ""
"# ... hack hack hack ...\n"
"$ git stash\n"
"$ edit emergency fix\n"
"$ git commit -a -m \"Fix in a hurry\"\n"
"$ git stash pop\n"
"# ... continue hacking ...\n"

#. type: Labeled list
#: ../Documentation-sedout/git-stash.txt:336
#, no-wrap
msgid "Testing partial commits"
msgstr "Testing partial commits"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:341
msgid ""
"You can use `git stash push --keep-index` when you want to make two or more "
"commits out of the changes in the work tree, and you want to test each "
"change before committing:"
msgstr ""
"ワークツリーの変更から2つ以上のコミットを行い、コミットする前に各変更をテスト"
"する場合は、 `git stash push --keep-index` を使用できます:"

#. type: delimited block -
#: ../Documentation-sedout/git-stash.txt:352
#, no-wrap
msgid ""
"# ... hack hack hack ...\n"
"$ git add --patch foo            # add just first part to the index\n"
"$ git stash push --keep-index    # save all other changes to the stash\n"
"$ edit/build/test first part\n"
"$ git commit -m 'First part'     # commit fully tested change\n"
"$ git stash pop                  # prepare to work on all other changes\n"
"# ... repeat above five steps until one commit remains ...\n"
"$ edit/build/test remaining parts\n"
"$ git commit foo -m 'Remaining parts'\n"
msgstr ""
"# ... hack hack hack ...\n"
"$ git add --patch foo            # add just first part to the index\n"
"$ git stash push --keep-index    # save all other changes to the stash\n"
"$ edit/build/test first part\n"
"$ git commit -m 'First part'     # commit fully tested change\n"
"$ git stash pop                  # prepare to work on all other changes\n"
"# ... repeat above five steps until one commit remains ...\n"
"$ edit/build/test remaining parts\n"
"$ git commit foo -m 'Remaining parts'\n"

#. type: Labeled list
#: ../Documentation-sedout/git-stash.txt:354
#, no-wrap
msgid "Saving unrelated changes for future use"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:361
msgid ""
"When you are in the middle of massive changes and you find some unrelated "
"issue that you don't want to forget to fix, you can do the change(s), stage "
"them, and use `git stash push --staged` to stash them out for future use. "
"This is similar to committing the staged changes, only the commit ends-up "
"being in the stash and not on the current branch."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-stash.txt:370
#, fuzzy, no-wrap
#| msgid ""
#| "# ... hack hack hack ...\n"
#| "$ git add --patch foo            # add just first part to the index\n"
#| "$ git stash push --keep-index    # save all other changes to the stash\n"
#| "$ edit/build/test first part\n"
#| "$ git commit -m 'First part'     # commit fully tested change\n"
#| "$ git stash pop                  # prepare to work on all other changes\n"
#| "# ... repeat above five steps until one commit remains ...\n"
#| "$ edit/build/test remaining parts\n"
#| "$ git commit foo -m 'Remaining parts'\n"
msgid ""
"# ... hack hack hack ...\n"
"$ git add --patch foo           # add unrelated changes to the index\n"
"$ git stash push --staged       # save these changes to the stash\n"
"# ... hack hack hack, finish curent changes ...\n"
"$ git commit -m 'Massive'       # commit fully tested changes\n"
"$ git switch fixup-branch       # switch to another branch\n"
"$ git stash pop                 # to finish work on the saved changes\n"
msgstr ""
"# ... hack hack hack ...\n"
"$ git add --patch foo            # add just first part to the index\n"
"$ git stash push --keep-index    # save all other changes to the stash\n"
"$ edit/build/test first part\n"
"$ git commit -m 'First part'     # commit fully tested change\n"
"$ git stash pop                  # prepare to work on all other changes\n"
"# ... repeat above five steps until one commit remains ...\n"
"$ edit/build/test remaining parts\n"
"$ git commit foo -m 'Remaining parts'\n"

#. type: Labeled list
#: ../Documentation-sedout/git-stash.txt:372
#, no-wrap
msgid "Recovering stash entries that were cleared/dropped erroneously"
msgstr "誤ってクリアまたはドロップされたスタッシュエントリの回復"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:378
msgid ""
"If you mistakenly drop or clear stash entries, they cannot be recovered "
"through the normal safety mechanisms.  However, you can try the following "
"incantation to get a list of stash entries that are still in your "
"repository, but not reachable any more:"
msgstr ""
"誤ってスタッシュエントリをドロップまたはクリアした場合、通常の安全メカニズム"
"では回復できません。 ただし、以下の呪文を試して、リポジトリに残っているが到達"
"できなくなったスタッシュエントリのリストを取得できます:"

#. type: delimited block -
#: ../Documentation-sedout/git-stash.txt:383
#, no-wrap
msgid ""
"git fsck --unreachable |\n"
"grep commit | cut -d\\  -f3 |\n"
"xargs git log --merges --no-walk --grep=WIP\n"
msgstr ""
"git fsck --unreachable |\n"
"grep commit | cut -d\\  -f3 |\n"
"xargs git log --merges --no-walk --grep=WIP\n"

#. type: Title -
#: ../Documentation-sedout/git-stash.txt:386
#, no-wrap
msgid "CONFIGURATION"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-stash.txt:394
#, no-wrap
msgid "SEE ALSO"
msgstr "SEE ALSO"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:400
msgid ""
"linkgit:git-checkout[1], linkgit:git-commit[1], linkgit:git-reflog[1], "
"linkgit:git-reset[1], linkgit:git-switch[1]"
msgstr ""
"linkgit:git-checkout[1], linkgit:git-commit[1], linkgit:git-reflog[1], "
"linkgit:git-reset[1], linkgit:git-switch[1]"

#. type: Title -
#: ../Documentation-sedout/git-stash.txt:402
#, no-wrap
msgid "GIT"
msgstr "GIT"

#. type: Plain text
#: ../Documentation-sedout/git-stash.txt:403
msgid "Part of the linkgit:git[1] suite"
msgstr "Part of the linkgit:git[1] suite"
