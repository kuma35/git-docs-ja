# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-10-02 01:07+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Labeled list
#: ../Documentation/config/core.txt:1
#, no-wrap
msgid "core.fileMode"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:4
msgid ""
"Tells Git if the executable bit of files in the working tree is to be "
"honored."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:11
msgid ""
"Some filesystems lose the executable bit when a file that is marked as "
"executable is checked out, or checks out a non-executable file with "
"executable bit on.  linkgit:git-clone[1] or linkgit:git-init[1] probe the "
"filesystem to see if it handles the executable bit correctly and this "
"variable is automatically set as necessary."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:20
msgid ""
"A repository, however, may be on a filesystem that handles the filemode "
"correctly, and this variable is set to 'true' when created, but later may be "
"made accessible from another environment that loses the filemode "
"(e.g. exporting ext4 via CIFS mount, visiting a Cygwin created repository "
"with Git for Windows or Eclipse).  In such a case it may be necessary to set "
"this variable to 'false'.  See linkgit:git-update-index[1]."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:22
msgid ""
"The default is true (when core.filemode is not specified in the config "
"file)."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:23
#, no-wrap
msgid "core.hideDotFiles"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:28
msgid ""
"(Windows-only) If true, mark newly-created directories and files whose name "
"starts with a dot as hidden.  If 'dotGitOnly', only the `.git/` directory is "
"hidden, but no other files starting with a dot.  The default mode is "
"'dotGitOnly'."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:29
#, no-wrap
msgid "core.ignoreCase"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:36
msgid ""
"Internal variable which enables various workarounds to enable Git to work "
"better on filesystems that are not case sensitive, like APFS, HFS+, FAT, "
"NTFS, etc. For example, if a directory listing finds \"makefile\" when Git "
"expects \"Makefile\", Git will assume it is really the same file, and "
"continue to remember it as \"Makefile\"."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:40
msgid ""
"The default is false, except linkgit:git-clone[1] or linkgit:git-init[1] "
"will probe and set core.ignoreCase true if appropriate when the repository "
"is created."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:43
msgid ""
"Git relies on the proper configuration of this variable for your operating "
"and file system. Modifying this value may result in unexpected behavior."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:44
#, no-wrap
msgid "core.precomposeUnicode"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:52
msgid ""
"This option is only used by Mac OS implementation of Git.  When "
"core.precomposeUnicode=true, Git reverts the unicode decomposition of "
"filenames done by Mac OS. This is useful when sharing a repository between "
"Mac OS and Linux or Windows.  (Git for Windows 1.7.10 or higher is needed, "
"or Git under cygwin 1.7).  When false, file names are handled fully "
"transparent by Git, which is backward compatible with older versions of Git."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:53
#, no-wrap
msgid "core.protectHFS"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:57
msgid ""
"If set to true, do not allow checkout of paths that would be considered "
"equivalent to `.git` on an HFS+ filesystem.  Defaults to `true` on Mac OS, "
"and `false` elsewhere."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:58
#, no-wrap
msgid "core.protectNTFS"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:63
msgid ""
"If set to true, do not allow checkout of paths that would cause problems "
"with the NTFS filesystem, e.g. conflict with 8.3 \"short\" names.  Defaults "
"to `true` on Windows, and `false` elsewhere."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:64
#, no-wrap
msgid "core.fsmonitor"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:70
msgid ""
"If set, the value of this variable is used as a command which will identify "
"all files that may have changed since the requested date/time. This "
"information is used to speed up git by avoiding unnecessary processing of "
"files that have not changed.  See the \"fsmonitor-watchman\" section of "
"linkgit:githooks[5]."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:71
#, no-wrap
msgid "core.fsmonitorHookVersion"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:81
msgid ""
"Sets the version of hook that is to be used when calling fsmonitor.  There "
"are currently versions 1 and 2. When this is not set, version 2 will be "
"tried first and if it fails then version 1 will be tried. Version 1 uses a "
"timestamp as input to determine which files have changes since that time but "
"some monitors like watchman have race conditions when used with a "
"timestamp.  Version 2 uses an opaque string so that the monitor can return "
"something that can be used to determine what files have changed without race "
"conditions."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:82
#, no-wrap
msgid "core.trustctime"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:88
msgid ""
"If false, the ctime differences between the index and the working tree are "
"ignored; useful when the inode change time is regularly modified by "
"something outside Git (file system crawlers and some backup systems).  See "
"linkgit:git-update-index[1]. True by default."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:89
#, no-wrap
msgid "core.splitIndex"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:92
msgid ""
"If true, the split-index feature of the index will be used.  See "
"linkgit:git-update-index[1]. False by default."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:93
#, no-wrap
msgid "core.untrackedCache"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:103
msgid ""
"Determines what to do about the untracked cache feature of the index. It "
"will be kept, if this variable is unset or set to `keep`. It will "
"automatically be added if set to `true`. And it will automatically be "
"removed, if set to `false`. Before setting it to `true`, you should check "
"that mtime is working properly on your system.  See "
"linkgit:git-update-index[1]. `keep` by default, unless `feature.manyFiles` "
"is enabled which sets this setting to `true` by default."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:104
#, no-wrap
msgid "core.checkStat"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:114
msgid ""
"When missing or is set to `default`, many fields in the stat structure are "
"checked to detect if a file has been modified since Git looked at it.  When "
"this configuration variable is set to `minimal`, sub-second part of mtime "
"and ctime, the uid and gid of the owner of the file, the inode number (and "
"the device number, if Git was compiled to use it), are excluded from the "
"check among these fields, leaving only the whole-second part of mtime (and "
"ctime, if `core.trustCtime` is set) and the filesize to be checked."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:119
msgid ""
"There are implementations of Git that do not leave usable values in some "
"fields (e.g. JGit); by excluding these fields from the comparison, the "
"`minimal` mode may help interoperability when the same repository is used by "
"these other systems at the same time."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:120
#, no-wrap
msgid "core.quotePath"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:134
msgid ""
"Commands that output paths (e.g. 'ls-files', 'diff'), will quote \"unusual\" "
"characters in the pathname by enclosing the pathname in double-quotes and "
"escaping those characters with backslashes in the same way C escapes control "
"characters (e.g.  `\\t` for TAB, `\\n` for LF, `\\\\` for backslash) or "
"bytes with values larger than 0x80 (e.g. octal `\\302\\265` for \"micro\" in "
"UTF-8).  If this variable is set to false, bytes higher than 0x80 are not "
"considered \"unusual\" any more. Double-quotes, backslash and control "
"characters are always escaped regardless of the setting of this variable.  A "
"simple space character is not considered \"unusual\".  Many commands can "
"output pathnames completely verbatim using the `-z` option. The default "
"value is true."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:135
#, no-wrap
msgid "core.eol"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:145
msgid ""
"Sets the line ending type to use in the working directory for files that are "
"marked as text (either by having the `text` attribute set, or by having "
"`text=auto` and Git auto-detecting the contents as text).  Alternatives are "
"'lf', 'crlf' and 'native', which uses the platform's native line ending.  "
"The default value is `native`.  See linkgit:gitattributes[5] for more "
"information on end-of-line conversion. Note that this value is ignored if "
"`core.autocrlf` is set to `true` or `input`."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:146
#, no-wrap
msgid "core.safecrlf"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:156
msgid ""
"If true, makes Git check if converting `CRLF` is reversible when end-of-line "
"conversion is active.  Git will verify if a command modifies a file in the "
"work tree either directly or indirectly.  For example, committing a file "
"followed by checking out the same file should yield the original file in the "
"work tree.  If this is not the case for the current setting of "
"`core.autocrlf`, Git will reject the file.  The variable can be set to "
"\"warn\", in which case Git will only warn about an irreversible conversion "
"but continue the operation."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:165
msgid ""
"CRLF conversion bears a slight chance of corrupting data.  When it is "
"enabled, Git will convert CRLF to LF during commit and LF to CRLF during "
"checkout.  A file that contains a mixture of LF and CRLF before the commit "
"cannot be recreated by Git.  For text files this is the right thing to do: "
"it corrects line endings such that we have only LF line endings in the "
"repository.  But for binary files that are accidentally classified as text "
"the conversion can corrupt data."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:172
msgid ""
"If you recognize such corruption early you can easily fix it by setting the "
"conversion type explicitly in .gitattributes.  Right after committing you "
"still have the original file in your work tree and this file is not yet "
"corrupted.  You can explicitly tell Git that this file is binary and Git "
"will handle the file appropriately."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:179
msgid ""
"Unfortunately, the desired effect of cleaning up text files with mixed line "
"endings and the undesired effect of corrupting binary files cannot be "
"distinguished.  In both cases CRLFs are removed in an irreversible way.  For "
"text files this is the right thing to do because CRLFs are line endings, "
"while for binary files converting CRLFs corrupts data."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:190
msgid ""
"Note, this safety check does not mean that a checkout will generate a file "
"identical to the original file for a different setting of `core.eol` and "
"`core.autocrlf`, but only for the current one.  For example, a text file "
"with `LF` would be accepted with `core.eol=lf` and could later be checked "
"out with `core.eol=crlf`, in which case the resulting file would contain "
"`CRLF`, although the original file contained `LF`.  However, in both work "
"trees the line endings would be consistent, that is either all `LF` or all "
"`CRLF`, but never mixed.  A file with mixed line endings would be reported "
"by the `core.safecrlf` mechanism."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:191
#, no-wrap
msgid "core.autocrlf"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:198
msgid ""
"Setting this variable to \"true\" is the same as setting the `text` "
"attribute to \"auto\" on all files and core.eol to \"crlf\".  Set to true if "
"you want to have `CRLF` line endings in your working directory and the "
"repository has LF line endings.  This variable can be set to 'input', in "
"which case no output conversion is performed."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:199
#, no-wrap
msgid "core.checkRoundtripEncoding"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:204
msgid ""
"A comma and/or whitespace separated list of encodings that Git performs "
"UTF-8 round trip checks on if they are used in an `working-tree-encoding` "
"attribute (see linkgit:gitattributes[5]).  The default value is `SHIFT-JIS`."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:205
#, no-wrap
msgid "core.symlinks"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:211
msgid ""
"If false, symbolic links are checked out as small plain files that contain "
"the link text. linkgit:git-update-index[1] and linkgit:git-add[1] will not "
"change the recorded type to regular file. Useful on filesystems like FAT "
"that do not support symbolic links."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:215
msgid ""
"The default is true, except linkgit:git-clone[1] or linkgit:git-init[1] will "
"probe and set core.symlinks false if appropriate when the repository is "
"created."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:216
#, no-wrap
msgid "core.gitProxy"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:224
msgid ""
"A \"proxy command\" to execute (as 'command host port') instead of "
"establishing direct connection to the remote server when using the Git "
"protocol for fetching. If the variable value is in the \"COMMAND for "
"DOMAIN\" format, the command is applied only on hostnames ending with the "
"specified domain string. This variable may be set multiple times and is "
"matched in the given order; the first match wins."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:228
msgid ""
"Can be overridden by the `GIT_PROXY_COMMAND` environment variable (which "
"always applies universally, without the special \"for\" handling)."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:233
msgid ""
"The special string `none` can be used as the proxy command to specify that "
"no proxy be used for a given domain pattern.  This is useful for excluding "
"servers inside a firewall from proxy use, while defaulting to a common proxy "
"for external domains."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:234
#, no-wrap
msgid "core.sshCommand"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:240
msgid ""
"If this variable is set, `git fetch` and `git push` will use the specified "
"command instead of `ssh` when they need to connect to a remote system. The "
"command is in the same form as the `GIT_SSH_COMMAND` environment variable "
"and is overridden when the environment variable is set."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:241
#, no-wrap
msgid "core.ignoreStat"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:245
msgid ""
"If true, Git will avoid using lstat() calls to detect if files have changed "
"by setting the \"assume-unchanged\" bit for those tracked files which it has "
"updated identically in both the index and working tree."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:250
msgid ""
"When files are modified outside of Git, the user will need to stage the "
"modified files explicitly (e.g. see 'Examples' section in "
"linkgit:git-update-index[1]).  Git will not normally detect changes to those "
"files."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:253
msgid ""
"This is useful on systems where lstat() calls are very slow, such as "
"CIFS/Microsoft Windows."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:255
msgid "False by default."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:256
#, no-wrap
msgid "core.preferSymlinkRefs"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:261
msgid ""
"Instead of the default \"symref\" format for HEAD and other symbolic "
"reference files, use symbolic links.  This is sometimes needed to work with "
"old scripts that expect HEAD to be a symbolic link."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:262
#, no-wrap
msgid "core.alternateRefsCommand"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:268
msgid ""
"When advertising tips of available history from an alternate, use the shell "
"to execute the specified command instead of linkgit:git-for-each-ref[1]. The "
"first argument is the absolute path of the alternate. Output must contain "
"one hex object id per line (i.e., the same as produced by `git for-each-ref "
"--format='%(objectname)'`)."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:272
msgid ""
"Note that you cannot generally put `git for-each-ref` directly into the "
"config value, as it does not take a repository path as an argument (but you "
"can wrap the command above in a shell script)."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:273
#, no-wrap
msgid "core.alternateRefsPrefixes"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:279
msgid ""
"When listing references from an alternate, list only references that begin "
"with the given prefix. Prefixes match as if they were given as arguments to "
"linkgit:git-for-each-ref[1]. To list multiple prefixes, separate them with "
"whitespace. If `core.alternateRefsCommand` is set, setting "
"`core.alternateRefsPrefixes` has no effect."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:280
#, no-wrap
msgid "core.bare"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:285
msgid ""
"If true this repository is assumed to be 'bare' and has no working directory "
"associated with it.  If this is the case a number of commands that require a "
"working directory will be disabled, such as linkgit:git-add[1] or "
"linkgit:git-merge[1]."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:290
msgid ""
"This setting is automatically guessed by linkgit:git-clone[1] or "
"linkgit:git-init[1] when the repository was created.  By default a "
"repository that ends in \"/.git\" is assumed to be not bare (bare = false), "
"while all other repositories are assumed to be bare (bare"
msgstr ""

#. type: Title =
#: ../Documentation/config/core.txt:290
#, no-wrap
msgid "true)."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:292
#, no-wrap
msgid "core.worktree"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:305
msgid ""
"Set the path to the root of the working tree.  If `GIT_COMMON_DIR` "
"environment variable is set, core.worktree is ignored and not used for "
"determining the root of working tree.  This can be overridden by the "
"`GIT_WORK_TREE` environment variable and the `--work-tree` command-line "
"option.  The value can be an absolute path or relative to the path to the "
".git directory, which is either specified by --git-dir or GIT_DIR, or "
"automatically discovered.  If --git-dir or GIT_DIR is specified but none of "
"--work-tree, GIT_WORK_TREE and core.worktree is specified, the current "
"working directory is regarded as the top level of your working tree."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:315
msgid ""
"Note that this variable is honored even when set in a configuration file in "
"a \".git\" subdirectory of a directory and its value differs from the latter "
"directory (e.g. \"/path/to/.git/config\" has core.worktree set to "
"\"/different/path\"), which is most likely a misconfiguration.  Running Git "
"commands in the \"/path/to\" directory will still use \"/different/path\" as "
"the root of the work tree and can cause confusion unless you know what you "
"are doing (e.g. you are creating a read-only snapshot of the same index to a "
"location different from the repository's usual working tree)."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:316
#, no-wrap
msgid "core.logAllRefUpdates"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:327
msgid ""
"Enable the reflog. Updates to a ref <ref> is logged to the file "
"\"`$GIT_DIR/logs/<ref>`\", by appending the new and old SHA-1, the date/time "
"and the reason of the update, but only when the file exists.  If this "
"configuration variable is set to `true`, missing \"`$GIT_DIR/logs/<ref>`\" "
"file is automatically created for branch heads (i.e. under `refs/heads/`), "
"remote refs (i.e. under `refs/remotes/`), note refs (i.e. under "
"`refs/notes/`), and the symbolic ref `HEAD`.  If it is set to `always`, then "
"a missing reflog is automatically created for any ref under `refs/`."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:330
msgid ""
"This information can be used to determine what commit was the tip of a "
"branch \"2 days ago\"."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:334
msgid ""
"This value is true by default in a repository that has a working directory "
"associated with it, and false by default in a bare repository."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:335
#, no-wrap
msgid "core.repositoryFormatVersion"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:338
msgid "Internal variable identifying the repository format and layout version."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:339
#, no-wrap
msgid "core.sharedRepository"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:353
msgid ""
"When 'group' (or 'true'), the repository is made shareable between several "
"users in a group (making sure all the files and objects are "
"group-writable). When 'all' (or 'world' or 'everybody'), the repository will "
"be readable by all users, additionally to being group-shareable. When "
"'umask' (or 'false'), Git will use permissions reported by umask(2). When "
"'0xxx', where '0xxx' is an octal number, files in the repository will have "
"this mode value. '0xxx' will override user's umask value (whereas the other "
"options will only override requested parts of the user's umask "
"value). Examples: '0660' will make the repo read/write-able for the owner "
"and group, but inaccessible to others (equivalent to 'group' unless umask is "
"e.g. '0022'). '0640' is a repository that is group-readable but not "
"group-writable.  See linkgit:git-init[1]. False by default."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:354
#, no-wrap
msgid "core.warnAmbiguousRefs"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:357
msgid ""
"If true, Git will warn you if the ref name you passed it is ambiguous and "
"might match multiple refs in the repository. True by default."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:358
#, no-wrap
msgid "core.compression"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:364
msgid ""
"An integer -1..9, indicating a default compression level.  -1 is the zlib "
"default. 0 means no compression, and 1..9 are various speed/size tradeoffs, "
"9 being slowest.  If set, this provides a default to other compression "
"variables, such as `core.looseCompression` and `pack.compression`."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:365
#, no-wrap
msgid "core.looseCompression"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:371
msgid ""
"An integer -1..9, indicating the compression level for objects that are not "
"in a pack file. -1 is the zlib default. 0 means no compression, and 1..9 are "
"various speed/size tradeoffs, 9 being slowest.  If not set, defaults to "
"core.compression.  If that is not set, defaults to 1 (best speed)."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:372
#, no-wrap
msgid "core.packedGitWindowSize"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:380
msgid ""
"Number of bytes of a pack file to map into memory in a single mapping "
"operation.  Larger window sizes may allow your system to process a smaller "
"number of large pack files more quickly.  Smaller window sizes will "
"negatively affect performance due to increased calls to the operating "
"system's memory manager, but may improve performance when accessing a large "
"number of large pack files."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:385
msgid ""
"Default is 1 MiB if NO_MMAP was set at compile time, otherwise 32 MiB on 32 "
"bit platforms and 1 GiB on 64 bit platforms.  This should be reasonable for "
"all users/operating systems.  You probably do not need to adjust this value."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:387 ../Documentation/config/core.txt:400 ../Documentation/config/core.txt:413 ../Documentation/config/core.txt:426
msgid "Common unit suffixes of 'k', 'm', or 'g' are supported."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:388
#, no-wrap
msgid "core.packedGitLimit"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:393
msgid ""
"Maximum number of bytes to map simultaneously into memory from pack files.  "
"If Git needs to access more than this many bytes at once to complete an "
"operation it will unmap existing regions to reclaim virtual address space "
"within the process."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:398
msgid ""
"Default is 256 MiB on 32 bit platforms and 32 TiB (effectively unlimited) on "
"64 bit platforms.  This should be reasonable for all users/operating "
"systems, except on the largest projects.  You probably do not need to adjust "
"this value."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:401
#, no-wrap
msgid "core.deltaBaseCacheLimit"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:407
msgid ""
"Maximum number of bytes per thread to reserve for caching base objects that "
"may be referenced by multiple deltified objects.  By storing the entire "
"decompressed base objects in a cache Git is able to avoid unpacking and "
"decompressing frequently used base objects multiple times."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:411
msgid ""
"Default is 96 MiB on all platforms.  This should be reasonable for all "
"users/operating systems, except on the largest projects.  You probably do "
"not need to adjust this value."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:414
#, no-wrap
msgid "core.bigFileThreshold"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:420
msgid ""
"Files larger than this size are stored deflated, without attempting delta "
"compression.  Storing large files without delta compression avoids excessive "
"memory usage, at the slight expense of increased disk usage. Additionally "
"files larger than this size are always treated as binary."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:424
msgid ""
"Default is 512 MiB on all platforms.  This should be reasonable for most "
"projects as source code and other text files can still be delta compressed, "
"but larger binary media files won't be."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:427
#, no-wrap
msgid "core.excludesFile"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:434
msgid ""
"Specifies the pathname to the file that contains patterns to describe paths "
"that are not meant to be tracked, in addition to `.gitignore` "
"(per-directory) and `.git/info/exclude`.  Defaults to "
"`$XDG_CONFIG_HOME/git/ignore`.  If `$XDG_CONFIG_HOME` is either not set or "
"empty, `$HOME/.config/git/ignore` is used instead. See linkgit:gitignore[5]."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:435
#, no-wrap
msgid "core.askPass"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:443
msgid ""
"Some commands (e.g. svn and http interfaces) that interactively ask for a "
"password can be told to use an external program given via the value of this "
"variable. Can be overridden by the `GIT_ASKPASS` environment variable. If "
"not set, fall back to the value of the `SSH_ASKPASS` environment variable "
"or, failing that, a simple password prompt. The external program shall be "
"given a suitable prompt as command-line argument and write the password on "
"its STDOUT."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:444
#, no-wrap
msgid "core.attributesFile"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:451
msgid ""
"In addition to `.gitattributes` (per-directory) and `.git/info/attributes`, "
"Git looks into this file for attributes (see linkgit:gitattributes[5]). Path "
"expansions are made the same way as for `core.excludesFile`. Its default "
"value is `$XDG_CONFIG_HOME/git/attributes`. If `$XDG_CONFIG_HOME` is either "
"not set or empty, `$HOME/.config/git/attributes` is used instead."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:452
#, no-wrap
msgid "core.hooksPath"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:458
msgid ""
"By default Git will look for your hooks in the `$GIT_DIR/hooks` "
"directory. Set this to different path, e.g. `/etc/git/hooks`, and Git will "
"try to find your hooks in that directory, e.g. `/etc/git/hooks/pre-receive` "
"instead of in `$GIT_DIR/hooks/pre-receive`."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:462
msgid ""
"The path can be either absolute or relative. A relative path is taken as "
"relative to the directory where the hooks are run (see the \"DESCRIPTION\" "
"section of linkgit:githooks[5])."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:468
msgid ""
"This configuration variable is useful in cases where you'd like to centrally "
"configure your Git hooks instead of configuring them on a per-repository "
"basis, or as a more flexible and centralized alternative to having an "
"`init.templateDir` where you've changed default hooks."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:469
#, no-wrap
msgid "core.editor"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:474
msgid ""
"Commands such as `commit` and `tag` that let you edit messages by launching "
"an editor use the value of this variable when it is set, and the environment "
"variable `GIT_EDITOR` is not set.  See linkgit:git-var[1]."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:475
#, no-wrap
msgid "core.commentChar"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:480
msgid ""
"Commands such as `commit` and `tag` that let you edit messages consider a "
"line that begins with this character commented, and removes them after the "
"editor returns (default '#')."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:483
msgid ""
"If set to \"auto\", `git-commit` would select a character that is not the "
"beginning character of any line in existing commit messages."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:484
#, no-wrap
msgid "core.filesRefLockTimeout"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:489
msgid ""
"The length of time, in milliseconds, to retry when trying to lock an "
"individual reference. Value 0 means not to retry at all; -1 means to try "
"indefinitely. Default is 100 (i.e., retry for 100ms)."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:490
#, no-wrap
msgid "core.packedRefsTimeout"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:495
msgid ""
"The length of time, in milliseconds, to retry when trying to lock the "
"`packed-refs` file. Value 0 means not to retry at all; -1 means to try "
"indefinitely. Default is 1000 (i.e., retry for 1 second)."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:496
#, no-wrap
msgid "core.pager"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:502
msgid ""
"Text viewer for use by Git commands (e.g., 'less').  The value is meant to "
"be interpreted by the shell.  The order of preference is the `$GIT_PAGER` "
"environment variable, then `core.pager` configuration, then `$PAGER`, and "
"then the default chosen at compile time (usually 'less')."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:516
msgid ""
"When the `LESS` environment variable is unset, Git sets it to `FRX` (if "
"`LESS` environment variable is set, Git does not change it at all).  If you "
"want to selectively override Git's default setting for `LESS`, you can set "
"`core.pager` to e.g. `less -S`.  This will be passed to the shell by Git, "
"which will translate the final command to `LESS=FRX less -S`. The "
"environment does not set the `S` option but the command line does, "
"instructing less to truncate long lines. Similarly, setting `core.pager` to "
"`less -+F` will deactivate the `F` option specified by the environment from "
"the command-line, deactivating the \"quit if one screen\" behavior of "
"`less`.  One can specifically activate some flags for particular commands: "
"for example, setting `pager.blame` to `less -S` enables line truncation only "
"for `git blame`."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:520
msgid ""
"Likewise, when the `LV` environment variable is unset, Git sets it to `-c`.  "
"You can override this setting by exporting `LV` with another value or "
"setting `core.pager` to `lv +c`."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:521
#, no-wrap
msgid "core.whitespace"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:527
msgid ""
"A comma separated list of common whitespace problems to notice.  'git diff' "
"will use `color.diff.whitespace` to highlight them, and 'git apply "
"--whitespace=error' will consider them as errors.  You can prefix `-` to "
"disable any of them (e.g. `-trailing-space`):"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:530
msgid ""
"`blank-at-eol` treats trailing whitespaces at the end of the line as an "
"error (enabled by default)."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:533
msgid ""
"`space-before-tab` treats a space character that appears immediately before "
"a tab character in the initial indent part of the line as an error (enabled "
"by default)."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:536
msgid ""
"`indent-with-non-tab` treats a line that is indented with space characters "
"instead of the equivalent tabs as an error (not enabled by default)."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:538
msgid ""
"`tab-in-indent` treats a tab character in the initial indent part of the "
"line as an error (not enabled by default)."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:540
msgid ""
"`blank-at-eof` treats blank lines added at the end of file as an error "
"(enabled by default)."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:542
msgid ""
"`trailing-space` is a short-hand to cover both `blank-at-eol` and "
"`blank-at-eof`."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:546
msgid ""
"`cr-at-eol` treats a carriage-return at the end of line as part of the line "
"terminator, i.e. with it, `trailing-space` does not trigger if the character "
"before such a carriage-return is not a whitespace (not enabled by default)."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:549
msgid ""
"`tabwidth=<n>` tells how many character positions a tab occupies; this is "
"relevant for `indent-with-non-tab` and when Git fixes `tab-in-indent` "
"errors. The default tab width is 8. Allowed values are 1 to 63."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:550
#, no-wrap
msgid "core.fsyncObjectFiles"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:552
msgid "This boolean will enable 'fsync()' when writing object files."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:557
msgid ""
"This is a total waste of time and effort on a filesystem that orders data "
"writes properly, but can be useful for filesystems that do not use "
"journalling (traditional UNIX filesystems) or that only journal metadata and "
"not file contents (OS X's HFS+, or Linux ext3 with \"data=writeback\")."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:558
#, no-wrap
msgid "core.preloadIndex"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:560
msgid "Enable parallel index preload for operations like 'git diff'"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:566
msgid ""
"This can speed up operations like 'git diff' and 'git status' especially on "
"filesystems like NFS that have weak caching semantics and thus relatively "
"high IO latencies.  When enabled, Git will do the index comparison to the "
"filesystem data in parallel, allowing overlapping IO's.  Defaults to true."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:567
#, no-wrap
msgid "core.unsetenvvars"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:572
msgid ""
"Windows-only: comma-separated list of environment variables' names that need "
"to be unset before spawning any other process.  Defaults to `PERL5LIB` to "
"account for the fact that Git for Windows insists on using its own Perl "
"interpreter."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:573
#, no-wrap
msgid "core.restrictinheritedhandles"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:578
msgid ""
"Windows-only: override whether spawned processes inherit only standard file "
"handles (`stdin`, `stdout` and `stderr`) or all handles. Can be `auto`, "
"`true` or `false`. Defaults to `auto`, which means `true` on Windows 7 and "
"later, and `false` on older Windows versions."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:579
#, no-wrap
msgid "core.createObject"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:583
msgid ""
"You can set this to 'link', in which case a hardlink followed by a delete of "
"the source are used to make sure that object creation will not overwrite "
"existing objects."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:587
msgid ""
"On some file system/operating system combinations, this is unreliable.  Set "
"this config setting to 'rename' there; However, This will remove the check "
"that makes sure that existing object files will not get overwritten."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:588
#, no-wrap
msgid "core.notesRef"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:593
msgid ""
"When showing commit messages, also show notes which are stored in the given "
"ref.  The ref must be fully qualified.  If the given ref does not exist, it "
"is not an error but means that no notes should be printed."
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:596
msgid ""
"This setting defaults to \"refs/notes/commits\", and it can be overridden by "
"the `GIT_NOTES_REF` environment variable.  See linkgit:git-notes[1]."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:597
#, no-wrap
msgid "core.commitGraph"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:601
msgid ""
"If true, then git will read the commit-graph file (if it exists)  to parse "
"the graph structure of commits. Defaults to true. See "
"linkgit:git-commit-graph[1] for more information."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:602
#, no-wrap
msgid "core.useReplaceRefs"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:606
msgid ""
"If set to `false`, behave as if the `--no-replace-objects` option was given "
"on the command line. See linkgit:git[1] and linkgit:git-replace[1] for more "
"information."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:607
#, no-wrap
msgid "core.multiPackIndex"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:611
msgid ""
"Use the multi-pack-index file to track multiple packfiles using a single "
"index. See linkgit:git-multi-pack-index[1] for more information. Defaults to "
"true."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:612
#, no-wrap
msgid "core.sparseCheckout"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:615
msgid ""
"Enable \"sparse checkout\" feature. See linkgit:git-sparse-checkout[1] for "
"more information."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:616
#, no-wrap
msgid "core.sparseCheckoutCone"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:621
msgid ""
"Enables the \"cone mode\" of the sparse checkout feature. When the "
"sparse-checkout file contains a limited set of patterns, then this mode "
"provides significant performance advantages. See "
"linkgit:git-sparse-checkout[1] for more information."
msgstr ""

#. type: Labeled list
#: ../Documentation/config/core.txt:622
#, no-wrap
msgid "core.abbrev"
msgstr ""

#. type: Plain text
#: ../Documentation/config/core.txt:630
msgid ""
"Set the length object names are abbreviated to.  If unspecified or set to "
"\"auto\", an appropriate value is computed based on the approximate number "
"of packed objects in your repository, which hopefully is enough for "
"abbreviated object names to stay unique for some time.  If set to \"no\", no "
"abbreviation is made and the object names are shown in their full length.  "
"The minimum length is 4."
msgstr ""
