# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-10-01 00:25+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation/git-fast-export.txt:2
#, no-wrap
msgid "git-fast-export(1)"
msgstr ""

#. type: Title -
#: ../Documentation/git-fast-export.txt:5
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:7
msgid "git-fast-export - Git data exporter"
msgstr ""

#. type: Title -
#: ../Documentation/git-fast-export.txt:10
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:13
#, no-wrap
msgid "'git fast-export [<options>]' | 'git fast-import'\n"
msgstr ""

#. type: Title -
#: ../Documentation/git-fast-export.txt:15
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:18
msgid ""
"This program dumps the given revisions in a form suitable to be piped into "
"'git fast-import'."
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:23
msgid ""
"You can use it as a human-readable bundle replacement (see "
"linkgit:git-bundle[1]), or as a format that can be edited before being fed "
"to 'git fast-import' in order to do history rewrites (an ability relied on "
"by tools like 'git filter-repo')."
msgstr ""

#. type: Title -
#: ../Documentation/git-fast-export.txt:25
#, no-wrap
msgid "OPTIONS"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-fast-export.txt:26
#, no-wrap
msgid "--progress=<n>"
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:29
msgid ""
"Insert 'progress' statements every <n> objects, to be shown by 'git "
"fast-import' during import."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-fast-export.txt:30
#, no-wrap
msgid "--signed-tags=(verbatim|warn|warn-strip|strip|abort)"
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:34
msgid ""
"Specify how to handle signed tags.  Since any transformation after the "
"export can change the tag names (which can also happen when excluding "
"revisions) the signatures will not match."
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:41
msgid ""
"When asking to 'abort' (which is the default), this program will die when "
"encountering a signed tag.  With 'strip', the tags will silently be made "
"unsigned, with 'warn-strip' they will be made unsigned but a warning will be "
"displayed, with 'verbatim', they will be silently exported and with 'warn', "
"they will be exported, but you will see a warning."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-fast-export.txt:42
#, no-wrap
msgid "--tag-of-filtered-object=(abort|drop|rewrite)"
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:46
msgid ""
"Specify how to handle tags whose tagged object is filtered out.  Since "
"revisions and files to export can be limited by path, tagged objects may be "
"filtered completely."
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:52
msgid ""
"When asking to 'abort' (which is the default), this program will die when "
"encountering such a tag.  With 'drop' it will omit such tags from the "
"output.  With 'rewrite', if the tagged object is a commit, it will rewrite "
"the tag to tag an ancestor commit (via parent rewriting; see "
"linkgit:git-rev-list[1])"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-fast-export.txt:53
#, no-wrap
msgid "-M"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-fast-export.txt:54
#, no-wrap
msgid "-C"
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:58
msgid ""
"Perform move and/or copy detection, as described in the linkgit:git-diff[1] "
"manual page, and use it to generate rename and copy commands in the output "
"dump."
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:61
msgid ""
"Note that earlier versions of this command did not complain and produced "
"incorrect results if you gave these options."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-fast-export.txt:62
#, no-wrap
msgid "--export-marks=<file>"
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:73
msgid ""
"Dumps the internal marks table to <file> when complete.  Marks are written "
"one per line as `:markid SHA-1`. Only marks for revisions are dumped; marks "
"for blobs are ignored.  Backends can use this file to validate imports after "
"they have been completed, or to save the marks table across incremental "
"runs.  As <file> is only opened and truncated at completion, the same path "
"can also be safely given to --import-marks.  The file will not be written if "
"no new object has been marked/exported."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-fast-export.txt:74
#, no-wrap
msgid "--import-marks=<file>"
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:78
msgid ""
"Before processing any input, load the marks specified in <file>.  The input "
"file must exist, must be readable, and must use the same format as produced "
"by --export-marks."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-fast-export.txt:79
#, no-wrap
msgid "--mark-tags"
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:87
msgid ""
"In addition to labelling blobs and commits with mark ids, also label tags.  "
"This is useful in conjunction with `--export-marks` and `--import-marks`, "
"and is also useful (and necessary) for exporting of nested tags.  It does "
"not hurt other cases and would be the default, but many fast-import "
"frontends are not prepared to accept tags with mark identifiers."
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:92
msgid ""
"Any commits (or tags) that have already been marked will not be exported "
"again.  If the backend uses a similar --import-marks file, this allows for "
"incremental bidirectional exporting of the repository by keeping the marks "
"the same across runs."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-fast-export.txt:93
#, no-wrap
msgid "--fake-missing-tagger"
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:98
msgid ""
"Some old repositories have tags without a tagger.  The fast-import protocol "
"was pretty strict about that, and did not allow that.  So fake a tagger to "
"be able to fast-import the output."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-fast-export.txt:99
#, no-wrap
msgid "--use-done-feature"
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:102
msgid ""
"Start the stream with a 'feature done' stanza, and terminate it with a "
"'done' command."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-fast-export.txt:103
#, no-wrap
msgid "--no-data"
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:110
msgid ""
"Skip output of blob objects and instead refer to blobs via their original "
"SHA-1 hash.  This is useful when rewriting the directory structure or "
"history of a repository without touching the contents of individual files.  "
"Note that the resulting stream can only be used by a repository which "
"already contains the necessary objects."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-fast-export.txt:111
#, no-wrap
msgid "--full-tree"
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:116
msgid ""
"This option will cause fast-export to issue a \"deleteall\" directive for "
"each commit followed by a full list of all files in the commit (as opposed "
"to just listing the files which are different from the commit's first "
"parent)."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-fast-export.txt:117
#, no-wrap
msgid "--anonymize"
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:121
msgid ""
"Anonymize the contents of the repository while still retaining the shape of "
"the history and stored tree.  See the section on `ANONYMIZING` below."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-fast-export.txt:122
#, no-wrap
msgid "--anonymize-map=<from>[:<to>]"
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:126
msgid ""
"Convert token `<from>` to `<to>` in the anonymized output. If `<to>` is "
"omitted, map `<from>` to itself (i.e., do not anonymize it). See the section "
"on `ANONYMIZING` below."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-fast-export.txt:127
#, no-wrap
msgid "--reference-excluded-parents"
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:138
msgid ""
"By default, running a command such as `git fast-export master~5..master` "
"will not include the commit master{tilde}5 and will make master{tilde}4 no "
"longer have master{tilde}5 as a parent (though both the old master{tilde}4 "
"and new master{tilde}4 will have all the same files).  Use "
"--reference-excluded-parents to instead have the stream refer to commits in "
"the excluded range of history by their sha1sum.  Note that the resulting "
"stream can only be used by a repository which already contains the necessary "
"parent commits."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-fast-export.txt:139
#, no-wrap
msgid "--show-original-ids"
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:145
msgid ""
"Add an extra directive to the output for commits and blobs, `original-oid "
"<SHA1SUM>`.  While such directives will likely be ignored by importers such "
"as git-fast-import, it may be useful for intermediary filters (e.g. for "
"rewriting commit messages which refer to older commits, or for stripping "
"blobs by id)."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-fast-export.txt:146
#, no-wrap
msgid "--reencode=(yes|no|abort)"
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:152
msgid ""
"Specify how to handle `encoding` header in commit objects.  When asking to "
"'abort' (which is the default), this program will die when encountering such "
"a commit object.  With 'yes', the commit message will be re-encoded into "
"UTF-8.  With 'no', the original encoding will be preserved."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-fast-export.txt:153
#, no-wrap
msgid "--refspec"
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:156
msgid ""
"Apply the specified refspec to each ref exported. Multiple of them can be "
"specified."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-fast-export.txt:157
#, no-wrap
msgid "[<git-rev-list-args>...]"
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:165
msgid ""
"A list of arguments, acceptable to 'git rev-parse' and 'git rev-list', that "
"specifies the specific objects and references to export.  For example, "
"`master~10..master` causes the current master reference to be exported along "
"with all objects added since its 10th ancestor commit and (unless the "
"--reference-excluded-parents option is specified) all files common to "
"master{tilde}9 and master{tilde}10."
msgstr ""

#. type: Title -
#: ../Documentation/git-fast-export.txt:167
#, no-wrap
msgid "EXAMPLES"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-fast-export.txt:171
#, no-wrap
msgid "$ git fast-export --all | (cd /empty/repository && git fast-import)\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:176
msgid ""
"This will export the whole repository and import it into the existing empty "
"repository.  Except for reencoding commits that are not in UTF-8, it would "
"be a one-to-one mirror."
msgstr ""

#. type: delimited block -
#: ../Documentation/git-fast-export.txt:181
#, no-wrap
msgid ""
"$ git fast-export master~5..master |\n"
"\tsed \"s|refs/heads/master|refs/heads/other|\" |\n"
"\tgit fast-import\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:185
msgid ""
"This makes a new branch called 'other' from 'master~5..master' (i.e. if "
"'master' has linear history, it will take the last 5 commits)."
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:189
msgid ""
"Note that this assumes that none of the blobs and commit messages referenced "
"by that revision range contains the string 'refs/heads/master'."
msgstr ""

#. type: Title -
#: ../Documentation/git-fast-export.txt:192
#, no-wrap
msgid "ANONYMIZING"
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:200
msgid ""
"If the `--anonymize` option is given, git will attempt to remove all "
"identifying information from the repository while still retaining enough of "
"the original tree and history patterns to reproduce some bugs. The goal is "
"that a git bug which is found on a private repository will persist in the "
"anonymized repository, and the latter can be shared with git developers to "
"help solve the bug."
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:212
msgid ""
"With this option, git will replace all refnames, paths, blob contents, "
"commit and tag messages, names, and email addresses in the output with "
"anonymized data.  Two instances of the same string will be replaced "
"equivalently (e.g., two commits with the same author will have the same "
"anonymized author in the output, but bear no resemblance to the original "
"author string). The relationship between commits, branches, and tags is "
"retained, as well as the commit timestamps (but the commit messages and "
"refnames bear no resemblance to the originals). The relative makeup of the "
"tree is retained (e.g., if you have a root tree with 10 files and 3 trees, "
"so will the output), but their names and the contents of the files will be "
"replaced."
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:215
msgid ""
"If you think you have found a git bug, you can start by exporting an "
"anonymized stream of the whole repository:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-fast-export.txt:218
#, no-wrap
msgid "$ git fast-export --anonymize --all >anon-stream\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:223
msgid ""
"Then confirm that the bug persists in a repository created from that stream "
"(many bugs will not, as they really do depend on the exact repository "
"contents):"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-fast-export.txt:229
#, no-wrap
msgid ""
"$ git init anon-repo\n"
"$ cd anon-repo\n"
"$ git fast-import <../anon-stream\n"
"$ ... test your bug ...\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:236
msgid ""
"If the anonymized repository shows the bug, it may be worth sharing "
"`anon-stream` along with a regular bug report. Note that the anonymized "
"stream compresses very well, so gzipping it is encouraged. If you want to "
"examine the stream to see that it does not contain any private data, you can "
"peruse it directly before sending. You may also want to try:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-fast-export.txt:239
#, no-wrap
msgid "$ perl -pe 's/\\d+/X/g' <anon-stream | sort -u | less\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:245
msgid ""
"which shows all of the unique lines (with numbers converted to \"X\", to "
"collapse \"User 0\", \"User 1\", etc into \"User X\"). This produces a much "
"smaller output, and it is usually easy to quickly confirm that there is no "
"private data in the stream."
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:251
msgid ""
"Reproducing some bugs may require referencing particular commits or paths, "
"which becomes challenging after refnames and paths have been anonymized. You "
"can ask for a particular token to be left as-is or mapped to a new "
"value. For example, if you have a bug which reproduces with `git rev-list "
"sensitive -- secret.c`, you can run:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-fast-export.txt:257
#, no-wrap
msgid ""
"$ git fast-export --anonymize --all \\\n"
"      --anonymize-map=sensitive:foo \\\n"
"      --anonymize-map=secret.c:bar.c \\\n"
"      >stream\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:261
msgid ""
"After importing the stream, you can then run `git rev-list foo -- bar.c` in "
"the anonymized repository."
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:266
msgid ""
"Note that paths and refnames are split into tokens at slash boundaries.  The "
"command above would anonymize `subdir/secret.c` as something like "
"`path123/bar.c`; you could then search for `bar.c` in the anonymized "
"repository to determine the final pathname."
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:270
msgid ""
"To make referencing the final pathname simpler, you can map each path "
"component; so if you also anonymize `subdir` to `publicdir`, then the final "
"pathname would be `publicdir/bar.c`."
msgstr ""

#. type: Title -
#: ../Documentation/git-fast-export.txt:272
#, no-wrap
msgid "LIMITATIONS"
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:277
msgid ""
"Since 'git fast-import' cannot tag trees, you will not be able to export the "
"linux.git repository completely, as it contains a tag referencing a tree "
"instead of a commit."
msgstr ""

#. type: Title -
#: ../Documentation/git-fast-export.txt:279
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:281
msgid "linkgit:git-fast-import[1]"
msgstr ""

#. type: Title -
#: ../Documentation/git-fast-export.txt:283
#, no-wrap
msgid "GIT"
msgstr ""

#. type: Plain text
#: ../Documentation/git-fast-export.txt:284
msgid "Part of the linkgit:git[1] suite"
msgstr ""
