# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 2.0\n"
"POT-Creation-Date: 2023-07-18 11:05+0900\n"
"PO-Revision-Date: 2022-10-11 19:39+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:1
#, no-wrap
msgid "[[def_alternate_object_database]]alternate object database"
msgstr "[[def_alternate_object_database]]alternate object database"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:5
msgid ""
"Via the alternates mechanism, a <<def_repository,repository>> can inherit "
"part of its <<def_object_database,object database>> from another object "
"database, which is called an \"alternate\"."
msgstr ""
"代役(alternate)メカニズムを介して、 <<def_repository,リポジトリ>> は "
"<<def_object_database,オブジェクトデータベース>> の一部を \"alternate\" (代"
"役) 呼ばれる別のオブジェクトデータベースから継承できます。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:6
#, no-wrap
msgid "[[def_bare_repository]]bare repository"
msgstr "[[def_bare_repository]]bare repository"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:16
msgid ""
"A bare repository is normally an appropriately named <<def_directory,"
"directory>> with a `.git` suffix that does not have a locally checked-out "
"copy of any of the files under revision control. That is, all of the Git "
"administrative and control files that would normally be present in the "
"hidden `.git` sub-directory are directly present in the `repository.git` "
"directory instead, and no other files are present and checked out. Usually "
"publishers of public repositories make bare repositories available."
msgstr ""
"ベアリポジトリは通常、適切な名前の<<def_directory,ディレクトリ>>で、接尾辞は "
"`.git` で、リビジョン管理下にあるファイルのローカルでチェックアウトされたコ"
"ピーはありません。つまり、通常は非表示の `.git` サブディレクトリに存在するす"
"べてのGit管理ファイルと制御ファイルは、代わりに `repository.git` ディレクトリ"
"に直接存在し、他のファイルは存在せず、チェックアウトされません。通常、公開リ"
"ポジトリの発行者は、ベアリポジトリを利用可能にします。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:17
#, no-wrap
msgid "[[def_blob_object]]blob object"
msgstr "[[def_blob_object]]blob object(ブロブオブジェクト)"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:19
msgid "Untyped <<def_object,object>>, e.g. the contents of a file."
msgstr "型の無い<<def_object,オブジェクト>>。例:ファイルの中身。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:20
#, no-wrap
msgid "[[def_branch]]branch"
msgstr "[[def_branch]]branch"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:30
#, fuzzy
#| msgid ""
#| "A \"branch\" is a line of development.  The most recent <<def_commit,"
#| "commit>> on a branch is referred to as the tip of that branch.  The tip "
#| "of the branch is referenced by a branch <<def_head,head>>, which moves "
#| "forward as additional development is done on the branch.  A single Git "
#| "<<def_repository,repository>> can track an arbitrary number of branches, "
#| "but your <<def_working_tree,working tree>> is associated with just one of "
#| "them (the \"current\" or \"checked out\" branch), and <<def_HEAD,HEAD>> "
#| "points to that branch."
msgid ""
"A \"branch\" is a line of development.  The most recent <<def_commit,"
"commit>> on a branch is referred to as the tip of that branch.  The tip of "
"the branch is <<def_ref,referenced>> by a branch <<def_head,head>>, which "
"moves forward as additional development is done on the branch.  A single Git "
"<<def_repository,repository>> can track an arbitrary number of branches, but "
"your <<def_working_tree,working tree>> is associated with just one of them "
"(the \"current\" or \"checked out\" branch), and <<def_HEAD,HEAD>> points to "
"that branch."
msgstr ""
"「ブランチ」は開発ラインです。ブランチの最新の<<def_commit,コミット>>は、その"
"ブランチの先端(the tip of that branch)と呼ばれます。ブランチの先端はブランチ"
"<<def_head,head>>によって参照され、ブランチで追加の開発が行われると前進しま"
"す。単一のGit <<def_repository,リポジトリ>>は任意の数のブランチを追跡できます"
"が、あなたの<<def_working_tree,作業ツリー>>はそのうちの1つ(「current branch」"
"(現在のブランチ)または「checked out branch」(チェックアウトされたブランチ))に"
"関連付けられ、 <<def_HEAD,HEAD>> はそのブランチを指します。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:31
#, no-wrap
msgid "[[def_cache]]cache"
msgstr "[[def_cache]]cache"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:33
msgid "Obsolete for: <<def_index,index>>."
msgstr "廃止。 <<def_index,index>> を使ってください。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:34
#, no-wrap
msgid "[[def_chain]]chain"
msgstr "[[def_chain]]chain(チェーン,チェイン)"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:38
msgid ""
"A list of objects, where each <<def_object,object>> in the list contains a "
"reference to its successor (for example, the successor of a <<def_commit,"
"commit>> could be one of its <<def_parent,parents>>)."
msgstr ""
"オブジェクトのリスト。リスト内の各 <<def_object,オブジェクト>> には、その後ろ"
"への参照が含まれます(たとえば、 <<def_commit,コミット>> の後ろはその "
"<<def_parent,親>> の1つである可能性があります)。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:39
#, no-wrap
msgid "[[def_changeset]]changeset"
msgstr "[[def_changeset]]changeset"

# BitKeeper
# https://ja.wikipedia.org/wiki/BitKeeper
# BitKeeper は、コンピュータのソースコードのバージョン管理システム（構成管理、SCMなど）の一種である。<
#
# cvsps(1) - Linux man page
# CVSps - create patchset information from CVS
#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:43
msgid ""
"BitKeeper/cvsps speak for \"<<def_commit,commit>>\". Since Git does not "
"store changes, but states, it really does not make sense to use the term "
"\"changesets\" with Git."
msgstr ""
"\"<<def_commit,コミット>>\" の BitKeeper/cvsps での言い方です。 Git は変更"
"(change)ではなく状態(state)を保存するため、Gitでコミットを「changeset」と呼ぶ"
"のはナンセンスです。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:44
#, no-wrap
msgid "[[def_checkout]]checkout"
msgstr "[[def_checkout]]checkout"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:51
msgid ""
"The action of updating all or part of the <<def_working_tree,working tree>> "
"with a <<def_tree_object,tree object>> or <<def_blob_object,blob>> from the "
"<<def_object_database,object database>>, and updating the <<def_index,"
"index>> and <<def_HEAD,HEAD>> if the whole working tree has been pointed at "
"a new <<def_branch,branch>>."
msgstr ""
"<<def_working_tree,作業ツリー>>の全部または一部を<<def_object_database,オブ"
"ジェクトデータベース>>の<<def_tree_object,ツリーオブジェクト>>または"
"<<def_blob_object,ブロブ>>で更新し、作業ツリー全体が新しい<<def_branch,ブラン"
"チ>>を指している場合は、<<def_index,インデックス>>と<<def_HEAD,HEAD>>を更新す"
"る操作。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:52
#, no-wrap
msgid "[[def_cherry-picking]]cherry-picking"
msgstr "[[def_cherry-picking]]cherry-picking(チェリーピック,チェリーピッキング)"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:59
msgid ""
"In <<def_SCM,SCM>> jargon, \"cherry pick\" means to choose a subset of "
"changes out of a series of changes (typically commits) and record them as a "
"new series of changes on top of a different codebase. In Git, this is "
"performed by the \"git cherry-pick\" command to extract the change "
"introduced by an existing <<def_commit,commit>> and to record it based on "
"the tip of the current <<def_branch,branch>> as a new commit."
msgstr ""
"<<def_SCM,SCM>> の専門用語では、 \"cherry pick\" (つまみ食い)とは、一連の変更"
"(通常はコミット)から変更のサブセットを選択し、それらを別のコードベースの上に"
"新しい一連の変更として記録することを意味します。Gitでは、これは \"git cherry-"
"pick\" コマンドによって実行され、既存の<<def_commit,コミット>>によって導入さ"
"れた変更を抽出し、現在の<<def_branch,ブランチ>>の先端に基づいてそれを新しいコ"
"ミットとして記録します。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:60
#, no-wrap
msgid "[[def_clean]]clean"
msgstr "[[def_clean]]clean"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:64
msgid ""
"A <<def_working_tree,working tree>> is clean, if it corresponds to the "
"<<def_revision,revision>> referenced by the current <<def_head,head>>. Also "
"see \"<<def_dirty,dirty>>\"."
msgstr ""
"現在の<<def_head,ヘッド>>が参照する<<def_revision,リビジョン>>と"
"<<def_working_tree,作業ツリー>>が完全に一致(correspond)しているのであれば、そ"
"の<<def_working_tree,作業ツリー>>はクリーンです。「<<def_dirty,dirty>>」も参"
"照下さい。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:65
#, no-wrap
msgid "[[def_commit]]commit"
msgstr "[[def_commit]]commit"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:72
msgid ""
"As a noun: A single point in the Git history; the entire history of a "
"project is represented as a set of interrelated commits.  The word "
"\"commit\" is often used by Git in the same places other revision control "
"systems use the words \"revision\" or \"version\".  Also used as a short "
"hand for <<def_commit_object,commit object>>."
msgstr ""
"名詞として: Gitの履歴における一つのポイント。プロジェクトの履歴全体は、相互に"
"関連する一連のコミットとして表されます。「コミット」という言葉は、他のリビ"
"ジョン管理システムが「リビジョン」または「バージョン」という言葉を使用するの"
"と同じ場所で、Gitによってよく使用されます。 <<def_commit_object,コミットオブ"
"ジェクト>> の省略形としても使用されます。"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:77
msgid ""
"As a verb: The action of storing a new snapshot of the project's state in "
"the Git history, by creating a new commit representing the current state of "
"the <<def_index,index>> and advancing <<def_HEAD,HEAD>> to point at the new "
"commit."
msgstr ""
"動詞として(コミットする): <<def_index,インデックス>>の現在の状態を表す新しい"
"コミットを作成し、その新しいコミットをポイントするように<<def_HEAD,HEAD>>を進"
"めることにより、プロジェクトの状態の新しいスナップショットをGit履歴に保存する"
"操作。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:78
#, no-wrap
msgid "[[def_commit_graph_general]]commit graph concept, representations and usage"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:85
msgid ""
"A synonym for the <<def_DAG,DAG>> structure formed by the commits in the "
"object database, <<def_ref,referenced>> by branch tips, using their "
"<<def_chain,chain>> of linked commits.  This structure is the definitive "
"commit graph. The graph can be represented in other ways, e.g. the "
"<<def_commit_graph_file,\"commit-graph\" file>>."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:86
#, fuzzy, no-wrap
#| msgid "[[def_commit]]commit"
msgid "[[def_commit_graph_file]]commit-graph file"
msgstr "[[def_commit]]commit"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:92
msgid ""
"The \"commit-graph\" (normally hyphenated) file is a supplemental "
"representation of the <<def_commit_graph_general,commit graph>> which "
"accelerates commit graph walks. The \"commit-graph\" file is stored either "
"in the .git/objects/info directory or in the info directory of an alternate "
"object database."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:93
#, no-wrap
msgid "[[def_commit_object]]commit object"
msgstr "[[def_commit_object]]commit object"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:99
msgid ""
"An <<def_object,object>> which contains the information about a particular "
"<<def_revision,revision>>, such as <<def_parent,parents>>, committer, "
"author, date and the <<def_tree_object,tree object>> which corresponds to "
"the top <<def_directory,directory>> of the stored revision."
msgstr ""
"<<def_parent,親>>、コミッター、作者、日付、保存されたリビジョンの最上位"
"<<def_directory,ディレクトリ>>に対応する<<def_tree_object,ツリーオブジェクト"
">>など、特定の<<def_revision,リビジョン>>に関する情報を含む<<def_object,オブ"
"ジェクト>>。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:100
#, no-wrap
msgid "[[def_commit-ish]]commit-ish (also committish)"
msgstr "[[def_commit-ish]]commit-ish (also committish)(コミットっぽい;コミット風)"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:111
msgid ""
"A <<def_commit_object,commit object>> or an <<def_object,object>> that can "
"be recursively dereferenced to a commit object.  The following are all "
"commit-ishes: a commit object, a <<def_tag_object,tag object>> that points "
"to a commit object, a tag object that points to a tag object that points to "
"a commit object, etc."
msgstr ""
"<<def_commit_object,コミットオブジェクト>>または、<<def_commit_object,コミッ"
"トオブジェクト>>に再帰的に逆参照可能な<<def_object,オブジェクト>>。 "
"<<def_commit_object,コミットオブジェクト>>や、<<def_commit_object,コミットオ"
"ブジェクト>>を指す<<def_tag_object,タグオブジェクト>>や、<<def_commit_object,"
"コミットオブジェクト>>を指す<<def_tag_object,タグオブジェクト>>を指す"
"<<def_tag_object,タグオブジェクト>>などは全てcommit-ish(commit-ishes)です。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:112
#, no-wrap
msgid "[[def_core_git]]core Git"
msgstr "[[def_core_git]]core Git"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:115
msgid ""
"Fundamental data structures and utilities of Git. Exposes only limited "
"source code management tools."
msgstr ""
"Gitの基本的なデータ構造とユーティリティ。これは、限定的なソースコード管理ツー"
"ルのみです。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:116
#, no-wrap
msgid "[[def_DAG]]DAG"
msgstr "[[def_DAG]]DAG"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:121
msgid ""
"Directed acyclic graph. The <<def_commit_object,commit objects>> form a "
"directed acyclic graph, because they have parents (directed), and the graph "
"of commit objects is acyclic (there is no <<def_chain,chain>> which begins "
"and ends with the same <<def_object,object>>)."
msgstr ""
"有向非巡回グラフ(Directed acyclic graph)。 <<def_commit_object,コミットオブ"
"ジェクト>> は、(有向の)親を持ち、コミットオブジェクトのグラフが非巡回(同じ "
"<<def_object,オブジェクト>> で開始・終了する <<def_chain,チェイン>> はありま"
"せん)であるため有向非巡回グラフを形成します。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:122
#, no-wrap
msgid "[[def_dangling_object]]dangling object"
msgstr "[[def_dangling_object]]dangling object"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:127
msgid ""
"An <<def_unreachable_object,unreachable object>> which is not "
"<<def_reachable,reachable>> even from other unreachable objects; a dangling "
"object has no references to it from any reference or <<def_object,object>> "
"in the <<def_repository,repository>>."
msgstr ""
"(ぶらぶら揺れるオブジェクト)他の<<def_unreachable_object,到達不能オブジェクト"
">>からでも到達できない<<def_unreachable_object,到達不能オブジェクト>>。 "
"danglingオブジェクトには、<<def_repository,リポジトリ>>内の任意のrefまたは"
"<<def_object,オブジェクト>>からの参照はありません。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:128
#, no-wrap
msgid "[[def_detached_HEAD]]detached HEAD"
msgstr "[[def_detached_HEAD]]detached HEAD"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:137
msgid ""
"Normally the <<def_HEAD,HEAD>> stores the name of a <<def_branch,branch>>, "
"and commands that operate on the history HEAD represents operate on the "
"history leading to the tip of the branch the HEAD points at.  However, Git "
"also allows you to <<def_checkout,check out>> an arbitrary <<def_commit,"
"commit>> that isn't necessarily the tip of any particular branch.  The HEAD "
"in such a state is called \"detached\"."
msgstr ""
"通常、<<def_HEAD,HEAD>>は<<def_branch,ブランチ>>の名前を格納し、HEADが示す履"
"歴を操作するコマンドは、HEADが指すブランチの先端につながる履歴を操作します。 "
"ただし、Gitでは、必ずしも特定のブランチの先端ではない任意の<<def_commit,コ"
"ミット>>を<<def_checkout,チェックアウト>>することもできます。このような状態の"
"HEADを「detached」(切り離されている、デタッチされている)と呼びます。"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:146
msgid ""
"Note that commands that operate on the history of the current branch (e.g. "
"`git commit` to build a new history on top of it) still work while the HEAD "
"is detached. They update the HEAD to point at the tip of the updated history "
"without affecting any branch.  Commands that update or inquire information "
"_about_ the current branch (e.g. `git branch --set-upstream-to` that sets "
"what remote-tracking branch the current branch integrates with) obviously do "
"not work, as there is no (real) current branch to ask about in this state."
msgstr ""
"注意: 現在のブランチの履歴を操作するコマンド(たとえば、その上に新しい履歴を構"
"築するための `git commit`)は、HEADがデタッチされている間も機能することに注意"
"してください。それらは、ブランチに影響を与えることなく、更新された履歴の先端"
"を指すようにHEADを更新します。現在のブランチに関する情報を更新または照会する"
"コマンド(たとえば、現在のブランチが統合するリモートトラッキングブランチを設定"
"する `git branch --set-upstream-to`)は、この状態で問い合わせる(実際の)現在の"
"ブランチがないため、明らかに機能しません。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:147
#, no-wrap
msgid "[[def_directory]]directory"
msgstr "[[def_directory]]directory"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:149
msgid "The list you get with \"ls\" :-)"
msgstr "あなたが \"ls\" で得られる一覧の事 :-)"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:150
#, no-wrap
msgid "[[def_dirty]]dirty"
msgstr "[[def_dirty]]dirty"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:154
msgid ""
"A <<def_working_tree,working tree>> is said to be \"dirty\" if it contains "
"modifications which have not been <<def_commit,committed>> to the current "
"<<def_branch,branch>>."
msgstr ""
"<<def_working_tree,作業ツリー>>で、現在の<<def_branch,ブランチ>>に対して"
"<<def_commit,コミット>>されてない変更が含まれている場合、"
"「<<def_working_tree,作業ツリー>>はダーティーである」と言われます。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:155
#, no-wrap
msgid "[[def_evil_merge]]evil merge"
msgstr "[[def_evil_merge]]evil merge"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:158
msgid ""
"An evil merge is a <<def_merge,merge>> that introduces changes that do not "
"appear in any <<def_parent,parent>>."
msgstr ""
"邪悪なマージとは、どの <<def_parent,親>> にも表示されない変更を導入する "
"<<def_merge,マージ>> です。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:159
#, no-wrap
msgid "[[def_fast_forward]]fast-forward"
msgstr "[[def_fast_forward]]fast-forward"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:168
msgid ""
"A fast-forward is a special type of <<def_merge,merge>> where you have a "
"<<def_revision,revision>> and you are \"merging\" another <<def_branch,"
"branch>>'s changes that happen to be a descendant of what you have. In such "
"a case, you do not make a new <<def_merge,merge>> <<def_commit,commit>> but "
"instead just update your branch to point at the same revision as the branch "
"you are merging. This will happen frequently on a "
"<<def_remote_tracking_branch,remote-tracking branch>> of a remote "
"<<def_repository,repository>>."
msgstr ""
"fast-forward(早送り)は、とある<<def_revision,リビジョン>>に、その子孫である別"
"の<<def_branch,ブランチ>>の変更をマージする特殊なタイプの<<def_merge,マージ>>"
"です。このような場合、新しい<<def_merge,マージ>><<def_commit,コミット>>を行う"
"のではなく、マージするブランチと同じリビジョンを指すようにブランチを更新する"
"だけです。これは、リモート<<def_repository,リポジトリ>>の"
"<<def_remote_tracking_branch,リモート追跡ブランチ>>で頻繁に発生します。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:169
#, no-wrap
msgid "[[def_fetch]]fetch"
msgstr "[[def_fetch]]fetch"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:175
msgid ""
"Fetching a <<def_branch,branch>> means to get the branch's <<def_head_ref,"
"head ref>> from a remote <<def_repository,repository>>, to find out which "
"objects are missing from the local <<def_object_database,object database>>, "
"and to get them, too.  See also linkgit:git-fetch[1]."
msgstr ""
"<<def_branch,ブランチ>>をフェッチするということは、リモート<<def_repository,"
"リポジトリ>>からブランチの<<def_head_ref,head ref>>を取得して、ローカルの"
"<<def_object_database,オブジェクトデータベース>>に欠落しているオブジェクトを"
"見つけ、そして欠落したオブジェクトを取得することを意味します。 linkgit:git-"
"fetch[1] も参照してください。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:176
#, no-wrap
msgid "[[def_file_system]]file system"
msgstr "[[def_file_system]]file system"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:180
msgid ""
"Linus Torvalds originally designed Git to be a user space file system, i.e. "
"the infrastructure to hold files and directories. That ensured the "
"efficiency and speed of Git."
msgstr ""
"リーナス・トーバルズは当初、Gitをユーザー空間ファイルシステム、つまりファイル"
"とディレクトリを保持するインフラストラクチャとして設計しました。これにより、"
"Gitの効率と速度が保証されました。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:181
#, no-wrap
msgid "[[def_git_archive]]Git archive"
msgstr "[[def_git_archive]]Git archive"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:183
msgid "Synonym for <<def_repository,repository>> (for arch people)."
msgstr "<<def_repository,リポジトリ>> の同義語(arch people 向け)。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:184
#, no-wrap
msgid "[[def_gitfile]]gitfile"
msgstr "[[def_gitfile]]gitfile"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:187
msgid ""
"A plain file `.git` at the root of a working tree that points at the "
"directory that is the real repository."
msgstr ""
"実際のリポジトリであるディレクトリを指す、作業ツリーのルートにあるプレーン"
"ファイル `.git` "

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:188
#, no-wrap
msgid "[[def_grafts]]grafts"
msgstr "[[def_grafts]]grafts"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:194
msgid ""
"Grafts enables two otherwise different lines of development to be joined "
"together by recording fake ancestry information for commits. This way you "
"can make Git pretend the set of <<def_parent,parents>> a <<def_commit,"
"commit>> has is different from what was recorded when the commit was "
"created. Configured via the `.git/info/grafts` file."
msgstr ""
"graftsは、コミットの偽の祖先情報を記録することで、他の点では異なる2つの開発ラ"
"インを結合できます。こうすることで、ある<<def_commit,コミット>>が持つ"
"<<def_parent,親>>の組を、コミット作成時に記録されたものとは異なるものとして "
"Git に見せかけることができるのです。これは `.git/info/grafts` ファイルを介し"
"て構成されます。"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:198
msgid ""
"Note that the grafts mechanism is outdated and can lead to problems "
"transferring objects between repositories; see linkgit:git-replace[1] for a "
"more flexible and robust system to do the same thing."
msgstr ""
"注意: graftsメカニズムは時代遅れであり、リポジトリ間でオブジェクトを転送する"
"際に問題が発生する可能性があることに注意してください。 同じことを行うためのよ"
"り柔軟で堅牢なシステムについては、 linkgit:git-replace[1] を参照してくださ"
"い。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:199
#, no-wrap
msgid "[[def_hash]]hash"
msgstr "[[def_hash]]hash"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:201
msgid "In Git's context, synonym for <<def_object_name,object name>>."
msgstr "Gitの文脈では <<def_object_name,オブジェクト名>> と同義語。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:202
#, no-wrap
msgid "[[def_head]]head"
msgstr "[[def_head]]head"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:207
msgid ""
"A <<def_ref,named reference>> to the <<def_commit,commit>> at the tip of a "
"<<def_branch,branch>>.  Heads are stored in a file in `$GIT_DIR/refs/heads/` "
"directory, except when using packed refs. (See linkgit:git-pack-refs[1].)"
msgstr ""
"<<def_branch,ブランチ>> の先端にある <<def_commit,コミット>> への、 "
"<<def_ref,名付けられた参照>> です。パックされた参照を使用する場合を除いて、"
"headは `$GIT_DIR/refs/heads/` ディレクトリのファイルに保存されます。 "
"(linkgit: git-pack-refs[1] を参照してください。)"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:208
#, no-wrap
msgid "[[def_HEAD]]HEAD"
msgstr "[[def_HEAD]]HEAD"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:215
msgid ""
"The current <<def_branch,branch>>.  In more detail: Your <<def_working_tree, "
"working tree>> is normally derived from the state of the tree referred to by "
"HEAD.  HEAD is a reference to one of the <<def_head,heads>> in your "
"repository, except when using a <<def_detached_HEAD,detached HEAD>>, in "
"which case it directly references an arbitrary commit."
msgstr ""
"現在の<<def_branch,ブランチ>>。 より詳細に言うと、あなたの<<def_working_tree,"
"作業ツリー>>は通常、HEADによって参照されるツリーの状態から派生します。HEAD"
"は、リポジトリ内の<<def_head,head>>達のうちの一つへの参照です。ただし、"
"<<def_detached_HEAD,detached HEAD>>をの場合は、任意のコミットを直接参照してい"
"ます。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:216
#, no-wrap
msgid "[[def_head_ref]]head ref"
msgstr "[[def_head_ref]]head ref"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:218
msgid "A synonym for <<def_head,head>>."
msgstr "<<def_head,head>> の同義語。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:219
#, no-wrap
msgid "[[def_hook]]hook"
msgstr "[[def_hook]]hook"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:228
msgid ""
"During the normal execution of several Git commands, call-outs are made to "
"optional scripts that allow a developer to add functionality or checking. "
"Typically, the hooks allow for a command to be pre-verified and potentially "
"aborted, and allow for a post-notification after the operation is done. The "
"hook scripts are found in the `$GIT_DIR/hooks/` directory, and are enabled "
"by simply removing the `.sample` suffix from the filename. In earlier "
"versions of Git you had to make them executable."
msgstr ""
"いくつかのGitコマンドの通常の実行中に、開発者が機能を追加したりチェックしたり"
"できるようにするオプションのスクリプトを呼び出します。通常、フックを使用する"
"と、コマンドを事前に確認して中止することができ、そしてまた、操作の完了後に事"
"後通知を行うことができます。フックスクリプトは `$GIT_DIR/hooks/` ディレクトリ"
"にあり、ファイル名から `.sample` サフィックスを削除するだけで有効になります。"
"以前のバージョンのGitでは、それらを実行可能にする必要がありました。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:229
#, no-wrap
msgid "[[def_index]]index"
msgstr "[[def_index]]index"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:235
msgid ""
"A collection of files with stat information, whose contents are stored as "
"objects. The index is a stored version of your <<def_working_tree,working "
"tree>>. Truth be told, it can also contain a second, and even a third "
"version of a working tree, which are used when <<def_merge,merging>>."
msgstr ""
"状態情報を含むファイルのコレクションで、その内容はオブジェクトとして保存され"
"ます。インデックスは、あなたの<<def_working_tree,作業ツリー>>の保存バージョン"
"です。正直なところ、これには、<<def_merge,マージ>>のときに使用される、作業ツ"
"リーの2番目および3番目のバージョンを含めることもできます。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:236
#, no-wrap
msgid "[[def_index_entry]]index entry"
msgstr "[[def_index_entry]]index entry"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:241
msgid ""
"The information regarding a particular file, stored in the <<def_index,"
"index>>. An index entry can be unmerged, if a <<def_merge,merge>> was "
"started, but not yet finished (i.e. if the index contains multiple versions "
"of that file)."
msgstr ""
"<<def_index,インデックス>>に保存されている特定のファイルに関する情報。"
"<<def_merge,マージ>>が開始されたが、まだ終了していない場合(つまり、インデック"
"スにそのファイルの複数のバージョンが含まれている場合)、インデックスエントリを"
"マージ解除(unmerge)できます。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:242
#, no-wrap
msgid "[[def_master]]master"
msgstr "[[def_master]]master"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:248
msgid ""
"The default development <<def_branch,branch>>. Whenever you create a Git "
"<<def_repository,repository>>, a branch named \"master\" is created, and "
"becomes the active branch. In most cases, this contains the local "
"development, though that is purely by convention and is not required."
msgstr ""
"デフォルトの開発 <<def_branch,ブランチ>> 。 Git <<def_repository,リポジトリ"
">> を作成するたびに、「master」という名前のブランチが作成され、アクティブなブ"
"ランチになります。 ほとんどのローカル開発に含まれていますが、これは純粋に慣例"
"によるものであり、必須ではありません。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:249
#, no-wrap
msgid "[[def_merge]]merge"
msgstr "[[def_merge]]merge"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:262
msgid ""
"As a verb: To bring the contents of another <<def_branch,branch>> (possibly "
"from an external <<def_repository,repository>>) into the current branch.  In "
"the case where the merged-in branch is from a different repository, this is "
"done by first <<def_fetch,fetching>> the remote branch and then merging the "
"result into the current branch.  This combination of fetch and merge "
"operations is called a <<def_pull,pull>>.  Merging is performed by an "
"automatic process that identifies changes made since the branches diverged, "
"and then applies all those changes together.  In cases where changes "
"conflict, manual intervention may be required to complete the merge."
msgstr ""
"動詞として: 別の<<def_branch,ブランチ>>(あるいは外部の<<def_repository,リポジ"
"トリ>>から)の内容を現在のブランチに取り込むこと。マージされたブランチが別のリ"
"ポジトリからのものである場合、これは最初にリモートブランチを<<def_fetch,"
"フェッチ>>し、次に結果を現在のブランチにマージすることによって行われます。こ"
"のフェッチ操作とマージ操作の組み合わせは、<<def_pull,プル(pull)>>と呼ばれま"
"す。マージは、ブランチが分岐してから行われた変更を識別し、それらすべての変更"
"を一緒に適用する自動プロセスによって実行されます。変更が競合する場合は、マー"
"ジを完了するために手動による介入が必要になる場合があります。"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:269
msgid ""
"As a noun: unless it is a <<def_fast_forward,fast-forward>>, a successful "
"merge results in the creation of a new <<def_commit,commit>> representing "
"the result of the merge, and having as <<def_parent,parents>> the tips of "
"the merged <<def_branch,branches>>.  This commit is referred to as a \"merge "
"commit\", or sometimes just a \"merge\"."
msgstr ""
"名詞として: <<def_fast_forward,fast-forward>>でない限り、マージ成功の結果とし"
"て、マージされた<<def_branch,ブランチ>>の先端を<<def_parent,親>>に持つ新しい"
"<<def_commit,コミット>>が作成されます。このコミットは「マージコミット」と呼ば"
"れます。または単に「マージ」と呼ばれることもあります。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:270
#, no-wrap
msgid "[[def_object]]object"
msgstr "[[def_object]]object(オブジェクト)"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:274
msgid ""
"The unit of storage in Git. It is uniquely identified by the <<def_SHA1,"
"SHA-1>> of its contents. Consequently, an object cannot be changed."
msgstr ""
"Gitの保管ユニット(unit of storage)。その内容による <<def_SHA1,SHA-1>> によっ"
"て一意に識別されます。したがって、オブジェクトを変更することはできません。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:275
#, no-wrap
msgid "[[def_object_database]]object database"
msgstr "[[def_object_database]]object database"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:279
msgid ""
"Stores a set of \"objects\", and an individual <<def_object,object>> is "
"identified by its <<def_object_name,object name>>. The objects usually live "
"in `$GIT_DIR/objects/`."
msgstr ""
"「オブジェクト」の組を格納し、個々の<<def_object,オブジェクト>>はその"
"<<def_object_name,オブジェクト名>>によって識別されます。オブジェクトは通常、 "
"`$GIT_DIR/objects/` にあります。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:280
#, fuzzy, no-wrap
#| msgid "[[def_object_identifier]]object identifier"
msgid "[[def_object_identifier]]object identifier (oid)"
msgstr "[[def_object_identifier]]object identifier(オブジェクトID)"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:282
msgid "Synonym for <<def_object_name,object name>>."
msgstr "<<def_object_name,object name>> (オブジェクト名)の同義語"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:283
#, no-wrap
msgid "[[def_object_name]]object name"
msgstr "[[def_object_name]]object name(オブジェクト名)"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:287
msgid ""
"The unique identifier of an <<def_object,object>>.  The object name is "
"usually represented by a 40 character hexadecimal string.  Also colloquially "
"called <<def_SHA1,SHA-1>>."
msgstr ""
"<<def_object,オブジェクト> の一意の識別子。オブジェクト名は通常、40文字の16進"
"文字列で表されます。一般に <<def_SHA1,SHA-1>> とも呼ばれます。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:288
#, no-wrap
msgid "[[def_object_type]]object type"
msgstr "[[def_object_type]]object type(オブジェクトタイプ)"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:293
msgid ""
"One of the identifiers \"<<def_commit_object,commit>>\", \"<<def_tree_object,"
"tree>>\", \"<<def_tag_object,tag>>\" or \"<<def_blob_object,blob>>\" "
"describing the type of an <<def_object,object>>."
msgstr ""
"「<<def_commit_object,コミット>> 識別子」または「<<def_tree_object,ツリー>> "
"識別子」または「<<def_tag_object,タグ>> 識別子」または「<<def_blob_object,ブ"
"ロブ>> 識別子」のいずれかで、 <<def_object,オブジェクト>> のタイプを表しま"
"す。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:294
#, no-wrap
msgid "[[def_octopus]]octopus"
msgstr "[[def_octopus]]octopus"

# more than X → > X 
# 訳注:3本足以上はタコ扱いのようである<
#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:296
msgid "To <<def_merge,merge>> more than two <<def_branch,branches>>."
msgstr "3つ以上(more than two)のブランチをマージします"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:297
#, no-wrap
msgid "[[def_origin]]origin"
msgstr "[[def_origin]]origin"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:304
msgid ""
"The default upstream <<def_repository,repository>>. Most projects have at "
"least one upstream project which they track. By default 'origin' is used for "
"that purpose. New upstream updates will be fetched into "
"<<def_remote_tracking_branch,remote-tracking branches>> named origin/name-of-"
"upstream-branch, which you can see using `git branch -r`."
msgstr ""
"デフォルトの上流(upstream)<<def_repository,リポジトリ>>。ほとんどのプロジェク"
"トには、追跡する上流プロジェクトが少なくとも1つあります。デフォルトでは、"
"「origin」がその目的で使用されます。新しい上流更新分は、 origin/name-of-"
"upstream-branch という名前の <<def_remote_tracking_branch,リモート追跡ブラン"
"チ>>にフェッチされます。これは、 `git branch-r` を使用して確認できます。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:305
#, no-wrap
msgid "[[def_overlay]]overlay"
msgstr "[[def_overlay]]overlay"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:313
msgid ""
"Only update and add files to the working directory, but don't delete them, "
"similar to how 'cp -R' would update the contents in the destination "
"directory.  This is the default mode in a <<def_checkout,checkout>> when "
"checking out files from the <<def_index,index>> or a <<def_tree-ish,tree-"
"ish>>.  In contrast, no-overlay mode also deletes tracked files not present "
"in the source, similar to 'rsync --delete'."
msgstr ""
"`cp -R` が宛先ディレクトリの内容を更新するのと同様に、ファイルを更新して作業"
"ディレクトリに追加するのみで削除を行いません。これは、<<def_index,インデック"
"ス>>または<<def_tree-ish,ツリー風の何か(tree-ish)>>からファイルをチェックアウ"
"トするときの<<def_checkout,checkout>>のデフォルトモードです。対照的に、オー"
"バーレイなしモード(no-overlay mode)では、 `rsync --delete` と同様に、ソース側"
"に存在しない追跡ファイルは削除されます。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:314
#, no-wrap
msgid "[[def_pack]]pack"
msgstr "[[def_pack]]pack"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:317
msgid ""
"A set of objects which have been compressed into one file (to save space or "
"to transmit them efficiently)."
msgstr ""
"1つのファイルに圧縮されたオブジェクトの組(スペースを節約するため、またはそれ"
"らを効率的に送信するため)。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:318
#, no-wrap
msgid "[[def_pack_index]]pack index"
msgstr "[[def_pack_index]]pack index"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:322
msgid ""
"The list of identifiers, and other information, of the objects in a "
"<<def_pack,pack>>, to assist in efficiently accessing the contents of a pack."
msgstr ""
"パックの内容に効率的にアクセスするのに役立つ、<<def_pack,パック>>内のオブジェ"
"クトの識別子とその他の情報のリスト。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:323
#, no-wrap
msgid "[[def_pathspec]]pathspec"
msgstr "[[def_pathspec]]pathspec"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:325
msgid "Pattern used to limit paths in Git commands."
msgstr "(パススペック):Gitコマンドでパスを制限するために使用されるパターン。"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:333
msgid ""
"Pathspecs are used on the command line of \"git ls-files\", \"git ls-tree\", "
"\"git add\", \"git grep\", \"git diff\", \"git checkout\", and many other "
"commands to limit the scope of operations to some subset of the tree or "
"working tree.  See the documentation of each command for whether paths are "
"relative to the current directory or toplevel.  The pathspec syntax is as "
"follows:"
msgstr ""
"pathspec は、「git ls-files」や「git ls-tree」や「git add」や「git grep」や"
"「git diff」や「git checkout」や、ツリーまたは作業ツリー(working tree)のサブ"
"セットへの操作の為にスコープを制限する他の多くのコマンドの、コマンドラインで"
"使用されます。 パスが現在のディレクトリまたはトップレベルのどちらを基準にして"
"いるかについては、 各コマンドのドキュメントを参照してください。 pathspec の構"
"文は以下のとおりです:"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:337
msgid "any path matches itself"
msgstr "どのパスもそれ自体と一致します"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:340
msgid ""
"the pathspec up to the last slash represents a directory prefix.  The scope "
"of that pathspec is limited to that subtree."
msgstr ""
"最後がスラッシュであるpathspecは、ディレクトリプレフィックスを表します。その"
"pathspecのスコープは、そのサブツリーに制限されています。"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:344
msgid ""
"the rest of the pathspec is a pattern for the remainder of the pathname.  "
"Paths relative to the directory prefix will be matched against that pattern "
"using fnmatch(3); in particular, '*' and '?' _can_ match directory "
"separators."
msgstr ""
"pathspecの残りの部分は、pathnameの残りの部分のパターンです。 ディレクトリプレ"
"フィックスに関連するパスは、 fnmatch(3) を使用してそのパターンと照合されま"
"す。特に、 `*` と `?` はディレクトリ区切り文字と一致させる事ができます。"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:350
msgid ""
"For example, Documentation/*.jpg will match all .jpg files in the "
"Documentation subtree, including Documentation/chapter_1/figure_1.jpg."
msgstr ""
"たとえば、 `Documentation/*.jpg` は、 `Documentation/chapter_1/figure_1.jpg` "
"を含む、Documentationサブツリー内のすべての `.jpg` ファイルと一致します。"

# https://qiita.com/darai0512/items/c2cf3719ec0903ab8002
# :始まりでmagic word（または一文字のmagic signature）
#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:360
msgid ""
"A pathspec that begins with a colon `:` has special meaning.  In the short "
"form, the leading colon `:` is followed by zero or more \"magic signature\" "
"letters (which optionally is terminated by another colon `:`), and the "
"remainder is the pattern to match against the path.  The \"magic signature\" "
"consists of ASCII symbols that are neither alphanumeric, glob, regex special "
"characters nor colon.  The optional colon that terminates the \"magic "
"signature\" can be omitted if the pattern begins with a character that does "
"not belong to \"magic signature\" symbol set and is not a colon."
msgstr ""
"コロン(`:`)で始まるpathspecには特別な意味があります。短い形式では、先頭のコロ"
"ン(`:`)の後に0個以上の「魔法記号」(magic signature)(オプションで別のコロン(`:"
"`)で終了)が続き、残りはパスと照合するパターンです。「魔法記号」は、英数字、グ"
"ロブ、正規表現の特殊文字でもコロンでもないASCII記号で構成されます。パターンが"
"「魔法記号」シンボルセットに属さず、コロンではない文字で始まる場合、「魔法記"
"号」を終了するオプションのコロンは省略できます。"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:365
msgid ""
"In the long form, the leading colon `:` is followed by an open parenthesis "
"`(`, a comma-separated list of zero or more \"magic words\", and a close "
"parentheses `)`, and the remainder is the pattern to match against the path."
msgstr ""
"長い形式では、先頭のコロン(`:`)の後に開き括弧(`(`) 、0個以上の「魔法単語」"
"(magic words)のコンマ区切りリスト、および閉じ括弧(`)`) が続き、残りは次のパ"
"ターンです。パスと一致します。"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:368
msgid ""
"A pathspec with only a colon means \"there is no pathspec\". This form "
"should not be combined with other pathspec."
msgstr ""
"コロンのみのpathspecは、「pathspecが無い」ことを意味します。 この形式は、他の"
"pathspecと組み合わせないでください。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:370
#, no-wrap
msgid "top"
msgstr "top"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:374
msgid ""
"The magic word `top` (magic signature: `/`) makes the pattern match from the "
"root of the working tree, even when you are running the command from inside "
"a subdirectory."
msgstr ""
"魔法単語 `top` (魔法記号: `/`)は、サブディレクトリ内からコマンドを実行してい"
"る場合でも、作業ツリーのルートからパターンを一致させます。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:375
#, no-wrap
msgid "literal"
msgstr "literal"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:378
msgid ""
"Wildcards in the pattern such as `*` or `?` are treated as literal "
"characters."
msgstr ""
"`*` または `?` などのパターンのワイルドカードはリテラル文字として扱われます。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:379
#, no-wrap
msgid "icase"
msgstr "icase"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:381
msgid "Case insensitive match."
msgstr "(英文字の)大文字小文字区別せずにマッチ"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:382
#, no-wrap
msgid "glob"
msgstr "glob"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:389
msgid ""
"Git treats the pattern as a shell glob suitable for consumption by "
"fnmatch(3) with the FNM_PATHNAME flag: wildcards in the pattern will not "
"match a / in the pathname.  For example, \"Documentation/{asterisk}.html\" "
"matches \"Documentation/git.html\" but not \"Documentation/ppc/ppc.html\" or "
"\"tools/perf/Documentation/perf.html\"."
msgstr ""
"Gitはパターンを、 FNM_PATHNAMEフラグを指定した fnmatch(3) に消費されるのに適"
"したシェルグロブとして扱います。パターン内のワイルドカードは、パス名内の / と"
"一致しません。 たとえば、「Documentation/{asterisk}.html」は「Documentation/"
"git.html」と一致しますが、「Documentation/ppc/ppc.html」または「tools/perf/"
"Documentation/perf.html」とは一致しません。"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:392
msgid ""
"Two consecutive asterisks (\"`**`\") in patterns matched against full "
"pathname may have special meaning:"
msgstr ""
"フルパス名と一致するパターンの2つの連続するアスタリスク `**` は、特別な意味を"
"持つ場合があります:"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:398
msgid ""
"A leading \"`**`\" followed by a slash means match in all directories. For "
"example, \"`**/foo`\" matches file or directory \"`foo`\" anywhere, the same "
"as pattern \"`foo`\". \"`**/foo/bar`\" matches file or directory \"`bar`\" "
"anywhere that is directly under directory \"`foo`\"."
msgstr ""
"先頭の `**` の後にスラッシュが続く場合は、すべてのディレクトリで一致すること"
"を意味します。たとえば、 `**/foo` は、パターン `foo` と同じように、ファイルま"
"たはディレクトリ `foo` のどこにでも一致します。 `**/foo/bar` は、ディレクト"
"リ `foo` の直下にあるファイルまたはディレクトリ `bar` と一致します。"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:402
msgid ""
"A trailing \"`/**`\" matches everything inside. For example, \"`abc/**`\" "
"matches all files inside directory \"abc\", relative to the location of the "
"`.gitignore` file, with infinite depth."
msgstr ""
"末尾の `/**` は、内部のすべてに一致します(matches everything inside)。たとえ"
"ば、 `abc/**` は、 `.gitignore` ファイルの場所を基準にして、ディレクトリ "
"\"abc\" 内のすべてのファイルと無限の深さで一致します。"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:406
msgid ""
"A slash followed by two consecutive asterisks then a slash matches zero or "
"more directories. For example, \"`a/**/b`\" matches \"`a/b`\", \"`a/x/b`\", "
"\"`a/x/y/b`\" and so on."
msgstr ""
"スラッシュの後に2つの連続するアスタリスクが続く場合、スラッシュは0個以上の"
"ディレクトリに一致します。 たとえば、 `a/**/b` は `a/b` 、 `a/x/b` 、`a/x/y/"
"b` などと一致します。"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:408
msgid "Other consecutive asterisks are considered invalid."
msgstr "他の連続するアスタリスクは無効と見なされます。"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:410
msgid "Glob magic is incompatible with literal magic."
msgstr "グロブ魔法はリテラル魔法と互換性がありません。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:411
#, no-wrap
msgid "attr"
msgstr "attr"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:417
msgid ""
"After `attr:` comes a space separated list of \"attribute requirements\", "
"all of which must be met in order for the path to be considered a match; "
"this is in addition to the usual non-magic pathspec pattern matching.  See "
"linkgit:gitattributes[5]."
msgstr ""
"`attr:` の後には、スペースで区切られた「属性要件」(attribute requirements)の"
"リストがあります。パスが一致すると見なされるには、これらすべてを満たす必要が"
"あります。これは、通常の非魔法pathspecパターンマッチングに追加されます。 "
"linkgit:gitattributes[5] 参照。"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:420
msgid ""
"Each of the attribute requirements for the path takes one of these forms:"
msgstr "パスの各属性要件は、以下のいずれかの形式を取ります:"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:422
msgid "\"`ATTR`\" requires that the attribute `ATTR` be set."
msgstr "`ATTR` では、属性 `ATTR` を設定する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:424
msgid "\"`-ATTR`\" requires that the attribute `ATTR` be unset."
msgstr "`-ATTR` では、属性 `ATTR` が設定されていない必要があります。"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:427
msgid ""
"\"`ATTR=VALUE`\" requires that the attribute `ATTR` be set to the string "
"`VALUE`."
msgstr ""
"`ATTR = VALUE` では、属性 `ATTR` を文字列 `VALUE` に設定する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:430
msgid "\"`!ATTR`\" requires that the attribute `ATTR` be unspecified."
msgstr "`!ATTR` では、属性 `ATTR` が指定されていない必要があります。"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:433
msgid ""
"Note that when matching against a tree object, attributes are still obtained "
"from working tree, not from the given tree object."
msgstr ""
"注意: ツリーオブジェクトと照合する場合、属性は、指定されたツリーオブジェクト"
"からではなく、作業ツリーから取得されることに注意してください。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:434
#, no-wrap
msgid "exclude"
msgstr "exclude"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:440
msgid ""
"After a path matches any non-exclude pathspec, it will be run through all "
"exclude pathspecs (magic signature: `!` or its synonym `^`). If it matches, "
"the path is ignored.  When there is no non-exclude pathspec, the exclusion "
"is applied to the result set as if invoked without any pathspec."
msgstr ""
"パスが非除外pathspecと一致すると、すべての除外pathspec(魔法記号: `!` またはそ"
"の同義語 `^`)が実行されます。一致する場合、パスは無視されます。非除外pathspec"
"がない場合、pathspecなしで呼び出されたかのように、除外が結果セットに適用され"
"ます。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:442
#, no-wrap
msgid "[[def_parent]]parent"
msgstr "[[def_parent]]parent(親)"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:446
msgid ""
"A <<def_commit_object,commit object>> contains a (possibly empty) list of "
"the logical predecessor(s) in the line of development, i.e. its parents."
msgstr ""
"<<def_commit_object,コミットオブジェクト>>には、開発ラインで論理的に前にあっ"
"たもののリスト、つまり親が含まれています(あるいは、前・親が無い場合は空で"
"す)。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:447
#, no-wrap
msgid "[[def_pickaxe]]pickaxe"
msgstr "[[def_pickaxe]]pickaxe"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:453
msgid ""
"The term <<def_pickaxe,pickaxe>> refers to an option to the diffcore "
"routines that help select changes that add or delete a given text string. "
"With the `--pickaxe-all` option, it can be used to view the full "
"<<def_changeset,changeset>> that introduced or removed, say, a particular "
"line of text. See linkgit:git-diff[1]."
msgstr ""
"<<def_pickaxe,pickaxe>>(ピカクス;十字鋤;鶴嘴;つるはし)という用語は、特定のテ"
"キスト文字列を追加または削除する変更を選択するのに役立つdiffcoreルーチンのオ"
"プションを指します。 `--pickaxe-all` オプションを使用すると、特定のテキスト行"
"などを導入または削除した完全な<<def_changeset,チェンジセット>>を表示するため"
"に使用できます。 linkgit:git-diff[1] を参照してください。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:454
#, no-wrap
msgid "[[def_plumbing]]plumbing"
msgstr "[[def_plumbing]]plumbing(配管)"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:456
msgid "Cute name for <<def_core_git,core Git>>."
msgstr "<<def_core_git,core Git>> のキュートな呼び方。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:457
#, no-wrap
msgid "[[def_porcelain]]porcelain"
msgstr "[[def_porcelain]]porcelain(磁器)"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:462
msgid ""
"Cute name for programs and program suites depending on <<def_core_git,core "
"Git>>, presenting a high level access to core Git. Porcelains expose more of "
"a <<def_SCM,SCM>> interface than the <<def_plumbing,plumbing>>."
msgstr ""
"<<def_core_git,core Git>>に依存するプログラムとプログラムスイートのキュートな"
"名前で、コアGitへの高レベルのアクセスを示します。磁器(porcelain)は、"
"<<def_plumbing,配管(plumbing)>>よりも多くの<<def_SCM,SCM>>インターフェースを"
"公開します。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:463
#, no-wrap
msgid "[[def_per_worktree_ref]]per-worktree ref"
msgstr "[[def_per_worktree_ref]]per-worktree ref"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:468
msgid ""
"Refs that are per-<<def_worktree,worktree>>, rather than global.  This is "
"presently only <<def_HEAD,HEAD>> and any refs that start with `refs/bisect/"
"`, but might later include other unusual refs."
msgstr ""
"グローバルではなく、 <<def_worktree,worktree>>ごとのref。これは現在、"
"<<def_HEAD,HEAD>>と `refs/bisect/` で始まるすべてのrefのみですが、今後、他の"
"普通でないrefが含まれる可能性があります。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:469
#, no-wrap
msgid "[[def_pseudoref]]pseudoref"
msgstr "[[def_pseudoref]]pseudoref"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:484
msgid ""
"Pseudorefs are a class of files under `$GIT_DIR` which behave like refs for "
"the purposes of rev-parse, but which are treated specially by git.  "
"Pseudorefs both have names that are all-caps, and always start with a line "
"consisting of a <<def_SHA1,SHA-1>> followed by whitespace.  So, HEAD is not "
"a pseudoref, because it is sometimes a symbolic ref.  They might optionally "
"contain some additional data.  `MERGE_HEAD` and `CHERRY_PICK_HEAD` are "
"examples.  Unlike <<def_per_worktree_ref,per-worktree refs>>, these files "
"cannot be symbolic refs, and never have reflogs.  They also cannot be "
"updated through the normal ref update machinery.  Instead, they are updated "
"by directly writing to the files.  However, they can be read as if they were "
"refs, so `git rev-parse MERGE_HEAD` will work."
msgstr ""
"疑似参照(pseudoref)は `$GIT_DIR` の下にあるファイルのクラスであり、rev-parse"
"したときrefのように動作しますが、それはgitによって特別扱されます。疑似参照は"
"すべて大文字の名前を持ち、かつ、常に<<def_SHA1,SHA-1>>とそれに続く空白"
"(whitespace)で構成される行で始まります。したがって、HEADは疑似参照ではありま"
"せん。なぜならHEADはシンボリック参照である場合があるためです。オプションで、"
"いくつかの追加データが含まれる場合があります。例としては `MERGE_HEAD` と "
"`CHERRY_PICK_HEAD` があります。 <<def_per_worktree_ref,per-worktree refs>> と"
"は異なり、これらのファイルはシンボリックrefにすることはできず、reflogを含める"
"ことはできません。 また、通常のref更新機構を使用して更新することもできませ"
"ん。代わりに、ファイルに直接書き込むことによって更新されます。ただし、それら"
"はrefであるかのように読み取ることができるため、 `git rev-parse MERGE_HEAD` は"
"機能します。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:485
#, no-wrap
msgid "[[def_pull]]pull"
msgstr "[[def_pull]]pull"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:488
msgid ""
"Pulling a <<def_branch,branch>> means to <<def_fetch,fetch>> it and "
"<<def_merge,merge>> it.  See also linkgit:git-pull[1]."
msgstr ""
"<<def_branch,ブランチ>>をプルするとは、それを<<def_fetch,フェッチ>>し"
"<<def_merge,マージ>>することを意味します。 linkgit:git-pull[1] も参照してくだ"
"さい。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:489
#, no-wrap
msgid "[[def_push]]push"
msgstr "[[def_push]]push"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:500
msgid ""
"Pushing a <<def_branch,branch>> means to get the branch's <<def_head_ref,"
"head ref>> from a remote <<def_repository,repository>>, find out if it is an "
"ancestor to the branch's local head ref, and in that case, putting all "
"objects, which are <<def_reachable,reachable>> from the local head ref, and "
"which are missing from the remote repository, into the remote "
"<<def_object_database,object database>>, and updating the remote head ref. "
"If the remote <<def_head,head>> is not an ancestor to the local head, the "
"push fails."
msgstr ""
"<<def_branch,ブランチ>>をプッシュするとは、リモート<<def_repository,リポジト"
"リ>>からブランチの<<def_head_ref,ヘッド参照>>を取得し、それがブランチのローカ"
"ルヘッド参照の祖先であるかどうかを確認し、そしてその場合ローカルヘッド参照か"
"ら<<def_reachable,到達可能>>であり、かつ、リモートリポジトリに欠落しているす"
"べてのオブジェクトを、リモート<<def_object_database,オブジェクトデータベース"
">>に持っていき、リモートヘッド参照を更新します。リモート<<def_head,ヘッド>>が"
"ローカルヘッドの祖先でない場合、プッシュは失敗します。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:501
#, no-wrap
msgid "[[def_reachable]]reachable"
msgstr "[[def_reachable]]reachable(到達可能)"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:510
msgid ""
"All of the ancestors of a given <<def_commit,commit>> are said to be "
"\"reachable\" from that commit. More generally, one <<def_object,object>> is "
"reachable from another if we can reach the one from the other by a "
"<<def_chain,chain>> that follows <<def_tag,tags>> to whatever they tag, "
"<<def_commit_object,commits>> to their parents or trees, and "
"<<def_tree_object,trees>> to the trees or <<def_blob_object,blobs>> that "
"they contain."
msgstr ""
"特定の<<def_commit,コミット>>のすべての祖先は、その特定のコミットから到達可能"
"(reachable)であると言われます。より一般的には、<<def_tag,タグ>>付けしたもの"
"だったり、親またはツリーへの<<def_commit_object,コミットオブジェクト>>だった"
"り、<<def_tree_object,ツリー>>に含まれるツリーやブロブだったり、をたどる"
"<<def_chain,チェーン>>によって、ある<<def_object,オブジェクト>>から別の"
"<<def_object,オブジェクト>>に到達できる場合に到達が可能です。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:511
#, fuzzy, no-wrap
#| msgid "[[def_unreachable_object]]unreachable object"
msgid "[[def_reachability_bitmap]]reachability bitmaps"
msgstr "[[def_unreachable_object]]unreachable object"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:518
msgid ""
"Reachability bitmaps store information about the <<def_reachable,"
"reachability>> of a selected set of commits in a packfile, or a multi-pack "
"index (MIDX), to speed up object search.  The bitmaps are stored in a \"."
"bitmap\" file. A repository may have at most one bitmap file in use. The "
"bitmap file may belong to either one pack, or the repository's multi-pack "
"index (if it exists)."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:519
#, no-wrap
msgid "[[def_rebase]]rebase"
msgstr "[[def_rebase]]rebase"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:523
msgid ""
"To reapply a series of changes from a <<def_branch,branch>> to a different "
"base, and reset the <<def_head,head>> of that branch to the result."
msgstr ""
"一連の変更を<<def_branch,ブランチ>>から別のベースに再適用し、そのブランチの"
"<<def_head,ヘッド>>を再適用した結果にリセットします。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:524
#, no-wrap
msgid "[[def_ref]]ref"
msgstr "[[def_ref]]ref"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:532
msgid ""
"A name that begins with `refs/` (e.g. `refs/heads/master`)  that points to "
"an <<def_object_name,object name>> or another ref (the latter is called a "
"<<def_symref,symbolic ref>>).  For convenience, a ref can sometimes be "
"abbreviated when used as an argument to a Git command; see linkgit:"
"gitrevisions[7] for details.  Refs are stored in the <<def_repository,"
"repository>>."
msgstr ""
"オブジェクト名または別のrefを指す `refs/` で始まる名前(例: `refs/heads/"
"master`;別のrefを指すrefは <<def_symref,シンボリックref>> と呼ぶ)。便宜上、"
"Gitコマンドの引数として使用する場合は `refs/` を省略できる場合があります。詳"
"細については linkgit:gitrevisions[7] を参照してください。 refs は "
"<<def_repository,repository>> に保存されます。"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:536
msgid ""
"The ref namespace is hierarchical.  Different subhierarchies are used for "
"different purposes (e.g. the `refs/heads/` hierarchy is used to represent "
"local branches)."
msgstr ""
"ref名前空間は階層的です。さまざまなサブ階層がさまざまな目的で使用されます(た"
"とえば、 `refs/heads/` 階層はローカルブランチを表すために使用されます)。"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:539
msgid ""
"There are a few special-purpose refs that do not begin with `refs/`.  The "
"most notable example is `HEAD`."
msgstr ""
"`refs/` で始まらない特別な目的のrefがいくつかあります。最も注目すべき例は "
"`HEAD` です。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:540
#, no-wrap
msgid "[[def_reflog]]reflog"
msgstr "[[def_reflog]]reflog"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:545
msgid ""
"A reflog shows the local \"history\" of a ref.  In other words, it can tell "
"you what the 3rd last revision in _this_ repository was, and what was the "
"current state in _this_ repository, yesterday 9:14pm.  See linkgit:git-"
"reflog[1] for details."
msgstr ""
"reflogは、refのローカルの「履歴」を示します。 つまり、このリポジトリの最後の3"
"番目のリビジョンが何であったか、およびこのリポジトリの昨日の午後9時14分時点で"
"の「現在の状態」が何であったかを知ることができます。詳細については linkgit:"
"git-reflog[1] を参照してください。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:546
#, no-wrap
msgid "[[def_refspec]]refspec"
msgstr "[[def_refspec]]refspec"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:550
msgid ""
"A \"refspec\" is used by <<def_fetch,fetch>> and <<def_push,push>> to "
"describe the mapping between remote <<def_ref,ref>> and local ref."
msgstr ""
"「refspec」は、<<def_fetch,フェッチ>>や<<def_push,プッシュ>>によって使用さ"
"れ、リモート<<def_ref,ref>>とローカルrefの間のマッピングを記述します。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:551
#, no-wrap
msgid "[[def_remote]]remote repository"
msgstr "[[def_remote]]remote repository"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:555
msgid ""
"A <<def_repository,repository>> which is used to track the same project but "
"resides somewhere else. To communicate with remotes, see <<def_fetch,fetch>> "
"or <<def_push,push>>."
msgstr ""
"同じプロジェクトを追跡するために使用されるが、別の場所にある<<def_repository,"
"リポジトリ>>。リモートと通信するには、<<def_fetch,フェッチ>>または<<def_push,"
"プッシュ>>を参照してください。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:556
#, no-wrap
msgid "[[def_remote_tracking_branch]]remote-tracking branch"
msgstr "[[def_remote_tracking_branch]]remote-tracking branch"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:564
msgid ""
"A <<def_ref,ref>> that is used to follow changes from another "
"<<def_repository,repository>>. It typically looks like 'refs/remotes/foo/"
"bar' (indicating that it tracks a branch named 'bar' in a remote named "
"'foo'), and matches the right-hand-side of a configured fetch <<def_refspec,"
"refspec>>. A remote-tracking branch should not contain direct modifications "
"or have local commits made to it."
msgstr ""
"別の<<def_repository,リポジトリ>>からの変更を追跡するために使用される"
"<<def_ref,ref>>。 これは通常、 `refs/remotes/foo/bar` のように見え(「foo」と"
"いう名前のリモートで「bar」という名前のブランチを追跡することを示します)、構"
"成されたフェッチ<<def_refspec,refspec>>の右側(right-hand-side)に一致します。"
"リモート追跡ブランチには、直接の変更を含めたり、ローカルコミットを行ったりし"
"ないでください。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:565
#, no-wrap
msgid "[[def_repository]]repository"
msgstr "[[def_repository]]repository"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:572
msgid ""
"A collection of <<def_ref,refs>> together with an <<def_object_database,"
"object database>> containing all objects which are <<def_reachable,"
"reachable>> from the refs, possibly accompanied by meta data from one or "
"more <<def_porcelain,porcelains>>. A repository can share an object database "
"with other repositories via <<def_alternate_object_database,alternates "
"mechanism>>."
msgstr ""
"<< def_ref,refs>>のコレクションと、refから<<def_reachable,到達可能>>なすべて"
"のオブジェクトを含む<<def_object_database,オブジェクトデータベース>>。1つまた"
"は複数の<<def_porcelain,磁器>>コマンドからのメタデータが付随している可能性が"
"あります。リポジトリは、<<def_alternate_object_database,代替メカニズム>>を介"
"してオブジェクトデータベースを他のリポジトリと共有できます。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:573
#, no-wrap
msgid "[[def_resolve]]resolve"
msgstr "[[def_resolve]]resolve"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:576
msgid ""
"The action of fixing up manually what a failed automatic <<def_merge,merge>> "
"left behind."
msgstr "失敗した自動 <<def_merge,マージ>> が残したものを手動で修正する操作。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:577
#, no-wrap
msgid "[[def_revision]]revision"
msgstr "[[def_revision]]revision"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:579
msgid "Synonym for <<def_commit,commit>> (the noun)."
msgstr "<<def_commit,コミット>> (名詞) の同義語"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:580
#, no-wrap
msgid "[[def_rewind]]rewind"
msgstr "[[def_rewind]]rewind(巻き戻し)"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:583
msgid ""
"To throw away part of the development, i.e. to assign the <<def_head,head>> "
"to an earlier <<def_revision,revision>>."
msgstr ""
"開発の一部を破棄する、つまり、 <<def_head,head>> を以前の <<def_revision,リビ"
"ジョン>> に割り当てる。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:584
#, no-wrap
msgid "[[def_SCM]]SCM"
msgstr "[[def_SCM]]SCM"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:586
msgid "Source code management (tool)."
msgstr "Source code management (tool)."

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:587
#, no-wrap
msgid "[[def_SHA1]]SHA-1"
msgstr "[[def_SHA1]]SHA-1"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:590
msgid ""
"\"Secure Hash Algorithm 1\"; a cryptographic hash function.  In the context "
"of Git used as a synonym for <<def_object_name,object name>>."
msgstr ""
"セキュアハッシュアルゴリズム1(Secure Hash Algorithm 1);暗号化ハッシュ関数。 "
"Git界隈では<<def_object_name,オブジェクト名>>の同義語として使用されます。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:591
#, no-wrap
msgid "[[def_shallow_clone]]shallow clone"
msgstr "[[def_shallow_clone]]shallow clone"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:595
msgid ""
"Mostly a synonym to <<def_shallow_repository,shallow repository>> but the "
"phrase makes it more explicit that it was created by running `git clone --"
"depth=...` command."
msgstr ""
"ほとんどの場合 <<def_shallow_repository,shallowリポジトリ>> の同義語ですが、"
"この言い方は、 `git clone --depth=...` コマンドを実行して作成されたこと明言し"
"たものです。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:596
#, no-wrap
msgid "[[def_shallow_repository]]shallow repository"
msgstr "[[def_shallow_repository]]shallow repository"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:606
msgid ""
"A shallow <<def_repository,repository>> has an incomplete history some of "
"whose <<def_commit,commits>> have <<def_parent,parents>> cauterized away (in "
"other words, Git is told to pretend that these commits do not have the "
"parents, even though they are recorded in the <<def_commit_object,commit "
"object>>). This is sometimes useful when you are interested only in the "
"recent history of a project even though the real history recorded in the "
"upstream is much larger. A shallow repository is created by giving the `--"
"depth` option to linkgit:git-clone[1], and its history can be later deepened "
"with linkgit:git-fetch[1]."
msgstr ""
"浅いリポジトリ(shallow repository)には不完全な履歴があり、そのコミットの一部"
"では親が削除されて(cauterized away)います(言い換えると、Gitは、コミットオブ"
"ジェクトに記録があっても、これらのコミットには親がないふりをするように指示さ"
"れます)。これは、アップストリームで記録された実際の履歴がはるかに大きい場合で"
"も、プロジェクトの最近の履歴のみに関心がある場合に役立つことがあります。浅い"
"リポジトリは、 linkgit:git-clone[1] に `--depth` オプションを指定することで作"
"成され、その履歴は後で linkgit:git-fetch[1] で深めることができます。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:607
#, no-wrap
msgid "[[def_stash]]stash entry"
msgstr "[[def_stash]]stash entry"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:610
msgid ""
"An <<def_object,object>> used to temporarily store the contents of a "
"<<def_dirty,dirty>> working directory and the index for future reuse."
msgstr ""
"<<def_dirty,ダーティ>> な作業ディレクトリの内容とインデックスを、将来の再利用"
"のために一時的に保存するのに使用される <<def_object,オブジェクト>> 。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:611
#, no-wrap
msgid "[[def_submodule]]submodule"
msgstr "[[def_submodule]]submodule"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:615
msgid ""
"A <<def_repository,repository>> that holds the history of a separate project "
"inside another repository (the latter of which is called <<def_superproject, "
"superproject>>)."
msgstr ""
"とあるリポジトリの内部で、それとは別個のプロジェクトの履歴を保持する "
"<<def_repository,リポジトリ>> (ここで、その、とあるリポジトリを "
"<<def_superproject,スーパープロジェクト>> と呼びます)。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:616
#, no-wrap
msgid "[[def_superproject]]superproject"
msgstr "[[def_superproject]]superproject"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:621
msgid ""
"A <<def_repository,repository>> that references repositories of other "
"projects in its working tree as <<def_submodule,submodules>>.  The "
"superproject knows about the names of (but does not hold copies of) commit "
"objects of the contained submodules."
msgstr ""
"作業ツリー内の他のプロジェクトのリポジトリを <<def_submodule,サブモジュール"
">> として参照する <<def_repository,リポジトリ>> 。 スーパープロジェクトは、含"
"まれているサブモジュールのコミットオブジェクトの名前を知っています(ただし、そ"
"のコピーは保持していません)。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:622
#, no-wrap
msgid "[[def_symref]]symref"
msgstr "[[def_symref]]symref"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:629
msgid ""
"Symbolic reference: instead of containing the <<def_SHA1,SHA-1>> id itself, "
"it is of the format 'ref: refs/some/thing' and when referenced, it "
"recursively dereferences to this reference.  '<<def_HEAD,HEAD>>' is a prime "
"example of a symref. Symbolic references are manipulated with the linkgit:"
"git-symbolic-ref[1] command."
msgstr ""
"シンボリックref: <<def_SHA1,SHA-1>> ID自体を含む代わりに「ref: refs/some/"
"thing」の形式であり、参照されると、この参照を再帰的に逆参照します。 "
"`<<def_HEAD,HEAD>>` はsymrefの代表的な例です。シンボリックrefは linkgit:git-"
"symbolic-ref[1] コマンドで操作されます。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:630
#, no-wrap
msgid "[[def_tag]]tag"
msgstr "[[def_tag]]tag"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:639
msgid ""
"A <<def_ref,ref>> under `refs/tags/` namespace that points to an object of "
"an arbitrary type (typically a tag points to either a <<def_tag_object,tag>> "
"or a <<def_commit_object,commit object>>).  In contrast to a <<def_head,"
"head>>, a tag is not updated by the `commit` command. A Git tag has nothing "
"to do with a Lisp tag (which would be called an <<def_object_type,object "
"type>> in Git's context). A tag is most typically used to mark a particular "
"point in the commit ancestry <<def_chain,chain>>."
msgstr ""
"任意のタイプのオブジェクトを指す `refs/tags/` 名前空間の下の<<def_ref,"
"ref>>(通常、タグは <<def_tag_object,タグ>> または <<def_commit_object,コミッ"
"トオブジェクト>> のいずれかを指します)。<<def_head,head>>とは対照的に、タグ"
"は `commit` コマンドによって更新されません。Gitタグは、Lispタグとは何の関係も"
"ありません(Git界隈では、それは<<def_object_type,オブジェクトタイプ>>と呼ばれ"
"ます)。タグは通常、コミットの祖先<<def_chain,チェーン>>の特定のポイントをマー"
"クするために使用されます。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:640
#, no-wrap
msgid "[[def_tag_object]]tag object"
msgstr "[[def_tag_object]]tag object"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:645
msgid ""
"An <<def_object,object>> containing a <<def_ref,ref>> pointing to another "
"object, which can contain a message just like a <<def_commit_object,commit "
"object>>. It can also contain a (PGP)  signature, in which case it is called "
"a \"signed tag object\"."
msgstr ""
"別のオブジェクトを指す<<def_ref,ref>>を含む<<def_object,オブジェクト>>。これ"
"には、<<def_commit_object,コミットオブジェクト>>のようにメッセージを含めるこ"
"とができます。またPGP署名を含めることもでき、その場合、「署名付きタグオブジェ"
"クト」(signed tag object)と呼ばれます。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:646
#, no-wrap
msgid "[[def_topic_branch]]topic branch"
msgstr "[[def_topic_branch]]topic branch"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:652
msgid ""
"A regular Git <<def_branch,branch>> that is used by a developer to identify "
"a conceptual line of development. Since branches are very easy and "
"inexpensive, it is often desirable to have several small branches that each "
"contain very well defined concepts or small incremental yet related changes."
msgstr ""
"開発者が概念的な開発ラインを識別するために使用する通常のGit<<def_branch,ブラ"
"ンチ>>。(従来のSCMに比べて)ブランチは非常に簡単で処理コストが掛からないため、"
"それぞれが非常に明確に定義された概念または小さな増分であるが関連する変更を含"
"む、いくつかの小さなブランチを持つことが望ましい場合がよくあります。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:653
#, no-wrap
msgid "[[def_tree]]tree"
msgstr "[[def_tree]]tree"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:657
msgid ""
"Either a <<def_working_tree,working tree>>, or a <<def_tree_object,tree "
"object>> together with the dependent <<def_blob_object,blob>> and tree "
"objects (i.e. a stored representation of a working tree)."
msgstr ""
"<<def_working_tree,作業ツリー>>、または、<<def_tree_object,ツリーオブジェクト"
">>とそれに依存する<<def_blob_object,ブロブ>>やツリーオブジェクト(つまり、作業"
"ツリーの保存された表現)、のいずれか。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:658
#, no-wrap
msgid "[[def_tree_object]]tree object"
msgstr "[[def_tree_object]]tree object"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:662
msgid ""
"An <<def_object,object>> containing a list of file names and modes along "
"with refs to the associated blob and/or tree objects. A <<def_tree,tree>> is "
"equivalent to a <<def_directory,directory>>."
msgstr ""
"ファイル名とモードのリスト、および関連するブロブやツリーオブジェクトへのrefを"
"含む<<def_object,オブジェクト>>。<< def_tree,ツリー>>と<<def_directory,ディレ"
"クトリ>>は同じ意味です。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:663
#, no-wrap
msgid "[[def_tree-ish]]tree-ish (also treeish)"
msgstr "[[def_tree-ish]]tree-ish (also treeish)"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:676
msgid ""
"A <<def_tree_object,tree object>> or an <<def_object,object>> that can be "
"recursively dereferenced to a tree object.  Dereferencing a "
"<<def_commit_object,commit object>> yields the tree object corresponding to "
"the <<def_revision,revision>>'s top <<def_directory,directory>>.  The "
"following are all tree-ishes: a <<def_commit-ish,commit-ish>>, a tree "
"object, a <<def_tag_object,tag object>> that points to a tree object, a tag "
"object that points to a tag object that points to a tree object, etc."
msgstr ""
"ツリーっぽい何か。ツリーオブジェクトに再帰的に逆参照できる <<def_tree_object,"
"ツリーオブジェクト>> または <<def_object,オブジェクト>> です。 "
"<<def_commit_object,コミットオブジェクト>> を逆参照すると、その "
"<<def_revision,リビジョン>> の最上位 <<def_directory,ディレクトリ> に対応する"
"ツリーオブジェクトが生成されます。※右記は全てツリーっぽい(tree-ish)モノです: "
"<<def_commit-ish,コミットっぽい何か>> 、ツリーオブジェクト、ツリーオブジェク"
"トを指す <<def_tag_object,タグオブジェクト>> 、タグオブジェクトを指すタグオブ"
"ジェクト"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:677
#, no-wrap
msgid "[[def_unmerged_index]]unmerged index"
msgstr "[[def_unmerged_index]]unmerged index"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:680
msgid ""
"An <<def_index,index>> which contains unmerged <<def_index_entry,index "
"entries>>."
msgstr ""
"マージされていない<<def_index_entry,インデックスエントリ>>を含む<<def_index,"
"インデックス>>。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:681
#, no-wrap
msgid "[[def_unreachable_object]]unreachable object"
msgstr "[[def_unreachable_object]]unreachable object"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:684
msgid ""
"An <<def_object,object>> which is not <<def_reachable,reachable>> from a "
"<<def_branch,branch>>, <<def_tag,tag>>, or any other reference."
msgstr ""
"<<def_branch,ブランチ>> または <<def_tag,タグ>> またはその他の参照から "
"<<def_reachable,到達可能>> ではない(辿れない、ポイントされてない) "
"<<def_object,オブジェクト>> 。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:685
#, no-wrap
msgid "[[def_upstream_branch]]upstream branch"
msgstr "[[def_upstream_branch]]upstream branch"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:690
msgid ""
"The default <<def_branch,branch>> that is merged into the branch in question "
"(or the branch in question is rebased onto). It is configured via branch."
"<name>.remote and branch.<name>.merge. If the upstream branch of 'A' is "
"'origin/B' sometimes we say \"'A' is tracking 'origin/B'\"."
msgstr ""
"当該のブランチからマージされる(または当該のブランチがリベースされる)デフォル"
"トの<<def_branch,ブランチ>>。これは、 `branch.<name>.remote` や `branch."
"<name>.merge` を介して構成されます。Aのアップストリームブランチが `origin/B` "
"の場合、「Aは `origin/B` を追跡しています」と言うことがあります。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:691
#, no-wrap
msgid "[[def_working_tree]]working tree"
msgstr "[[def_working_tree]]working tree"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:695
msgid ""
"The tree of actual checked out files.  The working tree normally contains "
"the contents of the <<def_HEAD,HEAD>> commit's tree, plus any local changes "
"that you have made but not yet committed."
msgstr ""
"実際にチェックアウトされたファイル群のツリー。 作業ツリーには通常、 "
"<<def_HEAD,HEAD>> コミットのツリーの内容に加えて、任意の、まだコミットされて"
"いないローカルの変更が含まれています。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:696
#, no-wrap
msgid "[[def_worktree]]worktree"
msgstr "[[def_worktree]]worktree"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:703
msgid ""
"A repository can have zero (i.e. bare repository) or one or more worktrees "
"attached to it. One \"worktree\" consists of a \"working tree\" and "
"repository metadata, most of which are shared among other worktrees of a "
"single repository, and some of which are maintained separately per worktree "
"(e.g. the index, HEAD and pseudorefs like MERGE_HEAD, per-worktree refs and "
"per-worktree configuration file)."
msgstr ""
"(ワークツリー):リポジトリには、ゼロ(ベア・リポジトリ)または1つ以上の "
"worktree を当てはめる(attach)ことができます。 1 つの「worktree」は「作業ツ"
"リー」(working tree)とリポジトリ・メタデータで構成され、 そのほとんどは単一の"
"リポジトリの他の worktree 間で共有され、一部は worktree ごとに個別に維持され"
"ます(例: インデックスやHEADやMERGE_HEADなどの疑似ref(pseudorefs)、worktreeご"
"との ref や worktree ごとの構成ファイル)。"
