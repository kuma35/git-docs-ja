# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 0.0\n"
"POT-Creation-Date: 2021-11-04 04:38+0900\n"
"PO-Revision-Date: 2021-11-30 04:43+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:1
#, no-wrap
msgid "[[def_alternate_object_database]]alternate object database"
msgstr "[[def_alternate_object_database]]alternate object database"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:5
msgid ""
"Via the alternates mechanism, a <<def_repository,repository>> can inherit "
"part of its <<def_object_database,object database>> from another object "
"database, which is called an \"alternate\"."
msgstr "代役(alternate)メカニズムを介して、 <<def_repository,リポジトリ>> は <<def_object_database,オブジェクトデータベース>> の一部を \"alternate\" (代役) 呼ばれる別のオブジェクトデータベースから継承できます。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:6
#, no-wrap
msgid "[[def_bare_repository]]bare repository"
msgstr "[[def_bare_repository]]bare repository(ベアリポジトリ)"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:16
msgid ""
"A bare repository is normally an appropriately named <<def_directory,"
"directory>> with a `.git` suffix that does not have a locally checked-out "
"copy of any of the files under revision control. That is, all of the Git "
"administrative and control files that would normally be present in the "
"hidden `.git` sub-directory are directly present in the `repository.git` "
"directory instead, and no other files are present and checked out. Usually "
"publishers of public repositories make bare repositories available."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:17
#, no-wrap
msgid "[[def_blob_object]]blob object"
msgstr "[[def_blob_object]]blob object(ブロブオブジェクト)"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:19
msgid "Untyped <<def_object,object>>, e.g. the contents of a file."
msgstr "型の無い<<def_object,オブジェクト>>。例:ファイルの中身。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:20
#, no-wrap
msgid "[[def_branch]]branch"
msgstr "[[def_branch]]branch"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:30
msgid ""
"A \"branch\" is a line of development.  The most recent <<def_commit,"
"commit>> on a branch is referred to as the tip of that branch.  The tip of "
"the branch is referenced by a branch <<def_head,head>>, which moves forward "
"as additional development is done on the branch.  A single Git "
"<<def_repository,repository>> can track an arbitrary number of branches, but "
"your <<def_working_tree,working tree>> is associated with just one of them "
"(the \"current\" or \"checked out\" branch), and <<def_HEAD,HEAD>> points to "
"that branch."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:31
#, no-wrap
msgid "[[def_cache]]cache"
msgstr "[[def_cache]]cache"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:33
msgid "Obsolete for: <<def_index,index>>."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:34
#, no-wrap
msgid "[[def_chain]]chain"
msgstr "[[def_chain]]chain(チェーン,チェイン)"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:38
msgid ""
"A list of objects, where each <<def_object,object>> in the list contains a "
"reference to its successor (for example, the successor of a <<def_commit,"
"commit>> could be one of its <<def_parent,parents>>)."
msgstr "オブジェクトのリスト。リスト内の各 <<def_object,オブジェクト>> には、その後ろへの参照が含まれます(たとえば、 <<def_commit,コミット>> の後ろはその <<def_parent,親>> の1つである可能性があります)。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:39
#, no-wrap
msgid "[[def_changeset]]changeset"
msgstr "[[def_changeset]]changeset"

# BitKeeper
# https://ja.wikipedia.org/wiki/BitKeeper
# BitKeeper は、コンピュータのソースコードのバージョン管理システム（構成管理、SCMなど）の一種である。<
#
# cvsps(1) - Linux man page
# CVSps - create patchset information from CVS
#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:43
msgid ""
"BitKeeper/cvsps speak for \"<<def_commit,commit>>\". Since Git does not "
"store changes, but states, it really does not make sense to use the term "
"\"changesets\" with Git."
msgstr "\"<<def_commit,コミット>>\" の BitKeeper/cvsps での言い方です。Gitで変更を保存せず状態を保存するため、Gitでコミットを「changeset」と呼ぶのはナンセンスです。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:44
#, no-wrap
msgid "[[def_checkout]]checkout"
msgstr "[[def_checkout]]checkout"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:51
msgid ""
"The action of updating all or part of the <<def_working_tree,working tree>> "
"with a <<def_tree_object,tree object>> or <<def_blob_object,blob>> from the "
"<<def_object_database,object database>>, and updating the <<def_index,"
"index>> and <<def_HEAD,HEAD>> if the whole working tree has been pointed at "
"a new <<def_branch,branch>>."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:52
#, no-wrap
msgid "[[def_cherry-picking]]cherry-picking"
msgstr "[[def_cherry-picking]]cherry-picking(チェリーピック,チェリーピッキング)"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:59
msgid ""
"In <<def_SCM,SCM>> jargon, \"cherry pick\" means to choose a subset of "
"changes out of a series of changes (typically commits) and record them as a "
"new series of changes on top of a different codebase. In Git, this is "
"performed by the \"git cherry-pick\" command to extract the change "
"introduced by an existing <<def_commit,commit>> and to record it based on "
"the tip of the current <<def_branch,branch>> as a new commit."
msgstr ""
"<<def_SCM,SCM>> の専門用語では、 \"cherry pick\" (つまみ食い)とは、一連の変更"
"(通常はコミット)から変更のサブセットを選択し、それらを別のコードベースの上に"
"新しい一連の変更として記録することを意味します。Gitでは、これは \"git cherry-"
"pick\" コマンドによって実行され、既存の<<def_commit,コミット>>によって導入さ"
"れた変更を抽出し、現在の<<def_branch,ブランチ>>の先端に基づいてそれを新しいコ"
"ミットとして記録します。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:60
#, no-wrap
msgid "[[def_clean]]clean"
msgstr "[[def_clean]]clean"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:64
msgid ""
"A <<def_working_tree,working tree>> is clean, if it corresponds to the "
"<<def_revision,revision>> referenced by the current <<def_head,head>>. Also "
"see \"<<def_dirty,dirty>>\"."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:65
#, no-wrap
msgid "[[def_commit]]commit"
msgstr "[[def_commit]]commit"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:72
msgid ""
"As a noun: A single point in the Git history; the entire history of a "
"project is represented as a set of interrelated commits.  The word \"commit"
"\" is often used by Git in the same places other revision control systems "
"use the words \"revision\" or \"version\".  Also used as a short hand for "
"<<def_commit_object,commit object>>."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:77
msgid ""
"As a verb: The action of storing a new snapshot of the project's state in "
"the Git history, by creating a new commit representing the current state of "
"the <<def_index,index>> and advancing <<def_HEAD,HEAD>> to point at the new "
"commit."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:78
#, no-wrap
msgid "[[def_commit_object]]commit object"
msgstr "[[def_commit_object]]commit object"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:84
msgid ""
"An <<def_object,object>> which contains the information about a particular "
"<<def_revision,revision>>, such as <<def_parent,parents>>, committer, "
"author, date and the <<def_tree_object,tree object>> which corresponds to "
"the top <<def_directory,directory>> of the stored revision."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:85
#, no-wrap
msgid "[[def_commit-ish]]commit-ish (also committish)"
msgstr "[[def_commit-ish]]commit-ish (also committish)"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:96
msgid ""
"A <<def_commit_object,commit object>> or an <<def_object,object>> that can "
"be recursively dereferenced to a commit object.  The following are all "
"commit-ishes: a commit object, a <<def_tag_object,tag object>> that points "
"to a commit object, a tag object that points to a tag object that points to "
"a commit object, etc."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:97
#, no-wrap
msgid "[[def_core_git]]core Git"
msgstr "[[def_core_git]]core Git"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:100
msgid ""
"Fundamental data structures and utilities of Git. Exposes only limited "
"source code management tools."
msgstr "Gitの基本的なデータ構造とユーティリティ。これは、限定的なソースコード管理ツールのみです。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:101
#, no-wrap
msgid "[[def_DAG]]DAG"
msgstr "[[def_DAG]]DAG"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:106
msgid ""
"Directed acyclic graph. The <<def_commit_object,commit objects>> form a "
"directed acyclic graph, because they have parents (directed), and the graph "
"of commit objects is acyclic (there is no <<def_chain,chain>> which begins "
"and ends with the same <<def_object,object>>)."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:107
#, no-wrap
msgid "[[def_dangling_object]]dangling object"
msgstr "[[def_dangling_object]]dangling object"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:112
msgid ""
"An <<def_unreachable_object,unreachable object>> which is not "
"<<def_reachable,reachable>> even from other unreachable objects; a dangling "
"object has no references to it from any reference or <<def_object,object>> "
"in the <<def_repository,repository>>."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:113
#, no-wrap
msgid "[[def_detached_HEAD]]detached HEAD"
msgstr "[[def_detached_HEAD]]detached HEAD"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:122
msgid ""
"Normally the <<def_HEAD,HEAD>> stores the name of a <<def_branch,branch>>, "
"and commands that operate on the history HEAD represents operate on the "
"history leading to the tip of the branch the HEAD points at.  However, Git "
"also allows you to <<def_checkout,check out>> an arbitrary <<def_commit,"
"commit>> that isn't necessarily the tip of any particular branch.  The HEAD "
"in such a state is called \"detached\"."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:131
msgid ""
"Note that commands that operate on the history of the current branch (e.g. "
"`git commit` to build a new history on top of it) still work while the HEAD "
"is detached. They update the HEAD to point at the tip of the updated history "
"without affecting any branch.  Commands that update or inquire information "
"_about_ the current branch (e.g. `git branch --set-upstream-to` that sets "
"what remote-tracking branch the current branch integrates with) obviously do "
"not work, as there is no (real) current branch to ask about in this state."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:132
#, no-wrap
msgid "[[def_directory]]directory"
msgstr "[[def_directory]]directory"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:134
msgid "The list you get with \"ls\" :-)"
msgstr "あなたが \"ls\" で得られる一覧の事 :-)"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:135
#, no-wrap
msgid "[[def_dirty]]dirty"
msgstr "[[def_dirty]]dirty"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:139
msgid ""
"A <<def_working_tree,working tree>> is said to be \"dirty\" if it contains "
"modifications which have not been <<def_commit,committed>> to the current "
"<<def_branch,branch>>."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:140
#, no-wrap
msgid "[[def_evil_merge]]evil merge"
msgstr "[[def_evil_merge]]evil merge"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:143
msgid ""
"An evil merge is a <<def_merge,merge>> that introduces changes that do not "
"appear in any <<def_parent,parent>>."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:144
#, no-wrap
msgid "[[def_fast_forward]]fast-forward"
msgstr "[[def_fast_forward]]fast-forward"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:153
msgid ""
"A fast-forward is a special type of <<def_merge,merge>> where you have a "
"<<def_revision,revision>> and you are \"merging\" another <<def_branch,"
"branch>>'s changes that happen to be a descendant of what you have. In such "
"a case, you do not make a new <<def_merge,merge>> <<def_commit,commit>> but "
"instead just update your branch to point at the same revision as the branch "
"you are merging. This will happen frequently on a "
"<<def_remote_tracking_branch,remote-tracking branch>> of a remote "
"<<def_repository,repository>>."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:154
#, no-wrap
msgid "[[def_fetch]]fetch"
msgstr "[[def_fetch]]fetch"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:160
msgid ""
"Fetching a <<def_branch,branch>> means to get the branch's <<def_head_ref,"
"head ref>> from a remote <<def_repository,repository>>, to find out which "
"objects are missing from the local <<def_object_database,object database>>, "
"and to get them, too.  See also linkgit:git-fetch[1]."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:161
#, no-wrap
msgid "[[def_file_system]]file system"
msgstr "[[def_file_system]]file system"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:165
msgid ""
"Linus Torvalds originally designed Git to be a user space file system, i.e. "
"the infrastructure to hold files and directories. That ensured the "
"efficiency and speed of Git."
msgstr "リーナス・トーバルズは当初、Gitをユーザー空間ファイルシステム、つまりファイルとディレクトリを保持するインフラストラクチャとして設計しました。これにより、Gitの効率と速度が保証されました。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:166
#, no-wrap
msgid "[[def_git_archive]]Git archive"
msgstr "[[def_git_archive]]Git archive"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:168
msgid "Synonym for <<def_repository,repository>> (for arch people)."
msgstr "<<def_repository,リポジトリ>> の同義語(arch people 向け)。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:169
#, no-wrap
msgid "[[def_gitfile]]gitfile"
msgstr "[[def_gitfile]]gitfile"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:172
msgid ""
"A plain file `.git` at the root of a working tree that points at the "
"directory that is the real repository."
msgstr "実際のリポジトリであるディレクトリを指す、作業ツリーのルートにあるプレーンファイル `.git` "

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:173
#, no-wrap
msgid "[[def_grafts]]grafts"
msgstr "[[def_grafts]]grafts"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:179
msgid ""
"Grafts enables two otherwise different lines of development to be joined "
"together by recording fake ancestry information for commits. This way you "
"can make Git pretend the set of <<def_parent,parents>> a <<def_commit,"
"commit>> has is different from what was recorded when the commit was "
"created. Configured via the `.git/info/grafts` file."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:183
msgid ""
"Note that the grafts mechanism is outdated and can lead to problems "
"transferring objects between repositories; see linkgit:git-replace[1] for a "
"more flexible and robust system to do the same thing."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:184
#, no-wrap
msgid "[[def_hash]]hash"
msgstr "[[def_hash]]hash"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:186
msgid "In Git's context, synonym for <<def_object_name,object name>>."
msgstr "Gitの文脈では <<def_object_name,オブジェクト名>> と同義語。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:187
#, no-wrap
msgid "[[def_head]]head"
msgstr "[[def_head]]head"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:192
msgid ""
"A <<def_ref,named reference>> to the <<def_commit,commit>> at the tip of a "
"<<def_branch,branch>>.  Heads are stored in a file in `$GIT_DIR/refs/heads/` "
"directory, except when using packed refs. (See linkgit:git-pack-refs[1].)"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:193
#, no-wrap
msgid "[[def_HEAD]]HEAD"
msgstr "[[def_HEAD]]HEAD"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:200
msgid ""
"The current <<def_branch,branch>>.  In more detail: Your <<def_working_tree, "
"working tree>> is normally derived from the state of the tree referred to by "
"HEAD.  HEAD is a reference to one of the <<def_head,heads>> in your "
"repository, except when using a <<def_detached_HEAD,detached HEAD>>, in "
"which case it directly references an arbitrary commit."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:201
#, no-wrap
msgid "[[def_head_ref]]head ref"
msgstr "[[def_head_ref]]head ref"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:203
msgid "A synonym for <<def_head,head>>."
msgstr "<<def_head,head>> の同義語。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:204
#, no-wrap
msgid "[[def_hook]]hook"
msgstr "[[def_hook]]hook"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:213
msgid ""
"During the normal execution of several Git commands, call-outs are made to "
"optional scripts that allow a developer to add functionality or checking. "
"Typically, the hooks allow for a command to be pre-verified and potentially "
"aborted, and allow for a post-notification after the operation is done. The "
"hook scripts are found in the `$GIT_DIR/hooks/` directory, and are enabled "
"by simply removing the `.sample` suffix from the filename. In earlier "
"versions of Git you had to make them executable."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:214
#, no-wrap
msgid "[[def_index]]index"
msgstr "[[def_index]]index"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:220
msgid ""
"A collection of files with stat information, whose contents are stored as "
"objects. The index is a stored version of your <<def_working_tree,working "
"tree>>. Truth be told, it can also contain a second, and even a third "
"version of a working tree, which are used when <<def_merge,merging>>."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:221
#, no-wrap
msgid "[[def_index_entry]]index entry"
msgstr "[[def_index_entry]]index entry"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:226
msgid ""
"The information regarding a particular file, stored in the <<def_index,"
"index>>. An index entry can be unmerged, if a <<def_merge,merge>> was "
"started, but not yet finished (i.e. if the index contains multiple versions "
"of that file)."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:227
#, no-wrap
msgid "[[def_master]]master"
msgstr "[[def_master]]master"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:233
msgid ""
"The default development <<def_branch,branch>>. Whenever you create a Git "
"<<def_repository,repository>>, a branch named \"master\" is created, and "
"becomes the active branch. In most cases, this contains the local "
"development, though that is purely by convention and is not required."
msgstr "デフォルトの開発 <<def_branch,ブランチ>> 。 Git <<def_repository,リポジトリ>> を作成するたびに、「master」という名前のブランチが作成され、アクティブなブランチになります。 ほとんどのローカル開発に含まれていますが、これは純粋に慣例によるものであり、必須ではありません。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:234
#, no-wrap
msgid "[[def_merge]]merge"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:247
msgid ""
"As a verb: To bring the contents of another <<def_branch,branch>> (possibly "
"from an external <<def_repository,repository>>) into the current branch.  In "
"the case where the merged-in branch is from a different repository, this is "
"done by first <<def_fetch,fetching>> the remote branch and then merging the "
"result into the current branch.  This combination of fetch and merge "
"operations is called a <<def_pull,pull>>.  Merging is performed by an "
"automatic process that identifies changes made since the branches diverged, "
"and then applies all those changes together.  In cases where changes "
"conflict, manual intervention may be required to complete the merge."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:254
msgid ""
"As a noun: unless it is a <<def_fast_forward,fast-forward>>, a successful "
"merge results in the creation of a new <<def_commit,commit>> representing "
"the result of the merge, and having as <<def_parent,parents>> the tips of "
"the merged <<def_branch,branches>>.  This commit is referred to as a \"merge "
"commit\", or sometimes just a \"merge\"."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:255
#, no-wrap
msgid "[[def_object]]object"
msgstr "[[def_object]]object(オブジェクト)"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:259
msgid ""
"The unit of storage in Git. It is uniquely identified by the <<def_SHA1,"
"SHA-1>> of its contents. Consequently, an object cannot be changed."
msgstr "Gitの保管ユニット(unit of storage)。その内容による <<def_SHA1,SHA-1>> によって一意に識別されます。したがって、オブジェクトを変更することはできません。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:260
#, no-wrap
msgid "[[def_object_database]]object database"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:264
msgid ""
"Stores a set of \"objects\", and an individual <<def_object,object>> is "
"identified by its <<def_object_name,object name>>. The objects usually live "
"in `$GIT_DIR/objects/`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:265
#, no-wrap
msgid "[[def_object_identifier]]object identifier"
msgstr "[[def_object_identifier]]object identifier(オブジェクトID)"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:267
msgid "Synonym for <<def_object_name,object name>>."
msgstr "<<def_object_name,object name>> (オブジェクト名)の同義語"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:268
#, no-wrap
msgid "[[def_object_name]]object name"
msgstr "[[def_object_name]]object name(オブジェクト名)"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:272
msgid ""
"The unique identifier of an <<def_object,object>>.  The object name is "
"usually represented by a 40 character hexadecimal string.  Also colloquially "
"called <<def_SHA1,SHA-1>>."
msgstr "<<def_object,オブジェクト> の一意の識別子。オブジェクト名は通常、40文字の16進文字列で表されます。一般に <<def_SHA1,SHA-1>> とも呼ばれます。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:273
#, no-wrap
msgid "[[def_object_type]]object type"
msgstr "[[def_object_type]]object type(オブジェクトタイプ)"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:278
msgid ""
"One of the identifiers \"<<def_commit_object,commit>>\", \"<<def_tree_object,"
"tree>>\", \"<<def_tag_object,tag>>\" or \"<<def_blob_object,blob>>\" "
"describing the type of an <<def_object,object>>."
msgstr "「<<def_commit_object,コミット>> 識別子」または「<<def_tree_object,ツリー>> 識別子」または「<<def_tag_object,タグ>> 識別子」または「<<def_blob_object,ブロブ>> 識別子」のいずれかで、 <<def_object,オブジェクト>> のタイプを表します。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:279
#, no-wrap
msgid "[[def_octopus]]octopus"
msgstr "[[def_octopus]]octopus"

# more than X → > X 
# 訳注:3本足以上はタコ扱いのようである<
#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:281
msgid "To <<def_merge,merge>> more than two <<def_branch,branches>>."
msgstr "3つ以上(more than two)のブランチをマージします"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:282
#, no-wrap
msgid "[[def_origin]]origin"
msgstr "[[def_origin]]origin"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:289
msgid ""
"The default upstream <<def_repository,repository>>. Most projects have at "
"least one upstream project which they track. By default 'origin' is used for "
"that purpose. New upstream updates will be fetched into "
"<<def_remote_tracking_branch,remote-tracking branches>> named origin/name-of-"
"upstream-branch, which you can see using `git branch -r`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:290
#, no-wrap
msgid "[[def_overlay]]overlay"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:298
msgid ""
"Only update and add files to the working directory, but don't delete them, "
"similar to how 'cp -R' would update the contents in the destination "
"directory.  This is the default mode in a <<def_checkout,checkout>> when "
"checking out files from the <<def_index,index>> or a <<def_tree-ish,tree-"
"ish>>.  In contrast, no-overlay mode also deletes tracked files not present "
"in the source, similar to 'rsync --delete'."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:299
#, no-wrap
msgid "[[def_pack]]pack"
msgstr "[[def_pack]]pack"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:302
msgid ""
"A set of objects which have been compressed into one file (to save space or "
"to transmit them efficiently)."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:303
#, no-wrap
msgid "[[def_pack_index]]pack index"
msgstr "[[def_pack_index]]pack index"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:307
msgid ""
"The list of identifiers, and other information, of the objects in a "
"<<def_pack,pack>>, to assist in efficiently accessing the contents of a pack."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:308
#, no-wrap
msgid "[[def_pathspec]]pathspec"
msgstr "[[def_pathspec]]pathspec"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:310
msgid "Pattern used to limit paths in Git commands."
msgstr "Gitコマンドでパスを制限するために使用されるパターン。"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:318
msgid ""
"Pathspecs are used on the command line of \"git ls-files\", \"git ls-tree\", "
"\"git add\", \"git grep\", \"git diff\", \"git checkout\", and many other "
"commands to limit the scope of operations to some subset of the tree or "
"worktree.  See the documentation of each command for whether paths are "
"relative to the current directory or toplevel.  The pathspec syntax is as "
"follows:"
msgstr "pathspecsは、「git ls-files」、「git ls-tree」、「git add」、「git grep」、「git diff」、「git checkout」、および、ツリーまたはワークツリーのサブセットへの操作の為にスコープを制限する他の多くのコマンドのコマンドラインで使用されます。パスが現在のディレクトリまたはトップレベルのどちらを基準にしているかについては、各コマンドのドキュメントを参照してください。 pathspecの構文は以下のとおりです:"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:322
msgid "any path matches itself"
msgstr "どのパスもそれ自体と一致します"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:325
msgid ""
"the pathspec up to the last slash represents a directory prefix.  The scope "
"of that pathspec is limited to that subtree."
msgstr "最後がスラッシュであるpathspecは、ディレクトリプレフィックスを表します。そのpathspecのスコープは、そのサブツリーに制限されています。"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:329
msgid ""
"the rest of the pathspec is a pattern for the remainder of the pathname.  "
"Paths relative to the directory prefix will be matched against that pattern "
"using fnmatch(3); in particular, '*' and '?' _can_ match directory "
"separators."
msgstr "pathspecの残りの部分は、pathnameの残りの部分のパターンです。 ディレクトリプレフィックスに関連するパスは、 fnmatch(3) を使用してそのパターンと照合されます。特に、 '*' と '?' はディレクトリ区切り文字と一致させる事ができます。"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:335
msgid ""
"For example, Documentation/*.jpg will match all .jpg files in the "
"Documentation subtree, including Documentation/chapter_1/figure_1.jpg."
msgstr "たとえば、 `Documentation/*.jpg` は、 `Documentation/chapter_1/figure_1.jpg` を含む、Documentationサブツリー内のすべての `.jpg` ファイルと一致します。"

# https://qiita.com/darai0512/items/c2cf3719ec0903ab8002
# :始まりでmagic word（または一文字のmagic signature）
#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:345
msgid ""
"A pathspec that begins with a colon `:` has special meaning.  In the short "
"form, the leading colon `:` is followed by zero or more \"magic signature\" "
"letters (which optionally is terminated by another colon `:`), and the "
"remainder is the pattern to match against the path.  The \"magic signature\" "
"consists of ASCII symbols that are neither alphanumeric, glob, regex special "
"characters nor colon.  The optional colon that terminates the \"magic "
"signature\" can be omitted if the pattern begins with a character that does "
"not belong to \"magic signature\" symbol set and is not a colon."
msgstr "コロン(`:`)で始まるpathspecには特別な意味があります。短い形式では、先頭のコロン(`:`)の後に0個以上の「魔法記号」(magic signature)(オプションで別のコロン(`:`)で終了)が続き、残りはパスと照合するパターンです。「魔法記号」は、英数字、グロブ、正規表現の特殊文字でもコロンでもないASCII記号で構成されます。パターンが「魔法記号」シンボルセットに属さず、コロンではない文字で始まる場合、「魔法記号」を終了するオプションのコロンは省略できます。"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:350
msgid ""
"In the long form, the leading colon `:` is followed by an open parenthesis "
"`(`, a comma-separated list of zero or more \"magic words\", and a close "
"parentheses `)`, and the remainder is the pattern to match against the path."
msgstr "長い形式では、先頭のコロン(`:`)の後に開き括弧(`(`) 、0個以上の「魔法単語」(magic words)のコンマ区切りリスト、および閉じ括弧(`)`) が続き、残りは次のパターンです。パスと一致します。"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:353
msgid ""
"A pathspec with only a colon means \"there is no pathspec\". This form "
"should not be combined with other pathspec."
msgstr "コロンのみのpathspecは、「pathspecがない」ことを意味します。 この形式は、他のpathspecと組み合わせないでください。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:355
#, no-wrap
msgid "top"
msgstr "top"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:359
msgid ""
"The magic word `top` (magic signature: `/`) makes the pattern match from the "
"root of the working tree, even when you are running the command from inside "
"a subdirectory."
msgstr "魔法単語 `top` (魔法記号: `/`)は、サブディレクトリ内からコマンドを実行している場合でも、作業ツリーのルートからパターンを一致させます。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:360
#, no-wrap
msgid "literal"
msgstr "literal"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:363
msgid ""
"Wildcards in the pattern such as `*` or `?` are treated as literal "
"characters."
msgstr "`*` または `?` などのパターンのワイルドカードはリテラル文字として扱われます。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:364
#, no-wrap
msgid "icase"
msgstr "icase"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:366
msgid "Case insensitive match."
msgstr "(英文字の)大文字小文字区別せずにマッチ"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:367
#, no-wrap
msgid "glob"
msgstr "glob"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:374
msgid ""
"Git treats the pattern as a shell glob suitable for consumption by "
"fnmatch(3) with the FNM_PATHNAME flag: wildcards in the pattern will not "
"match a / in the pathname.  For example, \"Documentation/{asterisk}.html\" "
"matches \"Documentation/git.html\" but not \"Documentation/ppc/ppc.html\" or "
"\"tools/perf/Documentation/perf.html\"."
msgstr "Gitはパターンを、 FNM_PATHNAMEフラグを指定した fnmatch(3) に消費されるのに適したシェルグロブとして扱います。パターン内のワイルドカードは、パス名内の / と一致しません。 たとえば、「Documentation/{asterisk}.html」は「Documentation/git.html」と一致しますが、「Documentation/ppc/ppc.html」または「tools/perf/Documentation/perf.html」とは一致しません。"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:377
msgid ""
"Two consecutive asterisks (\"`**`\") in patterns matched against full "
"pathname may have special meaning:"
msgstr "フルパス名と一致するパターンの2つの連続するアスタリスク `**` は、特別な意味を持つ場合があります:"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:383
msgid ""
"A leading \"`**`\" followed by a slash means match in all directories. For "
"example, \"`**/foo`\" matches file or directory \"`foo`\" anywhere, the same "
"as pattern \"`foo`\". \"`**/foo/bar`\" matches file or directory \"`bar`\" "
"anywhere that is directly under directory \"`foo`\"."
msgstr "先頭の `**` の後にスラッシュが続く場合は、すべてのディレクトリで一致することを意味します。たとえば、 `**/foo` は、パターン `foo` と同じように、ファイルまたはディレクトリ `foo` のどこにでも一致します。 `**/foo/bar` は、ディレクトリ `foo` の直下にあるファイルまたはディレクトリ `bar` と一致します。"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:387
msgid ""
"A trailing \"`/**`\" matches everything inside. For example, \"`abc/**`\" "
"matches all files inside directory \"abc\", relative to the location of the "
"`.gitignore` file, with infinite depth."
msgstr "末尾の `/**` は、内部のすべてに一致します(matches everything inside)。たとえば、 `abc/**` は、 `.gitignore` ファイルの場所を基準にして、ディレクトリ \"abc\" 内のすべてのファイルと無限の深さで一致します。"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:391
msgid ""
"A slash followed by two consecutive asterisks then a slash matches zero or "
"more directories. For example, \"`a/**/b`\" matches \"`a/b`\", \"`a/x/b`\", "
"\"`a/x/y/b`\" and so on."
msgstr "スラッシュの後に2つの連続するアスタリスクが続く場合、スラッシュは0個以上のディレクトリに一致します。 たとえば、 `a/**/b` は `a/b` 、 `a/x/b` 、`a/x/y/b` などと一致します。"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:393
msgid "Other consecutive asterisks are considered invalid."
msgstr "他の連続するアスタリスクは無効と見なされます。"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:395
msgid "Glob magic is incompatible with literal magic."
msgstr "グロブ魔法はリテラル魔法と互換性がありません。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:396
#, no-wrap
msgid "attr"
msgstr "attr"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:402
msgid ""
"After `attr:` comes a space separated list of \"attribute requirements\", "
"all of which must be met in order for the path to be considered a match; "
"this is in addition to the usual non-magic pathspec pattern matching.  See "
"linkgit:gitattributes[5]."
msgstr "`attr:` の後には、スペースで区切られた「属性要件」(attribute requirements)のリストがあります。パスが一致すると見なされるには、これらすべてを満たす必要があります。これは、通常の非魔法pathspecパターンマッチングに追加されます。 linkgit:gitattributes[5] 参照。"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:405
msgid ""
"Each of the attribute requirements for the path takes one of these forms:"
msgstr "パスの各属性要件は、以下のいずれかの形式を取ります:"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:407
msgid "\"`ATTR`\" requires that the attribute `ATTR` be set."
msgstr "`ATTR` では、属性 `ATTR` を設定する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:409
msgid "\"`-ATTR`\" requires that the attribute `ATTR` be unset."
msgstr "`-ATTR` では、属性 `ATTR` が設定されていない必要があります。"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:412
msgid ""
"\"`ATTR=VALUE`\" requires that the attribute `ATTR` be set to the string "
"`VALUE`."
msgstr "`ATTR = VALUE` では、属性 `ATTR` を文字列 `VALUE` に設定する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:415
msgid "\"`!ATTR`\" requires that the attribute `ATTR` be unspecified."
msgstr "`!ATTR` では、属性 `ATTR` が指定されていない必要があります。"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:418
msgid ""
"Note that when matching against a tree object, attributes are still obtained "
"from working tree, not from the given tree object."
msgstr "注意: ツリーオブジェクトと照合する場合、属性は、指定されたツリーオブジェクトからではなく、作業ツリーから取得されることに注意してください。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:419
#, no-wrap
msgid "exclude"
msgstr "exclude"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:425
msgid ""
"After a path matches any non-exclude pathspec, it will be run through all "
"exclude pathspecs (magic signature: `!` or its synonym `^`). If it matches, "
"the path is ignored.  When there is no non-exclude pathspec, the exclusion "
"is applied to the result set as if invoked without any pathspec."
msgstr "パスが非除外パススペックと一致すると、すべての除外パススペック(魔法記号: `!` またはその同義語 `^`)が実行されます。一致する場合、パスは無視されます。非除外パススペックがない場合、パススペックなしで呼び出されたかのように、除外が結果セットに適用されます。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:427
#, no-wrap
msgid "[[def_parent]]parent"
msgstr "[[def_parent]]parent(親)"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:431
msgid ""
"A <<def_commit_object,commit object>> contains a (possibly empty) list of "
"the logical predecessor(s) in the line of development, i.e. its parents."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:432
#, no-wrap
msgid "[[def_pickaxe]]pickaxe"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:438
msgid ""
"The term <<def_pickaxe,pickaxe>> refers to an option to the diffcore "
"routines that help select changes that add or delete a given text string. "
"With the `--pickaxe-all` option, it can be used to view the full "
"<<def_changeset,changeset>> that introduced or removed, say, a particular "
"line of text. See linkgit:git-diff[1]."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:439
#, no-wrap
msgid "[[def_plumbing]]plumbing"
msgstr "[[def_plumbing]]plumbing(配管)"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:441
msgid "Cute name for <<def_core_git,core Git>>."
msgstr "<<def_core_git,core Git>> のキュートな呼び方。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:442
#, no-wrap
msgid "[[def_porcelain]]porcelain"
msgstr "[[def_porcelain]]porcelain(磁器)"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:447
msgid ""
"Cute name for programs and program suites depending on <<def_core_git,core "
"Git>>, presenting a high level access to core Git. Porcelains expose more of "
"a <<def_SCM,SCM>> interface than the <<def_plumbing,plumbing>>."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:448
#, no-wrap
msgid "[[def_per_worktree_ref]]per-worktree ref"
msgstr "[[def_per_worktree_ref]]per-worktree ref"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:453
msgid ""
"Refs that are per-<<def_working_tree,worktree>>, rather than global.  This "
"is presently only <<def_HEAD,HEAD>> and any refs that start with `refs/"
"bisect/`, but might later include other unusual refs."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:454
#, no-wrap
msgid "[[def_pseudoref]]pseudoref"
msgstr "[[def_pseudoref]]pseudoref"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:469
msgid ""
"Pseudorefs are a class of files under `$GIT_DIR` which behave like refs for "
"the purposes of rev-parse, but which are treated specially by git.  "
"Pseudorefs both have names that are all-caps, and always start with a line "
"consisting of a <<def_SHA1,SHA-1>> followed by whitespace.  So, HEAD is not "
"a pseudoref, because it is sometimes a symbolic ref.  They might optionally "
"contain some additional data.  `MERGE_HEAD` and `CHERRY_PICK_HEAD` are "
"examples.  Unlike <<def_per_worktree_ref,per-worktree refs>>, these files "
"cannot be symbolic refs, and never have reflogs.  They also cannot be "
"updated through the normal ref update machinery.  Instead, they are updated "
"by directly writing to the files.  However, they can be read as if they were "
"refs, so `git rev-parse MERGE_HEAD` will work."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:470
#, no-wrap
msgid "[[def_pull]]pull"
msgstr "[[def_pull]]pull"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:473
msgid ""
"Pulling a <<def_branch,branch>> means to <<def_fetch,fetch>> it and "
"<<def_merge,merge>> it.  See also linkgit:git-pull[1]."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:474
#, no-wrap
msgid "[[def_push]]push"
msgstr "[[def_push]]push"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:485
msgid ""
"Pushing a <<def_branch,branch>> means to get the branch's <<def_head_ref,"
"head ref>> from a remote <<def_repository,repository>>, find out if it is an "
"ancestor to the branch's local head ref, and in that case, putting all "
"objects, which are <<def_reachable,reachable>> from the local head ref, and "
"which are missing from the remote repository, into the remote "
"<<def_object_database,object database>>, and updating the remote head ref. "
"If the remote <<def_head,head>> is not an ancestor to the local head, the "
"push fails."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:486
#, no-wrap
msgid "[[def_reachable]]reachable"
msgstr "[[def_reachable]]reachable(到達可能)"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:495
msgid ""
"All of the ancestors of a given <<def_commit,commit>> are said to be "
"\"reachable\" from that commit. More generally, one <<def_object,object>> is "
"reachable from another if we can reach the one from the other by a "
"<<def_chain,chain>> that follows <<def_tag,tags>> to whatever they tag, "
"<<def_commit_object,commits>> to their parents or trees, and "
"<<def_tree_object,trees>> to the trees or <<def_blob_object,blobs>> that "
"they contain."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:496
#, no-wrap
msgid "[[def_rebase]]rebase"
msgstr "[[def_rebase]]rebase"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:500
msgid ""
"To reapply a series of changes from a <<def_branch,branch>> to a different "
"base, and reset the <<def_head,head>> of that branch to the result."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:501
#, no-wrap
msgid "[[def_ref]]ref"
msgstr "[[def_ref]]ref"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:509
msgid ""
"A name that begins with `refs/` (e.g. `refs/heads/master`)  that points to "
"an <<def_object_name,object name>> or another ref (the latter is called a "
"<<def_symref,symbolic ref>>).  For convenience, a ref can sometimes be "
"abbreviated when used as an argument to a Git command; see linkgit:"
"gitrevisions[7] for details.  Refs are stored in the <<def_repository,"
"repository>>."
msgstr "オブジェクト名または別のrefを指す `refs/` で始まる名前(例: `refs/heads/master`;別のrefを指すrefは <<def_symref,シンボリックref>> と呼ぶ)。便宜上、Gitコマンドの引数として使用する場合は `refs/` を省略できる場合があります。詳細については linkgit:gitrevisions[7] を参照してください。 refs は <<def_repository,repository>> に保存されます。"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:513
msgid ""
"The ref namespace is hierarchical.  Different subhierarchies are used for "
"different purposes (e.g. the `refs/heads/` hierarchy is used to represent "
"local branches)."
msgstr "ref名前空間は階層的です。さまざまなサブ階層がさまざまな目的で使用されます(たとえば、 `refs/heads/` 階層はローカルブランチを表すために使用されます)。"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:516
msgid ""
"There are a few special-purpose refs that do not begin with `refs/`.  The "
"most notable example is `HEAD`."
msgstr "`refs/` で始まらない特別な目的のrefがいくつかあります。最も注目すべき例は `HEAD` です。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:517
#, no-wrap
msgid "[[def_reflog]]reflog"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:522
msgid ""
"A reflog shows the local \"history\" of a ref.  In other words, it can tell "
"you what the 3rd last revision in _this_ repository was, and what was the "
"current state in _this_ repository, yesterday 9:14pm.  See linkgit:git-"
"reflog[1] for details."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:523
#, no-wrap
msgid "[[def_refspec]]refspec"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:527
msgid ""
"A \"refspec\" is used by <<def_fetch,fetch>> and <<def_push,push>> to "
"describe the mapping between remote <<def_ref,ref>> and local ref."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:528
#, no-wrap
msgid "[[def_remote]]remote repository"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:532
msgid ""
"A <<def_repository,repository>> which is used to track the same project but "
"resides somewhere else. To communicate with remotes, see <<def_fetch,fetch>> "
"or <<def_push,push>>."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:533
#, no-wrap
msgid "[[def_remote_tracking_branch]]remote-tracking branch"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:541
msgid ""
"A <<def_ref,ref>> that is used to follow changes from another "
"<<def_repository,repository>>. It typically looks like 'refs/remotes/foo/"
"bar' (indicating that it tracks a branch named 'bar' in a remote named "
"'foo'), and matches the right-hand-side of a configured fetch <<def_refspec,"
"refspec>>. A remote-tracking branch should not contain direct modifications "
"or have local commits made to it."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:542
#, no-wrap
msgid "[[def_repository]]repository"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:549
msgid ""
"A collection of <<def_ref,refs>> together with an <<def_object_database,"
"object database>> containing all objects which are <<def_reachable,"
"reachable>> from the refs, possibly accompanied by meta data from one or "
"more <<def_porcelain,porcelains>>. A repository can share an object database "
"with other repositories via <<def_alternate_object_database,alternates "
"mechanism>>."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:550
#, no-wrap
msgid "[[def_resolve]]resolve"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:553
msgid ""
"The action of fixing up manually what a failed automatic <<def_merge,merge>> "
"left behind."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:554
#, no-wrap
msgid "[[def_revision]]revision"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:556
msgid "Synonym for <<def_commit,commit>> (the noun)."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:557
#, no-wrap
msgid "[[def_rewind]]rewind"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:560
msgid ""
"To throw away part of the development, i.e. to assign the <<def_head,head>> "
"to an earlier <<def_revision,revision>>."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:561
#, no-wrap
msgid "[[def_SCM]]SCM"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:563
msgid "Source code management (tool)."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:564
#, no-wrap
msgid "[[def_SHA1]]SHA-1"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:567
msgid ""
"\"Secure Hash Algorithm 1\"; a cryptographic hash function.  In the context "
"of Git used as a synonym for <<def_object_name,object name>>."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:568
#, no-wrap
msgid "[[def_shallow_clone]]shallow clone"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:572
msgid ""
"Mostly a synonym to <<def_shallow_repository,shallow repository>> but the "
"phrase makes it more explicit that it was created by running `git clone --"
"depth=...` command."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:573
#, no-wrap
msgid "[[def_shallow_repository]]shallow repository"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:583
msgid ""
"A shallow <<def_repository,repository>> has an incomplete history some of "
"whose <<def_commit,commits>> have <<def_parent,parents>> cauterized away (in "
"other words, Git is told to pretend that these commits do not have the "
"parents, even though they are recorded in the <<def_commit_object,commit "
"object>>). This is sometimes useful when you are interested only in the "
"recent history of a project even though the real history recorded in the "
"upstream is much larger. A shallow repository is created by giving the `--"
"depth` option to linkgit:git-clone[1], and its history can be later deepened "
"with linkgit:git-fetch[1]."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:584
#, no-wrap
msgid "[[def_stash]]stash entry"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:587
msgid ""
"An <<def_object,object>> used to temporarily store the contents of a "
"<<def_dirty,dirty>> working directory and the index for future reuse."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:588
#, no-wrap
msgid "[[def_submodule]]submodule"
msgstr "[[def_submodule]]submodule"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:592
msgid ""
"A <<def_repository,repository>> that holds the history of a separate project "
"inside another repository (the latter of which is called <<def_superproject, "
"superproject>>)."
msgstr "とあるリポジトリの内部で、それとは別個のプロジェクトの履歴を保持する <<def_repository,リポジトリ>> (ここで、その、とあるリポジトリを <<def_superproject,スーパープロジェクト>> と呼びます)。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:593
#, no-wrap
msgid "[[def_superproject]]superproject"
msgstr "[[def_superproject]]superproject"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:598
msgid ""
"A <<def_repository,repository>> that references repositories of other "
"projects in its working tree as <<def_submodule,submodules>>.  The "
"superproject knows about the names of (but does not hold copies of) commit "
"objects of the contained submodules."
msgstr "作業ツリー内の他のプロジェクトのリポジトリを <<def_submodule,サブモジュール>> として参照する <<def_repository,リポジトリ>> 。 スーパープロジェクトは、含まれているサブモジュールのコミットオブジェクトの名前を知っています(ただし、そのコピーは保持していません)。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:599
#, no-wrap
msgid "[[def_symref]]symref"
msgstr "[[def_symref]]symref"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:606
msgid ""
"Symbolic reference: instead of containing the <<def_SHA1,SHA-1>> id itself, "
"it is of the format 'ref: refs/some/thing' and when referenced, it "
"recursively dereferences to this reference.  '<<def_HEAD,HEAD>>' is a prime "
"example of a symref. Symbolic references are manipulated with the linkgit:"
"git-symbolic-ref[1] command."
msgstr "シンボリックref(シンボリック参照): <<def_SHA1,SHA-1>> ID自体を含む代わりに「ref: refs/some/thing」の形式であり、参照されると、この参照を再帰的に逆参照します。 '<<def_HEAD,HEAD>>' はsymrefの代表的な例です。シンボリックrefは linkgit:git-symbolic-ref[1] コマンドで操作されます。"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:607
#, no-wrap
msgid "[[def_tag]]tag"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:616
msgid ""
"A <<def_ref,ref>> under `refs/tags/` namespace that points to an object of "
"an arbitrary type (typically a tag points to either a <<def_tag_object,tag>> "
"or a <<def_commit_object,commit object>>).  In contrast to a <<def_head,"
"head>>, a tag is not updated by the `commit` command. A Git tag has nothing "
"to do with a Lisp tag (which would be called an <<def_object_type,object "
"type>> in Git's context). A tag is most typically used to mark a particular "
"point in the commit ancestry <<def_chain,chain>>."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:617
#, no-wrap
msgid "[[def_tag_object]]tag object"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:622
msgid ""
"An <<def_object,object>> containing a <<def_ref,ref>> pointing to another "
"object, which can contain a message just like a <<def_commit_object,commit "
"object>>. It can also contain a (PGP)  signature, in which case it is called "
"a \"signed tag object\"."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:623
#, no-wrap
msgid "[[def_topic_branch]]topic branch"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:629
msgid ""
"A regular Git <<def_branch,branch>> that is used by a developer to identify "
"a conceptual line of development. Since branches are very easy and "
"inexpensive, it is often desirable to have several small branches that each "
"contain very well defined concepts or small incremental yet related changes."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:630
#, no-wrap
msgid "[[def_tree]]tree"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:634
msgid ""
"Either a <<def_working_tree,working tree>>, or a <<def_tree_object,tree "
"object>> together with the dependent <<def_blob_object,blob>> and tree "
"objects (i.e. a stored representation of a working tree)."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:635
#, no-wrap
msgid "[[def_tree_object]]tree object"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:639
msgid ""
"An <<def_object,object>> containing a list of file names and modes along "
"with refs to the associated blob and/or tree objects. A <<def_tree,tree>> is "
"equivalent to a <<def_directory,directory>>."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:640
#, no-wrap
msgid "[[def_tree-ish]]tree-ish (also treeish)"
msgstr "[[def_tree-ish]]tree-ish (also treeish)"

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:653
msgid ""
"A <<def_tree_object,tree object>> or an <<def_object,object>> that can be "
"recursively dereferenced to a tree object.  Dereferencing a "
"<<def_commit_object,commit object>> yields the tree object corresponding to "
"the <<def_revision,revision>>'s top <<def_directory,directory>>.  The "
"following are all tree-ishes: a <<def_commit-ish,commit-ish>>, a tree "
"object, a <<def_tag_object,tag object>> that points to a tree object, a tag "
"object that points to a tag object that points to a tree object, etc."
msgstr "ツリーっぽい何か。ツリーオブジェクトに再帰的に逆参照できる <<def_tree_object,ツリーオブジェクト>> または <<def_object,オブジェクト>> です。 <<def_commit_object,コミットオブジェクト>> を逆参照すると、その <<def_revision,リビジョン>> の最上位 <<def_directory,ディレクトリ> に対応するツリーオブジェクトが生成されます。※右記は全てツリーっぽい(tree-ish)モノです: <<def_commit-ish,コミットっぽい何か>> 、ツリーオブジェクト、ツリーオブジェクトを指す <<def_tag_object,タグオブジェクト>> 、タグオブジェクトを指すタグオブジェクト"

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:654
#, no-wrap
msgid "[[def_unmerged_index]]unmerged index"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:657
msgid ""
"An <<def_index,index>> which contains unmerged <<def_index_entry,index "
"entries>>."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:658
#, no-wrap
msgid "[[def_unreachable_object]]unreachable object"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:661
msgid ""
"An <<def_object,object>> which is not <<def_reachable,reachable>> from a "
"<<def_branch,branch>>, <<def_tag,tag>>, or any other reference."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:662
#, no-wrap
msgid "[[def_upstream_branch]]upstream branch"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:667
msgid ""
"The default <<def_branch,branch>> that is merged into the branch in question "
"(or the branch in question is rebased onto). It is configured via branch."
"<name>.remote and branch.<name>.merge. If the upstream branch of 'A' is "
"'origin/B' sometimes we say \"'A' is tracking 'origin/B'\"."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/glossary-content.txt:668
#, no-wrap
msgid "[[def_working_tree]]working tree"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/glossary-content.txt:671
msgid ""
"The tree of actual checked out files.  The working tree normally contains "
"the contents of the <<def_HEAD,HEAD>> commit's tree, plus any local changes "
"that you have made but not yet committed."
msgstr ""
