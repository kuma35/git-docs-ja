# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-10-01 00:25+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation/git-bisect.txt:2
#, no-wrap
msgid "git-bisect(1)"
msgstr ""

#. type: Title -
#: ../Documentation/git-bisect.txt:5
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:7
msgid "git-bisect - Use binary search to find the commit that introduced a bug"
msgstr ""

#. type: Title -
#: ../Documentation/git-bisect.txt:10
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:13
#, no-wrap
msgid "'git bisect' <subcommand> <options>\n"
msgstr ""

#. type: Title -
#: ../Documentation/git-bisect.txt:15
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:18
msgid ""
"The command takes various subcommands, and different options depending on "
"the subcommand:"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:31
#, no-wrap
msgid ""
" git bisect start [--term-{new,bad}=<term> --term-{old,good}=<term>]\n"
"\t\t  [--no-checkout] [--first-parent] [<bad> [<good>...]] [--] "
"[<paths>...]\n"
" git bisect (bad|new|<term-new>) [<rev>]\n"
" git bisect (good|old|<term-old>) [<rev>...]\n"
" git bisect terms [--term-good | --term-bad]\n"
" git bisect skip [(<rev>|<range>)...]\n"
" git bisect reset [<commit>]\n"
" git bisect (visualize|view)\n"
" git bisect replay <logfile>\n"
" git bisect log\n"
" git bisect run <cmd>...\n"
" git bisect help\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:40
msgid ""
"This command uses a binary search algorithm to find which commit in your "
"project's history introduced a bug. You use it by first telling it a \"bad\" "
"commit that is known to contain the bug, and a \"good\" commit that is known "
"to be before the bug was introduced. Then `git bisect` picks a commit "
"between those two endpoints and asks you whether the selected commit is "
"\"good\" or \"bad\". It continues narrowing down the range until it finds "
"the exact commit that introduced the change."
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:47
msgid ""
"In fact, `git bisect` can be used to find the commit that changed *any* "
"property of your project; e.g., the commit that fixed a bug, or the commit "
"that caused a benchmark's performance to improve. To support this more "
"general usage, the terms \"old\" and \"new\" can be used in place of "
"\"good\" and \"bad\", or you can choose your own terms. See section "
"\"Alternate terms\" below for more information."
msgstr ""

#. type: Title ~
#: ../Documentation/git-bisect.txt:49
#, no-wrap
msgid "Basic bisect commands: start, bad, good"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:54
msgid ""
"As an example, suppose you are trying to find the commit that broke a "
"feature that was known to work in version `v2.6.13-rc2` of your project. You "
"start a bisect session as follows:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-bisect.txt:59
#, no-wrap
msgid ""
"$ git bisect start\n"
"$ git bisect bad                 # Current version is bad\n"
"$ git bisect good v2.6.13-rc2    # v2.6.13-rc2 is known to be good\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:64
msgid ""
"Once you have specified at least one bad and one good commit, `git bisect` "
"selects a commit in the middle of that range of history, checks it out, and "
"outputs something similar to the following:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-bisect.txt:67
#, no-wrap
msgid "Bisecting: 675 revisions left to test after this (roughly 10 steps)\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:71
msgid ""
"You should now compile the checked-out version and test it. If that version "
"works correctly, type"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-bisect.txt:74
#, no-wrap
msgid "$ git bisect good\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:77
msgid "If that version is broken, type"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-bisect.txt:80
#, no-wrap
msgid "$ git bisect bad\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:83
msgid "Then `git bisect` will respond with something like"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-bisect.txt:86
#, no-wrap
msgid "Bisecting: 337 revisions left to test after this (roughly 9 steps)\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:91
msgid ""
"Keep repeating the process: compile the tree, test it, and depending on "
"whether it is good or bad run `git bisect good` or `git bisect bad` to ask "
"for the next commit that needs testing."
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:95
msgid ""
"Eventually there will be no more revisions left to inspect, and the command "
"will print out a description of the first bad commit. The reference "
"`refs/bisect/bad` will be left pointing at that commit."
msgstr ""

#. type: Title ~
#: ../Documentation/git-bisect.txt:98
#, no-wrap
msgid "Bisect reset"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:102
msgid ""
"After a bisect session, to clean up the bisection state and return to the "
"original HEAD, issue the following command:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-bisect.txt:105
#, no-wrap
msgid "$ git bisect reset\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:110
msgid ""
"By default, this will return your tree to the commit that was checked out "
"before `git bisect start`.  (A new `git bisect start` will also do that, as "
"it cleans up the old bisection state.)"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:113
msgid "With an optional argument, you can return to a different commit instead:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-bisect.txt:116
#, no-wrap
msgid "$ git bisect reset <commit>\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:121
msgid ""
"For example, `git bisect reset bisect/bad` will check out the first bad "
"revision, while `git bisect reset HEAD` will leave you on the current "
"bisection commit and avoid switching commits at all."
msgstr ""

#. type: Title ~
#: ../Documentation/git-bisect.txt:124
#, no-wrap
msgid "Alternate terms"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:132
msgid ""
"Sometimes you are not looking for the commit that introduced a breakage, but "
"rather for a commit that caused a change between some other \"old\" state "
"and \"new\" state. For example, you might be looking for the commit that "
"introduced a particular fix. Or you might be looking for the first commit in "
"which the source-code filenames were finally all converted to your company's "
"naming standard. Or whatever."
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:138
msgid ""
"In such cases it can be very confusing to use the terms \"good\" and \"bad\" "
"to refer to \"the state before the change\" and \"the state after the "
"change\". So instead, you can use the terms \"old\" and \"new\", "
"respectively, in place of \"good\" and \"bad\". (But note that you cannot "
"mix \"good\" and \"bad\" with \"old\" and \"new\" in a single session.)"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:145
msgid ""
"In this more general usage, you provide `git bisect` with a \"new\" commit "
"that has some property and an \"old\" commit that doesn't have that "
"property. Each time `git bisect` checks out a commit, you test if that "
"commit has the property. If it does, mark the commit as \"new\"; otherwise, "
"mark it as \"old\". When the bisection is done, `git bisect` will report "
"which commit introduced the property."
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:149
msgid ""
"To use \"old\" and \"new\" instead of \"good\" and bad, you must run `git "
"bisect start` without commits as argument and then run the following "
"commands to add the commits:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-bisect.txt:152
#, no-wrap
msgid "git bisect old [<rev>]\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:155
msgid "to indicate that a commit was before the sought change, or"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-bisect.txt:158
#, no-wrap
msgid "git bisect new [<rev>...]\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:161
msgid "to indicate that it was after."
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:163
msgid "To get a reminder of the currently used terms, use"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-bisect.txt:166
#, no-wrap
msgid "git bisect terms\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:170
msgid ""
"You can get just the old (respectively new) term with `git bisect terms "
"--term-old` or `git bisect terms --term-good`."
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:175
msgid ""
"If you would like to use your own terms instead of \"bad\"/\"good\" or "
"\"new\"/\"old\", you can choose any names you like (except existing bisect "
"subcommands like `reset`, `start`, ...) by starting the bisection using"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-bisect.txt:178
#, no-wrap
msgid "git bisect start --term-old <term-old> --term-new <term-new>\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:182
msgid ""
"For example, if you are looking for a commit that introduced a performance "
"regression, you might use"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-bisect.txt:185
#, no-wrap
msgid "git bisect start --term-old fast --term-new slow\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:188
msgid "Or if you are looking for the commit that fixed a bug, you might use"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-bisect.txt:191
#, no-wrap
msgid "git bisect start --term-new fixed --term-old broken\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:195
msgid ""
"Then, use `git bisect <term-old>` and `git bisect <term-new>` instead of "
"`git bisect good` and `git bisect bad` to mark commits."
msgstr ""

#. type: Title ~
#: ../Documentation/git-bisect.txt:197
#, no-wrap
msgid "Bisect visualize/view"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:202
msgid ""
"To see the currently remaining suspects in 'gitk', issue the following "
"command during the bisection process (the subcommand `view` can be used as "
"an alternative to `visualize`):"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-bisect.txt:205
#, no-wrap
msgid "$ git bisect visualize\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:210
msgid ""
"If the `DISPLAY` environment variable is not set, 'git log' is used "
"instead.  You can also give command-line options such as `-p` and `--stat`."
msgstr ""

#. type: delimited block -
#: ../Documentation/git-bisect.txt:213
#, no-wrap
msgid "$ git bisect visualize --stat\n"
msgstr ""

#. type: Title ~
#: ../Documentation/git-bisect.txt:216
#, no-wrap
msgid "Bisect log and bisect replay"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:220
msgid ""
"After having marked revisions as good or bad, issue the following command to "
"show what has been done so far:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-bisect.txt:223
#, no-wrap
msgid "$ git bisect log\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:229
msgid ""
"If you discover that you made a mistake in specifying the status of a "
"revision, you can save the output of this command to a file, edit it to "
"remove the incorrect entries, and then issue the following commands to "
"return to a corrected state:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-bisect.txt:233
#, no-wrap
msgid ""
"$ git bisect reset\n"
"$ git bisect replay that-file\n"
msgstr ""

#. type: Title ~
#: ../Documentation/git-bisect.txt:236
#, no-wrap
msgid "Avoiding testing a commit"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:243
msgid ""
"If, in the middle of a bisect session, you know that the suggested revision "
"is not a good one to test (e.g. it fails to build and you know that the "
"failure does not have anything to do with the bug you are chasing), you can "
"manually select a nearby commit and test that one instead."
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:245
msgid "For example:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-bisect.txt:252
#, no-wrap
msgid ""
"$ git bisect good/bad\t\t\t# previous round was good or bad.\n"
"Bisecting: 337 revisions left to test after this (roughly 9 steps)\n"
"$ git bisect visualize\t\t\t# oops, that is uninteresting.\n"
"$ git reset --hard HEAD~3\t\t# try 3 revisions before what\n"
"\t\t\t\t\t# was suggested\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:256
msgid ""
"Then compile and test the chosen revision, and afterwards mark the revision "
"as good or bad in the usual manner."
msgstr ""

#. type: Title ~
#: ../Documentation/git-bisect.txt:258
#, no-wrap
msgid "Bisect skip"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:262
msgid ""
"Instead of choosing a nearby commit by yourself, you can ask Git to do it "
"for you by issuing the command:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-bisect.txt:265
#, no-wrap
msgid "$ git bisect skip                 # Current version cannot be tested\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:270
msgid ""
"However, if you skip a commit adjacent to the one you are looking for, Git "
"will be unable to tell exactly which of those commits was the first bad one."
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:273
msgid ""
"You can also skip a range of commits, instead of just one commit, using "
"range notation. For example:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-bisect.txt:276
#, no-wrap
msgid "$ git bisect skip v2.5..v2.6\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:280
msgid ""
"This tells the bisect process that no commit after `v2.5`, up to and "
"including `v2.6`, should be tested."
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:283
msgid ""
"Note that if you also want to skip the first commit of the range you would "
"issue the command:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-bisect.txt:286
#, no-wrap
msgid "$ git bisect skip v2.5 v2.5..v2.6\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:290
msgid ""
"This tells the bisect process that the commits between `v2.5` and `v2.6` "
"(inclusive) should be skipped."
msgstr ""

#. type: Title ~
#: ../Documentation/git-bisect.txt:293
#, no-wrap
msgid "Cutting down bisection by giving more parameters to bisect start"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:298
msgid ""
"You can further cut down the number of trials, if you know what part of the "
"tree is involved in the problem you are tracking down, by specifying path "
"parameters when issuing the `bisect start` command:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-bisect.txt:301
#, no-wrap
msgid "$ git bisect start -- arch/i386 include/asm-i386\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:306
msgid ""
"If you know beforehand more than one good commit, you can narrow the bisect "
"space down by specifying all of the good commits immediately after the bad "
"commit when issuing the `bisect start` command:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-bisect.txt:311
#, no-wrap
msgid ""
"$ git bisect start v2.6.20-rc6 v2.6.20-rc4 v2.6.20-rc1 --\n"
"                   # v2.6.20-rc6 is bad\n"
"                   # v2.6.20-rc4 and v2.6.20-rc1 are good\n"
msgstr ""

#. type: Title ~
#: ../Documentation/git-bisect.txt:314
#, no-wrap
msgid "Bisect run"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:318
msgid ""
"If you have a script that can tell if the current source code is good or "
"bad, you can bisect by issuing the command:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-bisect.txt:321
#, no-wrap
msgid "$ git bisect run my_script arguments\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:327
msgid ""
"Note that the script (`my_script` in the above example) should exit with "
"code 0 if the current source code is good/old, and exit with a code between "
"1 and 127 (inclusive), except 125, if the current source code is bad/new."
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:331
msgid ""
"Any other exit code will abort the bisect process. It should be noted that a "
"program that terminates via `exit(-1)` leaves $? = 255, (see the exit(3) "
"manual page), as the value is chopped with `& 0377`."
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:340
msgid ""
"The special exit code 125 should be used when the current source code cannot "
"be tested. If the script exits with this code, the current revision will be "
"skipped (see `git bisect skip` above). 125 was chosen as the highest "
"sensible value to use for this purpose, because 126 and 127 are used by "
"POSIX shells to signal specific error status (127 is for command not found, "
"126 is for command found but not executable--these details do not matter, as "
"they are normal errors in the script, as far as `bisect run` is concerned)."
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:346
msgid ""
"You may often find that during a bisect session you want to have temporary "
"modifications (e.g. s/#define DEBUG 0/#define DEBUG 1/ in a header file, or "
"\"revision that does not have this commit needs this patch applied to work "
"around another problem this bisection is not interested in\") applied to the "
"revision being tested."
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:354
msgid ""
"To cope with such a situation, after the inner 'git bisect' finds the next "
"revision to test, the script can apply the patch before compiling, run the "
"real test, and afterwards decide if the revision (possibly with the needed "
"patch) passed the test and then rewind the tree to the pristine state.  "
"Finally the script should exit with the status of the real test to let the "
"`git bisect run` command loop determine the eventual outcome of the bisect "
"session."
msgstr ""

#. type: Title -
#: ../Documentation/git-bisect.txt:356
#, no-wrap
msgid "OPTIONS"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-bisect.txt:357
#, no-wrap
msgid "--no-checkout"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:362
msgid ""
"Do not checkout the new working tree at each iteration of the bisection "
"process. Instead just update a special reference named `BISECT_HEAD` to make "
"it point to the commit that should be tested."
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:365
msgid ""
"This option may be useful when the test you would perform in each step does "
"not require a checked out tree."
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:367
msgid "If the repository is bare, `--no-checkout` is assumed."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-bisect.txt:368
#, no-wrap
msgid "--first-parent"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:371
msgid "Follow only the first parent commit upon seeing a merge commit."
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:375
msgid ""
"In detecting regressions introduced through the merging of a branch, the "
"merge commit will be identified as introduction of the bug and its ancestors "
"will be ignored."
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:378
msgid ""
"This option is particularly useful in avoiding false positives when a merged "
"branch contained broken or non-buildable commits, but the merge itself was "
"OK."
msgstr ""

#. type: Title -
#: ../Documentation/git-bisect.txt:380
#, no-wrap
msgid "EXAMPLES"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:383
msgid "Automatically bisect a broken build between v1.2 and HEAD:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-bisect.txt:388
#, no-wrap
msgid ""
"$ git bisect start HEAD v1.2 --      # HEAD is bad, v1.2 is good\n"
"$ git bisect run make                # \"make\" builds the app\n"
"$ git bisect reset                   # quit the bisect session\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:391
msgid "Automatically bisect a test failure between origin and HEAD:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-bisect.txt:396
#, no-wrap
msgid ""
"$ git bisect start HEAD origin --    # HEAD is bad, origin is good\n"
"$ git bisect run make test           # \"make test\" builds and tests\n"
"$ git bisect reset                   # quit the bisect session\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:399 ../Documentation/git-bisect.txt:453
msgid "Automatically bisect a broken test case:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-bisect.txt:408
#, no-wrap
msgid ""
"$ cat ~/test.sh\n"
"#!/bin/sh\n"
"make || exit 125                     # this skips broken builds\n"
"~/check_test_case.sh                 # does the test case pass?\n"
"$ git bisect start HEAD HEAD~10 --   # culprit is among the last 10\n"
"$ git bisect run ~/test.sh\n"
"$ git bisect reset                   # quit the bisect session\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:414
msgid ""
"Here we use a `test.sh` custom script. In this script, if `make` fails, we "
"skip the current commit.  `check_test_case.sh` should `exit 0` if the test "
"case passes, and `exit 1` otherwise."
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:418
msgid ""
"It is safer if both `test.sh` and `check_test_case.sh` are outside the "
"repository to prevent interactions between the bisect, make and test "
"processes and the scripts."
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:420
msgid "Automatically bisect with temporary modifications (hot-fix):"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-bisect.txt:424
#, no-wrap
msgid ""
"$ cat ~/test.sh\n"
"#!/bin/sh\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-bisect.txt:437
#, no-wrap
msgid ""
"# tweak the working tree by merging the hot-fix branch\n"
"# and then attempt a build\n"
"if\tgit merge --no-commit --no-ff hot-fix &&\n"
"\tmake\n"
"then\n"
"\t# run project specific test and report its status\n"
"\t~/check_test_case.sh\n"
"\tstatus=$?\n"
"else\n"
"\t# tell the caller this is untestable\n"
"\tstatus=125\n"
"fi\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-bisect.txt:440
#, no-wrap
msgid ""
"# undo the tweak to allow clean flipping to the next commit\n"
"git reset --hard\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-bisect.txt:443
#, no-wrap
msgid ""
"# return control\n"
"exit $status\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:451
msgid ""
"This applies modifications from a hot-fix branch before each test run, "
"e.g. in case your build or test environment changed so that older revisions "
"may need a fix which newer ones have already. (Make sure the hot-fix branch "
"is based off a commit which is contained in all revisions which you are "
"bisecting, so that the merge does not pull in too much, or use `git "
"cherry-pick` instead of `git merge`.)"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-bisect.txt:458
#, no-wrap
msgid ""
"$ git bisect start HEAD HEAD~10 --   # culprit is among the last 10\n"
"$ git bisect run sh -c \"make || exit 125; ~/check_test_case.sh\"\n"
"$ git bisect reset                   # quit the bisect session\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:462
msgid ""
"This shows that you can do without a run script if you write the test on a "
"single line."
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:464
msgid "Locate a good region of the object graph in a damaged repository"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-bisect.txt:474
#, no-wrap
msgid ""
"$ git bisect start HEAD <known-good-commit> [ <boundary-commit> ... ] "
"--no-checkout\n"
"$ git bisect run sh -c '\n"
"\tGOOD=$(git for-each-ref \"--format=%(objectname)\" refs/bisect/good-*) "
"&&\n"
"\tgit rev-list --objects BISECT_HEAD --not $GOOD >tmp.$$ &&\n"
"\tgit pack-objects --stdout >/dev/null <tmp.$$\n"
"\trc=$?\n"
"\trm -f tmp.$$\n"
"\ttest $rc = 0'\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-bisect.txt:476
#, no-wrap
msgid "$ git bisect reset                   # quit the bisect session\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:481
msgid ""
"In this case, when 'git bisect run' finishes, bisect/bad will refer to a "
"commit that has at least one parent whose reachable graph is fully "
"traversable in the sense required by 'git pack objects'."
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:483
msgid "Look for a fix instead of a regression in the code"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-bisect.txt:488
#, no-wrap
msgid ""
"$ git bisect start\n"
"$ git bisect new HEAD    # current commit is marked as new\n"
"$ git bisect old HEAD~10 # the tenth commit from now is marked as old\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:491
msgid "or:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-bisect.txt:495
#, no-wrap
msgid ""
"$ git bisect start --term-old broken --term-new fixed\n"
"$ git bisect fixed\n"
"$ git bisect broken HEAD~10\n"
msgstr ""

#. type: Title ~
#: ../Documentation/git-bisect.txt:498
#, no-wrap
msgid "Getting help"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:502
msgid ""
"Use `git bisect` to get a short usage description, and `git bisect help` or "
"`git bisect -h` to get a long usage description."
msgstr ""

#. type: Title -
#: ../Documentation/git-bisect.txt:504
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:507
msgid ""
"link:git-bisect-lk2009.html[Fighting regressions with git bisect], "
"linkgit:git-blame[1]."
msgstr ""

#. type: Title -
#: ../Documentation/git-bisect.txt:509
#, no-wrap
msgid "GIT"
msgstr ""

#. type: Plain text
#: ../Documentation/git-bisect.txt:510
msgid "Part of the linkgit:git[1] suite"
msgstr ""
