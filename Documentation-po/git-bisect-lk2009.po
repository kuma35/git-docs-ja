# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 0.0\n"
"POT-Creation-Date: 2022-06-02 08:33+0900\n"
"PO-Revision-Date: 2022-06-05 09:53+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/git-bisect-lk2009.txt:2
#, no-wrap
msgid "Fighting regressions with git bisect"
msgstr "Fighting regressions with git bisect"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:5
msgid "Christian Couder <chriscool@tuxfamily.org> 2009/11/08"
msgstr "Christian Couder <chriscool@tuxfamily.org> 2009/11/08"

#. type: Title -
#: ../Documentation-sedout/git-bisect-lk2009.txt:7
#, no-wrap
msgid "Abstract"
msgstr "Abstract"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:16
msgid ""
"\"git bisect\" enables software users and developers to easily find the "
"commit that introduced a regression. We show why it is important to have "
"good tools to fight regressions. We describe how \"git bisect\" works from "
"the outside and the algorithms it uses inside. Then we explain how to take "
"advantage of \"git bisect\" to improve current practices. And we discuss how "
"\"git bisect\" could improve in the future."
msgstr "「git bisect」を使用すると、ソフトウェアユーザーと開発者はデグレ(regression)を引き起こしたコミットを簡単に見つけることができます。 デグレと戦うための優れたツールが重要である理由を示します。 「git bisect」がどのように機能するか、および内部で使用するアルゴリズムについて説明します。 それから、「git bisect」を利用して現在の慣行を改善する方法を説明します。 また、「git bisect」が将来どのように改善されるかについて議論します。"

#. type: Title -
#: ../Documentation-sedout/git-bisect-lk2009.txt:19
#, no-wrap
msgid "Introduction to \"git bisect\""
msgstr "Introduction to \"git bisect\""

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:23
msgid ""
"Git is a Distributed Version Control system (DVCS) created by Linus Torvalds "
"and maintained by Junio Hamano."
msgstr ""
"Gitは、Linus Torvaldsによって作成され、濱野 純(Junio Hamano)によって維持され"
"ている分散バージョン管理システム(DVCS;Distributed Version Control system)で"
"す。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:29
msgid ""
"In Git like in many other Version Control Systems (VCS), the different "
"states of the data that is managed by the system are called commits. And, as "
"VCS are mostly used to manage software source code, sometimes \"interesting"
"\" changes of behavior in the software are introduced in some commits."
msgstr ""
"Gitでは、他の多くのバージョン管理システム(VCS)と同様に、システムによって管理"
"されるデータのさまざまな状態をコミットと呼びます。 また、VCSは主にソフトウェ"
"アのソースコードを管理するために使用されるため、一部のコミットには、ソフト"
"ウェアの振る舞いに関して「興味ある」変更が導入されることがあります。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:36
msgid ""
"In fact people are specially interested in commits that introduce a \"bad\" "
"behavior, called a bug or a regression. They are interested in these commits "
"because a commit (hopefully) contains a very small set of source code "
"changes. And it's much easier to understand and properly fix a problem when "
"you only need to check a very small set of changes, than when you don't know "
"where look in the first place."
msgstr ""
"実際には、人々はバグやデグレ(regression)と呼ばれる「悪い」(bad)振る舞いをもた"
"らすコミットに特に興味を持っています。 コミットには(うまくすれば)ソースコード"
"の変更の非常に小さな組が含まれているため、彼らはこれらコミットに興味を持って"
"います。そして、そもそもどこを見ているのかわからないときより、非常に小さな変"
"更セットをチェックするだけでよいならば、問題を理解して適切に修正する方がはる"
"かに簡単です。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:44
msgid ""
"So to help people find commits that introduce a \"bad\" behavior, the \"git "
"bisect\" set of commands was invented. And it follows of course that in "
"\"git bisect\" parlance, commits where the \"interesting behavior\" is "
"present are called \"bad\" commits, while other commits are called \"good\" "
"commits. And a commit that introduce the behavior we are interested in is "
"called a \"first bad commit\". Note that there could be more than one "
"\"first bad commit\" in the commit space we are searching."
msgstr ""
"そこで、人々が「悪い」(bad)振る舞いをもたらすコミットを見つけるのを助けるため"
"に、「git bisect」コマンドセットが発明されました。 そしてもちろん、「git "
"bisect」の用語では、「興味深い動作」が存在するコミットは「bad」コミットと呼ば"
"れ、他のコミットは「good」コミットと呼ばれます。 そして、私たちが興味を持って"
"いる振る舞いを紹介するコミットは「最初のbadコミット」と呼ばれます。 注意: 私"
"達が探索しているコミット空間に複数の「最初のbadコミット」が存在する可能性があ"
"ることに注意してください。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:47
msgid ""
"So \"git bisect\" is designed to help find a \"first bad commit\". And to be "
"as efficient as possible, it tries to perform a binary search."
msgstr ""
"したがって、「gitbisect」は「最初のbadコミット」を見つけるのに役立つように設"
"計されています。 そして、可能な限り効率的にするために、それは二分木探索"
"(binary search)を実行しようとします。"

#. type: Title -
#: ../Documentation-sedout/git-bisect-lk2009.txt:50
#, no-wrap
msgid "Fighting regressions overview"
msgstr "Fighting regressions overview"

#. type: Title ~
#: ../Documentation-sedout/git-bisect-lk2009.txt:53
#, no-wrap
msgid "Regressions: a big problem"
msgstr "Regressions: a big problem"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:57
msgid ""
"Regressions are a big problem in the software industry. But it's difficult "
"to put some real numbers behind that claim."
msgstr ""
"デグレ(regressions)は、ソフトウェア業界では大きな問題です。 しかし、その実態"
"を知るのは困難です。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:60
msgid ""
"There are some numbers about bugs in general, like a NIST study in 2002 "
"<<1>> that said:"
msgstr ""
"2002年のNIST(訳注:アメリカ連邦標準・技術局)の調査 <<1>> のように、一般的なバ"
"グについてはいくつかの数字があります:"

#. _____________
#. _____________
#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:79
msgid ""
"Software bugs, or errors, are so prevalent and so detrimental that they cost "
"the U.S. economy an estimated $59.5 billion annually, or about 0.6 percent "
"of the gross domestic product, according to a newly released study "
"commissioned by the Department of Commerce's National Institute of Standards "
"and Technology (NIST). At the national level, over half of the costs are "
"borne by software users and the remainder by software developers/vendors.  "
"The study also found that, although all errors cannot be removed, more than "
"a third of these costs, or an estimated $22.2 billion, could be eliminated "
"by an improved testing infrastructure that enables earlier and more "
"effective identification and removal of software defects. These are the "
"savings associated with finding an increased percentage (but not 100 "
"percent) of errors closer to the development stages in which they are "
"introduced. Currently, over half of all errors are not found until "
"\"downstream\" in the development process or during post-sale software use."
msgstr ""
"新たに発表された商務省国立標準技術研究所(NIST)委託の調査によると、ソフトウェ"
"アのバグまたはエラーは非常に蔓延しており、非常に有害であるため、米国経済に年"
"間推定595億ドル、つまり国内総生産の約0.6%のコストがかかっています。 米国全土"
"レベルでは、コストの半分以上はソフトウェアユーザーが負担し、残りはソフトウェ"
"ア 開発者/ベンダー が負担します。この調査では、すべてのエラーを削除することは"
"できませんが、ソフトウェアの欠陥をより早く、より効果的に特定して削除できるよ"
"うにするテストインフラストラクチャを改善することで、これらのコストの3分の1以"
"上、つまり推定222億ドルを削減できることもわかりました。これらは、エラーが発生"
"する開発段階に近いエラーの割合の増加(しかし、100%ではない)を見つけることに関"
"連する節約です。現在、すべてのエラーの半分以上は、開発プロセスの「ダウンスト"
"リーム」または販売後のソフトウェアの使用中まで見つかりません。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:81
msgid "And then:"
msgstr "そして"

#. _____________
#. _____________
#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:89
msgid ""
"Software developers already spend approximately 80 percent of development "
"costs on identifying and correcting defects, and yet few products of any "
"type other than software are shipped with such high levels of errors."
msgstr ""
"ソフトウェア開発者はすでに開発コストの約80%を欠陥の特定と修正に費やしているも"
"のの、ソフトウェア以外のタイプの製品には、このような高レベルのエラーが含まれ"
"ているものはほとんどありません。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:91
msgid "Eventually the conclusion started with:"
msgstr "つまり結論としては:"

#. _____________
#. _____________
#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:97
msgid ""
"The path to higher software quality is significantly improved software "
"testing."
msgstr ""
"より高いソフトウェア品質への道筋は、大幅に改善されたソフトウェアテストです。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:100
msgid ""
"There are other estimates saying that 80% of the cost related to software is "
"about maintenance <<2>>."
msgstr ""
"ソフトウェアに関連するコストの80%はメンテナンスに関するものであるという見積も"
"りもあります(<<2>>)。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:102
msgid "Though, according to Wikipedia <<3>>:"
msgstr "しかしながら、ウィキペディア(<<3>>)によると:"

#. _____________
#. _____________
#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:112
msgid ""
"A common perception of maintenance is that it is merely fixing bugs. "
"However, studies and surveys over the years have indicated that the "
"majority, over 80%, of the maintenance effort is used for non-corrective "
"actions (Pigosky 1997). This perception is perpetuated by users submitting "
"problem reports that in reality are functionality enhancements to the system."
msgstr ""
"メンテナンスに対する一般的な認識は、単にバグを修正しているだけ、というもので"
"す。しかし、長年にわたる調査と調査によると、保守作業の80%以上は、非修正アク"
"ションに使用されています(Pigosky1997)。 このような認識は、実際にはシステムの"
"機能拡張である問題レポートをユーザーが提出することによって広まっています。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:116
msgid ""
"But we can guess that improving on existing software is very costly because "
"you have to watch out for regressions. At least this would make the above "
"studies consistent among themselves."
msgstr ""
"しかし、デグレに注意する必要があるため、既存のソフトウェアの改善には非常にコ"
"ストがかかると推測できます。 少なくとも、これは上記の研究結果と整合していま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:124
msgid ""
"Of course some kind of software is developed, then used during some time "
"without being improved on much, and then finally thrown away. In this case, "
"of course, regressions may not be a big problem. But on the other hand, "
"there is a lot of big software that is continually developed and maintained "
"during years or even tens of years by a lot of people. And as there are "
"often many people who depend (sometimes critically) on such software, "
"regressions are a really big problem."
msgstr "もちろん、ある種のソフトウェアが開発され、それからしばらくの間、あまり改善されることなく使用され、そして最終的に捨てられます。 もちろん、この場合、デグレは大きな問題ではないかもしれません。 しかしその一方で、多くの人々によって何年も、あるいは何十年もの間継続的に開発され維持されている大きなソフトウェアがたくさんあります。 そして、そのようなソフトウェアに(時には深刻に)依存する人がしばしばいるので、デグレは本当に大きな問題です。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:131
msgid ""
"One such software is the Linux kernel. And if we look at the Linux kernel, "
"we can see that a lot of time and effort is spent to fight regressions. The "
"release cycle start with a 2 weeks long merge window. Then the first release "
"candidate (rc) version is tagged. And after that about 7 or 8 more rc "
"versions will appear with around one week between each of them, before the "
"final release."
msgstr "そのようなソフトウェアの1つがLinuxカーネルです。 Linuxカーネルを見ると、デグレと戦うために多くの時間と労力が費やされていることがわかります。 リリースサイクルは、2週間のマージウィンドウから始まります。 次に、最初のリリース候補(rc)バージョンにタグが付けられます。 その後、最終リリースの前に、さらに約7または8個のrcバージョンが表示され、それぞれの間に約1週間かかります。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:137
msgid ""
"The time between the first rc release and the final release is supposed to "
"be used to test rc versions and fight bugs and especially regressions. And "
"this time is more than 80% of the release cycle time. But this is not the "
"end of the fight yet, as of course it continues after the release."
msgstr "最初のrcリリースから最終リリースまでの時間は、rcバージョンをテストし、バグ、特にデグレと戦うために使用されることになっています。 そして、この時間はリリースサイクル時間の80%以上です。 しかし、これはまだ戦いの終わりではなく、もちろん、リリース後も続くのです。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:140
msgid ""
"And then this is what Ingo Molnar (a well known Linux kernel developer) says "
"about his use of git bisect:"
msgstr "そして、Ingo Molnar(有名なLinuxカーネル開発者)は git bisect の使用についてこう言っています:"

#. _____________
#. _____________
#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:148
msgid ""
"I most actively use it during the merge window (when a lot of trees get "
"merged upstream and when the influx of bugs is the highest) - and yes, there "
"have been cases that i used it multiple times a day. My average is roughly "
"once a day."
msgstr "私はマージウィンドウで最も積極的に使用します(多くのツリーが上流でマージされ、バグの流入が最も多い場合)。ええ、1日に複数回使用する場合があります。 私の平均はおおよそ1日1回です。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:153
msgid ""
"So regressions are fought all the time by developers, and indeed it is well "
"known that bugs should be fixed as soon as possible, so as soon as they are "
"found. That's why it is interesting to have good tools for this purpose."
msgstr "つまり、開発者は常にデグレと戦っています。実際、バグが見つかったらすぐに修正する必要があることはよく知られています。 そのため、この目的のための優れたツールがあるのは興味深いことです。"

#. type: Title ~
#: ../Documentation-sedout/git-bisect-lk2009.txt:155
#, no-wrap
msgid "Other tools to fight regressions"
msgstr "Other tools to fight regressions"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:160
msgid ""
"So what are the tools used to fight regressions? They are nearly the same as "
"those used to fight regular bugs. The only specific tools are test suites "
"and tools similar as \"git bisect\"."
msgstr "では、デグレと戦うために使用されるツールは何ですか？ それらは、通常のバグと戦うために使用されるものとほぼ同じです。 唯一の特定のツールは、テストスイートと「git bisect」に似たツールです。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:166
msgid ""
"Test suites are very nice. But when they are used alone, they are supposed "
"to be used so that all the tests are checked after each commit. This means "
"that they are not very efficient, because many tests are run for no "
"interesting result, and they suffer from combinatorial explosion."
msgstr "テストスイートはとても素晴らしいものです。しかし、テストスイートを単独で使用する場合、コミットごとにすべてのテストをチェックするように使用することが前提となっています。つまり、テストスイートはあまり効率的ではないということです。なぜなら、多くのテストが何の面白みもない結果を得るために実行され、組み合わせの爆発に悩まされるからです。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:171
msgid ""
"In fact the problem is that big software often has many different "
"configuration options and that each test case should pass for each "
"configuration after each commit. So if you have for each release: N "
"configurations, M commits and T test cases, you should perform:"
msgstr "実際問題として、大きなソフトウェアには多くの異なる構成オプションがあり、各コミット後に各テストケースが各構成に合格する必要があることです。 したがって、リリースごとに N個の構成、M個のコミット、T個のテストケース がある場合は、あなたは以下のように行うべきです:"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:174
#, no-wrap
msgid "N * M * T tests\n"
msgstr "N * M * T tests\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:177
msgid "where N, M and T are all growing with the size your software."
msgstr ""
"ここで、NとMとTはすべて、あなたのソフトウェアのサイズとともに成長します。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:179
msgid "So very soon it will not be possible to completely test everything."
msgstr "そのため、すぐに全てを完全にテストすることはできなくなります。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:186
msgid ""
"And if some bugs slip through your test suite, then you can add a test to "
"your test suite. But if you want to use your new improved test suite to find "
"where the bug slipped in, then you will either have to emulate a bisection "
"process or you will perhaps bluntly test each commit backward starting from "
"the \"bad\" commit you have which may be very wasteful."
msgstr "また、いくつかのバグがあなたのテストスイートをすり抜けた場合は、テストスイートにテストを追加できます。 しかし、新しく改善されたテストスイートを使用してバグが発生した場所を見つけたい場合は、bisectプロセスをエミュレートするか、「bad」コミットから始めて、各コミットを逆方向に愚直ににテストする必要があります。すげー無駄です。"

#. type: Title -
#: ../Documentation-sedout/git-bisect-lk2009.txt:188
#, no-wrap
msgid "\"git bisect\" overview"
msgstr "\"git bisect\" overview"

#. type: Title ~
#: ../Documentation-sedout/git-bisect-lk2009.txt:191
#, no-wrap
msgid "Starting a bisection"
msgstr "Starting a bisection"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:198
msgid ""
"The first \"git bisect\" subcommand to use is \"git bisect start\" to start "
"the search. Then bounds must be set to limit the commit space. This is done "
"usually by giving one \"bad\" and at least one \"good\" commit. They can be "
"passed in the initial call to \"git bisect start\" like this:"
msgstr "使用する最初の「git bisect」サブコマンドは、探索を開始するための「git bisect start」です。 次に、コミット空間を制限するために境界を設定する必要があります。 これは通常、1つの「bad」コミットと、少なくとも1つの「good」コミットを与えることによって行われます。 これらは、以下のように「git bisect start」への最初の呼び出しで渡すことができます:"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:201
#, no-wrap
msgid "$ git bisect start [BAD [GOOD...]]\n"
msgstr "$ git bisect start [BAD [GOOD...]]\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:204
msgid "or they can be set using:"
msgstr "または、以下を使用して設定できます:"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:207
#, no-wrap
msgid "$ git bisect bad [COMMIT]\n"
msgstr "$ git bisect bad [COMMIT]\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:210
msgid "and:"
msgstr "かつ"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:213
#, no-wrap
msgid "$ git bisect good [COMMIT...]\n"
msgstr "$ git bisect good [COMMIT...]\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:217
msgid ""
"where BAD, GOOD and COMMIT are all names that can be resolved to a commit."
msgstr "ここで、BAD と GOOD と COMMIT はすべて、コミットに解決できる名前です。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:220
msgid ""
"Then \"git bisect\" will checkout a commit of its choosing and ask the user "
"to test it, like this:"
msgstr "次に、「git bisect」は選択したコミットをチェックアウトし、以下のようにユーザーにテストを依頼します:"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:225
#, no-wrap
msgid ""
"$ git bisect start v2.6.27 v2.6.25\n"
"Bisecting: 10928 revisions left to test after this (roughly 14 steps)\n"
"[2ec65f8b89ea003c27ff7723525a2ee335a2b393] x86: clean up using max_low_pfn on 32-bit\n"
msgstr ""
"$ git bisect start v2.6.27 v2.6.25\n"
"Bisecting: 10928 revisions left to test after this (roughly 14 steps)\n"
"[2ec65f8b89ea003c27ff7723525a2ee335a2b393] x86: clean up using max_low_pfn on 32-bit\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:233
msgid ""
"Note that the example that we will use is really a toy example, we will be "
"looking for the first commit that has a version like \"2.6.26-something\", "
"that is the commit that has a \"SUBLEVEL = 26\" line in the top level "
"Makefile. This is a toy example because there are better ways to find this "
"commit with Git than using \"git bisect\" (for example \"git blame\" or "
"\"git log -S<string>\")."
msgstr "注意: 使用する例は実際には単純化モデル(toy example)であることに注意してください。「2.6.26-something」のようなバージョンを持つ最初のコミット、つまりトップレベルのMakefileに「SUBLEVEL = 26」行が含まれるコミットを探します。 「git bisect」を使用するよりも、Gitでこのコミットを見つけるためのより良い方法(たとえば、 `git blame` や `git log -S<string>` )があるため、これは単純化モデル(toy example)です。"

#. type: Title ~
#: ../Documentation-sedout/git-bisect-lk2009.txt:235
#, no-wrap
msgid "Driving a bisection manually"
msgstr "Driving a bisection manually"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:240
msgid ""
"At this point there are basically 2 ways to drive the search. It can be "
"driven manually by the user or it can be driven automatically by a script or "
"a command."
msgstr "この時点では、探索を実行する方法は基本的には2つです。 ユーザーが手動で駆動するか、あるいは、スクリプトまたはコマンドで自動的に駆動することができます。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:245
msgid ""
"If the user is driving it, then at each step of the search, the user will "
"have to test the current commit and say if it is \"good\" or \"bad\" using "
"the \"git bisect good\" or \"git bisect bad\" commands respectively that "
"have been described above. For example:"
msgstr "ユーザーが駆動している場合、探索の各ステップで、ユーザーは現在のコミットをテストし、 `git bisect good` または `git bisect bad` コマンドを使用して「good」か「bad」かを言う必要があります。それぞれ上記で説明されています。 例えば:"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:250
#, no-wrap
msgid ""
"$ git bisect bad\n"
"Bisecting: 5480 revisions left to test after this (roughly 13 steps)\n"
"[66c0b394f08fd89236515c1c84485ea712a157be] KVM: kill file->f_count abuse in kvm\n"
msgstr ""
"$ git bisect bad\n"
"Bisecting: 5480 revisions left to test after this (roughly 13 steps)\n"
"[66c0b394f08fd89236515c1c84485ea712a157be] KVM: kill file->f_count abuse in kvm\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:254
msgid ""
"And after a few more steps like that, \"git bisect\" will eventually find a "
"first bad commit:"
msgstr "そして、このようないくつかのステップの後、 `git bisect` は最終的に最初のbadコミットを見つけます:"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:261
#, no-wrap
msgid ""
"$ git bisect bad\n"
"2ddcca36c8bcfa251724fe342c8327451988be0d is the first bad commit\n"
"commit 2ddcca36c8bcfa251724fe342c8327451988be0d\n"
"Author: Linus Torvalds <torvalds@linux-foundation.org>\n"
"Date:   Sat May 3 11:59:44 2008 -0700\n"
msgstr ""
"$ git bisect bad\n"
"2ddcca36c8bcfa251724fe342c8327451988be0d is the first bad commit\n"
"commit 2ddcca36c8bcfa251724fe342c8327451988be0d\n"
"Author: Linus Torvalds <torvalds@linux-foundation.org>\n"
"Date:   Sat May 3 11:59:44 2008 -0700\n"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:263
#: ../Documentation-sedout/git-bisect-lk2009.txt:277
#: ../Documentation-sedout/git-bisect-lk2009.txt:337
#, no-wrap
msgid "    Linux 2.6.26-rc1\n"
msgstr "    Linux 2.6.26-rc1\n"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:265
#, no-wrap
msgid ":100644 100644 5cf82581... 4492984e... M      Makefile\n"
msgstr ":100644 100644 5cf82581... 4492984e... M      Makefile\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:269
msgid ""
"At this point we can see what the commit does, check it out (if it's not "
"already checked out) or tinker with it, for example:"
msgstr "この時点で、コミットが何をするかを確認したり、チェックアウトしたり(まだチェックアウトされていない場合)、それをいじくり回したりできます。例えば以下のように:"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:275
#, no-wrap
msgid ""
"$ git show HEAD\n"
"commit 2ddcca36c8bcfa251724fe342c8327451988be0d\n"
"Author: Linus Torvalds <torvalds@linux-foundation.org>\n"
"Date:   Sat May 3 11:59:44 2008 -0700\n"
msgstr ""
"$ git show HEAD\n"
"commit 2ddcca36c8bcfa251724fe342c8327451988be0d\n"
"Author: Linus Torvalds <torvalds@linux-foundation.org>\n"
"Date:   Sat May 3 11:59:44 2008 -0700\n"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:290
#, no-wrap
msgid ""
"diff --git a/Makefile b/Makefile\n"
"index 5cf8258..4492984 100644\n"
"--- a/Makefile\n"
"+++ b/Makefile\n"
"@@ -1,7 +1,7 @@\n"
" VERSION = 2\n"
" PATCHLEVEL = 6\n"
"-SUBLEVEL = 25\n"
"-EXTRAVERSION =\n"
"+SUBLEVEL = 26\n"
"+EXTRAVERSION = -rc1\n"
" NAME = Funky Weasel is Jiggy wit it\n"
msgstr ""
"diff --git a/Makefile b/Makefile\n"
"index 5cf8258..4492984 100644\n"
"--- a/Makefile\n"
"+++ b/Makefile\n"
"@@ -1,7 +1,7 @@\n"
" VERSION = 2\n"
" PATCHLEVEL = 6\n"
"-SUBLEVEL = 25\n"
"-EXTRAVERSION =\n"
"+SUBLEVEL = 26\n"
"+EXTRAVERSION = -rc1\n"
" NAME = Funky Weasel is Jiggy wit it\n"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:292
#, no-wrap
msgid " # *DOCUMENTATION*\n"
msgstr " # *DOCUMENTATION*\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:296
msgid ""
"And when we are finished we can use \"git bisect reset\" to go back to the "
"branch we were in before we started bisecting:"
msgstr "終了したら、「git bisect reset」を使用して、bisectを開始する前のブランチに戻ることができます:"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:302
#, no-wrap
msgid ""
"$ git bisect reset\n"
"Checking out files: 100% (21549/21549), done.\n"
"Previous HEAD position was 2ddcca3... Linux 2.6.26-rc1\n"
"Switched to branch 'master'\n"
msgstr ""
"$ git bisect reset\n"
"Checking out files: 100% (21549/21549), done.\n"
"Previous HEAD position was 2ddcca3... Linux 2.6.26-rc1\n"
"Switched to branch 'master'\n"

#. type: Title ~
#: ../Documentation-sedout/git-bisect-lk2009.txt:305
#, no-wrap
msgid "Driving a bisection automatically"
msgstr "Driving a bisection automatically"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:311
msgid ""
"The other way to drive the bisection process is to tell \"git bisect\" to "
"launch a script or command at each bisection step to know if the current "
"commit is \"good\" or \"bad\". To do that, we use the \"git bisect run\" "
"command. For example:"
msgstr "bisectプロセスを駆動するもう1つの方法は、「git bisect」に、各bisectステップにてスクリプトまたはコマンドを起動して、現在のコミットが「good」か「bad」かを知るように指示することです。 これを行うには、「git bisect run」コマンドを使用します。 例えば:"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:335
#, no-wrap
msgid ""
"$ git bisect start v2.6.27 v2.6.25\n"
"Bisecting: 10928 revisions left to test after this (roughly 14 steps)\n"
"[2ec65f8b89ea003c27ff7723525a2ee335a2b393] x86: clean up using max_low_pfn on 32-bit\n"
"$\n"
"$ git bisect run grep '^SUBLEVEL = 25' Makefile\n"
"running grep ^SUBLEVEL = 25 Makefile\n"
"Bisecting: 5480 revisions left to test after this (roughly 13 steps)\n"
"[66c0b394f08fd89236515c1c84485ea712a157be] KVM: kill file->f_count abuse in kvm\n"
"running grep ^SUBLEVEL = 25 Makefile\n"
"SUBLEVEL = 25\n"
"Bisecting: 2740 revisions left to test after this (roughly 12 steps)\n"
"[671294719628f1671faefd4882764886f8ad08cb] V4L/DVB(7879): Adding cx18 Support for mxl5005s\n"
"...\n"
"...\n"
"running grep ^SUBLEVEL = 25 Makefile\n"
"Bisecting: 0 revisions left to test after this (roughly 0 steps)\n"
"[2ddcca36c8bcfa251724fe342c8327451988be0d] Linux 2.6.26-rc1\n"
"running grep ^SUBLEVEL = 25 Makefile\n"
"2ddcca36c8bcfa251724fe342c8327451988be0d is the first bad commit\n"
"commit 2ddcca36c8bcfa251724fe342c8327451988be0d\n"
"Author: Linus Torvalds <torvalds@linux-foundation.org>\n"
"Date:   Sat May 3 11:59:44 2008 -0700\n"
msgstr ""
"$ git bisect start v2.6.27 v2.6.25\n"
"Bisecting: 10928 revisions left to test after this (roughly 14 steps)\n"
"[2ec65f8b89ea003c27ff7723525a2ee335a2b393] x86: clean up using max_low_pfn on 32-bit\n"
"$\n"
"$ git bisect run grep '^SUBLEVEL = 25' Makefile\n"
"running grep ^SUBLEVEL = 25 Makefile\n"
"Bisecting: 5480 revisions left to test after this (roughly 13 steps)\n"
"[66c0b394f08fd89236515c1c84485ea712a157be] KVM: kill file->f_count abuse in kvm\n"
"running grep ^SUBLEVEL = 25 Makefile\n"
"SUBLEVEL = 25\n"
"Bisecting: 2740 revisions left to test after this (roughly 12 steps)\n"
"[671294719628f1671faefd4882764886f8ad08cb] V4L/DVB(7879): Adding cx18 Support for mxl5005s\n"
"...\n"
"...\n"
"running grep ^SUBLEVEL = 25 Makefile\n"
"Bisecting: 0 revisions left to test after this (roughly 0 steps)\n"
"[2ddcca36c8bcfa251724fe342c8327451988be0d] Linux 2.6.26-rc1\n"
"running grep ^SUBLEVEL = 25 Makefile\n"
"2ddcca36c8bcfa251724fe342c8327451988be0d is the first bad commit\n"
"commit 2ddcca36c8bcfa251724fe342c8327451988be0d\n"
"Author: Linus Torvalds <torvalds@linux-foundation.org>\n"
"Date:   Sat May 3 11:59:44 2008 -0700\n"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:340
#, no-wrap
msgid ""
":100644 100644 5cf82581... 4492984e... M      Makefile\n"
"bisect run success\n"
msgstr ""
":100644 100644 5cf82581... 4492984e... M      Makefile\n"
"bisect run success\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:349
msgid ""
"In this example, we passed \"grep '^SUBLEVEL = 25' Makefile\" as parameter "
"to \"git bisect run\". This means that at each step, the grep command we "
"passed will be launched. And if it exits with code 0 (that means success) "
"then git bisect will mark the current state as \"good\". If it exits with "
"code 1 (or any code between 1 and 127 included, except the special code "
"125), then the current state will be marked as \"bad\"."
msgstr "この例では、「git bisect run」のパラメーターとして `grep '^SUBLEVEL = 25' Makefile`を渡しました。 これは、各ステップで、渡したgrepコマンドが起動されることを意味します。 そして、それがコード0で終了する場合(つまり成功を意味します)、 git bisectは現在の状態を「good」としてマークします。 コード1(または特別なコード125を除く1から127までのコードが含まれている)で終了した場合、現在の状態は「bad」としてマークされます。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:354
msgid ""
"Exit code between 128 and 255 are special to \"git bisect run\". They make "
"it stop immediately the bisection process. This is useful for example if the "
"command passed takes too long to complete, because you can kill it with a "
"signal and it will stop the bisection process."
msgstr "128〜255の終了コードは、「git bisect run」に固有のものです。 これらはbisectプロセスを即座に停止(stop)させます。 これは、渡されたコマンドが完了するまでに時間がかかりすぎる場合などに有効で、シグナルでkillすればbisectプロセスを停止させることができるからです。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:357
msgid ""
"It can also be useful in scripts passed to \"git bisect run\" to \"exit "
"255\" if some very abnormal situation is detected."
msgstr "また、非常に異常な状況が検出された場合に、「git bisect run」から「exit 255」に渡されるスクリプトでも役立ちます。"

#. type: Title ~
#: ../Documentation-sedout/git-bisect-lk2009.txt:359
#, no-wrap
msgid "Avoiding untestable commits"
msgstr "テスト不可能なコミットの回避"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:366
msgid ""
"Sometimes it happens that the current state cannot be tested, for example if "
"it does not compile because there was a bug preventing it at that time. This "
"is what the special exit code 125 is for. It tells \"git bisect run\" that "
"the current commit should be marked as untestable and that another one "
"should be chosen and checked out."
msgstr "時々、現在の状態をテストできないことがあります。たとえば、その時点でコンパイルを妨げるバグがあったためにコンパイルされない場合です。 これが、特別な終了コード125の目的です。 「git bisect run」に、現在のコミットをテスト不可としてマークし、別のコミットを選択してチェックアウトする必要があることを通知します。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:370
msgid ""
"If the bisection process is driven manually, you can use \"git bisect skip\" "
"to do the same thing. (In fact the special exit code 125 makes \"git bisect "
"run\" use \"git bisect skip\" in the background.)"
msgstr "bisectプロセスを手動で実行する場合は、「git bisect skip」を使用して同じことを行うことができます。 (実際、特別な終了コード125により、「git bisect run」はバックグラウンドで「git bisect skip」を使用します。)"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:375
msgid ""
"Or if you want more control, you can inspect the current state using for "
"example \"git bisect visualize\". It will launch gitk (or \"git log\" if the "
"`DISPLAY` environment variable is not set) to help you find a better "
"bisection point."
msgstr "または、より詳細な制御が必要な場合は、たとえば「git bisect visualize」を使用して現在の状態を調べることができます。 より適切な二等分点を見つけるのに役立つgitk(または `DISPLAY` 環境変数が設定されていない場合は「git log」)を起動します。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:380
msgid ""
"Either way, if you have a string of untestable commits, it might happen that "
"the regression you are looking for has been introduced by one of these "
"untestable commits. In this case it's not possible to tell for sure which "
"commit introduced the regression."
msgstr "いずれにせよ、一連のテスト不可能なコミットがある場合、探しているデグレが、これらのテスト不可能なコミットの1つによって導入された可能性があります。 この場合、どのコミットがデグレを導入したかを確実に知ることはできません。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:383
msgid ""
"So if you used \"git bisect skip\" (or the run script exited with special "
"code 125) you could get a result like this:"
msgstr "したがって、「git bisect skip」(または実行スクリプトが特別なコード125で終了)を使用した場合、以下のような結果が得られる可能性があります:"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:392
#, no-wrap
msgid ""
"There are only 'skip'ped commits left to test.\n"
"The first bad commit could be any of:\n"
"15722f2fa328eaba97022898a305ffc8172db6b1\n"
"78e86cf3e850bd755bb71831f42e200626fbd1e0\n"
"e15b73ad3db9b48d7d1ade32f8cd23a751fe0ace\n"
"070eab2303024706f2924822bfec8b9847e4ac1b\n"
"We cannot bisect more!\n"
msgstr ""
"There are only 'skip'ped commits left to test.\n"
"The first bad commit could be any of:\n"
"15722f2fa328eaba97022898a305ffc8172db6b1\n"
"78e86cf3e850bd755bb71831f42e200626fbd1e0\n"
"e15b73ad3db9b48d7d1ade32f8cd23a751fe0ace\n"
"070eab2303024706f2924822bfec8b9847e4ac1b\n"
"We cannot bisect more!\n"

#. type: Title ~
#: ../Documentation-sedout/git-bisect-lk2009.txt:395
#, no-wrap
msgid "Saving a log and replaying it"
msgstr "Saving a log and replaying it"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:399
msgid ""
"If you want to show other people your bisection process, you can get a log "
"using for example:"
msgstr "他の人にあなたのbisectプロセスを見せたい場合は、例えば以下を使用してログを取得できます:"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:402
#, no-wrap
msgid "$ git bisect log > bisect_log.txt\n"
msgstr "$ git bisect log > bisect_log.txt\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:405
msgid "And it is possible to replay it using:"
msgstr "そして、これを使用して以下のようにリプレイすることが可能です:"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:408
#, no-wrap
msgid "$ git bisect replay bisect_log.txt\n"
msgstr "$ git bisect replay bisect_log.txt\n"

#. type: Title -
#: ../Documentation-sedout/git-bisect-lk2009.txt:412
#, no-wrap
msgid "\"git bisect\" details"
msgstr "\"git bisect\" details"

#. type: Title ~
#: ../Documentation-sedout/git-bisect-lk2009.txt:415
#, no-wrap
msgid "Bisection algorithm"
msgstr "Bisection algorithm"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:421
msgid ""
"As the Git commits form a directed acyclic graph (DAG), finding the best "
"bisection commit to test at each step is not so simple. Anyway Linus found "
"and implemented a \"truly stupid\" algorithm, later improved by Junio "
"Hamano, that works quite well."
msgstr "Gitコミットは有向非巡回グラフ(DAG)を形成するため、各ステップでテストするのに最適な二等分コミットを見つけることはそれほど簡単ではありません。 とにかく、Linusは、後に濱野 純(Junio Hamano)によって改良された「本当にばかげた」(truly stupid)アルゴリズムを見つけて実装しました。これは非常にうまく機能します。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:424
msgid ""
"So the algorithm used by \"git bisect\" to find the best bisection commit "
"when there are no skipped commits is the following:"
msgstr "スキップされたコミットがない場合に最適な二等分コミットを見つけるために「git bisect」によって使用されるアルゴリズムは以下のとおり:"

#. 1) keep only the commits that:
#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:427
msgid "keep only the commits that:"
msgstr "以下のコミットのみを保持します:"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:429
msgid ""
"are ancestor of the \"bad\" commit (including the \"bad\" commit itself),"
msgstr "「bad」コミットの祖先(「bad」コミット自体を含む)"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:431
msgid "are not ancestor of a \"good\" commit (excluding the \"good\" commits)."
msgstr "「good」コミットの祖先では無い(「good」コミット自体を除く)"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:433
msgid "This means that we get rid of the uninteresting commits in the DAG."
msgstr "これは、DAGで興味のないコミット(uninteresting commits)を取り除くことを意味します。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:435
msgid "For example if we start with a graph like this:"
msgstr "たとえば、以下のようなグラフから始める場合:"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:444
#, no-wrap
msgid ""
"G-Y-G-W-W-W-X-X-X-X\n"
"\t   \\ /\n"
"\t    W-W-B\n"
"\t   /\n"
"Y---G-W---W\n"
" \\ /   \\\n"
"Y-Y     X-X-X-X\n"
msgstr ""
"G-Y-G-W-W-W-X-X-X-X\n"
"\t   \\ /\n"
"\t    W-W-B\n"
"\t   /\n"
"Y---G-W---W\n"
" \\ /   \\\n"
"Y-Y     X-X-X-X\n"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:446
#, no-wrap
msgid "-> time goes this way ->\n"
msgstr "-> time goes this way ->\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:451
msgid ""
"where B is the \"bad\" commit, \"G\" are \"good\" commits and W, X, and Y "
"are other commits, we will get the following graph after this first step:"
msgstr "ここで、Bは「bad」コミットで、「G」は「good」コミットで、WとXとYはその他のコミットです。この最初のステップ後、私達は以下のグラフを得ます:"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:458
#, no-wrap
msgid ""
"W-W-W\n"
"     \\\n"
"      W-W-B\n"
"     /\n"
"W---W\n"
msgstr ""
"W-W-W\n"
"     \\\n"
"      W-W-B\n"
"     /\n"
"W---W\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:463
msgid ""
"So only the W and B commits will be kept. Because commits X and Y will have "
"been removed by rules a) and b) respectively, and because commits G are "
"removed by rule b) too."
msgstr "WコミットとBコミットのみが保持されます。 コミットXとYはそれぞれ ルール a）と ルール b）によって削除され、コミットGも ルール b）によって削除されるためです。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:466
msgid ""
"Note for Git users, that it is equivalent as keeping only the commit given "
"by:"
msgstr "注意: Gitユーザーの場合、以下のコマンドによって与えられたコミットのみを保持することと同等であることに注意してください:"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:469
#, no-wrap
msgid "git rev-list BAD --not GOOD1 GOOD2...\n"
msgstr "git rev-list BAD --not GOOD1 GOOD2...\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:474
msgid ""
"Also note that we don't require the commits that are kept to be descendants "
"of a \"good\" commit. So in the following example, commits W and Z will be "
"kept:"
msgstr "また、保持するコミットは「good」コミットの子孫である必要はないことに注意しましょう。つまり、以下の例では、コミット W と Z が保持されます。"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:479
#, no-wrap
msgid ""
"G-W-W-W-B\n"
"   /\n"
"Z-Z\n"
msgstr ""
"G-W-W-W-B\n"
"   /\n"
"Z-Z\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:483
msgid ""
"starting from the \"good\" ends of the graph, associate to each commit the "
"number of ancestors it has plus one"
msgstr "グラフの「good」端から始めて、各コミットに、それが持っている祖先の数に1を加えた数を関連付けます"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:486
msgid ""
"For example with the following graph where H is the \"bad\" commit and A and "
"D are some parents of some \"good\" commits:"
msgstr "たとえば、以下のグラフでは、Hは「bad」コミットであり、AとDはいくつかの「good」コミットの親です:"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:493
#, no-wrap
msgid ""
"A-B-C\n"
"     \\\n"
"      F-G-H\n"
"     /\n"
"D---E\n"
msgstr ""
"A-B-C\n"
"     \\\n"
"      F-G-H\n"
"     /\n"
"D---E\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:496
msgid "this will give:"
msgstr "これには以下のように数が与えられます:"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:504
#, no-wrap
msgid ""
"1 2 3\n"
"A-B-C\n"
"     \\6 7 8\n"
"      F-G-H\n"
"1   2/\n"
"D---E\n"
msgstr ""
"1 2 3\n"
"A-B-C\n"
"     \\6 7 8\n"
"      F-G-H\n"
"1   2/\n"
"D---E\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:507
msgid "associate to each commit: min(X, N - X)"
msgstr "各コミットの相関: min(X, N - X)"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:510
msgid ""
"where X is the value associated to the commit in step 2) and N is the total "
"number of commits in the graph."
msgstr "ここで、X はステップ 2）のコミットに関連付けられた値であり、N はグラフ内のコミットの総数です。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:512
msgid "In the above example we have N = 8, so this will give:"
msgstr "上記の例では、`N = 8` であるため、以下のようになります:"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:520
#, no-wrap
msgid ""
"1 2 3\n"
"A-B-C\n"
"     \\2 1 0\n"
"      F-G-H\n"
"1   2/\n"
"D---E\n"
msgstr ""
"1 2 3\n"
"A-B-C\n"
"     \\2 1 0\n"
"      F-G-H\n"
"1   2/\n"
"D---E\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:524
msgid ""
"the best bisection point is the commit with the highest associated number"
msgstr "最適な二等分点は、相関値が最も大きいコミットです"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:526
msgid "So in the above example the best bisection point is commit C."
msgstr "したがって、上記の例では、最良の二等分点はコミットCです。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:528
msgid "note that some shortcuts are implemented to speed up the algorithm"
msgstr "注意: アルゴリズムを高速化するためにいくつかのショートカットが実装されていることに注意してください"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:534
msgid ""
"As we know N from the beginning, we know that min(X, N - X) can't be greater "
"than N/2. So during steps 2) and 3), if we would associate N/2 to a commit, "
"then we know this is the best bisection point. So in this case we can just "
"stop processing any other commit and return the current commit."
msgstr "最初からNを知っているので、 `min(X, N - X)` は `N/2` より大きくなることはできないことがわかります。 したがって、ステップ 2）と ステップ 3）で、 `N/2` をコミットに関連付ける場合、これが最良の二等分点であることがわかります。 したがって、この場合、他のコミットの処理を停止して、現在のコミットを返すことができます。"

#. type: Title ~
#: ../Documentation-sedout/git-bisect-lk2009.txt:536
#, no-wrap
msgid "Bisection algorithm debugging"
msgstr "Bisection algorithm debugging"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:540
msgid ""
"For any commit graph, you can see the number associated with each commit "
"using \"git rev-list --bisect-all\"."
msgstr "どのコミットグラフでも、 `git rev-list --bisect-all` を使用して、各コミットの相関値を確認できます。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:542
msgid "For example, for the above graph, a command like:"
msgstr "たとえば、上のグラフの場合、以下のようなコマンド:"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:545
#, no-wrap
msgid "$ git rev-list --bisect-all BAD --not GOOD1 GOOD2\n"
msgstr "$ git rev-list --bisect-all BAD --not GOOD1 GOOD2\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:548
msgid "would output something like:"
msgstr "は、以下のような出力になります:"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:558
#, no-wrap
msgid ""
"e15b73ad3db9b48d7d1ade32f8cd23a751fe0ace (dist=3)\n"
"15722f2fa328eaba97022898a305ffc8172db6b1 (dist=2)\n"
"78e86cf3e850bd755bb71831f42e200626fbd1e0 (dist=2)\n"
"a1939d9a142de972094af4dde9a544e577ddef0e (dist=2)\n"
"070eab2303024706f2924822bfec8b9847e4ac1b (dist=1)\n"
"a3864d4f32a3bf5ed177ddef598490a08760b70d (dist=1)\n"
"a41baa717dd74f1180abf55e9341bc7a0bb9d556 (dist=1)\n"
"9e622a6dad403b71c40979743bb9d5be17b16bd6 (dist=0)\n"
msgstr ""
"e15b73ad3db9b48d7d1ade32f8cd23a751fe0ace (dist=3)\n"
"15722f2fa328eaba97022898a305ffc8172db6b1 (dist=2)\n"
"78e86cf3e850bd755bb71831f42e200626fbd1e0 (dist=2)\n"
"a1939d9a142de972094af4dde9a544e577ddef0e (dist=2)\n"
"070eab2303024706f2924822bfec8b9847e4ac1b (dist=1)\n"
"a3864d4f32a3bf5ed177ddef598490a08760b70d (dist=1)\n"
"a41baa717dd74f1180abf55e9341bc7a0bb9d556 (dist=1)\n"
"9e622a6dad403b71c40979743bb9d5be17b16bd6 (dist=0)\n"

#. type: Title ~
#: ../Documentation-sedout/git-bisect-lk2009.txt:561
#, no-wrap
msgid "Bisection algorithm discussed"
msgstr "Bisection algorithm discussed"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:567
msgid ""
"First let's define \"best bisection point\". We will say that a commit X is "
"a best bisection point or a best bisection commit if knowing its state "
"(\"good\" or \"bad\") gives as much information as possible whether the "
"state of the commit happens to be \"good\" or \"bad\"."
msgstr "まず、「最良二等分点」を定義しましょう。あるコミットXの状態(「good」または「bad」)を与えることで、コミットの状態が「good」か「bad」かの情報が可能な限り多く得られる場合、私達はコミットXを最良二等分点または最良二等分コミットと呼ぶことにします。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:570
msgid ""
"This means that the best bisection commits are the commits where the "
"following function is maximum:"
msgstr "これは、最良の二等分コミットは、以下の関数の値が最大になるコミットであることを意味します:"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:573
#, no-wrap
msgid "f(X) = min(information_if_good(X), information_if_bad(X))\n"
msgstr "`f(X) = min(information_if_good(X), information_if_bad(X))`\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:577
msgid ""
"where information_if_good(X) is the information we get if X is good and "
"information_if_bad(X) is the information we get if X is bad."
msgstr "ここで、 `information_if_good(X)` は、Xがgoodな場合に取得する情報であり、 `information_if_bad(X)` は、Xがbadの場合に取得する情報です。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:586
msgid ""
"Now we will suppose that there is only one \"first bad commit\". This means "
"that all its descendants are \"bad\" and all the other commits are \"good\". "
"And we will suppose that all commits have an equal probability of being good "
"or bad, or of being the first bad commit, so knowing the state of c commits "
"gives always the same amount of information wherever these c commits are on "
"the graph and whatever c is. (So we suppose that these commits being for "
"example on a branch or near a good or a bad commit does not give more or "
"less information)."
msgstr "ここで、私達は「最初のbadコミット」は1つだけであると想定します。 これは、そのすべての子孫が「bad」なとを意味し、他のすべてのコミットは「good」なことを意味します。 そして、すべてのコミットがgoodかbadか、または最初のbadコミットである確率が等しいと仮定します。 したがって、cコミットの状態を知ることで、これらのcコミットがグラフ上にある場合、およびcが何であれ、常に同じ量の情報が得られます。 (したがって、これらのコミットが、たとえばブランチ上にあるか、goodコミットまたはbadコミットの近くにあると、多かれ少なかれ情報が得られないと想定します)。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:591
msgid ""
"Let's also suppose that we have a cleaned up graph like one after step 1)  "
"in the bisection algorithm above. This means that we can measure the "
"information we get in terms of number of commit we can remove from the "
"graph.."
msgstr "また、上記のbisectアルゴリズムの ステップ 1）の後のようなクリーンアップされたグラフがあると仮定しましょう。 これは、グラフから削除できるコミット数の観点から取得した情報を測定できることを意味します。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:593
msgid "And let's take a commit X in the graph."
msgstr "では、グラフでコミットXを見てみましょう。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:596
msgid ""
"If X is found to be \"good\", then we know that its ancestors are all \"good"
"\", so we want to say that:"
msgstr "Xが「good」であることが判明した場合、その祖先はすべて「good」であることがわかっているので、あなたは以下のように言いたいと思います:"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:599
#, no-wrap
msgid "information_if_good(X) = number_of_ancestors(X)  (TRUE)\n"
msgstr "`information_if_good(X) = number_of_ancestors(X)`  (TRUE)\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:603
msgid ""
"And this is true because at step 1) b) we remove the ancestors of the \"good"
"\" commits."
msgstr "そして、これは真実です。なぜなら、ステップ1）の b）で、「good」コミットの祖先を削除するからです。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:606
msgid ""
"If X is found to be \"bad\", then we know that its descendants are all \"bad"
"\", so we want to say that:"
msgstr "Xが「bad」であることが判明した場合、その子孫はすべて「bad」であることがわかっているので、あなたは以下のように言いたいでしょう:"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:609
#, no-wrap
msgid "information_if_bad(X) = number_of_descendants(X)  (WRONG)\n"
msgstr "`information_if_bad(X) = number_of_descendants(X)`  (WRONG)\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:618
msgid ""
"But this is wrong because at step 1) a) we keep only the ancestors of the "
"bad commit. So we get more information when a commit is marked as \"bad\", "
"because we also know that the ancestors of the previous \"bad\" commit that "
"are not ancestors of the new \"bad\" commit are not the first bad commit. We "
"don't know if they are good or bad, but we know that they are not the first "
"bad commit because they are not ancestor of the new \"bad\" commit."
msgstr "しかし、これは間違っています。なぜなら、ステップ 1）の a）では、badコミットの祖先だけを保持しているからです。 したがって、コミットが「bad」としてマークされると、より多くの情報が得られます。これは、新しい「bad」コミットの祖先ではない以前の「bad」コミットの祖先が最初のbadコミットではないこともわかっているためです。 それらがgoodかbadかはわかりませんが、新しい「bad」コミットの祖先ではないため、最初のbadコミットではないことはわかっています。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:622
msgid ""
"So when a commit is marked as \"bad\" we know we can remove all the commits "
"in the graph except those that are ancestors of the new \"bad\" commit. This "
"means that:"
msgstr "したがって、コミットが「bad」としてマークされている場合、新しい「bad」コミットの祖先であるコミットを除いて、グラフ内のすべてのコミットを削除できることがわかります。 以下を意味します:"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:625
#, no-wrap
msgid "information_if_bad(X) = N - number_of_ancestors(X)  (TRUE)\n"
msgstr "`information_if_bad(X) = N - number_of_ancestors(X)`  (TRUE)\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:628
msgid "where N is the number of commits in the (cleaned up) graph."
msgstr "ここで、Nは (クリーンアップされた)グラフのコミット数です。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:631
msgid ""
"So in the end this means that to find the best bisection commits we should "
"maximize the function:"
msgstr "つまり、これは最終的に、最適な二等分コミットを見つけるために、関数の値をを最大化する必要があることを意味します:"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:634
#, no-wrap
msgid "f(X) = min(number_of_ancestors(X), N - number_of_ancestors(X))\n"
msgstr "`f(X) = min(number_of_ancestors(X), N - number_of_ancestors(X))`\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:638
msgid ""
"And this is nice because at step 2) we compute number_of_ancestors(X)  and "
"so at step 3) we compute f(X)."
msgstr "そして、これは素晴らしいことです。なぜなら、ステップ 2）で `number_of_ancestors(X)` を計算し、ステップ 3）で f(X) を計算するからです。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:640
msgid "Let's take the following graph as an example:"
msgstr "例として以下のグラフを見てみましょう:"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:647
#, no-wrap
msgid ""
"            G-H-I-J\n"
"           /       \\\n"
"A-B-C-D-E-F         O\n"
"           \\       /\n"
"            K-L-M-N\n"
msgstr ""
"            G-H-I-J\n"
"           /       \\\n"
"A-B-C-D-E-F         O\n"
"           \\       /\n"
"            K-L-M-N\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:650
msgid "If we compute the following non optimal function on it:"
msgstr "その上で以下の非最適化関数を計算します:"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:653
#, no-wrap
msgid "g(X) = min(number_of_ancestors(X), number_of_descendants(X))\n"
msgstr "g(X) = min(number_of_ancestors(X), number_of_descendants(X))\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:656
msgid "we get:"
msgstr "そうすると私達は以下の結果を得ます:"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:665
#, no-wrap
msgid ""
"            4 3 2 1\n"
"            G-H-I-J\n"
"1 2 3 4 5 6/       \\0\n"
"A-B-C-D-E-F         O\n"
"           \\       /\n"
"            K-L-M-N\n"
"            4 3 2 1\n"
msgstr ""
"            4 3 2 1\n"
"            G-H-I-J\n"
"1 2 3 4 5 6/       \\0\n"
"A-B-C-D-E-F         O\n"
"           \\       /\n"
"            K-L-M-N\n"
"            4 3 2 1\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:668
msgid "but with the algorithm used by git bisect we get:"
msgstr "しかし、git bisectで使用されるアルゴリズムを使用すると、以下のようになります:"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:677
#, no-wrap
msgid ""
"            7 7 6 5\n"
"            G-H-I-J\n"
"1 2 3 4 5 6/       \\0\n"
"A-B-C-D-E-F         O\n"
"           \\       /\n"
"            K-L-M-N\n"
"            7 7 6 5\n"
msgstr ""
"            7 7 6 5\n"
"            G-H-I-J\n"
"1 2 3 4 5 6/       \\0\n"
"A-B-C-D-E-F         O\n"
"           \\       /\n"
"            K-L-M-N\n"
"            7 7 6 5\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:684
msgid ""
"So we chose G, H, K or L as the best bisection point, which is better than "
"F. Because if for example L is bad, then we will know not only that L, M and "
"N are bad but also that G, H, I and J are not the first bad commit (since we "
"suppose that there is only one first bad commit and it must be an ancestor "
"of L)."
msgstr "私達は、GまたはHまたはKまたはLを最良の二等分点として選択しました。これは、Fよりも優れています。たとえばLがbadの場合、LとMとNがbadなだけでなく、GとHとIとJは最初のbadコミットでは無いと分かるためです。(最初のbadコミットは1つだけであり、Lの祖先である必要があるため)。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:687
msgid ""
"So the current algorithm seems to be the best possible given what we "
"initially supposed."
msgstr "つまり、現在のアルゴリズムは、私達が最初に想定した限りにおいて最良のように見えます。"

#. type: Title ~
#: ../Documentation-sedout/git-bisect-lk2009.txt:689
#, no-wrap
msgid "Skip algorithm"
msgstr "Skip algorithm"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:694
msgid ""
"When some commits have been skipped (using \"git bisect skip\"), then the "
"bisection algorithm is the same for step 1) to 3). But then we use roughly "
"the following steps:"
msgstr "(「git bisect skip」を使用して)一部のコミットがスキップされた場合、bisectアルゴリズムは ステップ 1）から ステップ 3）までは同じです。 ただし、それ以降は大まかに以下の手順を使用します:"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:697
msgid "sort the commit by decreasing associated value"
msgstr "関連値の降順でコミットを並べ替えます"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:698
msgid ""
"if the first commit has not been skipped, we can return it and stop here"
msgstr "最初のコミットがスキップされていない場合は、それを返してここで停止(stop)できます"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:699
msgid "otherwise filter out all the skipped commits in the sorted list"
msgstr "それ以外の場合は、ソートされたリストでスキップされたすべてのコミットを除外します"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:700
msgid ""
"use a pseudo random number generator (PRNG) to generate a random number "
"between 0 and 1"
msgstr "疑似乱数ジェネレーター(PRNG)を使用して、0〜1の乱数を生成します"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:701
msgid "multiply this random number with its square root to bias it toward 0"
msgstr "この乱数に平方根を乗じて0に偏らせます"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:702
msgid ""
"multiply the result by the number of commits in the filtered list to get an "
"index into this list"
msgstr "結果に、フィルターされたリスト内のコミット数を乗じて、このリストへのインデックスを取得します"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:703
msgid "return the commit at the computed index"
msgstr "計算されたインデックスでコミットを返します"

#. type: Title ~
#: ../Documentation-sedout/git-bisect-lk2009.txt:705
#, no-wrap
msgid "Skip algorithm discussed"
msgstr "Skip algorithm discussed"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:712
msgid ""
"After step 7) (in the skip algorithm), we could check if the second commit "
"has been skipped and return it if it is not the case. And in fact that was "
"the algorithm we used from when \"git bisect skip\" was developed in Git "
"version 1.5.4 (released on February 1st 2008) until Git version 1.6.4 "
"(released July 29th 2009)."
msgstr "(skip algorithmの）ステップ 7）の後、2番目のコミットがスキップされたかどうかを確認し、スキップされていない場合はそれを返すことができます。 実際、これは、「git bisect skip」がGitバージョン1.5.4(2008年2月1日リリース)で開発されてからGitバージョン1.6.4(2009年7月29日リリース)まで使用したアルゴリズムでした。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:718
msgid ""
"But Ingo Molnar and H. Peter Anvin (another well known linux kernel "
"developer) both complained that sometimes the best bisection points all "
"happened to be in an area where all the commits are untestable. And in this "
"case the user was asked to test many untestable commits, which could be very "
"inefficient."
msgstr "しかし、Ingo MolnarとH.Peter Anvin(別の有名なLinuxカーネル開発者)は両方とも、全コミットがテスト不能な領域内にすべての最良の二等分点がたまたまあると不満を漏らしました。 そしてこの場合、ユーザーは多くのテスト不能なコミットをテストするように求めらますが、これは非常に非効率的である可能性があります。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:722
msgid ""
"Indeed untestable commits are often untestable because a breakage was "
"introduced at one time, and that breakage was fixed only after many other "
"commits were introduced."
msgstr "実際、一度破損が発生した後、他の多くのコミットが導入された後にのみ破損が修正されたため、テスト不能なコミットはテストできないことがよくあります。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:726
msgid ""
"This breakage is of course most of the time unrelated to the breakage we are "
"trying to locate in the commit graph. But it prevents us to know if the "
"interesting \"bad behavior\" is present or not."
msgstr "もちろん、こういう破損は、ほとんどの場合、私達がコミットグラフで見つけようとしている破損とは無関係です。 しかし、それは私たちが興味深い「bad振る舞い」が存在するかどうかを知ることを妨げます。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:730
msgid ""
"So it is a fact that commits near an untestable commit have a high "
"probability of being untestable themselves. And the best bisection commits "
"are often found together too (due to the bisection algorithm)."
msgstr "したがって、テスト不能なコミットの近くのコミットは、それ自体がテスト不能である可能性が高いのは事実です。 そして、最良の二等分コミットも一緒に見つかることがよくあります(二分アルゴリズムのため)。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:733
msgid ""
"This is why it is a bad idea to just chose the next best unskipped bisection "
"commit when the first one has been skipped."
msgstr "これが、最初のコミットがスキップされたときに、次に最適なスキップされていない二等分コミットを選択するのは悪い考えである理由です。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:738
msgid ""
"We found that most commits on the graph may give quite a lot of information "
"when they are tested. And the commits that will not on average give a lot of "
"information are the one near the good and bad commits."
msgstr "グラフ上のほとんどのコミットは、テスト時にかなり多くの情報を提供する可能性があることがわかりました。 そして、平均して、多くの情報を提供しないコミットは、goodコミットとbadコミットに近いものです。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:741
msgid ""
"So using a PRNG with a bias to favor commits away from the good and bad "
"commits looked like a good choice."
msgstr "したがって、goodコミットとbadコミットから離れてコミットを優先するバイアスのあるPRNGを使用することは、良い選択のように見えました。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:748
msgid ""
"One obvious improvement to this algorithm would be to look for a commit that "
"has an associated value near the one of the best bisection commit, and that "
"is on another branch, before using the PRNG. Because if such a commit "
"exists, then it is not very likely to be untestable too, so it will probably "
"give more information than a nearly randomly chosen one."
msgstr "このアルゴリズムの明らかな改善点の1つは、PRNGを使用する前に、最良の二等分コミットの1つに近い値が関連付けられ、別のブランチにあるコミットを探すことです。 そのようなコミットが存在する場合、それもテストできない可能性は非常に低いため、ほぼランダムに選択されたものよりも多くの情報が提供される可能性があります。"

#. type: Title ~
#: ../Documentation-sedout/git-bisect-lk2009.txt:750
#, no-wrap
msgid "Checking merge bases"
msgstr "Checking merge bases"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:754
msgid ""
"There is another tweak in the bisection algorithm that has not been "
"described in the \"bisection algorithm\" above."
msgstr "上記の「二分アルゴリズム」で説明されていない二分アルゴリズムの別の微調整があります。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:758
msgid ""
"We supposed in the previous examples that the \"good\" commits were "
"ancestors of the \"bad\" commit. But this is not a requirement of \"git "
"bisect\"."
msgstr "前の例では、「good」コミットは「bad」コミットの祖先であると想定していました。 しかし、これは「git bisect」の要件ではありません。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:766
msgid ""
"Of course the \"bad\" commit cannot be an ancestor of a \"good\" commit, "
"because the ancestors of the good commits are supposed to be \"good\". And "
"all the \"good\" commits must be related to the bad commit.  They cannot be "
"on a branch that has no link with the branch of the \"bad\" commit. But it "
"is possible for a good commit to be related to a bad commit and yet not be "
"neither one of its ancestor nor one of its descendants."
msgstr "もちろん、「bad」コミットは「good」コミットの祖先になることはできません。goodコミットの祖先は「good」と想定されているからです。 そして、すべての「good」コミットはbadコミットに関連している必要があります。 「bad」コミットのブランチとのリンクがないブランチに配置することはできません。 しかし、goodコミットがbadコミットに関連していても、その祖先でも子孫でもない可能性があります。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:769
msgid ""
"For example, there can be a \"main\" branch, and a \"dev\" branch that was "
"forked of the main branch at a commit named \"D\" like this:"
msgstr "たとえば、「main」ブランチと、以下のように「D」という名前のコミットでmainブランチから分岐した「dev」ブランチが存在する可能性があります:"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:774
#, no-wrap
msgid ""
"A-B-C-D-E-F-G  <--main\n"
"       \\\n"
"        H-I-J  <--dev\n"
msgstr ""
"A-B-C-D-E-F-G  <--main\n"
"       \\\n"
"        H-I-J  <--dev\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:778
msgid ""
"The commit \"D\" is called a \"merge base\" for branch \"main\" and \"dev\" "
"because it's the best common ancestor for these branches for a merge."
msgstr "コミット「D」は、ブランチ「main」および「dev」の「マージベース」と呼ばれます。それは、これらのブランチがマージするための最も一般的な祖先であるためです。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:782
msgid ""
"Now let's suppose that commit J is bad and commit G is good and that we "
"apply the bisection algorithm like it has been previously described."
msgstr "ここで、コミットJがbadで、コミットGがgoodであり、前述のように二分アルゴリズムを適用するとします。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:786
msgid ""
"As described in step 1) b) of the bisection algorithm, we remove all the "
"ancestors of the good commits because they are supposed to be good too."
msgstr "二分アルゴリズムの ステップ 1）の b）で説明したように、goodコミットのすべての祖先もgoodであると想定されているため、それらをすべて削除します。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:788
msgid "So we would be left with only:"
msgstr "したがって、以下のものだけが残ります:"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:791
#, no-wrap
msgid "H-I-J\n"
msgstr "H-I-J\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:795
msgid ""
"But what happens if the first bad commit is \"B\" and if it has been fixed "
"in the \"main\" branch by commit \"F\"?"
msgstr "しかし、最初のbadコミットが「B」であり、コミット「F」によって「main」ブランチで修正された場合はどうなりますか？"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:798
msgid ""
"The result of such a bisection would be that we would find that H is the "
"first bad commit, when in fact it's B. So that would be wrong!"
msgstr "このようなbisectの結果は、Hが最初のbadコミットであると探索します。しかし実際にはBです。つまり、これは間違いです！"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:804
msgid ""
"And yes it can happen in practice that people working on one branch are not "
"aware that people working on another branch fixed a bug! It could also "
"happen that F fixed more than one bug or that it is a revert of some big "
"development effort that was not ready to be released."
msgstr "そして、実際には、あるブランチで作業している人は、別のブランチで作業している人がバグを修正したことに気付いていないことがあります。 また、Fが複数のバグを修正した場合や、リリースに間に合わなかった大きな開発努力の戻し(revert)であることもあり得ます。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:810
msgid ""
"In fact development teams often maintain both a development branch and a "
"maintenance branch, and it would be quite easy for them if \"git bisect\" "
"just worked when they want to bisect a regression on the development branch "
"that is not on the maintenance branch. They should be able to start "
"bisecting using:"
msgstr "実際、開発チームは開発ブランチとメンテナンスブランチの両方を維持することが多く、メンテナンスブランチにない開発ブランチでデグレをbisectしたいときに「git bisect」が機能すれば非常に簡単です。 彼らは以下を使用してbisectを開始できるはずです:"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:813
#, no-wrap
msgid "$ git bisect start dev main\n"
msgstr "$ git bisect start dev main\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:820
msgid ""
"To enable that additional nice feature, when a bisection is started and when "
"some good commits are not ancestors of the bad commit, we first compute the "
"merge bases between the bad and the good commits and we chose these merge "
"bases as the first commits that will be checked out and tested."
msgstr "この追加機能を有効にするために、bisectを開始したときに、いくつかのgoodコミットがbadコミットの祖先でない場合、まずbadコミットとgoodコミットの間のマージベースを計算し、これらのマージベースをチェックアウトしてテストする最初のコミットとして選択するようにしています。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:823
msgid ""
"If it happens that one merge base is bad, then the bisection process is "
"stopped with a message like:"
msgstr "1つのマージベースがbadである場合、bisectプロセスは以下のようなメッセージで停止します(訳注:マージベースBBBBBBがbadです。これは、BBBBBBと[GGGGGG,...]の間でバグが修正されたことを意味します):"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:827
#, no-wrap
msgid ""
"The merge base BBBBBB is bad.\n"
"This means the bug has been fixed between BBBBBB and [GGGGGG,...].\n"
msgstr ""
"The merge base BBBBBB is bad.\n"
"This means the bug has been fixed between BBBBBB and [GGGGGG,...].\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:831
msgid ""
"where BBBBBB is the sha1 hash of the bad merge base and [GGGGGG,...] is a "
"comma separated list of the sha1 of the good commits."
msgstr "ここで、BBBBBBはbadなマージベースのsha1ハッシュであり、 [GGGGGG,...] はgoodなコミットのsha1のコンマ区切りのリストです。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:835
msgid ""
"If some of the merge bases are skipped, then the bisection process "
"continues, but the following message is printed for each skipped merge base:"
msgstr "一部のマージベースがスキップされた場合、bisectプロセスは続行されますが、スキップされたマージベースごとに以下のメッセージが出力されます(訳注:…最初のbadなコミットがMMMMMMとBBBBBBの間であるかどうかを確認することはできません。とにかく続けます…):"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:840
#, no-wrap
msgid ""
"Warning: the merge base between BBBBBB and [GGGGGG,...] must be skipped.\n"
"So we cannot be sure the first bad commit is between MMMMMM and BBBBBB.\n"
"We continue anyway.\n"
msgstr ""
"Warning: the merge base between BBBBBB and [GGGGGG,...] must be skipped.\n"
"So we cannot be sure the first bad commit is between MMMMMM and BBBBBB.\n"
"We continue anyway.\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:845
msgid ""
"where BBBBBB is the sha1 hash of the bad commit, MMMMMM is the sha1 hash of "
"the merge base that is skipped and [GGGGGG,...] is a comma separated list of "
"the sha1 of the good commits."
msgstr "ここで、BBBBBBはbadなコミットのsha1ハッシュ、MMMMMMはスキップされるマージベースのsha1ハッシュ、 [GGGGGG,...] はgoodなコミットのsha1のコンマ区切りのリストです。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:848
msgid ""
"So if there is no bad merge base, the bisection process continues as usual "
"after this step."
msgstr "badなマージベースがない場合、このステップの後、bisectプロセスは通常どおり続行されます。"

#. type: Title -
#: ../Documentation-sedout/git-bisect-lk2009.txt:850
#, no-wrap
msgid "Best bisecting practices"
msgstr "Best bisecting practices"

#. type: Title ~
#: ../Documentation-sedout/git-bisect-lk2009.txt:853
#, no-wrap
msgid "Using test suites and git bisect together"
msgstr "Using test suites and git bisect together"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:860
msgid ""
"If you both have a test suite and use git bisect, then it becomes less "
"important to check that all tests pass after each commit. Though of course "
"it is probably a good idea to have some checks to avoid breaking too many "
"things because it could make bisecting other bugs more difficult."
msgstr "テストスイートとgit bisectの両方がある場合、各コミット後にすべてのテストに合格することを確認することはそれほど重要ではなくなります。 もちろん、他のバグをbisectするのがより難しくなる可能性があるので、あまりにも多くのものを壊さないようにいくつかのチェックを行うことはおそらく良い考えです。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:865
msgid ""
"You can focus your efforts to check at a few points (for example rc and beta "
"releases) that all the T test cases pass for all the N configurations. And "
"when some tests don't pass you can use \"git bisect\" (or better \"git "
"bisect run\"). So you should perform roughly:"
msgstr "すべてのテストケース(T) がすべての構成(N)に合格することを、いくつかのポイント(たとえば、rcおよびベータリリース)で確認することに集中できます。 また、一部のテストに合格しなかった場合は、「git bisect」(またはより適切な「git bisect run」)を使用できます。 したがって、ざっくり以下のようになります:"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:868
#, no-wrap
msgid "c * N * T + b * M * log2(M) tests\n"
msgstr "c * N * T + b * M * log2(M) tests\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:872
msgid ""
"where c is the number of rounds of test (so a small constant) and b is the "
"ratio of bug per commit (hopefully a small constant too)."
msgstr "ここで、cはテストのラウンド数(つまり小さな定数)であり、bはコミットごとのバグの比率(できれば小さな定数であって欲しい)です。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:875
msgid ""
"So of course it's much better as it's O(N * T) vs O(N * T * M) if you would "
"test everything after each commit."
msgstr "したがって、もちろん、各コミット後にすべてをテストする場合は、O(N * T * M) に対して O(N * T) の方がはるかに優れています。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:880
msgid ""
"This means that test suites are good to prevent some bugs from being "
"committed and they are also quite good to tell you that you have some bugs. "
"But they are not so good to tell you where some bugs have been introduced. "
"To tell you that efficiently, git bisect is needed."
msgstr "これは、テストスイートがいくつかのバグのコミットを防ぐのに適していることを意味します。また、いくつかのバグがあることを通知するのにも非常に適しています。 しかし、いくつかのバグがどこに導入されたかを伝えるのはあまり良くありません。 それを効率的に伝えるには、git bisectが必要です。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:887
msgid ""
"The other nice thing with test suites, is that when you have one, you "
"already know how to test for bad behavior. So you can use this knowledge to "
"create a new test case for \"git bisect\" when it appears that there is a "
"regression. So it will be easier to bisect the bug and fix it. And then you "
"can add the test case you just created to your test suite."
msgstr "テストスイートのもう1つの優れた点は、テストスイートを持っている場合、badい振る舞いをテストする方法をすでに知っていることです。 したがって、この知識を使用して、デグレがあると思われる場合に「git bisect」の新しいテストケースを作成できます。 したがって、バグをbisectして修正する方が簡単です。 そしてそれから、作成したばかりのテストケースをテストスイートに追加できます。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:890
msgid ""
"So if you know how to create test cases and how to bisect, you will be "
"subject to a virtuous circle:"
msgstr "したがって、テストケースの作成方法とbisectする方法を知っている場合は、好循環になります:"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:892
msgid "more tests => easier to create tests => easier to bisect => more tests"
msgstr "よりテストされる => テストの作成がより簡単になる => bisectするのがより簡単なる => よりテストされる"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:895
msgid ""
"So test suites and \"git bisect\" are complementary tools that are very "
"powerful and efficient when used together."
msgstr "したがって、テストスイートと「git bisect」は、一緒に使用すると非常に強力で効率的な補完ツールです。"

#. type: Title ~
#: ../Documentation-sedout/git-bisect-lk2009.txt:897
#, no-wrap
msgid "Bisecting build failures"
msgstr "Bisecting build failures"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:901
msgid ""
"You can very easily automatically bisect broken builds using something like:"
msgstr "以下のようなものを使用して、壊れたビルドを非常に簡単に自動的にbisectすることができます:"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:905
#, no-wrap
msgid ""
"$ git bisect start BAD GOOD\n"
"$ git bisect run make\n"
msgstr ""
"$ git bisect start BAD GOOD\n"
"$ git bisect run make\n"

#. type: Title ~
#: ../Documentation-sedout/git-bisect-lk2009.txt:908
#, no-wrap
msgid "Passing sh -c \"some commands\" to \"git bisect run\""
msgstr "Passing sh -c \"some commands\" to \"git bisect run\""

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:911
#: ../Documentation-sedout/git-bisect-lk2009.txt:1136
#: ../Documentation-sedout/git-bisect-lk2009.txt:1152
#: ../Documentation-sedout/git-bisect-lk2009.txt:1175
msgid "For example:"
msgstr "例えば:"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:914
#, no-wrap
msgid "$ git bisect run sh -c \"make || exit 125; ./my_app | grep 'good output'\"\n"
msgstr "$ git bisect run sh -c \"make || exit 125; ./my_app | grep 'good output'\"\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:918
msgid ""
"On the other hand if you do this often, then it can be worth having scripts "
"to avoid too much typing."
msgstr "一方、これを頻繁に行う場合は、タイピングしまくらなくていいようにスクリプトを作成する価値があります。"

#. type: Title ~
#: ../Documentation-sedout/git-bisect-lk2009.txt:920
#, no-wrap
msgid "Finding performance regressions"
msgstr "Finding performance regressions"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:924
msgid ""
"Here is an example script that comes slightly modified from a real world "
"script used by Junio Hamano <<4>>."
msgstr "これは、濱野 純(Junio Hamano) が使用する実際のスクリプトから少し変更されたスクリプトの例です <<4>> 。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:927
msgid ""
"This script can be passed to \"git bisect run\" to find the commit that "
"introduced a performance regression:"
msgstr "このスクリプトを「git bisect run」に渡して、パフォーマンスの低下を引き起こしたコミットを見つけることができます:"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:930
#, no-wrap
msgid "#!/bin/sh\n"
msgstr "#!/bin/sh\n"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:933
#, no-wrap
msgid ""
"# Build errors are not what I am interested in.\n"
"make my_app || exit 255\n"
msgstr ""
"# Build errors are not what I am interested in.\n"
"make my_app || exit 255\n"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:936
#, no-wrap
msgid ""
"# We are checking if it stops in a reasonable amount of time, so\n"
"# let it run in the background...\n"
msgstr ""
"# We are checking if it stops in a reasonable amount of time, so\n"
"# let it run in the background...\n"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:938
#, no-wrap
msgid "./my_app >log 2>&1 &\n"
msgstr "./my_app >log 2>&1 &\n"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:941
#, no-wrap
msgid ""
"# ... and grab its process ID.\n"
"pid=$!\n"
msgstr ""
"# ... and grab its process ID.\n"
"pid=$!\n"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:944
#, no-wrap
msgid ""
"# ... and then wait for sufficiently long.\n"
"sleep $NORMAL_TIME\n"
msgstr ""
"# ... and then wait for sufficiently long.\n"
"sleep $NORMAL_TIME\n"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:956
#, no-wrap
msgid ""
"# ... and then see if the process is still there.\n"
"if kill -0 $pid\n"
"then\n"
"\t# It is still running -- that is bad.\n"
"\tkill $pid; sleep 1; kill $pid;\n"
"\texit 1\n"
"else\n"
"\t# It has already finished (the $pid process was no more),\n"
"\t# and we are happy.\n"
"\texit 0\n"
"fi\n"
msgstr ""
"# ... and then see if the process is still there.\n"
"if kill -0 $pid\n"
"then\n"
"\t# It is still running -- that is bad.\n"
"\tkill $pid; sleep 1; kill $pid;\n"
"\texit 1\n"
"else\n"
"\t# It has already finished (the $pid process was no more),\n"
"\t# and we are happy.\n"
"\texit 0\n"
"fi\n"

#. type: Title ~
#: ../Documentation-sedout/git-bisect-lk2009.txt:959
#, no-wrap
msgid "Following general best practices"
msgstr "一般的なベストプラクティスに従う"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:964
msgid ""
"It is obviously a good idea not to have commits with changes that knowingly "
"break things, even if some other commits later fix the breakage."
msgstr "他のコミットで後で破損を修正するにしても、意図的に物事を破損するような変更を加えたコミットを行わないのが明らかに良い考えです。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:967
msgid ""
"It is also a good idea when using any VCS to have only one small logical "
"change in each commit."
msgstr "また、VCSを使用して、各コミットで論理的な変更を1つだけ行うこともお勧めします。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:972
msgid ""
"The smaller the changes in your commit, the most effective \"git bisect\" "
"will be. And you will probably need \"git bisect\" less in the first place, "
"as small changes are easier to review even if they are only reviewed by the "
"committer."
msgstr "あなたのコミットの変更が小さいほど、最も効果的な「git bisect」になります。 また、小さな変更はコミッターによってのみレビューされる場合でもレビューしやすいため、そもそも「git bisect」の必要性は少なくなります。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:975
msgid ""
"Another good idea is to have good commit messages. They can be very helpful "
"to understand why some changes were made."
msgstr "もう1つの良いアイデアは、適切なコミットメッセージを用意することです。 いくつかの変更が行われた理由を理解するのに非常に役立ちます。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:977
msgid "These general best practices are very helpful if you bisect often."
msgstr "これらの一般的なベストプラクティスは、あなたが頻繁にbisectする場合に非常に役立ちます。"

#. type: Title ~
#: ../Documentation-sedout/git-bisect-lk2009.txt:979
#, no-wrap
msgid "Avoiding bug prone merges"
msgstr "Avoiding bug prone merges"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:985
msgid ""
"First merges by themselves can introduce some regressions even when the "
"merge needs no source code conflict resolution. This is because a semantic "
"change can happen in one branch while the other branch is not aware of it."
msgstr "最初のマージ自体は、マージがソースコードの競合解決を必要としない場合でも、いくつかのデグレを引き起こす可能性があります。 これは、一方のブランチでセマンティックの変更が発生する可能性がある一方で、もう一方のブランチはそれを認識していないためです。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:988
msgid ""
"For example one branch can change the semantic of a function while the other "
"branch add more calls to the same function."
msgstr "たとえば、一方のブランチが関数のセマンティクスを変更し、もう一方のブランチが同じ関数への呼び出しを追加する場合があります。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:995
msgid ""
"This is made much worse if many files have to be fixed to resolve conflicts. "
"That's why such merges are called \"evil merges\". They can make regressions "
"very difficult to track down. It can even be misleading to know the first "
"bad commit if it happens to be such a merge, because people might think that "
"the bug comes from bad conflict resolution when it comes from a semantic "
"change in one branch."
msgstr "競合を解決するために多くのファイルを修正する必要がある場合、これはさらに悪化します。 そのため、このようなマージは「悪のマージ」(evil merges)と呼ばれます。 それらは、デグレを追跡することを非常に困難にする可能性があります。 最初のbadコミットがそのようなマージである場合、それを知ることは誤解を招く可能性さえあります。なぜなら、バグは1つのブランチのセマンティック変更に起因する場合、競合解決が悪いことに起因すると考える可能性があるからです。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1001
msgid ""
"Anyway \"git rebase\" can be used to linearize history. This can be used "
"either to avoid merging in the first place. Or it can be used to bisect on a "
"linear history instead of the non linear one, as this should give more "
"information in case of a semantic change in one branch."
msgstr "とにかく、「git rebase」を使用して履歴を線形化できます。 これは、そもそもマージを回避するために使用できます。 または、非線形履歴の代わりに線形履歴をbisectするために使用できます。これにより、1つのブランチで意味が変更された場合に、より多くの情報が得られるはずです。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1004
msgid ""
"Merges can be also made simpler by using smaller branches or by using many "
"topic branches instead of only long version related branches."
msgstr "長いバージョンに関連するブランチだけでなく、小さなブランチを使用するか、多くのトピックブランチを使用することで、マージを簡単にすることもできます。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1007
msgid ""
"And testing can be done more often in special integration branches like "
"linux-next for the linux kernel."
msgstr "また、Linuxカーネルのlinux-nextのような特別な統合ブランチでテストをより頻繁に行うことができます。"

#. type: Title ~
#: ../Documentation-sedout/git-bisect-lk2009.txt:1009
#, no-wrap
msgid "Adapting your work-flow"
msgstr "Adapting your work-flow"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1012
msgid "A special work-flow to process regressions can give great results."
msgstr "デグレを処理するための特別なワークフローは、素晴らしい結果をもたらす可能性があります。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1014
msgid "Here is an example of a work-flow used by Andreas Ericsson:"
msgstr "ここで、 Andreas Ericsson が使用するワークフローの例を以下に示します:"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1016
msgid "write, in the test suite, a test script that exposes the regression"
msgstr "テストスイートでは、デグレを明らかにするテストスクリプトを書きます"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1017
msgid "use \"git bisect run\" to find the commit that introduced it"
msgstr "「git bisect run」を使用して、それを導入したコミットを見つけます"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1018
msgid "fix the bug that is often made obvious by the previous step"
msgstr "前ステップで明らかになることが多いバグを修正します"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1019
msgid "commit both the fix and the test script (and if needed more tests)"
msgstr "修正とテストスクリプトの両方をコミットします(必要に応じてさらにテストを行います)"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1021
msgid "And here is what Andreas said about this work-flow <<5>>:"
msgstr "そして、以下が Andreas このワークフローについて言ったことです <<5>>:"

#. _____________
#. _____________
#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1033
msgid ""
"To give some hard figures, we used to have an average report-to-fix cycle of "
"142.6 hours (according to our somewhat weird bug-tracker which just measures "
"wall-clock time). Since we moved to Git, we've lowered that to 16.2 hours. "
"Primarily because we can stay on top of the bug fixing now, and because "
"everyone's jockeying to get to fix bugs (we're quite proud of how lazy we "
"are to let Git find the bugs for us). Each new release results in ~40% fewer "
"bugs (almost certainly due to how we now feel about writing tests)."
msgstr "具体的な数字を挙げると、以前は報告から修正までの平均サイクルが 142.6 時間でした((壁掛け時計の時間だけを計測する、ちょっと変わったバグトラッカーによるものです)。Gitに移行してからは、16.2時間まで短縮されました。これは主に、バグフィックスを怠らないようになったことと、誰もがバグフィックスに参加するようになったからです(私たちは、バグを見つけるのをいかにGitに任せて怠慢しているかを誇りに思っています)。新しいリリースのたびに、バグの数は40%ほど減っています(ほぼ間違いなく、私たちがテストを書くことにどう感じているかによるものです)。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1037
msgid ""
"Clearly this work-flow uses the virtuous circle between test suites and "
"\"git bisect\". In fact it makes it the standard procedure to deal with "
"regression."
msgstr "明らかに、このワークフローは、テストスイートと「git bisect」の間の好循環を利用しています。 実際、それはデグレに対処するための標準的な手順になります。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1042
msgid ""
"In other messages Andreas says that they also use the \"best practices\" "
"described above: small logical commits, topic branches, no evil merge,... "
"These practices all improve the bisectability of the commit graph, by making "
"it easier and more useful to bisect."
msgstr "他のメッセージで Andreas は、上記の「ベストプラクティス」も使用していると述べています。小さな論理コミット、トピックブランチ、悪意のないマージ(no evil merge)などです。これらのプラクティスはすべて、bisectをより簡単でより便利にすることによって、コミットグラフの二分探索性を改善します。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1045
msgid ""
"So a good work-flow should be designed around the above points. That is "
"making bisecting easier, more useful and standard."
msgstr "したがって、上記の点を念頭に適切なワークフローを設計する必要があります。 これにより、bisectがより簡単に、より便利に、標準的になります。"

#. type: Title ~
#: ../Documentation-sedout/git-bisect-lk2009.txt:1047
#, no-wrap
msgid "Involving QA people and if possible end users"
msgstr "品質担当者と、可能であればエンドユーザーを巻き込む"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1053
msgid ""
"One nice about \"git bisect\" is that it is not only a developer tool. It "
"can effectively be used by QA people or even end users (if they have access "
"to the source code or if they can get access to all the builds)."
msgstr "「git bisect」の良いところの1つは、それが開発者用のツールだけではないということです。 品質担当者、さらにはエンドユーザー(ソースコードにアクセスできる場合、またはすべてのビルドにアクセスできる場合)が効果的に使用できます。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1057
msgid ""
"There was a discussion at one point on the linux kernel mailing list of "
"whether it was ok to always ask end user to bisect, and very good points "
"were made to support the point of view that it is ok."
msgstr "一時期、linuxのカーネルメーリングリストで、エンドユーザーに常にbisectを要求して良いのかという議論があり、良いという意見を支持する非常に良い指摘がありました。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1059
msgid "For example David Miller wrote <<6>>:"
msgstr "たとえば、 David Miller は以下のように書いています <<6>> :"

#. _____________
#. _____________
#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1068
msgid ""
"What people don't get is that this is a situation where the \"end node "
"principle\" applies. When you have limited resources (here: developers)  you "
"don't push the bulk of the burden upon them. Instead you push things out to "
"the resource you have a lot of, the end nodes (here: users), so that the "
"situation actually scales."
msgstr "人々が理解していないのは、これが「エンド・ノードの原則」(end node principle)が適用される状況であるということです。リソース（ここでは開発者）が限られている場合、開発者に負担の大部分を押し付けないようにします。その代わりに、多くのリソースを持っているエンドノード（ここではユーザー）に物事を押し付け、状況の大きさが実態の大きさに沿うようにするのです。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1071
msgid ""
"This means that it is often \"cheaper\" if QA people or end users can do it."
msgstr "これは、品質担当者またはエンドユーザーがそれを実行できる場合、多くの場合「安価」であることを意味します。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1078
msgid ""
"What is interesting too is that end users that are reporting bugs (or QA "
"people that reproduced a bug) have access to the environment where the bug "
"happens. So they can often more easily reproduce a regression. And if they "
"can bisect, then more information will be extracted from the environment "
"where the bug happens, which means that it will be easier to understand and "
"then fix the bug."
msgstr "また、興味深いのは、バグを報告しているエンドユーザー(またはバグを再現した品質担当者)が、バグが発生する環境にアクセスできることです。 そのため、多くの場合、デグレをより簡単に再現できます。 そして、bisectすることができれば、バグが発生した環境からより多くの情報が抽出されます。つまり、バグを理解して修正するのが簡単になります。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1082
msgid ""
"For open source projects it can be a good way to get more useful "
"contributions from end users, and to introduce them to QA and development "
"activities."
msgstr "オープンソースプロジェクトでは、エンドユーザーからより有益な貢献を得るための良い方法となり、品質管理や開発活動に導入することができます。"

#. type: Title ~
#: ../Documentation-sedout/git-bisect-lk2009.txt:1084
#, no-wrap
msgid "Using complex scripts"
msgstr "Using complex scripts"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1088
msgid ""
"In some cases like for kernel development it can be worth developing complex "
"scripts to be able to fully automate bisecting."
msgstr "カーネル開発の場合のように、bisectを完全に自動化できるように複雑なスクリプトを開発する価値がある場合があります。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1090
msgid "Here is what Ingo Molnar says about that <<7>>:"
msgstr "Ingo Molnar はこれについて以下のように言っています <<7>>:"

#. _____________
#. _____________
#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1102
msgid ""
"i have a fully automated bootup-hang bisection script. It is based on \"git-"
"bisect run\". I run the script, it builds and boots kernels fully "
"automatically, and when the bootup fails (the script notices that via the "
"serial log, which it continuously watches - or via a timeout, if the system "
"does not come up within 10 minutes it's a \"bad\" kernel), the script raises "
"my attention via a beep and i power cycle the test box. (yeah, i should make "
"use of a managed power outlet to 100% automate it)"
msgstr "私は完全に自動化された起動時ハングアップ対応bisectスクリプトを持っています。 これは「git-bisect run」に基づいています。 スクリプトを実行すると、カーネルが完全に自動的にビルドおよび起動され、起動が失敗すると(スクリプトは、継続的に監視するシリアルログを介して、またはタイムアウトを介して、システムが10分以内に起動しない場合は 「bad」カーネルとします)、スクリプトはビープ音を介して私の注意を喚起し、テストボックスの電源を入れ直します。 （ええもちろん、それを100%自動化するためには、制御された電源コンセントを利用する必要があります)"

#. type: Title ~
#: ../Documentation-sedout/git-bisect-lk2009.txt:1104
#, no-wrap
msgid "Combining test suites, git bisect and other systems together"
msgstr "Combining test suites, git bisect and other systems together"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1109
msgid ""
"We have seen that test suites and git bisect are very powerful when used "
"together. It can be even more powerful if you can combine them with other "
"systems."
msgstr "テストスイートとgit bisectを一緒に使用すると、非常に強力であることがわかりました。 それらを他のシステムと組み合わせることができれば、さらに強力になる可能性があります。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1116
msgid ""
"For example some test suites could be run automatically at night with some "
"unusual (or even random) configurations. And if a regression is found by a "
"test suite, then \"git bisect\" can be automatically launched, and its "
"result can be emailed to the author of the first bad commit found by \"git "
"bisect\", and perhaps other people too. And a new entry in the bug tracking "
"system could be automatically created too."
msgstr "たとえば、一部のテストスイートは、いくつかの異常な(またはランダムな)構成で夜間に自動的に実行される可能性があります。 また、テストスイートでデグレが見つかった場合は、「git bisect」を自動的に起動し、その結果を「git bisect」で最初に見つかったbadなコミットの作成者や他の人にメールで送信できます。 また、バグ追跡システムの新しいエントリも自動的に作成される可能性があります。"

#. type: Title -
#: ../Documentation-sedout/git-bisect-lk2009.txt:1119
#, no-wrap
msgid "The future of bisecting"
msgstr "The future of bisecting"

#. type: Title ~
#: ../Documentation-sedout/git-bisect-lk2009.txt:1122
#, no-wrap
msgid "\"git replace\""
msgstr "\"git replace\""

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1128
msgid ""
"We saw earlier that \"git bisect skip\" is now using a PRNG to try to avoid "
"areas in the commit graph where commits are untestable. The problem is that "
"sometimes the first bad commit will be in an untestable area."
msgstr "「git bisect skip」は、PRNGを使用して、コミットがテストできないコミットグラフの領域を回避しようとしていることを以前に見ました。 問題は、最初のbadコミットがテストできない領域にある場合があることです。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1134
msgid ""
"To simplify the discussion we will suppose that the untestable area is a "
"simple string of commits and that it was created by a breakage introduced by "
"one commit (let's call it BBC for bisect breaking commit) and later fixed by "
"another one (let's call it BFC for bisect fixing commit)."
msgstr "議論を単純化するために、テスト不能な領域はコミットの単純な文字列であり、あるコミットによって導入された破損によって作成され(bisect breaking commitの場合はBBCと呼びます)、後で別のコミットによって修正された(bisect fixing commitの場合はBFCと呼びます)と仮定します。"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:1139
#, no-wrap
msgid "...-Y-BBC-X1-X2-X3-X4-X5-X6-BFC-Z-...\n"
msgstr "...-Y-BBC-X1-X2-X3-X4-X5-X6-BFC-Z-...\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1143
msgid ""
"where we know that Y is good and BFC is bad, and where BBC and X1 to X6 are "
"untestable."
msgstr "ここで、Yはgoodで、BFCはbadであり、BBCと、X1〜X6はテストできません。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1150
msgid ""
"In this case if you are bisecting manually, what you can do is create a "
"special branch that starts just before the BBC. The first commit in this "
"branch should be the BBC with the BFC squashed into it. And the other "
"commits in the branch should be the commits between BBC and BFC rebased on "
"the first commit of the branch and then the commit after BFC also rebased on."
msgstr "この場合、手動でbisectする場合は、BBCの直前から始まる特別なブランチを作成することができます。 このブランチの最初のコミットは、BFCをつぶしたBBCになるはずです(squash)。 そしてブランチの他のコミットは、BBC と BFC の間のコミットをブランチの最初のコミットでリベースし、BFC の後のコミットもリベースしたものでなければなりません。"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:1157
#, no-wrap
msgid ""
"      (BBC+BFC)-X1'-X2'-X3'-X4'-X5'-X6'-Z'\n"
"     /\n"
"...-Y-BBC-X1-X2-X3-X4-X5-X6-BFC-Z-...\n"
msgstr ""
"      (BBC+BFC)-X1'-X2'-X3'-X4'-X5'-X6'-Z'\n"
"     /\n"
"...-Y-BBC-X1-X2-X3-X4-X5-X6-BFC-Z-...\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1160
msgid "where commits quoted with ' have been rebased."
msgstr "ここで、 `'` 付きの(X1',X2',X3',X4',X5',X6',Z')がリベースされたコミットです。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1162
msgid "You can easily create such a branch with Git using interactive rebase."
msgstr "対話的リベースを使用して、Gitでこのようなブランチを簡単に作成できます。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1164
msgid "For example using:"
msgstr "例えば以下のように使用します:"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:1167
#, no-wrap
msgid "$ git rebase -i Y Z\n"
msgstr "$ git rebase -i Y Z\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1170
msgid "and then moving BFC after BBC and squashing it."
msgstr "そしてBBCの後にBFCを動かしてつぶし(squash)ます。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1173
msgid ""
"After that you can start bisecting as usual in the new branch and you should "
"eventually find the first bad commit."
msgstr "その後、あなたは新しいブランチで通常どおりbisectを開始でき、最終的に最初のbadコミットを見つけるでしょう。"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:1178
#, no-wrap
msgid "$ git bisect start Z' Y\n"
msgstr "$ git bisect start Z' Y\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1189
msgid ""
"If you are using \"git bisect run\", you can use the same manual fix up as "
"above, and then start another \"git bisect run\" in the special branch. Or "
"as the \"git bisect\" man page says, the script passed to \"git bisect run\" "
"can apply a patch before it compiles and test the software <<8>>. The patch "
"should turn a current untestable commits into a testable one. So the testing "
"will result in \"good\" or \"bad\" and \"git bisect\" will be able to find "
"the first bad commit. And the script should not forget to remove the patch "
"once the testing is done before exiting from the script."
msgstr "「git bisect run」を使用している場合は、上記と同じ手動修正を使用してから、特別なブランチで別の「git bisect run」を開始できます。 または、「git bisect」のマニュアルページに記載されているように、「git bisect run」に渡されたスクリプトは、ソフトウェアをコンパイルしてテストする前にパッチを適用できます <<8>> 。 パッチは、現在のテスト不能なコミットをテスト可能なコミットに変える必要があります。 したがって、テストの結果は「good」または「bad」になり、「git bisect」は最初のbadコミットを見つけることができます。 また、スクリプトを終了する前にテストが完了したら、スクリプトはパッチを削除することを忘れないでください。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1194
msgid ""
"(Note that instead of a patch you can use \"git cherry-pick BFC\" to apply "
"the fix, and in this case you should use \"git reset --hard HEAD^\" to "
"revert the cherry-pick after testing and before returning from the script.)"
msgstr "(注意: パッチの代わりに `git cherry-pick BFC` を使用して修正を適用できることに注意してください。この場合、 `git reset --hard HEAD^` を使用して、テスト後にスクリプトから戻る前にチェリーピックを元に戻す必要があります。)"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1202
msgid ""
"But the above ways to work around untestable areas are a little bit clunky. "
"Using special branches is nice because these branches can be shared by "
"developers like usual branches, but the risk is that people will get many "
"such branches. And it disrupts the normal \"git bisect\" work-flow. So, if "
"you want to use \"git bisect run\" completely automatically, you have to add "
"special code in your script to restart bisection in the special branches."
msgstr "しかし、テスト不能な領域を回避する上記の方法は少々ぎこちないです。 特別なブランチを使用することは、これらのブランチを通常のブランチのように開発者が共有できるので便利ですが、リスクは人々がそのようなブランチをたくさん取得することです。 そして、それは通常の「git bisect」ワークフローを混乱させます。 したがって、「git bisect run」を完全に自動的に使用する場合は、スクリプトに特別なコードを追加して、特別なブランチでbisectを再開する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1207
msgid ""
"Anyway one can notice in the above special branch example that the Z' and Z "
"commits should point to the same source code state (the same \"tree\" in git "
"parlance). That's because Z' result from applying the same changes as Z just "
"in a slightly different order."
msgstr "とにかく、上記の特別なブランチの例では、Z' と Z のコミットが同じソースコードの状態(git用語では同じ「ツリー」)を指している必要があることに気付くでしょう。 これは、Z' が Z と同じ変更をわずかに異なる順序で適用した結果であるためです。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1211
msgid ""
"So if we could just \"replace\" Z by Z' when we bisect, then we would not "
"need to add anything to a script. It would just work for anyone in the "
"project sharing the special branches and the replacements."
msgstr "したがって、bisectするときに Z を Z' に「置き換える」ことができれば、スクリプトに何も追加する必要はありません。 それは、特別なブランチとその代替品を共有するプロジェクトの誰にとってもうまくいくでしょう。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1213
msgid "With the example above that would give:"
msgstr "上記例では、以下のようになります:"

#. type: delimited block -
#: ../Documentation-sedout/git-bisect-lk2009.txt:1218
#, no-wrap
msgid ""
"      (BBC+BFC)-X1'-X2'-X3'-X4'-X5'-X6'-Z'-...\n"
"     /\n"
"...-Y-BBC-X1-X2-X3-X4-X5-X6-BFC-Z\n"
msgstr ""
"      (BBC+BFC)-X1'-X2'-X3'-X4'-X5'-X6'-Z'-...\n"
"     /\n"
"...-Y-BBC-X1-X2-X3-X4-X5-X6-BFC-Z\n"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1225
msgid ""
"That's why the \"git replace\" command was created. Technically it stores "
"replacements \"refs\" in the \"refs/replace/\" hierarchy. These \"refs\" are "
"like branches (that are stored in \"refs/heads/\") or tags (that are stored "
"in \"refs/tags\"), and that means that they can automatically be shared like "
"branches or tags among developers."
msgstr "このために、「git replace」コマンドが作成されました。 技術的には、「置き換えるrefs」を `refs/replace/` 階層に格納します。 これらの「ref」は、ブランチ(`refs/heads/` に格納)またはタグ(`refs/tags` に格納)のようなものであり、開発者間でブランチまたはタグのように自動的に共有できることを意味します。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1230
msgid ""
"\"git replace\" is a very powerful mechanism. It can be used to fix commits "
"in already released history, for example to change the commit message or the "
"author. And it can also be used instead of git \"grafts\" to link a "
"repository with another old repository."
msgstr "「git replace」は非常に強力なメカニズムです。 これは、すでにリリースされた履歴のコミットを修正するために使用できます。たとえば、コミットメッセージや作成者を変更するために使用できます。 また、 git \"grafts\" の代わりに使用して、リポジトリを別の古いリポジトリにリンクすることもできます。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1234
msgid ""
"In fact it's this last feature that \"sold\" it to the Git community, so it "
"is now in the \"master\" branch of Git's Git repository and it should be "
"released in Git 1.6.5 in October or November 2009."
msgstr "実際には、Gitコミュニティに「お披露目」したのはこの最後の機能であるため、現在これはGitのGitリポジトリのmasterブランチにあり、2009年10月または11月にGit1.6.5でリリースされる予定です。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1241
msgid ""
"One problem with \"git replace\" is that currently it stores all the "
"replacements refs in \"refs/replace/\", but it would be perhaps better if "
"the replacement refs that are useful only for bisecting would be in \"refs/"
"replace/bisect/\". This way the replacement refs could be used only for "
"bisecting, while other refs directly in \"refs/replace/\" would be used "
"nearly all the time."
msgstr ""
"「git replace」の問題の1つは、現在すべての置換refを `refs/replace/` に格納していることですが、bisectにのみ役立つ置換refが `refs/replace/bisect/ にあるとよいでしょう。 このように、置換参照は二等分にのみ使用できますが、「refs /replace/」に直接含まれる他の参照はほぼ常に使用されます。\n"
"git replace の問題点として、現在 `refs/replace/` に全ての置換用refを格納していますが、bisectするためだけに有用な置換用refを `refs/replace/bisect/` に格納した方が良いのではないかと思います。こうすることで、 `refs/replace/` に直接ある他のrefsがほぼ常に使用される一方で、置換refsはbisectするときだけ使用することができます。"

#. type: Title ~
#: ../Documentation-sedout/git-bisect-lk2009.txt:1243
#, no-wrap
msgid "Bisecting sporadic bugs"
msgstr "まばらなバグのbisect"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1248
msgid ""
"Another possible improvement to \"git bisect\" would be to optionally add "
"some redundancy to the tests performed so that it would be more reliable "
"when tracking sporadic bugs."
msgstr "「git bisect」のもう1つの可能な改善点は、実行されるテストにオプションで冗長性を追加して、まばらなバグ(sporadic bugs)を追跡する際の信頼性を高めることです。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1252
msgid ""
"This has been requested by some kernel developers because some bugs called "
"sporadic bugs do not appear in all the kernel builds because they are very "
"dependent on the compiler output."
msgstr "散発的なバグ(sporadic bugs)と呼ばれるいくつかのバグは、コンパイラの出力に大きく依存していて、すべてのカーネルビルドでは現れないため、この改善は一部のカーネル開発者から要求されています。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1261
msgid ""
"The idea is that every 3 test for example, \"git bisect\" could ask the user "
"to test a commit that has already been found to be \"good\" or \"bad"
"\" (because one of its descendants or one of its ancestors has been found to "
"be \"good\" or \"bad\" respectively). If it happens that a commit has been "
"previously incorrectly classified then the bisection can be aborted early, "
"hopefully before too many mistakes have been made. Then the user will have "
"to look at what happened and then restart the bisection using a fixed bisect "
"log."
msgstr "このアイデアは、たとえば「git bisect」を実行するたびに、(その子孫あるいは祖先がそれぞれ「good」または「bad」と判定されたために、)すでに「good」または「bad」と判定されたコミットをテストするようユーザーに求めることができます。もしあるコミットが以前に間違って分類されていた場合、できれば多くの間違いが起こる前に、bisectを早期に中止することができます。その場合、ユーザーは何が起こったのかを調べ、修正された bisect ログを使用して bisect を再開しなければなりません。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1265
msgid ""
"There is already a project called BBChop created by Ealdwulf Wuffinga on "
"Github that does something like that using Bayesian Search Theory <<9>>:"
msgstr "ベイジアン検索理論(Bayesian Search Theory)を使用してそのようなことを行う、Github上に Ealdwulf Wuffinga によって作成された BBChop というプロジェクトがすでにあります <<9>> :"

#. _____________
#. _____________
#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1274
msgid ""
"BBChop is like 'git bisect' (or equivalent), but works when your bug is "
"intermittent. That is, it works in the presence of false negatives (when a "
"version happens to work this time even though it contains the bug). It "
"assumes that there are no false positives (in principle, the same approach "
"would work, but adding it may be non-trivial)."
msgstr "BBChopは「gitbisect」(または同等のもの)に似ていますが、バグが断続的に発生する場合に機能します。 つまり、検知漏れ(false negatives)(あるバージョンにバグが含まれていても、今回はそのバージョンが機能する場合)が存在する場合に機能します。 誤検知(false positives)がないことを前提としています(原則として、同一プローチで機能しますが、追加するのは簡単ではない場合があります)。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1277
msgid ""
"But BBChop is independent of any VCS and it would be easier for Git users to "
"have something integrated in Git."
msgstr "ただし、BBChopはVCSから独立しているため、GitユーザーとしてはGitに何かを統合する方が簡単です。"

#. type: Title -
#: ../Documentation-sedout/git-bisect-lk2009.txt:1279
#, no-wrap
msgid "Conclusion"
msgstr "結論"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1286
msgid ""
"We have seen that regressions are an important problem, and that \"git bisect"
"\" has nice features that complement very well practices and other tools, "
"especially test suites, that are generally used to fight regressions. But it "
"might be needed to change some work-flows and (bad) habits to get the most "
"out of it."
msgstr "リグレッションは重要な問題であり、「git bisect」には、デグレと戦うために一般的に使用される非常に優れたプラクティスやその他のツール、特にテストスイートを補完する優れた機能があることがわかりました。 しかし、それを最大限に活用するには、いくつかのワークフローと(悪い)習慣を変更する必要があるかもしれません。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1293
msgid ""
"Some improvements to the algorithms inside \"git bisect\" are possible and "
"some new features could help in some cases, but overall \"git bisect\" works "
"already very well, is used a lot, and is already very useful. To back up "
"that last claim, let's give the final word to Ingo Molnar when he was asked "
"by the author how much time does he think \"git bisect\" saves him when he "
"uses it:"
msgstr "「git bisect」内のアルゴリズムにいくつかの改善が可能であり、いくつかの新機能が役立つ場合もありますが、全体的な「git bisect」はすでに非常にうまく機能し、多く使用されており、すでに非常に便利です。 最後の主張を裏付けるために、Ingo Molnarが著者に「git bisect を使うとどのくらい時間が節約できると思いますか」と聞かれたときの答えを引用しましょう:"

#. type: delimited block _
#: ../Documentation-sedout/git-bisect-lk2009.txt:1297
msgid "a _lot_."
msgstr "たくさん節約できたよ。"

#. type: delimited block _
#: ../Documentation-sedout/git-bisect-lk2009.txt:1302
msgid ""
"About ten years ago did i do my first 'bisection' of a Linux patch queue. "
"That was prior the Git (and even prior the BitKeeper) days. I literally days "
"spent sorting out patches, creating what in essence were standalone commits "
"that i guessed to be related to that bug."
msgstr "約10年前、Linuxパッチキューの最初の「二等分」を実行しました。 それはGitの前(そしてBitKeeperよりも前)でした。 私は文字通り、パッチを整理し、本質的にそのバグに関連していると推測したスタンドアロンのコミットを作成するのに何日も費やしました。"

#. type: delimited block _
#: ../Documentation-sedout/git-bisect-lk2009.txt:1305
msgid ""
"It was a tool of absolute last resort. I'd rather spend days looking at "
"printk output than do a manual 'patch bisection'."
msgstr "それはツールとして絶対的に最後の手段でした。 手動の「パッチ二等分」よりも、printkの出力を確認するのに何日も費やしたと思います。"

#. type: delimited block _
#: ../Documentation-sedout/git-bisect-lk2009.txt:1310
msgid ""
"With Git bisect it's a breeze: in the best case i can get a ~15 step kernel "
"bisection done in 20-30 minutes, in an automated way. Even with manual help "
"or when bisecting multiple, overlapping bugs, it's rarely more than an hour."
msgstr "Git bisect を使用すると、これは簡単です。最良の場合、自動化された方法で、20〜30分で最大15ステップのカーネルbisectを実行できます。 手動のヘルプを使用したり、複数の重複するバグをbisectしたりしても、1時間以上かかることはめったにありません。"

#. type: delimited block _
#: ../Documentation-sedout/git-bisect-lk2009.txt:1316
msgid ""
"In fact it's invaluable because there are bugs i would never even _try_ to "
"debug if it wasn't for git bisect. In the past there were bug patterns that "
"were immediately hopeless for me to debug - at best i could send the crash/"
"bug signature to lkml and hope that someone else can think of something."
msgstr "実際、git bisectがなければ、「デバッグしようと試みさえしない」しないバグがあるので、非常に貴重です。 過去には、デバッグするのに直ぐに絶望的と分かるバグパターンがありました。それは、せいぜい クラッシュ/バグシグネチャ をlkmlに送信して、他の誰かが何かを考えてくれることを期待するのがせいぜいでした。"

#. type: delimited block _
#: ../Documentation-sedout/git-bisect-lk2009.txt:1320
msgid ""
"And even if a bisection fails today it tells us something valuable about the "
"bug: that it's non-deterministic - timing or kernel image layout dependent."
msgstr "そして今や、bisectが失敗したとしても、それはバグについて何か価値のあることを教えてくれます。それは非決定論的であり、タイミングやカーネルイメージのレイアウトに依存します。"

#. type: delimited block _
#: ../Documentation-sedout/git-bisect-lk2009.txt:1323
msgid ""
"So git bisect is unconditional goodness - and feel free to quote that ;-)"
msgstr "つまり、git bisect は無条件に良いものなのです -- このフレーズは自由に引用していいです ;-)"

#. type: Title -
#: ../Documentation-sedout/git-bisect-lk2009.txt:1326
#, no-wrap
msgid "Acknowledgments"
msgstr "謝辞"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1332
msgid ""
"Many thanks to Junio Hamano for his help in reviewing this paper, for "
"reviewing the patches I sent to the Git mailing list, for discussing some "
"ideas and helping me improve them, for improving \"git bisect\" a lot and "
"for his awesome work in maintaining and developing Git."
msgstr "この論文のレビュー、Gitメーリングリストに送信したパッチのレビュー、いくつかのアイデアの議論と改善の支援、「git bisect」の大幅な改善、Gitの開発および維持における素晴らしい仕事に協力してくれた濱野 純(Junio Hamano)に感謝します。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1337
msgid ""
"Many thanks to Ingo Molnar for giving me very useful information that "
"appears in this paper, for commenting on this paper, for his suggestions to "
"improve \"git bisect\" and for evangelizing \"git bisect\" on the linux "
"kernel mailing lists."
msgstr "この論文に登場する非常に有用な情報を提供してくれた Ingo Molnar、この論文へのコメント、「git bisect」を改善するための提案、およびLinuxカーネルメーリングリストでの「git bisect」の伝道に感謝します。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1340
msgid ""
"Many thanks to Linus Torvalds for inventing, developing and evangelizing "
"\"git bisect\", Git and Linux."
msgstr "「gitbisect」、Git、Linuxを発明、開発、伝道してくれたLinus Torvaldsに感謝します。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1345
msgid ""
"Many thanks to the many other great people who helped one way or another "
"when I worked on Git, especially to Andreas Ericsson, Johannes Schindelin, "
"H. Peter Anvin, Daniel Barkalow, Bill Lear, John Hawley, Shawn O. Pierce, "
"Jeff King, Sam Vilain, Jon Seymour."
msgstr "私がGitに取り組んだときに何らかの形で助けてくれた他の多くの素晴らしい人々、特に Andreas Ericsson, Johannes Schindelin, H. Peter Anvin, Daniel Barkalow, Bill Lear, John Hawley, Shawn O. Pierce, Jeff King, Sam Vilain, Jon Seymour に感謝します。"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1348
msgid ""
"Many thanks to the Linux-Kongress program committee for choosing the author "
"to given a talk and for publishing this paper."
msgstr "講演を行う著者を選択し、この論文を発表してくれた Linux-Kongress プログラム委員会に感謝します。"

#. type: Title -
#: ../Documentation-sedout/git-bisect-lk2009.txt:1350
#, no-wrap
msgid "References"
msgstr "References"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1354
msgid ""
"[[[1]]] https://www.nist.gov/sites/default/files/documents/director/planning/"
"report02-3.pdf['The Economic Impacts of Inadequate Infratructure for "
"Software Testing'.  Nist Planning Report 02-3], see Executive Summary and "
"Chapter 8."
msgstr "[[[1]]] https://www.nist.gov/sites/default/files/documents/director/planning/report02-3.pdf['The Economic Impacts of Inadequate Infratructure for Software Testing'.  Nist Planning Report 02-3], see Executive Summary and Chapter 8."

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1355
msgid ""
"[[[2]]] http://www.oracle.com/technetwork/java/codeconvtoc-136057.html['Code "
"Conventions for the Java Programming Language'. Sun Microsystems.]"
msgstr "[[[2]]] http://www.oracle.com/technetwork/java/codeconvtoc-136057.html['Code Conventions for the Java Programming Language'. Sun Microsystems.]"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1356
msgid ""
"[[[3]]] https://en.wikipedia.org/wiki/Software_maintenance['Software "
"maintenance'. Wikipedia.]"
msgstr "[[[3]]] https://en.wikipedia.org/wiki/Software_maintenance['Software maintenance'. Wikipedia.]"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1357
msgid ""
"[[[4]]] https://lore.kernel.org/git/7vps5xsbwp.fsf_-_@assigned-by-dhcp.cox."
"net/[Junio C Hamano. 'Automated bisect success story'.]"
msgstr "[[[4]]] https://lore.kernel.org/git/7vps5xsbwp.fsf_-_@assigned-by-dhcp.cox.net/[Junio C Hamano. 'Automated bisect success story'.]"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1358
msgid ""
"[[[5]]] https://lwn.net/Articles/317154/[Christian Couder. 'Fully automated "
"bisecting with \"git bisect run\"'. LWN.net.]"
msgstr "[[[5]]] https://lwn.net/Articles/317154/[Christian Couder. 'Fully automated bisecting with \"git bisect run\"'. LWN.net.]"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1359
msgid ""
"[[[6]]] https://lwn.net/Articles/277872/[Jonathan Corbet. 'Bisection divides "
"users and developers'. LWN.net.]"
msgstr "[[[6]]] https://lwn.net/Articles/277872/[Jonathan Corbet. 'Bisection divides users and developers'. LWN.net.]"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1360
msgid ""
"[[[7]]] https://lore.kernel.org/lkml/20071207113734.GA14598@elte.hu/[Ingo "
"Molnar. 'Re: BUG 2.6.23-rc3 can't see sd partitions on Alpha'. Linux-kernel "
"mailing list.]"
msgstr "[[[7]]] https://lore.kernel.org/lkml/20071207113734.GA14598@elte.hu/[Ingo Molnar. 'Re: BUG 2.6.23-rc3 can't see sd partitions on Alpha'. Linux-kernel mailing list.]"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1361
msgid ""
"[[[8]]] https://www.kernel.org/pub/software/scm/git/docs/git-bisect."
"html[Junio C Hamano and the git-list. 'git-bisect(1) Manual Page'. Linux "
"Kernel Archives.]"
msgstr "[[[8]]] https://www.kernel.org/pub/software/scm/git/docs/git-bisect.html[Junio C Hamano and the git-list. 'git-bisect(1) Manual Page'. Linux Kernel Archives.]"

#. type: Plain text
#: ../Documentation-sedout/git-bisect-lk2009.txt:1361
msgid "[[[9]]] https://github.com/Ealdwulf/bbchop[Ealdwulf. 'bbchop'. GitHub.]"
msgstr "[[[9]]] https://github.com/Ealdwulf/bbchop[Ealdwulf. 'bbchop'. GitHub.]"
