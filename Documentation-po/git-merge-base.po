# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-10-01 00:25+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation/git-merge-base.txt:2
#, no-wrap
msgid "git-merge-base(1)"
msgstr ""

#. type: Title -
#: ../Documentation/git-merge-base.txt:5
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge-base.txt:7
msgid "git-merge-base - Find as good common ancestors as possible for a merge"
msgstr ""

#. type: Title -
#: ../Documentation/git-merge-base.txt:10
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge-base.txt:17
#, no-wrap
msgid ""
"'git merge-base' [-a|--all] <commit> <commit>...\n"
"'git merge-base' [-a|--all] --octopus <commit>...\n"
"'git merge-base' --is-ancestor <commit> <commit>\n"
"'git merge-base' --independent <commit>...\n"
"'git merge-base' --fork-point <ref> [<commit>]\n"
msgstr ""

#. type: Title -
#: ../Documentation/git-merge-base.txt:19
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge-base.txt:27
msgid ""
"'git merge-base' finds best common ancestor(s) between two commits to use in "
"a three-way merge.  One common ancestor is 'better' than another common "
"ancestor if the latter is an ancestor of the former.  A common ancestor that "
"does not have any better common ancestor is a 'best common ancestor', i.e. a "
"'merge base'.  Note that there can be more than one merge base for a pair of "
"commits."
msgstr ""

#. type: Title -
#: ../Documentation/git-merge-base.txt:29
#, no-wrap
msgid "OPERATION MODES"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge-base.txt:33
msgid ""
"As the most common special case, specifying only two commits on the command "
"line means computing the merge base between the given two commits."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge-base.txt:38
msgid ""
"More generally, among the two commits to compute the merge base from, one is "
"specified by the first commit argument on the command line; the other commit "
"is a (possibly hypothetical) commit that is a merge across all the remaining "
"commits on the command line."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge-base.txt:42
msgid ""
"As a consequence, the 'merge base' is not necessarily contained in each of "
"the commit arguments if more than two commits are specified. This is "
"different from linkgit:git-show-branch[1] when used with the `--merge-base` "
"option."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-merge-base.txt:43
#, no-wrap
msgid "--octopus"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge-base.txt:47
msgid ""
"Compute the best common ancestors of all supplied commits, in preparation "
"for an n-way merge.  This mimics the behavior of 'git show-branch "
"--merge-base'."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-merge-base.txt:48
#, no-wrap
msgid "--independent"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge-base.txt:54
msgid ""
"Instead of printing merge bases, print a minimal subset of the supplied "
"commits with the same ancestors.  In other words, among the commits given, "
"list those which cannot be reached from any other.  This mimics the behavior "
"of 'git show-branch --independent'."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-merge-base.txt:55
#, no-wrap
msgid "--is-ancestor"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge-base.txt:59
msgid ""
"Check if the first <commit> is an ancestor of the second <commit>, and exit "
"with status 0 if true, or with status 1 if not.  Errors are signaled by a "
"non-zero status that is not 1."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-merge-base.txt:60
#, no-wrap
msgid "--fork-point"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge-base.txt:68
msgid ""
"Find the point at which a branch (or any history that leads to <commit>) "
"forked from another branch (or any reference)  <ref>. This does not just "
"look for the common ancestor of the two commits, but also takes into account "
"the reflog of <ref> to see if the history leading to <commit> forked from an "
"earlier incarnation of the branch <ref> (see discussion on this mode below)."
msgstr ""

#. type: Title -
#: ../Documentation/git-merge-base.txt:70
#, no-wrap
msgid "OPTIONS"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-merge-base.txt:71
#, no-wrap
msgid "-a"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-merge-base.txt:72
#, no-wrap
msgid "--all"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge-base.txt:74
msgid "Output all merge bases for the commits, instead of just one."
msgstr ""

#. type: Title -
#: ../Documentation/git-merge-base.txt:76
#, no-wrap
msgid "DISCUSSION"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge-base.txt:80
msgid ""
"Given two commits 'A' and 'B', `git merge-base A B` will output a commit "
"which is reachable from both 'A' and 'B' through the parent relationship."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge-base.txt:82
msgid "For example, with this topology:"
msgstr ""

#. type: delimited block .
#: ../Documentation/git-merge-base.txt:87
#, no-wrap
msgid ""
"\t o---o---o---B\n"
"\t/\n"
"---o---1---o---o---o---A\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge-base.txt:90
msgid "the merge base between 'A' and 'B' is '1'."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge-base.txt:94
msgid ""
"Given three commits 'A', 'B' and 'C', `git merge-base A B C` will compute "
"the merge base between 'A' and a hypothetical commit 'M', which is a merge "
"between 'B' and 'C'.  For example, with this topology:"
msgstr ""

#. type: delimited block .
#: ../Documentation/git-merge-base.txt:101
#, no-wrap
msgid ""
"       o---o---o---o---C\n"
"      /\n"
"     /   o---o---o---B\n"
"    /   /\n"
"---2---1---o---o---o---A\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge-base.txt:105
msgid ""
"the result of `git merge-base A B C` is '1'.  This is because the equivalent "
"topology with a merge commit 'M' between 'B' and 'C' is:"
msgstr ""

#. type: delimited block .
#: ../Documentation/git-merge-base.txt:113
#, no-wrap
msgid ""
"       o---o---o---o---o\n"
"      /                 \\\n"
"     /   o---o---o---o---M\n"
"    /   /\n"
"---2---1---o---o---o---A\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge-base.txt:118
msgid ""
"and the result of `git merge-base A M` is '1'.  Commit '2' is also a common "
"ancestor between 'A' and 'M', but '1' is a better common ancestor, because "
"'2' is an ancestor of '1'.  Hence, '2' is not a merge base."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge-base.txt:121
msgid ""
"The result of `git merge-base --octopus A B C` is '2', because '2' is the "
"best common ancestor of all commits."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge-base.txt:124
msgid ""
"When the history involves criss-cross merges, there can be more than one "
"'best' common ancestor for two commits.  For example, with this topology:"
msgstr ""

#. type: delimited block .
#: ../Documentation/git-merge-base.txt:131
#, no-wrap
msgid ""
"---1---o---A\n"
"    \\ /\n"
"     X\n"
"    / \\\n"
"---2---o---o---B\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge-base.txt:136
msgid ""
"both '1' and '2' are merge-bases of A and B.  Neither one is better than the "
"other (both are 'best' merge bases).  When the `--all` option is not given, "
"it is unspecified which best one is output."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge-base.txt:141
msgid ""
"A common idiom to check \"fast-forward-ness\" between two commits A and B is "
"(or at least used to be) to compute the merge base between A and B, and "
"check if it is the same as A, in which case, A is an ancestor of B.  You "
"will see this idiom used often in older scripts."
msgstr ""

#. type: delimited block .
#: ../Documentation/git-merge-base.txt:148
#, no-wrap
msgid ""
"A=$(git rev-parse --verify A)\n"
"if test \"$A\" = \"$(git merge-base A B)\"\n"
"then\n"
"\t... A is an ancestor of B ...\n"
"fi\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge-base.txt:151
msgid "In modern git, you can say this in a more direct way:"
msgstr ""

#. type: delimited block .
#: ../Documentation/git-merge-base.txt:157
#, no-wrap
msgid ""
"if git merge-base --is-ancestor A B\n"
"then\n"
"\t... A is an ancestor of B ...\n"
"fi\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge-base.txt:160
msgid "instead."
msgstr ""

#. type: Title -
#: ../Documentation/git-merge-base.txt:162
#, no-wrap
msgid "Discussion on fork-point mode"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge-base.txt:168
msgid ""
"After working on the `topic` branch created with `git switch -c topic "
"origin/master`, the history of remote-tracking branch `origin/master` may "
"have been rewound and rebuilt, leading to a history of this shape:"
msgstr ""

#. type: delimited block .
#: ../Documentation/git-merge-base.txt:177
#, no-wrap
msgid ""
"\t\t o---B2\n"
"\t\t/\n"
"---o---o---B1--o---o---o---B (origin/master)\n"
"\t\\\n"
"\t B0\n"
"\t  \\\n"
"\t   D0---D1---D (topic)\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge-base.txt:184
msgid ""
"where `origin/master` used to point at commits B0, B1, B2 and now it points "
"at B, and your `topic` branch was started on top of it back when "
"`origin/master` was at B0, and you built three commits, D0, D1, and D, on "
"top of it.  Imagine that you now want to rebase the work you did on the "
"topic on top of the updated origin/master."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge-base.txt:190
msgid ""
"In such a case, `git merge-base origin/master topic` would return the parent "
"of B0 in the above picture, but B0^..D is *not* the range of commits you "
"would want to replay on top of B (it includes B0, which is not what you "
"wrote; it is a commit the other side discarded when it moved its tip from B0 "
"to B1)."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge-base.txt:198
msgid ""
"`git merge-base --fork-point origin/master topic` is designed to help in "
"such a case.  It takes not only B but also B0, B1, and B2 (i.e. old tips of "
"the remote-tracking branches your repository's reflog knows about) into "
"account to see on which commit your topic branch was built and finds B0, "
"allowing you to replay only the commits on your topic, excluding the commits "
"the other side later discarded."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge-base.txt:200
msgid "Hence"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge-base.txt:202
#, no-wrap
msgid "    $ fork_point=$(git merge-base --fork-point origin/master topic)\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge-base.txt:204
msgid "will find B0, and"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge-base.txt:206
#, no-wrap
msgid "    $ git rebase --onto origin/master $fork_point topic\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge-base.txt:209
msgid "will replay D0, D1 and D on top of B to create a new history of this shape:"
msgstr ""

#. type: delimited block .
#: ../Documentation/git-merge-base.txt:218
#, no-wrap
msgid ""
"\t\t o---B2\n"
"\t\t/\n"
"---o---o---B1--o---o---o---B (origin/master)\n"
"\t\\                   \\\n"
"\t B0                  D0'--D1'--D' (topic - updated)\n"
"\t  \\\n"
"\t   D0---D1---D (topic - old)\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge-base.txt:226
msgid ""
"A caveat is that older reflog entries in your repository may be expired by "
"`git gc`.  If B0 no longer appears in the reflog of the remote-tracking "
"branch `origin/master`, the `--fork-point` mode obviously cannot find it and "
"fails, avoiding to give a random and useless result (such as the parent of "
"B0, like the same command without the `--fork-point` option gives)."
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge-base.txt:237
msgid ""
"Also, the remote-tracking branch you use the `--fork-point` mode with must "
"be the one your topic forked from its tip.  If you forked from an older "
"commit than the tip, this mode would not find the fork point (imagine in the "
"above sample history B0 did not exist, origin/master started at B1, moved to "
"B2 and then B, and you forked your topic at origin/master^ when "
"origin/master was B1; the shape of the history would be the same as above, "
"without B0, and the parent of B1 is what `git merge-base origin/master "
"topic` correctly finds, but the `--fork-point` mode will not, because it is "
"not one of the commits that used to be at the tip of origin/master)."
msgstr ""

#. type: Title -
#: ../Documentation/git-merge-base.txt:240
#, no-wrap
msgid "See also"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge-base.txt:244
msgid "linkgit:git-rev-list[1], linkgit:git-show-branch[1], linkgit:git-merge[1]"
msgstr ""

#. type: Title -
#: ../Documentation/git-merge-base.txt:246
#, no-wrap
msgid "GIT"
msgstr ""

#. type: Plain text
#: ../Documentation/git-merge-base.txt:247
msgid "Part of the linkgit:git[1] suite"
msgstr ""
