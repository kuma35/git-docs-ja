# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 0.0\n"
"POT-Creation-Date: 2022-03-19 11:34+0900\n"
"PO-Revision-Date: 2022-03-20 09:10+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/gitcore-tutorial.txt:2
#, no-wrap
msgid "gitcore-tutorial(7)"
msgstr "gitcore-tutorial(7)"

#. type: Title -
#: ../Documentation-sedout/gitcore-tutorial.txt:5
#, no-wrap
msgid "NAME"
msgstr "NAME"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:7
msgid "gitcore-tutorial - A Git core tutorial for developers"
msgstr "gitcore-tutorial - 開発者のためのGit coreチュートリアル"

#. type: Title -
#: ../Documentation-sedout/gitcore-tutorial.txt:9
#, no-wrap
msgid "SYNOPSIS"
msgstr "SYNOPSIS"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:11
msgid "git *"
msgstr "git *"

#. type: Title -
#: ../Documentation-sedout/gitcore-tutorial.txt:13
#, no-wrap
msgid "DESCRIPTION"
msgstr "DESCRIPTION"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:17
msgid ""
"This tutorial explains how to use the \"core\" Git commands to set up and "
"work with a Git repository."
msgstr ""
"このチュートリアルでは、「コア」(core)Gitコマンドを使用してGitリポジトリを設"
"定および操作する方法について説明します。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:21
msgid ""
"If you just need to use Git as a revision control system you may prefer to "
"start with \"A Tutorial Introduction to Git\" (linkgit:gittutorial[7]) or "
"link:user-manual.html[the Git User Manual]."
msgstr ""
"あなたがGitをリビジョン管理システムとして使用する必要がある場合は、「A "
"Tutorial Introduction to Git」( linkgit: gittutorial[7] )または link:user-"
"manual.html[the Git User Manual] から始めることをお勧めします。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:24
msgid ""
"However, an understanding of these low-level tools can be helpful if you "
"want to understand Git's internals."
msgstr ""
"しかしながら、Gitの内部を理解したい場合は、これら低レベルのツールを理解してお"
"くと役に立ちます。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:29
msgid ""
"The core Git is often called \"plumbing\", with the prettier user interfaces "
"on top of it called \"porcelain\". You may not want to use the plumbing "
"directly very often, but it can be good to know what the plumbing does when "
"the porcelain isn't flushing."
msgstr ""
"コアGit(core Git)は「配管」(plumbing)と呼ばれることが多く、その上に「磁器」"
"(porcelain)と呼ばれるより美しいユーザーインターフェイスがあります。配管コマン"
"ドを直接使用することはあまりありませんが、磁器コマンドが使えない時に配管コマ"
"ンドでどうするかを知っておくのは良い事です。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:37
msgid ""
"Back when this document was originally written, many porcelain commands were "
"shell scripts. For simplicity, it still uses them as examples to illustrate "
"how plumbing is fit together to form the porcelain commands. The source tree "
"includes some of these scripts in contrib/examples/ for reference. Although "
"these are not implemented as shell scripts anymore, the description of what "
"the plumbing layer commands do is still valid."
msgstr ""
"このドキュメントが最初に作成されたとき、多くの磁器コマンドはシェルスクリプト"
"でした。説明を簡単にするために、配管がどのように組み合わされて磁器コマンドを"
"形成するかを示す例としていまだそれらを使用しています。ソースツリーには、参照"
"用に contrib/examples/ にこれらのスクリプトの一部が含まれています。これらは最"
"早シェルスクリプトとして実装されなくなりましたが、それでも、配管レイヤーコマ"
"ンドの機能の説明は引き続き有効です。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:41
msgid ""
"Deeper technical details are often marked as Notes, which you can skip on "
"your first reading."
msgstr ""
"より深い技術的な詳細は、多くの場合 Note 欄になっています。最初の読書ではス"
"キップしてかまいません。"

#. type: Title -
#: ../Documentation-sedout/gitcore-tutorial.txt:44
#, no-wrap
msgid "Creating a Git repository"
msgstr "Creating a Git repository"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:51
msgid ""
"Creating a new Git repository couldn't be easier: all Git repositories start "
"out empty, and the only thing you need to do is find yourself a subdirectory "
"that you want to use as a working tree - either an empty one for a totally "
"new project, or an existing working tree that you want to import into Git."
msgstr ""
"新しいGitリポジトリの作成はこれ以上ないほど簡単です。すべてのGitリポジトリは"
"空から始まります。必要なのは、作業ツリーとして使用するサブディレクトリを見つ"
"けることだけです。まったく新しいプロジェクトの場合は、それは空のものか、ある"
"いは、Gitにインポートする既存の作業ツリーのいずれかです。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:56
msgid ""
"For our first example, we're going to start a totally new repository from "
"scratch, with no pre-existing files, and we'll call it 'git-tutorial'.  To "
"start up, create a subdirectory for it, change into that subdirectory, and "
"initialize the Git infrastructure with 'git init':"
msgstr ""
"私達の最初の例において、既存のファイルを使用せずに、まったく新しいリポジトリ"
"を最初から開始します。これを「git-tutorial」と呼ぶことにします。起動するに"
"は、そのサブディレクトリを作成し、そのサブディレクトリに入って、 `git init` "
"を使用してGitインフラストラクチャを初期化します:"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:61
#, no-wrap
msgid ""
"$ mkdir git-tutorial\n"
"$ cd git-tutorial\n"
"$ git init\n"
msgstr ""
"$ mkdir git-tutorial\n"
"$ cd git-tutorial\n"
"$ git init\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:64
msgid "to which Git will reply"
msgstr "そうすると、Gitは以下のように答えます"

# hint: Using 'master' as the name for the initial branch. This default branch name
# hint: is subject to change. To configure the initial branch name to use in all
# hint: of your new repositories, which will suppress this warning, call:
# hint: 
# hint:   git config --global init.defaultBranch <name>
# hint: 
# hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and
# hint: 'development'. The just-created branch can be renamed via this command:
# hint: 
# hint:   git branch -m <name>
# Initialized empty Git repository in /home/hideo/work/git-tutorial/.git/
#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:67
#, no-wrap
msgid "Initialized empty Git repository in .git/\n"
msgstr "Initialized empty Git repository in .git/\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:74
msgid ""
"which is just Git's way of saying that you haven't been doing anything "
"strange, and that it will have created a local `.git` directory setup for "
"your new project. You will now have a `.git` directory, and you can inspect "
"that with 'ls'. For your new empty project, it should show you three "
"entries, among other things:"
msgstr ""
"これは、奇妙なことを何もしていないこと、そして新しいプロジェクト用にローカル"
"の `.git` ディレクトリセットアップを作成したことを示すGit流のやり方です。これ"
"で `.git` ディレクトリができ、'ls' でそれを調べることができます。新しい空のプ"
"ロジェクトの場合、特に、以下の3つのエントリが表示されます:"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:78
msgid ""
"a file called `HEAD`, that has `ref: refs/heads/master` in it.  This is "
"similar to a symbolic link and points at `refs/heads/master` relative to the "
"`HEAD` file."
msgstr ""
"`ref: refs/heads/master` という内容の `HEAD` というファイル。これはシンボリッ"
"クリンクに似ており、 `HEAD` ファイルは `refs/heads/master` を指します。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:82
msgid ""
"Don't worry about the fact that the file that the `HEAD` link points to "
"doesn't even exist yet -- you haven't created the commit that will start "
"your `HEAD` development branch yet."
msgstr ""
"`HEAD` リンクが指すファイルがまだ存在しないという事実について心配する必要はあ"
"りません。まだあなたは `HEAD` 開発ブランチを開始するコミットを作成していない"
"からです。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:87
msgid ""
"a subdirectory called `objects`, which will contain all the objects of your "
"project. You should never have any real reason to look at the objects "
"directly, but you might want to know that these objects are what contains "
"all the real 'data' in your repository."
msgstr ""
"プロジェクトのすべてのオブジェクトを含む `objects` というサブディレクトリ。オ"
"ブジェクトを直接見る理由は何も無いはずですが、これらのオブジェクトがリポジト"
"リ内のすべての実際の「データ」を含むものであることを知りたい場合があります。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:89
msgid "a subdirectory called `refs`, which contains references to objects."
msgstr "オブジェクトへの参照を含む `refs` と呼ばれるサブディレクトリ。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:96
msgid ""
"In particular, the `refs` subdirectory will contain two other "
"subdirectories, named `heads` and `tags` respectively. They do exactly what "
"their names imply: they contain references to any number of different "
"'heads' of development (aka 'branches'), and to any 'tags' that you have "
"created to name specific versions in your repository."
msgstr ""
"特に、 `refs` サブディレクトリには、それぞれ `heads` と `tags` という名前の2"
"つのサブディレクトリが含まれます。それらは、名前が示すとおりに機能します。つ"
"まり、開発のさまざまな「ヘッド」(先頭)(別名「ブランチ」)への参照と、リポジト"
"リ内の特定のバージョンに名前を付けるために作成した「タグ」への参照が含まれま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:102
msgid ""
"One note: the special `master` head is the default branch, which is why the "
"`.git/HEAD` file was created points to it even if it doesn't yet exist. "
"Basically, the `HEAD` link is supposed to always point to the branch you are "
"working on right now, and you always start out expecting to work on the "
"`master` branch."
msgstr ""
"注: 特別な `master` ヘッドがデフォルトのブランチであるため、作成された `.git/"
"HEAD` ファイルは、まだ存在していなくてもそれを指します。基本的に、 `HEAD` リ"
"ンクは常に現在作業しているブランチを指しているはずであり、いつも `master` ブ"
"ランチでの作業から始まることを期待します。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:107
msgid ""
"However, this is only a convention, and you can name your branches anything "
"you want, and don't have to ever even 'have' a `master` branch. A number of "
"the Git tools will assume that `.git/HEAD` is valid, though."
msgstr ""
"けれども、これは単なる慣例であり、ブランチには任意の名前を付けることができ、"
"あなたは「master」ブランチを持つ必要はありません。ただし、多くのGitツールは "
"`.git/HEAD` が最初から有効であると想定します。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:117
msgid ""
"An 'object' is identified by its 160-bit SHA-1 hash, aka 'object name', and "
"a reference to an object is always the 40-byte hex representation of that "
"SHA-1 name. The files in the `refs` subdirectory are expected to contain "
"these hex references (usually with a final `\\n` at the end), and you should "
"thus expect to see a number of 41-byte files containing these references in "
"these `refs` subdirectories when you actually start populating your tree."
msgstr ""
"「オブジェクト」は、その160ビットのSHA-1ハッシュ、別名「オブジェクト名」に"
"よって識別され、オブジェクトへの参照は、常にそのSHA-1名の16進表現の40バイトで"
"す。 `refs` サブディレクトリ内のファイルには、これらの16進参照(通常、末尾に `"
"\\n` があります)が含まれていると予想されるため、実際にあなたのツリーにデータ"
"を入力し始めると、これらの `refs` サブディレクトリにはこれらの参照を含む41バ"
"イトのファイルが多数表示されるはずです。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:121
msgid ""
"An advanced user may want to take a look at linkgit:gitrepository-layout[5] "
"after finishing this tutorial."
msgstr ""
"上級ユーザーは、このチュートリアルを終了した後、 linkgit:gitrepository-"
"layout[5] を確認することをお勧めします。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:124
msgid ""
"You have now created your first Git repository. Of course, since it's empty, "
"that's not very useful, so let's start populating it with data."
msgstr ""
"これで、あなたの最初のGitリポジトリが作成されました。もちろん、空なのであまり"
"役に立ちません。なので、データの入力を始めましょう。"

#. type: Title -
#: ../Documentation-sedout/gitcore-tutorial.txt:127
#, no-wrap
msgid "Populating a Git repository"
msgstr "Populating a Git repository"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:131
msgid ""
"We'll keep this simple and stupid, so we'll start off with populating a few "
"trivial files just to get a feel for it."
msgstr ""
"我々はシンプルかつ愚直に行きたいと思います、まずは簡単なファイルをいくつか入"
"力して、その感触をつかむことから始めます。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:135
msgid ""
"Start off with just creating any random files that you want to maintain in "
"your Git repository. We'll start off with a few bad examples, just to get a "
"feel for how this works:"
msgstr ""
"あなたのGitリポジトリに保持したいランダムファイルを作成することから始めます。"
"これがどのように機能するかを理解するために、いくつかの悪い例から始めます:"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:139
#, no-wrap
msgid ""
"$ echo \"Hello World\" >hello\n"
"$ echo \"Silly example\" >example\n"
msgstr ""
"$ echo \"Hello World\" >hello\n"
"$ echo \"Silly example\" >example\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:143
msgid ""
"you have now created two files in your working tree (aka 'working "
"directory'), but to actually check in your hard work, you will have to go "
"through two steps:"
msgstr ""
"これで、あなたの作業ツリー(working tree)(別名「作業ディレクトリ」(working "
"directory))に2つのファイルが作成されましたが、実際にあなたの作業をチェックイ"
"ンするには、以下の2つの手順を実行する必要があります:"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:146
msgid ""
"fill in the 'index' file (aka 'cache') with the information about your "
"working tree state."
msgstr ""
"'index' ファイル(別名 'cache' ）に作業ツリーの状態に関する情報を入力します。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:148
msgid "commit that index file as an object."
msgstr "そのインデックスファイルをオブジェクトとしてコミットします。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:156
msgid ""
"The first step is trivial: when you want to tell Git about any changes to "
"your working tree, you use the 'git update-index' program. That program "
"normally just takes a list of filenames you want to update, but to avoid "
"trivial mistakes, it refuses to add new entries to the index (or remove "
"existing ones) unless you explicitly tell it that you're adding a new entry "
"with the `--add` flag (or removing an entry with the `--remove`) flag."
msgstr ""
"最初のステップは至極簡単です。作業ツリーへの変更についてGitに通知する場合"
"は、 `git update-index` プログラムを使用します。このプログラムは通常、更新す"
"るファイル名のリストを取得しますが、些細な間違いを避けるために、 `--add` フラ"
"グを使用して新しいエントリを追加すること(または `--remove`でエントリを削除す"
"ること)を明示的に指定しない限り、インデックスへの新しいエントリの追加(または"
"既存のものを削除)することを拒否します。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:158
msgid ""
"So to populate the index with the two files you just created, you can do"
msgstr ""
"したがって、作成した2つのファイルをインデックスに追加するには、以下のようにし"
"ます"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:161
#, no-wrap
msgid "$ git update-index --add hello example\n"
msgstr "$ git update-index --add hello example\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:164
msgid "and you have now told Git to track those two files."
msgstr "これで、あなたはGitにこれら2つのファイルを追跡するように指示しました。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:168
msgid ""
"In fact, as you did that, if you now look into your object directory, you'll "
"notice that Git will have added two new objects to the object database. If "
"you did exactly the steps above, you should now be able to do"
msgstr ""
"実際、上記を行った後にオブジェクトディレクトリを調べると、Gitがオブジェクト"
"データベースに2つの新しいオブジェクトを追加していることがわかります。上記の手"
"順を正確に実行した場合は、あなたは以下のように実行できます"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:172
#, no-wrap
msgid "$ ls .git/objects/??/*\n"
msgstr "$ ls .git/objects/??/*\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:175
msgid "and see two files:"
msgstr "そうすると以下の２つのファイルが見えます:"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:179
#, no-wrap
msgid ""
".git/objects/55/7db03de997c86a4a028e1ebd3a1ceb225be238\n"
".git/objects/f2/4c74a2e500f5ee1332c86b94199f52b1d1d962\n"
msgstr ""
".git/objects/55/7db03de997c86a4a028e1ebd3a1ceb225be238\n"
".git/objects/f2/4c74a2e500f5ee1332c86b94199f52b1d1d962\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:183
msgid ""
"which correspond with the objects with names of `557db...` and `f24c7...` "
"respectively."
msgstr ""
"これは、それぞれ「557db...」および「f24c7...」という名前のオブジェクトに対応"
"します。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:186
msgid ""
"If you want to, you can use 'git cat-file' to look at those objects, but "
"you'll have to use the object name, not the filename of the object:"
msgstr ""
"必要に応じて、 `git cat-file` を使用してこれらのオブジェクトを確認できます"
"が、オブジェクトのファイル名ではなく、オブジェクト名を使用する必要があります:"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:189
#, no-wrap
msgid "$ git cat-file -t 557db03de997c86a4a028e1ebd3a1ceb225be238\n"
msgstr "$ git cat-file -t 557db03de997c86a4a028e1ebd3a1ceb225be238\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:194
msgid ""
"where the `-t` tells 'git cat-file' to tell you what the \"type\" of the "
"object is. Git will tell you that you have a \"blob\" object (i.e., just a "
"regular file), and you can see the contents with"
msgstr ""
"ここで、 `-t` は 'git cat-file' に、オブジェクトの「タイプ」が何であるかを通"
"知させます。 Gitは、「blob」(ブロブ)オブジェクト(つまり、通常のファイル)があ"
"ることを通知し、あなたは以下のコマンドで内容を表示できます。"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:197
#, no-wrap
msgid "$ git cat-file blob 557db03\n"
msgstr "$ git cat-file blob 557db03\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:201
msgid ""
"which will print out \"Hello World\". The object `557db03` is nothing more "
"than the contents of your file `hello`."
msgstr ""
"\"Hello World\" が出力されます。オブジェクト `557db03` は、ファイル `hello` "
"の内容そのものです。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:207
msgid ""
"Don't confuse that object with the file `hello` itself. The object is "
"literally just those specific *contents* of the file, and however much you "
"later change the contents in file `hello`, the object we just looked at will "
"never change. Objects are immutable."
msgstr ""
"そのオブジェクトをファイル `hello` 自体と混同しないでください。オブジェクトは"
"文字通りファイルの特定の「内容」(contents)であり、後でファイル `hello` の内容"
"を変更しても、先ほど見たオブジェクトは変更されません。オブジェクトは不変"
"(immutable)です。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:212
msgid ""
"The second example demonstrates that you can abbreviate the object name to "
"only the first several hexadecimal digits in most places."
msgstr ""
"2番目の例は、ほとんどの場所でオブジェクト名を最初の数桁の16進数にのみに省略で"
"きることを示しています。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:219
msgid ""
"Anyway, as we mentioned previously, you normally never actually take a look "
"at the objects themselves, and typing long 40-character hex names is not "
"something you'd normally want to do. The above digression was just to show "
"that 'git update-index' did something magical, and actually saved away the "
"contents of your files into the Git object database."
msgstr ""
"とにかく、前述したように、通常、オブジェクト自体を実際に確認することはありま"
"せん。40文字の長い16進名を入力することは、通常は行いたくないことです。上記の"
"余談は、「git update-index」が魔法のようなことをし、実際にファイルの内容をGit"
"オブジェクトデータベースに保存したことを現しています。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:226
msgid ""
"Updating the index did something else too: it created a `.git/index` file. "
"This is the index that describes your current working tree, and something "
"you should be very aware of. Again, you normally never worry about the index "
"file itself, but you should be aware of the fact that you have not actually "
"really \"checked in\" your files into Git so far, you've only *told* Git "
"about them."
msgstr ""
"インデックスを更新すると、他のことも行います。それは、 `.git/index` ファイル"
"の作成です。これは、現在の作業ツリーを説明するインデックスであり、とても注意"
"を払う必要があります。 繰り返しになりますが、通常はインデックスファイル自体に"
"ついて心配することはありませんが、ここまでファイルを実際にはGitに「チェックイ"
"ン」しておらず、Gitに「伝えただけ」であることに注意する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:229
msgid ""
"However, since Git knows about them, you can now start using some of the "
"most basic Git commands to manipulate the files or look at their status."
msgstr ""
"しなしながら、Gitはそれらについて知っているため、最も基本的なGitコマンドのい"
"くつかを使用して、ファイルを操作したり、ファイルのステータスを確認したりでき"
"ます。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:232
msgid ""
"In particular, let's not even check in the two files into Git yet, we'll "
"start off by adding another line to `hello` first:"
msgstr ""
"特に、この時点ではこの2つのファイルをGitにチェックインしないでください。私達"
"は、最初に、`hello` に別の行を追加することから始めます:"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:235
#, no-wrap
msgid "$ echo \"It's a new day for git\" >>hello\n"
msgstr "$ echo \"It's a new day for git\" >>hello\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:240
msgid ""
"and you can now, since you told Git about the previous state of `hello`, ask "
"Git what has changed in the tree compared to your old index, using the 'git "
"diff-files' command:"
msgstr ""
"これで、Gitに以前の `hello` の状態について伝えたので、 'git diff-files' コマ"
"ンドを使用して、古いインデックスと比較してツリーで何が変更されたかをGitに尋ね"
"ることができます:"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:243
#, no-wrap
msgid "$ git diff-files\n"
msgstr "$ git diff-files\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:249
msgid ""
"Oops. That wasn't very readable. It just spit out its own internal version "
"of a 'diff', but that internal version really just tells you that it has "
"noticed that \"hello\" has been modified, and that the old object contents "
"it had have been replaced with something else."
msgstr ""
"おっと、これはあまり読みやすくないですね。これは 'diff' の独自の内部バージョ"
"ンを吐き出すだけですが、その内部バージョンは、「hello」が変更されたこと、およ"
"び古いオブジェクトの内容が別のものに置き換えられたことに気付いたことを示して"
"います。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:252
msgid ""
"To make it readable, we can tell 'git diff-files' to output the differences "
"as a patch, using the `-p` flag:"
msgstr ""
"読みやすくするために、 `-p` フラグを使用して、 'git diff-files' にパッチとし"
"て差分を出力するように指示できます:"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:262
#, no-wrap
msgid ""
"$ git diff-files -p\n"
"diff --git a/hello b/hello\n"
"index 557db03..263414f 100644\n"
"--- a/hello\n"
"+++ b/hello\n"
"@@ -1 +1,2 @@\n"
" Hello World\n"
"+It's a new day for git\n"
msgstr ""
"$ git diff-files -p\n"
"diff --git a/hello b/hello\n"
"index 557db03..263414f 100644\n"
"--- a/hello\n"
"+++ b/hello\n"
"@@ -1 +1,2 @@\n"
" Hello World\n"
"+It's a new day for git\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:265
msgid ""
"i.e. the diff of the change we caused by adding another line to `hello`."
msgstr ""
"つまり、これは `hello` に別の行を追加することによって引き起された変更の diff "
"です。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:269
msgid ""
"In other words, 'git diff-files' always shows us the difference between what "
"is recorded in the index, and what is currently in the working tree. That's "
"very useful."
msgstr ""
"言い換えると、 'git diff-files' は、常に、インデックスに記録されているもの"
"と、現在作業ツリーにあるものとの違いを示しています。これはとても便利です。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:272
msgid ""
"A common shorthand for `git diff-files -p` is to just write `git diff`, "
"which will do the same thing."
msgstr ""
"`git diff-files -p` の一般的な省略形は、 `git diff` と書くことで、左記と同一"
"の事を行います。"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:282
#, no-wrap
msgid ""
"$ git diff\n"
"diff --git a/hello b/hello\n"
"index 557db03..263414f 100644\n"
"--- a/hello\n"
"+++ b/hello\n"
"@@ -1 +1,2 @@\n"
" Hello World\n"
"+It's a new day for git\n"
msgstr ""
"$ git diff\n"
"diff --git a/hello b/hello\n"
"index 557db03..263414f 100644\n"
"--- a/hello\n"
"+++ b/hello\n"
"@@ -1 +1,2 @@\n"
" Hello World\n"
"+It's a new day for git\n"

#. type: Title -
#: ../Documentation-sedout/gitcore-tutorial.txt:286
#, no-wrap
msgid "Committing Git state"
msgstr "Committing Git state"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:293
msgid ""
"Now, we want to go to the next stage in Git, which is to take the files that "
"Git knows about in the index, and commit them as a real tree. We do that in "
"two phases: creating a 'tree' object, and committing that 'tree' object as a "
"'commit' object together with an explanation of what the tree was all about, "
"along with information of how we came to that state."
msgstr ""
"次に、私達はGitの次の段階に進みます。これは、Gitが知っているファイルをイン"
"デックスより取得し、それらを実際のツリーとしてコミットすることです。これは次"
"の2つのフェーズで行います。「ツリー」オブジェクトの作成し、そして、ツリーが何"
"であるかについての説明と、私たちがどのようにしてその状態に到達したかについて"
"の情報とともに、その「ツリー」オブジェクトを「コミット」オブジェクトとしてコ"
"ミットします。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:300
msgid ""
"Creating a tree object is trivial, and is done with 'git write-tree'.  There "
"are no options or other input: `git write-tree` will take the current index "
"state, and write an object that describes that whole index. In other words, "
"we're now tying together all the different filenames with their contents "
"(and their permissions), and we're creating the equivalent of a Git "
"\"directory\" object:"
msgstr ""
"ツリーオブジェクトの作成は至極簡単で、 `git write-tree` を使用します。オプ"
"ションやその他の入力はありません。 `git write-tree` は現在のインデックスの状"
"態を取得し、そのインデックス全体を記述するオブジェクトを書き込みます。つま"
"り、現在、すべての異なるファイル名をそれらのコンテンツ(およびそれらのアクセス"
"許可)と結び付けており、Gitの「ディレクトリ」オブジェクトに相当するものを作成"
"します:"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:303
#, no-wrap
msgid "$ git write-tree\n"
msgstr "$ git write-tree\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:307
msgid ""
"and this will just output the name of the resulting tree, in this case (if "
"you have done exactly as I've described) it should be"
msgstr ""
"これにより、結果のツリーの名前が出力されます。この場合(私が説明したとおり正確"
"に実行した場合)、以下のようになっているべきです"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:310
#, no-wrap
msgid "8988da15d077d4829fc51d8544c097def6644dbb\n"
msgstr "8988da15d077d4829fc51d8544c097def6644dbb\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:317
msgid ""
"which is another incomprehensible object name. Again, if you want to, you "
"can use `git cat-file -t 8988d...` to see that this time the object is not a "
"\"blob\" object, but a \"tree\" object (you can also use `git cat-file` to "
"actually output the raw object contents, but you'll see mainly a binary "
"mess, so that's less interesting)."
msgstr ""
"これは、別のワケワカメなオブジェクト名です。繰り返しになりますが、あなたは必"
"要に応じて、 `git cat-file -t 8988d...` を使用して、今回のオブジェクトが「ブ"
"ロブ」オブジェクトではなく「ツリー」オブジェクトであることを確認できます"
"( `git cat-file` を使用して、生のオブジェクトの内容を実際に出力することもでき"
"ますが、主にごちゃごちゃしたバイナリが見れるだけであまり面白くありません)。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:323
msgid ""
"However -- normally you'd never use 'git write-tree' on its own, because "
"normally you always commit a tree into a commit object using the 'git commit-"
"tree' command. In fact, it's easier to not actually use 'git write-tree' on "
"its own at all, but to just pass its result in as an argument to 'git commit-"
"tree'."
msgstr ""
"しかしながら、通常は `git commit-tree` コマンドを使用してツリーをコミットオブ"
"ジェクトにコミットするため、通常は `git write-tree` を単独で使用することはあ"
"りません。 実際のところ `git write-tree` を単独で使用するのではなく、その結果"
"を `git commit-tree` へ引数として渡す方が簡単です。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:330
msgid ""
"'git commit-tree' normally takes several arguments -- it wants to know what "
"the 'parent' of a commit was, but since this is the first commit ever in "
"this new repository, and it has no parents, we only need to pass in the "
"object name of the tree. However, 'git commit-tree' also wants to get a "
"commit message on its standard input, and it will write out the resulting "
"object name for the commit to its standard output."
msgstr ""
"'git commit-tree' は通常、いくつかの引数を取ります。 `git commit-tree` はコ"
"ミットの「親」が何であるかを知りたいのですが、これはこの新しいリポジトリでの"
"最初のコミットであり、親がないため、ツリーのオブジェクト名を渡すだけで済みま"
"す。ただし、 `git commit-tree` は、標準入力からコミットメッセージを取得するこ"
"とも必要です。そしてコミットの結果のオブジェクト名を標準出力に書き出します。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:336
msgid ""
"And this is where we create the `.git/refs/heads/master` file which is "
"pointed at by `HEAD`. This file is supposed to contain the reference to the "
"top-of-tree of the master branch, and since that's exactly what 'git commit-"
"tree' spits out, we can do this all with a sequence of simple shell commands:"
msgstr ""
"ここで、 `HEAD` が指す `.git/refs/heads/master` ファイルを作成します。この"
"ファイルには、masterブランチのツリーのてっぺん(top-of-tree)への参照が含まれて"
"いるはずです。これはまさに「git commit-tree」が吐き出すものなので、一連の単純"
"なシェルコマンドでこれをすべて行うことができます:"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:341
#, no-wrap
msgid ""
"$ tree=$(git write-tree)\n"
"$ commit=$(echo 'Initial commit' | git commit-tree $tree)\n"
"$ git update-ref HEAD $commit\n"
msgstr ""
"$ tree=$(git write-tree)\n"
"$ commit=$(echo 'Initial commit' | git commit-tree $tree)\n"
"$ git update-ref HEAD $commit\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:346
msgid ""
"In this case this creates a totally new commit that is not related to "
"anything else. Normally you do this only *once* for a project ever, and all "
"later commits will be parented on top of an earlier commit."
msgstr ""
"この場合に限り、他の何にも関係のないまったく新しいコミットが作成されます。 通"
"常、これはプロジェクトに対して「1回だけ」行います。このコミットはこの後のすべ"
"てのコミットの親になります。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:351
msgid ""
"Again, normally you'd never actually do this by hand. There is a helpful "
"script called `git commit` that will do all of this for you. So you could "
"have just written `git commit` instead, and it would have done the above "
"magic scripting for you."
msgstr ""
"繰り返しますが、通常、これを実際に手作業で行うことはありません。 これらすべて"
"を実行する `git commit` という便利なスクリプトがあります。 したがって、あなた"
"は代わりに `git commit` と記述すれば、上記の魔法のスクリプトが実行されます。"

#. type: Title -
#: ../Documentation-sedout/gitcore-tutorial.txt:354
#, no-wrap
msgid "Making a change"
msgstr "Making a change"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:359
msgid ""
"Remember how we did the 'git update-index' on file `hello` and then we "
"changed `hello` afterward, and could compare the new state of `hello` with "
"the state we saved in the index file?"
msgstr ""
"以前、ファイル `hello` で `git update-index` を実行し、その後 `hello` を変更"
"して、 `hello` の新しい状態を、インデックスファイルに保存した状態と比較したこ"
"とを覚えていますか？"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:366
msgid ""
"Further, remember how I said that 'git write-tree' writes the contents of "
"the *index* file to the tree, and thus what we just committed was in fact "
"the *original* contents of the file `hello`, not the new ones. We did that "
"on purpose, to show the difference between the index state, and the state in "
"the working tree, and how they don't have to match, even when we commit "
"things."
msgstr ""
"さらに、 私が `git write-tree` は「インデックス」ファイルの内容をツリーに書き"
"込むと言ったことを思い出してください。したがって、コミットしたのは、実際には"
"ファイル `hello` の「元の内容」であり、新しい内容ではありません。これは、イン"
"デックスの状態と作業ツリーの状態の違い、および私達が何かをコミットした場合で"
"もそれらが一致する必要がない事を示すために意図的に行いました。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:372
msgid ""
"As before, if we do `git diff-files -p` in our git-tutorial project, we'll "
"still see the same difference we saw last time: the index file hasn't "
"changed by the act of committing anything. However, now that we have "
"committed something, we can also learn to use a new command: 'git diff-"
"index'."
msgstr ""
"以前と同様に、git-tutorialプロジェクトで `git diff-files -p` を実行した場合で"
"も、前回と同一の差異が見られます。つまり、何かをコミットすることによってイン"
"デックスファイルが変更されていないということです。ただし、私達は何かをコミッ"
"トしたので、新しいコマンド `git diff-index` の使用方法を学ぶこともできます:"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:379
msgid ""
"Unlike 'git diff-files', which showed the difference between the index file "
"and the working tree, 'git diff-index' shows the differences between a "
"committed *tree* and either the index file or the working tree. In other "
"words, 'git diff-index' wants a tree to be diffed against, and before we did "
"the commit, we couldn't do that, because we didn't have anything to diff "
"against."
msgstr ""
"インデックスファイルと作業ツリーの違いを示した `git diff-files` とは異なり、 "
"`gitdiff-index` はコミットされたツリーと、インデックスファイルまたは作業ツ"
"リーとの違いを示します。言い換えると、 `git diff-index` はツリーとの差分する"
"ことを望んでおり、コミットする前は、そもそも差分するモノがなかったため、差分"
"を行うことができませんでした。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:381
msgid "But now we can do"
msgstr "しかし、今や私達は以下のようにできます"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:384
#, no-wrap
msgid "$ git diff-index -p HEAD\n"
msgstr "$ git diff-index -p HEAD\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:391
msgid ""
"(where `-p` has the same meaning as it did in 'git diff-files'), and it will "
"show us the same difference, but for a totally different reason.  Now we're "
"comparing the working tree not against the index file, but against the tree "
"we just wrote. It just so happens that those two are obviously the same, so "
"we get the same result."
msgstr ""
"(ここで、`-p` は `git diff-files` のと同じ意味です。) 同一の差異が表示されま"
"すが、理由はまったく異なります。これは、作業ツリーを、インデックスファイルで"
"はなく、作成したツリーと比較しています。たまたまこれら2つが明らかに同じである"
"ため、私達は同じ結果を得たのです。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:394
msgid ""
"Again, because this is a common operation, you can also just shorthand it "
"with"
msgstr ""
"繰り返しになりますが、これは一般的な操作であるため、以下のように短縮すること"
"もできます"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:397
#, no-wrap
msgid "$ git diff HEAD\n"
msgstr "$ git diff HEAD\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:400
msgid "which ends up doing the above for you."
msgstr "これで、結局は上記のようなことをやってくれます。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:407
msgid ""
"In other words, 'git diff-index' normally compares a tree against the "
"working tree, but when given the `--cached` flag, it is told to instead "
"compare against just the index cache contents, and ignore the current "
"working tree state entirely. Since we just wrote the index file to HEAD, "
"doing `git diff-index --cached -p HEAD` should thus return an empty set of "
"differences, and that's exactly what it does."
msgstr ""
"つまり、 `git diff-index｀ は通常、ツリーを作業ツリーと比較しますが、 `--"
"cached` フラグを指定すると、代わりにインデックスキャッシュの内容と比較し、現"
"在の作業ツリーの状態を完全に無視するように指示します。我々はインデックスファ"
"イルをHEADに書き込んだばかりなので、 `git diff-index --cached -p HEAD` を実行"
"すると、空の差分セットを返すはずで、これは正に指示したとおりの結果です。"

#. type: delimited block =
#: ../Documentation-sedout/gitcore-tutorial.txt:417
msgid ""
"'git diff-index' really always uses the index for its comparisons, and "
"saying that it compares a tree against the working tree is thus not strictly "
"accurate. In particular, the list of files to compare (the \"meta-data\") "
"*always* comes from the index file, regardless of whether the `--cached` "
"flag is used or not. The `--cached` flag really only determines whether the "
"file *contents* to be compared come from the working tree or not."
msgstr ""
"`git diff-index` は実際には「常に」その比較にインデックスを使用するため、ツ"
"リーを作業ツリーと比較すると言ったことは厳密には正確ではありません。特に、比"
"較するファイルのリスト(「メタデータ」(meta-data))は、 `--cached` フラグが使用"
"されているかどうかに関係なく、常にインデックスファイルから取得されます。 `--"
"cached` フラグは、実際には、比較されるファイルの「内容」が作業ツリーからのも"
"のであるか否かを決定するだけです。"

#. type: delimited block =
#: ../Documentation-sedout/gitcore-tutorial.txt:423
msgid ""
"This is not hard to understand, as soon as you realize that Git simply never "
"knows (or cares) about files that it is not told about explicitly. Git will "
"never go *looking* for files to compare, it expects you to tell it what the "
"files are, and that's what the index is there for."
msgstr ""
"これを理解するのは難しいことでは無く、すぐにあなたは、Gitが明示的に通知されて"
"いないファイルを知らない(または気にしない)ことに気付きます。Gitは比較するファ"
"イルを「探す」ことは決してありません。ファイルが何であるかを教えて貰えること"
"を期待しており、それがインデックスの目的なのです。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:431
msgid ""
"However, our next step is to commit the *change* we did, and again, to "
"understand what's going on, keep in mind the difference between \"working "
"tree contents\", \"index file\" and \"committed tree\". We have changes in "
"the working tree that we want to commit, and we always have to work through "
"the index file, so the first thing we need to do is to update the index "
"cache:"
msgstr ""
"ただし、私達の次のステップは、私達の行った変更をコミットすることです。繰り返"
"しますが、何が起こっているのかを理解するために、「作業ツリーの内容」と「イン"
"デックスファイル」と「コミットされたツリー」の違いに注意してください。私達が"
"コミットしたい作業ツリーに変更があり、私達は常にインデックスファイルを処理す"
"る必要があるため、したがって、私達が最初に行う必要があるのは、インデックス"
"キャッシュを更新することです:"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:434
#, no-wrap
msgid "$ git update-index hello\n"
msgstr "$ git update-index hello\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:438
msgid ""
"(note how we didn't need the `--add` flag this time, since Git knew about "
"the file already)."
msgstr ""
"(注意: Gitはファイルについてすでに知っていたので、私達は今回は `--add` フラグ"
"を必要としなかったことに注意してください)。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:445
msgid ""
"Note what happens to the different 'git diff-{asterisk}' versions here.  "
"After we've updated `hello` in the index, `git diff-files -p` now shows no "
"differences, but `git diff-index -p HEAD` still *does* show that the current "
"state is different from the state we committed. In fact, now 'git diff-"
"index' shows the same difference whether we use the `--cached` flag or not, "
"since now the index is coherent with the working tree."
msgstr ""
"注意: ここで、個別の `git diff-{asterisk}` バージョンには何が起こるでしょう"
"か。我々がインデックス内の `hello` を更新した後、 `git diff-files -p` は、違"
"いを示さなくなりましたが、 `git diff-index -p HEAD` は、現在の状態がコミット"
"した状態とは異なることを示しています。 実際、 `git diff-index` は、 `--"
"cached` フラグを使用するかどうかに関係なく同一の違いを示します。これは、イン"
"デックスは作業ツリーと一貫性があるためです。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:452
msgid ""
"Now, since we've updated `hello` in the index, we can commit the new "
"version. We could do it by writing the tree by hand again, and committing "
"the tree (this time we'd have to use the `-p HEAD` flag to tell commit that "
"the HEAD was the *parent* of the new commit, and that this wasn't an initial "
"commit any more), but you've done that once already, so let's just use the "
"helpful script this time:"
msgstr ""
"これで、我々はインデックス内の `hello` を更新したので、我々は新しいバージョン"
"をコミットできます。我々はもう一度手動でツリーを作成し、ツリーをコミットする"
"ことでそれを行うことができます(今回は、 `-p HEAD` フラグを使用して、HEADが新"
"しいコミットの「親」であり、これが最初のコミットではなくなったことをコミット"
"に通知する必要があります)。しかし、あなたはすでに一度この手作業を経験済みです"
"ので、今回は役立つスクリプトを使用してみましょう:"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:455
#, no-wrap
msgid "$ git commit\n"
msgstr "$ git commit\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:459
msgid ""
"which starts an editor for you to write the commit message and tells you a "
"bit about what you have done."
msgstr ""
"これにより、あなたがコミットメッセージを書き込むためのエディタが起動し、あな"
"たがさっきやった事についてちょっぴり教えてくれます。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:466
msgid ""
"Write whatever message you want, and all the lines that start with '#' will "
"be pruned out, and the rest will be used as the commit message for the "
"change. If you decide you don't want to commit anything after all at this "
"point (you can continue to edit things and update the index), you can just "
"leave an empty message. Otherwise `git commit` will commit the change for "
"you."
msgstr ""
"あなたが必要なメッセージを書き込むと、 `#` で始まるすべての行が削除され、残り"
"はこの変更のコミットメッセージとして使用されます。あなたがこの時点で結局何も"
"コミットしたくないと判断した場合(あなたは引き続き編集してインデックスを更新で"
"きます)、あなたは空のメッセージを残すことができます。それ以外の場合、 `git "
"commit` は変更をコミットします。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:472
msgid ""
"You've now made your first real Git commit. And if you're interested in "
"looking at what `git commit` really does, feel free to investigate: it's a "
"few very simple shell scripts to generate the helpful (?) commit message "
"headers, and a few one-liners that actually do the commit itself ('git "
"commit')."
msgstr ""
"これで、最初の実際のGitコミットが完了しました。 `git commit` が実際に何をする"
"のかを知りたい場合は、お気軽に調査してください。役立つ(？)コミットメッセージ"
"ヘッダーを生成するための非常に単純なシェルスクリプトがいくつかあり、そして実"
"際にコミット自体を行ういくつかのワンライナーがあります(`git commit`)。"

#. type: Title -
#: ../Documentation-sedout/gitcore-tutorial.txt:475
#, no-wrap
msgid "Inspecting Changes"
msgstr "Inspecting Changes"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:480
msgid ""
"While creating changes is useful, it's even more useful if you can tell "
"later what changed. The most useful command for this is another of the "
"'diff' family, namely 'git diff-tree'."
msgstr ""
"変更を作成することは便利ですが、後で何が変更されたかを知ることができればさら"
"に便利です。このための最も便利なコマンドは、diffファミリーのもう1つ、つまり "
"`git diff-tree` です。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:486
msgid ""
"'git diff-tree' can be given two arbitrary trees, and it will tell you the "
"differences between them. Perhaps even more commonly, though, you can give "
"it just a single commit object, and it will figure out the parent of that "
"commit itself, and show the difference directly. Thus, to get the same diff "
"that we've already seen several times, we can now do"
msgstr ""
"`git diff-tree` には任意の2つのツリーを指定でき、それらの間の違いがわかりま"
"す。けれども、おそらくもっと一般的には、あなたはコミットオブジェクトを1つだけ"
"与えることができ、そうすると、そのコミット自体の親を把握し、違いを直接表示し"
"ます。したがって、すでに数回見たのと同一のdiffを取得するために、以下のように"
"することができます"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:489
#, no-wrap
msgid "$ git diff-tree -p HEAD\n"
msgstr "$ git diff-tree -p HEAD\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:493
msgid ""
"(again, `-p` means to show the difference as a human-readable patch), and it "
"will show what the last commit (in `HEAD`) actually changed."
msgstr ""
"(繰り返しになりますが、 `-p` は人間が読めるパッチとして違いを表示することを意"
"味します)、(`HEAD` が指す)最後のコミットが実際に何を変更したかを表示します。"

#. type: delimited block =
#: ../Documentation-sedout/gitcore-tutorial.txt:498
msgid ""
"Here is an ASCII art by Jon Loeliger that illustrates how various 'diff-"
"{asterisk}' commands compare things."
msgstr ""
"以下は、さまざまな `diff-{asterisk}` コマンドが物事を比較する方法を表す、Jon "
"Loeliger によるアスキーアートです。"

#. type: delimited block =
#: ../Documentation-sedout/gitcore-tutorial.txt:527
#, no-wrap
msgid ""
"                      diff-tree\n"
"                       +----+\n"
"                       |    |\n"
"                       |    |\n"
"                       V    V\n"
"                    +-----------+\n"
"                    | Object DB |\n"
"                    |  Backing  |\n"
"                    |   Store   |\n"
"                    +-----------+\n"
"                      ^    ^\n"
"                      |    |\n"
"                      |    |  diff-index --cached\n"
"                      |    |\n"
"          diff-index  |    V\n"
"                      |  +-----------+\n"
"                      |  |   Index   |\n"
"                      |  |  \"cache\"  |\n"
"                      |  +-----------+\n"
"                      |    ^\n"
"                      |    |\n"
"                      |    |  diff-files\n"
"                      |    |\n"
"                      V    V\n"
"                    +-----------+\n"
"                    |  Working  |\n"
"                    | Directory |\n"
"                    +-----------+\n"
msgstr ""
"                      diff-tree\n"
"                       +----+\n"
"                       |    |\n"
"                       |    |\n"
"                       V    V\n"
"                    +-----------+\n"
"                    | Object DB |\n"
"                    |  Backing  |\n"
"                    |   Store   |\n"
"                    +-----------+\n"
"                      ^    ^\n"
"                      |    |\n"
"                      |    |  diff-index --cached\n"
"                      |    |\n"
"          diff-index  |    V\n"
"                      |  +-----------+\n"
"                      |  |   Index   |\n"
"                      |  |  \"cache\"  |\n"
"                      |  +-----------+\n"
"                      |    ^\n"
"                      |    |\n"
"                      |    |  diff-files\n"
"                      |    |\n"
"                      V    V\n"
"                    +-----------+\n"
"                    |  Working  |\n"
"                    | Directory |\n"
"                    +-----------+\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:534
msgid ""
"More interestingly, you can also give 'git diff-tree' the `--pretty` flag, "
"which tells it to also show the commit message and author and date of the "
"commit, and you can tell it to show a whole series of diffs.  Alternatively, "
"you can tell it to be \"silent\", and not show the diffs at all, but just "
"show the actual commit message."
msgstr ""
"さらに興味深いことに、 `git diff-tree` に `--pretty` フラグを指定することもで"
"きます。これにより、コミットメッセージと作者とコミットの日付も表示され、一連"
"のdiff全体を表示するように指示します。または、「黙って」(silent)と指示して、"
"差分をまったく表示せずに実際のコミットメッセージを表示することもできます。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:540
msgid ""
"In fact, together with the 'git rev-list' program (which generates a list of "
"revisions), 'git diff-tree' ends up being a veritable fount of changes.  You "
"can emulate `git log`, `git log -p`, etc. with a trivial script that pipes "
"the output of `git rev-list` to `git diff-tree --stdin`, which was exactly "
"how early versions of `git log` were implemented."
msgstr ""
"実際には、 (リビジョンのリストを生成する) `git rev-list` プログラムと一緒に使"
"うことで、 `git diff-tree`  は、正に変更の源泉と化します。 `git rev-list` の"
"出力を `git diff-tree --stdin` にパイプする簡単なスクリプトを使用して、 `git "
"log` や `git log -p` などをエミュレートできます。これは正に初期バージョンの "
"`git log` が実装された方法でした。"

#. type: Title -
#: ../Documentation-sedout/gitcore-tutorial.txt:543
#, no-wrap
msgid "Tagging a version"
msgstr "Tagging a version"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:546
msgid ""
"In Git, there are two kinds of tags, a \"light\" one, and an \"annotated tag"
"\"."
msgstr ""
"Gitには、「軽い」(light)タグと「注釈付きタグ」(annotated tag)の2種類のタグが"
"あります。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:550
msgid ""
"A \"light\" tag is technically nothing more than a branch, except we put it "
"in the `.git/refs/tags/` subdirectory instead of calling it a `head`.  So "
"the simplest form of tag involves nothing more than"
msgstr ""
"「軽い」タグは、 ヘッドと呼ぶ代わりに `.git/refs/tags/` サブディレクトリに配"
"置することを除いて、技術的にはブランチ以上のものではありません。したがって、"
"最も単純な形式のタグは以下のようになります"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:553
#, no-wrap
msgid "$ git tag my-first-tag\n"
msgstr "$ git tag my-first-tag\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:558
msgid ""
"which just writes the current `HEAD` into the `.git/refs/tags/my-first-tag` "
"file, after which point you can then use this symbolic name for that "
"particular state. You can, for example, do"
msgstr ""
"これは、現在の HEAD を `.git/refs/tags/my-first-tag` ファイルに書き込むだけで"
"す。その後は、その特定の状態にこのシンボル名を使用できます。たとえば、以下の"
"ことができます"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:561
#, no-wrap
msgid "$ git diff my-first-tag\n"
msgstr "$ git diff my-first-tag\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:567
msgid ""
"to diff your current state against that tag which at this point will "
"obviously be an empty diff, but if you continue to develop and commit stuff, "
"you can use your tag as an \"anchor-point\" to see what has changed since "
"you tagged it."
msgstr ""
"あなたの現在の状態をそのタグとdiffします。この時点では明らかに空のdiffになり"
"ますが、あなたが開発とコミットを続ければ、タグを「アンカーポイント」として使"
"用して、あなたがタグを付けてから何が変更されたかを確認できます。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:574
msgid ""
"An \"annotated tag\" is actually a real Git object, and contains not only a "
"pointer to the state you want to tag, but also a small tag name and message, "
"along with optionally a PGP signature that says that yes, you really did "
"that tag. You create these annotated tags with either the `-a` or `-s` flag "
"to 'git tag':"
msgstr ""
"「注釈付きタグ」(annotated tag)は現実には実際のGitオブジェクトです。タグ付け"
"する状態へのポインタだけでなく、小さなタグ名とメッセージ、およびオプションで"
"「はい、あなたは実際にそのタグを作成した」というPGP署名もあります。これらの注"
"釈付きタグは、 `git tag`  に対して `-a` または `-s` フラグを使用して作成しま"
"す:"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:577
#, no-wrap
msgid "$ git tag -s <tagname>\n"
msgstr "$ git tag -s <tagname>\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:582
msgid ""
"which will sign the current `HEAD` (but you can also give it another "
"argument that specifies the thing to tag, e.g., you could have tagged the "
"current `mybranch` point by using `git tag <tagname> mybranch`)."
msgstr ""
"これは現在の`HEAD`に署名します(しかし、あなたはタグ付けするものを指定する別の"
"引数を指定することもできます。たとえば、 `git tag <tagname> mybranch` を使用"
"して現在の `mybranch` ポイントにタグを付けることができます)。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:588
msgid ""
"You normally only do signed tags for major releases or things like that, "
"while the light-weight tags are useful for any marking you want to do -- any "
"time you decide that you want to remember a certain point, just create a "
"private tag for it, and you have a nice symbolic name for the state at that "
"point."
msgstr ""
"あなたは、通常は、メジャーリリースなどの署名付きタグ付けのみを行いますが、軽"
"量タグ(light-weight tags)は、あなたがマーキングしたい時に便利です。つまり、特"
"定のポイントを覚えておきたいと思ったときはいつでも、そのポイントのプライベー"
"トタグを作成するだけで、その時点の状態の適切なシンボル名が得られます。"

#. type: Title -
#: ../Documentation-sedout/gitcore-tutorial.txt:591
#, no-wrap
msgid "Copying repositories"
msgstr "Copying repositories"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:598
msgid ""
"Git repositories are normally totally self-sufficient and relocatable.  "
"Unlike CVS, for example, there is no separate notion of \"repository\" and "
"\"working tree\". A Git repository normally *is* the working tree, with the "
"local Git information hidden in the `.git` subdirectory. There is nothing "
"else. What you see is what you got."
msgstr ""
"Gitリポジトリは通常、完全に自給自足で再配置可能です。たとえば、CVSとは異な"
"り、「リポジトリ」と「作業ツリー」という別個の概念はありません。Gitリポジトリ"
"は通常、作業ツリーであり、ローカルのGit情報は `.git` サブディレクトリに隠され"
"ています。他には何もありません。あなたが見たそのままです。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:606
msgid ""
"You can tell Git to split the Git internal information from the directory "
"that it tracks, but we'll ignore that for now: it's not how normal projects "
"work, and it's really only meant for special uses.  So the mental model of "
"\"the Git information is always tied directly to the working tree that it "
"describes\" may not be technically 100% accurate, but it's a good model for "
"all normal use."
msgstr ""
"あなたは、追跡中のディレクトリからGitの内部情報を分割するようにGitに指示でき"
"ますが、我々は今のところはそれを無視します。なぜならそれは、通常のプロジェク"
"トの仕組みでなく、本当に特別な用途のためだけのものだからです。よって、「Git情"
"報は、それが記述する作業ツリーに常に直接関連付けられている」という概念は技術"
"的には100%正確ではない可能性がありますが、通常はそれで通ります。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:608
msgid "This has two implications:"
msgstr "これには2つの意味があります:"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:611
msgid ""
"if you grow bored with the tutorial repository you created (or you've made a "
"mistake and want to start all over), you can just do simple"
msgstr ""
"あなたが、作成したチュートリアルリポジトリに飽きてしまった場合(または間違えて"
"最初からやり直したい場合)は、単純に以下のようにするだけです"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:614
#, no-wrap
msgid "$ rm -rf git-tutorial\n"
msgstr "$ rm -rf git-tutorial\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:618
msgid ""
"and it will be gone. There's no external repository, and there's no history "
"outside the project you created."
msgstr ""
"そしてそれはなくなります。外部リポジトリはありませんし、あなたが作成したプロ"
"ジェクト以外に履歴はありません。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:624
msgid ""
"if you want to move or duplicate a Git repository, you can do so. There is "
"'git clone' command, but if all you want to do is just to create a copy of "
"your repository (with all the full history that went along with it), you can "
"do so with a regular `cp -a git-tutorial new-git-tutorial`."
msgstr ""
"あなたがGitリポジトリを移動または複製する場合は、あなたはそうすることができま"
"す。 `git clone` コマンドがありますが、リポジトリ(と、それに伴うすべての完全"
"な履歴とともに)のコピーを作成するだけの場合は、通常の `cp -a git-tutorial "
"new-git-tutorial` を使用して作成できます。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:629
msgid ""
"Note that when you've moved or copied a Git repository, your Git index file "
"(which caches various information, notably some of the \"stat\" information "
"for the files involved) will likely need to be refreshed.  So after you do a "
"`cp -a` to create a new copy, you'll want to do"
msgstr ""
"注意: Gitリポジトリを移動またはコピーした場合、Gitインデックスファイル(さまざ"
"まな情報、特に関連するファイルの「統計」情報の一部をキャッシュする)を更新する"
"必要がある可能性があることに注意してください。したがって、 `cp -a` を実行して"
"新しいコピーを作成した後、あなたは以下を実行する必要があります"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:632
#, no-wrap
msgid "$ git update-index --refresh\n"
msgstr "$ git update-index --refresh\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:635
msgid "in the new repository to make sure that the index file is up to date."
msgstr ""
"これは、新しいリポジトリで、インデックスファイルが最新であることを確認しま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:639
msgid ""
"Note that the second point is true even across machines. You can duplicate a "
"remote Git repository with *any* regular copy mechanism, be it 'scp', "
"'rsync' or 'wget'."
msgstr ""
"注意: 2番目のポイントは、PC間でも当てはまることに注意してください。scpやrsync"
"やwget等々、通常のコピーメカニズムを使用してリモートGitリポジトリを複製できま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:645
msgid ""
"When copying a remote repository, you'll want to at a minimum update the "
"index cache when you do this, and especially with other peoples' "
"repositories you often want to make sure that the index cache is in some "
"known state (you don't know *what* they've done and not yet checked in), so "
"usually you'll precede the 'git update-index' with a"
msgstr ""
"リモートリポジトリをコピーするときは、あなたは、これを行うときに少なくともイ"
"ンデックスキャッシュを更新する必要があります。特に、他の人のリポジトリでは、"
"インデックスキャッシュが既知の状態(あなたには、彼らが何をしたのか、まだチェッ"
"クインしていないのかわかりません)にあることを確認する必要があるため、通常は "
"`git update-index` の前に以下のようにします。"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:649
#, no-wrap
msgid ""
"$ git read-tree --reset HEAD\n"
"$ git update-index --refresh\n"
msgstr ""
"$ git read-tree --reset HEAD\n"
"$ git update-index --refresh\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:657
msgid ""
"which will force a total index re-build from the tree pointed to by `HEAD`.  "
"It resets the index contents to `HEAD`, and then the 'git update-index' "
"makes sure to match up all index entries with the checked-out files.  If the "
"original repository had uncommitted changes in its working tree, `git update-"
"index --refresh` notices them and tells you they need to be updated."
msgstr ""
"これにより、`HEAD` が指すツリーからインデックス全体が再構築されます。それはイ"
"ンデックスの内容を `HEAD` にリセットし、 `git update-index` がすべてのイン"
"デックスエントリをチェックアウトされたファイルと一致させるようにします。元の"
"リポジトリの作業ツリーにコミットされていない変更があった場合、 `git update-"
"index --refresh` はそれらに気づき、更新する必要があることをあなたに通知しま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:659
msgid "The above can also be written as simply"
msgstr "上記は以下のように簡単に書くこともできます"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:662
#, no-wrap
msgid "$ git reset\n"
msgstr "$ git reset\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:670
msgid ""
"and in fact a lot of the common Git command combinations can be scripted "
"with the `git xyz` interfaces.  You can learn things by just looking at what "
"the various git scripts do.  For example, `git reset` used to be the above "
"two lines implemented in 'git reset', but some things like 'git status' and "
"'git commit' are slightly more complex scripts around the basic Git commands."
msgstr ""
"実際、一般的なGitコマンドの組み合わせの多くは、 `git xyz` インターフェースを"
"使用してスクリプト化できます。あなたは、さまざまなgitスクリプトが何をするかを"
"見るだけで、物事を学ぶことができます。たとえば、 `git reset` は、以前は上記2"
"行を記述したものでした。ただし、 `git status` や `git commit` などのいくつか"
"は、基本的なGitコマンドを中心とした少し複雑なスクリプトです。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:676
msgid ""
"Many (most?) public remote repositories will not contain any of the checked "
"out files or even an index file, and will *only* contain the actual core Git "
"files. Such a repository usually doesn't even have the `.git` subdirectory, "
"but has all the Git files directly in the repository."
msgstr ""
"多くの(ほとんどの？)パブリックリモートリポジトリには、チェックアウトされた"
"ファイルやインデックスファイルすら含まれず、実際のコアGitファイルのみが含まれ"
"ます。このようなリポジトリには通常、 `.git` サブディレクトリすらなく、すべて"
"のGitファイルが直接リポジトリにあります。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:681
msgid ""
"To create your own local live copy of such a \"raw\" Git repository, you'd "
"first create your own subdirectory for the project, and then copy the raw "
"repository contents into the `.git` directory. For example, to create your "
"own copy of the Git repository, you'd do the following"
msgstr ""
"このような「生の」Gitリポジトリのあなた独自のローカルな活きたコピー(local "
"live copy)を作成するには、最初にプロジェクト用の独自のサブディレクトリを作成"
"し、次に生のリポジトリの内容を `.git` ディレクトリにコピーします。たとえば、"
"Gitリポジトリのあなた独自のコピーを作成するには、以下のようにします"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:686
#, no-wrap
msgid ""
"$ mkdir my-git\n"
"$ cd my-git\n"
"$ rsync -rL rsync://rsync.kernel.org/pub/scm/git/git.git/ .git\n"
msgstr ""
"$ mkdir my-git\n"
"$ cd my-git\n"
"$ rsync -rL rsync://rsync.kernel.org/pub/scm/git/git.git/ .git\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:689
msgid "followed by"
msgstr "これに、以下が続きます"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:692
#, no-wrap
msgid "$ git read-tree HEAD\n"
msgstr "$ git read-tree HEAD\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:698
msgid ""
"to populate the index. However, now you have populated the index, and you "
"have all the Git internal files, but you will notice that you don't actually "
"have any of the working tree files to work on. To get those, you'd check "
"them out with"
msgstr ""
"インデックスにデータを入力します。ただし、これでインデックスにデータが入力さ"
"れ、すべてのGit内部ファイルが作成されましたが、実際に作業するツリーファイルが"
"ないことに気付くでしょう。 それらを取得するには、以下のようにしてそれらを"
"チェックアウトします"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:701
#, no-wrap
msgid "$ git checkout-index -u -a\n"
msgstr "$ git checkout-index -u -a\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:709
msgid ""
"where the `-u` flag means that you want the checkout to keep the index up to "
"date (so that you don't have to refresh it afterward), and the `-a` flag "
"means \"check out all files\" (if you have a stale copy or an older version "
"of a checked out tree you may also need to add the `-f` flag first, to tell "
"'git checkout-index' to *force* overwriting of any old files)."
msgstr ""
"ここで、 `-u` フラグは、(後で更新する必要がないように)チェックアウトでイン"
"デックスを最新の状態に保つことを意味し、 `-a` フラグは「すべてのファイルを"
"チェックアウトする」ことを意味します(古いコピーまたはチェックアウトされたツ"
"リーの古いバージョンがある場合は、最初に `-f` フラグを追加して、 `git "
"checkout-index` に古いファイルの上書きを「強制」するように指示する必要がある"
"事があります)。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:711
msgid "Again, this can all be simplified with"
msgstr "繰り返しますが、これはすべて以下のように簡略化できます"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:716
#, no-wrap
msgid ""
"$ git clone git://git.kernel.org/pub/scm/git/git.git/ my-git\n"
"$ cd my-git\n"
"$ git checkout\n"
msgstr ""
"$ git clone git://git.kernel.org/pub/scm/git/git.git/ my-git\n"
"$ cd my-git\n"
"$ git checkout\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:719
msgid "which will end up doing all of the above for you."
msgstr "これは正に上記のすべてを行います。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:722
msgid ""
"You have now successfully copied somebody else's (mine) remote repository, "
"and checked it out."
msgstr ""
"これで、あなたは、他の誰か誰か(またはあなた自身の)のリモートリポジトリをコ"
"ピーし、チェックアウトすることに成功しました。"

#. type: Title -
#: ../Documentation-sedout/gitcore-tutorial.txt:725
#, no-wrap
msgid "Creating a new branch"
msgstr "Creating a new branch"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:731
msgid ""
"Branches in Git are really nothing more than pointers into the Git object "
"database from within the `.git/refs/` subdirectory, and as we already "
"discussed, the `HEAD` branch is nothing but a symlink to one of these object "
"pointers."
msgstr ""
"Gitのブランチは、実際には `.git/refs/` サブディレクトリ内からGitオブジェクト"
"データベースへのポインタにすぎません。すでに説明したように、`HEAD` ブランチは"
"これらのオブジェクトポインタの1つへのシンボリックリンクにすぎません。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:738
msgid ""
"You can at any time create a new branch by just picking an arbitrary point "
"in the project history, and just writing the SHA-1 name of that object into "
"a file under `.git/refs/heads/`. You can use any filename you want (and "
"indeed, subdirectories), but the convention is that the \"normal\" branch is "
"called `master`. That's just a convention, though, and nothing enforces it."
msgstr ""
"あなたはプロジェクト履歴の任意のポイントを選択し、そのオブジェクトのSHA-1名"
"を `.git/refs/heads/` の下のファイルに書き込むだけで、いつでも新しいブランチ"
"を作成できます。任意のファイル名(実際にはサブディレクトリ名)を使用できます"
"が、慣例では、「通常の」ブランチ(normal branch)は「master」と呼ばれます。 た"
"だし、これは単なる慣例であり、強制されるものではありません。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:742
msgid ""
"To show that as an example, let's go back to the git-tutorial repository we "
"used earlier, and create a branch in it. You do that by simply just saying "
"that you want to check out a new branch:"
msgstr ""
"これを例として示すために、以前使用したgit-tutorialリポジトリに戻り、その中に"
"ブランチを作成しましょう。これを行うには、あなたは新しいブランチをチェックア"
"ウトしたいと言うだけです:"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:745
#, no-wrap
msgid "$ git switch -c mybranch\n"
msgstr "$ git switch -c mybranch\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:749
msgid ""
"will create a new branch based at the current `HEAD` position, and switch to "
"it."
msgstr ""
"現在の `HEAD` 位置に基づいて新しいブランチを作成し、それに切り替えます。"

#. type: delimited block =
#: ../Documentation-sedout/gitcore-tutorial.txt:756
msgid ""
"If you make the decision to start your new branch at some other point in the "
"history than the current `HEAD`, you can do so by just telling 'git switch' "
"what the base of the checkout would be.  In other words, if you have an "
"earlier tag or branch, you'd just do"
msgstr ""
"あなたが、履歴の現在のHEAD以外の時点で新しいブランチを開始することを決定した"
"場合は、 `git switch` にチェックアウトの起点を指定するだけで開始できます。 言"
"い換えれば、以前に作ったタグまたはブランチがある場合は以下のようにします。"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:759
#, no-wrap
msgid "$ git switch -c mybranch earlier-commit\n"
msgstr "$ git switch -c mybranch earlier-commit\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:763
msgid ""
"and it would create the new branch `mybranch` at the earlier commit, and "
"check out the state at that time."
msgstr ""
"そうすると、これは以前のコミットにて新しいブランチ `mybranch` を作成し、その"
"時の状態をチェックアウトします。"

#. type: delimited block =
#: ../Documentation-sedout/gitcore-tutorial.txt:766
msgid "You can always just jump back to your original `master` branch by doing"
msgstr ""
"以下のように実行することで、あなたはいつでも元の `master` ブランチに戻ること"
"ができます"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:769
#: ../Documentation-sedout/gitcore-tutorial.txt:829
#, no-wrap
msgid "$ git switch master\n"
msgstr "$ git switch master\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:773
msgid ""
"(or any other branch-name, for that matter) and if you forget which branch "
"you happen to be on, a simple"
msgstr ""
"(または、その他のブランチ名を指定します。) そして、あなたがたまたまどのブラン"
"チにいるのかを忘れた場合は、単純に以下のようにします。"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:776
#, no-wrap
msgid "$ cat .git/HEAD\n"
msgstr "$ cat .git/HEAD\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:780
msgid ""
"will tell you where it's pointing.  To get the list of branches you have, "
"you can say"
msgstr ""
"とすると、それが指している場所を教えてくれます。あなたが持っているブランチの"
"リストを取得するには、以下のようにします。"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:783
#, no-wrap
msgid "$ git branch\n"
msgstr "$ git branch\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:787
msgid ""
"which used to be nothing more than a simple script around `ls .git/refs/"
"heads`.  There will be an asterisk in front of the branch you are currently "
"on."
msgstr ""
"これは、以前は、 `ls .git/refs/heads` を囲む単純なスクリプトにすぎませんでし"
"た。それはそれとして、これは、現在使用しているブランチの前にアスタリスクが表"
"示されます。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:790
msgid ""
"Sometimes you may wish to create a new branch _without_ actually checking it "
"out and switching to it. If so, just use the command"
msgstr ""
"実際にチェックアウトして切り替えることなく、新しいブランチを作成したい場合が"
"あります。その場合は、以下のコマンドを使用してください"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:793
#, no-wrap
msgid "$ git branch <branchname> [startingpoint]\n"
msgstr "$ git branch <branchname> [startingpoint]\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:799
msgid ""
"which will simply _create_ the branch, but will not do anything further.  "
"You can then later -- once you decide that you want to actually develop on "
"that branch -- switch to that branch with a regular 'git switch' with the "
"branchname as the argument."
msgstr ""
"これは単にブランチを作成しますが、それ以上は何もしません。 その後 -- そのブラ"
"ンチで実際に開発することを決定したら -- 引数としてブランチ名を使用して、通常"
"の `git switch `を使用してそのブランチに切り替えることができます。"

#. type: Title -
#: ../Documentation-sedout/gitcore-tutorial.txt:802
#, no-wrap
msgid "Merging two branches"
msgstr "Merging two branches"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:809
msgid ""
"One of the ideas of having a branch is that you do some (possibly "
"experimental) work in it, and eventually merge it back to the main branch. "
"So assuming you created the above `mybranch` that started out being the same "
"as the original `master` branch, let's make sure we're in that branch, and "
"do some work there."
msgstr ""
"ブランチを持つことのアイデアの1つは、ブランチでいくつかの(おそらく実験的な)作"
"業を行い、最終的にそれをメインブランチにマージすることです。したがって、元の "
"`master` ブランチと同じである、上記の `mybranch` を作成したと仮定して、我々が"
"そのブランチにいることを確認し、そこでいくつかの作業を行いましょう。"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:814
#, no-wrap
msgid ""
"$ git switch mybranch\n"
"$ echo \"Work, work, work\" >>hello\n"
"$ git commit -m \"Some work.\" -i hello\n"
msgstr ""
"$ git switch mybranch\n"
"$ echo \"Work, work, work\" >>hello\n"
"$ git commit -m \"Some work.\" -i hello\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:822
msgid ""
"Here, we just added another line to `hello`, and we used a shorthand for "
"doing both `git update-index hello` and `git commit` by just giving the "
"filename directly to `git commit`, with an `-i` flag (it tells Git to "
"'include' that file in addition to what you have done to the index file so "
"far when making the commit).  The `-m` flag is to give the commit log "
"message from the command line."
msgstr ""
"ここでは、 `hello` に別の行を追加し、 `-i` フラグ(コミット時にこれまでにイン"
"デックスファイルに対して行ったことに加えて、そのファイルを「含める」ようにGit"
"に指示)を使用してファイル名を `git commit` に直接指定する、 `git update-"
"index hello` と `git commit` の両方を実行するための省略形を使用しました。 `-"
"m` フラグは、コマンドラインからコミットログメッセージを指定するためのもので"
"す。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:826
msgid ""
"Now, to make it a bit more interesting, let's assume that somebody else does "
"some work in the original branch, and simulate that by going back to the "
"master branch, and editing the same file differently there:"
msgstr ""
"ここで、もう少し面白くするために、他の誰かが元のブランチで何らかの作業を行っ"
"ていると仮定し、マスターブランチに戻って同じファイルを別の方法で編集すること"
"により、それをシミュレートします:"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:834
msgid ""
"Here, take a moment to look at the contents of `hello`, and notice how they "
"don't contain the work we just did in `mybranch` -- because that work hasn't "
"happened in the `master` branch at all. Then do"
msgstr ""
"ここで、 `hello` の内容を確認して、あなたが `mybranch` で行った作業が含まれて"
"いないことに注目してください。その作業は `master` ブランチではまったく行われ"
"ていないためです。確認後、以下のようにします"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:839
#, no-wrap
msgid ""
"$ echo \"Play, play, play\" >>hello\n"
"$ echo \"Lots of fun\" >>example\n"
"$ git commit -m \"Some fun.\" -i hello example\n"
msgstr ""
"$ echo \"Play, play, play\" >>hello\n"
"$ echo \"Lots of fun\" >>example\n"
"$ git commit -m \"Some fun.\" -i hello example\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:842
msgid "since the master branch is obviously in a much better mood."
msgstr "masterブランチもいい感じになってきました。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:846
msgid ""
"Now, you've got two branches, and you decide that you want to merge the work "
"done. Before we do that, let's introduce a cool graphical tool that helps "
"you view what's going on:"
msgstr ""
"いまや、2つのブランチがあり、あなたは完了した作業をマージすることにしまし"
"た。 その前に、何が起こっているのかを確認するのに役立つクールなグラフィカル"
"ツールを紹介しましょう:"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:849
#, no-wrap
msgid "$ gitk --all\n"
msgstr "$ gitk --all\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:855
msgid ""
"will show you graphically both of your branches (that's what the `--all` "
"means: normally it will just show you your current `HEAD`) and their "
"histories. You can also see exactly how they came to be from a common source."
msgstr ""
"あなたのブランチ(これが `--all` の意味です。通常は、現在の `HEAD` が表示され"
"ます)とその履歴の両方をグラフィカルに表示します。また、それらがどのようにして"
"共通のソースから得られたのかを正確に確認することもできます。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:861
msgid ""
"Anyway, let's exit 'gitk' (`^Q` or the File menu), and decide that we want "
"to merge the work we did on the `mybranch` branch into the `master` branch "
"(which is currently our `HEAD` too). To do that, there's a nice script "
"called 'git merge', which wants to know which branches you want to resolve "
"and what the merge is all about:"
msgstr ""
"とにかく、 'gitk' を終了( `^Q` または Fileメニュー)し、 `mybranch` ブランチで"
"行った作業を `master` ブランチ（現在は `HEAD` でもあります)にマージすることに"
"します。これを行うために、 `git merge` と呼ばれる優れたスクリプトがあり、それ"
"は、あなたがどのブランチを解決したいのか、そのマージが何なのかを知りたがって"
"います:"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:864
#, no-wrap
msgid "$ git merge -m \"Merge work in mybranch\" mybranch\n"
msgstr "$ git merge -m \"Merge work in mybranch\" mybranch\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:868
msgid ""
"where the first argument is going to be used as the commit message if the "
"merge can be resolved automatically."
msgstr ""
"マージを自動的に解決できる場合は、最初の引数がコミットメッセージとして使用さ"
"れます。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:873
msgid ""
"Now, in this case we've intentionally created a situation where the merge "
"will need to be fixed up by hand, though, so Git will do as much of it as it "
"can automatically (which in this case is just merge the `example` file, "
"which had no differences in the `mybranch` branch), and say:"
msgstr ""
"さて、今回は、マージを手動で修正する必要がある状況を意図的に作成したので、Git"
"は可能な限り多くのことを自動的に実行(この場合は、 `mybranch` ブランチの、差異"
"がない `example` ファイルをマージするだけ)した上で、以下のように言います:"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:878
#, no-wrap
msgid ""
"\tAuto-merging hello\n"
"\tCONFLICT (content): Merge conflict in hello\n"
"\tAutomatic merge failed; fix conflicts and then commit the result.\n"
msgstr ""
"\tAuto-merging hello\n"
"\tCONFLICT (content): Merge conflict in hello\n"
"\tAutomatic merge failed; fix conflicts and then commit the result.\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:882
msgid ""
"It tells you that it did an \"Automatic merge\", which failed due to "
"conflicts in `hello`."
msgstr ""
"これは、「自動マージ」(Automatic merge)を実行したら `hello` の競合が原因で失"
"敗したと表示しています。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:887
msgid ""
"Not to worry. It left the (trivial) conflict in `hello` in the same form you "
"should already be well used to if you've ever used CVS, so let's just open "
"`hello` in our editor (whatever that may be), and fix it up somehow.  I'd "
"suggest just making it so that `hello` contains all four lines:"
msgstr ""
"でも心配無用。これにより、あなたがCVSを使ったことがあるなら既に慣れている形式"
"で `hello` に競合を残したので、エディタで `hello` を開いて、なんとかして修正"
"しましょう。私は `hello`に4行すべてが含まれるようにすることを提案することにし"
"ます:"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:893
#, no-wrap
msgid ""
"Hello World\n"
"It's a new day for git\n"
"Play, play, play\n"
"Work, work, work\n"
msgstr ""
"Hello World\n"
"It's a new day for git\n"
"Play, play, play\n"
"Work, work, work\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:896
msgid "and once you're happy with your manual merge, just do a"
msgstr "手動マージに満足したら、以下の手順を実行します。"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:899
#, no-wrap
msgid "$ git commit -i hello\n"
msgstr "$ git commit -i hello\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:904
msgid ""
"which will very loudly warn you that you're now committing a merge (which is "
"correct, so never mind), and you can write a small merge message about your "
"adventures in 'git merge'-land."
msgstr ""
"これは、現在マージをコミットしていることを非常に大声で警告します(今回は正しい"
"事をしているので、警告は気にしないでください)。また、あなたは `git merge` 遊"
"園地でのあなたの冒険についての小さなマージメッセージを書くことができます。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:911
msgid ""
"After you're done, start up `gitk --all` to see graphically what the history "
"looks like. Notice that `mybranch` still exists, and you can switch to it, "
"and continue to work with it if you want to. The `mybranch` branch will not "
"contain the merge, but next time you merge it from the `master` branch, Git "
"will know how you merged it, so you'll not have to do _that_ merge again."
msgstr ""
"完了したら、 `gitk --all` を起動して、履歴がどのように表示されるかをグラフィ"
"カルに確認します。 `mybranch` はまだ存在していることに注意してください。これ"
"に切り替えて、必要に応じて作業を続けることができます。 `mybranch` ブランチに"
"はそのマージが含まれませんが、次回 `master` ブランチにてそれをマージするとき"
"に、Gitはそれがどのようにマージされたかを知っているため、再度マージを行う必要"
"はありません。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:914
msgid ""
"Another useful tool, especially if you do not always work in X-Window "
"environment, is `git show-branch`."
msgstr ""
"X-Window環境で常に作業するわけではない場合、もう1つの便利ツールは、 `git "
"show-branch` です。"

# ※原文修正
#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:923
#, no-wrap
msgid ""
"$ git show-branch --topo-order --more=1 master mybranch\n"
"* [master] Merge work in mybranch\n"
" ! [mybranch] Some work.\n"
"\\--\n"
"-  [master] Merge work in mybranch\n"
"*+ [mybranch] Some work.\n"
"*  [master^] Some fun.\n"
msgstr ""
"$ git show-branch --topo-order --more=1 master mybranch\n"
"* [master] Merge work in mybranch\n"
" ! [mybranch] Some work.\n"
"--\n"
"-  [master] Merge work in mybranch\n"
"*+ [mybranch] Some work.\n"
"*  [master^] Some fun.\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:942
msgid ""
"The first two lines indicate that it is showing the two branches with the "
"titles of their top-of-the-tree commits, you are currently on `master` "
"branch (notice the asterisk `*` character), and the first column for the "
"later output lines is used to show commits contained in the `master` branch, "
"and the second column for the `mybranch` branch. Three commits are shown "
"along with their titles.  All of them have non blank characters in the first "
"column (`*` shows an ordinary commit on the current branch, `-` is a merge "
"commit), which means they are now part of the `master` branch. Only the "
"\"Some work\" commit has the plus `+` character in the second column, "
"because `mybranch` has not been merged to incorporate these commits from the "
"master branch.  The string inside brackets before the commit log message is "
"a short name you can use to name the commit.  In the above example, 'master' "
"and 'mybranch' are branch heads.  'master^' is the first parent of 'master' "
"branch head.  Please see linkgit:gitrevisions[7] if you want to see more "
"complex cases."
msgstr ""
"最初の2行は、ツリーの最上位コミットのタイトル付の2つのブランチを示していま"
"す。あなたは現在(アスタリスク `*` 文字に注意)、 `master` ブランチを使用してお"
"り、その後の出力行は、 `master` ブランチに含まれるコミットと、 `mybranch` ブ"
"ランチの行の2桁目(`+`)を表示するために使用されます。3つのコミットがタイトルと"
"ともに表示されます。それらはすべて1桁目に空白以外の文字があり( `*` は現在のブ"
"ランチでの通常のコミットを示し、`-` はマージコミットです)、これはそれらが現"
"在 `master` ブランチの一部であることを意味します。 `mybranch` はmasterブラン"
"チからのこれらのコミットを組み込むためにマージされていないため、「Some work」"
"コミットのみが2桁目にプラスの `+` 文字を持っています。コミットログメッセージ"
"の前の括弧内の文字列は、コミットに名前を付けるために使用できる短い名前です。"
"上記の例では、 \"master\" と \"mybranch\" がブランチヘッドです。 \"master^\" "
"は \"master\" ブランチヘッドの最初の親です。より複雑なケースを確認したい場合"
"は、 linkgit:gitrevisions[7] を参照してください。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:948
msgid ""
"Without the '--more=1' option, 'git show-branch' would not output the "
"'[master^]' commit, as '[mybranch]' commit is a common ancestor of both "
"'master' and 'mybranch' tips.  Please see linkgit:git-show-branch[1] for "
"details."
msgstr ""
"'--more=1' オプションがないと、 '[mybranch]' コミット は 'master' と "
"'mybranch' の両方の先端の共通の祖先であるため、 `git show-branch` は "
"'[master^] コミットを出力しません。詳細については、 linkgit:git-show-"
"branch[1] を参照してください。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:954
msgid ""
"If there were more commits on the 'master' branch after the merge, the merge "
"commit itself would not be shown by 'git show-branch' by default.  You would "
"need to provide `--sparse` option to make the merge commit visible in this "
"case."
msgstr ""
"マージ後に `master` ブランチにさらにコミットがあった場合、`git show-branch` "
"はデフォルトではマージコミット自体を表示しません。この場合、マージコミットを"
"表示するには、 `--sparse` オプションを指定する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:959
msgid ""
"Now, let's pretend you are the one who did all the work in `mybranch`, and "
"the fruit of your hard work has finally been merged to the `master` branch. "
"Let's go back to `mybranch`, and run 'git merge' to get the \"upstream "
"changes\" back to your branch."
msgstr ""
"さて、あなたが `mybranch` ですべての作業を行ったとしましょう。そして、あなた"
"の努力の成果がついに `master` ブランチに統合されました。あなたは `mybranch`に"
"戻り、 'git merge' を実行して、「アップストリームの変更」をあなたのブランチに"
"戻しましょう。"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:963
#, no-wrap
msgid ""
"$ git switch mybranch\n"
"$ git merge -m \"Merge upstream changes.\" master\n"
msgstr ""
"$ git switch mybranch\n"
"$ git merge -m \"Merge upstream changes.\" master\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:967
msgid ""
"This outputs something like this (the actual commit object names would be "
"different)"
msgstr ""
"これは以下のようなものを出力します(実際のコミットオブジェクト名は異なります)"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:974
#, no-wrap
msgid ""
"Updating from ae3a2da... to a80b4aa....\n"
"Fast-forward (no commit created; -m option ignored)\n"
" example | 1 +\n"
" hello   | 1 +\n"
" 2 files changed, 2 insertions(+)\n"
msgstr ""
"Updating from ae3a2da... to a80b4aa....\n"
"Fast-forward (no commit created; -m option ignored)\n"
" example | 1 +\n"
" hello   | 1 +\n"
" 2 files changed, 2 insertions(+)\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:981
msgid ""
"Because your branch did not contain anything more than what had already been "
"merged into the `master` branch, the merge operation did not actually do a "
"merge. Instead, it just updated the top of the tree of your branch to that "
"of the `master` branch. This is often called 'fast-forward' merge."
msgstr ""
"あなたのブランチにはすでに `master` ブランチにマージされたもの以外のものが含"
"まれていなかったため、マージ操作は実際にはマージを実行しませんでした。代わり"
"に、あなたのブランチのツリーのトップを `master` ブランチのツリーのトップに更"
"新しました。これはしばしば「早送り」(fast-forward)マージと呼ばれます。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:984
msgid ""
"You can run `gitk --all` again to see how the commit ancestry looks like, or "
"run 'show-branch', which tells you this."
msgstr ""
"あなたは再び `gitk --all` を実行して、コミットの祖先がどのように見えるかを確"
"認するか、 `show-branch` を実行して表示します。"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:989
#, no-wrap
msgid ""
"$ git show-branch master mybranch\n"
"! [master] Merge work in mybranch\n"
" * [mybranch] Merge work in mybranch\n"
"--\n"
msgstr ""
"$ git show-branch master mybranch\n"
"! [master] Merge work in mybranch\n"
" * [mybranch] Merge work in mybranch\n"
"--\n"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:991
msgid "-- [master] Merge work in mybranch"
msgstr "-- [master] Merge work in mybranch"

#. type: Title -
#: ../Documentation-sedout/gitcore-tutorial.txt:995
#, no-wrap
msgid "Merging external work"
msgstr "Merging external work"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1003
msgid ""
"It's usually much more common that you merge with somebody else than merging "
"with your own branches, so it's worth pointing out that Git makes that very "
"easy too, and in fact, it's not that different from doing a 'git merge'. In "
"fact, a remote merge ends up being nothing more than \"fetch the work from a "
"remote repository into a temporary tag\" followed by a 'git merge'."
msgstr ""
"通常、自分のブランチとマージするよりも、他の誰かのとマージする方がはるかに一"
"般的です。そして、Gitを使用すると、これも非常に簡単になります。事実、 `git "
"merge` を実行するのとそれほど違いはありません。 実際、リモートマージは、「リ"
"モートリポジトリから一時的タグ(temporary tag)に作業をフェッチする」だけで、そ"
"の後に `git merge` が続きます。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1006
msgid ""
"Fetching from a remote repository is done by, unsurprisingly, 'git fetch':"
msgstr ""
"リモートリポジトリからのフェッチは、ご想像の通り、 `git fetch` によって行われ"
"ます:"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:1009
#, no-wrap
msgid "$ git fetch <remote-repository>\n"
msgstr "$ git fetch <remote-repository>\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1013
msgid ""
"One of the following transports can be used to name the repository to "
"download from:"
msgstr ""
"以下の転送方法(transport)のいずれかを使用して、ダウンロード元のリポジトリに名"
"前を付けることができます:"

#. type: Labeled list
#: ../Documentation-sedout/gitcore-tutorial.txt:1014
#, no-wrap
msgid "SSH"
msgstr "SSH"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1016
msgid "`remote.machine:/path/to/repo.git/` or"
msgstr "`remote.machine:/path/to/repo.git/` または"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1018
msgid "`ssh://remote.machine/path/to/repo.git/`"
msgstr "`ssh://remote.machine/path/to/repo.git/`"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1025
msgid ""
"This transport can be used for both uploading and downloading, and requires "
"you to have a log-in privilege over `ssh` to the remote machine.  It finds "
"out the set of objects the other side lacks by exchanging the head commits "
"both ends have and transfers (close to) minimum set of objects.  It is by "
"far the most efficient way to exchange Git objects between repositories."
msgstr ""
"この転送方法(transport)はアップロードとダウンロードの両方に使用でき、リモート"
"マシンへの `ssh` を介したログイン権限が必要です。転送元と転送先が持つヘッドコ"
"ミットを交換し、オブジェクトの最小組を(限定的に)転送することにより、反対側に"
"欠けているオブジェクトの組を見つけます。これは、リポジトリ間でGitオブジェクト"
"を交換するための最も効率的な方法です。"

#. type: Labeled list
#: ../Documentation-sedout/gitcore-tutorial.txt:1026
#, no-wrap
msgid "Local directory"
msgstr "ローカルディレクトリ"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1028
msgid "`/path/to/repo.git/`"
msgstr "`/path/to/repo.git/`"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1032
msgid ""
"This transport is the same as SSH transport but uses 'sh' to run both ends "
"on the local machine instead of running other end on the remote machine via "
"'ssh'."
msgstr ""
"この転送方法はSSH転送と同じですが、 `ssh` を介してリモートマシンでもう一方の"
"端を実行する代わりに、 `sh` を使用してローカルマシンで転送元と転送先で実行し"
"ます。"

#. type: Labeled list
#: ../Documentation-sedout/gitcore-tutorial.txt:1033
#, no-wrap
msgid "Git Native"
msgstr "Gitネイティブ"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1035
msgid "`git://remote.machine/path/to/repo.git/`"
msgstr "`git://remote.machine/path/to/repo.git/`"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1039
msgid ""
"This transport was designed for anonymous downloading.  Like SSH transport, "
"it finds out the set of objects the downstream side lacks and transfers "
"(close to) minimum set of objects."
msgstr ""
"この転送方法は、匿名(anonymous)でダウンロードするために設計されました。SSH転"
"送と同様に、ダウンストリーム側にないオブジェクトの組を検出し、最小のオブジェ"
"クトの組を(限定的)転送します。"

#. type: Labeled list
#: ../Documentation-sedout/gitcore-tutorial.txt:1040
#, no-wrap
msgid "HTTP(S)"
msgstr "HTTP(S)"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1042
msgid "`http://remote.machine/path/to/repo.git/`"
msgstr "`http://remote.machine/path/to/repo.git/`"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1053
msgid ""
"Downloader from http and https URL first obtains the topmost commit object "
"name from the remote site by looking at the specified refname under `repo."
"git/refs/` directory, and then tries to obtain the commit object by "
"downloading from `repo.git/objects/xx/xxx...` using the object name of that "
"commit object.  Then it reads the commit object to find out its parent "
"commits and the associate tree object; it repeats this process until it gets "
"all the necessary objects.  Because of this behavior, they are sometimes "
"also called 'commit walkers'."
msgstr ""
"http URL や https URL からのダウンローダーは、最初に、 `repo.git/refs/` ディ"
"レクトリの下にある指定のref名を調べて、リモートサイトから最上位のコミットオブ"
"ジェクト名を獲得し、それから、そのコミットオブジェクトのオブジェクト名を使用"
"して `repo.git/objects/xx/xxx...` からダウンロードすることにより、コミットオ"
"ブジェクトの取得を試みます。次に、そのコミットオブジェクトを読み取り、その親"
"コミットと関連するツリーオブジェクトを見つけます。必要なすべてのオブジェクト"
"を取得するまで、このプロセスを繰り返します。この動作のため、これらは「コミッ"
"トウォーカー」(commit walkers)と呼ばれることもあります。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1060
msgid ""
"The 'commit walkers' are sometimes also called 'dumb transports', because "
"they do not require any Git aware smart server like Git Native transport "
"does.  Any stock HTTP server that does not even support directory index "
"would suffice.  But you must prepare your repository with 'git update-server-"
"info' to help dumb transport downloaders."
msgstr ""
"「コミットウォーカー」(commit walkers)は、Gitネイティブ転送のようにGit対応の"
"スマートサーバーを必要としないため、「バカ転送」(dumb transports)と呼ばれるこ"
"ともあります。ディレクトリインデックスさえサポートしていないストックHTTPサー"
"バーで十分です。 ただし、バカ転送ダウンローダー(dumb transport downloaders)を"
"支援するには、 `git update-server-info` を使用してリポジトリを準備する必要が"
"あります。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1063
msgid ""
"Once you fetch from the remote repository, you `merge` that with your "
"current branch."
msgstr ""
"リモートリポジトリからフェッチしたら、あなたはそれを現在のブランチに「マー"
"ジ」します。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1067
msgid ""
"However -- it's such a common thing to `fetch` and then immediately `merge`, "
"that it's called `git pull`, and you can simply do"
msgstr ""
"ただし、「フェッチ」してすぐに「マージ」するのは非常に一般的なことなので、 "
"`git pull` を使えば簡単に実行できます:"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:1070
#, no-wrap
msgid "$ git pull <remote-repository>\n"
msgstr "$ git pull <remote-repository>\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1074
msgid ""
"and optionally give a branch-name for the remote end as a second argument."
msgstr ""
"そして、オプションで、リモート側のブランチ名を2番目の引数として指定します。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1085
msgid ""
"You could do without using any branches at all, by keeping as many local "
"repositories as you would like to have branches, and merging between them "
"with 'git pull', just like you merge between branches. The advantage of this "
"approach is that it lets you keep a set of files for each `branch` checked "
"out and you may find it easier to switch back and forth if you juggle "
"multiple lines of development simultaneously. Of course, you will pay the "
"price of more disk usage to hold multiple working trees, but disk space is "
"cheap these days."
msgstr ""
"あなたが持ちたいブランチの数のローカルリポジトリを保持し、ブランチ間のマージ"
"と同様に `git pull` でそれらの間のマージを行うことで、ブランチを全く使用しな"
"いことも可能です。このアプローチの利点は、チェックアウトされた各々「ブラン"
"チ」のファイルの組を保持できることです。複数の開発ラインを同時に調整すると、"
"切り替えが簡単になる場合があります。もちろん、複数の作業ツリーを保持するため"
"にディスク使用量を増やすという代償を払うことにはなりますが、最近のディスク容"
"量は安価です。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1090
msgid ""
"It is likely that you will be pulling from the same remote repository from "
"time to time. As a short hand, you can store the remote repository URL in "
"the local repository's config file like this:"
msgstr ""
"あなたは同じリモートリポジトリからしばしばプルする可能性があります。なので略"
"記法として、リモートリポジトリのURLをローカルリポジトリの設定ファイルに以下の"
"ように保存できます:"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:1093
#, no-wrap
msgid "$ git config remote.linus.url http://www.kernel.org/pub/scm/git/git.git/\n"
msgstr "$ git config remote.linus.url http://www.kernel.org/pub/scm/git/git.git/\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1096
msgid "and use the \"linus\" keyword with 'git pull' instead of the full URL."
msgstr ""
"そして、完全なURLの代わりに `git pull` で \"linus\" キーワードを使用します。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1098
msgid "Examples."
msgstr "例:"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1100
msgid "`git pull linus`"
msgstr "`git pull linus`"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1101
msgid "`git pull linus tag v0.99.1`"
msgstr "`git pull linus tag v0.99.1`"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1103
msgid "the above are equivalent to:"
msgstr "上記は以下と同じです:"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1105
msgid "`git pull http://www.kernel.org/pub/scm/git/git.git/ HEAD`"
msgstr "`git pull http://www.kernel.org/pub/scm/git/git.git/ HEAD`"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1106
msgid "`git pull http://www.kernel.org/pub/scm/git/git.git/ tag v0.99.1`"
msgstr "`git pull http://www.kernel.org/pub/scm/git/git.git/ tag v0.99.1`"

#. type: Title -
#: ../Documentation-sedout/gitcore-tutorial.txt:1109
#, no-wrap
msgid "How does the merge work?"
msgstr "How does the merge work?"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1116
msgid ""
"We said this tutorial shows what plumbing does to help you cope with the "
"porcelain that isn't flushing, but we so far did not talk about how the "
"merge really works.  If you are following this tutorial the first time, I'd "
"suggest to skip to \"Publishing your work\" section and come back here later."
msgstr ""
"このチュートリアルでは、動作しない磁器コマンドに対処するために配管コマンドが"
"どのように機能するかを示していますが、これまでのところ、マージが実際にどのよ"
"うに機能するかについては説明していません。あなたがこのチュートリアルを初めて"
"読む時は、「Publishing your work」セクションにスキップして、後でここに戻って"
"くることをお勧めします。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1120
msgid ""
"OK, still with me? To give us an example to look at, let's go back to the "
"earlier repository with \"hello\" and \"example\" file, and bring ourselves "
"back to the pre-merge state:"
msgstr ""
"上記を了承したとして、続きをやります。例を示すために、 `hello` ファイルと "
"`example` ファイルを使用した以前のリポジトリに戻り、マージ前の状態に戻しま"
"しょう:"

# ※原文修正
#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:1129
#, no-wrap
msgid ""
"$ git show-branch --more=2 master mybranch\n"
"! [master] Merge work in mybranch\n"
" * [mybranch] Merge work in mybranch\n"
"\\--\n"
"-- [master] Merge work in mybranch\n"
"+* [master^2] Some work.\n"
"+* [master^] Some fun.\n"
msgstr ""
"$ git show-branch --more=2 master mybranch\n"
"! [master] Merge work in mybranch\n"
" * [mybranch] Merge work in mybranch\n"
"--\n"
"-- [master] Merge work in mybranch\n"
"+* [master^2] Some work.\n"
"+* [master^] Some fun.\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1134
msgid ""
"Remember, before running 'git merge', our `master` head was at \"Some fun.\" "
"commit, while our `mybranch` head was at \"Some work.\" commit."
msgstr "`git merge` を実行する前は、 `master` ヘッドが \"Some fun.\" コミット、 `mybranch`  ヘッドが \"Some work.\" コミットだったことを思い出してください。"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:1139
#, no-wrap
msgid ""
"$ git switch -C mybranch master^2\n"
"$ git switch master\n"
"$ git reset --hard master^\n"
msgstr ""
"$ git switch -C mybranch master^2\n"
"$ git switch master\n"
"$ git reset --hard master^\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1142
msgid "After rewinding, the commit structure should look like this:"
msgstr "巻き戻し後、コミット構造は以下のようになります:"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:1147
#, no-wrap
msgid ""
"$ git show-branch\n"
"* [master] Some fun.\n"
" ! [mybranch] Some work.\n"
"--\n"
msgstr ""
"$ git show-branch\n"
"* [master] Some fun.\n"
" ! [mybranch] Some work.\n"
"--\n"

# $ git show-branch
# * [master] Some fun.
#  ! [mybranch] Some work.
# --
# *  [master] Some fun.
#  + [mybranch] Some work.
# *+ [master^] second commit.
#
#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:1151
#, no-wrap
msgid ""
"*  [master] Some fun.\n"
" + [mybranch] Some work.\n"
"*+ [master^] Initial commit\n"
msgstr ""
"*  [master] Some fun.\n"
" + [mybranch] Some work.\n"
"*+ [master^] second commit.\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1154
msgid "Now we are ready to experiment with the merge by hand."
msgstr "これで、手動でマージを試す準備ができました。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1158
msgid ""
"`git merge` command, when merging two branches, uses 3-way merge algorithm.  "
"First, it finds the common ancestor between them.  The command it uses is "
"'git merge-base':"
msgstr ""
"`git merge` コマンドは、2つのブランチをマージするときに、3方向マージアルゴリ"
"ズムを使用します。 まず、それらの間の共通の祖先を見つけます。使用するコマンド"
"は `git merge-base` です:"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:1161
#, no-wrap
msgid "$ mb=$(git merge-base HEAD mybranch)\n"
msgstr "$ mb=$(git merge-base HEAD mybranch)\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1168
msgid ""
"The command writes the commit object name of the common ancestor to the "
"standard output, so we captured its output to a variable, because we will be "
"using it in the next step.  By the way, the common ancestor commit is the "
"\"Initial commit\" commit in this case.  You can tell it by:"
msgstr "このコマンドは、共通の祖先のコミットオブジェクト名を標準出力に書き込むため、我々は次のステップで使用するため、その出力を変数にキャプチャしました。ちなみに、今回は、共通の祖先コミットは「second commit.」コミットです。あなたはそれを以下のように言うことができます:"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:1172
#, no-wrap
msgid ""
"$ git name-rev --name-only --tags $mb\n"
"my-first-tag\n"
msgstr ""
"$ git name-rev --name-only --tags $mb\n"
"my-first-tag\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1176
msgid "After finding out a common ancestor commit, the second step is this:"
msgstr "共通の祖先コミットを見つけた後の、2番目のステップは以下のとおりです:"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:1179
#, no-wrap
msgid "$ git read-tree -m -u $mb HEAD mybranch\n"
msgstr "$ git read-tree -m -u $mb HEAD mybranch\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1191
msgid ""
"This is the same 'git read-tree' command we have already seen, but it takes "
"three trees, unlike previous examples.  This reads the contents of each tree "
"into different 'stage' in the index file (the first tree goes to stage 1, "
"the second to stage 2, etc.).  After reading three trees into three stages, "
"the paths that are the same in all three stages are 'collapsed' into stage "
"0.  Also paths that are the same in two of three stages are collapsed into "
"stage 0, taking the SHA-1 from either stage 2 or stage 3, whichever is "
"different from stage 1 (i.e. only one side changed from the common ancestor)."
msgstr "これは、すでに見たのと同じ `git read-tree` コマンドですが、前の例とは異なり、3つのツリーが必要です。 これにより、各ツリーの内容がインデックスファイルの異なる「ステージ」に読み込まれます(最初のツリーはステージ1に、2番目はステージ2に、等)。3つのツリーを3つのステージに読み取った後、3つのステージで同じパスがある場合はステージ0に「折りたたまれます」(collapsed)。また、3つのステージのうちの2つで同じパスは、ステージ0に折りたたまれ、ステージ1と異なるステージ2またはステージ3のいずれかからSHA-1を取得します(つまり、共通の祖先から片側だけが変更されます)。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1195
msgid ""
"After 'collapsing' operation, paths that are different in three trees are "
"left in non-zero stages.  At this point, you can inspect the index file with "
"this command:"
msgstr "「折りたたみ」(collapsing)操作の後、3つのツリーで異なるパスはゼロ以外のステージに残されます。この時点で、以下のコマンドを使用してインデックスファイルを調査できます:"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:1202
#: ../Documentation-sedout/gitcore-tutorial.txt:1248
#, no-wrap
msgid ""
"$ git ls-files --stage\n"
"100644 7f8b141b65fdcee47321e399a2598a235a032422 0\texample\n"
"100644 557db03de997c86a4a028e1ebd3a1ceb225be238 1\thello\n"
"100644 ba42a2a96e3027f3333e13ede4ccf4498c3ae942 2\thello\n"
"100644 cc44c73eb783565da5831b4d820c962954019b69 3\thello\n"
msgstr ""
"$ git ls-files --stage\n"
"100644 7f8b141b65fdcee47321e399a2598a235a032422 0\texample\n"
"100644 557db03de997c86a4a028e1ebd3a1ceb225be238 1\thello\n"
"100644 ba42a2a96e3027f3333e13ede4ccf4498c3ae942 2\thello\n"
"100644 cc44c73eb783565da5831b4d820c962954019b69 3\thello\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1210
msgid ""
"In our example of only two files, we did not have unchanged files so only "
"'example' resulted in collapsing.  But in real-life large projects, when "
"only a small number of files change in one commit, this 'collapsing' tends "
"to trivially merge most of the paths fairly quickly, leaving only a handful "
"of real changes in non-zero stages."
msgstr "私達の2つのファイルのみの例では、変更されていないファイルがなかったため、 `example` のみが折りたたまれました。 しかし、実際の大規模なプロジェクトでは、1回のコミットで変更されるファイルの数が少ない場合、この「折りたたみ」はほとんどのパスをかなり迅速にマージする傾向があり、ゼロ以外のステージでの実際の変更はほんの一握りになります。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1212
msgid "To look at only non-zero stages, use `--unmerged` flag:"
msgstr ""
"ゼロ以外のステージのみを確認するには、 `--unmerged` フラグを使用します:"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:1218
#, no-wrap
msgid ""
"$ git ls-files --unmerged\n"
"100644 557db03de997c86a4a028e1ebd3a1ceb225be238 1\thello\n"
"100644 ba42a2a96e3027f3333e13ede4ccf4498c3ae942 2\thello\n"
"100644 cc44c73eb783565da5831b4d820c962954019b69 3\thello\n"
msgstr ""
"$ git ls-files --unmerged\n"
"100644 557db03de997c86a4a028e1ebd3a1ceb225be238 1\thello\n"
"100644 ba42a2a96e3027f3333e13ede4ccf4498c3ae942 2\thello\n"
"100644 cc44c73eb783565da5831b4d820c962954019b69 3\thello\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1224
msgid ""
"The next step of merging is to merge these three versions of the file, using "
"3-way merge.  This is done by giving 'git merge-one-file' command as one of "
"the arguments to 'git merge-index' command:"
msgstr "マージの次のステップは、3方向マージを使用して、これら3つのバージョンのファイルをマージすることです。これは、 `git merge-index` コマンドの引数の1つとして `git merge-one-file` コマンドを指定することによって行われます:"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:1230
#, no-wrap
msgid ""
"$ git merge-index git-merge-one-file hello\n"
"Auto-merging hello\n"
"ERROR: Merge conflict in hello\n"
"fatal: merge program failed\n"
msgstr ""
"$ git merge-index git-merge-one-file hello\n"
"Auto-merging hello\n"
"ERROR: Merge conflict in hello\n"
"fatal: merge program failed\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1241
msgid ""
"'git merge-one-file' script is called with parameters to describe those "
"three versions, and is responsible to leave the merge results in the working "
"tree.  It is a fairly straightforward shell script, and eventually calls "
"'merge' program from RCS suite to perform a file-level 3-way merge.  In this "
"case, 'merge' detects conflicts, and the merge result with conflict marks is "
"left in the working tree..  This can be seen if you run `ls-files --stage` "
"again at this point:"
msgstr "`git merge-one-file` スクリプトは、これら3つのバージョンを記述するためのパラメーターを使用して呼び出され、マージ結果を作業ツリーに残す役割を果たします。 これはかなり単純なシェルスクリプトであり、最終的にはRCSスイートから `merge` プログラムを呼び出して、ファイルレベルの3方向マージを実行します。今回は、 `merge` は競合を検出し、競合マークのあるマージ結果が作業ツリーに残ります。これは、この時点で `ls-files --stage` を再度実行すると確認できます:"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1255
msgid ""
"This is the state of the index file and the working file after 'git merge' "
"returns control back to you, leaving the conflicting merge for you to "
"resolve.  Notice that the path `hello` is still unmerged, and what you see "
"with 'git diff' at this point is differences since stage 2 (i.e. your "
"version)."
msgstr "これは、 `git merge` が制御を返した後のインデックスファイルと作業ファイルの状態であり、競合するマージを解決できるようにします。 パス `hello` はまだマージされておらず、この時点で `git diff` で表示されるのは、ステージ2(つまり、あなたのバージョン)との違いであることに注意してください。"

#. type: Title -
#: ../Documentation-sedout/gitcore-tutorial.txt:1258
#, no-wrap
msgid "Publishing your work"
msgstr "Publishing your work"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1263
msgid ""
"So, we can use somebody else's work from a remote repository, but how can "
"*you* prepare a repository to let other people pull from it?"
msgstr "そういうわけで、私達はリモートリポジトリから他の人の作業を使用することはできますが、他の人がリポジトリからプルできるようにリポジトリを作成するには、あなたはどうすればよいのでしょうか？"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1273
msgid ""
"You do your real work in your working tree that has your primary repository "
"hanging under it as its `.git` subdirectory.  You *could* make that "
"repository accessible remotely and ask people to pull from it, but in "
"practice that is not the way things are usually done. A recommended way is "
"to have a public repository, make it reachable by other people, and when the "
"changes you made in your primary working tree are in good shape, update the "
"public repository from it. This is often called 'pushing'."
msgstr "あなたのプライマリリポジトリが `.git` サブディレクトリとしてその下にぶら下がっているあなたの作業ツリーで実際の作業を行っています。あなたはそのリポジトリにリモートでアクセスできるようにして、そこからプルするように人々に依頼することも可能ですが、実際には、それは通常の方法ではありません。推奨される方法は、パブリックリポジトリを用意し、他の人がアクセスできるようにすることです。あなたのプライマリ作業ツリーに加えた変更がよい状態になったら、そこからパブリックリポジトリを更新します。これはしばしば「プッシュ」(pushing)と呼ばれます。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1277
msgid ""
"This public repository could further be mirrored, and that is how Git "
"repositories at `kernel.org` are managed."
msgstr "このパブリックリポジトリはさらにミラーリングされる可能性があり、それが `kernel.org` のGitリポジトリの管理方法です。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1282
msgid ""
"Publishing the changes from your local (private) repository to your remote "
"(public) repository requires a write privilege on the remote machine. You "
"need to have an SSH account there to run a single command, 'git-receive-"
"pack'."
msgstr "ローカル(プライベート)リポジトリからリモート(パブリック)リポジトリに変更を公開するには、リモートマシンでの書き込み権限が必要です。単一のコマンド `git-receive-pack` を実行するには、そこにSSHアカウントが必要です。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1288
msgid ""
"First, you need to create an empty repository on the remote machine that "
"will house your public repository. This empty repository will be populated "
"and be kept up to date by pushing into it later. Obviously, this repository "
"creation needs to be done only once."
msgstr "まず、パブリックリポジトリを格納する空のリポジトリをリモートマシンに作成する必要があります。この空のリポジトリは、後でプッシュすることで、データが設定され、最新の状態に保たれる。明らかに、このリポジトリの作成は1度だけ実行する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1294
msgid ""
"'git push' uses a pair of commands, 'git send-pack' on your local machine, "
"and 'git-receive-pack' on the remote machine. The communication between the "
"two over the network internally uses an SSH connection."
msgstr "`git push` は、ローカルマシンでは `git send-pack` 、リモートマシンでは `git-receive-pack` というコマンドのペアを使用します。ネットワークを介した2つのコマンドの間の通信は、内部でSSH接続を使用します。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1300
msgid ""
"Your private repository's Git directory is usually `.git`, but your public "
"repository is often named after the project name, i.e. `<project>.git`. "
"Let's create such a public repository for project `my-git`. After logging "
"into the remote machine, create an empty directory:"
msgstr "あなたのプライベートリポジトリのGitディレクトリは通常 `.git` ですが、パブリックリポジトリはプロジェクト名にちなんで名付けられていることがよくあります。つまり `<project>.git` です。 プロジェクト `my-git` のこのようなパブリックリポジトリを作成しましょう。リモートマシンにログインした後、以下のように空のディレクトリを作成します:"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:1303
#, no-wrap
msgid "$ mkdir my-git.git\n"
msgstr "$ mkdir my-git.git\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1308
msgid ""
"Then, make that directory into a Git repository by running 'git init', but "
"this time, since its name is not the usual `.git`, we do things slightly "
"differently:"
msgstr "次に、 'git init' を実行してそのディレクトリをGitリポジトリにしますが、今回はその名前が通常の `.git` ではないため、我々は少し異なる方法で処理します:"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:1311
#, no-wrap
msgid "$ GIT_DIR=my-git.git git init\n"
msgstr "$ GIT_DIR=my-git.git git init\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1317
msgid ""
"Make sure this directory is available for others you want your changes to be "
"pulled via the transport of your choice. Also you need to make sure that you "
"have the 'git-receive-pack' program on the `$PATH`."
msgstr "あなたが選択した転送方法(transport)を介して変更をプルする他のユーザーがこのディレクトリを使用できることを確認してください。 また、あなたは `$PATH` 上に 'git-receive-pack' プログラムがあることを確認する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1324
msgid ""
"Many installations of sshd do not invoke your shell as the login shell when "
"you directly run programs; what this means is that if your login shell is "
"'bash', only `.bashrc` is read and not `.bash_profile`. As a workaround, "
"make sure `.bashrc` sets up `$PATH` so that you can run 'git-receive-pack' "
"program."
msgstr "sshdの多くのインストールでは、あなたがプログラムを直接実行するときに、ログインシェルとしてあなたのシェルが呼び出されません。これが意味するのは、ログインシェルが `bash` の場合、 `.bashrc` のみが読み取られ、 `.bash_profile` は読み取られないということです。 回避策として、あなたが `git-receive-pack` プログラムを実行できるように、 `.bashrc` で  `$PATH` を設定していることを確認してください。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1331
msgid ""
"If you plan to publish this repository to be accessed over http, you should "
"do `mv my-git.git/hooks/post-update.sample my-git.git/hooks/post-update` at "
"this point.  This makes sure that every time you push into this repository, "
"`git update-server-info` is run."
msgstr "あなたがこのリポジトリを公開してhttp経由でアクセスする場合は、この時点で `mv my-git.git/hooks/post-update.sample my-git.git/hooks/post-update` を実行する必要があります。これにより、このリポジトリにプッシュするたびに、 `git update-server-info` が実行されます。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1335
msgid ""
"Your \"public repository\" is now ready to accept your changes.  Come back "
"to the machine you have your private repository. From there, run this "
"command:"
msgstr "これで、あなたの「パブリックリポジトリ」であなたの変更を受け入れる準備が整いました。あなたのプライベートリポジトリがあるマシンに戻ってください。 そこから、以下のコマンドを実行します:"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:1338
#, no-wrap
msgid "$ git push <public-host>:/path/to/my-git.git master\n"
msgstr "$ git push <public-host>:/path/to/my-git.git master\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1343
msgid ""
"This synchronizes your public repository to match the named branch head (i."
"e. `master` in this case) and objects reachable from them in your current "
"repository."
msgstr "これにより、あなたのパブリックリポジトリが同期され、指定のブランチヘッド(つまり、この場合は `master`)と、あなたの現在のリポジトリ内のそれらから到達可能なオブジェクトが一致します。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1347
msgid ""
"As a real example, this is how I update my public Git repository. Kernel.org "
"mirror network takes care of the propagation to other publicly visible "
"machines:"
msgstr "実例として、以下は私のパブリックGitリポジトリを更新する方法です。Kernel.orgミラーネットワークは、他の公開されているマシンへの伝播を処理します:"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:1350
#, no-wrap
msgid "$ git push master.kernel.org:/pub/scm/git/git.git/\n"
msgstr "$ git push master.kernel.org:/pub/scm/git/git.git/\n"

#. type: Title -
#: ../Documentation-sedout/gitcore-tutorial.txt:1354
#, no-wrap
msgid "Packing your repository"
msgstr "Packing your repository"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1362
msgid ""
"Earlier, we saw that one file under `.git/objects/??/` directory is stored "
"for each Git object you create. This representation is efficient to create "
"atomically and safely, but not so convenient to transport over the network. "
"Since Git objects are immutable once they are created, there is a way to "
"optimize the storage by \"packing them together\". The command"
msgstr "以前、私達は作成したGitオブジェクトごとに `.git/objects/??/` ディレクトリの下に1つのファイルが保存されていることを確認しました。この表現は、アトミックかつ安全に作成するには効率的ですが、ネットワークを介した転送にはそれほど便利ではありません。Gitオブジェクトは、作成されると不変であるため、「一緒にパックする」ことでストレージを最適化する方法があります。以下のコマンド"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:1365
#, no-wrap
msgid "$ git repack\n"
msgstr "$ git repack\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1372
msgid ""
"will do it for you. If you followed the tutorial examples, you would have "
"accumulated about 17 objects in `.git/objects/??/` directories by now. 'git "
"repack' tells you how many objects it packed, and stores the packed file in "
"the `.git/objects/pack` directory."
msgstr "は、あなたのためにそれをします。チュートリアルの例に従うと、これまでに約17個のオブジェクトが `.git/objects/??/` ディレクトリに蓄積されているはずです。 `git repack` は、パックしたオブジェクトの数を示し、パックされたファイルを `.git/objects/pack` ディレクトリに保存します。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1381
msgid ""
"You will see two files, `pack-*.pack` and `pack-*.idx`, in `.git/objects/"
"pack` directory. They are closely related to each other, and if you ever "
"copy them by hand to a different repository for whatever reason, you should "
"make sure you copy them together. The former holds all the data from the "
"objects in the pack, and the latter holds the index for random access."
msgstr "`.git/objects/pack` ディレクトリに `pack-*.pack` と `pack-*.idx` の2つのファイルがあります。これらは互いに密接に関連しているため、何らかの理由で手動で別のリポジトリにコピーする場合は、必ず一緒にコピーする必要があります。前者はパック内のオブジェクトからのすべてのデータを保持し、後者はランダムアクセスのためのインデックスを保持します。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1385
msgid ""
"If you are paranoid, running 'git verify-pack' command would detect if you "
"have a corrupt pack, but do not worry too much.  Our programs are always "
"perfect ;-)."
msgstr "あなたが病的なほど疑り深い場合は、 `git verify-pack` コマンドを実行すると、破損したパックがあるかどうかが検出されますが、あまり心配する必要はありません。私たちのプログラムは常に完璧です ;-)"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1388
msgid ""
"Once you have packed objects, you do not need to leave the unpacked objects "
"that are contained in the pack file anymore."
msgstr "オブジェクトをパックしたら、既にパックファイルに取り込まれている、パックされていないオブジェクトを残す必要はありません。"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:1391
#, no-wrap
msgid "$ git prune-packed\n"
msgstr "$ git prune-packed\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1394
msgid "would remove them for you."
msgstr "これは、あなたのためにそれらを削除します。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1399
msgid ""
"You can try running `find .git/objects -type f` before and after you run "
"`git prune-packed` if you are curious.  Also `git count-objects` would tell "
"you how many unpacked objects are in your repository and how much space they "
"are consuming."
msgstr "あなたがもの好きならば、`git prune-packed` を実行する前後に `find .git/objects -type f` を実行してみてください。 また、 `git count-objects` は、リポジトリ内でパックされていないオブジェクト(unpacked objects)の数と、それらが消費しているスペースの量を示します。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1406
msgid ""
"`git pull` is slightly cumbersome for HTTP transport, as a packed repository "
"may contain relatively few objects in a relatively large pack. If you expect "
"many HTTP pulls from your public repository you might want to repack & prune "
"often, or never."
msgstr "パックされたリポジトリでは比較的大きなパックに含まれるオブジェクトが比較的少ない可能性があるため、HTTP転送(transport)での `git pull` は少々面倒です。パブリックリポジトリから多くのHTTPプルが予想される場合は、頻繁に再パックして整理するか、まったく行わないことをお勧めします。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1415
msgid ""
"If you run `git repack` again at this point, it will say \"Nothing new to "
"pack.\". Once you continue your development and accumulate the changes, "
"running `git repack` again will create a new pack, that contains objects "
"created since you packed your repository the last time. We recommend that "
"you pack your project soon after the initial import (unless you are starting "
"your project from scratch), and then run `git repack` every once in a while, "
"depending on how active your project is."
msgstr "この時点で再度 `git repack` を実行すると、「Nothing new to pack.」(新しくパックするものはありません)と表示されます。あなたが開発を続行して変更を蓄積してから、 `git repack` を再度実行すると、前回リポジトリをパックして以降に作成されたオブジェクトを含む新しいパックが作成されます。最初のインポートの直後にプロジェクトをパックし(プロジェクトを最初から開始する場合を除く)、プロジェクトの活発度度に応じて、時々 `git repack` を実行することをお勧めします。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1422
msgid ""
"When a repository is synchronized via `git push` and `git pull` objects "
"packed in the source repository are usually stored unpacked in the "
"destination.  While this allows you to use different packing strategies on "
"both ends, it also means you may need to repack both repositories every once "
"in a while."
msgstr "リポジトリが `git push` と `git pull` を介して同期される場合、転送元リポジトリにてパックされてたオブジェクトは通常、転送先ではアンパックされて保存されます。これにより、転送元と転送先で異なるパッキング戦略を使用できますが、両方のリポジトリを時々再パックする必要がある場合もあります。"

#. type: Title -
#: ../Documentation-sedout/gitcore-tutorial.txt:1425
#, no-wrap
msgid "Working with Others"
msgstr "Working with Others"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1432
msgid ""
"Although Git is a truly distributed system, it is often convenient to "
"organize your project with an informal hierarchy of developers. Linux kernel "
"development is run this way. There is a nice illustration (page 17, \"Merges "
"to Mainline\") in https://web.archive.org/web/20120915203609/http://www."
"xenotime.net/linux/mentor/linux-mentoring-2006.pdf[Randy Dunlap's "
"presentation]."
msgstr "Gitは真に分散されたシステムですが、多くの場合、開発者の非公式な階層でプロジェクト編成すると便利です。Linuxカーネル開発はこの方法で実行されます。 https://web.archive.org/web/20120915203609/http://www.xenotime.net/linux/mentor/linux-mentoring-2006.pdf[Randy Dunlap's presentation] の (17ページ \"Merges to Mainline\") にイラストがあります。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1437
msgid ""
"It should be stressed that this hierarchy is purely *informal*.  There is "
"nothing fundamental in Git that enforces the \"chain of patch flow\" this "
"hierarchy implies. You do not have to pull from only one remote repository."
msgstr "この階層は純粋に「非公式」であることを強調しておく必要があります。この階層が意味する「パッチフローのチェーン」を強制するようなGitでの必須のものは何もありません。あなたはただ1つのリモートリポジトリからプルする必要はありません。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1439
msgid "A recommended workflow for a \"project lead\" goes like this:"
msgstr ""
"「プロジェクト指揮」(project lead)の推奨作業フローは以下のようになります:"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1442
msgid ""
"Prepare your primary repository on your local machine. Your work is done "
"there."
msgstr "あなたのローカルマシンで、あなたのプライマリリポジトリを準備します。あなたの作業はそこで行います。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1444
msgid "Prepare a public repository accessible to others."
msgstr "他の人がアクセスできる公開リポジトリを準備します。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1453
msgid ""
"If other people are pulling from your repository over dumb transport "
"protocols (HTTP), you need to keep this repository 'dumb transport "
"friendly'.  After `git init`, `$GIT_DIR/hooks/post-update.sample` copied "
"from the standard templates would contain a call to 'git update-server-info' "
"but you need to manually enable the hook with `mv post-update.sample post-"
"update`.  This makes sure 'git update-server-info' keeps the necessary files "
"up to date."
msgstr "他の人がバカ転送プロトコル(dumb transport protocols)(HTTP)を介してリポジトリからプルしている場合、このリポジトリを「バカ転送フレンドリー」(dumb transport friendly)に保つ必要があります。 `git init` 後、標準テンプレートからコピーした `$GIT_DIR/hooks/post-update.sample` には、 `git update-server-info` の呼び出しが含まれますが、あなたは `mv post-update.sample post-update` を使用してフックを手動で有効にする必要があります。これにより、 `git update-server-info` が必要なファイルを最新の状態に保つことができます。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1456
msgid "Push into the public repository from your primary repository."
msgstr "あなたのプライマリリポジトリから公開リポジトリにプッシュします。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1462
msgid ""
"'git repack' the public repository. This establishes a big pack that "
"contains the initial set of objects as the baseline, and possibly 'git "
"prune' if the transport used for pulling from your repository supports "
"packed repositories."
msgstr "公開リポジトリを `git repack` します。これにより、オブジェクトの初期セットをベースラインとして含む大きなパックが確立されます。リポジトリからのプルに使用される転送方法(transport)がパックされたリポジトリ(packed repositories)をサポートしている場合は、 `git prune` が使える可能性があります。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1467
msgid ""
"Keep working in your primary repository. Your changes include modifications "
"of your own, patches you receive via e-mails, and merges resulting from "
"pulling the \"public\" repositories of your \"subsystem maintainers\"."
msgstr "あなたはプライマリリポジトリで作業を続けます。あなたの変更は、あなた独自の変更や、電子メールで受信するパッチや、「サブシステム保守者」の「公開」リポジトリをプルした結果のマージを含んでいます。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1469
#: ../Documentation-sedout/gitcore-tutorial.txt:1507
msgid "You can repack this private repository whenever you feel like."
msgstr "あなたはこのプライベートリポジトリはいつでも再パックできます。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1472
msgid ""
"Push your changes to the public repository, and announce it to the public."
msgstr "あなたの変更を公開リポジトリにプッシュし、公開します。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1475
#: ../Documentation-sedout/gitcore-tutorial.txt:1514
msgid ""
"Every once in a while, 'git repack' the public repository.  Go back to step "
"5. and continue working."
msgstr "時々、公開リポジトリを `git repack` します。 手順5に戻り、作業を続行します。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1479
msgid ""
"A recommended work cycle for a \"subsystem maintainer\" who works on that "
"project and has an own \"public repository\" goes like this:"
msgstr "そのプロジェクトに取り組んでいて、独自の「公開リポジトリ」を持つ「サブシステム保守者」に推奨される作業サイクルは以下のようになります:"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1484
msgid ""
"Prepare your work repository, by running 'git clone' on the public "
"repository of the \"project lead\". The URL used for the initial cloning is "
"stored in the remote.origin.url configuration variable."
msgstr "「プロジェクト指揮」の公開リポジトリ上で `git clone` を実行して、あなたの作業リポジトリを準備します。初期クローン作成に使用されるURLは、 remote.origin.url 構成変数に格納されます。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1487
msgid ""
"Prepare a public repository accessible to others, just like the \"project "
"lead\" person does."
msgstr "「プロジェクト指揮」の人と同じように、他の人がアクセスできる公開リポジトリを準備します。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1493
msgid ""
"Copy over the packed files from \"project lead\" public repository to your "
"public repository, unless the \"project lead\" repository lives on the same "
"machine as yours.  In the latter case, you can use `objects/info/alternates` "
"file to point at the repository you are borrowing from."
msgstr "「プロジェクト指揮」リポジトリが同じマシン上にある場合を除き、パックされたファイルを「プロジェク指揮」の公開リポジトリからあなたの公開リポジトリにコピーします。後者の場合、あなたは `objects/info/alternates` ファイルを使用して、借用しているリポジトリを指すことができます。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1498
msgid ""
"Push into the public repository from your primary repository. Run 'git "
"repack', and possibly 'git prune' if the transport used for pulling from "
"your repository supports packed repositories."
msgstr "あなたのプライマリリポジトリから公開リポジトリにプッシュします。`git repack` を実行し、そして、リポジトリからのプルに使用される転送方法(transport)がパックされたリポジトリ(packed repositories)をサポートしている場合は `git prune` を実行します。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1504
msgid ""
"Keep working in your primary repository. Your changes include modifications "
"of your own, patches you receive via e-mails, and merges resulting from "
"pulling the \"public\" repositories of your \"project lead\" and possibly "
"your \"sub-subsystem maintainers\"."
msgstr "あなたのプライマリリポジトリで作業を続けます。あなたの変更には、あなた独自の変更や、電子メールで受信するパッチや、「プロジェクト指揮」と場合によっては「サブサブシステム保守者」の「公開」リポジトリをプルした結果のマージが含まれます。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1511
msgid ""
"Push your changes to your public repository, and ask your \"project lead\" "
"and possibly your \"sub-subsystem maintainers\" to pull from it."
msgstr "あなたの変更をあなたの公開リポジトリにプッシュし、「プロジェクト指揮」と、場合によっては「サブサブシステム保守者」にプルするように依頼します。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1519
msgid ""
"A recommended work cycle for an \"individual developer\" who does not have a "
"\"public\" repository is somewhat different. It goes like this:"
msgstr "「公開」リポジトリを持たない「個人開発者」に推奨される作業サイクルは多少異なります。以下のようになります:"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1525
msgid ""
"Prepare your work repository, by 'git clone' the public repository of the "
"\"project lead\" (or a \"subsystem maintainer\", if you work on a "
"subsystem). The URL used for the initial cloning is stored in the remote."
"origin.url configuration variable."
msgstr "「プロジェクト指揮」(またはサブシステムで作業している場合は「サブシステム保守者」)の公開リポジトリを `git clone` して、あなたの作業リポジトリを準備します。初期クローン作成に使用されるURLは、 remote.origin.url 構成変数に格納されます。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1527
msgid "Do your work in your repository on 'master' branch."
msgstr "あなたは、あなたのリポジトリの 'master' ブランチで作業を行います。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1532
msgid ""
"Run `git fetch origin` from the public repository of your upstream every "
"once in a while. This does only the first half of `git pull` but does not "
"merge. The head of the public repository is stored in `.git/refs/remotes/"
"origin/master`."
msgstr "時々、あなたのアップストリームの公開リポジトリから `git fetcho rigin` を実行します。これは `git pull` の前半のみを実行しますが、マージはしません。公開リポジトリのヘッドは `.git/refs/remotes/origin/master` に保存されています。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1536
msgid ""
"Use `git cherry origin` to see which ones of your patches were accepted, and/"
"or use `git rebase origin` to port your unmerged changes forward to the "
"updated upstream."
msgstr "`git cherry origin` を使用して、どのパッチが受け入れられたかを確認したり、 `git rebase origin` を使用して、あなたのマージされていない変更を更新されたアップストリームに転送します。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1540
msgid ""
"Use `git format-patch origin` to prepare patches for e-mail submission to "
"your upstream and send it out. Go back to step 2. and continue."
msgstr "`git format-patch origin` を使用して、アップストリームへの電子メール送信用のパッチを準備し、送信します。 手順2に戻り、作業を続行します。"

#. type: Title -
#: ../Documentation-sedout/gitcore-tutorial.txt:1543
#, no-wrap
msgid "Working with Others, Shared Repository Style"
msgstr "Working with Others, Shared Repository Style"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1549
msgid ""
"If you are coming from a CVS background, the style of cooperation suggested "
"in the previous section may be new to you. You do not have to worry. Git "
"supports the \"shared public repository\" style of cooperation you are "
"probably more familiar with as well."
msgstr "あなたがCVS界隈から来ていたら、前のセクションで提案された協力のスタイルはあなたにとって新しいものかもしれません。でも心配する必要はありません。 Gitは、おそらくあなたもよく知っている「共有公開リポジトリ」(shared public repository)スタイルの協同作業をサポートしています。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1551
msgid "See linkgit:gitcvs-migration[7] for the details."
msgstr "詳細については linkgit:gitcvs-migration[7] を参照してください。"

#. type: Title -
#: ../Documentation-sedout/gitcore-tutorial.txt:1553
#, no-wrap
msgid "Bundling your work together"
msgstr "Bundling your work together"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1558
msgid ""
"It is likely that you will be working on more than one thing at a time.  It "
"is easy to manage those more-or-less independent tasks using branches with "
"Git."
msgstr "あなたは一度に複数のことに取り組む可能性があります。Gitでブランチを使用すると、これらの多かれ少なかれ独立したタスクを簡単に管理できます。"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1565
msgid ""
"We have already seen how branches work previously, with \"fun and work\" "
"example using two branches.  The idea is the same if there are more than two "
"branches.  Let's say you started out from \"master\" head, and have some new "
"code in the \"master\" branch, and two independent fixes in the \"commit-fix"
"\" and \"diff-fix\" branches:"
msgstr "私達は2つのブランチを使用した「fun and work」の例で、ブランチがどのように機能するかはすでに見てきました。ブランチが3つ以上ある場合も、考え方は同じです。  `master` ヘッドから始めて、 `master` ブランチにいくつかの新しいコードがあり、 `commit-fix` ブランチと `diff-fix` ブランチに2つの独立した修正があるとします:"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:1571
#, no-wrap
msgid ""
"$ git show-branch\n"
"! [commit-fix] Fix commit message normalization.\n"
" ! [diff-fix] Fix rename detection.\n"
"  * [master] Release candidate #1\n"
"---\n"
msgstr ""
"$ git show-branch\n"
"! [commit-fix] Fix commit message normalization.\n"
" ! [diff-fix] Fix rename detection.\n"
"  * [master] Release candidate #1\n"
"---\n"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:1577
#, no-wrap
msgid ""
" +  [diff-fix] Fix rename detection.\n"
" +  [diff-fix~1] Better common substring algorithm.\n"
"+   [commit-fix] Fix commit message normalization.\n"
"  * [master] Release candidate #1\n"
"++* [diff-fix~2] Pretty-print messages.\n"
msgstr ""
" +  [diff-fix] Fix rename detection.\n"
" +  [diff-fix~1] Better common substring algorithm.\n"
"+   [commit-fix] Fix commit message normalization.\n"
"  * [master] Release candidate #1\n"
"++* [diff-fix~2] Pretty-print messages.\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1582
msgid ""
"Both fixes are tested well, and at this point, you want to merge in both of "
"them.  You could merge in 'diff-fix' first and then 'commit-fix' next, like "
"this:"
msgstr "両方の修正は十分にテストされており、この時点で、両方をマージする必要があります。あなたは以下のように、最初に `diff-fix` でマージし、次に `commit-fix` でマージする事ができます:"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:1586
#, no-wrap
msgid ""
"$ git merge -m \"Merge fix in diff-fix\" diff-fix\n"
"$ git merge -m \"Merge fix in commit-fix\" commit-fix\n"
msgstr ""
"$ git merge -m \"Merge fix in diff-fix\" diff-fix\n"
"$ git merge -m \"Merge fix in commit-fix\" commit-fix\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1589
msgid "Which would result in:"
msgstr "この結果は以下のようになります:"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:1595
#, no-wrap
msgid ""
"$ git show-branch\n"
"! [commit-fix] Fix commit message normalization.\n"
" ! [diff-fix] Fix rename detection.\n"
"  * [master] Merge fix in commit-fix\n"
"---\n"
msgstr ""
"$ git show-branch\n"
"! [commit-fix] Fix commit message normalization.\n"
" ! [diff-fix] Fix rename detection.\n"
"  * [master] Merge fix in commit-fix\n"
"---\n"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:1603
#, no-wrap
msgid ""
"  - [master] Merge fix in commit-fix\n"
"+ * [commit-fix] Fix commit message normalization.\n"
"  - [master~1] Merge fix in diff-fix\n"
" +* [diff-fix] Fix rename detection.\n"
" +* [diff-fix~1] Better common substring algorithm.\n"
"  * [master~2] Release candidate #1\n"
"++* [master~3] Pretty-print messages.\n"
msgstr ""
"  - [master] Merge fix in commit-fix\n"
"+ * [commit-fix] Fix commit message normalization.\n"
"  - [master~1] Merge fix in diff-fix\n"
" +* [diff-fix] Fix rename detection.\n"
" +* [diff-fix~1] Better common substring algorithm.\n"
"  * [master~2] Release candidate #1\n"
"++* [master~3] Pretty-print messages.\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1612
msgid ""
"However, there is no particular reason to merge in one branch first and the "
"other next, when what you have are a set of truly independent changes (if "
"the order mattered, then they are not independent by definition).  You could "
"instead merge those two branches into the current branch at once.  First "
"let's undo what we just did and start over.  We would want to get the master "
"branch before these two merges by resetting it to 'master~2':"
msgstr "しかしながら、あなたが持っているものが真に独立した変更のセットである場合、最初に一方のブランチにマージし、次にもう一方のブランチにマージする特別な理由はありません(もし順序が重要な場合は、それらは定義上独立しているとは言えません)。代わりに、これら2つのブランチを現在のブランチに一度にマージすることができます。まずは、今行ったことを元に戻して、最初からやり直しましょう。 `master~2` にリセットすることにより、これら2つのマージの前のmasterブランチを取得する必要があります:"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:1615
#, no-wrap
msgid "$ git reset --hard master~2\n"
msgstr "$ git reset --hard master~2\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1621
msgid ""
"You can make sure `git show-branch` matches the state before those two 'git "
"merge' you just did.  Then, instead of running two 'git merge' commands in a "
"row, you would merge these two branch heads (this is known as 'making an "
"Octopus'):"
msgstr "`git show-branch` すれば、先ほど行った2つの `git merge` の前の状態と一致することを確認できます。 次に、2つの `git merge` コマンドを連続して実行する代わりに、これら2つのブランチヘッドをマージします(これは「making an Octopus」(タコ足メイク)として知られています):"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:1628
#, no-wrap
msgid ""
"$ git merge commit-fix diff-fix\n"
"$ git show-branch\n"
"! [commit-fix] Fix commit message normalization.\n"
" ! [diff-fix] Fix rename detection.\n"
"  * [master] Octopus merge of branches 'diff-fix' and 'commit-fix'\n"
"---\n"
msgstr ""
"$ git merge commit-fix diff-fix\n"
"$ git show-branch\n"
"! [commit-fix] Fix commit message normalization.\n"
" ! [diff-fix] Fix rename detection.\n"
"  * [master] Octopus merge of branches 'diff-fix' and 'commit-fix'\n"
"---\n"

#. type: delimited block -
#: ../Documentation-sedout/gitcore-tutorial.txt:1635
#, no-wrap
msgid ""
"  - [master] Octopus merge of branches 'diff-fix' and 'commit-fix'\n"
"+ * [commit-fix] Fix commit message normalization.\n"
" +* [diff-fix] Fix rename detection.\n"
" +* [diff-fix~1] Better common substring algorithm.\n"
"  * [master~1] Release candidate #1\n"
"++* [master~2] Pretty-print messages.\n"
msgstr ""
"  - [master] Octopus merge of branches 'diff-fix' and 'commit-fix'\n"
"+ * [commit-fix] Fix commit message normalization.\n"
" +* [diff-fix] Fix rename detection.\n"
" +* [diff-fix~1] Better common substring algorithm.\n"
"  * [master~1] Release candidate #1\n"
"++* [master~2] Pretty-print messages.\n"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1648
msgid ""
"Note that you should not do Octopus just because you can.  An octopus is a "
"valid thing to do and often makes it easier to view the commit history if "
"you are merging more than two independent changes at the same time.  "
"However, if you have merge conflicts with any of the branches you are "
"merging in and need to hand resolve, that is an indication that the "
"development happened in those branches were not independent after all, and "
"you should merge two at a time, documenting how you resolved the conflicts, "
"and the reason why you preferred changes made in one side over the other.  "
"Otherwise it would make the project history harder to follow, not easier."
msgstr "注意: 可能であるからいって必ずしもタコ足(octopus)をやるべきではない、ということに注意してください。タコ足(octopus)は有効な方法であり、2つ以上の独立した変更を同時にマージする場合、コミット履歴を簡単に表示できることがよくあります。しかし、マージしているブランチのいずれかとマージの競合があり、手動で解決する必要がある場合は、これは、これらのブランチで発生した開発が結局独立していないことを示しています。そうすると、あなたは、どうして一度に2つをマージして、競合をどのように解決したか、および一方の側で行われた変更をもう一方の側よりも優先した理由を文書化しなければならなくなります。そうしないと、プロジェクトの履歴を追跡するのが難しくなり、簡単ではなくなります。"

#. type: Title -
#: ../Documentation-sedout/gitcore-tutorial.txt:1650
#, no-wrap
msgid "SEE ALSO"
msgstr "SEE ALSO"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1657
msgid ""
"linkgit:gittutorial[7], linkgit:gittutorial-2[7], linkgit:gitcvs-"
"migration[7], linkgit:git-help[1], linkgit:giteveryday[7], link:user-manual."
"html[The Git User's Manual]"
msgstr ""
"linkgit:gittutorial[7], linkgit:gittutorial-2[7], linkgit:gitcvs-"
"migration[7], linkgit:git-help[1], linkgit:giteveryday[7], link:user-manual."
"html[The Git User's Manual]"

#. type: Title -
#: ../Documentation-sedout/gitcore-tutorial.txt:1659
#, no-wrap
msgid "GIT"
msgstr "GIT"

#. type: Plain text
#: ../Documentation-sedout/gitcore-tutorial.txt:1660
msgid "Part of the linkgit:git[1] suite"
msgstr "Part of the linkgit:git[1] suite"
