# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 0.0\n"
"POT-Creation-Date: 2021-11-04 04:37+0900\n"
"PO-Revision-Date: 2022-03-20 10:48+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/gitcvs-migration.txt:2
#, no-wrap
msgid "gitcvs-migration(7)"
msgstr "gitcvs-migration(7)"

#. type: Title -
#: ../Documentation-sedout/gitcvs-migration.txt:5
#, no-wrap
msgid "NAME"
msgstr "NAME"

#. type: Plain text
#: ../Documentation-sedout/gitcvs-migration.txt:7
msgid "gitcvs-migration - Git for CVS users"
msgstr "gitcvs-migration - CVSユーザー向けGit"

#. type: Title -
#: ../Documentation-sedout/gitcvs-migration.txt:9
#, no-wrap
msgid "SYNOPSIS"
msgstr "SYNOPSIS"

#. type: Plain text
#: ../Documentation-sedout/gitcvs-migration.txt:12
#, no-wrap
msgid "'git cvsimport' *\n"
msgstr "'git cvsimport' *\n"

#. type: Title -
#: ../Documentation-sedout/gitcvs-migration.txt:14
#, no-wrap
msgid "DESCRIPTION"
msgstr "DESCRIPTION"

#. type: Plain text
#: ../Documentation-sedout/gitcvs-migration.txt:21
msgid ""
"Git differs from CVS in that every working tree contains a repository with a "
"full copy of the project history, and no repository is inherently more "
"important than any other.  However, you can emulate the CVS model by "
"designating a single shared repository which people can synchronize with; "
"this document explains how to do that."
msgstr "GitはCVSとは異なり、すべての作業ツリーにはプロジェクト履歴の完全なコピーを含むリポジトリが含まれており、他のどのリポジトリよりも決定的に重要であるリポジトリなどというものはありません。ただし、あなたはユーザーが同期できる単一の共有リポジトリを指定することで、CVSモデルをエミュレートできます。このドキュメントでは、その方法について説明します。"

#. type: Plain text
#: ../Documentation-sedout/gitcvs-migration.txt:25
msgid ""
"Some basic familiarity with Git is required. Having gone through linkgit:"
"gittutorial[7] and linkgit:gitglossary[7] should be sufficient."
msgstr "Gitに関する基本的な知識が必要ですが、 linkgit:gittutorial[7] と linkgit:gitglossary[7] を理解しておけば十分です。"

#. type: Title -
#: ../Documentation-sedout/gitcvs-migration.txt:27
#, no-wrap
msgid "Developing against a shared repository"
msgstr "共有リポジトリに対面する開発"

#. type: Plain text
#: ../Documentation-sedout/gitcvs-migration.txt:32
msgid ""
"Suppose a shared repository is set up in /pub/repo.git on the host foo.com.  "
"Then as an individual committer you can clone the shared repository over ssh "
"with:"
msgstr "ホスト foo.com の /pub/repo.git に共有リポジトリが設定されているとします。次に、個々のコミッターは、以下コマンドを使用してssh経由で共有リポジトリのクローンを作成できます:"

#. type: delimited block -
#: ../Documentation-sedout/gitcvs-migration.txt:36
#, no-wrap
msgid ""
"$ git clone foo.com:/pub/repo.git/ my-project\n"
"$ cd my-project\n"
msgstr ""
"$ git clone foo.com:/pub/repo.git/ my-project\n"
"$ cd my-project\n"

#. type: Plain text
#: ../Documentation-sedout/gitcvs-migration.txt:39
msgid "and hack away.  The equivalent of 'cvs update' is"
msgstr "そしてハックハックします。 `cvs update` に相当するものは以下です"

#. type: delimited block -
#: ../Documentation-sedout/gitcvs-migration.txt:42
#, no-wrap
msgid "$ git pull origin\n"
msgstr "$ git pull origin\n"

#. type: Plain text
#: ../Documentation-sedout/gitcvs-migration.txt:47
msgid ""
"which merges in any work that others might have done since the clone "
"operation.  If there are uncommitted changes in your working tree, commit "
"them first before running git pull."
msgstr "これは、クローン操作以降に他の人が行った可能性のあるすべての作業をマージします。作業ツリーにコミットされていない変更がある場合は、まずは `git pull` を実行する前にコミットしてください。"

#. type: delimited block =
#: ../Documentation-sedout/gitcvs-migration.txt:54
msgid ""
"The 'pull' command knows where to get updates from because of certain "
"configuration variables that were set by the first 'git clone' command; see "
"`git config -l` and the linkgit:git-config[1] man page for details."
msgstr "`pull` コマンドは、最初の `git clone` コマンドによって設定された構成変数によって、更新をどこから取得するかを認識しています。詳細については、 `git config -l` および linkgit:git-config[1] のマニュアルページを参照してください。"

#. type: Plain text
#: ../Documentation-sedout/gitcvs-migration.txt:58
msgid ""
"You can update the shared repository with your changes by first committing "
"your changes, and then using the 'git push' command:"
msgstr "まずあなたの変更をコミットしてから、その後 `git push` コマンドを使用することで、あなたの変更を採用して共有リポジトリを更新できます:"

#. type: delimited block -
#: ../Documentation-sedout/gitcvs-migration.txt:61
#, no-wrap
msgid "$ git push origin master\n"
msgstr "$ git push origin master\n"

#. type: Plain text
#: ../Documentation-sedout/gitcvs-migration.txt:67
msgid ""
"to \"push\" those commits to the shared repository.  If someone else has "
"updated the repository more recently, 'git push', like 'cvs commit', will "
"complain, in which case you must pull any changes before attempting the push "
"again."
msgstr "それらのコミットを共有リポジトリに「プッシュ」します。他の誰かが最近リポジトリを更新した場合、「cvs commit」のように「git push」が文句を言います。その場合、プッシュを再試行する前に変更をプルする必要があります。"

#. type: Plain text
#: ../Documentation-sedout/gitcvs-migration.txt:72
msgid ""
"In the 'git push' command above we specify the name of the remote branch to "
"update (`master`).  If we leave that out, 'git push' tries to update any "
"branches in the remote repository that have the same name as a branch in the "
"local repository.  So the last 'push' can be done with either of:"
msgstr "上記の `git push` コマンドで、更新するリモートブランチの名前(`master`)を指定します。これを省略した場合、 `git push` は、ローカルリポジトリ内のブランチと同じ名前を持つリモートリポジトリ内のブランチを更新しようとします。したがって、最後の「プッシュ」は以下のいずれかで実行できます:"

#. type: delimited block -
#: ../Documentation-sedout/gitcvs-migration.txt:76
#, no-wrap
msgid ""
"$ git push origin\n"
"$ git push foo.com:/pub/project.git/\n"
msgstr ""
"$ git push origin\n"
"$ git push foo.com:/pub/project.git/\n"

#. type: Plain text
#: ../Documentation-sedout/gitcvs-migration.txt:80
msgid ""
"as long as the shared repository does not have any branches other than "
"`master`."
msgstr "上記は共有リポジトリに `master` 以外のブランチがない限りは動作します。"

#. type: Title -
#: ../Documentation-sedout/gitcvs-migration.txt:82
#, no-wrap
msgid "Setting Up a Shared Repository"
msgstr "Setting Up a Shared Repository"

#. type: Plain text
#: ../Documentation-sedout/gitcvs-migration.txt:88
msgid ""
"We assume you have already created a Git repository for your project, "
"possibly created from scratch or from a tarball (see linkgit:"
"gittutorial[7]), or imported from an already existing CVS repository (see "
"the next section)."
msgstr "私達は、プロジェクトのGitリポジトリをすでに作成しているか、または最初からまたはtarballから作成したか(linkgit:gittutorial[7] を参照)、または既存のCVSリポジトリからインポートした(次のセクションを参照)と想定しします。"

#. type: Plain text
#: ../Documentation-sedout/gitcvs-migration.txt:92
msgid ""
"Assume your existing repo is at /home/alice/myproject.  Create a new \"bare"
"\" repository (a repository without a working tree) and fetch your project "
"into it:"
msgstr "あなたの既存のリポジトリが /home/alice/myproject にあると想定します。新しい「ベア」リポジトリ(作業ツリーのないリポジトリ)を作成し、あなたのプロジェクトをそのリポジトリにフェッチします:"

#. type: delimited block -
#: ../Documentation-sedout/gitcvs-migration.txt:98
#, no-wrap
msgid ""
"$ mkdir /pub/my-repo.git\n"
"$ cd /pub/my-repo.git\n"
"$ git --bare init --shared\n"
"$ git --bare fetch /home/alice/myproject master:master\n"
msgstr ""
"$ mkdir /pub/my-repo.git\n"
"$ cd /pub/my-repo.git\n"
"$ git --bare init --shared\n"
"$ git --bare fetch /home/alice/myproject master:master\n"

#. type: Plain text
#: ../Documentation-sedout/gitcvs-migration.txt:105
msgid ""
"Next, give every team member read/write access to this repository.  One easy "
"way to do this is to give all the team members ssh access to the machine "
"where the repository is hosted.  If you don't want to give them a full shell "
"on the machine, there is a restricted shell which only allows users to do "
"Git pushes and pulls; see linkgit:git-shell[1]."
msgstr "次に、すべてのチームメンバーにこのリポジトリへの読み取り/書き込みアクセスを許可します。これを行う簡単な方法の1つは、すべてのチームメンバーにリポジトリがホストされているマシンへのsshアクセスを許可することです。マシン上で完全なシェルを提供したくない場合は、ユーザーがGitのプッシュとプルのみを実行できる制限付きシェルがあります。 linkgit:git-shell[1] を参照してください。"

#. type: Plain text
#: ../Documentation-sedout/gitcvs-migration.txt:108
msgid ""
"Put all the committers in the same group, and make the repository writable "
"by that group:"
msgstr "コミッター全員を同じグループに入れ、リポジトリをそのグループで書き込み可能にします:"

#. type: delimited block -
#: ../Documentation-sedout/gitcvs-migration.txt:111
#, no-wrap
msgid "$ chgrp -R $group /pub/my-repo.git\n"
msgstr "$ chgrp -R $group /pub/my-repo.git\n"

#. type: Plain text
#: ../Documentation-sedout/gitcvs-migration.txt:115
msgid ""
"Make sure committers have a umask of at most 027, so that the directories "
"they create are writable and searchable by other group members."
msgstr "コミッターが作成するディレクトリが他のグループメンバーによって書き込みおよび検索できるように、コミッターのumaskが027であることを確認してください。"

#. type: Title -
#: ../Documentation-sedout/gitcvs-migration.txt:117
#, no-wrap
msgid "Importing a CVS archive"
msgstr "Importing a CVS archive"

#. type: Plain text
#: ../Documentation-sedout/gitcvs-migration.txt:122
msgid ""
"These instructions use the `git-cvsimport` script which ships with git, but "
"other importers may provide better results. See the note in linkgit:git-"
"cvsimport[1] for other options."
msgstr "これらの手順では、gitに付属している `git-cvsimport` スクリプトを使用しますが、他のインポーターがより良い結果を提供する場合があります。他のオプションについては、 linkgit:git-cvsimport[1] のthe noteを参照してください。"

#. type: Plain text
#: ../Documentation-sedout/gitcvs-migration.txt:127
msgid ""
"First, install version 2.1 or higher of cvsps from https://github.com/"
"andreyvit/cvsps[https://github.com/andreyvit/cvsps] and make sure it is in "
"your path.  Then cd to a checked out CVS working directory of the project "
"you are interested in and run linkgit:git-cvsimport[1]:"
msgstr "まず、 https://github.com/andreyvit/cvsps[https://github.com/andreyvit/cvsps] からバージョン2.1以降のcvspsをインストールし、あなたの $PATH に含まれていることを確認します。次に、あなたが関心を持っているプロジェクトのチェックアウトされたCVS作業ディレクトリにcdして、 linkgit:git-cvsimport[1] を実行します:"

#. type: delimited block -
#: ../Documentation-sedout/gitcvs-migration.txt:130
#, no-wrap
msgid "$ git cvsimport -C <destination> <module>\n"
msgstr "$ git cvsimport -C <destination> <module>\n"

#. type: Plain text
#: ../Documentation-sedout/gitcvs-migration.txt:134
msgid ""
"This puts a Git archive of the named CVS module in the directory "
"<destination>, which will be created if necessary."
msgstr "これにより、指定されたCVSモジュールのGitアーカイブがディレクトリ <destination> に必要に応じて作成され、配置されます。"

#. type: Plain text
#: ../Documentation-sedout/gitcvs-migration.txt:139
msgid ""
"The import checks out from CVS every revision of every file.  Reportedly "
"cvsimport can average some twenty revisions per second, so for a medium-"
"sized project this should not take more than a couple of minutes.  Larger "
"projects or remote repositories may take longer."
msgstr "インポートは、すべてのファイルのすべてのリビジョンをCVSからチェックアウトします。聞いた限りでは、cvsimportは1秒あたり平均約20個のリビジョンを処理できるので、中規模のプロジェクトの場合、これには数分以上かかることはありません。大規模なプロジェクトやリモートリポジトリには時間がかかる場合があります。"

#. type: Plain text
#: ../Documentation-sedout/gitcvs-migration.txt:144
msgid ""
"The main trunk is stored in the Git branch named `origin`, and additional "
"CVS branches are stored in Git branches with the same names.  The most "
"recent version of the main trunk is also left checked out on the `master` "
"branch, so you can start adding your own changes right away."
msgstr "メインtrunkは `origin` という名前のGitブランチに保存され、追加のCVSブランチは同じ名前のGitブランチに保存されます。メインtrunkの最新バージョンも `master`ブランチにチェックアウトされたままなので、すぐにあなた独自の変更を追加し始めることができます。"

#. type: Plain text
#: ../Documentation-sedout/gitcvs-migration.txt:150
msgid ""
"The import is incremental, so if you call it again next month it will fetch "
"any CVS updates that have been made in the meantime.  For this to work, you "
"must not modify the imported branches; instead, create new branches for your "
"own changes, and merge in the imported branches as necessary."
msgstr "インポートはインクリメンタルであるため、来月再度呼び出すと、その間に行われたCVS更新がフェッチされます。これが機能するためには、インポートされたブランチを変更してはなりません。代わりに、独自の変更のために新しいブランチを作成し、必要に応じてインポートされたブランチをマージします。"

#. type: Plain text
#: ../Documentation-sedout/gitcvs-migration.txt:155
msgid ""
"If you want a shared repository, you will need to make a bare clone of the "
"imported directory, as described above. Then treat the imported directory as "
"another development clone for purposes of merging incremental imports."
msgstr "あなたが共有リポジトリが必要な場合は、上記のように、あなたはインポートされたディレクトリのベアクローンを作成する必要があります。次に、増分インポートをマージするために、インポートされたディレクトリを別の開発クローンとして扱います。"

#. type: Title -
#: ../Documentation-sedout/gitcvs-migration.txt:157
#, no-wrap
msgid "Advanced Shared Repository Management"
msgstr "Advanced Shared Repository Management"

#. type: Plain text
#: ../Documentation-sedout/gitcvs-migration.txt:162
msgid ""
"Git allows you to specify scripts called \"hooks\" to be run at certain "
"points.  You can use these, for example, to send all commits to the shared "
"repository to a mailing list.  See linkgit:githooks[5]."
msgstr "Gitでは、特定の箇所で実行される「フック」(hooks)と呼ばれるスクリプトを指定できます。これらを使用して、たとえば、共有リポジトリへのすべてのコミットをメーリングリストに送信することができます。 linkgit:githooks[5] を参照してください。"

#. type: Plain text
#: ../Documentation-sedout/gitcvs-migration.txt:166
msgid ""
"You can enforce finer grained permissions using update hooks.  See link:"
"howto/update-hook-example.html[Controlling access to branches using update "
"hooks]."
msgstr "更新フックを使用して、よりきめ細かいアクセス許可を適用できます。 link:howto/update-hook-example.html[Controlling access to branches using update hooks] (更新フックを使用したブランチへのアクセスの制御) を参照してください。"

#. type: Title -
#: ../Documentation-sedout/gitcvs-migration.txt:168
#, no-wrap
msgid "Providing CVS Access to a Git Repository"
msgstr "Providing CVS Access to a Git Repository"

#. type: Plain text
#: ../Documentation-sedout/gitcvs-migration.txt:173
msgid ""
"It is also possible to provide true CVS access to a Git repository, so that "
"developers can still use CVS; see linkgit:git-cvsserver[1] for details."
msgstr "開発者が引き続きCVSを使用できるように、Gitリポジトリへの真のCVSアクセスを提供することも可能です。詳細については、 linkgit:git-cvsserver[1] を参照してください。"

#. type: Title -
#: ../Documentation-sedout/gitcvs-migration.txt:175
#, no-wrap
msgid "Alternative Development Models"
msgstr "Alternative Development Models"

#. type: Plain text
#: ../Documentation-sedout/gitcvs-migration.txt:182
msgid ""
"CVS users are accustomed to giving a group of developers commit access to a "
"common repository.  As we've seen, this is also possible with Git.  However, "
"the distributed nature of Git allows other development models, and you may "
"want to first consider whether one of them might be a better fit for your "
"project."
msgstr "CVSユーザーは、開発者のグループに共通のリポジトリへのコミットアクセスを与えることに慣れています。これまで見てきたように、これはGitでも可能です。ただし、Gitの分散性により、他の開発モデルが利用可能になるため、最初に、そのうちのどれがプロジェクトにより適しているかどうかを検討することをお勧めします。"

#. type: Plain text
#: ../Documentation-sedout/gitcvs-migration.txt:191
msgid ""
"For example, you can choose a single person to maintain the project's "
"primary public repository.  Other developers then clone this repository and "
"each work in their own clone.  When they have a series of changes that "
"they're happy with, they ask the maintainer to pull from the branch "
"containing the changes.  The maintainer reviews their changes and pulls them "
"into the primary repository, which other developers pull from as necessary "
"to stay coordinated.  The Linux kernel and other projects use variants of "
"this model."
msgstr "たとえば、プロジェクトのプライマリ公開リポジトリを保守するために1人の人を選択できます。次に、他の開発者がこのリポジトリのクローンを作成し、それぞれが独自のクローンで作業します。満足のいく一連の変更がある場合、変更を含むブランチからプルするように保守者に依頼します。保守者は変更を確認し、プライマリリポジトリにプルします。プライマリリポジトリは、他の開発者が調整を維持するために必要に応じてプルします。 Linuxカーネルおよびその他のプロジェクトは、このモデルのバリエーションを使用します。"

#. type: Plain text
#: ../Documentation-sedout/gitcvs-migration.txt:194
msgid ""
"With a small group, developers may just pull changes from each other's "
"repositories without the need for a central maintainer."
msgstr "少人数のグループでは、開発者は中央の保守者を必要とせずに、互いのリポジトリから変更をプルするだけで済みます。"

#. type: Title -
#: ../Documentation-sedout/gitcvs-migration.txt:196
#, no-wrap
msgid "SEE ALSO"
msgstr "SEE ALSO"

#. type: Plain text
#: ../Documentation-sedout/gitcvs-migration.txt:203
msgid ""
"linkgit:gittutorial[7], linkgit:gittutorial-2[7], linkgit:gitcore-"
"tutorial[7], linkgit:gitglossary[7], linkgit:giteveryday[7], link:user-"
"manual.html[The Git User's Manual]"
msgstr "linkgit:gittutorial[7], linkgit:gittutorial-2[7], linkgit:gitcore-tutorial[7], linkgit:gitglossary[7], linkgit:giteveryday[7], link:user-manual.html[The Git User's Manual]"

#. type: Title -
#: ../Documentation-sedout/gitcvs-migration.txt:205
#, no-wrap
msgid "GIT"
msgstr "GIT"

#. type: Plain text
#: ../Documentation-sedout/gitcvs-migration.txt:206
msgid "Part of the linkgit:git[1] suite"
msgstr "Part of the linkgit:git[1] suite"
