# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-10-01 00:25+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation/gitcvs-migration.txt:2
#, no-wrap
msgid "gitcvs-migration(7)"
msgstr ""

#. type: Title -
#: ../Documentation/gitcvs-migration.txt:5
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: ../Documentation/gitcvs-migration.txt:7
msgid "gitcvs-migration - Git for CVS users"
msgstr ""

#. type: Title -
#: ../Documentation/gitcvs-migration.txt:9
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: ../Documentation/gitcvs-migration.txt:12
#, no-wrap
msgid "'git cvsimport' *\n"
msgstr ""

#. type: Title -
#: ../Documentation/gitcvs-migration.txt:14
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: ../Documentation/gitcvs-migration.txt:21
msgid ""
"Git differs from CVS in that every working tree contains a repository with a "
"full copy of the project history, and no repository is inherently more "
"important than any other.  However, you can emulate the CVS model by "
"designating a single shared repository which people can synchronize with; "
"this document explains how to do that."
msgstr ""

#. type: Plain text
#: ../Documentation/gitcvs-migration.txt:25
msgid ""
"Some basic familiarity with Git is required. Having gone through "
"linkgit:gittutorial[7] and linkgit:gitglossary[7] should be sufficient."
msgstr ""

#. type: Title -
#: ../Documentation/gitcvs-migration.txt:27
#, no-wrap
msgid "Developing against a shared repository"
msgstr ""

#. type: Plain text
#: ../Documentation/gitcvs-migration.txt:32
msgid ""
"Suppose a shared repository is set up in /pub/repo.git on the host foo.com.  "
"Then as an individual committer you can clone the shared repository over ssh "
"with:"
msgstr ""

#. type: delimited block -
#: ../Documentation/gitcvs-migration.txt:36
#, no-wrap
msgid ""
"$ git clone foo.com:/pub/repo.git/ my-project\n"
"$ cd my-project\n"
msgstr ""

#. type: Plain text
#: ../Documentation/gitcvs-migration.txt:39
msgid "and hack away.  The equivalent of 'cvs update' is"
msgstr ""

#. type: delimited block -
#: ../Documentation/gitcvs-migration.txt:42
#, no-wrap
msgid "$ git pull origin\n"
msgstr ""

#. type: Plain text
#: ../Documentation/gitcvs-migration.txt:47
msgid ""
"which merges in any work that others might have done since the clone "
"operation.  If there are uncommitted changes in your working tree, commit "
"them first before running git pull."
msgstr ""

#. type: delimited block =
#: ../Documentation/gitcvs-migration.txt:54
msgid ""
"The 'pull' command knows where to get updates from because of certain "
"configuration variables that were set by the first 'git clone' command; see "
"`git config -l` and the linkgit:git-config[1] man page for details."
msgstr ""

#. type: Plain text
#: ../Documentation/gitcvs-migration.txt:58
msgid ""
"You can update the shared repository with your changes by first committing "
"your changes, and then using the 'git push' command:"
msgstr ""

#. type: delimited block -
#: ../Documentation/gitcvs-migration.txt:61
#, no-wrap
msgid "$ git push origin master\n"
msgstr ""

#. type: Plain text
#: ../Documentation/gitcvs-migration.txt:67
msgid ""
"to \"push\" those commits to the shared repository.  If someone else has "
"updated the repository more recently, 'git push', like 'cvs commit', will "
"complain, in which case you must pull any changes before attempting the push "
"again."
msgstr ""

#. type: Plain text
#: ../Documentation/gitcvs-migration.txt:72
msgid ""
"In the 'git push' command above we specify the name of the remote branch to "
"update (`master`).  If we leave that out, 'git push' tries to update any "
"branches in the remote repository that have the same name as a branch in the "
"local repository.  So the last 'push' can be done with either of:"
msgstr ""

#. type: delimited block -
#: ../Documentation/gitcvs-migration.txt:76
#, no-wrap
msgid ""
"$ git push origin\n"
"$ git push foo.com:/pub/project.git/\n"
msgstr ""

#. type: Plain text
#: ../Documentation/gitcvs-migration.txt:80
msgid ""
"as long as the shared repository does not have any branches other than "
"`master`."
msgstr ""

#. type: Title -
#: ../Documentation/gitcvs-migration.txt:82
#, no-wrap
msgid "Setting Up a Shared Repository"
msgstr ""

#. type: Plain text
#: ../Documentation/gitcvs-migration.txt:88
msgid ""
"We assume you have already created a Git repository for your project, "
"possibly created from scratch or from a tarball (see "
"linkgit:gittutorial[7]), or imported from an already existing CVS repository "
"(see the next section)."
msgstr ""

#. type: Plain text
#: ../Documentation/gitcvs-migration.txt:92
msgid ""
"Assume your existing repo is at /home/alice/myproject.  Create a new "
"\"bare\" repository (a repository without a working tree) and fetch your "
"project into it:"
msgstr ""

#. type: delimited block -
#: ../Documentation/gitcvs-migration.txt:98
#, no-wrap
msgid ""
"$ mkdir /pub/my-repo.git\n"
"$ cd /pub/my-repo.git\n"
"$ git --bare init --shared\n"
"$ git --bare fetch /home/alice/myproject master:master\n"
msgstr ""

#. type: Plain text
#: ../Documentation/gitcvs-migration.txt:105
msgid ""
"Next, give every team member read/write access to this repository.  One easy "
"way to do this is to give all the team members ssh access to the machine "
"where the repository is hosted.  If you don't want to give them a full shell "
"on the machine, there is a restricted shell which only allows users to do "
"Git pushes and pulls; see linkgit:git-shell[1]."
msgstr ""

#. type: Plain text
#: ../Documentation/gitcvs-migration.txt:108
msgid ""
"Put all the committers in the same group, and make the repository writable "
"by that group:"
msgstr ""

#. type: delimited block -
#: ../Documentation/gitcvs-migration.txt:111
#, no-wrap
msgid "$ chgrp -R $group /pub/my-repo.git\n"
msgstr ""

#. type: Plain text
#: ../Documentation/gitcvs-migration.txt:115
msgid ""
"Make sure committers have a umask of at most 027, so that the directories "
"they create are writable and searchable by other group members."
msgstr ""

#. type: Title -
#: ../Documentation/gitcvs-migration.txt:117
#, no-wrap
msgid "Importing a CVS archive"
msgstr ""

#. type: Plain text
#: ../Documentation/gitcvs-migration.txt:122
msgid ""
"These instructions use the `git-cvsimport` script which ships with git, but "
"other importers may provide better results. See the note in "
"linkgit:git-cvsimport[1] for other options."
msgstr ""

#. type: Plain text
#: ../Documentation/gitcvs-migration.txt:127
msgid ""
"First, install version 2.1 or higher of cvsps from "
"https://github.com/andreyvit/cvsps[https://github.com/andreyvit/cvsps] and "
"make sure it is in your path.  Then cd to a checked out CVS working "
"directory of the project you are interested in and run "
"linkgit:git-cvsimport[1]:"
msgstr ""

#. type: delimited block -
#: ../Documentation/gitcvs-migration.txt:130
#, no-wrap
msgid "$ git cvsimport -C <destination> <module>\n"
msgstr ""

#. type: Plain text
#: ../Documentation/gitcvs-migration.txt:134
msgid ""
"This puts a Git archive of the named CVS module in the directory "
"<destination>, which will be created if necessary."
msgstr ""

#. type: Plain text
#: ../Documentation/gitcvs-migration.txt:139
msgid ""
"The import checks out from CVS every revision of every file.  Reportedly "
"cvsimport can average some twenty revisions per second, so for a "
"medium-sized project this should not take more than a couple of minutes.  "
"Larger projects or remote repositories may take longer."
msgstr ""

#. type: Plain text
#: ../Documentation/gitcvs-migration.txt:144
msgid ""
"The main trunk is stored in the Git branch named `origin`, and additional "
"CVS branches are stored in Git branches with the same names.  The most "
"recent version of the main trunk is also left checked out on the `master` "
"branch, so you can start adding your own changes right away."
msgstr ""

#. type: Plain text
#: ../Documentation/gitcvs-migration.txt:150
msgid ""
"The import is incremental, so if you call it again next month it will fetch "
"any CVS updates that have been made in the meantime.  For this to work, you "
"must not modify the imported branches; instead, create new branches for your "
"own changes, and merge in the imported branches as necessary."
msgstr ""

#. type: Plain text
#: ../Documentation/gitcvs-migration.txt:155
msgid ""
"If you want a shared repository, you will need to make a bare clone of the "
"imported directory, as described above. Then treat the imported directory as "
"another development clone for purposes of merging incremental imports."
msgstr ""

#. type: Title -
#: ../Documentation/gitcvs-migration.txt:157
#, no-wrap
msgid "Advanced Shared Repository Management"
msgstr ""

#. type: Plain text
#: ../Documentation/gitcvs-migration.txt:162
msgid ""
"Git allows you to specify scripts called \"hooks\" to be run at certain "
"points.  You can use these, for example, to send all commits to the shared "
"repository to a mailing list.  See linkgit:githooks[5]."
msgstr ""

#. type: Plain text
#: ../Documentation/gitcvs-migration.txt:166
msgid ""
"You can enforce finer grained permissions using update hooks.  See "
"link:howto/update-hook-example.html[Controlling access to branches using "
"update hooks]."
msgstr ""

#. type: Title -
#: ../Documentation/gitcvs-migration.txt:168
#, no-wrap
msgid "Providing CVS Access to a Git Repository"
msgstr ""

#. type: Plain text
#: ../Documentation/gitcvs-migration.txt:173
msgid ""
"It is also possible to provide true CVS access to a Git repository, so that "
"developers can still use CVS; see linkgit:git-cvsserver[1] for details."
msgstr ""

#. type: Title -
#: ../Documentation/gitcvs-migration.txt:175
#, no-wrap
msgid "Alternative Development Models"
msgstr ""

#. type: Plain text
#: ../Documentation/gitcvs-migration.txt:182
msgid ""
"CVS users are accustomed to giving a group of developers commit access to a "
"common repository.  As we've seen, this is also possible with Git.  However, "
"the distributed nature of Git allows other development models, and you may "
"want to first consider whether one of them might be a better fit for your "
"project."
msgstr ""

#. type: Plain text
#: ../Documentation/gitcvs-migration.txt:191
msgid ""
"For example, you can choose a single person to maintain the project's "
"primary public repository.  Other developers then clone this repository and "
"each work in their own clone.  When they have a series of changes that "
"they're happy with, they ask the maintainer to pull from the branch "
"containing the changes.  The maintainer reviews their changes and pulls them "
"into the primary repository, which other developers pull from as necessary "
"to stay coordinated.  The Linux kernel and other projects use variants of "
"this model."
msgstr ""

#. type: Plain text
#: ../Documentation/gitcvs-migration.txt:194
msgid ""
"With a small group, developers may just pull changes from each other's "
"repositories without the need for a central maintainer."
msgstr ""

#. type: Title -
#: ../Documentation/gitcvs-migration.txt:196
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: ../Documentation/gitcvs-migration.txt:203
msgid ""
"linkgit:gittutorial[7], linkgit:gittutorial-2[7], "
"linkgit:gitcore-tutorial[7], linkgit:gitglossary[7], linkgit:giteveryday[7], "
"link:user-manual.html[The Git User's Manual]"
msgstr ""

#. type: Title -
#: ../Documentation/gitcvs-migration.txt:205
#, no-wrap
msgid "GIT"
msgstr ""

#. type: Plain text
#: ../Documentation/gitcvs-migration.txt:206
msgid "Part of the linkgit:git[1] suite"
msgstr ""
