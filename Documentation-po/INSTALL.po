# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-12-06 05:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: ../INSTALL:3
#, no-wrap
msgid "\t\tGit installation\n"
msgstr ""

#. type: Plain text
#: ../INSTALL:7
msgid ""
"Normally you can just do \"make\" followed by \"make install\", and that "
"will install the git programs in your own ~/bin/ directory.  If you want to "
"do a global install, you can do"
msgstr ""

#. type: Plain text
#: ../INSTALL:10
#, no-wrap
msgid ""
"\t$ make prefix=/usr all doc info ;# as yourself\n"
"\t# make prefix=/usr install install-doc install-html install-info ;# as "
"root\n"
msgstr ""

#. type: Plain text
#: ../INSTALL:15
msgid ""
"(or prefix=/usr/local, of course).  Just like any program suite that uses "
"$prefix, the built results have some paths encoded, which are derived from "
"$prefix, so \"make all; make prefix=/usr install\" would not work."
msgstr ""

#. type: Plain text
#: ../INSTALL:19
msgid ""
"The beginning of the Makefile documents many variables that affect the way "
"git is built.  You can override them either from the command line, or in a "
"config.mak file."
msgstr ""

#. type: Plain text
#: ../INSTALL:22
msgid ""
"Alternatively you can use autoconf generated ./configure script to set up "
"install paths (via config.mak.autogen), so you can write instead"
msgstr ""

#. type: Plain text
#: ../INSTALL:27
#, no-wrap
msgid ""
"\t$ make configure ;# as yourself\n"
"\t$ ./configure --prefix=/usr ;# as yourself\n"
"\t$ make all doc ;# as yourself\n"
"\t# make install install-doc install-html;# as root\n"
msgstr ""

#. type: Plain text
#: ../INSTALL:30
msgid ""
"If you're willing to trade off (much) longer build time for a later faster "
"git you can also do a profile feedback build with"
msgstr ""

#. type: Plain text
#: ../INSTALL:33
#, no-wrap
msgid ""
"\t$ make prefix=/usr profile\n"
"\t# make prefix=/usr PROFILE=BUILD install\n"
msgstr ""

#. type: Plain text
#: ../INSTALL:38
msgid ""
"This will run the complete test suite as training workload and then rebuild "
"git with the generated profile feedback. This results in a git which is a "
"few percent faster on CPU intensive workloads.  This may be a good tradeoff "
"for distribution packagers."
msgstr ""

#. type: Plain text
#: ../INSTALL:42
msgid ""
"Alternatively you can run profile feedback only with the git benchmark "
"suite. This runs significantly faster than the full test suite, but has less "
"coverage:"
msgstr ""

#. type: Plain text
#: ../INSTALL:45
#, no-wrap
msgid ""
"\t$ make prefix=/usr profile-fast\n"
"\t# make prefix=/usr PROFILE=BUILD install\n"
msgstr ""

#. type: Plain text
#: ../INSTALL:48
msgid ""
"Or if you just want to install a profile-optimized version of git into your "
"home directory, you could run:"
msgstr ""

#. type: Plain text
#: ../INSTALL:50
#, no-wrap
msgid "\t$ make profile-install\n"
msgstr ""

#. type: Plain text
#: ../INSTALL:53
#, no-wrap
msgid ""
"or\n"
"\t$ make profile-fast-install\n"
msgstr ""

#. type: Plain text
#: ../INSTALL:60
msgid ""
"As a caveat: a profile-optimized build takes a *lot* longer since the git "
"tree must be built twice, and in order for the profiling measurements to "
"work properly, ccache must be disabled and the test suite has to be run "
"using only a single CPU.  In addition, the profile feedback build stage "
"currently generates a lot of additional compiler warnings."
msgstr ""

#. type: Plain text
#: ../INSTALL:62
msgid "Issues of note:"
msgstr ""

#. type: Bullet: ' - '
#: ../INSTALL:68
msgid ""
"Ancient versions of GNU Interactive Tools (pre-4.9.2) installed a program "
"\"git\", whose name conflicts with this program.  But with version 4.9.2, "
"after long hiatus without active maintenance (since around 1997), it changed "
"its name to gnuit and the name conflict is no longer a problem."
msgstr ""

#. type: Plain text
#: ../INSTALL:72
#, no-wrap
msgid ""
"   NOTE: When compiled with backward compatibility option, the GNU\n"
"   Interactive Tools package still can install \"git\", but you can build "
"it\n"
"   with --disable-transition option to avoid this.\n"
msgstr ""

#. type: Bullet: ' - '
#: ../INSTALL:78
msgid ""
"You can use git after building but without installing if you want to test "
"drive it.  Simply run git found in bin-wrappers directory in the build "
"directory, or prepend that directory to your $PATH.  This however is less "
"efficient than running an installed git, as you always need an extra "
"fork+exec to run any git subcommand."
msgstr ""

#. type: Plain text
#: ../INSTALL:84
#, no-wrap
msgid ""
"   It is still possible to use git without installing by setting a few\n"
"   environment variables, which was the way this was done\n"
"   traditionally.  But using git found in bin-wrappers directory in\n"
"   the build directory is far simpler.  As a historical reference, the\n"
"   old way went like this:\n"
msgstr ""

#. type: Plain text
#: ../INSTALL:89
#, no-wrap
msgid ""
"\tGIT_EXEC_PATH=`pwd`\n"
"\tPATH=`pwd`:$PATH\n"
"\tGITPERLLIB=`pwd`/perl/build/lib\n"
"\texport GIT_EXEC_PATH PATH GITPERLLIB\n"
msgstr ""

#. type: Bullet: ' - '
#: ../INSTALL:96
msgid ""
"By default (unless NO_PERL is provided) Git will ship various perl "
"scripts. However, for simplicity it doesn't use the ExtUtils::MakeMaker "
"toolchain to decide where to place the perl libraries. Depending on the "
"system this can result in the perl libraries not being where you'd like them "
"if they're expected to be used by things other than Git itself."
msgstr ""

#. type: Plain text
#: ../INSTALL:99
#, no-wrap
msgid ""
"   Manually supplying a perllibdir prefix should fix this, if this is\n"
"   a problem you care about, e.g.:\n"
msgstr ""

#. type: Plain text
#: ../INSTALL:101
#, no-wrap
msgid ""
"       prefix=/usr perllibdir=/usr/$(/usr/bin/perl -MConfig -wle 'print "
"substr $Config{installsitelib}, 1 + length $Config{siteprefixexp}')\n"
msgstr ""

#. type: Plain text
#: ../INSTALL:104
#, no-wrap
msgid ""
"   Will result in e.g. perllibdir=/usr/share/perl/5.26.1 on Debian,\n"
"   perllibdir=/usr/share/perl5 (which we'd use by default) on CentOS.\n"
msgstr ""

#. type: Bullet: ' - '
#: ../INSTALL:109
msgid ""
"Unless NO_PERL is provided Git will ship various perl libraries it "
"needs. Distributors of Git will usually want to set NO_PERL_CPAN_FALLBACKS "
"if NO_PERL is not provided to use their own copies of the CPAN modules Git "
"needs."
msgstr ""

#. type: Bullet: ' - '
#: ../INSTALL:114
msgid ""
"Git is reasonably self-sufficient, but does depend on a few external "
"programs and libraries.  Git can be used without most of them by adding the "
"appropriate \"NO_<LIBRARY>=YesPlease\" to the make command line or "
"config.mak file."
msgstr ""

#. type: Bullet: '	- '
#: ../INSTALL:116
msgid "\"zlib\", the compression library. Git won't build without it."
msgstr ""

#. type: Bullet: '	- '
#: ../INSTALL:118
msgid "\"ssh\" is used to push and pull over the net."
msgstr ""

#. type: Bullet: '	- '
#: ../INSTALL:121
msgid ""
"A POSIX-compliant shell is required to run some scripts needed for everyday "
"use (e.g. \"bisect\", \"request-pull\")."
msgstr ""

#. type: Bullet: '	- '
#: ../INSTALL:131
msgid ""
"\"Perl\" version 5.8 or later is needed to use some of the features "
"(e.g. preparing a partial commit using \"git add -i/-p\", interacting with "
"svn repositories with \"git svn\").  If you can live without these, use "
"NO_PERL.  Note that recent releases of Redhat/Fedora are reported to ship "
"Perl binary package with some core modules stripped away (see "
"http://lwn.net/Articles/477234/), so you might need to install additional "
"packages other than Perl itself, e.g. Digest::MD5, File::Spec, File::Temp, "
"Net::Domain, Net::SMTP, and Time::HiRes."
msgstr ""

#. type: Bullet: '	- '
#: ../INSTALL:135
msgid ""
"git-imap-send needs the OpenSSL library to talk IMAP over SSL if you are "
"using libcurl older than 7.34.0.  Otherwise you can use NO_OPENSSL without "
"losing git-imap-send."
msgstr ""

#. type: Plain text
#: ../INSTALL:140
#, no-wrap
msgid ""
"\t  By default, git uses OpenSSL for SHA1 but it will use its own\n"
"\t  library (inspired by Mozilla's) with either NO_OPENSSL or\n"
"\t  BLK_SHA1.  Also included is a version optimized for PowerPC\n"
"\t  (PPC_SHA1).\n"
msgstr ""

#. type: Bullet: '	- '
#: ../INSTALL:146
msgid ""
"\"libcurl\" library is used for fetching and pushing repositories over "
"http:// or https://, as well as by git-imap-send if the curl version is >= "
"7.34.0. If you do not need that functionality, use NO_CURL to build without "
"it."
msgstr ""

#. type: Plain text
#: ../INSTALL:150
#, no-wrap
msgid ""
"\t  Git requires version \"7.19.4\" or later of \"libcurl\" to build\n"
"\t  without NO_CURL. This version requirement may be bumped in\n"
"\t  the future.\n"
msgstr ""

#. type: Bullet: '	- '
#: ../INSTALL:154
msgid ""
"\"expat\" library; git-http-push uses it for remote lock management over "
"DAV.  Similar to \"curl\" above, this is optional (with NO_EXPAT)."
msgstr ""

#. type: Bullet: '	- '
#: ../INSTALL:158
msgid ""
"\"wish\", the Tcl/Tk windowing shell is used in gitk to show the history "
"graphically, and in git-gui.  If you don't want gitk or git-gui, you can use "
"NO_TCLTK."
msgstr ""

#. type: Bullet: '	- '
#: ../INSTALL:162
msgid ""
"A gettext library is used by default for localizing Git. The primary target "
"is GNU libintl, but the Solaris gettext implementation also works."
msgstr ""

#. type: Plain text
#: ../INSTALL:166
#, no-wrap
msgid ""
"\t  We need a gettext.h on the system for C code, gettext.sh (or\n"
"\t  Solaris gettext(1)) for shell scripts, and libintl-perl for Perl\n"
"\t  programs.\n"
msgstr ""

#. type: Plain text
#: ../INSTALL:170
#, no-wrap
msgid ""
"\t  Set NO_GETTEXT to disable localization support and make Git only\n"
"\t  use English. Under autoconf the configure script will do this\n"
"\t  automatically if it can't find libintl on the system.\n"
msgstr ""

#. type: Bullet: '	- '
#: ../INSTALL:173
msgid ""
"Python version 2.7 or later is needed to use the git-p4 interface to "
"Perforce."
msgstr ""

#. type: Bullet: ' - '
#: ../INSTALL:182
msgid ""
"Some platform specific issues are dealt with Makefile rules, but depending "
"on your specific installation, you may not have all the libraries/tools "
"needed, or you may have necessary libraries at unusual locations.  Please "
"look at the top of the Makefile to see what can be adjusted for your needs.  "
"You can place local settings in config.mak and the Makefile will include "
"them.  Note that config.mak is not distributed; the name is reserved for "
"local settings."
msgstr ""

#. type: Bullet: ' - '
#: ../INSTALL:187
msgid ""
"To build and install documentation suite, you need to have the "
"asciidoc/xmlto toolchain.  Because not many people are inclined to install "
"the tools, the default build target (\"make all\") does _not_ build them."
msgstr ""

#. type: Plain text
#: ../INSTALL:192
#, no-wrap
msgid ""
"   \"make doc\" builds documentation in man and html formats; there are\n"
"   also \"make man\", \"make html\" and \"make info\". Note that \"make "
"html\"\n"
"   requires asciidoc, but not xmlto. \"make man\" (and thus make doc)\n"
"   requires both.\n"
msgstr ""

#. type: Plain text
#: ../INSTALL:196
#, no-wrap
msgid ""
"   \"make install-doc\" installs documentation in man format only; there\n"
"   are also \"make install-man\", \"make install-html\" and \"make\n"
"   install-info\".\n"
msgstr ""

#. type: Plain text
#: ../INSTALL:199
#, no-wrap
msgid ""
"   Building and installing the info file additionally requires\n"
"   makeinfo and docbook2X.  Version 0.8.3 is known to work.\n"
msgstr ""

#. type: Plain text
#: ../INSTALL:202
#, no-wrap
msgid ""
"   Building and installing the pdf file additionally requires\n"
"   dblatex.  Version >= 0.2.7 is known to work.\n"
msgstr ""

#. type: Plain text
#: ../INSTALL:206
#, no-wrap
msgid ""
"   All formats require at least asciidoc 8.4.1. Alternatively, you can\n"
"   use Asciidoctor (requires Ruby) by passing USE_ASCIIDOCTOR=YesPlease\n"
"   to make. You need at least Asciidoctor version 1.5.\n"
msgstr ""

#. type: Plain text
#: ../INSTALL:212
#, no-wrap
msgid ""
"   There are also \"make quick-install-doc\", \"make quick-install-man\"\n"
"   and \"make quick-install-html\" which install preformatted man pages\n"
"   and html documentation. To use these build targets, you need to\n"
"   clone two separate git-htmldocs and git-manpages repositories next\n"
"   to the clone of git itself.\n"
msgstr ""

#. type: Plain text
#: ../INSTALL:214
#, no-wrap
msgid "   The minimum supported version of docbook-xsl is 1.74.\n"
msgstr ""

#. type: Plain text
#: ../INSTALL:217
#, no-wrap
msgid ""
"   Users attempting to build the documentation on Cygwin may need to "
"ensure\n"
"   that the /etc/xml/catalog file looks something like this:\n"
msgstr ""

#. type: Plain text
#: ../INSTALL:233
#, no-wrap
msgid ""
"   <?xml version=\"1.0\"?>\n"
"   <!DOCTYPE catalog PUBLIC\n"
"      \"-//OASIS//DTD Entity Resolution XML Catalog V1.0//EN\"\n"
"      "
"\"http://www.oasis-open.org/committees/entity/release/1.0/catalog.dtd\"\n"
"   >\n"
"   <catalog xmlns=\"urn:oasis:names:tc:entity:xmlns:xml:catalog\">\n"
"     <rewriteURI\n"
"       uriStartString = "
"\"http://docbook.sourceforge.net/release/xsl/current\"\n"
"       rewritePrefix = \"/usr/share/sgml/docbook/xsl-stylesheets\"\n"
"     />\n"
"     <rewriteURI\n"
"       uriStartString=\"http://www.oasis-open.org/docbook/xml/4.5\"\n"
"       rewritePrefix=\"/usr/share/sgml/docbook/xml-dtd-4.5\"\n"
"     />\n"
"  </catalog>\n"
msgstr ""

#. type: Plain text
#: ../INSTALL:235
#, no-wrap
msgid "  This can be achieved with the following two xmlcatalog commands:\n"
msgstr ""

#. type: Plain text
#: ../INSTALL:241
#, no-wrap
msgid ""
"  xmlcatalog --noout \\\n"
"     --add rewriteURI \\\n"
"        http://docbook.sourceforge.net/release/xsl/current \\\n"
"        /usr/share/sgml/docbook/xsl-stylesheets \\\n"
"     /etc/xml/catalog\n"
msgstr ""

#. type: Plain text
#: ../INSTALL:246
#, no-wrap
msgid ""
"  xmlcatalog --noout \\\n"
"     --add rewriteURI \\\n"
"         http://www.oasis-open.org/docbook/xml/4.5/xsl/current \\\n"
"         /usr/share/sgml/docbook/xml-dtd-4.5 \\\n"
"     /etc/xml/catalog\n"
msgstr ""
