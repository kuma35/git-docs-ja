# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 2.0\n"
"POT-Creation-Date: 2023-07-18 11:07+0900\n"
"PO-Revision-Date: 2023-07-19 06:06+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: ../INSTALL:3
#, no-wrap
msgid "\t\tGit installation\n"
msgstr "\t\tGit installation\n"

#. type: Plain text
#: ../INSTALL:7
msgid ""
"Normally you can just do \"make\" followed by \"make install\", and that "
"will install the git programs in your own ~/bin/ directory.  If you want to "
"do a global install, you can do"
msgstr ""
"通常は、「make」の後に「make install」を実行するだけで、gitプログラムが自分"
"の ~/bin/ ディレクトリにインストールされます(訳注: ~/share も使う)。グローバ"
"ルインストールを実行する場合は、以下のようにすることができます。"

#. type: Plain text
#: ../INSTALL:10
#, no-wrap
msgid ""
"\t$ make prefix=/usr all doc info ;# as yourself\n"
"\t# make prefix=/usr install install-doc install-html install-info ;# as root\n"
msgstr ""
"\t$ make prefix=/usr all doc info ;# as yourself\n"
"\t# make prefix=/usr install install-doc install-html install-info ;# as root\n"

#. type: Plain text
#: ../INSTALL:15
msgid ""
"(or prefix=/usr/local, of course).  Just like any program suite that uses "
"$prefix, the built results have some paths encoded, which are derived from "
"$prefix, so \"make all; make prefix=/usr install\" would not work."
msgstr ""
"(もちろん、 prefix=/usr/local でもOK)。 $prefix を使用する他のプログラムス"
"イートと同様に、ビルドされた結果には、$prefixから派生したいくつかのパスが埋め"
"込まれているため、「make all; make prefix=/usr install」は機能しません。"

#. type: Plain text
#: ../INSTALL:19
msgid ""
"The beginning of the Makefile documents many variables that affect the way "
"git is built.  You can override them either from the command line, or in a "
"config.mak file."
msgstr ""
"Makefileの冒頭には、gitの構築方法に影響を与える多くの変数が記載されていま"
"す。 これらは、コマンドラインまたはconfig.makファイルからオーバーライドできま"
"す。"

#. type: Plain text
#: ../INSTALL:22
msgid ""
"Alternatively you can use autoconf generated ./configure script to set up "
"install paths (via config.mak.autogen), so you can write instead"
msgstr ""
"または、autoconfで生成された ./configure スクリプトを使用してインストールパス"
"を設定することもできます(config.mak.autogenを介して)。代わりに以下のように記"
"述できます。"

#. type: Plain text
#: ../INSTALL:27
#, no-wrap
msgid ""
"\t$ make configure ;# as yourself\n"
"\t$ ./configure --prefix=/usr ;# as yourself\n"
"\t$ make all doc ;# as yourself\n"
"\t# make install install-doc install-html;# as root\n"
msgstr ""
"\t$ make configure ;# as yourself\n"
"\t$ ./configure --prefix=/usr ;# as yourself\n"
"\t$ make all doc ;# as yourself\n"
"\t# make install install-doc install-html;# as root\n"

#. type: Plain text
#: ../INSTALL:30
msgid ""
"If you're willing to trade off (much) longer build time for a later faster "
"git you can also do a profile feedback build with"
msgstr ""
"ビルド時間を（はるかに）長くして、後で高速なgitとトレードオフする場合は、以下"
"のようにプロファイルフィードバックビルド(profile feedback build)を実行するこ"
"ともできます。"

#. type: Plain text
#: ../INSTALL:33
#, no-wrap
msgid ""
"\t$ make prefix=/usr profile\n"
"\t# make prefix=/usr PROFILE=BUILD install\n"
msgstr ""
"\t$ make prefix=/usr profile\n"
"\t# make prefix=/usr PROFILE=BUILD install\n"

#. type: Plain text
#: ../INSTALL:38
msgid ""
"This will run the complete test suite as training workload and then rebuild "
"git with the generated profile feedback. This results in a git which is a "
"few percent faster on CPU intensive workloads.  This may be a good tradeoff "
"for distribution packagers."
msgstr ""
"これにより、完全なテストスイートがトレーニングワークロード(training workload)"
"として実行され、生成されたプロファイルフィードバック(profile feedback)を使用"
"してgitが再構築されます。 これにより、CPUを集中的に使用するワークロードでgit"
"が数パーセント高速になります。 これは、配布パッケージャーにとっては良いトレー"
"ドオフになる可能性があります。"

#. type: Plain text
#: ../INSTALL:42
msgid ""
"Alternatively you can run profile feedback only with the git benchmark "
"suite. This runs significantly faster than the full test suite, but has less "
"coverage:"
msgstr ""
"または、gitベンチマークスイート(git benchmark suite)でのみプロファイルフィー"
"ドバック(profile feedback)を実行できます。 これは、完全なテストスイートよりも"
"大幅に高速に実行されますが、カバレッジは低くなります。"

#. type: Plain text
#: ../INSTALL:45
#, no-wrap
msgid ""
"\t$ make prefix=/usr profile-fast\n"
"\t# make prefix=/usr PROFILE=BUILD install\n"
msgstr ""
"\t$ make prefix=/usr profile-fast\n"
"\t# make prefix=/usr PROFILE=BUILD install\n"

#. type: Plain text
#: ../INSTALL:48
msgid ""
"Or if you just want to install a profile-optimized version of git into your "
"home directory, you could run:"
msgstr ""
"または、プロファイルに最適化されたバージョンのgitをホームディレクトリにインス"
"トールするだけの場合は、以下のコマンドを実行できます:"

#. type: Plain text
#: ../INSTALL:50
#, no-wrap
msgid "\t$ make profile-install\n"
msgstr "\t$ make profile-install\n"

#. type: Plain text
#: ../INSTALL:53
#, no-wrap
msgid ""
"or\n"
"\t$ make profile-fast-install\n"
msgstr ""
"または\n"
"\t$ make profile-fast-install\n"

#. type: Plain text
#: ../INSTALL:60
msgid ""
"As a caveat: a profile-optimized build takes a *lot* longer since the git "
"tree must be built twice, and in order for the profiling measurements to "
"work properly, ccache must be disabled and the test suite has to be run "
"using only a single CPU.  In addition, the profile feedback build stage "
"currently generates a lot of additional compiler warnings."
msgstr ""
"警告: プロファイル最適化(profile-optimized)ビルドは、gitツリーを2回ビルドする"
"必要があるため、「かなり」時間がかかります。プロファイリング測定を正しく機能"
"させるには、ccacheを無効にし、テストスイートを単一のCPUのみを使用して実行する"
"必要があります。さらに、プロファイルフィードバックビルドステージ(profile "
"feedback build stage)は現在、多くの追加のコンパイラ警告を生成します。"

#. type: Plain text
#: ../INSTALL:62
msgid "Issues of note:"
msgstr "注意事項:"

#. type: Bullet: ' - '
#: ../INSTALL:68
msgid ""
"Ancient versions of GNU Interactive Tools (pre-4.9.2) installed a program "
"\"git\", whose name conflicts with this program.  But with version 4.9.2, "
"after long hiatus without active maintenance (since around 1997), it changed "
"its name to gnuit and the name conflict is no longer a problem."
msgstr ""
"GNU Interactive Toolsの古いバージョン（4.9.2より前）は、「git」という名前のプ"
"ログラムをインストールしましたが、その名前はこのプログラムと競合しています。"
"しかし、バージョン4.9.2では、アクティブなメンテナンスを行わずに長期間休止した"
"後（1997年頃から）、名前がgnuitに変更され、もはや名前の競合は問題になりませ"
"ん。"

#. type: Plain text
#: ../INSTALL:72
#, no-wrap
msgid ""
"   NOTE: When compiled with backward compatibility option, the GNU\n"
"   Interactive Tools package still can install \"git\", but you can build it\n"
"   with --disable-transition option to avoid this.\n"
msgstr ""
"   注 下位互換性オプションを使用してコンパイルした場合でも、\n"
"   GNU Interactive Toolsパッケージは「git」をインストールできますが、\n"
"   これを回避するために --disable-transition オプションを使用してビルドできます。\n"

#. type: Bullet: ' - '
#: ../INSTALL:78
msgid ""
"You can use git after building but without installing if you want to test "
"drive it.  Simply run git found in bin-wrappers directory in the build "
"directory, or prepend that directory to your $PATH.  This however is less "
"efficient than running an installed git, as you always need an extra "
"fork+exec to run any git subcommand."
msgstr ""
"ビルド後にはgitを使用できますが、テスト的に使用する場合はインストールせずに使"
"用できます。ビルドディレクトリの bin-wrappers ディレクトリにあるgitを実行する"
"か、そのディレクトリを $PATHの前に追加します(訳注:つまり、あなたの作業ツリー"
"内で、 hogehoge/git/bin-wrappers/git version 等と実行できる)。 ただし、これは"
"インストールされたgitを実行するよりも効率的ではありません。これは、gitサブコ"
"マンドを実行するために常に追加のfork+execが必要になるためです。"

#. type: Plain text
#: ../INSTALL:84
#, no-wrap
msgid ""
"   It is still possible to use git without installing by setting a few\n"
"   environment variables, which was the way this was done\n"
"   traditionally.  But using git found in bin-wrappers directory in\n"
"   the build directory is far simpler.  As a historical reference, the\n"
"   old way went like this:\n"
msgstr ""
"   いくつかの環境変数を設定することで、インストールせずにgitを使用することも可能です。\n"
"   従来はこの方法でしたが、\n"
"   ビルドディレクトリのbin-wrappersディレクトリにあるgitを使用する方がはるかに簡単です。\n"
"   歴史的な参考として書いておくと、\n"
"   古い方法は以下のとおりです:\n"

#. type: Plain text
#: ../INSTALL:89
#, no-wrap
msgid ""
"\tGIT_EXEC_PATH=`pwd`\n"
"\tPATH=`pwd`:$PATH\n"
"\tGITPERLLIB=`pwd`/perl/build/lib\n"
"\texport GIT_EXEC_PATH PATH GITPERLLIB\n"
msgstr ""
"\tGIT_EXEC_PATH=`pwd`\n"
"\tPATH=`pwd`:$PATH\n"
"\tGITPERLLIB=`pwd`/perl/build/lib\n"
"\texport GIT_EXEC_PATH PATH GITPERLLIB\n"

#. type: Bullet: ' - '
#: ../INSTALL:96
msgid ""
"By default (unless NO_PERL is provided) Git will ship various perl scripts. "
"However, for simplicity it doesn't use the ExtUtils::MakeMaker toolchain to "
"decide where to place the perl libraries. Depending on the system this can "
"result in the perl libraries not being where you'd like them if they're "
"expected to be used by things other than Git itself."
msgstr ""
"(NO_PERLが指定されていない限り)デフォルトではGitはさまざまなperlスクリプトを"
"出荷します。ただし、簡単にするために、 ExtUtils::MakeMaker ツールチェーンを使"
"用してperlライブラリを配置する場所を決定することはありません。システムによっ"
"ては、Git自体以外で使用されることが予想される場合、perlライブラリが希望する場"
"所にない可能性があります。"

#. type: Plain text
#: ../INSTALL:99
#, no-wrap
msgid ""
"   Manually supplying a perllibdir prefix should fix this, if this is\n"
"   a problem you care about, e.g.:\n"
msgstr ""
"   これが気になる問題である場合、 perllibdir プレフィックスを手動で指定すると、\n"
"   これが修正されます。例:\n"

#. type: Plain text
#: ../INSTALL:101
#, no-wrap
msgid "       prefix=/usr perllibdir=/usr/$(/usr/bin/perl -MConfig -wle 'print substr $Config{installsitelib}, 1 + length $Config{siteprefixexp}')\n"
msgstr "       prefix=/usr perllibdir=/usr/$(/usr/bin/perl -MConfig -wle 'print substr $Config{installsitelib}, 1 + length $Config{siteprefixexp}')\n"

#. type: Plain text
#: ../INSTALL:104
#, no-wrap
msgid ""
"   Will result in e.g. perllibdir=/usr/share/perl/5.26.1 on Debian,\n"
"   perllibdir=/usr/share/perl5 (which we'd use by default) on CentOS.\n"
msgstr ""
"   そうすると結果は、例えば、Debianでは perllibdir=/usr/share/perl/5.26.1 で、\n"
"   CentOSでは perllibdir=/usr/share/perl5 (これがデフォルトです)です。\n"

#. type: Bullet: ' - '
#: ../INSTALL:109
msgid ""
"Unless NO_PERL is provided Git will ship various perl libraries it needs. "
"Distributors of Git will usually want to set NO_PERL_CPAN_FALLBACKS if "
"NO_PERL is not provided to use their own copies of the CPAN modules Git "
"needs."
msgstr ""
"NO_PERLが指定されていない限り、Gitは必要なさまざまなperlライブラリを出荷しま"
"す。 Gitのディストリビューターは、NO_PERLが指定されていない場合、Gitが必要と"
"するCPANモジュールの独自のコピーを使用するために、通常は"
"NO_PERL_CPAN_FALLBACKSを設定する必要があります。"

#. type: Bullet: ' - '
#: ../INSTALL:114
msgid ""
"Git is reasonably self-sufficient, but does depend on a few external "
"programs and libraries.  Git can be used without most of them by adding the "
"appropriate \"NO_<LIBRARY>=YesPlease\" to the make command line or config."
"mak file."
msgstr ""
"Gitは適度に自給自足ですが、いくつかの外部プログラムとライブラリに依存しま"
"す。 makeコマンドラインまたはconfig.makファイルに適切な"
"「NO_<LIBRARY>=YesPlease」を追加することで、Gitはそれらのほとんどを利用せずに"
"使用できます。"

#. type: Bullet: '	- '
#: ../INSTALL:116
msgid "\"zlib\", the compression library. Git won't build without it."
msgstr "\"zlib\" 圧縮ライブラリ。Gitはこれなしでは構築できません。"

#. type: Bullet: '	- '
#: ../INSTALL:118
msgid "\"ssh\" is used to push and pull over the net."
msgstr "\"ssh\" は、ネット越しにプッシュおよびプルするために使用されます。"

#. type: Bullet: '	- '
#: ../INSTALL:121
msgid ""
"A POSIX-compliant shell is required to run some scripts needed for everyday "
"use (e.g. \"bisect\", \"request-pull\")."
msgstr ""
"POSIX準拠のシェル が、日々の使用に必要ないくつかのスクリプト(「bisect」、"
"「request-pull」など)を実行するために必要です。"

#. type: Bullet: '	- '
#: ../INSTALL:131
msgid ""
"\"Perl\" version 5.8 or later is needed to use some of the features (e.g. "
"sending patches using \"git send-email\", interacting with svn repositories "
"with \"git svn\").  If you can live without these, use NO_PERL.  Note that "
"recent releases of Redhat/Fedora are reported to ship Perl binary package "
"with some core modules stripped away (see http://lwn.net/Articles/477234/), "
"so you might need to install additional packages other than Perl itself, e."
"g. Digest::MD5, File::Spec, File::Temp, Net::Domain, Net::SMTP, and Time::"
"HiRes."
msgstr "一部の機能を使用するには、「Perl」バージョン5.8以降が必要です(たとえば、「git send-email」を使用したパッチの送信、「git svn」を使用したsvnリポジトリとの対話)。 これらがなくてもよい場合は、NO_PERLを使用してください。 Redhat/Fedoraの最近のリリースでは、一部のコア・モジュールが削除されたPerlバイナリパッケージが出荷されていると報告されているため(http://lwn.net/Articles/477234/を参照)、Perl自体以外の追加パッケージ、例えば Digest::MD5 や File::Spec や File::Temp や Net::Domain や Net::SMTP や Time::HiRes をインストールする必要がある場合があります。"

#. type: Bullet: '	- '
#: ../INSTALL:135
msgid ""
"git-imap-send needs the OpenSSL library to talk IMAP over SSL if you are "
"using libcurl older than 7.34.0.  Otherwise you can use NO_OPENSSL without "
"losing git-imap-send."
msgstr ""
"git-imap-sendは、7.34.0より古いlibcurlを使用している場合、SSLを介してIMAPと通"
"信するためにOpenSSLライブラリを必要とします。それ以外の場合は、git-imap-send"
"を失うことなくNO_OPENSSLを使用できます。"

#. type: Bullet: '	- '
#: ../INSTALL:141
msgid ""
"\"libcurl\" library is used for fetching and pushing repositories over "
"http:// or https://, as well as by git-imap-send if the curl version is >= "
"7.34.0. If you do not need that functionality, use NO_CURL to build without "
"it."
msgstr ""
"「libcurl」ライブラリは、 http:// または https:// を介してリポジトリをフェッ"
"チおよびプッシュするために使用されます。また、curlバージョンが7.34.0以上の場"
"合はgit-imap-sendによって使用されます。その機能が必要ない場合は、NO_CURLを使"
"用してそれなしでビルドします。"

#. type: Plain text
#: ../INSTALL:145
#, no-wrap
msgid ""
"\t  Git requires version \"7.19.5\" or later of \"libcurl\" to build\n"
"\t  without NO_CURL. This version requirement may be bumped in\n"
"\t  the future.\n"
msgstr ""
"\t  GitをNO_CURL指定「なし」でビルドするには、\n"
"\t  バージョン「7.19.5」以降の「libcurl」が必要です。\n"
"\t  このバージョン要件は、将来的に引き上げられる可能性があります。\n"

#. type: Bullet: '	- '
#: ../INSTALL:149
msgid ""
"\"expat\" library; git-http-push uses it for remote lock management over "
"DAV.  Similar to \"curl\" above, this is optional (with NO_EXPAT)."
msgstr ""
"「expat」ライブラリ。git-http-pushがDAVを介したリモートロック管理に使用しま"
"す。 上記の「curl」と同様に、これはオプションです(必要無い場合はNO_EXPATを使"
"用)。"

#. type: Bullet: '	- '
#: ../INSTALL:153
msgid ""
"\"wish\", the Tcl/Tk windowing shell is used in gitk to show the history "
"graphically, and in git-gui.  If you don't want gitk or git-gui, you can use "
"NO_TCLTK."
msgstr ""
"\"wish\" つまり、Tcl/Tk ウィンドウシェルは、履歴をグラフィカルに表示するため"
"にgitkとgit-guiで使用されます。gitkまたはgit-guiが必要ない場合は、NO_TCLTKを"
"使用できます。"

#. type: Bullet: '	- '
#: ../INSTALL:157
msgid ""
"A gettext library is used by default for localizing Git. The primary target "
"is GNU libintl, but the Solaris gettext implementation also works."
msgstr ""
"デフォルトでは、Gitをローカライズするためにgettextライブラリが使用されます。 "
"主なターゲットはGNU libintlですが、Solarisのgettext実装も機能します。"

#. type: Plain text
#: ../INSTALL:161
#, no-wrap
msgid ""
"\t  We need a gettext.h on the system for C code, gettext.sh (or\n"
"\t  Solaris gettext(1)) for shell scripts, and libintl-perl for Perl\n"
"\t  programs.\n"
msgstr ""
"\t  システムにはCコード用のgettext.h、\n"
"\t  シェルスクリプト用のgettext.sh(またはSolaris gettext(1))、\n"
"\t  Perlプログラム用のlibintl-perlが必要です。\n"

#. type: Plain text
#: ../INSTALL:165
#, no-wrap
msgid ""
"\t  Set NO_GETTEXT to disable localization support and make Git only\n"
"\t  use English. Under autoconf the configure script will do this\n"
"\t  automatically if it can't find libintl on the system.\n"
msgstr ""
"\t  NO_GETTEXTを設定して、ローカライゼーションサポートを無効にし、\n"
"\t  Gitが英語のみを使用するようにします。\n"
"\t  autoconfの下で、configureスクリプトは、システム上でlibintlが見つからない場合、これを自動的に実行します。\n"

#. type: Bullet: '	- '
#: ../INSTALL:168
msgid ""
"Python version 2.7 or later is needed to use the git-p4 interface to "
"Perforce."
msgstr ""
"PERFORCEへのgit-p4インターフェースを使用するには、Pythonバージョン2.7以降が必"
"要です。"

#. type: Bullet: ' - '
#: ../INSTALL:177
msgid ""
"Some platform specific issues are dealt with Makefile rules, but depending "
"on your specific installation, you may not have all the libraries/tools "
"needed, or you may have necessary libraries at unusual locations.  Please "
"look at the top of the Makefile to see what can be adjusted for your needs.  "
"You can place local settings in config.mak and the Makefile will include "
"them.  Note that config.mak is not distributed; the name is reserved for "
"local settings."
msgstr ""
"一部のプラットフォーム固有の問題はMakefileルールで処理されますが、特定のイン"
"ストールによっては、必要なすべてのライブラリ/ツールがない場合や、通常とは異な"
"る場所に必要なライブラリがある場合があります。Makefileの冒頭を見て、ニーズに"
"合わせて調整できるものを確認してください。ローカル設定をconfig.makに配置する"
"と、Makefileにそれらが含まれます。注意: config.makは配布されないことに注意し"
"てください。ローカル設定での名前はローカル設定用に予約されています。"

#. type: Bullet: ' - '
#: ../INSTALL:182
msgid ""
"To build and install documentation suite, you need to have the asciidoc/"
"xmlto toolchain.  Because not many people are inclined to install the tools, "
"the default build target (\"make all\") does _not_ build them."
msgstr ""
"ドキュメントスイートをビルドしてインストールするには、 asciidoc/xmlto ツール"
"チェーンが必要です。 多くの人がそのツールをインストールする傾向がないため、デ"
"フォルトのビルドターゲット（「make all」）はドキュメントスイートをビルドしま"
"せん。"

#. type: Plain text
#: ../INSTALL:187
#, no-wrap
msgid ""
"   \"make doc\" builds documentation in man and html formats; there are\n"
"   also \"make man\", \"make html\" and \"make info\". Note that \"make html\"\n"
"   requires asciidoc, but not xmlto. \"make man\" (and thus make doc)\n"
"   requires both.\n"
msgstr ""
"   「make doc」は、manおよびhtml形式のドキュメントを作成します。\n"
"   「make man」、「make html」、「make info」もあります。\n"
"   「make html」にはasciidocが必要ですが、xmltoは必要ないことに注意してください。\n"
"   「make man」(したがってそれを含むmake doc)には両方が必要です。\n"

#. type: Plain text
#: ../INSTALL:191
#, no-wrap
msgid ""
"   \"make install-doc\" installs documentation in man format only; there\n"
"   are also \"make install-man\", \"make install-html\" and \"make\n"
"   install-info\".\n"
msgstr ""
"   「make install-doc」は、ドキュメントをman形式でのみインストールします。\n"
"   「make install-man」、「make install-html」、「make install-info」も\n"
"   あります。\n"

#. type: Plain text
#: ../INSTALL:194
#, no-wrap
msgid ""
"   Building and installing the info file additionally requires\n"
"   makeinfo and docbook2X.  Version 0.8.3 is known to work.\n"
msgstr ""
"   infoファイルの作成とインストールには、makeinfoとdocbook2Xが追加で必要です。\n"
"   バージョン0.8.3が機能することが知られています。\n"

#. type: Plain text
#: ../INSTALL:197
#, no-wrap
msgid ""
"   Building and installing the pdf file additionally requires\n"
"   dblatex.  Version >= 0.2.7 is known to work.\n"
msgstr ""
"   PDFファイルのビルドとインストールには、さらにdblatexが必要です。\n"
"   バージョン >= 0.2.7 が機能することがわかっています。\n"

#. type: Plain text
#: ../INSTALL:201
#, no-wrap
msgid ""
"   All formats require at least asciidoc 8.4.1. Alternatively, you can\n"
"   use Asciidoctor (requires Ruby) by passing USE_ASCIIDOCTOR=YesPlease\n"
"   to make. You need at least Asciidoctor version 1.5.\n"
msgstr ""
"   すべての形式には、少なくともasciidoc8.4.1が必要です。\n"
"   または、USE_ASCIIDOCTOR=YesPleaseを渡してAsciidoctor(Rubyが必要)を使用することもできます。\n"
"   Asciidoctorは少なくともバージョン1.5が必要です。\n"

#. type: Plain text
#: ../INSTALL:207
#, no-wrap
msgid ""
"   There are also \"make quick-install-doc\", \"make quick-install-man\"\n"
"   and \"make quick-install-html\" which install preformatted man pages\n"
"   and html documentation. To use these build targets, you need to\n"
"   clone two separate git-htmldocs and git-manpages repositories next\n"
"   to the clone of git itself.\n"
msgstr ""
"   事前にフォーマットされたマニュアルページとhtmlドキュメントをインストールする\n"
"   「make quick-install-doc」と「make quick-install-man」と「make quick-install-html」もあります。\n"
"   これらのビルドターゲットを使用するには、\n"
"   git自体のクローンの隣に\n"
"   2つの別々のgit-htmldocsリポジトリとgit-manpagesリポジトリを複製する必要があります。\n"

#. type: Plain text
#: ../INSTALL:209
#, no-wrap
msgid "   The minimum supported version of docbook-xsl is 1.74.\n"
msgstr "   サポートされているdocbook-xslの最小バージョンは1.74です。\n"

#. type: Plain text
#: ../INSTALL:212
#, no-wrap
msgid ""
"   Users attempting to build the documentation on Cygwin may need to ensure\n"
"   that the /etc/xml/catalog file looks something like this:\n"
msgstr ""
"   Cygwinでドキュメントを作成しようとしているユーザーは、\n"
"   /etc/xml/catalogファイルが以下のようになっていることを確認する必要があります:\n"

#. type: Plain text
#: ../INSTALL:228
#, no-wrap
msgid ""
"   <?xml version=\"1.0\"?>\n"
"   <!DOCTYPE catalog PUBLIC\n"
"      \"-//OASIS//DTD Entity Resolution XML Catalog V1.0//EN\"\n"
"      \"http://www.oasis-open.org/committees/entity/release/1.0/catalog.dtd\"\n"
"   >\n"
"   <catalog xmlns=\"urn:oasis:names:tc:entity:xmlns:xml:catalog\">\n"
"     <rewriteURI\n"
"       uriStartString = \"http://docbook.sourceforge.net/release/xsl/current\"\n"
"       rewritePrefix = \"/usr/share/sgml/docbook/xsl-stylesheets\"\n"
"     />\n"
"     <rewriteURI\n"
"       uriStartString=\"http://www.oasis-open.org/docbook/xml/4.5\"\n"
"       rewritePrefix=\"/usr/share/sgml/docbook/xml-dtd-4.5\"\n"
"     />\n"
"  </catalog>\n"
msgstr ""
"   <?xml version=\"1.0\"?>\n"
"   <!DOCTYPE catalog PUBLIC\n"
"      \"-//OASIS//DTD Entity Resolution XML Catalog V1.0//EN\"\n"
"      \"http://www.oasis-open.org/committees/entity/release/1.0/catalog.dtd\"\n"
"   >\n"
"   <catalog xmlns=\"urn:oasis:names:tc:entity:xmlns:xml:catalog\">\n"
"     <rewriteURI\n"
"       uriStartString = \"http://docbook.sourceforge.net/release/xsl/current\"\n"
"       rewritePrefix = \"/usr/share/sgml/docbook/xsl-stylesheets\"\n"
"     />\n"
"     <rewriteURI\n"
"       uriStartString=\"http://www.oasis-open.org/docbook/xml/4.5\"\n"
"       rewritePrefix=\"/usr/share/sgml/docbook/xml-dtd-4.5\"\n"
"     />\n"
"  </catalog>\n"

#. type: Plain text
#: ../INSTALL:230
#, no-wrap
msgid "  This can be achieved with the following two xmlcatalog commands:\n"
msgstr "  これは、以下の2つのxmlcatalogコマンドで実現できます:\n"

#. type: Plain text
#: ../INSTALL:236
#, no-wrap
msgid ""
"  xmlcatalog --noout \\\n"
"     --add rewriteURI \\\n"
"        http://docbook.sourceforge.net/release/xsl/current \\\n"
"        /usr/share/sgml/docbook/xsl-stylesheets \\\n"
"     /etc/xml/catalog\n"
msgstr ""
"  xmlcatalog --noout \\\n"
"     --add rewriteURI \\\n"
"        http://docbook.sourceforge.net/release/xsl/current \\\n"
"        /usr/share/sgml/docbook/xsl-stylesheets \\\n"
"     /etc/xml/catalog\n"

#. type: Plain text
#: ../INSTALL:241
#, no-wrap
msgid ""
"  xmlcatalog --noout \\\n"
"     --add rewriteURI \\\n"
"         http://www.oasis-open.org/docbook/xml/4.5/xsl/current \\\n"
"         /usr/share/sgml/docbook/xml-dtd-4.5 \\\n"
"     /etc/xml/catalog\n"
msgstr ""
"  xmlcatalog --noout \\\n"
"     --add rewriteURI \\\n"
"         http://www.oasis-open.org/docbook/xml/4.5/xsl/current \\\n"
"         /usr/share/sgml/docbook/xml-dtd-4.5 \\\n"
"     /etc/xml/catalog\n"
