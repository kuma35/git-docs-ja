# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-11-04 04:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/git-clone.txt:2
#, no-wrap
msgid "git-clone(1)"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-clone.txt:5
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:7
msgid "git-clone - Clone a repository into a new directory"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-clone.txt:10
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:21
#, no-wrap
msgid ""
"'git clone' [--template=<template_directory>]\n"
"\t  [-l] [-s] [--no-hardlinks] [-q] [-n] [--bare] [--mirror]\n"
"\t  [-o <name>] [-b <name>] [-u <upload-pack>] [--reference <repository>]\n"
"\t  [--dissociate] [--separate-git-dir <git dir>]\n"
"\t  [--depth <depth>] [--[no-]single-branch] [--no-tags]\n"
"\t  [--recurse-submodules[=<pathspec>]] [--[no-]shallow-submodules]\n"
"\t  [--[no-]remote-submodules] [--jobs <n>] [--sparse] [--[no-]reject-shallow]\n"
"\t  [--filter=<filter>] [--] <repository>\n"
"\t  [<directory>]\n"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-clone.txt:23
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:30
msgid ""
"Clones a repository into a newly created directory, creates remote-tracking "
"branches for each branch in the cloned repository (visible using `git branch "
"--remotes`), and creates and checks out an initial branch that is forked "
"from the cloned repository's currently active branch."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:36
msgid ""
"After the clone, a plain `git fetch` without arguments will update all the "
"remote-tracking branches, and a `git pull` without arguments will in "
"addition merge the remote master branch into the current master branch, if "
"any (this is untrue when \"--single-branch\" is given; see below)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:41
msgid ""
"This default configuration is achieved by creating references to the remote "
"branch heads under `refs/remotes/origin` and by initializing `remote.origin."
"url` and `remote.origin.fetch` configuration variables."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-clone.txt:44
#, no-wrap
msgid "OPTIONS"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:45
#, no-wrap
msgid "`-l`"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:46
#, no-wrap
msgid "`--local`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:53
msgid ""
"When the repository to clone from is on a local machine, this flag bypasses "
"the normal \"Git aware\" transport mechanism and clones the repository by "
"making a copy of HEAD and everything under objects and refs directories.  "
"The files under `.git/objects/` directory are hardlinked to save space when "
"possible."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:60
msgid ""
"If the repository is specified as a local path (e.g., `/path/to/repo`), this "
"is the default, and --local is essentially a no-op.  If the repository is "
"specified as a URL, then this flag is ignored (and we never use the local "
"optimizations).  Specifying `--no-local` will override the default when `/"
"path/to/repo` is given, using the regular Git transport instead."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:64
#, no-wrap
msgid ""
"*NOTE*: this operation can race with concurrent modification to the\n"
"source repository, similar to running `cp -r src dst` while modifying\n"
"`src`.\n"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:65
#, no-wrap
msgid "`--no-hardlinks`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:70
msgid ""
"Force the cloning process from a repository on a local filesystem to copy "
"the files under the `.git/objects` directory instead of using hardlinks. "
"This may be desirable if you are trying to make a back-up of your repository."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:71
#, no-wrap
msgid "`-s`"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:72
#, no-wrap
msgid "`--shared`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:78
msgid ""
"When the repository to clone is on the local machine, instead of using hard "
"links, automatically setup `.git/objects/info/alternates` to share the "
"objects with the source repository.  The resulting repository starts out "
"without any object of its own."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:88
#, no-wrap
msgid ""
"*NOTE*: this is a possibly dangerous operation; do *not* use\n"
"it unless you understand what it does. If you clone your\n"
"repository using this option and then delete branches (or use any\n"
"other Git command that makes any existing commit unreferenced) in the\n"
"source repository, some objects may become unreferenced (or dangling).\n"
"These objects may be removed by normal Git operations (such as `git commit`)\n"
"which automatically call `git maintenance run --auto`. (See\n"
"linkgit:git-maintenance[1].) If these objects are removed and were referenced\n"
"by the cloned repository, then the cloned repository will become corrupt.\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:94
msgid ""
"Note that running `git repack` without the `--local` option in a repository "
"cloned with `--shared` will copy objects from the source repository into a "
"pack in the cloned repository, removing the disk space savings of `clone --"
"shared`.  It is safe, however, to run `git gc`, which uses the `--local` "
"option by default."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:98
msgid ""
"If you want to break the dependency of a repository cloned with `--shared` "
"on its source repository, you can simply run `git repack -a` to copy all "
"objects from the source repository into a pack in the cloned repository."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:99
#, no-wrap
msgid "`--reference[-if-able] <repository>`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:109
msgid ""
"If the reference repository is on the local machine, automatically setup `."
"git/objects/info/alternates` to obtain objects from the reference "
"repository.  Using an already existing repository as an alternate will "
"require fewer objects to be copied from the repository being cloned, "
"reducing network and local storage costs.  When using the `--reference-if-"
"able`, a non existing directory is skipped with a warning instead of "
"aborting the clone."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:112
#, no-wrap
msgid ""
"*NOTE*: see the NOTE for the `--shared` option, and also the\n"
"`--dissociate` option.\n"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:113
#, no-wrap
msgid "`--dissociate`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:123
msgid ""
"Borrow the objects from reference repositories specified with the `--"
"reference` options only to reduce network transfer, and stop borrowing from "
"them after a clone is made by making necessary local copies of borrowed "
"objects.  This option can also be used when cloning locally from a "
"repository that already borrows objects from another repository--the new "
"repository will borrow objects from the same repository, and this option can "
"be used to stop the borrowing."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:124
#, no-wrap
msgid "`-q`"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:125
#, no-wrap
msgid "`--quiet`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:128
msgid ""
"Operate quietly.  Progress is not reported to the standard error stream."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:129
#, no-wrap
msgid "`-v`"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:130
#, no-wrap
msgid "`--verbose`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:133
msgid ""
"Run verbosely. Does not affect the reporting of progress status to the "
"standard error stream."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:134
#, no-wrap
msgid "`--progress`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:139
msgid ""
"Progress status is reported on the standard error stream by default when it "
"is attached to a terminal, unless `--quiet` is specified. This flag forces "
"progress status even if the standard error stream is not directed to a "
"terminal."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:140
#, no-wrap
msgid "`--server-option=<option>`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:147
msgid ""
"Transmit the given string to the server when communicating using protocol "
"version 2.  The given string must not contain a NUL or LF character.  The "
"server's handling of server options, including unknown ones, is server-"
"specific.  When multiple `--server-option=<option>` are given, they are all "
"sent to the other side in the order listed on the command line."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:148
#, no-wrap
msgid "`-n`"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:149
#, no-wrap
msgid "`--no-checkout`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:151
msgid "No checkout of HEAD is performed after the clone is complete."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:152
#, no-wrap
msgid "`--[no-]reject-shallow`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:156
msgid ""
"Fail if the source repository is a shallow repository.  The 'clone."
"rejectShallow' configuration variable can be used to specify the default."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:157
#, no-wrap
msgid "`--bare`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:168
msgid ""
"Make a 'bare' Git repository.  That is, instead of creating `<directory>` "
"and placing the administrative files in `<directory>/.git`, make the "
"`<directory>` itself the `$GIT_DIR`. This obviously implies the `--no-"
"checkout` because there is nowhere to check out the working tree.  Also the "
"branch heads at the remote are copied directly to corresponding local branch "
"heads, without mapping them to `refs/remotes/origin/`.  When this option is "
"used, neither remote-tracking branches nor the related configuration "
"variables are created."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:169
#, no-wrap
msgid "`--sparse`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:174
msgid ""
"Initialize the sparse-checkout file so the working directory starts with "
"only the files in the root of the repository. The sparse-checkout file can "
"be modified to grow the working directory as needed."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:175
#, no-wrap
msgid "`--filter=<filter-spec>`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:184
msgid ""
"Use the partial clone feature and request that the server sends a subset of "
"reachable objects according to a given object filter.  When using `--"
"filter`, the supplied `<filter-spec>` is used for the partial clone filter. "
"For example, `--filter=blob:none` will filter out all blobs (file contents) "
"until needed by Git. Also, `--filter=blob:limit=<size>` will filter out all "
"blobs of size at least `<size>`. For more details on filter specifications, "
"see the `--filter` option in linkgit:git-rev-list[1]."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:185
#, no-wrap
msgid "`--mirror`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:192
msgid ""
"Set up a mirror of the source repository.  This implies `--bare`.  Compared "
"to `--bare`, `--mirror` not only maps local branches of the source to local "
"branches of the target, it maps all refs (including remote-tracking "
"branches, notes etc.) and sets up a refspec configuration such that all "
"these refs are overwritten by a `git remote update` in the target repository."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:193
#, no-wrap
msgid "`-o <name>`"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:194
#, no-wrap
msgid "`--origin <name>`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:198
msgid ""
"Instead of using the remote name `origin` to keep track of the upstream "
"repository, use `<name>`.  Overrides `clone.defaultRemoteName` from the "
"config."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:199
#, no-wrap
msgid "`-b <name>`"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:200
#, no-wrap
msgid "`--branch <name>`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:207
msgid ""
"Instead of pointing the newly created HEAD to the branch pointed to by the "
"cloned repository's HEAD, point to `<name>` branch instead. In a non-bare "
"repository, this is the branch that will be checked out.  `--branch` can "
"also take tags and detaches the HEAD at that commit in the resulting "
"repository."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:208
#, no-wrap
msgid "`-u <upload-pack>`"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:209
#, no-wrap
msgid "`--upload-pack <upload-pack>`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:213
msgid ""
"When given, and the repository to clone from is accessed via ssh, this "
"specifies a non-default path for the command run on the other end."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:214
#, no-wrap
msgid "`--template=<template_directory>`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:217
msgid ""
"Specify the directory from which templates will be used; (See the \"TEMPLATE "
"DIRECTORY\" section of linkgit:git-init[1].)"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:218
#, no-wrap
msgid "`-c <key>=<value>`"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:219
#, no-wrap
msgid "`--config <key>=<value>`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:228
msgid ""
"Set a configuration variable in the newly-created repository; this takes "
"effect immediately after the repository is initialized, but before the "
"remote history is fetched or any files checked out.  The key is in the same "
"format as expected by linkgit:git-config[1] (e.g., `core.eol=true`). If "
"multiple values are given for the same key, each value will be written to "
"the config file. This makes it safe, for example, to add additional fetch "
"refspecs to the origin remote."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:234
msgid ""
"Due to limitations of the current implementation, some configuration "
"variables do not take effect until after the initial fetch and checkout.  "
"Configuration variables known to not take effect are: `remote.<name>.mirror` "
"and `remote.<name>.tagOpt`.  Use the corresponding `--mirror` and `--no-"
"tags` options instead."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:235
#, no-wrap
msgid "`--depth <depth>`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:241
msgid ""
"Create a 'shallow' clone with a history truncated to the specified number of "
"commits. Implies `--single-branch` unless `--no-single-branch` is given to "
"fetch the histories near the tips of all branches. If you want to clone "
"submodules shallowly, also pass `--shallow-submodules`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:242
#, no-wrap
msgid "`--shallow-since=<date>`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:244
msgid "Create a shallow clone with a history after the specified time."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:245
#, no-wrap
msgid "`--shallow-exclude=<revision>`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:249
msgid ""
"Create a shallow clone with a history, excluding commits reachable from a "
"specified remote branch or tag.  This option can be specified multiple times."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:250
#, no-wrap
msgid "`--[no-]single-branch`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:259
msgid ""
"Clone only the history leading to the tip of a single branch, either "
"specified by the `--branch` option or the primary branch remote's `HEAD` "
"points at.  Further fetches into the resulting repository will only update "
"the remote-tracking branch for the branch this option was used for the "
"initial cloning.  If the HEAD at the remote did not point at any branch when "
"`--single-branch` clone was made, no remote-tracking branch is created."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:260
#, no-wrap
msgid "`--no-tags`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:266
msgid ""
"Don't clone any tags, and set `remote.<remote>.tagOpt=--no-tags` in the "
"config, ensuring that future `git pull` and `git fetch` operations won't "
"follow any tags. Subsequent explicit tag fetches will still work, (see "
"linkgit:git-fetch[1])."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:271
msgid ""
"Can be used in conjunction with `--single-branch` to clone and maintain a "
"branch with no references other than a single cloned branch. This is useful "
"e.g. to maintain minimal clones of the default branch of some repository for "
"search indexing."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:272
#, no-wrap
msgid "`--recurse-submodules[=<pathspec>]`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:280
msgid ""
"After the clone is created, initialize and clone submodules within based on "
"the provided pathspec.  If no pathspec is provided, all submodules are "
"initialized and cloned.  This option can be given multiple times for "
"pathspecs consisting of multiple entries.  The resulting clone has "
"`submodule.active` set to the provided pathspec, or \".\" (meaning all "
"submodules) if no pathspec is provided."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:287
msgid ""
"Submodules are initialized and cloned using their default settings. This is "
"equivalent to running `git submodule update --init --recursive <pathspec>` "
"immediately after the clone is finished. This option is ignored if the "
"cloned repository does not have a worktree/checkout (i.e. if any of `--no-"
"checkout`/`-n`, `--bare`, or `--mirror` is given)"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:288
#, no-wrap
msgid "`--[no-]shallow-submodules`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:290
msgid "All submodules which are cloned will be shallow with a depth of 1."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:291
#, no-wrap
msgid "`--[no-]remote-submodules`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:296
msgid ""
"All submodules which are cloned will use the status of the submodule's "
"remote-tracking branch to update the submodule, rather than the "
"superproject's recorded SHA-1. Equivalent to passing `--remote` to `git "
"submodule update`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:297
#, no-wrap
msgid "`--separate-git-dir=<git dir>`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:303
msgid ""
"Instead of placing the cloned repository where it is supposed to be, place "
"the cloned repository at the specified directory, then make a filesystem-"
"agnostic Git symbolic link to there.  The result is Git repository can be "
"separated from working tree."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:304
#, no-wrap
msgid "`-j <n>`"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:305
#, no-wrap
msgid "`--jobs <n>`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:308
msgid ""
"The number of submodules fetched at the same time.  Defaults to the "
"`submodule.fetchJobs` option."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:309
#, no-wrap
msgid "<repository>"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:313
msgid ""
"The (possibly remote) repository to clone from.  See the <<URLS,GIT URLS>> "
"section below for more information on specifying repositories."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-clone.txt:314
#, no-wrap
msgid "<directory>"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:320
msgid ""
"The name of a new directory to clone into.  The \"humanish\" part of the "
"source repository is used if no directory is explicitly given (`repo` for `/"
"path/to/repo.git` and `foo` for `host.xz:foo/.git`).  Cloning into an "
"existing directory is only allowed if the directory is empty."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-clone.txt:325
#, no-wrap
msgid "EXAMPLES"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:328
msgid "Clone from upstream:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-clone.txt:333
#, no-wrap
msgid ""
"$ git clone git://git.kernel.org/pub/scm/.../linux.git my-linux\n"
"$ cd my-linux\n"
"$ make\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:337
msgid ""
"Make a local clone that borrows from the current directory, without checking "
"things out:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-clone.txt:342
#, no-wrap
msgid ""
"$ git clone -l -s -n . ../copy\n"
"$ cd ../copy\n"
"$ git show-branch\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:346
msgid "Clone from upstream while borrowing from an existing local directory:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-clone.txt:352
#, no-wrap
msgid ""
"$ git clone --reference /git/linux.git \\\n"
"\tgit://git.kernel.org/pub/scm/.../linux.git \\\n"
"\tmy-linux\n"
"$ cd my-linux\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:356
msgid "Create a bare repository to publish your changes to the public:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-clone.txt:359
#, no-wrap
msgid "$ git clone --bare -l /home/proj/.git /pub/scm/proj.git\n"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-clone.txt:363
#, no-wrap
msgid "GIT"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-clone.txt:364
msgid "Part of the linkgit:git[1] suite"
msgstr ""
