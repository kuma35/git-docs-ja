# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 2.0\n"
"POT-Creation-Date: 2022-09-24 21:41+0900\n"
"PO-Revision-Date: 2022-09-29 05:31+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/git-rebase.txt:2
#, no-wrap
msgid "git-rebase(1)"
msgstr "git-rebase(1)"

#. type: Title -
#: ../Documentation-sedout/git-rebase.txt:5
#, no-wrap
msgid "NAME"
msgstr "NAME"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:7
msgid "git-rebase - Reapply commits on top of another base tip"
msgstr "git-rebase - 別のベース先端の上にコミットを再適用します"

#. type: Title -
#: ../Documentation-sedout/git-rebase.txt:9
#, no-wrap
msgid "SYNOPSIS"
msgstr "SYNOPSIS"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:16
#, no-wrap
msgid ""
"'git rebase' [-i | --interactive] [<options>] [--exec <cmd>]\n"
"\t[--onto <newbase> | --keep-base] [<upstream> [<branch>]]\n"
"'git rebase' [-i | --interactive] [<options>] [--exec <cmd>] [--onto <newbase>]\n"
"\t--root [<branch>]\n"
"'git rebase' (--continue | --skip | --abort | --quit | --edit-todo | --show-current-patch)\n"
msgstr ""
"'git rebase' [-i | --interactive] [<options>] [--exec <cmd>]\n"
"\t[--onto <newbase> | --keep-base] [<upstream> [<branch>]]\n"
"'git rebase' [-i | --interactive] [<options>] [--exec <cmd>] [--onto <newbase>]\n"
"\t--root [<branch>]\n"
"'git rebase' (--continue | --skip | --abort | --quit | --edit-todo | --show-current-patch)\n"

#. type: Title -
#: ../Documentation-sedout/git-rebase.txt:18
#, no-wrap
msgid "DESCRIPTION"
msgstr "DESCRIPTION"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:22
msgid ""
"If `<branch>` is specified, `git rebase` will perform an automatic `git "
"switch <branch>` before doing anything else.  Otherwise it remains on the "
"current branch."
msgstr "`<branch>` が指定されている場合、 「git rebase」は他の処理を行う前に自動で `git switch <branch>` を実行します。それ以外の場合は、引き続き現在のブランチに滞在しています。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:28
msgid ""
"If `<upstream>` is not specified, the upstream configured in `branch.<name>."
"remote` and `branch.<name>.merge` options will be used (see linkgit:git-"
"config[1] for details) and the `--fork-point` option is assumed.  If you are "
"currently not on any branch or if the current branch does not have a "
"configured upstream, the rebase will abort."
msgstr "`<upstream>` が指定されていない場合、 `branch.<name>.remote` と `branch.<name>.mergebranch` オプションで構成されたアップストリーム(詳細はlinkgit:git-config[1] 参照) および `--fork-point` オプションが想定されています。あなたが現在ブランチを一切使用していない場合、または、現在のブランチにアップストリームが構成されていない場合、リベースは中止(abort)されます。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:35
msgid ""
"All changes made by commits in the current branch but that are not in "
"`<upstream>` are saved to a temporary area.  This is the same set of commits "
"that would be shown by `git log <upstream>..HEAD`; or by `git log "
"'fork_point'..HEAD`, if `--fork-point` is active (see the description on `--"
"fork-point` below); or by `git log HEAD`, if the `--root` option is "
"specified."
msgstr "現在のブランチでコミットによって行われたが、 `<upstream>` に無いすべての変更は、一時領域(temporary area)に保存されます。 これは `git log <upstream>..HEAD` で表示されるのと同じコミットのセットで、または `--fork-point` がアクティブな場合 `git log 'fork_point'..HEAD` で表示されるのと同じコミットのセットで、または `--root` オプションが指定されている場合 `git log HEAD` で表示されるのと同じコミットのセットです。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:40
msgid ""
"The current branch is reset to `<upstream>` or `<newbase>` if the `--onto` "
"option was supplied.  This has the exact same effect as `git reset --hard "
"<upstream>` (or `<newbase>`). `ORIG_HEAD` is set to point at the tip of the "
"branch before the reset."
msgstr "現在のブランチは `<upstream>` にリセットされます。 または `--onto` オプションが指定されている場合は `<newbase>` にリセットされます。 これは、 `git reset --hard <upstream>` (または `<newbase>` )とまったく同じ効果があります。 `ORIG_HEAD` は、リセット前にブランチの先端を指すように設定されています。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:46
msgid ""
"The commits that were previously saved into the temporary area are then "
"reapplied to the current branch, one by one, in order. Note that any commits "
"in `HEAD` which introduce the same textual changes as a commit in `HEAD.."
"<upstream>` are omitted (i.e., a patch already accepted upstream with a "
"different commit message or timestamp will be skipped)."
msgstr "以前に一時領域に保存されたコミットは、現在のブランチに1つずつ順番に再適用されます。注意: `HEAD..<upstream>` でのコミットと同一のテキスト変更を導入する `HEAD` でのコミットは省略されることに注意してください(つまり、異なるコミットメッセージまたはタイムスタンプで、アップストリームで既に受け入れ済のパッチはスキップされます)。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:53
msgid ""
"It is possible that a merge failure will prevent this process from being "
"completely automatic.  You will have to resolve any such merge failure and "
"run `git rebase --continue`.  Another option is to bypass the commit that "
"caused the merge failure with `git rebase --skip`.  To check out the "
"original `<branch>` and remove the `.git/rebase-apply` working files, use "
"the command `git rebase --abort` instead."
msgstr "マージに失敗すると、このプロセスが完全には自動で行われなくなる事があります。あなたは、このようなマージの失敗を解決し、そして `git rebase --continue` を実行する必要があります。 別のオプションとしては、 `git rebase --skip` でマージの失敗を引き起こしたコミットをバイパスすることです。そして、元の `<branch>` をチェックアウトし、`.git/rebase-apply` 作業ファイルを削除するには、代わりにコマンド `git rebase --abort` を使用します。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:55
msgid ""
"Assume the following history exists and the current branch is \"topic\":"
msgstr "以下の履歴が存在し、現在のブランチが `topic` であるとします:"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:60
#, no-wrap
msgid ""
"          A---B---C topic\n"
"         /\n"
"    D---E---F---G master\n"
msgstr ""
"          A---B---C topic\n"
"         /\n"
"    D---E---F---G master\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:63
msgid "From this point, the result of either of the following commands:"
msgstr "この時点で、以下のコマンドのいずれかを実行します:"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:67
#, no-wrap
msgid ""
"    git rebase master\n"
"    git rebase master topic\n"
msgstr ""
"    git rebase master\n"
"    git rebase master topic\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:69
msgid "would be:"
msgstr "そうすると以下のようになります:"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:74
#, no-wrap
msgid ""
"                  A'--B'--C' topic\n"
"                 /\n"
"    D---E---F---G master\n"
msgstr ""
"                  A'--B'--C' topic\n"
"                 /\n"
"    D---E---F---G master\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:79
#, no-wrap
msgid ""
"*NOTE:* The latter form is just a short-hand of `git checkout topic`\n"
"followed by `git rebase master`. When rebase exits `topic` will\n"
"remain the checked-out branch.\n"
msgstr ""
"*注意* : 後者の形式は、\n"
"`git checkout topic` の後に `git rebase master` が続く省略形です。\n"
"リベースが終了すると、チェックアウトされたブランチ(`topic`)のままになります。\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:86
msgid ""
"If the upstream branch already contains a change you have made (e.g., "
"because you mailed a patch which was applied upstream), then that commit "
"will be skipped and warnings will be issued (if the 'merge' backend is "
"used).  For example, running `git rebase master` on the following history "
"(in which `A'` and `A` introduce the same set of changes, but have different "
"committer information):"
msgstr ""
"(たとえば、アップストリームに適用されたパッチをメールで送信したため)アップス"
"トリームブランチにすでに行った変更が含まれている場合、そのコミットはスキップ"
"され、警告が発行されます(`merge` バックエンドが使用されている場合)。たとえ"
"ば、以下の履歴で `git rebase master` を実行します(`A'` と `A` は同じ変更セッ"
"トを導入しますが、コミッター情報は異なります):"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:91
#, no-wrap
msgid ""
"          A---B---C topic\n"
"         /\n"
"    D---E---A'---F master\n"
msgstr ""
"          A---B---C topic\n"
"         /\n"
"    D---E---A'---F master\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:94
msgid "will result in:"
msgstr "これの結果は以下のようになります:"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:99
#, no-wrap
msgid ""
"                   B'---C' topic\n"
"                  /\n"
"    D---E---A'---F master\n"
msgstr ""
"                   B'---C' topic\n"
"                  /\n"
"    D---E---A'---F master\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:104
msgid ""
"Here is how you would transplant a topic branch based on one branch to "
"another, to pretend that you forked the topic branch from the latter branch, "
"using `rebase --onto`."
msgstr ""
"これは、あるブランチに基づいてトピックブランチを別のブランチに移植し、 "
"`rebase --onto` を使用して、トピックブランチを後者のブランチからフォークした"
"ふりをする方法です。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:108
msgid ""
"First let's assume your 'topic' is based on branch 'next'.  For example, a "
"feature developed in 'topic' depends on some functionality which is found in "
"'next'."
msgstr ""
"まず、「topic」がブランチ「next」に基づいているとしましょう。 たとえば"
"「topic」で開発された機能は、「next」にあるいくつかの機能に依存しています。"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:115
#, no-wrap
msgid ""
"    o---o---o---o---o  master\n"
"         \\\n"
"          o---o---o---o---o  next\n"
"                           \\\n"
"                            o---o---o  topic\n"
msgstr ""
"    o---o---o---o---o  master\n"
"         \\\n"
"          o---o---o---o---o  next\n"
"                           \\\n"
"                            o---o---o  topic\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:120
msgid ""
"We want to make 'topic' forked from branch 'master'; for example, because "
"the functionality on which 'topic' depends was merged into the more stable "
"'master' branch. We want our tree to look like this:"
msgstr ""
"我々は 'topic' をブランチ 'master' からフォークさせたいのです。たとえば"
"「topic」が依存する機能が、より安定した「master」ブランチにマージされたためで"
"す。 ツリーを以下のようにしたいわけです:"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:127
#, no-wrap
msgid ""
"    o---o---o---o---o  master\n"
"        |            \\\n"
"        |             o'--o'--o'  topic\n"
"         \\\n"
"          o---o---o---o---o  next\n"
msgstr ""
"    o---o---o---o---o  master\n"
"        |            \\\n"
"        |             o'--o'--o'  topic\n"
"         \\\n"
"          o---o---o---o---o  next\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:130
msgid "We can get this using the following command:"
msgstr "これは、以下のコマンドを使用して取得できます:"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:132
#, no-wrap
msgid "    git rebase --onto master next topic\n"
msgstr "    git rebase --onto master next topic\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:136
msgid ""
"Another example of --onto option is to rebase part of a branch.  If we have "
"the following situation:"
msgstr ""
"`--onto` オプションの別の例は、ブランチの一部をリベースすることです。 以下の"
"ような状況の場合:"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:143
#, no-wrap
msgid ""
"                            H---I---J topicB\n"
"                           /\n"
"                  E---F---G  topicA\n"
"                 /\n"
"    A---B---C---D  master\n"
msgstr ""
"                            H---I---J topicB\n"
"                           /\n"
"                  E---F---G  topicA\n"
"                 /\n"
"    A---B---C---D  master\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:146
#: ../Documentation-sedout/git-rebase.txt:169
msgid "then the command"
msgstr "そして、以下のコマンドを実行します"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:148
#, no-wrap
msgid "    git rebase --onto master topicA topicB\n"
msgstr "    git rebase --onto master topicA topicB\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:150
msgid "would result in:"
msgstr "そうすると結果は以下のようになります:"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:157
#, no-wrap
msgid ""
"                 H'--I'--J'  topicB\n"
"                /\n"
"                | E---F---G  topicA\n"
"                |/\n"
"    A---B---C---D  master\n"
msgstr ""
"                 H'--I'--J'  topicB\n"
"                /\n"
"                | E---F---G  topicA\n"
"                |/\n"
"    A---B---C---D  master\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:160
msgid "This is useful when topicB does not depend on topicA."
msgstr "これは、topicBがtopicAに依存していない場合に役立ちます。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:163
msgid ""
"A range of commits could also be removed with rebase.  If we have the "
"following situation:"
msgstr "コミットの範囲は、リベースで削除することもできます。以下の状況の場合:"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:166
#, no-wrap
msgid "    E---F---G---H---I---J  topicA\n"
msgstr "    E---F---G---H---I---J  topicA\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:171
#, no-wrap
msgid "    git rebase --onto topicA~5 topicA~3 topicA\n"
msgstr "    git rebase --onto topicA~5 topicA~3 topicA\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:173
msgid "would result in the removal of commits F and G:"
msgstr "上記を実行すると、以下のようにコミットFとGが削除されます:"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:176
#, no-wrap
msgid "    E---H'---I'---J'  topicA\n"
msgstr "    E---H'---I'---J'  topicA\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:181
msgid ""
"This is useful if F and G were flawed in some way, or should not be part of "
"topicA.  Note that the argument to `--onto` and the `<upstream>` parameter "
"can be any valid commit-ish."
msgstr "これは、 F と G に何らかの欠陥がある場合、または、topicA の一部であってはならない場合に役立ちます。注意: `--onto` と `<upstream>` パラメーターの引数は、任意の有効なコミットっぽい何か(commit-ish)にすることができることに注意してください。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:187
msgid ""
"In case of conflict, `git rebase` will stop at the first problematic commit "
"and leave conflict markers in the tree.  You can use `git diff` to locate "
"the markers (<<<<<<) and make edits to resolve the conflict.  For each file "
"you edit, you need to tell Git that the conflict has been resolved, "
"typically this would be done with"
msgstr ""
"競合が発生した場合、 `git rebase` は最初の問題のあるコミットで停止し、ツリー"
"に競合マーカーを残します。 あなたは `git diff` を使用して、マーカー(`<<<<<<`)"
"を見つけ、編集して競合を解決できます。編集するファイルごとに、競合が解決され"
"たことをGitに通知する必要があります。通常、これは以下の方法で行います"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:190
#, no-wrap
msgid "    git add <filename>\n"
msgstr "    git add <filename>\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:194
msgid ""
"After resolving the conflict manually and updating the index with the "
"desired resolution, you can continue the rebasing process with"
msgstr ""
"競合を手動で解決し、あなたが望んだ解決策でインデックスを更新した後、以下のコ"
"マンドでリベースプロセスを続行できます"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:197
#, no-wrap
msgid "    git rebase --continue\n"
msgstr "    git rebase --continue\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:200
msgid "Alternatively, you can undo the 'git rebase' with"
msgstr "あるいは、以下のように `git rebase` を元に戻す(undo)こともできます"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:203
#, no-wrap
msgid "    git rebase --abort\n"
msgstr "    git rebase --abort\n"

#. type: Title -
#: ../Documentation-sedout/git-rebase.txt:205
#, no-wrap
msgid "OPTIONS"
msgstr "OPTIONS"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:206
#, no-wrap
msgid "`--onto <newbase>`"
msgstr "`--onto <newbase>`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:211
msgid ""
"Starting point at which to create the new commits. If the `--onto` option is "
"not specified, the starting point is `<upstream>`.  May be any valid commit, "
"and not just an existing branch name."
msgstr "新しいコミットを作成する開始点を指定します。 `--onto` オプションが指定されていない場合、開始点は `<upstream>` です。これは、既存のブランチ名だけでなく、任意の有効なコミットである可能性があります。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:215
msgid ""
"As a special case, you may use \"A\\...B\" as a shortcut for the merge base "
"of A and B if there is exactly one merge base. You can leave out at most one "
"of A and B, in which case it defaults to HEAD."
msgstr ""
"特別な場合として、マージベースが1つしかない場合は、あなたはAとBのマージベース"
"のショートカットとして \"A\\...B\" を使用できます。最大でAとBのいずれかを省略"
"できます。その場合、デフォルトでHEADになります。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:216
#, no-wrap
msgid "`--keep-base`"
msgstr "`--keep-base`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:222
msgid ""
"Set the starting point at which to create the new commits to the merge base "
"of `<upstream>` and `<branch>`. Running `git rebase --keep-base <upstream> "
"<branch>` is equivalent to running `git rebase --onto <upstream>...<branch> "
"<upstream> <branch>`."
msgstr "`<upstream>` の `<branch>` のマージベースへの新しいコミットを作成する開始点を設定します。 `git rebase --keep-base <upstream> <branch>` を実行することは `git rebase --onto <upstream>...<branch> <upstream> <branch>` を実行することと同じです。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:227
msgid ""
"This option is useful in the case where one is developing a feature on top "
"of an upstream branch. While the feature is being worked on, the upstream "
"branch may advance and it may not be the best idea to keep rebasing on top "
"of the upstream but to keep the base commit as-is."
msgstr ""
"このオプションは、アップストリームブランチの先頭で機能を開発している場合に役"
"立ちます。この機能が働いている間に、アップストリームのブランチが進むことがあ"
"り、アップストリームの先頭にリベースを続けるのは得策ではなく、ベースのコミッ"
"トをそのままにしておくことがあります。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:232
msgid ""
"Although both this option and `--fork-point` find the merge base between "
"`<upstream>` and `<branch>`, this option uses the merge base as the "
"_starting point_ on which new commits will be created, whereas `--fork-"
"point` uses the merge base to determine the _set of commits_ which will be "
"rebased."
msgstr "このオプションと `--fork-point` はどちらも `<upstream>` と `<branch>` の間のマージベースを検索します。しかし、このオプションは新しいコミットが作成される「開始点」としてマージベースを使用します。一方 `--fork-point` はマージベースを使用して、リベースされる「コミットのセット」を決定します。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:234
#: ../Documentation-sedout/git-rebase.txt:265
#: ../Documentation-sedout/git-rebase.txt:284
#: ../Documentation-sedout/git-rebase.txt:305
#: ../Documentation-sedout/git-rebase.txt:326
#: ../Documentation-sedout/git-rebase.txt:334
#: ../Documentation-sedout/git-rebase.txt:357
#: ../Documentation-sedout/git-rebase.txt:369
#: ../Documentation-sedout/git-rebase.txt:378
#: ../Documentation-sedout/git-rebase.txt:420
#: ../Documentation-sedout/git-rebase.txt:455
#: ../Documentation-sedout/git-rebase.txt:480
#: ../Documentation-sedout/git-rebase.txt:493
#: ../Documentation-sedout/git-rebase.txt:500
#: ../Documentation-sedout/git-rebase.txt:512
#: ../Documentation-sedout/git-rebase.txt:560
#: ../Documentation-sedout/git-rebase.txt:570
#: ../Documentation-sedout/git-rebase.txt:590
msgid "See also INCOMPATIBLE OPTIONS below."
msgstr ""
"下記の「INCOMPATIBLE OPTIONS」(互換性のないオプション)も参照してください。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:235
#, no-wrap
msgid "<upstream>"
msgstr "<upstream>"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:239
msgid ""
"Upstream branch to compare against.  May be any valid commit, not just an "
"existing branch name. Defaults to the configured upstream for the current "
"branch."
msgstr ""
"比較するアップストリームブランチ。既存のブランチ名だけでなく、任意の有効なコ"
"ミットである可能性があります。デフォルトは、現在のブランチ用に構成されたアッ"
"プストリームです。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:240
#, no-wrap
msgid "<branch>"
msgstr "<branch>"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:242
msgid "Working branch; defaults to `HEAD`."
msgstr "作業するブランチ。デフォルトはHEADです。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:243
#, no-wrap
msgid "`--continue`"
msgstr "`--continue`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:245
msgid "Restart the rebasing process after having resolved a merge conflict."
msgstr "マージの競合を解決した後、リベースプロセスを再開します。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:246
#, no-wrap
msgid "`--abort`"
msgstr "`--abort`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:252
msgid ""
"Abort the rebase operation and reset HEAD to the original branch. If "
"`<branch>` was provided when the rebase operation was started, then `HEAD` "
"will be reset to `<branch>`. Otherwise `HEAD` will be reset to where it was "
"when the rebase operation was started."
msgstr "リベース操作を中止(abort)し、 `HEAD` を元のブランチにリセットします。リベース操作の開始時に `<branch>` が指定された場合、`HEAD` は `<branch>` にリセットされます。それ以外の場合、 `HEAD` はリベース操作が開始されたときの位置にリセットされます。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:253
#, no-wrap
msgid "`--quit`"
msgstr "`--quit`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:258
msgid ""
"Abort the rebase operation but `HEAD` is not reset back to the original "
"branch. The index and working tree are also left unchanged as a result. If a "
"temporary stash entry was created using `--autostash`, it will be saved to "
"the stash list."
msgstr ""
"リベース操作を中止(abort)しますが、HEADは元のブランチにリセットされません。そ"
"の結果、インデックスと作業ツリーも変更されません。 `--autostash` を使用して一"
"時的なstashエントリが作成された場合、それはstashリストに保存されます。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:259
#: ../Documentation-sedout/git-rebase.txt:627
#, no-wrap
msgid "`--apply`"
msgstr "`--apply`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:263
msgid ""
"Use applying strategies to rebase (calling `git-am` internally).  This "
"option may become a no-op in the future once the merge backend handles "
"everything the apply one does."
msgstr ""
"適用戦略(applying strategies)を使用してリベースします(内部で `git-am` を呼び"
"出します)。このオプションは、マージバックエンドがapplyのすべてを処理すると、"
"将来的には動作しなくなる可能性があります。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:266
#, no-wrap
msgid "`--empty={drop,keep,ask}`"
msgstr "`--empty={drop,keep,ask}`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:277
msgid ""
"How to handle commits that are not empty to start and are not clean cherry-"
"picks of any upstream commit, but which become empty after rebasing (because "
"they contain a subset of already upstream changes).  With drop (the "
"default), commits that become empty are dropped.  With keep, such commits "
"are kept.  With ask (implied by `--interactive`), the rebase will halt when "
"an empty commit is applied allowing you to choose whether to drop it, edit "
"files more, or just commit the empty changes.  Other options, like `--exec`, "
"will use the default of drop unless `-i`/`--interactive` is explicitly "
"specified."
msgstr "任意のアップストリームコミットの、開始時は空ではなく、かつ、クリーンでは無いチェリーピックであるが、(すでにアップストリームの変更のサブセットが含まれているため、)リベース後に空になるコミットを処理する方法。dropを使用すると、空になるコミットはドロップされます(これがデフォルトです)。keepを使用すると、そのようなコミットは保持されます。 ask を使用すると、空のコミットが適用されるとリベースが停止し、ドロップするか、ファイルをさらに編集するか、空の変更をコミットするかを選択できます(`--interactive` の指定を含んでいます)。`--exec` などの他のオプションでは、 `-i`/`--interactive` が明示的に指定されていない限り、デフォルトのドロップが使用されます。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:282
msgid ""
"Note that commits which start empty are kept (unless `--no-keep-empty` is "
"specified), and commits which are clean cherry-picks (as determined by `git "
"log --cherry-mark ...`) are detected and dropped as a preliminary step "
"(unless `--reapply-cherry-picks` is passed)."
msgstr ""
"注意: (`--no-keep-empty` が指定されていない場合、)空で開始するコミットは保持"
"され、(`--reapply-cherry-picks` が渡されない限り)準備ステップとして、( `git "
"log --cherry-mark ...` によって決定される)クリーンなチェリーピックであるコ"
"ミットが検出・ドロップされます。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:285
#: ../Documentation-sedout/git-rebase.txt:641
#, no-wrap
msgid "`--no-keep-empty`"
msgstr "`--no-keep-empty`"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:286
#, no-wrap
msgid "`--keep-empty`"
msgstr "`--keep-empty`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:294
msgid ""
"Do not keep commits that start empty before the rebase (i.e. that do not "
"change anything from its parent) in the result.  The default is to keep "
"commits which start empty, since creating such commits requires passing the "
"`--allow-empty` override flag to `git commit`, signifying that a user is "
"very intentionally creating such a commit and thus wants to keep it."
msgstr ""
"リベースの前に空で始まるコミット(つまり、親から何も変更していないコミット)を"
"結果に残さないようにします。 なぜなら、そのようなコミットを作成するには `git "
"commit` に `--allow-empty` というオーバーライドするフラグを渡す必要があり、こ"
"れはユーザーが意図的にそのようなコミットを作成し、それを保持したいことを意味"
"しているからです。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:300
msgid ""
"Usage of this flag will probably be rare, since you can get rid of commits "
"that start empty by just firing up an interactive rebase and removing the "
"lines corresponding to the commits you don't want.  This flag exists as a "
"convenient shortcut, such as for cases where external tools generate many "
"empty commits and you want them all removed."
msgstr ""
"対話的なリベースを起動し、不要なコミットに対応する行を削除するだけで、空で始"
"まるコミットを取り除くことができるため、このフラグの使用はおそらくまれです。 "
"このフラグは、外部ツールが多くの空のコミットを生成し、それらをすべて削除した"
"い場合などの為の便利なショートカットとして存在します。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:303
msgid ""
"For commits which do not start empty but become empty after rebasing, see "
"the `--empty` flag."
msgstr ""
"開始時は空でないが、リベース後に空になるコミットについては、 `--empty` フラグ"
"を参照してください。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:306
#: ../Documentation-sedout/git-rebase.txt:643
#, no-wrap
msgid "`--reapply-cherry-picks`"
msgstr "`--reapply-cherry-picks`"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:307
#, no-wrap
msgid "`--no-reapply-cherry-picks`"
msgstr "`--no-reapply-cherry-picks`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:313
msgid ""
"Reapply all clean cherry-picks of any upstream commit instead of "
"preemptively dropping them. (If these commits then become empty after "
"rebasing, because they contain a subset of already upstream changes, the "
"behavior towards them is controlled by the `--empty` flag.)"
msgstr ""
"我先にドロップしてしまうのではなく、アップストリームコミットのすべてのクリー"
"ンなチェリーピックを再適用します。 （これらのコミットがリベース後に空になった"
"場合、それらにはすでにアップストリームの変更のサブセットが含まれているため、"
"それらに対する動作は `--empty`フラグによって制御されます。）"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:321
msgid ""
"By default (or if `--no-reapply-cherry-picks` is given), these commits will "
"be automatically dropped.  Because this necessitates reading all upstream "
"commits, this can be expensive in repos with a large number of upstream "
"commits that need to be read.  When using the 'merge' backend, warnings will "
"be issued for each dropped commit (unless `--quiet` is given). Advice will "
"also be issued unless `advice.skippedCherryPicks` is set to false (see "
"linkgit:git-config[1])."
msgstr ""
"デフォルト(または `--no-reapply-cherry-picks` が指定されている場合)では、これ"
"らのコミットは自動的にドロップされます。 これにはすべてのアップストリームコ"
"ミットを読み取る必要があるため、読み取る必要のあるアップストリームコミットが"
"多数あるリポジトリではコストがかかる可能性があります。 `merge` バックエンドを"
"使用する場合、（`--quiet` が指定されていない限り）ドロップされたコミットごと"
"に警告が発行されます。 `advice.skippedCherryPicks` がfalseに設定されていない"
"限り、アドバイスも表示されます (linkgit:git-config[1] を参照)。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:324
msgid ""
"`--reapply-cherry-picks` allows rebase to forgo reading all upstream "
"commits, potentially improving performance."
msgstr ""
"`--reapply-cherry-picks` を使用すると、リベースはすべてのアップストリームコ"
"ミットの読み取りを放棄できるため、パフォーマンスが向上する可能性があります。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:327
#: ../Documentation-sedout/git-rebase.txt:636
#, no-wrap
msgid "`--allow-empty-message`"
msgstr "`--allow-empty-message`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:332
msgid ""
"No-op.  Rebasing commits with an empty message used to fail and this option "
"would override that behavior, allowing commits with empty messages to be "
"rebased.  Now commits with an empty message do not cause rebasing to halt."
msgstr ""
"何も操作しません。空のメッセージでコミットをリベースすると失敗(fail)します"
"が、このオプションはその動作をオーバーライドし、空のメッセージを含むコミット"
"をリベースできます。つまり、空のメッセージでコミットしても、リベースは停止"
"(halt)しません。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:335
#, no-wrap
msgid "`--skip`"
msgstr "`--skip`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:337
msgid "Restart the rebasing process by skipping the current patch."
msgstr "現在のパッチをスキップして、リベースプロセスを再開します。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:338
#: ../Documentation-sedout/git-rebase.txt:644
#, no-wrap
msgid "`--edit-todo`"
msgstr "`--edit-todo`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:340
msgid "Edit the todo list during an interactive rebase."
msgstr "対話リベース中にToDoリストを編集します。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:341
#, no-wrap
msgid "`--show-current-patch`"
msgstr "`--show-current-patch`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:345
msgid ""
"Show the current patch in an interactive rebase or when rebase is stopped "
"because of conflicts. This is the equivalent of `git show REBASE_HEAD`."
msgstr ""
"対話的なリベース、または、競合のためにリベースが停止されたときに、現在のパッ"
"チを表示します。 これは `git show REBASE_HEAD` と同等です。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:346
#, no-wrap
msgid "`-m`"
msgstr "`-m`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:347
#: ../Documentation-sedout/git-rebase.txt:633
#, no-wrap
msgid "`--merge`"
msgstr "`--merge`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:349
msgid "Using merging strategies to rebase (default)."
msgstr "マージ戦略(merging strategies)を使用してリベースします(デフォルト)。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:355
msgid ""
"Note that a rebase merge works by replaying each commit from the working "
"branch on top of the `<upstream>` branch.  Because of this, when a merge "
"conflict happens, the side reported as 'ours' is the so-far rebased series, "
"starting with `<upstream>`, and 'theirs' is the working branch.  In other "
"words, the sides are swapped."
msgstr ""
"リベースマージは、<upstream>ブランチの上にある作業ブランチからの各コミットを"
"リプレイすることによって機能することに注意してください。このため、マージの競"
"合が発生した場合、 `ours` として報告される側は、<upstream>で始まるこれまでの"
"リベースされたシリーズであり、 `theirs` は作業ブランチです。 つまり、サイドが"
"入れ替わっています。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:358
#, no-wrap
msgid "`-s <strategy>`"
msgstr "`-s <strategy>`"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:359
#, no-wrap
msgid "`--strategy=<strategy>`"
msgstr "`--strategy=<strategy>`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:362
msgid ""
"Use the given merge strategy, instead of the default `ort`.  This implies `--"
"merge`."
msgstr ""
"デフォルトの `ort` の代わりに、指定のマージ戦略を使用します。 このオプション"
"は `--merge` の指定を含んでいます。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:367
msgid ""
"Because `git rebase` replays each commit from the working branch on top of "
"the `<upstream>` branch using the given strategy, using the `ours` strategy "
"simply empties all patches from the `<branch>`, which makes little sense."
msgstr ""
"`git rebase` は、指定された戦略を使用して<upstream>ブランチの上にある作業ブラ"
"ンチからの各コミットをリプレイするため、 `ours`  戦略を使用すると、<branch>か"
"らすべてのパッチが空になります。これはほとんど意味がありません。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:370
#, no-wrap
msgid "`-X <strategy-option>`"
msgstr "`-X <strategy-option>`"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:371
#, no-wrap
msgid "`--strategy-option=<strategy-option>`"
msgstr "`--strategy-option=<strategy-option>`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:376
msgid ""
"Pass the <strategy-option> through to the merge strategy.  This implies `--"
"merge` and, if no strategy has been specified, `-s ort`.  Note the reversal "
"of 'ours' and 'theirs' as noted above for the `-m` option."
msgstr ""
"<strategy-option>をマージ戦略に渡します。 これは `--merge` の指定を含んでい"
"て、戦略が指定されていない場合は `-s ort` を意味します。 `-m` オプションにて"
"上記で述べたように、「ours」と「theirs」が逆になっていることに注意してくださ"
"い。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:381
#, no-wrap
msgid "`-S[<keyid>]`"
msgstr "`-S[<keyid>]`"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:382
#, no-wrap
msgid "`--gpg-sign[=<keyid>]`"
msgstr "`--gpg-sign[=<keyid>]`"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:383
#, no-wrap
msgid "`--no-gpg-sign`"
msgstr "`--no-gpg-sign`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:389
msgid ""
"GPG-sign commits. The `keyid` argument is optional and defaults to the "
"committer identity; if specified, it must be stuck to the option without a "
"space. `--no-gpg-sign` is useful to countermand both `commit.gpgSign` "
"configuration variable, and earlier `--gpg-sign`."
msgstr ""
"GPG署名コミットです。 `keyid` 引数はオプションであり、デフォルトでコミッター"
"IDになります。 指定する場合は、スペースなしでオプションに串刺しする必要があり"
"ます。 `--no-gpg-sign` は、`commit.gpgSign` 構成変数と、それより前で指定した "
"`--gpg-sign` オプションの、その両方を打ち消すのに役立ちます。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:390
#, no-wrap
msgid "`-q`"
msgstr "`-q`"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:391
#, no-wrap
msgid "`--quiet`"
msgstr "`--quiet`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:393
msgid "Be quiet. Implies `--no-stat`."
msgstr "静かにします。`--no-stat` の指定を含みます。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:394
#, no-wrap
msgid "`-v`"
msgstr "`-v`"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:395
#, no-wrap
msgid "`--verbose`"
msgstr "`--verbose`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:397
msgid "Be verbose. Implies `--stat`."
msgstr "おしゃべりにします。 `--stat` の指定を含みます。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:398
#, no-wrap
msgid "`--stat`"
msgstr "`--stat`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:401
msgid ""
"Show a diffstat of what changed upstream since the last rebase. The diffstat "
"is also controlled by the configuration option rebase.stat."
msgstr ""
"最後のリベース以降にアップストリームで変更されたもののdiffstatを表示します。 "
"diffstatは、構成オプション rebase.stat によっても制御されます。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:402
#, no-wrap
msgid "`-n`"
msgstr "`-n`"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:403
#, no-wrap
msgid "`--no-stat`"
msgstr "`--no-stat`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:405
msgid "Do not show a diffstat as part of the rebase process."
msgstr "リベース処理の一部としてdiffstatを表示しないでください。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:406
#, no-wrap
msgid "`--no-verify`"
msgstr "`--no-verify`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:408
msgid ""
"This option bypasses the pre-rebase hook.  See also linkgit:githooks[5]."
msgstr ""
"このオプションは、リベース前のフック(pre-rebase hook)をバイパスします。 "
"linkgit:githooks[5] も参照してください。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:409
#, no-wrap
msgid "`--verify`"
msgstr "`--verify`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:412
msgid ""
"Allows the pre-rebase hook to run, which is the default.  This option can be "
"used to override `--no-verify`.  See also linkgit:githooks[5]."
msgstr ""
"リベース前フック(pre-rebase hook)の実行を許可します。これがデフォルトです。こ"
"のオプションは、 `--no-verify` をオーバーライドするために使用できます。 "
"linkgit:githooks[5] も参照してください。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:413
#, no-wrap
msgid "`-C<n>`"
msgstr "`-C<n>`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:418
msgid ""
"Ensure at least `<n>` lines of surrounding context match before and after "
"each change.  When fewer lines of surrounding context exist they all must "
"match.  By default no context is ever ignored.  Implies `--apply`."
msgstr ""
"各変更の前後で、少なくとも <n> 行の周囲のコンテキストが一致することを確認す"
"る。 周囲の文脈の行数が少ない場合は、すべて一致させなければならない。 デフォ"
"ルトでは、コンテキストは無視されます。 `--apply` の指定を含んでいます。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:421
#, no-wrap
msgid "`--no-ff`"
msgstr "`--no-ff`"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:422
#, no-wrap
msgid "`--force-rebase`"
msgstr "`--force-rebase`"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:423
#, no-wrap
msgid "`-f`"
msgstr "`-f`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:427
msgid ""
"Individually replay all rebased commits instead of fast-forwarding over the "
"unchanged ones.  This ensures that the entire history of the rebased branch "
"is composed of new commits."
msgstr ""
"変更されていないコミットを早送りす(fast-forward)るのではなく、リベースされた"
"すべてのコミットを個別にリプレイします。これにより、リベースされたブランチの"
"履歴全体が新しいコミットで構成されることが保証されます。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:433
msgid ""
"You may find this helpful after reverting a topic branch merge, as this "
"option recreates the topic branch with fresh commits so it can be remerged "
"successfully without needing to \"revert the reversion\" (see the link:howto/"
"revert-a-faulty-merge.html[revert-a-faulty-merge How-To] for details)."
msgstr ""
"トピックブランチのマージを取り消した後にこのオプションを使うと便利です。この"
"オプションはトピックブランチを新しいコミットで再作成するので、「戻しを戻す」"
"(revert the reversion)必要はありません (詳細は link:howto/revert-a-faulty-"
"merge.html[revert-a-faulty-merge How-To] をご覧ください)。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:434
#, no-wrap
msgid "`--fork-point`"
msgstr "`--fork-point`"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:435
#, no-wrap
msgid "`--no-fork-point`"
msgstr "`--no-fork-point`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:439
msgid ""
"Use reflog to find a better common ancestor between `<upstream>` and "
"`<branch>` when calculating which commits have been introduced by `<branch>`."
msgstr ""
"<branch>によって導入されたコミットを計算するときに、reflogを使用して、"
"<upstream>と<branch>の間の、より一般的な祖先を見つけます。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:445
msgid ""
"When `--fork-point` is active, 'fork_point' will be used instead of "
"`<upstream>` to calculate the set of commits to rebase, where 'fork_point' "
"is the result of `git merge-base --fork-point <upstream> <branch>` command "
"(see linkgit:git-merge-base[1]).  If 'fork_point' ends up being empty, the "
"`<upstream>` will be used as a fallback."
msgstr ""
"`--fork-point` がアクティブな場合、<upstream>の代わりに `fork_point` を使用し"
"て、リベースするコミットのセットを計算します。ここで、 `fork_point` は、 "
"`git merge-base --fork-point <upstream> <branch>` コマンドの結果です"
"（linkgit:git-merge-base[1] 参照）。  `fork_point` が空になると、<upstream>が"
"フォールバックとして使用されます。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:449
msgid ""
"If `<upstream>` is given on the command line, then the default is `--no-fork-"
"point`, otherwise the default is `--fork-point`. See also `rebase.forkpoint` "
"in linkgit:git-config[1]."
msgstr "コマンドラインで<upstream>が指定されている場合、デフォルトは `--no-fork-point` です。それ以外の場合、デフォルトは `--fork-point` です。 linkgit:git-config[1] の `rebase.forkpoint` も参照してください。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:453
msgid ""
"If your branch was based on `<upstream>` but `<upstream>` was rewound and "
"your branch contains commits which were dropped, this option can be used "
"with `--keep-base` in order to drop those commits from your branch."
msgstr ""
"あなたのブランチが<upstream>に基づいていたが、<upstream>が巻き戻され、あなた"
"のブランチにドロップされたコミットが含まれている場合、あなたのブランチからそ"
"れらのコミットをドロップするために、このオプションを `--keep-base` とともに使"
"用できます。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:456
#, no-wrap
msgid "`--ignore-whitespace`"
msgstr "`--ignore-whitespace`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:460
msgid ""
"Ignore whitespace differences when trying to reconcile differences. "
"Currently, each backend implements an approximation of this behavior:"
msgstr ""
"差分を調整しようとするときは、空白の違いを無視してください。現在、各バックエ"
"ンドはこの振る舞いの近似を実装しています:"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:461
#, no-wrap
msgid "apply backend"
msgstr "apply backend"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:467
msgid ""
"When applying a patch, ignore changes in whitespace in context lines. "
"Unfortunately, this means that if the \"old\" lines being replaced by the "
"patch differ only in whitespace from the existing file, you will get a merge "
"conflict instead of a successful patch application."
msgstr "パッチを適用するときは、コンテキスト行の空白(whitespace)の変更を無視してください。残念ながら、これは、パッチによって置き換えられる「古い」行が既存のファイルと空白(whitespace)のみが異なる場合、パッチアプリケーションが成功する代わりに、マージの競合が発生することを意味します。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:468
#, no-wrap
msgid "merge backend"
msgstr "merge backend"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:473
msgid ""
"Treat lines with only whitespace changes as unchanged when merging.  "
"Unfortunately, this means that any patch hunks that were intended to modify "
"whitespace and nothing else will be dropped, even if the other side had no "
"changes that conflicted."
msgstr "空白(whitespace)のみが変更された行は、マージ時に変更されていないものとして扱います。残念ながら、これは、反対側に競合する変更がなかったとしても、空白(whitespace)を変更することを目的としたパッチハンクがドロップされることを意味します。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:474
#, no-wrap
msgid "`--whitespace=<option>`"
msgstr "`--whitespace=<option>`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:478
msgid ""
"This flag is passed to the `git apply` program (see linkgit:git-apply[1]) "
"that applies the patch.  Implies `--apply`."
msgstr ""
"このフラグは、パッチを適用する `git apply` プログラム(linkgit:git-apply[1] 参"
"照)に渡されます。 `--apply` の指定を含んでいます。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:481
#, no-wrap
msgid "`--committer-date-is-author-date`"
msgstr "`--committer-date-is-author-date`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:485
msgid ""
"Instead of using the current time as the committer date, use the author date "
"of the commit being rebased as the committer date. This option implies `--"
"force-rebase`."
msgstr ""
"現在の時刻をコミッターの日付として使用する代わりに、リベースされるコミットの"
"作成者の日付をコミッターの日付として使用します。このオプションは、 `--force-"
"rebase` の指定を含んでいます。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:486
#, no-wrap
msgid "`--ignore-date`"
msgstr "`--ignore-date`"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:487
#, no-wrap
msgid "`--reset-author-date`"
msgstr "`--reset-author-date`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:491
msgid ""
"Instead of using the author date of the original commit, use the current "
"time as the\tauthor date of the rebased commit.  This option implies `--"
"force-rebase`."
msgstr ""
"元のコミットの作成者の日付を使用する代わりに、現在の時刻をリベースされたコ"
"ミットの作成者の日付として使用します。 このオプションは、 `--force-rebase` の"
"指定を含んでいます。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:494
#, no-wrap
msgid "`--signoff`"
msgstr "`--signoff`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:498
msgid ""
"Add a `Signed-off-by` trailer to all the rebased commits. Note that if `--"
"interactive` is given then only commits marked to be picked, edited or "
"reworded will have the trailer added."
msgstr ""
"すべてのリベースされたコミットに `Signed-off-by` トレーラーを追加します。注"
"意: `--interactive` が指定されている場合、pick または edit または reword の"
"マークが付けられたコミットのみにトレーラーが追加されることに注意してくださ"
"い。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:501
#, no-wrap
msgid "`-i`"
msgstr "`-i`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:502
#: ../Documentation-sedout/git-rebase.txt:639
#, no-wrap
msgid "`--interactive`"
msgstr "`--interactive`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:506
msgid ""
"Make a list of the commits which are about to be rebased.  Let the user edit "
"that list before rebasing.  This mode can also be used to split commits (see "
"SPLITTING COMMITS below)."
msgstr ""
"リベースされようとしているコミットのリストを作成します。リベースする前に、"
"ユーザーにそのリストを編集させます。このモードは、コミットの分割にも使用でき"
"ます（以下の「SPLITTING COMMITS」を参照）。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:510
msgid ""
"The commit list format can be changed by setting the configuration option "
"rebase.instructionFormat.  A customized instruction format will "
"automatically have the long commit hash prepended to the format."
msgstr ""
"コミットリストの書式は、構成オプション rebase.instructionFormat を設定するこ"
"とで変更できます。カスタマイズされた命令書式では、書式の前に長いコミットハッ"
"シュが自動的に追加されます。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:513
#, no-wrap
msgid "`-r`"
msgstr "`-r`"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:514
#, no-wrap
msgid "`--rebase-merges[=(rebase-cousins|no-rebase-cousins)]`"
msgstr "`--rebase-merges[=(rebase-cousins|no-rebase-cousins)]`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:522
msgid ""
"By default, a rebase will simply drop merge commits from the todo list, and "
"put the rebased commits into a single, linear branch.  With `--rebase-"
"merges`, the rebase will instead try to preserve the branching structure "
"within the commits that are to be rebased, by recreating the merge commits. "
"Any resolved merge conflicts or manual amendments in these merge commits "
"will have to be resolved/re-applied manually."
msgstr ""
"デフォルトでは、リベースはtodoリストからマージコミットを削除し、リベースされ"
"たコミットを単一の線形ブランチに配置します。 `--rebase-merges` を使用すると、"
"リベースは代わりに、マージコミットを再作成することにより、リベースされるコ"
"ミット内の分岐構造を保持しようとします。これらのマージコミットで解決された"
"マージの競合または手動の修正(amend)は、手動で 解決/再適用 する必要がありま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:529
msgid ""
"By default, or when `no-rebase-cousins` was specified, commits which do not "
"have `<upstream>` as direct ancestor will keep their original branch point, "
"i.e. commits that would be excluded by linkgit:git-log[1]'s `--ancestry-"
"path` option will keep their original ancestry by default. If the `rebase-"
"cousins` mode is turned on, such commits are instead rebased onto "
"`<upstream>` (or `<onto>`, if specified)."
msgstr ""
"デフォルト、または `no-rebase-cousins` が指定された場合、直接の祖先として "
"`<upstream>` を持たないコミットは元の分岐点を保持します。つまり、 linkgit:"
"git-log[1] の `--ancestry-path` オプションによって除外されるコミットは、デ"
"フォルトで元の祖先を保持します。 `rebase-cousins` モードがオンになっている場"
"合、そのようなコミットは代わりに `<upstream>` （または指定されている場合は "
"`<onto>` ）にリベースされます。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:533
msgid ""
"It is currently only possible to recreate the merge commits using the `ort` "
"merge strategy; different merge strategies can be used only via explicit "
"`exec git merge -s <strategy> [...]` commands."
msgstr ""
"現在、 `ort` マージ戦略を使用してのみマージコミットを再作成することが可能で"
"す。異なるマージ戦略は、明示的な `exec git merge -s <strategy> [...]` コマン"
"ドを介してのみ使用できます。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:535
msgid "See also REBASING MERGES and INCOMPATIBLE OPTIONS below."
msgstr ""
"下記の「REBASING MERGES」と「INCOMPATIBLE OPTIONS」も参照してください。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:536
#, no-wrap
msgid "`-x <cmd>`"
msgstr "`-x <cmd>`"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:537
#, no-wrap
msgid "`--exec <cmd>`"
msgstr "`--exec <cmd>`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:542
msgid ""
"Append \"exec <cmd>\" after each line creating a commit in the final "
"history. `<cmd>` will be interpreted as one or more shell commands. Any "
"command that fails will interrupt the rebase, with exit code 1."
msgstr "最終履歴にコミットを作成する各行の後に `exec <cmd>` を追加します。 `<cmd>` は、1つ以上のシェルコマンドとして解釈されます。 失敗したコマンドは、exit code 1でリベースを中断(interrupt)します。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:545
msgid ""
"You may execute several commands by either using one instance of `--exec` "
"with several commands:"
msgstr ""
"`--exec` の1つのインスタンスを複数のコマンドで使用することにより、複数のコマ"
"ンドを実行できます:"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:547
#, no-wrap
msgid "\tgit rebase -i --exec \"cmd1 && cmd2 && ...\"\n"
msgstr "\tgit rebase -i --exec \"cmd1 && cmd2 && ...\"\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:549
msgid "or by giving more than one `--exec`:"
msgstr "または、複数の `--exec` を指定します:"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:551
#, no-wrap
msgid "\tgit rebase -i --exec \"cmd1\" --exec \"cmd2\" --exec ...\n"
msgstr "\tgit rebase -i --exec \"cmd1\" --exec \"cmd2\" --exec ...\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:555
msgid ""
"If `--autosquash` is used, `exec` lines will not be appended for the "
"intermediate commits, and will only appear at the end of each squash/fixup "
"series."
msgstr ""
"`--autosquash` が使用されている場合、 `exec` 行は中間コミットに追加されず、"
"各 squash/fixup シリーズの最後にのみ現れます。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:558
msgid ""
"This uses the `--interactive` machinery internally, but it can be run "
"without an explicit `--interactive`."
msgstr ""
"これは内部で `--interactive` 機構を使用しますが、明示的な `--interactive` の"
"指定なしで実行できます。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:561
#, no-wrap
msgid "`--root`"
msgstr "`--root`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:568
msgid ""
"Rebase all commits reachable from `<branch>`, instead of limiting them with "
"an `<upstream>`.  This allows you to rebase the root commit(s) on a branch.  "
"When used with `--onto`, it will skip changes already contained in "
"`<newbase>` (instead of `<upstream>`) whereas without `--onto` it will "
"operate on every change."
msgstr "<upstream>で制限するのではなく、<branch>から到達可能なすべてのコミットをリベースします。 これにより、ブランチのルートコミットをリベースできます。 `--onto` と一緒に使用すると、（<upstream>ではなく、）<newbase>にすでに含まれている変更をスキップしますが、 `--onto` を使用しない場合は、すべての変更に対して機能します。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:571
#, no-wrap
msgid "`--autosquash`"
msgstr "`--autosquash`"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:572
#, no-wrap
msgid "`--no-autosquash`"
msgstr "`--no-autosquash`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:584
msgid ""
"When the commit log message begins with \"squash! ...\" or \"fixup! ...\" or "
"\"amend! ...\", and there is already a commit in the todo list that matches "
"the same `...`, automatically modify the todo list of `rebase -i`, so that "
"the commit marked for squashing comes right after the commit to be modified, "
"and change the action of the moved commit from `pick` to `squash` or `fixup` "
"or `fixup -C` respectively. A commit matches the `...` if the commit subject "
"matches, or if the `...` refers to the commit's hash. As a fall-back, "
"partial matches of the commit subject work, too. The recommended way to "
"create fixup/amend/squash commits is by using the `--fixup`, `--fixup=amend:"
"` or `--fixup=reword:` and `--squash` options respectively of linkgit:git-"
"commit[1]."
msgstr ""
"コミットログメッセージが「squash! ...」または「fixup! ...」または"
"「amend! ...」で始まり、同一の `...` に一致するコミットがすでにtodoリストにあ"
"る場合、 `rebase -i` のtodoリストを自動的に変更して、squashするようにマークさ"
"れたコミットが、変更するコミットの直後に来るようにし、移動したコミットのアク"
"ションをそれぞれ `pick` から、 `squash` または `fixup` または `fixup-C` に変"
"更します。  コミットの件名が一致する場合、または `...` がコミットのハッシュを"
"参照する場合、コミットは `...` と一致します。フォールバックとして、コミットサ"
"ブジェクトの部分一致も機能します。 fixup/amend/squash コミットを作成するため"
"の推奨される方法は、 linkgit:git-commit[1] のそれぞれ `--fixup` または `--"
"fixup=amend:` または `--fixup=reword:` と、`--squash` オプションを使用するこ"
"とです。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:588
msgid ""
"If the `--autosquash` option is enabled by default using the configuration "
"variable `rebase.autoSquash`, this option can be used to override and "
"disable this setting."
msgstr ""
"構成変数 `rebase.autoSquash` を使用して `--autosquash` オプションがデフォルト"
"で有効になっている場合、このオプションを使用して、この設定をオーバーライドお"
"よび無効にすることができます。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:591
#, no-wrap
msgid "`--autostash`"
msgstr "`--autostash`"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:592
#, no-wrap
msgid "`--no-autostash`"
msgstr "`--no-autostash`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:598
msgid ""
"Automatically create a temporary stash entry before the operation begins, "
"and apply it after the operation ends.  This means that you can run rebase "
"on a dirty worktree.  However, use with care: the final stash application "
"after a successful rebase might result in non-trivial conflicts."
msgstr "操作を開始する前に一時的なスタッシュエントリを自動的に作成し、操作の終了後に適用します。これは、汚れたワークツリー(dirty worktree)でリベースを実行できることを意味します。ただし、注意して使用してください。リベース成功後のスタッシュ適用の際、重要な競合を引き起こす可能性があります。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:599
#, no-wrap
msgid "`--reschedule-failed-exec`"
msgstr "`--reschedule-failed-exec`"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:600
#, no-wrap
msgid "`--no-reschedule-failed-exec`"
msgstr "`--no-reschedule-failed-exec`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:603
msgid ""
"Automatically reschedule `exec` commands that failed. This only makes sense "
"in interactive mode (or when an `--exec` option was provided)."
msgstr ""
"失敗した `exec` コマンドを自動的に再スケジュールします。 これは、対話モード"
"(または `--exec` オプションが提供された場合)でのみ意味があります。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:611
msgid ""
"Even though this option applies once a rebase is started, it's set for the "
"whole rebase at the start based on either the `rebase.rescheduleFailedExec` "
"configuration (see linkgit:git-config[1] or \"CONFIGURATION\" below) or "
"whether this option is provided. Otherwise an explicit `--no-reschedule-"
"failed-exec` at the start would be overridden by the presence of `rebase."
"rescheduleFailedExec=true` configuration."
msgstr ""
"このオプションは、リベースが開始されると適用されますが、これは、 `rebase."
"rescheduleFailedExec` 構成(linkgit:git-config[1] または 下記「CONFIGURATION」"
"参照)、またはこのオプションが提供されているかどうかに基づいて、最初にリベース"
"全体に設定されます。でなければ、開始時の明示的な `--no-reschedule-failed-"
"exec` が、 `rebase.rescheduleFailedExec=true` 構成の存在によって上書きされま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:612
#: ../Documentation-sedout/git-rebase.txt:645
#, no-wrap
msgid "`--update-refs`"
msgstr "`--update-refs`"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:613
#, no-wrap
msgid "`--no-update-refs`"
msgstr "`--no-update-refs`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:617
msgid ""
"Automatically force-update any branches that point to commits that are being "
"rebased. Any branches that are checked out in a worktree are not updated in "
"this way."
msgstr "リベースされているコミットを指すブランチを自動的に強制更新します。 ワークツリーでチェックアウトされたブランチは、この方法では更新されません。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:620
msgid ""
"If the configuration variable `rebase.updateRefs` is set, then this option "
"can be used to override and disable this setting."
msgstr "構成変数 `rebase.updateRefs` が設定されている場合、このオプションを使用して、この設定をオーバーライドして無効にすることができます。"

#. type: Title -
#: ../Documentation-sedout/git-rebase.txt:622
#, no-wrap
msgid "INCOMPATIBLE OPTIONS"
msgstr "INCOMPATIBLE OPTIONS(互換性の無いオプション)"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:625
msgid "The following options:"
msgstr "これらのオプション:"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:628
msgid "`--whitespace`"
msgstr "`--whitespace`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:629
msgid "`-C`"
msgstr "`-C`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:631
msgid "are incompatible with the following options:"
msgstr "は、以下のオプションと互換性がありません:"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:634
msgid "`--strategy`"
msgstr "`--strategy`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:635
msgid "`--strategy-option`"
msgstr "`--strategy-option`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:637
msgid "`--[no-]autosquash`"
msgstr "`--[no-]autosquash`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:638
msgid "`--rebase-merges`"
msgstr "`--rebase-merges`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:640
msgid "`--exec`"
msgstr "`--exec`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:642
msgid "`--empty=`"
msgstr "`--empty=`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:646
msgid "`--root` when used in combination with `--onto`"
msgstr "`--root` 。`--onto` と組み合わせて使用する場合。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:648
msgid "In addition, the following pairs of options are incompatible:"
msgstr "さらに、以下のオプションの組み合わせには互換性がありません:"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:650
msgid "`--keep-base` and `--onto`"
msgstr "`--keep-base` と `--onto`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:651
msgid "`--keep-base` and `--root`"
msgstr "`--keep-base` と `--root`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:652
msgid "`--fork-point` and `--root`"
msgstr "`--fork-point` と `--root`"

#. type: Title -
#: ../Documentation-sedout/git-rebase.txt:654
#, no-wrap
msgid "BEHAVIORAL DIFFERENCES"
msgstr "BEHAVIORAL DIFFERENCES(振る舞いの違い)"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:663
msgid ""
"`git rebase` has two primary backends: 'apply' and 'merge'.  (The 'apply' "
"backend used to be known as the 'am' backend, but the name led to confusion "
"as it looks like a verb instead of a noun.  Also, the 'merge' backend used "
"to be known as the interactive backend, but it is now used for non-"
"interactive cases as well.  Both were renamed based on lower-level "
"functionality that underpinned each.) There are some subtle differences in "
"how these two backends behave:"
msgstr "git rebaseには、 `apply` と `merge` の2つの主要バックエンドがあります。 (`apply` バックエンドは以前は `am` バックエンド と呼ばれていましたが、名詞ではなく動詞のように見えるため混乱を招きました。また、 `merge` バックエンドは以前は `interactive` バックエンドと呼ばれていましたが、現在は 非対話型の場合にも使用されます。どちらも、それぞれを支える低レベルの機能に基づいて名前が変更されました。）これら2つのバックエンドの振る舞いには微妙な違いがあります:"

#. type: Title ===
#: ../Documentation-sedout/git-rebase.txt:664
#, no-wrap
msgid "Empty commits"
msgstr "空のコミット"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:671
msgid ""
"The 'apply' backend unfortunately drops intentionally empty commits, i.e.  "
"commits that started empty, though these are rare in practice.  It also "
"drops commits that become empty and has no option for controlling this "
"behavior."
msgstr "`apply` バックエンドは、残念ながら意図的に空のコミット、つまり空で開始されたコミットを削除しますが、これらは実際にはまれです。また、空になるコミットを削除したり、その振る舞いを制御するオプションがありません。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:675
msgid ""
"The 'merge' backend keeps intentionally empty commits by default (though "
"with `-i` they are marked as empty in the todo list editor, or they can be "
"dropped automatically with `--no-keep-empty`)."
msgstr "`merge` バックエンドは、デフォルトで意図的に空のコミットを保持します(ただし、 `-i` を使用すると、todoリストエディタでemptyとしてマークされます。または、 `--no-keep-empty` を使用して自動的に削除できます)。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:681
msgid ""
"Similar to the apply backend, by default the merge backend drops commits "
"that become empty unless `-i`/`--interactive` is specified (in which case it "
"stops and asks the user what to do).  The merge backend also has an `--"
"empty={drop,keep,ask}` option for changing the behavior of handling commits "
"that become empty."
msgstr "適用バックエンドと同様に、デフォルトでは、mergeバックエンドは、 `-i`/`--interactive` が指定されていない限り、空になるコミットをドロップします(この場合、mergeバックエンドは停止(stop)し、ユーザーに何をすべきかを尋ねます)。mergeバックエンドには、空になったコミットの処理動作を変更するための `--empty={drop,keep,ask}` オプションもあります。"

#. type: Title ===
#: ../Documentation-sedout/git-rebase.txt:682
#, no-wrap
msgid "Directory rename detection"
msgstr "ディレクトリ名変更の検知"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:693
msgid ""
"Due to the lack of accurate tree information (arising from constructing fake "
"ancestors with the limited information available in patches), directory "
"rename detection is disabled in the 'apply' backend.  Disabled directory "
"rename detection means that if one side of history renames a directory and "
"the other adds new files to the old directory, then the new files will be "
"left behind in the old directory without any warning at the time of rebasing "
"that you may want to move these files into the new directory."
msgstr "正確なツリー情報が不足している(パッチで利用可能な限られた情報で偽の祖先を構築するために生じる)ため、 `apply` バックエンドでディレクトリ名変更の検出が無効になっています。 ディレクトリ名前変更の検出が無効になっているということは、 履歴の一方がディレクトリの名前を変更し、 もう一方が古いディレクトリに新しいファイルを追加した場合に、 リベース時にこれらのファイルを新しいディレクトリに移動したいという警告なしに、 新しいファイルが古いディレクトリに残されます。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:696
msgid ""
"Directory rename detection works with the 'merge' backend to provide you "
"warnings in such cases."
msgstr "ディレクトリ名変更の検出は、 `merge` バックエンドと連携して、このような場合に警告を出します。"

#. type: Title ===
#: ../Documentation-sedout/git-rebase.txt:697
#, no-wrap
msgid "Context"
msgstr "Context"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:714
msgid ""
"The 'apply' backend works by creating a sequence of patches (by calling "
"`format-patch` internally), and then applying the patches in sequence "
"(calling `am` internally).  Patches are composed of multiple hunks, each "
"with line numbers, a context region, and the actual changes.  The line "
"numbers have to be taken with some fuzz, since the other side will likely "
"have inserted or deleted lines earlier in the file.  The context region is "
"meant to help find how to adjust the line numbers in order to apply the "
"changes to the right lines.  However, if multiple areas of the code have the "
"same surrounding lines of context, the wrong one can be picked.  There are "
"real-world cases where this has caused commits to be reapplied incorrectly "
"with no conflicts reported.  Setting `diff.context` to a larger value may "
"prevent such types of problems, but increases the chance of spurious "
"conflicts (since it will require more lines of matching context to apply)."
msgstr "適用バックエンドは、（内部で `format-patch` を呼び出すことにより、）パッチのシーケンスを作成し、次にパッチを順番に適用することにより（内部で `am` を呼び出すことにより）機能します。パッチは複数のハンクで構成されており、それぞれに行番号、コンテキストリージョン、および実際の変更が含まれています。反対側がファイルの前に行を挿入または削除した可能性があるため、行番号はある程度曖昧にする必要があります。コンテキスト領域(context region)は、正しい行に変更を適用するために行番号を調整する方法を見つけるのに役立つことを目的としています。ただし、コードの複数の領域に同じ周囲のコンテキスト行がある場合、間違った領域が選択される可能性があります。これにより、競合が報告されずにコミットが誤って再適用される実際のケースがあります。 `diff.context` をより大きな値に設定すると、このようなタイプの問題を防ぐことができますが、誤った競合の可能性が高くなります（適用するには、一致するコンテキストの行がより多く必要になるため）。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:717
msgid ""
"The 'merge' backend works with a full copy of each relevant file, insulating "
"it from these types of problems."
msgstr "`merge` バックエンドは、関連する各ファイルの完全なコピーを使って動作し、これらの種類の問題からファイルを保護します。"

#. type: Title ===
#: ../Documentation-sedout/git-rebase.txt:718
#, no-wrap
msgid "Labelling of conflicts markers"
msgstr "Labelling of conflicts markers"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:731
msgid ""
"When there are content conflicts, the merge machinery tries to annotate each "
"side's conflict markers with the commits where the content came from.  Since "
"the 'apply' backend drops the original information about the rebased commits "
"and their parents (and instead generates new fake commits based off limited "
"information in the generated patches), those commits cannot be identified; "
"instead it has to fall back to a commit summary.  Also, when `merge."
"conflictStyle` is set to `diff3` or `zdiff3`, the 'apply' backend will use "
"\"constructed merge base\" to label the content from the merge base, and "
"thus provide no information about the merge base commit whatsoever."
msgstr "コンテンツの競合がある場合、マージ機構は、コンテンツが由来するコミットでそれぞれの側の競合マーカーに注釈を付けようとします。 `apply` バックエンドは、リベースされたコミットとその親に関する元の情報を削除するため(代わりに、生成されたパッチの限られた情報に基づいて新しい偽のコミットを生成します)、それらのコミットを識別できません。 代わりに、コミットの要約にフォールバックする必要があります。また、 merge.conflictStyle が `diff3` または `zdiff3` に設定されている場合、 `apply` バックエンドは「構築されたマージベース」を使用してマージベースのコンテンツにラベルを付けるため、マージベースのコミットに関する情報は一切提供されません。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:734
msgid ""
"The 'merge' backend works with the full commits on both sides of history and "
"thus has no such limitations."
msgstr "`merge` バックエンドは、履歴の両側で完全なコミットで動作するため、そのような制限はありません。"

#. type: Title ===
#: ../Documentation-sedout/git-rebase.txt:735
#, no-wrap
msgid "Hooks"
msgstr "フック"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:750
msgid ""
"The 'apply' backend has not traditionally called the post-commit hook, while "
"the 'merge' backend has.  Both have called the post-checkout hook, though "
"the 'merge' backend has squelched its output.  Further, both backends only "
"call the post-checkout hook with the starting point commit of the rebase, "
"not the intermediate commits nor the final commit.  In each case, the "
"calling of these hooks was by accident of implementation rather than by "
"design (both backends were originally implemented as shell scripts and "
"happened to invoke other commands like `git checkout` or `git commit` that "
"would call the hooks).  Both backends should have the same behavior, though "
"it is not entirely clear which, if any, is correct.  We will likely make "
"rebase stop calling either of these hooks in the future."
msgstr "`apply` バックエンドは従来、コミット後フック(post-commit hook)を呼び出していませんでしたが、 `merge` バックエンドは呼び出していました。 `merge` バックエンドはその出力を黙らせましたが、いまだ両方ともチェックアウト後フック(post-checkout hook)を呼び出します。さらに、両方のバックエンドは、中間コミットや最終コミットではなく、リベースの開始点コミットでのみチェックアウト後フック(post-checkout hook)を呼び出します。いずれの場合も、これらのフックの呼び出しは、そう設計したのではなく、実装の偶然によるものでした(両方のバックエンドは元々シェルスクリプトとして実装されており、フックを呼び出す `git checkout ` や `git commit` などの他のコマンドをたまたま呼び出していました)。どちらが正しいかは完全には明らかではありませんが、両方のバックエンドの動作は同じであるべきです。将来的には、リベースがこれらのフックのいずれかを呼び出すのを停止する可能性があります。"

#. type: Title ===
#: ../Documentation-sedout/git-rebase.txt:751
#, no-wrap
msgid "Interruptability"
msgstr "Interruptability(割り込み可能性)"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:761
msgid ""
"The 'apply' backend has safety problems with an ill-timed interrupt; if the "
"user presses Ctrl-C at the wrong time to try to abort the rebase, the rebase "
"can enter a state where it cannot be aborted with a subsequent `git rebase --"
"abort`.  The 'merge' backend does not appear to suffer from the same "
"shortcoming.  (See https://lore.kernel.org/git/20200207132152.GC2868@szeder."
"dev/ for details.)"
msgstr "`apply` バックエンドには、タイミングの悪い割り込みによる安全上の問題があります。ユーザーが間違ったタイミングで Ctrl-C を押してリベースを中止しようとすると、リベースは、後続の `git rebase --abort` で中止できない状態になる可能性があります。 `merge` バックエンドには、同様の欠点は見られません。(詳細については、 https://lore.kernel.org/git/20200207132152.GC2868@szeder.dev/ を参照してください。)"

#. type: Title ===
#: ../Documentation-sedout/git-rebase.txt:762
#, no-wrap
msgid "Commit Rewording"
msgstr "Commit Rewording"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:771
msgid ""
"When a conflict occurs while rebasing, rebase stops and asks the user to "
"resolve.  Since the user may need to make notable changes while resolving "
"conflicts, after conflicts are resolved and the user has run `git rebase --"
"continue`, the rebase should open an editor and ask the user to update the "
"commit message.  The 'merge' backend does this, while the 'apply' backend "
"blindly applies the original commit message."
msgstr "リベース中に競合が発生すると、リベースが停止(stop)し、ユーザーに解決を求めます。 ユーザーは競合の解決中に注目すべき変更を加える必要がある場合があるため、競合が解決され、ユーザーが `git rebase --continue` を実行した後、リベースはエディターを開き、ユーザーにコミットメッセージを更新するように依頼する必要があります。 `merge` バックエンドはこれを行いますが、 `apply` バックエンドは元のコミットメッセージを盲目的に適用します。"

#. type: Title ===
#: ../Documentation-sedout/git-rebase.txt:772
#, no-wrap
msgid "Miscellaneous differences"
msgstr "Miscellaneous differences"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:778
msgid ""
"There are a few more behavioral differences that most folks would probably "
"consider inconsequential but which are mentioned for completeness:"
msgstr ""
"ほとんどの人がおそらく取るに足らないと考えるであろうが、完全性のために言及さ"
"れているいくつかの振る舞いの違いがあります:"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:782
msgid ""
"Reflog: The two backends will use different wording when describing the "
"changes made in the reflog, though both will make use of the word \"rebase\"."
msgstr ""
"Reflog: 2つのバックエンドは、reflogで行われた変更を説明するときに異なる表現を"
"使用しますが、どちらも「リベース」という単語を使用します。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:788
msgid ""
"Progress, informational, and error messages: The two backends provide "
"slightly different progress and informational messages.  Also, the apply "
"backend writes error messages (such as \"Your files would be overwritten..."
"\") to stdout, while the merge backend writes them to stderr."
msgstr ""
"進行状況、情報、エラーメッセージ について: 2つのバックエンドは、わずかに異な"
"る進行状況と情報メッセージを提供します。また、applyバックエンドはエラーメッ"
"セージ（「Your files would be overwritten...」など）をstdoutに書き込み、merge"
"バックエンドはそれらをstderrに書き込みます。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:791
msgid ""
"State directories: The two backends keep their state in different "
"directories under `.git/`"
msgstr ""
"状態ディレクトリ: 2つのバックエンドは、 `.git/` の下の異なるディレクトリに状"
"態を保持します"

#. type: Title -
#: ../Documentation-sedout/git-rebase.txt:795
#, no-wrap
msgid "NOTES"
msgstr "NOTES"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:800
msgid ""
"You should understand the implications of using `git rebase` on a repository "
"that you share.  See also RECOVERING FROM UPSTREAM REBASE below."
msgstr ""
"あなたは共有リポジトリで `git rebase` を使用することの意味を理解する必要があ"
"ります。下記「RECOVERING FROM UPSTREAM REBASE」も参照してください。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:805
msgid ""
"When the rebase is run, it will first execute a `pre-rebase` hook if one "
"exists.  You can use this hook to do sanity checks and reject the rebase if "
"it isn't appropriate.  Please see the template `pre-rebase` hook script for "
"an example."
msgstr "リベースを実行すると、最初にpre-rebaseフックが存在する場合はそれが実行されます。このフックを使用して、健全性チェックを実行し、適切でない場合はリベースを拒否できます。例については、テンプレートの pre-rebase hook スクリプトを参照してください。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:807
msgid "Upon completion, `<branch>` will be the current branch."
msgstr "完了すると、<branch>が現在のブランチになります。"

#. type: Title -
#: ../Documentation-sedout/git-rebase.txt:809
#, no-wrap
msgid "INTERACTIVE MODE"
msgstr "INTERACTIVE MODE"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:814
msgid ""
"Rebasing interactively means that you have a chance to edit the commits "
"which are rebased.  You can reorder the commits, and you can remove them "
"(weeding out bad or otherwise unwanted patches)."
msgstr ""
"対話的にリベースするということは、あなたがリベースされるコミットを編集する機"
"会があることを意味します。コミットを並べ替えたり、削除したりできます(不良パッ"
"チやその他の不要なパッチを削除します)。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:816
msgid "The interactive mode is meant for this type of workflow:"
msgstr "対話モードは、以下のタイプの作業フローを対象としています:"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:818
msgid "have a wonderful idea"
msgstr "素晴らしいアイデアを思いついた"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:819
msgid "hack on the code"
msgstr "コードをハックハック"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:820
msgid "prepare a series for submission"
msgstr "提出用のシリーズを準備"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:821
msgid "submit"
msgstr "送信"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:823
msgid "where point 2. consists of several instances of"
msgstr "ここで、 (2) は以下のいくつかの作業で構成されています"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:825
msgid "regular use"
msgstr "普段"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:827
msgid "finish something worthy of a commit"
msgstr "コミットに値する何かを終える"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:828
msgid "commit"
msgstr "コミットする"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:830
msgid "independent fixup"
msgstr "独立した修正"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:832
msgid "realize that something does not work"
msgstr "何かが機能しないことに気付く"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:833
msgid "fix that"
msgstr "そいつを修正"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:834
msgid "commit it"
msgstr "それをコミットする"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:840
msgid ""
"Sometimes the thing fixed in b.2. cannot be amended to the not-quite perfect "
"commit it fixes, because that commit is buried deeply in a patch series.  "
"That is exactly what interactive rebase is for: use it after plenty of \"a"
"\"s and \"b\"s, by rearranging and editing commits, and squashing multiple "
"commits into one."
msgstr ""
"bの(2) で修正したコミットがパッチシリーズの中に深く埋もれているために、完全で"
"はないコミットに戻せない(amend)ことがあります。これこそが対話型リベースの目的"
"です。たくさんの \"a\" と \"b\" の後に、コミットを並べ替えたり編集したり、複"
"数のコミットをひとつにまとめたりするために使用します。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:842
msgid "Start it with the last commit you want to retain as-is:"
msgstr "そのまま保持したい最後のコミットから開始します:"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:844
#, no-wrap
msgid "\tgit rebase -i <after-this-commit>\n"
msgstr "\tgit rebase -i <after-this-commit>\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:849
msgid ""
"An editor will be fired up with all the commits in your current branch "
"(ignoring merge commits), which come after the given commit.  You can "
"reorder the commits in this list to your heart's content, and you can remove "
"them.  The list looks more or less like this:"
msgstr ""
"エディターは、あなたの現在のブランチのすべてのコミット(マージコミットは無視)"
"で起動されます。これは、指定のコミットの後に発生します。あなたは、このリスト"
"のコミットを心ゆくまで並べ替えたり、削除したりできます。そして、リストは多か"
"れ少なかれ以下のようになります:"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:854
#, no-wrap
msgid ""
"pick deadbee The oneline of this commit\n"
"pick fa1afe1 The oneline of the next commit\n"
"...\n"
msgstr ""
"pick deadbee The oneline of this commit\n"
"pick fa1afe1 The oneline of the next commit\n"
"...\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:859
msgid ""
"The oneline descriptions are purely for your pleasure; 'git rebase' will not "
"look at them but at the commit names (\"deadbee\" and \"fa1afe1\" in this "
"example), so do not delete or edit the names."
msgstr ""
"1行説明は、純粋にあなたの備忘のためです。 `git rebase` はそれらを参照せず、コ"
"ミット名（この例では \"deadbee\" と \"fa1afe1\" ）を参照するため、名前を削除"
"または編集しないでください。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:864
msgid ""
"By replacing the command \"pick\" with the command \"edit\", you can tell "
"`git rebase` to stop after applying that commit, so that you can edit the "
"files and/or the commit message, amend the commit, and continue rebasing."
msgstr ""
"コマンド「pick」をコマンド「edit」に置き換えることで、 `git rebase` にそのコ"
"ミットを適用した後に停止(stop)するように指示できます。これにより、あなたは"
"ファイルやコミットメッセージを編集し、コミットを修正(amend)して、リベースを続"
"行できます。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:867
msgid ""
"To interrupt the rebase (just like an \"edit\" command would do, but without "
"cherry-picking any commit first), use the \"break\" command."
msgstr ""
"リベースを中断するには(`edit` コマンドと同様、ただし最初にコミットを選択せず"
"に)、 `break` コマンドを使用します。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:870
msgid ""
"If you just want to edit the commit message for a commit, replace the "
"command \"pick\" with the command \"reword\"."
msgstr ""
"あなたがコミットのコミットメッセージを編集したいだけの場合は、コマンド "
"`pick` をコマンド `reword` に置き換えます。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:873
msgid ""
"To drop a commit, replace the command \"pick\" with \"drop\", or just delete "
"the matching line."
msgstr ""
"コミットを削除するには、コマンド `pick` を `drop` に置き換えるか、あるいは"
"マッチする行を削除します。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:888
msgid ""
"If you want to fold two or more commits into one, replace the command \"pick"
"\" for the second and subsequent commits with \"squash\" or \"fixup\".  If "
"the commits had different authors, the folded commit will be attributed to "
"the author of the first commit.  The suggested commit message for the folded "
"commit is the concatenation of the first commit's message with those "
"identified by \"squash\" commands, omitting the messages of commits "
"identified by \"fixup\" commands, unless \"fixup -c\" is used.  In that case "
"the suggested commit message is only the message of the \"fixup -c\" commit, "
"and an editor is opened allowing you to edit the message.  The contents "
"(patch) of the \"fixup -c\" commit are still incorporated into the folded "
"commit. If there is more than one \"fixup -c\" commit, the message from the "
"final one is used.  You can also use \"fixup -C\" to get the same behavior "
"as \"fixup -c\" except without opening an editor."
msgstr ""
"2つ以上のコミットを1つにまとめる場合は、2番目以降のコミットのコマンド pick "
"を squash または fixup に置き換えます。コミットに異なる作者がいた場合、折りた"
"たまれたコミットは最初のコミットの作者に帰属します。折りたたまれたコミットに"
"対して推奨されるコミットメッセージは、最初のコミットのメッセージと squash コ"
"マンドで識別されるメッセージを連結したもので、 `fixup -c` が使用されていない"
"限り、fixupコマンドで識別されるコミットのメッセージは省略されます。`fixup -"
"c` が使用された場合、提案されたコミットメッセージは `fixup -c` コミットのメッ"
"セージのみであり、エディタが開いてメッセージを編集できます。 `fixup -c` コ"
"ミットの内容(パッチ)は、折りたたまれたコミットに引き続き組み込まれます。 "
"`fixup -c` コミットが複数ある場合は、最後のコミットからのメッセージが使用され"
"ます。あなたは  `fixup -C` を使用して、エディターを開かないことを除いて "
"`fixup -c` と同じ動作をさせることもできます。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:892
msgid ""
"`git rebase` will stop when \"pick\" has been replaced with \"edit\" or when "
"a command fails due to merge errors. When you are done editing and/or "
"resolving conflicts you can continue with `git rebase --continue`."
msgstr ""
"「git rebase」は、 pick が edit に置き換えられたとき、またはマージエラーのた"
"めにコマンドが失敗したときに停止(stop)します。 競合の編集や解決が完了した"
"ら、 あなたは `git rebase --continue` で続行できます。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:896
msgid ""
"For example, if you want to reorder the last 5 commits, such that what was "
"`HEAD~4` becomes the new `HEAD`. To achieve that, you would call `git "
"rebase` like this:"
msgstr ""
"たとえば、最後の5つのコミットを並べ替えて、 HEAD~4 であったものが新しいHEADに"
"なるようにします。これを実現するには、以下のように「git rebase」を呼び出しま"
"す:"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:899
#, no-wrap
msgid "$ git rebase -i HEAD~5\n"
msgstr "$ git rebase -i HEAD~5\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:902
msgid "And move the first patch to the end of the list."
msgstr "そして、最初のパッチをリストの最後に移動します。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:905
msgid ""
"You might want to recreate merge commits, e.g. if you have a history like "
"this:"
msgstr ""
"たとえば、あなたが以下のような履歴を持っているなら、マージコミットを再作成す"
"ることをお勧めします:"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:912
#, no-wrap
msgid ""
"           X\n"
"            \\\n"
"         A---M---B\n"
"        /\n"
"---o---O---P---Q\n"
msgstr ""
"           X\n"
"            \\\n"
"         A---M---B\n"
"        /\n"
"---o---O---P---Q\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:916
msgid ""
"Suppose you want to rebase the side branch starting at \"A\" to \"Q\". Make "
"sure that the current `HEAD` is \"B\", and call"
msgstr ""
"あなたは A から Q までのブランチをリベースしたいとします。現在のHEADが B であ"
"ることを確認して、以下を実行します"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:919
#, no-wrap
msgid "$ git rebase -i -r --onto Q O\n"
msgstr "$ git rebase -i -r --onto Q O\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:926
msgid ""
"Reordering and editing commits usually creates untested intermediate steps.  "
"You may want to check that your history editing did not break anything by "
"running a test, or at least recompiling at intermediate points in history by "
"using the \"exec\" command (shortcut \"x\").  You may do so by creating a "
"todo list like this one:"
msgstr ""
"コミットの並べ替えと編集は通常、テストされていない中間ステップを作成します。"
"テストを実行するか、少なくとも「exec」コマンド(ショートカット「x」)を使用して"
"履歴の中間ポイントで再コンパイルすることにより、履歴の編集で何も壊れていない"
"ことを確認することをお勧めします。これを行うには、以下のようなToDoリストを作"
"成します:"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:935
#, no-wrap
msgid ""
"pick deadbee Implement feature XXX\n"
"fixup f1a5c00 Fix to feature XXX\n"
"exec make\n"
"pick c0ffeee The oneline of the next commit\n"
"edit deadbab The oneline of the commit after\n"
"exec cd subdir; make test\n"
"...\n"
msgstr ""
"pick deadbee Implement feature XXX\n"
"fixup f1a5c00 Fix to feature XXX\n"
"exec make\n"
"pick c0ffeee The oneline of the next commit\n"
"edit deadbab The oneline of the commit after\n"
"exec cd subdir; make test\n"
"...\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:940
msgid ""
"The interactive rebase will stop when a command fails (i.e. exits with non-0 "
"status) to give you an opportunity to fix the problem. You can continue with "
"`git rebase --continue`."
msgstr ""
"コマンドが失敗すると（つまり、0以外のステータスで終了すると）、対話的リベース"
"が停止(stop)し、あなたには問題を修正する機会が与えられます。あなたは  `git "
"rebase --continue` で続行できます。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:945
msgid ""
"The \"exec\" command launches the command in a shell (the one specified in `"
"$SHELL`, or the default shell if `$SHELL` is not set), so you can use shell "
"features (like \"cd\", \">\", \";\" ...). The command is run from the root "
"of the working tree."
msgstr ""
"「exec」コマンドは、シェル(`$SHELL` で指定されたもの、または `$SHELL` が設定"
"されていない場合はデフォルトのシェル)でコマンドを起動するため、シェル機能"
"(\"cd\"、\">\"、\";\" など)を使用できます。コマンドは、作業ツリーのルートから"
"実行されます。"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:948
#, no-wrap
msgid "$ git rebase -i --exec \"make test\"\n"
msgstr "$ git rebase -i --exec \"make test\"\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:952
msgid ""
"This command lets you check that intermediate commits are compilable.  The "
"todo list becomes like that:"
msgstr ""
"このコマンドを使用すると、あなたは中間コミット(intermediate commits)がコンパ"
"イル可能であることを確認できます。ToDoリストは以下のようになります:"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:962
#, no-wrap
msgid ""
"pick 5928aea one\n"
"exec make test\n"
"pick 04d0fda two\n"
"exec make test\n"
"pick ba46169 three\n"
"exec make test\n"
"pick f4593f9 four\n"
"exec make test\n"
msgstr ""
"pick 5928aea one\n"
"exec make test\n"
"pick 04d0fda two\n"
"exec make test\n"
"pick ba46169 three\n"
"exec make test\n"
"pick f4593f9 four\n"
"exec make test\n"

#. type: Title -
#: ../Documentation-sedout/git-rebase.txt:965
#, no-wrap
msgid "SPLITTING COMMITS"
msgstr "SPLITTING COMMITS"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:971
msgid ""
"In interactive mode, you can mark commits with the action \"edit\".  "
"However, this does not necessarily mean that `git rebase` expects the result "
"of this edit to be exactly one commit.  Indeed, you can undo the commit, or "
"you can add other commits.  This can be used to split a commit into two:"
msgstr ""
"対話モードでは、アクション「edit」でコミットをマークできます。 ただし、これは"
"必ずしも「git rebase」がこの編集の結果が正確に1つのコミットであることを期待し"
"ていることを意味するわけではありません。 実際、あなたはコミットを元に戻す"
"(undo)ことも、他のコミットを追加することもできます。そしてこれは、コミットを2"
"つに分割するために使用できます:"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:975
msgid ""
"Start an interactive rebase with `git rebase -i <commit>^`, where `<commit>` "
"is the commit you want to split.  In fact, any commit range will do, as long "
"as it contains that commit."
msgstr ""
"`git rebase -i <commit> ^` を使用して対話的リベースを開始します。ここで、"
"<commit> はあなたが分割したいコミットです。 実際、そのコミットが含まれている"
"限り、どんなコミット範囲でもかまいません。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:977
msgid "Mark the commit you want to split with the action \"edit\"."
msgstr "あなたが分割したいコミットを、 アクション `edit` でマークします。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:981
msgid ""
"When it comes to editing that commit, execute `git reset HEAD^`.  The effect "
"is that the `HEAD` is rewound by one, and the index follows suit.  However, "
"the working tree stays the same."
msgstr ""
"そのコミットを編集する場合は、 `git reset HEAD^` を実行します。 その効果は、"
"HEADが1つ巻き戻され、インデックスがそれに追随することです。 ただし、作業ツ"
"リーは同じままです。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:985
msgid ""
"Now add the changes to the index that you want to have in the first commit.  "
"You can use `git add` (possibly interactively) or `git gui` (or both) to do "
"that."
msgstr ""
"次に、最初のコミットで必要な変更をインデックスに追加します。 これを行うに"
"は、 （おそらく対話的に）`git add` を使うかまたは 'git gui' を使うか（、また"
"はこの両方を使うか)できます。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:988
msgid ""
"Commit the now-current index with whatever commit message is appropriate now."
msgstr ""
"最新の適切なコミットメッセージを使用して、最新の「現在のインデックス」をコ"
"ミットします。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:990
msgid "Repeat the last two steps until your working tree is clean."
msgstr "作業ツリーがクリーンになるまで、最後の2つの手順を繰り返します。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:992
msgid "Continue the rebase with `git rebase --continue`."
msgstr "`git rebase --continue` でリベースを続行します。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:997
msgid ""
"If you are not absolutely sure that the intermediate revisions are "
"consistent (they compile, pass the testsuite, etc.) you should use `git "
"stash` to stash away the not-yet-committed changes after each commit, test, "
"and amend the commit if fixes are necessary."
msgstr ""
"あなたが中間リビジョンの一貫性(コンパイル、テストスイートの合格など)が完全に"
"は分からない場合は、「git stash」を使用して、各コミット後にまだコミットされて"
"いない変更を隠し、修正が必要な場合はコミットをテストして修正する必要がありま"
"す。"

#. type: Title -
#: ../Documentation-sedout/git-rebase.txt:1000
#, no-wrap
msgid "RECOVERING FROM UPSTREAM REBASE"
msgstr "RECOVERING FROM UPSTREAM REBASE"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1007
msgid ""
"Rebasing (or any other form of rewriting) a branch that others have based "
"work on is a bad idea: anyone downstream of it is forced to manually fix "
"their history.  This section explains how to do the fix from the "
"downstream's point of view.  The real fix, however, would be to avoid "
"rebasing the upstream in the first place."
msgstr ""
"他の人がベースにしているブランチをリベースする (あるいは他の形で書き換える) "
"のは悪い考えです。そのブランチの下流の人は、自分の履歴を手動で修正することを"
"余儀なくされます。 このセクションでは、下流側の視点から見た修正の方法を説明し"
"ます。 しかし、本当の意味での修正は、そもそも上流のリベースを行わないことで"
"す。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1012
msgid ""
"To illustrate, suppose you are in a situation where someone develops a "
"'subsystem' branch, and you are working on a 'topic' that is dependent on "
"this 'subsystem'.  You might end up with a history like the following:"
msgstr ""
"説明のために、誰かが「subsystem」ブランチを開発し、この「subsystem」に依存す"
"る「topic」に取り組んでいる状況にあると仮定します。たぶん以下のような履歴で"
"す:"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:1019
#, no-wrap
msgid ""
"    o---o---o---o---o---o---o---o  master\n"
"\t \\\n"
"\t  o---o---o---o---o  subsystem\n"
"\t\t\t   \\\n"
"\t\t\t    *---*---*  topic\n"
msgstr ""
"    o---o---o---o---o---o---o---o  master\n"
"\t \\\n"
"\t  o---o---o---o---o  subsystem\n"
"\t\t\t   \\\n"
"\t\t\t    *---*---*  topic\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1022
msgid "If 'subsystem' is rebased against 'master', the following happens:"
msgstr "`subsystem` が `master` に対してリベースされる場合、以下が発生します:"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:1029
#, no-wrap
msgid ""
"    o---o---o---o---o---o---o---o  master\n"
"\t \\\t\t\t \\\n"
"\t  o---o---o---o---o\t  o'--o'--o'--o'--o'  subsystem\n"
"\t\t\t   \\\n"
"\t\t\t    *---*---*  topic\n"
msgstr ""
"    o---o---o---o---o---o---o---o  master\n"
"\t \\\t\t\t \\\n"
"\t  o---o---o---o---o\t  o'--o'--o'--o'--o'  subsystem\n"
"\t\t\t   \\\n"
"\t\t\t    *---*---*  topic\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1033
msgid ""
"If you now continue development as usual, and eventually merge 'topic' to "
"'subsystem', the commits from 'subsystem' will remain duplicated forever:"
msgstr ""
"これで、あなたは通常どおり開発を続行し、最終的に `topic` を `subsystem` に"
"マージすると、 以下のように、 `subsystem` からのコミットは永久に複製されたま"
"まになります:"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:1040
#, no-wrap
msgid ""
"    o---o---o---o---o---o---o---o  master\n"
"\t \\\t\t\t \\\n"
"\t  o---o---o---o---o\t  o'--o'--o'--o'--o'--M\t subsystem\n"
"\t\t\t   \\\t\t\t     /\n"
"\t\t\t    *---*---*-..........-*--*  topic\n"
msgstr ""
"    o---o---o---o---o---o---o---o  master\n"
"\t \\\t\t\t \\\n"
"\t  o---o---o---o---o\t  o'--o'--o'--o'--o'--M\t subsystem\n"
"\t\t\t   \\\t\t\t     /\n"
"\t\t\t    *---*---*-..........-*--*  topic\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1047
msgid ""
"Such duplicates are generally frowned upon because they clutter up history, "
"making it harder to follow.  To clean things up, you need to transplant the "
"commits on 'topic' to the new 'subsystem' tip, i.e., rebase 'topic'.  This "
"becomes a ripple effect: anyone downstream from 'topic' is forced to rebase "
"too, and so on!"
msgstr ""
"このような重複は、履歴が乱雑になり、追跡が困難になるため、一般的に眉をひそめ"
"られる行為です。これをクリーンアップするには、「topic」のコミットを新しい"
"「subsystem」の先端に移植する必要があります。つまり、「topic」をリベースする"
"必要があります。これは影響が波及します。「topic」の下流にいる人もリベースを余"
"儀なくされます！"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1049
msgid "There are two kinds of fixes, discussed in the following subsections:"
msgstr ""
"2種類の修正パターン(簡単な場合と難しい場合)があります。以下のサブセクションで"
"議論します:"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:1050
#, no-wrap
msgid "Easy case: The changes are literally the same."
msgstr "簡単な場合: 変更は文字通り同じ(same)"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1054
msgid ""
"This happens if the 'subsystem' rebase was a simple rebase and had no "
"conflicts."
msgstr ""
"これは、 `subsystem` のリベースが単純なリベースであり、競合がなかった場合に発"
"生します。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:1055
#, no-wrap
msgid "Hard case: The changes are not the same."
msgstr "難しい場合: 変更は同じではありません"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1062
msgid ""
"This happens if the 'subsystem' rebase had conflicts, or used `--"
"interactive` to omit, edit, squash, or fixup commits; or if the upstream "
"used one of `commit --amend`, `reset`, or a full history rewriting command "
"like https://github.com/newren/git-filter-repo[`filter-repo`]."
msgstr ""
"これは、「subsystem」のリベースで競合が発生した場合、または `--interactive` "
"を使用してコミットを省略(omit)、edit、squash、fixupした場合に発生します。また"
"は、アップストリームで  `commit --amend` や、 `reset` や、 https://github."
"com/newren/git-filter-repo[`filter-repo`] のような完全な履歴書き換えコマンド"
"のいずれかを使用した場合に発生します。"

#. type: Title ~
#: ../Documentation-sedout/git-rebase.txt:1065
#, no-wrap
msgid "The easy case"
msgstr "簡単な場合"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1070
msgid ""
"Only works if the changes (patch IDs based on the diff contents) on "
"'subsystem' are literally the same before and after the rebase 'subsystem' "
"did."
msgstr ""
"`subsystem` の変更点(diffの内容に基づくパッチID)がリベース `subsystem` の前と"
"後で文字通り同じである場合にのみ動作します。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1075
msgid ""
"In that case, the fix is easy because 'git rebase' knows to skip changes "
"that are already present in the new upstream (unless `--reapply-cherry-"
"picks` is given). So if you say (assuming you're on 'topic')"
msgstr ""
"その場合、 `git rebase` は新しいアップストリームにすでに存在する変更をスキッ"
"プすることを知っているため、修正は簡単です(`--reapply-cherry-picks` が指定さ"
"れていない場合)。 だから(あなたが「topic」にいると仮定して、)あなたが以下のよ"
"うにすれば、"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:1077
#, no-wrap
msgid "    $ git rebase subsystem\n"
msgstr "    $ git rebase subsystem\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1079
msgid "you will end up with the fixed history"
msgstr "あなたは修正された履歴で終わります。"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:1085
#, no-wrap
msgid ""
"    o---o---o---o---o---o---o---o  master\n"
"\t\t\t\t \\\n"
"\t\t\t\t  o'--o'--o'--o'--o'  subsystem\n"
"\t\t\t\t\t\t   \\\n"
"\t\t\t\t\t\t    *---*---*  topic\n"
msgstr ""
"    o---o---o---o---o---o---o---o  master\n"
"\t\t\t\t \\\n"
"\t\t\t\t  o'--o'--o'--o'--o'  subsystem\n"
"\t\t\t\t\t\t   \\\n"
"\t\t\t\t\t\t    *---*---*  topic\n"

#. type: Title ~
#: ../Documentation-sedout/git-rebase.txt:1089
#, no-wrap
msgid "The hard case"
msgstr "難しい場合"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1093
msgid ""
"Things get more complicated if the 'subsystem' changes do not exactly "
"correspond to the ones before the rebase."
msgstr ""
"`subsystem` の変更がリベース前の変更に正確に対応していない場合、事態はさらに"
"複雑になります。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1098
#, no-wrap
msgid ""
"While an \"easy case recovery\" sometimes appears to be successful\n"
"      even in the hard case, it may have unintended consequences.  For\n"
"      example, a commit that was removed via `git rebase\n"
"      --interactive` will be **resurrected**!\n"
msgstr ""
"「簡単な場合の回復」は、難しい場合でも成功するように見えることがありますが、\n"
"      意図しない結果をもたらす可能性があります。\n"
"      たとえば、 `git rebase --interactive`\n"
"      を介して削除されたコミットが「復活」します！\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1103
msgid ""
"The idea is to manually tell `git rebase` \"where the old 'subsystem' ended "
"and your 'topic' began\", that is, what the old merge base between them "
"was.  You will have to find a way to name the last commit of the old "
"'subsystem', for example:"
msgstr "考え方としては、「git rebase」に「古いsubsystemが終了し、あなたのtopicを開始した場所」、つまり、それらの間の古いマージベースが何であったかを手動で伝えることです。 あなたは古いsubsystemの最後のコミットに名前を付ける方法を見つける必要があります。以下に例を示します:"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1107
msgid ""
"With the 'subsystem' reflog: after `git fetch`, the old tip of 'subsystem' "
"is at `subsystem@{1}`.  Subsequent fetches will increase the number.  (See "
"linkgit:git-reflog[1].)"
msgstr ""
"`subsystem` reflogの場合: `git fetch` 後、`subsystem` の古い先端は "
"`subsystem@{1}` にあります。それ以降にフェッチすると、その数は増えます。 "
"(linkgit:git-reflog[1] を参照してください)。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1110
msgid ""
"Relative to the tip of 'topic': knowing that your 'topic' has three commits, "
"the old tip of 'subsystem' must be `topic~3`."
msgstr ""
"`topic` の先端に関連して: `topic` に3つのコミットがあることを知っているの"
"で、 `subsystem` の古い先端は `topic~3` でなければなりません。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1113
msgid ""
"You can then transplant the old `subsystem..topic` to the new tip by saying "
"(for the reflog case, and assuming you are on 'topic' already):"
msgstr ""
"次に、あなたは以下のように言って、古い `subsystem..topic` を新しい先端に移植"
"できます(reflogの場合、すでに `topic` にいると仮定します):"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:1115
#, no-wrap
msgid "    $ git rebase --onto subsystem subsystem@{1}\n"
msgstr "    $ git rebase --onto subsystem subsystem@{1}\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1120
msgid ""
"The ripple effect of a \"hard case\" recovery is especially bad: 'everyone' "
"downstream from 'topic' will now have to perform a \"hard case\" recovery "
"too!"
msgstr ""
"「悪い場合」のリカバリの波及効果は特に悪いです。「topic」の下流にある「全て」"
"で「悪い場合」のリカバリを実行する必要があります。"

#. type: Title -
#: ../Documentation-sedout/git-rebase.txt:1122
#, no-wrap
msgid "REBASING MERGES"
msgstr "REBASING MERGES"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1130
msgid ""
"The interactive rebase command was originally designed to handle individual "
"patch series. As such, it makes sense to exclude merge commits from the todo "
"list, as the developer may have merged the then-current `master` while "
"working on the branch, only to rebase all the commits onto `master` "
"eventually (skipping the merge commits)."
msgstr ""
"対話的リベースコマンドは、元々、個々のパッチシリーズを処理するために設計され"
"ました。そのため、開発者がブランチの作業中にその時点で最新の「master」をマー"
"ジした可能性があり、最終的にすべてのコミットを「master」にリベースする(マージ"
"コミットをスキップする)ため、マージコミットをtodoリストから除外することは理に"
"かなっています。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1134
msgid ""
"However, there are legitimate reasons why a developer may want to recreate "
"merge commits: to keep the branch structure (or \"commit topology\") when "
"working on multiple, inter-related branches."
msgstr ""
"ただし、開発者がマージコミットを再作成する正当な理由があります。それは複数の"
"相互に関連するブランチで作業するときに、ブランチ構造(または「コミットトポロ"
"ジ」）を維持するためです。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1139
msgid ""
"In the following example, the developer works on a topic branch that "
"refactors the way buttons are defined, and on another topic branch that uses "
"that refactoring to implement a \"Report a bug\" button. The output of `git "
"log --graph --format=%s -5` may look like this:"
msgstr ""
"次の例では、開発者はボタンの定義方法をリファクタリングするトピックブランチ"
"と、そのリファクタリングを使用して[バグの報告]ボタンを実装する別のトピックブ"
"ランチで作業します。 `git log --graph --format=%s -5` の出力は以下のようにな"
"ります:"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:1149
#, no-wrap
msgid ""
"*   Merge branch 'report-a-bug'\n"
"|\\\n"
"| * Add the feedback button\n"
"* | Merge branch 'refactor-button'\n"
"|\\ \\\n"
"| |/\n"
"| * Use the Button class for all buttons\n"
"| * Extract a generic Button class from the DownloadButton one\n"
msgstr ""
"*   Merge branch 'report-a-bug'\n"
"|\\\n"
"| * Add the feedback button\n"
"* | Merge branch 'refactor-button'\n"
"|\\ \\\n"
"| |/\n"
"| * Use the Button class for all buttons\n"
"| * Extract a generic Button class from the DownloadButton one\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1156
msgid ""
"The developer might want to rebase those commits to a newer `master` while "
"keeping the branch topology, for example when the first topic branch is "
"expected to be integrated into `master` much earlier than the second one, "
"say, to resolve merge conflicts with changes to the DownloadButton class "
"that made it into `master`."
msgstr ""
"開発者は、ブランチトポロジを維持しながら、これらのコミットを新しい `master` "
"にリベースしたい場合があります。たとえば、最初のトピックブランチが2番目のブラ"
"ンチよりもはるかに早く `master` に統合されると予想される場合、たとえば、マー"
"ジの競合を解決して、 `master` にしたDownloadButtonクラスへの変更を解決しま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1159
msgid ""
"This rebase can be performed using the `--rebase-merges` option.  It will "
"generate a todo list looking like this:"
msgstr ""
"このリベースは、 `--rebase-merges` オプションを使用して実行できます。 以下の"
"ようなToDoリストが生成されます:"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:1162
#: ../Documentation-sedout/git-rebase.txt:1243
#, no-wrap
msgid "label onto\n"
msgstr "label onto\n"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:1168
#, no-wrap
msgid ""
"# Branch: refactor-button\n"
"reset onto\n"
"pick 123456 Extract a generic Button class from the DownloadButton one\n"
"pick 654321 Use the Button class for all buttons\n"
"label refactor-button\n"
msgstr ""
"# Branch: refactor-button\n"
"reset onto\n"
"pick 123456 Extract a generic Button class from the DownloadButton one\n"
"pick 654321 Use the Button class for all buttons\n"
"label refactor-button\n"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:1173
#, no-wrap
msgid ""
"# Branch: report-a-bug\n"
"reset refactor-button # Use the Button class for all buttons\n"
"pick abcdef Add the feedback button\n"
"label report-a-bug\n"
msgstr ""
"# Branch: report-a-bug\n"
"reset refactor-button # Use the Button class for all buttons\n"
"pick abcdef Add the feedback button\n"
"label report-a-bug\n"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:1177
#, no-wrap
msgid ""
"reset onto\n"
"merge -C a1b2c3 refactor-button # Merge 'refactor-button'\n"
"merge -C 6f5e4d report-a-bug # Merge 'report-a-bug'\n"
msgstr ""
"reset onto\n"
"merge -C a1b2c3 refactor-button # Merge 'refactor-button'\n"
"merge -C 6f5e4d report-a-bug # Merge 'report-a-bug'\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1181
msgid ""
"In contrast to a regular interactive rebase, there are `label`, `reset` and "
"`merge` commands in addition to `pick` ones."
msgstr ""
"通常の対話的リベースとは対照的に、 `pick` コマンドに加えて `label` と "
"`reset` と`merge` コマンドがあります。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1189
msgid ""
"The `label` command associates a label with the current HEAD when that "
"command is executed. These labels are created as worktree-local refs (`refs/"
"rewritten/<label>`) that will be deleted when the rebase finishes. That way, "
"rebase operations in multiple worktrees linked to the same repository do not "
"interfere with one another. If the `label` command fails, it is rescheduled "
"immediately, with a helpful message how to proceed."
msgstr ""
"`label` コマンドは、そのコマンドが実行されるときに、ラベルを現在のHEADに関連"
"付けます。これらのラベルは、ワークツリーローカル参照(`refs/rewritten/"
"<label>`)として作成され、リベースが終了すると削除されます。こうすれば、同じリ"
"ポジトリにリンクされている複数のワークツリーでのリベース操作が相互に干渉する"
"ことはありません。 `label` コマンドが失敗した場合、すぐに再スケジュールされ、"
"続行する方法について役立つメッセージが表示されます。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1196
msgid ""
"The `reset` command resets the HEAD, index and worktree to the specified "
"revision. It is similar to an `exec git reset --hard <label>`, but refuses "
"to overwrite untracked files. If the `reset` command fails, it is "
"rescheduled immediately, with a helpful message how to edit the todo list "
"(this typically happens when a `reset` command was inserted into the todo "
"list manually and contains a typo)."
msgstr ""
"`reset` コマンドは、HEADとインデックスとワークツリーを指定されたリビジョンに"
"リセットします。 これは `exec git reset --hard <label>` に似ていますが、追跡"
"していないファイルの上書きを拒否します。 `reset` コマンドが失敗すると、すぐに"
"再スケジュールされ、todoリストを編集する方法がわかりやすく表示されます(これは"
"通常、 `reset` コマンドがtodoリストに手動で挿入され、タイプミスが含まれている"
"場合に発生します)。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1202
msgid ""
"The `merge` command will merge the specified revision(s) into whatever is "
"HEAD at that time. With `-C <original-commit>`, the commit message of the "
"specified merge commit will be used. When the `-C` is changed to a lower-"
"case `-c`, the message will be opened in an editor after a successful merge "
"so that the user can edit the message."
msgstr ""
"`merge` コマンドは、指定されたリビジョンをその時点でHEADであるものにマージし"
"ます。 `-C <original-commit>`を使用すると、指定されたマージコミットのコミット"
"メッセージが使用されます。  `-C` が小文字の `-c` に変更されると、ユーザーが"
"メッセージを編集できるように、マージが成功した後にメッセージがエディターで開"
"かれます。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1205
msgid ""
"If a `merge` command fails for any reason other than merge conflicts (i.e.  "
"when the merge operation did not even start), it is rescheduled immediately."
msgstr ""
"マージの競合以外の理由で `merge` コマンドが失敗した場合(つまり、マージ操作が"
"開始されなかった場合)、コマンドは直ちに再スケジュールされます。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1216
msgid ""
"By default, the `merge` command will use the `ort` merge strategy for "
"regular merges, and `octopus` for octopus merges.  One can specify a default "
"strategy for all merges using the `--strategy` argument when invoking "
"rebase, or can override specific merges in the interactive list of commands "
"by using an `exec` command to call `git merge` explicitly with a `--"
"strategy` argument.  Note that when calling `git merge` explicitly like "
"this, you can make use of the fact that the labels are worktree-local refs "
"(the ref `refs/rewritten/onto` would correspond to the label `onto`, for "
"example) in order to refer to the branches you want to merge."
msgstr ""
"デフォルトでは、「merge」コマンドは通常のマージには「ort」マージ戦略を使用"
"し、タコマージ(octopus merges)には「octopus」マージ戦略を使用します。リベース"
"を呼び出すときに `--strategy` 引数を使用して、すべてのマージのデフォルト戦略"
"を指定できます。または、 `exec` コマンドを使用して明示的に `--strategy` 引数"
"を伴った `git merge` を呼び出すことにより、コマンドの対話リスト内の特定のマー"
"ジをオーバーライドできます。注意:このように明示的に `git merge` を呼び出す場"
"合、マージするブランチを参照するために、ラベルがワークツリーローカル参照であ"
"るという事実(たとえば、 ref `refs/rewritten/onto` はラベル `onto` に対応しま"
"す)を利用できることに注意してください。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1220
msgid ""
"Note: the first command (`label onto`) labels the revision onto which the "
"commits are rebased; The name `onto` is just a convention, as a nod to the "
"`--onto` option."
msgstr ""
"注意: 最初のコマンド(`label onto`)は、コミットがリベースされるリビジョンにラ"
"ベルを付けます。 `onto`という名前は単なる慣例で、 `--onto` オプションにちなん"
"でいます。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1227
msgid ""
"It is also possible to introduce completely new merge commits from scratch "
"by adding a command of the form `merge <merge-head>`. This form will "
"generate a tentative commit message and always open an editor to let the "
"user edit it. This can be useful e.g. when a topic branch turns out to "
"address more than a single concern and wants to be split into two or even "
"more topic branches. Consider this todo list:"
msgstr ""
"`merge <merge-head>` の形式のコマンドを追加することにより、完全に新しいマージ"
"コミットを最初から導入することもできます。この形式は、暫定的なコミットメッ"
"セージを生成し、常にエディターを開いてユーザーが編集できるようにします。これ"
"は便利です。例えば、トピックブランチが複数の懸念事項に対処していることが判明"
"し、2つ以上のトピックブランチに分割したい場合です。以下のToDoリストを検討して"
"みてください:"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:1234
#, no-wrap
msgid ""
"pick 192837 Switch from GNU Makefiles to CMake\n"
"pick 5a6c7e Document the switch to CMake\n"
"pick 918273 Fix detection of OpenSSL in CMake\n"
"pick afbecd http: add support for TLS v1.3\n"
"pick fdbaec Fix detection of cURL in CMake on Windows\n"
msgstr ""
"pick 192837 Switch from GNU Makefiles to CMake\n"
"pick 5a6c7e Document the switch to CMake\n"
"pick 918273 Fix detection of OpenSSL in CMake\n"
"pick afbecd http: add support for TLS v1.3\n"
"pick fdbaec Fix detection of cURL in CMake on Windows\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1240
msgid ""
"The one commit in this list that is not related to CMake may very well have "
"been motivated by working on fixing all those bugs introduced by switching "
"to CMake, but it addresses a different concern. To split this branch into "
"two topic branches, the todo list could be edited like this:"
msgstr ""
"CMakeに関連しないこのリストの1つのコミットは、CMakeに切り替えることによって発"
"生したすべてのバグの修正に取り組むことによって動機付けられた可能性があります"
"が、しかし、それは別の懸念に対処します。このブランチを2つのトピックブランチに"
"分割するには、ToDoリストを以下のように編集できます:"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:1246
#, no-wrap
msgid ""
"pick afbecd http: add support for TLS v1.3\n"
"label tlsv1.3\n"
msgstr ""
"pick afbecd http: add support for TLS v1.3\n"
"label tlsv1.3\n"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:1253
#, no-wrap
msgid ""
"reset onto\n"
"pick 192837 Switch from GNU Makefiles to CMake\n"
"pick 918273 Fix detection of OpenSSL in CMake\n"
"pick fdbaec Fix detection of cURL in CMake on Windows\n"
"pick 5a6c7e Document the switch to CMake\n"
"label cmake\n"
msgstr ""
"reset onto\n"
"pick 192837 Switch from GNU Makefiles to CMake\n"
"pick 918273 Fix detection of OpenSSL in CMake\n"
"pick fdbaec Fix detection of cURL in CMake on Windows\n"
"pick 5a6c7e Document the switch to CMake\n"
"label cmake\n"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:1257
#, no-wrap
msgid ""
"reset onto\n"
"merge tlsv1.3\n"
"merge cmake\n"
msgstr ""
"reset onto\n"
"merge tlsv1.3\n"
"merge cmake\n"

#. type: Title -
#: ../Documentation-sedout/git-rebase.txt:1260
#, no-wrap
msgid "CONFIGURATION"
msgstr "CONFIGURATION"

#. type: Title -
#: ../Documentation-sedout/git-rebase.txt:1268
#, no-wrap
msgid "GIT"
msgstr "GIT"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1269
msgid "Part of the linkgit:git[1] suite"
msgstr "Part of the linkgit:git[1] suite"
