# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 0.0\n"
"POT-Creation-Date: 2022-02-09 05:55+0900\n"
"PO-Revision-Date: 2022-03-01 04:07+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/git-rebase.txt:2
#, no-wrap
msgid "git-rebase(1)"
msgstr "git-rebase(1)"

#. type: Title -
#: ../Documentation-sedout/git-rebase.txt:5
#, no-wrap
msgid "NAME"
msgstr "NAME"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:7
msgid "git-rebase - Reapply commits on top of another base tip"
msgstr "git-rebase - 別のベースの先端のその先頭にコミットを再適用します"

#. type: Title -
#: ../Documentation-sedout/git-rebase.txt:9
#, no-wrap
msgid "SYNOPSIS"
msgstr "SYNOPSIS"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:16
#, no-wrap
msgid ""
"'git rebase' [-i | --interactive] [<options>] [--exec <cmd>]\n"
"\t[--onto <newbase> | --keep-base] [<upstream> [<branch>]]\n"
"'git rebase' [-i | --interactive] [<options>] [--exec <cmd>] [--onto <newbase>]\n"
"\t--root [<branch>]\n"
"'git rebase' (--continue | --skip | --abort | --quit | --edit-todo | --show-current-patch)\n"
msgstr ""
"'git rebase' [-i | --interactive] [<options>] [--exec <cmd>]\n"
"\t[--onto <newbase> | --keep-base] [<upstream> [<branch>]]\n"
"'git rebase' [-i | --interactive] [<options>] [--exec <cmd>] [--onto <newbase>]\n"
"\t--root [<branch>]\n"
"'git rebase' (--continue | --skip | --abort | --quit | --edit-todo | --show-current-patch)\n"

#. type: Title -
#: ../Documentation-sedout/git-rebase.txt:18
#, no-wrap
msgid "DESCRIPTION"
msgstr "DESCRIPTION"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:22
msgid ""
"If <branch> is specified, 'git rebase' will perform an automatic `git switch "
"<branch>` before doing anything else.  Otherwise it remains on the current "
"branch."
msgstr "<branch>が指定されている場合、 'git rebase' は他の処理を行う前に自動で `git switch <branch>` を実行します。それ以外の場合は、現在のブランチに残ります。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:28
msgid ""
"If <upstream> is not specified, the upstream configured in branch.<name>."
"remote and branch.<name>.merge options will be used (see linkgit:git-"
"config[1] for details) and the `--fork-point` option is assumed.  If you are "
"currently not on any branch or if the current branch does not have a "
"configured upstream, the rebase will abort."
msgstr "<upstream> が指定されていない場合、 branch.<name>.remote と branch.<name>.merge オプションで構成されたアップストリーム(詳細は linkgit:git-config[1] を参照)および `--fork-point` オプションが想定されています。現在のブランチを使用していない場合、または現在のブランチにアップストリームが構成されていない場合、リベースは中止されます。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:35
msgid ""
"All changes made by commits in the current branch but that are not in "
"<upstream> are saved to a temporary area.  This is the same set of commits "
"that would be shown by `git log <upstream>..HEAD`; or by `git log "
"'fork_point'..HEAD`, if `--fork-point` is active (see the description on `--"
"fork-point` below); or by `git log HEAD`, if the `--root` option is "
"specified."
msgstr "現在のブランチでコミットによって行われたが、<upstream>にないすべての変更は、一時領域に保存されます。 これは `git log <upstream>..HEAD` で表示されるのと同じコミットのセットで、または `--fork-point` がアクティブな場合 `git log 'fork_point'..HEAD` で表示されるのと同じコミットのセットで、または `--root` オプションが指定されている場合 `git log HEAD` で表示されるのと同じコミットのセットです。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:40
msgid ""
"The current branch is reset to <upstream>, or <newbase> if the --onto option "
"was supplied.  This has the exact same effect as `git reset --hard "
"<upstream>` (or <newbase>).  ORIG_HEAD is set to point at the tip of the "
"branch before the reset."
msgstr "現在のブランチは<upstream>にリセットされ、または `--onto` オプションが指定されている場合は<newbase>にリセットされます。これは、 `git reset --hard <upstream>` (または<newbase>)とまったく同じ効果があります。 ORIG_HEADは、リセット前にブランチの先端を指すように設定されています。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:46
msgid ""
"The commits that were previously saved into the temporary area are then "
"reapplied to the current branch, one by one, in order. Note that any commits "
"in HEAD which introduce the same textual changes as a commit in HEAD.."
"<upstream> are omitted (i.e., a patch already accepted upstream with a "
"different commit message or timestamp will be skipped)."
msgstr "以前に一時領域に保存されたコミットは、現在のブランチに1つずつ順番に再適用されます。注意: `HEAD..<upstream>` でのコミットと同一のテキスト変更を導入するHEADでのコミットは省略されることに注意してください(つまり、異なるコミットメッセージまたはタイムスタンプで、アップストリームで既に受け入れ済のパッチはスキップされます)。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:53
msgid ""
"It is possible that a merge failure will prevent this process from being "
"completely automatic.  You will have to resolve any such merge failure and "
"run `git rebase --continue`.  Another option is to bypass the commit that "
"caused the merge failure with `git rebase --skip`.  To check out the "
"original <branch> and remove the .git/rebase-apply working files, use the "
"command `git rebase --abort` instead."
msgstr "マージに失敗すると、このプロセスが完全には自動で行われなくなる事があります。あなたは、このようなマージの失敗を解決し、そして `git rebase --continue` を実行する必要があります。 別のオプションとしては、 `git rebase --skip` でマージの失敗を引き起こしたコミットをバイパスすることです。そして、元の<branch>をチェックアウトし、`.git/rebase-apply` 作業ファイルを削除するには、代わりにコマンド `git rebase --abort` を使用します。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:55
msgid ""
"Assume the following history exists and the current branch is \"topic\":"
msgstr "以下の履歴が存在し、現在のブランチが「topic」であると想定します:"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:60
#, no-wrap
msgid ""
"          A---B---C topic\n"
"         /\n"
"    D---E---F---G master\n"
msgstr ""
"          A---B---C topic\n"
"         /\n"
"    D---E---F---G master\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:63
msgid "From this point, the result of either of the following commands:"
msgstr "この時点で、以下のコマンドのどちらかを実行します:"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:67
#, no-wrap
msgid ""
"    git rebase master\n"
"    git rebase master topic\n"
msgstr ""
"    git rebase master\n"
"    git rebase master topic\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:69
msgid "would be:"
msgstr "そうすると以下のようになります:"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:74
#, no-wrap
msgid ""
"                  A'--B'--C' topic\n"
"                 /\n"
"    D---E---F---G master\n"
msgstr ""
"                  A'--B'--C' topic\n"
"                 /\n"
"    D---E---F---G master\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:79
#, no-wrap
msgid ""
"*NOTE:* The latter form is just a short-hand of `git checkout topic`\n"
"followed by `git rebase master`. When rebase exits `topic` will\n"
"remain the checked-out branch.\n"
msgstr ""
"*注意:* 後者の形式は、`git checkout topic` の後に `git rebase master` が続く省略形です。\n"
"リベースが終了すると、\n"
"`topic` はチェックアウトされたブランチのままになります。\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:86
msgid ""
"If the upstream branch already contains a change you have made (e.g., "
"because you mailed a patch which was applied upstream), then that commit "
"will be skipped and warnings will be issued (if the `merge` backend is "
"used).  For example, running `git rebase master` on the following history "
"(in which `A'` and `A` introduce the same set of changes, but have different "
"committer information):"
msgstr "(たとえば、アップストリームに適用されたパッチをメールで送信したため)アップストリームブランチにすでに行った変更が含まれている場合、そのコミットはスキップされ、警告が発行されます(`merge` バックエンドが使用されている場合)。たとえば、以下の履歴で `git rebase master` を実行します(`A'` と `A` は同じ変更セットを導入しますが、コミッター情報は異なります):"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:91
#, no-wrap
msgid ""
"          A---B---C topic\n"
"         /\n"
"    D---E---A'---F master\n"
msgstr ""
"          A---B---C topic\n"
"         /\n"
"    D---E---A'---F master\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:94
msgid "will result in:"
msgstr "その結果は"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:99
#, no-wrap
msgid ""
"                   B'---C' topic\n"
"                  /\n"
"    D---E---A'---F master\n"
msgstr ""
"                   B'---C' topic\n"
"                  /\n"
"    D---E---A'---F master\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:104
msgid ""
"Here is how you would transplant a topic branch based on one branch to "
"another, to pretend that you forked the topic branch from the latter branch, "
"using `rebase --onto`."
msgstr "これは、あるブランチに基づいてトピックブランチを別のブランチに移植し、 `rebase --onto` を使用して、トピックブランチを後者のブランチからフォークしたふりをする方法です。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:108
msgid ""
"First let's assume your 'topic' is based on branch 'next'.  For example, a "
"feature developed in 'topic' depends on some functionality which is found in "
"'next'."
msgstr "まず、「topic」がブランチ「next」に基づいているとしましょう。 たとえば「topic」で開発された機能は、「next」にあるいくつかの機能に依存しています。"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:115
#, no-wrap
msgid ""
"    o---o---o---o---o  master\n"
"         \\\n"
"          o---o---o---o---o  next\n"
"                           \\\n"
"                            o---o---o  topic\n"
msgstr ""
"    o---o---o---o---o  master\n"
"         \\\n"
"          o---o---o---o---o  next\n"
"                           \\\n"
"                            o---o---o  topic\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:120
msgid ""
"We want to make 'topic' forked from branch 'master'; for example, because "
"the functionality on which 'topic' depends was merged into the more stable "
"'master' branch. We want our tree to look like this:"
msgstr "我々は 'topic' をブランチ 'master' からフォークさせたいのです。たとえば「topic」が依存する機能が、より安定した「master」ブランチにマージされたためです。 ツリーを以下のようにしたいわけです:"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:127
#, no-wrap
msgid ""
"    o---o---o---o---o  master\n"
"        |            \\\n"
"        |             o'--o'--o'  topic\n"
"         \\\n"
"          o---o---o---o---o  next\n"
msgstr ""
"    o---o---o---o---o  master\n"
"        |            \\\n"
"        |             o'--o'--o'  topic\n"
"         \\\n"
"          o---o---o---o---o  next\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:130
msgid "We can get this using the following command:"
msgstr "これは、以下のコマンドを使用して取得できます:"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:132
#, no-wrap
msgid "    git rebase --onto master next topic\n"
msgstr "    git rebase --onto master next topic\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:136
msgid ""
"Another example of --onto option is to rebase part of a branch.  If we have "
"the following situation:"
msgstr "`--onto` オプションの別の例は、ブランチの一部をリベースすることです。 以下のような状況の場合:"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:143
#, no-wrap
msgid ""
"                            H---I---J topicB\n"
"                           /\n"
"                  E---F---G  topicA\n"
"                 /\n"
"    A---B---C---D  master\n"
msgstr ""
"                            H---I---J topicB\n"
"                           /\n"
"                  E---F---G  topicA\n"
"                 /\n"
"    A---B---C---D  master\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:146
#: ../Documentation-sedout/git-rebase.txt:169
msgid "then the command"
msgstr "そして、以下のコマンドを実行します"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:148
#, no-wrap
msgid "    git rebase --onto master topicA topicB\n"
msgstr "    git rebase --onto master topicA topicB\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:150
msgid "would result in:"
msgstr "そうすると結果は以下のようになります:"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:157
#, no-wrap
msgid ""
"                 H'--I'--J'  topicB\n"
"                /\n"
"                | E---F---G  topicA\n"
"                |/\n"
"    A---B---C---D  master\n"
msgstr ""
"                 H'--I'--J'  topicB\n"
"                /\n"
"                | E---F---G  topicA\n"
"                |/\n"
"    A---B---C---D  master\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:160
msgid "This is useful when topicB does not depend on topicA."
msgstr "これは、topicBがtopicAに依存していない場合に役立ちます。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:163
msgid ""
"A range of commits could also be removed with rebase.  If we have the "
"following situation:"
msgstr "コミットの範囲は、リベースで削除することもできます。以下の状況の場合:"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:166
#, no-wrap
msgid "    E---F---G---H---I---J  topicA\n"
msgstr "    E---F---G---H---I---J  topicA\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:171
#, no-wrap
msgid "    git rebase --onto topicA~5 topicA~3 topicA\n"
msgstr "    git rebase --onto topicA~5 topicA~3 topicA\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:173
msgid "would result in the removal of commits F and G:"
msgstr "そうすると、以下のようにコミットFとGが削除されます:"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:176
#, no-wrap
msgid "    E---H'---I'---J'  topicA\n"
msgstr "    E---H'---I'---J'  topicA\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:181
msgid ""
"This is useful if F and G were flawed in some way, or should not be part of "
"topicA.  Note that the argument to --onto and the <upstream> parameter can "
"be any valid commit-ish."
msgstr "これは、FとGに何らかの欠陥がある場合、または、topicAの一部であってはならない場合に役立ちます。注意: `--onto` と<upstream>パラメーターの引数は、任意の有効なコミットっぽい何か(commit-ish)にすることができることに注意してください。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:187
msgid ""
"In case of conflict, 'git rebase' will stop at the first problematic commit "
"and leave conflict markers in the tree.  You can use 'git diff' to locate "
"the markers (<<<<<<) and make edits to resolve the conflict.  For each file "
"you edit, you need to tell Git that the conflict has been resolved, "
"typically this would be done with"
msgstr "競合が発生した場合、「git rebase」は最初の問題のあるコミットで停止し、ツリーに競合マーカーを残します。 'git diff' を使用して、マーカー(<<<<<<)を見つけ、編集して競合を解決できます。編集するファイルごとに、競合が解決されたことをGitに通知する必要があります。通常、これは以下の方法で行います。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:190
#, no-wrap
msgid "    git add <filename>\n"
msgstr "    git add <filename>\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:194
msgid ""
"After resolving the conflict manually and updating the index with the "
"desired resolution, you can continue the rebasing process with"
msgstr "競合を手動で解決し、あなたが欲する解決策でインデックスを更新した後、以下のコマンドでリベースプロセスを続行できます。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:197
#, no-wrap
msgid "    git rebase --continue\n"
msgstr "    git rebase --continue\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:200
msgid "Alternatively, you can undo the 'git rebase' with"
msgstr "あるいは、「git rebase」を元に戻す(undo)こともできます"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:203
#, no-wrap
msgid "    git rebase --abort\n"
msgstr "    git rebase --abort\n"

#. type: Title -
#: ../Documentation-sedout/git-rebase.txt:205
#, no-wrap
msgid "OPTIONS"
msgstr "OPTIONS"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:206
#, no-wrap
msgid "`--onto <newbase>`"
msgstr "`--onto <newbase>`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:211
msgid ""
"Starting point at which to create the new commits. If the --onto option is "
"not specified, the starting point is <upstream>.  May be any valid commit, "
"and not just an existing branch name."
msgstr "新しいコミットを作成する開始点。 `--onto` オプションが指定されていない場合、開始点は<upstream>です。これは、既存のブランチ名だけでなく、任意の有効なコミットである可能性があります。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:215
msgid ""
"As a special case, you may use \"A\\...B\" as a shortcut for the merge base "
"of A and B if there is exactly one merge base. You can leave out at most one "
"of A and B, in which case it defaults to HEAD."
msgstr "特別な場合として、マージベースが1つしかない場合は、AとBのマージベースのショートカットとして \"A\\...B\" を使用できます。最大でAとBのいずれかを省略できます。その場合、デフォルトでHEADになります。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:216
#, no-wrap
msgid "`--keep-base`"
msgstr "`--keep-base`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:221
msgid ""
"Set the starting point at which to create the new commits to the merge base "
"of <upstream> <branch>. Running 'git rebase --keep-base <upstream> <branch>' "
"is equivalent to running 'git rebase --onto <upstream>... <upstream>'."
msgstr "<upstream> <branch> のマージベースへの新しいコミットを作成する開始点を設定します。 `git rebase --keep-base <upstream> <branch>` を実行することは `git rebase --onto <upstream>... <upstream>` を実行することと同じです。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:226
msgid ""
"This option is useful in the case where one is developing a feature on top "
"of an upstream branch. While the feature is being worked on, the upstream "
"branch may advance and it may not be the best idea to keep rebasing on top "
"of the upstream but to keep the base commit as-is."
msgstr "このオプションは、アップストリームブランチの先頭で機能を開発している場合に役立ちます。この機能が働いている間に、アップストリームのブランチが進むことがあり、アップストリームの先頭にリベースを続けるのは得策ではなく、ベースのコミットをそのままにしておくことがあります。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:231
msgid ""
"Although both this option and --fork-point find the merge base between "
"<upstream> and <branch>, this option uses the merge base as the _starting "
"point_ on which new commits will be created, whereas --fork-point uses the "
"merge base to determine the _set of commits_ which will be rebased."
msgstr "このオプションと `--fork-point` はどちらも<upstream>と<branch>の間のマージベースを検索します。しかし、このオプションは新しいコミットが作成される「開始点」としてマージベースを使用します。一方 `--fork-point` はマージベースを使用して、リベースされる「コミットのセット」を決定します。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:233
#: ../Documentation-sedout/git-rebase.txt:264
#: ../Documentation-sedout/git-rebase.txt:283
#: ../Documentation-sedout/git-rebase.txt:304
#: ../Documentation-sedout/git-rebase.txt:325
#: ../Documentation-sedout/git-rebase.txt:333
#: ../Documentation-sedout/git-rebase.txt:356
#: ../Documentation-sedout/git-rebase.txt:368
#: ../Documentation-sedout/git-rebase.txt:377
#: ../Documentation-sedout/git-rebase.txt:422
#: ../Documentation-sedout/git-rebase.txt:456
#: ../Documentation-sedout/git-rebase.txt:479
#: ../Documentation-sedout/git-rebase.txt:492
#: ../Documentation-sedout/git-rebase.txt:499
#: ../Documentation-sedout/git-rebase.txt:511
#: ../Documentation-sedout/git-rebase.txt:551
#: ../Documentation-sedout/git-rebase.txt:576
#: ../Documentation-sedout/git-rebase.txt:588
#: ../Documentation-sedout/git-rebase.txt:608
msgid "See also INCOMPATIBLE OPTIONS below."
msgstr "以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:234
#, no-wrap
msgid "<upstream>"
msgstr "<upstream>"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:238
msgid ""
"Upstream branch to compare against.  May be any valid commit, not just an "
"existing branch name. Defaults to the configured upstream for the current "
"branch."
msgstr "比較するアップストリームブランチ。既存のブランチ名だけでなく、任意の有効なコミットである可能性があります。デフォルトは、現在のブランチ用に構成されたアップストリームです。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:239
#, no-wrap
msgid "<branch>"
msgstr "<branch>"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:241
msgid "Working branch; defaults to HEAD."
msgstr "作業するブランチ。デフォルトはHEADです。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:242
#, no-wrap
msgid "`--continue`"
msgstr "`--continue`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:244
msgid "Restart the rebasing process after having resolved a merge conflict."
msgstr "マージの競合を解決した後、リベースプロセスを再開します。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:245
#, no-wrap
msgid "`--abort`"
msgstr "`--abort`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:251
msgid ""
"Abort the rebase operation and reset HEAD to the original branch. If "
"<branch> was provided when the rebase operation was started, then HEAD will "
"be reset to <branch>. Otherwise HEAD will be reset to where it was when the "
"rebase operation was started."
msgstr "リベース操作を中止(abort)し、HEADを元のブランチにリセットします。リベース操作の開始時に<branch>が指定された場合、HEADは<branch>にリセットされます。それ以外の場合、HEADはリベース操作が開始されたときの位置にリセットされます。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:252
#, no-wrap
msgid "`--quit`"
msgstr "`--quit`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:257
msgid ""
"Abort the rebase operation but HEAD is not reset back to the original "
"branch. The index and working tree are also left unchanged as a result. If a "
"temporary stash entry was created using --autostash, it will be saved to the "
"stash list."
msgstr "リベース操作を中止(abort)しますが、HEADは元のブランチにリセットされません。その結果、インデックスと作業ツリーも変更されません。 `--autostash` を使用して一時的なstashエントリが作成された場合、それはstashリストに保存されます。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:258
#: ../Documentation-sedout/git-rebase.txt:636
#, no-wrap
msgid "`--apply`"
msgstr "`--apply`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:262
msgid ""
"Use applying strategies to rebase (calling `git-am` internally).  This "
"option may become a no-op in the future once the merge backend handles "
"everything the apply one does."
msgstr "適用戦略(applying strategies)を使用してリベースします(内部で `git-am` を呼び出します)。このオプションは、マージバックエンドがapplyのすべてを処理すると、将来的には動作しなくなる可能性があります。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:265
#, no-wrap
msgid "`--empty={drop,keep,ask}`"
msgstr "`--empty={drop,keep,ask}`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:276
msgid ""
"How to handle commits that are not empty to start and are not clean cherry-"
"picks of any upstream commit, but which become empty after rebasing (because "
"they contain a subset of already upstream changes).  With drop (the "
"default), commits that become empty are dropped.  With keep, such commits "
"are kept.  With ask (implied by --interactive), the rebase will halt when an "
"empty commit is applied allowing you to choose whether to drop it, edit "
"files more, or just commit the empty changes.  Other options, like --exec, "
"will use the default of drop unless -i/--interactive is explicitly specified."
msgstr "任意のアップストリームコミットの、開始時は空ではなく、かつ、クリーンでは無いチェリーピックであるが、(すでにアップストリームの変更のサブセットが含まれているため、)リベース後に空になるコミットを処理する方法。dropを使用すると、空になるコミットはドロップされます(これがデフォルトです)。keepを使用すると、そのようなコミットは保持されます。 ask を使用すると、空のコミットが適用されるとリベースが停止し、ドロップするか、ファイルをさらに編集するか、空の変更をコミットするかを選択できます(`--interactive` の指定を含んでいます)。`--exec` などの他のオプションでは、-i / -interactiveが明示的に指定されていない限り、デフォルトのドロップが使用されます。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:281
msgid ""
"Note that commits which start empty are kept (unless --no-keep-empty is "
"specified), and commits which are clean cherry-picks (as determined by `git "
"log --cherry-mark ...`) are detected and dropped as a preliminary step "
"(unless --reapply-cherry-picks is passed)."
msgstr "注意: (`--no-keep-empty` が指定されていない場合、)空で開始するコミットは保持され、(`--reapply-cherry-picks` が渡されない限り)準備ステップとして、( `git log --cherry-mark ...` によって決定される)クリーンなチェリーピックであるコミットが検出・ドロップされます。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:284
#: ../Documentation-sedout/git-rebase.txt:651
#, no-wrap
msgid "`--no-keep-empty`"
msgstr "`--no-keep-empty`"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:285
#, no-wrap
msgid "`--keep-empty`"
msgstr "`--keep-empty`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:293
msgid ""
"Do not keep commits that start empty before the rebase (i.e. that do not "
"change anything from its parent) in the result.  The default is to keep "
"commits which start empty, since creating such commits requires passing the "
"--allow-empty override flag to `git commit`, signifying that a user is very "
"intentionally creating such a commit and thus wants to keep it."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:299
msgid ""
"Usage of this flag will probably be rare, since you can get rid of commits "
"that start empty by just firing up an interactive rebase and removing the "
"lines corresponding to the commits you don't want.  This flag exists as a "
"convenient shortcut, such as for cases where external tools generate many "
"empty commits and you want them all removed."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:302
msgid ""
"For commits which do not start empty but become empty after rebasing, see "
"the --empty flag."
msgstr "空では開始されないが、リベース後に空になるコミットについては、 `--empty` フラグを参照してください。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:305
#: ../Documentation-sedout/git-rebase.txt:653
#, no-wrap
msgid "`--reapply-cherry-picks`"
msgstr "`--reapply-cherry-picks`"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:306
#, no-wrap
msgid "`--no-reapply-cherry-picks`"
msgstr "`--no-reapply-cherry-picks`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:312
msgid ""
"Reapply all clean cherry-picks of any upstream commit instead of "
"preemptively dropping them. (If these commits then become empty after "
"rebasing, because they contain a subset of already upstream changes, the "
"behavior towards them is controlled by the `--empty` flag.)"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:320
msgid ""
"By default (or if `--no-reapply-cherry-picks` is given), these commits will "
"be automatically dropped.  Because this necessitates reading all upstream "
"commits, this can be expensive in repos with a large number of upstream "
"commits that need to be read.  When using the `merge` backend, warnings will "
"be issued for each dropped commit (unless `--quiet` is given). Advice will "
"also be issued unless `advice.skippedCherryPicks` is set to false (see "
"linkgit:git-config[1])."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:323
msgid ""
"`--reapply-cherry-picks` allows rebase to forgo reading all upstream "
"commits, potentially improving performance."
msgstr "`--reapply-cherry-picks` を使用すると、リベースはすべてのアップストリームコミットの読み取りを放棄できるため、パフォーマンスが向上する可能性があります。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:326
#: ../Documentation-sedout/git-rebase.txt:645
#, no-wrap
msgid "`--allow-empty-message`"
msgstr "`--allow-empty-message`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:331
msgid ""
"No-op.  Rebasing commits with an empty message used to fail and this option "
"would override that behavior, allowing commits with empty messages to be "
"rebased.  Now commits with an empty message do not cause rebasing to halt."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:334
#, no-wrap
msgid "`--skip`"
msgstr "`--skip`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:336
msgid "Restart the rebasing process by skipping the current patch."
msgstr "現在のパッチをスキップして、リベースプロセスを再開します。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:337
#: ../Documentation-sedout/git-rebase.txt:654
#, no-wrap
msgid "`--edit-todo`"
msgstr "`--edit-todo`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:339
msgid "Edit the todo list during an interactive rebase."
msgstr "対話的リベース中にToDoリストを編集します。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:340
#, no-wrap
msgid "`--show-current-patch`"
msgstr "`--show-current-patch`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:344
msgid ""
"Show the current patch in an interactive rebase or when rebase is stopped "
"because of conflicts. This is the equivalent of `git show REBASE_HEAD`."
msgstr "対話的なリベース、または、競合のためにリベースが停止されたときに、現在のパッチを表示します。 これは `git show REBASE_HEAD` と同等です。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:345
#, no-wrap
msgid "`-m`"
msgstr "`-m`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:346
#: ../Documentation-sedout/git-rebase.txt:642
#, no-wrap
msgid "`--merge`"
msgstr "`--merge`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:348
msgid "Using merging strategies to rebase (default)."
msgstr "マージ戦略(merging strategies)を使用してリベースします(デフォルト)。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:354
msgid ""
"Note that a rebase merge works by replaying each commit from the working "
"branch on top of the <upstream> branch.  Because of this, when a merge "
"conflict happens, the side reported as 'ours' is the so-far rebased series, "
"starting with <upstream>, and 'theirs' is the working branch.  In other "
"words, the sides are swapped."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:357
#, no-wrap
msgid "`-s <strategy>`"
msgstr "`-s <strategy>`"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:358
#, no-wrap
msgid "`--strategy=<strategy>`"
msgstr "`--strategy=<strategy>`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:361
msgid ""
"Use the given merge strategy, instead of the default `ort`.  This implies `--"
"merge`."
msgstr "デフォルトの `ort` の代わりに、指定のマージ戦略を使用します。 このオプションは `--merge` の指定を含んでいます。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:366
msgid ""
"Because 'git rebase' replays each commit from the working branch on top of "
"the <upstream> branch using the given strategy, using the 'ours' strategy "
"simply empties all patches from the <branch>, which makes little sense."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:369
#, no-wrap
msgid "`-X <strategy-option>`"
msgstr "`-X <strategy-option>`"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:370
#, no-wrap
msgid "`--strategy-option=<strategy-option>`"
msgstr "`--strategy-option=<strategy-option>`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:375
msgid ""
"Pass the <strategy-option> through to the merge strategy.  This implies `--"
"merge` and, if no strategy has been specified, `-s ort`.  Note the reversal "
"of 'ours' and 'theirs' as noted above for the `-m` option."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:378
#, no-wrap
msgid "`--rerere-autoupdate`"
msgstr "`--rerere-autoupdate`"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:379
#, no-wrap
msgid "`--no-rerere-autoupdate`"
msgstr "`--no-rerere-autoupdate`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:382
msgid ""
"Allow the rerere mechanism to update the index with the result of auto-"
"conflict resolution if possible."
msgstr "可能であれば、rerereメカニズムが自動競合解決の結果でインデックスを更新できるようにします。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:383
#, no-wrap
msgid "`-S[<keyid>]`"
msgstr "`-S[<keyid>]`"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:384
#, no-wrap
msgid "`--gpg-sign[=<keyid>]`"
msgstr "`--gpg-sign[=<keyid>]`"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:385
#, no-wrap
msgid "`--no-gpg-sign`"
msgstr "`--no-gpg-sign`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:391
msgid ""
"GPG-sign commits. The `keyid` argument is optional and defaults to the "
"committer identity; if specified, it must be stuck to the option without a "
"space. `--no-gpg-sign` is useful to countermand both `commit.gpgSign` "
"configuration variable, and earlier `--gpg-sign`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:392
#, no-wrap
msgid "`-q`"
msgstr "`-q`"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:393
#, no-wrap
msgid "`--quiet`"
msgstr "`--quiet`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:395
msgid "Be quiet. Implies --no-stat."
msgstr "静かにします。このオプションは `--no-stat` を含んでいます。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:396
#, no-wrap
msgid "`-v`"
msgstr "`-v`"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:397
#, no-wrap
msgid "`--verbose`"
msgstr "`--verbose`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:399
msgid "Be verbose. Implies --stat."
msgstr "おしゃべりになります。 `--stat` を含んでいます。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:400
#, no-wrap
msgid "`--stat`"
msgstr "`--stat`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:403
msgid ""
"Show a diffstat of what changed upstream since the last rebase. The diffstat "
"is also controlled by the configuration option rebase.stat."
msgstr "最後のリベース以降にアップストリームで変更されたもののdiffstatを表示します。 diffstatは、構成オプション rebase.stat によっても制御されます。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:404
#, no-wrap
msgid "`-n`"
msgstr "`-n`"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:405
#, no-wrap
msgid "`--no-stat`"
msgstr "`--no-stat`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:407
msgid "Do not show a diffstat as part of the rebase process."
msgstr "リベースプロセスの一部としてdiffstatを表示しないでください。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:408
#, no-wrap
msgid "`--no-verify`"
msgstr "`--no-verify`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:410
msgid ""
"This option bypasses the pre-rebase hook.  See also linkgit:githooks[5]."
msgstr "このオプションは、リベース前のフックをバイパスします。 linkgit:githooks[5] も参照してください。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:411
#, no-wrap
msgid "`--verify`"
msgstr "`--verify`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:414
msgid ""
"Allows the pre-rebase hook to run, which is the default.  This option can be "
"used to override --no-verify.  See also linkgit:githooks[5]."
msgstr "プリリベースフック(pre-rebase hook)の実行を許可します。これがデフォルトです。このオプションは、 `--no-verify` をオーバーライドするために使用できます。 linkgit:githooks[5] も参照してください。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:415
#, no-wrap
msgid "`-C<n>`"
msgstr "`-C<n>`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:420
msgid ""
"Ensure at least <n> lines of surrounding context match before and after each "
"change.  When fewer lines of surrounding context exist they all must match.  "
"By default no context is ever ignored.  Implies --apply."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:423
#, no-wrap
msgid "`--no-ff`"
msgstr "`--no-ff`"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:424
#, no-wrap
msgid "`--force-rebase`"
msgstr "`--force-rebase`"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:425
#, no-wrap
msgid "`-f`"
msgstr "`-f`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:429
msgid ""
"Individually replay all rebased commits instead of fast-forwarding over the "
"unchanged ones.  This ensures that the entire history of the rebased branch "
"is composed of new commits."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:435
msgid ""
"You may find this helpful after reverting a topic branch merge, as this "
"option recreates the topic branch with fresh commits so it can be remerged "
"successfully without needing to \"revert the reversion\" (see the link:howto/"
"revert-a-faulty-merge.html[revert-a-faulty-merge How-To] for details)."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:436
#, no-wrap
msgid "`--fork-point`"
msgstr "`--fork-point`"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:437
#, no-wrap
msgid "`--no-fork-point`"
msgstr "`--no-fork-point`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:441
msgid ""
"Use reflog to find a better common ancestor between <upstream> and <branch> "
"when calculating which commits have been introduced by <branch>."
msgstr "<branch>によって導入されたコミットを計算するときに、reflogを使用して、<upstream>と<branch>の間の、より一般的な祖先を見つけます。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:447
msgid ""
"When --fork-point is active, 'fork_point' will be used instead of <upstream> "
"to calculate the set of commits to rebase, where 'fork_point' is the result "
"of `git merge-base --fork-point <upstream> <branch>` command (see linkgit:"
"git-merge-base[1]).  If 'fork_point' ends up being empty, the <upstream> "
"will be used as a fallback."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:450
msgid ""
"If <upstream> is given on the command line, then the default is `--no-fork-"
"point`, otherwise the default is `--fork-point`."
msgstr "コマンドラインで<upstream>が指定されている場合、デフォルトは `--no-fork-point` です。それ以外の場合、デフォルトは `--fork-point` です。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:454
msgid ""
"If your branch was based on <upstream> but <upstream> was rewound and your "
"branch contains commits which were dropped, this option can be used with `--"
"keep-base` in order to drop those commits from your branch."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:457
#, no-wrap
msgid "`--ignore-whitespace`"
msgstr "`--ignore-whitespace`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:461
msgid ""
"Ignore whitespace differences when trying to reconcile differences. "
"Currently, each backend implements an approximation of this behavior:"
msgstr "差分を調整しようとするときは、空白の違いを無視してください。現在、各バックエンドはこの振る舞いの近似を実装しています:"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:467
msgid ""
"apply backend: When applying a patch, ignore changes in whitespace in "
"context lines. Unfortunately, this means that if the \"old\" lines being "
"replaced by the patch differ only in whitespace from the existing file, you "
"will get a merge conflict instead of a successful patch application."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:472
msgid ""
"merge backend: Treat lines with only whitespace changes as unchanged when "
"merging. Unfortunately, this means that any patch hunks that were intended "
"to modify whitespace and nothing else will be dropped, even if the other "
"side had no changes that conflicted."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:473
#, no-wrap
msgid "`--whitespace=<option>`"
msgstr "`--whitespace=<option>`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:477
msgid ""
"This flag is passed to the 'git apply' program (see linkgit:git-apply[1]) "
"that applies the patch.  Implies --apply."
msgstr "このフラグは、パッチを適用する「git apply」プログラム(linkgit:git-apply[1] を参照)に渡されます。 `--apply` の意味を含んでいます。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:480
#, no-wrap
msgid "`--committer-date-is-author-date`"
msgstr "`--committer-date-is-author-date`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:484
msgid ""
"Instead of using the current time as the committer date, use the author date "
"of the commit being rebased as the committer date. This option implies `--"
"force-rebase`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:485
#, no-wrap
msgid "`--ignore-date`"
msgstr "`--ignore-date`"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:486
#, no-wrap
msgid "`--reset-author-date`"
msgstr "`--reset-author-date`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:490
msgid ""
"Instead of using the author date of the original commit, use the current "
"time as the\tauthor date of the rebased commit.  This option implies `--"
"force-rebase`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:493
#, no-wrap
msgid "`--signoff`"
msgstr "`--signoff`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:497
msgid ""
"Add a `Signed-off-by` trailer to all the rebased commits. Note that if `--"
"interactive` is given then only commits marked to be picked, edited or "
"reworded will have the trailer added."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:500
#, no-wrap
msgid "`-i`"
msgstr "`-i`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:501
#: ../Documentation-sedout/git-rebase.txt:649
#, no-wrap
msgid "`--interactive`"
msgstr "`--interactive`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:505
msgid ""
"Make a list of the commits which are about to be rebased.  Let the user edit "
"that list before rebasing.  This mode can also be used to split commits (see "
"SPLITTING COMMITS below)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:509
msgid ""
"The commit list format can be changed by setting the configuration option "
"rebase.instructionFormat.  A customized instruction format will "
"automatically have the long commit hash prepended to the format."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:512
#, no-wrap
msgid "`-r`"
msgstr "`-r`"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:513
#, no-wrap
msgid "`--rebase-merges[=(rebase-cousins|no-rebase-cousins)]`"
msgstr "`--rebase-merges[=(rebase-cousins|no-rebase-cousins)]`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:521
msgid ""
"By default, a rebase will simply drop merge commits from the todo list, and "
"put the rebased commits into a single, linear branch.  With `--rebase-"
"merges`, the rebase will instead try to preserve the branching structure "
"within the commits that are to be rebased, by recreating the merge commits. "
"Any resolved merge conflicts or manual amendments in these merge commits "
"will have to be resolved/re-applied manually."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:528
msgid ""
"By default, or when `no-rebase-cousins` was specified, commits which do not "
"have `<upstream>` as direct ancestor will keep their original branch point, "
"i.e. commits that would be excluded by linkgit:git-log[1]'s `--ancestry-"
"path` option will keep their original ancestry by default. If the `rebase-"
"cousins` mode is turned on, such commits are instead rebased onto "
"`<upstream>` (or `<onto>`, if specified)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:532
msgid ""
"The `--rebase-merges` mode is similar in spirit to the deprecated `--"
"preserve-merges` but works with interactive rebases, where commits can be "
"reordered, inserted and dropped at will."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:536
msgid ""
"It is currently only possible to recreate the merge commits using the `ort` "
"merge strategy; different merge strategies can be used only via explicit "
"`exec git merge -s <strategy> [...]` commands."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:538
msgid "See also REBASING MERGES and INCOMPATIBLE OPTIONS below."
msgstr "以下の「REBASING MERGES」(マージのリベース)および「INCOMPATIBLE OPTIONS」(互換性のないオプション)も参照してください。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:539
#, no-wrap
msgid "`-p`"
msgstr "`-p`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:540
#: ../Documentation-sedout/git-rebase.txt:648
#, no-wrap
msgid "`--preserve-merges`"
msgstr "`--preserve-merges`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:545
msgid ""
"[DEPRECATED: use `--rebase-merges` instead] Recreate merge commits instead "
"of flattening the history by replaying commits a merge commit introduces. "
"Merge conflict resolutions or manual amendments to merge commits are not "
"preserved."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:549
msgid ""
"This uses the `--interactive` machinery internally, but combining it with "
"the `--interactive` option explicitly is generally not a good idea unless "
"you know what you are doing (see BUGS below)."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:552
#, no-wrap
msgid "`-x <cmd>`"
msgstr "`-x <cmd>`"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:553
#, no-wrap
msgid "`--exec <cmd>`"
msgstr "`--exec <cmd>`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:558
msgid ""
"Append \"exec <cmd>\" after each line creating a commit in the final "
"history. <cmd> will be interpreted as one or more shell commands. Any "
"command that fails will interrupt the rebase, with exit code 1."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:561
msgid ""
"You may execute several commands by either using one instance of `--exec` "
"with several commands:"
msgstr "`--exec` の1つのインスタンスを複数のコマンドで使用することにより、複数のコマンドを実行できます:"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:563
#, no-wrap
msgid "\tgit rebase -i --exec \"cmd1 && cmd2 && ...\"\n"
msgstr "\tgit rebase -i --exec \"cmd1 && cmd2 && ...\"\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:565
msgid "or by giving more than one `--exec`:"
msgstr "または、複数の `--exec` を指定します:"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:567
#, no-wrap
msgid "\tgit rebase -i --exec \"cmd1\" --exec \"cmd2\" --exec ...\n"
msgstr "\tgit rebase -i --exec \"cmd1\" --exec \"cmd2\" --exec ...\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:571
msgid ""
"If `--autosquash` is used, \"exec\" lines will not be appended for the "
"intermediate commits, and will only appear at the end of each squash/fixup "
"series."
msgstr "`--autosquash` が使用されている場合、「exec」行は中間コミットに追加されず、各スカッシュ/修正シリーズの最後にのみ現れます。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:574
msgid ""
"This uses the `--interactive` machinery internally, but it can be run "
"without an explicit `--interactive`."
msgstr "これは内部で `--interactive` 機構を使用しますが、明示的な `--interactive` の指定なしで実行できます。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:577
#, no-wrap
msgid "`--root`"
msgstr "`--root`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:586
msgid ""
"Rebase all commits reachable from <branch>, instead of limiting them with an "
"<upstream>.  This allows you to rebase the root commit(s) on a branch.  When "
"used with --onto, it will skip changes already contained in <newbase> "
"(instead of <upstream>) whereas without --onto it will operate on every "
"change.  When used together with both --onto and --preserve-merges, 'all' "
"root commits will be rewritten to have <newbase> as parent instead."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:589
#, no-wrap
msgid "`--autosquash`"
msgstr "`--autosquash`"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:590
#, no-wrap
msgid "`--no-autosquash`"
msgstr "`--no-autosquash`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:602
msgid ""
"When the commit log message begins with \"squash! ...\" or \"fixup! ...\" or "
"\"amend! ...\", and there is already a commit in the todo list that matches "
"the same `...`, automatically modify the todo list of `rebase -i`, so that "
"the commit marked for squashing comes right after the commit to be modified, "
"and change the action of the moved commit from `pick` to `squash` or `fixup` "
"or `fixup -C` respectively. A commit matches the `...` if the commit subject "
"matches, or if the `...` refers to the commit's hash. As a fall-back, "
"partial matches of the commit subject work, too. The recommended way to "
"create fixup/amend/squash commits is by using the `--fixup`, `--fixup=amend:"
"` or `--fixup=reword:` and `--squash` options respectively of linkgit:git-"
"commit[1]."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:606
msgid ""
"If the `--autosquash` option is enabled by default using the configuration "
"variable `rebase.autoSquash`, this option can be used to override and "
"disable this setting."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:609
#, no-wrap
msgid "`--autostash`"
msgstr "`--autostash`"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:610
#, no-wrap
msgid "`--no-autostash`"
msgstr "`--no-autostash`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:616
msgid ""
"Automatically create a temporary stash entry before the operation begins, "
"and apply it after the operation ends.  This means that you can run rebase "
"on a dirty worktree.  However, use with care: the final stash application "
"after a successful rebase might result in non-trivial conflicts."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:617
#, no-wrap
msgid "`--reschedule-failed-exec`"
msgstr "`--reschedule-failed-exec`"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:618
#, no-wrap
msgid "`--no-reschedule-failed-exec`"
msgstr "`--no-reschedule-failed-exec`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:621
msgid ""
"Automatically reschedule `exec` commands that failed. This only makes sense "
"in interactive mode (or when an `--exec` option was provided)."
msgstr "失敗した `exec` コマンドを自動的に再スケジュールします。 これは、対話モード(または `--exec` オプションが提供された場合)でのみ意味があります。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:629
msgid ""
"Even though this option applies once a rebase is started, it's set for the "
"whole rebase at the start based on either the `rebase.rescheduleFailedExec` "
"configuration (see linkgit:git-config[1] or \"CONFIGURATION\" below) or "
"whether this option is provided. Otherwise an explicit `--no-reschedule-"
"failed-exec` at the start would be overridden by the presence of `rebase."
"rescheduleFailedExec=true` configuration."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-rebase.txt:631
#, no-wrap
msgid "INCOMPATIBLE OPTIONS"
msgstr "INCOMPATIBLE OPTIONS"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:634
msgid "The following options:"
msgstr "これら、"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:637
msgid "`--whitespace`"
msgstr "`--whitespace`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:638
msgid "`-C`"
msgstr "`-C`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:640
msgid "are incompatible with the following options:"
msgstr "は、以下のオプションと互換性がありません:"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:643
msgid "`--strategy`"
msgstr "`--strategy`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:644
msgid "`--strategy-option`"
msgstr "`--strategy-option`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:646
msgid "`--[no-]autosquash`"
msgstr "`--[no-]autosquash`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:647
msgid "`--rebase-merges`"
msgstr "`--rebase-merges`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:650
msgid "`--exec`"
msgstr "`--exec`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:652
msgid "`--empty=`"
msgstr "`--empty=`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:655
msgid "`--root` when used in combination with `--onto`"
msgstr "`--onto` と組み合わせて使用する場合の `--root`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:657
msgid "In addition, the following pairs of options are incompatible:"
msgstr "加えて、以下のオプションの組み合わせには互換性がありません:"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:659
msgid "`--preserve-merges` and `--interactive`"
msgstr "`--preserve-merges` かつ `--interactive`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:660
msgid "`--preserve-merges` and `--signoff`"
msgstr "`--preserve-merges` かつ `--signoff`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:661
msgid "`--preserve-merges` and `--rebase-merges`"
msgstr "`--preserve-merges` かつ `--rebase-merges`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:662
msgid "`--preserve-merges` and `--empty=`"
msgstr "`--preserve-merges` かつ `--empty=`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:663
msgid "`--preserve-merges` and `--ignore-whitespace`"
msgstr "`--preserve-merges` かつ `--ignore-whitespace`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:664
msgid "`--preserve-merges` and `--committer-date-is-author-date`"
msgstr "`--preserve-merges` かつ `--committer-date-is-author-date`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:665
msgid "`--preserve-merges` and `--ignore-date`"
msgstr "`--preserve-merges` かつ `--ignore-date`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:666
msgid "`--keep-base` and `--onto`"
msgstr "`--keep-base` かつ `--onto`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:667
msgid "`--keep-base` and `--root`"
msgstr "`--keep-base` かつ `--root`"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:668
msgid "`--fork-point` and `--root`"
msgstr "`--fork-point` かつ `--root`"

#. type: Title -
#: ../Documentation-sedout/git-rebase.txt:670
#, no-wrap
msgid "BEHAVIORAL DIFFERENCES"
msgstr "振る舞いの違い"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:679
msgid ""
"git rebase has two primary backends: apply and merge.  (The apply backend "
"used to be known as the 'am' backend, but the name led to confusion as it "
"looks like a verb instead of a noun.  Also, the merge backend used to be "
"known as the interactive backend, but it is now used for non-interactive "
"cases as well.  Both were renamed based on lower-level functionality that "
"underpinned each.) There are some subtle differences in how these two "
"backends behave:"
msgstr ""

#. type: Title ===
#: ../Documentation-sedout/git-rebase.txt:680
#, no-wrap
msgid "Empty commits"
msgstr "空のコミット"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:687
msgid ""
"The apply backend unfortunately drops intentionally empty commits, i.e.  "
"commits that started empty, though these are rare in practice.  It also "
"drops commits that become empty and has no option for controlling this "
"behavior."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:691
msgid ""
"The merge backend keeps intentionally empty commits by default (though with -"
"i they are marked as empty in the todo list editor, or they can be dropped "
"automatically with --no-keep-empty)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:697
msgid ""
"Similar to the apply backend, by default the merge backend drops commits "
"that become empty unless -i/--interactive is specified (in which case it "
"stops and asks the user what to do).  The merge backend also has an --"
"empty={drop,keep,ask} option for changing the behavior of handling commits "
"that become empty."
msgstr ""

#. type: Title ===
#: ../Documentation-sedout/git-rebase.txt:698
#, no-wrap
msgid "Directory rename detection"
msgstr "ディレクトリ名変更の検知"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:709
msgid ""
"Due to the lack of accurate tree information (arising from constructing fake "
"ancestors with the limited information available in patches), directory "
"rename detection is disabled in the apply backend.  Disabled directory "
"rename detection means that if one side of history renames a directory and "
"the other adds new files to the old directory, then the new files will be "
"left behind in the old directory without any warning at the time of rebasing "
"that you may want to move these files into the new directory."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:712
msgid ""
"Directory rename detection works with the merge backend to provide you "
"warnings in such cases."
msgstr "ディレクトリ名変更の検出は、マージバックエンドと連携して、このような場合に警告を提供します。"

#. type: Title ===
#: ../Documentation-sedout/git-rebase.txt:713
#, no-wrap
msgid "Context"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:730
msgid ""
"The apply backend works by creating a sequence of patches (by calling "
"`format-patch` internally), and then applying the patches in sequence "
"(calling `am` internally).  Patches are composed of multiple hunks, each "
"with line numbers, a context region, and the actual changes.  The line "
"numbers have to be taken with some fuzz, since the other side will likely "
"have inserted or deleted lines earlier in the file.  The context region is "
"meant to help find how to adjust the line numbers in order to apply the "
"changes to the right lines.  However, if multiple areas of the code have the "
"same surrounding lines of context, the wrong one can be picked.  There are "
"real-world cases where this has caused commits to be reapplied incorrectly "
"with no conflicts reported.  Setting diff.context to a larger value may "
"prevent such types of problems, but increases the chance of spurious "
"conflicts (since it will require more lines of matching context to apply)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:733
msgid ""
"The merge backend works with a full copy of each relevant file, insulating "
"it from these types of problems."
msgstr "マージバックエンドは、関連する各ファイルの完全なコピーを使って動作し、これらの種類の問題からファイルを保護します。"

#. type: Title ===
#: ../Documentation-sedout/git-rebase.txt:734
#, no-wrap
msgid "Labelling of conflicts markers"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:747
msgid ""
"When there are content conflicts, the merge machinery tries to annotate each "
"side's conflict markers with the commits where the content came from.  Since "
"the apply backend drops the original information about the rebased commits "
"and their parents (and instead generates new fake commits based off limited "
"information in the generated patches), those commits cannot be identified; "
"instead it has to fall back to a commit summary.  Also, when merge."
"conflictStyle is set to diff3, the apply backend will use \"constructed "
"merge base\" to label the content from the merge base, and thus provide no "
"information about the merge base commit whatsoever."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:750
msgid ""
"The merge backend works with the full commits on both sides of history and "
"thus has no such limitations."
msgstr "マージバックエンドは、履歴の両側で完全なコミットで動作するため、そのような制限はありません。"

#. type: Title ===
#: ../Documentation-sedout/git-rebase.txt:751
#, no-wrap
msgid "Hooks"
msgstr "フック"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:766
msgid ""
"The apply backend has not traditionally called the post-commit hook, while "
"the merge backend has.  Both have called the post-checkout hook, though the "
"merge backend has squelched its output.  Further, both backends only call "
"the post-checkout hook with the starting point commit of the rebase, not the "
"intermediate commits nor the final commit.  In each case, the calling of "
"these hooks was by accident of implementation rather than by design (both "
"backends were originally implemented as shell scripts and happened to invoke "
"other commands like 'git checkout' or 'git commit' that would call the "
"hooks).  Both backends should have the same behavior, though it is not "
"entirely clear which, if any, is correct.  We will likely make rebase stop "
"calling either of these hooks in the future."
msgstr ""

#. type: Title ===
#: ../Documentation-sedout/git-rebase.txt:767
#, no-wrap
msgid "Interruptability"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:777
msgid ""
"The apply backend has safety problems with an ill-timed interrupt; if the "
"user presses Ctrl-C at the wrong time to try to abort the rebase, the rebase "
"can enter a state where it cannot be aborted with a subsequent `git rebase --"
"abort`.  The merge backend does not appear to suffer from the same "
"shortcoming.  (See https://lore.kernel.org/git/20200207132152.GC2868@szeder."
"dev/ for details.)"
msgstr ""

#. type: Title ===
#: ../Documentation-sedout/git-rebase.txt:778
#, no-wrap
msgid "Commit Rewording"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:787
msgid ""
"When a conflict occurs while rebasing, rebase stops and asks the user to "
"resolve.  Since the user may need to make notable changes while resolving "
"conflicts, after conflicts are resolved and the user has run `git rebase --"
"continue`, the rebase should open an editor and ask the user to update the "
"commit message.  The merge backend does this, while the apply backend "
"blindly applies the original commit message."
msgstr ""

#. type: Title ===
#: ../Documentation-sedout/git-rebase.txt:788
#, no-wrap
msgid "Miscellaneous differences"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:794
msgid ""
"There are a few more behavioral differences that most folks would probably "
"consider inconsequential but which are mentioned for completeness:"
msgstr "ほとんどの人がおそらく取るに足らないと考えるであろうが、完全性のためにいくつかの振る舞いの違いについて言及します:"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:798
msgid ""
"Reflog: The two backends will use different wording when describing the "
"changes made in the reflog, though both will make use of the word \"rebase\"."
msgstr "Reflog: 2つのバックエンドは、reflogで行われた変更を説明するときに異なる表現を使用しますが、どちらも「リベース」という単語を使用します。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:804
msgid ""
"Progress, informational, and error messages: The two backends provide "
"slightly different progress and informational messages.  Also, the apply "
"backend writes error messages (such as \"Your files would be overwritten..."
"\") to stdout, while the merge backend writes them to stderr."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:807
msgid ""
"State directories: The two backends keep their state in different "
"directories under .git/"
msgstr "状態ディレクトリ: 2つのバックエンドは、.git/ の下の異なるディレクトリに状態を保持します"

#. type: Title -
#: ../Documentation-sedout/git-rebase.txt:811
#, no-wrap
msgid "NOTES"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:816
msgid ""
"You should understand the implications of using 'git rebase' on a repository "
"that you share.  See also RECOVERING FROM UPSTREAM REBASE below."
msgstr "共有リポジトリで「git rebase」を使用することの意味を理解する必要があります。 下記の「RECOVERING FROM UPSTREAM REBASE」も参照してください。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:821
msgid ""
"When the git-rebase command is run, it will first execute a \"pre-rebase\" "
"hook if one exists.  You can use this hook to do sanity checks and reject "
"the rebase if it isn't appropriate.  Please see the template pre-rebase hook "
"script for an example."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:823
msgid "Upon completion, <branch> will be the current branch."
msgstr "完了すると、<branch>が現在のブランチになります。"

#. type: Title -
#: ../Documentation-sedout/git-rebase.txt:825
#, no-wrap
msgid "INTERACTIVE MODE"
msgstr "INTERACTIVE MODE"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:830
msgid ""
"Rebasing interactively means that you have a chance to edit the commits "
"which are rebased.  You can reorder the commits, and you can remove them "
"(weeding out bad or otherwise unwanted patches)."
msgstr "対話的にリベースするということは、リベースされるコミットを編集する機会があることを意味します。コミットを並べ替えたり、削除したりできます(不良パッチやその他の不要なパッチを削除します)。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:832
msgid "The interactive mode is meant for this type of workflow:"
msgstr "対話的モードは、以下の種類の作業の流れを対象としています:"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:834
msgid "have a wonderful idea"
msgstr "素晴らしいアイデアを思いついた"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:835
msgid "hack on the code"
msgstr "コードをハックハック"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:836
msgid "prepare a series for submission"
msgstr "提出用のシリーズを準備する"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:837
msgid "submit"
msgstr "送信"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:839
msgid "where point 2. consists of several instances of"
msgstr "ここで、(2)は、以下のいくつかの内容で構成されています"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:841
msgid "regular use"
msgstr "通常"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:843
msgid "finish something worthy of a commit"
msgstr "コミットに値する何かを終える"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:844
msgid "commit"
msgstr "コミット"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:846
msgid "independent fixup"
msgstr "独立した修正"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:848
msgid "realize that something does not work"
msgstr "何かが機能しないことに気付く"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:849
msgid "fix that"
msgstr "そいつを修正する"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:850
msgid "commit it"
msgstr "それをコミット"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:856
msgid ""
"Sometimes the thing fixed in b.2. cannot be amended to the not-quite perfect "
"commit it fixes, because that commit is buried deeply in a patch series.  "
"That is exactly what interactive rebase is for: use it after plenty of \"a"
"\"s and \"b\"s, by rearranging and editing commits, and squashing multiple "
"commits into one."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:858
msgid "Start it with the last commit you want to retain as-is:"
msgstr "あなたがそのまま保持したい最後のコミットから開始します:"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:860
#, no-wrap
msgid "\tgit rebase -i <after-this-commit>\n"
msgstr "\tgit rebase -i <after-this-commit>\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:865
msgid ""
"An editor will be fired up with all the commits in your current branch "
"(ignoring merge commits), which come after the given commit.  You can "
"reorder the commits in this list to your heart's content, and you can remove "
"them.  The list looks more or less like this:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:870
#, no-wrap
msgid ""
"pick deadbee The oneline of this commit\n"
"pick fa1afe1 The oneline of the next commit\n"
"...\n"
msgstr ""
"pick deadbee The oneline of this commit\n"
"pick fa1afe1 The oneline of the next commit\n"
"...\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:875
msgid ""
"The oneline descriptions are purely for your pleasure; 'git rebase' will not "
"look at them but at the commit names (\"deadbee\" and \"fa1afe1\" in this "
"example), so do not delete or edit the names."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:880
msgid ""
"By replacing the command \"pick\" with the command \"edit\", you can tell "
"'git rebase' to stop after applying that commit, so that you can edit the "
"files and/or the commit message, amend the commit, and continue rebasing."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:883
msgid ""
"To interrupt the rebase (just like an \"edit\" command would do, but without "
"cherry-picking any commit first), use the \"break\" command."
msgstr "リベースを中断するには(「edit」コマンドと同じように、ただし最初にコミットを選択せずに)、「break」コマンドを使用します。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:886
msgid ""
"If you just want to edit the commit message for a commit, replace the "
"command \"pick\" with the command \"reword\"."
msgstr "コミットのコミットメッセージを編集するだけの場合は、コマンド「pick」をコマンド「reword」に置き換えます。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:889
msgid ""
"To drop a commit, replace the command \"pick\" with \"drop\", or just delete "
"the matching line."
msgstr "コミットを削除するには、コマンド「pick」を「drop」に置き換えるか、マッチする行を削除します。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:904
msgid ""
"If you want to fold two or more commits into one, replace the command \"pick"
"\" for the second and subsequent commits with \"squash\" or \"fixup\".  If "
"the commits had different authors, the folded commit will be attributed to "
"the author of the first commit.  The suggested commit message for the folded "
"commit is the concatenation of the first commit's message with those "
"identified by \"squash\" commands, omitting the messages of commits "
"identified by \"fixup\" commands, unless \"fixup -c\" is used.  In that case "
"the suggested commit message is only the message of the \"fixup -c\" commit, "
"and an editor is opened allowing you to edit the message.  The contents "
"(patch) of the \"fixup -c\" commit are still incorporated into the folded "
"commit. If there is more than one \"fixup -c\" commit, the message from the "
"final one is used.  You can also use \"fixup -C\" to get the same behavior "
"as \"fixup -c\" except without opening an editor."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:909
msgid ""
"'git rebase' will stop when \"pick\" has been replaced with \"edit\" or when "
"a command fails due to merge errors. When you are done editing and/or "
"resolving conflicts you can continue with `git rebase --continue`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:913
msgid ""
"For example, if you want to reorder the last 5 commits, such that what was "
"HEAD~4 becomes the new HEAD. To achieve that, you would call 'git rebase' "
"like this:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:916
#, no-wrap
msgid "$ git rebase -i HEAD~5\n"
msgstr "$ git rebase -i HEAD~5\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:919
msgid "And move the first patch to the end of the list."
msgstr "そして、最初のパッチをリストの最後に移動します。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:922
msgid ""
"You might want to recreate merge commits, e.g. if you have a history like "
"this:"
msgstr "たとえば、あなたが以下のような歴史を持っているなら、マージコミットを再作成することをお勧めします:"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:929
#, no-wrap
msgid ""
"           X\n"
"            \\\n"
"         A---M---B\n"
"        /\n"
"---o---O---P---Q\n"
msgstr ""
"           X\n"
"            \\\n"
"         A---M---B\n"
"        /\n"
"---o---O---P---Q\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:933
msgid ""
"Suppose you want to rebase the side branch starting at \"A\" to \"Q\". Make "
"sure that the current HEAD is \"B\", and call"
msgstr "あなたは「A」から「Q」までのサイドブランチをリベースしたいとします。 現在のHEADが「B」であることを確認して"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:936
#, no-wrap
msgid "$ git rebase -i -r --onto Q O\n"
msgstr "$ git rebase -i -r --onto Q O\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:943
msgid ""
"Reordering and editing commits usually creates untested intermediate steps.  "
"You may want to check that your history editing did not break anything by "
"running a test, or at least recompiling at intermediate points in history by "
"using the \"exec\" command (shortcut \"x\").  You may do so by creating a "
"todo list like this one:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:952
#, no-wrap
msgid ""
"pick deadbee Implement feature XXX\n"
"fixup f1a5c00 Fix to feature XXX\n"
"exec make\n"
"pick c0ffeee The oneline of the next commit\n"
"edit deadbab The oneline of the commit after\n"
"exec cd subdir; make test\n"
"...\n"
msgstr ""
"pick deadbee Implement feature XXX\n"
"fixup f1a5c00 Fix to feature XXX\n"
"exec make\n"
"pick c0ffeee The oneline of the next commit\n"
"edit deadbab The oneline of the commit after\n"
"exec cd subdir; make test\n"
"...\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:957
msgid ""
"The interactive rebase will stop when a command fails (i.e. exits with non-0 "
"status) to give you an opportunity to fix the problem. You can continue with "
"`git rebase --continue`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:962
msgid ""
"The \"exec\" command launches the command in a shell (the one specified in `"
"$SHELL`, or the default shell if `$SHELL` is not set), so you can use shell "
"features (like \"cd\", \">\", \";\" ...). The command is run from the root "
"of the working tree."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:965
#, no-wrap
msgid "$ git rebase -i --exec \"make test\"\n"
msgstr "$ git rebase -i --exec \"make test\"\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:969
msgid ""
"This command lets you check that intermediate commits are compilable.  The "
"todo list becomes like that:"
msgstr "このコマンドを使用すると、中間コミットがコンパイル可能であることを確認できます。ToDoリストは以下のようになります:"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:979
#, no-wrap
msgid ""
"pick 5928aea one\n"
"exec make test\n"
"pick 04d0fda two\n"
"exec make test\n"
"pick ba46169 three\n"
"exec make test\n"
"pick f4593f9 four\n"
"exec make test\n"
msgstr ""
"pick 5928aea one\n"
"exec make test\n"
"pick 04d0fda two\n"
"exec make test\n"
"pick ba46169 three\n"
"exec make test\n"
"pick f4593f9 four\n"
"exec make test\n"

#. type: Title -
#: ../Documentation-sedout/git-rebase.txt:982
#, no-wrap
msgid "SPLITTING COMMITS"
msgstr "コミットの分割"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:988
msgid ""
"In interactive mode, you can mark commits with the action \"edit\".  "
"However, this does not necessarily mean that 'git rebase' expects the result "
"of this edit to be exactly one commit.  Indeed, you can undo the commit, or "
"you can add other commits.  This can be used to split a commit into two:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:992
msgid ""
"Start an interactive rebase with `git rebase -i <commit>^`, where <commit> "
"is the commit you want to split.  In fact, any commit range will do, as long "
"as it contains that commit."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:994
msgid "Mark the commit you want to split with the action \"edit\"."
msgstr "分割するコミットを、アクション「edit」でマークします。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:998
msgid ""
"When it comes to editing that commit, execute `git reset HEAD^`.  The effect "
"is that the HEAD is rewound by one, and the index follows suit.  However, "
"the working tree stays the same."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1002
msgid ""
"Now add the changes to the index that you want to have in the first commit.  "
"You can use `git add` (possibly interactively) or 'git gui' (or both) to do "
"that."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1005
msgid ""
"Commit the now-current index with whatever commit message is appropriate now."
msgstr "最新の適切なコミットメッセージを使用して、最新の「現在のインデックス」をコミットします。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1007
msgid "Repeat the last two steps until your working tree is clean."
msgstr "作業ツリーがクリーンになるまで、最後の2つの手順を繰り返します。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1009
msgid "Continue the rebase with `git rebase --continue`."
msgstr "`git rebase --continue` でリベースを続行します。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1014
msgid ""
"If you are not absolutely sure that the intermediate revisions are "
"consistent (they compile, pass the testsuite, etc.) you should use 'git "
"stash' to stash away the not-yet-committed changes after each commit, test, "
"and amend the commit if fixes are necessary."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-rebase.txt:1017
#, no-wrap
msgid "RECOVERING FROM UPSTREAM REBASE"
msgstr "RECOVERING FROM UPSTREAM REBASE"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1024
msgid ""
"Rebasing (or any other form of rewriting) a branch that others have based "
"work on is a bad idea: anyone downstream of it is forced to manually fix "
"their history.  This section explains how to do the fix from the "
"downstream's point of view.  The real fix, however, would be to avoid "
"rebasing the upstream in the first place."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1029
msgid ""
"To illustrate, suppose you are in a situation where someone develops a "
"'subsystem' branch, and you are working on a 'topic' that is dependent on "
"this 'subsystem'.  You might end up with a history like the following:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:1036
#, no-wrap
msgid ""
"    o---o---o---o---o---o---o---o  master\n"
"\t \\\n"
"\t  o---o---o---o---o  subsystem\n"
"\t\t\t   \\\n"
"\t\t\t    *---*---*  topic\n"
msgstr ""
"    o---o---o---o---o---o---o---o  master\n"
"\t \\\n"
"\t  o---o---o---o---o  subsystem\n"
"\t\t\t   \\\n"
"\t\t\t    *---*---*  topic\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1039
msgid "If 'subsystem' is rebased against 'master', the following happens:"
msgstr "'subsystem' が 'master' に対してリベースされる場合、以下が発生します:"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:1046
#, no-wrap
msgid ""
"    o---o---o---o---o---o---o---o  master\n"
"\t \\\t\t\t \\\n"
"\t  o---o---o---o---o\t  o'--o'--o'--o'--o'  subsystem\n"
"\t\t\t   \\\n"
"\t\t\t    *---*---*  topic\n"
msgstr ""
"    o---o---o---o---o---o---o---o  master\n"
"\t \\\t\t\t \\\n"
"\t  o---o---o---o---o\t  o'--o'--o'--o'--o'  subsystem\n"
"\t\t\t   \\\n"
"\t\t\t    *---*---*  topic\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1050
msgid ""
"If you now continue development as usual, and eventually merge 'topic' to "
"'subsystem', the commits from 'subsystem' will remain duplicated forever:"
msgstr "これで通常どおり開発を続行し、最終的に「topic」を「subsystem」にマージすると、「subsystem」からのコミットは永久に複製されたままになります:"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:1057
#, no-wrap
msgid ""
"    o---o---o---o---o---o---o---o  master\n"
"\t \\\t\t\t \\\n"
"\t  o---o---o---o---o\t  o'--o'--o'--o'--o'--M\t subsystem\n"
"\t\t\t   \\\t\t\t     /\n"
"\t\t\t    *---*---*-..........-*--*  topic\n"
msgstr ""
"    o---o---o---o---o---o---o---o  master\n"
"\t \\\t\t\t \\\n"
"\t  o---o---o---o---o\t  o'--o'--o'--o'--o'--M\t subsystem\n"
"\t\t\t   \\\t\t\t     /\n"
"\t\t\t    *---*---*-..........-*--*  topic\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1064
msgid ""
"Such duplicates are generally frowned upon because they clutter up history, "
"making it harder to follow.  To clean things up, you need to transplant the "
"commits on 'topic' to the new 'subsystem' tip, i.e., rebase 'topic'.  This "
"becomes a ripple effect: anyone downstream from 'topic' is forced to rebase "
"too, and so on!"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1066
msgid "There are two kinds of fixes, discussed in the following subsections:"
msgstr "以下のサブセクションで議論する2種類の修正があります:"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:1067
#, no-wrap
msgid "Easy case: The changes are literally the same."
msgstr "簡単な場合: 変更は文字通り同じ(same)"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1071
msgid ""
"This happens if the 'subsystem' rebase was a simple rebase and had no "
"conflicts."
msgstr "これは、 'subsystem' のリベースが単純なリベースであり、競合がなかった場合に発生します。"

#. type: Labeled list
#: ../Documentation-sedout/git-rebase.txt:1072
#, no-wrap
msgid "Hard case: The changes are not the same."
msgstr "難しい場合: 変更は同じではありません"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1079
msgid ""
"This happens if the 'subsystem' rebase had conflicts, or used `--"
"interactive` to omit, edit, squash, or fixup commits; or if the upstream "
"used one of `commit --amend`, `reset`, or a full history rewriting command "
"like https://github.com/newren/git-filter-repo[`filter-repo`]."
msgstr ""

#. type: Title ~
#: ../Documentation-sedout/git-rebase.txt:1082
#, no-wrap
msgid "The easy case"
msgstr "簡単な場合"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1087
msgid ""
"Only works if the changes (patch IDs based on the diff contents) on "
"'subsystem' are literally the same before and after the rebase 'subsystem' "
"did."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1092
msgid ""
"In that case, the fix is easy because 'git rebase' knows to skip changes "
"that are already present in the new upstream (unless `--reapply-cherry-"
"picks` is given). So if you say (assuming you're on 'topic')"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:1094
#, no-wrap
msgid "    $ git rebase subsystem\n"
msgstr "    $ git rebase subsystem\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1096
msgid "you will end up with the fixed history"
msgstr "あなたは修正された履歴で終わります。"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:1102
#, no-wrap
msgid ""
"    o---o---o---o---o---o---o---o  master\n"
"\t\t\t\t \\\n"
"\t\t\t\t  o'--o'--o'--o'--o'  subsystem\n"
"\t\t\t\t\t\t   \\\n"
"\t\t\t\t\t\t    *---*---*  topic\n"
msgstr ""
"    o---o---o---o---o---o---o---o  master\n"
"\t\t\t\t \\\n"
"\t\t\t\t  o'--o'--o'--o'--o'  subsystem\n"
"\t\t\t\t\t\t   \\\n"
"\t\t\t\t\t\t    *---*---*  topic\n"

#. type: Title ~
#: ../Documentation-sedout/git-rebase.txt:1106
#, no-wrap
msgid "The hard case"
msgstr "難しい場合"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1110
msgid ""
"Things get more complicated if the 'subsystem' changes do not exactly "
"correspond to the ones before the rebase."
msgstr "'subsystem' の変更がリベース前の変更に正確に対応していない場合、事態はさらに複雑になります。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1115
#, no-wrap
msgid ""
"While an \"easy case recovery\" sometimes appears to be successful\n"
"      even in the hard case, it may have unintended consequences.  For\n"
"      example, a commit that was removed via `git rebase\n"
"      --interactive` will be **resurrected**!\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1120
msgid ""
"The idea is to manually tell 'git rebase' \"where the old 'subsystem' ended "
"and your 'topic' began\", that is, what the old merge base between them "
"was.  You will have to find a way to name the last commit of the old "
"'subsystem', for example:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1124
msgid ""
"With the 'subsystem' reflog: after 'git fetch', the old tip of 'subsystem' "
"is at `subsystem@{1}`.  Subsequent fetches will increase the number.  (See "
"linkgit:git-reflog[1].)"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1127
msgid ""
"Relative to the tip of 'topic': knowing that your 'topic' has three commits, "
"the old tip of 'subsystem' must be `topic~3`."
msgstr "'topic'の先端に関連して: 'topic' に3つのコミットがあることを知っているので、 'subsystem' の古い先端は `topic~3` でなければなりません。"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1130
msgid ""
"You can then transplant the old `subsystem..topic` to the new tip by saying "
"(for the reflog case, and assuming you are on 'topic' already):"
msgstr "次に、あなたは以下のように言って、古い `subsystem..topic` を新しい先端に移植できます(reflogの場合、すでに 'topic' にいると仮定します):"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:1132
#, no-wrap
msgid "    $ git rebase --onto subsystem subsystem@{1}\n"
msgstr "    $ git rebase --onto subsystem subsystem@{1}\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1137
msgid ""
"The ripple effect of a \"hard case\" recovery is especially bad: 'everyone' "
"downstream from 'topic' will now have to perform a \"hard case\" recovery "
"too!"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-rebase.txt:1139
#, no-wrap
msgid "REBASING MERGES"
msgstr "REBASING MERGES"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1147
msgid ""
"The interactive rebase command was originally designed to handle individual "
"patch series. As such, it makes sense to exclude merge commits from the todo "
"list, as the developer may have merged the then-current `master` while "
"working on the branch, only to rebase all the commits onto `master` "
"eventually (skipping the merge commits)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1151
msgid ""
"However, there are legitimate reasons why a developer may want to recreate "
"merge commits: to keep the branch structure (or \"commit topology\") when "
"working on multiple, inter-related branches."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1156
msgid ""
"In the following example, the developer works on a topic branch that "
"refactors the way buttons are defined, and on another topic branch that uses "
"that refactoring to implement a \"Report a bug\" button. The output of `git "
"log --graph --format=%s -5` may look like this:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:1166
#, no-wrap
msgid ""
"*   Merge branch 'report-a-bug'\n"
"|\\\n"
"| * Add the feedback button\n"
"* | Merge branch 'refactor-button'\n"
"|\\ \\\n"
"| |/\n"
"| * Use the Button class for all buttons\n"
"| * Extract a generic Button class from the DownloadButton one\n"
msgstr ""
"*   Merge branch 'report-a-bug'\n"
"|\\\n"
"| * Add the feedback button\n"
"* | Merge branch 'refactor-button'\n"
"|\\ \\\n"
"| |/\n"
"| * Use the Button class for all buttons\n"
"| * Extract a generic Button class from the DownloadButton one\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1173
msgid ""
"The developer might want to rebase those commits to a newer `master` while "
"keeping the branch topology, for example when the first topic branch is "
"expected to be integrated into `master` much earlier than the second one, "
"say, to resolve merge conflicts with changes to the DownloadButton class "
"that made it into `master`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1176
msgid ""
"This rebase can be performed using the `--rebase-merges` option.  It will "
"generate a todo list looking like this:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:1179
#: ../Documentation-sedout/git-rebase.txt:1260
#, no-wrap
msgid "label onto\n"
msgstr "label onto\n"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:1185
#, no-wrap
msgid ""
"# Branch: refactor-button\n"
"reset onto\n"
"pick 123456 Extract a generic Button class from the DownloadButton one\n"
"pick 654321 Use the Button class for all buttons\n"
"label refactor-button\n"
msgstr ""
"# Branch: refactor-button\n"
"reset onto\n"
"pick 123456 Extract a generic Button class from the DownloadButton one\n"
"pick 654321 Use the Button class for all buttons\n"
"label refactor-button\n"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:1190
#, no-wrap
msgid ""
"# Branch: report-a-bug\n"
"reset refactor-button # Use the Button class for all buttons\n"
"pick abcdef Add the feedback button\n"
"label report-a-bug\n"
msgstr ""
"# Branch: report-a-bug\n"
"reset refactor-button # Use the Button class for all buttons\n"
"pick abcdef Add the feedback button\n"
"label report-a-bug\n"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:1194
#, no-wrap
msgid ""
"reset onto\n"
"merge -C a1b2c3 refactor-button # Merge 'refactor-button'\n"
"merge -C 6f5e4d report-a-bug # Merge 'report-a-bug'\n"
msgstr ""
"reset onto\n"
"merge -C a1b2c3 refactor-button # Merge 'refactor-button'\n"
"merge -C 6f5e4d report-a-bug # Merge 'report-a-bug'\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1198
msgid ""
"In contrast to a regular interactive rebase, there are `label`, `reset` and "
"`merge` commands in addition to `pick` ones."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1206
msgid ""
"The `label` command associates a label with the current HEAD when that "
"command is executed. These labels are created as worktree-local refs (`refs/"
"rewritten/<label>`) that will be deleted when the rebase finishes. That way, "
"rebase operations in multiple worktrees linked to the same repository do not "
"interfere with one another. If the `label` command fails, it is rescheduled "
"immediately, with a helpful message how to proceed."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1213
msgid ""
"The `reset` command resets the HEAD, index and worktree to the specified "
"revision. It is similar to an `exec git reset --hard <label>`, but refuses "
"to overwrite untracked files. If the `reset` command fails, it is "
"rescheduled immediately, with a helpful message how to edit the todo list "
"(this typically happens when a `reset` command was inserted into the todo "
"list manually and contains a typo)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1219
msgid ""
"The `merge` command will merge the specified revision(s) into whatever is "
"HEAD at that time. With `-C <original-commit>`, the commit message of the "
"specified merge commit will be used. When the `-C` is changed to a lower-"
"case `-c`, the message will be opened in an editor after a successful merge "
"so that the user can edit the message."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1222
msgid ""
"If a `merge` command fails for any reason other than merge conflicts (i.e.  "
"when the merge operation did not even start), it is rescheduled immediately."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1233
msgid ""
"By default, the `merge` command will use the `ort` merge strategy for "
"regular merges, and `octopus` for octopus merges.  One can specify a default "
"strategy for all merges using the `--strategy` argument when invoking "
"rebase, or can override specific merges in the interactive list of commands "
"by using an `exec` command to call `git merge` explicitly with a `--"
"strategy` argument.  Note that when calling `git merge` explicitly like "
"this, you can make use of the fact that the labels are worktree-local refs "
"(the ref `refs/rewritten/onto` would correspond to the label `onto`, for "
"example) in order to refer to the branches you want to merge."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1237
msgid ""
"Note: the first command (`label onto`) labels the revision onto which the "
"commits are rebased; The name `onto` is just a convention, as a nod to the "
"`--onto` option."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1244
msgid ""
"It is also possible to introduce completely new merge commits from scratch "
"by adding a command of the form `merge <merge-head>`. This form will "
"generate a tentative commit message and always open an editor to let the "
"user edit it. This can be useful e.g. when a topic branch turns out to "
"address more than a single concern and wants to be split into two or even "
"more topic branches. Consider this todo list:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:1251
#, no-wrap
msgid ""
"pick 192837 Switch from GNU Makefiles to CMake\n"
"pick 5a6c7e Document the switch to CMake\n"
"pick 918273 Fix detection of OpenSSL in CMake\n"
"pick afbecd http: add support for TLS v1.3\n"
"pick fdbaec Fix detection of cURL in CMake on Windows\n"
msgstr ""
"pick 192837 Switch from GNU Makefiles to CMake\n"
"pick 5a6c7e Document the switch to CMake\n"
"pick 918273 Fix detection of OpenSSL in CMake\n"
"pick afbecd http: add support for TLS v1.3\n"
"pick fdbaec Fix detection of cURL in CMake on Windows\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1257
msgid ""
"The one commit in this list that is not related to CMake may very well have "
"been motivated by working on fixing all those bugs introduced by switching "
"to CMake, but it addresses a different concern. To split this branch into "
"two topic branches, the todo list could be edited like this:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:1263
#, no-wrap
msgid ""
"pick afbecd http: add support for TLS v1.3\n"
"label tlsv1.3\n"
msgstr ""
"pick afbecd http: add support for TLS v1.3\n"
"label tlsv1.3\n"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:1270
#, no-wrap
msgid ""
"reset onto\n"
"pick 192837 Switch from GNU Makefiles to CMake\n"
"pick 918273 Fix detection of OpenSSL in CMake\n"
"pick fdbaec Fix detection of cURL in CMake on Windows\n"
"pick 5a6c7e Document the switch to CMake\n"
"label cmake\n"
msgstr ""
"reset onto\n"
"pick 192837 Switch from GNU Makefiles to CMake\n"
"pick 918273 Fix detection of OpenSSL in CMake\n"
"pick fdbaec Fix detection of cURL in CMake on Windows\n"
"pick 5a6c7e Document the switch to CMake\n"
"label cmake\n"

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:1274
#, no-wrap
msgid ""
"reset onto\n"
"merge tlsv1.3\n"
"merge cmake\n"
msgstr ""
"reset onto\n"
"merge tlsv1.3\n"
"merge cmake\n"

#. type: Title -
#: ../Documentation-sedout/git-rebase.txt:1277
#, no-wrap
msgid "CONFIGURATION"
msgstr "CONFIGURATION"

#. type: Title -
#: ../Documentation-sedout/git-rebase.txt:1283
#, no-wrap
msgid "BUGS"
msgstr "BUGS"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1289
msgid ""
"The todo list presented by the deprecated `--preserve-merges --interactive` "
"does not represent the topology of the revision graph (use `--rebase-merges` "
"instead).  Editing commits and rewording their commit messages should work "
"fine, but attempts to reorder commits tend to produce counterintuitive "
"results.  Use `--rebase-merges` in such scenarios instead."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1291
msgid "For example, an attempt to rearrange"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:1293
#, no-wrap
msgid "1 --- 2 --- 3 --- 4 --- 5\n"
msgstr "1 --- 2 --- 3 --- 4 --- 5\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1295
msgid "to"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:1297
#, no-wrap
msgid "1 --- 2 --- 4 --- 3 --- 5\n"
msgstr "1 --- 2 --- 4 --- 3 --- 5\n"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1299
msgid "by moving the \"pick 4\" line will result in the following history:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-rebase.txt:1303
#, no-wrap
msgid ""
"\t3\n"
"       /\n"
"1 --- 2 --- 4 --- 5\n"
msgstr ""
"\t3\n"
"       /\n"
"1 --- 2 --- 4 --- 5\n"

#. type: Title -
#: ../Documentation-sedout/git-rebase.txt:1306
#, no-wrap
msgid "GIT"
msgstr "GIT"

#. type: Plain text
#: ../Documentation-sedout/git-rebase.txt:1307
msgid "Part of the linkgit:git[1] suite"
msgstr "Part of the linkgit:git[1] suite"
