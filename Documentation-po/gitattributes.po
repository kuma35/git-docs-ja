# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 0.0\n"
"POT-Creation-Date: 2021-11-04 04:37+0900\n"
"PO-Revision-Date: 2022-02-21 08:10+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/gitattributes.txt:2
#, no-wrap
msgid "gitattributes(5)"
msgstr "gitattributes(5)"

#. type: Title -
#: ../Documentation-sedout/gitattributes.txt:5
#, no-wrap
msgid "NAME"
msgstr "NAME"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:7
msgid "gitattributes - Defining attributes per path"
msgstr "gitattributes - パスごとの属性の定義"

#. type: Title -
#: ../Documentation-sedout/gitattributes.txt:9
#, no-wrap
msgid "SYNOPSIS"
msgstr "SYNOPSIS"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:11
msgid "$GIT_DIR/info/attributes, .gitattributes"
msgstr "$GIT_DIR/info/attributes, .gitattributes"

#. type: Title -
#: ../Documentation-sedout/gitattributes.txt:14
#, no-wrap
msgid "DESCRIPTION"
msgstr "DESCRIPTION"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:18
msgid ""
"A `gitattributes` file is a simple text file that gives `attributes` to "
"pathnames."
msgstr "`gitattributes` ファイルは、パス名に属性(attributes)を与える単純なテキストファイルです。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:20
msgid "Each line in `gitattributes` file is of form:"
msgstr "`gitattributes` ファイルの各行は以下の形式です:"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:22
#, no-wrap
msgid "\tpattern attr1 attr2 ...\n"
msgstr "\tpattern attr1 attr2 ...\n"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:29
msgid ""
"That is, a pattern followed by an attributes list, separated by whitespaces. "
"Leading and trailing whitespaces are ignored. Lines that begin with '#' are "
"ignored. Patterns that begin with a double quote are quoted in C style.  "
"When the pattern matches the path in question, the attributes listed on the "
"line are given to the path."
msgstr "つまり、パターンの後に空白(whitespaces)で区切られた属性リストが続きます。先頭と末尾の空白は無視されます。 '#' で始まる行は無視されます。 二重引用符(`\"`)で始まるパターンは、Cスタイルでクォートされます。パターンが問題のパスと一致すると、その行にリストされている属性がそのパスに与えられます。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:31
msgid "Each attribute can be in one of these states for a given path:"
msgstr "各属性は、特定のパスに対して以下のいずれかの状態になる可能性があります:"

#. type: Labeled list
#: ../Documentation-sedout/gitattributes.txt:32
#: ../Documentation-sedout/gitattributes.txt:132
#: ../Documentation-sedout/gitattributes.txt:710
#: ../Documentation-sedout/gitattributes.txt:1005
#: ../Documentation-sedout/gitattributes.txt:1137
#, no-wrap
msgid "Set"
msgstr "set(設定)"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:37
msgid ""
"The path has the attribute with special value \"true\"; this is specified by "
"listing only the name of the attribute in the attribute list."
msgstr "パスには、特別な値 `true` を持つ属性があります。これは、属性リストにその属性の名前のみをリストすることによって指定されます。"

#. type: Labeled list
#: ../Documentation-sedout/gitattributes.txt:38
#: ../Documentation-sedout/gitattributes.txt:138
#: ../Documentation-sedout/gitattributes.txt:716
#: ../Documentation-sedout/gitattributes.txt:1011
#: ../Documentation-sedout/gitattributes.txt:1143
#, no-wrap
msgid "Unset"
msgstr "unset(設定解除)"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:43
msgid ""
"The path has the attribute with special value \"false\"; this is specified "
"by listing the name of the attribute prefixed with a dash `-` in the "
"attribute list."
msgstr "パスには、特別な値 `false` を持つ属性があります。 これは、属性リストにダッシュ `-` で始まる属性の名前をリストすることによって指定されます。"

#. type: Labeled list
#: ../Documentation-sedout/gitattributes.txt:44
#, no-wrap
msgid "Set to a value"
msgstr "Set to a value(値を設定)"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:50
msgid ""
"The path has the attribute with specified string value; this is specified by "
"listing the name of the attribute followed by an equal sign `=` and its "
"value in the attribute list."
msgstr "パスには、指定の文字列値を持つ属性があります。これは、属性の名前の後に等号 `=` とその値を、属性リストにリストすることによって指定されます。"

#. type: Labeled list
#: ../Documentation-sedout/gitattributes.txt:51
#: ../Documentation-sedout/gitattributes.txt:150
#: ../Documentation-sedout/gitattributes.txt:722
#: ../Documentation-sedout/gitattributes.txt:1018
#: ../Documentation-sedout/gitattributes.txt:1147
#, no-wrap
msgid "Unspecified"
msgstr "unspecified(未指定)"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:56
msgid ""
"No pattern matches the path, and nothing says if the path has or does not "
"have the attribute, the attribute for the path is said to be Unspecified."
msgstr "パスに一致するパターンはなく、パスに属性があるかどうかはわかりません。パスの属性は未指定(unspecified)であると言われます。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:60
msgid ""
"When more than one pattern matches the path, a later line overrides an "
"earlier line.  This overriding is done per attribute."
msgstr "複数のパターンがパスに一致する場合、後の行が前の行をオーバーライドします。このオーバーライドは属性ごとに行われます。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:63
msgid ""
"The rules by which the pattern matches paths are the same as in `.gitignore` "
"files (see linkgit:gitignore[5]), with a few exceptions:"
msgstr "パターンがパスと一致するルールは、以下のいくつかの例外を除いて、 `.gitignore` ファイル(linkgit:gitignore[5] 参照)と同じです:"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:65
msgid "negative patterns are forbidden"
msgstr "否定パターンは使えません"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:69
msgid ""
"patterns that match a directory do not recursively match paths inside that "
"directory (so using the trailing-slash `path/` syntax is pointless in an "
"attributes file; use `path/**` instead)"
msgstr "ディレクトリに一致するパターンは、そのディレクトリ内のパスに再帰的に一致しません(したがって、属性ファイルで末尾のスラッシュの `path/` 構文を使用しても意味がありません。代わりに `path/**` を使用してください)"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:78
msgid ""
"When deciding what attributes are assigned to a path, Git consults `$GIT_DIR/"
"info/attributes` file (which has the highest precedence), `.gitattributes` "
"file in the same directory as the path in question, and its parent "
"directories up to the toplevel of the work tree (the further the directory "
"that contains `.gitattributes` is from the path in question, the lower its "
"precedence). Finally global and system-wide files are considered (they have "
"the lowest precedence)."
msgstr "パスに割り当てる属性を決定するとき、Gitは、(優先順位が最も高い) `$GIT_DIR/info/attributes` ファイルと、問題のパスと同じディレクトリにある `.gitattributes` ファイルと、作業ツリーの最上位までその親ディレクトリを参照します(`.gitattributes` を含むディレクトリが問題のパスから離れるほど、優先順位は低くなります)。最後に、(優先順位が最も低い)グローバルファイルとシステム全体のファイルが考慮されます。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:83
msgid ""
"When the `.gitattributes` file is missing from the work tree, the path in "
"the index is used as a fall-back.  During checkout process, `.gitattributes` "
"in the index is used and then the file in the working tree is used as a fall-"
"back."
msgstr "`.gitattributes` ファイルが作業ツリーにない場合、インデックス内のパスがフォールバックとして使用されます。チェックアウト処理では、インデックスの `.gitattributes` が使用され、作業ツリーのファイルがフォールバックとして使用されます。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:97
msgid ""
"If you wish to affect only a single repository (i.e., to assign attributes "
"to files that are particular to one user's workflow for that repository), "
"then attributes should be placed in the `$GIT_DIR/info/attributes` file.  "
"Attributes which should be version-controlled and distributed to other "
"repositories (i.e., attributes of interest to all users) should go into `."
"gitattributes` files. Attributes that should affect all repositories for a "
"single user should be placed in a file specified by the `core."
"attributesFile` configuration option (see linkgit:git-config[1]).  Its "
"default value is $XDG_CONFIG_HOME/git/attributes. If $XDG_CONFIG_HOME is "
"either not set or empty, $HOME/.config/git/attributes is used instead.  "
"Attributes for all users on a system should be placed in the `$(prefix)/etc/"
"gitattributes` file."
msgstr "単一のリポジトリのみに影響を与えたい(つまり、そのリポジトリの1人のユーザーのワークフローに固有のファイルに属性を割り当てる)場合は、属性を `$GIT_DIR/info/attributes` ファイルに配置する必要があります。バージョン管理して他のリポジトリに配布する必要がある属性(つまり、すべてのユーザーが関心を持つ属性)は、 `.gitattributes` ファイルに入れる必要があります(linkgit:git-config[1] を参照)。 あるユーザーのすべてのリポジトリに影響を与える属性は、 `core.attributesFile` 構成オプションで指定されたファイルに配置する必要があり、そのデフォルト値は $XDG_CONFIG_HOME/git/attributes です。 $XDG_CONFIG_HOME が設定されていないか空の場合、代わりに $HOME/.config/git/attributes が使用されます。システム上のすべてのユーザーの属性は、 `$(prefix)/etc/gitattributes` ファイルに配置する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:101
msgid ""
"Sometimes you would need to override a setting of an attribute for a path to "
"`Unspecified` state.  This can be done by listing the name of the attribute "
"prefixed with an exclamation point `!`."
msgstr "しばしばあなたは、 Unspecified(未指定)状態へのパスの属性の設定をオーバーライドする必要があります。これは、感嘆符 `!` が前に付いた属性の名前をリストすることで行えます。"

#. type: Title -
#: ../Documentation-sedout/gitattributes.txt:104
#, no-wrap
msgid "EFFECTS"
msgstr "EFFECTS"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:109
msgid ""
"Certain operations by Git can be influenced by assigning particular "
"attributes to a path.  Currently, the following operations are attributes-"
"aware."
msgstr "Gitによる特定の操作は、特定の属性をパスに割り当てることによって影響を受ける可能性があります。 現在、以下の操作は属性対応(attributes-aware)です。"

#. type: Title ~
#: ../Documentation-sedout/gitattributes.txt:111
#, no-wrap
msgid "Checking-out and checking-in"
msgstr "Checking-out and checking-in"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:119
msgid ""
"These attributes affect how the contents stored in the repository are copied "
"to the working tree files when commands such as 'git switch', 'git checkout' "
"and 'git merge' run.  They also affect how Git stores the contents you "
"prepare in the working tree in the repository upon 'git add' and 'git "
"commit'."
msgstr "これらの属性は、 `git switch` や `git checkout` や `git merge` などのコマンドが実行されたときに、リポジトリに保存されているコンテンツが作業ツリーファイルにコピーされる方法に影響します。 また、Gitが `git add` や `git commit` する時に準備したコンテンツをリポジトリの作業ツリーに保存する方法にも影響します。"

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:121
#, no-wrap
msgid "`text`"
msgstr "`text`"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:131
msgid ""
"This attribute enables and controls end-of-line normalization.  When a text "
"file is normalized, its line endings are converted to LF in the repository.  "
"To control what line ending style is used in the working directory, use the "
"`eol` attribute for a single file and the `core.eol` configuration variable "
"for all text files.  Note that setting `core.autocrlf` to `true` or `input` "
"overrides `core.eol` (see the definitions of those options in linkgit:git-"
"config[1])."
msgstr "この属性は、行末の正規化を有効にして制御します。テキストファイルが正規化されると、その行末はリポジトリ内でLFに変換されます。作業ディレクトリ内で使用される行末スタイルを制御するには、単一のファイルには `eol` 属性を使用し、すべてのテキストファイルには `core.eol` 構成変数を使用します。 `core.autocrlf` を `true` または `input` に設定すると、 `core.eol` がオーバーライドされることに注意してください(linkgit:git-config[1] のこれらのオプションの定義を参照してください)。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:137
msgid ""
"Setting the `text` attribute on a path enables end-of-line normalization and "
"marks the path as a text file.  End-of-line conversion takes place without "
"guessing the content type."
msgstr "パスに `text` 属性を設定すると、行末の正規化が有効になり、パスがテキストファイルとしてマークされます。行末変換は、コンテンツタイプを推測せずに行われます。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:142
msgid ""
"Unsetting the `text` attribute on a path tells Git not to attempt any end-of-"
"line conversion upon checkin or checkout."
msgstr "パスの `text` 属性を設定解除(unset)すると、チェックインまたはチェックアウト時に行末変換を試行しないようにGitに指示します。"

#. type: Labeled list
#: ../Documentation-sedout/gitattributes.txt:143
#, no-wrap
msgid "Set to string value \"auto\""
msgstr "Set to string value \"auto\""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:149
msgid ""
"When `text` is set to \"auto\", the path is marked for automatic end-of-line "
"conversion.  If Git decides that the content is text, its line endings are "
"converted to LF on checkin.  When the file has been committed with CRLF, no "
"conversion is done."
msgstr "`text` の値が \"auto\" に設定されている場合、パスは自動行末変換用にマークされます。Gitがコンテンツがテキストであると判断した場合、その行末はチェックイン時にLFに変換されます。ファイルがCRLFでコミットされている場合、変換は行われません。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:155
msgid ""
"If the `text` attribute is unspecified, Git uses the `core.autocrlf` "
"configuration variable to determine if the file should be converted."
msgstr "`text` 属性が指定されていない場合、Gitは `core.autocrlf` 構成変数を使用してファイルを変換する必要があるかどうかを判断します。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:158
msgid ""
"Any other value causes Git to act as if `text` has been left unspecified."
msgstr "その他の値の場合、Gitは `text` が未指定(unspecified)であるかのように動作します。"

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:160
#, no-wrap
msgid "`eol`"
msgstr "`eol`"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:168
msgid ""
"This attribute sets a specific line-ending style to be used in the working "
"directory.  It enables end-of-line conversion without any content checks, "
"effectively setting the `text` attribute.  Note that setting this attribute "
"on paths which are in the index with CRLF line endings may make the paths to "
"be considered dirty.  Adding the path to the index again will normalize the "
"line endings in the index."
msgstr "この属性は、作業ディレクトリ内で使用される特定の行末スタイルを設定します。コンテンツチェックなしで行末変換を可能にし、`text` 属性を効果的に設定します。インデックスにあるCRLF行末のパスにこの属性を設定すると、パスがダーティと見なされる可能性があることに注意してください。インデックスにパスを再度追加すると、インデックスの行末が正規化されます。"

#. type: Labeled list
#: ../Documentation-sedout/gitattributes.txt:169
#, no-wrap
msgid "Set to string value \"crlf\""
msgstr "文字列値 \"crlf\" を設定"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:174
msgid ""
"This setting forces Git to normalize line endings for this file on checkin "
"and convert them to CRLF when the file is checked out."
msgstr "この設定により、Gitはチェックイン時にこのファイルの行末を正規化し、ファイルがチェックアウトされるときにCRLFに変換します。"

#. type: Labeled list
#: ../Documentation-sedout/gitattributes.txt:175
#, no-wrap
msgid "Set to string value \"lf\""
msgstr "文字列値 \"lf\" を設定"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:180
msgid ""
"This setting forces Git to normalize line endings to LF on checkin and "
"prevents conversion to CRLF when the file is checked out."
msgstr "この設定により、Gitはチェックイン時に行末をLFに正規化し、ファイルがチェックアウトされたときにCRLFに変換されないようにします。"

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:182
#, no-wrap
msgid "Backwards compatibility with `crlf` attribute"
msgstr "`crlf` 属性との下位互換性"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:186
msgid ""
"For backwards compatibility, the `crlf` attribute is interpreted as follows:"
msgstr "下位互換性のために、 `crlf` 属性は以下のように解釈されます:"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:191
#, no-wrap
msgid ""
"crlf\t\ttext\n"
"-crlf\t\t-text\n"
"crlf=input\teol=lf\n"
msgstr ""
"crlf\t\ttext\n"
"-crlf\t\t-text\n"
"crlf=input\teol=lf\n"

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:194
#, no-wrap
msgid "End-of-line conversion"
msgstr "行末変換"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:199
msgid ""
"While Git normally leaves file contents alone, it can be configured to "
"normalize line endings to LF in the repository and, optionally, to convert "
"them to CRLF when files are checked out."
msgstr "Gitは通常、ファイルの内容をそのままにしますが、リポジトリ内で行末をLFに正規化し、オプションで、ファイルがチェックアウトされたときにCRLFに変換するように構成できます。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:203
msgid ""
"If you simply want to have CRLF line endings in your working directory "
"regardless of the repository you are working with, you can set the config "
"variable \"core.autocrlf\" without using any attributes."
msgstr "あなたが作業しているリポジトリに関係なく、あなたの作業ディレクトリ内でCRLF行末を設定したいだけの場合は、属性を使用せずに構成変数 `core.autocrlf` を設定できます。"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:207
#, no-wrap
msgid ""
"[core]\n"
"\tautocrlf = true\n"
msgstr ""
"[core]\n"
"\tautocrlf = true\n"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:213
msgid ""
"This does not force normalization of text files, but does ensure that text "
"files that you introduce to the repository have their line endings "
"normalized to LF when they are added, and that files that are already "
"normalized in the repository stay normalized."
msgstr "これにより、テキストファイルの正規化は強制されませんが、リポジトリに導入するテキストファイルの行末は、追加時にLFに正規化され、リポジトリですでに正規化されているファイルは正規化されたままになります。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:217
msgid ""
"If you want to ensure that text files that any contributor introduces to the "
"repository have their line endings normalized, you can set the `text` "
"attribute to \"auto\" for _all_ files."
msgstr "貢献者(contributor)がリポジトリに導入するテキストファイルの行末が正規化されていることを確認する場合は、「全て」のファイルに対して `text` 属性を \"auto\" に設定できます。"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:220
#, no-wrap
msgid "*\ttext=auto\n"
msgstr "*\ttext=auto\n"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:228
msgid ""
"The attributes allow a fine-grained control, how the line endings are "
"converted.  Here is an example that will make Git normalize .txt, .vcproj "
"and .sh files, ensure that .vcproj files have CRLF and .sh files have LF in "
"the working directory, and prevent .jpg files from being normalized "
"regardless of their content."
msgstr "属性を使用すると、行末の変換方法をきめ細かく制御できます。以下は、Gitが `.txt` と、`.vcproj` と `.sh` ファイルを正規化し、 `.vcproj` ファイルがCRLFを持ち、 `.sh` ファイルが作業ディレクトリでLFを持っていることを確認し、`.jpg` ファイルがその内容に関係なく正規化されないようにする例です。"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:235
#, no-wrap
msgid ""
"*               text=auto\n"
"*.txt\t\ttext\n"
"*.vcproj\ttext eol=crlf\n"
"*.sh\t\ttext eol=lf\n"
"*.jpg\t\t-text\n"
msgstr ""
"*               text=auto\n"
"*.txt\t\ttext\n"
"*.vcproj\ttext eol=crlf\n"
"*.sh\t\ttext eol=lf\n"
"*.jpg\t\t-text\n"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:240
msgid ""
"When `text=auto` conversion is enabled in a cross-platform project using "
"push and pull to a central repository the text files containing CRLFs should "
"be normalized."
msgstr "中央リポジトリへのプッシュとプルを使用してクロスプラットフォームプロジェクトで `text = auto` 変換が有効になっている場合、CRLFを含むテキストファイルを正規化する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:242
msgid "From a clean working directory:"
msgstr "クリーンな作業ディレクトリから始めます:"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:248
#, no-wrap
msgid ""
"$ echo \"* text=auto\" >.gitattributes\n"
"$ git add --renormalize .\n"
"$ git status        # Show files that will be normalized\n"
"$ git commit -m \"Introduce end-of-line normalization\"\n"
msgstr ""
"$ echo \"* text=auto\" >.gitattributes\n"
"$ git add --renormalize .\n"
"$ git status        # 正規化されるファイルを表示\n"
"$ git commit -m \"Introduce end-of-line normalization\"\n"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:252
msgid ""
"If any files that should not be normalized show up in 'git status', unset "
"their `text` attribute before running 'git add -u'."
msgstr "正規化してはならないファイルが `git status` に表示される場合は、 `git add -u` を実行する前に、以下のように `text` 属性の設定を解除してください。"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:255
#, no-wrap
msgid "manual.pdf\t-text\n"
msgstr "manual.pdf\t-text\n"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:259
msgid ""
"Conversely, text files that Git does not detect can have normalization "
"enabled manually."
msgstr "逆に、Gitが検出しないテキストファイルは、以下のように正規化を手動で有効にすることができます。"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:262
#, no-wrap
msgid "weirdchars.txt\ttext\n"
msgstr "weirdchars.txt\ttext\n"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:271
msgid ""
"If `core.safecrlf` is set to \"true\" or \"warn\", Git verifies if the "
"conversion is reversible for the current setting of `core.autocrlf`.  For "
"\"true\", Git rejects irreversible conversions; for \"warn\", Git only "
"prints a warning but accepts an irreversible conversion.  The safety "
"triggers to prevent such a conversion done to the files in the work tree, "
"but there are a few exceptions.  Even though..."
msgstr "`core.safecrlf` が \"true\" または \"warn\" に設定されている場合、Gitは変換が `core.autocrlf` の現在の設定に対して可逆的であるかどうかを確認します。 \"true\" の場合、Gitは不可逆的な変換を拒否します。 \"warn\" の場合、Gitは警告を出力するだけで、元に戻せない変換を受け入れます。作業ツリー内のファイルに対してこのような変換が行われるのを防ぐための安全トリガーがありますが、いくつかの例外がありますが、しかし…"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:274
msgid ""
"'git add' itself does not touch the files in the work tree, the next "
"checkout would, so the safety triggers;"
msgstr "'git add' 自体は作業ツリー内のファイルに影響を与えません。その次に行うチェックアウトは影響を与えるため、セーフティーがトリガーされます:"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:279
msgid ""
"'git apply' to update a text file with a patch does touch the files in the "
"work tree, but the operation is about text files and CRLF conversion is "
"about fixing the line ending inconsistencies, so the safety does not trigger;"
msgstr "パッチでテキストファイルを更新するための `git apply` は作業ツリー内のファイルに影響を与えますが、操作はテキストファイルに関するものであり、CRLF変換は行末の不整合の修正に関するものであるため、セーフティーはトリガーされません。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:283
msgid ""
"'git diff' itself does not touch the files in the work tree, it is often run "
"to inspect the changes you intend to next 'git add'.  To catch potential "
"problems early, safety triggers."
msgstr "`git diff` 自体は作業ツリー内のファイルに影響を与えません。多くの場合、次に `git add` する予定の変更を検査するために実行されます。潜在的な問題を早期に発見するために、セーフティーがトリガーされます。"

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:286
#, no-wrap
msgid "`working-tree-encoding`"
msgstr "`working-tree-encoding`"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:293
msgid ""
"Git recognizes files encoded in ASCII or one of its supersets (e.g.  UTF-8, "
"ISO-8859-1, ...) as text files. Files encoded in certain other encodings (e."
"g. UTF-16) are interpreted as binary and consequently built-in Git text "
"processing tools (e.g. 'git diff') as well as most Git web front ends do not "
"visualize the contents of these files by default."
msgstr "Gitは、ASCIIまたはそのスーパーセットの1つ(UTF-8、ISO-8859-1など)でエンコードされたファイルをテキストファイルとして認識します。他の特定のエンコーディング(UTF-16など)でエンコードされたファイルはバイナリとして解釈されるため、組み込みのGitテキスト処理ツール(`git diff` など)や、ほとんどのGitWebフロントエンドはデフォルトでこれらのファイルのコンテンツを視覚化しません 。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:300
msgid ""
"In these cases you can tell Git the encoding of a file in the working "
"directory with the `working-tree-encoding` attribute. If a file with this "
"attribute is added to Git, then Git re-encodes the content from the "
"specified encoding to UTF-8. Finally, Git stores the UTF-8 encoded content "
"in its internal data structure (called \"the index\"). On checkout the "
"content is re-encoded back to the specified encoding."
msgstr "このような場合、 `working-tree-encoding` 属性を使用して作業ディレクトリ内のファイルのエンコーディングをGitに指示できます。この属性を持つファイルがGitに追加されると、Gitは指定されたエンコーディングからUTF-8にコンテンツを再エンコードします。最後に、GitはUTF-8でエンコードされたコンテンツを内部データ構造(「インデックス」と呼ばれます)に格納します。チェックアウト時に、コンテンツは指定されたエンコーディングに再エンコードされます。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:303
msgid ""
"Please note that using the `working-tree-encoding` attribute may have a "
"number of pitfalls:"
msgstr "注意: `working-tree-encoding` 属性を使用すると、いくつかの落とし穴があることに注意してください:"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:309
msgid ""
"Alternative Git implementations (e.g. JGit or libgit2) and older Git "
"versions (as of March 2018) do not support the `working-tree-encoding` "
"attribute. If you decide to use the `working-tree-encoding` attribute in "
"your repository, then it is strongly recommended to ensure that all clients "
"working with the repository support it."
msgstr "(2018年3月現在、)代替のGit実装(JGitやlibgit2など)やGit古いバージョンは、 `working-tree-encoding` 属性をサポートしていません。リポジトリで `working-tree-encoding` 属性を使用する場合は、リポジトリを使用するすべてのクライアントがそれをサポートしていることを確認することを強くお勧めします。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:317
msgid ""
"For example, Microsoft Visual Studio resources files (`*.rc`) or PowerShell "
"script files (`*.ps1`) are sometimes encoded in UTF-16.  If you declare `*."
"ps1` as files as UTF-16 and you add `foo.ps1` with a `working-tree-encoding` "
"enabled Git client, then `foo.ps1` will be stored as UTF-8 internally. A "
"client without `working-tree-encoding` support will checkout `foo.ps1` as "
"UTF-8 encoded file. This will typically cause trouble for the users of this "
"file."
msgstr "たとえば、Microsoft Visual Studio リソースファイル(`*.rc`)またはPowerShellスクリプトファイル(`*.ps1`)は、UTF-16でエンコードされる場合があります。 `*.ps1` をUTF-16のファイルとして宣言し、 `working-tree-encoding` が有効なGitクライアントで `foo.ps1` を追加すると、 `foo.ps1` はUTF-8として内部に保存されます。 `working-tree-encoding` をサポートしていないクライアントは、 `foo.ps1` をUTF-8でエンコードされたファイルとしてチェックアウトします。これは通常、このファイルのユーザーに問題を引き起こします。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:324
msgid ""
"If a Git client that does not support the `working-tree-encoding` attribute "
"adds a new file `bar.ps1`, then `bar.ps1` will be stored \"as-is\" "
"internally (in this example probably as UTF-16).  A client with `working-"
"tree-encoding` support will interpret the internal contents as UTF-8 and try "
"to convert it to UTF-16 on checkout.  That operation will fail and cause an "
"error."
msgstr "`working-tree-encoding` 属性をサポートしないGitクライアントが新しいファイル `bar.ps1` を追加した場合、 `bar.ps1`は内部に「現状のまま」(この例ではおそらくUTF-16として)保存されます。そしてそれに対して、 `working-tree-encoding` をサポートするクライアントは、内部コンテンツをUTF-8として解釈し、チェックアウト時にUTF-16に変換しようとします。その操作は失敗し、エラーが発生します。"

# round trip;往復旅行
# wiki
# Unicode以前の文字コードとの相互運用性もある程度考慮されており、
# 歴史上・実用上の識別が求められる場合には互換領域がとられ、
# 元のコード→Unicode→元のコードというような変換（ラウンドトリップ変換）において、
# 元通りに戻るよう配慮されている文字もある。
# しかし、正規のJIS X 0208の範囲内であればトラブルは少ないが、
# 複数の文字集合が混在したり、Shift_JISの実態であるCP932やEUC-JPの亜種であるCP51932とeucJP-MSなど、対応が違うために文字化けを起こすことがある。
#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:332
msgid ""
"Reencoding content to non-UTF encodings can cause errors as the conversion "
"might not be UTF-8 round trip safe. If you suspect your encoding to not be "
"round trip safe, then add it to `core.checkRoundtripEncoding` to make Git "
"check the round trip encoding (see linkgit:git-config[1]). SHIFT-JIS "
"(Japanese character set) is known to have round trip issues with UTF-8 and "
"is checked by default."
msgstr "コンテンツを非UTFエンコーディングに再エンコードすると、変換がUTF-8ラウンドトリップセーフではない可能性があるため、エラーが発生する可能性があります。 エンコーディングがラウンドトリップセーフではないと思われる場合は、それを `core.checkRoundtripEncoding` に追加して、Gitにラウンドトリップエンコーディングをチェックさせます(linkgit:git-config[1] を参照)。 SHIFT-JIS(日本語文字セット)はUTF-8でラウンドトリップ問題があることが知られており、デフォルトでチェックされています。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:335
msgid ""
"Reencoding content requires resources that might slow down certain Git "
"operations (e.g 'git checkout' or 'git add')."
msgstr "コンテンツを再エンコードするには、計算機資源が必要なため、特定のGit操作(`git checkout` や `git add` など)の速度を低下させる可能性があります。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:339
msgid ""
"Use the `working-tree-encoding` attribute only if you cannot store a file in "
"UTF-8 encoding and if you want Git to be able to process the content as text."
msgstr "`working-tree-encoding` 属性は、ファイルをUTF-8エンコーディングで保存できない場合や、Gitでコンテンツをテキストとして処理できるようにする場合にのみ使用してください。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:343
msgid ""
"As an example, use the following attributes if your '*.ps1' files are UTF-16 "
"encoded with byte order mark (BOM) and you want Git to perform automatic "
"line ending conversion based on your platform."
msgstr "例として、 あなたの '*.ps1' ファイルがバイトオーダーマーク(BOM)付きでUTF-16エンコードされており、Gitであなたのプラットフォームに基づいて自動行末変換を実行する場合、以下の属性を使用します。"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:346
#, no-wrap
msgid "*.ps1\t\ttext working-tree-encoding=UTF-16\n"
msgstr "*.ps1\t\ttext working-tree-encoding=UTF-16\n"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:355
msgid ""
"Use the following attributes if your '*.ps1' files are UTF-16 little endian "
"encoded without BOM and you want Git to use Windows line endings in the "
"working directory (use `UTF-16LE-BOM` instead of `UTF-16LE` if you want "
"UTF-16 little endian with BOM).  Please note, it is highly recommended to "
"explicitly define the line endings with `eol` if the `working-tree-encoding` "
"attribute is used to avoid ambiguity."
msgstr "あなたの '* .ps1' ファイルがBOMなしでUTF-16リトルエンディアンでエンコードされており、Gitで作業ディレクトリのWindows行末を使用する場合は、以下の属性を使用します(BOMを使用したUTF-16リトルエンディアンが必要な場合、 `UTF-16LE` の代わりに `UTF-16LE-BOM` を使用します)。あいまいさを避けるために `working-tree-encoding` 属性を使用する場合は、行末を `eol` で明示的に定義することを強くお勧めします。"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:358
#, no-wrap
msgid "*.ps1\t\ttext working-tree-encoding=UTF-16LE eol=CRLF\n"
msgstr "*.ps1\t\ttext working-tree-encoding=UTF-16LE eol=CRLF\n"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:362
msgid ""
"You can get a list of all available encodings on your platform with the "
"following command:"
msgstr "あなたは以下のコマンドを使用して、あなたのプラットフォームで使用可能なすべてのエンコーディングのリストを取得できます:"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:365
#, no-wrap
msgid "iconv --list\n"
msgstr "iconv --list\n"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:369
msgid ""
"If you do not know the encoding of a file, then you can use the `file` "
"command to guess the encoding:"
msgstr "ファイルのエンコーディングがわからない場合、あなたは `file` コマンドを使用してエンコーディングを推測できます:"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:372
#, no-wrap
msgid "file foo.ps1\n"
msgstr "file foo.ps1\n"

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:376
#, no-wrap
msgid "`ident`"
msgstr "`ident`"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:384
msgid ""
"When the attribute `ident` is set for a path, Git replaces `$Id$` in the "
"blob object with `$Id:`, followed by the 40-character hexadecimal blob "
"object name, followed by a dollar sign `$` upon checkout.  Any byte sequence "
"that begins with `$Id:` and ends with `$` in the worktree file is replaced "
"with `$Id$` upon check-in."
msgstr "パスに属性 `ident` が設定されている場合、Gitはチェックアウト時にブロブオブジェクト内の `$Id$` を `$Id:` に置き換え、その後に40文字の16進ブロブオブジェクト名が続き、その後にドル記号 `$` が続きます。ワークツリーファイルで `$Id:` で始まり、 `$` で終わるバイトシーケンスは、チェックイン時に `$Id$` に置き換えられます。"

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:387
#, no-wrap
msgid "`filter`"
msgstr "`filter`"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:391
msgid ""
"A `filter` attribute can be set to a string value that names a filter driver "
"specified in the configuration."
msgstr "filter` 属性には、構成で指定されたフィルタドライバの名前を文字列で指定することができます。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:407
msgid ""
"A filter driver consists of a `clean` command and a `smudge` command, either "
"of which can be left unspecified.  Upon checkout, when the `smudge` command "
"is specified, the command is fed the blob object from its standard input, "
"and its standard output is used to update the worktree file.  Similarly, the "
"`clean` command is used to convert the contents of worktree file upon "
"checkin. By default these commands process only a single blob and terminate. "
"If a long running `process` filter is used in place of `clean` and/or "
"`smudge` filters, then Git can process all blobs with a single filter "
"command invocation for the entire life of a single Git command, for example "
"`git add --all`. If a long running `process` filter is configured then it "
"always takes precedence over a configured single blob filter. See section "
"below for the description of the protocol used to communicate with a "
"`process` filter."
msgstr "フィルタドライバは、 `clean` コマンドと `smudge` コマンドで構成されており、どちらも指定しないでおくことができます。チェックアウト時に、 `smudge` コマンドが指定されると、コマンドはその標準入力からブロブオブジェクトを供給され、その標準出力はワークツリーファイルを更新するために使用されます。同様に、 `clean` コマンドはチェックイン時にワークツリーファイルの内容を変換するために使用されます。デフォルトでは、これらのコマンドは単一のブロブのみを処理して終了します。長時間実行される `process` フィルターが `clean` および/または `smudge` フィルターの代わりに使用される場合、Gitは単一のGitコマンドの存続期間中、単一のフィルターコマンド呼び出しですべてのブロブを処理できます。例えば `git --all` を追加します。長時間実行される `process` フィルターが構成されている場合、構成された単一のブロブフィルターよりも常に優先されます。 `process` フィルターとの通信に使用されるプロトコルの説明については、以下のセクションを参照してください。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:414
msgid ""
"One use of the content filtering is to massage the content into a shape that "
"is more convenient for the platform, filesystem, and the user to use.  For "
"this mode of operation, the key phrase here is \"more convenient\" and not "
"\"turning something unusable into usable\".  In other words, the intent is "
"that if someone unsets the filter driver definition, or does not have the "
"appropriate filter program, the project should still be usable."
msgstr "コンテンツフィルタリングの用途の1つは、プラットフォームやファイルシステムやユーザーが使用しやすい形にコンテンツをもみもみ(massage)することです。この操作モードでは、ここでのキーワードは「より便利」であり、「使用できないものを使用可能にする」ではありません。 つまり、誰かがフィルタードライバーの定義を設定解除した場合、または適切なフィルタープログラムを持っていない場合でも、プロジェクトは引き続き使用可能である必要があります。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:420
msgid ""
"Another use of the content filtering is to store the content that cannot be "
"directly used in the repository (e.g. a UUID that refers to the true content "
"stored outside Git, or an encrypted content) and turn it into a usable form "
"upon checkout (e.g. download the external content, or decrypt the encrypted "
"content)."
msgstr "コンテンツフィルタリングのもう1つの用途は、リポジトリに直接使用できないコンテンツ(Gitの外部に保存されている実際のコンテンツを参照するUUIDや暗号化されたコンテンツなど)を保存し、チェックアウト時に使用可能な形式に変換することです(例: 外部コンテンツをダウンロードする、または暗号化されたコンテンツを復号化する)。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:425
msgid ""
"These two filters behave differently, and by default, a filter is taken as "
"the former, massaging the contents into more convenient shape.  A missing "
"filter driver definition in the config, or a filter driver that exits with a "
"non-zero status, is not an error but makes the filter a no-op passthru."
msgstr "これらの2つのフィルターの振る舞い異なり、デフォルトでは、フィルターは前者と見なされ、コンテンツをより便利な形にもみもみ(massage)します。構成にフィルタードライバー定義がないか、ゼロ以外のステータスで終了するフィルタードライバーはエラーではありませんが、フィルターを無操作パススルーにします。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:429
msgid ""
"You can declare that a filter turns a content that by itself is unusable "
"into a usable content by setting the filter.<driver>.required configuration "
"variable to `true`."
msgstr "filter.<driver>.required 構成変数を `true` に設定することにより、フィルター自体が使用できないコンテンツを使用可能なコンテンツに変換することを宣言できます。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:432
msgid ""
"Note: Whenever the clean filter is changed, the repo should be renormalized: "
"$ git add --renormalize ."
msgstr "注意: clean フィルターを変更するたびに、リポジトリを再正規化する必要があります: $ git add --renormalize"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:435
msgid ""
"For example, in .gitattributes, you would assign the `filter` attribute for "
"paths."
msgstr "たとえば、 `.gitattributes` で、あなたはパスに `filter` 属性を割り当てるとします。"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:438
#, no-wrap
msgid "*.c\tfilter=indent\n"
msgstr "*.c\tfilter=indent\n"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:445
msgid ""
"Then you would define a \"filter.indent.clean\" and \"filter.indent.smudge\" "
"configuration in your .git/config to specify a pair of commands to modify "
"the contents of C programs when the source files are checked in (\"clean\" "
"is run) and checked out (no change is made because the command is \"cat\")."
msgstr "次に、あなたは以下のように `.git/config` で `filter.indent.clean` と `filter.indent.smudge` 構成を定義して、ソースファイルがチェックインされたとき(`clean` が実行されます)と、チェックアウトされたとき(コマンドが `cat` であるため、変更は行われません)、にCプログラムの内容を変更するコマンドのペアを指定します。"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:450
#, no-wrap
msgid ""
"[filter \"indent\"]\n"
"\tclean = indent\n"
"\tsmudge = cat\n"
msgstr ""
"[filter \"indent\"]\n"
"\tclean = indent\n"
"\tsmudge = cat\n"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:457
msgid ""
"For best results, `clean` should not alter its output further if it is run "
"twice (\"clean->clean\" should be equivalent to \"clean\"), and multiple "
"`smudge` commands should not alter `clean`'s output (\"smudge->smudge->clean"
"\" should be equivalent to \"clean\").  See the section on merging below."
msgstr "最良の結果を得るには、 `clean` を2回実行しても出力を変更しないでください(\"clean→clean\" は \"clean\" と同等である必要があります)。また、複数の `smudge` コマンドで `clean` の出力を変更しないでください(\"smudge→smudge→clean\" は \"clean” と同等である必要があります)。 以下のmergingセクションを参照してください。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:462
msgid ""
"The \"indent\" filter is well-behaved in this regard: it will not modify "
"input that is already correctly indented.  In this case, the lack of a "
"smudge filter means that the clean filter _must_ accept its own output "
"without modifying it."
msgstr "\"indent\" フィルターは、この点で適切に動作します。すでに正しくインデントされている入力は変更されません。この場合、smudgeフィルターがないということは、cleanフィルターが自身の出力を変更せずに受け入れる必要があることを意味します。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:465
msgid ""
"If a filter _must_ succeed in order to make the stored contents usable, you "
"can declare that the filter is `required`, in the configuration:"
msgstr "保存されたコンテンツを使用可能にするためにフィルターが成功する必要がある場合は、構成でフィルターが `required` (必須)であることを宣言できます:"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:471
#, no-wrap
msgid ""
"[filter \"crypt\"]\n"
"\tclean = openssl enc ...\n"
"\tsmudge = openssl enc -d ...\n"
"\trequired\n"
msgstr ""
"[filter \"crypt\"]\n"
"\tclean = openssl enc ...\n"
"\tsmudge = openssl enc -d ...\n"
"\trequired\n"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:476
msgid ""
"Sequence \"%f\" on the filter command line is replaced with the name of the "
"file the filter is working on.  A filter might use this in keyword "
"substitution.  For example:"
msgstr "フィルタコマンドラインのシーケンス `%f` は、フィルタが機能しているファイルの名前に置き換えられます。フィルタはこれをキーワード置換で使用する場合があります。例えば:"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:481
#, no-wrap
msgid ""
"[filter \"p4\"]\n"
"\tclean = git-p4-filter --clean %f\n"
"\tsmudge = git-p4-filter --smudge %f\n"
msgstr ""
"[filter \"p4\"]\n"
"\tclean = git-p4-filter --clean %f\n"
"\tsmudge = git-p4-filter --smudge %f\n"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:488
msgid ""
"Note that \"%f\" is the name of the path that is being worked on. Depending "
"on the version that is being filtered, the corresponding file on disk may "
"not exist, or may have different contents. So, smudge and clean commands "
"should not try to access the file on disk, but only act as filters on the "
"content provided to them on standard input."
msgstr "注意: `%f` は、作業中のパスの名前であることに注意してください。フィルタリングされているバージョンによっては、ディスク上の対応するファイルが存在しないか、内容が異なる場合があります。したがって、smudgeおよびcleanコマンドは、ディスク上のファイルにアクセスしようとするのではなく、標準入力で提供されるコンテンツのフィルターとしてのみ機能する必要があります。"

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:490
#, no-wrap
msgid "Long Running Filter Process"
msgstr "Long Running Filter Process"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:497
msgid ""
"If the filter command (a string value) is defined via `filter.<driver>."
"process` then Git can process all blobs with a single filter invocation for "
"the entire life of a single Git command. This is achieved by using the long-"
"running process protocol (described in technical/long-running-process-"
"protocol.txt)."
msgstr "フィルタコマンド(文字列値)が `filter.<driver>.process` を介して定義されている場合、Gitは単一のGitコマンドの存続期間中、単一のフィルタ呼び出しですべてのブロブを処理できます。 これは、長時間実行プロセスプロトコル( technical/long-running-process-protocol.txt にて説明)を使用して実現されます。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:503
msgid ""
"When Git encounters the first file that needs to be cleaned or smudged, it "
"starts the filter and performs the handshake. In the handshake, the welcome "
"message sent by Git is \"git-filter-client\", only version 2 is supported, "
"and the supported capabilities are \"clean\", \"smudge\", and \"delay\"."
msgstr "Gitは、クリーニング(cleaned)またはスマッジング(smudged)が必要な最初のファイルを検出すると、フィルターを開始してハンドシェイクを実行します。ハンドシェイクでは、Gitによって送信されるウェルカムメッセージは \"git-filter-client\" であり、プロトコルバージョン2(\"version=2\")のみがサポートされ、サポートされる機能は \"clean\" と \"smudge\" と ”delay\" です。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:514
msgid ""
"Afterwards Git sends a list of \"key=value\" pairs terminated with a flush "
"packet. The list will contain at least the filter command (based on the "
"supported capabilities) and the pathname of the file to filter relative to "
"the repository root. Right after the flush packet Git sends the content "
"split in zero or more pkt-line packets and a flush packet to terminate "
"content. Please note, that the filter must not send any response before it "
"received the content and the final flush packet. Also note that the \"value"
"\" of a \"key=value\" pair can contain the \"=\" character whereas the key "
"would never contain that character."
msgstr "その後、Gitはフラッシュパケットで終了する \"key=value\" ペアのリストを送信します。リストには、少なくとも(サポートされている機能に基づく)フィルターコマンドと、リポジトリルートを基準にしてフィルタリングするファイルのパス名が含まれます。フラッシュパケットの直後に、Gitはコンテンツを0個以上のpkt-lineパケットに分割して送信し、フラッシュパケットを送信してコンテンツを終了します。フィルタは、コンテンツと最終的なフラッシュパケットを受信する前に、応答を送信してはならないことに注意してください。 また、 \"key=value\" ペアの「value」には「=」文字を含めることができますが、キーには含めることはできません。"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:520
#, no-wrap
msgid ""
"packet:          git> command=smudge\n"
"packet:          git> pathname=path/testfile.dat\n"
"packet:          git> 0000\n"
"packet:          git> CONTENT\n"
"packet:          git> 0000\n"
msgstr ""
"packet:          git> command=smudge\n"
"packet:          git> pathname=path/testfile.dat\n"
"packet:          git> 0000\n"
"packet:          git> CONTENT\n"
"packet:          git> 0000\n"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:531
msgid ""
"The filter is expected to respond with a list of \"key=value\" pairs "
"terminated with a flush packet. If the filter does not experience problems "
"then the list must contain a \"success\" status. Right after these packets "
"the filter is expected to send the content in zero or more pkt-line packets "
"and a flush packet at the end. Finally, a second list of \"key=value\" pairs "
"terminated with a flush packet is expected. The filter can change the status "
"in the second list or keep the status as is with an empty list. Please note "
"that the empty list must be terminated with a flush packet regardless."
msgstr "フィルタは、フラッシュパケットで終了する \"key=value\" ペアのリストで応答することが期待されます。フィルタで問題が発生しない場合は、リストに \"success\" ステータスが含まれている必要があります。これらのパケットの直後に、フィルターはコンテンツを0個以上のpkt-lineパケットで送信し、最後にフラッシュパケットを送信することが期待されます。最後に、フラッシュパケットで終了する \"key=value\" ペアの2番目のリストが必要です。フィルタは、2番目のリストのステータスを変更したり、空のリストでステータスをそのまま維持したりできます。空のリストは、フラッシュパケットで終了する必要があることに注意してください。"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:538
#, no-wrap
msgid ""
"packet:          git< status=success\n"
"packet:          git< 0000\n"
"packet:          git< SMUDGED_CONTENT\n"
"packet:          git< 0000\n"
"packet:          git< 0000  # empty list, keep \"status=success\" unchanged!\n"
msgstr ""
"packet:          git< status=success\n"
"packet:          git< 0000\n"
"packet:          git< SMUDGED_CONTENT\n"
"packet:          git< 0000\n"
"packet:          git< 0000  # empty list, keep \"status=success\" unchanged!\n"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:542
msgid ""
"If the result content is empty then the filter is expected to respond with a "
"\"success\" status and a flush packet to signal the empty content."
msgstr "結果のコンテンツが空の場合、フィルターは \"success\" ステータスとフラッシュパケットで応答して、空のコンテンツを通知することが期待されます。"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:547
#, no-wrap
msgid ""
"packet:          git< status=success\n"
"packet:          git< 0000\n"
"packet:          git< 0000  # empty content!\n"
"packet:          git< 0000  # empty list, keep \"status=success\" unchanged!\n"
msgstr ""
"packet:          git< status=success\n"
"packet:          git< 0000\n"
"packet:          git< 0000  # empty content!\n"
"packet:          git< 0000  # empty list, keep \"status=success\" unchanged!\n"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:551
msgid ""
"In case the filter cannot or does not want to process the content, it is "
"expected to respond with an \"error\" status."
msgstr "フィルタがコンテンツを処理できない、または処理したくない場合は、 \"error\" ステータスで応答することが期待されます。"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:554
#, no-wrap
msgid ""
"packet:          git< status=error\n"
"packet:          git< 0000\n"
msgstr ""
"packet:          git< status=error\n"
"packet:          git< 0000\n"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:559
msgid ""
"If the filter experiences an error during processing, then it can send the "
"status \"error\" after the content was (partially or completely) sent."
msgstr "フィルタの処理中にエラーが発生した場合、コンテンツが(部分的または完全に)送信された後、ステータス \"error\" を送信できます。"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:566
#, no-wrap
msgid ""
"packet:          git< status=success\n"
"packet:          git< 0000\n"
"packet:          git< HALF_WRITTEN_ERRONEOUS_CONTENT\n"
"packet:          git< 0000\n"
"packet:          git< status=error\n"
"packet:          git< 0000\n"
msgstr ""
"packet:          git< status=success\n"
"packet:          git< 0000\n"
"packet:          git< HALF_WRITTEN_ERRONEOUS_CONTENT\n"
"packet:          git< 0000\n"
"packet:          git< status=error\n"
"packet:          git< 0000\n"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:572
msgid ""
"In case the filter cannot or does not want to process the content as well as "
"any future content for the lifetime of the Git process, then it is expected "
"to respond with an \"abort\" status at any point in the protocol."
msgstr "フィルタがGitプロセスの存続期間中、コンテンツと将来のコンテンツを処理できない、または処理したくない場合は、プロトコルの任意の時点で \"abort\" ステータスで応答することが期待されます。"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:575
#, no-wrap
msgid ""
"packet:          git< status=abort\n"
"packet:          git< 0000\n"
msgstr ""
"packet:          git< status=abort\n"
"packet:          git< 0000\n"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:582
msgid ""
"Git neither stops nor restarts the filter process in case the \"error\"/"
"\"abort\" status is set. However, Git sets its exit code according to the "
"`filter.<driver>.required` flag, mimicking the behavior of the `filter."
"<driver>.clean` / `filter.<driver>.smudge` mechanism."
msgstr "\"error\"/\"abort\" ステータスが設定されている場合、Gitはフィルタープロセスを停止も再開もしません。 ただし、Gitは `filter.<driver>.required`フラグに従って終了コードを設定し、 `filter.<driver>.clean` / `filter.<driver>.smudge` メカニズムの振る舞いを真似っこします。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:587
msgid ""
"If the filter dies during the communication or does not adhere to the "
"protocol then Git will stop the filter process and restart it with the next "
"file that needs to be processed. Depending on the `filter.<driver>.required` "
"flag Git will interpret that as error."
msgstr "通信中にフィルターが停止した場合、またはプロトコルに準拠していない場合、Gitはフィルタープロセスを停止し、処理が必要な次のファイルでフィルターを再開します。 `filter.<driver>.required` フラグの設定によっては、Gitはそれをエラーとして解釈します。"

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:589
#, no-wrap
msgid "Delay"
msgstr "Delay"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:596
msgid ""
"If the filter supports the \"delay\" capability, then Git can send the flag "
"\"can-delay\" after the filter command and pathname. This flag denotes that "
"the filter can delay filtering the current blob (e.g. to compensate network "
"latencies) by responding with no content but with the status \"delayed\" and "
"a flush packet."
msgstr "フィルタが \"delay\" 機能をサポートしている場合、Gitはフィルタコマンドとパス名の後にフラグ \"can-delay\" を送信できます。このフラグは、コンテンツなしでステータス \"delayed\" とフラッシュパケットで応答することにより、フィルターが現在のブロブのフィルタリングを遅らせることができることを示します(たとえば、ネットワーク遅延を補正するため)。"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:605
#, no-wrap
msgid ""
"packet:          git> command=smudge\n"
"packet:          git> pathname=path/testfile.dat\n"
"packet:          git> can-delay=1\n"
"packet:          git> 0000\n"
"packet:          git> CONTENT\n"
"packet:          git> 0000\n"
"packet:          git< status=delayed\n"
"packet:          git< 0000\n"
msgstr ""
"packet:          git> command=smudge\n"
"packet:          git> pathname=path/testfile.dat\n"
"packet:          git> can-delay=1\n"
"packet:          git> 0000\n"
"packet:          git> CONTENT\n"
"packet:          git> 0000\n"
"packet:          git< status=delayed\n"
"packet:          git< 0000\n"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:619
msgid ""
"If the filter supports the \"delay\" capability then it must support the "
"\"list_available_blobs\" command. If Git sends this command, then the filter "
"is expected to return a list of pathnames representing blobs that have been "
"delayed earlier and are now available.  The list must be terminated with a "
"flush packet followed by a \"success\" status that is also terminated with a "
"flush packet. If no blobs for the delayed paths are available, yet, then the "
"filter is expected to block the response until at least one blob becomes "
"available. The filter can tell Git that it has no more delayed blobs by "
"sending an empty list. As soon as the filter responds with an empty list, "
"Git stops asking. All blobs that Git has not received at this point are "
"considered missing and will result in an error."
msgstr "フィルタが \"delay\" 機能をサポートしている場合は、 \"list_available_blobs\" コマンドをサポートしている必要があります。Gitがこのコマンドを送信すると、フィルターは、以前に遅延されて現在使用可能なブロブを表すパス名のリストを返すことが期待されます。リストはフラッシュパケットで終了する必要があり、その後に \"success\" ステータスが続き、これもフラッシュパケットで終了します。 遅延パスのブロブがまだ利用できない場合、フィルターは少なくとも1つのブロブが利用可能になるまで応答をブロックすることが期待されます。フィルタは、空のリストを送信することで、遅延ブロブがなくなったことをGitに伝えることができます。フィルタが空のリストで応答するとすぐに、Gitは質問を停止します。この時点でGitが受信していないすべてのブロブは欠落していると見なされ、エラーが発生します。"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:628
#, no-wrap
msgid ""
"packet:          git> command=list_available_blobs\n"
"packet:          git> 0000\n"
"packet:          git< pathname=path/testfile.dat\n"
"packet:          git< pathname=path/otherfile.dat\n"
"packet:          git< 0000\n"
"packet:          git< status=success\n"
"packet:          git< 0000\n"
msgstr ""
"packet:          git> command=list_available_blobs\n"
"packet:          git> 0000\n"
"packet:          git< pathname=path/testfile.dat\n"
"packet:          git< pathname=path/otherfile.dat\n"
"packet:          git< 0000\n"
"packet:          git< status=success\n"
"packet:          git< 0000\n"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:634
msgid ""
"After Git received the pathnames, it will request the corresponding blobs "
"again. These requests contain a pathname and an empty content section. The "
"filter is expected to respond with the smudged content in the usual way as "
"explained above."
msgstr "Gitはパス名を受け取った後、対応するブロブを再度要求します。これらのリクエストには、パス名と空のコンテンツセクションが含まれています。フィルターは、上記で説明した通常の方法で汚れたコンテンツ(smudged content)に応答することが期待されます。"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:644
#, no-wrap
msgid ""
"packet:          git> command=smudge\n"
"packet:          git> pathname=path/testfile.dat\n"
"packet:          git> 0000\n"
"packet:          git> 0000  # empty content!\n"
"packet:          git< status=success\n"
"packet:          git< 0000\n"
"packet:          git< SMUDGED_CONTENT\n"
"packet:          git< 0000\n"
"packet:          git< 0000  # empty list, keep \"status=success\" unchanged!\n"
msgstr ""
"packet:          git> command=smudge\n"
"packet:          git> pathname=path/testfile.dat\n"
"packet:          git> 0000\n"
"packet:          git> 0000  # empty content!\n"
"packet:          git< status=success\n"
"packet:          git< 0000\n"
"packet:          git< SMUDGED_CONTENT\n"
"packet:          git< 0000\n"
"packet:          git< 0000  # empty list, keep \"status=success\" unchanged!\n"

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:647
#, no-wrap
msgid "Example"
msgstr "Example"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:654
msgid ""
"A long running filter demo implementation can be found in `contrib/long-"
"running-filter/example.pl` located in the Git core repository. If you "
"develop your own long running filter process then the `GIT_TRACE_PACKET` "
"environment variables can be very helpful for debugging (see linkgit:git[1])."
msgstr "長時間実行されるフィルターのデモの実装は、Gitコアリポジトリにある  `contrib/long-running-filter/example.pl` にあります。 独自の長時間実行フィルタープロセスを開発する場合は、 `GIT_TRACE_PACKET` 環境変数がデバッグに非常に役立ちます(linkgit:git[1] を参照)。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:659
msgid ""
"Please note that you cannot use an existing `filter.<driver>.clean` or "
"`filter.<driver>.smudge` command with `filter.<driver>.process` because the "
"former two use a different inter process communication protocol than the "
"latter one."
msgstr "既存の `filter.<driver>.clean` や `filter.<driver>.smudge` コマンドを `filter.<driver>.process` で使用できないことに注意してください。前者は後者とは異なるプロセス間通信プロトコルを使用するからです。"

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:662
#, no-wrap
msgid "Interaction between checkin/checkout attributes"
msgstr "チェックイン/チェックアウト属性間の相互作用"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:669
msgid ""
"In the check-in codepath, the worktree file is first converted with `filter` "
"driver (if specified and corresponding driver defined), then the result is "
"processed with `ident` (if specified), and then finally with `text` (again, "
"if specified and applicable)."
msgstr "チェックインのコードの流れでは、ワークツリーファイルは最初に(指定され、対応するドライバーが定義されている場合、) `filter` ドライバーで変換され、次に結果が(指定されている場合) `ident`で処理され、最後に(指定されて適用可能な場合) `text`で処理されます。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:672
msgid ""
"In the check-out codepath, the blob content is first converted with `text`, "
"and then `ident` and fed to `filter`."
msgstr "チェックアウトのコードの流れでは、ブロブコンテンツは最初に `text` で変換され、次に `ident` で変換され、 `filter` に送られます。"

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:675
#, no-wrap
msgid "Merging branches with differing checkin/checkout attributes"
msgstr "チェックイン/チェックアウト属性が異なるブランチをマージする"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:682
msgid ""
"If you have added attributes to a file that cause the canonical repository "
"format for that file to change, such as adding a clean/smudge filter or text/"
"eol/ident attributes, merging anything where the attribute is not in place "
"would normally cause merge conflicts."
msgstr "clean/smudge フィルターや text/eol/ident 属性の追加など、そのファイルの正規リポジトリ形式を変更する属性をファイルに追加した場合、属性が配置されていない場所で何かをマージすると、通常、マージの競合が発生します。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:689
msgid ""
"To prevent these unnecessary merge conflicts, Git can be told to run a "
"virtual check-out and check-in of all three stages of a file when resolving "
"a three-way merge by setting the `merge.renormalize` configuration "
"variable.  This prevents changes caused by check-in conversion from causing "
"spurious merge conflicts when a converted file is merged with an unconverted "
"file."
msgstr "これらの不必要なマージの競合を防ぐために、Gitは、 `merge.renormalize` 構成変数を設定することにより、3方向マージを解決するときに、ファイルの3つのステージすべての仮想チェックアウトとチェックインを実行するように指示できます。これにより、チェックイン変換によって引き起こされた変更によって、変換されたファイルが変換されていないファイルとマージされるときに、誤ったマージの競合が発生するのを防ぐことができます。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:695
msgid ""
"As long as a \"smudge->clean\" results in the same output as a \"clean\" "
"even on files that are already smudged, this strategy will automatically "
"resolve all filter-related conflicts.  Filters that do not act in this way "
"may cause additional merge conflicts that must be resolved manually."
msgstr "「smudge→clean」の結果がすでに汚されている(smudged)ファイルでも「clean」と同じ出力になる限り、この戦略はすべてのフィルター関連の競合を自動的に解決します。このように機能しないフィルターは、手動で解決する必要がある追加のマージ競合を引き起こす可能性があります。"

#. type: Title ~
#: ../Documentation-sedout/gitattributes.txt:698
#, no-wrap
msgid "Generating diff text"
msgstr "Generating diff text"

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:701
#, no-wrap
msgid "`diff`"
msgstr "`diff`"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:709
msgid ""
"The attribute `diff` affects how Git generates diffs for particular files. "
"It can tell Git whether to generate a textual patch for the path or to treat "
"the path as a binary file.  It can also affect what line is shown on the "
"hunk header `@@ -k,l +n,m @@` line, tell Git to use an external command to "
"generate the diff, or ask Git to convert binary files to a text format "
"before generating the diff."
msgstr "属性 `diff` は、Gitが特定のファイルのdiffを生成する方法に影響を与えます。パスのテキストパッチを生成するか、パスをバイナリファイルとして扱うかをGitに指示できます。 また、ハンクヘッダーの `@@ -k,l +n,m @@` 行に表示される行に影響を与えたり、外部コマンドを使用して差分を生成するようにGitに指示したり、差分を生成する前にバイナリファイルをテキスト形式に変換するようにGitに依頼したりすることもできます。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:715
msgid ""
"A path to which the `diff` attribute is set is treated as text, even when "
"they contain byte values that normally never appear in text files, such as "
"NUL."
msgstr "`diff` 属性が設定されているパスは、NULなどのテキストファイルには通常表示されないバイト値が含まれている場合でも、テキストとして扱われます。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:721
msgid ""
"A path to which the `diff` attribute is unset will generate `Binary files "
"differ` (or a binary patch, if binary patches are enabled)."
msgstr "`diff` 属性が設定されていないパスは、 `Binary files differ` (バイナリファイル差分) (または、バイナリパッチが有効になっている場合、バイナリパッチ) を生成します。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:728
msgid ""
"A path to which the `diff` attribute is unspecified first gets its contents "
"inspected, and if it looks like text and is smaller than core."
"bigFileThreshold, it is treated as text. Otherwise it would generate `Binary "
"files differ`."
msgstr "`diff` 属性が指定されていないパスは、最初にその内容が検査され、テキストのように見え、 core.bigFileThreshold よりも小さい場合は、テキストとして扱われます。さもなければ `Binary files differ` (バイナリファイル差分) が生成されます。"

#. type: Labeled list
#: ../Documentation-sedout/gitattributes.txt:729
#: ../Documentation-sedout/gitattributes.txt:1026
#: ../Documentation-sedout/gitattributes.txt:1152
#, no-wrap
msgid "String"
msgstr "String(文字列値)"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:736
msgid ""
"Diff is shown using the specified diff driver.  Each driver may specify one "
"or more options, as described in the following section. The options for the "
"diff driver \"foo\" are defined by the configuration variables in the \"diff."
"foo\" section of the Git config file."
msgstr "指定されたdiffドライバーを使用してdiffが表示されます。以下のセクションで説明するように、各ドライバーは1つ以上のオプションを指定できます。diffドライバー「foo」のオプションは、Git構成ファイルの「diff.foo」セクションの構成変数によって定義されます。"

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:739
#, no-wrap
msgid "Defining an external diff driver"
msgstr "外部diffドライバーの定義"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:744
msgid ""
"The definition of a diff driver is done in `gitconfig`, not `gitattributes` "
"file, so strictly speaking this manual page is a wrong place to talk about "
"it.  However..."
msgstr "diffドライバの定義は `gitattributes` ファイルではなく `gitconfig` で行われるため、厳密に言えば、このマニュアルページはそれについて話すのには間違った場所はありますが…"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:747
msgid ""
"To define an external diff driver `jcdiff`, add a section to your `$GIT_DIR/"
"config` file (or `$HOME/.gitconfig` file) like this:"
msgstr "外部diffドライバー `jcdiff` を定義するには、以下のように `$GIT_DIR/config` ファイル(または `$HOME/.gitconfig` ファイル)にセクションを追加します:"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:751
#, no-wrap
msgid ""
"[diff \"jcdiff\"]\n"
"\tcommand = j-c-diff\n"
msgstr ""
"[diff \"jcdiff\"]\n"
"\tcommand = j-c-diff\n"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:758
msgid ""
"When Git needs to show you a diff for the path with `diff` attribute set to "
"`jcdiff`, it calls the command you specified with the above configuration, i."
"e. `j-c-diff`, with 7 parameters, just like `GIT_EXTERNAL_DIFF` program is "
"called.  See linkgit:git[1] for details."
msgstr "Git は `diff` 属性が `jcdiff` に設定されているパスの diff を表示する必要がある場合、上記の設定で指定したコマンド、つまり `j-c-diff` を 7 つのパラメータで、 `GIT_EXTERNAL_DIFF` プログラムが呼ばれるのと同じように呼び出します。 詳しくは linkgit:git[1] を参照してください。"

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:761
#, no-wrap
msgid "Defining a custom hunk-header"
msgstr "Defining a custom hunk-header"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:765
msgid ""
"Each group of changes (called a \"hunk\") in the textual diff output is "
"prefixed with a line of the form:"
msgstr "テキストdiff出力の変更の各グループ(ハンク(hunk)と呼ばれます)には、以下の形式の行が接頭辞として付けられます:"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:767
#, no-wrap
msgid "\t@@ -k,l +n,m @@ TEXT\n"
msgstr "\t@@ -k,l +n,m @@ TEXT\n"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:773
msgid ""
"This is called a 'hunk header'.  The \"TEXT\" portion is by default a line "
"that begins with an alphabet, an underscore or a dollar sign; this matches "
"what GNU 'diff -p' output uses.  This default selection however is not "
"suited for some contents, and you can use a customized pattern to make a "
"selection."
msgstr "これはハンクヘッダー(hunk header)と呼ばれます。 \"TEXT\" の部分は、デフォルトでは、アルファベットまたは、アンダースコア(`_`)または、ドル記号(`$`)で始まる行です。 これは、GNU 'diff -p' 出力が使用するものとマッチします。ただし、このデフォルトの選択は一部のコンテンツには適していないため、カスタマイズされたパターンを使用して選択を行うことができます。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:776
msgid ""
"First, in .gitattributes, you would assign the `diff` attribute for paths."
msgstr "最初に、 .gitattributesで、パスに `diff` 属性を割り当てます。"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:779
#, no-wrap
msgid "*.tex\tdiff=tex\n"
msgstr "*.tex\tdiff=tex\n"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:785
msgid ""
"Then, you would define a \"diff.tex.xfuncname\" configuration to specify a "
"regular expression that matches a line that you would want to appear as the "
"hunk header \"TEXT\". Add a section to your `$GIT_DIR/config` file (or `"
"$HOME/.gitconfig` file) like this:"
msgstr "次に、 `diff.tex.xfuncname` 構成を定義して、ハンクヘッダー \"TEXT\" として表示する行にマッチする正規表現を指定します。以下のように、 `$GIT_DIR/config` ファイル(または `$HOME/.gitconfig` ファイル)にセクションを追加します:"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:789
#, no-wrap
msgid ""
"[diff \"tex\"]\n"
"\txfuncname = \"^(\\\\\\\\(sub)*section\\\\{.*)$\"\n"
msgstr ""
"[diff \"tex\"]\n"
"\txfuncname = \"^(\\\\\\\\(sub)*section\\\\{.*)$\"\n"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:796
msgid ""
"Note.  A single level of backslashes are eaten by the configuration file "
"parser, so you would need to double the backslashes; the pattern above picks "
"a line that begins with a backslash, and zero or more occurrences of `sub` "
"followed by `section` followed by open brace, to the end of line."
msgstr "注意: 単一レベルのバックスラッシュは構成ファイルパーサーによって使用されるため、バックスラッシュを2重にする必要があります。 上記のパターンは、バックスラッシュで始まり、行の終わりまで、 `sub` 、 `section` 、 `{` の順に0回以上出現する行を選択します。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:802
msgid ""
"There are a few built-in patterns to make this easier, and `tex` is one of "
"them, so you do not have to write the above in your configuration file (you "
"still need to enable this with the attribute mechanism, via `."
"gitattributes`).  The following built in patterns are available:"
msgstr "これを簡単にするための組み込みパターンがいくつかあり、 `tex` はその1つであるため、構成ファイルに上記を書き込む必要はありません(これは、 `.gitattributes` を介して属性メカニズムで有効にする必要があります)。以下の組み込みパターンを使用できます:"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:804
msgid "`ada` suitable for source code in the Ada language."
msgstr "`ada` はAda言語のソースコードに適しています。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:807
msgid ""
"`bash` suitable for source code in the Bourne-Again SHell language.  Covers "
"a superset of POSIX shell function definitions."
msgstr "`bash` はBourne-Againシェル言語(bash)のソースコードに適しています。POSIXシェル関数定義のスーパーセットをカバーしています。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:809
msgid "`bibtex` suitable for files with BibTeX coded references."
msgstr "`bibtex` はBibTeXでコード化されたリファレンスを持つファイルに適しています。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:811
msgid "`cpp` suitable for source code in the C and C++ languages."
msgstr "`cpp` はC言語とC++言語のソースコードに適しています。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:813
msgid "`csharp` suitable for source code in the C# language."
msgstr "`csharp` はC#言語のソースコードに適しています。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:815
msgid "`css` suitable for cascading style sheets."
msgstr "`css` はCSS(cascading style sheets)に適しています。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:817
msgid "`dts` suitable for devicetree (DTS) files."
msgstr "`dts` は devicetree (DTS) ファイルに適しています。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:819
msgid "`elixir` suitable for source code in the Elixir language."
msgstr "`elixir` はElixir言語のソースコードに適しています。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:821
msgid "`fortran` suitable for source code in the Fortran language."
msgstr "`fortran` はFORTRAN言語のソースコードに適しています。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:823
msgid "`fountain` suitable for Fountain documents."
msgstr "`fountain` はFountain文書に適しています。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:825
msgid "`golang` suitable for source code in the Go language."
msgstr "`golang` はGo言語のソースコードに適しています。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:827
msgid "`html` suitable for HTML/XHTML documents."
msgstr "`html` は HTML/XHTML 文書に適しています。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:829
msgid "`java` suitable for source code in the Java language."
msgstr "`java` はJava言語のソースコードに適しています。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:831
msgid "`markdown` suitable for Markdown documents."
msgstr "`markdown` はMarkdown文書に適しています。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:833
msgid "`matlab` suitable for source code in the MATLAB and Octave languages."
msgstr "`matlab` はMATLABとOctave言語のソースコードに適しています。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:835
msgid "`objc` suitable for source code in the Objective-C language."
msgstr "`objc` はObjective-C言語のソースコードに適しています。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:837
msgid "`pascal` suitable for source code in the Pascal/Delphi language."
msgstr "`pascal` は Pascal/Delphi 言語のソースコードに適しています。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:839
msgid "`perl` suitable for source code in the Perl language."
msgstr "`perl` はPerl言語のソースコードに適しています。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:841
msgid "`php` suitable for source code in the PHP language."
msgstr "`php` はPHP言語のソースコードに適しています。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:843
msgid "`python` suitable for source code in the Python language."
msgstr "`python` はPython言語のソースコードに適しています。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:845
msgid "`ruby` suitable for source code in the Ruby language."
msgstr "`ruby` はRuby言語のソースコードに適しています。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:847
msgid "`rust` suitable for source code in the Rust language."
msgstr "`rust` はRust言語のソースコードに適しています。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:849
msgid "`scheme` suitable for source code in the Scheme language."
msgstr "`scheme` はScheme言語のソースコードに適しています。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:851
msgid "`tex` suitable for source code for LaTeX documents."
msgstr "`tex` はLaTeX文書のソースコードに適しています。"

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:854
#, no-wrap
msgid "Customizing word diff"
msgstr "Customizing word diff"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:863
msgid ""
"You can customize the rules that `git diff --word-diff` uses to split words "
"in a line, by specifying an appropriate regular expression in the \"diff.*."
"wordRegex\" configuration variable.  For example, in TeX a backslash "
"followed by a sequence of letters forms a command, but several such commands "
"can be run together without intervening whitespace.  To separate them, use a "
"regular expression in your `$GIT_DIR/config` file (or `$HOME/.gitconfig` "
"file) like this:"
msgstr "`diff.*.wordRegex` 構成変数で適切な正規表現を指定することにより、 `git diff --word-diff` が単語を1行に分割するために使用するルールをカスタマイズできます。たとえば、TeXでは、バックスラッシュとそれに続く一連の文字がコマンドを形成しますが、そのようなコマンドのいくつかは、空白を介さずに一緒に実行できます。それらを分離するには、以下のように `$GIT_DIR/config` ファイル(または `$HOME/.gitconfig` ファイル)で正規表現を使用します:"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:867
#, no-wrap
msgid ""
"[diff \"tex\"]\n"
"\twordRegex = \"\\\\\\\\[a-zA-Z]+|[{}]|\\\\\\\\.|[^\\\\{}[:space:]]+\"\n"
msgstr ""
"[diff \"tex\"]\n"
"\twordRegex = \"\\\\\\\\[a-zA-Z]+|[{}]|\\\\\\\\.|[^\\\\{}[:space:]]+\"\n"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:871
msgid ""
"A built-in pattern is provided for all languages listed in the previous "
"section."
msgstr "前のセクションにリストされているすべての言語には組み込みのパターンが用意されています。"

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:874
#, no-wrap
msgid "Performing text diffs of binary files"
msgstr "バイナリファイルのテキスト差分の取得"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:882
msgid ""
"Sometimes it is desirable to see the diff of a text-converted version of "
"some binary files. For example, a word processor document can be converted "
"to an ASCII text representation, and the diff of the text shown. Even though "
"this conversion loses some information, the resulting diff is useful for "
"human viewing (but cannot be applied directly)."
msgstr "一部のバイナリファイルのテキスト変換バージョンの差分を確認することが望ましい場合があります。たとえば、ワードプロセッサ文書をASCIIテキスト表現に変換し、テキストの差分を表示することができます。この変換によって一部の情報が失われますが、結果のdiffは人間が見るのに役立ちます(ただし、直接適用(apply)することはできません)。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:887
msgid ""
"The `textconv` config option is used to define a program for performing such "
"a conversion. The program should take a single argument, the name of a file "
"to convert, and produce the resulting text on stdout."
msgstr "`textconv` configオプションは、そのような変換を実行するためのプログラムを定義するために使用されます。プログラムは、変換するファイルの名前である単一の引数を取り、結果のテキストをstdoutに生成する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:892
msgid ""
"For example, to show the diff of the exif information of a file instead of "
"the binary information (assuming you have the exif tool installed), add the "
"following section to your `$GIT_DIR/config` file (or `$HOME/.gitconfig` "
"file):"
msgstr "たとえば、バイナリ情報の代わりにファイルのexif情報の差分を表示するには(exifツールがインストールされていると仮定して)、以下のセクションを `$GIT_DIR/config` ファイル(または `$HOME/.gitconfig ファイル)に追加します:"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:896
#, no-wrap
msgid ""
"[diff \"jpg\"]\n"
"\ttextconv = exif\n"
msgstr ""
"[diff \"jpg\"]\n"
"\ttextconv = exif\n"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:909
msgid ""
"The text conversion is generally a one-way conversion; in this example, we "
"lose the actual image contents and focus just on the text data. This means "
"that diffs generated by textconv are _not_ suitable for applying. For this "
"reason, only `git diff` and the `git log` family of commands (i.e., log, "
"whatchanged, show) will perform text conversion. `git format-patch` will "
"never generate this output. If you want to send somebody a text-converted "
"diff of a binary file (e.g., because it quickly conveys the changes you have "
"made), you should generate it separately and send it as a comment _in "
"addition to_ the usual binary diff that you might send."
msgstr "テキスト変換は通常、一方向の変換です。この例では、実際の画像コンテンツを失い、テキストデータのみに焦点を当てています。これは、textconvによって生成されたdiffが適用(apply)に適していないことを意味します。このため、テキスト変換を実行するのは、 `git diff` と `git log` ファミリーのコマンド(つまり、log、whatchanged、show)のみです。 `git format-patch` はこの出力を生成しません。バイナリファイルのテキスト変換された差分を誰かに送信したい場合(たとえば、行った変更をすばやく伝達するため)、それを別個に生成し、送信する通常のバイナリ差分に加えてコメントとして送信する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:915
msgid ""
"Because text conversion can be slow, especially when doing a large number of "
"them with `git log -p`, Git provides a mechanism to cache the output and use "
"it in future diffs.  To enable caching, set the \"cachetextconv\" variable "
"in your diff driver's config. For example:"
msgstr "特に `git log -p` を使用して大量のテキスト変換を行う場合、テキスト変換が遅くなる可能性があるため、Gitは出力をキャッシュし、将来の差分で使用するメカニズムを提供します。 キャッシュを有効にするには、diffドライバーの構成で「cachetextconv」変数を設定します。 例えば:"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:920
#, no-wrap
msgid ""
"[diff \"jpg\"]\n"
"\ttextconv = exif\n"
"\tcachetextconv = true\n"
msgstr ""
"[diff \"jpg\"]\n"
"\ttextconv = exif\n"
"\tcachetextconv = true\n"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:930
msgid ""
"This will cache the result of running \"exif\" on each blob indefinitely. If "
"you change the textconv config variable for a diff driver, Git will "
"automatically invalidate the cache entries and re-run the textconv filter. "
"If you want to invalidate the cache manually (e.g., because your version of "
"\"exif\" was updated and now produces better output), you can remove the "
"cache manually with `git update-ref -d refs/notes/textconv/jpg` (where \"jpg"
"\" is the name of the diff driver, as in the example above)."
msgstr "これにより、各ブロブで「exif」を実行した結果が無期限にキャッシュされます。diffドライバーのtextconv構成変数を変更すると、Gitはキャッシュエントリを自動的に無効にし、textconvフィルターを再実行します。キャッシュを手動で無効にしたい場合(たとえば、「exif」のバージョンが更新され、より良い出力が生成されようになった等)、 `git update-ref -d refs/notes/textconv/jpg` を使用してキャッシュを手動で削除できます( ここで、「jpg」は上記の例のように、diffドライバーの名前です)。"

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:932
#, no-wrap
msgid "Choosing textconv versus external diff"
msgstr "textconvと外部diffの選択"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:938
msgid ""
"If you want to show differences between binary or specially-formatted blobs "
"in your repository, you can choose to use either an external diff command, "
"or to use textconv to convert them to a diff-able text format.  Which method "
"you choose depends on your exact situation."
msgstr "あなたがリポジトリ内のバイナリまたは特別にフォーマットされたブロブの違いを表示したい場合は、外部のdiffコマンドを使用するか、textconvを使用してそれらを差分可能(diff-able)なテキストフォーマットに変換するかを選択できます。どちらの方法を選択するかは、状況に完全に依存します。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:943
msgid ""
"The advantage of using an external diff command is flexibility. You are not "
"bound to find line-oriented changes, nor is it necessary for the output to "
"resemble unified diff. You are free to locate and report changes in the most "
"appropriate way for your data format."
msgstr "外部diffコマンドを使用する利点は、柔軟性です。行指向の変更を見つける必要はありません。また、出力が統一されたdiff(unified diff)に似ている必要もありません。あなたはあなたのデータ形式に最も適した方法で変更を自由に見つけて報告できます。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:948
msgid ""
"A textconv, by comparison, is much more limiting. You provide a "
"transformation of the data into a line-oriented text format, and Git uses "
"its regular diff tools to generate the output. There are several advantages "
"to choosing this method:"
msgstr "それと比較すると、textconvははるかに制限的です。データを行指向のテキスト形式に変換すると、Gitは通常のdiffツールを使用して出力を生成します。この方法を選択することにはいくつかの利点があります:"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:953
msgid ""
"Ease of use. It is often much simpler to write a binary to text "
"transformation than it is to perform your own diff. In many cases, existing "
"programs can be used as textconv filters (e.g., exif, odt2txt)."
msgstr "容易に使えます。多くの場合、独自の差分を実行するよりも、バイナリからテキストへの変換を作成する方がはるかに簡単です。多くの場合、既存のプログラム(つまり exif や odt2txt)をtextconvフィルターとして使用できます。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:957
msgid ""
"Git diff features. By performing only the transformation step yourself, you "
"can still utilize many of Git's diff features, including colorization, word-"
"diff, and combined diffs for merges."
msgstr "Gitのdiff機能。変換ステップのみを自分で実行することで、カラー化、単語diff、マージ用の複合diffなど、Gitのdiff機能の多くを引き続き利用できます。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:960
msgid ""
"Caching. Textconv caching can speed up repeated diffs, such as those you "
"might trigger by running `git log -p`."
msgstr "キャッシュ機能。 textconvキャッシングは、 `git log -p` を実行してトリガーするような、繰り返されるdiffを高速化できます。"

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:963
#, no-wrap
msgid "Marking files as binary"
msgstr "ファイルをバイナリとしてマークする"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:972
msgid ""
"Git usually guesses correctly whether a blob contains text or binary data by "
"examining the beginning of the contents. However, sometimes you may want to "
"override its decision, either because a blob contains binary data later in "
"the file, or because the content, while technically composed of text "
"characters, is opaque to a human reader. For example, many postscript files "
"contain only ASCII characters, but produce noisy and meaningless diffs."
msgstr "Gitは通常、コンテンツの先頭を調べることで、ブロブにテキストデータとバイナリデータのどちらが含まれているかを正しく推測します。ただし、ブロブにファイルの後半にバイナリデータが含まれている、またはコンテンツが技術的にはテキスト文字で構成されているものの、人間の読者には不明瞭であるために、あなたは、その推測を上書きしたい場合があります。たとえば、多くのポストスクリプトファイルにはASCII文字しか含まれていません(つまりテキストデータです)が、ノイズが多く意味のないdiffが生成されます。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:975
msgid ""
"The simplest way to mark a file as binary is to unset the diff attribute in "
"the `.gitattributes` file:"
msgstr "ファイルをバイナリとしてマークする最も簡単な方法は、 `.gitattributes` ファイルでdiff属性を設定解除(unset)することです。"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:978
#, no-wrap
msgid "*.ps -diff\n"
msgstr "*.ps -diff\n"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:982
msgid ""
"This will cause Git to generate `Binary files differ` (or a binary patch, if "
"binary patches are enabled) instead of a regular diff."
msgstr "これにより、Gitは通常の差分ではなく `Binary files differ` (バイナリファイルの差分)(またはバイナリパッチが有効になっている場合はバイナリパッチ)を生成します。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:988
msgid ""
"However, one may also want to specify other diff driver attributes. For "
"example, you might want to use `textconv` to convert postscript files to an "
"ASCII representation for human viewing, but otherwise treat them as binary "
"files. You cannot specify both `-diff` and `diff=ps` attributes.  The "
"solution is to use the `diff.*.binary` config option:"
msgstr "しかしながら、他のdiffドライバー属性を指定することもできます。 たとえば、 `textconv` を使用してポストスクリプトファイルをASCII表現に変換し、人間が表示できるようにしたい場合があるけども、それ以外の場合はバイナリファイルとして扱いたいとします。 `-diff` 属性 と `diff=ps` 属性の両方を指定することはできません。 解決策は、 `diff.*.binary` 構成オプションを使用することです:"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:993
#, no-wrap
msgid ""
"[diff \"ps\"]\n"
"  textconv = ps2ascii\n"
"  binary = true\n"
msgstr ""
"[diff \"ps\"]\n"
"  textconv = ps2ascii\n"
"  binary = true\n"

#. type: Title ~
#: ../Documentation-sedout/gitattributes.txt:996
#, no-wrap
msgid "Performing a three-way merge"
msgstr "Performing a three-way merge"

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:999
#, no-wrap
msgid "`merge`"
msgstr "`merge`"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1004
msgid ""
"The attribute `merge` affects how three versions of a file are merged when a "
"file-level merge is necessary during `git merge`, and other commands such as "
"`git revert` and `git cherry-pick`."
msgstr "属性 `merge` は、 `git merge` 中にファイルレベルのマージが必要な場合にファイルの3つのバージョンをマージする方法や、 `gitr evert` や `git cherry-pick` などの他のコマンドに、影響します。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1010
msgid ""
"Built-in 3-way merge driver is used to merge the contents in a way similar "
"to 'merge' command of `RCS` suite.  This is suitable for ordinary text files."
msgstr "組み込みの３方向マージドライバーは、 `RCS` スイートの 'merge' コマンドと同様の方法でコンテンツをマージするために使用されます。これは通常のテキストファイルに適しています。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1017
msgid ""
"Take the version from the current branch as the tentative merge result, and "
"declare that the merge has conflicts.  This is suitable for binary files "
"that do not have a well-defined merge semantics."
msgstr "現在のブランチのバージョンを暫定的なマージ結果として取得し、マージに競合があることを宣言します。これは、明確に定義されたマージセマンティクスを持たないバイナリファイルに適しています。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1025
msgid ""
"By default, this uses the same built-in 3-way merge driver as is the case "
"when the `merge` attribute is set.  However, the `merge.default` "
"configuration variable can name different merge driver to be used with paths "
"for which the `merge` attribute is unspecified."
msgstr "デフォルトでは、これは `merge` 属性が設定されている場合と同じ組み込みの３方向マージドライバーを使用します。 ただし、 `merge.default` 構成変数は、 `merge` 属性未指定(unspecified)のパスで使用される別のマージドライバーに名前を付けることができます。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1033
msgid ""
"3-way merge is performed using the specified custom merge driver.  The built-"
"in 3-way merge driver can be explicitly specified by asking for \"text\" "
"driver; the built-in \"take the current branch\" driver can be requested "
"with \"binary\"."
msgstr "3方向マージは、指定のカスタムマージドライバーを使用して実行されます。組み込みの3方向マージドライバーは、「text」ドライバーを要求することで明示的に指定できます。 現在のブランチを取得する組み込みドライバーは、「binary」を要求することで指定できます。"

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:1036
#, no-wrap
msgid "Built-in merge drivers"
msgstr "Built-in merge drivers"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1040
msgid ""
"There are a few built-in low-level merge drivers defined that can be asked "
"for via the `merge` attribute."
msgstr "`merge` 属性を介して要求できる、いくつかの組み込みの低レベルのマージドライバーが定義されています。"

#. type: Labeled list
#: ../Documentation-sedout/gitattributes.txt:1041
#, no-wrap
msgid "text"
msgstr "text"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1049
msgid ""
"Usual 3-way file level merge for text files.  Conflicted regions are marked "
"with conflict markers `<<<<<<<`, `=======` and `>>>>>>>`.  The version from "
"your branch appears before the `=======` marker, and the version from the "
"merged branch appears after the `=======` marker."
msgstr "テキストファイルの通常の3方向ファイルレベルのマージ。 競合する領域は、競合マーカー `<<<<<<<` と `=======` と `>>>>>>>` でマークされます。ブランチのバージョンは `=======` マーカーの前に表示され、マージされたブランチのバージョンは `=======` マーカーの後に表示されます。"

#. type: Labeled list
#: ../Documentation-sedout/gitattributes.txt:1050
#, no-wrap
msgid "binary"
msgstr "binary"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1055
msgid ""
"Keep the version from your branch in the work tree, but leave the path in "
"the conflicted state for the user to sort out."
msgstr "ブランチのバージョンを作業ツリーに保持しますが、ユーザーが整理できるようにパスを競合状態のままにします。"

#. type: Labeled list
#: ../Documentation-sedout/gitattributes.txt:1056
#, no-wrap
msgid "union"
msgstr "union"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1064
msgid ""
"Run 3-way file level merge for text files, but take lines from both "
"versions, instead of leaving conflict markers.  This tends to leave the "
"added lines in the resulting file in random order and the user should verify "
"the result. Do not use this if you do not understand the implications."
msgstr "テキストファイルに対して3方向のファイルレベルのマージを実行しますが、競合マーカーを残すのではなく、両方のバージョンから行を取得します。これにより、結果のファイルに追加された行がランダムな順序で残る傾向があり、ユーザーは結果を確認すべきです。影響を理解していない場合は、これを使用してはいけません。"

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:1067
#, no-wrap
msgid "Defining a custom merge driver"
msgstr "Defining a custom merge driver"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1072
msgid ""
"The definition of a merge driver is done in the `.git/config` file, not in "
"the `gitattributes` file, so strictly speaking this manual page is a wrong "
"place to talk about it.  However..."
msgstr "マージドライバの定義は、 `gitattributes` ファイルではなく `.git/config` ファイルで行われるため、厳密に言えば、このマニュアルページはそれについて話すのに間違った場所ではありますが…"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1075
msgid ""
"To define a custom merge driver `filfre`, add a section to your `$GIT_DIR/"
"config` file (or `$HOME/.gitconfig` file) like this:"
msgstr "カスタムマージドライバー `filfre` を定義するには、以下のように `$GIT_DIR/config` ファイル(または `$HOME/.gitconfig` ファイル)にセクションを追加します:"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:1081
#, no-wrap
msgid ""
"[merge \"filfre\"]\n"
"\tname = feel-free merge driver\n"
"\tdriver = filfre %O %A %B %L %P\n"
"\trecursive = binary\n"
msgstr ""
"[merge \"filfre\"]\n"
"\tname = feel-free merge driver\n"
"\tdriver = filfre %O %A %B %L %P\n"
"\trecursive = binary\n"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1085
msgid "The `merge.*.name` variable gives the driver a human-readable name."
msgstr "`merge.*.name` 変数は、ドライバーに人間が読める名前を付けます。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1093
msgid ""
"The `merge.*.driver` variable's value is used to construct a command to run "
"to merge ancestor's version (`%O`), current version (`%A`) and the other "
"branches' version (`%B`).  These three tokens are replaced with the names of "
"temporary files that hold the contents of these versions when the command "
"line is built. Additionally, %L will be replaced with the conflict marker "
"size (see below)."
msgstr "`merge.*.driver` 変数の値は、祖先のバージョン(`%O`)と、現在のバージョン(`%A`)と、他のブランチのバージョン(`%B`)をマージするために実行するコマンドを作成するために使用されます。これらの3つのトークンは、コマンドラインの構築時にこれらのバージョンの内容を保持する一時ファイルの名前に置き換えられます。さらに、 `%L` は競合マーカーのサイズに置き換えられます(以下を参照)。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1098
msgid ""
"The merge driver is expected to leave the result of the merge in the file "
"named with `%A` by overwriting it, and exit with zero status if it managed "
"to merge them cleanly, or non-zero if there were conflicts."
msgstr "マージドライバーは、マージの結果を `%A` という名前のファイルに上書きして残し、それらを正常にマージできた場合はゼロステータスで終了し、競合があった場合は非ゼロで終了することが期待されます。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1104
msgid ""
"The `merge.*.recursive` variable specifies what other merge driver to use "
"when the merge driver is called for an internal merge between common "
"ancestors, when there are more than one.  When left unspecified, the driver "
"itself is used for both internal merge and the final merge."
msgstr "`merge.*.recursive` 変数は、複数の祖先が存在する場合に、共通の祖先間の内部マージのためにマージドライバーが呼び出されるときに使用する他のマージドライバーを指定します。指定しない場合、ドライバー自体が内部マージと最終マージの両方に使用されます。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1107
msgid ""
"The merge driver can learn the pathname in which the merged result will be "
"stored via placeholder `%P`."
msgstr "マージドライバーは、プレースホルダー `%P` を介して、マージされた結果が格納されるパス名を知ります。"

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:1110
#, no-wrap
msgid "`conflict-marker-size`"
msgstr "`conflict-marker-size`"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1115
msgid ""
"This attribute controls the length of conflict markers left in the work tree "
"file during a conflicted merge.  Only setting to the value to a positive "
"integer has any meaningful effect."
msgstr "この属性は、競合するマージ中に作業ツリーファイルに残る競合マーカーの長さを制御します。値を正の整数に設定するだけで、意味のある効果があります。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1120
msgid ""
"For example, this line in `.gitattributes` can be used to tell the merge "
"machinery to leave much longer (instead of the usual 7-character-long)  "
"conflict markers when merging the file `Documentation/git-merge.txt` results "
"in a conflict."
msgstr "たとえば、 ファイル `Documentation/git-merge.txt` の結果をマージすると競合するときに、`.gitattributes` で(通常の7文字の長さではなく)はるかに長い競合マーカーを残すようにマージ機構に指示できます。"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:1123
#, no-wrap
msgid "Documentation/git-merge.txt\tconflict-marker-size=32\n"
msgstr "Documentation/git-merge.txt\tconflict-marker-size=32\n"

#. type: Title ~
#: ../Documentation-sedout/gitattributes.txt:1127
#, no-wrap
msgid "Checking whitespace errors"
msgstr "Checking whitespace errors"

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:1130
#, no-wrap
msgid "`whitespace`"
msgstr "`whitespace`"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1136
msgid ""
"The `core.whitespace` configuration variable allows you to define what "
"'diff' and 'apply' should consider whitespace errors for all paths in the "
"project (See linkgit:git-config[1]).  This attribute gives you finer control "
"per path."
msgstr " `core.whitespace` 設定変数を使用すると、プロジェクト内のすべてのパスに対して 'diff' と 'apply' が空白エラー(whitespace errors)をどうみなすかを定義します(linkgit:git-config[1] を参照)。この属性では、あなたはパスごとに細かく制御できます。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1142
msgid ""
"Notice all types of potential whitespace errors known to Git.  The tab width "
"is taken from the value of the `core.whitespace` configuration variable."
msgstr "Gitでチェックできる全てのタイプの潜在的な空白エラーを通知します。タブ幅は `core.whitespace` 構成変数の値から取得されます。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1146
msgid "Do not notice anything as error."
msgstr "何もエラーとして通知しません。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1151
msgid ""
"Use the value of the `core.whitespace` configuration variable to decide what "
"to notice as error."
msgstr "`core.whitespace` 構成変数の値を使用して、エラーとして通知する内容を決定します。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1157
msgid ""
"Specify a comma separate list of common whitespace problems to notice in the "
"same format as the `core.whitespace` configuration variable."
msgstr "`core.whitespace` 構成変数と同じ形式で、通知すべき一般的な空白の問題のコンマ区切りリストを指定します。"

#. type: Title ~
#: ../Documentation-sedout/gitattributes.txt:1160
#, no-wrap
msgid "Creating an archive"
msgstr "Creating an archive"

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:1163
#, no-wrap
msgid "`export-ignore`"
msgstr "`export-ignore`"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1167
msgid ""
"Files and directories with the attribute `export-ignore` won't be added to "
"archive files."
msgstr "属性 `export-ignore` を持つファイルとディレクトリはアーカイブファイルに追加されません。"

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:1169
#, no-wrap
msgid "`export-subst`"
msgstr "`export-subst`"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1181
msgid ""
"If the attribute `export-subst` is set for a file then Git will expand "
"several placeholders when adding this file to an archive.  The expansion "
"depends on the availability of a commit ID, i.e., if linkgit:git-archive[1] "
"has been given a tree instead of a commit or a tag then no replacement will "
"be done.  The placeholders are the same as those for the option `--"
"pretty=format:` of linkgit:git-log[1], except that they need to be wrapped "
"like this: `$Format:PLACEHOLDERS$` in the file.  E.g. the string `$Format:%H"
"$` will be replaced by the commit hash.  However, only one `%(describe)` "
"placeholder is expanded per archive to avoid denial-of-service attacks."
msgstr "属性 `export-subst` がファイルに設定されている場合、Gitはこのファイルをアーカイブに追加するときにいくつかのプレースホルダーを展開します。展開は、コミットIDの可用性に依存します。たとえば linkgit:git-archive[1] にコミットやタグの代わりにツリーが与えられている場合、置換は行われません。プレースホルダーは、 linkgit:git-log[1] のオプション `--pretty=format:` のプレースホルダーと同じですが、ファイル内で `$Format:PLACEHOLDERS$` のようにラップする必要がある点が異なります。 例えば、 文字列 `$Format:%H$` は、コミットハッシュに置き換えられます。ただし、DoS攻撃(denial-of-service attacks)を回避するために、アーカイブごとに1つの `%(describe)` プレースホルダーのみが展開されます。"

#. type: Title ~
#: ../Documentation-sedout/gitattributes.txt:1184
#, no-wrap
msgid "Packing objects"
msgstr "Packing objects"

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:1187
#, no-wrap
msgid "`delta`"
msgstr "`delta`"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1191
msgid ""
"Delta compression will not be attempted for blobs for paths with the "
"attribute `delta` set to false."
msgstr "属性 `delta` がfalseに設定されているパスのブロブに対して、デルタ圧縮は試行されません。"

#. type: Title ~
#: ../Documentation-sedout/gitattributes.txt:1194
#, no-wrap
msgid "Viewing files in GUI tools"
msgstr "Viewing files in GUI tools"

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:1197
#, no-wrap
msgid "`encoding`"
msgstr "`encoding`"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1204
msgid ""
"The value of this attribute specifies the character encoding that should be "
"used by GUI tools (e.g. linkgit:gitk[1] and linkgit:git-gui[1]) to display "
"the contents of the relevant file. Note that due to performance "
"considerations linkgit:gitk[1] does not use this attribute unless you "
"manually enable per-file encodings in its options."
msgstr "この属性の値は、関連するファイルの内容を表示するためにGUIツール(linkgit:gitk[1] や linkgit:git-gui[1] など)で使用される文字エンコードを指定します。注意: パフォーマンス上の考慮事項により、 linkgit:gitk[1] は、オプションでファイルごとのエンコーディングを手動で有効にしない限り、この属性を使用しないことに注意してください。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1208
msgid ""
"If this attribute is not set or has an invalid value, the value of the `gui."
"encoding` configuration variable is used instead (See linkgit:git-config[1])."
msgstr "この属性が設定されていないか、値が無効な場合は、代わりに `gui.encoding` 構成変数の値が使用されます(linkgit:git-config[1] を参照)。"

#. type: Title -
#: ../Documentation-sedout/gitattributes.txt:1211
#, no-wrap
msgid "USING MACRO ATTRIBUTES"
msgstr "USING MACRO ATTRIBUTES"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1215
msgid ""
"You do not want any end-of-line conversions applied to, nor textual diffs "
"produced for, any binary file you track.  You would need to specify e.g."
msgstr "追跡中のバイナリファイルに、行末変換を適用したり、テキストの差分を作成したりする必要はありません。あなたは、たとえば以下のように指定する必要があります。"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:1218
#, no-wrap
msgid "*.jpg -text -diff\n"
msgstr "*.jpg -text -diff\n"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1224
msgid ""
"but that may become cumbersome, when you have many attributes.  Using macro "
"attributes, you can define an attribute that, when set, also sets or unsets "
"a number of other attributes at the same time.  The system knows a built-in "
"macro attribute, `binary`:"
msgstr "しかし、多くの属性がある場合、これはめんどくさいです。マクロ属性を使用すると、あなたは設定時に他の多くの属性を同時に設定または設定解除する属性を定義できます。システムは、組み込みのマクロ属性 `binary` を認識します:"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:1227
#, no-wrap
msgid "*.jpg binary\n"
msgstr "*.jpg binary\n"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1234
msgid ""
"Setting the \"binary\" attribute also unsets the \"text\" and \"diff\" "
"attributes as above.  Note that macro attributes can only be \"Set\", though "
"setting one might have the effect of setting or unsetting other attributes "
"or even returning other attributes to the \"Unspecified\" state."
msgstr "「binary」属性を設定すると、上記のように「text」属性と「diff」属性の設定も解除されます。マクロ属性は「set」のみであることに注意してください。ただし、1つを設定すると、他の属性をsetまたはunsetしたり、他の属性を「Unspecified」状態に戻したりする事があります。"

#. type: Title -
#: ../Documentation-sedout/gitattributes.txt:1237
#, no-wrap
msgid "DEFINING MACRO ATTRIBUTES"
msgstr "DEFINING MACRO ATTRIBUTES"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1245
msgid ""
"Custom macro attributes can be defined only in top-level gitattributes files "
"(`$GIT_DIR/info/attributes`, the `.gitattributes` file at the top level of "
"the working tree, or the global or system-wide gitattributes files), not in "
"`.gitattributes` files in working tree subdirectories.  The built-in macro "
"attribute \"binary\" is equivalent to:"
msgstr "カスタムマクロ属性は、最上位のgitattributesファイル(`$GIT_DIR/info/attributes` または、作業ツリーの最上位にある ` .gitattributes` ファイルまたは、グローバルgitattributesファイルまたは、システム全体のgitattributesファイル)でのみ定義でき、作業ツリーサブディレクトリの `.gitattributes` ファイルでは定義できません。 組み込みのマクロ属性「binary」は、以下のものと同等です:"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:1248
#, no-wrap
msgid "[attr]binary -diff -merge -text\n"
msgstr "[attr]binary -diff -merge -text\n"

#. type: Title -
#: ../Documentation-sedout/gitattributes.txt:1251
#, no-wrap
msgid "NOTES"
msgstr "NOTES"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1256
msgid ""
"Git does not follow symbolic links when accessing a `.gitattributes` file in "
"the working tree. This keeps behavior consistent when the file is accessed "
"from the index or a tree versus from the filesystem."
msgstr "作業ツリーの `.gitattributes` ファイルにアクセスするとき、Gitはシンボリックリンクをたどりません。 これにより、ファイルシステムからではなく、インデックスまたはツリーからファイルにアクセスする場合の動作の一貫性が保たれます。"

#. type: Title -
#: ../Documentation-sedout/gitattributes.txt:1258
#, no-wrap
msgid "EXAMPLES"
msgstr "EXAMPLES"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1261
msgid "If you have these three `gitattributes` file:"
msgstr "これらの以下の3つの `gitattributes` ファイルがある場合:"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:1264
#, no-wrap
msgid "(in $GIT_DIR/info/attributes)\n"
msgstr "(in $GIT_DIR/info/attributes)\n"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:1266
#, no-wrap
msgid "a*\tfoo !bar -baz\n"
msgstr "a*\tfoo !bar -baz\n"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:1269
#, no-wrap
msgid ""
"(in .gitattributes)\n"
"abc\tfoo bar baz\n"
msgstr ""
"(in .gitattributes)\n"
"abc\tfoo bar baz\n"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:1274
#, no-wrap
msgid ""
"(in t/.gitattributes)\n"
"ab*\tmerge=filfre\n"
"abc\t-foo -bar\n"
"*.c\tfrotz\n"
msgstr ""
"(in t/.gitattributes)\n"
"ab*\tmerge=filfre\n"
"abc\t-foo -bar\n"
"*.c\tfrotz\n"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1277
msgid "the attributes given to path `t/abc` are computed as follows:"
msgstr "パス `t/abc` に与えられる属性は、以下のように計算されます:"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1283
msgid ""
"By examining `t/.gitattributes` (which is in the same directory as the path "
"in question), Git finds that the first line matches.  `merge` attribute is "
"set.  It also finds that the second line matches, and attributes `foo` and "
"`bar` are unset."
msgstr " (問題のパスと同じディレクトリにある) `t/.gitattributes` を調べることにより、Gitは最初の行が一致することを検出します。 `merge` 属性が設定されます。 また、2行目が一致し、属性 `foo` と `bar`が設定解除(unseet)されていることもわかります。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1289
msgid ""
"Then it examines `.gitattributes` (which is in the parent directory), and "
"finds that the first line matches, but `t/.gitattributes` file already "
"decided how `merge`, `foo` and `bar` attributes should be given to this "
"path, so it leaves `foo` and `bar` unset.  Attribute `baz` is set."
msgstr "次に (親ディレクトリにある) `.gitattributes` を調べ、最初の行がマッチすることを確認します。しかし、 `t/.gitattributes`  ファイルでは、このパスに対して `merge` や `foo` や `bar` 属性をどのように与えるべきかを既に決めているので、`foo` と `bar` は設定解除(unset)のままにしています。属性 `baz` がsetされます。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1294
msgid ""
"Finally it examines `$GIT_DIR/info/attributes`.  This file is used to "
"override the in-tree settings.  The first line is a match, and `foo` is set, "
"`bar` is reverted to unspecified state, and `baz` is unset."
msgstr "最後に、 `$GIT_DIR/info/attributes` を調べます。このファイルは、ツリー内の設定を上書きするために使用されます。最初の行がマッチして `foo` がsetされ、 `bar` が指定解除(unset)の状態に戻され、 `baz` が設定解除(unset)されます。"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1296
msgid "As the result, the attributes assignment to `t/abc` becomes:"
msgstr "その結果、 `t/abc` への属性の割り当ては以下のようになります:"

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:1303
#, no-wrap
msgid ""
"foo\tset to true\n"
"bar\tunspecified\n"
"baz\tset to false\n"
"merge\tset to string value \"filfre\"\n"
"frotz\tunspecified\n"
msgstr ""
"foo\tset to true\n"
"bar\tunspecified\n"
"baz\tset to false\n"
"merge\tset to string value \"filfre\"\n"
"frotz\tunspecified\n"

#. type: Title -
#: ../Documentation-sedout/gitattributes.txt:1307
#, no-wrap
msgid "SEE ALSO"
msgstr "SEE ALSO"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1309
msgid "linkgit:git-check-attr[1]."
msgstr "linkgit:git-check-attr[1]."

#. type: Title -
#: ../Documentation-sedout/gitattributes.txt:1311
#, no-wrap
msgid "GIT"
msgstr "GIT"

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1312
msgid "Part of the linkgit:git[1] suite"
msgstr "Part of the linkgit:git[1] suite"
