# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-11-04 04:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/gitattributes.txt:2
#, no-wrap
msgid "gitattributes(5)"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/gitattributes.txt:5
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:7
msgid "gitattributes - Defining attributes per path"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/gitattributes.txt:9
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:11
msgid "$GIT_DIR/info/attributes, .gitattributes"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/gitattributes.txt:14
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:18
msgid ""
"A `gitattributes` file is a simple text file that gives `attributes` to "
"pathnames."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:20
msgid "Each line in `gitattributes` file is of form:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:22
#, no-wrap
msgid "\tpattern attr1 attr2 ...\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:29
msgid ""
"That is, a pattern followed by an attributes list, separated by whitespaces. "
"Leading and trailing whitespaces are ignored. Lines that begin with '#' are "
"ignored. Patterns that begin with a double quote are quoted in C style.  "
"When the pattern matches the path in question, the attributes listed on the "
"line are given to the path."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:31
msgid "Each attribute can be in one of these states for a given path:"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/gitattributes.txt:32
#: ../Documentation-sedout/gitattributes.txt:132
#: ../Documentation-sedout/gitattributes.txt:710
#: ../Documentation-sedout/gitattributes.txt:1005
#: ../Documentation-sedout/gitattributes.txt:1137
#, no-wrap
msgid "Set"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:37
msgid ""
"The path has the attribute with special value \"true\"; this is specified by "
"listing only the name of the attribute in the attribute list."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/gitattributes.txt:38
#: ../Documentation-sedout/gitattributes.txt:138
#: ../Documentation-sedout/gitattributes.txt:716
#: ../Documentation-sedout/gitattributes.txt:1011
#: ../Documentation-sedout/gitattributes.txt:1143
#, no-wrap
msgid "Unset"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:43
msgid ""
"The path has the attribute with special value \"false\"; this is specified "
"by listing the name of the attribute prefixed with a dash `-` in the "
"attribute list."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/gitattributes.txt:44
#, no-wrap
msgid "Set to a value"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:50
msgid ""
"The path has the attribute with specified string value; this is specified by "
"listing the name of the attribute followed by an equal sign `=` and its "
"value in the attribute list."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/gitattributes.txt:51
#: ../Documentation-sedout/gitattributes.txt:150
#: ../Documentation-sedout/gitattributes.txt:722
#: ../Documentation-sedout/gitattributes.txt:1018
#: ../Documentation-sedout/gitattributes.txt:1147
#, no-wrap
msgid "Unspecified"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:56
msgid ""
"No pattern matches the path, and nothing says if the path has or does not "
"have the attribute, the attribute for the path is said to be Unspecified."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:60
msgid ""
"When more than one pattern matches the path, a later line overrides an "
"earlier line.  This overriding is done per attribute."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:63
msgid ""
"The rules by which the pattern matches paths are the same as in `.gitignore` "
"files (see linkgit:gitignore[5]), with a few exceptions:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:65
msgid "negative patterns are forbidden"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:69
msgid ""
"patterns that match a directory do not recursively match paths inside that "
"directory (so using the trailing-slash `path/` syntax is pointless in an "
"attributes file; use `path/**` instead)"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:78
msgid ""
"When deciding what attributes are assigned to a path, Git consults `$GIT_DIR/"
"info/attributes` file (which has the highest precedence), `.gitattributes` "
"file in the same directory as the path in question, and its parent "
"directories up to the toplevel of the work tree (the further the directory "
"that contains `.gitattributes` is from the path in question, the lower its "
"precedence). Finally global and system-wide files are considered (they have "
"the lowest precedence)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:83
msgid ""
"When the `.gitattributes` file is missing from the work tree, the path in "
"the index is used as a fall-back.  During checkout process, `.gitattributes` "
"in the index is used and then the file in the working tree is used as a fall-"
"back."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:97
msgid ""
"If you wish to affect only a single repository (i.e., to assign attributes "
"to files that are particular to one user's workflow for that repository), "
"then attributes should be placed in the `$GIT_DIR/info/attributes` file.  "
"Attributes which should be version-controlled and distributed to other "
"repositories (i.e., attributes of interest to all users) should go into `."
"gitattributes` files. Attributes that should affect all repositories for a "
"single user should be placed in a file specified by the `core."
"attributesFile` configuration option (see linkgit:git-config[1]).  Its "
"default value is $XDG_CONFIG_HOME/git/attributes. If $XDG_CONFIG_HOME is "
"either not set or empty, $HOME/.config/git/attributes is used instead.  "
"Attributes for all users on a system should be placed in the `$(prefix)/etc/"
"gitattributes` file."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:101
msgid ""
"Sometimes you would need to override a setting of an attribute for a path to "
"`Unspecified` state.  This can be done by listing the name of the attribute "
"prefixed with an exclamation point `!`."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/gitattributes.txt:104
#, no-wrap
msgid "EFFECTS"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:109
msgid ""
"Certain operations by Git can be influenced by assigning particular "
"attributes to a path.  Currently, the following operations are attributes-"
"aware."
msgstr ""

#. type: Title ~
#: ../Documentation-sedout/gitattributes.txt:111
#, no-wrap
msgid "Checking-out and checking-in"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:119
msgid ""
"These attributes affect how the contents stored in the repository are copied "
"to the working tree files when commands such as 'git switch', 'git checkout' "
"and 'git merge' run.  They also affect how Git stores the contents you "
"prepare in the working tree in the repository upon 'git add' and 'git "
"commit'."
msgstr ""

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:121
#, no-wrap
msgid "`text`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:131
msgid ""
"This attribute enables and controls end-of-line normalization.  When a text "
"file is normalized, its line endings are converted to LF in the repository.  "
"To control what line ending style is used in the working directory, use the "
"`eol` attribute for a single file and the `core.eol` configuration variable "
"for all text files.  Note that setting `core.autocrlf` to `true` or `input` "
"overrides `core.eol` (see the definitions of those options in linkgit:git-"
"config[1])."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:137
msgid ""
"Setting the `text` attribute on a path enables end-of-line normalization and "
"marks the path as a text file.  End-of-line conversion takes place without "
"guessing the content type."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:142
msgid ""
"Unsetting the `text` attribute on a path tells Git not to attempt any end-of-"
"line conversion upon checkin or checkout."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/gitattributes.txt:143
#, no-wrap
msgid "Set to string value \"auto\""
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:149
msgid ""
"When `text` is set to \"auto\", the path is marked for automatic end-of-line "
"conversion.  If Git decides that the content is text, its line endings are "
"converted to LF on checkin.  When the file has been committed with CRLF, no "
"conversion is done."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:155
msgid ""
"If the `text` attribute is unspecified, Git uses the `core.autocrlf` "
"configuration variable to determine if the file should be converted."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:158
msgid ""
"Any other value causes Git to act as if `text` has been left unspecified."
msgstr ""

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:160
#, no-wrap
msgid "`eol`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:168
msgid ""
"This attribute sets a specific line-ending style to be used in the working "
"directory.  It enables end-of-line conversion without any content checks, "
"effectively setting the `text` attribute.  Note that setting this attribute "
"on paths which are in the index with CRLF line endings may make the paths to "
"be considered dirty.  Adding the path to the index again will normalize the "
"line endings in the index."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/gitattributes.txt:169
#, no-wrap
msgid "Set to string value \"crlf\""
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:174
msgid ""
"This setting forces Git to normalize line endings for this file on checkin "
"and convert them to CRLF when the file is checked out."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/gitattributes.txt:175
#, no-wrap
msgid "Set to string value \"lf\""
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:180
msgid ""
"This setting forces Git to normalize line endings to LF on checkin and "
"prevents conversion to CRLF when the file is checked out."
msgstr ""

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:182
#, no-wrap
msgid "Backwards compatibility with `crlf` attribute"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:186
msgid ""
"For backwards compatibility, the `crlf` attribute is interpreted as follows:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:191
#, no-wrap
msgid ""
"crlf\t\ttext\n"
"-crlf\t\t-text\n"
"crlf=input\teol=lf\n"
msgstr ""

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:194
#, no-wrap
msgid "End-of-line conversion"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:199
msgid ""
"While Git normally leaves file contents alone, it can be configured to "
"normalize line endings to LF in the repository and, optionally, to convert "
"them to CRLF when files are checked out."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:203
msgid ""
"If you simply want to have CRLF line endings in your working directory "
"regardless of the repository you are working with, you can set the config "
"variable \"core.autocrlf\" without using any attributes."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:207
#, no-wrap
msgid ""
"[core]\n"
"\tautocrlf = true\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:213
msgid ""
"This does not force normalization of text files, but does ensure that text "
"files that you introduce to the repository have their line endings "
"normalized to LF when they are added, and that files that are already "
"normalized in the repository stay normalized."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:217
msgid ""
"If you want to ensure that text files that any contributor introduces to the "
"repository have their line endings normalized, you can set the `text` "
"attribute to \"auto\" for _all_ files."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:220
#, no-wrap
msgid "*\ttext=auto\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:228
msgid ""
"The attributes allow a fine-grained control, how the line endings are "
"converted.  Here is an example that will make Git normalize .txt, .vcproj "
"and .sh files, ensure that .vcproj files have CRLF and .sh files have LF in "
"the working directory, and prevent .jpg files from being normalized "
"regardless of their content."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:235
#, no-wrap
msgid ""
"*               text=auto\n"
"*.txt\t\ttext\n"
"*.vcproj\ttext eol=crlf\n"
"*.sh\t\ttext eol=lf\n"
"*.jpg\t\t-text\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:240
msgid ""
"When `text=auto` conversion is enabled in a cross-platform project using "
"push and pull to a central repository the text files containing CRLFs should "
"be normalized."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:242
msgid "From a clean working directory:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:248
#, no-wrap
msgid ""
"$ echo \"* text=auto\" >.gitattributes\n"
"$ git add --renormalize .\n"
"$ git status        # Show files that will be normalized\n"
"$ git commit -m \"Introduce end-of-line normalization\"\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:252
msgid ""
"If any files that should not be normalized show up in 'git status', unset "
"their `text` attribute before running 'git add -u'."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:255
#, no-wrap
msgid "manual.pdf\t-text\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:259
msgid ""
"Conversely, text files that Git does not detect can have normalization "
"enabled manually."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:262
#, no-wrap
msgid "weirdchars.txt\ttext\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:271
msgid ""
"If `core.safecrlf` is set to \"true\" or \"warn\", Git verifies if the "
"conversion is reversible for the current setting of `core.autocrlf`.  For "
"\"true\", Git rejects irreversible conversions; for \"warn\", Git only "
"prints a warning but accepts an irreversible conversion.  The safety "
"triggers to prevent such a conversion done to the files in the work tree, "
"but there are a few exceptions.  Even though..."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:274
msgid ""
"'git add' itself does not touch the files in the work tree, the next "
"checkout would, so the safety triggers;"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:279
msgid ""
"'git apply' to update a text file with a patch does touch the files in the "
"work tree, but the operation is about text files and CRLF conversion is "
"about fixing the line ending inconsistencies, so the safety does not trigger;"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:283
msgid ""
"'git diff' itself does not touch the files in the work tree, it is often run "
"to inspect the changes you intend to next 'git add'.  To catch potential "
"problems early, safety triggers."
msgstr ""

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:286
#, no-wrap
msgid "`working-tree-encoding`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:293
msgid ""
"Git recognizes files encoded in ASCII or one of its supersets (e.g.  UTF-8, "
"ISO-8859-1, ...) as text files. Files encoded in certain other encodings (e."
"g. UTF-16) are interpreted as binary and consequently built-in Git text "
"processing tools (e.g. 'git diff') as well as most Git web front ends do not "
"visualize the contents of these files by default."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:300
msgid ""
"In these cases you can tell Git the encoding of a file in the working "
"directory with the `working-tree-encoding` attribute. If a file with this "
"attribute is added to Git, then Git re-encodes the content from the "
"specified encoding to UTF-8. Finally, Git stores the UTF-8 encoded content "
"in its internal data structure (called \"the index\"). On checkout the "
"content is re-encoded back to the specified encoding."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:303
msgid ""
"Please note that using the `working-tree-encoding` attribute may have a "
"number of pitfalls:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:309
msgid ""
"Alternative Git implementations (e.g. JGit or libgit2) and older Git "
"versions (as of March 2018) do not support the `working-tree-encoding` "
"attribute. If you decide to use the `working-tree-encoding` attribute in "
"your repository, then it is strongly recommended to ensure that all clients "
"working with the repository support it."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:317
msgid ""
"For example, Microsoft Visual Studio resources files (`*.rc`) or PowerShell "
"script files (`*.ps1`) are sometimes encoded in UTF-16.  If you declare `*."
"ps1` as files as UTF-16 and you add `foo.ps1` with a `working-tree-encoding` "
"enabled Git client, then `foo.ps1` will be stored as UTF-8 internally. A "
"client without `working-tree-encoding` support will checkout `foo.ps1` as "
"UTF-8 encoded file. This will typically cause trouble for the users of this "
"file."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:324
msgid ""
"If a Git client that does not support the `working-tree-encoding` attribute "
"adds a new file `bar.ps1`, then `bar.ps1` will be stored \"as-is\" "
"internally (in this example probably as UTF-16).  A client with `working-"
"tree-encoding` support will interpret the internal contents as UTF-8 and try "
"to convert it to UTF-16 on checkout.  That operation will fail and cause an "
"error."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:332
msgid ""
"Reencoding content to non-UTF encodings can cause errors as the conversion "
"might not be UTF-8 round trip safe. If you suspect your encoding to not be "
"round trip safe, then add it to `core.checkRoundtripEncoding` to make Git "
"check the round trip encoding (see linkgit:git-config[1]). SHIFT-JIS "
"(Japanese character set) is known to have round trip issues with UTF-8 and "
"is checked by default."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:335
msgid ""
"Reencoding content requires resources that might slow down certain Git "
"operations (e.g 'git checkout' or 'git add')."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:339
msgid ""
"Use the `working-tree-encoding` attribute only if you cannot store a file in "
"UTF-8 encoding and if you want Git to be able to process the content as text."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:343
msgid ""
"As an example, use the following attributes if your '*.ps1' files are UTF-16 "
"encoded with byte order mark (BOM) and you want Git to perform automatic "
"line ending conversion based on your platform."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:346
#, no-wrap
msgid "*.ps1\t\ttext working-tree-encoding=UTF-16\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:355
msgid ""
"Use the following attributes if your '*.ps1' files are UTF-16 little endian "
"encoded without BOM and you want Git to use Windows line endings in the "
"working directory (use `UTF-16LE-BOM` instead of `UTF-16LE` if you want "
"UTF-16 little endian with BOM).  Please note, it is highly recommended to "
"explicitly define the line endings with `eol` if the `working-tree-encoding` "
"attribute is used to avoid ambiguity."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:358
#, no-wrap
msgid "*.ps1\t\ttext working-tree-encoding=UTF-16LE eol=CRLF\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:362
msgid ""
"You can get a list of all available encodings on your platform with the "
"following command:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:365
#, no-wrap
msgid "iconv --list\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:369
msgid ""
"If you do not know the encoding of a file, then you can use the `file` "
"command to guess the encoding:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:372
#, no-wrap
msgid "file foo.ps1\n"
msgstr ""

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:376
#, no-wrap
msgid "`ident`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:384
msgid ""
"When the attribute `ident` is set for a path, Git replaces `$Id$` in the "
"blob object with `$Id:`, followed by the 40-character hexadecimal blob "
"object name, followed by a dollar sign `$` upon checkout.  Any byte sequence "
"that begins with `$Id:` and ends with `$` in the worktree file is replaced "
"with `$Id$` upon check-in."
msgstr ""

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:387
#, no-wrap
msgid "`filter`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:391
msgid ""
"A `filter` attribute can be set to a string value that names a filter driver "
"specified in the configuration."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:407
msgid ""
"A filter driver consists of a `clean` command and a `smudge` command, either "
"of which can be left unspecified.  Upon checkout, when the `smudge` command "
"is specified, the command is fed the blob object from its standard input, "
"and its standard output is used to update the worktree file.  Similarly, the "
"`clean` command is used to convert the contents of worktree file upon "
"checkin. By default these commands process only a single blob and terminate. "
"If a long running `process` filter is used in place of `clean` and/or "
"`smudge` filters, then Git can process all blobs with a single filter "
"command invocation for the entire life of a single Git command, for example "
"`git add --all`. If a long running `process` filter is configured then it "
"always takes precedence over a configured single blob filter. See section "
"below for the description of the protocol used to communicate with a "
"`process` filter."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:414
msgid ""
"One use of the content filtering is to massage the content into a shape that "
"is more convenient for the platform, filesystem, and the user to use.  For "
"this mode of operation, the key phrase here is \"more convenient\" and not "
"\"turning something unusable into usable\".  In other words, the intent is "
"that if someone unsets the filter driver definition, or does not have the "
"appropriate filter program, the project should still be usable."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:420
msgid ""
"Another use of the content filtering is to store the content that cannot be "
"directly used in the repository (e.g. a UUID that refers to the true content "
"stored outside Git, or an encrypted content) and turn it into a usable form "
"upon checkout (e.g. download the external content, or decrypt the encrypted "
"content)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:425
msgid ""
"These two filters behave differently, and by default, a filter is taken as "
"the former, massaging the contents into more convenient shape.  A missing "
"filter driver definition in the config, or a filter driver that exits with a "
"non-zero status, is not an error but makes the filter a no-op passthru."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:429
msgid ""
"You can declare that a filter turns a content that by itself is unusable "
"into a usable content by setting the filter.<driver>.required configuration "
"variable to `true`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:432
msgid ""
"Note: Whenever the clean filter is changed, the repo should be renormalized: "
"$ git add --renormalize ."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:435
msgid ""
"For example, in .gitattributes, you would assign the `filter` attribute for "
"paths."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:438
#, no-wrap
msgid "*.c\tfilter=indent\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:445
msgid ""
"Then you would define a \"filter.indent.clean\" and \"filter.indent.smudge\" "
"configuration in your .git/config to specify a pair of commands to modify "
"the contents of C programs when the source files are checked in (\"clean\" "
"is run) and checked out (no change is made because the command is \"cat\")."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:450
#, no-wrap
msgid ""
"[filter \"indent\"]\n"
"\tclean = indent\n"
"\tsmudge = cat\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:457
msgid ""
"For best results, `clean` should not alter its output further if it is run "
"twice (\"clean->clean\" should be equivalent to \"clean\"), and multiple "
"`smudge` commands should not alter `clean`'s output (\"smudge->smudge->clean"
"\" should be equivalent to \"clean\").  See the section on merging below."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:462
msgid ""
"The \"indent\" filter is well-behaved in this regard: it will not modify "
"input that is already correctly indented.  In this case, the lack of a "
"smudge filter means that the clean filter _must_ accept its own output "
"without modifying it."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:465
msgid ""
"If a filter _must_ succeed in order to make the stored contents usable, you "
"can declare that the filter is `required`, in the configuration:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:471
#, no-wrap
msgid ""
"[filter \"crypt\"]\n"
"\tclean = openssl enc ...\n"
"\tsmudge = openssl enc -d ...\n"
"\trequired\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:476
msgid ""
"Sequence \"%f\" on the filter command line is replaced with the name of the "
"file the filter is working on.  A filter might use this in keyword "
"substitution.  For example:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:481
#, no-wrap
msgid ""
"[filter \"p4\"]\n"
"\tclean = git-p4-filter --clean %f\n"
"\tsmudge = git-p4-filter --smudge %f\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:488
msgid ""
"Note that \"%f\" is the name of the path that is being worked on. Depending "
"on the version that is being filtered, the corresponding file on disk may "
"not exist, or may have different contents. So, smudge and clean commands "
"should not try to access the file on disk, but only act as filters on the "
"content provided to them on standard input."
msgstr ""

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:490
#, no-wrap
msgid "Long Running Filter Process"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:497
msgid ""
"If the filter command (a string value) is defined via `filter.<driver>."
"process` then Git can process all blobs with a single filter invocation for "
"the entire life of a single Git command. This is achieved by using the long-"
"running process protocol (described in technical/long-running-process-"
"protocol.txt)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:503
msgid ""
"When Git encounters the first file that needs to be cleaned or smudged, it "
"starts the filter and performs the handshake. In the handshake, the welcome "
"message sent by Git is \"git-filter-client\", only version 2 is supported, "
"and the supported capabilities are \"clean\", \"smudge\", and \"delay\"."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:514
msgid ""
"Afterwards Git sends a list of \"key=value\" pairs terminated with a flush "
"packet. The list will contain at least the filter command (based on the "
"supported capabilities) and the pathname of the file to filter relative to "
"the repository root. Right after the flush packet Git sends the content "
"split in zero or more pkt-line packets and a flush packet to terminate "
"content. Please note, that the filter must not send any response before it "
"received the content and the final flush packet. Also note that the \"value"
"\" of a \"key=value\" pair can contain the \"=\" character whereas the key "
"would never contain that character."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:520
#, no-wrap
msgid ""
"packet:          git> command=smudge\n"
"packet:          git> pathname=path/testfile.dat\n"
"packet:          git> 0000\n"
"packet:          git> CONTENT\n"
"packet:          git> 0000\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:531
msgid ""
"The filter is expected to respond with a list of \"key=value\" pairs "
"terminated with a flush packet. If the filter does not experience problems "
"then the list must contain a \"success\" status. Right after these packets "
"the filter is expected to send the content in zero or more pkt-line packets "
"and a flush packet at the end. Finally, a second list of \"key=value\" pairs "
"terminated with a flush packet is expected. The filter can change the status "
"in the second list or keep the status as is with an empty list. Please note "
"that the empty list must be terminated with a flush packet regardless."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:538
#, no-wrap
msgid ""
"packet:          git< status=success\n"
"packet:          git< 0000\n"
"packet:          git< SMUDGED_CONTENT\n"
"packet:          git< 0000\n"
"packet:          git< 0000  # empty list, keep \"status=success\" unchanged!\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:542
msgid ""
"If the result content is empty then the filter is expected to respond with a "
"\"success\" status and a flush packet to signal the empty content."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:547
#, no-wrap
msgid ""
"packet:          git< status=success\n"
"packet:          git< 0000\n"
"packet:          git< 0000  # empty content!\n"
"packet:          git< 0000  # empty list, keep \"status=success\" unchanged!\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:551
msgid ""
"In case the filter cannot or does not want to process the content, it is "
"expected to respond with an \"error\" status."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:554
#, no-wrap
msgid ""
"packet:          git< status=error\n"
"packet:          git< 0000\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:559
msgid ""
"If the filter experiences an error during processing, then it can send the "
"status \"error\" after the content was (partially or completely) sent."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:566
#, no-wrap
msgid ""
"packet:          git< status=success\n"
"packet:          git< 0000\n"
"packet:          git< HALF_WRITTEN_ERRONEOUS_CONTENT\n"
"packet:          git< 0000\n"
"packet:          git< status=error\n"
"packet:          git< 0000\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:572
msgid ""
"In case the filter cannot or does not want to process the content as well as "
"any future content for the lifetime of the Git process, then it is expected "
"to respond with an \"abort\" status at any point in the protocol."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:575
#, no-wrap
msgid ""
"packet:          git< status=abort\n"
"packet:          git< 0000\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:582
msgid ""
"Git neither stops nor restarts the filter process in case the \"error\"/"
"\"abort\" status is set. However, Git sets its exit code according to the "
"`filter.<driver>.required` flag, mimicking the behavior of the `filter."
"<driver>.clean` / `filter.<driver>.smudge` mechanism."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:587
msgid ""
"If the filter dies during the communication or does not adhere to the "
"protocol then Git will stop the filter process and restart it with the next "
"file that needs to be processed. Depending on the `filter.<driver>.required` "
"flag Git will interpret that as error."
msgstr ""

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:589
#, no-wrap
msgid "Delay"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:596
msgid ""
"If the filter supports the \"delay\" capability, then Git can send the flag "
"\"can-delay\" after the filter command and pathname. This flag denotes that "
"the filter can delay filtering the current blob (e.g. to compensate network "
"latencies) by responding with no content but with the status \"delayed\" and "
"a flush packet."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:605
#, no-wrap
msgid ""
"packet:          git> command=smudge\n"
"packet:          git> pathname=path/testfile.dat\n"
"packet:          git> can-delay=1\n"
"packet:          git> 0000\n"
"packet:          git> CONTENT\n"
"packet:          git> 0000\n"
"packet:          git< status=delayed\n"
"packet:          git< 0000\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:619
msgid ""
"If the filter supports the \"delay\" capability then it must support the "
"\"list_available_blobs\" command. If Git sends this command, then the filter "
"is expected to return a list of pathnames representing blobs that have been "
"delayed earlier and are now available.  The list must be terminated with a "
"flush packet followed by a \"success\" status that is also terminated with a "
"flush packet. If no blobs for the delayed paths are available, yet, then the "
"filter is expected to block the response until at least one blob becomes "
"available. The filter can tell Git that it has no more delayed blobs by "
"sending an empty list. As soon as the filter responds with an empty list, "
"Git stops asking. All blobs that Git has not received at this point are "
"considered missing and will result in an error."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:628
#, no-wrap
msgid ""
"packet:          git> command=list_available_blobs\n"
"packet:          git> 0000\n"
"packet:          git< pathname=path/testfile.dat\n"
"packet:          git< pathname=path/otherfile.dat\n"
"packet:          git< 0000\n"
"packet:          git< status=success\n"
"packet:          git< 0000\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:634
msgid ""
"After Git received the pathnames, it will request the corresponding blobs "
"again. These requests contain a pathname and an empty content section. The "
"filter is expected to respond with the smudged content in the usual way as "
"explained above."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:644
#, no-wrap
msgid ""
"packet:          git> command=smudge\n"
"packet:          git> pathname=path/testfile.dat\n"
"packet:          git> 0000\n"
"packet:          git> 0000  # empty content!\n"
"packet:          git< status=success\n"
"packet:          git< 0000\n"
"packet:          git< SMUDGED_CONTENT\n"
"packet:          git< 0000\n"
"packet:          git< 0000  # empty list, keep \"status=success\" unchanged!\n"
msgstr ""

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:647
#, no-wrap
msgid "Example"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:654
msgid ""
"A long running filter demo implementation can be found in `contrib/long-"
"running-filter/example.pl` located in the Git core repository. If you "
"develop your own long running filter process then the `GIT_TRACE_PACKET` "
"environment variables can be very helpful for debugging (see linkgit:git[1])."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:659
msgid ""
"Please note that you cannot use an existing `filter.<driver>.clean` or "
"`filter.<driver>.smudge` command with `filter.<driver>.process` because the "
"former two use a different inter process communication protocol than the "
"latter one."
msgstr ""

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:662
#, no-wrap
msgid "Interaction between checkin/checkout attributes"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:669
msgid ""
"In the check-in codepath, the worktree file is first converted with `filter` "
"driver (if specified and corresponding driver defined), then the result is "
"processed with `ident` (if specified), and then finally with `text` (again, "
"if specified and applicable)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:672
msgid ""
"In the check-out codepath, the blob content is first converted with `text`, "
"and then `ident` and fed to `filter`."
msgstr ""

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:675
#, no-wrap
msgid "Merging branches with differing checkin/checkout attributes"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:682
msgid ""
"If you have added attributes to a file that cause the canonical repository "
"format for that file to change, such as adding a clean/smudge filter or text/"
"eol/ident attributes, merging anything where the attribute is not in place "
"would normally cause merge conflicts."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:689
msgid ""
"To prevent these unnecessary merge conflicts, Git can be told to run a "
"virtual check-out and check-in of all three stages of a file when resolving "
"a three-way merge by setting the `merge.renormalize` configuration "
"variable.  This prevents changes caused by check-in conversion from causing "
"spurious merge conflicts when a converted file is merged with an unconverted "
"file."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:695
msgid ""
"As long as a \"smudge->clean\" results in the same output as a \"clean\" "
"even on files that are already smudged, this strategy will automatically "
"resolve all filter-related conflicts.  Filters that do not act in this way "
"may cause additional merge conflicts that must be resolved manually."
msgstr ""

#. type: Title ~
#: ../Documentation-sedout/gitattributes.txt:698
#, no-wrap
msgid "Generating diff text"
msgstr ""

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:701
#, no-wrap
msgid "`diff`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:709
msgid ""
"The attribute `diff` affects how Git generates diffs for particular files. "
"It can tell Git whether to generate a textual patch for the path or to treat "
"the path as a binary file.  It can also affect what line is shown on the "
"hunk header `@@ -k,l +n,m @@` line, tell Git to use an external command to "
"generate the diff, or ask Git to convert binary files to a text format "
"before generating the diff."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:715
msgid ""
"A path to which the `diff` attribute is set is treated as text, even when "
"they contain byte values that normally never appear in text files, such as "
"NUL."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:721
msgid ""
"A path to which the `diff` attribute is unset will generate `Binary files "
"differ` (or a binary patch, if binary patches are enabled)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:728
msgid ""
"A path to which the `diff` attribute is unspecified first gets its contents "
"inspected, and if it looks like text and is smaller than core."
"bigFileThreshold, it is treated as text. Otherwise it would generate `Binary "
"files differ`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/gitattributes.txt:729
#: ../Documentation-sedout/gitattributes.txt:1026
#: ../Documentation-sedout/gitattributes.txt:1152
#, no-wrap
msgid "String"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:736
msgid ""
"Diff is shown using the specified diff driver.  Each driver may specify one "
"or more options, as described in the following section. The options for the "
"diff driver \"foo\" are defined by the configuration variables in the \"diff."
"foo\" section of the Git config file."
msgstr ""

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:739
#, no-wrap
msgid "Defining an external diff driver"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:744
msgid ""
"The definition of a diff driver is done in `gitconfig`, not `gitattributes` "
"file, so strictly speaking this manual page is a wrong place to talk about "
"it.  However..."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:747
msgid ""
"To define an external diff driver `jcdiff`, add a section to your `$GIT_DIR/"
"config` file (or `$HOME/.gitconfig` file) like this:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:751
#, no-wrap
msgid ""
"[diff \"jcdiff\"]\n"
"\tcommand = j-c-diff\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:758
msgid ""
"When Git needs to show you a diff for the path with `diff` attribute set to "
"`jcdiff`, it calls the command you specified with the above configuration, i."
"e. `j-c-diff`, with 7 parameters, just like `GIT_EXTERNAL_DIFF` program is "
"called.  See linkgit:git[1] for details."
msgstr ""

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:761
#, no-wrap
msgid "Defining a custom hunk-header"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:765
msgid ""
"Each group of changes (called a \"hunk\") in the textual diff output is "
"prefixed with a line of the form:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:767
#, no-wrap
msgid "\t@@ -k,l +n,m @@ TEXT\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:773
msgid ""
"This is called a 'hunk header'.  The \"TEXT\" portion is by default a line "
"that begins with an alphabet, an underscore or a dollar sign; this matches "
"what GNU 'diff -p' output uses.  This default selection however is not "
"suited for some contents, and you can use a customized pattern to make a "
"selection."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:776
msgid ""
"First, in .gitattributes, you would assign the `diff` attribute for paths."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:779
#, no-wrap
msgid "*.tex\tdiff=tex\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:785
msgid ""
"Then, you would define a \"diff.tex.xfuncname\" configuration to specify a "
"regular expression that matches a line that you would want to appear as the "
"hunk header \"TEXT\". Add a section to your `$GIT_DIR/config` file (or `"
"$HOME/.gitconfig` file) like this:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:789
#, no-wrap
msgid ""
"[diff \"tex\"]\n"
"\txfuncname = \"^(\\\\\\\\(sub)*section\\\\{.*)$\"\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:796
msgid ""
"Note.  A single level of backslashes are eaten by the configuration file "
"parser, so you would need to double the backslashes; the pattern above picks "
"a line that begins with a backslash, and zero or more occurrences of `sub` "
"followed by `section` followed by open brace, to the end of line."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:802
msgid ""
"There are a few built-in patterns to make this easier, and `tex` is one of "
"them, so you do not have to write the above in your configuration file (you "
"still need to enable this with the attribute mechanism, via `."
"gitattributes`).  The following built in patterns are available:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:804
msgid "`ada` suitable for source code in the Ada language."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:807
msgid ""
"`bash` suitable for source code in the Bourne-Again SHell language.  Covers "
"a superset of POSIX shell function definitions."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:809
msgid "`bibtex` suitable for files with BibTeX coded references."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:811
msgid "`cpp` suitable for source code in the C and C++ languages."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:813
msgid "`csharp` suitable for source code in the C# language."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:815
msgid "`css` suitable for cascading style sheets."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:817
msgid "`dts` suitable for devicetree (DTS) files."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:819
msgid "`elixir` suitable for source code in the Elixir language."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:821
msgid "`fortran` suitable for source code in the Fortran language."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:823
msgid "`fountain` suitable for Fountain documents."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:825
msgid "`golang` suitable for source code in the Go language."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:827
msgid "`html` suitable for HTML/XHTML documents."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:829
msgid "`java` suitable for source code in the Java language."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:831
msgid "`markdown` suitable for Markdown documents."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:833
msgid "`matlab` suitable for source code in the MATLAB and Octave languages."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:835
msgid "`objc` suitable for source code in the Objective-C language."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:837
msgid "`pascal` suitable for source code in the Pascal/Delphi language."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:839
msgid "`perl` suitable for source code in the Perl language."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:841
msgid "`php` suitable for source code in the PHP language."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:843
msgid "`python` suitable for source code in the Python language."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:845
msgid "`ruby` suitable for source code in the Ruby language."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:847
msgid "`rust` suitable for source code in the Rust language."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:849
msgid "`scheme` suitable for source code in the Scheme language."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:851
msgid "`tex` suitable for source code for LaTeX documents."
msgstr ""

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:854
#, no-wrap
msgid "Customizing word diff"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:863
msgid ""
"You can customize the rules that `git diff --word-diff` uses to split words "
"in a line, by specifying an appropriate regular expression in the \"diff.*."
"wordRegex\" configuration variable.  For example, in TeX a backslash "
"followed by a sequence of letters forms a command, but several such commands "
"can be run together without intervening whitespace.  To separate them, use a "
"regular expression in your `$GIT_DIR/config` file (or `$HOME/.gitconfig` "
"file) like this:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:867
#, no-wrap
msgid ""
"[diff \"tex\"]\n"
"\twordRegex = \"\\\\\\\\[a-zA-Z]+|[{}]|\\\\\\\\.|[^\\\\{}[:space:]]+\"\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:871
msgid ""
"A built-in pattern is provided for all languages listed in the previous "
"section."
msgstr ""

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:874
#, no-wrap
msgid "Performing text diffs of binary files"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:882
msgid ""
"Sometimes it is desirable to see the diff of a text-converted version of "
"some binary files. For example, a word processor document can be converted "
"to an ASCII text representation, and the diff of the text shown. Even though "
"this conversion loses some information, the resulting diff is useful for "
"human viewing (but cannot be applied directly)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:887
msgid ""
"The `textconv` config option is used to define a program for performing such "
"a conversion. The program should take a single argument, the name of a file "
"to convert, and produce the resulting text on stdout."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:892
msgid ""
"For example, to show the diff of the exif information of a file instead of "
"the binary information (assuming you have the exif tool installed), add the "
"following section to your `$GIT_DIR/config` file (or `$HOME/.gitconfig` "
"file):"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:896
#, no-wrap
msgid ""
"[diff \"jpg\"]\n"
"\ttextconv = exif\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:909
msgid ""
"The text conversion is generally a one-way conversion; in this example, we "
"lose the actual image contents and focus just on the text data. This means "
"that diffs generated by textconv are _not_ suitable for applying. For this "
"reason, only `git diff` and the `git log` family of commands (i.e., log, "
"whatchanged, show) will perform text conversion. `git format-patch` will "
"never generate this output. If you want to send somebody a text-converted "
"diff of a binary file (e.g., because it quickly conveys the changes you have "
"made), you should generate it separately and send it as a comment _in "
"addition to_ the usual binary diff that you might send."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:915
msgid ""
"Because text conversion can be slow, especially when doing a large number of "
"them with `git log -p`, Git provides a mechanism to cache the output and use "
"it in future diffs.  To enable caching, set the \"cachetextconv\" variable "
"in your diff driver's config. For example:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:920
#, no-wrap
msgid ""
"[diff \"jpg\"]\n"
"\ttextconv = exif\n"
"\tcachetextconv = true\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:930
msgid ""
"This will cache the result of running \"exif\" on each blob indefinitely. If "
"you change the textconv config variable for a diff driver, Git will "
"automatically invalidate the cache entries and re-run the textconv filter. "
"If you want to invalidate the cache manually (e.g., because your version of "
"\"exif\" was updated and now produces better output), you can remove the "
"cache manually with `git update-ref -d refs/notes/textconv/jpg` (where \"jpg"
"\" is the name of the diff driver, as in the example above)."
msgstr ""

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:932
#, no-wrap
msgid "Choosing textconv versus external diff"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:938
msgid ""
"If you want to show differences between binary or specially-formatted blobs "
"in your repository, you can choose to use either an external diff command, "
"or to use textconv to convert them to a diff-able text format.  Which method "
"you choose depends on your exact situation."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:943
msgid ""
"The advantage of using an external diff command is flexibility. You are not "
"bound to find line-oriented changes, nor is it necessary for the output to "
"resemble unified diff. You are free to locate and report changes in the most "
"appropriate way for your data format."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:948
msgid ""
"A textconv, by comparison, is much more limiting. You provide a "
"transformation of the data into a line-oriented text format, and Git uses "
"its regular diff tools to generate the output. There are several advantages "
"to choosing this method:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:953
msgid ""
"Ease of use. It is often much simpler to write a binary to text "
"transformation than it is to perform your own diff. In many cases, existing "
"programs can be used as textconv filters (e.g., exif, odt2txt)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:957
msgid ""
"Git diff features. By performing only the transformation step yourself, you "
"can still utilize many of Git's diff features, including colorization, word-"
"diff, and combined diffs for merges."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:960
msgid ""
"Caching. Textconv caching can speed up repeated diffs, such as those you "
"might trigger by running `git log -p`."
msgstr ""

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:963
#, no-wrap
msgid "Marking files as binary"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:972
msgid ""
"Git usually guesses correctly whether a blob contains text or binary data by "
"examining the beginning of the contents. However, sometimes you may want to "
"override its decision, either because a blob contains binary data later in "
"the file, or because the content, while technically composed of text "
"characters, is opaque to a human reader. For example, many postscript files "
"contain only ASCII characters, but produce noisy and meaningless diffs."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:975
msgid ""
"The simplest way to mark a file as binary is to unset the diff attribute in "
"the `.gitattributes` file:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:978
#, no-wrap
msgid "*.ps -diff\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:982
msgid ""
"This will cause Git to generate `Binary files differ` (or a binary patch, if "
"binary patches are enabled) instead of a regular diff."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:988
msgid ""
"However, one may also want to specify other diff driver attributes. For "
"example, you might want to use `textconv` to convert postscript files to an "
"ASCII representation for human viewing, but otherwise treat them as binary "
"files. You cannot specify both `-diff` and `diff=ps` attributes.  The "
"solution is to use the `diff.*.binary` config option:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:993
#, no-wrap
msgid ""
"[diff \"ps\"]\n"
"  textconv = ps2ascii\n"
"  binary = true\n"
msgstr ""

#. type: Title ~
#: ../Documentation-sedout/gitattributes.txt:996
#, no-wrap
msgid "Performing a three-way merge"
msgstr ""

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:999
#, no-wrap
msgid "`merge`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1004
msgid ""
"The attribute `merge` affects how three versions of a file are merged when a "
"file-level merge is necessary during `git merge`, and other commands such as "
"`git revert` and `git cherry-pick`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1010
msgid ""
"Built-in 3-way merge driver is used to merge the contents in a way similar "
"to 'merge' command of `RCS` suite.  This is suitable for ordinary text files."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1017
msgid ""
"Take the version from the current branch as the tentative merge result, and "
"declare that the merge has conflicts.  This is suitable for binary files "
"that do not have a well-defined merge semantics."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1025
msgid ""
"By default, this uses the same built-in 3-way merge driver as is the case "
"when the `merge` attribute is set.  However, the `merge.default` "
"configuration variable can name different merge driver to be used with paths "
"for which the `merge` attribute is unspecified."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1033
msgid ""
"3-way merge is performed using the specified custom merge driver.  The built-"
"in 3-way merge driver can be explicitly specified by asking for \"text\" "
"driver; the built-in \"take the current branch\" driver can be requested "
"with \"binary\"."
msgstr ""

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:1036
#, no-wrap
msgid "Built-in merge drivers"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1040
msgid ""
"There are a few built-in low-level merge drivers defined that can be asked "
"for via the `merge` attribute."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/gitattributes.txt:1041
#, no-wrap
msgid "text"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1049
msgid ""
"Usual 3-way file level merge for text files.  Conflicted regions are marked "
"with conflict markers `<<<<<<<`, `=======` and `>>>>>>>`.  The version from "
"your branch appears before the `=======` marker, and the version from the "
"merged branch appears after the `=======` marker."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/gitattributes.txt:1050
#, no-wrap
msgid "binary"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1055
msgid ""
"Keep the version from your branch in the work tree, but leave the path in "
"the conflicted state for the user to sort out."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/gitattributes.txt:1056
#, no-wrap
msgid "union"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1064
msgid ""
"Run 3-way file level merge for text files, but take lines from both "
"versions, instead of leaving conflict markers.  This tends to leave the "
"added lines in the resulting file in random order and the user should verify "
"the result. Do not use this if you do not understand the implications."
msgstr ""

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:1067
#, no-wrap
msgid "Defining a custom merge driver"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1072
msgid ""
"The definition of a merge driver is done in the `.git/config` file, not in "
"the `gitattributes` file, so strictly speaking this manual page is a wrong "
"place to talk about it.  However..."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1075
msgid ""
"To define a custom merge driver `filfre`, add a section to your `$GIT_DIR/"
"config` file (or `$HOME/.gitconfig` file) like this:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:1081
#, no-wrap
msgid ""
"[merge \"filfre\"]\n"
"\tname = feel-free merge driver\n"
"\tdriver = filfre %O %A %B %L %P\n"
"\trecursive = binary\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1085
msgid "The `merge.*.name` variable gives the driver a human-readable name."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1093
msgid ""
"The `merge.*.driver` variable's value is used to construct a command to run "
"to merge ancestor's version (`%O`), current version (`%A`) and the other "
"branches' version (`%B`).  These three tokens are replaced with the names of "
"temporary files that hold the contents of these versions when the command "
"line is built. Additionally, %L will be replaced with the conflict marker "
"size (see below)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1098
msgid ""
"The merge driver is expected to leave the result of the merge in the file "
"named with `%A` by overwriting it, and exit with zero status if it managed "
"to merge them cleanly, or non-zero if there were conflicts."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1104
msgid ""
"The `merge.*.recursive` variable specifies what other merge driver to use "
"when the merge driver is called for an internal merge between common "
"ancestors, when there are more than one.  When left unspecified, the driver "
"itself is used for both internal merge and the final merge."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1107
msgid ""
"The merge driver can learn the pathname in which the merged result will be "
"stored via placeholder `%P`."
msgstr ""

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:1110
#, no-wrap
msgid "`conflict-marker-size`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1115
msgid ""
"This attribute controls the length of conflict markers left in the work tree "
"file during a conflicted merge.  Only setting to the value to a positive "
"integer has any meaningful effect."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1120
msgid ""
"For example, this line in `.gitattributes` can be used to tell the merge "
"machinery to leave much longer (instead of the usual 7-character-long)  "
"conflict markers when merging the file `Documentation/git-merge.txt` results "
"in a conflict."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:1123
#, no-wrap
msgid "Documentation/git-merge.txt\tconflict-marker-size=32\n"
msgstr ""

#. type: Title ~
#: ../Documentation-sedout/gitattributes.txt:1127
#, no-wrap
msgid "Checking whitespace errors"
msgstr ""

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:1130
#, no-wrap
msgid "`whitespace`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1136
msgid ""
"The `core.whitespace` configuration variable allows you to define what "
"'diff' and 'apply' should consider whitespace errors for all paths in the "
"project (See linkgit:git-config[1]).  This attribute gives you finer control "
"per path."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1142
msgid ""
"Notice all types of potential whitespace errors known to Git.  The tab width "
"is taken from the value of the `core.whitespace` configuration variable."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1146
msgid "Do not notice anything as error."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1151
msgid ""
"Use the value of the `core.whitespace` configuration variable to decide what "
"to notice as error."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1157
msgid ""
"Specify a comma separate list of common whitespace problems to notice in the "
"same format as the `core.whitespace` configuration variable."
msgstr ""

#. type: Title ~
#: ../Documentation-sedout/gitattributes.txt:1160
#, no-wrap
msgid "Creating an archive"
msgstr ""

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:1163
#, no-wrap
msgid "`export-ignore`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1167
msgid ""
"Files and directories with the attribute `export-ignore` won't be added to "
"archive files."
msgstr ""

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:1169
#, no-wrap
msgid "`export-subst`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1181
msgid ""
"If the attribute `export-subst` is set for a file then Git will expand "
"several placeholders when adding this file to an archive.  The expansion "
"depends on the availability of a commit ID, i.e., if linkgit:git-archive[1] "
"has been given a tree instead of a commit or a tag then no replacement will "
"be done.  The placeholders are the same as those for the option `--"
"pretty=format:` of linkgit:git-log[1], except that they need to be wrapped "
"like this: `$Format:PLACEHOLDERS$` in the file.  E.g. the string `$Format:%H"
"$` will be replaced by the commit hash.  However, only one `%(describe)` "
"placeholder is expanded per archive to avoid denial-of-service attacks."
msgstr ""

#. type: Title ~
#: ../Documentation-sedout/gitattributes.txt:1184
#, no-wrap
msgid "Packing objects"
msgstr ""

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:1187
#, no-wrap
msgid "`delta`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1191
msgid ""
"Delta compression will not be attempted for blobs for paths with the "
"attribute `delta` set to false."
msgstr ""

#. type: Title ~
#: ../Documentation-sedout/gitattributes.txt:1194
#, no-wrap
msgid "Viewing files in GUI tools"
msgstr ""

#. type: Title ^
#: ../Documentation-sedout/gitattributes.txt:1197
#, no-wrap
msgid "`encoding`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1204
msgid ""
"The value of this attribute specifies the character encoding that should be "
"used by GUI tools (e.g. linkgit:gitk[1] and linkgit:git-gui[1]) to display "
"the contents of the relevant file. Note that due to performance "
"considerations linkgit:gitk[1] does not use this attribute unless you "
"manually enable per-file encodings in its options."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1208
msgid ""
"If this attribute is not set or has an invalid value, the value of the `gui."
"encoding` configuration variable is used instead (See linkgit:git-config[1])."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/gitattributes.txt:1211
#, no-wrap
msgid "USING MACRO ATTRIBUTES"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1215
msgid ""
"You do not want any end-of-line conversions applied to, nor textual diffs "
"produced for, any binary file you track.  You would need to specify e.g."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:1218
#, no-wrap
msgid "*.jpg -text -diff\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1224
msgid ""
"but that may become cumbersome, when you have many attributes.  Using macro "
"attributes, you can define an attribute that, when set, also sets or unsets "
"a number of other attributes at the same time.  The system knows a built-in "
"macro attribute, `binary`:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:1227
#, no-wrap
msgid "*.jpg binary\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1234
msgid ""
"Setting the \"binary\" attribute also unsets the \"text\" and \"diff\" "
"attributes as above.  Note that macro attributes can only be \"Set\", though "
"setting one might have the effect of setting or unsetting other attributes "
"or even returning other attributes to the \"Unspecified\" state."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/gitattributes.txt:1237
#, no-wrap
msgid "DEFINING MACRO ATTRIBUTES"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1245
msgid ""
"Custom macro attributes can be defined only in top-level gitattributes files "
"(`$GIT_DIR/info/attributes`, the `.gitattributes` file at the top level of "
"the working tree, or the global or system-wide gitattributes files), not in "
"`.gitattributes` files in working tree subdirectories.  The built-in macro "
"attribute \"binary\" is equivalent to:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:1248
#, no-wrap
msgid "[attr]binary -diff -merge -text\n"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/gitattributes.txt:1251
#, no-wrap
msgid "NOTES"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1256
msgid ""
"Git does not follow symbolic links when accessing a `.gitattributes` file in "
"the working tree. This keeps behavior consistent when the file is accessed "
"from the index or a tree versus from the filesystem."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/gitattributes.txt:1258
#, no-wrap
msgid "EXAMPLES"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1261
msgid "If you have these three `gitattributes` file:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:1264
#, no-wrap
msgid "(in $GIT_DIR/info/attributes)\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:1266
#, no-wrap
msgid "a*\tfoo !bar -baz\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:1269
#, no-wrap
msgid ""
"(in .gitattributes)\n"
"abc\tfoo bar baz\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:1274
#, no-wrap
msgid ""
"(in t/.gitattributes)\n"
"ab*\tmerge=filfre\n"
"abc\t-foo -bar\n"
"*.c\tfrotz\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1277
msgid "the attributes given to path `t/abc` are computed as follows:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1283
msgid ""
"By examining `t/.gitattributes` (which is in the same directory as the path "
"in question), Git finds that the first line matches.  `merge` attribute is "
"set.  It also finds that the second line matches, and attributes `foo` and "
"`bar` are unset."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1289
msgid ""
"Then it examines `.gitattributes` (which is in the parent directory), and "
"finds that the first line matches, but `t/.gitattributes` file already "
"decided how `merge`, `foo` and `bar` attributes should be given to this "
"path, so it leaves `foo` and `bar` unset.  Attribute `baz` is set."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1294
msgid ""
"Finally it examines `$GIT_DIR/info/attributes`.  This file is used to "
"override the in-tree settings.  The first line is a match, and `foo` is set, "
"`bar` is reverted to unspecified state, and `baz` is unset."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1296
msgid "As the result, the attributes assignment to `t/abc` becomes:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitattributes.txt:1303
#, no-wrap
msgid ""
"foo\tset to true\n"
"bar\tunspecified\n"
"baz\tset to false\n"
"merge\tset to string value \"filfre\"\n"
"frotz\tunspecified\n"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/gitattributes.txt:1307
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1309
msgid "linkgit:git-check-attr[1]."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/gitattributes.txt:1311
#, no-wrap
msgid "GIT"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitattributes.txt:1312
msgid "Part of the linkgit:git[1] suite"
msgstr ""
