# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 0.0\n"
"POT-Creation-Date: 2022-09-24 21:41+0900\n"
"PO-Revision-Date: 2021-12-03 17:06+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/MyFirstObjectWalk.txt:1
#, no-wrap
msgid "My First Object Walk"
msgstr "My First Object Walk"

#. type: Title ==
#: ../Documentation-sedout/MyFirstObjectWalk.txt:3
#, no-wrap
msgid "What's an Object Walk?"
msgstr "What's an Object Walk?"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:11
msgid ""
"The object walk is a key concept in Git - this is the process that underpins "
"operations like object transfer and fsck. Beginning from a given commit, the "
"list of objects is found by walking parent relationships between commits "
"(commit X based on commit W) and containment relationships between objects "
"(tree Y is contained within commit X, and blob Z is located within tree Y, "
"giving our working tree for commit X something like `y/z.txt`)."
msgstr ""
"オブジェクト散歩(object walk)はGitの重要な概念です。これは、オブジェクト転送"
"やfsckなどの操作を支えるプロセスです。特定のコミットから開始して、オブジェク"
"ト間のリストは、コミット間の親関係(コミットWに基づくコミットX)とオブジェクト"
"間の包含関係(ツリーYはコミットX内に含まれ、ブロブZはツリーY内にある)をたどる"
"ことによって検出されます。コミットXの作業ツリーは `y/z.txt` のようなもので"
"す)。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:15
msgid ""
"A related concept is the revision walk, which is focused on commit objects "
"and their parent relationships and does not delve into other object types. "
"The revision walk is used for operations like `git log`."
msgstr ""
"関連する概念はリビジョン散歩(revision walk)です。これは、コミットオブジェクト"
"とその親の関係に焦点を当てており、他のオブジェクトタイプについては詳しく説明"
"していません。リビジョン散歩は、 `git log` などの操作に使用されます。"

#. type: Title ===
#: ../Documentation-sedout/MyFirstObjectWalk.txt:16
#, no-wrap
msgid "Related Reading"
msgstr "Related Reading"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:20
msgid ""
"`Documentation/user-manual.txt` under \"Hacking Git\" contains some coverage "
"of the revision walker in its various incarnations."
msgstr ""
"`Documentation/user-manual.txt` 「HackingGit」では、リビジョンウォーカーの具"
"現化をいくつか網羅しています。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:21
msgid "`revision.h`"
msgstr "`revision.h`"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:24
msgid ""
"https://eagain.net/articles/git-for-computer-scientists/[Git for Computer "
"Scientists] gives a good overview of the types of objects in Git and what "
"your object walk is really describing."
msgstr ""
"https://eagain.net/articles/git-for-computer-scientists/[Git for Computer "
"Scientists] Git内のオブジェクトの種類と、オブジェクト散歩が実際に何を記述して"
"いるのかについての概要を説明します。"

#. type: Title ===
#: ../Documentation-sedout/MyFirstObjectWalk.txt:25
#: ../Documentation-sedout/MyFirstObjectWalk.txt:169
#, no-wrap
msgid "Setting Up"
msgstr "Setting Up"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:28
msgid "Create a new branch from `master`."
msgstr "`master`から新しいブランチを作成します。"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:31
#, no-wrap
msgid "git checkout -b revwalk origin/master\n"
msgstr "git checkout -b revwalk origin/master\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:35
msgid ""
"We'll put our fiddling into a new command. For fun, let's name it `git "
"walken`.  Open up a new file `builtin/walken.c` and set up the command "
"handler:"
msgstr ""
"我々のささやかなモノを新コマンドにします。そう、名前は `git walken` にすると"
"しましょう。新しいファイル `builtin/walken.c` を開き、コマンドハンドラーを設"
"定します:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:42
#, no-wrap
msgid ""
"/*\n"
" * \"git walken\"\n"
" *\n"
" * Part of the \"My First Object Walk\" tutorial.\n"
" */\n"
msgstr ""
"/*\n"
" * \"git walken\"\n"
" *\n"
" * Part of the \"My First Object Walk\" tutorial.\n"
" */\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:44
#, no-wrap
msgid "#include \"builtin.h\"\n"
msgstr "#include \"builtin.h\"\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:50
#, no-wrap
msgid ""
"int cmd_walken(int argc, const char **argv, const char *prefix)\n"
"{\n"
"\ttrace_printf(_(\"cmd_walken incoming...\\n\"));\n"
"\treturn 0;\n"
"}\n"
msgstr ""
"int cmd_walken(int argc, const char **argv, const char *prefix)\n"
"{\n"
"\ttrace_printf(_(\"cmd_walken incoming...\\n\"));\n"
"\treturn 0;\n"
"}\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:58
msgid ""
"`trace_printf()` differs from `printf()` in that it can be turned on or off "
"at runtime. For the purposes of this tutorial, we will write `walken` as "
"though it is intended for use as a \"plumbing\" command: that is, a command "
"which is used primarily in scripts, rather than interactively by humans (a "
"\"porcelain\" command). So we will send our debug output to `trace_printf()` "
"instead. When running, enable trace output by setting the environment "
"variable `GIT_TRACE`."
msgstr ""
"`trace_printf()` は、実行時にオンまたはオフにできるという点で `printf()` とは"
"異なります。このチュートリアルでは、「配管」コマンドとして使用することを目的"
"としているかのように「walken」を記述します。つまり人間が対話的に使用する(「磁"
"器」)コマンドではなく、主にスクリプトで使用されるコマンドとして使用します。そ"
"のため、代わりにデバッグ出力を `trace_printf()` に送信します。実行時に、環境"
"変数 `GIT_TRACE` を設定して、トレース出力を有効にします。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:62
#, fuzzy
#| msgid ""
#| "Add usage text and `-h` handling, like all subcommands should "
#| "consistently do (our test suite will notice and complain if you fail to "
#| "do so)."
msgid ""
"Add usage text and `-h` handling, like all subcommands should consistently "
"do (our test suite will notice and complain if you fail to do so).  We'll "
"need to include the `parse-options.h` header."
msgstr ""
"すべてのサブコマンドで一貫して行う必要があるように、使用法テキストと `-h` 処"
"理を追加します(そうしないと、テストスイートが気づいて文句を言います)。"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:65
#, fuzzy, no-wrap
#| msgid "#include \"builtin.h\"\n"
msgid "#include \"parse-options.h\"\n"
msgstr "#include \"builtin.h\"\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:67
#: ../Documentation-sedout/MyFirstObjectWalk.txt:210
#: ../Documentation-sedout/MyFirstObjectWalk.txt:249
#: ../Documentation-sedout/MyFirstObjectWalk.txt:651
#, fuzzy, no-wrap
#| msgid "\t...\n"
msgid "...\n"
msgstr "\t...\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:77
#, fuzzy, no-wrap
#| msgid ""
#| "int cmd_walken(int argc, const char **argv, const char *prefix)\n"
#| "{\n"
#| "\tconst char * const walken_usage[] = {\n"
#| "\t\tN_(\"git walken\"),\n"
#| "\t\tNULL,\n"
#| "\t}\n"
#| "\tstruct option options[] = {\n"
#| "\t\tOPT_END()\n"
#| "\t};\n"
msgid ""
"int cmd_walken(int argc, const char **argv, const char *prefix)\n"
"{\n"
"\tconst char * const walken_usage[] = {\n"
"\t\tN_(\"git walken\"),\n"
"\t\tNULL,\n"
"\t};\n"
"\tstruct option options[] = {\n"
"\t\tOPT_END()\n"
"\t};\n"
msgstr ""
"int cmd_walken(int argc, const char **argv, const char *prefix)\n"
"{\n"
"\tconst char * const walken_usage[] = {\n"
"\t\tN_(\"git walken\"),\n"
"\t\tNULL,\n"
"\t}\n"
"\tstruct option options[] = {\n"
"\t\tOPT_END()\n"
"\t};\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:79
#, no-wrap
msgid "\targc = parse_options(argc, argv, prefix, options, walken_usage, 0);\n"
msgstr "\targc = parse_options(argc, argv, prefix, options, walken_usage, 0);\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:82
#: ../Documentation-sedout/MyFirstObjectWalk.txt:232
#: ../Documentation-sedout/MyFirstObjectWalk.txt:261
#: ../Documentation-sedout/MyFirstObjectWalk.txt:311
#: ../Documentation-sedout/MyFirstObjectWalk.txt:415
#: ../Documentation-sedout/MyFirstObjectWalk.txt:453
#: ../Documentation-sedout/MyFirstObjectWalk.txt:476
#: ../Documentation-sedout/MyFirstObjectWalk.txt:506
#: ../Documentation-sedout/MyFirstObjectWalk.txt:820
#, no-wrap
msgid ""
"\t...\n"
"}\n"
msgstr ""
"\t...\n"
"}\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:85
msgid "Also add the relevant line in `builtin.h` near `cmd_whatchanged()`:"
msgstr ""
"また、 `builtin.h` の `cmd_whatchanged()` の近くに関連する行を追加します:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:88
#, no-wrap
msgid "int cmd_walken(int argc, const char **argv, const char *prefix);\n"
msgstr "int cmd_walken(int argc, const char **argv, const char *prefix);\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:92
msgid ""
"Include the command in `git.c` in `commands[]` near the entry for "
"`whatchanged`, maintaining alphabetical ordering:"
msgstr ""
"`git.c` の `commands[]` にルファベット順を維持しながら、 `whatchanged` のエン"
"トリの近くにコマンドを含めます:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:95
#, no-wrap
msgid "{ \"walken\", cmd_walken, RUN_SETUP },\n"
msgstr "{ \"walken\", cmd_walken, RUN_SETUP },\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:98
msgid "Add it to the `Makefile` near the line for `builtin/worktree.o`:"
msgstr "`Makefile` の `builtin/worktree.o` の近くに行を追加します:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:101
#, no-wrap
msgid "BUILTIN_OBJS += builtin/walken.o\n"
msgstr "BUILTIN_OBJS += builtin/walken.o\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:105
msgid ""
"Build and test out your command, without forgetting to ensure the "
"`DEVELOPER` flag is set, and with `GIT_TRACE` enabled so the debug output "
"can be seen:"
msgstr ""
"`DEVELOPER` フラグが設定されていることを確認することを忘れないようにして、コ"
"マンドをビルドしてテストし、 `GIT_TRACE` を有効にして、デバッグ出力を確認しま"
"す。"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:110
#, no-wrap
msgid ""
"$ echo DEVELOPER=1 >>config.mak\n"
"$ make\n"
"$ GIT_TRACE=1 ./bin-wrappers/git walken\n"
msgstr ""
"$ echo DEVELOPER=1 >>config.mak\n"
"$ make\n"
"$ GIT_TRACE=1 ./bin-wrappers/git walken\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:114
msgid ""
"For a more exhaustive overview of the new command process, take a look at "
"`Documentation/MyFirstContribution.txt`."
msgstr ""
"新しいコマンドプロセスのより完全な概要については、 `Documentation/"
"MyFirstContribution.txt` をご覧ください。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:117
msgid ""
"A reference implementation can be found at https://github.com/nasamuffin/git/"
"tree/revwalk."
msgstr ""
"リファレンス実装は https://github.com/nasamuffin/git/tree/revwalk にありま"
"す。"

#. type: Title ===
#: ../Documentation-sedout/MyFirstObjectWalk.txt:118
#, no-wrap
msgid "`struct rev_cmdline_info`"
msgstr "`struct rev_cmdline_info`"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:121
msgid ""
"The definition of `struct rev_cmdline_info` can be found in `revision.h`."
msgstr "`struct rev_cmdline_info` の定義は、 `revision.h` にあります。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:124
msgid ""
"This struct is contained within the `rev_info` struct and is used to reflect "
"parameters provided by the user over the CLI."
msgstr ""
"この構造体は `rev_info` 構造体に含まれており、CLIを介してユーザーが提供したパ"
"ラメーターを反映するために使用されます。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:126
msgid "`nr` represents the number of `rev_cmdline_entry` present in the array."
msgstr "`nr` は、配列に存在する `rev_cmdline_entry` の数を表します。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:129
msgid ""
"`alloc` is used by the `ALLOC_GROW` macro. Check `cache.h` - this variable "
"is used to track the allocated size of the list."
msgstr ""
"`alloc` は `ALLOC_GROW` マクロによって使用されます。 `cache.h` を確認してくだ"
"さい。この変数は、リストの割り当てられたサイズを追跡するために使用されます。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:131
msgid "Per entry, we find:"
msgstr "エントリごとに、以下ことがわかります:"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:134
msgid ""
"`item` is the object provided upon which to base the object walk. Items in "
"Git can be blobs, trees, commits, or tags. (See `Documentation/gittutorial-2."
"txt`.)"
msgstr ""
"`item` は、オブジェクト散歩の基礎となるオブジェクトです。 Gitのアイテムは、ブ"
"ロブまたはツリーまたはコミットまたはタグです。(`Documentation/gittutorial-2."
"txt` を参照してください。)"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:139
msgid ""
"`name` is the object ID (OID) of the object - a hex string you may be "
"familiar with from using Git to organize your source in the past. Check the "
"tutorial mentioned above towards the top for a discussion of where the OID "
"can come from."
msgstr ""
"`name` は、オブジェクトのオブジェクトID(OID)です。これは、Gitを使用してあなた"
"のソースファイルを整理した時におなじみの16進文字列です。OIDの出所については、"
"上記のチュートリアルを上に向かって確認してください。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:144
msgid ""
"`whence` indicates some information about what to do with the parents of the "
"specified object. We'll explore this flag more later on; take a look at "
"`Documentation/revisions.txt` to get an idea of what could set the `whence` "
"value."
msgstr ""
"`whence` は、指定されたオブジェクトの親をどうするかについての情報を示します。"
"このフラグについては、後ほど詳しく説明します。 `Documentation/revisions.txt` "
"を見て、 何が `whence` 値を設定できるかを理解してください。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:149
msgid ""
"`flags` are used to hint the beginning of the revision walk and are the "
"first block under the `#include`s in `revision.h`. The most likely ones to "
"be set in the `rev_cmdline_info` are `UNINTERESTING` and `BOTTOM`, but these "
"same flags can be used during the walk, as well."
msgstr ""
"`flags` は、リビジョン散歩の開始を示唆するために使用され、 `revision.h` の "
"`#include` 群の下の最初のブロックです。 `rev_cmdline_info` に設定される可能性"
"が最も高いのは `UNINTERESTING` と `BOTTOM` ですが、これらと同じフラグを散歩中"
"に使用することもできます。"

#. type: Title ===
#: ../Documentation-sedout/MyFirstObjectWalk.txt:150
#, no-wrap
msgid "`struct rev_info`"
msgstr "`struct rev_info`"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:156
msgid ""
"This one is quite a bit longer, and many fields are only used during the "
"walk by `revision.c` - not configuration options. Most of the configurable "
"flags in `struct rev_info` have a mirror in `Documentation/rev-list-options."
"txt`. It's a good idea to take some time and read through that document."
msgstr ""
"これはちょっと長くて、多くのフィールドは、構成オプションではなく、 `revision."
"c` による散歩中にのみ使用されます。 `struct rev_info` の構成可能なフラグのほ"
"とんどは、 `Documentation/rev-list-options.txt` にミラーを持っています。じっ"
"くり読むことをお勧めします。"

#. type: Title ==
#: ../Documentation-sedout/MyFirstObjectWalk.txt:157
#, no-wrap
msgid "Basic Commit Walk"
msgstr "Basic Commit Walk"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:162
msgid ""
"First, let's see if we can replicate the output of `git log --oneline`. "
"We'll refer back to the implementation frequently to discover norms when "
"performing an object walk of our own."
msgstr ""
"まず、 `git log --oneline` の出力を複製できるかどうかを見てみましょう。あなた"
"独自のオブジェクト散歩を実行する際の基準を見つけるために、我々はその実装を頻"
"繁に拝みます。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:165
msgid ""
"To do so, we'll first find all the commits, in order, which preceded the "
"current commit. We'll extract the name and subject of the commit from each."
msgstr ""
"そのためには、まず、現在のコミットに先行するすべてのコミットを順番に検索しま"
"す。そのそれぞれからコミットの名前と件名を抽出します。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:168
msgid ""
"Ideally, we will also be able to find out which ones are currently at the "
"tip of various branches."
msgstr ""
"理想的には、私達は現在さまざまなブランチの先端にあるものを見つけることもでき"
"ます。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:172
msgid "Preparing for your object walk has some distinct stages."
msgstr "オブジェクト散歩の準備には、いくつかの明確な段階があります。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:174
msgid "Perform default setup for this mode, and others which may be invoked."
msgstr ""
"このモード、および呼び出される可能性のある他のモードのデフォルト設定を実行し"
"ます。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:175
msgid "Check configuration files for relevant settings."
msgstr "関連する設定については、構成ファイルを確認してください。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:176
msgid "Set up the `rev_info` struct."
msgstr "`rev_info` 構造体を設定します。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:177
msgid "Tweak the initialized `rev_info` to suit the current walk."
msgstr "初期化された `rev_info` を現在の散歩に合うように微調整します。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:178
msgid "Prepare the `rev_info` for the walk."
msgstr "散歩のために `rev_info` を準備します。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:179
msgid "Iterate over the objects, processing each one."
msgstr "オブジェクトを繰り返し(iterate)処理し、各オブジェクトを処理します。"

#. type: Title ====
#: ../Documentation-sedout/MyFirstObjectWalk.txt:180
#, no-wrap
msgid "Default Setups"
msgstr "Default Setups"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:189
msgid ""
"Before examining configuration files which may modify command behavior, set "
"up default state for switches or options your command may have. If your "
"command utilizes other Git components, ask them to set up their default "
"states as well.  For instance, `git log` takes advantage of `grep` and "
"`diff` functionality, so its `init_log_defaults()` sets its own state "
"(`decoration_style`) and asks `grep` and `diff` to initialize themselves by "
"calling each of their initialization functions."
msgstr ""
"コマンドの動作を変更する可能性のある構成ファイルを調べる前に、コマンドに含ま"
"れる可能性のあるスイッチまたはオプションのデフォルト状態を設定してください。"
"コマンドが他のGitコンポーネントを利用している場合は、デフォルトの状態も設定す"
"るように依頼してください。たとえば、 `git log` は `grep` と `diff` の機能を利"
"用するため、その `init_log_defaults()` は独自の状態(`decoration_style`)を設定"
"し、 `grep` と `diff` に、それらの初期化関数をそれぞれを呼び出して初期化する"
"ように要求します。"

#. type: Title ====
#: ../Documentation-sedout/MyFirstObjectWalk.txt:190
#, no-wrap
msgid "Configuring From `.gitconfig`"
msgstr "Configuring From `.gitconfig`"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:198
msgid ""
"Next, we should have a look at any relevant configuration settings (i.e., "
"settings readable and settable from `git config`). This is done by providing "
"a callback to `git_config()`; within that callback, you can also invoke "
"methods from other components you may need that need to intercept these "
"options. Your callback will be invoked once per each configuration value "
"which Git knows about (global, local, worktree, etc.)."
msgstr ""
"次に、関連する構成設定(つまり  `git config` から読み取り可能で設定可能な設定)"
"を確認する必要があります。 これは `git_config()` へのコールバックを提供するこ"
"とによって行われます。そのコールバック内で、これらのオプションをインターセプ"
"トする必要がある可能性のある他のコンポーネントからメソッドを呼び出すこともで"
"きます。コールバックは、(グローバル、ローカル、ワークツリーなど、)Gitが認識し"
"ている構成値ごとに1回呼び出されます。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:202
msgid ""
"Similarly to the default values, we don't have anything to do here yet "
"ourselves; however, we should call `git_default_config()` if we aren't "
"calling any other existing config callbacks."
msgstr ""
"デフォルト値と同様に、私達はここではまだ何もする必要はありません。 ただし、他"
"の既存の構成コールバックを呼び出さない場合は、 `git_default_config()` を呼び"
"出す必要があります。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:205
#, fuzzy
#| msgid "Add a new function to `builtin/walken.c`:"
msgid ""
"Add a new function to `builtin/walken.c`.  We'll also need to include the "
"`config.h` header:"
msgstr "新しい関数を `builtin/walken.c` に追加します:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:208
#, fuzzy, no-wrap
#| msgid "#include \"builtin.h\"\n"
msgid "#include \"config.h\"\n"
msgstr "#include \"builtin.h\"\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:219
#, no-wrap
msgid ""
"static int git_walken_config(const char *var, const char *value, void *cb)\n"
"{\n"
"\t/*\n"
"\t * For now, we don't have any custom configuration, so fall back to\n"
"\t * the default config.\n"
"\t */\n"
"\treturn git_default_config(var, value, cb);\n"
"}\n"
msgstr ""
"static int git_walken_config(const char *var, const char *value, void *cb)\n"
"{\n"
"\t/*\n"
"\t * For now, we don't have any custom configuration, so fall back to\n"
"\t * the default config.\n"
"\t */\n"
"\treturn git_default_config(var, value, cb);\n"
"}\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:222
msgid "Make sure to invoke `git_config()` with it in your `cmd_walken()`:"
msgstr "必ずあなたの `cmd_walken()` で `git_config()` を呼び出してください:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:227
#: ../Documentation-sedout/MyFirstObjectWalk.txt:306
#, no-wrap
msgid ""
"int cmd_walken(int argc, const char **argv, const char *prefix)\n"
"{\n"
"\t...\n"
msgstr ""
"int cmd_walken(int argc, const char **argv, const char *prefix)\n"
"{\n"
"\t...\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:229
#, no-wrap
msgid "\tgit_config(git_walken_config, NULL);\n"
msgstr "\tgit_config(git_walken_config, NULL);\n"

#. type: Title ====
#: ../Documentation-sedout/MyFirstObjectWalk.txt:234
#, no-wrap
msgid "Setting Up `rev_info`"
msgstr "Setting Up `rev_info`"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:241
msgid ""
"Now that we've gathered external configuration and options, it's time to "
"initialize the `rev_info` object which we will use to perform the walk. This "
"is typically done by calling `repo_init_revisions()` with the repository you "
"intend to target, as well as the `prefix` argument of `cmd_walken` and your "
"`rev_info` struct."
msgstr ""
"私達は外部構成とオプションを収集したので、散歩の実行に使用する `rev_info` オ"
"ブジェクトを初期化します。これは通常、\n"
"ターゲットとするリポジトリと、 `cmd_walken` の `prefix` 引数と、あなたの "
"`rev_info` 構造体を使用して `repo_init_revisions()` を呼び出す事によって行い"
"ます。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:244
#, fuzzy
#| msgid "Add the `struct rev_info` and the `repo_init_revisions()` call:"
msgid ""
"Add the `struct rev_info` and the `repo_init_revisions()` call.  We'll also "
"need to include the `revision.h` header:"
msgstr "`struct rev_info` と `repo_init_revisions()` 関数呼び出しを追加します:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:247
#, fuzzy, no-wrap
#| msgid "#include \"builtin.h\"\n"
msgid "#include \"revision.h\"\n"
msgstr "#include \"builtin.h\"\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:255
#, no-wrap
msgid ""
"int cmd_walken(int argc, const char **argv, const char *prefix)\n"
"{\n"
"\t/* This can go wherever you like in your declarations.*/\n"
"\tstruct rev_info rev;\n"
"\t...\n"
msgstr ""
"int cmd_walken(int argc, const char **argv, const char *prefix)\n"
"{\n"
"\t/* This can go wherever you like in your declarations.*/\n"
"\tstruct rev_info rev;\n"
"\t...\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:258
#, no-wrap
msgid ""
"\t/* This should go after the git_config() call. */\n"
"\trepo_init_revisions(the_repository, &rev, prefix);\n"
msgstr ""
"\t/* This should go after the git_config() call. */\n"
"\trepo_init_revisions(the_repository, &rev, prefix);\n"

#. type: Title ====
#: ../Documentation-sedout/MyFirstObjectWalk.txt:263
#, no-wrap
msgid "Tweaking `rev_info` For the Walk"
msgstr "Tweaking `rev_info` For the Walk"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:268
msgid ""
"We're getting close, but we're still not quite ready to go. Now that `rev` "
"is initialized, we can modify it to fit our needs. This is usually done "
"within a helper for clarity, so let's add one:"
msgstr ""
"私達は目的に近づいていますが、まだ準備が整っていません。 `rev` が初期化された"
"ので、ニーズに合わせて変更できます。これは通常、わかりやすくするためにヘル"
"パー内で行われるため、以下のように追加します:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:277
#, no-wrap
msgid ""
"static void final_rev_info_setup(struct rev_info *rev)\n"
"{\n"
"\t/*\n"
"\t * We want to mimic the appearance of `git log --oneline`, so let's\n"
"\t * force oneline format.\n"
"\t */\n"
"\tget_commit_format(\"oneline\", rev);\n"
msgstr ""
"static void final_rev_info_setup(struct rev_info *rev)\n"
"{\n"
"\t/*\n"
"\t * We want to mimic the appearance of `git log --oneline`, so let's\n"
"\t * force oneline format.\n"
"\t */\n"
"\tget_commit_format(\"oneline\", rev);\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:281
#, no-wrap
msgid ""
"\t/* Start our object walk at HEAD. */\n"
"\tadd_head_to_pending(rev);\n"
"}\n"
msgstr ""
"\t/* Start our object walk at HEAD. */\n"
"\tadd_head_to_pending(rev);\n"
"}\n"

#. type: delimited block =
#: ../Documentation-sedout/MyFirstObjectWalk.txt:287
msgid ""
"Instead of using the shorthand `add_head_to_pending()`, you could do "
"something like this:"
msgstr ""
"短縮形の `add_head_to_pending()` を使用する代わりに、以下のようにすることがで"
"きます:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:289
#, no-wrap
msgid "\tstruct setup_revision_opt opt;\n"
msgstr "\tstruct setup_revision_opt opt;\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:294
#, no-wrap
msgid ""
"\tmemset(&opt, 0, sizeof(opt));\n"
"\topt.def = \"HEAD\";\n"
"\topt.revarg_opt = REVARG_COMMITTISH;\n"
"\tsetup_revisions(argc, argv, rev, &opt);\n"
msgstr ""
"\tmemset(&opt, 0, sizeof(opt));\n"
"\topt.def = \"HEAD\";\n"
"\topt.revarg_opt = REVARG_COMMITTISH;\n"
"\tsetup_revisions(argc, argv, rev, &opt);\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:297
msgid ""
"Using a `setup_revision_opt` gives you finer control over your walk's "
"starting point."
msgstr ""
"`setup_revision_opt` を使用すると、散歩の開始点をより細かく制御できます。"

#. type: delimited block =
#: ../Documentation-sedout/MyFirstObjectWalk.txt:301
msgid ""
"Then let's invoke `final_rev_info_setup()` after the call to "
"`repo_init_revisions()`:"
msgstr ""
"Then let's invoke `final_rev_info_setup()` after the call to "
"`repo_init_revisions()`:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:308
#, no-wrap
msgid "\tfinal_rev_info_setup(&rev);\n"
msgstr "\tfinal_rev_info_setup(&rev);\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:315
msgid ""
"Later, we may wish to add more arguments to `final_rev_info_setup()`. But "
"for now, this is all we need."
msgstr ""
"後で `final_rev_info_setup()` にさらに引数を追加したい場合があるかもしれませ"
"ん。しかし今のところ、これが私たちに必要なすべてです。"

#. type: Title ====
#: ../Documentation-sedout/MyFirstObjectWalk.txt:316
#, no-wrap
msgid "Preparing `rev_info` For the Walk"
msgstr "Preparing `rev_info` For the Walk"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:323
msgid ""
"Now that `rev` is all initialized and configured, we've got one more setup "
"step before we get rolling. We can do this in a helper, which will both "
"prepare the `rev_info` for the walk, and perform the walk itself. Let's "
"start the helper with the call to `prepare_revision_walk()`, which can "
"return an error without dying on its own:"
msgstr ""
"`rev` がすべて初期化および構成されました。しかし始める前にもう1つのセットアッ"
"プ手順があります。これはヘルパーで行うことができます。ヘルパーは、散歩用の  "
"`rev_info` を準備し、散歩自体を実行します。 `prepare_revision_walk()` の呼び"
"出しでヘルパーを開始しましょう。これにより、自動的に停止せずにエラーを返すこ"
"とができます:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:330
#, no-wrap
msgid ""
"static void walken_commit_walk(struct rev_info *rev)\n"
"{\n"
"\tif (prepare_revision_walk(rev))\n"
"\t\tdie(_(\"revision walk setup failed\"));\n"
"}\n"
msgstr ""
"static void walken_commit_walk(struct rev_info *rev)\n"
"{\n"
"\tif (prepare_revision_walk(rev))\n"
"\t\tdie(_(\"revision walk setup failed\"));\n"
"}\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:334
msgid ""
"`die()` prints to `stderr` and exits the program. Since it will print to "
"`stderr` it's likely to be seen by a human, so we will localize it."
msgstr ""
"`die()` は標準エラー出力に出力し、プログラムを終了します。標準エラーに出力さ"
"れると、人間に見られる可能性が高いので、国際化(localize)します。"

#. type: Title ====
#: ../Documentation-sedout/MyFirstObjectWalk.txt:335
#, no-wrap
msgid "Performing the Walk!"
msgstr "Performing the Walk!"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:342
msgid ""
"Finally! We are ready to begin the walk itself. Now we can see that "
"`rev_info` can also be used as an iterator; we move to the next item in the "
"walk by using `get_revision()` repeatedly. Add the listed variable "
"declarations at the top and the walk loop below the "
"`prepare_revision_walk()` call within your `walken_commit_walk()`:"
msgstr ""
"ついに散歩を始める準備ができました！ これで、 `rev_info` がイテレータとしても"
"使用できることがわかります。 `get_revision()` を繰り返し使用して、散歩の次の"
"アイテムに移動します。リストされた変数宣言を上部に追加し、散歩ループを "
"`walken_commit_walk()` 内の `prepare_revision_walk()` 呼び出しの下に追加しま"
"す:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:348
#, no-wrap
msgid ""
"static void walken_commit_walk(struct rev_info *rev)\n"
"{\n"
"\tstruct commit *commit;\n"
"\tstruct strbuf prettybuf = STRBUF_INIT;\n"
msgstr ""
"static void walken_commit_walk(struct rev_info *rev)\n"
"{\n"
"\tstruct commit *commit;\n"
"\tstruct strbuf prettybuf = STRBUF_INIT;\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:350
#: ../Documentation-sedout/MyFirstObjectWalk.txt:767
#: ../Documentation-sedout/MyFirstObjectWalk.txt:774
#: ../Documentation-sedout/MyFirstObjectWalk.txt:779
#: ../Documentation-sedout/MyFirstObjectWalk.txt:845
#: ../Documentation-sedout/MyFirstObjectWalk.txt:853
#, no-wrap
msgid "\t...\n"
msgstr "\t...\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:358
#, no-wrap
msgid ""
"\twhile ((commit = get_revision(rev))) {\n"
"\t\tstrbuf_reset(&prettybuf);\n"
"\t\tpp_commit_easy(CMIT_FMT_ONELINE, commit, &prettybuf);\n"
"\t\tputs(prettybuf.buf);\n"
"\t}\n"
"\tstrbuf_release(&prettybuf);\n"
"}\n"
msgstr ""
"\twhile ((commit = get_revision(rev))) {\n"
"\t\tstrbuf_reset(&prettybuf);\n"
"\t\tpp_commit_easy(CMIT_FMT_ONELINE, commit, &prettybuf);\n"
"\t\tputs(prettybuf.buf);\n"
"\t}\n"
"\tstrbuf_release(&prettybuf);\n"
"}\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:362
msgid ""
"`puts()` prints a `char*` to `stdout`. Since this is the part of the command "
"we expect to be machine-parsed, we're sending it directly to stdout."
msgstr ""
"`puts()` は `char*` を `stdout` に出力します。これは、マシンでパースされるこ"
"とが期待されるコマンドの一部であるため、私達はそれを stdout に直接送信しま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:364
msgid "Give it a shot."
msgstr "では、試してみましょう。"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:368
#, no-wrap
msgid ""
"$ make\n"
"$ ./bin-wrappers/git walken\n"
msgstr ""
"$ make\n"
"$ ./bin-wrappers/git walken\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:376
msgid ""
"You should see all of the subject lines of all the commits in your tree's "
"history, in order, ending with the initial commit, \"Initial revision of "
"\"git\", the information manager from hell\". Congratulations! You've "
"written your first revision walk. You can play with printing some additional "
"fields from each commit if you're curious; have a look at the functions "
"available in `commit.h`."
msgstr ""
"ツリーの履歴にあるすべてのコミットのすべての件名が順番に表示され、最初のコ"
"ミット「\"Initial revision of \"git\", the information manager from hell」で"
"終わります。おめでとう！ あなたは最初のリビジョン散歩を書きました。興味があれ"
"ば、各コミットからいくつかの追加フィールドを出力して遊ぶことができます。 "
"`commit.h` で利用可能な関数をご覧ください。"

#. type: Title ===
#: ../Documentation-sedout/MyFirstObjectWalk.txt:377
#: ../Documentation-sedout/MyFirstObjectWalk.txt:702
#, no-wrap
msgid "Adding a Filter"
msgstr "Adding a Filter"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:382
msgid ""
"Next, let's try to filter the commits we see based on their author. This is "
"equivalent to running `git log --author=<pattern>`. We can add a filter by "
"modifying `rev_info.grep_filter`, which is a `struct grep_opt`."
msgstr ""
"次に、作者に基づいて、表示されるコミットをフィルタリングしてみましょう。 これ"
"は、 `git log --author=<pattern>` を実行するのと同じです。 `struct grep_opt` "
"である `rev_info.grep_filter` を変更することで、フィルターを追加できます。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:384
msgid "First some setup. Add `grep_config()` to `git_walken_config()`:"
msgstr ""
"最初にいくつかのセットアップを行います。 `grep_config()` を "
"`git_walken_config()` に追加:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:391
#, no-wrap
msgid ""
"static int git_walken_config(const char *var, const char *value, void *cb)\n"
"{\n"
"\tgrep_config(var, value, cb);\n"
"\treturn git_default_config(var, value, cb);\n"
"}\n"
msgstr ""
"static int git_walken_config(const char *var, const char *value, void *cb)\n"
"{\n"
"\tgrep_config(var, value, cb);\n"
"\treturn git_default_config(var, value, cb);\n"
"}\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:400
msgid ""
"Next, we can modify the `grep_filter`. This is done with convenience "
"functions found in `grep.h`. For fun, we're filtering to only commits from "
"folks using a `gmail.com` email address - a not-very-precise guess at who "
"may be working on Git as a hobby. Since we're checking the author, which is "
"a specific line in the header, we'll use the `append_header_grep_pattern()` "
"helper. We can use the `enum grep_header_field` to indicate which part of "
"the commit header we want to search."
msgstr ""
"次に、 `grep_filter` を変更できます。 これは、 `grep.h` にある便利な関数を使"
"用して行います。戯れに、私達は `gmail.com` メールアドレスを使用している人々か"
"らのコミットのみにフィルタリングしています(これは、誰が趣味としてGitに取り組"
"んでいるかについての情報とするには、あまり正確ではありませんが)。ヘッダーの特"
"定の行である作者をチェックしているので、 `append_header_grep_pattern()` ヘル"
"パーを使用します。 `enum grep_header_field` を使用して、コミットヘッダーのど"
"の部分を検索するかを指定できます。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:402
msgid "In `final_rev_info_setup()`, add your filter line:"
msgstr "`final_rev_info_setup()` に、あなたのフィルター行を追加:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:408
#: ../Documentation-sedout/MyFirstObjectWalk.txt:447
#: ../Documentation-sedout/MyFirstObjectWalk.txt:470
#, no-wrap
msgid ""
"static void final_rev_info_setup(int argc, const char **argv,\n"
"\t\tconst char *prefix, struct rev_info *rev)\n"
"{\n"
"\t...\n"
msgstr ""
"static void final_rev_info_setup(int argc, const char **argv,\n"
"\t\tconst char *prefix, struct rev_info *rev)\n"
"{\n"
"\t...\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:412
#, no-wrap
msgid ""
"\tappend_header_grep_pattern(&rev->grep_filter, GREP_HEADER_AUTHOR,\n"
"\t\t\"gmail\");\n"
"\tcompile_grep_patterns(&rev->grep_filter);\n"
msgstr ""
"\tappend_header_grep_pattern(&rev->grep_filter, GREP_HEADER_AUTHOR,\n"
"\t\t\"gmail\");\n"
"\tcompile_grep_patterns(&rev->grep_filter);\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:419
msgid ""
"`append_header_grep_pattern()` adds your new \"gmail\" pattern to "
"`rev_info`, but it won't work unless we compile it with "
"`compile_grep_patterns()`."
msgstr ""
"`append_header_grep_pattern()` は、あなたの新しい \"gmail\" パターンを "
"`rev_info` に追加しますが、それは `compile_grep_patterns()` でコンパイルしな"
"い限り機能しません。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:423
msgid ""
"If you are using `setup_revisions()` (for example, if you are passing a "
"`setup_revision_opt` instead of using `add_head_to_pending()`), you don't "
"need to call `compile_grep_patterns()` because `setup_revisions()` calls it "
"for you."
msgstr ""
"`setup_revisions()` を使用している場合(たとえば `add_head_to_pending()` を使"
"用する代わりに `setup_revision_opt` を渡す場合)、 `compile_grep_patterns()` "
"を呼び出す必要はありません。なぜなら `setup_revisions()` が "
"`compile_grep_patterns()` を呼び出すからです。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:427
msgid ""
"We could add the same filter via the `append_grep_pattern()` helper if we "
"wanted to, but `append_header_grep_pattern()` adds the `enum grep_context` "
"and `enum grep_pat_token` for us."
msgstr ""
"`append_header_grep_pattern()` は `enum grep_context` と `enum "
"grep_pat_token` を追加します。あなたは必要に応じて `append_grep_pattern()` ヘ"
"ルパーを介して全く同じフィルターを追加することもできます。"

#. type: Title ===
#: ../Documentation-sedout/MyFirstObjectWalk.txt:428
#: ../Documentation-sedout/MyFirstObjectWalk.txt:800
#, no-wrap
msgid "Changing the Order"
msgstr "Changing the Order"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:433
msgid ""
"There are a few ways that we can change the order of the commits during a "
"revision walk. Firstly, we can use the `enum rev_sort_order` to choose from "
"some typical orderings."
msgstr ""
"リビジョン散歩中にコミットの順序を変更する方法はいくつかあります。 まず、 "
"`enum rev_sort_order` を使用して、いくつかの一般的な順序から選択できます。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:438
msgid ""
"`topo_order` is the same as `git log --topo-order`: we avoid showing a "
"parent before all of its children have been shown, and we avoid mixing "
"commits which are in different lines of history. (`git help log`'s section "
"on `--topo-order` has a very nice diagram to illustrate this.)"
msgstr ""
"`topo_order` は `git log --topo-order` と同じです。すべての子が表示される前に"
"親を表示することを避け、異なる履歴行にあるコミットを混在させることを避けま"
"す。 (`--topo-order` に関する `git help log` のセクションには、これを説明する"
"ための非常に優れた図があります。）"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:441
msgid ""
"Let's see what happens when we run with `REV_SORT_BY_COMMIT_DATE` as opposed "
"to `REV_SORT_BY_AUTHOR_DATE`. Add the following:"
msgstr ""
"`REV_SORT_BY_AUTHOR_DATE` ではなく `REV_SORT_BY_COMMIT_DATE` で実行するとどう"
"なるか見てみましょう。以下を追加します:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:450
#, no-wrap
msgid ""
"\trev->topo_order = 1;\n"
"\trev->sort_order = REV_SORT_BY_COMMIT_DATE;\n"
msgstr ""
"\trev->topo_order = 1;\n"
"\trev->sort_order = REV_SORT_BY_COMMIT_DATE;\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:457
msgid ""
"Let's output this into a file so we can easily diff it with the walk sorted "
"by author date."
msgstr ""
"これをファイルに出力して、作者の日付でソートされた散歩と簡単にdiffできるよう"
"にします。"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:461
#, no-wrap
msgid ""
"$ make\n"
"$ ./bin-wrappers/git walken > commit-date.txt\n"
msgstr ""
"$ make\n"
"$ ./bin-wrappers/git walken > commit-date.txt\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:464
msgid "Then, let's sort by author date and run it again."
msgstr "次に、作成者の日付で並べ替えて、もう一度実行してみましょう。"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:473
#, no-wrap
msgid ""
"\trev->topo_order = 1;\n"
"\trev->sort_order = REV_SORT_BY_AUTHOR_DATE;\n"
msgstr ""
"\trev->topo_order = 1;\n"
"\trev->sort_order = REV_SORT_BY_AUTHOR_DATE;\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:481
#, no-wrap
msgid ""
"$ make\n"
"$ ./bin-wrappers/git walken > author-date.txt\n"
msgstr ""
"$ make\n"
"$ ./bin-wrappers/git walken > author-date.txt\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:485
msgid ""
"Finally, compare the two. This is a little less helpful without object names "
"or dates, but hopefully we get the idea."
msgstr ""
"最後に、2つを比較します。 これは、オブジェクト名や日付がないとあまり役に立ち"
"ませんが、うまくいけば、私たちはアイデアを得ることができます。"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:488
#, no-wrap
msgid "$ diff -u commit-date.txt author-date.txt\n"
msgstr "$ diff -u commit-date.txt author-date.txt\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:492
msgid ""
"This display indicates that commits can be reordered after they're written, "
"for example with `git rebase`."
msgstr ""
"この表示は、コミットが書き込まれた後、たとえば `git rebase` を使用してコミッ"
"トを並べ替えることができることを示しています。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:495
msgid ""
"Let's try one more reordering of commits. `rev_info` exposes a `reverse` "
"flag.  Set that flag somewhere inside of `final_rev_info_setup()`:"
msgstr ""
"コミットの並べ替えをもう一度試してみましょう。 `rev_info` は `reverse` フラグ"
"を公開します。そのフラグを `final_rev_info_setup()` 内のどこかに設定します:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:501
#, no-wrap
msgid ""
"static void final_rev_info_setup(int argc, const char **argv, const char *prefix,\n"
"\t\tstruct rev_info *rev)\n"
"{\n"
"\t...\n"
msgstr ""
"static void final_rev_info_setup(int argc, const char **argv, const char *prefix,\n"
"\t\tstruct rev_info *rev)\n"
"{\n"
"\t...\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:503
#, no-wrap
msgid "\trev->reverse = 1;\n"
msgstr "\trev->reverse = 1;\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:511
msgid ""
"Run your walk again and note the difference in order. (If you remove the "
"grep pattern, you should see the last commit this call gives you as your "
"current HEAD.)"
msgstr ""
"もう一度あなたの散歩を実行して、順番の違いを注視してください。(もしあなたが"
"grepパターンを削除すると、この呼び出しによって現在のHEADとして与えられる最後"
"のコミットが表示されます。)"

#. type: Title ==
#: ../Documentation-sedout/MyFirstObjectWalk.txt:512
#, no-wrap
msgid "Basic Object Walk"
msgstr "Basic Object Walk"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:517
msgid ""
"So far we've been walking only commits. But Git has more types of objects "
"than that! Let's see if we can walk _all_ objects, and find out some "
"information about each one."
msgstr ""
"これまでのところ、私達はコミットのみを歩いてきました。しかし、Gitにはもっと多"
"くの種類のオブジェクトがあります！ 全てのオブジェクトを散歩することができるか"
"どうかを確かめて、それぞれについていくつかの情報を見つけるとしましょう。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:526
#, fuzzy
#| msgid ""
#| "We can base our work on an example. `git pack-objects` prepares all kinds "
#| "of objects for packing into a bitmap or packfile. The work we are "
#| "interested in resides in `builtins/pack-objects.c:get_object_list()`; "
#| "examination of that function shows that the all-object walk is being "
#| "performed by `traverse_commit_list()` or "
#| "`traverse_commit_list_filtered()`. Those two functions reside in `list-"
#| "objects.c`; examining the source shows that, despite the name, these "
#| "functions traverse all kinds of objects. Let's have a look at the "
#| "arguments to `traverse_commit_list_filtered()`, which are a superset of "
#| "the arguments to the unfiltered version."
msgid ""
"We can base our work on an example. `git pack-objects` prepares all kinds of "
"objects for packing into a bitmap or packfile. The work we are interested in "
"resides in `builtins/pack-objects.c:get_object_list()`; examination of that "
"function shows that the all-object walk is being performed by "
"`traverse_commit_list()` or `traverse_commit_list_filtered()`. Those two "
"functions reside in `list-objects.c`; examining the source shows that, "
"despite the name, these functions traverse all kinds of objects. Let's have "
"a look at the arguments to `traverse_commit_list()`."
msgstr ""
"私達の例に基づいて作業を行うとすると、 `git pack-objects` は、ビットマップま"
"たはパックファイルにパックするためのあらゆる種類のオブジェクトを準備します。"
"私たちが興味を持っている作業は、 `builtins/pack-objects.c:get_object_list()` "
"にあります。その関数を調べると、すべてのオブジェクトの散歩が "
"`traverse_commit_list()` または `traverse_commit_list_filtered()` によって実"
"行されていることがわかります。これらの2つの関数は `list-objects.c` にありま"
"す。ソースを調べると、名前にもかかわらず、これらの関数はすべての種類のオブ"
"ジェクトをトラバースすることがわかります。それでは、フィルタリングされていな"
"いバージョンの引数のスーパーセットである `traverse_commit_list_filtered()` の"
"引数を見てみましょう。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:530
msgid ""
"`struct rev_info *revs`: This is the `rev_info` used for the walk. If its "
"`filter` member is not `NULL`, then `filter` contains information for how to "
"filter the object list."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:532
msgid ""
"`show_commit_fn show_commit`: A callback which will be used to handle each "
"individual commit object."
msgstr ""
"`show_commit_fn show_commit`: 個々のコミットオブジェクトを処理するために使用"
"されるコールバック。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:534
msgid ""
"`show_object_fn show_object`: A callback which will be used to handle each "
"non-commit object (so each blob, tree, or tag)."
msgstr ""
"`show_object_fn show_object`: 各非コミットオブジェクト(つまり、 各blobまたは"
"treeまたはtag)を処理するために使用されるコールバック。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:536
msgid ""
"`void *show_data`: A context buffer which is passed in turn to `show_commit` "
"and `show_object`."
msgstr ""
"`void *show_data`: `show_commit` と`show_object` に順番に渡されるコンテキスト"
"バッファ。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:538
#, fuzzy
#| msgid ""
#| "Modify the call to `traverse_commit_list_filtered()` to include your "
#| "`omitted` object:"
msgid ""
"In addition, `traverse_commit_list_filtered()` has an additional parameter:"
msgstr ""
"`traverse_commit_list_filtered()` の呼び出しを変更して、 あなたの `omitted` "
"オブジェクトを含めます:"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:541
msgid ""
"`struct oidset *omitted`: A linked-list of object IDs which the provided "
"filter caused to be omitted."
msgstr ""
"`struct oidset *omitted`: 提供されたフィルターによって省略されたオブジェクト"
"IDのリンクリスト。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:544
#, fuzzy
#| msgid ""
#| "It looks like this `traverse_commit_list_filtered()` uses callbacks we "
#| "provide instead of needing us to call it repeatedly ourselves. Cool! "
#| "Let's add the callbacks first."
msgid ""
"It looks like these methods use callbacks we provide instead of needing us "
"to call it repeatedly ourselves. Cool! Let's add the callbacks first."
msgstr ""
"この `traverse_commit_list_filtered()` は、自分で繰り返し呼び出す必要はなく、"
"我々が提供するコールバックを使用するようです。素敵！では最初にコールバックを"
"追加しましょう。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:548
msgid ""
"For the sake of this tutorial, we'll simply keep track of how many of each "
"kind of object we find. At file scope in `builtin/walken.c` add the "
"following tracking variables:"
msgstr ""
"このチュートリアルのために、検出した各種類のオブジェクトの数を追跡するだけで"
"すけどね。 `builtin/walken.c` のファイルスコープで、以下の追跡変数を追加しま"
"す:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:554
#, no-wrap
msgid ""
"static int commit_count;\n"
"static int tag_count;\n"
"static int blob_count;\n"
"static int tree_count;\n"
msgstr ""
"static int commit_count;\n"
"static int tag_count;\n"
"static int blob_count;\n"
"static int tree_count;\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:558
msgid ""
"Commits are handled by a different callback than other objects; let's do "
"that one first:"
msgstr ""
"コミットは、他のオブジェクトとは異なるコールバックによって処理されます。まず"
"それをやってみましょう:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:564
#, no-wrap
msgid ""
"static void walken_show_commit(struct commit *cmt, void *buf)\n"
"{\n"
"\tcommit_count++;\n"
"}\n"
msgstr ""
"static void walken_show_commit(struct commit *cmt, void *buf)\n"
"{\n"
"\tcommit_count++;\n"
"}\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:569
msgid ""
"The `cmt` argument is fairly self-explanatory. But it's worth mentioning "
"that the `buf` argument is actually the context buffer that we can provide "
"to the traversal calls - `show_data`, which we mentioned a moment ago."
msgstr ""
"`cmt` 引数は割と明です。 ただし、 `buf` 引数は、実際にはトラバーサル呼び出し"
"に提供できるコンテキストバッファーであることに注意してください。これは、先ほ"
"ど説明した `show_data` です。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:573
msgid ""
"Since we have the `struct commit` object, we can look at all the same parts "
"that we looked at in our earlier commit-only walk. For the sake of this "
"tutorial, though, we'll just increment the commit counter and move on."
msgstr ""
"`struct commit` オブジェクトがあるので、以前のcommit-only散歩で見たのと同じ部"
"分をすべて見ることができます。ただし、このチュートリアルのために、コミットカ"
"ウンターをインクリメントして次に進みます。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:576
msgid ""
"The callback for non-commits is a little different, as we'll need to check "
"which kind of object we're dealing with:"
msgstr ""
"非コミットのコールバックは、処理しているオブジェクトの種類を確認する必要があ"
"るため、少し異なります:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:597
#, no-wrap
msgid ""
"static void walken_show_object(struct object *obj, const char *str, void *buf)\n"
"{\n"
"\tswitch (obj->type) {\n"
"\tcase OBJ_TREE:\n"
"\t\ttree_count++;\n"
"\t\tbreak;\n"
"\tcase OBJ_BLOB:\n"
"\t\tblob_count++;\n"
"\t\tbreak;\n"
"\tcase OBJ_TAG:\n"
"\t\ttag_count++;\n"
"\t\tbreak;\n"
"\tcase OBJ_COMMIT:\n"
"\t\tBUG(\"unexpected commit object in walken_show_object\\n\");\n"
"\tdefault:\n"
"\t\tBUG(\"unexpected object type %s in walken_show_object\\n\",\n"
"\t\t\ttype_name(obj->type));\n"
"\t}\n"
"}\n"
msgstr ""
"static void walken_show_object(struct object *obj, const char *str, void *buf)\n"
"{\n"
"\tswitch (obj->type) {\n"
"\tcase OBJ_TREE:\n"
"\t\ttree_count++;\n"
"\t\tbreak;\n"
"\tcase OBJ_BLOB:\n"
"\t\tblob_count++;\n"
"\t\tbreak;\n"
"\tcase OBJ_TAG:\n"
"\t\ttag_count++;\n"
"\t\tbreak;\n"
"\tcase OBJ_COMMIT:\n"
"\t\tBUG(\"unexpected commit object in walken_show_object\\n\");\n"
"\tdefault:\n"
"\t\tBUG(\"unexpected object type %s in walken_show_object\\n\",\n"
"\t\t\ttype_name(obj->type));\n"
"\t}\n"
"}\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:604
msgid ""
"Again, `obj` is fairly self-explanatory, and we can guess that `buf` is the "
"same context pointer that `walken_show_commit()` receives: the `show_data` "
"argument to `traverse_commit_list()` and `traverse_commit_list_filtered()`. "
"Finally, `str` contains the name of the object, which ends up being "
"something like `foo.txt` (blob), `bar/baz` (tree), or `v1.2.3` (tag)."
msgstr ""
"繰り返しになりますが、 `obj` は割と自明であり、 `buf` は "
"`walken_show_commit()` が受け取るコンテキストポインタと同じであると推測できま"
"す。 `traverse_commit_list()` と `traverse_commit_list_filtered()` への "
"`show_data` 引数です。最後に、 `str` にはオブジェクトの名前が含まれ、最終的に"
"は `foo.txt` (blob) または `bar/baz` (tree) または `v1.2.3` (tag) のようにな"
"ります。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:613
msgid ""
"To help assure us that we aren't double-counting commits, we'll include some "
"complaining if a commit object is routed through our non-commit callback; "
"we'll also complain if we see an invalid object type. Since those two cases "
"should be unreachable, and would only change in the event of a semantic "
"change to the Git codebase, we complain by using `BUG()` - which is a signal "
"to a developer that the change they made caused unintended consequences, and "
"the rest of the codebase needs to be updated to understand that change. "
"`BUG()` is not intended to be seen by the public, so it is not localized."
msgstr ""
"コミットを二重にカウントしていないことを確認するために、コミットオブジェクト"
"が非コミットコールバックを介してルーティングされているかどうかについての一言"
"を含めます。無効なオブジェクトタイプが表示された場合も一言います。これらの2つ"
"のケースは到達不能であり、Gitコードベースにセマンティックが変更された場合にの"
"み変更されるため、 `BUG()` を使用して一言います。これは、開発者が行った変更が"
"意図しない結果を引き起こしたことを示すシグナルです。その変更を理解するには、"
"コードベースの残りの部分を更新する必要があります。 `BUG()` は一般に公開される"
"ことを意図していないため、ローカライズされていません。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:618
msgid ""
"Our main object walk implementation is substantially different from our "
"commit walk implementation, so let's make a new function to perform the "
"object walk. We can perform setup which is applicable to all objects here, "
"too, to keep separate from setup which is applicable to commit-only walks."
msgstr ""
"メインのオブジェクト散歩の実装は、コミット散歩の実装とは大幅に異なるため、オ"
"ブジェク散歩を実行するための新しい関数を作成しましょう。ここでもすべてのオブ"
"ジェクトに適用できるセットアップを実行して、コミットのみの散歩に適用できる"
"セットアップとは別にすることができます。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:625
msgid ""
"We'll start by enabling all types of objects in the `struct rev_info`.  "
"We'll also turn on `tree_blobs_in_commit_order`, which means that we will "
"walk a commit's tree and everything it points to immediately after we find "
"each commit, as opposed to waiting for the end and walking through all trees "
"after the commit history has been discovered. With the appropriate settings "
"configured, we are ready to call `prepare_revision_walk()`."
msgstr ""
"まず、 `structrev_info` ですべてのタイプのオブジェクトを有効にします。 ま"
"た、 `tree_blobs_in_commit_order` をオンにします。これは、コミット履歴が検出"
"された後に終了を待ってすべてのツリーをウォークスルーするのではなく、コミット"
"のツリーとそれが指すすべてのものを、各コミットを見つけた直後に散歩することを"
"意味します。適切な設定が構成されたら、 `prepare_revision_walk()` を呼び出す準"
"備ができています。"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:633
#, no-wrap
msgid ""
"static void walken_object_walk(struct rev_info *rev)\n"
"{\n"
"\trev->tree_objects = 1;\n"
"\trev->blob_objects = 1;\n"
"\trev->tag_objects = 1;\n"
"\trev->tree_blobs_in_commit_order = 1;\n"
msgstr ""
"static void walken_object_walk(struct rev_info *rev)\n"
"{\n"
"\trev->tree_objects = 1;\n"
"\trev->blob_objects = 1;\n"
"\trev->tag_objects = 1;\n"
"\trev->tree_blobs_in_commit_order = 1;\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:636
#, no-wrap
msgid ""
"\tif (prepare_revision_walk(rev))\n"
"\t\tdie(_(\"revision walk setup failed\"));\n"
msgstr ""
"\tif (prepare_revision_walk(rev))\n"
"\t\tdie(_(\"revision walk setup failed\"));\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:641
#, no-wrap
msgid ""
"\tcommit_count = 0;\n"
"\ttag_count = 0;\n"
"\tblob_count = 0;\n"
"\ttree_count = 0;\n"
msgstr ""
"\tcommit_count = 0;\n"
"\ttag_count = 0;\n"
"\tblob_count = 0;\n"
"\ttree_count = 0;\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:646
#, fuzzy
#| msgid ""
#| "Let's start by calling just the unfiltered walk and reporting our "
#| "counts.  Complete your implementation of `walken_object_walk()`:"
msgid ""
"Let's start by calling just the unfiltered walk and reporting our counts.  "
"Complete your implementation of `walken_object_walk()`.  We'll also need to "
"include the `list-objects.h` header."
msgstr ""
"フィルタリングされていない散歩だけを呼び出して、カウントを報告することから始"
"めましょう。あなたの `walken_object_walk()` の実装を完了します:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:649
#, fuzzy, no-wrap
#| msgid "#include \"builtin.h\"\n"
msgid "#include \"list-objects.h\"\n"
msgstr "#include \"builtin.h\"\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:653
#, no-wrap
msgid "\ttraverse_commit_list(rev, walken_show_commit, walken_show_object, NULL);\n"
msgstr "\ttraverse_commit_list(rev, walken_show_commit, walken_show_object, NULL);\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:657
#, no-wrap
msgid ""
"\tprintf(\"commits %d\\nblobs %d\\ntags %d\\ntrees %d\\n\", commit_count,\n"
"\t\tblob_count, tag_count, tree_count);\n"
"}\n"
msgstr ""
"\tprintf(\"commits %d\\nblobs %d\\ntags %d\\ntrees %d\\n\", commit_count,\n"
"\t\tblob_count, tag_count, tree_count);\n"
"}\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:664
msgid ""
"This output is intended to be machine-parsed. Therefore, we are not sending "
"it to `trace_printf()`, and we are not localizing it - we need scripts to be "
"able to count on the formatting to be exactly the way it is shown here.  If "
"we were intending this output to be read by humans, we would need to "
"localize it with `_()`."
msgstr ""
"この出力は、マシンでのパースを目的としています。 したがって、これを "
"`trace_printf()` に送信したり、ローカライズしたりすることはありません。ここに"
"示されているフォーマットとおりに正確にカウントできるスクリプトが必要です。こ"
"の出力を人間が読み取ることを意図している場合は、 `_()` を使用してローカライズ"
"する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:669
msgid ""
"Finally, we'll ask `cmd_walken()` to use the object walk instead. Discussing "
"command line options is out of scope for this tutorial, so we'll just "
"hardcode a branch we can change at compile time. Where you call "
"`final_rev_info_setup()` and `walken_commit_walk()`, instead branch like so:"
msgstr ""
"最後に、代わりにオブジェクト散歩を使用するように `cmd_walken()` に要求しま"
"す。コマンドラインオプションの説明はこのチュートリアルの範囲外であるため、今"
"回はコンパイル時に変更できるブランチをハードコーディングするだけです。 "
"`final_rev_info_setup()` と `walken_commit_walk()` を呼び出す場合は、代わりに"
"以下のように条件分岐します:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:678
#, no-wrap
msgid ""
"\tif (1) {\n"
"\t\tadd_head_to_pending(&rev);\n"
"\t\twalken_object_walk(&rev);\n"
"\t} else {\n"
"\t\tfinal_rev_info_setup(argc, argv, prefix, &rev);\n"
"\t\twalken_commit_walk(&rev);\n"
"\t}\n"
msgstr ""
"\tif (1) {\n"
"\t\tadd_head_to_pending(&rev);\n"
"\t\twalken_object_walk(&rev);\n"
"\t} else {\n"
"\t\tfinal_rev_info_setup(argc, argv, prefix, &rev);\n"
"\t\twalken_commit_walk(&rev);\n"
"\t}\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:685
msgid ""
"For simplicity, we've avoided all the filters and sorts we applied in "
"`final_rev_info_setup()` and simply added `HEAD` to our pending queue. If "
"you want, you can certainly use the filters we added before by moving "
"`final_rev_info_setup()` out of the conditional and removing the call to "
"`add_head_to_pending()`."
msgstr ""
"簡単にするために、 `final_rev_info_setup()` で適用したすべてのフィルターと並"
"べ替えを避け、保留中のキューに `HEAD` を追加しただけです。必要に応じて、 "
"`final_rev_info_setup()` を条件から外し、 `add_head_to_pending()` の呼び出し"
"を削除することで、前に追加したフィルターを確実に使用できます。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:689
msgid ""
"Now we can try to run our command! It should take noticeably longer than the "
"commit walk, but an examination of the output will give you an idea why. "
"Your output should look similar to this example, but with different counts:"
msgstr ""
"今や私達はコマンドの実行を試みることができます。コミット散歩よりもかなり長い"
"時間がかかるはずですが、出力を調べると、その理由がわかります。出力はこの例の"
"ようになりますが、カウントは異なります:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:692
#, no-wrap
msgid "Object walk completed. Found 55733 commits, 100274 blobs, 0 tags, and 104210 trees.\n"
msgstr "Object walk completed. Found 55733 commits, 100274 blobs, 0 tags, and 104210 trees.\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:698
msgid ""
"This makes sense. We have more trees than commits because the Git project "
"has lots of subdirectories which can change, plus at least one tree per "
"commit. We have no tags because we started on a commit (`HEAD`) and while "
"tags can point to commits, commits can't point to tags."
msgstr ""
"これの意味は、Gitプロジェクトには変更可能なサブディレクトリがたくさんあり、コ"
"ミットごとに少なくとも1つのツリーがあるため、コミットよりも多くのツリーがあり"
"ます。 コミット(`HEAD`)で開始したため、タグはありません。タグはコミットを指す"
"ことができますが、コミットはタグを指すことができません。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:701
msgid ""
"You will have different counts when you run this yourself! The number of "
"objects grows along with the Git project."
msgstr ""
"これをあなた自身が実行すると、カウントは異なります。オブジェクトの数は、Gitプ"
"ロジェクトとともに増加します。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:715
msgid ""
"There are a handful of filters that we can apply to the object walk laid out "
"in `Documentation/rev-list-options.txt`. These filters are typically useful "
"for operations such as creating packfiles or performing a partial clone. "
"They are defined in `list-objects-filter-options.h`. For the purposes of "
"this tutorial we will use the \"tree:1\" filter, which causes the walk to "
"omit all trees and blobs which are not directly referenced by commits "
"reachable from the commit in `pending` when the walk begins. (`pending` is "
"the list of objects which need to be traversed during a walk; you can "
"imagine a breadth-first tree traversal to help understand. In our case, that "
"means we omit trees and blobs not directly referenced by `HEAD` or `HEAD`'s "
"history, because we begin the walk with only `HEAD` in the `pending` list.)"
msgstr ""
"`Documentation/rev-list-options.txt` に配置されたオブジェクト散歩に適用できる"
"フィルターがいくつかあります。これらのフィルターは通常、パックファイルの作成"
"や部分的なクローンの実行などの操作に役立ちます。 それらは `list-objects-"
"filter-options.h` で定義されています。このチュートリアルでは、 \"tree:1\" "
"フィルターを使用します。これにより、散歩の開始時に、コミットから到達可能なコ"
"ミットによって直接参照されないすべてのツリーとブロブが散歩から省略されます。 "
"(`pending` は、散歩中にトラバースする必要のあるオブジェクトのリストです。あな"
"たが理解するのを助けるため、広さ優先のツリートラバースを想像してください。こ"
"の場合、「pending」リストの「HEAD」のみで散歩を開始するため、「HEAD」または"
"「HEAD」の履歴によって直接参照されていないツリーとブロブを省略します。)"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:721
#, fuzzy
#| msgid ""
#| "For now, we are not going to track the omitted objects, so we'll replace "
#| "those parameters with `NULL`. For the sake of simplicity, we'll add a "
#| "simple build-time branch to use our filter or not. Replace the line "
#| "calling `traverse_commit_list()` with the following, which will remind us "
#| "which kind of walk we've just performed:"
msgid ""
"For now, we are not going to track the omitted objects, so we'll replace "
"those parameters with `NULL`. For the sake of simplicity, we'll add a simple "
"build-time branch to use our filter or not. Preface the line calling "
"`traverse_commit_list()` with the following, which will remind us which kind "
"of walk we've just performed:"
msgstr ""
"今のところ、省略されたオブジェクトを追跡するつもりはないので、それらのパラ"
"メータを `NULL` に置き換えます。簡単にするために、フィルターを使用するかどう"
"かに関係なく、単純なビルド時ブランチを追加します。 `traverse_commit_list()` "
"を呼び出す行を以下のように置き換えます。これにより、実行したばかりの散歩の種"
"類がわかります:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:734
#, fuzzy, no-wrap
#| msgid ""
#| "\tif (0) {\n"
#| "\t\t/* Unfiltered: */\n"
#| "\t\ttrace_printf(_(\"Unfiltered object walk.\\n\"));\n"
#| "\t\ttraverse_commit_list(rev, walken_show_commit,\n"
#| "\t\t\t\twalken_show_object, NULL);\n"
#| "\t} else {\n"
#| "\t\ttrace_printf(\n"
#| "\t\t\t_(\"Filtered object walk with filterspec 'tree:1'.\\n\"));\n"
#| "\t\tparse_list_objects_filter(&filter_options, \"tree:1\");\n"
msgid ""
"\tif (0) {\n"
"\t\t/* Unfiltered: */\n"
"\t\ttrace_printf(_(\"Unfiltered object walk.\\n\"));\n"
"\t} else {\n"
"\t\ttrace_printf(\n"
"\t\t\t_(\"Filtered object walk with filterspec 'tree:1'.\\n\"));\n"
"\t\tCALLOC_ARRAY(rev->filter, 1);\n"
"\t\tparse_list_objects_filter(rev->filter, \"tree:1\");\n"
"\t}\n"
"\ttraverse_commit_list(rev, walken_show_commit,\n"
"\t\t\t     walken_show_object, NULL);\n"
msgstr ""
"\tif (0) {\n"
"\t\t/* Unfiltered: */\n"
"\t\ttrace_printf(_(\"Unfiltered object walk.\\n\"));\n"
"\t\ttraverse_commit_list(rev, walken_show_commit,\n"
"\t\t\t\twalken_show_object, NULL);\n"
"\t} else {\n"
"\t\ttrace_printf(\n"
"\t\t\t_(\"Filtered object walk with filterspec 'tree:1'.\\n\"));\n"
"\t\tparse_list_objects_filter(&filter_options, \"tree:1\");\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:740
#, fuzzy
#| msgid ""
#| "`struct list_objects_filter_options` is usually built directly from a "
#| "command line argument, so the module provides an easy way to build one "
#| "from a string.  Even though we aren't taking user input right now, we can "
#| "still build one with a hardcoded string using "
#| "`parse_list_objects_filter()`."
msgid ""
"The `rev->filter` member is usually built directly from a command line "
"argument, so the module provides an easy way to build one from a string.  "
"Even though we aren't taking user input right now, we can still build one "
"with a hardcoded string using `parse_list_objects_filter()`."
msgstr ""
"`struct list_objects_filter_options` は通常、コマンドライン引数から直接作成さ"
"れるため、モジュールは文字列から簡単に作成する方法を提供します。現在、ユー"
"ザー入力を受け取っていませんが、 `parse_list_objects_filter()` を使用して、"
"ハードコードされた文字列を使用してユーザー入力を作成できます。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:745
msgid ""
"With the filter spec \"tree:1\", we are expecting to see _only_ the root "
"tree for each commit; therefore, the tree object count should be less than "
"or equal to the number of commits. (For an example of why that's true: `git "
"commit --revert` points to the same tree object as its grandparent.)"
msgstr ""
"フィルタ仕様「tree:1」では、コミットごとにルートツリーのみが表示されることを"
"期待しています。したがって、ツリーオブジェクトの数はコミット数以下である必要"
"があります。 (これが当てはまる理由の例: `git commit --revert` は、祖父母と同"
"じツリーオブジェクトを指します。)"

#. type: Title ===
#: ../Documentation-sedout/MyFirstObjectWalk.txt:746
#, no-wrap
msgid "Counting Omitted Objects"
msgstr "Counting Omitted Objects"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:753
msgid ""
"We also have the capability to enumerate all objects which were omitted by a "
"filter, like with `git log --filter=<spec> --filter-print-omitted`. Asking "
"`traverse_commit_list_filtered()` to populate the `omitted` list means that "
"our object walk does not perform any better than an unfiltered object walk; "
"all reachable objects are walked in order to populate the list."
msgstr ""
"私達は、 `git log --filter=<spec> --filter-print-omitted` のように、フィル"
"ターによって省略されたすべてのオブジェクトを列挙する機能も持っています。 "
"`traverse_commit_list_filtered()` に `omitted` リストにデータを入力するように"
"要求することは、オブジェクト散歩が、フィルタリングされていないオブジェクト散"
"歩より優れたパフォーマンスを発揮し無いことを意味します。リストにデータを入力"
"するために、到達可能なすべてのオブジェクトを散歩します。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:755
msgid ""
"First, add the `struct oidset` and related items we will use to iterate it:"
msgstr "まず、反復処理に使用する `struct oidset` と関連アイテムを追加します:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:759
#, no-wrap
msgid ""
"static void walken_object_walk(\n"
"\t...\n"
msgstr ""
"static void walken_object_walk(\n"
"\t...\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:765
#, no-wrap
msgid ""
"\tstruct oidset omitted;\n"
"\tstruct oidset_iter oit;\n"
"\tstruct object_id *oid = NULL;\n"
"\tint omitted_count = 0;\n"
"\toidset_init(&omitted, 0);\n"
msgstr ""
"\tstruct oidset omitted;\n"
"\tstruct oidset_iter oit;\n"
"\tstruct object_id *oid = NULL;\n"
"\tint omitted_count = 0;\n"
"\toidset_init(&omitted, 0);\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:771
msgid ""
"Modify the call to `traverse_commit_list_filtered()` to include your "
"`omitted` object:"
msgstr ""
"`traverse_commit_list_filtered()` の呼び出しを変更して、 あなたの `omitted` "
"オブジェクトを含めます:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:777
#, fuzzy, no-wrap
#| msgid ""
#| "\t\ttraverse_commit_list_filtered(&filter_options, rev,\n"
#| "\t\t\twalken_show_commit, walken_show_object, NULL, &omitted);\n"
msgid ""
"\t\ttraverse_commit_list_filtered(rev,\n"
"\t\t\twalken_show_commit, walken_show_object, NULL, &omitted);\n"
msgstr ""
"\t\ttraverse_commit_list_filtered(&filter_options, rev,\n"
"\t\t\twalken_show_commit, walken_show_object, NULL, &omitted);\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:783
msgid ""
"Then, after your traversal, the `oidset` traversal is pretty "
"straightforward.  Count all the objects within and modify the print "
"statement:"
msgstr ""
"あなたのトラバーサルの後、 `oidset` トラバーサルするのは非常に簡単です。 内部"
"のすべてのオブジェクトをカウントし、printステートメントを変更します:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:787
#, no-wrap
msgid ""
"\t/* Count the omitted objects. */\n"
"\toidset_iter_init(&omitted, &oit);\n"
msgstr ""
"\t/* Count the omitted objects. */\n"
"\toidset_iter_init(&omitted, &oit);\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:790
#, no-wrap
msgid ""
"\twhile ((oid = oidset_iter_next(&oit)))\n"
"\t\tomitted_count++;\n"
msgstr ""
"\twhile ((oid = oidset_iter_next(&oit)))\n"
"\t\tomitted_count++;\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:793
#, no-wrap
msgid ""
"\tprintf(\"commits %d\\nblobs %d\\ntags %d\\ntrees %d\\nomitted %d\\n\",\n"
"\t\tcommit_count, blob_count, tag_count, tree_count, omitted_count);\n"
msgstr ""
"\tprintf(\"commits %d\\nblobs %d\\ntags %d\\ntrees %d\\nomitted %d\\n\",\n"
"\t\tcommit_count, blob_count, tag_count, tree_count, omitted_count);\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:799
msgid ""
"By running your walk with and without the filter, you should find that the "
"total object count in each case is identical. You can also time each "
"invocation of the `walken` subcommand, with and without `omitted` being "
"passed in, to confirm to yourself the runtime impact of tracking all omitted "
"objects."
msgstr ""
"フィルタを使用して、または使用せずに散歩すると、それぞれの場合の合計オブジェ"
"クト数が同じであることがわかります。 また、 `omitted` が渡される場合とされな"
"い場合で、 `walken` サブコマンドの各呼び出しの時間を計って、省略されたすべて"
"のオブジェクトを追跡することによる実行時の影響を確認することもできます。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:806
msgid ""
"Finally, let's demonstrate that you can also reorder walks of all objects, "
"not just walks of commits. First, we'll make our handlers chattier - modify "
"`walken_show_commit()` and `walken_show_object()` to print the object as "
"they go:"
msgstr ""
"最後に、コミットの散歩だけでなく、すべてのオブジェクトの散歩を並べ替えること"
"もできることを示しましょう。まず、ハンドラーをおしゃべりにします。 "
"`walken_show_commit()` と `walken_show_object()` を変更して、オブジェクトを出"
"力します:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:813
#, no-wrap
msgid ""
"static void walken_show_commit(struct commit *cmt, void *buf)\n"
"{\n"
"\ttrace_printf(\"commit: %s\\n\", oid_to_hex(&cmt->object.oid));\n"
"\tcommit_count++;\n"
"}\n"
msgstr ""
"static void walken_show_commit(struct commit *cmt, void *buf)\n"
"{\n"
"\ttrace_printf(\"commit: %s\\n\", oid_to_hex(&cmt->object.oid));\n"
"\tcommit_count++;\n"
"}\n"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:817
#, no-wrap
msgid ""
"static void walken_show_object(struct object *obj, const char *str, void *buf)\n"
"{\n"
"\ttrace_printf(\"%s: %s\\n\", type_name(obj->type), oid_to_hex(&obj->oid));\n"
msgstr ""
"static void walken_show_object(struct object *obj, const char *str, void *buf)\n"
"{\n"
"\ttrace_printf(\"%s: %s\\n\", type_name(obj->type), oid_to_hex(&obj->oid));\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:826
msgid ""
"Since we will be examining this output directly as humans, we'll use "
"`trace_printf()` here. Additionally, since this change introduces a "
"significant number of printed lines, using `trace_printf()` will allow us to "
"easily silence those lines without having to recompile."
msgstr ""
"この出力は人間が直接調べるので、ここでは `trace_printf()` を使用します。 さら"
"に、この変更によりかなりの数のprint行が導入されるため、 `trace_printf()` を使"
"用しておくと、再コンパイルせずにそれらの行を簡単に黙らせる事ができます。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:828
msgid "(Leave the counter increment logic in place.)"
msgstr "(カウンターインクリメントロジックはそのままにしておきます。）"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:830
msgid "With only that change, run again (but save yourself some scrollback):"
msgstr ""
"その変更だけで、もう一度実行します(ただし、スクロールバックは少し我慢してくだ"
"さい):"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:833
#, no-wrap
msgid "$ GIT_TRACE=1 ./bin-wrappers/git walken | head -n 10\n"
msgstr "$ GIT_TRACE=1 ./bin-wrappers/git walken | head -n 10\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:837
msgid ""
"Take a look at the top commit with `git show` and the object ID you printed; "
"it should be the same as the output of `git show HEAD`."
msgstr ""
"`git show` を使用したトップコミットと印刷した場合のオブジェクトを見てくださ"
"い。 `git show HEAD` の出力と同じである必要があります。"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:842
msgid ""
"Next, let's change a setting on our `struct rev_info` within "
"`walken_object_walk()`. Find where you're changing the other settings on "
"`rev`, such as `rev->tree_objects` and `rev->tree_blobs_in_commit_order`, "
"and add the `reverse` setting at the bottom:"
msgstr ""
"次に、 `walken_object_walk()` 内の `struct rev_info` の設定を変更しましょ"
"う。 `rev->tree_objects` や `rev->tree_blobs_in_commit_order` など、 `rev` の"
"他の設定を変更する場所を見つけて、下部に `reverse` 設定を追加します:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:851
#, no-wrap
msgid ""
"\trev->tree_objects = 1;\n"
"\trev->blob_objects = 1;\n"
"\trev->tag_objects = 1;\n"
"\trev->tree_blobs_in_commit_order = 1;\n"
"\trev->reverse = 1;\n"
msgstr ""
"\trev->tree_objects = 1;\n"
"\trev->blob_objects = 1;\n"
"\trev->tag_objects = 1;\n"
"\trev->tree_blobs_in_commit_order = 1;\n"
"\trev->reverse = 1;\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:857
msgid ""
"Now, run again, but this time, let's grab the last handful of objects "
"instead of the first handful:"
msgstr ""
"さて、もう一度実行しますが、今回は、最初の一握りではなく、最後の一握りのオブ"
"ジェクトを取得しましょう:"

#. type: delimited block -
#: ../Documentation-sedout/MyFirstObjectWalk.txt:861
#, no-wrap
msgid ""
"$ make\n"
"$ GIT_TRACE=1 ./bin-wrappers git walken | tail -n 10\n"
msgstr ""
"$ make\n"
"$ GIT_TRACE=1 ./bin-wrappers git walken | tail -n 10\n"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:869
msgid ""
"The last commit object given should have the same OID as the one we saw at "
"the top before, and running `git show <oid>` with that OID should give you "
"again the same results as `git show HEAD`. Furthermore, if you run and "
"examine the first ten lines again (with `head` instead of `tail` like we did "
"before applying the `reverse` setting), you should see that now the first "
"commit printed is the initial commit, `e83c5163`."
msgstr ""
"与えられた最後のコミットオブジェクトは、前に見たものと同じOIDを持つ必要があ"
"り、そのOIDで `git show <oid>` を実行すると、再び `git show HEAD` と同じ結果"
"が得られます。さらに、最初の10行を再度実行して調べると(「reverse」設定を適用"
"する前に行ったように「tail」ではなく「head」を使用)、最初に出力されるコミット"
"が最初のコミット「e83c5163」であることがわかります。"

#. type: Title ==
#: ../Documentation-sedout/MyFirstObjectWalk.txt:870
#, no-wrap
msgid "Wrapping Up"
msgstr "Wrapping Up"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:873
msgid "Let's review. In this tutorial, we:"
msgstr ""
"確認してみましょう。 このチュートリアルでは、私達は以下のことを行いました:"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:875
msgid "Built a commit walk from the ground up"
msgstr "ゼロからコミット散歩を構築しました"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:876
msgid "Enabled a grep filter for that commit walk"
msgstr "そのコミット散歩のgrepフィルターを有効にしました"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:877
msgid "Changed the sort order of that filtered commit walk"
msgstr "そのフィルタリングされたコミット散歩のソート順を変更しました"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:878
msgid ""
"Built an object walk (tags, commits, trees, and blobs) from the ground up"
msgstr "オブジェクト散歩(タグ、コミット、ツリー、ブロブ)をゼロから構築しました"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:879
msgid "Learned how to add a filter-spec to an object walk"
msgstr "フィルタ仕様をオブジェクト散歩に追加する方法を学びました"

#. type: Plain text
#: ../Documentation-sedout/MyFirstObjectWalk.txt:879
msgid "Changed the display order of the filtered object walk"
msgstr "フィルタリングされたオブジェクト散歩の表示順序を変更しました"

#~ msgid ""
#~ "`struct list_objects_filter_options *filter_options`: This is a struct "
#~ "which stores a filter-spec as outlined in `Documentation/rev-list-options."
#~ "txt`."
#~ msgstr ""
#~ "`struct list_objects_filter_options *filter_options`: これは、 "
#~ "`Documentation/rev-list-options.txt` で概説されているようにfilter-specを格"
#~ "納する構造体です。"

#~ msgid "`struct rev_info *revs`: This is the `rev_info` used for the walk."
#~ msgstr "`struct rev_info *revs`: これは、散歩に使用される `rev_info` です。"

#~ msgid ""
#~ "First, we'll need to `#include \"list-objects-filter-options.h\"` and set "
#~ "up the `struct list_objects_filter_options` at the top of the function."
#~ msgstr ""
#~ "まず、 `#include \"list-objects-filter-options.h\"` を行い、関数の先頭に "
#~ "`struct list_objects_filter_options` を設定する必要があります。"

#~ msgid ""
#~ "static void walken_object_walk(struct rev_info *rev)\n"
#~ "{\n"
#~ "\tstruct list_objects_filter_options filter_options = {};\n"
#~ msgstr ""
#~ "static void walken_object_walk(struct rev_info *rev)\n"
#~ "{\n"
#~ "\tstruct list_objects_filter_options filter_options = {};\n"

#~ msgid ""
#~ "\t\ttraverse_commit_list_filtered(&filter_options, rev,\n"
#~ "\t\t\twalken_show_commit, walken_show_object, NULL, NULL);\n"
#~ "\t}\n"
#~ msgstr ""
#~ "\t\ttraverse_commit_list_filtered(&filter_options, rev,\n"
#~ "\t\t\twalken_show_commit, walken_show_object, NULL, NULL);\n"
#~ "\t}\n"
