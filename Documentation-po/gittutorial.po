# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 0.0\n"
"POT-Creation-Date: 2023-07-18 11:05+0900\n"
"PO-Revision-Date: 2022-01-27 09:54+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/gittutorial.txt:2
#, no-wrap
msgid "gittutorial(7)"
msgstr "gittutorial(7)"

#. type: Title -
#: ../Documentation-sedout/gittutorial.txt:5
#, no-wrap
msgid "NAME"
msgstr "NAME"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:7
msgid "gittutorial - A tutorial introduction to Git"
msgstr "gittutorial - Git入門"

#. type: Title -
#: ../Documentation-sedout/gittutorial.txt:9
#, no-wrap
msgid "SYNOPSIS"
msgstr "SYNOPSIS"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:12
#, no-wrap
msgid "git *\n"
msgstr "git *\n"

#. type: Title -
#: ../Documentation-sedout/gittutorial.txt:14
#, no-wrap
msgid "DESCRIPTION"
msgstr "DESCRIPTION"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:18
msgid ""
"This tutorial explains how to import a new project into Git, make changes to "
"it, and share changes with other developers."
msgstr ""
"このチュートリアルでは、新しいプロジェクトをGitにインポートし、変更を加え、他"
"の開発者と変更を共有する方法について説明します。"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:22
msgid ""
"If you are instead primarily interested in using Git to fetch a project, for "
"example, to test the latest version, you may prefer to start with the first "
"two chapters of link:user-manual.html[The Git User's Manual]."
msgstr ""
"Gitを使用してプロジェクトをフェッチする方に主な関心がある場合、たとえば、最新"
"バージョンをテストする場合は、 link:user-manual.html[The Git User's Manual] "
"の最初の2つの章から始めることをお勧めします。"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:25
msgid ""
"First, note that you can get documentation for a command such as `git log --"
"graph` with:"
msgstr ""
"注意: まず最初に、 あなたは `git log --graph` などのコマンドの文書を以下のよ"
"うにして入手する事ができます:"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:28
#, no-wrap
msgid "$ man git-log\n"
msgstr "$ man git-log\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:31
msgid "or:"
msgstr "または:"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:34
#, no-wrap
msgid "$ git help log\n"
msgstr "$ git help log\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:38
msgid ""
"With the latter, you can use the manual viewer of your choice; see linkgit:"
"git-help[1] for more information."
msgstr ""
"後者では。あなたが選択したマニュアルビューアを使用できます。詳細については "
"linkgit:git-help[1] を参照してください。"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:42
msgid ""
"It is a good idea to introduce yourself to Git with your name and public "
"email address before doing any operation.  The easiest way to do so is:"
msgstr ""
"操作を行う前に、名前と公開メールアドレスを使用してあなた自身をGitに紹介する"
"(introduce yourself)ことをお勧めします。これを行う最も簡単な方法は以下のとお"
"りです:"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:46
#, no-wrap
msgid ""
"$ git config --global user.name \"Your Name Comes Here\"\n"
"$ git config --global user.email you@yourdomain.example.com\n"
msgstr ""
"$ git config --global user.name \"Your Name Comes Here\"\n"
"$ git config --global user.email you@yourdomain.example.com\n"

#. type: Title -
#: ../Documentation-sedout/gittutorial.txt:50
#, no-wrap
msgid "Importing a new project"
msgstr "Importing a new project"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:54
#, fuzzy
#| msgid ""
#| "Assume you have a tarball project.tar.gz with your initial work.  You can "
#| "place it under Git revision control as follows."
msgid ""
"Assume you have a tarball `project.tar.gz` with your initial work.  You can "
"place it under Git revision control as follows."
msgstr ""
"既にtarball project.tar.gz があると仮定します。あなたは以下にしてそれをGitリ"
"ビジョン管理下に置くことができます。"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:59
#, no-wrap
msgid ""
"$ tar xzf project.tar.gz\n"
"$ cd project\n"
"$ git init\n"
msgstr ""
"$ tar xzf project.tar.gz\n"
"$ cd project\n"
"$ git init\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:62
msgid "Git will reply"
msgstr "Gitは以下のメッセージを返すでしょう"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:65
#, no-wrap
msgid "Initialized empty Git repository in .git/\n"
msgstr "Initialized empty Git repository in .git/\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:69
#, fuzzy
#| msgid ""
#| "You've now initialized the working directory--you may notice a new "
#| "directory created, named \".git\"."
msgid ""
"You've now initialized the working directory--you may notice a new directory "
"created, named `.git`."
msgstr ""
"これで作業ディレクトリが初期化されました。あなたは \".git\" という名前の新し"
"いディレクトリが作成されていることに気付くかもしれません。"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:72
#, fuzzy
#| msgid ""
#| "Next, tell Git to take a snapshot of the contents of all files under the "
#| "current directory (note the '.'), with 'git add':"
msgid ""
"Next, tell Git to take a snapshot of the contents of all files under the "
"current directory (note the `.`), with `git add`:"
msgstr ""
"次に、Gitに、現在のディレクトリ('.' に注意)の下にあるすべてのファイルの内容の"
"スナップショットを「git add」で取得するように指示します:"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:75
#, no-wrap
msgid "$ git add .\n"
msgstr "$ git add .\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:80
#, fuzzy
#| msgid ""
#| "This snapshot is now stored in a temporary staging area which Git calls "
#| "the \"index\".  You can permanently store the contents of the index in "
#| "the repository with 'git commit':"
msgid ""
"This snapshot is now stored in a temporary staging area which Git calls the "
"\"index\".  You can permanently store the contents of the index in the "
"repository with `git commit`:"
msgstr ""
"このスナップショットは、Gitが「インデックス」と呼ぶ一時的な足場領域"
"(temporary staging area)に保存されました。 'git commit' を使用して、インデッ"
"クスの内容をリポジトリに永続的に保存できます:"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:83
#: ../Documentation-sedout/gittutorial.txt:125
#, no-wrap
msgid "$ git commit\n"
msgstr "$ git commit\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:87
msgid ""
"This will prompt you for a commit message.  You've now stored the first "
"version of your project in Git."
msgstr ""
"これにより、コミットメッセージの入力を求められます。 これで、プロジェクトの最"
"初のバージョンがGitに保存されました。"

#. type: Title -
#: ../Documentation-sedout/gittutorial.txt:89
#, no-wrap
msgid "Making changes"
msgstr "Making changes"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:92
msgid "Modify some files, then add their updated contents to the index:"
msgstr ""
"いくつかのファイルを変更してから、更新された内容をインデックスに追加します:"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:95
#, no-wrap
msgid "$ git add file1 file2 file3\n"
msgstr "$ git add file1 file2 file3\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:99
#, fuzzy
#| msgid ""
#| "You are now ready to commit.  You can see what is about to be committed "
#| "using 'git diff' with the --cached option:"
msgid ""
"You are now ready to commit.  You can see what is about to be committed "
"using `git diff` with the `--cached` option:"
msgstr ""
"これで、コミットする準備ができました。 `--cached` オプションを指定した「git "
"diff」を使用して、何がコミットされようとしているのかを確認できます:"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:102
#, no-wrap
msgid "$ git diff --cached\n"
msgstr "$ git diff --cached\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:107
#, fuzzy
#| msgid ""
#| "(Without --cached, 'git diff' will show you any changes that you've made "
#| "but not yet added to the index.)  You can also get a brief summary of the "
#| "situation with 'git status':"
msgid ""
"(Without `--cached`, `git diff` will show you any changes that you've made "
"but not yet added to the index.)  You can also get a brief summary of the "
"situation with `git status`:"
msgstr ""
"(`--cached` を指定しない場合、「git diff」は、編集を行ったがまだインデックス"
"に追加されていない変更を表示します。）あなたは「git status」を使用して状況の"
"簡単な要約を取得することもできます:"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:113
#, fuzzy, no-wrap
#| msgid ""
#| "$ git status\n"
#| "On branch master\n"
#| "Changes to be committed:\n"
#| "Your branch is up to date with 'origin/master'.\n"
#| "  (use \"git restore --staged <file>...\" to unstage)\n"
msgid ""
"$ git status\n"
"On branch master\n"
"Changes to be committed:\n"
"  (use \"git restore --staged <file>...\" to unstage)\n"
msgstr ""
"$ git status\n"
"On branch master\n"
"Changes to be committed:\n"
"Your branch is up to date with 'origin/master'.\n"
"  (use \"git restore --staged <file>...\" to unstage)\n"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:117
#, no-wrap
msgid ""
"\tmodified:   file1\n"
"\tmodified:   file2\n"
"\tmodified:   file3\n"
msgstr ""
"\tmodified:   file1\n"
"\tmodified:   file2\n"
"\tmodified:   file3\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:122
msgid ""
"If you need to make any further adjustments, do so now, and then add any "
"newly modified content to the index.  Finally, commit your changes with:"
msgstr ""
"さらに調整が必要な場合は、ここで調整してから、新しく変更したコンテンツをイン"
"デックスに追加します。 最後に、以下のコマンドであなたの変更をコミットします。"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:129
msgid ""
"This will again prompt you for a message describing the change, and then "
"record a new version of the project."
msgstr ""
"これにより、変更を説明するメッセージの入力を再度求められ、プロジェクトの新し"
"いバージョンが記録されます。"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:131
#, fuzzy
#| msgid "Alternatively, instead of running 'git add' beforehand, you can use"
msgid "Alternatively, instead of running `git add` beforehand, you can use"
msgstr ""
"または、事前に「git add」を実行する代わりに、あなたは以下を使用できます。"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:134
#: ../Documentation-sedout/gittutorial.txt:250
#, no-wrap
msgid "$ git commit -a\n"
msgstr "$ git commit -a\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:138
msgid ""
"which will automatically notice any modified (but not new) files, add them "
"to the index, and commit, all in one step."
msgstr ""
"これにより、変更された(ただし新規ではない)ファイルが自動的に認識され、それら"
"がインデックスに追加され、コミットされます。それらがすべて1つのステップで実行"
"されます。"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:147
msgid ""
"A note on commit messages: Though not required, it's a good idea to begin "
"the commit message with a single short (less than 50 character)  line "
"summarizing the change, followed by a blank line and then a more thorough "
"description. The text up to the first blank line in a commit message is "
"treated as the commit title, and that title is used throughout Git.  For "
"example, linkgit:git-format-patch[1] turns a commit into email, and it uses "
"the title on the Subject line and the rest of the commit in the body."
msgstr ""
"コミットメッセージに関する注意: 必須ではありませんが、コミットメッセージは、"
"変更を要約した1行の短い(50文字未満)行で始まり、空行が1行あり、その後にさらに"
"詳細な説明が続くようにすることをお勧めします。コミットメッセージの最初の空白"
"行までのテキストはコミットタイトルとして扱われ、そのタイトルはGit全体で使用さ"
"れます。たとえば、 linkgit:git-format-patch[1] はコミットを電子メールに変換"
"し、件名としてコミットタイトル、本文として残りのコミットメッセージを使用しま"
"す。"

#. type: Title -
#: ../Documentation-sedout/gittutorial.txt:149
#, no-wrap
msgid "Git tracks content not files"
msgstr "Git tracks content not files"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:157
#, fuzzy
#| msgid ""
#| "Many revision control systems provide an `add` command that tells the "
#| "system to start tracking changes to a new file.  Git's `add` command does "
#| "something simpler and more powerful: 'git add' is used both for new and "
#| "newly modified files, and in both cases it takes a snapshot of the given "
#| "files and stages that content in the index, ready for inclusion in the "
#| "next commit."
msgid ""
"Many revision control systems provide an `add` command that tells the system "
"to start tracking changes to a new file.  Git's `add` command does something "
"simpler and more powerful: `git add` is used both for new and newly modified "
"files, and in both cases it takes a snapshot of the given files and stages "
"that content in the index, ready for inclusion in the next commit."
msgstr ""
"【Gitはファイルではなくコンテンツを追跡する】多くのリビジョン管理システムは、"
"新しいファイルへの変更の追跡を開始するようにシステムに指示する `add` コマンド"
"を提供します。 Gitの `add` コマンドは、よりシンプルで強力な機能を実行しま"
"す。 `git add` 'は、新しいファイルと新しく変更されたファイルの両方に使用され"
"ます。どちらの場合も、指定されたファイルのスナップショットを取得し、そのコン"
"テンツをインデックスにステージングして、次のコミットにすぐに含めることができ"
"ます。"

#. type: Title -
#: ../Documentation-sedout/gittutorial.txt:159
#, no-wrap
msgid "Viewing project history"
msgstr "Viewing project history"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:162
msgid "At any point you can view the history of your changes using"
msgstr "あなたはいつでも、以下を使用して変更の履歴を表示できます"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:165
#, no-wrap
msgid "$ git log\n"
msgstr "$ git log\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:168
msgid "If you also want to see complete diffs at each step, use"
msgstr ""
"あなたが各ステップで完全な差分も表示したい場合は、以下を使用してください"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:171
#, no-wrap
msgid "$ git log -p\n"
msgstr "$ git log -p\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:175
msgid "Often the overview of the change is useful to get a feel of each step"
msgstr ""
"多くの場合、以下のような変更の概要は、各ステップの感触をつかむのに役立ちます"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:178
#, no-wrap
msgid "$ git log --stat --summary\n"
msgstr "$ git log --stat --summary\n"

#. type: Title -
#: ../Documentation-sedout/gittutorial.txt:181
#, no-wrap
msgid "Managing branches"
msgstr "Managing branches"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:185
#, fuzzy
#| msgid ""
#| "A single Git repository can maintain multiple branches of development.  "
#| "To create a new branch named \"experimental\", use"
msgid ""
"A single Git repository can maintain multiple branches of development.  To "
"create a new branch named `experimental`, use"
msgstr ""
"単一のGitリポジトリで、開発の複数のブランチを維持できます。「experimental」と"
"いう名前の新しいブランチを作成するには、以下のようにします。"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:188
#, no-wrap
msgid "$ git branch experimental\n"
msgstr "$ git branch experimental\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:191
msgid "If you now run"
msgstr "そして、以下のようにすることができます"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:194
#, no-wrap
msgid "$ git branch\n"
msgstr "$ git branch\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:197
msgid "you'll get a list of all existing branches:"
msgstr "そうすると、既存のすべてのブランチのリストが表示されます。"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:201
#, no-wrap
msgid ""
"  experimental\n"
"* master\n"
msgstr ""
"  experimental\n"
"* master\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:207
#, fuzzy
#| msgid ""
#| "The \"experimental\" branch is the one you just created, and the "
#| "\"master\" branch is a default branch that was created for you "
#| "automatically.  The asterisk marks the branch you are currently on; type"
msgid ""
"The `experimental` branch is the one you just created, and the `master` "
"branch is a default branch that was created for you automatically.  The "
"asterisk marks the branch you are currently on; type"
msgstr ""
"「experimental」ブランチは作成したばかりのブランチであり、「master」ブランチ"
"は自動的に作成されたデフォルトのブランチです。アスタリスク(`*`)は、現在使用し"
"ているブランチを示します。そして以下のようにタイプします。"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:210
#, no-wrap
msgid "$ git switch experimental\n"
msgstr "$ git switch experimental\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:214
#, fuzzy
#| msgid ""
#| "to switch to the experimental branch.  Now edit a file, commit the "
#| "change, and switch back to the master branch:"
msgid ""
"to switch to the `experimental` branch.  Now edit a file, commit the change, "
"and switch back to the `master` branch:"
msgstr ""
"するとexperimentalブランチに切り替えます。次に、ファイルを編集し、変更をコ"
"ミットして、masterブランチに戻ります:"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:219
#, no-wrap
msgid ""
"(edit file)\n"
"$ git commit -a\n"
"$ git switch master\n"
msgstr ""
"(edit file)\n"
"$ git commit -a\n"
"$ git switch master\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:223
#, fuzzy
#| msgid ""
#| "Check that the change you made is no longer visible, since it was made on "
#| "the experimental branch and you're back on the master branch."
msgid ""
"Check that the change you made is no longer visible, since it was made on "
"the `experimental` branch and you're back on the `master` branch."
msgstr ""
"その変更はexperimentalブランチで行われ、masterブランチに戻ったため、その変更"
"が表示されなくなったことを確認します。"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:225
#, fuzzy
#| msgid "You can make a different change on the master branch:"
msgid "You can make a different change on the `master` branch:"
msgstr "masterブランチで別の変更を加えることができます:"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:229
#, no-wrap
msgid ""
"(edit file)\n"
"$ git commit -a\n"
msgstr ""
"(edit file)\n"
"$ git commit -a\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:233
#, fuzzy
#| msgid ""
#| "at this point the two branches have diverged, with different changes made "
#| "in each.  To merge the changes made in experimental into master, run"
msgid ""
"at this point the two branches have diverged, with different changes made in "
"each.  To merge the changes made in `experimental` into `master`, run"
msgstr ""
"この時点で、2つのブランチは分岐しており、それぞれに異なる変更が加えられていま"
"す。experimentalで行った変更をmasterにマージするには、以下を実行します"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:236
#, no-wrap
msgid "$ git merge experimental\n"
msgstr "$ git merge experimental\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:240
msgid ""
"If the changes don't conflict, you're done.  If there are conflicts, markers "
"will be left in the problematic files showing the conflict;"
msgstr ""
"変更が競合しない場合は、これで完了です。 競合がある場合、競合を示すマーカーが"
"問題のあるファイルに残されます。"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:243
#, no-wrap
msgid "$ git diff\n"
msgstr "$ git diff\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:247
msgid "will show this.  Once you've edited the files to resolve the conflicts,"
msgstr ""
"とすると、これを表示します。あなたが競合を解決するためにファイルを編集したら"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:253
msgid "will commit the result of the merge. Finally,"
msgstr "とすると、マージの結果をコミットします。そして最後に、"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:256
#, no-wrap
msgid "$ gitk\n"
msgstr "$ gitk\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:259
msgid "will show a nice graphical representation of the resulting history."
msgstr "とすると、結果の履歴の優れたグラフィック表現が表示されます。"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:261
#, fuzzy
#| msgid "At this point you could delete the experimental branch with"
msgid "At this point you could delete the `experimental` branch with"
msgstr "この時点で、以下のコマンドでexperimentalブランチを削除できます"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:264
#, no-wrap
msgid "$ git branch -d experimental\n"
msgstr "$ git branch -d experimental\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:268
#, fuzzy
#| msgid ""
#| "This command ensures that the changes in the experimental branch are "
#| "already in the current branch."
msgid ""
"This command ensures that the changes in the `experimental` branch are "
"already in the current branch."
msgstr ""
"このコマンドは、experimentalブランチでの変更がすでに現在のブランチにあること"
"を確認します。"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:271
#, fuzzy
#| msgid ""
#| "If you develop on a branch crazy-idea, then regret it, you can always "
#| "delete the branch with"
msgid ""
"If you develop on a branch `crazy-idea`, then regret it, you can always "
"delete the branch with"
msgstr ""
"あなたがブランチクレイジーアイデアで開発し、それを後悔しているなら、あなたは"
"いつでもブランチを(マージせずに)削除することができます"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:274
#, no-wrap
msgid "$ git branch -D crazy-idea\n"
msgstr "$ git branch -D crazy-idea\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:278
msgid ""
"Branches are cheap and easy, so this is a good way to try something out."
msgstr ""
"ブランチのコストは安くて、かつ操作は簡単なので、これは何かを一時的に試す良い"
"方法です。"

#. type: Title -
#: ../Documentation-sedout/gittutorial.txt:280
#, no-wrap
msgid "Using Git for collaboration"
msgstr "Using Git for collaboration"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:285
#, fuzzy
#| msgid ""
#| "Suppose that Alice has started a new project with a Git repository in /"
#| "home/alice/project, and that Bob, who has a home directory on the same "
#| "machine, wants to contribute."
msgid ""
"Suppose that Alice has started a new project with a Git repository in `/home/"
"alice/project`, and that Bob, who has a home directory on the same machine, "
"wants to contribute."
msgstr ""
"アリス(Alice)が /home/alice/project にGitリポジトリを使用して新しいプロジェク"
"トを開始し、同じマシンにホームディレクトリを持っているボブ(Bob)が貢献したいと"
"します。"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:287
msgid "Bob begins with:"
msgstr "ボブは以下のように始めます:"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:290
#, no-wrap
msgid "bob$ git clone /home/alice/project myrepo\n"
msgstr "bob$ git clone /home/alice/project myrepo\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:295
#, fuzzy
#| msgid ""
#| "This creates a new directory \"myrepo\" containing a clone of Alice's "
#| "repository.  The clone is on an equal footing with the original project, "
#| "possessing its own copy of the original project's history."
msgid ""
"This creates a new directory `myrepo` containing a clone of Alice's "
"repository.  The clone is on an equal footing with the original project, "
"possessing its own copy of the original project's history."
msgstr ""
"これにより、アリスのリポジトリのクローンを含む新しいディレクトリ「myrepo」が"
"作成されます。クローンは元のプロジェクトと同等の立場にあり、元のプロジェクト"
"の履歴の独自のコピーを所有しています。"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:297
msgid "Bob then makes some changes and commits them:"
msgstr "次に、ボブはいくつかの変更を加えてコミットします:"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:302
#, no-wrap
msgid ""
"(edit files)\n"
"bob$ git commit -a\n"
"(repeat as necessary)\n"
msgstr ""
"(edit files)\n"
"bob$ git commit -a\n"
"(repeat as necessary)\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:306
#, fuzzy
#| msgid ""
#| "When he's ready, he tells Alice to pull changes from the repository at /"
#| "home/bob/myrepo.  She does this with:"
msgid ""
"When he's ready, he tells Alice to pull changes from the repository at `/"
"home/bob/myrepo`.  She does this with:"
msgstr ""
"準備ができたら、ボブはアリスに /home/bob/myrepo のリポジトリから変更をプルす"
"るように指示します。アリスはこれを以下のように行います:"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:310
#, no-wrap
msgid ""
"alice$ cd /home/alice/project\n"
"alice$ git pull /home/bob/myrepo master\n"
msgstr ""
"alice$ cd /home/alice/project\n"
"alice$ git pull /home/bob/myrepo master\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:315
#, fuzzy
#| msgid ""
#| "This merges the changes from Bob's \"master\" branch into Alice's current "
#| "branch.  If Alice has made her own changes in the meantime, then she may "
#| "need to manually fix any conflicts."
msgid ""
"This merges the changes from Bob's `master` branch into Alice's current "
"branch.  If Alice has made her own changes in the meantime, then she may "
"need to manually fix any conflicts."
msgstr ""
"これにより、ボブの「master」ブランチからの変更がアリスの現在のブランチにマー"
"ジされます。その間にアリスが自分で変更を加えた場合は、競合を手動で修正する必"
"要があります。"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:318
#, fuzzy
#| msgid ""
#| "The \"pull\" command thus performs two operations: it fetches changes "
#| "from a remote branch, then merges them into the current branch."
msgid ""
"The `pull` command thus performs two operations: it fetches changes from a "
"remote branch, then merges them into the current branch."
msgstr ""
"つまり「pull」コマンドは2つの操作を実行します。リモートブランチから変更を"
"フェッチしてから、それらを現在のブランチにマージします。"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:326
#, fuzzy
#| msgid ""
#| "Note that in general, Alice would want her local changes committed before "
#| "initiating this \"pull\".  If Bob's work conflicts with what Alice did "
#| "since their histories forked, Alice will use her working tree and the "
#| "index to resolve conflicts, and existing local changes will interfere "
#| "with the conflict resolution process (Git will still perform the fetch "
#| "but will refuse to merge -- Alice will have to get rid of her local "
#| "changes in some way and pull again when this happens)."
msgid ""
"Note that in general, Alice would want her local changes committed before "
"initiating this `pull`.  If Bob's work conflicts with what Alice did since "
"their histories forked, Alice will use her working tree and the index to "
"resolve conflicts, and existing local changes will interfere with the "
"conflict resolution process (Git will still perform the fetch but will "
"refuse to merge -- Alice will have to get rid of her local changes in some "
"way and pull again when this happens)."
msgstr ""
"一般に、アリスが「プル」を開始する前に、アリス自身のローカルの変更をコミット"
"することを望んでいることに注意してください。ボブの作業が、履歴が分岐してから"
"アリスが行ったことと競合する場合、アリスは作業ツリーとインデックスを使用して"
"競合を解決し、既存のアリス自身のローカル変更は競合解決プロセスの障害となりま"
"す(Gitは引き続きフェッチを実行しますが、マージを拒否します。アリスは、何らか"
"の方法でアリス自身のローカルの変更を取り除き、再度プルする必要があります)。"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:331
#, fuzzy
#| msgid ""
#| "Alice can peek at what Bob did without merging first, using the \"fetch\" "
#| "command; this allows Alice to inspect what Bob did, using a special "
#| "symbol \"FETCH_HEAD\", in order to determine if he has anything worth "
#| "pulling, like this:"
msgid ""
"Alice can peek at what Bob did without merging first, using the `fetch` "
"command; this allows Alice to inspect what Bob did, using a special symbol "
"`FETCH_HEAD`, in order to determine if he has anything worth pulling, like "
"this:"
msgstr ""
"アリスは、「fetch」コマンドを使用して、マージせずにボブが行ったことを確認でき"
"ます。 これにより、アリスはボブが何をしたかを特別な記号「FETCH_HEAD」を使用し"
"て検査し、プルする価値があるかどうかを判断できます。"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:335
#, no-wrap
msgid ""
"alice$ git fetch /home/bob/myrepo master\n"
"alice$ git log -p HEAD..FETCH_HEAD\n"
msgstr ""
"alice$ git fetch /home/bob/myrepo master\n"
"alice$ git log -p HEAD..FETCH_HEAD\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:343
#, fuzzy
#| msgid ""
#| "This operation is safe even if Alice has uncommitted local changes.  The "
#| "range notation \"HEAD..FETCH_HEAD\" means \"show everything that is "
#| "reachable from the FETCH_HEAD but exclude anything that is reachable from "
#| "HEAD\".  Alice already knows everything that leads to her current state "
#| "(HEAD), and reviews what Bob has in his state (FETCH_HEAD) that she has "
#| "not seen with this command."
msgid ""
"This operation is safe even if Alice has uncommitted local changes.  The "
"range notation `HEAD..FETCH_HEAD` means \"show everything that is reachable "
"from the `FETCH_HEAD` but exclude anything that is reachable from `HEAD`\".  "
"Alice already knows everything that leads to her current state (`HEAD`), and "
"reviews what Bob has in his state (`FETCH_HEAD`) that she has not seen with "
"this command."
msgstr ""
"この操作は、アリスがアリス自身のローカルの変更をコミットしていない場合でも安"
"全です。 範囲表記 `HEAD..FETCH_HEAD` は、「FETCH_HEADから到達可能なすべてのも"
"のを表示し、HEADから到達可能なものはすべて除外する」ことを意味します。 このコ"
"マンドで、アリスは、現在の状態（HEAD）につながるすべてのことをすでに知ってい"
"るとして、ボブが持っている状態（FETCH_HEAD）で、かつ、アリスが持っていないモ"
"ノを確認します。"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:346
msgid ""
"If Alice wants to visualize what Bob did since their histories forked she "
"can issue the following command:"
msgstr ""
"アリスが、ボブとの履歴が分岐してから何をしたかを視覚化したい場合は、以下のコ"
"マンドを実行できます:"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:349
#, no-wrap
msgid "$ gitk HEAD..FETCH_HEAD\n"
msgstr "$ gitk HEAD..FETCH_HEAD\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:352
#, fuzzy
#| msgid ""
#| "This uses the same two-dot range notation we saw earlier with 'git log'."
msgid ""
"This uses the same two-dot range notation we saw earlier with `git log`."
msgstr "これは、前に「git log」で見たのと同じ2ドットの範囲表記を使用します。"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:355
msgid ""
"Alice may want to view what both of them did since they forked.  She can use "
"three-dot form instead of the two-dot form:"
msgstr ""
"アリスは、フォークして以来、アリスとボブの両方が何をしたかを見たいと思うかも"
"しれません。その場合、アリスはは2ドット形式の代わりに3ドット形式を使用できま"
"す:"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:358
#, no-wrap
msgid "$ gitk HEAD...FETCH_HEAD\n"
msgstr "$ gitk HEAD...FETCH_HEAD\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:362
msgid ""
"This means \"show everything that is reachable from either one, but exclude "
"anything that is reachable from both of them\"."
msgstr ""
"これは、「どちらか一方から到達可能なものはすべて表示し、両方から到達可能なも"
"のはすべて除外する」ことを意味します。"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:365
#, fuzzy
#| msgid ""
#| "Please note that these range notation can be used with both gitk and "
#| "\"git log\"."
msgid ""
"Please note that these range notation can be used with both `gitk` and `git "
"log`."
msgstr ""
"これらの範囲表記は、gitkと「git log」の両方で使用できることに注意してくださ"
"い。"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:371
#, fuzzy
#| msgid ""
#| "After inspecting what Bob did, if there is nothing urgent, Alice may "
#| "decide to continue working without pulling from Bob.  If Bob's history "
#| "does have something Alice would immediately need, Alice may choose to "
#| "stash her work-in-progress first, do a \"pull\", and then finally unstash "
#| "her work-in-progress on top of the resulting history."
msgid ""
"After inspecting what Bob did, if there is nothing urgent, Alice may decide "
"to continue working without pulling from Bob.  If Bob's history does have "
"something Alice would immediately need, Alice may choose to stash her work-"
"in-progress first, do a `pull`, and then finally unstash her work-in-"
"progress on top of the resulting history."
msgstr ""
"ボブが何をしたかを調べた後、緊急のことがなければ、アリスはボブからプルせずに"
"作業を続けることを決定するかもしれません。ボブの履歴にアリスがすぐに必要とす"
"るものがある場合、アリスは最初に進行中の作業をstashし、「プル」を実行し、最後"
"に結果の履歴に加えて進行中の作業をunstashすることを選択できます。"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:376
msgid ""
"When you are working in a small closely knit group, it is not unusual to "
"interact with the same repository over and over again.  By defining 'remote' "
"repository shorthand, you can make it easier:"
msgstr ""
"小さな緊密なグループで作業している場合、同じリポジトリを何度も操作することは"
"珍しくありません。リモートリポジトリの省略形を定義すると、作業は以下のように"
"簡単になります:"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:379
#, no-wrap
msgid "alice$ git remote add bob /home/bob/myrepo\n"
msgstr "alice$ git remote add bob /home/bob/myrepo\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:384
#, fuzzy
#| msgid ""
#| "With this, Alice can perform the first part of the \"pull\" operation "
#| "alone using the 'git fetch' command without merging them with her own "
#| "branch, using:"
msgid ""
"With this, Alice can perform the first part of the `pull` operation alone "
"using the `git fetch` command without merging them with her own branch, "
"using:"
msgstr ""
"これにより、アリスは「git fetch」コマンドを使用して、「pull」操作の最初の部分"
"を自分のブランチとマージせずに、以下のコマンドを使用して単独で実行できます:"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:387
#, no-wrap
msgid "alice$ git fetch bob\n"
msgstr "alice$ git fetch bob\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:393
#, fuzzy
#| msgid ""
#| "Unlike the longhand form, when Alice fetches from Bob using a remote "
#| "repository shorthand set up with 'git remote', what was fetched is stored "
#| "in a remote-tracking branch, in this case `bob/master`.  So after this:"
msgid ""
"Unlike the longhand form, when Alice fetches from Bob using a remote "
"repository shorthand set up with `git remote`, what was fetched is stored in "
"a remote-tracking branch, in this case `bob/master`.  So after this:"
msgstr ""
"直接書いた形式とは異なり、アリスが「git remote」で設定したリモートリポジト省"
"略形を使用してボブからフェッチする場合、フェッチされたものはリモート追跡ブラ"
"ンチ(この場合は「bob/master」）に保存されます。 したがって、以下のようにする"
"と:"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:396
#, no-wrap
msgid "alice$ git log -p master..bob/master\n"
msgstr "alice$ git log -p master..bob/master\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:400
#, fuzzy
#| msgid ""
#| "shows a list of all the changes that Bob made since he branched from "
#| "Alice's master branch."
msgid ""
"shows a list of all the changes that Bob made since he branched from Alice's "
"`master` branch."
msgstr ""
"ボブがアリスのmasterブランチから分岐してから行ったすべての変更のリストを示し"
"ます。"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:403
#, fuzzy
#| msgid ""
#| "After examining those changes, Alice could merge the changes into her "
#| "master branch:"
msgid ""
"After examining those changes, Alice could merge the changes into her "
"`master` branch:"
msgstr ""
"これらの変更を調べた後、アリスは変更をアリス自身のmasterブランチにマージでき"
"ます。"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:406
#, no-wrap
msgid "alice$ git merge bob/master\n"
msgstr "alice$ git merge bob/master\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:410
msgid ""
"This `merge` can also be done by 'pulling from her own remote-tracking "
"branch', like this:"
msgstr ""
"この「マージ」は、以下のように「アリス自身のリモート追跡ブランチからプルす"
"る」ことによっても実行できます:"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:413
#, no-wrap
msgid "alice$ git pull . remotes/bob/master\n"
msgstr "alice$ git pull . remotes/bob/master\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:417
msgid ""
"Note that git pull always merges into the current branch, regardless of what "
"else is given on the command line."
msgstr ""
"注意: コマンドラインで他に何が指定されているかに関係なく、 `git pull` は常に"
"現在のブランチにマージされることに注意してください。"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:419
msgid "Later, Bob can update his repo with Alice's latest changes using"
msgstr ""
"その後、ボブは以下を使用してアリスの最新の変更でボブのリポジトリを更新できま"
"す"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:422
#, no-wrap
msgid "bob$ git pull\n"
msgstr "bob$ git pull\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:428
msgid ""
"Note that he doesn't need to give the path to Alice's repository; when Bob "
"cloned Alice's repository, Git stored the location of her repository in the "
"repository configuration, and that location is used for pulls:"
msgstr ""
"注意: ボブはアリスのリポジトリへのパスを指定する必要がないことに注意してくだ"
"さい。ボブがアリスのリポジトリのクローンを作成したとき、Gitはアリスのリポジト"
"リの場所をリポジトリ構成に保存し、その場所がプルに使用されます。"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:432
#, no-wrap
msgid ""
"bob$ git config --get remote.origin.url\n"
"/home/alice/project\n"
msgstr ""
"bob$ git config --get remote.origin.url\n"
"/home/alice/project\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:437
#, fuzzy
#| msgid ""
#| "(The complete configuration created by 'git clone' is visible using `git "
#| "config -l`, and the linkgit:git-config[1] man page explains the meaning "
#| "of each option.)"
msgid ""
"(The complete configuration created by `git clone` is visible using `git "
"config -l`, and the linkgit:git-config[1] man page explains the meaning of "
"each option.)"
msgstr ""
"( 'git clone' によって作成される完全な構成は、 `git config -l` を使用して表示"
"でき、 linkgit:git-config[1] のマニュアルページで各オプションの意味を説明して"
"います。)"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:440
#, fuzzy
#| msgid ""
#| "Git also keeps a pristine copy of Alice's master branch under the name "
#| "\"origin/master\":"
msgid ""
"Git also keeps a pristine copy of Alice's `master` branch under the name "
"`origin/master`:"
msgstr ""
"Gitは、「origin/master」という名前でアリスのmasterブランチの当初の綺麗なコ"
"ピー(pristine copy)も保持しています。"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:444
#, no-wrap
msgid ""
"bob$ git branch -r\n"
"  origin/master\n"
msgstr ""
"bob$ git branch -r\n"
"  origin/master\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:448
msgid ""
"If Bob later decides to work from a different host, he can still perform "
"clones and pulls using the ssh protocol:"
msgstr ""
"ボブが後で別のホストから作業することを決定した場合でも、sshプロトコルを使用し"
"てクローンとプルを実行できます:"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:451
#, no-wrap
msgid "bob$ git clone alice.org:/home/alice/project myrepo\n"
msgstr "bob$ git clone alice.org:/home/alice/project myrepo\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:455
msgid ""
"Alternatively, Git has a native protocol, or can use http; see linkgit:git-"
"pull[1] for details."
msgstr ""
"代わりに、Gitのネイティブプロトコルや、httpを使用できます。詳細については、 "
"linkgit:git-pull[1] を参照してください。"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:459
msgid ""
"Git can also be used in a CVS-like mode, with a central repository that "
"various users push changes to; see linkgit:git-push[1] and linkgit:gitcvs-"
"migration[7]."
msgstr ""
"Gitは、さまざまなユーザーが変更をプッシュする中央リポジトリを使用して、CVSの"
"ようなモードで使用することもできます。 linkgit:git-push[1] と linkgit:gitcvs-"
"migration[7] を参照してください。"

#. type: Title -
#: ../Documentation-sedout/gittutorial.txt:461
#, no-wrap
msgid "Exploring history"
msgstr "Exploring history"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:467
#, fuzzy
#| msgid ""
#| "Git history is represented as a series of interrelated commits.  We have "
#| "already seen that the 'git log' command can list those commits.  Note "
#| "that first line of each git log entry also gives a name for the commit:"
msgid ""
"Git history is represented as a series of interrelated commits.  We have "
"already seen that the `git log` command can list those commits.  Note that "
"first line of each `git log` entry also gives a name for the commit:"
msgstr ""
"Gitの履歴は、相互に関連する一連のコミットとして表されます。 'git log' コマン"
"ドでこれらのコミットを一覧表示できることはすでに見てきました。注意: 各gitログ"
"エントリの最初の行には、コミットの名前も示されていることに注意してください:"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:473
#, no-wrap
msgid ""
"$ git log\n"
"commit c82a22c39cbc32576f64f5c6b3f24b99ea8149c7\n"
"Author: Junio C Hamano <junkio@cox.net>\n"
"Date:   Tue May 16 17:18:22 2006 -0700\n"
msgstr ""
"$ git log\n"
"commit c82a22c39cbc32576f64f5c6b3f24b99ea8149c7\n"
"Author: Junio C Hamano <junkio@cox.net>\n"
"Date:   Tue May 16 17:18:22 2006 -0700\n"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:475
#, no-wrap
msgid "    merge-base: Clarify the comments on post processing.\n"
msgstr "    merge-base: Clarify the comments on post processing.\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:479
#, fuzzy
#| msgid ""
#| "We can give this name to 'git show' to see the details about this commit."
msgid ""
"We can give this name to `git show` to see the details about this commit."
msgstr "このコミットの詳細を確認するには、この名前を「git show」に与えます。"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:482
#, no-wrap
msgid "$ git show c82a22c39cbc32576f64f5c6b3f24b99ea8149c7\n"
msgstr "$ git show c82a22c39cbc32576f64f5c6b3f24b99ea8149c7\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:486
msgid ""
"But there are other ways to refer to commits.  You can use any initial part "
"of the name that is long enough to uniquely identify the commit:"
msgstr ""
"ただし、コミットを参照する方法は他にもあります。あなたはコミットを一意に識別"
"するのに十分な長さであれば名前の最初の部分だけを指定できます:"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:492
#, no-wrap
msgid ""
"$ git show c82a22c39c\t# the first few characters of the name are\n"
"\t\t\t# usually enough\n"
"$ git show HEAD\t\t# the tip of the current branch\n"
"$ git show experimental\t# the tip of the \"experimental\" branch\n"
msgstr ""
"$ git show c82a22c39c\t# the first few characters of the name are\n"
"\t\t\t# usually enough\n"
"$ git show HEAD\t\t# the tip of the current branch\n"
"$ git show experimental\t# the tip of the \"experimental\" branch\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:496
msgid ""
"Every commit usually has one \"parent\" commit which points to the previous "
"state of the project:"
msgstr ""
"通常、あらゆるコミットには、プロジェクトの以前の状態を指す1つの「親」コミット"
"があります:"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:501
#, no-wrap
msgid ""
"$ git show HEAD^  # to see the parent of HEAD\n"
"$ git show HEAD^^ # to see the grandparent of HEAD\n"
"$ git show HEAD~4 # to see the great-great grandparent of HEAD\n"
msgstr ""
"$ git show HEAD^  # to see the parent of HEAD\n"
"$ git show HEAD^^ # to see the grandparent of HEAD\n"
"$ git show HEAD~4 # to see the great-great grandparent of HEAD\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:504
msgid "Note that merge commits may have more than one parent:"
msgstr ""
"注意: マージコミットには複数の親が含まれる場合があることに注意してください:"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:508
#, no-wrap
msgid ""
"$ git show HEAD^1 # show the first parent of HEAD (same as HEAD^)\n"
"$ git show HEAD^2 # show the second parent of HEAD\n"
msgstr ""
"$ git show HEAD^1 # show the first parent of HEAD (same as HEAD^)\n"
"$ git show HEAD^2 # show the second parent of HEAD\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:511
msgid "You can also give commits names of your own; after running"
msgstr "コミットに独自の名前を付けることもできます。"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:514
#, no-wrap
msgid "$ git tag v2.5 1b2e1d63ff\n"
msgstr "$ git tag v2.5 1b2e1d63ff\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:520
#, fuzzy
#| msgid ""
#| "you can refer to 1b2e1d63ff by the name \"v2.5\".  If you intend to share "
#| "this name with other people (for example, to identify a release version), "
#| "you should create a \"tag\" object, and perhaps sign it; see linkgit:git-"
#| "tag[1] for details."
msgid ""
"you can refer to `1b2e1d63ff` by the name `v2.5`.  If you intend to share "
"this name with other people (for example, to identify a release version), "
"you should create a \"tag\" object, and perhaps sign it; see linkgit:git-"
"tag[1] for details."
msgstr ""
"と実行すると、1b2e1d63ff は「v2.5」という名前で参照できます。この名前を他の人"
"と共有する場合(たとえば、リリースバージョンを識別するため)、「タグ」オブジェ"
"クトを作成し、おそらくそれに署名する必要があります。 詳細については linkgit:"
"git-tag[1] を参照してください。"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:523
msgid ""
"Any Git command that needs to know a commit can take any of these names.  "
"For example:"
msgstr ""
"コミットを知る必要のあるGitコマンドは、これらの名前のいずれかを指定することが"
"できます。 例えば:"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:530
#, no-wrap
msgid ""
"$ git diff v2.5 HEAD\t # compare the current HEAD to v2.5\n"
"$ git branch stable v2.5 # start a new branch named \"stable\" based\n"
"\t\t\t # at v2.5\n"
"$ git reset --hard HEAD^ # reset your current branch and working\n"
"\t\t\t # directory to its state at HEAD^\n"
msgstr ""
"$ git diff v2.5 HEAD\t # compare the current HEAD to v2.5\n"
"$ git branch stable v2.5 # start a new branch named \"stable\" based\n"
"\t\t\t # at v2.5\n"
"$ git reset --hard HEAD^ # reset your current branch and working\n"
"\t\t\t # directory to its state at HEAD^\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:540
#, fuzzy
#| msgid ""
#| "Be careful with that last command: in addition to losing any changes in "
#| "the working directory, it will also remove all later commits from this "
#| "branch.  If this branch is the only branch containing those commits, they "
#| "will be lost.  Also, don't use 'git reset' on a publicly-visible branch "
#| "that other developers pull from, as it will force needless merges on "
#| "other developers to clean up the history.  If you need to undo changes "
#| "that you have pushed, use 'git revert' instead."
msgid ""
"Be careful with that last command: in addition to losing any changes in the "
"working directory, it will also remove all later commits from this branch.  "
"If this branch is the only branch containing those commits, they will be "
"lost.  Also, don't use `git reset` on a publicly-visible branch that other "
"developers pull from, as it will force needless merges on other developers "
"to clean up the history.  If you need to undo changes that you have pushed, "
"use `git revert` instead."
msgstr ""
"最後のコマンドには注意してください。作業ディレクトリの変更が失われるだけでな"
"く、このブランチからそれ以降のすべてのコミットも削除されます。このブランチが"
"それらのコミットを含む唯一のブランチである場合、それらは失われます。また、他"
"の開発者がプルする公開ブランチで「git reset」を使用しないでください。他の開発"
"者に不必要なマージを強制して、履歴をクリーンアップしてしまうためです。プッ"
"シュした変更を元に戻す必要がある場合は、代わりに「git revert」を使用してくだ"
"さい。"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:543
#, fuzzy
#| msgid ""
#| "The 'git grep' command can search for strings in any version of your "
#| "project, so"
msgid ""
"The `git grep` command can search for strings in any version of your "
"project, so"
msgstr ""
"'git grep' コマンドは、プロジェクトの任意のバージョンで文字列を検索できます。"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:546
#, no-wrap
msgid "$ git grep \"hello\" v2.5\n"
msgstr "$ git grep \"hello\" v2.5\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:549
#, fuzzy
#| msgid "searches for all occurrences of \"hello\" in v2.5."
msgid "searches for all occurrences of \"hello\" in `v2.5`."
msgstr "これは、v2.5で出現するすべての「hello」を検索します。"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:552
#, fuzzy
#| msgid ""
#| "If you leave out the commit name, 'git grep' will search any of the files "
#| "it manages in your current directory.  So"
msgid ""
"If you leave out the commit name, `git grep` will search any of the files it "
"manages in your current directory.  So"
msgstr ""
"以下のようにコミット名を省略すると、「git grep」は現在のディレクトリで管理し"
"ているファイルを検索します。"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:555
#, no-wrap
msgid "$ git grep \"hello\"\n"
msgstr "$ git grep \"hello\"\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:558
msgid "is a quick way to search just the files that are tracked by Git."
msgstr ""
"これは、Gitによって追跡されているファイルだけですばやく検索する方法です。"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:561
#, fuzzy
#| msgid ""
#| "Many Git commands also take sets of commits, which can be specified in a "
#| "number of ways.  Here are some examples with 'git log':"
msgid ""
"Many Git commands also take sets of commits, which can be specified in a "
"number of ways.  Here are some examples with `git log`:"
msgstr ""
"多くのGitコマンドは、さまざまな方法で指定できる一連のコミットも指定できま"
"す。 'git log' の例を以下に示します:"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:568
#, no-wrap
msgid ""
"$ git log v2.5..v2.6            # commits between v2.5 and v2.6\n"
"$ git log v2.5..                # commits since v2.5\n"
"$ git log --since=\"2 weeks ago\" # commits from the last 2 weeks\n"
"$ git log v2.5.. Makefile       # commits since v2.5 which modify\n"
"\t\t\t\t# Makefile\n"
msgstr ""
"$ git log v2.5..v2.6            # commits between v2.5 and v2.6\n"
"$ git log v2.5..                # commits since v2.5\n"
"$ git log --since=\"2 weeks ago\" # commits from the last 2 weeks\n"
"$ git log v2.5.. Makefile       # commits since v2.5 which modify\n"
"\t\t\t\t# Makefile\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:574
#, fuzzy
#| msgid ""
#| "You can also give 'git log' a \"range\" of commits where the first is not "
#| "necessarily an ancestor of the second; for example, if the tips of the "
#| "branches \"stable\" and \"master\" diverged from a common commit some "
#| "time ago, then"
msgid ""
"You can also give `git log` a \"range\" of commits where the first is not "
"necessarily an ancestor of the second; for example, if the tips of the "
"branches `stable` and `master` diverged from a common commit some time ago, "
"then"
msgstr ""
"'git log'にコミットの「範囲」を与えることもできます。ここで、最初のコミットは"
"必ずしも2番目の祖先とは限りません。 たとえば、ブランチの「stable」と"
"「master」の先端が、しばらく前に共通のコミットから分岐した場合、"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:577
#, no-wrap
msgid "$ git log stable..master\n"
msgstr "$ git log stable..master\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:581
#, fuzzy
#| msgid ""
#| "will list commits made in the master branch but not in the stable branch, "
#| "while"
msgid ""
"will list commits made in the `master` branch but not in the stable branch, "
"while"
msgstr ""
"とすると、masterブランチで行われたコミットはリストされますが、stableブランチ"
"に対しては行われません。"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:584
#, no-wrap
msgid "$ git log master..stable\n"
msgstr "$ git log master..stable\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:588
#, fuzzy
#| msgid ""
#| "will show the list of commits made on the stable branch but not the "
#| "master branch."
msgid ""
"will show the list of commits made on the stable branch but not the `master` "
"branch."
msgstr ""
"とすると、stableブランチで行われたコミットのリストが表示されますが、masterブ"
"ランチに対しては表示されません。"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:593
#, fuzzy
#| msgid ""
#| "The 'git log' command has a weakness: it must present commits in a list.  "
#| "When the history has lines of development that diverged and then merged "
#| "back together, the order in which 'git log' presents those commits is "
#| "meaningless."
msgid ""
"The `git log` command has a weakness: it must present commits in a list.  "
"When the history has lines of development that diverged and then merged back "
"together, the order in which `git log` presents those commits is meaningless."
msgstr ""
"「git log」コマンドには弱点があります。コミットを一覧として表示する必要がある"
"ことです。履歴に分岐してからマージされた開発ラインがある場合、「git log」がそ"
"れらのコミットを提示する順序は無意味な順序になります。"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:597
#, fuzzy
#| msgid ""
#| "Most projects with multiple contributors (such as the Linux kernel, or "
#| "Git itself) have frequent merges, and 'gitk' does a better job of "
#| "visualizing their history.  For example,"
msgid ""
"Most projects with multiple contributors (such as the Linux kernel, or Git "
"itself) have frequent merges, and `gitk` does a better job of visualizing "
"their history.  For example,"
msgstr ""
"複数のコントリビューター（LinuxカーネルやGit自体など）を持つほとんどのプロ"
"ジェクトでは、頻繁にマージが行われ、「gitk」はそれらの履歴をより適切に視覚化"
"できます。"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:600
#, no-wrap
msgid "$ gitk --since=\"2 weeks ago\" drivers/\n"
msgstr "$ gitk --since=\"2 weeks ago\" drivers/\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:606
#, fuzzy
#| msgid ""
#| "allows you to browse any commits from the last 2 weeks of commits that "
#| "modified files under the \"drivers\" directory.  (Note: you can adjust "
#| "gitk's fonts by holding down the control key while pressing \"-\" or \"+"
#| "\".)"
msgid ""
"allows you to browse any commits from the last 2 weeks of commits that "
"modified files under the `drivers` directory.  (Note: you can adjust gitk's "
"fonts by holding down the control key while pressing \"-\" or \"+\".)"
msgstr ""
"これは、「drivers」ディレクトリの下のファイルを変更した過去2週間のコミットか"
"らのコミットを参照できます。 (注: Ctrlキーを押しながら「-」または「+」を押す"
"と、gitkのフォントサイズを調整できます。）"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:610
msgid ""
"Finally, most commands that take filenames will optionally allow you to "
"precede any filename by a commit, to specify a particular version of the "
"file:"
msgstr ""
"最後に、ファイル名を取得するほとんどのコマンドでは、オプションで、ファイルの"
"特定のバージョンを指定するために、任意のファイル名の前にコミットを付けること"
"ができます:"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:613
#, no-wrap
msgid "$ git diff v2.5:Makefile HEAD:Makefile.in\n"
msgstr "$ git diff v2.5:Makefile HEAD:Makefile.in\n"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:616
#, fuzzy
#| msgid "You can also use 'git show' to see any such file:"
msgid "You can also use `git show` to see any such file:"
msgstr "'git show' を使用して、任意のファイルを表示することもできます:"

#. type: delimited block -
#: ../Documentation-sedout/gittutorial.txt:619
#, no-wrap
msgid "$ git show v2.5:Makefile\n"
msgstr "$ git show v2.5:Makefile\n"

#. type: Title -
#: ../Documentation-sedout/gittutorial.txt:622
#, no-wrap
msgid "Next Steps"
msgstr "Next Steps"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:628
msgid ""
"This tutorial should be enough to perform basic distributed revision control "
"for your projects.  However, to fully understand the depth and power of Git "
"you need to understand two simple ideas on which it is based:"
msgstr ""
"このチュートリアルは、プロジェクトの基本的な分散リビジョン管理を実行するのに"
"十分なはずです。ただし、Gitの奥深さとパワーを完全に理解するには、Gitの基礎と"
"なる2つの簡単なアイデアを理解する必要があります:"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:632
msgid ""
"The object database is the rather elegant system used to store the history "
"of your project--files, directories, and commits."
msgstr ""
"オブジェクトデータベースは、あなたのプロジェクトの履歴（ファイル、ディレクト"
"リ、コミット）を格納するために使用されるかなり洗練されたシステムです。"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:636
msgid ""
"The index file is a cache of the state of a directory tree, used to create "
"commits, check out working directories, and hold the various trees involved "
"in a merge."
msgstr ""
"インデックスファイルは、ディレクトリツリーの状態のキャッシュであり、コミット"
"の作成、作業ディレクトリのチェックアウト、およびマージに関係するさまざまなツ"
"リーの保持に使用されます。"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:640
msgid ""
"Part two of this tutorial explains the object database, the index file, and "
"a few other odds and ends that you'll need to make the most of Git. You can "
"find it at linkgit:gittutorial-2[7]."
msgstr ""
"このチュートリアルのパート2では、オブジェクトデータベース、インデックスファイ"
"ル、およびGitを最大限に活用するために必要なその他のいくつかのガラクタについて"
"説明します。 linkgit: gittutorial-2[7] をご覧下さい。"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:643
msgid ""
"If you don't want to continue with that right away, a few other digressions "
"that may be interesting at this point are:"
msgstr ""
"すぐにそれを続けたくない場合は、この時点で興味深いかもしれない他のいくつかの"
"より道は以下のとおりです:"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:648
msgid ""
"linkgit:git-format-patch[1], linkgit:git-am[1]: These convert series of git "
"commits into emailed patches, and vice versa, useful for projects such as "
"the Linux kernel which rely heavily on emailed patches."
msgstr ""
"linkgit:git-format-patch[1] 、linkgit:git-am[1]: これらは一連のgitコミットを"
"電子メールで送信されたパッチに変換します。その逆も同様です。電子メールで送信"
"されたパッチに大きく依存するLinuxカーネルなどのプロジェクトで役立ちます。"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:655
#, fuzzy
#| msgid ""
#| "linkgit:git-bisect[1]: When there is a regression in your project, one "
#| "way to track down the bug is by searching through the history to find the "
#| "exact commit that's to blame.  Git bisect can help you perform a binary "
#| "search for that commit.  It is smart enough to perform a close-to-optimal "
#| "search even in the case of complex non-linear history with lots of merged "
#| "branches."
msgid ""
"linkgit:git-bisect[1]: When there is a regression in your project, one way "
"to track down the bug is by searching through the history to find the exact "
"commit that's to blame.  `git bisect` can help you perform a binary search "
"for that commit.  It is smart enough to perform a close-to-optimal search "
"even in the case of complex non-linear history with lots of merged branches."
msgstr ""
"linkgit:git-bisect[1]: プロジェクトにデグレがある場合、バグを追跡する1つの方"
"法は、履歴を検索して、原因となる正確なコミットを見つけることです。 Git bisect"
"は、そのコミットの二分木検索を実行するのに役立ちます。マージされたブランチが"
"多数ある複雑な非線形履歴の場合でも、最適に近い検索を実行するのに十分賢いで"
"す。"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:658
msgid "linkgit:gitworkflows[7]: Gives an overview of recommended workflows."
msgstr "linkgit:gitworkflows[7]: 推奨される作業の流れの概要を示します。"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:660
msgid "linkgit:giteveryday[7]: Everyday Git with 20 Commands Or So."
msgstr "linkgit:giteveryday[7]: 20コマンド程度で綴る日々のGit。"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:662
msgid "linkgit:gitcvs-migration[7]: Git for CVS users."
msgstr "linkgit:gitcvs-migration[7]: CVSユーザー向けのGit。"

#. type: Title -
#: ../Documentation-sedout/gittutorial.txt:664
#, no-wrap
msgid "SEE ALSO"
msgstr "SEE ALSO"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:673
msgid ""
"linkgit:gittutorial-2[7], linkgit:gitcvs-migration[7], linkgit:gitcore-"
"tutorial[7], linkgit:gitglossary[7], linkgit:git-help[1], linkgit:"
"gitworkflows[7], linkgit:giteveryday[7], link:user-manual.html[The Git "
"User's Manual]"
msgstr ""
"linkgit:gittutorial-2[7], linkgit:gitcvs-migration[7], linkgit:gitcore-"
"tutorial[7], linkgit:gitglossary[7], linkgit:git-help[1], linkgit:"
"gitworkflows[7], linkgit:giteveryday[7], link:user-manual.html[The Git "
"User's Manual]"

#. type: Title -
#: ../Documentation-sedout/gittutorial.txt:675
#, no-wrap
msgid "GIT"
msgstr "GIT"

#. type: Plain text
#: ../Documentation-sedout/gittutorial.txt:676
msgid "Part of the linkgit:git[1] suite"
msgstr "Part of the linkgit:git[1] suite"
