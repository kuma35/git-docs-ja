# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 0.0\n"
"POT-Creation-Date: 2021-11-04 05:36+0900\n"
"PO-Revision-Date: 2022-03-16 16:42+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:11
#, no-wrap
msgid ""
"Date: Fri, 19 Dec 2008 00:45:19 -0800\n"
"From: Linus Torvalds <torvalds@linux-foundation.org>, Junio C Hamano <gitster@pobox.com>\n"
"Subject: Re: Odd merge behaviour involving reverts\n"
"Abstract: Sometimes a branch that was already merged to the mainline\n"
" is later found to be faulty.  Linus and Junio give guidance on\n"
" recovering from such a premature merge and continuing development\n"
" after the offending branch is fixed.\n"
"Message-ID: <7vocz8a6zk.fsf@gitster.siamese.dyndns.org>\n"
"References: <alpine.LFD.2.00.0812181949450.14014@localhost.localdomain>\n"
"Content-type: text/asciidoc\n"
msgstr ""
"Date: Fri, 19 Dec 2008 00:45:19 -0800\n"
"From: Linus Torvalds <torvalds@linux-foundation.org>, Junio C Hamano <gitster@pobox.com>\n"
"Subject: Re: Odd merge behaviour involving reverts\n"
"Abstract: すでに本線にマージされているブランチに、\n"
" 後で障害があることが判明する場合があります。\n"
" LinusとJunioは、このような時期尚早なマージからの回復と、\n"
" 問題のあるブランチが修正された後の継続的な開発についての手引きを提供します。 \n"
"Message-ID: <7vocz8a6zk.fsf@gitster.siamese.dyndns.org>\n"
"References: <alpine.LFD.2.00.0812181949450.14014@localhost.localdomain>\n"
"Content-type: text/asciidoc\n"

#. type: Title =
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:13
#, no-wrap
msgid "How to revert a faulty merge"
msgstr "How to revert a faulty merge"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:16
msgid "Alan <alan@clueserver.org> said:"
msgstr "Alan <alan@clueserver.org> said:"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:22
#, no-wrap
msgid ""
"    I have a master branch.  We have a branch off of that that some\n"
"    developers are doing work on.  They claim it is ready. We merge it\n"
"    into the master branch.  It breaks something so we revert the merge.\n"
"    They make changes to the code.  they get it to a point where they say\n"
"    it is ok and we merge again.\n"
msgstr ""
"    masterブランチがあります。一部の開発者が取り組んでいるブランチがあります。\n"
"    彼らはそれが準備ができていると主張します。我々はそれをmasterブランチにマージします。\n"
"    そしたら何かが壊れたので、我々はマージを元に戻します。\n"
"    彼らはコードに変更を加えます。\n"
"    彼らが大丈夫だと言うところまでそれを取得し、そして我々は再びマージします。\n"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:26
#, no-wrap
msgid ""
"    When examined, we find that code changes made before the revert are\n"
"    not in the master branch, but code changes after are in the master\n"
"    branch.\n"
msgstr ""
"    調べてみると、\n"
"    戻す前に行われたコード変更はmasterブランチにはありませんが、\n"
"    その後のコード変更はmasteerブランチにあります。\n"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:28
msgid "and asked for help recovering from this situation."
msgstr "そして、この状況から回復するための助けを求めています。"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:31
msgid ""
"The history immediately after the \"revert of the merge\" would look like "
"this:"
msgstr "「マージの戻し」直後の履歴は以下のようになります:"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:35
#, no-wrap
msgid ""
" ---o---o---o---M---x---x---W\n"
"               /\n"
"       ---A---B\n"
msgstr ""
" ---o---o---o---M---x---x---W\n"
"               /\n"
"       ---A---B\n"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:41
msgid ""
"where A and B are on the side development that was not so good, M is the "
"merge that brings these premature changes into the mainline, x are changes "
"unrelated to what the side branch did and already made on the mainline, and "
"W is the \"revert of the merge M\" (doesn't W look M upside down?).  IOW, `"
"\"diff W^..W\"` is similar to `\"diff -R M^..M\"`."
msgstr "ここで、AとBはあまり良くなかった傍流開発であり、Mはこれらの時期尚早な変更を本線にもたらすマージであり、xは傍流ブランチが行ったものとは無関係の変更であり、戻し作業以前にすでに本線で行われた変更です。Wは「マージMを元に戻した変更」(Mを逆さまにするとWに見えるので、ここではWを使いました)。 ええっとつまり、 `diff W^..W` は `diff -R M^..M` に似ています。"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:43
msgid "Such a \"revert\" of a merge can be made with:"
msgstr "マージのこのような「戻し」(revert)は、以下の方法で行うことができます:"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:45
#, no-wrap
msgid "    $ git revert -m 1 M\n"
msgstr "    $ git revert -m 1 M\n"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:48
msgid ""
"After the developers of the side branch fix their mistakes, the history may "
"look like this:"
msgstr "傍流ブランチの開発者が間違いを修正した後、履歴は以下のようになります:"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:52
#, no-wrap
msgid ""
" ---o---o---o---M---x---x---W---x\n"
"               /\n"
"       ---A---B-------------------C---D\n"
msgstr ""
" ---o---o---o---M---x---x---W---x\n"
"               /\n"
"       ---A---B-------------------C---D\n"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:55
msgid ""
"where C and D are to fix what was broken in A and B, and you may already "
"have some other changes on the mainline after W."
msgstr "ここで、CとDは、AとBで壊れていたものを修正するためのものであり、そして、本線ではWの後に他の変更がすでに行われている可能性があります。"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:59
msgid ""
"If you merge the updated side branch (with D at its tip), none of the "
"changes made in A or B will be in the result, because they were reverted by "
"W.  That is what Alan saw."
msgstr "更新された傍流ブランチ(先端はD)を本線にマージすると、(Mのマージは)Wにて元に戻されたため、AまたはBで行われた変更は結果に反映されません。これがAlanが見たものです。"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:61
msgid "Linus explains the situation:"
msgstr "Linusが状況を説明します:"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:66
#, no-wrap
msgid ""
"    Reverting a regular commit just effectively undoes what that commit\n"
"    did, and is fairly straightforward. But reverting a merge commit also\n"
"    undoes the _data_ that the commit changed, but it does absolutely\n"
"    nothing to the effects on _history_ that the merge had.\n"
msgstr ""
"    通常のコミットを元に戻す(revert)と、\n"
"    そのコミットが行ったことを効果的に元に戻すことができ、かなり簡単です。\n"
"    ただし、マージコミットを元に戻すと、コミットが変更した「データ」も元に戻されますが、\n"
"    マージが行った「履歴への影響」にはまったく何の効果も及ぼしません。\n"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:71
#, no-wrap
msgid ""
"    So the merge will still exist, and it will still be seen as joining\n"
"    the two branches together, and future merges will see that merge as\n"
"    the last shared state - and the revert that reverted the merge brought\n"
"    in will not affect that at all.\n"
msgstr ""
"    したがって、そのマージは引き続き存在し、\n"
"    2つのブランチを結合していると見なされ、\n"
"    その後のマージでは、そのマージが最後の共有状態と見なされます。\n"
"    そして、マージを元に戻した戻しは、それにまったく影響しません。\n"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:75
#, no-wrap
msgid ""
"    So a \"revert\" undoes the data changes, but it's very much _not_ an\n"
"    \"undo\" in the sense that it doesn't undo the effects of a commit on\n"
"    the repository history.\n"
msgstr ""
"    したがって、「revert」はデータの変更を元に戻しますが、\n"
"    リポジトリ履歴に対するコミットの影響を元に戻さないという意味では、\n"
"    「undo」ではありません。\n"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:79
#, no-wrap
msgid ""
"    So if you think of \"revert\" as \"undo\", then you're going to always\n"
"    miss this part of reverts. Yes, it undoes the data, but no, it doesn't\n"
"    undo history.\n"
msgstr ""
"     したがって、あなたが「revert」を「undo」と考えてしまうと、常に\n"
"     revertのこの部分を見逃します。はい、データを元に戻しますが、\n"
"     しかし、履歴は元に戻しません。\n"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:82
msgid ""
"In such a situation, you would want to first revert the previous revert, "
"which would make the history look like this:"
msgstr "このような状況では、最初に以前の戻しを戻すことをお勧めします。これにより、履歴は以下のようになります:"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:86
#, no-wrap
msgid ""
" ---o---o---o---M---x---x---W---x---Y\n"
"               /\n"
"       ---A---B-------------------C---D\n"
msgstr ""
" ---o---o---o---M---x---x---W---x---Y\n"
"               /\n"
"       ---A---B-------------------C---D\n"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:89
msgid ""
"where Y is the revert of W.  Such a \"revert of the revert\" can be done "
"with:"
msgstr "ここで、YはWの戻しです。このような「戻しの戻し」(revert of the revert)は、以下の方法で実行できます:"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:91
#, no-wrap
msgid "    $ git revert W\n"
msgstr "    $ git revert W\n"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:94
msgid ""
"This history would (ignoring possible conflicts between what W and W..Y "
"changed) be equivalent to not having W or Y at all in the history:"
msgstr "この履歴は(WとW..Yが変更したものの間で発生する可能性のある競合を無視すると)、履歴にWまたはYがまったくないことと同等です:"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:98
#, no-wrap
msgid ""
" ---o---o---o---M---x---x-------x----\n"
"               /\n"
"       ---A---B-------------------C---D\n"
msgstr ""
" ---o---o---o---M---x---x-------x----\n"
"               /\n"
"       ---A---B-------------------C---D\n"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:101
msgid ""
"and merging the side branch again will not have conflict arising from an "
"earlier revert and revert of the revert."
msgstr "そして傍流ブランチを再度マージしても、以前の戻しと戻しの戻しから生じる競合は発生しません。"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:105
#, no-wrap
msgid ""
" ---o---o---o---M---x---x-------x-------*\n"
"               /                       /\n"
"       ---A---B-------------------C---D\n"
msgstr ""
" ---o---o---o---M---x---x-------x-------*\n"
"               /                       /\n"
"       ---A---B-------------------C---D\n"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:108
msgid ""
"Of course the changes made in C and D still can conflict with what was done "
"by any of the x, but that is just a normal merge conflict."
msgstr "もちろん、CとDで行われた変更は、xのいずれかによって行われた変更と競合する可能性がありますが、これは通常のマージの競合です。"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:112
msgid ""
"On the other hand, if the developers of the side branch discarded their "
"faulty A and B, and redone the changes on top of the updated mainline after "
"the revert, the history would have looked like this:"
msgstr "一方、傍流ブランチの開発者が障害のあるAとBを破棄し、元に戻した後に更新された本線に加えて変更をやり直した場合、履歴は以下のようになります:"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:116
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:134
#, no-wrap
msgid ""
" ---o---o---o---M---x---x---W---x---x\n"
"               /                 \\\n"
"       ---A---B                   A'--B'--C'\n"
msgstr ""
" ---o---o---o---M---x---x---W---x---x\n"
"               /                 \\\n"
"       ---A---B                   A'--B'--C'\n"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:118
msgid "If you reverted the revert in such a case as in the previous example:"
msgstr "前の例のような場合に戻しを戻した場合:"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:122
#, no-wrap
msgid ""
" ---o---o---o---M---x---x---W---x---x---Y---*\n"
"               /                 \\         /\n"
"       ---A---B                   A'--B'--C'\n"
msgstr ""
" ---o---o---o---M---x---x---W---x---x---Y---*\n"
"               /                 \\         /\n"
"       ---A---B                   A'--B'--C'\n"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:130
msgid ""
"where Y is the revert of W, A' and B' are rerolled A and B, and there may "
"also be a further fix-up C' on the side branch.  `\"diff Y^..Y\"` is similar "
"to `\"diff -R W^..W\"` (which in turn means it is similar to `\"diff M^..M"
"\"`), and `\"diff A'^..C'\"` by definition would be similar but different "
"from that, because it is a rerolled series of the earlier change.  There "
"will be a lot of overlapping changes that result in conflicts.  So do not do "
"\"revert of revert\" blindly without thinking.."
msgstr "ここで、YはWの戻しであり、A' と B' は、 A と B に巻き直しされ、傍流ブランチにはさらに修正 C' がある場合もあります。 `diff Y^..Y` は `diff -R W^..W` に似ており(つまり、 `diff M^..M` に似ており)、 `diff A'^..C'` は、以前の変更の巻き直したリーズであるため、定義上は似ていますが、それとは異なります。競合する結果を生む重複する変更がたくさんあることでしょう。つまり、その、何がいいたいのかというと、何も考えずに盲目的に「戻しの戻し」をしてはいけないのです…"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:138
msgid ""
"In the history with rebased side branch, W (and M) are behind the merge base "
"of the updated branch and the tip of the mainline, and they should merge "
"without the past faulty merge and its revert getting in the way."
msgstr "リベースされた傍流ブランチの履歴では、 W(およびM)は、更新されたブランチのマージベースと本線の先端の後ろにあり、過去の誤ったマージとその「戻し」が邪魔しないようマージする必要があります。"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:141
msgid ""
"To recap, these are two very different scenarios, and they want two very "
"different resolution strategies:"
msgstr "要約すると、これらは2つの非常に異なるシナリオであり、2つの非常に異なる解決戦略が必要です:"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:144
msgid ""
"If the faulty side branch was fixed by adding corrections on top, then doing "
"a revert of the previous revert would be the right thing to do."
msgstr "障害のある傍流ブランチが先頭に修正を追加することによって修正された場合、以前の戻しの戻しを行うことは正しいことです。"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:151
msgid ""
"If the faulty side branch whose effects were discarded by an earlier revert "
"of a merge was rebuilt from scratch (i.e. rebasing and fixing, as you seem "
"to have interpreted), then re-merging the result without doing anything else "
"fancy would be the right thing to do.  (See the ADDENDUM below for how to "
"rebuild a branch from scratch without changing its original branching-off "
"point.)"
msgstr "以前のマージの戻しによって影響が破棄された、障害のある傍流ブランチが、最初から再構築された場合(つまり、あなたが解釈したように、リベースと修正した場合)は、他に何もせずに結果を再マージするのが正しいことです。(元の分岐点を変更せずに分岐を最初から再構築する方法については、以下の ADDENDUM を参照してください。）"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:154
msgid ""
"However, there are things to keep in mind when reverting a merge (and "
"reverting such a revert)."
msgstr "けれども、マージの戻し(そして、そのような戻し)の場合は、注意が必要なことがあります。"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:159
msgid ""
"For example, think about what reverting a merge (and then reverting the "
"revert) does to bisectability. Ignore the fact that the revert of a revert "
"is undoing it - just think of it as a \"single commit that does a lot\".  "
"Because that is what it does."
msgstr "たとえば、マージの戻し(そしてそれから、戻しの戻し)が二分性(bisectability)でどうなるかを考えてみましょう。戻しの戻しがそれを元に戻すという事実を無視してください。つまり「多くのことをする単一のコミット」と考えてください。なぜならそれがやることはそれだからです。"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:165
msgid ""
"When you have a problem you are chasing down, and you hit a \"revert this "
"merge\", what you're hitting is essentially a single commit that contains "
"all the changes (but obviously in reverse) of all the commits that got "
"merged. So it's debugging hell, because now you don't have lots of small "
"changes that you can try to pinpoint which _part_ of it changes."
msgstr "あなたが追いかけている問題があり、「マージの戻し」がヒットした場合、ヒットしているのは基本的に、マージされたすべてのコミットのすべての変更(しかし明らかに逆)を含む単一のコミットです。つまり、デバッグ地獄です。これは、変更のどの部分を特定できるかを示す小さな変更があまりないためです。"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:171
msgid ""
"But does it all work? Sure it does. You can revert a merge, and from a "
"purely technical angle, Git did it very naturally and had no real troubles. "
"It just considered it a change from \"state before merge\" to \"state after "
"merge\", and that was it. Nothing complicated, nothing odd, nothing really "
"dangerous. Git will do it without even thinking about it."
msgstr "でも、全部うまくいくのでしょうか？ もちろんうまくいきます。純粋に技術的な観点から言えば、Gitは非常に自然にそれを行い、何の問題もありません。「マージ前の状態」から「マージ後の状態」への変更とみなすだけで、ただそれだけです。複雑でもなく、奇妙でもなく、本当に危険でもありません。Gitは何も考えずにそれを実行します。"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:175
msgid ""
"So from a technical angle, there's nothing wrong with reverting a merge, but "
"from a workflow angle it's something that you generally should try to avoid."
msgstr "したがって、技術的な観点からは、マージを元に戻すことには何の問題もありませんが、作業フローの観点からは、一般的には回避する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:180
msgid ""
"If at all possible, for example, if you find a problem that got merged into "
"the main tree, rather than revert the merge, try _really_ hard to bisect the "
"problem down into the branch you merged, and just fix it, or try to revert "
"the individual commit that caused it."
msgstr "可能であれば、たとえば、メインツリーにマージされた問題を見つけた場合は、マージを元に戻すのではなく、問題のbisectを頑張ってブランチに括りだしてください。そしてそれを修正するか、それを引き起こした個々のコミットを元に戻してみてください。"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:186
msgid ""
"Yes, it's more complex, and no, it's not always going to work (sometimes the "
"answer is: \"oops, I really shouldn't have merged it, because it wasn't "
"ready yet, and I really need to undo _all_ of the merge\"). So then you "
"really should revert the merge, but when you want to re-do the merge, you "
"now need to do it by reverting the revert."
msgstr "ええもちろん、それはより複雑で、上記が常にうまくいくとは限りません。(「おっとスマソ。私はまだ準備ができていなかった。私は本当はそれをマージするべきではなかった、だｋら私は本当にすべてのマージを元に戻す必要がある」とかあるある)  したがって、実際にマージを元に戻す必要がありますが、マージをやり直したい場合は、元に戻すことによってそれを行う必要があります。"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:188
msgid "ADDENDUM"
msgstr "ADDENDUM"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:191
msgid ""
"Sometimes you have to rewrite one of a topic branch's commits *and* you "
"can't change the topic's branching-off point.  Consider the following "
"situation:"
msgstr "あなたはトピックブランチのコミットの1つを書き直さなければならず、かつ、トピックの分岐点を変更できない場合があります。以下のような状況です:"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:195
#, no-wrap
msgid ""
" P---o---o---M---x---x---W---x\n"
"  \\         /\n"
"   A---B---C\n"
msgstr ""
" P---o---o---M---x---x---W---x\n"
"  \\         /\n"
"   A---B---C\n"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:200
msgid ""
"where commit W reverted commit M because it turned out that commit B was "
"wrong and needs to be rewritten, but you need the rewritten topic to still "
"branch from commit P (perhaps P is a branching-off point for yet another "
"branch, and you want be able to merge the topic into both branches)."
msgstr "ここで、コミットBが間違っていて、書き直す必要があることが判明したため、コミットWでコミットMを元に戻しましたが、コミットPから分岐するには、書き直されたトピックが必要です(おそらく、Pはさらに別のブランチの分岐点であり、そして、あなたはトピックを両方のブランチにマージできるようにしたい)。"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:205
msgid ""
"The natural thing to do in this case is to checkout the A-B-C branch and use "
"\"rebase -i P\" to change commit B.  However this does not rewrite commit A, "
"because \"rebase -i\" by default fast-forwards over any initial commits "
"selected with the \"pick\" command.  So you end up with this:"
msgstr "この場合の自然なことは、A-B-C ブランチをチェックアウトし、 `rebase -i P` を使用してコミットBを変更することです。ただし、 `rebase -i` はデフォルトで pick コマンドで選択された最初のコミットを早送り(fast-forwards)するため、コミットAを書き換えません。結局、以下のようになります:"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:211
#, no-wrap
msgid ""
" P---o---o---M---x---x---W---x\n"
"  \\         /\n"
"   A---B---C   <-- old branch\n"
"    \\\n"
"     B'---C'   <-- naively rewritten branch\n"
msgstr ""
" P---o---o---M---x---x---W---x\n"
"  \\         /\n"
"   A---B---C   <-- old branch\n"
"    \\\n"
"     B'---C'   <-- 素朴に書き直したブランチ\n"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:216
msgid ""
"To merge A-B'-C' into the mainline branch you would still have to first "
"revert commit W in order to pick up the changes in A, but then it's likely "
"that the changes in B' will conflict with the original B changes re-"
"introduced by the reversion of W."
msgstr "A-B'-C' を本線ブランチにマージするには、Aの変更を取得するために、最初にコミットWを元に戻す必要がありますが、 B' の変更は、Wの戻しによって再導入された元のBの変更と競合する可能性があります。"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:219
msgid ""
"However, you can avoid these problems if you recreate the entire branch, "
"including commit A:"
msgstr "ただし、コミットAを含むブランチ全体を再作成すると、これらの問題を回避できます:"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:225
#, no-wrap
msgid ""
"   A'---B'---C'  <-- completely rewritten branch\n"
"  /\n"
" P---o---o---M---x---x---W---x\n"
"  \\         /\n"
"   A---B---C\n"
msgstr ""
"   A'---B'---C'  <-- 完全に書き直したブランチ\n"
"  /\n"
" P---o---o---M---x---x---W---x\n"
"  \\         /\n"
"   A---B---C\n"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:228
msgid ""
"You can merge A'-B'-C' into the mainline branch without worrying about first "
"reverting W.  Mainline's history would look like this:"
msgstr "最初にWを元に戻すことを心配せずに、 A'-B'-C' を本線ブランチにマージできます。本線の履歴は以下のようになります:"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:234
#, no-wrap
msgid ""
"   A'---B'---C'------------------\n"
"  /                              \\\n"
" P---o---o---M---x---x---W---x---M2\n"
"  \\         /\n"
"   A---B---C\n"
msgstr ""
"   A'---B'---C'------------------\n"
"  /                              \\\n"
" P---o---o---M---x---x---W---x---M2\n"
"  \\         /\n"
"   A---B---C\n"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:238
msgid ""
"But if you don't actually need to change commit A, then you need some way to "
"recreate it as a new commit with the same changes in it.  The rebase "
"command's --no-ff option provides a way to do this:"
msgstr "ただし、あなたがコミットAを実際に変更する必要がない場合は、同じ変更を加えた新しいコミットとして再作成する方法が必要です。 rebaseコマンドの `--no-ff` オプションは、これを行う方法を提供します:"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:240
#, no-wrap
msgid "    $ git rebase [-i] --no-ff P\n"
msgstr "    $ git rebase [-i] --no-ff P\n"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:245
msgid ""
"The --no-ff option creates a new branch A'-B'-C' with all-new commits (all "
"the SHA IDs will be different) even if in the interactive case you only "
"actually modify commit B.  You can then merge this new branch directly into "
"the mainline branch and be sure you'll get all of the branch's changes."
msgstr "`--no-ff` オプションは、対話的に実際にコミットBを変更するだけの場合でも、まったく新しいコミットで新しいブランチ A'-B'-C' を作成します(SHA IDは全て異なります)。その後、マージできます。あなたはそれから、この新しいブランチを本線ブランチに直接接続し、ブランチのすべての変更を確実に取得できるようにします。"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:248
msgid ""
"You can also use --no-ff in cases where you just add extra commits to the "
"topic to fix it up.  Let's revisit the situation discussed at the start of "
"this howto:"
msgstr "あんたがトピックにコミットを追加して修正する場合、 `--no-ff` を使用することもできます。この文書の冒頭で説明した状況をもう一度見てみましょう:"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:252
#, no-wrap
msgid ""
" P---o---o---M---x---x---W---x\n"
"  \\         /\n"
"   A---B---C----------------D---E   <-- fixed-up topic branch\n"
msgstr ""
" P---o---o---M---x---x---W---x\n"
"  \\         /\n"
"   A---B---C----------------D---E   <-- 修正されたトピックブランチ\n"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:254
msgid "At this point, you can use --no-ff to recreate the topic branch:"
msgstr "この時点で、あなたは `--no-ff｀ を使用してトピックブランチを再作成できます:"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:257
#, no-wrap
msgid ""
"    $ git checkout E\n"
"    $ git rebase --no-ff P\n"
msgstr ""
"    $ git checkout E\n"
"    $ git rebase --no-ff P\n"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:259
msgid "yielding"
msgstr "これは以下のようになります"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:265
#, no-wrap
msgid ""
"   A'---B'---C'------------D'---E'  <-- recreated topic branch\n"
"  /\n"
" P---o---o---M---x---x---W---x\n"
"  \\         /\n"
"   A---B---C----------------D---E\n"
msgstr ""
"   A'---B'---C'------------D'---E'  <-- 再作成したトピックブランチ\n"
"  /\n"
" P---o---o---M---x---x---W---x\n"
"  \\         /\n"
"   A---B---C----------------D---E\n"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:268
msgid ""
"You can merge the recreated branch into the mainline without reverting "
"commit W, and mainline's history will look like this:"
msgstr "あなたはコミットWを元に戻さずに、再作成されたブランチを本線にマージできます。本線の履歴は以下のようになります:"

#. type: Plain text
#: ../Documentation-sedout/howto/revert-a-faulty-merge.txt:273
#, no-wrap
msgid ""
"   A'---B'---C'------------D'---E'\n"
"  /                              \\\n"
" P---o---o---M---x---x---W---x---M2\n"
"  \\         /\n"
"   A---B---C\n"
msgstr ""
"   A'---B'---C'------------D'---E'\n"
"  /                              \\\n"
" P---o---o---M---x---x---W---x---M2\n"
"  \\         /\n"
"   A---B---C\n"
