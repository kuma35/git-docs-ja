# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-10-02 01:07+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:11
#, no-wrap
msgid ""
"Date: Fri, 19 Dec 2008 00:45:19 -0800\n"
"From: Linus Torvalds <torvalds@linux-foundation.org>, Junio C Hamano "
"<gitster@pobox.com>\n"
"Subject: Re: Odd merge behaviour involving reverts\n"
"Abstract: Sometimes a branch that was already merged to the mainline\n"
" is later found to be faulty.  Linus and Junio give guidance on\n"
" recovering from such a premature merge and continuing development\n"
" after the offending branch is fixed.\n"
"Message-ID: <7vocz8a6zk.fsf@gitster.siamese.dyndns.org>\n"
"References: <alpine.LFD.2.00.0812181949450.14014@localhost.localdomain>\n"
"Content-type: text/asciidoc\n"
msgstr ""

#. type: Title =
#: ../Documentation/howto/revert-a-faulty-merge.txt:13
#, no-wrap
msgid "How to revert a faulty merge"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:16
msgid "Alan <alan@clueserver.org> said:"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:22
#, no-wrap
msgid ""
"    I have a master branch.  We have a branch off of that that some\n"
"    developers are doing work on.  They claim it is ready. We merge it\n"
"    into the master branch.  It breaks something so we revert the merge.\n"
"    They make changes to the code.  they get it to a point where they say\n"
"    it is ok and we merge again.\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:26
#, no-wrap
msgid ""
"    When examined, we find that code changes made before the revert are\n"
"    not in the master branch, but code changes after are in the master\n"
"    branch.\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:28
msgid "and asked for help recovering from this situation."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:31
msgid ""
"The history immediately after the \"revert of the merge\" would look like "
"this:"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:35
#, no-wrap
msgid ""
" ---o---o---o---M---x---x---W\n"
"               /\n"
"       ---A---B\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:41
msgid ""
"where A and B are on the side development that was not so good, M is the "
"merge that brings these premature changes into the mainline, x are changes "
"unrelated to what the side branch did and already made on the mainline, and "
"W is the \"revert of the merge M\" (doesn't W look M upside down?).  IOW, "
"`\"diff W^..W\"` is similar to `\"diff -R M^..M\"`."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:43
msgid "Such a \"revert\" of a merge can be made with:"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:45
#, no-wrap
msgid "    $ git revert -m 1 M\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:48
msgid ""
"After the developers of the side branch fix their mistakes, the history may "
"look like this:"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:52
#, no-wrap
msgid ""
" ---o---o---o---M---x---x---W---x\n"
"               /\n"
"       ---A---B-------------------C---D\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:55
msgid ""
"where C and D are to fix what was broken in A and B, and you may already "
"have some other changes on the mainline after W."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:59
msgid ""
"If you merge the updated side branch (with D at its tip), none of the "
"changes made in A or B will be in the result, because they were reverted by "
"W.  That is what Alan saw."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:61
msgid "Linus explains the situation:"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:66
#, no-wrap
msgid ""
"    Reverting a regular commit just effectively undoes what that commit\n"
"    did, and is fairly straightforward. But reverting a merge commit also\n"
"    undoes the _data_ that the commit changed, but it does absolutely\n"
"    nothing to the effects on _history_ that the merge had.\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:71
#, no-wrap
msgid ""
"    So the merge will still exist, and it will still be seen as joining\n"
"    the two branches together, and future merges will see that merge as\n"
"    the last shared state - and the revert that reverted the merge brought\n"
"    in will not affect that at all.\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:75
#, no-wrap
msgid ""
"    So a \"revert\" undoes the data changes, but it's very much _not_ an\n"
"    \"undo\" in the sense that it doesn't undo the effects of a commit on\n"
"    the repository history.\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:79
#, no-wrap
msgid ""
"    So if you think of \"revert\" as \"undo\", then you're going to always\n"
"    miss this part of reverts. Yes, it undoes the data, but no, it doesn't\n"
"    undo history.\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:82
msgid ""
"In such a situation, you would want to first revert the previous revert, "
"which would make the history look like this:"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:86
#, no-wrap
msgid ""
" ---o---o---o---M---x---x---W---x---Y\n"
"               /\n"
"       ---A---B-------------------C---D\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:89
msgid ""
"where Y is the revert of W.  Such a \"revert of the revert\" can be done "
"with:"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:91
#, no-wrap
msgid "    $ git revert W\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:94
msgid ""
"This history would (ignoring possible conflicts between what W and W..Y "
"changed) be equivalent to not having W or Y at all in the history:"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:98
#, no-wrap
msgid ""
" ---o---o---o---M---x---x-------x----\n"
"               /\n"
"       ---A---B-------------------C---D\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:101
msgid ""
"and merging the side branch again will not have conflict arising from an "
"earlier revert and revert of the revert."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:105
#, no-wrap
msgid ""
" ---o---o---o---M---x---x-------x-------*\n"
"               /                       /\n"
"       ---A---B-------------------C---D\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:108
msgid ""
"Of course the changes made in C and D still can conflict with what was done "
"by any of the x, but that is just a normal merge conflict."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:112
msgid ""
"On the other hand, if the developers of the side branch discarded their "
"faulty A and B, and redone the changes on top of the updated mainline after "
"the revert, the history would have looked like this:"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:116 ../Documentation/howto/revert-a-faulty-merge.txt:134
#, no-wrap
msgid ""
" ---o---o---o---M---x---x---W---x---x\n"
"               /                 \\\n"
"       ---A---B                   A'--B'--C'\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:118
msgid "If you reverted the revert in such a case as in the previous example:"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:122
#, no-wrap
msgid ""
" ---o---o---o---M---x---x---W---x---x---Y---*\n"
"               /                 \\         /\n"
"       ---A---B                   A'--B'--C'\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:130
msgid ""
"where Y is the revert of W, A' and B' are rerolled A and B, and there may "
"also be a further fix-up C' on the side branch.  `\"diff Y^..Y\"` is similar "
"to `\"diff -R W^..W\"` (which in turn means it is similar to `\"diff "
"M^..M\"`), and `\"diff A'^..C'\"` by definition would be similar but "
"different from that, because it is a rerolled series of the earlier change.  "
"There will be a lot of overlapping changes that result in conflicts.  So do "
"not do \"revert of revert\" blindly without thinking.."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:138
msgid ""
"In the history with rebased side branch, W (and M) are behind the merge base "
"of the updated branch and the tip of the mainline, and they should merge "
"without the past faulty merge and its revert getting in the way."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:141
msgid ""
"To recap, these are two very different scenarios, and they want two very "
"different resolution strategies:"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:144
msgid ""
"If the faulty side branch was fixed by adding corrections on top, then doing "
"a revert of the previous revert would be the right thing to do."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:151
msgid ""
"If the faulty side branch whose effects were discarded by an earlier revert "
"of a merge was rebuilt from scratch (i.e. rebasing and fixing, as you seem "
"to have interpreted), then re-merging the result without doing anything else "
"fancy would be the right thing to do.  (See the ADDENDUM below for how to "
"rebuild a branch from scratch without changing its original branching-off "
"point.)"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:154
msgid ""
"However, there are things to keep in mind when reverting a merge (and "
"reverting such a revert)."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:159
msgid ""
"For example, think about what reverting a merge (and then reverting the "
"revert) does to bisectability. Ignore the fact that the revert of a revert "
"is undoing it - just think of it as a \"single commit that does a lot\".  "
"Because that is what it does."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:165
msgid ""
"When you have a problem you are chasing down, and you hit a \"revert this "
"merge\", what you're hitting is essentially a single commit that contains "
"all the changes (but obviously in reverse) of all the commits that got "
"merged. So it's debugging hell, because now you don't have lots of small "
"changes that you can try to pinpoint which _part_ of it changes."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:171
msgid ""
"But does it all work? Sure it does. You can revert a merge, and from a "
"purely technical angle, Git did it very naturally and had no real "
"troubles. It just considered it a change from \"state before merge\" to "
"\"state after merge\", and that was it. Nothing complicated, nothing odd, "
"nothing really dangerous. Git will do it without even thinking about it."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:175
msgid ""
"So from a technical angle, there's nothing wrong with reverting a merge, but "
"from a workflow angle it's something that you generally should try to avoid."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:180
msgid ""
"If at all possible, for example, if you find a problem that got merged into "
"the main tree, rather than revert the merge, try _really_ hard to bisect the "
"problem down into the branch you merged, and just fix it, or try to revert "
"the individual commit that caused it."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:186
msgid ""
"Yes, it's more complex, and no, it's not always going to work (sometimes the "
"answer is: \"oops, I really shouldn't have merged it, because it wasn't "
"ready yet, and I really need to undo _all_ of the merge\"). So then you "
"really should revert the merge, but when you want to re-do the merge, you "
"now need to do it by reverting the revert."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:188
msgid "ADDENDUM"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:191
msgid ""
"Sometimes you have to rewrite one of a topic branch's commits *and* you "
"can't change the topic's branching-off point.  Consider the following "
"situation:"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:195
#, no-wrap
msgid ""
" P---o---o---M---x---x---W---x\n"
"  \\         /\n"
"   A---B---C\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:200
msgid ""
"where commit W reverted commit M because it turned out that commit B was "
"wrong and needs to be rewritten, but you need the rewritten topic to still "
"branch from commit P (perhaps P is a branching-off point for yet another "
"branch, and you want be able to merge the topic into both branches)."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:205
msgid ""
"The natural thing to do in this case is to checkout the A-B-C branch and use "
"\"rebase -i P\" to change commit B.  However this does not rewrite commit A, "
"because \"rebase -i\" by default fast-forwards over any initial commits "
"selected with the \"pick\" command.  So you end up with this:"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:211
#, no-wrap
msgid ""
" P---o---o---M---x---x---W---x\n"
"  \\         /\n"
"   A---B---C   <-- old branch\n"
"    \\\n"
"     B'---C'   <-- naively rewritten branch\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:216
msgid ""
"To merge A-B'-C' into the mainline branch you would still have to first "
"revert commit W in order to pick up the changes in A, but then it's likely "
"that the changes in B' will conflict with the original B changes "
"re-introduced by the reversion of W."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:219
msgid ""
"However, you can avoid these problems if you recreate the entire branch, "
"including commit A:"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:225
#, no-wrap
msgid ""
"   A'---B'---C'  <-- completely rewritten branch\n"
"  /\n"
" P---o---o---M---x---x---W---x\n"
"  \\         /\n"
"   A---B---C\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:228
msgid ""
"You can merge A'-B'-C' into the mainline branch without worrying about first "
"reverting W.  Mainline's history would look like this:"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:234
#, no-wrap
msgid ""
"   A'---B'---C'------------------\n"
"  /                              \\\n"
" P---o---o---M---x---x---W---x---M2\n"
"  \\         /\n"
"   A---B---C\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:238
msgid ""
"But if you don't actually need to change commit A, then you need some way to "
"recreate it as a new commit with the same changes in it.  The rebase "
"command's --no-ff option provides a way to do this:"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:240
#, no-wrap
msgid "    $ git rebase [-i] --no-ff P\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:245
msgid ""
"The --no-ff option creates a new branch A'-B'-C' with all-new commits (all "
"the SHA IDs will be different) even if in the interactive case you only "
"actually modify commit B.  You can then merge this new branch directly into "
"the mainline branch and be sure you'll get all of the branch's changes."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:248
msgid ""
"You can also use --no-ff in cases where you just add extra commits to the "
"topic to fix it up.  Let's revisit the situation discussed at the start of "
"this howto:"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:252
#, no-wrap
msgid ""
" P---o---o---M---x---x---W---x\n"
"  \\         /\n"
"   A---B---C----------------D---E   <-- fixed-up topic branch\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:254
msgid "At this point, you can use --no-ff to recreate the topic branch:"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:257
#, no-wrap
msgid ""
"    $ git checkout E\n"
"    $ git rebase --no-ff P\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:259
msgid "yielding"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:265
#, no-wrap
msgid ""
"   A'---B'---C'------------D'---E'  <-- recreated topic branch\n"
"  /\n"
" P---o---o---M---x---x---W---x\n"
"  \\         /\n"
"   A---B---C----------------D---E\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:268
msgid ""
"You can merge the recreated branch into the mainline without reverting "
"commit W, and mainline's history will look like this:"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/revert-a-faulty-merge.txt:273
#, no-wrap
msgid ""
"   A'---B'---C'------------D'---E'\n"
"  /                              \\\n"
" P---o---o---M---x---x---W---x---M2\n"
"  \\         /\n"
"   A---B---C\n"
msgstr ""
