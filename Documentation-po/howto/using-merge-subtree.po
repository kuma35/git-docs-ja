# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-10-02 01:07+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: ../Documentation/howto/using-merge-subtree.txt:10
#, no-wrap
msgid ""
"Date: Sat, 5 Jan 2008 20:17:40 -0500\n"
"From: Sean <seanlkml@sympatico.ca>\n"
"To: Miklos Vajna <vmiklos@frugalware.org>\n"
"Cc: git@vger.kernel.org\n"
"Subject: how to use git merge -s subtree?\n"
"Abstract: In this article, Sean demonstrates how one can use the subtree "
"merge\n"
" strategy.\n"
"Content-type: text/asciidoc\n"
"Message-ID: <BAYC1-PASMTP12374B54BA370A1E1C6E78AE4E0@CEZ.ICE>\n"
msgstr ""

#. type: Title =
#: ../Documentation/howto/using-merge-subtree.txt:12
#, no-wrap
msgid "How to use the subtree merge strategy"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/using-merge-subtree.txt:17
msgid ""
"There are situations where you want to include contents in your project from "
"an independently developed project. You can just pull from the other project "
"as long as there are no conflicting paths."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/using-merge-subtree.txt:23
msgid ""
"The problematic case is when there are conflicting files. Potential "
"candidates are Makefiles and other standard filenames. You could merge these "
"files but probably you do not want to.  A better solution for this problem "
"can be to merge the project as its own subdirectory. This is not supported "
"by the 'recursive' merge strategy, so just pulling won't work."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/using-merge-subtree.txt:26
msgid ""
"What you want is the 'subtree' merge strategy, which helps you in such a "
"situation."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/using-merge-subtree.txt:31
msgid ""
"In this example, let's say you have the repository at `/path/to/B` (but it "
"can be a URL as well, if you want). You want to merge the 'master' branch of "
"that repository to the `dir-B` subdirectory in your current branch."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/using-merge-subtree.txt:33
msgid "Here is the command sequence you need:"
msgstr ""

#. type: delimited block -
#: ../Documentation/howto/using-merge-subtree.txt:39
#, no-wrap
msgid ""
"$ git remote add -f Bproject /path/to/B <1>\n"
"$ git merge -s ours --no-commit --allow-unrelated-histories Bproject/master "
"<2>\n"
"$ git read-tree --prefix=dir-B/ -u Bproject/master <3>\n"
"$ git commit -m \"Merge B project as our subdirectory\" <4>\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/howto/using-merge-subtree.txt:41
#, no-wrap
msgid "$ git pull -s subtree Bproject master <5>\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/using-merge-subtree.txt:43
msgid "name the other project \"Bproject\", and fetch."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/using-merge-subtree.txt:44
msgid "prepare for the later step to record the result as a merge."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/using-merge-subtree.txt:45
msgid "read \"master\" branch of Bproject to the subdirectory \"dir-B\"."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/using-merge-subtree.txt:46
msgid "record the merge result."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/using-merge-subtree.txt:47
msgid "maintain the result with subsequent merges using \"subtree\""
msgstr ""

#. type: Plain text
#: ../Documentation/howto/using-merge-subtree.txt:50
msgid ""
"The first four commands are used for the initial merge, while the last one "
"is to merge updates from 'B project'."
msgstr ""

#. type: Title -
#: ../Documentation/howto/using-merge-subtree.txt:52
#, no-wrap
msgid "Comparing 'subtree' merge with submodules"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/using-merge-subtree.txt:58
msgid ""
"The benefit of using subtree merge is that it requires less administrative "
"burden from the users of your repository. It works with older (before Git "
"v1.5.2) clients and you have the code right after clone."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/using-merge-subtree.txt:61
msgid ""
"However if you use submodules then you can choose not to transfer the "
"submodule objects. This may be a problem with the subtree merge."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/using-merge-subtree.txt:64
msgid ""
"Also, in case you make changes to the other project, it is easier to submit "
"changes if you just use submodules."
msgstr ""

#. type: Title -
#: ../Documentation/howto/using-merge-subtree.txt:66
#, no-wrap
msgid "Additional tips"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/using-merge-subtree.txt:72
msgid ""
"If you made changes to the other project in your repository, they may want "
"to merge from your project. This is possible using subtree -- it can shift "
"up the paths in your tree and then they can merge only the relevant parts of "
"your tree."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/using-merge-subtree.txt:75
msgid ""
"Please note that if the other project merges from you, then it will connect "
"its history to yours, which can be something they don't want to."
msgstr ""
