# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-10-02 01:07+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:9
#, no-wrap
msgid ""
"From: Junio C Hamano <gitster@pobox.com>\n"
"Date: Wed, 21 Nov 2007 16:32:55 -0800\n"
"Subject: Addendum to \"MaintNotes\"\n"
"Abstract: Imagine that Git development is racing along as usual, when our "
"friendly\n"
" neighborhood maintainer is struck down by a wayward bus. Out of the\n"
" hordes of suckers (loyal developers), you have been tricked (chosen) to\n"
" step up as the new maintainer. This howto will show you \"how to\" do it.\n"
"Content-type: text/asciidoc\n"
msgstr ""

#. type: Title =
#: ../Documentation/howto/maintain-git.txt:11
#, no-wrap
msgid "How to maintain Git"
msgstr ""

#. type: Title -
#: ../Documentation/howto/maintain-git.txt:14
#, no-wrap
msgid "Activities"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:17
msgid "The maintainer's Git time is spent on three activities."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:19
msgid "Communication (45%)"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:23
#, no-wrap
msgid ""
"Mailing list discussions on general design, fielding user\n"
"questions, diagnosing bug reports; reviewing, commenting on,\n"
"suggesting alternatives to, and rejecting patches.\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:25
msgid "Integration (50%)"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:30
#, no-wrap
msgid ""
"Applying new patches from the contributors while spotting and\n"
"correcting minor mistakes, shuffling the integration and\n"
"testing branches, pushing the results out, cutting the\n"
"releases, and making announcements.\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:32
msgid "Own development (5%)"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:34
#, no-wrap
msgid "Scratching my own itch and sending proposed patch series out.\n"
msgstr ""

#. type: Title -
#: ../Documentation/howto/maintain-git.txt:36
#, no-wrap
msgid "The Policy"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:41
msgid ""
"The policy on Integration is informally mentioned in \"A Note from the "
"maintainer\" message, which is periodically posted to this mailing list "
"after each feature release is made."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:45
msgid ""
"Feature releases are numbered as vX.Y.0 and are meant to contain bugfixes "
"and enhancements in any area, including functionality, performance and "
"usability, without regression."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:48
msgid ""
"One release cycle for a feature release is expected to last for eight to ten "
"weeks."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:52
msgid ""
"Maintenance releases are numbered as vX.Y.Z and are meant to contain only "
"bugfixes for the corresponding vX.Y.0 feature release and earlier "
"maintenance releases vX.Y.W (W < Z)."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:56
msgid ""
"'master' branch is used to prepare for the next feature release. In other "
"words, at some point, the tip of 'master' branch is tagged with vX.Y.0."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:62
msgid ""
"'maint' branch is used to prepare for the next maintenance release.  After "
"the feature release vX.Y.0 is made, the tip of 'maint' branch is set to that "
"release, and bugfixes will accumulate on the branch, and at some point, the "
"tip of the branch is tagged with vX.Y.1, vX.Y.2, and so on."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:68
msgid ""
"'next' branch is used to publish changes (both enhancements and fixes) that "
"(1) have worthwhile goal, (2) are in a fairly good shape suitable for "
"everyday use, (3) but have not yet demonstrated to be regression free.  New "
"changes are tested in 'next' before merged to 'master'."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:71
msgid ""
"'seen' branch is used to publish other proposed changes that do not yet pass "
"the criteria set for 'next'."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:77
msgid ""
"The tips of 'master' and 'maint' branches will not be rewound to allow "
"people to build their own customization on top of them.  Early in a new "
"development cycle, 'next' is rewound to the tip of 'master' once, but "
"otherwise it will not be rewound until the end of the cycle."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:81
msgid ""
"Usually 'master' contains all of 'maint' and 'next' contains all of "
"'master'.  'seen' contains all the topics merged to 'next', but is rebuilt "
"directly on 'master'."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:84
msgid ""
"The tip of 'master' is meant to be more stable than any tagged releases, and "
"the users are encouraged to follow it."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:88
msgid ""
"The 'next' branch is where new action takes place, and the users are "
"encouraged to test it so that regressions and bugs are found before new "
"topics are merged to 'master'."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:92
msgid ""
"Note that before v1.9.0 release, the version numbers used to be structured "
"slightly differently.  vX.Y.Z were feature releases while vX.Y.Z.W were "
"maintenance releases for vX.Y.Z."
msgstr ""

#. type: Title -
#: ../Documentation/howto/maintain-git.txt:95
#, no-wrap
msgid "A Typical Git Day"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:99
msgid ""
"A typical Git day for the maintainer implements the above policy by doing "
"the following:"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:105
msgid ""
"Scan mailing list.  Respond with review comments, suggestions etc.  Kibitz.  "
"Collect potentially usable patches from the mailing list.  Patches about a "
"single topic go to one mailbox (I read my mail in Gnus, and type \\C-o to "
"save/append messages in files in mbox format)."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:110
msgid ""
"Write his own patches to address issues raised on the list but nobody has "
"stepped up solving.  Send it out just like other contributors do, and pick "
"them up just like patches from other contributors (see above)."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:115
msgid ""
"Review the patches in the saved mailboxes.  Edit proposed log message for "
"typofixes and clarifications, and add Acks collected from the list.  Edit "
"patch to incorporate \"Oops, that should have been like this\" fixes from "
"the discussion."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:118
msgid "Classify the collected patches and handle 'master' and 'maint' updates:"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:121
msgid ""
"Obviously correct fixes that pertain to the tip of 'maint' are directly "
"applied to 'maint'."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:124
msgid ""
"Obviously correct fixes that pertain to the tip of 'master' are directly "
"applied to 'master'."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:126
msgid "Other topics are not handled in this step."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:128
#, no-wrap
msgid "This step is done with \"git am\".\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:132
#, no-wrap
msgid ""
"$ git checkout master    ;# or \"git checkout maint\"\n"
"$ git am -sc3 mailbox\n"
"$ make test\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:135
msgid "In practice, almost no patch directly goes to 'master' or 'maint'."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:140
msgid ""
"Review the last issue of \"What's cooking\" message, review the topics ready "
"for merging (topic->master and topic->maint).  Use \"Meta/cook -w\" script "
"(where Meta/ contains a checkout of the 'todo' branch) to aid this step."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:143
#, no-wrap
msgid ""
"And perform the merge.  Use \"Meta/Reintegrate -e\" script (see\n"
"later) to aid this step.\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:145
#, no-wrap
msgid "$ Meta/cook -w last-issue-of-whats-cooking.mbox\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:151
#, no-wrap
msgid ""
"$ git checkout master    ;# or \"git checkout maint\"\n"
"$ echo ai/topic | Meta/Reintegrate -e ;# \"git merge ai/topic\"\n"
"$ git log -p ORIG_HEAD.. ;# final review\n"
"$ git diff ORIG_HEAD..   ;# final review\n"
"$ make test              ;# final review\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:153
msgid "Handle the remaining patches:"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:163
msgid ""
"Anything unobvious that is applicable to 'master' (in other words, does not "
"depend on anything that is still in 'next' and not in 'master') is applied "
"to a new topic branch that is forked from the tip of 'master' (or the last "
"feature release, which is a bit older than 'master').  This includes both "
"enhancements and unobvious fixes to 'master'.  A topic branch is named as "
"ai/topic where \"ai\" is two-letter string named after author's initial and "
"\"topic\" is a descriptive name of the topic (in other words, \"what's the "
"series is about\")."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:168
msgid ""
"An unobvious fix meant for 'maint' is applied to a new topic branch that is "
"forked from the tip of 'maint' (or the oldest and still relevant maintenance "
"branch).  The topic may be named as ai/maint-topic."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:171
msgid "Changes that pertain to an existing topic are applied to the branch, but:"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:173
msgid "obviously correct ones are applied first;"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:175
msgid "questionable ones are discarded or applied to near the tip;"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:178
msgid ""
"Replacement patches to an existing topic are accepted only for commits not "
"in 'next'."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:180
#, no-wrap
msgid "The initial round is done with:\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:183
#, no-wrap
msgid ""
"$ git checkout ai/topic ;# or \"git checkout -b ai/topic master\"\n"
"$ git am -sc3 mailbox\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:185
msgid "and replacing an existing topic with subsequent round is done with:"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:188
#, no-wrap
msgid ""
"$ git checkout master...ai/topic ;# try to reapply to the same base\n"
"$ git am -sc3 mailbox\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:190
msgid "to prepare the new round on a detached HEAD, and then"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:193
#, no-wrap
msgid ""
"$ git range-diff @{-1}...\n"
"$ git diff @{-1}\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:195
msgid "to double check what changed since the last round, and finally"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:197
#, no-wrap
msgid "$ git checkout -B @{-1}\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:200
msgid ""
"to conclude (the last step is why a topic already in 'next' is not replaced "
"but updated incrementally)."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:212
msgid ""
"Whether it is the initial round or a subsequent round, the topic may not "
"build even in isolation, or may break the build when merged to integration "
"branches due to bugs.  There may already be obvious and trivial improvements "
"suggested on the list.  The maintainer often adds an extra commit, with "
"\"SQUASH???\" in its title, to fix things up, before publishing the "
"integration branches to make it usable by other developers for testing.  "
"These changes are what the maintainer is not 100% committed to (trivial "
"typofixes etc. are often squashed directly into the patches that need "
"fixing, without being applied as a separate \"SQUASH???\" commit), so that "
"they can be removed easily as needed."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:215
msgid "Merge maint to master as needed:"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:219
#, no-wrap
msgid ""
"$ git checkout master\n"
"$ git merge maint\n"
"$ make test\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:221
msgid "Merge master to next as needed:"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:225
#, no-wrap
msgid ""
"$ git checkout next\n"
"$ git merge master\n"
"$ make test\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:230
msgid ""
"Review the last issue of \"What's cooking\" again and see if topics that are "
"ready to be merged to 'next' are still in good shape (e.g. has there any new "
"issue identified on the list with the series?)"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:233
msgid ""
"Prepare 'jch' branch, which is used to represent somewhere between 'master' "
"and 'seen' and often is slightly ahead of 'next'."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:235
#, no-wrap
msgid "$ Meta/Reintegrate master..seen >Meta/redo-jch.sh\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:241
msgid ""
"The result is a script that lists topics to be merged in order to rebuild "
"'seen' as the input to Meta/Reintegrate script.  Remove later topics that "
"should not be in 'jch' yet.  Add a line that consists of '### match next' "
"before the name of the first topic in the output that should be in 'jch' but "
"not in 'next' yet."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:245
msgid ""
"Now we are ready to start merging topics to 'next'.  For each branch whose "
"tip is not merged to 'next', one of three things can happen:"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:247
msgid "The commits are all next-worthy; merge the topic to next;"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:249
msgid ""
"The new parts are of mixed quality, but earlier ones are next-worthy; merge "
"the early parts to next;"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:250
msgid "Nothing is next-worthy; do not do anything."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:257
#, no-wrap
msgid ""
"This step is aided with Meta/redo-jch.sh script created earlier.\n"
"If a topic that was already in 'next' gained a patch, the script\n"
"would list it as \"ai/topic~1\".  To include the new patch to the\n"
"updated 'next', drop the \"~1\" part; to keep it excluded, do not\n"
"touch the line.  If a topic that was not in 'next' should be\n"
"merged to 'next', add it at the end of the list.  Then:\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:260
#, no-wrap
msgid ""
"$ git checkout -B jch master\n"
"$ Meta/redo-jch.sh -c1\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:264
msgid ""
"to rebuild the 'jch' branch from scratch.  \"-c1\" tells the script to stop "
"merging at the first line that begins with '###' (i.e. the \"### match "
"next\" line you added earlier)."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:271
msgid ""
"At this point, build-test the result.  It may reveal semantic conflicts "
"(e.g. a topic renamed a variable, another added a new reference to the "
"variable under its old name), in which case prepare an appropriate merge-fix "
"first (see appendix), and rebuild the 'jch' branch from scratch, starting at "
"the tip of 'master'."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:273
msgid "Then do the same to 'next'"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:276
#, no-wrap
msgid ""
"$ git checkout next\n"
"$ sh Meta/redo-jch.sh -c1 -e\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:283
msgid ""
"The \"-e\" option allows the merge message that comes from the history of "
"the topic and the comments in the \"What's cooking\" to be edited.  The "
"resulting tree should match 'jch' as the same set of topics are merged on "
"'master'; otherwise there is a mismerge.  Investigate why and do not proceed "
"until the mismerge is found and rectified."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:285
#, no-wrap
msgid "$ git diff jch next\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:287
msgid "When all is well, clean up the redo-jch.sh script with"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:289
#, no-wrap
msgid "$ sh Meta/redo-jch.sh -u\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:293
msgid ""
"This removes topics listed in the script that have already been merged to "
"'master'.  This may lose '### match next' marker; add it again to the "
"appropriate place when it happens."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:295
msgid "Rebuild 'seen'."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:297
#, no-wrap
msgid "$ Meta/Reintegrate master..seen >Meta/redo-seen.sh\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:300
msgid ""
"Edit the result by adding new topics that are not still in 'seen' in the "
"script.  Then"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:303
#, no-wrap
msgid ""
"$ git checkout -B seen jch\n"
"$ sh Meta/redo-seen.sh\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:305
msgid "When all is well, clean up the redo-seen.sh script with"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:307
#, no-wrap
msgid "$ sh Meta/redo-seen.sh -u\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:309
msgid "Double check by running"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:311
#, no-wrap
msgid "$ git branch --no-merged seen\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:313
msgid "to see there is no unexpected leftover topics."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:318
msgid ""
"At this point, build-test the result for semantic conflicts, and if there "
"are, prepare an appropriate merge-fix first (see appendix), and rebuild the "
"'seen' branch from scratch, starting at the tip of 'jch'."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:321
msgid ""
"Update \"What's cooking\" message to review the updates to existing topics, "
"newly added topics and graduated topics."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:323
#, no-wrap
msgid "This step is helped with Meta/cook script.\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:325
#, no-wrap
msgid "$ Meta/cook\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:335
msgid ""
"This script inspects the history between master..seen, finds tips of topic "
"branches, compares what it found with the current contents in "
"Meta/whats-cooking.txt, and updates that file.  Topics not listed in the "
"file but are found in master..seen are added to the \"New topics\" section, "
"topics listed in the file that are no longer found in master..seen are moved "
"to the \"Graduated to master\" section, and topics whose commits changed "
"their states (e.g. used to be only in 'seen', now merged to 'next') are "
"updated with change markers \"<<\" and \">>\"."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:341
msgid ""
"Look for lines enclosed in \"<<\" and \">>\"; they hold contents from old "
"file that are replaced by this integration round.  After verifying them, "
"remove the old part.  Review the description for each topic and update its "
"doneness and plan as needed.  To review the updated plan, run"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:343
#, no-wrap
msgid "$ Meta/cook -w\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:347
msgid ""
"which will pick up comments given to the topics, such as \"Will merge to "
"'next'\", etc. (see Meta/cook script to learn what kind of phrases are "
"supported)."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:350
msgid ""
"Compile, test and install all four (five) integration branches; Meta/Dothem "
"script may aid this step."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:353
msgid ""
"Format documentation if the 'master' branch was updated; Meta/dodoc.sh "
"script may aid this step."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:356
msgid ""
"Push the integration branches out to public places; Meta/pushall script may "
"aid this step."
msgstr ""

#. type: Title -
#: ../Documentation/howto/maintain-git.txt:358
#, no-wrap
msgid "Observations"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:361
msgid "Some observations to be made."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:365
msgid ""
"Each topic is tested individually, and also together with other topics "
"cooking first in 'seen', then in 'jch' and then in 'next'.  Until it "
"matures, no part of it is merged to 'master'."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:370
msgid ""
"A topic already in 'next' can get fixes while still in 'next'.  Such a topic "
"will have many merges to 'next' (in other words, \"git log --first-parent "
"next\" will show many \"Merge branch 'ai/topic' to next\" for the same "
"topic."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:374
msgid ""
"An unobvious fix for 'maint' is cooked in 'next' and then merged to 'master' "
"to make extra sure it is Ok and then merged to 'maint'."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:379
msgid ""
"Even when 'next' becomes empty (in other words, all topics prove stable and "
"are merged to 'master' and \"git diff master next\" shows empty), it has "
"tons of merge commits that will never be in 'master'."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:383
msgid ""
"In principle, \"git log --first-parent master..next\" should show nothing "
"but merges (in practice, there are fixup commits and reverts that are not "
"merges)."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:387
msgid ""
"Commits near the tip of a topic branch that are not in 'next' are fair game "
"to be discarded, replaced or rewritten.  Commits already merged to 'next' "
"will not be."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:391
msgid ""
"Being in the 'next' branch is not a guarantee for a topic to be included in "
"the next feature release.  Being in the 'master' branch typically is."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:399
msgid ""
"Due to the nature of \"SQUASH???\" fix-ups, if the original author agrees "
"with the suggested changes, it is OK to squash them to appropriate patches "
"in the next round (when the suggested change is small enough, the author "
"should not even bother with \"Helped-by\").  It is also OK to drop them from "
"the next round when the original author does not agree with the suggestion, "
"but the author is expected to say why somewhere in the discussion."
msgstr ""

#. type: Title -
#: ../Documentation/howto/maintain-git.txt:402
#, no-wrap
msgid "Appendix"
msgstr ""

#. type: Title ~
#: ../Documentation/howto/maintain-git.txt:405
#, no-wrap
msgid "Preparing a \"merge-fix\""
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:413
msgid ""
"A merge of two topics may not textually conflict but still have conflict at "
"the semantic level. A classic example is for one topic to rename an variable "
"and all its uses, while another topic adds a new use of the variable under "
"its old name. When these two topics are merged together, the reference to "
"the variable newly added by the latter topic will still use the old name in "
"the result."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:419
msgid ""
"The Meta/Reintegrate script that is used by redo-jch and redo-seen scripts "
"implements a crude but usable way to work this issue around.  When the "
"script merges branch $X, it checks if \"refs/merge-fix/$X\" exists, and if "
"so, the effect of it is squashed into the result of the mechanical merge.  "
"In other words,"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:421
#, no-wrap
msgid "     $ echo $X | Meta/Reintegrate\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:423
msgid "is roughly equivalent to this sequence:"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:428
#, no-wrap
msgid ""
"     $ git merge --rerere-autoupdate $X\n"
"     $ git commit\n"
"     $ git cherry-pick -n refs/merge-fix/$X\n"
"     $ git commit --amend\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:432
msgid ""
"The goal of this \"prepare a merge-fix\" step is to come up with a commit "
"that can be squashed into a result of mechanical merge to correct semantic "
"conflicts."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:438
msgid ""
"After finding that the result of merging branch \"ai/topic\" to an "
"integration branch had such a semantic conflict, say seen~4, check the "
"problematic merge out on a detached HEAD, edit the working tree to fix the "
"semantic conflict, and make a separate commit to record the fix-up:"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:444
#, no-wrap
msgid ""
"     $ git checkout seen~4\n"
"     $ git show -s --pretty=%s ;# double check\n"
"     Merge branch 'ai/topic' to seen\n"
"     $ edit\n"
"     $ git commit -m 'merge-fix/ai/topic' -a\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:447
msgid "Then make a reference \"refs/merge-fix/ai/topic\" to point at this result:"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:449
#, no-wrap
msgid "     $ git update-ref refs/merge-fix/ai/topic HEAD\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:452
msgid "Then double check the result by asking Meta/Reintegrate to redo the merge:"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:456
#, no-wrap
msgid ""
"     $ git checkout seen~5 ;# the parent of the problem merge\n"
"     $ echo ai/topic | Meta/Reintegrate\n"
"     $ git diff seen~4\n"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:460
msgid ""
"This time, because you prepared refs/merge-fix/ai/topic, the resulting merge "
"should have been tweaked to include the fix for the semantic conflict."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:472
msgid ""
"Note that this assumes that the order in which conflicting branches are "
"merged does not change.  If the reason why merging ai/topic branch needs "
"this merge-fix is because another branch merged earlier to the integration "
"branch changed the underlying assumption ai/topic branch made (e.g. ai/topic "
"branch added a site to refer to a variable, while the other branch renamed "
"that variable and adjusted existing use sites), and if you changed redo-jch "
"(or redo-seen) script to merge ai/topic branch before the other branch, then "
"the above merge-fix should not be applied while merging ai/topic, but should "
"instead be applied while merging the other branch.  You would need to move "
"the fix to apply to the other branch, perhaps like this:"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/maintain-git.txt:475
#, no-wrap
msgid ""
"      $ mf=refs/merge-fix\n"
"      $ git update-ref $mf/$the_other_branch $mf/ai/topic\n"
"      $ git update-ref -d $mf/ai/topic\n"
msgstr ""
