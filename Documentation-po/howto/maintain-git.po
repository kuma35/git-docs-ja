# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 0.0\n"
"POT-Creation-Date: 2022-07-12 10:01+0900\n"
"PO-Revision-Date: 2022-07-14 09:17+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:9
#, no-wrap
msgid ""
"From: Junio C Hamano <gitster@pobox.com>\n"
"Date: Wed, 21 Nov 2007 16:32:55 -0800\n"
"Subject: Addendum to \"MaintNotes\"\n"
"Abstract: Imagine that Git development is racing along as usual, when our friendly\n"
" neighborhood maintainer is struck down by a wayward bus. Out of the\n"
" hordes of suckers (loyal developers), you have been tricked (chosen) to\n"
" step up as the new maintainer. This howto will show you \"how to\" do it.\n"
"Content-type: text/asciidoc\n"
msgstr ""
"From: Junio C Hamano <gitster@pobox.com>\n"
"Date: Wed, 21 Nov 2007 16:32:55 -0800\n"
"Subject: Addendum to \"MaintNotes\"\n"
"Abstract: Gitの開発が順調に進んでいたある日、 近所の親しいメンテナーが\n"
" 気まぐれバスに轢かれたとします。そして、おめでたい人(忠実な開発者)の\n"
" 大群の中から、あなたは新しいメンテナとしてステップアップするようにと\n"
" 担がれました。このハウツーは、そんなあなたがどうすればいいか示します。\n"
"Content-type: text/asciidoc\n"

#. type: Title =
#: ../Documentation-sedout/howto/maintain-git.txt:11
#, no-wrap
msgid "How to maintain Git"
msgstr "How to maintain Git"

#. type: Title -
#: ../Documentation-sedout/howto/maintain-git.txt:14
#, no-wrap
msgid "Activities"
msgstr "Activities"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:17
msgid "The maintainer's Git time is spent on three activities."
msgstr "メンテナのGit作業時間は、3つのアクティビティに費やされます。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:19
msgid "Communication (45%)"
msgstr "コミュニケーション (45%)"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:23
msgid ""
"Mailing list discussions on general design, fielding user questions, "
"diagnosing bug reports; reviewing, commenting on, suggesting alternatives "
"to, and rejecting patches."
msgstr ""
"一般的な設計、ユーザーの質問への回答、バグレポートの診断に関するメーリングリ"
"ストでのディスカッション。パッチのレビューや、コメントや、代替案の提案や、"
"パッチの拒否。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:25
msgid "Integration (50%)"
msgstr "インテグレーション(統合) (50%)"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:30
msgid ""
"Applying new patches from the contributors while spotting and correcting "
"minor mistakes, shuffling the integration and testing branches, pushing the "
"results out, cutting the releases, and making announcements."
msgstr "貢献者からの新しいパッチを適用しながら、小さな間違いを見つけて修正し、統合ブランチとテストブランチを混ぜっ返し、結果をプッシュし、リリースを区切り、アナウンスを行います。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:32
msgid "Own development (5%)"
msgstr "自身の開発作業 (5%)"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:34
msgid "Scratching my own itch and sending proposed patch series out."
msgstr "自身が思う痒い所に手を入れ、提案パッチシリーズを送信します。"

#. type: Title -
#: ../Documentation-sedout/howto/maintain-git.txt:36
#, no-wrap
msgid "The Policy"
msgstr "The Policy"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:41
msgid ""
"The policy on Integration is informally mentioned in \"A Note from the "
"maintainer\" message, which is periodically posted to this mailing list "
"after each feature release is made."
msgstr "統合に関するポリシーは、「A Note from the maintainer」メッセージに非公式に記載されています。このメッセージは、各機能のリリースが行われた後、このメーリングリストに定期的に投稿されます。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:45
msgid ""
"Feature releases are numbered as vX.Y.0 and are meant to contain bugfixes "
"and enhancements in any area, including functionality, performance and "
"usability, without regression."
msgstr "機能リリースには vX.Y.0 の番号が付けられており、機能、パフォーマンス、使いやすさなど、あらゆる分野でのバグ修正と機能拡張が、デグレ無しで含まれることを目的としています。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:48
msgid ""
"One release cycle for a feature release is expected to last for eight to ten "
"weeks."
msgstr "機能リリースのリリースサイクルは、8〜10週間と想定されています。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:52
msgid ""
"Maintenance releases are numbered as vX.Y.Z and are meant to contain only "
"bugfixes for the corresponding vX.Y.0 feature release and earlier "
"maintenance releases vX.Y.W (W < Z)."
msgstr "メンテナンスリリースにはvX.Y.Zという番号が付けられており、対応する vX.Y.0 機能リリースと以前のメンテナンスリリース vX.Y.W(W<Z) の、バグ修正のみが含まれていることを意味します。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:56
msgid ""
"'master' branch is used to prepare for the next feature release. In other "
"words, at some point, the tip of 'master' branch is tagged with vX.Y.0."
msgstr "「master」ブランチは、次の機能リリースの準備に使用されます。 つまり、ある時点で、「master」ブランチの先端に vX.Y.0 のタグが付けられます。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:62
msgid ""
"'maint' branch is used to prepare for the next maintenance release.  After "
"the feature release vX.Y.0 is made, the tip of 'maint' branch is set to that "
"release, and bugfixes will accumulate on the branch, and at some point, the "
"tip of the branch is tagged with vX.Y.1, vX.Y.2, and so on."
msgstr "「maint」ブランチは、次のメンテナンスリリースの準備に使用されます。 機能リリース vX.Y.0 が作成された後、「maint」ブランチの先端がそのリリースに設定され、バグ修正がブランチに蓄積され、ある時点で、ブランチの先端に vX.Y.1, vX.Y.2, 等のタグが付けられます。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:68
msgid ""
"'next' branch is used to publish changes (both enhancements and fixes) that "
"(1) have worthwhile goal, (2) are in a fairly good shape suitable for "
"everyday use, (3) but have not yet demonstrated to be regression free.  New "
"changes are tested in 'next' before merged to 'master'."
msgstr "「next」ブランチは、 (1)価値のある目標があり、 (2)日常の使用に適したかなり良好な状態であり、 (3)デグレがないことがまだ実証されていない変更(拡張と修正の両方)を公開するために使用されます。 新しい変更は、「master」にマージされる前に「next」でテストされます。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:71
msgid ""
"'seen' branch is used to publish other proposed changes that do not yet pass "
"the criteria set for 'next'."
msgstr "「seen」ブランチは、「next」に設定された基準をまだパスしていない他の提案された変更を公開するために使用されます。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:77
msgid ""
"The tips of 'master' and 'maint' branches will not be rewound to allow "
"people to build their own customization on top of them.  Early in a new "
"development cycle, 'next' is rewound to the tip of 'master' once, but "
"otherwise it will not be rewound until the end of the cycle."
msgstr "「master」と「maint」ブランチの先端は、人々がそれらの上に独自のカスタマイズを構築できるようにするために、巻き戻されることはありません。 新しい開発サイクルの早い段階で、「next」は「master」の先端に一度巻き戻されますが、それ以外の場合は、サイクルが終了するまで巻き戻されません。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:81
msgid ""
"Usually 'master' contains all of 'maint' and 'next' contains all of "
"'master'.  'seen' contains all the topics merged to 'next', but is rebuilt "
"directly on 'master'."
msgstr "通常、「master」には「maint」のすべてが含まれ、「next」には「master」のすべてが含まれます。 「seen」には「next」にマージされたすべてのトピックが含まれていますが、「master」で直接再構築されています。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:84
msgid ""
"The tip of 'master' is meant to be more stable than any tagged releases, and "
"the users are encouraged to follow it."
msgstr "「master」の先端は、タグ付けされたどのリリースよりも安定していることを意味しており、ユーザーはそれに従うことをお勧めします。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:88
msgid ""
"The 'next' branch is where new action takes place, and the users are "
"encouraged to test it so that regressions and bugs are found before new "
"topics are merged to 'master'."
msgstr "「next」ブランチは新しいアクションが行われる場所であり、新しいトピックが「master」にマージされる前にデグレとバグが見つかるように、ユーザーはそれをテストすることをお勧めします。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:92
msgid ""
"Note that before v1.9.0 release, the version numbers used to be structured "
"slightly differently.  vX.Y.Z were feature releases while vX.Y.Z.W were "
"maintenance releases for vX.Y.Z."
msgstr "注意: v1.9.0リリース以前は、バージョン番号の構造が少し異なっていたことに注意してください。 vX.Y.Z は機能リリースであり、vX.Y.Z.W は vX.Y.Z のメンテナンスリリースでした。"

#. type: Title -
#: ../Documentation-sedout/howto/maintain-git.txt:95
#, no-wrap
msgid "A Typical Git Day"
msgstr "A Typical Git Day"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:99
msgid ""
"A typical Git day for the maintainer implements the above policy by doing "
"the following:"
msgstr "メンテナの典型的なGitな一日は、以下のようにして上記のポリシーを実装します:"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:105
msgid ""
"Scan mailing list.  Respond with review comments, suggestions etc.  Kibitz.  "
"Collect potentially usable patches from the mailing list.  Patches about a "
"single topic go to one mailbox (I read my mail in Gnus, and type \\C-o to "
"save/append messages in files in mbox format)."
msgstr "メーリングリストを走査します。 レビューコメント、提案などで返信します。あちこちの議論にクチバシを突っ込みます(Kibitz)。 メーリングリストから潜在的に使用可能なパッチを収集します。 1つのトピックに関するパッチは1つのメールボックスに送信されます(私はGnusでメールを読み、`\\C-o` と入力して、メッセージをmbox形式のファイルに 保存/追加 します)。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:110
msgid ""
"Write his own patches to address issues raised on the list but nobody has "
"stepped up solving.  Send it out just like other contributors do, and pick "
"them up just like patches from other contributors (see above)."
msgstr "メーリングリストで提起されたが、誰も解決に乗り出していない問題に対処するために自身でパッチを書きます。 他の貢献者と同じように送信し、他の貢献者からのパッチと同じように受け取ります(上記参照)。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:115
msgid ""
"Review the patches in the saved mailboxes.  Edit proposed log message for "
"typofixes and clarifications, and add Acks collected from the list.  Edit "
"patch to incorporate \"Oops, that should have been like this\" fixes from "
"the discussion."
msgstr "保存したメールボックスのパッチを確認します。タイプミス修正と、プログラムをキレイにするために提案されたログメッセージを編集し、リストから収集した対応を追加します。 パッチを編集して、ディスカッションからの「ええっと、これはこのようになっているはずです」な修正を組み込みます。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:118
msgid "Classify the collected patches and handle 'master' and 'maint' updates:"
msgstr "収集されたパッチを分類し、 `master` と `maint` の更新を処理します:"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:120
msgid ""
"Obviously correct fixes that pertain to the tip of 'maint' are directly "
"applied to 'maint'."
msgstr "明らかに、「maint」の先端に関連する正しい修正は、「maint」に直接適用されます。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:122
msgid ""
"Obviously correct fixes that pertain to the tip of 'master' are directly "
"applied to 'master'."
msgstr "明らかに、「master」の先端に関連する正しい修正は、「master」に直接適用されます。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:123
msgid "Other topics are not handled in this step."
msgstr "他のトピックはこのステップでは処理されません。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:125
msgid "This step is done with \"git am\"."
msgstr "このステップは 「git am」で実行されます。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:129
#, no-wrap
msgid ""
" $ git checkout master    ;# or \"git checkout maint\"\n"
" $ git am -sc3 mailbox\n"
" $ make test\n"
msgstr ""
" $ git checkout master    ;# or \"git checkout maint\"\n"
" $ git am -sc3 mailbox\n"
" $ make test\n"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:132
msgid "In practice, almost no patch directly goes to 'master' or 'maint'."
msgstr ""
"実際には、 `master` または `maint` に直接行くパッチはほとんどありません。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:137
msgid ""
"Review the last issue of \"What's cooking\" message, review the topics ready "
"for merging (topic->master and topic->maint).  Use \"Meta/cook -w\" script "
"(where Meta/ contains a checkout of the 'todo' branch) to aid this step."
msgstr "「What's cooking」メッセージの最後の号を確認し、マージの準備ができているトピックを確認します(topic→master と topic→maint)。 このステップを支援するために、 `Meta/cook -w` スクリプト( Meta/ には「todo」ブランチのチェックアウトが含まれています)を使用します。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:140
msgid ""
"And perform the merge.  Use \"Meta/Reintegrate -e\" script (see later) to "
"aid this step."
msgstr "そして、マージを実行します。 この手順を支援するには、 `Meta/Reintegrate -e` スクリプト(後述)を使用します。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:142
#, no-wrap
msgid " $ Meta/cook -w last-issue-of-whats-cooking.mbox\n"
msgstr " $ Meta/cook -w last-issue-of-whats-cooking.mbox\n"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:148
#, no-wrap
msgid ""
" $ git checkout master    ;# or \"git checkout maint\"\n"
" $ echo ai/topic | Meta/Reintegrate -e ;# \"git merge ai/topic\"\n"
" $ git log -p ORIG_HEAD.. ;# final review\n"
" $ git diff ORIG_HEAD..   ;# final review\n"
" $ make test              ;# final review\n"
msgstr ""
" $ git checkout master    ;# or \"git checkout maint\"\n"
" $ echo ai/topic | Meta/Reintegrate -e ;# \"git merge ai/topic\"\n"
" $ git log -p ORIG_HEAD.. ;# final review\n"
" $ git diff ORIG_HEAD..   ;# final review\n"
" $ make test              ;# final review\n"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:150
msgid "Handle the remaining patches:"
msgstr "残りのパッチを処理します:"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:159
msgid ""
"Anything unobvious that is applicable to 'master' (in other words, does not "
"depend on anything that is still in 'next' and not in 'master') is applied "
"to a new topic branch that is forked from the tip of 'master' (or the last "
"feature release, which is a bit older than 'master').  This includes both "
"enhancements and unobvious fixes to 'master'.  A topic branch is named as ai/"
"topic where \"ai\" is two-letter string named after author's initial and "
"\"topic\" is a descriptive name of the topic (in other words, \"what's the "
"series is about\")."
msgstr "「master」に適用可能で(つまり、「next」にあり、「master」にないものに依存しません)明らかでないものはすべて、「master」の先端から分岐した新しいトピックブランチ(または「master」より少し古い最後の機能リリース)に適用されます。これには、「master」の機能強化と明らかでない修正の両方が含まれます。 トピックブランチの名前は ai/topic です。ここで、「ai」は作成者の頭文字にちなんで名付けられた2文字の文字列であり、「topic」はトピックの説明的な名前です(つまり、「そのシリーズが何に付いてであるか」です)。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:163
msgid ""
"An unobvious fix meant for 'maint' is applied to a new topic branch that is "
"forked from the tip of 'maint' (or the oldest and still relevant maintenance "
"branch).  The topic may be named as ai/maint-topic."
msgstr "「maint」を対象とした明白でない修正が、「maint」の先端から分岐した新しいトピックブランチ(または最も古く、まだ関連するメンテナンスブランチ)に適用されます。 トピックには、 ai/maint-topic という名前を付けることができます。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:165
msgid ""
"Changes that pertain to an existing topic are applied to the branch, but:"
msgstr ""
"既存のトピックに関連する変更はブランチに適用されますが、以下のようになります:"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:166
msgid "obviously correct ones are applied first;"
msgstr "明らかに正しいものが最初に適用されます"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:167
msgid "questionable ones are discarded or applied to near the tip;"
msgstr "疑わしいものは廃棄されるか、先端近くで適用されます"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:169
msgid ""
"Replacement patches to an existing topic are accepted only for commits not "
"in 'next'."
msgstr ""
"既存のトピックへの置換パッチは、 `next` にないコミットに対してのみ受け入れら"
"れます。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:171
msgid "The initial round is done with:"
msgstr "最初のラウンドは以下のように行われます:"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:174
#, no-wrap
msgid ""
" $ git checkout ai/topic ;# or \"git checkout -b ai/topic master\"\n"
" $ git am -sc3 mailbox\n"
msgstr ""
" $ git checkout ai/topic ;# or \"git checkout -b ai/topic master\"\n"
" $ git am -sc3 mailbox\n"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:176
msgid "and replacing an existing topic with subsequent round is done with:"
msgstr "既存のトピックを次のラウンドに置き換えるには、以下のようにします:"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:179
#, no-wrap
msgid ""
" $ git checkout master...ai/topic ;# try to reapply to the same base\n"
" $ git am -sc3 mailbox\n"
msgstr ""
" $ git checkout master...ai/topic ;# try to reapply to the same base\n"
" $ git am -sc3 mailbox\n"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:181
msgid "to prepare the new round on a detached HEAD, and then"
msgstr "切り離されたHEAD(detached HEAD)で新しいラウンドを準備し、それから以下のようにします"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:184
#, no-wrap
msgid ""
" $ git range-diff @{-1}...\n"
" $ git diff @{-1}\n"
msgstr ""
" $ git range-diff @{-1}...\n"
" $ git diff @{-1}\n"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:186
msgid "to double check what changed since the last round, and finally"
msgstr "前回のラウンドから何が変わったかを再確認し、最後に以下のようにします"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:188
#, no-wrap
msgid " $ git checkout -B @{-1}\n"
msgstr " $ git checkout -B @{-1}\n"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:191
msgid ""
"to conclude (the last step is why a topic already in 'next' is not replaced "
"but updated incrementally)."
msgstr "これで完結させます(最後のステップは、なぜ、すでに「next」にあるトピックが置き換えられず、段階的に更新されるかを示しています)。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:203
msgid ""
"Whether it is the initial round or a subsequent round, the topic may not "
"build even in isolation, or may break the build when merged to integration "
"branches due to bugs.  There may already be obvious and trivial improvements "
"suggested on the list.  The maintainer often adds an extra commit, with "
"\"SQUASH???\" in its title, to fix things up, before publishing the "
"integration branches to make it usable by other developers for testing.  "
"These changes are what the maintainer is not 100% committed to (trivial "
"typofixes etc. are often squashed directly into the patches that need "
"fixing, without being applied as a separate \"SQUASH???\" commit), so that "
"they can be removed easily as needed."
msgstr "それが最初のラウンドであろうと後続ラウンドであろうと、トピックは単独でも構築されない可能性があり、または、バグが原因で統合ブランチにマージされたときにビルドが破損する可能性があります。メーリングリストには、すでに明白で些細な改善が提案されている可能性があります。 メンテナは、統合ブランチを公開して、他の開発者がテストに使用できるようにする前に、物事を修正するために、そのタイトルに「SQUASH???」を使用して余分のコミットを追加することがよくあります。 これらの変更は、メンテナが100％コミットしているわけではないため(些細なタイプミスなどは、個別の「SQUASH???」コミットとして適用されることなく、修正が必要なパッチに直接押しつぶされる(squash)ことがよくあります)、必要に応じて簡単に削除できます。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:206
msgid "Merge maint to master as needed:"
msgstr "必要に応じて、maint を master にマージ:"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:210
#, no-wrap
msgid ""
"$ git checkout master\n"
"$ git merge maint\n"
"$ make test\n"
msgstr ""
"$ git checkout master\n"
"$ git merge maint\n"
"$ make test\n"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:212
msgid "Merge master to next as needed:"
msgstr "必要に応じて master を next にマージ:"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:216
#, no-wrap
msgid ""
"$ git checkout next\n"
"$ git merge master\n"
"$ make test\n"
msgstr ""
"$ git checkout next\n"
"$ git merge master\n"
"$ make test\n"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:221
msgid ""
"Review the last issue of \"What's cooking\" again and see if topics that are "
"ready to be merged to 'next' are still in good shape (e.g. has there any new "
"issue identified on the list with the series?)"
msgstr "「What's cooking」の最後の号をもう一度レビューし、「next」にマージする準備ができているトピックがまだ良好な状態であるかどうかを確認します(たとえば、このシリーズのリストに新しい問題が提起されていませんか？)"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:224
msgid ""
"Prepare 'jch' branch, which is used to represent somewhere between 'master' "
"and 'seen' and often is slightly ahead of 'next'."
msgstr "`jch` ブランチを準備します。これは、 `master` と `seen` の間のどこかを表すために使用され、多くの場合、 `next` よりわずかに進んでいます。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:226
msgid "$ Meta/Reintegrate master..seen >Meta/redo-jch.sh"
msgstr "$ Meta/Reintegrate master..seen >Meta/redo-jch.sh"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:232
msgid ""
"The result is a script that lists topics to be merged in order to rebuild "
"'seen' as the input to Meta/Reintegrate script.  Remove later topics that "
"should not be in 'jch' yet.  Add a line that consists of '### match next' "
"before the name of the first topic in the output that should be in 'jch' but "
"not in 'next' yet."
msgstr "結果は、Meta/Reintegrate スクリプトへの入力として「seen」を再構築するためにマージされるトピックをリストするスクリプトです。 まだ「jch」に含まれていてはならない後続のトピックを削除します。 出力の最初のトピックの名前の前に `### match next` という行を追加します。これは、「jch」に含まれている必要がありますが、「next」には含まれていません。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:236
msgid ""
"Now we are ready to start merging topics to 'next'.  For each branch whose "
"tip is not merged to 'next', one of three things can happen:"
msgstr "これで、トピックを「next」にマージする準備が整いました。 先端が「next」にマージされていないブランチごとに、以下の3つのいずれかが発生する可能性があります:"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:237
msgid "The commits are all next-worthy; merge the topic to next;"
msgstr "コミットはすべてnextにマージする価値があります。 トピックをnextにマージします。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:239
msgid ""
"The new parts are of mixed quality, but earlier ones are next-worthy; merge "
"the early parts to next;"
msgstr "新しい部品は混合品質ですが、初期の部品はnextにマージする価値があります。 初期の部品をnextにマージします。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:240
msgid "Nothing is next-worthy; do not do anything."
msgstr "nextにマージする価値のあるものはありません。何もしません。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:247
msgid ""
"This step is aided with Meta/redo-jch.sh script created earlier.  If a topic "
"that was already in 'next' gained a patch, the script would list it as \"ai/"
"topic~1\".  To include the new patch to the updated 'next', drop the \"~1\" "
"part; to keep it excluded, do not touch the line.  If a topic that was not "
"in 'next' should be merged to 'next', add it at the end of the list.  Then:"
msgstr "この手順は、以前に作成した Meta/redo-jch.sh スクリプトを使用して支援されます。 すでに「next」にあるトピックにパッチが適用された場合、スクリプトはそれを   `ai/topic~1` としてリストします。 更新された「next」に新しいパッチを含めるには、 `~1` の部分を削除します。除外したいモノの行はそのままにしてください。 `next` になかったトピックを `next` にマージする必要がある場合は、リストの最後に追加します。 それから以下のようにします:"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:250
#, no-wrap
msgid ""
" $ git checkout -B jch master\n"
" $ Meta/redo-jch.sh -c1\n"
msgstr ""
" $ git checkout -B jch master\n"
" $ Meta/redo-jch.sh -c1\n"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:254
msgid ""
"to rebuild the 'jch' branch from scratch.  \"-c1\" tells the script to stop "
"merging at the first line that begins with '###' (i.e. the \"### match next"
"\" line you added earlier)."
msgstr "これは `jch` ブランチを最初から再構築します。  `-c1` は、 `###` で始まる最初の行(つまり、以前に追加した `### match next` 行)でマージを停止するようにスクリプトに指示します。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:261
msgid ""
"At this point, build-test the result.  It may reveal semantic conflicts (e."
"g. a topic renamed a variable, another added a new reference to the variable "
"under its old name), in which case prepare an appropriate merge-fix first "
"(see appendix), and rebuild the 'jch' branch from scratch, starting at the "
"tip of 'master'."
msgstr "この時点で、結果をビルドテストします。 セマンティックの競合が明らかになる場合があります(たとえば、トピックが変数の名前を変更し、別のトピックが古い名前で変数への新しい参照を追加したとか)。その場合、最初に適切なマージ修正(merge-fix)を準備し(appendix参照)、そしてゼロからから「jch」ブランチを再構築し。 「master」の先端から始めます。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:263
msgid "Then do the same to 'next'"
msgstr "それから同じ事を「next」に行います"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:266
#, no-wrap
msgid ""
" $ git checkout next\n"
" $ sh Meta/redo-jch.sh -c1 -e\n"
msgstr ""
" $ git checkout next\n"
" $ sh Meta/redo-jch.sh -c1 -e\n"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:273
msgid ""
"The \"-e\" option allows the merge message that comes from the history of "
"the topic and the comments in the \"What's cooking\" to be edited.  The "
"resulting tree should match 'jch' as the same set of topics are merged on "
"'master'; otherwise there is a mismerge.  Investigate why and do not proceed "
"until the mismerge is found and rectified."
msgstr "`-e` オプションを使用すると、トピックの履歴からのマージメッセージと「What's cooking」のコメントを編集できます。 同じトピックのセットが「master」にマージされるため、結果のツリーは「jch」と一致する必要があります。 そうでなければ、ミスマージがあります。 理由を調査し、ミスマージが検出されて修正されるまで続行しないでください。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:275
#, no-wrap
msgid " $ git diff jch next\n"
msgstr " $ git diff jch next\n"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:277
msgid "When all is well, clean up the redo-jch.sh script with"
msgstr "全てOKになったら、 redo-jch.sh スクリプトで以下のようにクリーンアップします"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:279
#, no-wrap
msgid " $ sh Meta/redo-jch.sh -u\n"
msgstr " $ sh Meta/redo-jch.sh -u\n"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:283
msgid ""
"This removes topics listed in the script that have already been merged to "
"'master'.  This may lose '### match next' marker; add it again to the "
"appropriate place when it happens."
msgstr "これにより、スクリプト内にリストされてる、「master」にすでにマージされているトピックを削除します。 これにより、「### match next」マーカーが失われる可能性があります。 もし「### match next」マーカーが失われたら、適切な場所に再度追加します。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:285
msgid "Rebuild 'seen'."
msgstr "「seen」を再構築します。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:287
#, no-wrap
msgid "$ Meta/Reintegrate master..seen >Meta/redo-seen.sh\n"
msgstr "$ Meta/Reintegrate master..seen >Meta/redo-seen.sh\n"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:290
msgid ""
"Edit the result by adding new topics that are not still in 'seen' in the "
"script.  Then"
msgstr "スクリプトに、まだ「表示」(seen)されていない新しいトピックを追加して、結果を編集します。 それから以下のようにします"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:293
#, no-wrap
msgid ""
"     $ git checkout -B seen jch\n"
"     $ sh Meta/redo-seen.sh\n"
msgstr ""
"     $ git checkout -B seen jch\n"
"     $ sh Meta/redo-seen.sh\n"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:295
msgid "When all is well, clean up the redo-seen.sh script with"
msgstr "これが全てがOKになったら、redo-seen.sh スクリプトで以下のようにしてクリーンアップします"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:297
#, no-wrap
msgid "     $ sh Meta/redo-seen.sh -u\n"
msgstr "     $ sh Meta/redo-seen.sh -u\n"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:299
msgid "Double check by running"
msgstr "実行して再確認(double check)します"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:301
#, no-wrap
msgid "     $ git branch --no-merged seen\n"
msgstr "     $ git branch --no-merged seen\n"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:303
msgid "to see there is no unexpected leftover topics."
msgstr "予期しない残りのトピックがないことを確認します。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:308
msgid ""
"At this point, build-test the result for semantic conflicts, and if there "
"are, prepare an appropriate merge-fix first (see appendix), and rebuild the "
"'seen' branch from scratch, starting at the tip of 'jch'."
msgstr "この時点で、結果をビルドテストします。 セマンティックの競合が明らかになる場合があります(たとえば、トピックが変数の名前を変更し、別のトピックが古い名前で変数への新しい参照を追加したとか)。その場合、最初に適切なマージ修正(merge-fix)を準備し(appendix参照)、そしてゼロからから「seen」ブランチを再構築し。 「jch」の先端から始めます。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:311
msgid ""
"Update \"What's cooking\" message to review the updates to existing topics, "
"newly added topics and graduated topics."
msgstr "「What's cooking」メッセージを更新して、既存のトピック、新しく追加されたトピック、および段階的なトピックの更新を確認します。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:313
msgid "This step is helped with Meta/cook script."
msgstr "このステップは 「git am」で実行されます。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:315
#, no-wrap
msgid " $ Meta/cook\n"
msgstr " $ Meta/cook\n"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:325
msgid ""
"This script inspects the history between master..seen, finds tips of topic "
"branches, compares what it found with the current contents in Meta/whats-"
"cooking.txt, and updates that file.  Topics not listed in the file but are "
"found in master..seen are added to the \"New topics\" section, topics listed "
"in the file that are no longer found in master..seen are moved to the "
"\"Graduated to master\" section, and topics whose commits changed their "
"states (e.g. used to be only in 'seen', now merged to 'next') are updated "
"with change markers \"<<\" and \">>\"."
msgstr "このスクリプトは、 `master..seen` 間の履歴を検査し、トピックブランチの先端を見つけ、見つかったものを Meta/whats-cooking.txt の現在の内容と比較し、 Meta/whats-cooking.txt を更新します。 ファイルにリストされていないが `master..seen` にあるトピックは、「New topics」セクションに追加されます。ファイルにリストされ、 `master..seen` に見つからなくなったトピックは、「Graduated to master」セクションに移動されます。 コミットによって状態が変更されたトピック(たとえば、以前は「seen」のみでしたが、現在は「next」にマージされていますとか）は、変更マーカー `<<` および `>>` で更新されます。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:331
msgid ""
"Look for lines enclosed in \"<<\" and \">>\"; they hold contents from old "
"file that are replaced by this integration round.  After verifying them, "
"remove the old part.  Review the description for each topic and update its "
"doneness and plan as needed.  To review the updated plan, run"
msgstr "`<<` と `>>` で囲まれた行を探します。 これらは、この統合ラウンドによって置き換えられた古いファイルのコンテンツを保持します。 それらを確認(verify)した後、古い部分を削除します。 各トピックの説明を確認し、必要に応じてその完成度と計画を更新します。 更新された計画を確認するには、以下を実行します"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:333
#, no-wrap
msgid "     $ Meta/cook -w\n"
msgstr "     $ Meta/cook -w\n"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:337
msgid ""
"which will pick up comments given to the topics, such as \"Will merge to "
"'next'\", etc. (see Meta/cook script to learn what kind of phrases are "
"supported)."
msgstr "これは、 \"Will merge to 'next'\" などの、トピックに付けられたコメントを取得します(サポートされているフレーズの種類については、 Meta/cook を参照してください)。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:340
msgid ""
"Compile, test and install all four (five) integration branches; Meta/Dothem "
"script may aid this step."
msgstr "4つ(5つ)すべての統合ブランチをコンパイル、テスト、およびインストールします。 Meta/Dothem スクリプトは、このステップで役立つでしょう。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:343
msgid ""
"Format documentation if the 'master' branch was updated; Meta/dodoc.sh "
"script may aid this step."
msgstr "`master` ブランチが更新された場合は、ドキュメントをフォーマットします。 Meta/dodoc.sh スクリプトがこのステップに役立つでしょう。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:346
msgid ""
"Push the integration branches out to public places; Meta/pushall script may "
"aid this step."
msgstr "統合ブランチを公共の場所にプッシュします。 Meta/pushall スクリプトがこのステップに役立つでしょう。"

#. type: Title -
#: ../Documentation-sedout/howto/maintain-git.txt:348
#, no-wrap
msgid "Observations"
msgstr "Observations"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:351
msgid "Some observations to be made."
msgstr "行うべきいくつかの観測。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:355
msgid ""
"Each topic is tested individually, and also together with other topics "
"cooking first in 'seen', then in 'jch' and then in 'next'.  Until it "
"matures, no part of it is merged to 'master'."
msgstr "各トピックは個別にテストされ、他のトピックと一緒に、最初に「seen」、次に「jch」、それから「next」で調理(cooking)されます。 それが成熟するまで、その一部は「master」にマージされません。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:360
msgid ""
"A topic already in 'next' can get fixes while still in 'next'.  Such a topic "
"will have many merges to 'next' (in other words, \"git log --first-parent "
"next\" will show many \"Merge branch 'ai/topic' to next\" for the same topic."
msgstr "すでに「next」にあるトピックは、「next」にある間に修正を取得できます。 このようなトピックには、「next」への多くのマージがあります（つまり、 `git log --first-parent next` は、同じトピックに対して多くの「nextへマージする `ai/topic` ブランチ」(Merge branch 'ai/topic' to next)を表示します。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:364
msgid ""
"An unobvious fix for 'maint' is cooked in 'next' and then merged to 'master' "
"to make extra sure it is Ok and then merged to 'maint'."
msgstr "`maint` の明白でない修正は、 `next` で調理され、 `master` にマージされて、それがOKであることを確認してから、 `maint` にマージされます。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:369
msgid ""
"Even when 'next' becomes empty (in other words, all topics prove stable and "
"are merged to 'master' and \"git diff master next\" shows empty), it has "
"tons of merge commits that will never be in 'master'."
msgstr "`next` が空になった場合(つまり、すべてのトピックが安定して `master` にマージされ、 `git diff master next` が空の場合)でも、`next` には、 `master` には決して存在しない大量のマージコミットがあります。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:373
msgid ""
"In principle, \"git log --first-parent master..next\" should show nothing "
"but merges (in practice, there are fixup commits and reverts that are not "
"merges)."
msgstr "原則として、 `git log --first-parent master..next` はマージのみを表示するべきです(実際には、マージではない fixupコミット と revert があります)。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:377
msgid ""
"Commits near the tip of a topic branch that are not in 'next' are fair game "
"to be discarded, replaced or rewritten.  Commits already merged to 'next' "
"will not be."
msgstr "`next` にないトピックブランチの先端近くのコミットは、破棄または置換または書き換えのいいカモ(fair game)です。 `next` にすでにマージされているコミットはそうではありません。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:381
msgid ""
"Being in the 'next' branch is not a guarantee for a topic to be included in "
"the next feature release.  Being in the 'master' branch typically is."
msgstr "`next` ブランチにあることは、そのトピックが次の機能リリースに含まれることを保証するものではありません。「master」ブランチにあるのは通常、次の機能リリースに含まれます。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:389
msgid ""
"Due to the nature of \"SQUASH???\" fix-ups, if the original author agrees "
"with the suggested changes, it is OK to squash them to appropriate patches "
"in the next round (when the suggested change is small enough, the author "
"should not even bother with \"Helped-by\").  It is also OK to drop them from "
"the next round when the original author does not agree with the suggestion, "
"but the author is expected to say why somewhere in the discussion."
msgstr "「SQUASH???」修正の性質上、元の作成者が提案された変更に同意する場合は、次のラウンドで適切なパッチにそれらを押しつぶして(squash)もかまいません(提案された変更が十分に小さい場合、作成者は「Helped-by」を気にする必要はありません)。元の作者が提案に同意しない場合は、次のラウンドからそれらを削除することもできますが、作者は議論のどこかで理由を述べることが期待されます。"

#. type: Title -
#: ../Documentation-sedout/howto/maintain-git.txt:392
#, no-wrap
msgid "Appendix"
msgstr "Appendix"

#. type: Title ~
#: ../Documentation-sedout/howto/maintain-git.txt:395
#, no-wrap
msgid "Preparing a \"merge-fix\""
msgstr "Preparing a \"merge-fix\""

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:403
msgid ""
"A merge of two topics may not textually conflict but still have conflict at "
"the semantic level. A classic example is for one topic to rename an variable "
"and all its uses, while another topic adds a new use of the variable under "
"its old name. When these two topics are merged together, the reference to "
"the variable newly added by the latter topic will still use the old name in "
"the result."
msgstr "2つのトピックのマージは、字面的には競合しなくても、意味レベルでは競合が発生する場合があります。 古典的な例は、あるトピックで変数とそのすべての使用法の名前を変更し、別のトピックで変数の新しい使用法を古い名前で追加する場合です。 これらの2つのトピックがマージされた場合、後者のトピックによって新しく追加された変数への参照は、結果的に古い名前を引き続き使用します。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:409
msgid ""
"The Meta/Reintegrate script that is used by redo-jch and redo-seen scripts "
"implements a crude but usable way to work this issue around.  When the "
"script merges branch $X, it checks if \"refs/merge-fix/$X\" exists, and if "
"so, the effect of it is squashed into the result of the mechanical merge.  "
"In other words,"
msgstr "redo-jch および redo-seen スクリプトで使用される Meta/Reintegrate スクリプトは、この問題を回避するための大雑把ですが使用可能な方法を実装しています。 スクリプトがブランチ$Xをマージするとき、「refs/merge-fix/$X」が存在するかどうかをチェックし、存在する場合、その効果は機械的マージの結果に押しつぶされ(squash)ます。 言い換えると、"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:411
#, no-wrap
msgid "     $ echo $X | Meta/Reintegrate\n"
msgstr "     $ echo $X | Meta/Reintegrate\n"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:413
msgid "is roughly equivalent to this sequence:"
msgstr "これは以下のシーケンスとほぼ同等です:"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:418
#, no-wrap
msgid ""
"     $ git merge --rerere-autoupdate $X\n"
"     $ git commit\n"
"     $ git cherry-pick -n refs/merge-fix/$X\n"
"     $ git commit --amend\n"
msgstr ""
"     $ git merge --rerere-autoupdate $X\n"
"     $ git commit\n"
"     $ git cherry-pick -n refs/merge-fix/$X\n"
"     $ git commit --amend\n"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:422
msgid ""
"The goal of this \"prepare a merge-fix\" step is to come up with a commit "
"that can be squashed into a result of mechanical merge to correct semantic "
"conflicts."
msgstr "この「prepare a merge-fix」(マージ修正の準備)ステップの目標は、セマンティックの競合を修正するために、機械的なマージの結果に押しつぶす(squash)ことができるコミットを提案することです。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:428
msgid ""
"After finding that the result of merging branch \"ai/topic\" to an "
"integration branch had such a semantic conflict, say seen~4, check the "
"problematic merge out on a detached HEAD, edit the working tree to fix the "
"semantic conflict, and make a separate commit to record the fix-up:"
msgstr "ブランチ「ai/topic」を統合ブランチにマージした結果に、たとえば `seen~4` のようなセマンティックの競合があることがわかった後、切り離されたHEAD(detached HEAD)で問題のあるマージをチェックし、作業ツリーを編集してセマンティックの競合を修正し、修正を記録するための別のコミットを行います:"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:434
#, no-wrap
msgid ""
"     $ git checkout seen~4\n"
"     $ git show -s --pretty=%s ;# double check\n"
"     Merge branch 'ai/topic' to seen\n"
"     $ edit\n"
"     $ git commit -m 'merge-fix/ai/topic' -a\n"
msgstr ""
"     $ git checkout seen~4\n"
"     $ git show -s --pretty=%s ;# double check\n"
"     Merge branch 'ai/topic' to seen\n"
"     $ edit\n"
"     $ git commit -m 'merge-fix/ai/topic' -a\n"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:437
#, fuzzy
msgid ""
"Then make a reference \"refs/merge-fix/ai/topic\" to point at this result:"
msgstr "次に、「refs/merge-fix/ai/topic」を参照して、この結果を示します:"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:439
#, no-wrap
msgid "     $ git update-ref refs/merge-fix/ai/topic HEAD\n"
msgstr "     $ git update-ref refs/merge-fix/ai/topic HEAD\n"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:442
msgid ""
"Then double check the result by asking Meta/Reintegrate to redo the merge:"
msgstr "それから、Meta/Reintegrate にマージをやり直すように依頼して、結果を再確認(double check)します:"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:446
#, no-wrap
msgid ""
"     $ git checkout seen~5 ;# the parent of the problem merge\n"
"     $ echo ai/topic | Meta/Reintegrate\n"
"     $ git diff seen~4\n"
msgstr ""
"     $ git checkout seen~5 ;# the parent of the problem merge\n"
"     $ echo ai/topic | Meta/Reintegrate\n"
"     $ git diff seen~4\n"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:450
msgid ""
"This time, because you prepared refs/merge-fix/ai/topic, the resulting merge "
"should have been tweaked to include the fix for the semantic conflict."
msgstr "今回は、refs/merge-fix/ai/topic を準備したため、結果のマージは、セマンティックの競合の修正を含むように調整されているはずです。"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:462
msgid ""
"Note that this assumes that the order in which conflicting branches are "
"merged does not change.  If the reason why merging ai/topic branch needs "
"this merge-fix is because another branch merged earlier to the integration "
"branch changed the underlying assumption ai/topic branch made (e.g. ai/topic "
"branch added a site to refer to a variable, while the other branch renamed "
"that variable and adjusted existing use sites), and if you changed redo-jch "
"(or redo-seen) script to merge ai/topic branch before the other branch, then "
"the above merge-fix should not be applied while merging ai/topic, but should "
"instead be applied while merging the other branch.  You would need to move "
"the fix to apply to the other branch, perhaps like this:"
msgstr "注意: これは、競合するブランチがマージされる順序が変更されないことを前提としていることに注意してください。 ai/topic ブランチをマージする理由がこのマージ修正を必要とする場合、統合ブランチに以前にマージされた別のブランチが、ai/topicブランチが作成した基本的な仮定を変更したためです(たとえば、ai/topicブランチは、変数を参照するサイトを追加しましたが、 他のブランチはその変数の名前を変更し、既存の使用サイトを調整したとか)、他のブランチの前に ai/topic ブランチをマージするように redo-jch(またはredo-seen)スクリプトを変更した場合、ai/topicのマージ中に上記のmerge-fixを適用しないで、代わりに他のブランチをマージするときに適用する必要があります。他のブランチに適用するには、修正を移動する必要があります。おそらく以下のようになります:"

#. type: Plain text
#: ../Documentation-sedout/howto/maintain-git.txt:465
#, no-wrap
msgid ""
"      $ mf=refs/merge-fix\n"
"      $ git update-ref $mf/$the_other_branch $mf/ai/topic\n"
"      $ git update-ref -d $mf/ai/topic\n"
msgstr ""
"      $ mf=refs/merge-fix\n"
"      $ git update-ref $mf/$the_other_branch $mf/ai/topic\n"
"      $ git update-ref -d $mf/ai/topic\n"
