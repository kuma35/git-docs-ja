# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-10-02 01:07+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: ../Documentation/howto/new-command.txt:5
#, no-wrap
msgid ""
"From: Eric S. Raymond <esr@thyrsus.com>\n"
"Abstract: This is how-to documentation for people who want to add "
"extension\n"
" commands to Git.  It should be read alongside api-builtin.txt.\n"
"Content-type: text/asciidoc\n"
msgstr ""

#. type: Title =
#: ../Documentation/howto/new-command.txt:7
#, no-wrap
msgid "How to integrate new subcommands"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/new-command.txt:11
msgid ""
"This is how-to documentation for people who want to add extension commands "
"to Git.  It should be read alongside api-builtin.txt."
msgstr ""

#. type: Title -
#: ../Documentation/howto/new-command.txt:13
#, no-wrap
msgid "Runtime environment"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/new-command.txt:19
msgid ""
"Git subcommands are standalone executables that live in the Git exec path, "
"normally /usr/lib/git-core.  The git executable itself is a thin wrapper "
"that knows where the subcommands live, and runs them by passing command-line "
"arguments to them."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/new-command.txt:23
msgid ""
"(If \"git foo\" is not found in the Git exec path, the wrapper will look in "
"the rest of your $PATH for it.  Thus, it's possible to write local Git "
"extensions that don't live in system space.)"
msgstr ""

#. type: Title -
#: ../Documentation/howto/new-command.txt:25
#, no-wrap
msgid "Implementation languages"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/new-command.txt:29
msgid "Most subcommands are written in C or shell.  A few are written in Perl."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/new-command.txt:37
msgid ""
"While we strongly encourage coding in portable C for portability, these "
"specific scripting languages are also acceptable.  We won't accept more "
"without a very strong technical case, as we don't want to broaden the Git "
"suite's required dependencies.  Import utilities, surgical tools, remote "
"helpers and other code at the edges of the Git suite are more lenient and we "
"allow Python (and even Tcl/tk), but they should not be used for core "
"functions."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/new-command.txt:42
msgid ""
"This may change in the future.  Especially Python is not allowed in core "
"because we need better Python integration in the Git Windows installer "
"before we can be confident people in that environment won't experience an "
"unacceptably large loss of capability."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/new-command.txt:49
msgid ""
"C commands are normally written as single modules, named after the command, "
"that link a collection of functions called libgit.  Thus, your command "
"'git-foo' would normally be implemented as a single \"git-foo.c\" (or "
"\"builtin/foo.c\" if it is to be linked to the main binary); this "
"organization makes it easy for people reading the code to find things."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/new-command.txt:53
msgid ""
"See the CodingGuidelines document for other guidance on what we consider "
"good practice in C and shell, and api-builtin.txt for the support functions "
"available to built-in commands written in C."
msgstr ""

#. type: Title -
#: ../Documentation/howto/new-command.txt:55
#, no-wrap
msgid "What every extension command needs"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/new-command.txt:62
msgid ""
"You must have a man page, written in asciidoc (this is what Git help "
"followed by your subcommand name will display).  Be aware that there is a "
"local asciidoc configuration and macros which you should use.  It's often "
"helpful to start by cloning an existing page and replacing the text content."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/new-command.txt:69
msgid ""
"You must have a test, written to report in TAP (Test Anything Protocol).  "
"Tests are executables (usually shell scripts) that live in the 't' "
"subdirectory of the tree.  Each test name begins with 't' and a sequence "
"number that controls where in the test sequence it will be executed; "
"conventionally the rest of the name stem is that of the command being "
"tested."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/new-command.txt:72
msgid ""
"Read the file t/README to learn more about the conventions to be used in "
"writing tests, and the test support library."
msgstr ""

#. type: Title -
#: ../Documentation/howto/new-command.txt:74
#, no-wrap
msgid "Integrating a command"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/new-command.txt:78
msgid ""
"Here are the things you need to do when you want to merge a new subcommand "
"into the Git tree."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/new-command.txt:80
msgid "Don't forget to sign off your patch!"
msgstr ""

#. type: Plain text
#: ../Documentation/howto/new-command.txt:83
msgid ""
"Append your command name to one of the variables BUILTIN_OBJS, "
"EXTRA_PROGRAMS, SCRIPT_SH, SCRIPT_PERL or SCRIPT_PYTHON."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/new-command.txt:85
msgid "Drop its test in the t directory."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/new-command.txt:89
msgid ""
"If your command is implemented in an interpreted language with a p-code "
"intermediate form, make sure .gitignore in the main directory includes a "
"pattern entry that ignores such files.  Python .pyc and"
msgstr ""

#. type: Block title
#: ../Documentation/howto/new-command.txt:89
#, no-wrap
msgid "pyo files will already be covered."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/new-command.txt:93
msgid ""
"If your command has any dependency on a particular version of your language, "
"document it in the INSTALL file."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/new-command.txt:101
msgid ""
"There is a file command-list.txt in the distribution main directory that "
"categorizes commands by type, so they can be listed in appropriate "
"subsections in the documentation's summary command list.  Add an entry for "
"yours.  To understand the categories, look at command-list.txt in the main "
"directory.  If the new command is part of the typical Git workflow and you "
"believe it common enough to be mentioned in 'git help', map this command to "
"a common group in the column [common]."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/new-command.txt:105
msgid ""
"Give the maintainer one paragraph to include in the RelNotes file to "
"describe the new feature; a good place to do so is in the cover letter "
"[PATCH 0/n]."
msgstr ""

#. type: Plain text
#: ../Documentation/howto/new-command.txt:106
msgid "That's all there is to it."
msgstr ""
