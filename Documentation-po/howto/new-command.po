# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 0.0\n"
"POT-Creation-Date: 2021-10-02 01:07+0900\n"
"PO-Revision-Date: 2021-11-02 11:27+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: ../Documentation/howto/new-command.txt:5
#, no-wrap
msgid ""
"From: Eric S. Raymond <esr@thyrsus.com>\n"
"Abstract: This is how-to documentation for people who want to add "
"extension\n"
" commands to Git.  It should be read alongside api-builtin.txt.\n"
"Content-type: text/asciidoc\n"
msgstr ""
"From: Eric S. Raymond <esr@thyrsus.com>\n"
"Abstract: これは、Gitに拡張コマンドを追加したい人のためのハウツードキュメントです。\n"
" api-builtin.txtと一緒に読む必要があります。\n"
"Content-type: text/asciidoc\n"

#. type: Title =
#: ../Documentation/howto/new-command.txt:7
#, no-wrap
msgid "How to integrate new subcommands"
msgstr "How to integrate new subcommands"

#. type: Plain text
#: ../Documentation/howto/new-command.txt:11
msgid ""
"This is how-to documentation for people who want to add extension commands "
"to Git.  It should be read alongside api-builtin.txt."
msgstr "これは、Gitに拡張コマンドを追加したい人のためのハウツー文書です。 api-builtin.txt と一緒に読む必要があります。"

#. type: Title -
#: ../Documentation/howto/new-command.txt:13
#, no-wrap
msgid "Runtime environment"
msgstr "Runtime environment"

#. type: Plain text
#: ../Documentation/howto/new-command.txt:19
msgid ""
"Git subcommands are standalone executables that live in the Git exec path, "
"normally /usr/lib/git-core.  The git executable itself is a thin wrapper "
"that knows where the subcommands live, and runs them by passing command-line "
"arguments to them."
msgstr "Gitサブコマンドは、Git execパス（通常は /usr/lib/git-core ）に存在するスタンドアローンの実行可能ファイルです。git実行可能ファイル自体は、サブコマンドがどこにあるかを認識し、コマンドライン引数を渡すことによってサブコマンドを実行する薄いラッパー(thin wrapper)です。"

#. type: Plain text
#: ../Documentation/howto/new-command.txt:23
msgid ""
"(If \"git foo\" is not found in the Git exec path, the wrapper will look in "
"the rest of your $PATH for it.  Thus, it's possible to write local Git "
"extensions that don't live in system space.)"
msgstr "( \"git foo\" がGit execパスに見つからない場合、ラッパーはあなたの $PATH の残りの部分でそれを探します。したがって、システム空間に存在しないローカルGit拡張機能を作成することができます。）"

#. type: Title -
#: ../Documentation/howto/new-command.txt:25
#, no-wrap
msgid "Implementation languages"
msgstr "Implementation languages"

#. type: Plain text
#: ../Documentation/howto/new-command.txt:29
msgid "Most subcommands are written in C or shell.  A few are written in Perl."
msgstr "ほとんどのサブコマンドはCまたはシェルで記述されています。いくつかはPerlで書かれています。"

#. type: Plain text
#: ../Documentation/howto/new-command.txt:37
msgid ""
"While we strongly encourage coding in portable C for portability, these "
"specific scripting languages are also acceptable.  We won't accept more "
"without a very strong technical case, as we don't want to broaden the Git "
"suite's required dependencies.  Import utilities, surgical tools, remote "
"helpers and other code at the edges of the Git suite are more lenient and we "
"allow Python (and even Tcl/tk), but they should not be used for core "
"functions."
msgstr "移植性のためにポータブルC(portable C)でコーディングすることを強くお勧めしますが、これらの特定のスクリプト言語も受け入れられます。Gitスイートに必要な依存関係を広げたくないので、非常に強力な技術的理由がなければ、これ以上は受け入れることはできません。Gitスイートの隅にあるインポートユーティリティ、surgical tools、リモートヘルパー、その他のコードについてはより寛大で、Python(およびTcl/tk)を許可しますが、コア機能には使用しないでください。"

#. type: Plain text
#: ../Documentation/howto/new-command.txt:42
msgid ""
"This may change in the future.  Especially Python is not allowed in core "
"because we need better Python integration in the Git Windows installer "
"before we can be confident people in that environment won't experience an "
"unacceptably large loss of capability."
msgstr "これについては将来変更される可能性はありますが、特に、今のところPythonはコアで使う事は許可されていません。なぜなら、Windows環境の人々が、許容できないほど大きな機能の損失を経験しないで済むようにするには Git Windowsインストーラーでより良いPython統合が必要だからです。"

#. type: Plain text
#: ../Documentation/howto/new-command.txt:49
msgid ""
"C commands are normally written as single modules, named after the command, "
"that link a collection of functions called libgit.  Thus, your command "
"'git-foo' would normally be implemented as a single \"git-foo.c\" (or "
"\"builtin/foo.c\" if it is to be linked to the main binary); this "
"organization makes it easy for people reading the code to find things."
msgstr "Cコマンドは通常、コマンドにちなんで名付けられた単一のモジュールとして記述され、libgitと呼ばれる関数のコレクションをリンクします。したがって、コマンド「git-foo」は通常、単一の「git-foo.c」（またはメインバイナリにリンクする場合は「builtin / foo.c」）として実装されます。 この機構により、コードを読んでいる人が簡単にそのブツを見つけることができます。"

#. type: Plain text
#: ../Documentation/howto/new-command.txt:53
msgid ""
"See the CodingGuidelines document for other guidance on what we consider "
"good practice in C and shell, and api-builtin.txt for the support functions "
"available to built-in commands written in C."
msgstr "Cおよびシェルでのグッドプラクティスとされるその他のガイダンスについては、 CodingGuidelines 文書を参照してください。また、Cで記述された組み込みコマンドで使用できるサポート関数については、 api-builtin.txt を参照してください。"

#. type: Title -
#: ../Documentation/howto/new-command.txt:55
#, no-wrap
msgid "What every extension command needs"
msgstr "What every extension command needs"

#. type: Plain text
#: ../Documentation/howto/new-command.txt:62
msgid ""
"You must have a man page, written in asciidoc (this is what Git help "
"followed by your subcommand name will display).  Be aware that there is a "
"local asciidoc configuration and macros which you should use.  It's often "
"helpful to start by cloning an existing page and replacing the text content."
msgstr "asciidocで書かれたmanページが必要です(これは、Gitヘルプの後にサブコマンド名が続くものです)。 使用する必要のあるローカルのasciidoc configurationとマクロがあることに注意してください。 多くの場合、既存のページのクローンを作成し、テキストコンテンツを置き換えることから始めるのがと便利です。"

#. type: Plain text
#: ../Documentation/howto/new-command.txt:69
msgid ""
"You must have a test, written to report in TAP (Test Anything Protocol).  "
"Tests are executables (usually shell scripts) that live in the 't' "
"subdirectory of the tree.  Each test name begins with 't' and a sequence "
"number that controls where in the test sequence it will be executed; "
"conventionally the rest of the name stem is that of the command being "
"tested."
msgstr "TAP(Test Anything Protocol)でレポートするように作成されたテストが必要です。テストは、ツリーの 't' サブディレクトリにある実行可能ファイル(通常はシェルスクリプト)です。 各テスト名は、 't' と、テストシーケンスのどこで実行されるかを制御するシーケンス番号で始まります。伝統的に、名前の語幹の残りの部分は、テストされるコマンドの語幹です。"

#. type: Plain text
#: ../Documentation/howto/new-command.txt:72
msgid ""
"Read the file t/README to learn more about the conventions to be used in "
"writing tests, and the test support library."
msgstr "ファイル t/README を読んで、テストの作成に使用される規則とテストサポートライブラリの詳細を確認してください。"

#. type: Title -
#: ../Documentation/howto/new-command.txt:74
#, no-wrap
msgid "Integrating a command"
msgstr "Integrating a command"

#. type: Plain text
#: ../Documentation/howto/new-command.txt:78
msgid ""
"Here are the things you need to do when you want to merge a new subcommand "
"into the Git tree."
msgstr "新しいサブコマンドをGitツリーにマージするときに行う必要がある作業は以下のとおりです。"

#. type: Plain text
#: ../Documentation/howto/new-command.txt:80
msgid "Don't forget to sign off your patch!"
msgstr "パッチに署名する(sign off)ことを忘れないでください！"

#. type: Plain text
#: ../Documentation/howto/new-command.txt:83
msgid ""
"Append your command name to one of the variables BUILTIN_OBJS, "
"EXTRA_PROGRAMS, SCRIPT_SH, SCRIPT_PERL or SCRIPT_PYTHON."
msgstr "あなたのコマンド名を変数 BUILTIN_OBJS または EXTRA_PROGRAMS または SCRIPT_SH または SCRIPT_PERL または SCRIPT_PYTHON のいずれかに追加します。"

#. type: Plain text
#: ../Documentation/howto/new-command.txt:85
msgid "Drop its test in the t directory."
msgstr "そのテストをtディレクトリに配置します。"

#. type: Plain text
#: ../Documentation/howto/new-command.txt:89
msgid ""
"If your command is implemented in an interpreted language with a p-code "
"intermediate form, make sure .gitignore in the main directory includes a "
"pattern entry that ignores such files.  Python .pyc and"
msgstr "あなたのコマンドがp-code中間形式のインタプリタ言語で実装されている場合は、メインディレクトリの .gitignore にそのようなファイルを無視するパターンエントリが含まれていることを確認してください。 Python.pyc と"

#. type: Block title
#: ../Documentation/howto/new-command.txt:89
#, no-wrap
msgid "pyo files will already be covered."
msgstr "pyo ファイルはすでに網羅されています。"

#. type: Plain text
#: ../Documentation/howto/new-command.txt:93
msgid ""
"If your command has any dependency on a particular version of your language, "
"document it in the INSTALL file."
msgstr "あなたのコマンドが特定のバージョンの言語に依存している場合は、INSTALLファイルに文書化してください。"

#. type: Plain text
#: ../Documentation/howto/new-command.txt:101
msgid ""
"There is a file command-list.txt in the distribution main directory that "
"categorizes commands by type, so they can be listed in appropriate "
"subsections in the documentation's summary command list.  Add an entry for "
"yours.  To understand the categories, look at command-list.txt in the main "
"directory.  If the new command is part of the typical Git workflow and you "
"believe it common enough to be mentioned in 'git help', map this command to "
"a common group in the column [common]."
msgstr "コマンドをタイプ別に分類するファイル command-list.txt が配布メインディレクトリにあるため、ドキュメントの要約コマンドリスト(summary command list)の適切なサブセクションにリストできます。あなたのエントリを追加してください。どのカテゴリが適切かを理解するには、メインディレクトリの command-list.txt を確認してください。新しいコマンドが一般的なGitワークフローの一部であり、 'git help' で言及されるほど一般的であると思われる場合は、このコマンドを [common] 列の共通グループにマップします。"

#. type: Plain text
#: ../Documentation/howto/new-command.txt:105
msgid ""
"Give the maintainer one paragraph to include in the RelNotes file to "
"describe the new feature; a good place to do so is in the cover letter "
"[PATCH 0/n]."
msgstr "新機能を説明するためにRelNotesファイルに含める段落を1つ、メンテナに与えます。 これを行うのに適した場所は、 cover letter [PATCH 0/n] です。"

#. type: Plain text
#: ../Documentation/howto/new-command.txt:106
msgid "That's all there is to it."
msgstr "以上"
