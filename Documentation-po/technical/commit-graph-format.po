# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-10-02 01:06+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation/technical/commit-graph-format.txt:2
#, no-wrap
msgid "Git commit graph format"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:6
msgid ""
"The Git commit graph stores a list of commit OIDs and some associated "
"metadata, including:"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:8
msgid "The generation number of the commit."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:10
msgid "The root tree OID."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:12
msgid "The commit date."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:15
msgid ""
"The parents of the commit, stored using positional references within the "
"graph file."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:18
msgid ""
"The Bloom filter of the commit carrying the paths that were changed between "
"the commit and its first parent, if requested."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:23
msgid ""
"These positional references are stored as unsigned 32-bit integers "
"corresponding to the array position within the list of commit OIDs. Due to "
"some special constants we use to track parents, we can store at most (1 << "
"30) + (1 << 29) + (1 << 28) - 1 (around 1.8 billion) commits."
msgstr ""

#. type: Title ==
#: ../Documentation/technical/commit-graph-format.txt:24
#, no-wrap
msgid "Commit graph files have the following format:"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:30
msgid ""
"In order to allow extensions that add extra data to the graph, we organize "
"the body into \"chunks\" and provide a binary lookup table at the beginning "
"of the body. The header includes certain values, such as number of chunks "
"and hash type."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:32
msgid "All multi-byte numbers are in network byte order."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:34
msgid "HEADER:"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:37
#, no-wrap
msgid ""
"  4-byte signature:\n"
"      The signature is: {'C', 'G', 'P', 'H'}\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:40
#, no-wrap
msgid ""
"  1-byte version number:\n"
"      Currently, the only valid version is 1.\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:48
#, no-wrap
msgid ""
"  1-byte Hash Version\n"
"      We infer the hash length (H) from this value:\n"
"\t1 => SHA-1\n"
"\t2 => SHA-256\n"
"      If the hash type does not match the repository's hash algorithm, the\n"
"      commit-graph file should be ignored with a warning presented to the\n"
"      user.\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:50
#, no-wrap
msgid "  1-byte number (C) of \"chunks\"\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:54
#, no-wrap
msgid ""
"  1-byte number (B) of base commit-graphs\n"
"      We infer the length (H*B) of the Base Graphs chunk\n"
"      from this value.\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:56
msgid "CHUNK LOOKUP:"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:63
#, no-wrap
msgid ""
"  (C + 1) * 12 bytes listing the table of contents for the chunks:\n"
"      First 4 bytes describe the chunk id. Value 0 is a terminating label.\n"
"      Other 8 bytes provide the byte-offset in current file for chunk to\n"
"      start. (Chunks are ordered contiguously in the file, so you can "
"infer\n"
"      the length using the next chunk position if necessary.) Each chunk\n"
"      ID appears at most once.\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:66
#, no-wrap
msgid ""
"  The CHUNK LOOKUP matches the table of contents from\n"
"  link:technical/chunk-format.html[the chunk-based file format].\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:70
#, no-wrap
msgid ""
"  The remaining data in the body is described one chunk at a time, and\n"
"  these chunks may be given in any order. Chunks are required unless\n"
"  otherwise specified.\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:72
msgid "CHUNK DATA:"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:77
#, no-wrap
msgid ""
"  OID Fanout (ID: {'O', 'I', 'D', 'F'}) (256 * 4 bytes)\n"
"      The ith entry, F[i], stores the number of OIDs with first\n"
"      byte at most i. Thus F[255] stores the total\n"
"      number of commits (N).\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:80
#, no-wrap
msgid ""
"  OID Lookup (ID: {'O', 'I', 'D', 'L'}) (N * H bytes)\n"
"      The OIDs for all commits in the graph, sorted in ascending order.\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:82
#, no-wrap
msgid "  Commit Data (ID: {'C', 'D', 'A', 'T' }) (N * (H + 16) bytes)\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:83
#, no-wrap
msgid "The first H bytes are for the OID of the root tree.\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:88
#, no-wrap
msgid ""
"The next 8 bytes are for the positions of the first two parents\n"
"of the ith commit. Stores value 0x70000000 if no parent in that\n"
"position. If there are more than two parents, the second value\n"
"has its most-significant bit on and the other bits store an array\n"
"position into the Extra Edge List chunk.\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:95
#, no-wrap
msgid ""
"The next 8 bytes store the topological level (generation number v1)\n"
"of the commit and\n"
"the commit time in seconds since EPOCH. The generation number\n"
"uses the higher 30 bits of the first 4 bytes, while the commit\n"
"time uses the 32 bits of the second 4 bytes, along with the lowest\n"
"2 bits of the lowest byte, storing the 33rd and 34th bit of the\n"
"commit time.\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:97
#, no-wrap
msgid "Generation Data (ID: {'G', 'D', 'A', 'T' }) (N * 4 bytes) [Optional]\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:99
#, no-wrap
msgid ""
"This list of 4-byte values store corrected commit date offsets for the\n"
"commits, arranged in the same order as commit data chunk.\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:103
#, no-wrap
msgid ""
"If the corrected commit date offset cannot be stored within 31 bits,\n"
"the value has its most-significant bit on and the other bits store\n"
"the position of corrected commit date into the Generation Data Overflow\n"
"chunk.\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:106
#, no-wrap
msgid ""
"Generation Data chunk is present only when commit-graph file is written\n"
"by compatible versions of Git and in case of split commit-graph chains,\n"
"the topmost layer also has Generation Data chunk.\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:108
#, no-wrap
msgid "Generation Data Overflow (ID: {'G', 'D', 'O', 'V' }) [Optional]\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:111
#, no-wrap
msgid ""
"This list of 8-byte values stores the corrected commit date offsets\n"
"for commits with corrected commit date offsets that cannot be\n"
"stored within 31 bits.\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:114
#, no-wrap
msgid ""
"Generation Data Overflow chunk is present only when Generation Data\n"
"chunk is present and atleast one corrected commit date offset cannot\n"
"be stored within 31 bits.\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:116
#, no-wrap
msgid "Extra Edge List (ID: {'E', 'D', 'G', 'E'}) [Optional]\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:122
#, no-wrap
msgid ""
"This list of 4-byte values store the second through nth parents for\n"
"all octopus merges. The second parent value in the commit data stores\n"
"an array position within this list along with the most-significant bit\n"
"on. Starting at that array position, iterate through this list of commit\n"
"positions for the parents until reaching a value with the most-significant\n"
"bit on. The other bits correspond to the position of the last parent.\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:124
msgid "Bloom Filter Index (ID: {'B', 'I', 'D', 'X'}) (N * 4 bytes) [Optional]"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:128
msgid ""
"The ith entry, BIDX[i], stores the number of bytes in all Bloom filters from "
"commit 0 to commit i (inclusive) in lexicographic order. The Bloom filter "
"for the i-th commit spans from BIDX[i-1] to BIDX[i] (plus header length), "
"where BIDX[-1] is 0."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:129
msgid "The BIDX chunk is ignored if the BDAT chunk is not present."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:131
#, no-wrap
msgid "Bloom Filter Data (ID: {'B', 'D', 'A', 'T'}) [Optional]\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:132
#, no-wrap
msgid "It starts with header consisting of three unsigned 32-bit integers:\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:133
#, no-wrap
msgid "Version of the hash algorithm being used. We currently only support\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:139
#, no-wrap
msgid ""
"value 1 which corresponds to the 32-bit version of the murmur3 hash\n"
"implemented exactly as described in\n"
"https://en.wikipedia.org/wiki/MurmurHash#Algorithm and the double\n"
"hashing technique using seed values 0x293ae76f and 0x7e646e2 as\n"
"described in https://doi.org/10.1007/978-3-540-30494-4_26 \"Bloom Filters\n"
"in Probabilistic Verification\"\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:140
#, no-wrap
msgid "The number of times a path is hashed and hence the number of bit positions\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:141
#, no-wrap
msgid "that cumulatively determine whether a file is present in the commit.\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:142
#, no-wrap
msgid ""
"The minimum number of bits 'b' per entry in the Bloom filter. If the "
"filter\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:144
#, no-wrap
msgid ""
"contains 'n' entries, then the filter size is the minimum number of 64-bit\n"
"words that contain n*b bits.\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:146
#, no-wrap
msgid ""
"The rest of the chunk is the concatenation of all the computed Bloom\n"
"filters for the commits in lexicographic order.\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:148
#, no-wrap
msgid ""
"Note: Commits with no changes or more than 512 changes have Bloom filters\n"
"of length one, with either all bits set to zero or one respectively.\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:149
#, no-wrap
msgid "The BDAT chunk is present if and only if BIDX is present.\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:151
#, no-wrap
msgid "Base Graphs List (ID: {'B', 'A', 'S', 'E'}) [Optional]\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:155
#, no-wrap
msgid ""
"This list of H-byte hashes describe a set of B commit-graph files that\n"
"form a commit-graph chain. The graph position for the ith commit in this\n"
"file's OID Lookup chunk is equal to i plus the number of commits in all\n"
"base graphs.  If B is non-zero, this chunk must exist.\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:157
msgid "TRAILER:"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/commit-graph-format.txt:158
#, no-wrap
msgid "\tH-byte HASH-checksum of all of the above.\n"
msgstr ""
