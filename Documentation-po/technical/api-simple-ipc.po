# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 0.0\n"
"POT-Creation-Date: 2021-11-04 05:35+0900\n"
"PO-Revision-Date: 2022-05-24 16:50+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/technical/api-simple-ipc.txt:2
#, no-wrap
msgid "Simple-IPC API"
msgstr "Simple-IPC API"

#. type: Plain text
#: ../Documentation-sedout/technical/api-simple-ipc.txt:8
msgid ""
"The Simple-IPC API is a collection of `ipc_` prefixed library routines and a "
"basic communication protocol that allow an IPC-client process to send an "
"application-specific IPC-request message to an IPC-server process and "
"receive an application-specific IPC-response message."
msgstr "Simple-IPC APIは、 `ipc_` プレフィックス付きライブラリルーチンと基本的な通信プロトコルのコレクションであり、IPCクライアントプロセスがアプリケーション固有のIPC要求メッセージをIPCサーバープロセスに送信し、アプリケーション固有のIPC応答メッセージを受信できるようにします。"

#. type: Plain text
#: ../Documentation-sedout/technical/api-simple-ipc.txt:13
msgid ""
"Communication occurs over a named pipe on Windows and a Unix domain socket "
"on other platforms.  IPC-clients and IPC-servers rendezvous at a previously "
"agreed-to application-specific pathname (which is outside the scope of this "
"design) that is local to the computer system."
msgstr "通信は、Windowsでは名前付きパイプを介して、他のプラットフォームではUnixドメインソケットを介して行われます。 IPCクライアントとIPCサーバーは、コンピューターシステムに対してローカルである、以前に合意されたアプリケーション固有のパス名(この設計の範囲外)で会合(rendezvous)します。"

#. type: Plain text
#: ../Documentation-sedout/technical/api-simple-ipc.txt:20
msgid ""
"The IPC-server routines within the server application process create a "
"thread pool to listen for connections and receive request messages from "
"multiple concurrent IPC-clients.  When received, these messages are "
"dispatched up to the server application callbacks for handling.  IPC-server "
"routines then incrementally relay responses back to the IPC-client."
msgstr "サーバーアプリケーションプロセス内のIPCサーバールーチンは、接続をリッスンし、複数の同時IPCクライアントから要求メッセージを受信するためのスレッドプールを作成します。 受信すると、これらのメッセージは処理のためにサーバーアプリケーションのコールバックまでディスパッチされます。 次に、IPCサーバールーチンは、応答をIPCクライアントに段階的にリレー(incrementally relay)します。"

#. type: Plain text
#: ../Documentation-sedout/technical/api-simple-ipc.txt:24
msgid ""
"The IPC-client routines within a client application process connect to the "
"IPC-server and send a request message and wait for a response.  When "
"received, the response is returned back the caller."
msgstr "クライアントアプリケーションプロセス内のIPCクライアントルーチンはIPCサーバーに接続し、要求メッセージを送信して応答を待ちます。 受信すると、応答は呼び出し元に返されます。"

#. type: Plain text
#: ../Documentation-sedout/technical/api-simple-ipc.txt:33
msgid ""
"For example, the `fsmonitor--daemon` feature will be built as a server "
"application on top of the IPC-server library routines.  It will have threads "
"watching for file system events and a thread pool waiting for client "
"connections.  Clients, such as `git status` will request a list of file "
"system events since a point in time and the server will respond with a list "
"of changed files and directories.  The formats of the request and response "
"are application-specific; the IPC-client and IPC-server routines treat them "
"as opaque byte streams."
msgstr "たとえば、 `fsmonitor--daemon` 機能は、IPCサーバーライブラリルーチンの上にサーバーアプリケーションとして構築されます。 ファイルシステムイベントを監視するスレッドと、クライアント接続を待機するスレッドプールがあります。 `git status` などのクライアントは、ある時点以降のファイルシステムイベントのリストを要求し、サーバーは変更されたファイルとディレクトリのリストで応答します。 要求と応答の形式はアプリケーション固有です。 IPCクライアントおよびIPCサーバールーチンは、それらを不透明なバイトストリームとして扱います。"

#. type: Title -
#: ../Documentation-sedout/technical/api-simple-ipc.txt:36
#, no-wrap
msgid "Comparison with sub-process model"
msgstr "サブプロセスモデルとの比較"

#. type: Plain text
#: ../Documentation-sedout/technical/api-simple-ipc.txt:46
msgid ""
"The Simple-IPC mechanism differs from the existing `sub-process.c` model "
"(Documentation/technical/long-running-process-protocol.txt) and used by "
"applications like Git-LFS.  In the LFS-style sub-process model the helper is "
"started by the foreground process, communication happens via a pair of file "
"descriptors bound to the stdin/stdout of the sub-process, the sub-process "
"only serves the current foreground process, and the sub-process exits when "
"the foreground process terminates."
msgstr "Simple-IPCメカニズムは、既存の `sub-process.c` モデル(Documentation/technical/long-running-process-protocol.txt)とは異なり、Git-LFSなどのアプリケーションで使用されます。 LFSスタイルのサブプロセスモデルでは、ヘルパーはフォアグラウンドプロセスによって開始され、通信はサブプロセスの stdin/stdout にバインドされたファイル・デスクリプタのペアを介して行われ、サブプロセスは現在のフォアグラウンドプロセスのみを提供します。 フォアグラウンドプロセスが終了すると、サブプロセスは終了します。"

#. type: Plain text
#: ../Documentation-sedout/technical/api-simple-ipc.txt:56
msgid ""
"In the Simple-IPC model the server is a very long-running service.  It can "
"service many clients at the same time and has a private socket or named pipe "
"connection to each active client.  It might be started (on-demand) by the "
"current client process or it might have been started by a previous client or "
"by the OS at boot time.  The server process is not associated with a "
"terminal and it persists after clients terminate.  Clients do not have "
"access to the stdin/stdout of the server process and therefore must "
"communicate over sockets or named pipes."
msgstr "Simple-IPCモデルでは、サーバーは非常に長時間実行されるサービスです。 同時に多くのクライアントにサービスを提供でき、アクティブな各クライアントへのプライベートソケットまたは名前付きパイプ接続があります。 現在のクライアントプロセスによって(オンデマンドで)開始されたか、以前のクライアントまたは起動時にOSによって開始された可能性があります。 サーバープロセスは端末に関連付けられておらず、クライアントが終了した後も存続します。 クライアントはサーバープロセスの stdin/stdout にアクセスできないため、ソケットまたは名前付きパイプを介して通信する必要があります。"

#. type: Title -
#: ../Documentation-sedout/technical/api-simple-ipc.txt:59
#, no-wrap
msgid "Server startup and shutdown"
msgstr "Server startup and shutdown"

#. type: Plain text
#: ../Documentation-sedout/technical/api-simple-ipc.txt:67
msgid ""
"How an application server based upon IPC-server is started is also outside "
"the scope of the Simple-IPC design and is a property of the application "
"using it.  For example, the server might be started or restarted during "
"routine maintenance operations, or it might be started as a system service "
"during the system boot-up sequence, or it might be started on-demand by a "
"foreground Git command when needed."
msgstr "IPCサーバーに基づくアプリケーションサーバーの起動方法も Simple-IPC 設計の範囲外であり、それを使用するアプリケーションの範疇です。 たとえば、サーバーは定期的なメンテナンス操作中に起動または再起動されたり、システムの起動シーケンス中にシステムサービスとして起動されたり、必要に応じてフォアグラウンドGitコマンドによってオンデマンドで起動されたりする場合があります。"

#. type: Plain text
#: ../Documentation-sedout/technical/api-simple-ipc.txt:71
msgid ""
"Similarly, server shutdown is a property of the application using the simple-"
"ipc routines.  For example, the server might decide to shutdown when idle or "
"only upon explicit request."
msgstr "同様に、サーバーのシャットダウンは、simple-ipc ルーチンを使用するアプリケーションの範疇です。 たとえば、サーバーは、アイドル状態のとき、または明示的な要求があった場合にのみシャットダウンすることを決定する場合があります。"

#. type: Title -
#: ../Documentation-sedout/technical/api-simple-ipc.txt:74
#, no-wrap
msgid "Simple-IPC protocol"
msgstr "Simple-IPC protocol"

#. type: Plain text
#: ../Documentation-sedout/technical/api-simple-ipc.txt:80
msgid ""
"The Simple-IPC protocol consists of a single request message from the client "
"and an optional response message from the server.  Both the client and "
"server messages are unlimited in length and are terminated with a flush "
"packet."
msgstr "Simple-IPCプロトコルは、クライアントからの単一の要求メッセージとサーバーからのオプションの応答メッセージで構成されます。 クライアントメッセージとサーバーメッセージはどちらも長さが無制限で、フラッシュパケットで終了します。"

#. type: Plain text
#: ../Documentation-sedout/technical/api-simple-ipc.txt:88
msgid ""
"The pkt-line routines (Documentation/technical/protocol-common.txt)  are "
"used to simplify buffer management during message generation, transmission, "
"and reception.  A flush packet is used to mark the end of the message.  This "
"allows the sender to incrementally generate and transmit the message.  It "
"allows the receiver to incrementally receive the message in chunks and to "
"know when they have received the entire message."
msgstr "pkt-lineルーチン達(Documentation/technical/protocol-common.txt)は、メッセージの、生成中や送信中や受信中の、バッファー管理を簡素化するために使用されます。 フラッシュパケットは、メッセージの終わりを示すために使用されます。 これにより、送信側はメッセージを段階的に生成して送信できます。 これにより、受信者はメッセージをチャンクで段階的に受信し、メッセージ全体をいつ受信したかを知ることができます。"

#. type: Plain text
#: ../Documentation-sedout/technical/api-simple-ipc.txt:94
msgid ""
"The actual byte format of the client request and server response messages "
"are application specific.  The IPC layer transmits and receives them as "
"opaque byte buffers without any concern for the content within.  It is the "
"job of the calling application layer to understand the contents of the "
"request and response messages."
msgstr "クライアント要求およびサーバー応答メッセージの実際のバイト形式は、アプリケーション固有です。 IPC層は、内部のコンテンツを気にすることなく、不透明なバイトバッファとしてそれらを送受信します。 要求メッセージと応答メッセージの内容を理解するのは、呼び出し元のアプリケーション層の仕事です。"

#. type: Title -
#: ../Documentation-sedout/technical/api-simple-ipc.txt:97
#, no-wrap
msgid "Summary"
msgstr "Summary"

#. type: Plain text
#: ../Documentation-sedout/technical/api-simple-ipc.txt:105
msgid ""
"Conceptually, the Simple-IPC protocol is similar to an HTTP REST request.  "
"Clients connect, make an application-specific and stateless request, receive "
"an application-specific response, and disconnect.  It is a one round trip "
"facility for querying the server.  The Simple-IPC routines hide the socket, "
"named pipe, and thread pool details and allow the application layer to focus "
"on the application at hand."
msgstr "概念的には、Simple-IPCプロトコルは HTTP REST 要求に似ています。 クライアントは接続し、アプリケーション固有のステートレス要求を作成し、アプリケーション固有の応答を受信して、切断します。 これは、サーバーでクエリを実行するための1回の往復機能です。 Simple-IPCルーチンは、ソケットや、名前付きパイプや、スレッドプールの詳細を非表示にし、アプリケーション層が手元のアプリケーションに集中できるようにします。"
