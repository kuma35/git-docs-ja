# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-10-02 01:06+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation/technical/api-error-handling.txt:2
#, no-wrap
msgid "Error reporting in git"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/api-error-handling.txt:6
msgid ""
"`BUG`, `die`, `usage`, `error`, and `warning` report errors of various "
"kinds."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/api-error-handling.txt:9
msgid ""
"`BUG` is for failed internal assertions that should never happen, i.e. a bug "
"in git itself."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/api-error-handling.txt:12
msgid ""
"`die` is for fatal application errors.  It prints a message to the user and "
"exits with status 128."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/api-error-handling.txt:16
msgid ""
"`usage` is for errors in command line usage.  After printing its message, it "
"exits with status 129.  (See also `usage_with_options` in the "
"link:api-parse-options.html[parse-options API].)"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/api-error-handling.txt:20
msgid ""
"`error` is for non-fatal library errors.  It prints a message to the user "
"and returns -1 for convenience in signaling the error to the caller."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/api-error-handling.txt:25
msgid ""
"`warning` is for reporting situations that probably should not occur but "
"which the user (and Git) can continue to work around without running into "
"too many problems.  Like `error`, it returns -1 after reporting the "
"situation to the caller."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/api-error-handling.txt:28
msgid ""
"These reports will be logged via the trace2 facility. See the \"error\" "
"event in link:api-trace2.txt[trace2 API]."
msgstr ""

#. type: Title -
#: ../Documentation/technical/api-error-handling.txt:30
#, no-wrap
msgid "Customizable error handlers"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/api-error-handling.txt:37
msgid ""
"The default behavior of `die` and `error` is to write a message to stderr "
"and then exit or return as appropriate.  This behavior can be overridden "
"using `set_die_routine` and `set_error_routine`.  For example, \"git "
"daemon\" uses set_die_routine to write the reason `die` was called to syslog "
"before exiting."
msgstr ""

#. type: Title -
#: ../Documentation/technical/api-error-handling.txt:39
#, no-wrap
msgid "Library errors"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/api-error-handling.txt:43
msgid ""
"Functions return a negative integer on error.  Details beyond that vary from "
"function to function:"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/api-error-handling.txt:47
msgid ""
"Some functions return -1 for all errors.  Others return a more specific "
"value depending on how the caller might want to react to the error."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/api-error-handling.txt:50
msgid ""
"Some functions report the error to stderr with `error`, while others leave "
"that for the caller to do."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/api-error-handling.txt:53
msgid ""
"errno is not meaningful on return from most functions (except for thin "
"wrappers for system calls)."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/api-error-handling.txt:55
msgid "Check the function's API documentation to be sure."
msgstr ""

#. type: Title -
#: ../Documentation/technical/api-error-handling.txt:57
#, no-wrap
msgid "Caller-handled errors"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/api-error-handling.txt:63
msgid ""
"An increasing number of functions take a parameter 'struct strbuf *err'.  On "
"error, such functions append a message about what went wrong to the 'err' "
"strbuf.  The message is meant to be complete enough to be passed to `die` or "
"`error` as-is.  For example:"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/api-error-handling.txt:66
#, no-wrap
msgid ""
"\tif (ref_transaction_commit(transaction, &err))\n"
"\t\tdie(\"%s\", err.buf);\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/api-error-handling.txt:69
msgid ""
"The 'err' parameter will be untouched if no error occurred, so multiple "
"function calls can be chained:"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/api-error-handling.txt:75
#, no-wrap
msgid ""
"\tt = ref_transaction_begin(&err);\n"
"\tif (!t ||\n"
"\t    ref_transaction_update(t, \"HEAD\", ..., &err) ||\n"
"\t    ret_transaction_commit(t, &err))\n"
"\t\tdie(\"%s\", err.buf);\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/api-error-handling.txt:78
msgid ""
"The 'err' parameter must be a pointer to a valid strbuf.  To silence a "
"message, pass a strbuf that is explicitly ignored:"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/api-error-handling.txt:81
#, no-wrap
msgid ""
"\tif (thing_that_can_fail_in_an_ignorable_way(..., &err))\n"
"\t\t/* This failure is okay. */\n"
"\t\tstrbuf_reset(&err);\n"
msgstr ""
