# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 0.0\n"
"POT-Creation-Date: 2022-09-24 21:41+0900\n"
"PO-Revision-Date: 2022-05-24 10:52+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/technical/api-error-handling.txt:2
#, no-wrap
msgid "Error reporting in git"
msgstr "Error reporting in git"

#. type: Plain text
#: ../Documentation-sedout/technical/api-error-handling.txt:6
#, fuzzy
#| msgid ""
#| "`BUG`, `die`, `usage`, `error`, and `warning` report errors of various "
#| "kinds."
msgid ""
"`BUG`, `bug`, `die`, `usage`, `error`, and `warning` report errors of "
"various kinds."
msgstr ""
"`BUG`, `die`, `usage`, `error`, `warning` は、さまざまな種類のエラーを報告し"
"ます。"

#. type: Plain text
#: ../Documentation-sedout/technical/api-error-handling.txt:9
msgid ""
"`BUG` is for failed internal assertions that should never happen, i.e. a bug "
"in git itself."
msgstr ""
"`BUG` は、決して起こらないはずの失敗した内部アサーション、つまりgit自体のバグ"
"のためのものです。"

#. type: Plain text
#: ../Documentation-sedout/technical/api-error-handling.txt:12
msgid ""
"`bug` (lower-case, not `BUG`) is supposed to be used like `BUG` but prints a "
"\"BUG\" message instead of calling `abort()`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/api-error-handling.txt:17
msgid ""
"A call to `bug()` will then result in a \"real\" call to the `BUG()` "
"function, either explicitly by invoking `BUG_if_bug()` after call(s)  to "
"`bug()`, or implicitly at `exit()` time where we'll check if we encountered "
"any outstanding `bug()` invocations."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/api-error-handling.txt:22
msgid ""
"If there were no prior calls to `bug()` before invoking `BUG_if_bug()` the "
"latter is a NOOP. The `BUG_if_bug()` function takes the same arguments as "
"`BUG()` itself. Calling `BUG_if_bug()` explicitly isn't necessary, but "
"ensures that we die as soon as possible."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/api-error-handling.txt:27
msgid ""
"If you know you had prior calls to `bug()` then calling `BUG()` itself is "
"equivalent to calling `BUG_if_bug()`, the latter being a wrapper calling "
"`BUG()` if we've set a flag indicating that we've called `bug()`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/api-error-handling.txt:31
msgid ""
"This is for the convenience of APIs who'd like to potentially report more "
"than one \"bug\", such as the optbug() validation in parse-options.c."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/api-error-handling.txt:34
msgid ""
"`die` is for fatal application errors.  It prints a message to the user and "
"exits with status 128."
msgstr ""
"`die` は致命的なアプリケーションエラー用です。 ユーザーにメッセージを出力し、"
"ステータス128で終了します。"

#. type: Plain text
#: ../Documentation-sedout/technical/api-error-handling.txt:38
msgid ""
"`usage` is for errors in command line usage.  After printing its message, it "
"exits with status 129.  (See also `usage_with_options` in the link:api-parse-"
"options.html[parse-options API].)"
msgstr ""
"`usage` は、コマンドラインの使用法のエラー用です。 メッセージを出力した後、ス"
"テータス129で終了します(link:api-parse-options.html[parse-options API] の "
"`usage_with_options` も参照してください)。"

#. type: Plain text
#: ../Documentation-sedout/technical/api-error-handling.txt:42
msgid ""
"`error` is for non-fatal library errors.  It prints a message to the user "
"and returns -1 for convenience in signaling the error to the caller."
msgstr ""
"`error` は、致命的ではないライブラリエラー用です。 ユーザーにメッセージを出力"
"し、呼び出し元にエラーを通知するのに便利なように -1 を返します。"

#. type: Plain text
#: ../Documentation-sedout/technical/api-error-handling.txt:47
msgid ""
"`warning` is for reporting situations that probably should not occur but "
"which the user (and Git) can continue to work around without running into "
"too many problems.  Like `error`, it returns -1 after reporting the "
"situation to the caller."
msgstr ""
"`warning` は、おそらく発生しないはずの状況を報告するためのものですが、ユー"
"ザー(およびGit)はあまり多くの問題に遭遇することなく回避を続けることができま"
"す。 `error` と同様に、呼び出し元に状況を報告した後、 -1 を返します。"

#. type: Plain text
#: ../Documentation-sedout/technical/api-error-handling.txt:50
#, fuzzy
#| msgid ""
#| "These reports will be logged via the trace2 facility. See the \"error\" "
#| "event in link:api-trace2.txt[trace2 API]."
msgid ""
"These reports will be logged via the trace2 facility. See the \"error\" "
"event in link:api-trace2.html[trace2 API]."
msgstr ""
"これらのレポートは、trace2機能を介してログに記録されます。 link:api-trace2."
"txt[trace2 API] の「error」イベントを参照してください。"

#. type: Title -
#: ../Documentation-sedout/technical/api-error-handling.txt:52
#, no-wrap
msgid "Customizable error handlers"
msgstr "Customizable error handlers"

#. type: Plain text
#: ../Documentation-sedout/technical/api-error-handling.txt:59
msgid ""
"The default behavior of `die` and `error` is to write a message to stderr "
"and then exit or return as appropriate.  This behavior can be overridden "
"using `set_die_routine` and `set_error_routine`.  For example, \"git daemon"
"\" uses set_die_routine to write the reason `die` was called to syslog "
"before exiting."
msgstr ""
"`die` と `error` のデフォルトの動作は、stderrにメッセージを書き込んでから、必"
"要に応じて終了(exit)または戻ることです。 この振る舞いは、 `set_die_routine` "
"と `set_error_routine` を使用してオーバーライドできます。 例えば、 `git "
"daemon` は set_die_routine を使って、 `die` が呼ばれた理由を syslog に書き込"
"んでから終了するようにしています。"

#. type: Title -
#: ../Documentation-sedout/technical/api-error-handling.txt:61
#, no-wrap
msgid "Library errors"
msgstr "Library errors"

#. type: Plain text
#: ../Documentation-sedout/technical/api-error-handling.txt:65
msgid ""
"Functions return a negative integer on error.  Details beyond that vary from "
"function to function:"
msgstr ""
"各関数はエラー時に負の整数を返します。それ以外の詳細は機能ごとに異なります:"

#. type: Plain text
#: ../Documentation-sedout/technical/api-error-handling.txt:69
msgid ""
"Some functions return -1 for all errors.  Others return a more specific "
"value depending on how the caller might want to react to the error."
msgstr ""
"一部の関数は、すべてのエラーに対して -1 を返します。 それ以外の関数は、呼び出"
"し元がエラーにどのように反応したいかに応じて、より具体的な値を返します。"

#. type: Plain text
#: ../Documentation-sedout/technical/api-error-handling.txt:72
msgid ""
"Some functions report the error to stderr with `error`, while others leave "
"that for the caller to do."
msgstr ""
"一部の関数はエラーを `error` でstderrに報告しますが、それ以外の関数はそれを呼"
"び出し元に任せます。"

#. type: Plain text
#: ../Documentation-sedout/technical/api-error-handling.txt:75
msgid ""
"errno is not meaningful on return from most functions (except for thin "
"wrappers for system calls)."
msgstr ""
"errno は、ほとんどの関数から戻ったときに意味がありません(システムコールの薄い"
"ラッパー(thin wrappers)を除く)。"

#. type: Plain text
#: ../Documentation-sedout/technical/api-error-handling.txt:77
msgid "Check the function's API documentation to be sure."
msgstr "各関数のAPIドキュメントを確認してください。"

#. type: Title -
#: ../Documentation-sedout/technical/api-error-handling.txt:79
#, no-wrap
msgid "Caller-handled errors"
msgstr "Caller-handled errors"

#. type: Plain text
#: ../Documentation-sedout/technical/api-error-handling.txt:85
msgid ""
"An increasing number of functions take a parameter 'struct strbuf *err'.  On "
"error, such functions append a message about what went wrong to the 'err' "
"strbuf.  The message is meant to be complete enough to be passed to `die` or "
"`error` as-is.  For example:"
msgstr ""
"ますます多くの関数がパラメータ `struct strbuf *err` を取るようになっていま"
"す。エラーの場合、そのような関数は、 `err` strbufに何がうまくいかなかったかに"
"ついてのメッセージを追加します。 メッセージは、そのまま `die` または `error` "
"に渡されるのに十分なほど完全であることを意図しています。 例えば:"

#. type: Plain text
#: ../Documentation-sedout/technical/api-error-handling.txt:88
#, no-wrap
msgid ""
"\tif (ref_transaction_commit(transaction, &err))\n"
"\t\tdie(\"%s\", err.buf);\n"
msgstr ""
"\tif (ref_transaction_commit(transaction, &err))\n"
"\t\tdie(\"%s\", err.buf);\n"

#. type: Plain text
#: ../Documentation-sedout/technical/api-error-handling.txt:91
msgid ""
"The 'err' parameter will be untouched if no error occurred, so multiple "
"function calls can be chained:"
msgstr ""
"エラーが発生しなかった場合、 `err` パラメーターは変更されないため、複数の関数"
"呼び出しを連鎖させることができます:"

#. type: Plain text
#: ../Documentation-sedout/technical/api-error-handling.txt:97
#, no-wrap
msgid ""
"\tt = ref_transaction_begin(&err);\n"
"\tif (!t ||\n"
"\t    ref_transaction_update(t, \"HEAD\", ..., &err) ||\n"
"\t    ret_transaction_commit(t, &err))\n"
"\t\tdie(\"%s\", err.buf);\n"
msgstr ""
"\tt = ref_transaction_begin(&err);\n"
"\tif (!t ||\n"
"\t    ref_transaction_update(t, \"HEAD\", ..., &err) ||\n"
"\t    ret_transaction_commit(t, &err))\n"
"\t\tdie(\"%s\", err.buf);\n"

#. type: Plain text
#: ../Documentation-sedout/technical/api-error-handling.txt:100
msgid ""
"The 'err' parameter must be a pointer to a valid strbuf.  To silence a "
"message, pass a strbuf that is explicitly ignored:"
msgstr ""
"`err` パラメーターは、有効なstrbufへのポインターでなければなりません。 メッ"
"セージを黙らせるには、明示的に無視されるstrbufを渡します:"

#. type: Plain text
#: ../Documentation-sedout/technical/api-error-handling.txt:103
#, no-wrap
msgid ""
"\tif (thing_that_can_fail_in_an_ignorable_way(..., &err))\n"
"\t\t/* This failure is okay. */\n"
"\t\tstrbuf_reset(&err);\n"
msgstr ""
"\tif (thing_that_can_fail_in_an_ignorable_way(..., &err))\n"
"\t\t/* This failure is okay. */\n"
"\t\tstrbuf_reset(&err);\n"
