# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-10-02 01:06+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title ==
#: ../Documentation/technical/repository-version.txt:1
#, no-wrap
msgid "Git Repository Format Versions"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/repository-version.txt:10
msgid ""
"Every git repository is marked with a numeric version in the "
"`core.repositoryformatversion` key of its `config` file. This version "
"specifies the rules for operating on the on-disk repository data. An "
"implementation of git which does not understand a particular version "
"advertised by an on-disk repository MUST NOT operate on that repository; "
"doing so risks not only producing wrong results, but actually losing data."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/repository-version.txt:13
msgid ""
"Because of this rule, version bumps should be kept to an absolute "
"minimum. Instead, we generally prefer these strategies:"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/repository-version.txt:17
msgid ""
"bumping format version numbers of individual data files (e.g., index, "
"packfiles, etc). This restricts the incompatibilities only to those files."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/repository-version.txt:21
msgid ""
"introducing new data that gracefully degrades when used by older clients "
"(e.g., pack bitmap files are ignored by older clients, which simply do not "
"take advantage of the optimization they provide)."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/repository-version.txt:26
msgid ""
"A whole-repository format version bump should only be part of a change that "
"cannot be independently versioned. For instance, if one were to change the "
"reachability rules for objects, or the rules for locking refs, that would "
"require a bump of the repository format version."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/repository-version.txt:31
msgid ""
"Note that this applies only to accessing the repository's disk contents "
"directly. An older client which understands only format `0` may still "
"connect via `git://` to a repository using format `1`, as long as the server "
"process understands format `1`."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/repository-version.txt:39
msgid ""
"The preferred strategy for rolling out a version bump (whether whole "
"repository or for a single file) is to teach git to read the new format, and "
"allow writing the new format with a config switch or command line option "
"(for experimentation or for those who do not care about backwards "
"compatibility with older gits). Then after a long period to allow the "
"reading capability to become common, we may switch to writing the new format "
"by default."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/repository-version.txt:41
msgid "The currently defined format versions are:"
msgstr ""

#. type: Title ===
#: ../Documentation/technical/repository-version.txt:42
#, no-wrap
msgid "Version `0`"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/repository-version.txt:48
msgid ""
"This is the format defined by the initial version of git, including but not "
"limited to the format of the repository directory, the repository "
"configuration file, and the object and ref storage. Specifying the complete "
"behavior of git is beyond the scope of this document."
msgstr ""

#. type: Title ===
#: ../Documentation/technical/repository-version.txt:49
#, no-wrap
msgid "Version `1`"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/repository-version.txt:52
msgid "This format is identical to version `0`, with the following exceptions:"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/repository-version.txt:57
msgid ""
"When reading the `core.repositoryformatversion` variable, a git "
"implementation which supports version 1 MUST also read any configuration "
"keys found in the `extensions` section of the configuration file."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/repository-version.txt:62
msgid ""
"If a version-1 repository specifies any `extensions.*` keys that the running "
"git has not implemented, the operation MUST NOT proceed. Similarly, if the "
"value of any known key is not understood by the implementation, the "
"operation MUST NOT proceed."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/repository-version.txt:67
msgid ""
"Note that if no extensions are specified in the config file, then "
"`core.repositoryformatversion` SHOULD be set to `0` (setting it to `1` "
"provides no benefit, and makes the repository incompatible with older "
"implementations of git)."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/repository-version.txt:71
msgid ""
"This document will serve as the master list for extensions. Any "
"implementation wishing to define a new extension should make a note of it "
"here, in order to claim the name."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/repository-version.txt:73
msgid "The defined extensions are:"
msgstr ""

#. type: Title ====
#: ../Documentation/technical/repository-version.txt:74
#, no-wrap
msgid "`noop`"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/repository-version.txt:78
msgid ""
"This extension does not change git's behavior at all. It is useful only for "
"testing format-1 compatibility."
msgstr ""

#. type: Title ====
#: ../Documentation/technical/repository-version.txt:79
#, no-wrap
msgid "`preciousObjects`"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/repository-version.txt:84
msgid ""
"When the config key `extensions.preciousObjects` is set to `true`, objects "
"in the repository MUST NOT be deleted (e.g., by `git-prune` or `git repack "
"-d`)."
msgstr ""

#. type: Title ====
#: ../Documentation/technical/repository-version.txt:85
#, no-wrap
msgid "`partialclone`"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/repository-version.txt:93
msgid ""
"When the config key `extensions.partialclone` is set, it indicates that the "
"repo was created with a partial clone (or later performed a partial fetch) "
"and that the remote may have omitted sending certain unwanted objects.  Such "
"a remote is called a \"promisor remote\" and it promises that all such "
"omitted objects can be fetched from it in the future."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/repository-version.txt:95
msgid "The value of this key is the name of the promisor remote."
msgstr ""

#. type: Title ====
#: ../Documentation/technical/repository-version.txt:96
#, no-wrap
msgid "`worktreeConfig`"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/repository-version.txt:102
msgid ""
"If set, by default \"git config\" reads from both \"config\" and "
"\"config.worktree\" file from GIT_DIR in that order. In multiple working "
"directory mode, \"config\" file is shared while \"config.worktree\" is "
"per-working directory (i.e., it's in "
"GIT_COMMON_DIR/worktrees/<id>/config.worktree)"
msgstr ""
