# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-11-04 05:35+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/technical/chunk-format.txt:2
#, no-wrap
msgid "Chunk-based file formats"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/chunk-format.txt:11
msgid ""
"Some file formats in Git use a common concept of \"chunks\" to describe "
"sections of the file. This allows structured access to a large file by "
"scanning a small \"table of contents\" for the remaining data. This common "
"format is used by the `commit-graph` and `multi-pack-index` files. See link:"
"technical/pack-format.html[the `multi-pack-index` format] and link:technical/"
"commit-graph-format.html[the `commit-graph` format] for how they use the "
"chunks to describe structured data."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/chunk-format.txt:16
msgid ""
"A chunk-based file format begins with some header information custom to that "
"format. That header should include enough information to identify the file "
"type, format version, and number of chunks in the file. From this "
"information, that file can determine the start of the chunk-based region."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/chunk-format.txt:20
msgid ""
"The chunk-based region starts with a table of contents describing where each "
"chunk starts and ends. This consists of (C+1) rows of 12 bytes each, where C "
"is the number of chunks. Consider the following table:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/chunk-format.txt:27
#, no-wrap
msgid ""
"  | Chunk ID (4 bytes) | Chunk Offset (8 bytes) |\n"
"  |--------------------|------------------------|\n"
"  | ID[0]              | OFFSET[0]              |\n"
"  | ...                | ...                    |\n"
"  | ID[C]              | OFFSET[C]              |\n"
"  | 0x0000             | OFFSET[C+1]            |\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/chunk-format.txt:30
msgid ""
"Each row consists of a 4-byte chunk identifier (ID) and an 8-byte offset.  "
"Each integer is stored in network-byte order."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/chunk-format.txt:36
msgid ""
"The chunk identifier `ID[i]` is a label for the data stored within this fill "
"from `OFFSET[i]` (inclusive) to `OFFSET[i+1]` (exclusive). Thus, the size of "
"the `i`th chunk is equal to the difference between `OFFSET[i+1]` and "
"`OFFSET[i]`. This requires that the chunk data appears contiguously in the "
"same order as the table of contents."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/chunk-format.txt:40
msgid ""
"The final entry in the table of contents must be four zero bytes. This "
"confirms that the table of contents is ending and provides the offset for "
"the end of the chunk-based data."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/chunk-format.txt:43
msgid ""
"Note: The chunk-based format expects that the file contains _at least_ a "
"trailing hash after `OFFSET[C+1]`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/chunk-format.txt:47
msgid ""
"Functions for working with chunk-based file formats are declared in `chunk-"
"format.h`. Using these methods provide extra checks that assist developers "
"when creating new file formats."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/technical/chunk-format.txt:49
#, no-wrap
msgid "Writing chunk-based file formats"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/chunk-format.txt:56
msgid ""
"To write a chunk-based file format, create a `struct chunkfile` by calling "
"`init_chunkfile()` and pass a `struct hashfile` pointer. The caller is "
"responsible for opening the `hashfile` and writing header information so the "
"file format is identifiable before the chunk-based format begins."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/chunk-format.txt:61
msgid ""
"Then, call `add_chunk()` for each chunk that is intended for write. This "
"populates the `chunkfile` with information about the order and size of each "
"chunk to write. Provide a `chunk_write_fn` function pointer to perform the "
"write of the chunk data upon request."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/chunk-format.txt:65
msgid ""
"Call `write_chunkfile()` to write the table of contents to the `hashfile` "
"followed by each of the chunks. This will verify that each chunk wrote the "
"expected amount of data so the table of contents is correct."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/chunk-format.txt:69
msgid ""
"Finally, call `free_chunkfile()` to clear the `struct chunkfile` data. The "
"caller is responsible for finalizing the `hashfile` by writing the trailing "
"hash and closing the file."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/technical/chunk-format.txt:71
#, no-wrap
msgid "Reading chunk-based file formats"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/chunk-format.txt:76
msgid ""
"To read a chunk-based file format, the file must be opened as a memory-"
"mapped region. The chunk-format API expects that the entire file is mapped "
"as a contiguous memory region."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/chunk-format.txt:78
msgid "Initialize a `struct chunkfile` pointer with `init_chunkfile(NULL)`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/chunk-format.txt:83
msgid ""
"After reading the header information from the beginning of the file, "
"including the chunk count, call `read_table_of_contents()` to populate the "
"`struct chunkfile` with the list of chunks, their offsets, and their sizes."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/chunk-format.txt:86
msgid ""
"Extract the data information for each chunk using `pair_chunk()` or "
"`read_chunk()`:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/chunk-format.txt:90
msgid ""
"`pair_chunk()` assigns a given pointer with the location inside the memory-"
"mapped file corresponding to that chunk's offset. If the chunk does not "
"exist, then the pointer is not modified."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/chunk-format.txt:96
msgid ""
"`read_chunk()` takes a `chunk_read_fn` function pointer and calls it with "
"the appropriate initial pointer and size information. The function is not "
"called if the chunk does not exist. Use this method to read chunks if you "
"need to perform immediate parsing or if you need to execute logic based on "
"the size of the chunk."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/chunk-format.txt:101
msgid ""
"After calling these methods, call `free_chunkfile()` to clear the `struct "
"chunkfile` data. This will not close the memory-mapped region.  Callers are "
"expected to own that data for the timeframe the pointers into the region are "
"needed."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/technical/chunk-format.txt:103
#, no-wrap
msgid "Examples"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/chunk-format.txt:107
msgid ""
"These file formats use the chunk-format API, and can be used as examples for "
"future formats:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/chunk-format.txt:112
#, no-wrap
msgid ""
"*commit-graph:* see `write_commit_graph_file()` and `parse_commit_graph()`\n"
"in `commit-graph.c` for how the chunk-format API is used to write and\n"
"parse the commit-graph file format documented in\n"
"link:technical/commit-graph-format.html[the commit-graph file format].\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/chunk-format.txt:116
#, no-wrap
msgid ""
"*multi-pack-index:* see `write_midx_internal()` and `load_multi_pack_index()`\n"
"in `midx.c` for how the chunk-format API is used to write and\n"
"parse the multi-pack-index file format documented in\n"
"link:technical/pack-format.html[the multi-pack-index file format].\n"
msgstr ""
