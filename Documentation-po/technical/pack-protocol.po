# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-10-02 01:06+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation/technical/pack-protocol.txt:2
#, no-wrap
msgid "Packfile transfer protocols"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:9
msgid ""
"Git supports transferring data in packfiles over the ssh://, git://, http:// "
"and file:// transports.  There exist two sets of protocols, one for pushing "
"data from a client to a server and another for fetching data from a server "
"to a client.  The three transports (ssh, git, file) use the same protocol to "
"transfer data. http is documented in http-protocol.txt."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:16
msgid ""
"The processes invoked in the canonical Git implementation are 'upload-pack' "
"on the server side and 'fetch-pack' on the client side for fetching data; "
"then 'receive-pack' on the server and 'send-pack' on the client for pushing "
"data.  The protocol functions to have a server tell a client what is "
"currently on the server, then for the two to negotiate the smallest amount "
"of data to send in order to fully update one or the other."
msgstr ""

#. type: Title -
#: ../Documentation/technical/pack-protocol.txt:18
#, no-wrap
msgid "pkt-line Format"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:24
msgid ""
"The descriptions below build on the pkt-line format described in "
"protocol-common.txt. When the grammar indicate `PKT-LINE(...)`, unless "
"otherwise noted the usual pkt-line LF rules apply: the sender SHOULD include "
"a LF, but the receiver MUST NOT complain if it is not present."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:26
msgid "An error packet is a special pkt-line that contains an error string."
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:29
#, no-wrap
msgid "  error-line     =  PKT-LINE(\"ERR\" SP explanation-text)\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:34
msgid ""
"Throughout the protocol, where `PKT-LINE(...)` is expected, an error packet "
"MAY be sent. Once this packet is sent by a client or a server, the data "
"transfer process defined in this protocol is terminated."
msgstr ""

#. type: Title -
#: ../Documentation/technical/pack-protocol.txt:36
#, no-wrap
msgid "Transports"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:44
msgid ""
"There are three transports over which the packfile protocol is initiated.  "
"The Git transport is a simple, unauthenticated server that takes the command "
"(almost always 'upload-pack', though Git servers can be configured to be "
"globally writable, in which 'receive- pack' initiation is also allowed) with "
"which the client wishes to communicate and executes it and connects it to "
"the requesting process."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:48
msgid ""
"In the SSH transport, the client just runs the 'upload-pack' or "
"'receive-pack' process on the server over the SSH protocol and then "
"communicates with that invoked process over the SSH connection."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:51
msgid ""
"The file:// transport runs the 'upload-pack' or 'receive-pack' process "
"locally and communicates with it over a pipe."
msgstr ""

#. type: Title -
#: ../Documentation/technical/pack-protocol.txt:53
#, no-wrap
msgid "Extra Parameters"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:58
msgid ""
"The protocol provides a mechanism in which clients can send additional "
"information in its first message to the server. These are called \"Extra "
"Parameters\", and are supported by the Git, SSH, and HTTP protocols."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:60
msgid "Each Extra Parameter takes the form of `<key>=<value>` or `<key>`."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:65
msgid ""
"Servers that receive any such Extra Parameters MUST ignore all unrecognized "
"keys. Currently, the only Extra Parameter recognized is \"version\" with a "
"value of '1' or '2'.  See protocol-v2.txt for more information on protocol "
"version 2."
msgstr ""

#. type: Title -
#: ../Documentation/technical/pack-protocol.txt:67
#, no-wrap
msgid "Git Transport"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:72
msgid ""
"The Git transport starts off by sending the command and repository on the "
"wire using the pkt-line format, followed by a NUL byte and a hostname "
"parameter, terminated by a NUL byte."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:74
#, no-wrap
msgid "   0033git-upload-pack /project.git\\0host=myserver.com\\0\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:77
msgid ""
"The transport may send Extra Parameters by adding an additional NUL byte, "
"and then adding one or more NUL-terminated strings:"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:79
#, no-wrap
msgid "   003egit-upload-pack /project.git\\0host=myserver.com\\0\\0version=1\\0\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:89
#, no-wrap
msgid ""
"   git-proto-request = request-command SP pathname NUL\n"
"\t\t       [ host-parameter NUL ] [ NUL extra-parameters ]\n"
"   request-command   = \"git-upload-pack\" / \"git-receive-pack\" /\n"
"\t\t       \"git-upload-archive\"   ; case sensitive\n"
"   pathname          = *( %x01-ff ) ; exclude NUL\n"
"   host-parameter    = \"host=\" hostname [ \":\" port ]\n"
"   extra-parameters  = 1*extra-parameter\n"
"   extra-parameter   = 1*( %x01-ff ) NUL\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:94
msgid ""
"host-parameter is used for the git-daemon name based virtual hosting.  See "
"--interpolated-path option to git daemon, with the %H/%CH format characters."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:97
msgid ""
"Basically what the Git client is doing to connect to an 'upload-pack' "
"process on the server side over the Git protocol is this:"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:101
#, no-wrap
msgid ""
"   $ echo -e -n \\\n"
"     \"003agit-upload-pack /schacon/gitbook.git\\0host=example.com\\0\" |\n"
"     nc -v example.com 9418\n"
msgstr ""

#. type: Title -
#: ../Documentation/technical/pack-protocol.txt:104
#, no-wrap
msgid "SSH Transport"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:109
msgid ""
"Initiating the upload-pack or receive-pack processes over SSH is executing "
"the binary on the server via SSH remote execution.  It is basically "
"equivalent to running this:"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:111
#, no-wrap
msgid "   $ ssh git.example.com \"git-upload-pack '/project.git'\"\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:117
msgid ""
"For a server to support Git pushing and pulling for a given user over SSH, "
"that user needs to be able to execute one or both of those commands via the "
"SSH shell that they are provided on login.  On some systems, that shell "
"access is limited to only being able to run those two commands, or even just "
"one of them."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:122
msgid ""
"In an ssh:// format URI, it's absolute in the URI, so the '/' after the host "
"name (or port number) is sent as an argument, which is then read by the "
"remote git-upload-pack exactly as is, so it's effectively an absolute path "
"in the remote filesystem."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:127
#, no-wrap
msgid ""
"       git clone ssh://user@example.com/project.git\n"
"\t\t    |\n"
"\t\t    v\n"
"    ssh user@example.com \"git-upload-pack '/project.git'\"\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:130
msgid ""
"In a \"user@host:path\" format URI, its relative to the user's home "
"directory, because the Git client will run:"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:135
#, no-wrap
msgid ""
"     git clone user@example.com:project.git\n"
"\t\t    |\n"
"\t\t    v\n"
"  ssh user@example.com \"git-upload-pack 'project.git'\"\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:138
msgid ""
"The exception is if a '~' is used, in which case we execute it without the "
"leading '/'."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:143
#, no-wrap
msgid ""
"      ssh://user@example.com/~alice/project.git,\n"
"\t\t     |\n"
"\t\t     v\n"
"   ssh user@example.com \"git-upload-pack '~alice/project.git'\"\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:149
msgid ""
"Depending on the value of the `protocol.version` configuration variable, Git "
"may attempt to send Extra Parameters as a colon-separated string in the "
"GIT_PROTOCOL environment variable. This is done only if the `ssh.variant` "
"configuration variable indicates that the ssh command supports passing "
"environment variables as an argument."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:151
msgid "A few things to remember here:"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:154
msgid ""
"The \"command name\" is spelled with dash (e.g. git-upload-pack), but this "
"can be overridden by the client;"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:156
msgid "The repository path is always quoted with single quotes."
msgstr ""

#. type: Title -
#: ../Documentation/technical/pack-protocol.txt:158
#, no-wrap
msgid "Fetching Data From a Server"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:164
msgid ""
"When one Git repository wants to get data that a second repository has, the "
"first can 'fetch' from the second.  This operation determines what data the "
"server has that the client does not then streams that data down to the "
"client in packfile format."
msgstr ""

#. type: Title -
#: ../Documentation/technical/pack-protocol.txt:167 ../Documentation/technical/pack-protocol.txt:500
#, no-wrap
msgid "Reference Discovery"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:173
msgid ""
"When the client initially connects the server will immediately respond with "
"a version number (if \"version=1\" is sent as an Extra Parameter), and a "
"listing of each reference it has (all branches and tags) along with the "
"object name that each reference currently points to."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:185
#, no-wrap
msgid ""
"   $ echo -e -n \"0045git-upload-pack "
"/schacon/gitbook.git\\0host=example.com\\0\\0version=1\\0\" |\n"
"      nc -v example.com 9418\n"
"   000eversion 1\n"
"   00887217a7c7e582c46cec22a130adf4b9d7d950fba0 HEAD\\0multi_ack thin-pack\n"
"\t\tside-band side-band-64k ofs-delta shallow no-progress include-tag\n"
"   00441d3fcd5ced445d1abc402225c0b8a1299641f497 refs/heads/integration\n"
"   003f7217a7c7e582c46cec22a130adf4b9d7d950fba0 refs/heads/master\n"
"   003cb88d2441cac0977faf98efc80305012112238d9d refs/tags/v0.9\n"
"   003c525128480b96c89e6418b1e40909bf6c5b2d580f refs/tags/v1.0\n"
"   003fe92df48743b7bc7d26bcaabfddde0a1e20cae47c refs/tags/v1.0^{}\n"
"   0000\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:189
msgid ""
"The returned response is a pkt-line stream describing each ref and its "
"current value.  The stream MUST be sorted by name according to the C locale "
"ordering."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:193
msgid ""
"If HEAD is a valid ref, HEAD MUST appear as the first advertised ref.  If "
"HEAD is not a valid ref, HEAD MUST NOT appear in the advertisement list at "
"all, but other refs may still appear."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:198
msgid ""
"The stream MUST include capability declarations behind a NUL on the first "
"ref. The peeled value of a ref (that is \"ref^{}\") MUST be immediately "
"after the ref itself, if presented. A conforming server MUST peel the ref if "
"it's an annotated tag."
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:204
#, no-wrap
msgid ""
"  advertised-refs  =  *1(\"version 1\")\n"
"\t\t      (no-refs / list-of-refs)\n"
"\t\t      *shallow\n"
"\t\t      flush-pkt\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:207
#, no-wrap
msgid ""
"  no-refs          =  PKT-LINE(zero-id SP \"capabilities^{}\"\n"
"\t\t      NUL capability-list)\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:211
#, no-wrap
msgid ""
"  list-of-refs     =  first-ref *other-ref\n"
"  first-ref        =  PKT-LINE(obj-id SP refname\n"
"\t\t      NUL capability-list)\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:215
#, no-wrap
msgid ""
"  other-ref        =  PKT-LINE(other-tip / other-peeled)\n"
"  other-tip        =  obj-id SP refname\n"
"  other-peeled     =  obj-id SP refname \"^{}\"\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:217
#, no-wrap
msgid "  shallow          =  PKT-LINE(\"shallow\" SP obj-id)\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:221
#, no-wrap
msgid ""
"  capability-list  =  capability *(SP capability)\n"
"  capability       =  1*(LC_ALPHA / DIGIT / \"-\" / \"_\")\n"
"  LC_ALPHA         =  %x61-7A\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:225
msgid ""
"Server and client MUST use lowercase for obj-id, both MUST treat obj-id as "
"case-insensitive."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:228
msgid ""
"See protocol-capabilities.txt for a list of allowed server capabilities and "
"descriptions."
msgstr ""

#. type: Title -
#: ../Documentation/technical/pack-protocol.txt:230
#, no-wrap
msgid "Packfile Negotiation"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:236
msgid ""
"After reference and capabilities discovery, the client can decide to "
"terminate the connection by sending a flush-pkt, telling the server it can "
"now gracefully terminate, and disconnect, when it does not need any pack "
"data. This can happen with the ls-remote command, and also can happen when "
"the client already is up to date."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:243
msgid ""
"Otherwise, it enters the negotiation phase, where the client and server "
"determine what the minimal packfile necessary for transport is, by telling "
"the server what objects it wants, its shallow objects (if any), and the "
"maximum commit depth it wants (if any).  The client will also send a list of "
"the capabilities it wants to be in effect, out of what the server said it "
"could do with the first 'want' line."
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:250
#, no-wrap
msgid ""
"  upload-request    =  want-list\n"
"\t\t       *shallow-line\n"
"\t\t       *1depth-request\n"
"\t\t       [filter-request]\n"
"\t\t       flush-pkt\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:253
#, no-wrap
msgid ""
"  want-list         =  first-want\n"
"\t\t       *additional-want\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:255
#, no-wrap
msgid "  shallow-line      =  PKT-LINE(\"shallow\" SP obj-id)\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:259
#, no-wrap
msgid ""
"  depth-request     =  PKT-LINE(\"deepen\" SP depth) /\n"
"\t\t       PKT-LINE(\"deepen-since\" SP timestamp) /\n"
"\t\t       PKT-LINE(\"deepen-not\" SP ref)\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:262
#, no-wrap
msgid ""
"  first-want        =  PKT-LINE(\"want\" SP obj-id SP capability-list)\n"
"  additional-want   =  PKT-LINE(\"want\" SP obj-id)\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:264
#, no-wrap
msgid "  depth             =  1*DIGIT\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:266
#, no-wrap
msgid "  filter-request    =  PKT-LINE(\"filter\" SP filter-spec)\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:273
msgid ""
"Clients MUST send all the obj-ids it wants from the reference discovery "
"phase as 'want' lines. Clients MUST send at least one 'want' command in the "
"request body. Clients MUST NOT mention an obj-id in a 'want' command which "
"did not appear in the response obtained through ref discovery."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:278
msgid ""
"The client MUST write all obj-ids which it only has shallow copies of "
"(meaning that it does not have the parents of a commit) as 'shallow' lines "
"so that the server is aware of the limitations of the client's history."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:287
msgid ""
"The client now sends the maximum commit history depth it wants for this "
"transaction, which is the number of commits it wants from the tip of the "
"history, if any, as a 'deepen' line.  A depth of 0 is the same as not making "
"a depth request. The client does not want to receive any commits beyond this "
"depth, nor does it want objects needed only to complete those "
"commits. Commits whose parents are not received as a result are defined as "
"shallow and marked as such in the server. This information is sent back to "
"the client in the next step."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:294
msgid ""
"The client can optionally request that pack-objects omit various objects "
"from the packfile using one of several filtering techniques.  These are "
"intended for use with partial clone and partial fetch operations. An object "
"that does not meet a filter-spec value is omitted unless explicitly "
"requested in a 'want' line. See `rev-list` for possible filter-spec values."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:298
msgid ""
"Once all the 'want's and 'shallow's (and optional 'deepen') are transferred, "
"clients MUST send a flush-pkt, to tell the server side that it is done "
"sending the list."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:303
msgid ""
"Otherwise, if the client sent a positive depth request, the server will "
"determine which commits will and will not be shallow and send this "
"information to the client. If the client did not request a positive depth, "
"this step is skipped."
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:308
#, no-wrap
msgid ""
"  shallow-update   =  *shallow-line\n"
"\t\t      *unshallow-line\n"
"\t\t      flush-pkt\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:310
#, no-wrap
msgid "  shallow-line     =  PKT-LINE(\"shallow\" SP obj-id)\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:312
#, no-wrap
msgid "  unshallow-line   =  PKT-LINE(\"unshallow\" SP obj-id)\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:317
msgid ""
"If the client has requested a positive depth, the server will compute the "
"set of commits which are no deeper than the desired depth. The set of "
"commits start at the client's wants."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:324
msgid ""
"The server writes 'shallow' lines for each commit whose parents will not be "
"sent as a result. The server writes an 'unshallow' line for each commit "
"which the client has indicated is shallow, but is no longer shallow at the "
"currently requested depth (that is, its parents will now be sent). The "
"server MUST NOT mark as unshallow anything which the client has not "
"indicated was shallow."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:331
msgid ""
"Now the client will send a list of the obj-ids it has using 'have' lines, so "
"the server can make a packfile that only contains the objects that the "
"client needs. In multi_ack mode, the canonical implementation will send up "
"to 32 of these at a time, then will send a flush-pkt. The canonical "
"implementation will skip ahead and send the next 32 immediately, so that "
"there is always a block of 32 \"in-flight on the wire\" at a time."
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:335
#, no-wrap
msgid ""
"  upload-haves      =  have-list\n"
"\t\t       compute-end\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:339
#, no-wrap
msgid ""
"  have-list         =  *have-line\n"
"  have-line         =  PKT-LINE(\"have\" SP obj-id)\n"
"  compute-end       =  flush-pkt / PKT-LINE(\"done\")\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:345
msgid ""
"If the server reads 'have' lines, it then will respond by ACKing any of the "
"obj-ids the client said it had that the server also has. The server will ACK "
"obj-ids differently depending on which ack mode is chosen by the client."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:347
msgid "In multi_ack mode:"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:350
msgid "the server will respond with 'ACK obj-id continue' for any common commits."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:354
msgid ""
"once the server has found an acceptable common base commit and is ready to "
"make a packfile, it will blindly ACK all 'have' obj-ids back to the client."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:357
msgid ""
"the server will then send a 'NAK' and then wait for another response from "
"the client - either a 'done' or another list of 'have' lines."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:359
msgid "In multi_ack_detailed mode:"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:363
msgid ""
"the server will differentiate the ACKs where it is signaling that it is "
"ready to send data with 'ACK obj-id ready' lines, and signals the identified "
"common commits with 'ACK obj-id common' lines."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:365
msgid "Without either multi_ack or multi_ack_detailed:"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:368
msgid ""
"upload-pack sends \"ACK obj-id\" on the first common object it finds.  After "
"that it says nothing until the client gives it a \"done\"."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:372
msgid ""
"upload-pack sends \"NAK\" on a flush-pkt if no common object has been found "
"yet.  If one has been found, and thus an ACK was already sent, it's silent "
"on the flush-pkt."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:384
msgid ""
"After the client has gotten enough ACK responses that it can determine that "
"the server has enough information to send an efficient packfile (in the "
"canonical implementation, this is determined when it has received enough "
"ACKs that it can color everything left in the --date-order queue as common "
"with the server, or the --date-order queue is empty), or the client "
"determines that it wants to give up (in the canonical implementation, this "
"is determined when the client sends 256 'have' lines without getting any of "
"them ACKed by the server - meaning there is nothing in common and the server "
"should just send all of its objects), then the client will send a 'done' "
"command.  The 'done' command signals to the server that the client is ready "
"to receive its packfile data."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:389
msgid ""
"However, the 256 limit *only* turns on in the canonical client "
"implementation if we have received at least one \"ACK %s continue\" during a "
"prior round.  This helps to ensure that at least one common ancestor is "
"found before we give up entirely."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:396
msgid ""
"Once the 'done' line is read from the client, the server will either send a "
"final 'ACK obj-id' or it will send a 'NAK'. 'obj-id' is the object name of "
"the last commit determined to be common. The server only sends ACK after "
"'done' if there is at least one common base and multi_ack or "
"multi_ack_detailed is enabled. The server always sends NAK after 'done' if "
"there is no common base found."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:400
msgid ""
"Instead of 'ACK' or 'NAK', the server may send an error message (for "
"example, if it does not recognize an object in a 'want' line received from "
"the client)."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:402
msgid "Then the server will start sending its packfile data."
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:409
#, no-wrap
msgid ""
"  server-response = *ack_multi ack / nak\n"
"  ack_multi       = PKT-LINE(\"ACK\" SP obj-id ack_status)\n"
"  ack_status      = \"continue\" / \"common\" / \"ready\"\n"
"  ack             = PKT-LINE(\"ACK\" SP obj-id)\n"
"  nak             = PKT-LINE(\"NAK\")\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:412
msgid "A simple clone may look like this (with no 'have' lines):"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:422
#, no-wrap
msgid ""
"   C: 0054want 74730d410fcb6603ace96f1dc55ea6196122532d multi_ack \\\n"
"     side-band-64k ofs-delta\\n\n"
"   C: 0032want 7d1665144a3a975c05f1f43902ddaf084e784dbe\\n\n"
"   C: 0032want 5a3f6be755bbb7deae50065988cbfa1ffa9ab68a\\n\n"
"   C: 0032want 7e47fe2bd8d01d481f44d7af0531bd93d3b21c01\\n\n"
"   C: 0032want 74730d410fcb6603ace96f1dc55ea6196122532d\\n\n"
"   C: 0000\n"
"   C: 0009done\\n\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:425
#, no-wrap
msgid ""
"   S: 0008NAK\\n\n"
"   S: [PACKFILE]\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:428
msgid "An incremental update (fetch) response might look like this:"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:439
#, no-wrap
msgid ""
"   C: 0054want 74730d410fcb6603ace96f1dc55ea6196122532d multi_ack \\\n"
"     side-band-64k ofs-delta\\n\n"
"   C: 0032want 7d1665144a3a975c05f1f43902ddaf084e784dbe\\n\n"
"   C: 0032want 5a3f6be755bbb7deae50065988cbfa1ffa9ab68a\\n\n"
"   C: 0000\n"
"   C: 0032have 7e47fe2bd8d01d481f44d7af0531bd93d3b21c01\\n\n"
"   C: [30 more have lines]\n"
"   C: 0032have 74730d410fcb6603ace96f1dc55ea6196122532d\\n\n"
"   C: 0000\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:443
#, no-wrap
msgid ""
"   S: 003aACK 7e47fe2bd8d01d481f44d7af0531bd93d3b21c01 continue\\n\n"
"   S: 003aACK 74730d410fcb6603ace96f1dc55ea6196122532d continue\\n\n"
"   S: 0008NAK\\n\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:445
#, no-wrap
msgid "   C: 0009done\\n\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:448
#, no-wrap
msgid ""
"   S: 0031ACK 74730d410fcb6603ace96f1dc55ea6196122532d\\n\n"
"   S: [PACKFILE]\n"
msgstr ""

#. type: Title -
#: ../Documentation/technical/pack-protocol.txt:452
#, no-wrap
msgid "Packfile Data"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:457
msgid ""
"Now that the client and server have finished negotiation about what the "
"minimal amount of data that needs to be sent to the client is, the server "
"will construct and send the required data in packfile format."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:459
msgid "See pack-format.txt for what the packfile itself actually looks like."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:462
msgid ""
"If 'side-band' or 'side-band-64k' capabilities have been specified by the "
"client, the server will send the packfile data multiplexed."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:466
msgid ""
"Each packet starting with the packet-line length of the amount of data that "
"follows, followed by a single byte specifying the sideband the following "
"data is coming in on."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:471
msgid ""
"In 'side-band' mode, it will send up to 999 data bytes plus 1 control code, "
"for a total of up to 1000 bytes in a pkt-line.  In 'side-band-64k' mode it "
"will send up to 65519 data bytes plus 1 control code, for a total of up to "
"65520 bytes in a pkt-line."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:476
msgid ""
"The sideband byte will be a '1', '2' or a '3'. Sideband '1' will contain "
"packfile data, sideband '2' will be used for progress information that the "
"client will generally print to stderr and sideband '3' is used for error "
"information."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:479
msgid ""
"If no 'side-band' capability was specified, the server will stream the "
"entire packfile without multiplexing."
msgstr ""

#. type: Title -
#: ../Documentation/technical/pack-protocol.txt:482
#, no-wrap
msgid "Pushing Data To a Server"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:489
msgid ""
"Pushing data to a server will invoke the 'receive-pack' process on the "
"server, which will allow the client to tell it which references it should "
"update and then send all the data the server will need for those new "
"references to be complete.  Once all the data is received and validated, the "
"server will then update its references to what the client specified."
msgstr ""

#. type: Title -
#: ../Documentation/technical/pack-protocol.txt:491
#, no-wrap
msgid "Authentication"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:498
msgid ""
"The protocol itself contains no authentication mechanisms.  That is to be "
"handled by the transport, such as SSH, before the 'receive-pack' process is "
"invoked.  If 'receive-pack' is configured over the Git transport, those "
"repositories will be writable by anyone who can access that port (9418) as "
"that transport is unauthenticated."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:508
msgid ""
"The reference discovery phase is done nearly the same way as it is in the "
"fetching protocol. Each reference obj-id and name on the server is sent in "
"packet-line format to the client, followed by a flush-pkt.  The only real "
"difference is that the capability listing is different - the only possible "
"values are 'report-status', 'report-status-v2', 'delete-refs', 'ofs-delta', "
"'atomic' and 'push-options'."
msgstr ""

#. type: Title -
#: ../Documentation/technical/pack-protocol.txt:510
#, no-wrap
msgid "Reference Update Request and Packfile Transfer"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:517
msgid ""
"Once the client knows what references the server is at, it can send a list "
"of reference update requests.  For each reference on the server that it "
"wants to update, it sends a line listing the obj-id currently on the server, "
"the obj-id the client would like to update it to and the name of the "
"reference."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:519
msgid "This list is followed by a flush-pkt."
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:522
#, no-wrap
msgid "  update-requests   =  *shallow ( command-list | push-cert )\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:524
#, no-wrap
msgid "  shallow           =  PKT-LINE(\"shallow\" SP obj-id)\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:528
#, no-wrap
msgid ""
"  command-list      =  PKT-LINE(command NUL capability-list)\n"
"\t\t       *PKT-LINE(command)\n"
"\t\t       flush-pkt\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:533
#, no-wrap
msgid ""
"  command           =  create / delete / update\n"
"  create            =  zero-id SP new-id  SP name\n"
"  delete            =  old-id  SP zero-id SP name\n"
"  update            =  old-id  SP new-id  SP name\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:536
#, no-wrap
msgid ""
"  old-id            =  obj-id\n"
"  new-id            =  obj-id\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:547
#, no-wrap
msgid ""
"  push-cert         = PKT-LINE(\"push-cert\" NUL capability-list LF)\n"
"\t\t      PKT-LINE(\"certificate version 0.1\" LF)\n"
"\t\t      PKT-LINE(\"pusher\" SP ident LF)\n"
"\t\t      PKT-LINE(\"pushee\" SP url LF)\n"
"\t\t      PKT-LINE(\"nonce\" SP nonce LF)\n"
"\t\t      *PKT-LINE(\"push-option\" SP push-option LF)\n"
"\t\t      PKT-LINE(LF)\n"
"\t\t      *PKT-LINE(command LF)\n"
"\t\t      *PKT-LINE(gpg-signature-lines LF)\n"
"\t\t      PKT-LINE(\"push-cert-end\" LF)\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:549
#, no-wrap
msgid "  push-option       =  1*( VCHAR | SP )\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:554
msgid ""
"If the server has advertised the 'push-options' capability and the client "
"has specified 'push-options' as part of the capability list above, the "
"client then sends its push options followed by a flush-pkt."
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:557
#, no-wrap
msgid "  push-options      =  *PKT-LINE(push-option) flush-pkt\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:564
msgid ""
"For backwards compatibility with older Git servers, if the client sends a "
"push cert and push options, it MUST send its push options both embedded "
"within the push cert and after the push cert. (Note that the push options "
"within the cert are prefixed, but the push options after the cert are not.) "
"Both these lists MUST be the same, modulo the prefix."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:568
msgid ""
"After that the packfile that should contain all the objects that the server "
"will need to complete the new references will be sent."
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:571
#, no-wrap
msgid "  packfile          =  \"PACK\" 28*(OCTET)\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:575
msgid ""
"If the receiving end does not support delete-refs, the sending end MUST NOT "
"ask for delete command."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:580
msgid ""
"If the receiving end does not support push-cert, the sending end MUST NOT "
"send a push-cert command.  When a push-cert command is sent, command-list "
"MUST NOT be sent; the commands recorded in the push certificate is used "
"instead."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:582
msgid "The packfile MUST NOT be sent if the only command used is 'delete'."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:588
#, no-wrap
msgid ""
"A packfile MUST be sent if either create or update command is used,\n"
"even if the server already has all the necessary objects.  In this\n"
"case the client MUST send an empty packfile.   The only time this\n"
"is likely to happen is if the client is creating\n"
"a new branch or a tag that points to an existing obj-id.\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:594
msgid ""
"The server will receive the packfile, unpack it, then validate each "
"reference that is being updated that it hasn't changed while the request was "
"being processed (the obj-id is still the same as the old-id), and it will "
"run any update hooks to make sure that the update is acceptable.  If all of "
"that is fine, the server will then update the references."
msgstr ""

#. type: Title -
#: ../Documentation/technical/pack-protocol.txt:596
#, no-wrap
msgid "Push Certificate"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:602
msgid ""
"A push certificate begins with a set of header lines.  After the header and "
"an empty line, the protocol commands follow, one per line. Note that the "
"trailing LF in push-cert PKT-LINEs is _not_ optional; it must be present."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:604
msgid "Currently, the following header fields are defined:"
msgstr ""

#. type: Labeled list
#: ../Documentation/technical/pack-protocol.txt:605
#, no-wrap
msgid "`pusher` ident"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:608
msgid "Identify the GPG key in \"Human Readable Name <email@address>\" format."
msgstr ""

#. type: Labeled list
#: ../Documentation/technical/pack-protocol.txt:609
#, no-wrap
msgid "`pushee` url"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:613
msgid ""
"The repository URL (anonymized, if the URL contains authentication material) "
"the user who ran `git push` intended to push into."
msgstr ""

#. type: Labeled list
#: ../Documentation/technical/pack-protocol.txt:614
#, no-wrap
msgid "`nonce` nonce"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:618
msgid ""
"The 'nonce' string the receiving repository asked the pushing user to "
"include in the certificate, to prevent replay attacks."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:623
msgid ""
"The GPG signature lines are a detached signature for the contents recorded "
"in the push certificate before the signature block begins.  The detached "
"signature is used to certify that the commands were given by the pusher, who "
"must be the signer."
msgstr ""

#. type: Title -
#: ../Documentation/technical/pack-protocol.txt:625
#, no-wrap
msgid "Report Status"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:634
msgid ""
"After receiving the pack data from the sender, the receiver sends a report "
"if 'report-status' or 'report-status-v2' capability is in effect.  It is a "
"short listing of what happened in that update.  It will first list the "
"status of the packfile unpacking as either 'unpack ok' or 'unpack [error]'.  "
"Then it will list the status for each of the references that it tried to "
"update.  Each line is either 'ok [refname]' if the update was successful, or "
"'ng [refname] [error]' if the update was not."
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:639
#, no-wrap
msgid ""
"  report-status     = unpack-status\n"
"\t\t      1*(command-status)\n"
"\t\t      flush-pkt\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:642 ../Documentation/technical/pack-protocol.txt:663
#, no-wrap
msgid ""
"  unpack-status     = PKT-LINE(\"unpack\" SP unpack-result)\n"
"  unpack-result     = \"ok\" / error-msg\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:646
#, no-wrap
msgid ""
"  command-status    = command-ok / command-fail\n"
"  command-ok        = PKT-LINE(\"ok\" SP refname)\n"
"  command-fail      = PKT-LINE(\"ng\" SP refname SP error-msg)\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:648 ../Documentation/technical/pack-protocol.txt:672
#, no-wrap
msgid "  error-msg         = 1*(OCTET) ; where not \"ok\"\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:655
msgid ""
"The 'report-status-v2' capability extends the protocol by adding new option "
"lines in order to support reporting of reference rewritten by the "
"'proc-receive' hook.  The 'proc-receive' hook may handle a command for a "
"pseudo-reference which may create or update one or more references, and each "
"reference may have different name, different new-oid, and different old-oid."
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:660
#, no-wrap
msgid ""
"  report-status-v2  = unpack-status\n"
"\t\t      1*(command-status-v2)\n"
"\t\t      flush-pkt\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:667
#, no-wrap
msgid ""
"  command-status-v2 = command-ok-v2 / command-fail\n"
"  command-ok-v2     = command-ok\n"
"\t\t      *option-line\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:670
#, no-wrap
msgid ""
"  command-ok        = PKT-LINE(\"ok\" SP refname)\n"
"  command-fail      = PKT-LINE(\"ng\" SP refname SP error-msg)\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:677
#, no-wrap
msgid ""
"  option-line       = *1(option-refname)\n"
"\t\t      *1(option-old-oid)\n"
"\t\t      *1(option-new-oid)\n"
"\t\t      *1(option-forced-update)\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:682
#, no-wrap
msgid ""
"  option-refname    = PKT-LINE(\"option\" SP \"refname\" SP refname)\n"
"  option-old-oid    = PKT-LINE(\"option\" SP \"old-oid\" SP obj-id)\n"
"  option-new-oid    = PKT-LINE(\"option\" SP \"new-oid\" SP obj-id)\n"
"  option-force      = PKT-LINE(\"option\" SP \"forced-update\")\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:691
msgid ""
"Updates can be unsuccessful for a number of reasons.  The reference can have "
"changed since the reference discovery phase was originally sent, meaning "
"someone pushed in the meantime.  The reference being pushed could be a "
"non-fast-forward reference and the update hooks or configuration could be "
"set to not allow that, etc.  Also, some references can be updated while "
"others can be rejected."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/pack-protocol.txt:693
msgid "An example client/server communication might look like this:"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:700
#, no-wrap
msgid ""
"   S: 006274730d410fcb6603ace96f1dc55ea6196122532d "
"refs/heads/local\\0report-status delete-refs ofs-delta\\n\n"
"   S: 003e7d1665144a3a975c05f1f43902ddaf084e784dbe refs/heads/debug\\n\n"
"   S: 003f74730d410fcb6603ace96f1dc55ea6196122532d refs/heads/master\\n\n"
"   S: 003d74730d410fcb6603ace96f1dc55ea6196122532d refs/heads/team\\n\n"
"   S: 0000\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:705
#, no-wrap
msgid ""
"   C: 00677d1665144a3a975c05f1f43902ddaf084e784dbe "
"74730d410fcb6603ace96f1dc55ea6196122532d refs/heads/debug\\n\n"
"   C: 006874730d410fcb6603ace96f1dc55ea6196122532d "
"5a3f6be755bbb7deae50065988cbfa1ffa9ab68a refs/heads/master\\n\n"
"   C: 0000\n"
"   C: [PACKDATA]\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/pack-protocol.txt:709
#, no-wrap
msgid ""
"   S: 000eunpack ok\\n\n"
"   S: 0018ok refs/heads/debug\\n\n"
"   S: 002ang refs/heads/master non-fast-forward\\n\n"
msgstr ""
