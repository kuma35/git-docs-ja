# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-09-24 21:41+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/technical/scalar.txt:2
#, no-wrap
msgid "Scalar"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/scalar.txt:9
msgid ""
"Scalar is a repository management tool that optimizes Git for use in large "
"repositories. It accomplishes this by helping users to take advantage of "
"advanced performance features in Git. Unlike most other Git built-in "
"commands, Scalar is not executed as a subcommand of 'git'; rather, it is "
"built as a separate executable containing its own series of subcommands."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/technical/scalar.txt:11
#, no-wrap
msgid "Background"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/scalar.txt:19
msgid ""
"Scalar was originally designed as an add-on to Git and implemented as a .NET "
"Core application. It was created based on the learnings from the VFS for Git "
"project (another application aimed at improving the experience of working "
"with large repositories). As part of its initial implementation, Scalar "
"relied on custom features in the Microsoft fork of Git that have since been "
"integrated into core Git:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/scalar.txt:21
msgid "partial clone,"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/scalar.txt:22
msgid "commit graphs,"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/scalar.txt:23
msgid "multi-pack index,"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/scalar.txt:24
msgid "sparse checkout (cone mode),"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/scalar.txt:25
msgid "scheduled background maintenance,"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/scalar.txt:26
msgid "etc"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/scalar.txt:30
msgid ""
"With the requisite Git functionality in place and a desire to bring the "
"benefits of Scalar to the larger Git community, the Scalar application "
"itself was ported from C# to C and integrated upstream."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/technical/scalar.txt:32
#, no-wrap
msgid "Features"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/scalar.txt:37
msgid ""
"Scalar is comprised of two major pieces of functionality: automatically "
"configuring built-in Git performance features and managing repository "
"enlistments."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/scalar.txt:45
msgid ""
"The Git performance features configured by Scalar (see \"Background\" for "
"examples) confer substantial performance benefits to large repositories, but "
"are either too experimental to enable for all of Git yet, or only benefit "
"large repositories. As new features are introduced, Scalar should be updated "
"accordingly to incorporate them. This will prevent the tool from becoming "
"stale while also providing a path for more easily bringing features to the "
"appropriate users."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/scalar.txt:53
msgid ""
"Enlistments are how Scalar knows which repositories on a user's system "
"should utilize Scalar-configured features. This allows it to update "
"performance settings when new ones are added to the tool, as well as "
"centrally manage repository maintenance. The enlistment structure - a root "
"directory with a `src/` subdirectory containing the cloned repository itself "
"- is designed to encourage users to route build outputs outside of the "
"repository to avoid the performance-limiting overhead of ignoring those "
"files in Git."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/technical/scalar.txt:55
#, no-wrap
msgid "Design"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/scalar.txt:63
msgid ""
"Scalar is implemented in C and interacts with Git via a mix of child process "
"invocations of Git and direct usage of `libgit.a`. Internally, it is "
"structured much like other built-ins with subcommands (e.g., `git stash`), "
"containing a `cmd_<subcommand>()` function for each subcommand, routed "
"through a `cmd_main()` function. Most options are unique to each subcommand, "
"with `scalar` respecting some \"global\" `git` options (e.g., `-c` and "
"`-C`)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/scalar.txt:66
msgid ""
"Because `scalar` is not invoked as a Git subcommand (like `git scalar`), it "
"is built and installed as its own executable in the `bin/` directory, "
"alongside `git`, `git-gui`, etc."
msgstr ""
