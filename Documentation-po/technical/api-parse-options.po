# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 0.0\n"
"POT-Creation-Date: 2021-11-04 05:35+0900\n"
"PO-Revision-Date: 2021-10-13 08:16+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/technical/api-parse-options.txt:2
#, no-wrap
msgid "parse-options API"
msgstr "parse-options API"

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:6
msgid ""
"The parse-options API is used to parse and massage options in Git and to "
"provide a usage help with consistent look."
msgstr ""
"parse-options API(オプション解析API)は、Gitのオプションを解析(parse)および揉"
"み揉み(massage)し、一貫した外観で使用法のヘルプを提供するために使用されます。"

#. type: Title -
#: ../Documentation-sedout/technical/api-parse-options.txt:8
#, no-wrap
msgid "Basics"
msgstr "Basics"

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:14
msgid ""
"The argument vector `argv[]` may usually contain mandatory or optional 'non-"
"option arguments', e.g. a filename or a branch, and 'options'.  Options are "
"optional arguments that start with a dash and that allow to change the "
"behavior of a command."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:20
msgid ""
"There are basically three types of options: 'boolean' options, options with "
"(mandatory) 'arguments' and options with 'optional arguments' (i.e. a "
"boolean option that can be adjusted)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:26
msgid ""
"There are basically two forms of options: 'Short options' consist of one "
"dash (`-`) and one alphanumeric character.  'Long options' begin with two "
"dashes (`--`) and some alphanumeric characters."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:29
msgid ""
"Options are case-sensitive.  Please define 'lower-case long options' only."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:31
msgid "The parse-options API allows:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:35
msgid ""
"'stuck' and 'separate form' of options with arguments.  `-oArg` is stuck, `-"
"o Arg` is separate form.  `--option=Arg` is stuck, `--option Arg` is "
"separate form."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:38
msgid ""
"Long options may be 'abbreviated', as long as the abbreviation is "
"unambiguous."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:40
msgid "Short options may be bundled, e.g. `-a -b` can be specified as `-ab`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:46
msgid ""
"Boolean long options can be 'negated' (or 'unset') by prepending `no-`, e.g. "
"`--no-abbrev` instead of `--abbrev`. Conversely, options that begin with `no-"
"` can be 'negated' by removing it.  Other long options can be unset (e.g., "
"set string to NULL, set integer to 0) by prepending `no-`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:50
msgid ""
"Options and non-option arguments can clearly be separated using the `--` "
"option, e.g. `-a -b --option -- --this-is-a-file` indicates that `--this-is-"
"a-file` must not be processed as an option."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/technical/api-parse-options.txt:52
#, no-wrap
msgid "Steps to parse options"
msgstr "Steps to parse options"

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:55
msgid "`#include \"parse-options.h\"`"
msgstr "`#include \"parse-options.h\"`"

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:59
msgid ""
"define a NULL-terminated `static const char * const builtin_foo_usage[]` "
"array containing alternative usage strings"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:62
msgid ""
"define `builtin_foo_options` array as described below in section 'Data "
"Structure'."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:65
msgid "in `cmd_foo(int argc, const char **argv, const char *prefix)` call"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:67
#, no-wrap
msgid "argc = parse_options(argc, argv, prefix, builtin_foo_options, builtin_foo_usage, flags);\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:71
msgid ""
"`parse_options()` will filter out the processed options of `argv[]` and "
"leave the non-option arguments in `argv[]`.  `argc` is updated appropriately "
"because of the assignment."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:77
msgid ""
"You can also pass NULL instead of a usage array as the fifth parameter of "
"parse_options(), to avoid displaying a help screen with usage info and "
"option list.  This should only be done if necessary, e.g. to implement a "
"limited parser for only a subset of the options that needs to be run before "
"the full parser, which in turn shows the full help message."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:79
msgid "Flags are the bitwise-or of:"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/technical/api-parse-options.txt:80
#, no-wrap
msgid "`PARSE_OPT_KEEP_DASHDASH`"
msgstr "`PARSE_OPT_KEEP_DASHDASH`"

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:83
msgid "Keep the `--` that usually separates options from non-option arguments."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/technical/api-parse-options.txt:84
#, no-wrap
msgid "`PARSE_OPT_STOP_AT_NON_OPTION`"
msgstr "`PARSE_OPT_STOP_AT_NON_OPTION`"

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:88
msgid ""
"Usually the whole argument vector is massaged and reordered.  Using this "
"flag, processing is stopped at the first non-option argument."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/technical/api-parse-options.txt:89
#, no-wrap
msgid "`PARSE_OPT_KEEP_ARGV0`"
msgstr "`PARSE_OPT_KEEP_ARGV0`"

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:92
msgid ""
"Keep the first argument, which contains the program name.  It's removed from "
"argv[] by default."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/technical/api-parse-options.txt:93
#, no-wrap
msgid "`PARSE_OPT_KEEP_UNKNOWN`"
msgstr "`PARSE_OPT_KEEP_UNKNOWN`"

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:104
msgid ""
"Keep unknown arguments instead of erroring out.  This doesn't work for all "
"combinations of arguments as users might expect it to do.  E.g. if the first "
"argument in `--unknown --known` takes a value (which we can't know), the "
"second one is mistakenly interpreted as a known option.  Similarly, if "
"`PARSE_OPT_STOP_AT_NON_OPTION` is set, the second argument in `--unknown "
"value` will be mistakenly interpreted as a non-option, not as a value "
"belonging to the unknown option, the parser early.  That's why "
"parse_options() errors out if both options are set."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/technical/api-parse-options.txt:105
#, no-wrap
msgid "`PARSE_OPT_NO_INTERNAL_HELP`"
msgstr "`PARSE_OPT_NO_INTERNAL_HELP`"

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:110
msgid ""
"By default, parse_options() handles `-h`, `--help` and `--help-all` "
"internally, by showing a help screen.  This option turns it off and allows "
"one to add custom handlers for these options, or to just leave them unknown."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/technical/api-parse-options.txt:112
#, no-wrap
msgid "Data Structure"
msgstr "Data Structure"

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:117
msgid ""
"The main data structure is an array of the `option` struct, say `static "
"struct option builtin_add_options[]`.  There are some macros to easily "
"define options:"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/technical/api-parse-options.txt:118
#, no-wrap
msgid "`OPT__ABBREV(&int_var)`"
msgstr "`OPT__ABBREV(&int_var)`"

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:120
msgid "Add `--abbrev[=<n>]`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/technical/api-parse-options.txt:121
#, no-wrap
msgid "`OPT__COLOR(&int_var, description)`"
msgstr "`OPT__COLOR(&int_var, description)`"

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:123
msgid "Add `--color[=<when>]` and `--no-color`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/technical/api-parse-options.txt:124
#, no-wrap
msgid "`OPT__DRY_RUN(&int_var, description)`"
msgstr "`OPT__DRY_RUN(&int_var, description)`"

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:126
msgid "Add `-n, --dry-run`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/technical/api-parse-options.txt:127
#, no-wrap
msgid "`OPT__FORCE(&int_var, description)`"
msgstr "`OPT__FORCE(&int_var, description)`"

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:129
msgid "Add `-f, --force`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/technical/api-parse-options.txt:130
#, no-wrap
msgid "`OPT__QUIET(&int_var, description)`"
msgstr "`OPT__QUIET(&int_var, description)`"

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:132
msgid "Add `-q, --quiet`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/technical/api-parse-options.txt:133
#, no-wrap
msgid "`OPT__VERBOSE(&int_var, description)`"
msgstr "`OPT__VERBOSE(&int_var, description)`"

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:135
msgid "Add `-v, --verbose`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/technical/api-parse-options.txt:136
#, no-wrap
msgid "`OPT_GROUP(description)`"
msgstr "`OPT_GROUP(description)`"

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:140
msgid ""
"Start an option group. `description` is a short string that describes the "
"group or an empty string.  Start the description with an upper-case letter."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/technical/api-parse-options.txt:141
#, no-wrap
msgid "`OPT_BOOL(short, long, &int_var, description)`"
msgstr "`OPT_BOOL(short, long, &int_var, description)`"

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:144
msgid ""
"Introduce a boolean option. `int_var` is set to one with `--option` and set "
"to zero with `--no-option`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/technical/api-parse-options.txt:145
#, no-wrap
msgid "`OPT_COUNTUP(short, long, &int_var, description)`"
msgstr "`OPT_COUNTUP(short, long, &int_var, description)`"

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:153
msgid ""
"Introduce a count-up option.  Each use of `--option` increments `int_var`, "
"starting from zero (even if initially negative), and `--no-option` resets it "
"to zero. To determine if `--option` or `--no-option` was encountered at all, "
"initialize `int_var` to a negative value, and if it is still negative after "
"parse_options(), then neither `--option` nor `--no-option` was seen."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/technical/api-parse-options.txt:154
#, no-wrap
msgid "`OPT_BIT(short, long, &int_var, description, mask)`"
msgstr "`OPT_BIT(short, long, &int_var, description, mask)`"

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:157
msgid ""
"Introduce a boolean option.  If used, `int_var` is bitwise-ored with `mask`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/technical/api-parse-options.txt:158
#, no-wrap
msgid "`OPT_NEGBIT(short, long, &int_var, description, mask)`"
msgstr "`OPT_NEGBIT(short, long, &int_var, description, mask)`"

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:161
msgid ""
"Introduce a boolean option.  If used, `int_var` is bitwise-anded with the "
"inverted `mask`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/technical/api-parse-options.txt:162
#, no-wrap
msgid "`OPT_SET_INT(short, long, &int_var, description, integer)`"
msgstr "`OPT_SET_INT(short, long, &int_var, description, integer)`"

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:166
msgid ""
"Introduce an integer option.  `int_var` is set to `integer` with `--option`, "
"and reset to zero with `--no-option`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/technical/api-parse-options.txt:167
#, no-wrap
msgid "`OPT_STRING(short, long, &str_var, arg_str, description)`"
msgstr "`OPT_STRING(short, long, &str_var, arg_str, description)`"

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:170
msgid ""
"Introduce an option with string argument.  The string argument is put into "
"`str_var`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/technical/api-parse-options.txt:171
#, no-wrap
msgid "`OPT_STRING_LIST(short, long, &struct string_list, arg_str, description)`"
msgstr "`OPT_STRING_LIST(short, long, &struct string_list, arg_str, description)`"

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:175
msgid ""
"Introduce an option with string argument.  The string argument is stored as "
"an element in `string_list`.  Use of `--no-option` will clear the list of "
"preceding values."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/technical/api-parse-options.txt:176
#, no-wrap
msgid "`OPT_INTEGER(short, long, &int_var, description)`"
msgstr "`OPT_INTEGER(short, long, &int_var, description)`"

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:179
msgid ""
"Introduce an option with integer argument.  The integer is put into "
"`int_var`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/technical/api-parse-options.txt:180
#, no-wrap
msgid "`OPT_MAGNITUDE(short, long, &unsigned_long_var, description)`"
msgstr "`OPT_MAGNITUDE(short, long, &unsigned_long_var, description)`"

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:185
msgid ""
"Introduce an option with a size argument. The argument must be a non-"
"negative integer and may include a suffix of 'k', 'm' or 'g' to scale the "
"provided value by 1024, 1024^2 or 1024^3 respectively.  The scaled value is "
"put into `unsigned_long_var`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/technical/api-parse-options.txt:186
#, no-wrap
msgid "`OPT_EXPIRY_DATE(short, long, &timestamp_t_var, description)`"
msgstr "`OPT_EXPIRY_DATE(short, long, &timestamp_t_var, description)`"

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:189
msgid ""
"Introduce an option with expiry date argument, see `parse_expiry_date()`.  "
"The timestamp is put into `timestamp_t_var`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/technical/api-parse-options.txt:190
#, no-wrap
msgid "`OPT_CALLBACK(short, long, &var, arg_str, description, func_ptr)`"
msgstr "`OPT_CALLBACK(short, long, &var, arg_str, description, func_ptr)`"

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:195
msgid ""
"Introduce an option with argument.  The argument will be fed into the "
"function given by `func_ptr` and the result will be put into `var`.  See "
"'Option Callbacks' below for a more elaborate description."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/technical/api-parse-options.txt:196
#, no-wrap
msgid "`OPT_FILENAME(short, long, &var, description)`"
msgstr "`OPT_FILENAME(short, long, &var, description)`"

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:200
msgid ""
"Introduce an option with a filename argument.  The filename will be prefixed "
"by passing the filename along with the prefix argument of `parse_options()` "
"to `prefix_filename()`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/technical/api-parse-options.txt:201
#, no-wrap
msgid "`OPT_NUMBER_CALLBACK(&var, description, func_ptr)`"
msgstr "`OPT_NUMBER_CALLBACK(&var, description, func_ptr)`"

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:208
msgid ""
"Recognize numerical options like -123 and feed the integer as if it was an "
"argument to the function given by `func_ptr`.  The result will be put into "
"`var`.  There can be only one such option definition.  It cannot be negated "
"and it takes no arguments.  Short options that happen to be digits take "
"precedence over it."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/technical/api-parse-options.txt:209
#, no-wrap
msgid "`OPT_COLOR_FLAG(short, long, &int_var, description)`"
msgstr "`OPT_COLOR_FLAG(short, long, &int_var, description)`"

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:217
msgid ""
"Introduce an option that takes an optional argument that can have one of "
"three values: \"always\", \"never\", or \"auto\".  If the argument is not "
"given, it defaults to \"always\".  The `--no-` form works like `--"
"long=never`; it cannot take an argument.  If \"always\", set `int_var` to 1; "
"if \"never\", set `int_var` to 0; if \"auto\", set `int_var` to 1 if stdout "
"is a tty or a pager, 0 otherwise."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/technical/api-parse-options.txt:218
#, no-wrap
msgid "`OPT_NOOP_NOARG(short, long)`"
msgstr "`OPT_NOOP_NOARG(short, long)`"

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:222
msgid ""
"Introduce an option that has no effect and takes no arguments.  Use it to "
"hide deprecated options that are still to be recognized and ignored silently."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/technical/api-parse-options.txt:223
#, no-wrap
msgid "`OPT_PASSTHRU(short, long, &char_var, arg_str, description, flags)`"
msgstr "`OPT_PASSTHRU(short, long, &char_var, arg_str, description, flags)`"

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:229
msgid ""
"Introduce an option that will be reconstructed into a char* string, which "
"must be initialized to NULL. This is useful when you need to pass the "
"command-line option to another command. Any previous value will be "
"overwritten, so this should only be used for options where the last one "
"specified on the command line wins."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/technical/api-parse-options.txt:230
#, no-wrap
msgid "`OPT_PASSTHRU_ARGV(short, long, &strvec_var, arg_str, description, flags)`"
msgstr "`OPT_PASSTHRU_ARGV(short, long, &strvec_var, arg_str, description, flags)`"

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:235
msgid ""
"Introduce an option where all instances of it on the command-line will be "
"reconstructed into a strvec. This is useful when you need to pass the "
"command-line option, which can be specified multiple times, to another "
"command."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/technical/api-parse-options.txt:236
#, no-wrap
msgid "`OPT_CMDMODE(short, long, &int_var, description, enum_val)`"
msgstr "`OPT_CMDMODE(short, long, &int_var, description, enum_val)`"

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:242
msgid ""
"Define an \"operation mode\" option, only one of which in the same group of "
"\"operating mode\" options that share the same `int_var` can be given by the "
"user. `enum_val` is set to `int_var` when the option is used, but an error "
"is reported if other \"operating mode\" option has already set its value to "
"the same `int_var`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:245
msgid "The last element of the array must be `OPT_END()`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:247
msgid "If not stated otherwise, interpret the arguments as follows:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:250
msgid ""
"`short` is a character for the short option (e.g. `'e'` for `-e`, use `0` to "
"omit),"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:253
msgid ""
"`long` is a string for the long option (e.g. `\"example\"` for `--example`, "
"use `NULL` to omit),"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:255
msgid "`int_var` is an integer variable,"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:257
msgid "`str_var` is a string variable (`char *`),"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:261
msgid ""
"`arg_str` is the string that is shown as argument (e.g. `\"branch\"` will "
"result in `<branch>`).  If set to `NULL`, three dots (`...`) will be "
"displayed."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:265
msgid ""
"`description` is a short string to describe the effect of the option.  It "
"shall begin with a lower-case letter and a full stop (`.`) shall be omitted "
"at the end."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/technical/api-parse-options.txt:267
#, no-wrap
msgid "Option Callbacks"
msgstr "Option Callbacks"

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:270
msgid "The function must be defined in this form:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:272
#, no-wrap
msgid "\tint func(const struct option *opt, const char *arg, int unset)\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:274
msgid "The callback mechanism is as follows:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:281
msgid ""
"Inside `func`, the only interesting member of the structure given by `opt` "
"is the void pointer `opt->value`.  `*opt->value` will be the value that is "
"saved into `var`, if you use `OPT_CALLBACK()`.  For example, do `*(unsigned "
"long *)opt->value = 42;` to get 42 into an `unsigned long` variable."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:284
msgid ""
"Return value `0` indicates success and non-zero return value will invoke "
"`usage_with_options()` and, thus, die."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:286
msgid "If the user negates the option, `arg` is `NULL` and `unset` is 1."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/technical/api-parse-options.txt:288
#, no-wrap
msgid "Sophisticated option parsing"
msgstr "Sophisticated option parsing"

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:294
msgid ""
"If you need, for example, option callbacks with optional arguments or "
"without arguments at all, or if you need other special cases, that are not "
"handled by the macros above, you need to specify the members of the `option` "
"structure manually."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:297
msgid ""
"This is not covered in this document, but well documented in `parse-options."
"h` itself."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/technical/api-parse-options.txt:299
#, no-wrap
msgid "Examples"
msgstr "Examples"

#. type: Plain text
#: ../Documentation-sedout/technical/api-parse-options.txt:308
msgid ""
"See `test-parse-options.c` and `builtin/add.c`, `builtin/clone.c`, `builtin/"
"commit.c`, `builtin/fetch.c`, `builtin/fsck.c`, `builtin/rm.c` for real-"
"world examples."
msgstr ""
