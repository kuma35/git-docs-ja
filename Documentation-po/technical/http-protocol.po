# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-11-04 05:35+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/technical/http-protocol.txt:2
#, no-wrap
msgid "HTTP transfer protocols"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:8
msgid ""
"Git supports two HTTP based transfer protocols.  A \"dumb\" protocol which "
"requires only a standard HTTP server on the server end of the connection, "
"and a \"smart\" protocol which requires a Git aware CGI (or server module).  "
"This document describes both protocols."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:13
msgid ""
"As a design feature smart clients can automatically upgrade \"dumb\" "
"protocol URLs to smart URLs.  This permits all users to have the same "
"published URL, and the peers automatically select the most efficient "
"transport available to them."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/technical/http-protocol.txt:16
#, no-wrap
msgid "URL Format"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:20
msgid ""
"URLs for Git repositories accessed by HTTP use the standard HTTP URL syntax "
"documented by RFC 1738, so they are of the form:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:22
#, no-wrap
msgid "  http://<host>:<port>/<path>?<searchpart>\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:25
msgid ""
"Within this documentation the placeholder `$GIT_URL` will stand for the "
"http:// repository URL entered by the end-user."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:30
msgid ""
"Servers SHOULD handle all requests to locations matching `$GIT_URL`, as both "
"the \"smart\" and \"dumb\" HTTP protocols used by Git operate by appending "
"additional path components onto the end of the user supplied `$GIT_URL` "
"string."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:32
msgid "An example of a dumb client requesting for a loose object:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:35
#, no-wrap
msgid ""
"  $GIT_URL:     http://example.com:8080/git/repo.git\n"
"  URL request:  http://example.com:8080/git/repo.git/objects/d0/49f6c27a2244e12041955e262a404c7faba355\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:37
msgid "An example of a smart request to a catch-all gateway:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:40
#, no-wrap
msgid ""
"  $GIT_URL:     http://example.com/daemon.cgi?svc=git&q=\n"
"  URL request:  http://example.com/daemon.cgi?svc=git&q=/info/refs&service=git-receive-pack\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:42
msgid "An example of a request to a submodule:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:45
#, no-wrap
msgid ""
"  $GIT_URL:     http://example.com/git/repo.git/path/submodule.git\n"
"  URL request:  http://example.com/git/repo.git/path/submodule.git/info/refs\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:50
msgid ""
"Clients MUST strip a trailing `/`, if present, from the user supplied `"
"$GIT_URL` string to prevent empty path tokens (`//`) from appearing in any "
"URL sent to a server.  Compatible clients MUST expand `$GIT_URL/info/refs` "
"as `foo/info/refs` and not `foo//info/refs`."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/technical/http-protocol.txt:53
#, no-wrap
msgid "Authentication"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:58
msgid ""
"Standard HTTP authentication is used if authentication is required to access "
"a repository, and MAY be configured and enforced by the HTTP server software."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:62
msgid ""
"Because Git repositories are accessed by standard path components server "
"administrators MAY use directory based permissions within their HTTP server "
"to control repository access."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:66
msgid ""
"Clients SHOULD support Basic authentication as described by RFC 2617.  "
"Servers SHOULD support Basic authentication by relying upon the HTTP server "
"placed in front of the Git server software."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:69
msgid ""
"Servers SHOULD NOT require HTTP cookies for the purposes of authentication "
"or access control."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:72
msgid ""
"Clients and servers MAY support other common forms of HTTP based "
"authentication, such as Digest authentication."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/technical/http-protocol.txt:75
#, no-wrap
msgid "SSL"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:79
msgid ""
"Clients and servers SHOULD support SSL, particularly to protect passwords "
"when relying on Basic HTTP authentication."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/technical/http-protocol.txt:82
#, no-wrap
msgid "Session State"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:89
msgid ""
"The Git over HTTP protocol (much like HTTP itself) is stateless from the "
"perspective of the HTTP server side.  All state MUST be retained and managed "
"by the client process.  This permits simple round-robin load-balancing on "
"the server side, without needing to worry about state management."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:92
msgid ""
"Clients MUST NOT require state management on the server side in order to "
"function correctly."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:97
msgid ""
"Servers MUST NOT require HTTP cookies in order to function correctly.  "
"Clients MAY store and forward HTTP cookies during request processing as "
"described by RFC 2616 (HTTP/1.1).  Servers SHOULD ignore any cookies sent by "
"a client."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/technical/http-protocol.txt:100
#, no-wrap
msgid "General Request Processing"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:105
msgid ""
"Except where noted, all standard HTTP behavior SHOULD be assumed by both "
"client and server.  This includes (but is not necessarily limited to):"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:111
msgid ""
"If there is no repository at `$GIT_URL`, or the resource pointed to by a "
"location matching `$GIT_URL` does not exist, the server MUST NOT respond "
"with `200 OK` response.  A server SHOULD respond with `404 Not Found`, `410 "
"Gone`, or any other suitable HTTP status code which does not imply the "
"resource exists as requested."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:115
msgid ""
"If there is a repository at `$GIT_URL`, but access is not currently "
"permitted, the server MUST respond with the `403 Forbidden` HTTP status code."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:119
msgid ""
"Servers SHOULD support both HTTP 1.0 and HTTP 1.1.  Servers SHOULD support "
"chunked encoding for both request and response bodies."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:123
msgid ""
"Clients SHOULD support both HTTP 1.0 and HTTP 1.1.  Clients SHOULD support "
"chunked encoding for both request and response bodies."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:125
msgid "Servers MAY return ETag and/or Last-Modified headers."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:128
msgid ""
"Clients MAY revalidate cached entities by including If-Modified-Since and/or "
"If-None-Match request headers."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:132
msgid ""
"Servers MAY return `304 Not Modified` if the relevant headers appear in the "
"request and the entity has not changed.  Clients MUST treat `304 Not "
"Modified` identical to `200 OK` by reusing the cached entity."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:136
msgid ""
"Clients MAY reuse a cached entity without revalidation if the Cache-Control "
"and/or Expires header permits caching.  Clients and servers MUST follow RFC "
"2616 for cache controls."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/technical/http-protocol.txt:139
#, no-wrap
msgid "Discovering References"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:143
msgid ""
"All HTTP clients MUST begin either a fetch or a push exchange by discovering "
"the references available on the remote repository."
msgstr ""

#. type: Title ~
#: ../Documentation-sedout/technical/http-protocol.txt:145
#, no-wrap
msgid "Dumb Clients"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:150
msgid ""
"HTTP clients that only support the \"dumb\" protocol MUST discover "
"references by making a request for the special info/refs file of the "
"repository."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:153
msgid ""
"Dumb HTTP clients MUST make a `GET` request to `$GIT_URL/info/refs`, without "
"any search/query parameters."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:155
#, no-wrap
msgid "   C: GET $GIT_URL/info/refs HTTP/1.0\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:162
#: ../Documentation-sedout/technical/http-protocol.txt:209
#, no-wrap
msgid ""
"   S: 200 OK\n"
"   S:\n"
"   S: 95dcfa3633004da0049d3d0fa03f80589cbcaf31\trefs/heads/maint\n"
"   S: d049f6c27a2244e12041955e262a404c7faba355\trefs/heads/master\n"
"   S: 2cb58b79488a98d2721cea644875a8dd0026b115\trefs/tags/v1.0\n"
"   S: a3c2e2402b99163d1d59756e5f207ae21cccba4c\trefs/tags/v1.0^{}\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:168
msgid ""
"The Content-Type of the returned info/refs entity SHOULD be `text/plain; "
"charset=utf-8`, but MAY be any content type.  Clients MUST NOT attempt to "
"validate the returned Content-Type.  Dumb servers MUST NOT return a return "
"type starting with `application/x-git-`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:171
msgid ""
"Cache-Control headers MAY be returned to disable caching of the returned "
"entity."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:174
msgid ""
"When examining the response clients SHOULD only examine the HTTP status "
"code.  Valid responses are `200 OK`, or `304 Not Modified`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:179
msgid ""
"The returned content is a UNIX formatted text file describing each ref and "
"its known value.  The file SHOULD be sorted by name according to the C "
"locale ordering.  The file SHOULD NOT include the default ref named `HEAD`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:182
#, no-wrap
msgid ""
"  info_refs   =  *( ref_record )\n"
"  ref_record  =  any_ref / peeled_ref\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:186
#, no-wrap
msgid ""
"  any_ref     =  obj-id HTAB refname LF\n"
"  peeled_ref  =  obj-id HTAB refname LF\n"
"\t\t obj-id HTAB refname \"^{}\" LF\n"
msgstr ""

#. type: Title ~
#: ../Documentation-sedout/technical/http-protocol.txt:188
#, no-wrap
msgid "Smart Clients"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:193
msgid ""
"HTTP clients that support the \"smart\" protocol (or both the \"smart\" and "
"\"dumb\" protocols) MUST discover references by making a parameterized "
"request for the info/refs file of the repository."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:198
msgid ""
"The request MUST contain exactly one query parameter, `service="
"$servicename`, where `$servicename` MUST be the service name the client "
"wishes to contact to complete the operation.  The request MUST NOT contain "
"additional query parameters."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:200
#, no-wrap
msgid "   C: GET $GIT_URL/info/refs?service=git-upload-pack HTTP/1.0\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:202
msgid "dumb server reply:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:211
msgid "smart server reply:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:223
#, no-wrap
msgid ""
"   S: 200 OK\n"
"   S: Content-Type: application/x-git-upload-pack-advertisement\n"
"   S: Cache-Control: no-cache\n"
"   S:\n"
"   S: 001e# service=git-upload-pack\\n\n"
"   S: 0000\n"
"   S: 004895dcfa3633004da0049d3d0fa03f80589cbcaf31 refs/heads/maint\\0multi_ack\\n\n"
"   S: 003fd049f6c27a2244e12041955e262a404c7faba355 refs/heads/master\\n\n"
"   S: 003c2cb58b79488a98d2721cea644875a8dd0026b115 refs/tags/v1.0\\n\n"
"   S: 003fa3c2e2402b99163d1d59756e5f207ae21cccba4c refs/tags/v1.0^{}\\n\n"
"   S: 0000\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:227
msgid ""
"The client may send Extra Parameters (see Documentation/technical/pack-"
"protocol.txt) as a colon-separated string in the Git-Protocol HTTP header."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:230
msgid ""
"Uses the `--http-backend-info-refs` option to linkgit:git-upload-pack[1]."
msgstr ""

#. type: Title ^
#: ../Documentation-sedout/technical/http-protocol.txt:232
#, no-wrap
msgid "Dumb Server Response"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:234
msgid "Dumb servers MUST respond with the dumb server reply format."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:237
msgid ""
"See the prior section under dumb clients for a more detailed description of "
"the dumb server response."
msgstr ""

#. type: Title ^
#: ../Documentation-sedout/technical/http-protocol.txt:239
#, no-wrap
msgid "Smart Server Response"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:243
msgid ""
"If the server does not recognize the requested service name, or the "
"requested service name has been disabled by the server administrator, the "
"server MUST respond with the `403 Forbidden` HTTP status code."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:246
msgid ""
"Otherwise, smart servers MUST respond with the smart server reply format for "
"the requested service name."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:249
msgid ""
"Cache-Control headers SHOULD be used to disable caching of the returned "
"entity."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:256
msgid ""
"The Content-Type MUST be `application/x-$servicename-advertisement`.  "
"Clients SHOULD fall back to the dumb protocol if another content type is "
"returned.  When falling back to the dumb protocol clients SHOULD NOT make an "
"additional request to `$GIT_URL/info/refs`, but instead SHOULD use the "
"response already in hand.  Clients MUST NOT continue if they do not support "
"the dumb protocol."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:259
msgid ""
"Clients MUST validate the status code is either `200 OK` or `304 Not "
"Modified`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:263
msgid ""
"Clients MUST validate the first five bytes of the response entity matches "
"the regex `^[0-9a-f]{4}#`.  If this test fails, clients MUST NOT continue."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:266
msgid ""
"Clients MUST parse the entire response as a sequence of pkt-line records."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:271
msgid ""
"Clients MUST verify the first pkt-line is `# service=$servicename`.  Servers "
"MUST set $servicename to be the request parameter value.  Servers SHOULD "
"include an LF at the end of this line.  Clients MUST ignore an LF at the end "
"of the line."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:274
msgid ""
"Servers MUST terminate the response with the magic `0000` end pkt-line "
"marker."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:280
msgid ""
"The returned response is a pkt-line stream describing each ref and its known "
"value.  The stream SHOULD be sorted by name according to the C locale "
"ordering.  The stream SHOULD include the default ref named `HEAD` as the "
"first ref.  The stream MUST include capability declarations behind a NUL on "
"the first ref."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:283
msgid ""
"The returned response contains \"version 1\" if \"version=1\" was sent as an "
"Extra Parameter."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:290
#, no-wrap
msgid ""
"  smart_reply     =  PKT-LINE(\"# service=$servicename\" LF)\n"
"\t\t     \"0000\"\n"
"\t\t     *1(\"version 1\")\n"
"\t\t     ref_list\n"
"\t\t     \"0000\"\n"
"  ref_list        =  empty_list / non_empty_list\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:292
#, no-wrap
msgid "  empty_list      =  PKT-LINE(zero-id SP \"capabilities^{}\" NUL cap-list LF)\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:295
#, no-wrap
msgid ""
"  non_empty_list  =  PKT-LINE(obj-id SP name NUL cap_list LF)\n"
"\t\t     *ref_record\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:299
#, no-wrap
msgid ""
"  cap-list        =  capability *(SP capability)\n"
"  capability      =  1*(LC_ALPHA / DIGIT / \"-\" / \"_\")\n"
"  LC_ALPHA        =  %x61-7A\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:304
#, no-wrap
msgid ""
"  ref_record      =  any_ref / peeled_ref\n"
"  any_ref         =  PKT-LINE(obj-id SP name LF)\n"
"  peeled_ref      =  PKT-LINE(obj-id SP name LF)\n"
"\t\t     PKT-LINE(obj-id SP name \"^{}\" LF\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:307
msgid "Smart Service git-upload-pack"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:309
#, no-wrap
msgid "This service reads from the repository pointed to by `$GIT_URL`.\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:312
#, no-wrap
msgid ""
"Clients MUST first perform ref discovery with\n"
"`$GIT_URL/info/refs?service=git-upload-pack`.\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:319
#, no-wrap
msgid ""
"   C: POST $GIT_URL/git-upload-pack HTTP/1.0\n"
"   C: Content-Type: application/x-git-upload-pack-request\n"
"   C:\n"
"   C: 0032want 0a53e9ddeaddad63ad106860237bbf53411d11a7\\n\n"
"   C: 0032have 441b40d833fdfa93eb2908e52742248faf0ee993\\n\n"
"   C: 0000\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:326
#, no-wrap
msgid ""
"   S: 200 OK\n"
"   S: Content-Type: application/x-git-upload-pack-result\n"
"   S: Cache-Control: no-cache\n"
"   S:\n"
"   S: ....ACK %s, continue\n"
"   S: ....NAK\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:330
#, no-wrap
msgid ""
"Clients MUST NOT reuse or revalidate a cached response.\n"
"Servers MUST include sufficient Cache-Control headers\n"
"to prevent caching of the response.\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:332
#, no-wrap
msgid "Servers SHOULD support all capabilities defined here.\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:338
#, no-wrap
msgid ""
"Clients MUST send at least one \"want\" command in the request body.\n"
"Clients MUST NOT reference an id in a \"want\" command which did not\n"
"appear in the response obtained through ref discovery unless the\n"
"server advertises capability `allow-tip-sha1-in-want` or\n"
"`allow-reachable-sha1-in-want`.\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:343
#, no-wrap
msgid ""
"  compute_request   =  want_list\n"
"\t\t       have_list\n"
"\t\t       request_end\n"
"  request_end       =  \"0000\" / \"done\"\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:349
#, no-wrap
msgid ""
"  want_list         =  PKT-LINE(want SP cap_list LF)\n"
"\t\t       *(want_pkt)\n"
"  want_pkt          =  PKT-LINE(want LF)\n"
"  want              =  \"want\" SP id\n"
"  cap_list          =  capability *(SP capability)\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:351
#, no-wrap
msgid "  have_list         =  *PKT-LINE(\"have\" SP id LF)\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:353
#, no-wrap
msgid "TODO: Document this further.\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:358
#, no-wrap
msgid ""
"The Negotiation Algorithm\n"
"~~~~~~~~~~~~~~~~~~~~~~~~~\n"
"The computation to select the minimal pack proceeds as follows\n"
"(C = client, S = server):\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:360
#, no-wrap
msgid "'init step:'\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:362
#, no-wrap
msgid "C: Use ref discovery to obtain the advertised refs.\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:364
#, no-wrap
msgid "C: Place any object seen into set `advertised`.\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:367
#, no-wrap
msgid ""
"C: Build an empty set, `common`, to hold the objects that are later\n"
"   determined to be on both ends.\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:370
#, no-wrap
msgid ""
"C: Build a set, `want`, of the objects from `advertised` the client\n"
"   wants to fetch, based on what it saw during ref discovery.\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:375
#, no-wrap
msgid ""
"C: Start a queue, `c_pending`, ordered by commit time (popping newest\n"
"   first).  Add all client refs.  When a commit is popped from\n"
"   the queue its parents SHOULD be automatically inserted back.\n"
"   Commits MUST only enter the queue once.\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:377
#, no-wrap
msgid "'one compute step:'\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:379
#, no-wrap
msgid "C: Send one `$GIT_URL/git-upload-pack` request:\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:390
#, no-wrap
msgid ""
"   C: 0032want <want #1>...............................\n"
"   C: 0032want <want #2>...............................\n"
"   ....\n"
"   C: 0032have <common #1>.............................\n"
"   C: 0032have <common #2>.............................\n"
"   ....\n"
"   C: 0032have <have #1>...............................\n"
"   C: 0032have <have #2>...............................\n"
"   ....\n"
"   C: 0000\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:397
#, no-wrap
msgid ""
"The stream is organized into \"commands\", with each command\n"
"appearing by itself in a pkt-line.  Within a command line,\n"
"the text leading up to the first space is the command name,\n"
"and the remainder of the line to the first LF is the value.\n"
"Command lines are terminated with an LF as the last byte of\n"
"the pkt-line value.\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:400
#, no-wrap
msgid ""
"Commands MUST appear in the following order, if they appear\n"
"at all in the request stream:\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:403
#, no-wrap
msgid ""
"* \"want\"\n"
"* \"have\"\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:405
#, no-wrap
msgid "The stream is terminated by a pkt-line flush (`0000`).\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:410
#, no-wrap
msgid ""
"A single \"want\" or \"have\" command MUST have one hex formatted\n"
"object name as its value.  Multiple object names MUST be sent by sending\n"
"multiple commands. Object names MUST be given using the object format\n"
"negotiated through the `object-format` capability (default SHA-1).\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:413
#, no-wrap
msgid ""
"The `have` list is created by popping the first 32 commits\n"
"from `c_pending`.  Less can be supplied if `c_pending` empties.\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:418
#, no-wrap
msgid ""
"If the client has sent 256 \"have\" commits and has not yet\n"
"received one of those back from `s_common`, or the client has\n"
"emptied `c_pending` it SHOULD include a \"done\" command to let\n"
"the server know it won't proceed:\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:420
#, no-wrap
msgid "   C: 0009done\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:422
#, no-wrap
msgid "S: Parse the git-upload-pack request:\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:424
#, no-wrap
msgid "Verify all objects in `want` are directly reachable from refs.\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:427
#, no-wrap
msgid ""
"The server MAY walk backwards through history or through\n"
"the reflog to permit slightly stale requests.\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:430
#, no-wrap
msgid ""
"If no \"want\" objects are received, send an error:\n"
"TODO: Define error if no \"want\" lines are requested.\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:433
#, no-wrap
msgid ""
"If any \"want\" object is not reachable, send an error:\n"
"TODO: Define error if an invalid \"want\" is requested.\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:435
#, no-wrap
msgid "Create an empty list, `s_common`.\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:437
#, no-wrap
msgid "If \"have\" was sent:\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:439
#, no-wrap
msgid "Loop through the objects in the order supplied by the client.\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:443
#, no-wrap
msgid ""
"For each object, if the server has the object reachable from\n"
"a ref, add it to `s_common`.  If a commit is added to `s_common`,\n"
"do not add any ancestors, even if they also appear in `have`.\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:445
#, no-wrap
msgid "S: Send the git-upload-pack response:\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:449
#, no-wrap
msgid ""
"If the server has found a closed set of objects to pack or the\n"
"request ends with \"done\", it replies with the pack.\n"
"TODO: Document the pack based response\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:451
#, no-wrap
msgid "   S: PACK...\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:456
#, no-wrap
msgid ""
"The returned stream is the side-band-64k protocol supported\n"
"by the git-upload-pack service, and the pack is embedded into\n"
"stream 1.  Progress messages from the server side MAY appear\n"
"in stream 2.\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:459
#, no-wrap
msgid ""
"Here a \"closed set of objects\" is defined to have at least\n"
"one path from every \"want\" to at least one \"common\" object.\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:463
#, no-wrap
msgid ""
"If the server needs more information, it replies with a\n"
"status continue response:\n"
"TODO: Document the non-pack response\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:466
#, no-wrap
msgid ""
"C: Parse the upload-pack response:\n"
"   TODO: Document parsing response\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:468
#, no-wrap
msgid "'Do another compute step.'\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/technical/http-protocol.txt:471
#, no-wrap
msgid "Smart Service git-receive-pack\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:473
msgid "This service reads from the repository pointed to by `$GIT_URL`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:476
msgid ""
"Clients MUST first perform ref discovery with `$GIT_URL/info/refs?"
"service=git-receive-pack`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:483
#, no-wrap
msgid ""
"   C: POST $GIT_URL/git-receive-pack HTTP/1.0\n"
"   C: Content-Type: application/x-git-receive-pack-request\n"
"   C:\n"
"   C: ....0a53e9ddeaddad63ad106860237bbf53411d11a7 441b40d833fdfa93eb2908e52742248faf0ee993 refs/heads/maint\\0 report-status\n"
"   C: 0000\n"
"   C: PACK....\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:489
#, no-wrap
msgid ""
"   S: 200 OK\n"
"   S: Content-Type: application/x-git-receive-pack-result\n"
"   S: Cache-Control: no-cache\n"
"   S:\n"
"   S: ....\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:493
msgid ""
"Clients MUST NOT reuse or revalidate a cached response.  Servers MUST "
"include sufficient Cache-Control headers to prevent caching of the response."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:495
msgid "Servers SHOULD support all capabilities defined here."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:499
msgid ""
"Clients MUST send at least one command in the request body.  Within the "
"command portion of the request body clients SHOULD send the id obtained "
"through ref discovery as old_id."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:502
#, no-wrap
msgid ""
"  update_request  =  command_list\n"
"\t\t     \"PACK\" <binary data>\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:507
#, no-wrap
msgid ""
"  command_list    =  PKT-LINE(command NUL cap_list LF)\n"
"\t\t     *(command_pkt)\n"
"  command_pkt     =  PKT-LINE(command LF)\n"
"  cap_list        =  *(SP capability) SP\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:512
#, no-wrap
msgid ""
"  command         =  create / delete / update\n"
"  create          =  zero-id SP new_id SP name\n"
"  delete          =  old_id SP zero-id SP name\n"
"  update          =  old_id SP new_id SP name\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:514
msgid "TODO: Document this further."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/technical/http-protocol.txt:517
#, no-wrap
msgid "References"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:522
msgid ""
"http://www.ietf.org/rfc/rfc1738.txt[RFC 1738: Uniform Resource Locators "
"(URL)] http://www.ietf.org/rfc/rfc2616.txt[RFC 2616: Hypertext Transfer "
"Protocol -- HTTP/1.1] link:technical/pack-protocol.html link:technical/"
"protocol-capabilities.html"
msgstr ""
