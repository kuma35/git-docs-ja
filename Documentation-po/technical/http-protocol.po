# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 0.0\n"
"POT-Creation-Date: 2022-09-03 21:12+0900\n"
"PO-Revision-Date: 2022-09-04 21:30+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/technical/http-protocol.txt:1
#, no-wrap
msgid "HTTP transfer protocols"
msgstr "HTTP transfer protocols"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:8
msgid ""
"Git supports two HTTP based transfer protocols.  A \"dumb\" protocol which "
"requires only a standard HTTP server on the server end of the connection, "
"and a \"smart\" protocol which requires a Git aware CGI (or server module).  "
"This document describes both protocols."
msgstr "Git は、2 つの HTTP ベースの転送プロトコルをサポートしています。 接続するサーバー側で標準の HTTP サーバーのみを必要とする「バカ」(dumb)プロトコルと、Git 対応の CGI (またはサーバーモジュール) を必要とする「スマート」プロトコルです。 このドキュメントでは、両方のプロトコルについて説明します。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:13
msgid ""
"As a design feature smart clients can automatically upgrade \"dumb\" "
"protocol URLs to smart URLs.  This permits all users to have the same "
"published URL, and the peers automatically select the most efficient "
"transport available to them."
msgstr "設計機能として、スマートクライアントは「バカ」(dumb)プロトコル URL をスマート URL に自動的にアップグレードできます。 これにより、すべてのユーザーが同じ URL を公開できるようになり、接続先(the peers)では利用可能な最も効率的な転送方法(transport)を自動的に選択します。"

#. type: Title ==
#: ../Documentation-sedout/technical/http-protocol.txt:15
#, no-wrap
msgid "URL Format"
msgstr "URL Format"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:20
msgid ""
"URLs for Git repositories accessed by HTTP use the standard HTTP URL syntax "
"documented by RFC 1738, so they are of the form:"
msgstr "HTTP によってアクセスされる Git リポジトリの URL は、RFC 1738 で文書化されている標準の HTTP URL 構文を使用するため、以下の形式になります:"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:22
#, no-wrap
msgid "  http://<host>:<port>/<path>?<searchpart>\n"
msgstr "  http://<host>:<port>/<path>?<searchpart>\n"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:25
msgid ""
"Within this documentation the placeholder `$GIT_URL` will stand for the "
"http:// repository URL entered by the end-user."
msgstr "このドキュメントでは、プレースホルダー `$GIT_URL` は、エンドユーザーが入力した  http:// リポジトリ URL を表すことにします。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:30
msgid ""
"Servers SHOULD handle all requests to locations matching `$GIT_URL`, as both "
"the \"smart\" and \"dumb\" HTTP protocols used by Git operate by appending "
"additional path components onto the end of the user supplied `$GIT_URL` "
"string."
msgstr "サーバーは、`$GIT_URL` に一致する場所へのすべてのリクエストを処理するべきです。 これは、Git で使用される「スマート」および「バカ」(dumb) HTTP プロトコルの両方が、ユーザーが指定した `$GIT_URL` 文字列の末尾に追加のパスコンポーネントを追加することによって動作するためです。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:32
msgid "An example of a dumb client requesting for a loose object:"
msgstr "ルーズオブジェクトをリクエストするバカ(dumb)クライアントの例:"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:35
#, no-wrap
msgid ""
"  $GIT_URL:     http://example.com:8080/git/repo.git\n"
"  URL request:  http://example.com:8080/git/repo.git/objects/d0/49f6c27a2244e12041955e262a404c7faba355\n"
msgstr ""
"  $GIT_URL:     http://example.com:8080/git/repo.git\n"
"  URL request:  http://example.com:8080/git/repo.git/objects/d0/49f6c27a2244e12041955e262a404c7faba355\n"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:37
msgid "An example of a smart request to a catch-all gateway:"
msgstr "キャッチオール(catch-all)ゲートウェイへのスマートリクエストの例:"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:40
#, no-wrap
msgid ""
"  $GIT_URL:     http://example.com/daemon.cgi?svc=git&q=\n"
"  URL request:  http://example.com/daemon.cgi?svc=git&q=/info/refs&service=git-receive-pack\n"
msgstr ""
"  $GIT_URL:     http://example.com/daemon.cgi?svc=git&q=\n"
"  URL request:  http://example.com/daemon.cgi?svc=git&q=/info/refs&service=git-receive-pack\n"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:42
msgid "An example of a request to a submodule:"
msgstr "サブモジュール(submodule)へのリクエスト例:"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:45
#, no-wrap
msgid ""
"  $GIT_URL:     http://example.com/git/repo.git/path/submodule.git\n"
"  URL request:  http://example.com/git/repo.git/path/submodule.git/info/refs\n"
msgstr ""
"  $GIT_URL:     http://example.com/git/repo.git/path/submodule.git\n"
"  URL request:  http://example.com/git/repo.git/path/submodule.git/info/refs\n"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:50
msgid ""
"Clients MUST strip a trailing `/`, if present, from the user supplied `"
"$GIT_URL` string to prevent empty path tokens (`//`) from appearing in any "
"URL sent to a server.  Compatible clients MUST expand `$GIT_URL/info/refs` "
"as `foo/info/refs` and not `foo//info/refs`."
msgstr "クライアントは、サーバーに送信されるURLに空のパストークン(`//`)が表示されるのを防ぐために、ユーザーから与えられた $GIT_URL 文字列から、末尾に `/` がある場合はそれを削除しなければなりません。 互換性のあるクライアントは、`$GIT_URL/info/refs` を `foo//info/refs` ではなく、`foo/info/refs` として展開しなｋればなりません。"

#. type: Title ==
#: ../Documentation-sedout/technical/http-protocol.txt:52
#, no-wrap
msgid "Authentication"
msgstr "Authentication"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:58
msgid ""
"Standard HTTP authentication is used if authentication is required to access "
"a repository, and MAY be configured and enforced by the HTTP server software."
msgstr "リポジトリへのアクセスに認証が必要な場合は、標準の HTTP 認証が使用され、HTTPサーバーソフトウェアによって構成および強制される場合があります。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:62
msgid ""
"Because Git repositories are accessed by standard path components server "
"administrators MAY use directory based permissions within their HTTP server "
"to control repository access."
msgstr "Gitリポジトリは標準パスコンポーネントによってアクセスされるため、サーバー管理者はHTTPサーバー内でディレクトリベースのアクセス許可を使用して、リポジトリ アクセスを制御できます。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:66
msgid ""
"Clients SHOULD support Basic authentication as described by RFC 2617.  "
"Servers SHOULD support Basic authentication by relying upon the HTTP server "
"placed in front of the Git server software."
msgstr "クライアントは、RFC 2617 で説明されているベーシック認証をサポートする必要があります。 サーバーは、Gitサーバーソフトウェアの前に置かれたHTTPサーバーに頼ってベーシック認証をサポートすべきです(SHOULD)。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:69
msgid ""
"Servers SHOULD NOT require HTTP cookies for the purposes of authentication "
"or access control."
msgstr "サーバーは、認証またはアクセス制御の目的で HTTP クッキーを要求すべきではありません。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:72
msgid ""
"Clients and servers MAY support other common forms of HTTP based "
"authentication, such as Digest authentication."
msgstr "クライアントとサーバーは、ダイジェスト認証など、他の一般的なHTTPベースの認証形式をサポートする場合があります。"

#. type: Title ==
#: ../Documentation-sedout/technical/http-protocol.txt:74
#, no-wrap
msgid "SSL"
msgstr "SSL"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:79
msgid ""
"Clients and servers SHOULD support SSL, particularly to protect passwords "
"when relying on Basic HTTP authentication."
msgstr "クライアントとサーバーはSSLをサポートするべきです(SHOULD)。特に、ベーシック HTTP 認証に頼る場合にパスワードを保護するためです。"

#. type: Title ==
#: ../Documentation-sedout/technical/http-protocol.txt:81
#, no-wrap
msgid "Session State"
msgstr "Session State"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:89
msgid ""
"The Git over HTTP protocol (much like HTTP itself) is stateless from the "
"perspective of the HTTP server side.  All state MUST be retained and managed "
"by the client process.  This permits simple round-robin load-balancing on "
"the server side, without needing to worry about state management."
msgstr "Git over HTTP プロトコル (HTTP 自体とよく似ています) は、HTTP サーバー側から見るとステートレスです。 すべての状態は、クライアントプロセスによって保持および管理されなければなりません。 これにより、サーバー側で単純なラウンドロビン負荷分散が可能になり、状態管理について心配する必要がなくなります。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:92
msgid ""
"Clients MUST NOT require state management on the server side in order to "
"function correctly."
msgstr "クライアントは、正しく機能するためにサーバー側に状態管理を要求してはなりません。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:97
msgid ""
"Servers MUST NOT require HTTP cookies in order to function correctly.  "
"Clients MAY store and forward HTTP cookies during request processing as "
"described by RFC 2616 (HTTP/1.1).  Servers SHOULD ignore any cookies sent by "
"a client."
msgstr "サーバーは、正しく機能するために HTTP Cookie を要求してはなりません。 クライアントは、RFC 2616 (HTTP/1.1) で説明されているように、リクエスト処理中に HTTP Cookie を保存および転送できます。 サーバーは、クライアントから送信されたすべての Cookie を無視する必要があります。"

#. type: Title ==
#: ../Documentation-sedout/technical/http-protocol.txt:99
#, no-wrap
msgid "General Request Processing"
msgstr "General Request Processing"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:105
msgid ""
"Except where noted, all standard HTTP behavior SHOULD be assumed by both "
"client and server.  This includes (but is not necessarily limited to):"
msgstr "特に明記されている場合を除き、すべての標準 HTTP 動作は、クライアントとサーバーの両方で想定される必要があります。 これには以下が含まれます(必ずしもこれらに限定されません):"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:111
msgid ""
"If there is no repository at `$GIT_URL`, or the resource pointed to by a "
"location matching `$GIT_URL` does not exist, the server MUST NOT respond "
"with `200 OK` response.  A server SHOULD respond with `404 Not Found`, `410 "
"Gone`, or any other suitable HTTP status code which does not imply the "
"resource exists as requested."
msgstr "$GIT_URL にリポジトリがない場合、または $GIT_URL に一致する場所が指すリソースが存在しない場合、サーバーは `200 OK` 応答で応答してはいけません。 サーバーは、 `404 Not Found` または `410 Gone` または要求どおりにリソースが存在することを意味しないその他の適切な HTTP ステータス コードで応答する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:115
msgid ""
"If there is a repository at `$GIT_URL`, but access is not currently "
"permitted, the server MUST respond with the `403 Forbidden` HTTP status code."
msgstr "$GIT_URL にリポジトリがあるが、アクセスが現在許可されていない場合、サーバーは `403 Forbidden` HTTP ステータス コードで応答しなければなりません。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:119
msgid ""
"Servers SHOULD support both HTTP 1.0 and HTTP 1.1.  Servers SHOULD support "
"chunked encoding for both request and response bodies."
msgstr "サーバーは、HTTP 1.0 と HTTP 1.1 の両方をサポートする必要があります。 サーバーは、リクエスト本文とレスポンス本文の両方でチャンクエンコーディングをサポートする必要があります。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:123
msgid ""
"Clients SHOULD support both HTTP 1.0 and HTTP 1.1.  Clients SHOULD support "
"chunked encoding for both request and response bodies."
msgstr "クライアントは、HTTP 1.0 と HTTP 1.1 の両方をサポートする必要があります。 クライアントは、リクエスト本文とレスポンス本文の両方でチャンクエンコーディングをサポートする必要があります。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:125
msgid "Servers MAY return ETag and/or Last-Modified headers."
msgstr "サーバは ETag かつ/または Last-Modified ヘッダー を返すことがあります。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:128
msgid ""
"Clients MAY revalidate cached entities by including If-Modified-Since and/or "
"If-None-Match request headers."
msgstr "クライアントは、If-Modified-Since および/または If-None-Match リクエストヘッダーを含めることにより、キャッシュされたエンティティを再検証することができます。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:132
msgid ""
"Servers MAY return `304 Not Modified` if the relevant headers appear in the "
"request and the entity has not changed.  Clients MUST treat `304 Not "
"Modified` identical to `200 OK` by reusing the cached entity."
msgstr "関連するヘッダーがリクエストに表れ、エンティティが変更されていない場合、サーバーは `304 Not Modified` を返す場合があります。 クライアントは、キャッシュされたエンティティを再利用することにより、 `304 Not Modified` を `200 OK` と同じように扱わなければいけません。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:136
msgid ""
"Clients MAY reuse a cached entity without revalidation if the Cache-Control "
"and/or Expires header permits caching.  Clients and servers MUST follow RFC "
"2616 for cache controls."
msgstr "Cache-Control および/または Expires ヘッダーがキャッシュを許可する場合、クライアントは再検証なしでキャッシュされたエンティティを再利用できます。 クライアントとサーバーは、キャッシュ制御について RFC 2616 に従わなければなりません。"

#. type: Title ==
#: ../Documentation-sedout/technical/http-protocol.txt:138
#, no-wrap
msgid "Discovering References"
msgstr "Discovering References"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:143
msgid ""
"All HTTP clients MUST begin either a fetch or a push exchange by discovering "
"the references available on the remote repository."
msgstr "すべての HTTP クライアントは、リモートリポジトリで利用可能な参照を検出して、フェッチまたはプッシュ交換を開始する必要があります。"

#. type: Title ===
#: ../Documentation-sedout/technical/http-protocol.txt:144
#, no-wrap
msgid "Dumb Clients"
msgstr "Dumb Clients"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:150
msgid ""
"HTTP clients that only support the \"dumb\" protocol MUST discover "
"references by making a request for the special info/refs file of the "
"repository."
msgstr "「バカ」(dumb)プロトコルのみをサポートする HTTP クライアントは、リポジトリの特別な info/refs ファイルをリクエストして、参照を検出する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:153
msgid ""
"Dumb HTTP clients MUST make a `GET` request to `$GIT_URL/info/refs`, without "
"any search/query parameters."
msgstr "バカ(dumb) HTTP クライアントは、検索/クエリ パラメータなしで、 `$GIT_URL/info/refs` に対して `GET` リクエストを作成する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:155
#, no-wrap
msgid "   C: GET $GIT_URL/info/refs HTTP/1.0\n"
msgstr "   C: GET $GIT_URL/info/refs HTTP/1.0\n"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:162
#: ../Documentation-sedout/technical/http-protocol.txt:209
#, no-wrap
msgid ""
"   S: 200 OK\n"
"   S:\n"
"   S: 95dcfa3633004da0049d3d0fa03f80589cbcaf31\trefs/heads/maint\n"
"   S: d049f6c27a2244e12041955e262a404c7faba355\trefs/heads/master\n"
"   S: 2cb58b79488a98d2721cea644875a8dd0026b115\trefs/tags/v1.0\n"
"   S: a3c2e2402b99163d1d59756e5f207ae21cccba4c\trefs/tags/v1.0^{}\n"
msgstr ""
"   S: 200 OK\n"
"   S:\n"
"   S: 95dcfa3633004da0049d3d0fa03f80589cbcaf31\trefs/heads/maint\n"
"   S: d049f6c27a2244e12041955e262a404c7faba355\trefs/heads/master\n"
"   S: 2cb58b79488a98d2721cea644875a8dd0026b115\trefs/tags/v1.0\n"
"   S: a3c2e2402b99163d1d59756e5f207ae21cccba4c\trefs/tags/v1.0^{}\n"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:168
msgid ""
"The Content-Type of the returned info/refs entity SHOULD be `text/plain; "
"charset=utf-8`, but MAY be any content type.  Clients MUST NOT attempt to "
"validate the returned Content-Type.  Dumb servers MUST NOT return a return "
"type starting with `application/x-git-`."
msgstr "返された info/refs エンティティの Content-Type は、 `text/plain charset=utf-8` であるべきですが、任意の Content-Type である場合があります。 クライアントは、返された Content-Type の検証を試みてはいけません。 バカ(dumb)サーバーは、 `application/x-git-` で始まる戻り値のタイプを返してはいけません。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:171
msgid ""
"Cache-Control headers MAY be returned to disable caching of the returned "
"entity."
msgstr "返されたエンティティのキャッシングを無効にするために、 Cache-Control ヘッダーが返される場合があります。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:174
msgid ""
"When examining the response clients SHOULD only examine the HTTP status "
"code.  Valid responses are `200 OK`, or `304 Not Modified`."
msgstr "応答クライアントを調べる場合、HTTP ステータス コードのみを調べる必要があります。 有効な応答は、 `200 OK` または `304 Not Modified` です。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:179
msgid ""
"The returned content is a UNIX formatted text file describing each ref and "
"its known value.  The file SHOULD be sorted by name according to the C "
"locale ordering.  The file SHOULD NOT include the default ref named `HEAD`."
msgstr "返されるコンテンツは、各refとその既知の値を記述した UNIX 形式のテキストファイルです。 ファイルは、C ロケールの順序に従って名前でソートする必要があります。 ファイルには、 `HEAD` という名前のデフォルトrefを含めるべきではありません。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:182
#, no-wrap
msgid ""
"  info_refs   =  *( ref_record )\n"
"  ref_record  =  any_ref / peeled_ref\n"
msgstr ""
"  info_refs   =  *( ref_record )\n"
"  ref_record  =  any_ref / peeled_ref\n"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:186
#, no-wrap
msgid ""
"  any_ref     =  obj-id HTAB refname LF\n"
"  peeled_ref  =  obj-id HTAB refname LF\n"
"\t\t obj-id HTAB refname \"^{}\" LF\n"
msgstr ""
"  any_ref     =  obj-id HTAB refname LF\n"
"  peeled_ref  =  obj-id HTAB refname LF\n"
"\t\t obj-id HTAB refname \"^{}\" LF\n"

#. type: Title ===
#: ../Documentation-sedout/technical/http-protocol.txt:187
#, no-wrap
msgid "Smart Clients"
msgstr "Smart Clients"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:193
msgid ""
"HTTP clients that support the \"smart\" protocol (or both the \"smart\" and "
"\"dumb\" protocols) MUST discover references by making a parameterized "
"request for the info/refs file of the repository."
msgstr "「スマート」(smart)プロトコル (または「スマート」プロトコルと「バカ」(dumb)プロトコルの両方) をサポートする HTTP クライアントは、リポジトリの info/refs ファイルに対してパラメーター化された要求を行うことにより、参照を検出する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:198
msgid ""
"The request MUST contain exactly one query parameter, `service="
"$servicename`, where `$servicename` MUST be the service name the client "
"wishes to contact to complete the operation.  The request MUST NOT contain "
"additional query parameters."
msgstr "リクエストには、`service=$servicename` というクエリパラメータが 1 つだけ含まれている必要があります。ここで、 `$servicename` は、クライアントが操作を完了するために接続したいサービス名でなければなりません。 リクエストに追加のクエリパラメータを含めてはいけません。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:200
#, no-wrap
msgid "   C: GET $GIT_URL/info/refs?service=git-upload-pack HTTP/1.0\n"
msgstr "   C: GET $GIT_URL/info/refs?service=git-upload-pack HTTP/1.0\n"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:202
msgid "dumb server reply:"
msgstr "バカ(dumb)サーバー返答:"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:211
msgid "smart server reply:"
msgstr "スマートサーバー返答:"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:223
#, no-wrap
msgid ""
"   S: 200 OK\n"
"   S: Content-Type: application/x-git-upload-pack-advertisement\n"
"   S: Cache-Control: no-cache\n"
"   S:\n"
"   S: 001e# service=git-upload-pack\\n\n"
"   S: 0000\n"
"   S: 004895dcfa3633004da0049d3d0fa03f80589cbcaf31 refs/heads/maint\\0multi_ack\\n\n"
"   S: 003fd049f6c27a2244e12041955e262a404c7faba355 refs/heads/master\\n\n"
"   S: 003c2cb58b79488a98d2721cea644875a8dd0026b115 refs/tags/v1.0\\n\n"
"   S: 003fa3c2e2402b99163d1d59756e5f207ae21cccba4c refs/tags/v1.0^{}\\n\n"
"   S: 0000\n"
msgstr ""
"   S: 200 OK\n"
"   S: Content-Type: application/x-git-upload-pack-advertisement\n"
"   S: Cache-Control: no-cache\n"
"   S:\n"
"   S: 001e# service=git-upload-pack\\n\n"
"   S: 0000\n"
"   S: 004895dcfa3633004da0049d3d0fa03f80589cbcaf31 refs/heads/maint\\0multi_ack\\n\n"
"   S: 003fd049f6c27a2244e12041955e262a404c7faba355 refs/heads/master\\n\n"
"   S: 003c2cb58b79488a98d2721cea644875a8dd0026b115 refs/tags/v1.0\\n\n"
"   S: 003fa3c2e2402b99163d1d59756e5f207ae21cccba4c refs/tags/v1.0^{}\\n\n"
"   S: 0000\n"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:227
msgid ""
"The client may send Extra Parameters (see Documentation/technical/pack-"
"protocol.txt) as a colon-separated string in the Git-Protocol HTTP header."
msgstr "クライアントは、追加パラメーター(Extra Parameters)(Documentation/technical/pack-protocol.txt 参照) を、Git-Protocol HTTP ヘッダーでコロン(`:`)で区切られた文字列として送信できます。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:230
msgid ""
"Uses the `--http-backend-info-refs` option to linkgit:git-upload-pack[1]."
msgstr "`--http-backend-info-refs@ オプションを linkgit:git-upload-pack[1] に使用します。"

#. type: Title ====
#: ../Documentation-sedout/technical/http-protocol.txt:231
#, no-wrap
msgid "Dumb Server Response"
msgstr "Dumb Server Response"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:234
msgid "Dumb servers MUST respond with the dumb server reply format."
msgstr "バカ(dumb)サーバーは、バカサーバー応答形式(the dumb server reply format)で応答しなければなりません。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:237
msgid ""
"See the prior section under dumb clients for a more detailed description of "
"the dumb server response."
msgstr "バカ(dumb)サーバー応答の詳細な説明については、前述の「dumb clients」セクションを参照してください。"

#. type: Title ====
#: ../Documentation-sedout/technical/http-protocol.txt:238
#, no-wrap
msgid "Smart Server Response"
msgstr "Smart Server Response"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:243
msgid ""
"If the server does not recognize the requested service name, or the "
"requested service name has been disabled by the server administrator, the "
"server MUST respond with the `403 Forbidden` HTTP status code."
msgstr "サーバーがリクエストされたサービス名を認識しない場合、またはリクエストされたサービス名がサーバー管理者によって無効にされている場合、サーバーは `403 Forbidden` HTTP ステータス コードで応答する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:246
msgid ""
"Otherwise, smart servers MUST respond with the smart server reply format for "
"the requested service name."
msgstr "それ以外の場合、スマートサーバーは、リクエストされたサービス名のスマートサーバー返答形式(the smart server reply format)で応答する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:249
msgid ""
"Cache-Control headers SHOULD be used to disable caching of the returned "
"entity."
msgstr "Cache-Control ヘッダーは、返されたエンティティのキャッシュを無効にするために使用する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:256
msgid ""
"The Content-Type MUST be `application/x-$servicename-advertisement`.  "
"Clients SHOULD fall back to the dumb protocol if another content type is "
"returned.  When falling back to the dumb protocol clients SHOULD NOT make an "
"additional request to `$GIT_URL/info/refs`, but instead SHOULD use the "
"response already in hand.  Clients MUST NOT continue if they do not support "
"the dumb protocol."
msgstr "Content-Type は `application/x-$servicename-advertisement` でなければなりません。 別のコンテンツタイプが返された場合、クライアントはバカ(dumb)プロトコルにフォールバックする必要があります。 バカ(dumb)プロトコルクライアントにフォールバックするとき、クライアントは `$GIT_URL/info/refs` に追加のリクエストを行うべきではなく、代わりに既に手元にある応答を使用すべきです。 バカ(dumb)プロトコルをサポートしていない場合、クライアントは続行(continue)してはいけません。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:259
msgid ""
"Clients MUST validate the status code is either `200 OK` or `304 Not "
"Modified`."
msgstr "クライアントは、ステータスコードが `200 OK` または `304 Not Modified` であることを検証(validate)する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:263
msgid ""
"Clients MUST validate the first five bytes of the response entity matches "
"the regex `^[0-9a-f]{4}#`.  If this test fails, clients MUST NOT continue."
msgstr "クライアントは、応答エンティティの最初の 5 バイトが正規表現 `^[0-9a-f]{4}#` とマッチすることを検証(validate)する必要があります。 このテストが失敗した場合、クライアントは続行(continue)してはいけません。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:266
msgid ""
"Clients MUST parse the entire response as a sequence of pkt-line records."
msgstr "クライアントは、応答全体を一連の pkt-line レコードとしてパースしなければなりません。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:271
msgid ""
"Clients MUST verify the first pkt-line is `# service=$servicename`.  Servers "
"MUST set $servicename to be the request parameter value.  Servers SHOULD "
"include an LF at the end of this line.  Clients MUST ignore an LF at the end "
"of the line."
msgstr "クライアントは、最初の pkt-line が `# service=$servicename` であることを確認(verify)する必要があります。 サーバーは $servicename をリクエストパラメータ値に設定する必要があります。 サーバーは、この行の最後に LF を含める必要があります。 クライアントは、行末の LF を無視する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:274
msgid ""
"Servers MUST terminate the response with the magic `0000` end pkt-line "
"marker."
msgstr "サーバーは、魔法の `0000` pkt-line 終了マーカー(the magic `0000` end pkt-line marker)で応答を終了する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:280
msgid ""
"The returned response is a pkt-line stream describing each ref and its known "
"value.  The stream SHOULD be sorted by name according to the C locale "
"ordering.  The stream SHOULD include the default ref named `HEAD` as the "
"first ref.  The stream MUST include capability declarations behind a NUL on "
"the first ref."
msgstr "返される応答は、各refとその既知の値を説明する pkt-line ストリームです。 ストリームは、C ロケールの順序に従って名前でソートする必要があります。 ストリームには、最初のrefとして `HEAD` という名前のデフォルトref照を含める必要があります。 ストリームは、最初のrefの NUL の後ろに機能宣言(capability declarations)を含める必要があります。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:283
msgid ""
"The returned response contains \"version 1\" if \"version=1\" was sent as an "
"Extra Parameter."
msgstr "\"version=1\" が 追加パラメータ(Extra Parameter) として送信された場合、返される応答には \"version 1\" が含まれます。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:290
#, no-wrap
msgid ""
"  smart_reply     =  PKT-LINE(\"# service=$servicename\" LF)\n"
"\t\t     \"0000\"\n"
"\t\t     *1(\"version 1\")\n"
"\t\t     ref_list\n"
"\t\t     \"0000\"\n"
"  ref_list        =  empty_list / non_empty_list\n"
msgstr ""
"  smart_reply     =  PKT-LINE(\"# service=$servicename\" LF)\n"
"\t\t     \"0000\"\n"
"\t\t     *1(\"version 1\")\n"
"\t\t     ref_list\n"
"\t\t     \"0000\"\n"
"  ref_list        =  empty_list / non_empty_list\n"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:292
#, no-wrap
msgid "  empty_list      =  PKT-LINE(zero-id SP \"capabilities^{}\" NUL cap-list LF)\n"
msgstr "  empty_list      =  PKT-LINE(zero-id SP \"capabilities^{}\" NUL cap-list LF)\n"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:295
#, no-wrap
msgid ""
"  non_empty_list  =  PKT-LINE(obj-id SP name NUL cap_list LF)\n"
"\t\t     *ref_record\n"
msgstr ""
"  non_empty_list  =  PKT-LINE(obj-id SP name NUL cap_list LF)\n"
"\t\t     *ref_record\n"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:299
#, no-wrap
msgid ""
"  cap-list        =  capability *(SP capability)\n"
"  capability      =  1*(LC_ALPHA / DIGIT / \"-\" / \"_\")\n"
"  LC_ALPHA        =  %x61-7A\n"
msgstr ""
"  cap-list        =  capability *(SP capability)\n"
"  capability      =  1*(LC_ALPHA / DIGIT / \"-\" / \"_\")\n"
"  LC_ALPHA        =  %x61-7A\n"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:304
#, no-wrap
msgid ""
"  ref_record      =  any_ref / peeled_ref\n"
"  any_ref         =  PKT-LINE(obj-id SP name LF)\n"
"  peeled_ref      =  PKT-LINE(obj-id SP name LF)\n"
"\t\t     PKT-LINE(obj-id SP name \"^{}\" LF\n"
msgstr ""
"  ref_record      =  any_ref / peeled_ref\n"
"  any_ref         =  PKT-LINE(obj-id SP name LF)\n"
"  peeled_ref      =  PKT-LINE(obj-id SP name LF)\n"
"\t\t     PKT-LINE(obj-id SP name \"^{}\" LF\n"

#. type: Title ==
#: ../Documentation-sedout/technical/http-protocol.txt:306
#, no-wrap
msgid "Smart Service git-upload-pack"
msgstr "Smart Service git-upload-pack"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:309
#: ../Documentation-sedout/technical/http-protocol.txt:473
msgid "This service reads from the repository pointed to by `$GIT_URL`."
msgstr "このサービスは、 `$GIT_URL` が指すリポジトリから読み込みます。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:312
msgid ""
"Clients MUST first perform ref discovery with `$GIT_URL/info/refs?"
"service=git-upload-pack`."
msgstr "クライアントは、最初に `$GIT_URL/info/refs?service=git-upload-pack` を使用して ref 検出を実行しなければなりません。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:319
#, no-wrap
msgid ""
"   C: POST $GIT_URL/git-upload-pack HTTP/1.0\n"
"   C: Content-Type: application/x-git-upload-pack-request\n"
"   C:\n"
"   C: 0032want 0a53e9ddeaddad63ad106860237bbf53411d11a7\\n\n"
"   C: 0032have 441b40d833fdfa93eb2908e52742248faf0ee993\\n\n"
"   C: 0000\n"
msgstr ""
"   C: POST $GIT_URL/git-upload-pack HTTP/1.0\n"
"   C: Content-Type: application/x-git-upload-pack-request\n"
"   C:\n"
"   C: 0032want 0a53e9ddeaddad63ad106860237bbf53411d11a7\\n\n"
"   C: 0032have 441b40d833fdfa93eb2908e52742248faf0ee993\\n\n"
"   C: 0000\n"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:326
#, no-wrap
msgid ""
"   S: 200 OK\n"
"   S: Content-Type: application/x-git-upload-pack-result\n"
"   S: Cache-Control: no-cache\n"
"   S:\n"
"   S: ....ACK %s, continue\n"
"   S: ....NAK\n"
msgstr ""
"   S: 200 OK\n"
"   S: Content-Type: application/x-git-upload-pack-result\n"
"   S: Cache-Control: no-cache\n"
"   S:\n"
"   S: ....ACK %s, continue\n"
"   S: ....NAK\n"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:330
#: ../Documentation-sedout/technical/http-protocol.txt:493
msgid ""
"Clients MUST NOT reuse or revalidate a cached response.  Servers MUST "
"include sufficient Cache-Control headers to prevent caching of the response."
msgstr "クライアントは、キャッシュされた応答を再利用(reuse)または再検証(revalidate)してはなりません。 サーバーは、応答のキャッシュを防ぐために十分な Cache-Control ヘッダーを含める必要があります。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:332
#: ../Documentation-sedout/technical/http-protocol.txt:495
msgid "Servers SHOULD support all capabilities defined here."
msgstr "サーバーは、ここで定義されたすべての機能をサポートすべきです。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:338
msgid ""
"Clients MUST send at least one \"want\" command in the request body.  "
"Clients MUST NOT reference an id in a \"want\" command which did not appear "
"in the response obtained through ref discovery unless the server advertises "
"capability `allow-tip-sha1-in-want` or `allow-reachable-sha1-in-want`."
msgstr "クライアントは、リクエスト本文で少なくとも 1 つの `want` コマンドを送信する必要があります。 サーバーが機能 `allow-tip-sha1-in-want` または `allow-reachable-sha1-in-want` を宣伝(advertise)しない限り、クライアントは `want` コマンドで ref 検出によって取得された応答に表示されなかった ID を参照してはいけません。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:343
#, no-wrap
msgid ""
"  compute_request   =  want_list\n"
"\t\t       have_list\n"
"\t\t       request_end\n"
"  request_end       =  \"0000\" / \"done\"\n"
msgstr ""
"  compute_request   =  want_list\n"
"\t\t       have_list\n"
"\t\t       request_end\n"
"  request_end       =  \"0000\" / \"done\"\n"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:349
#, no-wrap
msgid ""
"  want_list         =  PKT-LINE(want SP cap_list LF)\n"
"\t\t       *(want_pkt)\n"
"  want_pkt          =  PKT-LINE(want LF)\n"
"  want              =  \"want\" SP id\n"
"  cap_list          =  capability *(SP capability)\n"
msgstr ""
"  want_list         =  PKT-LINE(want SP cap_list LF)\n"
"\t\t       *(want_pkt)\n"
"  want_pkt          =  PKT-LINE(want LF)\n"
"  want              =  \"want\" SP id\n"
"  cap_list          =  capability *(SP capability)\n"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:351
#, no-wrap
msgid "  have_list         =  *PKT-LINE(\"have\" SP id LF)\n"
msgstr "  have_list         =  *PKT-LINE(\"have\" SP id LF)\n"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:353
#: ../Documentation-sedout/technical/http-protocol.txt:514
msgid "TODO: Document this further."
msgstr "TODO: 更に文書化する"

#. type: Title ===
#: ../Documentation-sedout/technical/http-protocol.txt:354
#, no-wrap
msgid "The Negotiation Algorithm"
msgstr "The Negotiation Algorithm"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:358
msgid ""
"The computation to select the minimal pack proceeds as follows (C = client, "
"S = server):"
msgstr "最小パックを選択するための計算は以下のように行われます(C = クライアント、S = サーバー):"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:360
msgid "'init step:'"
msgstr "'初期化ステップ:'"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:362
msgid "C: Use ref discovery to obtain the advertised refs."
msgstr "C: 広告されたref(advertised refs)を取得するためにref検出を使用します。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:364
msgid "C: Place any object seen into set `advertised`."
msgstr "C: 検出したオブジェクトを `advertised` セットに配置します。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:367
#, no-wrap
msgid ""
"C: Build an empty set, `common`, to hold the objects that are later\n"
"   determined to be on both ends.\n"
msgstr ""
"C: 後で両端にあると判断されるかもしれないオブジェクトを保持するために、\n"
"   空のセット `common` を作成します。\n"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:370
#, no-wrap
msgid ""
"C: Build a set, `want`, of the objects from `advertised` the client\n"
"   wants to fetch, based on what it saw during ref discovery.\n"
msgstr ""
"C: ref検出中に発見したものに基づいて、クライアントが取得(fetch)したい\n"
"   `advertised` オブジェクトの `want` セットを構築します。\n"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:375
#, no-wrap
msgid ""
"C: Start a queue, `c_pending`, ordered by commit time (popping newest\n"
"   first).  Add all client refs.  When a commit is popped from\n"
"   the queue its parents SHOULD be automatically inserted back.\n"
"   Commits MUST only enter the queue once.\n"
msgstr ""
"C: コミット時間順に並べられたキュー `c_pending` を開始(最新のものを最初に取り出す(pop))。\n"
"   すべてのクライアントrefを追加します。\n"
"   コミットがキューから取り出される(pop)と、その親が自動的に挿入し直されます(SHOULD)。\n"
"   コミットがキューに入るのはは一度だけでなければなりません。\n"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:377
msgid "'one compute step:'"
msgstr "'1回分の計算ステップ:'"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:379
msgid "C: Send one `$GIT_URL/git-upload-pack` request:"
msgstr "C: `$GIT_URL/git-upload-pack` リクエストを1つ送信します:"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:390
#, no-wrap
msgid ""
"   C: 0032want <want #1>...............................\n"
"   C: 0032want <want #2>...............................\n"
"   ....\n"
"   C: 0032have <common #1>.............................\n"
"   C: 0032have <common #2>.............................\n"
"   ....\n"
"   C: 0032have <have #1>...............................\n"
"   C: 0032have <have #2>...............................\n"
"   ....\n"
"   C: 0000\n"
msgstr ""
"   C: 0032want <want #1>...............................\n"
"   C: 0032want <want #2>...............................\n"
"   ....\n"
"   C: 0032have <common #1>.............................\n"
"   C: 0032have <common #2>.............................\n"
"   ....\n"
"   C: 0032have <have #1>...............................\n"
"   C: 0032have <have #2>...............................\n"
"   ....\n"
"   C: 0000\n"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:397
msgid ""
"The stream is organized into \"commands\", with each command appearing by "
"itself in a pkt-line.  Within a command line, the text leading up to the "
"first space is the command name, and the remainder of the line to the first "
"LF is the value.  Command lines are terminated with an LF as the last byte "
"of the pkt-line value."
msgstr "ストリームは「コマンド群」に編成され、各コマンドは単独で pkt-line に表れれます。 コマンド行内では、最初の空白までのテキストがコマンド名であり、行の残りの最初の LF までが値です。 コマンド行は、 pkt-line 値の最後のバイトとしての LF で終了します。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:400
msgid ""
"Commands MUST appear in the following order, if they appear at all in the "
"request stream:"
msgstr "コマンド群がリクエストストリームに表れる場合、以下の順序でなければなりません:"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:402
msgid "\"want\""
msgstr "\"want\""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:403
msgid "\"have\""
msgstr "\"have\""

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:405
msgid "The stream is terminated by a pkt-line flush (`0000`)."
msgstr "ストリームは pkt-line フラッシュ(`0000`)によって終了します。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:410
msgid ""
"A single \"want\" or \"have\" command MUST have one hex formatted object "
"name as its value.  Multiple object names MUST be sent by sending multiple "
"commands. Object names MUST be given using the object format negotiated "
"through the `object-format` capability (default SHA-1)."
msgstr "単一の `want` または `have` コマンドは、その値として 1 つの 16 進形式のオブジェクト名を持たなければなりません。 複数のオブジェクト名は複数のコマンドを送信する必要があります。 オブジェクト名は、 `object-format` 機能 (デフォルト SHA-1) によってネゴシエートされたオブジェクトフォーマットを使用して与える必要があります。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:413
msgid ""
"The `have` list is created by popping the first 32 commits from "
"`c_pending`.  Less can be supplied if `c_pending` empties."
msgstr "`have` リストは、 `c_pending` から最初の 32 個のコミットを取り出す(pop)ことによって作成されます。 `c_pending` が空である場合、供給できる量が少なくなります。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:418
msgid ""
"If the client has sent 256 \"have\" commits and has not yet received one of "
"those back from `s_common`, or the client has emptied `c_pending` it SHOULD "
"include a \"done\" command to let the server know it won't proceed:"
msgstr "クライアントが 256 の `have` コミットを送信し、 `s_common` からそれらの 1 つをまだ受信していない場合、またはクライアントが `c_pending` を空にした場合、サーバーに続行しないことを知らせる `done` コマンドを含める必要があります:"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:420
#, no-wrap
msgid "   C: 0009done\n"
msgstr "   C: 0009done\n"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:422
msgid "S: Parse the git-upload-pack request:"
msgstr "S: git-upload-pack リクエストをパースする:"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:424
msgid "Verify all objects in `want` are directly reachable from refs."
msgstr "`want` 内のすべてのオブジェクトがrefから直に到達可能であることを確認(verify)します。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:427
msgid ""
"The server MAY walk backwards through history or through the reflog to "
"permit slightly stale requests."
msgstr "サーバーは、履歴または reflog をさかのぼって、気持ち古いリクエストを許可する場合があります。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:430
msgid ""
"If no \"want\" objects are received, send an error: TODO: Define error if no "
"\"want\" lines are requested."
msgstr "`want` オブジェクトが受信されない場合は、エラーを送信します:  TODO: `欲しい` 行がリクエストされていない場合はエラーを定義します。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:433
msgid ""
"If any \"want\" object is not reachable, send an error: TODO: Define error "
"if an invalid \"want\" is requested."
msgstr "`want` オブジェクトに到達できない場合は、エラーを送信します: TODO: 無効な `want` がリクエストされた場合はエラーを定義します。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:435
msgid "Create an empty list, `s_common`."
msgstr "空のリスト `s_common` を作成します。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:437
msgid "If \"have\" was sent:"
msgstr "もし `have` が送信されたら:"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:439
msgid "Loop through the objects in the order supplied by the client."
msgstr "クライアントから提供された順序でオブジェクトをループします。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:443
msgid ""
"For each object, if the server has the object reachable from a ref, add it "
"to `s_common`.  If a commit is added to `s_common`, do not add any "
"ancestors, even if they also appear in `have`."
msgstr "各オブジェクトについて、サーバーに ref から到達可能なオブジェクトがある場合は、それを `s_common` に追加します。 コミットが s_common に追加された場合、祖先が have に含まれていても追加しないでください。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:445
#, fuzzy
#| msgid "S: Parse the git-upload-pack request:\n"
msgid "S: Send the git-upload-pack response:"
msgstr "S: Parse the git-upload-pack request:\n"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:449
msgid ""
"If the server has found a closed set of objects to pack or the request ends "
"with \"done\", it replies with the pack.  TODO: Document the pack based "
"response"
msgstr "サーバーがパックするオブジェクトの閉じたセットを見つけた場合、またはリクエストが `done` で終了した場合、サーバーはパックで応答します。 TODO: パックベースの応答を文書化する"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:451
#, no-wrap
msgid "   S: PACK...\n"
msgstr "   S: PACK...\n"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:456
msgid ""
"The returned stream is the side-band-64k protocol supported by the git-"
"upload-pack service, and the pack is embedded into stream 1.  Progress "
"messages from the server side MAY appear in stream 2."
msgstr "返されるストリームは、 git-upload-pack サービスでサポートされている side-band-64k プロトコルであり、パックはストリーム 1 に埋め込まれます。サーバー側からの進行状況メッセージは、ストリーム 2 に表示される場合があります。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:459
msgid ""
"Here a \"closed set of objects\" is defined to have at least one path from "
"every \"want\" to at least one \"common\" object."
msgstr "ここで、「オブジェクトの閉じたセット」(closed set of objects)とは、すべての `want` から少なくとも 1 つの `common` オブジェクトへの少なくとも 1 つのパスを持つように定義されます。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:463
msgid ""
"If the server needs more information, it replies with a status continue "
"response: TODO: Document the non-pack response"
msgstr "サーバーがさらに情報を必要とする場合、サーバーは status continue 応答で応答します: TODO: パック以外の応答を文書化する"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:466
#, no-wrap
msgid ""
"C: Parse the upload-pack response:\n"
"   TODO: Document parsing response\n"
msgstr ""
"C: Parse the upload-pack response:\n"
"   TODO: Document parsing response\n"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:468
msgid "'Do another compute step.'"
msgstr "'次の回の計算ステップを実行します。'"

#. type: Title ==
#: ../Documentation-sedout/technical/http-protocol.txt:470
#, no-wrap
msgid "Smart Service git-receive-pack"
msgstr "Smart Service git-receive-pack"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:476
msgid ""
"Clients MUST first perform ref discovery with `$GIT_URL/info/refs?"
"service=git-receive-pack`."
msgstr "クライアントは、最初に `$GIT_URL/info/refs?service=git-receive-pack` を使用して ref 検出を実行する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:483
#, no-wrap
msgid ""
"   C: POST $GIT_URL/git-receive-pack HTTP/1.0\n"
"   C: Content-Type: application/x-git-receive-pack-request\n"
"   C:\n"
"   C: ....0a53e9ddeaddad63ad106860237bbf53411d11a7 441b40d833fdfa93eb2908e52742248faf0ee993 refs/heads/maint\\0 report-status\n"
"   C: 0000\n"
"   C: PACK....\n"
msgstr ""
"   C: POST $GIT_URL/git-receive-pack HTTP/1.0\n"
"   C: Content-Type: application/x-git-receive-pack-request\n"
"   C:\n"
"   C: ....0a53e9ddeaddad63ad106860237bbf53411d11a7 441b40d833fdfa93eb2908e52742248faf0ee993 refs/heads/maint\\0 report-status\n"
"   C: 0000\n"
"   C: PACK....\n"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:489
#, no-wrap
msgid ""
"   S: 200 OK\n"
"   S: Content-Type: application/x-git-receive-pack-result\n"
"   S: Cache-Control: no-cache\n"
"   S:\n"
"   S: ....\n"
msgstr ""
"   S: 200 OK\n"
"   S: Content-Type: application/x-git-receive-pack-result\n"
"   S: Cache-Control: no-cache\n"
"   S:\n"
"   S: ....\n"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:499
msgid ""
"Clients MUST send at least one command in the request body.  Within the "
"command portion of the request body clients SHOULD send the id obtained "
"through ref discovery as old_id."
msgstr "クライアントは、リクエスト本文で少なくとも 1 つのコマンドを送信する必要があります。 リクエストボディのコマンド部分内で、クライアントは、ref 検出を通じて取得した ID を old_id として送信する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:502
#, no-wrap
msgid ""
"  update_request  =  command_list\n"
"\t\t     \"PACK\" <binary data>\n"
msgstr ""
"  update_request  =  command_list\n"
"\t\t     \"PACK\" <binary data>\n"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:507
#, no-wrap
msgid ""
"  command_list    =  PKT-LINE(command NUL cap_list LF)\n"
"\t\t     *(command_pkt)\n"
"  command_pkt     =  PKT-LINE(command LF)\n"
"  cap_list        =  *(SP capability) SP\n"
msgstr ""
"  command_list    =  PKT-LINE(command NUL cap_list LF)\n"
"\t\t     *(command_pkt)\n"
"  command_pkt     =  PKT-LINE(command LF)\n"
"  cap_list        =  *(SP capability) SP\n"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:512
#, no-wrap
msgid ""
"  command         =  create / delete / update\n"
"  create          =  zero-id SP new_id SP name\n"
"  delete          =  old_id SP zero-id SP name\n"
"  update          =  old_id SP new_id SP name\n"
msgstr ""
"  command         =  create / delete / update\n"
"  create          =  zero-id SP new_id SP name\n"
"  delete          =  old_id SP zero-id SP name\n"
"  update          =  old_id SP new_id SP name\n"

#. type: Title ==
#: ../Documentation-sedout/technical/http-protocol.txt:516
#, no-wrap
msgid "References"
msgstr "References"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:520
msgid ""
"http://www.ietf.org/rfc/rfc1738.txt[RFC 1738: Uniform Resource Locators "
"(URL)]"
msgstr "http://www.ietf.org/rfc/rfc1738.txt[RFC 1738: Uniform Resource Locators (URL)]"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:521
msgid ""
"http://www.ietf.org/rfc/rfc2616.txt[RFC 2616: Hypertext Transfer Protocol -- "
"HTTP/1.1]"
msgstr "http://www.ietf.org/rfc/rfc2616.txt[RFC 2616: Hypertext Transfer Protocol -- HTTP/1.1]"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:522
msgid "link:technical/pack-protocol.html"
msgstr "link:technical/pack-protocol.html"

#. type: Plain text
#: ../Documentation-sedout/technical/http-protocol.txt:522
msgid "link:technical/protocol-capabilities.html"
msgstr "link:technical/protocol-capabilities.html"
