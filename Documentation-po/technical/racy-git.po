# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 0.0\n"
"POT-Creation-Date: 2021-11-04 05:35+0900\n"
"PO-Revision-Date: 2022-07-28 03:56+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/technical/racy-git.txt:2
#, no-wrap
msgid "Use of index and Racy Git problem"
msgstr "Use of index and Racy Git problem"

#. type: Title -
#: ../Documentation-sedout/technical/racy-git.txt:5
#, no-wrap
msgid "Background"
msgstr "Background"

#. type: Plain text
#: ../Documentation-sedout/technical/racy-git.txt:13
msgid ""
"The index is one of the most important data structures in Git.  It "
"represents a virtual working tree state by recording list of paths and their "
"object names and serves as a staging area to write out the next tree object "
"to be committed.  The state is \"virtual\" in the sense that it does not "
"necessarily have to, and often does not, match the files in the working tree."
msgstr "インデックスは、Gitで最も重要なデータ構造の1つです。 これは、パスとそのオブジェクト名のリストを記録することによって仮想の作業ツリーの状態を表し、コミットされる次のツリーオブジェクトを書き出すための足場領域(staging area)として機能します。 状態は、作業ツリー内のファイルと必ずしも一致する必要はなく、多くの場合一致しないという意味で「仮想」です。"

#. type: Plain text
#: ../Documentation-sedout/technical/racy-git.txt:22
msgid ""
"There are cases Git needs to examine the differences between the virtual "
"working tree state in the index and the files in the working tree.  The most "
"obvious case is when the user asks `git diff` (or its low level "
"implementation, `git diff-files`) or `git-ls-files --modified`.  In "
"addition, Git internally checks if the files in the working tree are "
"different from what are recorded in the index to avoid stomping on local "
"changes in them during patch application, switching branches, and merging."
msgstr "Gitは、インデックス内の仮想作業ツリーの状態と、作業ツリー内のファイルの違いを調べる必要がある場合があります。 最も明白なケースは、ユーザーが `git diff`(またはその低レベルの実装である `git diff-files`) または `git-ls-files --modified` で問い合わせした場合です。 さらにGitは、パッチ適用中や、ブランチの切り替え中や、マージ処理中に、作業ツリーのファイルがインデックスに記録されているものと異なるかどうかを内部的にチェックし、それらのローカルな変更を踏みにじらないようにしています。"

#. type: Plain text
#: ../Documentation-sedout/technical/racy-git.txt:33
msgid ""
"In order to speed up this comparison between the files in the working tree "
"and the index entries, the index entries record the information obtained "
"from the filesystem via `lstat(2)` system call when they were last updated.  "
"When checking if they differ, Git first runs `lstat(2)` on the files and "
"compares the result with this information (this is what was originally done "
"by the `ce_match_stat()` function, but the current code does it in "
"`ce_match_stat_basic()` function).  If some of these \"cached stat "
"information\" fields do not match, Git can tell that the files are modified "
"without even looking at their contents."
msgstr "作業ツリー内のファイルとインデックスエントリ間のこの比較を高速化するために、インデックスエントリは、最後に更新されたときに `lstat(2)` システムコールを介してファイルシステムから取得した情報を記録します。 それらが異なるかどうかを確認するとき、Gitは最初にファイルに対して `lstat(2)` 実行し、結果をこの情報と比較します(これは元々は `ce_match_stat()` 関数によって行われてましたが、現在のコードでは `ce_match_stat_basic()` 関数で行います)。 これらの「キャッシュされた統計情報」(cached stat information)フィールドのいくつかが一致しない場合、Gitは、ファイルの内容を見なくてもファイルが変更されたことを通知できます。"

#. type: Plain text
#: ../Documentation-sedout/technical/racy-git.txt:55
msgid ""
"Note: not all members in `struct stat` obtained via `lstat(2)` are used for "
"this comparison.  For example, `st_atime` obviously is not useful.  "
"Currently, Git compares the file type (regular files vs symbolic links) and "
"executable bits (only for regular files) from `st_mode` member, `st_mtime` "
"and `st_ctime` timestamps, `st_uid`, `st_gid`, `st_ino`, and `st_size` "
"members.  With a `USE_STDEV` compile-time option, `st_dev` is also compared, "
"but this is not enabled by default because this member is not stable on "
"network filesystems.  With `USE_NSEC` compile-time option, `st_mtim.tv_nsec` "
"and `st_ctim.tv_nsec` members are also compared. On Linux, this is not "
"enabled by default because in-core timestamps can have finer granularity "
"than on-disk timestamps, resulting in meaningless changes when an inode is "
"evicted from the inode cache.  See commit 8ce13b0 of git://git.kernel.org/"
"pub/scm/linux/kernel/git/tglx/history.git ([PATCH] Sync in core time "
"granularity with filesystems, 2005-01-04). This patch is included in kernel "
"2.6.11 and newer, but only fixes the issue for file systems with exactly 1 "
"ns or 1 s resolution. Other file systems are still broken in current Linux "
"kernels (e.g. CEPH, CIFS, NTFS, UDF), see https://lore.kernel.org/"
"lkml/5577240D.7020309@gmail.com/"
msgstr "注意:  `lstat(2)` 介して取得した `struct stat` のすべてのメンバーがこの比較に使用されるわけではありません。たとえば、 `st_atime` は明らかに役に立ちません。現在、Gitは、`st_mode` からのファイルタイプ(通常のファイルとシンボリックリンク)と実行可能ビット(通常のファイルのみ)、 `st_mtime` と `st_ctime` タイムスタンプ、 `st_uid` 、 `st_gid` 、 `st_ino` 、 `st_size` を比較します。 `USE_STDEV` コンパイル時オプションを使用すると、 `st_dev` も比較されますが、このメンバーはネットワークファイルシステム上で安定していないため、これはデフォルトでは有効になっていません。 `USE_NSEC` コンパイル時オプションを使用すると、`st_mtim.tv_nsec` と `st_ctim.tv_nsec` も比較されます。 Linuxでは、これはデフォルトでは有効になっていません。これは、コア内のタイムスタンプがディスク上のタイムスタンプよりも細かい粒度である可能性があり、iノードがiノードキャッシュから削除されたときに意味のない変更が発生するためです。 git://git.kernel.org/pub/scm/linux/kernel/git/tglx/history.git のコミット 8ce13b0 ([PATCH] Sync in core time granularity with filesystems, 2005-01-04)を参照してください。このパッチはカーネル2.6.11以降に含まれていますが、正確に1nsまたは1sの粒度のファイルシステムの問題のみを修正します。他のファイルシステムは、現在のLinuxカーネル(たとえば CEPH, CIFS, NTFS, UDF)ではまだ壊れています。 https://lore.kernel.org/lkml/5577240D.7020309@gmail.com/ を参照してください。"

#. type: Title -
#: ../Documentation-sedout/technical/racy-git.txt:57
#, no-wrap
msgid "Racy Git"
msgstr "Racy Git"

#. type: Plain text
#: ../Documentation-sedout/technical/racy-git.txt:61
msgid ""
"There is one slight problem with the optimization based on the cached stat "
"information.  Consider this sequence:"
msgstr "キャッシュされた統計情報に基づく最適化には、わずかな問題が1つあります。 以下のシーケンスについて考えてみましょう:"

#. type: Plain text
#: ../Documentation-sedout/technical/racy-git.txt:65
#, no-wrap
msgid ""
"  : modify 'foo'\n"
"  $ git update-index 'foo'\n"
"  : modify 'foo' again, in-place, without changing its size\n"
msgstr ""
"  : 'foo' を編集\n"
"  $ git update-index 'foo'\n"
"  : 再び 'foo' を編集。サイズを変更せずに 'foo' の内容を編集します\n"

#. type: Plain text
#: ../Documentation-sedout/technical/racy-git.txt:79
msgid ""
"The first `update-index` computes the object name of the contents of file "
"`foo` and updates the index entry for `foo` along with the `struct stat` "
"information.  If the modification that follows it happens very fast so that "
"the file's `st_mtime` timestamp does not change, after this sequence, the "
"cached stat information the index entry records still exactly match what you "
"would see in the filesystem, even though the file `foo` is now different.  "
"This way, Git can incorrectly think files in the working tree are unmodified "
"even though they actually are.  This is called the \"racy Git\" problem "
"(discovered by Pasky), and the entries that appear clean when they may not "
"be because of this problem are called \"racily clean\"."
msgstr "最初の `update-index `は、ファイル `foo` の内容のオブジェクト名を計算し、 `struct stat` 情報とともに `foo` のインデックスエントリを更新します。 その後の変更が非常に高速に行われ、ファイルの `st_mtime` タイムスタンプが変更されない場合、このシーケンスの後、インデックスエントリが記録するキャッシュされた統計情報は、ファイル `foo` は今では異なっいても、ファイルシステムに表示される情報と完全に一致します。  このように、Gitは、実際には変更されていても、作業ツリー内のファイルが変更されていないと誤って考える可能性があります。 これは「racy Git」問題(Paskyによって発見されました)と呼ばれ、この問題が原因ではない可能性があるときにクリーンに見えるエントリは「racily clean」と呼ばれます。"

#. type: Plain text
#: ../Documentation-sedout/technical/racy-git.txt:81
msgid "To avoid this problem, Git does two things:"
msgstr "この問題を回避するために、Gitは2つのことを行います:"

#. type: Plain text
#: ../Documentation-sedout/technical/racy-git.txt:88
msgid ""
"When the cached stat information says the file has not been modified, and "
"the `st_mtime` is the same as (or newer than)  the timestamp of the index "
"file itself (which is the time `git update-index foo` finished running in "
"the above example), it also compares the contents with the object registered "
"in the index entry to make sure they match."
msgstr "キャッシュされた統計情報によりファイルが変更されていないと言うには、 `st_mtime` がインデックスファイル自体のタイムスタンプと同じ(またはそれより新しい)場合(これは、上記の例では `git update-index foo` の実行を終了した時間です)では、コンテンツをインデックスエントリに登録されているオブジェクトと比較して、それらが一致することを確認します。"

#. type: Plain text
#: ../Documentation-sedout/technical/racy-git.txt:92
msgid ""
"When the index file is updated that contains racily clean entries, cached "
"`st_size` information is truncated to zero before writing a new version of "
"the index file."
msgstr "非常にクリーンなエントリを含むインデックスファイルが更新されると、キャッシュされた `st_size` 情報は、新しいバージョンのインデックスファイルを書き込む前にゼロに切り捨てられます。"

#. type: Plain text
#: ../Documentation-sedout/technical/racy-git.txt:102
msgid ""
"Because the index file itself is written after collecting all the stat "
"information from updated paths, `st_mtime` timestamp of it is usually the "
"same as or newer than any of the paths the index contains.  And no matter "
"how quick the modification that follows `git update-index foo` finishes, the "
"resulting `st_mtime` timestamp on `foo` cannot get a value earlier than the "
"index file.  Therefore, index entries that can be racily clean are limited "
"to the ones that have the same timestamp as the index file itself."
msgstr "インデックスファイル自体は、更新されたパスからすべての統計情報を収集した後に書き込まれるため、その `st_mtime` タイムスタンプは通常、インデックスに含まれるどのパスと同じか、それよりも新しいものです。 また、 `git update-index foo` に続く変更がどれほど速く終了しても、 `foo` の結果の `st_mtime` タイムスタンプはインデックスファイルより前の値を取得できません。 したがって、迅速にクリーンアップできるインデックスエントリは、インデックスファイル自体と同じタイムスタンプを持つエントリに制限されます。"

#. type: Plain text
#: ../Documentation-sedout/technical/racy-git.txt:109
msgid ""
"The callers that want to check if an index entry matches the corresponding "
"file in the working tree continue to call `ce_match_stat()`, but with this "
"change, `ce_match_stat()` uses `ce_modified_check_fs()` to see if racily "
"clean ones are actually clean after comparing the cached stat information "
"using `ce_match_stat_basic()`."
msgstr "インデックスエントリが作業ツリー内の対応するファイルと一致するかどうかを確認する呼び出し元は、引き続き `ce_match_stat()` を呼び出しますが、この変更により `ce_match_stat()` は `ce_modified_check_fs()` を使用して、 `ce_match_stat_basic()` でキャッシュされた統計情報を比較してから racily clean が実際に clean かどうかを判断するようになりました。"

#. type: Plain text
#: ../Documentation-sedout/technical/racy-git.txt:111
msgid "The problem the latter solves is this sequence:"
msgstr "後者が解決する問題は、以下のシーケンスです:"

#. type: Plain text
#: ../Documentation-sedout/technical/racy-git.txt:116
#, no-wrap
msgid ""
"  $ git update-index 'foo'\n"
"  : modify 'foo' in-place without changing its size\n"
"  : wait for enough time\n"
"  $ git update-index 'bar'\n"
msgstr ""
"  $ git update-index 'foo'\n"
"  : サイズを変更せずに `foo` をその場で変更\n"
"  : 十分な時間待つ\n"
"  $ git update-index 'bar'\n"

#. type: Plain text
#: ../Documentation-sedout/technical/racy-git.txt:125
msgid ""
"Without the latter, the timestamp of the index file gets a newer value, and "
"falsely clean entry `foo` would not be caught by the timestamp comparison "
"check done with the former logic anymore.  The latter makes sure that the "
"cached stat information for `foo` would never match with the file in the "
"working tree, so later checks by `ce_match_stat_basic()` would report that "
"the index entry does not match the file and Git does not have to fall back "
"on more expensive `ce_modified_check_fs()`."
msgstr "後者がないと、インデックスファイルのタイムスタンプは新しい値を取得し、誤ってクリーンなエントリ `foo` は、前者のロジックで実行されたタイムスタンプ比較チェックによってキャッチされなくなります。 後者は、 `foo` のキャッシュされた統計情報が作業ツリー内のファイルと決して一致しないことを保証するため、後で `ce_match_stat_basic()` をチェックすると、インデックスエントリがファイルと一致しないことが報告され、Gitはより高価な `ce_modified_check_fs()` にフォールバックする必要がありません。"

#. type: Title -
#: ../Documentation-sedout/technical/racy-git.txt:128
#, no-wrap
msgid "Runtime penalty"
msgstr "Runtime penalty"

#. type: Plain text
#: ../Documentation-sedout/technical/racy-git.txt:136
msgid ""
"The runtime penalty of falling back to `ce_modified_check_fs()` from "
"`ce_match_stat()` can be very expensive when there are many racily clean "
"entries.  An obvious way to artificially create this situation is to give "
"the same timestamp to all the files in the working tree in a large project, "
"run `git update-index` on them, and give the same timestamp to the index "
"file:"
msgstr "`ce_match_stat()` から `ce_modified_check_fs()` にフォールバックすることによる実行時のペナルティは、非常にクリーンなエントリが多数ある場合、非常に高くつく可能性があります。 この状況を人為的に作成する明白な方法は、大規模プロジェクトの作業ツリー内のすべてのファイルに同じタイムスタンプを付け、それらに対して `git update-index` を実行し、インデックスファイルに同じタイムスタンプを付けることです。"

#. type: Plain text
#: ../Documentation-sedout/technical/racy-git.txt:141
#, no-wrap
msgid ""
"  $ date >.datestamp\n"
"  $ git ls-files | xargs touch -r .datestamp\n"
"  $ git ls-files | git update-index --stdin\n"
"  $ touch -r .datestamp .git/index\n"
msgstr ""
"  $ date >.datestamp\n"
"  $ git ls-files | xargs touch -r .datestamp\n"
"  $ git ls-files | git update-index --stdin\n"
"  $ touch -r .datestamp .git/index\n"

#. type: Plain text
#: ../Documentation-sedout/technical/racy-git.txt:145
msgid ""
"This will make all index entries racily clean.  The linux project, for "
"example, there are over 20,000 files in the working tree.  On my Athlon 64 "
"X2 3800+, after the above:"
msgstr "これにより、すべてのインデックスエントリが迅速にクリーンになります。 たとえば、Linuxプロジェクトでは、作業ツリーに20,000を超えるファイルがあります。 私のAthlon64X2 3800+で、上記の後に以下を実行します:"

#. type: Plain text
#: ../Documentation-sedout/technical/racy-git.txt:153
#, no-wrap
msgid ""
"  $ /usr/bin/time git diff-files\n"
"  1.68user 0.54system 0:02.22elapsed 100%CPU (0avgtext+0avgdata 0maxresident)k\n"
"  0inputs+0outputs (0major+67111minor)pagefaults 0swaps\n"
"  $ git update-index MAINTAINERS\n"
"  $ /usr/bin/time git diff-files\n"
"  0.02user 0.12system 0:00.14elapsed 100%CPU (0avgtext+0avgdata 0maxresident)k\n"
"  0inputs+0outputs (0major+935minor)pagefaults 0swaps\n"
msgstr ""
"  $ /usr/bin/time git diff-files\n"
"  1.68user 0.54system 0:02.22elapsed 100%CPU (0avgtext+0avgdata 0maxresident)k\n"
"  0inputs+0outputs (0major+67111minor)pagefaults 0swaps\n"
"  $ git update-index MAINTAINERS\n"
"  $ /usr/bin/time git diff-files\n"
"  0.02user 0.12system 0:00.14elapsed 100%CPU (0avgtext+0avgdata 0maxresident)k\n"
"  0inputs+0outputs (0major+935minor)pagefaults 0swaps\n"

#. type: Plain text
#: ../Documentation-sedout/technical/racy-git.txt:161
msgid ""
"Running `git update-index` in the middle checked the racily clean entries, "
"and left the cached `st_mtime` for all the paths intact because they were "
"actually clean (so this step took about the same amount of time as the first "
"`git diff-files`).  After that, they are not racily clean anymore but are "
"truly clean, so the second invocation of `git diff-files` fully took "
"advantage of the cached stat information."
msgstr "途中で `git update-index` を実行すると、racily cleanなエントリがチェックされ、実際にはクリーンであるため、すべてのパスのキャッシュされた `st_mtime` がそのまま残りました(したがって、このステップには最初の `git diff-files` とほぼ同じ時間がかかりました)。 その後、それらはもはやracily cleanではありませんが、本当にクリーンであるため、`git diff-files` の2回目の呼び出しはキャッシュされた統計情報を完全に利用しました。"

#. type: Title -
#: ../Documentation-sedout/technical/racy-git.txt:164
#, no-wrap
msgid "Avoiding runtime penalty"
msgstr "Avoiding runtime penalty"

#. type: Plain text
#: ../Documentation-sedout/technical/racy-git.txt:172
msgid ""
"In order to avoid the above runtime penalty, post 1.4.2 Git used to have a "
"code that made sure the index file got timestamp newer than the youngest "
"files in the index when there are many young files with the same timestamp "
"as the resulting index file would otherwise would have by waiting before "
"finishing writing the index file out."
msgstr "上記の実行時のペナルティを回避するために、1.4.2以降のGitには、結果のインデックスファイルと同じタイムスタンプを持つ若いファイルが多数ある場合に、インデックスファイルがインデックス内の最も若いファイルよりも新しいタイムスタンプを取得することを確認するコードがありました。 それ以外の場合は、インデックスファイルの書き込みが完了する前に待機する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/technical/racy-git.txt:176
msgid ""
"I suspected that in practice the situation where many paths in the index are "
"all racily clean was quite rare.  The only code paths that can record recent "
"timestamp for large number of paths are:"
msgstr "実際には、インデックス内の多くのパスがすべて非常にクリーンであるという状況は非常にまれであると私は思いました。 多数のパスの最近のタイムスタンプを記録できる唯一のコードパスは以下のとおりです:"

#. type: Plain text
#: ../Documentation-sedout/technical/racy-git.txt:178
msgid "Initial `git add .` of a large project."
msgstr "大規模プロジェクトの最初の `git add .` 。"

#. type: Plain text
#: ../Documentation-sedout/technical/racy-git.txt:181
msgid ""
"`git checkout` of a large project from an empty index into an unpopulated "
"working tree."
msgstr "大規模プロジェクトを、空のインデックスから未入力の作業ツリーへ `git checkout`"

#. type: Plain text
#: ../Documentation-sedout/technical/racy-git.txt:188
msgid ""
"Note: switching branches with `git checkout` keeps the cached stat "
"information of existing working tree files that are the same between the "
"current branch and the new branch, which are all older than the resulting "
"index file, and they will not become racily clean.  Only the files that are "
"actually checked out can become racily clean."
msgstr "注意: `git checkout` を使用してブランチを切り替えると、現在のブランチと新しいブランチの間で同じである既存の作業ツリーファイルのキャッシュされた統計情報が保持されます。これらはすべて、結果のインデックスファイルよりも古く、racily cleanになることはありません。 実際にチェックアウトされたファイルだけが、racily cleanになることができます。"

#. type: Plain text
#: ../Documentation-sedout/technical/racy-git.txt:197
msgid ""
"In a large project where raciness avoidance cost really matters, however, "
"the initial computation of all object names in the index takes more than one "
"second, and the index file is written out after all that happens.  Therefore "
"the timestamp of the index file will be more than one seconds later than the "
"youngest file in the working tree.  This means that in these cases there "
"actually will not be any racily clean entry in the resulting index."
msgstr "ただし、racy回避コスト(raciness avoidance cost)が非常に重要な大規模なプロジェクトでは、インデックス内のすべてのオブジェクト名の初期計算に1秒以上かかり、その後インデックスファイルが書き出されます。 したがって、インデックスファイルのタイムスタンプは、作業ツリーの最も若いファイルより1秒以上遅くなります。 これは、これらの場合、結果のインデックスに実際には racily clean なエントリがないことを意味します。"

#. type: Plain text
#: ../Documentation-sedout/technical/racy-git.txt:201
msgid ""
"Based on this discussion, the current code does not use the \"workaround\" "
"to avoid the runtime penalty that does not exist in practice anymore.  This "
"was done with commit 0fc82cff on Aug 15, 2006."
msgstr "この議論に基づいて、現在のコードは、実際にはもう存在しない実行時のペナルティを回避するために「回避策」を使用していません。 これは、2006年8月15日にcommit0fc82cffで実行されました。"
