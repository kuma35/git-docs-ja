# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-10-02 01:06+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation/technical/bundle-format.txt:1
#, no-wrap
msgid "Git bundle v2 format"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/bundle-format.txt:4
msgid "The Git bundle format is a format that represents both refs and Git objects."
msgstr ""

#. type: Title ==
#: ../Documentation/technical/bundle-format.txt:5
#, no-wrap
msgid "Format"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/bundle-format.txt:9
msgid ""
"We will use ABNF notation to define the Git bundle format. See "
"protocol-common.txt for the details."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/bundle-format.txt:11
msgid "A v2 bundle looks like this:"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/bundle-format.txt:15
#, no-wrap
msgid ""
"bundle    = signature *prerequisite *reference LF pack\n"
"signature = \"# v2 git bundle\" LF\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/bundle-format.txt:19
#, no-wrap
msgid ""
"prerequisite = \"-\" obj-id SP comment LF\n"
"comment      = *CHAR\n"
"reference    = obj-id SP refname LF\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/bundle-format.txt:21 ../Documentation/technical/bundle-format.txt:37
#, no-wrap
msgid "pack         = ... ; packfile\n"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/bundle-format.txt:24
msgid "A v3 bundle looks like this:"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/bundle-format.txt:28
#, no-wrap
msgid ""
"bundle    = signature *capability *prerequisite *reference LF pack\n"
"signature = \"# v3 git bundle\" LF\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/technical/bundle-format.txt:35
#, no-wrap
msgid ""
"capability   = \"@\" key [\"=\" value] LF\n"
"prerequisite = \"-\" obj-id SP comment LF\n"
"comment      = *CHAR\n"
"reference    = obj-id SP refname LF\n"
"key          = 1*(ALPHA / DIGIT / \"-\")\n"
"value        = *(%01-09 / %0b-FF)\n"
msgstr ""

#. type: Title ==
#: ../Documentation/technical/bundle-format.txt:39
#, no-wrap
msgid "Semantics"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/bundle-format.txt:42
msgid "A Git bundle consists of several parts."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/bundle-format.txt:44
msgid ""
"\"Capabilities\", which are only in the v3 format, indicate functionality "
"that"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/bundle-format.txt:45
msgid "the bundle requires to be read properly."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/bundle-format.txt:52
msgid ""
"\"Prerequisites\" lists the objects that are NOT included in the bundle and "
"the reader of the bundle MUST already have, in order to use the data in the "
"bundle. The objects stored in the bundle may refer to prerequisite objects "
"and anything reachable from them (e.g. a tree object in the bundle can "
"reference a blob that is reachable from a prerequisite) and/or expressed as "
"a delta against prerequisite objects."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/bundle-format.txt:55
msgid ""
"\"References\" record the tips of the history graph, iow, what the reader of "
"the bundle CAN \"git fetch\" from it."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/bundle-format.txt:60
msgid ""
"\"Pack\" is the pack data stream \"git fetch\" would send, if you fetch from "
"a repository that has the references recorded in the \"References\" above "
"into a repository that has references pointing at the objects listed in "
"\"Prerequisites\" above."
msgstr ""

#. type: Plain text
#: ../Documentation/technical/bundle-format.txt:64
msgid ""
"In the bundle format, there can be a comment following a prerequisite "
"obj-id.  This is a comment and it has no specific meaning. The writer of the "
"bundle MAY put any string here. The reader of the bundle MUST ignore the "
"comment."
msgstr ""

#. type: Title ===
#: ../Documentation/technical/bundle-format.txt:65
#, no-wrap
msgid "Note on the shallow clone and a Git bundle"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/bundle-format.txt:70
msgid ""
"Note that the prerequisites does not represent a shallow-clone boundary. The "
"semantics of the prerequisites and the shallow-clone boundaries are "
"different, and the Git bundle v2 format cannot represent a shallow clone "
"repository."
msgstr ""

#. type: Title ==
#: ../Documentation/technical/bundle-format.txt:71
#, no-wrap
msgid "Capabilities"
msgstr ""

#. type: Plain text
#: ../Documentation/technical/bundle-format.txt:76
msgid ""
"Because there is no opportunity for negotiation, unknown capabilities cause "
"'git bundle' to abort.  The only known capability is `object-format`, which "
"specifies the hash algorithm in use, and can take the same values as the "
"`extensions.objectFormat` configuration value."
msgstr ""
