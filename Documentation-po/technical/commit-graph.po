# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 0.0\n"
"POT-Creation-Date: 2022-09-24 21:41+0900\n"
"PO-Revision-Date: 2022-09-03 20:49+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/technical/commit-graph.txt:1
#, no-wrap
msgid "Git Commit Graph Design Notes"
msgstr "Git Commit Graph Design Notes"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:5
msgid "Git walks the commit graph for many reasons, including:"
msgstr "Git は、以下のような多くの理由でコミットグラフをたどります:"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:7
msgid "Listing and filtering commit history."
msgstr "コミット履歴の一覧表示とフィルタリング。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:8
msgid "Computing merge bases."
msgstr "マージベースの計算。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:12
msgid ""
"These operations can become slow as the commit count grows. The merge base "
"calculation shows up in many user-facing commands, such as 'merge-base' or "
"'status' and can take minutes to compute depending on history shape."
msgstr ""
"これらの操作は、コミット数が増えるにつれて遅くなる可能性があります。 マージ"
"ベースの計算は、「merge-base」や「status」などの多くのユーザー向けコマンドに"
"表れ、履歴の形状によっては計算に数分かかる場合があります。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:14
msgid "There are two main costs here:"
msgstr "ここでは主に2つのコストが発生します。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:16
msgid "Decompressing and parsing commits."
msgstr "コミットの解凍(decompressing)と解析(parsing)。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:17
msgid "Walking the entire graph to satisfy topological order constraints."
msgstr "トポロジー順序の制約を満たすためのグラフ全体のウォーク。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:23
msgid ""
"The commit-graph file is a supplemental data structure that accelerates "
"commit graph walks. If a user downgrades or disables the 'core.commitGraph' "
"config setting, then the existing ODB is sufficient. The file is stored as "
"\"commit-graph\" either in the .git/objects/info directory or in the info "
"directory of an alternate."
msgstr ""
"コミットグラフファイルは、コミットグラフウォークを高速化する補足データ構造で"
"す。 ユーザーが `core.commitGraph` 構成設定をダウングレードまたは無効にした場"
"合、既存の ODB で十分です。 ファイルは \"commit-graph\" として .git/objects/"
"info ディレクトリまたは代替の info ディレクトリに保存されます。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:30
msgid ""
"The commit-graph file stores the commit graph structure along with some "
"extra metadata to speed up graph walks. By listing commit OIDs in "
"lexicographic order, we can identify an integer position for each commit and "
"refer to the parents of a commit using those integer positions. We use "
"binary search to find initial commits and then use the integer positions for "
"fast lookups during the walk."
msgstr ""
"コミットグラフファイルには、コミットグラフの構造と、グラフウォークを高速化す"
"るための追加のメタデータが格納されます。 コミットOIDを辞書順でリストすること"
"により、各コミットの整数位置を識別し、それらの整数位置を使用してコミットの親"
"を参照できます。 私達は二分探索を使用して最初のコミットを見つけ、ウォーク中の"
"高速ルックアップのために整数位置を使用します。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:32
msgid "A consumer may load the following info for a commit from the graph:"
msgstr "利用者は、グラフからコミットに関する以下の情報を取得できます:"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:34
msgid "The commit OID."
msgstr "コミットOID。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:35
msgid "The list of parents, along with their integer position."
msgstr "親達のリストとその整数位置。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:36
msgid "The commit date."
msgstr "コミット日付。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:37
msgid "The root tree OID."
msgstr "ルートツリーのOID。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:38
msgid "The generation number (see definition below)."
msgstr "世代番号(定義は下記参照)。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:40
msgid "Values 1-4 satisfy the requirements of parse_commit_gently()."
msgstr "値 1 ～ 4 は、 parse_commit_gently() の要件を満たします。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:42
msgid "There are two definitions of generation number:"
msgstr "世代番号には以下の2つの定義があります:"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:43
msgid "Corrected committer dates (generation number v2)"
msgstr "修正コミッター日付(世代番号 v2)"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:44
#, fuzzy
#| msgid "Topological levels (generation nummber v1)"
msgid "Topological levels (generation number v1)"
msgstr "トポロジーレベル(世代番号 v1)"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:46
msgid "Define \"corrected committer date\" of a commit recursively as follows:"
msgstr "以下のように、コミットの「修正コミッター日付」を再帰的に定義します:"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:49
msgid ""
"A commit with no parents (a root commit) has corrected committer date equal "
"to its committer date."
msgstr ""
"親のないコミット(ルート コミット)には、そのコミッター日付に等しい修正コミッ"
"ター日付があります。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:51
#, fuzzy
#| msgid ""
#| "A commit with no parents (a root commit) has corrected committer date "
#| "equal to its committer date."
msgid "A commit with at least one parent has corrected committer date equal to"
msgstr ""
"親のないコミット(ルート コミット)には、そのコミッター日付に等しい修正コミッ"
"ター日付があります。"

# https://vividcode.hatenablog.com/entry/git/author-date-and-committer-date
# コミットにはコミットの著者である author とコミットを取り込んだ人を表す committer の 2 つの属性が存在していて、
# それぞれ別のタイムスタンプ (author date と committer date) を持っている 
#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:53
#, fuzzy, no-wrap
#| msgid "A commit with at least one parent has corrected committer date equal to the maximum of its commiter date and one more than the largest corrected committer date among its parents."
msgid ""
"the maximum of its committer date and one more than the largest corrected\n"
"committer date among its parents.\n"
msgstr "少なくとも1つの親を持つコミットは、そのコミットのコミッター日付の最大値に等しく、かつ、そのコミットの親の間で最大の修正コミッター日付より大きい、修正コミッター日付を持っています。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:57
msgid ""
"As a special case, a root commit with timestamp zero has corrected commit "
"date of 1, to be able to distinguish it from GENERATION_NUMBER_ZERO (that "
"is, an uncomputed corrected commit date)."
msgstr ""
"特殊な場合として、タイムスタンプがゼロのルート コミットは、"
"GENERATION_NUMBER_ZERO (つまり、計算されていない修正コミット日付) と区別でき"
"るように、修正コミット日は 1 に設定されています。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:59
msgid "Define the \"topological level\" of a commit recursively as follows:"
msgstr "以下のようにコミットの「トポロジーレベル」を再帰的に定義します:"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:61
msgid "A commit with no parents (a root commit) has topological level of one."
msgstr "親のないコミット(ルート コミット)のトポロジーレベルは 1 です。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:64
msgid ""
"A commit with at least one parent has topological level one more than the "
"largest topological level among its parents."
msgstr ""
"少なくとも1つの親を持つコミットは、そのコミットの親の間で最大のトポロジーレベ"
"ルよりも1つ高いトポロジーレベルを持ちます。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:68
msgid ""
"Equivalently, the topological level of a commit A is one more than the "
"length of a longest path from A to a root commit. The recursive definition "
"is easier to use for computation and observing the following property:"
msgstr ""
"同様に、コミット A のトポロジーレベルは、A からルートコミットまでの最長パスの"
"長さよりも 1 つ長くなります。 再帰的な定義は、計算と以下の特徴の観察を利用す"
"るのが簡単です:"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:73
msgid ""
"If A and B are commits with generation numbers N and M, respectively, and N "
"<= M, then A cannot reach B. That is, we know without searching that B is "
"not an ancestor of A because it is further from a root commit than A."
msgstr ""
"A と B がそれぞれ世代番号 N と M のコミットであり、N <= M の場合、A は B に到"
"達できません。 つまり、B は A よりもルートコミットから離れているため、B が A "
"の祖先ではないことが検索せずにわかります。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:79
msgid ""
"Conversely, when checking if A is an ancestor of B, then we only need to "
"walk commits until all commits on the walk boundary have generation number "
"at most N. If we walk commits using a priority queue seeded by generation "
"numbers, then we always expand the boundary commit with highest generation "
"number and can easily detect the stopping condition."
msgstr ""
"逆に、A が B の祖先であるかどうかを確認する場合、ウォーク境界上のすべてのコ"
"ミットの世代番号が最大で N になるまで、コミットをウォークするだけで済みま"
"す。 世代番号でシードされた優先キュー(priority queue seeded by generation "
"numbers)を使用してコミットをウォークすると、常に最大の世代番号で境界コミット"
"を展開し、停止条件を簡単に検出できます。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:82
msgid ""
"The property applies to both versions of generation number, that is both "
"corrected committer dates and topological levels."
msgstr ""
"特徴は世代番号の両方のバージョンに適用されます。つまり、修正されたコミッター"
"の日付とトポロジーレベルの両方です。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:86
msgid ""
"This property can be used to significantly reduce the time it takes to walk "
"commits and determine topological relationships. Without generation numbers, "
"the general heuristic is the following:"
msgstr ""
"この特徴を使用すると、コミットをたどってトポロジー関係を決定するのにかかる時"
"間を大幅に短縮できます。 世代番号がない場合、一般的なヒューリスティックは以下"
"のようになります:"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:89
msgid ""
"If A and B are commits with commit time X and Y, respectively, and X < Y, "
"then A _probably_ cannot reach B."
msgstr ""
"A と B がそれぞれコミット時間 X と Y でコミットされており、X < Y の場合、A は"
"「おそらく」 B に到達できません。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:96
msgid ""
"In absence of corrected commit dates (for example, old versions of Git or "
"mixed generation graph chains), this heuristic is currently used whenever "
"the computation is allowed to violate topological relationships due to clock "
"skew (such as \"git log\" with default order), but is not used when the "
"topological order is required (such as merge base calculations, \"git log --"
"graph\")."
msgstr ""
"修正コミット日付がない場合(Git の古いバージョンや世代混合のグラフチェーンな"
"ど)、現在、このヒューリスティックは、計算がクロックスキューのためにトポロジー"
"関係に違反することが許可されている場合に常に使用されます (デフォルトの順序で"
"の「git log」など)。ただし、トポロジーの順序が必要な場合は使用されません "
"(マージベース計算、「git log --graph」など)。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:101
msgid ""
"In practice, we expect some commits to be created recently and not stored in "
"the commit graph. We can treat these commits as having \"infinite\" "
"generation number and walk until reaching commits with known generation "
"number."
msgstr ""
"実際には、いくつかのコミットが最近作成され、コミットグラフに保存されていない"
"ことが予想されます。 これらのコミットを「無限」(infinite)の世代番号を持つもの"
"として扱い、既知の世代番号を持つコミットに到達するまでウォークします。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:106
msgid ""
"We use the macro GENERATION_NUMBER_INFINITY to mark commits not in the "
"commit-graph file. If a commit-graph file was written by a version of Git "
"that did not compute generation numbers, then those commits will have "
"generation number represented by the macro GENERATION_NUMBER_ZERO = 0."
msgstr ""
"コミットグラフファイルにないコミットをマークするには、マクロ "
"GENERATION_NUMBER_INFINITY を使用します。 世代番号を計算しないバージョンの "
"Git によってコミットグラフファイルが書き込まれた場合、それらのコミットには、"
"マクロ GENERATION_NUMBER_ZERO = 0 で表される世代番号が含まれます。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:109
msgid ""
"Since the commit-graph file is closed under reachability, we can guarantee "
"the following weaker condition on all commits:"
msgstr ""
"コミットグラフファイルは到達可能な状態で閉じられているため、すべてのコミット"
"で以下のより弱い条件を保証できます:"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:112
msgid ""
"If A and B are commits with generation numbers N and M, respectively, and N "
"< M, then A cannot reach B."
msgstr ""
"A と B がそれぞれ世代番号 N と M のコミットであり、N < M の場合、A は B に到"
"達できません。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:117
msgid ""
"Note how the strict inequality differs from the inequality when we have "
"fully-computed generation numbers. Using strict inequality may result in "
"walking a few extra commits, but the simplicity in dealing with commits with "
"generation number *_INFINITY or *_ZERO is valuable."
msgstr ""
"注意: 完全に計算された世代番号がある場合、厳密な不等式(the strict inequality)"
"が不等式(the inequality)とどのように異なるかに注意してください。 厳密な不等式"
"(the strict inequality)を使用すると、いくつかの余分なコミットが実行される可能"
"性がありますが、世代番号 *_INFINITY または 世代番号 *_ZERO のコミットを扱える"
"単純さは価値があります。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:124
msgid ""
"We use the macro GENERATION_NUMBER_V1_MAX = 0x3FFFFFFF for commits whose "
"topological levels (generation number v1) are computed to be at least this "
"value. We limit at this value since it is the largest value that can be "
"stored in the commit-graph file using the 30 bits available to topological "
"levels. This presents another case where a commit can have generation number "
"equal to that of a parent."
msgstr ""
"マクロ GENERATION_NUMBER_V1_MAX = 0x3FFFFFFF は、トポロジーレベル (世代番号 "
"v1) が少なくともこの値になるように計算されるコミットに使用します。 この値は、"
"トポロジーレベルで使用できる 30 ビットを使用してコミットグラフファイルに保存"
"できる最大値であるため、この値に制限します。 これは、コミットが親の世代番号と"
"同じ世代番号を持つことができるもう一つのケースを示しています。"

#. type: Title ==
#: ../Documentation-sedout/technical/commit-graph.txt:125
#, no-wrap
msgid "Design Details"
msgstr "Design Details"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:131
msgid ""
"The commit-graph file is stored in a file named 'commit-graph' in the .git/"
"objects/info directory. This could be stored in the info directory of an "
"alternate."
msgstr ""
"コミットグラフファイルは、.git/objects/info ディレクトリの「commit-graph」と"
"いう名前のファイルに保存されます。 これは、代替の info ディレクトリに保存でき"
"ます。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:133
msgid "The core.commitGraph config setting must be on to consume graph files."
msgstr ""
"グラフファイルを使用するには、 core.commitGraph 構成設定をオンにする必要があ"
"ります。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:136
msgid ""
"The file format includes parameters for the object ID hash function, so a "
"future change of hash algorithm does not require a change in format."
msgstr ""
"ファイル形式には、オブジェクトIDハッシュ関数のパラメーターが含まれているた"
"め、今後ハッシュアルゴリズムを変更しても、形式を変更する必要はありません。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:143
msgid ""
"Commit grafts and replace objects can change the shape of the commit "
"history. The latter can also be enabled/disabled on the fly using `--no-"
"replace-objects`. This leads to difficultly storing both possible "
"interpretations of a commit id, especially when computing generation "
"numbers. The commit-graph will not be read or written when replace-objects "
"or grafts are present."
msgstr ""
"コミット グラフト(grafts;接ぎ木)と置換オブジェクト(replace objects)は、コミッ"
"ト履歴の形状を変更することができます。 置換オブジェクトは、 `--no-replace-"
"objects` を使用してリアルタイム(on the fly)で 有効/無効 にすることもできま"
"す。 これにより、特に世代番号を計算するときに、コミット ID の可能な両方の解釈"
"を保存することが難しくなります。 コミットグラフは、置換オブジェクト(replace-"
"objects)またはグラフト(grafts;接ぎ木)が存在する場合、読み書きされません。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:151
msgid ""
"Shallow clones create grafts of commits by dropping their parents. This "
"leads the commit-graph to think those commits have generation number 1.  If "
"and when those commits are made unshallow, those generation numbers become "
"invalid. Since shallow clones are intended to restrict the commit history to "
"a very small set of commits, the commit-graph feature is less helpful for "
"these clones, anyway. The commit-graph will not be read or written when "
"shallow commits are present."
msgstr ""
"浅いクローン(shallow clones)は、親を削除することでコミットのグラフト(grafts;"
"接ぎ木)を作成します。 これにより、コミットグラフは、これらのコミットの世代番"
"号が 1 であると考えるようになります。これらのコミットが浅くされていない場合"
"(unshallow)、それらの世代番号は無効になります。 浅いクローンはコミット履歴を"
"非常に小さなコミットのセットに制限することを目的としているため、コミットグラ"
"フ機能はこれらのクローンにはあまり役に立ちません。 浅いコミットが存在する場"
"合、コミットグラフは読み書きされません。"

#. type: Title ==
#: ../Documentation-sedout/technical/commit-graph.txt:152
#, no-wrap
msgid "Commit Graphs Chains"
msgstr "Commit Graphs Chains"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:160
msgid ""
"Typically, repos grow with near-constant velocity (commits per day). Over "
"time, the number of commits added by a fetch operation is much smaller than "
"the number of commits in the full history. By creating a \"chain\" of commit-"
"graphs, we enable fast writes of new commit data without rewriting the "
"entire commit history -- at least, most of the time."
msgstr ""
"通常、リポジトリはほぼ一定の速度(velocity)(1日あたりnコミット)で成長します。 "
"時間の経過とともに、フェッチ操作によって追加されるコミットの数は、完全な履歴"
"のコミットの数よりもはるかに少なくなります。 コミットグラフの「チェーン」を作"
"成することで、コミット履歴全体を書き換えることなく、新しいコミットデータを高"
"速に書き込むことができます -- 少なくともほとんどの場合はそうです。"

#. type: Title ===
#: ../Documentation-sedout/technical/commit-graph.txt:161
#, no-wrap
msgid "File Layout"
msgstr "File Layout"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:170
msgid ""
"A commit-graph chain uses multiple files, and we use a fixed naming "
"convention to organize these files. Each commit-graph file has a name `"
"$OBJDIR/info/commit-graphs/graph-{hash}.graph` where `{hash}` is the hex- "
"valued hash stored in the footer of that file (which is a hash of the file's "
"contents before that hash). For a chain of commit-graph files, a plain-text "
"file at `$OBJDIR/info/commit-graphs/commit-graph-chain` contains the hashes "
"for the files in order from \"lowest\" to \"highest\"."
msgstr ""
"コミットグラフチェーンは複数のファイルを使用し、固定の命名規則を使用してこれ"
"らのファイルを整理します。 各コミットグラフファイルには、 `$OBJDIR/info/"
"commit-graphs/graph-{hash}.graph` という名前があります。ここで、`{hash}` は、"
"そのファイルのフッターに格納されている16進数値のハッシュです(これは、そのハッ"
"シュの前のファイルの内容のハッシュです)。 コミットグラフファイルのチェーンの"
"場合、`$OBJDIR/info/commit-graphs/commit-graph-chain` にあるプレーンテキスト "
"ファイルには、ファイルのハッシュが「最低」(lowest)から「最高」(highest)の順に"
"含まれています。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:172
msgid "For example, if the `commit-graph-chain` file contains the lines"
msgstr "例えば、 `commit-graph-chain` ファイルが以下の行達を含んでいるのならば"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:178
#, no-wrap
msgid ""
"\t```\n"
"\t{hash0}\n"
"\t{hash1}\n"
"\t{hash2}\n"
"\t```\n"
msgstr ""
"```\n"
"\t{hash0}\n"
"\t{hash1}\n"
"\t{hash2}\n"
"```\n"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:180
msgid "then the commit-graph chain looks like the following diagram:"
msgstr "コミットグラフ チェイン は以下の図のようになります:"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:200
#, no-wrap
msgid ""
" +-----------------------+\n"
" |  graph-{hash2}.graph  |\n"
" +-----------------------+\n"
"\t  |\n"
" +-----------------------+\n"
" |                       |\n"
" |  graph-{hash1}.graph  |\n"
" |                       |\n"
" +-----------------------+\n"
"\t  |\n"
" +-----------------------+\n"
" |                       |\n"
" |                       |\n"
" |                       |\n"
" |  graph-{hash0}.graph  |\n"
" |                       |\n"
" |                       |\n"
" |                       |\n"
" +-----------------------+\n"
msgstr ""
" +-----------------------+\n"
" |  graph-{hash2}.graph  |\n"
" +-----------------------+\n"
"\t  |\n"
" +-----------------------+\n"
" |                       |\n"
" |  graph-{hash1}.graph  |\n"
" |                       |\n"
" +-----------------------+\n"
"\t  |\n"
" +-----------------------+\n"
" |                       |\n"
" |                       |\n"
" |                       |\n"
" |  graph-{hash0}.graph  |\n"
" |                       |\n"
" |                       |\n"
" |                       |\n"
" +-----------------------+\n"

# https://ja.wikipedia.org/wiki/数学記号の表
# 開区間	(a, b) は {x : a < x < b} を表す。
# 閉区間	[a, b] は {x : a ≦ x ≦ b} を表す。
# 半開区間	(a, b] は {x : a < x ≦ b} を表す
#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:210
msgid ""
"Let X0 be the number of commits in `graph-{hash0}.graph`, X1 be the number "
"of commits in `graph-{hash1}.graph`, and X2 be the number of commits in "
"`graph-{hash2}.graph`. If a commit appears in position i in `graph-{hash2}."
"graph`, then we interpret this as being the commit in position (X0 + X1 + "
"i), and that will be used as its \"graph position\". The commits in `graph-"
"{hash2}.graph` use these positions to refer to their parents, which may be "
"in `graph-{hash1}.graph` or `graph-{hash0}.graph`. We can navigate to an "
"arbitrary commit in position j by checking its containment in the intervals "
"[0, X0), [X0, X0 + X1), [X0 + X1, X0 + X1 + X2)."
msgstr ""
"X0 を `graph-{hash0}.graph` のコミット数、 X1 を `graph-{hash1}.graph` のコ"
"ミット数、 X2 を `graph-{hash2}.graph` のコミット数とします。 あるコミットが "
"`graph-{hash2}.graph` の i 番目の位置にある場合、私達はこれをコミット位置 "
"(X0 + X1 + i) であると解釈し、それを「グラフの位置」(graph position)として使"
"用します。 `graph-{hash2}.graph` のコミットは、これらの位置を使用して、 "
"`graph-{hash1}.graph` または `graph-{hash0}.graph` にある親を参照します。 半"
"開間隔 `[0, X0), [X0, X0 + X1), [X0 + X1, X0 + X1 + X2)` の区間に含まれること"
"を確認することにより、位置 j の任意のコミットに移動できます(訳注: 半開区間 "
"`[a, b)` は `{x: a ≦ x < b}` を表す)。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:215
msgid ""
"Each commit-graph file (except the base, `graph-{hash0}.graph`) contains "
"data specifying the hashes of all files in the lower layers. In the above "
"example, `graph-{hash1}.graph` contains `{hash0}` while `graph-{hash2}."
"graph` contains `{hash0}` and `{hash1}`."
msgstr ""
"各コミットグラフファイル(ベースの `graph-{hash0}.graph` を除く)には、下位層の"
"すべてのファイルのハッシュを指定するデータが含まれています。 上記の例では、"
"`graph-{hash1}.graph` には `{hash0}` が含まれ、 `graph-{hash2}.graph` には "
"`{hash0}` と `{hash1}` が含まれます。"

#. type: Title ===
#: ../Documentation-sedout/technical/commit-graph.txt:216
#, no-wrap
msgid "Merging commit-graph files"
msgstr "Merging commit-graph files"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:221
msgid ""
"If we only added a new commit-graph file on every write, we would run into a "
"linear search problem through many commit-graph files.  Instead, we use a "
"merge strategy to decide when the stack should collapse some number of "
"levels."
msgstr ""
"書き込みのたびに新しいコミットグラフファイルを追加しただけでは、多数のコミッ"
"トグラフファイルを介して線形検索を実行するという問題が発生します。 代わりに、"
"私達はマージ戦略を使用して、スタック(the stack)が何時に幾つのレベルを折りたた"
"む必要があるかを決定します。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:227
msgid ""
"The diagram below shows such a collapse. As a set of new commits are added, "
"it is determined by the merge strategy that the files should collapse to "
"`graph-{hash1}`. Thus, the new commits, the commits in `graph-{hash2}` and "
"the commits in `graph-{hash1}` should be combined into a new `graph-{hash3}` "
"file."
msgstr ""
"下の図は、そのような折りたたみを示しています。 新しいコミットのセットが追加さ"
"れると、ファイルが `graph-{hash1}` に折りたたまれるべきかどうかがマージ戦略に"
"よって決定されます。 したがって、新しいコミット、`graph-{hash2}` のコミット、"
"および `graph-{hash1}` のコミットは、新しい `graph-{hash3}` ファイルに結合す"
"る必要があります。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:234
#, no-wrap
msgid ""
"\t\t\t    +---------------------+\n"
"\t\t\t    |                     |\n"
"\t\t\t    |    (new commits)    |\n"
"\t\t\t    |                     |\n"
"\t\t\t    +---------------------+\n"
"\t\t\t    |                     |\n"
msgstr ""
"\t\t\t    +---------------------+\n"
"\t\t\t    |                     |\n"
"\t\t\t    |    (new commits)    |\n"
"\t\t\t    |                     |\n"
"\t\t\t    +---------------------+\n"
"\t\t\t    |                     |\n"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:235
#: ../Documentation-sedout/technical/commit-graph.txt:237
#: ../Documentation-sedout/technical/commit-graph.txt:239
#: ../Documentation-sedout/technical/commit-graph.txt:243
#, no-wrap
msgid "+---------------------+\n"
msgstr "+---------------------+\n"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:236
#, no-wrap
msgid "|  graph-{hash2}        |->|                     |\n"
msgstr "|  graph-{hash2}        |->|                     |\n"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:238
#, no-wrap
msgid "|                 |                     |\n"
msgstr "|                 |                     |\n"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:242
#, no-wrap
msgid ""
"|                       |  |                     |\n"
"|  graph-{hash1}        |->|                     |\n"
"|                       |  |                     |\n"
msgstr ""
"|                       |  |                     |\n"
"|  graph-{hash1}        |->|                     |\n"
"|                       |  |                     |\n"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:244
#, no-wrap
msgid "|                  tmp_graphXXX\n"
msgstr "|                  tmp_graphXXX\n"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:253
#, no-wrap
msgid ""
"+-----------------------+\n"
"|                       |\n"
"|                       |\n"
"|                       |\n"
"|  graph-{hash0}        |\n"
"|                       |\n"
"|                       |\n"
"|                       |\n"
"+-----------------------+\n"
msgstr ""
"+-----------------------+\n"
"|                       |\n"
"|                       |\n"
"|                       |\n"
"|  graph-{hash0}        |\n"
"|                       |\n"
"|                       |\n"
"|                       |\n"
"+-----------------------+\n"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:259
msgid ""
"During this process, the commits to write are combined, sorted and we write "
"the contents to a temporary file, all while holding a `commit-graph-chain."
"lock` lock-file.  When the file is flushed, we rename it to `graph-{hash3}` "
"according to the computed `{hash3}`. Finally, we write the new chain data to "
"`commit-graph-chain.lock`:"
msgstr ""
"この処理中に、書き込みコミットが結合、ソートされ、内容が一時ファイルに書き込"
"まれますが、すべて `commit-graph-chain.lock` ロックファイルが保持されます。 "
"ファイルがフラッシュされると、計算された `{hash3}` に従って名前を `graph-"
"{hash3}` に変更します。 最後に、新しいチェーンデータを `commit-graph-chain."
"lock` に書き込みます:"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:264
#, no-wrap
msgid ""
"\t```\n"
"\t{hash3}\n"
"\t{hash0}\n"
"\t```\n"
msgstr ""
"```\n"
"\t{hash3}\n"
"\t{hash0}\n"
"```\n"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:266
msgid "We then close the lock-file."
msgstr "そして、ロックファイルをクローズします。"

#. type: Title ===
#: ../Documentation-sedout/technical/commit-graph.txt:267
#, no-wrap
msgid "Merge Strategy"
msgstr "Merge Strategy"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:272
msgid ""
"When writing a set of commits that do not exist in the commit-graph stack of "
"height N, we default to creating a new file at level N + 1. We then decide "
"to merge with the Nth level if one of two conditions hold:"
msgstr ""
"高さ N のコミットグラフスタックに存在しない一連のコミットを書き込む場合、デ"
"フォルトでレベル N + 1 で新しいファイルを作成します。次に、2 つの条件のいずれ"
"かが保持される場合、 N 番目のレベルとマージすることを決定します:"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:275
msgid ""
"`--size-multiple=<X>` is specified or X = 2, and the number of commits in "
"level N is less than X times the number of commits in level N + 1."
msgstr ""
"`--size-multiple=<X>` が指定されているかまたは X = 2 であり、かつ、レベル N "
"のコミット数がレベル N + 1 のコミット数の X 倍未満です。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:278
msgid ""
"`--max-commits=<C>` is specified with non-zero C and the number of commits "
"in level N + 1 is more than C commits."
msgstr ""
"`--max-commits=<C>` の C がゼロ以外で指定されており、かつ、レベル N+1 のコ"
"ミット数が C コミットより多い。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:281
msgid ""
"This decision cascades down the levels: when we merge a level we create a "
"new set of commits that then compares to the next level."
msgstr ""
"この決定はレベルをカスケードします。レベルをマージすると、次のレベルと比較す"
"る新しいコミットのセットが作成されます。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:287
msgid ""
"The first condition bounds the number of levels to be logarithmic in the "
"total number of commits.  The second condition bounds the total number of "
"commits in a `graph-{hashN}` file and not in the `commit-graph` file, "
"preventing significant performance issues when the stack merges and another "
"process only partially reads the previous stack."
msgstr ""
"最初の条件として、レベルの数がコミットの総数に対して対数になるように制限しま"
"す。 2番目の条件は、 `commit-graph` ファイルではなく `graph-{hashN}` ファイル"
"内のコミットの総数を制限し、スタックがマージされ、別のプロセスが前のスタック"
"を部分的にしか読み取らない場合の重大なパフォーマンスの問題を防ぎます。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:291
msgid ""
"The merge strategy values (2 for the size multiple, 64,000 for the maximum "
"number of commits) could be extracted into config settings for full "
"flexibility."
msgstr ""
"マージ戦略の値 (サイズ倍数の場合は 2、コミットの最大数の場合は 64,000) を構成"
"設定に抽出して、完全な柔軟性を得ることができます。"

#. type: Title ===
#: ../Documentation-sedout/technical/commit-graph.txt:292
#, no-wrap
msgid "Handling Mixed Generation Number Chains"
msgstr "Handling Mixed Generation Number Chains"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:296
msgid ""
"With the introduction of generation number v2 and generation data chunk, the "
"following scenario is possible:"
msgstr ""
"世代番号 v2 と世代データチャンクの導入により、以下のシナリオが可能になります:"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:298
msgid "\"New\" Git writes a commit-graph with the corrected commit dates."
msgstr ""
"「新しい」Git は、修正されたコミット日付でコミットグラフを書き込みます。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:299
msgid ""
"\"Old\" Git writes a split commit-graph on top without corrected commit "
"dates."
msgstr ""
"「古い」Git は、修正されたコミット日付無しに分割コミットグラフを一番上に書き"
"込みます。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:306
msgid ""
"A naive approach of using the newest available generation number from each "
"layer would lead to violated expectations: the lower layer would use "
"corrected commit dates which are much larger than the topological levels of "
"the higher layer. For this reason, Git inspects the topmost layer to see if "
"the layer is missing corrected commit dates. In such a case Git only uses "
"topological level for generation numbers."
msgstr ""
"各レイヤーから利用可能な最新の世代番号を使用するという素朴なアプローチは、期"
"待に反することにつながります。下位レイヤーは、上位レイヤーのトポロジーレベル"
"よりもはるかに長い修正されたコミット日付を使用します。 このため、Git は最上位"
"レイヤーを検査して、レイヤーに修正されたコミット日付がないかどうかを確認しま"
"す。 このような場合、Git は世代番号にトポロジーレベルのみを使用します。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:311
msgid ""
"When writing a new layer in split commit-graph, we write corrected commit "
"dates if the topmost layer has corrected commit dates written. This "
"guarantees that if a layer has corrected commit dates, all lower layers must "
"have corrected commit dates as well."
msgstr ""
"分割コミットグラフに新しいレイヤーを書き込むとき、最上位レイヤーに修正された"
"コミット日付が書き込まれている場合は、修正コミット日付を書き込みます。 これに"
"より、レイヤーが修正コミット日付を持っている場合、下位のすべてのレイヤーも修"
"正コミット日付を持っている必要があります。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:315
msgid ""
"When merging layers, we do not consider whether the merged layers had "
"corrected commit dates. Instead, the new layer will have corrected commit "
"dates if the layer below the new layer has corrected commit dates."
msgstr ""
"レイヤーのマージ時に、マージされたレイヤーが修正コミット日付を持っているかど"
"うかは考慮しません。 代わりに、新しいレイヤーの下のレイヤーが修正コミット日付"
"を持っている場合、新しいレイヤーも修正コミット日付を持ちます。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:320
msgid ""
"While writing or merging layers, if the new layer is the only layer, it will "
"have corrected commit dates when written by compatible versions of Git. "
"Thus, rewriting split commit-graph as a single file (`--split=replace`) "
"creates a single layer with corrected commit dates."
msgstr ""
"レイヤーの書き込みまたはマージ時に、新しいレイヤーが唯一のレイヤーである場"
"合、互換性のあるバージョンの Git によって書き込まれると、修正コミット日付を持"
"ちます。 したがって、分割コミットフラフを単一のファイルとして書き換え(`--"
"split=replace`)すると、修正コミット日付を持つ単一のレイヤーが作成されます。"

#. type: Title ===
#: ../Documentation-sedout/technical/commit-graph.txt:321
#, no-wrap
msgid "Deleting graph-{hash} files"
msgstr "Deleting graph-{hash} files"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:328
msgid ""
"After a new tip file is written, some `graph-{hash}` files may no longer be "
"part of a chain. It is important to remove these files from disk, "
"eventually.  The main reason to delay removal is that another process could "
"read the `commit-graph-chain` file before it is rewritten, but then look for "
"the `graph-{hash}` files after they are deleted."
msgstr ""
"新しい先端ファイル(tip file)が書き込まれた後、いくつかの `graph-{hash}` ファ"
"イルがチェーンの一部でなくなる可能性があります。 最終的には、これらのファイル"
"をディスクから削除することが重要です。 削除が遅れる主な理由は、別のプロセス"
"が `commit-graph-chain` ファイルを書き換える前に読み取り、削除後に `graph-"
"{hash}` ファイルを探す可能性があるためです。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:335
msgid ""
"To allow holding old split commit-graphs for a while after they are "
"unreferenced, we update the modified times of the files when they become "
"unreferenced. Then, we scan the `$OBJDIR/info/commit-graphs/` directory for "
"`graph-{hash}` files whose modified times are older than a given expiry "
"window. This window defaults to zero, but can be changed using command-line "
"arguments or a config setting."
msgstr ""
"古い分割コミットグラフが参照されなくなった後もしばらく保持できるようにするた"
"めに、参照されなくなったときにファイルの変更時刻を更新します。 次に、`"
"$OBJDIR/info/commit-graphs/` ディレクトリをスキャンして、変更時刻が所定の有効"
"期限よりも古い `graph-{hash}` ファイルを探します。 この期限のデフォルトはゼロ"
"ですが、コマンドライン引数または構成設定を使用して変更できます。"

#. type: Title ===
#: ../Documentation-sedout/technical/commit-graph.txt:336
#, no-wrap
msgid "Chains across multiple object directories"
msgstr "Chains across multiple object directories"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:343
msgid ""
"In a repo with alternates, we look for the `commit-graph-chain` file "
"starting in the local object directory and then in each alternate. The first "
"file that exists defines our chain. As we look for the `graph-{hash}` files "
"for each `{hash}` in the chain file, we follow the same pattern for the host "
"directories."
msgstr ""
"代替(alternates)を伴うリポジトリでは、 ローカルオブジェクトディレクトリから始"
"めて各代替(alternate)で `commit-graph-chain` ファイルを探します。 存在する最"
"初のファイルは、チェーンを定義します。 チェーンファイル内の各 `{hash}` に対し"
"て `graph-{hash}` ファイルを探すとき、ホストディレクトリに対して同一パターン"
"に従います。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:346
msgid ""
"This allows commit-graphs to be split across multiple forks in a fork "
"network.  The typical case is a large \"base\" repo with many smaller forks."
msgstr ""
"これにより、コミットグラフをフォークネットワーク(a fork network)内の複数の"
"フォークに分割できます。 典型的なケースは、多くの小さなフォークを持つ大きな"
"「ベース」レポジトリです。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:356
msgid ""
"As the base repo advances, it will likely update and merge its commit-graph "
"chain more frequently than the forks. If a fork updates their commit-graph "
"after the base repo, then it should \"reparent\" the commit-graph chain onto "
"the new chain in the base repo. When reading each `graph-{hash}` file, we "
"track the object directory containing it. During a write of a new commit-"
"graph file, we check for any changes in the source object directory and read "
"the `commit-graph-chain` file for that source and create a new file based on "
"those files. During this \"reparent\" operation, we necessarily need to "
"collapse all levels in the fork, as all of the files are invalid against the "
"new base file."
msgstr ""
"ベースリポジトリが利用されていくつれて、 コミットグラフチェーンはフォークより"
"も頻繁に更新およびマージされる可能性があります。 フォークがベースリポジトリの"
"後にコミットグラフを更新する場合は、コミットグラフチェーンをベースリポジトリ"
"の新しいチェーンに「育て直し」(reparent)する必要があります。 各 `graph-{hash}"
"` ファイルを読み取るとき、それを含むオブジェクトディレクトリを追跡します。 新"
"しいコミットフラフファイルの書き込み中に、ソースオブジェクトディレクトリの変"
"更を確認し、そのソースの `commit-graph-chain` ファイルを読み取り、それらの"
"ファイルに基づいて新しいファイルを作成します。 この「育て直し」操作では、新し"
"いベースファイルに対してすべてのファイルが無効であるため、必然的にフォークの"
"すべてのレベルを折りたたむ必要があります。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:360
msgid ""
"It is crucial to be careful when cleaning up \"unreferenced\" `graph-{hash}."
"graph` files in this scenario. It falls to the user to define the proper "
"settings for their custom environment:"
msgstr ""
"このシナリオで「参照されていない」(unreferenced) `graph-{hash}.graph` ファイ"
"ルをクリーンアップするときは注意が必要です。 カスタム環境に適切な設定を定義す"
"るのは、ユーザーの責任です:"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:363
msgid ""
"When merging levels in the base repo, the unreferenced files may still be "
"referenced by chains from fork repos."
msgstr ""
"ベースリポジトリでマージをならす時、参照されていないファイルがフォークリポジ"
"トリからのチェーンによって参照されたままになるかもしれません。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:367
msgid ""
"The expiry time should be set to a length of time such that every fork has "
"time to recompute their commit-graph chain to \"reparent\" onto the new base "
"file(s)."
msgstr ""
"有効期限は、すべてのフォークでコミットグラフチェーンを再計算して新しいベース"
"ファイルに「育て直し」をする時期になるような時間の長さに設定する必要がありま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:371
msgid ""
"If the commit-graph chain is updated in the base, the fork will not have "
"access to the new chain until its chain is updated to reference those "
"files.  (This may change in the future [5].)"
msgstr ""
"コミットグラフチェーンがベースで更新された場合、フォークはそのチェーンが更新"
"されてそれらのファイルを参照するまで、新しいチェーンにアクセスできません。 "
"(これは将来変更される可能性があります。[5] )"

#. type: Title ==
#: ../Documentation-sedout/technical/commit-graph.txt:372
#, no-wrap
msgid "Related Links"
msgstr "Related Links"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:376
msgid "https://bugs.chromium.org/p/git/issues/detail?id=8"
msgstr "https://bugs.chromium.org/p/git/issues/detail?id=8"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:378
msgid "Chromium work item for: Serialized Commit Graph"
msgstr "Chromium work item for: Serialized Commit Graph"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:380
msgid ""
"https://lore.kernel.org/git/20110713070517.GC18566@sigill.intra.peff.net/"
msgstr ""
"https://lore.kernel.org/git/20110713070517.GC18566@sigill.intra.peff.net/"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:382
msgid "An abandoned patch that introduced generation numbers."
msgstr "An abandoned patch that introduced generation numbers."

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:384
msgid ""
"https://lore.kernel.org/git/20170908033403.q7e6dj7benasrjes@sigill.intra."
"peff.net/"
msgstr ""
"https://lore.kernel.org/git/20170908033403.q7e6dj7benasrjes@sigill.intra."
"peff.net/"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:387
msgid ""
"Discussion about generation numbers on commits and how they interact with "
"fsck."
msgstr ""
"Discussion about generation numbers on commits and how they interact with "
"fsck."

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:389
msgid ""
"https://lore.kernel.org/git/20170908034739.4op3w4f2ma5s65ku@sigill.intra."
"peff.net/"
msgstr ""
"https://lore.kernel.org/git/20170908034739.4op3w4f2ma5s65ku@sigill.intra."
"peff.net/"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:392
msgid ""
"More discussion about generation numbers and not storing them inside commit "
"objects. A valuable quote:"
msgstr ""
"More discussion about generation numbers and not storing them inside commit "
"objects. A valuable quote:"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:400
msgid ""
"\"I think we should be moving more in the direction of keeping repo-local "
"caches for optimizations. Reachability bitmaps have been a big performance "
"win. I think we should be doing the same with our properties of commits. Not "
"just generation numbers, but making it cheap to access the graph structure "
"without zlib-inflating whole commit objects (i.e., packv4 or something like "
"the \"metapacks\" I proposed a few years ago).\""
msgstr ""
"「最適化のためにリポジトリローカルキャッシュを保持する方向にもっと進むべきだ"
"と思います。到達可能性ビットマップはパフォーマンスの大きな勝利でした。コミッ"
"トのプロパティでも同じことをすべきだと思います。世代番号だけでなく、コミット"
"オブジェクト全体(つまり、packv4 や、私が数年前に提案した \"metapacks\" のよう"
"なもの)のグラフ構造へアクセスするために、 zlib で解凍せずに済むのは安上がりで"
"す。」"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:402
msgid ""
"https://lore.kernel.org/git/20180108154822.54829-1-git@jeffhostetler.com/T/#u"
msgstr ""
"https://lore.kernel.org/git/20180108154822.54829-1-git@jeffhostetler.com/T/#u"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:404
msgid "A patch to remove the ahead-behind calculation from 'status'."
msgstr "A patch to remove the ahead-behind calculation from 'status'."

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:406
msgid ""
"https://lore.kernel.org/git/f27db281-abad-5043-6d71-cbb083b1c877@gmail.com/"
msgstr ""
"https://lore.kernel.org/git/f27db281-abad-5043-6d71-cbb083b1c877@gmail.com/"

#. type: Plain text
#: ../Documentation-sedout/technical/commit-graph.txt:408
msgid ""
"A discussion of a \"two-dimensional graph position\" that can allow reading "
"multiple commit-graph chains at the same time."
msgstr ""
"A discussion of a \"two-dimensional graph position\" that can allow reading "
"multiple commit-graph chains at the same time."
