# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-11-04 04:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/git-range-diff.txt:2
#, no-wrap
msgid "git-range-diff(1)"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-range-diff.txt:5
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:7
msgid ""
"git-range-diff - Compare two commit ranges (e.g. two versions of a branch)"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-range-diff.txt:9
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:15
#, no-wrap
msgid ""
"'git range-diff' [--color=[<when>]] [--no-color] [<diff-options>]\n"
"\t[--no-dual-color] [--creation-factor=<factor>]\n"
"\t[--left-only | --right-only]\n"
"\t( <range1> <range2> | <rev1>...<rev2> | <base> <rev1> <rev2> )\n"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-range-diff.txt:17
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:21
msgid ""
"This command shows the differences between two versions of a patch series, "
"or more generally, two commit ranges (ignoring merge commits)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:27
msgid ""
"To that end, it first finds pairs of commits from both commit ranges that "
"correspond with each other. Two commits are said to correspond when the diff "
"between their patches (i.e. the author information, the commit message and "
"the commit diff) is reasonably small compared to the patches' size. See "
"``Algorithm`` below for details."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:31
msgid ""
"Finally, the list of matching commits is shown in the order of the second "
"commit range, with unmatched commits being inserted just after all of their "
"ancestors have been shown."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:33
msgid "There are three ways to specify the commit ranges:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:37
msgid ""
"`<range1> <range2>`: Either commit range can be of the form `<base>..<rev>`, "
"`<rev>^!` or `<rev>^-<n>`. See `SPECIFYING RANGES` in linkgit:"
"gitrevisions[7] for more details."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:40
msgid ""
"`<rev1>...<rev2>`. This is equivalent to `<rev2>..<rev1> <rev1>..<rev2>`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:43
msgid ""
"`<base> <rev1> <rev2>`: This is equivalent to `<base>..<rev1> <base>.."
"<rev2>`."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-range-diff.txt:45
#, no-wrap
msgid "OPTIONS"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-range-diff.txt:46
#, no-wrap
msgid "`--no-dual-color`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:51
msgid ""
"When the commit diffs differ, `git range-diff` recreates the original diffs' "
"coloring, and adds outer -/+ diff markers with the *background* being red/"
"green to make it easier to see e.g.  when there was a change in what exact "
"lines were added."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:59
msgid ""
"Additionally, the commit diff lines that are only present in the first "
"commit range are shown \"dimmed\" (this can be overridden using the `color."
"diff.<slot>` config setting where `<slot>` is one of `contextDimmed`, "
"`oldDimmed` and `newDimmed`), and the commit diff lines that are only "
"present in the second commit range are shown in bold (which can be "
"overridden using the config settings `color.diff.<slot>` with `<slot>` being "
"one of `contextBold`, `oldBold` or `newBold`)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:63
msgid ""
"This is known to `range-diff` as \"dual coloring\". Use `--no-dual-color` to "
"revert to color all lines according to the outer diff markers (and "
"completely ignore the inner diff when it comes to color)."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-range-diff.txt:64
#, no-wrap
msgid "`--creation-factor=<percent>`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:71
msgid ""
"Set the creation/deletion cost fudge factor to `<percent>`.  Defaults to 60. "
"Try a larger value if `git range-diff` erroneously considers a large change "
"a total rewrite (deletion of one commit and addition of another), and a "
"smaller one in the reverse case.  See the ``Algorithm`` section below for an "
"explanation why this is needed."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-range-diff.txt:72
#, no-wrap
msgid "`--left-only`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:75
msgid ""
"Suppress commits that are missing from the first specified range (or the "
"\"left range\" when using the `<rev1>...<rev2>` format)."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-range-diff.txt:76
#, no-wrap
msgid "`--right-only`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:79
msgid ""
"Suppress commits that are missing from the second specified range (or the "
"\"right range\" when using the `<rev1>...<rev2>` format)."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-range-diff.txt:80
#, no-wrap
msgid "`--[no-]notes[=<ref>]`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:83
msgid ""
"This flag is passed to the `git log` program (see linkgit:git-log[1]) that "
"generates the patches."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-range-diff.txt:84
#, no-wrap
msgid "<range1> <range2>"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:87
msgid ""
"Compare the commits specified by the two ranges, where `<range1>` is "
"considered an older version of `<range2>`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-range-diff.txt:88
#, no-wrap
msgid "<rev1>...<rev2>"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:90
msgid "Equivalent to passing `<rev2>..<rev1>` and `<rev1>..<rev2>`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-range-diff.txt:91
#, no-wrap
msgid "<base> <rev1> <rev2>"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:97
msgid ""
"Equivalent to passing `<base>..<rev1>` and `<base>..<rev2>`.  Note that "
"`<base>` does not need to be the exact branch point of the branches. "
"Example: after rebasing a branch `my-topic`, `git range-diff my-topic@{u} my-"
"topic@{1} my-topic` would show the differences introduced by the rebase."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:104
msgid ""
"`git range-diff` also accepts the regular diff options (see linkgit:git-"
"diff[1]), most notably the `--color=[<when>]` and `--no-color` options. "
"These options are used when generating the \"diff between patches\", i.e. to "
"compare the author, commit message and diff of corresponding old/new "
"commits. There is currently no means to tweak most of the diff options "
"passed to `git log` when generating those patches."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-range-diff.txt:106
#, no-wrap
msgid "OUTPUT STABILITY"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:115
msgid ""
"The output of the `range-diff` command is subject to change. It is intended "
"to be human-readable porcelain output, not something that can be used across "
"versions of Git to get a textually stable `range-diff` (as opposed to "
"something like the `--stable` option to linkgit:git-patch-id[1]). There's "
"also no equivalent of linkgit:git-apply[1] for `range-diff`, the output is "
"not intended to be machine-readable."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:122
msgid ""
"This is particularly true when passing in diff options. Currently some "
"options like `--stat` can, as an emergent effect, produce output that's "
"quite useless in the context of `range-diff`. Future versions of `range-"
"diff` may learn to interpret such options in a manner specific to `range-"
"diff` (e.g. for `--stat` producing human-readable output which summarizes "
"how the diffstat changed)."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-range-diff.txt:124
#, no-wrap
msgid "CONFIGURATION"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:128
msgid ""
"This command uses the `diff.color.*` and `pager.range-diff` settings (the "
"latter is on by default).  See linkgit:git-config[1]."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-range-diff.txt:131
#, no-wrap
msgid "EXAMPLES"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:135
msgid ""
"When a rebase required merge conflicts to be resolved, compare the changes "
"introduced by the rebase directly afterwards using:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-range-diff.txt:138
#, no-wrap
msgid "$ git range-diff @{u} @{1} @\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:142
msgid "A typical output of `git range-diff` would look like this:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-range-diff.txt:149
#, no-wrap
msgid ""
"-:  ------- > 1:  0ddba11 Prepare for the inevitable!\n"
"1:  c0debee = 2:  cab005e Add a helpful message at the start\n"
"2:  f00dbal ! 3:  decafe1 Describe a bug\n"
"    @@ -1,3 +1,3 @@\n"
"     Author: A U Thor <author@example.com>\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-range-diff.txt:154
#, no-wrap
msgid ""
"    -TODO: Describe a bug\n"
"    +Describe a bug\n"
"    @@ -324,5 +324,6\n"
"      This is expected.\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-range-diff.txt:158
#, no-wrap
msgid ""
"    -+What is unexpected is that it will also crash.\n"
"    ++Unexpectedly, it also crashes. This is a bug, and the jury is\n"
"    ++still out there how to fix it best. See ticket #314 for details.\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-range-diff.txt:161
#, no-wrap
msgid ""
"      Contact\n"
"3:  bedead < -:  ------- TO-UNDO\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:166
msgid ""
"In this example, there are 3 old and 3 new commits, where the developer "
"removed the 3rd, added a new one before the first two, and modified the "
"commit message of the 2nd commit as well its diff."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:173
msgid ""
"When the output goes to a terminal, it is color-coded by default, just like "
"regular `git diff`'s output. In addition, the first line (adding a commit) "
"is green, the last line (deleting a commit) is red, the second line (with a "
"perfect match) is yellow like the commit header of `git show`'s output, and "
"the third line colors the old commit red, the new one green and the rest "
"like `git show`'s commit header."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:178
msgid ""
"A naive color-coded diff of diffs is actually a bit hard to read, though, as "
"it colors the entire lines red or green. The line that added \"What is "
"unexpected\" in the old commit, for example, is completely red, even if the "
"intent of the old commit was to add something."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:184
msgid ""
"To help with that, `range` uses the `--dual-color` mode by default. In this "
"mode, the diff of diffs will retain the original diff colors, and prefix the "
"lines with -/+ markers that have their *background* red or green, to make it "
"more obvious that they describe how the diff itself changed."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-range-diff.txt:187
#, no-wrap
msgid "Algorithm"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:191
msgid ""
"The general idea is this: we generate a cost matrix between the commits in "
"both commit ranges, then solve the least-cost assignment."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:195
msgid ""
"The cost matrix is populated thusly: for each pair of commits, both diffs "
"are generated and the \"diff of diffs\" is generated, with 3 context lines, "
"then the number of lines in that diff is used as cost."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:200
msgid ""
"To avoid false positives (e.g. when a patch has been removed, and an "
"unrelated patch has been added between two iterations of the same patch "
"series), the cost matrix is extended to allow for that, by adding fixed-cost "
"entries for wholesale deletes/adds."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:205
msgid ""
"Example: Let commits `1--2` be the first iteration of a patch series and `A--"
"C` the second iteration. Let's assume that `A` is a cherry-pick of `2,` and "
"`C` is a cherry-pick of `1` but with a small modification (say, a fixed "
"typo). Visualize the commits as a bipartite graph:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-range-diff.txt:208
#, no-wrap
msgid "    1            A\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-range-diff.txt:210
#, no-wrap
msgid "    2            B\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-range-diff.txt:212
#: ../Documentation-sedout/git-range-diff.txt:224
#, no-wrap
msgid "\t\t C\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:216
msgid ""
"We are looking for a \"best\" explanation of the new series in terms of the "
"old one. We can represent an \"explanation\" as an edge in the graph:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-range-diff.txt:222
#, no-wrap
msgid ""
"    1            A\n"
"\t       /\n"
"    2 --------'  B\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:229
msgid ""
"This explanation comes for \"free\" because there was no change. Similarly "
"`C` could be explained using `1`, but that comes at some cost c>0 because of "
"the modification:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-range-diff.txt:237
#, no-wrap
msgid ""
"    1 ----.      A\n"
"\t  |    /\n"
"    2 ----+---'  B\n"
"\t  |\n"
"\t  `----- C\n"
"\t  c>0\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:245
msgid ""
"In mathematical terms, what we are looking for is some sort of a minimum "
"cost bipartite matching; `1` is matched to `C` at some cost, etc. The "
"underlying graph is in fact a complete bipartite graph; the cost we "
"associate with every edge is the size of the diff between the two commits' "
"patches. To explain also new commits, we introduce dummy nodes on both sides:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-range-diff.txt:254
#, no-wrap
msgid ""
"    1 ----.      A\n"
"\t  |    /\n"
"    2 ----+---'  B\n"
"\t  |\n"
"    o     `----- C\n"
"\t  c>0\n"
"    o            o\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-range-diff.txt:256
#, no-wrap
msgid "    o            o\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:266
msgid ""
"The cost of an edge `o--C` is the size of `C`'s diff, modified by a fudge "
"factor that should be smaller than 100%. The cost of an edge `o--o` is free. "
"The fudge factor is necessary because even if `1` and `C` have nothing in "
"common, they may still share a few empty lines and such, possibly making the "
"assignment `1--C`, `o--o` slightly cheaper than `1--o`, `o--C` even if `1` "
"and `C` have nothing in common. With the fudge factor we require a much "
"larger common part to consider patches as corresponding."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:273
msgid ""
"The overall time needed to compute this algorithm is the time needed to "
"compute n+m commit diffs and then n*m diffs of patches, plus the time needed "
"to compute the least-cost assignment between n and m diffs. Git uses an "
"implementation of the Jonker-Volgenant algorithm to solve the assignment "
"problem, which has cubic runtime complexity. The matching found in this case "
"will look like this:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-range-diff.txt:282
#, no-wrap
msgid ""
"    1 ----.      A\n"
"\t  |    /\n"
"    2 ----+---'  B\n"
"       .--+-----'\n"
"    o -'  `----- C\n"
"\t  c>0\n"
"    o ---------- o\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-range-diff.txt:284
#, no-wrap
msgid "    o ---------- o\n"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-range-diff.txt:288
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:290
msgid "linkgit:git-log[1]"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-range-diff.txt:292
#, no-wrap
msgid "GIT"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-range-diff.txt:293
msgid "Part of the linkgit:git[1] suite"
msgstr ""
