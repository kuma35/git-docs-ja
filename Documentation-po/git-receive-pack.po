# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 0.0\n"
"POT-Creation-Date: 2023-07-18 11:05+0900\n"
"PO-Revision-Date: 2022-04-30 19:55+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/git-receive-pack.txt:2
#, no-wrap
msgid "git-receive-pack(1)"
msgstr "git-receive-pack(1)"

#. type: Title -
#: ../Documentation-sedout/git-receive-pack.txt:5
#, no-wrap
msgid "NAME"
msgstr "NAME"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:7
msgid "git-receive-pack - Receive what is pushed into the repository"
msgstr "git-receive-pack - リポジトリにプッシュされたものを受信します"

#. type: Title -
#: ../Documentation-sedout/git-receive-pack.txt:10
#, no-wrap
msgid "SYNOPSIS"
msgstr "SYNOPSIS"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:13
#, fuzzy, no-wrap
#| msgid "'git-receive-pack' <directory>\n"
msgid "'git receive-pack' <git-dir>\n"
msgstr "'git-receive-pack' <directory>\n"

#. type: Title -
#: ../Documentation-sedout/git-receive-pack.txt:15
#, no-wrap
msgid "DESCRIPTION"
msgstr "DESCRIPTION"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:18
msgid ""
"Invoked by 'git send-pack' and updates the repository with the information "
"fed from the remote end."
msgstr ""
"`git send-pack` によって呼び出され、リモート側からもたらされた情報でリポジト"
"リを更新します。"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:23
msgid ""
"This command is usually not invoked directly by the end user.  The UI for "
"the protocol is on the 'git send-pack' side, and the program pair is meant "
"to be used to push updates to remote repository.  For pull operations, see "
"linkgit:git-fetch-pack[1]."
msgstr ""
"このコマンドは通常、エンドユーザーによって直接呼び出されることはありません。 "
"プロトコルのUIは `git send-pack` 側にあり、プログラムペアは更新をリモートリポ"
"ジトリにプッシュするために使用されることを目的としています。 プル操作について"
"は、 linkgit:git-fetch-pack[1] を参照してください。"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:28
msgid ""
"The command allows for creation and fast-forwarding of sha1 refs (heads/"
"tags) on the remote end (strictly speaking, it is the local end 'git-receive-"
"pack' runs, but to the user who is sitting at the send-pack end, it is "
"updating the remote.  Confused?)"
msgstr ""
"このコマンドを使用すると、リモート側で sha1 ref (ヘッド/タグ)を作成して早送り"
"できます(厳密に言えば、ローカル側では `git-receive-pack` が実行されますが、"
"send-pack側に居るユーザにとってはリモートの更新をしている事になります。混乱し"
"ないでね？)"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:31
msgid ""
"There are other real-world examples of using update and post-update hooks "
"found in the Documentation/howto directory."
msgstr ""
"Documentation/howtoディレクトリには、更新フック(update hook)と更新後フック"
"(post-update hook)を使用した実例が他にもあります。"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:35
msgid ""
"'git-receive-pack' honours the receive.denyNonFastForwards config option, "
"which tells it if updates to a ref should be denied if they are not fast-"
"forwards."
msgstr ""
"'git-receive-pack' は、 receive.denyNonFastForwards 構成オプションを尊重しま"
"す。このオプションは、refの更新が早送りでない場合に拒否する必要があるかどうか"
"を通知します。"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:38
msgid ""
"A number of other receive.* config options are available to tweak its "
"behavior, see linkgit:git-config[1]."
msgstr ""
"他の多くの `receive.*` 構成オプションを使用して、その動作を微調整できます。 "
"linkgit:git-config[1] を参照してください。"

#. type: Title -
#: ../Documentation-sedout/git-receive-pack.txt:40
#, no-wrap
msgid "OPTIONS"
msgstr "OPTIONS"

#. type: Labeled list
#: ../Documentation-sedout/git-receive-pack.txt:41
#, no-wrap
msgid "<git-dir>"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:43
msgid "The repository to sync into."
msgstr "同期するリポジトリ。"

#. type: Labeled list
#: ../Documentation-sedout/git-receive-pack.txt:44
#, no-wrap
msgid "`--http-backend-info-refs`"
msgstr "`--http-backend-info-refs`"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:48
msgid ""
"Used by linkgit:git-http-backend[1] to serve up `$GIT_URL/info/refs?"
"service=git-receive-pack` requests. See `--http-backend-info-refs` in "
"linkgit:git-upload-pack[1]."
msgstr ""
"linkgit:git-http-backend[1] が、 `$GIT_URL/info/refs?service=git-receive-"
"pack` リクエストを処理するために使用します。 linkgit:git-upload-pack[1] の "
"`--http-backend-info-refs` を参照してください。"

#. type: Title -
#: ../Documentation-sedout/git-receive-pack.txt:50
#, no-wrap
msgid "PRE-RECEIVE HOOK"
msgstr "PRE-RECEIVE HOOK"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:54
msgid ""
"Before any ref is updated, if $GIT_DIR/hooks/pre-receive file exists and is "
"executable, it will be invoked once with no parameters.  The standard input "
"of the hook will be one line per ref to be updated:"
msgstr ""
"refが更新される前に、 $GIT_DIR/hooks/pre-receive ファイルが存在し、実行可能で"
"ある場合、パラメーターなしで1回呼び出されます。 フックの標準入力は、更新され"
"る参照ごとに1行になります:"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:56
#: ../Documentation-sedout/git-receive-pack.txt:155
#, no-wrap
msgid "       sha1-old SP sha1-new SP refname LF\n"
msgstr "       sha1-old SP sha1-new SP refname LF\n"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:63
msgid ""
"The refname value is relative to $GIT_DIR; e.g. for the master head this is "
"\"refs/heads/master\".  The two sha1 values before each refname are the "
"object names for the refname before and after the update.  Refs to be "
"created will have sha1-old equal to 0\\{40}, while refs to be deleted will "
"have sha1-new equal to 0\\{40}, otherwise sha1-old and sha1-new should be "
"valid objects in the repository."
msgstr ""
"refnameの値は$GIT_DIRを基準にしています。 例えば masterヘッドの場合、これは "
"`refs/heads/master` です。 各refnameの前の2つのsha1値は、更新前後のrefnameの"
"オブジェクト名です。 作成されるrefのsha1-oldは 0\\{40} に等しく、削除される"
"refのsha1-newは 0\\{40} になります。それ以外の場合、sha1-oldとsha1-newはリポ"
"ジトリ内の有効なオブジェクトである必要があります。"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:70
msgid ""
"When accepting a signed push (see linkgit:git-push[1]), the signed push "
"certificate is stored in a blob and an environment variable `GIT_PUSH_CERT` "
"can be consulted for its object name.  See the description of `post-receive` "
"hook for an example.  In addition, the certificate is verified using GPG and "
"the result is exported with the following environment variables:"
msgstr ""
"署名されたプッシュを受け入れる場合(linkgit:git-push[1] 参照)、署名されたプッ"
"シュ証明書はブロブに格納され、環境変数 `GIT_PUSH_CERT` でオブジェクト名を調べ"
"ることができます。 例については、 `post-receive` フックの説明を参照してくださ"
"い。 さらに、証明書はGPGを使用して検証され、結果は以下の環境変数とともにエク"
"スポートされます:"

#. type: Labeled list
#: ../Documentation-sedout/git-receive-pack.txt:71
#, no-wrap
msgid "`GIT_PUSH_CERT_SIGNER`"
msgstr "`GIT_PUSH_CERT_SIGNER`"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:74
msgid ""
"The name and the e-mail address of the owner of the key that signed the push "
"certificate."
msgstr ""
"プッシュ証明書に署名したキーの所有者の、名前(name)と電子メールアドレス(e-"
"mail address)。"

#. type: Labeled list
#: ../Documentation-sedout/git-receive-pack.txt:75
#, no-wrap
msgid "`GIT_PUSH_CERT_KEY`"
msgstr "`GIT_PUSH_CERT_KEY`"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:77
msgid "The GPG key ID of the key that signed the push certificate."
msgstr "プッシュ証明書に署名したキーのGPGキーID。"

#. type: Labeled list
#: ../Documentation-sedout/git-receive-pack.txt:78
#, no-wrap
msgid "`GIT_PUSH_CERT_STATUS`"
msgstr "`GIT_PUSH_CERT_STATUS`"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:82
msgid ""
"The status of GPG verification of the push certificate, using the same "
"mnemonic as used in `%G?` format of `git log` family of commands (see "
"linkgit:git-log[1])."
msgstr ""
"コマンドの `git log` ファミリーの `%G?` 形式で使用されるのと同一のニーモニッ"
"クを使用した、プッシュ証明書のGPG検証のステータス(linkgit:git-log[1] を参"
"照)。"

#. type: Labeled list
#: ../Documentation-sedout/git-receive-pack.txt:83
#, no-wrap
msgid "`GIT_PUSH_CERT_NONCE`"
msgstr "`GIT_PUSH_CERT_NONCE`"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:89
msgid ""
"The nonce string the process asked the signer to include in the push "
"certificate.  If this does not match the value recorded on the \"nonce\" "
"header in the push certificate, it may indicate that the certificate is a "
"valid one that is being replayed from a separate \"git push\" session."
msgstr ""
"プロセスが署名者にプッシュ証明書に含めるように要求したノンス(nonce;その場限り"
"の)文字列。これがプッシュ証明書の「nonce」ヘッダーに記録されている値と一致し"
"ない場合は、証明書が別の `git push` セッションから再実行されている有効な証明"
"書であることを示している可能性があります。"

#. type: Labeled list
#: ../Documentation-sedout/git-receive-pack.txt:90
#, no-wrap
msgid "`GIT_PUSH_CERT_NONCE_STATUS`"
msgstr "`GIT_PUSH_CERT_NONCE_STATUS`"

#. type: Labeled list
#: ../Documentation-sedout/git-receive-pack.txt:91
#, no-wrap
msgid "`UNSOLICITED`"
msgstr "`UNSOLICITED`"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:94
msgid "\"git push --signed\" sent a nonce when we did not ask it to send one."
msgstr ""
"`git push --signed` は、私達が送信を問い合わせなかったときにノンス(nonce)を送"
"信しました。"

#. type: Labeled list
#: ../Documentation-sedout/git-receive-pack.txt:94
#, no-wrap
msgid "`MISSING`"
msgstr "`MISSING`"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:96
msgid "\"git push --signed\" did not send any nonce header."
msgstr "`git push --signed` はノンスヘッダーを送信しませんでした。"

#. type: Labeled list
#: ../Documentation-sedout/git-receive-pack.txt:96
#, no-wrap
msgid "`BAD`"
msgstr "`BAD`"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:98
msgid "\"git push --signed\" sent a bogus nonce."
msgstr "`git push --signed` は偽のノンスを送信しました。"

#. type: Labeled list
#: ../Documentation-sedout/git-receive-pack.txt:98
#, no-wrap
msgid "`OK`"
msgstr "`OK`"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:100
msgid "\"git push --signed\" sent the nonce we asked it to send."
msgstr "`git push --signed` は、私達が送信を要求したノンスを送信しました。"

#. type: Labeled list
#: ../Documentation-sedout/git-receive-pack.txt:100
#, no-wrap
msgid "`SLOP`"
msgstr "`SLOP`"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:104
msgid ""
"\"git push --signed\" sent a nonce different from what we asked it to send "
"now, but in a previous session.  See `GIT_PUSH_CERT_NONCE_SLOP` environment "
"variable."
msgstr ""
"`git push --signed` は、前回のセッションで送信するように要求したものとは異な"
"るノンスを送信しました。  `GIT_PUSH_CERT_NONCE_SLOP` 環境変数を参照してくださ"
"い。"

#. type: Labeled list
#: ../Documentation-sedout/git-receive-pack.txt:105
#, no-wrap
msgid "`GIT_PUSH_CERT_NONCE_SLOP`"
msgstr "`GIT_PUSH_CERT_NONCE_SLOP`"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:113
msgid ""
"\"git push --signed\" sent a nonce different from what we asked it to send "
"now, but in a different session whose starting time is different by this "
"many seconds from the current session.  Only meaningful when "
"`GIT_PUSH_CERT_NONCE_STATUS` says `SLOP`.  Also read about `receive."
"certNonceSlop` variable in linkgit:git-config[1]."
msgstr ""
"`git push --signed` は、現在送信するように要求したものとは異なるノンスを送信"
"しました。開始時刻が現在のセッションとは何秒も違う別のセッションで送信されま"
"した。 `GIT_PUSH_CERT_NONCE_STATUS` が `SLOP` と言った場合にのみ意味がありま"
"す。 linkgit:git-config[1] の `receive.certNonceSlop` 変数についてもお読みく"
"ださい。"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:116
msgid ""
"This hook is called before any refname is updated and before any fast-"
"forward checks are performed."
msgstr ""
"このフックは、refnameが更新される前、および早送りチェックが実行される前に呼び"
"出されます。"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:121
msgid ""
"If the pre-receive hook exits with a non-zero exit status no updates will be "
"performed, and the update, post-receive and post-update hooks will not be "
"invoked either.  This can be useful to quickly bail out if the update is not "
"to be supported."
msgstr ""
"受信前(pre-receive)フックがゼロ以外の終了ステータスで終了した場合、更新は実行"
"されず、更新(update)フックや受信後フック(post-receive)や更新後(post-update)"
"フックも呼び出されません。 これは、更新がサポートされない場合に迅速に救済する"
"のに役立ちます。"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:123
msgid "See the notes on the quarantine environment below."
msgstr "以下の検疫環境(quarantine environment)に関する注記を参照してください。"

#. type: Title -
#: ../Documentation-sedout/git-receive-pack.txt:125
#, no-wrap
msgid "UPDATE HOOK"
msgstr "UPDATE HOOK"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:128
msgid ""
"Before each ref is updated, if $GIT_DIR/hooks/update file exists and is "
"executable, it is invoked once per ref, with three parameters:"
msgstr ""
"各refが更新される前に、 $GIT_DIR/hooks/update ファイルが存在し、実行可能であ"
"る場合、3つのパラメーターを使用してrefごとに1回呼び出されます:"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:130
#, no-wrap
msgid "       $GIT_DIR/hooks/update refname sha1-old sha1-new\n"
msgstr "       $GIT_DIR/hooks/update refname sha1-old sha1-new\n"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:137
msgid ""
"The refname parameter is relative to $GIT_DIR; e.g. for the master head this "
"is \"refs/heads/master\".  The two sha1 arguments are the object names for "
"the refname before and after the update.  Note that the hook is called "
"before the refname is updated, so either sha1-old is 0\\{40} (meaning there "
"is no such ref yet), or it should match what is recorded in refname."
msgstr ""
"refnameパラメーターは$GIT_DIRに関連しています。 例えば masterヘッドの場合、こ"
"れは `refs/heads/master` です。 2つのsha1引数は、更新前後のrefnameのオブジェ"
"クト名です。 refnameが更新される前にフックが呼び出されるため、sha1-oldが "
"0\\{40} (そのようなrefがまだないことを意味します)であるか、refnameに記録され"
"ているものと一致する必要があることに注意してください。"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:140
msgid ""
"The hook should exit with non-zero status if it wants to disallow updating "
"the named ref.  Otherwise it should exit with zero."
msgstr ""
"名前付きrefの更新を禁止する場合、フックはゼロ以外のステータスで終了する必要が"
"あります。 それ以外の場合は、ゼロで終了する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:145
msgid ""
"Successful execution (a zero exit status) of this hook does not ensure the "
"ref will actually be updated, it is only a prerequisite.  As such it is not "
"a good idea to send notices (e.g. email) from this hook.  Consider using the "
"post-receive hook instead."
msgstr ""
"このフックの正常な実行(ゼロ終了ステータス)は、refが実際に更新されることを保証"
"するものではなく、前提条件にすぎません。 そのため、このフックから通知(電子"
"メールなど)を送信することはお勧めできません。 代わりに、受信後(post-receive)"
"フックの使用を検討してください。"

#. type: Title -
#: ../Documentation-sedout/git-receive-pack.txt:147
#, no-wrap
msgid "POST-RECEIVE HOOK"
msgstr "POST-RECEIVE HOOK"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:153
msgid ""
"After all refs were updated (or attempted to be updated), if any ref update "
"was successful, and if $GIT_DIR/hooks/post-receive file exists and is "
"executable, it will be invoked once with no parameters.  The standard input "
"of the hook will be one line for each successfully updated ref:"
msgstr ""
"すべてのrefが更新された後(または更新が試みられた後)、refの更新が成功した場"
"合、および $GIT_DIR/hooks/post-receive ファイルが存在し、実行可能である場合、"
"パラメーターなしで1回呼び出されます。 フックの標準入力は、正常に更新された参"
"照ごとに1行になります。"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:163
msgid ""
"The refname value is relative to $GIT_DIR; e.g. for the master head this is "
"\"refs/heads/master\".  The two sha1 values before each refname are the "
"object names for the refname before and after the update.  Refs that were "
"created will have sha1-old equal to 0\\{40}, while refs that were deleted "
"will have sha1-new equal to 0\\{40}, otherwise sha1-old and sha1-new should "
"be valid objects in the repository."
msgstr ""
"refnameの値は$GIT_DIRを基準にしています。 例えば masterヘッドの場合、これは "
"`refs/heads/master` です。 各refnameの前の2つのsha1値は、更新前後のrefnameの"
"オブジェクト名です。 作成された参照はsha1-oldが 0\\{40} に等しくなり、削除さ"
"れた参照はsha1-newが 0\\{40} に等しくなります。それ以外の場合、sha1-oldと"
"sha1-newはリポジトリ内の有効なオブジェクトである必要があります。"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:166
msgid ""
"The `GIT_PUSH_CERT*` environment variables can be inspected, just as in `pre-"
"receive` hook, after accepting a signed push."
msgstr ""
"署名されたプッシュを受け入れた後、 `pre-receive` フックの場合と同様に、 "
"`GIT_PUSH_CERT*` 環境変数を検査できます。"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:172
msgid ""
"Using this hook, it is easy to generate mails describing the updates to the "
"repository.  This example script sends one mail message per ref listing the "
"commits pushed to the repository, and logs the push certificates of signed "
"pushes with good signatures to a logger service:"
msgstr ""
"このフックを使用すると、リポジトリの更新を説明するメールを簡単に生成できま"
"す。 このサンプルスクリプトは、リポジトリにプッシュされたコミットを一覧表示す"
"るrefごとに1つのメールメッセージを送信し、適切な署名を持つ署名付きプッシュの"
"プッシュ証明書をログ取りサービス(logger service)に記録します:"

#. type: delimited block -
#: ../Documentation-sedout/git-receive-pack.txt:197
#, no-wrap
msgid ""
"#!/bin/sh\n"
"# mail out commit update information.\n"
"while read oval nval ref\n"
"do\n"
"\tif expr \"$oval\" : '0*$' >/dev/null\n"
"\tthen\n"
"\t\techo \"Created a new ref, with the following commits:\"\n"
"\t\tgit rev-list --pretty \"$nval\"\n"
"\telse\n"
"\t\techo \"New commits:\"\n"
"\t\tgit rev-list --pretty \"$nval\" \"^$oval\"\n"
"\tfi |\n"
"\tmail -s \"Changes to ref $ref\" commit-list@mydomain\n"
"done\n"
"# log signed push certificate, if any\n"
"if test -n \"${GIT_PUSH_CERT-}\" && test ${GIT_PUSH_CERT_STATUS} = G\n"
"then\n"
"\t(\n"
"\t\techo expected nonce is ${GIT_PUSH_NONCE}\n"
"\t\tgit cat-file blob ${GIT_PUSH_CERT}\n"
"\t) | mail -s \"push certificate from $GIT_PUSH_CERT_SIGNER\" push-log@mydomain\n"
"fi\n"
"exit 0\n"
msgstr ""
"#!/bin/sh\n"
"# mail out commit update information.\n"
"while read oval nval ref\n"
"do\n"
"\tif expr \"$oval\" : '0*$' >/dev/null\n"
"\tthen\n"
"\t\techo \"Created a new ref, with the following commits:\"\n"
"\t\tgit rev-list --pretty \"$nval\"\n"
"\telse\n"
"\t\techo \"New commits:\"\n"
"\t\tgit rev-list --pretty \"$nval\" \"^$oval\"\n"
"\tfi |\n"
"\tmail -s \"Changes to ref $ref\" commit-list@mydomain\n"
"done\n"
"# log signed push certificate, if any\n"
"if test -n \"${GIT_PUSH_CERT-}\" && test ${GIT_PUSH_CERT_STATUS} = G\n"
"then\n"
"\t(\n"
"\t\techo expected nonce is ${GIT_PUSH_NONCE}\n"
"\t\tgit cat-file blob ${GIT_PUSH_CERT}\n"
"\t) | mail -s \"push certificate from $GIT_PUSH_CERT_SIGNER\" push-log@mydomain\n"
"fi\n"
"exit 0\n"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:201
msgid ""
"The exit code from this hook invocation is ignored, however a non-zero exit "
"code will generate an error message."
msgstr ""
"このフック呼び出しからの終了コードは無視されますが、ゼロ以外の終了コードはエ"
"ラーメッセージを生成します。"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:207
msgid ""
"Note that it is possible for refname to not have sha1-new when this hook "
"runs.  This can easily occur if another user modifies the ref after it was "
"updated by 'git-receive-pack', but before the hook was able to evaluate it.  "
"It is recommended that hooks rely on sha1-new rather than the current value "
"of refname."
msgstr ""
"このフックが実行されると、refnameにsha1-newがない可能性があることに注意してく"
"ださい。 これは、 `git-receive-pack` によって更新された後、フックがそれを評価"
"できるようになる前に、別のユーザーが参照を変更した場合に簡単に発生する可能性"
"があります。 フックは、refnameの現在の値ではなく、sha1-newに依存することをお"
"勧めします。"

#. type: Title -
#: ../Documentation-sedout/git-receive-pack.txt:209
#, no-wrap
msgid "POST-UPDATE HOOK"
msgstr "POST-UPDATE HOOK"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:214
msgid ""
"After all other processing, if at least one ref was updated, and if $GIT_DIR/"
"hooks/post-update file exists and is executable, then post-update will be "
"called with the list of refs that have been updated.  This can be used to "
"implement any repository wide cleanup tasks."
msgstr ""
"他のすべての処理の後、少なくとも1つのrefが更新され、 $GIT_DIR/hooks/post-"
"update ファイルが存在し、実行可能である場合、更新されたrefのリストを使用して"
"post-updateが呼び出されます。 これは、リポジトリ全体のクリーンアップタスクを"
"実装するために使用できます。"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:218
msgid ""
"The exit code from this hook invocation is ignored; the only thing left for "
"'git-receive-pack' to do at that point is to exit itself anyway."
msgstr ""
"このフック呼び出しからの終了コードは無視されます。 その時点で `git-receive-"
"pack` に残されているのは、とにかく自分自身を終了することだけです。"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:221
msgid ""
"This hook can be used, for example, to run `git update-server-info` if the "
"repository is packed and is served via a dumb transport."
msgstr ""
"このフックは、たとえば、リポジトリがパックされてバカ転送(dumb transport)を介"
"して提供される場合に `git update-server-info` を実行するために使用できます。"

#. type: delimited block -
#: ../Documentation-sedout/git-receive-pack.txt:225
#, no-wrap
msgid ""
"#!/bin/sh\n"
"exec git update-server-info\n"
msgstr ""
"#!/bin/sh\n"
"exec git update-server-info\n"

#. type: Title -
#: ../Documentation-sedout/git-receive-pack.txt:229
#, no-wrap
msgid "QUARANTINE ENVIRONMENT"
msgstr "QUARANTINE ENVIRONMENT"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:236
msgid ""
"When `receive-pack` takes in objects, they are placed into a temporary "
"\"quarantine\" directory within the `$GIT_DIR/objects` directory and "
"migrated into the main object store only after the `pre-receive` hook has "
"completed. If the push fails before then, the temporary directory is removed "
"entirely."
msgstr ""
"`receive-pack` がオブジェクトを取り込むと、それらは `$GIT_DIR/objects` ディレ"
"クトリ内の一時的な「隔離」(quarantine)ディレクトリに配置され、 `pre-receive` "
"フックが完了した後にのみメインオブジェクトストアに移行されます。 それ以前に"
"プッシュが失敗した場合、一時ディレクトリは完全に削除されます。"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:238
msgid "This has a few user-visible effects and caveats:"
msgstr "これには、ユーザーからも見えるいくつかの影響と注意事項があります:"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:244
msgid ""
"Pushes which fail due to problems with the incoming pack, missing objects, "
"or due to the `pre-receive` hook will not leave any on-disk data. This is "
"usually helpful to prevent repeated failed pushes from filling up your disk, "
"but can make debugging more challenging."
msgstr ""
"着信パックの問題、またはオブジェクトの欠落、または `pre-receive` フックが原因"
"で失敗したプッシュは、ディスク上のデータを残しません。 これは通常、繰り返し失"
"敗したプッシュがディスクをいっぱいにするのを防ぐのに役立ちますが、デバッグが"
"より困難になる可能性があります。"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:247
msgid ""
"Any objects created by the `pre-receive` hook will be created in the "
"quarantine directory (and migrated only if it succeeds)."
msgstr ""
"`pre-receive` フックによって作成されたオブジェクトはすべて、隔離(quarantine)"
"ディレクトリに作成されます(成功した場合にのみ移行されます)。"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:253
msgid ""
"The `pre-receive` hook MUST NOT update any refs to point to quarantined "
"objects. Other programs accessing the repository will not be able to see the "
"objects (and if the pre-receive hook fails, those refs would become "
"corrupted). For safety, any ref updates from within `pre-receive` are "
"automatically rejected."
msgstr ""
"`pre-receive` フックは、隔離(quarantined)されたオブジェクトを指すように参照を"
"更新してはなりません。 リポジトリにアクセスする他のプログラムはオブジェクトを"
"見ることができません(そして、受信前(pre-receive)フックが失敗した場合、それら"
"のrefは破損します)。 安全のため、 `pre-receive` 内からのrefの更新は自動的に拒"
"否されます。"

#. type: Title -
#: ../Documentation-sedout/git-receive-pack.txt:256
#, no-wrap
msgid "SEE ALSO"
msgstr "SEE ALSO"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:258
msgid "linkgit:git-send-pack[1], linkgit:gitnamespaces[7]"
msgstr "linkgit:git-send-pack[1], linkgit:gitnamespaces[7]"

#. type: Title -
#: ../Documentation-sedout/git-receive-pack.txt:260
#, no-wrap
msgid "GIT"
msgstr "GIT"

#. type: Plain text
#: ../Documentation-sedout/git-receive-pack.txt:261
msgid "Part of the linkgit:git[1] suite"
msgstr "Part of the linkgit:git[1] suite"

#, no-wrap
#~ msgid "<directory>"
#~ msgstr "<directory>"
