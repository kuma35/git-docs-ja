# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-10-01 00:25+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title -
#: ../Documentation/config.txt:2
#, no-wrap
msgid "CONFIGURATION FILE"
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:12
msgid ""
"The Git configuration file contains a number of variables that affect the "
"Git commands' behavior. The files `.git/config` and optionally "
"`config.worktree` (see the \"CONFIGURATION FILE\" section of "
"linkgit:git-worktree[1]) in each repository are used to store the "
"configuration for that repository, and `$HOME/.gitconfig` is used to store a "
"per-user configuration as fallback values for the `.git/config` file. The "
"file `/etc/gitconfig` can be used to store a system-wide default "
"configuration."
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:21
msgid ""
"The configuration variables are used by both the Git plumbing and the "
"porcelains. The variables are divided into sections, wherein the fully "
"qualified variable name of the variable itself is the last dot-separated "
"segment and the section name is everything before the last dot. The variable "
"names are case-insensitive, allow only alphanumeric characters and `-`, and "
"must start with an alphabetic character.  Some variables may appear multiple "
"times; we say then that the variable is multivalued."
msgstr ""

#. type: Title ~
#: ../Documentation/config.txt:23
#, no-wrap
msgid "Syntax"
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:28
msgid ""
"The syntax is fairly flexible and permissive; whitespaces are mostly "
"ignored.  The '#' and ';' characters begin comments to the end of line, "
"blank lines are ignored."
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:35
msgid ""
"The file consists of sections and variables.  A section begins with the name "
"of the section in square brackets and continues until the next section "
"begins.  Section names are case-insensitive.  Only alphanumeric characters, "
"`-` and `.` are allowed in section names.  Each variable must belong to some "
"section, which means that there must be a section header before the first "
"setting of a variable."
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:39
msgid ""
"Sections can be further divided into subsections.  To begin a subsection put "
"its name in double quotes, separated by space from the section name, in the "
"section header, like in the example below:"
msgstr ""

#. type: delimited block -
#: ../Documentation/config.txt:42
#, no-wrap
msgid "\t[section \"subsection\"]\n"
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:53
msgid ""
"Subsection names are case sensitive and can contain any characters except "
"newline and the null byte. Doublequote `\"` and backslash can be included by "
"escaping them as `\\\"` and `\\\\`, respectively. Backslashes preceding "
"other characters are dropped when reading; for example, `\\t` is read as `t` "
"and `\\0` is read as `0`. Section headers cannot span multiple lines.  "
"Variables may belong directly to a section or to a given subsection. You can "
"have `[section]` if you have `[section \"subsection\"]`, but you don't need "
"to."
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:58
msgid ""
"There is also a deprecated `[section.subsection]` syntax. With this syntax, "
"the subsection name is converted to lower-case and is also compared case "
"sensitively. These subsection names follow the same restrictions as section "
"names."
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:65
msgid ""
"All the other lines (and the remainder of the line after the section header) "
"are recognized as setting variables, in the form 'name = value' (or just "
"'name', which is a short-hand to say that the variable is the boolean "
"\"true\").  The variable names are case-insensitive, allow only alphanumeric "
"characters and `-`, and must start with an alphabetic character."
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:73
msgid ""
"A line that defines a value can be continued to the next line by ending it "
"with a `\\`; the backslash and the end-of-line are stripped.  Leading "
"whitespaces after 'name =', the remainder of the line after the first "
"comment character '#' or ';', and trailing whitespaces of the line are "
"discarded unless they are enclosed in double quotes.  Internal whitespaces "
"within the value are retained verbatim."
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:76
msgid ""
"Inside double quotes, double quote `\"` and backslash `\\` characters must "
"be escaped: use `\\\"` for `\"` and `\\\\` for `\\`."
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:81
msgid ""
"The following escape sequences (beside `\\\"` and `\\\\`) are recognized: "
"`\\n` for newline character (NL), `\\t` for horizontal tabulation (HT, TAB)  "
"and `\\b` for backspace (BS).  Other char escape sequences (including octal "
"escape sequences) are invalid."
msgstr ""

#. type: Title ~
#: ../Documentation/config.txt:84
#, no-wrap
msgid "Includes"
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:91
msgid ""
"The `include` and `includeIf` sections allow you to include config "
"directives from another source. These sections behave identically to each "
"other with the exception that `includeIf` sections may be ignored if their "
"condition does not evaluate to true; see \"Conditional includes\" below."
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:96
msgid ""
"You can include a config file from another by setting the special "
"`include.path` (or `includeIf.*.path`) variable to the name of the file to "
"be included. The variable takes a pathname as its value, and is subject to "
"tilde expansion. These variables can be given multiple times."
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:102
msgid ""
"The contents of the included file are inserted immediately, as if they had "
"been found at the location of the include directive. If the value of the "
"variable is a relative path, the path is considered to be relative to the "
"configuration file in which the include directive was found.  See below for "
"examples."
msgstr ""

#. type: Title ~
#: ../Documentation/config.txt:104
#, no-wrap
msgid "Conditional includes"
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:109
msgid ""
"You can include a config file from another conditionally by setting a "
"`includeIf.<condition>.path` variable to the name of the file to be "
"included."
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:113
msgid ""
"The condition starts with a keyword followed by a colon and some data whose "
"format and meaning depends on the keyword. Supported keywords are:"
msgstr ""

#. type: Labeled list
#: ../Documentation/config.txt:114
#, no-wrap
msgid "`gitdir`"
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:119
msgid ""
"The data that follows the keyword `gitdir:` is used as a glob pattern. If "
"the location of the .git directory matches the pattern, the include "
"condition is met."
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:124
msgid ""
"The .git location may be auto-discovered, or come from `$GIT_DIR` "
"environment variable. If the repository is auto discovered via a .git file "
"(e.g. from submodules, or a linked worktree), the .git location would be the "
"final location where the .git directory is, not where the"
msgstr ""

#. type: Block title
#: ../Documentation/config.txt:124
#, no-wrap
msgid "git file is."
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:129
msgid ""
"The pattern can contain standard globbing wildcards and two additional ones, "
"`**/` and `/**`, that can match multiple path components. Please refer to "
"linkgit:gitignore[5] for details. For convenience:"
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:132
msgid ""
"If the pattern starts with `~/`, `~` will be substituted with the content of "
"the environment variable `HOME`."
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:135
msgid ""
"If the pattern starts with `./`, it is replaced with the directory "
"containing the current config file."
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:139
msgid ""
"If the pattern does not start with either `~/`, `./` or `/`, `**/` will be "
"automatically prepended. For example, the pattern `foo/bar` becomes "
"`**/foo/bar` and would match `/any/path/to/foo/bar`."
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:143
msgid ""
"If the pattern ends with `/`, `**` will be automatically added. For example, "
"the pattern `foo/` becomes `foo/**`. In other words, it matches \"foo\" and "
"everything inside, recursively."
msgstr ""

#. type: Labeled list
#: ../Documentation/config.txt:144
#, no-wrap
msgid "`gitdir/i`"
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:147
msgid ""
"This is the same as `gitdir` except that matching is done case-insensitively "
"(e.g. on case-insensitive file systems)"
msgstr ""

#. type: Labeled list
#: ../Documentation/config.txt:148
#, no-wrap
msgid "`onbranch`"
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:155
msgid ""
"The data that follows the keyword `onbranch:` is taken to be a pattern with "
"standard globbing wildcards and two additional ones, `**/` and `/**`, that "
"can match multiple path components.  If we are in a worktree where the name "
"of the branch that is currently checked out matches the pattern, the include "
"condition is met."
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:161
msgid ""
"If the pattern ends with `/`, `**` will be automatically added. For example, "
"the pattern `foo/` becomes `foo/**`. In other words, it matches all branches "
"that begin with `foo/`. This is useful if your branches are organized "
"hierarchically and you would like to apply a configuration to all the "
"branches in that hierarchy."
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:163
msgid "A few more notes on matching via `gitdir` and `gitdir/i`:"
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:165
msgid "Symlinks in `$GIT_DIR` are not resolved before matching."
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:170
msgid ""
"Both the symlink & realpath versions of paths will be matched outside of "
"`$GIT_DIR`. E.g. if ~/git is a symlink to /mnt/storage/git, both "
"`gitdir:~/git` and `gitdir:/mnt/storage/git` will match."
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:175
msgid ""
"This was not the case in the initial release of this feature in v2.13.0, "
"which only matched the realpath version. Configuration that wants to be "
"compatible with the initial release of this feature needs to either specify "
"only the realpath version, or both versions."
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:178
msgid ""
"Note that \"../\" is not special and will match literally, which is unlikely "
"what you want."
msgstr ""

#. type: Title ~
#: ../Documentation/config.txt:180
#, no-wrap
msgid "Example"
msgstr ""

#. type: delimited block -
#: ../Documentation/config.txt:187
#, no-wrap
msgid ""
"# Core variables\n"
"[core]\n"
"\t; Don't trust file modes\n"
"\tfilemode = false\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/config.txt:192
#, no-wrap
msgid ""
"# Our diff algorithm\n"
"[diff]\n"
"\texternal = /usr/local/bin/diff-wrapper\n"
"\trenames = true\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/config.txt:196
#, no-wrap
msgid ""
"[branch \"devel\"]\n"
"\tremote = origin\n"
"\tmerge = refs/heads/devel\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/config.txt:201
#, no-wrap
msgid ""
"# Proxy settings\n"
"[core]\n"
"\tgitProxy=\"ssh\" for \"kernel.org\"\n"
"\tgitProxy=default-proxy ; for the rest\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/config.txt:206
#, no-wrap
msgid ""
"[include]\n"
"\tpath = /path/to/foo.inc ; include by absolute path\n"
"\tpath = foo.inc ; find \"foo.inc\" relative to the current file\n"
"\tpath = ~/foo.inc ; find \"foo.inc\" in your `$HOME` directory\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/config.txt:210
#, no-wrap
msgid ""
"; include if $GIT_DIR is /path/to/foo/.git\n"
"[includeIf \"gitdir:/path/to/foo/.git\"]\n"
"\tpath = /path/to/foo.inc\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/config.txt:214
#, no-wrap
msgid ""
"; include for all repositories inside /path/to/group\n"
"[includeIf \"gitdir:/path/to/group/\"]\n"
"\tpath = /path/to/foo.inc\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/config.txt:218
#, no-wrap
msgid ""
"; include for all repositories inside $HOME/to/group\n"
"[includeIf \"gitdir:~/to/group/\"]\n"
"\tpath = /path/to/foo.inc\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/config.txt:224
#, no-wrap
msgid ""
"; relative paths are always relative to the including\n"
"; file (if the condition is true); their location is not\n"
"; affected by the condition\n"
"[includeIf \"gitdir:/path/to/group/\"]\n"
"\tpath = foo.inc\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/config.txt:229
#, no-wrap
msgid ""
"; include only if we are in a worktree where foo-branch is\n"
"; currently checked out\n"
"[includeIf \"onbranch:foo-branch\"]\n"
"\tpath = foo.inc\n"
msgstr ""

#. type: Title ~
#: ../Documentation/config.txt:232
#, no-wrap
msgid "Values"
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:237
msgid ""
"Values of many variables are treated as a simple string, but there are "
"variables that take values of specific types and there are rules as to how "
"to spell them."
msgstr ""

#. type: Labeled list
#: ../Documentation/config.txt:238
#, no-wrap
msgid "boolean"
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:243
msgid ""
"When a variable is said to take a boolean value, many synonyms are accepted "
"for 'true' and 'false'; these are all case-insensitive."
msgstr ""

#. type: Labeled list
#: ../Documentation/config.txt:244
#, no-wrap
msgid "true"
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:245
msgid "Boolean true literals are `yes`, `on`, `true`,"
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:247
#, no-wrap
msgid ""
"and `1`.  Also, a variable defined without `= <value>`\n"
"is taken as true.\n"
msgstr ""

#. type: Labeled list
#: ../Documentation/config.txt:248
#, no-wrap
msgid "false"
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:249
msgid "Boolean false literals are `no`, `off`, `false`,"
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:250
#, no-wrap
msgid "`0` and the empty string.\n"
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:254
msgid ""
"When converting a value to its canonical form using the `--type=bool` type "
"specifier, 'git config' will ensure that the output is \"true\" or \"false\" "
"(spelled in lowercase)."
msgstr ""

#. type: Labeled list
#: ../Documentation/config.txt:255
#, no-wrap
msgid "integer"
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:259
msgid ""
"The value for many variables that specify various sizes can be suffixed with "
"`k`, `M`,... to mean \"scale the number by 1024\", \"by 1024x1024\", etc."
msgstr ""

#. type: Labeled list
#: ../Documentation/config.txt:260
#, no-wrap
msgid "color"
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:264
msgid ""
"The value for a variable that takes a color is a list of colors (at most "
"two, one for foreground and one for background)  and attributes (as many as "
"you want), separated by spaces."
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:270
msgid ""
"The basic colors accepted are `normal`, `black`, `red`, `green`, `yellow`, "
"`blue`, `magenta`, `cyan` and `white`.  The first color given is the "
"foreground; the second is the background.  All the basic colors except "
"`normal` have a bright variant that can be specified by prefixing the color "
"with `bright`, like `brightred`."
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:275
msgid ""
"Colors may also be given as numbers between 0 and 255; these use ANSI "
"256-color mode (but note that not all terminals may support this).  If your "
"terminal supports it, you may also specify 24-bit RGB values as hex, like "
"`#ff0ab3`."
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:282
msgid ""
"The accepted attributes are `bold`, `dim`, `ul`, `blink`, `reverse`, "
"`italic`, and `strike` (for crossed-out or \"strikethrough\" letters).  The "
"position of any attributes with respect to the colors (before, after, or in "
"between), doesn't matter. Specific attributes may be turned off by prefixing "
"them with `no` or `no-` (e.g., `noreverse`, `no-ul`, etc)."
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:285
msgid ""
"An empty color string produces no color effect at all. This can be used to "
"avoid coloring specific elements without disabling color entirely."
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:294
msgid ""
"For git's pre-defined color slots, the attributes are meant to be reset at "
"the beginning of each item in the colored output. So setting "
"`color.decorate.branch` to `black` will paint that branch name in a plain "
"`black`, even if the previous thing on the same output line (e.g.  opening "
"parenthesis before the list of branch names in `log --decorate` output) is "
"set to be painted with `bold` or some other attribute.  However, custom log "
"formats may do more complicated and layered coloring, and the negated forms "
"may be useful there."
msgstr ""

#. type: Labeled list
#: ../Documentation/config.txt:295
#, no-wrap
msgid "pathname"
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:301
msgid ""
"A variable that takes a pathname value can be given a string that begins "
"with \"`~/`\" or \"`~user/`\", and the usual tilde expansion happens to such "
"a string: `~/` is expanded to the value of `$HOME`, and `~user/` to the "
"specified user's home directory."
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:310
msgid ""
"If a path starts with `%(prefix)/`, the remainder is interpreted as a path "
"relative to Git's \"runtime prefix\", i.e. relative to the location where "
"Git itself was installed. For example, `%(prefix)/bin/` refers to the "
"directory in which the Git executable itself lives. If Git was compiled "
"without runtime prefix support, the compiled-in prefix will be subsituted "
"instead. In the unlikely event that a literal path needs to be specified "
"that should _not_ be expanded, it needs to be prefixed by `./`, like so: "
"`./%(prefix)/bin`."
msgstr ""

#. type: Title ~
#: ../Documentation/config.txt:313
#, no-wrap
msgid "Variables"
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:318
msgid ""
"Note that this list is non-comprehensive and not necessarily complete.  For "
"command-specific variables, you will find a more detailed description in the "
"appropriate manual page."
msgstr ""

#. type: Plain text
#: ../Documentation/config.txt:323
msgid ""
"Other git-related tools may and do use their own variables.  When inventing "
"new variables for use in your own tool, make sure their names do not "
"conflict with those that are used by Git itself and other popular tools, and "
"describe them in your documentation."
msgstr ""
