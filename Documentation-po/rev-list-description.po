# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-10-01 00:25+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: ../Documentation/rev-list-description.txt:5
msgid ""
"List commits that are reachable by following the `parent` links from the "
"given commit(s), but exclude commits that are reachable from the one(s)  "
"given with a '{caret}' in front of them.  The output is given in reverse "
"chronological order by default."
msgstr ""

#. type: Plain text
#: ../Documentation/rev-list-description.txt:12
msgid ""
"You can think of this as a set operation. Commits reachable from any of the "
"commits given on the command line form a set, and then commits reachable "
"from any of the ones given with '{caret}' in front are subtracted from that "
"set.  The remaining commits are what comes out in the command's output.  "
"Various other options and paths parameters can be used to further limit the "
"result."
msgstr ""

#. type: Plain text
#: ../Documentation/rev-list-description.txt:14
msgid "Thus, the following command:"
msgstr ""

#. type: delimited block -
#: ../Documentation/rev-list-description.txt:18
#, no-wrap
msgid "$ git rev-list foo bar ^baz\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/rev-list-description.txt:23
#, no-wrap
msgid "$ git log foo bar ^baz\n"
msgstr ""

#. type: Plain text
#: ../Documentation/rev-list-description.txt:28
msgid ""
"means \"list all the commits which are reachable from 'foo' or 'bar', but "
"not from 'baz'\"."
msgstr ""

#. type: Plain text
#: ../Documentation/rev-list-description.txt:32
msgid ""
"A special notation \"'<commit1>'..'<commit2>'\" can be used as a short-hand "
"for \"^'<commit1>' '<commit2>'\". For example, either of the following may "
"be used interchangeably:"
msgstr ""

#. type: delimited block -
#: ../Documentation/rev-list-description.txt:37
#, no-wrap
msgid ""
"$ git rev-list origin..HEAD\n"
"$ git rev-list HEAD ^origin\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/rev-list-description.txt:43
#, no-wrap
msgid ""
"$ git log origin..HEAD\n"
"$ git log HEAD ^origin\n"
msgstr ""

#. type: Plain text
#: ../Documentation/rev-list-description.txt:49
msgid ""
"Another special notation is \"'<commit1>'...'<commit2>'\" which is useful "
"for merges.  The resulting set of commits is the symmetric difference "
"between the two operands.  The following two commands are equivalent:"
msgstr ""

#. type: delimited block -
#: ../Documentation/rev-list-description.txt:54
#, no-wrap
msgid ""
"$ git rev-list A B --not $(git merge-base --all A B)\n"
"$ git rev-list A...B\n"
msgstr ""

#. type: delimited block -
#: ../Documentation/rev-list-description.txt:60
#, no-wrap
msgid ""
"$ git log A B --not $(git merge-base --all A B)\n"
"$ git log A...B\n"
msgstr ""
