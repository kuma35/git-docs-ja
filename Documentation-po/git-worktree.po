# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 0.0\n"
"POT-Creation-Date: 2022-09-24 21:41+0900\n"
"PO-Revision-Date: 2022-03-29 17:20+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/git-worktree.txt:2
#, no-wrap
msgid "git-worktree(1)"
msgstr "git-worktree(1)"

#. type: Title -
#: ../Documentation-sedout/git-worktree.txt:5
#, no-wrap
msgid "NAME"
msgstr "NAME"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:7
msgid "git-worktree - Manage multiple working trees"
msgstr "git-worktree - 複数の作業ツリーを管理します"

#. type: Title -
#: ../Documentation-sedout/git-worktree.txt:10
#, no-wrap
msgid "SYNOPSIS"
msgstr "SYNOPSIS"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:20
#, fuzzy, no-wrap
#| msgid ""
#| "'git worktree add' [-f] [--detach] [--checkout] [--lock [--reason <string>]] [-b <new-branch>] <path> [<commit-ish>]\n"
#| "'git worktree list' [--porcelain]\n"
#| "'git worktree lock' [--reason <string>] <worktree>\n"
#| "'git worktree move' <worktree> <new-path>\n"
#| "'git worktree prune' [-n] [-v] [--expire <expire>]\n"
#| "'git worktree remove' [-f] <worktree>\n"
#| "'git worktree repair' [<path>...]\n"
#| "'git worktree unlock' <worktree>\n"
msgid ""
"'git worktree add' [-f] [--detach] [--checkout] [--lock [--reason <string>]] [-b <new-branch>] <path> [<commit-ish>]\n"
"'git worktree list' [-v | --porcelain [-z]]\n"
"'git worktree lock' [--reason <string>] <worktree>\n"
"'git worktree move' <worktree> <new-path>\n"
"'git worktree prune' [-n] [-v] [--expire <expire>]\n"
"'git worktree remove' [-f] <worktree>\n"
"'git worktree repair' [<path>...]\n"
"'git worktree unlock' <worktree>\n"
msgstr ""
"'git worktree add' [-f] [--detach] [--checkout] [--lock [--reason <string>]] [-b <new-branch>] <path> [<commit-ish>]\n"
"'git worktree list' [--porcelain]\n"
"'git worktree lock' [--reason <string>] <worktree>\n"
"'git worktree move' <worktree> <new-path>\n"
"'git worktree prune' [-n] [-v] [--expire <expire>]\n"
"'git worktree remove' [-f] <worktree>\n"
"'git worktree repair' [<path>...]\n"
"'git worktree unlock' <worktree>\n"

#. type: Title -
#: ../Documentation-sedout/git-worktree.txt:22
#, no-wrap
msgid "DESCRIPTION"
msgstr "DESCRIPTION"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:25
msgid "Manage multiple working trees attached to the same repository."
msgstr "同一のリポジトリに接続されている複数の作業ツリーを管理します。"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:31
#, fuzzy
#| msgid ""
#| "A git repository can support multiple working trees, allowing you to "
#| "check out more than one branch at a time.  With `git worktree add` a new "
#| "working tree is associated with the repository.  This new working tree is "
#| "called a \"linked working tree\" as opposed to the \"main working tree\" "
#| "prepared by linkgit:git-init[1] or linkgit:git-clone[1].  A repository "
#| "has one main working tree (if it's not a bare repository) and zero or "
#| "more linked working trees. When you are done with a linked working tree, "
#| "remove it with `git worktree remove`."
msgid ""
"A git repository can support multiple working trees, allowing you to check "
"out more than one branch at a time.  With `git worktree add` a new working "
"tree is associated with the repository, along with additional metadata that "
"differentiates that working tree from others in the same repository.  The "
"working tree, along with this metadata, is called a \"worktree\"."
msgstr ""
"gitリポジトリは複数の作業ツリーをサポートできるため、一度に複数のブランチを"
"チェックアウトできます。`git worktree add` を使用すると、新しい作業ツリーがリ"
"ポジトリに関連付けられます。この新しい作業ツリーは、linkgit:git-init[1] また"
"は linkgit:git-clone[1] によって作成された「メイン作業ツリー」(main working "
"tree)とは対照的に、「リンクされた作業ツリー」(linked working tree)と呼ばれま"
"す。リポジトリには、1つのメイン作業ツリー(ベアリポジトリでない場合)と、0個以"
"上のリンクされた作業ツリーがあります。あなたがリンクされた作業ツリーを使い終"
"わったら、 `git worktree remove` で削除します。"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:37
#, fuzzy
#| msgid ""
#| "A git repository can support multiple working trees, allowing you to "
#| "check out more than one branch at a time.  With `git worktree add` a new "
#| "working tree is associated with the repository.  This new working tree is "
#| "called a \"linked working tree\" as opposed to the \"main working tree\" "
#| "prepared by linkgit:git-init[1] or linkgit:git-clone[1].  A repository "
#| "has one main working tree (if it's not a bare repository) and zero or "
#| "more linked working trees. When you are done with a linked working tree, "
#| "remove it with `git worktree remove`."
msgid ""
"This new worktree is called a \"linked worktree\" as opposed to the \"main "
"worktree\" prepared by linkgit:git-init[1] or linkgit:git-clone[1].  A "
"repository has one main worktree (if it's not a bare repository) and zero or "
"more linked worktrees. When you are done with a linked worktree, remove it "
"with `git worktree remove`."
msgstr ""
"gitリポジトリは複数の作業ツリーをサポートできるため、一度に複数のブランチを"
"チェックアウトできます。`git worktree add` を使用すると、新しい作業ツリーがリ"
"ポジトリに関連付けられます。この新しい作業ツリーは、linkgit:git-init[1] また"
"は linkgit:git-clone[1] によって作成された「メイン作業ツリー」(main working "
"tree)とは対照的に、「リンクされた作業ツリー」(linked working tree)と呼ばれま"
"す。リポジトリには、1つのメイン作業ツリー(ベアリポジトリでない場合)と、0個以"
"上のリンクされた作業ツリーがあります。あなたがリンクされた作業ツリーを使い終"
"わったら、 `git worktree remove` で削除します。"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:49
#, fuzzy
#| msgid ""
#| "In its simplest form, `git worktree add <path>` automatically creates a "
#| "new branch whose name is the final component of `<path>`, which is "
#| "convenient if you plan to work on a new topic. For instance, `git "
#| "worktree add ../hotfix` creates new branch `hotfix` and checks it out at "
#| "path `../hotfix`. To instead work on an existing branch in a new working "
#| "tree, use `git worktree add <path> <branch>`. On the other hand, if you "
#| "just plan to make some experimental changes or do testing without "
#| "disturbing existing development, it is often convenient to create a "
#| "'throwaway' working tree not associated with any branch. For instance, "
#| "`git worktree add -d <path>` creates a new working tree with a detached "
#| "`HEAD` at the same commit as the current branch."
msgid ""
"In its simplest form, `git worktree add <path>` automatically creates a new "
"branch whose name is the final component of `<path>`, which is convenient if "
"you plan to work on a new topic. For instance, `git worktree add ../hotfix` "
"creates new branch `hotfix` and checks it out at path `../hotfix`. To "
"instead work on an existing branch in a new worktree, use `git worktree add "
"<path> <branch>`. On the other hand, if you just plan to make some "
"experimental changes or do testing without disturbing existing development, "
"it is often convenient to create a 'throwaway' worktree not associated with "
"any branch. For instance, `git worktree add -d <path>` creates a new "
"worktree with a detached `HEAD` at the same commit as the current branch."
msgstr ""
"最も単純な形式では、 `git worktree add <path>` は、名前が `<path>` の最後のコ"
"ンポーネントである新しいブランチを自動的に作成します。これは、あなたが新しい"
"トピックで作業する場合に便利です。たとえば、 `git worktree add ../hotfix` "
"は、新しいブランチ `hotfix` を作成し、パス `../hotfix` でチェックアウトしま"
"す。代わりに、既存のブランチの新しい作業ツリーで作業するには、 `git worktree "
"add <path> <branch>` を使用します。一方、既存の開発を妨げることなく実験的な変"
"更やテストを行う場合は、ブランチに関連付けられていない「使い捨て」の作業ツ"
"リーを作成すると便利なことがよくあります。たとえば、 `git worktree add -d "
"<path>` は、現在のブランチと同じコミットで、切り離された`HEAD`(detached HEAD)"
"を持つ新しい作業ツリーを作成します。"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:56
#, fuzzy
#| msgid ""
#| "If a working tree is deleted without using `git worktree remove`, then "
#| "its associated administrative files, which reside in the repository (see "
#| "\"DETAILS\" below), will eventually be removed automatically (see `gc."
#| "worktreePruneExpire` in linkgit:git-config[1]), or you can run `git "
#| "worktree prune` in the main or any linked working tree to clean up any "
#| "stale administrative files."
msgid ""
"If a working tree is deleted without using `git worktree remove`, then its "
"associated administrative files, which reside in the repository (see "
"\"DETAILS\" below), will eventually be removed automatically (see `gc."
"worktreePruneExpire` in linkgit:git-config[1]), or you can run `git worktree "
"prune` in the main or any linked worktree to clean up any stale "
"administrative files."
msgstr ""
"`git worktree remove` を使用せずに作業ツリーを削除すると、リポジトリにある関"
"連する管理ファイル(後述の「DETAILS」参照)が最終的には自動的に削除されます"
"(linkgit:git-config[1] の `gc.worktreePruneExpire` 参照)。または、メインまた"
"はリンクされた作業ツリーで、古い管理ファイルをクリーンアップするために `git "
"worktree prune` を実行できます。"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:62
#, fuzzy
#| msgid ""
#| "If a linked working tree is stored on a portable device or network share "
#| "which is not always mounted, you can prevent its administrative files "
#| "from being pruned by issuing the `git worktree lock` command, optionally "
#| "specifying `--reason` to explain why the working tree is locked."
msgid ""
"If the working tree for a linked worktree is stored on a portable device or "
"network share which is not always mounted, you can prevent its "
"administrative files from being pruned by issuing the `git worktree lock` "
"command, optionally specifying `--reason` to explain why the worktree is "
"locked."
msgstr ""
"リンクされた作業ツリーが、常にマウントされているとは限らないポータブルデバイ"
"スまたはネットワーク共有に保存されている場合、`git worktree lock` コマンド"
"を、オプションで `--reason`を指定して、作業ツリーがロックされている理由を説明"
"して発行することで、管理ファイルが刈り込み(prune)されないようにすることができ"
"ます。"

#. type: Title -
#: ../Documentation-sedout/git-worktree.txt:64
#, no-wrap
msgid "COMMANDS"
msgstr "COMMANDS"

#. type: Labeled list
#: ../Documentation-sedout/git-worktree.txt:65
#, no-wrap
msgid "add <path> [<commit-ish>]"
msgstr "add <path> [<commit-ish>]"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:71
#, fuzzy
#| msgid ""
#| "Create `<path>` and checkout `<commit-ish>` into it. The new working "
#| "directory is linked to the current repository, sharing everything except "
#| "working directory specific files such as `HEAD`, `index`, etc. As a "
#| "convenience, `<commit-ish>` may be a bare \"`-`\", which is synonymous "
#| "with `@{-1}`."
msgid ""
"Create a worktree at `<path>` and checkout `<commit-ish>` into it. The new "
"worktree is linked to the current repository, sharing everything except per-"
"worktree files such as `HEAD`, `index`, etc. As a convenience, `<commit-"
"ish>` may be a bare \"`-`\", which is synonymous with `@{-1}`."
msgstr ""
"`<path>` を作成し、それに `<commit-ish>` をチェックアウトします。 新しい作業"
"ディレクトリは現在のリポジトリにリンクされ、 `HEAD` や `index` などの作業ディ"
"レクトリ固有のファイルを除くすべてを共有します。便宜上、 `<commit-ish>` は裸"
"の `-` である場合があり、これは `@{-1}` と同義です。"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:76
msgid ""
"If `<commit-ish>` is a branch name (call it `<branch>`) and is not found, "
"and neither `-b` nor `-B` nor `--detach` are used, but there does exist a "
"tracking branch in exactly one remote (call it `<remote>`)  with a matching "
"name, treat as equivalent to:"
msgstr ""
"上記 `<commit-ish>` がブランチ名(以下 `<branch>` とします)で見つからず、 `-"
"b` や `-B` や `--detach` のいずれも使用されていないが、名前が一致する1つのリ"
"モート(以下 `<remote>` とします)には追跡ブランチが存在する場合、上記は以下と"
"同等です:"

#. type: delimited block -
#: ../Documentation-sedout/git-worktree.txt:79
#, no-wrap
msgid "$ git worktree add --track -b <branch> <path> <remote>/<branch>\n"
msgstr "$ git worktree add --track -b <branch> <path> <remote>/<branch>\n"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:89
msgid ""
"If the branch exists in multiple remotes and one of them is named by the "
"`checkout.defaultRemote` configuration variable, we'll use that one for the "
"purposes of disambiguation, even if the `<branch>` isn't unique across all "
"remotes. Set it to e.g. `checkout.defaultRemote=origin` to always checkout "
"remote branches from there if `<branch>` is ambiguous but exists on the "
"`origin` remote. See also `checkout.defaultRemote` in linkgit:git-config[1]."
msgstr ""
"ブランチが複数のリモートに存在し、そのうちの1つが `checkout.defaultRemote` 設"
"定変数によって名付けられた場合、 `<branch>` がすべてのリモートでユニークでな"
"くても、曖昧さをなくすためにその1つを使用します。例えば、 `checkout."
"defaultRemote=origin` と設定すると、 `<branch>` があいまいで、かつ `origin` "
"リモートに存在する場合、常にそこからリモートブランチをチェックアウトすること"
"ができます。linkgit:git-config[1] にある `checkout.defaultRemote` も参照して"
"ください。"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:97
#, fuzzy
#| msgid ""
#| "If `<commit-ish>` is omitted and neither `-b` nor `-B` nor `--detach` "
#| "used, then, as a convenience, the new working tree is associated with a "
#| "branch (call it `<branch>`) named after `$(basename <path>)`.  If "
#| "`<branch>` doesn't exist, a new branch based on `HEAD` is automatically "
#| "created as if `-b <branch>` was given.  If `<branch>` does exist, it will "
#| "be checked out in the new working tree, if it's not checked out anywhere "
#| "else, otherwise the command will refuse to create the working tree "
#| "(unless `--force` is used)."
msgid ""
"If `<commit-ish>` is omitted and neither `-b` nor `-B` nor `--detach` used, "
"then, as a convenience, the new worktree is associated with a branch (call "
"it `<branch>`) named after `$(basename <path>)`.  If `<branch>` doesn't "
"exist, a new branch based on `HEAD` is automatically created as if `-b "
"<branch>` was given.  If `<branch>` does exist, it will be checked out in "
"the new worktree, if it's not checked out anywhere else, otherwise the "
"command will refuse to create the worktree (unless `--force` is used)."
msgstr ""
"`<commit-ish>` が省略され、 `-b` も `-B` も `--detach` も使用されていない場"
"合、便宜上、新しい作業ツリーは `$(basename <path>)` にちなんで名付けらたブラ"
"ンチ(`<branch>` とします)に関連付けられます。`<branch>` が存在しない場合、 `-"
"b <branch>` が指定されたかのように、 `HEAD` に基づく新しいブランチが自動的に"
"作成されます。`<branch>`が存在する場合で、他の場所でチェックアウトされていな"
"い場合は、新しい作業ツリーでチェックアウトされます。存在しない場合、コマンド"
"は作業ツリーの作成を拒否します(`--force` が使用されている場合を除く)。"

#. type: Labeled list
#: ../Documentation-sedout/git-worktree.txt:98
#, no-wrap
msgid "list"
msgstr "list"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:106
#, fuzzy
#| msgid ""
#| "List details of each working tree.  The main working tree is listed "
#| "first, followed by each of the linked working trees.  The output details "
#| "include whether the working tree is bare, the revision currently checked "
#| "out, the branch currently checked out (or \"detached HEAD\" if none), "
#| "\"locked\" if the worktree is locked, \"prunable\" if the worktree can be "
#| "pruned by `prune` command."
msgid ""
"List details of each worktree.  The main worktree is listed first, followed "
"by each of the linked worktrees.  The output details include whether the "
"worktree is bare, the revision currently checked out, the branch currently "
"checked out (or \"detached HEAD\" if none), \"locked\" if the worktree is "
"locked, \"prunable\" if the worktree can be pruned by the `prune` command."
msgstr ""
"各作業ツリーの詳細を一覧表示します。 メインの作業ツリーが最初にリストされ、次"
"にリンクされた各作業ツリーがリストされます。 出力の詳細に含まれるのは、作業ツ"
"リーがベア(bare)であるかどうか、現在チェックアウトされているリビジョン、現在"
"チェックアウトされているブランチ(または、存在しない場合は「切り離されたHEAD」"
"(detached HEAD))、ワークツリーがロックされている場合は「locked」、 `prune` コ"
"マンドによってワークツリーを刈り込みできる場合は「prunable」です。"

#. type: Labeled list
#: ../Documentation-sedout/git-worktree.txt:107
#, no-wrap
msgid "lock"
msgstr "lock"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:113
#, fuzzy
#| msgid ""
#| "If a working tree is on a portable device or network share which is not "
#| "always mounted, lock it to prevent its administrative files from being "
#| "pruned automatically. This also prevents it from being moved or deleted. "
#| "Optionally, specify a reason for the lock with `--reason`."
msgid ""
"If a worktree is on a portable device or network share which is not always "
"mounted, lock it to prevent its administrative files from being pruned "
"automatically. This also prevents it from being moved or deleted.  "
"Optionally, specify a reason for the lock with `--reason`."
msgstr ""
"作業ツリーが常にマウントされているとは限らないポータブルデバイスまたはネット"
"ワーク共有上にある場合は、管理ファイルが自動的に刈り込み(prune)されないよう"
"に、ツリーをロックします。 これにより、移動や削除も防止されます。 オプション"
"で、`--reason` を使用してロックの理由を指定します。"

#. type: Labeled list
#: ../Documentation-sedout/git-worktree.txt:114
#, no-wrap
msgid "move"
msgstr "move"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:120
#, fuzzy
#| msgid ""
#| "Move a working tree to a new location. Note that the main working tree or "
#| "linked working trees containing submodules cannot be moved with this "
#| "command. (The `git worktree repair` command, however, can reestablish the "
#| "connection with linked working trees if you move the main working tree "
#| "manually.)"
msgid ""
"Move a worktree to a new location. Note that the main worktree or linked "
"worktrees containing submodules cannot be moved with this command. (The `git "
"worktree repair` command, however, can reestablish the connection with "
"linked worktrees if you move the main worktree manually.)"
msgstr ""
"作業ツリーを新しい場所に移動します。このコマンドでは、メインの作業ツリーまた"
"はサブモジュールを含むリンクされた作業ツリーを移動できないことに注意してくだ"
"さい。(ただし、 `git worktree repair` コマンドを使用すると、メインの作業ツ"
"リーを手動で移動した場合に、リンクされた作業ツリーとの接続を再確立できます。)"

#. type: Labeled list
#: ../Documentation-sedout/git-worktree.txt:121
#, no-wrap
msgid "prune"
msgstr "prune"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:124
#, fuzzy
#| msgid "Prune working tree information in `$GIT_DIR/worktrees`."
msgid "Prune worktree information in `$GIT_DIR/worktrees`."
msgstr "`$GIT_DIR/worktrees` の作業ツリー情報を刈り込みます(prune)。"

#. type: Labeled list
#: ../Documentation-sedout/git-worktree.txt:125
#, no-wrap
msgid "remove"
msgstr "remove"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:131
#, fuzzy
#| msgid ""
#| "Remove a working tree. Only clean working trees (no untracked files and "
#| "no modification in tracked files) can be removed. Unclean working trees "
#| "or ones with submodules can be removed with `--force`. The main working "
#| "tree cannot be removed."
msgid ""
"Remove a worktree. Only clean worktrees (no untracked files and no "
"modification in tracked files) can be removed. Unclean worktrees or ones "
"with submodules can be removed with `--force`. The main worktree cannot be "
"removed."
msgstr ""
"作業ツリーを削除します。削除できるのは、クリーンな作業ツリー(追跡してないファ"
"イルが無く、かつ、追跡ファイルの変更が無い場合)のみです。汚れた作業ツリーまた"
"はサブモジュールのあるツリーは、 `--force` を使用して削除できます。メインの作"
"業ツリーは削除できません。"

#. type: Labeled list
#: ../Documentation-sedout/git-worktree.txt:132
#, no-wrap
msgid "repair [<path>...]"
msgstr "repair [<path>...]"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:136
#, fuzzy
#| msgid ""
#| "Repair working tree administrative files, if possible, if they have "
#| "become corrupted or outdated due to external factors."
msgid ""
"Repair worktree administrative files, if possible, if they have become "
"corrupted or outdated due to external factors."
msgstr ""
"可能であれば、外部要因によって破損または古くなった作業ツリー管理ファイルを修"
"復します。"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:141
#, fuzzy
#| msgid ""
#| "For instance, if the main working tree (or bare repository) is moved, "
#| "linked working trees will be unable to locate it. Running `repair` in the "
#| "main working tree will reestablish the connection from linked working "
#| "trees back to the main working tree."
msgid ""
"For instance, if the main worktree (or bare repository) is moved, linked "
"worktrees will be unable to locate it. Running `repair` in the main worktree "
"will reestablish the connection from linked worktrees back to the main "
"worktree."
msgstr ""
"たとえば、メインの作業ツリー(またはベアリポジトリ(bare repository))を移動する"
"と、リンクされた作業ツリーはそれを見つけることができなくなります。メインの作"
"業ツリーで `repair` を実行すると、リンクされた作業ツリーからメインの作業ツ"
"リーへの接続が再確立されます。"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:148
#, fuzzy
#| msgid ""
#| "Similarly, if a linked working tree is moved without using `git worktree "
#| "move`, the main working tree (or bare repository) will be unable to "
#| "locate it. Running `repair` within the recently-moved working tree will "
#| "reestablish the connection. If multiple linked working trees are moved, "
#| "running `repair` from any working tree with each tree's new `<path>` as "
#| "an argument, will reestablish the connection to all the specified paths."
msgid ""
"Similarly, if the working tree for a linked worktree is moved without using "
"`git worktree move`, the main worktree (or bare repository) will be unable "
"to locate it. Running `repair` within the recently-moved worktree will "
"reestablish the connection. If multiple linked worktrees are moved, running "
"`repair` from any worktree with each tree's new `<path>` as an argument, "
"will reestablish the connection to all the specified paths."
msgstr ""
"同様に、リンクされた作業ツリーが `git worktree move` を使用せずに移動された場"
"合、メインの作業ツリー(またはベアリポジトリ(bare repository))はそれを見つける"
"ことができません。直近に移動した作業ツリー内で `repair` を実行すると、接続が"
"再確立されます。リンクされた作業ツリーが複数移動された場合、各作業ツリーの新"
"しい `<path>` を引数として任意の作業ツリーから `repair` を実行すると、指定さ"
"れたすべてのパスへの接続が再確立されます。"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:153
#, fuzzy
#| msgid ""
#| "If both the main working tree and linked working trees have been moved "
#| "manually, then running `repair` in the main working tree and specifying "
#| "the new `<path>` of each linked working tree will reestablish all "
#| "connections in both directions."
msgid ""
"If both the main worktree and linked worktrees have been moved manually, "
"then running `repair` in the main worktree and specifying the new `<path>` "
"of each linked worktree will reestablish all connections in both directions."
msgstr ""
"メイン作業ツリーとリンクされた作業ツリーの両方が手動で移動された場合、メイン"
"作業ツリーで `repair` を実行し、リンクされた各作業ツリーの新しい `<path>` を"
"指定すると、両方向のすべての接続が再確立されます。"

#. type: Labeled list
#: ../Documentation-sedout/git-worktree.txt:154
#, no-wrap
msgid "unlock"
msgstr "unlock"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:157
#, fuzzy
#| msgid "Unlock a working tree, allowing it to be pruned, moved or deleted."
msgid "Unlock a worktree, allowing it to be pruned, moved or deleted."
msgstr ""
"作業ツリーのロックを解除(unlock)して、刈り込(prune)みまたは移動(move)または削"
"除(delete)できるようにします。"

#. type: Title -
#: ../Documentation-sedout/git-worktree.txt:159
#, no-wrap
msgid "OPTIONS"
msgstr "OPTIONS"

#. type: Labeled list
#: ../Documentation-sedout/git-worktree.txt:161
#, no-wrap
msgid "`-f`"
msgstr "`-f`"

#. type: Labeled list
#: ../Documentation-sedout/git-worktree.txt:162
#, no-wrap
msgid "`--force`"
msgstr "`--force`"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:169
#, fuzzy
#| msgid ""
#| "By default, `add` refuses to create a new working tree when `<commit-"
#| "ish>` is a branch name and is already checked out by another working "
#| "tree, or if `<path>` is already assigned to some working tree but is "
#| "missing (for instance, if `<path>` was deleted manually). This option "
#| "overrides these safeguards. To add a missing but locked working tree "
#| "path, specify `--force` twice."
msgid ""
"By default, `add` refuses to create a new worktree when `<commit-ish>` is a "
"branch name and is already checked out by another worktree, or if `<path>` "
"is already assigned to some worktree but is missing (for instance, if "
"`<path>` was deleted manually). This option overrides these safeguards. To "
"add a missing but locked worktree path, specify `--force` twice."
msgstr ""
"デフォルトでは、`<commit-ish>` がブランチ名であり、別の作業ツリーによってすで"
"にチェックアウトされている場合、または `<path>` がすでに作業ツリーに割り当て"
"られているが欠落している場合(たとえば、 `<path>`が手動で削除された場合)、"
"`add` は新しい作業ツリーの作成を拒否します。このオプションは、これらの安全装"
"置(safeguards)をオーバーライドします。欠落しているがロックされている作業ツ"
"リーパスを追加するには、`--force` を2回指定します。"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:174
#, fuzzy
#| msgid ""
#| "`move` refuses to move a locked working tree unless `--force` is "
#| "specified twice. If the destination is already assigned to some other "
#| "working tree but is missing (for instance, if `<new-path>` was deleted "
#| "manually), then `--force` allows the move to proceed; use `--force` twice "
#| "if the destination is locked."
msgid ""
"`move` refuses to move a locked worktree unless `--force` is specified "
"twice. If the destination is already assigned to some other worktree but is "
"missing (for instance, if `<new-path>` was deleted manually), then `--force` "
"allows the move to proceed; use `--force` twice if the destination is locked."
msgstr ""
"`--force` が2回指定されていない限り、 `move` はロックされた作業ツリーの移動を"
"拒否します。移動先がすでに他の作業ツリーに割り当てられているが欠落している場"
"合(たとえば、 `<new-path>` が手動で削除された場合)は、 `--force` は移動を続行"
"できます。移動先がロックされている場合は、 `--force` を2回使用します。"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:177
#, fuzzy
#| msgid ""
#| "`remove` refuses to remove an unclean working tree unless `--force` is "
#| "used.  To remove a locked working tree, specify `--force` twice."
msgid ""
"`remove` refuses to remove an unclean worktree unless `--force` is used.  To "
"remove a locked worktree, specify `--force` twice."
msgstr ""
"`--force` が使用されていない限り、 `remove` は汚れた作業ツリー(unclean "
"working tree)の削除を拒否します。ロックされた作業ツリーを削除するには、`--"
"force` を2回指定します。"

#. type: Labeled list
#: ../Documentation-sedout/git-worktree.txt:178
#, no-wrap
msgid "`-b <new-branch>`"
msgstr "`-b <new-branch>`"

#. type: Labeled list
#: ../Documentation-sedout/git-worktree.txt:179
#, no-wrap
msgid "`-B <new-branch>`"
msgstr "`-B <new-branch>`"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:186
#, fuzzy
#| msgid ""
#| "With `add`, create a new branch named `<new-branch>` starting at `<commit-"
#| "ish>`, and check out `<new-branch>` into the new working tree.  If "
#| "`<commit-ish>` is omitted, it defaults to `HEAD`.  By default, `-b` "
#| "refuses to create a new branch if it already exists. `-B` overrides this "
#| "safeguard, resetting `<new-branch>` to `<commit-ish>`."
msgid ""
"With `add`, create a new branch named `<new-branch>` starting at `<commit-"
"ish>`, and check out `<new-branch>` into the new worktree.  If `<commit-"
"ish>` is omitted, it defaults to `HEAD`.  By default, `-b` refuses to create "
"a new branch if it already exists. `-B` overrides this safeguard, resetting "
"`<new-branch>` to `<commit-ish>`."
msgstr ""
"`add` を使用して、 `<commit-ish>` から開始する `<new-branch>` という名前の新"
"しいブランチを作成し、 `<new-branch>` を新しい作業ツリーにチェックアウトしま"
"す。 `<commit-ish>` を省略すると、デフォルトで `HEAD` になります。 デフォルト"
"では、 `-b` は、新しいブランチがすでに存在する場合、それを作成することを拒否"
"します。 `-B` はこの安全装置をオーバーライドし、 `<new-branch>` を `<commit-"
"ish>` にリセットします。"

#. type: Labeled list
#: ../Documentation-sedout/git-worktree.txt:187
#, no-wrap
msgid "`-d`"
msgstr "`-d`"

#. type: Labeled list
#: ../Documentation-sedout/git-worktree.txt:188
#, no-wrap
msgid "`--detach`"
msgstr "`--detach`"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:191
#, fuzzy
#| msgid ""
#| "With `add`, detach `HEAD` in the new working tree. See \"DETACHED HEAD\" "
#| "in linkgit:git-checkout[1]."
msgid ""
"With `add`, detach `HEAD` in the new worktree. See \"DETACHED HEAD\" in "
"linkgit:git-checkout[1]."
msgstr ""
"`add` を使用して、新しい作業ツリーで `HEAD` を切り離します(detach)。 linkgit:"
"git-checkout[1] の「DETACHED HEAD」を参照してください。"

#. type: Labeled list
#: ../Documentation-sedout/git-worktree.txt:192
#, no-wrap
msgid "`--[no-]checkout`"
msgstr "`--[no-]checkout`"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:197
msgid ""
"By default, `add` checks out `<commit-ish>`, however, `--no-checkout` can be "
"used to suppress checkout in order to make customizations, such as "
"configuring sparse-checkout. See \"Sparse checkout\" in linkgit:git-read-"
"tree[1]."
msgstr ""
"デフォルトでは、 `add` は `<commit-ish>` をチェックアウトしますが、 `--no-"
"checkout` を使用して、スパースチェックアウト(suppress checkout)の構成などのカ"
"スタマイズを行うためにチェックアウトを抑制することができます。 linkgit:git-"
"read-tree[1] の「Sparse checkout」を参照してください。"

#. type: Labeled list
#: ../Documentation-sedout/git-worktree.txt:198
#, no-wrap
msgid "`--[no-]guess-remote`"
msgstr "`--[no-]guess-remote`"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:204
msgid ""
"With `worktree add <path>`, without `<commit-ish>`, instead of creating a "
"new branch from `HEAD`, if there exists a tracking branch in exactly one "
"remote matching the basename of `<path>`, base the new branch on the remote-"
"tracking branch, and mark the remote-tracking branch as \"upstream\" from "
"the new branch."
msgstr ""
"`<commit-ish>` を伴わずに `worktree add <path>` を使用し、 `HEAD` から新しい"
"ブランチを作成する代わりに、 `<path>` のベース名に一致する追跡ブランチが１つ"
"リモートにだけ存在する場合、新しいブランチをそのリモート追跡ブランチに基づい"
"て作成し、そのリモート追跡ブランチを新しいブランチの「アップストリーム」とし"
"てマークします。"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:207
msgid ""
"This can also be set up as the default behaviour by using the `worktree."
"guessRemote` config option."
msgstr ""
"これは、 `worktree.guessRemote` 構成オプションを使用してデフォルトの動作とし"
"て設定することもできます。"

#. type: Labeled list
#: ../Documentation-sedout/git-worktree.txt:208
#, no-wrap
msgid "`--[no-]track`"
msgstr "`--[no-]track`"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:213
msgid ""
"When creating a new branch, if `<commit-ish>` is a branch, mark it as "
"\"upstream\" from the new branch.  This is the default if `<commit-ish>` is "
"a remote-tracking branch.  See `--track` in linkgit:git-branch[1] for "
"details."
msgstr ""
"新しいブランチを作成するときに、 `<commit-ish>` がブランチである場合は、新し"
"いブランチの「アップストリーム」としてマークします。 `<commit-ish>` がリモー"
"ト追跡ブランチの場合、これの振る舞いがデフォルトです。詳細については、 "
"linkgit:git-branch[1]の `--track` を参照してください。"

#. type: Labeled list
#: ../Documentation-sedout/git-worktree.txt:214
#, no-wrap
msgid "`--lock`"
msgstr "`--lock`"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:218
#, fuzzy
#| msgid ""
#| "Keep the working tree locked after creation. This is the equivalent of "
#| "`git worktree lock` after `git worktree add`, but without a race "
#| "condition."
msgid ""
"Keep the worktree locked after creation. This is the equivalent of `git "
"worktree lock` after `git worktree add`, but without a race condition."
msgstr ""
"作成後は、作業ツリーをロックしたままにします。 これは、 `git worktree add` の"
"後に `git worktree lock` するのと同等ですが、競合状態(race condition)はありま"
"せん。"

#. type: Labeled list
#: ../Documentation-sedout/git-worktree.txt:219
#, no-wrap
msgid "`-n`"
msgstr "`-n`"

#. type: Labeled list
#: ../Documentation-sedout/git-worktree.txt:220
#, no-wrap
msgid "`--dry-run`"
msgstr "`--dry-run`"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:223
msgid "With `prune`, do not remove anything; just report what it would remove."
msgstr ""
"`prune` では、何も削除しないでください。何が削除されるかを報告するだけです。"

#. type: Labeled list
#: ../Documentation-sedout/git-worktree.txt:224
#, no-wrap
msgid "`--porcelain`"
msgstr "`--porcelain`"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:229
#, fuzzy
#| msgid ""
#| "With `list`, output in an easy-to-parse format for scripts.  This format "
#| "will remain stable across Git versions and regardless of user "
#| "configuration.  See below for details."
msgid ""
"With `list`, output in an easy-to-parse format for scripts.  This format "
"will remain stable across Git versions and regardless of user "
"configuration.  It is recommended to combine this with `-z`.  See below for "
"details."
msgstr ""
"`list` を使用すると、スクリプトの解析が容易な形式で出力されます。この形式は、"
"Gitのバージョン間で、ユーザー構成に関係なく安定しています。詳細については、後"
"述します。"

#. type: Labeled list
#: ../Documentation-sedout/git-worktree.txt:230
#, no-wrap
msgid "`-z`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:235
msgid ""
"Terminate each line with a NUL rather than a newline when `--porcelain` is "
"specified with `list`. This makes it possible to parse the output when a "
"worktree path contains a newline character."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-worktree.txt:236
#, no-wrap
msgid "`-q`"
msgstr "`-q`"

#. type: Labeled list
#: ../Documentation-sedout/git-worktree.txt:237
#, no-wrap
msgid "`--quiet`"
msgstr "`--quiet`"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:239
msgid "With `add`, suppress feedback messages."
msgstr "`add` を使用して、フィードバックメッセージを抑制します。"

#. type: Labeled list
#: ../Documentation-sedout/git-worktree.txt:240
#, no-wrap
msgid "`-v`"
msgstr "`-v`"

#. type: Labeled list
#: ../Documentation-sedout/git-worktree.txt:241
#, no-wrap
msgid "`--verbose`"
msgstr "`--verbose`"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:243
msgid "With `prune`, report all removals."
msgstr "`prune` を使用して、すべての削除を報告します。"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:245
msgid "With `list`, output additional information about worktrees (see below)."
msgstr "`list` を使用して、ワークツリーに関する追加情報を出力します(後述)。"

#. type: Labeled list
#: ../Documentation-sedout/git-worktree.txt:246
#, no-wrap
msgid "`--expire <time>`"
msgstr "`--expire <time>`"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:248
#, fuzzy
#| msgid "With `prune`, only expire unused working trees older than `<time>`."
msgid "With `prune`, only expire unused worktrees older than `<time>`."
msgstr ""
"`prune` と共に使うと、 `<time>` より古い未使用の作業ツリーのみを期限切れにし"
"ます。"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:251
#, fuzzy
#| msgid ""
#| "With `list`, annotate missing working trees as prunable if they are older "
#| "than `<time>`."
msgid ""
"With `list`, annotate missing worktrees as prunable if they are older than "
"`<time>`."
msgstr ""
"`list` と共に使うと、 `<time>` より古い場合は、欠落している作業ツリーに刈り込"
"み可能(prunable)という注釈(annotate)を付けます。"

#. type: Labeled list
#: ../Documentation-sedout/git-worktree.txt:252
#, no-wrap
msgid "`--reason <string>`"
msgstr "`--reason <string>`"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:255
#, fuzzy
#| msgid ""
#| "With `lock` or with `add --lock`, an explanation why the working tree is "
#| "locked."
msgid ""
"With `lock` or with `add --lock`, an explanation why the worktree is locked."
msgstr ""
"`lock` または `add --lock` と共に使用して、作業ツリーがロックされている理由の"
"説明とします。"

#. type: Labeled list
#: ../Documentation-sedout/git-worktree.txt:256
#, no-wrap
msgid "<worktree>"
msgstr "<worktree>"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:258
#, fuzzy
#| msgid ""
#| "Working trees can be identified by path, either relative or absolute."
msgid "Worktrees can be identified by path, either relative or absolute."
msgstr "作業ツリーは、相対パスまたは絶対パスのいずれかで識別できます。"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:263
#, fuzzy
#| msgid ""
#| "If the last path components in the working tree's path is unique among "
#| "working trees, it can be used to identify a working tree. For example if "
#| "you only have two working trees, at `/abc/def/ghi` and `/abc/def/ggg`, "
#| "then `ghi` or `def/ghi` is enough to point to the former working tree."
msgid ""
"If the last path components in the worktree's path is unique among "
"worktrees, it can be used to identify a worktree. For example if you only "
"have two worktrees, at `/abc/def/ghi` and `/abc/def/ggg`, then `ghi` or `def/"
"ghi` is enough to point to the former worktree."
msgstr ""
"作業ツリーのパスの最後のパスコンポーネントが作業ツリー間で一意である場合、そ"
"れを使用して作業ツリーを識別できます。 たとえば、 `/abc/def/ghi` と `/abc/"
"def/ggg` の2つの作業ツリーしかない場合、前の作業ツリーを指すには、 `ghi` また"
"は `def/ghi` で十分です。"

#. type: Title -
#: ../Documentation-sedout/git-worktree.txt:265
#, no-wrap
msgid "REFS"
msgstr "REFS"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:270
#, fuzzy
#| msgid ""
#| "In multiple working trees, some refs may be shared between all working "
#| "trees and some refs are local. One example is `HEAD` which is different "
#| "for each working tree. This section is about the sharing rules and how to "
#| "access refs of one working tree from another."
msgid ""
"When using multiple worktrees, some refs are shared between all worktrees, "
"but others are specific to an individual worktree. One example is `HEAD`, "
"which is different for each worktree. This section is about the sharing "
"rules and how to access refs of one worktree from another."
msgstr ""
"複数の作業ツリーでは、一部のrefはすべての作業ツリー間で共有される場合があり、"
"一部のrefはローカルです。 一例として、作業ツリーごとに異なる `HEAD` がありま"
"す。このセクションでは、共有ルールと、ある作業ツリーのrefに別の作業ツリーから"
"アクセスする方法について説明します。"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:275
#, fuzzy
#| msgid ""
#| "In general, all pseudo refs are per working tree and all refs starting "
#| "with `refs/` are shared. Pseudo refs are ones like `HEAD` which are "
#| "directly under `$GIT_DIR` instead of inside `$GIT_DIR/refs`. There are "
#| "exceptions, however: refs inside `refs/bisect` and `refs/worktree` are "
#| "not shared."
msgid ""
"In general, all pseudo refs are per-worktree and all refs starting with "
"`refs/` are shared. Pseudo refs are ones like `HEAD` which are directly "
"under `$GIT_DIR` instead of inside `$GIT_DIR/refs`. There are exceptions, "
"however: refs inside `refs/bisect` and `refs/worktree` are not shared."
msgstr ""
"一般に、すべての疑似ref(pseudo refs)は作業ツリーごとにあり、そして、`refs/` "
"で始まるすべての参照は共有されます。 疑似refは、 `$GIT_DIR/refs` 内ではな"
"く、 `$GIT_DIR` の直下にある `HEAD` のようなものです。 ただし、例外がありま"
"す。 `refs/bisect` 内のrefと `refs/worktree` は共有されません。"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:280
#, fuzzy
#| msgid ""
#| "Refs that are per working tree can still be accessed from another working "
#| "tree via two special paths, `main-worktree` and `worktrees`. The former "
#| "gives access to per-working tree refs of the main working tree, while the "
#| "latter to all linked working trees."
msgid ""
"Refs that are per-worktree can still be accessed from another worktree via "
"two special paths, `main-worktree` and `worktrees`. The former gives access "
"to per-worktree refs of the main worktree, while the latter to all linked "
"worktrees."
msgstr ""
"作業ツリーごとのrefには、別の作業ツリーから、 `main-worktree` と `worktrees` "
"の2つの特別なパスを介してアクセスできます。 `main-worktree` はメインの作業ツ"
"リーから作業ごとのツリーrefへのアクセスを提供し、 `worktrees` すべてのリンク"
"された作業ツリーへのアクセスを提供します。"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:287
#, fuzzy
#| msgid ""
#| "For example, `main-worktree/HEAD` or `main-worktree/refs/bisect/good` "
#| "resolve to the same value as the main working tree's `HEAD` and `refs/"
#| "bisect/good` respectively. Similarly, `worktrees/foo/HEAD` or `worktrees/"
#| "bar/refs/bisect/bad` are the same as `$GIT_COMMON_DIR/worktrees/foo/HEAD` "
#| "and `$GIT_COMMON_DIR/worktrees/bar/refs/bisect/bad`."
msgid ""
"For example, `main-worktree/HEAD` or `main-worktree/refs/bisect/good` "
"resolve to the same value as the main worktree's `HEAD` and `refs/bisect/"
"good` respectively. Similarly, `worktrees/foo/HEAD` or `worktrees/bar/refs/"
"bisect/bad` are the same as `$GIT_COMMON_DIR/worktrees/foo/HEAD` and `"
"$GIT_COMMON_DIR/worktrees/bar/refs/bisect/bad`."
msgstr ""
"たとえば、 `main-worktree/HEAD` または `main-worktree/refs/bisect/good` は、"
"それぞれメインの作業ツリーの `HEAD` および `refs/bisect/good ` と同じ値に解決"
"されます。 同様に、 `worktrees/foo/HEAD` または `worktrees/bar/refs/bisect/"
"bad` は `$GIT_COMMON_DIR/worktrees/foo/HEAD` および `$GIT_COMMON_DIR/"
"worktrees/bar/refs/bisect/bad` と同じです。 "

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:291
msgid ""
"To access refs, it's best not to look inside `$GIT_DIR` directly. Instead "
"use commands such as linkgit:git-rev-parse[1] or linkgit:git-update-ref[1] "
"which will handle refs correctly."
msgstr ""
"refにアクセスするのに `$GIT_DIR` の内部を直接調べないことをお勧めします。代わ"
"りに、refを正しく処理する linkgit:git-rev-parse[1] や linkgit:git-update-"
"ref[1] などのコマンドを使用してください。"

#. type: Title -
#: ../Documentation-sedout/git-worktree.txt:293
#, no-wrap
msgid "CONFIGURATION FILE"
msgstr "CONFIGURATION FILE"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:298
#, fuzzy
#| msgid ""
#| "By default, the repository `config` file is shared across all working "
#| "trees. If the config variables `core.bare` or `core.worktree` are already "
#| "present in the config file, they will be applied to the main working "
#| "trees only."
msgid ""
"By default, the repository `config` file is shared across all worktrees.  If "
"the config variables `core.bare` or `core.worktree` are present in the "
"common config file and `extensions.worktreeConfig` is disabled, then they "
"will be applied to the main worktree only."
msgstr ""
"デフォルトでは、リポジトリの `config` ファイルはすべての作業ツリー間で共有さ"
"れます。構成変数 `core.bare` または `core.worktree` が構成ファイルにすでに存"
"在する場合、それらはメインの作業ツリーにのみ適用されます。"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:301
#, fuzzy
#| msgid ""
#| "In order to have configuration specific to working trees, you can turn on "
#| "the `worktreeConfig` extension, e.g.:"
msgid ""
"In order to have worktree-specific configuration, you can turn on the "
"`worktreeConfig` extension, e.g.:"
msgstr ""
"作業ツリーに固有の構成を作成するには、 `worktreeConfig` 拡張機能をオンにしま"
"す。例:"

#. type: delimited block -
#: ../Documentation-sedout/git-worktree.txt:304
#, no-wrap
msgid "$ git config extensions.worktreeConfig true\n"
msgstr "$ git config extensions.worktreeConfig true\n"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:310
msgid ""
"In this mode, specific configuration stays in the path pointed by `git rev-"
"parse --git-path config.worktree`. You can add or update configuration in "
"this file with `git config --worktree`. Older Git versions will refuse to "
"access repositories with this extension."
msgstr ""
"このモードでは、指定の構成は `git rev-parse --git-path config.worktree` が指"
"すパスに残ります。 `git config --worktree` を使用して、このファイルの構成を追"
"加または更新できます。古いバージョンのGitは、この拡張機能を備えたリポジトリへ"
"のアクセスを拒否します。"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:316
#, fuzzy
#| msgid ""
#| "Note that in this file, the exception for `core.bare` and `core.worktree` "
#| "is gone. If they exist in `$GIT_DIR/config`, you must move them to the "
#| "`config.worktree` of the main working tree. You may also take this "
#| "opportunity to review and move other configuration that you do not want "
#| "to share to all working trees:"
msgid ""
"Note that in this file, the exception for `core.bare` and `core.worktree` is "
"gone. If they exist in `$GIT_DIR/config`, you must move them to the `config."
"worktree` of the main worktree. You may also take this opportunity to review "
"and move other configuration that you do not want to share to all worktrees:"
msgstr ""
"注意: このファイルでは、 `core.bare` と `core.worktree` が例外扱いされないこ"
"とに注意してください。 それらが `$GIT_DIR/config` に存在する場合は、メインの"
"作業ツリーの `config.worktree` に移動する必要があります。この機会に、共有した"
"くない他の構成を確認して、すべての作業ツリーに移動することもできます。"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:318
#, fuzzy
#| msgid "`core.worktree` and `core.bare` should never be shared"
msgid "`core.worktree` should never be shared."
msgstr "`core.worktree` と `core.bare` は決して共有しないでください"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:320
msgid "`core.bare` should not be shared if the value is `core.bare=true`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:323
#, fuzzy
#| msgid ""
#| "`core.sparseCheckout` is recommended per working tree, unless you are "
#| "sure you always use sparse checkout for all working trees."
msgid ""
"`core.sparseCheckout` should not be shared, unless you are sure you always "
"use sparse checkout for all worktrees."
msgstr ""
"すべての作業ツリーに常にスパースチェックアウト(sparse checkout)を使用すること"
"が確実でない限りは、作業ツリーごとに `core.sparseCheckout` をお勧めします。"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:326
msgid ""
"See the documentation of `extensions.worktreeConfig` in linkgit:git-"
"config[1] for more details."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-worktree.txt:328
#, no-wrap
msgid "DETAILS"
msgstr "DETAILS"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:337
#, fuzzy
#| msgid ""
#| "Each linked working tree has a private sub-directory in the repository's `"
#| "$GIT_DIR/worktrees` directory.  The private sub-directory's name is "
#| "usually the base name of the linked working tree's path, possibly "
#| "appended with a number to make it unique.  For example, when `$GIT_DIR=/"
#| "path/main/.git` the command `git worktree add /path/other/test-next next` "
#| "creates the linked working tree in `/path/other/test-next` and also "
#| "creates a `$GIT_DIR/worktrees/test-next` directory (or `$GIT_DIR/"
#| "worktrees/test-next1` if `test-next` is already taken)."
msgid ""
"Each linked worktree has a private sub-directory in the repository's `"
"$GIT_DIR/worktrees` directory.  The private sub-directory's name is usually "
"the base name of the linked worktree's path, possibly appended with a number "
"to make it unique.  For example, when `$GIT_DIR=/path/main/.git` the command "
"`git worktree add /path/other/test-next next` creates the linked worktree in "
"`/path/other/test-next` and also creates a `$GIT_DIR/worktrees/test-next` "
"directory (or `$GIT_DIR/worktrees/test-next1` if `test-next` is already "
"taken)."
msgstr ""
"リンクされた各作業ツリーには、リポジトリの `$ GIT_DIR/worktrees`ディレクトリ"
"にプライベートサブディレクトリがあります。  プライベートサブディレクトリの名"
"前は通常、リンクされた作業ツリーのパスのベース名であり、一意にするために番号"
"が追加される場合があります。たとえば、 `$GIT_DIR=/path/main/.git` の場合、コ"
"マンド `git worktree add /path/other/test-next next` はリンクされた作業ツリー"
"を `/path/other/test-next`に作成し、そしてまた `$GIT_DIR/worktrees/test-"
"next` ディレクトリ(または、 `test-next` がすでに実行されている場合は、 `"
"$GIT_DIR/worktrees/test-next1` ディレクトリ)を作成します。"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:343
#, fuzzy
#| msgid ""
#| "Within a linked working tree, `$GIT_DIR` is set to point to this private "
#| "directory (e.g. `/path/main/.git/worktrees/test-next` in the example) and "
#| "`$GIT_COMMON_DIR` is set to point back to the main working tree's `"
#| "$GIT_DIR` (e.g. `/path/main/.git`). These settings are made in a `.git` "
#| "file located at the top directory of the linked working tree."
msgid ""
"Within a linked worktree, `$GIT_DIR` is set to point to this private "
"directory (e.g. `/path/main/.git/worktrees/test-next` in the example) and `"
"$GIT_COMMON_DIR` is set to point back to the main worktree's `$GIT_DIR` (e."
"g. `/path/main/.git`). These settings are made in a `.git` file located at "
"the top directory of the linked worktree."
msgstr ""
"リンクされた作業ツリー内で、 `$GIT_DIR` は、このプライベートディレクトリを指"
"すように設定され(例では `/path/main/.git/worktrees/test-next` )、 `"
"$GIT_COMMON_DIR` はメインの作業ツリーの `$GIT_DIR` (例では `/path/main/."
"git` )を指すように設定されます。これらの設定は、リンクされた作業ツリーの最上"
"位ディレクトリにある `.git` ファイルで行われます。"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:353
#, fuzzy
#| msgid ""
#| "Path resolution via `git rev-parse --git-path` uses either `$GIT_DIR` or `"
#| "$GIT_COMMON_DIR` depending on the path. For example, in the linked "
#| "working tree `git rev-parse --git-path HEAD` returns `/path/main/.git/"
#| "worktrees/test-next/HEAD` (not `/path/other/test-next/.git/HEAD` or `/"
#| "path/main/.git/HEAD`) while `git rev-parse --git-path refs/heads/master` "
#| "uses `$GIT_COMMON_DIR` and returns `/path/main/.git/refs/heads/master`, "
#| "since refs are shared across all working trees, except `refs/bisect` and "
#| "`refs/worktree`."
msgid ""
"Path resolution via `git rev-parse --git-path` uses either `$GIT_DIR` or `"
"$GIT_COMMON_DIR` depending on the path. For example, in the linked worktree "
"`git rev-parse --git-path HEAD` returns `/path/main/.git/worktrees/test-next/"
"HEAD` (not `/path/other/test-next/.git/HEAD` or `/path/main/.git/HEAD`) "
"while `git rev-parse --git-path refs/heads/master` uses `$GIT_COMMON_DIR` "
"and returns `/path/main/.git/refs/heads/master`, since refs are shared "
"across all worktrees, except `refs/bisect` and `refs/worktree`."
msgstr ""
"`git rev-parse --git-path` によるパス解決では、パスに応じて `$GIT_DIR` また"
"は `$GIT_COMMON_DIR` のいずれかが使用されます。たとえば、リンクされた作業ツ"
"リーでは、 `git rev-parse --git-path HEAD` は `/path/main/.git/worktrees/"
"test-next/HEAD` を返します(`/path/other/test-next/.git/HEAD` や `/path/main/."
"git/HEAD` ではありません)。一方、 `git rev-parse --git-path refs/heads/"
"master` は `$GIT_COMMON_DIR` を使用し、 `/path/main/.git/refs/heads/ master` "
"を返します。refは、 `refs/bisect` と `refs/worktree` を除くすべての作業ツリー"
"で共有されるためです。"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:358
msgid ""
"See linkgit:gitrepository-layout[5] for more information. The rule of thumb "
"is do not make any assumption about whether a path belongs to `$GIT_DIR` or `"
"$GIT_COMMON_DIR` when you need to directly access something inside `"
"$GIT_DIR`. Use `git rev-parse --git-path` to get the final path."
msgstr ""
"詳細については、 linkgit:gitrepository-layout[5] を参照してください。 経験則"
"では、 `$GIT_DIR` 内の何かに直接アクセスする必要がある場合、パスが `"
"$GIT_DIR` または `$GIT_COMMON_DIR` のどちらに属するかについては何も想定してい"
"ません。 `git rev-parse --git-path` を使用して、最終的なパスを取得してくださ"
"い。"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:366
#, fuzzy
#| msgid ""
#| "If you manually move a linked working tree, you need to update the "
#| "`gitdir` file in the entry's directory. For example, if a linked working "
#| "tree is moved to `/newpath/test-next` and its `.git` file points to `/"
#| "path/main/.git/worktrees/test-next`, then update `/path/main/.git/"
#| "worktrees/test-next/gitdir` to reference `/newpath/test-next` instead. "
#| "Better yet, run `git worktree repair` to reestablish the connection "
#| "automatically."
msgid ""
"If you manually move a linked worktree, you need to update the `gitdir` file "
"in the entry's directory. For example, if a linked worktree is moved to `/"
"newpath/test-next` and its `.git` file points to `/path/main/.git/worktrees/"
"test-next`, then update `/path/main/.git/worktrees/test-next/gitdir` to "
"reference `/newpath/test-next` instead. Better yet, run `git worktree "
"repair` to reestablish the connection automatically."
msgstr ""
"リンクされた作業ツリーを手動で移動する場合は、エントリのディレクトリにある "
"`gitdir` ファイルを更新する必要があります。  たとえば、リンクされた作業ツリー"
"が `/newpath/test-next` に移動され、その `.git` ファイルが `/path/main/.git/"
"worktrees/test-next` を指しているならば、代わりに `/path/main/.git/worktrees/"
"test-next/gitdir` を更新し `/newpath/test-next` を参照するようにします。もっ"
"といいのは、 `git worktree repair` を実行して、接続を自動的に再確立することで"
"す。"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:377
#, fuzzy
#| msgid ""
#| "To prevent a `$GIT_DIR/worktrees` entry from being pruned (which can be "
#| "useful in some situations, such as when the entry's working tree is "
#| "stored on a portable device), use the `git worktree lock` command, which "
#| "adds a file named `locked` to the entry's directory. The file contains "
#| "the reason in plain text. For example, if a linked working tree's `.git` "
#| "file points to `/path/main/.git/worktrees/test-next` then a file named `/"
#| "path/main/.git/worktrees/test-next/locked` will prevent the `test-next` "
#| "entry from being pruned.  See linkgit:gitrepository-layout[5] for details."
msgid ""
"To prevent a `$GIT_DIR/worktrees` entry from being pruned (which can be "
"useful in some situations, such as when the entry's worktree is stored on a "
"portable device), use the `git worktree lock` command, which adds a file "
"named `locked` to the entry's directory. The file contains the reason in "
"plain text. For example, if a linked worktree's `.git` file points to `/path/"
"main/.git/worktrees/test-next` then a file named `/path/main/.git/worktrees/"
"test-next/locked` will prevent the `test-next` entry from being pruned.  See "
"linkgit:gitrepository-layout[5] for details."
msgstr ""
"`$GIT_DIR/worktrees` エントリが刈り込み(prune)されないようにする(これは、エン"
"トリの作業ツリーがポータブルデバイスに保存されている場合など、状況によっては"
"便利です)には、 `git worktree lock` コマンドを使用します。このコマンドは "
"`locked` という名前のファイルをエントリのディレクトリに追加します。ファイルに"
"は、理由(reason)がプレーンテキストで含まれています。たとえば、リンクされた作"
"業ツリーの `.git` ファイルが `/path/main/.git/worktrees/test-next` を指してい"
"るならば、 `/path/main/.git/worktrees/test-next/locked` という名前のファイル"
"は `test-next` エントリが刈り込み(pruned)されるのを防ぎます。詳細について"
"は、 linkgit:gitrepository-layout[5] を参照してください。"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:380
msgid ""
"When `extensions.worktreeConfig` is enabled, the config file `.git/worktrees/"
"<id>/config.worktree` is read after `.git/config` is."
msgstr ""
"`extensions.worktreeConfig` が有効になっている場合、設定ファイル `.git/"
"worktrees/<id>/config.worktree` は `.git/config` の後に読み込まれます。"

#. type: Title -
#: ../Documentation-sedout/git-worktree.txt:382
#, no-wrap
msgid "LIST OUTPUT FORMAT"
msgstr "LIST OUTPUT FORMAT"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:385
msgid ""
"The `worktree list` command has two output formats. The default format shows "
"the details on a single line with columns.  For example:"
msgstr ""
"`worktreelist` コマンドには2つの出力形式があります。デフォルトの形式では、詳"
"細が1行に複数列で表示されます。例えば:"

#. type: delimited block -
#: ../Documentation-sedout/git-worktree.txt:391
#, no-wrap
msgid ""
"$ git worktree list\n"
"/path/to/bare-source            (bare)\n"
"/path/to/linked-worktree        abcd1234 [master]\n"
"/path/to/other-linked-worktree  1234abc  (detached HEAD)\n"
msgstr ""
"$ git worktree list\n"
"/path/to/bare-source            (bare)\n"
"/path/to/linked-worktree        abcd1234 [master]\n"
"/path/to/other-linked-worktree  1234abc  (detached HEAD)\n"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:395
#, fuzzy
#| msgid ""
#| "The command also shows annotations for each working tree, according to "
#| "its state.  These annotations are:"
msgid ""
"The command also shows annotations for each worktree, according to its "
"state.  These annotations are:"
msgstr ""
"このコマンドは、状態に応じて、各作業ツリーの注釈(annotations)も表示します。こ"
"れらの注釈は以下のとおりです:"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:397
#, fuzzy
#| msgid "`locked`, if the working tree is locked."
msgid "`locked`, if the worktree is locked."
msgstr "`locked` : 作業ツリーがロックされている場合。"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:398
#, fuzzy
#| msgid ""
#| "`prunable`, if the working tree can be pruned via `git worktree prune`."
msgid "`prunable`, if the worktree can be pruned via `git worktree prune`."
msgstr ""
"`prunable` : 作業ツリーが `git worktree prune` を介して刈り込みできる場合。"

#. type: delimited block -
#: ../Documentation-sedout/git-worktree.txt:404
#, no-wrap
msgid ""
"$ git worktree list\n"
"/path/to/linked-worktree    abcd1234 [master]\n"
"/path/to/locked-worktree    acbd5678 (brancha) locked\n"
"/path/to/prunable-worktree  5678abc  (detached HEAD) prunable\n"
msgstr ""
"$ git worktree list\n"
"/path/to/linked-worktree    abcd1234 [master]\n"
"/path/to/locked-worktree    acbd5678 (brancha) locked\n"
"/path/to/prunable-worktree  5678abc  (detached HEAD) prunable\n"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:409
msgid ""
"For these annotations, a reason might also be available and this can be seen "
"using the verbose mode. The annotation is then moved to the next line "
"indented followed by the additional information."
msgstr ""
"これらの注釈(annotations)については、理由(reason)も利用できる可能性があり、こ"
"れは冗長モード(verbose mode)を使用して確認できます。そして、注釈はインデント"
"された次の行に移動され、その後に追加情報が続きます。"

#. type: delimited block -
#: ../Documentation-sedout/git-worktree.txt:418
#, fuzzy, no-wrap
#| msgid ""
#| "$ git worktree list --verbose\n"
#| "/path/to/linked-worktree              abcd1234 [master]\n"
#| "/path/to/locked-worktree-no-reason    abcd5678 (detached HEAD) locked\n"
#| "/path/to/locked-worktree-with-reason  1234abcd (brancha)\n"
#| "\tlocked: working tree path is mounted on a portable device\n"
#| "/path/to/prunable-worktree            5678abc1 (detached HEAD)\n"
#| "\tprunable: gitdir file points to non-existent location\n"
msgid ""
"$ git worktree list --verbose\n"
"/path/to/linked-worktree              abcd1234 [master]\n"
"/path/to/locked-worktree-no-reason    abcd5678 (detached HEAD) locked\n"
"/path/to/locked-worktree-with-reason  1234abcd (brancha)\n"
"\tlocked: worktree path is mounted on a portable device\n"
"/path/to/prunable-worktree            5678abc1 (detached HEAD)\n"
"\tprunable: gitdir file points to non-existent location\n"
msgstr ""
"$ git worktree list --verbose\n"
"/path/to/linked-worktree              abcd1234 [master]\n"
"/path/to/locked-worktree-no-reason    abcd5678 (detached HEAD) locked\n"
"/path/to/locked-worktree-with-reason  1234abcd (brancha)\n"
"\tlocked: working tree path is mounted on a portable device\n"
"/path/to/prunable-worktree            5678abc1 (detached HEAD)\n"
"\tprunable: gitdir file points to non-existent location\n"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:423
#, fuzzy
#| msgid ""
#| "Note that the annotation is moved to the next line if the additional "
#| "information is available, otherwise it stays on the same line as the "
#| "working tree itself."
msgid ""
"Note that the annotation is moved to the next line if the additional "
"information is available, otherwise it stays on the same line as the "
"worktree itself."
msgstr ""
"注意: 追加情報が利用可能な場合、注釈は次の行に移動されることに注意してくださ"
"い。そうでない場合、注釈は作業ツリー自体と同じ行にとどまります。"

#. type: Title ~
#: ../Documentation-sedout/git-worktree.txt:425
#, no-wrap
msgid "Porcelain Format"
msgstr "Porcelain Format"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:434
#, fuzzy
#| msgid ""
#| "The porcelain format has a line per attribute.  Attributes are listed "
#| "with a label and value separated by a single space.  Boolean attributes "
#| "(like `bare` and `detached`) are listed as a label only, and are present "
#| "only if the value is true.  Some attributes (like `locked`) can be listed "
#| "as a label only or with a value depending upon whether a reason is "
#| "available.  The first attribute of a working tree is always `worktree`, "
#| "an empty line indicates the end of the record.  For example:"
msgid ""
"The porcelain format has a line per attribute.  If `-z` is given then the "
"lines are terminated with NUL rather than a newline.  Attributes are listed "
"with a label and value separated by a single space.  Boolean attributes "
"(like `bare` and `detached`) are listed as a label only, and are present "
"only if the value is true.  Some attributes (like `locked`) can be listed as "
"a label only or with a value depending upon whether a reason is available.  "
"The first attribute of a worktree is always `worktree`, an empty line "
"indicates the end of the record.  For example:"
msgstr ""
"磁器コマンドのフォーマットは、属性ごとに1行あります。 属性は、単一のスペース"
"で区切られたラベルと値でリストされます。ブール属性(`bare` や `detached` など)"
"はラベルとしてのみリストされ、値がtrueの場合にのみ存在します。 一部の属性"
"(`locked` など)は、ラベルとしてのみリストすることも、理由が利用可能かどうかに"
"応じて値とともにリストすることもできます。作業ツリーの最初の属性は常に "
"`worktree` であり、空の行はレコードの終わりを示します。例えば:"

#. type: delimited block -
#: ../Documentation-sedout/git-worktree.txt:439
#, no-wrap
msgid ""
"$ git worktree list --porcelain\n"
"worktree /path/to/bare-source\n"
"bare\n"
msgstr ""
"$ git worktree list --porcelain\n"
"worktree /path/to/bare-source\n"
"bare\n"

#. type: delimited block -
#: ../Documentation-sedout/git-worktree.txt:443
#, no-wrap
msgid ""
"worktree /path/to/linked-worktree\n"
"HEAD abcd1234abcd1234abcd1234abcd1234abcd1234\n"
"branch refs/heads/master\n"
msgstr ""
"worktree /path/to/linked-worktree\n"
"HEAD abcd1234abcd1234abcd1234abcd1234abcd1234\n"
"branch refs/heads/master\n"

#. type: delimited block -
#: ../Documentation-sedout/git-worktree.txt:447
#, no-wrap
msgid ""
"worktree /path/to/other-linked-worktree\n"
"HEAD 1234abc1234abc1234abc1234abc1234abc1234a\n"
"detached\n"
msgstr ""
"worktree /path/to/other-linked-worktree\n"
"HEAD 1234abc1234abc1234abc1234abc1234abc1234a\n"
"detached\n"

#. type: delimited block -
#: ../Documentation-sedout/git-worktree.txt:452
#, no-wrap
msgid ""
"worktree /path/to/linked-worktree-locked-no-reason\n"
"HEAD 5678abc5678abc5678abc5678abc5678abc5678c\n"
"branch refs/heads/locked-no-reason\n"
"locked\n"
msgstr ""
"worktree /path/to/linked-worktree-locked-no-reason\n"
"HEAD 5678abc5678abc5678abc5678abc5678abc5678c\n"
"branch refs/heads/locked-no-reason\n"
"locked\n"

#. type: delimited block -
#: ../Documentation-sedout/git-worktree.txt:457
#, no-wrap
msgid ""
"worktree /path/to/linked-worktree-locked-with-reason\n"
"HEAD 3456def3456def3456def3456def3456def3456b\n"
"branch refs/heads/locked-with-reason\n"
"locked reason why is locked\n"
msgstr ""
"worktree /path/to/linked-worktree-locked-with-reason\n"
"HEAD 3456def3456def3456def3456def3456def3456b\n"
"branch refs/heads/locked-with-reason\n"
"locked reason why is locked\n"

#. type: delimited block -
#: ../Documentation-sedout/git-worktree.txt:462
#, no-wrap
msgid ""
"worktree /path/to/linked-worktree-prunable\n"
"HEAD 1233def1234def1234def1234def1234def1234b\n"
"detached\n"
"prunable gitdir file points to non-existent location\n"
msgstr ""
"worktree /path/to/linked-worktree-prunable\n"
"HEAD 1233def1234def1234def1234def1234def1234b\n"
"detached\n"
"prunable gitdir file points to non-existent location\n"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:469
#, fuzzy
#| msgid ""
#| "If the lock reason contains \"unusual\" characters such as newline, they "
#| "are escaped and the entire reason is quoted as explained for the "
#| "configuration variable `core.quotePath` (see linkgit:git-config[1]).  For "
#| "Example:"
msgid ""
"Unless `-z` is used any \"unusual\" characters in the lock reason such as "
"newlines are escaped and the entire reason is quoted as explained for the "
"configuration variable `core.quotePath` (see linkgit:git-config[1]).  For "
"Example:"
msgstr ""
"ロック理由に改行などの「異常な」文字が含まれている場合、それらはエスケープさ"
"れ、構成変数 `core.quotePath` で説明されているように理由全体がクォートされま"
"す(linkgit:git-config[1] 参照)。例えば:"

#. type: delimited block -
#: ../Documentation-sedout/git-worktree.txt:475
#, no-wrap
msgid ""
"$ git worktree list --porcelain\n"
"...\n"
"locked \"reason\\nwhy is locked\"\n"
"...\n"
msgstr ""
"$ git worktree list --porcelain\n"
"...\n"
"locked \"reason\\nwhy is locked\"\n"
"...\n"

#. type: Title -
#: ../Documentation-sedout/git-worktree.txt:478
#, no-wrap
msgid "EXAMPLES"
msgstr "EXAMPLES"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:487
#, fuzzy
#| msgid ""
#| "You are in the middle of a refactoring session and your boss comes in and "
#| "demands that you fix something immediately. You might typically use "
#| "linkgit:git-stash[1] to store your changes away temporarily, however, "
#| "your working tree is in such a state of disarray (with new, moved, and "
#| "removed files, and other bits and pieces strewn around) that you don't "
#| "want to risk disturbing any of it. Instead, you create a temporary linked "
#| "working tree to make the emergency fix, remove it when done, and then "
#| "resume your earlier refactoring session."
msgid ""
"You are in the middle of a refactoring session and your boss comes in and "
"demands that you fix something immediately. You might typically use linkgit:"
"git-stash[1] to store your changes away temporarily, however, your working "
"tree is in such a state of disarray (with new, moved, and removed files, and "
"other bits and pieces strewn around) that you don't want to risk disturbing "
"any of it. Instead, you create a temporary linked worktree to make the "
"emergency fix, remove it when done, and then resume your earlier refactoring "
"session."
msgstr ""
"リファクタリングセッションの真っ最中に、上司がやって来て、あなたに、すぐに何"
"かを修正するように要求します。 通常、 linkgit:git-stash[1] を使用して変更を一"
"時的に保存しますが、作業ツリーは、(新しいファイル、移動されたファイル、削除さ"
"れたファイル、その他の断片が散らばっていて)混乱状態にあります。あなたはそれの"
"いずれかを邪魔する危険を冒したくありません。あなたは代わりに、一時的にリンク"
"された作業ツリーを作成して緊急修正を行い、完了したらそれを削除してから、以前"
"のリファクタリングセッションを再開することにします。"

#. type: delimited block -
#: ../Documentation-sedout/git-worktree.txt:495
#, no-wrap
msgid ""
"$ git worktree add -b emergency-fix ../temp master\n"
"$ pushd ../temp\n"
"# ... hack hack hack ...\n"
"$ git commit -a -m 'emergency fix for boss'\n"
"$ popd\n"
"$ git worktree remove ../temp\n"
msgstr ""
"$ git worktree add -b emergency-fix ../temp master\n"
"$ pushd ../temp\n"
"# ... hack hack hack ...\n"
"$ git commit -a -m 'emergency fix for boss'\n"
"$ popd\n"
"$ git worktree remove ../temp\n"

#. type: Title -
#: ../Documentation-sedout/git-worktree.txt:498
#, no-wrap
msgid "BUGS"
msgstr "BUGS"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:502
msgid ""
"Multiple checkout in general is still experimental, and the support for "
"submodules is incomplete. It is NOT recommended to make multiple checkouts "
"of a superproject."
msgstr ""
"一般的な複数チェックアウト(multiple checkout)はまだ実験段階であり、サブモ"
"ジュールのサポートは不完全です。スーパープロジェクトを複数チェックアウトする"
"ことはお勧めしません。"

#. type: Title -
#: ../Documentation-sedout/git-worktree.txt:504
#, no-wrap
msgid "GIT"
msgstr "GIT"

#. type: Plain text
#: ../Documentation-sedout/git-worktree.txt:505
msgid "Part of the linkgit:git[1] suite"
msgstr "Part of the linkgit:git[1] suite"
