# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-10-01 00:25+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation/git-blame.txt:2
#, no-wrap
msgid "git-blame(1)"
msgstr ""

#. type: Title -
#: ../Documentation/git-blame.txt:5
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:7
msgid "git-blame - Show what revision and author last modified each line of a file"
msgstr ""

#. type: Title -
#: ../Documentation/git-blame.txt:9
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:16
#, no-wrap
msgid ""
"'git blame' [-c] [-b] [-l] [--root] [-t] [-f] [-n] [-s] [-e] [-p] [-w] "
"[--incremental]\n"
"\t    [-L <range>] [-S <revs-file>] [-M] [-C] [-C] [-C] [--since=<date>]\n"
"\t    [--ignore-rev <rev>] [--ignore-revs-file <file>]\n"
"\t    [--progress] [--abbrev=<n>] [<rev> | --contents <file> | --reverse "
"<rev>..<rev>]\n"
"\t    [--] <file>\n"
msgstr ""

#. type: Title -
#: ../Documentation/git-blame.txt:18
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:22
msgid ""
"Annotates each line in the given file with information from the revision "
"which last modified the line. Optionally, start annotating from the given "
"revision."
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:25
msgid ""
"When specified one or more times, `-L` restricts annotation to the requested "
"lines."
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:31
msgid ""
"The origin of lines is automatically followed across whole-file renames "
"(currently there is no option to turn the rename-following off). To follow "
"lines moved from one file to another, or to follow lines that were copied "
"and pasted from another file, etc., see the `-C` and `-M` options."
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:35
msgid ""
"The report does not tell you anything about lines which have been deleted or "
"replaced; you need to use a tool such as 'git diff' or the \"pickaxe\" "
"interface briefly mentioned in the following paragraph."
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:42
msgid ""
"Apart from supporting file annotation, Git also supports searching the "
"development history for when a code snippet occurred in a change. This makes "
"it possible to track when a code snippet was added to a file, moved or "
"copied between files, and eventually deleted or replaced. It works by "
"searching for a text string in the diff. A small example of the pickaxe "
"interface that searches for `blame_usage`:"
msgstr ""

#. type: delimited block -
#: ../Documentation/git-blame.txt:47
#, no-wrap
msgid ""
"$ git log --pretty=oneline -S'blame_usage'\n"
"5040f17eba15504bad66b14a645bddd9b015ebb7 blame -S <ancestry-file>\n"
"ea4c7f9bf69e781dd0cd88d2bccb2bf5cc15c9a7 git-blame: Make the output\n"
msgstr ""

#. type: Title -
#: ../Documentation/git-blame.txt:50
#, no-wrap
msgid "OPTIONS"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-blame.txt:53
#, no-wrap
msgid "-c"
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:55
msgid "Use the same output mode as linkgit:git-annotate[1] (Default: off)."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-blame.txt:56
#, no-wrap
msgid "--score-debug"
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:64
msgid ""
"Include debugging information related to the movement of lines between files "
"(see `-C`) and lines moved within a file (see `-M`).  The first number "
"listed is the score.  This is the number of alphanumeric characters detected "
"as having been moved between or within files.  This must be above a certain "
"threshold for 'git blame' to consider those lines of code to have been "
"moved."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-blame.txt:65
#, no-wrap
msgid "-f"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-blame.txt:66
#, no-wrap
msgid "--show-name"
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:70
msgid ""
"Show the filename in the original commit.  By default the filename is shown "
"if there is any line that came from a file with a different name, due to "
"rename detection."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-blame.txt:71
#, no-wrap
msgid "-n"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-blame.txt:72
#, no-wrap
msgid "--show-number"
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:74
msgid "Show the line number in the original commit (Default: off)."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-blame.txt:75
#, no-wrap
msgid "-s"
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:77
msgid "Suppress the author name and timestamp from the output."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-blame.txt:78
#, no-wrap
msgid "-e"
msgstr ""

#. type: Labeled list
#: ../Documentation/git-blame.txt:79
#, no-wrap
msgid "--show-email"
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:83
msgid ""
"Show the author email instead of author name (Default: off).  This can also "
"be controlled via the `blame.showEmail` config option."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-blame.txt:84
#, no-wrap
msgid "-w"
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:87
msgid ""
"Ignore whitespace when comparing the parent's version and the child's to "
"find where the lines came from."
msgstr ""

#. type: Labeled list
#: ../Documentation/git-blame.txt:88
#, no-wrap
msgid "--abbrev=<n>"
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:94
msgid ""
"Instead of using the default 7+1 hexadecimal digits as the abbreviated "
"object name, use <m>+1 digits, where <m> is at least <n> but ensures the "
"commit object names are unique.  Note that 1 column is used for a caret to "
"mark the boundary commit."
msgstr ""

#. type: Title -
#: ../Documentation/git-blame.txt:97
#, no-wrap
msgid "THE PORCELAIN FORMAT"
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:101
msgid ""
"In this format, each line is output after a header; the header at the "
"minimum has the first line which has:"
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:103
msgid "40-byte SHA-1 of the commit the line is attributed to;"
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:104
msgid "the line number of the line in the original file;"
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:105
msgid "the line number of the line in the final file;"
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:108
msgid ""
"on a line that starts a group of lines from a different commit than the "
"previous one, the number of lines in this group.  On subsequent lines this "
"field is absent."
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:111
msgid ""
"This header line is followed by the following information at least once for "
"each commit:"
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:115
msgid ""
"the author name (\"author\"), email (\"author-mail\"), time "
"(\"author-time\"), and time zone (\"author-tz\"); similarly for committer."
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:116
msgid "the filename in the commit that the line is attributed to."
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:117
msgid "the first line of the commit log message (\"summary\")."
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:121
msgid ""
"The contents of the actual line is output after the above header, prefixed "
"by a TAB. This is to allow adding more header elements later."
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:129
msgid ""
"The porcelain format generally suppresses commit information that has "
"already been seen. For example, two lines that are blamed to the same commit "
"will both be shown, but the details for that commit will be shown only "
"once. This is more efficient, but may require more state be kept by the "
"reader. The `--line-porcelain` option can be used to output full commit "
"information for each line, allowing simpler (but less efficient)  usage "
"like:"
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:134
#, no-wrap
msgid ""
"\t# count the number of lines attributed to each author\n"
"\tgit blame --line-porcelain file |\n"
"\tsed -n 's/^author //p' |\n"
"\tsort | uniq -c | sort -rn\n"
msgstr ""

#. type: Title -
#: ../Documentation/git-blame.txt:137
#, no-wrap
msgid "SPECIFYING RANGES"
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:143
msgid ""
"Unlike 'git blame' and 'git annotate' in older versions of git, the extent "
"of the annotation can be limited to both line ranges and revision "
"ranges. The `-L` option, which limits annotation to a range of lines, may be "
"specified multiple times."
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:148
msgid ""
"When you are interested in finding the origin for lines 40-60 for file "
"`foo`, you can use the `-L` option like so (they mean the same thing -- both "
"ask for 21 lines starting at line 40):"
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:151
#, no-wrap
msgid ""
"\tgit blame -L 40,60 foo\n"
"\tgit blame -L 40,+21 foo\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:153
msgid "Also you can use a regular expression to specify the line range:"
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:155
#, no-wrap
msgid "\tgit blame -L '/^sub hello {/,/^}$/' foo\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:157
msgid "which limits the annotation to the body of the `hello` subroutine."
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:161
msgid ""
"When you are not interested in changes older than version v2.6.18, or "
"changes older than 3 weeks, you can use revision range specifiers similar to "
"'git rev-list':"
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:164
#, no-wrap
msgid ""
"\tgit blame v2.6.18.. -- foo\n"
"\tgit blame --since=3.weeks -- foo\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:170
msgid ""
"When revision range specifiers are used to limit the annotation, lines that "
"have not changed since the range boundary (either the commit v2.6.18 or the "
"most recent commit that is more than 3 weeks old in the above example) are "
"blamed for that range boundary commit."
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:176
msgid ""
"A particularly useful way is to see if an added file has lines created by "
"copy-and-paste from existing files.  Sometimes this indicates that the "
"developer was being sloppy and did not refactor the code properly.  You can "
"first find the commit that introduced the file with:"
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:178
#, no-wrap
msgid "\tgit log --diff-filter=A --pretty=short -- foo\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:181
msgid ""
"and then annotate the change between the commit and its parents, using "
"`commit^!` notation:"
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:183
#, no-wrap
msgid "\tgit blame -C -C -f $commit^! -- foo\n"
msgstr ""

#. type: Title -
#: ../Documentation/git-blame.txt:186
#, no-wrap
msgid "INCREMENTAL OUTPUT"
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:193
msgid ""
"When called with `--incremental` option, the command outputs the result as "
"it is built.  The output generally will talk about lines touched by more "
"recent commits first (i.e. the lines will be annotated out of order) and is "
"meant to be used by interactive viewers."
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:197
msgid ""
"The output format is similar to the Porcelain format, but it does not "
"contain the actual lines from the file that is being annotated."
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:199
msgid "Each blame entry always starts with a line of:"
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:201
#, no-wrap
msgid "<40-byte hex sha1> <sourceline> <resultline> <num_lines>\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:203
msgid "Line numbers count from 1."
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:208
msgid ""
"The first time that a commit shows up in the stream, it has various other "
"information about it printed out with a one-word tag at the beginning of "
"each line describing the extra commit information (author, email, committer, "
"dates, summary, etc.)."
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:211
msgid ""
"Unlike the Porcelain format, the filename information is always given and "
"terminates the entry:"
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:213
#, no-wrap
msgid "\"filename\" <whitespace-quoted-filename-goes-here>\n"
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:216
msgid ""
"and thus it is really quite easy to parse for some line- and word-oriented "
"parser (which should be quite natural for most scripting languages)."
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:224
msgid ""
"For people who do parsing: to make it more robust, just ignore any lines "
"between the first and last one (\"<sha1>\" and \"filename\" lines)  where "
"you do not recognize the tag words (or care about that particular one) at "
"the beginning of the \"extended information\" lines. That way, if there is "
"ever added information (like the commit encoding or extended commit "
"commentary), a blame viewer will not care."
msgstr ""

#. type: Title -
#: ../Documentation/git-blame.txt:227
#, no-wrap
msgid "MAPPING AUTHORS"
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:230
msgid "See linkgit:gitmailmap[5]."
msgstr ""

#. type: Title -
#: ../Documentation/git-blame.txt:233
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:235
msgid "linkgit:git-annotate[1]"
msgstr ""

#. type: Title -
#: ../Documentation/git-blame.txt:237
#, no-wrap
msgid "GIT"
msgstr ""

#. type: Plain text
#: ../Documentation/git-blame.txt:238
msgid "Part of the linkgit:git[1] suite"
msgstr ""
