# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 0.0\n"
"POT-Creation-Date: 2021-11-04 04:37+0900\n"
"PO-Revision-Date: 2022-04-26 19:58+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/git-maintenance.txt:2
#, no-wrap
msgid "git-maintenance(1)"
msgstr "git-maintenance(1)"

#. type: Title -
#: ../Documentation-sedout/git-maintenance.txt:5
#, no-wrap
msgid "NAME"
msgstr "NAME"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:7
msgid "git-maintenance - Run tasks to optimize Git repository data"
msgstr "git-maintenance - Gitリポジトリのデータを最適化するためのタスクの実行"

#. type: Title -
#: ../Documentation-sedout/git-maintenance.txt:10
#, no-wrap
msgid "SYNOPSIS"
msgstr "SYNOPSIS"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:13
#, no-wrap
msgid "'git maintenance' run [<options>]\n"
msgstr "'git maintenance' run [<options>]\n"

#. type: Title -
#: ../Documentation-sedout/git-maintenance.txt:16
#, no-wrap
msgid "DESCRIPTION"
msgstr "DESCRIPTION"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:19
msgid ""
"Run tasks to optimize Git repository data, speeding up other Git commands "
"and reducing storage requirements for the repository."
msgstr "タスクを実行してGitリポジトリデータを最適化し、他のGitコマンドを高速化し、リポジトリのストレージ使用量を減らします。"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:25
msgid ""
"Git commands that add repository data, such as `git add` or `git fetch`, are "
"optimized for a responsive user experience. These commands do not take time "
"to optimize the Git data, since such optimizations scale with the full size "
"of the repository while these user commands each perform a relatively small "
"action."
msgstr "リポジトリのデータを追加するGitコマンド、例えば `git add` や `git fetch` は、応答性の良いユーザー体験(user experience)を実現するために最適化されています。これらのコマンドは、Gitデータを最適化するのに時間がかかりません。なぜなら、これらのユーザーコマンドはそれぞれ比較的小さなアクションを実行するのに対して、その最適化はリポジトリのフルサイズでスケールするからです。"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:28
msgid ""
"The `git maintenance` command provides flexibility for how to optimize the "
"Git repository."
msgstr "`git maintenance` コマンドはGitリポジトリを最適化する方法に柔軟性を提供します。"

#. type: Title -
#: ../Documentation-sedout/git-maintenance.txt:30
#, no-wrap
msgid "SUBCOMMANDS"
msgstr "SUBCOMMANDS"

#. type: Labeled list
#: ../Documentation-sedout/git-maintenance.txt:32
#, no-wrap
msgid "register"
msgstr "register"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:40
msgid ""
"Initialize Git config values so any scheduled maintenance will start running "
"on this repository. This adds the repository to the `maintenance.repo` "
"config variable in the current user's global config and enables some "
"recommended configuration values for `maintenance.<task>.schedule`. The "
"tasks that are enabled are safe for running in the background without "
"disrupting foreground processes."
msgstr "Git構成値を初期化して、スケジュールされたメンテナンスが、このリポジトリで実行を開始するようにします。 これにより、現在のユーザーのグローバル構成の `maintenance.repo` 構成変数にリポジトリが追加され、 `maintenance.<task>.schedule` の推奨構成値が有効になります。 有効になっているタスクは、フォアグラウンドプロセスを中断することなく、バックグラウンドで安全に実行できます。"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:45
msgid ""
"The `register` subcommand will also set the `maintenance.strategy` config "
"value to `incremental`, if this value is not previously set. The "
"`incremental` strategy uses the following schedule for each maintenance task:"
msgstr "`register` サブコマンドは、`maintenance.strategy` 構成値が以前に設定されていない場合、`maintenance.strategy` を `incremental` に設定します。 `incremental` 戦略では、メンテナンスタスクごとに以下のスケジュールを使用します:"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:48
msgid "`gc`: disabled."
msgstr "`gc`: disabled."

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:49
msgid "`commit-graph`: hourly."
msgstr "`commit-graph`: hourly."

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:50
msgid "`prefetch`: hourly."
msgstr "`prefetch`: hourly."

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:51
msgid "`loose-objects`: daily."
msgstr "`loose-objects`: daily."

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:52
msgid "`incremental-repack`: daily."
msgstr "`incremental-repack`: daily."

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:57
msgid ""
"`git maintenance register` will also disable foreground maintenance by "
"setting `maintenance.auto = false` in the current repository. This config "
"setting will remain after a `git maintenance unregister` command."
msgstr "`git maintenance register` は、現在のリポジトリで `maintenance.auto = false` を設定することにより、フォアグラウンドメンテナンスも無効にします。 この設定設定は、 `git maintenance unregister` コマンドの後も残ります。"

#. type: Labeled list
#: ../Documentation-sedout/git-maintenance.txt:58
#, no-wrap
msgid "run"
msgstr "run"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:64
msgid ""
"Run one or more maintenance tasks. If one or more `--task` options are "
"specified, then those tasks are run in that order. Otherwise, the tasks are "
"determined by which `maintenance.<task>.enabled` config options are true. By "
"default, only `maintenance.gc.enabled` is true."
msgstr "1つ以上のメンテナンスタスクを実行します。 1つ以上の `--task` オプションが指定されている場合、それらのタスクは指定した順序で実行されます。 それ以外の場合、タスクは、どの `maintenance.<task>.enabled` 構成オプションがtrueであるかによって決定されます。 デフォルトでは、 `maintenance.gc.enabled` のみがtrueです。"

#. type: Labeled list
#: ../Documentation-sedout/git-maintenance.txt:65
#, no-wrap
msgid "start"
msgstr "start"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:70
msgid ""
"Start running maintenance on the current repository. This performs the same "
"config updates as the `register` subcommand, then updates the background "
"scheduler to run `git maintenance run --scheduled` on an hourly basis."
msgstr "現在のリポジトリでメンテナンスの実行を開始します。 これにより、 `register` サブコマンドと同一構成の更新が実行され、バックグラウンドスケジューラが更新されて、1時間ごとに `git maintenance run --scheduled` が実行されます。"

#. type: Labeled list
#: ../Documentation-sedout/git-maintenance.txt:71
#, no-wrap
msgid "stop"
msgstr "stop"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:75
msgid ""
"Halt the background maintenance schedule. The current repository is not "
"removed from the list of maintained repositories, in case the background "
"maintenance is restarted later."
msgstr "バックグラウンドメンテナンススケジュールを停止します。 バックグラウンドメンテナンスが後で再開された場合に備えて、現在のリポジトリはメンテナンスされたリポジトリのリストから削除されません。"

#. type: Labeled list
#: ../Documentation-sedout/git-maintenance.txt:76
#, no-wrap
msgid "unregister"
msgstr "unregister"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:80
msgid ""
"Remove the current repository from background maintenance. This only removes "
"the repository from the configured list. It does not stop the background "
"maintenance processes from running."
msgstr "現在のリポジトリをバックグラウンドメンテナンスから削除します。 構成済みリストからリポジトリが削除されるだけです。 バックグラウンドメンテナンスプロセスの実行を停止することはありません。"

#. type: Title -
#: ../Documentation-sedout/git-maintenance.txt:82
#, no-wrap
msgid "TASKS"
msgstr "TASKS"

#. type: Labeled list
#: ../Documentation-sedout/git-maintenance.txt:84
#, no-wrap
msgid "commit-graph"
msgstr "commit-graph"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:91
msgid ""
"The `commit-graph` job updates the `commit-graph` files incrementally, then "
"verifies that the written data is correct. The incremental write is safe to "
"run alongside concurrent Git processes since it will not expire `.graph` "
"files that were in the previous `commit-graph-chain` file. They will be "
"deleted by a later run based on the expiration delay."
msgstr "`commit-graph` ジョブは `commit-graph` ファイルを段階的に更新し、書き込まれたデータが正しいことを確認します。段階的書き込みは、前の `commit-graph-chain` ファイルにあった `.graph` ファイルを期限切れにしないため、並行Gitプロセスと一緒に安全に実行できます。 それらは、有効期限延長に基づいて、のちの実行で削除されます。"

#. type: Labeled list
#: ../Documentation-sedout/git-maintenance.txt:92
#, no-wrap
msgid "prefetch"
msgstr "prefetch"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:97
msgid ""
"The `prefetch` task updates the object directory with the latest objects "
"from all registered remotes. For each remote, a `git fetch` command is run. "
"The configured refspec is modified to place all requested refs within `refs/"
"prefetch/`. Also, tags are not updated."
msgstr "`prefetch` タスクは、登録されているすべてのリモートからの最新のオブジェクトでオブジェクトディレクトリを更新します。 リモートごとに、 `git fetch` コマンドが実行されます。 構成されたrefspecは、要求されたすべてのrefを `refs/prefetch/` 内に配置するように変更されます。 また、タグは更新されません。"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:104
msgid ""
"This is done to avoid disrupting the remote-tracking branches. The end users "
"expect these refs to stay unmoved unless they initiate a fetch.  With "
"prefetch task, however, the objects necessary to complete a later real fetch "
"would already be obtained, so the real fetch would go faster.  In the ideal "
"case, it will just become an update to a bunch of remote-tracking branches "
"without any object transfer."
msgstr "これは、リモート追跡ブランチの一時不通(disrupting)を回避するために行われます。 エンドユーザーは、フェッチを開始しない限り、これらのrefが移動されないままになることを期待しています。 ただし、prefetchタスクでは、後で実際のフェッチを完了するために必要なオブジェクトがすでに取得されているため、実際のフェッチはより高速になります。 理想的なケースでは、オブジェクトを転送せずに、一連のリモート追跡ブランチの更新ができます。"

#. type: Labeled list
#: ../Documentation-sedout/git-maintenance.txt:105
#, no-wrap
msgid "gc"
msgstr "gc"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:112
msgid ""
"Clean up unnecessary files and optimize the local repository. \"GC\" stands "
"for \"garbage collection,\" but this task performs many smaller tasks. This "
"task can be expensive for large repositories, as it repacks all Git objects "
"into a single pack-file. It can also be disruptive in some situations, as it "
"deletes stale data. See linkgit:git-gc[1] for more details on garbage "
"collection in Git."
msgstr "不要なファイルをクリーンアップし、ローカルリポジトリを最適化します。 「GC」は「ガベージコレクション」の略で、このタスクは多くの小さなタスクを実行します。 このタスクは、すべてのGitオブジェクトを単一のパックファイルに再パックするため、大規模なリポジトリではコストがかかる可能性があります。 また、古いデータを削除するため、状況によっては混乱を招く可能性があります。 Gitでのガベージコレクションの詳細については、 linkgit:git-gc[1] を参照してください。"

#. type: Labeled list
#: ../Documentation-sedout/git-maintenance.txt:113
#, no-wrap
msgid "loose-objects"
msgstr "loose-objects"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:127
msgid ""
"The `loose-objects` job cleans up loose objects and places them into pack-"
"files. In order to prevent race conditions with concurrent Git commands, it "
"follows a two-step process. First, it deletes any loose objects that already "
"exist in a pack-file; concurrent Git processes will examine the pack-file "
"for the object data instead of the loose object. Second, it creates a new "
"pack-file (starting with \"loose-\")  containing a batch of loose objects. "
"The batch size is limited to 50 thousand objects to prevent the job from "
"taking too long on a repository with many loose objects. The `gc` task "
"writes unreachable objects as loose objects to be cleaned up by a later step "
"only if they are not re-added to a pack-file; for this reason it is not "
"advisable to enable both the `loose-objects` and `gc` tasks at the same time."
msgstr "`loose-objects` ジョブは、緩いオブジェクト(loose objects)をクリーンアップし、パックファイルに配置します。 並行Gitコマンドによる競合状態を防ぐために、2段階で処理を行います。 まず、パックファイルにすでに存在する緩いオブジェクトを削除します。 並行Gitプロセスは、緩いオブジェクトではなく、オブジェクトデータのパックファイルを調べます。 次に、緩いオブジェクトのバッチを含む新しいパックファイル(`loose-` で始まる)を作成します。 バッチサイズは5万オブジェクトに制限されており、多量の緩いオブジェクトがあるリポジトリでジョブに時間がかかりすぎるのを防ぎます。 `gc` タスクは、到達不能なオブジェクトを、パックファイルに再追加されない場合にのみ、後の段階でクリーンアップされる緩いオブジェクトとして書き込みます。 このため、 `loose-objects` タスクと `gc` タスクの両方を同時に有効にすることはお勧めできません。"

#. type: Labeled list
#: ../Documentation-sedout/git-maintenance.txt:128
#, no-wrap
msgid "incremental-repack"
msgstr "incremental-repack"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:145
msgid ""
"The `incremental-repack` job repacks the object directory using the `multi-"
"pack-index` feature. In order to prevent race conditions with concurrent Git "
"commands, it follows a two-step process. First, it calls `git multi-pack-"
"index expire` to delete pack-files unreferenced by the `multi-pack-index` "
"file. Second, it calls `git multi-pack-index repack` to select several small "
"pack-files and repack them into a bigger one, and then update the `multi-"
"pack-index` entries that refer to the small pack-files to refer to the new "
"pack-file. This prepares those small pack-files for deletion upon the next "
"run of `git multi-pack-index expire`.  The selection of the small pack-files "
"is such that the expected size of the big pack-file is at least the batch "
"size; see the `--batch-size` option for the `repack` subcommand in linkgit:"
"git-multi-pack-index[1]. The default batch-size is zero, which is a special "
"case that attempts to repack all pack-files into a single pack-file."
msgstr "`incremental-repack` ジョブは、 `multi-pack-index` 機能を使用してオブジェクトディレクトリを再パックします。 並行Gitコマンドによる競合状態を防ぐために、2段階の処理を行います。 まず、 `gitmulti-pack-indexexpire` を呼び出して `multi-pack-index` ファイルによって参照されていないパックファイルを削除します。 次に、 `git multi-pack-index repack` を呼び出して、いくつかの小さなパックファイルを選択し、それらをより大きなファイルに再パックし、次に、小さなパックファイルを参照する `multi-pack-index` エントリを更新して、新しいパックファイルを参照します。 これにより、これらの小さなパックファイルは、次回の `gitmulti-pack-indexexpire` の実行時に削除できるようになります。 小さいパックファイルの選択は、大きいパックファイルの予想サイズが少なくともバッチサイズになるように行われます。 linkgit:git-multi-pack-index[1] の `repack` サブコマンドの `--batch-size` オプションを参照してください。 デフォルトのバッチサイズはゼロです。これは、すべてのパックファイルを単一のパックファイルに再パックしようとする特殊なケースです。"

#. type: Labeled list
#: ../Documentation-sedout/git-maintenance.txt:146
#, no-wrap
msgid "pack-refs"
msgstr "pack-refs"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:151
msgid ""
"The `pack-refs` task collects the loose reference files and collects them "
"into a single file. This speeds up operations that need to iterate across "
"many references. See linkgit:git-pack-refs[1] for more information."
msgstr "`pack-refs` タスクは、緩い参照ファイル(loose reference files)を収集し、それらを1つのファイルに纏めます。 これにより、多くの参照間で反復する必要のある操作が高速化されます。 詳細については、 linkgit:git-pack-refs[1] を参照してください。"

#. type: Title -
#: ../Documentation-sedout/git-maintenance.txt:153
#, no-wrap
msgid "OPTIONS"
msgstr "OPTIONS"

#. type: Labeled list
#: ../Documentation-sedout/git-maintenance.txt:154
#, no-wrap
msgid "`--auto`"
msgstr "`--auto`"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:161
msgid ""
"When combined with the `run` subcommand, run maintenance tasks only if "
"certain thresholds are met. For example, the `gc` task runs when the number "
"of loose objects exceeds the number stored in the `gc.auto` config setting, "
"or when the number of pack-files exceeds the `gc.autoPackLimit` config "
"setting. Not compatible with the `--schedule` option."
msgstr "`run` サブコマンドと組み合わせると、特定のしきい値が満たされた場合にのみメンテナンスタスクを実行します。 たとえば、 `gc` タスクは、緩いオブジェクトの数が `gc.auto` 構成設定に格納されている数を超えた場合、またはパックファイルの数が `gc.autoPackLimit` 構成設定を超えた場合に実行されます。 `--schedule` オプションとは互換性がありません。"

#. type: Labeled list
#: ../Documentation-sedout/git-maintenance.txt:162
#, no-wrap
msgid "`--schedule`"
msgstr "`--schedule`"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:171
msgid ""
"When combined with the `run` subcommand, run maintenance tasks only if "
"certain time conditions are met, as specified by the `maintenance.<task>."
"schedule` config value for each `<task>`.  This config value specifies a "
"number of seconds since the last time that task ran, according to the "
"`maintenance.<task>.lastRun` config value. The tasks that are tested are "
"those provided by the `--task=<task>` option(s) or those with `maintenance."
"<task>.enabled` set to true."
msgstr "`run` サブコマンドと組み合わせると、 各 `<task>` の `maintenance.<task>.schedule` 構成値で指定されているように、特定の時間条件が満たされた場合にのみメンテナンスタスクを実行します。 この構成値は、`maintenance.<task>.lastRun` 構成値に従って、そのタスクが最後に実行されてからの秒数を指定します。 テストされるタスクは、 `--task=<task>` オプションによって提供されるタスク、または `maintenance.<task>.enabled` がtrueに設定されているタスクです。"

#. type: Labeled list
#: ../Documentation-sedout/git-maintenance.txt:172
#, no-wrap
msgid "`--quiet`"
msgstr "`--quiet`"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:174
msgid "Do not report progress or other information over `stderr`."
msgstr "(stderrを介して)進捗状況やその他の情報を報告しないでください。"

#. type: Labeled list
#: ../Documentation-sedout/git-maintenance.txt:175
#, no-wrap
msgid "`--task=<task>`"
msgstr "`--task=<task>`"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:181
msgid ""
"If this option is specified one or more times, then only run the specified "
"tasks in the specified order. If no `--task=<task>` arguments are specified, "
"then only the tasks with `maintenance.<task>.enabled` configured as `true` "
"are considered.  See the 'TASKS' section for the list of accepted `<task>` "
"values."
msgstr "このオプションを1回以上指定した場合は、指定したタスクを指定した順序でのみ実行してください。 `--task=<task>` 引数が指定されていない場合、 `maintenance.<task>.enabled` が `true` として構成されているタスクのみが考慮されます。 受け入れられる `<task>` 値のリストについては、「TASKS」セクションを参照してください。"

#. type: Labeled list
#: ../Documentation-sedout/git-maintenance.txt:182
#, no-wrap
msgid "`--scheduler=auto|crontab|systemd-timer|launchctl|schtasks`"
msgstr "`--scheduler=auto|crontab|systemd-timer|launchctl|schtasks`"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:192
msgid ""
"When combined with the `start` subcommand, specify the scheduler for running "
"the hourly, daily and weekly executions of `git maintenance run`.  Possible "
"values for `<scheduler>` are `auto`, `crontab` (POSIX), `systemd-timer` "
"(Linux), `launchctl` (macOS), and `schtasks` (Windows). When `auto` is "
"specified, the appropriate platform-specific scheduler is used; on Linux, "
"`systemd-timer` is used if available, otherwise `crontab`. Default is `auto`."
msgstr "`start` サブコマンドと組み合わせる場合は、 `git maintenance run` を毎時(hourly)、毎日(daily)、毎週(weekly)に実行するスケジューラーを指定します。 `<scheduler>` に指定できる値は、 `auto` 、 `crontab`(POSIX)、 `systemd-timer`(Linux)、 `launchctl`(macOS)、 `schtasks`(Windows) です。 `auto` が指定されている場合、適切なプラットフォーム固有のスケジューラが使用されます。 Linuxでは、使用可能な場合は `systemd-timer` が使用され、 `systemd-timer` が使用できない場合は `crontab` が使用されます。 デフォルトは`auto`です。"

#. type: Title -
#: ../Documentation-sedout/git-maintenance.txt:195
#, no-wrap
msgid "TROUBLESHOOTING"
msgstr "TROUBLESHOOTING"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:201
msgid ""
"The `git maintenance` command is designed to simplify the repository "
"maintenance patterns while minimizing user wait time during Git commands.  A "
"variety of configuration options are available to allow customizing this "
"process. The default maintenance options focus on operations that complete "
"quickly, even on large repositories."
msgstr "`git maintenance` コマンドは、Gitコマンド実行中のユーザーの待ち時間を最小限に抑えながら、リポジトリのメンテナンスパターンを簡素化するように設計されています。この処理をカスタマイズできるように、さまざまな構成オプションを利用できます。 デフォルトのメンテナンスオプションは、大規模なリポジトリであっても、迅速に完了する操作に重点を置いています。"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:208
msgid ""
"Users may find some cases where scheduled maintenance tasks do not run as "
"frequently as intended. Each `git maintenance run` command takes a lock on "
"the repository's object database, and this prevents other concurrent `git "
"maintenance run` commands from running on the same repository. Without this "
"safeguard, competing processes could leave the repository in an "
"unpredictable state."
msgstr "スケジュールされたメンテナンスタスクが、ユーザーが意図したほど頻繁に実行されない場合があります。 各 `git maintenance run` コマンドは、リポジトリのオブジェクトデータベースをロックします。これにより、他の並列の `git maintenance run` コマンドが同じリポジトリで実行されなくなります。この安全柵がないと、競合するプロセスによってリポジトリが予測できない状態になる可能性があります。"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:219
msgid ""
"The background maintenance schedule runs `git maintenance run` processes on "
"an hourly basis. Each run executes the \"hourly\" tasks. At midnight, that "
"process also executes the \"daily\" tasks. At midnight on the first day of "
"the week, that process also executes the \"weekly\" tasks. A single process "
"iterates over each registered repository, performing the scheduled tasks for "
"that frequency. Depending on the number of registered repositories and their "
"sizes, this process may take longer than an hour.  In this case, multiple "
"`git maintenance run` commands may run on the same repository at the same "
"time, colliding on the object database lock. This results in one of the two "
"tasks not running."
msgstr "バックグラウンドメンテナンススケジュールは、1時間ごとに `git maintenance run` プロセスを実行します。 実行するたびに、「毎時」のタスクが実行されます。 深夜に、そのプロセスは「毎日」のタスクも実行します。 週の最初の日の深夜に、そのプロセスは「毎週」のタスクも実行します。 単一のプロセスが登録された各リポジトリを反復処理し、その頻度でスケジュールされたタスクを実行します。 登録されているリポジトリの数とそのサイズによっては、このプロセスに1時間以上かかる場合があります。 この場合、複数の `git maintenance run` コマンドが同じリポジトリで同時に実行され、オブジェクトデータベースのロックを引き起こす可能性があります。 これにより、2つのタスクのどちらかが実行されなくなります。"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:226
msgid ""
"If you find that some maintenance windows are taking longer than one hour to "
"complete, then consider reducing the complexity of your maintenance tasks. "
"For example, the `gc` task is much slower than the `incremental-repack` "
"task. However, this comes at a cost of a slightly larger object database. "
"Consider moving more expensive tasks to be run less frequently."
msgstr "一部のメンテナンスウィンドウの完了に1時間以上かかる場合は、メンテナンスタスクの複雑さを軽減することを検討してください。 たとえば、 `incremental-repack` タスクは `gc` タスクよりもはるかに高速です。しかし、その代償として、オブジェクトデータベースが若干大きくなってしまいます。 より高価なタスクを移動して、実行頻度を減らすことを検討してください。"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:235
msgid ""
"Expert users may consider scheduling their own maintenance tasks using a "
"different schedule than is available through `git maintenance start` and Git "
"configuration options. These users should be aware of the object database "
"lock and how concurrent `git maintenance run` commands behave.  Further, the "
"`git gc` command should not be combined with `git maintenance run` commands. "
"`git gc` modifies the object database but does not take the lock in the same "
"way as `git maintenance run`. If possible, use `git maintenance run --"
"task=gc` instead of `git gc`."
msgstr "エキスパートユーザーは、 `git maintenance start` およびGit構成オプションで利用できるスケジュールとは異なるスケジュールを使用して独自のメンテナンスタスクをスケジュールすることを検討できます。 これらのユーザーは、オブジェクトデータベースのロックと、並列実行の `git maintenance run` コマンドの動作に注意する必要があります。 さらに、`git gc` コマンドを `git maintenance run` コマンドと組み合わせないでください。 `git gc` はオブジェクトデータベースを変更しますが、 `git maintenance run` のようにロックを取得しません。 可能であれば、 `git gc` の代わりに `git maintenance run --task=gc` を使用してください。"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:239
msgid ""
"The following sections describe the mechanisms put in place to run "
"background maintenance by `git maintenance start` and how to customize them."
msgstr "次のセクションでは、 `git maintenance start` によるバックグラウンドメンテナンスを実行するために導入されたメカニズムとそれらをカスタマイズする方法について説明します。"

#. type: Title -
#: ../Documentation-sedout/git-maintenance.txt:241
#, no-wrap
msgid "BACKGROUND MAINTENANCE ON POSIX SYSTEMS"
msgstr "BACKGROUND MAINTENANCE ON POSIX SYSTEMS"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:247
msgid ""
"The standard mechanism for scheduling background tasks on POSIX systems is "
"cron(8). This tool executes commands based on a given schedule. The current "
"list of user-scheduled tasks can be found by running `crontab -l`.  The "
"schedule written by `git maintenance start` is similar to this:"
msgstr "POSIXシステムでバックグラウンドタスクをスケジュールするための標準メカニズムは cron(8) です。 このツールは、指定されたスケジュールに基づいてコマンドを実行します。 ユーザーがスケジュールしたタスクの現在のリストは、`crontab -l` を実行することで見つけることができます。 `git maintenances tart` が書いたスケジュールは以下のようになります:"

#. type: delimited block -
#: ../Documentation-sedout/git-maintenance.txt:253
#, no-wrap
msgid ""
"# BEGIN GIT MAINTENANCE SCHEDULE\n"
"# The following schedule was created by Git\n"
"# Any edits made in this region might be\n"
"# replaced in the future by a Git command.\n"
msgstr ""
"# BEGIN GIT MAINTENANCE SCHEDULE\n"
"# The following schedule was created by Git\n"
"# Any edits made in this region might be\n"
"# replaced in the future by a Git command.\n"

#. type: delimited block -
#: ../Documentation-sedout/git-maintenance.txt:257
#, no-wrap
msgid ""
"0 1-23 * * * \"/<path>/git\" --exec-path=\"/<path>\" for-each-repo --config=maintenance.repo maintenance run --schedule=hourly\n"
"0 0 * * 1-6 \"/<path>/git\" --exec-path=\"/<path>\" for-each-repo --config=maintenance.repo maintenance run --schedule=daily\n"
"0 0 * * 0 \"/<path>/git\" --exec-path=\"/<path>\" for-each-repo --config=maintenance.repo maintenance run --schedule=weekly\n"
msgstr ""
"0 1-23 * * * \"/<path>/git\" --exec-path=\"/<path>\" for-each-repo --config=maintenance.repo maintenance run --schedule=hourly\n"
"0 0 * * 1-6 \"/<path>/git\" --exec-path=\"/<path>\" for-each-repo --config=maintenance.repo maintenance run --schedule=daily\n"
"0 0 * * 0 \"/<path>/git\" --exec-path=\"/<path>\" for-each-repo --config=maintenance.repo maintenance run --schedule=weekly\n"

#. type: delimited block -
#: ../Documentation-sedout/git-maintenance.txt:259
#, no-wrap
msgid "# END GIT MAINTENANCE SCHEDULE\n"
msgstr "# END GIT MAINTENANCE SCHEDULE\n"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:264
msgid ""
"The comments are used as a region to mark the schedule as written by Git.  "
"Any modifications within this region will be completely deleted by `git "
"maintenance stop` or overwritten by `git maintenance start`."
msgstr "コメントは、Gitによって作成されたスケジュールをマークするための領域として使用されます。 この領域内の変更は、 `git maintenance stop` によって完全に削除されるか `git maintenance start` によって上書きされます。"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:270
msgid ""
"The `crontab` entry specifies the full path of the `git` executable to "
"ensure that the executed `git` command is the same one with which `git "
"maintenance start` was issued independent of `PATH`. If the same user runs "
"`git maintenance start` with multiple Git executables, then only the latest "
"executable is used."
msgstr "`crontab` エントリは、実行された `git` コマンドが `PATH` とは無関係に `git maintenance start` が発行したものと同じであることを保証するために `git` 実行可能ファイルのフルパスを指定します。 同じユーザーが複数のGit実行可能ファイルで `git maintenance start` を実行する場合、最新の実行可能ファイルのみが使用されます。"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:279
msgid ""
"These commands use `git for-each-repo --config=maintenance.repo` to run `git "
"maintenance run --schedule=<frequency>` on each repository listed in the "
"multi-valued `maintenance.repo` config option. These are typically loaded "
"from the user-specific global config. The `git maintenance` process then "
"determines which maintenance tasks are configured to run on each repository "
"with each `<frequency>` using the `maintenance.<task>.schedule` config "
"options. These values are loaded from the global or repository config values."
msgstr "これらのコマンドは、 `git for-each-repo --config=maintenance.repo` を使用して、複数値の `maintenance.repo` 構成オプションにリストされている各リポジトリで `git maintenance run --schedule=<frequency>` を実行します。 これらは通常、ユーザー固有のグローバル構成からロードされます。 次に、 `git maintenance` プロセスは `maintenance.<task>.schedule` 設定オプションを使用して、 各 `<frequency>` で各リポジトリで実行するように設定されているメンテナンスタスクを決定します。 これらの値は、グローバルまたはリポジトリ構成値からロードされます。"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:289
msgid ""
"If the config values are insufficient to achieve your desired background "
"maintenance schedule, then you can create your own schedule. If you run "
"`crontab -e`, then an editor will load with your user-specific `cron` "
"schedule. In that editor, you can add your own schedule lines. You could "
"start by adapting the default schedule listed earlier, or you could read the "
"crontab(5) documentation for advanced scheduling techniques. Please do use "
"the full path and `--exec-path` techniques from the default schedule to "
"ensure you are executing the correct binaries in your schedule."
msgstr "構成値が、目的のバックグラウンドメンテナンススケジュールを達成するには不十分な場合は、あなた独自のスケジュールを作成できます。 `crontab -e` を実行すると、エディターはユーザー固有の `cron` スケジュールをロードします。 そのエディターでは、独自のスケジュール行を追加できます。 あなたは前述のデフォルトのスケジュールを採用することから始めるか、あるいは高度なスケジューリング手法について crontab(5) のドキュメントを読むことができます。 あなたのスケジュールで正しいバイナリを実行していることを確認するために、デフォルトのスケジュールから、フルパスと `--exec-path` の手法を流用してください。"

#. type: Title -
#: ../Documentation-sedout/git-maintenance.txt:292
#, no-wrap
msgid "BACKGROUND MAINTENANCE ON LINUX SYSTEMD SYSTEMS"
msgstr "BACKGROUND MAINTENANCE ON LINUX SYSTEMD SYSTEMS"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:297
msgid ""
"While Linux supports `cron`, depending on the distribution, `cron` may be an "
"optional package not necessarily installed. On modern Linux distributions, "
"systemd timers are superseding it."
msgstr "Linux は `cron` をサポートしていますが、ディストリビューションによっては `cron` はオプションパッケージで、必ずしもインストールされるとは限りません。最近の Linux ディストリビューションでは、systemd タイマー がこれに取って代わっています。"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:300
msgid ""
"If user systemd timers are available, they will be used as a replacement of "
"`cron`."
msgstr "ユーザーsystemdタイマーが使用可能な場合、それらが `cron` の代わりに使用されます。"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:305
msgid ""
"In this case, `git maintenance start` will create user systemd timer units "
"and start the timers. The current list of user-scheduled tasks can be found "
"by running `systemctl --user list-timers`. The timers written by `git "
"maintenance start` are similar to this:"
msgstr "この場合、 `git Maintenance start` はユーザーsystemdタイマーユニットを作成し、タイマーを開始します。 ユーザーがスケジュールしたタスクの現在のリストは、  `systemctl --user list-timers` を実行することで見つけることができます。  `git maintenance start` によって書かれたタイマー以下のような感じになります:"

#. type: delimited block -
#: ../Documentation-sedout/git-maintenance.txt:312
#, no-wrap
msgid ""
"$ systemctl --user list-timers\n"
"NEXT                         LEFT          LAST                         PASSED     UNIT                         ACTIVATES\n"
"Thu 2021-04-29 19:00:00 CEST 42min left    Thu 2021-04-29 18:00:11 CEST 17min ago  git-maintenance@hourly.timer git-maintenance@hourly.service\n"
"Fri 2021-04-30 00:00:00 CEST 5h 42min left Thu 2021-04-29 00:00:11 CEST 18h ago    git-maintenance@daily.timer  git-maintenance@daily.service\n"
"Mon 2021-05-03 00:00:00 CEST 3 days left   Mon 2021-04-26 00:00:11 CEST 3 days ago git-maintenance@weekly.timer git-maintenance@weekly.service\n"
msgstr ""
"$ systemctl --user list-timers\n"
"NEXT                         LEFT          LAST                         PASSED     UNIT                         ACTIVATES\n"
"Thu 2021-04-29 19:00:00 CEST 42min left    Thu 2021-04-29 18:00:11 CEST 17min ago  git-maintenance@hourly.timer git-maintenance@hourly.service\n"
"Fri 2021-04-30 00:00:00 CEST 5h 42min left Thu 2021-04-29 00:00:11 CEST 18h ago    git-maintenance@daily.timer  git-maintenance@daily.service\n"
"Mon 2021-05-03 00:00:00 CEST 3 days left   Mon 2021-04-26 00:00:11 CEST 3 days ago git-maintenance@weekly.timer git-maintenance@weekly.service\n"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:315
msgid "One timer is registered for each `--schedule=<frequency>` option."
msgstr "`--schedule=<frequency>` オプションごとに1つのタイマーが登録されます。"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:317
msgid ""
"The definition of the systemd units can be inspected in the following files:"
msgstr "systemdユニットの定義は、以下のファイルで調べることができます:"

#. type: delimited block -
#: ../Documentation-sedout/git-maintenance.txt:324
#, no-wrap
msgid ""
"~/.config/systemd/user/git-maintenance@.timer\n"
"~/.config/systemd/user/git-maintenance@.service\n"
"~/.config/systemd/user/timers.target.wants/git-maintenance@hourly.timer\n"
"~/.config/systemd/user/timers.target.wants/git-maintenance@daily.timer\n"
"~/.config/systemd/user/timers.target.wants/git-maintenance@weekly.timer\n"
msgstr ""
"~/.config/systemd/user/git-maintenance@.timer\n"
"~/.config/systemd/user/git-maintenance@.service\n"
"~/.config/systemd/user/timers.target.wants/git-maintenance@hourly.timer\n"
"~/.config/systemd/user/timers.target.wants/git-maintenance@daily.timer\n"
"~/.config/systemd/user/timers.target.wants/git-maintenance@weekly.timer\n"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:330
msgid ""
"`git maintenance start` will overwrite these files and start the timer again "
"with `systemctl --user`, so any customization should be done by creating a "
"drop-in file, i.e. a `.conf` suffixed file in the `~/.config/systemd/user/"
"git-maintenance@.service.d` directory."
msgstr "`git maintenance start` はこれらのファイルを上書きし、 `systemctl --user` でタイマーを再開するため、カスタマイズは差し込み式ファイル(drop-in file)ドロップインファイル、つまり `~/.config/systemd/user/git-maintenance@.service.d` ディレクトリに `.conf` 拡張子のファイルを作成して行う必要があります。"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:333
msgid ""
"`git maintenance stop` will stop the user systemd timers and delete the "
"above mentioned files."
msgstr "`git maintenance stop` は、ユーザーのsystemdタイマーを停止し、上記のファイルを削除します。"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:335
msgid "For more details, see `systemd.timer(5)`."
msgstr "詳細は `systemd.timer(5)` を参照して下さい。"

#. type: Title -
#: ../Documentation-sedout/git-maintenance.txt:338
#, no-wrap
msgid "BACKGROUND MAINTENANCE ON MACOS SYSTEMS"
msgstr "BACKGROUND MAINTENANCE ON MACOS SYSTEMS"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:345
msgid ""
"While macOS technically supports `cron`, using `crontab -e` requires "
"elevated privileges and the executed process does not have a full user "
"context. Without a full user context, Git and its credential helpers cannot "
"access stored credentials, so some maintenance tasks are not functional."
msgstr "macOSは技術的には `cron` をサポートしていますが、 `crontab -e` を使用するには昇格された権限が必要であり、実行されるプロセスには完全なユーザーコンテキストがありません。 完全なユーザーコンテキストがないと、Gitとその資格情報ヘルパーは保存されている資格情報にアクセスできないため、一部のメンテナンスタスクは機能しません。"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:350
msgid ""
"Instead, `git maintenance start` interacts with the `launchctl` tool, which "
"is the recommended way to schedule timed jobs in macOS. Scheduling "
"maintenance through `git maintenance (start|stop)` requires some `launchctl` "
"features available only in macOS 10.11 or later."
msgstr "代わりに、 `git maintenance start` は `launchctl` ツールと相呼応します。これはmacOSで時限ジョブをスケジュールするための推奨される方法です。 `git maintenance (start|stop)` によるメンテナンスのスケジュールには、macOS10.11以降でのみ利用可能ないくつかの `launchctl` 機能が必要です。"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:354
msgid ""
"Your user-specific scheduled tasks are stored as XML-formatted `.plist` "
"files in `~/Library/LaunchAgents/`. You can see the currently-registered "
"tasks using the following command:"
msgstr "ユーザー固有のスケジュールされたタスクは、XML形式の `.plist` ファイルとして `~/Library/LaunchAgents/` に保存されます。 あなたは以下のコマンドを使用して、現在登録されているタスクを確認できます:"

#. type: delimited block -
#: ../Documentation-sedout/git-maintenance.txt:360
#, no-wrap
msgid ""
"$ ls ~/Library/LaunchAgents/org.git-scm.git*\n"
"org.git-scm.git.daily.plist\n"
"org.git-scm.git.hourly.plist\n"
"org.git-scm.git.weekly.plist\n"
msgstr ""
"$ ls ~/Library/LaunchAgents/org.git-scm.git*\n"
"org.git-scm.git.daily.plist\n"
"org.git-scm.git.hourly.plist\n"
"org.git-scm.git.weekly.plist\n"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:366
msgid ""
"One task is registered for each `--schedule=<frequency>` option. To inspect "
"how the XML format describes each schedule, open one of these `.plist` files "
"in an editor and inspect the `<array>` element following the "
"`<key>StartCalendarInterval</key>` element."
msgstr "`--schedule=<frequency>` オプションごとに1つのタスクが登録されます。 XML形式で各スケジュールがどのように記述されているかを調べるには、これらの `.plist` ファイルの1つをエディターで開き、 `<key>StartCalendarInterval</key>` 要素に続く`<array>` 要素を調べます。"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:372
msgid ""
"`git maintenance start` will overwrite these files and register the tasks "
"again with `launchctl`, so any customizations should be done by creating "
"your own `.plist` files with distinct names. Similarly, the `git maintenance "
"stop` command will unregister the tasks with `launchctl` and delete the `."
"plist` files."
msgstr "`git maintenance start` はこれらのファイルを上書きし、タスクを `launchctl` に再度登録するため、カスタマイズは、個別の名前で独自の `.plist` ファイルを作成して行う必要があります。 同様に、 `git maintenance stop` コマンドは `launchctl` でタスクの登録を解除し、 `.plist` ファイルを削除します。"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:375
msgid ""
"To create more advanced customizations to your background tasks, see "
"launchctl.plist(5) for more information."
msgstr "バックグラウンドタスクのより高度なカスタマイズの作成の詳細については launchctl.plist(5) を参照してください。"

#. type: Title -
#: ../Documentation-sedout/git-maintenance.txt:378
#, no-wrap
msgid "BACKGROUND MAINTENANCE ON WINDOWS SYSTEMS"
msgstr "BACKGROUND MAINTENANCE ON WINDOWS SYSTEMS"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:387
msgid ""
"Windows does not support `cron` and instead has its own system for "
"scheduling background tasks. The `git maintenance start` command uses the "
"`schtasks` command to submit tasks to this system. You can inspect all "
"background tasks using the Task Scheduler application. The tasks added by "
"Git have names of the form `Git Maintenance (<frequency>)`.  The Task "
"Scheduler GUI has ways to inspect these tasks, but you can also export the "
"tasks to XML files and view the details there."
msgstr "Windowsは `cron` をサポートしておらず、代わりにバックグラウンドタスクをスケジュールするための独自のシステムを備えています。 `git maintenance start` コマンドは、 `schtasks` コマンドを使用してこのシステムにタスクを送信します。 タスクスケジューラアプリケーションを使用して、すべてのバックグラウンドタスクを検査できます。 Gitによって追加されたタスクには、 `Git Maintenance (<frequency>)` という形式の名前が付いています。 タスクスケジューラGUIには、これらのタスクを検査する方法がありますが、タスクをXMLファイルにエクスポートして、そこで詳細を表示することもできます。"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:393
msgid ""
"Note that since Git is a console application, these background tasks create "
"a console window visible to the current user. This can be changed manually "
"by selecting the \"Run whether user is logged in or not\" option in Task "
"Scheduler. This change requires a password input, which is why `git "
"maintenance start` does not select it by default."
msgstr "注意: Gitはコンソールアプリケーションであるため、これらのバックグラウンドタスクにより、現在のユーザーに表示されるコンソールウィンドウが作成されることに注意してください。 これは、タスクスケジューラの「Run whether user is logged in or not」(ユーザーがログインしているかどうかに関係なく実行する)オプションを選択することで手動で変更できます。 この変更にはパスワードの入力が必要で、そのため `git maintenance start` はデフォルトではこのオプションを選択しません。"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:397
msgid ""
"If you want to customize the background tasks, please rename the tasks so "
"future calls to `git maintenance (start|stop)` do not overwrite your custom "
"tasks."
msgstr "バックグラウンドタスクをカスタマイズする場合は、タスクの名前を変更して、その後に `git maintenance (start|stop)` 」を呼び出してもカスタムタスクが上書きされないようにしてください。"

#. type: Title -
#: ../Documentation-sedout/git-maintenance.txt:400
#, no-wrap
msgid "GIT"
msgstr "GIT"

#. type: Plain text
#: ../Documentation-sedout/git-maintenance.txt:401
msgid "Part of the linkgit:git[1] suite"
msgstr "Part of the linkgit:git[1] suite"
