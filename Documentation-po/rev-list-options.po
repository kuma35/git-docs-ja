# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 0.0\n"
"POT-Creation-Date: 2021-10-01 00:25+0900\n"
"PO-Revision-Date: 2021-10-21 02:58+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title ~
#: ../Documentation/rev-list-options.txt:2
#, no-wrap
msgid "Commit Limiting"
msgstr "Commit Limiting"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:7
msgid ""
"Besides specifying a range of commits that should be listed using the "
"special notations explained in the description, additional commit limiting "
"may be applied."
msgstr "ここで説明されている特別な表記法を使用してリストする必要があるコミットの範囲を指定することに加えて、追加のコミット制限が適用される場合があります。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:12
msgid ""
"Using more options generally further limits the output (e.g.  "
"`--since=<date1>` limits to commits newer than `<date1>`, and using it with "
"`--grep=<pattern>` further limits to commits whose log message has a line "
"that matches `<pattern>`), unless otherwise noted."
msgstr "より多くのオプションを使用すると、通常、出力がさらに制限されます(たとえば、`--since=<date1>`は`<date1>`より新しいコミットに制限され、`--grep=<pattern>`と一緒に使用すると、ログメッセージに`<pattern>`と一致する行があるコミットにさらに制限されます)。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:15
msgid ""
"Note that these are applied before commit ordering and formatting options, "
"such as `--reverse`."
msgstr "注意: これらは、`--reverse`などのコミット順序およびフォーマットオプションの前に適用されることに注意してください。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:16
#, no-wrap
msgid "-<number>"
msgstr "-<number>"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:17
#, no-wrap
msgid "-n <number>"
msgstr "-n <number>"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:18
#, no-wrap
msgid "--max-count=<number>"
msgstr "--max-count=<number>"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:20
msgid "Limit the number of commits to output."
msgstr "出力するコミットの数を制限します。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:21
#, no-wrap
msgid "--skip=<number>"
msgstr "--skip=<number>"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:23
msgid "Skip 'number' commits before starting to show the commit output."
msgstr "コミット出力の表示を開始する前に、'number'個のコミットをスキップします。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:24
#, no-wrap
msgid "--since=<date>"
msgstr "--since=<date>"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:25
#, no-wrap
msgid "--after=<date>"
msgstr "--after=<date>"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:27
msgid "Show commits more recent than a specific date."
msgstr "指定の日付よりも新しいコミットを表示します。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:28
#, no-wrap
msgid "--until=<date>"
msgstr "--until=<date>"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:29
#, no-wrap
msgid "--before=<date>"
msgstr "--before=<date>"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:31
msgid "Show commits older than a specific date."
msgstr "指定の日付より古いコミットを表示します。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:33
#, no-wrap
msgid "--max-age=<timestamp>"
msgstr "--max-age=<timestamp>"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:34
#, no-wrap
msgid "--min-age=<timestamp>"
msgstr "--min-age=<timestamp>"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:36
msgid "Limit the commits output to specified time range."
msgstr "コミット出力を指定された時間範囲に制限します。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:38
#, no-wrap
msgid "--author=<pattern>"
msgstr "--author=<pattern>"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:39
#, no-wrap
msgid "--committer=<pattern>"
msgstr "--committer=<pattern>"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:45
msgid ""
"Limit the commits output to ones with author/committer header lines that "
"match the specified pattern (regular expression).  With more than one "
"`--author=<pattern>`, commits whose author matches any of the given patterns "
"are chosen (similarly for multiple `--committer=<pattern>`)."
msgstr "コミット出力を、指定されたパターン(正規表現)に一致する作成者/コミッターヘッダー行を持つものに制限します。複数の`--author=<pattern>`がある場合、作成者が指定されたパターンのいずれかに一致するコミットが選択されます(複数の`--committer=<pattern>`の場合も同様)。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:46
#, no-wrap
msgid "--grep-reflog=<pattern>"
msgstr "--grep-reflog=<pattern>"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:52
msgid ""
"Limit the commits output to ones with reflog entries that match the "
"specified pattern (regular expression). With more than one `--grep-reflog`, "
"commits whose reflog message matches any of the given patterns are chosen.  "
"It is an error to use this option unless `--walk-reflogs` is in use."
msgstr "コミット出力を、指定されたパターン(正規表現)に一致するreflogエントリを持つものに制限します。複数の`--grep-reflog`を使用すると、指定されたパターンのいずれかに一致するreflogメッセージを持つコミットが選択されます。`--walk-reflogs`が使用されていない限り、このオプションを使用するとエラーになります。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:53
#, no-wrap
msgid "--grep=<pattern>"
msgstr "--grep=<pattern>"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:59
msgid ""
"Limit the commits output to ones with log message that matches the specified "
"pattern (regular expression).  With more than one `--grep=<pattern>`, "
"commits whose message matches any of the given patterns are chosen (but see "
"`--all-match`)."
msgstr "コミット出力を、指定されたパターン(正規表現)に一致するログメッセージを持つものに制限します。複数の`--grep=<pattern>`を使用すると、指定されたパターンのいずれかにメッセージが一致するコミットが選択されます(全てに一致するコミットだけを選択したい場合、`--all-match`を参照してください)。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:63
msgid ""
"When `--notes` is in effect, the message from the notes is matched as if it "
"were part of the log message."
msgstr "`--notes`が有効な場合、ノートからのメッセージは、ログメッセージの一部であるかのようにマッチングされます。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:65
#, no-wrap
msgid "--all-match"
msgstr "--all-match"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:68
msgid ""
"Limit the commits output to ones that match all given `--grep`, instead of "
"ones that match at least one."
msgstr "コミット出力を、少なくとも1つに一致するものではなく、指定されたすべての`--grep`に一致するものに制限します。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:69
#, no-wrap
msgid "--invert-grep"
msgstr "--invert-grep"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:72
msgid ""
"Limit the commits output to ones with log message that do not match the "
"pattern specified with `--grep=<pattern>`."
msgstr "コミット出力を、`--grep=<pattern>`で指定されたパターンと一致しないログメッセージを持つものに制限します。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:73
#, no-wrap
msgid "-i"
msgstr "-i"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:74
#, no-wrap
msgid "--regexp-ignore-case"
msgstr "--regexp-ignore-case"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:77
msgid ""
"Match the regular expression limiting patterns without regard to letter "
"case."
msgstr "大文字小文字に関係なく、正規表現の制限パターンに一致します。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:78
#, no-wrap
msgid "--basic-regexp"
msgstr "--basic-regexp"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:81
msgid ""
"Consider the limiting patterns to be basic regular expressions; this is the "
"default."
msgstr "制限パターンを基本正規表現として扱います。これがデフォルトです。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:82
#, no-wrap
msgid "-E"
msgstr "-E"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:83
#, no-wrap
msgid "--extended-regexp"
msgstr "--extended-regexp"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:86
msgid ""
"Consider the limiting patterns to be extended regular expressions instead of "
"the default basic regular expressions."
msgstr "制限パターンを、デフォルトの基本正規表現の代わりに拡張正規表現として扱います。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:87
#, no-wrap
msgid "-F"
msgstr "-F"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:88
#, no-wrap
msgid "--fixed-strings"
msgstr "--fixed-strings"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:91
msgid ""
"Consider the limiting patterns to be fixed strings (don't interpret pattern "
"as a regular expression)."
msgstr "制限パターンを固定文字列として扱います(パターンを正規表現として解釈しないでください)。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:92
#, no-wrap
msgid "-P"
msgstr "-P"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:93
#, no-wrap
msgid "--perl-regexp"
msgstr "--perl-regexp"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:96
msgid "Consider the limiting patterns to be Perl-compatible regular expressions."
msgstr "制限パターンをPerl互換の正規表現として扱います。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:100
msgid ""
"Support for these types of regular expressions is an optional compile-time "
"dependency. If Git wasn't compiled with support for them providing this "
"option will cause it to die."
msgstr "これらのタイプの正規表現のサポートは、コンパイル時オプションに依存します。Gitが当該のサポート付きでコンパイルされていない場合、このオプションを提供すると、Gitが死にます(die)。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:101
#, no-wrap
msgid "--remove-empty"
msgstr "--remove-empty"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:103
msgid "Stop when a given path disappears from the tree."
msgstr "指定されたパスがツリーから見えなくなったら停止(stop)します。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:104
#, no-wrap
msgid "--merges"
msgstr "--merges"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:106
msgid "Print only merge commits. This is exactly the same as `--min-parents=2`."
msgstr "マージコミットのみを印刷します。これは`--min-parents=2`とまったく同じです。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:107
#, no-wrap
msgid "--no-merges"
msgstr "--no-merges"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:110
msgid ""
"Do not print commits with more than one parent. This is exactly the same as "
"`--max-parents=1`."
msgstr "複数の親を持つコミットを出力しない。これは`--max-parents=1`とまったく同じです。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:111
#, no-wrap
msgid "--min-parents=<number>"
msgstr "--min-parents=<number>"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:112
#, no-wrap
msgid "--max-parents=<number>"
msgstr "--max-parents=<number>"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:113
#, no-wrap
msgid "--no-min-parents"
msgstr "--no-min-parents"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:114
#, no-wrap
msgid "--no-max-parents"
msgstr "--no-max-parents"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:119
msgid ""
"Show only commits which have at least (or at most) that many parent "
"commits. In particular, `--max-parents=1` is the same as `--no-merges`, "
"`--min-parents=2` is the same as `--merges`.  `--max-parents=0` gives all "
"root commits and `--min-parents=3` all octopus merges."
msgstr "量の多少に関わらず、とにかく複数の親コミットがあるコミットのみを表示します。特に、`--max-parents=1`は`--no-merges`と同じであり、`--min-parents=2`は`--merges`と同じです。`--max-parents=0`はすべてのルートコミットを提供し、`--min-parents=3`はすべてのタコ足マージ(octopus merges)を示します。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:123
msgid ""
"`--no-min-parents` and `--no-max-parents` reset these limits (to no limit)  "
"again.  Equivalent forms are `--min-parents=0` (any commit has 0 or more "
"parents) and `--max-parents=-1` (negative numbers denote no upper limit)."
msgstr "`--no-min-parents`と`--no-max-parents`は、これらの制限を(制限なしに)再度リセットします。同等の形式は、`--min-parents=0`(すべてのコミットに0個以上の親があります)および`--max-parents=-1`(マイナスの数は上限がないことを示します)です。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:124
#, no-wrap
msgid "--first-parent"
msgstr "--first-parent"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:132
msgid ""
"Follow only the first parent commit upon seeing a merge commit.  This option "
"can give a better overview when viewing the evolution of a particular topic "
"branch, because merges into a topic branch tend to be only about adjusting "
"to updated upstream from time to time, and this option allows you to ignore "
"the individual commits brought in to your history by such a merge."
msgstr "マージコミットを確認したら、最初の親コミットのみを探索します。このオプションは、特定のトピックブランチの進化を表示するときに、より良い概要を提供できます。トピックブランチへのマージは、時々更新されるアップストリームに調整することだけである傾向があり、このオプションを使用すると、そのようなマージによって履歴に取り込まれた個々のコミットを無視できます。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:136
msgid ""
"This option also changes default diff format for merge commits to "
"`first-parent`, see `--diff-merges=first-parent` for details."
msgstr "このオプションは、マージコミットのデフォルトのdiff形式も`first-parent`に変更します。詳細については、`--diff-merges=first-parent`を参照してください。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:138
#, no-wrap
msgid "--not"
msgstr "--not"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:141
msgid ""
"Reverses the meaning of the '{caret}' prefix (or lack thereof)  for all "
"following revision specifiers, up to the next `--not`."
msgstr "次に現れる`--not`までの間、後続のすべてのリビジョン指定子の'{caret}'プレフィックス(またはその欠如)の意味を逆にします。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:142
#, no-wrap
msgid "--all"
msgstr "--all"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:145
msgid ""
"Pretend as if all the refs in `refs/`, along with `HEAD`, are listed on the "
"command line as '<commit>'."
msgstr "`refs/`内のすべての参照が`HEAD`とともに、コマンドラインに'<commit>'としてリストされているかのように見せかけます。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:146
#, no-wrap
msgid "--branches[=<pattern>]"
msgstr "--branches[=<pattern>]"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:151
msgid ""
"Pretend as if all the refs in `refs/heads` are listed on the command line as "
"'<commit>'. If '<pattern>' is given, limit branches to ones matching given "
"shell glob. If pattern lacks '?', '{asterisk}', or '[', '/{asterisk}' at the "
"end is implied."
msgstr "`refs/heads`内のすべての参照がコマンドラインに'<commit>'としてリストされているかのように見せかけます。'<pattern>'が指定されている場合、ブランチを指定されたシェルグロブ(shell glob)に一致するものに制限します。パターンに'?'または'{asterisk}'または'['がない場合、最後に'/{asterisk}'が含まれます。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:152
#, no-wrap
msgid "--tags[=<pattern>]"
msgstr "--tags[=<pattern>]"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:157
msgid ""
"Pretend as if all the refs in `refs/tags` are listed on the command line as "
"'<commit>'. If '<pattern>' is given, limit tags to ones matching given shell "
"glob. If pattern lacks '?', '{asterisk}', or '[', '/{asterisk}' at the end "
"is implied."
msgstr "`refs/tags`内のすべての参照がコマンドラインに'<commit>'としてリストされているかのように見せかけます。'<pattern>'が指定されている場合は、指定されたシェルグロブ(shell glob)に一致するタグにタグを制限します。パターンに'?'または'{asterisk}'または'['がない場合、最後に'/{asterisk}'が含まれます。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:158
#, no-wrap
msgid "--remotes[=<pattern>]"
msgstr "--remotes[=<pattern>]"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:163
msgid ""
"Pretend as if all the refs in `refs/remotes` are listed on the command line "
"as '<commit>'. If '<pattern>' is given, limit remote-tracking branches to "
"ones matching given shell glob.  If pattern lacks '?', '{asterisk}', or '[', "
"'/{asterisk}' at the end is implied."
msgstr "`refs/remotes`内のすべての参照がコマンドラインに'<commit>'としてリストされているかのように見せかけます。'<pattern>'が指定されている場合、リモート追跡ブランチを指定されたシェルグロブ(shell glob)に一致するものに制限します。パターンに'?'または'{asterisk}'または'['がない場合、最後に'/{asterisk}'が含まれます。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:164
#, no-wrap
msgid "--glob=<glob-pattern>"
msgstr "--glob=<glob-pattern>"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:169
msgid ""
"Pretend as if all the refs matching shell glob '<glob-pattern>' are listed "
"on the command line as '<commit>'. Leading 'refs/', is automatically "
"prepended if missing. If pattern lacks '?', '{asterisk}', or '[', "
"'/{asterisk}' at the end is implied."
msgstr "シェルグロブ'<glob-pattern>'に一致するすべての参照がコマンドラインに'<commit>'としてリストされているかのように見せかけます。先頭の'refs/'は、欠落している場合は自動的に先頭に追加されます。パターンに'?'または'{asterisk}'または'['がない場合、最後に'/{asterisk}'が含まれます。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:170
#, no-wrap
msgid "--exclude=<glob-pattern>"
msgstr "--exclude=<glob-pattern>"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:178
msgid ""
"Do not include refs matching '<glob-pattern>' that the next `--all`, "
"`--branches`, `--tags`, `--remotes`, or `--glob` would otherwise "
"consider. Repetitions of this option accumulate exclusion patterns up to the "
"next `--all`, `--branches`, `--tags`, `--remotes`, or `--glob` option (other "
"options or arguments do not clear accumulated patterns)."
msgstr "次の`--all`または`--branches`または`--tags`または`--remotes`または`--glob`が別の方法で考慮する'<glob-pattern>'に一致する参照を含めないでください。このオプションを繰り返すと、次の`--all`または`--branches`または`--tags`または`--remotes`または`--glob`オプションまで除外パターンが蓄積されます(他のオプションまたは引数は、蓄積されたパターンをクリアしません)。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:184
msgid ""
"The patterns given should not begin with `refs/heads`, `refs/tags`, or "
"`refs/remotes` when applied to `--branches`, `--tags`, or `--remotes`, "
"respectively, and they must begin with `refs/` when applied to `--glob` or "
"`--all`. If a trailing '/{asterisk}' is intended, it must be given "
"explicitly."
msgstr "与えられたパターンは、それぞれ`--branches`または` --tags`または`--remotes`に適用される場合、`refs/heads`または`refs/tags`または`refs/remotes`で始まるべきではありません。`--glob`または`--all`に適用する場合は、`refs/`で始める必要があります。末尾の'/{asterisk}'を意図している場合は、明示的に指定する必要があります。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:185
#, no-wrap
msgid "--reflog"
msgstr "--reflog"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:188
msgid ""
"Pretend as if all objects mentioned by reflogs are listed on the command "
"line as `<commit>`."
msgstr "reflogsで言及されているすべてのオブジェクトがコマンドラインに`<commit>`としてリストされているかのように見せかけます。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:189
#, no-wrap
msgid "--alternate-refs"
msgstr "--alternate-refs"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:196
msgid ""
"Pretend as if all objects mentioned as ref tips of alternate repositories "
"were listed on the command line. An alternate repository is any repository "
"whose object directory is specified in `objects/info/alternates`.  The set "
"of included objects may be modified by `core.alternateRefsCommand`, etc. See "
"linkgit:git-config[1]."
msgstr "代替リポジトリの参照ヒントとして言及されているすべてのオブジェクトがコマンドラインにリストされているかのように見せかけます。代替リポジトリは、オブジェクトディレクトリが`objects/info/alternates`で指定されているリポジトリです。インクルードされたオブジェクトのセットは、`core.alternateRefsCommand`などによって変更できます。linkgit:git-config[1]を参照してください。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:197
#, no-wrap
msgid "--single-worktree"
msgstr "--single-worktree"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:204
msgid ""
"By default, all working trees will be examined by the following options when "
"there are more than one (see linkgit:git-worktree[1]): `--all`, `--reflog` "
"and `--indexed-objects`.  This option forces them to examine the current "
"working tree only."
msgstr "デフォルトでは、作業ツリーが複数ある場合、`--all`と`-reflog`と`--indexed-objects`では、すべての作業ツリーが検査されます(linkgit:git-worktree[1]を参照)。このオプションは、現在の作業ツリーのみを調べるように強制します。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:205
#, no-wrap
msgid "--ignore-missing"
msgstr "--ignore-missing"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:208
msgid ""
"Upon seeing an invalid object name in the input, pretend as if the bad input "
"was not given."
msgstr "入力に無効なオブジェクト名が含まれている場合、そもそもその不正な入力が行われていないかのように見せかけます。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:210 ../Documentation/rev-list-options.txt:737
#, no-wrap
msgid "--bisect"
msgstr "--bisect"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:215
msgid ""
"Pretend as if the bad bisection ref `refs/bisect/bad` was listed and as if "
"it was followed by `--not` and the good bisection refs `refs/bisect/good-*` "
"on the command line."
msgstr "コマンドラインで、bad bisection参照`refs/bisect/bad`がリストされ、その後に`--not`とgood bisection参照`refs/bisect/ good-*`が続くかのように見せかけます。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:217
#, no-wrap
msgid "--stdin"
msgstr "--stdin"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:222
msgid ""
"In addition to the '<commit>' listed on the command line, read them from the "
"standard input. If a `--` separator is seen, stop reading commits and start "
"reading paths to limit the result."
msgstr "コマンドラインにリストされている'<commit>'に加えて、標準入力からそれらを読み取ります。`--`区切り文字が表示された場合は、コミットの読み取りを停止し、パスの読み取りを開始して結果を制限します。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:224
#, no-wrap
msgid "--quiet"
msgstr "--quiet"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:230
msgid ""
"Don't print anything to standard output.  This form is primarily meant to "
"allow the caller to test the exit status to see if a range of objects is "
"fully connected (or not).  It is faster than redirecting stdout to "
"`/dev/null` as the output does not have to be formatted."
msgstr "標準出力には何も出力しないでください。この形式は主に、呼び出し元が終了ステータスをテストして、オブジェクトの範囲が完全に接続されているかどうかを確認できるようにすることを目的としています。出力をフォーマットする必要がないため、stdoutを`/dev/null`にリダイレクトするよりも高速です。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:231
#, no-wrap
msgid "--disk-usage"
msgstr "--disk-usage"

# --use-bitmap-index
# (使用可能な場合、)パックビットマップインデックスを使用して、トラバーサルの高速化を試みます。--objectsを使用してトラバースする場合、ツリーとブロブには関連するパスが出力されないことに注意してください。
#. type: Plain text
#: ../Documentation/rev-list-options.txt:239
msgid ""
"Suppress normal output; instead, print the sum of the bytes used for on-disk "
"storage by the selected commits or objects. This is equivalent to piping the "
"output into `git cat-file --batch-check='%(objectsize:disk)'`, except that "
"it runs much faster (especially with `--use-bitmap-index`). See the "
"`CAVEATS` section in linkgit:git-cat-file[1] for the limitations of what "
"\"on-disk storage\" means."
msgstr "通常の出力を抑制します。代わりに、選択したコミットまたはオブジェクトによってディスク上のストレージに使用されたバイトの合計を出力します。これは、出力が(特に`--use-bitmap-index`を伴った場合)はるかに高速に実行されることを除いて、出力を`git cat-file --batch-check='%(objectsize:disk)'`にパイプすることと同じです。\"on-disk storage\"の意味する制限については、linkgit:git-cat-file[1]の`CAVEATS`節を参照してください。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:241
#, no-wrap
msgid "--cherry-mark"
msgstr "--cherry-mark"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:244
msgid ""
"Like `--cherry-pick` (see below) but mark equivalent commits with `=` rather "
"than omitting them, and inequivalent ones with `+`."
msgstr "`--cherry-pick`（以下を参照）と同様ですが、同等のコミットを省略せずに`=`と印し、同等でないコミットを`+`と印します。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:245
#, no-wrap
msgid "--cherry-pick"
msgstr "--cherry-pick"

# wikipedia
# 数学において、2 つの集合 A と B との対称差（たいしょうさ、英: symmetric difference）とは、“A に属し、B に属さないもの” と “B に属し、A に属さないもの” とを全部集めて得られる集合である[1]。一般に、集合 A と B との対称差を、記号
# A△B[1]  あるいは  A⊖B  あるいは  A⊕B
# などで表す。
# (一部重なった円…よくあるベン図の真ん中の重なった部分を除く集合。３つ以上の集合の対称差もあるので注意)
#. type: Plain text
#: ../Documentation/rev-list-options.txt:249
msgid ""
"Omit any commit that introduces the same change as another commit on the "
"``other side'' when the set of commits are limited with symmetric "
"difference."
msgstr "コミットの組を対称差(symmetric difference)に制限する場合、「反対側」の別のコミットと同じ変更を導入するコミットを省略します。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:257
msgid ""
"For example, if you have two branches, `A` and `B`, a usual way to list all "
"commits on only one side of them is with `--left-right` (see the example "
"below in the description of the `--left-right` option). However, it shows "
"the commits that were cherry-picked from the other branch (for example, "
"``3rd on b'' may be cherry-picked from branch A). With this option, such "
"pairs of commits are excluded from the output."
msgstr "たとえば、`A`と`B`の2つのブランチがある場合、それらの片側だけですべてのコミットを一覧表示する通常の方法は、`--left-right`を使用することです(`--left-right`オプションの説明の以下の例を参照してください)。ただし、他のブランチからは(ブランチAと重複しない)厳選されたコミットが表示されます(たとえば、「3rd onb」はブランチAからチェリーピックされる可能性があります)。このオプションを使用すると、そのようなコミットのペアは出力から除外されます。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:258
#, no-wrap
msgid "--left-only"
msgstr "--left-only"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:259
#, no-wrap
msgid "--right-only"
msgstr "--right-only"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:263
msgid ""
"List only commits on the respective side of a symmetric difference, "
"i.e. only those which would be marked `<` resp. `>` by `--left-right`."
msgstr "リストは、対称差のそれぞれの側でのみコミットします。つまり、`--left-right`で `<` と印されるのだけか、あるいは`--left-right`で`>`と印されるものだけです。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:269
msgid ""
"For example, `--cherry-pick --right-only A...B` omits those commits from `B` "
"which are in `A` or are patch-equivalent to a commit in `A`. In other words, "
"this lists the `+` commits from `git cherry A B`.  More precisely, "
"`--cherry-pick --right-only --no-merges` gives the exact list."
msgstr "たとえば、`--cherry-pick --right-only A...B`は、`A`にある、または`A`のコミットとパッチと同等のコミットを`B`から省略します。つまり、これは`git cherry A B`からの`+`コミットをリストします。より正確に書くと、`--cherry-pick --right-only --no-merges`により正確なリストを提供します。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:270
#, no-wrap
msgid "--cherry"
msgstr "--cherry"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:276
msgid ""
"A synonym for `--right-only --cherry-mark --no-merges`; useful to limit the "
"output to the commits on our side and mark those that have been applied to "
"the other side of a forked history with `git log --cherry "
"upstream...mybranch`, similar to `git cherry upstream mybranch`."
msgstr "`--right-only --cherry-mark --no-merges`の同義語です。出力を私たちの側のコミットに制限し、フォークされた履歴の反対の側に適用されたものを、`git cherry upstream mybranch`と同様に`git log --cherry upstream...mybranch`で印するのに役立ちます。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:277
#, no-wrap
msgid "-g"
msgstr "-g"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:278
#, no-wrap
msgid "--walk-reflogs"
msgstr "--walk-reflogs"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:284
msgid ""
"Instead of walking the commit ancestry chain, walk reflog entries from the "
"most recent one to older ones.  When this option is used you cannot specify "
"commits to exclude (that is, '{caret}commit', 'commit1..commit2', and "
"'commit1\\...commit2' notations cannot be used)."
msgstr "コミットの祖先チェーンをたどる代わりに、reflogエントリを最新のものから古いものに移動します。このオプションを使用する場合、除外するコミットを指定することはできません(つまり、'{caret}commit'や'commit1..commit2'や'commit1\\...commit2'表記は使用できません)。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:291
msgid ""
"With `--pretty` format other than `oneline` and `reference` (for obvious "
"reasons), this causes the output to have two extra lines of information "
"taken from the reflog.  The reflog designator in the output may be shown as "
"`ref@{Nth}` (where `Nth` is the reverse-chronological index in the reflog) "
"or as `ref@{timestamp}` (with the timestamp for that entry), depending on a "
"few rules:"
msgstr "(明らかな理由で、)`oneline`と`reference`以外の`--pretty`形式では、これにより、出力にreflogから取得された2行の追加情報が含まれます。出力のreflog指定子は、`ref@{Nth}`(`Nth`はreflogの逆時系列インデックス(reverse-chronological index))または`ref@{timestamp}`(そのエントリのタイムスタンプ付き)として表示されます。表示は下記のいくつかのルールに依存します:"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:295
msgid "If the starting point is specified as `ref@{Nth}`, show the index format."
msgstr "開始点が `ref@{Nth}` として指定されている場合は、インデックス形式を表示します。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:298
msgid ""
"If the starting point was specified as `ref@{now}`, show the timestamp "
"format."
msgstr "開始点が `ref@{now}` として指定されている場合は、タイムスタンプ形式を表示します。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:301
msgid ""
"If neither was used, but `--date` was given on the command line, show the "
"timestamp in the format requested by `--date`."
msgstr "上記のどちらも使用されていないが、コマンドラインで`--date`が指定されている場合は、`--date`で要求された形式でタイムスタンプを表示します。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:303
msgid "Otherwise, show the index format."
msgstr "それ以外の場合は、インデックス形式を表示します。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:309
msgid ""
"Under `--pretty=oneline`, the commit message is prefixed with this "
"information on the same line.  This option cannot be combined with "
"`--reverse`.  See also linkgit:git-reflog[1]."
msgstr "`--pretty = oneline`では、コミットメッセージの前にこの情報が同じ行に付けられます。このオプションを`--reverse`と組み合わせることはできません。linkgit:git-reflog[1]も参照してください。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:311
msgid "Under `--pretty=reference`, this information will not be shown at all."
msgstr "`--pretty=reference`では、この情報はまったく表示されません。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:312
#, no-wrap
msgid "--merge"
msgstr "--merge"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:315
msgid ""
"After a failed merge, show refs that touch files having a conflict and don't "
"exist on all heads to merge."
msgstr "マージが失敗した後、競合があり、マージするすべてのheadに存在しないファイルに関連(touch)する参照を表示します。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:316
#, no-wrap
msgid "--boundary"
msgstr "--boundary"

# 参考: Git の「バウンダリーコミット」とは https://gotohayato.com/content/413/
# 参考: stack overflow : https://stackoverflow.com/questions/42437590/what-is-a-git-boundary-commit
# A boundary commit is the commit that limits a revision range but does not belong to that range.
# For example the revision range HEAD~3..HEAD consists of 3 commits (HEAD~2, HEAD~1, and HEAD),
# and the commit HEAD~3 serves as a boundary commit for it.
#
# More formally, git processes a revision range by starting at the specified commit
# and getting at other commits through the parent links.
# It stops at commits that don't meet the selection criteria
# (and therefore should be excluded) - those are the boundary commits.
#
# 境界コミットは、リビジョン範囲を制限するが、その範囲に属さないコミットです。
# たとえば、リビジョン範囲HEAD〜3..HEADは3つのコミット（HEAD〜2、HEAD〜1、およびHEAD）で構成され、
# コミットHEAD〜3はその境界コミットとして機能します。
#
# より正式には、gitは指定されたコミットから開始し、
# 親リンクを介して他のコミットを取得することにより、リビジョン範囲を処理します。
# 選択基準を満たさない（したがって除外する必要がある）コミットで停止します。これらは境界コミットです。
#
# $ mkdir test
# $ cd test
# $ git init
# Initialized empty Git repository in ~/playground/git/test/.git/
# $ touch a
# $ git add a
# $ for i in {1..5}; do echo $i >> a; git commit -m "Commit #$i" a; done
# [master (root-commit) bf958f1] Commit #1
#  1 file changed, 1 insertion(+)
#  create mode 100644 a
# [master 3721a8b] Commit #2
#  1 file changed, 1 insertion(+)
# [master d69efcc] Commit #3
#  1 file changed, 1 insertion(+)
# [master 72cd21d] Commit #4
#  1 file changed, 1 insertion(+)
# [master 17ae9c3] Commit #5
#  1 file changed, 1 insertion(+)
# $ git log --oneline
# 17ae9c3 Commit #5
# 72cd21d Commit #4
# d69efcc Commit #3
# 3721a8b Commit #2
# bf958f1 Commit #1
# $ git log --oneline HEAD~3..
# 17ae9c3 Commit #5
# 72cd21d Commit #4
# d69efcc Commit #3
# $ git log --oneline HEAD~3.. --boundary
# 17ae9c3 Commit #5
# 72cd21d Commit #4
# d69efcc Commit #3
# - 3721a8b Commit #2     <-- This is the boundary commit HEAD~3 that would
#                             not be included in the output had the '--boundary'
#                             option NOT been provided
#. type: Plain text
#: ../Documentation/rev-list-options.txt:319
msgid "Output excluded boundary commits. Boundary commits are prefixed with `-`."
msgstr "除外された境界コミットを出力します。 境界コミットの前には `-`が付いています。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:321
#, no-wrap
msgid "--use-bitmap-index"
msgstr "--use-bitmap-index"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:326
msgid ""
"Try to speed up the traversal using the pack bitmap index (if one is "
"available). Note that when traversing with `--objects`, trees and blobs will "
"not have their associated path printed."
msgstr "(使用可能な場合は、)パックビットマップインデックスを使用して、トラバーサルを高速化しようと試みます。`--objects`でトラバースする場合、ツリーとブロブには関連するパスが出力されないことに注意してください。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:327
#, no-wrap
msgid "--progress=<header>"
msgstr "--progress=<header>"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:330
msgid ""
"Show progress reports on stderr as objects are considered. The `<header>` "
"text will be printed with each progress update."
msgstr "オブジェクトが対称になるときに、stderrに進捗レポートを表示します。`<header>`テキストは、進行状況が更新されるたびに印刷されます。"

#. type: Title ~
#: ../Documentation/rev-list-options.txt:333
#, no-wrap
msgid "History Simplification"
msgstr "History Simplification"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:339
msgid ""
"Sometimes you are only interested in parts of the history, for example the "
"commits modifying a particular <path>. But there are two parts of 'History "
"Simplification', one part is selecting the commits and the other is how to "
"do it, as there are various strategies to simplify the history."
msgstr "特定の<path>を変更するコミットなど、履歴の一部のみに関心がある場合があります。ただし、「履歴の簡略化」(History Simplification)は2つの部分から成ります。履歴を簡略化するためにはさまざまな戦略があるためです。その1つはコミットの選択であり、もう1つはそれを行う方法です。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:341
msgid "The following options select the commits to be shown:"
msgstr "以下のオプションは、表示するコミットを選択します:"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:342
#, no-wrap
msgid "<paths>"
msgstr "<paths>"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:344
msgid "Commits modifying the given <paths> are selected."
msgstr "指定された<パス>を変更するコミットが選択されます。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:345
#, no-wrap
msgid "--simplify-by-decoration"
msgstr "--simplify-by-decoration"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:347
msgid "Commits that are referred by some branch or tag are selected."
msgstr "いくつかのブランチまたはタグによって参照されるコミットが選択されます。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:349
msgid "Note that extra commits can be shown to give a meaningful history."
msgstr "注意: 意味のある重要な履歴のために、追加のコミットを表示できることに注意してください。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:351
msgid "The following options affect the way the simplification is performed:"
msgstr "以下のオプションは、簡略化の実行方法に影響します。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:352 ../Documentation/rev-list-options.txt:432
#, no-wrap
msgid "Default mode"
msgstr "Default mode"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:357
msgid ""
"Simplifies the history to the simplest history explaining the final state of "
"the tree. Simplest because it prunes some side branches if the end result is "
"the same (i.e. merging branches with the same content)"
msgstr "履歴を、ツリーの最終状態を説明する最も単純な履歴に単純化します。最終結果が同じである場合(つまり、同じコンテンツのブランチをマージする場合)、いくつかの傍流ブランチ(side branches)を削除するため、最も単純です。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:358 ../Documentation/rev-list-options.txt:688
#, no-wrap
msgid "--show-pulls"
msgstr "--show-pulls"

# 参考:
# https://stackoverflow.com/questions/13744583/what-does-the-word-treesame-mean-in-the-context-of-git
#
# Given two or more trees, a pathspec is considered TREESAME if and only
# if there is no discernible difference for the pathspec among the respective trees.
# 2つ以上のツリーがある場合、
# それぞれのツリー間でpathspecに識別可能な違いがない場合に限り、
# pathspecはTREESAMEと見なされます。
#
# More intuitively, one could think of TREESAME as meaning the same between trees.
#. type: Plain text
#: ../Documentation/rev-list-options.txt:363
msgid ""
"Include all commits from the default mode, but also any merge commits that "
"are not TREESAME to the first parent but are TREESAME to a later "
"parent. This mode is helpful for showing the merge commits that \"first "
"introduced\" a change to a branch."
msgstr "デフォルトモードからのすべてのコミットを含めますが、最初の親へのTREESAMEではなく、後の親へのTREESAMEであるマージコミットも含めます。このモードは、ブランチに変更を「最初に導入した」マージコミットを表示するのに役立ちます。(訳注:TREESAME=pathspecが全く同一であるツリー)"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:364
#, no-wrap
msgid "--full-history"
msgstr "--full-history"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:366
msgid "Same as the default mode, but does not prune some history."
msgstr "デフォルトモードと同じですが、一部の履歴を削除しません。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:367 ../Documentation/rev-list-options.txt:500
#, no-wrap
msgid "--dense"
msgstr "--dense"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:370
msgid "Only the selected commits are shown, plus some to have a meaningful history."
msgstr "選択したコミットのみが表示され、重大で意味のある履歴を持つコミットもいくつか表示されます。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:371 ../Documentation/rev-list-options.txt:504
#, no-wrap
msgid "--sparse"
msgstr "--sparse"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:373
msgid "All commits in the simplified history are shown."
msgstr "簡略化された履歴内のすべてのコミットが表示されます。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:374 ../Documentation/rev-list-options.txt:511
#, no-wrap
msgid "--simplify-merges"
msgstr "--simplify-merges"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:378
msgid ""
"Additional option to `--full-history` to remove some needless merges from "
"the resulting history, as there are no selected commits contributing to this "
"merge."
msgstr "このマージに寄与する選択されたコミットがないため、結果の履歴からいくつかの不要なマージを削除するための`--full-history`への追加オプション。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:379 ../Documentation/rev-list-options.txt:558
#, no-wrap
msgid "--ancestry-path"
msgstr "--ancestry-path"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:385
msgid ""
"When given a range of commits to display (e.g. 'commit1..commit2' or "
"'commit2 {caret}commit1'), only display commits that exist directly on the "
"ancestry chain between the 'commit1' and 'commit2', i.e. commits that are "
"both descendants of 'commit1', and ancestors of 'commit2'."
msgstr "表示するコミットの範囲が指定されている場合(たとえば、'commit1..commit2'または'commit2 {caret}commit1')、 'commit1' と 'commit2' の間の祖先チェーンに直接存在するコミットのみ、つまり、 'commit1' の子孫であり、 'commit2' の祖先であるコミットを表示します。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:387
msgid "A more detailed explanation follows."
msgstr "より詳細な説明は以下のとおりです。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:391
msgid ""
"Suppose you specified `foo` as the <paths>.  We shall call commits that "
"modify `foo` !TREESAME, and the rest TREESAME.  (In a diff filtered for "
"`foo`, they look different and equal, respectively.)"
msgstr "<paths> として `foo` を指定したとします。 `foo` !TREESAME を変更するコミットを呼び出し、残りをTREESAMEと呼びます。( `foo` のためにフィルタリングされた差分では、それぞれ異なって見えたりたり等しく見えたりします。）"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:395
msgid ""
"In the following, we will always refer to the same example history to "
"illustrate the differences between simplification settings.  We assume that "
"you are filtering for a file `foo` in this commit graph:"
msgstr "以下、簡略化設定の違いを説明するために、同じ履歴例を使います。このコミットグラフでは、ファイル `foo` をフィルタリングしていると想定しています:"

#. type: delimited block -
#: ../Documentation/rev-list-options.txt:401
#, no-wrap
msgid ""
"\t  .-A---M---N---O---P---Q\n"
"\t /     /   /   /   /   /\n"
"\tI     B   C   D   E   Y\n"
"\t \\   /   /   /   /   /\n"
"\t  `-------------'   X\n"
msgstr ""
"\t  .-A---M---N---O---P---Q\n"
"\t /     /   /   /   /   /\n"
"\tI     B   C   D   E   Y\n"
"\t \\   /   /   /   /   /\n"
"\t  `-------------'   X\n"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:404
msgid ""
"The horizontal line of history A---Q is taken to be the first parent of each "
"merge.  The commits are:"
msgstr "履歴 A---Q の水平線は、各マージの最初の親と見なされます。その各コミットは以下のとおりです:"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:408
msgid ""
"`I` is the initial commit, in which `foo` exists with contents ``asdf'', and "
"a file `quux` exists with contents ``quux''. Initial commits are compared to "
"an empty tree, so `I` is !TREESAME."
msgstr "`I` は最初のコミットであり、ファイル `foo` が内容 ``asdf'' で存在し、ファイル `quux` は内容 ``quux'' で存在します。最初のコミットは空のツリーと比較されるため、`I` は !TREESAME です。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:410
msgid "In `A`, `foo` contains just ``foo''."
msgstr "`A` では、 `foo` には ``foo'' だけが含まれています。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:413
msgid ""
"`B` contains the same change as `A`.  Its merge `M` is trivial and hence "
"TREESAME to all parents."
msgstr "`B` には `A` と同じ変更が含まれています。そのマージ `M` は些細なことであり、したがってすべての親にとって TREESAME です。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:416
msgid ""
"`C` does not change `foo`, but its merge `N` changes it to ``foobar'', so it "
"is not TREESAME to any parent."
msgstr "`C` は `foo` を変更しませんが、そのマージ `N` はそれを ``foobar'' に変更するので、どの親にとっても TREESAME ではありません。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:419
msgid ""
"`D` sets `foo` to ``baz''. Its merge `O` combines the strings from `N` and "
"`D` to ``foobarbaz''; i.e., it is not TREESAME to any parent."
msgstr "`D` は `foo` を ``baz'' に設定します。そのマージ `O` は、 `N` と `D` から ``foobarbaz'' への文字列を結合します。つまり、どの親にとっても TREESAME ではありません。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:422
msgid ""
"`E` changes `quux` to ``xyzzy'', and its merge `P` combines the strings to "
"``quux xyzzy''. `P` is TREESAME to `O`, but not to `E`."
msgstr "`E` は `quux` を ``xyzzy'' に変更し、そのマージ `P` は文字列を ``quuxxyzzy'' に結合します。 `P` は `O` に対して TREESAME ですが、 `E` に対してはそうではありません。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:426
msgid ""
"`X` is an independent root commit that added a new file `side`, and `Y` "
"modified it. `Y` is TREESAME to `X`. Its merge `Q` added `side` to `P`, and "
"`Q` is TREESAME to `P`, but not to `Y`."
msgstr "`X` は、新ファイル `side` を追加し、 `Y` がそれを変更した独立したルートコミットです。 `Y` は `X` へのTREESAMEです。そのマージ `Q` は `P` に `side` を追加し、 `Q` は `P` にはTREESAMEですが、`Y` に対してはそうではありません。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:431
msgid ""
"`rev-list` walks backwards through history, including or excluding commits "
"based on whether `--full-history` and/or parent rewriting (via `--parents` "
"or `--children`) are used. The following settings are available."
msgstr "`rev-list` は、 `--full-history` および/または、( `--parents` または `--children` を介して)親の書き換えが使用されているかどうかに基づいて、コミットを含めたり除外したりして、履歴を逆方向にウォークスルーします。以下の設定が可能です。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:439
msgid ""
"Commits are included if they are not TREESAME to any parent (though this can "
"be changed, see `--sparse` below).  If the commit was a merge, and it was "
"TREESAME to one parent, follow only that parent.  (Even if there are several "
"TREESAME parents, follow only one of them.)  Otherwise, follow all parents."
msgstr "コミットは、どの親に対してもTREESAMEでない場合に含まれます(これは変更できますが、以下の `--sparse` を参照してください)。コミットがマージであり、一方の親に対するTREESAMEであった場合は、その親のみをフォローします。(TREESAMEの親が複数ある場合でも、そのうちの1つだけをフォローします)。それ以外の場合は、すべての親をフォローします。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:441
msgid "This results in:"
msgstr "これにより、以下のようになります:"

#. type: delimited block -
#: ../Documentation/rev-list-options.txt:446
#, no-wrap
msgid ""
"\t  .-A---N---O\n"
"\t /     /   /\n"
"\tI---------D\n"
msgstr ""
"\t  .-A---N---O\n"
"\t /     /   /\n"
"\tI---------D\n"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:452
msgid ""
"Note how the rule to only follow the TREESAME parent, if one is available, "
"removed `B` from consideration entirely.  `C` was considered via `N`, but is "
"TREESAME.  Root commits are compared to an empty tree, so `I` is !TREESAME."
msgstr "TREESAMEの親のみに従うルールが利用可能な場合は、 `B` を検討対象から完全に削除したことに注意してください。 `C` は `N` を介して考慮されましたが、しかしそれはTREESAMEです。ルートコミットは空のツリーと比較されるため、 `I` は !TREESAME です。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:456
msgid ""
"Parent/child relations are only visible with `--parents`, but that does not "
"affect the commits selected in default mode, so we have shown the parent "
"lines."
msgstr "親子関係は `--parents` でのみ表示されますが、デフォルトモードで選択されたコミットには影響しないため、親の行を示しました。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:457
#, no-wrap
msgid "--full-history without parent rewriting"
msgstr "--full-history without parent rewriting"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:463
msgid ""
"This mode differs from the default in one point: always follow all parents "
"of a merge, even if it is TREESAME to one of them.  Even if more than one "
"side of the merge has commits that are included, this does not imply that "
"the merge itself is! In the example, we get"
msgstr "このモードは、デフォルトとはある一点で異なります。つまり、いずれかの親に対してTREESAMEであっても、常にマージのすべての親に従います。マージの複数の側にコミットが含まれている場合でも、これはマージ自体が含まれていることを意味するものではありません！ 例では以下のようになります。"

#. type: delimited block -
#: ../Documentation/rev-list-options.txt:466
#, no-wrap
msgid "\tI  A  B  N  D  O  P  Q\n"
msgstr "\tI  A  B  N  D  O  P  Q\n"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:471
msgid ""
"`M` was excluded because it is TREESAME to both parents.  `E`, `C` and `B` "
"were all walked, but only `B` was !TREESAME, so the others do not appear."
msgstr "`M` は、両方の親にとってTREESAMEであるため、除外されました。 `E` と `C` と `B` をすべて巡りましたが、 `B` だけが !TREESAME だったので、他は表示されません。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:475
msgid ""
"Note that without parent rewriting, it is not really possible to talk about "
"the parent/child relationships between the commits, so we show them "
"disconnected."
msgstr "注意: 親の書き換え(rewrite)がないと、コミット間の親子関係について話す(talk)ことは実際には不可能であるため、それらが切断されている(disconnected)ことを示していることに注意してください。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:476
#, no-wrap
msgid "--full-history with parent rewriting"
msgstr "--full-history with parent rewriting"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:479
msgid ""
"Ordinary commits are only included if they are !TREESAME (though this can be "
"changed, see `--sparse` below)."
msgstr "通常のコミットは !TREESAME の場合にのみ含まれます(これは変更できますが、以下の `--sparse` を参照してください)。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:483
msgid ""
"Merges are always included.  However, their parent list is rewritten: Along "
"each parent, prune away commits that are not included themselves.  This "
"results in"
msgstr "マージは常に含まれます。ただし、親リストは書き直されます。各親に沿って、自分自身に含まれていないコミットを削除します。 これにより以下のようになります。"

#. type: delimited block -
#: ../Documentation/rev-list-options.txt:490
#, no-wrap
msgid ""
"\t  .-A---M---N---O---P---Q\n"
"\t /     /   /   /   /\n"
"\tI     B   /   D   /\n"
"\t \\   /   /   /   /\n"
"\t  `-------------'\n"
msgstr ""
"\t  .-A---M---N---O---P---Q\n"
"\t /     /   /   /   /\n"
"\tI     B   /   D   /\n"
"\t \\   /   /   /   /\n"
"\t  `-------------'\n"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:496
msgid ""
"Compare to `--full-history` without rewriting above.  Note that `E` was "
"pruned away because it is TREESAME, but the parent list of P was rewritten "
"to contain `E`'s parent `I`.  The same happened for `C` and `N`, and `X`, "
"`Y` and `Q`."
msgstr "上記を書き直さずに `--full-history` と比較してください。 `E` はTREESAMEであるため削除されましたが、Pの親リストは `E` の親 `I` を含むように書き直されていることに注意してください。 `C` と `N` および `X` と `Y` と `Q` についても同じことが起こりました。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:499
msgid ""
"In addition to the above settings, you can change whether TREESAME affects "
"inclusion:"
msgstr "上記の設定に加えて、あなたはTREESAMEが包含に影響を与えるかどうかを変更できます:"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:503
msgid "Commits that are walked are included if they are not TREESAME to any parent."
msgstr "巡ったコミットは、親にとってTREESAMEでない場合に含まれます。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:506
msgid "All commits that are walked are included."
msgstr "巡ったすべてのコミットが含まれます。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:510
msgid ""
"Note that without `--full-history`, this still simplifies merges: if one of "
"the parents is TREESAME, we follow only that one, so the other sides of the "
"merge are never walked."
msgstr "`--full-history` がなくても、これによりマージが単純化されることに注意してください。親の1つがTREESAMEの場合、その1つだけに従うため、マージの反対側を巡ることはありません。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:514
msgid ""
"First, build a history graph in the same way that `--full-history` with "
"parent rewriting does (see above)."
msgstr "最初に、親を書き換えた `--full-history` と同じ方法で履歴グラフを作成します(上記を参照)。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:517
msgid ""
"Then simplify each commit `C` to its replacement `C'` in the final history "
"according to the following rules:"
msgstr "それから、以下のルールに従って、各コミット `C` を最終履歴内の置換 `C'` に単純化します:"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:520
msgid "Set `C'` to `C`."
msgstr "`C'` を `C` にセットします。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:525
msgid ""
"Replace each parent `P` of `C'` with its simplification `P'`.  In the "
"process, drop parents that are ancestors of other parents or that are root "
"commits TREESAME to an empty tree, and remove duplicates, but take care to "
"never drop all parents that we are TREESAME to."
msgstr "`C'` の各親 `P` をその簡略化された `P'` に置き換えます。その過程で、他の親の祖先であるか、ルートである親を削除すると、TREESAMEが空のツリーにコミットされ、重複が削除されますが、TREESAMEであるすべての親を削除しないように注意してください。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:529
msgid ""
"If after this parent rewriting, `C'` is a root or merge commit (has zero or "
">1 parents), a boundary commit, or !TREESAME, it remains.  Otherwise, it is "
"replaced with its only parent."
msgstr "この親の書き換え後、 `C'` がルートまたはマージコミット(0または >1 の親を持つ)、境界コミット、または !TREESAMEである場合、それは残ります。それ以外の場合は、唯一の親に置き換えられます。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:533
msgid ""
"The effect of this is best shown by way of comparing to `--full-history` "
"with parent rewriting.  The example turns into:"
msgstr "この効果は、親の書き換えを使用した `--full-history` と比較することで最もよく示されます。例は以下のようになります:"

#. type: delimited block -
#: ../Documentation/rev-list-options.txt:540
#, no-wrap
msgid ""
"\t  .-A---M---N---O\n"
"\t /     /       /\n"
"\tI     B       D\n"
"\t \\   /       /\n"
"\t  `---------'\n"
msgstr ""
"\t  .-A---M---N---O\n"
"\t /     /       /\n"
"\tI     B       D\n"
"\t \\   /       /\n"
"\t  `---------'\n"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:543
msgid "Note the major differences in `N`, `P`, and `Q` over `--full-history`:"
msgstr "注意: `--full-history` に対する `N` と `P` と `Q` の主な違いに注意してください:"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:547
msgid ""
"`N`'s parent list had `I` removed, because it is an ancestor of the other "
"parent `M`.  Still, `N` remained because it is !TREESAME."
msgstr "`N` の親リストは、他の親 `M` の祖先であるため、 `I` が削除されました。それでも、 !TREESAME なので `N` が残りました。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:550
msgid ""
"`P`'s parent list similarly had `I` removed.  `P` was then removed "
"completely, because it had one parent and is TREESAME."
msgstr "`P` の親リストも同様に `I` が削除されました。 `P` は、親が1つで TREESAMEであるため、完全に削除されました。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:554
msgid ""
"`Q`'s parent list had `Y` simplified to `X`. `X` was then removed, because "
"it was a TREESAME root. `Q` was then removed completely, because it had one "
"parent and is TREESAME."
msgstr "`Q` の親リストでは、 `Y` が `X` に簡略化されていました。その後、 `X` はTREESAMEルートであったため、削除されました。 `Q` は、親が1つで TREESAMEであるため、完全に削除されました。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:557
msgid "There is another simplification mode available:"
msgstr "利用可能な別の簡略化モードがあります:"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:563
msgid ""
"Limit the displayed commits to those directly on the ancestry chain between "
"the ``from'' and ``to'' commits in the given commit range. I.e. only display "
"commits that are ancestor of the ``to'' commit and descendants of the "
"``from'' commit."
msgstr "表示されるコミットを、指定されたコミット範囲内の ``from'' コミットと ``to'' コミットの間の祖先チェーンに直接あるコミットに制限します。つまり、 ``to'' コミットの祖先であるコミットと ``from'' コミットの子孫であるコミットのみを表示します。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:565
msgid "As an example use case, consider the following commit history:"
msgstr "ユースケースの例として、以下のコミット履歴について考えます:"

#. type: delimited block -
#: ../Documentation/rev-list-options.txt:572
#, no-wrap
msgid ""
"\t    D---E-------F\n"
"\t   /     \\       \\\n"
"\t  B---C---G---H---I---J\n"
"\t /                     \\\n"
"\tA-------K---------------L--M\n"
msgstr ""
"\t    D---E-------F\n"
"\t   /     \\       \\\n"
"\t  B---C---G---H---I---J\n"
"\t /                     \\\n"
"\tA-------K---------------L--M\n"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:580
msgid ""
"A regular 'D..M' computes the set of commits that are ancestors of `M`, but "
"excludes the ones that are ancestors of `D`. This is useful to see what "
"happened to the history leading to `M` since `D`, in the sense that ``what "
"does `M` have that did not exist in `D`''. The result in this example would "
"be all the commits, except `A` and `B` (and `D` itself, of course)."
msgstr "通常の 'D..M' は、 `M` の祖先であるコミットのセットを計算しますが、 `D` の祖先であるコミットは除外します。 これは、「 `M` には `D` には存在しなかったものがある」という意味で、 `D` 以降の `M`に至るまでの歴史に何が起こったのかを知るのに役立ちます。この例の結果は、 `A` と `B` (そしてもちろん `D` 自体)を除くすべてのコミットになります。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:586
msgid ""
"When we want to find out what commits in `M` are contaminated with the bug "
"introduced by `D` and need fixing, however, we might want to view only the "
"subset of 'D..M' that are actually descendants of `D`, i.e.  excluding `C` "
"and `K`. This is exactly what the `--ancestry-path` option does. Applied to "
"the 'D..M' range, it results in:"
msgstr "ただし、 `M` のコミットが `D` で入ったバグで汚染されており、修正が必要な場合は、実際には `D` の子孫である 'D..M' のサブセットのみを表示する必要があります。つまり、 `C` と `K` を除外します。これはまさに `--ancestry-path` オプションが行うことです。これを 'D..M' 範囲に適用すると、以下のようになります:"

#. type: delimited block -
#: ../Documentation/rev-list-options.txt:593
#, no-wrap
msgid ""
"\t\tE-------F\n"
"\t\t \\       \\\n"
"\t\t  G---H---I---J\n"
"\t\t\t       \\\n"
"\t\t\t\tL--M\n"
msgstr ""
"\t\tE-------F\n"
"\t\t \\       \\\n"
"\t\t  G---H---I---J\n"
"\t\t\t       \\\n"
"\t\t\t\tL--M\n"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:597
msgid ""
"Before discussing another option, `--show-pulls`, we need to create a new "
"example history."
msgstr "別のオプション `--show-pulls` について説明する前に、新しいサンプル履歴を作成する必要があります。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:602
msgid ""
"A common problem users face when looking at simplified history is that a "
"commit they know changed a file somehow does not appear in the file's "
"simplified history. Let's demonstrate a new example and show how options "
"such as `--full-history` and `--simplify-merges` works in that case:"
msgstr "簡略化された履歴を見るときにユーザーが直面する一般的な問題は、ファイルを変更したことがわかっているコミットが、ファイルの簡略化された履歴に表示されないことです。そこで、新しい例を示し、その場合に `--full-history` や `--simplify-merges` などのオプションがどのように機能するかを示しましょう。"

#. type: delimited block -
#: ../Documentation/rev-list-options.txt:610
#, no-wrap
msgid ""
"\t  .-A---M-----C--N---O---P\n"
"\t /     / \\  \\  \\/   /   /\n"
"\tI     B   \\  R-'`-Z'   /\n"
"\t \\   /     \\/         /\n"
"\t  \\ /      /\\        /\n"
"\t   `---X--'  `---Y--'\n"
msgstr ""
"\t  .-A---M-----C--N---O---P\n"
"\t /     / \\  \\  \\/   /   /\n"
"\tI     B   \\  R-'`-Z'   /\n"
"\t \\   /     \\/         /\n"
"\t  \\ /      /\\        /\n"
"\t   `---X--'  `---Y--'\n"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:623
msgid ""
"For this example, suppose `I` created `file.txt` which was modified by `A`, "
"`B`, and `X` in different ways. The single-parent commits `C`, `Z`, and `Y` "
"do not change `file.txt`. The merge commit `M` was created by resolving the "
"merge conflict to include both changes from `A` and `B` and hence is not "
"TREESAME to either. The merge commit `R`, however, was created by ignoring "
"the contents of `file.txt` at `M` and taking only the contents of `file.txt` "
"at `X`. Hence, `R` is TREESAME to `X` but not `M`. Finally, the natural "
"merge resolution to create `N` is to take the contents of `file.txt` at `R`, "
"so `N` is TREESAME to `R` but not `C`.  The merge commits `O` and `P` are "
"TREESAME to their first parents, but not to their second parents, `Z` and "
"`Y` respectively."
msgstr "この例では、 `I` が `file.txt` を作成し、それが `A` と`B` と `X` にてさまざまな方法で変更されたとします。ひとり親のコミット `C` と `Z` と `Y` は `file.txt` を変更していません。マージコミット `M` は、マージの競合を解決して、 `A` と `B` の両方の変更を含めることによって作成されたため、どちらにもTREESAMEではありません。ただし、マージコミット `R` は、 `M` の `file.txt`の内容を無視し、 `X` の `file.txt` の内容のみを取得することによって作成されました。 したがって、 `R` は `X` へのTREESAMEですが、 `M` はそうではありません。最後に、 `N` を作成するための自然なマージ解決は、 `R` で `file.txt` の内容を取得することです。したがって、 `N` は `C` ではなく `R` へのTREESAMEです。マージコミット `O` と `P` は、最初の親にはTREESAMEですが、2番目の親である `Z` と `Y` にはついてはそうではありません。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:627
msgid ""
"When using the default mode, `N` and `R` both have a TREESAME parent, so "
"those edges are walked and the others are ignored. The resulting history "
"graph is:"
msgstr "デフォルトモードを使用する場合、 `N` と `R` は両方ともTREESAMEの親を持っているため、これらのエッジはウォークされ、他のエッジは無視されます。結果の履歴グラフは以下のとおりです:"

#. type: delimited block -
#: ../Documentation/rev-list-options.txt:630
#, no-wrap
msgid "\tI---X\n"
msgstr "\tI---X\n"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:635
msgid ""
"When using `--full-history`, Git walks every edge. This will discover the "
"commits `A` and `B` and the merge `M`, but also will reveal the merge "
"commits `O` and `P`. With parent rewriting, the resulting graph is:"
msgstr "`--full-history` を使用する場合、Gitはすべてのエッジを巡ります。これにより、コミット `A` と `B` と マージ `M` が検出されますが、マージコミット `O` と `P` も明らかになります。 親を書き換えると、結果のグラフは以下のようになります:"

#. type: delimited block -
#: ../Documentation/rev-list-options.txt:643
#, no-wrap
msgid ""
"\t  .-A---M--------N---O---P\n"
"\t /     / \\  \\  \\/   /   /\n"
"\tI     B   \\  R-'`--'   /\n"
"\t \\   /     \\/         /\n"
"\t  \\ /      /\\        /\n"
"\t   `---X--'  `------'\n"
msgstr ""
"\t  .-A---M--------N---O---P\n"
"\t /     / \\  \\  \\/   /   /\n"
"\tI     B   \\  R-'`--'   /\n"
"\t \\   /     \\/         /\n"
"\t  \\ /      /\\        /\n"
"\t   `---X--'  `------'\n"

# manu facturing : 製造(工業)、製造業の
#. type: Plain text
#: ../Documentation/rev-list-options.txt:651
msgid ""
"Here, the merge commits `O` and `P` contribute extra noise, as they did not "
"actually contribute a change to `file.txt`. They only merged a topic that "
"was based on an older version of `file.txt`. This is a common issue in "
"repositories using a workflow where many contributors work in parallel and "
"merge their topic branches along a single trunk: manu unrelated merges "
"appear in the `--full-history` results."
msgstr "ここで、マージコミット `O` と `P` は、実際には `file.txt` への変更を提供しなかったため、余分なノイズを提供します。古いバージョンの `file.txt` に基づいたトピックのみをマージしました。これは、多くの寄稿者が並行して作業し、トピックブランチを単一のトランクに沿ってマージするワークフローを使用するリポジトリの一般的な問題です。開発に関係のないマージが `--full-history` の結果に表示されます。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:658
msgid ""
"When using the `--simplify-merges` option, the commits `O` and `P` disappear "
"from the results. This is because the rewritten second parents of `O` and "
"`P` are reachable from their first parents. Those edges are removed and then "
"the commits look like single-parent commits that are TREESAME to their "
"parent. This also happens to the commit `N`, resulting in a history view as "
"follows:"
msgstr "`--simplify-merges` オプションを使用すると、コミット `O` と `P` が結果から消えます。 これは、 `O` と `P` の書き直された2番目の親が、最初の親から到達可能であるためです。これらのエッジが削除されると、コミットは、親にとってTREESAMEである単一の親のコミットのように見えます。これはコミット `N` にも発生し、以下のような履歴ビューが表示されます:"

#. type: delimited block -
#: ../Documentation/rev-list-options.txt:666
#, no-wrap
msgid ""
"\t  .-A---M--.\n"
"\t /     /    \\\n"
"\tI     B      R\n"
"\t \\   /      /\n"
"\t  \\ /      /\n"
"\t   `---X--'\n"
msgstr ""
"\t  .-A---M--.\n"
"\t /     /    \\\n"
"\tI     B      R\n"
"\t \\   /      /\n"
"\t  \\ /      /\n"
"\t   `---X--'\n"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:673
msgid ""
"In this view, we see all of the important single-parent changes from `A`, "
"`B`, and `X`. We also see the carefully-resolved merge `M` and the "
"not-so-carefully-resolved merge `R`. This is usually enough information to "
"determine why the commits `A` and `B` \"disappeared\" from history in the "
"default view. However, there are a few issues with this approach."
msgstr "このビューでは、 `A` と `B` と `X` からの重要なひとり親の変更がすべて表示されます。また、慎重に解決されたマージ `M` とそれほど慎重に解決されていないマージ `R` も表示されます。これは通常、コミット `A` と `B` がデフォルトのビューの履歴から「消えた」理由を判断するのに十分な情報です。ただし、このアプローチにはいくつかの問題があります。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:678
msgid ""
"The first issue is performance. Unlike any previous option, the "
"`--simplify-merges` option requires walking the entire commit history before "
"returning a single result. This can make the option difficult to use for "
"very large repositories."
msgstr "最初の問題はパフォーマンスです。以前のオプションとは異なり、 `--simplify-merges` オプションでは、単一の結果を返す前にコミット履歴全体をウォークする必要があります。これにより、非常に大規模なリポジトリでこのオプションを使用するのが難しくなる可能性があります。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:687
msgid ""
"The second issue is one of auditing. When many contributors are working on "
"the same repository, it is important which merge commits introduced a change "
"into an important branch. The problematic merge `R` above is not likely to "
"be the merge commit that was used to merge into an important "
"branch. Instead, the merge `N` was used to merge `R` and `X` into the "
"important branch. This commit may have information about why the change `X` "
"came to override the changes from `A` and `B` in its commit message."
msgstr "2番目の問題は監査の1つです。多くの寄稿者が同じリポジトリで作業している場合、どのマージコミットが重要なブランチに変更を導入したかが重要です。上記の問題のあるマージ `R` は、重要なブランチにマージするために使用されたマージコミットではない可能性があります。 代わりに、マージ `N` を使用して `R` と `X` を重要なブランチにマージしました。このコミットには、変更 `X` がコミットメッセージの `A` と `B` からの変更を上書きするようになった理由に関する情報が含まれている可能性があります。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:692
msgid ""
"In addition to the commits shown in the default history, show each merge "
"commit that is not TREESAME to its first parent but is TREESAME to a later "
"parent."
msgstr "デフォルトの履歴に表示されるコミットに加えて、最初の親にはTREESAMEではなく、後の親にはTREESAMEである各マージコミットを表示します。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:697
msgid ""
"When a merge commit is included by `--show-pulls`, the merge is treated as "
"if it \"pulled\" the change from another branch. When using `--show-pulls` "
"on this example (and no other options) the resulting graph is:"
msgstr "マージコミットが `--show-pulls` に含まれている場合、マージは別のブランチから変更を「プル」したかのように扱われます。この例で `--show-pulls` を使用すると(他のオプションは使用しない場合、)結果のグラフは行かのようになります:"

#. type: delimited block -
#: ../Documentation/rev-list-options.txt:700
#, no-wrap
msgid "\tI---X---R---N\n"
msgstr "\tI---X---R---N\n"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:706
msgid ""
"Here, the merge commits `R` and `N` are included because they pulled the "
"commits `X` and `R` into the base branch, respectively. These merges are the "
"reason the commits `A` and `B` do not appear in the default history."
msgstr "ここで、コミット `X` と `R` をそれぞれベースブランチにプルしたため、マージコミット `R` と `N` が含まれています。これらのマージは、コミット `A` と `B` がデフォルトの履歴に表示されない理由です。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:709
msgid ""
"When `--show-pulls` is paired with `--simplify-merges`, the graph includes "
"all of the necessary information:"
msgstr "`--show-pulls` が `--simplify-merges` とペアになっている場合、グラフには必要なすべての情報が含まれます:"

#. type: delimited block -
#: ../Documentation/rev-list-options.txt:717
#, no-wrap
msgid ""
"\t  .-A---M--.   N\n"
"\t /     /    \\ /\n"
"\tI     B      R\n"
"\t \\   /      /\n"
"\t  \\ /      /\n"
"\t   `---X--'\n"
msgstr ""
"\t  .-A---M--.   N\n"
"\t /     /    \\ /\n"
"\tI     B      R\n"
"\t \\   /      /\n"
"\t  \\ /      /\n"
"\t   `---X--'\n"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:723
msgid ""
"Notice that since `M` is reachable from `R`, the edge from `N` to `M` was "
"simplified away. However, `N` still appears in the history as an important "
"commit because it \"pulled\" the change `R` into the main branch."
msgstr "`M` は `R` から到達可能であるため、 `N` から `M` へのエッジが単純化されていることに注意してください。ただし、 `N` は、変更 `R` をメインブランチに「プル」したため、重要なコミットとして履歴に表示されます。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:731
msgid ""
"The `--simplify-by-decoration` option allows you to view only the big "
"picture of the topology of the history, by omitting commits that are not "
"referenced by tags.  Commits are marked as !TREESAME (in other words, kept "
"after history simplification rules described above) if (1) they are "
"referenced by tags, or (2) they change the contents of the paths given on "
"the command line.  All other commits are marked as TREESAME (subject to be "
"simplified away)."
msgstr "`--simplify-by-decoration` オプションを使用すると、タグで参照されていないコミットを省略して、履歴のトポロジの全体像のみを表示できます。コミットは、(1)タグによって参照されている場合、または (2)コマンドラインで指定されたパスの内容を変更した場合に、!TREESAMEとしてマークされます(つまり、上記の履歴簡略化ルールの後に保持されます)。他のすべてのコミットはTREESAMEとしてマークされます(簡略化される可能性があります)。"

#. type: Title ~
#: ../Documentation/rev-list-options.txt:735
#, no-wrap
msgid "Bisection Helpers"
msgstr "Bisection Helpers"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:744
msgid ""
"Limit output to the one commit object which is roughly halfway between "
"included and excluded commits. Note that the bad bisection ref "
"`refs/bisect/bad` is added to the included commits (if it exists) and the "
"good bisection refs `refs/bisect/good-*` are added to the excluded commits "
"(if they exist). Thus, supposing there are no refs in `refs/bisect/`, if"
msgstr "含まれるコミットと除外されるコミットのほぼ中間にある1つのコミットオブジェクトに出力を制限します。(存在する場合)悪い二等分参照(bad bisection) `refs/bisect/bad` が含まれるコミットに追加され、（存在する場合)良い二等分参照(good bisection) `refs/bisect/good-*` が除外されるコミットに追加されることに注意してください。したがって、 `refs/ bisect/` にrefsがないと仮定すると、"

#. type: delimited block -
#: ../Documentation/rev-list-options.txt:747
#, no-wrap
msgid "\t$ git rev-list --bisect foo ^bar ^baz\n"
msgstr "\t$ git rev-list --bisect foo ^bar ^baz\n"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:750
msgid "outputs 'midpoint', the output of the two commands"
msgstr "は、2つのコマンドの出力である中間点(midpoint)を出力します"

#. type: delimited block -
#: ../Documentation/rev-list-options.txt:754
#, no-wrap
msgid ""
"\t$ git rev-list foo ^midpoint\n"
"\t$ git rev-list midpoint ^bar ^baz\n"
msgstr ""
"\t$ git rev-list foo ^midpoint\n"
"\t$ git rev-list midpoint ^bar ^baz\n"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:760
msgid ""
"would be of roughly the same length.  Finding the change which introduces a "
"regression is thus reduced to a binary search: repeatedly generate and test "
"new 'midpoint's until the commit chain is of length one."
msgstr "上記は、ほぼ同じ長さになります。 したがって、回帰を導入する変更を見つけることは、バイナリ検索(binary search)に還元されます。コミットチェーンの長さが1になるまで、新しい中間点(midpoint)を繰り返し生成してテストします。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:761
#, no-wrap
msgid "--bisect-vars"
msgstr "--bisect-vars"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:772
msgid ""
"This calculates the same as `--bisect`, except that refs in `refs/bisect/` "
"are not used, and except that this outputs text ready to be eval'ed by the "
"shell. These lines will assign the name of the midpoint revision to the "
"variable `bisect_rev`, and the expected number of commits to be tested after "
"`bisect_rev` is tested to `bisect_nr`, the expected number of commits to be "
"tested if `bisect_rev` turns out to be good to `bisect_good`, the expected "
"number of commits to be tested if `bisect_rev` turns out to be bad to "
"`bisect_bad`, and the number of commits we are bisecting right now to "
"`bisect_all`."
msgstr "これは、 `refs/bisect/` 内のrefが使用されないこと、およびシェルによって評価される準備ができているテキストを出力することを除いて、 `--bisect` と同じように計算されます。これらの行は、中間点リビジョンの名前を変数 `bisect_rev` に割り当て、 `bisect_rev` が `bisect_nr` にテストされた後にテストされるコミットの予想数、 `bisect_rev` が `bisect_good`に適していることが判明した場合にテストされるコミットの予想数、 `bisect_rev` が `bisect_bad` に不適切であることが判明した場合にテストされるコミットの予想数、および現在 `bisect_all` に二等分しているコミットの数です。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:773
#, no-wrap
msgid "--bisect-all"
msgstr "--bisect-all"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:779
msgid ""
"This outputs all the commit objects between the included and excluded "
"commits, ordered by their distance to the included and excluded "
"commits. Refs in `refs/bisect/` are not used. The farthest from them is "
"displayed first. (This is the only one displayed by `--bisect`.)"
msgstr "これにより、含まれるコミットと除外されるコミットの間のすべてのコミットオブジェクトが、含まれるコミットと除外されるコミットまでの距離順に出力されます。 `refs/bisect/` のrefは使用されません。それらから最も遠いものが最初に表示されます。(これは `--bisect` によって表示される唯一のものです。)"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:783
msgid ""
"This is useful because it makes it easy to choose a good commit to test when "
"you want to avoid to test some of them for some reason (they may not compile "
"for example)."
msgstr "これは、何らかの理由(たとえば、コンパイルできない場合など)でそれらの一部をテストすることを避けたい場合に、テストするための適切なコミットを簡単に選択できるため便利です。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:787
msgid ""
"This option can be used along with `--bisect-vars`, in this case, after all "
"the sorted commit objects, there will be the same text as if `--bisect-vars` "
"had been used alone."
msgstr "このオプションは `--bisect-vars` と一緒に使用できます。この場合、ソートされたすべてのコミットオブジェクトの後に、 `--bisect-vars` が単独で使用された場合と同じテキストが表示されます。"

#. type: Title ~
#: ../Documentation/rev-list-options.txt:792
#, no-wrap
msgid "Commit Ordering"
msgstr "Commit Ordering"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:795
msgid "By default, the commits are shown in reverse chronological order."
msgstr "デフォルトでは、コミットは新しい順に表示されます。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:796
#, no-wrap
msgid "--date-order"
msgstr "--date-order"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:799
msgid ""
"Show no parents before all of its children are shown, but otherwise show "
"commits in the commit timestamp order."
msgstr "すべての子が表示されるまで親を表示しませんが、それ以外の場合はコミットタイムスタンプの順序でコミットを表示します。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:800
#, no-wrap
msgid "--author-date-order"
msgstr "--author-date-order"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:803
msgid ""
"Show no parents before all of its children are shown, but otherwise show "
"commits in the author timestamp order."
msgstr "すべての子が表示されるまで親を表示しませんが、それ以外の場合は、作成者のタイムスタンプ順にコミットを表示します。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:804
#, no-wrap
msgid "--topo-order"
msgstr "--topo-order"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:808
msgid ""
"Show no parents before all of its children are shown, and avoid showing "
"commits on multiple lines of history intermixed."
msgstr "すべての子が表示されるまで親を表示せず、複数の履歴行が混在するコミットを表示しないようにします。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:810
msgid "For example, in a commit history like this:"
msgstr "たとえば、以下のようなコミット履歴があります:"

#. type: delimited block -
#: ../Documentation/rev-list-options.txt:816
#, no-wrap
msgid ""
"    ---1----2----4----7\n"
"\t\\\t       \\\n"
"\t 3----5----6----8---\n"
msgstr ""
"    ---1----2----4----7\n"
"\t\\\t       \\\n"
"\t 3----5----6----8---\n"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:822
msgid ""
"where the numbers denote the order of commit timestamps, `git rev-list` and "
"friends with `--date-order` show the commits in the timestamp order: 8 7 6 5 "
"4 3 2 1."
msgstr "ここで、数字はコミットタイムスタンプの順序を示し、 `gitrev-list` と `--date-order` のある友達は、タイムスタンプの順序でコミットを示します。つまり、8 7 6 5 4 3 2 1"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:827
msgid ""
"With `--topo-order`, they would show 8 6 5 3 7 4 2 1 (or 8 7 4 2 6 5 3 1); "
"some older commits are shown before newer ones in order to avoid showing the "
"commits from two parallel development track mixed together."
msgstr "`--topo-order` を使用すると、8 6 5 3 7 4 2 1（または8 7 4 2 6 5 3 1）が表示されます。2つの並列開発トラックからのコミットが混在して表示されないようにするために、いくつかの古いコミットが新しいコミットの前に表示されます。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:828
#, no-wrap
msgid "--reverse"
msgstr "--reverse"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:832
msgid ""
"Output the commits chosen to be shown (see Commit Limiting section above) in "
"reverse order. Cannot be combined with `--walk-reflogs`."
msgstr "表示するように選択したコミットを逆の順序で出力します(上記の Commit Limiting 節を参照)。 `--walk-reflogs` と組み合わせることはできません。"

#. type: Title ~
#: ../Documentation/rev-list-options.txt:836
#, no-wrap
msgid "Object Traversal"
msgstr "Object Traversal"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:839
msgid "These options are mostly targeted for packing of Git repositories."
msgstr "これらのオプションは、主にGitリポジトリのパッキングを対象としています。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:841
#, no-wrap
msgid "--objects"
msgstr "--objects"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:846
msgid ""
"Print the object IDs of any object referenced by the listed commits.  "
"`--objects foo ^bar` thus means ``send me all object IDs which I need to "
"download if I have the commit object _bar_ but not _foo_''."
msgstr "リストされたコミットによって参照されるオブジェクトのオブジェクトIDを出力します。 したがって、 `--objects foo ^bar` 「コミットオブジェクトが _bar_ であるが _foo_ でない場合にダウンロードする必要があるすべてのオブジェクトIDを送ってください」という意味です。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:847
#, no-wrap
msgid "--in-commit-order"
msgstr "--in-commit-order"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:851
msgid ""
"Print tree and blob ids in order of the commits. The tree and blob ids are "
"printed after they are first referenced by a commit."
msgstr "ツリーIDとブロブのIDをコミット順に出力します。 ツリーIDとブロブのIDは、コミットによって最初に参照された後に出力されます。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:852
#, no-wrap
msgid "--objects-edge"
msgstr "--objects-edge"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:858
msgid ""
"Similar to `--objects`, but also print the IDs of excluded commits prefixed "
"with a ``-'' character.  This is used by linkgit:git-pack-objects[1] to "
"build a ``thin'' pack, which records objects in deltified form based on "
"objects contained in these excluded commits to reduce network traffic."
msgstr "`--objects` に似ていますが、接頭辞 ``-'' 文字が付いた除外されたコミットのIDも出力します。これは linkgit:git-pack-objects[1] によって使用され、ネットワークトラフィックを削減するために、これらの除外されたコミットに含まれるオブジェクトに基づいてオブジェクトを削除された形式で記録する「薄い」パック(thin pack)を構築します。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:859
#, no-wrap
msgid "--objects-edge-aggressive"
msgstr "--objects-edge-aggressive"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:863
msgid ""
"Similar to `--objects-edge`, but it tries harder to find excluded commits at "
"the cost of increased time.  This is used instead of `--objects-edge` to "
"build ``thin'' packs for shallow repositories."
msgstr "`--objects-edge` に似ていますが、時間がかかるという犠牲を払って、除外されたコミットを見つけためにもっともっと頑張ります。これは、`--objects-edge` の代わりに使用されて浅いリポジトリ(shallow repositories)用の「薄い」パック(thin pack)を構築します。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:864
#, no-wrap
msgid "--indexed-objects"
msgstr "--indexed-objects"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:868
msgid ""
"Pretend as if all trees and blobs used by the index are listed on the "
"command line.  Note that you probably want to use `--objects`, too."
msgstr "インデックスで使用されるすべてのツリーとブロブがコマンドラインにリストされているかのように見せかけます。 注意: たぶんあなたは一緒に `--objects` も使用したいと思うでしょう。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:869
#, no-wrap
msgid "--unpacked"
msgstr "--unpacked"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:872
msgid "Only useful with `--objects`; print the object IDs that are not in packs."
msgstr "`--objects` と一緒の時のみ役立ちます。パックに含まれていないオブジェクトIDを出力します。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:873
#, no-wrap
msgid "--object-names"
msgstr "--object-names"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:876
msgid ""
"Only useful with `--objects`; print the names of the object IDs that are "
"found. This is the default behavior."
msgstr "`--objects` と一緒の時のみ役立ちます。見つかったオブジェクトIDの名前を出力します。これがデフォルトの動作です。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:877
#, no-wrap
msgid "--no-object-names"
msgstr "--no-object-names"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:882
msgid ""
"Only useful with `--objects`; does not print the names of the object IDs "
"that are found. This inverts `--object-names`. This flag allows the output "
"to be more easily parsed by commands such as linkgit:git-cat-file[1]."
msgstr "`--objects` と一緒の時のみ役立ちます。見つかったオブジェクトIDの名前は出力されません。これにより、 `--object-names` が反転します。 このフラグを使用すると、 linkgit:git-cat-file[1] などのコマンドで出力をより簡単に解析できます。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:883
#, no-wrap
msgid "--filter=<filter-spec>"
msgstr "--filter=<filter-spec>"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:887
msgid ""
"Only useful with one of the `--objects*`; omits objects (usually blobs) from "
"the list of printed objects.  The '<filter-spec>' may be one of the "
"following:"
msgstr "`--objectsほげほげ` のどれかと一緒の時のみ役立ちます。印刷されたオブジェクトのリストからオブジェクト(通常はブロブ)を省略します。'<filter-spec>' は、以下のいずれかになります:"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:889
msgid "The form '--filter=blob:none' omits all blobs."
msgstr "'--filter=blob:none' の形式では、すべてのブロブが省略されます。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:894
msgid ""
"The form '--filter=blob:limit=<n>[kmg]' omits blobs larger than n bytes or "
"units.  n may be zero.  The suffixes k, m, and g can be used to name units "
"in KiB, MiB, or GiB.  For example, 'blob:limit=1k' is the same as "
"'blob:limit=1024'."
msgstr "'--filter=blob:limit=<n>[kmg]' の形式では、nバイトまたは指定の単位より大きいブロブが省略されます。nはゼロの場合があります。 接尾辞kとmとgを使用して、KiBまたはMiBまたはGiBの単位にすることができます。 たとえば、 'blob:limit=1k' は 'blob:limit=1024' と同じです。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:897
msgid ""
"The form '--filter=object:type=(tag|commit|tree|blob)' omits all objects "
"which are not of the requested type."
msgstr "'--filter=object:type=(tag|commit|tree|blob)' の形式では、要求されたタイプではないすべてのオブジェクトが省略されます。"

# 参考:https://kakakakakku.hatenablog.com/entry/2020/06/04/104940
# git sparse-checkout とは？
# コマンド名にある sparse は「わずかな」という意味で，Git リポジトリの「一部」を取得できる．git clone --depth を使ってコミットを刈り取るのではなく，指定したディレクトリを取得する．
#. type: Plain text
#: ../Documentation/rev-list-options.txt:902
msgid ""
"The form '--filter=sparse:oid=<blob-ish>' uses a sparse-checkout "
"specification contained in the blob (or blob-expression) '<blob-ish>' to "
"omit blobs that would not be required for a sparse checkout on the requested "
"refs."
msgstr "'--filter=sparse:oid=<blob-ish>' の形式は、ブロブ(またはブロブ式) '<blob-ish>' に含まれるsparse-checkout仕様を使用して、 要求された参照でsparse checkoutに必要のないブロブを省略します。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:912
msgid ""
"The form '--filter=tree:<depth>' omits all blobs and trees whose depth from "
"the root tree is >= <depth> (minimum depth if an object is located at "
"multiple depths in the commits traversed). <depth>=0 will not include any "
"trees or blobs unless included explicitly in the command-line (or standard "
"input when --stdin is used). <depth>=1 will include only the tree and blobs "
"which are referenced directly by a commit reachable from <commit> or an "
"explicitly-given object. <depth>=2 is like <depth>=1 while also including "
"trees and blobs one more level removed from an explicitly-given commit or "
"tree."
msgstr "'--filter=tree:<depth>' の形式は、ルートツリーからの深さが >= <depth> (オブジェクトがトラバースされたコミットの複数の深さにある場合の最小深さ)であるすべてのブロブとツリーを省略します。 <depth>=0 は、コマンドライン(または --stdin が使用されている場合は標準入力)に明示的に含まれていない限り、ツリーやブロブを含みません。 <depth>=1 は、 <commit> から到達可能なコミットまたは明示的に指定されたオブジェクトによって直接参照されるツリーとブロブのみが含まれます。 <depth>=2 は <depth>=1 に似ていますが、明示的に指定されたコミットまたはツリーから削除されたもう1つのレベルのツリーとブロブも含まれます。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:916
msgid ""
"Note that the form '--filter=sparse:path=<path>' that wants to read from an "
"arbitrary path on the filesystem has been dropped for security reasons."
msgstr "注意: ファイルシステム上の任意のパスから読み取れる形式である '--filter=sparse:path=<path>' は、セキュリティ上の理由から削除されたことに注意してください。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:919
msgid ""
"Multiple '--filter=' flags can be specified to combine filters. Only objects "
"which are accepted by every filter are included."
msgstr "複数の '--filter=' フラグを指定して、フィルターを組み合わせることができます。指定の全てのフィルターで受け入れられるオブジェクトのみが含まれます。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:928
msgid ""
"The form '--filter=combine:<filter1>+<filter2>+...<filterN>' can also be "
"used to combined several filters, but this is harder than just repeating the "
"'--filter' flag and is usually not necessary. Filters are joined by '{plus}' "
"and individual filters are %-encoded (i.e. URL-encoded).  Besides the "
"'{plus}' and '%' characters, the following characters are reserved and also "
"must be encoded: `~!@#$^&*()[]{}\\;\",<>?`+&#39;&#96;+ as well as all "
"characters with ASCII code &lt;= `0x20`, which includes space and newline."
msgstr "'--filter=combine:<filter1>+<filter2>+...<filterN>' の形式を使用して、複数のフィルターを組み合わせることができますが、これは '--filter' フラグを繰り返すよりもずっとずっと難しく、通常は必要はありません。フィルタは '{plus}' で結合され、個々のフィルタは % エンコードされます(つまり、URLエンコードされます)。 '{plus}' と '%' 文字に加えて、次の文字は予約されており、エンコードする必要があります: `~!@#$^&*()[]{}\\;\",<>?`+&#39;&#96;+ およびASCIコード `0x20` 以下の全ての文字(空白(space)と改行(newline)を含む)。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:932
msgid ""
"Other arbitrary characters can also be encoded. For instance, "
"'combine:tree:3+blob:none' and 'combine:tree%3A3+blob%3Anone' are "
"equivalent."
msgstr "他の任意の文字もエンコードできます。 たとえば、 'combine:tree:3+blob:none' と 'combine:tree%3A3+blob%3Anone' は同等です。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:933
#, no-wrap
msgid "--no-filter"
msgstr "--no-filter"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:935
msgid "Turn off any previous `--filter=` argument."
msgstr "以前の `--filter=` 引数をすべてオフにします。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:936
#, no-wrap
msgid "--filter-provided-objects"
msgstr "--filter-provided-objects"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:940
msgid ""
"Filter the list of explicitly provided objects, which would otherwise always "
"be printed even if they did not match any of the filters. Only useful with "
"`--filter=`."
msgstr "明示的に提供されたオブジェクトのリストをフィルタリングします。そうしないと、どのフィルターとも一致しなくても常に出力されます。 `--filter=` と一緒に使った時のみ役に立ちます。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:941
#, no-wrap
msgid "--filter-print-omitted"
msgstr "--filter-print-omitted"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:944
msgid ""
"Only useful with `--filter=`; prints a list of the objects omitted by the "
"filter.  Object IDs are prefixed with a ``~'' character."
msgstr "`--filter=` と一緒の時のみ役立ちます。フィルタによって省略されたオブジェクトのリストを出力します。オブジェクトIDの前には ``~'' 文字が付いています。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:945
#, no-wrap
msgid "--missing=<missing-action>"
msgstr "--missing=<missing-action>"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:948
msgid ""
"A debug option to help with future \"partial clone\" development.  This "
"option specifies how missing objects are handled."
msgstr "将来の「部分クローン」(partial clone)開発に役立つデバッグオプション。このオプションは、欠落しているオブジェクトの処理方法を指定します。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:951
msgid ""
"The form '--missing=error' requests that rev-list stop with an error if a "
"missing object is encountered.  This is the default action."
msgstr "'--missing=error' の形式は、欠落しているオブジェクトが検出された場合に、rev-list がエラーで停止することを要求します。これがデフォルトのアクションです。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:955
msgid ""
"The form '--missing=allow-any' will allow object traversal to continue if a "
"missing object is encountered.  Missing objects will silently be omitted "
"from the results."
msgstr "'--missing=allow-any' の形式を使用すると、欠落しているオブジェクトが検出された場合でも、オブジェクトの走査を続行できます。欠落しているオブジェクトは、結果から黙って省略されます。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:959
msgid ""
"The form '--missing=allow-promisor' is like 'allow-any', but will only allow "
"object traversal to continue for EXPECTED promisor missing objects.  "
"Unexpected missing objects will raise an error."
msgstr "'--missing=allow-promisor' の形式は 'allow-any' に似ていますが、オブジェクトのトラバーサルは、 EXPECTED promisor が欠落しているオブジェクトに対してのみ続行できます。予期しない欠落したオブジェクトはエラーを発生させます。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:962
msgid ""
"The form '--missing=print' is like 'allow-any', but will also print a list "
"of the missing objects.  Object IDs are prefixed with a ``?'' character."
msgstr "'--missing=print' の形式は 'allow-any' に似ていますが、欠落しているオブジェクトのリストも出力します。オブジェクトIDの前には ``?'' 文字が付いています。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:963
#, no-wrap
msgid "--exclude-promisor-objects"
msgstr "--exclude-promisor-objects"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:969
msgid ""
"(For internal use only.)  Prefilter object traversal at promisor boundary.  "
"This is used with partial clone.  This is stronger than "
"`--missing=allow-promisor` because it limits the traversal, rather than just "
"silencing errors about missing objects."
msgstr "(内部使用のみ。) promisor境界でのオブジェクトトラバーサルをプレフィルターします。これは部分クローン(partial clone)で使用されます。これは、欠落しているオブジェクトに関するエラーを単に黙らせるのではなく、トラバーサルを制限するため、 `--missing=allow-promisor` よりも強力です。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:971
#, no-wrap
msgid "--unsorted-input"
msgstr "--unsorted-input"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:975
msgid ""
"Show commits in the order they were given on the command line instead of "
"sorting them in reverse chronological order by commit time. Cannot be "
"combined with `--no-walk` or `--no-walk=sorted`."
msgstr "コミット時間で時系列の逆順に並べ替えるのではなく、コマンドラインで指定された順序でコミットを表示します。`--no-walk` または `--no-walk=sorted` と組み合わせることはできません。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:976
#, no-wrap
msgid "--no-walk[=(sorted|unsorted)]"
msgstr "--no-walk[=(sorted|unsorted)]"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:985
msgid ""
"Only show the given commits, but do not traverse their ancestors.  This has "
"no effect if a range is specified. If the argument `unsorted` is given, the "
"commits are shown in the order they were given on the command "
"line. Otherwise (if `sorted` or no argument was given), the commits are "
"shown in reverse chronological order by commit time.  Cannot be combined "
"with `--graph`. Cannot be combined with `--unsorted-input` if `sorted` or no "
"argument was given."
msgstr "指定されたコミットのみを表示し、祖先をトラバースしない。範囲が指定されている場合、これは効果がありません。引数 `unsorted` が指定されている場合、コミットはコマンドラインで指定された順序で表示されます。それ以外の場合( `sorted` または引数が指定されていない場合)、コミットはコミット時間の逆順に表示されます。 `--graph` と組み合わせることはできません。 `sorted` または引数が指定されていない場合、 `--unsorted-input` と組み合わせることはできません。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:986
#, no-wrap
msgid "--do-walk"
msgstr "--do-walk"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:988
msgid "Overrides a previous `--no-walk`."
msgstr "以前の `--no-walk` を上書きします。"

#. type: Title ~
#: ../Documentation/rev-list-options.txt:992
#, no-wrap
msgid "Commit Formatting"
msgstr "Commit Formatting"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:998
msgid ""
"Using these options, linkgit:git-rev-list[1] will act similar to the more "
"specialized family of commit log tools: linkgit:git-log[1], "
"linkgit:git-show[1], and linkgit:git-whatchanged[1]"
msgstr "これらのオプションを使用すると、 linkgit:git-rev-list[1] より専門的なコミットログツールのファミリーである linkgit:git-log[1] や linkgit:git-show[1] や  linkgit:git-whatchanged[1] と同様に機能します。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:1002
#, no-wrap
msgid "--relative-date"
msgstr "--relative-date"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:1004
msgid "Synonym for `--date=relative`."
msgstr "`--date=relative` と同じ。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:1005
#, no-wrap
msgid "--date=<format>"
msgstr "--date=<format>"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:1012
msgid ""
"Only takes effect for dates shown in human-readable format, such as when "
"using `--pretty`. `log.date` config variable sets a default value for the "
"log command's `--date` option. By default, dates are shown in the original "
"time zone (either committer's or author's). If `-local` is appended to the "
"format (e.g., `iso-local`), the user's local time zone is used instead."
msgstr "`--pretty` を使用する場合など、人間が読める形式で表示される日付に対してのみ有効になります。 `log.date` 構成変数(config variable)は、logコマンドの `--date` オプションのデフォルト値を設定します。デフォルトでは、日付は元のタイムゾーン(コミッターまたは作成者のいずれか)で表示されます。フォーマットに `-local` が追加されている場合(例: `iso-local` )、代わりにユーザーのローカルタイムゾーンが使用されます。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:1017
msgid ""
"`--date=relative` shows dates relative to the current time, e.g. ``2 hours "
"ago''. The `-local` option has no effect for `--date=relative`."
msgstr "`--date=relative` は、現在の時刻を基準にした日付を示します。例: ``2 hours ago'' 。 `-local` オプションは `--date = relative` には効果がありません。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:1019
msgid "`--date=local` is an alias for `--date=default-local`."
msgstr "`--date=local` は `--date=default-local` のエイリアスです。"

# wikipedia:https://ja.wikipedia.org/wiki/ISO_8601
# ISO 8601形式の時刻表記例
# 基本形式 	20211011T205815+0900
# 拡張形式 	2021-10-11T20:58:15+09:00
#. type: Plain text
#: ../Documentation/rev-list-options.txt:1022
msgid ""
"`--date=iso` (or `--date=iso8601`) shows timestamps in a ISO 8601-like "
"format.  The differences to the strict ISO 8601 format are:"
msgstr "`--date=iso` (または `--date=iso8601` )は、タイムスタンプをISO 8601のような形式で表示します。厳密なISO 8601形式との違いは以下のとおりです:"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:1024
msgid "a space instead of the `T` date/time delimiter"
msgstr "`T` 日付/時刻区切り文字の代わりにスペース"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:1025
msgid "a space between time and time zone"
msgstr "時間とタイムゾーンの間のスペース"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:1026
msgid "no colon between hours and minutes of the time zone"
msgstr "タイムゾーンの時間と分の間にコロンがありません"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:1029
msgid ""
"`--date=iso-strict` (or `--date=iso8601-strict`) shows timestamps in strict "
"ISO 8601 format."
msgstr "`--date=iso-strict` (または `--date=iso8601-strict` )は、タイムスタンプを厳密なISO 8601形式で表示します。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:1032
msgid ""
"`--date=rfc` (or `--date=rfc2822`) shows timestamps in RFC 2822 format, "
"often found in email messages."
msgstr "`--date=rfc` (または `--date=rfc2822` )は、RFC 2822形式のタイムスタンプを示します。これは、電子メールメッセージでよく見られます。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:1034
msgid ""
"`--date=short` shows only the date, but not the time, in `YYYY-MM-DD` "
"format."
msgstr "`--date=short` は、日付のみを表示し、時刻は表示せず、 `YYYY-MM-DD` 形式で表示します。"

# Unix time (also known as Epoch time, Posix time,[1] seconds since the Epoch,[2] or UNIX Epoch time[3]) 
#. type: Plain text
#: ../Documentation/rev-list-options.txt:1043
msgid ""
"`--date=raw` shows the date as seconds since the epoch (1970-01-01 00:00:00 "
"UTC), followed by a space, and then the timezone as an offset from UTC (a "
"`+` or `-` with four digits; the first two are hours, and the second two are "
"minutes). I.e., as if the timestamp were formatted with `strftime(\"%s "
"%z\")`).  Note that the `-local` option does not affect the "
"seconds-since-epoch value (which is always measured in UTC), but does switch "
"the accompanying timezone value."
msgstr "`--date=raw` は、エポック(1970-01-01 00:00:00 UTC)からの秒数、スペース、UTCからのオフセット(`+` または `-` の付いた4桁数字で、最初の2つは時間、次の2つは分です)。つまり、タイムスタンプが `strftime(\"%s %z\")` でフォーマットされているかのようになります。 `-local` オプションは、seconds-since-epoch値(常にUTCで測定されます)には影響しませんが、付随するタイムゾーン値を切り替えることに注意してください。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:1050
msgid ""
"`--date=human` shows the timezone if the timezone does not match the current "
"time-zone, and doesn't print the whole date if that matches (ie skip "
"printing year for dates that are \"this year\", but also skip the whole date "
"itself if it's in the last few days and we can just say what weekday it "
"was).  For older dates the hour and minute is also omitted."
msgstr "`--date=human` は、タイムゾーンが現在のタイムゾーンと一致しない場合はタイムゾーンを表示し、一致する場合は日付全体を印刷しません(つまり、「今年」の日付の場合は年の印刷をスキップしますが、何があったか覚えてるような過去数日については日付自体もスキップします)。 古い日付の場合、時と分も省略されます。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:1054
msgid ""
"`--date=unix` shows the date as a Unix epoch timestamp (seconds since "
"1970).  As with `--raw`, this is always in UTC and therefore `-local` has no "
"effect."
msgstr "`--date=unix` は、日付をUnixエポックタイムスタンプ(1970年からの秒数)として表示します。 `--raw` と同様に、これは常にUTCであるため、 ` -local` は効果がありません。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:1061
msgid ""
"`--date=format:...` feeds the format `...` to your system `strftime`, except "
"for %z and %Z, which are handled internally.  Use `--date=format:%c` to show "
"the date in your system locale's preferred format.  See the `strftime` "
"manual for a complete list of format placeholders. When using `-local`, the "
"correct syntax is `--date=format-local:...`."
msgstr "`--date=format:...` は、内部で処理される%zと%Zを除いて、フォーマット `...` をあなたのシステムの `strftime` に送ります。 `--date=format:%c` を使用して、システムロケールの推奨形式で日付を表示します。フォーマットプレースホルダーの完全なリストについては、 `strftime` マニュアルを参照してください。 `-local` を使用する場合、正しい構文は `--date=format-local:...` です。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:1064
msgid ""
"`--date=default` is the default format, and is similar to `--date=rfc2822`, "
"with a few exceptions:"
msgstr "`--date=default` はデフォルトの形式であり、いくつかの例外を除いて `--date=rfc2822` に似ています:"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:1066
msgid "there is no comma after the day-of-week"
msgstr "曜日の後にコンマはありません"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:1068
msgid "the time zone is omitted when the local time zone is used"
msgstr "ローカルタイムゾーンを使用する場合、タイムゾーンは省略されます"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:1070
#, no-wrap
msgid "--header"
msgstr "--header"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:1073
msgid ""
"Print the contents of the commit in raw-format; each record is separated "
"with a NUL character."
msgstr "コミットの内容をraw形式で出力します。各レコードはNUL文字で区切られます。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:1074
#, no-wrap
msgid "--no-commit-header"
msgstr "--no-commit-header"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:1078
msgid ""
"Suppress the header line containing \"commit\" and the object ID printed "
"before the specified format.  This has no effect on the built-in formats; "
"only custom formats are affected."
msgstr "\"commit\" を含むヘッダー行と、指定された形式の前に出力されたオブジェクトIDを抑制します。これは組み込みフォーマットには影響しません。 カスタムフォーマットのみが影響を受けます。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:1079
#, no-wrap
msgid "--commit-header"
msgstr "--commit-header"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:1081
msgid "Overrides a previous `--no-commit-header`."
msgstr "以前の `--no-commit-header` を上書きします。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:1083
#, no-wrap
msgid "--parents"
msgstr "--parents"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:1086
msgid ""
"Print also the parents of the commit (in the form \"commit parent...\").  "
"Also enables parent rewriting, see 'History Simplification' above."
msgstr "コミットの親も出力します( \"commit parent...\" の形式で)。親の書き換えも可能にします。上記の 'History Simplification' 参照してください。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:1087
#, no-wrap
msgid "--children"
msgstr "--children"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:1090
msgid ""
"Print also the children of the commit (in the form \"commit child...\").  "
"Also enables parent rewriting, see 'History Simplification' above."
msgstr "コミットの子も出力します( \"commit child...\" の形式で)。親の書き換えも可能にします。上記の 'History Simplification' を参照してください。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:1092
#, no-wrap
msgid "--timestamp"
msgstr "--timestamp"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:1094
msgid "Print the raw commit timestamp."
msgstr "生のコミットタイムスタンプを出力します。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:1096
#, no-wrap
msgid "--left-right"
msgstr "--left-right"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:1101
msgid ""
"Mark which side of a symmetric difference a commit is reachable from.  "
"Commits from the left side are prefixed with `<` and those from the right "
"with `>`.  If combined with `--boundary`, those commits are prefixed with "
"`-`."
msgstr "対称差のどちら側からコミットに到達できるかをマークします。左側からのコミットには`<`が付けられ、右側からのコミットには `>`が付けられます。`--boundary`と組み合わせると、それらのコミットの前に`-`が付きます。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:1103
msgid "For example, if you have this topology:"
msgstr "たとえば、以下のトポロジーの場合:"

#. type: delimited block -
#: ../Documentation/rev-list-options.txt:1110
#, no-wrap
msgid ""
"\t     y---b---b  branch B\n"
"\t    / \\ /\n"
"\t   /   .\n"
"\t  /   / \\\n"
"\t o---x---a---a  branch A\n"
msgstr ""
"\t     y---b---b  branch B\n"
"\t    / \\ /\n"
"\t   /   .\n"
"\t  /   / \\\n"
"\t o---x---a---a  branch A\n"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:1113
msgid "you would get an output like this:"
msgstr "以下のような出力が得られます:"

#. type: delimited block -
#: ../Documentation/rev-list-options.txt:1116
#, no-wrap
msgid "\t$ git rev-list --left-right --boundary --pretty=oneline A...B\n"
msgstr "\t$ git rev-list --left-right --boundary --pretty=oneline A...B\n"

#. type: delimited block -
#: ../Documentation/rev-list-options.txt:1123
#, no-wrap
msgid ""
"\t>bbbbbbb... 3rd on b\n"
"\t>bbbbbbb... 2nd on b\n"
"\t<aaaaaaa... 3rd on a\n"
"\t<aaaaaaa... 2nd on a\n"
"\t-yyyyyyy... 1st on b\n"
"\t-xxxxxxx... 1st on a\n"
msgstr ""
"\t>bbbbbbb... 3rd on b\n"
"\t>bbbbbbb... 2nd on b\n"
"\t<aaaaaaa... 3rd on a\n"
"\t<aaaaaaa... 2nd on a\n"
"\t-yyyyyyy... 1st on b\n"
"\t-xxxxxxx... 1st on a\n"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:1125
#, no-wrap
msgid "--graph"
msgstr "--graph"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:1131
msgid ""
"Draw a text-based graphical representation of the commit history on the left "
"hand side of the output.  This may cause extra lines to be printed in "
"between commits, in order for the graph history to be drawn properly.  "
"Cannot be combined with `--no-walk`."
msgstr "出力の左側に、コミット履歴のテキストベースのグラフィック表現を描画します。グラフ履歴を適切に描画するために、コミットの間に余分な行が出力される可能性があります。 `--no-walk` と組み合わせることはできません。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:1133
msgid "This enables parent rewriting, see 'History Simplification' above."
msgstr "これにより、親の書き換えが可能になります。上記の 'History Simplification' を参照してください。"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:1136
msgid ""
"This implies the `--topo-order` option by default, but the `--date-order` "
"option may also be specified."
msgstr "これは、デフォルトで `--topo-order` オプションを意味しますが、 `--date-order` オプションも指定できます。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:1137
#, no-wrap
msgid "--show-linear-break[=<barrier>]"
msgstr "--show-linear-break[=<barrier>]"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:1143
msgid ""
"When --graph is not used, all history branches are flattened which can make "
"it hard to see that the two consecutive commits do not belong to a linear "
"branch. This option puts a barrier in between them in that case. If "
"`<barrier>` is specified, it is the string that will be shown instead of the "
"default one."
msgstr "--graph を使用しない場合、すべての履歴ブランチがフラット化されるため、2つの連続するコミットが線形ブランチに属していないことがわかりにくくなる可能性があります。このオプションは、その場合、それらの間に障壁を置きます。 `<barrier>` が指定されている場合、デフォルトの障壁文字列の代わりに `<barrier>` が表示されます。"

#. type: Labeled list
#: ../Documentation/rev-list-options.txt:1145
#, no-wrap
msgid "--count"
msgstr "--count"

#. type: Plain text
#: ../Documentation/rev-list-options.txt:1153
msgid ""
"Print a number stating how many commits would have been listed, and suppress "
"all other output.  When used together with `--left-right`, instead print the "
"counts for left and right commits, separated by a tab. When used together "
"with `--cherry-mark`, omit patch equivalent commits from these counts and "
"print the count for equivalent commits separated by a tab."
msgstr "リストされたコミットの数を示す数値を出力し、他のすべての出力を抑制します。 `--left-right` と一緒に使用する場合は、代わりに、タブで区切って、左右のコミットのカウントを出力します。 `--cherry-mark` と一緒に使用する場合は、これらのカウントからパッチの同等のコミットを省略し、タブで区切られた同等のコミットのカウントを出力します。"
