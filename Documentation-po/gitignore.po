# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-11-04 04:38+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/gitignore.txt:2
#, no-wrap
msgid "gitignore(5)"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/gitignore.txt:5
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:7
msgid "gitignore - Specifies intentionally untracked files to ignore"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/gitignore.txt:9
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:11
msgid "$XDG_CONFIG_HOME/git/ignore, $GIT_DIR/info/exclude, .gitignore"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/gitignore.txt:13
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:19
msgid ""
"A `gitignore` file specifies intentionally untracked files that Git should "
"ignore.  Files already tracked by Git are not affected; see the NOTES below "
"for details."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:25
msgid ""
"Each line in a `gitignore` file specifies a pattern.  When deciding whether "
"to ignore a path, Git normally checks `gitignore` patterns from multiple "
"sources, with the following order of precedence, from highest to lowest "
"(within one level of precedence, the last matching pattern decides the "
"outcome):"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:28
msgid ""
"Patterns read from the command line for those commands that support them."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:36
msgid ""
"Patterns read from a `.gitignore` file in the same directory as the path, or "
"in any parent directory (up to the top-level of the working tree), with "
"patterns in the higher level files being overridden by those in lower level "
"files down to the directory containing the file. These patterns match "
"relative to the location of the `.gitignore` file.  A project normally "
"includes such `.gitignore` files in its repository, containing patterns for "
"files generated as part of the project build."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:38
msgid "Patterns read from `$GIT_DIR/info/exclude`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:41
msgid ""
"Patterns read from the file specified by the configuration variable `core."
"excludesFile`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:44
msgid ""
"Which file to place a pattern in depends on how the pattern is meant to be "
"used."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:48
msgid ""
"Patterns which should be version-controlled and distributed to other "
"repositories via clone (i.e., files that all developers will want to ignore) "
"should go into a `.gitignore` file."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:54
msgid ""
"Patterns which are specific to a particular repository but which do not need "
"to be shared with other related repositories (e.g., auxiliary files that "
"live inside the repository but are specific to one user's workflow) should "
"go into the `$GIT_DIR/info/exclude` file."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:61
msgid ""
"Patterns which a user wants Git to ignore in all situations (e.g., backup or "
"temporary files generated by the user's editor of choice) generally go into "
"a file specified by `core.excludesFile` in the user's `~/.gitconfig`. Its "
"default value is $XDG_CONFIG_HOME/git/ignore. If $XDG_CONFIG_HOME is either "
"not set or empty, $HOME/.config/git/ignore is used instead."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:68
msgid ""
"The underlying Git plumbing tools, such as 'git ls-files' and 'git read-"
"tree', read `gitignore` patterns specified by command-line options, or from "
"files specified by command-line options.  Higher-level Git tools, such as "
"'git status' and 'git add', use patterns from the sources specified above."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/gitignore.txt:70
#, no-wrap
msgid "PATTERN FORMAT"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:74
msgid ""
"A blank line matches no files, so it can serve as a separator for "
"readability."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:78
msgid ""
"A line starting with # serves as a comment.  Put a backslash (\"`\\`\") in "
"front of the first hash for patterns that begin with a hash."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:81
msgid ""
"Trailing spaces are ignored unless they are quoted with backslash (\"`\\`\")."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:90
msgid ""
"An optional prefix \"`!`\" which negates the pattern; any matching file "
"excluded by a previous pattern will become included again. It is not "
"possible to re-include a file if a parent directory of that file is "
"excluded. Git doesn't list excluded directories for performance reasons, so "
"any patterns on contained files have no effect, no matter where they are "
"defined.  Put a backslash (\"`\\`\") in front of the first \"`!`\" for "
"patterns that begin with a literal \"`!`\", for example, \"`\\!important!."
"txt`\"."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:93
msgid ""
"The slash '/' is used as the directory separator. Separators may occur at "
"the beginning, middle or end of the `.gitignore` search pattern."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:98
msgid ""
"If there is a separator at the beginning or middle (or both) of the pattern, "
"then the pattern is relative to the directory level of the particular `."
"gitignore` file itself. Otherwise the pattern may also match at any level "
"below the `.gitignore` level."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:102
msgid ""
"If there is a separator at the end of the pattern then the pattern will only "
"match directories, otherwise the pattern can match both files and "
"directories."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:107
msgid ""
"For example, a pattern `doc/frotz/` matches `doc/frotz` directory, but not "
"`a/doc/frotz` directory; however `frotz/` matches `frotz` and `a/frotz` that "
"is a directory (all paths are relative from the `.gitignore` file)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:113
msgid ""
"An asterisk \"`*`\" matches anything except a slash.  The character \"`?`\" "
"matches any one character except \"`/`\".  The range notation, e.g. `[a-zA-"
"Z]`, can be used to match one of the characters in a range. See fnmatch(3) "
"and the FNM_PATHNAME flag for a more detailed description."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:116
msgid ""
"Two consecutive asterisks (\"`**`\") in patterns matched against full "
"pathname may have special meaning:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:122
msgid ""
"A leading \"`**`\" followed by a slash means match in all directories. For "
"example, \"`**/foo`\" matches file or directory \"`foo`\" anywhere, the same "
"as pattern \"`foo`\". \"`**/foo/bar`\" matches file or directory \"`bar`\" "
"anywhere that is directly under directory \"`foo`\"."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:126
msgid ""
"A trailing \"`/**`\" matches everything inside. For example, \"`abc/**`\" "
"matches all files inside directory \"`abc`\", relative to the location of "
"the `.gitignore` file, with infinite depth."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:130
msgid ""
"A slash followed by two consecutive asterisks then a slash matches zero or "
"more directories. For example, \"`a/**/b`\" matches \"`a/b`\", \"`a/x/b`\", "
"\"`a/x/y/b`\" and so on."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:133
msgid ""
"Other consecutive asterisks are considered regular asterisks and will match "
"according to the previous rules."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/gitignore.txt:135
#, no-wrap
msgid "CONFIGURATION"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:141
msgid ""
"The optional configuration variable `core.excludesFile` indicates a path to "
"a file containing patterns of file names to exclude, similar to `$GIT_DIR/"
"info/exclude`.  Patterns in the exclude file are used in addition to those "
"in `$GIT_DIR/info/exclude`."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/gitignore.txt:143
#, no-wrap
msgid "NOTES"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:147
msgid ""
"The purpose of gitignore files is to ensure that certain files not tracked "
"by Git remain untracked."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:150
msgid ""
"To stop tracking a file that is currently tracked, use 'git rm --cached'."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:154
msgid ""
"Git does not follow symbolic links when accessing a `.gitignore` file in the "
"working tree. This keeps behavior consistent when the file is accessed from "
"the index or a tree versus from the filesystem."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/gitignore.txt:156
#, no-wrap
msgid "EXAMPLES"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:164
msgid ""
"The pattern `hello.*` matches any file or folder whose name begins with "
"`hello.`. If one wants to restrict this only to the directory and not in its "
"subdirectories, one can prepend the pattern with a slash, i.e. `/hello.*`; "
"the pattern now matches `hello.txt`, `hello.c` but not `a/hello.java`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:169
msgid ""
"The pattern `foo/` will match a directory `foo` and paths underneath it, but "
"will not match a regular file or a symbolic link `foo` (this is consistent "
"with the way how pathspec works in general in Git)"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:174
msgid ""
"The pattern `doc/frotz` and `/doc/frotz` have the same effect in any `."
"gitignore` file. In other words, a leading slash is not relevant if there is "
"already a middle slash in the pattern."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:179
msgid ""
"The pattern \"foo/*\", matches \"foo/test.json\" (a regular file), \"foo/bar"
"\" (a directory), but it does not match \"foo/bar/hello.c\" (a regular "
"file), as the asterisk in the pattern does not match \"bar/hello.c\" which "
"has a slash in it."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitignore.txt:205
#, no-wrap
msgid ""
"    $ git status\n"
"    [...]\n"
"    # Untracked files:\n"
"    [...]\n"
"    #       Documentation/foo.html\n"
"    #       Documentation/gitignore.html\n"
"    #       file.o\n"
"    #       lib.a\n"
"    #       src/internal.o\n"
"    [...]\n"
"    $ cat .git/info/exclude\n"
"    # ignore objects and archives, anywhere in the tree.\n"
"    *.[oa]\n"
"    $ cat Documentation/.gitignore\n"
"    # ignore generated html files,\n"
"    *.html\n"
"    # except foo.html which is maintained by hand\n"
"    !foo.html\n"
"    $ git status\n"
"    [...]\n"
"    # Untracked files:\n"
"    [...]\n"
"    #       Documentation/foo.html\n"
"    [...]\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:208
msgid "Another example:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitignore.txt:215
#, no-wrap
msgid ""
"    $ cat .gitignore\n"
"    vmlinux*\n"
"    $ ls arch/foo/kernel/vm*\n"
"    arch/foo/kernel/vmlinux.lds.S\n"
"    $ echo '!/vmlinux*' >arch/foo/kernel/.gitignore\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:219
msgid ""
"The second .gitignore prevents Git from ignoring `arch/foo/kernel/vmlinux."
"lds.S`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:223
msgid ""
"Example to exclude everything except a specific directory `foo/bar` (note "
"the `/*` - without the slash, the wildcard would also exclude everything "
"within `foo/bar`):"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/gitignore.txt:231
#, no-wrap
msgid ""
"    $ cat .gitignore\n"
"    # exclude everything except directory foo/bar\n"
"    /*\n"
"    !/foo\n"
"    /foo/*\n"
"    !/foo/bar\n"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/gitignore.txt:234
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:238
msgid ""
"linkgit:git-rm[1], linkgit:gitrepository-layout[5], linkgit:git-check-"
"ignore[1]"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/gitignore.txt:240
#, no-wrap
msgid "GIT"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:241
msgid "Part of the linkgit:git[1] suite"
msgstr ""
