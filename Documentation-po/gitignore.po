# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 2.0\n"
"POT-Creation-Date: 2023-07-18 11:05+0900\n"
"PO-Revision-Date: 2022-10-13 03:17+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/gitignore.txt:2
#, no-wrap
msgid "gitignore(5)"
msgstr "gitignore(5)"

#. type: Title -
#: ../Documentation-sedout/gitignore.txt:5
#, no-wrap
msgid "NAME"
msgstr "NAME"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:7
msgid "gitignore - Specifies intentionally untracked files to ignore"
msgstr "gitignore - 無視する、意図的に追跡しないファイルを指定します"

#. type: Title -
#: ../Documentation-sedout/gitignore.txt:9
#, no-wrap
msgid "SYNOPSIS"
msgstr "SYNOPSIS"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:11
msgid "$XDG_CONFIG_HOME/git/ignore, $GIT_DIR/info/exclude, .gitignore"
msgstr "$XDG_CONFIG_HOME/git/ignore, $GIT_DIR/info/exclude, .gitignore"

#. type: Title -
#: ../Documentation-sedout/gitignore.txt:13
#, no-wrap
msgid "DESCRIPTION"
msgstr "DESCRIPTION"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:19
msgid ""
"A `gitignore` file specifies intentionally untracked files that Git should "
"ignore.  Files already tracked by Git are not affected; see the NOTES below "
"for details."
msgstr ""
"`gitignore` ファイルは、Gitが無視する必要のある意図的に追跡しないファイルを指"
"定します。 Gitによってすでに追跡されているファイルは影響を受けません。 詳細に"
"ついては、以下のNOTESを参照してください。"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:25
msgid ""
"Each line in a `gitignore` file specifies a pattern.  When deciding whether "
"to ignore a path, Git normally checks `gitignore` patterns from multiple "
"sources, with the following order of precedence, from highest to lowest "
"(within one level of precedence, the last matching pattern decides the "
"outcome):"
msgstr ""
"`gitignore` ファイルの各行にはパターンを指定します。パスを無視するかどうかを"
"決定するとき、Gitは通常、複数のソースからの `gitignore` パターンを、最高から"
"最低の順に以下の優先順位でチェックします(各レベルの優先順位内では最後に一致す"
"るパターンが結果を決定します)。"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:28
msgid ""
"Patterns read from the command line for those commands that support them."
msgstr ""
"パターンは、それらをサポートするコマンドのコマンドラインから読み取られます。"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:36
msgid ""
"Patterns read from a `.gitignore` file in the same directory as the path, or "
"in any parent directory (up to the top-level of the working tree), with "
"patterns in the higher level files being overridden by those in lower level "
"files down to the directory containing the file. These patterns match "
"relative to the location of the `.gitignore` file.  A project normally "
"includes such `.gitignore` files in its repository, containing patterns for "
"files generated as part of the project build."
msgstr ""
"そのパスから見て同じディレクトリまたは親ディレクトリ(作業ツリーの最上位まで)"
"にある `.gitignore` ファイルから読み取られたパターン。ディレクトリの上位レベ"
"ルのファイルのパターンは、`.gitignore` ファイルを含むディレクトリまでディレク"
"トリ下位レベルの `.gitignore` ファイルのパターンによって上書きされますこれら"
"のパターンは、 `.gitignore` ファイルのあるディレクトリを基準にしてマッチしま"
"す。 プロジェクトは通常、リポジトリにそのような、プロジェクトビルドの部品とし"
"て生成されたファイルのパターンを含んだ `.gitignore` ファイルを含みます。(訳"
"注:各サブディレクトリに .gigignore ファイルを含む事ができ、各ディレクトリの ."
"gitignore はその親ディレクトリまたはその上位ディレクトリの .gitignore をオー"
"バーライドする)"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:38
msgid "Patterns read from `$GIT_DIR/info/exclude`."
msgstr "パターンは `$GIT_DIR/info/exclude` から読み取られます。"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:41
msgid ""
"Patterns read from the file specified by the configuration variable `core."
"excludesFile`."
msgstr ""
"構成変数 `core.excludesFile` で指定されたファイルから読み取られたパターン。"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:44
msgid ""
"Which file to place a pattern in depends on how the pattern is meant to be "
"used."
msgstr "パターンを配置するファイルは、パターンの使用方法によって異なります。"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:48
msgid ""
"Patterns which should be version-controlled and distributed to other "
"repositories via clone (i.e., files that all developers will want to ignore) "
"should go into a `.gitignore` file."
msgstr ""
"バージョン管理され、クローンを介して他のリポジトリに配布される必要があるパ"
"ターン(つまり、すべての開発者が無視したいファイル)は、 `.gitignore` ファイル"
"に入れる必要があります。"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:54
msgid ""
"Patterns which are specific to a particular repository but which do not need "
"to be shared with other related repositories (e.g., auxiliary files that "
"live inside the repository but are specific to one user's workflow) should "
"go into the `$GIT_DIR/info/exclude` file."
msgstr ""
"特定のリポジトリに固有であるが、他の関連するリポジトリと共有する必要のないパ"
"ターン(たとえば、リポジトリ内に存在するが1人のユーザーのワークフローに固有の"
"補助ファイル)は、 `$GIT_DIR/info/exclude` ファイルに配置する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:61
msgid ""
"Patterns which a user wants Git to ignore in all situations (e.g., backup or "
"temporary files generated by the user's editor of choice) generally go into "
"a file specified by `core.excludesFile` in the user's `~/.gitconfig`. Its "
"default value is $XDG_CONFIG_HOME/git/ignore. If $XDG_CONFIG_HOME is either "
"not set or empty, $HOME/.config/git/ignore is used instead."
msgstr ""
"ユーザーがすべての状況でGitに無視させたいパターン(たとえば、選択したユーザー"
"のエディタによって生成されたバックアップファイルまたは一時ファイル)は、通常、"
"ユーザーの `~/.gitconfig` の `core.excludesFile` で指定されたファイルに入りま"
"す。デフォルト値は $XDG_CONFIG_HOME/git/ignore です。 $XDG_CONFIG_HOME が設定"
"されていないか空の場合、代わりに $HOME/.config/git/ignore が使用されます。"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:68
msgid ""
"The underlying Git plumbing tools, such as 'git ls-files' and 'git read-"
"tree', read `gitignore` patterns specified by command-line options, or from "
"files specified by command-line options.  Higher-level Git tools, such as "
"'git status' and 'git add', use patterns from the sources specified above."
msgstr ""
"`gitls-files` や `git read-tree` などの基盤となるGit配管コマンドツールは、 コ"
"マンドラインオプションで指定された `gitignore` パターンを読み取るか、 コマン"
"ドラインオプションで指定されたファイルから読み取ります。 `git status` や "
"`git add` などの高レベルのGitツールは、 上記で指定されたソースからのパターン"
"を使用します。"

#. type: Title -
#: ../Documentation-sedout/gitignore.txt:70
#, no-wrap
msgid "PATTERN FORMAT"
msgstr "PATTERN FORMAT"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:74
msgid ""
"A blank line matches no files, so it can serve as a separator for "
"readability."
msgstr ""
"空行はどのファイルともマッチしないため、読みやすくするための区切りとして使え"
"ます。"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:78
msgid ""
"A line starting with # serves as a comment.  Put a backslash (\"`\\`\") in "
"front of the first hash for patterns that begin with a hash."
msgstr ""
"`#` で始まる行はコメントとして機能します。 `#` で始まるパターンの最初の `#` "
"の前にはバックスラッシュ(「`\\`」)を置きます。"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:81
msgid ""
"Trailing spaces are ignored unless they are quoted with backslash (\"`\\`\")."
msgstr ""
"末尾の空白は、バックススラッシュ(`\\`)でクォートされていない限り無視されま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:90
msgid ""
"An optional prefix \"`!`\" which negates the pattern; any matching file "
"excluded by a previous pattern will become included again. It is not "
"possible to re-include a file if a parent directory of that file is "
"excluded. Git doesn't list excluded directories for performance reasons, so "
"any patterns on contained files have no effect, no matter where they are "
"defined.  Put a backslash (\"`\\`\") in front of the first \"`!`\" for "
"patterns that begin with a literal \"`!`\", for example, \"`\\!important!."
"txt`\"."
msgstr ""
"パターンを否定するオプションのプレフィックス `!` 。以前のパターンで除外された"
"マッチするファイルは、再び含まれるようになります。そのファイルの親ディレクト"
"リが除外されている場合、そのファイルを再インクルードすることはできません。Git"
"はパフォーマンス上の理由から除外されたディレクトリを一覧表示しないため、含ま"
"れているファイルのパターンは、それらがどこで定義されていても効果がありませ"
"ん。 リテラル `!` で始まるパターンの場合は、最初の `!` の前にバックスラッシュ"
"(`\\`)を付けます(例: `\\!important!.txt`)。"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:93
msgid ""
"The slash '/' is used as the directory separator. Separators may occur at "
"the beginning, middle or end of the `.gitignore` search pattern."
msgstr ""
"スラッシュ `/` はディレクトリ区切り文字として使用されます。区切り文字は、 `."
"gitignore` 検索パターンの最初、中間、または最後に発生する可能性があります。"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:98
msgid ""
"If there is a separator at the beginning or middle (or both) of the pattern, "
"then the pattern is relative to the directory level of the particular `."
"gitignore` file itself. Otherwise the pattern may also match at any level "
"below the `.gitignore` level."
msgstr ""
"パターンの先頭または中間(あるいはその両方)に区切り文字がある場合、パターンは"
"特定の `.gitignore` ファイル自体のディレクトリレベルに関連しています。そうし"
"ないと、パターンは  `.gitignore` レベルより下の任意のレベルでも一致する可能性"
"があります。"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:102
msgid ""
"If there is a separator at the end of the pattern then the pattern will only "
"match directories, otherwise the pattern can match both files and "
"directories."
msgstr ""
"パターンの最後に区切り文字がある場合、パターンはディレクトリのみに一致しま"
"す。それ以外の場合、パターンはファイルとディレクトリの両方に一致する可能性が"
"あります。"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:107
msgid ""
"For example, a pattern `doc/frotz/` matches `doc/frotz` directory, but not "
"`a/doc/frotz` directory; however `frotz/` matches `frotz` and `a/frotz` that "
"is a directory (all paths are relative from the `.gitignore` file)."
msgstr ""
"たとえば、パターン `doc/frotz/` は `doc/frotz` ディレクトリと一致しますが、 "
"`a/doc/frotz` ディレクトリとは一致しません。 ただし、 `frotz/` は `frotz` お"
"よびディレクトリである `a/frotz` と一致します(すべてのパスは `.gitignore` "
"ファイルのあるディレクトリからの相対パスです)。"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:113
msgid ""
"An asterisk \"`*`\" matches anything except a slash.  The character \"`?`\" "
"matches any one character except \"`/`\".  The range notation, e.g. `[a-zA-"
"Z]`, can be used to match one of the characters in a range. See fnmatch(3) "
"and the FNM_PATHNAME flag for a more detailed description."
msgstr ""
"アスタリスク(`*`)はスラッシュ(`/`)以外のものと一致します。文字 `?`  は、 `/` "
"以外の任意の1文字と一致します。 範囲表記、例えば `[a-zA-Z]` は、範囲内の文字"
"の1つと一致させるために使用できます。詳細については、 fnmatch3）および "
"FNM_PATHNAME フラグを参照してください。"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:116
msgid ""
"Two consecutive asterisks (\"`**`\") in patterns matched against full "
"pathname may have special meaning:"
msgstr ""
"フルパス名と一致するパターンの、2つの連続するアスタリスク(`**`)は、以下の特別"
"な意味を持つ場合があります:"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:122
msgid ""
"A leading \"`**`\" followed by a slash means match in all directories. For "
"example, \"`**/foo`\" matches file or directory \"`foo`\" anywhere, the same "
"as pattern \"`foo`\". \"`**/foo/bar`\" matches file or directory \"`bar`\" "
"anywhere that is directly under directory \"`foo`\"."
msgstr ""
"先頭の `**` の後にスラッシュ(`/`)が続く場合は、すべてのディレクトリで一致する"
"ことを意味します。 たとえば、 `**/foo` は、パターン `foo` と同じように、任意"
"の場所のファイルまたはディレクトリ `foo` と一致します。  `**/foo/bar` は、"
"ディレクトリ `foo` の直下にあるファイルまたはディレクトリ `bar` と一致しま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:126
msgid ""
"A trailing \"`/**`\" matches everything inside. For example, \"`abc/**`\" "
"matches all files inside directory \"`abc`\", relative to the location of "
"the `.gitignore` file, with infinite depth."
msgstr ""
"末尾の `/**` は内部のすべてに一致します。 たとえば、 `abc/**` は、 `."
"gitignore` ファイルの場所を基準にして、ディレクトリ `abc` 内のすべてのファイ"
"ルと無限の深さで一致します。"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:130
msgid ""
"A slash followed by two consecutive asterisks then a slash matches zero or "
"more directories. For example, \"`a/**/b`\" matches \"`a/b`\", \"`a/x/b`\", "
"\"`a/x/y/b`\" and so on."
msgstr ""
"スラッシュ(`/`)の後に2つの連続するアスタリスク(`**`)が続く場合、スラッシュは0"
"個以上のディレクトリに一致します。たとえば、 `a/**/b` は `a/b` や `a/x/b` や "
"`a/x/y/b` などと一致します。"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:133
msgid ""
"Other consecutive asterisks are considered regular asterisks and will match "
"according to the previous rules."
msgstr ""
"他の連続するアスタリスクは通常のアスタリスクと見なされ、以前のルールに従って"
"一致します。"

#. type: Title -
#: ../Documentation-sedout/gitignore.txt:135
#, no-wrap
msgid "CONFIGURATION"
msgstr "CONFIGURATION"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:141
msgid ""
"The optional configuration variable `core.excludesFile` indicates a path to "
"a file containing patterns of file names to exclude, similar to `$GIT_DIR/"
"info/exclude`.  Patterns in the exclude file are used in addition to those "
"in `$GIT_DIR/info/exclude`."
msgstr ""
"オプションの構成変数 `core.excludesFile` は、 `$GIT_DIR/info/exclude` と同様"
"に、除外するファイル名のパターンを含むファイルへのパスを示します。 `$GIT_DIR/"
"info/exclude` のパターンに加えて、excludeファイルのパターンが使用されます。"

#. type: Title -
#: ../Documentation-sedout/gitignore.txt:143
#, no-wrap
msgid "NOTES"
msgstr "NOTES"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:147
msgid ""
"The purpose of gitignore files is to ensure that certain files not tracked "
"by Git remain untracked."
msgstr ""
"gitignoreファイルの目的は、Gitによって未だ追跡されていない特定のファイルがGit"
"によって追跡される事が無いようにすることです。"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:152
msgid ""
"To stop tracking a file that is currently tracked, use 'git rm --cached' to "
"remove the file from the index. The filename can then be added to the `."
"gitignore` file to stop the file from being reintroduced in later commits."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:156
msgid ""
"Git does not follow symbolic links when accessing a `.gitignore` file in the "
"working tree. This keeps behavior consistent when the file is accessed from "
"the index or a tree versus from the filesystem."
msgstr ""
"作業ツリーの `.gitignore` ファイルにアクセスするとき、Gitはシンボリックリンク"
"をたどりません。これにより、ファイルシステムからではなく、インデックスまたは"
"ツリーからファイルにアクセスする場合の動作の一貫性が保たれます。"

#. type: Title -
#: ../Documentation-sedout/gitignore.txt:158
#, no-wrap
msgid "EXAMPLES"
msgstr "EXAMPLES"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:166
msgid ""
"The pattern `hello.*` matches any file or directory whose name begins with "
"`hello.`. If one wants to restrict this only to the directory and not in its "
"subdirectories, one can prepend the pattern with a slash, i.e. `/hello.*`; "
"the pattern now matches `hello.txt`, `hello.c` but not `a/hello.java`."
msgstr ""
"パターン `hello.*` は、 名前が `hello.` で始まるすべてのファイルまたはディレ"
"クトリにマッチします。 これをディレクトリのみに制限し、 そのサブディレクトリ"
"には制限したくない場合は、 パターンの前にスラッシュを付けることができます。 "
"つまり、 `/hello.*` とします。 このパターンは `hello.txt` や `hello.c` とマッ"
"チしますが、 `a/hello.java` とはマッチしません。"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:171
msgid ""
"The pattern `foo/` will match a directory `foo` and paths underneath it, but "
"will not match a regular file or a symbolic link `foo` (this is consistent "
"with the way how pathspec works in general in Git)"
msgstr ""
"パターン `foo/` は、ディレクトリ `foo` とその下のパスに一致しますが、通常の"
"ファイルまたはシンボリックリンク `foo` には一致しません(これは、Gitでの"
"pathspecの一般的な動作方法と一致します)"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:176
msgid ""
"The pattern `doc/frotz` and `/doc/frotz` have the same effect in any `."
"gitignore` file. In other words, a leading slash is not relevant if there is "
"already a middle slash in the pattern."
msgstr ""
"パターン `doc/frotz` と `/doc/frotz` は、どの `.gitignore` ファイルでも同じ効"
"果があります。つまり、パターンの中間にスラッシュ(`/`)がある場合、先頭のスラッ"
"シュは関係ありません。"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:181
msgid ""
"The pattern \"foo/*\", matches \"foo/test.json\" (a regular file), \"foo/"
"bar\" (a directory), but it does not match \"foo/bar/hello.c\" (a regular "
"file), as the asterisk in the pattern does not match \"bar/hello.c\" which "
"has a slash in it."
msgstr ""
"パターン `foo/*` は、 `foo/test.json` (通常のファイル) や `foo/bar` (ディレク"
"トリ)とマッチしますが、パターンのアスタリスク(`*`)がスラッシュ(`/`)を含む "
"`bar/hello.c` とマッチしないため、 `foo/bar/hello.c` (通常のファイル)とは一致"
"しません。"

#. type: delimited block -
#: ../Documentation-sedout/gitignore.txt:207
#, no-wrap
msgid ""
"    $ git status\n"
"    [...]\n"
"    # Untracked files:\n"
"    [...]\n"
"    #       Documentation/foo.html\n"
"    #       Documentation/gitignore.html\n"
"    #       file.o\n"
"    #       lib.a\n"
"    #       src/internal.o\n"
"    [...]\n"
"    $ cat .git/info/exclude\n"
"    # ignore objects and archives, anywhere in the tree.\n"
"    *.[oa]\n"
"    $ cat Documentation/.gitignore\n"
"    # ignore generated html files,\n"
"    *.html\n"
"    # except foo.html which is maintained by hand\n"
"    !foo.html\n"
"    $ git status\n"
"    [...]\n"
"    # Untracked files:\n"
"    [...]\n"
"    #       Documentation/foo.html\n"
"    [...]\n"
msgstr ""
"    $ git status\n"
"    [...]\n"
"    # Untracked files:\n"
"    [...]\n"
"    #       Documentation/foo.html\n"
"    #       Documentation/gitignore.html\n"
"    #       file.o\n"
"    #       lib.a\n"
"    #       src/internal.o\n"
"    [...]\n"
"    $ cat .git/info/exclude\n"
"    # ignore objects and archives, anywhere in the tree.\n"
"    *.[oa]\n"
"    $ cat Documentation/.gitignore\n"
"    # ignore generated html files,\n"
"    *.html\n"
"    # except foo.html which is maintained by hand\n"
"    !foo.html\n"
"    $ git status\n"
"    [...]\n"
"    # Untracked files:\n"
"    [...]\n"
"    #       Documentation/foo.html\n"
"    [...]\n"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:210
msgid "Another example:"
msgstr "別の例:"

#. type: delimited block -
#: ../Documentation-sedout/gitignore.txt:217
#, no-wrap
msgid ""
"    $ cat .gitignore\n"
"    vmlinux*\n"
"    $ ls arch/foo/kernel/vm*\n"
"    arch/foo/kernel/vmlinux.lds.S\n"
"    $ echo '!/vmlinux*' >arch/foo/kernel/.gitignore\n"
msgstr ""
"    $ cat .gitignore\n"
"    vmlinux*\n"
"    $ ls arch/foo/kernel/vm*\n"
"    arch/foo/kernel/vmlinux.lds.S\n"
"    $ echo '!/vmlinux*' >arch/foo/kernel/.gitignore\n"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:221
msgid ""
"The second .gitignore prevents Git from ignoring `arch/foo/kernel/vmlinux."
"lds.S`."
msgstr ""
"2番目の .gitignore は、Gitが `arch/foo/kernel/vmlinux.lds.S` を無視するのを防"
"ぎます。"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:225
msgid ""
"Example to exclude everything except a specific directory `foo/bar` (note "
"the `/*` - without the slash, the wildcard would also exclude everything "
"within `foo/bar`):"
msgstr ""
"特定のディレクトリ `foo/bar` 以外のすべてを除外する例(`/*` に注意してくださ"
"い。スラッシュ(`/`)なしでワイルドカード(`*`)は、 `foo/bar` 内のすべても除外し"
"ます):"

#. type: delimited block -
#: ../Documentation-sedout/gitignore.txt:233
#, no-wrap
msgid ""
"    $ cat .gitignore\n"
"    # exclude everything except directory foo/bar\n"
"    /*\n"
"    !/foo\n"
"    /foo/*\n"
"    !/foo/bar\n"
msgstr ""
"    $ cat .gitignore\n"
"    # exclude everything except directory foo/bar\n"
"    /*\n"
"    !/foo\n"
"    /foo/*\n"
"    !/foo/bar\n"

#. type: Title -
#: ../Documentation-sedout/gitignore.txt:236
#, no-wrap
msgid "SEE ALSO"
msgstr "SEE ALSO"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:240
msgid ""
"linkgit:git-rm[1], linkgit:gitrepository-layout[5], linkgit:git-check-"
"ignore[1]"
msgstr ""
"linkgit:git-rm[1], linkgit:gitrepository-layout[5], linkgit:git-check-"
"ignore[1]"

#. type: Title -
#: ../Documentation-sedout/gitignore.txt:242
#, no-wrap
msgid "GIT"
msgstr "GIT"

#. type: Plain text
#: ../Documentation-sedout/gitignore.txt:243
msgid "Part of the linkgit:git[1] suite"
msgstr "Part of the linkgit:git[1] suite"

#~ msgid ""
#~ "To stop tracking a file that is currently tracked, use 'git rm --cached'."
#~ msgstr ""
#~ "現在追跡されているファイルの追跡を停止するには、 `git rm --cached` を使用"
#~ "します。"
