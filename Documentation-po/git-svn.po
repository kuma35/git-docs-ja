# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-11-04 04:38+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/git-svn.txt:2
#, no-wrap
msgid "git-svn(1)"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-svn.txt:5
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:7
msgid ""
"git-svn - Bidirectional operation between a Subversion repository and Git"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-svn.txt:9
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:12
#, no-wrap
msgid "'git svn' <command> [<options>] [<arguments>]\n"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-svn.txt:14
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:18
msgid ""
"'git svn' is a simple conduit for changesets between Subversion and Git.  It "
"provides a bidirectional flow of changes between a Subversion and a Git "
"repository."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:23
msgid ""
"'git svn' can track a standard Subversion repository, following the common "
"\"trunk/branches/tags\" layout, with the --stdlayout option.  It can also "
"follow branches and tags in any layout with the -T/-t/-b options (see "
"options to 'init' below, and also the 'clone' command)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:27
msgid ""
"Once tracking a Subversion repository (with any of the above methods), the "
"Git repository can be updated from Subversion by the 'fetch' command and "
"Subversion updated from Git by the 'dcommit' command."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-svn.txt:29
#, no-wrap
msgid "COMMANDS"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:31
#, no-wrap
msgid "'init'"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:39
msgid ""
"Initializes an empty Git repository with additional metadata directories for "
"'git svn'.  The Subversion URL may be specified as a command-line argument, "
"or as full URL arguments to -T/-t/-b.  Optionally, the target directory to "
"operate on can be specified as a second argument.  Normally this command "
"initializes the current directory."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:40
#, no-wrap
msgid "-T<trunk_subdir>"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:41
#, no-wrap
msgid "--trunk=<trunk_subdir>"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:42
#, no-wrap
msgid "-t<tags_subdir>"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:43
#, no-wrap
msgid "--tags=<tags_subdir>"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:44
#, no-wrap
msgid "-b<branches_subdir>"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:45
#, no-wrap
msgid "--branches=<branches_subdir>"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:46
#, no-wrap
msgid "-s"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:47
#, no-wrap
msgid "--stdlayout"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:58
msgid ""
"These are optional command-line options for init.  Each of these flags can "
"point to a relative repository path (--tags=project/tags) or a full url (--"
"tags=https://foo.org/project/tags).  You can specify more than one --tags "
"and/or --branches options, in case your Subversion repository places tags or "
"branches under multiple paths.  The option --stdlayout is a shorthand way of "
"setting trunk,tags,branches as the relative paths, which is the Subversion "
"default. If any of the other options are given as well, they take precedence."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:58
#, no-wrap
msgid "--no-metadata"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:62
msgid ""
"Set the 'noMetadata' option in the [svn-remote] config.  This option is not "
"recommended, please read the 'svn.noMetadata' section of this manpage before "
"using this option."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:62
#, no-wrap
msgid "--use-svm-props"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:64
msgid "Set the 'useSvmProps' option in the [svn-remote] config."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:64
#, no-wrap
msgid "--use-svnsync-props"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:66
msgid "Set the 'useSvnsyncProps' option in the [svn-remote] config."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:66
#, no-wrap
msgid "--rewrite-root=<URL>"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:68
msgid "Set the 'rewriteRoot' option in the [svn-remote] config."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:68
#, no-wrap
msgid "--rewrite-uuid=<UUID>"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:70
msgid "Set the 'rewriteUUID' option in the [svn-remote] config."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:70
#, no-wrap
msgid "--username=<user>"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:75
msgid ""
"For transports that SVN handles authentication for (http, https, and plain "
"svn), specify the username.  For other transports (e.g. `svn+ssh://`), you "
"must include the username in the URL, e.g. `svn+ssh://foo@svn.bar.com/"
"project`"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:75
#, no-wrap
msgid "--prefix=<prefix>"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:90
msgid ""
"This allows one to specify a prefix which is prepended to the names of "
"remotes if trunk/branches/tags are specified.  The prefix does not "
"automatically include a trailing slash, so be sure you include one in the "
"argument if that is what you want.  If --branches/-b is specified, the "
"prefix must include a trailing slash.  Setting a prefix (with a trailing "
"slash) is strongly encouraged in any case, as your SVN-tracking refs will "
"then be located at \"refs/remotes/$prefix/*\", which is compatible with "
"Git's own remote-tracking ref layout (refs/remotes/$remote/*). Setting a "
"prefix is also useful if you wish to track multiple projects that share a "
"common repository.  By default, the prefix is set to 'origin/'."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:97
msgid ""
"Before Git v2.0, the default prefix was \"\" (no prefix). This meant that "
"SVN-tracking refs were put at \"refs/remotes/*\", which is incompatible with "
"how Git's own remote-tracking refs are organized.  If you still want the old "
"default, you can get it by passing `--prefix \"\"` on the command line (`--"
"prefix=\"\"` may not work if your Perl's Getopt::Long is < v2.37)."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:98
#: ../Documentation-sedout/git-svn.txt:145
#, no-wrap
msgid "--ignore-refs=<regex>"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:102
msgid ""
"When passed to 'init' or 'clone' this regular expression will be preserved "
"as a config key.  See 'fetch' for a description of `--ignore-refs`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:102
#: ../Documentation-sedout/git-svn.txt:157
#, no-wrap
msgid "--ignore-paths=<regex>"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:106
msgid ""
"When passed to 'init' or 'clone' this regular expression will be preserved "
"as a config key.  See 'fetch' for a description of `--ignore-paths`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:106
#: ../Documentation-sedout/git-svn.txt:186
#, no-wrap
msgid "--include-paths=<regex>"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:110
msgid ""
"When passed to 'init' or 'clone' this regular expression will be preserved "
"as a config key.  See 'fetch' for a description of `--include-paths`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:110
#, no-wrap
msgid "--no-minimize-url"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:121
msgid ""
"When tracking multiple directories (using --stdlayout, --branches, or --tags "
"options), git svn will attempt to connect to the root (or highest allowed "
"level) of the Subversion repository.  This default allows better tracking of "
"history if entire projects are moved within a repository, but may cause "
"issues on repositories where read access restrictions are in place.  Passing "
"`--no-minimize-url` will allow git svn to accept URLs as-is without "
"attempting to connect to a higher level directory.  This option is off by "
"default when only one URL/branch is tracked (it would do little good)."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:122
#, no-wrap
msgid "'fetch'"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:127
msgid ""
"Fetch unfetched revisions from the Subversion remote we are tracking.  The "
"name of the [svn-remote \"...\"] section in the $GIT_DIR/config file may be "
"specified as an optional command-line argument."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:130
#: ../Documentation-sedout/git-svn.txt:243
msgid ""
"This automatically updates the rev_map if needed (see '$GIT_DIR/svn/\\**/."
"rev_map.*' in the FILES section below for details)."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:131
#, no-wrap
msgid "--localtime"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:135
msgid ""
"Store Git commit times in the local time zone instead of UTC.  This makes "
"'git log' (even without --date=local) show the same times that `svn log` "
"would in the local time zone."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:141
msgid ""
"This doesn't interfere with interoperating with the Subversion repository "
"you cloned from, but if you wish for your local Git repository to be able to "
"interoperate with someone else's local Git repository, either don't use this "
"option or you should both use it in the same local time zone."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:142
#: ../Documentation-sedout/git-svn.txt:536
#, no-wrap
msgid "--parent"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:144
msgid "Fetch only from the SVN parent of the current HEAD."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:150
msgid ""
"Ignore refs for branches or tags matching the Perl regular expression. A "
"\"negative look-ahead assertion\" like `^refs/remotes/origin/(?!tags/wanted-"
"tag|wanted-branch).*$` can be used to allow only certain refs."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:153
#, no-wrap
msgid "config key: svn-remote.<name>.ignore-refs\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:156
msgid ""
"If the ignore-refs configuration key is set, and the command-line option is "
"also given, both regular expressions will be used."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:163
msgid ""
"This allows one to specify a Perl regular expression that will cause "
"skipping of all matching paths from checkout from SVN.  The `--ignore-paths` "
"option should match for every 'fetch' (including automatic fetches due to "
"'clone', 'dcommit', 'rebase', etc) on a given repository."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:166
#, no-wrap
msgid "config key: svn-remote.<name>.ignore-paths\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:169
msgid ""
"If the ignore-paths configuration key is set, and the command-line option is "
"also given, both regular expressions will be used."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:171
msgid "Examples:"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:173
#, no-wrap
msgid "Skip \"doc*\" directory for every fetch"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-svn.txt:177
#, no-wrap
msgid "--ignore-paths=\"^doc\"\n"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:179
#, no-wrap
msgid "Skip \"branches\" and \"tags\" of first level directories"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-svn.txt:183
#, no-wrap
msgid "--ignore-paths=\"^[^/]+/(?:branches|tags)\"\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:193
msgid ""
"This allows one to specify a Perl regular expression that will cause the "
"inclusion of only matching paths from checkout from SVN.  The `--include-"
"paths` option should match for every 'fetch' (including automatic fetches "
"due to 'clone', 'dcommit', 'rebase', etc) on a given repository. `--ignore-"
"paths` takes precedence over `--include-paths`."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:196
#, no-wrap
msgid "config key: svn-remote.<name>.include-paths\n"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:197
#, no-wrap
msgid "--log-window-size=<n>"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:203
msgid ""
"Fetch <n> log entries per request when scanning Subversion history.  The "
"default is 100. For very large Subversion repositories, larger values may be "
"needed for 'clone'/'fetch' to complete in reasonable time. But overly large "
"values may lead to higher memory usage and request timeouts."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:204
#, no-wrap
msgid "'clone'"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:214
msgid ""
"Runs 'init' and 'fetch'.  It will automatically create a directory based on "
"the basename of the URL passed to it; or if a second argument is passed; it "
"will create a directory and work within that.  It accepts all arguments that "
"the 'init' and 'fetch' commands accept; with the exception of `--fetch-all` "
"and `--parent`.  After a repository is cloned, the 'fetch' command will be "
"able to update revisions without affecting the working tree; and the "
"'rebase' command will be able to update the working tree with the latest "
"changes."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:215
#, no-wrap
msgid "--preserve-empty-dirs"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:221
msgid ""
"Create a placeholder file in the local Git repository for each empty "
"directory fetched from Subversion.  This includes directories that become "
"empty by removing all entries in the Subversion repository (but not the "
"directory itself).  The placeholder files are also tracked and removed when "
"no longer necessary."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:222
#, no-wrap
msgid "--placeholder-filename=<filename>"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:225
msgid ""
"Set the name of placeholder files created by --preserve-empty-dirs.  "
"Default: \".gitignore\""
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:226
#, no-wrap
msgid "'rebase'"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:229
msgid ""
"This fetches revisions from the SVN parent of the current HEAD and rebases "
"the current (uncommitted to SVN) work against it."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:233
msgid ""
"This works similarly to `svn update` or 'git pull' except that it preserves "
"linear history with 'git rebase' instead of 'git merge' for ease of "
"dcommitting with 'git svn'."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:237
msgid ""
"This accepts all options that 'git svn fetch' and 'git rebase' accept.  "
"However, `--fetch-all` only fetches from the current [svn-remote], and not "
"all [svn-remote] definitions."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:240
msgid ""
"Like 'git rebase'; this requires that the working tree be clean and have no "
"uncommitted changes."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:244
#, no-wrap
msgid "-l"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:245
#, no-wrap
msgid "--local"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:248
msgid ""
"Do not fetch remotely; only run 'git rebase' against the last fetched commit "
"from the upstream SVN."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:249
#, no-wrap
msgid "'dcommit'"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:254
msgid ""
"Commit each diff from the current branch directly to the SVN repository, and "
"then rebase or reset (depending on whether or not there is a diff between "
"SVN and head).  This will create a revision in SVN for each commit in Git."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:258
msgid ""
"When an optional Git branch name (or a Git commit object name)  is specified "
"as an argument, the subcommand works on the specified branch, not on the "
"current branch."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:260
msgid "Use of 'dcommit' is preferred to 'set-tree' (below)."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:261
#, no-wrap
msgid "--no-rebase"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:263
msgid "After committing, do not rebase or reset."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:263
#, no-wrap
msgid "--commit-url <URL>"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:269
msgid ""
"Commit to this SVN URL (the full path).  This is intended to allow existing "
"'git svn' repositories created with one transport method (e.g. `svn://` or "
"`http://` for anonymous read) to be reused if a user is later given access "
"to an alternate transport method (e.g. `svn+ssh://` or `https://`) for "
"commit."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:273
#, no-wrap
msgid ""
"config key: svn-remote.<name>.commiturl\n"
"config key: svn.commiturl (overwrites all svn-remote.<name>.commiturl options)\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:277
msgid ""
"Note that the SVN URL of the commiturl config key includes the SVN branch.  "
"If you rather want to set the commit URL for an entire SVN repository use "
"svn-remote.<name>.pushurl instead."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:280
msgid ""
"Using this option for any other purpose (don't ask) is very strongly "
"discouraged."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:281
#, no-wrap
msgid "--mergeinfo=<mergeinfo>"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:288
msgid ""
"Add the given merge information during the dcommit (e.g. `--mergeinfo=\"/"
"branches/foo:1-10\"`). All svn server versions can store this information "
"(as a property), and svn clients starting from version 1.5 can make use of "
"it. To specify merge information from multiple branches, use a single space "
"character between the branches (`--mergeinfo=\"/branches/foo:1-10 /branches/"
"bar:3,5-6,8\"`)"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:291
#, no-wrap
msgid "config key: svn.pushmergeinfo\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:296
msgid ""
"This option will cause git-svn to attempt to automatically populate the svn:"
"mergeinfo property in the SVN repository when possible. Currently, this can "
"only be done when dcommitting non-fast-forward merges where all parents but "
"the first have already been pushed into SVN."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:297
#, no-wrap
msgid "--interactive"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:301
msgid ""
"Ask the user to confirm that a patch set should actually be sent to SVN.  "
"For each patch, one may answer \"yes\" (accept this patch), \"no\" (discard "
"this patch), \"all\" (accept all patches), or \"quit\"."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:304
msgid ""
"'git svn dcommit' returns immediately if answer is \"no\" or \"quit\", "
"without committing anything to SVN."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:305
#, no-wrap
msgid "'branch'"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:307
msgid "Create a branch in the SVN repository."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:308
#, no-wrap
msgid "-m"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:309
#, no-wrap
msgid "--message"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:311
msgid "Allows to specify the commit message."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:312
#, no-wrap
msgid "-t"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:313
#, no-wrap
msgid "--tag"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:316
msgid ""
"Create a tag by using the tags_subdir instead of the branches_subdir "
"specified during git svn init."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:317
#, no-wrap
msgid "-d<path>"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:318
#, no-wrap
msgid "--destination=<path>"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:326
msgid ""
"If more than one --branches (or --tags) option was given to the 'init' or "
"'clone' command, you must provide the location of the branch (or tag) you "
"wish to create in the SVN repository.  <path> specifies which path to use to "
"create the branch or tag and should match the pattern on the left-hand side "
"of one of the configured branches or tags refspecs.  You can see these "
"refspecs with the commands"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:329
msgid ""
"git config --get-all svn-remote.<name>.branches git config --get-all svn-"
"remote.<name>.tags"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:332
msgid ""
"where <name> is the name of the SVN repository as specified by the -R option "
"to 'init' (or \"svn\" by default)."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:333
#, no-wrap
msgid "--username"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:336
msgid ""
"Specify the SVN username to perform the commit as.  This option overrides "
"the 'username' configuration property."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:337
#, no-wrap
msgid "--commit-url"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:342
msgid ""
"Use the specified URL to connect to the destination Subversion repository.  "
"This is useful in cases where the source SVN repository is read-only.  This "
"option overrides configuration property 'commiturl'."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:344
msgid "git config --get-all svn-remote.<name>.commiturl"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:346
#, no-wrap
msgid "--parents"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:350
msgid ""
"Create parent folders. This parameter is equivalent to the parameter --"
"parents on svn cp commands and is useful for non-standard repository layouts."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:351
#, no-wrap
msgid "'tag'"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:354
msgid ""
"Create a tag in the SVN repository. This is a shorthand for 'branch -t'."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:355
#, no-wrap
msgid "'log'"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:358
msgid ""
"This should make it easy to look up svn log messages when svn users refer to "
"-r/--revision numbers."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:360
msgid "The following features from `svn log' are supported:"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:362
#, no-wrap
msgid "-r <n>[:<n>]"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:363
#, no-wrap
msgid "--revision=<n>[:<n>]"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:366
msgid "is supported, non-numeric args are not: HEAD, NEXT, BASE, PREV, etc ..."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:366
#, no-wrap
msgid "-v"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:367
#, no-wrap
msgid "--verbose"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:370
msgid ""
"it's not completely compatible with the --verbose output in svn log, but "
"reasonably close."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:370
#, no-wrap
msgid "--limit=<n>"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:373
msgid "is NOT the same as --max-count, doesn't count merged/excluded commits"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:373
#, no-wrap
msgid "--incremental"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:375
msgid "supported"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:378
msgid "New features:"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:380
#, no-wrap
msgid "--show-commit"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:382
msgid "shows the Git commit sha1, as well"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:382
#, no-wrap
msgid "--oneline"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:384
msgid "our version of --pretty=oneline"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:389
msgid ""
"SVN itself only stores times in UTC and nothing else. The regular svn client "
"converts the UTC time to the local time (or based on the TZ= environment). "
"This command has the same behaviour."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:391
msgid "Any other arguments are passed directly to 'git log'"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:392
#, no-wrap
msgid "'blame'"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:399
msgid ""
"Show what revision and author last modified each line of a file. The output "
"of this mode is format-compatible with the output of `svn blame' by default. "
"Like the SVN blame command, local uncommitted changes in the working tree "
"are ignored; the version of the file in the HEAD revision is annotated. "
"Unknown arguments are passed directly to 'git blame'."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:400
#, no-wrap
msgid "--git-format"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:405
msgid ""
"Produce output in the same format as 'git blame', but with SVN revision "
"numbers instead of Git commit hashes. In this mode, changes that haven't "
"been committed to SVN (including local working-copy edits) are shown as "
"revision 0."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:406
#, no-wrap
msgid "'find-rev'"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:411
msgid ""
"When given an SVN revision number of the form 'rN', returns the "
"corresponding Git commit hash (this can optionally be followed by a tree-ish "
"to specify which branch should be searched).  When given a tree-ish, returns "
"the corresponding SVN revision number."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:412
#, no-wrap
msgid "-B"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:413
#, no-wrap
msgid "--before"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:417
msgid ""
"Don't require an exact match if given an SVN revision, instead find the "
"commit corresponding to the state of the SVN repository (on the current "
"branch) at the specified revision."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:418
#, no-wrap
msgid "-A"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:419
#, no-wrap
msgid "--after"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:423
msgid ""
"Don't require an exact match if given an SVN revision; if there is not an "
"exact match return the closest match searching forward in the history."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:424
#, no-wrap
msgid "'set-tree'"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:432
msgid ""
"You should consider using 'dcommit' instead of this command.  Commit "
"specified commit or tree objects to SVN.  This relies on your imported fetch "
"data being up to date.  This makes absolutely no attempts to do patching "
"when committing to SVN, it simply overwrites files with those specified in "
"the tree or commit.  All merging is assumed to have taken place "
"independently of 'git svn' functions."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:433
#, no-wrap
msgid "'create-ignore'"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:438
msgid ""
"Recursively finds the svn:ignore property on directories and creates "
"matching .gitignore files. The resulting files are staged to be committed, "
"but are not committed. Use -r/--revision to refer to a specific revision."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:439
#, no-wrap
msgid "'show-ignore'"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:443
msgid ""
"Recursively finds and lists the svn:ignore property on directories.  The "
"output is suitable for appending to the $GIT_DIR/info/exclude file."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:444
#, no-wrap
msgid "'mkdirs'"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:452
msgid ""
"Attempts to recreate empty directories that core Git cannot track based on "
"information in $GIT_DIR/svn/<refname>/unhandled.log files.  Empty "
"directories are automatically recreated when using \"git svn clone\" and "
"\"git svn rebase\", so \"mkdirs\" is intended for use after commands like "
"\"git checkout\" or \"git reset\".  (See the svn-remote.<name>.automkdirs "
"config file option for more information.)"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:453
#, no-wrap
msgid "'commit-diff'"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:462
msgid ""
"Commits the diff of two tree-ish arguments from the command-line.  This "
"command does not rely on being inside a `git svn init`-ed repository.  This "
"command takes three arguments, (a) the original tree to diff against, (b) "
"the new tree result, (c) the URL of the target Subversion repository.  The "
"final argument (URL) may be omitted if you are working from a 'git svn'-"
"aware repository (that has been `init`-ed with 'git svn').  The -r<revision> "
"option is required for this."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:467
msgid ""
"The commit message is supplied either directly with the `-m` or `-F` option, "
"or indirectly from the tag or commit when the second tree-ish denotes such "
"an object, or it is requested by invoking an editor (see `--edit` option "
"below)."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:468
#, no-wrap
msgid "-m <msg>"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:469
#, no-wrap
msgid "--message=<msg>"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:472
msgid ""
"Use the given `msg` as the commit message. This option disables the `--edit` "
"option."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:473
#, no-wrap
msgid "-F <filename>"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:474
#, no-wrap
msgid "--file=<filename>"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:477
msgid ""
"Take the commit message from the given file. This option disables the `--"
"edit` option."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:478
#, no-wrap
msgid "'info'"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:483
msgid ""
"Shows information about a file or directory similar to what `svn info' "
"provides.  Does not currently support a -r/--revision argument.  Use the --"
"url option to output only the value of the 'URL:' field."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:484
#, no-wrap
msgid "'proplist'"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:488
msgid ""
"Lists the properties stored in the Subversion repository about a given file "
"or directory.  Use -r/--revision to refer to a specific Subversion revision."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:489
#, no-wrap
msgid "'propget'"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:492
msgid ""
"Gets the Subversion property given as the first argument, for a file.  A "
"specific revision can be specified with -r/--revision."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:493
#, no-wrap
msgid "'propset'"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:497
msgid ""
"Sets the Subversion property given as the first argument, to the value given "
"as the second argument for the file given as the third argument."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:499
#: ../Documentation-sedout/git-svn.txt:539
#, no-wrap
msgid "Example:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-svn.txt:502
#, no-wrap
msgid "git svn propset svn:keywords \"FreeBSD=%H\" devel/py-tipper/Makefile\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:506
msgid ""
"This will set the property 'svn:keywords' to 'FreeBSD=%H' for the file "
"'devel/py-tipper/Makefile'."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:507
#, no-wrap
msgid "'show-externals'"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:510
msgid ""
"Shows the Subversion externals.  Use -r/--revision to specify a specific "
"revision."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:511
#, no-wrap
msgid "'gc'"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:514
msgid ""
"Compress $GIT_DIR/svn/<refname>/unhandled.log files and remove $GIT_DIR/svn/"
"<refname>/index files."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:515
#, no-wrap
msgid "'reset'"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:525
msgid ""
"Undoes the effects of 'fetch' back to the specified revision.  This allows "
"you to re-'fetch' an SVN revision.  Normally the contents of an SVN revision "
"should never change and 'reset' should not be necessary.  However, if SVN "
"permissions change, or if you alter your --ignore-paths option, a 'fetch' "
"may fail with \"not found in commit\" (file not previously visible) or "
"\"checksum mismatch\" (missed a modification).  If the problem file cannot "
"be ignored forever (with --ignore-paths) the only way to repair the repo is "
"to use 'reset'."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:530
msgid ""
"Only the rev_map and refs/remotes/git-svn are changed (see '$GIT_DIR/svn/"
"\\**/.rev_map.*' in the FILES section below for details).  Follow 'reset' "
"with a 'fetch' and then 'git reset' or 'git rebase' to move local branches "
"onto the new tree."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:531
#, no-wrap
msgid "-r <n>"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:532
#, no-wrap
msgid "--revision=<n>"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:535
msgid ""
"Specify the most recent revision to keep.  All later revisions are discarded."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:535
#, no-wrap
msgid "-p"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:539
msgid ""
"Discard the specified revision as well, keeping the nearest parent instead."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:541
msgid ""
"Assume you have local changes in \"master\", but you need to refetch \"r2\"."
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-svn.txt:546
#, no-wrap
msgid ""
"    r1---r2---r3 remotes/git-svn\n"
"                \\\n"
"                 A---B master\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:550
msgid ""
"Fix the ignore-paths or SVN permissions problem that caused \"r2\" to be "
"incomplete in the first place.  Then:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:554
#, no-wrap
msgid ""
"git svn reset -r2 -p\n"
"git svn fetch\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-svn.txt:559
#, no-wrap
msgid ""
"    r1---r2'--r3' remotes/git-svn\n"
"      \\\n"
"       r2---r3---A---B master\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:564
msgid ""
"Then fixup \"master\" with 'git rebase'.  Do NOT use 'git merge' or your "
"history will not be compatible with a future 'dcommit'!"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:567
#, no-wrap
msgid "git rebase --onto remotes/git-svn A^ master\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-svn.txt:572
#, no-wrap
msgid ""
"    r1---r2'--r3' remotes/git-svn\n"
"                \\\n"
"                 A'--B' master\n"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-svn.txt:575
#, no-wrap
msgid "OPTIONS"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:577
#, no-wrap
msgid "`--shared[=(false|true|umask|group|all|world|everybody)]`"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:578
#, no-wrap
msgid "`--template=<template_directory>`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:581
msgid ""
"Only used with the 'init' command.  These are passed directly to 'git init'."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:582
#, no-wrap
msgid "`-r <arg>`"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:583
#, no-wrap
msgid "`--revision <arg>`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:585
msgid "Used with the 'fetch' command."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:589
msgid ""
"This allows revision ranges for partial/cauterized history to be supported.  "
"$NUMBER, $NUMBER1:$NUMBER2 (numeric ranges), $NUMBER:HEAD, and BASE:$NUMBER "
"are all supported."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:593
msgid ""
"This can allow you to make partial mirrors when running fetch; but is "
"generally not recommended because history will be skipped and lost."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:594
#, no-wrap
msgid "-"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:595
#, no-wrap
msgid "`--stdin`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:597
msgid "Only used with the 'set-tree' command."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:601
msgid ""
"Read a list of commits from stdin and commit them in reverse order.  Only "
"the leading sha1 is read from each line, so 'git rev-list --pretty=oneline' "
"output can be used."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:602
#, no-wrap
msgid "`--rmdir`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:604
#: ../Documentation-sedout/git-svn.txt:617
#: ../Documentation-sedout/git-svn.txt:628
msgid "Only used with the 'dcommit', 'set-tree' and 'commit-diff' commands."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:610
msgid ""
"Remove directories from the SVN tree if there are no files left behind.  SVN "
"can version empty directories, and they are not removed by default if there "
"are no files left in them.  Git cannot version empty directories.  Enabling "
"this flag will make the commit to SVN act like Git."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:613
#, no-wrap
msgid "config key: svn.rmdir\n"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:614
#, no-wrap
msgid "`-e`"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:615
#, no-wrap
msgid "`--edit`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:621
msgid ""
"Edit the commit message before committing to SVN.  This is off by default "
"for objects that are commits, and forced on when committing tree objects."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:624
#, no-wrap
msgid "config key: svn.edit\n"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:625
#, no-wrap
msgid "`-l<num>`"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:626
#, no-wrap
msgid "`--find-copies-harder`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:631
msgid ""
"They are both passed directly to 'git diff-tree'; see linkgit:git-diff-"
"tree[1] for more information."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:635
#, no-wrap
msgid ""
"config key: svn.l\n"
"config key: svn.findcopiesharder\n"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:636
#, no-wrap
msgid "`-A<filename>`"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:637
#, no-wrap
msgid "`--authors-file=<filename>`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:640
msgid ""
"Syntax is compatible with the file used by 'git cvsimport' but an empty "
"email address can be supplied with '<>':"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-svn.txt:643
#, no-wrap
msgid "\tloginname = Joe User <user@example.com>\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:650
msgid ""
"If this option is specified and 'git svn' encounters an SVN committer name "
"that does not exist in the authors-file, 'git svn' will abort operation. The "
"user will then have to add the appropriate entry.  Re-running the previous "
"'git svn' command after the authors-file is modified should continue "
"operation."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:653
#, no-wrap
msgid "config key: svn.authorsfile\n"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:654
#, no-wrap
msgid "`--authors-prog=<filename>`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:661
msgid ""
"If this option is specified, for each SVN committer name that does not exist "
"in the authors file, the given file is executed with the committer name as "
"the first argument.  The program is expected to return a single line of the "
"form \"Name <email>\" or \"Name <>\", which will be treated as if included "
"in the authors file."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:666
msgid ""
"Due to historical reasons a relative 'filename' is first searched relative "
"to the current directory for 'init' and 'clone' and relative to the root of "
"the working tree for 'fetch'. If 'filename' is not found, it is searched "
"like any other command in '$PATH'."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:669
#, no-wrap
msgid "config key: svn.authorsProg\n"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:670
#, no-wrap
msgid "`-q`"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:671
#, no-wrap
msgid "`--quiet`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:674
msgid ""
"Make 'git svn' less verbose. Specify a second time to make it even less "
"verbose."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:675
#, no-wrap
msgid "`-m`"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:676
#, no-wrap
msgid "`--merge`"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:677
#, no-wrap
msgid "`-s<strategy>`"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:678
#, no-wrap
msgid "`--strategy=<strategy>`"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:679
#, no-wrap
msgid "`-p`"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:680
#, no-wrap
msgid "`--rebase-merges`"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:681
#, no-wrap
msgid "`--preserve-merges (DEPRECATED)`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:683
msgid "These are only used with the 'dcommit' and 'rebase' commands."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:686
msgid ""
"Passed directly to 'git rebase' when using 'dcommit' if a 'git reset' cannot "
"be used (see 'dcommit')."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:687
#, no-wrap
msgid "`-n`"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:688
#, no-wrap
msgid "`--dry-run`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:691
msgid ""
"This can be used with the 'dcommit', 'rebase', 'branch' and 'tag' commands."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:694
msgid ""
"For 'dcommit', print out the series of Git arguments that would show which "
"diffs would be committed to SVN."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:698
msgid ""
"For 'rebase', display the local branch associated with the upstream svn "
"repository associated with the current branch and the URL of svn repository "
"that will be fetched from."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:701
msgid ""
"For 'branch' and 'tag', display the urls that will be used for copying when "
"creating the branch or tag."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:702
#, no-wrap
msgid "`--use-log-author`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:706
msgid ""
"When retrieving svn commits into Git (as part of 'fetch', 'rebase', or "
"'dcommit' operations), look for the first `From:` line or `Signed-off-by` "
"trailer in the log message and use that as the author string."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:709
#, no-wrap
msgid "config key: svn.useLogAuthor\n"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:710
#, no-wrap
msgid "`--add-author-from`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:716
msgid ""
"When committing to svn from Git (as part of 'set-tree' or 'dcommit' "
"operations), if the existing log message doesn't already have a `From:` or "
"`Signed-off-by` trailer, append a `From:` line based on the Git commit's "
"author string.  If you use this, then `--use-log-author` will retrieve a "
"valid author string for all commits."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:719
#, no-wrap
msgid "config key: svn.addAuthorFrom\n"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-svn.txt:721
#, no-wrap
msgid "ADVANCED OPTIONS"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:723
#, no-wrap
msgid "`-i<GIT_SVN_ID>`"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:724
#, no-wrap
msgid "`--id <GIT_SVN_ID>`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:729
msgid ""
"This sets GIT_SVN_ID (instead of using the environment).  This allows the "
"user to override the default refname to fetch from when tracking a single "
"URL.  The 'log' and 'dcommit' commands no longer require this switch as an "
"argument."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:730
#, no-wrap
msgid "`-R<remote name>`"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:731
#, no-wrap
msgid "`--svn-remote <remote name>`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:735
msgid ""
"Specify the [svn-remote \"<remote name>\"] section to use, this allows SVN "
"multiple repositories to be tracked.  Default: \"svn\""
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:736
#, no-wrap
msgid "`--follow-parent`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:751
msgid ""
"This option is only relevant if we are tracking branches (using one of the "
"repository layout options --trunk, --tags, --branches, --stdlayout). For "
"each tracked branch, try to find out where its revision was copied from, and "
"set a suitable parent in the first Git commit for the branch.  This is "
"especially helpful when we're tracking a directory that has been moved "
"around within the repository.  If this feature is disabled, the branches "
"created by 'git svn' will all be linear and not share any history, meaning "
"that there will be no information on where branches were branched off or "
"merged.  However, following long/convoluted histories can take a long time, "
"so disabling this feature may speed up the cloning process. This feature is "
"enabled by default, use --no-follow-parent to disable it."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:754
#, no-wrap
msgid "config key: svn.followparent\n"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-svn.txt:756
#, no-wrap
msgid "CONFIG FILE-ONLY OPTIONS"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:758
#, no-wrap
msgid "svn.noMetadata"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:759
#, no-wrap
msgid "svn-remote.<name>.noMetadata"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:761
msgid "This gets rid of the 'git-svn-id:' lines at the end of every commit."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:766
msgid ""
"This option can only be used for one-shot imports as 'git svn' will not be "
"able to fetch again without metadata. Additionally, if you lose your "
"'$GIT_DIR/svn/\\**/.rev_map.*' files, 'git svn' will not be able to rebuild "
"them."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:770
msgid ""
"The 'git svn log' command will not work on repositories using this, either.  "
"Using this conflicts with the 'useSvmProps' option for (hopefully) obvious "
"reasons."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:778
msgid ""
"This option is NOT recommended as it makes it difficult to track down old "
"references to SVN revision numbers in existing documentation, bug reports, "
"and archives.  If you plan to eventually migrate from SVN to Git and are "
"certain about dropping SVN history, consider https://github.com/newren/git-"
"filter-repo[git-filter-repo] instead.  filter-repo also allows reformatting "
"of metadata for ease-of-reading and rewriting authorship info for non-\"svn."
"authorsFile\" users."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:779
#, no-wrap
msgid "svn.useSvmProps"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:780
#, no-wrap
msgid "svn-remote.<name>.useSvmProps"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:783
msgid ""
"This allows 'git svn' to re-map repository URLs and UUIDs from mirrors "
"created using SVN::Mirror (or svk) for metadata."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:791
msgid ""
"If an SVN revision has a property, \"svm:headrev\", it is likely that the "
"revision was created by SVN::Mirror (also used by SVK).  The property "
"contains a repository UUID and a revision.  We want to make it look like we "
"are mirroring the original URL, so introduce a helper function that returns "
"the original identity URL and UUID, and use it when generating metadata in "
"commit messages."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:792
#, no-wrap
msgid "svn.useSvnsyncProps"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:793
#, no-wrap
msgid "svn-remote.<name>.useSvnsyncprops"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:797
msgid ""
"Similar to the useSvmProps option; this is for users of the svnsync(1) "
"command distributed with SVN 1.4.x and later."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:798
#, no-wrap
msgid "svn-remote.<name>.rewriteRoot"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:804
msgid ""
"This allows users to create repositories from alternate URLs.  For example, "
"an administrator could run 'git svn' on the server locally (accessing via "
"file://) but wish to distribute the repository with a public http:// or "
"svn:// URL in the metadata so users of it will see the public URL."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:805
#, no-wrap
msgid "svn-remote.<name>.rewriteUUID"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:810
msgid ""
"Similar to the useSvmProps option; this is for users who need to remap the "
"UUID manually. This may be useful in situations where the original UUID is "
"not available via either useSvmProps or useSvnsyncProps."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:811
#, no-wrap
msgid "svn-remote.<name>.pushurl"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:820
msgid ""
"Similar to Git's `remote.<name>.pushurl`, this key is designed to be used in "
"cases where 'url' points to an SVN repository via a read-only transport, to "
"provide an alternate read/write transport. It is assumed that both keys "
"point to the same repository. Unlike 'commiturl', 'pushurl' is a base path. "
"If either 'commiturl' or 'pushurl' could be used, 'commiturl' takes "
"precedence."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:821
#, no-wrap
msgid "svn.brokenSymlinkWorkaround"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:829
msgid ""
"This disables potentially expensive checks to workaround broken symlinks "
"checked into SVN by broken clients.  Set this option to \"false\" if you "
"track a SVN repository with many empty blobs that are not symlinks.  This "
"option may be changed while 'git svn' is running and take effect on the next "
"revision fetched.  If unset, 'git svn' assumes this option to be \"true\"."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:830
#, no-wrap
msgid "svn.pathnameencoding"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:835
msgid ""
"This instructs git svn to recode pathnames to a given encoding.  It can be "
"used by windows users and by those who work in non-utf8 locales to avoid "
"corrupted file names with non-ASCII characters.  Valid encodings are the "
"ones supported by Perl's Encode module."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:836
#, no-wrap
msgid "svn-remote.<name>.automkdirs"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:843
msgid ""
"Normally, the \"git svn clone\" and \"git svn rebase\" commands attempt to "
"recreate empty directories that are in the Subversion repository.  If this "
"option is set to \"false\", then empty directories will only be created if "
"the \"git svn mkdirs\" command is run explicitly.  If unset, 'git svn' "
"assumes this option to be \"true\"."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:848
msgid ""
"Since the noMetadata, rewriteRoot, rewriteUUID, useSvnsyncProps and "
"useSvmProps options all affect the metadata generated and used by 'git svn'; "
"they *must* be set in the configuration file before any history is imported "
"and these settings should never be changed once they are set."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:852
msgid ""
"Additionally, only one of these options can be used per svn-remote section "
"because they affect the 'git-svn-id:' metadata line, except for rewriteRoot "
"and rewriteUUID which can be used together."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-svn.txt:855
#, no-wrap
msgid "BASIC EXAMPLES"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:859
msgid ""
"Tracking and contributing to the trunk of a Subversion-managed project "
"(ignoring tags and branches):"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-svn.txt:877
#, no-wrap
msgid ""
"# Clone a repo (like git clone):\n"
"\tgit svn clone http://svn.example.com/project/trunk\n"
"# Enter the newly cloned directory:\n"
"\tcd trunk\n"
"# You should be on master branch, double-check with 'git branch'\n"
"\tgit branch\n"
"# Do some work and commit locally to Git:\n"
"\tgit commit ...\n"
"# Something is committed to SVN, rebase your local changes against the\n"
"# latest changes in SVN:\n"
"\tgit svn rebase\n"
"# Now commit your changes (that were committed previously using Git) to SVN,\n"
"# as well as automatically updating your working HEAD:\n"
"\tgit svn dcommit\n"
"# Append svn:ignore settings to the default Git exclude file:\n"
"\tgit svn show-ignore >> .git/info/exclude\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:881
msgid ""
"Tracking and contributing to an entire Subversion-managed project (complete "
"with a trunk, tags and branches):"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-svn.txt:896
#, no-wrap
msgid ""
"# Clone a repo with standard SVN directory layout (like git clone):\n"
"\tgit svn clone http://svn.example.com/project --stdlayout --prefix svn/\n"
"# Or, if the repo uses a non-standard directory layout:\n"
"\tgit svn clone http://svn.example.com/project -T tr -b branch -t tag --prefix svn/\n"
"# View all branches and tags you have cloned:\n"
"\tgit branch -r\n"
"# Create a new branch in SVN\n"
"\tgit svn branch waldo\n"
"# Reset your master to trunk (or any other branch, replacing 'trunk'\n"
"# with the appropriate name):\n"
"\tgit reset --hard svn/trunk\n"
"# You may only dcommit to one branch/tag/trunk at a time.  The usage\n"
"# of dcommit/rebase/show-ignore should be the same as above.\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:904
msgid ""
"The initial 'git svn clone' can be quite time-consuming (especially for "
"large Subversion repositories). If multiple people (or one person with "
"multiple machines) want to use 'git svn' to interact with the same "
"Subversion repository, you can do the initial 'git svn clone' to a "
"repository on a server and have each person clone that repository with 'git "
"clone':"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-svn.txt:925
#, no-wrap
msgid ""
"# Do the initial import on a server\n"
"\tssh server \"cd /pub && git svn clone http://svn.example.com/project [options...]\"\n"
"# Clone locally - make sure the refs/remotes/ space matches the server\n"
"\tmkdir project\n"
"\tcd project\n"
"\tgit init\n"
"\tgit remote add origin server:/pub/project\n"
"\tgit config --replace-all remote.origin.fetch '+refs/remotes/*:refs/remotes/*'\n"
"\tgit fetch\n"
"# Prevent fetch/pull from remote Git server in the future,\n"
"# we only want to use git svn for future updates\n"
"\tgit config --remove-section remote.origin\n"
"# Create a local branch from one of the branches just fetched\n"
"\tgit checkout -b master FETCH_HEAD\n"
"# Initialize 'git svn' locally (be sure to use the same URL and\n"
"# --stdlayout/-T/-b/-t/--prefix options as were used on server)\n"
"\tgit svn init http://svn.example.com/project [options...]\n"
"# Pull the latest changes from Subversion\n"
"\tgit svn rebase\n"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-svn.txt:928
#, no-wrap
msgid "REBASE VS. PULL/MERGE"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:934
msgid ""
"Prefer to use 'git svn rebase' or 'git rebase', rather than 'git pull' or "
"'git merge' to synchronize unintegrated commits with a 'git svn' branch. "
"Doing so will keep the history of unintegrated commits linear with respect "
"to the upstream SVN repository and allow the use of the preferred 'git svn "
"dcommit' subcommand to push unintegrated commits back into SVN."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:942
msgid ""
"Originally, 'git svn' recommended that developers pulled or merged from the "
"'git svn' branch.  This was because the author favored `git svn set-tree B` "
"to commit a single head rather than the `git svn set-tree A..B` notation to "
"commit multiple commits. Use of 'git pull' or 'git merge' with `git svn set-"
"tree A..B` will cause non-linear history to be flattened when committing "
"into SVN and this can lead to merge commits unexpectedly reversing previous "
"commits in SVN."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-svn.txt:944
#, no-wrap
msgid "MERGE TRACKING"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:951
msgid ""
"While 'git svn' can track copy history (including branches and tags) for "
"repositories adopting a standard layout, it cannot yet represent merge "
"history that happened inside git back upstream to SVN users.  Therefore it "
"is advised that users keep history as linear as possible inside Git to ease "
"compatibility with SVN (see the CAVEATS section below)."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-svn.txt:953
#, no-wrap
msgid "HANDLING OF SVN BRANCHES"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:961
msgid ""
"If 'git svn' is configured to fetch branches (and --follow-branches is in "
"effect), it sometimes creates multiple Git branches for one SVN branch, "
"where the additional branches have names of the form 'branchname@nnn' (with "
"nnn an SVN revision number).  These additional branches are created if 'git "
"svn' cannot find a parent commit for the first commit in an SVN branch, to "
"connect the branch to the history of the other branches."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:977
msgid ""
"Normally, the first commit in an SVN branch consists of a copy operation. "
"'git svn' will read this commit to get the SVN revision the branch was "
"created from. It will then try to find the Git commit that corresponds to "
"this SVN revision, and use that as the parent of the branch. However, it is "
"possible that there is no suitable Git commit to serve as parent.  This will "
"happen, among other reasons, if the SVN branch is a copy of a revision that "
"was not fetched by 'git svn' (e.g. because it is an old revision that was "
"skipped with `--revision`), or if in SVN a directory was copied that is not "
"tracked by 'git svn' (such as a branch that is not tracked at all, or a "
"subdirectory of a tracked branch). In these cases, 'git svn' will still "
"create a Git branch, but instead of using an existing Git commit as the "
"parent of the branch, it will read the SVN history of the directory the "
"branch was copied from and create appropriate Git commits.  This is "
"indicated by the message \"Initializing parent: <branchname>\"."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:984
msgid ""
"Additionally, it will create a special branch named '<branchname>@<SVN-"
"Revision>', where <SVN-Revision> is the SVN revision number the branch was "
"copied from.  This branch will point to the newly created parent commit of "
"the branch.  If in SVN the branch was deleted and later recreated from a "
"different version, there will be multiple such branches with an '@'."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:987
msgid ""
"Note that this may mean that multiple Git commits are created for a single "
"SVN revision."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:997
msgid ""
"An example: in an SVN repository with a standard trunk/tags/branches layout, "
"a directory trunk/sub is created in r.100.  In r.200, trunk/sub is branched "
"by copying it to branches/. 'git svn clone -s' will then create a branch "
"'sub'. It will also create new Git commits for r.100 through r.199 and use "
"these as the history of branch 'sub'. Thus there will be two Git commits for "
"each revision from r.100 to r.199 (one containing trunk/, one containing "
"trunk/sub/). Finally, it will create a branch 'sub@200' pointing to the new "
"parent commit of branch 'sub' (i.e. the commit for r.200 and trunk/sub/)."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-svn.txt:999
#, no-wrap
msgid "CAVEATS"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:1007
msgid ""
"For the sake of simplicity and interoperating with Subversion, it is "
"recommended that all 'git svn' users clone, fetch and dcommit directly from "
"the SVN server, and avoid all 'git clone'/'pull'/'merge'/'push' operations "
"between Git repositories and branches.  The recommended method of exchanging "
"code between Git branches and users is 'git format-patch' and 'git am', or "
"just 'dcommit'ing to the SVN repository."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:1013
msgid ""
"Running 'git merge' or 'git pull' is NOT recommended on a branch you plan to "
"'dcommit' from because Subversion users cannot see any merges you've made.  "
"Furthermore, if you merge or pull from a Git branch that is a mirror of an "
"SVN branch, 'dcommit' may commit to the wrong branch."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:1016
msgid ""
"If you do merge, note the following rule: 'git svn dcommit' will attempt to "
"commit on top of the SVN commit named in"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-svn.txt:1018
#, no-wrap
msgid "git log --grep=^git-svn-id: --first-parent -1\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:1023
msgid ""
"You 'must' therefore ensure that the most recent commit of the branch you "
"want to dcommit to is the 'first' parent of the merge.  Chaos will ensue "
"otherwise, especially if the first parent is an older commit on the same SVN "
"branch."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:1028
msgid ""
"'git clone' does not clone branches under the refs/remotes/ hierarchy or any "
"'git svn' metadata, or config.  So repositories created and managed with "
"using 'git svn' should use 'rsync' for cloning, if cloning is to be done at "
"all."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:1033
msgid ""
"Since 'dcommit' uses rebase internally, any Git branches you 'git push' to "
"before 'dcommit' on will require forcing an overwrite of the existing ref on "
"the remote repository.  This is generally considered bad practice, see the "
"linkgit:git-push[1] documentation for details."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:1038
msgid ""
"Do not use the --amend option of linkgit:git-commit[1] on a change you've "
"already dcommitted.  It is considered bad practice to --amend commits you've "
"already pushed to a remote repository for other users, and dcommit with SVN "
"is analogous to that."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:1053
msgid ""
"When cloning an SVN repository, if none of the options for describing the "
"repository layout is used (--trunk, --tags, --branches, --stdlayout), 'git "
"svn clone' will create a Git repository with completely linear history, "
"where branches and tags appear as separate directories in the working copy.  "
"While this is the easiest way to get a copy of a complete repository, for "
"projects with many branches it will lead to a working copy many times larger "
"than just the trunk. Thus for projects using the standard directory "
"structure (trunk/branches/tags), it is recommended to clone with option `--"
"stdlayout`. If the project uses a non-standard structure, and/or if branches "
"and tags are not required, it is easiest to only clone one directory "
"(typically trunk), without giving any repository layout options.  If the "
"full history with branches and tags is required, the options `--trunk` / `--"
"branches` / `--tags` must be used."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:1060
msgid ""
"When using multiple --branches or --tags, 'git svn' does not automatically "
"handle name collisions (for example, if two branches from different paths "
"have the same name, or if a branch and a tag have the same name).  In these "
"cases, use 'init' to set up your Git repository then, before your first "
"'fetch', edit the $GIT_DIR/config file so that the branches and tags are "
"associated with different name spaces.  For example:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:1063
#, no-wrap
msgid ""
"\tbranches = stable/*:refs/remotes/svn/stable/*\n"
"\tbranches = debug/*:refs/remotes/svn/debug/*\n"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-svn.txt:1065
#, no-wrap
msgid "CONFIGURATION"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:1074
msgid ""
"'git svn' stores [svn-remote] configuration information in the repository "
"$GIT_DIR/config file.  It is similar the core Git [remote] sections except "
"'fetch' keys do not accept glob arguments; but they are instead handled by "
"the 'branches' and 'tags' keys.  Since some SVN repositories are oddly "
"configured with multiple projects glob expansions such those listed below "
"are allowed:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-svn.txt:1083
#, no-wrap
msgid ""
"[svn-remote \"project-a\"]\n"
"\turl = http://server.org/svn\n"
"\tfetch = trunk/project-a:refs/remotes/project-a/trunk\n"
"\tbranches = branches/*/project-a:refs/remotes/project-a/branches/*\n"
"\tbranches = branches/release_*:refs/remotes/project-a/branches/release_*\n"
"\tbranches = branches/re*se:refs/remotes/project-a/branches/*\n"
"\ttags = tags/*/project-a:refs/remotes/project-a/tags/*\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:1091
#, no-wrap
msgid ""
"Keep in mind that the `*` (asterisk) wildcard of the local ref\n"
"(right of the `:`) *must* be the farthest right path component;\n"
"however the remote wildcard may be anywhere as long as it's an\n"
"independent path component (surrounded by `/` or EOL).   This\n"
"type of configuration is not automatically created by 'init' and\n"
"should be manually entered with a text-editor or using 'git config'.\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:1093
msgid "Also note that only one asterisk is allowed per word. For example:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:1095
#, no-wrap
msgid "\tbranches = branches/re*se:refs/remotes/project-a/branches/*\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:1097
msgid "will match branches 'release', 'rese', 're123se', however"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:1099
#, no-wrap
msgid "\tbranches = branches/re*s*e:refs/remotes/project-a/branches/*\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:1101
msgid "will produce an error."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:1104
msgid ""
"It is also possible to fetch a subset of branches or tags by using a comma-"
"separated list of names within braces. For example:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-svn.txt:1111
#, no-wrap
msgid ""
"[svn-remote \"huge-project\"]\n"
"\turl = http://server.org/svn\n"
"\tfetch = trunk/src:refs/remotes/trunk\n"
"\tbranches = branches/{red,green}/src:refs/remotes/project-a/branches/*\n"
"\ttags = tags/{1.0,2.0}/src:refs/remotes/project-a/tags/*\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:1114
msgid "Multiple fetch, branches, and tags keys are supported:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-svn.txt:1123
#, no-wrap
msgid ""
"[svn-remote \"messy-repo\"]\n"
"\turl = http://server.org/svn\n"
"\tfetch = trunk/project-a:refs/remotes/project-a/trunk\n"
"\tfetch = branches/demos/june-project-a-demo:refs/remotes/project-a/demos/june-demo\n"
"\tbranches = branches/server/*:refs/remotes/project-a/branches/*\n"
"\tbranches = branches/demos/2011/*:refs/remotes/project-a/2011-demos/*\n"
"\ttags = tags/server/*:refs/remotes/project-a/tags/*\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:1127
msgid ""
"Creating a branch in such a configuration requires disambiguating which "
"location to use using the -d or --destination flag:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-svn.txt:1130
#, no-wrap
msgid "$ git svn branch -d branches/server release-2-3-0\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:1136
msgid ""
"Note that git-svn keeps track of the highest revision in which a branch or "
"tag has appeared. If the subset of branches or tags is changed after "
"fetching, then $GIT_DIR/svn/.metadata must be manually edited to remove (or "
"reset) branches-maxRev and/or tags-maxRev as appropriate."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-svn.txt:1138
#, no-wrap
msgid "FILES"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-svn.txt:1139
#, no-wrap
msgid "$GIT_DIR/svn/\\**/.rev_map.*"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:1145
msgid ""
"Mapping between Subversion revision numbers and Git commit names.  In a "
"repository where the noMetadata option is not set, this can be rebuilt from "
"the git-svn-id: lines that are at the end of every commit (see the 'svn."
"noMetadata' section above for details)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:1149
msgid ""
"'git svn fetch' and 'git svn rebase' automatically update the rev_map if it "
"is missing or not up to date.  'git svn reset' automatically rewinds it."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-svn.txt:1151
#, no-wrap
msgid "BUGS"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:1155
msgid ""
"We ignore all SVN properties except svn:executable.  Any unhandled "
"properties are logged to $GIT_DIR/svn/<refname>/unhandled.log"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:1162
msgid ""
"Renamed and copied directories are not detected by Git and hence not tracked "
"when committing to SVN.  I do not plan on adding support for this as it's "
"quite difficult and time-consuming to get working for all the possible "
"corner cases (Git doesn't do it, either).  Committing renamed and copied "
"files is fully supported if they're similar enough for Git to detect them."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:1168
msgid ""
"In SVN, it is possible (though discouraged) to commit changes to a tag "
"(because a tag is just a directory copy, thus technically the same as a "
"branch). When cloning an SVN repository, 'git svn' cannot know if such a "
"commit to a tag will happen in the future. Thus it acts conservatively and "
"imports all SVN tags as branches, prefixing the tag name with 'tags/'."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-svn.txt:1170
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:1172
msgid "linkgit:git-rebase[1]"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-svn.txt:1174
#, no-wrap
msgid "GIT"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-svn.txt:1175
msgid "Part of the linkgit:git[1] suite"
msgstr ""
