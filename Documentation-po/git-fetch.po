# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-11-04 04:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/git-fetch.txt:2
#, no-wrap
msgid "git-fetch(1)"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-fetch.txt:5
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:7
msgid "git-fetch - Download objects and refs from another repository"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-fetch.txt:10
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:16
#, no-wrap
msgid ""
"'git fetch' [<options>] [<repository> [<refspec>...]]\n"
"'git fetch' [<options>] <group>\n"
"'git fetch' --multiple [<options>] [(<repository> | <group>)...]\n"
"'git fetch' --all [<options>]\n"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-fetch.txt:19
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:24
msgid ""
"Fetch branches and/or tags (collectively, \"refs\") from one or more other "
"repositories, along with the objects necessary to complete their histories.  "
"Remote-tracking branches are updated (see the description of <refspec> below "
"for ways to control this behavior)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:32
msgid ""
"By default, any tag that points into the histories being fetched is also "
"fetched; the effect is to fetch tags that point at branches that you are "
"interested in.  This default behavior can be changed by using the --tags or "
"--no-tags options or by configuring remote.<name>.tagOpt.  By using a "
"refspec that fetches tags explicitly, you can fetch tags that do not point "
"into branches you are interested in as well."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:37
msgid ""
"'git fetch' can fetch from either a single named repository or URL, or from "
"several repositories at once if <group> is given and there is a remotes."
"<group> entry in the configuration file.  (See linkgit:git-config[1])."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:40
msgid ""
"When no remote is specified, by default the `origin` remote will be used, "
"unless there's an upstream branch configured for the current branch."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:44
msgid ""
"The names of refs that are fetched, together with the object names they "
"point at, are written to `.git/FETCH_HEAD`.  This information may be used by "
"scripts or other git commands, such as linkgit:git-pull[1]."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-fetch.txt:46
#, no-wrap
msgid "OPTIONS"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-fetch.txt:51
#, no-wrap
msgid "`--stdin`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:54
msgid ""
"Read refspecs, one per line, from stdin in addition to those provided as "
"arguments. The \"tag <name>\" format is not supported."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-fetch.txt:59
#, no-wrap
msgid "CONFIGURED REMOTE-TRACKING BRANCHES[[CRTB]]"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:65
msgid ""
"You often interact with the same remote repository by regularly and "
"repeatedly fetching from it.  In order to keep track of the progress of such "
"a remote repository, `git fetch` allows you to configure `remote."
"<repository>.fetch` configuration variables."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:67
msgid "Typically such a variable may look like this:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-fetch.txt:71
#, no-wrap
msgid ""
"[remote \"origin\"]\n"
"\tfetch = +refs/heads/*:refs/remotes/origin/*\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:74
msgid "This configuration is used in two ways:"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:84
msgid ""
"When `git fetch` is run without specifying what branches and/or tags to "
"fetch on the command line, e.g. `git fetch origin` or `git fetch`, `remote."
"<repository>.fetch` values are used as the refspecs--they specify which refs "
"to fetch and which local refs to update.  The example above will fetch all "
"branches that exist in the `origin` (i.e. any ref that matches the left-hand "
"side of the value, `refs/heads/*`) and update the corresponding remote-"
"tracking branches in the `refs/remotes/origin/*` hierarchy."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:101
msgid ""
"When `git fetch` is run with explicit branches and/or tags to fetch on the "
"command line, e.g. `git fetch origin master`, the <refspec>s given on the "
"command line determine what are to be fetched (e.g. `master` in the example, "
"which is a short-hand for `master:`, which in turn means \"fetch the "
"'master' branch but I do not explicitly say what remote-tracking branch to "
"update with it from the command line\"), and the example command will fetch "
"_only_ the 'master' branch.  The `remote.<repository>.fetch` values "
"determine which remote-tracking branch, if any, is updated.  When used in "
"this way, the `remote.<repository>.fetch` values do not have any effect in "
"deciding _what_ gets fetched (i.e. the values are not used as refspecs when "
"the command-line lists refspecs); they are only used to decide _where_ the "
"refs that are fetched are stored by acting as a mapping."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:105
msgid ""
"The latter use of the `remote.<repository>.fetch` values can be overridden "
"by giving the `--refmap=<refspec>` parameter(s) on the command line."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-fetch.txt:107
#, no-wrap
msgid "PRUNING"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:112
msgid ""
"Git has a default disposition of keeping data unless it's explicitly thrown "
"away; this extends to holding onto local references to branches on remotes "
"that have themselves deleted those branches."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:118
msgid ""
"If left to accumulate, these stale references might make performance worse "
"on big and busy repos that have a lot of branch churn, and e.g. make the "
"output of commands like `git branch -a --contains <commit>` needlessly "
"verbose, as well as impacting anything else that'll work with the complete "
"set of known references."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:121
msgid ""
"These remote-tracking references can be deleted as a one-off with either of:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-fetch.txt:125
#, no-wrap
msgid ""
"# While fetching\n"
"$ git fetch --prune <name>\n"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-fetch.txt:128
#, no-wrap
msgid ""
"# Only prune, don't fetch\n"
"$ git remote prune <name>\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:134
msgid ""
"To prune references as part of your normal workflow without needing to "
"remember to run that, set `fetch.prune` globally, or `remote.<name>.prune` "
"per-remote in the config. See linkgit:git-config[1]."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:139
msgid ""
"Here's where things get tricky and more specific. The pruning feature "
"doesn't actually care about branches, instead it'll prune local <--> remote-"
"references as a function of the refspec of the remote (see `<refspec>` and "
"<<CRTB,CONFIGURED REMOTE-TRACKING BRANCHES>> above)."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:145
msgid ""
"Therefore if the refspec for the remote includes e.g. `refs/tags/*:refs/tags/"
"*`, or you manually run e.g. `git fetch --prune <name> \"refs/tags/*:refs/"
"tags/*\"` it won't be stale remote tracking branches that are deleted, but "
"any local tag that doesn't exist on the remote."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:150
msgid ""
"This might not be what you expect, i.e. you want to prune remote `<name>`, "
"but also explicitly fetch tags from it, so when you fetch from it you delete "
"all your local tags, most of which may not have come from the `<name>` "
"remote in the first place."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:154
msgid ""
"So be careful when using this with a refspec like `refs/tags/*:refs/tags/*`, "
"or any other refspec which might map references from multiple remotes to the "
"same local namespace."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:161
msgid ""
"Since keeping up-to-date with both branches and tags on the remote is a "
"common use-case the `--prune-tags` option can be supplied along with `--"
"prune` to prune local tags that don't exist on the remote, and force-update "
"those tags that differ. Tag pruning can also be enabled with `fetch."
"pruneTags` or `remote.<name>.pruneTags` in the config. See linkgit:git-"
"config[1]."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:165
msgid ""
"The `--prune-tags` option is equivalent to having `refs/tags/*:refs/tags/*` "
"declared in the refspecs of the remote. This can lead to some seemingly "
"strange interactions:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-fetch.txt:170
#, no-wrap
msgid ""
"# These both fetch tags\n"
"$ git fetch --no-tags origin 'refs/tags/*:refs/tags/*'\n"
"$ git fetch --no-tags --prune-tags origin\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:176
msgid ""
"The reason it doesn't error out when provided without `--prune` or its "
"config versions is for flexibility of the configured versions, and to "
"maintain a 1=1 mapping between what the command line flags do, and what the "
"configuration versions do."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:181
msgid ""
"It's reasonable to e.g. configure `fetch.pruneTags=true` in `~/.gitconfig` "
"to have tags pruned whenever `git fetch --prune` is run, without making "
"every invocation of `git fetch` without `--prune` an error."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:185
msgid ""
"Pruning tags with `--prune-tags` also works when fetching a URL instead of a "
"named remote. These will all prune tags not found on origin:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-fetch.txt:191
#, no-wrap
msgid ""
"$ git fetch origin --prune --prune-tags\n"
"$ git fetch origin --prune 'refs/tags/*:refs/tags/*'\n"
"$ git fetch <url of origin> --prune --prune-tags\n"
"$ git fetch <url of origin> --prune 'refs/tags/*:refs/tags/*'\n"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-fetch.txt:194
#, no-wrap
msgid "OUTPUT"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:199
msgid ""
"The output of \"git fetch\" depends on the transport method used; this "
"section describes the output when fetching over the Git protocol (either "
"locally or via ssh) and Smart HTTP protocol."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:202
msgid ""
"The status of the fetch is output in tabular form, with each line "
"representing the status of a single ref. Each line is of the form:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-fetch.txt:205
#, no-wrap
msgid " <flag> <summary> <from> -> <to> [<reason>]\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:209
msgid ""
"The status of up-to-date refs is shown only if the --verbose option is used."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:214
msgid ""
"In compact output mode, specified with configuration variable fetch.output, "
"if either entire `<from>` or `<to>` is found in the other string, it will be "
"substituted with `*` in the other string. For example, `master -> origin/"
"master` becomes `master -> origin/*`."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-fetch.txt:215
#, no-wrap
msgid "flag"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:217
msgid "A single character indicating the status of the ref:"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-fetch.txt:217
#, no-wrap
msgid "(space)"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:218
msgid "for a successfully fetched fast-forward;"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-fetch.txt:218
#, no-wrap
msgid "`+`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:219
msgid "for a successful forced update;"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-fetch.txt:219
#, no-wrap
msgid "`-`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:220
msgid "for a successfully pruned ref;"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-fetch.txt:220
#, no-wrap
msgid "`t`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:221
msgid "for a successful tag update;"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-fetch.txt:221
#, no-wrap
msgid "`*`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:222
msgid "for a successfully fetched new ref;"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-fetch.txt:222
#, no-wrap
msgid "`!`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:223
msgid "for a ref that was rejected or failed to update; and"
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-fetch.txt:223
#, no-wrap
msgid "`=`"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:224
msgid "for a ref that was up to date and did not need fetching."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-fetch.txt:225
#, no-wrap
msgid "summary"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:230
msgid ""
"For a successfully fetched ref, the summary shows the old and new values of "
"the ref in a form suitable for using as an argument to `git log` (this is "
"`<old>..<new>` in most cases, and `<old>...<new>` for forced non-fast-"
"forward updates)."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-fetch.txt:231
#, no-wrap
msgid "from"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:235
msgid ""
"The name of the remote ref being fetched from, minus its `refs/<type>/` "
"prefix. In the case of deletion, the name of the remote ref is \"(none)\"."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-fetch.txt:236
#, no-wrap
msgid "to"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:239
msgid ""
"The name of the local ref being updated, minus its `refs/<type>/` prefix."
msgstr ""

#. type: Labeled list
#: ../Documentation-sedout/git-fetch.txt:240
#, no-wrap
msgid "reason"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:244
msgid ""
"A human-readable explanation. In the case of successfully fetched refs, no "
"explanation is needed. For a failed ref, the reason for failure is described."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-fetch.txt:246
#, no-wrap
msgid "EXAMPLES"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:249
msgid "Update the remote-tracking branches:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-fetch.txt:252
#, no-wrap
msgid "$ git fetch origin\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:258
msgid ""
"The above command copies all branches from the remote refs/heads/ namespace "
"and stores them to the local refs/remotes/origin/ namespace, unless the "
"branch.<name>.fetch option is used to specify a non-default refspec."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:260
msgid "Using refspecs explicitly:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-fetch.txt:263
#, no-wrap
msgid "$ git fetch origin +seen:seen maint:tmp\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:268
msgid ""
"This updates (or creates, as necessary) branches `seen` and `tmp` in the "
"local repository by fetching from the branches (respectively)  `seen` and "
"`maint` from the remote repository."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:271
msgid ""
"The `seen` branch will be updated even if it does not fast-forward, because "
"it is prefixed with a plus sign; `tmp` will not be."
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:274
msgid ""
"Peek at a remote's branch, without configuring the remote in your local "
"repository:"
msgstr ""

#. type: delimited block -
#: ../Documentation-sedout/git-fetch.txt:278
#, no-wrap
msgid ""
"$ git fetch git://git.kernel.org/pub/scm/git/git.git maint\n"
"$ git log FETCH_HEAD\n"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:285
msgid ""
"The first command fetches the `maint` branch from the repository at `git://"
"git.kernel.org/pub/scm/git/git.git` and the second command uses `FETCH_HEAD` "
"to examine the branch with linkgit:git-log[1].  The fetched objects will "
"eventually be removed by git's built-in housekeeping (see linkgit:git-gc[1])."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-fetch.txt:289
#, no-wrap
msgid "BUGS"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:296
msgid ""
"Using --recurse-submodules can only fetch new commits in already checked out "
"submodules right now. When e.g. upstream added a new submodule in the just "
"fetched commits of the superproject the submodule itself cannot be fetched, "
"making it impossible to check out that submodule later without having to do "
"a fetch again. This is expected to be fixed in a future Git version."
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-fetch.txt:298
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:300
msgid "linkgit:git-pull[1]"
msgstr ""

#. type: Title -
#: ../Documentation-sedout/git-fetch.txt:302
#, no-wrap
msgid "GIT"
msgstr ""

#. type: Plain text
#: ../Documentation-sedout/git-fetch.txt:303
msgid "Part of the linkgit:git[1] suite"
msgstr ""
