# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 0.0\n"
"POT-Creation-Date: 2022-06-29 15:35+0900\n"
"PO-Revision-Date: 2022-06-30 01:00+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/git-filter-branch.txt:2
#, no-wrap
msgid "git-filter-branch(1)"
msgstr "git-filter-branch(1)"

#. type: Title -
#: ../Documentation-sedout/git-filter-branch.txt:5
#, no-wrap
msgid "NAME"
msgstr "NAME"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:7
msgid "git-filter-branch - Rewrite branches"
msgstr "git-filter-branch - ブランチを書き換えます"

#. type: Title -
#: ../Documentation-sedout/git-filter-branch.txt:9
#, no-wrap
msgid "SYNOPSIS"
msgstr "SYNOPSIS"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:18
#, no-wrap
msgid ""
"'git filter-branch' [--setup <command>] [--subdirectory-filter <directory>]\n"
"\t[--env-filter <command>] [--tree-filter <command>]\n"
"\t[--index-filter <command>] [--parent-filter <command>]\n"
"\t[--msg-filter <command>] [--commit-filter <command>]\n"
"\t[--tag-name-filter <command>] [--prune-empty]\n"
"\t[--original <namespace>] [-d <directory>] [-f | --force]\n"
"\t[--state-branch <branch>] [--] [<rev-list options>...]\n"
msgstr ""
"'git filter-branch' [--setup <command>] [--subdirectory-filter <directory>]\n"
"\t[--env-filter <command>] [--tree-filter <command>]\n"
"\t[--index-filter <command>] [--parent-filter <command>]\n"
"\t[--msg-filter <command>] [--commit-filter <command>]\n"
"\t[--tag-name-filter <command>] [--prune-empty]\n"
"\t[--original <namespace>] [-d <directory>] [-f | --force]\n"
"\t[--state-branch <branch>] [--] [<rev-list options>...]\n"

#. type: Title -
#: ../Documentation-sedout/git-filter-branch.txt:20
#, no-wrap
msgid "WARNING"
msgstr "WARNING"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:31
msgid ""
"'git filter-branch' has a plethora of pitfalls that can produce non-obvious "
"manglings of the intended history rewrite (and can leave you with little "
"time to investigate such problems since it has such abysmal performance).  "
"These safety and performance issues cannot be backward compatibly fixed and "
"as such, its use is not recommended.  Please use an alternative history "
"filtering tool such as https://github.com/newren/git-filter-repo/[git filter-"
"repo].  If you still need to use 'git filter-branch', please carefully read "
"<<SAFETY>> (and <<PERFORMANCE>>) to learn about the land mines of filter-"
"branch, and then vigilantly avoid as many of the hazards listed there as "
"reasonably possible."
msgstr ""
"`git filter-branch` には、意図した履歴の書き換えに加えて明白でない変なものを"
"生成することができる沢山の落とし穴があります(そして、酷い性能なので、そのよう"
"な問題を調査する時間がほとんどありません)。 これらの安全性とパフォーマンスの"
"問題は、下位互換性を持って修正することはできないため、 `git filter-branch` 使"
"用はお勧めしません。  https://github.com/newren/git-filter-repo/[git filter-"
"repo] などの代わりの履歴フィルタリングツールを使用してください。 それでもあな"
"たが `git filter-branch` を使用する必要がある場合は、 <<SAFETY>> (と "
"<<PERFORMANCE>>)を注意深く読んで、filter-branchの地雷について学び、リストされ"
"ている危険の多くを注意深く可能な限り回避してください。 "

#. type: Title -
#: ../Documentation-sedout/git-filter-branch.txt:33
#, no-wrap
msgid "DESCRIPTION"
msgstr "DESCRIPTION"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:40
msgid ""
"Lets you rewrite Git revision history by rewriting the branches mentioned in "
"the <rev-list options>, applying custom filters on each revision.  Those "
"filters can modify each tree (e.g. removing a file or running a perl rewrite "
"on all files) or information about each commit.  Otherwise, all information "
"(including original commit times or merge information) will be preserved."
msgstr ""
"あなたは <rev-list options> に記載されているブランチを書き換え、各リビジョン"
"にカスタムフィルターを適用することで、Gitリビジョン履歴を書き換えることができ"
"ます。 これらのフィルターは、各ツリー(ファイルの削除やすべてのファイルに対す"
"るperlリライトの実行など)または各コミットに関する情報を変更できます。 それ以"
"外の場合は、すべての情報(元のコミット時間またはマージ情報を含む)が保持されま"
"す。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:47
msgid ""
"The command will only rewrite the _positive_ refs mentioned in the command "
"line (e.g. if you pass 'a..b', only 'b' will be rewritten).  If you specify "
"no filters, the commits will be recommitted without any changes, which would "
"normally have no effect.  Nevertheless, this may be useful in the future for "
"compensating for some Git bugs or such, therefore such a usage is permitted."
msgstr ""
"このコマンドは、コマンドラインに記載されている「明らかな」ref(positive ref)の"
"みを書き換えます(たとえば、`a..b` を渡すと、 `b` のみが書き換えられます)。 "
"フィルタを指定しない場合、コミットは変更なしで再コミットされますが、通常は効"
"果がありません。 それでも、これは将来、Gitのバグなどを補うのに役立つ可能性が"
"あるため、このような使用は許可されています。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:52
msgid ""
"This command honors `.git/info/grafts` file and refs in the `refs/replace/` "
"namespace.  If you have any grafts or replacement refs defined, running this "
"command will make them permanent."
msgstr ""
"このコマンドは、 `.git/info/grafts` ファイルと `refs/replace/` 名前空間のref"
"を尊重します。 graftsまたは置換refが定義されている場合、このコマンドを実行す"
"るとそれらが永続的になります。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:61
msgid ""
"The rewritten history will have different object names for all the objects "
"and will not converge with the original branch.  You will not be able to "
"easily push and distribute the rewritten branch on top of the original "
"branch.  Please do not use this command if you do not know the full "
"implications, and avoid using it anyway, if a simple single commit would "
"suffice to fix your problem.  (See the \"RECOVERING FROM UPSTREAM REBASE\" "
"section in linkgit:git-rebase[1] for further information about rewriting "
"published history.)"
msgstr ""
"書き換えられた履歴は、すべてのオブジェクトに対して異なるオブジェクト名を持"
"ち、元のブランチに収束しません。 書き直されたブランチを元のブランチの上に簡単"
"にプッシュして配布することはできません。 あなたが完全な影響がわからない場合は"
"このコマンドを使用しないでください。 問題を解決するのに単純な単一のコミットで"
"十分な場合は、とにかく使用しないでください。 (公開された履歴の書き換えの詳細"
"については、 linkgit:git-rebase[1] の「RECOVERING FROM UPSTREAM REBASE」セク"
"ションを参照してください。)"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:65
msgid ""
"Always verify that the rewritten version is correct: The original refs, if "
"different from the rewritten ones, will be stored in the namespace 'refs/"
"original/'."
msgstr ""
"書き換えられたバージョンが正しいことを常に確認(verify)してください。書き換え"
"られたものと異なる場合、元のrefは名前空間 `refs /original/` に格納されます。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:69
msgid ""
"Note that since this operation is very I/O expensive, it might be a good "
"idea to redirect the temporary directory off-disk with the `-d` option, e.g. "
"on tmpfs.  Reportedly the speedup is very noticeable."
msgstr ""
"注意: この操作は入出力に非常にコストがかかるため、 `-d` オプションを使用して"
"一時ディレクトリをディスク外にリダイレクト、たとえば tmpfs にすることをお勧め"
"します。 聞いた限りでは、スピードアップは非常に顕著です。"

#. type: Title ~
#: ../Documentation-sedout/git-filter-branch.txt:72
#, no-wrap
msgid "Filters"
msgstr "Filters"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:84
msgid ""
"The filters are applied in the order as listed below.  The <command> "
"argument is always evaluated in the shell context using the 'eval' command "
"(with the notable exception of the commit filter, for technical reasons).  "
"Prior to that, the `$GIT_COMMIT` environment variable will be set to contain "
"the id of the commit being rewritten.  Also, GIT_AUTHOR_NAME, "
"GIT_AUTHOR_EMAIL, GIT_AUTHOR_DATE, GIT_COMMITTER_NAME, GIT_COMMITTER_EMAIL, "
"and GIT_COMMITTER_DATE are taken from the current commit and exported to the "
"environment, in order to affect the author and committer identities of the "
"replacement commit created by linkgit:git-commit-tree[1] after the filters "
"have run."
msgstr ""
"フィルタは、以下リストされた順序で適用されます。 <command> 引数は、(技術的な"
"理由より、コミットフィルターを除き、)常に `eval` コマンドを使用してシェルコン"
"テキストで評価されます。 その前に `$GIT_COMMIT` 環境変数は、書き換えられるコ"
"ミットのIDを含むように設定されます。 また、GIT_AUTHOR_NAME と "
"GIT_AUTHOR_EMAIL と GIT_AUTHOR_DATE と GIT_COMMITTER_NAME と "
"GIT_COMMITTER_EMAIL と GIT_COMMITTER_DATE 環境変数は現在のコミットから取得さ"
"れて環境変数にエクスポートされ、フィルター実行後に linkgit:git-commit-"
"tree[1] が作成する代替コミット(replacement commit)の作者とコミッターに影響を"
"及ぼします。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:87
msgid ""
"If any evaluation of <command> returns a non-zero exit status, the whole "
"operation will be aborted."
msgstr ""
"<command> のいずれかの評価がゼロ以外のexitステータスを返す場合、操作全体が中"
"止(abort)されます。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:93
msgid ""
"A 'map' function is available that takes an \"original sha1 id\" argument "
"and outputs a \"rewritten sha1 id\" if the commit has been already "
"rewritten, and \"original sha1 id\" otherwise; the 'map' function can return "
"several ids on separate lines if your commit filter emitted multiple commits."
msgstr ""
"「元のsha1 ID」引数を取り、コミットがすでに書き換えられている場合は「書き換え"
"られたsha1 ID」を出力し、それ以外の場合は「元のsha1 ID」を出力する「map」関数"
"を使用できます。 コミットフィルターが複数のコミットを発行した場合、「map」関"
"数は別々の行に複数のIDを返すことができます。"

#. type: Title -
#: ../Documentation-sedout/git-filter-branch.txt:96
#, no-wrap
msgid "OPTIONS"
msgstr "OPTIONS"

#. type: Labeled list
#: ../Documentation-sedout/git-filter-branch.txt:98
#, no-wrap
msgid "`--setup <command>`"
msgstr "`--setup <command>`"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:104
msgid ""
"This is not a real filter executed for each commit but a one time setup just "
"before the loop. Therefore no commit-specific variables are defined yet.  "
"Functions or variables defined here can be used or modified in the following "
"filter steps except the commit filter, for technical reasons."
msgstr ""
"これは、コミットごとに実行される実際のフィルターではなく、ループの直前に1回だ"
"けセットアップされます。 したがって、このフィルターコマンドではコミット固有の"
"変数はまだ定義されていません。 ここで定義された関数または変数は、技術的な理由"
"により、コミットフィルターを除く次のフィルターステップで使用または変更できま"
"す。"

#. type: Labeled list
#: ../Documentation-sedout/git-filter-branch.txt:105
#, no-wrap
msgid "`--subdirectory-filter <directory>`"
msgstr "`--subdirectory-filter <directory>`"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:109
msgid ""
"Only look at the history which touches the given subdirectory.  The result "
"will contain that directory (and only that) as its project root. Implies "
"<<Remap_to_ancestor>>."
msgstr ""
"指定のサブディレクトリにアクセスする履歴のみを探してください。 結果には、その"
"ディレクトリ(かつ、それのみ)がプロジェクトルートとして含まれます。 "
"<<Remap_to_ancestor>> を含んでいます。"

#. type: Labeled list
#: ../Documentation-sedout/git-filter-branch.txt:110
#, no-wrap
msgid "`--env-filter <command>`"
msgstr "`--env-filter <command>`"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:115
msgid ""
"This filter may be used if you only need to modify the environment in which "
"the commit will be performed.  Specifically, you might want to rewrite the "
"author/committer name/email/time environment variables (see linkgit:git-"
"commit-tree[1] for details)."
msgstr ""
"このフィルターは、コミットが実行される環境変数を変更するだけでよい場合に使用"
"できます。 具体的には、 作者/コミッター名/電子メールアドレス/時間 の環境変数"
"を書き直したい場合です(詳細については、 linkgit:git-commit-tree[1] 参照)。"

#. type: Labeled list
#: ../Documentation-sedout/git-filter-branch.txt:116
#, no-wrap
msgid "`--tree-filter <command>`"
msgstr "`--tree-filter <command>`"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:123
msgid ""
"This is the filter for rewriting the tree and its contents.  The argument is "
"evaluated in shell with the working directory set to the root of the checked "
"out tree.  The new tree is then used as-is (new files are auto-added, "
"disappeared files are auto-removed - neither .gitignore files nor any other "
"ignore rules *HAVE ANY EFFECT*!)."
msgstr ""
"これは、ツリーとその内容を書き換えるためのフィルターです。 フィルターコマンド"
"の引数は、チェックアウトされたツリーのルートに設定された作業ディレクトリを使"
"用してシェルで評価されます。 その後、新しいツリーがそのまま使用されます(新し"
"いファイルは自動的に追加され、消えたファイルは自動的に削除されます。 `."
"gitignore` ファイルも他の無視ルールも「効果がありません！」)。"

#. type: Labeled list
#: ../Documentation-sedout/git-filter-branch.txt:124
#, no-wrap
msgid "`--index-filter <command>`"
msgstr "`--index-filter <command>`"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:130
msgid ""
"This is the filter for rewriting the index.  It is similar to the tree "
"filter but does not check out the tree, which makes it much faster.  "
"Frequently used with `git rm --cached --ignore-unmatch ...`, see EXAMPLES "
"below.  For hairy cases, see linkgit:git-update-index[1]."
msgstr ""
"インデックスを書き換えるためのフィルタです。 これはツリーフィルターに似ていま"
"すが、ツリーをチェックアウトしないため、はるかに高速になります。 `git rm --"
"cached --ignore-unmatch ...` で頻繁に使用されます。以下の例を参照してくださ"
"い。 ぞっとするほど危険なケースについては、 linkgit:git-update-index[1] を参"
"照してください。"

#. type: Labeled list
#: ../Documentation-sedout/git-filter-branch.txt:131
#, no-wrap
msgid "`--parent-filter <command>`"
msgstr "`--parent-filter <command>`"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:138
msgid ""
"This is the filter for rewriting the commit's parent list.  It will receive "
"the parent string on stdin and shall output the new parent string on "
"stdout.  The parent string is in the format described in linkgit:git-commit-"
"tree[1]: empty for the initial commit, \"-p parent\" for a normal commit and "
"\"-p parent1 -p parent2 -p parent3 ...\" for a merge commit."
msgstr ""
"これは、コミットの親リストを書き換えるためのフィルターです。 フィルターコマン"
"ドは stdinで親の文字列を受け取り、stdoutで新しい親の文字列を出力します。 親の"
"文字列は、 linkgit:git-commit-tree[1] で説明されている形式です。最初のコミッ"
"トの場合は空、通常のコミットの場合は `-p parent` 、 マージコミットの場合は `-"
"p parent1 -p parent2 -p parent3 ...` です。"

#. type: Labeled list
#: ../Documentation-sedout/git-filter-branch.txt:139
#, no-wrap
msgid "`--msg-filter <command>`"
msgstr "`--msg-filter <command>`"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:144
msgid ""
"This is the filter for rewriting the commit messages.  The argument is "
"evaluated in the shell with the original commit message on standard input; "
"its standard output is used as the new commit message."
msgstr ""
"これは、コミットメッセージを書き換えるためのフィルターです。 フィルターへの引"
"数は、標準入力の元のコミットメッセージを使用してシェルで評価されます。 フィル"
"ターの標準出力は、新しいコミットメッセージとして使用されます。"

#. type: Labeled list
#: ../Documentation-sedout/git-filter-branch.txt:145
#, no-wrap
msgid "`--commit-filter <command>`"
msgstr "`--commit-filter <command>`"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:151
msgid ""
"This is the filter for performing the commit.  If this filter is specified, "
"it will be called instead of the 'git commit-tree' command, with arguments "
"of the form \"<TREE_ID> [(-p <PARENT_COMMIT_ID>)...]\" and the log message "
"on stdin.  The commit id is expected on stdout."
msgstr ""
"これは、コミットを実行するためのフィルターです。 このフィルターを指定する"
"と、 `git commit-tree` コマンドの代わりに、フィルターコマンドは `<TREE_ID> "
"[(-p <PARENT_COMMIT_ID>)...]｀ 形式の引数とstdinのログメッセージを使用して呼"
"び出されます。 stdoutにはコミットIDを出力することが期待されています。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:155
msgid ""
"As a special extension, the commit filter may emit multiple commit ids; in "
"that case, the rewritten children of the original commit will have all of "
"them as parents."
msgstr ""
"特別な拡張機能として、コミットフィルターは複数のコミットIDを発行する場合があ"
"ります。 その場合、元のコミットの書き直された子は、それらすべてを親として持ち"
"ます。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:160
msgid ""
"You can use the 'map' convenience function in this filter, and other "
"convenience functions, too.  For example, calling 'skip_commit \"$@\"' will "
"leave out the current commit (but not its changes! If you want that, use "
"'git rebase' instead)."
msgstr ""
"あなたはこのフィルターで「map」便利関数やその他の便利関数を使用することもでき"
"ます。 たとえば、 `skip_commit \"$@\"` を呼び出すと、現在のコミットが除外され"
"ます(ただし、変更は除外されます！ 必要に応じて、代わりに `git rebase` を使用"
"してください)。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:164
msgid ""
"You can also use the `git_commit_non_empty_tree \"$@\"` instead of `git "
"commit-tree \"$@\"` if you don't wish to keep commits with a single parent "
"and that makes no change to the tree."
msgstr ""
"単一の親でコミットを保持したくない場合は、 `git commit-tree \"$@\"` の代わり"
"に `git_commit_non_empty_tree \"$@\"` を使用することもできます。これにより、"
"ツリーは変更されることはありません。"

#. type: Labeled list
#: ../Documentation-sedout/git-filter-branch.txt:165
#, no-wrap
msgid "`--tag-name-filter <command>`"
msgstr "`--tag-name-filter <command>`"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:171
msgid ""
"This is the filter for rewriting tag names. When passed, it will be called "
"for every tag ref that points to a rewritten object (or to a tag object "
"which points to a rewritten object).  The original tag name is passed via "
"standard input, and the new tag name is expected on standard output."
msgstr ""
"これは、タグ名を書き換えるためのフィルターです。 このフィルタが渡されると、書"
"き換えられたオブジェクト(または書き換えられたオブジェクトを指すタグオブジェク"
"ト)を指す全てのタグrefに対してこのフィルタが呼び出されます。 元のタグ名は標準"
"入力を介して渡され、新しいタグ名を標準出力に出力することが期待されます。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:176
msgid ""
"The original tags are not deleted, but can be overwritten; use \"--tag-name-"
"filter cat\" to simply update the tags.  In this case, be very careful and "
"make sure you have the old tags backed up in case the conversion has run "
"afoul."
msgstr ""
"元のタグは削除されませんが、上書きできます。  `--tag-name-filter cat` を使用"
"して、タグを更新するだけです。 この場合、変換が失敗した場合に備えて、古いタグ"
"をバックアップしておくなど、十分な注意が必要です。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:187
msgid ""
"Nearly proper rewriting of tag objects is supported. If the tag has a "
"message attached, a new tag object will be created with the same message, "
"author, and timestamp. If the tag has a signature attached, the signature "
"will be stripped. It is by definition impossible to preserve signatures. The "
"reason this is \"nearly\" proper, is because ideally if the tag did not "
"change (points to the same object, has the same name, etc.)  it should "
"retain any signature. That is not the case, signatures will always be "
"removed, buyer beware. There is also no support for changing the author or "
"timestamp (or the tag message for that matter). Tags which point to other "
"tags will be rewritten to point to the underlying commit."
msgstr ""
"タグオブジェクトは、ほぼ適切な書き換えがサポートされています。 タグにメッセー"
"ジが添付されている場合、同一のメッセージと作者とタイムスタンプを使用して新し"
"いタグオブジェクトが作成されます。 タグに署名が付いている場合、署名は削除され"
"ます。 定義上、署名を保持することは不可能です。 これが「ほぼ」適切である理由"
"は、理想的には、タグが変更されていない場合(同じオブジェクトを指している、同じ"
"名前を持っているなど)、署名を保持する必要があるためです。しかし署名は保持され"
"ません。 署名は常に削除されます。 利用者は注意してください。 また、作者または"
"タイムスタンプ(またはそのことについてのタグメッセージ)を変更することもサポー"
"トされていません。 他のタグを指すタグは、基になるコミットを指すように書き直さ"
"れます。"

#. type: Labeled list
#: ../Documentation-sedout/git-filter-branch.txt:188
#, no-wrap
msgid "`--prune-empty`"
msgstr "`--prune-empty`"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:195
msgid ""
"Some filters will generate empty commits that leave the tree untouched.  "
"This option instructs git-filter-branch to remove such commits if they have "
"exactly one or zero non-pruned parents; merge commits will therefore remain "
"intact.  This option cannot be used together with `--commit-filter`, though "
"the same effect can be achieved by using the provided "
"`git_commit_non_empty_tree` function in a commit filter."
msgstr ""
"一部のフィルターは、ツリーをそのままにしておく空のコミットを生成します。 この"
"オプションは、刈り込みされていない親が1個または0個しかない場合に、そのような"
"コミットを削除するようにgit-filter-branchに指示します。 したがって、マージコ"
"ミットはそのまま残ります。 このオプションは `--commit-filter` と一緒に使用す"
"ることはできませんが、コミットフィルターで提供されている "
"`git_commit_non_empty_tree` 関数を使用することで同じ効果を得ることができま"
"す。"

#. type: Labeled list
#: ../Documentation-sedout/git-filter-branch.txt:196
#, no-wrap
msgid "`--original <namespace>`"
msgstr "`--original <namespace>`"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:199
msgid ""
"Use this option to set the namespace where the original commits will be "
"stored. The default value is 'refs/original'."
msgstr ""
"このオプションを使用して、元のコミットが保存される名前空間を設定します。 デ"
"フォルト値は `refs/original` です。"

#. type: Labeled list
#: ../Documentation-sedout/git-filter-branch.txt:200
#, no-wrap
msgid "`-d <directory>`"
msgstr "`-d <directory>`"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:207
msgid ""
"Use this option to set the path to the temporary directory used for "
"rewriting.  When applying a tree filter, the command needs to temporarily "
"check out the tree to some directory, which may consume considerable space "
"in case of large projects.  By default it does this in the `.git-rewrite/` "
"directory but you can override that choice by this parameter."
msgstr ""
"このオプションを使用して、書き換えに使用される一時ディレクトリへのパスを設定"
"します。 ツリーフィルターを適用する場合、コマンドは一時的にツリーをあるディレ"
"クトリにチェックアウトする必要があります。これは、大規模なプロジェクトの場"
"合、かなりのスペースを消費する可能性があります。 デフォルトでは、これは `."
"git-rewrite/` ディレクトリで行われますが、このパラメータでその選択を上書きで"
"きます。"

#. type: Labeled list
#: ../Documentation-sedout/git-filter-branch.txt:208
#, no-wrap
msgid "`-f`"
msgstr "`-f`"

#. type: Labeled list
#: ../Documentation-sedout/git-filter-branch.txt:209
#, no-wrap
msgid "`--force`"
msgstr "`--force`"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:213
msgid ""
"'git filter-branch' refuses to start with an existing temporary directory or "
"when there are already refs starting with 'refs/original/', unless forced."
msgstr ""
"`git filter-branch` は、強制されない限り、既存の一時ディレクトリでの開始を拒"
"否するか、 `refs/original/` で始まるrefがすでに存在する場合に拒否します。"

#. type: Labeled list
#: ../Documentation-sedout/git-filter-branch.txt:214
#, no-wrap
msgid "`--state-branch <branch>`"
msgstr "`--state-branch <branch>`"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:219
msgid ""
"This option will cause the mapping from old to new objects to be loaded from "
"named branch upon startup and saved as a new commit to that branch upon "
"exit, enabling incremental of large trees. If '<branch>' does not exist it "
"will be created."
msgstr ""
"このオプションを使用すると、古いオブジェクトから新しいオブジェクトへのマッピ"
"ングが、起動時に名前付きブランチから読み込まれ、終了時にそのブランチへの新し"
"いコミットとして保存され、大きなツリーの増分が可能になります。 `<branch>` が"
"存在しない場合は、作成されます。"

#. type: Labeled list
#: ../Documentation-sedout/git-filter-branch.txt:220
#, no-wrap
msgid "<rev-list options>..."
msgstr "<rev-list options>..."

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:225
msgid ""
"Arguments for 'git rev-list'.  All positive refs included by these options "
"are rewritten.  You may also specify options such as `--all`, but you must "
"use `--` to separate them from the 'git filter-branch' options. Implies "
"<<Remap_to_ancestor>>."
msgstr ""
"`git rev-list` の引数。 これらのオプションに含まれるすべての正のref(positive "
"refs)は書き直されます。 `--all` などのオプションを指定することもできますが、"
"それらを `git filter-branch` のオプションから分離するには `--` を使用する必要"
"があります。 <<Remap_to_ancestor>> を含んでいます。"

#. type: Title ~
#: ../Documentation-sedout/git-filter-branch.txt:229
#, no-wrap
msgid "Remap to ancestor"
msgstr "Remap to ancestor"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:236
msgid ""
"By using linkgit:git-rev-list[1] arguments, e.g., path limiters, you can "
"limit the set of revisions which get rewritten. However, positive refs on "
"the command line are distinguished: we don't let them be excluded by such "
"limiters. For this purpose, they are instead rewritten to point at the "
"nearest ancestor that was not excluded."
msgstr ""
"linkgit:git-rev-list[1] の引数、たとえばパスリミッター、を使用すると、書き換"
"えられるリビジョンのセットを制限できます。 ただし、コマンドラインの正のrefは"
"区別されます。このようなリミッターによって除外されることはありません。 この目"
"的のために、代わりに、除外されなかった最も近い祖先を指すように書き直されま"
"す。"

#. type: Title -
#: ../Documentation-sedout/git-filter-branch.txt:239
#, no-wrap
msgid "EXIT STATUS"
msgstr "EXIT STATUS"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:244
msgid ""
"On success, the exit status is `0`.  If the filter can't find any commits to "
"rewrite, the exit status is `2`.  On any other error, the exit status may be "
"any other non-zero value."
msgstr ""
"成功すると、終了ステータスは「0」になります。 フィルタが書き換えるコミットを"
"見つけられない場合、終了ステータスは「2」です。 その他のエラーの場合、終了ス"
"テータスはその他のゼロ以外の値である可能性があります。"

#. type: Title -
#: ../Documentation-sedout/git-filter-branch.txt:247
#, no-wrap
msgid "EXAMPLES"
msgstr "EXAMPLES"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:251
msgid ""
"Suppose you want to remove a file (containing confidential information or "
"copyright violation) from all commits:"
msgstr ""
"すべてのコミットからファイル(機密情報または著作権違反を含む)を削除するとする"
"と:"

#. type: delimited block -
#: ../Documentation-sedout/git-filter-branch.txt:254
#, no-wrap
msgid "git filter-branch --tree-filter 'rm filename' HEAD\n"
msgstr "git filter-branch --tree-filter 'rm filename' HEAD\n"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:259
msgid ""
"However, if the file is absent from the tree of some commit, a simple `rm "
"filename` will fail for that tree and commit.  Thus you may instead want to "
"use `rm -f filename` as the script."
msgstr ""
"しかしながら、ファイルがコミットのツリーに存在しない場合、単純な `rm "
"filename` はそのツリーとコミットで失敗します。 したがって、代わりにスクリプト"
"として `rm -f filename` を使用することをお勧めします。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:265
msgid ""
"Using `--index-filter` with 'git rm' yields a significantly faster version.  "
"Like with using `rm filename`, `git rm --cached filename` will fail if the "
"file is absent from the tree of a commit.  If you want to \"completely forget"
"\" a file, it does not matter when it entered history, so we also add `--"
"ignore-unmatch`:"
msgstr ""
"`--index-filter` を `git rm` と一緒に使用すると、非常に高速なバージョンが生成"
"されます。 `rm filename` を使用する場合と同様に、ファイルがコミットのツリーに"
"存在しない場合、 `git rm --cached filename` は失敗します。 ファイルを「完全に"
"忘れる」場合は、ファイルがいつ履歴に入力されたかは関係ないため、 `--ignore-"
"unmatch` :"

#. type: delimited block -
#: ../Documentation-sedout/git-filter-branch.txt:268
#, no-wrap
msgid "git filter-branch --index-filter 'git rm --cached --ignore-unmatch filename' HEAD\n"
msgstr "git filter-branch --index-filter 'git rm --cached --ignore-unmatch filename' HEAD\n"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:271
msgid "Now, you will get the rewritten history saved in HEAD."
msgstr "これで、書き換えられた履歴がHEADに保存されます。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:274
msgid ""
"To rewrite the repository to look as if `foodir/` had been its project root, "
"and discard all other history:"
msgstr ""
"`foodir/` がプロジェクトルートであるかのようにリポジトリを書き直し、他のすべ"
"ての履歴を破棄するには:"

#. type: delimited block -
#: ../Documentation-sedout/git-filter-branch.txt:277
#, no-wrap
msgid "git filter-branch --subdirectory-filter foodir -- --all\n"
msgstr "git filter-branch --subdirectory-filter foodir -- --all\n"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:282
msgid ""
"Thus you can, e.g., turn a library subdirectory into a repository of its "
"own.  Note the `--` that separates 'filter-branch' options from revision "
"options, and the `--all` to rewrite all branches and tags."
msgstr ""
"したがって、たとえば、ライブラリサブディレクトリを独自のリポジトリに変えるこ"
"とができます。 注意: `filter-branch` オプションをリビジョンオプションから分離"
"する `--` と、すべてのブランチとタグを書き換えるための `--all` に注意してくだ"
"さい。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:286
msgid ""
"To set a commit (which typically is at the tip of another history) to be the "
"parent of the current initial commit, in order to paste the other history "
"behind the current history:"
msgstr ""
"(通常は他の履歴の先端にある)あるコミットを現在の初期コミットの親に設定し、他"
"の履歴を現在の履歴の後ろに貼り付ける:"

#. type: delimited block -
#: ../Documentation-sedout/git-filter-branch.txt:289
#, no-wrap
msgid "git filter-branch --parent-filter 'sed \"s/^\\$/-p <graft-id>/\"' HEAD\n"
msgstr "git filter-branch --parent-filter 'sed \"s/^\\$/-p <graft-id>/\"' HEAD\n"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:295
msgid ""
"(if the parent string is empty - which happens when we are dealing with the "
"initial commit - add graftcommit as a parent).  Note that this assumes "
"history with a single root (that is, no merge without common ancestors "
"happened).  If this is not the case, use:"
msgstr ""
"(親の文字列が空の場合 -- それは最初のコミットを処理しているときに発生します "
"-- 親として graftcommit を追加します)。 注意: これは、単一のルートを持つ履歴"
"を想定していることに注意してください(つまり、共通の祖先がないとマージは発生し"
"ません)。 そうでない場合は、以下を使用してください:"

#. type: delimited block -
#: ../Documentation-sedout/git-filter-branch.txt:299
#, no-wrap
msgid ""
"git filter-branch --parent-filter \\\n"
"\t'test $GIT_COMMIT = <commit-id> && echo \"-p <graft-id>\" || cat' HEAD\n"
msgstr ""
"git filter-branch --parent-filter \\\n"
"\t'test $GIT_COMMIT = <commit-id> && echo \"-p <graft-id>\" || cat' HEAD\n"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:302
msgid "or even simpler:"
msgstr "または、さらに簡単に:"

#. type: delimited block -
#: ../Documentation-sedout/git-filter-branch.txt:306
#, no-wrap
msgid ""
"git replace --graft $commit-id $graft-id\n"
"git filter-branch $graft-id..HEAD\n"
msgstr ""
"git replace --graft $commit-id $graft-id\n"
"git filter-branch $graft-id..HEAD\n"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:309
msgid "To remove commits authored by \"Darl McBribe\" from the history:"
msgstr "「Darl McBribe」によって作成されたコミットを履歴から削除するには:"

#. type: delimited block -
#: ../Documentation-sedout/git-filter-branch.txt:318
#, no-wrap
msgid ""
"git filter-branch --commit-filter '\n"
"\tif [ \"$GIT_AUTHOR_NAME\" = \"Darl McBribe\" ];\n"
"\tthen\n"
"\t\tskip_commit \"$@\";\n"
"\telse\n"
"\t\tgit commit-tree \"$@\";\n"
"\tfi' HEAD\n"
msgstr ""
"git filter-branch --commit-filter '\n"
"\tif [ \"$GIT_AUTHOR_NAME\" = \"Darl McBribe\" ];\n"
"\tthen\n"
"\t\tskip_commit \"$@\";\n"
"\telse\n"
"\t\tgit commit-tree \"$@\";\n"
"\tfi' HEAD\n"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:321
msgid "The function 'skip_commit' is defined as follows:"
msgstr "関数 `skip_commit` は以下のように定義されています:"

#. type: delimited block -
#: ../Documentation-sedout/git-filter-branch.txt:333
#, no-wrap
msgid ""
"skip_commit()\n"
"{\n"
"\tshift;\n"
"\twhile [ -n \"$1\" ];\n"
"\tdo\n"
"\t\tshift;\n"
"\t\tmap \"$1\";\n"
"\t\tshift;\n"
"\tdone;\n"
"}\n"
msgstr ""
"skip_commit()\n"
"{\n"
"\tshift;\n"
"\twhile [ -n \"$1\" ];\n"
"\tdo\n"
"\t\tshift;\n"
"\t\tmap \"$1\";\n"
"\t\tshift;\n"
"\tdone;\n"
"}\n"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:340
msgid ""
"The shift magic first throws away the tree id and then the -p parameters.  "
"Note that this handles merges properly! In case Darl committed a merge "
"between P1 and P2, it will be propagated properly and all children of the "
"merge will become merge commits with P1,P2 as their parents instead of the "
"merge commit."
msgstr ""
"シフトの魔法により、最初にツリーIDを破棄し、次に `-p` パラメーターを破棄しま"
"す。 注意: このハンドルは適切にマージされます！  DarlがP1とP2の間のマージをコ"
"ミットした場合、それは適切に伝播され、マージのすべての子は、マージコミットで"
"はなく、親としてP1、P2を持つマージコミットになります。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:345
msgid ""
"the changes introduced by the commits, and which are not reverted by "
"subsequent commits, will still be in the rewritten branch. If you want to "
"throw out _changes_ together with the commits, you should use the "
"interactive mode of 'git rebase'."
msgstr "コミットによって導入され、後続のコミットによって元に戻され無い変更は、引き続き書き換えられたブランチに残ります。 あなたがコミットと一緒に「変更」を破棄したい場合、 あなたは `git rebase` の対話モードを使用する必要があります。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:349
msgid ""
"You can rewrite the commit log messages using `--msg-filter`.  For example, "
"'git svn-id' strings in a repository created by 'git svn' can be removed "
"this way:"
msgstr "`--msg-filter` を使用してコミットログメッセージを書き換えることができます。 たとえば、 `git svn` によって作成されたリポジトリ内の \"git svn-id\" 文字列は、以下の方法で削除できます:"

#. type: delimited block -
#: ../Documentation-sedout/git-filter-branch.txt:354
#, no-wrap
msgid ""
"git filter-branch --msg-filter '\n"
"\tsed -e \"/^git-svn-id:/d\"\n"
"'\n"
msgstr ""
"git filter-branch --msg-filter '\n"
"\tsed -e \"/^git-svn-id:/d\"\n"
"'\n"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:358
msgid ""
"If you need to add 'Acked-by' lines to, say, the last 10 commits (none of "
"which is a merge), use this command:"
msgstr ""
"たとえば、最後の10個のコミット(いずれもマージではない)に `Acked-by` 行を追加"
"する必要がある場合は、以下のコマンドを使用します:"

#. type: delimited block -
#: ../Documentation-sedout/git-filter-branch.txt:364
#, no-wrap
msgid ""
"git filter-branch --msg-filter '\n"
"\tcat &&\n"
"\techo \"Acked-by: Bugs Bunny <bunny@bugzilla.org>\"\n"
"' HEAD~10..HEAD\n"
msgstr ""
"git filter-branch --msg-filter '\n"
"\tcat &&\n"
"\techo \"Acked-by: Bugs Bunny <bunny@bugzilla.org>\"\n"
"' HEAD~10..HEAD\n"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:370
msgid ""
"The `--env-filter` option can be used to modify committer and/or author "
"identity.  For example, if you found out that your commits have the wrong "
"identity due to a misconfigured user.email, you can make a correction, "
"before publishing the project, like this:"
msgstr "`--env-filter` オプションを使用して、コミッターや作者のIDを変更できます。 たとえば、user.emailの設定が間違っているためにコミットのIDが間違っていることがわかった場合は、プロジェクトを公開する前に、以下のように修正できます:"

#. type: delimited block -
#: ../Documentation-sedout/git-filter-branch.txt:382
#, no-wrap
msgid ""
"git filter-branch --env-filter '\n"
"\tif test \"$GIT_AUTHOR_EMAIL\" = \"root@localhost\"\n"
"\tthen\n"
"\t\tGIT_AUTHOR_EMAIL=john@example.com\n"
"\tfi\n"
"\tif test \"$GIT_COMMITTER_EMAIL\" = \"root@localhost\"\n"
"\tthen\n"
"\t\tGIT_COMMITTER_EMAIL=john@example.com\n"
"\tfi\n"
"' -- --all\n"
msgstr ""
"git filter-branch --env-filter '\n"
"\tif test \"$GIT_AUTHOR_EMAIL\" = \"root@localhost\"\n"
"\tthen\n"
"\t\tGIT_AUTHOR_EMAIL=john@example.com\n"
"\tfi\n"
"\tif test \"$GIT_COMMITTER_EMAIL\" = \"root@localhost\"\n"
"\tthen\n"
"\t\tGIT_COMMITTER_EMAIL=john@example.com\n"
"\tfi\n"
"' -- --all\n"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:388
msgid ""
"To restrict rewriting to only part of the history, specify a revision range "
"in addition to the new branch name.  The new branch name will point to the "
"top-most revision that a 'git rev-list' of this range will print."
msgstr "履歴の一部のみに書き換えを制限するには、新しいブランチ名に加えてリビジョン範囲を指定します。 新しいブランチ名は、この範囲の `git rev-list` が出力する最上位のリビジョンを指します。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:390
msgid "Consider this history:"
msgstr "以下の履歴について考えてみましょう:"

#. type: delimited block -
#: ../Documentation-sedout/git-filter-branch.txt:395
#, no-wrap
msgid ""
"     D--E--F--G--H\n"
"    /     /\n"
"A--B-----C\n"
msgstr ""
"     D--E--F--G--H\n"
"    /     /\n"
"A--B-----C\n"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:398
msgid "To rewrite only commits D,E,F,G,H, but leave A, B and C alone, use:"
msgstr ""
"コミット D,E,F,G,H だけを書き換えて、 A,B,C はそのままにするには、以下のよう"
"にします:"

#. type: delimited block -
#: ../Documentation-sedout/git-filter-branch.txt:401
#, no-wrap
msgid "git filter-branch ... C..H\n"
msgstr "git filter-branch ... C..H\n"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:404
msgid "To rewrite commits E,F,G,H, use one of these:"
msgstr "コミット E,F,G,H を書き換えるには、以下のどちらかを使用します:"

#. type: delimited block -
#: ../Documentation-sedout/git-filter-branch.txt:408
#, no-wrap
msgid ""
"git filter-branch ... C..H --not D\n"
"git filter-branch ... D..H --not C\n"
msgstr ""
"git filter-branch ... C..H --not D\n"
"git filter-branch ... D..H --not C\n"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:411
msgid "To move the whole tree into a subdirectory, or remove it from there:"
msgstr "ツリー全体をサブディレクトリに移動する、またはそこから削除するには:"

#. type: delimited block -
#: ../Documentation-sedout/git-filter-branch.txt:418
#, no-wrap
msgid ""
"git filter-branch --index-filter \\\n"
"\t'git ls-files -s | sed \"s-\\t\\\"*-&newsubdir/-\" |\n"
"\t\tGIT_INDEX_FILE=$GIT_INDEX_FILE.new \\\n"
"\t\t\tgit update-index --index-info &&\n"
"\t mv \"$GIT_INDEX_FILE.new\" \"$GIT_INDEX_FILE\"' HEAD\n"
msgstr ""
"git filter-branch --index-filter \\\n"
"\t'git ls-files -s | sed \"s-\\t\\\"*-&newsubdir/-\" |\n"
"\t\tGIT_INDEX_FILE=$GIT_INDEX_FILE.new \\\n"
"\t\t\tgit update-index --index-info &&\n"
"\t mv \"$GIT_INDEX_FILE.new\" \"$GIT_INDEX_FILE\"' HEAD\n"

#. type: Title -
#: ../Documentation-sedout/git-filter-branch.txt:423
#, no-wrap
msgid "CHECKLIST FOR SHRINKING A REPOSITORY"
msgstr "リポジトリ縮小チェックリスト"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:431
msgid ""
"git-filter-branch can be used to get rid of a subset of files, usually with "
"some combination of `--index-filter` and `--subdirectory-filter`.  People "
"expect the resulting repository to be smaller than the original, but you "
"need a few more steps to actually make it smaller, because Git tries hard "
"not to lose your objects until you tell it to.  First make sure that:"
msgstr "git-filter-branchは、ファイルのサブセットを取り除くために使用できます。通常は、 `--index-filter` と `--subdirectory-filter` を組み合わせて使用します。 人々は結果のリポジトリが元のリポジトリよりも小さいことを期待していますが、Gitは指示があるまでオブジェクトを失わないように努力するため、実際にリポジトリを小さくするにはさらにいくつかの手順が必要です。 まずは以下のことを確認してください:"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:435
msgid ""
"You really removed all variants of a filename, if a blob was moved over its "
"lifetime.  `git log --name-only --follow --all -- filename` can help you "
"find renames."
msgstr "ブロブがその存続期間中に移動された場合、あなたはファイル名のすべての派生を本当に削除したことになります。 `git log --name-only --follow --all -- filename` は、名前の変更を見つけるのに役立ちます。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:438
msgid ""
"You really filtered all refs: use `--tag-name-filter cat -- --all` when "
"calling git-filter-branch."
msgstr ""
"git-filter-branch を呼び出す際に `--tag-name-filter cat -- --all` を使用する"
"と、本当にすべての refs をフィルタリングすることができます。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:441
msgid ""
"Then there are two ways to get a smaller repository.  A safer way is to "
"clone, that keeps your original intact."
msgstr ""
"次に、より小さなリポジトリを取得する2つの方法があります。 より安全な方法は、"
"クローンを作成することです。これにより、あなたの元のファイルがそのまま保持さ"
"れます。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:445
msgid ""
"Clone it with `git clone file:///path/to/repo`.  The clone will not have the "
"removed objects.  See linkgit:git-clone[1].  (Note that cloning with a plain "
"path just hardlinks everything!)"
msgstr "`git clone file:///path/to/repo` でクローンを作成します。 クローンには削除されたオブジェクトはありません。 linkgit:git-clone[1] を参照してください。 (注意: 普通のパス指定でクローンを作成すると、すべてがハードリンクされてしまうことに注意してください！)"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:450
msgid ""
"If you really don't want to clone it, for whatever reasons, check the "
"following points instead (in this order).  This is a very destructive "
"approach, so *make a backup* or go back to cloning it.  You have been warned."
msgstr "あなたがなんらかの理由でマヂでクローンを作成したくない場合は、代わりに以下の点を(この順序で)確認してください。 これは非常に破壊的なアプローチであるため、「バックアップを作成」するか、クローン作成に戻ってください。いいですね？我々はちゃんと警告しましたよ。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:454
msgid ""
"Remove the original refs backed up by git-filter-branch: say `git for-each-"
"ref --format=\"%(refname)\" refs/original/ | xargs -n 1 git update-ref -d`."
msgstr ""
"git-filter-branchによってバックアップされた元のrefを削除します。そのためには "
"`git for-each-ref --format=\"%(refname)\" refs/original/ | xargs -n 1 git "
"update-ref -d` とします。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:456
msgid "Expire all reflogs with `git reflog expire --expire=now --all`."
msgstr "`git reflog expire --expire=now --all` を使用してすべてのreflogを期限切れにします。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:460
msgid ""
"Garbage collect all unreferenced objects with `git gc --prune=now` (or if "
"your git-gc is not new enough to support arguments to `--prune`, use `git "
"repack -ad; git prune` instead)."
msgstr "ガベージコレクションでは、参照されていないすべてのオブジェクトを `git gc --prune=now` で収集します(または、git-gcが `--prune` の引数をサポートするほど新しいバージョンでない場合は、代わりに `git repack -ad; git prune` を使用します)。"

#. type: Title -
#: ../Documentation-sedout/git-filter-branch.txt:463
#, no-wrap
msgid "PERFORMANCE"
msgstr "PERFORMANCE"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:467
msgid ""
"The performance of git-filter-branch is glacially slow; its design makes it "
"impossible for a backward-compatible implementation to ever be fast:"
msgstr ""
"git-filter-branch の性能は氷河の流れのように劇遅で、その設計上、後方互換性の"
"ある実装が高速になることはあり得ません:"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:473
msgid ""
"In editing files, git-filter-branch by design checks out each and every "
"commit as it existed in the original repo.  If your repo has `10^5` files "
"and `10^5` commits, but each commit only modifies five files, then git-"
"filter-branch will make you do `10^10` modifications, despite only having "
"(at most) `5*10^5` unique blobs."
msgstr "ファイルの編集では、git-filter-branchは設計上、元のリポジトリに存在していたすべてのコミットをチェックアウトします。 リポジトリに `10^5`(10万)個のファイルと `10^5`(10万)個のコミットがあり、それぞれのコミットで変更されるのが5個のファイルしか変更していない場合、git-filter-branchを使用すると、(最大)`5*10^5`(50万)個のユニークなブロブしかないにもかかわらず、あなたは `10^10`(百億)個の変更を行うハメになります。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:476
msgid ""
"If you try and cheat and try to make git-filter-branch only work on files "
"modified in a commit, then two things happen"
msgstr ""
"あなたがズルしようとして、コミットで変更されたファイルに対してのみgit-filter-"
"branchが機能するようにしようとすると、2つのことが起こります。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:482
msgid ""
"you run into problems with deletions whenever the user is simply trying to "
"rename files (because attempting to delete files that don't exist looks like "
"a no-op; it takes some chicanery to remap deletes across file renames when "
"the renames happen via arbitrary user-provided shell)"
msgstr "ユーザーが単にファイルの名前を変更しようとすると、削除の問題が発生します(存在しないファイルを削除しようとすると、何もしない(no-op)ように見えるためです。 ユーザーが提供する任意のシェルを介して名前の変更が行われる場合、ファイルの名前変更全体で削除を再マップするには、多少の手間がかかります)"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:488
msgid ""
"even if you succeed at the map-deletes-for-renames chicanery, you still "
"technically violate backward compatibility because users are allowed to "
"filter files in ways that depend upon topology of commits instead of "
"filtering solely based on file contents or names (though this has not been "
"observed in the wild)."
msgstr "あなたが map-deletes-for-renames という奇策によって成功した場合でも、技術的に下位互換性に違反します。なぜなら、ユーザーはファイルの内容や名前だけに基づいてフィルタリングするのではなく、コミットのトポロジに依存する方法でファイルをフィルタリングできるからです(ただし、実際にこれが観察されたわけではありません)。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:495
msgid ""
"Even if you don't need to edit files but only want to e.g. rename or remove "
"some and thus can avoid checking out each file (i.e. you can use --index-"
"filter), you still are passing shell snippets for your filters.  This means "
"that for every commit, you have to have a prepared git repo where those "
"filters can be run.  That's a significant setup."
msgstr "あなたはファイルを編集する必要はないが、たとえば 一部の名前を変更または削除すると、各ファイルのチェックアウトを回避できます(つまり、 `--index-filter` を使用できます)が、あなたのフィルターのシェルスニペットは引き続き渡されます。つまり、コミットごとに、これらのフィルターを実行できるgitリポジトリを準備する必要があります。 これは重要な設定です。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:507
msgid ""
"Further, several additional files are created or updated per commit by git-"
"filter-branch.  Some of these are for supporting the convenience functions "
"provided by git-filter-branch (such as map()), while others are for keeping "
"track of internal state (but could have also been accessed by user filters; "
"one of git-filter-branch's regression tests does so).  This essentially "
"amounts to using the filesystem as an IPC mechanism between git-filter-"
"branch and the user-provided filters.  Disks tend to be a slow IPC "
"mechanism, and writing these files also effectively represents a forced "
"synchronization point between separate processes that we hit with every "
"commit."
msgstr "さらに、git-filter-branchによって、コミットごとにいくつかの追加ファイルが作成または更新されます。 これらのいくつかは、git-filter-branchによって提供される便利な関数(map()など)をサポートするためのものであり、その他は内部状態を追跡するためのものです(ただし、ユーザーフィルターによってアクセスされる可能性もあります。 git-filter-branch の回帰(regression)テストはそうします)。 これは基本的に、ファイルシステムをgit-filter-branchとユーザー提供のフィルター間のIPCメカニズムとして使用することを意味します。 ディスクは遅いIPCメカニズムになりがちで、これらのファイルを書くことは、コミットするたびにぶつかる、別々のプロセス間の強制的な同期ポイントを効果的に表しています。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:513
msgid ""
"The user-provided shell commands will likely involve a pipeline of commands, "
"resulting in the creation of many processes per commit.  Creating and "
"running another process takes a widely varying amount of time between "
"operating systems, but on any platform it is very slow relative to invoking "
"a function."
msgstr "ユーザー提供のシェルコマンドには、コマンドのパイプラインが含まれる可能性が高く、コミットごとに多くのプロセスが作成されます。 別のプロセスを作成して実行するのにかかる時間はOSによって大きく異なりますが、どのプラットフォームでも関数を呼び出すのに比べると非常に遅くなります。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:519
msgid ""
"git-filter-branch itself is written in shell, which is kind of slow.  This "
"is the one performance issue that could be backward-compatibly fixed, but "
"compared to the above problems that are intrinsic to the design of git-"
"filter-branch, the language of the tool itself is a relatively minor issue."
msgstr "git-filter-branch自体はシェルで記述されているため、少し時間がかかります。 これは、下位互換性で修正できるパフォーマンスの問題の1つですが、git-filter-branchの設計に固有の上記の問題と比較すると、ツール自体の言語は比較的小さな問題です。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:530
msgid ""
"Side note: Unfortunately, people tend to fixate on the written-in-shell "
"aspect and periodically ask if git-filter-branch could be rewritten in "
"another language to fix the performance issues.  Not only does that ignore "
"the bigger intrinsic problems with the design, it'd help less than you'd "
"expect: if git-filter-branch itself were not shell, then the convenience "
"functions (map(), skip_commit(), etc) and the `--setup` argument could no "
"longer be executed once at the beginning of the program but would instead "
"need to be prepended to every user filter (and thus re-executed with every "
"commit)."
msgstr "補足: 残念ながら、人々はシェルで書かれた側面に固執し、パフォーマンスの問題を修正するためにgit-filter-branchを別の言語で書き直すことができるかどうかを定期的に尋ねる傾向があります。それは、設計に内在する大きな問題を無視することになるばかりか、期待するほどには役に立たないでしょう。 もし git-filter-branch 自体が shell でなかったら、便利な関数 (map(), skip_commit() など) と `--setup` 引数はプログラムの最初に一度実行するだけでよくなり、代わりにすべてのユーザーフィルターで前置する必要がありました(つまりコミットごとに再実行されることになります)。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:541
msgid ""
"The https://github.com/newren/git-filter-repo/[git filter-repo] tool is an "
"alternative to git-filter-branch which does not suffer from these "
"performance problems or the safety problems (mentioned below). For those "
"with existing tooling which relies upon git-filter-branch, 'git filter-repo' "
"also provides https://github.com/newren/git-filter-repo/blob/master/contrib/"
"filter-repo-demos/filter-lamely[filter-lamely], a drop-in git-filter-branch "
"replacement (with a few caveats).  While filter-lamely suffers from all the "
"same safety issues as git-filter-branch, it at least ameliorates the "
"performance issues a little."
msgstr "https://github.com/newren/git-filter-repo/[git filter-repo] ツールは、git-filter-branchの代替手段で、これらのパフォーマンスの問題や安全性の問題(後述)の影響を受けません。 git-filter-branchに依存する既存のツールを使用している場合、 `git filter-repo` は https://github.com/newren/git-filter-repo/blob/master/contrib/filter-repo-demos/filter-lamely[filter-lamely] も提供し、これは差し込み式の git-filter-branch の代替品です(いくつかの注意点があります)。 filter-lamelyは、git-filter-branchと同じ安全性の問題に悩まされていますが、少なくともパフォーマンスの問題を少し改善します。"

#. type: Title -
#: ../Documentation-sedout/git-filter-branch.txt:544
#, no-wrap
msgid "SAFETY"
msgstr "SAFETY"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:549
msgid ""
"git-filter-branch is riddled with gotchas resulting in various ways to "
"easily corrupt repos or end up with a mess worse than what you started with:"
msgstr ""
"git-filter-branch は、様々な方法で簡単にリポジトリを破損させたり、最初よりも"
"ひどい状態に陥らせたりするゴチャゴチャがたくさんあります:"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:563
msgid ""
"Someone can have a set of \"working and tested filters\" which they document "
"or provide to a coworker, who then runs them on a different OS where the "
"same commands are not working/tested (some examples in the git-filter-branch "
"manpage are also affected by this).  BSD vs. GNU userland differences can "
"really bite.  If lucky, error messages are spewed.  But just as likely, the "
"commands either don't do the filtering requested, or silently corrupt by "
"making some unwanted change.  The unwanted change may only affect a few "
"commits, so it's not necessarily obvious either.  (The fact that problems "
"won't necessarily be obvious means they are likely to go unnoticed until the "
"rewritten history is in use for quite a while, at which point it's really "
"hard to justify another flag-day for another rewrite.)"
msgstr "誰かが「動作してテストされたフィルター」のセットを持っている可能性があり、それを文書化するか、同僚に提供し、同僚は、同じコマンドが 動作/テスト されていない別のOSでそれらを実行したとします(git-filter-branchのmanページのいくつかの例もこの影響を受けます)。 BSDとGNUのユーザーランドの違いが本当に噛み付いてくる可能性があります(運が良ければ、エラーメッセージが表示されます)。 同様に、コマンドは要求されたフィルタリングを実行しないか、不要な変更を加えることで黙って破損させます。 不要な変更は、いくつかのコミットにのみ影響する可能性があるため、必ずしも明らかではありません。 (問題が明らかにならないということは、書き換えた履歴がしばらく使われていないと気づかない可能性が高く、気付いた時点で、もう一度書き換えるための正当な位置を探し出すのは本当に難しいのです。)"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:573
msgid ""
"Filenames with spaces are often mishandled by shell snippets since they "
"cause problems for shell pipelines.  Not everyone is familiar with find -"
"print0, xargs -0, git-ls-files -z, etc.  Even people who are familiar with "
"these may assume such flags are not relevant because someone else renamed "
"any such files in their repo back before the person doing the filtering "
"joined the project.  And often, even those familiar with handling arguments "
"with spaces may not do so just because they aren't in the mindset of "
"thinking about everything that could possibly go wrong."
msgstr "スペースを含むファイル名は、シェルパイプラインに問題を引き起こすため、シェルスニペットによって誤って処理されることがよくあります。 誰もが `find -print0` 、 `xargs -0` 、`git-ls-files -z` などに精通しているわけではありません。 これらに精通している人でさえ、フィルタリングを行っている人がプロジェクトに参加する前に、他の誰かが既にリポジトリ内のそのようなファイルの名前を変更済であったため、そのようなフラグは関係ないと考えるかもしれません。 そして、しばしば、スペースを使用した引数の処理に精通している人でさえ、うまくいかない可能性のあるすべてのことを考えるという考え方を持っていないという理由でそうしない場合があります。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:584
msgid ""
"Non-ascii filenames can be silently removed despite being in a desired "
"directory.  Keeping only wanted paths is often done using pipelines like "
"`git ls-files | grep -v ^WANTED_DIR/ | xargs git rm`.  ls-files will only "
"quote filenames if needed, so folks may not notice that one of the files "
"didn't match the regex (at least not until it's much too late).  Yes, "
"someone who knows about core.quotePath can avoid this (unless they have "
"other special characters like \\t, \\n, or \"), and people who use ls-files -"
"z with something other than grep can avoid this, but that doesn't mean they "
"will."
msgstr "非ASCIIファイル名は、目的のディレクトリにあるにもかかわらず、黙って削除できます。 必要なパスのみを保持することは、多くの場合、 `git ls-files | grep -v ^WANTED_DIR/ | xargs git rm` のようなパイプラインを使用して行われます。 ls-filesは必要な場合にのみファイル名を引用するため、ファイルの1つが正規表現と一致しなかったことに気付かない場合があります(少なくとも手遅れになるまでは)。 ええ、 core.quotePath を知っている人は(`\\t`, `\\n`, or `\"` などの他の特殊文字がなければ、)これを避けることができるし、 `ls-files -z` を grep 以外のもので使う人はこれを避けることができますが、だからといって避けてくれるとは限りません。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:591
msgid ""
"Similarly, when moving files around, one can find that filenames with non-"
"ascii or special characters end up in a different directory, one that "
"includes a double quote character.  (This is technically the same issue as "
"above with quoting, but perhaps an interesting different way that it can and "
"has manifested as a problem.)"
msgstr "同様に、ファイルを移動すると、ASCII以外の文字または特殊文字を含むファイル名が、二重引用符を含む別のディレクトリに配置されることがあります。 (これは技術的には上記のクォートと同じ問題ですが、おそらく興味深いことに、この問題は別の形で現れる可能性がありますし、実際に問題として現れています。)"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:600
msgid ""
"It's far too easy to accidentally mix up old and new history.  It's still "
"possible with any tool, but git-filter-branch almost invites it.  If lucky, "
"the only downside is users getting frustrated that they don't know how to "
"shrink their repo and remove the old stuff.  If unlucky, they merge old and "
"new history and end up with multiple \"copies\" of each commit, some of "
"which have unwanted or sensitive files and others which don't.  This comes "
"about in multiple different ways:"
msgstr "実に簡単に古い履歴と新しい履歴を誤って混同してしまいます。それはどのツールでも起こりうるのですが、git-filter-branch その多くをやらかします。 運が良ければ、唯一の欠点は、リポジトリを縮小して古いものを削除する方法がわからないことにユーザーが不満を感じることです。 運が悪ければ、古い履歴と新しい履歴がマージされ、各コミットの複数の「コピー」が作成されます。その中には、不要なファイルや機密ファイルが含まれるものと、含まれないものがあります。 これが複数の異なる方法で発生します。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:603
msgid ""
"the default to only doing a partial history rewrite ('--all' is not the "
"default and few examples show it)"
msgstr ""
"履歴の部分的な書き換えのみを行うデフォルト(`--all` はデフォルトではない。そし"
"て、これを示す例もほとんどない)。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:605
msgid "the fact that there's no automatic post-run cleanup"
msgstr "実行後の自動クリーンアップがないという事実"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:608
msgid ""
"the fact that --tag-name-filter (when used to rename tags) doesn't remove "
"the old tags but just adds new ones with the new name"
msgstr ""
"`--tag-name-filter` (タグの名前を変更するために使用される場合)は古いタグを削"
"除せず、新しい名前で新しいタグを追加するだけであるという事実"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:617
msgid ""
"the fact that little educational information is provided to inform users of "
"the ramifications of a rewrite and how to avoid mixing old and new history.  "
"For example, this man page discusses how users need to understand that they "
"need to rebase their changes for all their branches on top of new history "
"(or delete and reclone), but that's only one of multiple concerns to "
"consider.  See the \"DISCUSSION\" section of the git filter-repo manual page "
"for more details."
msgstr "書き換えの影響や、古い履歴と新しい履歴の混在を避ける方法をユーザーに知らせるための教育的な情報がほとんど提供されていないことです。 たとえば、この man ページでは、すべてのブランチの変更を新しい履歴の上にリベースする((あるいは削除して再クローンする)必要があることをユーザーが理解する必要があることを述べていますが、これは考慮すべき複数の懸念事項のうちのひとつにすぎません。 詳しくは、 `git filter-repo`  マニュアルページの「DISCUSSION」セクションをご覧ください。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:620
msgid ""
"Annotated tags can be accidentally converted to lightweight tags, due to "
"either of two issues:"
msgstr ""
"以下の2つの問題のいずれかが原因で、注釈付きタグが誤って軽量タグに変換される可"
"能性があります:"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:625
msgid ""
"Someone can do a history rewrite, realize they messed up, restore from the "
"backups in refs/original/, and then redo their git-filter-branch command.  "
"(The backup in refs/original/ is not a real backup; it dereferences tags "
"first.)"
msgstr "誰かが履歴の書き換えを行い、混乱したことに気づき、 `refs/original/` のバックアップから復元してから、git-filter-branchコマンドをやり直すことができます。 (`refs/original/` のバックアップは実際のバックアップではありません。最初にタグを逆参照します。)"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:630
msgid ""
"Running git-filter-branch with either --tags or --all in your <rev-list "
"options>.  In order to retain annotated tags as annotated, you must use --"
"tag-name-filter (and must not have restored from refs/original/ in a "
"previously botched rewrite)."
msgstr "<rev-list options> で `--tags` または `--all` を指定してgit-filter-branchを実行します。 注釈付きタグ(annotated tags)を注釈(annotated)として保持するには、 `--tag-name-filter` を使用する必要があります(以前に失敗した書き換えで `refs/original/` から復元してはいけません)。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:636
msgid ""
"Any commit messages that specify an encoding will become corrupted by the "
"rewrite; git-filter-branch ignores the encoding, takes the original bytes, "
"and feeds it to commit-tree without telling it the proper encoding.  (This "
"happens whether or not --msg-filter is used.)"
msgstr "エンコーディング指定のコミットメッセージは、書き換えによって破損します。 git-filter-branchはエンコーディングを無視し、元のバイトを取得して、適切なエンコーディングを通知せずにコミットツリーにフィードします。 (これは、 `--msg-filter` が使用されているかどうかに関係なく発生します。)"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:641
msgid ""
"Commit messages (even if they are all UTF-8) by default become corrupted due "
"to not being updated -- any references to other commit hashes in commit "
"messages will now refer to no-longer-extant commits."
msgstr "コミットメッセージ(それが全てUTF-8であっても)はデフォルトでは更新されないため破損します -- コミットメッセージ内の他のコミットハッシュへの参照は、もはや存在しないコミットを参照するようになります。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:652
msgid ""
"There are no facilities for helping users find what unwanted crud they "
"should delete, which means they are much more likely to have incomplete or "
"partial cleanups that sometimes result in confusion and people wasting time "
"trying to understand.  (For example, folks tend to just look for big files "
"to delete instead of big directories or extensions, and once they do so, "
"then sometime later folks using the new repository who are going through "
"history will notice a build artifact directory that has some files but not "
"others, or a cache of dependencies (node_modules or similar) which couldn't "
"have ever been functional since it's missing some files.)"
msgstr "ユーザーが削除すべき不純物を見つけるのを助ける機能はありません。つまり、不完全または部分的なクリーンアップが行われる可能性が高く、時には混乱を招き、人々は理解しようとして時間を浪費することになります。 (たとえば、ユーザーは大きなディレクトリや拡張子ではなく、削除すべき大きなファイルを探す傾向があり、いったんそうしてしまうと、後で新しいリポジトリを使って履歴を調べている人たちは、いくつかのファイルがあるのに他のファイルがないビルド成果物ディレクトリや、いくつかのファイルがないので機能しなかったはずの依存関係のキャッシュ((node_modules など)に気づくことになります)。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:655
msgid ""
"If --prune-empty isn't specified, then the filtering process can create "
"hoards of confusing empty commits"
msgstr ""
"`--prune-empty` が指定されていない場合、フィルタリングプロセスにより、混乱を"
"招く空のコミットが大量に発生する可能性があります"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:659
msgid ""
"If --prune-empty is specified, then intentionally placed empty commits from "
"before the filtering operation are also pruned instead of just pruning "
"commits that became empty due to filtering rules."
msgstr "`--prune-empty` が指定されている場合、フィルタリングルールによって空になったコミットを刈り込みするだけでなく、フィルタリング操作の前から意図的に配置された空のコミットも刈り込みされます。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:662
msgid ""
"If --prune-empty is specified, sometimes empty commits are missed and left "
"around anyway (a somewhat rare bug, but it happens...)"
msgstr ""
"`--prune-empty` が指定されている場合、空のコミットが失われたり、とにかく全部"
"残されることがあります(多少まれなバグですが、発生します...)"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:666
msgid ""
"A minor issue, but users who have a goal to update all names and emails in a "
"repository may be led to --env-filter which will only update authors and "
"committers, missing taggers."
msgstr "些細なことですが、リポジトリ内のすべての名前と電子メールを更新するという目標を持っているユーザーは、著者とコミッターのみを更新し、タガー(tagger)を見逃す `--env-filter` に誘導されるかもしれません。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:672
msgid ""
"If the user provides a --tag-name-filter that maps multiple tags to the same "
"name, no warning or error is provided; git-filter-branch simply overwrites "
"each tag in some undocumented pre-defined order resulting in only one tag at "
"the end.  (A git-filter-branch regression test requires this surprising "
"behavior.)"
msgstr "ユーザーが複数のタグを同じ名前にマップする `--tag-name-filter` を提供した場合、警告やエラーは提供されません。 git-filter-branchは、文書化されていない事前定義された順序で各タグを上書きするだけで、最後に1つのタグのみが生成されます。 (git-filter-branch回帰テストは、この驚くべき振る舞いがを要求します。)"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:675
msgid ""
"Also, the poor performance of git-filter-branch often leads to safety issues:"
msgstr ""
"また、 `git-filter-branch` のパフォーマンスが低いと、安全性の問題が発生するこ"
"とがよくあります:"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:692
msgid ""
"Coming up with the correct shell snippet to do the filtering you want is "
"sometimes difficult unless you're just doing a trivial modification such as "
"deleting a couple files.  Unfortunately, people often learn if the snippet "
"is right or wrong by trying it out, but the rightness or wrongness can vary "
"depending on special circumstances (spaces in filenames, non-ascii "
"filenames, funny author names or emails, invalid timezones, presence of "
"grafts or replace objects, etc.), meaning they may have to wait a long time, "
"hit an error, then restart.  The performance of git-filter-branch is so bad "
"that this cycle is painful, reducing the time available to carefully re-"
"check (to say nothing about what it does to the patience of the person doing "
"the rewrite even if they do technically have more time available).  This "
"problem is extra compounded because errors from broken filters may not be "
"shown for a long time and/or get lost in a sea of output.  Even worse, "
"broken filters often just result in silent incorrect rewrites."
msgstr "あなたが望むフィルタリングを行うための正しいシェルスニペットを考え出すことは、いくつかのファイルを削除するような些細な修正を行うのでない限り、時に困難なことです。 しかし、その正否は特殊な状況((ファイル名にスペースがある、非ASCIIのファイル名、おかしな著者名やメール、無効なタイムゾーン、grafts や replace オブジェクトがあるなど)によって異なるため、長い間待ってエラーになり、再起動しなければならないことがあります。 git-filter-branch の性能は非常に悪いので、このサイクルは苦痛であり、慎重に再チェックする時間が減ってしまいます (たとえ技術的に余裕があったとしても、書き直す人の忍耐力に影響を与えることは言うまでもありません)。 壊れたフィルターによるエラーは長い間表示されなかったり、出力の海に紛れたりするので、この問題はさらに深刻になります。 さらに悪いことに、フィルターが壊れていると、ただ黙って間違った書き直しをすることになりがちです。"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:700
msgid ""
"To top it all off, even when users finally find working commands, they "
"naturally want to share them.  But they may be unaware that their repo "
"didn't have some special cases that someone else's does.  So, when someone "
"else with a different repository runs the same commands, they get hit by the "
"problems above.  Or, the user just runs commands that really were vetted for "
"special cases, but they run it on a different OS where it doesn't work, as "
"noted above."
msgstr "さらに言えば、ユーザーがようやく動作するコマンドを見つけたら、それを共有したいと思うのは自然なことです。 しかし、自分のリポジトリにはない特別なケースが他の人のリポジトリにはあることに気づいていないかもしれません。 そのため、異なるリポジトリを持つ他の人が同じコマンドを実行すると、上記のような問題に見舞われることになります。 あるいは、そのユーザーは、本当に特殊なケースを想定して吟味されたコマンドを実行しているだけなのですが、それを別のOSで実行すると、上に書いたように、うまくいかないのです。"

#. type: Title -
#: ../Documentation-sedout/git-filter-branch.txt:702
#, no-wrap
msgid "GIT"
msgstr "GIT"

#. type: Plain text
#: ../Documentation-sedout/git-filter-branch.txt:703
msgid "Part of the linkgit:git[1] suite"
msgstr "Part of the linkgit:git[1] suite"
