# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: git-docs-ja 2.0\n"
"POT-Creation-Date: 2022-09-24 21:41+0900\n"
"PO-Revision-Date: 2022-10-01 16:31+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: ../Documentation-sedout/git-checkout.txt:2
#, no-wrap
msgid "git-checkout(1)"
msgstr "git-checkout(1)"

#. type: Title -
#: ../Documentation-sedout/git-checkout.txt:5
#, no-wrap
msgid "NAME"
msgstr "NAME"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:7
msgid "git-checkout - Switch branches or restore working tree files"
msgstr ""
"git-checkout - ブランチの切り替え、または作業ツリーファイルの復元を行います。"

#. type: Title -
#: ../Documentation-sedout/git-checkout.txt:9
#, no-wrap
msgid "SYNOPSIS"
msgstr "SYNOPSIS"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:18
#, no-wrap
msgid ""
"'git checkout' [-q] [-f] [-m] [<branch>]\n"
"'git checkout' [-q] [-f] [-m] --detach [<branch>]\n"
"'git checkout' [-q] [-f] [-m] [--detach] <commit>\n"
"'git checkout' [-q] [-f] [-m] [[-b|-B|--orphan] <new-branch>] [<start-point>]\n"
"'git checkout' [-f|--ours|--theirs|-m|--conflict=<style>] [<tree-ish>] [--] <pathspec>...\n"
"'git checkout' [-f|--ours|--theirs|-m|--conflict=<style>] [<tree-ish>] --pathspec-from-file=<file> [--pathspec-file-nul]\n"
"'git checkout' (-p|--patch) [<tree-ish>] [--] [<pathspec>...]\n"
msgstr ""
"'git checkout' [-q] [-f] [-m] [<branch>]\n"
"'git checkout' [-q] [-f] [-m] --detach [<branch>]\n"
"'git checkout' [-q] [-f] [-m] [--detach] <commit>\n"
"'git checkout' [-q] [-f] [-m] [[-b|-B|--orphan] <new-branch>] [<start-point>]\n"
"'git checkout' [-f|--ours|--theirs|-m|--conflict=<style>] [<tree-ish>] [--] <pathspec>...\n"
"'git checkout' [-f|--ours|--theirs|-m|--conflict=<style>] [<tree-ish>] --pathspec-from-file=<file> [--pathspec-file-nul]\n"
"'git checkout' (-p|--patch) [<tree-ish>] [--] [<pathspec>...]\n"

#. type: Title -
#: ../Documentation-sedout/git-checkout.txt:20
#, no-wrap
msgid "DESCRIPTION"
msgstr "DESCRIPTION"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:25
msgid ""
"Updates files in the working tree to match the version in the index or the "
"specified tree.  If no pathspec was given, 'git checkout' will also update "
"`HEAD` to set the specified branch as the current branch."
msgstr ""
"作業ツリー内のファイルを、インデックスまたは指定されたツリー内のバージョンと"
"一致するように更新します。 pathspecが指定されていない場合、 `git checkout` "
"は `HEAD` も更新して、指定されたブランチを現在のブランチとして設定します。"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:26
#, no-wrap
msgid "'git checkout' [<branch>]"
msgstr "`git checkout [<branch>]`"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:32
msgid ""
"To prepare for working on `<branch>`, switch to it by updating the index and "
"the files in the working tree, and by pointing `HEAD` at the branch. Local "
"modifications to the files in the working tree are kept, so that they can be "
"committed to the `<branch>`."
msgstr ""
"`<branch>` での作業の準備をするために、インデックスと作業ツリーのファイルを更"
"新し、 `HEAD` をブランチに向けることで、`<branch>` に切り替わります。作業ツ"
"リーのファイルに対するローカルな変更は保持され、 `<branch>` にコミットできる"
"ようになります。"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:36
msgid ""
"If `<branch>` is not found but there does exist a tracking branch in exactly "
"one remote (call it `<remote>`) with a matching name and `--no-guess` is not "
"specified, treat as equivalent to"
msgstr ""
"`<branch>` が見つからないが、一致する名前を持つ1つのリモート(`<remote>` と呼"
"びます)に追跡ブランチが存在し、` --no-guess` が指定されていない場合は、以下と"
"同等として扱います"

#. type: delimited block -
#: ../Documentation-sedout/git-checkout.txt:39
#: ../Documentation-sedout/git-checkout.txt:185
#, no-wrap
msgid "$ git checkout -b <branch> --track <remote>/<branch>\n"
msgstr "$ git checkout -b <branch> --track <remote>/<branch>\n"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:45
msgid ""
"You could omit `<branch>`, in which case the command degenerates to \"check "
"out the current branch\", which is a glorified no-op with rather expensive "
"side-effects to show only the tracking information, if exists, for the "
"current branch."
msgstr ""
"あなたは `<branch>` を省略できます。この場合、コマンドは「現在のブランチを"
"チェックアウトする」ことになり、(もし存在すれば)現在のブランチの追跡情報だけ"
"を表示するという、かなり高価な副作用のある、見栄えの良いノー・オペレーション"
"(no-op)となります。"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:46
#, no-wrap
msgid "'git checkout' -b|-B <new-branch> [<start-point>]"
msgstr "'git checkout' -b|-B <new-branch> [<start-point>]"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:54
msgid ""
"Specifying `-b` causes a new branch to be created as if linkgit:git-"
"branch[1] were called and then checked out.  In this case you can use the `--"
"track` or `--no-track` options, which will be passed to 'git branch'.  As a "
"convenience, `--track` without `-b` implies branch creation; see the "
"description of `--track` below."
msgstr ""
"`-b` を指定すると、linkgit:git-branch[1] が呼び出されてチェックアウトされたか"
"のように新しいブランチが作成されます。 この場合、 `git branch` に渡される `--"
"track` または `--no-track` オプションを使用できます。便利にするために `-b` の"
"ない `--track` はブランチの作成を意味します。後述の `--track` の説明を参照し"
"てください。"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:57
msgid ""
"If `-B` is given, `<new-branch>` is created if it doesn't exist; otherwise, "
"it is reset. This is the transactional equivalent of"
msgstr "`-B` を指定すると、存在しない場合は `<new-branch>` が作成されます。 それ以外の場合はリセットされます。これは、以下の取引(transaction)と同等です"

#. type: delimited block -
#: ../Documentation-sedout/git-checkout.txt:61
#, no-wrap
msgid ""
"$ git branch -f <branch> [<start-point>]\n"
"$ git checkout <branch>\n"
msgstr ""
"$ git branch -f <branch> [<start-point>]\n"
"$ git checkout <branch>\n"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:65
msgid ""
"that is to say, the branch is not reset/created unless \"git checkout\" is "
"successful."
msgstr ""
"つまり、 `git checkout` が成功しない限り、ブランチは リセット/作成 されませ"
"ん。"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:66
#, no-wrap
msgid "'git checkout' --detach [<branch>]"
msgstr "`git checkout --detach [<branch>]`"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:67
#, no-wrap
msgid "'git checkout' [--detach] <commit>"
msgstr "`git checkout [--detach] <commit>`"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:75
msgid ""
"Prepare to work on top of `<commit>`, by detaching `HEAD` at it (see "
"\"DETACHED HEAD\" section), and updating the index and the files in the "
"working tree.  Local modifications to the files in the working tree are "
"kept, so that the resulting working tree will be the state recorded in the "
"commit plus the local modifications."
msgstr ""
"`<commit>` の上で作業する準備をします。その上で、 `HEAD` を切り離し"
"(「DETACHED HEAD」セクションを参照)、作業ツリーのインデックスとファイルを更新"
"します。 作業ツリー内のファイルへのローカルの変更は保持されるため、結果の作業"
"ツリーは、コミットに記録された状態と、ローカルの変更になります。"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:79
msgid ""
"When the `<commit>` argument is a branch name, the `--detach` option can be "
"used to detach `HEAD` at the tip of the branch (`git checkout <branch>` "
"would check out that branch without detaching `HEAD`)."
msgstr ""
"`<commit>` 引数がブランチ名の場合、 `--detach` オプションを使用して、ブランチ"
"の先端にある `HEAD` をデタッチできます(`git checkout <branch>` は、 `HEAD` を"
"デタッチせずにそのブランチをチェックアウトします)。"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:81
msgid "Omitting `<branch>` detaches `HEAD` at the tip of the current branch."
msgstr ""
"`<branch>` を省略すると、現在のブランチの先端にある `HEAD` が切り離されます。"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:82
#, no-wrap
msgid "'git checkout' [-f|--ours|--theirs|-m|--conflict=<style>] [<tree-ish>] [--] <pathspec>..."
msgstr "`git checkout [-f|--ours|--theirs|-m|--conflict=<style>] [<tree-ish>] [--] <pathspec>...`"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:83
#, no-wrap
msgid "'git checkout' [-f|--ours|--theirs|-m|--conflict=<style>] [<tree-ish>] --pathspec-from-file=<file> [--pathspec-file-nul]"
msgstr "`git checkout [-f|--ours|--theirs|-m|--conflict=<style>] [<tree-ish>] --pathspec-from-file=<file> [--pathspec-file-nul]`"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:90
msgid ""
"Overwrite the contents of the files that match the pathspec.  When the "
"`<tree-ish>` (most often a commit) is not given, overwrite working tree with "
"the contents in the index.  When the `<tree-ish>` is given, overwrite both "
"the index and the working tree with the contents at the `<tree-ish>`."
msgstr ""
"pathspecにマッチするファイルの内容を上書きします。 `<tree-ish>` (ほとんどの場"
"合コミット)が指定されていない場合は、作業ツリーをインデックスの内容で上書きし"
"ます。 `<tree-ish>` が指定された場合、インデックスと作業ツリーの両方を "
"`<tree-ish>` の内容で上書きします。"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:98
msgid ""
"The index may contain unmerged entries because of a previous failed merge.  "
"By default, if you try to check out such an entry from the index, the "
"checkout operation will fail and nothing will be checked out.  Using `-f` "
"will ignore these unmerged entries.  The contents from a specific side of "
"the merge can be checked out of the index by using `--ours` or `--theirs`.  "
"With `-m`, changes made to the working tree file can be discarded to re-"
"create the original conflicted merge result."
msgstr ""
"以前にマージに失敗したため、インデックスがマージされていないエントリを含んで"
"いる可能性があります。デフォルトでは、インデックスからそのようなエントリを"
"チェックアウトしようとすると、チェックアウト操作は失敗し、何もチェックアウト"
"されません。 `-f` を使用すると、これらのマージされていないエントリは無視され"
"ます。マージの特定の側からのコンテンツは、 `--ours` または `--theirs` を使用"
"してインデックスからチェックアウトできます。 `-m` を使用すると、作業ツリー"
"ファイルに加えられた変更を破棄して、元の競合するマージ結果を再作成できます。"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:99
#, no-wrap
msgid "'git checkout' (-p|--patch) [<tree-ish>] [--] [<pathspec>...]"
msgstr "`git checkout (-p|--patch) [<tree-ish>] [--] [<pathspec>...]`"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:104
msgid ""
"This is similar to the previous mode, but lets you use the interactive "
"interface to show the \"diff\" output and choose which hunks to use in the "
"result.  See below for the description of `--patch` option."
msgstr ""
"これは以前のモードと似ていますが、対話的インターフェイスを使用して「diff」出"
"力を表示し、その結果において使用するハンクを選択できます。 `--patch` オプショ"
"ンの説明については、以下を参照してください。"

#. type: Title -
#: ../Documentation-sedout/git-checkout.txt:106
#, no-wrap
msgid "OPTIONS"
msgstr "OPTIONS"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:107
#, no-wrap
msgid "`-q`"
msgstr "`-q`"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:108
#, no-wrap
msgid "`--quiet`"
msgstr "`--quiet`"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:110
msgid "Quiet, suppress feedback messages."
msgstr "静かにします。フィードバックメッセージを抑制します。"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:111
#, no-wrap
msgid "`--progress`"
msgstr "`--progress`"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:112
#, no-wrap
msgid "`--no-progress`"
msgstr "`--no-progress`"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:117
msgid ""
"Progress status is reported on the standard error stream by default when it "
"is attached to a terminal, unless `--quiet` is specified. This flag enables "
"progress reporting even if not attached to a terminal, regardless of `--"
"quiet`."
msgstr ""
"`--quiet` が指定されていない限り、進行状況は、端末に接続されている場合、デ"
"フォルトで標準エラーストリームに報告されます。 このフラグは、 `--quiet` に関"
"係なく、端末に接続されていない場合でも進行状況のレポートを有効にします。"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:118
#, no-wrap
msgid "`-f`"
msgstr "`-f`"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:119
#, no-wrap
msgid "`--force`"
msgstr "`--force`"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:124
msgid ""
"When switching branches, proceed even if the index or the working tree "
"differs from `HEAD`, and even if there are untracked files in the way.  This "
"is used to throw away local changes and any untracked files or directories "
"that are in the way."
msgstr "ブランチを切り替えるとき、インデックスや作業ツリーが `HEAD` と異なっていても、また、邪魔な未追跡のファイルがあっても進行します。 これは、ローカルの変更や、邪魔な未追跡のファイルやディレクトリを捨てるために使用します。"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:127
msgid ""
"When checking out paths from the index, do not fail upon unmerged entries; "
"instead, unmerged entries are ignored."
msgstr ""
"インデックスからパスをチェックアウトするときは、マージされていないエントリで"
"エラーにしないでください。代わりに、マージされていないエントリは無視されま"
"す。"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:128
#, no-wrap
msgid "`--ours`"
msgstr "`--ours`"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:129
#, no-wrap
msgid "`--theirs`"
msgstr "`--theirs`"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:132
msgid ""
"When checking out paths from the index, check out stage #2 ('ours') or #3 "
"('theirs') for unmerged paths."
msgstr "インデックスからパスをチェックアウトするときは、ステージ#2(`ours`)または#3(`theirs`)でマージされていないパスをチェックアウトしてください。"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:137
msgid ""
"Note that during `git rebase` and `git pull --rebase`, 'ours' and 'theirs' "
"may appear swapped; `--ours` gives the version from the branch the changes "
"are rebased onto, while `--theirs` gives the version from the branch that "
"holds your work that is being rebased."
msgstr ""
"注意: `git rebase` と `git pull --rebase` での作業中、「ours」と「theirs」が"
"入れ替わっているように見える場合があることに注意してください。 `--ours` は、"
"変更がリベースされるブランチからのバージョンを提供し、 `--theirs` は、リベー"
"スされる作業を保持するブランチからのバージョンを提供します。"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:147
msgid ""
"This is because `rebase` is used in a workflow that treats the history at "
"the remote as the shared canonical one, and treats the work done on the "
"branch you are rebasing as the third-party work to be integrated, and you "
"are temporarily assuming the role of the keeper of the canonical history "
"during the rebase.  As the keeper of the canonical history, you need to view "
"the history from the remote as `ours` (i.e. \"our shared canonical history"
"\"), while what you did on your side branch as `theirs` (i.e. \"one "
"contributor's work on top of it\")."
msgstr ""
"これは、リモートでの履歴を共有の正規の履歴として扱うワークフローで `rebase` "
"が使用されているためです。リベースするブランチで行われた作業を、統合される"
"サードパーティの作業として扱います。そして、あなたは一時的にリベース中に正規"
"の歴史の管理者の役割を引き受けています。正規の履歴の管理者として、リモートか"
"らの履歴を「私たち」(ours; つまり、「私達の共有された正規の履歴」)として表示"
"する必要があり、サイドブランチで行ったことは「彼ら」(theirs;つまり「その上で"
"の貢献者の作品」)として表示する必要があります。"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:148
#, no-wrap
msgid "`-b <new-branch>`"
msgstr "`-b <new-branch>`"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:151
msgid ""
"Create a new branch named `<new-branch>` and start it at `<start-point>`; "
"see linkgit:git-branch[1] for details."
msgstr "`<new-branch>` という名前の新しいブランチを作成し、 `<start-point>` から開始します。詳細については、 linkgit:git-branch[1] を参照してください。"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:152
#, no-wrap
msgid "`-B <new-branch>`"
msgstr "`-B <new-branch>`"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:157
msgid ""
"Creates the branch `<new-branch>` and start it at `<start-point>`; if it "
"already exists, then reset it to `<start-point>`. This is equivalent to "
"running \"git branch\" with \"-f\"; see linkgit:git-branch[1] for details."
msgstr "ブランチ `<new-branch>` を作成し、 `<start-point>` から開始します。すでに存在する場合は、 `<start-point>` にリセットします。 これは、 `-f` を伴って `git branch` を実行するのと同じです。 詳細については、 linkgit:git-branch[1] を参照してください。"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:158
#, no-wrap
msgid "`-t`"
msgstr "`-t`"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:159
#, no-wrap
msgid "`--track[=(direct|inherit)]`"
msgstr "`--track[=(direct|inherit)]`"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:162
msgid ""
"When creating a new branch, set up \"upstream\" configuration. See \"--track"
"\" in linkgit:git-branch[1] for details."
msgstr ""
"新しいブランチを作成するときは、「アップストリーム構成」(upstream "
"configuration)をセットアップします。 詳細については、 linkgit:git-branch[1]"
"の `--track` を参照してください。"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:172
msgid ""
"If no `-b` option is given, the name of the new branch will be derived from "
"the remote-tracking branch, by looking at the local part of the refspec "
"configured for the corresponding remote, and then stripping the initial part "
"up to the \"*\".  This would tell us to use `hack` as the local branch when "
"branching off of `origin/hack` (or `remotes/origin/hack`, or even `refs/"
"remotes/origin/hack`).  If the given name has no slash, or the above "
"guessing results in an empty name, the guessing is aborted.  You can "
"explicitly give a name with `-b` in such a case."
msgstr ""
"`-b`オプションが指定されていない場合、新しいブランチの名前は、対応するリモー"
"ト用に構成されたrefspecのローカル部分を調べ、最初の部分を `*` まで削除するこ"
"とにより、リモート追跡ブランチから派生させます。これにより、 `origin/hack` "
"(または `remotes/origin/hack`、 あるいは `refs/remotes/origin/hack`) から分岐"
"するときに、ローカルブランチとして `hack` を使用するように指示されます。指定"
"された名前にスラッシュ(`/`)がない場合、または上記の推測の結果が空の名前になる"
"場合、推測は中止されます。このような場合は、 `-b` を使用して明示的に名前を付"
"けることができます。"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:173
#, no-wrap
msgid "`--no-track`"
msgstr "`--no-track`"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:176
msgid ""
"Do not set up \"upstream\" configuration, even if the `branch."
"autoSetupMerge` configuration variable is true."
msgstr ""
"`branch.autoSetupMerge` 構成変数がtrueであっても、「アップストリーム構成」を"
"設定しないでください。"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:177
#, no-wrap
msgid "`--guess`"
msgstr "`--guess`"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:178
#, no-wrap
msgid "`--no-guess`"
msgstr "`--no-guess`"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:182
msgid ""
"If `<branch>` is not found but there does exist a tracking branch in exactly "
"one remote (call it `<remote>`) with a matching name, treat as equivalent to"
msgstr ""
"`<branch>`が見つからないが、名前が一致する1つのリモート( `<remote>`と呼びま"
"す)に追跡ブランチが存在する場合は、以下と同等としてあつかいます"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:195
msgid ""
"If the branch exists in multiple remotes and one of them is named by the "
"`checkout.defaultRemote` configuration variable, we'll use that one for the "
"purposes of disambiguation, even if the `<branch>` isn't unique across all "
"remotes. Set it to e.g. `checkout.defaultRemote=origin` to always checkout "
"remote branches from there if `<branch>` is ambiguous but exists on the "
"'origin' remote. See also `checkout.defaultRemote` in linkgit:git-config[1]."
msgstr "ブランチが複数のリモートに存在し、そのうちの1つが `checkout.defaultRemote` 構成変数で名付けられている場合、 `<branch>` がすべてのリモートで一意でなくても、曖昧さ回避の目的でそのブランチを使用します。例えば `checkout.defaultRemote=origin` と設定すると、 `<branch>` があいまいだが `origin` リモート上に存在する場合、常にそこからリモートブランチをチェックアウトします。 linkgit:git-config[1] の `checkout.defaultRemote` も参照してください。"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:197
msgid "`--guess` is the default behavior. Use `--no-guess` to disable it."
msgstr ""
"`--guess` がデフォルトの振る舞いです。無効にするには、 `--no-guess` を使用し"
"ます。"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:200
msgid ""
"The default behavior can be set via the `checkout.guess` configuration "
"variable."
msgstr ""
"デフォルトの振る舞いは、`checkout.guess` 構成変数を介して設定できます。"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:201
#, no-wrap
msgid "`-l`"
msgstr "`-l`"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:204
msgid "Create the new branch's reflog; see linkgit:git-branch[1] for details."
msgstr ""
"新しいブランチのreflogを作成します。詳細については、 linkgit:git-branch[1] を"
"参照してください。"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:205
#, no-wrap
msgid "`-d`"
msgstr "`-d`"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:206
#, no-wrap
msgid "`--detach`"
msgstr "`--detach`"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:212
msgid ""
"Rather than checking out a branch to work on it, check out a commit for "
"inspection and discardable experiments.  This is the default behavior of "
"`git checkout <commit>` when `<commit>` is not a branch name.  See the "
"\"DETACHED HEAD\" section below for details."
msgstr ""
"ブランチをチェックアウトして作業するのではなく、検査と破棄可能な実験のための"
"コミットをチェックアウトします。 これは、 `<commit>` がブランチ名でない場合"
"の、 `git checkout <commit>` のデフォルトの動作です。 詳細については、以下の"
"「DETACHED HEAD」セクションを参照してください。"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:213
#, no-wrap
msgid "`--orphan <new-branch>`"
msgstr "`--orphan <new-branch>`"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:219
msgid ""
"Create a new 'orphan' branch, named `<new-branch>`, started from `<start-"
"point>` and switch to it.  The first commit made on this new branch will "
"have no parents and it will be the root of a new history totally "
"disconnected from all the other branches and commits."
msgstr "`<start-point>` から開始された `<new-branch>` という名前の新しい「孤立した」(orphan) ブランチを作成し、それに切り替えます。 この新しいブランチで行われた最初のコミットには親がなく、他のすべてのブランチとコミットから完全に切断された新しい履歴のルートになります。"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:224
msgid ""
"The index and the working tree are adjusted as if you had previously run "
"`git checkout <start-point>`.  This allows you to start a new history that "
"records a set of paths similar to `<start-point>` by easily running `git "
"commit -a` to make the root commit."
msgstr "インデックスと作業ツリーは、以前に `git checkout <start-point>` を実行した場合と同じように調整されます。これにより、 ルート(root)をコミットするために容易に `git commit -a` 実行をでき、 `<start-point>` と同様のパスのセットを記録する新しい履歴を開始できます。"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:230
msgid ""
"This can be useful when you want to publish the tree from a commit without "
"exposing its full history. You might want to do this to publish an open "
"source branch of a project whose current tree is \"clean\", but whose full "
"history contains proprietary or otherwise encumbered bits of code."
msgstr ""
"これは、ツリーの完全な履歴を公開せずにコミットからツリーを公開する場合に便利"
"です。これは、現在のツリーが「クリーン」であるが、完全な履歴にはプロプライエ"
"タリなコードやその他の邪魔なコードが含まれているプロジェクトの、オープンソー"
"スブランチを公開するためにこれを行うことができます。"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:237
msgid ""
"If you want to start a disconnected history that records a set of paths that "
"is totally different from the one of `<start-point>`, then you should clear "
"the index and the working tree right after creating the orphan branch by "
"running `git rm -rf .` from the top level of the working tree.  Afterwards "
"you will be ready to prepare your new files, repopulating the working tree, "
"by copying them from elsewhere, extracting a tarball, etc."
msgstr "`<start-point>` のパスとはまったく異なるパスのセットを記録する切断された履歴を開始する場合は、 作業ツリーの最上位から `git rm -rf .` を実行して、 孤立したブランチ(orphan branch)を作成した直後にインデックスと作業ツリーをクリアする必要があります。 その後に、 新しいファイルを準備したり、 作業ツリーを再作成したり、 他の場所からファイルをコピーしたり、 tarballを抽出したりする準備が整います。"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:238
#, no-wrap
msgid "`--ignore-skip-worktree-bits`"
msgstr "`--ignore-skip-worktree-bits`"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:243
msgid ""
"In sparse checkout mode, `git checkout -- <paths>` would update only entries "
"matched by `<paths>` and sparse patterns in `$GIT_DIR/info/sparse-checkout`. "
"This option ignores the sparse patterns and adds back any files in `<paths>`."
msgstr ""
"スパースチェックアウトモード(sparse checkout mode)では、 `git checkout -- "
"<paths>` は、 `<paths>` と一致するエントリと、 `$GIT_DIR/info/sparse-"
"checkout` のスパースパターン(sparse patterns)のみを更新します。このオプション"
"は、スパースパターンを無視し、 `<paths>` 内のファイルを追加し直します。"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:244
#, no-wrap
msgid "`-m`"
msgstr "`-m`"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:245
#, no-wrap
msgid "`--merge`"
msgstr "`--merge`"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:254
msgid ""
"When switching branches, if you have local modifications to one or more "
"files that are different between the current branch and the branch to which "
"you are switching, the command refuses to switch branches in order to "
"preserve your modifications in context.  However, with this option, a three-"
"way merge between the current branch, your working tree contents, and the "
"new branch is done, and you will be on the new branch."
msgstr ""
"ブランチを切り替えるときに、現在のブランチと切り替え先のブランチの間で異なる1"
"つ以上のファイルにローカルの変更がある場合、コマンドは、コンテキストでの変更"
"を保持するためにブランチの切り替えを拒否します。ただし、このオプションを使用"
"すると、現在のブランチ、作業ツリーの内容、および新しいブランチの間の3方向の"
"マージを実行してから新しいブランチに移動します。"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:259
msgid ""
"When a merge conflict happens, the index entries for conflicting paths are "
"left unmerged, and you need to resolve the conflicts and mark the resolved "
"paths with `git add` (or `git rm` if the merge should result in deletion of "
"the path)."
msgstr ""
"マージの競合が発生すると、競合するパスのインデックスエントリはマージされない"
"ままになります。競合を解決し、解決されたパスを `git add`（またはマージによっ"
"てパスが削除される場合は `git rm`)でマークする必要があります。"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:262
msgid ""
"When checking out paths from the index, this option lets you recreate the "
"conflicted merge in the specified paths."
msgstr ""
"インデックスからパスをチェックアウトする場合、このオプションを使用すると、指"
"定したパスで競合するマージを再作成できます。"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:264
msgid "When switching branches with `--merge`, staged changes may be lost."
msgstr ""
"`--merge` でブランチを切り替えると、ステージされた変更が失われる可能性があり"
"ます。"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:265
#, no-wrap
msgid "`--conflict=<style>`"
msgstr "`--conflict=<style>`"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:270
msgid ""
"The same as `--merge` option above, but changes the way the conflicting "
"hunks are presented, overriding the `merge.conflictStyle` configuration "
"variable.  Possible values are \"merge\" (default), \"diff3\", and "
"\"zdiff3\"."
msgstr "上記の `--merge` オプションと同一ですが、競合するハンクの表示方法を変更し、 `merge.conflictStyle` 構成変数をオーバーライドします。 可能な値は `merge`(デフォルト)と `diff3` と `zdiff3` です。"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:271
#, no-wrap
msgid "`-p`"
msgstr "`-p`"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:272
#, no-wrap
msgid "`--patch`"
msgstr "`--patch`"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:277
msgid ""
"Interactively select hunks in the difference between the `<tree-ish>` (or "
"the index, if unspecified) and the working tree.  The chosen hunks are then "
"applied in reverse to the working tree (and if a `<tree-ish>` was specified, "
"the index)."
msgstr ""
"`<tree-ish>` (または指定されていない場合はインデックス)と作業ツリーの間の差分"
"でハンクを対話的に選択します。選択されたハンクは、作業ツリー(`<tree-ish>` が"
"指定されている場合はインデックス)に逆に適用されます。"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:281
msgid ""
"This means that you can use `git checkout -p` to selectively discard edits "
"from your current working tree. See the ``Interactive Mode'' section of "
"linkgit:git-add[1] to learn how to operate the `--patch` mode."
msgstr ""
"これは、 `git checkout -p` を使用して、現在の作業ツリーから編集を選択的に破棄"
"できることを意味します。 `--patch` モードの操作方法については、 linkgit:git-"
"add[1] の「Interactive Mode」セクションを参照してください。"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:284
msgid ""
"Note that this option uses the no overlay mode by default (see also `--"
"overlay`), and currently doesn't support overlay mode."
msgstr ""
"注意: このオプションはデフォルトでオーバーレイなしモードを使用します(`--"
"overlay` も参照)。現在はオーバーレイモードをサポートしていないことに注意して"
"ください。"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:285
#, no-wrap
msgid "`--ignore-other-worktrees`"
msgstr "`--ignore-other-worktrees`"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:290
msgid ""
"`git checkout` refuses when the wanted ref is already checked out by another "
"worktree. This option makes it check the ref out anyway. In other words, the "
"ref can be held by more than one worktree."
msgstr ""
"`git checkout` は、必要なrefが別のワークツリーによってすでにチェックアウトさ"
"れている場合に拒否します。このオプションを使用すると、とにかくrefをチェックア"
"ウトできます。つまり、refを複数のワークツリーで保持できます。"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:291
#, no-wrap
msgid "`--overwrite-ignore`"
msgstr "`--overwrite-ignore`"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:292
#, no-wrap
msgid "`--no-overwrite-ignore`"
msgstr "`--no-overwrite-ignore`"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:296
msgid ""
"Silently overwrite ignored files when switching branches. This is the "
"default behavior. Use `--no-overwrite-ignore` to abort the operation when "
"the new branch contains ignored files."
msgstr ""
"ブランチを切り替えるときに、無視したファイルを黙って上書きします。これがデ"
"フォルトの動作です。新しいブランチに無視したファイルが含まれている場合に操作"
"を中止するには、 `--no-overwrite-ignore` を使用します。"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:297
#, no-wrap
msgid "`--recurse-submodules`"
msgstr "`--recurse-submodules`"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:298
#, no-wrap
msgid "`--no-recurse-submodules`"
msgstr "`--no-recurse-submodules`"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:306
msgid ""
"Using `--recurse-submodules` will update the content of all active "
"submodules according to the commit recorded in the superproject. If local "
"modifications in a submodule would be overwritten the checkout will fail "
"unless `-f` is used. If nothing (or `--no-recurse-submodules`)  is used, "
"submodules working trees will not be updated.  Just like linkgit:git-"
"submodule[1], this will detach `HEAD` of the submodule."
msgstr ""
"`--recurse-submodules` を使用すると、スーパープロジェクトに記録されたコミット"
"に従って、すべてのアクティブなサブモジュールのコンテンツが更新されます。サブ"
"モジュールのローカル変更が上書きされる場合、 `-f` が使用されない限り、チェッ"
"クアウトは失敗します。何も使用されていない場合(または `--no-recurse-"
"submodules`)、サブモジュールの作業ツリーは更新されません。 linkgit:git-"
"submodule[1] と同様に、これはサブモジュールの `HEAD` を切り離します(detach)。"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:307
#, no-wrap
msgid "`--overlay`"
msgstr "`--overlay`"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:308
#, no-wrap
msgid "`--no-overlay`"
msgstr "`--no-overlay`"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:314
msgid ""
"In the default overlay mode, `git checkout` never removes files from the "
"index or the working tree.  When specifying `--no-overlay`, files that "
"appear in the index and working tree, but not in `<tree-ish>` are removed, "
"to make them match `<tree-ish>` exactly."
msgstr ""
"デフォルトのオーバーレイモードでは、 `git checkout` がインデックスまたは作業"
"ツリーからファイルを削除することはありません。 `--no-overlay` を指定すると、"
"インデックスと作業ツリーには表示されるが、 `<tree-ish>` には表示されないファ"
"イルが削除され、 `<tree-ish>` と完全に一致するようになります。"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:315
#, no-wrap
msgid "`--pathspec-from-file=<file>`"
msgstr "`--pathspec-from-file=<file>`"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:322
msgid ""
"Pathspec is passed in `<file>` instead of commandline args. If `<file>` is "
"exactly `-` then standard input is used. Pathspec elements are separated by "
"LF or CR/LF. Pathspec elements can be quoted as explained for the "
"configuration variable `core.quotePath` (see linkgit:git-config[1]). See "
"also `--pathspec-file-nul` and global `--literal-pathspecs`."
msgstr ""
"pathspecは、コマンドライン引数の代わりに `<file>` で渡されます。 `<file>` が"
"正確に `-` の場合、標準入力が使用されます。pathspec要素は、LFまたはCR/LFで区"
"切られます。pathspec要素は、構成変数 `core.quotePath` で説明されているよう"
"に、クォートできます(linkgit:git-config[1] 参照)。 `--pathspec-file-nul` およ"
"び グローバル `--literal-pathspecs` も参照してください。"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:323
#, no-wrap
msgid "`--pathspec-file-nul`"
msgstr "`--pathspec-file-nul`"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:327
msgid ""
"Only meaningful with `--pathspec-from-file`. Pathspec elements are separated "
"with NUL character and all other characters are taken literally (including "
"newlines and quotes)."
msgstr ""
"`--pathspec-from-file`でのみ意味があります。Pathspec要素はNUL文字で区切られ、"
"他のすべての文字は文字通りに解釈されます(改行と引用符を含む)。"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:328
#, no-wrap
msgid "<branch>"
msgstr "<branch>"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:334
msgid ""
"Branch to checkout; if it refers to a branch (i.e., a name that, when "
"prepended with \"refs/heads/\", is a valid ref), then that branch is checked "
"out. Otherwise, if it refers to a valid commit, your `HEAD` becomes "
"\"detached\" and you are no longer on any branch (see below for details)."
msgstr ""
"チェックアウトするブランチ。もしそれがブランチ(つまり、 `refs/heads/` を前に"
"つけたとき、有効なrefである名前)を参照しているなら、そのブランチはチェックア"
"ウトされます。そうでない場合、もしそれが有効なコミットを参照していれば、あな"
"たの `HEAD` は \"detached\" となり、あなたはもはやどのブランチにもいません(詳"
"しくは以下を参照してください)。"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:338
msgid ""
"You can use the `@{-N}` syntax to refer to the N-th last branch/commit "
"checked out using \"git checkout\" operation. You may also specify `-` which "
"is synonymous to `@{-1}`."
msgstr ""
"`@{-N}` 構文を使用して、 `git checkout `操作を使用してチェックアウトされた最"
"後からN番目ブランチ/コミットを参照できます。 `@{-1}` と同義の `-` を指定する"
"こともできます。"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:342
msgid ""
"As a special case, you may use `A...B` as a shortcut for the merge base of "
"`A` and `B` if there is exactly one merge base. You can leave out at most "
"one of `A` and `B`, in which case it defaults to `HEAD`."
msgstr ""
"特殊なケースとして、マージベースが1つしかない場合は、 `A` と `B` のマージベー"
"スのショートカットとして `A...B` を使用できます。 最大で `A` と `B` のどちら"
"かを省略できます。その場合、デフォルトで `HEAD` になります。"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:343
#, no-wrap
msgid "<new-branch>"
msgstr "<new-branch>"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:345
msgid "Name for the new branch."
msgstr "新しいブランチの名前。"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:346
#, no-wrap
msgid "<start-point>"
msgstr "<start-point>"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:349
msgid ""
"The name of a commit at which to start the new branch; see linkgit:git-"
"branch[1] for details. Defaults to `HEAD`."
msgstr ""
"新しいブランチを開始するコミットの名前。詳細については、 linkgit:git-"
"branch[1] を参照してください。デフォルトは `HEAD` です。"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:353
#: ../Documentation-sedout/git-checkout.txt:361
msgid ""
"As a special case, you may use `\"A...B\"` as a shortcut for the merge base "
"of `A` and `B` if there is exactly one merge base. You can leave out at most "
"one of `A` and `B`, in which case it defaults to `HEAD`."
msgstr ""
"特殊なケースとして、マージベースが1つしかない場合は、 `A` と `B` のマージベー"
"スのショートカットとして `A...B` を使用できます。 最大で `A` と `B` のどちら"
"かを省略できます。その場合、デフォルトで `HEAD` になります。"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:354
#, no-wrap
msgid "<tree-ish>"
msgstr "<tree-ish>"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:357
msgid ""
"Tree to checkout from (when paths are given). If not specified, the index "
"will be used."
msgstr ""
"チェックアウト元のツリー(パスが指定されている場合)。指定しない場合はインデッ"
"クスが使用されます。"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:362
#, no-wrap
msgid "\\--"
msgstr "`--`"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:364
msgid "Do not interpret any more arguments as options."
msgstr "これ以降の引数をオプションとして解釈しないでください。"

#. type: Labeled list
#: ../Documentation-sedout/git-checkout.txt:365
#, no-wrap
msgid "<pathspec>..."
msgstr "<pathspec>..."

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:367
msgid "Limits the paths affected by the operation."
msgstr "操作の影響を受けるパスを制限します。"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:369
msgid "For more details, see the 'pathspec' entry in linkgit:gitglossary[7]."
msgstr ""
"詳細については、 linkgit:gitglossary[7] の「pathspec」エントリを参照してくだ"
"さい。"

#. type: Title -
#: ../Documentation-sedout/git-checkout.txt:371
#, no-wrap
msgid "DETACHED HEAD"
msgstr "DETACHED HEAD"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:375
msgid ""
"`HEAD` normally refers to a named branch (e.g. `master`). Meanwhile, each "
"branch refers to a specific commit. Let's look at a repo with three commits, "
"one of them tagged, and with branch `master` checked out:"
msgstr ""
"`HEAD` は通常、名前付きブランチ(`master` など)を指します。一方、各ブランチは"
"特定のコミットを参照します。3つのコミットがあり、そのうちの1つがタグ付けされ"
"ており、ブランチ`master` がチェックアウトされているリポジトリを見てみましょ"
"う:"

#. type: delimited block -
#: ../Documentation-sedout/git-checkout.txt:384
#, no-wrap
msgid ""
"           HEAD (refers to branch 'master')\n"
"            |\n"
"            v\n"
"a---b---c  branch 'master' (refers to commit 'c')\n"
"    ^\n"
"    |\n"
"  tag 'v2.0' (refers to commit 'b')\n"
msgstr ""
"           HEAD (refers to branch 'master')\n"
"            |\n"
"            v\n"
"a---b---c  branch 'master' (refers to commit 'c')\n"
"    ^\n"
"    |\n"
"  tag 'v2.0' (refers to commit 'b')\n"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:391
msgid ""
"When a commit is created in this state, the branch is updated to refer to "
"the new commit. Specifically, 'git commit' creates a new commit `d`, whose "
"parent is commit `c`, and then updates branch `master` to refer to new "
"commit `d`. `HEAD` still refers to branch `master` and so indirectly now "
"refers to commit `d`:"
msgstr ""
"この状態でコミットが作成されると、新しいコミットを参照するようにブランチが更"
"新されます。 具体的には、 `git commit` は、親がコミット `c` である新しいコ"
"ミット `d` を作成し、ブランチ `master` を更新して新しい コミット `d` を参照し"
"ます。 `HEAD` はまだブランチ `master` を参照しているので、間接的に コミット "
"`d` を参照するようになりました:"

#. type: delimited block -
#: ../Documentation-sedout/git-checkout.txt:394
#: ../Documentation-sedout/git-checkout.txt:429
#: ../Documentation-sedout/git-checkout.txt:446
#, no-wrap
msgid "$ edit; git add; git commit\n"
msgstr "$ edit; git add; git commit\n"

#. type: delimited block -
#: ../Documentation-sedout/git-checkout.txt:402
#, no-wrap
msgid ""
"               HEAD (refers to branch 'master')\n"
"                |\n"
"                v\n"
"a---b---c---d  branch 'master' (refers to commit 'd')\n"
"    ^\n"
"    |\n"
"  tag 'v2.0' (refers to commit 'b')\n"
msgstr ""
"               HEAD (refers to branch 'master')\n"
"                |\n"
"                v\n"
"a---b---c---d  branch 'master' (refers to commit 'd')\n"
"    ^\n"
"    |\n"
"  tag 'v2.0' (refers to commit 'b')\n"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:408
msgid ""
"It is sometimes useful to be able to checkout a commit that is not at the "
"tip of any named branch, or even to create a new commit that is not "
"referenced by a named branch. Let's look at what happens when we checkout "
"commit `b` (here we show two ways this may be done):"
msgstr ""
"名前付きブランチの先端にないコミットをチェックアウトしたり、名前付きブランチ"
"によって参照されていない新しいコミットを作成したりできると便利な場合がありま"
"す。 コミット `b` をチェックアウトするとどうなるか見てみましょう(ここでは、こ"
"れを行う2つの方法を示します):"

#. type: delimited block -
#: ../Documentation-sedout/git-checkout.txt:412
#, no-wrap
msgid ""
"$ git checkout v2.0  # or\n"
"$ git checkout master^^\n"
msgstr ""
"$ git checkout v2.0  # or\n"
"$ git checkout master^^\n"

#. type: delimited block -
#: ../Documentation-sedout/git-checkout.txt:420
#, no-wrap
msgid ""
"   HEAD (refers to commit 'b')\n"
"    |\n"
"    v\n"
"a---b---c---d  branch 'master' (refers to commit 'd')\n"
"    ^\n"
"    |\n"
"  tag 'v2.0' (refers to commit 'b')\n"
msgstr ""
"   HEAD (refers to commit 'b')\n"
"    |\n"
"    v\n"
"a---b---c---d  branch 'master' (refers to commit 'd')\n"
"    ^\n"
"    |\n"
"  tag 'v2.0' (refers to commit 'b')\n"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:426
msgid ""
"Notice that regardless of which checkout command we use, `HEAD` now refers "
"directly to commit `b`. This is known as being in detached `HEAD` state.  It "
"means simply that `HEAD` refers to a specific commit, as opposed to "
"referring to a named branch. Let's see what happens when we create a commit:"
msgstr ""
"使用するcheckoutコマンドに関係なく、 `HEAD` はコミット `b` を直接参照するよう"
"になりました。 これは、切り離された `HEAD` (detached HEAD)状態にあることとし"
"て知られています。これは、名前付きブランチを参照するのではなく、単に `HEAD` "
"が特定のコミットを参照することを意味します。この状態でコミットを作成するとど"
"うなるか見てみましょう:"

#. type: delimited block -
#: ../Documentation-sedout/git-checkout.txt:439
#, no-wrap
msgid ""
"     HEAD (refers to commit 'e')\n"
"      |\n"
"      v\n"
"      e\n"
"     /\n"
"a---b---c---d  branch 'master' (refers to commit 'd')\n"
"    ^\n"
"    |\n"
"  tag 'v2.0' (refers to commit 'b')\n"
msgstr ""
"     HEAD (refers to commit 'e')\n"
"      |\n"
"      v\n"
"      e\n"
"     /\n"
"a---b---c---d  branch 'master' (refers to commit 'd')\n"
"    ^\n"
"    |\n"
"  tag 'v2.0' (refers to commit 'b')\n"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:443
msgid ""
"There is now a new commit `e`, but it is referenced only by `HEAD`. We can "
"of course add yet another commit in this state:"
msgstr ""
"新しいコミット `e` がありますが、これは `HEAD` によってのみ参照されます。 も"
"ちろん、この状態でさらに別のコミットを追加できます:"

#. type: delimited block -
#: ../Documentation-sedout/git-checkout.txt:456
#, no-wrap
msgid ""
"\t HEAD (refers to commit 'f')\n"
"\t  |\n"
"\t  v\n"
"      e---f\n"
"     /\n"
"a---b---c---d  branch 'master' (refers to commit 'd')\n"
"    ^\n"
"    |\n"
"  tag 'v2.0' (refers to commit 'b')\n"
msgstr ""
"\t HEAD (refers to commit 'f')\n"
"\t  |\n"
"\t  v\n"
"      e---f\n"
"     /\n"
"a---b---c---d  branch 'master' (refers to commit 'd')\n"
"    ^\n"
"    |\n"
"  tag 'v2.0' (refers to commit 'b')\n"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:460
msgid ""
"In fact, we can perform all the normal Git operations. But, let's look at "
"what happens when we then checkout `master`:"
msgstr ""
"実際、私達は通常のGit操作はすべて実行できます。 しかし、ここで私達が "
"`master` をチェックアウトするとどうなるか見てみましょう:"

#. type: delimited block -
#: ../Documentation-sedout/git-checkout.txt:463
#, no-wrap
msgid "$ git checkout master\n"
msgstr "$ git checkout master\n"

#. type: delimited block -
#: ../Documentation-sedout/git-checkout.txt:471
#, no-wrap
msgid ""
"               HEAD (refers to branch 'master')\n"
"      e---f     |\n"
"     /          v\n"
"a---b---c---d  branch 'master' (refers to commit 'd')\n"
"    ^\n"
"    |\n"
"  tag 'v2.0' (refers to commit 'b')\n"
msgstr ""
"               HEAD (refers to branch 'master')\n"
"      e---f     |\n"
"     /          v\n"
"a---b---c---d  branch 'master' (refers to commit 'd')\n"
"    ^\n"
"    |\n"
"  tag 'v2.0' (refers to commit 'b')\n"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:478
msgid ""
"It is important to realize that at this point nothing refers to commit `f`. "
"Eventually commit `f` (and by extension commit `e`) will be deleted by the "
"routine Git garbage collection process, unless we create a reference before "
"that happens. If we have not yet moved away from commit `f`, any of these "
"will create a reference to it:"
msgstr ""
"この時点で、コミット `f` を指しているものは何もないことを理解することが重要で"
"す。最終的に、コミット `f` (および拡張によりコミット `e` )は、あなたがルーチ"
"ンのGitガベージコレクションプロセス前に参照を作成しない限り、ルーチンのGitガ"
"ベージコレクションプロセスによって削除されます。あなたが、まだコミット`f`から"
"離れていない場合、以下のいずれかがそれへの参照を作成します:"

#. type: delimited block -
#: ../Documentation-sedout/git-checkout.txt:483
#, no-wrap
msgid ""
"$ git checkout -b foo   <1>\n"
"$ git branch foo        <2>\n"
"$ git tag foo           <3>\n"
msgstr ""
"$ git checkout -b foo   <1>\n"
"$ git branch foo        <2>\n"
"$ git tag foo           <3>\n"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:488
msgid ""
"creates a new branch `foo`, which refers to commit `f`, and then updates "
"`HEAD` to refer to branch `foo`. In other words, we'll no longer be in "
"detached `HEAD` state after this command."
msgstr ""
"コミット `f` を参照する新しいブランチ `foo` を作成し、次にブランチ `foo` を参"
"照するように`HEAD`を更新します。つまり、このコマンドを実行すると、もはや切り"
"離された`HEAD` (detached HEAD)状態では無くなります。"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:491
msgid ""
"similarly creates a new branch `foo`, which refers to commit `f`, but leaves "
"`HEAD` detached."
msgstr ""
"同様に、コミット `f` を参照する新しいブランチ `foo` を作成しますが、 `HEAD` "
"は切り離されたままにします。"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:494
msgid ""
"creates a new tag `foo`, which refers to commit `f`, leaving `HEAD` detached."
msgstr ""
"新しいタグ `foo` を作成します。これは、`HEAD` を切り離したままコミット `f` を"
"参照します。"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:499
msgid ""
"If we have moved away from commit `f`, then we must first recover its object "
"name (typically by using git reflog), and then we can create a reference to "
"it. For example, to see the last two commits to which `HEAD` referred, we "
"can use either of these commands:"
msgstr ""
"私達がうっかり `f` から離れてしまった場合は、最初にそのオブジェクト名を回復す"
"る必要があり(通常は `git reflog` を使用)、次にそれへの参照を作成できます。 た"
"とえば、 `HEAD` が参照した最後の2つのコミットを確認するには、以下のいずれかの"
"コマンドを使用できます:"

#. type: delimited block -
#: ../Documentation-sedout/git-checkout.txt:503
#, no-wrap
msgid ""
"$ git reflog -2 HEAD # or\n"
"$ git log -g -2 HEAD\n"
msgstr ""
"$ git reflog -2 HEAD # or\n"
"$ git log -g -2 HEAD\n"

#. type: Title -
#: ../Documentation-sedout/git-checkout.txt:506
#, no-wrap
msgid "ARGUMENT DISAMBIGUATION"
msgstr "ARGUMENT DISAMBIGUATION(引数の曖昧性解消)"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:516
msgid ""
"When there is only one argument given and it is not `--` (e.g. `git checkout "
"abc`), and when the argument is both a valid `<tree-ish>` (e.g. a branch "
"`abc` exists) and a valid `<pathspec>` (e.g. a file or a directory whose "
"name is \"abc\" exists), Git would usually ask you to disambiguate.  Because "
"checking out a branch is so common an operation, however, `git checkout abc` "
"takes \"abc\" as a `<tree-ish>` in such a situation.  Use `git checkout -- "
"<pathspec>` if you want to checkout these paths out of the index."
msgstr ""
"与えられた引数が1つだけで、それが `--` ではない場合(例: `git checkout abc`)"
"や、引数が有効な `<tree-ish>` (例:ブランチ `abc` が存在する)や、有効な "
"`<pathspec>` (たとえば、 \"abc\" という名前のファイルまたはディレクトリが存在"
"する)な場合、Gitは通常、明確にするように求めます。ただし、ブランチのチェック"
"アウトは非常に一般的な操作であるため、このような状況では、 `git checkout "
"abc` は \"abc\" を `<tree-ish>` と見なします。これらのパスをインデックスから"
"チェックアウトする場合は、 `git checkout -- <pathspec>` を使用します。"

#. type: Title -
#: ../Documentation-sedout/git-checkout.txt:518
#, no-wrap
msgid "EXAMPLES"
msgstr "EXAMPLES"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:523
msgid ""
"The following sequence checks out the `master` branch, reverts the "
"`Makefile` to two revisions back, deletes `hello.c` by mistake, and gets it "
"back from the index."
msgstr ""
"以下のシーケンスは、 `master` ブランチをチェックアウトし、 `Makefile` のリビ"
"ジョンを2つ戻し、誤って `hello.c` を削除したので、 `hello.c` をインデックスか"
"ら取得します。"

#. type: delimited block -
#: ../Documentation-sedout/git-checkout.txt:529
#, no-wrap
msgid ""
"$ git checkout master             <1>\n"
"$ git checkout master~2 Makefile  <2>\n"
"$ rm -f hello.c\n"
"$ git checkout hello.c            <3>\n"
msgstr ""
"$ git checkout master             <1>\n"
"$ git checkout master~2 Makefile  <2>\n"
"$ rm -f hello.c\n"
"$ git checkout hello.c            <3>\n"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:532
msgid "switch branch"
msgstr "ブランチを切り替えます"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:533
msgid "take a file out of another commit"
msgstr "別のコミットからファイルを取り出します"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:534
msgid "restore `hello.c` from the index"
msgstr "インデックスから `hello.c` を復元します"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:537
msgid ""
"If you want to check out _all_ C source files out of the index, you can say"
msgstr ""
"あなたがインデックスから「すべての」Cソースファイルをチェックアウトしたい場合"
"は、以下のように言うことができます"

#. type: delimited block -
#: ../Documentation-sedout/git-checkout.txt:540
#, no-wrap
msgid "$ git checkout -- '*.c'\n"
msgstr "$ git checkout -- '*.c'\n"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:546
msgid ""
"Note the quotes around `*.c`.  The file `hello.c` will also be checked out, "
"even though it is no longer in the working tree, because the file globbing "
"is used to match entries in the index (not in the working tree by the shell)."
msgstr ""
"`*.c` を囲む引用符に注意してください。 ファイル `hello.c` も、作業ツリーに存"
"在していなくてもチェックアウトされます。これは、(引用符で囲む事で作業ツリーに"
"対してシェル展開するのではなくて)ファイルグロブがインデックスのエントリを照合"
"するために使用されるためです。"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:550
msgid ""
"If you have an unfortunate branch that is named `hello.c`, this step would "
"be confused as an instruction to switch to that branch.  You should instead "
"write:"
msgstr ""
"`hello.c` という名前の不幸なブランチがある場合、このステップはそのブランチに"
"切り替えるための指示として混乱を産みます。あなたは代わりに以下のように書く必"
"要があります。"

#. type: delimited block -
#: ../Documentation-sedout/git-checkout.txt:553
#, no-wrap
msgid "$ git checkout -- hello.c\n"
msgstr "$ git checkout -- hello.c\n"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:557
msgid ""
"After working in the wrong branch, switching to the correct branch would be "
"done using:"
msgstr ""
"間違ったブランチで作業した後、正しいブランチへの切り替えは以下を使用して行い"
"ます:"

#. type: delimited block -
#: ../Documentation-sedout/git-checkout.txt:560
#, no-wrap
msgid "$ git checkout mytopic\n"
msgstr "$ git checkout mytopic\n"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:565
msgid ""
"However, your \"wrong\" branch and correct `mytopic` branch may differ in "
"files that you have modified locally, in which case the above checkout would "
"fail like this:"
msgstr ""
"ただし、あなたの「間違った」ブランチと正しい `mytopic` ブランチは、ローカルで"
"変更したファイルで異なる場合があります。その場合、上記のチェックアウトは以下"
"のように失敗します:"

#. type: delimited block -
#: ../Documentation-sedout/git-checkout.txt:569
#, no-wrap
msgid ""
"$ git checkout mytopic\n"
"error: You have local changes to 'frotz'; not switching branches.\n"
msgstr ""
"$ git checkout mytopic\n"
"error: You have local changes to 'frotz'; not switching branches.\n"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:573
msgid ""
"You can give the `-m` flag to the command, which would try a three-way merge:"
msgstr "コマンドに `-m` フラグを指定すると、3方向のマージを試みます:"

#. type: delimited block -
#: ../Documentation-sedout/git-checkout.txt:577
#, no-wrap
msgid ""
"$ git checkout -m mytopic\n"
"Auto-merging frotz\n"
msgstr ""
"$ git checkout -m mytopic\n"
"Auto-merging frotz\n"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:582
msgid ""
"After this three-way merge, the local modifications are _not_ registered in "
"your index file, so `git diff` would show you what changes you made since "
"the tip of the new branch."
msgstr ""
"この3方向マージの後、ローカルの変更はインデックスファイルに登録されないた"
"め、 `git diff` は、新しいブランチの先端以降に行った変更を表示します。"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:585
msgid ""
"When a merge conflict happens during switching branches with the `-m` "
"option, you would see something like this:"
msgstr ""
"`-m` オプションを使用してブランチを切り替えるときにマージの競合が発生すると、"
"以下のように表示されます:"

#. type: delimited block -
#: ../Documentation-sedout/git-checkout.txt:591
#, no-wrap
msgid ""
"$ git checkout -m mytopic\n"
"Auto-merging frotz\n"
"ERROR: Merge conflict in frotz\n"
"fatal: merge program failed\n"
msgstr ""
"$ git checkout -m mytopic\n"
"Auto-merging frotz\n"
"ERROR: Merge conflict in frotz\n"
"fatal: merge program failed\n"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:597
msgid ""
"At this point, `git diff` shows the changes cleanly merged as in the "
"previous example, as well as the changes in the conflicted files.  Edit and "
"resolve the conflict and mark it resolved with `git add` as usual:"
msgstr ""
"この時点で、 `git diff` は、前の例のようにきれいにマージされた変更と、競合す"
"るファイルの変更を示しています。 競合を編集して解決し、通常どおり `git add` "
"で解決済みのマークを付けます。"

#. type: delimited block -
#: ../Documentation-sedout/git-checkout.txt:601
#, no-wrap
msgid ""
"$ edit frotz\n"
"$ git add frotz\n"
msgstr ""
"$ edit frotz\n"
"$ git add frotz\n"

#. type: Title -
#: ../Documentation-sedout/git-checkout.txt:604
#, no-wrap
msgid "CONFIGURATION"
msgstr "CONFIGURATION"

#. type: Title -
#: ../Documentation-sedout/git-checkout.txt:611
#, no-wrap
msgid "SEE ALSO"
msgstr "SEE ALSO"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:614
msgid "linkgit:git-switch[1], linkgit:git-restore[1]"
msgstr "linkgit:git-switch[1], linkgit:git-restore[1]"

#. type: Title -
#: ../Documentation-sedout/git-checkout.txt:616
#, no-wrap
msgid "GIT"
msgstr "GIT"

#. type: Plain text
#: ../Documentation-sedout/git-checkout.txt:617
msgid "Part of the linkgit:git[1] suite"
msgstr "Part of the linkgit:git[1] suite"
