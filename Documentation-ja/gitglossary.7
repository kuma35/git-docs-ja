'\" t
.\"     Title: gitglossary
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: 12/10/2022
.\"    Manual: Git Manual
.\"    Source: Git 2.38.0.rc1.238.g4f4d434dc6.dirty
.\"  Language: English
.\"
.TH "GITGLOSSARY" "7" "12/10/2022" "Git 2\&.38\&.0\&.rc1\&.238\&.g" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
gitglossary \- Git用語集
.SH "SYNOPSIS"
.sp
*
.SH "DESCRIPTION"
.PP
alternate object database
.RS 4
代役(alternate)メカニズムを介して、
リポジトリ
は
オブジェクトデータベース
の一部を "alternate" (代役) 呼ばれる別のオブジェクトデータベースから継承できます。
.RE
.PP
bare repository
.RS 4
ベアリポジトリは通常、適切な名前のディレクトリで、接尾辞は
\fB\&.git\fR
で、リビジョン管理下にあるファイルのローカルでチェックアウトされたコピーはありません。つまり、通常は非表示の
\fB\&.git\fR
サブディレクトリに存在するすべてのGit管理ファイルと制御ファイルは、代わりに
\fBrepository\&.git\fR
ディレクトリに直接存在し、他のファイルは存在せず、チェックアウトされません。通常、公開リポジトリの発行者は、ベアリポジトリを利用可能にします。
.RE
.PP
blob object(ブロブオブジェクト)
.RS 4
型の無いオブジェクト。例:ファイルの中身。
.RE
.PP
branch
.RS 4
「ブランチ」は開発ラインです。ブランチの最新のコミットは、そのブランチの先端(the tip of that branch)と呼ばれます。ブランチの先端はブランチheadによって参照され、ブランチで追加の開発が行われると前進します。単一のGit
リポジトリは任意の数のブランチを追跡できますが、あなたの作業ツリーはそのうちの1つ(「current branch」(現在のブランチ)または「checked out branch」(チェックアウトされたブランチ))に関連付けられ、
HEAD
はそのブランチを指します。
.RE
.PP
cache
.RS 4
廃止。
index
を使ってください。
.RE
.PP
chain(チェーン,チェイン)
.RS 4
オブジェクトのリスト。リスト内の各
オブジェクト
には、その後ろへの参照が含まれます(たとえば、
コミット
の後ろはその
親
の1つである可能性があります)。
.RE
.PP
changeset
.RS 4
"コミット" の BitKeeper/cvsps での言い方です。 Git は変更(change)ではなく状態(state)を保存するため、Gitでコミットを「changeset」と呼ぶのはナンセンスです。
.RE
.PP
checkout
.RS 4
作業ツリーの全部または一部をオブジェクトデータベースのツリーオブジェクトまたはブロブで更新し、作業ツリー全体が新しいブランチを指している場合は、インデックスとHEADを更新する操作。
.RE
.PP
cherry\-picking(チェリーピック,チェリーピッキング)
.RS 4
SCM
の専門用語では、 "cherry pick" (つまみ食い)とは、一連の変更(通常はコミット)から変更のサブセットを選択し、それらを別のコードベースの上に新しい一連の変更として記録することを意味します。Gitでは、これは "git cherry\-pick" コマンドによって実行され、既存のコミットによって導入された変更を抽出し、現在のブランチの先端に基づいてそれを新しいコミットとして記録します。
.RE
.PP
clean
.RS 4
現在のヘッドが参照するリビジョンと作業ツリーが完全に一致(correspond)しているのであれば、その作業ツリーはクリーンです。「dirty」も参照下さい。
.RE
.PP
commit
.RS 4
名詞として: Gitの履歴における一つのポイント。プロジェクトの履歴全体は、相互に関連する一連のコミットとして表されます。「コミット」という言葉は、他のリビジョン管理システムが「リビジョン」または「バージョン」という言葉を使用するのと同じ場所で、Gitによってよく使用されます。
コミットオブジェクト
の省略形としても使用されます。
.sp
動詞として(コミットする):
インデックスの現在の状態を表す新しいコミットを作成し、その新しいコミットをポイントするようにHEADを進めることにより、プロジェクトの状態の新しいスナップショットをGit履歴に保存する操作。
.RE
.PP
commit object
.RS 4
親、コミッター、作者、日付、保存されたリビジョンの最上位ディレクトリに対応するツリーオブジェクトなど、特定のリビジョンに関する情報を含むオブジェクト。
.RE
.PP
commit\-ish (also committish)(コミットっぽい;コミット風)
.RS 4
コミットオブジェクトまたは、コミットオブジェクトに再帰的に逆参照可能なオブジェクト。
コミットオブジェクトや、コミットオブジェクトを指すタグオブジェクトや、コミットオブジェクトを指すタグオブジェクトを指すタグオブジェクトなどは全てcommit\-ish(commit\-ishes)です。
.RE
.PP
core Git
.RS 4
Gitの基本的なデータ構造とユーティリティ。これは、限定的なソースコード管理ツールのみです。
.RE
.PP
DAG
.RS 4
有向非巡回グラフ(Directed acyclic graph)。
コミットオブジェクト
は、(有向の)親を持ち、コミットオブジェクトのグラフが非巡回(同じ
オブジェクト
で開始・終了する
チェイン
はありません)であるため有向非巡回グラフを形成します。
.RE
.PP
dangling object
.RS 4
(ぶらぶら揺れるオブジェクト)他の到達不能オブジェクトからでも到達できない到達不能オブジェクト。 danglingオブジェクトには、リポジトリ内の任意のrefまたはオブジェクトからの参照はありません。
.RE
.PP
detached HEAD
.RS 4
通常、HEADはブランチの名前を格納し、HEADが示す履歴を操作するコマンドは、HEADが指すブランチの先端につながる履歴を操作します。 ただし、Gitでは、必ずしも特定のブランチの先端ではない任意のコミットをチェックアウトすることもできます。このような状態のHEADを「detached」(切り離されている、デタッチされている)と呼びます。
.sp
注意: 現在のブランチの履歴を操作するコマンド(たとえば、その上に新しい履歴を構築するための
\fBgit commit\fR)は、HEADがデタッチされている間も機能することに注意してください。それらは、ブランチに影響を与えることなく、更新された履歴の先端を指すようにHEADを更新します。現在のブランチに関する情報を更新または照会するコマンド(たとえば、現在のブランチが統合するリモートトラッキングブランチを設定する
\fBgit branch \-\-set\-upstream\-to\fR)は、この状態で問い合わせる(実際の)現在のブランチがないため、明らかに機能しません。
.RE
.PP
directory
.RS 4
あなたが "ls" で得られる一覧の事 :\-)
.RE
.PP
dirty
.RS 4
作業ツリーで、現在のブランチに対してコミットされてない変更が含まれている場合、「作業ツリーはダーティーである」と言われます。
.RE
.PP
evil merge
.RS 4
邪悪なマージとは、どの
親
にも表示されない変更を導入する
マージ
です。
.RE
.PP
fast\-forward
.RS 4
fast\-forward(早送り)は、とあるリビジョンに、その子孫である別のブランチの変更をマージする特殊なタイプのマージです。このような場合、新しいマージコミットを行うのではなく、マージするブランチと同じリビジョンを指すようにブランチを更新するだけです。これは、リモートリポジトリのリモート追跡ブランチで頻繁に発生します。
.RE
.PP
fetch
.RS 4
ブランチをフェッチするということは、リモートリポジトリからブランチのhead refを取得して、ローカルのオブジェクトデータベースに欠落しているオブジェクトを見つけ、そして欠落したオブジェクトを取得することを意味します。
\fBgit-fetch\fR(1)
も参照してください。
.RE
.PP
file system
.RS 4
リーナス・トーバルズは当初、Gitをユーザー空間ファイルシステム、つまりファイルとディレクトリを保持するインフラストラクチャとして設計しました。これにより、Gitの効率と速度が保証されました。
.RE
.PP
Git archive
.RS 4
リポジトリ
の同義語(arch people 向け)。
.RE
.PP
gitfile
.RS 4
実際のリポジトリであるディレクトリを指す、作業ツリーのルートにあるプレーンファイル
\fB\&.git\fR
.RE
.PP
grafts
.RS 4
graftsは、コミットの偽の祖先情報を記録することで、他の点では異なる2つの開発ラインを結合できます。こうすることで、あるコミットが持つ親の組を、コミット作成時に記録されたものとは異なるものとして Git に見せかけることができるのです。これは
\fB\&.git/info/grafts\fR
ファイルを介して構成されます。
.sp
注意: graftsメカニズムは時代遅れであり、リポジトリ間でオブジェクトを転送する際に問題が発生する可能性があることに注意してください。 同じことを行うためのより柔軟で堅牢なシステムについては、
\fBgit-replace\fR(1)
を参照してください。
.RE
.PP
hash
.RS 4
Gitの文脈では
オブジェクト名
と同義語。
.RE
.PP
head
.RS 4
ブランチ
の先端にある
コミット
への、
名付けられた参照
です。パックされた参照を使用する場合を除いて、headは
\fB$GIT_DIR/refs/heads/\fR
ディレクトリのファイルに保存されます。 (linkgit: git\-pack\-refs[1] を参照してください。)
.RE
.PP
HEAD
.RS 4
現在のブランチ。 より詳細に言うと、あなたの作業ツリーは通常、HEADによって参照されるツリーの状態から派生します。HEADは、リポジトリ内のhead達のうちの一つへの参照です。ただし、detached HEADをの場合は、任意のコミットを直接参照しています。
.RE
.PP
head ref
.RS 4
head
の同義語。
.RE
.PP
hook
.RS 4
いくつかのGitコマンドの通常の実行中に、開発者が機能を追加したりチェックしたりできるようにするオプションのスクリプトを呼び出します。通常、フックを使用すると、コマンドを事前に確認して中止することができ、そしてまた、操作の完了後に事後通知を行うことができます。フックスクリプトは
\fB$GIT_DIR/hooks/\fR
ディレクトリにあり、ファイル名から
\fB\&.sample\fR
サフィックスを削除するだけで有効になります。以前のバージョンのGitでは、それらを実行可能にする必要がありました。
.RE
.PP
index
.RS 4
状態情報を含むファイルのコレクションで、その内容はオブジェクトとして保存されます。インデックスは、あなたの作業ツリーの保存バージョンです。正直なところ、これには、マージのときに使用される、作業ツリーの2番目および3番目のバージョンを含めることもできます。
.RE
.PP
index entry
.RS 4
インデックスに保存されている特定のファイルに関する情報。マージが開始されたが、まだ終了していない場合(つまり、インデックスにそのファイルの複数のバージョンが含まれている場合)、インデックスエントリをマージ解除(unmerge)できます。
.RE
.PP
master
.RS 4
デフォルトの開発
ブランチ
。 Git
リポジトリ
を作成するたびに、「master」という名前のブランチが作成され、アクティブなブランチになります。 ほとんどのローカル開発に含まれていますが、これは純粋に慣例によるものであり、必須ではありません。
.RE
.PP
merge
.RS 4
動詞として: 別のブランチ(あるいは外部のリポジトリから)の内容を現在のブランチに取り込むこと。マージされたブランチが別のリポジトリからのものである場合、これは最初にリモートブランチをフェッチし、次に結果を現在のブランチにマージすることによって行われます。このフェッチ操作とマージ操作の組み合わせは、プル(pull)と呼ばれます。マージは、ブランチが分岐してから行われた変更を識別し、それらすべての変更を一緒に適用する自動プロセスによって実行されます。変更が競合する場合は、マージを完了するために手動による介入が必要になる場合があります。
.sp
名詞として:
fast\-forwardでない限り、マージ成功の結果として、マージされたブランチの先端を親に持つ新しいコミットが作成されます。このコミットは「マージコミット」と呼ばれます。または単に「マージ」と呼ばれることもあります。
.RE
.PP
object(オブジェクト)
.RS 4
Gitの保管ユニット(unit of storage)。その内容による
SHA\-1
によって一意に識別されます。したがって、オブジェクトを変更することはできません。
.RE
.PP
object database
.RS 4
「オブジェクト」の組を格納し、個々のオブジェクトはそのオブジェクト名によって識別されます。オブジェクトは通常、
\fB$GIT_DIR/objects/\fR
にあります。
.RE
.PP
object identifier(オブジェクトID)
.RS 4
object name
(オブジェクト名)の同義語
.RE
.PP
object name(オブジェクト名)
.RS 4
オブジェクト> の一意の識別子。オブジェクト名は通常、40文字の16進文字列で表されます。一般に <<def_SHA1
とも呼ばれます。
.RE
.PP
object type(オブジェクトタイプ)
.RS 4
「コミット
識別子」または「ツリー
識別子」または「タグ
識別子」または「ブロブ
識別子」のいずれかで、
オブジェクト
のタイプを表します。
.RE
.PP
octopus
.RS 4
3つ以上(more than two)のブランチをマージします
.RE
.PP
origin
.RS 4
デフォルトの上流(upstream)リポジトリ。ほとんどのプロジェクトには、追跡する上流プロジェクトが少なくとも1つあります。デフォルトでは、「origin」がその目的で使用されます。新しい上流更新分は、 origin/name\-of\-upstream\-branch という名前の
リモート追跡ブランチにフェッチされます。これは、
\fBgit branch\-r\fR
を使用して確認できます。
.RE
.PP
overlay
.RS 4
\fBcp \-R\fR
が宛先ディレクトリの内容を更新するのと同様に、ファイルを更新して作業ディレクトリに追加するのみで削除を行いません。これは、インデックスまたはツリー風の何か(tree\-ish)からファイルをチェックアウトするときのcheckoutのデフォルトモードです。対照的に、オーバーレイなしモード(no\-overlay mode)では、
\fBrsync \-\-delete\fR
と同様に、ソース側に存在しない追跡ファイルは削除されます。
.RE
.PP
pack
.RS 4
1つのファイルに圧縮されたオブジェクトの組(スペースを節約するため、またはそれらを効率的に送信するため)。
.RE
.PP
pack index
.RS 4
パックの内容に効率的にアクセスするのに役立つ、パック内のオブジェクトの識別子とその他の情報のリスト。
.RE
.PP
pathspec
.RS 4
(パススペック):Gitコマンドでパスを制限するために使用されるパターン。
.sp
pathspec は、「git ls\-files」や「git ls\-tree」や「git add」や「git grep」や「git diff」や「git checkout」や、ツリーまたは作業ツリー(working tree)のサブセットへの操作の為にスコープを制限する他の多くのコマンドの、コマンドラインで使用されます。 パスが現在のディレクトリまたはトップレベルのどちらを基準にしているかについては、 各コマンドのドキュメントを参照してください。 pathspec の構文は以下のとおりです:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
どのパスもそれ自体と一致します
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
最後がスラッシュであるpathspecは、ディレクトリプレフィックスを表します。そのpathspecのスコープは、そのサブツリーに制限されています。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
pathspecの残りの部分は、pathnameの残りの部分のパターンです。 ディレクトリプレフィックスに関連するパスは、 fnmatch(3) を使用してそのパターンと照合されます。特に、
\fB*\fR
と
\fB?\fR
はディレクトリ区切り文字と一致させる事ができます。
.RE
.sp
たとえば、
\fBDocumentation/*\&.jpg\fR
は、
\fBDocumentation/chapter_1/figure_1\&.jpg\fR
を含む、Documentationサブツリー内のすべての
\fB\&.jpg\fR
ファイルと一致します。
.sp
コロン(\fB:\fR)で始まるpathspecには特別な意味があります。短い形式では、先頭のコロン(\fB:\fR)の後に0個以上の「魔法記号」(magic signature)(オプションで別のコロン(\fB:\fR)で終了)が続き、残りはパスと照合するパターンです。「魔法記号」は、英数字、グロブ、正規表現の特殊文字でもコロンでもないASCII記号で構成されます。パターンが「魔法記号」シンボルセットに属さず、コロンではない文字で始まる場合、「魔法記号」を終了するオプションのコロンは省略できます。
.sp
長い形式では、先頭のコロン(\fB:\fR)の後に開き括弧(\fB(\fR) 、0個以上の「魔法単語」(magic words)のコンマ区切りリスト、および閉じ括弧(\fB)\fR) が続き、残りは次のパターンです。パスと一致します。
.sp
コロンのみのpathspecは、「pathspecが無い」ことを意味します。 この形式は、他のpathspecと組み合わせないでください。
.PP
top
.RS 4
魔法単語
\fBtop\fR
(魔法記号:
\fB/\fR)は、サブディレクトリ内からコマンドを実行している場合でも、作業ツリーのルートからパターンを一致させます。
.RE
.PP
literal
.RS 4
\fB*\fR
または
\fB?\fR
などのパターンのワイルドカードはリテラル文字として扱われます。
.RE
.PP
icase
.RS 4
(英文字の)大文字小文字区別せずにマッチ
.RE
.PP
glob
.RS 4
Gitはパターンを、 FNM_PATHNAMEフラグを指定した fnmatch(3) に消費されるのに適したシェルグロブとして扱います。パターン内のワイルドカードは、パス名内の / と一致しません。 たとえば、「Documentation/*\&.html」は「Documentation/git\&.html」と一致しますが、「Documentation/ppc/ppc\&.html」または「tools/perf/Documentation/perf\&.html」とは一致しません。
.sp
フルパス名と一致するパターンの2つの連続するアスタリスク
\fB**\fR
は、特別な意味を持つ場合があります:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
先頭の
\fB**\fR
の後にスラッシュが続く場合は、すべてのディレクトリで一致することを意味します。たとえば、
\fB**/foo\fR
は、パターン
\fBfoo\fR
と同じように、ファイルまたはディレクトリ
\fBfoo\fR
のどこにでも一致します。
\fB**/foo/bar\fR
は、ディレクトリ
\fBfoo\fR
の直下にあるファイルまたはディレクトリ
\fBbar\fR
と一致します。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
末尾の
\fB/**\fR
は、内部のすべてに一致します(matches everything inside)。たとえば、
\fBabc/**\fR
は、
\fB\&.gitignore\fR
ファイルの場所を基準にして、ディレクトリ "abc" 内のすべてのファイルと無限の深さで一致します。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
スラッシュの後に2つの連続するアスタリスクが続く場合、スラッシュは0個以上のディレクトリに一致します。 たとえば、
\fBa/**/b\fR
は
\fBa/b\fR
、
\fBa/x/b\fR
、\fBa/x/y/b\fR
などと一致します。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
他の連続するアスタリスクは無効と見なされます。
.sp
グロブ魔法はリテラル魔法と互換性がありません。
.RE
.RE
.PP
attr
.RS 4
\fBattr:\fR
の後には、スペースで区切られた「属性要件」(attribute requirements)のリストがあります。パスが一致すると見なされるには、これらすべてを満たす必要があります。これは、通常の非魔法pathspecパターンマッチングに追加されます。
\fBgitattributes\fR(5)
参照。
.sp
パスの各属性要件は、以下のいずれかの形式を取ります:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBATTR\fR
では、属性
\fBATTR\fR
を設定する必要があります。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-ATTR\fR
では、属性
\fBATTR\fR
が設定されていない必要があります。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBATTR = VALUE\fR
では、属性
\fBATTR\fR
を文字列
\fBVALUE\fR
に設定する必要があります。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB!ATTR\fR
では、属性
\fBATTR\fR
が指定されていない必要があります。
.sp
注意: ツリーオブジェクトと照合する場合、属性は、指定されたツリーオブジェクトからではなく、作業ツリーから取得されることに注意してください。
.RE
.RE
.PP
exclude
.RS 4
パスが非除外pathspecと一致すると、すべての除外pathspec(魔法記号:
\fB!\fR
またはその同義語
\fB^\fR)が実行されます。一致する場合、パスは無視されます。非除外pathspecがない場合、pathspecなしで呼び出されたかのように、除外が結果セットに適用されます。
.RE
.RE
.PP
parent(親)
.RS 4
コミットオブジェクトには、開発ラインで論理的に前にあったもののリスト、つまり親が含まれています(あるいは、前・親が無い場合は空です)。
.RE
.PP
pickaxe
.RS 4
pickaxe(ピカクス;十字鋤;鶴嘴;つるはし)という用語は、特定のテキスト文字列を追加または削除する変更を選択するのに役立つdiffcoreルーチンのオプションを指します。
\fB\-\-pickaxe\-all\fR
オプションを使用すると、特定のテキスト行などを導入または削除した完全なチェンジセットを表示するために使用できます。
\fBgit-diff\fR(1)
を参照してください。
.RE
.PP
plumbing(配管)
.RS 4
core Git
のキュートな呼び方。
.RE
.PP
porcelain(磁器)
.RS 4
core Gitに依存するプログラムとプログラムスイートのキュートな名前で、コアGitへの高レベルのアクセスを示します。磁器(porcelain)は、配管(plumbing)よりも多くのSCMインターフェースを公開します。
.RE
.PP
per\-worktree ref
.RS 4
グローバルではなく、
worktreeごとのref。これは現在、HEADと
\fBrefs/bisect/\fR
で始まるすべてのrefのみですが、今後、他の普通でないrefが含まれる可能性があります。
.RE
.PP
pseudoref
.RS 4
疑似参照(pseudoref)は
\fB$GIT_DIR\fR
の下にあるファイルのクラスであり、rev\-parseしたときrefのように動作しますが、それはgitによって特別扱されます。疑似参照はすべて大文字の名前を持ち、かつ、常にSHA\-1とそれに続く空白(whitespace)で構成される行で始まります。したがって、HEADは疑似参照ではありません。なぜならHEADはシンボリック参照である場合があるためです。オプションで、いくつかの追加データが含まれる場合があります。例としては
\fBMERGE_HEAD\fR
と
\fBCHERRY_PICK_HEAD\fR
があります。
per\-worktree refs
とは異なり、これらのファイルはシンボリックrefにすることはできず、reflogを含めることはできません。 また、通常のref更新機構を使用して更新することもできません。代わりに、ファイルに直接書き込むことによって更新されます。ただし、それらはrefであるかのように読み取ることができるため、
\fBgit rev\-parse MERGE_HEAD\fR
は機能します。
.RE
.PP
pull
.RS 4
ブランチをプルするとは、それをフェッチしマージすることを意味します。
\fBgit-pull\fR(1)
も参照してください。
.RE
.PP
push
.RS 4
ブランチをプッシュするとは、リモートリポジトリからブランチのヘッド参照を取得し、それがブランチのローカルヘッド参照の祖先であるかどうかを確認し、そしてその場合ローカルヘッド参照から到達可能であり、かつ、リモートリポジトリに欠落しているすべてのオブジェクトを、リモートオブジェクトデータベースに持っていき、リモートヘッド参照を更新します。リモートヘッドがローカルヘッドの祖先でない場合、プッシュは失敗します。
.RE
.PP
reachable(到達可能)
.RS 4
特定のコミットのすべての祖先は、その特定のコミットから到達可能(reachable)であると言われます。より一般的には、タグ付けしたものだったり、親またはツリーへのコミットオブジェクトだったり、ツリーに含まれるツリーやブロブだったり、をたどるチェーンによって、あるオブジェクトから別のオブジェクトに到達できる場合に到達が可能です。
.RE
.PP
rebase
.RS 4
一連の変更をブランチから別のベースに再適用し、そのブランチのヘッドを再適用した結果にリセットします。
.RE
.PP
ref
.RS 4
オブジェクト名または別のrefを指す
\fBrefs/\fR
で始まる名前(例:
\fBrefs/heads/master\fR;別のrefを指すrefは
シンボリックref
と呼ぶ)。便宜上、Gitコマンドの引数として使用する場合は
\fBrefs/\fR
を省略できる場合があります。詳細については
\fBgitrevisions\fR(7)
を参照してください。 refs は
repository
に保存されます。
.sp
ref名前空間は階層的です。さまざまなサブ階層がさまざまな目的で使用されます(たとえば、
\fBrefs/heads/\fR
階層はローカルブランチを表すために使用されます)。
.sp
\fBrefs/\fR
で始まらない特別な目的のrefがいくつかあります。最も注目すべき例は
\fBHEAD\fR
です。
.RE
.PP
reflog
.RS 4
reflogは、refのローカルの「履歴」を示します。 つまり、このリポジトリの最後の3番目のリビジョンが何であったか、およびこのリポジトリの昨日の午後9時14分時点での「現在の状態」が何であったかを知ることができます。詳細については
\fBgit-reflog\fR(1)
を参照してください。
.RE
.PP
refspec
.RS 4
「refspec」は、フェッチやプッシュによって使用され、リモートrefとローカルrefの間のマッピングを記述します。
.RE
.PP
remote repository
.RS 4
同じプロジェクトを追跡するために使用されるが、別の場所にあるリポジトリ。リモートと通信するには、フェッチまたはプッシュを参照してください。
.RE
.PP
remote\-tracking branch
.RS 4
別のリポジトリからの変更を追跡するために使用されるref。 これは通常、
\fBrefs/remotes/foo/bar\fR
のように見え(「foo」という名前のリモートで「bar」という名前のブランチを追跡することを示します)、構成されたフェッチrefspecの右側(right\-hand\-side)に一致します。リモート追跡ブランチには、直接の変更を含めたり、ローカルコミットを行ったりしないでください。
.RE
.PP
repository
.RS 4
<< def_ref,refs>>のコレクションと、refから到達可能なすべてのオブジェクトを含むオブジェクトデータベース。1つまたは複数の磁器コマンドからのメタデータが付随している可能性があります。リポジトリは、代替メカニズムを介してオブジェクトデータベースを他のリポジトリと共有できます。
.RE
.PP
resolve
.RS 4
失敗した自動
マージ
が残したものを手動で修正する操作。
.RE
.PP
revision
.RS 4
コミット
(名詞) の同義語
.RE
.PP
rewind(巻き戻し)
.RS 4
開発の一部を破棄する、つまり、
head
を以前の
リビジョン
に割り当てる。
.RE
.PP
SCM
.RS 4
Source code management (tool)\&.
.RE
.PP
SHA\-1
.RS 4
セキュアハッシュアルゴリズム1(Secure Hash Algorithm 1);暗号化ハッシュ関数。 Git界隈ではオブジェクト名の同義語として使用されます。
.RE
.PP
shallow clone
.RS 4
ほとんどの場合
shallowリポジトリ
の同義語ですが、この言い方は、
\fBgit clone \-\-depth=\&.\&.\&.\fR
コマンドを実行して作成されたこと明言したものです。
.RE
.PP
shallow repository
.RS 4
浅いリポジトリ(shallow repository)には不完全な履歴があり、そのコミットの一部では親が削除されて(cauterized away)います(言い換えると、Gitは、コミットオブジェクトに記録があっても、これらのコミットには親がないふりをするように指示されます)。これは、アップストリームで記録された実際の履歴がはるかに大きい場合でも、プロジェクトの最近の履歴のみに関心がある場合に役立つことがあります。浅いリポジトリは、
\fBgit-clone\fR(1)
に
\fB\-\-depth\fR
オプションを指定することで作成され、その履歴は後で
\fBgit-fetch\fR(1)
で深めることができます。
.RE
.PP
stash entry
.RS 4
ダーティ
な作業ディレクトリの内容とインデックスを、将来の再利用のために一時的に保存するのに使用される
オブジェクト
。
.RE
.PP
submodule
.RS 4
とあるリポジトリの内部で、それとは別個のプロジェクトの履歴を保持する
リポジトリ
(ここで、その、とあるリポジトリを
スーパープロジェクト
と呼びます)。
.RE
.PP
superproject
.RS 4
作業ツリー内の他のプロジェクトのリポジトリを
サブモジュール
として参照する
リポジトリ
。 スーパープロジェクトは、含まれているサブモジュールのコミットオブジェクトの名前を知っています(ただし、そのコピーは保持していません)。
.RE
.PP
symref
.RS 4
シンボリックref:
SHA\-1
ID自体を含む代わりに「ref: refs/some/thing」の形式であり、参照されると、この参照を再帰的に逆参照します。
\fB<<def_HEAD,HEAD>>\fR
はsymrefの代表的な例です。シンボリックrefは
\fBgit-symbolic-ref\fR(1)
コマンドで操作されます。
.RE
.PP
tag
.RS 4
任意のタイプのオブジェクトを指す
\fBrefs/tags/\fR
名前空間の下のref(通常、タグは
タグ
または
コミットオブジェクト
のいずれかを指します)。headとは対照的に、タグは
\fBcommit\fR
コマンドによって更新されません。Gitタグは、Lispタグとは何の関係もありません(Git界隈では、それはオブジェクトタイプと呼ばれます)。タグは通常、コミットの祖先チェーンの特定のポイントをマークするために使用されます。
.RE
.PP
tag object
.RS 4
別のオブジェクトを指すrefを含むオブジェクト。これには、コミットオブジェクトのようにメッセージを含めることができます。またPGP署名を含めることもでき、その場合、「署名付きタグオブジェクト」(signed tag object)と呼ばれます。
.RE
.PP
topic branch
.RS 4
開発者が概念的な開発ラインを識別するために使用する通常のGitブランチ。(従来のSCMに比べて)ブランチは非常に簡単で処理コストが掛からないため、それぞれが非常に明確に定義された概念または小さな増分であるが関連する変更を含む、いくつかの小さなブランチを持つことが望ましい場合がよくあります。
.RE
.PP
tree
.RS 4
作業ツリー、または、ツリーオブジェクトとそれに依存するブロブやツリーオブジェクト(つまり、作業ツリーの保存された表現)、のいずれか。
.RE
.PP
tree object
.RS 4
ファイル名とモードのリスト、および関連するブロブやツリーオブジェクトへのrefを含むオブジェクト。<< def_tree,ツリー>>とディレクトリは同じ意味です。
.RE
.PP
tree\-ish (also treeish)
.RS 4
ツリーっぽい何か。ツリーオブジェクトに再帰的に逆参照できる
ツリーオブジェクト
または
オブジェクト
です。
コミットオブジェクト
を逆参照すると、その
リビジョン
の最上位
ディレクトリ> に対応するツリーオブジェクトが生成されます。*右記は全てツリーっぽい(tree\-ish)モノです: <<def_commit\-ish
、ツリーオブジェクト、ツリーオブジェクトを指す
タグオブジェクト
、タグオブジェクトを指すタグオブジェクト
.RE
.PP
unmerged index
.RS 4
マージされていないインデックスエントリを含むインデックス。
.RE
.PP
unreachable object
.RS 4
ブランチ
または
タグ
またはその他の参照から
到達可能
ではない(辿れない、ポイントされてない)
オブジェクト
。
.RE
.PP
upstream branch
.RS 4
当該のブランチからマージされる(または当該のブランチがリベースされる)デフォルトのブランチ。これは、
\fBbranch\&.<name>\&.remote\fR
や
\fBbranch\&.<name>\&.merge\fR
を介して構成されます。Aのアップストリームブランチが
\fBorigin/B\fR
の場合、「Aは
\fBorigin/B\fR
を追跡しています」と言うことがあります。
.RE
.PP
working tree
.RS 4
実際にチェックアウトされたファイル群のツリー。 作業ツリーには通常、
HEAD
コミットのツリーの内容に加えて、任意の、まだコミットされていないローカルの変更が含まれています。
.RE
.PP
worktree
.RS 4
(ワークツリー):リポジトリには、ゼロ(ベア・リポジトリ)または1つ以上の worktree を当てはめる(attach)ことができます。 1 つの「worktree」は「作業ツリー」(working tree)とリポジトリ・メタデータで構成され、 そのほとんどは単一のリポジトリの他の worktree 間で共有され、一部は worktree ごとに個別に維持されます(例: インデックスやHEADやMERGE_HEADなどの疑似ref(pseudorefs)、worktreeごとの ref や worktree ごとの構成ファイル)。
.RE
.SH "SEE ALSO"
.sp
\fBgittutorial\fR(7), \fBgittutorial-2\fR(7), \fBgitcvs-migration\fR(7), \fBgiteveryday\fR(7), \m[blue]\fBThe Git User\(cqs Manual\fR\m[]\&\s-2\u[1]\d\s+2
.SH "GIT"
.sp
Part of the \fBgit\fR(1) suite
.SH "NOTES"
.IP " 1." 4
The Git User\(cqs Manual
.RS 4
\%file:///home/hideo/share/doc/git-doc/user-manual.html
.RE
