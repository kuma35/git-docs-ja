'\" t
.\"     Title: git-commit-tree
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: 12/10/2022
.\"    Manual: Git Manual
.\"    Source: Git 2.38.0.rc1.238.g4f4d434dc6.dirty
.\"  Language: English
.\"
.TH "GIT\-COMMIT\-TREE" "1" "12/10/2022" "Git 2\&.38\&.0\&.rc1\&.238\&.g" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-commit-tree \- 新しいコミットオブジェクトを作成します
.SH "SYNOPSIS"
.sp
.nf
\fIgit commit\-tree\fR <tree> [(\-p <parent>)\&...]
\fIgit commit\-tree\fR [(\-p <parent>)\&...] [\-S[<keyid>]] [(\-m <message>)\&...]
                  [(\-F <file>)\&...] <tree>
.fi
.sp
.SH "DESCRIPTION"
.sp
これは通常、エンドユーザーが直接実行するものではありません。代わりに \fBgit-commit\fR(1) を参照してください。
.sp
提供されたツリーオブジェクトに基づいて新しいコミットオブジェクトを作成し、標準出力に新しいコミットオブジェクトIDを発行します。 \fB\-m\fR または \fB\-F\fR オプションが指定されていない限り、ログメッセージは標準入力から読み取られます。
.sp
\fB\-m\fR および \fB\-F\fR オプションは、任意の回数、任意の順序で指定できます。コミットログメッセージは、オプションが指定された順序で作成されます。
.sp
コミットオブジェクトには、任意の数の親を含めることができます。親が1つだけの場合、これは通常のコミットです。 複数の親を持つことで、コミットは複数の履歴行の間でマージされます。なお、最初のコミット(ルートコミット)には親はありません。
.sp
ツリーは作業ディレクトリの特定のディレクトリ状態を表しますが、コミットはある「時点」における状態を表し、そこに到達する方法を説明します。
.sp
あなたがその状態に関するメモをは何処に保存してもGitは気にしませんが、通常、コミットは新しい「HEAD」状態を識別します。実際のところGitは、\fB\&.git/HEAD\fR が指すファイルに結果を書き込む傾向にあり、最後にコミットされた状態が何であったかを常に確認できるようにしています。
.SH "OPTIONS"
.PP
<tree>
.RS 4
既存のツリーオブジェクト。
.RE
.PP
\fB\-p <parent>\fR
.RS 4
各
\fB\-p\fR
は、親コミットオブジェクトのIDを示します。
.RE
.PP
\fB\-m <message>\fR
.RS 4
コミットログメッセージの段落。これは複数回指定でき、各 <message> は独立した段落になります。
.RE
.PP
\fB\-F <file>\fR
.RS 4
指定されたファイルからコミットログメッセージを読み取ります。 標準入力から読み取るには、
\fB\-\fR
を使用します。 これは複数回指定でき、各ファイルの内容は独自した段落になります。
.RE
.PP
\fB\-S[<keyid>]\fR, \fB\-\-gpg\-sign[=<keyid>]\fR, \fB\-\-no\-gpg\-sign\fR
.RS 4
GPG署名コミット。
\fBkeyid\fR
引数はオプションで、デフォルトはコミッターIDです。指定する場合は、スペースなしでオプションに指定する必要があります。
\fB\-\-no\-gpg\-sign\fR
は、コマンドラインで前に指定した
\fB\-\-gpg\-sign\fR
オプションを無効にするのに役立ちます。
.RE
.SH "COMMIT INFORMATION"
.sp
コミットをカプセル化します:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
全ての親のオブジェクトID
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
作者名と電子メールアドレスと日付
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
コミッター名とコミッター電子メールアドレスとコミット日付
.RE
.sp
コミットコメントは標準入力から読み取られます。変更ログエントリが "<" リダイレクトを介して提供されない場合、「git commit\-tree」は、変更ログエントリがターミナルから入力されて ^D で終了するのを待つだけです。
.SH "DATE FORMATS"
.sp
\fBGIT_AUTHOR_DATE\fR と \fBGIT_COMMITTER_DATE\fR 環境変数は、以下の日付形式をサポートします:
.PP
Git internal format
.RS 4
これは
\fB<unix\-timestamp> <time\-zone\-offset>\fR
ここで、
\fB<unix\-timestamp>\fR
UNIXエポックからの秒数です。
\fB<time\-zone\-offset>\fR
はUTCからの正または負のオフセットです。 たとえば、CET(UTCより1時間進んでいます)は
\fB+0100\fR
です。
.RE
.PP
RFC 2822
.RS 4
RFC 2822で説明されている標準の電子メール形式。たとえば、
\fBThu, 07 Apr 2005 22:13:13 +0200\fR
。
.RE
.PP
ISO 8601
.RS 4
ISO 8601規格で指定されている日時(例:
\fB2005\-04\-07T22:13:13\fR)。パーサは、
\fBT\fR
文字の代わりにスペースも受け入れます。秒の小数部分は無視されます。たとえば、
\fB2005\-04\-07T22:13:13\&.019\fR
は
\fB2005\-04\-07T22:13:13\fR
として扱われます。
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
日付部分は、上記に加えて、
\fBYYYY\&.MM\&.DD\fR
または
\fBMM/DD/YYYY\fR
または
\fBDD\&.MM\&.YYYY\fR
形式が受け入れられます。
.sp .5v
.RE
.RE
.SH "DISCUSSION"
.sp
Gitは、ある程度までは文字エンコードに依存しません。
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
ブロブオブジェクトの内容は、解釈されていないバイトのシーケンスです。コアレベルでのエンコーディング変換はありません。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
パス名はUTF\-8正規化形式C(UTF\-8 normalization form C)でエンコードされます。これは、ツリーオブジェクト、インデックスファイル、ref名、およびコマンドライン引数、環境変数、構成ファイル(
\fB\&.git/config\fR
(\fBgit-config\fR(1)
参照) と
\fBgitignore\fR(5)
と
\fBgitattributes\fR(5)
と
\fBgitmodules\fR(5)) のパス名に適用されます。
.sp
コアレベルのGitは、パス名を単に非NULバイトのシーケンスとして扱い、パス名をエンコードする変換はありません(MacとWindowsを除く)。したがって、非ASCIIパス名の使用は、レガシー拡張ASCIIエンコーディングを使用するプラットフォームやファイルシステムでもほとんど機能します。ただし、そのようなシステムで作成されたリポジトリは、UTF\-8ベースのシステム(Linux、Mac、Windowsなど)では正しく機能しません。その逆も同様です。さらに、多くのGitベースのツールは、パス名がUTF\-8であると単純に想定しており、他のエンコーディングを正しく表示できません。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
コミットログメッセージは通常UTF\-8でエンコードされますが、他の拡張ASCIIエンコードもサポートされています。これには、ISO\-8859\-x、CP125xなどが含まれますが、UTF\-16/32、EBCDIC、およびCJKマルチバイトエンコーディング(GBK、Shift\-JIS、Big5、EUC\-x、CP9xxなど)は含まれません。
.RE
.sp
我々はコミットログメッセージをUTF\-8でエンコードすることをお勧めしますが、コアとGit Porcelainはどちらも、プロジェクトでUTF\-8を強制しないように設計されています。特定のプロジェクトのすべての参加者がレガシーエンコーディングを使用する方が便利だと感じた場合、Gitはそれを禁止しません。 ただし、覚えておくべきことがいくつかあります。
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
\fBgit commit\fR
と
\fBgit commit\-tree\fR
は、プロジェクトがレガシーエンコーディングを使用していることを明示的に指定しない限り、与えられたコミットログメッセージが有効なUTF\-8文字列のように見えない場合に警告を発します。明示的に指定する方法は、以下のように、
\fB\&.git/config\fR
ファイルに
\fBi18n\&.commitEncoding\fR
を含めることです。
.sp
.if n \{\
.RS 4
.\}
.nf
[i18n]
        commitEncoding = ISO\-8859\-1
.fi
.if n \{\
.RE
.\}
.sp
上記の設定で作成されたコミットオブジェクトは、
\fBencoding\fR
ヘッダーに
\fBi18n\&.commitEncoding\fR
の値を記録します。 これは、後でそれらを見る他の人々を助けるためです。このヘッダーがないということは、コミットログメッセージがUTF\-8でエンコードされていることを意味します。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
\fBgit log\fR
や
\fBgit show\fR
や
\fBgit blame\fR
とその仲間たちは、コミットオブジェクトの
\fBencoding\fR
ヘッダーを見て、特に指定がない限り、ログメッセージをUTF\-8に再コーディングしようとします。あなたは以下のように、
\fB\&.git/config\fR
ファイルの
\fBi18n\&.logOutputEncoding\fR
を使用して目的の出力エンコーディングを指定できます。
.sp
.if n \{\
.RS 4
.\}
.nf
[i18n]
        logOutputEncoding = ISO\-8859\-1
.fi
.if n \{\
.RE
.\}
.sp
この構成変数がない場合は、代わりに
\fBi18n\&.commitEncoding\fR
の値が使用されます。
.RE
.sp
UTF\-8への再コーディングは必ずしも可逆的な操作ではないため、我々はコミットが行われたときにコミットログメッセージを再コーディングしないことを意図的に選択したことに注意してください。
.SH "FILES"
.sp
/etc/mailname
.SH "SEE ALSO"
.sp
\fBgit-write-tree\fR(1) \fBgit-commit\fR(1)
.SH "GIT"
.sp
Part of the \fBgit\fR(1) suite
