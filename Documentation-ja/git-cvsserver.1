'\" t
.\"     Title: git-cvsserver
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: 12/10/2022
.\"    Manual: Git Manual
.\"    Source: Git 2.38.0.rc1.238.g4f4d434dc6.dirty
.\"  Language: English
.\"
.TH "GIT\-CVSSERVER" "1" "12/10/2022" "Git 2\&.38\&.0\&.rc1\&.238\&.g" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-cvsserver \- Git用のCVSサーバーエミュレーター
.SH "SYNOPSIS"
.sp
SSH:
.sp
.nf
export CVS_SERVER="git cvsserver"
\fIcvs\fR \-d :ext:user@server/path/repo\&.git co <HEAD_name>
.fi
.sp
.sp
pserver (/etc/inetd\&.conf):
.sp
.nf
cvspserver stream tcp nowait nobody /usr/bin/git\-cvsserver git\-cvsserver pserver
.fi
.sp
.sp
Usage:
.sp
.nf
\fIgit\-cvsserver\fR [<options>] [pserver|server] [<directory> \&...]
.fi
.sp
.SH "DESCRIPTION"
.sp
このアプリケーションは、GitのCVSエミュレーションレイヤーです。
.sp
非常に機能的です。 ただし、 すべてのメソッドが実装されているわけではなく、 実装されているメソッドについては、 すべてのスイッチが実装されているわけではありません。
.sp
テストは、 CLI CVSクライアントと、 Eclipse CVSプラグインの両方を使用して行われました。 ほとんどの機能は、これらのクライアントの両方で正常に機能します。
.SH "OPTIONS"
.sp
これらのオプションはすべて、サーバー側で適用された場合にのみ意味があります。 これらは、 \fBgit-daemon\fR(1) オプションにできるだけ似るように実装されています。
.PP
\fB\-\-base\-path <path>\fR
.RS 4
要求された CVSROOT の前に「path」を追加します
.RE
.PP
\fB\-\-strict\-paths\fR
.RS 4
サブディレクトリへの再帰を許可しない
.RE
.PP
\fB\-\-export\-all\fR
.RS 4
構成で
\fBgitcvs\&.enabled\fR
をチェックしないでください。 このオプションを使用する場合は、許可されるディレクトリのリスト(list of allowed directories)(下記参照)も指定する必要があります。
.RE
.PP
\fB\-V\fR, \fB\-\-version\fR
.RS 4
バージョン情報を出力して終了(exit)します
.RE
.PP
\fB\-h\fR, \fB\-H\fR, \fB\-\-help\fR
.RS 4
使用法を出力して終了(exit)します
.RE
.PP
<directory>
.RS 4
残りの引数は、ディレクトリのリストを提供します。 ディレクトリが指定されていない場合は、すべてが許可されます。 これらのディレクトリ内のリポジトリでは、
\fB\-\-export\-all\fR
が指定されていない限り、 引き続き
\fBgitcvs\&.enabled\fR
設定オプションが必要です。
.RE
.SH "LIMITATIONS"
.sp
CVS クライアントは、タグ付け、ブランチ、Git マージを実行することはできません。
.sp
「git\-cvsserver」は、GitブランチをCVSモジュールにマップします。 これは、ほとんどのCVSユーザーが期待するものとは大きく異なります。これは、CVSモジュールでは通常1つ以上のディレクトリを表すためです。
.SH "INSTALLATION"
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
pserverを介してCVSアクセスを提供する場合は、 /etc/inetd\&.conf に以下のような行を追加します
.sp
.if n \{\
.RS 4
.\}
.nf
   cvspserver stream tcp nowait nobody git\-cvsserver pserver
.fi
.if n \{\
.RE
.\}
.sp
注意: 一部のinetdサーバーでは、 argv[0] の値(つまり、プログラムが実行されたと想定する名前)とは関係なく、実行可能ファイルの名前を指定できます。 この場合、 /etc/inetd\&.conf の正しい行は以下のようになります
.sp
.if n \{\
.RS 4
.\}
.nf
   cvspserver stream tcp nowait nobody /usr/bin/git\-cvsserver git\-cvsserver pserver
.fi
.if n \{\
.RE
.\}
.sp
デフォルトでは、匿名(anonymous)アクセスのみがpserverによって提供されます。 コミットするには、pserverアカウントを作成する必要があります。 cvsserverに書き込みを許可するリポジトリの構成ファイルに gitcvs\&.authdb 設定を追加するだけです。たとえば以下のようにします:
.sp
.if n \{\
.RS 4
.\}
.nf
   [gitcvs]
        authdb = /etc/cvsserver/passwd
.fi
.if n \{\
.RE
.\}
.sp
これらのファイルの形式は、ユーザー名の後に暗号化されたパスワードが続きます。以下に例を示します:
.sp
.if n \{\
.RS 4
.\}
.nf
   myuser:sqkNi8zPf01HI
   myuser:$1$9K7FzU28$VfF6EoPYCJEYcVQwATgOP/
   myuser:$5$\&.NqmNH1vwfzGpV8B$znZIcumu1tNLATgV2l6e1/mY8RzhUDHMOaVOeL1cxV3
.fi
.if n \{\
.RE
.\}
.sp
これらのファイルを作成するには、 Apache に付属の htpasswd 機能を使用することができますが、 そのためには
\fB\-d\fR
オプション(またはシステムがサポートしている場合は
\fB\-B\fR)を使用する必要があります。
.sp
できれば、プラットフォームでパスワード・ハッシュの作成を管理するシステム固有のユーティリティ(Linux の mkpasswd や、 OpenBSD の encrypt や、NetBSD の pwhash など)を使用して、適切な場所に貼り付け(paste)します。
.sp
次に、pserverメソッドを介してあなたのパスワードを入力します。以下に例を示します:
.sp
.if n \{\
.RS 4
.\}
.nf
   cvs \-d:pserver:someuser:somepassword@server:/path/repo\&.git co <HEAD_name>
.fi
.if n \{\
.RE
.\}
.sp
PATHにGitツールを含める以外に、SSHアクセスに特別な設定は必要ありません。 CVS_SERVER環境変数を受け入れないクライアントがある場合は、
\fBgit\-cvsserver\fR
の名前を
\fBcvs\fR
に変更できます。
.sp
注意: 新しいCVSバージョン(>= 1\&.12\&.11)では、CVSROOTで直接CVS_SERVERを指定することもサポートしています
.sp
.if n \{\
.RS 4
.\}
.nf
   cvs \-d ":ext;CVS_SERVER=git cvsserver:user@server/path/repo\&.git" co <HEAD_name>
.fi
.if n \{\
.RE
.\}
.sp
これは、あなたの
\fBCVS/Root\fR
ファイルに保存されるので、常に正しい環境変数を設定することを心配する必要がないという利点があります。
\fBgit\-shell\fR
に制限されている SSH ユーザは CVS_SERVER でデフォルトを上書きする必要はありません(すべきでもありません)。 なぜなら
\fBgit\-shell\fR
は
\fBcvs\fR
を
\fBgit\-cvsserver\fR
と理解して、相手側が本当の
\fBcvs\fR
より良いものを実行していると見せかけているからです。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
CVSからアクセスできるようにするリポジトリごとに、リポジトリの構成を編集して、以下のセクションを追加する必要があります。
.sp
.if n \{\
.RS 4
.\}
.nf
   [gitcvs]
        enabled=1
        # optional for debugging
        logFile=/path/to/logfile
.fi
.if n \{\
.RE
.\}
.sp
注意:
\fBgit\-cvsserver\fR
を呼び出す各ユーザーが、ログファイルとデータベースへの書き込みアクセス権を持っていることを確認する必要があります(Database Backend
を参照してください)。SSH経由の書き込みアクセスを提供する場合は、 もちろん、ユーザーはGitリポジトリ自体への書き込みアクセス権も必要です。
.sp
また、
\fBcvs commit\fR
が機能するには、各リポジトリが「ベアリポジトリ」(Gitインデックスファイルなし)であることを確認する必要があります。
\fBgitcvs-migration\fR(7)
を参照してください。
.sp
特定のアクセス方法では、すべての構成変数をオーバーライドすることもできます。 有効なメソッド名は
\fBext\fR
(SSHアクセス用) と
\fBpserver\fR
です。 以下の設定例では、SSH経由のアクセスを許可しながら、pserverアクセスを無効にします。
.sp
.if n \{\
.RS 4
.\}
.nf
   [gitcvs]
        enabled=0

   [gitcvs "ext"]
        enabled=1
.fi
.if n \{\
.RE
.\}
.sp
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
あなたがチェックアウトコマンドで、CVSROOT/CVS_SERVER を直接指定しなくて、自動的に あなたの
\fBCVS/Root\fR
ファイルに保存した場合は、環境で明示的に設定する必要があります。 CVSROOTは通常どおりに設定する必要がありますが、ディレクトリは適切なGitリポジトリを指している必要があります。 上記のように、
\fBgit\-shell\fR
に制限されて無いSSHクライアントの場合、 CVS_SERVERを
\fBgit\-cvsserver\fR
に設定する必要があります。
.sp
.if n \{\
.RS 4
.\}
.nf
   export CVSROOT=:ext:user@server:/var/git/project\&.git
   export CVS_SERVER="git cvsserver"
.fi
.if n \{\
.RE
.\}
.sp
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
コミットを行うSSHクライアントの場合、サーバー側の \&.ssh/environment ファイル(またはシェルによっては \&.bashrc など)が、 GIT_AUTHOR_NAMEとGIT_AUTHOR_EMAILとGIT_COMMITTER_NAMEとGIT_COMMITTER_EMAIL の為に適切な値をエクスポートすることを確認します。 ログインシェルがbashであるSSHクライアントの場合、\&.bashrc が妥当な代替手段となる可能性があります。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}
これで、クライアントはプロジェクトをチェックアウトできるようになります。 CVSの「モジュール」名を使用して、チェックアウトするGitの「ヘッド」を示します。 これにより、
\fB\-d <dir_name>\fR
で特に指定しない限り、新しくチェックアウトしたディレクトリの名前も設定されます。 たとえば、以下は「master」ブランチを「project\-master」ディレクトリにチェックアウトします:
.sp
.if n \{\
.RS 4
.\}
.nf
   cvs co \-d project\-master master
.fi
.if n \{\
.RE
.\}
.sp
.RE
.SH "DATABASE BACKEND"
.sp
\fBgit\-cvsserver\fR は、Gitヘッド(つまり、CVSモジュール)ごとに1つのデータベースを使用して、リポジトリに関する情報を格納し、一貫したCVSリビジョン番号を維持します。 データベースは、コミットするたびに更新(つまり、書き込み)する必要があります。
.sp
(\fBgit\-cvsserver\fR を使用するのではなく、)コミットが \fBgit\fR を使用して直接行われる場合、アクセス方法や要求された操作に関係なく、 \fBgit\-cvsserver\fR による次のリポジトリアクセスで更新を行う必要があります。
.sp
つまり、(たとえば、pserverメソッドを使用して、)読み取りアクセスのみを提供している場合でも、 \fBgit\-cvsserver\fR はデータベースへの書き込みアクセス権を持っている必要があります(それ以外の場合は、 \fBgit\-cvsserver\fR が実行されるたびにデータベースが最新であることを確認する必要があります)。
.sp
デフォルトでは、Gitディレクトリにある \fBgitcvs\&.<module_name>\&.sqlite\fR という名前のSQLiteデータベースを使用します。 SQLiteバックエンドは書き込み時にデータベースファイルと同じディレクトリに一時ファイルを作成するため、 \fBgit\-cvsserver\fR を使用するユーザーにディレクトリへの書き込みアクセスを許可せずにデータベースファイルへの書き込みアクセスを許可するだけでは不十分な場合があることに注意してください 。
.sp
追跡しているブランチが変更された後、データベースを一貫した形式で確実に再生成することはできません。 例:マージされたブランチの場合、 \fBgit\-cvsserver\fR は開発の1つのブランチのみを追跡し、 \fBgit merge\fR の後、増分更新されたデータベースは、最初から再生成されたデータベースとは異なるブランチを追跡し、一貫性のないCVSリビジョン番号を引き起こす可能性があります。 \fBgit\-cvsserver\fR には、マージ前に段階的に実行された場合にどのブランチを選択したかを知る方法がありません。 したがって、データベースを完全にまたは部分的に(古いバックアップから)再生成する必要がある場合は、既存のCVSサンドボックスを疑う必要があります。
.sp
以下の構成変数を使用してデータベースバックエンドを構成できます:
.SS "Configuring database backend"
.sp
\fBgit\-cvsserver\fR は Perl DBI モジュールを使用します。 これらの変数を変更する場合、特に \fBDBI\->connect()\fR については、そのドキュメントもお読みください。
.PP
gitcvs\&.dbName
.RS 4
データベース名。 正確な意味は、選択したデータベースドライバーによって異なります。SQLiteの場合、これはファイル名です。 変数置換をサポートします(下記参照)。 セミコロン(\fB;\fR)を含めることはできません。 デフォルト: ：\fB%Ggitcvs\&.%m\&.sqlite\fR
.RE
.PP
gitcvs\&.dbDriver
.RS 4
使用DBIドライバー。 ここで使用可能なドライバーを指定できますが、機能しない場合があります。 cvsserverは「DBD::SQLite」でテストされ、「DBD::Pg」で動作報告があり、「DBD::mysql」で動作しないことが報告されています。 これは実験的な機能と見なしてください。 コロン(\fB:\fR)を含めることはできません。 デフォルト:
\fBSQLite\fR
.RE
.PP
gitcvs\&.dbuser
.RS 4
データベースユーザー。 SQLiteにはデータベースユーザーの概念がないため、
\fBdbDriver\fR
を設定する場合にのみ役立ちます。 変数置換(variable substitution)をサポートします(下記参照)。
.RE
.PP
gitcvs\&.dbPass
.RS 4
データベースのパスワード。 SQLiteにはデータベースパスワードの概念がないため、
\fBdbDriver\fR
を設定する場合にのみ役立ちます。
.RE
.PP
gitcvs\&.dbTableNamePrefix
.RS 4
データベーステーブル名の接頭辞。 変数置換をサポートします(下記参照)。 アルファベット以外の文字(non\-alphabetic characters)はすべてアンダースコアに置き換えられます。
.RE
.sp
すべての変数は、アクセス方法ごとに設定することもできます。 上記 を参照してください。
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBVariable substitution\fR
.RS 4
.sp
\fBdbDriver\fR と \fBdbUser\fR では、以下の変数を使用できます:
.PP
%G
.RS 4
Gitディレクトリ名
.RE
.PP
%g
.RS 4
Gitディレクトリ名。英数字 と
\fB\&.\fR
と
\fB\-\fR
を除くすべての文字が
\fB_\fR
に置き換えられます(これにより、ディレクトリ名をファイル名として使用することが容易になります)。
.RE
.PP
%m
.RS 4
CVSモジュール/Gitヘッド名
.RE
.PP
%a
.RS 4
アクセス方法("ext" または "pserver" のいずれか)
.RE
.PP
%u
.RS 4
\fBgit\-cvsserver\fR
を実行しているユーザーの名前。 名前を判別できない場合は、数値uidが使用されます。
.RE
.RE
.SH "ENVIRONMENT"
.sp
これらの変数により、状況によってはコマンドラインオプションが不要になり、git\-shellを使用して使用を制限しやすくなります。
.PP
GIT_CVSSERVER_BASE_PATH
.RS 4
この変数は
\fB\-\-base\-path\fR
の引数を置き換えます。
.RE
.PP
GIT_CVSSERVER_ROOT
.RS 4
この変数は、単一のディレクトリを指定し、\fB<directory>\&.\&.\&.\fR
引数リストを置き換えます。
\fB\-\-export\-all\fR
が指定されていない限り、リポジトリには引き続き
\fBgitcvs\&.enabled\fR
設定オプションが必要です。
.RE
.sp
これらの環境変数が設定されている場合、対応するコマンドライン引数は使用されない場合があります。
.SH "ECLIPSE CVS CLIENT NOTES"
.sp
Eclipse CVSクライアントでチェックアウトを取得するには:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
メニューの "Create a new project \(-> From CVS checkout"
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
新しい場所(location)を作成します。 適切なプロトコルを選択する方法の詳細については、以下のnotesを参照してください。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
利用可能な「モジュール」を参照します。 リポジトリ内のヘッドのリストが表示されます。 そこからツリーを閲覧することはできません。 表示されるのはヘッドだけです。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
チェックアウトする ブランチ/タグ を尋ねられたら、
\fBHEAD\fR
を選択します。 \&.project ファイルのコミットを回避するには、「launch commit wizard」のチェックを外します。
.RE
.sp
プロトコルに関する注意: pserver経由で匿名アクセスを使用している場合は、それを選択するだけです。 SSHアクセスを使用している場合は、「ext」プロトコルを選択し、 Preferences\(->Team\(->CVS\(->ExtConnectionペインで「ext」アクセスを構成する必要があります。 CVS_SERVERを \fBgitcvsserver\fR に設定します。 なお、 \fBext\fR を使用する場合、パスワードのサポートは良くないので、SSHキーの設定を必ずしてください。
.sp
または、Eclipseが提供する非標準のextsshプロトコルを使用することもできます。 その場合、CVS_SERVERは無視され、サーバー上のcvsユーティリティを \fBgit\-cvsserver\fR に置き換えるか、 \fB\&.bashrc\fR を操作して、「cvs」を呼び出すと「git\-cvsserver」が効果的に呼び出されるようにする必要があります。
.SH "動作が確認されているクライアント"
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
CVS 1\&.12\&.9 on Debian
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
CVS 1\&.11\&.17 on MacOSX (from Fink package)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Eclipse 3\&.0, 3\&.1\&.2 on MacOSX (「Eclipse CVS Client Notes」参照)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
TortoiseCVS
.RE
.SH "OPERATIONS SUPPORTED"
.sp
checkout, diff, status, update, log, add, remove, commit を含む、通常の使用に必要なすべての操作がサポートされています。
.sp
CVSタグまたはリビジョン番号(通常は \fB\-r\fR)を読み取るほとんどのCVSコマンド引数は機能し、任意のgit refspec(タグ、ブランチ、コミットIDなど)もサポートします。 ただし、デフォルト以外のブランチのCVSリビジョン番号は十分にエミュレートされておらず、cvsログにはタグまたはブランチがまったく表示されません。 (非メインブランチのCVSリビジョン番号は、表面的にはCVSリビジョン番号に似ていますが、実際には、ブランチポイント以降のリビジョン数を表すのではなく、git commit IDを直接エンコードします。)
.sp
注意: 特定のブランチをチェックアウトする方法は2つあることに注意してください。 この文書の他の場所で説明されているように、cvs checkoutの「module」パラメーターはブランチ名として解釈され、メインブランチになります。 cvs update \-rを使用して別のブランチを一時的にスティッキーにした場合でも、特定のサンドボックスのメインブランチのままです。 あるいは、モジュールがまだ「メイン」ブランチである場合でも、\-r引数は実際にチェックアウトする他のブランチを示すことができます。 （現在実装分の)トレードオフ: 新しい「モジュール」ごとに、指定されたモジュールの履歴を持つ新しいデータベースがディスク上に作成され、データベースが作成された後、そのメインブランチに対する操作は高速になります。 または、\-rは余分なディスク領域を必要としませんが、cvs updateなどの多くの操作では大幅に遅くなる可能性があります。
.sp
CVSで許可されていない文字を含む git refspec を参照する場合は、2つのオプションがあります。 まず、適切なCVS \fB\-r\fR 引数に直接 git refspec を提供するだけで機能する場合があります。 一部のCVSクライアントは、引数の健全性チェックをあまり行っていないようです。 次に、それが失敗した場合は、CVSタグで有効な文字のみを使用する特殊文字エスケープメカニズムを使用できます。 書式の4文字または5文字のシーケンス(アンダースコア(\fB_\fR)と、ダッシュ(\fB\-\fR)と、1〜2字と、ダッシュ(\fB\-\fR))は、1〜2字に基づいてさまざまな文字をエンコードできます: スラッシュ(\fB/\fR)の場合は \fBs\fR 、または ピリオド(\fB\&.\fR)の場合は \fBp\fR 、または アンダースコア(\fB_\fR)の場合は \fBu\fR 、または 2桁の16進数で表される任意のバイト値(通常はASCIIコード。またはUTF\-8でエンコードされた文字の一部)。
.sp
従来の監視操作(edit、watch 関連)はサポートされていません。 エクスポートとタグ付け(タグとブランチ)は、この段階ではサポートされていません。
.SS "CRLF Line Ending Conversions"
.sp
デフォルトでは、サーバーはすべてのファイルに対して \fB\-k\fR モードを空白のままにします。これにより、CVSクライアントはそれらをテキストファイルとして扱い、一部のプラットフォームでは行末変換の対象になります。
.sp
\fBgitcvs\&.usecrlfattr\fR 構成変数を設定することにより、サーバーで行末変換属性を使用してファイルの \fB\-k\fR モードを設定することができます。 行末変換の詳細については、 \fBgitattributes\fR(5) を参照してください。
.sp
あるいは、 \fBgitcvs\&.usecrlfattr\fR 構成が有効になっていない場合、または属性でファイル名の自動検出が許可されていない場合、サーバーはデフォルト設定に \fBgitcvs\&.allBinary\fR 構成を使用します。 \fBgitcvs\&.allBinary\fR が設定されている場合、特に指定されていないファイルはデフォルトで \fB\-kb\fR モードになります。 それ以外の場合、 \fB\-k\fR モードは空白のままになります。 ただし、 \fBgitcvs\&.allBinary\fR が \fBguess\fR に設定されている場合、ファイルの内容に基づいて正しい \fB\-k\fR モードが推測されます。
.sp
cvsとの一貫性を最大限に保つには、 \fBgitcvs\&.usecrlfattr\fR をtrueに設定し、 \fBgitcvs\&.allBinary\fR を \fBguess\fR に設定して、デフォルトをオーバーライドするのがおそらく最善です。
.SH "DEPENDENCIES"
.sp
\fBgit\-cvsserver\fR は DBD::SQLite に依存します。
.SH "GIT"
.sp
Part of the \fBgit\fR(1) suite
