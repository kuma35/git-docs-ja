'\" t
.\"     Title: gitformat-commit-graph
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: 12/10/2022
.\"    Manual: Git Manual
.\"    Source: Git 2.38.0.rc1.238.g4f4d434dc6.dirty
.\"  Language: English
.\"
.TH "GITFORMAT\-COMMIT\-G" "5" "12/10/2022" "Git 2\&.38\&.0\&.rc1\&.238\&.g" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
gitformat-commit-graph \- Git コミット・グラフ形式
.SH "SYNOPSIS"
.sp
.nf
$GIT_DIR/objects/info/commit\-graph
$GIT_DIR/objects/info/commit\-graphs/*
.fi
.sp
.SH "DESCRIPTION"
.sp
Gitコミットグラフには、コミットOIDのリストと、以下のような関連するメタデータが格納されます:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
コミットの世代番号。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
ルートツリーOID。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
コミット日付。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
グラフファイル内の位置参照を使用して保存されたコミットの親。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
要求された場合、コミットとその最初の親の間で変更されたパスを伝えるコミットのブルームフィルター
.RE
.sp
これらの位置参照は、コミット OID のリスト内の配列位置に対応する符号なし 32 ビット整数として格納されます。 親を追跡するために使用するいくつかの特別な定数により、最大で (1 << 30) + (1 << 29) + (1 << 28) \- 1 (約 18 億) のコミットを格納できます。
.SH "COMMIT GRAPH FILES HAVE THE FOLLOWING FORMAT:"
.sp
グラフに余分なデータを追加する拡張を可能にするために、ボディを「チャンク」に編成し、ぼでぃの先頭にバイナリ ルックアップ テーブルを提供します。 ヘッダーには、チャンク数やハッシュ タイプなどの特定の値が含まれます。
.sp
すべての複数バイト数値はネットワークバイトオーダーです。
.SS "HEADER:"
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
4バイト シグネチャ:
.sp
シグネチャは: {\fIC\fR,
\fIG\fR,
\fIP\fR,
\fIH\fR}
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
1バイト バージョン番号:
.sp
現在、有効なバージョンは 1 のみです。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
1バイト ハッシュバージョン
.sp
以下の値からハッシュ長(H)を推測します:
.sp
.if n \{\
.RS 4
.\}
.nf
1 => SHA\-1
2 => SHA\-256
.fi
.if n \{\
.RE
.\}
.sp
ハッシュタイプがリポジトリのハッシュアルゴリズムと一致しない場合、コミットグラフファイルは無視され、ユーザーに警告が表示されます。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
1バイト チャンクの数\(co
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
1バイト ベースコミットグラフの数(B)
.sp
この値からベースグラフチャンクの長さ(H*B)を推測します。
.RE
.SS "CHUNK LOOKUP:"
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
(C + 1) * 12 バイト チャンクの目次をリストします:
.sp
最初の 4 バイトはチャンク ID を表します。 値 0 は終了ラベルです。 他の 8 バイトは、チャンクが始まる現在のファイル内バイトオフセットを提供します。 (チャンクはファイル内で連続して並べられているため、必要に応じて次のチャンク位置を使用して長さを推測できます。) 各チャンク ID は最大 1 回しか表れせん。
.RE
.sp
CHUNK LOOKUP は、チャンクベースのファイル形式の目次とマッチします。 \fBgitformat-chunk\fR(5) を参照してください。
.SS "CHUNK DATA:"
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBOID Fanout (ID: {O, I, D, F}) (256 * 4 bytes)\fR
.RS 4
.sp
i 番目のエントリ F[i] には、 最初のバイトが最大で i 個の OID の数が格納されます。 したがって、 F[255] にはコミットの総数 (N) が格納されます。
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBOID Lookup (ID: {O, I, D, L}) (N * H bytes)\fR
.RS 4
.sp
昇順でソートされた、グラフ内のすべてのコミットの OID。
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBCommit Data (ID: {C, D, A, T }) (N * (H + 16) bytes)\fR
.RS 4
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
最初の H バイトは、ルートツリーの OID 用です。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
次の 8 バイトは、i 番目のコミットの最初の 2 つの親の位置用です。 その位置に親がいない場合は、値 0x70000000 を格納します。 親が 3 つ以上ある場合、2 番目の値の最上位ビットがオンになり、他のビットは配列位置を Extra Edge List チャンクに格納します。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
その次の 8 バイトには、コミットのトポロジレベル(世代番号 v1)とエポックからのコミット時間(秒単位)が格納されます。 世代番号は最初の 4 バイトの上位 30 ビットを使用し、コミット時間はその次の 4 バイトの 32 ビットと最下位バイトの下位 2 ビットを使用して、コミット時間の 33 番目と 34 番目のビットを格納します。
.RE
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBGeneration Data (ID: {G, D, A, 2 }) (N * 4 bytes) [Optional]\fR
.RS 4
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
この 4 バイト値のリストには、コミットデータチャンクと同じ順序で配置された、コミットの修正されたコミット日付オフセットが格納されます。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
修正されたコミット日付オフセットが 31 ビット以内に格納できない場合、値の最上位ビットがオンになり、他のビットは修正されたコミット日付の位置をジェネレーション データ オーバーフロー チャンク(Generation Data Overflow chunk)に格納します。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
ジェネレーション データ チャンクは、互換性のあるバージョンの Git によってコミット グラフ ファイルが書き込まれた場合にのみ存在し、分割されたコミット グラフ チェーンの場合、最上層にもジェネレーション データ チャンクがあります。
.RE
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBGeneration Data Overflow (ID: {G, D, O, 2 }) [Optional]\fR
.RS 4
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
この 8 バイト値のリストには、31 ビット内に格納できない修正されたコミット日付オフセットを持つコミットの修正されたコミット日付オフセットが格納されます。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
ジェネレーション データ オーバーフロー チャンクは、ジェネレーション データ チャンクが存在し、少なくとも 1 つ以上修正されたコミット日付オフセットが 31 ビット内に格納できない場合にのみ存在します。
.RE
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBExtra Edge List (ID: {E, D, G, E}) [Optional]\fR
.RS 4
.sp
この 4 バイト値のリストには、すべてのオクトパス・マージの 2 番目から n 番目の親が格納されます。 コミット・データの 2 番目の親の値は、 このリスト内の配列位置を最上位ビットをオンにして格納します。 その配列位置から開始して、 最上位ビットがオンの値に到達するまで、 親のコミット位置のこのリストを繰り返します。 他のビットは、 最後の親の位置に対応します。
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBBloom Filter Index (ID: {B, I, D, X}) (N * 4 bytes) [Optional]\fR
.RS 4
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
i 番目のエントリ BIDX[i] には、コミット 0 からコミット i までのすべてのブルームフィルターのバイト数が、辞書順で格納されます。 i 番目のコミットのブルーム フィルターは、BIDX[i\-1] から BIDX[i] (およびヘッダー長) に及びます。ここで、BIDX[\-1] は 0 です。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
BDAT チャンクが存在しない場合、BIDX チャンクは無視されます。
.RE
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBBloom Filter Data (ID: {B, D, A, T}) [Optional]\fR
.RS 4
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
3 つの符号なし 32 ビット整数で構成されるヘッダーで始まります:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
使用されているハッシュ・アルゴリズムのバージョン。 現在、
\fBhttps://en\&.wikipedia\&.org/wiki/MurmurHash#Algorithm\fR
で説明されているとおりに実装された murmur3 ハッシュの 32 ビット・バージョンに対応する値 1 と、
\fBhttps://doi\&.org/10\&.1007/978\-3\-540\-30494\-4_26\fR
"Bloom Filters in Probabilistic Verification" で説明されているシード値 0x293ae76f および 0x7e646e2 を使用する二重ハッシュ手法(double hashing technique)のみをサポートしています。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
パスがハッシュ化される回数、 つまり、コミットにおいてファイルが存在するかどうかを累積的に判断するビット位置の数です。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
ブルーム・フィルターのエントリあたりのビット
\fBb\fR
の最小数。 フィルタに
\fBn\fR
個のエントリが含まれる場合、 フィルタ・サイズは、 n*b ビットを含む 64 ビット ワードの最小数です。
.RE
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
チャンクの残りの部分は、コミットに対して計算されたすべてのブルーム・フィルター(Bloom filter)を辞書順で連結したものです。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
注意: 変更がないコミット、または 512 を超える変更があるコミットは、 長さが 1 のブルーム・フィルターを持ち、すべてのビットがそれぞれ 0 または 1 に設定されます。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
BDAT チャンクは、 BIDX が存在する場合にのみ存在します。
.RE
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBBase Graphs List (ID: {B, A, S, E}) [Optional]\fR
.RS 4
.sp
この H バイト・ハッシュのリストは、 コミット・グラフ・チェーンを形成する一連の B コミット・グラフ・ファイルを記述します。 このファイルの OID ルックアップ・チャンクの i 番目のコミットのグラフ位置は、 i にすべてのベース・グラフのコミット数を加えた値に等しくなります。 B がゼロでない場合、 このチャンクが存在する必要があります。
.RE
.SS "TRAILER:"
.sp
上記すべての H バイト ハッシュ チェックサム。
.SH "HISTORICAL NOTES:"
.sp
Generation Data (GDA2) および Generation Data Overflow (GDO2) チャンクのチャンク ID には \fB2\fR という数字が含まれています。 これは、 以前のバージョンの Git が ID \fBGDAT\fR および \fBGDOV\fR を使用してこれらのチャンクに誤ったデータを書き込んだためです。 ID を変更することで、 Git の新しいバージョンは古いチャンクを黙って無視し、 誤ったデータを信頼することなく新しい情報を書き込みます。
.SH "GIT"
.sp
Part of the \fBgit\fR(1) suite
