'\" t
.\"     Title: giteveryday
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: 12/10/2022
.\"    Manual: Git Manual
.\"    Source: Git 2.38.0.rc1.238.g4f4d434dc6.dirty
.\"  Language: English
.\"
.TH "GITEVERYDAY" "7" "12/10/2022" "Git 2\&.38\&.0\&.rc1\&.238\&.g" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
giteveryday \- Git日常利用に役立つ最小限のコマンドセット
.SH "SYNOPSIS"
.sp
Git日常利用の為の20程度のコマンド
.SH "DESCRIPTION"
.sp
日常のGit利用に役立つコマンドの小さなセットを説明するため、Gitユーザーを大きく4つのカテゴリに分類します。
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
開発者個人(スタンドアローン)
のコマンドは 一人で作業する人でも、コミットする人には不可欠です。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
他の人と一緒に作業する場合は、開発者個人(グループプロジェクト参加者)
セクションにリストされているコマンドも必要になります。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
インテグレーター
役の人々は、 上記に加えて更に幾つかのコマンドを学ぶ必要があります。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
リポジトリ管理
コマンドは、 Gitリポジトリの管理と提供を担当するシステム管理者向けです。
.RE
.SH "INDIVIDUAL DEVELOPER (STANDALONE)"
.sp
独立した個々の開発者は、他の人とパッチを交換せず、以下のコマンドを使用して、単一のリポジトリで単独で作業します。
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBgit-init\fR(1)
新しいリポジトリを作成します。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBgit-log\fR(1)
何が起こったのか確認します。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBgit-switch\fR(1)
と
\fBgit-branch\fR(1)
ブランチを切り替えます。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBgit-add\fR(1)
インデックスファイルを管理します。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBgit-diff\fR(1)
と
\fBgit-status\fR(1)
を使用して、あなたは何をしている最中か確認します。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBgit-commit\fR(1)
を使用して、現在のブランチを進めます。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBgit-restore\fR(1)
を使用して、変更を元に戻します(undo)。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBgit-merge\fR(1)
は、ローカルブランチ間でマージします。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBgit-rebase\fR(1)
は、トピックブランチを保守します。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBgit-tag\fR(1)
を使用して、既知のポイントをマークします。
.RE
.SS "Examples"
.PP
新しいリポジトリの開始点としてtarballを使用します
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
$ tar zxf frotz\&.tar\&.gz
$ cd frotz
$ git init
$ git add \&. \fB(1)\fR
$ git commit \-m "import of frotz source tree\&."
$ git tag v2\&.43 \fB(2)\fR
.fi
.if n \{\
.RE
.\}
.sp
\fB1. \fRあなたが現在いるディレクトリ下のすべてをaddします。
.br
\fB2. \fR軽量で注釈のないタグを作成します。
.br
.RE
.PP
トピックブランチを作成して開発します
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
$ git switch \-c alsa\-audio \fB(1)\fR
$ edit/compile/test
$ git restore curses/ux_audio_oss\&.c \fB(2)\fR
$ git add curses/ux_audio_alsa\&.c \fB(3)\fR
$ edit/compile/test
$ git diff HEAD \fB(4)\fR
$ git commit \-a \-s \fB(5)\fR
$ edit/compile/test
$ git diff HEAD^ \fB(6)\fR
$ git commit \-a \-\-amend \fB(7)\fR
$ git switch master \fB(8)\fR
$ git merge alsa\-audio \fB(9)\fR
$ git log \-\-since=\*(Aq3 days ago\*(Aq \fB(10)\fR
$ git log v2\&.43\&.\&. curses/ \fB(11)\fR
.fi
.if n \{\
.RE
.\}
.sp
\fB1. \fR新しいトピックブランチを作成します。
.br
\fB2. \fR\fBcurses/ux_audio_oss\&.c\fR
で失敗した変更を元に戻します(revert)。
.br
\fB3. \fRあなたは新しいファイルを追加したかどうかをGitに伝える必要があります。 後で
\fBgit commit \-a\fR
を実行すると、削除と変更が捕捉されます。
.br
\fB4. \fRコミットしようとしている変更を確認します。
.br
\fB5. \fRあなたがテストしたと署名(sign\-off)して、全てをコミットします。
.br
\fB6. \fR前のコミットを含むすべての変更を確認します。
.br
\fB7. \fR元のメッセージを流用して、以前のコミットを修正し、すべての新しい変更を追加します。
.br
\fB8. \fRmasterブランチに切り替えます。
.br
\fB9. \fRトピックブランチをあなたのmasterブランチへマージします。
.br
\fB10. \fRコミットログを確認します。出力を制限する他の形式を組み合わせて、
\fB\-10\fR
(最大10個のコミットを表示）、
\fB\-\-until=2005\-12\-10\fR
などを含めることができます。
.br
\fB11. \fR\fBv2\&.43\fR
タグ以降 、\fBcurses/\fR
ディレクトリにあるものに影響を与える変更のみを表示します。
.br
.RE
.SH "INDIVIDUAL DEVELOPER(PARTICIPANT;グループプロジェクト参加者)"
.sp
グループプロジェクトの参加者として作業する開発者個人は、他の人と連絡する方法を学ぶ必要があり、スタンドアロンの開発者個人が必要とするコマンドに加えて、これらのコマンドを使用します。
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBgit-clone\fR(1)
をアップストリームから実行して、あなたのローカルリポジトリを準備します。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBgit-pull\fR(1)
と
\fBgit-fetch\fR(1)
により、 "origin" をアップストリームと共に最新の状態に保ちます。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
CVSスタイルの共有リポジトリワークフローを採用している場合、共有リポジトリのために
\fBgit-push\fR(1)
を使います。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Linuxカーネルスタイルのパブリックフォーラムワークフローを採用している場合に、
\fBgit-format-patch\fR(1)
は電子メール送信を準備します。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBgit-send-email\fR(1)
を使用して、MUAによる破損なしに電子メール送信を送信します。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBgit-request-pull\fR(1)
を使用して、あなたのアップストリームがプルする変更の概要を作成します。
.RE
.SS "Examples"
.PP
アップストリームのクローンを作成して作業します。 変更をアップストリームに送ります。
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
$ git clone git://git\&.kernel\&.org/pub/scm/\&.\&.\&./torvalds/linux\-2\&.6 my2\&.6
$ cd my2\&.6
$ git switch \-c mine master \fB(1)\fR
$ edit/compile/test; git commit \-a \-s \fB(2)\fR
$ git format\-patch master \fB(3)\fR
$ git send\-email \-\-to="person <email@example\&.com>" 00*\&.patch \fB(4)\fR
$ git switch master \fB(5)\fR
$ git pull \fB(6)\fR
$ git log \-p ORIG_HEAD\&.\&. arch/i386 include/asm\-i386 \fB(7)\fR
$ git ls\-remote \-\-heads http://git\&.kernel\&.org/\&.\&.\&./jgarzik/libata\-dev\&.git \fB(8)\fR
$ git pull git://git\&.kernel\&.org/pub/\&.\&.\&./jgarzik/libata\-dev\&.git ALL \fB(9)\fR
$ git reset \-\-hard ORIG_HEAD \fB(10)\fR
$ git gc \fB(11)\fR
.fi
.if n \{\
.RE
.\}
.sp
\fB1. \fRmaster から新ブランチ
\fBmine\fR
を作成し、
\fBmine\fR
でチェックアウトします。
.br
\fB2. \fR必要に応じてこの作業を繰り返します。
.br
\fB3. \fRmasterに関連して、あなたのブランチからパッチを抽出します。
.br
\fB4. \fRそしてそれらを電子メールで送ります。
.br
\fB5. \fR\fBmaster\fR
に戻り、最新情報を確認する準備をします
.br
\fB6. \fR\fBgit pull\fR
はデフォルトで
\fBorigin\fR
からフェッチし、現在のブランチにマージします。
.br
\fB7. \fRプルした直後に、前回チェックしてから上流で行われた変更を、関心のある領域でのみ確認します。
.br
\fB8. \fR(不明な場合)外部リポジトリのブランチ名を確認します。
.br
\fB9. \fR指定のリポジトリから、指定のブランチ
\fBALL\fR
をフェッチしマージします。
.br
\fB10. \fRプルしたのを元に戻します。(revert)
.br
\fB11. \fRガベージコレクションは、元に戻されたプルからゴミオブジェクト(leftover objects)を収集します。
.br
.RE
.PP
別のリポジトリにプッシュします。
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
satellite$ git clone mothership:frotz frotz \fB(1)\fR
satellite$ cd frotz
satellite$ git config \-\-get\-regexp \*(Aq^(remote|branch)\e\&.\*(Aq \fB(2)\fR
remote\&.origin\&.url mothership:frotz
remote\&.origin\&.fetch refs/heads/*:refs/remotes/origin/*
branch\&.master\&.remote origin
branch\&.master\&.merge refs/heads/master
satellite$ git config remote\&.origin\&.push \e
           +refs/heads/*:refs/remotes/satellite/* \fB(3)\fR
satellite$ edit/compile/test/commit
satellite$ git push origin \fB(4)\fR

mothership$ cd frotz
mothership$ git switch master
mothership$ git merge satellite/master \fB(5)\fR
.fi
.if n \{\
.RE
.\}
.sp
\fB1. \fRマザーシップ機には、ホームディレクトリの下にfrotzリポジトリがあります。そこからクローンを作成して、サテライト機でリポジトリを開始します。
.br
\fB2. \fRcloneは、これらの構成変数をデフォルトで設定します。 これは、マザーシップ機のブランチをフェッチしてローカルの
\fBremotes/origin/*\fR
リモートトラッキングブランチに保存するために
\fBgit pull\fR
を手配します。
.br
\fB3. \fRすべてのローカルブランチをマザーシップ機の対応するブランチにプッシュするために
\fBgit push\fR
を手配します。
.br
\fB4. \fRpushは、マザーシップ機の
\fBremotes/satellite/*\fR
リモートトラッキングブランチへすべての作業をstashします。これをバックアップ方法として使用できます。同様に、あなたはそのマザーシップ機があなたから「フェッチされた」ふりをすることができます(アクセスが一方的な場合に便利です)。
.br
\fB5. \fRマザーシップ機で、サテライト機で行われた作業をmasterブランチにマージします。
.br
.RE
.PP
Branch off of a specific tag\&.
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
$ git switch \-c private2\&.6\&.14 v2\&.6\&.14 \fB(1)\fR
$ edit/compile/test; git commit \-a
$ git checkout master
$ git cherry\-pick v2\&.6\&.14\&.\&.private2\&.6\&.14 \fB(2)\fR
.fi
.if n \{\
.RE
.\}
.sp
\fB1. \fRよく知られている(ただし多少遅れている)タグに基づいてプライベートブランチを作成します。
.br
\fB2. \fRforward port all changes in
\fBprivate2\&.6\&.14\fR
branch to
\fBmaster\fR
branch without a formal "merging"\&. Or longhand +
\fBgit format\-patch \-k \-m \-\-stdout v2\&.6\&.14\&.\&.private2\&.6\&.14 | git am \-3 \-k\fR
.br
.RE
.sp
別の参加者送信メカニズム(participant submission mechanism)は、 \fBgit request\-pull\fR または pull\-request メカニズム(GitHub（www\&.github\&.com）で使用されているものなど)を使用して、あなたの貢献をあなたのアップストリームに通知します。
.SH "インテグレーター"
.sp
グループプロジェクトのインテグレーターとして機能するかなり中心的な人物は、他の人が行った変更を受け取り、それらをレビューして統合し、参加者が必要とするコマンドに加えて以下のコマンドを使用して、他の人が使用できるように結果を公開します。
.sp
このセクションのコマンドは、GitHub（www\&.github\&.com）で \fBgit request\-pull\fR または pull\-request に応答するユーザーが、他のユーザーの作業を履歴に統合するために使用することもできます。 リポジトリの部分担当サブリーダー(sub\-area lieutenant)は、参加者とインテグレーターの両方として機能します。
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBgit-am\fR(1)
を使用して、寄稿者から電子メールで送信されて来たパッチを適用します。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBgit-pull\fR(1)
を使用して、信頼できる部分担当サブリーダーの分からマージします。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBgit-format-patch\fR(1)
を準備し、提案された代替案を寄稿者に送信します。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBgit-revert\fR(1)
は、失敗したコミットを元に戻します。(revert)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBgit-push\fR(1)
を使用して、最先端を公開します。
.RE
.SS "Examples"
.PP
典型的なGitインテグレーターの一日。
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
$ git status \fB(1)\fR
$ git branch \-\-no\-merged master \fB(2)\fR
$ mailx \fB(3)\fR
& s 2 3 4 5 \&./+to\-apply
& s 7 8 \&./+hold\-linus
& q
$ git switch \-c topic/one master
$ git am \-3 \-i \-s \&./+to\-apply \fB(4)\fR
$ compile/test
$ git switch \-c hold/linus && git am \-3 \-i \-s \&./+hold\-linus \fB(5)\fR
$ git switch topic/one && git rebase master \fB(6)\fR
$ git switch \-C seen next \fB(7)\fR
$ git merge topic/one topic/two && git merge hold/linus \fB(8)\fR
$ git switch maint
$ git cherry\-pick master~4 \fB(9)\fR
$ compile/test
$ git tag \-s \-m "GIT 0\&.99\&.9x" v0\&.99\&.9x \fB(10)\fR
$ git fetch ko && for branch in master maint next seen \fB(11)\fR
    do
        git show\-branch ko/$branch $branch \fB(12)\fR
    done
$ git push \-\-follow\-tags ko \fB(13)\fR
.fi
.if n \{\
.RE
.\}
.sp
\fB1. \fRどちらかといえば、あなたが途中で何をしていたかを見てください。
.br
\fB2. \fR\fBmaster\fR
にマージされていないのがどのブランチかを確認してください。他の統合ブランチ(\fBmaint\fR
、` next` 、
\fBseen\fR)についても同様です。
.br
\fB3. \fRメールを読んだり、該当するものを保存したり、準備が整っていないものを保存したりします(他のメールリーダーも利用できます)。
.br
\fB4. \fRあなたの署名伴って、対話的にそれらを適用します。
.br
\fB5. \fR必要に応じてトピックブランチを作成し、再度署名して適用します。
.br
\fB6. \fRmasterにマージされていない、または安定したブランチの一部として公開されていない内部トピックブランチをリベースします。
.br
\fB7. \fRnext から 毎回
\fBseen\fR
を再スタートします。
.br
\fB8. \fRそして、まだ調理中のトピックブランチをバンドルします。
.br
\fB9. \fR深刻な修正をバックポートします。
.br
\fB10. \fR署名付きタグを作成します。
.br
\fB11. \fRmasterがすでにpushされたものを超えて誤って巻き戻されていないことを確認してください。
.br
\fB12. \fR\fBgit show\-branch\fR
からの出力では、
\fBmaster\fR
には
\fBko/master\fR
が持つすべてのものが含まれ、
\fBnext\fR
には
\fBko/next\fR
が持つすべてのものが含まれる必要があります。
.br
\fB13. \fRプッシュされた履歴を指す新しいタグとともに、最先端をプッシュします。
.br
.RE
.sp
この例では、 \fBko\fR の省略形はkernel\&.orgにあるGitメンテナのリポジトリを指しており、以下のようになります:
.sp
.if n \{\
.RS 4
.\}
.nf
(in \&.git/config)
[remote "ko"]
        url = kernel\&.org:/pub/scm/git/git\&.git
        fetch = refs/heads/*:refs/remotes/ko/*
        push = refs/heads/master
        push = refs/heads/next
        push = +refs/heads/seen
        push = refs/heads/maint
.fi
.if n \{\
.RE
.\}
.sp
.SH "リポジトリ管理"
.sp
リポジトリ管理者は、以下のツールを使用して、開発者によるリポジトリへのアクセスを設定および維持します。
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBgit-daemon\fR(1)
を使用して、リポジトリからの匿名ダウンロードを許可します。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBgit-shell\fR(1)
は、共有中央リポジトリユーザーの「制限付きログインシェル」として使用できます。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBgit-http-backend\fR(1)
は、フェッチサービスとプッシュサービスの両方を可能にする Git\-over\-HTTP(スマートhttp)のサーバー側実装を提供します。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBgitweb\fR(1)
は、GitリポジトリへのWebフロントエンドを提供します。これは、
\fBgit-instaweb\fR(1)
スクリプトを使用して設定できます。
.RE
.sp
\m[blue]\fBupdate hook howto\fR\m[]\&\s-2\u[1]\d\s+2 には、共有中央リポジトリを管理する良い例があります。
.sp
さらに、以下のような他の広く展開されているホスティング、ブラウジング、レビューソリューションがいくつかあります:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
gitolite 、 gerrit code review 、 cgit 、その他。
.RE
.SS "Examples"
.PP
\fB/etc/services\fR では以下を前提としています
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
$ grep 9418 /etc/services
git             9418/tcp                # Git Version Control System
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
Run git\-daemon to serve /pub/scm from inetd\&.
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
$ grep git /etc/inetd\&.conf
git     stream  tcp     nowait  nobody \e
  /usr/bin/git\-daemon git\-daemon \-\-inetd \-\-export\-all /pub/scm
.fi
.if n \{\
.RE
.\}
.sp
実際の行は1行で書く必要があります。
.RE
.PP
Run git\-daemon to serve /pub/scm from xinetd\&.
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
$ cat /etc/xinetd\&.d/git\-daemon
# default: off
# description: The Git server offers access to Git repositories
service git
{
        disable = no
        type            = UNLISTED
        port            = 9418
        socket_type     = stream
        wait            = no
        user            = nobody
        server          = /usr/bin/git\-daemon
        server_args     = \-\-inetd \-\-export\-all \-\-base\-path=/pub/scm
        log_on_failure  += USERID
}
.fi
.if n \{\
.RE
.\}
.sp
あなたの xinetd(8) のドキュメントとセットアップを確認してください。これはFedoraシステムからのものです。その他は異なる場合があります。
.RE
.PP
Give push/pull only access to developers using git\-over\-ssh\&.
.RS 4
例えばこのように使います:
\fB$ git push/pull ssh://host\&.xz/pub/scm/project\fR
.sp
.if n \{\
.RS 4
.\}
.nf
$ grep git /etc/passwd \fB(1)\fR
alice:x:1000:1000::/home/alice:/usr/bin/git\-shell
bob:x:1001:1001::/home/bob:/usr/bin/git\-shell
cindy:x:1002:1002::/home/cindy:/usr/bin/git\-shell
david:x:1003:1003::/home/david:/usr/bin/git\-shell
$ grep git /etc/shells \fB(2)\fR
/usr/bin/git\-shell
.fi
.if n \{\
.RE
.\}
.sp
\fB1. \fRログインシェルは /usr/bin/git\-shell に設定されており、
\fBgit push\fR
と
\fBgit pull\fR
以外は許可されていません。ユーザーはマシンへのsshアクセスを必要とします。
.br
\fB2. \fR多くのディストリビューションでは、 /etc/shells にはログインシェルとして使用されるものをリストする必要があります。
.br
.RE
.PP
CVS\-style shared repository\&.
.RS 4
.sp
.if n \{\
.RS 4
.\}
.nf
$ grep git /etc/group \fB(1)\fR
git:x:9418:alice,bob,cindy,david
$ cd /home/devo\&.git
$ ls \-l \fB(2)\fR
  lrwxrwxrwx   1 david git    17 Dec  4 22:40 HEAD \-> refs/heads/master
  drwxrwsr\-x   2 david git  4096 Dec  4 22:40 branches
  \-rw\-rw\-r\-\-   1 david git    84 Dec  4 22:40 config
  \-rw\-rw\-r\-\-   1 david git    58 Dec  4 22:40 description
  drwxrwsr\-x   2 david git  4096 Dec  4 22:40 hooks
  \-rw\-rw\-r\-\-   1 david git 37504 Dec  4 22:40 index
  drwxrwsr\-x   2 david git  4096 Dec  4 22:40 info
  drwxrwsr\-x   4 david git  4096 Dec  4 22:40 objects
  drwxrwsr\-x   4 david git  4096 Nov  7 14:58 refs
  drwxrwsr\-x   2 david git  4096 Dec  4 22:40 remotes
$ ls \-l hooks/update \fB(3)\fR
  \-r\-xr\-xr\-x   1 david git  3536 Dec  4 22:40 update
$ cat info/allowed\-users \fB(4)\fR
refs/heads/master       alice\e|cindy
refs/heads/doc\-update   bob
refs/tags/v[0\-9]*       david
.fi
.if n \{\
.RE
.\}
.sp
\fB1. \fR開発者を同じgitグループに配置します。
.br
\fB2. \fRそして、共有リポジトリをグループで書き込み可能にします。
.br
\fB3. \fRブランチポリシーの制御には、 Documentation/howto/ の Carl による update\-hook の例を使用してください。
.br
\fB4. \fRalice と cindy はmasterにプッシュでき、bobだけがdoc\-updateにプッシュできます。 davidはリリースマネージャーであり、バージョンタグを作成してプッシュできる唯一の人物です。
.br
.RE
.SH "GIT"
.sp
Part of the \fBgit\fR(1) suite
.SH "NOTES"
.IP " 1." 4
update hook howto
.RS 4
\%file:///home/hideo/share/doc/git-doc/howto/update-hook-example.html
.RE
