'\" t
.\"     Title: git-restore
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: 12/10/2022
.\"    Manual: Git Manual
.\"    Source: Git 2.38.0.rc1.238.g4f4d434dc6.dirty
.\"  Language: English
.\"
.TH "GIT\-RESTORE" "1" "12/10/2022" "Git 2\&.38\&.0\&.rc1\&.238\&.g" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-restore \- 作業ツリーファイルを復元します
.SH "SYNOPSIS"
.sp
.nf
\fIgit restore\fR [<options>] [\-\-source=<tree>] [\-\-staged] [\-\-worktree] [\-\-] <pathspec>\&...
\fIgit restore\fR [<options>] [\-\-source=<tree>] [\-\-staged] [\-\-worktree] \-\-pathspec\-from\-file=<file> [\-\-pathspec\-file\-nul]
\fIgit restore\fR (\-p|\-\-patch) [<options>] [\-\-source=<tree>] [\-\-staged] [\-\-worktree] [\-\-] [<pathspec>\&...]
.fi
.sp
.SH "DESCRIPTION"
.sp
復元ソースからのコンテンツを使用して、作業ツリー内の指定されたパスを復元します。パスが追跡されているが、復元ソースに存在しない場合、復元ソースと一致するように削除されます。
.sp
このコマンドを使用して、 \fB\-\-staged\fR を使用してインデックスのコンテンツを復元したり、 \fB\-\-staged\-\-worktree\fR を使用して作業ツリーとインデックスの両方を復元したりすることもできます。
.sp
デフォルトでは、 \fB\-\-staged\fR が指定されている場合、コンテンツは \fBHEAD\fR から復元され、そうでない場合はインデックスから復元されます。別のコミットから復元するには、 \fB\-\-source\fR を使用します。
.sp
3つのコマンドの違いについては、 \fBgit\fR(1) の "Reset, restore and revert" を参照してください。
.sp
!!このコマンドは実験的なものです。 動作が変わる可能性があります!!
.SH "OPTIONS"
.PP
\fB\-s <tree>\fR, \fB\-\-source=<tree>\fR
.RS 4
指定のツリーのコンテンツを使用して、作業ツリーファイルを復元します。ソースツリーに関連付けられているコミット、ブランチ、またはタグに名前を付けてソースツリーを指定するのが一般的です。
.sp
このオプションを指定しない場合で、
\fB\-\-staged\fR
が指定されている場合は
\fBHEAD\fR
から、それ以外の場合はインデックスから内容が復元されます。
.sp
特別な場合として、マージベースが1つしかない場合は、
\fBA\fR
と
\fBB\fR
のマージベースのショートカットとして
\fBA\&.\&.\&.B\fR
を使用できます。
\fBA\fR
と
\fBB\fR
の片方を省略できます。その場合、省略した方はデフォルトで
\fBHEAD\fR
になります。
.RE
.PP
\fB\-p\fR, \fB\-\-patch\fR
.RS 4
復元ソースと復元場所の違いでハンクを対話的に選択します。
\fB\-\-patch\fR
モードの操作方法については、
\fBgit-add\fR(1)
の「Interactive Mode」セクションを参照してください。
.sp
注意:
\fB\-\-patch\fR
はpathspecを受け入れることができず、変更されたすべてのパスを復元するように求められることに注意してください。
.RE
.PP
\fB\-W\fR, \fB\-\-worktree\fR, \fB\-S\fR, \fB\-\-staged\fR
.RS 4
復元場所を指定します。どちらのオプションも指定されていない場合、デフォルトで作業ツリーが復元されます。
\fB\-\-staged\fR
を指定すると、インデックスのみが復元されます。両方を指定すると、両方が復元されます。
.RE
.PP
\fB\-q\fR, \fB\-\-quiet\fR
.RS 4
静かにします。フィードバックメッセージを抑制します。
\fB\-\-no\-progress\fR
を含んでいます。
.RE
.PP
\fB\-\-progress\fR, \fB\-\-no\-progress\fR
.RS 4
\fB\-\-quiet\fR
が指定されていない限り、進行状況は、端末に接続されている場合、デフォルトで標準エラーストリームに報告されます。このフラグは、
\fB\-\-quiet\fR
に関係なく、端末に接続されていない場合でも進行状況のレポートを有効にします。
.RE
.PP
\fB\-\-ours\fR, \fB\-\-theirs\fR
.RS 4
作業ツリー内のファイルをインデックスから復元する場合は、マージされていないパスにステージ#2(\fBours\fR)または#3(\fBtheirs\fR)を使用します。
.sp
注意:
\fBgit rebase`と `git pull \-\-rebase\fR
での作業中、「ours」と「theirs」が入れ替わっているように見える場合があることに注意してください。 詳細については、
\fBgit-checkout\fR(1)
の同じオプションの説明を参照してください。
.RE
.PP
\fB\-m\fR, \fB\-\-merge\fR
.RS 4
作業ツリー上のファイルをインデックスから復元する場合は、マージされていないパスで競合するマージを再作成してください。
.RE
.PP
\fB\-\-conflict=<style>\fR
.RS 4
上記の
\fB\-\-merge\fR
オプションと同じですが、競合するハンクの表示方法を変更し、
\fBmerge\&.conflictStyle\fR
構成変数をオーバーライドします。 可能な値は、\fBmerge\fR(デフォルト) と
\fBdiff3\fR
と
\fBzdiff3\fR
です。
.RE
.PP
\fB\-\-ignore\-unmerged\fR
.RS 4
作業ツリー上のファイルをインデックスから復元するときに、マージされていないエントリがあり、
\fB\-\-ours\fR
、\fB\-\-theirs\fR
、
\fB\-\-merge\fR
または
\fB\-\-conflict\fR
のいずれも指定されていない場合は、操作を中止しないでください。作業ツリー上のマージされていないパスはそのままになります。
.RE
.PP
\fB\-\-ignore\-skip\-worktree\-bits\fR
.RS 4
スパースチェックアウトモード(sparse checkout mode)では、デフォルトでは、
\fB<pathspec>\fR
に一致するエントリと、 $GIT_DIR/info/sparse\-checkout のスパースパターンのみが更新されます。このオプションは、スパースパターンを無視し、
\fB<pathspec>\fR
内のすべてのファイルを無条件に復元します。
.RE
.PP
\fB\-\-recurse\-submodules\fR, \fB\-\-no\-recurse\-submodules\fR
.RS 4
\fB<pathspec>\fR
がアクティブなサブモジュールを指定し、復元場所に作業ツリーが含まれている場合、このオプションが指定されている場合にのみサブモジュールが更新されます。この場合、その作業ツリーはスーパープロジェクトに記録されたコミットに復元されます。ローカルの変更は上書きされます。何も使用されていない場合(または
\fB\-\-no\-recurse\-submodules\fR
の場合)、サブモジュールの作業ツリーは更新されません。
\fBgit-checkout\fR(1)
と同様に、これはサブモジュールの
\fBHEAD\fR
を切り離します(detach)。
.RE
.PP
\fB\-\-overlay\fR, \fB\-\-no\-overlay\fR
.RS 4
オーバーレイモード(overlay mode)では、コマンドは復元時にファイルを削除しません。オーバーレイなしモード(no\-overlay mode)では、
\fB\-\-source\fR
ツリーに表示されない追跡ファイルが削除され、
\fB<tree>\fR
と完全に一致するようになります。 デフォルトはオーバーレイなしモード(no\-overlay mode)です。
.RE
.PP
\fB\-\-pathspec\-from\-file=<file>\fR
.RS 4
pathspecは、コマンドライン引数の代わりに
\fB<file>\fR
で渡されます。
\fB<file>\fR
が正確に
\fB\-\fR
の場合、標準入力が使用されます。pathspec要素はLFまたはCR/LFで区切られます。pathspec要素は、構成変数
\fBcore\&.quotePath\fR
で説明されているように引用できます(\fBgit-config\fR(1)
参照)。
\fB\-\-pathspec\-file\-nul\fR
およびグローバルの
\fB\-\-literal\-pathspecs\fR
も参照してください。
.RE
.PP
\fB\-\-pathspec\-file\-nul\fR
.RS 4
\fB\-\-pathspec\-from\-file\fR
でのみ意味があります。pathspec要素はNUL文字で区切られ、他のすべての文字は文字通りに解釈されます(改行と引用符を含む)。
.RE
.PP
\fB\-\-\fR
.RS 4
これより後ろの引数をオプションとして解釈しないでください。
.RE
.PP
<pathspec>\&...
.RS 4
操作の影響を受けるパスを制限します。
.sp
詳細については、
\fBgitglossary\fR(7)
の「pathspec」エントリを参照してください。
.RE
.SH "EXAMPLES"
.sp
以下のシーケンスは、 \fBmaster\fR ブランチに切り替え、\fBMakefile\fR を2つ前のリビジョンに戻し、誤って hello\&.c を削除して、インデックスから戻します。
.sp
.if n \{\
.RS 4
.\}
.nf
$ git switch master
$ git restore \-\-source master~2 Makefile  \fB(1)\fR
$ rm \-f hello\&.c
$ git restore hello\&.c                     \fB(2)\fR
.fi
.if n \{\
.RE
.\}
.sp
.sp
\fB1. \fR別のコミットからファイルを取り出します
.br
\fB2. \fRインデックスから hello\&.c を復元します。
.br
.sp
あなたが、インデックス内のバージョンと一致するように「すべての」Cソースファイルを復元する場合は、以下のように書くことができます。
.sp
.if n \{\
.RS 4
.\}
.nf
$ git restore \*(Aq*\&.c\*(Aq
.fi
.if n \{\
.RE
.\}
.sp
.sp
注意: \fB*\&.c\fR を囲む引用符に注意してください。 ファイル \fBhello\&.c\fR は、作業ツリーに存在しなくなった場合でも復元されます。これは、ファイルグロブがインデックス内のエントリを照合するために使用されるためです(シェルによる作業ツリー内ではありません)。
.sp
現在のディレクトリ内のすべてのファイルを復元するには
.sp
.if n \{\
.RS 4
.\}
.nf
$ git restore \&.
.fi
.if n \{\
.RE
.\}
.sp
.sp
または、\fBtop\fR pathspec魔法を使用してすべての作業ツリーファイルを復元します(\fBgitglossary\fR(7) 参照)。
.sp
.if n \{\
.RS 4
.\}
.nf
$ git restore :/
.fi
.if n \{\
.RE
.\}
.sp
.sp
\fBHEAD\fR のバージョンと一致するようにインデックス内のファイルを復元するには(これは \fBgit-reset\fR(1) を使用するのと同じです)
.sp
.if n \{\
.RS 4
.\}
.nf
$ git restore \-\-staged hello\&.c
.fi
.if n \{\
.RE
.\}
.sp
.sp
または、インデックスと作業ツリーの両方を復元できます(これは、 \fBgit-checkout\fR(1) を使用する場合と同じです)。
.sp
.if n \{\
.RS 4
.\}
.nf
$ git restore \-\-source=HEAD \-\-staged \-\-worktree hello\&.c
.fi
.if n \{\
.RE
.\}
.sp
.sp
または、より実用的で読みにくい短い形式:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git restore \-s@ \-SW hello\&.c
.fi
.if n \{\
.RE
.\}
.sp
.SH "SEE ALSO"
.sp
\fBgit-checkout\fR(1), \fBgit-reset\fR(1)
.SH "GIT"
.sp
Part of the \fBgit\fR(1) suite
