This is git.info, produced by makeinfo version 6.7 from
user-manual.texi.

INFO-DIR-SECTION Development
START-INFO-DIR-ENTRY
* Git: (git).           A fast distributed revision control system
END-INFO-DIR-ENTRY


File: git.info,  Node: Top,  Next: Introduction,  Up: (dir)

Git User Manual
***************

* Menu:

* Introduction::
* Repositories and Branches::
* Exploring Git history::
* Developing with Git::
* Sharing development with others::
* Rewriting history and maintaining patch series::
* Advanced branch management::
* Git concepts::
* Submodules::
* Low-level Git operations::
* Hacking Git::
* Git Glossary::
* Git Quick Reference::
* Notes and todo list for this manual::

— The Detailed Node Listing —

Repositories and Branches

* How to get a Git repository::
* How to check out a different version of a project::
* Understanding History; Commits::
* Manipulating branches::
* Examining an old version without creating a new branch::
* Examining branches from a remote repository::
* Naming branches, tags, and other references: Naming branches; tags; and other references.
* Updating a repository with git fetch::
* Fetching branches from other repositories::

Exploring Git history

* How to use bisect to find a regression::
* Naming commits::
* Creating tags::
* Browsing revisions::
* Generating diffs::
* Viewing old file versions::
* Examples::

Developing with Git

* Telling Git your name::
* Creating a new repository::
* How to make a commit::
* Creating good commit messages::
* Ignoring files::
* How to merge::
* Resolving a merge::
* Undoing a merge::
* Fast-forward merges::
* Fixing mistakes::
* Ensuring good performance::
* Ensuring reliability::

Sharing development with others

* Getting updates with git pull::
* Submitting patches to a project::
* Importing patches to a project::
* Public Git repositories::
* How to get a Git repository with minimal history::
* Examples: Examples <1>.

Rewriting history and maintaining patch series

* Creating the perfect patch series::
* Keeping a patch series up to date using git rebase::
* Rewriting a single commit::
* Reordering or selecting from a patch series::
* Using interactive rebases::
* Other tools::
* Problems with rewriting history::
* Why bisecting merge commits can be harder than bisecting linear history::

Advanced branch management

* Fetching individual branches::
* git fetch and fast-forwards::
* Forcing git fetch to do non-fast-forward updates::
* Configuring remote-tracking branches::

Git concepts

* The Object Database::
* The index::

Submodules

* Pitfalls with submodules::

Low-level Git operations

* Object access and manipulation::
* The Workflow::
* Examining the data::
* Merging multiple trees::
* Merging multiple trees, continued: Merging multiple trees; continued.

Hacking Git

* Object storage format::
* A birds-eye view of Git’s source code::

Git Glossary

* Git explained::

Git Quick Reference

* Creating a new repository: Creating a new repository <1>.
* Managing branches::
* Exploring history::
* Making changes::
* Merging::
* Sharing your changes::
* Repository maintenance::

Notes and todo list for this manual

* Todo list::



File: git.info,  Node: Introduction,  Next: Repositories and Branches,  Prev: Top,  Up: Top

Introduction
************

Gitは高速分散型リビジョン管理システムです。

   この説明書は、基本的なUNIXコマンドラインスキルを持っているが、Gitの予
備知識がない人でも読めるように設計されています。

   [Cross reference to non-existant ID “repository-and-branches”] と
*note Exploring Git history:: は、gitを使用してプロジェクトをフェッチし
て調査する方法を説明しています—これらの章を読んで、ソフトウェアプロジェ
クトの特定のバージョンをビルド、テスト、デグレを探す方法を学んで下さい。

   実際の開発を行う必要がある人は、 [Cross reference to non-existant ID
“Developmenting-With-git”] と *note Sharing development with others:: も
読みたいと思うでしょう。

   それ以降の章では、より専門的なトピックについて説明します。

   包括的なリファレンスドキュメントは、マニュアルページまたは
git-help(1) (git-help.html) コマンドから入手できます。 たとえば、コマン
ド ‘git clone <repo>’ の場合、次のいずれかを使用できます:

     $ man git-clone

   または:

     $ git help clone

   後者では、選択したマニュアルビューアを使用できます。 詳細については
git-help(1) (git-help.html) を参照してください。

   詳しい説明なしでのGitコマンドの概要については、 *note Git Quick
Reference:: も参照してください。

   最後に、このマニュアルをより完全にするためにあなたが貢献する方法につ
いては、 *note Notes and todo list for this manual:: を参照してください
。


File: git.info,  Node: Repositories and Branches,  Next: Exploring Git history,  Prev: Introduction,  Up: Top

1 Repositories and Branches
***************************

* Menu:

* How to get a Git repository::
* How to check out a different version of a project::
* Understanding History; Commits::
* Manipulating branches::
* Examining an old version without creating a new branch::
* Examining branches from a remote repository::
* Naming branches, tags, and other references: Naming branches; tags; and other references.
* Updating a repository with git fetch::
* Fetching branches from other repositories::


File: git.info,  Node: How to get a Git repository,  Next: How to check out a different version of a project,  Up: Repositories and Branches

1.1 How to get a Git repository
===============================

このマニュアルを読むときに、Gitリポジトリを試してみると便利です。

   これを取得する最良の方法は、 git-clone(1) (git-clone.html) コマンドを
使用して既存のリポジトリのコピーをダウンロードすることです。あなたがプロ
ジェクトをまだ考えていない場合は、いくつかの興味深い例を以下に示します:

             # Git itself (approx. 40MB download):
     $ git clone git://git.kernel.org/pub/scm/git/git.git
             # the Linux kernel (approx. 640MB download):
     $ git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git

   大規模なプロジェクトでは、最初のクローン作成に時間がかかる場合があり
ますが、クローン作成が必要になるのは1回だけです。

   cloneコマンドは、プロジェクトにちなんで名付けられた新しいディレクトリ
を作成します(上記の例では ‘git’ または ‘linux’)。このディレクトリにcdす
ると、 working tree (*note [def_working_tree]::) と呼ばれるプロジェクト
ファイルのコピーと、プロジェクトの歴史について全ての情報を含む ‘.git’ と
いう名前の特別なトップレベルディレクトリが含まれていることがわかります。


File: git.info,  Node: How to check out a different version of a project,  Next: Understanding History; Commits,  Prev: How to get a Git repository,  Up: Repositories and Branches

1.2 How to check out a different version of a project
=====================================================

Gitは、ファイルのコレクションの履歴を保存するためのツールとして最もよく
考えられています。プロジェクトのコンテンツの相互に関連するスナップショッ
トの圧縮されたコレクションとして履歴を保存します。 Gitでは、このような各
バージョンは commit (*note [def_commit]::) と呼ばれます。

   これらのスナップショットは、必ずしもすべてが古いものから新しいものへ
と一列に配置されているわけではなく、作業は、 branches (*note
[def_branch]::) と呼ばれる並行する開発ラインに沿って同時に進行する場合が
あります。これは、マージおよび分岐する場合があります。

   単一のGitリポジトリで、複数のブランチの開発を追跡できます。これは、各
ブランチの最新のコミットを参照する heads (*note [def_head]::) のリストを
保持することによって行われます。 git-branch(1) (git-branch.html) コマン
ドは、ブランチヘッド(branch heads)を一覧表示します。

     $ git branch
     * master

   新しくクローンされたリポジトリには、デフォルトで「master」という名前
の単一のブランチヘッドが含まれ、作業ディレクトリはそのブランチヘッドによ
って参照されるプロジェクトの状態に初期化されます。

   ほとんどのプロジェクトは tags (*note [def_tag]::) も使用します。タグ
はヘッドのようであり、プロジェクトの履歴への参照であり、 git-tag(1)
(git-tag.html) コマンドを使用して一覧表示できます。

     $ git tag -l
     v2.6.11
     v2.6.11-tree
     v2.6.12
     v2.6.12-rc2
     v2.6.12-rc3
     v2.6.12-rc4
     v2.6.12-rc5
     v2.6.12-rc6
     v2.6.13
     ...

   タグは常にプロジェクトの同じバージョンを指すことが期待されますが、開
発が進むにつれてヘッドは前進することが期待されます。

   これらのバージョンのいずれかを指す新しいブランチヘッドを作成し、
git-switch(1) (git-switch.html) を使用してチェックアウトします:

     $ git switch -c new v2.6.13

   作業ディレクトリは、v2.6.13 のタグが付けられたときにプロジェクトが持
っていた内容を反映し、 git-branch(1) (git-branch.html) は2つのブランチを
表示し、アスタリスクは現在チェックアウトされているブランチを示します。

     $ git branch
       master
     * new

   あなたがバージョン 2.6.17 を使用することにした場合は、以下のようにし
て、代わりに v2.6.17 を指すように現在のブランチを変更できます。

     $ git reset --hard v2.6.17

   注意: 現在のブランチヘッドが履歴内の特定のポイントへの唯一の参照であ
る場合、そのブランチをリセットすると、それが指していた履歴を見つける方法
がなくなる可能性があることに注意してください。したがって、このコマンドは
慎重に使用してください。


File: git.info,  Node: Understanding History; Commits,  Next: Manipulating branches,  Prev: How to check out a different version of a project,  Up: Repositories and Branches

1.3 Understanding History: Commits
==================================

プロジェクトの履歴のすべての変更は、コミットによって表されます。
git-show(1) (git-show.html) コマンドは、現在のブランチでの最新のコミット
を表示します:

     $ git show
     commit 17cf781661e6d38f737f15f53ab552f1e95960d7
     Author: Linus Torvalds <torvalds@ppc970.osdl.org.(none)>
     Date:   Tue Apr 19 14:11:06 2005 -0700

         Remove duplicate getenv(DB_ENVIRONMENT) call

         Noted by Tony Luck.

     diff --git a/init-db.c b/init-db.c
     index 65898fa..b002dc6 100644
     --- a/init-db.c
     +++ b/init-db.c
     @@ -7,7 +7,7 @@

      int main(int argc, char **argv)
      {
     -       char *sha1_dir = getenv(DB_ENVIRONMENT), *path;
     +       char *sha1_dir, *path;
             int len, i;

             if (mkdir(".git", 0755) < 0) {

   ご覧のとおり、コミットは、誰が最新の変更を行ったか、何をしたか、そし
てその理由を示しています。

   すべてのコミットには16進40桁のIDがあります。それは「オブジェクト名」
または「SHA-1 ID」と呼ばれることもあり、「git show」出力の最初の行に表示
されます。通常、タグやブランチ名などの短い名前でコミットを参照できますが
、この長い名前も役立ちます。最も重要なことは、これはこのコミットにとって
グローバルに一意の名前です。したがって、他の誰かにオブジェクト名を(たと
えば電子メールで)伝えると、その名前が自分のリポジトリで行うのと同じコミ
ットを参照することが保証されます(彼らのリポジトリにそのコミットがあると
仮定します)。オブジェクト名はコミットの内容に対するハッシュとして計算さ
れるため、名前が変更されてなければコミットも変更されてない事が保証されま
す。

   実際、 *note Git concepts:: では、ファイルデータやディレクトリの内容
など、Gitの履歴に保存されているすべてのものが、その内容のハッシュである
名前が付いたオブジェクトに保存されていることがわかります。

* Menu:

* Understanding history; commits, parents, and reachability: Understanding history; commits; parents; and reachability.
* Understanding history; History diagrams::
* Understanding history; What is a branch?::


File: git.info,  Node: Understanding history; commits; parents; and reachability,  Next: Understanding history; History diagrams,  Up: Understanding History; Commits

1.3.1 Understanding history: commits, parents, and reachability
---------------------------------------------------------------

(プロジェクトの最初のコミットを除く)すべてのコミットには、このコミットの
前に何が起こったかを示す親コミットもあります。親の連鎖をたどると、最終的
にはプロジェクトの最初に戻ります。

   ただし、コミットは単純なリストを形成しません。 Gitを使用すると、開発
ラインが分岐してから再収束します。2つの開発ラインが再収束するポイントは
「マージ」と呼ばれます。したがって、マージを表すコミットは1つ以上の親を
持つことができ、各親はそれぞれがそのポイントにつながる開発ラインの1つで
最も最近のコミットを表します。

   これがどのように働くを確認する最良の方法は、 gitk(1) (gitk.html) コマ
ンドを使用することです。現在Gitリポジトリでgitkを実行し、マージコミット
を探すと、Gitが履歴を整理する方法を理解するのに役立ちます。

   以下、コミットXがコミットYの祖先である場合、コミットXはコミットYから
「到達可能」(reachable)であると言います。同様に、YはXの子孫である、コミ
ットYからコミットXにつながる親のチェーンがあると言えます。


File: git.info,  Node: Understanding history; History diagrams,  Next: Understanding history; What is a branch?,  Prev: Understanding history; commits; parents; and reachability,  Up: Understanding History; Commits

1.3.2 Understanding history: History diagrams
---------------------------------------------

以下のような図を使用して、Gitの履歴を表す場合があります。コミットは「o」
として表示され、コミット間の繋がりは、 ‘-’ および ‘/’ および ‘\’ で描か
れた線で示されます。時間は左から右に進みます:

              o--o--o <-- Branch A
             /
      o--o--o <-- master
             \
              o--o--o <-- Branch B

   特定のコミットについて話す必要がある場合は、文字「o」を別の文字または
数字に置き換えることができます。


File: git.info,  Node: Understanding history; What is a branch?,  Prev: Understanding history; History diagrams,  Up: Understanding History; Commits

1.3.3 Understanding history: What is a branch?
----------------------------------------------

正確にする必要がある場合は、「ブランチ」という言葉を使用して開発ラインを
意味し、「ブランチヘッド」(branch head)(または単に「ヘッド」(head))とい
う言葉を使用して、ブランチでの最新のコミットへの参照を意味します。上記の
例では、「A」という名前のブランチヘッドは、1つの特定のコミットへのポイン
ターですが、その時点までの3つのコミットの連なった線をすべて「ブランチA」
の一部として参照します。

   ただし、混乱が生じない場合は、ブランチとブランチヘッドの両方に「ブラ
ンチ」という用語を使用することがよくあります。


File: git.info,  Node: Manipulating branches,  Next: Examining an old version without creating a new branch,  Prev: Understanding History; Commits,  Up: Repositories and Branches

1.4 Manipulating branches
=========================

ブランチの作成、削除、および変更は、素早く・簡単です。コマンドの概要は以
下のとおりです:

‘git branch’
     全てのブランチを一覧表示します。

‘git branch <branch>’
     現在のブランチと同じ履歴ポイントを参照して、 ‘<branch>’ という名前
     の新しいブランチを作成します。

‘git branch <branch> <start-point>’
     ‘<start-point>’ を参照して、 ‘<branch>’ という名前の新しいブランチ
     を作成します。これは、ブランチ名やタグ名を使用するなど、任意の方法
     で指定できます。

‘git branch -d <branch>’
     ブランチ ‘<branch>‘を削除します。ブランチがそのアップストリームブラ
     ンチに完全にマージされていないか、現在のブランチに含まれていない場
     合、このコマンドは警告とともに失敗します。

‘git branch -D <branch>’
     マージされたステータスに関係なく、ブランチ ‘<branch>’ を削除します
     。

‘git switch <branch>’
     現在のブランチを ‘<branch>’ にし、 ‘<branch>’ によって参照されるバ
     ージョンを反映するように作業ディレクトリを更新します。

‘git switch -c <new> <start-point>’
     ‘<start-point>’ を参照する新しいブランチ ‘<new>’ を作成し、それをチ
     ェックアウトします。

   特殊シンボル記号「HEAD」は、常に現在のブランチを参照するために使用で
きます。実際、Gitは ‘.git’ ディレクトリにある ‘HEAD’ という名前のファイ
ルを使用して、現在のブランチを記憶しています。

     $ cat .git/HEAD
     ref: refs/heads/master


File: git.info,  Node: Examining an old version without creating a new branch,  Next: Examining branches from a remote repository,  Prev: Manipulating branches,  Up: Repositories and Branches

1.5 Examining an old version without creating a new branch
==========================================================

‘git switch’ コマンドは通常、ブランチヘッドを想定していますが、
‘--detach’ を伴って呼び出されると任意のコミットも受け入れます。たとえば
、タグによって参照されるコミットをチェックアウトできます:

     $ git switch --detach v2.6.17
     Note: checking out 'v2.6.17'.

     You are in 'detached HEAD' state. You can look around, make experimental
     changes and commit them, and you can discard any commits you make in this
     state without impacting any branches by performing another switch.
     (あなたは「切り離されたHEAD」状態にあります。あなたは周りを見回し、
     実験的な変更を加えてコミットすることができます。また、別のswitchを実行することで、
     他のブランチに影響を与えることなく、この状態で行ったコミットを破棄できます。)

     If you want to create a new branch to retain commits you create, you may
     do so (now or later) by using -c with the switch command again. Example:
     (作成したコミットを保持するために新しいブランチを作成する場合は、
     switchコマンドで `-c` を再度使用して、(現在または後で)作成できます。例:)

       git switch -c new_branch_name

     HEAD is now at 427abfa Linux v2.6.17

   次に、HEADはブランチではなくコミットのSHA-1を参照し、 ‘git branch’ は
、あなたがもはやブランチ上にいないことを示します:

     $ cat .git/HEAD
     427abfa28afedffadfca9dd8b067eb6d36bac53f
     $ git branch
     * (detached from v2.6.17)
       master

   この場合、HEADは「切り離されている」(detached)と言います。

   これは、新しいブランチの名前を作成しなくても、 特定のバージョンをチェ
ックアウトする簡単な方法です。 必要に応じて、後でこのバージョンの新しい
ブランチ(またはタグ)を作成することもできます。


File: git.info,  Node: Examining branches from a remote repository,  Next: Naming branches; tags; and other references,  Prev: Examining an old version without creating a new branch,  Up: Repositories and Branches

1.6 Examining branches from a remote repository
===============================================

クローン作成時に作成された「master」ブランチは、クローン作成元のリポジト
リにあるHEADのコピーです。ただし、そのリポジトリには他のブランチも含まれ
ている可能性があり、ローカルリポジトリには、リモート追跡ブランチ
(remote-tracking branch)と呼ばれる、これらのリモートブランチのそれぞれを
追跡するブランチが保持されます。これは、 git-branch(1) (git-branch.html)
の ‘-r’ オプションを使用して表示できます:

     $ git branch -r
       origin/HEAD
       origin/html
       origin/maint
       origin/man
       origin/master
       origin/next
       origin/seen
       origin/todo

   この例では、「origin」はリモートリポジトリ、または略して「リモート」
(remote)と呼ばれます。このリポジトリのブランチは、私たちの観点からは「リ
モートブランチ」と呼ばれます。上記のリモート追跡ブランチは、クローン時に
リモートブランチに基づいて作成され、 ‘git fetch’ (つまり ‘git pull’ でも
)と ‘git push’ によって更新されます。 詳細については、 *note Updating a
repository with git fetch:: を参照してください。

   タグの場合と同じように、これらのリモート追跡ブランチの1つをあなた独自
のブランチに構築することをお勧めします:

     $ git switch -c my-todo-copy origin/todo

   ‘origin/todo’ を直接チェックアウトして調べたり、1回限りのパッチを作成
したりすることもできます。 detached head (*note Examining an old version
without creating a new branch::) を参照してください。

   注意: 「origin」という名前は、clone元のリポジトリを参照するために
Gitがデフォルトで使用する名前にすぎないことに注意してください。


File: git.info,  Node: Naming branches; tags; and other references,  Next: Updating a repository with git fetch,  Prev: Examining branches from a remote repository,  Up: Repositories and Branches

1.7 Naming branches, tags, and other references
===============================================

ブランチやリモート追跡ブランチやタグはすべてコミットへの参照です。すべて
の参照は、 ‘refs’ で始まるスラッシュ(‘/’)で区切られたパス名で名前が付け
られます。これまで使用してきた名前は、実際には省略形です:

   • ブランチ ‘test’ は ‘refs/heads/test’ の略です。

   • タグ ‘v2.6.18’ は ‘refs/tags/v2.6.18’ の略です。

   • ‘origin/master’ は ‘refs/remotes/origin/master’ の略です。

   フルネームでの指定は、たとえば、同じ名前のタグとブランチが存在する場
合に役立つことがあります。

   (新しく作成されたrefは、実際にはその名前で指定されたパスで
‘.git/refs’ ディレクトリに保存されます。ただし、効率上の理由から、単一の
ファイルにまとめてパックすることもできます。 git-pack-refs(1)
(git-pack-refs.html) を参照してください。)

   もう1つの便利な短縮形として、リポジトリの「HEAD」は、そのリポジトリの
名前を使用するだけで参照できます。したがって、たとえば、「origin」は通常
、「リポジトリ origin のHEADブランチ」の短縮形です。

   Gitが参照を調べるするパスの完全なリスト、および同じ省略名を持つ複数の
参照がある場合に選択するために使用する順序については、 gitrevisions(7)
(gitrevisions.html) の「SPECIFYING REVISIONS」セクションを参照してくださ
い。


File: git.info,  Node: Updating a repository with git fetch,  Next: Fetching branches from other repositories,  Prev: Naming branches; tags; and other references,  Up: Repositories and Branches

1.8 Updating a repository with git fetch
========================================

リポジトリのクローンを作成し、独自の変更をいくつかコミットした後、あなた
は元のリポジトリで更新を確認することをお勧めします。

   引数を指定しない ‘git-fetch’ コマンドは、あなたのリポジトリにある全て
のリモート追跡ブランチを元のリポジトリにある最新バージョンに更新します。
それはあなた自身のどのブランチにも影響しません。それはあなたクローンで作
成した「master」ブランチでさえ影響しません。


File: git.info,  Node: Fetching branches from other repositories,  Prev: Updating a repository with git fetch,  Up: Repositories and Branches

1.9 Fetching branches from other repositories
=============================================

あなたは git-remote(1) (git-remote.html) を使用して、クローン元以外のリ
ポジトリからブランチを追跡することもできます。

     $ git remote add staging git://git.kernel.org/.../gregkh/staging.git
     $ git fetch staging
     ...
     From git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/staging
      * [new branch]      master     -> staging/master
      * [new branch]      staging-linus -> staging/staging-linus
      * [new branch]      staging-next -> staging/staging-next

   新しいリモート追跡ブランチは、 ‘git remote add’ にて、今回は
‘staging’ と名付けた省略名で保存されます:

     $ git branch -r
       origin/HEAD -> origin/master
       origin/master
       staging/master
       staging/staging-linus
       staging/staging-next

   後で ‘git fetch <remote>’ を実行すると、 ‘<remote>’ という名前のリモ
ート追跡ブランチが更新されます。

   ファイル ‘.git/config’ を調べると、Gitが新しい一節を追加したことがわ
かります:

     $ cat .git/config
     ...
     [remote "staging"]
             url = git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/staging.git
             fetch = +refs/heads/*:refs/remotes/staging/*
     ...

   これが、Gitがリモートのブランチを追跡できる理由です。 テキストエディ
タで ‘.git/config’ を編集することにより、これらの設定オプションを変更ま
たは削除できます。 (詳細については、 git-config(1) (git-config.html) の
「CONFIGURATION FILE」セクションを参照してください。)


File: git.info,  Node: Exploring Git history,  Next: Developing with Git,  Prev: Repositories and Branches,  Up: Top

2 Exploring Git history
***********************

Gitは、ファイルのコレクションの履歴を保存するためのツールとして最もよく
考えられています。これは、ファイル階層のコンテンツの圧縮されたスナップシ
ョットを、これらのスナップショット間の関係を示す「コミット」とともに保存
することによって行われます。

   Gitは、プロジェクトの履歴を探索するための非常に柔軟で高速なツールを提
供します。

   私達は、プロジェクトにバグを導入したコミットを見つけるのに役立つ、あ
る専用ツールから始めることにします。

* Menu:

* How to use bisect to find a regression::
* Naming commits::
* Creating tags::
* Browsing revisions::
* Generating diffs::
* Viewing old file versions::
* Examples::


File: git.info,  Node: How to use bisect to find a regression,  Next: Naming commits,  Up: Exploring Git history

2.1 How to use bisect to find a regression
==========================================

あなたのプロジェクトのバージョン2.6.18は機能していしたが、「master」のバ
ージョンがクラッシュしたとします。このようなデグレの原因を見つける最良の
方法は、プロジェクトの履歴を総当たりで検索して、問題の原因となった特定の
コミットを見つけることです。 git-bisect(1) (git-bisect.html) コマンドは
、あなたがこれを行う助けとなります:

     $ git bisect start
     $ git bisect good v2.6.18
     $ git bisect bad master
     Bisecting: 3537 revisions left to test after this
     [65934a9a028b88e83e2b0f8b36618fe503349f8e] BLOCK: Make USB storage depend on SCSI rather than selecting it [try #6]

   この時点で ‘git branch’ を実行すると、Gitが一時的に あなたを "(no
branch)" に移動させたことがわかります。HEADはブランチから切り離され、「
master」からは到達可能であるが v2.6.18 からは到達できないコミット(コミッ
トID 65934)を直接指します。コンパイルしてテストし、クラッシュするかどう
かを確認します。クラッシュするとします。ならばあなたは以下のようにします
:

     $ git bisect bad
     Bisecting: 1769 revisions left to test after this
     [7eff82c8b1511017ae605f0c99ac275a7e21b867] i2c-core: Drop useless bitmaskings

   より古いバージョンをチェックアウトします。このように作業を続けて、各
ステップで提供されるバージョンが良いか悪いかをGitに伝え、テストするため
に残されたリビジョンの数が毎回約半分に削減されることに注目してください。

   (今回は)約13回のテストの後、有罪コミット(guilty commit)のコミットIDが
出力されました。あなたは、次に、 git-show(1) (git-show.html) を使用して
コミットを調べ、誰がコミットを作成したかを調べ、コミットIDを使用してバグ
レポートをメールで送信できます。そして最後に、あなたは以下を実行します:

     $ git bisect reset

   そうすると、あなたが以前にいたブランチに戻ります。

   注意: ‘git bisect’ が各時点でチェックアウトするバージョンは単なる提案
であり、そっちの方が良い考えであると思った場合は、別のバージョンを自由に
試すことができることに注意してください。 たとえば、関係のない何かを壊し
たコミットにたどり着くことがあったりします。このようにしたいときは、以下
のようにします。

     $ git bisect visualize

   これはgitkを実行し、選択したコミットに「bisect」というマーカーでラベ
ルを付けます。近くで安全に見えるコミットを選択し、そのコミットIDをメモし
て、以下のコマンドでチェックアウトします:

     $ git reset --hard fb47ddb2db

   そしてテストし、必要に応じて「bisect good」または「bisect bad」を実行
して続行します。

   ‘git bisect visualize’ と ‘git reset --hard fb47ddb2db’ を行う代わり
に、現在のコミットをスキップすることをGitに伝えたい場合があります:

     $ git bisect skip

   ただし、この場合、Gitは、最初にスキップされたコミットとその後の不正な
コミットの間で、最初の不正なコミットを最終的に判断できない可能性がありま
す。

   良いコミットと悪いコミットを区別できるテストスクリプトがある場合は、
bisecするプロセスを自動化する方法もあります。この機能およびその他の ‘git
bisect’ 機能の詳細については、 git-bisect(1) (git-bisect.html) を参照し
てください。


File: git.info,  Node: Naming commits,  Next: Creating tags,  Prev: How to use bisect to find a regression,  Up: Exploring Git history

2.2 Naming commits
==================

コミットに名前を付けるいくつかの方法をすでに見てきました:

   • 16進40桁のオブジェクト名

   • ブランチ名: 指定のブランチの先頭のコミットを参照します

   • タグ名: 指定のタグが指すコミットを参照します(ブランチとタグは 参照
     (*note Naming branches; tags; and other references::) の特殊なケー
     スです)。

   • HEAD: 現在のブランチのheadを参照します

   その他いろいろ: リビジョンに名前を付ける方法の完全なリストについては
、 gitrevisions(7) (gitrevisions.html) のマニュアルページの「SPECIFYING
REVISIONS」セクションを参照してください。 例をいくつか:

     $ git show fb47ddb2 # オブジェクト名の最初の数文字は、
                         # 通常、一意に指定するのに十分です。
     $ git show HEAD^    # HEADコミットの親
     $ git show HEAD^^   # 祖父母(grandparent;親の親)
     $ git show HEAD~4   # 曽祖父母(great-great-grandparent)

   マージコミットには複数の親が存在する可能性があることを思い出してくだ
さい。 デフォルトでは、 ‘^’ と ‘~’ はそのコミットにリストされている最初
の親を辿りますが、以下のように選択することもできます:

     $ git show HEAD^1   # HEADの(複数ある)親のうち1番目の親
     $ git show HEAD^2   # HEADの複数ある親のうち2番目の親

   HEADに加えて、コミットには他にもいくつかの特別な名前があります:

   マージ(後で説明します)、および現在チェックアウトされているコミットを
変更する ‘git reset’ などの操作では、通常、 ORIG_HEAD を、「現在の操作の
前にHEADが持っていた値」に設定します。

   ‘git fetch’ 操作は、常に、最後にフェッチされたブランチのヘッドを
FETCH_HEADに格納します。 たとえば、以下のように、操作のターゲットとして
ローカルブランチを指定せずに ‘git fetch’ を実行した場合

     $ git fetch git://example.com/proj.git theirbranch

   フェッチされたコミットは、引き続きFETCH_HEADから利用できます。

   マージについて説明すると、現在のブランチにマージしている他のブランチ
を指す特別な名前MERGE_HEADもあります。

   git-rev-parse(1) (git-rev-parse.html) コマンドは、コミットの名前をそ
のコミットのオブジェクト名に変換するのに役立つことがある低レベルのコマン
ドです。

     $ git rev-parse origin
     e05db0fd4f31dde7005f075a84f96b360d05984b


File: git.info,  Node: Creating tags,  Next: Browsing revisions,  Prev: Naming commits,  Up: Exploring Git history

2.3 Creating tags
=================

特定のコミットを参照するタグを作成することもできます。以下を実行すると

     $ git tag stable-1 1b2e1d63ff

   あなたは ‘stable-1’ を使用して、コミット ‘1b2e1d63ff’ を参照できます
。

   これにより、「軽量」タグ(lightweight tag)が作成されます。タグにコメン
トを含め、場合によっては暗号で署名する場合は、代わりにタグオブジェクトを
作成する必要があります。詳細については、 git-tag(1) (git-tag.html) のマ
ニュアルページを参照してください。


File: git.info,  Node: Browsing revisions,  Next: Generating diffs,  Prev: Creating tags,  Up: Exploring Git history

2.4 Browsing revisions
======================

git-log(1) (git-log.html) コマンドは、コミットのリストを表示できます。そ
れ自体で、親コミットから到達可能なすべてのコミットが表示されますが、より
具体的なリクエストを行うこともできます。

     $ git log v2.5..        # commits since (not reachable from) v2.5
     $ git log test..master  # commits reachable from master but not test
     $ git log master..test  # ...reachable from test but not master
     $ git log master...test # ...reachable from either test or master,
                             #    but not both
     $ git log --since="2 weeks ago" # commits from the last 2 weeks
     $ git log Makefile      # commits which modify Makefile
     $ git log fs/           # ... which modify any file under fs/
     $ git log -S'foo()'     # commits which add or remove any file data
                             # matching the string 'foo()'

   そしてもちろん、これらすべてを組み合わせることができます。 以下は、
‘Makefile’ または ‘fs’ ディレクトリより下の任意のファイル、を触った v2.5
以降のコミットを検索します:

     $ git log v2.5.. Makefile fs/

   パッチを表示するようにgit logに依頼することもできます:

     $ git log -p

   その他の表示オプションについては、 git-log(1) (git-log.html) のマニュ
アルページの ‘--pretty’ オプションを参照してください。

   git log は最新のコミットから始まり、親を介して逆方向に機能することに
注意してください。 ただし、Gitの履歴には複数の独立した開発ラインが含まれ
る可能性があるため、コミットがリストされる順序は多少前後する可能性があり
ます。


File: git.info,  Node: Generating diffs,  Next: Viewing old file versions,  Prev: Browsing revisions,  Up: Exploring Git history

2.5 Generating diffs
====================

git-diff(1) (git-diff.html) を使用して、任意の2つのバージョン間の差分
(diff)を生成できます。

     $ git diff master..test

   これにより、2つのブランチの先端の間にdiffが生じます。共通の祖先からの
diffを見つけてテストしたい場合は、2つではなく3つのドットを使用できます:

     $ git diff master...test

   しばしば、あなたが必要なのは差分の代わりにパッチのセットである場合が
あります。これには、 git-format-patch(1) (git-format-patch.html) を使用
できます。

     $ git format-patch master..test

   これは、masterからではなく、testから到達可能な各コミットのパッチを含
むファイルを生成します。


File: git.info,  Node: Viewing old file versions,  Next: Examples,  Prev: Generating diffs,  Up: Exploring Git history

2.6 Viewing old file versions
=============================

あなたは、最初に正しいリビジョンをチェックアウトするだけで、いつでも古い
バージョンのファイルを表示できます。ただし、何もチェックアウトせずに古い
バージョンの単一ファイルを表示できる方が便利な場合もあります。以下のコマ
ンドはそれを行います:

     $ git show v2.5:fs/locks.c

   コロン(‘:’)の前にはコミットを指定するものがあり、その後にはGitによっ
て追跡されているファイルへのパスがあります。


File: git.info,  Node: Examples,  Prev: Viewing old file versions,  Up: Exploring Git history

2.7 Examples
============

* Menu:

* Counting the number of commits on a branch::
* Check whether two branches point at the same history::
* Find first tagged version including a given fix::
* Showing commits unique to a given branch::
* Creating a changelog and tarball for a software release::
* Finding commits referencing a file with given content::


File: git.info,  Node: Counting the number of commits on a branch,  Next: Check whether two branches point at the same history,  Up: Examples

2.7.1 Counting the number of commits on a branch
------------------------------------------------

あなたが ‘origin`から分岐して以来、 `mybranch’ に対して行ったコミットの
数を知りたいとします:

     $ git log --pretty=oneline origin..mybranch | wc -l

   あるいは、この種のことは、指定されたすべてのコミットのSHA-1を一覧表示
するだけの低レベルのコマンド git-rev-list(1) (git-rev-list.html) で行わ
れることがよくあります:

     $ git rev-list origin..mybranch | wc -l


File: git.info,  Node: Check whether two branches point at the same history,  Next: Find first tagged version including a given fix,  Prev: Counting the number of commits on a branch,  Up: Examples

2.7.2 Check whether two branches point at the same history
----------------------------------------------------------

あなたが、2つのブランチが履歴の同じポイントを指しているかどうかを確認し
たいとします。

     $ git diff origin..master

   プロジェクトの内容が2つのブランチで同じであるかどうかがわかります。た
だし、理論的には、同じプロジェクトの内容が2つの異なる履歴ルートによって
到達された可能性があります。あなたはオブジェクト名を比較できます:

     $ git rev-list origin
     e05db0fd4f31dde7005f075a84f96b360d05984b
     $ git rev-list master
     e05db0fd4f31dde7005f075a84f96b360d05984b

   または、 ‘...’ 演算子は、一方の参照または他方の参照から到達可能なすべ
てのコミットを選択しますが、両方は選択しないことを思い出してください。と
いうことで以下を実行すると

     $ git log origin...master

   この2つのブランチが等しい場合、コミットは返されません。


File: git.info,  Node: Find first tagged version including a given fix,  Next: Showing commits unique to a given branch,  Prev: Check whether two branches point at the same history,  Up: Examples

2.7.3 Find first tagged version including a given fix
-----------------------------------------------------

コミット e05db0fd が特定の問題を修正したことを知っているとします。その修
正を含む最も古いタグ付きリリースを見つけたいと思います。

   ええ、もちろん、複数の答えがあるかもしれません。コミット e05db0fd の
後に履歴が分岐した場合、複数の「最も早い」タグ付きリリースが存在する可能
性があります。

   あなたは e05db0fd 以降のコミットを視覚的に検査できます:

     $ gitk e05db0fd..

   or you can use git-name-rev(1) (git-name-rev.html), which will give
the commit a name based on any tag it finds pointing to one of the
commit’s descendants:

     $ git name-rev --tags e05db0fd
     e05db0fd tags/v1.5.0-rc1^0~23

   git-describe(1) (git-describe.html) コマンドは逆のことを行い、指定さ
れたコミットの基になっているタグを使用してリビジョンに名前を付けます:

     $ git describe e05db0fd
     v1.5.0-rc0-260-ge05db0f

   これは、特定のコミット後にどのタグが来るかを推測するのに役立つ場合が
あります。

   あなたが特定のタグ付きバージョンに特定のコミットが含まれているかどう
かを確認したいだけの場合は、 git-merge-base(1) (git-merge-base.html) を
使用できます:

     $ git merge-base e05db0fd v1.5.0-rc1
     e05db0fd4f31dde7005f075a84f96b360d05984b

   The merge-base command finds a common ancestor of the given commits,
and always returns one or the other in the case where one is a
descendant of the other; so the above output shows that e05db0fd
actually is an ancestor of v1.5.0-rc1.

   Alternatively, note that

     $ git log v1.5.0-rc1..e05db0fd

   will produce empty output if and only if v1.5.0-rc1 includes
e05db0fd, because it outputs only commits that are not reachable from
v1.5.0-rc1.

   As yet another alternative, the git-show-branch(1)
(git-show-branch.html) command lists the commits reachable from its
arguments with a display on the left-hand side that indicates which
arguments that commit is reachable from.  So, if you run something like

     $ git show-branch e05db0fd v1.5.0-rc0 v1.5.0-rc1 v1.5.0-rc2
     ! [e05db0fd] Fix warnings in sha1_file.c - use C99 printf format if
     available
      ! [v1.5.0-rc0] GIT v1.5.0 preview
       ! [v1.5.0-rc1] GIT v1.5.0-rc1
        ! [v1.5.0-rc2] GIT v1.5.0-rc2
     ...

   then a line like

     + ++ [e05db0fd] Fix warnings in sha1_file.c - use C99 printf format if
     available

   shows that e05db0fd is reachable from itself, from v1.5.0-rc1, and
from v1.5.0-rc2, and not from v1.5.0-rc0.


File: git.info,  Node: Showing commits unique to a given branch,  Next: Creating a changelog and tarball for a software release,  Prev: Find first tagged version including a given fix,  Up: Examples

2.7.4 Showing commits unique to a given branch
----------------------------------------------

Suppose you would like to see all the commits reachable from the branch
head named ‘master’ but not from any other head in your repository.

   We can list all the heads in this repository with git-show-ref(1)
(git-show-ref.html):

     $ git show-ref --heads
     bf62196b5e363d73353a9dcf094c59595f3153b7 refs/heads/core-tutorial
     db768d5504c1bb46f63ee9d6e1772bd047e05bf9 refs/heads/maint
     a07157ac624b2524a059a3414e99f6f44bebc1e7 refs/heads/master
     24dbc180ea14dc1aebe09f14c8ecf32010690627 refs/heads/tutorial-2
     1e87486ae06626c2f31eaa63d26fc0fd646c8af2 refs/heads/tutorial-fixes

   We can get just the branch-head names, and remove ‘master’, with the
help of the standard utilities cut and grep:

     $ git show-ref --heads | cut -d' ' -f2 | grep -v '^refs/heads/master'
     refs/heads/core-tutorial
     refs/heads/maint
     refs/heads/tutorial-2
     refs/heads/tutorial-fixes

   And then we can ask to see all the commits reachable from master but
not from these other heads:

     $ gitk master --not $( git show-ref --heads | cut -d' ' -f2 |
                                     grep -v '^refs/heads/master' )

   Obviously, endless variations are possible; for example, to see all
commits reachable from some head but not from any tag in the repository:

     $ gitk $( git show-ref --heads ) --not  $( git show-ref --tags )

   (See gitrevisions(7) (gitrevisions.html) for explanations of
commit-selecting syntax such as ‘--not’.)


File: git.info,  Node: Creating a changelog and tarball for a software release,  Next: Finding commits referencing a file with given content,  Prev: Showing commits unique to a given branch,  Up: Examples

2.7.5 Creating a changelog and tarball for a software release
-------------------------------------------------------------

The git-archive(1) (git-archive.html) command can create a tar or zip
archive from any version of a project; for example:

     $ git archive -o latest.tar.gz --prefix=project/ HEAD

   will use HEAD to produce a gzipped tar archive in which each filename
is preceded by ‘project/’.  The output file format is inferred from the
output file extension if possible, see git-archive(1) (git-archive.html)
for details.

   Versions of Git older than 1.7.7 don’t know about the ‘tar.gz’
format, you’ll need to use gzip explicitly:

     $ git archive --format=tar --prefix=project/ HEAD | gzip >latest.tar.gz

   If you’re releasing a new version of a software project, you may want
to simultaneously make a changelog to include in the release
announcement.

   Linus Torvalds, for example, makes new kernel releases by tagging
them, then running:

     $ release-script 2.6.12 2.6.13-rc6 2.6.13-rc7

   where release-script is a shell script that looks like:

     #!/bin/sh
     stable="$1"
     last="$2"
     new="$3"
     echo "# git tag v$new"
     echo "git archive --prefix=linux-$new/ v$new | gzip -9 > ../linux-$new.tar.gz"
     echo "git diff v$stable v$new | gzip -9 > ../patch-$new.gz"
     echo "git log --no-merges v$new ^v$last > ../ChangeLog-$new"
     echo "git shortlog --no-merges v$new ^v$last > ../ShortLog"
     echo "git diff --stat --summary -M v$last v$new > ../diffstat-$new"

   and then he just cut-and-pastes the output commands after verifying
that they look OK.


File: git.info,  Node: Finding commits referencing a file with given content,  Prev: Creating a changelog and tarball for a software release,  Up: Examples

2.7.6 Finding commits referencing a file with given content
-----------------------------------------------------------

Somebody hands you a copy of a file, and asks which commits modified a
file such that it contained the given content either before or after the
commit.  You can find out with this:

     $  git log --raw --abbrev=40 --pretty=oneline |
             grep -B 1 `git hash-object filename`

   Figuring out why this works is left as an exercise to the (advanced)
student.  The git-log(1) (git-log.html), git-diff-tree(1)
(git-diff-tree.html), and git-hash-object(1) (git-hash-object.html) man
pages may prove helpful.


File: git.info,  Node: Developing with Git,  Next: Sharing development with others,  Prev: Exploring Git history,  Up: Top

3 Developing with Git
*********************

* Menu:

* Telling Git your name::
* Creating a new repository::
* How to make a commit::
* Creating good commit messages::
* Ignoring files::
* How to merge::
* Resolving a merge::
* Undoing a merge::
* Fast-forward merges::
* Fixing mistakes::
* Ensuring good performance::
* Ensuring reliability::


File: git.info,  Node: Telling Git your name,  Next: Creating a new repository,  Up: Developing with Git

3.1 Telling Git your name
=========================

Before creating any commits, you should introduce yourself to Git.  The
easiest way to do so is to use git-config(1) (git-config.html):

     $ git config --global user.name 'Your Name Comes Here'
     $ git config --global user.email 'you@yourdomain.example.com'

   Which will add the following to a file named ‘.gitconfig’ in your
home directory:

     [user]
             name = Your Name Comes Here
             email = you@yourdomain.example.com

   See the "CONFIGURATION FILE" section of git-config(1)
(git-config.html) for details on the configuration file.  The file is
plain text, so you can also edit it with your favorite editor.


File: git.info,  Node: Creating a new repository,  Next: How to make a commit,  Prev: Telling Git your name,  Up: Developing with Git

3.2 Creating a new repository
=============================

Creating a new repository from scratch is very easy:

     $ mkdir project
     $ cd project
     $ git init

   If you have some initial content (say, a tarball):

     $ tar xzvf project.tar.gz
     $ cd project
     $ git init
     $ git add . # include everything below ./ in the first commit:
     $ git commit


File: git.info,  Node: How to make a commit,  Next: Creating good commit messages,  Prev: Creating a new repository,  Up: Developing with Git

3.3 How to make a commit
========================

Creating a new commit takes three steps:

  1. Making some changes to the working directory using your favorite
     editor.

  2. Telling Git about your changes.

  3. Creating the commit using the content you told Git about in step 2.

   In practice, you can interleave and repeat steps 1 and 2 as many
times as you want: in order to keep track of what you want committed at
step 3, Git maintains a snapshot of the tree’s contents in a special
staging area called "the index."

   At the beginning, the content of the index will be identical to that
of the HEAD. The command ‘git diff --cached’, which shows the difference
between the HEAD and the index, should therefore produce no output at
that point.

   Modifying the index is easy:

   To update the index with the contents of a new or modified file, use

     $ git add path/to/file

   To remove a file from the index and from the working tree, use

     $ git rm path/to/file

   After each step you can verify that

     $ git diff --cached

   always shows the difference between the HEAD and the index file—this
is what you’d commit if you created the commit now—and that

     $ git diff

   shows the difference between the working tree and the index file.

   Note that ‘git add’ always adds just the current contents of a file
to the index; further changes to the same file will be ignored unless
you run ‘git add’ on the file again.

   When you’re ready, just run

     $ git commit

   and Git will prompt you for a commit message and then create the new
commit.  Check to make sure it looks like what you expected with

     $ git show

   As a special shortcut,

     $ git commit -a

   will update the index with any files that you’ve modified or removed
and create a commit, all in one step.

   A number of commands are useful for keeping track of what you’re
about to commit:

     $ git diff --cached # difference between HEAD and the index; what
                         # would be committed if you ran "commit" now.
     $ git diff          # difference between the index file and your
                         # working directory; changes that would not
                         # be included if you ran "commit" now.
     $ git diff HEAD     # difference between HEAD and working tree; what
                         # would be committed if you ran "commit -a" now.
     $ git status        # a brief per-file summary of the above.

   You can also use git-gui(1) (git-gui.html) to create commits, view
changes in the index and the working tree files, and individually select
diff hunks for inclusion in the index (by right-clicking on the diff
hunk and choosing "Stage Hunk For Commit").


File: git.info,  Node: Creating good commit messages,  Next: Ignoring files,  Prev: How to make a commit,  Up: Developing with Git

3.4 Creating good commit messages
=================================

Though not required, it’s a good idea to begin the commit message with a
single short (less than 50 character) line summarizing the change,
followed by a blank line and then a more thorough description.  The text
up to the first blank line in a commit message is treated as the commit
title, and that title is used throughout Git.  For example,
git-format-patch(1) (git-format-patch.html) turns a commit into email,
and it uses the title on the Subject line and the rest of the commit in
the body.


File: git.info,  Node: Ignoring files,  Next: How to merge,  Prev: Creating good commit messages,  Up: Developing with Git

3.5 Ignoring files
==================

A project will often generate files that you do _not_ want to track with
Git.  This typically includes files generated by a build process or
temporary backup files made by your editor.  Of course, _not_ tracking
files with Git is just a matter of _not_ calling ‘git add’ on them.  But
it quickly becomes annoying to have these untracked files lying around;
e.g.  they make ‘git add .’ practically useless, and they keep showing
up in the output of ‘git status’.

   You can tell Git to ignore certain files by creating a file called
‘.gitignore’ in the top level of your working directory, with contents
such as:

     # Lines starting with '#' are considered comments.
     # Ignore any file named foo.txt.
     foo.txt
     # Ignore (generated) html files,
     *.html
     # except foo.html which is maintained by hand.
     !foo.html
     # Ignore objects and archives.
     *.[oa]

   See gitignore(5) (gitignore.html) for a detailed explanation of the
syntax.  You can also place .gitignore files in other directories in
your working tree, and they will apply to those directories and their
subdirectories.  The ‘.gitignore’ files can be added to your repository
like any other files (just run ‘git add .gitignore’ and ‘git commit’, as
usual), which is convenient when the exclude patterns (such as patterns
matching build output files) would also make sense for other users who
clone your repository.

   If you wish the exclude patterns to affect only certain repositories
(instead of every repository for a given project), you may instead put
them in a file in your repository named ‘.git/info/exclude’, or in any
file specified by the ‘core.excludesFile’ configuration variable.  Some
Git commands can also take exclude patterns directly on the command
line.  See gitignore(5) (gitignore.html) for the details.


File: git.info,  Node: How to merge,  Next: Resolving a merge,  Prev: Ignoring files,  Up: Developing with Git

3.6 How to merge
================

You can rejoin two diverging branches of development using git-merge(1)
(git-merge.html):

     $ git merge branchname

   merges the development in the branch ‘branchname’ into the current
branch.

   A merge is made by combining the changes made in ‘branchname’ and the
changes made up to the latest commit in your current branch since their
histories forked.  The work tree is overwritten by the result of the
merge when this combining is done cleanly, or overwritten by a
half-merged results when this combining results in conflicts.
Therefore, if you have uncommitted changes touching the same files as
the ones impacted by the merge, Git will refuse to proceed.  Most of the
time, you will want to commit your changes before you can merge, and if
you don’t, then git-stash(1) (git-stash.html) can take these changes
away while you’re doing the merge, and reapply them afterwards.

   If the changes are independent enough, Git will automatically
complete the merge and commit the result (or reuse an existing commit in
case of fast-forward (*note Fast-forward merges::), see below).  On the
other hand, if there are conflicts—for example, if the same file is
modified in two different ways in the remote branch and the local
branch—then you are warned; the output may look something like this:

     $ git merge next
      100% (4/4) done
     Auto-merged file.txt
     CONFLICT (content): Merge conflict in file.txt
     Automatic merge failed; fix conflicts and then commit the result.

   Conflict markers are left in the problematic files, and after you
resolve the conflicts manually, you can update the index with the
contents and run Git commit, as you normally would when creating a new
file.

   If you examine the resulting commit using gitk, you will see that it
has two parents, one pointing to the top of the current branch, and one
to the top of the other branch.


File: git.info,  Node: Resolving a merge,  Next: Undoing a merge,  Prev: How to merge,  Up: Developing with Git

3.7 Resolving a merge
=====================

When a merge isn’t resolved automatically, Git leaves the index and the
working tree in a special state that gives you all the information you
need to help resolve the merge.

   Files with conflicts are marked specially in the index, so until you
resolve the problem and update the index, git-commit(1)
(git-commit.html) will fail:

     $ git commit
     file.txt: needs merge

   Also, git-status(1) (git-status.html) will list those files as
"unmerged", and the files with conflicts will have conflict markers
added, like this:

     <<<<<<< HEAD:file.txt
     Hello world
     =======
     Goodbye
     >>>>>>> 77976da35a11db4580b80ae27e8d65caf5208086:file.txt

   All you need to do is edit the files to resolve the conflicts, and
then

     $ git add file.txt
     $ git commit

   Note that the commit message will already be filled in for you with
some information about the merge.  Normally you can just use this
default message unchanged, but you may add additional commentary of your
own if desired.

   The above is all you need to know to resolve a simple merge.  But Git
also provides more information to help resolve conflicts:

* Menu:

* Getting conflict-resolution help during a merge::


File: git.info,  Node: Getting conflict-resolution help during a merge,  Up: Resolving a merge

3.7.1 Getting conflict-resolution help during a merge
-----------------------------------------------------

All of the changes that Git was able to merge automatically are already
added to the index file, so git-diff(1) (git-diff.html) shows only the
conflicts.  It uses an unusual syntax:

     $ git diff
     diff --cc file.txt
     index 802992c,2b60207..0000000
     --- a/file.txt
     +++ b/file.txt
     @@@ -1,1 -1,1 +1,5 @@@
     ++<<<<<<< HEAD:file.txt
      +Hello world
     ++=======
     + Goodbye
     ++>>>>>>> 77976da35a11db4580b80ae27e8d65caf5208086:file.txt

   Recall that the commit which will be committed after we resolve this
conflict will have two parents instead of the usual one: one parent will
be HEAD, the tip of the current branch; the other will be the tip of the
other branch, which is stored temporarily in MERGE_HEAD.

   During the merge, the index holds three versions of each file.  Each
of these three "file stages" represents a different version of the file:

     $ git show :1:file.txt  # the file in a common ancestor of both branches
     $ git show :2:file.txt  # the version from HEAD.
     $ git show :3:file.txt  # the version from MERGE_HEAD.

   When you ask git-diff(1) (git-diff.html) to show the conflicts, it
runs a three-way diff between the conflicted merge results in the work
tree with stages 2 and 3 to show only hunks whose contents come from
both sides, mixed (in other words, when a hunk’s merge results come only
from stage 2, that part is not conflicting and is not shown.  Same for
stage 3).

   The diff above shows the differences between the working-tree version
of file.txt and the stage 2 and stage 3 versions.  So instead of
preceding each line by a single ‘+’ or ‘-’, it now uses two columns: the
first column is used for differences between the first parent and the
working directory copy, and the second for differences between the
second parent and the working directory copy.  (See the "COMBINED DIFF
FORMAT" section of git-diff-files(1) (git-diff-files.html) for a details
of the format.)

   After resolving the conflict in the obvious way (but before updating
the index), the diff will look like:

     $ git diff
     diff --cc file.txt
     index 802992c,2b60207..0000000
     --- a/file.txt
     +++ b/file.txt
     @@@ -1,1 -1,1 +1,1 @@@
     - Hello world
      -Goodbye
     ++Goodbye world

   This shows that our resolved version deleted "Hello world" from the
first parent, deleted "Goodbye" from the second parent, and added
"Goodbye world", which was previously absent from both.

   Some special diff options allow diffing the working directory against
any of these stages:

     $ git diff -1 file.txt          # diff against stage 1
     $ git diff --base file.txt      # same as the above
     $ git diff -2 file.txt          # diff against stage 2
     $ git diff --ours file.txt      # same as the above
     $ git diff -3 file.txt          # diff against stage 3
     $ git diff --theirs file.txt    # same as the above.

   The git-log(1) (git-log.html) and gitk(1) (gitk.html) commands also
provide special help for merges:

     $ git log --merge
     $ gitk --merge

   These will display all commits which exist only on HEAD or on
MERGE_HEAD, and which touch an unmerged file.

   You may also use git-mergetool(1) (git-mergetool.html), which lets
you merge the unmerged files using external tools such as Emacs or
kdiff3.

   Each time you resolve the conflicts in a file and update the index:

     $ git add file.txt

   the different stages of that file will be "collapsed", after which
‘git diff’ will (by default) no longer show diffs for that file.


File: git.info,  Node: Undoing a merge,  Next: Fast-forward merges,  Prev: Resolving a merge,  Up: Developing with Git

3.8 Undoing a merge
===================

If you get stuck and decide to just give up and throw the whole mess
away, you can always return to the pre-merge state with

     $ git merge --abort

   Or, if you’ve already committed the merge that you want to throw
away,

     $ git reset --hard ORIG_HEAD

   However, this last command can be dangerous in some cases—never throw
away a commit you have already committed if that commit may itself have
been merged into another branch, as doing so may confuse further merges.


File: git.info,  Node: Fast-forward merges,  Next: Fixing mistakes,  Prev: Undoing a merge,  Up: Developing with Git

3.9 Fast-forward merges
=======================

There is one special case not mentioned above, which is treated
differently.  Normally, a merge results in a merge commit, with two
parents, one pointing at each of the two lines of development that were
merged.

   However, if the current branch is an ancestor of the other—so every
commit present in the current branch is already contained in the other
branch—then Git just performs a "fast-forward"; the head of the current
branch is moved forward to point at the head of the merged-in branch,
without any new commits being created.


File: git.info,  Node: Fixing mistakes,  Next: Ensuring good performance,  Prev: Fast-forward merges,  Up: Developing with Git

3.10 Fixing mistakes
====================

If you’ve messed up the working tree, but haven’t yet committed your
mistake, you can return the entire working tree to the last committed
state with

     $ git restore --staged --worktree :/

   If you make a commit that you later wish you hadn’t, there are two
fundamentally different ways to fix the problem:

  1. You can create a new commit that undoes whatever was done by the
     old commit.  This is the correct thing if your mistake has already
     been made public.

  2. You can go back and modify the old commit.  You should never do
     this if you have already made the history public; Git does not
     normally expect the "history" of a project to change, and cannot
     correctly perform repeated merges from a branch that has had its
     history changed.

* Menu:

* Fixing a mistake with a new commit::
* Fixing a mistake by rewriting history::
* Checking out an old version of a file::
* Temporarily setting aside work in progress::


File: git.info,  Node: Fixing a mistake with a new commit,  Next: Fixing a mistake by rewriting history,  Up: Fixing mistakes

3.10.1 Fixing a mistake with a new commit
-----------------------------------------

Creating a new commit that reverts an earlier change is very easy; just
pass the git-revert(1) (git-revert.html) command a reference to the bad
commit; for example, to revert the most recent commit:

     $ git revert HEAD

   This will create a new commit which undoes the change in HEAD. You
will be given a chance to edit the commit message for the new commit.

   You can also revert an earlier change, for example, the next-to-last:

     $ git revert HEAD^

   In this case Git will attempt to undo the old change while leaving
intact any changes made since then.  If more recent changes overlap with
the changes to be reverted, then you will be asked to fix conflicts
manually, just as in the case of resolving a merge (*note Resolving a
merge::).


File: git.info,  Node: Fixing a mistake by rewriting history,  Next: Checking out an old version of a file,  Prev: Fixing a mistake with a new commit,  Up: Fixing mistakes

3.10.2 Fixing a mistake by rewriting history
--------------------------------------------

If the problematic commit is the most recent commit, and you have not
yet made that commit public, then you may just destroy it using ‘git
reset’ (*note Undoing a merge::).

   Alternatively, you can edit the working directory and update the
index to fix your mistake, just as if you were going to create a new
commit (*note How to make a commit::), then run

     $ git commit --amend

   which will replace the old commit by a new commit incorporating your
changes, giving you a chance to edit the old commit message first.

   Again, you should never do this to a commit that may already have
been merged into another branch; use git-revert(1) (git-revert.html)
instead in that case.

   It is also possible to replace commits further back in the history,
but this is an advanced topic to be left for another chapter (*note
Rewriting history and maintaining patch series::).


File: git.info,  Node: Checking out an old version of a file,  Next: Temporarily setting aside work in progress,  Prev: Fixing a mistake by rewriting history,  Up: Fixing mistakes

3.10.3 Checking out an old version of a file
--------------------------------------------

In the process of undoing a previous bad change, you may find it useful
to check out an older version of a particular file using git-restore(1)
(git-restore.html).  The command

     $ git restore --source=HEAD^ path/to/file

   replaces path/to/file by the contents it had in the commit HEAD^, and
also updates the index to match.  It does not change branches.

   If you just want to look at an old version of the file, without
modifying the working directory, you can do that with git-show(1)
(git-show.html):

     $ git show HEAD^:path/to/file

   which will display the given version of the file.


File: git.info,  Node: Temporarily setting aside work in progress,  Prev: Checking out an old version of a file,  Up: Fixing mistakes

3.10.4 Temporarily setting aside work in progress
-------------------------------------------------

While you are in the middle of working on something complicated, you
find an unrelated but obvious and trivial bug.  You would like to fix it
before continuing.  You can use git-stash(1) (git-stash.html) to save
the current state of your work, and after fixing the bug (or, optionally
after doing so on a different branch and then coming back), unstash the
work-in-progress changes.

     $ git stash push -m "work in progress for foo feature"

   This command will save your changes away to the ‘stash’, and reset
your working tree and the index to match the tip of your current branch.
Then you can make your fix as usual.

     ... edit and test ...
     $ git commit -a -m "blorpl: typofix"

   After that, you can go back to what you were working on with ‘git
stash pop’:

     $ git stash pop


File: git.info,  Node: Ensuring good performance,  Next: Ensuring reliability,  Prev: Fixing mistakes,  Up: Developing with Git

3.11 Ensuring good performance
==============================

On large repositories, Git depends on compression to keep the history
information from taking up too much space on disk or in memory.  Some
Git commands may automatically run git-gc(1) (git-gc.html), so you don’t
have to worry about running it manually.  However, compressing a large
repository may take a while, so you may want to call ‘gc’ explicitly to
avoid automatic compression kicking in when it is not convenient.


File: git.info,  Node: Ensuring reliability,  Prev: Ensuring good performance,  Up: Developing with Git

3.12 Ensuring reliability
=========================

* Menu:

* Checking the repository for corruption::
* Recovering lost changes::


File: git.info,  Node: Checking the repository for corruption,  Next: Recovering lost changes,  Up: Ensuring reliability

3.12.1 Checking the repository for corruption
---------------------------------------------

The git-fsck(1) (git-fsck.html) command runs a number of
self-consistency checks on the repository, and reports on any problems.
This may take some time.

     $ git fsck
     dangling commit 7281251ddd2a61e38657c827739c57015671a6b3
     dangling commit 2706a059f258c6b245f298dc4ff2ccd30ec21a63
     dangling commit 13472b7c4b80851a1bc551779171dcb03655e9b5
     dangling blob 218761f9d90712d37a9c5e36f406f92202db07eb
     dangling commit bf093535a34a4d35731aa2bd90fe6b176302f14f
     dangling commit 8e4bec7f2ddaa268bef999853c25755452100f8e
     dangling tree d50bb86186bf27b681d25af89d3b5b68382e4085
     dangling tree b24c2473f1fd3d91352a624795be026d64c8841f
     ...

   You will see informational messages on dangling objects.  They are
objects that still exist in the repository but are no longer referenced
by any of your branches, and can (and will) be removed after a while
with ‘gc’.  You can run ‘git fsck --no-dangling’ to suppress these
messages, and still view real errors.


File: git.info,  Node: Recovering lost changes,  Prev: Checking the repository for corruption,  Up: Ensuring reliability

3.12.2 Recovering lost changes
------------------------------

* Menu:

* Reflogs::
* Examining dangling objects::


File: git.info,  Node: Reflogs,  Next: Examining dangling objects,  Up: Recovering lost changes

3.12.2.1 Reflogs
................

Say you modify a branch with ‘git reset --hard’ (*note Fixing
mistakes::), and then realize that the branch was the only reference you
had to that point in history.

   Fortunately, Git also keeps a log, called a "reflog", of all the
previous values of each branch.  So in this case you can still find the
old history using, for example,

     $ git log master@{1}

   This lists the commits reachable from the previous version of the
‘master’ branch head.  This syntax can be used with any Git command that
accepts a commit, not just with ‘git log’.  Some other examples:

     $ git show master@{2}           # See where the branch pointed 2,
     $ git show master@{3}           # 3, ... changes ago.
     $ gitk master@{yesterday}       # See where it pointed yesterday,
     $ gitk master@{"1 week ago"}    # ... or last week
     $ git log --walk-reflogs master # show reflog entries for master

   A separate reflog is kept for the HEAD, so

     $ git show HEAD@{"1 week ago"}

   will show what HEAD pointed to one week ago, not what the current
branch pointed to one week ago.  This allows you to see the history of
what you’ve checked out.

   The reflogs are kept by default for 30 days, after which they may be
pruned.  See git-reflog(1) (git-reflog.html) and git-gc(1) (git-gc.html)
to learn how to control this pruning, and see the "SPECIFYING REVISIONS"
section of gitrevisions(7) (gitrevisions.html) for details.

   Note that the reflog history is very different from normal Git
history.  While normal history is shared by every repository that works
on the same project, the reflog history is not shared: it tells you only
about how the branches in your local repository have changed over time.


File: git.info,  Node: Examining dangling objects,  Prev: Reflogs,  Up: Recovering lost changes

3.12.2.2 Examining dangling objects
...................................

In some situations the reflog may not be able to save you.  For example,
suppose you delete a branch, then realize you need the history it
contained.  The reflog is also deleted; however, if you have not yet
pruned the repository, then you may still be able to find the lost
commits in the dangling objects that ‘git fsck’ reports.  See *note
Dangling objects:: for the details.

     $ git fsck
     dangling commit 7281251ddd2a61e38657c827739c57015671a6b3
     dangling commit 2706a059f258c6b245f298dc4ff2ccd30ec21a63
     dangling commit 13472b7c4b80851a1bc551779171dcb03655e9b5
     ...

   You can examine one of those dangling commits with, for example,

     $ gitk 7281251ddd --not --all

   which does what it sounds like: it says that you want to see the
commit history that is described by the dangling commit(s), but not the
history that is described by all your existing branches and tags.  Thus
you get exactly the history reachable from that commit that is lost.
(And notice that it might not be just one commit: we only report the
"tip of the line" as being dangling, but there might be a whole deep and
complex commit history that was dropped.)

   If you decide you want the history back, you can always create a new
reference pointing to it, for example, a new branch:

     $ git branch recovered-branch 7281251ddd

   Other types of dangling objects (blobs and trees) are also possible,
and dangling objects can arise in other situations.


File: git.info,  Node: Sharing development with others,  Next: Rewriting history and maintaining patch series,  Prev: Developing with Git,  Up: Top

4 Sharing development with others
*********************************

* Menu:

* Getting updates with git pull::
* Submitting patches to a project::
* Importing patches to a project::
* Public Git repositories::
* How to get a Git repository with minimal history::
* Examples: Examples <1>.


File: git.info,  Node: Getting updates with git pull,  Next: Submitting patches to a project,  Up: Sharing development with others

4.1 Getting updates with git pull
=================================

After you clone a repository and commit a few changes of your own, you
may wish to check the original repository for updates and merge them
into your own work.

   We have already seen how to keep remote-tracking branches up to date
(*note Updating a repository with git fetch::) with git-fetch(1)
(git-fetch.html), and how to merge two branches.  So you can merge in
changes from the original repository’s master branch with:

     $ git fetch
     $ git merge origin/master

   However, the git-pull(1) (git-pull.html) command provides a way to do
this in one step:

     $ git pull origin master

   In fact, if you have ‘master’ checked out, then this branch has been
configured by ‘git clone’ to get changes from the HEAD branch of the
origin repository.  So often you can accomplish the above with just a
simple

     $ git pull

   This command will fetch changes from the remote branches to your
remote-tracking branches ‘origin/*’, and merge the default branch into
the current branch.

   More generally, a branch that is created from a remote-tracking
branch will pull by default from that branch.  See the descriptions of
the ‘branch.<name>.remote’ and ‘branch.<name>.merge’ options in
git-config(1) (git-config.html), and the discussion of the ‘--track’
option in git-checkout(1) (git-checkout.html), to learn how to control
these defaults.

   In addition to saving you keystrokes, ‘git pull’ also helps you by
producing a default commit message documenting the branch and repository
that you pulled from.

   (But note that no such commit will be created in the case of a
fast-forward (*note Fast-forward merges::); instead, your branch will
just be updated to point to the latest commit from the upstream branch.)

   The ‘git pull’ command can also be given ‘.’ as the "remote"
repository, in which case it just merges in a branch from the current
repository; so the commands

     $ git pull . branch
     $ git merge branch

   are roughly equivalent.


File: git.info,  Node: Submitting patches to a project,  Next: Importing patches to a project,  Prev: Getting updates with git pull,  Up: Sharing development with others

4.2 Submitting patches to a project
===================================

If you just have a few changes, the simplest way to submit them may just
be to send them as patches in email:

   First, use git-format-patch(1) (git-format-patch.html); for example:

     $ git format-patch origin

   will produce a numbered series of files in the current directory, one
for each patch in the current branch but not in ‘origin/HEAD’.

   ‘git format-patch’ can include an initial "cover letter".  You can
insert commentary on individual patches after the three dash line which
‘format-patch’ places after the commit message but before the patch
itself.  If you use ‘git notes’ to track your cover letter material,
‘git format-patch --notes’ will include the commit’s notes in a similar
manner.

   You can then import these into your mail client and send them by
hand.  However, if you have a lot to send at once, you may prefer to use
the git-send-email(1) (git-send-email.html) script to automate the
process.  Consult the mailing list for your project first to determine
their requirements for submitting patches.


File: git.info,  Node: Importing patches to a project,  Next: Public Git repositories,  Prev: Submitting patches to a project,  Up: Sharing development with others

4.3 Importing patches to a project
==================================

Git also provides a tool called git-am(1) (git-am.html) (am stands for
"apply mailbox"), for importing such an emailed series of patches.  Just
save all of the patch-containing messages, in order, into a single
mailbox file, say ‘patches.mbox’, then run

     $ git am -3 patches.mbox

   Git will apply each patch in order; if any conflicts are found, it
will stop, and you can fix the conflicts as described in "Resolving a
merge (*note Resolving a merge::)".  (The ‘-3’ option tells Git to
perform a merge; if you would prefer it just to abort and leave your
tree and index untouched, you may omit that option.)

   Once the index is updated with the results of the conflict
resolution, instead of creating a new commit, just run

     $ git am --continue

   and Git will create the commit for you and continue applying the
remaining patches from the mailbox.

   The final result will be a series of commits, one for each patch in
the original mailbox, with authorship and commit log message each taken
from the message containing each patch.


File: git.info,  Node: Public Git repositories,  Next: How to get a Git repository with minimal history,  Prev: Importing patches to a project,  Up: Sharing development with others

4.4 Public Git repositories
===========================

Another way to submit changes to a project is to tell the maintainer of
that project to pull the changes from your repository using git-pull(1)
(git-pull.html).  In the section "Getting updates with ‘git pull’ (*note
Getting updates with git pull::)" we described this as a way to get
updates from the "main" repository, but it works just as well in the
other direction.

   If you and the maintainer both have accounts on the same machine,
then you can just pull changes from each other’s repositories directly;
commands that accept repository URLs as arguments will also accept a
local directory name:

     $ git clone /path/to/repository
     $ git pull /path/to/other/repository

   or an ssh URL:

     $ git clone ssh://yourhost/~you/repository

   For projects with few developers, or for synchronizing a few private
repositories, this may be all you need.

   However, the more common way to do this is to maintain a separate
public repository (usually on a different host) for others to pull
changes from.  This is usually more convenient, and allows you to
cleanly separate private work in progress from publicly visible work.

   You will continue to do your day-to-day work in your personal
repository, but periodically "push" changes from your personal
repository into your public repository, allowing other developers to
pull from that repository.  So the flow of changes, in a situation where
there is one other developer with a public repository, looks like this:

                           you push
     your personal repo ------------------> your public repo
           ^                                     |
           |                                     |
           | you pull                            | they pull
           |                                     |
           |                                     |
           |               they push             V
     their public repo <------------------- their repo

   We explain how to do this in the following sections.

* Menu:

* Setting up a public repository::
* Exporting a Git repository via the Git protocol::
* Exporting a git repository via HTTP::
* Pushing changes to a public repository::
* What to do when a push fails::
* Setting up a shared repository::
* Allowing web browsing of a repository::


File: git.info,  Node: Setting up a public repository,  Next: Exporting a Git repository via the Git protocol,  Up: Public Git repositories

4.4.1 Setting up a public repository
------------------------------------

Assume your personal repository is in the directory ‘~/proj’.  We first
create a new clone of the repository and tell ‘git daemon’ that it is
meant to be public:

     $ git clone --bare ~/proj proj.git
     $ touch proj.git/git-daemon-export-ok

   The resulting directory proj.git contains a "bare" git repository—it
is just the contents of the ‘.git’ directory, without any files checked
out around it.

   Next, copy ‘proj.git’ to the server where you plan to host the public
repository.  You can use scp, rsync, or whatever is most convenient.


File: git.info,  Node: Exporting a Git repository via the Git protocol,  Next: Exporting a git repository via HTTP,  Prev: Setting up a public repository,  Up: Public Git repositories

4.4.2 Exporting a Git repository via the Git protocol
-----------------------------------------------------

This is the preferred method.

   If someone else administers the server, they should tell you what
directory to put the repository in, and what ‘git://’ URL it will appear
at.  You can then skip to the section "Pushing changes to a public
repository (*note Pushing changes to a public repository::)", below.

   Otherwise, all you need to do is start git-daemon(1)
(git-daemon.html); it will listen on port 9418.  By default, it will
allow access to any directory that looks like a Git directory and
contains the magic file git-daemon-export-ok.  Passing some directory
paths as ‘git daemon’ arguments will further restrict the exports to
those paths.

   You can also run ‘git daemon’ as an inetd service; see the
git-daemon(1) (git-daemon.html) man page for details.  (See especially
the examples section.)


File: git.info,  Node: Exporting a git repository via HTTP,  Next: Pushing changes to a public repository,  Prev: Exporting a Git repository via the Git protocol,  Up: Public Git repositories

4.4.3 Exporting a git repository via HTTP
-----------------------------------------

The Git protocol gives better performance and reliability, but on a host
with a web server set up, HTTP exports may be simpler to set up.

   All you need to do is place the newly created bare Git repository in
a directory that is exported by the web server, and make some
adjustments to give web clients some extra information they need:

     $ mv proj.git /home/you/public_html/proj.git
     $ cd proj.git
     $ git --bare update-server-info
     $ mv hooks/post-update.sample hooks/post-update

   (For an explanation of the last two lines, see
git-update-server-info(1) (git-update-server-info.html) and githooks(5)
(githooks.html).)

   Advertise the URL of ‘proj.git’.  Anybody else should then be able to
clone or pull from that URL, for example with a command line like:

     $ git clone http://yourserver.com/~you/proj.git

   (See also setup-git-server-over-http
(howto/setup-git-server-over-http.html) for a slightly more
sophisticated setup using WebDAV which also allows pushing over HTTP.)


File: git.info,  Node: Pushing changes to a public repository,  Next: What to do when a push fails,  Prev: Exporting a git repository via HTTP,  Up: Public Git repositories

4.4.4 Pushing changes to a public repository
--------------------------------------------

Note that the two techniques outlined above (exporting via http (*note
Exporting a git repository via HTTP::) or git (*note Exporting a Git
repository via the Git protocol::)) allow other maintainers to fetch
your latest changes, but they do not allow write access, which you will
need to update the public repository with the latest changes created in
your private repository.

   The simplest way to do this is using git-push(1) (git-push.html) and
ssh; to update the remote branch named ‘master’ with the latest state of
your branch named ‘master’, run

     $ git push ssh://yourserver.com/~you/proj.git master:master

   or just

     $ git push ssh://yourserver.com/~you/proj.git master

   As with ‘git fetch’, ‘git push’ will complain if this does not result
in a fast-forward (*note Fast-forward merges::); see the following
section for details on handling this case.

   Note that the target of a ‘push’ is normally a bare (*note
[def_bare_repository]::) repository.  You can also push to a repository
that has a checked-out working tree, but a push to update the currently
checked-out branch is denied by default to prevent confusion.  See the
description of the receive.denyCurrentBranch option in git-config(1)
(git-config.html) for details.

   As with ‘git fetch’, you may also set up configuration options to
save typing; so, for example:

     $ git remote add public-repo ssh://yourserver.com/~you/proj.git

   adds the following to ‘.git/config’:

     [remote "public-repo"]
             url = yourserver.com:proj.git
             fetch = +refs/heads/*:refs/remotes/example/*

   which lets you do the same push with just

     $ git push public-repo master

   See the explanations of the ‘remote.<name>.url’,
‘branch.<name>.remote’, and ‘remote.<name>.push’ options in
git-config(1) (git-config.html) for details.


File: git.info,  Node: What to do when a push fails,  Next: Setting up a shared repository,  Prev: Pushing changes to a public repository,  Up: Public Git repositories

4.4.5 What to do when a push fails
----------------------------------

If a push would not result in a fast-forward (*note Fast-forward
merges::) of the remote branch, then it will fail with an error like:

      ! [rejected]        master -> master (non-fast-forward)
     error: failed to push some refs to '...'
     hint: Updates were rejected because the tip of your current branch is behind
     hint: its remote counterpart. Integrate the remote changes (e.g.
     hint: 'git pull ...') before pushing again.
     hint: See the 'Note about fast-forwards' in 'git push --help' for details.

   This can happen, for example, if you:

   • use ‘git reset --hard’ to remove already-published commits, or

   • use ‘git commit --amend’ to replace already-published commits (as
     in *note Fixing a mistake by rewriting history::), or

   • use ‘git rebase’ to rebase any already-published commits (as in
     *note Keeping a patch series up to date using git rebase::).

   You may force ‘git push’ to perform the update anyway by preceding
the branch name with a plus sign:

     $ git push ssh://yourserver.com/~you/proj.git +master

   Note the addition of the ‘+’ sign.  Alternatively, you can use the
‘-f’ flag to force the remote update, as in:

     $ git push -f ssh://yourserver.com/~you/proj.git master

   Normally whenever a branch head in a public repository is modified,
it is modified to point to a descendant of the commit that it pointed to
before.  By forcing a push in this situation, you break that convention.
(See *note Problems with rewriting history::.)

   Nevertheless, this is a common practice for people that need a simple
way to publish a work-in-progress patch series, and it is an acceptable
compromise as long as you warn other developers that this is how you
intend to manage the branch.

   It’s also possible for a push to fail in this way when other people
have the right to push to the same repository.  In that case, the
correct solution is to retry the push after first updating your work:
either by a pull, or by a fetch followed by a rebase; see the next
section (*note Setting up a shared repository::) and gitcvs-migration(7)
(gitcvs-migration.html) for more.


File: git.info,  Node: Setting up a shared repository,  Next: Allowing web browsing of a repository,  Prev: What to do when a push fails,  Up: Public Git repositories

4.4.6 Setting up a shared repository
------------------------------------

Another way to collaborate is by using a model similar to that commonly
used in CVS, where several developers with special rights all push to
and pull from a single shared repository.  See gitcvs-migration(7)
(gitcvs-migration.html) for instructions on how to set this up.

   However, while there is nothing wrong with Git’s support for shared
repositories, this mode of operation is not generally recommended,
simply because the mode of collaboration that Git supports—by exchanging
patches and pulling from public repositories—has so many advantages over
the central shared repository:

   • Git’s ability to quickly import and merge patches allows a single
     maintainer to process incoming changes even at very high rates.
     And when that becomes too much, ‘git pull’ provides an easy way for
     that maintainer to delegate this job to other maintainers while
     still allowing optional review of incoming changes.

   • Since every developer’s repository has the same complete copy of
     the project history, no repository is special, and it is trivial
     for another developer to take over maintenance of a project, either
     by mutual agreement, or because a maintainer becomes unresponsive
     or difficult to work with.

   • The lack of a central group of "committers" means there is less
     need for formal decisions about who is "in" and who is "out".


File: git.info,  Node: Allowing web browsing of a repository,  Prev: Setting up a shared repository,  Up: Public Git repositories

4.4.7 Allowing web browsing of a repository
-------------------------------------------

The gitweb cgi script provides users an easy way to browse your
project’s revisions, file contents and logs without having to install
Git.  Features like RSS/Atom feeds and blame/annotation details may
optionally be enabled.

   The git-instaweb(1) (git-instaweb.html) command provides a simple way
to start browsing the repository using gitweb.  The default server when
using instaweb is lighttpd.

   See the file gitweb/INSTALL in the Git source tree and gitweb(1)
(gitweb.html) for instructions on details setting up a permanent
installation with a CGI or Perl capable server.


File: git.info,  Node: How to get a Git repository with minimal history,  Next: Examples <1>,  Prev: Public Git repositories,  Up: Sharing development with others

4.5 How to get a Git repository with minimal history
====================================================

A shallow clone (*note [def_shallow_clone]::), with its truncated
history, is useful when one is interested only in recent history of a
project and getting full history from the upstream is expensive.

   A shallow clone (*note [def_shallow_clone]::) is created by
specifying the git-clone(1) (git-clone.html) ‘--depth’ switch.  The
depth can later be changed with the git-fetch(1) (git-fetch.html)
‘--depth’ switch, or full history restored with ‘--unshallow’.

   Merging inside a shallow clone (*note [def_shallow_clone]::) will
work as long as a merge base is in the recent history.  Otherwise, it
will be like merging unrelated histories and may have to result in huge
conflicts.  This limitation may make such a repository unsuitable to be
used in merge based workflows.


File: git.info,  Node: Examples <1>,  Prev: How to get a Git repository with minimal history,  Up: Sharing development with others

4.6 Examples
============

* Menu:

* Maintaining topic branches for a Linux subsystem maintainer::


File: git.info,  Node: Maintaining topic branches for a Linux subsystem maintainer,  Up: Examples <1>

4.6.1 Maintaining topic branches for a Linux subsystem maintainer
-----------------------------------------------------------------

This describes how Tony Luck uses Git in his role as maintainer of the
IA64 architecture for the Linux kernel.

   He uses two public branches:

   • A "test" tree into which patches are initially placed so that they
     can get some exposure when integrated with other ongoing
     development.  This tree is available to Andrew for pulling into -mm
     whenever he wants.

   • A "release" tree into which tested patches are moved for final
     sanity checking, and as a vehicle to send them upstream to Linus
     (by sending him a "please pull" request.)

   He also uses a set of temporary branches ("topic branches"), each
containing a logical grouping of patches.

   To set this up, first create your work tree by cloning Linus’s public
tree:

     $ git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git work
     $ cd work

   Linus’s tree will be stored in the remote-tracking branch named
origin/master, and can be updated using git-fetch(1) (git-fetch.html);
you can track other public trees using git-remote(1) (git-remote.html)
to set up a "remote" and git-fetch(1) (git-fetch.html) to keep them up
to date; see *note Repositories and Branches::.

   Now create the branches in which you are going to work; these start
out at the current tip of origin/master branch, and should be set up
(using the ‘--track’ option to git-branch(1) (git-branch.html)) to merge
changes in from Linus by default.

     $ git branch --track test origin/master
     $ git branch --track release origin/master

   These can be easily kept up to date using git-pull(1)
(git-pull.html).

     $ git switch test && git pull
     $ git switch release && git pull

   Important note!  If you have any local changes in these branches,
then this merge will create a commit object in the history (with no
local changes Git will simply do a "fast-forward" merge).  Many people
dislike the "noise" that this creates in the Linux history, so you
should avoid doing this capriciously in the ‘release’ branch, as these
noisy commits will become part of the permanent history when you ask
Linus to pull from the release branch.

   A few configuration variables (see git-config(1) (git-config.html))
can make it easy to push both branches to your public tree.  (See *note
Setting up a public repository::.)

     $ cat >> .git/config <<EOF
     [remote "mytree"]
             url =  master.kernel.org:/pub/scm/linux/kernel/git/aegl/linux.git
             push = release
             push = test
     EOF

   Then you can push both the test and release trees using git-push(1)
(git-push.html):

     $ git push mytree

   or push just one of the test and release branches using:

     $ git push mytree test

   または

     $ git push mytree release

   Now to apply some patches from the community.  Think of a short
snappy name for a branch to hold this patch (or related group of
patches), and create a new branch from a recent stable tag of Linus’s
branch.  Picking a stable base for your branch will: 1) help you: by
avoiding inclusion of unrelated and perhaps lightly tested changes 2)
help future bug hunters that use ‘git bisect’ to find problems

     $ git switch -c speed-up-spinlocks v2.6.35

   Now you apply the patch(es), run some tests, and commit the
change(s).  If the patch is a multi-part series, then you should apply
each as a separate commit to this branch.

     $ ... patch ... test  ... commit [ ... patch ... test ... commit ]*

   When you are happy with the state of this change, you can merge it
into the "test" branch in preparation to make it public:

     $ git switch test && git merge speed-up-spinlocks

   It is unlikely that you would have any conflicts here … but you might
if you spent a while on this step and had also pulled new versions from
upstream.

   Sometime later when enough time has passed and testing done, you can
pull the same branch into the ‘release’ tree ready to go upstream.  This
is where you see the value of keeping each patch (or patch series) in
its own branch.  It means that the patches can be moved into the
‘release’ tree in any order.

     $ git switch release && git merge speed-up-spinlocks

   After a while, you will have a number of branches, and despite the
well chosen names you picked for each of them, you may forget what they
are for, or what status they are in.  To get a reminder of what changes
are in a specific branch, use:

     $ git log linux..branchname | git shortlog

   To see whether it has already been merged into the test or release
branches, use:

     $ git log test..branchname

   または

     $ git log release..branchname

   (If this branch has not yet been merged, you will see some log
entries.  If it has been merged, then there will be no output.)

   Once a patch completes the great cycle (moving from test to release,
then pulled by Linus, and finally coming back into your local
‘origin/master’ branch), the branch for this change is no longer needed.
You detect this when the output from:

     $ git log origin..branchname

   is empty.  At this point the branch can be deleted:

     $ git branch -d branchname

   Some changes are so trivial that it is not necessary to create a
separate branch and then merge into each of the test and release
branches.  For these changes, just apply directly to the ‘release’
branch, and then merge that into the ‘test’ branch.

   After pushing your work to ‘mytree’, you can use git-request-pull(1)
(git-request-pull.html) to prepare a "please pull" request message to
send to Linus:

     $ git push mytree
     $ git request-pull origin mytree release

   Here are some of the scripts that simplify all this even further.

     ==== update script ====
     # Update a branch in my Git tree.  If the branch to be updated # is origin,
     then pull from kernel.org.  Otherwise merge # origin/master branch into
     test|release branch

     case "$1" in
     test|release)
             git checkout $1 && git pull . origin
             ;;
     origin)
             before=$(git rev-parse refs/remotes/origin/master)
             git fetch origin
             after=$(git rev-parse refs/remotes/origin/master)
             if [ $before != $after ]
             then
                     git log $before..$after | git shortlog
             fi
             ;;
     *)
             echo "usage: $0 origin|test|release" 1>&2
             exit 1
             ;;
     esac

     ==== merge script ====
     # Merge a branch into either the test or release branch

     pname=$0

     usage()
     {
             echo "usage: $pname branch test|release" 1>&2
             exit 1
     }

     git show-ref -q --verify -- refs/heads/"$1" || {
             echo "Can't see branch <$1>" 1>&2
             usage
     }

     case "$2" in
     test|release)
             if [ $(git log $2..$1 | wc -c) -eq 0 ]
             then
                     echo $1 already merged into $2 1>&2
                     exit 1
             fi
             git checkout $2 && git pull . $1
             ;;
     *)
             usage
             ;;
     esac

     ==== status script ====
     # report on status of my ia64 Git tree

     gb=$(tput setab 2)  rb=$(tput setab 1)  restore=$(tput setab 9)

     if [ `git rev-list test..release | wc -c` -gt 0 ]
     then
             echo $rb Warning: commits in release that are not in test $restore
             git log test..release
     fi

     for branch in `git show-ref --heads | sed 's|^.*/||'`
     do
             if [ $branch = test -o $branch = release ]
             then
                     continue
             fi

             echo -n $gb ======= $branch ====== $restore " "
             status=
             for ref in test release origin/master
             do
                     if [ `git rev-list $ref..$branch | wc -c` -gt 0 ]
                     then
                             status=$status${ref:0:1}
                     fi
             done
             case $status in
             trl)
                     echo $rb Need to pull into test $restore
                     ;;
             rl)
                     echo "In test"
                     ;;
             l)
                     echo "Waiting for linus"
                     ;;
             "")
                     echo $rb All done $restore
                     ;;
             *)
                     echo $rb "<$status>" $restore
                     ;;
             esac
             git log origin/master..$branch | git shortlog
     done


File: git.info,  Node: Rewriting history and maintaining patch series,  Next: Advanced branch management,  Prev: Sharing development with others,  Up: Top

5 Rewriting history and maintaining patch series
************************************************

Normally commits are only added to a project, never taken away or
replaced.  Git is designed with this assumption, and violating it will
cause Git’s merge machinery (for example) to do the wrong thing.

   However, there is a situation in which it can be useful to violate
this assumption.

* Menu:

* Creating the perfect patch series::
* Keeping a patch series up to date using git rebase::
* Rewriting a single commit::
* Reordering or selecting from a patch series::
* Using interactive rebases::
* Other tools::
* Problems with rewriting history::
* Why bisecting merge commits can be harder than bisecting linear history::


File: git.info,  Node: Creating the perfect patch series,  Next: Keeping a patch series up to date using git rebase,  Up: Rewriting history and maintaining patch series

5.1 Creating the perfect patch series
=====================================

Suppose you are a contributor to a large project, and you want to add a
complicated feature, and to present it to the other developers in a way
that makes it easy for them to read your changes, verify that they are
correct, and understand why you made each change.

   If you present all of your changes as a single patch (or commit),
they may find that it is too much to digest all at once.

   If you present them with the entire history of your work, complete
with mistakes, corrections, and dead ends, they may be overwhelmed.

   So the ideal is usually to produce a series of patches such that:

  1. Each patch can be applied in order.

  2. Each patch includes a single logical change, together with a
     message explaining the change.

  3. No patch introduces a regression: after applying any initial part
     of the series, the resulting project still compiles and works, and
     has no bugs that it didn’t have before.

  4. The complete series produces the same end result as your own
     (probably much messier!)  development process did.

   We will introduce some tools that can help you do this, explain how
to use them, and then explain some of the problems that can arise
because you are rewriting history.


File: git.info,  Node: Keeping a patch series up to date using git rebase,  Next: Rewriting a single commit,  Prev: Creating the perfect patch series,  Up: Rewriting history and maintaining patch series

5.2 Keeping a patch series up to date using git rebase
======================================================

Suppose that you create a branch ‘mywork’ on a remote-tracking branch
‘origin’, and create some commits on top of it:

     $ git switch -c mywork origin
     $ vi file.txt
     $ git commit
     $ vi otherfile.txt
     $ git commit
     ...

   You have performed no merges into mywork, so it is just a simple
linear sequence of patches on top of ‘origin’:

      o--o--O <-- origin
             \
              a--b--c <-- mywork

   Some more interesting work has been done in the upstream project, and
‘origin’ has advanced:

      o--o--O--o--o--o <-- origin
             \
              a--b--c <-- mywork

   At this point, you could use ‘pull’ to merge your changes back in;
the result would create a new merge commit, like this:

      o--o--O--o--o--o <-- origin
             \        \
              a--b--c--m <-- mywork

   However, if you prefer to keep the history in mywork a simple series
of commits without any merges, you may instead choose to use
git-rebase(1) (git-rebase.html):

     $ git switch mywork
     $ git rebase origin

   This will remove each of your commits from mywork, temporarily saving
them as patches (in a directory named ‘.git/rebase-apply’), update
mywork to point at the latest version of origin, then apply each of the
saved patches to the new mywork.  The result will look like:

      o--o--O--o--o--o <-- origin
                      \
                       a'--b'--c' <-- mywork

   In the process, it may discover conflicts.  In that case it will stop
and allow you to fix the conflicts; after fixing conflicts, use ‘git
add’ to update the index with those contents, and then, instead of
running ‘git commit’, just run

     $ git rebase --continue

   and Git will continue applying the rest of the patches.

   At any point you may use the ‘--abort’ option to abort this process
and return mywork to the state it had before you started the rebase:

     $ git rebase --abort

   If you need to reorder or edit a number of commits in a branch, it
may be easier to use ‘git rebase -i’, which allows you to reorder and
squash commits, as well as marking them for individual editing during
the rebase.  See *note Using interactive rebases:: for details, and
*note Reordering or selecting from a patch series:: for alternatives.


File: git.info,  Node: Rewriting a single commit,  Next: Reordering or selecting from a patch series,  Prev: Keeping a patch series up to date using git rebase,  Up: Rewriting history and maintaining patch series

5.3 Rewriting a single commit
=============================

We saw in *note Fixing a mistake by rewriting history:: that you can
replace the most recent commit using

     $ git commit --amend

   which will replace the old commit by a new commit incorporating your
changes, giving you a chance to edit the old commit message first.  This
is useful for fixing typos in your last commit, or for adjusting the
patch contents of a poorly staged commit.

   If you need to amend commits from deeper in your history, you can use
interactive rebase’s ‘edit’ instruction (*note Using interactive
rebases::).


File: git.info,  Node: Reordering or selecting from a patch series,  Next: Using interactive rebases,  Prev: Rewriting a single commit,  Up: Rewriting history and maintaining patch series

5.4 Reordering or selecting from a patch series
===============================================

Sometimes you want to edit a commit deeper in your history.  One
approach is to use ‘git format-patch’ to create a series of patches and
then reset the state to before the patches:

     $ git format-patch origin
     $ git reset --hard origin

   Then modify, reorder, or eliminate patches as needed before applying
them again with git-am(1) (git-am.html):

     $ git am *.patch


File: git.info,  Node: Using interactive rebases,  Next: Other tools,  Prev: Reordering or selecting from a patch series,  Up: Rewriting history and maintaining patch series

5.5 Using interactive rebases
=============================

You can also edit a patch series with an interactive rebase.  This is
the same as reordering a patch series using ‘format-patch’ (*note
Reordering or selecting from a patch series::), so use whichever
interface you like best.

   Rebase your current HEAD on the last commit you want to retain as-is.
For example, if you want to reorder the last 5 commits, use:

     $ git rebase -i HEAD~5

   This will open your editor with a list of steps to be taken to
perform your rebase.

     pick deadbee The oneline of this commit
     pick fa1afe1 The oneline of the next commit
     ...

     # Rebase c0ffeee..deadbee onto c0ffeee
     #
     # Commands:
     #  p, pick = use commit
     #  r, reword = use commit, but edit the commit message
     #  e, edit = use commit, but stop for amending
     #  s, squash = use commit, but meld into previous commit
     #  f, fixup = like "squash", but discard this commit's log message
     #  x, exec = run command (the rest of the line) using shell
     #
     # These lines can be re-ordered; they are executed from top to bottom.
     #
     # If you remove a line here THAT COMMIT WILL BE LOST.
     #
     # However, if you remove everything, the rebase will be aborted.
     #
     # Note that empty commits are commented out

   As explained in the comments, you can reorder commits, squash them
together, edit commit messages, etc.  by editing the list.  Once you are
satisfied, save the list and close your editor, and the rebase will
begin.

   The rebase will stop where ‘pick’ has been replaced with ‘edit’ or
when a step in the list fails to mechanically resolve conflicts and
needs your help.  When you are done editing and/or resolving conflicts
you can continue with ‘git rebase --continue’.  If you decide that
things are getting too hairy, you can always bail out with ‘git rebase
--abort’.  Even after the rebase is complete, you can still recover the
original branch by using the reflog (*note Reflogs::).

   For a more detailed discussion of the procedure and additional tips,
see the "INTERACTIVE MODE" section of git-rebase(1) (git-rebase.html).


File: git.info,  Node: Other tools,  Next: Problems with rewriting history,  Prev: Using interactive rebases,  Up: Rewriting history and maintaining patch series

5.6 Other tools
===============

There are numerous other tools, such as StGit, which exist for the
purpose of maintaining a patch series.  These are outside of the scope
of this manual.


File: git.info,  Node: Problems with rewriting history,  Next: Why bisecting merge commits can be harder than bisecting linear history,  Prev: Other tools,  Up: Rewriting history and maintaining patch series

5.7 Problems with rewriting history
===================================

The primary problem with rewriting the history of a branch has to do
with merging.  Suppose somebody fetches your branch and merges it into
their branch, with a result something like this:

      o--o--O--o--o--o <-- origin
             \        \
              t--t--t--m <-- their branch:

   Then suppose you modify the last three commits:

              o--o--o <-- new head of origin
             /
      o--o--O--o--o--o <-- old head of origin

   If we examined all this history together in one repository, it will
look like:

              o--o--o <-- new head of origin
             /
      o--o--O--o--o--o <-- old head of origin
             \        \
              t--t--t--m <-- their branch:

   Git has no way of knowing that the new head is an updated version of
the old head; it treats this situation exactly the same as it would if
two developers had independently done the work on the old and new heads
in parallel.  At this point, if someone attempts to merge the new head
in to their branch, Git will attempt to merge together the two (old and
new) lines of development, instead of trying to replace the old by the
new.  The results are likely to be unexpected.

   You may still choose to publish branches whose history is rewritten,
and it may be useful for others to be able to fetch those branches in
order to examine or test them, but they should not attempt to pull such
branches into their own work.

   For true distributed development that supports proper merging,
published branches should never be rewritten.


File: git.info,  Node: Why bisecting merge commits can be harder than bisecting linear history,  Prev: Problems with rewriting history,  Up: Rewriting history and maintaining patch series

5.8 Why bisecting merge commits can be harder than bisecting linear history
===========================================================================

The git-bisect(1) (git-bisect.html) command correctly handles history
that includes merge commits.  However, when the commit that it finds is
a merge commit, the user may need to work harder than usual to figure
out why that commit introduced a problem.

   Imagine this history:

           ---Z---o---X---...---o---A---C---D
               \                       /
                o---o---Y---...---o---B

   Suppose that on the upper line of development, the meaning of one of
the functions that exists at Z is changed at commit X. The commits from
Z leading to A change both the function’s implementation and all calling
sites that exist at Z, as well as new calling sites they add, to be
consistent.  There is no bug at A.

   Suppose that in the meantime on the lower line of development
somebody adds a new calling site for that function at commit Y. The
commits from Z leading to B all assume the old semantics of that
function and the callers and the callee are consistent with each other.
There is no bug at B, either.

   Suppose further that the two development lines merge cleanly at C, so
no conflict resolution is required.

   Nevertheless, the code at C is broken, because the callers added on
the lower line of development have not been converted to the new
semantics introduced on the upper line of development.  So if all you
know is that D is bad, that Z is good, and that git-bisect(1)
(git-bisect.html) identifies C as the culprit, how will you figure out
that the problem is due to this change in semantics?

   When the result of a ‘git bisect’ is a non-merge commit, you should
normally be able to discover the problem by examining just that commit.
Developers can make this easy by breaking their changes into small
self-contained commits.  That won’t help in the case above, however,
because the problem isn’t obvious from examination of any single commit;
instead, a global view of the development is required.  To make matters
worse, the change in semantics in the problematic function may be just
one small part of the changes in the upper line of development.

   On the other hand, if instead of merging at C you had rebased the
history between Z to B on top of A, you would have gotten this linear
history:

         ---Z---o---X--...---o---A---o---o---Y*--...---o---B*--D*

   Bisecting between Z and D* would hit a single culprit commit Y*, and
understanding why Y* was broken would probably be easier.

   Partly for this reason, many experienced Git users, even when working
on an otherwise merge-heavy project, keep the history linear by rebasing
against the latest upstream version before publishing.


File: git.info,  Node: Advanced branch management,  Next: Git concepts,  Prev: Rewriting history and maintaining patch series,  Up: Top

6 Advanced branch management
****************************

* Menu:

* Fetching individual branches::
* git fetch and fast-forwards::
* Forcing git fetch to do non-fast-forward updates::
* Configuring remote-tracking branches::


File: git.info,  Node: Fetching individual branches,  Next: git fetch and fast-forwards,  Up: Advanced branch management

6.1 Fetching individual branches
================================

Instead of using git-remote(1) (git-remote.html), you can also choose
just to update one branch at a time, and to store it locally under an
arbitrary name:

     $ git fetch origin todo:my-todo-work

   The first argument, ‘origin’, just tells Git to fetch from the
repository you originally cloned from.  The second argument tells Git to
fetch the branch named ‘todo’ from the remote repository, and to store
it locally under the name ‘refs/heads/my-todo-work’.

   You can also fetch branches from other repositories; so

     $ git fetch git://example.com/proj.git master:example-master

   will create a new branch named ‘example-master’ and store in it the
branch named ‘master’ from the repository at the given URL. If you
already have a branch named example-master, it will attempt to
fast-forward (*note Fast-forward merges::) to the commit given by
example.com’s master branch.  In more detail:


File: git.info,  Node: git fetch and fast-forwards,  Next: Forcing git fetch to do non-fast-forward updates,  Prev: Fetching individual branches,  Up: Advanced branch management

6.2 git fetch and fast-forwards
===============================

In the previous example, when updating an existing branch, ‘git fetch’
checks to make sure that the most recent commit on the remote branch is
a descendant of the most recent commit on your copy of the branch before
updating your copy of the branch to point at the new commit.  Git calls
this process a fast-forward (*note Fast-forward merges::).

   A fast-forward looks something like this:

      o--o--o--o <-- old head of the branch
                \
                 o--o--o <-- new head of the branch

   In some cases it is possible that the new head will *not* actually be
a descendant of the old head.  For example, the developer may have
realized a serious mistake was made and decided to backtrack, resulting
in a situation like:

      o--o--o--o--a--b <-- old head of the branch
                \
                 o--o--o <-- new head of the branch

   In this case, ‘git fetch’ will fail, and print out a warning.

   In that case, you can still force Git to update to the new head, as
described in the following section.  However, note that in the situation
above this may mean losing the commits labeled ‘a’ and ‘b’, unless
you’ve already created a reference of your own pointing to them.


File: git.info,  Node: Forcing git fetch to do non-fast-forward updates,  Next: Configuring remote-tracking branches,  Prev: git fetch and fast-forwards,  Up: Advanced branch management

6.3 Forcing git fetch to do non-fast-forward updates
====================================================

If git fetch fails because the new head of a branch is not a descendant
of the old head, you may force the update with:

     $ git fetch git://example.com/proj.git +master:refs/remotes/example/master

   Note the addition of the ‘+’ sign.  Alternatively, you can use the
‘-f’ flag to force updates of all the fetched branches, as in:

     $ git fetch -f origin

   Be aware that commits that the old version of example/master pointed
at may be lost, as we saw in the previous section.


File: git.info,  Node: Configuring remote-tracking branches,  Prev: Forcing git fetch to do non-fast-forward updates,  Up: Advanced branch management

6.4 Configuring remote-tracking branches
========================================

We saw above that ‘origin’ is just a shortcut to refer to the repository
that you originally cloned from.  This information is stored in Git
configuration variables, which you can see using git-config(1)
(git-config.html):

     $ git config -l
     core.repositoryformatversion=0
     core.filemode=true
     core.logallrefupdates=true
     remote.origin.url=git://git.kernel.org/pub/scm/git/git.git
     remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
     branch.master.remote=origin
     branch.master.merge=refs/heads/master

   If there are other repositories that you also use frequently, you can
create similar configuration options to save typing; for example,

     $ git remote add example git://example.com/proj.git

   adds the following to ‘.git/config’:

     [remote "example"]
             url = git://example.com/proj.git
             fetch = +refs/heads/*:refs/remotes/example/*

   Also note that the above configuration can be performed by directly
editing the file ‘.git/config’ instead of using git-remote(1)
(git-remote.html).

   After configuring the remote, the following three commands will do
the same thing:

     $ git fetch git://example.com/proj.git +refs/heads/*:refs/remotes/example/*
     $ git fetch example +refs/heads/*:refs/remotes/example/*
     $ git fetch example

   See git-config(1) (git-config.html) for more details on the
configuration options mentioned above and git-fetch(1) (git-fetch.html)
for more details on the refspec syntax.


File: git.info,  Node: Git concepts,  Next: Submodules,  Prev: Advanced branch management,  Up: Top

7 Git concepts
**************

Gitは、少数のシンプルで強力なアイデアに基づいて構築されています。これら
のアイデアを理解しなくても物事を成し遂げることは可能ですが、理解した上で
の方がGitをはるかに直感的に理解できるようになります。

   私達は、最も重要なオブジェクト データベース (*note
[def_object_database]::)とインデックス (*note [def_index]::)から始めるこ
とにします。

* Menu:

* The Object Database::
* The index::


File: git.info,  Node: The Object Database,  Next: The index,  Up: Git concepts

7.1 The Object Database
=======================

私達はすでに*note Understanding History: Commits: Understanding History;
Commits.で、すべてのコミットが40桁の「オブジェクト名」で保存されているの
を見ました。実際、プロジェクトの履歴を表すために必要なすべての情報は、そ
のような名前のオブジェクトに格納されています。いずれの場合も、名前はオブ
ジェクトのコンテンツのSHA-1ハッシュを使用して計算されます。SHA-1ハッシュ
は暗号化ハッシュ関数です。それが私たちにとって意味することは、同じ名前の
2つの異なるオブジェクトを見つけることは不可能であるということです。これ
には多くの利点があります:

   • Gitは、名前を比較するだけで、2つのオブジェクトが同一であるかどうか
     をすばやく判断できます。

   • オブジェクト名はすべてのリポジトリで同じ方法で計算されるため、2つの
     リポジトリに保存されている同じコンテンツ(same content)は常に同じ名
     前(same name)で保存されます。

   • Gitは、オブジェクトの名前がまだその内容のSHA-1ハッシュであるかどう
     かを確認することによって、オブジェクトを読み取るときにエラーを検出
     できます。

   (オブジェクトのフォーマットとSHA-1計算の詳細については、*note Object
storage format::を参照してください。)

   オブジェクトには "blob"、"tree"、"commit"、"tag" の4種類があります。

   • ブロブ オブジェクト("blob" object) (*note [def_blob_object]::)は、
     ファイルデータを格納するために使用されます。

   • ツリーオブジェクト("tree" object) (*note [def_tree_object]::)は、
     1つ以上のブロブオブジェクトをディレクトリ構造に結び付けます。さらに
     、ツリーオブジェクトは他のツリーオブジェクトを参照できるため、ディ
     レクトリ階層が作成されます。

   • コミットオブジェクト("commit" object) (*note
     [def_commit_object]::)は、そのようなディレクトリ階層をリビジョンの
     有向非巡回グラフ(directed acyclic graph) (*note [def_DAG]::)に結び
     付けます。各コミットには、その時点でディレクトリ階層を指定する正確
     に1つのツリーのオブジェクト名が含まれます。さらにコミットは、そのデ
     ィレクトリ階層に到達した方法の履歴を説明する「親」コミットオブジェ
     クトを参照します。

   • タグオブジェクト("tag" object) (*note [def_tag_object]::)はシンボリ
     ックに識別を行い、他のオブジェクトに署名するために使用できます。 こ
     れには、オブジェクト名と別のオブジェクトのタイプ、（もちろん）シン
     ボリック名、およびオプションで署名(signature)が含まれます。

   オブジェクトタイプの詳細:

* Menu:

* Commit Object::
* Tree Object::
* Blob Object::
* Trust::
* Tag Object::
* How Git stores objects efficiently; pack files::
* Dangling objects::
* Recovering from repository corruption::


File: git.info,  Node: Commit Object,  Next: Tree Object,  Up: The Object Database

7.1.1 Commit Object
-------------------

「commit」オブジェクトは、ツリーの物理的な状態を、そこに到達した方法とそ
の理由の説明にリンクします。 ‘--pretty=raw’ オプションを伴った
git-show(1) (git-show.html) または git-log(1) (git-log.html) を使用し、
あなたのお気に入りのコミットを調べてみます:

     $ git show -s --pretty=raw 2be7fcb476
     commit 2be7fcb4764f2dbcee52635b91fedb1b3dcf7ab4
     tree fb3a8bdd0ceddd019615af4d57a53f43d8cee2bf
     parent 257a84d9d02e90447b149af58b271c19405edb6a
     author Dave Watson <dwatson@mimvista.com> 1187576872 -0400
     committer Junio C Hamano <gitster@pobox.com> 1187591163 -0700

         Fix misspelling of 'suppress' in docs

         Signed-off-by: Junio C Hamano <gitster@pobox.com>

   コミットは以下のように定義されています:

   • ツリー(a tree): ツリーオブジェクトのSHA-1名(以下で定義)。特定の時点
     でのディレクトリの内容を表します。

   • 親(親達)(parent(s)): プロジェクトの履歴の直前のステップを表す、いく
     つかのコミットのSHA-1名。上記の例には1つの親があります。マージコミ
     ットには複数のコミットが含まれる場合があります。親のないコミットは
     「ルート」コミット(root commit)と呼ばれ、プロジェクトの初期リビジョ
     ンを表します。各プロジェクトには、少なくとも1つのルート(root)が必要
     です。プロジェクトは複数のルーツ(roots)を持つこともできますが、それ
     は一般的ではありません(または必ずしも良い考えではありません)。

   • 作者(an author): この変更の責任者の名前とその日付。

   • コミッター(a committer)：実際にコミットを作成した人の名前と、コミッ
     トが行われた日付。 これは、作者(auther)とは異なる場合があります。た
     とえば、作者がパッチを作成し、それを使用してコミットを作成した人に
     電子メールで送信した場合です。

   • このコミットを説明するコメント。

   注意: コミット自体には、実際に何が変更されたかに関する情報は含まれて
いないことに注意してください。すべての変更は、このコミットによって参照さ
れるツリーの内容を、その親に関連付けられているツリーと比較することによっ
て計算されます。特に、Gitはファイルの名前変更を明示的に記録しようとはし
ませんが、パスの変更時に同じファイルデータが存在することで名前変更が示唆
される場合を特定できます。 (たとえば、 git-diff(1) (git-diff.html) の
‘-M’ オプションを参照してください。)

   コミットは通常、 git-commit(1) (git-commit.html) によって作成されます
。これにより、親が通常は現在のHEADであり、ツリーが現在インデックスに格納
されているコンテンツから取得されるコミットが作成されます。


File: git.info,  Node: Tree Object,  Next: Blob Object,  Prev: Commit Object,  Up: The Object Database

7.1.2 Tree Object
-----------------

汎用性の高い git-show(1) (git-show.html) コマンドを使用してツリーオブジ
ェクトを調べることもできますが、あなたは git-ls-tree(1)
(git-ls-tree.html) で詳細を確認できます。

     $ git ls-tree fb3a8bdd0ce
     100644 blob 63c918c667fa005ff12ad89437f2fdc80926e21c    .gitignore
     100644 blob 5529b198e8d14decbe4ad99db3f7fb632de0439d    .mailmap
     100644 blob 6ff87c4664981e4397625791c8ea3bbb5f2279a3    COPYING
     040000 tree 2fb783e477100ce076f6bf57e4a6f026013dc745    Documentation
     100755 blob 3c0032cec592a765692234f1cba47dfdcc3a9200    GIT-VERSION-GEN
     100644 blob 289b046a443c0647624607d471289b2c7dcd470b    INSTALL
     100644 blob 4eb463797adc693dc168b926b6932ff53f17d0b1    Makefile
     100644 blob 548142c327a6790ff8821d67c2ee1eff7a656b52    README
     ...

   ご覧のとおり、ツリーオブジェクトにはエントリのリストが含まれており、
各エントリにはモード(mode)とオブジェクトタイプ(object type)とSHA-1名
(SHA-1 name)と名前(name)があり、名前でソートされています。これは、単一の
ディレクトリツリーの内容を表します。

   オブジェクトタイプは、ファイルの内容を表すブロブ(blob)でも、サブディ
レクトリの内容を表す別のツリーでもかまいません。 ツリー(tree)とブロブ
(blob)は、他のすべてのオブジェクトと同様に、その内容のSHA-1ハッシュによ
って名前が付けられるため、内容(再帰的にすべてのサブディレクトリの内容を
含む)が同一である場合に限り、2つのツリーは同じSHA-1名を持ちます。これに
より、Gitは、同じオブジェクト名を持つエントリを無視できるため、2つの関連
するツリーオブジェクト間の違いをすばやく判断できます。

   (注意: サブモジュールが存在する場合、ツリーにはエントリとしてコミット
が含まれる場合もあります。その文書については、*note Submodules:: を参照
してください。)

   注意: すべてのファイルのモードが644または755であることに注意してくだ
さい。Gitは実際には実行可能ビット(executable bit)にのみ注意を払います。


File: git.info,  Node: Blob Object,  Next: Trust,  Prev: Tree Object,  Up: The Object Database

7.1.3 Blob Object
-----------------

あなたは git-show(1) (git-show.html) を使用して、ブロブ(blob)の内容を調
べることができます。たとえば、上のツリーから ‘COPYING’ のエントリのブロ
ブを取得します:

     $ git show 6ff87c4664

      Note that the only valid version of the GPL as far as this project
      is concerned is _this_ particular version of the license (ie v2, not
      v2.2 or v3.x or whatever), unless explicitly otherwise stated.
     ...

   「ブロブ」(blob)オブジェクトは、データのバイナリブロブ(バイナリの小さ
い塊)に他なりません。それは他のものを参照したり、いかなる種類の属性も持
っていません。

   ブロブはそのデータによって完全に定義されるため、ディレクトリツリー(ま
たはリポジトリの複数の異なるバージョン)内の2つのファイルの内容が同じであ
る場合、それらは同じブロブオブジェクトを共有します。オブジェクトはディレ
クトリツリー内の場所から完全に独立しており、ファイルの名前を変更しても、
ファイルが関連付けられているオブジェクトは変更されません。

   注意: <revision>:<path> 構文で git-show(1) (git-show.html) を使用する
と、任意のツリーまたはブロブオブジェクトを調べることができることに注意し
てください。これは、現在チェックアウトされていないツリーの内容を参照する
場合に役立つことがあります。


File: git.info,  Node: Trust,  Next: Tag Object,  Prev: Blob Object,  Up: The Object Database

7.1.4 Trust
-----------

あなたが、とあるソースからブロブのSHA-1名を受け取り、そのコンテンツを別
の(おそらく信頼できない)ソースから受け取った場合でも、SHA-1名が一致する
限り、それらの内容が正しいと信頼できます。これは、SHA-1が、同じハッシュ
を生成する異なるコンテンツを見つけることが不可能になるように設計されてい
るためです。

   同様に、あなたがディレクトリ全体のコンテンツを信頼するためには、最上
位ツリーオブジェクトのSHA-1名を信頼する事だけでよいのです。信頼できるソ
ースからコミットのSHA-1名を受け取った場合、あなたは、そのコミットの親を
介して到達可能なコミットの履歴全体、およびそれらのコミットによって参照さ
れるツリーのすべてのコンテンツを簡単に確認できます。

   したがって、システムに実際の信頼を導入するには、トップレベルのコミッ
トの名前を含む「1つの」特別なメモにデジタル署名するだけです。あなたのデ
ジタル署名は、あなたがそのコミットを信頼していることを他の人に示し、コミ
ットの履歴の不変性は、彼らが履歴全体を信頼できることを他の人に伝えます。

   いいかえると、あなたは、トップコミットの名前(SHA-1ハッシュ)を通知する
一通の電子メールを送信するだけでアーカイブ全体を簡単に検証し、GPG/PGPな
どを使用してその電子メールにデジタル署名することができます。

   これを支援するために、Gitはタグオブジェクトも提供しています…


File: git.info,  Node: Tag Object,  Next: How Git stores objects efficiently; pack files,  Prev: Trust,  Up: The Object Database

7.1.5 Tag Object
----------------

タグオブジェクトには、オブジェクトとオブジェクトタイプとタグ名とタグを作
成した人の名前("tagger")と、 git-cat-file(1) (git-cat-file.html) を使用
して確認できるように、署名を含む可能性のあるメッセージが含まれます:

     $ git cat-file tag v1.5.0
     object 437b1b20df4b356c9342dac8d38849f24ef44f27
     type commit
     tag v1.5.0
     tagger Junio C Hamano <junkio@cox.net> 1171411200 +0000

     GIT 1.5.0
     -----BEGIN PGP SIGNATURE-----
     Version: GnuPG v1.4.6 (GNU/Linux)

     iD8DBQBF0lGqwMbZpPMRm5oRAuRiAJ9ohBLd7s2kqjkKlq1qqC57SbnmzQCdG4ui
     nLE/L9aUXdWeTFPron96DLA=
     =2E+0
     -----END PGP SIGNATURE-----

   タグオブジェクトを作成および検証する方法については、 git-tag(1)
(git-tag.html) コマンドを参照してください。 (注意: git-tag(1)
(git-tag.html)を使用して、「軽量タグ」(lightweight tags)を作成することも
できます。これは、タグオブジェクトではなく、名前が ‘refs/tags/’ で始まる
単純な参照です)。


File: git.info,  Node: How Git stores objects efficiently; pack files,  Next: Dangling objects,  Prev: Tag Object,  Up: The Object Database

7.1.6 How Git stores objects efficiently: pack files
----------------------------------------------------

新しく作成されたオブジェクトは、最初にオブジェクトのSHA-1ハッシュにちな
んで名付けられたファイル名のファイルとして作成されます( ‘.git/objects’ に
保存されます)。

   残念ながら、プロジェクトに多くのオブジェクトがあると、このシステムは
非効率になります。 古いプロジェクトで以下を試してください:

     $ git count-objects
     6930 objects, 47620 kilobytes

   最初の数は、個々のファイルに保持されているオブジェクトの数です。 2つ
目は、これらの「緩い」オブジェクト("loose" objects)が占めるスペースの量
です。

   あなたは、これらの緩いオブジェクトを「パックファイル」(pack file)に移
動することで、スペースを節約し、Gitを高速化できます。このファイルには、
オブジェクトのグループが効率的な圧縮形式で保存されます。 パックファイル
のフォーマットの詳細については、 pack format
(technical/pack-format.html) をご覧ください。

   緩いオブジェクトをパックに入れるには、 git repack を実行するだけです:

     $ git repack
     Counting objects: 6020, done.
     Delta compression using up to 4 threads.
     Compressing objects: 100% (6020/6020), done.
     Writing objects: 100% (6020/6020), done.
     Total 6020 (delta 4070), reused 0 (delta 0)

   これにより、現在アンパックされているすべてのオブジェクトを含む単一の
「パックファイル」が .git/objects/pack/ に作成されます。 あなたは、その
後、以下を実行できます:

     $ git prune

   これは、今やパックに格納済の緩いオブジェクト("loose" objects)をすべて
削除します。これにより、参照されていないオブジェクトも削除されます(たと
えば、 ‘git reset’ を使用してコミットを削除すると作成される可能性があり
ます)。 ‘.git/objects’ ディレクトリを確認するか、以下を実行することで、
緩んだオブジェクトがなくなったことを確認できます。

     $ git count-objects
     0 objects, 0 kilobytes

   オブジェクトファイルはなくなりましたが、それらのオブジェクトを参照す
るコマンドは、以前とまったく同じように機能します。

   git-gc(1) (git-gc.html) コマンドは、パッキング(packing)やプルーニング
(pruning)を実行します。このため、通常、あなたに必要な高レベルのコマンド
はこのコマンドだけです。


File: git.info,  Node: Dangling objects,  Next: Recovering from repository corruption,  Prev: How Git stores objects efficiently; pack files,  Up: The Object Database

7.1.7 Dangling objects
----------------------

git-fsck(1) (git-fsck.html) コマンドは、宙ぶらりんオブジェクト(dangling
objects)について文句を言うことがあります。それらは問題ではありません。

   宙ぶらりんオブジェクトの最も一般的な原因は、ブランチをリベースしたか
、ブランチをリベースした他の誰かからプルしたことです。 *note Rewriting
history and maintaining patch series:: を参照してください。 その場合、元
のブランチの古いヘッドは、それが指しているすべてのものと同様に、まだ存在
しています。ブランチポインタ自体は、別のポインタに置き換えたため、存在し
ていません。

   宙ぶらりんオブジェクトを引き起こす他の状況もあります。たとえば、ファ
イルに「git add」を実行したために「宙ぶらりんブロブ」が発生する可能性が
あります。実際にコミットして全体像の一部にする前に、そのファイル内の別の
何かを変更し、その更新されたものをコミットした場合—この時最初に追加した
古い状態は、コミットまたはツリーによってポイントされないため、宙ぶらりん
ブロブオブジェクトになります。

   同様に、 "ort"マージ戦略が実行され、十字マージ(criss-cross merge)があ
り、したがって複数のマージベースがあることがわかった場合(これはかなり珍
しいですが、実際に発生します)、一時的な内部マージベースとして1つの一時的
な中間ツリーを生成します。そして、それらは実際のオブジェクトですが、最終
結果はそれらを指すことにはならないため、リポジトリ内で「宙ぶらりん」にな
ります(または、十字マージが多数あり、マージベースが3つ以上ある場合は、さ
らに多くの可能性があります)。

   一般的に、宙ぶらりんオブジェクトは心配する必要はありません。それらは
非常に役立つことさえあります。あなたが何かを台無しにした場合、宙ぶらりん
オブジェクトはあなたがあなたの古いツリーを回復する方法になることができま
す(たとえば、リベースを行った後で、本当はリベースをやりたくなかった気づ
きました。持っている宙ぶらりんオブジェクトを確認して、ヘッドを古い宙ぶら
りん状態にリセットすることができます)。

   コミットの場合は、あなたは以下を使用できます:

     $ gitk <dangling-commit-sha-goes-here> --not --all

   これは、指定されたコミットから到達可能なすべての履歴を要求しますが、
ブランチ、タグ、またはその他の参照からは要求しません。 必要なものである
と判断した場合は、いつでも新しい参照を作成できます。たとえば、

     $ git branch recovered-branch <dangling-commit-sha-goes-here>

   ブロブとツリーの場合、同じことはできませんが、それでも調べることがで
きます。 あなたはただ以下のようにするだけです。

     $ git show <dangling-blob/tree-sha-goes-here>

   ブロブの内容が何であるか(または、ツリーの場合、基本的にそのディレクト
リの ‘ls’ したのが何であるか)を示すために、それはあなたに宙ぶらりんオブ
ジェクトを残した操作が何であったかについてのいくらかの考えを与えるかもし
れません。

   通常、宙ぶらりんのブロブやツリーはあまり興味深くはありません。ほとん
どの場合、それらは中途のマージベースであるか(手動で修正した競合するマー
ジがあった場合、ブローブにはマージからの競合マーカーが含まれることがよく
あります)、または、‘git fetch’ で、あなたが ^C か何かで中断すると、オブ
ジェクトデータベースに新しいオブジェクトの一部を残す事が発生しますが、そ
れらは役に立たない単なる宙ぶらりんです。

   とにかく、あなたは宙ぶらりん状態に興味がないと確信したら、あなたは到
達できないすべてのオブジェクトを削除できます:

     $ git prune

   そしてそれらは消え去ります。(あなたは、静止した、活動していないリポジ
トリでのみ ‘git prune’ を実行すべきです。これは、ファイルシステムの
fsckリカバリを実行するようなものです。あなたはfsckを、ファイルシステムが
マウントされている間は実行したくないでしょう。同様に ‘git prune’ は、リ
ポジトリへの同時アクセスの場合でも害を及ぼさないように設計されていますが
、紛らわしいメッセージや恐ろしいメッセージを受け取る可能性があります。）


File: git.info,  Node: Recovering from repository corruption,  Prev: Dangling objects,  Up: The Object Database

7.1.8 Recovering from repository corruption
-------------------------------------------

設計上、Gitは信頼できるデータを慎重に扱います。ただし、Git自体にバグがな
い場合でも、ハードウェアまたはオペレーティングシステムのエラーによってデ
ータが破損する可能性があります。

   このような問題に対する最初の防御策はバックアップです。cloneを使用する
か、cp、tar、またはその他のバックアップメカニズムを使用して、Gitディレク
トリをバックアップできます。

   最後の手段として、破損したオブジェクトを検索し、手動で置き換えること
ができます。その処理でさらに破損してしまう場合に備えて、これを試行する前
にリポジトリをバックアップしてください。

   私達は、問題は単一の欠落または破損したブロブであると想定しますが、こ
れは解決可能な問題である場合があります。 (欠落しているツリー、特にコミッ
トを回復することは*非常に*困難です)。

   開始する前に、破損があることを確認し、 git-fsck(1) (git-fsck.html) を
使用して破損がどこにあるかを把握します。これにはけっこう時間がかかる場合
があります。

   出力が次のようになっているとします:

     $ git fsck --full --no-dangling
     broken link from    tree 2d9263c6d23595e7cb2a21e5ebbb53655278dff8
                   to    blob 4b9458b3786228369c63936db65827de3cc06200
     missing blob 4b9458b3786228369c63936db65827de3cc06200

   これで、ブロブ 4b9458b3 が欠落しており、ツリー 2d9263c6 がそれを指し
ていることがわかります。欠落しているブロブブジェクトのコピーが1つだけ見
つかった場合は、おそらく他のリポジトリで、それを
‘.git/objects/4b/9458b3...’ に移動して実行できます。 しかし、あなたはそ
れができなかったということにしましょう。そうするってぇと、あなたは
git-ls-tree(1) (git-ls-tree.html) を使用して、それを指しているツリーを調
べることができます。これにより、以下のような出力が得られるかもしれません
:

     $ git ls-tree 2d9263c6d23595e7cb2a21e5ebbb53655278dff8
     100644 blob 8d14531846b95bfa3564b58ccfb7913a034323b8    .gitignore
     100644 blob ebf9bf84da0aab5ed944264a5db2a65fe3a3e883    .mailmap
     100644 blob ca442d313d86dc67e0a2e5d584b465bd382cbf5c    COPYING
     ...
     100644 blob 4b9458b3786228369c63936db65827de3cc06200    myfile
     ...

   これで、欠落しているブロブが ‘myfile’ という名前のファイルのデータで
あることがわかりました。 また、ディレクトリを特定できる可能性もあります
。たとえば、「somedirectory」にあるとします。 運が良ければ、不足している
コピーは、作業ツリーの ‘somedirectory/myfile’ でチェックアウトしたコピー
と同じである可能性があります。 git-hash-object(1) (git-hash-object.html)
を使用して、それが正しいかどうかをテストできます:

     $ git hash-object -w somedirectory/myfile

   これにより、 somedirectory/myfile の内容を含むブロブオブジェクトが作
成および保存され、そのオブジェクトのSHA-1が出力されます。 運が良ければ、
4b9458b3786228369c63936db65827de3cc06200 になる可能性があります。その場
合は、あなたの推測が正しかったということで、破損が修正されます。

   それ以外の場合は、より多くの情報が必要です。あなたはファイルのどのバ
ージョンが失われたかをどのように知ればよいのでしょうか？

   これを行う最も簡単な方法は以下のとおりです:

     $ git log --raw --all --full-history -- somedirectory/myfile

   あなたは生の出力を問い合わせたので、あなたは以下のようなものを得ます
。

     commit abc
     Author:
     Date:
     ...
     :100644 100644 4b9458b newsha M somedirectory/myfile


     commit xyz
     Author:
     Date:

     ...
     :100644 100644 oldsha 4b9458b M somedirectory/myfile

   これは、ファイルの直前のバージョンが「newsha」であり、直前のバージョ
ンが「oldsha」であったことを示しています。 また、oldshaから4b9458bへの変
更、および4b9458bからnewshaへの変更に伴うコミットメッセージも分かります
。

   十分に小さな変更をコミットしている場合は、中間状態4b9458bの内容が再構
築するのに適している可能性があります。

   もしそれが可能でであれば、あなたは不足しているオブジェクトを以下のよ
うに再作成できます。

     $ git hash-object -w <recreated-file>

   そしてあなたのリポジトリは再び正常になります。

   (ところで、あなたは ‘fsck’ を無視する事がでます。以下の通り始めます。

     $ git log --raw --all

   そして、その全体の中で行方不明のオブジェクト(4b9458b)のshaを探しまし
た。そうするかどうかはあなた次第です—Gitは多くの情報を*持っていて*、それ
はただ1つの特定のブロブバージョンを失っているだけです。


File: git.info,  Node: The index,  Prev: The Object Database,  Up: Git concepts

7.2 The index
=============

インデックスは、ソートされたパス名のリストを含むバイナリファイル(通常は
‘.git/index’ に保持されます)であり、それぞれパーミッションとブロブオブジ
ェクトのSHA-1を含んでいます。 git-ls-files(1) (git-ls-files.html) は、イ
ンデックスの内容を表示できます。

     $ git ls-files --stage
     100644 63c918c667fa005ff12ad89437f2fdc80926e21c 0       .gitignore
     100644 5529b198e8d14decbe4ad99db3f7fb632de0439d 0       .mailmap
     100644 6ff87c4664981e4397625791c8ea3bbb5f2279a3 0       COPYING
     100644 a37b2152bd26be2c2289e1f57a292534a51a93c7 0       Documentation/.gitignore
     100644 fbefe9a45b00a54b58d94d06eca48b03d40a50e0 0       Documentation/Makefile
     ...
     100644 2511aef8d89ab52be5ec6a5e46236b4b6bcd07ea 0       xdiff/xtypes.h
     100644 2ade97b2574a9f77e7ae4002a4e07a6a38e46d07 0       xdiff/xutils.c
     100644 d5de8292e05e7c36c4b68857c1cf9855e3d2f70a 0       xdiff/xutils.h

   注意: 古いドキュメントでは、「現在のディレクトリキャッシュ」または単
に「キャッシュ」と呼ばれるインデックスが表示される場合があることに注意し
てください。 これには3つの重要な特性があります:

  1. インデックスには、単一の(一意に決定された)ツリーオブジェクトを生成
     するために必要なすべての情報が含まれています。

     たとえば、 git-commit(1) (git-commit.html) を実行すると、インデック
     スからこのツリーオブジェクトが生成され、オブジェクトデータベースに
     保存され、新しいコミットに関連付けられたツリーオブジェクトとして使
     用されます。

  2. インデックスを使用すると、インデックスが定義するツリーオブジェクト
     と作業ツリーをすばやく比較できます。

     これは、エントリごとにいくつかの追加データ(最終変更時刻など)を保存
     することによって行われます。このデータは上に表示されず、作成された
     ツリーオブジェクトに保存されませんが、作業ディレクトリ内のどのファ
     イルがインデックスに保存されているものと異なるかをすばやく判断する
     ために使用できるため、Gitはそのようなファイルからすべてのデータを読
     み取って変更を探す必要がありません。

  3. 異なるツリーオブジェクト間のマージの競合に関する情報を効率的に表す
     ことができるため、各パス名を、関連するツリーに関する十分な情報に関
     連付けて、それらの間で3方向のマージを作成できます。

     私達はマージ中に、インデックスが1つのファイルの複数のバージョン（「
     ステージ」と呼ばれる）を格納できることを *note Getting
     conflict-resolution help during a merge:: で確認しました。上記の
     git-ls-files(1) (git-ls-files.html) 出力の3番目の列はステージ番号で
     あり、マージの競合があるファイルの場合は0以外の値を取ります。

   したがって、インデックスは一種の一時的なステージング領域であり、作業
中のツリーで埋められます。

   あなたがインデックスを完全に吹き飛ばしても、それが記述されたツリーの
名前を持っている限り、通常、情報は失われていません。


File: git.info,  Node: Submodules,  Next: Low-level Git operations,  Prev: Git concepts,  Up: Top

8 Submodules
************

Large projects are often composed of smaller, self-contained modules.
For example, an embedded Linux distribution’s source tree would include
every piece of software in the distribution with some local
modifications; a movie player might need to build against a specific,
known-working version of a decompression library; several independent
programs might all share the same build scripts.

   With centralized revision control systems this is often accomplished
by including every module in one single repository.  Developers can
check out all modules or only the modules they need to work with.  They
can even modify files across several modules in a single commit while
moving things around or updating APIs and translations.

   Git does not allow partial checkouts, so duplicating this approach in
Git would force developers to keep a local copy of modules they are not
interested in touching.  Commits in an enormous checkout would be slower
than you’d expect as Git would have to scan every directory for changes.
If modules have a lot of local history, clones would take forever.

   On the plus side, distributed revision control systems can much
better integrate with external sources.  In a centralized model, a
single arbitrary snapshot of the external project is exported from its
own revision control and then imported into the local revision control
on a vendor branch.  All the history is hidden.  With distributed
revision control you can clone the entire external history and much more
easily follow development and re-merge local changes.

   Git’s submodule support allows a repository to contain, as a
subdirectory, a checkout of an external project.  Submodules maintain
their own identity; the submodule support just stores the submodule
repository location and commit ID, so other developers who clone the
containing project ("superproject") can easily clone all the submodules
at the same revision.  Partial checkouts of the superproject are
possible: you can tell Git to clone none, some or all of the submodules.

   The git-submodule(1) (git-submodule.html) command is available since
Git 1.5.3.  Users with Git 1.5.2 can look up the submodule commits in
the repository and manually check them out; earlier versions won’t
recognize the submodules at all.

   To see how submodule support works, create four example repositories
that can be used later as a submodule:

     $ mkdir ~/git
     $ cd ~/git
     $ for i in a b c d
     do
             mkdir $i
             cd $i
             git init
             echo "module $i" > $i.txt
             git add $i.txt
             git commit -m "Initial commit, submodule $i"
             cd ..
     done

   Now create the superproject and add all the submodules:

     $ mkdir super
     $ cd super
     $ git init
     $ for i in a b c d
     do
             git submodule add ~/git/$i $i
     done

     *Note*

     Do not use local URLs here if you plan to publish your
     superproject!

   See what files ‘git submodule’ created:

     $ ls -a
     .  ..  .git  .gitmodules  a  b  c  d

   The ‘git submodule add <repo> <path>’ command does a couple of
things:

   • It clones the submodule from ‘<repo>’ to the given ‘<path>’ under
     the current directory and by default checks out the master branch.

   • It adds the submodule’s clone path to the gitmodules(5)
     (gitmodules.html) file and adds this file to the index, ready to be
     committed.

   • It adds the submodule’s current commit ID to the index, ready to be
     committed.

   Commit the superproject:

     $ git commit -m "Add submodules a, b, c and d."

   Now clone the superproject:

     $ cd ..
     $ git clone super cloned
     $ cd cloned

   The submodule directories are there, but they’re empty:

     $ ls -a a
     .  ..
     $ git submodule status
     -d266b9873ad50488163457f025db7cdd9683d88b a
     -e81d457da15309b4fef4249aba9b50187999670d b
     -c1536a972b9affea0f16e0680ba87332dc059146 c
     -d96249ff5d57de5de093e6baff9e0aafa5276a74 d

     *Note*

     The commit object names shown above would be different for you, but
     they should match the HEAD commit object names of your
     repositories.  You can check it by running ‘git ls-remote ../a’.

   Pulling down the submodules is a two-step process.  First run ‘git
submodule init’ to add the submodule repository URLs to ‘.git/config’:

     $ git submodule init

   Now use ‘git submodule update’ to clone the repositories and check
out the commits specified in the superproject:

     $ git submodule update
     $ cd a
     $ ls -a
     .  ..  .git  a.txt

   One major difference between ‘git submodule update’ and ‘git
submodule add’ is that ‘git submodule update’ checks out a specific
commit, rather than the tip of a branch.  It’s like checking out a tag:
the head is detached, so you’re not working on a branch.

     $ git branch
     * (detached from d266b98)
       master

   If you want to make a change within a submodule and you have a
detached head, then you should create or checkout a branch, make your
changes, publish the change within the submodule, and then update the
superproject to reference the new commit:

     $ git switch master

   または

     $ git switch -c fix-up

   then

     $ echo "adding a line again" >> a.txt
     $ git commit -a -m "Updated the submodule from within the superproject."
     $ git push
     $ cd ..
     $ git diff
     diff --git a/a b/a
     index d266b98..261dfac 160000
     --- a/a
     +++ b/a
     @@ -1 +1 @@
     -Subproject commit d266b9873ad50488163457f025db7cdd9683d88b
     +Subproject commit 261dfac35cb99d380eb966e102c1197139f7fa24
     $ git add a
     $ git commit -m "Updated submodule a."
     $ git push

   You have to run ‘git submodule update’ after ‘git pull’ if you want
to update submodules, too.

* Menu:

* Pitfalls with submodules::


File: git.info,  Node: Pitfalls with submodules,  Up: Submodules

8.1 Pitfalls with submodules
============================

Always publish the submodule change before publishing the change to the
superproject that references it.  If you forget to publish the submodule
change, others won’t be able to clone the repository:

     $ cd ~/git/super/a
     $ echo i added another line to this file >> a.txt
     $ git commit -a -m "doing it wrong this time"
     $ cd ..
     $ git add a
     $ git commit -m "Updated submodule a again."
     $ git push
     $ cd ~/git/cloned
     $ git pull
     $ git submodule update
     error: pathspec '261dfac35cb99d380eb966e102c1197139f7fa24' did not match any file(s) known to git.
     Did you forget to 'git add'?
     Unable to checkout '261dfac35cb99d380eb966e102c1197139f7fa24' in submodule path 'a'

   In older Git versions it could be easily forgotten to commit new or
modified files in a submodule, which silently leads to similar problems
as not pushing the submodule changes.  Starting with Git 1.7.0 both ‘git
status’ and ‘git diff’ in the superproject show submodules as modified
when they contain new or modified files to protect against accidentally
committing such a state.  ‘git diff’ will also add a ‘-dirty’ to the
work tree side when generating patch output or used with the
‘--submodule’ option:

     $ git diff
     diff --git a/sub b/sub
     --- a/sub
     +++ b/sub
     @@ -1 +1 @@
     -Subproject commit 3f356705649b5d566d97ff843cf193359229a453
     +Subproject commit 3f356705649b5d566d97ff843cf193359229a453-dirty
     $ git diff --submodule
     Submodule sub 3f35670..3f35670-dirty:

   You also should not rewind branches in a submodule beyond commits
that were ever recorded in any superproject.

   It’s not safe to run ‘git submodule update’ if you’ve made and
committed changes within a submodule without checking out a branch
first.  They will be silently overwritten:

     $ cat a.txt
     module a
     $ echo line added from private2 >> a.txt
     $ git commit -a -m "line added inside private2"
     $ cd ..
     $ git submodule update
     Submodule path 'a': checked out 'd266b9873ad50488163457f025db7cdd9683d88b'
     $ cd a
     $ cat a.txt
     module a

     *Note*

     The changes are still visible in the submodule’s reflog.

   If you have uncommitted changes in your submodule working tree, ‘git
submodule update’ will not overwrite them.  Instead, you get the usual
warning about not being able switch from a dirty branch.


File: git.info,  Node: Low-level Git operations,  Next: Hacking Git,  Prev: Submodules,  Up: Top

9 Low-level Git operations
**************************

Many of the higher-level commands were originally implemented as shell
scripts using a smaller core of low-level Git commands.  These can still
be useful when doing unusual things with Git, or just as a way to
understand its inner workings.

* Menu:

* Object access and manipulation::
* The Workflow::
* Examining the data::
* Merging multiple trees::
* Merging multiple trees, continued: Merging multiple trees; continued.


File: git.info,  Node: Object access and manipulation,  Next: The Workflow,  Up: Low-level Git operations

9.1 Object access and manipulation
==================================

The git-cat-file(1) (git-cat-file.html) command can show the contents of
any object, though the higher-level git-show(1) (git-show.html) is
usually more useful.

   The git-commit-tree(1) (git-commit-tree.html) command allows
constructing commits with arbitrary parents and trees.

   A tree can be created with git-write-tree(1) (git-write-tree.html)
and its data can be accessed by git-ls-tree(1) (git-ls-tree.html).  Two
trees can be compared with git-diff-tree(1) (git-diff-tree.html).

   A tag is created with git-mktag(1) (git-mktag.html), and the
signature can be verified by git-verify-tag(1) (git-verify-tag.html),
though it is normally simpler to use git-tag(1) (git-tag.html) for both.


File: git.info,  Node: The Workflow,  Next: Examining the data,  Prev: Object access and manipulation,  Up: Low-level Git operations

9.2 The Workflow
================

High-level operations such as git-commit(1) (git-commit.html) and
git-restore(1) (git-restore.html) work by moving data between the
working tree, the index, and the object database.  Git provides
low-level operations which perform each of these steps individually.

   Generally, all Git operations work on the index file.  Some
operations work *purely* on the index file (showing the current state of
the index), but most operations move data between the index file and
either the database or the working directory.  Thus there are four main
combinations:

* Menu:

* working directory → index::
* index → object database::
* object database → index::
* index → working directory::
* Tying it all together::


File: git.info,  Node: working directory → index,  Next: index → object database,  Up: The Workflow

9.2.1 working directory → index
-------------------------------

The git-update-index(1) (git-update-index.html) command updates the
index with information from the working directory.  You generally update
the index information by just specifying the filename you want to
update, like so:

     $ git update-index filename

   but to avoid common mistakes with filename globbing etc., the command
will not normally add totally new entries or remove old entries, i.e.
it will normally just update existing cache entries.

   To tell Git that yes, you really do realize that certain files no
longer exist, or that new files should be added, you should use the
‘--remove’ and ‘--add’ flags respectively.

   NOTE! A ‘--remove’ flag does _not_ mean that subsequent filenames
will necessarily be removed: if the files still exist in your directory
structure, the index will be updated with their new status, not removed.
The only thing ‘--remove’ means is that update-index will be considering
a removed file to be a valid thing, and if the file really does not
exist any more, it will update the index accordingly.

   As a special case, you can also do ‘git update-index --refresh’,
which will refresh the "stat" information of each index to match the
current stat information.  It will _not_ update the object status
itself, and it will only update the fields that are used to quickly test
whether an object still matches its old backing store object.

   The previously introduced git-add(1) (git-add.html) is just a wrapper
for git-update-index(1) (git-update-index.html).


File: git.info,  Node: index → object database,  Next: object database → index,  Prev: working directory → index,  Up: The Workflow

9.2.2 index → object database
-----------------------------

You write your current index file to a "tree" object with the program

     $ git write-tree

   that doesn’t come with any options—it will just write out the current
index into the set of tree objects that describe that state, and it will
return the name of the resulting top-level tree.  You can use that tree
to re-generate the index at any time by going in the other direction:


File: git.info,  Node: object database → index,  Next: index → working directory,  Prev: index → object database,  Up: The Workflow

9.2.3 object database → index
-----------------------------

You read a "tree" file from the object database, and use that to
populate (and overwrite—don’t do this if your index contains any unsaved
state that you might want to restore later!)  your current index.
Normal operation is just

     $ git read-tree <SHA-1 of tree>

   and your index file will now be equivalent to the tree that you saved
earlier.  However, that is only your _index_ file: your working
directory contents have not been modified.


File: git.info,  Node: index → working directory,  Next: Tying it all together,  Prev: object database → index,  Up: The Workflow

9.2.4 index → working directory
-------------------------------

You update your working directory from the index by "checking out"
files.  This is not a very common operation, since normally you’d just
keep your files updated, and rather than write to your working
directory, you’d tell the index files about the changes in your working
directory (i.e.  ‘git update-index’).

   However, if you decide to jump to a new version, or check out
somebody else’s version, or just restore a previous tree, you’d populate
your index file with read-tree, and then you need to check out the
result with

     $ git checkout-index filename

   or, if you want to check out all of the index, use ‘-a’.

   NOTE! ‘git checkout-index’ normally refuses to overwrite old files,
so if you have an old version of the tree already checked out, you will
need to use the ‘-f’ flag (_before_ the ‘-a’ flag or the filename) to
_force_ the checkout.

   Finally, there are a few odds and ends which are not purely moving
from one representation to the other:


File: git.info,  Node: Tying it all together,  Prev: index → working directory,  Up: The Workflow

9.2.5 Tying it all together
---------------------------

To commit a tree you have instantiated with ‘git write-tree’, you’d
create a "commit" object that refers to that tree and the history behind
it—most notably the "parent" commits that preceded it in history.

   Normally a "commit" has one parent: the previous state of the tree
before a certain change was made.  However, sometimes it can have two or
more parent commits, in which case we call it a "merge", due to the fact
that such a commit brings together ("merges") two or more previous
states represented by other commits.

   In other words, while a "tree" represents a particular directory
state of a working directory, a "commit" represents that state in time,
and explains how we got there.

   You create a commit object by giving it the tree that describes the
state at the time of the commit, and a list of parents:

     $ git commit-tree <tree> -p <parent> [(-p <parent2>)...]

   and then giving the reason for the commit on stdin (either through
redirection from a pipe or file, or by just typing it at the tty).

   ‘git commit-tree’ will return the name of the object that represents
that commit, and you should save it away for later use.  Normally, you’d
commit a new ‘HEAD’ state, and while Git doesn’t care where you save the
note about that state, in practice we tend to just write the result to
the file pointed at by ‘.git/HEAD’, so that we can always see what the
last committed state was.

   Here is a picture that illustrates how various pieces fit together:

                          commit-tree
                           commit obj
                            +----+
                            |    |
                            |    |
                            V    V
                         +-----------+
                         | Object DB |
                         |  Backing  |
                         |   Store   |
                         +-----------+
                            ^
                write-tree  |     |
                  tree obj  |     |
                            |     |  read-tree
                            |     |  tree obj
                                  V
                         +-----------+
                         |   Index   |
                         |  "cache"  |
                         +-----------+
              update-index  ^
                  blob obj  |     |
                            |     |
         checkout-index -u  |     |  checkout-index
                  stat      |     |  blob obj
                                  V
                         +-----------+
                         |  Working  |
                         | Directory |
                         +-----------+


File: git.info,  Node: Examining the data,  Next: Merging multiple trees,  Prev: The Workflow,  Up: Low-level Git operations

9.3 Examining the data
======================

You can examine the data represented in the object database and the
index with various helper tools.  For every object, you can use
git-cat-file(1) (git-cat-file.html) to examine details about the object:

     $ git cat-file -t <objectname>

   shows the type of the object, and once you have the type (which is
usually implicit in where you find the object), you can use

     $ git cat-file blob|tree|commit|tag <objectname>

   to show its contents.  NOTE! Trees have binary content, and as a
result there is a special helper for showing that content, called ‘git
ls-tree’, which turns the binary content into a more easily readable
form.

   It’s especially instructive to look at "commit" objects, since those
tend to be small and fairly self-explanatory.  In particular, if you
follow the convention of having the top commit name in ‘.git/HEAD’, you
can do

     $ git cat-file commit HEAD

   to see what the top commit was.


File: git.info,  Node: Merging multiple trees,  Next: Merging multiple trees; continued,  Prev: Examining the data,  Up: Low-level Git operations

9.4 Merging multiple trees
==========================

Git can help you perform a three-way merge, which can in turn be used
for a many-way merge by repeating the merge procedure several times.
The usual situation is that you only do one three-way merge (reconciling
two lines of history) and commit the result, but if you like to, you can
merge several branches in one go.

   To perform a three-way merge, you start with the two commits you want
to merge, find their closest common parent (a third commit), and compare
the trees corresponding to these three commits.

   To get the "base" for the merge, look up the common parent of two
commits:

     $ git merge-base <commit1> <commit2>

   This prints the name of a commit they are both based on.  You should
now look up the tree objects of those commits, which you can easily do
with

     $ git cat-file commit <commitname> | head -1

   since the tree object information is always the first line in a
commit object.

   Once you know the three trees you are going to merge (the one
"original" tree, aka the common tree, and the two "result" trees, aka
the branches you want to merge), you do a "merge" read into the index.
This will complain if it has to throw away your old index contents, so
you should make sure that you’ve committed those—in fact you would
normally always do a merge against your last commit (which should thus
match what you have in your current index anyway).

   To do the merge, do

     $ git read-tree -m -u <origtree> <yourtree> <targettree>

   which will do all trivial merge operations for you directly in the
index file, and you can just write the result out with ‘git write-tree’.


File: git.info,  Node: Merging multiple trees; continued,  Prev: Merging multiple trees,  Up: Low-level Git operations

9.5 Merging multiple trees, continued
=====================================

Sadly, many merges aren’t trivial.  If there are files that have been
added, moved or removed, or if both branches have modified the same
file, you will be left with an index tree that contains "merge entries"
in it.  Such an index tree can _NOT_ be written out to a tree object,
and you will have to resolve any such merge clashes using other tools
before you can write out the result.

   You can examine such index state with ‘git ls-files --unmerged’
command.  An example:

     $ git read-tree -m $orig HEAD $target
     $ git ls-files --unmerged
     100644 263414f423d0e4d70dae8fe53fa34614ff3e2860 1       hello.c
     100644 06fa6a24256dc7e560efa5687fa84b51f0263c3a 2       hello.c
     100644 cc44c73eb783565da5831b4d820c962954019b69 3       hello.c

   Each line of the ‘git ls-files --unmerged’ output begins with the
blob mode bits, blob SHA-1, _stage number_, and the filename.  The
_stage number_ is Git’s way to say which tree it came from: stage 1
corresponds to the ‘$orig’ tree, stage 2 to the ‘HEAD’ tree, and stage 3
to the ‘$target’ tree.

   Earlier we said that trivial merges are done inside ‘git read-tree
-m’.  For example, if the file did not change from ‘$orig’ to ‘HEAD’ or
‘$target’, or if the file changed from ‘$orig’ to ‘HEAD’ and ‘$orig’ to
‘$target’ the same way, obviously the final outcome is what is in
‘HEAD’.  What the above example shows is that file ‘hello.c’ was changed
from ‘$orig’ to ‘HEAD’ and ‘$orig’ to ‘$target’ in a different way.  You
could resolve this by running your favorite 3-way merge program, e.g.
‘diff3’, ‘merge’, or Git’s own merge-file, on the blob objects from
these three stages yourself, like this:

     $ git cat-file blob 263414f >hello.c~1
     $ git cat-file blob 06fa6a2 >hello.c~2
     $ git cat-file blob cc44c73 >hello.c~3
     $ git merge-file hello.c~2 hello.c~1 hello.c~3

   This would leave the merge result in ‘hello.c~2’ file, along with
conflict markers if there are conflicts.  After verifying the merge
result makes sense, you can tell Git what the final merge result for
this file is by:

     $ mv -f hello.c~2 hello.c
     $ git update-index hello.c

   When a path is in the "unmerged" state, running ‘git update-index’
for that path tells Git to mark the path resolved.

   The above is the description of a Git merge at the lowest level, to
help you understand what conceptually happens under the hood.  In
practice, nobody, not even Git itself, runs ‘git cat-file’ three times
for this.  There is a ‘git merge-index’ program that extracts the stages
to temporary files and calls a "merge" script on it:

     $ git merge-index git-merge-one-file hello.c

   and that is what higher level ‘git merge -s resolve’ is implemented
with.


File: git.info,  Node: Hacking Git,  Next: Git Glossary,  Prev: Low-level Git operations,  Up: Top

10 Hacking Git
**************

この章では、おそらくGit開発者だけが理解する必要があるGit実装の内部の詳細
について説明します。

* Menu:

* Object storage format::
* A birds-eye view of Git’s source code::


File: git.info,  Node: Object storage format,  Next: A birds-eye view of Git’s source code,  Up: Hacking Git

10.1 Object storage format
==========================

すべてのオブジェクトには、オブジェクトの形式(つまり、オブジェクトの使用
方法や他のオブジェクトの参照方法)を識別する、静的に決定された「タイプ」(
"type" )があります。 現在、「blob」、「tree」、「commit」、「tag」の4つ
の異なるオブジェクトタイプがあります。

   オブジェクトタイプに関係なく、すべてのオブジェクトは次の特性を共有し
ます: すべてzlibで圧縮され、タイプを指定するだけでなく、オブジェクト内の
データに関するサイズ情報も提供するヘッダーがあります。オブジェクトの名前
付けに使用されるSHA-1ハッシュは、 元のデータ＋ヘッダー のハッシュである
ため、 ‘sha1sum’ _file_ は _file_ のオブジェクト名と一致しないことに注意
してください。

   その結果、オブジェクトの一般的な整合性は、オブジェクトの内容やタイプ
に関係なく常にテストできます。すべてのオブジェクトは、 (a)ハッシュがファ
イルの内容と一致、かつ、 (b)オブジェクトが、 ‘<ascii type without space>
+ <space> + <ascii decimal size> + <byte\0> + <binary object data>’ とい
うシーケンスのバイトストリームへちゃんと解凍できることで検証できます。

   構造化オブジェクトは、その構造と他のオブジェクトへの接続をさらに検証
できます。 これは通常、すべてのオブジェクトの完全な依存関係グラフを生成
し、（ハッシュを介して表面的な一貫性を検証するだけでなく）内部の一貫性を
検証する ‘gitfsck’ プログラムを使用して行われます。


File: git.info,  Node: A birds-eye view of Git’s source code,  Prev: Object storage format,  Up: Hacking Git

10.2 A birds-eye view of Git’s source code
==========================================

新しい開発者がGitのソースコードを見つけるのは必ずしも簡単ではありません
。この節では、あなたがどこから始めればよいかを示すちょっとしたガイダンス
を提供します。

   開始するのに適した場所は、最初のコミットの内容から始めることです:

     $ git switch --detach e83c5163

   最初のリビジョンは、Gitが今日持っているほとんどすべての基礎を築きます
が、一度に読むには十分小さくまとまっています。

   そのリビジョン以降、用語が変更されていることに注意してください。 たと
えば、そのリビジョンのREADMEは、 "changeset" という単語を使用して、今、
commit (*note [def_commit_object]::) と呼んでいるものを説明しています。

   また、それを「キャッシュ」と呼ぶのではなく、「インデックス」と呼びま
す。 ただし、このファイルは引き続き ‘cache.h’ と呼ばれます。備考: これを
変更する理由はたいしたものではありません。GitのすべてのCソースで
includeされている基本的なヘッダーファイルであるため、他に適切な単一の名
前がないためです。

   あなたが最初のコミットでGitの考え方を把握したなら、あなたはより新しい
バージョンをチェックして、 ‘cache.h’ と‘ object.h‘ と ‘commit.h’ を読み
下すべきです。

   初期のGitは、(UNIXの伝統でである)非常に単純なプログラムの集まりであり
、スクリプトで使用して、出力を別のプログラムにパイプしていました。 新し
いものをテストするのが簡単だったので、これは初期開発に適していました。た
だし、最近、これらのパーツの多くが組み込みになり、コアの一部が「解放」(
"libified" )されました。つまり、パフォーマンス、移植性、およびコードの重
複を避けるために libgit.a に配置されました。

   今や、あなたはインデックスが何であるか(および、対応するデータ構造を
‘cache.h’ で探す)、そして最初のメンバーである ‘struct object’ から共通の
構造を継承するオブジェクトタイプ(blobs と trees と commits と tags)がい
くつかあることがわかりました(したがって、たとえば ‘(struct object
*)commit’ をキャストして 、 ‘&commit->object’ と同じようにすることができ
ます。つまり、オブジェクト名とフラグを取得します)。

   ここで、この情報を吸収するために一服するとしましょう。

   次のステップ: オブジェクトの命名に慣れてください。 *note Naming
commits:: を読んでください。 オブジェクトに名前を付ける方法はたくさんあ
ります(リビジョンだけではありません！)。 これらはすべて ‘sha1_name.c’ で
処理されます。 関数 ‘get_sha1()’ をざっと見てください。特別な処理の多く
は、 ‘get_sha1_basic()’ などの関数によって実行されます。

   リビジョンウォーカー。これはGitの最も解放(libified)された部分にあなた
がうまく適応できるようにします。

   基本から行きましょう。 ‘git log’ の初期バージョンは、シェルスクリプト
でした:

     $ git-rev-list --pretty $(git-rev-parse --default HEAD "$@") | \
             LESS=-S ${PAGER:-less}

   これはどういう意味か？

   ‘git rev-list’ は、リビジョンウォーカーのオリジナルバージョンであり、
「常に」stdoutにリビジョンのリストを出力します。ほとんどの新しいGitコマ
ンドは ‘git rev-list’ を使用するスクリプトとして開始されるため、これは引
き続き機能し続ける必要があります。

   ‘gitrev-parse’ はもはやそれほど重要ではありません。これは、スクリプト
によって呼び出されたさまざまな配管コマンドに関連するオプションを除外する
ためにのみ使用されました。

   ‘git rev-list’ が行ったことのほとんどは、 ‘revision.c’ と
‘revision.h’ に含まれています。 オプションを ‘rev_info’ という名前の構造
体でラップします。この構造体は、どのリビジョンをどのように歩くか(walk)な
どを制御します。

   ‘git rev-parse`の元々の仕事は、今や関数 `setup_revisions()’ によって
実行されるようになりました。この関数は、リビジョンとリビジョンウォーカー
の一般的なコマンドラインオプションを解析します。この情報は、後で使用でき
るように構造体 ‘rev_info’ に保存されます。 あなたは ‘setup_revisions()’
を呼び出した後、独自のコマンドラインオプション解析を行うことができます。
その後、初期化のために ‘prepare_revision_walk()’ を呼び出す必要がありま
す。その後は、関数 ‘get_revision()’ を使用してコミットを1つずつ取得でき
ます。

   リビジョンウォーキング処理の詳細に興味があるなら ‘cmd_log()’ の最初の
実装をご覧ください。 ‘git show v1.3.0~155^2~4’ を呼び出し、その関数まで
スクロールダウンします( ‘setup_pager()’ を直接呼び出す必要がなくなったこ
とに注意してください)。

   今日では ‘git log’ は組み込みです。つまり、コマンド ‘git’ に含まれて
いることを意味します。ビルトインのソースは、

   • ‘cmd_<bla>’ と呼ばれる関数で、通常は ‘builtin.h’ で宣言され、
     ‘builtin/<bla.c>’ で定義されます(Gitの古いバージョンでは、代わりに
     ‘builtin-<bla>.c’ に含まれていたことに注意してください)。

   • ‘git.c’ の ‘commands[]’ 配列のエントリ、および

   • ‘Makefile’ の ‘BUILTIN_OBJECTS’ エントリ。

   しばしば1つのソースファイルに複数のビルトインが含まれている場合があり
ます。たとえば、 ‘cmd_whatchanged()’ と ‘cmd_log()’ はどちらも、かなりの
コードを共有しているため、 ‘builtin/log.c’ にあります。その場合、それら
が存在する ‘.c’ ファイルのように名前が付けられていないコマンドは、
‘Makefile’ の ‘BUILT_INS’ にリストされている必要があります。

   ‘git log‘は、元のスクリプトよりもC言語版の方が複雑に見えますが、これ
により、柔軟性とパフォーマンスが大幅に向上します。

   ここでも、一息入れることをお勧めします。

   レッスン3: ソースコードを読んで学習します。マヂで、それはGitの機構に
ついて学ぶための最良の方法です(あなたが基本的な概念を知った後であれば、
ですが)。

   そして、あなたが興味を持っている事について考えてください、例えば、「
どうすればそれのオブジェクト名を知っているだけでブロブ(blob)にアクセスで
きますか？」。 最初のステップは、それを実行できるGitコマンドを見つけるこ
とです。 この例では、 ‘git show’ または ‘git cat-file’ のいずれかです。

   ここでは分かりやすくするために、 ‘git cat-file’ を使用します。

   • これは配管コマンドで、そして

   • それは最初のコミットに見つかりました(文字通り ‘cat-file.c’ として約
     20のリビジョンを経ただけで、ビルトインになったときに
     ‘builtin/cat-file.c’ に名前が変更され、その後10に満たないバージョン
     が表示されました)。

   したがって、 ‘builtin/cat-file.c’ を調べ、 ‘cmd_cat_file()’ を検索し
て、それが何をするかを調べます。

             git_config(git_default_config);
             if (argc != 3)
                     usage("git cat-file [-t|-s|-e|-p|<type>] <sha1>");
             if (get_sha1(argv[2], sha1))
                     die("Not a valid object name %s", argv[2]);

   自明な詳細は飛ばしましょう。 ここで本当に興味深いのは、 ‘get_sha1()’
の呼び出しだけです。 ‘argv[2]’ をオブジェクト名として解釈しようとし、現
在のリポジトリに存在するオブジェクトを参照している場合は、結果のSHA-1を
変数 ‘sha1’ に書き込みます。

   ここで興味深いのは以下の2つです:

   • ‘get_sha1()‘は成功で0を返します。これは一部の新しいGitハッカーを驚
     かせるかもしれませんが、UNIXには、さまざまなエラーの場合にさまざま
     な負の数を返し、成功した場合は0を返すという長い伝統があります。

   • ‘get_sha1()’ の関数シグネチャの変数 ‘sha1’ は ‘unsigned char *’ で
     すが、実際には ‘unsigned char[20]’ へのポインタであることが期待され
     ています。この変数には、指定されたコミットの160ビットのSHA-1が含ま
     れます。SHA-1が ‘unsigned char *’ として渡される場合は常に、 ‘char
     *’ として渡される16進文字のASCII表現とは対照的に、バイナリ表現であ
     ることに注意してください。

   コード全体でこれらの両方が表示されます。

   さて、肝心の部分は:

             case 0:
                     buf = read_object_with_reference(sha1, argv[1], &size, NULL);

   これはブロブ(実際にはブロブだけでなくあらゆるタイプのオブジェクト)を
読み取る方法です。 関数 ‘read_object_with_reference()’ が実際にどのよう
に機能するかを知るには、(Gitのリポジトリで ‘git grep read_object_with |
grep ":[a-z]"’ などして)そのソースコードを探して拝んでください。

   結果の使用方法を確認するには、 ‘cmd_cat_file()’ を読んでください:

             write_or_die(1, buf, size);

   機能を探す場所がわからない場合があります。このような多くの場合、 ‘git
log’ の出力を検索してから、対応するコミットを ‘git show’ すると役に立ち
ます。

   例: ‘git bundle’ のテストケースがあったことはわかっているが、それがど
こにあったか覚えていない場合(はいもちろん、あなたは ‘git grep bundle t/’
できますが、そーゆー事を言いたい訳じゃない):

     $ git log --no-merges t/

   ページャー(‘less’)の中で、 "bundle" を検索し、数行前に戻って、それが
コミット 18449ab0 にあることを確認します。このオブジェクト名をコピーして
、コマンドラインに貼り付けます。

     $ git show 18449ab0

   できた！

   別の例: スクリプトを組み込みにするために何をすべきかを調べます:

     $ git log --no-merges --diff-filter=A builtin/*.c

   ほらこのとおり。Gitは実際、Git自体のソースを見つけるのに最適なツール
です！


File: git.info,  Node: Git Glossary,  Next: Git Quick Reference,  Prev: Hacking Git,  Up: Top

11 Git Glossary
***************

* Menu:

* Git explained::


File: git.info,  Node: Git explained,  Up: Git Glossary

11.1 Git explained
==================

alternate object database
     代役(alternate)メカニズムを介して、 リポジトリ (*note
     [def_repository]::) は オブジェクトデータベース (*note
     [def_object_database]::) の一部を "alternate" (代役) 呼ばれる別のオ
     ブジェクトデータベースから継承できます。

bare repository(ベアリポジトリ)
     A bare repository is normally an appropriately named directory
     (*note [def_directory]::) with a ‘.git’ suffix that does not have a
     locally checked-out copy of any of the files under revision
     control.  That is, all of the Git administrative and control files
     that would normally be present in the hidden ‘.git’ sub-directory
     are directly present in the ‘repository.git’ directory instead, and
     no other files are present and checked out.  Usually publishers of
     public repositories make bare repositories available.

blob object(ブロブオブジェクト)
     型の無いオブジェクト (*note [def_object]::)。例:ファイルの中身。

branch
     A "branch" is a line of development.  The most recent commit (*note
     [def_commit]::) on a branch is referred to as the tip of that
     branch.  The tip of the branch is referenced by a branch head
     (*note [def_head]::), which moves forward as additional development
     is done on the branch.  A single Git repository (*note
     [def_repository]::) can track an arbitrary number of branches, but
     your working tree (*note [def_working_tree]::) is associated with
     just one of them (the "current" or "checked out" branch), and HEAD
     (*note [def_HEAD]::) points to that branch.

cache
     Obsolete for: index (*note [def_index]::).

chain(チェーン,チェイン)
     オブジェクトのリスト。リスト内の各 オブジェクト (*note
     [def_object]::) には、その後ろへの参照が含まれます(たとえば、 コミ
     ット (*note [def_commit]::) の後ろはその 親 (*note [def_parent]::)
     の1つである可能性があります)。

changeset
     "コミット (*note [def_commit]::)" の BitKeeper/cvsps での言い方です
     。Gitで変更を保存せず状態を保存するため、Gitでコミットを「
     changeset」と呼ぶのはナンセンスです。

checkout
     The action of updating all or part of the working tree (*note
     [def_working_tree]::) with a tree object (*note
     [def_tree_object]::) or blob (*note [def_blob_object]::) from the
     object database (*note [def_object_database]::), and updating the
     index (*note [def_index]::) and HEAD (*note [def_HEAD]::) if the
     whole working tree has been pointed at a new branch (*note
     [def_branch]::).

cherry-picking(チェリーピック,チェリーピッキング)
     SCM (*note [def_SCM]::) の専門用語では、 "cherry pick" (つまみ食い
     )とは、一連の変更(通常はコミット)から変更のサブセットを選択し、それ
     らを別のコードベースの上に新しい一連の変更として記録することを意味
     します。Gitでは、これは "git cherry-pick" コマンドによって実行され
     、既存のコミット (*note [def_commit]::)によって導入された変更を抽出
     し、現在のブランチ (*note [def_branch]::)の先端に基づいてそれを新し
     いコミットとして記録します。

clean
     A working tree (*note [def_working_tree]::) is clean, if it
     corresponds to the revision (*note [def_revision]::) referenced by
     the current head (*note [def_head]::).  Also see "dirty (*note
     [def_dirty]::)".

commit
     As a noun: A single point in the Git history; the entire history of
     a project is represented as a set of interrelated commits.  The
     word "commit" is often used by Git in the same places other
     revision control systems use the words "revision" or "version".
     Also used as a short hand for commit object (*note
     [def_commit_object]::).

     As a verb: The action of storing a new snapshot of the project’s
     state in the Git history, by creating a new commit representing the
     current state of the index (*note [def_index]::) and advancing HEAD
     (*note [def_HEAD]::) to point at the new commit.

commit object
     An object (*note [def_object]::) which contains the information
     about a particular revision (*note [def_revision]::), such as
     parents (*note [def_parent]::), committer, author, date and the
     tree object (*note [def_tree_object]::) which corresponds to the
     top directory (*note [def_directory]::) of the stored revision.

commit-ish (also committish)
     A commit object (*note [def_commit_object]::) or an object (*note
     [def_object]::) that can be recursively dereferenced to a commit
     object.  The following are all commit-ishes: a commit object, a tag
     object (*note [def_tag_object]::) that points to a commit object, a
     tag object that points to a tag object that points to a commit
     object, etc.

core Git
     Gitの基本的なデータ構造とユーティリティ。これは、限定的なソースコー
     ド管理ツールのみです。

DAG
     有向非巡回グラフ(Directed acyclic graph)。 コミットオブジェクト
     (*note [def_commit_object]::) は、(有向の)親を持ち、コミットオブジ
     ェクトのグラフが非巡回(同じ オブジェクト (*note [def_object]::) で
     開始・終了する チェイン (*note [def_chain]::) はありません)であるた
     め有向非巡回グラフを形成します。

dangling object
     An unreachable object (*note [def_unreachable_object]::) which is
     not reachable (*note [def_reachable]::) even from other unreachable
     objects; a dangling object has no references to it from any
     reference or object (*note [def_object]::) in the repository (*note
     [def_repository]::).

detached HEAD
     Normally the HEAD (*note [def_HEAD]::) stores the name of a branch
     (*note [def_branch]::), and commands that operate on the history
     HEAD represents operate on the history leading to the tip of the
     branch the HEAD points at.  However, Git also allows you to check
     out (*note [def_checkout]::) an arbitrary commit (*note
     [def_commit]::) that isn’t necessarily the tip of any particular
     branch.  The HEAD in such a state is called "detached".

     Note that commands that operate on the history of the current
     branch (e.g.  ‘git commit’ to build a new history on top of it)
     still work while the HEAD is detached.  They update the HEAD to
     point at the tip of the updated history without affecting any
     branch.  Commands that update or inquire information _about_ the
     current branch (e.g.  ‘git branch --set-upstream-to’ that sets what
     remote-tracking branch the current branch integrates with)
     obviously do not work, as there is no (real) current branch to ask
     about in this state.

directory
     あなたが "ls" で得られる一覧の事 :-)

dirty
     A working tree (*note [def_working_tree]::) is said to be "dirty"
     if it contains modifications which have not been committed (*note
     [def_commit]::) to the current branch (*note [def_branch]::).

evil merge
     邪悪なマージとは、どの 親 (*note [def_parent]::) にも表示されない変
     更を導入する マージ (*note [def_merge]::) です。

fast-forward
     A fast-forward is a special type of merge (*note [def_merge]::)
     where you have a revision (*note [def_revision]::) and you are
     "merging" another branch (*note [def_branch]::)’s changes that
     happen to be a descendant of what you have.  In such a case, you do
     not make a new merge (*note [def_merge]::) commit (*note
     [def_commit]::) but instead just update your branch to point at the
     same revision as the branch you are merging.  This will happen
     frequently on a remote-tracking branch (*note
     [def_remote_tracking_branch]::) of a remote repository (*note
     [def_repository]::).

fetch
     Fetching a branch (*note [def_branch]::) means to get the branch’s
     head ref (*note [def_head_ref]::) from a remote repository (*note
     [def_repository]::), to find out which objects are missing from the
     local object database (*note [def_object_database]::), and to get
     them, too.  See also git-fetch(1) (git-fetch.html).

file system
     リーナス・トーバルズは当初、Gitをユーザー空間ファイルシステム、つま
     りファイルとディレクトリを保持するインフラストラクチャとして設計し
     ました。これにより、Gitの効率と速度が保証されました。

Git archive
     リポジトリ (*note [def_repository]::) の同義語(arch people 向け)。

gitfile
     実際のリポジトリであるディレクトリを指す、作業ツリーのルートにある
     プレーンファイル ‘.git’

grafts
     Grafts enables two otherwise different lines of development to be
     joined together by recording fake ancestry information for commits.
     This way you can make Git pretend the set of parents (*note
     [def_parent]::) a commit (*note [def_commit]::) has is different
     from what was recorded when the commit was created.  Configured via
     the ‘.git/info/grafts’ file.

     Note that the grafts mechanism is outdated and can lead to problems
     transferring objects between repositories; see git-replace(1)
     (git-replace.html) for a more flexible and robust system to do the
     same thing.

hash
     Gitの文脈では オブジェクト名 (*note [def_object_name]::) と同義語。

head
     ブランチ (*note [def_branch]::) の先端にある コミット (*note
     [def_commit]::) への、 名付けられた参照 (*note [def_ref]::) です。
     パックされた参照を使用する場合を除いて、headは
     ‘$GIT_DIR/refs/heads/’ ディレクトリのファイルに保存されます。
     (linkgit: git-pack-refs[1] を参照してください。)

HEAD
     The current branch (*note [def_branch]::).  In more detail: Your
     working tree (*note [def_working_tree]::) is normally derived from
     the state of the tree referred to by HEAD. HEAD is a reference to
     one of the heads (*note [def_head]::) in your repository, except
     when using a detached HEAD (*note [def_detached_HEAD]::), in which
     case it directly references an arbitrary commit.

head ref
     head (*note [def_head]::) の同義語。

hook
     During the normal execution of several Git commands, call-outs are
     made to optional scripts that allow a developer to add
     functionality or checking.  Typically, the hooks allow for a
     command to be pre-verified and potentially aborted, and allow for a
     post-notification after the operation is done.  The hook scripts
     are found in the ‘$GIT_DIR/hooks/’ directory, and are enabled by
     simply removing the ‘.sample’ suffix from the filename.  In earlier
     versions of Git you had to make them executable.

index
     A collection of files with stat information, whose contents are
     stored as objects.  The index is a stored version of your working
     tree (*note [def_working_tree]::).  Truth be told, it can also
     contain a second, and even a third version of a working tree, which
     are used when merging (*note [def_merge]::).

index entry
     The information regarding a particular file, stored in the index
     (*note [def_index]::).  An index entry can be unmerged, if a merge
     (*note [def_merge]::) was started, but not yet finished (i.e.  if
     the index contains multiple versions of that file).

master
     デフォルトの開発 ブランチ (*note [def_branch]::) 。 Git リポジトリ
     (*note [def_repository]::) を作成するたびに、「master」という名前の
     ブランチが作成され、アクティブなブランチになります。 ほとんどのロー
     カル開発に含まれていますが、これは純粋に慣例によるものであり、必須
     ではありません。

merge
     As a verb: To bring the contents of another branch (*note
     [def_branch]::) (possibly from an external repository (*note
     [def_repository]::)) into the current branch.  In the case where
     the merged-in branch is from a different repository, this is done
     by first fetching (*note [def_fetch]::) the remote branch and then
     merging the result into the current branch.  This combination of
     fetch and merge operations is called a pull (*note [def_pull]::).
     Merging is performed by an automatic process that identifies
     changes made since the branches diverged, and then applies all
     those changes together.  In cases where changes conflict, manual
     intervention may be required to complete the merge.

     As a noun: unless it is a fast-forward (*note
     [def_fast_forward]::), a successful merge results in the creation
     of a new commit (*note [def_commit]::) representing the result of
     the merge, and having as parents (*note [def_parent]::) the tips of
     the merged branches (*note [def_branch]::).  This commit is
     referred to as a "merge commit", or sometimes just a "merge".

object(オブジェクト)
     Gitの保管ユニット(unit of storage)。その内容による SHA-1 (*note
     [def_SHA1]::) によって一意に識別されます。したがって、オブジェクト
     を変更することはできません。

object database
     Stores a set of "objects", and an individual object (*note
     [def_object]::) is identified by its object name (*note
     [def_object_name]::).  The objects usually live in
     ‘$GIT_DIR/objects/’.

object identifier(オブジェクトID)
     object name (*note [def_object_name]::) (オブジェクト名)の同義語

object name(オブジェクト名)
     オブジェクト> の一意の識別子。オブジェクト名は通常、40文字の16進文
     字列で表されます。一般に <<def_SHA1 (*note [def_object]::) とも呼ば
     れます。

object type(オブジェクトタイプ)
     「コミット (*note [def_commit_object]::) 識別子」または「ツリー
     (*note [def_tree_object]::) 識別子」または「タグ (*note
     [def_tag_object]::) 識別子」または「ブロブ (*note
     [def_blob_object]::) 識別子」のいずれかで、 オブジェクト (*note
     [def_object]::) のタイプを表します。

octopus
     3つ以上(more than two)のブランチをマージします

origin
     The default upstream repository (*note [def_repository]::).  Most
     projects have at least one upstream project which they track.  By
     default _origin_ is used for that purpose.  New upstream updates
     will be fetched into remote-tracking branches (*note
     [def_remote_tracking_branch]::) named
     origin/name-of-upstream-branch, which you can see using ‘git branch
     -r’.

overlay
     Only update and add files to the working directory, but don’t
     delete them, similar to how _cp -R_ would update the contents in
     the destination directory.  This is the default mode in a checkout
     (*note [def_checkout]::) when checking out files from the index
     (*note [def_index]::) or a tree-ish (*note [def_tree-ish]::).  In
     contrast, no-overlay mode also deletes tracked files not present in
     the source, similar to _rsync –delete_.

pack
     A set of objects which have been compressed into one file (to save
     space or to transmit them efficiently).

pack index
     The list of identifiers, and other information, of the objects in a
     pack (*note [def_pack]::), to assist in efficiently accessing the
     contents of a pack.

pathspec
     Gitコマンドでパスを制限するために使用されるパターン。

     pathspecsは、「git ls-files」、「git ls-tree」、「git add」、「git
     grep」、「git diff」、「git checkout」、および、ツリーまたはワーク
     ツリーのサブセットへの操作の為にスコープを制限する他の多くのコマン
     ドのコマンドラインで使用されます。パスが現在のディレクトリまたはト
     ップレベルのどちらを基準にしているかについては、各コマンドのドキュ
     メントを参照してください。 pathspecの構文は以下のとおりです:

        • どのパスもそれ自体と一致します

        • 最後がスラッシュであるpathspecは、ディレクトリプレフィックスを
          表します。そのpathspecのスコープは、そのサブツリーに制限されて
          います。

        • pathspecの残りの部分は、pathnameの残りの部分のパターンです。 デ
          ィレクトリプレフィックスに関連するパスは、 fnmatch(3) を使用し
          てそのパターンと照合されます。特に、 _*_ と _?_ はディレクトリ
          区切り文字と一致させる事ができます。

     たとえば、 ‘Documentation/*.jpg’ は、
     ‘Documentation/chapter_1/figure_1.jpg’ を含む、Documentationサブツ
     リー内のすべての ‘.jpg’ ファイルと一致します。

     コロン(‘:’)で始まるpathspecには特別な意味があります。短い形式では、
     先頭のコロン(‘:’)の後に0個以上の「魔法記号」(magic signature)(オプ
     ションで別のコロン(‘:’)で終了)が続き、残りはパスと照合するパターン
     です。「魔法記号」は、英数字、グロブ、正規表現の特殊文字でもコロン
     でもないASCII記号で構成されます。パターンが「魔法記号」シンボルセッ
     トに属さず、コロンではない文字で始まる場合、「魔法記号」を終了する
     オプションのコロンは省略できます。

     長い形式では、先頭のコロン(‘:’)の後に開き括弧(‘(’) 、0個以上の「魔
     法単語」(magic words)のコンマ区切りリスト、および閉じ括弧(‘)’) が続
     き、残りは次のパターンです。パスと一致します。

     コロンのみのpathspecは、「pathspecがない」ことを意味します。 この形
     式は、他のpathspecと組み合わせないでください。

     top
          魔法単語 ‘top’ (魔法記号: ‘/’)は、サブディレクトリ内からコマン
          ドを実行している場合でも、作業ツリーのルートからパターンを一致
          させます。

     literal
          ‘*’ または ‘?’ などのパターンのワイルドカードはリテラル文字と
          して扱われます。

     icase
          (英文字の)大文字小文字区別せずにマッチ

     glob
          Gitはパターンを、 FNM_PATHNAMEフラグを指定した fnmatch(3) に消
          費されるのに適したシェルグロブとして扱います。パターン内のワイ
          ルドカードは、パス名内の / と一致しません。 たとえば、「
          Documentation/*.html」は「Documentation/git.html」と一致します
          が、「Documentation/ppc/ppc.html」または「
          tools/perf/Documentation/perf.html」とは一致しません。

          フルパス名と一致するパターンの2つの連続するアスタリスク ‘**’ は
          、特別な意味を持つ場合があります:

             • 先頭の ‘**’ の後にスラッシュが続く場合は、すべてのディレ
               クトリで一致することを意味します。たとえば、 ‘**/foo’ は
               、パターン ‘foo’ と同じように、ファイルまたはディレクトリ
               ‘foo’ のどこにでも一致します。 ‘**/foo/bar’ は、ディレク
               トリ ‘foo’ の直下にあるファイルまたはディレクトリ ‘bar’ と
               一致します。

             • 末尾の ‘/**’ は、内部のすべてに一致します(matches
               everything inside)。たとえば、 ‘abc/**’ は、 ‘.gitignore’
               ファイルの場所を基準にして、ディレクトリ "abc" 内のすべて
               のファイルと無限の深さで一致します。

             • スラッシュの後に2つの連続するアスタリスクが続く場合、スラ
               ッシュは0個以上のディレクトリに一致します。 たとえば、
               ‘a/**/b’ は ‘a/b’ 、 ‘a/x/b’ 、‘a/x/y/b’ などと一致します
               。

             • 他の連続するアスタリスクは無効と見なされます。

               グロブ魔法はリテラル魔法と互換性がありません。

     attr
          ‘attr:’ の後には、スペースで区切られた「属性要件」(attribute
          requirements)のリストがあります。パスが一致すると見なされるに
          は、これらすべてを満たす必要があります。これは、通常の非魔法
          pathspecパターンマッチングに追加されます。 gitattributes(5)
          (gitattributes.html) 参照。

          パスの各属性要件は、以下のいずれかの形式を取ります:

             • ‘ATTR’ では、属性 ‘ATTR’ を設定する必要があります。

             • ‘-ATTR’ では、属性 ‘ATTR’ が設定されていない必要がありま
               す。

             • ‘ATTR = VALUE’ では、属性 ‘ATTR’ を文字列 ‘VALUE’ に設定
               する必要があります。

             • ‘!ATTR’ では、属性 ‘ATTR’ が指定されていない必要がありま
               す。

               注意: ツリーオブジェクトと照合する場合、属性は、指定され
               たツリーオブジェクトからではなく、作業ツリーから取得され
               ることに注意してください。

     exclude
          パスが非除外パススペックと一致すると、すべての除外パススペック
          (魔法記号: ‘!’ またはその同義語 ‘^’)が実行されます。一致する場
          合、パスは無視されます。非除外パススペックがない場合、パススペ
          ックなしで呼び出されたかのように、除外が結果セットに適用されま
          す。

parent(親)
     A commit object (*note [def_commit_object]::) contains a (possibly
     empty) list of the logical predecessor(s) in the line of
     development, i.e.  its parents.

pickaxe
     The term pickaxe (*note [def_pickaxe]::) refers to an option to the
     diffcore routines that help select changes that add or delete a
     given text string.  With the ‘--pickaxe-all’ option, it can be used
     to view the full changeset (*note [def_changeset]::) that
     introduced or removed, say, a particular line of text.  See
     git-diff(1) (git-diff.html).

plumbing(配管)
     core Git (*note [def_core_git]::) のキュートな呼び方。

porcelain(磁器)
     Cute name for programs and program suites depending on core Git
     (*note [def_core_git]::), presenting a high level access to core
     Git.  Porcelains expose more of a SCM (*note [def_SCM]::) interface
     than the plumbing (*note [def_plumbing]::).

per-worktree ref
     Refs that are per-worktree (*note [def_working_tree]::), rather
     than global.  This is presently only HEAD (*note [def_HEAD]::) and
     any refs that start with ‘refs/bisect/’, but might later include
     other unusual refs.

pseudoref
     Pseudorefs are a class of files under ‘$GIT_DIR’ which behave like
     refs for the purposes of rev-parse, but which are treated specially
     by git.  Pseudorefs both have names that are all-caps, and always
     start with a line consisting of a SHA-1 (*note [def_SHA1]::)
     followed by whitespace.  So, HEAD is not a pseudoref, because it is
     sometimes a symbolic ref.  They might optionally contain some
     additional data.  ‘MERGE_HEAD’ and ‘CHERRY_PICK_HEAD’ are examples.
     Unlike per-worktree refs (*note [def_per_worktree_ref]::), these
     files cannot be symbolic refs, and never have reflogs.  They also
     cannot be updated through the normal ref update machinery.
     Instead, they are updated by directly writing to the files.
     However, they can be read as if they were refs, so ‘git rev-parse
     MERGE_HEAD’ will work.

pull
     Pulling a branch (*note [def_branch]::) means to fetch (*note
     [def_fetch]::) it and merge (*note [def_merge]::) it.  See also
     git-pull(1) (git-pull.html).

push
     Pushing a branch (*note [def_branch]::) means to get the branch’s
     head ref (*note [def_head_ref]::) from a remote repository (*note
     [def_repository]::), find out if it is an ancestor to the branch’s
     local head ref, and in that case, putting all objects, which are
     reachable (*note [def_reachable]::) from the local head ref, and
     which are missing from the remote repository, into the remote
     object database (*note [def_object_database]::), and updating the
     remote head ref.  If the remote head (*note [def_head]::) is not an
     ancestor to the local head, the push fails.

reachable(到達可能)
     All of the ancestors of a given commit (*note [def_commit]::) are
     said to be "reachable" from that commit.  More generally, one
     object (*note [def_object]::) is reachable from another if we can
     reach the one from the other by a chain (*note [def_chain]::) that
     follows tags (*note [def_tag]::) to whatever they tag, commits
     (*note [def_commit_object]::) to their parents or trees, and trees
     (*note [def_tree_object]::) to the trees or blobs (*note
     [def_blob_object]::) that they contain.

rebase
     To reapply a series of changes from a branch (*note [def_branch]::)
     to a different base, and reset the head (*note [def_head]::) of
     that branch to the result.

ref
     オブジェクト名または別のrefを指す ‘refs/’ で始まる名前(例:
     ‘refs/heads/master’;別のrefを指すrefは シンボリックref (*note
     [def_symref]::) と呼ぶ)。便宜上、Gitコマンドの引数として使用する場
     合は ‘refs/’ を省略できる場合があります。詳細については
     gitrevisions(7) (gitrevisions.html) を参照してください。 refs は
     repository (*note [def_repository]::) に保存されます。

     ref名前空間は階層的です。さまざまなサブ階層がさまざまな目的で使用さ
     れます(たとえば、 ‘refs/heads/’ 階層はローカルブランチを表すために
     使用されます)。

     ‘refs/’ で始まらない特別な目的のrefがいくつかあります。最も注目すべ
     き例は ‘HEAD’ です。

reflog
     A reflog shows the local "history" of a ref.  In other words, it
     can tell you what the 3rd last revision in _this_ repository was,
     and what was the current state in _this_ repository, yesterday
     9:14pm.  See git-reflog(1) (git-reflog.html) for details.

refspec
     A "refspec" is used by fetch (*note [def_fetch]::) and push (*note
     [def_push]::) to describe the mapping between remote ref (*note
     [def_ref]::) and local ref.

remote repository
     A repository (*note [def_repository]::) which is used to track the
     same project but resides somewhere else.  To communicate with
     remotes, see fetch (*note [def_fetch]::) or push (*note
     [def_push]::).

remote-tracking branch
     A ref (*note [def_ref]::) that is used to follow changes from
     another repository (*note [def_repository]::).  It typically looks
     like _refs/remotes/foo/bar_ (indicating that it tracks a branch
     named _bar_ in a remote named _foo_), and matches the
     right-hand-side of a configured fetch refspec (*note
     [def_refspec]::).  A remote-tracking branch should not contain
     direct modifications or have local commits made to it.

repository
     A collection of refs (*note [def_ref]::) together with an object
     database (*note [def_object_database]::) containing all objects
     which are reachable (*note [def_reachable]::) from the refs,
     possibly accompanied by meta data from one or more porcelains
     (*note [def_porcelain]::).  A repository can share an object
     database with other repositories via alternates mechanism (*note
     [def_alternate_object_database]::).

resolve
     The action of fixing up manually what a failed automatic merge
     (*note [def_merge]::) left behind.

revision
     Synonym for commit (*note [def_commit]::) (the noun).

rewind
     To throw away part of the development, i.e.  to assign the head
     (*note [def_head]::) to an earlier revision (*note
     [def_revision]::).

SCM
     Source code management (tool).

SHA-1
     "Secure Hash Algorithm 1"; a cryptographic hash function.  In the
     context of Git used as a synonym for object name (*note
     [def_object_name]::).

shallow clone
     Mostly a synonym to shallow repository (*note
     [def_shallow_repository]::) but the phrase makes it more explicit
     that it was created by running ‘git clone --depth=...’ command.

shallow repository
     A shallow repository (*note [def_repository]::) has an incomplete
     history some of whose commits (*note [def_commit]::) have parents
     (*note [def_parent]::) cauterized away (in other words, Git is told
     to pretend that these commits do not have the parents, even though
     they are recorded in the commit object (*note
     [def_commit_object]::)).  This is sometimes useful when you are
     interested only in the recent history of a project even though the
     real history recorded in the upstream is much larger.  A shallow
     repository is created by giving the ‘--depth’ option to
     git-clone(1) (git-clone.html), and its history can be later
     deepened with git-fetch(1) (git-fetch.html).

stash entry
     An object (*note [def_object]::) used to temporarily store the
     contents of a dirty (*note [def_dirty]::) working directory and the
     index for future reuse.

submodule
     とあるリポジトリの内部で、それとは別個のプロジェクトの履歴を保持す
     る リポジトリ (*note [def_repository]::) (ここで、その、とあるリポ
     ジトリを スーパープロジェクト (*note [def_superproject]::) と呼びま
     す)。

superproject
     作業ツリー内の他のプロジェクトのリポジトリを サブモジュール (*note
     [def_submodule]::) として参照する リポジトリ (*note
     [def_repository]::) 。 スーパープロジェクトは、含まれているサブモジ
     ュールのコミットオブジェクトの名前を知っています(ただし、そのコピー
     は保持していません)。

symref
     シンボリックref(シンボリック参照): SHA-1 (*note [def_SHA1]::) ID自
     体を含む代わりに「ref: refs/some/thing」の形式であり、参照されると
     、この参照を再帰的に逆参照します。 _HEAD (*note [def_HEAD]::)_ は
     symrefの代表的な例です。シンボリックrefは git-symbolic-ref(1)
     (git-symbolic-ref.html) コマンドで操作されます。

tag
     A ref (*note [def_ref]::) under ‘refs/tags/’ namespace that points
     to an object of an arbitrary type (typically a tag points to either
     a tag (*note [def_tag_object]::) or a commit object (*note
     [def_commit_object]::)).  In contrast to a head (*note
     [def_head]::), a tag is not updated by the ‘commit’ command.  A Git
     tag has nothing to do with a Lisp tag (which would be called an
     object type (*note [def_object_type]::) in Git’s context).  A tag
     is most typically used to mark a particular point in the commit
     ancestry chain (*note [def_chain]::).

tag object
     An object (*note [def_object]::) containing a ref (*note
     [def_ref]::) pointing to another object, which can contain a
     message just like a commit object (*note [def_commit_object]::).
     It can also contain a (PGP) signature, in which case it is called a
     "signed tag object".

topic branch
     A regular Git branch (*note [def_branch]::) that is used by a
     developer to identify a conceptual line of development.  Since
     branches are very easy and inexpensive, it is often desirable to
     have several small branches that each contain very well defined
     concepts or small incremental yet related changes.

tree
     Either a working tree (*note [def_working_tree]::), or a tree
     object (*note [def_tree_object]::) together with the dependent blob
     (*note [def_blob_object]::) and tree objects (i.e.  a stored
     representation of a working tree).

tree object
     An object (*note [def_object]::) containing a list of file names
     and modes along with refs to the associated blob and/or tree
     objects.  A tree (*note [def_tree]::) is equivalent to a directory
     (*note [def_directory]::).

tree-ish (also treeish)
     ツリーっぽい何か。ツリーオブジェクトに再帰的に逆参照できる ツリーオ
     ブジェクト (*note [def_tree_object]::) または オブジェクト (*note
     [def_object]::) です。 コミットオブジェクト (*note
     [def_commit_object]::) を逆参照すると、その リビジョン (*note
     [def_revision]::) の最上位 ディレクトリ> に対応するツリーオブジェク
     トが生成されます。※右記は全てツリーっぽい(tree-ish)モノです:
     <<def_commit-ish (*note [def_directory]::) 、ツリーオブジェクト、ツ
     リーオブジェクトを指す タグオブジェクト (*note [def_tag_object]::)
     、タグオブジェクトを指すタグオブジェクト

unmerged index
     An index (*note [def_index]::) which contains unmerged index
     entries (*note [def_index_entry]::).

unreachable object
     An object (*note [def_object]::) which is not reachable (*note
     [def_reachable]::) from a branch (*note [def_branch]::), tag (*note
     [def_tag]::), or any other reference.

upstream branch
     The default branch (*note [def_branch]::) that is merged into the
     branch in question (or the branch in question is rebased onto).  It
     is configured via branch.<name>.remote and branch.<name>.merge.  If
     the upstream branch of _A_ is _origin/B_ sometimes we say "_A_ is
     tracking _origin/B_".

working tree
     The tree of actual checked out files.  The working tree normally
     contains the contents of the HEAD (*note [def_HEAD]::) commit’s
     tree, plus any local changes that you have made but not yet
     committed.


File: git.info,  Node: Git Quick Reference,  Next: Notes and todo list for this manual,  Prev: Git Glossary,  Up: Top

Appendix A Git Quick Reference
******************************

これは主要なコマンドの簡単な要約です。ここまでの章を読めば、これらがどの
ように機能するか、より詳細に説明してあります。

* Menu:

* Creating a new repository: Creating a new repository <1>.
* Managing branches::
* Exploring history::
* Making changes::
* Merging::
* Sharing your changes::
* Repository maintenance::


File: git.info,  Node: Creating a new repository <1>,  Next: Managing branches,  Up: Git Quick Reference

A.1 Creating a new repository
=============================

tarballから持ってくる:

     $ tar xzf project.tar.gz
     $ cd project
     $ git init
     Initialized empty Git repository in .git/
     $ git add .
     $ git commit

   リモートのリポジトリから持ってくる:

     $ git clone git://example.com/pub/project.git
     $ cd project


File: git.info,  Node: Managing branches,  Next: Exploring history,  Prev: Creating a new repository <1>,  Up: Git Quick Reference

A.2 Managing branches
=====================

     $ git branch                    # list all local branches in this repo
     $ git switch test               # switch working directory to branch "test"
     $ git branch new                # create branch "new" starting at current HEAD
     $ git branch -d new             # delete branch "new"

   現在のHEAD(デフォルト)に基づいて新しいブランチを作成する代わりに、以
下を使用します:

     $ git branch new test    # branch named "test"
     $ git branch new v2.6.15 # tag named v2.6.15
     $ git branch new HEAD^   # commit before the most recent
     $ git branch new HEAD^^  # commit before that
     $ git branch new test~10 # ten commits before tip of branch "test"

   新しいブランチを作成と同時にその新しいブランチに切り替えます:

     $ git switch -c new v2.6.15

   あなたがクローンを作成した元のリポジトリから持ってきてブランチを更新
・調査します:

     $ git fetch             # update
     $ git branch -r         # list
       origin/master
       origin/next
       ...
     $ git switch -c masterwork origin/master

   別のリポジトリからブランチを取得し、あなたのリポジトリで新しい名前を
付けます:

     $ git fetch git://example.com/project.git theirbranch:mybranch
     $ git fetch git://example.com/project.git v2.6.15:mybranch

   定期的に使用するリポジトリのリストを保持します:

     $ git remote add example git://example.com/project.git
     $ git remote                    # list remote repositories
     example
     origin
     $ git remote show example       # get details
     * remote example
       URL: git://example.com/project.git
       Tracked remote branches
         master
         next
         ...
     $ git fetch example             # update branches from example
     $ git branch -r                 # list all remote branches


File: git.info,  Node: Exploring history,  Next: Making changes,  Prev: Managing branches,  Up: Git Quick Reference

A.3 Exploring history
=====================

     $ gitk                      # visualize and browse history
     $ git log                   # list all commits
     $ git log src/              # ...modifying src/
     $ git log v2.6.15..v2.6.16  # ...in v2.6.16, not in v2.6.15
     $ git log master..test      # ...in branch test, not in branch master
     $ git log test..master      # ...in branch master, but not in test
     $ git log test...master     # ...in one branch, not in both
     $ git log -S'foo()'         # ...where difference contain "foo()"
     $ git log --since="2 weeks ago"
     $ git log -p                # show patches as well
     $ git show                  # most recent commit
     $ git diff v2.6.15..v2.6.16 # diff between two tagged versions
     $ git diff v2.6.15..HEAD    # diff with current head
     $ git grep "foo()"          # search working directory for "foo()"
     $ git grep v2.6.15 "foo()"  # search old tree for "foo()"
     $ git show v2.6.15:a.txt    # look at old version of a.txt

   デグレ(regression)を探します:

     $ git bisect start
     $ git bisect bad                # current version is bad
     $ git bisect good v2.6.13-rc2   # last known good revision
     Bisecting: 675 revisions left to test after this
                                     # test here, then:
     $ git bisect good               # if this revision is good, or
     $ git bisect bad                # if this revision is bad.
                                     # repeat until done.


File: git.info,  Node: Making changes,  Next: Merging,  Prev: Exploring history,  Up: Git Quick Reference

A.4 Making changes
==================

Gitにあなたが誰なのか教えてやってください:

     $ cat >>~/.gitconfig <<\EOF
     [user]
             name = Your Name Comes Here
             email = you@yourdomain.example.com
     EOF

   次のコミットに含めるファイルの内容を選択してから、コミットします:

     $ git add a.txt    # updated file
     $ git add b.txt    # new file
     $ git rm c.txt     # old file
     $ git commit

   または、ワンステップでコミットを準備・作成します:

     $ git commit d.txt # use latest content only of d.txt
     $ git commit -a    # use latest content of all tracked files


File: git.info,  Node: Merging,  Next: Sharing your changes,  Prev: Making changes,  Up: Git Quick Reference

A.5 Merging
===========

     $ git merge test   # merge branch "test" into the current branch
     $ git pull git://example.com/project.git master
                        # fetch and merge in remote branch
     $ git pull . test  # equivalent to git merge test


File: git.info,  Node: Sharing your changes,  Next: Repository maintenance,  Prev: Merging,  Up: Git Quick Reference

A.6 Sharing your changes
========================

パッチの輸出入(inport/export):

     $ git format-patch origin..HEAD # format a patch for each commit
                                     # in HEAD but not in origin
     $ git am mbox # import patches from the mailbox "mbox"

   別のGitリポジトリからブランチをフェッチしてから、現在のブランチにマー
ジします:

     $ git pull git://example.com/project.git theirbranch

   現在のブランチにマージする前に、フェッチしたブランチをローカルブラン
チに保存します:

     $ git pull git://example.com/project.git theirbranch:mybranch

   ローカルブランチでコミットを作成した後、あなたのコミットでリモートブ
ランチを更新します:

     $ git push ssh://example.com/project.git mybranch:theirbranch

   リモートブランチとローカルブランチの両方に "test" という名前が付けら
れている場合:

     $ git push ssh://example.com/project.git test

   頻繁に使用されるリモートリポジトリのショートカットバージョン:

     $ git remote add example ssh://example.com/project.git
     $ git push example test


File: git.info,  Node: Repository maintenance,  Prev: Sharing your changes,  Up: Git Quick Reference

A.7 Repository maintenance
==========================

破損(corruption)を確認します:

     $ git fsck

   再圧縮し、未使用の残骸を取り除きます:

     $ git gc


File: git.info,  Node: Notes and todo list for this manual,  Prev: Git Quick Reference,  Up: Top

Appendix B Notes and todo list for this manual
**********************************************

* Menu:

* Todo list::


File: git.info,  Node: Todo list,  Up: Notes and todo list for this manual

B.1 Todo list
=============

これらは未だ作業中です。

   基本的な要件:

   • Gitの特別な知識がなくても、UNIXコマンドラインの基本を理解していれば
     、インテリジェントな人であれば最初から最後まで読みやすくする必要が
     あります。必要に応じて、その他の前提条件が発生したときに具体的に言
     及する必要があります。

   • 可能な場合は常に、セクションの見出しで、実行方法を説明するタスクを
     、必要以上の知識を必要としない言語で明確に説明する必要があります。
     たとえば、 "the ‘git am’ command" ではなく "importing patches into
     a project" です。

   明確な章の依存関係グラフを作成する方法を考えてください。これにより、
人々は必ずしもその間のすべてを読むことなく、重要なトピックにたどり着くこ
とができます。

   省略されている他のものについては、 ‘Documentation/’ を浚ってください
。特に:

   • howtoと

   • ‘technical/’ のいくつかと

   • フック

   • git(1) (git.html) のコマンドの一覧

   Scan email archives for other stuff left out

   Scan man pages to see if any assume more background than this manual
provides.

   Add more good examples.  Entire sections of just cookbook examples
might be a good idea; maybe make an "advanced examples" section a
standard end-of-chapter section?

   Include cross-references to the glossary, where appropriate.

   Add a section on working with other version control systems,
including CVS, Subversion, and just imports of series of release
tarballs.

   Write a chapter on using plumbing and writing scripts.

   Alternates, clone -reference, etc.

   リポジトリの破損からの回復の詳細は、以下:
https://lore.kernel.org/git/Pine.LNX.4.64.0702272039540.12485@woody.linux-foundation.org/
(https://lore.kernel.org/git/Pine.LNX.4.64.0702272039540.12485@woody.linux-foundation.org/)
https://lore.kernel.org/git/Pine.LNX.4.64.0702141033400.3604@woody.linux-foundation.org/
(https://lore.kernel.org/git/Pine.LNX.4.64.0702141033400.3604@woody.linux-foundation.org/)



Tag Table:
Node: Top212
Node: Introduction3179
Node: Repositories and Branches5043
Node: How to get a Git repository5656
Node: How to check out a different version of a project7219
Node: Understanding History; Commits10728
Node: Understanding history; commits; parents; and reachability13426
Node: Understanding history; History diagrams15049
Node: Understanding history; What is a branch?15931
Node: Manipulating branches16924
Node: Examining an old version without creating a new branch18996
Node: Examining branches from a remote repository21370
Node: Naming branches; tags; and other references23660
Node: Updating a repository with git fetch25556
Node: Fetching branches from other repositories26413
Node: Exploring Git history28326
Node: How to use bisect to find a regression29325
Node: Naming commits33429
Node: Creating tags36369
Node: Browsing revisions37128
Node: Generating diffs39118
Node: Viewing old file versions40071
Node: Examples40821
Node: Counting the number of commits on a branch41274
Node: Check whether two branches point at the same history41986
Node: Find first tagged version including a given fix43305
Node: Showing commits unique to a given branch46275
Node: Creating a changelog and tarball for a software release48047
Node: Finding commits referencing a file with given content49883
Node: Developing with Git50677
Node: Telling Git your name51150
Node: Creating a new repository51959
Node: How to make a commit52474
Node: Creating good commit messages55369
Node: Ignoring files56073
Node: How to merge58096
Node: Resolving a merge60146
Node: Getting conflict-resolution help during a merge61515
Node: Undoing a merge65288
Node: Fast-forward merges65936
Node: Fixing mistakes66646
Node: Fixing a mistake with a new commit67785
Node: Fixing a mistake by rewriting history68755
Node: Checking out an old version of a file69904
Node: Temporarily setting aside work in progress70782
Node: Ensuring good performance71828
Node: Ensuring reliability72451
Node: Checking the repository for corruption72692
Node: Recovering lost changes73905
Node: Reflogs74145
Node: Examining dangling objects76008
Node: Sharing development with others77645
Node: Getting updates with git pull78087
Node: Submitting patches to a project80300
Node: Importing patches to a project81604
Node: Public Git repositories82899
Node: Setting up a public repository85444
Node: Exporting a Git repository via the Git protocol86230
Node: Exporting a git repository via HTTP87349
Node: Pushing changes to a public repository88641
Node: What to do when a push fails90785
Node: Setting up a shared repository93197
Node: Allowing web browsing of a repository94846
Node: How to get a Git repository with minimal history95652
Node: Examples <1>96715
Node: Maintaining topic branches for a Linux subsystem maintainer96950
Node: Rewriting history and maintaining patch series105759
Node: Creating the perfect patch series106648
Node: Keeping a patch series up to date using git rebase108131
Node: Rewriting a single commit110766
Node: Reordering or selecting from a patch series111591
Node: Using interactive rebases112265
Node: Other tools114635
Node: Problems with rewriting history114988
Node: Why bisecting merge commits can be harder than bisecting linear history116815
Node: Advanced branch management119812
Node: Fetching individual branches120179
Node: git fetch and fast-forwards121297
Node: Forcing git fetch to do non-fast-forward updates122768
Node: Configuring remote-tracking branches123560
Node: Git concepts125300
Node: The Object Database125958
Node: Commit Object129439
Node: Tree Object132750
Node: Blob Object135216
Node: Trust136927
Node: Tag Object138824
Node: How Git stores objects efficiently; pack files140097
Node: Dangling objects143047
Node: Recovering from repository corruption148352
Node: The index153999
Node: Submodules157729
Node: Pitfalls with submodules163801
Node: Low-level Git operations166360
Node: Object access and manipulation166941
Node: The Workflow167820
Node: working directory → index168709
Node: index → object database170412
Node: object database → index171003
Node: index → working directory171660
Node: Tying it all together172864
Node: Examining the data175728
Node: Merging multiple trees176847
Node: Merging multiple trees; continued178677
Node: Hacking Git181711
Node: Object storage format182062
Node: A birds-eye view of Git’s source code184038
Node: Git Glossary195844
Node: Git explained196002
Ref: [def_alternate_object_database]196100
Ref: [def_bare_repository]196428
Ref: [def_blob_object]197033
Ref: [def_branch]197165
Ref: [def_cache]197777
Ref: [def_chain]197832
Ref: [def_changeset]198176
Ref: [def_checkout]198419
Ref: [def_cherry-picking]198847
Ref: [def_clean]199541
Ref: [def_commit]199775
Ref: [def_commit_object]200417
Ref: [def_commit-ish]200776
Ref: [def_core_git]201179
Ref: [def_DAG]201333
Ref: [def_dangling_object]201755
Ref: [def_detached_HEAD]202080
Ref: [def_directory]203158
Ref: [def_dirty]203224
Ref: [def_evil_merge]203440
Ref: [def_fast_forward]203612
Ref: [def_fetch]204253
Ref: [def_file_system]204606
Ref: [def_git_archive]204913
Ref: [def_gitfile]205010
Ref: [def_grafts]205165
Ref: [def_hash]205793
Ref: [def_head]205889
Ref: [def_HEAD]206288
Ref: [def_head_ref]206703
Ref: [def_hook]206760
Ref: [def_index]207312
Ref: [def_index_entry]207650
Ref: [def_master]207933
Ref: [def_merge]208362
Ref: [def_object]209512
Ref: [def_object_database]209770
Ref: [def_object_identifier]209998
Ref: [def_object_name]210120
Ref: [def_object_type]210365
Ref: [def_octopus]210767
Ref: [def_origin]210843
Ref: [def_overlay]211251
Ref: [def_pack]211731
Ref: [def_pack_index]211854
Ref: [def_pathspec]212035
Ref: [def_parent]218964
Ref: [def_pickaxe]219148
Ref: [def_plumbing]219538
Ref: [def_porcelain]219626
Ref: [def_per_worktree_ref]219906
Ref: [def_pseudoref]220164
Ref: [def_pull]221055
Ref: [def_push]221231
Ref: [def_reachable]221855
Ref: [def_rebase]222408
Ref: [def_ref]222590
Ref: [def_reflog]223477
Ref: [def_refspec]223757
Ref: [def_remote]223940
Ref: [def_remote_tracking_branch]224179
Ref: [def_repository]224656
Ref: [def_resolve]225117
Ref: [def_revision]225234
Ref: [def_rewind]225303
Ref: [def_SCM]225460
Ref: [def_SHA1]225501
Ref: [def_shallow_clone]225667
Ref: [def_shallow_repository]225877
Ref: [def_stash]226626
Ref: [def_submodule]226809
Ref: [def_superproject]227119
Ref: [def_symref]227542
Ref: [def_tag]227970
Ref: [def_tag_object]228579
Ref: [def_topic_branch]228888
Ref: [def_tree]229232
Ref: [def_tree_object]229484
Ref: [def_tree-ish]229737
Ref: [def_unmerged_index]230534
Ref: [def_unreachable_object]230658
Ref: [def_upstream_branch]230862
Ref: [def_working_tree]231194
Node: Git Quick Reference231430
Node: Creating a new repository <1>231991
Node: Managing branches232465
Node: Exploring history234589
Node: Making changes236236
Node: Merging237025
Node: Sharing your changes237400
Node: Repository maintenance238749
Node: Notes and todo list for this manual239039
Node: Todo list239258

End Tag Table


Local Variables:
coding: utf-8
End:
