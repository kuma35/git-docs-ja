'\" t
.\"     Title: git-clean
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: 12/10/2022
.\"    Manual: Git Manual
.\"    Source: Git 2.38.0.rc1.238.g4f4d434dc6.dirty
.\"  Language: English
.\"
.TH "GIT\-CLEAN" "1" "12/10/2022" "Git 2\&.38\&.0\&.rc1\&.238\&.g" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-clean \- 作業ツリーから追跡されていないファイルを削除する
.SH "SYNOPSIS"
.sp
.nf
\fIgit clean\fR [\-d] [\-f] [\-i] [\-n] [\-q] [\-e <pattern>] [\-x | \-X] [\-\-] <path>\&...
.fi
.sp
.SH "DESCRIPTION"
.sp
現在のディレクトリから開始して、バージョン管理下にないファイルを再帰的に削除することにより、作業ツリーをクリーンにします。
.sp
通常、Gitが追跡していないファイルのみが削除されますが、 \fB\-x\fR オプションが指定されている場合、無視されたファイル(ignored files)も削除されます。これは、たとえば、ビルドでの生成物全てを削除するのに役立ちます。
.sp
オプションで、任意の数の \fB<path> \&.\&.\&.\fR 引数を指定すると、それらのパスのみが影響を受けます。
.SH "OPTIONS"
.PP
\fB\-d\fR
.RS 4
通常、<path> が指定されていない場合、削除が多すぎるのを避けるために、git cleanは追跡されていないディレクトリ内には再帰処理しません。
\fB\-d\fR
を指定すると、そのようなディレクトリ内でも再帰的に処理します。パスが指定されている場合、
\fB\-d\fR
は関係ありません。(\fB\-\-force\fR
で言及されているネストされたgitディレクトリを除く、)指定されたパスに一致するすべての追跡されていないファイルは削除されます。
.RE
.PP
\fB\-f\fR, \fB\-\-force\fR
.RS 4
Git構成変数 clean\&.requireForce が false に設定されてい無い場合、「git clean」は、
\fB\-f\fR
または
\fB\-i\fR
が指定されていない限り、ファイルまたはディレクトリの削除を拒否します。 2つ目の
\fB\-f\fR
が指定されていない限り、Gitは追跡されていないネストされたgitリポジトリ(\&.gitサブディレクトリを持つディレクトリ)の変更を拒否します。
.RE
.PP
\fB\-i\fR, \fB\-\-interactive\fR
.RS 4
何が行われるを示し、ファイルを対話的にクリーンアップします。 詳細は「Interactive mode」を参照してください。
.RE
.PP
\fB\-n\fR, \fB\-\-dry\-run\fR
.RS 4
実際には何も削除せず、何が行われるかを表示します。
.RE
.PP
\fB\-q\fR, \fB\-\-quiet\fR
.RS 4
静かにして、エラーのみを報告し、正常に削除されたファイルは報告しないでください。
.RE
.PP
\fB\-e <pattern>\fR, \fB\-\-exclude=<pattern>\fR
.RS 4
標準の無視ルールに加えて、指定の除外パターンを使用します(\fBgitignore\fR(5)
参照)。
.RE
.PP
\fB\-x\fR
.RS 4
標準の無視ルール(\fBgitignore\fR(5)
参照)を使用しないでください。ただし、コマンドラインから
\fB\-e\fR
オプションを指定して指定された無視ルールは使用してください。これにより、ビルド生成物を含む、追跡されていないすべてのファイルを削除できます。これを使用して（おそらく「git restore」または「git reset」と組み合わせて）、ビルドをテストするためのクリーンな、元の作業ディレクトリを作成できます。
.RE
.PP
\fB\-X\fR
.RS 4
Gitによって無視されたファイルのみを削除します。これは、すべてを最初から再構築するのに役立つ場合がありますが、手動で作成したファイルは保持します。
.RE
.SH "INTERACTIVE MODE"
.sp
コマンドがinteractive modeに入ると、クリーンアップするファイルとディレクトリが表示され、インタラクティブコマンドループに入ります。
.sp
コマンドループは、使用可能なサブコマンドのリストを表示し、「Whatnow> 」というプロンプトを表示します。一般に、プロンプトが単一の「>」で終わる場合、以下のように、選択肢の1つだけを選択し、ENTERキーを押します:
.sp
.if n \{\
.RS 4
.\}
.nf
    *** Commands ***
        1: clean                2: filter by pattern    3: select by numbers
        4: ask each             5: quit                 6: help
    What now> 1
.fi
.if n \{\
.RE
.\}
.sp
.sp
選択が一意である限り、上記は「c」または「clean」と打ち込む事もできます。
.sp
メインコマンドループには6つのサブコマンドがあります。
.PP
clean
.RS 4
ファイルとディレクトリのクリーニングを開始して、終了(quit)します。
.RE
.PP
filter by pattern
.RS 4
これにより、削除するファイルとディレクトリが表示され、「Input ignore patterns>>」(入力無視パターン)プロンプトが表示されます。スペースで区切られたパターンを入力して、ファイルとディレクトリを削除から除外できます。 例えば。 「* \&.c * \&.h」は、「\&.c」と「\&.h」で終わるファイルを削除から除外します。そして、結果に満足したら、ENTER を押してメインメニューに戻ります。
.RE
.PP
select by numbers
.RS 4
これにより、削除するファイルとディレクトリが表示され、「Select items to delete>>」(削除するアイテムを選択)というプロンプトが表示されます。プロンプトがこのように二重の「>>」で終わる場合、空白またはコンマで連結して複数の選択を行うことができます。また、あなたは範囲を伝えることができます。 例えば「2\-57,9」でリストから2,3,4,5,7,9を選択します。範囲の2番目の数値を省略すると、残りのすべての項目が選択されます。 例えば「7\-」はリストから7,8,9を選択します。「*」dで全てを選択できます。そして、結果に満足したら、ENTER を押してメインメニューに戻ります。
.RE
.PP
ask each
.RS 4
これはクリーニングが始まると、アイテムを削除するために一つずつ確認する必要があります。この操作は、上記の2つのアクションほど効率的ではないことに注意してください。
.RE
.PP
quit
.RS 4
これにより、クリーニングを行わずに終了(quit)できます。
.RE
.PP
help
.RS 4
git\-cleanの対話的な簡単な使用法を示します。
.RE
.SH "CONFIGURATION"
.sp
このセクションの以下のすべては、 \fBgit-config\fR(1) ドキュメントの抜粋です。 内容は \fBgit-config\fR(1) ドキュメント にあるものと同一です:
.PP
clean\&.requireForce
.RS 4
\fB\-f\fR
または
\fB\-i\fR
または
\fB\-n\fR
が指定されない限り、git\-clean が何もしないようにするためのブール値です。 デフォルトは true です。
.RE
.SH "SEE ALSO"
.sp
\fBgitignore\fR(5)
.SH "GIT"
.sp
Part of the \fBgit\fR(1) suite
