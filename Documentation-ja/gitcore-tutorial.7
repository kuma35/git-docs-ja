'\" t
.\"     Title: gitcore-tutorial
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: 12/10/2022
.\"    Manual: Git Manual
.\"    Source: Git 2.38.0.rc1.238.g4f4d434dc6.dirty
.\"  Language: English
.\"
.TH "GITCORE\-TUTORIAL" "7" "12/10/2022" "Git 2\&.38\&.0\&.rc1\&.238\&.g" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
gitcore-tutorial \- 開発者のためのGit coreチュートリアル
.SH "SYNOPSIS"
.sp
git *
.SH "DESCRIPTION"
.sp
このチュートリアルでは、「コア」(core)Gitコマンドを使用してGitリポジトリを設定および操作する方法について説明します。
.sp
あなたがGitをリビジョン管理システムとして使用する必要がある場合は、「A Tutorial Introduction to Git」( linkgit: gittutorial[7] )または \m[blue]\fBthe Git User Manual\fR\m[]\&\s-2\u[1]\d\s+2 から始めることをお勧めします。
.sp
しかしながら、Gitの内部を理解したい場合は、これら低レベルのツールを理解しておくと役に立ちます。
.sp
コアGit(core Git)は「配管」(plumbing)と呼ばれることが多く、その上に「磁器」(porcelain)と呼ばれるより美しいユーザーインターフェイスがあります。配管コマンドを直接使用することはあまりありませんが、磁器コマンドが使えない時に配管コマンドでどうするかを知っておくのは良い事です。
.sp
このドキュメントが最初に作成されたとき、多くの磁器コマンドはシェルスクリプトでした。説明を簡単にするために、配管がどのように組み合わされて磁器コマンドを形成するかを示す例としていまだそれらを使用しています。ソースツリーには、参照用に contrib/examples/ にこれらのスクリプトの一部が含まれています。これらは最早シェルスクリプトとして実装されなくなりましたが、それでも、配管レイヤーコマンドの機能の説明は引き続き有効です。
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
より深い技術的な詳細は、多くの場合 Note 欄になっています。最初の読書ではスキップしてかまいません。
.sp .5v
.RE
.SH "CREATING A GIT REPOSITORY"
.sp
新しいGitリポジトリの作成はこれ以上ないほど簡単です。すべてのGitリポジトリは空から始まります。必要なのは、作業ツリーとして使用するサブディレクトリを見つけることだけです。まったく新しいプロジェクトの場合は、それは空のものか、あるいは、Gitにインポートする既存の作業ツリーのいずれかです。
.sp
私達の最初の例において、既存のファイルを使用せずに、まったく新しいリポジトリを最初から開始します。これを「git\-tutorial」と呼ぶことにします。起動するには、そのサブディレクトリを作成し、そのサブディレクトリに入って、 \fBgit init\fR を使用してGitインフラストラクチャを初期化します:
.sp
.if n \{\
.RS 4
.\}
.nf
$ mkdir git\-tutorial
$ cd git\-tutorial
$ git init
.fi
.if n \{\
.RE
.\}
.sp
.sp
そうすると、Gitは以下のように答えます
.sp
.if n \{\
.RS 4
.\}
.nf
Initialized empty Git repository in \&.git/
.fi
.if n \{\
.RE
.\}
.sp
.sp
これは、奇妙なことを何もしていないこと、そして新しいプロジェクト用にローカルの \fB\&.git\fR ディレクトリセットアップを作成したことを示すGit流のやり方です。これで \fB\&.git\fR ディレクトリができ、\fIls\fR でそれを調べることができます。新しい空のプロジェクトの場合、特に、以下の3つのエントリが表示されます:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBref: refs/heads/master\fR
という内容の
\fBHEAD\fR
というファイル。これはシンボリックリンクに似ており、
\fBHEAD\fR
ファイルは
\fBrefs/heads/master\fR
を指します。
.sp
\fBHEAD\fR
リンクが指すファイルがまだ存在しないという事実について心配する必要はありません。まだあなたは
\fBHEAD\fR
開発ブランチを開始するコミットを作成していないからです。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
プロジェクトのすべてのオブジェクトを含む
\fBobjects\fR
というサブディレクトリ。オブジェクトを直接見る理由は何も無いはずですが、これらのオブジェクトがリポジトリ内のすべての実際の「データ」を含むものであることを知りたい場合があります。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
オブジェクトへの参照を含む
\fBrefs\fR
と呼ばれるサブディレクトリ。
.RE
.sp
特に、 \fBrefs\fR サブディレクトリには、それぞれ \fBheads\fR と \fBtags\fR という名前の2つのサブディレクトリが含まれます。それらは、名前が示すとおりに機能します。つまり、開発のさまざまな「ヘッド」(先頭)(別名「ブランチ」)への参照と、リポジトリ内の特定のバージョンに名前を付けるために作成した「タグ」への参照が含まれます。
.sp
注: 特別な \fBmaster\fR ヘッドがデフォルトのブランチであるため、作成された \fB\&.git/HEAD\fR ファイルは、まだ存在していなくてもそれを指します。基本的に、 \fBHEAD\fR リンクは常に現在作業しているブランチを指しているはずであり、いつも \fBmaster\fR ブランチでの作業から始まることを期待します。
.sp
けれども、これは単なる慣例であり、ブランチには任意の名前を付けることができ、あなたは「master」ブランチを持つ必要はありません。ただし、多くのGitツールは \fB\&.git/HEAD\fR が最初から有効であると想定します。
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
「オブジェクト」は、その160ビットのSHA\-1ハッシュ、別名「オブジェクト名」によって識別され、オブジェクトへの参照は、常にそのSHA\-1名の16進表現の40バイトです。 \fBrefs\fR サブディレクトリ内のファイルには、これらの16進参照(通常、末尾に \fB\en\fR があります)が含まれていると予想されるため、実際にあなたのツリーにデータを入力し始めると、これらの \fBrefs\fR サブディレクトリにはこれらの参照を含む41バイトのファイルが多数表示されるはずです。
.sp .5v
.RE
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
上級ユーザーは、このチュートリアルを終了した後、 \fBgitrepository-layout\fR(5) を確認することをお勧めします。
.sp .5v
.RE
.sp
これで、あなたの最初のGitリポジトリが作成されました。もちろん、空なのであまり役に立ちません。なので、データの入力を始めましょう。
.SH "POPULATING A GIT REPOSITORY"
.sp
我々はシンプルかつ愚直に行きたいと思います、まずは簡単なファイルをいくつか入力して、その感触をつかむことから始めます。
.sp
あなたのGitリポジトリに保持したいランダムファイルを作成することから始めます。これがどのように機能するかを理解するために、いくつかの悪い例から始めます:
.sp
.if n \{\
.RS 4
.\}
.nf
$ echo "Hello World" >hello
$ echo "Silly example" >example
.fi
.if n \{\
.RE
.\}
.sp
.sp
これで、あなたの作業ツリー(working tree)(別名「作業ディレクトリ」(working directory))に2つのファイルが作成されましたが、実際にあなたの作業をチェックインするには、以下の2つの手順を実行する必要があります:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fIindex\fR
ファイル(別名
\fIcache\fR
）に作業ツリーの状態に関する情報を入力します。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
そのインデックスファイルをオブジェクトとしてコミットします。
.RE
.sp
最初のステップは至極簡単です。作業ツリーへの変更についてGitに通知する場合は、 \fBgit update\-index\fR プログラムを使用します。このプログラムは通常、更新するファイル名のリストを取得しますが、些細な間違いを避けるために、 \fB\-\-add\fR フラグを使用して新しいエントリを追加すること(または `\-\-remove`でエントリを削除すること)を明示的に指定しない限り、インデックスへの新しいエントリの追加(または既存のものを削除)することを拒否します。
.sp
したがって、作成した2つのファイルをインデックスに追加するには、以下のようにします
.sp
.if n \{\
.RS 4
.\}
.nf
$ git update\-index \-\-add hello example
.fi
.if n \{\
.RE
.\}
.sp
.sp
これで、あなたはGitにこれら2つのファイルを追跡するように指示しました。
.sp
実際、上記を行った後にオブジェクトディレクトリを調べると、Gitがオブジェクトデータベースに2つの新しいオブジェクトを追加していることがわかります。上記の手順を正確に実行した場合は、あなたは以下のように実行できます
.sp
.if n \{\
.RS 4
.\}
.nf
$ ls \&.git/objects/??/*
.fi
.if n \{\
.RE
.\}
.sp
.sp
そうすると以下の２つのファイルが見えます:
.sp
.if n \{\
.RS 4
.\}
.nf
\&.git/objects/55/7db03de997c86a4a028e1ebd3a1ceb225be238
\&.git/objects/f2/4c74a2e500f5ee1332c86b94199f52b1d1d962
.fi
.if n \{\
.RE
.\}
.sp
.sp
これは、それぞれ「557db\&...」および「f24c7\&...」という名前のオブジェクトに対応します。
.sp
必要に応じて、 \fBgit cat\-file\fR を使用してこれらのオブジェクトを確認できますが、オブジェクトのファイル名ではなく、オブジェクト名を使用する必要があります:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git cat\-file \-t 557db03de997c86a4a028e1ebd3a1ceb225be238
.fi
.if n \{\
.RE
.\}
.sp
.sp
ここで、 \fB\-t\fR は \fIgit cat\-file\fR に、オブジェクトの「タイプ」が何であるかを通知させます。 Gitは、「blob」(ブロブ)オブジェクト(つまり、通常のファイル)があることを通知し、あなたは以下のコマンドで内容を表示できます。
.sp
.if n \{\
.RS 4
.\}
.nf
$ git cat\-file blob 557db03
.fi
.if n \{\
.RE
.\}
.sp
.sp
"Hello World" が出力されます。オブジェクト \fB557db03\fR は、ファイル \fBhello\fR の内容そのものです。
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
そのオブジェクトをファイル \fBhello\fR 自体と混同しないでください。オブジェクトは文字通りファイルの特定の「内容」(contents)であり、後でファイル \fBhello\fR の内容を変更しても、先ほど見たオブジェクトは変更されません。オブジェクトは不変(immutable)です。
.sp .5v
.RE
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
2番目の例は、ほとんどの場所でオブジェクト名を最初の数桁の16進数にのみに省略できることを示しています。
.sp .5v
.RE
.sp
とにかく、前述したように、通常、オブジェクト自体を実際に確認することはありません。40文字の長い16進名を入力することは、通常は行いたくないことです。上記の余談は、「git update\-index」が魔法のようなことをし、実際にファイルの内容をGitオブジェクトデータベースに保存したことを現しています。
.sp
インデックスを更新すると、他のことも行います。それは、 \fB\&.git/index\fR ファイルの作成です。これは、現在の作業ツリーを説明するインデックスであり、とても注意を払う必要があります。 繰り返しになりますが、通常はインデックスファイル自体について心配することはありませんが、ここまでファイルを実際にはGitに「チェックイン」しておらず、Gitに「伝えただけ」であることに注意する必要があります。
.sp
しなしながら、Gitはそれらについて知っているため、最も基本的なGitコマンドのいくつかを使用して、ファイルを操作したり、ファイルのステータスを確認したりできます。
.sp
特に、この時点ではこの2つのファイルをGitにチェックインしないでください。私達は、最初に、\fBhello\fR に別の行を追加することから始めます:
.sp
.if n \{\
.RS 4
.\}
.nf
$ echo "It\*(Aqs a new day for git" >>hello
.fi
.if n \{\
.RE
.\}
.sp
.sp
これで、Gitに以前の \fBhello\fR の状態について伝えたので、 \fIgit diff\-files\fR コマンドを使用して、古いインデックスと比較してツリーで何が変更されたかをGitに尋ねることができます:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git diff\-files
.fi
.if n \{\
.RE
.\}
.sp
.sp
おっと、これはあまり読みやすくないですね。これは \fIdiff\fR の独自の内部バージョンを吐き出すだけですが、その内部バージョンは、「hello」が変更されたこと、および古いオブジェクトの内容が別のものに置き換えられたことに気付いたことを示しています。
.sp
読みやすくするために、 \fB\-p\fR フラグを使用して、 \fIgit diff\-files\fR にパッチとして差分を出力するように指示できます:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git diff\-files \-p
diff \-\-git a/hello b/hello
index 557db03\&.\&.263414f 100644
\-\-\- a/hello
+++ b/hello
@@ \-1 +1,2 @@
 Hello World
+It\*(Aqs a new day for git
.fi
.if n \{\
.RE
.\}
.sp
.sp
つまり、これは \fBhello\fR に別の行を追加することによって引き起された変更の diff です。
.sp
言い換えると、 \fIgit diff\-files\fR は、常に、インデックスに記録されているものと、現在作業ツリーにあるものとの違いを示しています。これはとても便利です。
.sp
\fBgit diff\-files \-p\fR の一般的な省略形は、 \fBgit diff\fR と書くことで、左記と同一の事を行います。
.sp
.if n \{\
.RS 4
.\}
.nf
$ git diff
diff \-\-git a/hello b/hello
index 557db03\&.\&.263414f 100644
\-\-\- a/hello
+++ b/hello
@@ \-1 +1,2 @@
 Hello World
+It\*(Aqs a new day for git
.fi
.if n \{\
.RE
.\}
.sp
.SH "COMMITTING GIT STATE"
.sp
次に、私達はGitの次の段階に進みます。これは、Gitが知っているファイルをインデックスより取得し、それらを実際のツリーとしてコミットすることです。これは次の2つのフェーズで行います。「ツリー」オブジェクトの作成し、そして、ツリーが何であるかについての説明と、私たちがどのようにしてその状態に到達したかについての情報とともに、その「ツリー」オブジェクトを「コミット」オブジェクトとしてコミットします。
.sp
ツリーオブジェクトの作成は至極簡単で、 \fBgit write\-tree\fR を使用します。オプションやその他の入力はありません。 \fBgit write\-tree\fR は現在のインデックスの状態を取得し、そのインデックス全体を記述するオブジェクトを書き込みます。つまり、現在、すべての異なるファイル名をそれらのコンテンツ(およびそれらのアクセス許可)と結び付けており、Gitの「ディレクトリ」オブジェクトに相当するものを作成します:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git write\-tree
.fi
.if n \{\
.RE
.\}
.sp
.sp
これにより、結果のツリーの名前が出力されます。この場合(私が説明したとおり正確に実行した場合)、以下のようになっているべきです
.sp
.if n \{\
.RS 4
.\}
.nf
8988da15d077d4829fc51d8544c097def6644dbb
.fi
.if n \{\
.RE
.\}
.sp
.sp
これは、別のワケワカメなオブジェクト名です。繰り返しになりますが、あなたは必要に応じて、 \fBgit cat\-file \-t 8988d\&.\&.\&.\fR を使用して、今回のオブジェクトが「ブロブ」オブジェクトではなく「ツリー」オブジェクトであることを確認できます( \fBgit cat\-file\fR を使用して、生のオブジェクトの内容を実際に出力することもできますが、主にごちゃごちゃしたバイナリが見れるだけであまり面白くありません)。
.sp
しかしながら、通常は \fBgit commit\-tree\fR コマンドを使用してツリーをコミットオブジェクトにコミットするため、通常は \fBgit write\-tree\fR を単独で使用することはありません。 実際のところ \fBgit write\-tree\fR を単独で使用するのではなく、その結果を \fBgit commit\-tree\fR へ引数として渡す方が簡単です。
.sp
\fIgit commit\-tree\fR は通常、いくつかの引数を取ります。 \fBgit commit\-tree\fR はコミットの「親」が何であるかを知りたいのですが、これはこの新しいリポジトリでの最初のコミットであり、親がないため、ツリーのオブジェクト名を渡すだけで済みます。ただし、 \fBgit commit\-tree\fR は、標準入力からコミットメッセージを取得することも必要です。そしてコミットの結果のオブジェクト名を標準出力に書き出します。
.sp
ここで、 \fBHEAD\fR が指す \fB\&.git/refs/heads/master\fR ファイルを作成します。このファイルには、masterブランチのツリーのてっぺん(top\-of\-tree)への参照が含まれているはずです。これはまさに「git commit\-tree」が吐き出すものなので、一連の単純なシェルコマンドでこれをすべて行うことができます:
.sp
.if n \{\
.RS 4
.\}
.nf
$ tree=$(git write\-tree)
$ commit=$(echo \*(AqInitial commit\*(Aq | git commit\-tree $tree)
$ git update\-ref HEAD $commit
.fi
.if n \{\
.RE
.\}
.sp
.sp
この場合に限り、他の何にも関係のないまったく新しいコミットが作成されます。 通常、これはプロジェクトに対して「1回だけ」行います。このコミットはこの後のすべてのコミットの親になります。
.sp
繰り返しますが、通常、これを実際に手作業で行うことはありません。 これらすべてを実行する \fBgit commit\fR という便利なスクリプトがあります。 したがって、あなたは代わりに \fBgit commit\fR と記述すれば、上記の魔法のスクリプトが実行されます。
.SH "MAKING A CHANGE"
.sp
以前、ファイル \fBhello\fR で \fBgit update\-index\fR を実行し、その後 \fBhello\fR を変更して、 \fBhello\fR の新しい状態を、インデックスファイルに保存した状態と比較したことを覚えていますか？
.sp
さらに、 私が \fBgit write\-tree\fR は「インデックス」ファイルの内容をツリーに書き込むと言ったことを思い出してください。したがって、コミットしたのは、実際にはファイル \fBhello\fR の「元の内容」であり、新しい内容ではありません。これは、インデックスの状態と作業ツリーの状態の違い、および私達が何かをコミットした場合でもそれらが一致する必要がない事を示すために意図的に行いました。
.sp
以前と同様に、git\-tutorialプロジェクトで \fBgit diff\-files \-p\fR を実行した場合でも、前回と同一の差異が見られます。つまり、何かをコミットすることによってインデックスファイルが変更されていないということです。ただし、私達は何かをコミットしたので、新しいコマンド \fBgit diff\-index\fR の使用方法を学ぶこともできます:
.sp
インデックスファイルと作業ツリーの違いを示した \fBgit diff\-files\fR とは異なり、 \fBgitdiff\-index\fR はコミットされたツリーと、インデックスファイルまたは作業ツリーとの違いを示します。言い換えると、 \fBgit diff\-index\fR はツリーとの差分することを望んでおり、コミットする前は、そもそも差分するモノがなかったため、差分を行うことができませんでした。
.sp
しかし、今や私達は以下のようにできます
.sp
.if n \{\
.RS 4
.\}
.nf
$ git diff\-index \-p HEAD
.fi
.if n \{\
.RE
.\}
.sp
.sp
(ここで、\fB\-p\fR は \fBgit diff\-files\fR のと同じ意味です。) 同一の差異が表示されますが、理由はまったく異なります。これは、作業ツリーを、インデックスファイルではなく、作成したツリーと比較しています。たまたまこれら2つが明らかに同じであるため、私達は同じ結果を得たのです。
.sp
繰り返しになりますが、これは一般的な操作であるため、以下のように短縮することもできます
.sp
.if n \{\
.RS 4
.\}
.nf
$ git diff HEAD
.fi
.if n \{\
.RE
.\}
.sp
.sp
これで、結局は上記のようなことをやってくれます。
.sp
つまり、 \fBgit diff\-index｀ は通常、ツリーを作業ツリーと比較しますが、 `\-\-cached\fR フラグを指定すると、代わりにインデックスキャッシュの内容と比較し、現在の作業ツリーの状態を完全に無視するように指示します。我々はインデックスファイルをHEADに書き込んだばかりなので、 \fBgit diff\-index \-\-cached \-p HEAD\fR を実行すると、空の差分セットを返すはずで、これは正に指示したとおりの結果です。
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
\fBgit diff\-index\fR は実際には「常に」その比較にインデックスを使用するため、ツリーを作業ツリーと比較すると言ったことは厳密には正確ではありません。特に、比較するファイルのリスト(「メタデータ」(meta\-data))は、 \fB\-\-cached\fR フラグが使用されているかどうかに関係なく、常にインデックスファイルから取得されます。 \fB\-\-cached\fR フラグは、実際には、比較されるファイルの「内容」が作業ツリーからのものであるか否かを決定するだけです。
.sp
これを理解するのは難しいことでは無く、すぐにあなたは、Gitが明示的に通知されていないファイルを知らない(または気にしない)ことに気付きます。Gitは比較するファイルを「探す」ことは決してありません。ファイルが何であるかを教えて貰えることを期待しており、それがインデックスの目的なのです。
.sp .5v
.RE
.sp
ただし、私達の次のステップは、私達の行った変更をコミットすることです。繰り返しますが、何が起こっているのかを理解するために、「作業ツリーの内容」と「インデックスファイル」と「コミットされたツリー」の違いに注意してください。私達がコミットしたい作業ツリーに変更があり、私達は常にインデックスファイルを処理する必要があるため、したがって、私達が最初に行う必要があるのは、インデックスキャッシュを更新することです:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git update\-index hello
.fi
.if n \{\
.RE
.\}
.sp
.sp
(注意: Gitはファイルについてすでに知っていたので、私達は今回は \fB\-\-add\fR フラグを必要としなかったことに注意してください)。
.sp
注意: ここで、個別の \fBgit diff\-{asterisk}\fR バージョンには何が起こるでしょうか。我々がインデックス内の \fBhello\fR を更新した後、 \fBgit diff\-files \-p\fR は、違いを示さなくなりましたが、 \fBgit diff\-index \-p HEAD\fR は、現在の状態がコミットした状態とは異なることを示しています。 実際、 \fBgit diff\-index\fR は、 \fB\-\-cached\fR フラグを使用するかどうかに関係なく同一の違いを示します。これは、インデックスは作業ツリーと一貫性があるためです。
.sp
これで、我々はインデックス内の \fBhello\fR を更新したので、我々は新しいバージョンをコミットできます。我々はもう一度手動でツリーを作成し、ツリーをコミットすることでそれを行うことができます(今回は、 \fB\-p HEAD\fR フラグを使用して、HEADが新しいコミットの「親」であり、これが最初のコミットではなくなったことをコミットに通知する必要があります)。しかし、あなたはすでに一度この手作業を経験済みですので、今回は役立つスクリプトを使用してみましょう:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git commit
.fi
.if n \{\
.RE
.\}
.sp
.sp
これにより、あなたがコミットメッセージを書き込むためのエディタが起動し、あなたがさっきやった事についてちょっぴり教えてくれます。
.sp
あなたが必要なメッセージを書き込むと、 \fB#\fR で始まるすべての行が削除され、残りはこの変更のコミットメッセージとして使用されます。あなたがこの時点で結局何もコミットしたくないと判断した場合(あなたは引き続き編集してインデックスを更新できます)、あなたは空のメッセージを残すことができます。それ以外の場合、 \fBgit commit\fR は変更をコミットします。
.sp
これで、最初の実際のGitコミットが完了しました。 \fBgit commit\fR が実際に何をするのかを知りたい場合は、お気軽に調査してください。役立つ(？)コミットメッセージヘッダーを生成するための非常に単純なシェルスクリプトがいくつかあり、そして実際にコミット自体を行ういくつかのワンライナーがあります(\fBgit commit\fR)。
.SH "INSPECTING CHANGES"
.sp
変更を作成することは便利ですが、後で何が変更されたかを知ることができればさらに便利です。このための最も便利なコマンドは、diffファミリーのもう1つ、つまり \fBgit diff\-tree\fR です。
.sp
\fBgit diff\-tree\fR には任意の2つのツリーを指定でき、それらの間の違いがわかります。けれども、おそらくもっと一般的には、あなたはコミットオブジェクトを1つだけ与えることができ、そうすると、そのコミット自体の親を把握し、違いを直接表示します。したがって、すでに数回見たのと同一のdiffを取得するために、以下のようにすることができます
.sp
.if n \{\
.RS 4
.\}
.nf
$ git diff\-tree \-p HEAD
.fi
.if n \{\
.RE
.\}
.sp
.sp
(繰り返しになりますが、 \fB\-p\fR は人間が読めるパッチとして違いを表示することを意味します)、(\fBHEAD\fR が指す)最後のコミットが実際に何を変更したかを表示します。
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
以下は、さまざまな \fBdiff\-{asterisk}\fR コマンドが物事を比較する方法を表す、Jon Loeliger によるアスキーアートです。
.sp
.if n \{\
.RS 4
.\}
.nf
            diff\-tree
             +\-\-\-\-+
             |    |
             |    |
             V    V
          +\-\-\-\-\-\-\-\-\-\-\-+
          | Object DB |
          |  Backing  |
          |   Store   |
          +\-\-\-\-\-\-\-\-\-\-\-+
            ^    ^
            |    |
            |    |  diff\-index \-\-cached
            |    |
diff\-index  |    V
            |  +\-\-\-\-\-\-\-\-\-\-\-+
            |  |   Index   |
            |  |  "cache"  |
            |  +\-\-\-\-\-\-\-\-\-\-\-+
            |    ^
            |    |
            |    |  diff\-files
            |    |
            V    V
          +\-\-\-\-\-\-\-\-\-\-\-+
          |  Working  |
          | Directory |
          +\-\-\-\-\-\-\-\-\-\-\-+
.fi
.if n \{\
.RE
.\}
.sp .5v
.RE
.sp
さらに興味深いことに、 \fBgit diff\-tree\fR に \fB\-\-pretty\fR フラグを指定することもできます。これにより、コミットメッセージと作者とコミットの日付も表示され、一連のdiff全体を表示するように指示します。または、「黙って」(silent)と指示して、差分をまったく表示せずに実際のコミットメッセージを表示することもできます。
.sp
実際には、 (リビジョンのリストを生成する) \fBgit rev\-list\fR プログラムと一緒に使うことで、 \fBgit diff\-tree\fR は、正に変更の源泉と化します。 \fBgit rev\-list\fR の出力を \fBgit diff\-tree \-\-stdin\fR にパイプする簡単なスクリプトを使用して、 \fBgit log\fR や \fBgit log \-p\fR などをエミュレートできます。これは正に初期バージョンの \fBgit log\fR が実装された方法でした。
.SH "TAGGING A VERSION"
.sp
Gitには、「軽い」(light)タグと「注釈付きタグ」(annotated tag)の2種類のタグがあります。
.sp
「軽い」タグは、 ヘッドと呼ぶ代わりに \fB\&.git/refs/tags/\fR サブディレクトリに配置することを除いて、技術的にはブランチ以上のものではありません。したがって、最も単純な形式のタグは以下のようになります
.sp
.if n \{\
.RS 4
.\}
.nf
$ git tag my\-first\-tag
.fi
.if n \{\
.RE
.\}
.sp
.sp
これは、現在の HEAD を \fB\&.git/refs/tags/my\-first\-tag\fR ファイルに書き込むだけです。その後は、その特定の状態にこのシンボル名を使用できます。たとえば、以下のことができます
.sp
.if n \{\
.RS 4
.\}
.nf
$ git diff my\-first\-tag
.fi
.if n \{\
.RE
.\}
.sp
.sp
あなたの現在の状態をそのタグとdiffします。この時点では明らかに空のdiffになりますが、あなたが開発とコミットを続ければ、タグを「アンカーポイント」として使用して、あなたがタグを付けてから何が変更されたかを確認できます。
.sp
「注釈付きタグ」(annotated tag)は現実には実際のGitオブジェクトです。タグ付けする状態へのポインタだけでなく、小さなタグ名とメッセージ、およびオプションで「はい、あなたは実際にそのタグを作成した」というPGP署名もあります。これらの注釈付きタグは、 \fBgit tag\fR に対して \fB\-a\fR または \fB\-s\fR フラグを使用して作成します:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git tag \-s <tagname>
.fi
.if n \{\
.RE
.\}
.sp
.sp
これは現在の`HEAD`に署名します(しかし、あなたはタグ付けするものを指定する別の引数を指定することもできます。たとえば、 \fBgit tag <tagname> mybranch\fR を使用して現在の \fBmybranch\fR ポイントにタグを付けることができます)。
.sp
あなたは、通常は、メジャーリリースなどの署名付きタグ付けのみを行いますが、軽量タグ(light\-weight tags)は、あなたがマーキングしたい時に便利です。つまり、特定のポイントを覚えておきたいと思ったときはいつでも、そのポイントのプライベートタグを作成するだけで、その時点の状態の適切なシンボル名が得られます。
.SH "COPYING REPOSITORIES"
.sp
Gitリポジトリは通常、完全に自給自足で再配置可能です。たとえば、CVSとは異なり、「リポジトリ」と「作業ツリー」という別個の概念はありません。Gitリポジトリは通常、作業ツリーであり、ローカルのGit情報は \fB\&.git\fR サブディレクトリに隠されています。他には何もありません。あなたが見たそのままです。
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
あなたは、追跡中のディレクトリからGitの内部情報を分割するようにGitに指示できますが、我々は今のところはそれを無視します。なぜならそれは、通常のプロジェクトの仕組みでなく、本当に特別な用途のためだけのものだからです。よって、「Git情報は、それが記述する作業ツリーに常に直接関連付けられている」という概念は技術的には100%正確ではない可能性がありますが、通常はそれで通ります。
.sp .5v
.RE
.sp
これには2つの意味があります:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
あなたが、作成したチュートリアルリポジトリに飽きてしまった場合(または間違えて最初からやり直したい場合)は、単純に以下のようにするだけです
.sp
.if n \{\
.RS 4
.\}
.nf
$ rm \-rf git\-tutorial
.fi
.if n \{\
.RE
.\}
.sp
そしてそれはなくなります。外部リポジトリはありませんし、あなたが作成したプロジェクト以外に履歴はありません。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
あなたがGitリポジトリを移動または複製する場合は、あなたはそうすることができます。
\fBgit clone\fR
コマンドがありますが、リポジトリ(と、それに伴うすべての完全な履歴とともに)のコピーを作成するだけの場合は、通常の
\fBcp \-a git\-tutorial new\-git\-tutorial\fR
を使用して作成できます。
.sp
注意: Gitリポジトリを移動またはコピーした場合、Gitインデックスファイル(さまざまな情報、特に関連するファイルの「統計」情報の一部をキャッシュする)を更新する必要がある可能性があることに注意してください。したがって、
\fBcp \-a\fR
を実行して新しいコピーを作成した後、あなたは以下を実行する必要があります
.sp
.if n \{\
.RS 4
.\}
.nf
$ git update\-index \-\-refresh
.fi
.if n \{\
.RE
.\}
.sp
これは、新しいリポジトリで、インデックスファイルが最新であることを確認します。
.RE
.sp
注意: 2番目のポイントは、PC間でも当てはまることに注意してください。scpやrsyncやwget等々、通常のコピーメカニズムを使用してリモートGitリポジトリを複製できます。
.sp
リモートリポジトリをコピーするときは、あなたは、これを行うときに少なくともインデックスキャッシュを更新する必要があります。特に、他の人のリポジトリでは、インデックスキャッシュが既知の状態(あなたには、彼らが何をしたのか、まだチェックインしていないのかわかりません)にあることを確認する必要があるため、通常は \fBgit update\-index\fR の前に以下のようにします。
.sp
.if n \{\
.RS 4
.\}
.nf
$ git read\-tree \-\-reset HEAD
$ git update\-index \-\-refresh
.fi
.if n \{\
.RE
.\}
.sp
.sp
これにより、\fBHEAD\fR が指すツリーからインデックス全体が再構築されます。それはインデックスの内容を \fBHEAD\fR にリセットし、 \fBgit update\-index\fR がすべてのインデックスエントリをチェックアウトされたファイルと一致させるようにします。元のリポジトリの作業ツリーにコミットされていない変更があった場合、 \fBgit update\-index \-\-refresh\fR はそれらに気づき、更新する必要があることをあなたに通知します。
.sp
上記は以下のように簡単に書くこともできます
.sp
.if n \{\
.RS 4
.\}
.nf
$ git reset
.fi
.if n \{\
.RE
.\}
.sp
.sp
実際、一般的なGitコマンドの組み合わせの多くは、 \fBgit xyz\fR インターフェースを使用してスクリプト化できます。あなたは、さまざまなgitスクリプトが何をするかを見るだけで、物事を学ぶことができます。たとえば、 \fBgit reset\fR は、以前は上記2行を記述したものでした。ただし、 \fBgit status\fR や \fBgit commit\fR などのいくつかは、基本的なGitコマンドを中心とした少し複雑なスクリプトです。
.sp
多くの(ほとんどの？)パブリックリモートリポジトリには、チェックアウトされたファイルやインデックスファイルすら含まれず、実際のコアGitファイルのみが含まれます。このようなリポジトリには通常、 \fB\&.git\fR サブディレクトリすらなく、すべてのGitファイルが直接リポジトリにあります。
.sp
このような「生の」Gitリポジトリのあなた独自のローカルな活きたコピー(local live copy)を作成するには、最初にプロジェクト用の独自のサブディレクトリを作成し、次に生のリポジトリの内容を \fB\&.git\fR ディレクトリにコピーします。たとえば、Gitリポジトリのあなた独自のコピーを作成するには、以下のようにします
.sp
.if n \{\
.RS 4
.\}
.nf
$ mkdir my\-git
$ cd my\-git
$ rsync \-rL rsync://rsync\&.kernel\&.org/pub/scm/git/git\&.git/ \&.git
.fi
.if n \{\
.RE
.\}
.sp
.sp
これに、以下が続きます
.sp
.if n \{\
.RS 4
.\}
.nf
$ git read\-tree HEAD
.fi
.if n \{\
.RE
.\}
.sp
.sp
インデックスにデータを入力します。ただし、これでインデックスにデータが入力され、すべてのGit内部ファイルが作成されましたが、実際に作業するツリーファイルがないことに気付くでしょう。 それらを取得するには、以下のようにしてそれらをチェックアウトします
.sp
.if n \{\
.RS 4
.\}
.nf
$ git checkout\-index \-u \-a
.fi
.if n \{\
.RE
.\}
.sp
.sp
ここで、 \fB\-u\fR フラグは、(後で更新する必要がないように)チェックアウトでインデックスを最新の状態に保つことを意味し、 \fB\-a\fR フラグは「すべてのファイルをチェックアウトする」ことを意味します(古いコピーまたはチェックアウトされたツリーの古いバージョンがある場合は、最初に \fB\-f\fR フラグを追加して、 \fBgit checkout\-index\fR に古いファイルの上書きを「強制」するように指示する必要がある事があります)。
.sp
繰り返しますが、これはすべて以下のように簡略化できます
.sp
.if n \{\
.RS 4
.\}
.nf
$ git clone git://git\&.kernel\&.org/pub/scm/git/git\&.git/ my\-git
$ cd my\-git
$ git checkout
.fi
.if n \{\
.RE
.\}
.sp
.sp
これは正に上記のすべてを行います。
.sp
これで、あなたは、他の誰か誰か(またはあなた自身の)のリモートリポジトリをコピーし、チェックアウトすることに成功しました。
.SH "CREATING A NEW BRANCH"
.sp
Gitのブランチは、実際には \fB\&.git/refs/\fR サブディレクトリ内からGitオブジェクトデータベースへのポインタにすぎません。すでに説明したように、\fBHEAD\fR ブランチはこれらのオブジェクトポインタの1つへのシンボリックリンクにすぎません。
.sp
あなたはプロジェクト履歴の任意のポイントを選択し、そのオブジェクトのSHA\-1名を \fB\&.git/refs/heads/\fR の下のファイルに書き込むだけで、いつでも新しいブランチを作成できます。任意のファイル名(実際にはサブディレクトリ名)を使用できますが、慣例では、「通常の」ブランチ(normal branch)は「master」と呼ばれます。 ただし、これは単なる慣例であり、強制されるものではありません。
.sp
これを例として示すために、以前使用したgit\-tutorialリポジトリに戻り、その中にブランチを作成しましょう。これを行うには、あなたは新しいブランチをチェックアウトしたいと言うだけです:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git switch \-c mybranch
.fi
.if n \{\
.RE
.\}
.sp
.sp
現在の \fBHEAD\fR 位置に基づいて新しいブランチを作成し、それに切り替えます。
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
あなたが、履歴の現在のHEAD以外の時点で新しいブランチを開始することを決定した場合は、 \fBgit switch\fR にチェックアウトの起点を指定するだけで開始できます。 言い換えれば、以前に作ったタグまたはブランチがある場合は以下のようにします。
.sp
.if n \{\
.RS 4
.\}
.nf
$ git switch \-c mybranch earlier\-commit
.fi
.if n \{\
.RE
.\}
.sp
.sp
そうすると、これは以前のコミットにて新しいブランチ \fBmybranch\fR を作成し、その時の状態をチェックアウトします。
.sp .5v
.RE
.sp
以下のように実行することで、あなたはいつでも元の \fBmaster\fR ブランチに戻ることができます
.sp
.if n \{\
.RS 4
.\}
.nf
$ git switch master
.fi
.if n \{\
.RE
.\}
.sp
.sp
(または、その他のブランチ名を指定します。) そして、あなたがたまたまどのブランチにいるのかを忘れた場合は、単純に以下のようにします。
.sp
.if n \{\
.RS 4
.\}
.nf
$ cat \&.git/HEAD
.fi
.if n \{\
.RE
.\}
.sp
.sp
とすると、それが指している場所を教えてくれます。あなたが持っているブランチのリストを取得するには、以下のようにします。
.sp
.if n \{\
.RS 4
.\}
.nf
$ git branch
.fi
.if n \{\
.RE
.\}
.sp
.sp
これは、以前は、 \fBls \&.git/refs/heads\fR を囲む単純なスクリプトにすぎませんでした。それはそれとして、これは、現在使用しているブランチの前にアスタリスクが表示されます。
.sp
実際にチェックアウトして切り替えることなく、新しいブランチを作成したい場合があります。その場合は、以下のコマンドを使用してください
.sp
.if n \{\
.RS 4
.\}
.nf
$ git branch <branchname> [startingpoint]
.fi
.if n \{\
.RE
.\}
.sp
.sp
これは単にブランチを作成しますが、それ以上は何もしません。 その後 \(em そのブランチで実際に開発することを決定したら \(em 引数としてブランチ名を使用して、通常の `git switch `を使用してそのブランチに切り替えることができます。
.SH "MERGING TWO BRANCHES"
.sp
ブランチを持つことのアイデアの1つは、ブランチでいくつかの(おそらく実験的な)作業を行い、最終的にそれをメインブランチにマージすることです。したがって、元の \fBmaster\fR ブランチと同じである、上記の \fBmybranch\fR を作成したと仮定して、我々がそのブランチにいることを確認し、そこでいくつかの作業を行いましょう。
.sp
.if n \{\
.RS 4
.\}
.nf
$ git switch mybranch
$ echo "Work, work, work" >>hello
$ git commit \-m "Some work\&." \-i hello
.fi
.if n \{\
.RE
.\}
.sp
.sp
ここでは、 \fBhello\fR に別の行を追加し、 \fB\-i\fR フラグ(コミット時にこれまでにインデックスファイルに対して行ったことに加えて、そのファイルを「含める」ようにGitに指示)を使用してファイル名を \fBgit commit\fR に直接指定する、 \fBgit update\-index hello\fR と \fBgit commit\fR の両方を実行するための省略形を使用しました。 \fB\-m\fR フラグは、コマンドラインからコミットログメッセージを指定するためのものです。
.sp
ここで、もう少し面白くするために、他の誰かが元のブランチで何らかの作業を行っていると仮定し、マスターブランチに戻って同じファイルを別の方法で編集することにより、それをシミュレートします:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git switch master
.fi
.if n \{\
.RE
.\}
.sp
.sp
ここで、 \fBhello\fR の内容を確認して、あなたが \fBmybranch\fR で行った作業が含まれていないことに注目してください。その作業は \fBmaster\fR ブランチではまったく行われていないためです。確認後、以下のようにします
.sp
.if n \{\
.RS 4
.\}
.nf
$ echo "Play, play, play" >>hello
$ echo "Lots of fun" >>example
$ git commit \-m "Some fun\&." \-i hello example
.fi
.if n \{\
.RE
.\}
.sp
.sp
masterブランチもいい感じになってきました。
.sp
いまや、2つのブランチがあり、あなたは完了した作業をマージすることにしました。 その前に、何が起こっているのかを確認するのに役立つクールなグラフィカルツールを紹介しましょう:
.sp
.if n \{\
.RS 4
.\}
.nf
$ gitk \-\-all
.fi
.if n \{\
.RE
.\}
.sp
.sp
あなたのブランチ(これが \fB\-\-all\fR の意味です。通常は、現在の \fBHEAD\fR が表示されます)とその履歴の両方をグラフィカルに表示します。また、それらがどのようにして共通のソースから得られたのかを正確に確認することもできます。
.sp
とにかく、 \fIgitk\fR を終了( \fB^Q\fR または Fileメニュー)し、 \fBmybranch\fR ブランチで行った作業を \fBmaster\fR ブランチ（現在は \fBHEAD\fR でもあります)にマージすることにします。これを行うために、 \fBgit merge\fR と呼ばれる優れたスクリプトがあり、それは、あなたがどのブランチを解決したいのか、そのマージが何なのかを知りたがっています:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git merge \-m "Merge work in mybranch" mybranch
.fi
.if n \{\
.RE
.\}
.sp
.sp
マージを自動的に解決できる場合は、最初の引数がコミットメッセージとして使用されます。
.sp
さて、今回は、マージを手動で修正する必要がある状況を意図的に作成したので、Gitは可能な限り多くのことを自動的に実行(この場合は、 \fBmybranch\fR ブランチの、差異がない \fBexample\fR ファイルをマージするだけ)した上で、以下のように言います:
.sp
.if n \{\
.RS 4
.\}
.nf
        Auto\-merging hello
        CONFLICT (content): Merge conflict in hello
        Automatic merge failed; fix conflicts and then commit the result\&.
.fi
.if n \{\
.RE
.\}
.sp
.sp
これは、「自動マージ」(Automatic merge)を実行したら \fBhello\fR の競合が原因で失敗したと表示しています。
.sp
でも心配無用。これにより、あなたがCVSを使ったことがあるなら既に慣れている形式で \fBhello\fR に競合を残したので、エディタで \fBhello\fR を開いて、なんとかして修正しましょう。私は `hello`に4行すべてが含まれるようにすることを提案することにします:
.sp
.if n \{\
.RS 4
.\}
.nf
Hello World
It\*(Aqs a new day for git
Play, play, play
Work, work, work
.fi
.if n \{\
.RE
.\}
.sp
.sp
手動マージに満足したら、以下の手順を実行します。
.sp
.if n \{\
.RS 4
.\}
.nf
$ git commit \-i hello
.fi
.if n \{\
.RE
.\}
.sp
.sp
これは、現在マージをコミットしていることを非常に大声で警告します(今回は正しい事をしているので、警告は気にしないでください)。また、あなたは \fBgit merge\fR 遊園地でのあなたの冒険についての小さなマージメッセージを書くことができます。
.sp
完了したら、 \fBgitk \-\-all\fR を起動して、履歴がどのように表示されるかをグラフィカルに確認します。 \fBmybranch\fR はまだ存在していることに注意してください。これに切り替えて、必要に応じて作業を続けることができます。 \fBmybranch\fR ブランチにはそのマージが含まれませんが、次回 \fBmaster\fR ブランチにてそれをマージするときに、Gitはそれがどのようにマージされたかを知っているため、再度マージを行う必要はありません。
.sp
X\-Window環境で常に作業するわけではない場合、もう1つの便利ツールは、 \fBgit show\-branch\fR です。
.sp
.if n \{\
.RS 4
.\}
.nf
$ git show\-branch \-\-topo\-order \-\-more=1 master mybranch
* [master] Merge work in mybranch
 ! [mybranch] Some work\&.
\-\-
\-  [master] Merge work in mybranch
*+ [mybranch] Some work\&.
*  [master^] Some fun\&.
.fi
.if n \{\
.RE
.\}
.sp
.sp
最初の2行は、ツリーの最上位コミットのタイトル付の2つのブランチを示しています。あなたは現在(アスタリスク \fB*\fR 文字に注意)、 \fBmaster\fR ブランチを使用しており、その後の出力行は、 \fBmaster\fR ブランチに含まれるコミットと、 \fBmybranch\fR ブランチの行の2桁目(\fB+\fR)を表示するために使用されます。3つのコミットがタイトルとともに表示されます。それらはすべて1桁目に空白以外の文字があり( \fB*\fR は現在のブランチでの通常のコミットを示し、\fB\-\fR はマージコミットです)、これはそれらが現在 \fBmaster\fR ブランチの一部であることを意味します。 \fBmybranch\fR はmasterブランチからのこれらのコミットを組み込むためにマージされていないため、「Some work」コミットのみが2桁目にプラスの \fB+\fR 文字を持っています。コミットログメッセージの前の括弧内の文字列は、コミットに名前を付けるために使用できる短い名前です。上記の例では、 "master" と "mybranch" がブランチヘッドです。 "master^" は "master" ブランチヘッドの最初の親です。より複雑なケースを確認したい場合は、 \fBgitrevisions\fR(7) を参照してください。
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
\fI\-\-more=1\fR オプションがないと、 \fI[mybranch]\fR コミット は \fImaster\fR と \fImybranch\fR の両方の先端の共通の祖先であるため、 \fBgit show\-branch\fR は \*(Aq[master^] コミットを出力しません。詳細については、 \fBgit-show-branch\fR(1) を参照してください。
.sp .5v
.RE
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
マージ後に \fBmaster\fR ブランチにさらにコミットがあった場合、\fBgit show\-branch\fR はデフォルトではマージコミット自体を表示しません。この場合、マージコミットを表示するには、 \fB\-\-sparse\fR オプションを指定する必要があります。
.sp .5v
.RE
.sp
さて、あなたが \fBmybranch\fR ですべての作業を行ったとしましょう。そして、あなたの努力の成果がついに \fBmaster\fR ブランチに統合されました。あなたは `mybranch`に戻り、 \fIgit merge\fR を実行して、「アップストリームの変更」をあなたのブランチに戻しましょう。
.sp
.if n \{\
.RS 4
.\}
.nf
$ git switch mybranch
$ git merge \-m "Merge upstream changes\&." master
.fi
.if n \{\
.RE
.\}
.sp
.sp
これは以下のようなものを出力します(実際のコミットオブジェクト名は異なります)
.sp
.if n \{\
.RS 4
.\}
.nf
Updating from ae3a2da\&.\&.\&. to a80b4aa\&.\&.\&.\&.
Fast\-forward (no commit created; \-m option ignored)
 example | 1 +
 hello   | 1 +
 2 files changed, 2 insertions(+)
.fi
.if n \{\
.RE
.\}
.sp
.sp
あなたのブランチにはすでに \fBmaster\fR ブランチにマージされたもの以外のものが含まれていなかったため、マージ操作は実際にはマージを実行しませんでした。代わりに、あなたのブランチのツリーのトップを \fBmaster\fR ブランチのツリーのトップに更新しました。これはしばしば「早送り」(fast\-forward)マージと呼ばれます。
.sp
あなたは再び \fBgitk \-\-all\fR を実行して、コミットの祖先がどのように見えるかを確認するか、 \fBshow\-branch\fR を実行して表示します。
.sp
.if n \{\
.RS 4
.\}
.nf
$ git show\-branch master mybranch
! [master] Merge work in mybranch
 * [mybranch] Merge work in mybranch
\-\-
\-\- [master] Merge work in mybranch
.fi
.if n \{\
.RE
.\}
.sp
.SH "MERGING EXTERNAL WORK"
.sp
通常、自分のブランチとマージするよりも、他の誰かのとマージする方がはるかに一般的です。そして、Gitを使用すると、これも非常に簡単になります。事実、 \fBgit merge\fR を実行するのとそれほど違いはありません。 実際、リモートマージは、「リモートリポジトリから一時的タグ(temporary tag)に作業をフェッチする」だけで、その後に \fBgit merge\fR が続きます。
.sp
リモートリポジトリからのフェッチは、ご想像の通り、 \fBgit fetch\fR によって行われます:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git fetch <remote\-repository>
.fi
.if n \{\
.RE
.\}
.sp
.sp
以下の転送方法(transport)のいずれかを使用して、ダウンロード元のリポジトリに名前を付けることができます:
.PP
SSH
.RS 4
\fBremote\&.machine:/path/to/repo\&.git/\fR
または
.sp
\fBssh://remote\&.machine/path/to/repo\&.git/\fR
.sp
この転送方法(transport)はアップロードとダウンロードの両方に使用でき、リモートマシンへの
\fBssh\fR
を介したログイン権限が必要です。転送元と転送先が持つヘッドコミットを交換し、オブジェクトの最小組を(限定的に)転送することにより、反対側に欠けているオブジェクトの組を見つけます。これは、リポジトリ間でGitオブジェクトを交換するための最も効率的な方法です。
.RE
.PP
ローカルディレクトリ
.RS 4
\fB/path/to/repo\&.git/\fR
.sp
この転送方法はSSH転送と同じですが、
\fBssh\fR
を介してリモートマシンでもう一方の端を実行する代わりに、
\fBsh\fR
を使用してローカルマシンで転送元と転送先で実行します。
.RE
.PP
Gitネイティブ
.RS 4
\fBgit://remote\&.machine/path/to/repo\&.git/\fR
.sp
この転送方法は、匿名(anonymous)でダウンロードするために設計されました。SSH転送と同様に、ダウンストリーム側にないオブジェクトの組を検出し、最小のオブジェクトの組を(限定的)転送します。
.RE
.PP
HTTP(S)
.RS 4
\fBhttp://remote\&.machine/path/to/repo\&.git/\fR
.sp
http URL や https URL からのダウンローダーは、最初に、
\fBrepo\&.git/refs/\fR
ディレクトリの下にある指定のref名を調べて、リモートサイトから最上位のコミットオブジェクト名を獲得し、それから、そのコミットオブジェクトのオブジェクト名を使用して
\fBrepo\&.git/objects/xx/xxx\&.\&.\&.\fR
からダウンロードすることにより、コミットオブジェクトの取得を試みます。次に、そのコミットオブジェクトを読み取り、その親コミットと関連するツリーオブジェクトを見つけます。必要なすべてのオブジェクトを取得するまで、このプロセスを繰り返します。この動作のため、これらは「コミットウォーカー」(commit walkers)と呼ばれることもあります。
.sp
「コミットウォーカー」(commit walkers)は、Gitネイティブ転送のようにGit対応のスマートサーバーを必要としないため、「バカ転送」(dumb transports)と呼ばれることもあります。ディレクトリインデックスさえサポートしていないストックHTTPサーバーで十分です。 ただし、バカ転送ダウンローダー(dumb transport downloaders)を支援するには、
\fBgit update\-server\-info\fR
を使用してリポジトリを準備する必要があります。
.RE
.sp
リモートリポジトリからフェッチしたら、あなたはそれを現在のブランチに「マージ」します。
.sp
ただし、「フェッチ」してすぐに「マージ」するのは非常に一般的なことなので、 \fBgit pull\fR を使えば簡単に実行できます:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git pull <remote\-repository>
.fi
.if n \{\
.RE
.\}
.sp
.sp
そして、オプションで、リモート側のブランチ名を2番目の引数として指定します。
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
あなたが持ちたいブランチの数のローカルリポジトリを保持し、ブランチ間のマージと同様に \fBgit pull\fR でそれらの間のマージを行うことで、ブランチを全く使用しないことも可能です。このアプローチの利点は、チェックアウトされた各々「ブランチ」のファイルの組を保持できることです。複数の開発ラインを同時に調整すると、切り替えが簡単になる場合があります。もちろん、複数の作業ツリーを保持するためにディスク使用量を増やすという代償を払うことにはなりますが、最近のディスク容量は安価です。
.sp .5v
.RE
.sp
あなたは同じリモートリポジトリからしばしばプルする可能性があります。なので略記法として、リモートリポジトリのURLをローカルリポジトリの設定ファイルに以下のように保存できます:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git config remote\&.linus\&.url http://www\&.kernel\&.org/pub/scm/git/git\&.git/
.fi
.if n \{\
.RE
.\}
.sp
.sp
そして、完全なURLの代わりに \fBgit pull\fR で "linus" キーワードを使用します。
.sp
例:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
\fBgit pull linus\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
\fBgit pull linus tag v0\&.99\&.1\fR
.RE
.sp
上記は以下と同じです:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
\fBgit pull http://www\&.kernel\&.org/pub/scm/git/git\&.git/ HEAD\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
\fBgit pull http://www\&.kernel\&.org/pub/scm/git/git\&.git/ tag v0\&.99\&.1\fR
.RE
.SH "HOW DOES THE MERGE WORK?"
.sp
このチュートリアルでは、動作しない磁器コマンドに対処するために配管コマンドがどのように機能するかを示していますが、これまでのところ、マージが実際にどのように機能するかについては説明していません。あなたがこのチュートリアルを初めて読む時は、「Publishing your work」セクションにスキップして、後でここに戻ってくることをお勧めします。
.sp
上記を了承したとして、続きをやります。例を示すために、 \fBhello\fR ファイルと \fBexample\fR ファイルを使用した以前のリポジトリに戻り、マージ前の状態に戻しましょう:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git show\-branch \-\-more=2 master mybranch
! [master] Merge work in mybranch
 * [mybranch] Merge work in mybranch
\-\-
\-\- [master] Merge work in mybranch
+* [master^2] Some work\&.
+* [master^] Some fun\&.
.fi
.if n \{\
.RE
.\}
.sp
.sp
\fBgit merge\fR を実行する前は、 \fBmaster\fR ヘッドが "Some fun\&." コミット、 \fBmybranch\fR ヘッドが "Some work\&." コミットだったことを思い出してください。
.sp
.if n \{\
.RS 4
.\}
.nf
$ git switch \-C mybranch master^2
$ git switch master
$ git reset \-\-hard master^
.fi
.if n \{\
.RE
.\}
.sp
.sp
巻き戻し後、コミット構造は以下のようになります:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git show\-branch
* [master] Some fun\&.
 ! [mybranch] Some work\&.
\-\-
*  [master] Some fun\&.
 + [mybranch] Some work\&.
*+ [master^] second commit\&.
.fi
.if n \{\
.RE
.\}
.sp
.sp
これで、手動でマージを試す準備ができました。
.sp
\fBgit merge\fR コマンドは、2つのブランチをマージするときに、3方向マージアルゴリズムを使用します。 まず、それらの間の共通の祖先を見つけます。使用するコマンドは \fBgit merge\-base\fR です:
.sp
.if n \{\
.RS 4
.\}
.nf
$ mb=$(git merge\-base HEAD mybranch)
.fi
.if n \{\
.RE
.\}
.sp
.sp
このコマンドは、共通の祖先のコミットオブジェクト名を標準出力に書き込むため、我々は次のステップで使用するため、その出力を変数にキャプチャしました。ちなみに、今回は、共通の祖先コミットは「second commit\&.」コミットです。あなたはそれを以下のように言うことができます:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git name\-rev \-\-name\-only \-\-tags $mb
my\-first\-tag
.fi
.if n \{\
.RE
.\}
.sp
.sp
共通の祖先コミットを見つけた後の、2番目のステップは以下のとおりです:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git read\-tree \-m \-u $mb HEAD mybranch
.fi
.if n \{\
.RE
.\}
.sp
.sp
これは、すでに見たのと同じ \fBgit read\-tree\fR コマンドですが、前の例とは異なり、3つのツリーが必要です。 これにより、各ツリーの内容がインデックスファイルの異なる「ステージ」に読み込まれます(最初のツリーはステージ1に、2番目はステージ2に、等)。3つのツリーを3つのステージに読み取った後、3つのステージで同じパスがある場合はステージ0に「折りたたまれます」(collapsed)。また、3つのステージのうちの2つで同じパスは、ステージ0に折りたたまれ、ステージ1と異なるステージ2またはステージ3のいずれかからSHA\-1を取得します(つまり、共通の祖先から片側だけが変更されます)。
.sp
「折りたたみ」(collapsing)操作の後、3つのツリーで異なるパスはゼロ以外のステージに残されます。この時点で、以下のコマンドを使用してインデックスファイルを調査できます:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git ls\-files \-\-stage
100644 7f8b141b65fdcee47321e399a2598a235a032422 0       example
100644 557db03de997c86a4a028e1ebd3a1ceb225be238 1       hello
100644 ba42a2a96e3027f3333e13ede4ccf4498c3ae942 2       hello
100644 cc44c73eb783565da5831b4d820c962954019b69 3       hello
.fi
.if n \{\
.RE
.\}
.sp
.sp
私達の2つのファイルのみの例では、変更されていないファイルがなかったため、 \fBexample\fR のみが折りたたまれました。 しかし、実際の大規模なプロジェクトでは、1回のコミットで変更されるファイルの数が少ない場合、この「折りたたみ」はほとんどのパスをかなり迅速にマージする傾向があり、ゼロ以外のステージでの実際の変更はほんの一握りになります。
.sp
ゼロ以外のステージのみを確認するには、 \fB\-\-unmerged\fR フラグを使用します:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git ls\-files \-\-unmerged
100644 557db03de997c86a4a028e1ebd3a1ceb225be238 1       hello
100644 ba42a2a96e3027f3333e13ede4ccf4498c3ae942 2       hello
100644 cc44c73eb783565da5831b4d820c962954019b69 3       hello
.fi
.if n \{\
.RE
.\}
.sp
.sp
マージの次のステップは、3方向マージを使用して、これら3つのバージョンのファイルをマージすることです。これは、 \fBgit merge\-index\fR コマンドの引数の1つとして \fBgit merge\-one\-file\fR コマンドを指定することによって行われます:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git merge\-index git\-merge\-one\-file hello
Auto\-merging hello
ERROR: Merge conflict in hello
fatal: merge program failed
.fi
.if n \{\
.RE
.\}
.sp
.sp
\fBgit merge\-one\-file\fR スクリプトは、これら3つのバージョンを記述するためのパラメーターを使用して呼び出され、マージ結果を作業ツリーに残す役割を果たします。 これはかなり単純なシェルスクリプトであり、最終的にはRCSスイートから \fBmerge\fR プログラムを呼び出して、ファイルレベルの3方向マージを実行します。今回は、 \fBmerge\fR は競合を検出し、競合マークのあるマージ結果が作業ツリーに残ります。これは、この時点で \fBls\-files \-\-stage\fR を再度実行すると確認できます:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git ls\-files \-\-stage
100644 7f8b141b65fdcee47321e399a2598a235a032422 0       example
100644 557db03de997c86a4a028e1ebd3a1ceb225be238 1       hello
100644 ba42a2a96e3027f3333e13ede4ccf4498c3ae942 2       hello
100644 cc44c73eb783565da5831b4d820c962954019b69 3       hello
.fi
.if n \{\
.RE
.\}
.sp
.sp
これは、 \fBgit merge\fR が制御を返した後のインデックスファイルと作業ファイルの状態であり、競合するマージを解決できるようにします。 パス \fBhello\fR はまだマージされておらず、この時点で \fBgit diff\fR で表示されるのは、ステージ2(つまり、あなたのバージョン)との違いであることに注意してください。
.SH "PUBLISHING YOUR WORK"
.sp
そういうわけで、私達はリモートリポジトリから他の人の作業を使用することはできますが、他の人がリポジトリからプルできるようにリポジトリを作成するには、あなたはどうすればよいのでしょうか？
.sp
あなたのプライマリリポジトリが \fB\&.git\fR サブディレクトリとしてその下にぶら下がっているあなたの作業ツリーで実際の作業を行っています。あなたはそのリポジトリにリモートでアクセスできるようにして、そこからプルするように人々に依頼することも可能ですが、実際には、それは通常の方法ではありません。推奨される方法は、パブリックリポジトリを用意し、他の人がアクセスできるようにすることです。あなたのプライマリ作業ツリーに加えた変更がよい状態になったら、そこからパブリックリポジトリを更新します。これはしばしば「プッシュ」(pushing)と呼ばれます。
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
このパブリックリポジトリはさらにミラーリングされる可能性があり、それが \fBkernel\&.org\fR のGitリポジトリの管理方法です。
.sp .5v
.RE
.sp
ローカル(プライベート)リポジトリからリモート(パブリック)リポジトリに変更を公開するには、リモートマシンでの書き込み権限が必要です。単一のコマンド \fBgit\-receive\-pack\fR を実行するには、そこにSSHアカウントが必要です。
.sp
まず、パブリックリポジトリを格納する空のリポジトリをリモートマシンに作成する必要があります。この空のリポジトリは、後でプッシュすることで、データが設定され、最新の状態に保たれる。明らかに、このリポジトリの作成は1度だけ実行する必要があります。
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
\fBgit push\fR は、ローカルマシンでは \fBgit send\-pack\fR 、リモートマシンでは \fBgit\-receive\-pack\fR というコマンドのペアを使用します。ネットワークを介した2つのコマンドの間の通信は、内部でSSH接続を使用します。
.sp .5v
.RE
.sp
あなたのプライベートリポジトリのGitディレクトリは通常 \fB\&.git\fR ですが、パブリックリポジトリはプロジェクト名にちなんで名付けられていることがよくあります。つまり \fB<project>\&.git\fR です。 プロジェクト \fBmy\-git\fR のこのようなパブリックリポジトリを作成しましょう。リモートマシンにログインした後、以下のように空のディレクトリを作成します:
.sp
.if n \{\
.RS 4
.\}
.nf
$ mkdir my\-git\&.git
.fi
.if n \{\
.RE
.\}
.sp
.sp
次に、 \fIgit init\fR を実行してそのディレクトリをGitリポジトリにしますが、今回はその名前が通常の \fB\&.git\fR ではないため、我々は少し異なる方法で処理します:
.sp
.if n \{\
.RS 4
.\}
.nf
$ GIT_DIR=my\-git\&.git git init
.fi
.if n \{\
.RE
.\}
.sp
.sp
あなたが選択した転送方法(transport)を介して変更をプルする他のユーザーがこのディレクトリを使用できることを確認してください。 また、あなたは \fB$PATH\fR 上に \fIgit\-receive\-pack\fR プログラムがあることを確認する必要があります。
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
sshdの多くのインストールでは、あなたがプログラムを直接実行するときに、ログインシェルとしてあなたのシェルが呼び出されません。これが意味するのは、ログインシェルが \fBbash\fR の場合、 \fB\&.bashrc\fR のみが読み取られ、 \fB\&.bash_profile\fR は読み取られないということです。 回避策として、あなたが \fBgit\-receive\-pack\fR プログラムを実行できるように、 \fB\&.bashrc\fR で \fB$PATH\fR を設定していることを確認してください。
.sp .5v
.RE
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
あなたがこのリポジトリを公開してhttp経由でアクセスする場合は、この時点で \fBmv my\-git\&.git/hooks/post\-update\&.sample my\-git\&.git/hooks/post\-update\fR を実行する必要があります。これにより、このリポジトリにプッシュするたびに、 \fBgit update\-server\-info\fR が実行されます。
.sp .5v
.RE
.sp
これで、あなたの「パブリックリポジトリ」であなたの変更を受け入れる準備が整いました。あなたのプライベートリポジトリがあるマシンに戻ってください。 そこから、以下のコマンドを実行します:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git push <public\-host>:/path/to/my\-git\&.git master
.fi
.if n \{\
.RE
.\}
.sp
.sp
これにより、あなたのパブリックリポジトリが同期され、指定のブランチヘッド(つまり、この場合は \fBmaster\fR)と、あなたの現在のリポジトリ内のそれらから到達可能なオブジェクトが一致します。
.sp
実例として、以下は私のパブリックGitリポジトリを更新する方法です。Kernel\&.orgミラーネットワークは、他の公開されているマシンへの伝播を処理します:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git push master\&.kernel\&.org:/pub/scm/git/git\&.git/
.fi
.if n \{\
.RE
.\}
.sp
.SH "PACKING YOUR REPOSITORY"
.sp
以前、私達は作成したGitオブジェクトごとに \fB\&.git/objects/??/\fR ディレクトリの下に1つのファイルが保存されていることを確認しました。この表現は、アトミックかつ安全に作成するには効率的ですが、ネットワークを介した転送にはそれほど便利ではありません。Gitオブジェクトは、作成されると不変であるため、「一緒にパックする」ことでストレージを最適化する方法があります。以下のコマンド
.sp
.if n \{\
.RS 4
.\}
.nf
$ git repack
.fi
.if n \{\
.RE
.\}
.sp
.sp
は、あなたのためにそれをします。チュートリアルの例に従うと、これまでに約17個のオブジェクトが \fB\&.git/objects/??/\fR ディレクトリに蓄積されているはずです。 \fBgit repack\fR は、パックしたオブジェクトの数を示し、パックされたファイルを \fB\&.git/objects/pack\fR ディレクトリに保存します。
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
\fB\&.git/objects/pack\fR ディレクトリに \fBpack\-*\&.pack\fR と \fBpack\-*\&.idx\fR の2つのファイルがあります。これらは互いに密接に関連しているため、何らかの理由で手動で別のリポジトリにコピーする場合は、必ず一緒にコピーする必要があります。前者はパック内のオブジェクトからのすべてのデータを保持し、後者はランダムアクセスのためのインデックスを保持します。
.sp .5v
.RE
.sp
あなたが病的なほど疑り深い場合は、 \fBgit verify\-pack\fR コマンドを実行すると、破損したパックがあるかどうかが検出されますが、あまり心配する必要はありません。私たちのプログラムは常に完璧です ;\-)
.sp
オブジェクトをパックしたら、既にパックファイルに取り込まれている、パックされていないオブジェクトを残す必要はありません。
.sp
.if n \{\
.RS 4
.\}
.nf
$ git prune\-packed
.fi
.if n \{\
.RE
.\}
.sp
.sp
これは、あなたのためにそれらを削除します。
.sp
あなたがもの好きならば、\fBgit prune\-packed\fR を実行する前後に \fBfind \&.git/objects \-type f\fR を実行してみてください。 また、 \fBgit count\-objects\fR は、リポジトリ内でパックされていないオブジェクト(unpacked objects)の数と、それらが消費しているスペースの量を示します。
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
パックされたリポジトリでは比較的大きなパックに含まれるオブジェクトが比較的少ない可能性があるため、HTTP転送(transport)での \fBgit pull\fR は少々面倒です。パブリックリポジトリから多くのHTTPプルが予想される場合は、頻繁に再パックして整理するか、まったく行わないことをお勧めします。
.sp .5v
.RE
.sp
この時点で再度 \fBgit repack\fR を実行すると、「Nothing new to pack\&.」(新しくパックするものはありません)と表示されます。あなたが開発を続行して変更を蓄積してから、 \fBgit repack\fR を再度実行すると、前回リポジトリをパックして以降に作成されたオブジェクトを含む新しいパックが作成されます。最初のインポートの直後にプロジェクトをパックし(プロジェクトを最初から開始する場合を除く)、プロジェクトの活発度度に応じて、時々 \fBgit repack\fR を実行することをお勧めします。
.sp
リポジトリが \fBgit push\fR と \fBgit pull\fR を介して同期される場合、転送元リポジトリにてパックされてたオブジェクトは通常、転送先ではアンパックされて保存されます。これにより、転送元と転送先で異なるパッキング戦略を使用できますが、両方のリポジトリを時々再パックする必要がある場合もあります。
.SH "WORKING WITH OTHERS"
.sp
Gitは真に分散されたシステムですが、多くの場合、開発者の非公式な階層でプロジェクト編成すると便利です。Linuxカーネル開発はこの方法で実行されます。 \m[blue]\fBRandy Dunlap\(cqs presentation\fR\m[]\&\s-2\u[2]\d\s+2 の (17ページ "Merges to Mainline") にイラストがあります。
.sp
この階層は純粋に「非公式」であることを強調しておく必要があります。この階層が意味する「パッチフローのチェーン」を強制するようなGitでの必須のものは何もありません。あなたはただ1つのリモートリポジトリからプルする必要はありません。
.sp
「プロジェクト指揮」(project lead)の推奨作業フローは以下のようになります:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
あなたのローカルマシンで、あなたのプライマリリポジトリを準備します。あなたの作業はそこで行います。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
他の人がアクセスできる公開リポジトリを準備します。
.sp
他の人がバカ転送プロトコル(dumb transport protocols)(HTTP)を介してリポジトリからプルしている場合、このリポジトリを「バカ転送フレンドリー」(dumb transport friendly)に保つ必要があります。
\fBgit init\fR
後、標準テンプレートからコピーした
\fB$GIT_DIR/hooks/post\-update\&.sample\fR
には、
\fBgit update\-server\-info\fR
の呼び出しが含まれますが、あなたは
\fBmv post\-update\&.sample post\-update\fR
を使用してフックを手動で有効にする必要があります。これにより、
\fBgit update\-server\-info\fR
が必要なファイルを最新の状態に保つことができます。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
あなたのプライマリリポジトリから公開リポジトリにプッシュします。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
公開リポジトリを
\fBgit repack\fR
します。これにより、オブジェクトの初期セットをベースラインとして含む大きなパックが確立されます。リポジトリからのプルに使用される転送方法(transport)がパックされたリポジトリ(packed repositories)をサポートしている場合は、
\fBgit prune\fR
が使える可能性があります。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}
あなたはプライマリリポジトリで作業を続けます。あなたの変更は、あなた独自の変更や、電子メールで受信するパッチや、「サブシステム保守者」の「公開」リポジトリをプルした結果のマージを含んでいます。
.sp
あなたはこのプライベートリポジトリはいつでも再パックできます。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}
あなたの変更を公開リポジトリにプッシュし、公開します。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}
時々、公開リポジトリを
\fBgit repack\fR
します。 手順5に戻り、作業を続行します。
.RE
.sp
そのプロジェクトに取り組んでいて、独自の「公開リポジトリ」を持つ「サブシステム保守者」に推奨される作業サイクルは以下のようになります:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
「プロジェクト指揮」の公開リポジトリ上で
\fBgit clone\fR
を実行して、あなたの作業リポジトリを準備します。初期クローン作成に使用されるURLは、 remote\&.origin\&.url 構成変数に格納されます。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
「プロジェクト指揮」の人と同じように、他の人がアクセスできる公開リポジトリを準備します。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
「プロジェクト指揮」リポジトリが同じマシン上にある場合を除き、パックされたファイルを「プロジェク指揮」の公開リポジトリからあなたの公開リポジトリにコピーします。後者の場合、あなたは
\fBobjects/info/alternates\fR
ファイルを使用して、借用しているリポジトリを指すことができます。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
あなたのプライマリリポジトリから公開リポジトリにプッシュします。\fBgit repack\fR
を実行し、そして、リポジトリからのプルに使用される転送方法(transport)がパックされたリポジトリ(packed repositories)をサポートしている場合は
\fBgit prune\fR
を実行します。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}
あなたのプライマリリポジトリで作業を続けます。あなたの変更には、あなた独自の変更や、電子メールで受信するパッチや、「プロジェクト指揮」と場合によっては「サブサブシステム保守者」の「公開」リポジトリをプルした結果のマージが含まれます。
.sp
あなたはこのプライベートリポジトリはいつでも再パックできます。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}
あなたの変更をあなたの公開リポジトリにプッシュし、「プロジェクト指揮」と、場合によっては「サブサブシステム保守者」にプルするように依頼します。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}
時々、公開リポジトリを
\fBgit repack\fR
します。 手順5に戻り、作業を続行します。
.RE
.sp
「公開」リポジトリを持たない「個人開発者」に推奨される作業サイクルは多少異なります。以下のようになります:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
「プロジェクト指揮」(またはサブシステムで作業している場合は「サブシステム保守者」)の公開リポジトリを
\fBgit clone\fR
して、あなたの作業リポジトリを準備します。初期クローン作成に使用されるURLは、 remote\&.origin\&.url 構成変数に格納されます。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
あなたは、あなたのリポジトリの
\fImaster\fR
ブランチで作業を行います。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
時々、あなたのアップストリームの公開リポジトリから
\fBgit fetcho rigin\fR
を実行します。これは
\fBgit pull\fR
の前半のみを実行しますが、マージはしません。公開リポジトリのヘッドは
\fB\&.git/refs/remotes/origin/master\fR
に保存されています。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
\fBgit cherry origin\fR
を使用して、どのパッチが受け入れられたかを確認したり、
\fBgit rebase origin\fR
を使用して、あなたのマージされていない変更を更新されたアップストリームに転送します。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}
\fBgit format\-patch origin\fR
を使用して、アップストリームへの電子メール送信用のパッチを準備し、送信します。 手順2に戻り、作業を続行します。
.RE
.SH "WORKING WITH OTHERS, SHARED REPOSITORY STYLE"
.sp
あなたがCVS界隈から来ていたら、前のセクションで提案された協力のスタイルはあなたにとって新しいものかもしれません。でも心配する必要はありません。 Gitは、おそらくあなたもよく知っている「共有公開リポジトリ」(shared public repository)スタイルの協同作業をサポートしています。
.sp
詳細については \fBgitcvs-migration\fR(7) を参照してください。
.SH "BUNDLING YOUR WORK TOGETHER"
.sp
あなたは一度に複数のことに取り組む可能性があります。Gitでブランチを使用すると、これらの多かれ少なかれ独立したタスクを簡単に管理できます。
.sp
私達は2つのブランチを使用した「fun and work」の例で、ブランチがどのように機能するかはすでに見てきました。ブランチが3つ以上ある場合も、考え方は同じです。 \fBmaster\fR ヘッドから始めて、 \fBmaster\fR ブランチにいくつかの新しいコードがあり、 \fBcommit\-fix\fR ブランチと \fBdiff\-fix\fR ブランチに2つの独立した修正があるとします:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git show\-branch
! [commit\-fix] Fix commit message normalization\&.
 ! [diff\-fix] Fix rename detection\&.
  * [master] Release candidate #1
\-\-\-
 +  [diff\-fix] Fix rename detection\&.
 +  [diff\-fix~1] Better common substring algorithm\&.
+   [commit\-fix] Fix commit message normalization\&.
  * [master] Release candidate #1
++* [diff\-fix~2] Pretty\-print messages\&.
.fi
.if n \{\
.RE
.\}
.sp
.sp
両方の修正は十分にテストされており、この時点で、両方をマージする必要があります。あなたは以下のように、最初に \fBdiff\-fix\fR でマージし、次に \fBcommit\-fix\fR でマージする事ができます:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git merge \-m "Merge fix in diff\-fix" diff\-fix
$ git merge \-m "Merge fix in commit\-fix" commit\-fix
.fi
.if n \{\
.RE
.\}
.sp
.sp
この結果は以下のようになります:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git show\-branch
! [commit\-fix] Fix commit message normalization\&.
 ! [diff\-fix] Fix rename detection\&.
  * [master] Merge fix in commit\-fix
\-\-\-
  \- [master] Merge fix in commit\-fix
+ * [commit\-fix] Fix commit message normalization\&.
  \- [master~1] Merge fix in diff\-fix
 +* [diff\-fix] Fix rename detection\&.
 +* [diff\-fix~1] Better common substring algorithm\&.
  * [master~2] Release candidate #1
++* [master~3] Pretty\-print messages\&.
.fi
.if n \{\
.RE
.\}
.sp
.sp
しかしながら、あなたが持っているものが真に独立した変更のセットである場合、最初に一方のブランチにマージし、次にもう一方のブランチにマージする特別な理由はありません(もし順序が重要な場合は、それらは定義上独立しているとは言えません)。代わりに、これら2つのブランチを現在のブランチに一度にマージすることができます。まずは、今行ったことを元に戻して、最初からやり直しましょう。 \fBmaster~2\fR にリセットすることにより、これら2つのマージの前のmasterブランチを取得する必要があります:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git reset \-\-hard master~2
.fi
.if n \{\
.RE
.\}
.sp
.sp
\fBgit show\-branch\fR すれば、先ほど行った2つの \fBgit merge\fR の前の状態と一致することを確認できます。 次に、2つの \fBgit merge\fR コマンドを連続して実行する代わりに、これら2つのブランチヘッドをマージします(これは「making an Octopus」(タコ足メイク)として知られています):
.sp
.if n \{\
.RS 4
.\}
.nf
$ git merge commit\-fix diff\-fix
$ git show\-branch
! [commit\-fix] Fix commit message normalization\&.
 ! [diff\-fix] Fix rename detection\&.
  * [master] Octopus merge of branches \*(Aqdiff\-fix\*(Aq and \*(Aqcommit\-fix\*(Aq
\-\-\-
  \- [master] Octopus merge of branches \*(Aqdiff\-fix\*(Aq and \*(Aqcommit\-fix\*(Aq
+ * [commit\-fix] Fix commit message normalization\&.
 +* [diff\-fix] Fix rename detection\&.
 +* [diff\-fix~1] Better common substring algorithm\&.
  * [master~1] Release candidate #1
++* [master~2] Pretty\-print messages\&.
.fi
.if n \{\
.RE
.\}
.sp
.sp
注意: 可能であるからいって必ずしもタコ足(octopus)をやるべきではない、ということに注意してください。タコ足(octopus)は有効な方法であり、2つ以上の独立した変更を同時にマージする場合、コミット履歴を簡単に表示できることがよくあります。しかし、マージしているブランチのいずれかとマージの競合があり、手動で解決する必要がある場合は、これは、これらのブランチで発生した開発が結局独立していないことを示しています。そうすると、あなたは、どうして一度に2つをマージして、競合をどのように解決したか、および一方の側で行われた変更をもう一方の側よりも優先した理由を文書化しなければならなくなります。そうしないと、プロジェクトの履歴を追跡するのが難しくなり、簡単ではなくなります。
.SH "SEE ALSO"
.sp
\fBgittutorial\fR(7), \fBgittutorial-2\fR(7), \fBgitcvs-migration\fR(7), \fBgit-help\fR(1), \fBgiteveryday\fR(7), \m[blue]\fBThe Git User\(cqs Manual\fR\m[]\&\s-2\u[1]\d\s+2
.SH "GIT"
.sp
Part of the \fBgit\fR(1) suite
.SH "NOTES"
.IP " 1." 4
the Git User Manual
.RS 4
\%file:///home/hideo/share/doc/git-doc/user-manual.html
.RE
.IP " 2." 4
Randy Dunlap\(cqs presentation
.RS 4
\%https://web.archive.org/web/20120915203609/http://www.xenotime.net/linux/mentor/linux-mentoring-2006.pdf
.RE
