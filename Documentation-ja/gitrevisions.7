'\" t
.\"     Title: gitrevisions
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: 12/10/2022
.\"    Manual: Git Manual
.\"    Source: Git 2.38.0.rc1.238.g4f4d434dc6.dirty
.\"  Language: English
.\"
.TH "GITREVISIONS" "7" "12/10/2022" "Git 2\&.38\&.0\&.rc1\&.238\&.g" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
gitrevisions \- Gitのリビジョンと範囲を指定する
.SH "SYNOPSIS"
.sp
gitrevisions
.SH "DESCRIPTION"
.sp
多くのGitコマンドは、リビジョンパラメーターを引数として取ります。コマンドに応じて、特定のコミットを示します。リビジョングラフをたどるコマンド(\fBgit-log\fR(1) など)の場合は、そのコミットから到達可能なすべてのコミットを示します。リビジョングラフをたどるコマンドの場合、リビジョンの範囲を明示的に指定することもできます。
.sp
さらに、一部のGitコマンド(\fBgit-show\fR(1) や \fBgit-push\fR(1) など)は、コミット以外のオブジェクトを示すリビジョンパラメーターを受け取ることもできます。例えば、ブロブ(ファイル)またはツリー(ファイルのディレクトリ)です。
.SH "SPECIFYING REVISIONS"
.sp
リビジョンパラメータ \fB<rev>\fR は必ずしもそうとは限りませんが、通常はコミットオブジェクトに名前を付けます。これは、いわゆる「拡張SHA\-1」構文を使用します。 オブジェクト名を綴るにはさまざまな方法があります。このリストの終わり近くにリストされているものは、コミットに含まれているツリーとブロブに名前を付けています。
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
この文書は、gitで見られる「生の」構文を示しています。シェルおよびその他のUIでは、特殊文字を保護し、単語の分割を回避するために、追加の引用符が必要になる場合があります。
.sp .5v
.RE
.PP
\fB<sha1>\fR 例: \fBdae86e1950b1277e545cee180551750029cfe735\fR, \fBdae86e\fR
.RS 4
完全なSHA\-1オブジェクト名(40バイトの16進文字列)、またはリポジトリ内で一意の先頭のsubstring。例えば dae86e1950b1277e545cee180551750029cfe735 と dae86e はどちらも、リポジトリ内にオブジェクト名が dae86e で始まる他のオブジェクトがない場合、全く同じコミットオブジェクトに名前を付けます。
.RE
.PP
\fB<describeOutput>\fR 例: \fBv1\&.7\&.4\&.2\-679\-g3bee7fb\fR
.RS 4
\fBgit describe\fR
からの出力。つまり、現在のコミットから最も近いタグ。オプションで、ダッシュ(\-)とそのタグ以降現在のコミットが何番目になるかの数が続き、その後にダッシュ(\-)、「g」、および省略されたオブジェクト名が続きます。
.RE
.PP
\fB<refname>\fR 例: \fBmaster\fR, \fBheads/master\fR, \fBrefs/heads/master\fR
.RS 4
シンボリックref名。例えば
\fBmaster\fR
は通常、
\fBrefs/heads/master\fR
によって参照されるコミットオブジェクトを意味します。
\fBheads/master\fR
と
\fBtags/master\fR
の両方がある場合は、あなたは
\fBheads/master\fR
と明示的に指定して、どちらを意味するかをGitに伝えることができます。 あいまいな場合、
\fB<refname>\fR
は、以下のルールに従い最初の一致を採用ことで明確になります:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
もし
\fB$GIT_DIR/<refname>\fR
が存在するならば、それはあなたが指定した通りのものです(これは通常、\fBHEAD\fR
と
\fBFETCH_HEAD\fR
と
\fBORIG_HEAD\fR
と
\fBMERGE_HEAD\fR
と
\fBCHERRY_PICK_HEAD\fR
のみで役に立ちます)
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
でなければ
\fBrefs/<refname>\fR
が存在すればそれを採用します。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
でなければ
\fBrefs/tags/<refname>\fR
が存在すればそれを採用します。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
でなければ
\fBrefs/heads/<refname>\fR
が存在すればそれを採用します。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}
でなければ
\fBrefs/remotes/<refname>\fR
が存在すればそれを採用します。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}
でなければ
\fBrefs/remotes/<refname>/HEAD\fR
が存在すればそれを採用します。
.sp
\fBHEAD\fR
は、作業ツリーの変更に基づいたコミットに名前を付けます。
\fBFETCH_HEAD\fR
は、最後の
\fBgit fetch\fR
呼び出しでリモートリポジトリからフェッチしたブランチを記録します。
\fBORIG_HEAD\fR
は、
\fBHEAD\fR
を大幅に移動するコマンドによって作成され、操作前の
\fBHEAD\fR
の位置を記録します。これにより、ブランチの先端を実行前の状態に簡単に戻すことができます。
\fBMERGE_HEAD\fR
は、
\fBgit merge\fR
を実行するときにブランチにマージするコミットを記録します。
\fBCHERRY_PICK_HEAD\fR
は、
\fBgit cherry\-pick\fR
を実行したときにチェリーピックしているコミットを記録します。
.sp
注意: 上記の
\fBrefs/*\fR
の場合、
\fB$GIT_DIR/refs\fR
ディレクトリまたは
\fB$GIT_DIR/packed\-refs\fR
ファイルのいずれかから発生する可能性があることに注意してください。ref名のエンコードは指定されていませんが、一部の出力処理ではUTF\-8でref名を想定する場合があるため、UTF\-8が推奨されます。
.RE
.RE
.PP
\fB@\fR
.RS 4
\fB@\fR
単独では
\fBHEAD\fR
のショートカットを意味します。
.RE
.PP
\fB[<refname>]@{<date>}\fR 例: \fBmaster@{yesterday}\fR, \fBHEAD@{5 minutes ago}\fR
.RS 4
refの後に接尾辞
\fB@\fR
が続き、日付指定が中括弧のペアで囲まれています(例:
\fB{yesterday}\fR
、
\fB{1 month 2 weeks 3 days 1 hour 1 second ago}\fR
、\fB{1979\-02\-26 18:30:00}\fR
)。これは以前の時点でのrefの値を指定します。この接尾辞は、ref名の直後にのみ使用でき、refには既存のログ(
\fB$GIT_DIR/logs/<ref>\fR
)が必要です。これは、特定の時点での
\fBローカル\fR
refの状態を検索することに注意してください。たとえば、先週ローカルの
\fBmaster\fR
ブランチに何があったか、です。特定の時間に行われたコミットを確認する場合は、
\fB\-\-since\fR
と
\fB\-\-until\fR
を参照してください。
.RE
.PP
\fB<refname>@{<n>}\fR 例: \fBmaster@{1}\fR
.RS 4
refの後に接尾辞
\fB@\fR
が続き、数の指定が中括弧のペアで囲まれている場合(たとえば
\fB{1}\fR,
\fB{15}\fR)、そのrefのn個前の値を指定します。たとえば
\fBmaster@{1}\fR
は
\fBmaster\fR
の直前の値であり、
\fBmaster@{5}\fR
は
\fBmaster\fR
の5個前の値です。この接頭辞は、ref名の直後にのみ使用でき、refには既存のログ(
\fB$GIT_DIR/logs/<refname>\fR
)が必要です。
.RE
.PP
\fB@{<n>}\fR 例: \fB@{1}\fR
.RS 4
空のref部分で
\fB@\fR
コンストラクトを使用して、現在のブランチのreflogエントリを取得できます。たとえば、あなたがブランチ
\fBblabla\fR
を使用している場合、
\fB@{1}\fR
は
\fBblabla@{1}\fR
と同じ意味になります。
.RE
.PP
\fB@{\-<n>}\fR 例: \fB@{\-1}\fR
.RS 4
構成
\fB@{\-<n>}\fR
は、現在のブランチ/コミットの前にチェックアウトされた<n>番目のブランチ/コミットを意味します。
.RE
.PP
\fB[<branchname>]@{upstream}\fR 例: \fBmaster@{upstream}\fR, \fB@{u}\fR
.RS 4
ブランチ B は、 リモート R (\fBbranch\&.<name>\&.remote\fR
で構成)で、ブランチ X (\fBbranch\&.<name>\&.merge\fR
で構成)の上に構築するようにセットアップできます。
\fBB@{u}\fR
は、リモート R から取られたブランチ X のリモート追跡ブランチを参照し、 通常は
\fBrefs/remotes/R/X\fR
にあります。
.RE
.PP
\fB[<branchname>]@{push}\fR 例: \fBmaster@{push}\fR, \fB@{push}\fR
.RS 4
接尾辞
\fB@\e{push}\fR
は、
\fBbranchname\fR
がチェックアウトされているときに
\fBgit push\fR
が実行された場合(またはブランチ名が指定されていない場合は現在の
\fBHEAD\fR
)、「プッシュ先」のブランチを報告します。
\fB@\e{upstream\e}\fR
の場合と同様に、リモートのブランチに対応するリモート・トラッキング・ブランチを報告します。
.sp
ここで、よりはっきり分かる例を以下に示します:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git config push\&.default current
$ git config remote\&.pushdefault myfork
$ git switch \-c mybranch origin/master

$ git rev\-parse \-\-symbolic\-full\-name @{upstream}
refs/remotes/origin/master

$ git rev\-parse \-\-symbolic\-full\-name @{push}
refs/remotes/myfork/mybranch
.fi
.if n \{\
.RE
.\}
.sp
注意: この例では、ある場所からプルして別の場所にプッシュする三角形のワークフローを設定していることに注意してください。非三角形のワークフローでは、
\fB@\e{push}\fR
は
\fB@\e{upstream}\fR
と同じであり、このようなことをする必要はありません。
.sp
この接尾辞は大文字で綴る場合にも受け入れられ、大文字と小文字を問わず同じことを意味します。
.RE
.PP
\fB<rev>^[<n>]\fR 例: \fBHEAD^, v1\&.5\&.1^0\fR
.RS 4
リビジョンパラメータの接尾辞
\fB^\fR
は、そのコミットオブジェクトの最初の親を意味します。
\fB^<n>\fR
は <n> 番目の親を意味します(つまり、
\fB<rev>^\fR
は
\fB<rev>^1\fR
と同じです)。特別ルールとして、
\fB<rev>^0\fR
はコミット自体を意味し、
\fB<rev>\fR
がコミットオブジェクトを参照するタグオブジェクトのオブジェクト名である場合に使用されます。
.RE
.PP
\fB<rev>~[<n>]\fR 例: \fBHEAD~, master~3\fR
.RS 4
リビジョンパラメータの接尾辞
\fB~\fR
は、そのコミットオブジェクトの最初の親を意味します。リビジョンパラメータの接尾辞
\fB~<n>\fR
は、最初の親のみに続く、指定されたコミットオブジェクトの <n> 世代の祖先であるコミットオブジェクトを意味します。つまり、
\fB<rev>~3\fR
は
\fB<rev>^^^\fR
と同じで、するってぇと
\fB<rev>^1^1^1\fR
と同じということです。この形式については以下の図を参照してください。
.RE
.PP
\fB<rev>^{<type>}\fR 例: \fBv0\&.99\&.8^{commit}\fR
.RS 4
接尾辞
\fB^\fR
の後に中括弧のペアで囲まれたオブジェクトタイプ名が続くということは、タイプ
\fB<type>\fR
のオブジェクトが見つかるか、オブジェクトを逆参照できなくなるまで、
\fB<rev>\fR
でオブジェクトを再帰的に逆参照する(この場合は、いろいろ一旦飲み込んでしまったのを吐きもどすような感じだぬ)ことを意味します。 たとえば、
\fB<rev>\fR
がコミットっぽい場合、
\fB<rev>^{commit}\fR
は対応するコミットオブジェクトを記述します。同様に、
\fB<rev>\fR
がツリーっぽい場合、
\fB<rev>^{tree}\fR
は対応するツリーオブジェクトを記述します。
\fB<rev>^0\fR
は
\fB<rev>^{commit}\fR
の省略形です。
.sp
\fB<rev>^{object}\fR
を使用すると、
\fB<rev>\fR
がタグである必要がなく、
\fB<rev>\fR
を逆参照することなく、
\fB<rev>\fR
が存在するオブジェクトに名前を付けることができます。なお、タグはすでにオブジェクトであるため、オブジェクトに到達するために一度も逆参照する必要はありません。
.sp
\fB<rev>^{tag}\fR
を使用して、
\fB<rev>\fR
が既存のタグオブジェクトを確実に識別することができます。
.RE
.PP
\fB<rev>^{}\fR 例: \fBv0\&.99\&.8^{}\fR
.RS 4
接尾辞
\fB^\fR
の後に空のブレースペアが続くということは、オブジェクトがタグである可能性があることを意味し、タグ以外のオブジェクトが見つかるまでタグを再帰的に逆参照します。
.RE
.PP
\fB<rev>^{/<text>}\fR 例: \fBHEAD^{/fix nasty bug}\fR
.RS 4
リビジョンパラメータの接尾辞
\fB^\fR
と、それに続くスラッシュで始まるテキストを含む中括弧のペアは、以下の
\fB:/fix nasty bug\fR
構文と同じですが、
\fB^\fR
の前の
\fB<rev>\fR
から到達可能な一致する最も若いコミットを返す点が異なります。
.RE
.PP
\fB:/<text>\fR 例: \fB:/fix nasty bug\fR
.RS 4
コロンに続いてスラッシュそしてそれに続くテキストは、コミットメッセージが指定された正規表現と一致するコミットを示します。この名前は、HEADを含む任意のrefから到達可能な最も若い一致するコミットを返します。正規表現は、コミットメッセージの任意の部分に一致できます。文字列で始まるメッセージを照合するには、たとえば、
\fB:/^foo\fR
とします。特別なシーケンス
\fB:/!\fR
はマッチングの修飾子用に予約されています。ます。
\fB:/!\-foo\fR
は一致の否定を実行し、
\fB:/!!foo\fR
はリテラル
\fB!\fR
後に
\fBfoo\fR
が続く文字列とマッチします。
\fB:/!\fR
で始まるその他のシーケンスは今のところ予約されています。指定されたテキストによっては、シェルにより追加の引用符が必要になる場合があります。
.RE
.PP
\fB<rev>:<path>\fR 例: \fBHEAD:README\fR, \fBmaster:\&./README\fR
.RS 4
接尾辞
\fB:\fR
の後にパス(path)を続けると、コロンの前の部分によって名前が付けられたツリー風のオブジェクト内の、指定されたパスにあるブロブまたはツリーに名前が付けられます。
\fB\&./\fR
または
\fB\&.\&./\fR
で始まるパスは、現在の作業ディレクトリからの相対パスです。指定のパスは、作業ツリーのルートディレクトリからの相対パスに変換されます。これは、作業ツリーと同じツリー構造を持つコミットまたはツリーからブロブまたはツリーをアドレス指定するのに最も役立ちます。
.RE
.PP
\fB:[<n>:]<path>\fR 例: \fB:0:README\fR, \fB:README\fR
.RS 4
コロンに、オプションでステージ番号(0〜3)とコロンが続き、それにパスが続くと、指定されたパスのインデックス内のブロブオブジェクトに名前を付けます。ステージ番号省略(およびそれに続くコロン)は、ステージ0エントリーを示します。マージ作業中、ステージ1は共通の祖先、ステージ2はターゲットブランチのバージョン(通常は現在のブランチ)、ステージ3はマージされるブランチのバージョンです。
.RE
.sp
以下はJon Loeligerによる図解です。コミットノードBとCはどちらもコミットノードAの親です。親コミットは左から右に順序付けられます。
.sp
.if n \{\
.RS 4
.\}
.nf
G   H   I   J
 \e /     \e /
  D   E   F
   \e  |  / \e
    \e | /   |
     \e|/    |
      B     C
       \e   /
        \e /
         A
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
A =      = A^0
B = A^   = A^1     = A~1
C =      = A^2
D = A^^  = A^1^1   = A~2
E = B^2  = A^^2
F = B^3  = A^^3
G = A^^^ = A^1^1^1 = A~3
H = D^2  = B^^2    = A^^^2  = A~2^2
I = F^   = B^3^    = A^^3^
J = F^2  = B^3^2   = A^^3^2
.fi
.if n \{\
.RE
.\}
.SH "SPECIFYING RANGES"
.sp
\fBgit log\fR などの履歴トラバースコマンドは、単一のコミットだけでなく、一連のコミットで動作します。
.sp
これらのコマンドの場合、前のセクションで説明した表記法を使用して単一のリビジョンを指定することは、指定のコミットから「到達可能」なコミットの組を意味します。
.sp
複数のリビジョンを指定するということは、指定のコミットのいずれかから到達可能なコミットの組を意味します。
.sp
コミットの到達可能な組は、コミット自体とその祖先チェーン内のコミットです。
.sp
以下に示すように、接続されたコミット(connected commits)の組(「リビジョン範囲」(revision range)と呼ばれる)を指定するためのいくつかの表記法があります。
.SS "Commit Exclusions"
.PP
\fB^<rev>\fR (カレット)記法
.RS 4
とある到達可能なコミットをコミット達から除外するには、接頭辞
\fB^\fR
表記を使用します。 例えば
\fB^r1 r2\fR
は
\fBr2\fR
から到達可能なコミットだけども、
\fBr1\fR
から到達可能なコミット(つまり
\fBr1\fR
とその祖先)は除外する事を意味します。
.RE
.SS "Dotted Range Notations"
.PP
\fB\&.\&.\fR (2ドット)範囲記法
.RS 4
\fB^r1 r2\fR
操作は頻繁に表示されるため、省略形があります。(上記の SPECIFYING REVISIONS で説明されている構文に従って名前が付けられている)2つのコミット
\fBr1\fR
と
\fBr2\fR
がある場合、あなたは
\fB^r1 r2\fR
によってr1から到達可能なコミットを取り除き、r2から到達可能なコミットを要求できます。そしてこれは
\fBr1\&.\&.r2\fR
と書くことができます。
.RE
.PP
\fB\&.\&.\&.\fR (3ドット)対称差記法
.RS 4
似た表記
\fBr1\&.\&.\&.r2\fR
は
\fBr1\fR
と
\fBr2\fR
の対称差と呼ばれ、
\fBr1 r2 \-\-not $(git merge\-base \-\-all r1 r2)\fR
として定義されます。 これは、
\fBr1\fR
(左側)または
\fBr2\fR
(右側)のいずれかから到達可能であるが、両方からは到達できないコミットの組です。
.RE
.sp
これらの2つの省略表記では、一方の端を省略して、デフォルトでHEADにすることができます。たとえば、 \fBorigin\&.\&.\fR は \fBorigin\&.\&.HEAD\fR の省略形であり、「originブランチから分岐(fork)してから何をしましたか？」と尋ねます。 同様に、 \fB\&.\&.origin\fR は \fBHEAD\&.\&.origin\fR の省略形であり、「私がそれらから分岐してから、originは何をしましたか？」と尋ねます。 \fB\&.\&.\fR は \fBHEAD\&.\&.HEAD\fR を意味することに注意してください。これは、HEADから到達可能および到達不能の両方の空の範囲です。
.sp
2つの異なる範囲を取るように特別に設計されたコマンド(たとえば、2つの範囲を比較するための "git range\-diff R1 R2" ) は存在しますが、それらは例外です。特に明記されていない限り、一連のコミットを操作するすべての "git" コマンドは、単一のリビジョン範囲で機能します。言い換えると、2つの「2ドット範囲表記」を隣り合わせに記述します。
.sp
.if n \{\
.RS 4
.\}
.nf
$ git log A\&.\&.B C\&.\&.D
.fi
.if n \{\
.RE
.\}
.sp
ほとんどのコマンドでは2つのリビジョン範囲を指定しません。代わりに、接続された単一のコミットの組、つまりBまたはDのいずれかから到達可能であるが、AまたはCのどちらからも到達可能でないコミットの組に名前を付けます。線形履歴では、以下のようになります:
.sp
.if n \{\
.RS 4
.\}
.nf
\-\-\-A\-\-\-B\-\-\-o\-\-\-o\-\-\-C\-\-\-D
.fi
.if n \{\
.RE
.\}
.sp
AとBはCから到達可能であるため、これら2つの2ドット範囲記法で指定されたリビジョン範囲は単一のコミットDです。
.SS "Other <rev>^ Parent Shorthand Notations"
.sp
コミットとその親コミットによって形成される組に名前を付けるために、マージコミットに特に役立つ他の3つの省略形が存在します。
.sp
\fBr1^@\fR 表記は、 \fBr1\fR のすべての親を意味します。
.sp
\fBr1^!\fR 表記には コミット \fBr1\fR が含まれますが、そのすべての親は除外されます。この表記自体は、単一のコミット \fBr1\fR を示します。
.sp
\fB<rev>^\-[<n>]\fR 表記には \fB<rev>\fR が含まれますが、 <n> 番目の親(つまり、 \fB<rev>^<n>\&.\&.<rev>\fR の省略形)は除外されます。 <n> が指定されていない場合は \fB<n>\fR = 1 とみなします。これは通常、 \fB<commit>^\-\fR を渡すだけで、マージコミット \fB<commit>\fR(\fB<commit>\fR 自体を含む)でマージされたブランチ内のすべてのコミットを取得できるマージコミットに役立ちます。
.sp
\fB<rev>^<n>\fR は単一のコミット親を指定することに関するものでしたが、これらの3つの表記はその親も考慮します。たとえば、 \fBHEAD^2^@\fR と言うことはできますが、 \fBHEAD^@^2\fR と言うことはできません。
.SH "REVISION RANGE SUMMARY"
.PP
\fB<rev>\fR
.RS 4
<rev> から到達可能なコミット(つまり <rev> とその祖先)を含めます。
.RE
.PP
\fB^<rev>\fR
.RS 4
<rev> から到達可能なコミット(つまり <rev> とその祖先)を除外します。
.RE
.PP
\fB<rev1>\&.\&.<rev2>\fR
.RS 4
<rev2> から到達可能なコミットを含めますが、 <rev1> から到達可能なコミットは除外します。 <rev1> または <rev2> のいずれかを省略すると、それらはそれぞれデフォルトで
\fBHEAD\fR
になります。
.RE
.PP
\fB<rev1>\&.\&.\&.<rev2>\fR
.RS 4
<rev1> または <rev2> のいずれかから到達可能なコミットを含めますが、両方から到達可能なコミットは除外します。 <rev1> または <rev2> のいずれかを省略すると、それらはそれぞれデフォルトで
\fBHEAD\fR
になります。
.RE
.PP
\fB<rev>^@\fR 例: \fBHEAD^@\fR
.RS 4
接尾辞
\fB^\fR
の後にアットマーク(\fB@\fR)を付けることは、
\fB<rev>\fR
のすべての親をリストすることと同じです(つまり、親から到達可能なものはすべて含まれますが、コミット自体は含まれません)。
.RE
.PP
\fB<rev>^!\fR 例: \fBHEAD^!\fR
.RS 4
接尾辞
\fB^\fR
の後に感嘆符(\fB!\fR)を付けることは、コミット
\fB<rev>\fR
を指定し、そのすべての親の前に
\fB^\fR
を付けてそれら(およびその祖先)を除外することと同じです。
.RE
.PP
\fB<rev>^\-<n>\fR 例: \fBHEAD^\-, HEAD^\-2\fR
.RS 4
\fB<rev>^<n>\&.\&.<rev>\fR
と同等であり、
\fB<n>\fR
が指定されていない場合は
\fB<n>\fR
= 1 です。
.RE
.sp
上記のLoeliger図解を使用したいくつかの例を以下に示します。表記の拡張と選択は、それぞれ段階が分かるようステップを踏んで説明してあります:
.sp
.if n \{\
.RS 4
.\}
.nf
   Args   Expanded arguments    Selected commits
   D                            G H D
   D F                          G H I J D F
   ^G D                         H D
   ^D B                         E I J F B
   ^D B C                       E I J F B C
   C                            I J F C
   B\&.\&.C   = ^B C                C
   B\&.\&.\&.C  = B ^F C              G H D E B C
   B^\-    = B^\&.\&.B
          = ^B^1 B              E I J F B
   C^@    = C^1
          = F                   I J F
   B^@    = B^1 B^2 B^3
          = D E F               D G H E F I J
   C^!    = C ^C^@
          = C ^C^1
          = C ^F                C
   B^!    = B ^B^@
          = B ^B^1 ^B^2 ^B^3
          = B ^D ^E ^F          B
   F^! D  = F ^I ^J D           G H D F
.fi
.if n \{\
.RE
.\}
.SH "SEE ALSO"
.sp
\fBgit-rev-parse\fR(1)
.SH "GIT"
.sp
Part of the \fBgit\fR(1) suite
