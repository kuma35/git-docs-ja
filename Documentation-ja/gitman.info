This is gitman.info, produced by makeinfo version 6.7 from gitman.texi.

INFO-DIR-SECTION Development
START-INFO-DIR-ENTRY
* Git Man Pages: (gitman).  Manual pages for Git revision control system
END-INFO-DIR-ENTRY


File: gitman.info,  Node: Top,  Up: (dir)

Git Manual Pages
****************

* Menu:

* git-add::
* git-am::
* git-annotate::
* git-apply::
* git-archimport::
* git-archive::
* git-bisect::
* git-blame::
* git-branch::
* git-bugreport::
* git-bundle::
* git-cat-file::
* git-check-attr::
* git-check-ignore::
* git-check-mailmap::
* git-check-ref-format::
* git-checkout-index::
* git-checkout::
* git-cherry-pick::
* git-cherry::
* git-citool::
* git-clean::
* git-clone::
* git-column::
* git-commit-graph::
* git-commit-tree::
* git-commit::
* git-config::
* git-count-objects::
* git-credential-cache--daemon::
* git-credential-cache::
* git-credential-store::
* git-credential::
* git-cvsexportcommit::
* git-cvsimport::
* git-cvsserver::
* git-daemon::
* git-describe::
* git-diff-files::
* git-diff-index::
* git-diff-tree::
* git-diff::
* git-difftool::
* git-fast-export::
* git-fast-import::
* git-fetch-pack::
* git-fetch::
* git-filter-branch::
* git-fmt-merge-msg::
* git-for-each-ref::
* git-for-each-repo::
* git-format-patch::
* git-fsck-objects::
* git-fsck::
* git-gc::
* git-get-tar-commit-id::
* git-grep::
* git-gui::
* git-hash-object::
* git-help::
* git-http-backend::
* git-http-fetch::
* git-http-push::
* git-imap-send::
* git-index-pack::
* git-init-db::
* git-init::
* git-instaweb::
* git-interpret-trailers::
* git-log::
* git-ls-files::
* git-ls-remote::
* git-ls-tree::
* git-mailinfo::
* git-mailsplit::
* git-maintenance::
* git-merge-base::
* git-merge-file::
* git-merge-index::
* git-merge-one-file::
* git-merge-tree::
* git-merge::
* git-mergetool--lib::
* git-mergetool::
* git-mktag::
* git-mktree::
* git-multi-pack-index::
* git-mv::
* git-name-rev::
* git-notes::
* git-p4::
* git-pack-objects::
* git-pack-redundant::
* git-pack-refs::
* git-patch-id::
* git-prune-packed::
* git-prune::
* git-pull::
* git-push::
* git-quiltimport::
* git-range-diff::
* git-read-tree::
* git-rebase::
* git-receive-pack::
* git-reflog::
* git-remote-ext::
* git-remote-fd::
* git-remote::
* git-repack::
* git-replace::
* git-request-pull::
* git-rerere::
* git-reset::
* git-restore::
* git-rev-list::
* git-rev-parse::
* git-revert::
* git-rm::
* git-send-email::
* git-send-pack::
* git-sh-i18n--envsubst::
* git-sh-i18n::
* git-sh-setup::
* git-shell::
* git-shortlog::
* git-show-branch::
* git-show-index::
* git-show-ref::
* git-show::
* git-sparse-checkout::
* git-stage::
* git-stash::
* git-status::
* git-stripspace::
* git-submodule::
* git-svn::
* git-switch::
* git-symbolic-ref::
* git-tag::
* git-unpack-file::
* git-unpack-objects::
* git-update-index::
* git-update-ref::
* git-update-server-info::
* git-upload-archive::
* git-upload-pack::
* git-var::
* git-verify-commit::
* git-verify-pack::
* git-verify-tag::
* git-version::
* git-web--browse::
* git-whatchanged::
* git-worktree::
* git-write-tree::
* git::
* gitattributes::
* gitcli::
* gitcore-tutorial::
* gitcredentials::
* gitcvs-migration::
* gitdiffcore::
* giteveryday::
* gitfaq::
* gitglossary::
* githooks::
* gitignore::
* gitk::
* gitmailmap::
* gitmodules::
* gitnamespaces::
* gitremote-helpers::
* gitrepository-layout::
* gitrevisions::
* gitsubmodules::
* gittutorial-2::
* gittutorial::
* gitweb.conf::
* gitweb::
* gitworkflows::


File: gitman.info,  Node: git-add,  Up: Top

Name
****

git-add — Add file contents to the index


Synopsis
********

     git add [–verbose | -v] [–dry-run | -n] [–force | -f] [–interactive | -i] [–patch | -p]
               [–edit | -e] [–[no-]all | –[no-]ignore-removal | [–update | -u]]
               [–intent-to-add | -N] [–refresh] [–ignore-errors] [–ignore-missing] [–renormalize]
               [–chmod=(+|-)x] [–pathspec-from-file=<file> [–pathspec-file-nul]]
               [–] [<pathspec>…]


DESCRIPTION
***********

This command updates the index using the current content found in the
working tree, to prepare the content staged for the next commit.  It
typically adds the current content of existing paths as a whole, but
with some options it can also be used to add content with only part of
the changes made to the working tree files applied, or remove paths that
do not exist in the working tree anymore.

   The "index" holds a snapshot of the content of the working tree, and
it is this snapshot that is taken as the contents of the next commit.
Thus after making any changes to the working tree, and before running
the commit command, you must use the ‘add’ command to add any new or
modified files to the index.

   This command can be performed multiple times before a commit.  It
only adds the content of the specified file(s) at the time the add
command is run; if you want subsequent changes included in the next
commit, then you must run ‘git add’ again to add the new content to the
index.

   The ‘git status’ command can be used to obtain a summary of which
files have changes that are staged for the next commit.

   The ‘git add’ command will not add ignored files by default.  If any
ignored files were explicitly specified on the command line, ‘git add’
will fail with a list of ignored files.  Ignored files reached by
directory recursion or filename globbing performed by Git (quote your
globs before the shell) will be silently ignored.  The _git add_ command
can be used to add ignored files with the ‘-f’ (force) option.

   Please see git-commit(1) for alternative ways to add content to a
commit.


OPTIONS
*******

<pathspec>…
     Files to add content from.  Fileglobs (e.g.  ‘*.c’) can be given to
     add all matching files.  Also a leading directory name (e.g.  ‘dir’
     to add ‘dir/file1’ and ‘dir/file2’) can be given to update the
     index to match the current state of the directory as a whole (e.g.
     specifying ‘dir’ will record not just a file ‘dir/file1’ modified
     in the working tree, a file ‘dir/file2’ added to the working tree,
     but also a file ‘dir/file3’ removed from the working tree).  Note
     that older versions of Git used to ignore removed files; use
     ‘--no-all’ option if you want to add modified or new files but
     ignore removed ones.

     For more details about the <pathspec> syntax, see the _pathspec_
     entry in gitglossary(7).

‘-n’
‘--dry-run’
     Don’t actually add the file(s), just show if they exist and/or will
     be ignored.

‘-v’
‘--verbose’
     Be verbose.

‘-f’
‘--force’
     Allow adding otherwise ignored files.

‘-i’
‘--interactive’
     Add modified contents in the working tree interactively to the
     index.  Optional path arguments may be supplied to limit operation
     to a subset of the working tree.  See “Interactive mode” for
     details.

‘-p’
‘--patch’
     Interactively choose hunks of patch between the index and the work
     tree and add them to the index.  This gives the user a chance to
     review the difference before adding modified contents to the index.

     This effectively runs ‘add --interactive’, but bypasses the initial
     command menu and directly jumps to the ‘patch’ subcommand.  See
     “Interactive mode” for details.

‘-e’
‘--edit’
     Open the diff vs.  the index in an editor and let the user edit it.
     After the editor was closed, adjust the hunk headers and apply the
     patch to the index.

     The intent of this option is to pick and choose lines of the patch
     to apply, or even to modify the contents of lines to be staged.
     This can be quicker and more flexible than using the interactive
     hunk selector.  However, it is easy to confuse oneself and create a
     patch that does not apply to the index.  See EDITING PATCHES below.

‘-u’
‘--update’
     Update the index just where it already has an entry matching
     <pathspec>.  This removes as well as modifies index entries to
     match the working tree, but adds no new files.

     If no <pathspec> is given when ‘-u’ option is used, all tracked
     files in the entire working tree are updated (old versions of Git
     used to limit the update to the current directory and its
     subdirectories).

‘-A’
‘--all’
‘--no-ignore-removal’
     Update the index not only where the working tree has a file
     matching <pathspec> but also where the index already has an entry.
     This adds, modifies, and removes index entries to match the working
     tree.

     If no <pathspec> is given when ‘-A’ option is used, all files in
     the entire working tree are updated (old versions of Git used to
     limit the update to the current directory and its subdirectories).

‘--no-all’
‘--ignore-removal’
     Update the index by adding new files that are unknown to the index
     and files modified in the working tree, but ignore files that have
     been removed from the working tree.  This option is a no-op when no
     <pathspec> is used.

     This option is primarily to help users who are used to older
     versions of Git, whose "git add <pathspec>…" was a synonym for "git
     add –no-all <pathspec>…", i.e.  ignored removed files.

‘-N’
‘--intent-to-add’
     Record only the fact that the path will be added later.  An entry
     for the path is placed in the index with no content.  This is
     useful for, among other things, showing the unstaged content of
     such files with ‘git diff’ and committing them with ‘git commit
     -a’.

‘--refresh’
     Don’t add the file(s), but only refresh their stat() information in
     the index.

‘--ignore-errors’
     If some files could not be added because of errors indexing them,
     do not abort the operation, but continue adding the others.  The
     command shall still exit with non-zero status.  The configuration
     variable ‘add.ignoreErrors’ can be set to true to make this the
     default behaviour.

‘--ignore-missing’
     This option can only be used together with –dry-run.  By using this
     option the user can check if any of the given files would be
     ignored, no matter if they are already present in the work tree or
     not.

‘--no-warn-embedded-repo’
     By default, ‘git add’ will warn when adding an embedded repository
     to the index without using ‘git submodule add’ to create an entry
     in ‘.gitmodules’.  This option will suppress the warning (e.g., if
     you are manually performing operations on submodules).

‘--renormalize’
     Apply the "clean" process freshly to all tracked files to forcibly
     add them again to the index.  This is useful after changing
     ‘core.autocrlf’ configuration or the ‘text’ attribute in order to
     correct files added with wrong CRLF/LF line endings.  This option
     implies ‘-u’.

‘--chmod=(+|-)x’
     Override the executable bit of the added files.  The executable bit
     is only changed in the index, the files on disk are left unchanged.

‘--pathspec-from-file=<file>’
     Pathspec is passed in ‘<file>’ instead of commandline args.  If
     ‘<file>’ is exactly ‘-’ then standard input is used.  Pathspec
     elements are separated by LF or CR/LF. Pathspec elements can be
     quoted as explained for the configuration variable ‘core.quotePath’
     (see git-config(1)).  See also ‘--pathspec-file-nul’ and global
     ‘--literal-pathspecs’.

‘--pathspec-file-nul’
     Only meaningful with ‘--pathspec-from-file’.  Pathspec elements are
     separated with NUL character and all other characters are taken
     literally (including newlines and quotes).

–
     This option can be used to separate command-line options from the
     list of files, (useful when filenames might be mistaken for
     command-line options).


EXAMPLES
********

   • Adds content from all ‘*.txt’ files under ‘Documentation’ directory
     and its subdirectories:

          $ git add Documentation/\*.txt

     Note that the asterisk ‘*’ is quoted from the shell in this
     example; this lets the command include the files from
     subdirectories of ‘Documentation/’ directory.

   • Considers adding content from all git-*.sh scripts:

          $ git add git-*.sh

     Because this example lets the shell expand the asterisk (i.e.  you
     are listing the files explicitly), it does not consider
     ‘subdir/git-foo.sh’.


INTERACTIVE MODE
****************

When the command enters the interactive mode, it shows the output of the
_status_ subcommand, and then goes into its interactive command loop.

   The command loop shows the list of subcommands available, and gives a
prompt "What now> ".  In general, when the prompt ends with a single
_>_, you can pick only one of the choices given and type return, like
this:

         *** Commands ***
           1: status       2: update       3: revert       4: add untracked
           5: patch        6: diff         7: quit         8: help
         What now> 1

   You also could say ‘s’ or ‘sta’ or ‘status’ above as long as the
choice is unique.

   The main command loop has 6 subcommands (plus help and quit).

status
     This shows the change between HEAD and index (i.e.  what will be
     committed if you say ‘git commit’), and between index and working
     tree files (i.e.  what you could stage further before ‘git commit’
     using ‘git add’) for each path.  A sample output looks like this:

                        staged     unstaged path
               1:       binary      nothing foo.png
               2:     +403/-35        +1/-1 git-add--interactive.perl

     It shows that foo.png has differences from HEAD (but that is binary
     so line count cannot be shown) and there is no difference between
     indexed copy and the working tree version (if the working tree
     version were also different, _binary_ would have been shown in
     place of _nothing_).  The other file, git-add–interactive.perl, has
     403 lines added and 35 lines deleted if you commit what is in the
     index, but working tree file has further modifications (one
     addition and one deletion).

update
     This shows the status information and issues an "Update>>" prompt.
     When the prompt ends with double _>>_, you can make more than one
     selection, concatenated with whitespace or comma.  Also you can say
     ranges.  E.g.  "2-5 7,9" to choose 2,3,4,5,7,9 from the list.  If
     the second number in a range is omitted, all remaining patches are
     taken.  E.g.  "7-" to choose 7,8,9 from the list.  You can say _*_
     to choose everything.

     What you chose are then highlighted with _*_, like this:

                     staged     unstaged path
            1:       binary      nothing foo.png
          * 2:     +403/-35        +1/-1 git-add--interactive.perl

     To remove selection, prefix the input with ‘-’ like this:

          Update>> -2

     After making the selection, answer with an empty line to stage the
     contents of working tree files for selected paths in the index.

revert
     This has a very similar UI to _update_, and the staged information
     for selected paths are reverted to that of the HEAD version.
     Reverting new paths makes them untracked.

add untracked
     This has a very similar UI to _update_ and _revert_, and lets you
     add untracked paths to the index.

patch
     This lets you choose one path out of a _status_ like selection.
     After choosing the path, it presents the diff between the index and
     the working tree file and asks you if you want to stage the change
     of each hunk.  You can select one of the following options and type
     return:

          y - stage this hunk
          n - do not stage this hunk
          q - quit; do not stage this hunk or any of the remaining ones
          a - stage this hunk and all later hunks in the file
          d - do not stage this hunk or any of the later hunks in the file
          g - select a hunk to go to
          / - search for a hunk matching the given regex
          j - leave this hunk undecided, see next undecided hunk
          J - leave this hunk undecided, see next hunk
          k - leave this hunk undecided, see previous undecided hunk
          K - leave this hunk undecided, see previous hunk
          s - split the current hunk into smaller hunks
          e - manually edit the current hunk
          ? - print help

     After deciding the fate for all hunks, if there is any hunk that
     was chosen, the index is updated with the selected hunks.

     You can omit having to type return here, by setting the
     configuration variable ‘interactive.singleKey’ to ‘true’.

diff
     This lets you review what will be committed (i.e.  between HEAD and
     index).


EDITING PATCHES
***************

Invoking ‘git add -e’ or selecting ‘e’ from the interactive hunk
selector will open a patch in your editor; after the editor exits, the
result is applied to the index.  You are free to make arbitrary changes
to the patch, but note that some changes may have confusing results, or
even result in a patch that cannot be applied.  If you want to abort the
operation entirely (i.e., stage nothing new in the index), simply delete
all lines of the patch.  The list below describes some common things you
may see in a patch, and which editing operations make sense on them.

added content
     Added content is represented by lines beginning with "+".  You can
     prevent staging any addition lines by deleting them.

removed content
     Removed content is represented by lines beginning with "-".  You
     can prevent staging their removal by converting the "-" to a " "
     (space).

modified content
     Modified content is represented by "-" lines (removing the old
     content) followed by "+" lines (adding the replacement content).
     You can prevent staging the modification by converting "-" lines to
     " ", and removing "+" lines.  Beware that modifying only half of
     the pair is likely to introduce confusing changes to the index.

   There are also more complex operations that can be performed.  But
beware that because the patch is applied only to the index and not the
working tree, the working tree will appear to "undo" the change in the
index.  For example, introducing a new line into the index that is in
neither the HEAD nor the working tree will stage the new line for
commit, but the line will appear to be reverted in the working tree.

   Avoid using these constructs, or do so with extreme caution.

removing untouched content
     Content which does not differ between the index and working tree
     may be shown on context lines, beginning with a " " (space).  You
     can stage context lines for removal by converting the space to a
     "-".  The resulting working tree file will appear to re-add the
     content.

modifying existing content
     One can also modify context lines by staging them for removal (by
     converting " " to "-") and adding a "+" line with the new content.
     Similarly, one can modify "+" lines for existing additions or
     modifications.  In all cases, the new modification will appear
     reverted in the working tree.

new content
     You may also add new content that does not exist in the patch;
     simply add new lines, each starting with "+".  The addition will
     appear reverted in the working tree.

   There are also several operations which should be avoided entirely,
as they will make the patch impossible to apply:

   • adding context (" ") or removal ("-") lines

   • deleting context or removal lines

   • modifying the contents of context or removal lines


SEE ALSO
********

git-status(1) git-rm(1) git-reset(1) git-mv(1) git-commit(1)
git-update-index(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-am,  Up: Top

Name
****

git-am — Apply a series of patches from a mailbox


Synopsis
********

     git am [–signoff] [–keep] [–[no-]keep-cr] [–[no-]utf8]
              [–[no-]3way] [–interactive] [–committer-date-is-author-date]
              [–ignore-date] [–ignore-space-change | –ignore-whitespace]
              [–whitespace=<option>] [-C<n>] [-p<n>] [–directory=<dir>]
              [–exclude=<path>] [–include=<path>] [–reject] [-q | –quiet]
              [–[no-]scissors] [-S[<keyid>]] [–patch-format=<format>]
              [–quoted-cr=<action>]
              [(<mbox> | <Maildir>)…]
     git am (–continue | –skip | –abort | –quit | –show-current-patch[=(diff|raw)])


DESCRIPTION
***********

Splits mail messages in a mailbox into commit log message, authorship
information and patches, and applies them to the current branch.


OPTIONS
*******

(<mbox>|<Maildir>)…
     The list of mailbox files to read patches from.  If you do not
     supply this argument, the command reads from the standard input.
     If you supply directories, they will be treated as Maildirs.

‘-s’
‘--signoff’
     Add a ‘Signed-off-by’ trailer to the commit message, using the
     committer identity of yourself.  See the signoff option in
     git-commit(1) for more information.

‘-k’
‘--keep’
     Pass ‘-k’ flag to _git mailinfo_ (see git-mailinfo(1)).

‘--keep-non-patch’
     Pass ‘-b’ flag to _git mailinfo_ (see git-mailinfo(1)).

‘--[no-]keep-cr’
     With ‘--keep-cr’, call _git mailsplit_ (see git-mailsplit(1)) with
     the same option, to prevent it from stripping CR at the end of
     lines.  ‘am.keepcr’ configuration variable can be used to specify
     the default behaviour.  ‘--no-keep-cr’ is useful to override
     ‘am.keepcr’.

‘-c’
‘--scissors’
     Remove everything in body before a scissors line (see
     git-mailinfo(1)).  Can be activated by default using the
     ‘mailinfo.scissors’ configuration variable.

‘--no-scissors’
     Ignore scissors lines (see git-mailinfo(1)).

‘--quoted-cr=<action>’
     This flag will be passed down to _git mailinfo_ (see
     git-mailinfo(1)).

‘-m’
‘--message-id’
     Pass the ‘-m’ flag to _git mailinfo_ (see git-mailinfo(1)), so that
     the Message-ID header is added to the commit message.  The
     ‘am.messageid’ configuration variable can be used to specify the
     default behaviour.

‘--no-message-id’
     Do not add the Message-ID header to the commit message.
     ‘no-message-id’ is useful to override ‘am.messageid’.

‘-q’
‘--quiet’
     Be quiet.  Only print error messages.

‘-u’
‘--utf8’
     Pass ‘-u’ flag to _git mailinfo_ (see git-mailinfo(1)).  The
     proposed commit log message taken from the e-mail is re-coded into
     UTF-8 encoding (configuration variable ‘i18n.commitEncoding’ can be
     used to specify project’s preferred encoding if it is not UTF-8).

     This was optional in prior versions of git, but now it is the
     default.  You can use ‘--no-utf8’ to override this.

‘--no-utf8’
     Pass ‘-n’ flag to _git mailinfo_ (see git-mailinfo(1)).

‘-3’
‘--3way’
‘--no-3way’
     When the patch does not apply cleanly, fall back on 3-way merge if
     the patch records the identity of blobs it is supposed to apply to
     and we have those blobs available locally.  ‘--no-3way’ can be used
     to override am.threeWay configuration variable.  For more
     information, see am.threeWay in git-config(1).

‘--rerere-autoupdate’
‘--no-rerere-autoupdate’
     Allow the rerere mechanism to update the index with the result of
     auto-conflict resolution if possible.

‘--ignore-space-change’
‘--ignore-whitespace’
‘--whitespace=<option>’
‘-C<n>’
‘-p<n>’
‘--directory=<dir>’
‘--exclude=<path>’
‘--include=<path>’
‘--reject’
     These flags are passed to the _git apply_ (see git-apply(1))
     program that applies the patch.

‘--patch-format’
     By default the command will try to detect the patch format
     automatically.  This option allows the user to bypass the automatic
     detection and specify the patch format that the patch(es) should be
     interpreted as.  Valid formats are mbox, mboxrd, stgit,
     stgit-series and hg.

‘-i’
‘--interactive’
     Run interactively.

‘--committer-date-is-author-date’
     By default the command records the date from the e-mail message as
     the commit author date, and uses the time of commit creation as the
     committer date.  This allows the user to lie about the committer
     date by using the same value as the author date.

‘--ignore-date’
     By default the command records the date from the e-mail message as
     the commit author date, and uses the time of commit creation as the
     committer date.  This allows the user to lie about the author date
     by using the same value as the committer date.

‘--skip’
     Skip the current patch.  This is only meaningful when restarting an
     aborted patch.

‘-S[<keyid>]’
‘--gpg-sign[=<keyid>]’
‘--no-gpg-sign’
     GPG-sign commits.  The ‘keyid’ argument is optional and defaults to
     the committer identity; if specified, it must be stuck to the
     option without a space.  ‘--no-gpg-sign’ is useful to countermand
     both ‘commit.gpgSign’ configuration variable, and earlier
     ‘--gpg-sign’.

‘--continue’
‘-r’
‘--resolved’
     After a patch failure (e.g.  attempting to apply conflicting
     patch), the user has applied it by hand and the index file stores
     the result of the application.  Make a commit using the authorship
     and commit log extracted from the e-mail message and the current
     index file, and continue.

‘--resolvemsg=<msg>’
     When a patch failure occurs, <msg> will be printed to the screen
     before exiting.  This overrides the standard message informing you
     to use ‘--continue’ or ‘--skip’ to handle the failure.  This is
     solely for internal use between _git rebase_ and _git am_.

‘--abort’
     Restore the original branch and abort the patching operation.
     Revert contents of files involved in the am operation to their
     pre-am state.

‘--quit’
     Abort the patching operation but keep HEAD and the index untouched.

‘--show-current-patch[=(diff|raw)]’
     Show the message at which ‘git am’ has stopped due to conflicts.
     If ‘raw’ is specified, show the raw contents of the e-mail message;
     if ‘diff’, show the diff portion only.  Defaults to ‘raw’.


DISCUSSION
**********

The commit author name is taken from the "From: " line of the message,
and commit author date is taken from the "Date: " line of the message.
The "Subject: " line is used as the title of the commit, after stripping
common prefix "[PATCH <anything>]".  The "Subject: " line is supposed to
concisely describe what the commit is about in one line of text.

   "From: ", "Date: ", and "Subject: " lines starting the body override
the respective commit author name and title values taken from the
headers.

   The commit message is formed by the title taken from the "Subject: ",
a blank line and the body of the message up to where the patch begins.
Excess whitespace at the end of each line is automatically stripped.

   The patch is expected to be inline, directly following the message.
Any line that is of the form:

   • three-dashes and end-of-line, or

   • a line that begins with "diff -", or

   • a line that begins with "Index: "

   is taken as the beginning of a patch, and the commit log message is
terminated before the first occurrence of such a line.

   When initially invoking ‘git am’, you give it the names of the
mailboxes to process.  Upon seeing the first patch that does not apply,
it aborts in the middle.  You can recover from this in one of two ways:

  1. skip the current patch by re-running the command with the ‘--skip’
     option.

  2. hand resolve the conflict in the working directory, and update the
     index file to bring it into a state that the patch should have
     produced.  Then run the command with the ‘--continue’ option.

   The command refuses to process new mailboxes until the current
operation is finished, so if you decide to start over from scratch, run
‘git am --abort’ before running the command with mailbox names.

   Before any patches are applied, ORIG_HEAD is set to the tip of the
current branch.  This is useful if you have problems with multiple
commits, like running _git am_ on the wrong branch or an error in the
commits that is more easily fixed by changing the mailbox (e.g.  errors
in the "From:" lines).


HOOKS
*****

This command can run ‘applypatch-msg’, ‘pre-applypatch’, and
‘post-applypatch’ hooks.  See githooks(5) for more information.


SEE ALSO
********

git-apply(1).


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-annotate,  Up: Top

Name
****

git-annotate — 指定ファイルの各行のコミット情報を表示


Synopsis
********

     git annotate [<options>] <file> [<revision>]


DESCRIPTION
***********

指定されたファイルの各行に、その行を導入したコミットからの情報で注釈を付
けます。オプションで、特定のリビジョンから注釈を付けます。

   このコマンドと git-blame(1) の唯一の違いは、わずかに異なる出力形式を
使用することです。このコマンドは、既存のスクリプトをサポートするための下
位互換性のためにのみ存在し、他のSCMシステムから来た人々により馴染みのあ
るコマンド名を提供します。


OPTIONS
*******

‘-b’
     境界コミットでは空白のSHA-1を表示します。これは、
     ‘blame.blankBoundary’ 構成オプションを介して制御することもできます
     。

‘--root’
     ルートコミットを境界として扱わないでください。 これは、
     ‘blame.showRoot’ 構成オプションを介して制御することもできます。

‘--show-stats’
     blameの出力の最後に追加の統計を含めます。

‘-L <start>,<end>’
‘-L :<funcname>’
     _<start>,<end>_ で指定の行範囲のみ、または正規表現関数名
     _<funcname>_ で指定の行範囲のみに注釈を付けます。複数回指定できます
     。範囲が重複するのは許されます。

     _<start>_ と _<end>_ はオプションです。 ‘-L <start>’ または ‘-L
     <start>,’ は _<start>_ からファイルの終わりまでの範囲です。 ‘-L
     ,<end>’ は、ファイルの先頭から _<end>_ までの範囲です。

     _<start>_ と _<end>_ は、以下のいずれかの形式です:

        • number

          _<start>_ または _<end>_ が数値の場合、絶対行番号を指定します
          (行は1から数えます)。

        • ‘/regex/’

          この形式は、指定されたPOSIX正規表現に一致する最初の行を使用し
          ます。 _<start>_ が正規表現の場合、前の ‘-L’ 範囲の末尾から検
          索します。それ以外の場合は、ファイルの先頭から検索します。
          _<start>_ が ‘^/regex/’ の場合、ファイルの先頭から検索します。
          _<end>_ が正規表現の場合、 _<start>_ で指定された行から検索開
          始します。

        • +offset or -offset

          これは <end> に対してのみ有効であり、 <start> で指定された行の
          前後の行数を指定します。

     _<start>_ および _<end>_ の代わりに ‘:<funcname>’ が指定されている
     場合、これは _<funcname>_ に一致する最初の関数名行から次の関数名行
     までの範囲を示す正規表現です。 ‘:<funcname>’ は、前の ‘-L’ 範囲の末
     尾から検索します。それ以外の場合は、ファイルの先頭から検索します。
     ‘^:<funcname>’ はファイルの先頭から検索します。関数名は、 ‘git
     diff’ がパッチハンクヘッダーを処理するのと同じ方法で決定されます
     (gitattributes(5) の _Defining a custom hunk-header_ 参照)。

‘-l’
     長いレビジョンを表示します(デフォルト: off)。

‘-t’
     生のタイムスタンプを表示します(デフフォルト: off)。

‘-S <revs-file>’
     git-rev-list(1) を呼び出す代わりに、revs-fileのリビジョンを使用しま
     す。

‘--reverse <rev>..<rev>’
     履歴を後方へではなく前方へウォークします。行があらわれたされたリビ
     ジョンを表示する代わりに、行が存在した最後のリビジョンを表示します
     。これには、START..END のように、STARTにblameのパスが存在するレビジ
     ョン範囲が必要です。 便宜上、 ‘git blame --reverse START’ は ‘git
     blame --reverse START..HEAD’ と見なされます。

‘--first-parent’
     マージコミットを確認したら、最初の親コミットのみを追跡します。 この
     オプションは、履歴全体にいつ導入されたかではなく、特定の統合ブラン
     チにいつ導入されたかを判別するために使用できます。

‘-p’
‘--porcelain’
     ソフトウェア等で使用するのに適した形式で表示します。

‘--line-porcelain’
     磁器形式で表示しますが、コミットが最初に参照されたときだけでなく、
     各行のコミット情報を出力します。 –porcelain の機能を含んでいます。

‘--incremental’
     ソフトウェア等で使用するのに適した形式で結果を段階的
     (incrementally)に表示します。

‘--encoding=<encoding>’
     作者名(author names)の出力と要約のコミットに使用されるエンコーディ
     ングを指定します。 これを ‘none’ に設定すると、blame出力は変換され
     ていないデータになります。詳細については、 git-log(1) のマニュアル
     ページにある discussion の encoding に関する説明を参照してください
     。

‘--contents <file>’
     <rev> が指定されていない場合、コマンドは作業ツリーのコピーから逆方
     向に開始して変更に注釈を付けます。このフラグにより、コマンドは、作
     業ツリーのコピーに、指定されたファイルの内容が含まれているように見
     せかけます(コマンドを標準入力から読み取るには、 ‘-’ を指定します)。

‘--date <format>’
     日付の出力に使用される形式を指定します。 –date が指定されていない場
     合、blame.date 構成変数の値が使用されます。 blame.date 構成変数も設
     定されていない場合は、 iso形式が使用されます。サポートされている値
     については、 git-log(1) の –date オプションの説明を参照してください
     。

‘--[no-]progress’
     進行状況は、端末に接続されている場合、デフォルトで標準エラーストリ
     ームに報告されます。このフラグは、端末に接続されていない場合でも進
     行状況のレポートを有効にします。 ‘--progress’ を ‘--porcelain’ また
     は ‘--incremental’ と一緒に使用することはできません。

‘-M[<num>]’
     ファイル内の移動またはコピーされた行を検出します。コミットが行のブ
     ロックを移動またはコピーすると(たとえば、元のファイルにA、次にBがあ
     り、コミットによってB、次にAに変更される)、従来の「blame」アルゴリ
     ズムは移動の半分だけに気づき、通常は行をblameします それは親に上に
     移動され(つまりB)、子のコミットに下に移動された(つまりA)行にblameを
     割り当てます。このオプションを使用すると、追加の検査パスを実行する
     ことにより、両方のグループの行が親のせいになります。

     <num> はオプションですが、Gitがそれらの行を親コミットに関連付けるた
     めにファイル内で移動/コピーとして検出する必要がある英数字の数
     (number of alphanumeric characters)の下限です。デフォルト値は20です
     。

‘-C[<num>]’
     ‘-M’ に加えて、同じコミットで変更された他のファイルから移動またはコ
     ピーされた行を検出します。これは、プログラムを再編成し、ファイル間
     でコードを移動するときに役立ちます。このオプションを2回指定すると、
     コマンドは、ファイルを作成するコミットで他のファイルからのコピーを
     追加で検索します。このオプションを3回指定すると、コマンドはコミット
     で他のファイルからのコピーを追加で検索します。

     <num> はオプションですが、Gitがそれらの行を親コミットに関連付けるた
     めにファイル間の移動/コピーとして検出する必要がある英数字の数
     (number of alphanumeric characters)の下限です。また、デフォルト値は
     40です。複数の ‘-C’ オプションが指定されている場合、最後の ‘-C’ の
     <num> 引数が有効になります。

‘--ignore-rev <rev>’
     変更が発生しなかったかのように、blameを割り当てるときにリビジョンに
     よって行われた変更を無視します。無視されたコミットによって変更また
     は追加された行は、その行または近くの行を変更した前のコミットのせい
     になります。このオプションは、複数のリビジョンを無視するために複数
     回指定できます。 ‘blame.markIgnoredLines’ 構成オプションが設定され
     ている場合、無視されたコミットによって変更され、別のコミットに起因
     する行は、blame出力で ‘?’ でマークされます。
     ‘blame.markUnblamableLines’ 構成オプションが設定されている場合、別
     のリビジョンに帰することができなかった無視されたコミットによって触
     れられた行は、 _*_ でマークされます。

‘--ignore-revs-file <file>’
     ‘file’ にリストされているリビジョンを無視します。これは
     ‘fsck.skipList’ と同じ形式である必要があります。このオプションは繰
     り返すことができ、これらのファイルは、 ‘blame.ignoreRevsFile’ 構成
     オプションで指定されたファイルの後に処理されます。空のファイル名
     ‘""’ は、以前に処理されたファイルからrevsのリストをクリアします。

‘-h’
     ヘルプメッセージを表示する。


SEE ALSO
********

git-blame(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-apply,  Up: Top

Name
****

git-apply — Apply a patch to files and/or to the index


Synopsis
********

     git apply [–stat] [–numstat] [–summary] [–check] [–index | –intent-to-add] [–3way]
               [–apply] [–no-add] [–build-fake-ancestor=<file>] [-R | –reverse]
               [–allow-binary-replacement | –binary] [–reject] [-z]
               [-p<n>] [-C<n>] [–inaccurate-eof] [–recount] [–cached]
               [–ignore-space-change | –ignore-whitespace]
               [–whitespace=(nowarn|warn|fix|error|error-all)]
               [–exclude=<path>] [–include=<path>] [–directory=<root>]
               [–verbose] [–unsafe-paths] [<patch>…]


DESCRIPTION
***********

Reads the supplied diff output (i.e.  "a patch") and applies it to
files.  When running from a subdirectory in a repository, patched paths
outside the directory are ignored.  With the ‘--index’ option the patch
is also applied to the index, and with the ‘--cached’ option the patch
is only applied to the index.  Without these options, the command
applies the patch only to files, and does not require them to be in a
Git repository.

   This command applies the patch but does not create a commit.  Use
git-am(1) to create commits from patches generated by
git-format-patch(1) and/or received by email.


OPTIONS
*******

<patch>…
     The files to read the patch from.  _-_ can be used to read from the
     standard input.

‘--stat’
     Instead of applying the patch, output diffstat for the input.
     Turns off "apply".

‘--numstat’
     Similar to ‘--stat’, but shows the number of added and deleted
     lines in decimal notation and the pathname without abbreviation, to
     make it more machine friendly.  For binary files, outputs two ‘-’
     instead of saying ‘0 0’.  Turns off "apply".

‘--summary’
     Instead of applying the patch, output a condensed summary of
     information obtained from git diff extended headers, such as
     creations, renames and mode changes.  Turns off "apply".

‘--check’
     Instead of applying the patch, see if the patch is applicable to
     the current working tree and/or the index file and detects errors.
     Turns off "apply".

‘--index’
     Apply the patch to both the index and the working tree (or merely
     check that it would apply cleanly to both if ‘--check’ is in
     effect).  Note that ‘--index’ expects index entries and working
     tree copies for relevant paths to be identical (their contents and
     metadata such as file mode must match), and will raise an error if
     they are not, even if the patch would apply cleanly to both the
     index and the working tree in isolation.

‘--cached’
     Apply the patch to just the index, without touching the working
     tree.  If ‘--check’ is in effect, merely check that it would apply
     cleanly to the index entry.

‘--intent-to-add’
     When applying the patch only to the working tree, mark new files to
     be added to the index later (see ‘--intent-to-add’ option in
     git-add(1)).  This option is ignored unless running in a Git
     repository and ‘--index’ is not specified.  Note that ‘--index’
     could be implied by other options such as ‘--cached’ or ‘--3way’.

‘-3’
‘--3way’
     Attempt 3-way merge if the patch records the identity of blobs it
     is supposed to apply to and we have those blobs available locally,
     possibly leaving the conflict markers in the files in the working
     tree for the user to resolve.  This option implies the ‘--index’
     option unless the ‘--cached’ option is used, and is incompatible
     with the ‘--reject’ option.  When used with the ‘--cached’ option,
     any conflicts are left at higher stages in the cache.

‘--build-fake-ancestor=<file>’
     Newer _git diff_ output has embedded _index information_ for each
     blob to help identify the original version that the patch applies
     to.  When this flag is given, and if the original versions of the
     blobs are available locally, builds a temporary index containing
     those blobs.

     When a pure mode change is encountered (which has no index
     information), the information is read from the current index
     instead.

‘-R’
‘--reverse’
     Apply the patch in reverse.

‘--reject’
     For atomicity, _git apply_ by default fails the whole patch and
     does not touch the working tree when some of the hunks do not
     apply.  This option makes it apply the parts of the patch that are
     applicable, and leave the rejected hunks in corresponding *.rej
     files.

‘-z’
     When ‘--numstat’ has been given, do not munge pathnames, but use a
     NUL-terminated machine-readable format.

     Without this option, pathnames with "unusual" characters are quoted
     as explained for the configuration variable ‘core.quotePath’ (see
     git-config(1)).

‘-p<n>’
     Remove <n> leading path components (separated by slashes) from
     traditional diff paths.  E.g., with ‘-p2’, a patch against
     ‘a/dir/file’ will be applied directly to ‘file’.  The default is 1.

‘-C<n>’
     Ensure at least <n> lines of surrounding context match before and
     after each change.  When fewer lines of surrounding context exist
     they all must match.  By default no context is ever ignored.

‘--unidiff-zero’
     By default, _git apply_ expects that the patch being applied is a
     unified diff with at least one line of context.  This provides good
     safety measures, but breaks down when applying a diff generated
     with ‘--unified=0’.  To bypass these checks use ‘--unidiff-zero’.

     Note, for the reasons stated above usage of context-free patches is
     discouraged.

‘--apply’
     If you use any of the options marked "Turns off _apply_" above,
     _git apply_ reads and outputs the requested information without
     actually applying the patch.  Give this flag after those flags to
     also apply the patch.

‘--no-add’
     When applying a patch, ignore additions made by the patch.  This
     can be used to extract the common part between two files by first
     running _diff_ on them and applying the result with this option,
     which would apply the deletion part but not the addition part.

‘--allow-binary-replacement’
‘--binary’
     Historically we did not allow binary patch applied without an
     explicit permission from the user, and this flag was the way to do
     so.  Currently we always allow binary patch application, so this is
     a no-op.

‘--exclude=<path-pattern>’
     Don’t apply changes to files matching the given path pattern.  This
     can be useful when importing patchsets, where you want to exclude
     certain files or directories.

‘--include=<path-pattern>’
     Apply changes to files matching the given path pattern.  This can
     be useful when importing patchsets, where you want to include
     certain files or directories.

     When ‘--exclude’ and ‘--include’ patterns are used, they are
     examined in the order they appear on the command line, and the
     first match determines if a patch to each path is used.  A patch to
     a path that does not match any include/exclude pattern is used by
     default if there is no include pattern on the command line, and
     ignored if there is any include pattern.

‘--ignore-space-change’
‘--ignore-whitespace’
     When applying a patch, ignore changes in whitespace in context
     lines if necessary.  Context lines will preserve their whitespace,
     and they will not undergo whitespace fixing regardless of the value
     of the ‘--whitespace’ option.  New lines will still be fixed,
     though.

‘--whitespace=<action>’
     When applying a patch, detect a new or modified line that has
     whitespace errors.  What are considered whitespace errors is
     controlled by ‘core.whitespace’ configuration.  By default,
     trailing whitespaces (including lines that solely consist of
     whitespaces) and a space character that is immediately followed by
     a tab character inside the initial indent of the line are
     considered whitespace errors.

     By default, the command outputs warning messages but applies the
     patch.  When ‘git-apply’ is used for statistics and not applying a
     patch, it defaults to ‘nowarn’.

     You can use different ‘<action>’ values to control this behavior:

        • ‘nowarn’ turns off the trailing whitespace warning.

        • ‘warn’ outputs warnings for a few such errors, but applies the
          patch as-is (default).

        • ‘fix’ outputs warnings for a few such errors, and applies the
          patch after fixing them (‘strip’ is a synonym — the tool used
          to consider only trailing whitespace characters as errors, and
          the fix involved _stripping_ them, but modern Gits do more).

        • ‘error’ outputs warnings for a few such errors, and refuses to
          apply the patch.

        • ‘error-all’ is similar to ‘error’ but shows all errors.

‘--inaccurate-eof’
     Under certain circumstances, some versions of _diff_ do not
     correctly detect a missing new-line at the end of the file.  As a
     result, patches created by such _diff_ programs do not record
     incomplete lines correctly.  This option adds support for applying
     such patches by working around this bug.

‘-v’
‘--verbose’
     Report progress to stderr.  By default, only a message about the
     current patch being applied will be printed.  This option will
     cause additional information to be reported.

‘--recount’
     Do not trust the line counts in the hunk headers, but infer them by
     inspecting the patch (e.g.  after editing the patch without
     adjusting the hunk headers appropriately).

‘--directory=<root>’
     Prepend <root> to all filenames.  If a "-p" argument was also
     passed, it is applied before prepending the new root.

     For example, a patch that talks about updating ‘a/git-gui.sh’ to
     ‘b/git-gui.sh’ can be applied to the file in the working tree
     ‘modules/git-gui/git-gui.sh’ by running ‘git apply
     --directory=modules/git-gui’.

‘--unsafe-paths’
     By default, a patch that affects outside the working area (either a
     Git controlled working tree, or the current working directory when
     "git apply" is used as a replacement of GNU patch) is rejected as a
     mistake (or a mischief).

     When ‘git apply’ is used as a "better GNU patch", the user can pass
     the ‘--unsafe-paths’ option to override this safety check.  This
     option has no effect when ‘--index’ or ‘--cached’ is in use.


CONFIGURATION
*************

apply.ignoreWhitespace
     Set to _change_ if you want changes in whitespace to be ignored by
     default.  Set to one of: no, none, never, false if you want changes
     in whitespace to be significant.

apply.whitespace
     When no ‘--whitespace’ flag is given from the command line, this
     configuration item is used as the default.


SUBMODULES
**********

If the patch contains any changes to submodules then _git apply_ treats
these changes as follows.

   If ‘--index’ is specified (explicitly or implicitly), then the
submodule commits must match the index exactly for the patch to apply.
If any of the submodules are checked-out, then these check-outs are
completely ignored, i.e., they are not required to be up to date or
clean and they are not updated.

   If ‘--index’ is not specified, then the submodule commits in the
patch are ignored and only the absence or presence of the corresponding
subdirectory is checked and (if possible) updated.


SEE ALSO
********

git-am(1).


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-archimport,  Up: Top

Name
****

git-archimport — GNU Arch リポジトリをGitにインポートします


Synopsis
********

     git archimport [-h] [-v] [-o] [-a] [-f] [-T] [-D depth] [-t tempdir]
                    <archive/branch>[:<git-branch>] …


DESCRIPTION
***********

1つ以上の GNU Arch リポジトリからプロジェクトをインポートします。これは
、提供された <archive/branch> パラメーターによって定義された名前空間内の
ブランチとリポジトリに従います。リモートブランチが見つからない場合は、マ
ージ元から通常のコミットとしてインポートされます。見つかった場合は、可能
な限りマージとしてマークします(以下の説明を参照)。

   スクリプトは、 _initial import_ または _tag_ 型のArchコミットからイン
ポートを開始できるキールート(key root)を提供することを想定しています。提
供されたルート(root)内の新しいブランチを追跡してインポートします。

   1つのプロジェクトのみを扱うことを想定しています。ルート(root)が異なる
ブランチを検出した場合、実行を拒否します。その場合は、 <archive/branch>
パラメータを編集して、インポートの範囲を明確に定義します。

   _git archimport_ は、バックグラウンドで ‘tla’ を広範囲に使用して、
Archリポジトリにアクセスします。パス上に利用可能な ‘tla’ の最新バージョ
ンがあることを確認してください。 ‘tla’ は、 _git archimport_ に渡すリポ
ジトリについて知っている必要があります。

   最初のインポートでは、 _git archimport_ は空のディレクトリに自分自身
を見つけることをf期待しています。 Archを使用するプロジェクトの開発を追跡
するには、最初のインポートと同じパラメーターを使用して「git archimport」
を再実行し、増分インポートを実行します。

   _git archimport_ は、インポートするアーカイブに適切なブランチ名を作成
しようとしますが、Gitブランチ名を手動で指定することもできます。これを行
うには、各 <archive/branch> パラメーターの後にコロン(‘:’)で区切ってGitブ
ランチ名を記述します。このようにして、Archブランチ名を短縮し、Arch専門用
語をGit専門用語に変換できます。たとえば、「PROJECT–devo–VERSION」ブラン
チを「master」にマッピングします。

   複数のArchブランチを1つのGitブランチに関連付けることができます。 結果
は、2番目のブランチが作成された後、最初のブランチに対してコミットが行わ
れない場合にのみ最も意味があります。それでも、これは定期的にローテーショ
ンされたArchリポジトリを変換するのに役立ちます。


MERGES
******

Archからのパッチマージデータは、Gitでのマージをマークするためにも使用さ
れます。 Gitはパッチの追跡についてはあまり気にせず、分岐した時点以降、ブ
ランチにすべてのコミットが組み込まれている場合にのみマージを考慮します。
最終的な結果として、Gitはブランチがどこまで分岐したかを把握できます。し
たがって、インポートプロセスでは、パッチ取引のメタデータが失われます。

   幸い、Archからインポートされたブランチをマージしようとすると、Gitは適
切なマージベースを見つけ、ブランチ間で順番どおりにトレードされていないパ
ッチを特定できる可能性が高くなります。


OPTIONS
*******

‘-h’
     使い方表示。

‘-v’
     詳細な出力。

‘-T’
     多くのタグ。Archリポジトリのコミット名を反映して、すべてのコミット
     にタグを作成します。

‘-f’
     高速パッチセットインポート戦略(fast patchset import strategy)を使用
     します。これは、大きなツリーでは大幅に高速化できますが、ディレクト
     リの名前変更やアクセス許可の変更を処理できません。デフォルトの戦略
     は遅いけど安全(slow and safe)です。

‘-o’
     これは、以前のバージョンの「git archimport」で使用されていた古いス
     タイルのブランチ名との互換性のために使用します。古いスタイルのブラ
     ンチ名は category–branch でしたが、新しいスタイルのブランチ名は
     category–branch–version です。 どちらの場合も、コマンドラインで指定
     された名前が自動生成された名前を上書きします。

‘-D <depth>’
     マージの祖先に従い、マージされたツリーのインポートを試みます。パッ
     チログが剪定されている場合は、1より大きい深さを指定します。

‘-a’
     ‘http://mirrors.sourcecontrol.net’ でアーカイブを自動登録してみてく
     ださい。これは、 ‘-D’ オプションを使用すると特に便利です。

‘-t <tmpdir>’
     デフォルトのtempdirをオーバーライドします。

<archive/branch>
     ‘tla log’ が理解できる形式の archive/branch ID。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-archive,  Up: Top

Name
****

git-archive — 名前付きツリーからファイルのアーカイブを作成します


Synopsis
********

     git archive [–format=<fmt>] [–list] [–prefix=<prefix>/] [<extra>]
                   [-o <file> | –output=<file>] [–worktree-attributes]
                   [–remote=<repo> [–exec=<git-upload-archive>]] <tree-ish>
                   [<path>…]


DESCRIPTION
***********

名前付きツリーのツリー構造を含む指定された形式のアーカイブを作成し、それ
を標準出力に書き込みます。 <prefix> が指定されている場合、アーカイブ内の
ファイル名の前に追加されます。

   「git archive」は、ツリーIDを指定した場合と、コミットIDまたはタグIDを
指定した場合の動作が異なります。ツリーIDを指定した場合は、現在の時刻がア
ーカイブ内の各ファイルの変更時刻として使用されます。コミットIDまたはタグ
IDを指定した場合、参照されたコミットオブジェクトに記録されたコミット時間
が代わりに使用されます。さらに、tar形式が使用されている場合、コミット
IDはグローバル拡張paxヘッダー(global extended pax header)に格納されます
。 ‘git get-tar-commit-id’ を使用して抽出できます。ZIPファイルでは、ファ
イルコメントとして保存されます。


OPTIONS
*******

‘--format=<fmt>’
     結果のアーカイブの形式を指定します。「tar」または「zip」です。 この
     オプションが指定されておらず、出力ファイルが指定されている場合、可
     能であればファイル名から形式が推測されます(たとえば、「foo.zip」に
     書き込むと、出力はzip形式になります)。それ以外の場合、出力形式は
     ‘tar’ です。

‘-l’
‘--list’
     有効なすべての形式を表示します。

‘-v’
‘--verbose’
     進捗状況をstderrに報告します。

‘--prefix=<prefix>/’
     アーカイブ内の各ファイル名の前に <prefix>/ を付けます。

‘-o <file>’
‘--output=<file>’
     アーカイブをstdoutではなく<file>に書き込みます。

‘--add-file=<file>’
     追跡されていないファイルをアーカイブに追加します。繰り返すことで複
     数のファイルを追加する事ができます。アーカイブ内のファイルのパスは
     、 ‘--prefix’ の値(存在する場合) と<file>のベース名を連結することに
     よって作成されます。

‘--worktree-attributes’
     作業ツリーの .gitattributes ファイルでも属性を探します( *note
     ATTRIBUTES:: 参照)。

<extra>
     これは、アーカイババックエンドが理解できる任意のオプションです。次
     のセクションを参照してください。

‘--remote=<repo>’
     ローカルリポジトリからtarアーカイブを作成する代わりに、リモートリポ
     ジトリからtarアーカイブを取得します。リモートリポジトリは、
     ‘<tree-ish>’ で許可されるsha1式に制限を課す場合があることに注意して
     ください。詳細については、 git-upload-archive(1) を参照してください
     。

‘--exec=<git-upload-archive>’
     ‘--remote’ とともに使用して、リモート側の「git-upload-archive」への
     パスを指定します。

<tree-ish>
     アーカイブを作成するためのツリーまたはコミット。

<path>
     オプションのパスパラメータがない場合、現在の作業ディレクトリのすべ
     てのファイルとサブディレクトリがアーカイブに含まれます。1つ以上のパ
     スが指定されている場合、それらのみが含まれます。


BACKEND EXTRA OPTIONS
*********************


zip
===

‘-0’
     ファイルを圧縮せずに保存します。

‘-9’
     最も高圧縮かつ最も遅い圧縮レベル。あなたは1〜9までの任意の整数を指
     定して、圧縮速度と比率を調整できます。


CONFIGURATION
*************

tar.umask
     この変数は、tarアーカイブエントリの許可ビットを制限するために使用で
     きます。 デフォルトは 0002 で、ワールド書き込みビットをオフにします
     。特別な値「user」は、代わりにアーカイブユーザーのumaskが使用される
     ことを示します。詳細については、 umask(2) を参照してください。
     ‘--remote’ が使用されている場合、リモートリポジトリの設定のみが有効
     になります。

tar.<format>.command
     この変数は、 ‘git archive’ によって生成されたtar出力をパイプするシ
     ェルコマンドを指定します。コマンドは、標準入力から生成されたtarファ
     イル取り込み、シェルを使用して実行され、標準出力に最終出力を生成す
     る必要があります。圧縮レベルのオプションはすべてコマンドに渡されま
     す(例: ‘-9’ )。他の形式が指定されていない場合、出力ファイルの拡張子
     が ‘<format>’ と同じ場合にこの形式を使用します。

     「tar.gz」および「tgz」形式は自動的に定義され、デフォルトで「gzip
     -cn」になります。 カスタムコマンドでそれらを上書きすることができま
     す。

tar.<format>.remote
     trueの場合、 git-upload-archive(1) を介してリモートクライアントで使
     用できるように ‘<format>’ を有効にします。 ユーザー定義形式の場合、
     デフォルトはfalseですが、「tar.gz」および「tgz」形式の場合はtrueで
     す。


ATTRIBUTES
**********

export-ignore
     属性export-ignoreを持つファイルとディレクトリは、アーカイブファイル
     に追加されません。 詳細については、 gitattributes(5) を参照してくだ
     さい。

export-subst
     属性export-substがファイルに設定されている場合、Gitはこのファイルを
     アーカイブに追加するときにいくつかのプレースホルダーを展開します。
     詳細については、 gitattributes(5) を参照してください。

   注意: デフォルトでは、属性はアーカイブされているツリーの
‘.gitattributes’ ファイルから取得されることに注意してください。事後に出
力が生成される方法を微調整したい場合(たとえば、 ‘.gitattributes’ に適切
な export-ignore を追加せずにコミットした場合)、必要に応じてチェックアウ
トされた ‘.gitattributes’ ファイルを調整して ‘--worktree-attributes’ オ
プションを使用します。 または、 ‘$GIT_DIR/info/attributes’ ファイルに、
ツリーをアーカイブするときに適用する必要のある属性を保持することもできま
す。


EXAMPLES
********

‘git archive --format=tar --prefix=junk/ HEAD | (cd /var/tmp/ && tar xf -)’
     現在のブランチの最新のコミットの内容を含むtarアーカイブを作成し、そ
     れを ‘/var/tmp/junk’ ディレクトリに抽出します。

‘git archive --format=tar --prefix=git-1.4.0/ v1.4.0 | gzip >git-1.4.0.tar.gz’
     これは、 v1.4.0リリース用の圧縮tarballを作成します。

‘git archive --format=tar.gz --prefix=git-1.4.0/ v1.4.0 >git-1.4.0.tar.gz’
     これは、上記と同じですが、組み込みのtar.gz処理を使用します。

‘git archive --prefix=git-1.4.0/ -o git-1.4.0.tar.gz v1.4.0’
     これは上記と同じですが、形式は出力ファイル名から推測されます。

‘git archive --format=tar --prefix=git-1.4.0/ v1.4.0^{tree} | gzip >git-1.4.0.tar.gz’
     v1.4.0リリース用の圧縮tarballを作成しますが、グローバル拡張paxヘッ
     ダー(global extended pax header)はありません。

‘git archive --format=zip --prefix=git-docs/ HEAD:Documentation/ > git-1.4.0-docs.zip’
     現在のヘッド のDocumentation/ ディレクトリにあるすべてのものを「
     git-1.4.0-docs.zip」にプレフィックス「git-docs/」を付けて配置します
     。

‘git archive -o latest.zip HEAD’
     現在のブランチの最新のコミットの内容を含むZipアーカイブを作成します
     。出力形式は、出力ファイルの拡張子によって推測されることに注意して
     ください。

‘git config tar.tar.xz.command "xz -c"’
     LZMA圧縮tarファイルを作成するための「tar.xz」形式を構成します。
     ‘--format=tar.xz’ を指定するか、 ‘-o foo.tar.xz’ のような出力ファイ
     ルを作成することで使用できます。


SEE ALSO
********

gitattributes(5)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-bisect,  Up: Top

Name
****

git-bisect — Use binary search to find the commit that introduced a bug


Synopsis
********

     git bisect <subcommand> <options>


DESCRIPTION
***********

The command takes various subcommands, and different options depending
on the subcommand:

     git bisect start [--term-{new,bad}=<term> --term-{old,good}=<term>]
                      [--no-checkout] [--first-parent] [<bad> [<good>...]] [--] [<paths>...]
     git bisect (bad|new|<term-new>) [<rev>]
     git bisect (good|old|<term-old>) [<rev>...]
     git bisect terms [--term-good | --term-bad]
     git bisect skip [(<rev>|<range>)...]
     git bisect reset [<commit>]
     git bisect (visualize|view)
     git bisect replay <logfile>
     git bisect log
     git bisect run <cmd>...
     git bisect help

   This command uses a binary search algorithm to find which commit in
your project’s history introduced a bug.  You use it by first telling it
a "bad" commit that is known to contain the bug, and a "good" commit
that is known to be before the bug was introduced.  Then ‘git bisect’
picks a commit between those two endpoints and asks you whether the
selected commit is "good" or "bad".  It continues narrowing down the
range until it finds the exact commit that introduced the change.

   In fact, ‘git bisect’ can be used to find the commit that changed
*any* property of your project; e.g., the commit that fixed a bug, or
the commit that caused a benchmark’s performance to improve.  To support
this more general usage, the terms "old" and "new" can be used in place
of "good" and "bad", or you can choose your own terms.  See section
"Alternate terms" below for more information.


Basic bisect commands: start, bad, good
=======================================

As an example, suppose you are trying to find the commit that broke a
feature that was known to work in version ‘v2.6.13-rc2’ of your project.
You start a bisect session as follows:

     $ git bisect start
     $ git bisect bad                 # Current version is bad
     $ git bisect good v2.6.13-rc2    # v2.6.13-rc2 is known to be good

   Once you have specified at least one bad and one good commit, ‘git
bisect’ selects a commit in the middle of that range of history, checks
it out, and outputs something similar to the following:

     Bisecting: 675 revisions left to test after this (roughly 10 steps)

   You should now compile the checked-out version and test it.  If that
version works correctly, type

     $ git bisect good

   If that version is broken, type

     $ git bisect bad

   Then ‘git bisect’ will respond with something like

     Bisecting: 337 revisions left to test after this (roughly 9 steps)

   Keep repeating the process: compile the tree, test it, and depending
on whether it is good or bad run ‘git bisect good’ or ‘git bisect bad’
to ask for the next commit that needs testing.

   Eventually there will be no more revisions left to inspect, and the
command will print out a description of the first bad commit.  The
reference ‘refs/bisect/bad’ will be left pointing at that commit.


Bisect reset
============

After a bisect session, to clean up the bisection state and return to
the original HEAD, issue the following command:

     $ git bisect reset

   By default, this will return your tree to the commit that was checked
out before ‘git bisect start’.  (A new ‘git bisect start’ will also do
that, as it cleans up the old bisection state.)

   With an optional argument, you can return to a different commit
instead:

     $ git bisect reset <commit>

   For example, ‘git bisect reset bisect/bad’ will check out the first
bad revision, while ‘git bisect reset HEAD’ will leave you on the
current bisection commit and avoid switching commits at all.


Alternate terms
===============

Sometimes you are not looking for the commit that introduced a breakage,
but rather for a commit that caused a change between some other "old"
state and "new" state.  For example, you might be looking for the commit
that introduced a particular fix.  Or you might be looking for the first
commit in which the source-code filenames were finally all converted to
your company’s naming standard.  Or whatever.

   In such cases it can be very confusing to use the terms "good" and
"bad" to refer to "the state before the change" and "the state after the
change".  So instead, you can use the terms "old" and "new",
respectively, in place of "good" and "bad".  (But note that you cannot
mix "good" and "bad" with "old" and "new" in a single session.)

   In this more general usage, you provide ‘git bisect’ with a "new"
commit that has some property and an "old" commit that doesn’t have that
property.  Each time ‘git bisect’ checks out a commit, you test if that
commit has the property.  If it does, mark the commit as "new";
otherwise, mark it as "old".  When the bisection is done, ‘git bisect’
will report which commit introduced the property.

   To use "old" and "new" instead of "good" and bad, you must run ‘git
bisect start’ without commits as argument and then run the following
commands to add the commits:

     git bisect old [<rev>]

   to indicate that a commit was before the sought change, or

     git bisect new [<rev>...]

   to indicate that it was after.

   To get a reminder of the currently used terms, use

     git bisect terms

   You can get just the old (respectively new) term with ‘git bisect
terms --term-old’ or ‘git bisect terms --term-good’.

   If you would like to use your own terms instead of "bad"/"good" or
"new"/"old", you can choose any names you like (except existing bisect
subcommands like ‘reset’, ‘start’, …) by starting the bisection using

     git bisect start --term-old <term-old> --term-new <term-new>

   For example, if you are looking for a commit that introduced a
performance regression, you might use

     git bisect start --term-old fast --term-new slow

   Or if you are looking for the commit that fixed a bug, you might use

     git bisect start --term-new fixed --term-old broken

   Then, use ‘git bisect <term-old>’ and ‘git bisect <term-new>’ instead
of ‘git bisect good’ and ‘git bisect bad’ to mark commits.


Bisect visualize/view
=====================

To see the currently remaining suspects in _gitk_, issue the following
command during the bisection process (the subcommand ‘view’ can be used
as an alternative to ‘visualize’):

     $ git bisect visualize

   If the ‘DISPLAY’ environment variable is not set, _git log_ is used
instead.  You can also give command-line options such as ‘-p’ and
‘--stat’.

     $ git bisect visualize --stat


Bisect log and bisect replay
============================

After having marked revisions as good or bad, issue the following
command to show what has been done so far:

     $ git bisect log

   If you discover that you made a mistake in specifying the status of a
revision, you can save the output of this command to a file, edit it to
remove the incorrect entries, and then issue the following commands to
return to a corrected state:

     $ git bisect reset
     $ git bisect replay that-file


Avoiding testing a commit
=========================

If, in the middle of a bisect session, you know that the suggested
revision is not a good one to test (e.g.  it fails to build and you know
that the failure does not have anything to do with the bug you are
chasing), you can manually select a nearby commit and test that one
instead.

   For example:

     $ git bisect good/bad                   # previous round was good or bad.
     Bisecting: 337 revisions left to test after this (roughly 9 steps)
     $ git bisect visualize                  # oops, that is uninteresting.
     $ git reset --hard HEAD~3               # try 3 revisions before what
                                             # was suggested

   Then compile and test the chosen revision, and afterwards mark the
revision as good or bad in the usual manner.


Bisect skip
===========

Instead of choosing a nearby commit by yourself, you can ask Git to do
it for you by issuing the command:

     $ git bisect skip                 # Current version cannot be tested

   However, if you skip a commit adjacent to the one you are looking
for, Git will be unable to tell exactly which of those commits was the
first bad one.

   You can also skip a range of commits, instead of just one commit,
using range notation.  For example:

     $ git bisect skip v2.5..v2.6

   This tells the bisect process that no commit after ‘v2.5’, up to and
including ‘v2.6’, should be tested.

   Note that if you also want to skip the first commit of the range you
would issue the command:

     $ git bisect skip v2.5 v2.5..v2.6

   This tells the bisect process that the commits between ‘v2.5’ and
‘v2.6’ (inclusive) should be skipped.


Cutting down bisection by giving more parameters to bisect start
================================================================

You can further cut down the number of trials, if you know what part of
the tree is involved in the problem you are tracking down, by specifying
path parameters when issuing the ‘bisect start’ command:

     $ git bisect start -- arch/i386 include/asm-i386

   If you know beforehand more than one good commit, you can narrow the
bisect space down by specifying all of the good commits immediately
after the bad commit when issuing the ‘bisect start’ command:

     $ git bisect start v2.6.20-rc6 v2.6.20-rc4 v2.6.20-rc1 --
                        # v2.6.20-rc6 is bad
                        # v2.6.20-rc4 and v2.6.20-rc1 are good


Bisect run
==========

If you have a script that can tell if the current source code is good or
bad, you can bisect by issuing the command:

     $ git bisect run my_script arguments

   Note that the script (‘my_script’ in the above example) should exit
with code 0 if the current source code is good/old, and exit with a code
between 1 and 127 (inclusive), except 125, if the current source code is
bad/new.

   Any other exit code will abort the bisect process.  It should be
noted that a program that terminates via ‘exit(-1)’ leaves $?  = 255,
(see the exit(3) manual page), as the value is chopped with ‘& 0377’.

   The special exit code 125 should be used when the current source code
cannot be tested.  If the script exits with this code, the current
revision will be skipped (see ‘git bisect skip’ above).  125 was chosen
as the highest sensible value to use for this purpose, because 126 and
127 are used by POSIX shells to signal specific error status (127 is for
command not found, 126 is for command found but not executable—these
details do not matter, as they are normal errors in the script, as far
as ‘bisect run’ is concerned).

   You may often find that during a bisect session you want to have
temporary modifications (e.g.  s/#define DEBUG 0/#define DEBUG 1/ in a
header file, or "revision that does not have this commit needs this
patch applied to work around another problem this bisection is not
interested in") applied to the revision being tested.

   To cope with such a situation, after the inner _git bisect_ finds the
next revision to test, the script can apply the patch before compiling,
run the real test, and afterwards decide if the revision (possibly with
the needed patch) passed the test and then rewind the tree to the
pristine state.  Finally the script should exit with the status of the
real test to let the ‘git bisect run’ command loop determine the
eventual outcome of the bisect session.


OPTIONS
*******

‘--no-checkout’
     Do not checkout the new working tree at each iteration of the
     bisection process.  Instead just update a special reference named
     ‘BISECT_HEAD’ to make it point to the commit that should be tested.

     This option may be useful when the test you would perform in each
     step does not require a checked out tree.

     If the repository is bare, ‘--no-checkout’ is assumed.

‘--first-parent’
     Follow only the first parent commit upon seeing a merge commit.

     In detecting regressions introduced through the merging of a
     branch, the merge commit will be identified as introduction of the
     bug and its ancestors will be ignored.

     This option is particularly useful in avoiding false positives when
     a merged branch contained broken or non-buildable commits, but the
     merge itself was OK.


EXAMPLES
********

   • Automatically bisect a broken build between v1.2 and HEAD:

          $ git bisect start HEAD v1.2 --      # HEAD is bad, v1.2 is good
          $ git bisect run make                # "make" builds the app
          $ git bisect reset                   # quit the bisect session

   • Automatically bisect a test failure between origin and HEAD:

          $ git bisect start HEAD origin --    # HEAD is bad, origin is good
          $ git bisect run make test           # "make test" builds and tests
          $ git bisect reset                   # quit the bisect session

   • Automatically bisect a broken test case:

          $ cat ~/test.sh
          #!/bin/sh
          make || exit 125                     # this skips broken builds
          ~/check_test_case.sh                 # does the test case pass?
          $ git bisect start HEAD HEAD~10 --   # culprit is among the last 10
          $ git bisect run ~/test.sh
          $ git bisect reset                   # quit the bisect session

     Here we use a ‘test.sh’ custom script.  In this script, if ‘make’
     fails, we skip the current commit.  ‘check_test_case.sh’ should
     ‘exit 0’ if the test case passes, and ‘exit 1’ otherwise.

     It is safer if both ‘test.sh’ and ‘check_test_case.sh’ are outside
     the repository to prevent interactions between the bisect, make and
     test processes and the scripts.

   • Automatically bisect with temporary modifications (hot-fix):

          $ cat ~/test.sh
          #!/bin/sh

          # tweak the working tree by merging the hot-fix branch
          # and then attempt a build
          if      git merge --no-commit --no-ff hot-fix &&
                  make
          then
                  # run project specific test and report its status
                  ~/check_test_case.sh
                  status=$?
          else
                  # tell the caller this is untestable
                  status=125
          fi

          # undo the tweak to allow clean flipping to the next commit
          git reset --hard

          # return control
          exit $status

     This applies modifications from a hot-fix branch before each test
     run, e.g.  in case your build or test environment changed so that
     older revisions may need a fix which newer ones have already.
     (Make sure the hot-fix branch is based off a commit which is
     contained in all revisions which you are bisecting, so that the
     merge does not pull in too much, or use ‘git cherry-pick’ instead
     of ‘git merge’.)

   • Automatically bisect a broken test case:

          $ git bisect start HEAD HEAD~10 --   # culprit is among the last 10
          $ git bisect run sh -c "make || exit 125; ~/check_test_case.sh"
          $ git bisect reset                   # quit the bisect session

     This shows that you can do without a run script if you write the
     test on a single line.

   • Locate a good region of the object graph in a damaged repository

          $ git bisect start HEAD <known-good-commit> [ <boundary-commit> ... ] --no-checkout
          $ git bisect run sh -c '
                  GOOD=$(git for-each-ref "--format=%(objectname)" refs/bisect/good-*) &&
                  git rev-list --objects BISECT_HEAD --not $GOOD >tmp.$$ &&
                  git pack-objects --stdout >/dev/null <tmp.$$
                  rc=$?
                  rm -f tmp.$$
                  test $rc = 0'

          $ git bisect reset                   # quit the bisect session

     In this case, when _git bisect run_ finishes, bisect/bad will refer
     to a commit that has at least one parent whose reachable graph is
     fully traversable in the sense required by _git pack objects_.

   • Look for a fix instead of a regression in the code

          $ git bisect start
          $ git bisect new HEAD    # current commit is marked as new
          $ git bisect old HEAD~10 # the tenth commit from now is marked as old

     or:

     $ git bisect start --term-old broken --term-new fixed
     $ git bisect fixed
     $ git bisect broken HEAD~10


Getting help
============

Use ‘git bisect’ to get a short usage description, and ‘git bisect help’
or ‘git bisect -h’ to get a long usage description.


SEE ALSO
********

Fighting regressions with git bisect (git-bisect-lk2009.html),
git-blame(1).


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-blame,  Up: Top

Name
****

git-blame — Show what revision and author last modified each line of a
file


Synopsis
********

     git blame [-c] [-b] [-l] [–root] [-t] [-f] [-n] [-s] [-e] [-p] [-w] [–incremental]
                 [-L <range>] [-S <revs-file>] [-M] [-C] [-C] [-C] [–since=<date>]
                 [–ignore-rev <rev>] [–ignore-revs-file <file>]
                 [–progress] [–abbrev=<n>] [<rev> | –contents <file> | –reverse <rev>..<rev>]
                 [–] <file>


DESCRIPTION
***********

Annotates each line in the given file with information from the revision
which last modified the line.  Optionally, start annotating from the
given revision.

   When specified one or more times, ‘-L’ restricts annotation to the
requested lines.

   The origin of lines is automatically followed across whole-file
renames (currently there is no option to turn the rename-following off).
To follow lines moved from one file to another, or to follow lines that
were copied and pasted from another file, etc., see the ‘-C’ and ‘-M’
options.

   The report does not tell you anything about lines which have been
deleted or replaced; you need to use a tool such as _git diff_ or the
"pickaxe" interface briefly mentioned in the following paragraph.

   Apart from supporting file annotation, Git also supports searching
the development history for when a code snippet occurred in a change.
This makes it possible to track when a code snippet was added to a file,
moved or copied between files, and eventually deleted or replaced.  It
works by searching for a text string in the diff.  A small example of
the pickaxe interface that searches for ‘blame_usage’:

     $ git log --pretty=oneline -S'blame_usage'
     5040f17eba15504bad66b14a645bddd9b015ebb7 blame -S <ancestry-file>
     ea4c7f9bf69e781dd0cd88d2bccb2bf5cc15c9a7 git-blame: Make the output


OPTIONS
*******

‘-b’
     境界コミットでは空白のSHA-1を表示します。これは、
     ‘blame.blankBoundary’ 構成オプションを介して制御することもできます
     。

‘--root’
     ルートコミットを境界として扱わないでください。 これは、
     ‘blame.showRoot’ 構成オプションを介して制御することもできます。

‘--show-stats’
     blameの出力の最後に追加の統計を含めます。

‘-L <start>,<end>’
‘-L :<funcname>’
     _<start>,<end>_ で指定の行範囲のみ、または正規表現関数名
     _<funcname>_ で指定の行範囲のみに注釈を付けます。複数回指定できます
     。範囲が重複するのは許されます。

     _<start>_ と _<end>_ はオプションです。 ‘-L <start>’ または ‘-L
     <start>,’ は _<start>_ からファイルの終わりまでの範囲です。 ‘-L
     ,<end>’ は、ファイルの先頭から _<end>_ までの範囲です。

     _<start>_ と _<end>_ は、以下のいずれかの形式です:

        • number

          _<start>_ または _<end>_ が数値の場合、絶対行番号を指定します
          (行は1から数えます)。

        • ‘/regex/’

          この形式は、指定されたPOSIX正規表現に一致する最初の行を使用し
          ます。 _<start>_ が正規表現の場合、前の ‘-L’ 範囲の末尾から検
          索します。それ以外の場合は、ファイルの先頭から検索します。
          _<start>_ が ‘^/regex/’ の場合、ファイルの先頭から検索します。
          _<end>_ が正規表現の場合、 _<start>_ で指定された行から検索開
          始します。

        • +offset or -offset

          これは <end> に対してのみ有効であり、 <start> で指定された行の
          前後の行数を指定します。

     _<start>_ および _<end>_ の代わりに ‘:<funcname>’ が指定されている
     場合、これは _<funcname>_ に一致する最初の関数名行から次の関数名行
     までの範囲を示す正規表現です。 ‘:<funcname>’ は、前の ‘-L’ 範囲の末
     尾から検索します。それ以外の場合は、ファイルの先頭から検索します。
     ‘^:<funcname>’ はファイルの先頭から検索します。関数名は、 ‘git
     diff’ がパッチハンクヘッダーを処理するのと同じ方法で決定されます
     (gitattributes(5) の _Defining a custom hunk-header_ 参照)。

‘-l’
     長いレビジョンを表示します(デフォルト: off)。

‘-t’
     生のタイムスタンプを表示します(デフフォルト: off)。

‘-S <revs-file>’
     git-rev-list(1) を呼び出す代わりに、revs-fileのリビジョンを使用しま
     す。

‘--reverse <rev>..<rev>’
     履歴を後方へではなく前方へウォークします。行があらわれたされたリビ
     ジョンを表示する代わりに、行が存在した最後のリビジョンを表示します
     。これには、START..END のように、STARTにblameのパスが存在するレビジ
     ョン範囲が必要です。 便宜上、 ‘git blame --reverse START’ は ‘git
     blame --reverse START..HEAD’ と見なされます。

‘--first-parent’
     マージコミットを確認したら、最初の親コミットのみを追跡します。 この
     オプションは、履歴全体にいつ導入されたかではなく、特定の統合ブラン
     チにいつ導入されたかを判別するために使用できます。

‘-p’
‘--porcelain’
     ソフトウェア等で使用するのに適した形式で表示します。

‘--line-porcelain’
     磁器形式で表示しますが、コミットが最初に参照されたときだけでなく、
     各行のコミット情報を出力します。 –porcelain の機能を含んでいます。

‘--incremental’
     ソフトウェア等で使用するのに適した形式で結果を段階的
     (incrementally)に表示します。

‘--encoding=<encoding>’
     作者名(author names)の出力と要約のコミットに使用されるエンコーディ
     ングを指定します。 これを ‘none’ に設定すると、blame出力は変換され
     ていないデータになります。詳細については、 git-log(1) のマニュアル
     ページにある discussion の encoding に関する説明を参照してください
     。

‘--contents <file>’
     <rev> が指定されていない場合、コマンドは作業ツリーのコピーから逆方
     向に開始して変更に注釈を付けます。このフラグにより、コマンドは、作
     業ツリーのコピーに、指定されたファイルの内容が含まれているように見
     せかけます(コマンドを標準入力から読み取るには、 ‘-’ を指定します)。

‘--date <format>’
     日付の出力に使用される形式を指定します。 –date が指定されていない場
     合、blame.date 構成変数の値が使用されます。 blame.date 構成変数も設
     定されていない場合は、 iso形式が使用されます。サポートされている値
     については、 git-log(1) の –date オプションの説明を参照してください
     。

‘--[no-]progress’
     進行状況は、端末に接続されている場合、デフォルトで標準エラーストリ
     ームに報告されます。このフラグは、端末に接続されていない場合でも進
     行状況のレポートを有効にします。 ‘--progress’ を ‘--porcelain’ また
     は ‘--incremental’ と一緒に使用することはできません。

‘-M[<num>]’
     ファイル内の移動またはコピーされた行を検出します。コミットが行のブ
     ロックを移動またはコピーすると(たとえば、元のファイルにA、次にBがあ
     り、コミットによってB、次にAに変更される)、従来の「blame」アルゴリ
     ズムは移動の半分だけに気づき、通常は行をblameします それは親に上に
     移動され(つまりB)、子のコミットに下に移動された(つまりA)行にblameを
     割り当てます。このオプションを使用すると、追加の検査パスを実行する
     ことにより、両方のグループの行が親のせいになります。

     <num> はオプションですが、Gitがそれらの行を親コミットに関連付けるた
     めにファイル内で移動/コピーとして検出する必要がある英数字の数
     (number of alphanumeric characters)の下限です。デフォルト値は20です
     。

‘-C[<num>]’
     ‘-M’ に加えて、同じコミットで変更された他のファイルから移動またはコ
     ピーされた行を検出します。これは、プログラムを再編成し、ファイル間
     でコードを移動するときに役立ちます。このオプションを2回指定すると、
     コマンドは、ファイルを作成するコミットで他のファイルからのコピーを
     追加で検索します。このオプションを3回指定すると、コマンドはコミット
     で他のファイルからのコピーを追加で検索します。

     <num> はオプションですが、Gitがそれらの行を親コミットに関連付けるた
     めにファイル間の移動/コピーとして検出する必要がある英数字の数
     (number of alphanumeric characters)の下限です。また、デフォルト値は
     40です。複数の ‘-C’ オプションが指定されている場合、最後の ‘-C’ の
     <num> 引数が有効になります。

‘--ignore-rev <rev>’
     変更が発生しなかったかのように、blameを割り当てるときにリビジョンに
     よって行われた変更を無視します。無視されたコミットによって変更また
     は追加された行は、その行または近くの行を変更した前のコミットのせい
     になります。このオプションは、複数のリビジョンを無視するために複数
     回指定できます。 ‘blame.markIgnoredLines’ 構成オプションが設定され
     ている場合、無視されたコミットによって変更され、別のコミットに起因
     する行は、blame出力で ‘?’ でマークされます。
     ‘blame.markUnblamableLines’ 構成オプションが設定されている場合、別
     のリビジョンに帰することができなかった無視されたコミットによって触
     れられた行は、 _*_ でマークされます。

‘--ignore-revs-file <file>’
     ‘file’ にリストされているリビジョンを無視します。これは
     ‘fsck.skipList’ と同じ形式である必要があります。このオプションは繰
     り返すことができ、これらのファイルは、 ‘blame.ignoreRevsFile’ 構成
     オプションで指定されたファイルの後に処理されます。空のファイル名
     ‘""’ は、以前に処理されたファイルからrevsのリストをクリアします。

‘-h’
     ヘルプメッセージを表示する。

‘-c’
     Use the same output mode as git-annotate(1) (Default: off).

‘--score-debug’
     Include debugging information related to the movement of lines
     between files (see ‘-C’) and lines moved within a file (see ‘-M’).
     The first number listed is the score.  This is the number of
     alphanumeric characters detected as having been moved between or
     within files.  This must be above a certain threshold for _git
     blame_ to consider those lines of code to have been moved.

‘-f’
‘--show-name’
     Show the filename in the original commit.  By default the filename
     is shown if there is any line that came from a file with a
     different name, due to rename detection.

‘-n’
‘--show-number’
     Show the line number in the original commit (Default: off).

‘-s’
     Suppress the author name and timestamp from the output.

‘-e’
‘--show-email’
     Show the author email instead of author name (Default: off).  This
     can also be controlled via the ‘blame.showEmail’ config option.

‘-w’
     Ignore whitespace when comparing the parent’s version and the
     child’s to find where the lines came from.

‘--abbrev=<n>’
     Instead of using the default 7+1 hexadecimal digits as the
     abbreviated object name, use <m>+1 digits, where <m> is at least
     <n> but ensures the commit object names are unique.  Note that 1
     column is used for a caret to mark the boundary commit.


THE PORCELAIN FORMAT
********************

In this format, each line is output after a header; the header at the
minimum has the first line which has:

   • 40-byte SHA-1 of the commit the line is attributed to;

   • the line number of the line in the original file;

   • the line number of the line in the final file;

   • on a line that starts a group of lines from a different commit than
     the previous one, the number of lines in this group.  On subsequent
     lines this field is absent.

   This header line is followed by the following information at least
once for each commit:

   • the author name ("author"), email ("author-mail"), time
     ("author-time"), and time zone ("author-tz"); similarly for
     committer.

   • the filename in the commit that the line is attributed to.

   • the first line of the commit log message ("summary").

   The contents of the actual line is output after the above header,
prefixed by a TAB. This is to allow adding more header elements later.

   The porcelain format generally suppresses commit information that has
already been seen.  For example, two lines that are blamed to the same
commit will both be shown, but the details for that commit will be shown
only once.  This is more efficient, but may require more state be kept
by the reader.  The ‘--line-porcelain’ option can be used to output full
commit information for each line, allowing simpler (but less efficient)
usage like:

     # count the number of lines attributed to each author
     git blame --line-porcelain file |
     sed -n 's/^author //p' |
     sort | uniq -c | sort -rn


SPECIFYING RANGES
*****************

Unlike _git blame_ and _git annotate_ in older versions of git, the
extent of the annotation can be limited to both line ranges and revision
ranges.  The ‘-L’ option, which limits annotation to a range of lines,
may be specified multiple times.

   When you are interested in finding the origin for lines 40-60 for
file ‘foo’, you can use the ‘-L’ option like so (they mean the same
thing — both ask for 21 lines starting at line 40):

     git blame -L 40,60 foo
     git blame -L 40,+21 foo

   Also you can use a regular expression to specify the line range:

     git blame -L '/^sub hello {/,/^}$/' foo

   which limits the annotation to the body of the ‘hello’ subroutine.

   When you are not interested in changes older than version v2.6.18, or
changes older than 3 weeks, you can use revision range specifiers
similar to _git rev-list_:

     git blame v2.6.18.. -- foo
     git blame --since=3.weeks -- foo

   When revision range specifiers are used to limit the annotation,
lines that have not changed since the range boundary (either the commit
v2.6.18 or the most recent commit that is more than 3 weeks old in the
above example) are blamed for that range boundary commit.

   A particularly useful way is to see if an added file has lines
created by copy-and-paste from existing files.  Sometimes this indicates
that the developer was being sloppy and did not refactor the code
properly.  You can first find the commit that introduced the file with:

     git log --diff-filter=A --pretty=short -- foo

   and then annotate the change between the commit and its parents,
using ‘commit^!’ notation:

     git blame -C -C -f $commit^! -- foo


INCREMENTAL OUTPUT
******************

When called with ‘--incremental’ option, the command outputs the result
as it is built.  The output generally will talk about lines touched by
more recent commits first (i.e.  the lines will be annotated out of
order) and is meant to be used by interactive viewers.

   The output format is similar to the Porcelain format, but it does not
contain the actual lines from the file that is being annotated.

  1. Each blame entry always starts with a line of:

          <40-byte hex sha1> <sourceline> <resultline> <num_lines>

     Line numbers count from 1.

  2. The first time that a commit shows up in the stream, it has various
     other information about it printed out with a one-word tag at the
     beginning of each line describing the extra commit information
     (author, email, committer, dates, summary, etc.).

  3. Unlike the Porcelain format, the filename information is always
     given and terminates the entry:

          "filename" <whitespace-quoted-filename-goes-here>

     and thus it is really quite easy to parse for some line- and
     word-oriented parser (which should be quite natural for most
     scripting languages).

          *Note*

          For people who do parsing: to make it more robust, just ignore
          any lines between the first and last one ("<sha1>" and
          "filename" lines) where you do not recognize the tag words (or
          care about that particular one) at the beginning of the
          "extended information" lines.  That way, if there is ever
          added information (like the commit encoding or extended commit
          commentary), a blame viewer will not care.


MAPPING AUTHORS
***************

See gitmailmap(5).


SEE ALSO
********

git-annotate(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-branch,  Up: Top

Name
****

git-branch — List, create, or delete branches


Synopsis
********

     git branch [–color[=<when>] | –no-color] [–show-current]
             [-v [–abbrev=<n> | –no-abbrev]]
             [–column[=<options>] | –no-column] [–sort=<key>]
             [–merged [<commit>]] [–no-merged [<commit>]]
             [–contains [<commit>]] [–no-contains [<commit>]]
             [–points-at <object>] [–format=<format>]
             [(-r | –remotes) | (-a | –all)]
             [–list] [<pattern>…]
     git branch [–track | –no-track] [-f] <branchname> [<start-point>]
     git branch (–set-upstream-to=<upstream> | -u <upstream>) [<branchname>]
     git branch –unset-upstream [<branchname>]
     git branch (-m | -M) [<oldbranch>] <newbranch>
     git branch (-c | -C) [<oldbranch>] <newbranch>
     git branch (-d | -D) [-r] <branchname>…
     git branch –edit-description [<branchname>]


DESCRIPTION
***********

If ‘--list’ is given, or if there are no non-option arguments, existing
branches are listed; the current branch will be highlighted in green and
marked with an asterisk.  Any branches checked out in linked worktrees
will be highlighted in cyan and marked with a plus sign.  Option ‘-r’
causes the remote-tracking branches to be listed, and option ‘-a’ shows
both local and remote branches.

   If a ‘<pattern>’ is given, it is used as a shell wildcard to restrict
the output to matching branches.  If multiple patterns are given, a
branch is shown if it matches any of the patterns.

   Note that when providing a ‘<pattern>’, you must use ‘--list’;
otherwise the command may be interpreted as branch creation.

   With ‘--contains’, shows only the branches that contain the named
commit (in other words, the branches whose tip commits are descendants
of the named commit), ‘--no-contains’ inverts it.  With ‘--merged’, only
branches merged into the named commit (i.e.  the branches whose tip
commits are reachable from the named commit) will be listed.  With
‘--no-merged’ only branches not merged into the named commit will be
listed.  If the <commit> argument is missing it defaults to ‘HEAD’ (i.e.
the tip of the current branch).

   The command’s second form creates a new branch head named
<branchname> which points to the current ‘HEAD’, or <start-point> if
given.  As a special case, for <start-point>, you may use ‘"A...B"’ as a
shortcut for the merge base of ‘A’ and ‘B’ if there is exactly one merge
base.  You can leave out at most one of ‘A’ and ‘B’, in which case it
defaults to ‘HEAD’.

   Note that this will create the new branch, but it will not switch the
working tree to it; use "git switch <newbranch>" to switch to the new
branch.

   When a local branch is started off a remote-tracking branch, Git sets
up the branch (specifically the ‘branch.<name>.remote’ and
‘branch.<name>.merge’ configuration entries) so that _git pull_ will
appropriately merge from the remote-tracking branch.  This behavior may
be changed via the global ‘branch.autoSetupMerge’ configuration flag.
That setting can be overridden by using the ‘--track’ and ‘--no-track’
options, and changed later using ‘git branch --set-upstream-to’.

   With a ‘-m’ or ‘-M’ option, <oldbranch> will be renamed to
<newbranch>.  If <oldbranch> had a corresponding reflog, it is renamed
to match <newbranch>, and a reflog entry is created to remember the
branch renaming.  If <newbranch> exists, -M must be used to force the
rename to happen.

   The ‘-c’ and ‘-C’ options have the exact same semantics as ‘-m’ and
‘-M’, except instead of the branch being renamed, it will be copied to a
new name, along with its config and reflog.

   With a ‘-d’ or ‘-D’ option, ‘<branchname>’ will be deleted.  You may
specify more than one branch for deletion.  If the branch currently has
a reflog then the reflog will also be deleted.

   Use ‘-r’ together with ‘-d’ to delete remote-tracking branches.
Note, that it only makes sense to delete remote-tracking branches if
they no longer exist in the remote repository or if _git fetch_ was
configured not to fetch them again.  See also the _prune_ subcommand of
git-remote(1) for a way to clean up all obsolete remote-tracking
branches.


OPTIONS
*******

‘-d’
‘--delete’
     Delete a branch.  The branch must be fully merged in its upstream
     branch, or in ‘HEAD’ if no upstream was set with ‘--track’ or
     ‘--set-upstream-to’.

‘-D’
     Shortcut for ‘--delete --force’.

‘--create-reflog’
     Create the branch’s reflog.  This activates recording of all
     changes made to the branch ref, enabling use of date based sha1
     expressions such as "<branchname>@{yesterday}".  Note that in
     non-bare repositories, reflogs are usually enabled by default by
     the ‘core.logAllRefUpdates’ config option.  The negated form
     ‘--no-create-reflog’ only overrides an earlier ‘--create-reflog’,
     but currently does not negate the setting of
     ‘core.logAllRefUpdates’.

‘-f’
‘--force’
     Reset <branchname> to <startpoint>, even if <branchname> exists
     already.  Without ‘-f’, _git branch_ refuses to change an existing
     branch.  In combination with ‘-d’ (or ‘--delete’), allow deleting
     the branch irrespective of its merged status, or whether it even
     points to a valid commit.  In combination with ‘-m’ (or ‘--move’),
     allow renaming the branch even if the new branch name already
     exists, the same applies for ‘-c’ (or ‘--copy’).

‘-m’
‘--move’
     Move/rename a branch and the corresponding reflog.

‘-M’
     Shortcut for ‘--move --force’.

‘-c’
‘--copy’
     Copy a branch and the corresponding reflog.

‘-C’
     Shortcut for ‘--copy --force’.

‘--color[=<when>]’
     Color branches to highlight current, local, and remote-tracking
     branches.  The value must be always (the default), never, or auto.

‘--no-color’
     Turn off branch colors, even when the configuration file gives the
     default to color output.  Same as ‘--color=never’.

‘-i’
‘--ignore-case’
     Sorting and filtering branches are case insensitive.

‘--column[=<options>]’
‘--no-column’
     Display branch listing in columns.  See configuration variable
     ‘column.branch’ for option syntax.  ‘--column’ and ‘--no-column’
     without options are equivalent to _always_ and _never_
     respectively.

     This option is only applicable in non-verbose mode.

‘-r’
‘--remotes’
     List or delete (if used with -d) the remote-tracking branches.
     Combine with ‘--list’ to match the optional pattern(s).

‘-a’
‘--all’
     List both remote-tracking branches and local branches.  Combine
     with ‘--list’ to match optional pattern(s).

‘-l’
‘--list’
     List branches.  With optional ‘<pattern>...’, e.g.  ‘git branch
     --list 'maint-*'’, list only the branches that match the
     pattern(s).

‘--show-current’
     Print the name of the current branch.  In detached HEAD state,
     nothing is printed.

‘-v’
‘-vv’
‘--verbose’
     When in list mode, show sha1 and commit subject line for each head,
     along with relationship to upstream branch (if any).  If given
     twice, print the path of the linked worktree (if any) and the name
     of the upstream branch, as well (see also ‘git remote show
     <remote>’).  Note that the current worktree’s HEAD will not have
     its path printed (it will always be your current directory).

‘-q’
‘--quiet’
     Be more quiet when creating or deleting a branch, suppressing
     non-error messages.

‘--abbrev=<n>’
     In the verbose listing that show the commit object name, show the
     shortest prefix that is at least _<n>_ hexdigits long that uniquely
     refers the object.  The default value is 7 and can be overridden by
     the ‘core.abbrev’ config option.

‘--no-abbrev’
     Display the full sha1s in the output listing rather than
     abbreviating them.

‘-t’
‘--track’
     When creating a new branch, set up ‘branch.<name>.remote’ and
     ‘branch.<name>.merge’ configuration entries to mark the start-point
     branch as "upstream" from the new branch.  This configuration will
     tell git to show the relationship between the two branches in ‘git
     status’ and ‘git branch -v’.  Furthermore, it directs ‘git pull’
     without arguments to pull from the upstream when the new branch is
     checked out.

     This behavior is the default when the start point is a
     remote-tracking branch.  Set the branch.autoSetupMerge
     configuration variable to ‘false’ if you want ‘git switch’, ‘git
     checkout’ and ‘git branch’ to always behave as if ‘--no-track’ were
     given.  Set it to ‘always’ if you want this behavior when the
     start-point is either a local or remote-tracking branch.

‘--no-track’
     Do not set up "upstream" configuration, even if the
     branch.autoSetupMerge configuration variable is true.

‘--set-upstream’
     As this option had confusing syntax, it is no longer supported.
     Please use ‘--track’ or ‘--set-upstream-to’ instead.

‘-u <upstream>’
‘--set-upstream-to=<upstream>’
     Set up <branchname>’s tracking information so <upstream> is
     considered <branchname>’s upstream branch.  If no <branchname> is
     specified, then it defaults to the current branch.

‘--unset-upstream’
     Remove the upstream information for <branchname>.  If no branch is
     specified it defaults to the current branch.

‘--edit-description’
     Open an editor and edit the text to explain what the branch is for,
     to be used by various other commands (e.g.  ‘format-patch’,
     ‘request-pull’, and ‘merge’ (if enabled)).  Multi-line explanations
     may be used.

‘--contains [<commit>]’
     Only list branches which contain the specified commit (HEAD if not
     specified).  Implies ‘--list’.

‘--no-contains [<commit>]’
     Only list branches which don’t contain the specified commit (HEAD
     if not specified).  Implies ‘--list’.

‘--merged [<commit>]’
     Only list branches whose tips are reachable from the specified
     commit (HEAD if not specified).  Implies ‘--list’.

‘--no-merged [<commit>]’
     Only list branches whose tips are not reachable from the specified
     commit (HEAD if not specified).  Implies ‘--list’.

<branchname>
     The name of the branch to create or delete.  The new branch name
     must pass all checks defined by git-check-ref-format(1).  Some of
     these checks may restrict the characters allowed in a branch name.

<start-point>
     The new branch head will point to this commit.  It may be given as
     a branch name, a commit-id, or a tag.  If this option is omitted,
     the current HEAD will be used instead.

<oldbranch>
     The name of an existing branch to rename.

<newbranch>
     The new name for an existing branch.  The same restrictions as for
     <branchname> apply.

‘--sort=<key>’
     Sort based on the key given.  Prefix ‘-’ to sort in descending
     order of the value.  You may use the –sort=<key> option multiple
     times, in which case the last key becomes the primary key.  The
     keys supported are the same as those in ‘git for-each-ref’.  Sort
     order defaults to the value configured for the ‘branch.sort’
     variable if exists, or to sorting based on the full refname
     (including ‘refs/...’ prefix).  This lists detached HEAD (if
     present) first, then local branches and finally remote-tracking
     branches.  See git-config(1).

‘--points-at <object>’
     Only list branches of the given object.

‘--format <format>’
     A string that interpolates ‘%(fieldname)’ from a branch ref being
     shown and the object it points at.  The format is the same as that
     of git-for-each-ref(1).


CONFIGURATION
*************

‘pager.branch’ is only respected when listing branches, i.e., when
‘--list’ is used or implied.  The default is to use a pager.  See
git-config(1).


EXAMPLES
********

Start development from a known tag
          $ git clone git://git.kernel.org/pub/scm/.../linux-2.6 my2.6
          $ cd my2.6
          $ git branch my2.6.14 v2.6.14   (1)
          $ git switch my2.6.14

     *note (1): CO1-1.
          This step and the next one could be combined into a single
          step with "checkout -b my2.6.14 v2.6.14".

Delete an unneeded branch
          $ git clone git://git.kernel.org/.../git.git my.git
          $ cd my.git
          $ git branch -d -r origin/todo origin/html origin/man   (1)
          $ git branch -D test                                    (2)

     *note (1): CO2-1.
          Delete the remote-tracking branches "todo", "html" and "man".
          The next _fetch_ or _pull_ will create them again unless you
          configure them not to.  See git-fetch(1).

     *note (2): CO2-2.
          Delete the "test" branch even if the "master" branch (or
          whichever branch is currently checked out) does not have all
          commits from the test branch.

Listing branches from a specific remote
          $ git branch -r -l '<remote>/<pattern>'                 (1)
          $ git for-each-ref 'refs/remotes/<remote>/<pattern>'    (2)

     *note (1): CO3-1.
          Using ‘-a’ would conflate <remote> with any local branches you
          happen to have been prefixed with the same <remote> pattern.

     *note (2): CO3-2.
          ‘for-each-ref’ can take a wide range of options.  See
          git-for-each-ref(1)

   Patterns will normally need quoting.


NOTES
*****

If you are creating a branch that you want to switch to immediately, it
is easier to use the "git switch" command with its ‘-c’ option to do the
same thing with a single command.

   The options ‘--contains’, ‘--no-contains’, ‘--merged’ and
‘--no-merged’ serve four related but different purposes:

   • ‘--contains <commit>’ is used to find all branches which will need
     special attention if <commit> were to be rebased or amended, since
     those branches contain the specified <commit>.

   • ‘--no-contains <commit>’ is the inverse of that, i.e.  branches
     that don’t contain the specified <commit>.

   • ‘--merged’ is used to find all branches which can be safely
     deleted, since those branches are fully contained by HEAD.

   • ‘--no-merged’ is used to find branches which are candidates for
     merging into HEAD, since those branches are not fully contained by
     HEAD.

   複数の ‘--contains’ フィルターと ‘--no-contains’ フィルターを組み合わ
せる場合、少なくとも1つの ‘--contains’ コミットを含み、 ‘--no-contains’
コミットを含まない参照のみが表示されます。

   複数の ‘--merged’ フィルターと ‘--no-merged’ フィルターを組み合わせる
と、少なくとも1つの ‘--merged’ コミットから到達可能で、 ‘--no-merged’ コ
ミットのいずれからも到達できない参照のみが表示されます。


SEE ALSO
********

git-check-ref-format(1), git-fetch(1), git-remote(1), “Understanding
history: What is a branch?” (user-manual.html#what-is-a-branch) in the
Git User’s Manual.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-bugreport,  Up: Top

Name
****

git-bugreport — ユーザーがバグ報告を提出するための情報を収集する


Synopsis
********

     git bugreport [(-o | –output-directory) <path>] [(-s | –suffix) <format>]


DESCRIPTION
***********

ユーザーのマシン、Gitクライアント、リポジトリの状態に関する情報、および
ユーザーが観察した動作に関する情報の入力書式を(例えば、Gitメーリングリス
トに観察されたバグを報告するために)、ユーザーが共有できる単一のテキスト
ファイルとして獲得します。

   以下の情報がユーザーに要求されます:

   • 再現手順

   • 期待する動作

   • 実際の動作

   以下の情報が自動的に収集されます:

   • _git version –build-options_

   • uname sysname と release と version と machine strings

   • コンパイラ指定情報文字列

   • 有効なフックのリスト

   • $SHELL

   このツールは、通常のGitセットアッププロセスを介して呼び出されます。つ
まり、関連する構成ファイルが読み取れない場合など、起動できない場合があり
ます。 この種のシナリオでは、手動で助けを求めるときに、上記の種類の情報
を手動で収集すると役立つ場合があります。


OPTIONS
*******

‘-o <path>’
‘--output-directory <path>’
     結果のバグレポートファイルを現在のディレクトリではなく ‘<path>’ に
     配置します。

‘-s <format>’
‘--suffix <format>’
     バグレポート名の代替サフィックスを指定して、
     _git-bugreport-<formatted suffix>_ という名前のファイルを作成します
     。 これは、 strftime(3) 形式の文字列の形式をとる必要があります。現
     在の現地時間が使用されます。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-bundle,  Up: Top

Name
****

git-bundle — Move objects and refs by archive


Synopsis
********

     git bundle create [-q | –quiet | –progress | –all-progress] [–all-progress-implied]
                         [–version=<version>] <file> <git-rev-list-args>
     git bundle verify [-q | –quiet] <file>
     git bundle list-heads <file> [<refname>…]
     git bundle unbundle [–progress] <file> [<refname>…]


DESCRIPTION
***********

Create, unpack, and manipulate "bundle" files.  Bundles are used for the
"offline" transfer of Git objects without an active "server" sitting on
the other side of the network connection.

   They can be used to create both incremental and full backups of a
repository, and to relay the state of the references in one repository
to another.

   Git commands that fetch or otherwise "read" via protocols such as
‘ssh://’ and ‘https://’ can also operate on bundle files.  It is
possible git-clone(1) a new repository from a bundle, to use
git-fetch(1) to fetch from one, and to list the references contained
within it with git-ls-remote(1).  There’s no corresponding "write"
support, i.e.a _git push_ into a bundle is not supported.

   See the "EXAMPLES" section below for examples of how to use bundles.


BUNDLE FORMAT
*************

Bundles are ‘.pack’ files (see git-pack-objects(1)) with a header
indicating what references are contained within the bundle.

   Like the the packed archive format itself bundles can either be
self-contained, or be created using exclusions.  See the "OBJECT
PREREQUISITES" section below.

   Bundles created using revision exclusions are "thin packs" created
using the ‘--thin’ option to git-pack-objects(1), and unbundled using
the ‘--fix-thin’ option to git-index-pack(1).

   There is no option to create a "thick pack" when using revision
exclusions, users should not be concerned about the difference.  By
using "thin packs" bundles created using exclusions are smaller in size.
That they’re "thin" under the hood is merely noted here as a curiosity,
and as a reference to other documentation

   See the ‘bundle-format’ documentation (technical/bundle-format.html)
for more details and the discussion of "thin pack" in the pack format
documentation (technical/pack-format.html) for further details.


OPTIONS
*******

create [options] <file> <git-rev-list-args>
     Used to create a bundle named _file_.  This requires the
     _<git-rev-list-args>_ arguments to define the bundle contents.
     _options_ contains the options specific to the _git bundle create_
     subcommand.

verify <file>
     Used to check that a bundle file is valid and will apply cleanly to
     the current repository.  This includes checks on the bundle format
     itself as well as checking that the prerequisite commits exist and
     are fully linked in the current repository.  _git bundle_ prints a
     list of missing commits, if any, and exits with a non-zero status.

list-heads <file>
     Lists the references defined in the bundle.  If followed by a list
     of references, only references matching those given are printed
     out.

unbundle <file>
     Passes the objects in the bundle to _git index-pack_ for storage in
     the repository, then prints the names of all defined references.
     If a list of references is given, only references matching those in
     the list are printed.  This command is really plumbing, intended to
     be called only by _git fetch_.

<git-rev-list-args>
     A list of arguments, acceptable to _git rev-parse_ and _git
     rev-list_ (and containing a named ref, see SPECIFYING REFERENCES
     below), that specifies the specific objects and references to
     transport.  For example, ‘master~10..master’ causes the current
     master reference to be packaged along with all objects added since
     its 10th ancestor commit.  There is no explicit limit to the number
     of references and objects that may be packaged.

[<refname>…]
     A list of references used to limit the references reported as
     available.  This is principally of use to _git fetch_, which
     expects to receive only those references asked for and not
     necessarily everything in the pack (in this case, _git bundle_ acts
     like _git fetch-pack_).

‘--progress’
     Progress status is reported on the standard error stream by default
     when it is attached to a terminal, unless -q is specified.  This
     flag forces progress status even if the standard error stream is
     not directed to a terminal.

‘--all-progress’
     When –stdout is specified then progress report is displayed during
     the object count and compression phases but inhibited during the
     write-out phase.  The reason is that in some cases the output
     stream is directly linked to another command which may wish to
     display progress status of its own as it processes incoming pack
     data.  This flag is like –progress except that it forces progress
     report for the write-out phase as well even if –stdout is used.

‘--all-progress-implied’
     This is used to imply –all-progress whenever progress display is
     activated.  Unlike –all-progress this flag doesn’t actually force
     any progress display by itself.

‘--version=<version>’
     Specify the bundle version.  Version 2 is the older format and can
     only be used with SHA-1 repositories; the newer version 3 contains
     capabilities that permit extensions.  The default is the oldest
     supported format, based on the hash algorithm in use.

‘-q’
‘--quiet’
     This flag makes the command not to report its progress on the
     standard error stream.


SPECIFYING REFERENCES
*********************

Revisions must accompanied by reference names to be packaged in a
bundle.

   More than one reference may be packaged, and more than one set of
prerequisite objects can be specified.  The objects packaged are those
not contained in the union of the prerequisites.

   The _git bundle create_ command resolves the reference names for you
using the same rules as ‘git rev-parse --abbrev-ref=loose’.  Each
prerequisite can be specified explicitly (e.g.  ‘^master~10’), or
implicitly (e.g.  ‘master~10..master’, ‘--since=10.days.ago master’).

   All of these simple cases are OK (assuming we have a "master" and
"next" branch):

     $ git bundle create master.bundle master
     $ echo master | git bundle create master.bundle --stdin
     $ git bundle create master-and-next.bundle master next
     $ (echo master; echo next) | git bundle create master-and-next.bundle --stdin

   And so are these (and the same but omitted ‘--stdin’ examples):

     $ git bundle create recent-master.bundle master~10..master
     $ git bundle create recent-updates.bundle master~10..master next~5..next

   A revision name or a range whose right-hand-side cannot be resolved
to a reference is not accepted:

     $ git bundle create HEAD.bundle $(git rev-parse HEAD)
     fatal: Refusing to create empty bundle.
     $ git bundle create master-yesterday.bundle master~10..master~5
     fatal: Refusing to create empty bundle.


OBJECT PREREQUISITES
********************

When creating bundles it is possible to create a self-contained bundle
that can be unbundled in a repository with no common history, as well as
providing negative revisions to exclude objects needed in the earlier
parts of the history.

   Feeding a revision such as ‘new’ to ‘git bundle create’ will create a
bundle file that contains all the objects reachable from the revision
‘new’.  That bundle can be unbundled in any repository to obtain a full
history that leads to the revision ‘new’:

     $ git bundle create full.bundle new

   A revision range such as ‘old..new’ will produce a bundle file that
will require the revision ‘old’ (and any objects reachable from it) to
exist for the bundle to be "unbundle"-able:

     $ git bundle create full.bundle old..new

   A self-contained bundle without any prerequisites can be extracted
into anywhere, even into an empty repository, or be cloned from (i.e.,
‘new’, but not ‘old..new’).

   It is okay to err on the side of caution, causing the bundle file to
contain objects already in the destination, as these are ignored when
unpacking at the destination.

   If you want to match ‘git clone --mirror’, which would include your
refs such as ‘refs/remotes/*’, use ‘--all’.  If you want to provide the
same set of refs that a clone directly from the source repository would
get, use ‘--branches --tags’ for the ‘<git-rev-list-args>’.

   The _git bundle verify_ command can be used to check whether your
recipient repository has the required prerequisite commits for a bundle.


EXAMPLES
********

Assume you want to transfer the history from a repository R1 on machine
A to another repository R2 on machine B. For whatever reason, direct
connection between A and B is not allowed, but we can move data from A
to B via some mechanism (CD, email, etc.).  We want to update R2 with
development made on the branch master in R1.

   To bootstrap the process, you can first create a bundle that does not
have any prerequisites.  You can use a tag to remember up to what commit
you last processed, in order to make it easy to later update the other
repository with an incremental bundle:

     machineA$ cd R1
     machineA$ git bundle create file.bundle master
     machineA$ git tag -f lastR2bundle master

   Then you transfer file.bundle to the target machine B. Because this
bundle does not require any existing object to be extracted, you can
create a new repository on machine B by cloning from it:

     machineB$ git clone -b master /home/me/tmp/file.bundle R2

   This will define a remote called "origin" in the resulting repository
that lets you fetch and pull from the bundle.  The $GIT_DIR/config file
in R2 will have an entry like this:

     [remote "origin"]
         url = /home/me/tmp/file.bundle
         fetch = refs/heads/*:refs/remotes/origin/*

   To update the resulting mine.git repository, you can fetch or pull
after replacing the bundle stored at /home/me/tmp/file.bundle with
incremental updates.

   After working some more in the original repository, you can create an
incremental bundle to update the other repository:

     machineA$ cd R1
     machineA$ git bundle create file.bundle lastR2bundle..master
     machineA$ git tag -f lastR2bundle master

   You then transfer the bundle to the other machine to replace
/home/me/tmp/file.bundle, and pull from it.

     machineB$ cd R2
     machineB$ git pull

   If you know up to what commit the intended recipient repository
should have the necessary objects, you can use that knowledge to specify
the prerequisites, giving a cut-off point to limit the revisions and
objects that go in the resulting bundle.  The previous example used the
lastR2bundle tag for this purpose, but you can use any other options
that you would give to the git-log(1) command.  Here are more examples:

   You can use a tag that is present in both:

     $ git bundle create mybundle v1.0.0..master

   You can use a prerequisite based on time:

     $ git bundle create mybundle --since=10.days master

   You can use the number of commits:

     $ git bundle create mybundle -10 master

   You can run ‘git-bundle verify’ to see if you can extract from a
bundle that was created with a prerequisite:

     $ git bundle verify mybundle

   This will list what commits you must have in order to extract from
the bundle and will error out if you do not have them.

   A bundle from a recipient repository’s point of view is just like a
regular repository which it fetches or pulls from.  You can, for
example, map references when fetching:

     $ git fetch mybundle master:localRef

   You can also see what references it offers:

     $ git ls-remote mybundle


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-cat-file,  Up: Top

Name
****

git-cat-file — Provide content or type and size information for
repository objects


Synopsis
********

     git cat-file (-t [–allow-unknown-type]| -s [–allow-unknown-type]| -e | -p | <type> | –textconv | –filters ) [–path=<path>] <object>
     git cat-file (–batch[=<format>] | –batch-check[=<format>]) [ –textconv | –filters ] [–follow-symlinks]


DESCRIPTION
***********

In its first form, the command provides the content or the type of an
object in the repository.  The type is required unless ‘-t’ or ‘-p’ is
used to find the object type, or ‘-s’ is used to find the object size,
or ‘--textconv’ or ‘--filters’ is used (which imply type "blob").

   In the second form, a list of objects (separated by linefeeds) is
provided on stdin, and the SHA-1, type, and size of each object is
printed on stdout.  The output format can be overridden using the
optional ‘<format>’ argument.  If either ‘--textconv’ or ‘--filters’ was
specified, the input is expected to list the object names followed by
the path name, separated by a single whitespace, so that the appropriate
drivers can be determined.


OPTIONS
*******

<object>
     The name of the object to show.  For a more complete list of ways
     to spell object names, see the "SPECIFYING REVISIONS" section in
     gitrevisions(7).

‘-t’
     Instead of the content, show the object type identified by
     ‘<object>’.

‘-s’
     Instead of the content, show the object size identified by
     ‘<object>’.

‘-e’
     Exit with zero status if ‘<object>’ exists and is a valid object.
     If ‘<object>’ is of an invalid format exit with non-zero and emits
     an error on stderr.

‘-p’
     Pretty-print the contents of ‘<object>’ based on its type.

<type>
     Typically this matches the real type of ‘<object>’ but asking for a
     type that can trivially be dereferenced from the given ‘<object>’
     is also permitted.  An example is to ask for a "tree" with
     ‘<object>’ being a commit object that contains it, or to ask for a
     "blob" with ‘<object>’ being a tag object that points at it.

‘--textconv’
     Show the content as transformed by a textconv filter.  In this
     case, ‘<object>’ has to be of the form ‘<tree-ish>:<path>’, or
     ‘:<path>’ in order to apply the filter to the content recorded in
     the index at ‘<path>’.

‘--filters’
     Show the content as converted by the filters configured in the
     current working tree for the given ‘<path>’ (i.e.  smudge filters,
     end-of-line conversion, etc).  In this case, ‘<object>’ has to be
     of the form ‘<tree-ish>:<path>’, or ‘:<path>’.

‘--path=<path>’
     For use with ‘--textconv’ or ‘--filters’, to allow specifying an
     object name and a path separately, e.g.  when it is difficult to
     figure out the revision from which the blob came.

‘--batch’
‘--batch=<format>’
     Print object information and contents for each object provided on
     stdin.  May not be combined with any other options or arguments
     except ‘--textconv’ or ‘--filters’, in which case the input lines
     also need to specify the path, separated by whitespace.  See the
     section ‘BATCH OUTPUT’ below for details.

‘--batch-check’
‘--batch-check=<format>’
     Print object information for each object provided on stdin.  May
     not be combined with any other options or arguments except
     ‘--textconv’ or ‘--filters’, in which case the input lines also
     need to specify the path, separated by whitespace.  See the section
     ‘BATCH OUTPUT’ below for details.

‘--batch-all-objects’
     Instead of reading a list of objects on stdin, perform the
     requested batch operation on all objects in the repository and any
     alternate object stores (not just reachable objects).  Requires
     ‘--batch’ or ‘--batch-check’ be specified.  Note that the objects
     are visited in order sorted by their hashes.

‘--buffer’
     Normally batch output is flushed after each object is output, so
     that a process can interactively read and write from ‘cat-file’.
     With this option, the output uses normal stdio buffering; this is
     much more efficient when invoking ‘--batch-check’ on a large number
     of objects.

‘--unordered’
     When ‘--batch-all-objects’ is in use, visit objects in an order
     which may be more efficient for accessing the object contents than
     hash order.  The exact details of the order are unspecified, but if
     you do not require a specific order, this should generally result
     in faster output, especially with ‘--batch’.  Note that ‘cat-file’
     will still show each object only once, even if it is stored
     multiple times in the repository.

‘--allow-unknown-type’
     Allow ‘-s’ or ‘-t’ to query broken/corrupt objects of unknown type.

‘--follow-symlinks’
     With ‘--batch’ or ‘--batch-check’, follow symlinks inside the
     repository when requesting objects with extended SHA-1 expressions
     of the form tree-ish:path-in-tree.  Instead of providing output
     about the link itself, provide output about the linked-to object.
     If a symlink points outside the tree-ish (e.g.  a link to ‘/foo’ or
     a root-level link to ‘../foo’), the portion of the link which is
     outside the tree will be printed.

     This option does not (currently) work correctly when an object in
     the index is specified (e.g.  ‘:link’ instead of ‘HEAD:link’)
     rather than one in the tree.

     This option cannot (currently) be used unless ‘--batch’ or
     ‘--batch-check’ is used.

     For example, consider a git repository containing:

          f: a file containing "hello\n"
          link: a symlink to f
          dir/link: a symlink to ../f
          plink: a symlink to ../f
          alink: a symlink to /etc/passwd

     For a regular file ‘f’, ‘echo HEAD:f | git cat-file --batch’ would
     print

          ce013625030ba8dba906f756967f9e9ca394464a blob 6

     And ‘echo HEAD:link | git cat-file --batch --follow-symlinks’ would
     print the same thing, as would ‘HEAD:dir/link’, as they both point
     at ‘HEAD:f’.

     Without ‘--follow-symlinks’, these would print data about the
     symlink itself.  In the case of ‘HEAD:link’, you would see

          4d1ae35ba2c8ec712fa2a379db44ad639ca277bd blob 1

     Both ‘plink’ and ‘alink’ point outside the tree, so they would
     respectively print:

          symlink 4
          ../f

          symlink 11
          /etc/passwd


OUTPUT
******

If ‘-t’ is specified, one of the ‘<type>’.

   If ‘-s’ is specified, the size of the ‘<object>’ in bytes.

   If ‘-e’ is specified, no output, unless the ‘<object>’ is malformed.

   If ‘-p’ is specified, the contents of ‘<object>’ are pretty-printed.

   If ‘<type>’ is specified, the raw (though uncompressed) contents of
the ‘<object>’ will be returned.


BATCH OUTPUT
************

If ‘--batch’ or ‘--batch-check’ is given, ‘cat-file’ will read objects
from stdin, one per line, and print information about them.  By default,
the whole line is considered as an object, as if it were fed to
git-rev-parse(1).

   You can specify the information shown for each object by using a
custom ‘<format>’.  The ‘<format>’ is copied literally to stdout for
each object, with placeholders of the form ‘%(atom)’ expanded, followed
by a newline.  The available atoms are:

‘objectname’
     The full hex representation of the object name.

‘objecttype’
     The type of the object (the same as ‘cat-file -t’ reports).

‘objectsize’
     The size, in bytes, of the object (the same as ‘cat-file -s’
     reports).

‘objectsize:disk’
     The size, in bytes, that the object takes up on disk.  See the note
     about on-disk sizes in the ‘CAVEATS’ section below.

‘deltabase’
     If the object is stored as a delta on-disk, this expands to the
     full hex representation of the delta base object name.  Otherwise,
     expands to the null OID (all zeroes).  See ‘CAVEATS’ below.

‘rest’
     If this atom is used in the output string, input lines are split at
     the first whitespace boundary.  All characters before that
     whitespace are considered to be the object name; characters after
     that first run of whitespace (i.e., the "rest" of the line) are
     output in place of the ‘%(rest)’ atom.

   If no format is specified, the default format is ‘%(objectname)
%(objecttype) %(objectsize)’.

   If ‘--batch’ is specified, the object information is followed by the
object contents (consisting of ‘%(objectsize)’ bytes), followed by a
newline.

   For example, ‘--batch’ without a custom format would produce:

     <oid> SP <type> SP <size> LF
     <contents> LF

   Whereas ‘--batch-check='%(objectname) %(objecttype)'’ would produce:

     <oid> SP <type> LF

   If a name is specified on stdin that cannot be resolved to an object
in the repository, then ‘cat-file’ will ignore any custom format and
print:

     <object> SP missing LF

   If a name is specified that might refer to more than one object (an
ambiguous short sha), then ‘cat-file’ will ignore any custom format and
print:

     <object> SP ambiguous LF

   If ‘--follow-symlinks’ is used, and a symlink in the repository
points outside the repository, then ‘cat-file’ will ignore any custom
format and print:

     symlink SP <size> LF
     <symlink> LF

   The symlink will either be absolute (beginning with a ‘/’), or
relative to the tree root.  For instance, if dir/link points to
‘../../foo’, then ‘<symlink>’ will be ‘../foo’.  ‘<size>’ is the size of
the symlink in bytes.

   If ‘--follow-symlinks’ is used, the following error messages will be
displayed:

     <object> SP missing LF

   is printed when the initial symlink requested does not exist.

     dangling SP <size> LF
     <object> LF

   is printed when the initial symlink exists, but something that it
(transitive-of) points to does not.

     loop SP <size> LF
     <object> LF

   is printed for symlink loops (or any symlinks that require more than
40 link resolutions to resolve).

     notdir SP <size> LF
     <object> LF

   is printed when, during symlink resolution, a file is used as a
directory name.


CAVEATS
*******

Note that the sizes of objects on disk are reported accurately, but care
should be taken in drawing conclusions about which refs or objects are
responsible for disk usage.  The size of a packed non-delta object may
be much larger than the size of objects which delta against it, but the
choice of which object is the base and which is the delta is arbitrary
and is subject to change during a repack.

   Note also that multiple copies of an object may be present in the
object database; in this case, it is undefined which copy’s size or
delta base will be reported.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-check-attr,  Up: Top

Name
****

git-check-attr — gitattributes情報を表示


Synopsis
********

     git check-attr [-a | –all | <attr>…] [–] <pathname>…
     git check-attr –stdin [-z] [-a | –all | <attr>…]


DESCRIPTION
***********

このコマンドは、すべてのパス名について、gitattributesとしての各属性を
‘unspecified’(未指定)または ‘set’ または ‘unset’ であるかどうか一覧表示
します。


OPTIONS
*******

‘-a, --all’
     指定されたパスに関連付けられているすべての属性を一覧表示します。 こ
     のオプションを使用すると、 _unspecified_ (指定されていない)属性は出
     力に含まれません。

‘--cached’
     作業ツリーを無視して、インデックス内のみに対して ‘.gitattributes’ を
     考慮してください。

‘--stdin’
     コマンドラインからではなく、標準入力から1行に1つずつパス名を読み取
     ります。

‘-z’
     出力形式は、マシンで解析できるように変更されます。 ‘--stdin’ も指定
     されている場合、入力パスは改行文字ではなくNUL文字で区切ります。

‘--’
     先行するすべての引数を属性として解釈し、後続のすべての引数をパス名
     として解釈します。

   ‘--stdin’ と ‘--all’ と ‘--’ のいずれも使用されていない場合、最初の引
数は属性として扱われ、残りの引数はパス名として扱われます。


OUTPUT
******

出力形式: <path> COLON SP <attribute> COLON SP <info> LF

   ‘-z’ が有効の場合はNULが区切り文字として使用されます: <path> NUL
<attribute> NUL <info> NUL

   <path>はクエリ対象のファイルのパス、 <attribute> はクエリ対象の属性、
<info> は行かのいずれかになります:

‘unspecified’
     (未指定)パスにその属性が定義されていない場合。

‘unset’
     属性がfalseとして定義されている場合。

‘set’
     属性がtrueとして定義されている場合。

<value>
     属性に値が割り当てられたとき。

   バッファリングは、 git(1) の ‘GIT_FLUSH’ オプションに記載されているよ
うに行われます。呼び出し元は、入力バッファーのオーバーフィル
(overfilling)または空の出力バッファーからの読み取りによって引き起こされ
るデッドロックを回避する責任があります。


EXAMPLES
********

これらの例では、以下の ‘.gitattributes’ ファイルが使用されています:

     *.java diff=java -crlf myAttr
     NoMyAttr.java !myAttr
     README caveat=unspecified

   • 単一の属性のリスト:

     $ git check-attr diff org/example/MyClass.java
     org/example/MyClass.java: diff: java

   • ファイルの複数の属性の一覧表示:

     $ git check-attr crlf diff myAttr -- org/example/MyClass.java
     org/example/MyClass.java: crlf: unset
     org/example/MyClass.java: diff: java
     org/example/MyClass.java: myAttr: set

   • ファイルのすべての属性を一覧表示:

     $ git check-attr --all -- org/example/MyClass.java
     org/example/MyClass.java: diff: java
     org/example/MyClass.java: myAttr: set

   • 複数のファイルの属性を一覧表示:

     $ git check-attr myAttr -- org/example/MyClass.java org/example/NoMyAttr.java
     org/example/MyClass.java: myAttr: set
     org/example/NoMyAttr.java: myAttr: unspecified

   • すべての値が等しく明確であるわけではありません:

     $ git check-attr caveat README
     README: caveat: unspecified


SEE ALSO
********

gitattributes(5).


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-check-ignore,  Up: Top

Name
****

git-check-ignore — gitignoreや除外ファイルのデバッグ


Synopsis
********

     git check-ignore [<options>] <pathname>…
     git check-ignore [<options>] –stdin


DESCRIPTION
***********

コマンドラインまたは ‘--stdin’ を介してファイルから指定されたパス名ごと
に、ファイルが ‘.gitignore’ (またはexcludeメカニズムへの他の入力ファイル
)によって除外されているかどうかを確認し、除外されている場合はそのパスを
出力します。

   デフォルトでは、追跡中のファイル(tracked files)は除外ルールの対象では
ないため、まったく表示されません。但し、 ‘–no-index’ もご覧下さい。


OPTIONS
*******

‘-q, --quiet’
     何も出力せず、終了ステータスを設定するだけです。 これは、単一のパス
     名でのみ有効です。

‘-v, --verbose’
     除外されたパスを出力する代わりに、除外パターンに一致するパスごとに
     、パスと一緒に除外パターンを出力します。(通常、除外パターンに一致す
     ることはパスが除外されることを意味しますが、パターンが ‘!’ で始まる
     場合、それは否定パターンであり、一致することはパスが除外されないこ
     とを意味します。)

     除外ソース内および除外ソース間の優先ルールについては、 gitignore(5)
     を参照してください。

‘--stdin’
     コマンドラインからではなく、標準入力から1行に1つずつパス名を読み取
     ります。

‘-z’
     出力フォーマットは、マシン解析可能になるように変更されます(以下を参
     照)。 ‘--stdin’ も指定されている場合、入力パスは改行文字ではなく
     NUL文字で区切られます。

‘-n, --non-matching’
     どのパターンにも一致しないパスを表示します。これは、 ‘--verbose’ が
     有効になっている場合にのみ意味があります。有効になっていないと、パ
     ターンに一致するパスと一致しないパスを区別できません。

‘--no-index’
     チェックを行うときにインデックスを調べません。これは、例えば ‘git
     add .’ で追跡されたパスが、ユーザーの期待通りにルールで無視されなか
     った場合のデバッグに使用できます。また、以前に ‘git add -f’ で追加
     したパスにマッチするように、否定を含むパターンを開発するときにも使
     用できます。


OUTPUT
******

デフォルトでは、指定されたパス名のうち無視パターンに一致するパスが1行に
1つずつ出力されます。特定のパスに一致する無視パターンがない場合、そのパ
スについては何も出力されません。これは、そのパスが無視されないことを意味
します。

   ‘--verbose’ が指定されている場合、出力の各行は以下の形式になります:

   <source> <COLON> <linenum> <COLON> <pattern> <HT> <pathname>

   <pathname> はクエリ対象のファイルのパス、 <pattern> は一致するパター
ン、 <source> はパターンのソースファイル、 <linenum> はそのソース内のパ
ターンの行番号です。 パターンに ‘!’ 接頭辞または ‘/’ 接尾辞が含まれてい
る場合、それは出力でも保持されます。 <source> は、 ‘core.excludesFile’ で
構成されたファイルを参照する場合は絶対パス、 ‘.git/info/exclude’ または
ディレクトリごとの除外ファイルを参照する場合はリポジトリルートを基準とし
ます。

   ‘-z’ が指定されている場合、出力のパス名はヌル文字で区切られます。
‘--verbose’ も指定されている場合、コロンとハードタブの代わりにヌル文字も
使用されます:

   <source> <NULL> <linenum> <NULL> <pattern> <NULL> <pathname> <NULL>

   ‘-n’ または ‘--non-matching’ が指定されている場合、一致しないパス名も
出力されます。その場合、 <pathname> を除く各出力レコードのすべてのフィー
ルドが空になります。これは、非対話的に実行する場合に役立ちます。これによ
り、ファイル達を長時間実行されるチェック無視プロセスのSTDINに段階的にス
トリーミングでき、これらのファイルごとに、STDOUTはそのファイルがパターン
に一致するかどうかを示します。 (このオプションがないと、特定のファイルの
出力がないということは、どのパターンとも一致しなかったのか、出力がまだ生
成されていないのかを判断することはできません。)

   バッファリングは、 git(1) の ‘GIT_FLUSH’ オプションに記載されているよ
うに行われます。呼び出し元は、入力バッファーのオーバーフィルまたは空の出
力バッファーからの読み取りによって引き起こされるデッドロックを回避する責
任があります。


EXIT STATUS
***********

0
     提供されたパスの1つ以上が無視されます。

1
     提供されたパスはどれも無視されません。

128
     致命的なエラーが発生しました。


SEE ALSO
********

gitignore(5) git-config(1) git-ls-files(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-check-mailmap,  Up: Top

Name
****

git-check-mailmap — 連絡先(contacts)の、正式な名前と電子メールアドレスを
表示


Synopsis
********

     git check-mailmap [<options>] <contact>…


DESCRIPTION
***********

コマンドライン指定または、(‘--stdin’ を使用する場合)標準入力からの各
“Name <user@host>” または “<user@host>” について、その人の正規名と電子メ
ールアドレス(以下 "Mapping Authors" 参照)を検索します。見つかった場合は
、それらを印刷します。それ以外の場合は、入力をそのまま出力します。


OPTIONS
*******

‘--stdin’
     コマンドラインで指定された連絡先(contacts)を消費後、標準入力から連
     絡先(contacts)を1行に1つずつ読み取ります。


OUTPUT
******

各連絡先(contact)ごとに、改行で終了する1行が出力されます。 名前が
_mailmap_ に提供または認識されている場合、 “Name <user@host>” が出力され
ます。それ以外の場合は、 “<user@host>” のみが出力されます。


CONFIGURATION
*************

カスタムの ‘.mailmap’ ターゲットファイルまたはオブジェクトを指定する方法
については、 git-config(1) の ‘mailmap.file’ と ‘mailmap.blob’ を参照し
てください。


MAPPING AUTHORS
***************

gitmailmap(5) 参照。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-check-ref-format,  Up: Top

Name
****

git-check-ref-format — 参照名が整形式であることを確認します


Synopsis
********

     git check-ref-format [–normalize]
            [–[no-]allow-onelevel] [–refspec-pattern]
            <refname>
     git check-ref-format –branch <branchname-shorthand>


DESCRIPTION
***********

指定の refname が受け入れ可能かどうかを確認し、受け入れられない場合はゼ
ロ以外のステータスで終了します。

   参照はGitでブランチとタグを指定するために使用されます。ブランチヘッド
は ‘refs/heads’ 階層に格納され、タグはref名前空間の ‘refs/tags’ 階層に格
納されます(通常は ‘$GIT_DIR/refs/heads’ ディレクトリと
‘$GIT_DIR/refs/tags’ ディレクトリに、または refが ‘git gc’ によってパッ
クされている場合はファイル ‘$GIT_DIR/packed-refs’ のエントリとしてありま
す)。

   Gitは、参照の命名方法に以下のルールを課しています:

  1. 階層(ディレクトリ)グループ化のためにスラッシュ(‘/’)を含めることがで
     きますが、スラッシュで区切られたコンポーネントは、ドット(‘.’)で開始
     したり、シーケンス ‘.lock’ で終了したりすることはできません。

  2. 少なくとも1つのスラッシュ(‘/’)が含まれている必要があります。これに
     より、 ‘heads/’ 、 ‘tags/’ などのカテゴリの存在が強制されますが、実
     際の名前は制限されません。 ‘--allow-onelevel’ オプションが使用され
     ている場合、このルールは放棄されます。

  3. どこにも2つの連続したドット(‘..’)を含めることはできません。

  4. ASCII制御文字(つまり、値が \040 未満のバイト または \177(‘DEL’))、
     スペース、チルダ(‘~’)、キャレット(‘^’)、コロン(‘:’)はどこにでも含め
     ることはできません。

  5. 疑問符(‘？’)、アスタリスク(‘*’)、角かっこ(‘[’)がどこにあってもいけ
     ません。この規則の例外については、以下の ‘--refspec-pattern’ オプシ
     ョンを参照してください。

  6. スラッシュ(‘/’)で開始または終了したり、複数の連続したスラッシュを含
     めることはできません(この規則の例外については、以下の ‘--normalize’
     オプションを参照してください)。

  7. ドット(‘.’)で終わらせることはできません。

  8. シーケンス ‘@{’ を含めることはできません。

  9. 単一の文字 ‘@’ にすることはできません。

  10. ‘\’ を含めることはできません。

   これらのルールにより、シェルスクリプトをベースにしたツールで参照名を
簡単にパースできるようになり、参照名が(誤って)引用符なしで使われたときに
シェルでパス名を展開したり、特定の参照名表現におけるあいまいさを回避する
ことができます(gitrevisions(7) を参照)。

  1. 二重ドット(‘..’)は、 ‘ref1..ref2’ などとよく使用されます。一部のコ
     ンテキストでは、この表記は ‘^ref1 ref2’ を意味します(つまり、‘ref1’
     に無く かつ ‘ref2’ にある)。

  2. チルダ(‘~’)とキャレット(‘^’)は、接尾辞 _nth parent_ (n番目の親)と
     _peel onion_ (玉ねぎ剥き)操作を導入するために使用されます。

  3. コロン(‘：’)は、 ‘srcref:dstref’ のように、フェッチおよびプッシュ操
     作で「srcrefの値を使用してdstrefに格納する」ことを意味するために使
     用されます。 ‘git cat-file blob v1.3.3:refs.c’ のようにして ‘git
     cat-file’ などで特定のオブジェクトを選択するためにも使用できます。

  4. at-open-brace(‘@{’)は、reflogエントリにアクセスするための表記法とし
     て使用されます。

   ‘--branch’ オプションを使用すると、コマンドは名前を取得し、それが有効
なブランチ名として使用できるかどうかを確認します(たとえば、新しいブラン
チを作成するとき)。ただし、切り離された(detached)HEAD状態を参照する可能
性のある、遡及チェックアウト構文(previous checkout syntax)を使用する場合
は注意が必要です。 ‘git check-ref-format --branch $name’ が実装するルー
ルは、 ‘git check-ref-format refs/heads/$name’ が言うことよりも厳しい場
合があります(たとえば、参照コンポーネントの先頭にダッシュが表示される場
合がありますが、ブランチ名の先頭では明示的に禁止されています)。リポジト
リで ‘--branch’ オプションを指定して実行すると、入力は最初に「遡及チェッ
クアウト構文」 ‘@{-n}’ 用に展開されます。たとえば、 ‘@{-1}’ は、 ‘git
switch’ または ‘git checkout’ 操作を使用して最後にチェックアウトされたも
のを参照する方法です。磁器コマンドでは、ブランチ名が必要な場所でこの構文
を受け入れるために、このオプションを使用する必要があります。これにより、
あなたがブランチ名を入力したかのように機能できます。注意: 「遡及チェック
アウト操作」では、例外として、チェックアウトされたN番目の最後のものがブ
ランチではなかった場合にコミットオブジェクト名が生成される可能性があるこ
とに注意してください。


OPTIONS
*******

‘--[no-]allow-onelevel’
     1レベルのrefnameを受け入れるかどうかを制御します(つまり、複数の ‘/’
     で区切られたコンポーネントを含まないrefname)。 デフォルトは
     ‘--no-allow-onelevel’ です。

‘--refspec-pattern’
     <refname>を(リモートリポジトリで使用される)refspecの参照名パターン
     として解釈します。このオプションを有効にすると、<refname>は
     refspecに単一の ‘*’ を含めることができます(例: ‘foo/bar*/baz’ また
     は ‘foo/bar*baz/’ はOKですが、 ‘foo/bar*/baz*’ はダメです)。

‘--normalize’
     先行スラッシュ(‘/’)文字を削除し、名前コンポーネント間の隣接するスラ
     ッシュを1つのスラッシュに折りたたむことにより、 _refname_ を正規化
     します。正規化されたrefnameが有効な場合は、それを標準出力に出力し、
     ステータス0で終了します。それ以外の場合は、ゼロ以外のステータスで終
     了します。 ( ‘--print’ は ‘--normalize’ を綴る非推奨の方法です。)


EXAMPLES
********

   • チェックアウトしたのモノの一つ前のものの名前を印刷します:

          $ git check-ref-format --branch @{-1}

   • 新しいブランチに使用する参照名を決定します:

          $ ref=$(git check-ref-format --normalize "refs/heads/$newbranch")||
          { echo "we do not like '$newbranch' as a branch name." >&2 ; exit 1 ; }


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-checkout-index,  Up: Top

Name
****

git-checkout-index — Copy files from the index to the working tree


Synopsis
********

     git checkout-index [-u] [-q] [-a] [-f] [-n] [–prefix=<string>]
                        [–stage=<number>|all]
                        [–temp]
                        [-z] [–stdin]
                        [–] [<file>…]


DESCRIPTION
***********

Will copy all files listed from the index to the working directory (not
overwriting existing files).


OPTIONS
*******

‘-u’
‘--index’
     update stat information for the checked out entries in the index
     file.

‘-q’
‘--quiet’
     be quiet if files exist or are not in the index

‘-f’
‘--force’
     forces overwrite of existing files

‘-a’
‘--all’
     checks out all files in the index.  Cannot be used together with
     explicit filenames.

‘-n’
‘--no-create’
     Don’t checkout new files, only refresh files already checked out.

‘--prefix=<string>’
     When creating files, prepend <string> (usually a directory
     including a trailing /)

‘--stage=<number>|all’
     Instead of checking out unmerged entries, copy out the files from
     named stage.  <number> must be between 1 and 3.  Note: –stage=all
     automatically implies –temp.

‘--temp’
     Instead of copying the files to the working directory write the
     content to temporary files.  The temporary name associations will
     be written to stdout.

‘--stdin’
     Instead of taking list of paths from the command line, read list of
     paths from the standard input.  Paths are separated by LF (i.e.
     one path per line) by default.

‘-z’
     Only meaningful with ‘--stdin’; paths are separated with NUL
     character instead of LF.

–
     Do not interpret any more arguments as options.

   The order of the flags used to matter, but not anymore.

   Just doing ‘git checkout-index’ does nothing.  You probably meant
‘git checkout-index -a’.  And if you want to force it, you want ‘git
checkout-index -f -a’.

   Intuitiveness is not the goal here.  Repeatability is.  The reason
for the "no arguments means no work" behavior is that from scripts you
are supposed to be able to do:

     $ find . -name '*.h' -print0 | xargs -0 git checkout-index -f --

   which will force all existing ‘*.h’ files to be replaced with their
cached copies.  If an empty command line implied "all", then this would
force-refresh everything in the index, which was not the point.  But
since _git checkout-index_ accepts –stdin it would be faster to use:

     $ find . -name '*.h' -print0 | git checkout-index -f -z --stdin

   The ‘--’ is just a good idea when you know the rest will be
filenames; it will prevent problems with a filename of, for example,
‘-a’.  Using ‘--’ is probably a good policy in scripts.


Using –temp or –stage=all
*************************

When ‘--temp’ is used (or implied by ‘--stage=all’) _git checkout-index_
will create a temporary file for each index entry being checked out.
The index will not be updated with stat information.  These options can
be useful if the caller needs all stages of all unmerged entries so that
the unmerged files can be processed by an external merge tool.

   A listing will be written to stdout providing the association of
temporary file names to tracked path names.  The listing format has two
variations:

  1. tempname TAB path RS

     The first format is what gets used when ‘--stage’ is omitted or is
     not ‘--stage=all’.  The field tempname is the temporary file name
     holding the file content and path is the tracked path name in the
     index.  Only the requested entries are output.

  2. stage1temp SP stage2temp SP stage3tmp TAB path RS

     The second format is what gets used when ‘--stage=all’.  The three
     stage temporary fields (stage1temp, stage2temp, stage3temp) list
     the name of the temporary file if there is a stage entry in the
     index or ‘.’ if there is no stage entry.  Paths which only have a
     stage 0 entry will always be omitted from the output.

   In both formats RS (the record separator) is newline by default but
will be the null byte if -z was passed on the command line.  The
temporary file names are always safe strings; they will never contain
directory separators or whitespace characters.  The path field is always
relative to the current directory and the temporary file names are
always relative to the top level directory.

   If the object being copied out to a temporary file is a symbolic link
the content of the link will be written to a normal file.  It is up to
the end-user or the Porcelain to make use of this information.


EXAMPLES
********

To update and refresh only the files already checked out
          $ git checkout-index -n -f -a && git update-index --ignore-missing --refresh

Using _git checkout-index_ to "export an entire tree"
     The prefix ability basically makes it trivial to use _git
     checkout-index_ as an "export as tree" function.  Just read the
     desired tree into the index, and do:

          $ git checkout-index --prefix=git-export-dir/ -a

     ‘git checkout-index’ will "export" the index into the specified
     directory.

     The final "/" is important.  The exported name is literally just
     prefixed with the specified string.  Contrast this with the
     following example.

Export files with a prefix
          $ git checkout-index --prefix=.merged- Makefile

     This will check out the currently cached copy of ‘Makefile’ into
     the file ‘.merged-Makefile’.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-checkout,  Up: Top

Name
****

git-checkout — ブランチの切り替え、または作業ツリーファイルの復元を行い
ます。


Synopsis
********

     git checkout [-q] [-f] [-m] [<branch>]
     git checkout [-q] [-f] [-m] –detach [<branch>]
     git checkout [-q] [-f] [-m] [–detach] <commit>
     git checkout [-q] [-f] [-m] [[-b|-B|–orphan] <new_branch>] [<start_point>]
     git checkout [-f|–ours|–theirs|-m|–conflict=<style>] [<tree-ish>] [–] <pathspec>…
     git checkout [-f|–ours|–theirs|-m|–conflict=<style>] [<tree-ish>] –pathspec-from-file=<file> [–pathspec-file-nul]
     git checkout (-p|–patch) [<tree-ish>] [–] [<pathspec>…]


DESCRIPTION
***********

作業ツリー内のファイルを、インデックスまたは指定されたツリー内のバージョ
ンと一致するように更新します。 pathspecが指定されていない場合、 _git
checkout_ は ‘HEAD’ も更新して、指定されたブランチを現在のブランチとして
設定します。

_git checkout_ [<branch>]
     ‘<branch>’ での作業の準備をするために、インデックスと作業ツリーのフ
     ァイルを更新し、 ‘HEAD’ をブランチに向けることで、‘<branch>’ に切り
     替わります。作業ツリーのファイルに対するローカルな変更は保持され、
     ‘<branch>’ にコミットできるようになります。

     ‘<branch>’ が見つからないが、一致する名前を持つ1つのリモート
     (‘<remote>’ と呼びます)に追跡ブランチが存在し、‘ –no-guess‘ が指定
     されていない場合は、以下と同等として扱います

          $ git checkout -b <branch> --track <remote>/<branch>

     あなたは ‘<branch>’ を省略できます。この場合、コマンドは「現在のブ
     ランチをチェックアウトする」ことになり、(もし存在すれば)現在のブラ
     ンチの追跡情報だけを表示するという、かなり高価な副作用のある、見栄
     えの良いノー・オペレーション(no-op)となります。

_git checkout_ -b|-B <new_branch> [<start point>]
     ‘-b’ を指定すると、git-branch(1) が呼び出されてチェックアウトされた
     かのように新しいブランチが作成されます。 この場合、 ‘git branch’ に
     渡される ‘--track’ または ‘--no-track’ オプションを使用できます。便
     利にするために ‘-b’ のない ‘--track’ はブランチの作成を意味します。
     後述の ‘--track’ の説明を参照してください。

     ‘-B’ を指定すると、存在しない場合は ‘<new_branch>’ が作成されます。
     それ以外の場合はリセットされます。これは、以下の取引(transaction)と
     同等です

          $ git branch -f <branch> [<start point>]
          $ git checkout <branch>

     つまり、 ‘git checkout’ が成功しない限り、ブランチは リセット/作成
     されません。

_git checkout_ –detach [<branch>]
_git checkout_ [–detach] <commit>
     ‘<commit>’ の上で作業する準備をします。その上で、 ‘HEAD’ を切り離し
     (「DETACHED HEAD」セクションを参照)、作業ツリーのインデックスとファ
     イルを更新します。 作業ツリー内のファイルへのローカルの変更は保持さ
     れるため、結果の作業ツリーは、コミットに記録された状態と、ローカル
     の変更になります。

     ‘<commit>’ 引数がブランチ名の場合、 ‘--detach’ オプションを使用して
     、ブランチの先端にある ‘HEAD’ をデタッチできます(‘git checkout
     <branch>’ は、 ‘HEAD’ をデタッチせずにそのブランチをチェックアウト
     します)。

     ‘<branch>’ を省略すると、現在のブランチの先端にある ‘HEAD’ が切り離
     されます。

_git checkout_ [-f|–ours|–theirs|-m|–conflict=<style>] [<tree-ish>] [–] <pathspec>…
_git checkout_ [-f|–ours|–theirs|-m|–conflict=<style>] [<tree-ish>] –pathspec-from-file=<file> [–pathspec-file-nul]
     pathspecにマッチするファイルの内容を上書きします。 ‘<tree-ish>’ (ほ
     とんどの場合コミット)が指定されていない場合は、作業ツリーをインデッ
     クスの内容で上書きします。 ‘<tree-ish>’ が指定された場合、インデッ
     クスと作業ツリーの両方を ‘<tree-ish>’ の内容で上書きします。

     以前にマージに失敗したため、インデックスがマージされていないエント
     リを含んでいる可能性があります。デフォルトでは、インデックスからそ
     のようなエントリをチェックアウトしようとすると、チェックアウト操作
     は失敗し、何もチェックアウトされません。 ‘-f’ を使用すると、これら
     のマージされていないエントリは無視されます。マージの特定の側からの
     コンテンツは、 ‘--ours’ または ‘--theirs’ を使用してインデックスか
     らチェックアウトできます。 ‘-m’ を使用すると、作業ツリーファイルに
     加えられた変更を破棄して、元の競合するマージ結果を再作成できます。

_git checkout_ (-p|–patch) [<tree-ish>] [–] [<pathspec>…]
     これは以前のモードと似ていますが、対話的インターフェイスを使用して
     「diff」出力を表示し、その結果において使用するハンクを選択できます
     。 ‘--patch’ オプションの説明については、以下を参照してください。


OPTIONS
*******

‘-q’
‘--quiet’
     静かにします。フィードバックメッセージを抑制します。

‘--progress’
‘--no-progress’
     ‘--quiet’ が指定されていない限り、進行状況は、端末に接続されている
     場合、デフォルトで標準エラーストリームに報告されます。 このフラグは
     、 ‘--quiet’ に関係なく、端末に接続されていない場合でも進行状況のレ
     ポートを有効にします。

‘-f’
‘--force’
     ブランチを切り替えるときは、インデックスや作業ツリーが ‘HEAD’ と異
     なっていても続行します。これは、ローカルの変更を破棄するために使用
     されます。

     インデックスからパスをチェックアウトするときは、マージされていない
     エントリでエラーにしないでください。代わりに、マージされていないエ
     ントリは無視されます。

‘--ours’
‘--theirs’
     インデックスからパスをチェックアウトするときは、ステージ
     #2(_ours_)または#3(_theirs_)でマージされていないパスをチェックアウ
     トしてください。

     注意: ‘git rebase’ と ‘git pull --rebase’ での作業中、「ours」と「
     theirs」が入れ替わっているように見える場合があることに注意してくだ
     さい。 ‘--ours’ は、変更がリベースされるブランチからのバージョンを
     提供し、 ‘--theirs’ は、リベースされる作業を保持するブランチからの
     バージョンを提供します。

     これは、リモートでの履歴を共有の正規の履歴として扱うワークフローで
     ‘rebase’ が使用されているためです。リベースするブランチで行われた作
     業を、統合されるサードパーティの作業として扱います。そして、あなた
     は一時的にリベース中に正規の歴史の管理者の役割を引き受けています。
     正規の履歴の管理者として、リモートからの履歴を「私たち」(ours; つま
     り、「私達の共有された正規の履歴」)として表示する必要があり、サイド
     ブランチで行ったことは「彼ら」(theirs;つまり「その上での貢献者の作
     品」)として表示する必要があります。

‘-b <new_branch>’
     ‘<new_branch>’ という名前の新しいブランチを作成し、 ‘<start_point>’
     で開始します。詳細については、 git-branch(1) を参照してください。

‘-B <new_branch>’
     ブランチ ‘<new_branch>’ を作成し、 ‘<start_point>’ で開始します。す
     でに存在する場合は、 ‘<start_point>’ にリセットします。 これは、
     ‘-f’ を伴って ‘git branch’ を実行するのと同じです。詳細については、
     git-branch(1) を参照してください。

‘-t’
‘--track’
     新しいブランチを作成するときは、「アップストリーム構成」(upstream
     configuration)をセットアップします。 詳細については、
     git-branch(1)の ‘--track’ を参照してください。

     ‘-b`オプションが指定されていない場合、新しいブランチの名前は、対応
     するリモート用に構成されたrefspecのローカル部分を調べ、最初の部分を
     `*’ まで削除することにより、リモート追跡ブランチから派生させます。
     これにより、 ‘origin/hack’ (または ‘remotes/origin/hack’、 あるいは
     ‘refs/remotes/origin/hack’) から分岐するときに、ローカルブランチと
     して ‘hack’ を使用するように指示されます。指定された名前にスラッシ
     ュ(‘/’)がない場合、または上記の推測の結果が空の名前になる場合、推測
     は中止されます。このような場合は、 ‘-b’ を使用して明示的に名前を付
     けることができます。

‘--no-track’
     ‘branch.autoSetupMerge’ 構成変数がtrueであっても、「アップストリー
     ム構成」を設定しないでください。

‘--guess’
‘--no-guess’
     ‘<branch>‘が見つからないが、名前が一致する1つのリモート(
     ‘<remote>‘と呼びます)に追跡ブランチが存在する場合は、以下と同等とし
     てあつかいます

          $ git checkout -b <branch> --track <remote>/<branch>

     ブランチが複数のリモートに存在し、そのうちの1つが
     _checkout.defaultRemote_ 構成変数で名付けられている場合、
     _<branch>_ がすべてのリモートで一意でなくても、曖昧さ回避の目的でそ
     のブランチを使用します。例えば ‘checkout.defaultRemote=origin’ と設
     定すると、 _<branch>_ があいまいだが _origin_ リモート上に存在する
     場合、常にそこからリモートブランチをチェックアウトします。
     git-config(1) の _checkout.defaultRemote_ も参照してください。

     ‘--guess’ がデフォルトの振る舞いです。無効にするには、 ‘--no-guess’
     を使用します。

     デフォルトの振る舞いは、‘checkout.guess’ 構成変数を介して設定できま
     す。

‘-l’
     新しいブランチのreflogを作成します。詳細については、 git-branch(1)
     を参照してください。

‘-d’
‘--detach’
     ブランチをチェックアウトして作業するのではなく、検査と破棄可能な実
     験のためのコミットをチェックアウトします。 これは、 ‘<commit>’ がブ
     ランチ名でない場合の、 ‘git checkout <commit>’ のデフォルトの動作で
     す。 詳細については、以下の「DETACHED HEAD」セクションを参照してく
     ださい。

‘--orphan <new_branch>’
     ‘<start_point>’ から開始された ‘<new_branch>’ という名前の新しい _孤
     立した_ (orphan) ブランチを作成し、それに切り替えます。 この新しい
     ブランチで行われた最初のコミットには親がなく、他のすべてのブランチ
     とコミットから完全に切断された新しい履歴のルートになります。

     インデックスと作業ツリーは、以前に ‘git checkout <start_point>’ を
     実行した場合と同じように調整されます。これにより、 ルート(root)をコ
     ミットするために容易に ‘git commit -a’ 実行をでき、‘<start_point>’
     と同様のパスのセットを記録する新しい履歴を開始できます。

     これは、ツリーの完全な履歴を公開せずにコミットからツリーを公開する
     場合に便利です。これは、現在のツリーが「クリーン」であるが、完全な
     履歴にはプロプライエタリなコードやその他の邪魔なコードが含まれてい
     るプロジェクトの、オープンソースブランチを公開するためにこれを行う
     ことができます。

     ‘<start_point>’ のパスとはまったく異なるパスのセットを記録する切断
     された履歴を開始する場合は、作業ツリーの最上位から ‘git rm -rf .’ を
     実行して、孤立したブランチ(orphan branch)を作成した直後にインデック
     スと作業ツリーをクリアする必要があります。その後に、新しいファイル
     を準備したり、作業ツリーを再作成したり、他の場所からファイルをコピ
     ーしたり、tarballを抽出したりする準備が整います。

‘--ignore-skip-worktree-bits’
     スパースチェックアウトモード(sparse checkout mode)では、 ‘git
     checkout -- <paths>’ は、 ‘<paths>’ と一致するエントリと、
     ‘$GIT_DIR/info/sparse-checkout’ のスパースパターン(sparse
     patterns)のみを更新します。このオプションは、スパースパターンを無視
     し、 ‘<paths>’ 内のファイルを追加し直します。

‘-m’
‘--merge’
     ブランチを切り替えるときに、現在のブランチと切り替え先のブランチの
     間で異なる1つ以上のファイルにローカルの変更がある場合、コマンドは、
     コンテキストでの変更を保持するためにブランチの切り替えを拒否します
     。ただし、このオプションを使用すると、現在のブランチ、作業ツリーの
     内容、および新しいブランチの間の3方向のマージを実行してから新しいブ
     ランチに移動します。

     マージの競合が発生すると、競合するパスのインデックスエントリはマー
     ジされないままになります。競合を解決し、解決されたパスを ‘git add’（
     またはマージによってパスが削除される場合は ‘git rm’)でマークする必
     要があります。

     インデックスからパスをチェックアウトする場合、このオプションを使用
     すると、指定したパスで競合するマージを再作成できます。

     ‘--merge’ でブランチを切り替えると、ステージされた変更が失われる可
     能性があります。

‘--conflict=<style>’
     上記の ‘--merge’ オプションと同一ですが、競合するハンクの表示方法を
     変更し、 ‘merge.conflictStyle’ 構成変数をオーバーライドします。 可
     能な値は「merge」(デフォルト)と「diff3」(「merge」スタイルで表示さ
     れるものに加えて、元のコンテンツを表示する)です。

‘-p’
‘--patch’
     ‘<tree-ish>’ (または指定されていない場合はインデックス)と作業ツリー
     の間の差分でハンクを対話的に選択します。選択されたハンクは、作業ツ
     リー(‘<tree-ish>’ が指定されている場合はインデックス)に逆に適用され
     ます。

     これは、 ‘git checkout -p’ を使用して、現在の作業ツリーから編集を選
     択的に破棄できることを意味します。 ‘--patch’ モードの操作方法につい
     ては、 git-add(1) の「Interactive Mode」セクションを参照してくださ
     い。

     注意: このオプションはデフォルトでオーバーレイなしモードを使用しま
     す(‘--overlay’ も参照)。現在はオーバーレイモードをサポートしていな
     いことに注意してください。

‘--ignore-other-worktrees’
     ‘git checkout’ は、必要なrefが別のワークツリーによってすでにチェッ
     クアウトされている場合に拒否します。このオプションを使用すると、と
     にかくrefをチェックアウトできます。つまり、refを複数のワークツリー
     で保持できます。

‘--overwrite-ignore’
‘--no-overwrite-ignore’
     ブランチを切り替えるときに、無視したファイルを黙って上書きします。
     これがデフォルトの動作です。新しいブランチに無視したファイルが含ま
     れている場合に操作を中止するには、 ‘--no-overwrite-ignore’ を使用し
     ます。

‘--recurse-submodules’
‘--no-recurse-submodules’
     ‘--recurse-submodules’ を使用すると、スーパープロジェクトに記録され
     たコミットに従って、すべてのアクティブなサブモジュールのコンテンツ
     が更新されます。サブモジュールのローカル変更が上書きされる場合、
     ‘-f’ が使用されない限り、チェックアウトは失敗します。何も使用されて
     いない場合(または ‘--no-recurse-submodules’)、サブモジュールの作業
     ツリーは更新されません。 git-submodule(1) と同様に、これはサブモジ
     ュールの ‘HEAD’ を切り離します(detach)。

‘--overlay’
‘--no-overlay’
     デフォルトのオーバーレイモードでは、 ‘git checkout’ がインデックス
     または作業ツリーからファイルを削除することはありません。
     ‘--no-overlay’ を指定すると、インデックスと作業ツリーには表示される
     が、 ‘<tree-ish>’ には表示されないファイルが削除され、 ‘<tree-ish>’
     と完全に一致するようになります。

‘--pathspec-from-file=<file>’
     pathspecは、コマンドライン引数の代わりに ‘<file>’ で渡されます。
     ‘<file>’ が正確に ‘-’ の場合、標準入力が使用されます。pathspec要素
     は、LFまたはCR/LFで区切られます。pathspec要素は、構成変数
     ‘core.quotePath’ で説明されているように、クォートできます
     (git-config(1) 参照)。 ‘--pathspec-file-nul’ および グローバル
     ‘--literal-pathspecs’ も参照してください。

‘--pathspec-file-nul’
     ‘–pathspec-from-file‘でのみ意味があります。Pathspec要素はNUL文字で
     区切られ、他のすべての文字は文字通りに解釈されます(改行と引用符を含
     む)。

<branch>
     チェックアウトするブランチ。もしそれがブランチ(つまり、
     ‘refs/heads/’ を前につけたとき、有効なrefである名前)を参照している
     なら、そのブランチはチェックアウトされます。そうでない場合、もしそ
     れが有効なコミットを参照していれば、あなたの ‘HEAD’ は "detached" と
     なり、あなたはもはやどのブランチにもいません(詳しくは以下を参照して
     ください)。

     ‘@{-N}’ 構文を使用して、 ‘git checkout `操作を使用してチェックアウ
     トされた最後からN番目ブランチ/コミットを参照できます。 `@{-1}’ と同
     義の ‘-’ を指定することもできます。

     特殊なケースとして、マージベースが1つしかない場合は、 ‘A’ と ‘B’ の
     マージベースのショートカットとして ‘A...B’ を使用できます。 最大で
     ‘A’ と ‘B’ のどちらかを省略できます。その場合、デフォルトで ‘HEAD’
     になります。

<new_branch>
     新しいブランチの名前。

<start_point>
     新しいブランチを開始するコミットの名前。詳細については、
     git-branch(1) を参照してください。デフォルトは ‘HEAD’ です。

     特殊なケースとして、マージベースが1つしかない場合は、 ‘A’ と ‘B’ の
     マージベースのショートカットとして ‘A...B’ を使用できます。 最大で
     ‘A’ と ‘B’ のどちらかを省略できます。その場合、デフォルトで ‘HEAD’
     になります。

<tree-ish>
     チェックアウト元のツリー(パスが指定されている場合)。指定しない場合
     はインデックスが使用されます。

     特殊なケースとして、マージベースが1つしかない場合は、 ‘A’ と ‘B’ の
     マージベースのショートカットとして ‘A...B’ を使用できます。 最大で
     ‘A’ と ‘B’ のどちらかを省略できます。その場合、デフォルトで ‘HEAD’
     になります。

‘--’
     これ以降の引数をオプションとして解釈しないでください。

<pathspec>…
     操作の影響を受けるパスを制限します。

     詳細については、 gitglossary(7) の「pathspec」エントリを参照してく
     ださい。


DETACHED HEAD
*************

‘HEAD’ は通常、名前付きブランチ(‘master’ など)を指します。一方、各ブラン
チは特定のコミットを参照します。3つのコミットがあり、そのうちの1つがタグ
付けされており、ブランチ‘master‘ がチェックアウトされているリポジトリを
見てみましょう:

                HEAD (refers to branch 'master')
                 |
                 v
     a---b---c  branch 'master' (refers to commit 'c')
         ^
         |
       tag 'v2.0' (refers to commit 'b')

   この状態でコミットが作成されると、新しいコミットを参照するようにブラ
ンチが更新されます。 具体的には、 ‘git commit’ は、親がコミット ‘c’ であ
る新しいコミット ‘d’ を作成し、ブランチ ‘master’ を更新して新しい コミッ
ト ‘d’ を参照します。 ‘HEAD’ はまだブランチ ‘master’ を参照しているので
、間接的に コミット ‘d’ を参照するようになりました:

     $ edit; git add; git commit

                    HEAD (refers to branch 'master')
                     |
                     v
     a---b---c---d  branch 'master' (refers to commit 'd')
         ^
         |
       tag 'v2.0' (refers to commit 'b')

   名前付きブランチの先端にないコミットをチェックアウトしたり、名前付き
ブランチによって参照されていない新しいコミットを作成したりできると便利な
場合があります。 コミット ‘b’ をチェックアウトするとどうなるか見てみまし
ょう(ここでは、これを行う2つの方法を示します):

     $ git checkout v2.0  # or
     $ git checkout master^^

        HEAD (refers to commit 'b')
         |
         v
     a---b---c---d  branch 'master' (refers to commit 'd')
         ^
         |
       tag 'v2.0' (refers to commit 'b')

   使用するcheckoutコマンドに関係なく、 ‘HEAD’ はコミット ‘b’ を直接参照
するようになりました。 これは、切り離された ‘HEAD’ (detached HEAD)状態に
あることとして知られています。これは、名前付きブランチを参照するのではな
く、単に ‘HEAD’ が特定のコミットを参照することを意味します。この状態でコ
ミットを作成するとどうなるか見てみましょう:

     $ edit; git add; git commit

          HEAD (refers to commit 'e')
           |
           v
           e
          /
     a---b---c---d  branch 'master' (refers to commit 'd')
         ^
         |
       tag 'v2.0' (refers to commit 'b')

   新しいコミット ‘e’ がありますが、これは ‘HEAD’ によってのみ参照されま
す。 もちろん、この状態でさらに別のコミットを追加できます:

     $ edit; git add; git commit

              HEAD (refers to commit 'f')
               |
               v
           e---f
          /
     a---b---c---d  branch 'master' (refers to commit 'd')
         ^
         |
       tag 'v2.0' (refers to commit 'b')

   実際、私達は通常のGit操作はすべて実行できます。 しかし、ここで私達が
‘master’ をチェックアウトするとどうなるか見てみましょう:

     $ git checkout master

                    HEAD (refers to branch 'master')
           e---f     |
          /          v
     a---b---c---d  branch 'master' (refers to commit 'd')
         ^
         |
       tag 'v2.0' (refers to commit 'b')

   この時点で、コミット ‘f’ を指しているものは何もないことを理解すること
が重要です。最終的に、コミット ‘f’ (および拡張によりコミット ‘e’ )は、あ
なたがルーチンのGitガベージコレクションプロセス前に参照を作成しない限り
、ルーチンのGitガベージコレクションプロセスによって削除されます。あなた
が、まだコミット‘f‘から離れていない場合、以下のいずれかがそれへの参照を
作成します:

     $ git checkout -b foo   (1)
     $ git branch foo        (2)
     $ git tag foo           (3)

*note (1): CO1-1.
     コミット ‘f’ を参照する新しいブランチ ‘foo’ を作成し、次にブランチ
     ‘foo’ を参照するように‘HEAD‘を更新します。つまり、このコマンドを実
     行すると、もはや切り離された‘HEAD‘ (detached HEAD)状態では無くなり
     ます。

*note (2): CO1-2.
     同様に、コミット ‘f’ を参照する新しいブランチ ‘foo’ を作成しますが
     、 ‘HEAD’ は切り離されたままにします。

*note (3): CO1-3.
     新しいタグ ‘foo’ を作成します。これは、‘HEAD’ を切り離したままコミ
     ット ‘f’ を参照します。

   私達がうっかり ‘f’ から離れてしまった場合は、最初にそのオブジェクト名
を回復する必要があり(通常は ‘git reflog’ を使用)、次にそれへの参照を作成
できます。 たとえば、 ‘HEAD’ が参照した最後の2つのコミットを確認するには
、以下のいずれかのコマンドを使用できます:

     $ git reflog -2 HEAD # or
     $ git log -g -2 HEAD


ARGUMENT DISAMBIGUATION(引数の曖昧性解消)
*****************************************

与えられた引数が1つだけで、それが ‘--’ ではない場合(例: ‘git checkout
abc’)や、引数が有効な ‘<tree-ish>’ (例:ブランチ ‘abc’ が存在する)や、有
効な ‘<pathspec>’ (たとえば、 "abc" という名前のファイルまたはディレクト
リが存在する)な場合、Gitは通常、明確にするように求めます。ただし、ブラン
チのチェックアウトは非常に一般的な操作であるため、このような状況では、
‘git checkout abc’ は "abc" を ‘<tree-ish>’ と見なします。これらのパスを
インデックスからチェックアウトする場合は、 ‘git checkout -- <pathspec>’
を使用します。


EXAMPLES
********

  1. 以下のシーケンスは、 ‘master’ ブランチをチェックアウトし、
     ‘Makefile’ のリビジョンを2つ戻し、誤って ‘hello.c’ を削除したので、
     ‘hello.c’ をインデックスから取得します。

          $ git checkout master             (1)
          $ git checkout master~2 Makefile  (2)
          $ rm -f hello.c
          $ git checkout hello.c            (3)

     *note (1): CO2-1.
          ブランチを切り替えます

     *note (2): CO2-2.
          別のコミットからファイルを取り出します

     *note (3): CO2-3.
          インデックスから ‘hello.c’ を復元します

          あなたがインデックスから「すべての」Cソースファイルをチェック
          アウトしたい場合は、以下のように言うことができます

               $ git checkout -- '*.c'

          ‘*.c’ を囲む引用符に注意してください。 ファイル ‘hello.c’ も、
          作業ツリーに存在していなくてもチェックアウトされます。これは、
          (引用符で囲む事で作業ツリーに対してシェル展開するのではなくて
          )ファイルグロブがインデックスのエントリを照合するために使用さ
          れるためです。

          ‘hello.c’ という名前の不幸なブランチがある場合、このステップは
          そのブランチに切り替えるための指示として混乱を産みます。あなた
          は代わりに以下のように書く必要があります。

               $ git checkout -- hello.c

  2. 間違ったブランチで作業した後、正しいブランチへの切り替えは以下を使
     用して行います:

          $ git checkout mytopic

     ただし、あなたの「間違った」ブランチと正しい ‘mytopic’ ブランチは、
     ローカルで変更したファイルで異なる場合があります。その場合、上記の
     チェックアウトは以下のように失敗します:

          $ git checkout mytopic
          error: You have local changes to 'frotz'; not switching branches.

     コマンドに ‘-m’ フラグを指定すると、3方向のマージを試みます:

          $ git checkout -m mytopic
          Auto-merging frotz

     この3方向マージの後、ローカルの変更はインデックスファイルに登録され
     ないため、 ‘git diff’ は、新しいブランチの先端以降に行った変更を表
     示します。

  3. ‘-m’ オプションを使用してブランチを切り替えるときにマージの競合が発
     生すると、以下のように表示されます:

          $ git checkout -m mytopic
          Auto-merging frotz
          ERROR: Merge conflict in frotz
          fatal: merge program failed

     この時点で、 ‘git diff’ は、前の例のようにきれいにマージされた変更
     と、競合するファイルの変更を示しています。 競合を編集して解決し、通
     常どおり ‘git add’ で解決済みのマークを付けます。

          $ edit frotz
          $ git add frotz


SEE ALSO
********

git-switch(1), git-restore(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-cherry-pick,  Up: Top

Name
****

git-cherry-pick — Apply the changes introduced by some existing commits


Synopsis
********

     git cherry-pick [–edit] [-n] [-m parent-number] [-s] [-x] [–ff]
                       [-S[<keyid>]] <commit>…
     git cherry-pick (–continue | –skip | –abort | –quit)


DESCRIPTION
***********

Given one or more existing commits, apply the change each one
introduces, recording a new commit for each.  This requires your working
tree to be clean (no modifications from the HEAD commit).

   When it is not obvious how to apply a change, the following happens:

  1. The current branch and ‘HEAD’ pointer stay at the last commit
     successfully made.

  2. The ‘CHERRY_PICK_HEAD’ ref is set to point at the commit that
     introduced the change that is difficult to apply.

  3. Paths in which the change applied cleanly are updated both in the
     index file and in your working tree.

  4. For conflicting paths, the index file records up to three versions,
     as described in the "TRUE MERGE" section of git-merge(1).  The
     working tree files will include a description of the conflict
     bracketed by the usual conflict markers ‘<<<<<<<’ and ‘>>>>>>>’.

  5. No other modifications are made.

   See git-merge(1) for some hints on resolving such conflicts.


OPTIONS
*******

<commit>…
     Commits to cherry-pick.  For a more complete list of ways to spell
     commits, see gitrevisions(7).  Sets of commits can be passed but no
     traversal is done by default, as if the ‘--no-walk’ option was
     specified, see git-rev-list(1).  Note that specifying a range will
     feed all <commit>… arguments to a single revision walk (see a later
     example that uses _maint master..next_).

‘-e’
‘--edit’
     With this option, _git cherry-pick_ will let you edit the commit
     message prior to committing.

‘--cleanup=<mode>’
     This option determines how the commit message will be cleaned up
     before being passed on to the commit machinery.  See git-commit(1)
     for more details.  In particular, if the _<mode>_ is given a value
     of ‘scissors’, scissors will be appended to ‘MERGE_MSG’ before
     being passed on in the case of a conflict.

‘-x’
     When recording the commit, append a line that says "(cherry picked
     from commit …)" to the original commit message in order to indicate
     which commit this change was cherry-picked from.  This is done only
     for cherry picks without conflicts.  Do not use this option if you
     are cherry-picking from your private branch because the information
     is useless to the recipient.  If on the other hand you are
     cherry-picking between two publicly visible branches (e.g.
     backporting a fix to a maintenance branch for an older release from
     a development branch), adding this information can be useful.

‘-r’
     It used to be that the command defaulted to do ‘-x’ described
     above, and ‘-r’ was to disable it.  Now the default is not to do
     ‘-x’ so this option is a no-op.

‘-m parent-number’
‘--mainline parent-number’
     Usually you cannot cherry-pick a merge because you do not know
     which side of the merge should be considered the mainline.  This
     option specifies the parent number (starting from 1) of the
     mainline and allows cherry-pick to replay the change relative to
     the specified parent.

‘-n’
‘--no-commit’
     Usually the command automatically creates a sequence of commits.
     This flag applies the changes necessary to cherry-pick each named
     commit to your working tree and the index, without making any
     commit.  In addition, when this option is used, your index does not
     have to match the HEAD commit.  The cherry-pick is done against the
     beginning state of your index.

     This is useful when cherry-picking more than one commits’ effect to
     your index in a row.

‘-s’
‘--signoff’
     Add a ‘Signed-off-by’ trailer at the end of the commit message.
     See the signoff option in git-commit(1) for more information.

‘-S[<keyid>]’
‘--gpg-sign[=<keyid>]’
‘--no-gpg-sign’
     GPG-sign commits.  The ‘keyid’ argument is optional and defaults to
     the committer identity; if specified, it must be stuck to the
     option without a space.  ‘--no-gpg-sign’ is useful to countermand
     both ‘commit.gpgSign’ configuration variable, and earlier
     ‘--gpg-sign’.

‘--ff’
     If the current HEAD is the same as the parent of the cherry-pick’ed
     commit, then a fast forward to this commit will be performed.

‘--allow-empty’
     By default, cherry-picking an empty commit will fail, indicating
     that an explicit invocation of ‘git commit --allow-empty’ is
     required.  This option overrides that behavior, allowing empty
     commits to be preserved automatically in a cherry-pick.  Note that
     when "–ff" is in effect, empty commits that meet the "fast-forward"
     requirement will be kept even without this option.  Note also, that
     use of this option only keeps commits that were initially empty
     (i.e.  the commit recorded the same tree as its parent).  Commits
     which are made empty due to a previous commit are dropped.  To
     force the inclusion of those commits use
     ‘--keep-redundant-commits’.

‘--allow-empty-message’
     By default, cherry-picking a commit with an empty message will
     fail.  This option overrides that behavior, allowing commits with
     empty messages to be cherry picked.

‘--keep-redundant-commits’
     If a commit being cherry picked duplicates a commit already in the
     current history, it will become empty.  By default these redundant
     commits cause ‘cherry-pick’ to stop so the user can examine the
     commit.  This option overrides that behavior and creates an empty
     commit object.  Implies ‘--allow-empty’.

‘--strategy=<strategy>’
     Use the given merge strategy.  Should only be used once.  See the
     MERGE STRATEGIES section in git-merge(1) for details.

‘-X<option>’
‘--strategy-option=<option>’
     Pass the merge strategy-specific option through to the merge
     strategy.  See git-merge(1) for details.

‘--rerere-autoupdate’
‘--no-rerere-autoupdate’
     Allow the rerere mechanism to update the index with the result of
     auto-conflict resolution if possible.


SEQUENCER SUBCOMMANDS
*********************

‘--continue’
     ‘.git/sequencer’ の情報を使用して、進行中の操作の続行を行います。失
     敗したcherry-pickまたはrevertの競合を解決した後、続行するために使用
     できます。

‘--skip’
     現在のコミットをスキップして、残りのシーケンスを続行します。

‘--quit’
     進行中の今回の操作を忘れてください。チェリーピックまたはrevertに失
     敗した後、シーケンサーの状態をクリアするために使用できます。

‘--abort’
     操作をキャンセルして、シーケンス操作前の状態に戻ります。


EXAMPLES
********

‘git cherry-pick master’
     Apply the change introduced by the commit at the tip of the master
     branch and create a new commit with this change.

‘git cherry-pick ..master’
‘git cherry-pick ^HEAD master’
     Apply the changes introduced by all commits that are ancestors of
     master but not of HEAD to produce new commits.

‘git cherry-pick maint next ^master’
‘git cherry-pick maint master..next’
     Apply the changes introduced by all commits that are ancestors of
     maint or next, but not master or any of its ancestors.  Note that
     the latter does not mean ‘maint’ and everything between ‘master’
     and ‘next’; specifically, ‘maint’ will not be used if it is
     included in ‘master’.

‘git cherry-pick master~4 master~2’
     Apply the changes introduced by the fifth and third last commits
     pointed to by master and create 2 new commits with these changes.

‘git cherry-pick -n master~1 next’
     Apply to the working tree and the index the changes introduced by
     the second last commit pointed to by master and by the last commit
     pointed to by next, but do not create any commit with these
     changes.

‘git cherry-pick --ff ..next’
     If history is linear and HEAD is an ancestor of next, update the
     working tree and advance the HEAD pointer to match next.
     Otherwise, apply the changes introduced by those commits that are
     in next but not HEAD to the current branch, creating a new commit
     for each new change.

‘git rev-list --reverse master -- README | git cherry-pick -n --stdin’
     Apply the changes introduced by all commits on the master branch
     that touched README to the working tree and index, so the result
     can be inspected and made into a single new commit if suitable.

   The following sequence attempts to backport a patch, bails out
because the code the patch applies to has changed too much, and then
tries again, this time exercising more care about matching up context
lines.

     $ git cherry-pick topic^             (1)
     $ git diff                           (2)
     $ git reset --merge ORIG_HEAD        (3)
     $ git cherry-pick -Xpatience topic^  (4)

*note (1): CO1-1.
     apply the change that would be shown by ‘git show topic^’.  In this
     example, the patch does not apply cleanly, so information about the
     conflict is written to the index and working tree and no new commit
     results.

*note (2): CO1-2.
     summarize changes to be reconciled

*note (3): CO1-3.
     cancel the cherry-pick.  In other words, return to the
     pre-cherry-pick state, preserving any local modifications you had
     in the working tree.

*note (4): CO1-4.
     try to apply the change introduced by ‘topic^’ again, spending
     extra time to avoid mistakes based on incorrectly matching context
     lines.


SEE ALSO
********

git-revert(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-cherry,  Up: Top

Name
****

git-cherry — アップストリームにまだ適用されていないコミットを検索する


Synopsis
********

     git cherry [-v] [<upstream> [<head> [<limit>]]]


DESCRIPTION
***********

‘<head>..<upstream>’ に ‘<limit>..<head>’ の範囲と同等のコミットがあるか
どうかを検査(determine)します。

   等価性テストは、空白と行番号を削除した後のdiffに基づいています。した
がって、git-cherry は、 git-cherry-pick(1) または git-am(1) または
git-rebase(1) を使用してコミットが「コピー」された時に検出します。

   ‘<limit>..<head>’ の範囲のすべてのコミットのSHA1を出力し、 <upstream>
に同等のものがあるコミットの場合は ‘-’ を接頭辞として付け、そうでないコ
ミットの場合は ‘+’ を接頭辞として付けます。


OPTIONS
*******

‘-v’
     SHA1の横にコミット件名(commit subject)を表示します。

<upstream>
     同等のコミットを検索するためのアップストリームブランチ。デフォルト
     はHEADのアップストリームブランチです。

<head>
     作業ブランチ。デフォルトはHEADです。

<limit>
     コミットをlimitまで(limitを含む)報告しないでください。


EXAMPLES
********


Patch workflows
===============

git-cherryは、パッチベースのワークフロー(gitworkflows(7) 参照)で頻繁に使
用され、一連のパッチがアップストリームメンテナによって適用されているかど
うかを判断します。このようなワークフローでは、以下のようなトピックブラン
チを作成して送信できます:

     $ git checkout -b topic origin/master
     # work and create some commits
     $ git format-patch origin/master
     $ git send-email ... 00*

   後で、あなたは(まだ ‘topic’ に居る時に、)次のように言うことで、変更が
適用されたかどうかを確認できます:

     $ git fetch  # update your notion of origin/master
     $ git cherry -v


Concrete example
================

トピックが3つのコミットで構成され、メンテナがそのうちの2つを適用した状況
では、状況は以下のようになります:

     $ git log --graph --oneline --decorate --boundary origin/master...topic
     * 7654321 (origin/master) upstream tip commit
     [... snip some other commits ...]
     * cccc111 cherry-pick of C
     * aaaa111 cherry-pick of A
     [... snip a lot more that has happened ...]
     | * cccc000 (topic) commit C
     | * bbbb000 commit B
     | * aaaa000 commit A
     |/
     o 1234567 branch point

   このような場合、git-cherryはまだ適用されていないモノの簡潔な要約を示
します:

     $ git cherry origin/master topic
     - cccc000... commit C
     + bbbb000... commit B
     - aaaa000... commit A

   ここで、(‘-’ でマークされている)コミットAとCは、 ‘origin/master’ のト
ップでリベースすると、トピックブランチから削除できますが、（‘+’ でマーク
されている)コミットBは ‘origin/master’ にapplyするために送信されるために
、まだ保持しつづける必要があります。


Using a limit
=============

オプションの <limit> は、あなたのトピックがアップストリームにない他の作
業に基づいている場合に役立ちます。前の例を拡張すると、これは以下のように
なります:

     $ git log --graph --oneline --decorate --boundary origin/master...topic
     * 7654321 (origin/master) upstream tip commit
     [... snip some other commits ...]
     * cccc111 cherry-pick of C
     * aaaa111 cherry-pick of A
     [... snip a lot more that has happened ...]
     | * cccc000 (topic) commit C
     | * bbbb000 commit B
     | * aaaa000 commit A
     | * 0000fff (base) unpublished stuff F
     [... snip ...]
     | * 0000aaa unpublished stuff A
     |/
     o 1234567 merge-base between upstream and topic

   制限として ‘base’ を指定することで、 ‘base’ と ‘topic’ の間のコミット
をリストすることを回避できます:

     $ git cherry origin/master topic base
     - cccc000... commit C
     + bbbb000... commit B
     - aaaa000... commit A


SEE ALSO
********

git-patch-id(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-citool,  Up: Top

Name
****

git-citool — git-commitのグラフィカルな代替手段


Synopsis
********

     git citool


DESCRIPTION
***********

Tcl/Tkベースのグラフィカルインターフェイス。変更されたファイルを確認し、
それらをインデックスにステージングし、コミットメッセージを入力して、新し
いコミットを現在のブランチに記録します。このインターフェースは、インタラ
クティブ性の低い’git commit’プログラムの代替手段です。

   ’git citool’は実際には‘git gui citool‘の標準エイリアスです。詳細につ
いては、git-gui(1)を参照してください。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-clean,  Up: Top

Name
****

git-clean — 作業ツリーから追跡されていないファイルを削除する


Synopsis
********

     git clean [-d] [-f] [-i] [-n] [-q] [-e <pattern>] [-x | -X] [–] <path>…


DESCRIPTION
***********

現在のディレクトリから開始して、バージョン管理下にないファイルを再帰的に
削除することにより、作業ツリーをクリーンにします。

   通常、Gitが追跡していないファイルのみが削除されますが、 ‘-x’ オプショ
ンが指定されている場合、無視されたファイル(ignored files)も削除されます
。これは、たとえば、ビルドでの生成物全てを削除するのに役立ちます。

   オプションで、任意の数の ‘<path> ...’ 引数を指定すると、それらのパス
のみが影響を受けます。


OPTIONS
*******

‘-d’
     通常、<path> が指定されていない場合、削除が多すぎるのを避けるために
     、git cleanは追跡されていないディレクトリ内には再帰処理しません。
     ‘-d’ を指定すると、そのようなディレクトリ内でも再帰的に処理します。
     パスが指定されている場合、 ‘-d’ は関係ありません。(‘--force’ で言及
     されているネストされたgitディレクトリを除く、)指定されたパスに一致
     するすべての追跡されていないファイルは削除されます。

‘-f’
‘--force’
     Git構成変数 clean.requireForce が false に設定されてい無い場合、「
     git clean」は、 ‘-f’ または ‘-i’ が指定されていない限り、ファイルま
     たはディレクトリの削除を拒否します。 2つ目の ‘-f’ が指定されていな
     い限り、Gitは追跡されていないネストされたgitリポジトリ(.gitサブディ
     レクトリを持つディレクトリ)の変更を拒否します。

‘-i’
‘--interactive’
     何が行われるを示し、ファイルを対話的にクリーンアップします。 詳細は
     「Interactive mode」を参照してください。

‘-n’
‘--dry-run’
     実際には何も削除せず、何が行われるかを表示します。

‘-q’
‘--quiet’
     静かにして、エラーのみを報告し、正常に削除されたファイルは報告しな
     いでください。

‘-e <pattern>’
‘--exclude=<pattern>’
     標準の無視ルールに加えて、指定の除外パターンを使用します
     (gitignore(5) 参照)。

‘-x’
     標準の無視ルール(gitignore(5) 参照)を使用しないでください。ただし、
     コマンドラインから ‘-e’ オプションを指定して指定された無視ルールは
     使用してください。これにより、ビルド生成物を含む、追跡されていない
     すべてのファイルを削除できます。これを使用して（おそらく「git
     restore」または「git reset」と組み合わせて）、ビルドをテストするた
     めのクリーンな、元の作業ディレクトリを作成できます。

‘-X’
     Gitによって無視されたファイルのみを削除します。これは、すべてを最初
     から再構築するのに役立つ場合がありますが、手動で作成したファイルは
     保持します。


Interactive mode
****************

コマンドがinteractive modeに入ると、クリーンアップするファイルとディレク
トリが表示され、インタラクティブコマンドループに入ります。

   コマンドループは、使用可能なサブコマンドのリストを表示し、「Whatnow>
」というプロンプトを表示します。一般に、プロンプトが単一の「>」で終わる
場合、以下のように、選択肢の1つだけを選択し、ENTERキーを押します:

         *** Commands ***
             1: clean                2: filter by pattern    3: select by numbers
             4: ask each             5: quit                 6: help
         What now> 1

   選択が一意である限り、上記は「c」または「clean」と打ち込む事もできま
す。

   メインコマンドループには6つのサブコマンドがあります。

clean
     ファイルとディレクトリのクリーニングを開始して、終了(quit)します。

filter by pattern
     これにより、削除するファイルとディレクトリが表示され、「Input
     ignore patterns>>」(入力無視パターン)プロンプトが表示されます。スペ
     ースで区切られたパターンを入力して、ファイルとディレクトリを削除か
     ら除外できます。 例えば。 「* .c * .h」は、「.c」と「.h」で終わるフ
     ァイルを削除から除外します。そして、結果に満足したら、ENTER を押し
     てメインメニューに戻ります。

select by numbers
     これにより、削除するファイルとディレクトリが表示され、「Select
     items to delete>>」(削除するアイテムを選択)というプロンプトが表示さ
     れます。プロンプトがこのように二重の「>>」で終わる場合、空白または
     コンマで連結して複数の選択を行うことができます。また、あなたは範囲
     を伝えることができます。 例えば「2-57,9」でリストから2,3,4,5,7,9を
     選択します。範囲の2番目の数値を省略すると、残りのすべての項目が選択
     されます。 例えば「7-」はリストから7,8,9を選択します。「*」dで全て
     を選択できます。そして、結果に満足したら、ENTER を押してメインメニ
     ューに戻ります。

ask each
     これはクリーニングが始まると、アイテムを削除するために一つずつ確認
     する必要があります。この操作は、上記の2つのアクションほど効率的では
     ないことに注意してください。

quit
     これにより、クリーニングを行わずに終了(quit)できます。

help
     git-cleanの対話的な簡単な使用法を示します。


SEE ALSO
********

gitignore(5)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-clone,  Up: Top

Name
****

git-clone — Clone a repository into a new directory


Synopsis
********

     git clone [–template=<template_directory>]
               [-l] [-s] [–no-hardlinks] [-q] [-n] [–bare] [–mirror]
               [-o <name>] [-b <name>] [-u <upload-pack>] [–reference <repository>]
               [–dissociate] [–separate-git-dir <git dir>]
               [–depth <depth>] [–[no-]single-branch] [–no-tags]
               [–recurse-submodules[=<pathspec>]] [–[no-]shallow-submodules]
               [–[no-]remote-submodules] [–jobs <n>] [–sparse] [–[no-]reject-shallow]
               [–filter=<filter>] [–] <repository>
               [<directory>]


DESCRIPTION
***********

Clones a repository into a newly created directory, creates
remote-tracking branches for each branch in the cloned repository
(visible using ‘git branch --remotes’), and creates and checks out an
initial branch that is forked from the cloned repository’s currently
active branch.

   After the clone, a plain ‘git fetch’ without arguments will update
all the remote-tracking branches, and a ‘git pull’ without arguments
will in addition merge the remote master branch into the current master
branch, if any (this is untrue when "–single-branch" is given; see
below).

   This default configuration is achieved by creating references to the
remote branch heads under ‘refs/remotes/origin’ and by initializing
‘remote.origin.url’ and ‘remote.origin.fetch’ configuration variables.


OPTIONS
*******

‘-l’
‘--local’
     When the repository to clone from is on a local machine, this flag
     bypasses the normal "Git aware" transport mechanism and clones the
     repository by making a copy of HEAD and everything under objects
     and refs directories.  The files under ‘.git/objects/’ directory
     are hardlinked to save space when possible.

     If the repository is specified as a local path (e.g.,
     ‘/path/to/repo’), this is the default, and –local is essentially a
     no-op.  If the repository is specified as a URL, then this flag is
     ignored (and we never use the local optimizations).  Specifying
     ‘--no-local’ will override the default when ‘/path/to/repo’ is
     given, using the regular Git transport instead.

     *NOTE*: this operation can race with concurrent modification to the
     source repository, similar to running ‘cp -r src dst’ while
     modifying ‘src’.

‘--no-hardlinks’
     Force the cloning process from a repository on a local filesystem
     to copy the files under the ‘.git/objects’ directory instead of
     using hardlinks.  This may be desirable if you are trying to make a
     back-up of your repository.

‘-s’
‘--shared’
     When the repository to clone is on the local machine, instead of
     using hard links, automatically setup
     ‘.git/objects/info/alternates’ to share the objects with the source
     repository.  The resulting repository starts out without any object
     of its own.

     *NOTE*: this is a possibly dangerous operation; do *not* use it
     unless you understand what it does.  If you clone your repository
     using this option and then delete branches (or use any other Git
     command that makes any existing commit unreferenced) in the source
     repository, some objects may become unreferenced (or dangling).
     These objects may be removed by normal Git operations (such as ‘git
     commit’) which automatically call ‘git maintenance run --auto’.
     (See git-maintenance(1).)  If these objects are removed and were
     referenced by the cloned repository, then the cloned repository
     will become corrupt.

     Note that running ‘git repack’ without the ‘--local’ option in a
     repository cloned with ‘--shared’ will copy objects from the source
     repository into a pack in the cloned repository, removing the disk
     space savings of ‘clone --shared’.  It is safe, however, to run
     ‘git gc’, which uses the ‘--local’ option by default.

     If you want to break the dependency of a repository cloned with
     ‘--shared’ on its source repository, you can simply run ‘git repack
     -a’ to copy all objects from the source repository into a pack in
     the cloned repository.

‘--reference[-if-able] <repository>’
     If the reference repository is on the local machine, automatically
     setup ‘.git/objects/info/alternates’ to obtain objects from the
     reference repository.  Using an already existing repository as an
     alternate will require fewer objects to be copied from the
     repository being cloned, reducing network and local storage costs.
     When using the ‘--reference-if-able’, a non existing directory is
     skipped with a warning instead of aborting the clone.

     *NOTE*: see the NOTE for the ‘--shared’ option, and also the
     ‘--dissociate’ option.

‘--dissociate’
     Borrow the objects from reference repositories specified with the
     ‘--reference’ options only to reduce network transfer, and stop
     borrowing from them after a clone is made by making necessary local
     copies of borrowed objects.  This option can also be used when
     cloning locally from a repository that already borrows objects from
     another repository—the new repository will borrow objects from the
     same repository, and this option can be used to stop the borrowing.

‘-q’
‘--quiet’
     Operate quietly.  Progress is not reported to the standard error
     stream.

‘-v’
‘--verbose’
     Run verbosely.  Does not affect the reporting of progress status to
     the standard error stream.

‘--progress’
     Progress status is reported on the standard error stream by default
     when it is attached to a terminal, unless ‘--quiet’ is specified.
     This flag forces progress status even if the standard error stream
     is not directed to a terminal.

‘--server-option=<option>’
     Transmit the given string to the server when communicating using
     protocol version 2.  The given string must not contain a NUL or LF
     character.  The server’s handling of server options, including
     unknown ones, is server-specific.  When multiple
     ‘--server-option=<option>’ are given, they are all sent to the
     other side in the order listed on the command line.

‘-n’
‘--no-checkout’
     No checkout of HEAD is performed after the clone is complete.

‘--[no-]reject-shallow’
     Fail if the source repository is a shallow repository.  The
     _clone.rejectShallow_ configuration variable can be used to specify
     the default.

‘--bare’
     Make a _bare_ Git repository.  That is, instead of creating
     ‘<directory>’ and placing the administrative files in
     ‘<directory>/.git’, make the ‘<directory>’ itself the ‘$GIT_DIR’.
     This obviously implies the ‘--no-checkout’ because there is nowhere
     to check out the working tree.  Also the branch heads at the remote
     are copied directly to corresponding local branch heads, without
     mapping them to ‘refs/remotes/origin/’.  When this option is used,
     neither remote-tracking branches nor the related configuration
     variables are created.

‘--sparse’
     Initialize the sparse-checkout file so the working directory starts
     with only the files in the root of the repository.  The
     sparse-checkout file can be modified to grow the working directory
     as needed.

‘--filter=<filter-spec>’
     Use the partial clone feature and request that the server sends a
     subset of reachable objects according to a given object filter.
     When using ‘--filter’, the supplied ‘<filter-spec>’ is used for the
     partial clone filter.  For example, ‘--filter=blob:none’ will
     filter out all blobs (file contents) until needed by Git.  Also,
     ‘--filter=blob:limit=<size>’ will filter out all blobs of size at
     least ‘<size>’.  For more details on filter specifications, see the
     ‘--filter’ option in git-rev-list(1).

‘--mirror’
     Set up a mirror of the source repository.  This implies ‘--bare’.
     Compared to ‘--bare’, ‘--mirror’ not only maps local branches of
     the source to local branches of the target, it maps all refs
     (including remote-tracking branches, notes etc.)  and sets up a
     refspec configuration such that all these refs are overwritten by a
     ‘git remote update’ in the target repository.

‘-o <name>’
‘--origin <name>’
     Instead of using the remote name ‘origin’ to keep track of the
     upstream repository, use ‘<name>’.  Overrides
     ‘clone.defaultRemoteName’ from the config.

‘-b <name>’
‘--branch <name>’
     Instead of pointing the newly created HEAD to the branch pointed to
     by the cloned repository’s HEAD, point to ‘<name>’ branch instead.
     In a non-bare repository, this is the branch that will be checked
     out.  ‘--branch’ can also take tags and detaches the HEAD at that
     commit in the resulting repository.

‘-u <upload-pack>’
‘--upload-pack <upload-pack>’
     When given, and the repository to clone from is accessed via ssh,
     this specifies a non-default path for the command run on the other
     end.

‘--template=<template_directory>’
     Specify the directory from which templates will be used; (See the
     "TEMPLATE DIRECTORY" section of git-init(1).)

‘-c <key>=<value>’
‘--config <key>=<value>’
     Set a configuration variable in the newly-created repository; this
     takes effect immediately after the repository is initialized, but
     before the remote history is fetched or any files checked out.  The
     key is in the same format as expected by git-config(1) (e.g.,
     ‘core.eol=true’).  If multiple values are given for the same key,
     each value will be written to the config file.  This makes it safe,
     for example, to add additional fetch refspecs to the origin remote.

     Due to limitations of the current implementation, some
     configuration variables do not take effect until after the initial
     fetch and checkout.  Configuration variables known to not take
     effect are: ‘remote.<name>.mirror’ and ‘remote.<name>.tagOpt’.  Use
     the corresponding ‘--mirror’ and ‘--no-tags’ options instead.

‘--depth <depth>’
     Create a _shallow_ clone with a history truncated to the specified
     number of commits.  Implies ‘--single-branch’ unless
     ‘--no-single-branch’ is given to fetch the histories near the tips
     of all branches.  If you want to clone submodules shallowly, also
     pass ‘--shallow-submodules’.

‘--shallow-since=<date>’
     Create a shallow clone with a history after the specified time.

‘--shallow-exclude=<revision>’
     Create a shallow clone with a history, excluding commits reachable
     from a specified remote branch or tag.  This option can be
     specified multiple times.

‘--[no-]single-branch’
     Clone only the history leading to the tip of a single branch,
     either specified by the ‘--branch’ option or the primary branch
     remote’s ‘HEAD’ points at.  Further fetches into the resulting
     repository will only update the remote-tracking branch for the
     branch this option was used for the initial cloning.  If the HEAD
     at the remote did not point at any branch when ‘--single-branch’
     clone was made, no remote-tracking branch is created.

‘--no-tags’
     Don’t clone any tags, and set ‘remote.<remote>.tagOpt=--no-tags’ in
     the config, ensuring that future ‘git pull’ and ‘git fetch’
     operations won’t follow any tags.  Subsequent explicit tag fetches
     will still work, (see git-fetch(1)).

     Can be used in conjunction with ‘--single-branch’ to clone and
     maintain a branch with no references other than a single cloned
     branch.  This is useful e.g.  to maintain minimal clones of the
     default branch of some repository for search indexing.

‘--recurse-submodules[=<pathspec>]’
     After the clone is created, initialize and clone submodules within
     based on the provided pathspec.  If no pathspec is provided, all
     submodules are initialized and cloned.  This option can be given
     multiple times for pathspecs consisting of multiple entries.  The
     resulting clone has ‘submodule.active’ set to the provided
     pathspec, or "."  (meaning all submodules) if no pathspec is
     provided.

     Submodules are initialized and cloned using their default settings.
     This is equivalent to running ‘git submodule update --init
     --recursive <pathspec>’ immediately after the clone is finished.
     This option is ignored if the cloned repository does not have a
     worktree/checkout (i.e.  if any of ‘--no-checkout’/‘-n’, ‘--bare’,
     or ‘--mirror’ is given)

‘--[no-]shallow-submodules’
     All submodules which are cloned will be shallow with a depth of 1.

‘--[no-]remote-submodules’
     All submodules which are cloned will use the status of the
     submodule’s remote-tracking branch to update the submodule, rather
     than the superproject’s recorded SHA-1.  Equivalent to passing
     ‘--remote’ to ‘git submodule update’.

‘--separate-git-dir=<git dir>’
     Instead of placing the cloned repository where it is supposed to
     be, place the cloned repository at the specified directory, then
     make a filesystem-agnostic Git symbolic link to there.  The result
     is Git repository can be separated from working tree.

‘-j <n>’
‘--jobs <n>’
     The number of submodules fetched at the same time.  Defaults to the
     ‘submodule.fetchJobs’ option.

<repository>
     The (possibly remote) repository to clone from.  See the GIT URLS
     section below for more information on specifying repositories.

<directory>
     The name of a new directory to clone into.  The "humanish" part of
     the source repository is used if no directory is explicitly given
     (‘repo’ for ‘/path/to/repo.git’ and ‘foo’ for ‘host.xz:foo/.git’).
     Cloning into an existing directory is only allowed if the directory
     is empty.


GIT URLS
********

一般に、URLには、トランスポートプロトコル、リモートサーバーのアドレス、
およびリポジトリへのパスに関する情報が含まれています。トランスポートプロ
トコルによっては、一部の情報が欠落している場合があります。

   Gitはsshとgitとhttpとhttpsプロトコルをサポートします(さらにftpと
ftpsをフェッチに使用できますが、これは非効率的で非推奨です。使用しないで
ください)。

   ネイティブトランスポート(つまり、 git:// URL)は認証を行わないため、セ
キュリティで保護されていないネットワークでは注意して使用する必要がありま
す。

   以下の構文を使用できます:

   • ssh://[user@]host.xz[:port]/path/to/repo.git/

   • git://host.xz[:port]/path/to/repo.git/

   • http[s]://host.xz[:port]/path/to/repo.git/

   • ftp[s]://host.xz[:port]/path/to/repo.git/

   代替のscpのような構文をsshプロトコルで使用することもできます:

   • [user@]host.xz:path/to/repo.git/

   この構文は、最初のコロン(:)の前にスラッシュがない場合にのみ認識されま
す。これは、コロンを含むローカルパスを区別するのに役立ちます。たとえば、
ローカルパス ‘foo:bar’ を、絶対パスまたは ‘./foo:bar’ として指定して、
ssh url として誤って解釈されないようにすることができます。

   sshおよびgitプロトコルは、さらに ~username 拡張をサポートします:

   • ssh://[user@]host.xz[:port]/~[user]/path/to/repo.git/

   • git://host.xz[:port]/~[user]/path/to/repo.git/

   • [user@]host.xz:/~[user]/path/to/repo.git/

   Gitでもネイティブにサポートされているローカルリポジトリの場合、以下の
構文を使用できます:

   • /path/to/repo.git/

   • file:///path/to/repo.git/

   これらの2つの構文は、前者が ‘--local’ オプションを含むことを除いて、
ほとんど同等です。

   「git clone」と「git fetch」と「git pull」は、「git push」と違って適
切なバンドルファイルを受け入れます。 git-bundle(1) を参照してください。

   Gitが特定のトランスポートプロトコルを処理する方法を知らない場合、
Gitは _remote-<transport>_ リモートヘルパー(存在する場合)を使用しようと
します。リモートヘルパーを明示的に要求するには、以下の構文を使用できます
:

   • <transport>::<address>

   ここで、 <address> は、パス、サーバーとパス、または呼び出されている特
定のリモートヘルパーによって認識される任意のURLのような文字列です。詳細
については、 gitremote-helpers(7) を参照してください。

   同じ名前のリモートリポジトリが多数あり、それらに異なる形式を使用する
場合(あなたの使用するURLが機能するURLに書き換えられるように)、以下の形式
の構成セクションを作成できます:

             [url "<actual url base>"]
                     insteadOf = <other url base>

   例えば、以下のようになります:

             [url "git://git.host.xz/"]
                     insteadOf = host.xz:/path/to/
                     insteadOf = work:

   "work:repo.git" や "host.xz:/path/to/repo.git" のようなURLは、任意の
コンテキストで、"git://git.host.xz/repo.git" に書き換えられます。

   プッシュ専用のURLを書き換えたい場合は、以下の形式の構成セクションを作
成できます:

             [url "<actual url base>"]
                     pushInsteadOf = <other url base>

   例えば、以下のようになります:

             [url "ssh://example.org/"]
                     pushInsteadOf = git://example.org/

   "git://example.org/path/to/repo.git" のようなURLは、プッシュの場合は
"ssh://example.org/path/to/repo.git" に書き換えられますが、プルは引き続
き元のURLのままです。


EXAMPLES
********

   • Clone from upstream:

          $ git clone git://git.kernel.org/pub/scm/.../linux.git my-linux
          $ cd my-linux
          $ make

   • Make a local clone that borrows from the current directory, without
     checking things out:

          $ git clone -l -s -n . ../copy
          $ cd ../copy
          $ git show-branch

   • Clone from upstream while borrowing from an existing local
     directory:

          $ git clone --reference /git/linux.git \
                  git://git.kernel.org/pub/scm/.../linux.git \
                  my-linux
          $ cd my-linux

   • Create a bare repository to publish your changes to the public:

          $ git clone --bare -l /home/proj/.git /pub/scm/proj.git


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-column,  Up: Top

Name
****

git-column — データを複数列表示する


Synopsis
********

     git column [–command=<name>] [–[raw-]mode=<mode>] [–width=<width>]
                  [–indent=<string>] [–nl=<string>] [–padding=<n>]


DESCRIPTION
***********

このコマンドは、標準入力の行を複数の列を持つテーブル(表)にフォーマットし
ます。各入力行は、テーブルの1つのセルを占有します。これは、出力を複数列
にフォーマットするために他のgitコマンドによって内部的に使用されます。


OPTIONS
*******

‘--command=<name>’
     構成変数 column.<name> とcolumn.ui を使用してレイアウトモードを探し
     ます。

‘--mode=<mode>’
     レイアウトモードを指定します。 git-config(1) のオプション構文につい
     ては、構成変数 column.ui を参照してください。

‘--raw-mode=<n>’
     ‘--mode’ と同じですが、数値としてエンコードされたモードを使用します
     。これは主に、レイアウトモードをすでにパースしている他のコマンドに
     よって使用されます。

‘--width=<width>’
     端末幅を指定します。デフォルトでは、「git column」は端末の幅を検出
     するか、検出できない場合は80にフォールバックします。

‘--indent=<string>’
     各行の先頭に印刷される文字列。

‘--nl=<string>’
     改行文字を含む、各行の終わりに印刷される文字列。

‘--padding=<N>’
     列間のスペースの数。 デフォルトでは1つの空白。


EXAMPLES
********

データを複数列(columns)でフォーマット:

     $ seq 1 24 | git column --mode=column --padding=5
     1      4      7      10     13     16     19     22
     2      5      8      11     14     17     20     23
     3      6      9      12     15     18     21     24

   データを複数行(rows)でフォーマット:

     $ seq 1 21 | git column --mode=row --padding=5
     1      2      3      4      5      6      7
     8      9      10     11     12     13     14
     15     16     17     18     19     20     21

   列幅が等しくないテーブルにいくつかのタグをリストします:

     $ git tag --list 'v2.4.*' --column=row,dense
     v2.4.0  v2.4.0-rc0  v2.4.0-rc1  v2.4.0-rc2  v2.4.0-rc3
     v2.4.1  v2.4.10     v2.4.11     v2.4.12     v2.4.2
     v2.4.3  v2.4.4      v2.4.5      v2.4.6      v2.4.7
     v2.4.8  v2.4.9


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-commit-graph,  Up: Top

Name
****

git-commit-graph — Gitコミットグラフファイル(commit-graph file)の書き出
しと検証(verify)


Synopsis
********

     git commit-graph verify [–object-dir <dir>] [–shallow] [–[no-]progress]
     git commit-graph write <options> [–object-dir <dir>] [–[no-]progress]


DESCRIPTION
***********

シリアル化されたコミットグラフファイルを管理します。


OPTIONS
*******

‘--object-dir’
     パックファイルとコミットグラフファイルの場所として、指定のディレク
     トリを使用します。このパラメータは、完全な ‘.git’ ディレクトリでは
     なく、objectsディレクトリのみを持つ代替の場所を指定するために存在し
     ます。コミットグラフファイルは ‘<dir>/info’ ディレクトリにあり、パ
     ックファイルは ‘<dir>/pack’ にあるものと期待されます。ディレクトリ
     を絶対パスにすることができなかった場合、または既知のオブジェクトデ
     ィレクトリと一致しない場合、 ‘git commit-graph ...’ はゼロ以外のス
     テータスで終了します。

‘--[no-]progress’
     進行状況を明示的にオン/オフにします。どちらも指定されていない場合、
     標準エラーが端末に接続されていれば進行状況が表示されます。


COMMANDS
********

_write_
     パックファイルで見つかったコミットに基づいてコミットグラフファイル
     を書き出します。構成オプション ‘core.commitGraph’ が無効になってい
     る場合、このコマンドは警告を出力し、コミットグラフファイルを書き込
     まずに成功を返します。

     ‘--stdin-packs’ オプションを使用して、指定のパックインデックス内の
     オブジェクトのみをウォークすることにより、新しいコミットグラフを生
     成します。 (‘--stdin-commits’ または ‘--reachable’ と組み合わせるこ
     とはできません。)

     ‘--stdin-commits’ オプションと使用して、16進数のOIDのリストとして
     stdinで指定されたコミットから始まるコミットを1行に1つずつウォークし
     て、新しいコミットグラフを生成します。(直接に、またはタグの皮むきに
     よって、)非コミットに解決されるOIDは黙って無視されます。不正な形式
     のOID、または存在しないOIDは、エラーを生成します。 (‘--stdin-packs’
     または ‘--reachable’ と組み合わせることはできません。)

     ‘--reachable’ オプションと使用して、すべての参照で開始するコミット
     をウォークして、新しいコミットグラフを生成します。
     (‘--stdin-commits’ または ‘--stdin-packs’ と組み合わせることはでき
     ません。)

     ‘--append’ オプションと使用して、既存のコミットグラフファイルに存在
     するすべてのコミットを含めます。

     ‘--changed-paths’ オプションと使用すると、コミットとその最初の親
     (first parent)の間で変更されたパスに関する情報を計算して書き込みま
     す。この操作は、大規模なリポジトリでは時間がかかる場合があります。
     ‘git log -- <path>’ を使用すると、ディレクトリまたはファイルの履歴
     を取得するためのパフォーマンスが大幅に向上します。このオプションが
     指定されている場合、その後のコミットグラフ書き込みでは、このオプシ
     ョンが指定されたものであると自動的に想定されます。このデータの保存
     を停止するには、 ‘--no-changed-paths’ を使用します。

     ‘--max-new-filters=<n>’ オプションと使用して、(‘--changed-paths’ が
     指定されている場合、)最大で ‘n’ の新しいブルームフィルター(Bloom
     filters)を生成します。 ‘n’ が ‘-1’ の場合、制限は適用されません。こ
     の制限に対しては、新しいレイヤーに存在するコミットのみがカウントさ
     れます。以前のレイヤーでブルームフィルターをさかのぼって計算するに
     は、 ‘--split=replace’ を使用することをお勧めします。
     ‘commitGraph.maxNewFilters’ 構成をオーバーライドします。

     ‘--split[=<strategy>]’ オプションと使用して、
     ‘<dir>/info/commit-graphs’ に格納されている複数のコミットグラフファ
     イルのチェーンとしてコミットグラフを記述します。コミットグラフレイ
     ヤーは、戦略およびその他の分割オプションに基づいてマージされます。
     コミットグラフにまだ含まれていない新しいコミットは、新しい先端ファ
     イル(tip file)に追加されます。以下のマージ条件が満たされた場合、こ
     のファイルは既存のファイルとマージされます:

        • ‘--split=no-merge’ が指定されている場合、マージは実行されず、
          残りのオプションは無視されます。 ‘--split=replace’ は、既存の
          チェーンを新しいチェーンで上書きします。裸の ‘--split’ は後続
          のオプションに従います。 (注意: コミットグラフのチェーンをマー
          ジすると、既存のチェーンが長さ1のチェーンに置き換えられ、最初
          で唯一の増分がグラフ全体を保持することに注意してください)。

        • ‘--size-multiple=<X>’ が指定されていない場合は、 Xを2に等しく
          します。新しい先端ファイル(tip file)にN個のコミットがあり、以
          前の先端にM個のコミットがあり、「X 掛ける N」が M より大きい場
          合は、代わりに2つのファイルを1つのファイルにマージします。

        • ‘--max-commits=<M>’ オプションの M が正の整数で指定され、新し
          い先端ファイル(tip file) に M 以上のコミットがある場合は、代わ
          りに新しい先端を以前の先端とマージします。

          最後に、 ‘--expire-time=<datetime>’ が指定されていない場合は、
          datetimeを現在の時刻とします。分割コミットグラフ(split
          commit-graph)を書き込んだ後、変更時刻がdatetimeより古い未使用
          のコミットグラフをすべて削除します。

_verify_
     コミットグラフファイルを読み取り、その内容をオブジェクトデータベー
     スと照合して確認(verify)します。破損したデータをチェックするために
     使用されます。

     ‘--shallow’ オプションと使用すると、分割コミットグラフ(split
     commit-graphs)のチェーン内の先端コミットグラフファイルのみをチェッ
     クします。


EXAMPLES
********

   • パックされたコミットのコミットグラフファイルをローカルの ‘.git’ デ
     ィレクトリに書き込みます。

          $ git commit-graph write

   • ‘<pack-index>’ のコミットを使用して、現在のコミットグラフファイルを
     拡張するコミットグラフファイルを書き出します。

          $ echo <pack-index> | git commit-graph write --stdin-packs

   • 到達可能なすべてのコミットを含むコミットグラフファイルを作成します
     。

          $ git show-ref -s | git commit-graph write --stdin-commits

   • 現在のコミットグラフファイル内のすべてのコミットと ‘HEAD’ から到達
     可能なコミットを含むコミットグラフファイルを書き出します。

          $ git rev-parse HEAD | git commit-graph write --stdin-commits --append


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-commit-tree,  Up: Top

Name
****

git-commit-tree — 新しいコミットオブジェクトを作成します


Synopsis
********

     git commit-tree <tree> [(-p <parent>)…]
     git commit-tree [(-p <parent>)…] [-S[<keyid>]] [(-m <message>)…]
                       [(-F <file>)…] <tree>


DESCRIPTION
***********

これは通常、エンドユーザーが直接実行するものではありません。代わりに
git-commit(1) を参照してください。

   提供されたツリーオブジェクトに基づいて新しいコミットオブジェクトを作
成し、標準出力に新しいコミットオブジェクトIDを発行します。 ‘-m’ または
‘-F’ オプションが指定されていない限り、ログメッセージは標準入力から読み
取られます。

   ‘-m’ および ‘-F’ オプションは、任意の回数、任意の順序で指定できます。
コミットログメッセージは、オプションが指定された順序で作成されます。

   コミットオブジェクトには、任意の数の親を含めることができます。親が1つ
だけの場合、これは通常のコミットです。 複数の親を持つことで、コミットは
複数の履歴行の間でマージされます。なお、最初のコミット(ルートコミット)に
は親はありません。

   ツリーは作業ディレクトリの特定のディレクトリ状態を表しますが、コミッ
トはある「時点」における状態を表し、そこに到達する方法を説明します。

   あなたがその状態に関するメモをは何処に保存してもGitは気にしませんが、
通常、コミットは新しい「HEAD」状態を識別します。実際のところGitは、
‘.git/HEAD’ が指すファイルに結果を書き込む傾向にあり、最後にコミットされ
た状態が何であったかを常に確認できるようにしています。


OPTIONS
*******

<tree>
     既存のツリーオブジェクト。

‘-p <parent>’
     各 ‘-p’ は、親コミットオブジェクトのIDを示します。

‘-m <message>’
     コミットログメッセージの段落。これは複数回指定でき、各 <message> は
     独立した段落になります。

‘-F <file>’
     指定されたファイルからコミットログメッセージを読み取ります。 標準入
     力から読み取るには、 ‘-’ を使用します。 これは複数回指定でき、各フ
     ァイルの内容は独自した段落になります。

‘-S[<keyid>]’
‘--gpg-sign[=<keyid>]’
‘--no-gpg-sign’
     GPG署名コミット。 ‘keyid’ 引数はオプションで、デフォルトはコミッタ
     ーIDです。指定する場合は、スペースなしでオプションに指定する必要が
     あります。 ‘--no-gpg-sign’ は、コマンドラインで前に指定した
     ‘--gpg-sign’ オプションを無効にするのに役立ちます。


Commit Information
******************

コミットをカプセル化します:

   • 全ての親のオブジェクトID

   • 作者名と電子メールアドレスと日付

   • コミッター名とコミッター電子メールアドレスとコミット日付

   コミットコメントは標準入力から読み取られます。変更ログエントリが "<"
リダイレクトを介して提供されない場合、「git commit-tree」は、変更ログエ
ントリがターミナルから入力されて ^D で終了するのを待つだけです。


DATE FORMATS
************

‘GIT_AUTHOR_DATE’ と ‘GIT_COMMITTER_DATE’ 環境変数は、以下の日付形式をサ
ポートします:

Git internal format
     これは ‘<unix timestamp> <time zone offset>’ ここで、 ‘<unix
     timestamp>’ UNIXエポックからの秒数です。 ‘<time zone offset>’ は
     UTCからの正または負のオフセットです。 たとえば、CET(UTCより1時間進
     んでいます)は ‘+0100’ です。

RFC 2822
     RFC 2822で説明されている標準の電子メール形式。たとえば、 ‘Thu, 07
     Apr 2005 22:13:13 +0200’ 。

ISO 8601
     ISO 8601規格で指定されている日時(例: ‘2005-04-07T22:13:13’)。パーサ
     は、 ‘T’ 文字の代わりにスペースも受け入れます。秒の小数部分は無視さ
     れます。たとえば、 ‘2005-04-07T22:13:13.019’ は
     ‘2005-04-07T22:13:13’ として扱われます。

          *Note*

          日付部分は、上記に加えて、 ‘YYYY.MM.DD’ または ‘MM/DD/YYYY’ ま
          たは ‘DD.MM.YYYY’ 形式が受け入れられます。


Discussion
**********

Gitは、ある程度までは文字エンコードに依存しません。

   • ブロブオブジェクトの内容は、解釈されていないバイトのシーケンスです
     。コアレベルでのエンコーディング変換はありません。

   • パス名はUTF-8正規化形式C(UTF-8 normalization form C)でエンコードさ
     れます。これは、ツリーオブジェクト、インデックスファイル、ref名、お
     よびコマンドライン引数、環境変数、構成ファイル( ‘.git/config’
     (git-config(1) 参照) と gitignore(5) と gitattributes(5) と
     gitmodules(5)) のパス名に適用されます。

     コアレベルのGitは、パス名を単に非NULバイトのシーケンスとして扱い、
     パス名をエンコードする変換はありません(MacとWindowsを除く)。したが
     って、非ASCIIパス名の使用は、レガシー拡張ASCIIエンコーディングを使
     用するプラットフォームやファイルシステムでもほとんど機能します。た
     だし、そのようなシステムで作成されたリポジトリは、UTF-8ベースのシス
     テム(Linux、Mac、Windowsなど)では正しく機能しません。その逆も同様で
     す。さらに、多くのGitベースのツールは、パス名がUTF-8であると単純に
     想定しており、他のエンコーディングを正しく表示できません。

   • コミットログメッセージは通常UTF-8でエンコードされますが、他の拡張
     ASCIIエンコードもサポートされています。これには、ISO-8859-x、
     CP125xなどが含まれますが、UTF-16/32、EBCDIC、およびCJKマルチバイト
     エンコーディング(GBK、Shift-JIS、Big5、EUC-x、CP9xxなど)は含まれま
     せん。

   我々はコミットログメッセージをUTF-8でエンコードすることをお勧めします
が、コアとGit Porcelainはどちらも、プロジェクトでUTF-8を強制しないように
設計されています。特定のプロジェクトのすべての参加者がレガシーエンコーデ
ィングを使用する方が便利だと感じた場合、Gitはそれを禁止しません。 ただし
、覚えておくべきことがいくつかあります。

  1. _git commit_ と _git commit-tree_ は、プロジェクトがレガシーエンコ
     ーディングを使用していることを明示的に指定しない限り、与えられたコ
     ミットログメッセージが有効なUTF-8文字列のように見えない場合に警告を
     発します。明示的に指定する方法は、以下のように、 ‘.git/config’ ファ
     イルに ‘i18n.commitEncoding’ を含めることです。

          [i18n]
                  commitEncoding = ISO-8859-1

     上記の設定で作成されたコミットオブジェクトは、 ‘encoding’ ヘッダー
     に ‘i18n.commitEncoding’ の値を記録します。 これは、後でそれらを見
     る他の人々を助けるためです。このヘッダーがないということは、コミッ
     トログメッセージがUTF-8でエンコードされていることを意味します。

  2. _git log_ と _git show_ と _git blame_ とその仲間たちは、コミットオ
     ブジェクトの ‘encoding’ ヘッダーを見て、特に指定がない限り、ログメ
     ッセージをUTF-8に再コーディングしようとします。あなたは以下のように
     、 ‘.git/config’ ファイルの ‘i18n.logOutputEncoding’ を使用して目的
     の出力エンコーディングを指定できます。

          [i18n]
                  logOutputEncoding = ISO-8859-1

     この構成変数がない場合は、代わりに ‘i18n.commitEncoding’ の値が使用
     されます。

   UTF-8への再コーディングは必ずしも可逆的な操作ではないため、我々はコミ
ットが行われたときにコミットログメッセージを再コーディングしないことを意
図的に選択したことに注意してください。


FILES
*****

/etc/mailname


SEE ALSO
********

git-write-tree(1) git-commit(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-commit,  Up: Top

Name
****

git-commit — Record changes to the repository


Synopsis
********

     git commit [-a | –interactive | –patch] [-s] [-v] [-u<mode>] [–amend]
                [–dry-run] [(-c | -C | –squash) <commit> | –fixup [(amend|reword):]<commit>)]
                [-F <file> | -m <msg>] [–reset-author] [–allow-empty]
                [–allow-empty-message] [–no-verify] [-e] [–author=<author>]
                [–date=<date>] [–cleanup=<mode>] [–[no-]status]
                [-i | -o] [–pathspec-from-file=<file> [–pathspec-file-nul]]
                [(–trailer <token>[(=|:)<value>])…] [-S[<keyid>]]
                [–] [<pathspec>…]


DESCRIPTION
***********

Create a new commit containing the current contents of the index and the
given log message describing the changes.  The new commit is a direct
child of HEAD, usually the tip of the current branch, and the branch is
updated to point to it (unless no branch is associated with the working
tree, in which case HEAD is "detached" as described in git-checkout(1)).

   The content to be committed can be specified in several ways:

  1. by using git-add(1) to incrementally "add" changes to the index
     before using the _commit_ command (Note: even modified files must
     be "added");

  2. by using git-rm(1) to remove files from the working tree and the
     index, again before using the _commit_ command;

  3. by listing files as arguments to the _commit_ command (without
     –interactive or –patch switch), in which case the commit will
     ignore changes staged in the index, and instead record the current
     content of the listed files (which must already be known to Git);

  4. by using the -a switch with the _commit_ command to automatically
     "add" changes from all known files (i.e.  all files that are
     already listed in the index) and to automatically "rm" files in the
     index that have been removed from the working tree, and then
     perform the actual commit;

  5. by using the –interactive or –patch switches with the _commit_
     command to decide one by one which files or hunks should be part of
     the commit in addition to contents in the index, before finalizing
     the operation.  See the “Interactive Mode” section of git-add(1) to
     learn how to operate these modes.

   The ‘--dry-run’ option can be used to obtain a summary of what is
included by any of the above for the next commit by giving the same set
of parameters (options and paths).

   If you make a commit and then find a mistake immediately after that,
you can recover from it with _git reset_.


OPTIONS
*******

‘-a’
‘--all’
     Tell the command to automatically stage files that have been
     modified and deleted, but new files you have not told Git about are
     not affected.

‘-p’
‘--patch’
     Use the interactive patch selection interface to choose which
     changes to commit.  See git-add(1) for details.

‘-C <commit>’
‘--reuse-message=<commit>’
     Take an existing commit object, and reuse the log message and the
     authorship information (including the timestamp) when creating the
     commit.

‘-c <commit>’
‘--reedit-message=<commit>’
     Like _-C_, but with ‘-c’ the editor is invoked, so that the user
     can further edit the commit message.

‘--fixup=[(amend|reword):]<commit>’
     Create a new commit which "fixes up" ‘<commit>’ when applied with
     ‘git rebase --autosquash’.  Plain ‘--fixup=<commit>’ creates a
     "fixup!"  commit which changes the content of ‘<commit>’ but leaves
     its log message untouched.  ‘--fixup=amend:<commit>’ is similar but
     creates an "amend!"  commit which also replaces the log message of
     ‘<commit>’ with the log message of the "amend!"  commit.
     ‘--fixup=reword:<commit>’ creates an "amend!"  commit which
     replaces the log message of ‘<commit>’ with its own log message but
     makes no changes to the content of ‘<commit>’.

     The commit created by plain ‘--fixup=<commit>’ has a subject
     composed of "fixup!"  followed by the subject line from <commit>,
     and is recognized specially by ‘git rebase --autosquash’.  The ‘-m’
     option may be used to supplement the log message of the created
     commit, but the additional commentary will be thrown away once the
     "fixup!"  commit is squashed into ‘<commit>’ by ‘git rebase
     --autosquash’.

     The commit created by ‘--fixup=amend:<commit>’ is similar but its
     subject is instead prefixed with "amend!".  The log message of
     <commit> is copied into the log message of the "amend!"  commit and
     opened in an editor so it can be refined.  When ‘git rebase
     --autosquash’ squashes the "amend!"  commit into ‘<commit>’, the
     log message of ‘<commit>’ is replaced by the refined log message
     from the "amend!"  commit.  It is an error for the "amend!"
     commit’s log message to be empty unless ‘--allow-empty-message’ is
     specified.

     ‘--fixup=reword:<commit>’ is shorthand for ‘--fixup=amend:<commit>
     --only’.  It creates an "amend!"  commit with only a log message
     (ignoring any changes staged in the index).  When squashed by ‘git
     rebase --autosquash’, it replaces the log message of ‘<commit>’
     without making any other changes.

     Neither "fixup!"  nor "amend!"  commits change authorship of
     ‘<commit>’ when applied by ‘git rebase --autosquash’.  See
     git-rebase(1) for details.

‘--squash=<commit>’
     Construct a commit message for use with ‘rebase --autosquash’.  The
     commit message subject line is taken from the specified commit with
     a prefix of "squash!  ".  Can be used with additional commit
     message options (‘-m’/‘-c’/‘-C’/‘-F’).  See git-rebase(1) for
     details.

‘--reset-author’
     When used with -C/-c/–amend options, or when committing after a
     conflicting cherry-pick, declare that the authorship of the
     resulting commit now belongs to the committer.  This also renews
     the author timestamp.

‘--short’
     When doing a dry-run, give the output in the short-format.  See
     git-status(1) for details.  Implies ‘--dry-run’.

‘--branch’
     Show the branch and tracking info even in short-format.

‘--porcelain’
     When doing a dry-run, give the output in a porcelain-ready format.
     See git-status(1) for details.  Implies ‘--dry-run’.

‘--long’
     When doing a dry-run, give the output in the long-format.  Implies
     ‘--dry-run’.

‘-z’
‘--null’
     When showing ‘short’ or ‘porcelain’ status output, print the
     filename verbatim and terminate the entries with NUL, instead of
     LF. If no format is given, implies the ‘--porcelain’ output format.
     Without the ‘-z’ option, filenames with "unusual" characters are
     quoted as explained for the configuration variable ‘core.quotePath’
     (see git-config(1)).

‘-F <file>’
‘--file=<file>’
     Take the commit message from the given file.  Use _-_ to read the
     message from the standard input.

‘--author=<author>’
     Override the commit author.  Specify an explicit author using the
     standard ‘A U Thor <author@example.com>’ format.  Otherwise
     <author> is assumed to be a pattern and is used to search for an
     existing commit by that author (i.e.  rev-list –all -i
     –author=<author>); the commit author is then copied from the first
     such commit found.

‘--date=<date>’
     Override the author date used in the commit.

‘-m <msg>’
‘--message=<msg>’
     Use the given <msg> as the commit message.  If multiple ‘-m’
     options are given, their values are concatenated as separate
     paragraphs.

     The ‘-m’ option is mutually exclusive with ‘-c’, ‘-C’, and ‘-F’.

‘-t <file>’
‘--template=<file>’
     When editing the commit message, start the editor with the contents
     in the given file.  The ‘commit.template’ configuration variable is
     often used to give this option implicitly to the command.  This
     mechanism can be used by projects that want to guide participants
     with some hints on what to write in the message in what order.  If
     the user exits the editor without editing the message, the commit
     is aborted.  This has no effect when a message is given by other
     means, e.g.  with the ‘-m’ or ‘-F’ options.

‘-s’
‘--signoff’
‘--no-signoff’
     コミットログメッセージの最後に、コミッターによる「Signed-off-by」ト
     レーラーを追加します。signoffの意味は、コミットしているプロジェクト
     によって異なります。たとえば、コミッターがプロジェクトのライセンス
     に基づいて作品を提出する権利を持っていることを証明したり、開発者の
     原産地証明書などの寄稿者の代表に同意したりする場合があります。
     (LinuxカーネルおよびGitプロジェクトで使用されるものについては、
     http：//developercertificate.orgを参照してください)。プロジェクトで
     signoffがどのように使用されるかを理解するには、貢献しているプロジェ
     クトのドキュメントまたはリーダーシップ(leadership)を参照してくださ
     い。

     ‘--no-signoff’ オプションを使用すると、コマンドラインで以前の
     ‘--signoff’ オプションを無効にすることができます。

‘--trailer <token>[(=|:)<value>]’
     Specify a (<token>, <value>) pair that should be applied as a
     trailer.  (e.g.  ‘git commit --trailer "Signed-off-by:C O Mitter \
     <committer@example.com>" --trailer "Helped-by:C O Mitter \
     <committer@example.com>"’ will add the "Signed-off-by" trailer and
     the "Helped-by" trailer to the commit message.)  The ‘trailer.*’
     configuration variables (git-interpret-trailers(1)) can be used to
     define if a duplicated trailer is omitted, where in the run of
     trailers each trailer would appear, and other details.

‘-n’
‘--no-verify’
     This option bypasses the pre-commit and commit-msg hooks.  See also
     githooks(5).

‘--allow-empty’
     Usually recording a commit that has the exact same tree as its sole
     parent commit is a mistake, and the command prevents you from
     making such a commit.  This option bypasses the safety, and is
     primarily for use by foreign SCM interface scripts.

‘--allow-empty-message’
     Like –allow-empty this command is primarily for use by foreign SCM
     interface scripts.  It allows you to create a commit with an empty
     commit message without using plumbing commands like
     git-commit-tree(1).

‘--cleanup=<mode>’
     This option determines how the supplied commit message should be
     cleaned up before committing.  The _<mode>_ can be ‘strip’,
     ‘whitespace’, ‘verbatim’, ‘scissors’ or ‘default’.

     strip
          Strip leading and trailing empty lines, trailing whitespace,
          commentary and collapse consecutive empty lines.

     whitespace
          Same as ‘strip’ except #commentary is not removed.

     verbatim
          Do not change the message at all.

     scissors
          Same as ‘whitespace’ except that everything from (and
          including) the line found below is truncated, if the message
          is to be edited.  "‘#’" can be customized with
          core.commentChar.

               # ------------------------ >8 ------------------------

     default
          Same as ‘strip’ if the message is to be edited.  Otherwise
          ‘whitespace’.

     The default can be changed by the ‘commit.cleanup’ configuration
     variable (see git-config(1)).

‘-e’
‘--edit’
     The message taken from file with ‘-F’, command line with ‘-m’, and
     from commit object with ‘-C’ are usually used as the commit log
     message unmodified.  This option lets you further edit the message
     taken from these sources.

‘--no-edit’
     Use the selected commit message without launching an editor.  For
     example, ‘git commit --amend --no-edit’ amends a commit without
     changing its commit message.

‘--amend’
     Replace the tip of the current branch by creating a new commit.
     The recorded tree is prepared as usual (including the effect of the
     ‘-i’ and ‘-o’ options and explicit pathspec), and the message from
     the original commit is used as the starting point, instead of an
     empty message, when no other message is specified from the command
     line via options such as ‘-m’, ‘-F’, ‘-c’, etc.  The new commit has
     the same parents and author as the current one (the
     ‘--reset-author’ option can countermand this).

     It is a rough equivalent for:

                  $ git reset --soft HEAD^
                  $ ... do something else to come up with the right tree ...
                  $ git commit -c ORIG_HEAD

     but can be used to amend a merge commit.

     You should understand the implications of rewriting history if you
     amend a commit that has already been published.  (See the
     "RECOVERING FROM UPSTREAM REBASE" section in git-rebase(1).)

‘--no-post-rewrite’
     Bypass the post-rewrite hook.

‘-i’
‘--include’
     Before making a commit out of staged contents so far, stage the
     contents of paths given on the command line as well.  This is
     usually not what you want unless you are concluding a conflicted
     merge.

‘-o’
‘--only’
     Make a commit by taking the updated working tree contents of the
     paths specified on the command line, disregarding any contents that
     have been staged for other paths.  This is the default mode of
     operation of _git commit_ if any paths are given on the command
     line, in which case this option can be omitted.  If this option is
     specified together with ‘--amend’, then no paths need to be
     specified, which can be used to amend the last commit without
     committing changes that have already been staged.  If used together
     with ‘--allow-empty’ paths are also not required, and an empty
     commit will be created.

‘--pathspec-from-file=<file>’
     Pathspec is passed in ‘<file>’ instead of commandline args.  If
     ‘<file>’ is exactly ‘-’ then standard input is used.  Pathspec
     elements are separated by LF or CR/LF. Pathspec elements can be
     quoted as explained for the configuration variable ‘core.quotePath’
     (see git-config(1)).  See also ‘--pathspec-file-nul’ and global
     ‘--literal-pathspecs’.

‘--pathspec-file-nul’
     Only meaningful with ‘--pathspec-from-file’.  Pathspec elements are
     separated with NUL character and all other characters are taken
     literally (including newlines and quotes).

‘-u[<mode>]’
‘--untracked-files[=<mode>]’
     Show untracked files.

     The mode parameter is optional (defaults to _all_), and is used to
     specify the handling of untracked files; when -u is not used, the
     default is _normal_, i.e.  show untracked files and directories.

     The possible options are:

        • _no_ - Show no untracked files

        • _normal_ - Shows untracked files and directories

        • _all_ - Also shows individual files in untracked directories.

     The default can be changed using the status.showUntrackedFiles
     configuration variable documented in git-config(1).

‘-v’
‘--verbose’
     Show unified diff between the HEAD commit and what would be
     committed at the bottom of the commit message template to help the
     user describe the commit by reminding what changes the commit has.
     Note that this diff output doesn’t have its lines prefixed with
     _#_.  This diff will not be a part of the commit message.  See the
     ‘commit.verbose’ configuration variable in git-config(1).

     If specified twice, show in addition the unified diff between what
     would be committed and the worktree files, i.e.  the unstaged
     changes to tracked files.

‘-q’
‘--quiet’
     Suppress commit summary message.

‘--dry-run’
     Do not create a commit, but show a list of paths that are to be
     committed, paths with local changes that will be left uncommitted
     and paths that are untracked.

‘--status’
     Include the output of git-status(1) in the commit message template
     when using an editor to prepare the commit message.  Defaults to
     on, but can be used to override configuration variable
     commit.status.

‘--no-status’
     Do not include the output of git-status(1) in the commit message
     template when using an editor to prepare the default commit
     message.

‘-S[<keyid>]’
‘--gpg-sign[=<keyid>]’
‘--no-gpg-sign’
     GPG-sign commits.  The ‘keyid’ argument is optional and defaults to
     the committer identity; if specified, it must be stuck to the
     option without a space.  ‘--no-gpg-sign’ is useful to countermand
     both ‘commit.gpgSign’ configuration variable, and earlier
     ‘--gpg-sign’.

–
     Do not interpret any more arguments as options.

<pathspec>…
     When pathspec is given on the command line, commit the contents of
     the files that match the pathspec without recording the changes
     already added to the index.  The contents of these files are also
     staged for the next commit on top of what have been staged before.

     For more details, see the _pathspec_ entry in gitglossary(7).


EXAMPLES
********

When recording your own work, the contents of modified files in your
working tree are temporarily stored to a staging area called the "index"
with _git add_.  A file can be reverted back, only in the index but not
in the working tree, to that of the last commit with ‘git restore
--staged <file>’, which effectively reverts _git add_ and prevents the
changes to this file from participating in the next commit.  After
building the state to be committed incrementally with these commands,
‘git commit’ (without any pathname parameter) is used to record what has
been staged so far.  This is the most basic form of the command.  An
example:

     $ edit hello.c
     $ git rm goodbye.c
     $ git add hello.c
     $ git commit

   Instead of staging files after each individual change, you can tell
‘git commit’ to notice the changes to the files whose contents are
tracked in your working tree and do corresponding ‘git add’ and ‘git rm’
for you.  That is, this example does the same as the earlier example if
there is no other change in your working tree:

     $ edit hello.c
     $ rm goodbye.c
     $ git commit -a

   The command ‘git commit -a’ first looks at your working tree, notices
that you have modified hello.c and removed goodbye.c, and performs
necessary ‘git add’ and ‘git rm’ for you.

   After staging changes to many files, you can alter the order the
changes are recorded in, by giving pathnames to ‘git commit’.  When
pathnames are given, the command makes a commit that only records the
changes made to the named paths:

     $ edit hello.c hello.h
     $ git add hello.c hello.h
     $ edit Makefile
     $ git commit Makefile

   This makes a commit that records the modification to ‘Makefile’.  The
changes staged for ‘hello.c’ and ‘hello.h’ are not included in the
resulting commit.  However, their changes are not lost — they are still
staged and merely held back.  After the above sequence, if you do:

     $ git commit

   this second commit would record the changes to ‘hello.c’ and
‘hello.h’ as expected.

   After a merge (initiated by _git merge_ or _git pull_) stops because
of conflicts, cleanly merged paths are already staged to be committed
for you, and paths that conflicted are left in unmerged state.  You
would have to first check which paths are conflicting with _git status_
and after fixing them manually in your working tree, you would stage the
result as usual with _git add_:

     $ git status | grep unmerged
     unmerged: hello.c
     $ edit hello.c
     $ git add hello.c

   After resolving conflicts and staging the result, ‘git ls-files -u’
would stop mentioning the conflicted path.  When you are done, run ‘git
commit’ to finally record the merge:

     $ git commit

   As with the case to record your own changes, you can use ‘-a’ option
to save typing.  One difference is that during a merge resolution, you
cannot use ‘git commit’ with pathnames to alter the order the changes
are committed, because the merge should be recorded as a single commit.
In fact, the command refuses to run when given pathnames (but see ‘-i’
option).


COMMIT INFORMATION
******************

Author and committer information is taken from the following environment
variables, if set:

     GIT_AUTHOR_NAME
     GIT_AUTHOR_EMAIL
     GIT_AUTHOR_DATE
     GIT_COMMITTER_NAME
     GIT_COMMITTER_EMAIL
     GIT_COMMITTER_DATE

   (nb "<", ">" and "\n"s are stripped)

   The author and committer names are by convention some form of a
personal name (that is, the name by which other humans refer to you),
although Git does not enforce or require any particular form.  Arbitrary
Unicode may be used, subject to the constraints listed above.  This name
has no effect on authentication; for that, see the ‘credential.username’
variable in git-config(1).

   In case (some of) these environment variables are not set, the
information is taken from the configuration items ‘user.name’ and
‘user.email’, or, if not present, the environment variable EMAIL, or, if
that is not set, system user name and the hostname used for outgoing
mail (taken from ‘/etc/mailname’ and falling back to the fully qualified
hostname when that file does not exist).

   The ‘author.name’ and ‘committer.name’ and their corresponding email
options override ‘user.name’ and ‘user.email’ if set and are overridden
themselves by the environment variables.

   The typical usage is to set just the ‘user.name’ and ‘user.email’
variables; the other options are provided for more complex use cases.


DATE FORMATS
************

‘GIT_AUTHOR_DATE’ と ‘GIT_COMMITTER_DATE’ 環境変数は、以下の日付形式をサ
ポートします:

Git internal format
     これは ‘<unix timestamp> <time zone offset>’ ここで、 ‘<unix
     timestamp>’ UNIXエポックからの秒数です。 ‘<time zone offset>’ は
     UTCからの正または負のオフセットです。 たとえば、CET(UTCより1時間進
     んでいます)は ‘+0100’ です。

RFC 2822
     RFC 2822で説明されている標準の電子メール形式。たとえば、 ‘Thu, 07
     Apr 2005 22:13:13 +0200’ 。

ISO 8601
     ISO 8601規格で指定されている日時(例: ‘2005-04-07T22:13:13’)。パーサ
     は、 ‘T’ 文字の代わりにスペースも受け入れます。秒の小数部分は無視さ
     れます。たとえば、 ‘2005-04-07T22:13:13.019’ は
     ‘2005-04-07T22:13:13’ として扱われます。

          *Note*

          日付部分は、上記に加えて、 ‘YYYY.MM.DD’ または ‘MM/DD/YYYY’ ま
          たは ‘DD.MM.YYYY’ 形式が受け入れられます。

   上記のすべての日付形式を認識することに加えて、 ‘--date’ オプションは
、 "yesterday" や "last Friday at noon" など、より人間よりの日付形式も理
解しようとします。


DISCUSSION
**********

Though not required, it’s a good idea to begin the commit message with a
single short (less than 50 character) line summarizing the change,
followed by a blank line and then a more thorough description.  The text
up to the first blank line in a commit message is treated as the commit
title, and that title is used throughout Git.  For example,
git-format-patch(1) turns a commit into email, and it uses the title on
the Subject line and the rest of the commit in the body.

   Gitは、ある程度までは文字エンコードに依存しません。

   • ブロブオブジェクトの内容は、解釈されていないバイトのシーケンスです
     。コアレベルでのエンコーディング変換はありません。

   • パス名はUTF-8正規化形式C(UTF-8 normalization form C)でエンコードさ
     れます。これは、ツリーオブジェクト、インデックスファイル、ref名、お
     よびコマンドライン引数、環境変数、構成ファイル( ‘.git/config’
     (git-config(1) 参照) と gitignore(5) と gitattributes(5) と
     gitmodules(5)) のパス名に適用されます。

     コアレベルのGitは、パス名を単に非NULバイトのシーケンスとして扱い、
     パス名をエンコードする変換はありません(MacとWindowsを除く)。したが
     って、非ASCIIパス名の使用は、レガシー拡張ASCIIエンコーディングを使
     用するプラットフォームやファイルシステムでもほとんど機能します。た
     だし、そのようなシステムで作成されたリポジトリは、UTF-8ベースのシス
     テム(Linux、Mac、Windowsなど)では正しく機能しません。その逆も同様で
     す。さらに、多くのGitベースのツールは、パス名がUTF-8であると単純に
     想定しており、他のエンコーディングを正しく表示できません。

   • コミットログメッセージは通常UTF-8でエンコードされますが、他の拡張
     ASCIIエンコードもサポートされています。これには、ISO-8859-x、
     CP125xなどが含まれますが、UTF-16/32、EBCDIC、およびCJKマルチバイト
     エンコーディング(GBK、Shift-JIS、Big5、EUC-x、CP9xxなど)は含まれま
     せん。

   我々はコミットログメッセージをUTF-8でエンコードすることをお勧めします
が、コアとGit Porcelainはどちらも、プロジェクトでUTF-8を強制しないように
設計されています。特定のプロジェクトのすべての参加者がレガシーエンコーデ
ィングを使用する方が便利だと感じた場合、Gitはそれを禁止しません。 ただし
、覚えておくべきことがいくつかあります。

  1. _git commit_ と _git commit-tree_ は、プロジェクトがレガシーエンコ
     ーディングを使用していることを明示的に指定しない限り、与えられたコ
     ミットログメッセージが有効なUTF-8文字列のように見えない場合に警告を
     発します。明示的に指定する方法は、以下のように、 ‘.git/config’ ファ
     イルに ‘i18n.commitEncoding’ を含めることです。

          [i18n]
                  commitEncoding = ISO-8859-1

     上記の設定で作成されたコミットオブジェクトは、 ‘encoding’ ヘッダー
     に ‘i18n.commitEncoding’ の値を記録します。 これは、後でそれらを見
     る他の人々を助けるためです。このヘッダーがないということは、コミッ
     トログメッセージがUTF-8でエンコードされていることを意味します。

  2. _git log_ と _git show_ と _git blame_ とその仲間たちは、コミットオ
     ブジェクトの ‘encoding’ ヘッダーを見て、特に指定がない限り、ログメ
     ッセージをUTF-8に再コーディングしようとします。あなたは以下のように
     、 ‘.git/config’ ファイルの ‘i18n.logOutputEncoding’ を使用して目的
     の出力エンコーディングを指定できます。

          [i18n]
                  logOutputEncoding = ISO-8859-1

     この構成変数がない場合は、代わりに ‘i18n.commitEncoding’ の値が使用
     されます。

   UTF-8への再コーディングは必ずしも可逆的な操作ではないため、我々はコミ
ットが行われたときにコミットログメッセージを再コーディングしないことを意
図的に選択したことに注意してください。


ENVIRONMENT AND CONFIGURATION VARIABLES
***************************************

The editor used to edit the commit log message will be chosen from the
‘GIT_EDITOR’ environment variable, the core.editor configuration
variable, the ‘VISUAL’ environment variable, or the ‘EDITOR’ environment
variable (in that order).  See git-var(1) for details.


HOOKS
*****

This command can run ‘commit-msg’, ‘prepare-commit-msg’, ‘pre-commit’,
‘post-commit’ and ‘post-rewrite’ hooks.  See githooks(5) for more
information.


FILES
*****

‘$GIT_DIR/COMMIT_EDITMSG’
     This file contains the commit message of a commit in progress.  If
     ‘git commit’ exits due to an error before creating a commit, any
     commit message that has been provided by the user (e.g., in an
     editor session) will be available in this file, but will be
     overwritten by the next invocation of ‘git commit’.


SEE ALSO
********

git-add(1), git-rm(1), git-mv(1), git-merge(1), git-commit-tree(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-config,  Up: Top

Name
****

git-config — リポジトリオプションまたはグローバルオプションを、取得およ
び設定する


Synopsis
********

     git config [<file-option>] [–type=<type>] [–fixed-value] [–show-origin] [–show-scope] [-z|–null] name [value [value-pattern]]
     git config [<file-option>] [–type=<type>] –add name value
     git config [<file-option>] [–type=<type>] [–fixed-value] –replace-all name value [value-pattern]
     git config [<file-option>] [–type=<type>] [–show-origin] [–show-scope] [-z|–null] [–fixed-value] –get name [value-pattern]
     git config [<file-option>] [–type=<type>] [–show-origin] [–show-scope] [-z|–null] [–fixed-value] –get-all name [value-pattern]
     git config [<file-option>] [–type=<type>] [–show-origin] [–show-scope] [-z|–null] [–fixed-value] [–name-only] –get-regexp name_regex [value-pattern]
     git config [<file-option>] [–type=<type>] [-z|–null] –get-urlmatch name URL
     git config [<file-option>] [–fixed-value] –unset name [value-pattern]
     git config [<file-option>] [–fixed-value] –unset-all name [value-pattern]
     git config [<file-option>] –rename-section old_name new_name
     git config [<file-option>] –remove-section name
     git config [<file-option>] [–show-origin] [–show-scope] [-z|–null] [–name-only] -l | –list
     git config [<file-option>] –get-color name [default]
     git config [<file-option>] –get-colorbool name [stdout-is-tty]
     git config [<file-option>] -e | –edit


DESCRIPTION
***********

このコマンドを使用して、オプションを照会(query)/設定(set)/置換
(replace)/設定解除(unset;削除)できます。名前は実際にはドットで区切られた
セクションとキーであり、値はエスケープされます。

   ‘--add’ オプションを使用すると、オプションに複数の行を追加できます。
複数行で発生する可能性のあるオプションを更新または設定解除する場合は、
‘value-pattern’ ( ‘--fixed-value’ オプションが指定されていない限り、拡張
正規表現)を指定する必要があります。パターンに一致する既存の値のみが更新
または設定解除されます。パターンと「一致しない」行を処理する場合は、前に
1つの感嘆符(‘!’)を追加するだけです(*note EXAMPLES:: も参照下さい)が、た
だし、これは ‘--fixed-value’ オプションが使用されていない場合のみ機能す
ることに注意してください。

   ‘--type=<type>’ オプションは _git config_ に指示して、指定の<type>の
下で入力値(incoming value)と出力値(outgoing value)が正規化可能であること
を確認します。 ‘-type=<type>’ が指定されていない場合、正規化は実行されま
せん。 呼び出し元は、既に指定済の ‘--type’ 指定子を ‘--no-type’ で設定解
除できます。

   読み取り時、値はデフォルトでシステム、グローバル、リポジトリのローカ
ル構成ファイルから読み取られ、オプション ‘--system’ 、‘--global’ 、
‘--local’ 、 ‘--worktree’ 、 ‘–file <filename> ‘ を使用して、その場所か
ら「のみ」読み取るようにコマンドに指示できます(*note FILES:: 参照)。

   書き込み時、新しい値はデフォルトでリポジトリのローカル構成ファイルに
書き込まれます。オプション ‘--system’ 、‘--global’ 、 ‘--worktree’ 、
‘--file <filename> ` を使用すれば、コマンドにその場所に書き込むよう指示
できます(あなたは `--local’ と言うこともでき、そしてこれはデフォルトです
)。

   このコマンドは、エラー時にゼロ以外のステータスで失敗します。 いくつか
の終了コードは以下のとおりです:

   • セクションキーが不正(ret=1)

   • セクションまたは名前が与えられてない(ret=2)

   • configファイルが不正(ret=3)

   • configファイルに書き込みできない(ret=4)

   • 存在しないオプションの設定を削除(unseet)しようとしました(ret=5)

   • あなたは、複数の行が一致するオプションを設定(set)/削除(unset)しよう
     としています(ret=5)

   • 不正な正規表現を使おうとしています(ret=6)

   成功の場合、コマンドは終了コード 0 を返します。

   使用可能なすべての構成変数のリストは、 ‘git help --config’ コマンドを
使用して取得できます。


OPTIONS
*******

‘--replace-all’
     デフォルトの振る舞いでは最大1行を置き換えますが、このオプションより
     、キー(およびオプションで ‘value-pattern’)に一致するすべての行が置
     換されます。

‘--add’
     既存の値を変更せずに、オプションに新しい「行を追加」します。 これは
     ‘--replace-all’ の ‘value-pattern’ として _^$_ を指定しても同じ事が
     可能です。

‘--get’
     指定されたキーの値を取得します(オプションで、値に一致する正規表現で
     フィルタリングされます)。キーが見つからなかった場合はエラーコード
     1を返し、複数のキー値が見つかった場合は「最後の値」を返します。

‘--get-all’
     ‘--get’ と同様ですが、複数値キー(複数行;multivar)のすべての値を返し
     ます。

‘--get-regexp’
     ‘--get-all’ と同様ですが、名前を正規表現として解釈し、キー名を書き
     出します。正規表現の照合では現在、大文字と小文字が区別され、セクシ
     ョン名と変数名が小文字になっている正規化されたバージョンのキーに対
     して実行されますが、サブセクション名は大文字と小文字が区別されませ
     ん。

‘--get-urlmatch name URL’
     2つの部分からなる名前 section.key を指定すると、<url> 部分が指定し
     たURLに最もよく一致する section.<url>.key の値が返されます(そのよう
     なキーが存在しない場合は、 section.keyの値にフォールバックします)。
     セクションだけを名前として指定した合は、当該セクション内のすべての
     キー・値をリストします。値が見つからない場合はエラーコード1を返しま
     す。

‘--global’
     オプション書き込みの場合: リポジトリの ‘.git/config’ ではなくグロー
     バル ‘~/.gitconfig’ ‘$XDG_CONFIG_HOME/git/config’ ファイルがある場
     合は ‘$XDG_CONFIG_HOME/git/config’ ファイルに書き込みます。

     オプション読み取りの場合: 使用可能なすべてのファイルからではなく、
     グローバル ‘~/.gitconfig’ と ‘$XDG_CONFIG_HOME/git/config’ からのみ
     読み取ります。

     *note FILES:: も参照して下さい。

‘--system’
     オプション書き込みの場合: リポジトリの ‘.git/config’ ではなくシステ
     ム全体の ‘$(prefix)/etc/gitconfig’ に書き込みます。

     オプション読み取りの場合: 使用可能なすべてのファイルからではなく、
     システム全体の ‘$(prefix)/etc/gitconfig’ からのみ読み取ります。

     *note FILES:: も参照して下さい。

‘--local’
     オプションを書き込む場合: リポジトリの ‘.git/config’ ファイルに書き
     込みます。これがデフォルトの動作です。

     読み取りオプションの場合: 使用可能なすべてのファイルからではなく、
     リポジトリ ‘.git/config’ からのみ読み取ります。

     *note FILES:: も参照して下さい。

‘--worktree’
     ‘--local’ と似ていますが、 ‘extensions.worktreeConfig’ が存在する場
     合、 ‘.git/config.worktree’ が読み書きされる点が異なります。
     ‘extensions.worktreeConfig’ が存在しない場合は ‘--local’ と同じです
     。

‘-f config-file’
‘--file config-file’
     オプション書き込みの場合: リポジトリの ‘.git/config’ ではなく、指定
     のファイルに書き込みます。

     オプション読み取りの場合: 使用可能なすべてのファイルからではなく、
     指定のファイルからのみ読み取ります。

     *note FILES:: も参照して下さい。

‘--blob blob’
     ‘--file’ に似ていますが、ファイルの代わりに指定のブロブを使用します
     。例えば、 _master:.gitmodules_ を使用して、masterブランチのファイ
     ル _.gitmodules_ から値を読み取ることができます。ブロブ名の綴りのよ
     り完全なリストについては、 gitrevisions(7) の「SPECIFYING
     REVISIONS」セクションを参照してください。

‘--remove-section’
     指定のセクションを構成ファイルから削除します。

‘--rename-section’
     指定のセクションの名前を新しい名前に変更します。

‘--unset’
     キーに一致する行を構成ファイルから削除します。

‘--unset-all’
     キーに一致するすべての行を構成ファイルから削除します。

‘-l’
‘--list’
     構成ファイルに「設定されている」すべての変数とその値を一覧表示しま
     す(訳注:使用可能なすべての構成変数のリストは、 ‘git help
     --config’)。

‘--fixed-value’
     ‘value-pattern’ 引数と一緒に使用する場合、 ‘value-pattern’ を正規表
     現ではなく単なる文字列として扱います。これにより、値が
     ‘value-pattern’ と完全に等しいものにのみ一致する、名前/値のペアだけ
     に制限されます。

‘--type <type>’
     _git config_ は、入力または出力が指定された型(type)の制約の下で有効
     であることを保証し、その型の正規形式で出力値を正規化します。

     有効な型には以下のものがあります:

        • _bool_: 値を「true」または「false」として正規化します。

        • _int_ 値を単純な10進数として正規化します。オプションのサフィッ
          クス「k」また「m」または「g」を使用すると、入力時に値にそれぞ
          れ1,024または1,048,576(1024^2)または1,073,741,824(10243)が掛け
          算されます。

        • _bool-or-int_: 上記のように、 _bool_ または _int_ のいずれかに
          従って正規化します。

        • _path_: ‘$HOME’ の値を意味する ‘~’ を先頭に追加し、指定のユー
          ザのホームディレクトリを ‘~user’ として正規化します。この ‘~’
          は値を書き込むときには効果がありません(ただし、あなたはコマン
          ドラインから ‘git config section.variable ~/’ と実行してシェル
          に展開をさせることができます)。

        • _expiry-date_: 固定または相対の日付文字列からタイムスタンプに
          変換することで正規化します。この指定は値を書き込むときには効果
          がありません。

        • _color_: 値を取得するときに、ANSIカラーエスケープシーケンスに
          変換して正規化します。値を設定するとき、指定された値がANSIカラ
          ーとして正規化可能であることを確認するために健全性チェックが実
          行されますが、正規化自体は行われず、そのまま書き込まれます。

‘--bool’
‘--int’
‘--bool-or-int’
‘--path’
‘--expiry-date’
     タイプ指定子を選択するための歴史的オプション。 代わりに ‘--type’ を
     優先します(上記参照)。

‘--no-type’
     (これ以前に設定されていた場合、)これ以前に設定された型指定子の設定
     を解除します。このオプションは、「git config」が取得した変数を正規
     化しないように要求します。 ‘--no-type’ は、‘--type=<type>’ または
     ‘--<type>’ が無い場合は何の効果もありません。

‘-z’
‘--null’
     値やキーを出力するすべてのオプションで、値を(改行ではなく)常にヌル
     バイト(\0)で終了します。代わりに、キーと値の間の区切り文字として改
     行を使用します。これにより、例えば、改行を含む値を混乱することなく
     、出力を安全にパースできます。

‘--name-only’
     ‘--list’ または ‘--get-regexp’ の構成変数で名前のみを出力します。

‘--show-origin’
     照会されたすべての構成オプションの出力に、その構成オプションの出処
     の種類(ファイル、標準入力、blob、コマンドライン)と実際の出処(設定フ
     ァイルのパス、参照、または該当する場合はblobのID)を追加します。

‘--show-scope’
     ‘--show-origin’ と同様に、クエリされたすべての設定オプションの出力
     をその値のスコープ(ローカル、グローバル、システム、コマンド)で拡張
     します。

‘--get-colorbool name [stdout-is-tty]’
     ‘name’ の色設定(たとえば ‘color.diff’)を見つけて、「true」または「
     false」を出力します。 ‘stdout-is-tty’ は「true」または「false」のい
     ずれかである必要があり、構成で「auto」と表示されている場合に考慮さ
     れます。 ‘stdout-is-tty’ がない場合は、コマンド自体の標準出力をチェ
     ックし、色を使用する場合はステータス0で終了し、それ以外の場合はステ
     ータス1で終了します。 ‘name’ の色設定が未定義の場合、コマンドはフォ
     ールバックとして ‘color.ui’ を使用します。

‘--get-color name [default]’
     ‘name’ (例: ‘color.diff.new’) に設定されている色を見つけて、ANSIカ
     ラーエスケープシーケンスとして標準出力に出力します。 ‘name’ に色が
     設定されていない場合は、オプションの ‘default’ パラメータが代わりに
     使用されます。

     ‘--type=color [--default=<default>]’ は ‘--get-color’ よりも優先さ
     れます(ただし、 ‘--get-color’ は、 ‘--type=color’ によって出力され
     る末尾の改行を省略します)。

‘-e’
‘--edit’
     指定の構成ファイルを変更するためのエディタを開きます。指定できるの
     は、 ‘--system’ または ‘--global’ または「リポジトリ」(指定なし;デ
     フォルト)、のいずれかです。

‘--[no-]includes’
     値を検索するときは、設定ファイルの ‘include.*’ ディレクティブを尊重
     します。特定のファイルが指定されている場合(たとえば、 ‘--file’ 、
     ‘--global’ などを使用した場合)はデフォルトで ‘off’ になり、すべての
     構成ファイルを検索する場合は ‘on’ になります。

‘--default <value>’
     ‘--get’ を使用していて、要求した変数が見つからない場合、 <value> が
     その変数に割り当てられた値であるかのように動作します。


CONFIGURATION
*************

‘pager.config’ は、構成を一覧表示する場合、つまり、 ‘ –list‘ 、または複
数の結果を返す可能性のある ‘--get-*’ のいずれか、を使用する場合にのみ尊
重されます。デフォルトでは pager を使用します。


FILES
*****

‘--file’ で明示的に設定されていない場合、 _git config_ が構成オプション
を検索する以下の4つのファイルがあります:

$(prefix)/etc/gitconfig
     システム全体(PC毎)の構成ファイル

$XDG_CONFIG_HOME/git/config
     2番目のユーザー固有の構成ファイルです。 $XDG_CONFIG_HOME が設定され
     ていないか空の場合 ‘$HOME/.config/git/config’ が使用されます。この
     ファイルに設定されている単一値の変数は、 ‘~/.gitconfig’ にあるもの
     によって上書きされます。このファイルのサポートはごく最近追加された
     ため、古いバージョンのGitを使用することがある場合は、このファイルを
     作成しないことをお勧めします。

~/.gitconfig
     ユーザー毎の構成ファイル。グローバル(global)構成ファイルとも呼ばれ
     る。

$GIT_DIR/config
     リポジトリ毎の構成ファイル。

$GIT_DIR/config.worktree
     これはオプションであり、 ‘extensions.worktreeConfig’ が
     $GIT_DIR/config に存在する場合にのみ検索されます。

   それ以上のオプションが指定されていない場合、すべての読み取りオプショ
ンは、使用可能なこれらのファイルをすべて読み取ります。グローバルまたはシ
ステム全体の構成ファイルが使用できない場合、それらは無視されます。リポジ
トリ設定ファイルが利用できないか読み取り可能でない場合、「git config」は
ゼロ以外のエラーコードで終了します。 ただし、どちらの場合もエラーメッセ
ージは発行されません。

   ファイルは上記の順序で読み取られ、「最後」に見つかった値が前に読み取
った値よりも優先されます。なお、複数値(multiple values)を取得すると、す
べてのファイルのキーのすべての値が使用されます。

   あなたは gitコマンドを実行するとき、 ‘-c’ オプションを使用して、個々
の構成パラメーターをオーバーライドできます。詳細については git(1) を参照
してください。

   すべての書き込みオプションは、デフォルトではリポジトリ固有の構成ファ
イルに書き込みます。これは、 ‘--replace-all’ や ‘--unset’ などのオプショ
ンにも影響することに注意してください。 ※ ‘git config’ は一度に1つのファ
イルのみを変更します。

   これらのルールは、 ‘--global’ と‘ –system‘ と ‘--local’ と‘
–worktree‘ と ‘--file’ コマンドラインオプションを使用してオーバーライド
できます。上記の *note OPTIONS:: を参照してください。


ENVIRONMENT
***********

GIT_CONFIG_GLOBAL
GIT_CONFIG_SYSTEM
     グローバルまたはシステムレベルの構成からではなく、指定されたファイ
     ルから構成を取得します。詳細については git(1) を参照してください。

GIT_CONFIG_NOSYSTEM
     システム全体(PC毎)の $(prefix)/etc/gitconfig ファイルからの設定の読
     み取りをスキップするかどうか。詳細については git(1) を参照してくだ
     さい。

   *note FILES:: も参照して下さい。

GIT_CONFIG_COUNT
GIT_CONFIG_KEY_<n>
GIT_CONFIG_VALUE_<n>
     GIT_CONFIG_COUNTが正の数に設定されている場合、その数までのすべての
     環境ペア GIT_CONFIG_KEY_<n> と GIT_CONFIG_VALUE_<n> がプロセスのラ
     ンタイム構成に追加されます。構成ペアはゼロインデックスです。キーま
     たは値が欠落している場合は、エラーとして扱われます。空の
     GIT_CONFIG_COUNTは、GIT_CONFIG_COUNT=0と同じように扱われます。つま
     り、ペアは処理されません。これらの環境変数は構成ファイルの値をオー
     バーライドしますが、 ‘git -c’ を介して渡された明示的なオプションに
     よってオーバーライドされます。

     これは、共通の構成で複数のgitコマンドを生成したいが、スクリプトを作
     成する場合など、構成ファイルに依存できない場合に役立ちます。

GIT_CONFIG
     ‘git config’ に ‘--file’ オプションが指定されていない場合は、
     ‘--file’ を介して提供されているかのように ‘GIT_CONFIG’ によって指定
     されたファイルを使用します。この変数は他のGitコマンドには影響せず、
     主に歴史的な互換性のためのものです。 通常、 ‘--file’ オプションの代
     わりに使用する理由はありません。


EXAMPLES
********

以下の .git/config が与えられているものとします:

     #
     # This is the config file, and
     # a '#' or ';' character indicates
     # a comment
     #

     ; core variables
     [core]
             ; Don't trust file modes
             filemode = false

     ; Our diff algorithm
     [diff]
             external = /usr/local/bin/diff-wrapper
             renames = true

     ; Proxy settings
     [core]
             gitproxy=proxy-command for kernel.org
             gitproxy=default-proxy ; for all the rest

     ; HTTP
     [http]
             sslVerify
     [http "https://weak.example.com"]
             sslVerify = false
             cookieFile = /tmp/cookie.txt

   あなたは以下のようにしてfilemodeをtrueに設定できます

     % git config core.filemode true

   とある架空のプロキシコマンドエントリで、末尾が kernel.org である行を
、 _"ssh" for kernel.org_ に置換するには

     % git config core.gitproxy '"ssh" for kernel.org' 'for kernel.org$'

   これにより、kernel.orgのキーと値のペアのみが置き換えられます。

   renamesのエントリを削除するには

     % git config --unset diff.renames

   マルチ変数(multivar)(上記のcore.gitproxyなど)のエントリを削除する場合
は、正確に1行の値に一致する正規表現を指定する必要があります。

   特定のキーの値を照会するには、次のようにします。

     % git config --get core.filemode

   または

     % git config core.filemode

   また、マルチ変数(multivar)の照会は:

     % git config --get core.gitproxy "for kernel.org$"

   マルチ変数のすべての値を知りたい場合は、次のようにします:

     % git config --get-all core.gitproxy

   あなたが危険極まりない人生を送りたい場合は、以下のようにして
core.gitproxy の「全て」を新しいものに置き換えることができます。

     % git config --replace-all core.gitproxy ssh

   しかし、あなたが本当にデフォルトプロキシの行、つまり「for …」の接尾辞
のない行だけを置き換えたい場合は、次のようにします:

     % git config core.gitproxy ssh '! for '

   感嘆符(‘!’)と実際に一致させるには、以下のことを行う必要があります。

     % git config section.key value '[!]'

   既存のプロキシを変更せずに新しいプロキシを追加するには、以下を使用し
ます。

     % git config --add core.gitproxy '"proxy-command" for example.com'

   あなたのスクリプトで構成からカスタマイズされた色を使う例:

     #!/bin/sh
     WS=$(git config --get-color color.diff.whitespace "blue reverse")
     RESET=$(git config --get-color "" "reset")
     echo "${WS}your whitespace color or blue reverse${RESET}"

   URL が ‘https://weak.example.com’ の場合、 ‘http.sslVerify’ はfalseに
設定され、他のすべてのURLでは ‘true’ に設定されます:

     % git config --type=bool --get-urlmatch http.sslverify https://good.example.com
     true
     % git config --type=bool --get-urlmatch http.sslverify https://weak.example.com
     false
     % git config --get-urlmatch http https://weak.example.com
     http.cookieFile /tmp/cookie.txt
     http.sslverify false


CONFIGURATION FILE
******************

Git構成ファイルには、Gitコマンドの動作に影響を与えるいくつかの変数が含ま
れています。各リポジトリ内のファイル ‘.git/config’ と、オプションで
‘config.worktree’ (git-worktree(1) の「CONFIGURATION FILE」セクションを
参照)は、そのリポジトリの設定を保存するために使用され、
‘$HOME/.gitconfig’ は、ユーザーごとの構成を ‘.git/config’ ファイルのフォ
ールバック値として保存するために使用されます。 ファイル ‘/etc/gitconfig’
を使用して、システム全体のデフォルト設定を保存できます。

   構成変数は、Git配管コマンドとGit磁器コマンドの両方で使用されます。変
数はセクションに分割されます。変数自体の完全修飾変数名は最後のドット区切
りセグメントであり、セクション名は最後のドットより前のすべてです。変数名
では大文字と小文字が区別されず、英数字(alphanumeric)と ‘-’(\x2d) のみが
許可され、英字(alphabetic)で始まる必要があります。一部の変数は複数回現れ
る場合があり、その変数はmultivalueであると言います(訳注:multiple lines(複
数行)という表現とmultivalueと言う表現が混在する。configでは同じ意味)。


Syntax
======

構文はかなり柔軟で寛容です。空白(whitespace)はほとんど無視されます。 _#_
と _;_ 文字はそこからその行の行末までコメントにします。空白行は無視され
ます。

   このファイルは、セクションと変数で構成されています。セクションは角括
弧内(‘[' … `]')のセクションの名前で始まり、次のセクションが始まるまで続
きます。セクション名では大文字と小文字は区別されません。セクション名には
、英数字(alphanumeric) と `-’ (\x2d) と ‘.’ (\x2e) のみを使用できます。
各変数はあるセクションに属している必要があります。つまり、変数の最初の設
定の前にセクションヘッダーが必要です。

   セクションはさらにサブセクションに分割できます。サブセクションを開始
するには、以下の例のように、セクションヘッダーで、セクション名からスペー
スで区切って、その名前を二重引用符で囲みます:

             [section "subsection"]

   サブセクション名では大文字と小文字が区別され、改行とヌルバイト
(\x00)以外の任意の文字を含めることができます。 二重引用符 ‘"’ (\x22)と バ
ックスラッシュ(\x5c;日本の環境では円記号で表示される事がある)は、それぞ
れ ‘\"’ と ‘\\’ としてエスケープすることで含めることができます。 他の文
字の前にあるバックスラッシュは、読み取るときに削除されます。 たとえば、
‘\t’ は ‘t’ として読み取られ、 ‘\0’ は ‘0’ として読み取られます。セクシ
ョンヘッダーは複数行にまたがることはできません。変数は、セクションまたは
特定のサブセクションに直接属する場合があります。 ‘[section" subsection
"]’ がある場合は ‘[section]’ も使用できますが、必須ではありません。

   非推奨の ‘[section.subsection]’ 構文があります。この構文では、サブセ
クション名は小文字に変換され、大文字と小文字が区別されて比較されます。こ
れらのサブセクション名は、セクション名と同じ制限に従います。

   他のすべての行(およびセクションヘッダーの後の行の残りの部分)は、「
name = value」(または単に「name」)の形式で設定変数として認識されます(「
name」形式は「name = true」の省略形で、変数をブール値「true」に設定しま
す)。変数名では大文字と小文字が区別されず、英数字(alphanumeric)と ‘-’
(\x2d) のみが許可され、英字(alphabetic)で始まる必要があります。

   値を定義する行は、 ‘\’ (\x5c) で終了することにより、次の行に続けるこ
とができます。続けた時、バックスラッシュと行末は削除されて認識されます。
_name =_ の後の先頭の空白と、その行で最初に現れるコメント文字 _#_ または
_;_ 以降行末まで、または、行末尾の空白は、二重引用符で囲まれていない限り
破棄されます。値内の内部空白はそのまま保持されます。

   ダブルクォートで囲まれた中では、ダブルクォート ‘"’ とバックスラッシュ
‘\’ 文字はエスケープしなければなりません。 ‘"’ を表わすには ‘\"’ を使い
、 ‘\’ を表わすには ‘\\’ を使ってください。

   ( ‘\"’ と ‘\\’ に加えて)認識されるエスケープシーケンスは、改行文字
(NL;newline)が ‘\n’ 、水平タブ(HT;TAB)が ‘\t’ 、バックスペース(BS)が
‘\b’ です。他のエスケープシーケンス(8進エスケープシーケンスを含む)は無効
です。


Includes
========

‘include’ セクションと ‘includeIf’ セクションを使用すると、別のソースか
らの設定ディレクティブを含めることができます。これら２つのセクションは、
条件がtrueと評価されない場合 ‘includeIf’ セクションが無視されることを除
いて、同様に動作します。 以下の「Conditional includes」を参照してくださ
い。

   特別な ‘include.path’ (または ‘includeIf.*.path’ )変数をインクルード
するファイルの名前に設定することにより、別の構成ファイルをインクルードで
きます。 変数はその値としてパス名を取り、チルダ展開の対象となります。こ
れらの変数は複数回指定できます。

   インクルードファイルの内容は、includeディレクティブの場所で見つかった
かのように、すぐに挿入されます。変数の値が相対パスである場合、そのパスは
、includeディレクティブが見つかった構成ファイルからの相対パスであると見
なされます。例については、以下を参照してください。


Conditional includes
====================

‘includeIf.<condition>.path’ 変数をインクルードするファイルの名前に設定
することにより、条件付きで別の構成ファイルをインクルードできます。

   条件は、キーワードで始まり、その後にコロンと、形式と意味がキーワード
によって異なるいくつかのデータが続きます。サポートされているキーワードは
以下のとおりです:

‘gitdir’
     キーワード ‘gitdir:’ 続くデータは、グロブパターンとして使用されます
     。 .git ディレクトリの場所がパターンと一致する場合、インクルード条
     件が満たされます。

     ‘.git’ の場所は自動検出されるか、 ‘$GIT_DIR’ 環境変数から取得されま
     す。 リポジトリが .git ファイルを介して(つまり、サブモジュールやリ
     ンクされたワークツリーなどから)自動検出される場合、最終的に検出され
     る .git の場所とは、 .git ファイルの場所ではなく .git ファイルから
     たどった .gitディレクトリの場所です。

     パターンには、標準のグロブワイルドカードと、複数のパス部分に一致す
     る可能性のある2つの追加のワイルドカード ‘**/’ と ‘/**’ を含めること
     ができます。詳細については、 gitignore(5) を参照してください。便宜
     上、以下の記法が使えます:

        • パターンが ‘~/’ で始まる場合、 ‘~’ は環境変数 ‘HOME’ の内容に
          置き換えられます。

        • パターンが ‘./’ で始まる場合、現在の設定ファイルを含むディレク
          トリに置き換えられます。

        • パターンが ‘~/’ ・ ‘./’ ・ ‘/’ のいずれでも始まらない場合、
          ‘**/’ 自動的に先頭に追加されます。たとえば、パターン ‘foo/bar’
          は ‘**/foo/bar’ になり、 ‘/any/path/to/foo/bar’ と一致します。

        • パターンが ‘/’ で終わる場合、 ‘**’ が自動的に追加されます。 た
          とえば、パターン ‘foo/’ は ‘foo/**’ になります。言い換えると、
          「foo」ディレクトリとその中のすべてに再帰的に一致します。

‘gitdir/i’
     これは、照合が大文字と小文字を区別せずに行われることを除いて、
     ‘gitdir’ と同じです(大文字と小文字を区別しないファイルシステムなど
     )。

‘onbranch’
     キーワード ‘onbranch:’ に続くデータは、標準のグロブワイルドカードと
     、複数のパス部分に一致する可能性のある2つの追加のワイルドカード
     ‘**/’ と ‘/**’ を含むパターンと見なされます。現在チェックアウトされ
     ているブランチの名前がパターンと一致するワークツリーにいる場合、イ
     ンクルード条件が満たされます。

     パターンが ‘/’ で終わる場合、 ‘**’ が自動的に追加されます。 たとえ
     ば、パターン ‘foo/’ は ‘foo/**’ になります。つまり、 ‘foo/’ で始ま
     るすべてのブランチに一致します。これは、ブランチが階層的に編成され
     ていて、その階層内のすべてのブランチに構成を適用する場合に役立ちま
     す。

   ‘gitdir’ と ‘gitdir/i’ を介したマッチングに関するいくつかの注意事項:

   • ‘$GIT_DIR’ の中のシンボリックリンクは、マッチ前に解決されません。

   • シンボリックリンクバージョンとrealpathバージョンの両方のパスが、
     ‘$GIT_DIR’ の値と照合されます。例えば ‘~/git’ が ‘/mnt/storage/git’
     へのシンボリックリンクである場合、 ‘gitdir:~/git’ と
     ‘gitdir:/mnt/storage/git’ の両方が一致します。

     これは、Git v2.13.0 でのこの機能の最初のリリースには当てはまりませ
     んでした。これは、realpathバージョンにのみ一致していました。この機
     能の初期リリースとの互換性を希望する構成では、realpathバージョンの
     み、あるいは両方のバージョンを指定する必要があります。

   • 注意: 「../」は特別なものではなく、文字通り一致することに注意してく
     ださい。これは、あなたが望むものではない可能性があります。


Example
=======

     # Core variables
     [core]
             ; Don't trust file modes
             filemode = false

     # Our diff algorithm
     [diff]
             external = /usr/local/bin/diff-wrapper
             renames = true

     [branch "devel"]
             remote = origin
             merge = refs/heads/devel

     # Proxy settings
     [core]
             gitProxy="ssh" for "kernel.org"
             gitProxy=default-proxy ; for the rest

     [include]
             path = /path/to/foo.inc ; include by absolute path
             path = foo.inc ; find "foo.inc" relative to the current file
             path = ~/foo.inc ; find "foo.inc" in your `$HOME` directory

     ; include if $GIT_DIR is /path/to/foo/.git
     [includeIf "gitdir:/path/to/foo/.git"]
             path = /path/to/foo.inc

     ; include for all repositories inside /path/to/group
     [includeIf "gitdir:/path/to/group/"]
             path = /path/to/foo.inc

     ; include for all repositories inside $HOME/to/group
     [includeIf "gitdir:~/to/group/"]
             path = /path/to/foo.inc

     ; relative paths are always relative to the including
     ; file (if the condition is true); their location is not
     ; affected by the condition
     [includeIf "gitdir:/path/to/group/"]
             path = foo.inc

     ; include only if we are in a worktree where foo-branch is
     ; currently checked out
     [includeIf "onbranch:foo-branch"]
             path = foo.inc


Values
======

多くの変数の値は単純な文字列として扱われますが、特定のタイプの値をとる変
数があり、それらの綴り方に関する規則があります。

boolean
     変数がブール値をとると言われるとき、「true」と「false」の多くの同義
     語が受け入れられます。なお、これらはすべて大文字と小文字を区別しま
     せん。

     true
          ブール値 true のリテラルは、 ‘yes’ と ‘on’ と ‘true’ と ‘1`で
          す。 また、値の指定無し( `= <value>’ 無し) の変数は true と見
          なされます。

     false
          ブール値 false リテラルは、 ‘no’ と ‘off’ と ‘false’ と ‘0’ と
          空文字列です。

          ‘--type = bool’ 型指定子を使用して値を正規形に変換する場合、
          _git config_ は、値の出力を「true」または「false」（小文字で表
          記）にします。

integer
     さまざまなサイズを指定する多くの変数の値には、「k」、「M」などの接
     尾辞を付けることができます。これは、「数値に1024掛けた値に」、「数
     値に1024x1024を掛けた値に」などを意味します。

color
     色をとる変数の値は、スペースで区切られた色(最大で2つ、1つは前景用
     (foreground)、もう1つは背景用(background))と、(必要な数の)属性
     (attribute)の「リスト」です。

     使用できる基本色は、 ‘normal’ と ‘black’ と ‘red’ と ‘green’ と
     ‘yellow’ と ‘blue’ と ‘magenta’ と ‘cyan’ と ‘white’ です。与えられ
     た最初の色は前景用です。2番目は背景用です。 ‘normal’ を除くすべての
     基本色には、 ‘brightred’ のように色の前に ‘bright’ と付けることで指
     定できる明るいバリエーションがあります。

     色は0から255までの数字で指定することもできます。これらはANSI256色モ
     ードを使用します(ただし、すべての端末がこれをサポートしているわけで
     はないことに注意してください)。端末が24ビットRGB値をサポートしてい
     る場合は ‘#ff0ab3’ のように16進数として指定することもできます。

     受け入れられる属性(attribute)は、 ‘bold’ と ‘dim’ と ‘ul’ と
     ‘blink’ と ‘reverse’ と ‘italic’ と ‘strike’ (取り消し線
     (cross-out)または「取り消し線」の文字(strikethrough letters)の場合)
     です。色に関する属性の位置(前、後、または中間)は重要ではありません
     。特定の属性は、それらの前に「no」または「no-」を付けることによって
     オフにすることができます(たとえば、「noreverse」、「no-ul」など)。

     空のカラー文字列は、色の効果をまったく生成しません。 これは、色を完
     全に無効にすることなく、特定の要素の色付けを回避するために使用でき
     ます。

     gitで事前定義されたカラースロットの場合、属性は、カラー出力の各アイ
     テムの先頭でリセットされることを意図しています。したがって、
     ‘color.decorate.branch`を’ black‘に設定すると、同じ出力行の前のもの
     が ‘bold’ または他の属性でペイントされるように設定されている場合(た
     とえば ‘log --decorate’ 出力のブランチ名のリストの前で括弧を開く)で
     も、そのブランチ名がプレーンな ‘black’ でペイントされます。ただし、
     カスタムログ形式では、より複雑で階層化された色付けが行われる場合が
     あり、否定された形式が役立つ場合があります。

pathname
     パス名の値をとる変数には、 ‘~/’ または ‘~user/’ で始まる文字列を指
     定できます。このような文字列には、通常のチルダ展開が行われます。
     ‘~/’ は ‘$HOME’ の値に展開され、 ‘~user/’ は指定のユーザーのホーム
     ディレクトリに展開されます。

     パスが ‘%(prefix)/’ で始まる場合、残りはGitの「ランタイムプレフィッ
     クス」に関連するパス、つまりGit自体がインストールされた場所に関連す
     るパスとして解釈されます。 たとえば、 ‘%(prefix)/bin/’ は、Git実行
     可能ファイル自体が存在するディレクトリを指します。Gitがランタイムプ
     レフィックスのサポートなしでコンパイルされた場合、代わりにコンパイ
     ルされたプレフィックスが置き換えられます。万が一、展開してはならな
     いリテラルパスを指定する必要がある場合は、 ‘./%(prefix)/bin’ のよう
     に接頭辞 ‘./’ を付ける必要があります。


Variables
=========

注意: このリストは包括的ではなく、必ずしも完全ではないことに注意してくだ
さい。コマンド固有の変数については、適切なマニュアルページに詳細な説明が
あります。

   他のgit関連ツールは、独自の変数を使用する場合があります。独自のツール
で使用する新しい変数を考案するときは、それらの名前がGit自体や他の一般的
なツールで使用されているものと競合しないことを確認し、ドキュメントに記述
してください。

advice.*
     これらの変数は、新しいユーザーを支援するために設計されたさまざまな
     オプションのヘルプメッセージを制御します。すべての「advice.*」変数
     はデフォルトで「true」に設定されており、これらを「false」に設定する
     ことで、ヘルプが不要であることをGitに伝えることができます。

     fetchShowForcedUpdates
          git-fetch(1)がrefの更新後に強制更新を計算したり、 チェックが無
          効になっていることを警告したりするのに 長い時間がかかる場合に
          表示されるアドバイス。

     pushUpdateRejected
          _pushNonFFCurrent_ と _pushNonFFMatching_ と
          _pushAlreadyExists_ と _pushFetchFirst_ と _pushNeedsForce_ と
          _pushRefNeedsUpdate_ を 同時に無効にする場合は、この変数を
          _false_ に設定します。

     pushNonFFCurrent
          現在のブランチへの non-fast-forward 更新が原因で git-push(1) が
          失敗した場合に表示されるアドバイス。

     pushNonFFMatching
          git-push(1) を実行し、 「matching refs」を明示的にプッシュ(つ
          まり あなたは「:」を使用したか、 あなたの現在のブランチではな
          いrefspecを指定した)して、 「non-fast-forward」エラーが発生し
          たときに表示されるアドバイスです。

     pushAlreadyExists
          git-push(1) が、 fast-forwarding の対象とならない更新(タグなど
          )を拒否した場合に表示されます。

     pushFetchFirst
          git-push(1) が、私たちが持っていないオブジェクトを指す リモー
          ト参照を上書きしようとする更新を 拒否した場合に表示されます。

     pushNeedsForce
          git-push(1) が、 コミットっぽくないオブジェクトを指すリモート
          refを上書きしようとする更新、 またはコミットっぽくないブジェク
          トを指すリモートrefを作成しようとする更新を 拒否した場合に表示
          されます。

     pushUnqualifiedRefname
          git-push(1) が、 ソースと宛先のrefsに基づいて、 ソースが属する
          リモートref名前空間を推測しようとするのをあきらめたときに表示
          されます。 ただし、 ソースオブジェクトのタイプに基づいて、
          refs/heads/* または refs/tags/* のいずれかにプッシュすることを
          提案できる場合もあります。

     pushRefNeedsUpdate
          git-push(1) が、 リモート追跡refにローカルにない更新がある場合
          に、 ブランチの強制更新を拒否した場合に表示されます。

     skippedCherryPicks
          git-rebase(1) が、 アップストリームブランチにすでにチェリーピ
          ックされているコミットをスキップした場合に表示されます。

     statusAheadBehind
          git-status(1) が、 リモート追跡refと比較したローカルrefの先行
          (ahead)/遅延(behind)カウントを計算し、 その計算に予想よりも時
          間がかかる場合に表示されます。 ‘status.aheadBehind’ がfalseの
          場合、 またはオプション ‘--no-ahead-behind’ が指定されている場
          合は表示されません。

     statusHints
          git-status(1) の出力や、 git-commit(1) の コミットメッセージ記
          入時のテンプレート表示や、 git-switch(1) または
          git-checkout(1) の ブランチ切り替え時のヘルプメッセージに、 現
          在の状態からどのように進めていくかの指示を表示します。

     statusUoption
          コマンドが、 追跡されていないファイルを列挙するのに2秒以上かか
          る場合は、 git-status(1) で ‘-u’ オプション使用の検討をアドバ
          イスします。

     commitBeforeMerge
          git-merge(1) がローカルの変更を上書きしないようにマージを拒否
          した場合に、 アドバイスが表示されます。

     resetQuiet
          コマンドがreset後に、 ステージングされていない変更を列挙するの
          に2秒以上かかる場合は、 git-reset(1) で ‘--quiet’ オプション使
          用の検討をアドバイスします。

     resolveConflict
          競合が原因で操作が実行できない場合に、 さまざまなコマンドによ
          って表示されるアドバイス。

     sequencerInUse
          シーケンサーコマンドがすでに進行中の場合に表示されるアドバイス
          。

     implicitIdentity
          システムのユーザー名とドメイン名から 情報が推測される場合の
          ID構成の設定方法に 関するアドバイス。

     detachedHead
          git-switch(1) または git-checkout(1) を使用して HEADのデタッチ
          状態に移行し、 事後にローカルブランチを作成する方法を 指示した
          ときに表示されるアドバイス。

     checkoutAmbiguousRemoteBranchName
          git-checkout(1) と git-switch(1) の引数が、 明確な引数によらず
          リモート追跡ブランチがチェックアウトされる状況で、 複数のリモ
          ート上のリモート追跡ブランチに対して あいまいに解決される場合
          に表示されるアドバイス。 このアドバイスが出力される状況で、 特
          定のリモートをデフォルトで 使用するように設定する方法について
          は、 ‘checkout.defaultRemote’ 構成変数を参照してください。

     amWorkDir
          git-am(1) がパッチファイルの適用に失敗した場合に パッチファイ
          ルの場所を示すアドバイス。

     rmHints
          git-rm(1) の出力に失敗した場合、 現在の状態からどのように進め
          るかについての指示を表示します。

     addEmbeddedRepo
          誤って、あるgitリポジトリを別のリポジトリ内に追加した 場合の対
          処方法に関するアドバイス。

     ignoredHook
          フックが実行可能ファイルとして設定されていないために フックが
          無視された場合に表示されるアドバイス。

     waitingForEditor
          Gitがユーザーからのエディタ入力を待機しているときは、 いつでも
          端末にメッセージを出力します。

     nestedTag
          ユーザーがタグオブジェクトに再帰的にタグを付けようとした 場合
          に表示されるアドバイス。

     submoduleAlternateErrorStrategyDie
          「die」に設定された submodule.alternateErrorStrategy オプショ
          ンが 致命的なエラーを引き起こす場合に表示されるアドバイス。

     addIgnoredFile
          ユーザーが、無視されたファイルをインデックスに追加しようとした
          場合に表示されるアドバイス。

     addEmptyPathspec
          ユーザーがpathspecパラメーターを指定せずに addコマンドを実行し
          た場合に表示されるアドバイス。

     updateSparsePath
          git-add(1) または git-rm(1) のいずれかが、 現在のスパースチェ
          ックアウト外のインデックスエントリを 更新するように求められた
          ときに表示されるアドバイス。

core.fileMode
     作業ツリー内のファイルの実行可能ビットを尊重するかどうかをGitに通知
     します。

     一部のファイルシステムでは、実行可能としてマークされたファイルがチ
     ェックアウトされるか、実行可能ビットがオンになっている実行不可能な
     ファイルをチェックアウトすると、実行可能ビットを失います。
     git-clone(1) または git-init(1) は、ファイルシステムを調査して、実
     行可能ビットを正しく処理し、この変数が必要に応じて自動的に設定され
     るかどうかを確認します。

     リポジトリはファイルモードを正しく処理するファイルシステム上にある
     可能性があり、この変数は作成時に「true」に設定されますが、後でファ
     イルモードを失う別の環境からアクセスできるようになる可能性がありま
     す(たとえば、CIFSマウントを介したext4のエクスポート。CygwinがGit
     for WindowsまたはEclipseでリポジトリを作成た時など)。このような場合
     、この変数を「false」に設定する必要がある場合があります。
     git-update-index(1) を参照してください。

     (設定ファイルでcore.filemodeが指定されていない場合、)デフォルトは
     trueです。

core.hideDotFiles
     (Windowsのみ)trueの場合、名前がドットで始まる、新しく作成されたディ
     レクトリと新しく作成されたファイルを非表示としてマークします。
     _dotGitOnly_ の場合、 ‘.git/’ ディレクトリのみが非表示になり、ドッ
     トで始まる他のファイルは非表示になりません。デフォルトのモードは「
     dotGitOnly」です。

core.ignoreCase
     APFS、HFS+、FAT、NTFSなどの大文字と小文字を区別しないファイルシステ
     ムでGitをより適切に機能させるためのさまざまな回避策を可能にする内部
     変数。たとえば、Gitが「Makefile」を予期しているときにディレクトリリ
     ストで「makefile」が見つかった場合、Git それは実際には同じファイル
     であると想定し、「Makefile」として記憶し続けます。

     デフォルトはfalseですが、 git-clone(1) または git-init(1) は、リポ
     ジトリの作成時に必要に応じてcore.ignoreCaseを調査してtrueに設定しま
     す。

     あなたのオペレーティングシステムとファイルシステムに関して、Gitは、
     この変数の適切な構成に依存しています。この値を変更すると、予期しな
     い動作が発生する可能性があります。

core.precomposeUnicode
     このオプションは、GitのMacOS実装でのみ使用されます。
     core.precomposeUnicode=true の場合、GitはMacOSによって行われたファ
     イル名のUnicode分解(unicode decomposition)を元に戻します。これは、
     MacOSとLinuxまたはWindowsの間でリポジトリを共有する場合に便利です。
     (Git for Windows 1.7.10以降、または Git under cygwin 1.7 が必要です
     )。 falseの場合、ファイル名はGitによって完全に透過的に処理されます
     。これは、古いバージョンのGitとの下位互換性があります。

core.protectHFS
     trueに設定されている場合、 HFS+ ファイルシステムで ‘.git’ と同等と
     見なされるパスのチェックアウトを許可しないでください。デフォルトは
     MacOSでは ‘true’ 、それ以外の場合は ‘false’ です。

core.protectNTFS
     trueに設定されている場合、NTFSファイルシステムで問題を引き起こす可
     能性のあるパスのチェックアウトを許可しないでください。 例えば、 8.3
     の「短い」名前と競合します。デフォルトは、Windowsでは「true」、それ
     以外の場合は「false」です。

core.fsmonitor
     設定されている場合、この変数の値は、要求された日時以降に変更された
     可能性のあるすべてのファイルを識別するコマンドとして使用されます。
     この情報は、変更されていないファイルの不要な処理を回避することによ
     り、gitを高速化するために使用されます。 githooks(5) の「
     fsmonitor-watchman」セクションを参照してください。

core.fsmonitorHookVersion
     fsmonitorを呼び出すときに使用されるフックのバージョンを設定します。
     現在、バージョン1と2があります。これが設定されていない場合、バージ
     ョン2が最初に試行され、失敗した場合はバージョン1が試行されます。 バ
     ージョン1は、入力としてtimpstampを使用して、それ以降に変更があった
     ファイルを判別しますが、watchmanなどの一部のモニターでは、
     timestampを使用すると競合状態になります。バージョン2はopaque
     stringを使用しているため、モニターは競合状態なしで変更されたファイ
     ルを判別するために使用できるものを返すことができます。

core.trustctime
     falseの場合、インデックスと作業ツリー間のctimeの違いは無視されます
     。iノードの変更時刻がGitの外部の何か(ファイルシステムクローラーおよ
     び一部のバックアップシステム)によって定期的に変更される場合に役立ち
     ます。 git-update-index(1) を参照してください。デフォルトではtrueで
     す。

core.splitIndex
     trueの場合、インデックスの分割インデックス機能が使用されます。
     git-update-index(1) を参照してください。 デフォルトではfalseです。

core.untrackedCache
     インデックスの追跡されていないモノのキャッシュ機能をどうするかを決
     定します。この変数が設定されていない(unset)か、 ‘keep’ に設定されて
     いる場合、キャッシュが保持されます。 ‘true`に設定すると、自動的に追
     加されます。 また、 `false’ に設定すると、自動的に削除されます。
     ‘true’ に設定する前に、mtimeがシステムで正しく機能していることを確
     認する必要があります。 git-update-index(1) を参照してください。 こ
     の設定をデフォルトで ‘true’ に設定する ‘feature.manyFiles’ が有効に
     なっていない限り、デフォルトは ‘keep’ です。

core.checkStat
     core.checkStat が設定されていないか ‘default’ に設定されている場合
     、Gitがファイルを調べてからファイルが変更されたかどうかを検出するた
     めに、stat構造体の多くのフィールドがチェックされます。この構成変数
     が ‘minimal’ に設定されている場合、mtimeとctimeの1秒未満の部分、フ
     ァイルの所有者のuidとgid、iノード番号(およびGitがそれを使用するよう
     にコンパイルされている場合はデバイス番号も)はチェック対象から除外さ
     れ、mtimeの2分の1の部分(および ‘core.trustCtime’ が設定されている場
     合はctime)とファイルサイズチェックのみがチェック対象として残ります
     。

     (JGitなど)一部のフィールドに使用可能な値を残さないGitの実装がありま
     す。これらのフィールドを比較から除外することにより、 ‘minimal’ モー
     ドは、同じリポジトリがこれらの他のシステムによって同時に使用される
     場合の相互運用性に役立つ可能性があります。

core.quotePath
     パスを出力するコマンド(例: _ls-files_ 、 _diff_)は、パス名を二重引
     用符で囲み(‘"..."’)、Cが制御文字をエスケープするのと同じ方法でそれ
     らの文字をバックスラッシュ(‘\’)でエスケープすることにより、パス名の
     「異常な」文字をクォートします(例: TABの場合は ‘\t’ 、LFの場合は
     ‘\n’ 、バックスラッシュの場合は ‘\\’ )、または0x80より大きい値のバ
     イト(たとえば、UTF-8の "micro" の場合は8進数 ‘\302\265’)。この変数
     がfalseに設定されている場合、0x80を超えるバイトは「異常」とは見なさ
     れなくなります。この変数の設定に関係なく、二重引用符(‘"’)、バックス
     ラッシュ(‘\’)、および制御文字は常にエスケープされます。単純なスペー
     ス文字は「異常」とは見なされません。多くのコマンドは、 ‘-z’ オプシ
     ョンを使用してパス名を完全にそのままで出力できます。デフォルト値は
     trueです。

core.eol
     作業ディレクトリ内で、( ‘text’ 属性を設定するか、‘text=auto’ と
     Gitがコンテンツをテキストとして自動検出することにより)テキストとし
     てマークされたファイルが使用する行末タイプを設定します。 代替手段は
     、 ‘lf’ と ‘crlf’ と プラットフォームの生来の行末を使用する
     ‘native’ があります。デフォルト値は ‘native’ です。行末変換の詳細に
     ついては、 gitattributes(5) を参照してください。注意:
     ‘core.autocrlf’ が ‘true’ または ‘input’ に設定されている場合、この
     値は無視されることに注意してください。

core.safecrlf
     trueの場合、行末変換がアクティブなときに ‘CRLF’ の変換が可逆的かど
     うかをGitにチェックさせます。 Gitは、コマンドが作業ツリー内のファイ
     ルを直接または間接的に変更するかどうかを確認します。たとえば、ある
     ファイルをコミットしてから同じファイルをチェックアウトすると、作業
     ツリーに元のファイルが生成されます。この操作が ‘core.autocrlf’ の現
     在の設定に当てはまらない場合、Gitはそのファイルを拒否します。変数を
     ‘warn’ に設定でき、その場合、Gitは不可逆的な変換についてのみ警告は
     しますが、操作を続行します。

     CRLF変換には、データが破損する可能性がわずかにあります。有効にする
     と、Gitはコミット時にCRLFをLFに変換し、チェックアウト時にLFをCRLFに
     変換します。コミット前にLFとCRLFが混在しているファイルは、Gitでは復
     元できません。リポジトリにLF行末のみが含まれるように行末を修正する
     のは、テキストファイルの場合は正しい操作です。しかし、誤ってテキス
     トとして分類されたバイナリファイルの場合、変換によってデータが破損
     する可能性があります。

     あなたがこのような破損を早期に認識した場合は、 .gitattributes で変
     換タイプを明示的に設定することで簡単に修正できます。コミットした直
     後は、作業ツリーに元のファイルが残っており、このファイルはまだ破損
     していません。 このファイルはバイナリファイルなのだからと、Gitがフ
     ァイルを適切に処理することをGitに明示的に伝えることができます。

     残念ながら、行末が混在するテキストファイルをクリーンアップするとい
     う望ましい効果と、バイナリファイルを破損するという望ましくない効果
     を区別することはできません。どちらの場合も、CRLFは元に戻せない方法
     で削除されます。テキストファイルの場合、CRLFは行末であるため、これ
     は正しいことですが、バイナリファイルの場合、CRLFを変換するとデータ
     が破損します。

     注意: この安全性チェックは、チェックアウトによって、 ‘core.eol’ と
     ‘core.autocrlf’ の異なる設定に対して元のファイルと同じファイルが生
     成されることを意味するのではなく、現在のファイルに対してのみ生成さ
     れることに注意してください。 たとえば、 ‘LF’ を含むテキストファイル
     は ‘core.eol=lf’ で受け入れられ、後で ‘ core.eol=crlf‘ でチェックア
     ウトできます。この場合、結果のファイルには ‘CRLF’ が含まれますが、
     元のファイルには ‘LF`が含まれていました。 ただし、両方の作業ツリー
     で、行末は一貫しています。つまり、すべて `LF’ または、 すべて
     ‘CRLF’ のいずれかですが、混合されることはありません。行末が混在する
     ファイルは、 ‘core.safecrlf’ メカニズムによって報告されます。

core.autocrlf
     この変数を「true」に設定することは、すべてのファイルで「text」属性
     を「auto」に設定し、core.eolを「crlf」に設定することと同じです。 作
     業ディレクトリに ‘CRLF’ 行末があり、リポジトリにLF行末がある場合は
     、trueに設定します。 この変数は「input」に設定できます。この場合、
     出力変換は実行されません。

core.checkRoundtripEncoding
     ‘working-tree-encoding’ 属性で使用された場合に Git が UTF-8 のラウ
     ンドトリップチェックを行うエンコーディングの、カンマや空白で区切ら
     れたリスト(gitattributes(5) を参照)。デフォルト値は ‘SHIFT-JIS’ で
     す。

core.symlinks
     falseの場合、シンボリックリンクは、リンクテキストを含む小さなプレー
     ンファイルとしてチェックアウトされます。 git-update-index(1) と
     git-add(1) は、記録されたタイプを通常のファイルに変更しません。シン
     ボリックリンクをサポートしないFATのようなファイルシステムで役立ちま
     す。

     デフォルトは true ですが、git-clone(1) や git-init(1) はリポジトリ
     の作成時に core.symlinks を調査して必要に応じて core.symlinks を
     false に設定します。

core.gitProxy
     フェッチにGitプロトコルを使用する場合、リモートサーバーへの直接接続
     を確立する代わりに(「コマンドホストポート」として)実行する「プロキ
     シコマンド」。変数値が「COMMAND for DOMAIN」形式の場合、コマンドは
     、指定されたドメイン文字列で終わるホスト名にのみ適用されます。この
     変数は複数回設定でき、指定された順序で照合されます。最初にマッチし
     たものが採用されます。

     ‘GIT_PROXY_COMMAND’ 環境変数(特別な「for」処理なしで常に普遍的に適
     用されます)によってオーバーライドできます。

     特別な文字列 ‘none’ をプロキシコマンドとして使用して、特定のドメイ
     ンパターンにプロキシを使用しないように指定できます。これは、ファイ
     アウォール内のサーバをプロキシの使用から除外する一方で、外部ドメイ
     ンには共通のプロキシをデフォルトで使用する場合に便利です。

core.sshCommand
     この変数が設定されている場合、 ‘git fetch’ と ‘git push’ は、リモー
     トシステムに接続する必要があるときに、 ‘ssh’ の代わりに指定したコマ
     ンドを使用します。このコマンドは ‘GIT_SSH_COMMAND’ 環境変数と同じ形
     式であり、環境変数が設定されると上書きされます。

core.ignoreStat
     trueの場合、Gitは lstat() 呼び出しを使用して、インデックスと作業ツ
     リーの両方で同じように更新された追跡ファイルの「assume-unchanged」
     ビットを設定することにより、ファイルが変更されたかどうかを検出する
     ことを回避します。

     ファイルがGitの外部で変更される場合、ユーザーは変更されたファイルを
     明示的にステージングする必要があります(たとえば、
     git-update-index(1) の「Examples」セクションを参照)。 Gitは通常、こ
     れらのファイルへの変更を検出しません。

     これは、 CIFS/Microsoft Windows など、 lstat() 呼び出しが非常に遅い
     システムで役立ちます。

     false がデフォルトです。

core.preferSymlinkRefs
     HEADおよびその他のシンボリック参照ファイルのデフォルトの「symref」
     形式の代わりに、シンボリックリンクを使用します。これは、HEADがシン
     ボリックリンクであることを期待する古いスクリプトを操作するために必
     要になる場合があります。

core.alternateRefsCommand
     alternateから利用可能な履歴のヒントをアドバタイズする場合は、
     git-for-each-ref(1) の代わりに、シェルを使用して指定されたコマンド
     を実行します。最初の引数は、alternateの絶対パスです。出力には、1行
     に1つの16進オブジェクトIDが含まれている必要があります(つまり、 ‘git
     for-each-ref --format='%(objectname)'’ によって生成されたものと同じ
     ある必要があります)。

     注意: 通常、 あなたは ‘git for-each-ref’ をconfig値に直接入れること
     はできません。これは、リポジトリパスを引数として受け取らないためで
     す(ただし、あなたは上記のコマンドをシェルスクリプトでラップすること
     はできます)。

core.alternateRefsPrefixes
     alternateからの参照を一覧表示する場合は、指定のプレフィックスで始ま
     る参照のみを一覧表示します。プレフィックスは git-for-each-ref(1) へ
     の引数として指定されたかのようにマッチングします。複数のプレフィッ
     クスを一覧表示するには、それらを空白で区切ります。
     ‘core.alternateRefsCommand’ が設定されている場合、
     ‘core.alternateRefsPrefixes’ を設定しても効果ありません。

core.bare
     trueの場合、このリポジトリは「ベア」(bare;ベアリポジトリ)であると見
     なされ、作業ディレクトリは関連付けられていません。この場合、
     git-add(1) や git-merge(1) など、作業ディレクトリを必要とする多くの
     コマンドが無効になります。

     この設定は、リポジトリの作成時に git-clone(1) または git-init(1) に
     よって自動的に推測されます。 デフォルトでは、 ‘/.git’ で終わるリポ
     ジトリはベアではないと見なされ(bare = false)、他のすべてのリポジト
     リはベアであると見なされます(bare = true)。

core.worktree
     作業ツリーのルートへのパスを設定します。 ‘GIT_COMMON_DIR’ 環境変数
     が設定されている場合、 core.worktree は無視され、作業ツリーのルート
     を決定するために使用されません。core.worktree は ‘GIT_WORK_TREE’ 環
     境変数と ‘--work-tree’ コマンドラインオプションで上書きできます。値
     は、絶対パスまたは ‘.git’ ディレクトリへの相対パスにすることができ
     ます。これは、 ‘--git-dir’ または GIT_DIR 環境変数で指定されるか、
     ‘--git-dir’ や GIT_DIR 環境変数の指定が無い場合は自動的に検出されま
     す。‘--work-tree’ と GIT_WORK_TREE と core.worktree のいずれも指定
     されていない場合、現在の作業ディレクトリが作業ツリーの最上位と見な
     されます。

     注意: この変数は、ディレクトリの ‘.git｀ サブディレクトリ内の構成フ
     ァイルに設定されている場合でも適用され、その値は前者のディレクトリ
     とは異なることに注意してください(たとえば、 `/path/to/’ ディレクト
     リの ‘.git’ サブディレクトリ内の構成ファイル ‘/path/to/.git/config’
     内の core.worktree が ‘/different/path’ に設定されていたとする)、こ
     れはおそらく設定ミスです。あなたが ‘/path/to’ ディレクトリでGitコマ
     ンドを実行すると、引き続き ‘/different/path’ が作業ツリーのルートと
     して使用され、あなたが何をしているのか分かっている(たとえば、リポジ
     トリの通常の作業ツリーとは異なる場所に同じインデックスの読み取り専
     用スナップショットを作成している)のでない限り混乱を招く可能性があり
     ます。

core.logAllRefUpdates
     reflogを有効にします。新旧のSHA-1の追加や、日付/時刻・理由の更新に
     よる、refである <ref> の更新は、ファイル ‘$GIT_DIR/logs/<ref>’ が存
     在する場合のみ、そのファイルにロギングされます。この構成変数が
     ‘true’ に設定されている場合、欠落している ‘$GIT_DIR/logs/<ref>’ フ
     ァイルがブランチヘッド(つまり、 ‘refs/heads/’ 下)、リモートref(つま
     り、 refs/ 下)、note refs(つまり、 ‘refs/notes/’ 下)、およびシンボ
     リックref ‘HEAD’ 。 ‘always`に設定されている場合、欠落している
     reflogは、 `refs/’ 下のすべてのrefに対して自動的に作成されます。

     この情報を使用して、「2日前」(2 days ago)にブランチの先端であったコ
     ミットを判別できます。

     この値は、作業ディレクトリが関連付けられているリポジトリではデフォ
     ルトでtrueになり、ベアリポジトリではデフォルトでfalseになります。

core.repositoryFormatVersion
     リポジトリの形式とレイアウトのバージョンを識別する内部変数。

core.sharedRepository
     _group_ (または _true_ )の場合、リポジトリはグループ内の複数のユー
     ザー間で共有可能になります(すべてのファイルとオブジェクトがグループ
     書き込み可能であることを確認してください)。 _all_ (または _world_ ま
     たは _everybody_)の場合、リポジトリはグループ共有可能であることに加
     えて、すべてのユーザーが読み取り可能になります。 _umask_ (または
     _false_ )の場合、Gitは umask(2) によって報告された権限を使用します
     。「0xxx」(「0xxx」は8進数)の場合、リポジトリ内のファイルはこのモー
     ド値になります。「0xxx」はユーザーのumask値をオーバーライドします
     (他のオプションはユーザーのumask値の要求された部分のみをオーバーラ
     イドします)。例:「0660」は、所有者とグループがリポジトリを読み取り
     /書き込み可能にしますが、他のユーザーはアクセスできません(umaskが「
     0022」などでない限り、「group」と同等です)。 「0640」は、グループで
     読み取り可能ですが、グループで書き込み可能ではないリポジトリです。
     git-init(1) を参照してください。 デフォルトではFalseです。

core.warnAmbiguousRefs
     trueの場合、渡したref名があいまいでリポジトリ内の複数のrefと一致す
     る可能性がある場合、Gitは警告を表示します。 デフォルトではtrue。

core.compression
     デフォルトの圧縮レベルを示す整数 -1〜9。 -1はzlibのデフォルトです。
     0は圧縮がないことを意味し、1〜9はさまざまな速度とサイズのトレードオ
     フであり、9が最も低速です。設定されている場合、これは
     ‘core.looseCompression’ や ‘pack.compression’ などの他の圧縮変数の
     デフォルトを提供します。

core.looseCompression
     整数 -1〜9は、パックファイルにないオブジェクトの圧縮レベルを示しま
     す。-1はzlibのデフォルトです。0は圧縮がないことを意味し、1〜9はさま
     ざまな速度とサイズのトレードオフであり、9が最も低速です。設定されて
     いない場合、デフォルトは core.compression です。 これが設定されてい
     ない場合、デフォルトは1(最高速度)になります。

core.packedGitWindowSize
     1回のマッピング操作でメモリにマップするパックファイルのバイト数。ウ
     ィンドウサイズを大きくすると、システムが少数の大きなパックファイル
     をより迅速に処理できるようになる場合があります。ウィンドウサイズを
     小さくすると、オペレーティングシステムのメモリマネージャへの呼び出
     しが増えるため、パフォーマンスに悪影響を及ぼしますが、多数の大きな
     パックファイルにアクセスする場合のパフォーマンスが向上する可能性が
     あります。

     コンパイル時にNO_MMAPが設定されている場合、デフォルトは1Mバイトです
     。それ以外の場合、32ビットプラットフォームでは32Mバイト、64ビットプ
     ラットフォームでは1Gバイトです。これは、すべてのユーザー/オペレーテ
     ィングシステムにとって妥当なはずです。おそらくあなたはこの値を調整
     する必要はありません。

     _k_ または _m_ または _g_ の一般的な単位接尾辞がサポートされていま
     す。

core.packedGitLimit
     パックファイルからメモリに同時にマップする最大バイト数。Gitが操作を
     完了するために一度にこれ以上のバイトにアクセスする必要がある場合、
     Gitは既存の領域のマップを解除して、プロセス内の仮想アドレス空間を再
     利用します。

     デフォルトは、32ビットプラットフォームでは256Mバイト、64ビットプラ
     ットフォームでは32Tバイト(事実上無制限)です。これは、超巨大プロジェ
     クトを除いて、すべてのユーザー/オペレーティングシステムにとって妥当
     なはずです。あなたは、おそらくこの値を調整する必要はありません。

     _k_ または _m_ または _g_ の一般的な単位接尾辞がサポートされていま
     す。

core.deltaBaseCacheLimit
     複数の削除されたオブジェクトによって参照される可能性のあるベースオ
     ブジェクトをキャッシュするために予約するスレッドあたりの最大バイト
     数。解凍(decompress)されたベースオブジェクト全体をキャッシュに保存
     することで、Gitは頻繁に使用されるベースオブジェクトを何度もアンパッ
     クおよび解凍することを回避できます。

     デフォルトは、すべてのプラットフォームで96Mバイトです。これは、超巨
     大プロジェクトを除いて、すべてのユーザー/オペレーティングシステムに
     とって妥当なはずです。あなたは、おそらくこの値を調整する必要はあり
     ません。

     _k_ または _m_ または _g_ の一般的な単位接尾辞がサポートされていま
     す。

core.bigFileThreshold
     このサイズより大きいファイルは、デルタ圧縮を試行せずに、デフレート
     して保存されます。デルタ圧縮なしで大きなファイルを保存すると、ディ
     スク使用量が増えるというわずかな犠牲を払って、過度のメモリ使用量を
     回避できます。加えて、このサイズより大きいファイルは常にバイナリと
     して扱われます。

     デフォルトは、すべてのプラットフォームで512Mバイトです。ソースコー
     ドやその他のテキストファイルは依然としてデルタ圧縮できるため、これ
     はほとんどのプロジェクトにとって合理的ですが、より大きなバイナリメ
     ディアファイルにとっては合理的ではありません。

     _k_ または _m_ または _g_ の一般的な単位接尾辞がサポートされていま
     す。

core.excludesFile
     ‘.gitignore’ (ディレクトリごと)と ‘.git/info/exclude’ に加えて、追
     跡されることを意図されていないパスを記述するパターンを含むファイル
     へのパス名を指定します。 デフォルトは ‘$XDG_CONFIG_HOME/git/ignore’
     です。 ‘$XDG_CONFIG_HOME’ が設定されていないか空の場合、代わりに
     ‘$HOME/.config/git/ignore’ が使用されます。 gitignore(5) を参照して
     ください。

core.askPass
     パスワードを対話的に要求する一部のコマンド(svnやhttpインターフェイ
     スなど)は、この変数の値を介して指定された外部プログラムを使用するよ
     うに指示できます。 ‘GIT_ASKPASS’ 環境変数でオーバーライドできます。
     設定されていない場合は、 ‘SSH_ASKPASS’ 環境変数の値にフォールバック
     するか、それが失敗した場合は、単純なパスワードプロンプトにフォール
     バックします。外部プログラムには、コマンドライン引数として適切なプ
     ロンプトが与えられ、その標準出力にパスワードを書き出す事になってい
     ます。

core.attributesFile
     ‘.gitattributes’ (ディレクトリごと) と ‘.git/info/attributes’ に加
     えて、Gitはこのファイルで属性を調べます(gitattributes(5) を参照)。
     パスの拡張は、 ‘core.excludesFile’ の場合と同じ方法で行われます。デ
     フォルト値は ‘$XDG_CONFIG_HOME/git/attributes’ です。
     ‘$XDG_CONFIG_HOME’ が設定されていないか空の場合、代わりに
     ‘$HOME/.config/git/attributes’ が使用されます。

core.hooksPath
     デフォルトでは、Gitは ‘$GIT_DIR/hooks’ ディレクトリでフックを探しま
     す。これを別のパスに設定します。例えば ‘/etc/git/hooks’ です。そし
     てGitはそのディレクトリであなたのフックを見つけようとします。例えば
     ‘$GIT_DIR/hooks/pre-receive’ の代わりに
     ‘/etc/git/hooks/pre-receive’ です。

     パスは絶対パスでも相対パスでもかまいません。相対パスは、フックが実
     行されているディレクトリを基準にしたものと見なされます(githooks(5)
     の「DESCRIPTION」セクションを参照)。

     この設定変数は、あなたのGitフックをリポジトリごとに設定するのではな
     く一元的に設定したい場合や、デフォルトのフックを変更した
     ‘init.templateDir’ に代わるより柔軟で一元的な設定として有用です。

core.editor
     エディタを起動してメッセージを編集できる ‘commit’ や ‘tag’ などのコ
     マンドは、この変数が設定されているときにこの変数の値を使用し、環境
     変数 ‘GIT_EDITOR’ は設定されていません。 git-var(1) を参照してくだ
     さい。

core.commentChar
     メッセージを編集できる ‘commit’ や ‘tag’ などのコマンドは、この文字
     で始まるコメント行を考慮し、エディタから戻った後にそれらを削除しま
     す(デフォルトは ‘#’)。

     ‘auto’ に設定すると、 ‘git-commit’ は、既存のコミットメッセージのど
     の行の先頭文字でもない文字を選択します。

core.filesRefLockTimeout
     個々の参照をロックしようとしたときに再試行する時間の長さ(ミリ秒単位
     )。値0は、まったく再試行しないことを意味します。 -1 は無期限に試す
     ことを意味します。 デフォルトは100です(つまり、100ミリ秒再試行しま
     す)。

core.packedRefsTimeout
     ‘packed-refs’ ファイルをロックしようとしたときに再試行する時間の長
     さ(ミリ秒単位)。値0は、まったく再試行しないことを意味します。-1は無
     期限に試すことを意味します。デフォルトは1000です(つまり、1秒間再試
     行します)。

core.pager
     Gitコマンドで使用するテキストビューア(「less」など)。値はシェルによ
     って解釈されることを意図しています。 優先順位は、 ‘$GIT_PAGER’ 環境
     変数、 ‘core.pager’ 構成、 ‘$PAGER’ 、そしてコンパイル時に選択され
     たデフォルト(通常は _less_)です。

     ‘LESS’ 環境変数が設定されていない(unset)場合、Gitはそれを ‘FRX’ に
     設定(set)します(‘LESS’ 環境変数が設定されている場合は、Gitはそれを
     まったく変更しません)。Gitのデフォルト設定である ‘LESS’ を選択的に
     オーバーライドする場合は、 ‘core.pager’ を、例えば ‘less -S’ と設定
     できます。これはGitによってシェルに渡され、Gitは最後のコマンドを
     ‘LESS=FRX less -S’ に変換します。環境変数では ‘S’ オプションを設定
     しませんが、コマンドラインでは設定し、長い行を切り捨てるように指示
     します。同様に、 ‘core.pager’ を ‘less -+F’ に設定すると、環境変数
     によって指定された ‘F`オプションがコマンドラインによって非アクティ
     ブになり、 `less’ の「1画面の場合は終了」動作が非アクティブになりま
     す。特定のGitコマンドに対していくつかのフラグを特に指定してアクティ
     ブにすることができます。たとえば、 ‘pager.blame’ を ‘less -S’ に設
     定すると、 ‘git blame’ でのみページャーで行の切り捨てが有効になりま
     す。

     同様に、 ‘LV’ 環境変数が設定されていない場合、Gitはそれを ‘-c’ に設
     定します。この設定を上書きするには、 ‘LV’ を別の値でエクスポートす
     るか、 ‘core.pager’ を ‘lv +c’ に設定します。

core.whitespace
     注意すべき一般的な空白(whitespace)の問題のコンマ(‘,’)区切りのリスト
     。 _gitd iff_ は ‘color.diff.whitespace’ を使用してそれらを強調表示
     し、 ‘git apply --whitespace = error’ はそれらをエラーと見なします
     。 接頭辞 ‘-’ を付けて、それらのいずれかを無効にすることができます
     (例: ‘-trailing-space’):

        • ‘blank-at-eol’ は、行末の末尾の空白をエラーとして扱います(デフ
          ォルトで有効になっています)。

        • ‘space-before-tab’ は、行の最初のインデント部分のタブ文字の直
          前に表示されるスペース文字をエラーとして扱います(デフォルトで
          有効になっています)。

        • ‘indent-with-non-tab’ は、同等のタブではなくスペース文字でイン
          デントされた行をエラーとして扱います(デフォルトでは有効になっ
          ていません)。

        • ‘tab-in-indent’ は、行の最初のインデント部分にあるタブ文字をエ
          ラーとして扱います(デフォルトでは有効になっていません)。

        • ‘blank-at-eof’ は、ファイルの最後に追加された空白行をエラーと
          して扱います(デフォルトで有効になっています)。

        • ‘trailing-space’ は、‘ blank-at-eol‘ と ‘blank-at-eof’ の両方
          をカバーする省略形です。

        • ‘cr-at-eol’ は、行末のキャリッジリターンをラインターミネータの
          一部として扱います。つまり、そのようなキャリッジリターンの前の
          文字が空白(a whitespace)でない場合、 ‘trailing-space’ はトリガ
          ーされません(デフォルトでは有効になっていません)。

        • ‘tabwidth=<n>’ は、タブが占める文字数を示します。 これは、
          ‘indent-with-non-tab’ と、 Gitが ‘tab-in-indent’ エラーを修正
          する場合に関連します。デフォルトのタブ幅は8です。許可される値
          は1〜63です。

core.fsyncObjectFiles
     このブール値は、オブジェクトファイルを書き込むときに _fsync()_ を有
     効にします。

     これは、データの書き込みを適切に順序付けるファイルシステムでは時間
     と労力の無駄ですが、ジャーナル処理を使用しないファイルシステム(伝統
     的なUNIXファイルシステム)や、ファイルの内容ではなくメタデータのみを
     ジャーナル処理するファイルシステム(OS XのHFS+や、‘data=writeback’ な
     Linux ext3)で役立ちます。

core.preloadIndex
     _git diff_ などの操作のために並列インデックスプリロードを有効にする

     これにより、特にキャッシュセマンティクスが弱く、IOレイテンシが比較
     的高いNFSなどのファイルシステムで、「git diff」や「git status」など
     の操作を高速化できます。有効にすると、Gitはファイルシステムデータと
     のインデックス比較を並行して実行し、重複する入出力を許可します。デ
     フォルトはtrueです。

core.unsetenvvars
     Windowsのみ: 他のプロセスを生成する前に設定を解除する必要がある環境
     変数の名前のコンマ(‘,’)区切りのリスト。Git for Windowsが独自の
     Perlインタープリターの使用を主張しているという事実を説明するために
     、デフォルトは ‘PERL5LIB’ です。

core.restrictinheritedhandles
     Windowsのみ: 生成されたプロセスが標準のファイルハンドル( ‘stdin’ と
     ‘stdout’ と ‘stderr’)のみを継承するか、すべてのハンドルを継承するか
     をオーバーライドします。 ‘auto’ または ‘true’ または ‘false’ にする
     ことができます。デフォルトは ‘auto’ で、これはWindows7以降では
     ‘true’ を意味し、古いバージョンのWindowsでは ‘false’ を意味します。

core.createObject
     これを _link_ に設定できます。この場合、ハードリンク後のソース削除
     を、オブジェクトの作成が既存のオブジェクトが上書しないことをチェッ
     クするために使用します。

     一部のファイルシステム/オペレーティングシステムの組み合わせでは、こ
     れは信頼できませんので、この構成設定を _rename_ に設定します。ただ
     し、これにより、既存のオブジェクトファイルが上書きされないようにす
     るチェックが削除されます。

core.notesRef
     コミットメッセージを表示するときは、指定されたrefに保存されている
     note も表示します。refは完全に修飾されている必要があります。指定さ
     れたrefが存在しない場合、それはエラーではありませんが、noteを印刷し
     てはならないことを意味します。

     この設定のデフォルトは「refs/notes/commits」であり、
     ‘GIT_NOTES_REF’ 環境変数でオーバーライドできます。 git-notes(1) を
     参照してください。

core.commitGraph
     trueの場合、gitはcommit-graphファイル(存在する場合)を読み取り、コミ
     ットのグラフ構造をパースします。デフォルトはtrueです。詳細について
     は、 git-commit-graph(1) を参照してください。

core.useReplaceRefs
     ‘false’ に設定すると、コマンドラインで ‘--no-replace-objects’ オプ
     ションが指定されたかのように振る舞います。詳細については git(1) と
     git-replace(1) を参照してください。

core.multiPackIndex
     multi-pack-index ファイルを使用して、単一のインデックスを使用して複
     数のパックファイルを追跡します。詳細については
     git-multi-pack-index(1) を参照してください。デフォルトはtrueです。

core.sparseCheckout
     「スパースチェックアウト」(sparse checkout)機能を有効にします。 詳
     細については、 git-sparse-checkout(1) を参照してください。

core.sparseCheckoutCone
     スパースチェックアウト機能の「コーンモード」(cone mode)を有効にしま
     す。スパースチェックアウトファイルに含まれるパターンのセットが限ら
     れている場合、このモードはパフォーマンスに大きな利点をもたらします
     。詳細については git-sparse-checkout(1) を参照してください。

core.abbrev
     オブジェクト名の省略形の長さを設定します。指定されていないか「
     auto」に設定されている場合、リポジトリ内のパックされたオブジェクト
     のおおよその数に基づいて適切な値が計算されます。それは、省略された
     オブジェクト名がしばらくの間(some time)一意であるのに十分な長さです
     。「no」に設定すると、省略形は作成されず、オブジェクト名は完全な長
     さで表示されます。 最小の長さは4です。

add.ignoreErrors
add.ignore-errors (deprecated)
     Tells _git add_ to continue adding files when some files cannot be
     added due to indexing errors.  Equivalent to the ‘--ignore-errors’
     option of git-add(1).  ‘add.ignore-errors’ is deprecated, as it
     does not follow the usual naming convention for configuration
     variables.

add.interactive.useBuiltin
     [EXPERIMENTAL] Set to ‘true’ to use the experimental built-in
     implementation of the interactive version of git-add(1) instead of
     the Perl script version.  Is ‘false’ by default.

alias.*
     Command aliases for the git(1) command wrapper - e.g.  after
     defining ‘alias.last = cat-file commit HEAD’, the invocation ‘git
     last’ is equivalent to ‘git cat-file commit HEAD’.  To avoid
     confusion and troubles with script usage, aliases that hide
     existing Git commands are ignored.  Arguments are split by spaces,
     the usual shell quoting and escaping is supported.  A quote pair or
     a backslash can be used to quote them.

     Note that the first word of an alias does not necessarily have to
     be a command.  It can be a command-line option that will be passed
     into the invocation of ‘git’.  In particular, this is useful when
     used with ‘-c’ to pass in one-time configurations or ‘-p’ to force
     pagination.  For example, ‘loud-rebase = -c commit.verbose=true
     rebase’ can be defined such that running ‘git loud-rebase’ would be
     equivalent to ‘git -c commit.verbose=true rebase’.  Also, ‘ps = -p
     status’ would be a helpful alias since ‘git ps’ would paginate the
     output of ‘git status’ where the original command does not.

     If the alias expansion is prefixed with an exclamation point, it
     will be treated as a shell command.  For example, defining
     ‘alias.new = !gitk --all --not ORIG_HEAD’, the invocation ‘git new’
     is equivalent to running the shell command ‘gitk --all --not
     ORIG_HEAD’.  Note that shell commands will be executed from the
     top-level directory of a repository, which may not necessarily be
     the current directory.  ‘GIT_PREFIX’ is set as returned by running
     ‘git rev-parse --show-prefix’ from the original current directory.
     See git-rev-parse(1).

am.keepcr
     If true, git-am will call git-mailsplit for patches in mbox format
     with parameter ‘--keep-cr’.  In this case git-mailsplit will not
     remove ‘\r’ from lines ending with ‘\r\n’.  Can be overridden by
     giving ‘--no-keep-cr’ from the command line.  See git-am(1),
     git-mailsplit(1).

am.threeWay
     By default, ‘git am’ will fail if the patch does not apply cleanly.
     When set to true, this setting tells ‘git am’ to fall back on 3-way
     merge if the patch records the identity of blobs it is supposed to
     apply to and we have those blobs available locally (equivalent to
     giving the ‘--3way’ option from the command line).  Defaults to
     ‘false’.  See git-am(1).

apply.ignoreWhitespace
     When set to _change_, tells _git apply_ to ignore changes in
     whitespace, in the same way as the ‘--ignore-space-change’ option.
     When set to one of: no, none, never, false tells _git apply_ to
     respect all whitespace differences.  See git-apply(1).

apply.whitespace
     Tells _git apply_ how to handle whitespaces, in the same way as the
     ‘--whitespace’ option.  See git-apply(1).

blame.blankBoundary
     Show blank commit object name for boundary commits in git-blame(1).
     This option defaults to false.

blame.coloring
     This determines the coloring scheme to be applied to blame output.
     It can be _repeatedLines_, _highlightRecent_, or _none_ which is
     the default.

blame.date
     Specifies the format used to output dates in git-blame(1).  If
     unset the iso format is used.  For supported values, see the
     discussion of the ‘--date’ option at git-log(1).

blame.showEmail
     Show the author email instead of author name in git-blame(1).  This
     option defaults to false.

blame.showRoot
     Do not treat root commits as boundaries in git-blame(1).  This
     option defaults to false.

blame.ignoreRevsFile
     Ignore revisions listed in the file, one unabbreviated object name
     per line, in git-blame(1).  Whitespace and comments beginning with
     ‘#’ are ignored.  This option may be repeated multiple times.
     Empty file names will reset the list of ignored revisions.  This
     option will be handled before the command line option
     ‘--ignore-revs-file’.

blame.markUnblamableLines
     Mark lines that were changed by an ignored revision that we could
     not attribute to another commit with a _*_ in the output of
     git-blame(1).

blame.markIgnoredLines
     Mark lines that were changed by an ignored revision that we
     attributed to another commit with a _?_  in the output of
     git-blame(1).

branch.autoSetupMerge
     Tells _git branch_, _git switch_ and _git checkout_ to set up new
     branches so that git-pull(1) will appropriately merge from the
     starting point branch.  Note that even if this option is not set,
     this behavior can be chosen per-branch using the ‘--track’ and
     ‘--no-track’ options.  The valid settings are: ‘false’ — no
     automatic setup is done; ‘true’ — automatic setup is done when the
     starting point is a remote-tracking branch; ‘always’ — automatic
     setup is done when the starting point is either a local branch or
     remote-tracking branch.  This option defaults to true.

branch.autoSetupRebase
     When a new branch is created with _git branch_, _git switch_ or
     _git checkout_ that tracks another branch, this variable tells Git
     to set up pull to rebase instead of merge (see
     "branch.<name>.rebase").  When ‘never’, rebase is never
     automatically set to true.  When ‘local’, rebase is set to true for
     tracked branches of other local branches.  When ‘remote’, rebase is
     set to true for tracked branches of remote-tracking branches.  When
     ‘always’, rebase will be set to true for all tracking branches.
     See "branch.autoSetupMerge" for details on how to set up a branch
     to track another branch.  This option defaults to never.

branch.sort
     This variable controls the sort ordering of branches when displayed
     by git-branch(1).  Without the "–sort=<value>" option provided, the
     value of this variable will be used as the default.  See
     git-for-each-ref(1) field names for valid values.

branch.<name>.remote
     When on branch <name>, it tells _git fetch_ and _git push_ which
     remote to fetch from/push to.  The remote to push to may be
     overridden with ‘remote.pushDefault’ (for all branches).  The
     remote to push to, for the current branch, may be further
     overridden by ‘branch.<name>.pushRemote’.  If no remote is
     configured, or if you are not on any branch, it defaults to
     ‘origin’ for fetching and ‘remote.pushDefault’ for pushing.
     Additionally, ‘.’ (a period) is the current local repository (a
     dot-repository), see ‘branch.<name>.merge’’s final note below.

branch.<name>.pushRemote
     When on branch <name>, it overrides ‘branch.<name>.remote’ for
     pushing.  It also overrides ‘remote.pushDefault’ for pushing from
     branch <name>.  When you pull from one place (e.g.  your upstream)
     and push to another place (e.g.  your own publishing repository),
     you would want to set ‘remote.pushDefault’ to specify the remote to
     push to for all branches, and use this option to override it for a
     specific branch.

branch.<name>.merge
     Defines, together with branch.<name>.remote, the upstream branch
     for the given branch.  It tells _git fetch_/_git pull_/_git rebase_
     which branch to merge and can also affect _git push_ (see
     push.default).  When in branch <name>, it tells _git fetch_ the
     default refspec to be marked for merging in FETCH_HEAD. The value
     is handled like the remote part of a refspec, and must match a ref
     which is fetched from the remote given by "branch.<name>.remote".
     The merge information is used by _git pull_ (which at first calls
     _git fetch_) to lookup the default branch for merging.  Without
     this option, _git pull_ defaults to merge the first refspec
     fetched.  Specify multiple values to get an octopus merge.  If you
     wish to setup _git pull_ so that it merges into <name> from another
     branch in the local repository, you can point branch.<name>.merge
     to the desired branch, and use the relative path setting ‘.’ (a
     period) for branch.<name>.remote.

branch.<name>.mergeOptions
     Sets default options for merging into branch <name>.  The syntax
     and supported options are the same as those of git-merge(1), but
     option values containing whitespace characters are currently not
     supported.

branch.<name>.rebase
     When true, rebase the branch <name> on top of the fetched branch,
     instead of merging the default branch from the default remote when
     "git pull" is run.  See "pull.rebase" for doing this in a non
     branch-specific manner.

     When ‘merges’ (or just _m_), pass the ‘--rebase-merges’ option to
     _git rebase_ so that the local merge commits are included in the
     rebase (see git-rebase(1) for details).

     When ‘preserve’ (or just _p_, deprecated in favor of ‘merges’),
     also pass ‘--preserve-merges’ along to _git rebase_ so that locally
     committed merge commits will not be flattened by running _git
     pull_.

     When the value is ‘interactive’ (or just _i_), the rebase is run in
     interactive mode.

     *NOTE*: this is a possibly dangerous operation; do *not* use it
     unless you understand the implications (see git-rebase(1) for
     details).

branch.<name>.description
     Branch description, can be edited with ‘git branch
     --edit-description’.  Branch description is automatically added in
     the format-patch cover letter or request-pull summary.

browser.<tool>.cmd
     Specify the command to invoke the specified browser.  The specified
     command is evaluated in shell with the URLs passed as arguments.
     (See git-web–browse(1).)

browser.<tool>.path
     Override the path for the given tool that may be used to browse
     HTML help (see ‘-w’ option in git-help(1)) or a working repository
     in gitweb (see git-instaweb(1)).

checkout.defaultRemote
     When you run ‘git checkout <something>’ or ‘git switch <something>’
     and only have one remote, it may implicitly fall back on checking
     out and tracking e.g.  ‘origin/<something>’.  This stops working as
     soon as you have more than one remote with a ‘<something>’
     reference.  This setting allows for setting the name of a preferred
     remote that should always win when it comes to disambiguation.  The
     typical use-case is to set this to ‘origin’.

     Currently this is used by git-switch(1) and git-checkout(1) when
     ‘git checkout <something>’ or ‘git switch <something>’ will
     checkout the ‘<something>’ branch on another remote, and by
     git-worktree(1) when ‘git worktree add’ refers to a remote branch.
     This setting might be used for other checkout-like commands or
     functionality in the future.

checkout.guess
     Provides the default value for the ‘--guess’ or ‘--no-guess’ option
     in ‘git checkout’ and ‘git switch’.  See git-switch(1) and
     git-checkout(1).

checkout.workers
     The number of parallel workers to use when updating the working
     tree.  The default is one, i.e.  sequential execution.  If set to a
     value less than one, Git will use as many workers as the number of
     logical cores available.  This setting and
     ‘checkout.thresholdForParallelism’ affect all commands that perform
     checkout.  E.g.  checkout, clone, reset, sparse-checkout, etc.

     Note: parallel checkout usually delivers better performance for
     repositories located on SSDs or over NFS. For repositories on
     spinning disks and/or machines with a small number of cores, the
     default sequential checkout often performs better.  The size and
     compression level of a repository might also influence how well the
     parallel version performs.

checkout.thresholdForParallelism
     When running parallel checkout with a small number of files, the
     cost of subprocess spawning and inter-process communication might
     outweigh the parallelization gains.  This setting allows to define
     the minimum number of files for which parallel checkout should be
     attempted.  The default is 100.

clean.requireForce
     ブール値。falseで無いの場合 ‘-f’ または ‘-i’ または ‘-n’ を指定しな
     い限りgit-cleanは何もしません。 デフォルトはtrueです。

clone.defaultRemoteName
     The name of the remote to create when cloning a repository.
     Defaults to ‘origin’, and can be overridden by passing the
     ‘--origin’ command-line option to git-clone(1).

clone.rejectShallow
     Reject to clone a repository if it is a shallow one, can be
     overridden by passing option ‘--reject-shallow’ in command line.
     See git-clone(1)

color.advice
     A boolean to enable/disable color in hints (e.g.  when a push
     failed, see ‘advice.*’ for a list).  May be set to ‘always’,
     ‘false’ (or ‘never’) or ‘auto’ (or ‘true’), in which case colors
     are used only when the error output goes to a terminal.  If unset,
     then the value of ‘color.ui’ is used (‘auto’ by default).

color.advice.hint
     Use customized color for hints.

color.blame.highlightRecent
     This can be used to color the metadata of a blame line depending on
     age of the line.

     This setting should be set to a comma-separated list of color and
     date settings, starting and ending with a color, the dates should
     be set from oldest to newest.  The metadata will be colored given
     the colors if the line was introduced before the given timestamp,
     overwriting older timestamped colors.

     Instead of an absolute timestamp relative timestamps work as well,
     e.g.  2.weeks.ago is valid to address anything older than 2 weeks.

     It defaults to _blue,12 month ago,white,1 month ago,red_, which
     colors everything older than one year blue, recent changes between
     one month and one year old are kept white, and lines introduced
     within the last month are colored red.

color.blame.repeatedLines
     Use the customized color for the part of git-blame output that is
     repeated meta information per line (such as commit id, author name,
     date and timezone).  Defaults to cyan.

color.branch
     A boolean to enable/disable color in the output of git-branch(1).
     May be set to ‘always’, ‘false’ (or ‘never’) or ‘auto’ (or ‘true’),
     in which case colors are used only when the output is to a
     terminal.  If unset, then the value of ‘color.ui’ is used (‘auto’
     by default).

color.branch.<slot>
     Use customized color for branch coloration.  ‘<slot>’ is one of
     ‘current’ (the current branch), ‘local’ (a local branch), ‘remote’
     (a remote-tracking branch in refs/remotes/), ‘upstream’ (upstream
     tracking branch), ‘plain’ (other refs).

color.diff
     Whether to use ANSI escape sequences to add color to patches.  If
     this is set to ‘always’, git-diff(1), git-log(1), and git-show(1)
     will use color for all patches.  If it is set to ‘true’ or ‘auto’,
     those commands will only use color when output is to the terminal.
     If unset, then the value of ‘color.ui’ is used (‘auto’ by default).

     This does not affect git-format-patch(1) or the _git-diff-*_
     plumbing commands.  Can be overridden on the command line with the
     ‘--color[=<when>]’ option.

color.diff.<slot>
     Use customized color for diff colorization.  ‘<slot>’ specifies
     which part of the patch to use the specified color, and is one of
     ‘context’ (context text - ‘plain’ is a historical synonym), ‘meta’
     (metainformation), ‘frag’ (hunk header), _func_ (function in hunk
     header), ‘old’ (removed lines), ‘new’ (added lines), ‘commit’
     (commit headers), ‘whitespace’ (highlighting whitespace errors),
     ‘oldMoved’ (deleted lines), ‘newMoved’ (added lines),
     ‘oldMovedDimmed’, ‘oldMovedAlternative’,
     ‘oldMovedAlternativeDimmed’, ‘newMovedDimmed’,
     ‘newMovedAlternative’ ‘newMovedAlternativeDimmed’ (See the _<mode>_
     setting of _–color-moved_ in git-diff(1) for details),
     ‘contextDimmed’, ‘oldDimmed’, ‘newDimmed’, ‘contextBold’,
     ‘oldBold’, and ‘newBold’ (see git-range-diff(1) for details).

color.decorate.<slot>
     Use customized color for _git log –decorate_ output.  ‘<slot>’ is
     one of ‘branch’, ‘remoteBranch’, ‘tag’, ‘stash’ or ‘HEAD’ for local
     branches, remote-tracking branches, tags, stash and HEAD,
     respectively and ‘grafted’ for grafted commits.

color.grep
     When set to ‘always’, always highlight matches.  When ‘false’ (or
     ‘never’), never.  When set to ‘true’ or ‘auto’, use color only when
     the output is written to the terminal.  If unset, then the value of
     ‘color.ui’ is used (‘auto’ by default).

color.grep.<slot>
     Use customized color for grep colorization.  ‘<slot>’ specifies
     which part of the line to use the specified color, and is one of

     ‘context’
          non-matching text in context lines (when using ‘-A’, ‘-B’, or
          ‘-C’)

     ‘filename’
          filename prefix (when not using ‘-h’)

     ‘function’
          function name lines (when using ‘-p’)

     ‘lineNumber’
          line number prefix (when using ‘-n’)

     ‘column’
          column number prefix (when using ‘--column’)

     ‘match’
          matching text (same as setting ‘matchContext’ and
          ‘matchSelected’)

     ‘matchContext’
          matching text in context lines

     ‘matchSelected’
          matching text in selected lines

     ‘selected’
          non-matching text in selected lines

     ‘separator’
          separators between fields on a line (‘:’, ‘-’, and ‘=’) and
          between hunks (‘--’)

color.interactive
     When set to ‘always’, always use colors for interactive prompts and
     displays (such as those used by "git-add –interactive" and
     "git-clean –interactive").  When false (or ‘never’), never.  When
     set to ‘true’ or ‘auto’, use colors only when the output is to the
     terminal.  If unset, then the value of ‘color.ui’ is used (‘auto’
     by default).

color.interactive.<slot>
     Use customized color for _git add –interactive_ and _git clean
     –interactive_ output.  ‘<slot>’ may be ‘prompt’, ‘header’, ‘help’
     or ‘error’, for four distinct types of normal output from
     interactive commands.

color.pager
     A boolean to specify whether ‘auto’ color modes should colorize
     output going to the pager.  Defaults to true; set this to false if
     your pager does not understand ANSI color codes.

color.push
     A boolean to enable/disable color in push errors.  May be set to
     ‘always’, ‘false’ (or ‘never’) or ‘auto’ (or ‘true’), in which case
     colors are used only when the error output goes to a terminal.  If
     unset, then the value of ‘color.ui’ is used (‘auto’ by default).

color.push.error
     Use customized color for push errors.

color.remote
     If set, keywords at the start of the line are highlighted.  The
     keywords are "error", "warning", "hint" and "success", and are
     matched case-insensitively.  May be set to ‘always’, ‘false’ (or
     ‘never’) or ‘auto’ (or ‘true’).  If unset, then the value of
     ‘color.ui’ is used (‘auto’ by default).

color.remote.<slot>
     Use customized color for each remote keyword.  ‘<slot>’ may be
     ‘hint’, ‘warning’, ‘success’ or ‘error’ which match the
     corresponding keyword.

color.showBranch
     A boolean to enable/disable color in the output of
     git-show-branch(1).  May be set to ‘always’, ‘false’ (or ‘never’)
     or ‘auto’ (or ‘true’), in which case colors are used only when the
     output is to a terminal.  If unset, then the value of ‘color.ui’ is
     used (‘auto’ by default).

color.status
     A boolean to enable/disable color in the output of git-status(1).
     May be set to ‘always’, ‘false’ (or ‘never’) or ‘auto’ (or ‘true’),
     in which case colors are used only when the output is to a
     terminal.  If unset, then the value of ‘color.ui’ is used (‘auto’
     by default).

color.status.<slot>
     Use customized color for status colorization.  ‘<slot>’ is one of
     ‘header’ (the header text of the status message), ‘added’ or
     ‘updated’ (files which are added but not committed), ‘changed’
     (files which are changed but not added in the index), ‘untracked’
     (files which are not tracked by Git), ‘branch’ (the current
     branch), ‘nobranch’ (the color the _no branch_ warning is shown in,
     defaulting to red), ‘localBranch’ or ‘remoteBranch’ (the local and
     remote branch names, respectively, when branch and tracking
     information is displayed in the status short-format), or ‘unmerged’
     (files which have unmerged changes).

color.transport
     A boolean to enable/disable color when pushes are rejected.  May be
     set to ‘always’, ‘false’ (or ‘never’) or ‘auto’ (or ‘true’), in
     which case colors are used only when the error output goes to a
     terminal.  If unset, then the value of ‘color.ui’ is used (‘auto’
     by default).

color.transport.rejected
     Use customized color when a push was rejected.

color.ui
     This variable determines the default value for variables such as
     ‘color.diff’ and ‘color.grep’ that control the use of color per
     command family.  Its scope will expand as more commands learn
     configuration to set a default for the ‘--color’ option.  Set it to
     ‘false’ or ‘never’ if you prefer Git commands not to use color
     unless enabled explicitly with some other configuration or the
     ‘--color’ option.  Set it to ‘always’ if you want all output not
     intended for machine consumption to use color, to ‘true’ or ‘auto’
     (this is the default since Git 1.8.4) if you want such output to
     use color when written to the terminal.

column.ui
     Specify whether supported commands should output in columns.  This
     variable consists of a list of tokens separated by spaces or
     commas:

     These options control when the feature should be enabled (defaults
     to _never_):

     ‘always’
          always show in columns

     ‘never’
          never show in columns

     ‘auto’
          show in columns if the output is to the terminal

     These options control layout (defaults to _column_).  Setting any
     of these implies _always_ if none of _always_, _never_, or _auto_
     are specified.

     ‘column’
          fill columns before rows

     ‘row’
          fill rows before columns

     ‘plain’
          show in one column

     Finally, these options can be combined with a layout option
     (defaults to _nodense_):

     ‘dense’
          make unequal size columns to utilize more space

     ‘nodense’
          make equal size columns

column.branch
     Specify whether to output branch listing in ‘git branch’ in
     columns.  See ‘column.ui’ for details.

column.clean
     Specify the layout when list items in ‘git clean -i’, which always
     shows files and directories in columns.  See ‘column.ui’ for
     details.

column.status
     Specify whether to output untracked files in ‘git status’ in
     columns.  See ‘column.ui’ for details.

column.tag
     Specify whether to output tag listing in ‘git tag’ in columns.  See
     ‘column.ui’ for details.

commit.cleanup
     This setting overrides the default of the ‘--cleanup’ option in
     ‘git commit’.  See git-commit(1) for details.  Changing the default
     can be useful when you always want to keep lines that begin with
     comment character ‘#’ in your log message, in which case you would
     do ‘git config commit.cleanup whitespace’ (note that you will have
     to remove the help lines that begin with ‘#’ in the commit log
     template yourself, if you do this).

commit.gpgSign
     A boolean to specify whether all commits should be GPG signed.  Use
     of this option when doing operations such as rebase can result in a
     large number of commits being signed.  It may be convenient to use
     an agent to avoid typing your GPG passphrase several times.

commit.status
     A boolean to enable/disable inclusion of status information in the
     commit message template when using an editor to prepare the commit
     message.  Defaults to true.

commit.template
     Specify the pathname of a file to use as the template for new
     commit messages.

commit.verbose
     A boolean or int to specify the level of verbose with ‘git commit’.
     See git-commit(1).

commitGraph.generationVersion
     Specifies the type of generation number version to use when writing
     or reading the commit-graph file.  If version 1 is specified, then
     the corrected commit dates will not be written or read.  Defaults
     to 2.

commitGraph.maxNewFilters
     Specifies the default value for the ‘--max-new-filters’ option of
     ‘git commit-graph write’ (c.f., git-commit-graph(1)).

commitGraph.readChangedPaths
     If true, then git will use the changed-path Bloom filters in the
     commit-graph file (if it exists, and they are present).  Defaults
     to true.  See git-commit-graph(1) for more information.

credential.helper
     ユーザー名またはパスワードの資格情報が必要なときに呼び出される外部
     ヘルパーを指定します。ヘルパーは、ユーザーに資格情報の入力を求めな
     いように、外部ストレージを参照する場合があります。これは通常、可能
     な引数を持つ資格情報ヘルパーの名前ですが、引数を持つ絶対パス、また
     は ‘!’ が前に付いている場合はシェルコマンドの場合もあります。

     注意: 複数のヘルパーが定義されている場合があることに注意してくださ
     い。詳細と例については、 gitcredentials(7) を参照してください。

credential.useHttpPath
     資格情報を取得するとき、http URL または https URL のパス部分を重要
     視します。デフォルトはfalseです。詳細については、 gitcredentials(7)
     を参照してください。

credential.username
     ネットワーク認証にユーザー名が設定されていない場合は、デフォルトで
     このユーザー名を使用します。 以下の credential.<context>.* と
     gitcredentials(7) を参照してください。

credential.<url>.*
     上記の credential.* オプションは、一部の資格情報に選択的に適用でき
     ます。 たとえば、 "credential.https://example.com.username" は、
     example.com への https 接続に対してのみデフォルトのユーザー名を設定
     します。 URLの照合方法の詳細については、 gitcredentials(7) を参照し
     てください。

credentialCache.ignoreSIGHUP
     git-credential-cache—daemon に、終了する代わりにSIGHUPを無視するよ
     うに指示します。

credentialStore.lockTimeoutMS
     資格情報ファイルをロックしようとしたときに git-credential-store が
     再試行する時間の長さ(ミリ秒単位)。値0は、まったく再試行しないことを
     意味します。-1は無期限に試すことを意味します。デフォルトは1000です
     (つまり、1秒間再試行します)。

completion.commands
     これは、補完コマンドのリストからコマンドを追加または削除するために
     git-completion.bashによってのみ使用されます。通常、磁器コマンドと、
     いくつかの選択されたコマンドのみが補完します。この変数には、スペー
     スで区切ってコマンドを追加できます。 コマンドの前に ‘-’ を付けると
     、既存のリストから削除されます。

diff.autoRefreshIndex
     _git diff_ を使用して作業ツリーファイルと比較する場合、統計のみの変
     更を変更されたものと見なさない。代わりに、サイレントに ‘git
     update-index --refresh’ を実行して、ワークツリーの内容がインデック
     スの内容と一致するパスの、キャッシュされた統計情報を更新します。こ
     のオプションのデフォルトはtrueです。注意: これは ‘git diff’ 磁器コ
     マンドにのみ影響し、 ‘git diff-files’ などの下位レベルのdiffコマン
     ドには影響しないことに注意してください。

diff.dirstat
     git-diff(1) およびその仲間に対する ‘--dirstat’ オプションのデフォル
     トの動作を指定する ‘--dirstat’ パラメーターのコンマ区切りリスト。デ
     フォルトは(‘--dirstat=<param1,param2,...>’ を使用して)コマンドライ
     ンでオーバーライドできます。フォールバックのデフォルトは
     ‘changes,noncumulative,3’ です(‘diff.dirstat’ によって変更されてい
     ない限り)。以下のパラメータを使用できます:

     ‘changes’
          ソースから削除された、または宛先に追加された行をカウントして、
          dirstat数を計算します。これは、ファイル内の純粋なコード移動の
          量を無視します。つまり、ファイル内の行の再配置は、他の変更ほど
          カウントされません。これは、パラメーターが指定されていない場合
          のデフォルトの動作です。

     ‘lines’
          通常の行ベースのdiff分析を実行し、削除/追加 された行数を合計し
          て、dirstat数を計算します。(バイナリファイルの場合、バイナリフ
          ァイルには行の自然な概念がないため、代わりに64バイトのチャンク
          をカウントします)。 これは ‘changes’ 動作よりもコストのかかる
          ‘--dirstat’ 動作ですが、他の変更と同じようにファイル内の再配置
          された行をカウントします。 結果の出力は、他の ‘--*stat’ オプシ
          ョンから得られるものと一致しています。

     ‘files’
          変更されたファイルの数を数えて、dirstat数を計算します。変更さ
          れた各ファイルは、dirstat分析で等しくカウントされます。これは
          、ファイルの内容をまったく調べる必要がないため、計算コストが最
          も安価な ‘--dirstat’ の動作です。

     ‘cumulative’
          親ディレクトリの子ディレクトリの変更もカウントします。
          ‘cumulative’ を使用する場合、報告されるパーセンテージの合計が
          100％を超える場合があることに注意してください。 デフォルトの
          (非累積的な)動作は、 ‘non-cumulative’ パラメーターで指定できま
          す。

     <limit>
          整数パラメーターは、カットオフパーセント(デフォルトでは3%)を指
          定します。変更への貢献がこの割合より少ないディレクトリは出力に
          表示されません。

     例: 変更されたファイルの総数の10%未満のディレクトリを無視し、親ディ
     レクトリに子ディレクトリの数を累積しながら、変更されたファイルをカ
     ウントする: ‘files,10,cumulative’

diff.statGraphWidth
     ‘--stat’ 出力でグラフ部分の幅を制限します。設定されている場合、
     format-patchを除く ‘--stat’ 出力を生成するすべてのコマンドに適用さ
     れます。

diff.context
     デフォルトの3ではなく<n>行のコンテキストで差分を生成します。この値
     は ‘-U’ オプションによってオーバーライドされます。

diff.interHunkContext
     指定された行数までのdiffハンク間のコンテキストを表示し、それによっ
     て互いに近いハンクを融合します。この値は、 ‘--inter-hunk-context’ コ
     マンドラインオプションのデフォルトとして機能します。

diff.external
     この構成変数が設定されている場合、diffの生成は、内部のdiff機構を使
     用して実行されるのではなく、指定されたコマンドを使用して実行されま
     す。 ‘GIT_EXTERNAL_DIFF’ 環境変数でオーバーライドできます。このコマ
     ンドは、 git(1) の「git Diffs」で説明されているパラメーターを使用し
     て呼び出されます。 注意: ファイルのサブセットでのみ外部diffプログラ
     ムを使用する場合は、代わりに gitattributes(5) を使用することをお勧
     めします。

diff.ignoreSubmodules
     ‘--ignore-submodules’ のデフォルト値を設定します。これは ‘git diff’
     磁器コマンドにのみ影響し、 ‘git diff-files’ などの下位レベルの
     diffコマンドには影響しないことに注意してください。 ‘git checkout’ や
     ‘git switch’ も、コミットされていない変更を報告するときにこの設定を
     尊重します。 _all_ に設定すると、 ‘--ignore-submodules’ コマンドラ
     インオプションを使用してオーバーライドされない限り、
     ‘status.submoduleSummary’ が設定されている場合、通常は _git commit_
     および _git status_ で表示されるサブモジュールの概要が無効になりま
     す。 _git submodule_ コマンドは、この設定の影響を受けません。デフォ
     ルトでは、これは untracked に設定されているため、追跡されていないサ
     ブモジュールはすべて無視されます。

diff.mnemonicPrefix
     設定されている場合、 ‘git diff’ は、比較対象に応じて標準の _a/_ や
     _b/_ とは異なるプレフィックスのペアを使用します。この構成が有効な場
     合、逆差分出力でもプレフィックスの順序が入れ替わります:

     ‘git diff’
          (i)ndex と (w)ork tree を比較

     ‘git diff HEAD’
          (c)ommit と (w)ork tree を比較

     ‘git diff --cached’
          (c)ommit と (i)ndex を比較

     ‘git diff HEAD:file1 file2’
          (o)bject と (w)ork tree エンティティを比較

     ‘git diff --no-index a b’
          2つの非git項目 (1) と (2) を比較

diff.noprefix
     設定されている場合、 ‘git diff’ は送信元または宛先のプレフィックス
     を表示しません。

diff.relative
     _true_ に設定すると、 _git diff_ はディレクトリ外の変更を表示せず、
     現在のディレクトリへの相対的なパス名を表示します。

diff.orderFile
     diff内でファイルを並べ替える方法を示すファイル。 詳細については、
     git-diff(1) の ‘-O’ オプションを参照してください。 ‘diff.orderFile’
     が相対パス名の場合、作業ツリーの最上位を基準として扱います。

diff.renameLimit
     コピー/名前変更 の検出の徹底的な部分で考慮するファイルの数。 _git
     diff_ の ‘-l’ オプションと同等です。設定されていない場合、デフォル
     ト値は現在1000です。この設定は、名前変更の検出がオフになっている場
     合は効果がありません。

diff.renames
     Gitが名前の変更を検出するかどうかとその方法。 "false" に設定すると
     、名前変更の検出が無効になります。 "true" に設定すると、基本的な名
     前変更の検出が有効になります。 "copies" または "copy" に設定されて
     いる場合、Gitはコピーも検出します。デフォルトはtrueです。これは
     git-diff(1) や git-log(1) のような _git diff_ 磁器コマンドにのみ影
     響し、 git-diff-files(1) などの下位レベルのコマンドには影響しないこ
     とに注意してください。

diff.suppressBlankEmpty
     空の出力行の前にスペースを印刷する標準的な動作を禁止するブール値。
     デフォルトはfalseです。

diff.submodule
     サブモジュールの違いを表示する形式を指定します。 "short" 形式は、範
     囲の最初と最後にコミットの名前を表示するだけです。 "log" 形式は、
     git-submodule(1) の ‘summary’ のように範囲内のコミットをリストしま
     す。 "diff" 形式は、サブモジュールの変更された内容のインライン
     diffを示します。デフォルトは "short" です。

diff.wordRegex
     単語ごとの差の計算を実行するときに「単語」(word)とは何かを判別する
     ために使用されるPOSIX拡張正規表現。正規表現に一致する文字シーケンス
     は「単語」(words)であり、他のすべての文字は*無視できる*空白
     (whitespace)です。

diff.<driver>.command
     カスタムdiffドライバーコマンド。詳細については gitattributes(5) を
     参照してください。

diff.<driver>.xfuncname
     diffドライバーがハンクヘッダーを認識するために使用する必要がある正
     規表現。内蔵パターンを使用することもできます。詳細については
     gitattributes(5) を参照してください。

diff.<driver>.binary
     このオプションをtrueに設定すると、diffドライバーがファイルをバイナ
     リとして処理します。詳細については gitattributes(5) を参照してくだ
     さい。

diff.<driver>.textconv
     ファイルのテキスト変換バージョンを生成するためにdiffドライバーが呼
     び出す必要のあるコマンド。変換の結果は、人間が読める形式のdiffを生
     成するために使用されます。詳細については gitattributes(5) を参照し
     てください。

diff.<driver>.wordRegex
     diffドライバーが単語(words)を1行に分割するために使用する必要がある
     正規表現。詳細については gitattributes(5) を参照してください。

diff.<driver>.cachetextconv
     このオプションをtrueに設定すると、diffドライバーがテキスト変換出力
     をキャッシュするようになります。詳細については gitattributes(5) を
     参照してください。

diff.tool
     git-difftool(1) によって使用されるdiffツールを制御します。この変数
     は、 ‘merge.tool’ で構成された値をオーバーライドします。以下のリス
     トは、有効な組み込み値を示しています。その他の値はカスタムdiffツー
     ルとして扱われ、対応する difftool.<tool>.cmd 変数が定義されている必
     要があります。

diff.guitool
     ‘-g/--gui’ フラグが指定されている場合に、 git-difftool(1) が使用す
     るdiffツールを制御します。この変数は、 ‘merge.guitool’ で構成された
     値をオーバーライドします。以下のリストは、有効な組み込み値を示して
     います。その他の値はカスタムdiffツールとして扱われ、対応する
     difftool.<guitool>.cmd 変数が定義されている必要があります。

        • araxis

        • bc

        • bc3

        • bc4

        • codecompare

        • deltawalker

        • diffmerge

        • diffuse

        • ecmerge

        • emerge

        • examdiff

        • guiffy

        • gvimdiff

        • gvimdiff1

        • gvimdiff2

        • gvimdiff3

        • kdiff3

        • kompare

        • meld

        • nvimdiff

        • nvimdiff1

        • nvimdiff2

        • nvimdiff3

        • opendiff

        • p4merge

        • smerge

        • tkdiff

        • vimdiff

        • vimdiff1

        • vimdiff2

        • vimdiff3

        • winmerge

        • xxdiff

diff.indentHeuristic
     このオプションを ‘false’ に設定すると、パッチを読みやすくするために
     diffハンク境界をシフトするデフォルトのヒューリスティックが無効にな
     ります。

diff.algorithm
     diffアルゴリズムを選択します。 派生形は以下のとおりです:

     ‘default’, ‘myers’
          基本的な貪欲な差分アルゴリズム。現在、これがデフォルトです。

     ‘minimal’
          より多くの時間を費やして。可能な限り最小の差分が生成されるよう
          にします。

     ‘patience’
          パッチを生成するときは、patience diff(忍耐差分)アルゴリズムを
          使用してください。

     ‘histogram’
          このアルゴリズムは、忍耐アルゴリズムを拡張して、「発生頻度の低
          い共通要素をサポート」(support low-occurrence common
          elements)します。

diff.wsErrorHighlight
     差分の ‘context’ または ‘old または `new’ 行の空白エラー(whitespace
     errors)を強調表示します。複数の値はコンマで区切られ、 ‘none’ は前の
     値をリセットし、 ‘default’ はリストを ‘new’ にリセットし、 ‘all’ は
     ‘old,new,context’ の省略形です。空白のエラー(whitespace errors)は
     ‘color.diff.whitespace’ で色分けされています。コマンドラインオプシ
     ョン ‘--ws-error-highlight=<kind>’ はこの設定を上書きします。

diff.colorMoved
     有効な ‘<mode>’ またはtrueのいずれかに設定すると、diff内の移動され
     た行が異なる色で表示されます。有効なモードの詳細については、
     git-diff(1) の ‘--color-moved’ を参照してください。単にtrueに設定す
     ると、デフォルトのカラーモードが使用されます。 falseに設定すると、
     移動した行は色付けされません。

diff.colorMovedWS
     このオプションは、例えば ‘diff.colorMoved’ 設定を使用して移動した行
     に色を付ける場合、スペース(spaces)をどのように扱うかを ‘<mode>’ で
     制御します。有効なモードの詳細については git-diff(1) の
     ‘--color-moved-ws’ を参照してください。

difftool.<tool>.path
     Override the path for the given tool.  This is useful in case your
     tool is not in the PATH.

difftool.<tool>.cmd
     Specify the command to invoke the specified diff tool.  The
     specified command is evaluated in shell with the following
     variables available: _LOCAL_ is set to the name of the temporary
     file containing the contents of the diff pre-image and _REMOTE_ is
     set to the name of the temporary file containing the contents of
     the diff post-image.

difftool.prompt
     Prompt before each invocation of the diff tool.

extensions.objectFormat
     Specify the hash algorithm to use.  The acceptable values are
     ‘sha1’ and ‘sha256’.  If not specified, ‘sha1’ is assumed.  It is
     an error to specify this key unless ‘core.repositoryFormatVersion’
     is 1.

     Note that this setting should only be set by git-init(1) or
     git-clone(1).  Trying to change it after initialization will not
     work and will produce hard-to-diagnose issues.

fastimport.unpackLimit
     If the number of objects imported by git-fast-import(1) is below
     this limit, then the objects will be unpacked into loose object
     files.  However if the number of imported objects equals or exceeds
     this limit then the pack will be stored as a pack.  Storing the
     pack from a fast-import can make the import operation complete
     faster, especially on slow filesystems.  If not set, the value of
     ‘transfer.unpackLimit’ is used instead.

feature.*
     The config settings that start with ‘feature.’ modify the defaults
     of a group of other config settings.  These groups are created by
     the Git developer community as recommended defaults and are subject
     to change.  In particular, new config options may be added with
     different defaults.

feature.experimental
     Enable config options that are new to Git, and are being considered
     for future defaults.  Config settings included here may be added or
     removed with each release, including minor version updates.  These
     settings may have unintended interactions since they are so new.
     Please enable this setting if you are interested in providing
     feedback on experimental features.  The new default values are:

        • ‘fetch.negotiationAlgorithm=skipping’ may improve fetch
          negotiation times by skipping more commits at a time, reducing
          the number of round trips.

feature.manyFiles
     Enable config options that optimize for repos with many files in
     the working directory.  With many files, commands such as ‘git
     status’ and ‘git checkout’ may be slow and these new defaults
     improve performance:

        • ‘index.version=4’ enables path-prefix compression in the
          index.

        • ‘core.untrackedCache=true’ enables the untracked cache.  This
          setting assumes that mtime is working on your machine.

fetch.recurseSubmodules
     This option controls whether ‘git fetch’ (and the underlying fetch
     in ‘git pull’) will recursively fetch into populated submodules.
     This option can be set either to a boolean value or to _on-demand_.
     Setting it to a boolean changes the behavior of fetch and pull to
     recurse unconditionally into submodules when set to true or to not
     recurse at all when set to false.  When set to _on-demand_, fetch
     and pull will only recurse into a populated submodule when its
     superproject retrieves a commit that updates the submodule’s
     reference.  Defaults to _on-demand_, or to the value of
     _submodule.recurse_ if set.

fetch.fsckObjects
     If it is set to true, git-fetch-pack will check all fetched
     objects.  See ‘transfer.fsckObjects’ for what’s checked.  Defaults
     to false.  If not set, the value of ‘transfer.fsckObjects’ is used
     instead.

fetch.fsck.<msg-id>
     Acts like ‘fsck.<msg-id>’, but is used by git-fetch-pack(1) instead
     of git-fsck(1).  See the ‘fsck.<msg-id>’ documentation for details.

fetch.fsck.skipList
     Acts like ‘fsck.skipList’, but is used by git-fetch-pack(1) instead
     of git-fsck(1).  See the ‘fsck.skipList’ documentation for details.

fetch.unpackLimit
     If the number of objects fetched over the Git native transfer is
     below this limit, then the objects will be unpacked into loose
     object files.  However if the number of received objects equals or
     exceeds this limit then the received pack will be stored as a pack,
     after adding any missing delta bases.  Storing the pack from a push
     can make the push operation complete faster, especially on slow
     filesystems.  If not set, the value of ‘transfer.unpackLimit’ is
     used instead.

fetch.prune
     If true, fetch will automatically behave as if the ‘--prune’ option
     was given on the command line.  See also ‘remote.<name>.prune’ and
     the PRUNING section of git-fetch(1).

fetch.pruneTags
     If true, fetch will automatically behave as if the
     ‘refs/tags/*:refs/tags/*’ refspec was provided when pruning, if not
     set already.  This allows for setting both this option and
     ‘fetch.prune’ to maintain a 1=1 mapping to upstream refs.  See also
     ‘remote.<name>.pruneTags’ and the PRUNING section of git-fetch(1).

fetch.output
     Control how ref update status is printed.  Valid values are ‘full’
     and ‘compact’.  Default value is ‘full’.  See section OUTPUT in
     git-fetch(1) for detail.

fetch.negotiationAlgorithm
     Control how information about the commits in the local repository
     is sent when negotiating the contents of the packfile to be sent by
     the server.  Set to "skipping" to use an algorithm that skips
     commits in an effort to converge faster, but may result in a
     larger-than-necessary packfile; or set to "noop" to not send any
     information at all, which will almost certainly result in a
     larger-than-necessary packfile, but will skip the negotiation step.
     The default is "default" which instructs Git to use the default
     algorithm that never skips commits (unless the server has
     acknowledged it or one of its descendants).  If
     ‘feature.experimental’ is enabled, then this setting defaults to
     "skipping".  Unknown values will cause _git fetch_ to error out.

     See also the ‘--negotiate-only’ and ‘--negotiation-tip’ options to
     git-fetch(1).

fetch.showForcedUpdates
     Set to false to enable ‘--no-show-forced-updates’ in git-fetch(1)
     and git-pull(1) commands.  Defaults to true.

fetch.parallel
     Specifies the maximal number of fetch operations to be run in
     parallel at a time (submodules, or remotes when the ‘--multiple’
     option of git-fetch(1) is in effect).

     A value of 0 will give some reasonable default.  If unset, it
     defaults to 1.

     For submodules, this setting can be overridden using the
     ‘submodule.fetchJobs’ config setting.

fetch.writeCommitGraph
     Set to true to write a commit-graph after every ‘git fetch’ command
     that downloads a pack-file from a remote.  Using the ‘--split’
     option, most executions will create a very small commit-graph file
     on top of the existing commit-graph file(s).  Occasionally, these
     files will merge and the write may take longer.  Having an updated
     commit-graph file helps performance of many Git commands, including
     ‘git merge-base’, ‘git push -f’, and ‘git log --graph’.  Defaults
     to false.

format.attach
     Enable multipart/mixed attachments as the default for
     _format-patch_.  The value can also be a double quoted string which
     will enable attachments as the default and set the value as the
     boundary.  See the –attach option in git-format-patch(1).

format.from
     Provides the default value for the ‘--from’ option to format-patch.
     Accepts a boolean value, or a name and email address.  If false,
     format-patch defaults to ‘--no-from’, using commit authors directly
     in the "From:" field of patch mails.  If true, format-patch
     defaults to ‘--from’, using your committer identity in the "From:"
     field of patch mails and including a "From:" field in the body of
     the patch mail if different.  If set to a non-boolean value,
     format-patch uses that value instead of your committer identity.
     Defaults to false.

format.numbered
     A boolean which can enable or disable sequence numbers in patch
     subjects.  It defaults to "auto" which enables it only if there is
     more than one patch.  It can be enabled or disabled for all
     messages by setting it to "true" or "false".  See –numbered option
     in git-format-patch(1).

format.headers
     Additional email headers to include in a patch to be submitted by
     mail.  See git-format-patch(1).

format.to
format.cc
     Additional recipients to include in a patch to be submitted by
     mail.  See the –to and –cc options in git-format-patch(1).

format.subjectPrefix
     The default for format-patch is to output files with the _[PATCH]_
     subject prefix.  Use this variable to change that prefix.

format.coverFromDescription
     The default mode for format-patch to determine which parts of the
     cover letter will be populated using the branch’s description.  See
     the ‘--cover-from-description’ option in git-format-patch(1).

format.signature
     The default for format-patch is to output a signature containing
     the Git version number.  Use this variable to change that default.
     Set this variable to the empty string ("") to suppress signature
     generation.

format.signatureFile
     Works just like format.signature except the contents of the file
     specified by this variable will be used as the signature.

format.suffix
     The default for format-patch is to output files with the suffix
     ‘.patch’.  Use this variable to change that suffix (make sure to
     include the dot if you want it).

format.encodeEmailHeaders
     Encode email headers that have non-ASCII characters with
     "Q-encoding" (described in RFC 2047) for email transmission.
     Defaults to true.

format.pretty
     The default pretty format for log/show/whatchanged command, See
     git-log(1), git-show(1), git-whatchanged(1).

format.thread
     The default threading style for _git format-patch_.  Can be a
     boolean value, or ‘shallow’ or ‘deep’.  ‘shallow’ threading makes
     every mail a reply to the head of the series, where the head is
     chosen from the cover letter, the ‘--in-reply-to’, and the first
     patch mail, in this order.  ‘deep’ threading makes every mail a
     reply to the previous one.  A true boolean value is the same as
     ‘shallow’, and a false value disables threading.

format.signOff
     A boolean value which lets you enable the ‘-s/--signoff’ option of
     format-patch by default.  *Note:* Adding the ‘Signed-off-by’
     trailer to a patch should be a conscious act and means that you
     certify you have the rights to submit this work under the same open
     source license.  Please see the _SubmittingPatches_ document for
     further discussion.

format.coverLetter
     A boolean that controls whether to generate a cover-letter when
     format-patch is invoked, but in addition can be set to "auto", to
     generate a cover-letter only when there’s more than one patch.
     Default is false.

format.outputDirectory
     Set a custom directory to store the resulting files instead of the
     current working directory.  All directory components will be
     created.

format.filenameMaxLength
     The maximum length of the output filenames generated by the
     ‘format-patch’ command; defaults to 64.  Can be overridden by the
     ‘--filename-max-length=<n>’ command line option.

format.useAutoBase
     A boolean value which lets you enable the ‘--base=auto’ option of
     format-patch by default.  Can also be set to "whenAble" to allow
     enabling ‘--base=auto’ if a suitable base is available, but to skip
     adding base info otherwise without the format dying.

format.notes
     Provides the default value for the ‘--notes’ option to
     format-patch.  Accepts a boolean value, or a ref which specifies
     where to get notes.  If false, format-patch defaults to
     ‘--no-notes’.  If true, format-patch defaults to ‘--notes’.  If set
     to a non-boolean value, format-patch defaults to ‘--notes=<ref>’,
     where ‘ref’ is the non-boolean value.  Defaults to false.

     If one wishes to use the ref ‘ref/notes/true’, please use that
     literal instead.

     This configuration can be specified multiple times in order to
     allow multiple notes refs to be included.  In that case, it will
     behave similarly to multiple ‘--[no-]notes[=]’ options passed in.
     That is, a value of ‘true’ will show the default notes, a value of
     ‘<ref>’ will also show notes from that notes ref and a value of
     ‘false’ will negate previous configurations and not show notes.

     For example,

          [format]
                  notes = true
                  notes = foo
                  notes = false
                  notes = bar

     will only show notes from ‘refs/notes/bar’.

filter.<driver>.clean
     The command which is used to convert the content of a worktree file
     to a blob upon checkin.  See gitattributes(5) for details.

filter.<driver>.smudge
     The command which is used to convert the content of a blob object
     to a worktree file upon checkout.  See gitattributes(5) for
     details.

fsck.<msg-id>
     fsck中に、gitは、現在のバージョンのgitでは生成されず、
     ‘transfer.fsckObjects’ が設定されている場合はネットワーク経由で送信
     されない、レガシーデータの問題を検出する場合があります。この機能は
     、そのようなデータを含むレガシーリポジトリの操作をサポートすること
     を目的としています。

     ‘fsck.<msg-id>’ 設定は、 git-fsck(1) によって取得されますが、代わり
     に、そのようなデータセット ‘receive.fsck.<msg-id>’ のプッシュを受け
     入れるか、または、クローンまたはフェッチのセットである
     ‘fetch.fsck.<msg-id>’ を使用します。

     この文書の残りの部分では、簡潔にするために ‘fsck.*’ 変数について説
     明していますが、対応する ‘receive.fsck.*’ 変数と ‘fetch.<msg-id>.*’
     変数にも同じことが当てはまります。

     ‘color.ui’ や ‘core.editor’ のような変数とは異なり、
     ‘receive.fsck.<msg-id>’ と ‘fetch.fsck.<msg-id>’ 変数は、設定されて
     いない場合、 ‘fsck.<msg-id>’ 構成にフォールバックしません。さまざま
     な状況で同じfsck設定を均一に構成するには、3つすべてを同じ値に設定す
     る必要があります。

     ‘fsck.<msg-id>’ が設定されている場合、 ‘fsck.<msg-id>’ の値を
     ‘error’ 、 ‘warn’ 、‘ignore’ のいずれか一つとすることにより、エラー
     を警告に切り替える事もでき、その逆も可能です。そして ‘<msg-id>’ の
     部分はメッセージIDです。便利なように、fsckはエラー/警告メッセージの
     前にメッセージIDを付けます。たとえば「missingEmail: invalid
     author/committer line - missing email」は、 ‘fsck.missingEmail =
     ignore’ を設定するとその問題が非表示になることを意味します。

     一般に、これらの問題のあるオブジェクトが共有する破損の種類をリスト
     して無視するのではなく、 ‘fsck.skipList’ に問題のある既存のオブジェ
     クトを列挙することをお勧めします。前者を実行すると、同じ破損の新し
     いインスタンスが見過ごされる可能性があります。

     不明な ‘fsck.<msg-id>’ 値を設定すると、fsckが停止(die)しますが、
     ‘receive.fsck.<msg-id>’ や ‘fetch.fsck.<msg-id>’ に対して同じことを
     行うと、gitは単に警告するだけです。

fsck.skipList
     非致命的な理由により既に壊れている(broken)ことが分かっているため無
     視する必要があるオブジェクト名(1行につき1つの省略されてないSHA-1)の
     リストへのパス。Git 2.20 以降では、コメント(‘#’)文字から行末までと
     、空行と、先頭と末尾の空白(whitespace)は無視されます。それより古い
     バージョンでは1行につき1つのSHA-1以外は全てエラーになります。

     この機能は、無効なコミッターの電子メールアドレスなど、初期のコミッ
     トにもかかわらず、安全に無視できるエラーを含む、確立されたプロジェ
     クトを受け入れる必要がある場合に役立ちます。 注意: この設定では、
     corruptオブジェクトをスキップすることはできません。

     ‘fsck.<msg-id>’ と同様に、この変数に対応する
     ‘receive.fsck.skipList’ 派生と ‘fetch.fsck.skipList’ 派生があります
     。

     ‘color.ui’ や ‘core.editor’ のような変数とは異なり、
     ‘receive.fsck.skipList’ 変数と ‘fetch.fsck.skipList’ 変数は、設定さ
     れていない場合、 ‘fsck.skipList’ 構成にフォールバックしません。さま
     ざまな状況で同じfsck設定を均一に構成するには、3つすべてを同じ値に設
     定する必要があります。

     古いバージョンのGit(2.20より前)では、オブジェクト名リストを並べ替え
     る必要があることが文書化されています。これは必須ではなく、オブジェ
     クト名は任意の順序で表示できますが、リストを読み取るときに、内部バ
     イナリ検索実装の目的でリストが並べ替えられているかどうかを追跡しま
     した。これにより、既に並べ替えられたリストでは作業を節約できます。
     膨大なリストがない限り、リストを事前に並べ替える必要はありませんで
     した。 Gitバージョン2.20以降では、代わりにハッシュ実装が使用される
     ため、リストを事前に並べ替える必要はありません。

gc.aggressiveDepth
     ‘git gc --aggressive’ で使用されるデルタ圧縮アルゴリズムで使用され
     る深さパラメーター。これはデフォルトで50に設定されています。これは
     ‘--aggressive’ が使用されていない場合の ‘--depth’ オプションのデフ
     ォルトです。

     詳細については git-repack(1) の ‘--depth’ オプションの文書を参照し
     てください。

gc.aggressiveWindow
     ‘git gc --aggressive’ で使用されるデルタ圧縮アルゴリズムで使用され
     るウィンドウサイズパラメータ。これはデフォルトで250に設定されていま
     す。これは、 ‘--window’ のデフォルト値の10よりもはるかに積極的なウ
     ィンドウサイズです。

     詳細については、 git-repack(1) の ‘--window’ オプションの文書を参照
     してください。

gc.auto
     リポジトリにおおよそ指定の値より多くのルーズオブジェクトがある場合
     、 ‘git gc --auto’ はそれらをパックします。一部の磁器コマンドは、こ
     のコマンドを使用して、軽量のガベージコレクションを時々実行します。
     デフォルト値は6700です。

     これを0に設定すると、ルーズオブジェクトの数に基づく自動パッキングが
     無効にななります。また、他のヒューリスティックな ‘git gc --auto’ が
     、 ‘gc.autoPackLimit’ などの作業があるかどうかを判断するためにこの
     値を使用します。

gc.autoPackLimit
     リポジトリに ‘* .keep’ ファイルでマークされていないパックがこの設定
     値より多くある場合、 ‘git gc --auto’ はそれらを1つの大きなパックに
     統合します。デフォルト値は50です。これを0に設定すると、無効になりま
     す。 ‘gc.auto’ を0に設定すると、この設定も無効になります。

     以下の ‘gc.bigPackThreshold’ 構成変数を参照してください。この設定を
     使用中は、自動パックの制限がどのように機能するかに影響します。

gc.autoDetach
     システムがサポートしている場合は ‘git gc --auto’ は即座戻り、実行は
     バックグラウンドで行われます。デフォルトはtrueです。

gc.bigPackThreshold
     ゼロ以外の場合、 ‘git gc’ の実行時に、この設定値より大きいすべての
     パックが保持されます。これは ‘--keep-largest-pack’ と非常に似ていま
     すが、最大のパックだけでなく、しきい値を満たす全てのパックが保持さ
     れる点が異なります。デフォルトはゼロです。 _k_ 、 _m_ 、 _g_ の一般
     的な単位接尾辞がサポートされています。

     注意: 保持されるパックの数が gc.autoPackLimit を超える場合、この構
     成変数は無視され、基本パックを除くすべてのパックが再パックされるこ
     とに注意してください。再パック後、パックの数は gc.autoPackLimit を
     下回り、再び gc.bigPackThreshold が尊重されるでしょう。

     ‘git repack’ がスムーズに実行されると推定されるメモリ量が利用できず
     、かつ、 ‘gc.bigPackThreshold’ が設定されていない場合、最大のパック
     も除外されます(これは、 ‘--keep-largest-pack’ を指定して ‘git gc’ を
     実行するのと同じです)。

gc.writeCommitGraph
     trueの場合、 git-gc(1) が実行されると、 gcはcommit-graphファイルを
     書き換えます。 ‘git gc --auto’ を使用する場合、ハウスキーピングが必
     要な場合はコミットグラフが更新されます。デフォルトはtrueです。詳細
     については git-commit-graph(1) を参照してください。

gc.logExpiry
     ファイルgc.logが存在する場合、 ‘git gc --auto’ はそのコンテンツを出
     力し、そのファイルが「gc.logExpiry」より古い場合を除いて、実行する
     代わりにステータス0で終了します。デフォルトは「1.day」です。その他
     の値の指定方法については ‘gc.pruneExpire’ を参照してください。

gc.packRefs
     リポジトリで ‘git pack-refs’ を実行すると、HTTPなどの馬鹿プロトコル
     (dumb transport) を介して 1.5.1.2 より前のGitバージョンではクローン
     が作成できなくなります。この変数は、「git gc」が「git pack-refs」を
     実行するかどうかを決定します。これを ‘notbare’ に設定して、すべての
     非ベアリポジトリ内で有効にするか、ブール値に設定することができます
     。 デフォルトは ‘true’ です。

gc.pruneExpire
     「git gc」を実行すると、‘prune --expire 2.weeks.ago’ が呼び出されま
     す。この構成変数で猶予期間をオーバーライドします。 値「now」を使用
     してこの猶予期間を無効にし、到達不能なオブジェクトを常にすぐに剪定
     (prune)するか、「never」を使用して剪定を抑制することができます。こ
     の機能は「git gc」がリポジトリに書き込む別のプロセスと同時に実行さ
     れる場合の破損を防ぐのに役立ちます。 git-gc(1) の「NOTES」セクショ
     ンを参照してください。

gc.worktreePruneExpire
     _git gc_ が実行されると、 ‘git worktree prune --expire3.months.ago’
     が呼び出されます。この構成変数を使用して、別の猶予期間を設定できま
     す。値「now」を使用して猶予期間を無効にし、 ‘$GIT_DIR/worktrees’ を
     すぐに剪定(prune)するか、「never」を使用して剪定を抑制することがで
     きます。

gc.reflogExpire
gc.<pattern>.reflogExpire
     「git reflog expire」は、この時間より古いreflogエントリを削除します
     。デフォルトは90日です。値「now」はすべてのエントリをすぐに期限切れ
     にし、「never」は期限切れを完全に抑制します。中央に「<pattern>」(例
     :「refs/stash」)がある場合、設定は <pattern> に一致するrefにのみ適
     用されます。

gc.reflogExpireUnreachable
gc.<pattern>.reflogExpireUnreachable
     _git reflog expire_ は、この時間より古いreflogエントリを削除し、現
     在の先端(the current tip)から到達不能にします。デフォルトは30日です
     。値「now」はすべてのエントリをすぐに期限切れにし、「never」は期限
     切れを完全に抑制します。中央に「<pattern>」(例:「refs/stash」)があ
     る場合、設定は <pattern> に一致するrefにのみ適用されます。

     これらのタイプのエントリは通常、 ‘git commit--amend’ または ‘git
     rebase’ を使用した結果として作成され、修正またはリベースが発生する
     前のコミットです。これらの変更は現在のプロジェクトの一部ではないた
     め、ほとんどのユーザーはそれらをより早く期限切れにしたいと思うでし
     ょう。そのため、デフォルトは ‘gc.reflogExpire’ よりも積極的です。

gc.rerereResolved
     以前に解決した競合するマージの記録は、「git rerere gc」が実行される
     ときに、この設定値で指定の日数保持されます。より人間が読める「
     1.month.ago」などを使用することもできます。デフォルトは60日です。
     git-rerere(1) を参照してください。

gc.rerereUnresolved
     _git rerere gc_ が実行されると、解決していない競合するマージの記録
     がこの設定値の日数保持されます。より人間が読める「1.month.ago」など
     を使用することもできます。デフォルトは15日です。 git-rerere(1) を参
     照してください。

gitcvs.commitMsgAnnotation
     Append this string to each commit message.  Set to empty string to
     disable this feature.  Defaults to "via git-CVS emulator".

gitcvs.enabled
     Whether the CVS server interface is enabled for this repository.
     See git-cvsserver(1).

gitcvs.logFile
     Path to a log file where the CVS server interface well… logs
     various stuff.  See git-cvsserver(1).

gitcvs.usecrlfattr
     If true, the server will look up the end-of-line conversion
     attributes for files to determine the ‘-k’ modes to use.  If the
     attributes force Git to treat a file as text, the ‘-k’ mode will be
     left blank so CVS clients will treat it as text.  If they suppress
     text conversion, the file will be set with _-kb_ mode, which
     suppresses any newline munging the client might otherwise do.  If
     the attributes do not allow the file type to be determined, then
     ‘gitcvs.allBinary’ is used.  See gitattributes(5).

gitcvs.allBinary
     This is used if ‘gitcvs.usecrlfattr’ does not resolve the correct
     _-kb_ mode to use.  If true, all unresolved files are sent to the
     client in mode _-kb_.  This causes the client to treat them as
     binary files, which suppresses any newline munging it otherwise
     might do.  Alternatively, if it is set to "guess", then the
     contents of the file are examined to decide if it is binary,
     similar to ‘core.autocrlf’.

gitcvs.dbName
     Database used by git-cvsserver to cache revision information
     derived from the Git repository.  The exact meaning depends on the
     used database driver, for SQLite (which is the default driver) this
     is a filename.  Supports variable substitution (see
     git-cvsserver(1) for details).  May not contain semicolons (‘;’).
     Default: _%Ggitcvs.%m.sqlite_

gitcvs.dbDriver
     Used Perl DBI driver.  You can specify any available driver for
     this here, but it might not work.  git-cvsserver is tested with
     _DBD::SQLite_, reported to work with _DBD::Pg_, and reported *not*
     to work with _DBD::mysql_.  Experimental feature.  May not contain
     double colons (‘:’).  Default: _SQLite_.  See git-cvsserver(1).

gitcvs.dbUser, gitcvs.dbPass
     Database user and password.  Only useful if setting
     ‘gitcvs.dbDriver’, since SQLite has no concept of database users
     and/or passwords.  _gitcvs.dbUser_ supports variable substitution
     (see git-cvsserver(1) for details).

gitcvs.dbTableNamePrefix
     Database table name prefix.  Prepended to the names of any database
     tables used, allowing a single database to be used for several
     repositories.  Supports variable substitution (see git-cvsserver(1)
     for details).  Any non-alphabetic characters will be replaced with
     underscores.

   All gitcvs variables except for ‘gitcvs.usecrlfattr’ and
‘gitcvs.allBinary’ can also be specified as
_gitcvs.<access_method>.<varname>_ (where _access_method_ is one of
"ext" and "pserver") to make them apply only for the given access
method.

gitweb.category
gitweb.description
gitweb.owner
gitweb.url
     See gitweb(1) for description.

gitweb.avatar
gitweb.blame
gitweb.grep
gitweb.highlight
gitweb.patches
gitweb.pickaxe
gitweb.remote_heads
gitweb.showSizes
gitweb.snapshot
     See gitweb.conf(5) for description.

grep.lineNumber
     If set to true, enable ‘-n’ option by default.

grep.column
     If set to true, enable the ‘--column’ option by default.

grep.patternType
     Set the default matching behavior.  Using a value of _basic_,
     _extended_, _fixed_, or _perl_ will enable the ‘--basic-regexp’,
     ‘--extended-regexp’, ‘--fixed-strings’, or ‘--perl-regexp’ option
     accordingly, while the value _default_ will return to the default
     matching behavior.

grep.extendedRegexp
     If set to true, enable ‘--extended-regexp’ option by default.  This
     option is ignored when the ‘grep.patternType’ option is set to a
     value other than _default_.

grep.threads
     Number of grep worker threads to use.  See ‘grep.threads’ in
     git-grep(1) for more information.

grep.fallbackToNoIndex
     If set to true, fall back to git grep –no-index if git grep is
     executed outside of a git repository.  Defaults to false.

gpg.program
     Use this custom program instead of "‘gpg’" found on ‘$PATH’ when
     making or verifying a PGP signature.  The program must support the
     same command-line interface as GPG, namely, to verify a detached
     signature, "‘gpg --verify $signature - <$file’" is run, and the
     program is expected to signal a good signature by exiting with code
     0, and to generate an ASCII-armored detached signature, the
     standard input of "‘gpg -bsau $key’" is fed with the contents to be
     signed, and the program is expected to send the result to its
     standard output.

gpg.format
     Specifies which key format to use when signing with ‘--gpg-sign’.
     Default is "openpgp" and another possible value is "x509".

gpg.<format>.program
     Use this to customize the program used for the signing format you
     chose.  (see ‘gpg.program’ and ‘gpg.format’) ‘gpg.program’ can
     still be used as a legacy synonym for ‘gpg.openpgp.program’.  The
     default value for ‘gpg.x509.program’ is "gpgsm".

gpg.minTrustLevel
     Specifies a minimum trust level for signature verification.  If
     this option is unset, then signature verification for merge
     operations require a key with at least ‘marginal’ trust.  Other
     operations that perform signature verification require a key with
     at least ‘undefined’ trust.  Setting this option overrides the
     required trust-level for all operations.  Supported values, in
     increasing order of significance:

        • ‘undefined’

        • ‘never’

        • ‘marginal’

        • ‘fully’

        • ‘ultimate’

gui.commitMsgWidth
     Defines how wide the commit message window is in the git-gui(1).
     "75" is the default.

gui.diffContext
     Specifies how many context lines should be used in calls to diff
     made by the git-gui(1).  The default is "5".

gui.displayUntracked
     Determines if git-gui(1) shows untracked files in the file list.
     The default is "true".

gui.encoding
     Specifies the default character encoding to use for displaying of
     file contents in git-gui(1) and gitk(1).  It can be overridden by
     setting the _encoding_ attribute for relevant files (see
     gitattributes(5)).  If this option is not set, the tools default to
     the locale encoding.

gui.matchTrackingBranch
     Determines if new branches created with git-gui(1) should default
     to tracking remote branches with matching names or not.  Default:
     "false".

gui.newBranchTemplate
     Is used as suggested name when creating new branches using the
     git-gui(1).

gui.pruneDuringFetch
     "true" if git-gui(1) should prune remote-tracking branches when
     performing a fetch.  The default value is "false".

gui.trustmtime
     Determines if git-gui(1) should trust the file modification
     timestamp or not.  By default the timestamps are not trusted.

gui.spellingDictionary
     Specifies the dictionary used for spell checking commit messages in
     the git-gui(1).  When set to "none" spell checking is turned off.

gui.fastCopyBlame
     If true, _git gui blame_ uses ‘-C’ instead of ‘-C -C’ for original
     location detection.  It makes blame significantly faster on huge
     repositories at the expense of less thorough copy detection.

gui.copyBlameThreshold
     Specifies the threshold to use in _git gui blame_ original location
     detection, measured in alphanumeric characters.  See the
     git-blame(1) manual for more information on copy detection.

gui.blamehistoryctx
     Specifies the radius of history context in days to show in gitk(1)
     for the selected commit, when the ‘Show History Context’ menu item
     is invoked from _git gui blame_.  If this variable is set to zero,
     the whole history is shown.

guitool.<name>.cmd
     Specifies the shell command line to execute when the corresponding
     item of the git-gui(1) ‘Tools’ menu is invoked.  This option is
     mandatory for every tool.  The command is executed from the root of
     the working directory, and in the environment it receives the name
     of the tool as ‘GIT_GUITOOL’, the name of the currently selected
     file as _FILENAME_, and the name of the current branch as
     _CUR_BRANCH_ (if the head is detached, _CUR_BRANCH_ is empty).

guitool.<name>.needsFile
     Run the tool only if a diff is selected in the GUI. It guarantees
     that _FILENAME_ is not empty.

guitool.<name>.noConsole
     Run the command silently, without creating a window to display its
     output.

guitool.<name>.noRescan
     Don’t rescan the working directory for changes after the tool
     finishes execution.

guitool.<name>.confirm
     Show a confirmation dialog before actually running the tool.

guitool.<name>.argPrompt
     Request a string argument from the user, and pass it to the tool
     through the ‘ARGS’ environment variable.  Since requesting an
     argument implies confirmation, the _confirm_ option has no effect
     if this is enabled.  If the option is set to _true_, _yes_, or _1_,
     the dialog uses a built-in generic prompt; otherwise the exact
     value of the variable is used.

guitool.<name>.revPrompt
     Request a single valid revision from the user, and set the
     ‘REVISION’ environment variable.  In other aspects this option is
     similar to _argPrompt_, and can be used together with it.

guitool.<name>.revUnmerged
     Show only unmerged branches in the _revPrompt_ subdialog.  This is
     useful for tools similar to merge or rebase, but not for things
     like checkout or reset.

guitool.<name>.title
     Specifies the title to use for the prompt dialog.  The default is
     the tool name.

guitool.<name>.prompt
     Specifies the general prompt string to display at the top of the
     dialog, before subsections for _argPrompt_ and _revPrompt_.  The
     default value includes the actual command.

help.browser
     Specify the browser that will be used to display help in the _web_
     format.  See git-help(1).

help.format
     Override the default help format used by git-help(1).  Values
     _man_, _info_, _web_ and _html_ are supported.  _man_ is the
     default.  _web_ and _html_ are the same.

help.autoCorrect
     If git detects typos and can identify exactly one valid command
     similar to the error, git will try to suggest the correct command
     or even run the suggestion automatically.  Possible config values
     are:

        • 0 (default): show the suggested command.  positive number: run
          the suggested command after specified deciseconds (0.1 sec).

        • "immediate": run the suggested command immediately.  "prompt":
          show the suggestion and prompt for confirmation to run the
          command.

        • "never": don’t run or show any suggested command.

help.htmlPath
     Specify the path where the HTML documentation resides.  File system
     paths and URLs are supported.  HTML pages will be prefixed with
     this path when help is displayed in the _web_ format.  This
     defaults to the documentation path of your Git installation.

http.proxy
     Override the HTTP proxy, normally configured using the
     _http_proxy_, _https_proxy_, and _all_proxy_ environment variables
     (see ‘curl(1)’).  In addition to the syntax understood by curl, it
     is possible to specify a proxy string with a user name but no
     password, in which case git will attempt to acquire one in the same
     way it does for other credentials.  See gitcredentials(7) for more
     information.  The syntax thus is
     _[protocol://][user[:password]@]proxyhost[:port]_.  This can be
     overridden on a per-remote basis; see remote.<name>.proxy

http.proxyAuthMethod
     Set the method with which to authenticate against the HTTP proxy.
     This only takes effect if the configured proxy string contains a
     user name part (i.e.  is of the form _user@host_ or
     _user@host:port_).  This can be overridden on a per-remote basis;
     see ‘remote.<name>.proxyAuthMethod’.  Both can be overridden by the
     ‘GIT_HTTP_PROXY_AUTHMETHOD’ environment variable.  Possible values
     are:

        • ‘anyauth’ - Automatically pick a suitable authentication
          method.  It is assumed that the proxy answers an
          unauthenticated request with a 407 status code and one or more
          Proxy-authenticate headers with supported authentication
          methods.  This is the default.

        • ‘basic’ - HTTP Basic authentication

        • ‘digest’ - HTTP Digest authentication; this prevents the
          password from being transmitted to the proxy in clear text

        • ‘negotiate’ - GSS-Negotiate authentication (compare the
          –negotiate option of ‘curl(1)’)

        • ‘ntlm’ - NTLM authentication (compare the –ntlm option of
          ‘curl(1)’)

http.proxySSLCert
     The pathname of a file that stores a client certificate to use to
     authenticate with an HTTPS proxy.  Can be overridden by the
     ‘GIT_PROXY_SSL_CERT’ environment variable.

http.proxySSLKey
     The pathname of a file that stores a private key to use to
     authenticate with an HTTPS proxy.  Can be overridden by the
     ‘GIT_PROXY_SSL_KEY’ environment variable.

http.proxySSLCertPasswordProtected
     Enable Git’s password prompt for the proxy SSL certificate.
     Otherwise OpenSSL will prompt the user, possibly many times, if the
     certificate or private key is encrypted.  Can be overridden by the
     ‘GIT_PROXY_SSL_CERT_PASSWORD_PROTECTED’ environment variable.

http.proxySSLCAInfo
     Pathname to the file containing the certificate bundle that should
     be used to verify the proxy with when using an HTTPS proxy.  Can be
     overridden by the ‘GIT_PROXY_SSL_CAINFO’ environment variable.

http.emptyAuth
     Attempt authentication without seeking a username or password.
     This can be used to attempt GSS-Negotiate authentication without
     specifying a username in the URL, as libcurl normally requires a
     username for authentication.

http.delegation
     Control GSSAPI credential delegation.  The delegation is disabled
     by default in libcurl since version 7.21.7.  Set parameter to tell
     the server what it is allowed to delegate when it comes to user
     credentials.  Used with GSS/kerberos.  Possible values are:

        • ‘none’ - Don’t allow any delegation.

        • ‘policy’ - Delegates if and only if the OK-AS-DELEGATE flag is
          set in the Kerberos service ticket, which is a matter of realm
          policy.

        • ‘always’ - Unconditionally allow the server to delegate.

http.extraHeader
     Pass an additional HTTP header when communicating with a server.
     If more than one such entry exists, all of them are added as extra
     headers.  To allow overriding the settings inherited from the
     system config, an empty value will reset the extra headers to the
     empty list.

http.cookieFile
     The pathname of a file containing previously stored cookie lines,
     which should be used in the Git http session, if they match the
     server.  The file format of the file to read cookies from should be
     plain HTTP headers or the Netscape/Mozilla cookie file format (see
     ‘curl(1)’).  NOTE that the file specified with http.cookieFile is
     used only as input unless http.saveCookies is set.

http.saveCookies
     If set, store cookies received during requests to the file
     specified by http.cookieFile.  Has no effect if http.cookieFile is
     unset.

http.version
     Use the specified HTTP protocol version when communicating with a
     server.  If you want to force the default.  The available and
     default version depend on libcurl.  Currently the possible values
     of this option are:

        • HTTP/2

        • HTTP/1.1

http.sslVersion
     The SSL version to use when negotiating an SSL connection, if you
     want to force the default.  The available and default version
     depend on whether libcurl was built against NSS or OpenSSL and the
     particular configuration of the crypto library in use.  Internally
     this sets the _CURLOPT_SSL_VERSION_ option; see the libcurl
     documentation for more details on the format of this option and for
     the ssl version supported.  Currently the possible values of this
     option are:

        • sslv2

        • sslv3

        • tlsv1

        • tlsv1.0

        • tlsv1.1

        • tlsv1.2

        • tlsv1.3

     Can be overridden by the ‘GIT_SSL_VERSION’ environment variable.
     To force git to use libcurl’s default ssl version and ignore any
     explicit http.sslversion option, set ‘GIT_SSL_VERSION’ to the empty
     string.

http.sslCipherList
     A list of SSL ciphers to use when negotiating an SSL connection.
     The available ciphers depend on whether libcurl was built against
     NSS or OpenSSL and the particular configuration of the crypto
     library in use.  Internally this sets the _CURLOPT_SSL_CIPHER_LIST_
     option; see the libcurl documentation for more details on the
     format of this list.

     Can be overridden by the ‘GIT_SSL_CIPHER_LIST’ environment
     variable.  To force git to use libcurl’s default cipher list and
     ignore any explicit http.sslCipherList option, set
     ‘GIT_SSL_CIPHER_LIST’ to the empty string.

http.sslVerify
     Whether to verify the SSL certificate when fetching or pushing over
     HTTPS. Defaults to true.  Can be overridden by the
     ‘GIT_SSL_NO_VERIFY’ environment variable.

http.sslCert
     File containing the SSL certificate when fetching or pushing over
     HTTPS. Can be overridden by the ‘GIT_SSL_CERT’ environment
     variable.

http.sslKey
     File containing the SSL private key when fetching or pushing over
     HTTPS. Can be overridden by the ‘GIT_SSL_KEY’ environment variable.

http.sslCertPasswordProtected
     Enable Git’s password prompt for the SSL certificate.  Otherwise
     OpenSSL will prompt the user, possibly many times, if the
     certificate or private key is encrypted.  Can be overridden by the
     ‘GIT_SSL_CERT_PASSWORD_PROTECTED’ environment variable.

http.sslCAInfo
     File containing the certificates to verify the peer with when
     fetching or pushing over HTTPS. Can be overridden by the
     ‘GIT_SSL_CAINFO’ environment variable.

http.sslCAPath
     Path containing files with the CA certificates to verify the peer
     with when fetching or pushing over HTTPS. Can be overridden by the
     ‘GIT_SSL_CAPATH’ environment variable.

http.sslBackend
     Name of the SSL backend to use (e.g.  "openssl" or "schannel").
     This option is ignored if cURL lacks support for choosing the SSL
     backend at runtime.

http.schannelCheckRevoke
     Used to enforce or disable certificate revocation checks in cURL
     when http.sslBackend is set to "schannel".  Defaults to ‘true’ if
     unset.  Only necessary to disable this if Git consistently errors
     and the message is about checking the revocation status of a
     certificate.  This option is ignored if cURL lacks support for
     setting the relevant SSL option at runtime.

http.schannelUseSSLCAInfo
     As of cURL v7.60.0, the Secure Channel backend can use the
     certificate bundle provided via ‘http.sslCAInfo’, but that would
     override the Windows Certificate Store.  Since this is not
     desirable by default, Git will tell cURL not to use that bundle by
     default when the ‘schannel’ backend was configured via
     ‘http.sslBackend’, unless ‘http.schannelUseSSLCAInfo’ overrides
     this behavior.

http.pinnedpubkey
     Public key of the https service.  It may either be the filename of
     a PEM or DER encoded public key file or a string starting with
     _sha256//_ followed by the base64 encoded sha256 hash of the public
     key.  See also libcurl _CURLOPT_PINNEDPUBLICKEY_. git will exit
     with an error if this option is set but not supported by cURL.

http.sslTry
     Attempt to use AUTH SSL/TLS and encrypted data transfers when
     connecting via regular FTP protocol.  This might be needed if the
     FTP server requires it for security reasons or you wish to connect
     securely whenever remote FTP server supports it.  Default is false
     since it might trigger certificate verification errors on
     misconfigured servers.

http.maxRequests
     How many HTTP requests to launch in parallel.  Can be overridden by
     the ‘GIT_HTTP_MAX_REQUESTS’ environment variable.  Default is 5.

http.minSessions
     The number of curl sessions (counted across slots) to be kept
     across requests.  They will not be ended with curl_easy_cleanup()
     until http_cleanup() is invoked.  If USE_CURL_MULTI is not defined,
     this value will be capped at 1.  Defaults to 1.

http.postBuffer
     Maximum size in bytes of the buffer used by smart HTTP transports
     when POSTing data to the remote system.  For requests larger than
     this buffer size, HTTP/1.1 and Transfer-Encoding: chunked is used
     to avoid creating a massive pack file locally.  Default is 1 MiB,
     which is sufficient for most requests.

     Note that raising this limit is only effective for disabling
     chunked transfer encoding and therefore should be used only where
     the remote server or a proxy only supports HTTP/1.0 or is
     noncompliant with the HTTP standard.  Raising this is not, in
     general, an effective solution for most push problems, but can
     increase memory consumption significantly since the entire buffer
     is allocated even for small pushes.

http.lowSpeedLimit, http.lowSpeedTime
     If the HTTP transfer speed is less than _http.lowSpeedLimit_ for
     longer than _http.lowSpeedTime_ seconds, the transfer is aborted.
     Can be overridden by the ‘GIT_HTTP_LOW_SPEED_LIMIT’ and
     ‘GIT_HTTP_LOW_SPEED_TIME’ environment variables.

http.noEPSV
     A boolean which disables using of EPSV ftp command by curl.  This
     can helpful with some "poor" ftp servers which don’t support EPSV
     mode.  Can be overridden by the ‘GIT_CURL_FTP_NO_EPSV’ environment
     variable.  Default is false (curl will use EPSV).

http.userAgent
     The HTTP USER_AGENT string presented to an HTTP server.  The
     default value represents the version of the client Git such as
     git/1.7.1.  This option allows you to override this value to a more
     common value such as Mozilla/4.0.  This may be necessary, for
     instance, if connecting through a firewall that restricts HTTP
     connections to a set of common USER_AGENT strings (but not
     including those like git/1.7.1).  Can be overridden by the
     ‘GIT_HTTP_USER_AGENT’ environment variable.

http.followRedirects
     Whether git should follow HTTP redirects.  If set to ‘true’, git
     will transparently follow any redirect issued by a server it
     encounters.  If set to ‘false’, git will treat all redirects as
     errors.  If set to ‘initial’, git will follow redirects only for
     the initial request to a remote, but not for subsequent follow-up
     HTTP requests.  Since git uses the redirected URL as the base for
     the follow-up requests, this is generally sufficient.  The default
     is ‘initial’.

http.<url>.*
     Any of the http.* options above can be applied selectively to some
     URLs.  For a config key to match a URL, each element of the config
     key is compared to that of the URL, in the following order:

       1. Scheme (e.g., ‘https’ in ‘https://example.com/’).  This field
          must match exactly between the config key and the URL.

       2. Host/domain name (e.g., ‘example.com’ in
          ‘https://example.com/’).  This field must match between the
          config key and the URL. It is possible to specify a ‘*’ as
          part of the host name to match all subdomains at this level.
          ‘https://*.example.com/’ for example would match
          ‘https://foo.example.com/’, but not
          ‘https://foo.bar.example.com/’.

       3. Port number (e.g., ‘8080’ in ‘http://example.com:8080/’).
          This field must match exactly between the config key and the
          URL. Omitted port numbers are automatically converted to the
          correct default for the scheme before matching.

       4. Path (e.g., ‘repo.git’ in ‘https://example.com/repo.git’).
          The path field of the config key must match the path field of
          the URL either exactly or as a prefix of slash-delimited path
          elements.  This means a config key with path ‘foo/’ matches
          URL path ‘foo/bar’.  A prefix can only match on a slash (‘/’)
          boundary.  Longer matches take precedence (so a config key
          with path ‘foo/bar’ is a better match to URL path ‘foo/bar’
          than a config key with just path ‘foo/’).

       5. User name (e.g., ‘user’ in
          ‘https://user@example.com/repo.git’).  If the config key has a
          user name it must match the user name in the URL exactly.  If
          the config key does not have a user name, that config key will
          match a URL with any user name (including none), but at a
          lower precedence than a config key with a user name.

     The list above is ordered by decreasing precedence; a URL that
     matches a config key’s path is preferred to one that matches its
     user name.  For example, if the URL is
     ‘https://user@example.com/foo/bar’ a config key match of
     ‘https://example.com/foo’ will be preferred over a config key match
     of ‘https://user@example.com’.

     All URLs are normalized before attempting any matching (the
     password part, if embedded in the URL, is always ignored for
     matching purposes) so that equivalent URLs that are simply spelled
     differently will match properly.  Environment variable settings
     always override any matches.  The URLs that are matched against are
     those given directly to Git commands.  This means any URLs visited
     as a result of a redirection do not participate in matching.

i18n.commitEncoding
     Character encoding the commit messages are stored in; Git itself
     does not care per se, but this information is necessary e.g.  when
     importing commits from emails or in the gitk graphical history
     browser (and possibly at other places in the future or in other
     porcelains).  See e.g.  git-mailinfo(1).  Defaults to _utf-8_.

i18n.logOutputEncoding
     Character encoding the commit messages are converted to when
     running _git log_ and friends.

imap.folder
     メールをドロップするフォルダー。通常はドラフトフォルダーです。 例：
     「INBOX.Drafts」とか「INBOX/Drafts」とか「[Gmail]/Drafts」です。必
     須です。

imap.tunnel
     サーバーへの直接ネットワーク接続を使用する代わりに、コマンドがパイ
     プされるIMAPサーバーへのトンネルをセットアップするために使用される
     コマンド。 imap.host が設定されていない場合に必須です。

imap.host
     サーバーを識別するURL。 非セキュア接続には ‘imap://’ プレフィックス
     を使用し、セキュア接続には ‘imaps://’ プレフィックスを使用します。
     imap.tunnel が設定されている場合は無視されますが、それ以外の場合は
     必須です。

imap.user
     サーバーにログインするときに使用するユーザー名。

imap.pass
     サーバーにログインするときに使用するパスワード。

imap.port
     サーバー上で接続する整数のポート番号。 デフォルトは、 imap:// ホス
     トの場合は143、 imaps:// ホストの場合は993です。 imap.tunnel が設定
     されている場合は無視されます。

imap.sslverify
     SSL/TLS接続で使用されるサーバー証明書の検証を有効/無効にするブール
     値。デフォルトは ‘true’ です。 imap.tunnel が設定されている場合は無
     視されます。

imap.preformattedHTML
     パッチを送信するときにhtmlエンコーディングの使用を有効/無効にするブ
     ール値。 htmlでエンコードされたパッチは <pre> で囲まれ、コンテンツ
     タイプは text/html になります。皮肉なことに、このオプションを有効に
     すると、Thunderbirdはパッチを plane/text の format=fixed メールとし
     て送信します。デフォルトは ‘false’ です。

imap.authMethod
     IMAPサーバーでの認証の認証方法を指定します。GitがNO_CURLオプション
     を使用してビルドされた場合、curlバージョンが7.34.0より古い場合、ま
     たはgit-imap-sendを ‘--no-curl’ オプションを指定して実行している場
     合、サポートされるメソッドは _CRAM-MD5_ のみです。これが設定されて
     いない場合、「git imap-send」は基本的なIMAPプレーンテキストLOGINコ
     マンドを使用します。

index.recordEndOfIndexEntries
     Specifies whether the index file should include an "End Of Index
     Entry" section.  This reduces index load time on multiprocessor
     machines but produces a message "ignoring EOIE extension" when
     reading the index using Git versions before 2.20.  Defaults to
     _true_ if index.threads has been explicitly enabled, _false_
     otherwise.

index.recordOffsetTable
     Specifies whether the index file should include an "Index Entry
     Offset Table" section.  This reduces index load time on
     multiprocessor machines but produces a message "ignoring IEOT
     extension" when reading the index using Git versions before 2.20.
     Defaults to _true_ if index.threads has been explicitly enabled,
     _false_ otherwise.

index.sparse
     When enabled, write the index using sparse-directory entries.  This
     has no effect unless ‘core.sparseCheckout’ and
     ‘core.sparseCheckoutCone’ are both enabled.  Defaults to _false_.

index.threads
     Specifies the number of threads to spawn when loading the index.
     This is meant to reduce index load time on multiprocessor machines.
     Specifying 0 or _true_ will cause Git to auto-detect the number of
     CPU’s and set the number of threads accordingly.  Specifying 1 or
     _false_ will disable multithreading.  Defaults to _true_.

index.version
     Specify the version with which new index files should be
     initialized.  This does not affect existing repositories.  If
     ‘feature.manyFiles’ is enabled, then the default is 4.

init.templateDir
     テンプレートのコピー元のディレクトリを指定します。 (git-init(1) の
     「TEMPLATE DIRECTORY」セクションを参照してください。)

init.defaultBranch
     デフォルトのブランチ名を上書きできます。例えば、新しいリポジトリを
     初期化するとき。

instaweb.browser
     Specify the program that will be used to browse your working
     repository in gitweb.  See git-instaweb(1).

instaweb.httpd
     The HTTP daemon command-line to start gitweb on your working
     repository.  See git-instaweb(1).

instaweb.local
     If true the web server started by git-instaweb(1) will be bound to
     the local IP (127.0.0.1).

instaweb.modulePath
     The default module path for git-instaweb(1) to use instead of
     /usr/lib/apache2/modules.  Only used if httpd is Apache.

instaweb.port
     The port number to bind the gitweb httpd to.  See git-instaweb(1).

interactive.singleKey
     In interactive commands, allow the user to provide one-letter input
     with a single key (i.e., without hitting enter).  Currently this is
     used by the ‘--patch’ mode of git-add(1), git-checkout(1),
     git-restore(1), git-commit(1), git-reset(1), and git-stash(1).
     Note that this setting is silently ignored if portable keystroke
     input is not available; requires the Perl module Term::ReadKey.

interactive.diffFilter
     When an interactive command (such as ‘git add --patch’) shows a
     colorized diff, git will pipe the diff through the shell command
     defined by this configuration variable.  The command may mark up
     the diff further for human consumption, provided that it retains a
     one-to-one correspondence with the lines in the original diff.
     Defaults to disabled (no filtering).

log.abbrevCommit
     If true, makes git-log(1), git-show(1), and git-whatchanged(1)
     assume ‘--abbrev-commit’.  You may override this option with
     ‘--no-abbrev-commit’.

log.date
     Set the default date-time mode for the _log_ command.  Setting a
     value for log.date is similar to using _git log_’s ‘--date’ option.
     See git-log(1) for details.

log.decorate
     Print out the ref names of any commits that are shown by the log
     command.  If _short_ is specified, the ref name prefixes
     _refs/heads/_, _refs/tags/_ and _refs/remotes/_ will not be
     printed.  If _full_ is specified, the full ref name (including
     prefix) will be printed.  If _auto_ is specified, then if the
     output is going to a terminal, the ref names are shown as if
     _short_ were given, otherwise no ref names are shown.  This is the
     same as the ‘--decorate’ option of the ‘git log’.

log.excludeDecoration
     Exclude the specified patterns from the log decorations.  This is
     similar to the ‘--decorate-refs-exclude’ command-line option, but
     the config option can be overridden by the ‘--decorate-refs’
     option.

log.diffMerges
     Set default diff format to be used for merge commits.  See
     ‘--diff-merges’ in git-log(1) for details.  Defaults to ‘separate’.

log.follow
     If ‘true’, ‘git log’ will act as if the ‘--follow’ option was used
     when a single <path> is given.  This has the same limitations as
     ‘--follow’, i.e.  it cannot be used to follow multiple files and
     does not work well on non-linear history.

log.graphColors
     A list of colors, separated by commas, that can be used to draw
     history lines in ‘git log --graph’.

log.showRoot
     If true, the initial commit will be shown as a big creation event.
     This is equivalent to a diff against an empty tree.  Tools like
     git-log(1) or git-whatchanged(1), which normally hide the root
     commit will now show it.  True by default.

log.showSignature
     If true, makes git-log(1), git-show(1), and git-whatchanged(1)
     assume ‘--show-signature’.

log.mailmap
     If true, makes git-log(1), git-show(1), and git-whatchanged(1)
     assume ‘--use-mailmap’, otherwise assume ‘--no-use-mailmap’.  True
     by default.

lsrefs.unborn
     May be "advertise" (the default), "allow", or "ignore".  If
     "advertise", the server will respond to the client sending "unborn"
     (as described in protocol-v2.txt) and will advertise support for
     this feature during the protocol v2 capability advertisement.
     "allow" is the same as "advertise" except that the server will not
     advertise support for this feature; this is useful for
     load-balanced servers that cannot be updated atomically (for
     example), since the administrator could configure "allow", then
     after a delay, configure "advertise".

mailinfo.scissors
     trueの場合、 git-mailinfo(1) (それゆえ git-am(1) も)は、コマンドラ
     インで ‘--scissors’ オプションが指定されているかのようにデフォルト
     で動作します。この機能がアクティブな場合、メッセージ本文から切り取
     り線(つまり、主に ">8" や "8<" や "-" で構成される)行とそれより前の
     すべてを削除します。

mailmap.file
     拡張メールマップファイルの場所。リポジトリのルートにあるデフォルト
     のメールマップが最初にロードされ、次にこの変数が指すメールマップフ
     ァイルがロードされます。メールマップファイルの場所は、リポジトリサ
     ブディレクトリ内、またはリポジトリの外部のどこかにあります。
     git-shortlog(1) と git-blame(1) を参照してください。

mailmap.blob
     ‘mailmap.file’ と同様ですが、値をリポジトリ内のブロブへの参照と見な
     します。 ‘mailmap.file’ と ‘mailmap.blob’ の両方が指定されている場
     合、両方が解析され、 ‘mailmap.file’ からのエントリが優先されます。
     この変数は、ベアリポジトリではデフォルトで ‘HEAD:.mailmap’ になりま
     す。非ベアリポジトリでは、デフォルトで空になります。

maintenance.auto
     This boolean config option controls whether some commands run ‘git
     maintenance run --auto’ after doing their normal work.  Defaults to
     true.

maintenance.strategy
     This string config option provides a way to specify one of a few
     recommended schedules for background maintenance.  This only
     affects which tasks are run during ‘git maintenance run
     --schedule=X’ commands, provided no ‘--task=<task>’ arguments are
     provided.  Further, if a ‘maintenance.<task>.schedule’ config value
     is set, then that value is used instead of the one provided by
     ‘maintenance.strategy’.  The possible strategy strings are:

        • ‘none’: This default setting implies no task are run at any
          schedule.

        • ‘incremental’: This setting optimizes for performing small
          maintenance activities that do not delete any data.  This does
          not schedule the ‘gc’ task, but runs the ‘prefetch’ and
          ‘commit-graph’ tasks hourly, the ‘loose-objects’ and
          ‘incremental-repack’ tasks daily, and the ‘pack-refs’ task
          weekly.

maintenance.<task>.enabled
     This boolean config option controls whether the maintenance task
     with name ‘<task>’ is run when no ‘--task’ option is specified to
     ‘git maintenance run’.  These config values are ignored if a
     ‘--task’ option exists.  By default, only ‘maintenance.gc.enabled’
     is true.

maintenance.<task>.schedule
     This config option controls whether or not the given ‘<task>’ runs
     during a ‘git maintenance run --schedule=<frequency>’ command.  The
     value must be one of "hourly", "daily", or "weekly".

maintenance.commit-graph.auto
     This integer config option controls how often the ‘commit-graph’
     task should be run as part of ‘git maintenance run --auto’.  If
     zero, then the ‘commit-graph’ task will not run with the ‘--auto’
     option.  A negative value will force the task to run every time.
     Otherwise, a positive value implies the command should run when the
     number of reachable commits that are not in the commit-graph file
     is at least the value of ‘maintenance.commit-graph.auto’.  The
     default value is 100.

maintenance.loose-objects.auto
     This integer config option controls how often the ‘loose-objects’
     task should be run as part of ‘git maintenance run --auto’.  If
     zero, then the ‘loose-objects’ task will not run with the ‘--auto’
     option.  A negative value will force the task to run every time.
     Otherwise, a positive value implies the command should run when the
     number of loose objects is at least the value of
     ‘maintenance.loose-objects.auto’.  The default value is 100.

maintenance.incremental-repack.auto
     This integer config option controls how often the
     ‘incremental-repack’ task should be run as part of ‘git maintenance
     run --auto’.  If zero, then the ‘incremental-repack’ task will not
     run with the ‘--auto’ option.  A negative value will force the task
     to run every time.  Otherwise, a positive value implies the command
     should run when the number of pack-files not in the
     multi-pack-index is at least the value of
     ‘maintenance.incremental-repack.auto’.  The default value is 10.

man.viewer
     Specify the programs that may be used to display help in the _man_
     format.  See git-help(1).

man.<tool>.cmd
     Specify the command to invoke the specified man viewer.  The
     specified command is evaluated in shell with the man page passed as
     argument.  (See git-help(1).)

man.<tool>.path
     Override the path for the given tool that may be used to display
     help in the _man_ format.  See git-help(1).

merge.conflictStyle
     Specify the style in which conflicted hunks are written out to
     working tree files upon merge.  The default is "merge", which shows
     a ‘<<<<<<<’ conflict marker, changes made by one side, a ‘=======’
     marker, changes made by the other side, and then a ‘>>>>>>>’
     marker.  An alternate style, "diff3", adds a ‘|||||||’ marker and
     the original text before the ‘=======’ marker.

merge.defaultToUpstream
     If merge is called without any commit argument, merge the upstream
     branches configured for the current branch by using their last
     observed values stored in their remote-tracking branches.  The
     values of the ‘branch.<current branch>.merge’ that name the
     branches at the remote named by ‘branch.<current branch>.remote’
     are consulted, and then they are mapped via ‘remote.<remote>.fetch’
     to their corresponding remote-tracking branches, and the tips of
     these tracking branches are merged.  Defaults to true.

merge.ff
     By default, Git does not create an extra merge commit when merging
     a commit that is a descendant of the current commit.  Instead, the
     tip of the current branch is fast-forwarded.  When set to ‘false’,
     this variable tells Git to create an extra merge commit in such a
     case (equivalent to giving the ‘--no-ff’ option from the command
     line).  When set to ‘only’, only such fast-forward merges are
     allowed (equivalent to giving the ‘--ff-only’ option from the
     command line).

merge.verifySignatures
     If true, this is equivalent to the –verify-signatures command line
     option.  See git-merge(1) for details.

merge.branchdesc
     ブランチ名に加えて、それらに関連付けられたブランチの説明テキストを
     ログメッセージに入力します。デフォルトはfalseです。

merge.log
     ブランチ名に加えて、マージされる実際のコミットからの最大「指定の数
     」の親コミットの1行説明をログメッセージに入力します。デフォルトは
     falseで、trueは20の同義語です。

merge.suppressDest
     統合ブランチの名前に一致するグロブをこの複数値の構成変数
     (multi-valued configuration variable)に追加することにより、これらの
     統合ブランチへのマージに対して計算されるデフォルトのマージメッセー
     ジは、タイトルから「into <branch name>」を省略します。

     空の値を持つ要素を使用して、以前の構成エントリから蓄積されたグロブ
     のリストをクリアできます。 ‘merge.suppressDest’ 変数が定義されてい
     ない場合、下位互換性のためにデフォルト値の ‘master’ が使用されます
     。

merge.renameLimit
     The number of files to consider in the exhaustive portion of rename
     detection during a merge.  If not specified, defaults to the value
     of diff.renameLimit.  If neither merge.renameLimit nor
     diff.renameLimit are specified, currently defaults to 7000.  This
     setting has no effect if rename detection is turned off.

merge.renames
     Whether Git detects renames.  If set to "false", rename detection
     is disabled.  If set to "true", basic rename detection is enabled.
     Defaults to the value of diff.renames.

merge.directoryRenames
     Whether Git detects directory renames, affecting what happens at
     merge time to new files added to a directory on one side of history
     when that directory was renamed on the other side of history.  If
     merge.directoryRenames is set to "false", directory rename
     detection is disabled, meaning that such new files will be left
     behind in the old directory.  If set to "true", directory rename
     detection is enabled, meaning that such new files will be moved
     into the new directory.  If set to "conflict", a conflict will be
     reported for such paths.  If merge.renames is false,
     merge.directoryRenames is ignored and treated as false.  Defaults
     to "conflict".

merge.renormalize
     Tell Git that canonical representation of files in the repository
     has changed over time (e.g.  earlier commits record text files with
     CRLF line endings, but recent ones use LF line endings).  In such a
     repository, Git can convert the data recorded in commits to a
     canonical form before performing a merge to reduce unnecessary
     conflicts.  For more information, see section "Merging branches
     with differing checkin/checkout attributes" in gitattributes(5).

merge.stat
     Whether to print the diffstat between ORIG_HEAD and the merge
     result at the end of the merge.  True by default.

merge.autoStash
     When set to true, automatically create a temporary stash entry
     before the operation begins, and apply it after the operation ends.
     This means that you can run merge on a dirty worktree.  However,
     use with care: the final stash application after a successful merge
     might result in non-trivial conflicts.  This option can be
     overridden by the ‘--no-autostash’ and ‘--autostash’ options of
     git-merge(1).  Defaults to false.

merge.tool
     Controls which merge tool is used by git-mergetool(1).  The list
     below shows the valid built-in values.  Any other value is treated
     as a custom merge tool and requires that a corresponding
     mergetool.<tool>.cmd variable is defined.

merge.guitool
     Controls which merge tool is used by git-mergetool(1) when the
     -g/–gui flag is specified.  The list below shows the valid built-in
     values.  Any other value is treated as a custom merge tool and
     requires that a corresponding mergetool.<guitool>.cmd variable is
     defined.

        • araxis

        • bc

        • bc3

        • bc4

        • codecompare

        • deltawalker

        • diffmerge

        • diffuse

        • ecmerge

        • emerge

        • examdiff

        • guiffy

        • gvimdiff

        • gvimdiff1

        • gvimdiff2

        • gvimdiff3

        • kdiff3

        • meld

        • nvimdiff

        • nvimdiff1

        • nvimdiff2

        • nvimdiff3

        • opendiff

        • p4merge

        • smerge

        • tkdiff

        • tortoisemerge

        • vimdiff

        • vimdiff1

        • vimdiff2

        • vimdiff3

        • winmerge

        • xxdiff

merge.verbosity
     Controls the amount of output shown by the recursive merge
     strategy.  Level 0 outputs nothing except a final error message if
     conflicts were detected.  Level 1 outputs only conflicts, 2 outputs
     conflicts and file changes.  Level 5 and above outputs debugging
     information.  The default is level 2.  Can be overridden by the
     ‘GIT_MERGE_VERBOSITY’ environment variable.

merge.<driver>.name
     Defines a human-readable name for a custom low-level merge driver.
     See gitattributes(5) for details.

merge.<driver>.driver
     Defines the command that implements a custom low-level merge
     driver.  See gitattributes(5) for details.

merge.<driver>.recursive
     Names a low-level merge driver to be used when performing an
     internal merge between common ancestors.  See gitattributes(5) for
     details.

mergetool.<tool>.path
     Override the path for the given tool.  This is useful in case your
     tool is not in the PATH.

mergetool.<tool>.cmd
     Specify the command to invoke the specified merge tool.  The
     specified command is evaluated in shell with the following
     variables available: _BASE_ is the name of a temporary file
     containing the common base of the files to be merged, if available;
     _LOCAL_ is the name of a temporary file containing the contents of
     the file on the current branch; _REMOTE_ is the name of a temporary
     file containing the contents of the file from the branch being
     merged; _MERGED_ contains the name of the file to which the merge
     tool should write the results of a successful merge.

mergetool.<tool>.hideResolved
     Allows the user to override the global ‘mergetool.hideResolved’
     value for a specific tool.  See ‘mergetool.hideResolved’ for the
     full description.

mergetool.<tool>.trustExitCode
     For a custom merge command, specify whether the exit code of the
     merge command can be used to determine whether the merge was
     successful.  If this is not set to true then the merge target file
     timestamp is checked and the merge assumed to have been successful
     if the file has been updated, otherwise the user is prompted to
     indicate the success of the merge.

mergetool.meld.hasOutput
     Older versions of ‘meld’ do not support the ‘--output’ option.  Git
     will attempt to detect whether ‘meld’ supports ‘--output’ by
     inspecting the output of ‘meld --help’.  Configuring
     ‘mergetool.meld.hasOutput’ will make Git skip these checks and use
     the configured value instead.  Setting ‘mergetool.meld.hasOutput’
     to ‘true’ tells Git to unconditionally use the ‘--output’ option,
     and ‘false’ avoids using ‘--output’.

mergetool.meld.useAutoMerge
     When the ‘--auto-merge’ is given, meld will merge all
     non-conflicting parts automatically, highlight the conflicting
     parts and wait for user decision.  Setting
     ‘mergetool.meld.useAutoMerge’ to ‘true’ tells Git to
     unconditionally use the ‘--auto-merge’ option with ‘meld’.  Setting
     this value to ‘auto’ makes git detect whether ‘--auto-merge’ is
     supported and will only use ‘--auto-merge’ when available.  A value
     of ‘false’ avoids using ‘--auto-merge’ altogether, and is the
     default value.

mergetool.hideResolved
     During a merge Git will automatically resolve as many conflicts as
     possible and write the _MERGED_ file containing conflict markers
     around any conflicts that it cannot resolve; _LOCAL_ and _REMOTE_
     normally represent the versions of the file from before Git’s
     conflict resolution.  This flag causes _LOCAL_ and _REMOTE_ to be
     overwriten so that only the unresolved conflicts are presented to
     the merge tool.  Can be configured per-tool via the
     ‘mergetool.<tool>.hideResolved’ configuration variable.  Defaults
     to ‘false’.

mergetool.keepBackup
     After performing a merge, the original file with conflict markers
     can be saved as a file with a ‘.orig’ extension.  If this variable
     is set to ‘false’ then this file is not preserved.  Defaults to
     ‘true’ (i.e.  keep the backup files).

mergetool.keepTemporaries
     When invoking a custom merge tool, Git uses a set of temporary
     files to pass to the tool.  If the tool returns an error and this
     variable is set to ‘true’, then these temporary files will be
     preserved, otherwise they will be removed after the tool has
     exited.  Defaults to ‘false’.

mergetool.writeToTemp
     Git writes temporary _BASE_, _LOCAL_, and _REMOTE_ versions of
     conflicting files in the worktree by default.  Git will attempt to
     use a temporary directory for these files when set ‘true’.
     Defaults to ‘false’.

mergetool.prompt
     Prompt before each invocation of the merge resolution program.

notes.mergeStrategy
     Which merge strategy to choose by default when resolving notes
     conflicts.  Must be one of ‘manual’, ‘ours’, ‘theirs’, ‘union’, or
     ‘cat_sort_uniq’.  Defaults to ‘manual’.  See "NOTES MERGE
     STRATEGIES" section of git-notes(1) for more information on each
     strategy.

notes.<name>.mergeStrategy
     Which merge strategy to choose when doing a notes merge into
     refs/notes/<name>.  This overrides the more general
     "notes.mergeStrategy".  See the "NOTES MERGE STRATEGIES" section in
     git-notes(1) for more information on the available strategies.

notes.displayRef
     The (fully qualified) refname from which to show notes when showing
     commit messages.  The value of this variable can be set to a glob,
     in which case notes from all matching refs will be shown.  You may
     also specify this configuration variable several times.  A warning
     will be issued for refs that do not exist, but a glob that does not
     match any refs is silently ignored.

     This setting can be overridden with the ‘GIT_NOTES_DISPLAY_REF’
     environment variable, which must be a colon separated list of refs
     or globs.

     The effective value of "core.notesRef" (possibly overridden by
     GIT_NOTES_REF) is also implicitly added to the list of refs to be
     displayed.

notes.rewrite.<command>
     When rewriting commits with <command> (currently ‘amend’ or
     ‘rebase’) and this variable is set to ‘true’, Git automatically
     copies your notes from the original to the rewritten commit.
     Defaults to ‘true’, but see "notes.rewriteRef" below.

notes.rewriteMode
     When copying notes during a rewrite (see the
     "notes.rewrite.<command>" option), determines what to do if the
     target commit already has a note.  Must be one of ‘overwrite’,
     ‘concatenate’, ‘cat_sort_uniq’, or ‘ignore’.  Defaults to
     ‘concatenate’.

     This setting can be overridden with the ‘GIT_NOTES_REWRITE_MODE’
     environment variable.

notes.rewriteRef
     When copying notes during a rewrite, specifies the (fully
     qualified) ref whose notes should be copied.  The ref may be a
     glob, in which case notes in all matching refs will be copied.  You
     may also specify this configuration several times.

     Does not have a default value; you must configure this variable to
     enable note rewriting.  Set it to ‘refs/notes/commits’ to enable
     rewriting for the default commit notes.

     This setting can be overridden with the ‘GIT_NOTES_REWRITE_REF’
     environment variable, which must be a colon separated list of refs
     or globs.

pack.window
     コマンドラインでウィンドウサイズが指定されていない場合に
     git-pack-objects(1) によって使用されるウィンドウのサイズ。デフォル
     トは10です。

pack.depth
     コマンドラインで最大深度が指定されていない場合に
     git-pack-objects(1) によって使用される最大デルタ深度。デフォルトは
     50です。最大値は4095です。

pack.windowMemory
     コマンドラインで制限が指定されていない場合に、パックウィンドウメモ
     リの git-pack-objects(1) の各スレッドで消費されるメモリの最大サイズ
     。値には、「k」または「m」または「g」の接尾辞を付けることができます
     。未構成のまま(または明示的に0に設定する)にした場合、制限はありませ
     ん。

pack.compression
     パックファイル内のオブジェクトの圧縮レベルを示す整数 -1〜9。-1は
     zlibのデフォルトです。0は圧縮がないことを意味し、1〜9はさまざまな速
     度とサイズのトレードオフであり、9が最も低速です。設定されていない場
     合のデフォルトは core.compression です。 core.compression も設定さ
     れていない場合、デフォルトは -1 になります。これは、「速度と圧縮の
     間のデフォルトの妥協点(現在はレベル6と同等)」であるzlibのデフォルト
     です。

     注意: 圧縮レベルを変更しても、既存のすべてのオブジェクトが自動的に
     再圧縮されるわけではないことに注意してください。 ‘-F’ オプションを
     git-repack(1) に渡すことで、強制的に再圧縮できます。

pack.allowPackReuse
     trueの場合、かつ、到達可能性ビットマップ(reachability bitmaps)が有
     効になっている場合、pack-objectsはビットマップ化されたパックファイ
     ルの一部をそのままで送信しようとします。これにより、フェッチを提供
     するためのメモリとCPUの使用量を減らすことができますが、送信するパッ
     クが少し大きくなる可能性があります。デフォルトはtrueです。

pack.island
     デルタアイランド(delta islands)のセットを構成する拡張正規表現。詳細
     については、 git-pack-objects(1) の「DELTA ISLANDS」を参照してくだ
     さい。

pack.islandCore
     オブジェクトを最初にパックする島名(island name)を指定します。 これ
     により、1つのパックの前に一種の疑似パックが作成されるため、指定の島
     のオブジェクトを、これらのオブジェクトを要求するユーザーに提供する
     必要のあるパックにコピーする速度が速くなることが期待されます。実際
     には、これは、指定された島が、リポジトリで最も一般的に複製される島
     に対応している可能性が高いことを意味します。 git-pack-objects(1) の
     「DELTA ISLANDS」も参照してください。

pack.deltaCacheSize
     デルタをパックに書き出す前に、 git-pack-objects(1) でデルタをキャッ
     シュするために使用されるバイト単位の最大メモリ。すべてのオブジェク
     トに最適なものが見つけたあとで、このキャッシュがあれば、最終的なデ
     ルタ結果を再計算する必要がないため、オブジェクトの書き込みフェーズ
     を高速化できます。そのために使用されます。ただし、メモリが不足して
     いるマシンで大規模なリポジトリを再パックして、特にこのキャッシュが
     システムをスワップに追いやる場合、これによって悪影響を受ける可能性
     があります。値0は、制限がないことを意味します。このキャッシュを事実
     上無効にするために、最小サイズの1バイトを使用できます。デフォルトは
     256MiBです。

pack.deltaCacheLimit
     git-pack-objects(1) でキャッシュされるデルタの最大サイズ。すべての
     オブジェクトに最適なものが見つかった後、このキャッシュがあれば、最
     終的なデルタ結果を再計算する必要がないため、オブジェクトの書き込み
     フェーズを高速化します。そのために使用されます。デフォルトは1000で
     す。最大値は65535です。

pack.threads
     最適なデルタマッチングを検索するときに生成するスレッドの数を指定し
     ます。このためには git-pack-objects(1)をpthreadでコンパイルする必要
     があります。そうしないと、このオプションは無視され、警告が表示され
     ます。 これは、マルチプロセッサマシンでのパッキング時間を短縮するこ
     とを目的としています。ただし、デルタ検索ウィンドウに必要なメモリ量
     は、スレッド数で乗算されます。0を指定すると、GitはCPUの数を自動検出
     し、それに応じてスレッドの数を設定します。

pack.indexVersion
     デフォルトのパックインデックスバージョンを指定します。有効な値は、
     1.5.2より前のバージョンで使用されていたレガシーパックインデックスの
     場合は1、4GBを超えるパックの機能と破損したパックの再パックに対する
     適切な保護を備えた新しいパックインデックスの場合は2です。バージョン
     2がデフォルトです。注意: 対応するパックが2GBを超える場合は常にバー
     ジョン2が適用され、この構成オプションは無視されることに注意してくだ
     さい。

     バージョン2の ‘*.idx’ ファイルを理解しない古いGitを使用している場合
     は、 ‘*.pack’ ファイルと対応する ‘*.idx’ ファイルの両方を反対側から
     コピーする非ネイティブプロトコル(例:http)を介してクローンを作成また
     はフェッチすると、古いバージョンのGitではアクセスできないリポジトリ
     が提供される場合があります。けれども、 ‘*.pack’ ファイルが2GBより小
     さい場合は、 *.pack に git-index-pack(1) を使用して、 ‘*.idx’ ファ
     イルを再生成できます。

pack.packSizeLimit
     パックの最大サイズ。この設定は、再パック時にファイルへパッキングす
     るときのみ影響します。つまり、 git:// プロトコルは影響を受けません
     。 git-repack(1) の ‘--max-pack-size’ オプションでオーバーライドで
     きます。この制限に達すると、複数のパックファイルが作成されます。

     注意: このオプションが役立つことはめったになく、(Gitはパックにまた
     がるデルタを保存しないため、)ディスク上の合計サイズが大きくなり、実
     行時のパフォーマンスが低下する可能性があることに注意してください(複
     数のパック内のオブジェクトルックアップは単一のパックで行うよりも遅
     く、到達可能性ビットマップなどの最適化は複数パックに対応できません
     )。

     (たとえば、ファイルシステムが大きいファイルをサポートしていないため
     、)あなたが小さいパックファイルを使用してGitをバリバリと使う必要が
     ある場合、このオプションが役立かもしれません。ただし、限られたサイ
     ズをサポートするメディア(たとえば、リポジトリ全体を保存できないリム
     ーバブルメディア)を介してパックファイルを送信することが目標である場
     合は、単一の大きなパックファイルを作成し、一般的なマルチボリューム
     アーカイブツール(例えば Unix ‘split’ )を使用して分割する方がよいで
     しょう。

     許可される最小サイズは1MiBに制限されています。デフォルトの大きさは
     無制限です。 _k_ または _m_ または _g_ の一般的な単位接尾辞がサポー
     トされています。

pack.useBitmaps
     trueの場合、(たとえば、フェッチ作業中のサーバー側で、)gitはstdoutに
     パックするときに(可能な場合は、)パックビットマップを使用します。デ
     フォルトはtrueです。パックビットマップをデバッグしている場合を除い
     て、通常、これをオフにする必要はありません。

pack.useSparse
     trueの場合、 gitは _git pack-objects‘ で ’–revs_ オプションが存在す
     る場合、デフォルトで ‘--sparse’ オプションを使用します。このアルゴ
     リズムは、新しいオブジェクトを導入するパスに現れるツリーのみをウォ
     ークします。これは、小さな変更を送信するパックを計算するときに、パ
     フォーマンスに大きなメリットをもたらす可能性があります。ただし、含
     まれているコミットに特定の種類の直接名前変更(direct renames)が含ま
     れている場合は、パックファイルに追加のオブジェクトが追加される可能
     性があります。 デフォルトは ‘true’ です。

pack.preferBitmapTips
     ビットマップを受け取るコミットを選択するときは、「選択ウィンドウ」
     (selection window)の他のコミットよりも、この構成の任意の値の接尾辞
     である参照の先端にあるコミットを優先します。

     注意: この設定を ‘refs/foo’ に設定しても、 ‘refs/foo/bar’ と
     ‘refs/foo/baz’ の先端のコミットが必ずしも選択されるわけではないこと
     に注意してください。 これは、可変長の一連のウィンドウ内からビットマ
     ップに対してコミットが選択されるためです。

     この構成の任意の値の接尾辞である参照の先端にあるコミットがウィンド
     ウに表示された場合、そのウィンドウ内の他のコミットよりも即座に優先
     されます。

pack.writeBitmaps (deprecated)
     これは、 ‘repack.writeBitmaps’ の非推奨の同義語です。

pack.writeBitmapHashCache
     trueの場合、gitはビットマップインデックスに「hash cache」(ハッシュ
     キャッシュ)セクションを含めます(記述されている場合)。 このキャッシ
     ュは、gitのデルタヒューリスティックを供給するために使用でき、ビット
     マップオブジェクトと非ビットマップオブジェクト間のデルタを改善する
     可能性があります(たとえば、古いビットマップパックと最後のgc以降にプ
     ッシュされたオブジェクト間のフェッチを提供する場合)。欠点は、ディス
     クスペースのオブジェクトごとに4バイトを消費することです。 デフォル
     トはtrueです。

pack.writeReverseIndex
     trueの場合、gitは、 git-fast-import(1) と バルクチェックインメカニ
     ズム(bulk checkin mechanism)を除く、すべての場所に書き込む新しいパ
     ックファイルごとに対応する .rev ファイル(参照:
     Documentation/technical/pack-format.txt
     (../technical/pack-format.html))を書き込みます。デフォルトはfalseで
     す。

pager.<cmd>
     値がブール値の場合、ttyへの書き込み時に特定のGitサブコマンドの出力
     のページ付けをオンまたはオフにします。それ以外の場合は、
     ‘pager.<cmd>’ の値で指定されたページャーを使用してサブコマンドのペ
     ージ付けをオンにします。コマンドラインで ‘--paginate’ または
     ‘--no-pager’ が指定されている場合、このオプションよりも優先されます
     。すべてのコマンドのページ付けを無効にするには、 ‘core.pager’ また
     は ‘GIT_PAGER’ を ‘cat’ に設定します。

pretty.<name>
     git-log(1)で 指定されている、 ‘--pretty=’ 書式文字列のエイリアス。
     ここで定義されたエイリアスは、組み込みのpretty書式と同じように使用
     できます。 たとえば、 ‘git config pretty.changelog "format:* %H
     %s"’ を実行すると、 ‘git log --pretty=changelog’ の呼び出しは ‘git
     log "--pretty=format:* %H %s"’ を実行するのと同じになります。注意:
     組み込みフォーマットと同じ名前のエイリアスは黙って無視されることに
     注意してください。

protocol.allow
     設定されている場合は、ポリシーを明示的に持たないすべてのプロトコル
     にユーザー定義のデフォルトポリシーを指定します
     (‘protocol.<name>.allow’)。デフォルトでは、設定されていない場合、既
     知の安全なプロトコル(http、https、git、ssh、file)のデフォルトポリシ
     ーは「always」、既知の危険なプロトコル(ext)のデフォルトポリシーは「
     never」、その他の全てのプロトコルのデフォルトのポリシーは「user」で
     す。サポートされているポリシーは以下です:

        • ‘always’ - プロトコルは常に使用できます。

        • ‘never’ - プロトコルを使用することはできません。

        • ‘user’ - プロトコルは、 ‘GIT_PROTOCOL_FROM_USER’ が設定されて
          いないか、値が ‘1’ の場合にのみ使用できます。このポリシーは、
          プロトコルをユーザーが直接使用できるようにしたいが、ユーザー入
          力なしの clone/fetch/push を実行するコマンドでは使用したくない
          場合(たとえば再帰的なsubmoduleの初期化の場合)、設定しなければ
          なりません。

protocol.<name>.allow
     clone/fetch/push コマンドでプロトコル ‘<name>’ が使用するポリシーを
     設定します。 使用可能なポリシーについては、上記の「protocol.allow」
     を参照してください。

     現在gitで使用されているプロトコル名はイカのとおりです:

        • ‘file’: 任意のローカルファイルベースのパス( ‘file://’ URL また
          は ローカルパス を含む)

        • ‘git’: 直接TCP接続(または構成されている場合はプロキシ)を介した
          匿名のgitプロトコル

        • ‘ssh’: sshプロトコルの上で動くgitプロトコル( ‘host:path’ 書式
          や ‘ssh://’ 等を含む)

        • ‘http’: httpプロトコルの上で動くgitプロトコル。「スマート
          http」と「ダムhttp」の両方です。両方を構成する場合は、個別に構
          成する必要があります。注意:これには ‘https’ は含まれないことに
          注意してください。

        • 外部ヘルパーはそれらのプロトコルによる名前が付けられます(たと
          えば、 ‘hg’ というプロトコルを指定したら ‘git-remote-hg’ ヘル
          パーを許可します)

protocol.version
     設定されている場合、クライアントは指定されたプロトコルバージョンを
     使用してサーバーとの通信を試みます。サーバーがサポートしていない場
     合、通信はバージョン0にフォールバックします。設定されていない場合、
     デフォルトは「2」です。 サポートされているバージョンは以下です:

        • ‘0’ - 独自のワイヤープロトコル

        • ‘1’ - サーバーからの初期応答にバージョン文字列が追加された独自
          のワイヤープロトコル。

        • ‘2’ - wire protocol version 2 (technical/protocol-v2.html)

pull.ff
     By default, Git does not create an extra merge commit when merging
     a commit that is a descendant of the current commit.  Instead, the
     tip of the current branch is fast-forwarded.  When set to ‘false’,
     this variable tells Git to create an extra merge commit in such a
     case (equivalent to giving the ‘--no-ff’ option from the command
     line).  When set to ‘only’, only such fast-forward merges are
     allowed (equivalent to giving the ‘--ff-only’ option from the
     command line).  This setting overrides ‘merge.ff’ when pulling.

pull.rebase
     When true, rebase branches on top of the fetched branch, instead of
     merging the default branch from the default remote when "git pull"
     is run.  See "branch.<name>.rebase" for setting this on a
     per-branch basis.

     When ‘merges’ (or just _m_), pass the ‘--rebase-merges’ option to
     _git rebase_ so that the local merge commits are included in the
     rebase (see git-rebase(1) for details).

     When ‘preserve’ (or just _p_, deprecated in favor of ‘merges’),
     also pass ‘--preserve-merges’ along to _git rebase_ so that locally
     committed merge commits will not be flattened by running _git
     pull_.

     When the value is ‘interactive’ (or just _i_), the rebase is run in
     interactive mode.

     *NOTE*: this is a possibly dangerous operation; do *not* use it
     unless you understand the implications (see git-rebase(1) for
     details).

pull.octopus
     The default merge strategy to use when pulling multiple branches at
     once.

pull.twohead
     The default merge strategy to use when pulling a single branch.

push.default
     Defines the action ‘git push’ should take if no refspec is given
     (whether from the command-line, config, or elsewhere).  Different
     values are well-suited for specific workflows; for instance, in a
     purely central workflow (i.e.  the fetch source is equal to the
     push destination), ‘upstream’ is probably what you want.  Possible
     values are:

        • ‘nothing’ - do not push anything (error out) unless a refspec
          is given.  This is primarily meant for people who want to
          avoid mistakes by always being explicit.

        • ‘current’ - push the current branch to update a branch with
          the same name on the receiving end.  Works in both central and
          non-central workflows.

        • ‘upstream’ - push the current branch back to the branch whose
          changes are usually integrated into the current branch (which
          is called ‘@{upstream}’).  This mode only makes sense if you
          are pushing to the same repository you would normally pull
          from (i.e.  central workflow).

        • ‘tracking’ - This is a deprecated synonym for ‘upstream’.

        • ‘simple’ - pushes the current branch with the same name on the
          remote.

          If you are working on a centralized workflow (pushing to the
          same repository you pull from, which is typically ‘origin’),
          then you need to configure an upstream branch with the same
          name.

          This mode is the default since Git 2.0, and is the safest
          option suited for beginners.

        • ‘matching’ - push all branches having the same name on both
          ends.  This makes the repository you are pushing to remember
          the set of branches that will be pushed out (e.g.  if you
          always push _maint_ and _master_ there and no other branches,
          the repository you push to will have these two branches, and
          your local _maint_ and _master_ will be pushed there).

          To use this mode effectively, you have to make sure _all_ the
          branches you would push out are ready to be pushed out before
          running _git push_, as the whole point of this mode is to
          allow you to push all of the branches in one go.  If you
          usually finish work on only one branch and push out the
          result, while other branches are unfinished, this mode is not
          for you.  Also this mode is not suitable for pushing into a
          shared central repository, as other people may add new
          branches there, or update the tip of existing branches outside
          your control.

          This used to be the default, but not since Git 2.0 (‘simple’
          is the new default).

push.followTags
     If set to true enable ‘--follow-tags’ option by default.  You may
     override this configuration at time of push by specifying
     ‘--no-follow-tags’.

push.gpgSign
     May be set to a boolean value, or the string _if-asked_.  A true
     value causes all pushes to be GPG signed, as if ‘--signed’ is
     passed to git-push(1).  The string _if-asked_ causes pushes to be
     signed if the server supports it, as if ‘--signed=if-asked’ is
     passed to _git push_.  A false value may override a value from a
     lower-priority config file.  An explicit command-line flag always
     overrides this config option.

push.pushOption
     When no ‘--push-option=<option>’ argument is given from the command
     line, ‘git push’ behaves as if each <value> of this variable is
     given as ‘--push-option=<value>’.

     This is a multi-valued variable, and an empty value can be used in
     a higher priority configuration file (e.g.  ‘.git/config’ in a
     repository) to clear the values inherited from a lower priority
     configuration files (e.g.  ‘$HOME/.gitconfig’).

          Example:

          /etc/gitconfig
            push.pushoption = a
            push.pushoption = b

          ~/.gitconfig
            push.pushoption = c

          repo/.git/config
            push.pushoption =
            push.pushoption = b

          This will result in only b (a and c are cleared).

push.recurseSubmodules
     Make sure all submodule commits used by the revisions to be pushed
     are available on a remote-tracking branch.  If the value is _check_
     then Git will verify that all submodule commits that changed in the
     revisions to be pushed are available on at least one remote of the
     submodule.  If any commits are missing, the push will be aborted
     and exit with non-zero status.  If the value is _on-demand_ then
     all submodules that changed in the revisions to be pushed will be
     pushed.  If on-demand was not able to push all necessary revisions
     it will also be aborted and exit with non-zero status.  If the
     value is _no_ then default behavior of ignoring submodules when
     pushing is retained.  You may override this configuration at time
     of push by specifying _–recurse-submodules=check|on-demand|no_.  If
     not set, _no_ is used by default, unless _submodule.recurse_ is set
     (in which case a _true_ value means _on-demand_).

push.useForceIfIncludes
     If set to "true", it is equivalent to specifying
     ‘--force-if-includes’ as an option to git-push(1) in the command
     line.  Adding ‘--no-force-if-includes’ at the time of push
     overrides this configuration setting.

push.negotiate
     If set to "true", attempt to reduce the size of the packfile sent
     by rounds of negotiation in which the client and the server attempt
     to find commits in common.  If "false", Git will rely solely on the
     server’s ref advertisement to find commits in common.

rebase.backend
     Default backend to use for rebasing.  Possible choices are _apply_
     or _merge_.  In the future, if the merge backend gains all
     remaining capabilities of the apply backend, this setting may
     become unused.

rebase.stat
     Whether to show a diffstat of what changed upstream since the last
     rebase.  False by default.

rebase.autoSquash
     If set to true enable ‘--autosquash’ option by default.

rebase.autoStash
     When set to true, automatically create a temporary stash entry
     before the operation begins, and apply it after the operation ends.
     This means that you can run rebase on a dirty worktree.  However,
     use with care: the final stash application after a successful
     rebase might result in non-trivial conflicts.  This option can be
     overridden by the ‘--no-autostash’ and ‘--autostash’ options of
     git-rebase(1).  Defaults to false.

rebase.missingCommitsCheck
     If set to "warn", git rebase -i will print a warning if some
     commits are removed (e.g.  a line was deleted), however the rebase
     will still proceed.  If set to "error", it will print the previous
     warning and stop the rebase, _git rebase –edit-todo_ can then be
     used to correct the error.  If set to "ignore", no checking is
     done.  To drop a commit without warning or error, use the ‘drop’
     command in the todo list.  Defaults to "ignore".

rebase.instructionFormat
     A format string, as specified in git-log(1), to be used for the
     todo list during an interactive rebase.  The format will
     automatically have the long commit hash prepended to the format.

rebase.abbreviateCommands
     If set to true, ‘git rebase’ will use abbreviated command names in
     the todo list resulting in something like this:

                  p deadbee The oneline of the commit
                  p fa1afe1 The oneline of the next commit
                  ...

     instead of:

                  pick deadbee The oneline of the commit
                  pick fa1afe1 The oneline of the next commit
                  ...

     Defaults to false.

rebase.rescheduleFailedExec
     Automatically reschedule ‘exec’ commands that failed.  This only
     makes sense in interactive mode (or when an ‘--exec’ option was
     provided).  This is the same as specifying the
     ‘--reschedule-failed-exec’ option.

rebase.forkPoint
     If set to false set ‘--no-fork-point’ option by default.

receive.advertiseAtomic
     デフォルトでは、git-receive-packはアトミックプッシュ機能(atomic
     push capability)をクライアントに公表(advertise)します。この機能を公
     表したくない場合は、この変数をfalseに設定してください。

receive.advertisePushOptions
     trueに設定すると、git-receive-packはプッシュオプション機能(push
     options capability)をクライアントに公表(advertise)します。デフォル
     トではFalse。

receive.autogc
     デフォルトでは、git-pushからデータを受信し、参照を更新した後、
     git-receive-packは ‘git-gc --auto’ を実行します。 この変数をfalseに
     設定することで停止できます。

receive.certNonceSeed
     この変数を文字列に設定すると、 ‘git receive-pack’ は ‘git push
     --signed’ を受け入れ、その文字列を秘密鍵として使用してHMACによって
     保護された「nonce」を使用して検証します。

receive.certNonceSlop
     ‘git push --signed’ が、同じリポジトリにサービスを提供する
     receive-packによって発行された「nonce」を含むプッシュ証明書をこの数
     秒以内に送信した場合、証明書で見つかった「nonce」をフックのために
     ‘GIT_PUSH_CERT_NONCE’ にエクスポートします(receive-packが送信側に含
     めるように要求したものの代わりに)。 これにより、 ‘pre-receive’ と
     ‘post-receive’ でのチェックの記述が少し簡単になります。証明書を受け
     入れるかどうかを決定するために、nonce が何秒後に古くなるかを記録す
     る環境変数 ‘GIT_PUSH_CERT_NONCE_SLOP’ をチェックする代わりに、
     ‘GIT_PUSH_CERT_NONCE_STATUS’ が ‘OK’ であることだけをチェックするこ
     とができます。

receive.fsckObjects
     trueに設定されている場合、git-receive-packは受信したすべてのオブジ
     ェクトをチェックします。 チェックされる内容については、
     ‘transfer.fsckObjects’ を参照してください。デフォルトはfalseです。
     設定されていない場合は、代わりに ‘transfer.fsckObjects’ の値が使用
     されます。

receive.fsck.<msg-id>
     ‘fsck.<msg-id>’ のように機能しますが、 linkgit: git-fsck[1] の代わ
     りに git-receive-pack(1) によって使用されます。詳細については、
     ‘fsck.<msg-id>’ の文書を参照してください。

receive.fsck.skipList
     ‘fsck.skipList’ のように機能しますが、 git-fsck(1) の代わりに
     git-receive-pack(1) によって使用されます。詳細については、
     ‘fsck.skipList’ の文書を参照してください。

receive.keepAlive
     クライアントからパックを受信した後、パックの処理中に ‘receive-pack’
     が出力を生成せず(‘--quiet’ が指定されている場合)、一部のネットワー
     クがTCP接続を切断する可能性があります。このオプションを設定すると、
     ‘receive-pack’ はこのフェーズで ‘receive.keepAlive’ 秒の間データを
     送信しない場合、short keepalive packetを送信します。デフォルトは5秒
     です。キープアライブを完全に無効にするには、0に設定します。

receive.unpackLimit
     プッシュで受信されるオブジェクトの数がこの制限を下回る場合、オブジ
     ェクトは緩いオブジェクト(loose object)ファイルに解凍されます。ただ
     し、受信したオブジェクトの数がこの制限以上の場合、受信したパックは
     、欠落しているデルタベースを追加した後、パックとして保存されます。
     プッシュからパックを保存すると、特に低速のファイルシステムで、プッ
     シュ操作をより速く完了することができます。 設定されていない場合は、
     代わりに ‘transfer.unpackLimit’ の値が使用されます。

receive.maxInputSize
     着信パックストリームのサイズがこの制限よりも大きい場合、パックファ
     イルを受け入れる代わりに git-receive-pack がエラーになります。0に設
     定または設定されていない場合、サイズは無制限です。

receive.denyDeletes
     trueに設定すると、git-receive-packはrefを削除するrefの更新を拒否し
     ます。これを使用して、プッシュによるそのような参照の削除を防ぎます
     。

receive.denyDeleteCurrent
     trueに設定すると、git-receive-packは、非ベアリポジトリの現在チェッ
     クアウトされているブランチを削除するrefの更新を拒否します。

receive.denyCurrentBranch
     trueまたは "refuse"(拒否)に設定すると、 git-receive-pack は、非ベア
     リポジトリの現在チェックアウトされているブランチへのrefの更新を拒否
     します。このようなプッシュは、HEADがインデックスおよび作業ツリーと
     同期しなくなるため、潜在的に危険です。"warn"(警告)に設定されている
     場合は、stderrへのそのようなプッシュの警告を出力しますが、プッシュ
     を続行できるようにします。 falseまたは"ignore"(無視)に設定されてい
     る場合は、メッセージなしでそのようなプッシュを許可します。 デフォル
     トは"refuse"です。

     別のオプションは"updateInstead"で、現在のブランチにプッシュすると作
     業ツリーが更新されます。このオプションは、インタラクティブsshを介し
     て一方の側に簡単にアクセスできない場合に作業ディレクトリを同期する
     ことを目的としています(たとえば、ライブWebサイト。つまり作業ディレ
     クトリがクリーンである必要があります)。 このモードは、VM内で開発し
     て、さまざまなオペレーティングシステムでコードをテストおよび修正す
     る場合にも役立ちます。

     デフォルトでは、作業ツリーまたはインデックスにHEADとの違いがある場
     合、"updateInstead"はプッシュを拒否しますが、 ‘push-to-checkout’ フ
     ックを使用してこれをカスタマイズできます。 githooks(5) を参照してく
     ださい。

receive.denyNonFastForwards
     trueに設定すると、git-receive-packは、fast-forwardではないrefの更新
     を拒否します。これを使用して、プッシュが強制されている場合でも、プ
     ッシュによるそのような更新を防ぎます。この構成変数は、共有リポジト
     リを初期化するときに設定されます。

receive.hideRefs
     この変数は ‘transfer.hideRefs’ と同じですが、 ‘receive-pack’ にのみ
     適用されます(したがって、プッシュには影響しますが、フェッチには影響
     しません)。 ‘git push’ によって非表示の参照を更新または削除しようと
     する試みは拒否されます。

receive.procReceiveRefs
     これは、 ‘receive-pack’ のコマンドに一致する参照プレフィックスを定
     義する複数値の変数(multi-valued variable)です。プレフィックスに一致
     するコマンドは、内部の ‘execute_commands’ 関数ではなく、外部フック
     「proc-receive」によって実行されます。この変数が定義されていない場
     合、「proc-receive」フックは使用されず、すべてのコマンドは内部の
     ‘execute_commands’ 関数によって実行されます。

     たとえば、この変数が "refs/for" に設定されている場合、
     "refs/for/master" などの参照にプッシュしても "refs/for/master" とい
     う名前の参照は作成・更新されませんが、 "proc-receive" フックを実行
     すれば直接プルリクエストを作成・更新できるはずです。

     オプションの修飾子を値の先頭に指定して、特定のアクション(作成(a)、
     変更(m)、削除(d))のコマンドをフィルター処理できます。 ‘!’ を修飾子
     に含めて、参照プレフィックスエントリを無効にすることができます。 例
     えば以下のようにできます:

          git config --system --add receive.procReceiveRefs ad:refs/heads
          git config --system --add receive.procReceiveRefs !:refs/heads

receive.updateServerInfo
     trueに設定すると、git-pushからデータを受信し、参照を更新した後、
     git-receive-packはgit-update-server-infoを実行します。

receive.shallowUpdate
     trueに設定すると、新しい参照に新しいshallow rootsが必要になったとき
     に .git/shallow を更新できます。それ以外の場合、それらの参照は拒否
     されます。

remote.pushDefault
     The remote to push to by default.  Overrides ‘branch.<name>.remote’
     for all branches, and is overridden by ‘branch.<name>.pushRemote’
     for specific branches.

remote.<name>.url
     The URL of a remote repository.  See git-fetch(1) or git-push(1).

remote.<name>.pushurl
     The push URL of a remote repository.  See git-push(1).

remote.<name>.proxy
     For remotes that require curl (http, https and ftp), the URL to the
     proxy to use for that remote.  Set to the empty string to disable
     proxying for that remote.

remote.<name>.proxyAuthMethod
     For remotes that require curl (http, https and ftp), the method to
     use for authenticating against the proxy in use (probably set in
     ‘remote.<name>.proxy’).  See ‘http.proxyAuthMethod’.

remote.<name>.fetch
     The default set of "refspec" for git-fetch(1).  See git-fetch(1).

remote.<name>.push
     The default set of "refspec" for git-push(1).  See git-push(1).

remote.<name>.mirror
     If true, pushing to this remote will automatically behave as if the
     ‘--mirror’ option was given on the command line.

remote.<name>.skipDefaultUpdate
     If true, this remote will be skipped by default when updating using
     git-fetch(1) or the ‘update’ subcommand of git-remote(1).

remote.<name>.skipFetchAll
     If true, this remote will be skipped by default when updating using
     git-fetch(1) or the ‘update’ subcommand of git-remote(1).

remote.<name>.receivepack
     The default program to execute on the remote side when pushing.
     See option –receive-pack of git-push(1).

remote.<name>.uploadpack
     The default program to execute on the remote side when fetching.
     See option –upload-pack of git-fetch-pack(1).

remote.<name>.tagOpt
     Setting this value to –no-tags disables automatic tag following
     when fetching from remote <name>.  Setting it to –tags will fetch
     every tag from remote <name>, even if they are not reachable from
     remote branch heads.  Passing these flags directly to git-fetch(1)
     can override this setting.  See options –tags and –no-tags of
     git-fetch(1).

remote.<name>.vcs
     Setting this to a value <vcs> will cause Git to interact with the
     remote with the git-remote-<vcs> helper.

remote.<name>.prune
     When set to true, fetching from this remote by default will also
     remove any remote-tracking references that no longer exist on the
     remote (as if the ‘--prune’ option was given on the command line).
     Overrides ‘fetch.prune’ settings, if any.

remote.<name>.pruneTags
     When set to true, fetching from this remote by default will also
     remove any local tags that no longer exist on the remote if pruning
     is activated in general via ‘remote.<name>.prune’, ‘fetch.prune’ or
     ‘--prune’.  Overrides ‘fetch.pruneTags’ settings, if any.

     See also ‘remote.<name>.prune’ and the PRUNING section of
     git-fetch(1).

remote.<name>.promisor
     When set to true, this remote will be used to fetch promisor
     objects.

remote.<name>.partialclonefilter
     The filter that will be applied when fetching from this promisor
     remote.

remotes.<group>
     ‘git remote update <group>’ によってフェッチされるremoteのリスト。
     git-remote(1) を参照してください。

repack.useDeltaBaseOffset
     By default, git-repack(1) creates packs that use delta-base offset.
     If you need to share your repository with Git older than version
     1.4.4, either directly or via a dumb protocol such as http, then
     you need to set this option to "false" and repack.  Access from old
     Git versions over the native protocol are unaffected by this
     option.

repack.packKeptObjects
     If set to true, makes ‘git repack’ act as if ‘--pack-kept-objects’
     was passed.  See git-repack(1) for details.  Defaults to ‘false’
     normally, but ‘true’ if a bitmap index is being written (either via
     ‘--write-bitmap-index’ or ‘repack.writeBitmaps’).

repack.useDeltaIslands
     If set to true, makes ‘git repack’ act as if ‘--delta-islands’ was
     passed.  Defaults to ‘false’.

repack.writeBitmaps
     When true, git will write a bitmap index when packing all objects
     to disk (e.g., when ‘git repack -a’ is run).  This index can speed
     up the "counting objects" phase of subsequent packs created for
     clones and fetches, at the cost of some disk space and extra time
     spent on the initial repack.  This has no effect if multiple
     packfiles are created.  Defaults to true on bare repos, false
     otherwise.

rerere.autoUpdate
     When set to true, ‘git-rerere’ updates the index with the resulting
     contents after it cleanly resolves conflicts using previously
     recorded resolution.  Defaults to false.

rerere.enabled
     Activate recording of resolved conflicts, so that identical
     conflict hunks can be resolved automatically, should they be
     encountered again.  By default, git-rerere(1) is enabled if there
     is an ‘rr-cache’ directory under the ‘$GIT_DIR’, e.g.  if "rerere"
     was previously used in the repository.

reset.quiet
     trueに設定すると、 ‘git reset’ はデフォルトで ‘--quiet’ オプション
     になります。

sendemail.identity
     A configuration identity.  When given, causes values in the
     _sendemail.<identity>_ subsection to take precedence over values in
     the _sendemail_ section.  The default identity is the value of
     ‘sendemail.identity’.

sendemail.smtpEncryption
     See git-send-email(1) for description.  Note that this setting is
     not subject to the _identity_ mechanism.

sendemail.smtpsslcertpath
     Path to ca-certificates (either a directory or a single file).  Set
     it to an empty string to disable certificate verification.

sendemail.<identity>.*
     Identity-specific versions of the _sendemail.*_ parameters found
     below, taking precedence over those when this identity is selected,
     through either the command-line or ‘sendemail.identity’.

sendemail.aliasesFile
sendemail.aliasFileType
sendemail.annotate
sendemail.bcc
sendemail.cc
sendemail.ccCmd
sendemail.chainReplyTo
sendemail.confirm
sendemail.envelopeSender
sendemail.from
sendemail.multiEdit
sendemail.signedoffbycc
sendemail.smtpPass
sendemail.suppresscc
sendemail.suppressFrom
sendemail.to
sendemail.tocmd
sendemail.smtpDomain
sendemail.smtpServer
sendemail.smtpServerPort
sendemail.smtpServerOption
sendemail.smtpUser
sendemail.thread
sendemail.transferEncoding
sendemail.validate
sendemail.xmailer
     See git-send-email(1) for description.

sendemail.signedoffcc (deprecated)
     Deprecated alias for ‘sendemail.signedoffbycc’.

sendemail.smtpBatchSize
     Number of messages to be sent per connection, after that a relogin
     will happen.  If the value is 0 or undefined, send all messages in
     one connection.  See also the ‘--batch-size’ option of
     git-send-email(1).

sendemail.smtpReloginDelay
     Seconds wait before reconnecting to smtp server.  See also the
     ‘--relogin-delay’ option of git-send-email(1).

sendemail.forbidSendmailVariables
     To avoid common misconfiguration mistakes, git-send-email(1) will
     abort with a warning if any configuration options for "sendmail"
     exist.  Set this variable to bypass the check.

sequence.editor
     リベース命令ファイル(rebase instruction file)を編集するために ‘git
     rebase -i’ によって使用されるテキストエディタ。この値は、使用時にシ
     ェルによって解釈されることを意図しています。 これは、
     ‘GIT_SEQUENCE_EDITOR’ 環境変数によってオーバーライドできます。構成
     されていない場合は、代わりにデフォルトのコミットメッセージエディタ
     が使用されます。

showBranch.default
     git-show-branch(1) のデフォルトのブランチセット。
     git-show-branch(1) を参照してください。

splitIndex.maxPercentChange
     When the split index feature is used, this specifies the percent of
     entries the split index can contain compared to the total number of
     entries in both the split index and the shared index before a new
     shared index is written.  The value should be between 0 and 100.
     If the value is 0 then a new shared index is always written, if it
     is 100 a new shared index is never written.  By default the value
     is 20, so a new shared index is written if the number of entries in
     the split index would be greater than 20 percent of the total
     number of entries.  See git-update-index(1).

splitIndex.sharedIndexExpire
     When the split index feature is used, shared index files that were
     not modified since the time this variable specifies will be removed
     when a new shared index file is created.  The value "now" expires
     all entries immediately, and "never" suppresses expiration
     altogether.  The default value is "2.weeks.ago".  Note that a
     shared index file is considered modified (for the purpose of
     expiration) each time a new split-index file is either created
     based on it or read from it.  See git-update-index(1).

ssh.variant
     デフォルトでは、Gitは設定されたSSHコマンドのベース名(環境変数
     ‘GIT_SSH’ または環境変数 ‘GIT_SSH_COMMAND’ または構成設定
     ‘core.sshCommand’ を使用して設定)に基づいて使用するコマンドライン引
     数を決定します。ベース名が認識されない場合、Gitは最初に ‘-G’ (print
     configuration)オプションを使用して構成済みのSSHコマンドを呼び出し、
     その後、(成功した場合、)OpenSSHオプションを使用するか、(失敗した場
     合、)hostおよびremoteコマンド以外のオプションを使用しないことで、
     OpenSSHオプションのサポートを検出しようとします。

     構成変数 ‘ssh.variant’ は、この検出をオーバーライドするように設定で
     きます。有効な値は、 ‘ssh’ (OpenSSHオプションを使用する場合)、
     ‘plink’ 、 ‘putty’ 、 ‘tortoiseplink’ 、 ‘simple’ (hostおよび
     remoteコマンド以外のオプションを持っていません)、です。 デフォルト
     の自動検出は、値 ‘auto’ を使用して明示的に要求できます。また、これ
     以外の値は ‘ssh’ として扱われます。この設定は、環境変数
     ‘GIT_SSH_VARIANT’ を介してオーバーライドすることもできます。

     各派生で使用されている現在のコマンドラインパラメータは以下のとおり
     です:

        • ‘ssh’ - [-p port] [-4] [-6] [-o option] [username@]host
          command

        • ‘simple’ - [username@]host command

        • ‘plink’ or ‘putty’ - [-P port] [-4] [-6] [username@]host
          command

        • ‘tortoiseplink’ - [-P port] [-4] [-6] -batch [username@]host
          command

     ‘simple’ 派生を除き、コマンドラインパラメータはgitが新しい機能を取
     得するにつれて変更される可能性があります。

status.relativePaths
     By default, git-status(1) shows paths relative to the current
     directory.  Setting this variable to ‘false’ shows paths relative
     to the repository root (this was the default for Git prior to
     v1.5.4).

status.short
     Set to true to enable –short by default in git-status(1).  The
     option –no-short takes precedence over this variable.

status.branch
     Set to true to enable –branch by default in git-status(1).  The
     option –no-branch takes precedence over this variable.

status.aheadBehind
     Set to true to enable ‘--ahead-behind’ and false to enable
     ‘--no-ahead-behind’ by default in git-status(1) for non-porcelain
     status formats.  Defaults to true.

status.displayCommentPrefix
     If set to true, git-status(1) will insert a comment prefix before
     each output line (starting with ‘core.commentChar’, i.e.  ‘#’ by
     default).  This was the behavior of git-status(1) in Git 1.8.4 and
     previous.  Defaults to false.

status.renameLimit
     The number of files to consider when performing rename detection in
     git-status(1) and git-commit(1).  Defaults to the value of
     diff.renameLimit.

status.renames
     Whether and how Git detects renames in git-status(1) and
     git-commit(1) .  If set to "false", rename detection is disabled.
     If set to "true", basic rename detection is enabled.  If set to
     "copies" or "copy", Git will detect copies, as well.  Defaults to
     the value of diff.renames.

status.showStash
     If set to true, git-status(1) will display the number of entries
     currently stashed away.  Defaults to false.

status.showUntrackedFiles
     By default, git-status(1) and git-commit(1) show files which are
     not currently tracked by Git.  Directories which contain only
     untracked files, are shown with the directory name only.  Showing
     untracked files means that Git needs to lstat() all the files in
     the whole repository, which might be slow on some systems.  So,
     this variable controls how the commands displays the untracked
     files.  Possible values are:

        • ‘no’ - Show no untracked files.

        • ‘normal’ - Show untracked files and directories.

        • ‘all’ - Show also individual files in untracked directories.

     If this variable is not specified, it defaults to _normal_.  This
     variable can be overridden with the -u|–untracked-files option of
     git-status(1) and git-commit(1).

status.submoduleSummary
     Defaults to false.  If this is set to a non zero number or true
     (identical to -1 or an unlimited number), the submodule summary
     will be enabled and a summary of commits for modified submodules
     will be shown (see –summary-limit option of git-submodule(1)).
     Please note that the summary output command will be suppressed for
     all submodules when ‘diff.ignoreSubmodules’ is set to _all_ or only
     for those submodules where ‘submodule.<name>.ignore=all’.  The only
     exception to that rule is that status and commit will show staged
     submodule changes.  To also view the summary for ignored submodules
     you can either use the –ignore-submodules=dirty command-line option
     or the _git submodule summary_ command, which shows a similar
     output but does not honor these settings.

stash.useBuiltin
     Unused configuration variable.  Used in Git versions 2.22 to 2.26
     as an escape hatch to enable the legacy shellscript implementation
     of stash.  Now the built-in rewrite of it in C is always used.
     Setting this will emit a warning, to alert any remaining users that
     setting this now does nothing.

stash.showIncludeUntracked
     If this is set to true, the ‘git stash show’ command will show the
     untracked files of a stash entry.  Defaults to false.  See
     description of _show_ command in git-stash(1).

stash.showPatch
     If this is set to true, the ‘git stash show’ command without an
     option will show the stash entry in patch form.  Defaults to false.
     See description of _show_ command in git-stash(1).

stash.showStat
     If this is set to true, the ‘git stash show’ command without an
     option will show diffstat of the stash entry.  Defaults to true.
     See description of _show_ command in git-stash(1).

submodule.<name>.url
     The URL for a submodule.  This variable is copied from the
     .gitmodules file to the git config via _git submodule init_.  The
     user can change the configured URL before obtaining the submodule
     via _git submodule update_.  If neither submodule.<name>.active or
     submodule.active are set, the presence of this variable is used as
     a fallback to indicate whether the submodule is of interest to git
     commands.  See git-submodule(1) and gitmodules(5) for details.

submodule.<name>.update
     The method by which a submodule is updated by _git submodule
     update_, which is the only affected command, others such as _git
     checkout –recurse-submodules_ are unaffected.  It exists for
     historical reasons, when _git submodule_ was the only command to
     interact with submodules; settings like ‘submodule.active’ and
     ‘pull.rebase’ are more specific.  It is populated by ‘git submodule
     init’ from the gitmodules(5) file.  See description of _update_
     command in git-submodule(1).

submodule.<name>.branch
     The remote branch name for a submodule, used by ‘git submodule
     update --remote’.  Set this option to override the value found in
     the ‘.gitmodules’ file.  See git-submodule(1) and gitmodules(5) for
     details.

submodule.<name>.fetchRecurseSubmodules
     This option can be used to control recursive fetching of this
     submodule.  It can be overridden by using the
     –[no-]recurse-submodules command-line option to "git fetch" and
     "git pull".  This setting will override that from in the
     gitmodules(5) file.

submodule.<name>.ignore
     Defines under what circumstances "git status" and the diff family
     show a submodule as modified.  When set to "all", it will never be
     considered modified (but it will nonetheless show up in the output
     of status and commit when it has been staged), "dirty" will ignore
     all changes to the submodules work tree and takes only differences
     between the HEAD of the submodule and the commit recorded in the
     superproject into account.  "untracked" will additionally let
     submodules with modified tracked files in their work tree show up.
     Using "none" (the default when this option is not set) also shows
     submodules that have untracked files in their work tree as changed.
     This setting overrides any setting made in .gitmodules for this
     submodule, both settings can be overridden on the command line by
     using the "–ignore-submodules" option.  The _git submodule_
     commands are not affected by this setting.

submodule.<name>.active
     Boolean value indicating if the submodule is of interest to git
     commands.  This config option takes precedence over the
     submodule.active config option.  See gitsubmodules(7) for details.

submodule.active
     A repeated field which contains a pathspec used to match against a
     submodule’s path to determine if the submodule is of interest to
     git commands.  See gitsubmodules(7) for details.

submodule.recurse
     A boolean indicating if commands should enable the
     ‘--recurse-submodules’ option by default.  Applies to all commands
     that support this option (‘checkout’, ‘fetch’, ‘grep’, ‘pull’,
     ‘push’, ‘read-tree’, ‘reset’, ‘restore’ and ‘switch’) except
     ‘clone’ and ‘ls-files’.  Defaults to false.  When set to true, it
     can be deactivated via the ‘--no-recurse-submodules’ option.  Note
     that some Git commands lacking this option may call some of the
     above commands affected by ‘submodule.recurse’; for instance ‘git
     remote update’ will call ‘git fetch’ but does not have a
     ‘--no-recurse-submodules’ option.  For these commands a workaround
     is to temporarily change the configuration value by using ‘git -c
     submodule.recurse=0’.

submodule.fetchJobs
     Specifies how many submodules are fetched/cloned at the same time.
     A positive integer allows up to that number of submodules fetched
     in parallel.  A value of 0 will give some reasonable default.  If
     unset, it defaults to 1.

submodule.alternateLocation
     Specifies how the submodules obtain alternates when submodules are
     cloned.  Possible values are ‘no’, ‘superproject’.  By default ‘no’
     is assumed, which doesn’t add references.  When the value is set to
     ‘superproject’ the submodule to be cloned computes its alternates
     location relative to the superprojects alternate.

submodule.alternateErrorStrategy
     Specifies how to treat errors with the alternates for a submodule
     as computed via ‘submodule.alternateLocation’.  Possible values are
     ‘ignore’, ‘info’, ‘die’.  Default is ‘die’.  Note that if set to
     ‘ignore’ or ‘info’, and if there is an error with the computed
     alternate, the clone proceeds as if no alternate was specified.

tag.forceSignAnnotated
     A boolean to specify whether annotated tags created should be GPG
     signed.  If ‘--annotate’ is specified on the command line, it takes
     precedence over this option.

tag.sort
     This variable controls the sort ordering of tags when displayed by
     git-tag(1).  Without the "–sort=<value>" option provided, the value
     of this variable will be used as the default.

tag.gpgSign
     A boolean to specify whether all tags should be GPG signed.  Use of
     this option when running in an automated script can result in a
     large number of tags being signed.  It is therefore convenient to
     use an agent to avoid typing your gpg passphrase several times.
     Note that this option doesn’t affect tag signing behavior enabled
     by "-u <keyid>" or "–local-user=<keyid>" options.

tar.umask
     この変数は、tarアーカイブエントリの許可ビットを制限するために使用で
     きます。デフォルトは0002で、ワールド書き込みビット(world write
     bit)をオフにします。 特別な値 "user" は、アーカイブユーザーの
     umaskが代わりに使用されることを示します。 umask(2) および
     git-archive(1) を参照してください。

   Trace2 config settings are only read from the system and global
config files; repository local and worktree config files and ‘-c’
command line arguments are not respected.

trace2.normalTarget
     This variable controls the normal target destination.  It may be
     overridden by the ‘GIT_TRACE2’ environment variable.  The following
     table shows possible values.

trace2.perfTarget
     This variable controls the performance target destination.  It may
     be overridden by the ‘GIT_TRACE2_PERF’ environment variable.  The
     following table shows possible values.

trace2.eventTarget
     This variable controls the event target destination.  It may be
     overridden by the ‘GIT_TRACE2_EVENT’ environment variable.  The
     following table shows possible values.

        • ‘0’ or ‘false’ - ターゲットを無効にします。

        • ‘1’ or ‘true’ - ‘STDERR’ に書き出します。

        • ‘[2-9]’ - すでに開いているファイル・デスクリプターに書き出しま
          す。

        • ‘<absolute-pathname>’ - appendモードでファイルに書き込みます。
          ターゲットがすでに存在し、ディレクトリである場合、トレースは指
          定のディレクトリの下のファイル(プロセスごとに1つ)に書き込まれ
          ます。

        • ‘af_unix:[<socket_type>:]<absolute-pathname>’ - Unixドメインソ
          ケットに書き出します(それらをサポートするプラットフォーム上で
          あれば)。ソケットタイプは ‘stream’ または ‘dgram’ のいずれかで
          す。省略した場合、Gitは両方を試します。

trace2.normalBrief
     Boolean.  When true ‘time’, ‘filename’, and ‘line’ fields are
     omitted from normal output.  May be overridden by the
     ‘GIT_TRACE2_BRIEF’ environment variable.  Defaults to false.

trace2.perfBrief
     Boolean.  When true ‘time’, ‘filename’, and ‘line’ fields are
     omitted from PERF output.  May be overridden by the
     ‘GIT_TRACE2_PERF_BRIEF’ environment variable.  Defaults to false.

trace2.eventBrief
     Boolean.  When true ‘time’, ‘filename’, and ‘line’ fields are
     omitted from event output.  May be overridden by the
     ‘GIT_TRACE2_EVENT_BRIEF’ environment variable.  Defaults to false.

trace2.eventNesting
     Integer.  Specifies desired depth of nested regions in the event
     output.  Regions deeper than this value will be omitted.  May be
     overridden by the ‘GIT_TRACE2_EVENT_NESTING’ environment variable.
     Defaults to 2.

trace2.configParams
     A comma-separated list of patterns of "important" config settings
     that should be recorded in the trace2 output.  For example,
     ‘core.*,remote.*.url’ would cause the trace2 output to contain
     events listing each configured remote.  May be overridden by the
     ‘GIT_TRACE2_CONFIG_PARAMS’ environment variable.  Unset by default.

trace2.envVars
     A comma-separated list of "important" environment variables that
     should be recorded in the trace2 output.  For example,
     ‘GIT_HTTP_USER_AGENT,GIT_CONFIG’ would cause the trace2 output to
     contain events listing the overrides for HTTP user agent and the
     location of the Git configuration file (assuming any are set).  May
     be overridden by the ‘GIT_TRACE2_ENV_VARS’ environment variable.
     Unset by default.

trace2.destinationDebug
     Boolean.  When true Git will print error messages when a trace
     target destination cannot be opened for writing.  By default, these
     errors are suppressed and tracing is silently disabled.  May be
     overridden by the ‘GIT_TRACE2_DST_DEBUG’ environment variable.

trace2.maxFiles
     Integer.  When writing trace files to a target directory, do not
     write additional traces if we would exceed this many files.
     Instead, write a sentinel file that will block further tracing to
     this directory.  Defaults to 0, which disables this check.

transfer.fsckObjects
     When ‘fetch.fsckObjects’ or ‘receive.fsckObjects’ are not set, the
     value of this variable is used instead.  Defaults to false.

     When set, the fetch or receive will abort in the case of a
     malformed object or a link to a nonexistent object.  In addition,
     various other issues are checked for, including legacy issues (see
     ‘fsck.<msg-id>’), and potential security issues like the existence
     of a ‘.GIT’ directory or a malicious ‘.gitmodules’ file (see the
     release notes for v2.2.1 and v2.17.1 for details).  Other sanity
     and security checks may be added in future releases.

     On the receiving side, failing fsckObjects will make those objects
     unreachable, see "QUARANTINE ENVIRONMENT" in git-receive-pack(1).
     On the fetch side, malformed objects will instead be left
     unreferenced in the repository.

     Due to the non-quarantine nature of the ‘fetch.fsckObjects’
     implementation it cannot be relied upon to leave the object store
     clean like ‘receive.fsckObjects’ can.

     As objects are unpacked they’re written to the object store, so
     there can be cases where malicious objects get introduced even
     though the "fetch" failed, only to have a subsequent "fetch"
     succeed because only new incoming objects are checked, not those
     that have already been written to the object store.  That
     difference in behavior should not be relied upon.  In the future,
     such objects may be quarantined for "fetch" as well.

     For now, the paranoid need to find some way to emulate the
     quarantine environment if they’d like the same protection as
     "push".  E.g.  in the case of an internal mirror do the mirroring
     in two steps, one to fetch the untrusted objects, and then do a
     second "push" (which will use the quarantine) to another internal
     repo, and have internal clients consume this pushed-to repository,
     or embargo internal fetches and only allow them once a full "fsck"
     has run (and no new fetches have happened in the meantime).

transfer.hideRefs
     String(s) ‘receive-pack’ and ‘upload-pack’ use to decide which refs
     to omit from their initial advertisements.  Use more than one
     definition to specify multiple prefix strings.  A ref that is under
     the hierarchies listed in the value of this variable is excluded,
     and is hidden when responding to ‘git push’ or ‘git fetch’.  See
     ‘receive.hideRefs’ and ‘uploadpack.hideRefs’ for program-specific
     versions of this config.

     You may also include a ‘!’ in front of the ref name to negate the
     entry, explicitly exposing it, even if an earlier entry marked it
     as hidden.  If you have multiple hideRefs values, later entries
     override earlier ones (and entries in more-specific config files
     override less-specific ones).

     If a namespace is in use, the namespace prefix is stripped from
     each reference before it is matched against ‘transfer.hiderefs’
     patterns.  In order to match refs before stripping, add a ‘^’ in
     front of the ref name.  If you combine ‘!’ and ‘^’, ‘!’ must be
     specified first.

     For example, if ‘refs/heads/master’ is specified in
     ‘transfer.hideRefs’ and the current namespace is ‘foo’, then
     ‘refs/namespaces/foo/refs/heads/master’ is omitted from the
     advertisements.  If ‘uploadpack.allowRefInWant’ is set,
     ‘upload-pack’ will treat ‘want-ref refs/heads/master’ in a protocol
     v2 ‘fetch’ command as if ‘refs/namespaces/foo/refs/heads/master’
     did not exist.  ‘receive-pack’, on the other hand, will still
     advertise the object id the ref is pointing to without mentioning
     its name (a so-called ".have" line).

     Even if you hide refs, a client may still be able to steal the
     target objects via the techniques described in the "SECURITY"
     section of the gitnamespaces(7) man page; it’s best to keep private
     data in a separate repository.

transfer.unpackLimit
     When ‘fetch.unpackLimit’ or ‘receive.unpackLimit’ are not set, the
     value of this variable is used instead.  The default value is 100.

transfer.advertiseSID
     Boolean.  When true, client and server processes will advertise
     their unique session IDs to their remote counterpart.  Defaults to
     false.

uploadarchive.allowUnreachable
     trueの場合、クライアントが ‘git archive --remote’ を使用して、ref先
     端から到達可能かどうかに関係なく、任意のツリーを要求できるようにし
     ます。詳細については、 git-upload-archive(1)の「SECURITY」セクショ
     ンの説明を参照してください。デフォルトは ‘false’ です。

uploadpack.hideRefs
     This variable is the same as ‘transfer.hideRefs’, but applies only
     to ‘upload-pack’ (and so affects only fetches, not pushes).  An
     attempt to fetch a hidden ref by ‘git fetch’ will fail.  See also
     ‘uploadpack.allowTipSHA1InWant’.

uploadpack.allowTipSHA1InWant
     When ‘uploadpack.hideRefs’ is in effect, allow ‘upload-pack’ to
     accept a fetch request that asks for an object at the tip of a
     hidden ref (by default, such a request is rejected).  See also
     ‘uploadpack.hideRefs’.  Even if this is false, a client may be able
     to steal objects via the techniques described in the "SECURITY"
     section of the gitnamespaces(7) man page; it’s best to keep private
     data in a separate repository.

uploadpack.allowReachableSHA1InWant
     Allow ‘upload-pack’ to accept a fetch request that asks for an
     object that is reachable from any ref tip.  However, note that
     calculating object reachability is computationally expensive.
     Defaults to ‘false’.  Even if this is false, a client may be able
     to steal objects via the techniques described in the "SECURITY"
     section of the gitnamespaces(7) man page; it’s best to keep private
     data in a separate repository.

uploadpack.allowAnySHA1InWant
     Allow ‘upload-pack’ to accept a fetch request that asks for any
     object at all.  Defaults to ‘false’.

uploadpack.keepAlive
     When ‘upload-pack’ has started ‘pack-objects’, there may be a quiet
     period while ‘pack-objects’ prepares the pack.  Normally it would
     output progress information, but if ‘--quiet’ was used for the
     fetch, ‘pack-objects’ will output nothing at all until the pack
     data begins.  Some clients and networks may consider the server to
     be hung and give up.  Setting this option instructs ‘upload-pack’
     to send an empty keepalive packet every ‘uploadpack.keepAlive’
     seconds.  Setting this option to 0 disables keepalive packets
     entirely.  The default is 5 seconds.

uploadpack.packObjectsHook
     If this option is set, when ‘upload-pack’ would run ‘git
     pack-objects’ to create a packfile for a client, it will run this
     shell command instead.  The ‘pack-objects’ command and arguments it
     _would_ have run (including the ‘git pack-objects’ at the
     beginning) are appended to the shell command.  The stdin and stdout
     of the hook are treated as if ‘pack-objects’ itself was run.  I.e.,
     ‘upload-pack’ will feed input intended for ‘pack-objects’ to the
     hook, and expects a completed packfile on stdout.

     Note that this configuration variable is ignored if it is seen in
     the repository-level config (this is a safety measure against
     fetching from untrusted repositories).

uploadpack.allowFilter
     If this option is set, ‘upload-pack’ will support partial clone and
     partial fetch object filtering.

uploadpackfilter.allow
     Provides a default value for unspecified object filters (see: the
     below configuration variable).  If set to ‘true’, this will also
     enable all filters which get added in the future.  Defaults to
     ‘true’.

uploadpackfilter.<filter>.allow
     Explicitly allow or ban the object filter corresponding to
     ‘<filter>’, where ‘<filter>’ may be one of: ‘blob:none’,
     ‘blob:limit’, ‘object:type’, ‘tree’, ‘sparse:oid’, or ‘combine’.
     If using combined filters, both ‘combine’ and all of the nested
     filter kinds must be allowed.  Defaults to
     ‘uploadpackfilter.allow’.

uploadpackfilter.tree.maxDepth
     Only allow ‘--filter=tree:<n>’ when ‘<n>’ is no more than the value
     of ‘uploadpackfilter.tree.maxDepth’.  If set, this also implies
     ‘uploadpackfilter.tree.allow=true’, unless this configuration
     variable had already been set.  Has no effect if unset.

uploadpack.allowRefInWant
     If this option is set, ‘upload-pack’ will support the ‘ref-in-want’
     feature of the protocol version 2 ‘fetch’ command.  This feature is
     intended for the benefit of load-balanced servers which may not
     have the same view of what OIDs their refs point to due to
     replication delay.

url.<base>.insteadOf
     Any URL that starts with this value will be rewritten to start,
     instead, with <base>.  In cases where some site serves a large
     number of repositories, and serves them with multiple access
     methods, and some users need to use different access methods, this
     feature allows people to specify any of the equivalent URLs and
     have Git automatically rewrite the URL to the best alternative for
     the particular user, even for a never-before-seen repository on the
     site.  When more than one insteadOf strings match a given URL, the
     longest match is used.

     Note that any protocol restrictions will be applied to the
     rewritten URL. If the rewrite changes the URL to use a custom
     protocol or remote helper, you may need to adjust the
     ‘protocol.*.allow’ config to permit the request.  In particular,
     protocols you expect to use for submodules must be set to ‘always’
     rather than the default of ‘user’.  See the description of
     ‘protocol.allow’ above.

url.<base>.pushInsteadOf
     Any URL that starts with this value will not be pushed to; instead,
     it will be rewritten to start with <base>, and the resulting URL
     will be pushed to.  In cases where some site serves a large number
     of repositories, and serves them with multiple access methods, some
     of which do not allow push, this feature allows people to specify a
     pull-only URL and have Git automatically use an appropriate URL to
     push, even for a never-before-seen repository on the site.  When
     more than one pushInsteadOf strings match a given URL, the longest
     match is used.  If a remote has an explicit pushurl, Git will
     ignore this setting for that remote.

user.name
user.email
author.name
author.email
committer.name
committer.email
     The ‘user.name’ and ‘user.email’ variables determine what ends up
     in the ‘author’ and ‘committer’ field of commit objects.  If you
     need the ‘author’ or ‘committer’ to be different, the
     ‘author.name’, ‘author.email’, ‘committer.name’ or
     ‘committer.email’ variables can be set.  Also, all of these can be
     overridden by the ‘GIT_AUTHOR_NAME’, ‘GIT_AUTHOR_EMAIL’,
     ‘GIT_COMMITTER_NAME’, ‘GIT_COMMITTER_EMAIL’ and ‘EMAIL’ environment
     variables.

     Note that the ‘name’ forms of these variables conventionally refer
     to some form of a personal name.  See git-commit(1) and the
     environment variables section of git(1) for more information on
     these settings and the ‘credential.username’ option if you’re
     looking for authentication credentials instead.

user.useConfigOnly
     Instruct Git to avoid trying to guess defaults for ‘user.email’ and
     ‘user.name’, and instead retrieve the values only from the
     configuration.  For example, if you have multiple email addresses
     and would like to use a different one for each repository, then
     with this configuration option set to ‘true’ in the global config
     along with a name, Git will prompt you to set up an email before
     making new commits in a newly cloned repository.  Defaults to
     ‘false’.

user.signingKey
     If git-tag(1) or git-commit(1) is not selecting the key you want it
     to automatically when creating a signed tag or commit, you can
     override the default selection with this variable.  This option is
     passed unchanged to gpg’s –local-user parameter, so you may specify
     a key using any method that gpg supports.

versionsort.prereleaseSuffix (deprecated)
     Deprecated alias for ‘versionsort.suffix’.  Ignored if
     ‘versionsort.suffix’ is set.

versionsort.suffix
     Even when version sort is used in git-tag(1), tagnames with the
     same base version but different suffixes are still sorted
     lexicographically, resulting e.g.  in prerelease tags appearing
     after the main release (e.g.  "1.0-rc1" after "1.0").  This
     variable can be specified to determine the sorting order of tags
     with different suffixes.

     By specifying a single suffix in this variable, any tagname
     containing that suffix will appear before the corresponding main
     release.  E.g.  if the variable is set to "-rc", then all "1.0-rcX"
     tags will appear before "1.0".  If specified multiple times, once
     per suffix, then the order of suffixes in the configuration will
     determine the sorting order of tagnames with those suffixes.  E.g.
     if "-pre" appears before "-rc" in the configuration, then all
     "1.0-preX" tags will be listed before any "1.0-rcX" tags.  The
     placement of the main release tag relative to tags with various
     suffixes can be determined by specifying the empty suffix among
     those other suffixes.  E.g.  if the suffixes "-rc", "", "-ck" and
     "-bfs" appear in the configuration in this order, then all
     "v4.8-rcX" tags are listed first, followed by "v4.8", then
     "v4.8-ckX" and finally "v4.8-bfsX".

     If more than one suffixes match the same tagname, then that tagname
     will be sorted according to the suffix which starts at the earliest
     position in the tagname.  If more than one different matching
     suffixes start at that earliest position, then that tagname will be
     sorted according to the longest of those suffixes.  The sorting
     order between different suffixes is undefined if they are in
     multiple config files.

web.browser
     一部のコマンドで使用できるWebブラウザを指定します。 現在、
     git-instaweb(1) と git-help(1) のみが使用できます。

worktree.guessRemote
     If no branch is specified and neither ‘-b’ nor ‘-B’ nor ‘--detach’
     is used, then ‘git worktree add’ defaults to creating a new branch
     from HEAD. If ‘worktree.guessRemote’ is set to true, ‘worktree add’
     tries to find a remote-tracking branch whose name uniquely matches
     the new branch name.  If such a branch exists, it is checked out
     and set as "upstream" for the new branch.  If no such match can be
     found, it falls back to creating a new branch from the current
     HEAD.


BUGS
****

非推奨の ‘[section.subsection]’ 構文を使用する場合、サブセクションに少な
くとも1つの大文字が指定されていると、値を変更すると、変更ではなく複数行
のキーが追加されます。たとえば、設定が以下のようになっている場合

       [section.subsection]
         key = value1

   ‘git config section.Subsection.key value2’ を実行すると、以下のように
なります。

       [section.subsection]
         key = value1
         key = value2


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-count-objects,  Up: Top

Name
****

git-count-objects — パックされていない(unpack)オブジェクトの数とそのディ
スク消費量を計量します


Synopsis
********

     git count-objects [-v] [-H | –human-readable]


DESCRIPTION
***********

これは、パックされていないオブジェクトファイルの数とそれらによって消費さ
れたディスク領域を計量し、再パックするのに適した時期を判断するのに役立ち
ます。


OPTIONS
*******

‘-v’
‘--verbose’
     より詳細な報告:

     count: 緩いオブジェクト(loose objects;ファイルごとに１つのオブジェ
     クトな形式)の数

     size: 緩いオブジェクトによって消費される、KiB単位のディスク容量(-H
     が指定されていない場合)

     in-pack: パック内にあるオブジェクトの数

     size-pack: パック群によって消費される、KiB単位のディスク容量(-Hが指
     定されていない場合)

     prune-packable: パック内にも同じものが存在する緩いオブジェクトの数
     。これらの緩いオブジェクトは、‘git prune-packed’ を使用して剪定する
     (prune)事ができます。

     garbage: オブジェクトデータベース内の、有効な緩いオブジェクトでも有
     効なパックでもないファイルの数

     size-garbage: garbageファイルによって消費されるKiB単位のディスク容
     量(-Hが指定されていない場合)

     alternate: 代替オブジェクトデータベース群の絶対パス。パスごとに1行
     ずつ、複数回表示される場合があります。パスに印刷不可能な文字が含ま
     れている場合は、二重引用符で囲まれ、C言語スタイルのバックスラッシュ
     エスケープシーケンスが含まれている可能性があることに注意してくださ
     い。

‘-H’
‘--human-readable’
     人間に分かりやすい形式でサイズを出力する


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-credential-cache--daemon,  Up: Top

Name
****

git-credential-cache–daemon — ユーザーの資格情報を一時的にメモリに保存す
る


Synopsis
********

     git credential-cache—daemon [–debug] <socket>


DESCRIPTION
***********

     *Note*

     あなたが、このコマンドを手動で起動したくないなら、
     git-credential-cache(1) を使用すれば自動的に開始されます。

   このコマンドは、 ‘<socket>’ で指定されたUnixドメインソケットで
‘git-credential-cache’ クライアントをリッスンします。クライアントは、資
格情報を保存および取得できます。 各資格情報は、クライアントによって指定
されたタイムアウトまで保持されます。資格情報が保持されなくなると、デーモ
ンは終了します。

   ‘--debug’ オプションが指定されている場合、デーモンはstderrストリーム
を閉じず、クライアントのリッスンを開始した後でも、追加の診断を出力する場
合があります。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-credential-cache,  Up: Top

Name
****

git-credential-cache — パスワードを一時的にメモリに保存するヘルパー


Synopsis
********

     git config credential.helper 'cache [<options>]'


DESCRIPTION
***********

このコマンドは、将来のGitプログラムで使用するために認証情報
(credential)をメモリにキャッシュします。保存された認証情報はディスクに記
録されることはなく、設定可能なタイムアウト後にメモリから削除されます。キ
ャッシュはUnixドメインソケットを介してアクセスでき、ファイルシステムのア
クセス許可によって現在のユーザーに制限されます。

   あなたはこのコマンドを直接呼び出すことは無いでしょう。これは、Gitの他
の部分で認証情報ヘルパーとして使用されることを目的としています。
gitcredentials(7) または 以下の EXAMPLES を参照してください。


OPTIONS
*******

‘--timeout <seconds>’
     認証情報をキャッシュする秒数(デフォルト: 900)。

‘--socket <path>’
     ‘<path>’ を使用して、実行中のキャッシュデーモンに接続します(または
     、新しいキャッシュデーモンが開始されていない場合は開始します)。デフ
     ォルトは ‘$XDG_CACHE_HOME/git/credential/socket’ です
     (‘~/.git-credential-cache/’ が存在しない限り)。
     ‘~/.git-credential-cache/’ が存在する場合は、代わりに
     ‘~/.git-credential-cache/’ が使用されます。あなたのホームディレクト
     リがネットワークにマウントされたファイルシステム上にある場合は、こ
     れをローカルファイルシステムに変更する必要がある場合があります。あ
     なたは絶対パスを指定しなければなりません。


CONTROLLING THE DAEMON
**********************

あなたがデーモンを早期に終了させ、タイムアウトする前にキャッシュされたす
べての認証情報を忘れ去りたい場合は、「exit」アクションを発行できます:

     git credential-cache exit


EXAMPLES
********

このヘルパーの肝は、ユーザー名またはパスワードを入力する必要がある回数を
減らすことです。例えば:

     $ git config credential.helper cache
     $ git push http://example.com/repo.git
     Username: <type your username>
     Password: <type your password>

     [work for 5 more minutes]
     $ git push http://example.com/repo.git
     [your credentials are used automatically]

   credential.helper構成変数を介してオプションを提供できます(この例では
、キャッシュ時間が5分に短縮されます):

     $ git config credential.helper 'cache --timeout=300'


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-credential-store,  Up: Top

Name
****

git-credential-store — 資格情報をディスクに保存するヘルパー


Synopsis
********

     git config credential.helper 'store [<options>]'


DESCRIPTION
***********

     *Note*

     このヘルパーを使用すると、パスワードは暗号化されずにディスクに保存
     され、ファイルシステムのアクセス許可によってのみ保護されます。これ
     が許容できるセキュリティのトレードオフではない場合は
     git-credential-cache(1) を試すか、オペレーティングシステムが提供す
     る安全なストレージと統合するヘルパーを探してください。

   このコマンドは、将来に渡ってGitプログラムで使用できるように、資格情報
をディスクに無期限に保存します。

   このコマンドが直接呼び出されることはありません。これは、gitの他の部分
で資格情報ヘルパーとして使用されることを目的としています。以下の
EXAMPLESまたは gitcredentials(7) を参照してください。


OPTIONS
*******

‘--file=<path>’
     ‘<path>’ を使用して、資格情報を探してして保存します。ファイルには、
     システム上の他のユーザーがファイルを読み取れないようにファイルシス
     テムのアクセス許可が設定されますが、暗号化またはその他の方法で保護
     されることはありません。‘<path>’ 指定がない場合、資格情報は
     ‘~/.git-credentials’ と ‘$XDG_CONFIG_HOME/git/credentials’ から検索
     されます。そして、書き込みは、存在すれば ‘~/.git-credentials’ に書
     き込みますが、‘~/.git-credentials’ に書き込まなかった場合、存在すれ
     ば ‘$XDG_CONFIG_HOME/git/credentials’ に書き込みます。 *note
     FILES:: も参照してください。


FILES
*****

‘--file’ で明示的に設定されていない場合、git-credential-store が優先順位
に従って資格情報を検索する2つのファイルがあります:

~/.git-credentials
     ユーザー毎の資格情報ファイル。

$XDG_CONFIG_HOME/git/credentials
     2番目のユーザー毎の資格情報ファイル。 _$XDG_CONFIG_HOME_ が設定され
     ていないか空の場合、 ‘$HOME/.config/git/credentials’ が使用されます
     。 ‘~/.git-credentials’ に一致する資格情報がある場合、このファイル
     に保存されている資格情報は使用されません。このファイルがサポートさ
     れていない、古いバージョンのGitを使用することがある場合は、このファ
     イルを作成しないことをお勧めします。

   資格情報探索の場合、ファイルは上記の順序で読み取られ、最初に一致した
資格情報が、リストのさらに下のファイルで見つかった資格情報よりも優先され
ます。

   資格情報ストレージは、デフォルトでこのリストの順で最初に見つかった既
存のファイルに書き込みます。これらのファイルが存在しない場合は、
‘~/.git-credentials’ を作成して書き込みます。

   資格情報の消去を行うと、一致するすべての資格情報がすべてのファイルか
ら消去されます。


EXAMPLES
********

このヘルパーの要点は、ユーザー名またはパスワードを入力する必要がある回数
を減らすことです。 例えば:

     $ git config credential.helper store
     $ git push http://example.com/repo.git
     Username: <type your username>
     Password: <type your password>

     [several days later]
     $ git push http://example.com/repo.git
     [your credentials are used automatically]


STORAGE FORMAT
**************

‘.git-credentials’ ファイルはプレーンテキストで保存されます。各資格情報
は、以下のようなURLとしてそれぞれ独自の行に保存されます:

     https://user:pass@example.com

   他の種類の行(空の行やコメント行など)は、一部が黙って無視される場合で
も、ファイル内では許可されません。エディタでファイルを表示または編集しな
いでください。

   Gitが特定のURLコンテキストの認証を必要とする場合、credential-store は
そのコンテキストを、資格情報ファイルの各エントリと照合するパターンと見な
します。 protocolとhostnameと(すでに持っている場合)usernameが一致する場
合、パスワードはGitに返されます。詳細については、 gitcredentials(7) の 「
the discussion of configuration」を参照してください。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-credential,  Up: Top

Name
****

git-credential — ユーザー資格情報の取得と保存


Synopsis
********

     git credential <fill|approve|reject>


DESCRIPTION
***********

Gitには、システム固有のヘルパーから資格情報(credentials)を保存および取得
したり、ユーザーにユーザー名とパスワードの入力を求めたりするための内部イ
ンターフェイスがあります。 git-credentialコマンドは、Gitと同じ方法で資格
情報を取得、保存、または要求する可能性のあるスクリプトにこのインターフェ
イスを公開します。 このスクリプト可能なインターフェイスの設計は、内部
CAPIをモデル化しています。 概念の背景については、credential.hを参照して
ください。

   git-credentialは、コマンドラインで「action」オプション(‘fill’ または
‘approve’ または ‘reject’ のいずれか)を取り、stdinで資格情報の説明
(description)を読み取ります(INPUT/OUTPUT FORMAT (*note INPUT/OUTPUT
FORMAT::) を参照)

   アクションが ‘fill’ の場合、git-credentialは、構成ファイルを読み取る
か、構成された資格情報ヘルパーに連絡するか、ユーザーにプロンプトを表示す
ることにより、説明(description)に「username」および「password」属性を追
加しようとします。次に、資格情報の説明(description)のユーザー名とパスワ
ードの属性が、すでに提供されている属性とともにstdoutに出力されます。

   アクションが ‘approve’(承認)の場合、git-credentialは、構成された資格
情報ヘルパーに説明(description)を送信します。ヘルパーは、後で使用するた
めに資格情報を保存する場合があります。

   アクションが ‘reject’ の場合、git-credentialは設定された資格情報ヘル
パーに説明(description)を送信します。これにより、説明(description)に一致
する保存済みの資格情報が消去される場合があります。

   アクションが ‘approve’(承認)または ‘reject’(拒否)の場合、出力は生成さ
れません。


TYPICAL USE OF GIT CREDENTIAL
*****************************

git-credentialを使用するアプリケーションは、通常、以下の手順に従って
‘git credential’ を使用します:

  1. コンテキストに基づいて資格情報の説明(description)を生成します。

     たとえば、 ‘https://example.com/foo.git’ のパスワードが必要な場合は
     、以下の資格情報の説明(description)を生成できます(最後の空白行を忘
     れないでください。これは、アプリケーションがすべての情報の提供を終
     了したことを ‘git credential’ に通知します):

          protocol=https
          host=example.com
          path=foo.git

  2. この説明(description)のユーザー名とパスワードを提供するように
     git-credentialに依頼してください。 これは、 ‘git credential fill’ を
     実行し、ステップ(1)の説明(description)を標準入力に送ることで実行さ
     れます。完全な資格情報の説明(description)(資格情報自体、つまりログ
     インとパスワードを含む)は、以下のように標準出力へ生成されます。

          protocol=https
          host=example.com
          username=bob
          password=secr3t

     ほとんどの場合、これは入力で指定された属性が出力で繰り返されること
     を意味しますが、Gitは資格情報の説明(description)を変更する場合もあ
     ります。たとえば、プロトコルがHTTP(s)であり、
     ‘credential.useHttpPath’ がfalseの場合、 ‘path’ 属性を削除します。

     ‘git credential’ が既にパスワードを知っていた場合、この手順では、ユ
     ーザーが ‘password=secr3t’ を返す前に実際にこのパスワードを入力して
     いなかった可能性があります(ユーザーが代わりにキーチェーンのロックを
     解除するためにパスワードを入力したか、キーチェーンがすでにロック解
     除している場合はユーザーの操作が行われなかった可能性があります)。

  3. 資格情報を使用し(たとえば、手順(2)のユーザー名とパスワードを使用し
     てURLにアクセスします)、それが受け入れられるかどうかを確認します。

  4. パスワードの成功または失敗について報告します。資格情報によって操作
     が正常に完了することが許可された場合は、「approve」アクションでマー
     クを付けて、「git credential」に次の呼び出しで再利用するように指示
     できます。操作中に資格情報が拒否された場合は、「reject」アクション
     を使用して、 ‘git credential’ が次の呼び出しで新しいパスワードを要
     求するようにします。 いずれの場合も、 ‘git credential’ には、ステッ
     プ(2)で取得した資格情報の説明(description)(ステップ(1)で提供された
     ものも含まれます)を指定する必要があります。


INPUT/OUTPUT FORMAT
*******************

‘git credential’ は、標準入力/標準出力で(使用するアクションに応じて)資格
情報を読み取り および/また は書き込みます。この情報は、 ‘git credential’
がログイン情報(ホスト、プロトコル、パスなど)を取得するキー、または取得す
る実際の資格データ(ユーザー名/パスワード)のいずれかに対応できます。

   資格情報は、1行に1つの属性を持つ、名前付き属性のセットに分割されます
。 各属性は、キーと値のペアで指定され、 ‘=’ (等号)記号と、改行で続けます
。

   キーには、 ‘=’ または改行またはNUL以外の任意のバイトを含めることがで
きます。値には、改行またはNUL以外の任意のバイトを含めることができます。

   どちらの場合も、すべてのバイトはそのまま扱われます(つまり、クォートせ
ず、改行またはNULを含む値を送信することはできません)。属性のリストは、空
白行またはファイルの終わりで終了します。

   Gitは以下の属性を理解します:

‘protocol’
     資格情報が使用されるプロトコル(例: ‘https’)。

‘host’
     ネットワーク資格情報のリモートホスト名。これには、ポート番号が指定
     されている場合はそれも含まれます(例: ‘example.com:8088’)。

‘path’
     資格情報が使用されるパス。 たとえば、リモートhttpsリポジトリにアク
     セスする場合、これはサーバー上のリポジトリのパスになります。

‘username’
     私達が既に持っている(たとえば、URL、構成、ユーザー、または以前に実
     行したヘルパーから)場合、資格情報のユーザー名。

‘password’
     資格情報のパスワード(私達が保存を要求している場合)。

‘url’
     この特別な属性が ‘git credential’ によって読み取られると、値はURLと
     して解析され、その構成要素が読み取られたかのように扱われます(たとえ
     ば、 ‘url=https://example.com’ は ‘protocol=https’ と
     ‘host=example.com’ が提供されたかのように振る舞います)。これは、発
     信者がURL自体を解析することを回避するのに役立ちます。

     注意:プロトコルの指定は必須であり、そして、URLでホスト名が指定され
     ていない場合(たとえば "cert:///path/to/file")、資格情報には、値が空
     の文字列であるホスト名属性が含まれることに注意してください。

     URLから欠落しているコンポーネント(たとえば、上記の例にユーザー名が
     ないとか)は未設定のままになります。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-cvsexportcommit,  Up: Top

Name
****

git-cvsexportcommit — 単一のコミットをCVSチェックアウトにエクスポートし
ます


Synopsis
********

     git cvsexportcommit [-h] [-u] [-v] [-c] [-P] [-p] [-a] [-d cvsroot]
             [-w cvsworkdir] [-W] [-f] [-m msgprefix] [PARENTCOMMIT] COMMITID


DESCRIPTION
***********

コミットをGitからCVSチェックアウトにエクスポートし、Gitリポジトリから
CVSリポジトリへのパッチのマージを容易にします。

   ‘-w’ スイッチを使用してCVSチェックアウトの名前を指定するか、CVS作業コ
ピーのルートから実行します。後者の場合、GIT_DIRを定義する必要があります
。以下の例を参照してください。

   安全寄りに最大限振って、CVSチェックアウトでファイルが変更されておらず
、最新であることを確認したら、デフォルトでは自動コミットしません。

   バイナリファイルに影響するファイルの追加、削除、およびコミットをサポ
ートします。

   コミットがマージコミットの場合は、あなたは ‘git cvsexportcommit’ に
changesetの対象となる親を指定する必要があります。


OPTIONS
*******

‘-c’
     パッチが正常に適用された場合、自動的にコミットします。ハンクが適用
     されない場合、またはその他の問題が発生した場合、コミットされません
     。

‘-p’
     パッチを適用するときは、pedantic(衒学的)(paranoid;病的なほど疑り深
     い)にする。 ‘--fuzz=0’ でpatchを呼び出します。

‘-a’
     著者情報を追加します。作者行と(作成者と異なる場合)コミッターをメッ
     セージに追加します。

‘-d’
     使用する代替CVSROOTを設定します。これは、 ‘CVS -d’ パラメーターに対
     応します。 非対称的な方法でCVSを使用する場合を除いて、通常、ユーザ
     ーはこれを設定することは無いと思います。

‘-f’
     ファイルが最新でない場合でも、強制的にマージします。

‘-P’
     直接の親でなくても、親を強制的にコミットします。

‘-m’
     コミットメッセージの前に、指定のプレフィックスを付けます。パッチシ
     リーズなどに便利です。

‘-u’
     エクスポートを試みる前に、影響を受けるファイルをCVSリポジトリから更
     新してください。

‘-k’
     パッチを適用する前に、CVSチェックアウトの動作でCVSキーワード拡張を
     逆にします。 (例: $Revision: 1.2.3.4$ は $Revision$ になります)

‘-w’
     エクスポートに使用するCVSチェックアウトの場所を指定します。現在のデ
     ィレクトリがGitリポジトリ内にある場合、このオプションでは、実行前に
     GIT_DIRを設定する必要はありません。 デフォルトは
     ‘cvsexportcommit.cvsdir’ の値です。

‘-W’
     現在の作業ディレクトリがGitチェックアウトであるだけでなく、CVSチェ
     ックアウトでもあることをcvsexportcommitに伝えます。したがって、
     Gitは続行する前に作業ディレクトリを親コミットにリセットします。

‘-v’
     おしゃべりにします。


CONFIGURATION
*************

cvsexportcommit.cvsdir
     エクスポートに使用するCVSチェックアウトのデフォルトの場所。


EXAMPLES
********

1つのパッチをCVSにマージします
          $ export GIT_DIR=~/project/.git
          $ cd ~/project_cvs_checkout
          $ git cvsexportcommit -v <commit-sha1>
          $ cvs commit -F .msg <files>

1つのパッチをCVSにマージします( ‘-c’ および ‘-w’ オプション)。作業ディレクトリはGitリポジトリ内にあります
                  $ git cvsexportcommit -v -c -w ~/project_cvs_checkout <commit-sha1>

保留中のパッチをCVSに自動的にマージします — 自分が何をしているかを本当に知っている場合だけにしましょう。
          $ export GIT_DIR=~/project/.git
          $ cd ~/project_cvs_checkout
          $ git cherry cvshead myhead | sed -n 's/^+ //p' | xargs -l1 git cvsexportcommit -c -p -v


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-cvsimport,  Up: Top

Name
****

git-cvsimport — Salvage your data out of another SCM people love to hate


Synopsis
********

     git cvsimport [-o <branch-for-HEAD>] [-h] [-v] [-d <CVSROOT>]
                   [-A <author-conv-file>] [-p <options-for-cvsps>] [-P <file>]
                   [-C <git_repository>] [-z <fuzz>] [-i] [-k] [-u] [-s <subst>]
                   [-a] [-m] [-M <regex>] [-S <regex>] [-L <commitlimit>]
                   [-r <remote>] [-R] [<CVS_module>]


DESCRIPTION
***********

*WARNING:* ‘git cvsimport’ uses cvsps version 2, which is considered
deprecated; it does not work with cvsps version 3 and later.  If you are
performing a one-shot import of a CVS repository consider using cvs2git
(http://cvs2svn.tigris.org/cvs2git.html) or cvs-fast-export
(http://www.catb.org/esr/cvs-fast-export/).

   Imports a CVS repository into Git.  It will either create a new
repository, or incrementally import into an existing one.

   Splitting the CVS log into patch sets is done by _cvsps_.  At least
version 2.1 is required.

   *WARNING:* for certain situations the import leads to incorrect
results.  Please see the section ISSUES (*note ISSUES::) for further
reference.

   You should *never* do any work of your own on the branches that are
created by _git cvsimport_.  By default initial import will create and
populate a "master" branch from the CVS repository’s main branch which
you’re free to work with; after that, you need to _git merge_
incremental imports, or any CVS branches, yourself.  It is advisable to
specify a named remote via -r to separate and protect the incoming
branches.

   If you intend to set up a shared public repository that all
developers can read/write, or if you want to use git-cvsserver(1), then
you probably want to make a bare clone of the imported repository, and
use the clone as the shared repository.  See gitcvs-migration(7).


OPTIONS
*******

‘-v’
     Verbosity: let _cvsimport_ report what it is doing.

‘-d <CVSROOT>’
     The root of the CVS archive.  May be local (a simple path) or
     remote; currently, only the :local:, :ext: and :pserver: access
     methods are supported.  If not given, _git cvsimport_ will try to
     read it from ‘CVS/Root’.  If no such file exists, it checks for the
     ‘CVSROOT’ environment variable.

<CVS_module>
     The CVS module you want to import.  Relative to <CVSROOT>.  If not
     given, _git cvsimport_ tries to read it from ‘CVS/Repository’.

‘-C <target-dir>’
     The Git repository to import to.  If the directory doesn’t exist,
     it will be created.  Default is the current directory.

‘-r <remote>’
     The Git remote to import this CVS repository into.  Moves all CVS
     branches into remotes/<remote>/<branch> akin to the way _git clone_
     uses _origin_ by default.

‘-o <branch-for-HEAD>’
     When no remote is specified (via -r) the ‘HEAD’ branch from CVS is
     imported to the _origin_ branch within the Git repository, as
     ‘HEAD’ already has a special meaning for Git.  When a remote is
     specified the ‘HEAD’ branch is named remotes/<remote>/master
     mirroring _git clone_ behaviour.  Use this option if you want to
     import into a different branch.

     Use _-o master_ for continuing an import that was initially done by
     the old cvs2git tool.

‘-i’
     Import-only: don’t perform a checkout after importing.  This option
     ensures the working directory and index remain untouched and will
     not create them if they do not exist.

‘-k’
     Kill keywords: will extract files with _-kk_ from the CVS archive
     to avoid noisy changesets.  Highly recommended, but off by default
     to preserve compatibility with early imported trees.

‘-u’
     Convert underscores in tag and branch names to dots.

‘-s <subst>’
     Substitute the character "/" in branch names with <subst>

‘-p <options-for-cvsps>’
     Additional options for cvsps.  The options ‘-u’ and _-A_ are
     implicit and should not be used here.

     If you need to pass multiple options, separate them with a comma.

‘-z <fuzz>’
     Pass the timestamp fuzz factor to cvsps, in seconds.  If unset,
     cvsps defaults to 300s.

‘-P <cvsps-output-file>’
     Instead of calling cvsps, read the provided cvsps output file.
     Useful for debugging or when cvsps is being handled outside
     cvsimport.

‘-m’
     Attempt to detect merges based on the commit message.  This option
     will enable default regexes that try to capture the source branch
     name from the commit message.

‘-M <regex>’
     Attempt to detect merges based on the commit message with a custom
     regex.  It can be used with ‘-m’ to enable the default regexes as
     well.  You must escape forward slashes.

     The regex must capture the source branch name in $1.

     This option can be used several times to provide several detection
     regexes.

‘-S <regex>’
     Skip paths matching the regex.

‘-a’
     Import all commits, including recent ones.  cvsimport by default
     skips commits that have a timestamp less than 10 minutes ago.

‘-L <limit>’
     Limit the number of commits imported.  Workaround for cases where
     cvsimport leaks memory.

‘-A <author-conv-file>’
     CVS by default uses the Unix username when writing its commit logs.
     Using this option and an author-conv-file maps the name recorded in
     CVS to author name, e-mail and optional time zone:

                  exon=Andreas Ericsson <ae@op5.se>
                  spawn=Simon Pawn <spawn@frog-pond.org> America/Chicago

     _git cvsimport_ will make it appear as those authors had their
     GIT_AUTHOR_NAME and GIT_AUTHOR_EMAIL set properly all along.  If a
     time zone is specified, GIT_AUTHOR_DATE will have the corresponding
     offset applied.

     For convenience, this data is saved to ‘$GIT_DIR/cvs-authors’ each
     time the _-A_ option is provided and read from that same file each
     time _git cvsimport_ is run.

     It is not recommended to use this feature if you intend to export
     changes back to CVS again later with _git cvsexportcommit_.

‘-R’
     Generate a ‘$GIT_DIR/cvs-revisions’ file containing a mapping from
     CVS revision numbers to newly-created Git commit IDs.  The
     generated file will contain one line for each (filename, revision)
     pair imported; each line will look like

          src/widget.c 1.1 1d862f173cdc7325b6fa6d2ae1cfd61fd1b512b7

     The revision data is appended to the file if it already exists, for
     use when doing incremental imports.

     This option may be useful if you have CVS revision numbers stored
     in commit messages, bug-tracking systems, email archives, and the
     like.

‘-h’
     Print a short usage message and exit.


OUTPUT
******

If ‘-v’ is specified, the script reports what it is doing.

   Otherwise, success is indicated the Unix way, i.e.  by simply exiting
with a zero exit status.


ISSUES
******

Problems related to timestamps:

   • If timestamps of commits in the CVS repository are not stable
     enough to be used for ordering commits changes may show up in the
     wrong order.

   • If any files were ever "cvs import"ed more than once (e.g., import
     of more than one vendor release) the HEAD contains the wrong
     content.

   • If the timestamp order of different files cross the revision order
     within the commit matching time window the order of commits may be
     wrong.

   Problems related to branches:

   • Branches on which no commits have been made are not imported.

   • All files from the branching point are added to a branch even if
     never added in CVS.

   • This applies to files added to the source branch *after* a daughter
     branch was created: if previously no commit was made on the
     daughter branch they will erroneously be added to the daughter
     branch in git.

   Problems related to tags:

   • Multiple tags on the same revision are not imported.

   If you suspect that any of these issues may apply to the repository
you want to import, consider using cvs2git:

   • cvs2git (part of cvs2svn), ‘http://subversion.apache.org/’


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-cvsserver,  Up: Top

Name
****

git-cvsserver — A CVS server emulator for Git


Synopsis
********

SSH:

     export CVS_SERVER="git cvsserver"
     cvs -d :ext:user@server/path/repo.git co <HEAD_name>

   pserver (/etc/inetd.conf):

     cvspserver stream tcp nowait nobody /usr/bin/git-cvsserver git-cvsserver pserver

   Usage:

     git-cvsserver [<options>] [pserver|server] [<directory> …]


DESCRIPTION
***********

This application is a CVS emulation layer for Git.

   It is highly functional.  However, not all methods are implemented,
and for those methods that are implemented, not all switches are
implemented.

   Testing has been done using both the CLI CVS client, and the Eclipse
CVS plugin.  Most functionality works fine with both of these clients.


OPTIONS
*******

All these options obviously only make sense if enforced by the server
side.  They have been implemented to resemble the git-daemon(1) options
as closely as possible.

‘--base-path <path>’
     Prepend _path_ to requested CVSROOT

‘--strict-paths’
     Don’t allow recursing into subdirectories

‘--export-all’
     Don’t check for ‘gitcvs.enabled’ in config.  You also have to
     specify a list of allowed directories (see below) if you want to
     use this option.

‘-V’
‘--version’
     Print version information and exit

‘-h’
‘-H’
‘--help’
     Print usage information and exit

<directory>
     You can specify a list of allowed directories.  If no directories
     are given, all are allowed.  This is an additional restriction,
     gitcvs access still needs to be enabled by the ‘gitcvs.enabled’
     config option unless ‘--export-all’ was given, too.


LIMITATIONS
***********

CVS clients cannot tag, branch or perform Git merges.

   _git-cvsserver_ maps Git branches to CVS modules.  This is very
different from what most CVS users would expect since in CVS modules
usually represent one or more directories.


INSTALLATION
************

  1. If you are going to offer CVS access via pserver, add a line in
     /etc/inetd.conf like

             cvspserver stream tcp nowait nobody git-cvsserver pserver

     Note: Some inetd servers let you specify the name of the executable
     independently of the value of argv[0] (i.e.  the name the program
     assumes it was executed with).  In this case the correct line in
     /etc/inetd.conf looks like

             cvspserver stream tcp nowait nobody /usr/bin/git-cvsserver git-cvsserver pserver

     Only anonymous access is provided by pserve by default.  To commit
     you will have to create pserver accounts, simply add a
     gitcvs.authdb setting in the config file of the repositories you
     want the cvsserver to allow writes to, for example:

             [gitcvs]
                  authdb = /etc/cvsserver/passwd

     The format of these files is username followed by the encrypted
     password, for example:

             myuser:$1Oyx5r9mdGZ2
             myuser:$1$BA)@$vbnMJMDym7tA32AamXrm./

     You can use the _htpasswd_ facility that comes with Apache to make
     these files, but Apache’s MD5 crypt method differs from the one
     used by most C library’s crypt() function, so don’t use the -m
     option.

     Alternatively you can produce the password with perl’s crypt()
     operator:

             perl -e 'my ($user, $pass) = @ARGV; printf "%s:%s\n", $user, crypt($user, $pass)' $USER password

     Then provide your password via the pserver method, for example:

             cvs -d:pserver:someuser:somepassword <at> server/path/repo.git co <HEAD_name>

     No special setup is needed for SSH access, other than having Git
     tools in the PATH. If you have clients that do not accept the
     CVS_SERVER environment variable, you can rename _git-cvsserver_ to
     ‘cvs’.

     Note: Newer CVS versions (>= 1.12.11) also support specifying
     CVS_SERVER directly in CVSROOT like

          cvs -d ":ext;CVS_SERVER=git cvsserver:user@server/path/repo.git" co <HEAD_name>

     This has the advantage that it will be saved in your _CVS/Root_
     files and you don’t need to worry about always setting the correct
     environment variable.  SSH users restricted to _git-shell_ don’t
     need to override the default with CVS_SERVER (and shouldn’t) as
     _git-shell_ understands ‘cvs’ to mean _git-cvsserver_ and pretends
     that the other end runs the real _cvs_ better.

  2. For each repo that you want accessible from CVS you need to edit
     config in the repo and add the following section.

             [gitcvs]
                  enabled=1
                  # optional for debugging
                  logFile=/path/to/logfile

     Note: you need to ensure each user that is going to invoke
     _git-cvsserver_ has write access to the log file and to the
     database (see Database Backend (*note DATABASE BACKEND::).  If you
     want to offer write access over SSH, the users of course also need
     write access to the Git repository itself.

     You also need to ensure that each repository is "bare" (without a
     Git index file) for ‘cvs commit’ to work.  See gitcvs-migration(7).

     All configuration variables can also be overridden for a specific
     method of access.  Valid method names are "ext" (for SSH access)
     and "pserver".  The following example configuration would disable
     pserver access while still allowing access over SSH.

             [gitcvs]
                  enabled=0

             [gitcvs "ext"]
                  enabled=1

  3. If you didn’t specify the CVSROOT/CVS_SERVER directly in the
     checkout command, automatically saving it in your _CVS/Root_ files,
     then you need to set them explicitly in your environment.  CVSROOT
     should be set as per normal, but the directory should point at the
     appropriate Git repo.  As above, for SSH clients _not_ restricted
     to _git-shell_, CVS_SERVER should be set to _git-cvsserver_.

               export CVSROOT=:ext:user@server:/var/git/project.git
               export CVS_SERVER="git cvsserver"

  4. For SSH clients that will make commits, make sure their server-side
     .ssh/environment files (or .bashrc, etc., according to their
     specific shell) export appropriate values for GIT_AUTHOR_NAME,
     GIT_AUTHOR_EMAIL, GIT_COMMITTER_NAME, and GIT_COMMITTER_EMAIL. For
     SSH clients whose login shell is bash, .bashrc may be a reasonable
     alternative.

  5. Clients should now be able to check out the project.  Use the CVS
     _module_ name to indicate what Git _head_ you want to check out.
     This also sets the name of your newly checked-out directory, unless
     you tell it otherwise with ‘-d <dir_name>’.  For example, this
     checks out _master_ branch to the ‘project-master’ directory:

               cvs co -d project-master master


DATABASE BACKEND
****************

_git-cvsserver_ uses one database per Git head (i.e.  CVS module) to
store information about the repository to maintain consistent CVS
revision numbers.  The database needs to be updated (i.e.  written to)
after every commit.

   If the commit is done directly by using ‘git’ (as opposed to using
_git-cvsserver_) the update will need to happen on the next repository
access by _git-cvsserver_, independent of access method and requested
operation.

   That means that even if you offer only read access (e.g.  by using
the pserver method), _git-cvsserver_ should have write access to the
database to work reliably (otherwise you need to make sure that the
database is up to date any time _git-cvsserver_ is executed).

   By default it uses SQLite databases in the Git directory, named
‘gitcvs.<module_name>.sqlite’.  Note that the SQLite backend creates
temporary files in the same directory as the database file on write so
it might not be enough to grant the users using _git-cvsserver_ write
access to the database file without granting them write access to the
directory, too.

   The database cannot be reliably regenerated in a consistent form
after the branch it is tracking has changed.  Example: For merged
branches, _git-cvsserver_ only tracks one branch of development, and
after a _git merge_ an incrementally updated database may track a
different branch than a database regenerated from scratch, causing
inconsistent CVS revision numbers.  ‘git-cvsserver’ has no way of
knowing which branch it would have picked if it had been run
incrementally pre-merge.  So if you have to fully or partially (from old
backup) regenerate the database, you should be suspicious of
pre-existing CVS sandboxes.

   You can configure the database backend with the following
configuration variables:


Configuring database backend
============================

_git-cvsserver_ uses the Perl DBI module.  Please also read its
documentation if changing these variables, especially about
‘DBI->connect()’.

gitcvs.dbName
     Database name.  The exact meaning depends on the selected database
     driver, for SQLite this is a filename.  Supports variable
     substitution (see below).  May not contain semicolons (‘;’).
     Default: _%Ggitcvs.%m.sqlite_

gitcvs.dbDriver
     Used DBI driver.  You can specify any available driver for this
     here, but it might not work.  cvsserver is tested with
     _DBD::SQLite_, reported to work with _DBD::Pg_, and reported *not*
     to work with _DBD::mysql_.  Please regard this as an experimental
     feature.  May not contain colons (‘:’).  Default: _SQLite_

gitcvs.dbuser
     Database user.  Only useful if setting ‘dbDriver’, since SQLite has
     no concept of database users.  Supports variable substitution (see
     below).

gitcvs.dbPass
     Database password.  Only useful if setting ‘dbDriver’, since SQLite
     has no concept of database passwords.

gitcvs.dbTableNamePrefix
     Database table name prefix.  Supports variable substitution (see
     below).  Any non-alphabetic characters will be replaced with
     underscores.

   All variables can also be set per access method, see above (*note
configaccessmethod::).


Variable substitution
---------------------

In ‘dbDriver’ and ‘dbUser’ you can use the following variables:

%G
     Git directory name

%g
     Git directory name, where all characters except for alphanumeric
     ones, ‘.’, and ‘-’ are replaced with ‘_’ (this should make it
     easier to use the directory name in a filename if wanted)

%m
     CVS module/Git head name

%a
     access method (one of "ext" or "pserver")

%u
     Name of the user running _git-cvsserver_.  If no name can be
     determined, the numeric uid is used.


ENVIRONMENT
***********

These variables obviate the need for command-line options in some
circumstances, allowing easier restricted usage through git-shell.

   GIT_CVSSERVER_BASE_PATH takes the place of the argument to
–base-path.

   GIT_CVSSERVER_ROOT specifies a single-directory whitelist.  The
repository must still be configured to allow access through
git-cvsserver, as described above.

   When these environment variables are set, the corresponding
command-line arguments may not be used.


ECLIPSE CVS CLIENT NOTES
************************

To get a checkout with the Eclipse CVS client:

  1. Select "Create a new project → From CVS checkout"

  2. Create a new location.  See the notes below for details on how to
     choose the right protocol.

  3. Browse the _modules_ available.  It will give you a list of the
     heads in the repository.  You will not be able to browse the tree
     from there.  Only the heads.

  4. Pick ‘HEAD’ when it asks what branch/tag to check out.  Untick the
     "launch commit wizard" to avoid committing the .project file.

   Protocol notes: If you are using anonymous access via pserver, just
select that.  Those using SSH access should choose the _ext_ protocol,
and configure _ext_ access on the Preferences→Team→CVS→ExtConnection
pane.  Set CVS_SERVER to "‘git cvsserver’".  Note that password support
is not good when using _ext_, you will definitely want to have SSH keys
setup.

   Alternatively, you can just use the non-standard extssh protocol that
Eclipse offer.  In that case CVS_SERVER is ignored, and you will have to
replace the cvs utility on the server with _git-cvsserver_ or manipulate
your ‘.bashrc’ so that calling _cvs_ effectively calls _git-cvsserver_.


CLIENTS KNOWN TO WORK
*********************

   • CVS 1.12.9 on Debian

   • CVS 1.11.17 on MacOSX (from Fink package)

   • Eclipse 3.0, 3.1.2 on MacOSX (see Eclipse CVS Client Notes)

   • TortoiseCVS


OPERATIONS SUPPORTED
********************

All the operations required for normal use are supported, including
checkout, diff, status, update, log, add, remove, commit.

   Most CVS command arguments that read CVS tags or revision numbers
(typically -r) work, and also support any git refspec (tag, branch,
commit ID, etc).  However, CVS revision numbers for non-default branches
are not well emulated, and cvs log does not show tags or branches at
all.  (Non-main-branch CVS revision numbers superficially resemble CVS
revision numbers, but they actually encode a git commit ID directly,
rather than represent the number of revisions since the branch point.)

   Note that there are two ways to checkout a particular branch.  As
described elsewhere on this page, the "module" parameter of cvs checkout
is interpreted as a branch name, and it becomes the main branch.  It
remains the main branch for a given sandbox even if you temporarily make
another branch sticky with cvs update -r.  Alternatively, the -r
argument can indicate some other branch to actually checkout, even
though the module is still the "main" branch.  Tradeoffs (as currently
implemented): Each new "module" creates a new database on disk with a
history for the given module, and after the database is created,
operations against that main branch are fast.  Or alternatively, -r
doesn’t take any extra disk space, but may be significantly slower for
many operations, like cvs update.

   If you want to refer to a git refspec that has characters that are
not allowed by CVS, you have two options.  First, it may just work to
supply the git refspec directly to the appropriate CVS -r argument; some
CVS clients don’t seem to do much sanity checking of the argument.
Second, if that fails, you can use a special character escape mechanism
that only uses characters that are valid in CVS tags.  A sequence of 4
or 5 characters of the form (underscore (‘"_"’), dash (‘"-"’), one or
two characters, and dash (‘"-"’)) can encode various characters based on
the one or two letters: ‘"s"’ for slash (‘"/"’), ‘"p"’ for period
(‘"."’), ‘"u"’ for underscore (‘"_"’), or two hexadecimal digits for any
byte value at all (typically an ASCII number, or perhaps a part of a
UTF-8 encoded character).

   Legacy monitoring operations are not supported (edit, watch and
related).  Exports and tagging (tags and branches) are not supported at
this stage.


CRLF Line Ending Conversions
============================

By default the server leaves the ‘-k’ mode blank for all files, which
causes the CVS client to treat them as a text files, subject to
end-of-line conversion on some platforms.

   You can make the server use the end-of-line conversion attributes to
set the ‘-k’ modes for files by setting the ‘gitcvs.usecrlfattr’ config
variable.  See gitattributes(5) for more information about end-of-line
conversion.

   Alternatively, if ‘gitcvs.usecrlfattr’ config is not enabled or the
attributes do not allow automatic detection for a filename, then the
server uses the ‘gitcvs.allBinary’ config for the default setting.  If
‘gitcvs.allBinary’ is set, then file not otherwise specified will
default to _-kb_ mode.  Otherwise the ‘-k’ mode is left blank.  But if
‘gitcvs.allBinary’ is set to "guess", then the correct ‘-k’ mode will be
guessed based on the contents of the file.

   For best consistency with _cvs_, it is probably best to override the
defaults by setting ‘gitcvs.usecrlfattr’ to true, and ‘gitcvs.allBinary’
to "guess".


DEPENDENCIES
************

_git-cvsserver_ depends on DBD::SQLite.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-daemon,  Up: Top

Name
****

git-daemon — Gitリポジトリ用のほんまにシンプルなサーバー


Synopsis
********

     git daemon [–verbose] [–syslog] [–export-all]
                  [–timeout=<n>] [–init-timeout=<n>] [–max-connections=<n>]
                  [–strict-paths] [–base-path=<path>] [–base-path-relaxed]
                  [–user-path | –user-path=<path>]
                  [–interpolated-path=<pathtemplate>]
                  [–reuseaddr] [–detach] [–pid-file=<file>]
                  [–enable=<service>] [–disable=<service>]
                  [–allow-override=<service>] [–forbid-override=<service>]
                  [–access-hook=<path>] [–[no-]informative-errors]
                  [–inetd |
                   [–listen=<host_or_ipaddr>] [–port=<n>]
                   [–user=<user> [–group=<group>]]]
                  [–log-destination=(stderr|syslog|none)]
                  [<directory>…]


DESCRIPTION
***********

通常はポート「DEFAULT_GIT_PORT」(9418)でリッスンする非常に単純なTCP Gitデ
ーモン。サービスを要求する接続を待機し、有効になっている場合はそのサービ
スを提供します。

   ディレクトリにマジックファイル "git-daemon-export-ok" があることを確
認し、この方法でエクスポートのマークが明示されていないGitディレクトリの
エクスポートを拒否します(‘--export-all’ パラメーターが指定されていない場
合)。 いくつかのディレクトリパスを ‘git daemon’ の引数として渡すと、あな
たは提供するモノをそれらで構成されるホワイトリストにさらに制限できます。

   デフォルトでは、 ‘upload-pack’ サービスのみが有効になっており、 _git
fetch_ や _git pull_ や _git clone_ から呼び出される _git fetch-pack_ と
_git ls-remote_ クライアントにサービスを提供します。

   これは、読み取り専用の更新、つまりGitリポジトリからのプルに最適です。

   _git archive_ を提供するための ‘upload-archive’ もあります。


OPTIONS
*******

‘--strict-paths’
     パスを正確に一致させ(つまり、実際のパスが "/foo/repo.git" または
     "/foo/repo/.git" の場合は "/foo/repo" を許可しないでください)、そし
     てユーザー相対パスを許可しないでください。このオプションが有効で、
     かつ、ホワイトリストが指定されていない場合、 ‘git daemon’ は起動を
     拒否します。

‘--base-path=<path>’
     指定されたパスを基準にして、すべてのパス要求を再マップします。これ
     は一種の "Git root" です。example.comで ‘--base-path=/srv/git’ を伴
     って ‘git daemon’ を実行し、後で ‘git://example.com/hello.git’ をプ
     ルしようと試みると、 ‘git daemon’ はパスを ‘/srv/git/hello.git’ と
     して解釈します。

‘--base-path-relaxed’
     ‘--base-path’ が有効になっていて、リポジトリを探すのに失敗した場合
     、このオプションを使用すると、 ‘git daemon’ はベースパスを前に付け
     ずに探索を試みます。 これは、古いパスを許可したまま、 ‘--base-path’
     使用に切り替える場合に便利です。

‘--interpolated-path=<pathtemplate>’
     仮想ホスティングをサポートするために、補完されたパステンプレートを
     使用して、代替パスを動的に構築できます。テンプレートは、クライアン
     トから提供されたターゲットホスト名の %H をサポートしますが、すべて
     小文字に変換されます。正規ホスト名の場合は %CH、サーバーのIPアドレ
     スの場合は %IP、ポート番号の場合は %P、名前付きリポジトリの絶対パス
     の場合は %D です。補完後、パスはディレクトリホワイトリストに対して
     検証されます。

‘--export-all’
     _git-daemon-export-ok_ ファイルがない場合でも、Gitリポジトリのよう
     に見えるすべてのディレクトリ(_objects_ と _refs_ サブディレクトリが
     ある)からのプルを許可します。

‘--inetd’
     サーバーをinetdサービスとして実行します。‘--syslog’ の指定を含んで
     います(‘--log-destination=’ でオーバーライドされる場合があります)。
     ‘--detach’ 、 ‘--port’ 、 ‘--listen’ 、 ‘--user’ 、 ‘--group’ オプ
     ションとは互換性がありません。

‘--listen=<host_or_ipaddr>’
     特定のIPアドレスまたはホスト名でリッスンします。IPアドレスは、
     IPv4アドレス、またはサポートされている場合はIPv6アドレスのいずれか
     になります。IPv6がサポートされていない場合、 ‘--listen=hostname’ も
     サポートされていないため、 ‘--listen’ にはIPv4アドレスを指定する必
     要があります。このオプションは複数回与えることができます。
     ‘--inetd’ オプションと互換性がありません。

‘--port=<n>’
     代わりのポートでリッスンします。 ‘--inetd’ オプションと互換性があり
     ません。

‘--init-timeout=<n>’
     接続が確立されてからクライアント要求が受信されるまでのタイムアウト
     (秒単位)(基本的には即時である必要があるため、通常はかなり低い値)。

‘--timeout=<n>’
     特定のクライアントサブリクエスト(client sub-requests)のタイムアウト
     (秒単位)。これには、サーバーがサブリクエストを処理するのにかかる時
     間と、次のクライアントのリクエストを待つために費やされる時間が含ま
     れます。

‘--max-connections=<n>’
     同時クライアントの最大数。デフォルトは32です。制限しない場合はゼロ
     に設定します。

‘--syslog’
     ‘--log-destination=syslog’ の短縮形。

‘--log-destination=<destination>’
     指定した宛先にログメッセージを送信します。 このオプションは
     ‘--verbose’ を意味しないため、デフォルトではエラー状態のみがログに
     記録されることに注意してください。 <destination> は以下のいずれかで
     ある必要があります:

     stderr
          標準エラーに書き込みます。 ‘--detach’ が指定されている場合、プ
          ロセスは実際の標準エラーから切断され、この宛先は実質的に
          ‘none’ と同等になることに注意してください。

     syslog
          ‘git-daemon’ 識別子を使用してsyslogに書き込みます。

     none
          すべてのログを無効にします。

     デフォルトの宛先は、 ‘--inetd’ または ‘--detach’ が指定されている場
     合、は ‘syslog’ であり、それ以外の場合は ‘stderr’ です。

‘--user-path’
‘--user-path=<path>’
     ~user 表記をリクエストで使用できるようにします。パラメータなしで指
     定した場合、 git://host/~alice/foo git：// host / ~ alice / fooへの
     リクエストは、ユーザー ‘alice’ のホームディレクトリにある _foo_ リ
     ポジトリへのアクセスリクエストと見なされます。 ‘--user-path=path’ が
     指定されている場合、同じリクエストが、ユーザー ‘alice’ のホームディ
     レクトリにある ‘path/foo’ リポジトリにアクセスするリクエストと見な
     されます。

‘--verbose’
     着信接続と要求されたファイルに関する詳細をログに記録します。

‘--reuseaddr’
     リスニングソケットをバインドするときは SO_REUSEADDR を使用します。
     これにより、古い接続がタイムアウトするのを待たずにサーバーを再起動
     できます。

‘--detach’
     シェルからデタッチします。 ‘--syslog’ オプションの指定を含んでいま
     す。

‘--pid-file=<file>’
     プロセスIDを <file> に保存します。デーモンが ‘--inetd’ で実行されて
     いる場合は無視されます。

‘--user=<user>’
‘--group=<group>’
     サービスループに入る前に、デーモンのuidとgidを変更します。
     ‘--group’ なしで ‘--user’ のみが指定された場合、ユーザーのプライマ
     リグループIDが使用されます。オプションの値は ‘getpwnam(3)’ と
     ‘getgrnam(3)’ に与えられ、数値IDはサポートされていません。

     これらのオプションを指定すると、 ‘--inetd’ と一緒に使用するとエラー
     になります。 同じことを実現するには、必要に応じて、 _git daemon_ を
     生成する前に、inetデーモンの機能を使用します。

     ユーザーIDを切り替える多くのプログラムと同様に、デーモンは、(例えば
     、‘upload-pack’ や‘receive-pack‘ の) gitプログラムを実行するときに
     ‘$HOME’ などの環境変数をリセットしません。このオプションを使用する
     場合は、デーモンを起動する前に、 ‘HOME’ を ‘<user>’ のホームディレ
     クトリを指すように設定、およびエクスポートし、そのディレクトリ内の
     Git構成ファイルが ‘<user>’ によって読み取り可能であることを確認して
     ください。

‘--enable=<service>’
‘--disable=<service>’
     デフォルトでサイト全体のサービスを 有効/無効 にします。サイト全体で
     無効にされたサービスは、オーバーライド可能とマークされていて、リポ
     ジトリが構成アイテムでサービスを有効にしている場合でも、リポジトリ
     ごとに有効にできることに注意してください。

‘--allow-override=<service>’
‘--forbid-override=<service>’
     リポジトリごとの構成でサイト全体のデフォルトをオーバーライドするこ
     とを 許可/禁止 します。デフォルトでは、すべてのサービスがオーバーラ
     イドされる場合があります。

‘--[no-]informative-errors’
     informative-errorsがオンになっている場合、git-daemonはより詳細なエ
     ラーをクライアントに報告し、「no such repository」(そのようなリポジ
     トリがない)と「repository not exported」(リポジトリがエクスポートさ
     れていない)などの条件を区別します。これはクライアントにとってより便
     利ですが、エクスポートされていないリポジトリの存在に関する情報が漏
     洩する可能性があります。informative-errorsが有効になっていない場合
     、すべてのエラーは「access denied」とクライアントに報告します。 デ
     フォルトは ‘--no-informative-errors’ です。

‘--access-hook=<path>’
     クライアントが接続するたびに、最初に、<path> で指定された外部コマン
     ドを実行します。コマンドライン引数として、サービス名
     ("upload-pack"など)や、リポジトリへのパスや、ホスト名(%H)や、正規の
     ホスト名(%CH)や、IPアドレス(%IP)や、TCPポート(%P)を、指定します。外
     部コマンドは、ゼロ以外のステータスで終了することによってサービスを
     拒否する(またはゼロ・ステータスで終了することによってサービスを許可
     する)ことを決定できます。また $REMOTE_ADDR や ‘$REMOTE_PORT’ 環境変
     数を調べて、この決定を行うときにリクエスト側(requestor)ついて調べる
     こともできます。

     外部コマンドはオプションで、サービスを拒否したときにエラーメッセー
     ジとしてリクエスト側(requestor)に送信される1行を標準出力に書き込む
     ことができます。

<directory>
     許可するディレクトリを列挙するホワイトリストに追加するディレクトリ
     。 ‘--strict-paths’ が指定されていない限り、これには指定のディレク
     トリのサブディレクトリも含まれます。


SERVICES
********

これらのサービスは、このコマンドのコマンドラインオプションを使用してグロ
ーバルに 有効/無効 にできます。よりきめ細かい制御が必要な場合(たとえば、
デーモンがサービスを提供するいくつかの選択されたリポジトリでのみ ‘git
archive’ を実行できるようしたい時)、リポジトリごとの構成ファイルを使用し
て、それらを有効または無効にできます。

upload-pack
     これは、 ‘git fetch-pack’ と ‘git ls-remote’ クライアントにサービス
     を提供します。デフォルトで有効になっていますが、リポジトリでは
     ‘daemon.uploadpack `構成アイテムを `false’ に設定することで無効にで
     きます。

upload-archive
     これは ‘git archive --remote’ を提供します。 デフォルトでは無効にな
     っていますが、リポジトリでは、 ‘daemon.uploadarch’ 構成アイテムを
     ‘true’ に設定することで有効にできます。

receive-pack
     これは ‘git send-pack’ クライアントにサービスを提供し、匿名プッシュ
     を可能にします。プロトコルに認証が「ない」ため、デフォルトでは無効
     になっています(つまり、参照の削除を含め、誰でもリポジトリに何でもプ
     ッシュできます)。これは、誰もが友好的であるクローズドLAN設定のみを
     対象としています。このサービスは、 ‘daemon.receivepack’ 構成アイテ
     ムを ‘true’ に設定することで有効にできます。


EXAMPLES
********

ここでは /etc/services の下に構築するものと仮定します
          $ grep 9418 /etc/services
          git             9418/tcp                # Git Version Control System

_git daemon_ as inetd server
     ホワイトリストに登録されたディレクトリのセット /pub/foo および
     /pub/bar の下にあるリポジトリを処理するinetdサービスとして「git
     daemon」を設定するには、以下のようなエントリを /etc/inetd にすべて
     1行で配置します:

                  git stream tcp nowait nobody  /usr/bin/git
                          git daemon --inetd --verbose --export-all
                          /pub/foo /pub/bar

_git daemon_ as inetd server for virtual hosts
     異なる仮想ホスト ‘www.example.com’ と ‘www.example.org’ のリポジト
     リを処理するinetdサービスとして「git daemon」を設定するには、以下の
     ようなエントリをすべて１行で ‘/etc/inetd’ に配置します:

                  git stream tcp nowait nobody /usr/bin/git
                          git daemon --inetd --verbose --export-all
                          --interpolated-path=/pub/%H%D
                          /pub/www.example.org/software
                          /pub/www.example.com/software
                          /software

     この例では、ルートレベルのディレクトリ ‘/pub’ には、サポートされて
     いる各仮想ホスト名のサブディレクトリが含まれています。さらに、両方
     のホストは、リポジトリを単に
     ‘git://www.example.com/software/repo.git’ として公開します。 1.4.0よ
     り前のクライアントの場合、 ‘/software’ から適切なデフォルトリポジト
     リへのシンボリックリンクも作成できます。

_git daemon_ as regular daemon for virtual hosts
     IPアドレスに基づいて複数の仮想ホストのリポジトリを処理する通常の非
     inetdサービスとして「git daemon」を設定するには、以下のようにデーモ
     ンを起動します:

                  git daemon --verbose --export-all
                          --interpolated-path=/pub/%IP/%D
                          /pub/192.168.1.200/software
                          /pub/10.10.220.23/software

     IPアドレスに基づいて複数の仮想ホストのリポジトリを処理する通常の非
     inetdサービスとして「git daemon」を設定するには、以下のようにデーモ
     ンを起動します。

selectively enable/disable services per repository
     リポジトリに対して ‘git archive --remote’ を有効にし、 ‘git fetch’
     を無効にするには、リポジトリの構成ファイルに以下のものを含めます（
     つまり、「HEAD」、「refs」、および「objects」の横にあるファイル「
     config」)。

                  [daemon]
                          uploadpack = false
                          uploadarch = true


ENVIRONMENT
***********

「git daemon」は、IPアドレスが使用可能な場合、REMOTE_ADDRをそれに接続し
たクライアントのIPアドレスに設定します。 REMOTE_ADDRは、サービスの実行時
に呼び出されるフックの環境で使用できます。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-describe,  Up: Top

Name
****

git-describe — Give an object a human readable name based on an
available ref


Synopsis
********

     git describe [–all] [–tags] [–contains] [–abbrev=<n>] [<commit-ish>…]
     git describe [–all] [–tags] [–contains] [–abbrev=<n>] –dirty[=<mark>]
     git describe <blob>


DESCRIPTION
***********

The command finds the most recent tag that is reachable from a commit.
If the tag points to the commit, then only the tag is shown.  Otherwise,
it suffixes the tag name with the number of additional commits on top of
the tagged object and the abbreviated object name of the most recent
commit.  The result is a "human-readable" object name which can also be
used to identify the commit to other git commands.

   By default (without –all or –tags) ‘git describe’ only shows
annotated tags.  For more information about creating annotated tags see
the -a and -s options to git-tag(1).

   If the given object refers to a blob, it will be described as
‘<commit-ish>:<path>’, such that the blob can be found at ‘<path>’ in
the ‘<commit-ish>’, which itself describes the first commit in which
this blob occurs in a reverse revision walk from HEAD.


OPTIONS
*******

<commit-ish>…
     Commit-ish object names to describe.  Defaults to HEAD if omitted.

‘--dirty[=<mark>]’
‘--broken[=<mark>]’
     Describe the state of the working tree.  When the working tree
     matches HEAD, the output is the same as "git describe HEAD". If the
     working tree has local modification "-dirty" is appended to it.  If
     a repository is corrupt and Git cannot determine if there is local
     modification, Git will error out, unless ‘–broken’ is given, which
     appends the suffix "-broken" instead.

‘--all’
     Instead of using only the annotated tags, use any ref found in
     ‘refs/’ namespace.  This option enables matching any known branch,
     remote-tracking branch, or lightweight tag.

‘--tags’
     Instead of using only the annotated tags, use any tag found in
     ‘refs/tags’ namespace.  This option enables matching a lightweight
     (non-annotated) tag.

‘--contains’
     Instead of finding the tag that predates the commit, find the tag
     that comes after the commit, and thus contains it.  Automatically
     implies –tags.

‘--abbrev=<n>’
     Instead of using the default number of hexadecimal digits (which
     will vary according to the number of objects in the repository with
     a default of 7) of the abbreviated object name, use <n> digits, or
     as many digits as needed to form a unique object name.  An <n> of 0
     will suppress long format, only showing the closest tag.

‘--candidates=<n>’
     Instead of considering only the 10 most recent tags as candidates
     to describe the input commit-ish consider up to <n> candidates.
     Increasing <n> above 10 will take slightly longer but may produce a
     more accurate result.  An <n> of 0 will cause only exact matches to
     be output.

‘--exact-match’
     Only output exact matches (a tag directly references the supplied
     commit).  This is a synonym for –candidates=0.

‘--debug’
     Verbosely display information about the searching strategy being
     employed to standard error.  The tag name will still be printed to
     standard out.

‘--long’
     Always output the long format (the tag, the number of commits and
     the abbreviated commit name) even when it matches a tag.  This is
     useful when you want to see parts of the commit object name in
     "describe" output, even when the commit in question happens to be a
     tagged version.  Instead of just emitting the tag name, it will
     describe such a commit as v1.2-0-gdeadbee (0th commit since tag
     v1.2 that points at object deadbee….).

‘--match <pattern>’
     Only consider tags matching the given ‘glob(7)’ pattern, excluding
     the "refs/tags/" prefix.  If used with ‘--all’, it also considers
     local branches and remote-tracking references matching the pattern,
     excluding respectively "refs/heads/" and "refs/remotes/" prefix;
     references of other types are never considered.  If given multiple
     times, a list of patterns will be accumulated, and tags matching
     any of the patterns will be considered.  Use ‘--no-match’ to clear
     and reset the list of patterns.

‘--exclude <pattern>’
     Do not consider tags matching the given ‘glob(7)’ pattern,
     excluding the "refs/tags/" prefix.  If used with ‘--all’, it also
     does not consider local branches and remote-tracking references
     matching the pattern, excluding respectively "refs/heads/" and
     "refs/remotes/" prefix; references of other types are never
     considered.  If given multiple times, a list of patterns will be
     accumulated and tags matching any of the patterns will be excluded.
     When combined with –match a tag will be considered when it matches
     at least one –match pattern and does not match any of the –exclude
     patterns.  Use ‘--no-exclude’ to clear and reset the list of
     patterns.

‘--always’
     Show uniquely abbreviated commit object as fallback.

‘--first-parent’
     Follow only the first parent commit upon seeing a merge commit.
     This is useful when you wish to not match tags on branches merged
     in the history of the target commit.


EXAMPLES
********

With something like git.git current tree, I get:

     [torvalds@g5 git]$ git describe parent
     v1.0.4-14-g2414721

   i.e.  the current head of my "parent" branch is based on v1.0.4, but
since it has a few commits on top of that, describe has added the number
of additional commits ("14") and an abbreviated object name for the
commit itself ("2414721") at the end.

   The number of additional commits is the number of commits which would
be displayed by "git log v1.0.4..parent".  The hash suffix is "-g" + an
unambigous abbreviation for the tip commit of parent (which was
‘2414721b194453f058079d897d13c4e377f92dc6’).  The length of the
abbreviation scales as the repository grows, using the approximate
number of objects in the repository and a bit of math around the
birthday paradox, and defaults to a minimum of 7.  The "g" prefix stands
for "git" and is used to allow describing the version of a software
depending on the SCM the software is managed with.  This is useful in an
environment where people may use different SCMs.

   Doing a _git describe_ on a tag-name will just show the tag name:

     [torvalds@g5 git]$ git describe v1.0.4
     v1.0.4

   With –all, the command can use branch heads as references, so the
output shows the reference path as well:

     [torvalds@g5 git]$ git describe --all --abbrev=4 v1.0.5^2
     tags/v1.0.0-21-g975b

     [torvalds@g5 git]$ git describe --all --abbrev=4 HEAD^
     heads/lt/describe-7-g975b

   With –abbrev set to 0, the command can be used to find the closest
tagname without any suffix:

     [torvalds@g5 git]$ git describe --abbrev=0 v1.0.5^2
     tags/v1.0.0

   Note that the suffix you get if you type these commands today may be
longer than what Linus saw above when he ran these commands, as your Git
repository may have new commits whose object names begin with 975b that
did not exist back then, and "-g975b" suffix alone may not be sufficient
to disambiguate these commits.


SEARCH STRATEGY
***************

For each commit-ish supplied, _git describe_ will first look for a tag
which tags exactly that commit.  Annotated tags will always be preferred
over lightweight tags, and tags with newer dates will always be
preferred over tags with older dates.  If an exact match is found, its
name will be output and searching will stop.

   If an exact match was not found, _git describe_ will walk back
through the commit history to locate an ancestor commit which has been
tagged.  The ancestor’s tag will be output along with an abbreviation of
the input commit-ish’s SHA-1.  If ‘--first-parent’ was specified then
the walk will only consider the first parent of each commit.

   If multiple tags were found during the walk then the tag which has
the fewest commits different from the input commit-ish will be selected
and output.  Here fewest commits different is defined as the number of
commits which would be shown by ‘git log tag..input’ will be the
smallest number of commits possible.


BUGS
****

Tree objects as well as tag objects not pointing at commits, cannot be
described.  When describing blobs, the lightweight tags pointing at
blobs are ignored, but the blob is still described as
<committ-ish>:<path> despite the lightweight tag being favorable.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-diff-files,  Up: Top

Name
****

git-diff-files — 作業ツリーとインデックス内のファイルを比較します


Synopsis
********

     git diff-files [-q] [-0|-1|-2|-3|-c|–cc] [<common diff options>] [<path>…]


DESCRIPTION
***********

作業ツリーとインデックス内のファイルを比較します。パスが指定されている場
合、それらの名前付きパスのみを比較します。それ以外の場合は、インデックス
内のすべてのエントリが比較されます。出力形式は、 _git diff-index_ や
_git diff-tree_ の場合と同じです。


OPTIONS
*******

‘-p’
‘-u’
‘--patch’
     パッチを生成します(generating patches に関するセクションを参照)。

‘-s’
‘--no-patch’
     diff出力を抑制します。デフォルトでパッチを表示する ‘git show’ のよ
     うなコマンド、または ‘--patch’ の効果をキャンセルする場合に便利です
     。

‘-U<n>’
‘--unified=<n>’
     通常の3行ではなく、<n> 行の内容でdiffを生成します。 ‘--patch’ の機
     能を含んでいます。

‘--output=<file>’
     stdout ではなく指定のファイルに出力します。

‘--output-indicator-new=<char>’
‘--output-indicator-old=<char>’
‘--output-indicator-context=<char>’
     生成されたパッチの新しい行、古い行、またはコンテキスト行を示すため
     に使用される文字を指定します。 通常、それらはそれぞれ _+_ 、 _-_ 、
     ’ ’ です。

‘--raw’
     生形式(raw format)でdiffを生成します。 これがデフォルトです。

‘--patch-with-raw’
     ‘-p --raw’ の同義語。

‘--indent-heuristic’
     diffハンクの境界をずらす(shift)ヒューリスティックを有効にして、パッ
     チを読みやすくします。 これがデフォルトです。

‘--no-indent-heuristic’
     インデントヒューリスティック(indent heuristic)を無効にします。

‘--minimal’
     より多くの時間を費やして、可能な限り最小のdiffが生成されるようにし
     ます。

‘--patience’
     "patience diff" アルゴリズムを使用してdiffを生成します。

‘--histogram’
     "histogram diff" アルゴリズムを使用してdiffを生成します。

‘--anchored=<text>’
     "anchored diff" アルゴリズムを使用してdiffを生成します。

     このオプションは複数回指定できます。

     行がソースと宛先の両方に存在し、1回だけ存在し、このテキストで始まる
     場合、このアルゴリズムは、その行が出力に削除または追加として表示さ
     れないようにします。内部で "patience diff" アルゴリズムを使用します
     。

‘--diff-algorithm={patience|minimal|histogram|myers}’
     diffアルゴリズムを選択します。その派生(variants)は以下のとおりです:

     ‘default’, ‘myers’
          基本的な貪欲な差分アルゴリズム(greedy diff algorithm)。現在、
          これがデフォルトです。

     ‘minimal’
          より多くの時間を費やして、可能な限り最小のdiffが生成されるよう
          にします。

     ‘patience’
          パッチを生成する時に "patience diff" アルゴリズムを使います。

     ‘histogram’
          このアルゴリズムは、忍耐アルゴリズム(patience algorithm)を拡張
          して、「発生率の低い共通要素をサポート」(support
          low-occurrence common elements)します。

     たとえば、 あなたが ‘diff.algorithm’ 変数をデフォルト以外の値に設定
     した上で、それでもデフォルト値を使用する場合は、
     ‘--diff-algorithm=default’ オプションを使用する必要があります。

‘--stat[=<width>[,<name-width>[,<count>]]]’
     diffstatを生成します。 デフォルトでは、必要なだけのスペースがファイ
     ル名部分に使用され、残りはグラフ部分に使用されます。最大幅はデフォ
     ルトで端末幅、または端末に接続されていない場合は80桁であり、
     ‘<width>’ で上書きできます。ファイル名部分の幅は、コンマの後に別の
     幅 ‘<name-width>’ を指定することで制限できます。グラフ部分の幅は、
     ‘--stat-graph-width=<width>’ (統計グラフを生成するすべてのコマンド
     に影響します)を使用するか、 ‘diff.statGraphWidth=<width>’ ( ‘git
     format-patch’ に影響しません)を設定することによって制限できます。
     3番目のパラメータ ‘<count>’ を指定することにより、出力を最初の
     ‘<count>’ 行に制限し、それに ‘...’ が続く形にできます。

     これらのパラメータは、 ‘--stat-width=<width>’ と
     ‘--stat-name-width=<name-width>’ と ‘--stat-count=<count>’ を使用し
     て個別に設定することもできます。

‘--compact-summary’
     ファイルの作成や削除( "new" または "gone" 。オプションでシンボリッ
     クリンクの場合は "+l" )、diffstatのモード変更(実行可能ビットを追加
     または削除する場合は、それぞれ "+x" または "-x" )など、拡張ヘッダー
     情報の要約を出力します。情報はファイル名部分とグラフ部分の間に置か
     れます。本機能は ‘--stat’ の機能を含んでいます。

‘--numstat’
     ‘--stat`に似ていますが、プログラムで処理しやすい(machine friendly)よ
     うに、追加および削除された行数を10進表記とパス名で省略形なしで表示
     します。バイナリファイルの場合、 `0 0’ の代わりに2つの ‘-’ を出力し
     ます。

‘--shortstat’
     変更されたファイルの総数と、追加および削除された行の数を含む
     ‘--stat’ 形式の最後の行のみを出力します。

‘-X[<param1,param2,...>]’
‘--dirstat[=<param1,param2,...>]’
     各サブディレクトリの相対的な変更量の分布を出力します。 ‘--dirstat’
     の動作は、パラメータのコンマ区切りリストを渡すことでカスタマイズで
     きます。デフォルトは、 ‘diff.dirstat’ 構成変数によって制御されます
     (git-config(1) 参照)。以下のパラメータを使用できます:

     ‘changes’
          ソースから削除された、または宛先に追加された行をカウントして、
          dirstat数を計算します。これは、ファイル内の純粋なコード移動の
          量を無視します。つまり、ファイル内の行の再配置は、他の変更ほど
          カウントされません。これは、パラメーターが指定されていない場合
          のデフォルトの動作です。

     ‘lines’
          通常の行ベースのdiff分析を実行し、削除/追加された行数を合計し
          て、dirstat数を計算します。 (バイナリファイルの場合、バイナリ
          ファイルには行の概念がないため、代わりに64バイトのチャンクをカ
          ウントします)。 これは ‘changes’ 動作よりも高価な ‘--dirstat’
          動作ですが、他の変更と同じようにファイル内の再配置された行をカ
          ウントします。結果の出力は、他の ‘--*stat’ オプションから得ら
          れるものと一致しています。

     ‘files’
          変更されたファイルの数を数えて、dirstat数を計算します。変更さ
          れた各ファイルは、dirstat分析で等しくカウントされます。これは
          、ファイルの内容をまったく調べる必要がないため、計算コストが最
          もかからない ‘--dirstat’ の動作です。

     ‘cumulative’
          親ディレクトリの子ディレクトリの変更も同様にカウントします。
          ‘cumulative’(累積的) を使用する場合、報告されるパーセンテージ
          の合計が100%を超える場合があることに注意してください。デフォル
          トの(非累積的な)動作は、‘noncumulative’ パラメーターで指定でき
          ます。

     <limit>
          整数パラメーターは、カットオフパーセント(デフォルトでは3%)を指
          定します。指定の割合より少ないディレクトリは、出力に表示されま
          せん。

     例: 変更されたファイルの総数の10%未満のディレクトリを無視し、親ディ
     レクトリに子ディレクトリの数を累積しながら、変更されたファイルをカ
     ウント: ‘--dirstat=files,10,cumulative’

‘--cumulative’
     ‘--dirstat=cumulative’ と同義語

‘--dirstat-by-file[=<param1,param2>...]’
     ‘--dirstat=files,param1,param2...’ と同義語

‘--summary’
     作成、名前変更、モード変更などの拡張ヘッダー情報の短い要約
     (condensed summary)を出力します。

‘--patch-with-stat’
     ‘-p --stat’ と同義語。

‘-z’
     ‘--raw’ または ‘--numstat’ または ‘--name-only’ または
     ‘--name-status’ が指定されている場合は パス名を変更せず、出力フィー
     ルドターミネータとしてNULLを使用してください。

     このオプションがないと、構成変数 ‘core.quotePath’ で説明されている
     ように、 通常の文字以外(unusual characters)を含むパス名が引用符で囲
     まれます(git-config(1) 参照)。

‘--name-only’
     変更されたファイルの名前のみを表示します。 多くの場合、ファイル名は
     UTF-8でエンコードされます。 詳細については、 git-log(1) のマニュア
     ルページにあるエンコーディングに関する議論(the discussion about
     encoding)を参照してください。

‘--name-status’
     変更されたファイルの名前とステータスのみを表示します。ステータス文
     字の意味については、 ‘--diff-filter’ オプションの説明を参照してくだ
     さい。 ‘--name-only’ と同じように、ファイル名はしばしばUTF-8でエン
     コードされます。

‘--submodule[=<format>]’
     サブモジュールの違いをどのように表示するかを指定します。
     ‘--submodule=short’ を指定する場合、 _short_ 形式が使用されます。こ
     の形式は、範囲の最初と最後にコミットの名前を表示するだけです。
     ‘--submodule’ または ‘--submodule=log’ が指定されている場合、 _log_
     形式が使用されます。この形式では、 git-submodule(1) ‘summary’ のよ
     うに範囲内のコミットが一覧表示されます。 ‘--submodule=diff’ が指定
     されている場合、 _diff_ 形式が使用されます。この形式は、コミット範
     囲間のサブモジュールの内容の変更のインラインdiffを示します。
     configオプションが設定されていない場合、デフォルトは
     ‘diff.submodule’ または _short_ 形式です。

‘--color[=<when>]’
     色付きのdiffを表示します。 ‘--color’ (つまり、 _=<when>_ ) は
     ‘--color=always’ と同じです。 _<when>_ は、 ‘always’ または ‘never’
     または ‘auto’ のいずれかになります。

‘--no-color’
     カラーdiffをオフにします。 ‘--color=never’ と同じです。

‘--color-moved[=<mode>]’
     ソースコードの移動した行を別の色にします。 <mode>は、オプションが指
     定されていない場合はデフォルトで _no_ になり、 モードが指定されてい
     ないオプションが指定されている場合は _zebra_ になります。 モードは
     以下のいずれかでなければなりません:

     no
          移動行をハイライトしません。

     default
          ‘zebra’ の同義語です。これは、将来、より賢明なモードに変更され
          る可能性があります。

     plain
          ある場所で追加され、別の場所で削除された行は、
          _color.diff.newMoved_ で色付けされます。 同様に、
          _color.diff.oldMoved_ は、差分の別の場所に追加された削除された
          行に使用されます。このモードは移動された行をピックアップします
          が、コードのブロックが順列なしで移動されたかどうかを判断するこ
          とはレビューではあまり役に立ちません。

     blocks
          少なくとも20文字の英数字の移動テキストのブロックが貪欲に検出さ
          れます。検出されたブロックは、 _color.diff.{old,new}Moved_ 色
          のいずれかを使用して色付けされます。隣接するブロックを区別する
          ことはできません。

     zebra
          移動されたテキストのブロックは、 _blocks_ モードの場合と同様に
          検出されます。 ブロックは、 _color.diff.{old,new}Moved_ 色また
          は _color.diff.{old,new}MovedAlternative_ 色のいずれかを使用し
          て色付けされます。2つの色の間の変化は、新しいブロックが検出さ
          れたことを示します。

     dimmed-zebra
          _zebra_ に似ていますが、移動されたコードの重要でない部分の追加
          の調光(dimmed)が実行されます。隣接する2つのブロックの境界線は
          興味深いと見なされ、残りは興味深いものではありません。
          ‘dimmed_zebra’ は非推奨の同義語です。

‘--no-color-moved’
     移動検出をオフにします。 これは、構成設定を上書きするために使用でき
     ます。 ‘--color-moved=no’ と同じです。

‘--color-moved-ws=<modes>’
     これは、 ‘--color-moved’ の移動検出を実行するときに空白を無視する方
     法を設定します。 これらのモードは、コンマ区切りのリストとして指定で
     きます:

     no
          移動行検出を実行するときに、空白(whitespace)を無視しない。

     ignore-space-at-eol
          行末(EOL)での空白(whitespace)の変更を無視します。

     ignore-space-change
          空白(whitespace)の数の変更は無視してください。これは、行末の空
          白(whitespace)を無視し、1つ以上の空白文字(whitespace
          characters)の他のすべてのシーケンスを同等と見なします。

     ignore-all-space
          行を比較するときは空白(whitespace)を無視します。これにより、一
          方の行に空白があり、もう一方の行に空白がない場合でも、違いは無
          視されます。

     allow-indentation-change
          最初に移動検出で空白(whitespace)を無視し、空白(whitespace)の変
          更が行ごとに同じである場合にのみ、移動されたコードブロックをブ
          ロックにグループ化します。 これは他のモードと互換性がありませ
          ん。

‘--no-color-moved-ws’
     移動検出を実行するときは、空白(whitespace)を無視しないでください。
     これは、構成設定を上書きするために使用できます。
     ‘--color-moved-ws=no’ と同じです。

‘--word-diff[=<mode>]’
     <mode> を使用して変更された単語を区切ることにより、単語のdiffを表示
     します。デフォルトでは、単語は空白で区切られます。 以下の
     ‘--word-diff-regex’ を参照してください。 <mode> のデフォルトは
     ’plain’です。 <mode> は以下のいずれかである必要があります:

     color
          変更された単語(word)を色のみを使用して強調表示します。
          ‘--color’ を意味します。

     plain
          単語を ‘[-removed-]’ および ‘{+added+}’ として表示します。 区
          切り文字が入力に表示されている場合、区切り文字をエスケープしよ
          うとしないため、出力があいまいになる可能性があります。

     porcelain
          スクリプトの使用を目的とした特別な行ベースの形式を使用します。
          追加/削除/無変更については、通常の統一されたdiff形式で印刷され
          、行の先頭の ‘+’/‘-’/‘ ‘ 文字で始まり、行の終わりまで続きます
          。入力の改行は、それ自体の行のチルダ ‘~’ で表されます。

     none
          単語(word)のdiffを再度無効にします。

     注意: 最初のモードの名前にもかかわらず、有効になっている場合、すべ
     てのモードで変更された部分を強調するために色が使用されることに注意
     してください。

‘--word-diff-regex=<regex>’
     空白以外を単語と見なす代わりに、 <regex> を使用して単語が何であるか
     を決定します。また、すでに有効になっていない限り、この機能は
     ‘--word-diff’ の機能を含んでいます。

     <regex> の重複しないマッチはすべて、単語と見なされます。これらのマ
     ッチの間のすべては空白と見なされ、違いを見つけるためとしては無視さ
     れます！ 正規表現に ‘|[^[:space:]]’ を追加して、空白以外のすべての
     文字とマッチすることを確認することをお勧めします。改行を含むマッチ
     は、改行で黙って切り捨てられます！

     たとえば、 ‘--word-diff-regex=.’ は各文字を単語として扱い、それに応
     じて文字ごとの違いを表示します。

     正規表現は、diffドライバーまたは構成オプション(configuration
     option)を介して設定することもできます。 gitattributes(5) または
     git-config(1) を参照してください。これを指定すると、diffドライバー
     または構成設定(configuration settings)が明示的にオーバーライドされ
     ます。diffドライバーは構成設定を上書きします。

‘--color-words[=<regex>]’
     ‘--word-diff=color’ に ‘--word-diff-regex=<regex>’ を加えたものに相
     当します(正規表現が指定されている場合)。

‘--no-renames’
     構成ファイルにデフォルトで指定されている場合でも、名前変更の検出を
     オフにします。

‘--[no-]rename-empty’
     名前変更ソースとして空のブロブを使用するかどうか。

‘--check’
     変更によって競合マーカーまたは空白エラーが発生した場合に警告します
     。空白エラーと見なされるものは、 ‘core.whitespace’ 構成によって制御
     されます。 デフォルトでは、末尾の空白(空白のみで構成される行を含む
     )と、行の最初のインデント内で直後にタブ文字が続くスペース文字は、空
     白エラーと見なされます。問題が見つかった場合は、ゼロ以外のステータ
     スで終了します。なお、 –exit-code とは互換性がありません。

‘--ws-error-highlight=<kind>’
     diffの ‘context’ または ‘old’ または ‘new’ 行の空白エラーを強調表示
     します。複数の値はコンマで区切られ、 ‘none’ は前の値をリセットし、
     ‘default’ はリストを ‘new’ にリセットし、 ‘all’ は old、new、
     context の省略形です。このオプションが指定されておらず、構成変数
     ‘diff.wsErrorHighlight’ が設定されていない場合、 ‘new’ 行の空白エラ
     ーのみが強調表示されます。空白エラーは ‘color.diff.whitespace’ で色
     分けされています。

‘--full-index’
     パッチ形式の出力を生成するときは、最初の一握りの文字(first handful
     of characters)の代わりに、「インデックス」行にイメージ前およびイメ
     ージ後の完全ブロブオブジェクト名を表示します。

‘--binary’
     ‘--full-index’ に加えて、 ‘git-apply’ で適用できるバイナリ差分を出
     力します。 ‘--patch’ の機能を含んでいます。

‘--abbrev[=<n>]’
     完全な40バイトの16進オブジェクト名をdiff-raw形式の出力とdiff-treeヘ
     ッダー行に表示する代わりに、オブジェクトを一意に参照する、少なくと
     も _<n>_ 桁の16進数の長さの最短のプレフィックスを表示します。diffパ
     ッチ出力形式では、 ‘--full-index’ が優先されます。つまり、
     ‘--full-index’ が指定されている場合、 ‘--abbrev’ に関係なく、完全な
     ブロブ名が表示されます。デフォルト以外の桁数は、 ‘--abbrev=<n>’ で
     指定できます。

‘-B[<n>][/<m>]’
‘--break-rewrites[=[<n>][/<m>]]’
     完全な書き換えの変更を削除と作成のペアに分割します。これには以下の
     2つの目的があります:

     これは、ファイルの完全な書き換えに相当する変更が、コンテキストとし
     てテキストで一致する非常に少数の行と混合された一連の削除と挿入とし
     てではなく、古いものすべての単一の削除とそれに続く すべての新しいも
     のを1回挿入し、数値 ‘m’ が -B オプションのこの側面を制御します(デフ
     ォルトは60%)。 ‘-B/70%’ は、Gitがそれを完全な書き換えと見なすために
     、元の30%未満が結果に残る必要があることを指定します(つまり、結果の
     パッチは、コンテキスト行と混合された一連の削除と挿入になります)。

     -M と一緒に使用すると、完全に書き換えられたファイルも名前変更のソー
     スと見なされ(通常、 -M は、消えたファイルのみを名前変更のソースと見
     なします)、数 ‘n’ が -Bオプションのこの側面を制御します(デフォルト
     は50%)。 ‘-B20%’ は、ファイルのサイズの20%以上と比較して、追加およ
     び削除を伴う変更が、別のファイルへの名前変更の可能なソースとして取
     得される資格があることを指定します。

‘-M[<n>]’
‘--find-renames[=<n>]’
     名前の変更(renames)を検知する。 ‘n’ が指定されている場合、それは類
     似性インデックスのしきい値です (つまり、ファイルのサイズと比較した
     追加/削除の量)。 たとえば、 ‘-M90%’ は、ファイルの90%以上が変更され
     ていない場合、 Gitが削除/追加のペアを名前変更と見なす必要があること
     を意味します。 ‘%’ 記号がない場合、数値は小数として読み取られ、その
     前に小数点が付きます。 つまり、 ‘-M5’ は0.5になるため、‘-M50%’ と同
     じになります。 同様に、 ‘-M05’ は ‘-M5%’ と同じです。 検出を正確な
     名前変更に制限するには、 ‘-M100%’ を使用します。 デフォルトの類似性
     インデックスは50%です。

‘-C[<n>]’
‘--find-copies[=<n>]’
     名前と同様コピーを検出します。 ‘--find-copies-harder’ ‘も参照してく
     ださい。 `n’ を指定すると、 ‘-M<n>’ と同じ意味になります。

‘--find-copies-harder’
     パフォーマンス上の理由から、デフォルトでは、 ‘-C’ オプションは、コ
     ピーの元のファイルが同じ変更組(changeset)で変更された場合にのみコピ
     ーを検索します。このフラグにより、コマンドは変更されていないファイ
     ルをコピー元の候補として検査します。これは大規模なプロジェクトでは
     非常にコストのかかる操作であるため、注意して使用してください。 複数
     の ‘-C’ オプションを指定しても同じ効果があります。

‘-D’
‘--irreversible-delete’
     削除するプレイメージ(preimage)を省略します。つまり、ヘッダーのみを
     出力し、プレイメージと ‘/dev/null’ の差分は出力しません。結果のパッ
     チは、 ‘patch’ または ‘git apply’ で適用されることを意図していませ
     ん。これは、変更後にテキストを確認することに集中したい人のためだけ
     のものです。さらに、出力には明らかに、そのようなパッチを手動でも逆
     に適用するのに十分な情報が不足しているため、オプションの名前が付け
     られています。

     ‘-B’ と併用する場合は、削除/作成ペアの削除部分のプリイメージ
     (preimage)も省略してください。

‘-l<num>’
     ‘-M’ および ‘-C’ オプションには、名前変更/コピーのサブセットを安価
     に検出できるいくつかの準備手順が含まれ、その後に、残りのすべてのペ
     アになっていない宛先をすべての関連ソースと比較する徹底的なフォール
     バック部分が続きます。(名前の変更の場合、残りのペアになっていないソ
     ースのみが関係します。コピーの場合、すべての元のソースが関係します
     )。Nのソースと宛先の場合、この徹底的なチェックのコストは O(N^2) で
     す。このオプションは、関係するソース/宛先ファイルの数が指定された数
     を超えた場合に、名前変更/コピー検出の完全な部分が実行されないように
     します。デフォルトは diff.renameLimit です。 値0は無制限として扱わ
     れることに注意してください。

‘--diff-filter=[(A|C|D|M|R|T|U|X|B)...[*]]’
     追加(Add)・コピー(Copy)・削除(Delete)・変更(Modify)・名前変更
     (Rename)されたファイル、タイプが変更されたファイル(T)、マージされて
     いないファイル(U)、不明なファイル(X)、またはペアリングが壊れている
     ファイル(B)のみを選択します。フィルタ文字(無しも含む)の任意の組み合
     わせを使用できます。 組み合わせに ‘*’ (全てまたは無し)が追加される
     と、比較で他の基準に一致するファイルがある場合、すべてのパスが選択
     されます。 他の基準に一致するファイルがない場合、何も選択されません
     。

     また、逆に、除外したい時はこれらの各大文字指定を小文字にして指定し
     ます。例えば ‘--diff-filter=ad’ は、追加および削除されたパスを除外
     します。

     注意:すべてのdiffがすべてのタイプを特徴とするわけではないことに注意
     してください。 たとえば、インデックスから作業ツリーへのdiffにエント
     リを追加することはできません(diffに含まれるパスのセットは、インデッ
     クスの内容によって制限されるため)。 同様に、これらのタイプの検出が
     無効になっている場合、コピーおよび名前変更されたエントリは表示され
     ません。

‘-S<string>’
     ファイル内の指定の文字列(つまり、 addition 、deletion)の出現回数の
     差分を調べます。スクリプターが使用することを目的としています。

     (構造体など)コードの正確なブロックを探していて、そのブロックが最初
     に作成されてからの履歴を知りたい場合に便利です。この機能を繰り返し
     使用して、プリイメージ(preimage)内の興味深いブロックを ‘-S’ にフィ
     ードバックし、そしてあなたはそれをブロックの最初のバージョンを取得
     するまで続けます。

     バイナリファイルも検索されます。

‘-G<regex>’
     パッチテキストに <regex> にマッチする 追加/削除 された行が含まれて
     いる差分を探します。

     ‘-S<regex> --pickaxe-regex’ と ‘-G<regex>’ の違いを説明するために、
     同じファイル内で以下のdiffを使用してコミットすることを検討してくだ
     さい:

          +    return frotz(nitfol, two->ptr, 1, 0);
          ...
          -    hit = frotz(nitfol, mf2.ptr, 1, 0);

     ‘git log -G"frotz\(nitfol"’ はこのコミットを表示しますが、 ‘git log
     -S"frotz\(nitfol" --pickaxe-regex’ は表示しません(その文字列の出現
     回数が変更されなかったため)。

     ‘--text’ が提供されていない限り、 textconv フィルターのないバイナリ
     ファイルのパッチは無視されます。

     詳細については gitdiffcore(7) の _pickaxe_ エントリを参照してくださ
     い。

‘--find-object=<object-id>’
     指定されたオブジェクトの出現回数を変更する違いを探します。 ‘-S’ と
     同様に、引数だけが異なり、特定の文字列ではなく特定のオブジェクト
     IDを検索します。

     オブジェクトは、ブロブまたはサブモジュールのコミットにすることがで
     きます。 これは、 ‘git-log’ の ‘-t’ オプションがツリーも探すことを
     意味します。

‘--pickaxe-all’
     ‘-S’ または ‘-G’ が変更を見つけたら、 <string> の変更を含むファイル
     だけでなく、その変更セット(changeset)のすべての変更を表示します。

‘--pickaxe-regex’
     ‘-S’ に指定した <string> を拡張POSIX正規表現として扱います。

‘-O<orderfile>’
     ファイルが出力に表示される順序を制御します。これは ‘diff.orderFile’
     構成変数をオーバーライドします(git-config(1) 参照)。
     ‘diff.orderFile’ をキャンセルするには、 ‘-O/dev/null’ を使用します
     。

     出力順序は、 <orderfile> 内のglobパターンの順序によって決定されます
     。最初のパターンに一致するパス名を持つすべてのファイルが最初に出力
     され、2番目のパターンに一致する(ただし最初のパターンには一致しない
     )パス名を持つすべてのファイルが次に出力されます。パス名がどのパター
     ンとも一致しないすべてのファイルは、ファイルの最後に暗黙のすべて一
     致パターンがあるかのように、最後に出力されます。複数のパス名のラン
     クが同じである場合(同じパターンに一致するが、以前のパターンには一致
     しない)、相互の出力順序は通常の順序です。

     <orderfile> は以下のとおりパースされます:

        • 空白行は無視されるため、読みやすくするための区切りとして使用で
          きます。

        • ハッシュ ("‘#’") で始まる行は無視されるため、コメントに使用で
          きます。 パターンがハッシュで始まる場合は、パターンの先頭にバ
          ックスラッシュ(訳注:日本では環境により円記号)("‘\’") を追加し
          ます。

        • 他の各行には、単一のパターンが含まれています。

     パターンは、 FNM_PATHNAME フラグなしで fnmatch(3) に使用されるパタ
     ーンと同じ構文とセマンティクスを持ちますが、最終的なパス名コンポー
     ネントをいくつも削除するとパターンと一致する場合、パス名もパターン
     と一致する点が異なります。 たとえば、パターン "‘foo*bar’" は、
     "‘fooasdfbar’" および "‘foo/bar/baz/asdf’" と一致しますが、
     "‘foobarx’" とは一致しません。

‘--skip-to=<file>’
‘--rotate-to=<file>’
     名前付き <file> の前のファイルを出力から破棄するか(スキップして)、
     出力の最後に移動させます(ローテーションさせます)。 これらは主に
     ‘git difftool’ コマンドを使用するために考案されたものであり、それ以
     外の場合はあまり役に立たない可能性があります。

‘-R’
     2つの入力を交換します。 つまり、インデックスまたはディスク上のファ
     イルとツリーの内容の違いを表示します。

‘--relative[=<path>]’
‘--no-relative’
     プロジェクトのサブディレクトリから実行する場合、このオプションを使
     用して、ディレクトリ外の変更を除外し、それに関連するパス名を表示す
     るように指示できます。サブディレクトリ(ベアリポジトリなど)にいない
     場合は、引数として <path> を指定することで、出力を作成するサブディ
     レクトリに名前を付けることができます。 ‘--no-relative`は、
     `diff.relative’ 設定オプションと以前の ‘--relative’ の両方を打ち消
     すために使用できます。

‘-a’
‘--text’
     すべてのファイルをテキストとして扱います。

‘--ignore-cr-at-eol’
     比較を行うときは、行末のキャリッジリターン(carriage-return)を無視し
     ます。

‘--ignore-space-at-eol’
     行末(EOL)での空白(whitespace)の変更を無視します。

‘-b’
‘--ignore-space-change’
     空白(whitespace)の数の変更は無視してください。これは、行末の空白
     (whitespace)を無視し、1つ以上の空白文字(whitespace characters)の他
     のすべてのシーケンスを同等と見なします。

‘-w’
‘--ignore-all-space’
     行を比較するときは空白を無視します。 これにより、一方の行に空白があ
     り、もう一方の行に空白がない場合でも、違いは無視されます。

‘--ignore-blank-lines’
     全て空白の行の変更は無視します。

‘-I<regex>’
‘--ignore-matching-lines=<regex>’
     すべての行が <regex> にマッチする変更を無視します。このオプションは
     複数回指定できます。

‘--inter-hunk-context=<lines>’
     指定された行数までの差分ハンク間のコンテキストを表示し、それによっ
     て互いに近いハンクを融合します。デフォルトは
     ‘diff.interHunkContext’ で、設定オプションが設定されていない場合は
     0です。

‘-W’
‘--function-context’
     関数全体を各変更のコンテキスト行として表示します。関数名は、 ‘git
     diff’ がパッチハンクヘッダーを処理するのと同じ方法で決定されます
     (gitattributes(5) の _Defining a custom hunk-header_ を参照)。

‘--exit-code’
     diff(1）と同様のコードでプログラムを終了させます。つまり、違いがあ
     った場合は 1 で終了し、 0 は違いがないことを意味します。

‘--quiet’
     プログラムのすべての出力を無効にします。 ‘--exit-code’ を意味します
     。

‘--ext-diff’
     外部diffヘルパーの実行を許可します。 gitattributes(5) を使用して外
     部diffドライバーを設定する場合は、 git-log(1) およびその仲間と一緒
     にこのオプションを使用する必要があります。

‘--no-ext-diff’
     外部diffドライバーを禁止します。

‘--textconv’
‘--no-textconv’
     バイナリファイルを比較するときに、外部テキスト変換フィルターの実行
     を許可(または禁止)します。 詳細については、 gitattributes(5) を参照
     してください。textconvフィルターは通常、一方向の変換であるため、結
     果のdiffは人間の消費に適していますが、適用(apply)することはできませ
     ん。このため、textconvフィルターは、 git-diff(1) および git-log(1)
     に対してのみデフォルトで有効になりますが、 git-format-patch(1) また
     はdiff配管コマンドに対しては有効になりません。

‘--ignore-submodules[=<when>]’
     diff生成のサブモジュールへの変更を無視します。 <when> は、 none・
     untracked・dirty・allのいずれかになります。これがデフォルトです。
     noneを使用すると、追跡されていないファイルまたは変更されたファイル
     が含まれている場合、またはそのHEADがスーパープロジェクトに記録され
     ているコミットと異なる場合にサブモジュールが変更されたと見なされ、
     git-config(1) または gitmodules(5) の ignoreオプションの設定をオー
     バーライドするために使用できます。untrackedが使用されている場合、サ
     ブモジュールには追跡されていないコンテンツのみが含まれている場合、
     サブモジュールはダーティとは見なされません(ただし、変更されたコンテ
     ンツはスキャンされます)。「dirty」を使用すると、サブモジュールの作
     業ツリーへのすべての変更が無視され、スーパープロジェクトに格納され
     ているコミットへの変更のみが表示されます(これは1.7.0までの動作でし
     た)。「all」を使用すると、サブモジュールへのすべての変更が非表示に
     なります。

‘--src-prefix=<prefix>’
     "a/" の代わりに、与えられたソースプレフィックス(source prefix)を表
     示します。

‘--dst-prefix=<prefix>’
     "b/" の代わりに、指定された宛先プレフィックス(destination prefix)を
     表示します。

‘--no-prefix’
     送信元(source)または宛先(destination)のプレフィックスを表示しません
     。

‘--line-prefix=<prefix>’
     出力のすべての行に追加のプレフィックスを付加します。

‘--ita-invisible-in-index’
     デフォルトでは、 "git add -N" によって追加されたエントリは、 "git
     diff" に既存の空のファイルとして表示され、 "git diff –cached" に新
     しいファイルとして表示されます。このオプションを使用すると、エント
     リは "git diff" では新しいファイルとして表示され、 "git diff
     –cached" では存在しません。このオプションは、
     ‘--ita-visible-in-index’ で元に戻すことができます。どちらのオプショ
     ンも実験的なものであり、将来削除される可能性があります。

   これらの一般的なオプションの詳細については、 gitdiffcore(7) も参照し
てください。

‘-1 --base’
‘-2 --ours’
‘-3 --theirs’
‘-0’
     "base" バージョン または "our branch" または "their branch" とそれ
     ぞれ異なります。これらのオプションを使用すると、マージされたエント
     リのdiffは表示されません。

     デフォルトでは、 our branch (-2) とクリーンに解決されたパスに対して
     diffを取ります。オプション -0 を指定すると、マージされていないエン
     トリのdiff出力を省略し、 "Unmerged" と表示することができます。

‘-c’
‘--cc’
     これは、ステージ2（ブランチ）、ステージ3（ブランチ）、および作業ツ
     リーファイルを比較し、 _diff-tree_ がこれらのフラグを使用してマージ
     コミットを示すのと同様に、結合された差分を出力します。

‘-q’
     存在しないファイルでも黙っています


Raw output format
*****************

‘git-diff-index’ と ‘git-diff-tree’ と ‘git-diff-files’ と ‘git diff
--raw’ からの生の出力形式は非常に似ています。

   これらのコマンドはすべて、2つのセットを比較します。なお、比較されるも
のは異なります:

git-diff-index <tree-ish>
     <tree-ish> とファイルシステム上のファイルを比較します。

git-diff-index –cached <tree-ish>
     <tree-ish> とインデックスを比較します。

git-diff-tree [-r] <tree-ish-1> <tree-ish-2> [<pattern>…]
     2つの引数で指定されたツリーを比較します。

git-diff-files [<pattern>…]
     インデックスとファイルシステム上のファイルを比較します。

   "git-diff-tree" コマンドは、比較対象のハッシュ値を出力することで出力
を開始します。その後、すべてのコマンドは、変更されたファイルごとに1つの
出力行を出力します。

   出力行は以下のようにフォーマットされます:

     in-place edit  :100644 100644 bcd1234 0123456 M file0
     copy-edit      :100644 100644 abcd123 1234567 C68 file1 file2
     rename-edit    :100644 100644 abcd123 1234567 R86 file1 file3
     create         :000000 100644 0000000 1234567 A file4
     delete         :100644 000000 1234567 0000000 D file5
     unmerged       :000000 000000 0000000 0000000 U file6

   つまり、左から右へ:

  1. コロン(:)

  2. "src" のモード。作成(creation)またはマージされていない(unmerged)場
     合は 000000

  3. 空白

  4. "dst" のモード。作成(creation)またはマージされていない(unmerged)場
     合は 000000

  5. 空白

  6. "src" のsha1。作成(creation)またはマージされていない(unmerged)場合
     は 0{40}

  7. 空白

  8. "dst" のsha1。作成(creation)またはマージされていない(unmerged)また
     は作業ツリーにある場合は 0{40}

  9. 空白

  10. ステータスの後に、オプションの「スコア数」("score" number)が続きま
     す

  11. ‘-z’ オプションが使用されている場合はタブまたはNUL

  12. "src" のパス

  13. ‘-z’ オプションが使用されている場合タブまたはNUL。ステータスCまた
     はRにのみ存在します

  14. "dst" のパス。ステータスCまたはRにのみ存在します

  15. LFでレコードを終了します。 ‘-z’ オプションが使用されている場合は
     NULでレコードを終了します。

   ステータス文字の種類は以下のとおり:

   • A: ファイルの追加

   • C: ファイルを新しいファイルにコピー

   • D: ファイルの削除

   • M: ファイルの内容やモードの変更

   • R: ファイル名の名前変更

   • T: ファイルのタイプを変更

   • U: ファイルはマージされていません(コミットする前にマージを完了する
     必要があります)

   • X: 「不明な」変更タイプ(おそらくバグです。報告してください)

   ステータス文字CとRの後には常にスコアが続きます(移動またはコピーのソー
スとターゲットの間の類似性のパーセンテージを示します)。ステータス文字Mの
後には、ファイルの書き換えのスコア(非類似度のパーセンテージを示す)が続く
場合があります。

   <sha1> は、ファイルがファイルシステム上で新規で、インデックスと同期し
ていない場合、すべて0として表示されます。

   例:

     :100644 100644 5be4a4a 0000000 M file.c

   ‘-z’ オプションを指定しない場合、構成変数 ‘core.quotePath’ で説明され
ているように、通常の文字以外(unusual characters)を含むパス名が引用符で囲
まれます(git-config(1) 参照)。 ‘-z’ を使用すると、ファイル名がそのまま出
力され、行はNULバイトで終了します。


diff format for merges
**********************

"git-diff-tree" と "git-diff-files" と "git-diff –raw" は、 ‘-c’ または
‘--cc’ オプションを使用して、マージコミットに対してもdiff出力を生成でき
ます。出力は、以下の点で上記の形式とは異なります:

  1. 親ごとにコロン(:)があります

  2. より多くの "src" モードと "src" sha1があります

  3. statusは、各親のステータス文字を連結したものです

  4. オプションの「スコア数」はありません

  5. ファイルのタブ区切りのパス名

   ‘-c’ および ‘ -cc‘ の場合、履歴のいずれかの側でファイルの名前が変更さ
れた場合でも、宛先(dst)または最終パスのみが表示されます。
‘--combined-all-paths’ を使用すると、各親のパスの名前が表示され、それに
続いてマージコミットのパスの名前が表示されます。

   例: ‘--combined-all-paths’ を使用しない ‘-c’ および ‘--cc’ の場合:

     ::100644 100644 100644 fabadb8 cc95eb0 4866510 MM       desc.c
     ::100755 100755 100755 52b7a2d 6d1ac04 d2ac7d7 RM       bar.sh
     ::100644 100644 100644 e07d6c5 9042e82 ee91881 RR       phooey.c

   例: ‘-c’ または ‘--cc’ のいずれかに ‘--combined-all-paths’ が追加され
た場合:

     ::100644 100644 100644 fabadb8 cc95eb0 4866510 MM       desc.c  desc.c  desc.c
     ::100755 100755 100755 52b7a2d 6d1ac04 d2ac7d7 RM       foo.sh  bar.sh  bar.sh
     ::100644 100644 100644 e07d6c5 9042e82 ee91881 RR       fooey.c fuey.c  phooey.c

   注意: ’combined diff’は、すべての親から変更されたファイルのみをリスト
することに注意してください。


Generating patch text with -p
*****************************

git-diff(1) 、 git-log(1) 、 git-show(1) 、 git-diff-index(1) 、
git-diff-tree(1) 、 git-diff-files(1) に ‘-p’ オプションを付けて実行する
とパッチテキストを生成します。パッチテキストの作成は、
‘GIT_EXTERNAL_DIFF’ と ‘GIT_DIFF_OPTS’ 環境変数( git(1) 参照)、および
‘diff’ 属性( gitattributes(5) 参照)を介してカスタマイズできます。

   -pオプションが生成するものは、従来のdiff形式とは少々異なります:

  1. 先行して、以下のような "git diff" ヘッダーがあります:

          diff --git a/file1 b/file2

     名前の変更/コピーが含まれない限り、 ‘a/’ と ‘b/’ のファイル名は同じ
     です。 特に、作成または削除の場合でも、 ‘a/’ または ‘b/’ ファイル名
     の代わりに ‘/dev/ null’ が使用されることはありません。

     名前変更/コピーが含まれる場合、 ‘file1’ と‘file2‘ は、それぞれ名前
     変更/コピーのソースファイルの名前と、名前変更/コピーが生成するファ
     イルの名前を示します。

  2. その後に、1つ以上の拡張ヘッダー行達が続きます:

          old mode <mode>
          new mode <mode>
          deleted file mode <mode>
          new file mode <mode>
          copy from <path>
          copy to <path>
          rename from <path>
          rename to <path>
          similarity index <number>
          dissimilarity index <number>
          index <hash>..<hash> <mode>

     ファイルモードは、ファイルタイプとファイル許可ビットを含む6桁の8進
     数として出力されます。

     拡張ヘッダーのパス名には、 ‘a/’ および ‘b/’ プレフィックスは含まれ
     ません。

     類似インデックス(similarity index)は変更されていない行のパーセンテ
     ージであり、非類似インデックス(dissimilarity index)は変更された行の
     パーセンテージです。これは切り捨てられた整数であり、その後にパーセ
     ント記号が続きます。したがって、100％の類似インデックス値は2つの等
     しいファイルを表し、100％の非類似性は古いファイルから新しいファイル
     に移行された行がないことを意味します。

     インデックス行には、変更前後のブロブオブジェクト名が含まれます。
     <mode> は、ファイルモードが変更されない場合に含まれます。それ以外の
     場合、別々の行は古いモードと新しいモードを示します。

  3. 通常の文字でないキャラクタ(\"unusual\" characters)を含むパス名は、
     構成変数 ‘core.quotePath’ で説明されているように引用符で囲まれてい
     ます( git-config(1)参照)。

  4. 出力内のすべての ‘file1’ ファイルはコミット前のファイルを参照し、す
     べての ‘file2’ ファイルはコミット後のファイルを参照します。各変更を
     各ファイルに順番に適用するのは誤りです。たとえば、以下のパッチはaと
     bを交換します:

          diff --git a/a b/b
          rename from a
          rename to b
          diff --git a/b b/a
          rename from b
          rename to a

  5. ハンクのヘッダーには、ハンクが適用される関数の名前が記載されていま
     す。特定の言語に合わせてこれを調整する方法の詳細については、
     gitattributes(5) の "Defining a custom hunk-header" を参照してくだ
     さい。


Combined diff format
********************

diffを生成するコマンドは、マージを表示するときに ‘-c’ または ‘--cc’ オプ
ションを使用して「合成diff」(combined diff)を生成できます。これは
git-diff(1) または git-show(1) でのマージを表示するときのデフォルトの形
式です。 注意: これらのコマンドのいずれかに適切な ‘--diff-merges’ オプシ
ョンを指定して、特定の形式で差分を強制的に生成できることにも注意してくだ
さい。

   合成diff形式は以下のようになります:

     diff --combined describe.c
     index fabadb8,cc95eb0..4866510
     --- a/describe.c
     +++ b/describe.c
     @@@ -98,20 -98,12 +98,20 @@@
             return (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;
       }

     - static void describe(char *arg)
      -static void describe(struct commit *cmit, int last_one)
     ++static void describe(char *arg, int last_one)
       {
      +      unsigned char sha1[20];
      +      struct commit *cmit;
             struct commit_list *list;
             static int initialized = 0;
             struct commit_name *n;

      +      if (get_sha1(arg, sha1) < 0)
      +              usage(describe_usage);
      +      cmit = lookup_commit_reference(sha1);
      +      if (!cmit)
      +              usage(describe_usage);
      +
             if (!initialized) {
                     initialized = 1;
                     for_each_ref(get_name);

  1. まず "git diff" ヘッダーがあり、以下のようになります( ‘-c’ オプショ
     ンが使用されている場合):

          diff --combined file

     または、以下のようになります( ‘--cc’ オプションが使用されている場合
     ):

          diff --cc file

  2. その後に1つ以上の拡張ヘッダー行が続きます(以下の例は、2つの親とのマ
     ージを示しています):

          index <hash>,<hash>..<hash>
          mode <mode>,<mode>..<mode>
          new file mode <mode>
          deleted file mode <mode>,<mode>

     ‘mode <mode>,<mode>..<mode>’ 行は、<mode> の少なくとも1つが他の
     <mode> と異なる場合にのみ表示されます。検出されたコンテンツの移動
     (名前の変更とコピーの検出)に関する情報を含む拡張ヘッダーは、2つの
     <tree-ish> のdiffで機能するように設計されており、合成diff形式では使
     用されません。

  3. その後に2行の from-file/to-file ヘッダーが続きます

          --- a/file
          +++ b/file

     従来の統一diff形式の2行ヘッダーと同様に、 ‘/dev/null’ は、作成また
     は削除されたファイルを通知するために使用されます。

     ただし、 –combined-all-paths オプションが指定されている場合、2行の
     from-file/to-file の代わりに、 N+1 行の from-file/to-file ヘッダー
     が取得されます。ここで、 N はマージコミットの親の数です。

          --- a/file
          --- a/file
          --- a/file
          +++ b/file

     この拡張形式は、名前変更またはコピー検出がアクティブな場合に役立ち
     、別の親のファイルの元の名前を確認できます。

  4. チャンクヘッダーの形式が変更され、誤って ‘patch-p1’ にフィードされ
     るのを防ぎます。合成差分形式は、マージコミットの変更を確認するため
     に作成されたものであり、適用されることを意図したものではありません
     。この変更は、拡張された「インデックス」ヘッダーの変更に似ています:

          @@@ <from-file-range> <from-file-range> <to-file-range> @@@

     合成diff形式のチャンクヘッダーには親の数+1の ‘@’ 文字があります。

   従来の統一diff形式とは異なり、2つのファイルAとBが、 ‘-’ (マイナスは
Aに表示されますが、Bでは削除されます) または ‘+’ (プラスはAにはありませ
んが、Bには追加されます)、または ‘" "’（スペースは変更なし) プレフィック
スを持つ単一の列で表示される場合、この形式は2つ以上のファイル file1,
file2,… を1つのファイルXと比較し、Xが各 fileN とどのように異なるかを示し
ます。ファイルNごとに1つの列が出力行の前に追加され、Xの行が出力行とどの
ように異なるかを示します。

   列Nの ‘-’ 文字は、その行が fileN に表示されているが、結果には表示され
ていないことを意味します。 列Nの ‘+’ 文字は、結果に行が表示され、 fileN
にその行がないことを意味します(つまり、その親の観点から見て行が追加され
たことを示す)。

   上記の出力例では、関数のシグネチャが両方のファイルから見て変更されて
います(したがって、 file1 と file2 の両方から2つの ‘-’ が削除され、さら
に ‘++’ が追加されたため、 file1 と file2 のどちらにも表示されません)。
また、他の8行は file1 と同じですが、 file2 には表示されません(したがって
、接頭辞として ‘+’ が付けられます)。

   ‘git diff-tree -c’ で表示される場合、マージコミットの親をマージ結果と
比較します(つまり、 file1..fileN が親です)。 ‘git diff-files -c’ で表示
される場合、2つの未解決のマージ親を作業ツリーファイルと比較します(つまり
、 file1 はステージ2、別名「私たちのバージョン」、 file2 はステージ3、別
名「彼らのバージョン」です)。


other diff formats
******************

‘--summary’ オプションは、新しく追加、削除、名前変更、およびコピーされた
ファイルを説明します。‘--stat’ オプションは、 diffstat(1) グラフ を出力
に追加します。これらのオプションは、 ‘-p’ などの他のオプションと組み合わ
せることができ、人間が読むことを目的としています。

   名前の変更またはコピーを伴う変更を表示する場合、 ‘--stat’ 出力は、パ
ス名の共通のプレフィックスとサフィックスを組み合わせることにより、パス名
をコンパクトにフォーマットします。 たとえば、4行を変更(modify)しながら
‘arch/i386/Makefile’ を ‘arch/x86/Makefile’ に移動(move)する変更
(change)は、次のように表示されます:

     arch/{i386 => x86}/Makefile    |   4 +--

   ‘--numstat’ オプションは diffstat(1) 情報を提供しますが、人間ではなく
ソフトウェアで読むのを容易にするように設計されています。 ‘--numstat’ 出
力のエントリは以下のようになります:

     1       2       README
     3       1       arch/{i386 => x86}/Makefile

   この形式は、左から右へ:

  1. 追加行数

  2. タブ

  3. 削除行数

  4. タブ

  5. パス名(おそらく rename/copy 情報を含む)

  6. 改行

   ‘-z’ 出力オプションが有効な場合、出力は以下のようにフォーマットされま
す:

     1       2       README NUL
     3       1       NUL arch/i386/Makefile NUL arch/x86/Makefile NUL

   これは:

  1. 追加行数

  2. タブ

  3. 削除行数

  4. タブ

  5. NUL(rename/copy された場合のみ存在します)

  6. プリイメージのパス名

  7. NUL(rename/copy された場合のみ存在します)

  8. ポストイメージのパス名(rename/copy された場合のみ存在します)

  9. NUL

   名前が変更された場合のプリイメージパスの前の追加の ‘NUL’ は、出力を読
み取るスクリプトが、先読みせずに、読み取られている現在のレコードがシング
ルパスレコードであるか、名前変更/コピーレコードであるか、を判断できるよ
うにするためです。追加および削除された行を読み取った後、 ‘NUL’ まで読み
取るとパス名が生成されますが、それが ‘NUL’ の場合、レコードには2つのパス
が表示されます。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-diff-index,  Up: Top

Name
****

git-diff-index — ツリーを作業ツリーまたはインデックスと比較します


Synopsis
********

     git diff-index [-m] [–cached] [–merge-base] [<common diff options>] <tree-ish> [<path>…]


DESCRIPTION
***********

ツリーオブジェクトで見つかったブロブの内容とモードを、作業ツリー内の対応
する追跡中のファイルまたはインデックス内の対応するパスと比較します。
<path>引数が存在する場合、それらのパターンに一致するパスのみを比較します
。それ以外の場合は、追跡中のすべてのファイルが比較されます。


OPTIONS
*******

‘-p’
‘-u’
‘--patch’
     パッチを生成します(generating patches に関するセクションを参照)。

‘-s’
‘--no-patch’
     diff出力を抑制します。デフォルトでパッチを表示する ‘git show’ のよ
     うなコマンド、または ‘--patch’ の効果をキャンセルする場合に便利です
     。

‘-U<n>’
‘--unified=<n>’
     通常の3行ではなく、<n> 行の内容でdiffを生成します。 ‘--patch’ の機
     能を含んでいます。

‘--output=<file>’
     stdout ではなく指定のファイルに出力します。

‘--output-indicator-new=<char>’
‘--output-indicator-old=<char>’
‘--output-indicator-context=<char>’
     生成されたパッチの新しい行、古い行、またはコンテキスト行を示すため
     に使用される文字を指定します。 通常、それらはそれぞれ _+_ 、 _-_ 、
     ’ ’ です。

‘--raw’
     生形式(raw format)でdiffを生成します。 これがデフォルトです。

‘--patch-with-raw’
     ‘-p --raw’ の同義語。

‘--indent-heuristic’
     diffハンクの境界をずらす(shift)ヒューリスティックを有効にして、パッ
     チを読みやすくします。 これがデフォルトです。

‘--no-indent-heuristic’
     インデントヒューリスティック(indent heuristic)を無効にします。

‘--minimal’
     より多くの時間を費やして、可能な限り最小のdiffが生成されるようにし
     ます。

‘--patience’
     "patience diff" アルゴリズムを使用してdiffを生成します。

‘--histogram’
     "histogram diff" アルゴリズムを使用してdiffを生成します。

‘--anchored=<text>’
     "anchored diff" アルゴリズムを使用してdiffを生成します。

     このオプションは複数回指定できます。

     行がソースと宛先の両方に存在し、1回だけ存在し、このテキストで始まる
     場合、このアルゴリズムは、その行が出力に削除または追加として表示さ
     れないようにします。内部で "patience diff" アルゴリズムを使用します
     。

‘--diff-algorithm={patience|minimal|histogram|myers}’
     diffアルゴリズムを選択します。その派生(variants)は以下のとおりです:

     ‘default’, ‘myers’
          基本的な貪欲な差分アルゴリズム(greedy diff algorithm)。現在、
          これがデフォルトです。

     ‘minimal’
          より多くの時間を費やして、可能な限り最小のdiffが生成されるよう
          にします。

     ‘patience’
          パッチを生成する時に "patience diff" アルゴリズムを使います。

     ‘histogram’
          このアルゴリズムは、忍耐アルゴリズム(patience algorithm)を拡張
          して、「発生率の低い共通要素をサポート」(support
          low-occurrence common elements)します。

     たとえば、 あなたが ‘diff.algorithm’ 変数をデフォルト以外の値に設定
     した上で、それでもデフォルト値を使用する場合は、
     ‘--diff-algorithm=default’ オプションを使用する必要があります。

‘--stat[=<width>[,<name-width>[,<count>]]]’
     diffstatを生成します。 デフォルトでは、必要なだけのスペースがファイ
     ル名部分に使用され、残りはグラフ部分に使用されます。最大幅はデフォ
     ルトで端末幅、または端末に接続されていない場合は80桁であり、
     ‘<width>’ で上書きできます。ファイル名部分の幅は、コンマの後に別の
     幅 ‘<name-width>’ を指定することで制限できます。グラフ部分の幅は、
     ‘--stat-graph-width=<width>’ (統計グラフを生成するすべてのコマンド
     に影響します)を使用するか、 ‘diff.statGraphWidth=<width>’ ( ‘git
     format-patch’ に影響しません)を設定することによって制限できます。
     3番目のパラメータ ‘<count>’ を指定することにより、出力を最初の
     ‘<count>’ 行に制限し、それに ‘...’ が続く形にできます。

     これらのパラメータは、 ‘--stat-width=<width>’ と
     ‘--stat-name-width=<name-width>’ と ‘--stat-count=<count>’ を使用し
     て個別に設定することもできます。

‘--compact-summary’
     ファイルの作成や削除( "new" または "gone" 。オプションでシンボリッ
     クリンクの場合は "+l" )、diffstatのモード変更(実行可能ビットを追加
     または削除する場合は、それぞれ "+x" または "-x" )など、拡張ヘッダー
     情報の要約を出力します。情報はファイル名部分とグラフ部分の間に置か
     れます。本機能は ‘--stat’ の機能を含んでいます。

‘--numstat’
     ‘--stat`に似ていますが、プログラムで処理しやすい(machine friendly)よ
     うに、追加および削除された行数を10進表記とパス名で省略形なしで表示
     します。バイナリファイルの場合、 `0 0’ の代わりに2つの ‘-’ を出力し
     ます。

‘--shortstat’
     変更されたファイルの総数と、追加および削除された行の数を含む
     ‘--stat’ 形式の最後の行のみを出力します。

‘-X[<param1,param2,...>]’
‘--dirstat[=<param1,param2,...>]’
     各サブディレクトリの相対的な変更量の分布を出力します。 ‘--dirstat’
     の動作は、パラメータのコンマ区切りリストを渡すことでカスタマイズで
     きます。デフォルトは、 ‘diff.dirstat’ 構成変数によって制御されます
     (git-config(1) 参照)。以下のパラメータを使用できます:

     ‘changes’
          ソースから削除された、または宛先に追加された行をカウントして、
          dirstat数を計算します。これは、ファイル内の純粋なコード移動の
          量を無視します。つまり、ファイル内の行の再配置は、他の変更ほど
          カウントされません。これは、パラメーターが指定されていない場合
          のデフォルトの動作です。

     ‘lines’
          通常の行ベースのdiff分析を実行し、削除/追加された行数を合計し
          て、dirstat数を計算します。 (バイナリファイルの場合、バイナリ
          ファイルには行の概念がないため、代わりに64バイトのチャンクをカ
          ウントします)。 これは ‘changes’ 動作よりも高価な ‘--dirstat’
          動作ですが、他の変更と同じようにファイル内の再配置された行をカ
          ウントします。結果の出力は、他の ‘--*stat’ オプションから得ら
          れるものと一致しています。

     ‘files’
          変更されたファイルの数を数えて、dirstat数を計算します。変更さ
          れた各ファイルは、dirstat分析で等しくカウントされます。これは
          、ファイルの内容をまったく調べる必要がないため、計算コストが最
          もかからない ‘--dirstat’ の動作です。

     ‘cumulative’
          親ディレクトリの子ディレクトリの変更も同様にカウントします。
          ‘cumulative’(累積的) を使用する場合、報告されるパーセンテージ
          の合計が100%を超える場合があることに注意してください。デフォル
          トの(非累積的な)動作は、‘noncumulative’ パラメーターで指定でき
          ます。

     <limit>
          整数パラメーターは、カットオフパーセント(デフォルトでは3%)を指
          定します。指定の割合より少ないディレクトリは、出力に表示されま
          せん。

     例: 変更されたファイルの総数の10%未満のディレクトリを無視し、親ディ
     レクトリに子ディレクトリの数を累積しながら、変更されたファイルをカ
     ウント: ‘--dirstat=files,10,cumulative’

‘--cumulative’
     ‘--dirstat=cumulative’ と同義語

‘--dirstat-by-file[=<param1,param2>...]’
     ‘--dirstat=files,param1,param2...’ と同義語

‘--summary’
     作成、名前変更、モード変更などの拡張ヘッダー情報の短い要約
     (condensed summary)を出力します。

‘--patch-with-stat’
     ‘-p --stat’ と同義語。

‘-z’
     ‘--raw’ または ‘--numstat’ または ‘--name-only’ または
     ‘--name-status’ が指定されている場合は パス名を変更せず、出力フィー
     ルドターミネータとしてNULLを使用してください。

     このオプションがないと、構成変数 ‘core.quotePath’ で説明されている
     ように、 通常の文字以外(unusual characters)を含むパス名が引用符で囲
     まれます(git-config(1) 参照)。

‘--name-only’
     変更されたファイルの名前のみを表示します。 多くの場合、ファイル名は
     UTF-8でエンコードされます。 詳細については、 git-log(1) のマニュア
     ルページにあるエンコーディングに関する議論(the discussion about
     encoding)を参照してください。

‘--name-status’
     変更されたファイルの名前とステータスのみを表示します。ステータス文
     字の意味については、 ‘--diff-filter’ オプションの説明を参照してくだ
     さい。 ‘--name-only’ と同じように、ファイル名はしばしばUTF-8でエン
     コードされます。

‘--submodule[=<format>]’
     サブモジュールの違いをどのように表示するかを指定します。
     ‘--submodule=short’ を指定する場合、 _short_ 形式が使用されます。こ
     の形式は、範囲の最初と最後にコミットの名前を表示するだけです。
     ‘--submodule’ または ‘--submodule=log’ が指定されている場合、 _log_
     形式が使用されます。この形式では、 git-submodule(1) ‘summary’ のよ
     うに範囲内のコミットが一覧表示されます。 ‘--submodule=diff’ が指定
     されている場合、 _diff_ 形式が使用されます。この形式は、コミット範
     囲間のサブモジュールの内容の変更のインラインdiffを示します。
     configオプションが設定されていない場合、デフォルトは
     ‘diff.submodule’ または _short_ 形式です。

‘--color[=<when>]’
     色付きのdiffを表示します。 ‘--color’ (つまり、 _=<when>_ ) は
     ‘--color=always’ と同じです。 _<when>_ は、 ‘always’ または ‘never’
     または ‘auto’ のいずれかになります。

‘--no-color’
     カラーdiffをオフにします。 ‘--color=never’ と同じです。

‘--color-moved[=<mode>]’
     ソースコードの移動した行を別の色にします。 <mode>は、オプションが指
     定されていない場合はデフォルトで _no_ になり、 モードが指定されてい
     ないオプションが指定されている場合は _zebra_ になります。 モードは
     以下のいずれかでなければなりません:

     no
          移動行をハイライトしません。

     default
          ‘zebra’ の同義語です。これは、将来、より賢明なモードに変更され
          る可能性があります。

     plain
          ある場所で追加され、別の場所で削除された行は、
          _color.diff.newMoved_ で色付けされます。 同様に、
          _color.diff.oldMoved_ は、差分の別の場所に追加された削除された
          行に使用されます。このモードは移動された行をピックアップします
          が、コードのブロックが順列なしで移動されたかどうかを判断するこ
          とはレビューではあまり役に立ちません。

     blocks
          少なくとも20文字の英数字の移動テキストのブロックが貪欲に検出さ
          れます。検出されたブロックは、 _color.diff.{old,new}Moved_ 色
          のいずれかを使用して色付けされます。隣接するブロックを区別する
          ことはできません。

     zebra
          移動されたテキストのブロックは、 _blocks_ モードの場合と同様に
          検出されます。 ブロックは、 _color.diff.{old,new}Moved_ 色また
          は _color.diff.{old,new}MovedAlternative_ 色のいずれかを使用し
          て色付けされます。2つの色の間の変化は、新しいブロックが検出さ
          れたことを示します。

     dimmed-zebra
          _zebra_ に似ていますが、移動されたコードの重要でない部分の追加
          の調光(dimmed)が実行されます。隣接する2つのブロックの境界線は
          興味深いと見なされ、残りは興味深いものではありません。
          ‘dimmed_zebra’ は非推奨の同義語です。

‘--no-color-moved’
     移動検出をオフにします。 これは、構成設定を上書きするために使用でき
     ます。 ‘--color-moved=no’ と同じです。

‘--color-moved-ws=<modes>’
     これは、 ‘--color-moved’ の移動検出を実行するときに空白を無視する方
     法を設定します。 これらのモードは、コンマ区切りのリストとして指定で
     きます:

     no
          移動行検出を実行するときに、空白(whitespace)を無視しない。

     ignore-space-at-eol
          行末(EOL)での空白(whitespace)の変更を無視します。

     ignore-space-change
          空白(whitespace)の数の変更は無視してください。これは、行末の空
          白(whitespace)を無視し、1つ以上の空白文字(whitespace
          characters)の他のすべてのシーケンスを同等と見なします。

     ignore-all-space
          行を比較するときは空白(whitespace)を無視します。これにより、一
          方の行に空白があり、もう一方の行に空白がない場合でも、違いは無
          視されます。

     allow-indentation-change
          最初に移動検出で空白(whitespace)を無視し、空白(whitespace)の変
          更が行ごとに同じである場合にのみ、移動されたコードブロックをブ
          ロックにグループ化します。 これは他のモードと互換性がありませ
          ん。

‘--no-color-moved-ws’
     移動検出を実行するときは、空白(whitespace)を無視しないでください。
     これは、構成設定を上書きするために使用できます。
     ‘--color-moved-ws=no’ と同じです。

‘--word-diff[=<mode>]’
     <mode> を使用して変更された単語を区切ることにより、単語のdiffを表示
     します。デフォルトでは、単語は空白で区切られます。 以下の
     ‘--word-diff-regex’ を参照してください。 <mode> のデフォルトは
     ’plain’です。 <mode> は以下のいずれかである必要があります:

     color
          変更された単語(word)を色のみを使用して強調表示します。
          ‘--color’ を意味します。

     plain
          単語を ‘[-removed-]’ および ‘{+added+}’ として表示します。 区
          切り文字が入力に表示されている場合、区切り文字をエスケープしよ
          うとしないため、出力があいまいになる可能性があります。

     porcelain
          スクリプトの使用を目的とした特別な行ベースの形式を使用します。
          追加/削除/無変更については、通常の統一されたdiff形式で印刷され
          、行の先頭の ‘+’/‘-’/‘ ‘ 文字で始まり、行の終わりまで続きます
          。入力の改行は、それ自体の行のチルダ ‘~’ で表されます。

     none
          単語(word)のdiffを再度無効にします。

     注意: 最初のモードの名前にもかかわらず、有効になっている場合、すべ
     てのモードで変更された部分を強調するために色が使用されることに注意
     してください。

‘--word-diff-regex=<regex>’
     空白以外を単語と見なす代わりに、 <regex> を使用して単語が何であるか
     を決定します。また、すでに有効になっていない限り、この機能は
     ‘--word-diff’ の機能を含んでいます。

     <regex> の重複しないマッチはすべて、単語と見なされます。これらのマ
     ッチの間のすべては空白と見なされ、違いを見つけるためとしては無視さ
     れます！ 正規表現に ‘|[^[:space:]]’ を追加して、空白以外のすべての
     文字とマッチすることを確認することをお勧めします。改行を含むマッチ
     は、改行で黙って切り捨てられます！

     たとえば、 ‘--word-diff-regex=.’ は各文字を単語として扱い、それに応
     じて文字ごとの違いを表示します。

     正規表現は、diffドライバーまたは構成オプション(configuration
     option)を介して設定することもできます。 gitattributes(5) または
     git-config(1) を参照してください。これを指定すると、diffドライバー
     または構成設定(configuration settings)が明示的にオーバーライドされ
     ます。diffドライバーは構成設定を上書きします。

‘--color-words[=<regex>]’
     ‘--word-diff=color’ に ‘--word-diff-regex=<regex>’ を加えたものに相
     当します(正規表現が指定されている場合)。

‘--no-renames’
     構成ファイルにデフォルトで指定されている場合でも、名前変更の検出を
     オフにします。

‘--[no-]rename-empty’
     名前変更ソースとして空のブロブを使用するかどうか。

‘--check’
     変更によって競合マーカーまたは空白エラーが発生した場合に警告します
     。空白エラーと見なされるものは、 ‘core.whitespace’ 構成によって制御
     されます。 デフォルトでは、末尾の空白(空白のみで構成される行を含む
     )と、行の最初のインデント内で直後にタブ文字が続くスペース文字は、空
     白エラーと見なされます。問題が見つかった場合は、ゼロ以外のステータ
     スで終了します。なお、 –exit-code とは互換性がありません。

‘--ws-error-highlight=<kind>’
     diffの ‘context’ または ‘old’ または ‘new’ 行の空白エラーを強調表示
     します。複数の値はコンマで区切られ、 ‘none’ は前の値をリセットし、
     ‘default’ はリストを ‘new’ にリセットし、 ‘all’ は old、new、
     context の省略形です。このオプションが指定されておらず、構成変数
     ‘diff.wsErrorHighlight’ が設定されていない場合、 ‘new’ 行の空白エラ
     ーのみが強調表示されます。空白エラーは ‘color.diff.whitespace’ で色
     分けされています。

‘--full-index’
     パッチ形式の出力を生成するときは、最初の一握りの文字(first handful
     of characters)の代わりに、「インデックス」行にイメージ前およびイメ
     ージ後の完全ブロブオブジェクト名を表示します。

‘--binary’
     ‘--full-index’ に加えて、 ‘git-apply’ で適用できるバイナリ差分を出
     力します。 ‘--patch’ の機能を含んでいます。

‘--abbrev[=<n>]’
     完全な40バイトの16進オブジェクト名をdiff-raw形式の出力とdiff-treeヘ
     ッダー行に表示する代わりに、オブジェクトを一意に参照する、少なくと
     も _<n>_ 桁の16進数の長さの最短のプレフィックスを表示します。diffパ
     ッチ出力形式では、 ‘--full-index’ が優先されます。つまり、
     ‘--full-index’ が指定されている場合、 ‘--abbrev’ に関係なく、完全な
     ブロブ名が表示されます。デフォルト以外の桁数は、 ‘--abbrev=<n>’ で
     指定できます。

‘-B[<n>][/<m>]’
‘--break-rewrites[=[<n>][/<m>]]’
     完全な書き換えの変更を削除と作成のペアに分割します。これには以下の
     2つの目的があります:

     これは、ファイルの完全な書き換えに相当する変更が、コンテキストとし
     てテキストで一致する非常に少数の行と混合された一連の削除と挿入とし
     てではなく、古いものすべての単一の削除とそれに続く すべての新しいも
     のを1回挿入し、数値 ‘m’ が -B オプションのこの側面を制御します(デフ
     ォルトは60%)。 ‘-B/70%’ は、Gitがそれを完全な書き換えと見なすために
     、元の30%未満が結果に残る必要があることを指定します(つまり、結果の
     パッチは、コンテキスト行と混合された一連の削除と挿入になります)。

     -M と一緒に使用すると、完全に書き換えられたファイルも名前変更のソー
     スと見なされ(通常、 -M は、消えたファイルのみを名前変更のソースと見
     なします)、数 ‘n’ が -Bオプションのこの側面を制御します(デフォルト
     は50%)。 ‘-B20%’ は、ファイルのサイズの20%以上と比較して、追加およ
     び削除を伴う変更が、別のファイルへの名前変更の可能なソースとして取
     得される資格があることを指定します。

‘-M[<n>]’
‘--find-renames[=<n>]’
     名前の変更(renames)を検知する。 ‘n’ が指定されている場合、それは類
     似性インデックスのしきい値です (つまり、ファイルのサイズと比較した
     追加/削除の量)。 たとえば、 ‘-M90%’ は、ファイルの90%以上が変更され
     ていない場合、 Gitが削除/追加のペアを名前変更と見なす必要があること
     を意味します。 ‘%’ 記号がない場合、数値は小数として読み取られ、その
     前に小数点が付きます。 つまり、 ‘-M5’ は0.5になるため、‘-M50%’ と同
     じになります。 同様に、 ‘-M05’ は ‘-M5%’ と同じです。 検出を正確な
     名前変更に制限するには、 ‘-M100%’ を使用します。 デフォルトの類似性
     インデックスは50%です。

‘-C[<n>]’
‘--find-copies[=<n>]’
     名前と同様コピーを検出します。 ‘--find-copies-harder’ ‘も参照してく
     ださい。 `n’ を指定すると、 ‘-M<n>’ と同じ意味になります。

‘--find-copies-harder’
     パフォーマンス上の理由から、デフォルトでは、 ‘-C’ オプションは、コ
     ピーの元のファイルが同じ変更組(changeset)で変更された場合にのみコピ
     ーを検索します。このフラグにより、コマンドは変更されていないファイ
     ルをコピー元の候補として検査します。これは大規模なプロジェクトでは
     非常にコストのかかる操作であるため、注意して使用してください。 複数
     の ‘-C’ オプションを指定しても同じ効果があります。

‘-D’
‘--irreversible-delete’
     削除するプレイメージ(preimage)を省略します。つまり、ヘッダーのみを
     出力し、プレイメージと ‘/dev/null’ の差分は出力しません。結果のパッ
     チは、 ‘patch’ または ‘git apply’ で適用されることを意図していませ
     ん。これは、変更後にテキストを確認することに集中したい人のためだけ
     のものです。さらに、出力には明らかに、そのようなパッチを手動でも逆
     に適用するのに十分な情報が不足しているため、オプションの名前が付け
     られています。

     ‘-B’ と併用する場合は、削除/作成ペアの削除部分のプリイメージ
     (preimage)も省略してください。

‘-l<num>’
     ‘-M’ および ‘-C’ オプションには、名前変更/コピーのサブセットを安価
     に検出できるいくつかの準備手順が含まれ、その後に、残りのすべてのペ
     アになっていない宛先をすべての関連ソースと比較する徹底的なフォール
     バック部分が続きます。(名前の変更の場合、残りのペアになっていないソ
     ースのみが関係します。コピーの場合、すべての元のソースが関係します
     )。Nのソースと宛先の場合、この徹底的なチェックのコストは O(N^2) で
     す。このオプションは、関係するソース/宛先ファイルの数が指定された数
     を超えた場合に、名前変更/コピー検出の完全な部分が実行されないように
     します。デフォルトは diff.renameLimit です。 値0は無制限として扱わ
     れることに注意してください。

‘--diff-filter=[(A|C|D|M|R|T|U|X|B)...[*]]’
     追加(Add)・コピー(Copy)・削除(Delete)・変更(Modify)・名前変更
     (Rename)されたファイル、タイプが変更されたファイル(T)、マージされて
     いないファイル(U)、不明なファイル(X)、またはペアリングが壊れている
     ファイル(B)のみを選択します。フィルタ文字(無しも含む)の任意の組み合
     わせを使用できます。 組み合わせに ‘*’ (全てまたは無し)が追加される
     と、比較で他の基準に一致するファイルがある場合、すべてのパスが選択
     されます。 他の基準に一致するファイルがない場合、何も選択されません
     。

     また、逆に、除外したい時はこれらの各大文字指定を小文字にして指定し
     ます。例えば ‘--diff-filter=ad’ は、追加および削除されたパスを除外
     します。

     注意:すべてのdiffがすべてのタイプを特徴とするわけではないことに注意
     してください。 たとえば、インデックスから作業ツリーへのdiffにエント
     リを追加することはできません(diffに含まれるパスのセットは、インデッ
     クスの内容によって制限されるため)。 同様に、これらのタイプの検出が
     無効になっている場合、コピーおよび名前変更されたエントリは表示され
     ません。

‘-S<string>’
     ファイル内の指定の文字列(つまり、 addition 、deletion)の出現回数の
     差分を調べます。スクリプターが使用することを目的としています。

     (構造体など)コードの正確なブロックを探していて、そのブロックが最初
     に作成されてからの履歴を知りたい場合に便利です。この機能を繰り返し
     使用して、プリイメージ(preimage)内の興味深いブロックを ‘-S’ にフィ
     ードバックし、そしてあなたはそれをブロックの最初のバージョンを取得
     するまで続けます。

     バイナリファイルも検索されます。

‘-G<regex>’
     パッチテキストに <regex> にマッチする 追加/削除 された行が含まれて
     いる差分を探します。

     ‘-S<regex> --pickaxe-regex’ と ‘-G<regex>’ の違いを説明するために、
     同じファイル内で以下のdiffを使用してコミットすることを検討してくだ
     さい:

          +    return frotz(nitfol, two->ptr, 1, 0);
          ...
          -    hit = frotz(nitfol, mf2.ptr, 1, 0);

     ‘git log -G"frotz\(nitfol"’ はこのコミットを表示しますが、 ‘git log
     -S"frotz\(nitfol" --pickaxe-regex’ は表示しません(その文字列の出現
     回数が変更されなかったため)。

     ‘--text’ が提供されていない限り、 textconv フィルターのないバイナリ
     ファイルのパッチは無視されます。

     詳細については gitdiffcore(7) の _pickaxe_ エントリを参照してくださ
     い。

‘--find-object=<object-id>’
     指定されたオブジェクトの出現回数を変更する違いを探します。 ‘-S’ と
     同様に、引数だけが異なり、特定の文字列ではなく特定のオブジェクト
     IDを検索します。

     オブジェクトは、ブロブまたはサブモジュールのコミットにすることがで
     きます。 これは、 ‘git-log’ の ‘-t’ オプションがツリーも探すことを
     意味します。

‘--pickaxe-all’
     ‘-S’ または ‘-G’ が変更を見つけたら、 <string> の変更を含むファイル
     だけでなく、その変更セット(changeset)のすべての変更を表示します。

‘--pickaxe-regex’
     ‘-S’ に指定した <string> を拡張POSIX正規表現として扱います。

‘-O<orderfile>’
     ファイルが出力に表示される順序を制御します。これは ‘diff.orderFile’
     構成変数をオーバーライドします(git-config(1) 参照)。
     ‘diff.orderFile’ をキャンセルするには、 ‘-O/dev/null’ を使用します
     。

     出力順序は、 <orderfile> 内のglobパターンの順序によって決定されます
     。最初のパターンに一致するパス名を持つすべてのファイルが最初に出力
     され、2番目のパターンに一致する(ただし最初のパターンには一致しない
     )パス名を持つすべてのファイルが次に出力されます。パス名がどのパター
     ンとも一致しないすべてのファイルは、ファイルの最後に暗黙のすべて一
     致パターンがあるかのように、最後に出力されます。複数のパス名のラン
     クが同じである場合(同じパターンに一致するが、以前のパターンには一致
     しない)、相互の出力順序は通常の順序です。

     <orderfile> は以下のとおりパースされます:

        • 空白行は無視されるため、読みやすくするための区切りとして使用で
          きます。

        • ハッシュ ("‘#’") で始まる行は無視されるため、コメントに使用で
          きます。 パターンがハッシュで始まる場合は、パターンの先頭にバ
          ックスラッシュ(訳注:日本では環境により円記号)("‘\’") を追加し
          ます。

        • 他の各行には、単一のパターンが含まれています。

     パターンは、 FNM_PATHNAME フラグなしで fnmatch(3) に使用されるパタ
     ーンと同じ構文とセマンティクスを持ちますが、最終的なパス名コンポー
     ネントをいくつも削除するとパターンと一致する場合、パス名もパターン
     と一致する点が異なります。 たとえば、パターン "‘foo*bar’" は、
     "‘fooasdfbar’" および "‘foo/bar/baz/asdf’" と一致しますが、
     "‘foobarx’" とは一致しません。

‘--skip-to=<file>’
‘--rotate-to=<file>’
     名前付き <file> の前のファイルを出力から破棄するか(スキップして)、
     出力の最後に移動させます(ローテーションさせます)。 これらは主に
     ‘git difftool’ コマンドを使用するために考案されたものであり、それ以
     外の場合はあまり役に立たない可能性があります。

‘-R’
     2つの入力を交換します。 つまり、インデックスまたはディスク上のファ
     イルとツリーの内容の違いを表示します。

‘--relative[=<path>]’
‘--no-relative’
     プロジェクトのサブディレクトリから実行する場合、このオプションを使
     用して、ディレクトリ外の変更を除外し、それに関連するパス名を表示す
     るように指示できます。サブディレクトリ(ベアリポジトリなど)にいない
     場合は、引数として <path> を指定することで、出力を作成するサブディ
     レクトリに名前を付けることができます。 ‘--no-relative`は、
     `diff.relative’ 設定オプションと以前の ‘--relative’ の両方を打ち消
     すために使用できます。

‘-a’
‘--text’
     すべてのファイルをテキストとして扱います。

‘--ignore-cr-at-eol’
     比較を行うときは、行末のキャリッジリターン(carriage-return)を無視し
     ます。

‘--ignore-space-at-eol’
     行末(EOL)での空白(whitespace)の変更を無視します。

‘-b’
‘--ignore-space-change’
     空白(whitespace)の数の変更は無視してください。これは、行末の空白
     (whitespace)を無視し、1つ以上の空白文字(whitespace characters)の他
     のすべてのシーケンスを同等と見なします。

‘-w’
‘--ignore-all-space’
     行を比較するときは空白を無視します。 これにより、一方の行に空白があ
     り、もう一方の行に空白がない場合でも、違いは無視されます。

‘--ignore-blank-lines’
     全て空白の行の変更は無視します。

‘-I<regex>’
‘--ignore-matching-lines=<regex>’
     すべての行が <regex> にマッチする変更を無視します。このオプションは
     複数回指定できます。

‘--inter-hunk-context=<lines>’
     指定された行数までの差分ハンク間のコンテキストを表示し、それによっ
     て互いに近いハンクを融合します。デフォルトは
     ‘diff.interHunkContext’ で、設定オプションが設定されていない場合は
     0です。

‘-W’
‘--function-context’
     関数全体を各変更のコンテキスト行として表示します。関数名は、 ‘git
     diff’ がパッチハンクヘッダーを処理するのと同じ方法で決定されます
     (gitattributes(5) の _Defining a custom hunk-header_ を参照)。

‘--exit-code’
     diff(1）と同様のコードでプログラムを終了させます。つまり、違いがあ
     った場合は 1 で終了し、 0 は違いがないことを意味します。

‘--quiet’
     プログラムのすべての出力を無効にします。 ‘--exit-code’ を意味します
     。

‘--ext-diff’
     外部diffヘルパーの実行を許可します。 gitattributes(5) を使用して外
     部diffドライバーを設定する場合は、 git-log(1) およびその仲間と一緒
     にこのオプションを使用する必要があります。

‘--no-ext-diff’
     外部diffドライバーを禁止します。

‘--textconv’
‘--no-textconv’
     バイナリファイルを比較するときに、外部テキスト変換フィルターの実行
     を許可(または禁止)します。 詳細については、 gitattributes(5) を参照
     してください。textconvフィルターは通常、一方向の変換であるため、結
     果のdiffは人間の消費に適していますが、適用(apply)することはできませ
     ん。このため、textconvフィルターは、 git-diff(1) および git-log(1)
     に対してのみデフォルトで有効になりますが、 git-format-patch(1) また
     はdiff配管コマンドに対しては有効になりません。

‘--ignore-submodules[=<when>]’
     diff生成のサブモジュールへの変更を無視します。 <when> は、 none・
     untracked・dirty・allのいずれかになります。これがデフォルトです。
     noneを使用すると、追跡されていないファイルまたは変更されたファイル
     が含まれている場合、またはそのHEADがスーパープロジェクトに記録され
     ているコミットと異なる場合にサブモジュールが変更されたと見なされ、
     git-config(1) または gitmodules(5) の ignoreオプションの設定をオー
     バーライドするために使用できます。untrackedが使用されている場合、サ
     ブモジュールには追跡されていないコンテンツのみが含まれている場合、
     サブモジュールはダーティとは見なされません(ただし、変更されたコンテ
     ンツはスキャンされます)。「dirty」を使用すると、サブモジュールの作
     業ツリーへのすべての変更が無視され、スーパープロジェクトに格納され
     ているコミットへの変更のみが表示されます(これは1.7.0までの動作でし
     た)。「all」を使用すると、サブモジュールへのすべての変更が非表示に
     なります。

‘--src-prefix=<prefix>’
     "a/" の代わりに、与えられたソースプレフィックス(source prefix)を表
     示します。

‘--dst-prefix=<prefix>’
     "b/" の代わりに、指定された宛先プレフィックス(destination prefix)を
     表示します。

‘--no-prefix’
     送信元(source)または宛先(destination)のプレフィックスを表示しません
     。

‘--line-prefix=<prefix>’
     出力のすべての行に追加のプレフィックスを付加します。

‘--ita-invisible-in-index’
     デフォルトでは、 "git add -N" によって追加されたエントリは、 "git
     diff" に既存の空のファイルとして表示され、 "git diff –cached" に新
     しいファイルとして表示されます。このオプションを使用すると、エント
     リは "git diff" では新しいファイルとして表示され、 "git diff
     –cached" では存在しません。このオプションは、
     ‘--ita-visible-in-index’ で元に戻すことができます。どちらのオプショ
     ンも実験的なものであり、将来削除される可能性があります。

   これらの一般的なオプションの詳細については、 gitdiffcore(7) も参照し
てください。

<tree-ish>
     diffするツリーオブジェクトのID。

‘--cached’
     ディスク上のファイルはまったく考慮しないでください。

‘--merge-base’
     <tree-ish>を直接比較する代わりに、<tree-ish>とHEADの間のマージベー
     スを使用してください。 <tree-ish>はコミットでなければなりません。

‘-m’
     デフォルトでは、インデックスに記録されているがチェックアウトされて
     いないファイルは削除済みとして報告されます。このフラグにより、 ‘git
     diff-index’ はチェックアウトされていないファイルは全て最新とします
     。


Raw output format
*****************

‘git-diff-index’ と ‘git-diff-tree’ と ‘git-diff-files’ と ‘git diff
--raw’ からの生の出力形式は非常に似ています。

   これらのコマンドはすべて、2つのセットを比較します。なお、比較されるも
のは異なります:

git-diff-index <tree-ish>
     <tree-ish> とファイルシステム上のファイルを比較します。

git-diff-index –cached <tree-ish>
     <tree-ish> とインデックスを比較します。

git-diff-tree [-r] <tree-ish-1> <tree-ish-2> [<pattern>…]
     2つの引数で指定されたツリーを比較します。

git-diff-files [<pattern>…]
     インデックスとファイルシステム上のファイルを比較します。

   "git-diff-tree" コマンドは、比較対象のハッシュ値を出力することで出力
を開始します。その後、すべてのコマンドは、変更されたファイルごとに1つの
出力行を出力します。

   出力行は以下のようにフォーマットされます:

     in-place edit  :100644 100644 bcd1234 0123456 M file0
     copy-edit      :100644 100644 abcd123 1234567 C68 file1 file2
     rename-edit    :100644 100644 abcd123 1234567 R86 file1 file3
     create         :000000 100644 0000000 1234567 A file4
     delete         :100644 000000 1234567 0000000 D file5
     unmerged       :000000 000000 0000000 0000000 U file6

   つまり、左から右へ:

  1. コロン(:)

  2. "src" のモード。作成(creation)またはマージされていない(unmerged)場
     合は 000000

  3. 空白

  4. "dst" のモード。作成(creation)またはマージされていない(unmerged)場
     合は 000000

  5. 空白

  6. "src" のsha1。作成(creation)またはマージされていない(unmerged)場合
     は 0{40}

  7. 空白

  8. "dst" のsha1。作成(creation)またはマージされていない(unmerged)また
     は作業ツリーにある場合は 0{40}

  9. 空白

  10. ステータスの後に、オプションの「スコア数」("score" number)が続きま
     す

  11. ‘-z’ オプションが使用されている場合はタブまたはNUL

  12. "src" のパス

  13. ‘-z’ オプションが使用されている場合タブまたはNUL。ステータスCまた
     はRにのみ存在します

  14. "dst" のパス。ステータスCまたはRにのみ存在します

  15. LFでレコードを終了します。 ‘-z’ オプションが使用されている場合は
     NULでレコードを終了します。

   ステータス文字の種類は以下のとおり:

   • A: ファイルの追加

   • C: ファイルを新しいファイルにコピー

   • D: ファイルの削除

   • M: ファイルの内容やモードの変更

   • R: ファイル名の名前変更

   • T: ファイルのタイプを変更

   • U: ファイルはマージされていません(コミットする前にマージを完了する
     必要があります)

   • X: 「不明な」変更タイプ(おそらくバグです。報告してください)

   ステータス文字CとRの後には常にスコアが続きます(移動またはコピーのソー
スとターゲットの間の類似性のパーセンテージを示します)。ステータス文字Mの
後には、ファイルの書き換えのスコア(非類似度のパーセンテージを示す)が続く
場合があります。

   <sha1> は、ファイルがファイルシステム上で新規で、インデックスと同期し
ていない場合、すべて0として表示されます。

   例:

     :100644 100644 5be4a4a 0000000 M file.c

   ‘-z’ オプションを指定しない場合、構成変数 ‘core.quotePath’ で説明され
ているように、通常の文字以外(unusual characters)を含むパス名が引用符で囲
まれます(git-config(1) 参照)。 ‘-z’ を使用すると、ファイル名がそのまま出
力され、行はNULバイトで終了します。


diff format for merges
**********************

"git-diff-tree" と "git-diff-files" と "git-diff –raw" は、 ‘-c’ または
‘--cc’ オプションを使用して、マージコミットに対してもdiff出力を生成でき
ます。出力は、以下の点で上記の形式とは異なります:

  1. 親ごとにコロン(:)があります

  2. より多くの "src" モードと "src" sha1があります

  3. statusは、各親のステータス文字を連結したものです

  4. オプションの「スコア数」はありません

  5. ファイルのタブ区切りのパス名

   ‘-c’ および ‘ -cc‘ の場合、履歴のいずれかの側でファイルの名前が変更さ
れた場合でも、宛先(dst)または最終パスのみが表示されます。
‘--combined-all-paths’ を使用すると、各親のパスの名前が表示され、それに
続いてマージコミットのパスの名前が表示されます。

   例: ‘--combined-all-paths’ を使用しない ‘-c’ および ‘--cc’ の場合:

     ::100644 100644 100644 fabadb8 cc95eb0 4866510 MM       desc.c
     ::100755 100755 100755 52b7a2d 6d1ac04 d2ac7d7 RM       bar.sh
     ::100644 100644 100644 e07d6c5 9042e82 ee91881 RR       phooey.c

   例: ‘-c’ または ‘--cc’ のいずれかに ‘--combined-all-paths’ が追加され
た場合:

     ::100644 100644 100644 fabadb8 cc95eb0 4866510 MM       desc.c  desc.c  desc.c
     ::100755 100755 100755 52b7a2d 6d1ac04 d2ac7d7 RM       foo.sh  bar.sh  bar.sh
     ::100644 100644 100644 e07d6c5 9042e82 ee91881 RR       fooey.c fuey.c  phooey.c

   注意: ’combined diff’は、すべての親から変更されたファイルのみをリスト
することに注意してください。


Generating patch text with -p
*****************************

git-diff(1) 、 git-log(1) 、 git-show(1) 、 git-diff-index(1) 、
git-diff-tree(1) 、 git-diff-files(1) に ‘-p’ オプションを付けて実行する
とパッチテキストを生成します。パッチテキストの作成は、
‘GIT_EXTERNAL_DIFF’ と ‘GIT_DIFF_OPTS’ 環境変数( git(1) 参照)、および
‘diff’ 属性( gitattributes(5) 参照)を介してカスタマイズできます。

   -pオプションが生成するものは、従来のdiff形式とは少々異なります:

  1. 先行して、以下のような "git diff" ヘッダーがあります:

          diff --git a/file1 b/file2

     名前の変更/コピーが含まれない限り、 ‘a/’ と ‘b/’ のファイル名は同じ
     です。 特に、作成または削除の場合でも、 ‘a/’ または ‘b/’ ファイル名
     の代わりに ‘/dev/ null’ が使用されることはありません。

     名前変更/コピーが含まれる場合、 ‘file1’ と‘file2‘ は、それぞれ名前
     変更/コピーのソースファイルの名前と、名前変更/コピーが生成するファ
     イルの名前を示します。

  2. その後に、1つ以上の拡張ヘッダー行達が続きます:

          old mode <mode>
          new mode <mode>
          deleted file mode <mode>
          new file mode <mode>
          copy from <path>
          copy to <path>
          rename from <path>
          rename to <path>
          similarity index <number>
          dissimilarity index <number>
          index <hash>..<hash> <mode>

     ファイルモードは、ファイルタイプとファイル許可ビットを含む6桁の8進
     数として出力されます。

     拡張ヘッダーのパス名には、 ‘a/’ および ‘b/’ プレフィックスは含まれ
     ません。

     類似インデックス(similarity index)は変更されていない行のパーセンテ
     ージであり、非類似インデックス(dissimilarity index)は変更された行の
     パーセンテージです。これは切り捨てられた整数であり、その後にパーセ
     ント記号が続きます。したがって、100％の類似インデックス値は2つの等
     しいファイルを表し、100％の非類似性は古いファイルから新しいファイル
     に移行された行がないことを意味します。

     インデックス行には、変更前後のブロブオブジェクト名が含まれます。
     <mode> は、ファイルモードが変更されない場合に含まれます。それ以外の
     場合、別々の行は古いモードと新しいモードを示します。

  3. 通常の文字でないキャラクタ(\"unusual\" characters)を含むパス名は、
     構成変数 ‘core.quotePath’ で説明されているように引用符で囲まれてい
     ます( git-config(1)参照)。

  4. 出力内のすべての ‘file1’ ファイルはコミット前のファイルを参照し、す
     べての ‘file2’ ファイルはコミット後のファイルを参照します。各変更を
     各ファイルに順番に適用するのは誤りです。たとえば、以下のパッチはaと
     bを交換します:

          diff --git a/a b/b
          rename from a
          rename to b
          diff --git a/b b/a
          rename from b
          rename to a

  5. ハンクのヘッダーには、ハンクが適用される関数の名前が記載されていま
     す。特定の言語に合わせてこれを調整する方法の詳細については、
     gitattributes(5) の "Defining a custom hunk-header" を参照してくだ
     さい。


Combined diff format
********************

diffを生成するコマンドは、マージを表示するときに ‘-c’ または ‘--cc’ オプ
ションを使用して「合成diff」(combined diff)を生成できます。これは
git-diff(1) または git-show(1) でのマージを表示するときのデフォルトの形
式です。 注意: これらのコマンドのいずれかに適切な ‘--diff-merges’ オプシ
ョンを指定して、特定の形式で差分を強制的に生成できることにも注意してくだ
さい。

   合成diff形式は以下のようになります:

     diff --combined describe.c
     index fabadb8,cc95eb0..4866510
     --- a/describe.c
     +++ b/describe.c
     @@@ -98,20 -98,12 +98,20 @@@
             return (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;
       }

     - static void describe(char *arg)
      -static void describe(struct commit *cmit, int last_one)
     ++static void describe(char *arg, int last_one)
       {
      +      unsigned char sha1[20];
      +      struct commit *cmit;
             struct commit_list *list;
             static int initialized = 0;
             struct commit_name *n;

      +      if (get_sha1(arg, sha1) < 0)
      +              usage(describe_usage);
      +      cmit = lookup_commit_reference(sha1);
      +      if (!cmit)
      +              usage(describe_usage);
      +
             if (!initialized) {
                     initialized = 1;
                     for_each_ref(get_name);

  1. まず "git diff" ヘッダーがあり、以下のようになります( ‘-c’ オプショ
     ンが使用されている場合):

          diff --combined file

     または、以下のようになります( ‘--cc’ オプションが使用されている場合
     ):

          diff --cc file

  2. その後に1つ以上の拡張ヘッダー行が続きます(以下の例は、2つの親とのマ
     ージを示しています):

          index <hash>,<hash>..<hash>
          mode <mode>,<mode>..<mode>
          new file mode <mode>
          deleted file mode <mode>,<mode>

     ‘mode <mode>,<mode>..<mode>’ 行は、<mode> の少なくとも1つが他の
     <mode> と異なる場合にのみ表示されます。検出されたコンテンツの移動
     (名前の変更とコピーの検出)に関する情報を含む拡張ヘッダーは、2つの
     <tree-ish> のdiffで機能するように設計されており、合成diff形式では使
     用されません。

  3. その後に2行の from-file/to-file ヘッダーが続きます

          --- a/file
          +++ b/file

     従来の統一diff形式の2行ヘッダーと同様に、 ‘/dev/null’ は、作成また
     は削除されたファイルを通知するために使用されます。

     ただし、 –combined-all-paths オプションが指定されている場合、2行の
     from-file/to-file の代わりに、 N+1 行の from-file/to-file ヘッダー
     が取得されます。ここで、 N はマージコミットの親の数です。

          --- a/file
          --- a/file
          --- a/file
          +++ b/file

     この拡張形式は、名前変更またはコピー検出がアクティブな場合に役立ち
     、別の親のファイルの元の名前を確認できます。

  4. チャンクヘッダーの形式が変更され、誤って ‘patch-p1’ にフィードされ
     るのを防ぎます。合成差分形式は、マージコミットの変更を確認するため
     に作成されたものであり、適用されることを意図したものではありません
     。この変更は、拡張された「インデックス」ヘッダーの変更に似ています:

          @@@ <from-file-range> <from-file-range> <to-file-range> @@@

     合成diff形式のチャンクヘッダーには親の数+1の ‘@’ 文字があります。

   従来の統一diff形式とは異なり、2つのファイルAとBが、 ‘-’ (マイナスは
Aに表示されますが、Bでは削除されます) または ‘+’ (プラスはAにはありませ
んが、Bには追加されます)、または ‘" "’（スペースは変更なし) プレフィック
スを持つ単一の列で表示される場合、この形式は2つ以上のファイル file1,
file2,… を1つのファイルXと比較し、Xが各 fileN とどのように異なるかを示し
ます。ファイルNごとに1つの列が出力行の前に追加され、Xの行が出力行とどの
ように異なるかを示します。

   列Nの ‘-’ 文字は、その行が fileN に表示されているが、結果には表示され
ていないことを意味します。 列Nの ‘+’ 文字は、結果に行が表示され、 fileN
にその行がないことを意味します(つまり、その親の観点から見て行が追加され
たことを示す)。

   上記の出力例では、関数のシグネチャが両方のファイルから見て変更されて
います(したがって、 file1 と file2 の両方から2つの ‘-’ が削除され、さら
に ‘++’ が追加されたため、 file1 と file2 のどちらにも表示されません)。
また、他の8行は file1 と同じですが、 file2 には表示されません(したがって
、接頭辞として ‘+’ が付けられます)。

   ‘git diff-tree -c’ で表示される場合、マージコミットの親をマージ結果と
比較します(つまり、 file1..fileN が親です)。 ‘git diff-files -c’ で表示
される場合、2つの未解決のマージ親を作業ツリーファイルと比較します(つまり
、 file1 はステージ2、別名「私たちのバージョン」、 file2 はステージ3、別
名「彼らのバージョン」です)。


other diff formats
******************

‘--summary’ オプションは、新しく追加、削除、名前変更、およびコピーされた
ファイルを説明します。‘--stat’ オプションは、 diffstat(1) グラフ を出力
に追加します。これらのオプションは、 ‘-p’ などの他のオプションと組み合わ
せることができ、人間が読むことを目的としています。

   名前の変更またはコピーを伴う変更を表示する場合、 ‘--stat’ 出力は、パ
ス名の共通のプレフィックスとサフィックスを組み合わせることにより、パス名
をコンパクトにフォーマットします。 たとえば、4行を変更(modify)しながら
‘arch/i386/Makefile’ を ‘arch/x86/Makefile’ に移動(move)する変更
(change)は、次のように表示されます:

     arch/{i386 => x86}/Makefile    |   4 +--

   ‘--numstat’ オプションは diffstat(1) 情報を提供しますが、人間ではなく
ソフトウェアで読むのを容易にするように設計されています。 ‘--numstat’ 出
力のエントリは以下のようになります:

     1       2       README
     3       1       arch/{i386 => x86}/Makefile

   この形式は、左から右へ:

  1. 追加行数

  2. タブ

  3. 削除行数

  4. タブ

  5. パス名(おそらく rename/copy 情報を含む)

  6. 改行

   ‘-z’ 出力オプションが有効な場合、出力は以下のようにフォーマットされま
す:

     1       2       README NUL
     3       1       NUL arch/i386/Makefile NUL arch/x86/Makefile NUL

   これは:

  1. 追加行数

  2. タブ

  3. 削除行数

  4. タブ

  5. NUL(rename/copy された場合のみ存在します)

  6. プリイメージのパス名

  7. NUL(rename/copy された場合のみ存在します)

  8. ポストイメージのパス名(rename/copy された場合のみ存在します)

  9. NUL

   名前が変更された場合のプリイメージパスの前の追加の ‘NUL’ は、出力を読
み取るスクリプトが、先読みせずに、読み取られている現在のレコードがシング
ルパスレコードであるか、名前変更/コピーレコードであるか、を判断できるよ
うにするためです。追加および削除された行を読み取った後、 ‘NUL’ まで読み
取るとパス名が生成されますが、それが ‘NUL’ の場合、レコードには2つのパス
が表示されます。


OPERATING MODES
***************

あなたはインデックスファイルを完全に信頼するか(‘--cached’ フラグを使用
)、diffロジックにてstat状態と一致しないファイルを「仮変更」(tentatively
changed)として表示するようにするかを選択できます。これらの操作はどちらも
非常に便利です。


CACHED MODE
***********

‘--cached’ が指定されている場合、あなたは以下のように問うことができます:

     HEADと、現在のインデックスの内容(`git write-tree` を
     使用して書き込むもの)との違いを見せてください

   たとえば、あなたがあなたの作業ディレクトリで作業して、インデックス内
のいくつかのファイルを更新し、コミットする準備ができました。あなたは何を
コミットしようとしているかを正確に確認したいのですが、比較のために新しい
ツリーオブジェクトを作成する必要はありません。そのためには、あなたは以下
のようにします。

     git diff-index --cached HEAD

   例: ‘commit.c’ の名前を ‘git-commit.c’ に変更し、それをインデックスフ
ァイルで有効にするために ‘update-index’ を実行したとします。 インデック
スファイルが私の作業ディレクトリと一致するため、 ‘git diff-files’ は何も
表示しません。 しかし、 ‘git diff-index’ を実行すると以下のようになりま
す:

     torvalds@ppc970:~/git> git diff-index --cached HEAD
     -100644 blob    4161aecc6700a2eb579e842af0b7f22b98443f74        commit.c
     +100644 blob    4161aecc6700a2eb579e842af0b7f22b98443f74        git-commit.c

   あなたは上記が名前変更(rename)であることが簡単にわかります。

   実際、 ‘git diff-index --cached’ は、実際に ‘git write-tree’ を実行し
て比較することと常に完全に同等です。実際に実行するのではなくて、自分がど
ういう状態にあるかを確認したいだけの場合には、こちらの方がはるかに優れて
います。

   したがって、 ‘git diff-index --cached’ を実行することは、「コミット済
みとしてすでにマークしたものと、前のツリーとの違い」を自問するときに実に
役に立つのです。


NON-CACHED MODE
***************

非キャッシュモードは別のアプローチを取り、 ‘git write-tree’ + ‘ git
diff-tree‘ でエミュレートできないという点で、2つのモードの中でより便利に
なる可能性があります。したがって、これがデフォルトのモードです。非キャッ
シュバージョンは以下のように問いかけます:

     HEADと現在チェックアウトされているツリーの違いを
     表示 - インデックスの内容や最新でないファイル

   これは明らかに非常に役立つ質問です。何をコミットできるかがわかるから
です。 この場合も、出力は _git diff-tree -r_ の出力と完全に一致しますが
、更にひとひねりあります。

   そのひとひねりとは、一部のファイルがインデックスと一致しない場合、そ
のファイルには裏付けがないことです。これを示すために、魔法の「オールゼロ
」sha1を使用します。 ‘kernel/sched.c’ を編集したが、実際にはまだ _git
update-index_ を実行していないとしましょう。そうすると、新しい状態に関連
付けられた「オブジェクト」はなく、以下のようになります:

     torvalds@ppc970:~/v2.6/linux> git diff-index --abbrev HEAD
     :100644 100664 7476bb... 000000...      kernel/sched.c

   つまり、ツリーが変更され、 ‘kernel/sched.c’ が最新ではなく、新しいも
のが含まれている可能性があることを示しています。オールゼロのsha1は、実際
の差分を取得するには、オブジェクト間のdiffを行うのではなく、作業ディレク
トリ内のオブジェクトを直接確認する必要があることを意味します。

     *Note*

     このタイプの他のコマンドと同様に、 ‘git diff-index’ は実際にはファ
     イルの内容をまったく調べません。 つまり、 ‘kernel/sched.c’ は実際に
     は変更されておらず、触れた(touch)だけです。いずれの場合も、インデッ
     クスを同期させるには、 ‘gitu pdate-index’ する必要があることに注意
     してください。

     *Note*

     「has been updated」(更新されました)と「is still dirty in the
     working directory」(作業ディレクトリでまだダーティです)というファイ
     ルが混在している場合があります。「更新された」ファイルには有効な
     sha1が表示され、「インデックスと同期していない」ファイルには常に特
     別なすべてゼロのsha1が表示されるため、どのファイルがどの状態にある
     かをいつでも確認できます。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-diff-tree,  Up: Top

Name
****

git-diff-tree — 2つのツリーオブジェクト間で、ブロブの内容とモードを比較
します


Synopsis
********

     git diff-tree [–stdin] [-m] [-s] [-v] [–no-commit-id] [–pretty]
                   [-t] [-r] [-c | –cc] [–combined-all-paths] [–root] [–merge-base]
                   [<common diff options>] <tree-ish> [<tree-ish>] [<path>…]


DESCRIPTION
***********

2つのツリーオブジェクト間で、ブロブの内容とモードを比較します

   <tree-ish> が1つだけ指定されている場合、コミットはその親と比較されま
す(以下の ‘--stdin’ 参照)。

   注意: ‘git diff-tree’ は、コミットオブジェクトにカプセル化されたツリ
ーを使用できます。


OPTIONS
*******

‘-p’
‘-u’
‘--patch’
     パッチを生成します(generating patches に関するセクションを参照)。

‘-s’
‘--no-patch’
     diff出力を抑制します。デフォルトでパッチを表示する ‘git show’ のよ
     うなコマンド、または ‘--patch’ の効果をキャンセルする場合に便利です
     。

‘-U<n>’
‘--unified=<n>’
     通常の3行ではなく、<n> 行の内容でdiffを生成します。 ‘--patch’ の機
     能を含んでいます。

‘--output=<file>’
     stdout ではなく指定のファイルに出力します。

‘--output-indicator-new=<char>’
‘--output-indicator-old=<char>’
‘--output-indicator-context=<char>’
     生成されたパッチの新しい行、古い行、またはコンテキスト行を示すため
     に使用される文字を指定します。 通常、それらはそれぞれ _+_ 、 _-_ 、
     ’ ’ です。

‘--raw’
     生形式(raw format)でdiffを生成します。 これがデフォルトです。

‘--patch-with-raw’
     ‘-p --raw’ の同義語。

‘--indent-heuristic’
     diffハンクの境界をずらす(shift)ヒューリスティックを有効にして、パッ
     チを読みやすくします。 これがデフォルトです。

‘--no-indent-heuristic’
     インデントヒューリスティック(indent heuristic)を無効にします。

‘--minimal’
     より多くの時間を費やして、可能な限り最小のdiffが生成されるようにし
     ます。

‘--patience’
     "patience diff" アルゴリズムを使用してdiffを生成します。

‘--histogram’
     "histogram diff" アルゴリズムを使用してdiffを生成します。

‘--anchored=<text>’
     "anchored diff" アルゴリズムを使用してdiffを生成します。

     このオプションは複数回指定できます。

     行がソースと宛先の両方に存在し、1回だけ存在し、このテキストで始まる
     場合、このアルゴリズムは、その行が出力に削除または追加として表示さ
     れないようにします。内部で "patience diff" アルゴリズムを使用します
     。

‘--diff-algorithm={patience|minimal|histogram|myers}’
     diffアルゴリズムを選択します。その派生(variants)は以下のとおりです:

     ‘default’, ‘myers’
          基本的な貪欲な差分アルゴリズム(greedy diff algorithm)。現在、
          これがデフォルトです。

     ‘minimal’
          より多くの時間を費やして、可能な限り最小のdiffが生成されるよう
          にします。

     ‘patience’
          パッチを生成する時に "patience diff" アルゴリズムを使います。

     ‘histogram’
          このアルゴリズムは、忍耐アルゴリズム(patience algorithm)を拡張
          して、「発生率の低い共通要素をサポート」(support
          low-occurrence common elements)します。

     たとえば、 あなたが ‘diff.algorithm’ 変数をデフォルト以外の値に設定
     した上で、それでもデフォルト値を使用する場合は、
     ‘--diff-algorithm=default’ オプションを使用する必要があります。

‘--stat[=<width>[,<name-width>[,<count>]]]’
     diffstatを生成します。 デフォルトでは、必要なだけのスペースがファイ
     ル名部分に使用され、残りはグラフ部分に使用されます。最大幅はデフォ
     ルトで端末幅、または端末に接続されていない場合は80桁であり、
     ‘<width>’ で上書きできます。ファイル名部分の幅は、コンマの後に別の
     幅 ‘<name-width>’ を指定することで制限できます。グラフ部分の幅は、
     ‘--stat-graph-width=<width>’ (統計グラフを生成するすべてのコマンド
     に影響します)を使用するか、 ‘diff.statGraphWidth=<width>’ ( ‘git
     format-patch’ に影響しません)を設定することによって制限できます。
     3番目のパラメータ ‘<count>’ を指定することにより、出力を最初の
     ‘<count>’ 行に制限し、それに ‘...’ が続く形にできます。

     これらのパラメータは、 ‘--stat-width=<width>’ と
     ‘--stat-name-width=<name-width>’ と ‘--stat-count=<count>’ を使用し
     て個別に設定することもできます。

‘--compact-summary’
     ファイルの作成や削除( "new" または "gone" 。オプションでシンボリッ
     クリンクの場合は "+l" )、diffstatのモード変更(実行可能ビットを追加
     または削除する場合は、それぞれ "+x" または "-x" )など、拡張ヘッダー
     情報の要約を出力します。情報はファイル名部分とグラフ部分の間に置か
     れます。本機能は ‘--stat’ の機能を含んでいます。

‘--numstat’
     ‘--stat`に似ていますが、プログラムで処理しやすい(machine friendly)よ
     うに、追加および削除された行数を10進表記とパス名で省略形なしで表示
     します。バイナリファイルの場合、 `0 0’ の代わりに2つの ‘-’ を出力し
     ます。

‘--shortstat’
     変更されたファイルの総数と、追加および削除された行の数を含む
     ‘--stat’ 形式の最後の行のみを出力します。

‘-X[<param1,param2,...>]’
‘--dirstat[=<param1,param2,...>]’
     各サブディレクトリの相対的な変更量の分布を出力します。 ‘--dirstat’
     の動作は、パラメータのコンマ区切りリストを渡すことでカスタマイズで
     きます。デフォルトは、 ‘diff.dirstat’ 構成変数によって制御されます
     (git-config(1) 参照)。以下のパラメータを使用できます:

     ‘changes’
          ソースから削除された、または宛先に追加された行をカウントして、
          dirstat数を計算します。これは、ファイル内の純粋なコード移動の
          量を無視します。つまり、ファイル内の行の再配置は、他の変更ほど
          カウントされません。これは、パラメーターが指定されていない場合
          のデフォルトの動作です。

     ‘lines’
          通常の行ベースのdiff分析を実行し、削除/追加された行数を合計し
          て、dirstat数を計算します。 (バイナリファイルの場合、バイナリ
          ファイルには行の概念がないため、代わりに64バイトのチャンクをカ
          ウントします)。 これは ‘changes’ 動作よりも高価な ‘--dirstat’
          動作ですが、他の変更と同じようにファイル内の再配置された行をカ
          ウントします。結果の出力は、他の ‘--*stat’ オプションから得ら
          れるものと一致しています。

     ‘files’
          変更されたファイルの数を数えて、dirstat数を計算します。変更さ
          れた各ファイルは、dirstat分析で等しくカウントされます。これは
          、ファイルの内容をまったく調べる必要がないため、計算コストが最
          もかからない ‘--dirstat’ の動作です。

     ‘cumulative’
          親ディレクトリの子ディレクトリの変更も同様にカウントします。
          ‘cumulative’(累積的) を使用する場合、報告されるパーセンテージ
          の合計が100%を超える場合があることに注意してください。デフォル
          トの(非累積的な)動作は、‘noncumulative’ パラメーターで指定でき
          ます。

     <limit>
          整数パラメーターは、カットオフパーセント(デフォルトでは3%)を指
          定します。指定の割合より少ないディレクトリは、出力に表示されま
          せん。

     例: 変更されたファイルの総数の10%未満のディレクトリを無視し、親ディ
     レクトリに子ディレクトリの数を累積しながら、変更されたファイルをカ
     ウント: ‘--dirstat=files,10,cumulative’

‘--cumulative’
     ‘--dirstat=cumulative’ と同義語

‘--dirstat-by-file[=<param1,param2>...]’
     ‘--dirstat=files,param1,param2...’ と同義語

‘--summary’
     作成、名前変更、モード変更などの拡張ヘッダー情報の短い要約
     (condensed summary)を出力します。

‘--patch-with-stat’
     ‘-p --stat’ と同義語。

‘-z’
     ‘--raw’ または ‘--numstat’ または ‘--name-only’ または
     ‘--name-status’ が指定されている場合は パス名を変更せず、出力フィー
     ルドターミネータとしてNULLを使用してください。

     このオプションがないと、構成変数 ‘core.quotePath’ で説明されている
     ように、 通常の文字以外(unusual characters)を含むパス名が引用符で囲
     まれます(git-config(1) 参照)。

‘--name-only’
     変更されたファイルの名前のみを表示します。 多くの場合、ファイル名は
     UTF-8でエンコードされます。 詳細については、 git-log(1) のマニュア
     ルページにあるエンコーディングに関する議論(the discussion about
     encoding)を参照してください。

‘--name-status’
     変更されたファイルの名前とステータスのみを表示します。ステータス文
     字の意味については、 ‘--diff-filter’ オプションの説明を参照してくだ
     さい。 ‘--name-only’ と同じように、ファイル名はしばしばUTF-8でエン
     コードされます。

‘--submodule[=<format>]’
     サブモジュールの違いをどのように表示するかを指定します。
     ‘--submodule=short’ を指定する場合、 _short_ 形式が使用されます。こ
     の形式は、範囲の最初と最後にコミットの名前を表示するだけです。
     ‘--submodule’ または ‘--submodule=log’ が指定されている場合、 _log_
     形式が使用されます。この形式では、 git-submodule(1) ‘summary’ のよ
     うに範囲内のコミットが一覧表示されます。 ‘--submodule=diff’ が指定
     されている場合、 _diff_ 形式が使用されます。この形式は、コミット範
     囲間のサブモジュールの内容の変更のインラインdiffを示します。
     configオプションが設定されていない場合、デフォルトは
     ‘diff.submodule’ または _short_ 形式です。

‘--color[=<when>]’
     色付きのdiffを表示します。 ‘--color’ (つまり、 _=<when>_ ) は
     ‘--color=always’ と同じです。 _<when>_ は、 ‘always’ または ‘never’
     または ‘auto’ のいずれかになります。

‘--no-color’
     カラーdiffをオフにします。 ‘--color=never’ と同じです。

‘--color-moved[=<mode>]’
     ソースコードの移動した行を別の色にします。 <mode>は、オプションが指
     定されていない場合はデフォルトで _no_ になり、 モードが指定されてい
     ないオプションが指定されている場合は _zebra_ になります。 モードは
     以下のいずれかでなければなりません:

     no
          移動行をハイライトしません。

     default
          ‘zebra’ の同義語です。これは、将来、より賢明なモードに変更され
          る可能性があります。

     plain
          ある場所で追加され、別の場所で削除された行は、
          _color.diff.newMoved_ で色付けされます。 同様に、
          _color.diff.oldMoved_ は、差分の別の場所に追加された削除された
          行に使用されます。このモードは移動された行をピックアップします
          が、コードのブロックが順列なしで移動されたかどうかを判断するこ
          とはレビューではあまり役に立ちません。

     blocks
          少なくとも20文字の英数字の移動テキストのブロックが貪欲に検出さ
          れます。検出されたブロックは、 _color.diff.{old,new}Moved_ 色
          のいずれかを使用して色付けされます。隣接するブロックを区別する
          ことはできません。

     zebra
          移動されたテキストのブロックは、 _blocks_ モードの場合と同様に
          検出されます。 ブロックは、 _color.diff.{old,new}Moved_ 色また
          は _color.diff.{old,new}MovedAlternative_ 色のいずれかを使用し
          て色付けされます。2つの色の間の変化は、新しいブロックが検出さ
          れたことを示します。

     dimmed-zebra
          _zebra_ に似ていますが、移動されたコードの重要でない部分の追加
          の調光(dimmed)が実行されます。隣接する2つのブロックの境界線は
          興味深いと見なされ、残りは興味深いものではありません。
          ‘dimmed_zebra’ は非推奨の同義語です。

‘--no-color-moved’
     移動検出をオフにします。 これは、構成設定を上書きするために使用でき
     ます。 ‘--color-moved=no’ と同じです。

‘--color-moved-ws=<modes>’
     これは、 ‘--color-moved’ の移動検出を実行するときに空白を無視する方
     法を設定します。 これらのモードは、コンマ区切りのリストとして指定で
     きます:

     no
          移動行検出を実行するときに、空白(whitespace)を無視しない。

     ignore-space-at-eol
          行末(EOL)での空白(whitespace)の変更を無視します。

     ignore-space-change
          空白(whitespace)の数の変更は無視してください。これは、行末の空
          白(whitespace)を無視し、1つ以上の空白文字(whitespace
          characters)の他のすべてのシーケンスを同等と見なします。

     ignore-all-space
          行を比較するときは空白(whitespace)を無視します。これにより、一
          方の行に空白があり、もう一方の行に空白がない場合でも、違いは無
          視されます。

     allow-indentation-change
          最初に移動検出で空白(whitespace)を無視し、空白(whitespace)の変
          更が行ごとに同じである場合にのみ、移動されたコードブロックをブ
          ロックにグループ化します。 これは他のモードと互換性がありませ
          ん。

‘--no-color-moved-ws’
     移動検出を実行するときは、空白(whitespace)を無視しないでください。
     これは、構成設定を上書きするために使用できます。
     ‘--color-moved-ws=no’ と同じです。

‘--word-diff[=<mode>]’
     <mode> を使用して変更された単語を区切ることにより、単語のdiffを表示
     します。デフォルトでは、単語は空白で区切られます。 以下の
     ‘--word-diff-regex’ を参照してください。 <mode> のデフォルトは
     ’plain’です。 <mode> は以下のいずれかである必要があります:

     color
          変更された単語(word)を色のみを使用して強調表示します。
          ‘--color’ を意味します。

     plain
          単語を ‘[-removed-]’ および ‘{+added+}’ として表示します。 区
          切り文字が入力に表示されている場合、区切り文字をエスケープしよ
          うとしないため、出力があいまいになる可能性があります。

     porcelain
          スクリプトの使用を目的とした特別な行ベースの形式を使用します。
          追加/削除/無変更については、通常の統一されたdiff形式で印刷され
          、行の先頭の ‘+’/‘-’/‘ ‘ 文字で始まり、行の終わりまで続きます
          。入力の改行は、それ自体の行のチルダ ‘~’ で表されます。

     none
          単語(word)のdiffを再度無効にします。

     注意: 最初のモードの名前にもかかわらず、有効になっている場合、すべ
     てのモードで変更された部分を強調するために色が使用されることに注意
     してください。

‘--word-diff-regex=<regex>’
     空白以外を単語と見なす代わりに、 <regex> を使用して単語が何であるか
     を決定します。また、すでに有効になっていない限り、この機能は
     ‘--word-diff’ の機能を含んでいます。

     <regex> の重複しないマッチはすべて、単語と見なされます。これらのマ
     ッチの間のすべては空白と見なされ、違いを見つけるためとしては無視さ
     れます！ 正規表現に ‘|[^[:space:]]’ を追加して、空白以外のすべての
     文字とマッチすることを確認することをお勧めします。改行を含むマッチ
     は、改行で黙って切り捨てられます！

     たとえば、 ‘--word-diff-regex=.’ は各文字を単語として扱い、それに応
     じて文字ごとの違いを表示します。

     正規表現は、diffドライバーまたは構成オプション(configuration
     option)を介して設定することもできます。 gitattributes(5) または
     git-config(1) を参照してください。これを指定すると、diffドライバー
     または構成設定(configuration settings)が明示的にオーバーライドされ
     ます。diffドライバーは構成設定を上書きします。

‘--color-words[=<regex>]’
     ‘--word-diff=color’ に ‘--word-diff-regex=<regex>’ を加えたものに相
     当します(正規表現が指定されている場合)。

‘--no-renames’
     構成ファイルにデフォルトで指定されている場合でも、名前変更の検出を
     オフにします。

‘--[no-]rename-empty’
     名前変更ソースとして空のブロブを使用するかどうか。

‘--check’
     変更によって競合マーカーまたは空白エラーが発生した場合に警告します
     。空白エラーと見なされるものは、 ‘core.whitespace’ 構成によって制御
     されます。 デフォルトでは、末尾の空白(空白のみで構成される行を含む
     )と、行の最初のインデント内で直後にタブ文字が続くスペース文字は、空
     白エラーと見なされます。問題が見つかった場合は、ゼロ以外のステータ
     スで終了します。なお、 –exit-code とは互換性がありません。

‘--ws-error-highlight=<kind>’
     diffの ‘context’ または ‘old’ または ‘new’ 行の空白エラーを強調表示
     します。複数の値はコンマで区切られ、 ‘none’ は前の値をリセットし、
     ‘default’ はリストを ‘new’ にリセットし、 ‘all’ は old、new、
     context の省略形です。このオプションが指定されておらず、構成変数
     ‘diff.wsErrorHighlight’ が設定されていない場合、 ‘new’ 行の空白エラ
     ーのみが強調表示されます。空白エラーは ‘color.diff.whitespace’ で色
     分けされています。

‘--full-index’
     パッチ形式の出力を生成するときは、最初の一握りの文字(first handful
     of characters)の代わりに、「インデックス」行にイメージ前およびイメ
     ージ後の完全ブロブオブジェクト名を表示します。

‘--binary’
     ‘--full-index’ に加えて、 ‘git-apply’ で適用できるバイナリ差分を出
     力します。 ‘--patch’ の機能を含んでいます。

‘--abbrev[=<n>]’
     完全な40バイトの16進オブジェクト名をdiff-raw形式の出力とdiff-treeヘ
     ッダー行に表示する代わりに、オブジェクトを一意に参照する、少なくと
     も _<n>_ 桁の16進数の長さの最短のプレフィックスを表示します。diffパ
     ッチ出力形式では、 ‘--full-index’ が優先されます。つまり、
     ‘--full-index’ が指定されている場合、 ‘--abbrev’ に関係なく、完全な
     ブロブ名が表示されます。デフォルト以外の桁数は、 ‘--abbrev=<n>’ で
     指定できます。

‘-B[<n>][/<m>]’
‘--break-rewrites[=[<n>][/<m>]]’
     完全な書き換えの変更を削除と作成のペアに分割します。これには以下の
     2つの目的があります:

     これは、ファイルの完全な書き換えに相当する変更が、コンテキストとし
     てテキストで一致する非常に少数の行と混合された一連の削除と挿入とし
     てではなく、古いものすべての単一の削除とそれに続く すべての新しいも
     のを1回挿入し、数値 ‘m’ が -B オプションのこの側面を制御します(デフ
     ォルトは60%)。 ‘-B/70%’ は、Gitがそれを完全な書き換えと見なすために
     、元の30%未満が結果に残る必要があることを指定します(つまり、結果の
     パッチは、コンテキスト行と混合された一連の削除と挿入になります)。

     -M と一緒に使用すると、完全に書き換えられたファイルも名前変更のソー
     スと見なされ(通常、 -M は、消えたファイルのみを名前変更のソースと見
     なします)、数 ‘n’ が -Bオプションのこの側面を制御します(デフォルト
     は50%)。 ‘-B20%’ は、ファイルのサイズの20%以上と比較して、追加およ
     び削除を伴う変更が、別のファイルへの名前変更の可能なソースとして取
     得される資格があることを指定します。

‘-M[<n>]’
‘--find-renames[=<n>]’
     名前の変更(renames)を検知する。 ‘n’ が指定されている場合、それは類
     似性インデックスのしきい値です (つまり、ファイルのサイズと比較した
     追加/削除の量)。 たとえば、 ‘-M90%’ は、ファイルの90%以上が変更され
     ていない場合、 Gitが削除/追加のペアを名前変更と見なす必要があること
     を意味します。 ‘%’ 記号がない場合、数値は小数として読み取られ、その
     前に小数点が付きます。 つまり、 ‘-M5’ は0.5になるため、‘-M50%’ と同
     じになります。 同様に、 ‘-M05’ は ‘-M5%’ と同じです。 検出を正確な
     名前変更に制限するには、 ‘-M100%’ を使用します。 デフォルトの類似性
     インデックスは50%です。

‘-C[<n>]’
‘--find-copies[=<n>]’
     名前と同様コピーを検出します。 ‘--find-copies-harder’ ‘も参照してく
     ださい。 `n’ を指定すると、 ‘-M<n>’ と同じ意味になります。

‘--find-copies-harder’
     パフォーマンス上の理由から、デフォルトでは、 ‘-C’ オプションは、コ
     ピーの元のファイルが同じ変更組(changeset)で変更された場合にのみコピ
     ーを検索します。このフラグにより、コマンドは変更されていないファイ
     ルをコピー元の候補として検査します。これは大規模なプロジェクトでは
     非常にコストのかかる操作であるため、注意して使用してください。 複数
     の ‘-C’ オプションを指定しても同じ効果があります。

‘-D’
‘--irreversible-delete’
     削除するプレイメージ(preimage)を省略します。つまり、ヘッダーのみを
     出力し、プレイメージと ‘/dev/null’ の差分は出力しません。結果のパッ
     チは、 ‘patch’ または ‘git apply’ で適用されることを意図していませ
     ん。これは、変更後にテキストを確認することに集中したい人のためだけ
     のものです。さらに、出力には明らかに、そのようなパッチを手動でも逆
     に適用するのに十分な情報が不足しているため、オプションの名前が付け
     られています。

     ‘-B’ と併用する場合は、削除/作成ペアの削除部分のプリイメージ
     (preimage)も省略してください。

‘-l<num>’
     ‘-M’ および ‘-C’ オプションには、名前変更/コピーのサブセットを安価
     に検出できるいくつかの準備手順が含まれ、その後に、残りのすべてのペ
     アになっていない宛先をすべての関連ソースと比較する徹底的なフォール
     バック部分が続きます。(名前の変更の場合、残りのペアになっていないソ
     ースのみが関係します。コピーの場合、すべての元のソースが関係します
     )。Nのソースと宛先の場合、この徹底的なチェックのコストは O(N^2) で
     す。このオプションは、関係するソース/宛先ファイルの数が指定された数
     を超えた場合に、名前変更/コピー検出の完全な部分が実行されないように
     します。デフォルトは diff.renameLimit です。 値0は無制限として扱わ
     れることに注意してください。

‘--diff-filter=[(A|C|D|M|R|T|U|X|B)...[*]]’
     追加(Add)・コピー(Copy)・削除(Delete)・変更(Modify)・名前変更
     (Rename)されたファイル、タイプが変更されたファイル(T)、マージされて
     いないファイル(U)、不明なファイル(X)、またはペアリングが壊れている
     ファイル(B)のみを選択します。フィルタ文字(無しも含む)の任意の組み合
     わせを使用できます。 組み合わせに ‘*’ (全てまたは無し)が追加される
     と、比較で他の基準に一致するファイルがある場合、すべてのパスが選択
     されます。 他の基準に一致するファイルがない場合、何も選択されません
     。

     また、逆に、除外したい時はこれらの各大文字指定を小文字にして指定し
     ます。例えば ‘--diff-filter=ad’ は、追加および削除されたパスを除外
     します。

     注意:すべてのdiffがすべてのタイプを特徴とするわけではないことに注意
     してください。 たとえば、インデックスから作業ツリーへのdiffにエント
     リを追加することはできません(diffに含まれるパスのセットは、インデッ
     クスの内容によって制限されるため)。 同様に、これらのタイプの検出が
     無効になっている場合、コピーおよび名前変更されたエントリは表示され
     ません。

‘-S<string>’
     ファイル内の指定の文字列(つまり、 addition 、deletion)の出現回数の
     差分を調べます。スクリプターが使用することを目的としています。

     (構造体など)コードの正確なブロックを探していて、そのブロックが最初
     に作成されてからの履歴を知りたい場合に便利です。この機能を繰り返し
     使用して、プリイメージ(preimage)内の興味深いブロックを ‘-S’ にフィ
     ードバックし、そしてあなたはそれをブロックの最初のバージョンを取得
     するまで続けます。

     バイナリファイルも検索されます。

‘-G<regex>’
     パッチテキストに <regex> にマッチする 追加/削除 された行が含まれて
     いる差分を探します。

     ‘-S<regex> --pickaxe-regex’ と ‘-G<regex>’ の違いを説明するために、
     同じファイル内で以下のdiffを使用してコミットすることを検討してくだ
     さい:

          +    return frotz(nitfol, two->ptr, 1, 0);
          ...
          -    hit = frotz(nitfol, mf2.ptr, 1, 0);

     ‘git log -G"frotz\(nitfol"’ はこのコミットを表示しますが、 ‘git log
     -S"frotz\(nitfol" --pickaxe-regex’ は表示しません(その文字列の出現
     回数が変更されなかったため)。

     ‘--text’ が提供されていない限り、 textconv フィルターのないバイナリ
     ファイルのパッチは無視されます。

     詳細については gitdiffcore(7) の _pickaxe_ エントリを参照してくださ
     い。

‘--find-object=<object-id>’
     指定されたオブジェクトの出現回数を変更する違いを探します。 ‘-S’ と
     同様に、引数だけが異なり、特定の文字列ではなく特定のオブジェクト
     IDを検索します。

     オブジェクトは、ブロブまたはサブモジュールのコミットにすることがで
     きます。 これは、 ‘git-log’ の ‘-t’ オプションがツリーも探すことを
     意味します。

‘--pickaxe-all’
     ‘-S’ または ‘-G’ が変更を見つけたら、 <string> の変更を含むファイル
     だけでなく、その変更セット(changeset)のすべての変更を表示します。

‘--pickaxe-regex’
     ‘-S’ に指定した <string> を拡張POSIX正規表現として扱います。

‘-O<orderfile>’
     ファイルが出力に表示される順序を制御します。これは ‘diff.orderFile’
     構成変数をオーバーライドします(git-config(1) 参照)。
     ‘diff.orderFile’ をキャンセルするには、 ‘-O/dev/null’ を使用します
     。

     出力順序は、 <orderfile> 内のglobパターンの順序によって決定されます
     。最初のパターンに一致するパス名を持つすべてのファイルが最初に出力
     され、2番目のパターンに一致する(ただし最初のパターンには一致しない
     )パス名を持つすべてのファイルが次に出力されます。パス名がどのパター
     ンとも一致しないすべてのファイルは、ファイルの最後に暗黙のすべて一
     致パターンがあるかのように、最後に出力されます。複数のパス名のラン
     クが同じである場合(同じパターンに一致するが、以前のパターンには一致
     しない)、相互の出力順序は通常の順序です。

     <orderfile> は以下のとおりパースされます:

        • 空白行は無視されるため、読みやすくするための区切りとして使用で
          きます。

        • ハッシュ ("‘#’") で始まる行は無視されるため、コメントに使用で
          きます。 パターンがハッシュで始まる場合は、パターンの先頭にバ
          ックスラッシュ(訳注:日本では環境により円記号)("‘\’") を追加し
          ます。

        • 他の各行には、単一のパターンが含まれています。

     パターンは、 FNM_PATHNAME フラグなしで fnmatch(3) に使用されるパタ
     ーンと同じ構文とセマンティクスを持ちますが、最終的なパス名コンポー
     ネントをいくつも削除するとパターンと一致する場合、パス名もパターン
     と一致する点が異なります。 たとえば、パターン "‘foo*bar’" は、
     "‘fooasdfbar’" および "‘foo/bar/baz/asdf’" と一致しますが、
     "‘foobarx’" とは一致しません。

‘--skip-to=<file>’
‘--rotate-to=<file>’
     名前付き <file> の前のファイルを出力から破棄するか(スキップして)、
     出力の最後に移動させます(ローテーションさせます)。 これらは主に
     ‘git difftool’ コマンドを使用するために考案されたものであり、それ以
     外の場合はあまり役に立たない可能性があります。

‘-R’
     2つの入力を交換します。 つまり、インデックスまたはディスク上のファ
     イルとツリーの内容の違いを表示します。

‘--relative[=<path>]’
‘--no-relative’
     プロジェクトのサブディレクトリから実行する場合、このオプションを使
     用して、ディレクトリ外の変更を除外し、それに関連するパス名を表示す
     るように指示できます。サブディレクトリ(ベアリポジトリなど)にいない
     場合は、引数として <path> を指定することで、出力を作成するサブディ
     レクトリに名前を付けることができます。 ‘--no-relative`は、
     `diff.relative’ 設定オプションと以前の ‘--relative’ の両方を打ち消
     すために使用できます。

‘-a’
‘--text’
     すべてのファイルをテキストとして扱います。

‘--ignore-cr-at-eol’
     比較を行うときは、行末のキャリッジリターン(carriage-return)を無視し
     ます。

‘--ignore-space-at-eol’
     行末(EOL)での空白(whitespace)の変更を無視します。

‘-b’
‘--ignore-space-change’
     空白(whitespace)の数の変更は無視してください。これは、行末の空白
     (whitespace)を無視し、1つ以上の空白文字(whitespace characters)の他
     のすべてのシーケンスを同等と見なします。

‘-w’
‘--ignore-all-space’
     行を比較するときは空白を無視します。 これにより、一方の行に空白があ
     り、もう一方の行に空白がない場合でも、違いは無視されます。

‘--ignore-blank-lines’
     全て空白の行の変更は無視します。

‘-I<regex>’
‘--ignore-matching-lines=<regex>’
     すべての行が <regex> にマッチする変更を無視します。このオプションは
     複数回指定できます。

‘--inter-hunk-context=<lines>’
     指定された行数までの差分ハンク間のコンテキストを表示し、それによっ
     て互いに近いハンクを融合します。デフォルトは
     ‘diff.interHunkContext’ で、設定オプションが設定されていない場合は
     0です。

‘-W’
‘--function-context’
     関数全体を各変更のコンテキスト行として表示します。関数名は、 ‘git
     diff’ がパッチハンクヘッダーを処理するのと同じ方法で決定されます
     (gitattributes(5) の _Defining a custom hunk-header_ を参照)。

‘--exit-code’
     diff(1）と同様のコードでプログラムを終了させます。つまり、違いがあ
     った場合は 1 で終了し、 0 は違いがないことを意味します。

‘--quiet’
     プログラムのすべての出力を無効にします。 ‘--exit-code’ を意味します
     。

‘--ext-diff’
     外部diffヘルパーの実行を許可します。 gitattributes(5) を使用して外
     部diffドライバーを設定する場合は、 git-log(1) およびその仲間と一緒
     にこのオプションを使用する必要があります。

‘--no-ext-diff’
     外部diffドライバーを禁止します。

‘--textconv’
‘--no-textconv’
     バイナリファイルを比較するときに、外部テキスト変換フィルターの実行
     を許可(または禁止)します。 詳細については、 gitattributes(5) を参照
     してください。textconvフィルターは通常、一方向の変換であるため、結
     果のdiffは人間の消費に適していますが、適用(apply)することはできませ
     ん。このため、textconvフィルターは、 git-diff(1) および git-log(1)
     に対してのみデフォルトで有効になりますが、 git-format-patch(1) また
     はdiff配管コマンドに対しては有効になりません。

‘--ignore-submodules[=<when>]’
     diff生成のサブモジュールへの変更を無視します。 <when> は、 none・
     untracked・dirty・allのいずれかになります。これがデフォルトです。
     noneを使用すると、追跡されていないファイルまたは変更されたファイル
     が含まれている場合、またはそのHEADがスーパープロジェクトに記録され
     ているコミットと異なる場合にサブモジュールが変更されたと見なされ、
     git-config(1) または gitmodules(5) の ignoreオプションの設定をオー
     バーライドするために使用できます。untrackedが使用されている場合、サ
     ブモジュールには追跡されていないコンテンツのみが含まれている場合、
     サブモジュールはダーティとは見なされません(ただし、変更されたコンテ
     ンツはスキャンされます)。「dirty」を使用すると、サブモジュールの作
     業ツリーへのすべての変更が無視され、スーパープロジェクトに格納され
     ているコミットへの変更のみが表示されます(これは1.7.0までの動作でし
     た)。「all」を使用すると、サブモジュールへのすべての変更が非表示に
     なります。

‘--src-prefix=<prefix>’
     "a/" の代わりに、与えられたソースプレフィックス(source prefix)を表
     示します。

‘--dst-prefix=<prefix>’
     "b/" の代わりに、指定された宛先プレフィックス(destination prefix)を
     表示します。

‘--no-prefix’
     送信元(source)または宛先(destination)のプレフィックスを表示しません
     。

‘--line-prefix=<prefix>’
     出力のすべての行に追加のプレフィックスを付加します。

‘--ita-invisible-in-index’
     デフォルトでは、 "git add -N" によって追加されたエントリは、 "git
     diff" に既存の空のファイルとして表示され、 "git diff –cached" に新
     しいファイルとして表示されます。このオプションを使用すると、エント
     リは "git diff" では新しいファイルとして表示され、 "git diff
     –cached" では存在しません。このオプションは、
     ‘--ita-visible-in-index’ で元に戻すことができます。どちらのオプショ
     ンも実験的なものであり、将来削除される可能性があります。

   これらの一般的なオプションの詳細については、 gitdiffcore(7) も参照し
てください。

<tree-ish>
     ツリーオブジェクトのID。

<path>…
     <path>… が提供された場合、結果は提供されたパススペックの1つに一致す
     るファイルのサブセットに制限されます。

‘-r’
     サブツリーを再帰的に辿ります。

‘-t’
     ツリーエントリ自体とサブツリーを表示します。 ‘-r’ の機能を含みます
     。

‘--root’
     ‘--root’ が指定されている場合、最初のコミット(initial commit)は大き
     な作成イベント(big creation event)として表示されます。これは、
     NULLツリーに対する差分と同等です。

‘--merge-base’
     <tree-ish>を直接比較する代わりに、2つの<tree-ish>間のマージベースを
     before側として使用します。2つの<tree-ish>が指定されている必要があり
     、両方ともコミットである必要があります。

‘--stdin’
     ‘–stdin‘が指定されている場合、コマンドはコマンドラインから
     <tree-ish>引数を取りません。代わりに、2つの<tree> または 1つの
     <commit> または <commit>のリストのいずれかを含む行を標準入力から読
     み取ります。（区切り文字として空白1文字を使用します。）

     2つのツリーが与えられると、最初のツリーと2番目のツリーが比較されま
     す。単一のコミットが与えられると、そのコミットをその親と比較します
     。 残りのコミットは、指定されると、最初のコミットの親であるかのよう
     に使用されます。

     2つのツリーを比較する場合、違いの前に両方のツリーのID(スペースで区
     切られ、改行で終了)が出力されます。コミットを比較する場合、最初の
     (または唯一の)コミットのIDと、それに続く改行が出力されます。

     以下のフラグは、(ツリーではなく、)コミットを比較するときの動作に影
     響します。

‘-m’
     デフォルトでは、 ‘git diff-tree --stdin’ はマージコミットの違いを表
     示しません。 このフラグを使用すると、すべての親からのコミットとの違
     いが示されます。 ‘-c’ も参照してください。

‘-s’
     デフォルトでは、 ‘git diff-tree --stdin’ は、機械可読形式( ‘-p’ な
     し) または パッチ形式( ‘ -p‘ あり)のいずれかで違いを示します。この
     出力を抑制できます。 ‘-v’ フラグでのみ役立ちます。

‘-v’
     このフラグにより、 ‘git diff-tree --stdin’ は、違いの前にコミットメ
     ッセージも表示します。

‘--pretty[=<format>]’
‘--format=<format>’
     コミットログの内容を指定された形式できれいに印刷(pretty-print)しま
     す。 _<format>_ は oneline・short・medium・full・fuller・
     reference・email・raw・format:<string>・tformat:<string> のいずれか
     になります。 _<format>_ が上記のいずれでもなく、 _%placeholder_ が
     含まれている場合、 _–pretty=tformat:<format>_ が指定されたかのよう
     に動作します。

     各フォーマットの詳細については、 "PRETTY FORMATS" セクションを参照
     してください。 _=<format>_ の部分を省略すると、デフォルトで
     _medium_ になります。

     注意: リポジトリー構成でデフォルトのpretty formatを指定できます
     (git-config(1) 参照)。

‘--abbrev-commit’
     40バイトの16進コミットオブジェクト名全体を表示する代わりに、オブジ
     ェクトに一意の名前を付けるプレフィックスを表示します。
     "–abbrev=<n>" (表示されている場合はdiff出力も変更します)オプション
     を使用して、プレフィックスの最小長を指定できます。

     これにより、80桁幅の端末を使用している人にとって "–pretty=oneline"
     がずっと読みやすくなるはずです。

‘--no-abbrev-commit’
     完全な40バイトの16進コミットオブジェクト名を表示します。 これにより
     、明示的または "–oneline" などの他のオプションによって暗黙的に示さ
     れる ‘--abbrev-commit’ が無効になります。また、 ‘log.abbrevCommit’
     変数をオーバーライドします。

‘--oneline’
     これは、 "–pretty=oneline –abbrev-commit" を一緒に使用するための省
     略形です。

‘--encoding=<encoding>’
     コミットオブジェクトは、ログメッセージに使用される文字エンコードを
     エンコードヘッダーに記録します。このオプションを使用して、ユーザー
     が好むエンコーディングでコミットログメッセージを再コーディングする
     ようにコマンドに指示できます。配管以外のコマンドの場合、これはデフ
     ォルトでUTF-8になります。オブジェクトが ‘X’ でエンコードされている
     と主張し、 ‘X’ で出力している場合、オブジェクトをそのまま出力するこ
     とに注意してください。これは、元のコミットの無効なシーケンスが出力
     にコピーされる可能性があることを意味します。同様に、 iconv(3) コミ
     ットの変換に失敗した場合、警告とともに元のオブジェクトをそのまま出
     力します。

‘--expand-tabs=<n>’
‘--expand-tabs’
‘--no-expand-tabs’
     出力に表示する前に、ログメッセージでタブ展開を実行します(タブ幅を
     <n> とみなして <n> 境界に揃うように空白で調整する)。
     ‘--expand-tabs’ は ‘--expand-tabs=8’ の省略形であり、
     ‘--no-expand-tabs’ は ‘--expand-tabs=0’ の省略形です。タブの展開を
     無効にします。

     デフォルトでは、タブはログメッセージを4つのスペースでインデントする
     きれいな形式(pretty formats)で展開されます(つまり、デフォルトの
     _medium_ と’full’ と _fuller_)。

‘--notes[=<ref>]’
     コミットログメッセージを表示するときに、コミットに注釈を付ける
     notes(git-notes(1) 参照)を表示します。これは、コマンドラインに
     ‘--pretty’ 、‘--format’ または ‘--oneline’ オプションが指定されてい
     ない場合の、 ‘git log’ と ‘git show’ と ‘ git whatchanged‘ コマンド
     のデフォルトです。

     デフォルトでは、表示されるnotesは、 ‘core.notesRef’ および
     ‘notes.displayRef’ 変数(または対応する環境変数オーバーライド)にリス
     トされているnote refからのものです。詳細については git-config(1) を
     参照してください。

     オプションの _<ref>_ 引数を使用して、refを使用して表示するnotesを検
     索します。 refは、 ‘refs/notes/’ で始まる完全なrefnameを指定できま
     す。 ‘notes/’ で始まるか、 ‘refs/’ で始まるか、それ以外で始まる場合
     、 ‘refs/notes/’ が接頭辞として付けられ、refのフルネームを形成しま
     す。

     複数の –notes オプションを組み合わせて、表示するノートを制御できま
     す。 例: "–notes=foo" は "refs/notes/foo" からのnotesのみを表示しま
     す。 "–notes=foo –notes" は、 "refs/notes/foo" とデフォルトのnotes
     ref(s) の両方のnotesを表示します。

‘--no-notes’
     notesを表示しないでください。 これは、notesが表示されるnotes refの
     リストをリセットすることにより、上記の ‘--notes’ オプションを無効に
     します。 オプションは、コマンドラインで指定された順序で解析されます
     。 "–notes –notes=foo –no-notes –notes=bar" は、 "refs/notes/bar" か
     らのnotesのみを表示します。

‘--show-notes[=<ref>]’
‘--[no-]standard-notes’
     これらのオプションは非推奨です。 代わりに、上記の –notes/–no-notes
     オプションを使用してください。

‘--show-signature’
     署名を ‘gpg --verify’ に渡して、署名されたコミットオブジェクトの有
     効性を確認し、出力を表示します。

‘--no-commit-id’
     ‘git diff-tree’ は、該当する場合、コミットIDを含む行を出力します。
     このフラグは、コミットIDの出力を抑制します。

‘-c’
     このフラグは、マージコミットの表示方法を変更します(つまり、コマンド
     に1つの <tree-ish> 、または ‘--stdin’ が指定されている場合にのみ役
     立ちます)。これは、親と結果を一度に1つずつ表示するのではなく、各親
     とマージ結果の違いを同時に表示します(これは、 ‘-m’ オプションが行う
     ことです)。さらに、すべての親から変更されたファイルのみが一覧表示さ
     れます。

‘--cc’
     このフラグは、 ‘-c’ オプションと同様に、マージコミットパッチの表示
     方法を変更します。これは ‘-c’ と ‘-p’ オプションの機能を含んでいて
     、さらに、パッチの出力を圧縮するために、親のコンテンツが二つのバリ
     エーションしかなく、マージ結果がそのうちの一つをそのまま選んでしま
     うような、つまらないハンクは省きます。すべてのハンクがつまらない場
     合、他の「空の差分」の場合と同様に、コミット自体とコミットログメッ
     セージは表示されません。

‘--combined-all-paths’
     このフラグにより、結合された差分(combined diff)(マージコミットに使
     用)にすべての親からのファイルの名前が一覧表示されます。したがって、
     ‘-c’ または ‘--cc’ が指定されている場合にのみ有効であり、ファイル名
     の変更が検出された場合(つまり、名前変更またはコピーの検出が要求され
     た場合)にのみ役立つ可能性があります。

‘--always’
     差分自体が空の場合でも、コミット自体とコミットログメッセージを表示
     します。


PRETTY FORMATS
**************

コミットがマージであり、 pretty-format が _oneline_ または _email_ また
は _raw_ でない場合、 _Author:_ 行の前に追加の行が挿入されます。この行は
"Merge: " で始まり、先祖のコミットのハッシュがスペースで区切られて出力さ
れます。履歴の表示を制限している場合、たとえば、特定のディレクトリまたは
ファイルに関連する変更のみに関心がある場合、リストされたコミットは必ずし
も *直接* の親コミットのリストではない可能性があることに注意してください
。

   いくつかの組み込みフォーマットがあります。そして以下で説明するように
、 pretty.<name> 構成オプション(config option)を別のフォーマット名または
_format:_ 文字列に設定することで、追加のフォーマットを定義できます
(git-config(1) 参照)。組み込みフォーマットの詳細は以下のとおりです:

   • _oneline_

          <hash> <title line>

     これは、可能な限りコンパクトになるように設計されています。

   • _short_

          commit <hash>
          Author: <author>

          <title line>

   • _medium_

          commit <hash>
          Author: <author>
          Date:   <author date>

          <title line>

          <full commit message>

   • _full_

          commit <hash>
          Author: <author>
          Commit: <committer>

          <title line>

          <full commit message>

   • _fuller_

          commit <hash>
          Author:     <author>
          AuthorDate: <author date>
          Commit:     <committer>
          CommitDate: <committer date>

          <title line>

          <full commit message>

   • _reference_

          <abbrev hash> (<title line>, <short author date>)

     この形式は、コミットメッセージ内の別のコミットを参照するために使用
     され、 ‘--pretty='format:%C(auto)%h (%s, %ad)'’ と同じです。 デフォ
     ルトでは、別の ‘--date’ オプションが明示的に指定されていない限り、
     日付は ‘--date=short’ でフォーマットされます。formatプレースホルダ
     ーを使用する他の ‘format:’ と同様に、その出力は、 ‘--decorate’ や
     ‘--walk-reflogs’ などの他のオプションの影響を受けません。

   • _email_

          From <hash> <date>
          From: <author>
          Date: <author date>
          Subject: [PATCH] <title line>

          <full commit message>

   • _mboxrd_

     _email_ と同様ですが、コミットメッセージの "From " で始まる行(前に
     0個以上の ">" が付いている)は ">" でクォートされているため、新しい
     コミットの開始と混同されることはありません。

   • _raw_

     _raw_ 形式は、コミットオブジェクトに格納されているとおりにコミット
     全体を正確に表示します。とりわけ –abbrev または –no-abbrev のどちら
     が使用されているかに関係なく、ハッシュは完全に表示され、「親」
     (parents)情報は、移植や履歴の単純化を考慮せずに、真の親のコミットを
     示します。この形式は、コミットの表示方法に影響しますが、いわゆる
     ‘git log --raw’ の差分の表示方法ではありません。生のdiff形式で完全
     なオブジェクト名を取得するには、 ‘--no-abbrev’ を使用します。

   • _format:<string>_

     _format:<string>_ 形式を使用すると、表示する情報を指定できます。注
     意: これはprintf書式に少し似ていますが、 _\n_ の代わりに _%n_ を使
     用して改行を取得するという例外に注意してください。

     例: _format:"The author of %h was %an, %ar%nThe title was
     >>%s<<%n"_ は以下のように表示されます:

          The author of fe6e0ee was Junio C Hamano, 23 hours ago
          The title was >>t4119: test autocomputing -p<n> for traditional diff input.<<

     さて、以下がプレースホルダー達です:

        • 単一のリテラル文字に展開されるプレースホルダー:

          _%n_
               改行(newline)

          _%%_
               ’%’そのもの

          _%x00_
               16進数のバイト値を出力

        • うしろのプレースホルダーのフォーマッティングに影響するプレース
          ホルダー:

          _%Cred_
               赤色に切り替える

          _%Cgreen_
               緑色に切り替える

          _%Cblue_
               青色に切り替える。

          _%Creset_
               色をリセットする

          _%C(…)_
               git-config(1) の "CONFIGURATION FILE" 節の Values で説明
               されている色の指定。 デフォルトでは、色はログ出力が有効に
               なっている場合にのみ表示されます（ ‘color.diff’ または ‘
               color.ui‘ または ‘--color`によって、ターミナルに行く場合
               は前者の `auto’ 設定を尊重します)。 ‘%C(auto,...)’ は、
               default の歴史的同義語として受け入れられます(例:
               ‘%C(auto,red)’)。 ‘%C(always,...)’ を指定すると、色が有効
               になっていない場合でも色が表示されます(この形式やgitが色
               付けする可能性のある他のすべてのものを含め、出力全体の色
               を有効にするために ‘--color = always’ の使用を検討してく
               ださい)。 ‘auto’ のみ(つまり、 ‘%C(auto)’ )は、色が再び切
               り替わるまで、続くプレースホルダーで自動色付けをオンにし
               ます。

          _%m_
               左(‘<’) または 右(‘>’) または 境界 (‘-’) の印

          _%w([<w>[,<i1>[,<i2>]]])_
               git-shortlog(1) の -w オプションのように、 行の折り返しを
               切り替えます。

          _%<(<N>[,trunc|ltrunc|mtrunc])_
               次のプレースホルダーに少なくともN列を使用させ、 必要に応
               じて右側にスペースを埋め込みます。オプションで、出力がN列
               より長い場合は、先頭(ltrunc)または中間(mtrunc)または末尾
               (trunc)で切り捨てます。注意: 切り捨ては、 N >= 2 でのみ正
               しく機能することに注意してください。

          _%<|(<N>)_
               次のプレースホルダーを少なくともN番目の列まで取得し、 必
               要に応じて右側にスペースを埋め込みます

          _%>(<N>)_, _%>|(<N>)_
               それぞれ _%<(<N>)_ 、 _%<|(<N>)_ に似ていますが、 左側に
               スペースが埋め込まれています

          _%>>(<N>)_, _%>>|(<N>)_
               _%>(<N>)_ 、 _%>|(<N>)_ とそれぞれ似ていますが、 次のプレ
               ースホルダーが指定されたよりも多くのスペースを取り、その
               左側にスペースがある場合は、それらのスペースを使用します
               。

          _%><(<N>)_, _%><|(<N>)_
               それぞれ _%<(<N>)_ 、 _%<|(<N>)_ に似ていますが、 両側に
               パディングがあります(つまり、テキストが中央に配置されます
               )

        • コミットから抽出された情報に展開するプレースホルダー:

          _%H_
               コミットハッシュ

          _%h_
               省略されたコミットハッシュ

          _%T_
               ツリーハッシュ

          _%t_
               省略されたツリーハッシュ

          _%P_
               親のハッシュ達

          _%p_
               省略された親のハッシュ達

          _%an_
               作者名

          _%aN_
               作者名( .mailmap に関しては、git-shortlog(1) または
               git-blame(1) を参照)

          _%ae_
               作者電子メールアドレス

          _%aE_
               作者電子メールアドレス(.mailmap に関しては
               git-shortlog(1) または git-blame(1) を参照)

          _%al_
               作者電子メールアドレスアカウント名(local-part)( _@_ の前
               の部分)

          _%aL_
               作者電子メールアドレスアカウント名(local-part)(_%al_ 参照
               ) .mailmap に関しては git-shortlog(1) または git-blame(1)
               参照)

          _%ad_
               作成日(フォーマットに関しては –date= オプション参照)

          _%aD_
               作成日 RFC2822形式

          _%ar_
               作成日 相対(relative)形式

          _%at_
               作成日 UNIXタイムスタンプ形式

          _%ai_
               作成日 ISO 8601風形式

          _%aI_
               作成日 厳密なISO 8601形式

          _%as_
               作成日 短い形式(‘YYYY-MM-DD’)

          _%ah_
               作成日 human形式( git-rev-list(1) の ‘--date=human’ オプ
               ションのようなかんじ)

          _%cn_
               コミッター名

          _%cN_
               コミッター名( .mailmap に関しては git-shortlog(1) または
               git-blame(1) 参照)

          _%ce_
               コミッター電子メールアドレス

          _%cE_
               コミッター電子メールアドレス(.mailmap に関しては
               git-shortlog(1) または git-blame(1) 参照)

          _%cl_
               コミッター電子メールアドレスアカウント名(local-part)( _@_
               の前の部分)

          _%cL_
               コミッター電子メールアドレスアカウント名(local-part)(
               _%cl_ 参照) .mailmap に関しては git-shortlog(1) または
               git-blame(1) 参照)

          _%cd_
               コミッター日付(フォーマットに関しては –date= オプション参
               照)

          _%cD_
               コミッター日付 RFC2822形式

          _%cr_
               コミッター日付 相対(relative)形式

          _%ct_
               コミッター日付 UNIXタイムスタンプ形式

          _%ci_
               コミッター日付 ISO 8601風形式

          _%cI_
               コミッター日付 厳密なISO 8601形式

          _%cs_
               コミッター日付 短い形式(‘YYYY-MM-DD’)

          _%ch_
               コミッター日付 human形式(git-rev-list(1) の
               ‘--date=human’ オプションのようなかんじ)

          _%d_
               ref名 git-log(1) の –decorate オプションみたいなの

          _%D_
               " (", ")" で囲ってないref名

          _%(describe[:options])_
               git-describe(1) のような人間が読める名前。 説明できないコ
               ミットの場合は空の文字列。 ‘describe’ 文字列の後には、コ
               ロンと0個以上のカンマ区切りオプションを続けることができま
               す。タグが同時に追加または削除されると、説明に一貫性がな
               くなる可能性があります。

                  • _match=<pattern>_: "refs/tags/" プレフィックスを除い
                    て、指定された ‘glob(7)’ パターンに一致するタグのみ
                    を考慮します。

                  • _exclude=<pattern>_: "refs/tags/" プレフィックスを除
                    いて、指定された ‘glob(7)’ パターンに一致するタグを
                    考慮しないでください。

          _%S_
               コミットに到達したコマンドラインで指定されたref名 ( ‘git
               log --source’ など)は、 ‘git log’ でのみ機能します

          _%e_
               エンコーディング

          _%s_
               件名(subject)

          _%f_
               ファイル名に適した、サニタイズされた件名

          _%b_
               本文(body)

          _%B_
               生本文(raw body)(ラップされてない件名と本文)

          _%N_
               コミットノート(commit notes)

          _%GG_
               署名されたコミットの為のGPSからの生の検証メッセージ

          _%G?_
               良い(good)な(有効な)署名の場合は "G" 、 悪い(bad)な署名の
               場合は "B" 、有効性が不明(unknown)な良い署名の場合は "U"
               、期限切れ(eXpired)の良い署名の場合は "X" 、期限切れのキ
               ーで作成された良い署名の場合は "Y" 、取り消されたキーによ
               って作成された良い署名の場合は "R" 、署名を確認できない場
               合(キーの欠落など)は "E" 、署名がない場合は "N" を表示し
               ます。

          _%GS_
               署名されたコミットの署名者の名前を表示する

          _%GK_
               署名されたコミットに署名するために使用されるキーを表示す
               る

          _%GF_
               署名されたコミットに署名するために使用されるキーのフィン
               ガープリントを表示する

          _%GP_
               署名されたコミットに署名するためにサブキーが使用された 主
               キーのフィンガープリントを表示します

          _%GT_
               署名されたコミットに署名するために使用されるキーの信頼レ
               ベル(trust level)を表示します

          _%gD_
               reflogセレクター(例:‘refs/stash@{1}’ or ‘refs/stash@{2
               minutes ago}’) この形式は、 ‘-g’ オプションで説明されてい
               る規則に従います。 ‘@’ の前の部分は、コマンドラインで指定
               されたrefnameです(したがって、 ‘git log -g
               refs/heads/master’ は ‘refs/heads/master@{0}’ を生成しま
               す)。

          _%gd_
               短縮されたreflogセレクター。 ‘%gD’ と同じですが、 人間が
               読みやすいようにrefname部分が短縮されています(したがって
               、 ‘refs/heads/master’ は単に ‘master’ になります)。

          _%gn_
               reflog ID名

          _%gN_
               reflog ID名( .mailmap に関しては git-shortlog(1) または
               git-blame(1) 参照)

          _%ge_
               reflog ID 電子メールアドレス

          _%gE_
               reflog ID 電子メールアドレス( .mailmap に関しては
               git-shortlog(1) または git-blame(1) 参照)

          _%gs_
               reflog 件名

          _%(trailers[:options])_
               git-interpret-trailers(1) によって解釈されるようにボディ
               のトレーラーを表示します。 ‘trailers’ 文字列の後には、コ
               ロンと0個以上のカンマ区切りオプションを続けることができま
               す。いずれかのオプションが複数回提供された場合、それぞれ
               最後のものが優先されます。

               ブール値オプションは、オプションの値 ‘[=<BOOL>]’ を受け入
               れます。 値 ‘true’ 、‘false’ 、 ‘on’ 、‘off’ などはすべて
               受け入れられます。 git-config(1) の "EXAMPLES" の
               "boolean" サブセクションを参照してください。ブール値オプ
               ションが値なしで指定された場合、それは有効を指定した事に
               なります。

                  • _key=<K>_ は指定されたキーを持つトレーラーのみを表示
                    します。マッチングは大文字と小文字を区別せずに行われ
                    、末尾のコロンはオプションです。オプションが複数回指
                    定されている場合、いずれかのキーに一致するトレーラー
                    行が表示されます。このオプションは自動的に ‘only’ オ
                    プションを有効にして、トレーラーブロック内の非トレー
                    ラー行が非表示になるようにします。それが望ましくない
                    場合は、 ‘only=false’ で無効にすることができます。 た
                    とえば、 ‘%(trailers:key=Reviewed-by)’ は、キーが
                    ‘Reviewed-by‘のトレーラー行を表示します。

                  • _only[=<BOOL>]_ はトレーラーブロックに非トレーラー行
                    を含めるかどうかを選択します。

                  • _separator=<SEP>_ はトレーラー行の間に挿入される区切
                    り文字を指定します。このオプションが指定されていない
                    場合、各トレーラー行は改行文字で終了します。文字列
                    SEPには、上記のリテラルフォーマットコードが含まれる
                    場合があります。区切り文字としてコンマを使用するには
                    、次のオプションとして解析されないよう ‘%x2C’ を使用
                    する必要があります。 たとえば、
                    %(trailers:key=Ticket,separator=%x2C )‘ は、キーが
                    "Ticket" であるすべてのトレーラー行をカンマとスペー
                    スで区切って表示します。

                  • _unfold[=<BOOL>]_ は interpret-trailer の ‘--unfold’
                    オプションが指定されたかのように動作させます。たとえ
                    ば、 ‘%(trailers:only,unfold=true)’ が展開され、すべ
                    てのトレーラー行が表示されます。

                  • _keyonly[=<BOOL>]_ トレーラーのキー部分のみを表示。

                  • _valueonly[=<BOOL>]_ トレーラーの値部分のみ表示。

                  • _key_value_separator=<SEP>_ トレーラー行の間に挿入さ
                    れる区切り文字を指定します。このオプションが指定され
                    ていない場合、各トレーラーのキーと値のペアは ": " で
                    区切られます。 それ以外の場合は、上記の
                    _separator=<SEP>_ と同じセマンティクスを共有します。

     *Note*

     一部のプレースホルダーは、リビジョントラバーサルエンジンに指定され
     た他のオプションに依存する場合があります。 たとえば、 ‘%g*’ reflogオ
     プションは、reflogエントリをトラバースしない限り(たとえば、 ‘git
     log -g`によって)空の文字列を挿入します。コマンドラインで
     `--decorate’ がまだ指定されていない場合、 ‘%d’ と ‘%D’ プレースホル
     ダーは「短い」(short)装飾形式を使用します。

   プレースホルダーの _%_ の後に ‘+’ (プラス記号)を追加すると、プレース
ホルダーが空でない文字列に展開される場合に限り、展開の直前に改行が挿入さ
れます。

   プレースホルダーの _%_ の後に ‘-’ (マイナス記号)を追加すると、プレー
スホルダーが空の文字列に展開された場合にのみ、展開の直前の連続するすべて
の改行が削除されます。

   プレースホルダーの _%_ の後に ‘ ‘ (スペース)を追加すると、プレースホ
ルダーが空でない文字列に展開される場合に限り、展開の直前にスペースが挿入
されます。

   • _tformat:_

     _tformat:_ 形式は、 "separator" セマンティクスの代わりに
     "terminator" セマンティクスを提供することを除いて、 _format:_ とま
     ったく同じように機能します。 つまり、各コミットには、エントリ間に区
     切り文字を配置するのではなく、メッセージターミネータ文字(通常は改行
     )が追加されます。 これは、「1行」形式と同様に、1行形式の最終エント
     リが新しい行で適切に終了することを意味します。 例えば:

          $ git log -2 --pretty=format:%h 4da45bef \
            | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
          4da45be
          7134973 -- NO NEWLINE

          $ git log -2 --pretty=tformat:%h 4da45bef \
            | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
          4da45be
          7134973

     加えて、 ‘%’ が含まれている認識されない文字列は、その前に
     ‘tformat:’ があるかのように解釈(interpret)されます。 たとえば、以下
     の2つは同等です:

          $ git log -2 --pretty=tformat:%h 4da45bef
          $ git log -2 --pretty=%h 4da45bef


Raw output format
*****************

‘git-diff-index’ と ‘git-diff-tree’ と ‘git-diff-files’ と ‘git diff
--raw’ からの生の出力形式は非常に似ています。

   これらのコマンドはすべて、2つのセットを比較します。なお、比較されるも
のは異なります:

git-diff-index <tree-ish>
     <tree-ish> とファイルシステム上のファイルを比較します。

git-diff-index –cached <tree-ish>
     <tree-ish> とインデックスを比較します。

git-diff-tree [-r] <tree-ish-1> <tree-ish-2> [<pattern>…]
     2つの引数で指定されたツリーを比較します。

git-diff-files [<pattern>…]
     インデックスとファイルシステム上のファイルを比較します。

   "git-diff-tree" コマンドは、比較対象のハッシュ値を出力することで出力
を開始します。その後、すべてのコマンドは、変更されたファイルごとに1つの
出力行を出力します。

   出力行は以下のようにフォーマットされます:

     in-place edit  :100644 100644 bcd1234 0123456 M file0
     copy-edit      :100644 100644 abcd123 1234567 C68 file1 file2
     rename-edit    :100644 100644 abcd123 1234567 R86 file1 file3
     create         :000000 100644 0000000 1234567 A file4
     delete         :100644 000000 1234567 0000000 D file5
     unmerged       :000000 000000 0000000 0000000 U file6

   つまり、左から右へ:

  1. コロン(:)

  2. "src" のモード。作成(creation)またはマージされていない(unmerged)場
     合は 000000

  3. 空白

  4. "dst" のモード。作成(creation)またはマージされていない(unmerged)場
     合は 000000

  5. 空白

  6. "src" のsha1。作成(creation)またはマージされていない(unmerged)場合
     は 0{40}

  7. 空白

  8. "dst" のsha1。作成(creation)またはマージされていない(unmerged)また
     は作業ツリーにある場合は 0{40}

  9. 空白

  10. ステータスの後に、オプションの「スコア数」("score" number)が続きま
     す

  11. ‘-z’ オプションが使用されている場合はタブまたはNUL

  12. "src" のパス

  13. ‘-z’ オプションが使用されている場合タブまたはNUL。ステータスCまた
     はRにのみ存在します

  14. "dst" のパス。ステータスCまたはRにのみ存在します

  15. LFでレコードを終了します。 ‘-z’ オプションが使用されている場合は
     NULでレコードを終了します。

   ステータス文字の種類は以下のとおり:

   • A: ファイルの追加

   • C: ファイルを新しいファイルにコピー

   • D: ファイルの削除

   • M: ファイルの内容やモードの変更

   • R: ファイル名の名前変更

   • T: ファイルのタイプを変更

   • U: ファイルはマージされていません(コミットする前にマージを完了する
     必要があります)

   • X: 「不明な」変更タイプ(おそらくバグです。報告してください)

   ステータス文字CとRの後には常にスコアが続きます(移動またはコピーのソー
スとターゲットの間の類似性のパーセンテージを示します)。ステータス文字Mの
後には、ファイルの書き換えのスコア(非類似度のパーセンテージを示す)が続く
場合があります。

   <sha1> は、ファイルがファイルシステム上で新規で、インデックスと同期し
ていない場合、すべて0として表示されます。

   例:

     :100644 100644 5be4a4a 0000000 M file.c

   ‘-z’ オプションを指定しない場合、構成変数 ‘core.quotePath’ で説明され
ているように、通常の文字以外(unusual characters)を含むパス名が引用符で囲
まれます(git-config(1) 参照)。 ‘-z’ を使用すると、ファイル名がそのまま出
力され、行はNULバイトで終了します。


diff format for merges
**********************

"git-diff-tree" と "git-diff-files" と "git-diff –raw" は、 ‘-c’ または
‘--cc’ オプションを使用して、マージコミットに対してもdiff出力を生成でき
ます。出力は、以下の点で上記の形式とは異なります:

  1. 親ごとにコロン(:)があります

  2. より多くの "src" モードと "src" sha1があります

  3. statusは、各親のステータス文字を連結したものです

  4. オプションの「スコア数」はありません

  5. ファイルのタブ区切りのパス名

   ‘-c’ および ‘ -cc‘ の場合、履歴のいずれかの側でファイルの名前が変更さ
れた場合でも、宛先(dst)または最終パスのみが表示されます。
‘--combined-all-paths’ を使用すると、各親のパスの名前が表示され、それに
続いてマージコミットのパスの名前が表示されます。

   例: ‘--combined-all-paths’ を使用しない ‘-c’ および ‘--cc’ の場合:

     ::100644 100644 100644 fabadb8 cc95eb0 4866510 MM       desc.c
     ::100755 100755 100755 52b7a2d 6d1ac04 d2ac7d7 RM       bar.sh
     ::100644 100644 100644 e07d6c5 9042e82 ee91881 RR       phooey.c

   例: ‘-c’ または ‘--cc’ のいずれかに ‘--combined-all-paths’ が追加され
た場合:

     ::100644 100644 100644 fabadb8 cc95eb0 4866510 MM       desc.c  desc.c  desc.c
     ::100755 100755 100755 52b7a2d 6d1ac04 d2ac7d7 RM       foo.sh  bar.sh  bar.sh
     ::100644 100644 100644 e07d6c5 9042e82 ee91881 RR       fooey.c fuey.c  phooey.c

   注意: ’combined diff’は、すべての親から変更されたファイルのみをリスト
することに注意してください。


Generating patch text with -p
*****************************

git-diff(1) 、 git-log(1) 、 git-show(1) 、 git-diff-index(1) 、
git-diff-tree(1) 、 git-diff-files(1) に ‘-p’ オプションを付けて実行する
とパッチテキストを生成します。パッチテキストの作成は、
‘GIT_EXTERNAL_DIFF’ と ‘GIT_DIFF_OPTS’ 環境変数( git(1) 参照)、および
‘diff’ 属性( gitattributes(5) 参照)を介してカスタマイズできます。

   -pオプションが生成するものは、従来のdiff形式とは少々異なります:

  1. 先行して、以下のような "git diff" ヘッダーがあります:

          diff --git a/file1 b/file2

     名前の変更/コピーが含まれない限り、 ‘a/’ と ‘b/’ のファイル名は同じ
     です。 特に、作成または削除の場合でも、 ‘a/’ または ‘b/’ ファイル名
     の代わりに ‘/dev/ null’ が使用されることはありません。

     名前変更/コピーが含まれる場合、 ‘file1’ と‘file2‘ は、それぞれ名前
     変更/コピーのソースファイルの名前と、名前変更/コピーが生成するファ
     イルの名前を示します。

  2. その後に、1つ以上の拡張ヘッダー行達が続きます:

          old mode <mode>
          new mode <mode>
          deleted file mode <mode>
          new file mode <mode>
          copy from <path>
          copy to <path>
          rename from <path>
          rename to <path>
          similarity index <number>
          dissimilarity index <number>
          index <hash>..<hash> <mode>

     ファイルモードは、ファイルタイプとファイル許可ビットを含む6桁の8進
     数として出力されます。

     拡張ヘッダーのパス名には、 ‘a/’ および ‘b/’ プレフィックスは含まれ
     ません。

     類似インデックス(similarity index)は変更されていない行のパーセンテ
     ージであり、非類似インデックス(dissimilarity index)は変更された行の
     パーセンテージです。これは切り捨てられた整数であり、その後にパーセ
     ント記号が続きます。したがって、100％の類似インデックス値は2つの等
     しいファイルを表し、100％の非類似性は古いファイルから新しいファイル
     に移行された行がないことを意味します。

     インデックス行には、変更前後のブロブオブジェクト名が含まれます。
     <mode> は、ファイルモードが変更されない場合に含まれます。それ以外の
     場合、別々の行は古いモードと新しいモードを示します。

  3. 通常の文字でないキャラクタ(\"unusual\" characters)を含むパス名は、
     構成変数 ‘core.quotePath’ で説明されているように引用符で囲まれてい
     ます( git-config(1)参照)。

  4. 出力内のすべての ‘file1’ ファイルはコミット前のファイルを参照し、す
     べての ‘file2’ ファイルはコミット後のファイルを参照します。各変更を
     各ファイルに順番に適用するのは誤りです。たとえば、以下のパッチはaと
     bを交換します:

          diff --git a/a b/b
          rename from a
          rename to b
          diff --git a/b b/a
          rename from b
          rename to a

  5. ハンクのヘッダーには、ハンクが適用される関数の名前が記載されていま
     す。特定の言語に合わせてこれを調整する方法の詳細については、
     gitattributes(5) の "Defining a custom hunk-header" を参照してくだ
     さい。


Combined diff format
********************

diffを生成するコマンドは、マージを表示するときに ‘-c’ または ‘--cc’ オプ
ションを使用して「合成diff」(combined diff)を生成できます。これは
git-diff(1) または git-show(1) でのマージを表示するときのデフォルトの形
式です。 注意: これらのコマンドのいずれかに適切な ‘--diff-merges’ オプシ
ョンを指定して、特定の形式で差分を強制的に生成できることにも注意してくだ
さい。

   合成diff形式は以下のようになります:

     diff --combined describe.c
     index fabadb8,cc95eb0..4866510
     --- a/describe.c
     +++ b/describe.c
     @@@ -98,20 -98,12 +98,20 @@@
             return (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;
       }

     - static void describe(char *arg)
      -static void describe(struct commit *cmit, int last_one)
     ++static void describe(char *arg, int last_one)
       {
      +      unsigned char sha1[20];
      +      struct commit *cmit;
             struct commit_list *list;
             static int initialized = 0;
             struct commit_name *n;

      +      if (get_sha1(arg, sha1) < 0)
      +              usage(describe_usage);
      +      cmit = lookup_commit_reference(sha1);
      +      if (!cmit)
      +              usage(describe_usage);
      +
             if (!initialized) {
                     initialized = 1;
                     for_each_ref(get_name);

  1. まず "git diff" ヘッダーがあり、以下のようになります( ‘-c’ オプショ
     ンが使用されている場合):

          diff --combined file

     または、以下のようになります( ‘--cc’ オプションが使用されている場合
     ):

          diff --cc file

  2. その後に1つ以上の拡張ヘッダー行が続きます(以下の例は、2つの親とのマ
     ージを示しています):

          index <hash>,<hash>..<hash>
          mode <mode>,<mode>..<mode>
          new file mode <mode>
          deleted file mode <mode>,<mode>

     ‘mode <mode>,<mode>..<mode>’ 行は、<mode> の少なくとも1つが他の
     <mode> と異なる場合にのみ表示されます。検出されたコンテンツの移動
     (名前の変更とコピーの検出)に関する情報を含む拡張ヘッダーは、2つの
     <tree-ish> のdiffで機能するように設計されており、合成diff形式では使
     用されません。

  3. その後に2行の from-file/to-file ヘッダーが続きます

          --- a/file
          +++ b/file

     従来の統一diff形式の2行ヘッダーと同様に、 ‘/dev/null’ は、作成また
     は削除されたファイルを通知するために使用されます。

     ただし、 –combined-all-paths オプションが指定されている場合、2行の
     from-file/to-file の代わりに、 N+1 行の from-file/to-file ヘッダー
     が取得されます。ここで、 N はマージコミットの親の数です。

          --- a/file
          --- a/file
          --- a/file
          +++ b/file

     この拡張形式は、名前変更またはコピー検出がアクティブな場合に役立ち
     、別の親のファイルの元の名前を確認できます。

  4. チャンクヘッダーの形式が変更され、誤って ‘patch-p1’ にフィードされ
     るのを防ぎます。合成差分形式は、マージコミットの変更を確認するため
     に作成されたものであり、適用されることを意図したものではありません
     。この変更は、拡張された「インデックス」ヘッダーの変更に似ています:

          @@@ <from-file-range> <from-file-range> <to-file-range> @@@

     合成diff形式のチャンクヘッダーには親の数+1の ‘@’ 文字があります。

   従来の統一diff形式とは異なり、2つのファイルAとBが、 ‘-’ (マイナスは
Aに表示されますが、Bでは削除されます) または ‘+’ (プラスはAにはありませ
んが、Bには追加されます)、または ‘" "’（スペースは変更なし) プレフィック
スを持つ単一の列で表示される場合、この形式は2つ以上のファイル file1,
file2,… を1つのファイルXと比較し、Xが各 fileN とどのように異なるかを示し
ます。ファイルNごとに1つの列が出力行の前に追加され、Xの行が出力行とどの
ように異なるかを示します。

   列Nの ‘-’ 文字は、その行が fileN に表示されているが、結果には表示され
ていないことを意味します。 列Nの ‘+’ 文字は、結果に行が表示され、 fileN
にその行がないことを意味します(つまり、その親の観点から見て行が追加され
たことを示す)。

   上記の出力例では、関数のシグネチャが両方のファイルから見て変更されて
います(したがって、 file1 と file2 の両方から2つの ‘-’ が削除され、さら
に ‘++’ が追加されたため、 file1 と file2 のどちらにも表示されません)。
また、他の8行は file1 と同じですが、 file2 には表示されません(したがって
、接頭辞として ‘+’ が付けられます)。

   ‘git diff-tree -c’ で表示される場合、マージコミットの親をマージ結果と
比較します(つまり、 file1..fileN が親です)。 ‘git diff-files -c’ で表示
される場合、2つの未解決のマージ親を作業ツリーファイルと比較します(つまり
、 file1 はステージ2、別名「私たちのバージョン」、 file2 はステージ3、別
名「彼らのバージョン」です)。


other diff formats
******************

‘--summary’ オプションは、新しく追加、削除、名前変更、およびコピーされた
ファイルを説明します。‘--stat’ オプションは、 diffstat(1) グラフ を出力
に追加します。これらのオプションは、 ‘-p’ などの他のオプションと組み合わ
せることができ、人間が読むことを目的としています。

   名前の変更またはコピーを伴う変更を表示する場合、 ‘--stat’ 出力は、パ
ス名の共通のプレフィックスとサフィックスを組み合わせることにより、パス名
をコンパクトにフォーマットします。 たとえば、4行を変更(modify)しながら
‘arch/i386/Makefile’ を ‘arch/x86/Makefile’ に移動(move)する変更
(change)は、次のように表示されます:

     arch/{i386 => x86}/Makefile    |   4 +--

   ‘--numstat’ オプションは diffstat(1) 情報を提供しますが、人間ではなく
ソフトウェアで読むのを容易にするように設計されています。 ‘--numstat’ 出
力のエントリは以下のようになります:

     1       2       README
     3       1       arch/{i386 => x86}/Makefile

   この形式は、左から右へ:

  1. 追加行数

  2. タブ

  3. 削除行数

  4. タブ

  5. パス名(おそらく rename/copy 情報を含む)

  6. 改行

   ‘-z’ 出力オプションが有効な場合、出力は以下のようにフォーマットされま
す:

     1       2       README NUL
     3       1       NUL arch/i386/Makefile NUL arch/x86/Makefile NUL

   これは:

  1. 追加行数

  2. タブ

  3. 削除行数

  4. タブ

  5. NUL(rename/copy された場合のみ存在します)

  6. プリイメージのパス名

  7. NUL(rename/copy された場合のみ存在します)

  8. ポストイメージのパス名(rename/copy された場合のみ存在します)

  9. NUL

   名前が変更された場合のプリイメージパスの前の追加の ‘NUL’ は、出力を読
み取るスクリプトが、先読みせずに、読み取られている現在のレコードがシング
ルパスレコードであるか、名前変更/コピーレコードであるか、を判断できるよ
うにするためです。追加および削除された行を読み取った後、 ‘NUL’ まで読み
取るとパス名が生成されますが、それが ‘NUL’ の場合、レコードには2つのパス
が表示されます。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-diff,  Up: Top

Name
****

git-diff — Show changes between commits, commit and working tree, etc


Synopsis
********

     git diff [<options>] [<commit>] [–] [<path>…]
     git diff [<options>] –cached [–merge-base] [<commit>] [–] [<path>…]
     git diff [<options>] [–merge-base] <commit> [<commit>…] <commit> [–] [<path>…]
     git diff [<options>] <commit>…<commit> [–] [<path>…]
     git diff [<options>] <blob> <blob>
     git diff [<options>] –no-index [–] <path> <path>


DESCRIPTION
***********

Show changes between the working tree and the index or a tree, changes
between the index and a tree, changes between two trees, changes
resulting from a merge, changes between two blob objects, or changes
between two files on disk.

_git diff_ [<options>] [–] [<path>…]
     This form is to view the changes you made relative to the index
     (staging area for the next commit).  In other words, the
     differences are what you _could_ tell Git to further add to the
     index but you still haven’t.  You can stage these changes by using
     git-add(1).

_git diff_ [<options>] –no-index [–] <path> <path>
     This form is to compare the given two paths on the filesystem.  You
     can omit the ‘--no-index’ option when running the command in a
     working tree controlled by Git and at least one of the paths points
     outside the working tree, or when running the command outside a
     working tree controlled by Git.  This form implies ‘--exit-code’.

_git diff_ [<options>] –cached [–merge-base] [<commit>] [–] [<path>…]
     This form is to view the changes you staged for the next commit
     relative to the named <commit>.  Typically you would want
     comparison with the latest commit, so if you do not give <commit>,
     it defaults to HEAD. If HEAD does not exist (e.g.  unborn branches)
     and <commit> is not given, it shows all staged changes.  –staged is
     a synonym of –cached.

     If –merge-base is given, instead of using <commit>, use the merge
     base of <commit> and HEAD. ‘git diff --cached --merge-base A’ is
     equivalent to ‘git diff --cached $(git merge-base A HEAD)’.

_git diff_ [<options>] [–merge-base] <commit> [–] [<path>…]
     This form is to view the changes you have in your working tree
     relative to the named <commit>.  You can use HEAD to compare it
     with the latest commit, or a branch name to compare with the tip of
     a different branch.

     If –merge-base is given, instead of using <commit>, use the merge
     base of <commit> and HEAD. ‘git diff --merge-base A’ is equivalent
     to ‘git diff $(git merge-base A HEAD)’.

_git diff_ [<options>] [–merge-base] <commit> <commit> [–] [<path>…]
     This is to view the changes between two arbitrary <commit>.

     If –merge-base is given, use the merge base of the two commits for
     the "before" side.  ‘git diff --merge-base A B’ is equivalent to
     ‘git diff $(git merge-base A B) B’.

_git diff_ [<options>] <commit> <commit>… <commit> [–] [<path>…]
     This form is to view the results of a merge commit.  The first
     listed <commit> must be the merge itself; the remaining two or more
     commits should be its parents.  A convenient way to produce the
     desired set of revisions is to use the ‘^@’ suffix.  For instance,
     if ‘master’ names a merge commit, ‘git diff master master^@’ gives
     the same combined diff as ‘git show master’.

_git diff_ [<options>] <commit>..<commit> [–] [<path>…]
     This is synonymous to the earlier form (without the ‘..’) for
     viewing the changes between two arbitrary <commit>.  If <commit> on
     one side is omitted, it will have the same effect as using HEAD
     instead.

_git diff_ [<options>] <commit>...<commit> [–] [<path>…]
     This form is to view the changes on the branch containing and up to
     the second <commit>, starting at a common ancestor of both
     <commit>.  ‘git diff A...B’ is equivalent to ‘git diff $(git
     merge-base A B) B’.  You can omit any one of <commit>, which has
     the same effect as using HEAD instead.

   Just in case you are doing something exotic, it should be noted that
all of the <commit> in the above description, except in the
‘--merge-base’ case and in the last two forms that use ‘..’ notations,
can be any <tree>.

   For a more complete list of ways to spell <commit>, see "SPECIFYING
REVISIONS" section in gitrevisions(7).  However, "diff" is about
comparing two _endpoints_, not ranges, and the range notations
(‘<commit>..<commit>’ and ‘<commit>...<commit>’) do not mean a range as
defined in the "SPECIFYING RANGES" section in gitrevisions(7).

_git diff_ [<options>] <blob> <blob>
     This form is to view the differences between the raw contents of
     two blob objects.


OPTIONS
*******

‘-p’
‘-u’
‘--patch’
     パッチを生成します(generating patches に関するセクションを参照)。 こ
     れがデフォルトです。

‘-s’
‘--no-patch’
     diff出力を抑制します。デフォルトでパッチを表示する ‘git show’ のよ
     うなコマンド、または ‘--patch’ の効果をキャンセルする場合に便利です
     。

‘-U<n>’
‘--unified=<n>’
     通常の3行ではなく、<n> 行の内容でdiffを生成します。 ‘--patch’ の機
     能を含んでいます。

‘--output=<file>’
     stdout ではなく指定のファイルに出力します。

‘--output-indicator-new=<char>’
‘--output-indicator-old=<char>’
‘--output-indicator-context=<char>’
     生成されたパッチの新しい行、古い行、またはコンテキスト行を示すため
     に使用される文字を指定します。 通常、それらはそれぞれ _+_ 、 _-_ 、
     ’ ’ です。

‘--raw’
     生形式(raw format)でdiffを生成します。

‘--patch-with-raw’
     ‘-p --raw’ の同義語。

‘--indent-heuristic’
     diffハンクの境界をずらす(shift)ヒューリスティックを有効にして、パッ
     チを読みやすくします。 これがデフォルトです。

‘--no-indent-heuristic’
     インデントヒューリスティック(indent heuristic)を無効にします。

‘--minimal’
     より多くの時間を費やして、可能な限り最小のdiffが生成されるようにし
     ます。

‘--patience’
     "patience diff" アルゴリズムを使用してdiffを生成します。

‘--histogram’
     "histogram diff" アルゴリズムを使用してdiffを生成します。

‘--anchored=<text>’
     "anchored diff" アルゴリズムを使用してdiffを生成します。

     このオプションは複数回指定できます。

     行がソースと宛先の両方に存在し、1回だけ存在し、このテキストで始まる
     場合、このアルゴリズムは、その行が出力に削除または追加として表示さ
     れないようにします。内部で "patience diff" アルゴリズムを使用します
     。

‘--diff-algorithm={patience|minimal|histogram|myers}’
     diffアルゴリズムを選択します。その派生(variants)は以下のとおりです:

     ‘default’, ‘myers’
          基本的な貪欲な差分アルゴリズム(greedy diff algorithm)。現在、
          これがデフォルトです。

     ‘minimal’
          より多くの時間を費やして、可能な限り最小のdiffが生成されるよう
          にします。

     ‘patience’
          パッチを生成する時に "patience diff" アルゴリズムを使います。

     ‘histogram’
          このアルゴリズムは、忍耐アルゴリズム(patience algorithm)を拡張
          して、「発生率の低い共通要素をサポート」(support
          low-occurrence common elements)します。

     たとえば、 あなたが ‘diff.algorithm’ 変数をデフォルト以外の値に設定
     した上で、それでもデフォルト値を使用する場合は、
     ‘--diff-algorithm=default’ オプションを使用する必要があります。

‘--stat[=<width>[,<name-width>[,<count>]]]’
     diffstatを生成します。 デフォルトでは、必要なだけのスペースがファイ
     ル名部分に使用され、残りはグラフ部分に使用されます。最大幅はデフォ
     ルトで端末幅、または端末に接続されていない場合は80桁であり、
     ‘<width>’ で上書きできます。ファイル名部分の幅は、コンマの後に別の
     幅 ‘<name-width>’ を指定することで制限できます。グラフ部分の幅は、
     ‘--stat-graph-width=<width>’ (統計グラフを生成するすべてのコマンド
     に影響します)を使用するか、 ‘diff.statGraphWidth=<width>’ ( ‘git
     format-patch’ に影響しません)を設定することによって制限できます。
     3番目のパラメータ ‘<count>’ を指定することにより、出力を最初の
     ‘<count>’ 行に制限し、それに ‘...’ が続く形にできます。

     これらのパラメータは、 ‘--stat-width=<width>’ と
     ‘--stat-name-width=<name-width>’ と ‘--stat-count=<count>’ を使用し
     て個別に設定することもできます。

‘--compact-summary’
     ファイルの作成や削除( "new" または "gone" 。オプションでシンボリッ
     クリンクの場合は "+l" )、diffstatのモード変更(実行可能ビットを追加
     または削除する場合は、それぞれ "+x" または "-x" )など、拡張ヘッダー
     情報の要約を出力します。情報はファイル名部分とグラフ部分の間に置か
     れます。本機能は ‘--stat’ の機能を含んでいます。

‘--numstat’
     ‘--stat`に似ていますが、プログラムで処理しやすい(machine friendly)よ
     うに、追加および削除された行数を10進表記とパス名で省略形なしで表示
     します。バイナリファイルの場合、 `0 0’ の代わりに2つの ‘-’ を出力し
     ます。

‘--shortstat’
     変更されたファイルの総数と、追加および削除された行の数を含む
     ‘--stat’ 形式の最後の行のみを出力します。

‘-X[<param1,param2,...>]’
‘--dirstat[=<param1,param2,...>]’
     各サブディレクトリの相対的な変更量の分布を出力します。 ‘--dirstat’
     の動作は、パラメータのコンマ区切りリストを渡すことでカスタマイズで
     きます。デフォルトは、 ‘diff.dirstat’ 構成変数によって制御されます
     (git-config(1) 参照)。以下のパラメータを使用できます:

     ‘changes’
          ソースから削除された、または宛先に追加された行をカウントして、
          dirstat数を計算します。これは、ファイル内の純粋なコード移動の
          量を無視します。つまり、ファイル内の行の再配置は、他の変更ほど
          カウントされません。これは、パラメーターが指定されていない場合
          のデフォルトの動作です。

     ‘lines’
          通常の行ベースのdiff分析を実行し、削除/追加された行数を合計し
          て、dirstat数を計算します。 (バイナリファイルの場合、バイナリ
          ファイルには行の概念がないため、代わりに64バイトのチャンクをカ
          ウントします)。 これは ‘changes’ 動作よりも高価な ‘--dirstat’
          動作ですが、他の変更と同じようにファイル内の再配置された行をカ
          ウントします。結果の出力は、他の ‘--*stat’ オプションから得ら
          れるものと一致しています。

     ‘files’
          変更されたファイルの数を数えて、dirstat数を計算します。変更さ
          れた各ファイルは、dirstat分析で等しくカウントされます。これは
          、ファイルの内容をまったく調べる必要がないため、計算コストが最
          もかからない ‘--dirstat’ の動作です。

     ‘cumulative’
          親ディレクトリの子ディレクトリの変更も同様にカウントします。
          ‘cumulative’(累積的) を使用する場合、報告されるパーセンテージ
          の合計が100%を超える場合があることに注意してください。デフォル
          トの(非累積的な)動作は、‘noncumulative’ パラメーターで指定でき
          ます。

     <limit>
          整数パラメーターは、カットオフパーセント(デフォルトでは3%)を指
          定します。指定の割合より少ないディレクトリは、出力に表示されま
          せん。

     例: 変更されたファイルの総数の10%未満のディレクトリを無視し、親ディ
     レクトリに子ディレクトリの数を累積しながら、変更されたファイルをカ
     ウント: ‘--dirstat=files,10,cumulative’

‘--cumulative’
     ‘--dirstat=cumulative’ と同義語

‘--dirstat-by-file[=<param1,param2>...]’
     ‘--dirstat=files,param1,param2...’ と同義語

‘--summary’
     作成、名前変更、モード変更などの拡張ヘッダー情報の短い要約
     (condensed summary)を出力します。

‘--patch-with-stat’
     ‘-p --stat’ と同義語。

‘-z’
     ‘--raw’ または ‘--numstat’ または ‘--name-only’ または
     ‘--name-status’ が指定されている場合は パス名を変更せず、出力フィー
     ルドターミネータとしてNULLを使用してください。

     このオプションがないと、構成変数 ‘core.quotePath’ で説明されている
     ように、 通常の文字以外(unusual characters)を含むパス名が引用符で囲
     まれます(git-config(1) 参照)。

‘--name-only’
     変更されたファイルの名前のみを表示します。 多くの場合、ファイル名は
     UTF-8でエンコードされます。 詳細については、 git-log(1) のマニュア
     ルページにあるエンコーディングに関する議論(the discussion about
     encoding)を参照してください。

‘--name-status’
     変更されたファイルの名前とステータスのみを表示します。ステータス文
     字の意味については、 ‘--diff-filter’ オプションの説明を参照してくだ
     さい。 ‘--name-only’ と同じように、ファイル名はしばしばUTF-8でエン
     コードされます。

‘--submodule[=<format>]’
     サブモジュールの違いをどのように表示するかを指定します。
     ‘--submodule=short’ を指定する場合、 _short_ 形式が使用されます。こ
     の形式は、範囲の最初と最後にコミットの名前を表示するだけです。
     ‘--submodule’ または ‘--submodule=log’ が指定されている場合、 _log_
     形式が使用されます。この形式では、 git-submodule(1) ‘summary’ のよ
     うに範囲内のコミットが一覧表示されます。 ‘--submodule=diff’ が指定
     されている場合、 _diff_ 形式が使用されます。この形式は、コミット範
     囲間のサブモジュールの内容の変更のインラインdiffを示します。
     configオプションが設定されていない場合、デフォルトは
     ‘diff.submodule’ または _short_ 形式です。

‘--color[=<when>]’
     色付きのdiffを表示します。 ‘--color’ (つまり、 _=<when>_ ) は
     ‘--color=always’ と同じです。 _<when>_ は、 ‘always’ または ‘never’
     または ‘auto’ のいずれかになります。 ‘color.ui’ と ‘color.diff’ 構
     成設定で 変更できます。

‘--no-color’
     カラーdiffをオフにします。 これは、構成設定(configuration
     settings)を上書きするために使用できます。 ‘--color=never’ と同じで
     す。

‘--color-moved[=<mode>]’
     ソースコードの移動した行を別の色にします。 これは、
     ‘diff.colorMoved’ 構成設定によって変更できます。 <mode>は、オプショ
     ンが指定されていない場合はデフォルトで _no_ になり、 モードが指定さ
     れていないオプションが指定されている場合は _zebra_ になります。 モ
     ードは以下のいずれかでなければなりません:

     no
          移動行をハイライトしません。

     default
          ‘zebra’ の同義語です。これは、将来、より賢明なモードに変更され
          る可能性があります。

     plain
          ある場所で追加され、別の場所で削除された行は、
          _color.diff.newMoved_ で色付けされます。 同様に、
          _color.diff.oldMoved_ は、差分の別の場所に追加された削除された
          行に使用されます。このモードは移動された行をピックアップします
          が、コードのブロックが順列なしで移動されたかどうかを判断するこ
          とはレビューではあまり役に立ちません。

     blocks
          少なくとも20文字の英数字の移動テキストのブロックが貪欲に検出さ
          れます。検出されたブロックは、 _color.diff.{old,new}Moved_ 色
          のいずれかを使用して色付けされます。隣接するブロックを区別する
          ことはできません。

     zebra
          移動されたテキストのブロックは、 _blocks_ モードの場合と同様に
          検出されます。 ブロックは、 _color.diff.{old,new}Moved_ 色また
          は _color.diff.{old,new}MovedAlternative_ 色のいずれかを使用し
          て色付けされます。2つの色の間の変化は、新しいブロックが検出さ
          れたことを示します。

     dimmed-zebra
          _zebra_ に似ていますが、移動されたコードの重要でない部分の追加
          の調光(dimmed)が実行されます。隣接する2つのブロックの境界線は
          興味深いと見なされ、残りは興味深いものではありません。
          ‘dimmed_zebra’ は非推奨の同義語です。

‘--no-color-moved’
     移動検出をオフにします。 これは、構成設定を上書きするために使用でき
     ます。 ‘--color-moved=no’ と同じです。

‘--color-moved-ws=<modes>’
     これは、 ‘--color-moved’ の移動検出を実行するときに空白を無視する方
     法を設定します。 ‘diff.colorMovedWS’ 構成設定で設定できます。 これ
     らのモードは、コンマ区切りのリストとして指定できます:

     no
          移動行検出を実行するときに、空白(whitespace)を無視しない。

     ignore-space-at-eol
          行末(EOL)での空白(whitespace)の変更を無視します。

     ignore-space-change
          空白(whitespace)の数の変更は無視してください。これは、行末の空
          白(whitespace)を無視し、1つ以上の空白文字(whitespace
          characters)の他のすべてのシーケンスを同等と見なします。

     ignore-all-space
          行を比較するときは空白(whitespace)を無視します。これにより、一
          方の行に空白があり、もう一方の行に空白がない場合でも、違いは無
          視されます。

     allow-indentation-change
          最初に移動検出で空白(whitespace)を無視し、空白(whitespace)の変
          更が行ごとに同じである場合にのみ、移動されたコードブロックをブ
          ロックにグループ化します。 これは他のモードと互換性がありませ
          ん。

‘--no-color-moved-ws’
     移動検出を実行するときは、空白(whitespace)を無視しないでください。
     これは、構成設定を上書きするために使用できます。
     ‘--color-moved-ws=no’ と同じです。

‘--word-diff[=<mode>]’
     <mode> を使用して変更された単語を区切ることにより、単語のdiffを表示
     します。デフォルトでは、単語は空白で区切られます。 以下の
     ‘--word-diff-regex’ を参照してください。 <mode> のデフォルトは
     ’plain’です。 <mode> は以下のいずれかである必要があります:

     color
          変更された単語(word)を色のみを使用して強調表示します。
          ‘--color’ を意味します。

     plain
          単語を ‘[-removed-]’ および ‘{+added+}’ として表示します。 区
          切り文字が入力に表示されている場合、区切り文字をエスケープしよ
          うとしないため、出力があいまいになる可能性があります。

     porcelain
          スクリプトの使用を目的とした特別な行ベースの形式を使用します。
          追加/削除/無変更については、通常の統一されたdiff形式で印刷され
          、行の先頭の ‘+’/‘-’/‘ ‘ 文字で始まり、行の終わりまで続きます
          。入力の改行は、それ自体の行のチルダ ‘~’ で表されます。

     none
          単語(word)のdiffを再度無効にします。

     注意: 最初のモードの名前にもかかわらず、有効になっている場合、すべ
     てのモードで変更された部分を強調するために色が使用されることに注意
     してください。

‘--word-diff-regex=<regex>’
     空白以外を単語と見なす代わりに、 <regex> を使用して単語が何であるか
     を決定します。また、すでに有効になっていない限り、この機能は
     ‘--word-diff’ の機能を含んでいます。

     <regex> の重複しないマッチはすべて、単語と見なされます。これらのマ
     ッチの間のすべては空白と見なされ、違いを見つけるためとしては無視さ
     れます！ 正規表現に ‘|[^[:space:]]’ を追加して、空白以外のすべての
     文字とマッチすることを確認することをお勧めします。改行を含むマッチ
     は、改行で黙って切り捨てられます！

     たとえば、 ‘--word-diff-regex=.’ は各文字を単語として扱い、それに応
     じて文字ごとの違いを表示します。

     正規表現は、diffドライバーまたは構成オプション(configuration
     option)を介して設定することもできます。 gitattributes(5) または
     git-config(1) を参照してください。これを指定すると、diffドライバー
     または構成設定(configuration settings)が明示的にオーバーライドされ
     ます。diffドライバーは構成設定を上書きします。

‘--color-words[=<regex>]’
     ‘--word-diff=color’ に ‘--word-diff-regex=<regex>’ を加えたものに相
     当します(正規表現が指定されている場合)。

‘--no-renames’
     構成ファイルにデフォルトで指定されている場合でも、名前変更の検出を
     オフにします。

‘--[no-]rename-empty’
     名前変更ソースとして空のブロブを使用するかどうか。

‘--check’
     変更によって競合マーカーまたは空白エラーが発生した場合に警告します
     。空白エラーと見なされるものは、 ‘core.whitespace’ 構成によって制御
     されます。 デフォルトでは、末尾の空白(空白のみで構成される行を含む
     )と、行の最初のインデント内で直後にタブ文字が続くスペース文字は、空
     白エラーと見なされます。問題が見つかった場合は、ゼロ以外のステータ
     スで終了します。なお、 –exit-code とは互換性がありません。

‘--ws-error-highlight=<kind>’
     diffの ‘context’ または ‘old’ または ‘new’ 行の空白エラーを強調表示
     します。複数の値はコンマで区切られ、 ‘none’ は前の値をリセットし、
     ‘default’ はリストを ‘new’ にリセットし、 ‘all’ は old、new、
     context の省略形です。このオプションが指定されておらず、構成変数
     ‘diff.wsErrorHighlight’ が設定されていない場合、 ‘new’ 行の空白エラ
     ーのみが強調表示されます。空白エラーは ‘color.diff.whitespace’ で色
     分けされています。

‘--full-index’
     パッチ形式の出力を生成するときは、最初の一握りの文字(first handful
     of characters)の代わりに、「インデックス」行にイメージ前およびイメ
     ージ後の完全ブロブオブジェクト名を表示します。

‘--binary’
     ‘--full-index’ に加えて、 ‘git-apply’ で適用できるバイナリ差分を出
     力します。 ‘--patch’ の機能を含んでいます。

‘--abbrev[=<n>]’
     完全な40バイトの16進オブジェクト名をdiff-raw形式の出力とdiff-treeヘ
     ッダー行に表示する代わりに、オブジェクトを一意に参照する、少なくと
     も _<n>_ 桁の16進数の長さの最短のプレフィックスを表示します。diffパ
     ッチ出力形式では、 ‘--full-index’ が優先されます。つまり、
     ‘--full-index’ が指定されている場合、 ‘--abbrev’ に関係なく、完全な
     ブロブ名が表示されます。デフォルト以外の桁数は、 ‘--abbrev=<n>’ で
     指定できます。

‘-B[<n>][/<m>]’
‘--break-rewrites[=[<n>][/<m>]]’
     完全な書き換えの変更を削除と作成のペアに分割します。これには以下の
     2つの目的があります:

     これは、ファイルの完全な書き換えに相当する変更が、コンテキストとし
     てテキストで一致する非常に少数の行と混合された一連の削除と挿入とし
     てではなく、古いものすべての単一の削除とそれに続く すべての新しいも
     のを1回挿入し、数値 ‘m’ が -B オプションのこの側面を制御します(デフ
     ォルトは60%)。 ‘-B/70%’ は、Gitがそれを完全な書き換えと見なすために
     、元の30%未満が結果に残る必要があることを指定します(つまり、結果の
     パッチは、コンテキスト行と混合された一連の削除と挿入になります)。

     -M と一緒に使用すると、完全に書き換えられたファイルも名前変更のソー
     スと見なされ(通常、 -M は、消えたファイルのみを名前変更のソースと見
     なします)、数 ‘n’ が -Bオプションのこの側面を制御します(デフォルト
     は50%)。 ‘-B20%’ は、ファイルのサイズの20%以上と比較して、追加およ
     び削除を伴う変更が、別のファイルへの名前変更の可能なソースとして取
     得される資格があることを指定します。

‘-M[<n>]’
‘--find-renames[=<n>]’
     名前の変更(renames)を検知する。 ‘n’ が指定されている場合、それは類
     似性インデックスのしきい値です (つまり、ファイルのサイズと比較した
     追加/削除の量)。 たとえば、 ‘-M90%’ は、ファイルの90%以上が変更され
     ていない場合、 Gitが削除/追加のペアを名前変更と見なす必要があること
     を意味します。 ‘%’ 記号がない場合、数値は小数として読み取られ、その
     前に小数点が付きます。 つまり、 ‘-M5’ は0.5になるため、‘-M50%’ と同
     じになります。 同様に、 ‘-M05’ は ‘-M5%’ と同じです。 検出を正確な
     名前変更に制限するには、 ‘-M100%’ を使用します。 デフォルトの類似性
     インデックスは50%です。

‘-C[<n>]’
‘--find-copies[=<n>]’
     名前と同様コピーを検出します。 ‘--find-copies-harder’ ‘も参照してく
     ださい。 `n’ を指定すると、 ‘-M<n>’ と同じ意味になります。

‘--find-copies-harder’
     パフォーマンス上の理由から、デフォルトでは、 ‘-C’ オプションは、コ
     ピーの元のファイルが同じ変更組(changeset)で変更された場合にのみコピ
     ーを検索します。このフラグにより、コマンドは変更されていないファイ
     ルをコピー元の候補として検査します。これは大規模なプロジェクトでは
     非常にコストのかかる操作であるため、注意して使用してください。 複数
     の ‘-C’ オプションを指定しても同じ効果があります。

‘-D’
‘--irreversible-delete’
     削除するプレイメージ(preimage)を省略します。つまり、ヘッダーのみを
     出力し、プレイメージと ‘/dev/null’ の差分は出力しません。結果のパッ
     チは、 ‘patch’ または ‘git apply’ で適用されることを意図していませ
     ん。これは、変更後にテキストを確認することに集中したい人のためだけ
     のものです。さらに、出力には明らかに、そのようなパッチを手動でも逆
     に適用するのに十分な情報が不足しているため、オプションの名前が付け
     られています。

     ‘-B’ と併用する場合は、削除/作成ペアの削除部分のプリイメージ
     (preimage)も省略してください。

‘-l<num>’
     ‘-M’ および ‘-C’ オプションには、名前変更/コピーのサブセットを安価
     に検出できるいくつかの準備手順が含まれ、その後に、残りのすべてのペ
     アになっていない宛先をすべての関連ソースと比較する徹底的なフォール
     バック部分が続きます。(名前の変更の場合、残りのペアになっていないソ
     ースのみが関係します。コピーの場合、すべての元のソースが関係します
     )。Nのソースと宛先の場合、この徹底的なチェックのコストは O(N^2) で
     す。このオプションは、関係するソース/宛先ファイルの数が指定された数
     を超えた場合に、名前変更/コピー検出の完全な部分が実行されないように
     します。デフォルトは diff.renameLimit です。 値0は無制限として扱わ
     れることに注意してください。

‘--diff-filter=[(A|C|D|M|R|T|U|X|B)...[*]]’
     追加(Add)・コピー(Copy)・削除(Delete)・変更(Modify)・名前変更
     (Rename)されたファイル、タイプが変更されたファイル(T)、マージされて
     いないファイル(U)、不明なファイル(X)、またはペアリングが壊れている
     ファイル(B)のみを選択します。フィルタ文字(無しも含む)の任意の組み合
     わせを使用できます。 組み合わせに ‘*’ (全てまたは無し)が追加される
     と、比較で他の基準に一致するファイルがある場合、すべてのパスが選択
     されます。 他の基準に一致するファイルがない場合、何も選択されません
     。

     また、逆に、除外したい時はこれらの各大文字指定を小文字にして指定し
     ます。例えば ‘--diff-filter=ad’ は、追加および削除されたパスを除外
     します。

     注意:すべてのdiffがすべてのタイプを特徴とするわけではないことに注意
     してください。 たとえば、インデックスから作業ツリーへのdiffにエント
     リを追加することはできません(diffに含まれるパスのセットは、インデッ
     クスの内容によって制限されるため)。 同様に、これらのタイプの検出が
     無効になっている場合、コピーおよび名前変更されたエントリは表示され
     ません。

‘-S<string>’
     ファイル内の指定の文字列(つまり、 addition 、deletion)の出現回数の
     差分を調べます。スクリプターが使用することを目的としています。

     (構造体など)コードの正確なブロックを探していて、そのブロックが最初
     に作成されてからの履歴を知りたい場合に便利です。この機能を繰り返し
     使用して、プリイメージ(preimage)内の興味深いブロックを ‘-S’ にフィ
     ードバックし、そしてあなたはそれをブロックの最初のバージョンを取得
     するまで続けます。

     バイナリファイルも検索されます。

‘-G<regex>’
     パッチテキストに <regex> にマッチする 追加/削除 された行が含まれて
     いる差分を探します。

     ‘-S<regex> --pickaxe-regex’ と ‘-G<regex>’ の違いを説明するために、
     同じファイル内で以下のdiffを使用してコミットすることを検討してくだ
     さい:

          +    return frotz(nitfol, two->ptr, 1, 0);
          ...
          -    hit = frotz(nitfol, mf2.ptr, 1, 0);

     ‘git log -G"frotz\(nitfol"’ はこのコミットを表示しますが、 ‘git log
     -S"frotz\(nitfol" --pickaxe-regex’ は表示しません(その文字列の出現
     回数が変更されなかったため)。

     ‘--text’ が提供されていない限り、 textconv フィルターのないバイナリ
     ファイルのパッチは無視されます。

     詳細については gitdiffcore(7) の _pickaxe_ エントリを参照してくださ
     い。

‘--find-object=<object-id>’
     指定されたオブジェクトの出現回数を変更する違いを探します。 ‘-S’ と
     同様に、引数だけが異なり、特定の文字列ではなく特定のオブジェクト
     IDを検索します。

     オブジェクトは、ブロブまたはサブモジュールのコミットにすることがで
     きます。 これは、 ‘git-log’ の ‘-t’ オプションがツリーも探すことを
     意味します。

‘--pickaxe-all’
     ‘-S’ または ‘-G’ が変更を見つけたら、 <string> の変更を含むファイル
     だけでなく、その変更セット(changeset)のすべての変更を表示します。

‘--pickaxe-regex’
     ‘-S’ に指定した <string> を拡張POSIX正規表現として扱います。

‘-O<orderfile>’
     ファイルが出力に表示される順序を制御します。これは ‘diff.orderFile’
     構成変数をオーバーライドします(git-config(1) 参照)。
     ‘diff.orderFile’ をキャンセルするには、 ‘-O/dev/null’ を使用します
     。

     出力順序は、 <orderfile> 内のglobパターンの順序によって決定されます
     。最初のパターンに一致するパス名を持つすべてのファイルが最初に出力
     され、2番目のパターンに一致する(ただし最初のパターンには一致しない
     )パス名を持つすべてのファイルが次に出力されます。パス名がどのパター
     ンとも一致しないすべてのファイルは、ファイルの最後に暗黙のすべて一
     致パターンがあるかのように、最後に出力されます。複数のパス名のラン
     クが同じである場合(同じパターンに一致するが、以前のパターンには一致
     しない)、相互の出力順序は通常の順序です。

     <orderfile> は以下のとおりパースされます:

        • 空白行は無視されるため、読みやすくするための区切りとして使用で
          きます。

        • ハッシュ ("‘#’") で始まる行は無視されるため、コメントに使用で
          きます。 パターンがハッシュで始まる場合は、パターンの先頭にバ
          ックスラッシュ(訳注:日本では環境により円記号)("‘\’") を追加し
          ます。

        • 他の各行には、単一のパターンが含まれています。

     パターンは、 FNM_PATHNAME フラグなしで fnmatch(3) に使用されるパタ
     ーンと同じ構文とセマンティクスを持ちますが、最終的なパス名コンポー
     ネントをいくつも削除するとパターンと一致する場合、パス名もパターン
     と一致する点が異なります。 たとえば、パターン "‘foo*bar’" は、
     "‘fooasdfbar’" および "‘foo/bar/baz/asdf’" と一致しますが、
     "‘foobarx’" とは一致しません。

‘--skip-to=<file>’
‘--rotate-to=<file>’
     名前付き <file> の前のファイルを出力から破棄するか(スキップして)、
     出力の最後に移動させます(ローテーションさせます)。 これらは主に
     ‘git difftool’ コマンドを使用するために考案されたものであり、それ以
     外の場合はあまり役に立たない可能性があります。

‘-R’
     2つの入力を交換します。 つまり、インデックスまたはディスク上のファ
     イルとツリーの内容の違いを表示します。

‘--relative[=<path>]’
‘--no-relative’
     プロジェクトのサブディレクトリから実行する場合、このオプションを使
     用して、ディレクトリ外の変更を除外し、それに関連するパス名を表示す
     るように指示できます。サブディレクトリ(ベアリポジトリなど)にいない
     場合は、引数として <path> を指定することで、出力を作成するサブディ
     レクトリに名前を付けることができます。 ‘--no-relative`は、
     `diff.relative’ 設定オプションと以前の ‘--relative’ の両方を打ち消
     すために使用できます。

‘-a’
‘--text’
     すべてのファイルをテキストとして扱います。

‘--ignore-cr-at-eol’
     比較を行うときは、行末のキャリッジリターン(carriage-return)を無視し
     ます。

‘--ignore-space-at-eol’
     行末(EOL)での空白(whitespace)の変更を無視します。

‘-b’
‘--ignore-space-change’
     空白(whitespace)の数の変更は無視してください。これは、行末の空白
     (whitespace)を無視し、1つ以上の空白文字(whitespace characters)の他
     のすべてのシーケンスを同等と見なします。

‘-w’
‘--ignore-all-space’
     行を比較するときは空白を無視します。 これにより、一方の行に空白があ
     り、もう一方の行に空白がない場合でも、違いは無視されます。

‘--ignore-blank-lines’
     全て空白の行の変更は無視します。

‘-I<regex>’
‘--ignore-matching-lines=<regex>’
     すべての行が <regex> にマッチする変更を無視します。このオプションは
     複数回指定できます。

‘--inter-hunk-context=<lines>’
     指定された行数までの差分ハンク間のコンテキストを表示し、それによっ
     て互いに近いハンクを融合します。デフォルトは
     ‘diff.interHunkContext’ で、設定オプションが設定されていない場合は
     0です。

‘-W’
‘--function-context’
     関数全体を各変更のコンテキスト行として表示します。関数名は、 ‘git
     diff’ がパッチハンクヘッダーを処理するのと同じ方法で決定されます
     (gitattributes(5) の _Defining a custom hunk-header_ を参照)。

‘--exit-code’
     diff(1）と同様のコードでプログラムを終了させます。つまり、違いがあ
     った場合は 1 で終了し、 0 は違いがないことを意味します。

‘--quiet’
     プログラムのすべての出力を無効にします。 ‘--exit-code’ を意味します
     。

‘--ext-diff’
     外部diffヘルパーの実行を許可します。 gitattributes(5) を使用して外
     部diffドライバーを設定する場合は、 git-log(1) およびその仲間と一緒
     にこのオプションを使用する必要があります。

‘--no-ext-diff’
     外部diffドライバーを禁止します。

‘--textconv’
‘--no-textconv’
     バイナリファイルを比較するときに、外部テキスト変換フィルターの実行
     を許可(または禁止)します。 詳細については、 gitattributes(5) を参照
     してください。textconvフィルターは通常、一方向の変換であるため、結
     果のdiffは人間の消費に適していますが、適用(apply)することはできませ
     ん。このため、textconvフィルターは、 git-diff(1) および git-log(1)
     に対してのみデフォルトで有効になりますが、 git-format-patch(1) また
     はdiff配管コマンドに対しては有効になりません。

‘--ignore-submodules[=<when>]’
     diff生成のサブモジュールへの変更を無視します。 <when> は、 none・
     untracked・dirty・allのいずれかになります。これがデフォルトです。
     noneを使用すると、追跡されていないファイルまたは変更されたファイル
     が含まれている場合、またはそのHEADがスーパープロジェクトに記録され
     ているコミットと異なる場合にサブモジュールが変更されたと見なされ、
     git-config(1) または gitmodules(5) の ignoreオプションの設定をオー
     バーライドするために使用できます。untrackedが使用されている場合、サ
     ブモジュールには追跡されていないコンテンツのみが含まれている場合、
     サブモジュールはダーティとは見なされません(ただし、変更されたコンテ
     ンツはスキャンされます)。「dirty」を使用すると、サブモジュールの作
     業ツリーへのすべての変更が無視され、スーパープロジェクトに格納され
     ているコミットへの変更のみが表示されます(これは1.7.0までの動作でし
     た)。「all」を使用すると、サブモジュールへのすべての変更が非表示に
     なります。

‘--src-prefix=<prefix>’
     "a/" の代わりに、与えられたソースプレフィックス(source prefix)を表
     示します。

‘--dst-prefix=<prefix>’
     "b/" の代わりに、指定された宛先プレフィックス(destination prefix)を
     表示します。

‘--no-prefix’
     送信元(source)または宛先(destination)のプレフィックスを表示しません
     。

‘--line-prefix=<prefix>’
     出力のすべての行に追加のプレフィックスを付加します。

‘--ita-invisible-in-index’
     デフォルトでは、 "git add -N" によって追加されたエントリは、 "git
     diff" に既存の空のファイルとして表示され、 "git diff –cached" に新
     しいファイルとして表示されます。このオプションを使用すると、エント
     リは "git diff" では新しいファイルとして表示され、 "git diff
     –cached" では存在しません。このオプションは、
     ‘--ita-visible-in-index’ で元に戻すことができます。どちらのオプショ
     ンも実験的なものであり、将来削除される可能性があります。

   これらの一般的なオプションの詳細については、 gitdiffcore(7) も参照し
てください。

‘-1 --base’
‘-2 --ours’
‘-3 --theirs’
     Compare the working tree with the "base" version (stage #1), "our
     branch" (stage #2) or "their branch" (stage #3).  The index
     contains these stages only for unmerged entries i.e.  while
     resolving conflicts.  See git-read-tree(1) section "3-Way Merge"
     for detailed information.

‘-0’
     Omit diff output for unmerged entries and just show "Unmerged".
     Can be used only when comparing the working tree with the index.

<path>…
     The <paths> parameters, when given, are used to limit the diff to
     the named paths (you can give directory names and get diff for all
     files under them).


Raw output format
*****************

‘git-diff-index’ と ‘git-diff-tree’ と ‘git-diff-files’ と ‘git diff
--raw’ からの生の出力形式は非常に似ています。

   これらのコマンドはすべて、2つのセットを比較します。なお、比較されるも
のは異なります:

git-diff-index <tree-ish>
     <tree-ish> とファイルシステム上のファイルを比較します。

git-diff-index –cached <tree-ish>
     <tree-ish> とインデックスを比較します。

git-diff-tree [-r] <tree-ish-1> <tree-ish-2> [<pattern>…]
     2つの引数で指定されたツリーを比較します。

git-diff-files [<pattern>…]
     インデックスとファイルシステム上のファイルを比較します。

   "git-diff-tree" コマンドは、比較対象のハッシュ値を出力することで出力
を開始します。その後、すべてのコマンドは、変更されたファイルごとに1つの
出力行を出力します。

   出力行は以下のようにフォーマットされます:

     in-place edit  :100644 100644 bcd1234 0123456 M file0
     copy-edit      :100644 100644 abcd123 1234567 C68 file1 file2
     rename-edit    :100644 100644 abcd123 1234567 R86 file1 file3
     create         :000000 100644 0000000 1234567 A file4
     delete         :100644 000000 1234567 0000000 D file5
     unmerged       :000000 000000 0000000 0000000 U file6

   つまり、左から右へ:

  1. コロン(:)

  2. "src" のモード。作成(creation)またはマージされていない(unmerged)場
     合は 000000

  3. 空白

  4. "dst" のモード。作成(creation)またはマージされていない(unmerged)場
     合は 000000

  5. 空白

  6. "src" のsha1。作成(creation)またはマージされていない(unmerged)場合
     は 0{40}

  7. 空白

  8. "dst" のsha1。作成(creation)またはマージされていない(unmerged)また
     は作業ツリーにある場合は 0{40}

  9. 空白

  10. ステータスの後に、オプションの「スコア数」("score" number)が続きま
     す

  11. ‘-z’ オプションが使用されている場合はタブまたはNUL

  12. "src" のパス

  13. ‘-z’ オプションが使用されている場合タブまたはNUL。ステータスCまた
     はRにのみ存在します

  14. "dst" のパス。ステータスCまたはRにのみ存在します

  15. LFでレコードを終了します。 ‘-z’ オプションが使用されている場合は
     NULでレコードを終了します。

   ステータス文字の種類は以下のとおり:

   • A: ファイルの追加

   • C: ファイルを新しいファイルにコピー

   • D: ファイルの削除

   • M: ファイルの内容やモードの変更

   • R: ファイル名の名前変更

   • T: ファイルのタイプを変更

   • U: ファイルはマージされていません(コミットする前にマージを完了する
     必要があります)

   • X: 「不明な」変更タイプ(おそらくバグです。報告してください)

   ステータス文字CとRの後には常にスコアが続きます(移動またはコピーのソー
スとターゲットの間の類似性のパーセンテージを示します)。ステータス文字Mの
後には、ファイルの書き換えのスコア(非類似度のパーセンテージを示す)が続く
場合があります。

   <sha1> は、ファイルがファイルシステム上で新規で、インデックスと同期し
ていない場合、すべて0として表示されます。

   例:

     :100644 100644 5be4a4a 0000000 M file.c

   ‘-z’ オプションを指定しない場合、構成変数 ‘core.quotePath’ で説明され
ているように、通常の文字以外(unusual characters)を含むパス名が引用符で囲
まれます(git-config(1) 参照)。 ‘-z’ を使用すると、ファイル名がそのまま出
力され、行はNULバイトで終了します。


diff format for merges
**********************

"git-diff-tree" と "git-diff-files" と "git-diff –raw" は、 ‘-c’ または
‘--cc’ オプションを使用して、マージコミットに対してもdiff出力を生成でき
ます。出力は、以下の点で上記の形式とは異なります:

  1. 親ごとにコロン(:)があります

  2. より多くの "src" モードと "src" sha1があります

  3. statusは、各親のステータス文字を連結したものです

  4. オプションの「スコア数」はありません

  5. ファイルのタブ区切りのパス名

   ‘-c’ および ‘ -cc‘ の場合、履歴のいずれかの側でファイルの名前が変更さ
れた場合でも、宛先(dst)または最終パスのみが表示されます。
‘--combined-all-paths’ を使用すると、各親のパスの名前が表示され、それに
続いてマージコミットのパスの名前が表示されます。

   例: ‘--combined-all-paths’ を使用しない ‘-c’ および ‘--cc’ の場合:

     ::100644 100644 100644 fabadb8 cc95eb0 4866510 MM       desc.c
     ::100755 100755 100755 52b7a2d 6d1ac04 d2ac7d7 RM       bar.sh
     ::100644 100644 100644 e07d6c5 9042e82 ee91881 RR       phooey.c

   例: ‘-c’ または ‘--cc’ のいずれかに ‘--combined-all-paths’ が追加され
た場合:

     ::100644 100644 100644 fabadb8 cc95eb0 4866510 MM       desc.c  desc.c  desc.c
     ::100755 100755 100755 52b7a2d 6d1ac04 d2ac7d7 RM       foo.sh  bar.sh  bar.sh
     ::100644 100644 100644 e07d6c5 9042e82 ee91881 RR       fooey.c fuey.c  phooey.c

   注意: ’combined diff’は、すべての親から変更されたファイルのみをリスト
することに注意してください。


Generating patch text with -p
*****************************

git-diff(1) 、 git-log(1) 、 git-show(1) 、 git-diff-index(1) 、
git-diff-tree(1) 、 git-diff-files(1) に ‘-p’ オプションを付けて実行する
とパッチテキストを生成します。パッチテキストの作成は、
‘GIT_EXTERNAL_DIFF’ と ‘GIT_DIFF_OPTS’ 環境変数( git(1) 参照)、および
‘diff’ 属性( gitattributes(5) 参照)を介してカスタマイズできます。

   -pオプションが生成するものは、従来のdiff形式とは少々異なります:

  1. 先行して、以下のような "git diff" ヘッダーがあります:

          diff --git a/file1 b/file2

     名前の変更/コピーが含まれない限り、 ‘a/’ と ‘b/’ のファイル名は同じ
     です。 特に、作成または削除の場合でも、 ‘a/’ または ‘b/’ ファイル名
     の代わりに ‘/dev/ null’ が使用されることはありません。

     名前変更/コピーが含まれる場合、 ‘file1’ と‘file2‘ は、それぞれ名前
     変更/コピーのソースファイルの名前と、名前変更/コピーが生成するファ
     イルの名前を示します。

  2. その後に、1つ以上の拡張ヘッダー行達が続きます:

          old mode <mode>
          new mode <mode>
          deleted file mode <mode>
          new file mode <mode>
          copy from <path>
          copy to <path>
          rename from <path>
          rename to <path>
          similarity index <number>
          dissimilarity index <number>
          index <hash>..<hash> <mode>

     ファイルモードは、ファイルタイプとファイル許可ビットを含む6桁の8進
     数として出力されます。

     拡張ヘッダーのパス名には、 ‘a/’ および ‘b/’ プレフィックスは含まれ
     ません。

     類似インデックス(similarity index)は変更されていない行のパーセンテ
     ージであり、非類似インデックス(dissimilarity index)は変更された行の
     パーセンテージです。これは切り捨てられた整数であり、その後にパーセ
     ント記号が続きます。したがって、100％の類似インデックス値は2つの等
     しいファイルを表し、100％の非類似性は古いファイルから新しいファイル
     に移行された行がないことを意味します。

     インデックス行には、変更前後のブロブオブジェクト名が含まれます。
     <mode> は、ファイルモードが変更されない場合に含まれます。それ以外の
     場合、別々の行は古いモードと新しいモードを示します。

  3. 通常の文字でないキャラクタ(\"unusual\" characters)を含むパス名は、
     構成変数 ‘core.quotePath’ で説明されているように引用符で囲まれてい
     ます( git-config(1)参照)。

  4. 出力内のすべての ‘file1’ ファイルはコミット前のファイルを参照し、す
     べての ‘file2’ ファイルはコミット後のファイルを参照します。各変更を
     各ファイルに順番に適用するのは誤りです。たとえば、以下のパッチはaと
     bを交換します:

          diff --git a/a b/b
          rename from a
          rename to b
          diff --git a/b b/a
          rename from b
          rename to a

  5. ハンクのヘッダーには、ハンクが適用される関数の名前が記載されていま
     す。特定の言語に合わせてこれを調整する方法の詳細については、
     gitattributes(5) の "Defining a custom hunk-header" を参照してくだ
     さい。


Combined diff format
********************

diffを生成するコマンドは、マージを表示するときに ‘-c’ または ‘--cc’ オプ
ションを使用して「合成diff」(combined diff)を生成できます。これは
git-diff(1) または git-show(1) でのマージを表示するときのデフォルトの形
式です。 注意: これらのコマンドのいずれかに適切な ‘--diff-merges’ オプシ
ョンを指定して、特定の形式で差分を強制的に生成できることにも注意してくだ
さい。

   合成diff形式は以下のようになります:

     diff --combined describe.c
     index fabadb8,cc95eb0..4866510
     --- a/describe.c
     +++ b/describe.c
     @@@ -98,20 -98,12 +98,20 @@@
             return (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;
       }

     - static void describe(char *arg)
      -static void describe(struct commit *cmit, int last_one)
     ++static void describe(char *arg, int last_one)
       {
      +      unsigned char sha1[20];
      +      struct commit *cmit;
             struct commit_list *list;
             static int initialized = 0;
             struct commit_name *n;

      +      if (get_sha1(arg, sha1) < 0)
      +              usage(describe_usage);
      +      cmit = lookup_commit_reference(sha1);
      +      if (!cmit)
      +              usage(describe_usage);
      +
             if (!initialized) {
                     initialized = 1;
                     for_each_ref(get_name);

  1. まず "git diff" ヘッダーがあり、以下のようになります( ‘-c’ オプショ
     ンが使用されている場合):

          diff --combined file

     または、以下のようになります( ‘--cc’ オプションが使用されている場合
     ):

          diff --cc file

  2. その後に1つ以上の拡張ヘッダー行が続きます(以下の例は、2つの親とのマ
     ージを示しています):

          index <hash>,<hash>..<hash>
          mode <mode>,<mode>..<mode>
          new file mode <mode>
          deleted file mode <mode>,<mode>

     ‘mode <mode>,<mode>..<mode>’ 行は、<mode> の少なくとも1つが他の
     <mode> と異なる場合にのみ表示されます。検出されたコンテンツの移動
     (名前の変更とコピーの検出)に関する情報を含む拡張ヘッダーは、2つの
     <tree-ish> のdiffで機能するように設計されており、合成diff形式では使
     用されません。

  3. その後に2行の from-file/to-file ヘッダーが続きます

          --- a/file
          +++ b/file

     従来の統一diff形式の2行ヘッダーと同様に、 ‘/dev/null’ は、作成また
     は削除されたファイルを通知するために使用されます。

     ただし、 –combined-all-paths オプションが指定されている場合、2行の
     from-file/to-file の代わりに、 N+1 行の from-file/to-file ヘッダー
     が取得されます。ここで、 N はマージコミットの親の数です。

          --- a/file
          --- a/file
          --- a/file
          +++ b/file

     この拡張形式は、名前変更またはコピー検出がアクティブな場合に役立ち
     、別の親のファイルの元の名前を確認できます。

  4. チャンクヘッダーの形式が変更され、誤って ‘patch-p1’ にフィードされ
     るのを防ぎます。合成差分形式は、マージコミットの変更を確認するため
     に作成されたものであり、適用されることを意図したものではありません
     。この変更は、拡張された「インデックス」ヘッダーの変更に似ています:

          @@@ <from-file-range> <from-file-range> <to-file-range> @@@

     合成diff形式のチャンクヘッダーには親の数+1の ‘@’ 文字があります。

   従来の統一diff形式とは異なり、2つのファイルAとBが、 ‘-’ (マイナスは
Aに表示されますが、Bでは削除されます) または ‘+’ (プラスはAにはありませ
んが、Bには追加されます)、または ‘" "’（スペースは変更なし) プレフィック
スを持つ単一の列で表示される場合、この形式は2つ以上のファイル file1,
file2,… を1つのファイルXと比較し、Xが各 fileN とどのように異なるかを示し
ます。ファイルNごとに1つの列が出力行の前に追加され、Xの行が出力行とどの
ように異なるかを示します。

   列Nの ‘-’ 文字は、その行が fileN に表示されているが、結果には表示され
ていないことを意味します。 列Nの ‘+’ 文字は、結果に行が表示され、 fileN
にその行がないことを意味します(つまり、その親の観点から見て行が追加され
たことを示す)。

   上記の出力例では、関数のシグネチャが両方のファイルから見て変更されて
います(したがって、 file1 と file2 の両方から2つの ‘-’ が削除され、さら
に ‘++’ が追加されたため、 file1 と file2 のどちらにも表示されません)。
また、他の8行は file1 と同じですが、 file2 には表示されません(したがって
、接頭辞として ‘+’ が付けられます)。

   ‘git diff-tree -c’ で表示される場合、マージコミットの親をマージ結果と
比較します(つまり、 file1..fileN が親です)。 ‘git diff-files -c’ で表示
される場合、2つの未解決のマージ親を作業ツリーファイルと比較します(つまり
、 file1 はステージ2、別名「私たちのバージョン」、 file2 はステージ3、別
名「彼らのバージョン」です)。


other diff formats
******************

‘--summary’ オプションは、新しく追加、削除、名前変更、およびコピーされた
ファイルを説明します。‘--stat’ オプションは、 diffstat(1) グラフ を出力
に追加します。これらのオプションは、 ‘-p’ などの他のオプションと組み合わ
せることができ、人間が読むことを目的としています。

   名前の変更またはコピーを伴う変更を表示する場合、 ‘--stat’ 出力は、パ
ス名の共通のプレフィックスとサフィックスを組み合わせることにより、パス名
をコンパクトにフォーマットします。 たとえば、4行を変更(modify)しながら
‘arch/i386/Makefile’ を ‘arch/x86/Makefile’ に移動(move)する変更
(change)は、次のように表示されます:

     arch/{i386 => x86}/Makefile    |   4 +--

   ‘--numstat’ オプションは diffstat(1) 情報を提供しますが、人間ではなく
ソフトウェアで読むのを容易にするように設計されています。 ‘--numstat’ 出
力のエントリは以下のようになります:

     1       2       README
     3       1       arch/{i386 => x86}/Makefile

   この形式は、左から右へ:

  1. 追加行数

  2. タブ

  3. 削除行数

  4. タブ

  5. パス名(おそらく rename/copy 情報を含む)

  6. 改行

   ‘-z’ 出力オプションが有効な場合、出力は以下のようにフォーマットされま
す:

     1       2       README NUL
     3       1       NUL arch/i386/Makefile NUL arch/x86/Makefile NUL

   これは:

  1. 追加行数

  2. タブ

  3. 削除行数

  4. タブ

  5. NUL(rename/copy された場合のみ存在します)

  6. プリイメージのパス名

  7. NUL(rename/copy された場合のみ存在します)

  8. ポストイメージのパス名(rename/copy された場合のみ存在します)

  9. NUL

   名前が変更された場合のプリイメージパスの前の追加の ‘NUL’ は、出力を読
み取るスクリプトが、先読みせずに、読み取られている現在のレコードがシング
ルパスレコードであるか、名前変更/コピーレコードであるか、を判断できるよ
うにするためです。追加および削除された行を読み取った後、 ‘NUL’ まで読み
取るとパス名が生成されますが、それが ‘NUL’ の場合、レコードには2つのパス
が表示されます。


EXAMPLES
********

Various ways to check your working tree
          $ git diff            (1)
          $ git diff --cached   (2)
          $ git diff HEAD       (3)

     *note (1): CO1-1.
          Changes in the working tree not yet staged for the next
          commit.

     *note (2): CO1-2.
          Changes between the index and your last commit; what you would
          be committing if you run ‘git commit’ without ‘-a’ option.

     *note (3): CO1-3.
          Changes in the working tree since your last commit; what you
          would be committing if you run ‘git commit -a’

Comparing with arbitrary commits
          $ git diff test            (1)
          $ git diff HEAD -- ./test  (2)
          $ git diff HEAD^ HEAD      (3)

     *note (1): CO2-1.
          Instead of using the tip of the current branch, compare with
          the tip of "test" branch.

     *note (2): CO2-2.
          Instead of comparing with the tip of "test" branch, compare
          with the tip of the current branch, but limit the comparison
          to the file "test".

     *note (3): CO2-3.
          Compare the version before the last commit and the last
          commit.

Comparing branches
          $ git diff topic master    (1)
          $ git diff topic..master   (2)
          $ git diff topic...master  (3)

     *note (1): CO3-1.
          Changes between the tips of the topic and the master branches.

     *note (2): CO3-2.
          Same as above.

     *note (3): CO3-3.
          Changes that occurred on the master branch since when the
          topic branch was started off it.

Limiting the diff output
          $ git diff --diff-filter=MRC            (1)
          $ git diff --name-status                (2)
          $ git diff arch/i386 include/asm-i386   (3)

     *note (1): CO4-1.
          Show only modification, rename, and copy, but not addition or
          deletion.

     *note (2): CO4-2.
          Show only names and the nature of change, but not actual diff
          output.

     *note (3): CO4-3.
          Limit diff output to named subtrees.

Munging the diff output
          $ git diff --find-copies-harder -B -C  (1)
          $ git diff -R                          (2)

     *note (1): CO5-1.
          Spend extra cycles to find renames, copies and complete
          rewrites (very expensive).

     *note (2): CO5-2.
          Output diff in reverse.


SEE ALSO
********

diff(1), git-difftool(1), git-log(1), gitdiffcore(7),
git-format-patch(1), git-apply(1), git-show(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-difftool,  Up: Top

Name
****

git-difftool — Show changes using common diff tools


Synopsis
********

     git difftool [<options>] [<commit> [<commit>]] [–] [<path>…]


DESCRIPTION
***********

_git difftool_ is a Git command that allows you to compare and edit
files between revisions using common diff tools.  _git difftool_ is a
frontend to _git diff_ and accepts the same options and arguments.  See
git-diff(1).


OPTIONS
*******

‘-d’
‘--dir-diff’
     Copy the modified files to a temporary location and perform a
     directory diff on them.  This mode never prompts before launching
     the diff tool.

‘-y’
‘--no-prompt’
     Do not prompt before launching a diff tool.

‘--prompt’
     Prompt before each invocation of the diff tool.  This is the
     default behaviour; the option is provided to override any
     configuration settings.

‘--rotate-to=<file>’
     Start showing the diff for the given path, the paths before it will
     move to end and output.

‘--skip-to=<file>’
     Start showing the diff for the given path, skipping all the paths
     before it.

‘-t <tool>’
‘--tool=<tool>’
     Use the diff tool specified by <tool>.  Valid values include
     emerge, kompare, meld, and vimdiff.  Run ‘git difftool --tool-help’
     for the list of valid <tool> settings.

     If a diff tool is not specified, _git difftool_ will use the
     configuration variable ‘diff.tool’.  If the configuration variable
     ‘diff.tool’ is not set, _git difftool_ will pick a suitable
     default.

     You can explicitly provide a full path to the tool by setting the
     configuration variable ‘difftool.<tool>.path’.  For example, you
     can configure the absolute path to kdiff3 by setting
     ‘difftool.kdiff3.path’.  Otherwise, _git difftool_ assumes the tool
     is available in PATH.

     Instead of running one of the known diff tools, _git difftool_ can
     be customized to run an alternative program by specifying the
     command line to invoke in a configuration variable
     ‘difftool.<tool>.cmd’.

     When _git difftool_ is invoked with this tool (either through the
     ‘-t’ or ‘--tool’ option or the ‘diff.tool’ configuration variable)
     the configured command line will be invoked with the following
     variables available: ‘$LOCAL’ is set to the name of the temporary
     file containing the contents of the diff pre-image and ‘$REMOTE’ is
     set to the name of the temporary file containing the contents of
     the diff post-image.  ‘$MERGED’ is the name of the file which is
     being compared.  ‘$BASE’ is provided for compatibility with custom
     merge tool commands and has the same value as ‘$MERGED’.

‘--tool-help’
     Print a list of diff tools that may be used with ‘--tool’.

‘--[no-]symlinks’
     _git difftool_’s default behavior is create symlinks to the working
     tree when run in ‘--dir-diff’ mode and the right-hand side of the
     comparison yields the same content as the file in the working tree.

     Specifying ‘--no-symlinks’ instructs _git difftool_ to create
     copies instead.  ‘--no-symlinks’ is the default on Windows.

‘-x <command>’
‘--extcmd=<command>’
     Specify a custom command for viewing diffs.  _git-difftool_ ignores
     the configured defaults and runs ‘$command $LOCAL $REMOTE’ when
     this option is specified.  Additionally, ‘$BASE’ is set in the
     environment.

‘-g’
‘--[no-]gui’
     When _git-difftool_ is invoked with the ‘-g’ or ‘--gui’ option the
     default diff tool will be read from the configured ‘diff.guitool’
     variable instead of ‘diff.tool’.  The ‘--no-gui’ option can be used
     to override this setting.  If ‘diff.guitool’ is not set, we will
     fallback in the order of ‘merge.guitool’, ‘diff.tool’, ‘merge.tool’
     until a tool is found.

‘--[no-]trust-exit-code’
     _git-difftool_ invokes a diff tool individually on each file.
     Errors reported by the diff tool are ignored by default.  Use
     ‘--trust-exit-code’ to make _git-difftool_ exit when an invoked
     diff tool returns a non-zero exit code.

     _git-difftool_ will forward the exit code of the invoked tool when
     ‘--trust-exit-code’ is used.

   See git-diff(1) for the full list of supported options.


CONFIG VARIABLES
****************

_git difftool_ falls back to _git mergetool_ config variables when the
difftool equivalents have not been defined.

diff.tool
     The default diff tool to use.

diff.guitool
     The default diff tool to use when ‘--gui’ is specified.

difftool.<tool>.path
     Override the path for the given tool.  This is useful in case your
     tool is not in the PATH.

difftool.<tool>.cmd
     Specify the command to invoke the specified diff tool.

     See the ‘--tool=<tool>’ option above for more details.

difftool.prompt
     Prompt before each invocation of the diff tool.

difftool.trustExitCode
     Exit difftool if the invoked diff tool returns a non-zero exit
     status.

     See the ‘--trust-exit-code’ option above for more details.


SEE ALSO
********

git-diff(1)
     Show changes between commits, commit and working tree, etc

git-mergetool(1)
     Run merge conflict resolution tools to resolve merge conflicts

git-config(1)
     Get and set repository or global options


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-fast-export,  Up: Top

Name
****

git-fast-export — Git data exporter


Synopsis
********

     git fast-export [<options>] | git fast-import


DESCRIPTION
***********

This program dumps the given revisions in a form suitable to be piped
into _git fast-import_.

   You can use it as a human-readable bundle replacement (see
git-bundle(1)), or as a format that can be edited before being fed to
_git fast-import_ in order to do history rewrites (an ability relied on
by tools like _git filter-repo_).


OPTIONS
*******

‘--progress=<n>’
     Insert _progress_ statements every <n> objects, to be shown by _git
     fast-import_ during import.

‘--signed-tags=(verbatim|warn|warn-strip|strip|abort)’
     Specify how to handle signed tags.  Since any transformation after
     the export can change the tag names (which can also happen when
     excluding revisions) the signatures will not match.

     When asking to _abort_ (which is the default), this program will
     die when encountering a signed tag.  With _strip_, the tags will
     silently be made unsigned, with _warn-strip_ they will be made
     unsigned but a warning will be displayed, with _verbatim_, they
     will be silently exported and with _warn_, they will be exported,
     but you will see a warning.

‘--tag-of-filtered-object=(abort|drop|rewrite)’
     Specify how to handle tags whose tagged object is filtered out.
     Since revisions and files to export can be limited by path, tagged
     objects may be filtered completely.

     When asking to _abort_ (which is the default), this program will
     die when encountering such a tag.  With _drop_ it will omit such
     tags from the output.  With _rewrite_, if the tagged object is a
     commit, it will rewrite the tag to tag an ancestor commit (via
     parent rewriting; see git-rev-list(1))

‘-M’
‘-C’
     Perform move and/or copy detection, as described in the git-diff(1)
     manual page, and use it to generate rename and copy commands in the
     output dump.

     Note that earlier versions of this command did not complain and
     produced incorrect results if you gave these options.

‘--export-marks=<file>’
     Dumps the internal marks table to <file> when complete.  Marks are
     written one per line as ‘:markid SHA-1’.  Only marks for revisions
     are dumped; marks for blobs are ignored.  Backends can use this
     file to validate imports after they have been completed, or to save
     the marks table across incremental runs.  As <file> is only opened
     and truncated at completion, the same path can also be safely given
     to –import-marks.  The file will not be written if no new object
     has been marked/exported.

‘--import-marks=<file>’
     Before processing any input, load the marks specified in <file>.
     The input file must exist, must be readable, and must use the same
     format as produced by –export-marks.

‘--mark-tags’
     In addition to labelling blobs and commits with mark ids, also
     label tags.  This is useful in conjunction with ‘--export-marks’
     and ‘--import-marks’, and is also useful (and necessary) for
     exporting of nested tags.  It does not hurt other cases and would
     be the default, but many fast-import frontends are not prepared to
     accept tags with mark identifiers.

     Any commits (or tags) that have already been marked will not be
     exported again.  If the backend uses a similar –import-marks file,
     this allows for incremental bidirectional exporting of the
     repository by keeping the marks the same across runs.

‘--fake-missing-tagger’
     Some old repositories have tags without a tagger.  The fast-import
     protocol was pretty strict about that, and did not allow that.  So
     fake a tagger to be able to fast-import the output.

‘--use-done-feature’
     Start the stream with a _feature done_ stanza, and terminate it
     with a _done_ command.

‘--no-data’
     Skip output of blob objects and instead refer to blobs via their
     original SHA-1 hash.  This is useful when rewriting the directory
     structure or history of a repository without touching the contents
     of individual files.  Note that the resulting stream can only be
     used by a repository which already contains the necessary objects.

‘--full-tree’
     This option will cause fast-export to issue a "deleteall" directive
     for each commit followed by a full list of all files in the commit
     (as opposed to just listing the files which are different from the
     commit’s first parent).

‘--anonymize’
     Anonymize the contents of the repository while still retaining the
     shape of the history and stored tree.  See the section on
     ‘ANONYMIZING’ below.

‘--anonymize-map=<from>[:<to>]’
     Convert token ‘<from>’ to ‘<to>’ in the anonymized output.  If
     ‘<to>’ is omitted, map ‘<from>’ to itself (i.e., do not anonymize
     it).  See the section on ‘ANONYMIZING’ below.

‘--reference-excluded-parents’
     By default, running a command such as ‘git fast-export
     master~5..master’ will not include the commit master~5 and will
     make master~4 no longer have master~5 as a parent (though both the
     old master~4 and new master~4 will have all the same files).  Use
     –reference-excluded-parents to instead have the stream refer to
     commits in the excluded range of history by their sha1sum.  Note
     that the resulting stream can only be used by a repository which
     already contains the necessary parent commits.

‘--show-original-ids’
     Add an extra directive to the output for commits and blobs,
     ‘original-oid <SHA1SUM>’.  While such directives will likely be
     ignored by importers such as git-fast-import, it may be useful for
     intermediary filters (e.g.  for rewriting commit messages which
     refer to older commits, or for stripping blobs by id).

‘--reencode=(yes|no|abort)’
     Specify how to handle ‘encoding’ header in commit objects.  When
     asking to _abort_ (which is the default), this program will die
     when encountering such a commit object.  With _yes_, the commit
     message will be re-encoded into UTF-8.  With _no_, the original
     encoding will be preserved.

‘--refspec’
     Apply the specified refspec to each ref exported.  Multiple of them
     can be specified.

[<git-rev-list-args>…]
     A list of arguments, acceptable to _git rev-parse_ and _git
     rev-list_, that specifies the specific objects and references to
     export.  For example, ‘master~10..master’ causes the current master
     reference to be exported along with all objects added since its
     10th ancestor commit and (unless the –reference-excluded-parents
     option is specified) all files common to master~9 and master~10.


EXAMPLES
********

     $ git fast-export --all | (cd /empty/repository && git fast-import)

   This will export the whole repository and import it into the existing
empty repository.  Except for reencoding commits that are not in UTF-8,
it would be a one-to-one mirror.

     $ git fast-export master~5..master |
             sed "s|refs/heads/master|refs/heads/other|" |
             git fast-import

   This makes a new branch called _other_ from _master~5..master_ (i.e.
if _master_ has linear history, it will take the last 5 commits).

   Note that this assumes that none of the blobs and commit messages
referenced by that revision range contains the string
_refs/heads/master_.


ANONYMIZING
***********

If the ‘--anonymize’ option is given, git will attempt to remove all
identifying information from the repository while still retaining enough
of the original tree and history patterns to reproduce some bugs.  The
goal is that a git bug which is found on a private repository will
persist in the anonymized repository, and the latter can be shared with
git developers to help solve the bug.

   With this option, git will replace all refnames, paths, blob
contents, commit and tag messages, names, and email addresses in the
output with anonymized data.  Two instances of the same string will be
replaced equivalently (e.g., two commits with the same author will have
the same anonymized author in the output, but bear no resemblance to the
original author string).  The relationship between commits, branches,
and tags is retained, as well as the commit timestamps (but the commit
messages and refnames bear no resemblance to the originals).  The
relative makeup of the tree is retained (e.g., if you have a root tree
with 10 files and 3 trees, so will the output), but their names and the
contents of the files will be replaced.

   If you think you have found a git bug, you can start by exporting an
anonymized stream of the whole repository:

     $ git fast-export --anonymize --all >anon-stream

   Then confirm that the bug persists in a repository created from that
stream (many bugs will not, as they really do depend on the exact
repository contents):

     $ git init anon-repo
     $ cd anon-repo
     $ git fast-import <../anon-stream
     $ ... test your bug ...

   If the anonymized repository shows the bug, it may be worth sharing
‘anon-stream’ along with a regular bug report.  Note that the anonymized
stream compresses very well, so gzipping it is encouraged.  If you want
to examine the stream to see that it does not contain any private data,
you can peruse it directly before sending.  You may also want to try:

     $ perl -pe 's/\d+/X/g' <anon-stream | sort -u | less

   which shows all of the unique lines (with numbers converted to "X",
to collapse "User 0", "User 1", etc into "User X"). This produces a much
smaller output, and it is usually easy to quickly confirm that there is
no private data in the stream.

   Reproducing some bugs may require referencing particular commits or
paths, which becomes challenging after refnames and paths have been
anonymized.  You can ask for a particular token to be left as-is or
mapped to a new value.  For example, if you have a bug which reproduces
with ‘git rev-list sensitive -- secret.c’, you can run:

     $ git fast-export --anonymize --all \
           --anonymize-map=sensitive:foo \
           --anonymize-map=secret.c:bar.c \
           >stream

   After importing the stream, you can then run ‘git rev-list foo --
bar.c’ in the anonymized repository.

   Note that paths and refnames are split into tokens at slash
boundaries.  The command above would anonymize ‘subdir/secret.c’ as
something like ‘path123/bar.c’; you could then search for ‘bar.c’ in the
anonymized repository to determine the final pathname.

   To make referencing the final pathname simpler, you can map each path
component; so if you also anonymize ‘subdir’ to ‘publicdir’, then the
final pathname would be ‘publicdir/bar.c’.


LIMITATIONS
***********

Since _git fast-import_ cannot tag trees, you will not be able to export
the linux.git repository completely, as it contains a tag referencing a
tree instead of a commit.


SEE ALSO
********

git-fast-import(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-fast-import,  Up: Top

Name
****

git-fast-import — Backend for fast Git data importers


Synopsis
********

     frontend | git fast-import [<options>]


DESCRIPTION
***********

This program is usually not what the end user wants to run directly.
Most end users want to use one of the existing frontend programs, which
parses a specific type of foreign source and feeds the contents stored
there to _git fast-import_.

   fast-import reads a mixed command/data stream from standard input and
writes one or more packfiles directly into the current repository.  When
EOF is received on standard input, fast import writes out updated branch
and tag refs, fully updating the current repository with the newly
imported data.

   The fast-import backend itself can import into an empty repository
(one that has already been initialized by _git init_) or incrementally
update an existing populated repository.  Whether or not incremental
imports are supported from a particular foreign source depends on the
frontend program in use.


OPTIONS
*******

‘--force’
     Force updating modified existing branches, even if doing so would
     cause commits to be lost (as the new commit does not contain the
     old commit).

‘--quiet’
     Disable the output shown by –stats, making fast-import usually be
     silent when it is successful.  However, if the import stream has
     directives intended to show user output (e.g.  ‘progress’
     directives), the corresponding messages will still be shown.

‘--stats’
     Display some basic statistics about the objects fast-import has
     created, the packfiles they were stored into, and the memory used
     by fast-import during this run.  Showing this output is currently
     the default, but can be disabled with –quiet.

‘--allow-unsafe-features’
     Many command-line options can be provided as part of the
     fast-import stream itself by using the ‘feature’ or ‘option’
     commands.  However, some of these options are unsafe (e.g.,
     allowing fast-import to access the filesystem outside of the
     repository).  These options are disabled by default, but can be
     allowed by providing this option on the command line.  This
     currently impacts only the ‘export-marks’, ‘import-marks’, and
     ‘import-marks-if-exists’ feature commands.

          Only enable this option if you trust the program generating the fast-import
          stream! This option is enabled automatically for remote-helpers that use the
          `import` capability, as they are already trusted to run their own code.


Options for Frontends
=====================

‘--cat-blob-fd=<fd>’
     Write responses to ‘get-mark’, ‘cat-blob’, and ‘ls’ queries to the
     file descriptor <fd> instead of ‘stdout’.  Allows ‘progress’ output
     intended for the end-user to be separated from other output.

‘--date-format=<fmt>’
     Specify the type of dates the frontend will supply to fast-import
     within ‘author’, ‘committer’ and ‘tagger’ commands.  See “Date
     Formats” below for details about which formats are supported, and
     their syntax.

‘--done’
     Terminate with error if there is no ‘done’ command at the end of
     the stream.  This option might be useful for detecting errors that
     cause the frontend to terminate before it has started to write a
     stream.


Locations of Marks Files
========================

‘--export-marks=<file>’
     Dumps the internal marks table to <file> when complete.  Marks are
     written one per line as ‘:markid SHA-1’.  Frontends can use this
     file to validate imports after they have been completed, or to save
     the marks table across incremental runs.  As <file> is only opened
     and truncated at checkpoint (or completion) the same path can also
     be safely given to –import-marks.

‘--import-marks=<file>’
     Before processing any input, load the marks specified in <file>.
     The input file must exist, must be readable, and must use the same
     format as produced by –export-marks.  Multiple options may be
     supplied to import more than one set of marks.  If a mark is
     defined to different values, the last file wins.

‘--import-marks-if-exists=<file>’
     Like –import-marks but instead of erroring out, silently skips the
     file if it does not exist.

‘--[no-]relative-marks’
     After specifying –relative-marks the paths specified with
     –import-marks= and –export-marks= are relative to an internal
     directory in the current repository.  In git-fast-import this means
     that the paths are relative to the .git/info/fast-import directory.
     However, other importers may use a different location.

     Relative and non-relative marks may be combined by interweaving
     –(no-)-relative-marks with the –(import|export)-marks= options.


Submodule Rewriting
===================

‘--rewrite-submodules-from=<name>:<file>’
‘--rewrite-submodules-to=<name>:<file>’
     Rewrite the object IDs for the submodule specified by <name> from
     the values used in the from <file> to those used in the to <file>.
     The from marks should have been created by ‘git fast-export’, and
     the to marks should have been created by ‘git fast-import’ when
     importing that same submodule.

     <name> may be any arbitrary string not containing a colon
     character, but the same value must be used with both options when
     specifying corresponding marks.  Multiple submodules may be
     specified with different values for <name>.  It is an error not to
     use these options in corresponding pairs.

     These options are primarily useful when converting a repository
     from one hash algorithm to another; without them, fast-import will
     fail if it encounters a submodule because it has no way of writing
     the object ID into the new hash algorithm.


Performance and Compression Tuning
==================================

‘--active-branches=<n>’
     Maximum number of branches to maintain active at once.  See “Memory
     Utilization” below for details.  Default is 5.

‘--big-file-threshold=<n>’
     Maximum size of a blob that fast-import will attempt to create a
     delta for, expressed in bytes.  The default is 512m (512 MiB). Some
     importers may wish to lower this on systems with constrained
     memory.

‘--depth=<n>’
     Maximum delta depth, for blob and tree deltification.  Default is
     50.

‘--export-pack-edges=<file>’
     After creating a packfile, print a line of data to <file> listing
     the filename of the packfile and the last commit on each branch
     that was written to that packfile.  This information may be useful
     after importing projects whose total object set exceeds the 4 GiB
     packfile limit, as these commits can be used as edge points during
     calls to _git pack-objects_.

‘--max-pack-size=<n>’
     Maximum size of each output packfile.  The default is unlimited.

fastimport.unpackLimit
     See git-config(1)


PERFORMANCE
***********

The design of fast-import allows it to import large projects in a
minimum amount of memory usage and processing time.  Assuming the
frontend is able to keep up with fast-import and feed it a constant
stream of data, import times for projects holding 10+ years of history
and containing 100,000+ individual commits are generally completed in
just 1-2 hours on quite modest (~$2,000 USD) hardware.

   Most bottlenecks appear to be in foreign source data access (the
source just cannot extract revisions fast enough) or disk IO
(fast-import writes as fast as the disk will take the data).  Imports
will run faster if the source data is stored on a different drive than
the destination Git repository (due to less IO contention).


DEVELOPMENT COST
****************

A typical frontend for fast-import tends to weigh in at approximately
200 lines of Perl/Python/Ruby code.  Most developers have been able to
create working importers in just a couple of hours, even though it is
their first exposure to fast-import, and sometimes even to Git.  This is
an ideal situation, given that most conversion tools are throw-away (use
once, and never look back).


PARALLEL OPERATION
******************

Like _git push_ or _git fetch_, imports handled by fast-import are safe
to run alongside parallel ‘git repack -a -d’ or ‘git gc’ invocations, or
any other Git operation (including _git prune_, as loose objects are
never used by fast-import).

   fast-import does not lock the branch or tag refs it is actively
importing.  After the import, during its ref update phase, fast-import
tests each existing branch ref to verify the update will be a
fast-forward update (the commit stored in the ref is contained in the
new history of the commit to be written).  If the update is not a
fast-forward update, fast-import will skip updating that ref and instead
prints a warning message.  fast-import will always attempt to update all
branch refs, and does not stop on the first failure.

   Branch updates can be forced with –force, but it’s recommended that
this only be used on an otherwise quiet repository.  Using –force is not
necessary for an initial import into an empty repository.


TECHNICAL DISCUSSION
********************

fast-import tracks a set of branches in memory.  Any branch can be
created or modified at any point during the import process by sending a
‘commit’ command on the input stream.  This design allows a frontend
program to process an unlimited number of branches simultaneously,
generating commits in the order they are available from the source data.
It also simplifies the frontend programs considerably.

   fast-import does not use or alter the current working directory, or
any file within it.  (It does however update the current Git repository,
as referenced by ‘GIT_DIR’.)  Therefore an import frontend may use the
working directory for its own purposes, such as extracting file
revisions from the foreign source.  This ignorance of the working
directory also allows fast-import to run very quickly, as it does not
need to perform any costly file update operations when switching between
branches.


INPUT FORMAT
************

With the exception of raw file data (which Git does not interpret) the
fast-import input format is text (ASCII) based.  This text based format
simplifies development and debugging of frontend programs, especially
when a higher level language such as Perl, Python or Ruby is being used.

   fast-import is very strict about its input.  Where we say SP below we
mean *exactly* one space.  Likewise LF means one (and only one) linefeed
and HT one (and only one) horizontal tab.  Supplying additional
whitespace characters will cause unexpected results, such as branch
names or file names with leading or trailing spaces in their name, or
early termination of fast-import when it encounters unexpected input.


Stream Comments
===============

To aid in debugging frontends fast-import ignores any line that begins
with ‘#’ (ASCII pound/hash) up to and including the line ending ‘LF’.  A
comment line may contain any sequence of bytes that does not contain an
LF and therefore may be used to include any detailed debugging
information that might be specific to the frontend and useful when
inspecting a fast-import data stream.


Date Formats
============

The following date formats are supported.  A frontend should select the
format it will use for this import by passing the format name in the
–date-format=<fmt> command-line option.

‘raw’
     This is the Git native format and is ‘<time> SP <offutc>’.  It is
     also fast-import’s default format, if –date-format was not
     specified.

     The time of the event is specified by ‘<time>’ as the number of
     seconds since the UNIX epoch (midnight, Jan 1, 1970, UTC) and is
     written as an ASCII decimal integer.

     The local offset is specified by ‘<offutc>’ as a positive or
     negative offset from UTC. For example EST (which is 5 hours behind
     UTC) would be expressed in ‘<tz>’ by “-0500” while UTC is “+0000”.
     The local offset does not affect ‘<time>’; it is used only as an
     advisement to help formatting routines display the timestamp.

     If the local offset is not available in the source material, use
     “+0000”, or the most common local offset.  For example many
     organizations have a CVS repository which has only ever been
     accessed by users who are located in the same location and time
     zone.  In this case a reasonable offset from UTC could be assumed.

     Unlike the ‘rfc2822’ format, this format is very strict.  Any
     variation in formatting will cause fast-import to reject the value,
     and some sanity checks on the numeric values may also be performed.

‘raw-permissive’
     This is the same as ‘raw’ except that no sanity checks on the
     numeric epoch and local offset are performed.  This can be useful
     when trying to filter or import an existing history with e.g.
     bogus timezone values.

‘rfc2822’
     This is the standard email format as described by RFC 2822.

     An example value is “Tue Feb 6 11:22:18 2007 -0500”.  The Git
     parser is accurate, but a little on the lenient side.  It is the
     same parser used by _git am_ when applying patches received from
     email.

     Some malformed strings may be accepted as valid dates.  In some of
     these cases Git will still be able to obtain the correct date from
     the malformed string.  There are also some types of malformed
     strings which Git will parse wrong, and yet consider valid.
     Seriously malformed strings will be rejected.

     Unlike the ‘raw’ format above, the time zone/UTC offset information
     contained in an RFC 2822 date string is used to adjust the date
     value to UTC prior to storage.  Therefore it is important that this
     information be as accurate as possible.

     If the source material uses RFC 2822 style dates, the frontend
     should let fast-import handle the parsing and conversion (rather
     than attempting to do it itself) as the Git parser has been well
     tested in the wild.

     Frontends should prefer the ‘raw’ format if the source material
     already uses UNIX-epoch format, can be coaxed to give dates in that
     format, or its format is easily convertible to it, as there is no
     ambiguity in parsing.

‘now’
     Always use the current time and time zone.  The literal ‘now’ must
     always be supplied for ‘<when>’.

     This is a toy format.  The current time and time zone of this
     system is always copied into the identity string at the time it is
     being created by fast-import.  There is no way to specify a
     different time or time zone.

     This particular format is supplied as it’s short to implement and
     may be useful to a process that wants to create a new commit right
     now, without needing to use a working directory or _git
     update-index_.

     If separate ‘author’ and ‘committer’ commands are used in a
     ‘commit’ the timestamps may not match, as the system clock will be
     polled twice (once for each command).  The only way to ensure that
     both author and committer identity information has the same
     timestamp is to omit ‘author’ (thus copying from ‘committer’) or to
     use a date format other than ‘now’.


Commands
========

fast-import accepts several commands to update the current repository
and control the current import process.  More detailed discussion (with
examples) of each command follows later.

‘commit’
     Creates a new branch or updates an existing branch by creating a
     new commit and updating the branch to point at the newly created
     commit.

‘tag’
     Creates an annotated tag object from an existing commit or branch.
     Lightweight tags are not supported by this command, as they are not
     recommended for recording meaningful points in time.

‘reset’
     Reset an existing branch (or a new branch) to a specific revision.
     This command must be used to change a branch to a specific revision
     without making a commit on it.

‘blob’
     Convert raw file data into a blob, for future use in a ‘commit’
     command.  This command is optional and is not needed to perform an
     import.

‘alias’
     Record that a mark refers to a given object without first creating
     any new object.  Using –import-marks and referring to missing marks
     will cause fast-import to fail, so aliases can provide a way to set
     otherwise pruned commits to a valid value (e.g.  the nearest
     non-pruned ancestor).

‘checkpoint’
     Forces fast-import to close the current packfile, generate its
     unique SHA-1 checksum and index, and start a new packfile.  This
     command is optional and is not needed to perform an import.

‘progress’
     Causes fast-import to echo the entire line to its own standard
     output.  This command is optional and is not needed to perform an
     import.

‘done’
     Marks the end of the stream.  This command is optional unless the
     ‘done’ feature was requested using the ‘--done’ command-line option
     or ‘feature done’ command.

‘get-mark’
     Causes fast-import to print the SHA-1 corresponding to a mark to
     the file descriptor set with ‘--cat-blob-fd’, or ‘stdout’ if
     unspecified.

‘cat-blob’
     Causes fast-import to print a blob in _cat-file –batch_ format to
     the file descriptor set with ‘--cat-blob-fd’ or ‘stdout’ if
     unspecified.

‘ls’
     Causes fast-import to print a line describing a directory entry in
     _ls-tree_ format to the file descriptor set with ‘--cat-blob-fd’ or
     ‘stdout’ if unspecified.

‘feature’
     Enable the specified feature.  This requires that fast-import
     supports the specified feature, and aborts if it does not.

‘option’
     Specify any of the options listed under OPTIONS that do not change
     stream semantic to suit the frontend’s needs.  This command is
     optional and is not needed to perform an import.


commit
======

Create or update a branch with a new commit, recording one logical
change to the project.

             'commit' SP <ref> LF
             mark?
             original-oid?
             ('author' (SP <name>)? SP LT <email> GT SP <when> LF)?
             'committer' (SP <name>)? SP LT <email> GT SP <when> LF
             ('encoding' SP <encoding>)?
             data
             ('from' SP <commit-ish> LF)?
             ('merge' SP <commit-ish> LF)*
             (filemodify | filedelete | filecopy | filerename | filedeleteall | notemodify)*
             LF?

   where ‘<ref>’ is the name of the branch to make the commit on.
Typically branch names are prefixed with ‘refs/heads/’ in Git, so
importing the CVS branch symbol ‘RELENG-1_0’ would use
‘refs/heads/RELENG-1_0’ for the value of ‘<ref>’.  The value of ‘<ref>’
must be a valid refname in Git.  As ‘LF’ is not valid in a Git refname,
no quoting or escaping syntax is supported here.

   A ‘mark’ command may optionally appear, requesting fast-import to
save a reference to the newly created commit for future use by the
frontend (see below for format).  It is very common for frontends to
mark every commit they create, thereby allowing future branch creation
from any imported commit.

   The ‘data’ command following ‘committer’ must supply the commit
message (see below for ‘data’ command syntax).  To import an empty
commit message use a 0 length data.  Commit messages are free-form and
are not interpreted by Git.  Currently they must be encoded in UTF-8, as
fast-import does not permit other encodings to be specified.

   Zero or more ‘filemodify’, ‘filedelete’, ‘filecopy’, ‘filerename’,
‘filedeleteall’ and ‘notemodify’ commands may be included to update the
contents of the branch prior to creating the commit.  These commands may
be supplied in any order.  However it is recommended that a
‘filedeleteall’ command precede all ‘filemodify’, ‘filecopy’,
‘filerename’ and ‘notemodify’ commands in the same commit, as
‘filedeleteall’ wipes the branch clean (see below).

   The ‘LF’ after the command is optional (it used to be required).
Note that for reasons of backward compatibility, if the commit ends with
a ‘data’ command (i.e.  it has no ‘from’, ‘merge’, ‘filemodify’,
‘filedelete’, ‘filecopy’, ‘filerename’, ‘filedeleteall’ or ‘notemodify’
commands) then two ‘LF’ commands may appear at the end of the command
instead of just one.


author
------

An ‘author’ command may optionally appear, if the author information
might differ from the committer information.  If ‘author’ is omitted
then fast-import will automatically use the committer’s information for
the author portion of the commit.  See below for a description of the
fields in ‘author’, as they are identical to ‘committer’.


committer
---------

The ‘committer’ command indicates who made this commit, and when they
made it.

   Here ‘<name>’ is the person’s display name (for example “Com M
Itter”) and ‘<email>’ is the person’s email address (“cm@example.com”).
‘LT’ and ‘GT’ are the literal less-than (\x3c) and greater-than (\x3e)
symbols.  These are required to delimit the email address from the other
fields in the line.  Note that ‘<name>’ and ‘<email>’ are free-form and
may contain any sequence of bytes, except ‘LT’, ‘GT’ and ‘LF’.  ‘<name>’
is typically UTF-8 encoded.

   The time of the change is specified by ‘<when>’ using the date format
that was selected by the –date-format=<fmt> command-line option.  See
“Date Formats” above for the set of supported formats, and their syntax.


encoding
--------

The optional ‘encoding’ command indicates the encoding of the commit
message.  Most commits are UTF-8 and the encoding is omitted, but this
allows importing commit messages into git without first reencoding them.


from
----

The ‘from’ command is used to specify the commit to initialize this
branch from.  This revision will be the first ancestor of the new
commit.  The state of the tree built at this commit will begin with the
state at the ‘from’ commit, and be altered by the content modifications
in this commit.

   Omitting the ‘from’ command in the first commit of a new branch will
cause fast-import to create that commit with no ancestor.  This tends to
be desired only for the initial commit of a project.  If the frontend
creates all files from scratch when making a new branch, a ‘merge’
command may be used instead of ‘from’ to start the commit with an empty
tree.  Omitting the ‘from’ command on existing branches is usually
desired, as the current commit on that branch is automatically assumed
to be the first ancestor of the new commit.

   As ‘LF’ is not valid in a Git refname or SHA-1 expression, no quoting
or escaping syntax is supported within ‘<commit-ish>’.

   Here ‘<commit-ish>’ is any of the following:

   • The name of an existing branch already in fast-import’s internal
     branch table.  If fast-import doesn’t know the name, it’s treated
     as a SHA-1 expression.

   • A mark reference, ‘:<idnum>’, where ‘<idnum>’ is the mark number.

     The reason fast-import uses ‘:’ to denote a mark reference is this
     character is not legal in a Git branch name.  The leading ‘:’ makes
     it easy to distinguish between the mark 42 (‘:42’) and the branch
     42 (‘42’ or ‘refs/heads/42’), or an abbreviated SHA-1 which
     happened to consist only of base-10 digits.

     Marks must be declared (via ‘mark’) before they can be used.

   • A complete 40 byte or abbreviated commit SHA-1 in hex.

   • Any valid Git SHA-1 expression that resolves to a commit.  See
     “SPECIFYING REVISIONS” in gitrevisions(7) for details.

   • The special null SHA-1 (40 zeros) specifies that the branch is to
     be removed.

   The special case of restarting an incremental import from the current
branch value should be written as:

             from refs/heads/branch^0

   The ‘^0’ suffix is necessary as fast-import does not permit a branch
to start from itself, and the branch is created in memory before the
‘from’ command is even read from the input.  Adding ‘^0’ will force
fast-import to resolve the commit through Git’s revision parsing
library, rather than its internal branch table, thereby loading in the
existing value of the branch.


merge
-----

Includes one additional ancestor commit.  The additional ancestry link
does not change the way the tree state is built at this commit.  If the
‘from’ command is omitted when creating a new branch, the first ‘merge’
commit will be the first ancestor of the current commit, and the branch
will start out with no files.  An unlimited number of ‘merge’ commands
per commit are permitted by fast-import, thereby establishing an n-way
merge.

   Here ‘<commit-ish>’ is any of the commit specification expressions
also accepted by ‘from’ (see above).


filemodify
----------

Included in a ‘commit’ command to add a new file or change the content
of an existing file.  This command has two different means of specifying
the content of the file.

External data format
     The data content for the file was already supplied by a prior
     ‘blob’ command.  The frontend just needs to connect it.

                  'M' SP <mode> SP <dataref> SP <path> LF

     Here usually ‘<dataref>’ must be either a mark reference
     (‘:<idnum>’) set by a prior ‘blob’ command, or a full 40-byte SHA-1
     of an existing Git blob object.  If ‘<mode>’ is ‘040000`’ then
     ‘<dataref>’ must be the full 40-byte SHA-1 of an existing Git tree
     object or a mark reference set with ‘--import-marks’.

Inline data format
     The data content for the file has not been supplied yet.  The
     frontend wants to supply it as part of this modify command.

                  'M' SP <mode> SP 'inline' SP <path> LF
                  data

     See below for a detailed description of the ‘data’ command.

   In both formats ‘<mode>’ is the type of file entry, specified in
octal.  Git only supports the following modes:

   • ‘100644’ or ‘644’: A normal (not-executable) file.  The majority of
     files in most projects use this mode.  If in doubt, this is what
     you want.

   • ‘100755’ or ‘755’: A normal, but executable, file.

   • ‘120000’: A symlink, the content of the file will be the link
     target.

   • ‘160000’: A gitlink, SHA-1 of the object refers to a commit in
     another repository.  Git links can only be specified by SHA or
     through a commit mark.  They are used to implement submodules.

   • ‘040000’: A subdirectory.  Subdirectories can only be specified by
     SHA or through a tree mark set with ‘--import-marks’.

   In both formats ‘<path>’ is the complete path of the file to be added
(if not already existing) or modified (if already existing).

   A ‘<path>’ string must use UNIX-style directory separators (forward
slash ‘/’), may contain any byte other than ‘LF’, and must not start
with double quote (‘"’).

   A path can use C-style string quoting; this is accepted in all cases
and mandatory if the filename starts with double quote or contains ‘LF’.
In C-style quoting, the complete name should be surrounded with double
quotes, and any ‘LF’, backslash, or double quote characters must be
escaped by preceding them with a backslash (e.g., ‘"path/with\n, \\ and
\" in it"’).

   The value of ‘<path>’ must be in canonical form.  That is it must
not:

   • contain an empty directory component (e.g.  ‘foo//bar’ is invalid),

   • end with a directory separator (e.g.  ‘foo/’ is invalid),

   • start with a directory separator (e.g.  ‘/foo’ is invalid),

   • contain the special component ‘.’ or ‘..’ (e.g.  ‘foo/./bar’ and
     ‘foo/../bar’ are invalid).

   The root of the tree can be represented by an empty string as
‘<path>’.

   It is recommended that ‘<path>’ always be encoded using UTF-8.


filedelete
----------

Included in a ‘commit’ command to remove a file or recursively delete an
entire directory from the branch.  If the file or directory removal
makes its parent directory empty, the parent directory will be
automatically removed too.  This cascades up the tree until the first
non-empty directory or the root is reached.

             'D' SP <path> LF

   here ‘<path>’ is the complete path of the file or subdirectory to be
removed from the branch.  See ‘filemodify’ above for a detailed
description of ‘<path>’.


filecopy
--------

Recursively copies an existing file or subdirectory to a different
location within the branch.  The existing file or directory must exist.
If the destination exists it will be completely replaced by the content
copied from the source.

             'C' SP <path> SP <path> LF

   here the first ‘<path>’ is the source location and the second
‘<path>’ is the destination.  See ‘filemodify’ above for a detailed
description of what ‘<path>’ may look like.  To use a source path that
contains SP the path must be quoted.

   A ‘filecopy’ command takes effect immediately.  Once the source
location has been copied to the destination any future commands applied
to the source location will not impact the destination of the copy.


filerename
----------

Renames an existing file or subdirectory to a different location within
the branch.  The existing file or directory must exist.  If the
destination exists it will be replaced by the source directory.

             'R' SP <path> SP <path> LF

   here the first ‘<path>’ is the source location and the second
‘<path>’ is the destination.  See ‘filemodify’ above for a detailed
description of what ‘<path>’ may look like.  To use a source path that
contains SP the path must be quoted.

   A ‘filerename’ command takes effect immediately.  Once the source
location has been renamed to the destination any future commands applied
to the source location will create new files there and not impact the
destination of the rename.

   Note that a ‘filerename’ is the same as a ‘filecopy’ followed by a
‘filedelete’ of the source location.  There is a slight performance
advantage to using ‘filerename’, but the advantage is so small that it
is never worth trying to convert a delete/add pair in source material
into a rename for fast-import.  This ‘filerename’ command is provided
just to simplify frontends that already have rename information and
don’t want bother with decomposing it into a ‘filecopy’ followed by a
‘filedelete’.


filedeleteall
-------------

Included in a ‘commit’ command to remove all files (and also all
directories) from the branch.  This command resets the internal branch
structure to have no files in it, allowing the frontend to subsequently
add all interesting files from scratch.

             'deleteall' LF

   This command is extremely useful if the frontend does not know (or
does not care to know) what files are currently on the branch, and
therefore cannot generate the proper ‘filedelete’ commands to update the
content.

   Issuing a ‘filedeleteall’ followed by the needed ‘filemodify’
commands to set the correct content will produce the same results as
sending only the needed ‘filemodify’ and ‘filedelete’ commands.  The
‘filedeleteall’ approach may however require fast-import to use slightly
more memory per active branch (less than 1 MiB for even most large
projects); so frontends that can easily obtain only the affected paths
for a commit are encouraged to do so.


notemodify
----------

Included in a ‘commit’ ‘<notes_ref>’ command to add a new note
annotating a ‘<commit-ish>’ or change this annotation contents.
Internally it is similar to filemodify 100644 on ‘<commit-ish>’ path
(maybe split into subdirectories).  It’s not advised to use any other
commands to write to the ‘<notes_ref>’ tree except ‘filedeleteall’ to
delete all existing notes in this tree.  This command has two different
means of specifying the content of the note.

External data format
     The data content for the note was already supplied by a prior
     ‘blob’ command.  The frontend just needs to connect it to the
     commit that is to be annotated.

                  'N' SP <dataref> SP <commit-ish> LF

     Here ‘<dataref>’ can be either a mark reference (‘:<idnum>’) set by
     a prior ‘blob’ command, or a full 40-byte SHA-1 of an existing Git
     blob object.

Inline data format
     The data content for the note has not been supplied yet.  The
     frontend wants to supply it as part of this modify command.

                  'N' SP 'inline' SP <commit-ish> LF
                  data

     See below for a detailed description of the ‘data’ command.

   In both formats ‘<commit-ish>’ is any of the commit specification
expressions also accepted by ‘from’ (see above).


mark
====

Arranges for fast-import to save a reference to the current object,
allowing the frontend to recall this object at a future point in time,
without knowing its SHA-1.  Here the current object is the object
creation command the ‘mark’ command appears within.  This can be
‘commit’, ‘tag’, and ‘blob’, but ‘commit’ is the most common usage.

             'mark' SP ':' <idnum> LF

   where ‘<idnum>’ is the number assigned by the frontend to this mark.
The value of ‘<idnum>’ is expressed as an ASCII decimal integer.  The
value 0 is reserved and cannot be used as a mark.  Only values greater
than or equal to 1 may be used as marks.

   New marks are created automatically.  Existing marks can be moved to
another object simply by reusing the same ‘<idnum>’ in another ‘mark’
command.


original-oid
============

Provides the name of the object in the original source control system.
fast-import will simply ignore this directive, but filter processes
which operate on and modify the stream before feeding to fast-import may
have uses for this information

             'original-oid' SP <object-identifier> LF

   where ‘<object-identifier>’ is any string not containing LF.


tag
===

Creates an annotated tag referring to a specific commit.  To create
lightweight (non-annotated) tags see the ‘reset’ command below.

             'tag' SP <name> LF
             mark?
             'from' SP <commit-ish> LF
             original-oid?
             'tagger' (SP <name>)? SP LT <email> GT SP <when> LF
             data

   where ‘<name>’ is the name of the tag to create.

   Tag names are automatically prefixed with ‘refs/tags/’ when stored in
Git, so importing the CVS branch symbol ‘RELENG-1_0-FINAL’ would use
just ‘RELENG-1_0-FINAL’ for ‘<name>’, and fast-import will write the
corresponding ref as ‘refs/tags/RELENG-1_0-FINAL’.

   The value of ‘<name>’ must be a valid refname in Git and therefore
may contain forward slashes.  As ‘LF’ is not valid in a Git refname, no
quoting or escaping syntax is supported here.

   The ‘from’ command is the same as in the ‘commit’ command; see above
for details.

   The ‘tagger’ command uses the same format as ‘committer’ within
‘commit’; again see above for details.

   The ‘data’ command following ‘tagger’ must supply the annotated tag
message (see below for ‘data’ command syntax).  To import an empty tag
message use a 0 length data.  Tag messages are free-form and are not
interpreted by Git.  Currently they must be encoded in UTF-8, as
fast-import does not permit other encodings to be specified.

   Signing annotated tags during import from within fast-import is not
supported.  Trying to include your own PGP/GPG signature is not
recommended, as the frontend does not (easily) have access to the
complete set of bytes which normally goes into such a signature.  If
signing is required, create lightweight tags from within fast-import
with ‘reset’, then create the annotated versions of those tags offline
with the standard _git tag_ process.


reset
=====

Creates (or recreates) the named branch, optionally starting from a
specific revision.  The reset command allows a frontend to issue a new
‘from’ command for an existing branch, or to create a new branch from an
existing commit without creating a new commit.

             'reset' SP <ref> LF
             ('from' SP <commit-ish> LF)?
             LF?

   For a detailed description of ‘<ref>’ and ‘<commit-ish>’ see above
under ‘commit’ and ‘from’.

   The ‘LF’ after the command is optional (it used to be required).

   The ‘reset’ command can also be used to create lightweight
(non-annotated) tags.  For example:

     reset refs/tags/938
     from :938

   would create the lightweight tag ‘refs/tags/938’ referring to
whatever commit mark ‘:938’ references.


blob
====

Requests writing one file revision to the packfile.  The revision is not
connected to any commit; this connection must be formed in a subsequent
‘commit’ command by referencing the blob through an assigned mark.

             'blob' LF
             mark?
             original-oid?
             data

   The mark command is optional here as some frontends have chosen to
generate the Git SHA-1 for the blob on their own, and feed that directly
to ‘commit’.  This is typically more work than it’s worth however, as
marks are inexpensive to store and easy to use.


data
====

Supplies raw data (for use as blob/file content, commit messages, or
annotated tag messages) to fast-import.  Data can be supplied using an
exact byte count or delimited with a terminating line.  Real frontends
intended for production-quality conversions should always use the exact
byte count format, as it is more robust and performs better.  The
delimited format is intended primarily for testing fast-import.

   Comment lines appearing within the ‘<raw>’ part of ‘data’ commands
are always taken to be part of the body of the data and are therefore
never ignored by fast-import.  This makes it safe to import any
file/message content whose lines might start with ‘#’.

Exact byte count format
     The frontend must specify the number of bytes of data.

                  'data' SP <count> LF
                  <raw> LF?

     where ‘<count>’ is the exact number of bytes appearing within
     ‘<raw>’.  The value of ‘<count>’ is expressed as an ASCII decimal
     integer.  The ‘LF’ on either side of ‘<raw>’ is not included in
     ‘<count>’ and will not be included in the imported data.

     The ‘LF’ after ‘<raw>’ is optional (it used to be required) but
     recommended.  Always including it makes debugging a fast-import
     stream easier as the next command always starts in column 0 of the
     next line, even if ‘<raw>’ did not end with an ‘LF’.

Delimited format
     A delimiter string is used to mark the end of the data.
     fast-import will compute the length by searching for the delimiter.
     This format is primarily useful for testing and is not recommended
     for real data.

                  'data' SP '<<' <delim> LF
                  <raw> LF
                  <delim> LF
                  LF?

     where ‘<delim>’ is the chosen delimiter string.  The string
     ‘<delim>’ must not appear on a line by itself within ‘<raw>’, as
     otherwise fast-import will think the data ends earlier than it
     really does.  The ‘LF’ immediately trailing ‘<raw>’ is part of
     ‘<raw>’.  This is one of the limitations of the delimited format,
     it is impossible to supply a data chunk which does not have an LF
     as its last byte.

     The ‘LF’ after ‘<delim> LF’ is optional (it used to be required).


alias
=====

Record that a mark refers to a given object without first creating any
new object.

             'alias' LF
             mark
             'to' SP <commit-ish> LF
             LF?

   For a detailed description of ‘<commit-ish>’ see above under ‘from’.


checkpoint
==========

Forces fast-import to close the current packfile, start a new one, and
to save out all current branch refs, tags and marks.

             'checkpoint' LF
             LF?

   Note that fast-import automatically switches packfiles when the
current packfile reaches –max-pack-size, or 4 GiB, whichever limit is
smaller.  During an automatic packfile switch fast-import does not
update the branch refs, tags or marks.

   As a ‘checkpoint’ can require a significant amount of CPU time and
disk IO (to compute the overall pack SHA-1 checksum, generate the
corresponding index file, and update the refs) it can easily take
several minutes for a single ‘checkpoint’ command to complete.

   Frontends may choose to issue checkpoints during extremely large and
long running imports, or when they need to allow another Git process
access to a branch.  However given that a 30 GiB Subversion repository
can be loaded into Git through fast-import in about 3 hours, explicit
checkpointing may not be necessary.

   The ‘LF’ after the command is optional (it used to be required).


progress
========

Causes fast-import to print the entire ‘progress’ line unmodified to its
standard output channel (file descriptor 1) when the command is
processed from the input stream.  The command otherwise has no impact on
the current import, or on any of fast-import’s internal state.

             'progress' SP <any> LF
             LF?

   The ‘<any>’ part of the command may contain any sequence of bytes
that does not contain ‘LF’.  The ‘LF’ after the command is optional.
Callers may wish to process the output through a tool such as sed to
remove the leading part of the line, for example:

     frontend | git fast-import | sed 's/^progress //'

   Placing a ‘progress’ command immediately after a ‘checkpoint’ will
inform the reader when the ‘checkpoint’ has been completed and it can
safely access the refs that fast-import updated.


get-mark
========

Causes fast-import to print the SHA-1 corresponding to a mark to stdout
or to the file descriptor previously arranged with the ‘--cat-blob-fd’
argument.  The command otherwise has no impact on the current import;
its purpose is to retrieve SHA-1s that later commits might want to refer
to in their commit messages.

             'get-mark' SP ':' <idnum> LF

   See “Responses To Commands” below for details about how to read this
output safely.


cat-blob
========

Causes fast-import to print a blob to a file descriptor previously
arranged with the ‘--cat-blob-fd’ argument.  The command otherwise has
no impact on the current import; its main purpose is to retrieve blobs
that may be in fast-import’s memory but not accessible from the target
repository.

             'cat-blob' SP <dataref> LF

   The ‘<dataref>’ can be either a mark reference (‘:<idnum>’) set
previously or a full 40-byte SHA-1 of a Git blob, preexisting or ready
to be written.

   Output uses the same format as ‘git cat-file --batch’:

     <sha1> SP 'blob' SP <size> LF
     <contents> LF

   This command can be used where a ‘filemodify’ directive can appear,
allowing it to be used in the middle of a commit.  For a ‘filemodify’
using an inline directive, it can also appear right before the ‘data’
directive.

   See “Responses To Commands” below for details about how to read this
output safely.


ls
==

Prints information about the object at a path to a file descriptor
previously arranged with the ‘--cat-blob-fd’ argument.  This allows
printing a blob from the active commit (with ‘cat-blob’) or copying a
blob or tree from a previous commit for use in the current one (with
‘filemodify’).

   The ‘ls’ command can also be used where a ‘filemodify’ directive can
appear, allowing it to be used in the middle of a commit.

Reading from the active commit
     This form can only be used in the middle of a ‘commit’.  The path
     names a directory entry within fast-import’s active commit.  The
     path must be quoted in this case.

                  'ls' SP <path> LF

Reading from a named tree
     The ‘<dataref>’ can be a mark reference (‘:<idnum>’) or the full
     40-byte SHA-1 of a Git tag, commit, or tree object, preexisting or
     waiting to be written.  The path is relative to the top level of
     the tree named by ‘<dataref>’.

                  'ls' SP <dataref> SP <path> LF

   See ‘filemodify’ above for a detailed description of ‘<path>’.

   Output uses the same format as ‘git ls-tree <tree> -- <path>’:

     <mode> SP ('blob' | 'tree' | 'commit') SP <dataref> HT <path> LF

   The <dataref> represents the blob, tree, or commit object at <path>
and can be used in later _get-mark_, _cat-blob_, _filemodify_, or _ls_
commands.

   If there is no file or subtree at that path, _git fast-import_ will
instead report

     missing SP <path> LF

   See “Responses To Commands” below for details about how to read this
output safely.


feature
=======

Require that fast-import supports the specified feature, or abort if it
does not.

             'feature' SP <feature> ('=' <argument>)? LF

   The <feature> part of the command may be any one of the following:

date-format
export-marks
relative-marks
no-relative-marks
force
     Act as though the corresponding command-line option with a leading
     ‘--’ was passed on the command line (see OPTIONS, above).

import-marks
import-marks-if-exists
     Like –import-marks except in two respects: first, only one "feature
     import-marks" or "feature import-marks-if-exists" command is
     allowed per stream; second, an –import-marks= or
     –import-marks-if-exists command-line option overrides any of these
     "feature" commands in the stream; third, "feature
     import-marks-if-exists" like a corresponding command-line option
     silently skips a nonexistent file.

get-mark
cat-blob
ls
     Require that the backend support the _get-mark_, _cat-blob_, or
     _ls_ command respectively.  Versions of fast-import not supporting
     the specified command will exit with a message indicating so.  This
     lets the import error out early with a clear message, rather than
     wasting time on the early part of an import before the unsupported
     command is detected.

notes
     Require that the backend support the _notemodify_ (N) subcommand to
     the _commit_ command.  Versions of fast-import not supporting notes
     will exit with a message indicating so.

done
     Error out if the stream ends without a _done_ command.  Without
     this feature, errors causing the frontend to end abruptly at a
     convenient point in the stream can go undetected.  This may occur,
     for example, if an import front end dies in mid-operation without
     emitting SIGTERM or SIGKILL at its subordinate git fast-import
     instance.


option
======

Processes the specified option so that git fast-import behaves in a way
that suits the frontend’s needs.  Note that options specified by the
frontend are overridden by any options the user may specify to git
fast-import itself.

         'option' SP <option> LF

   The ‘<option>’ part of the command may contain any of the options
listed in the OPTIONS section that do not change import semantics,
without the leading ‘--’ and is treated in the same way.

   Option commands must be the first commands on the input (not counting
feature commands), to give an option command after any non-option
command is an error.

   The following command-line options change import semantics and may
therefore not be passed as option:

   • date-format

   • import-marks

   • export-marks

   • cat-blob-fd

   • force


done
====

If the ‘done’ feature is not in use, treated as if EOF was read.  This
can be used to tell fast-import to finish early.

   If the ‘--done’ command-line option or ‘feature done’ command is in
use, the ‘done’ command is mandatory and marks the end of the stream.


RESPONSES TO COMMANDS
*********************

New objects written by fast-import are not available immediately.  Most
fast-import commands have no visible effect until the next checkpoint
(or completion).  The frontend can send commands to fill fast-import’s
input pipe without worrying about how quickly they will take effect,
which improves performance by simplifying scheduling.

   For some frontends, though, it is useful to be able to read back data
from the current repository as it is being updated (for example when the
source material describes objects in terms of patches to be applied to
previously imported objects).  This can be accomplished by connecting
the frontend and fast-import via bidirectional pipes:

     mkfifo fast-import-output
     frontend <fast-import-output |
     git fast-import >fast-import-output

   A frontend set up this way can use ‘progress’, ‘get-mark’, ‘ls’, and
‘cat-blob’ commands to read information from the import in progress.

   To avoid deadlock, such frontends must completely consume any pending
output from ‘progress’, ‘ls’, ‘get-mark’, and ‘cat-blob’ before
performing writes to fast-import that might block.


CRASH REPORTS
*************

If fast-import is supplied invalid input it will terminate with a
non-zero exit status and create a crash report in the top level of the
Git repository it was importing into.  Crash reports contain a snapshot
of the internal fast-import state as well as the most recent commands
that lead up to the crash.

   All recent commands (including stream comments, file changes and
progress commands) are shown in the command history within the crash
report, but raw file data and commit messages are excluded from the
crash report.  This exclusion saves space within the report file and
reduces the amount of buffering that fast-import must perform during
execution.

   After writing a crash report fast-import will close the current
packfile and export the marks table.  This allows the frontend developer
to inspect the repository state and resume the import from the point
where it crashed.  The modified branches and tags are not updated during
a crash, as the import did not complete successfully.  Branch and tag
information can be found in the crash report and must be applied
manually if the update is needed.

   An example crash:

     $ cat >in <<END_OF_INPUT
     # my very first test commit
     commit refs/heads/master
     committer Shawn O. Pearce <spearce> 19283 -0400
     # who is that guy anyway?
     data <<EOF
     this is my commit
     EOF
     M 644 inline .gitignore
     data <<EOF
     .gitignore
     EOF
     M 777 inline bob
     END_OF_INPUT

     $ git fast-import <in
     fatal: Corrupt mode: M 777 inline bob
     fast-import: dumping crash report to .git/fast_import_crash_8434

     $ cat .git/fast_import_crash_8434
     fast-import crash report:
         fast-import process: 8434
         parent process     : 1391
         at Sat Sep 1 00:58:12 2007

     fatal: Corrupt mode: M 777 inline bob

     Most Recent Commands Before Crash
     ---------------------------------
       # my very first test commit
       commit refs/heads/master
       committer Shawn O. Pearce <spearce> 19283 -0400
       # who is that guy anyway?
       data <<EOF
       M 644 inline .gitignore
       data <<EOF
     * M 777 inline bob

     Active Branch LRU
     -----------------
         active_branches = 1 cur, 5 max

     pos clock name ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      1)      0 refs/heads/master

     Inactive Branches
     -----------------
     refs/heads/master:
       status      : active loaded dirty
       tip commit  : 0000000000000000000000000000000000000000
       old tree    : 0000000000000000000000000000000000000000
       cur tree    : 0000000000000000000000000000000000000000
       commit clock: 0
       last pack   :

     ------------------- END OF CRASH REPORT


TIPS AND TRICKS
***************

The following tips and tricks have been collected from various users of
fast-import, and are offered here as suggestions.


Use One Mark Per Commit
=======================

When doing a repository conversion, use a unique mark per commit (‘mark
:<n>’) and supply the –export-marks option on the command line.
fast-import will dump a file which lists every mark and the Git object
SHA-1 that corresponds to it.  If the frontend can tie the marks back to
the source repository, it is easy to verify the accuracy and
completeness of the import by comparing each Git commit to the
corresponding source revision.

   Coming from a system such as Perforce or Subversion this should be
quite simple, as the fast-import mark can also be the Perforce changeset
number or the Subversion revision number.


Freely Skip Around Branches
===========================

Don’t bother trying to optimize the frontend to stick to one branch at a
time during an import.  Although doing so might be slightly faster for
fast-import, it tends to increase the complexity of the frontend code
considerably.

   The branch LRU builtin to fast-import tends to behave very well, and
the cost of activating an inactive branch is so low that bouncing around
between branches has virtually no impact on import performance.


Handling Renames
================

When importing a renamed file or directory, simply delete the old
name(s) and modify the new name(s) during the corresponding commit.  Git
performs rename detection after-the-fact, rather than explicitly during
a commit.


Use Tag Fixup Branches
======================

Some other SCM systems let the user create a tag from multiple files
which are not from the same commit/changeset.  Or to create tags which
are a subset of the files available in the repository.

   Importing these tags as-is in Git is impossible without making at
least one commit which “fixes up” the files to match the content of the
tag.  Use fast-import’s ‘reset’ command to reset a dummy branch outside
of your normal branch space to the base commit for the tag, then commit
one or more file fixup commits, and finally tag the dummy branch.

   For example since all normal branches are stored under ‘refs/heads/’
name the tag fixup branch ‘TAG_FIXUP’.  This way it is impossible for
the fixup branch used by the importer to have namespace conflicts with
real branches imported from the source (the name ‘TAG_FIXUP’ is not
‘refs/heads/TAG_FIXUP’).

   When committing fixups, consider using ‘merge’ to connect the
commit(s) which are supplying file revisions to the fixup branch.  Doing
so will allow tools such as _git blame_ to track through the real commit
history and properly annotate the source files.

   After fast-import terminates the frontend will need to do ‘rm
.git/TAG_FIXUP’ to remove the dummy branch.


Import Now, Repack Later
========================

As soon as fast-import completes the Git repository is completely valid
and ready for use.  Typically this takes only a very short time, even
for considerably large projects (100,000+ commits).

   However repacking the repository is necessary to improve data
locality and access performance.  It can also take hours on extremely
large projects (especially if -f and a large –window parameter is used).
Since repacking is safe to run alongside readers and writers, run the
repack in the background and let it finish when it finishes.  There is
no reason to wait to explore your new Git project!

   If you choose to wait for the repack, don’t try to run benchmarks or
performance tests until repacking is completed.  fast-import outputs
suboptimal packfiles that are simply never seen in real use situations.


Repacking Historical Data
=========================

If you are repacking very old imported data (e.g.  older than the last
year), consider expending some extra CPU time and supplying –window=50
(or higher) when you run _git repack_.  This will take longer, but will
also produce a smaller packfile.  You only need to expend the effort
once, and everyone using your project will benefit from the smaller
repository.


Include Some Progress Messages
==============================

Every once in a while have your frontend emit a ‘progress’ message to
fast-import.  The contents of the messages are entirely free-form, so
one suggestion would be to output the current month and year each time
the current commit date moves into the next month.  Your users will feel
better knowing how much of the data stream has been processed.


PACKFILE OPTIMIZATION
*********************

When packing a blob fast-import always attempts to deltify against the
last blob written.  Unless specifically arranged for by the frontend,
this will probably not be a prior version of the same file, so the
generated delta will not be the smallest possible.  The resulting
packfile will be compressed, but will not be optimal.

   Frontends which have efficient access to all revisions of a single
file (for example reading an RCS/CVS ,v file) can choose to supply all
revisions of that file as a sequence of consecutive ‘blob’ commands.
This allows fast-import to deltify the different file revisions against
each other, saving space in the final packfile.  Marks can be used to
later identify individual file revisions during a sequence of ‘commit’
commands.

   The packfile(s) created by fast-import do not encourage good disk
access patterns.  This is caused by fast-import writing the data in the
order it is received on standard input, while Git typically organizes
data within packfiles to make the most recent (current tip) data appear
before historical data.  Git also clusters commits together, speeding up
revision traversal through better cache locality.

   For this reason it is strongly recommended that users repack the
repository with ‘git repack -a -d’ after fast-import completes, allowing
Git to reorganize the packfiles for faster data access.  If blob deltas
are suboptimal (see above) then also adding the ‘-f’ option to force
recomputation of all deltas can significantly reduce the final packfile
size (30-50% smaller can be quite typical).

   Instead of running ‘git repack’ you can also run ‘git gc
--aggressive’, which will also optimize other things after an import
(e.g.  pack loose refs).  As noted in the "AGGRESSIVE" section in
git-gc(1) the ‘--aggressive’ option will find new deltas with the ‘-f’
option to git-repack(1).  For the reasons elaborated on above using
‘--aggressive’ after a fast-import is one of the few cases where it’s
known to be worthwhile.


MEMORY UTILIZATION
******************

There are a number of factors which affect how much memory fast-import
requires to perform an import.  Like critical sections of core Git,
fast-import uses its own memory allocators to amortize any overheads
associated with malloc.  In practice fast-import tends to amortize any
malloc overheads to 0, due to its use of large block allocations.


per object
==========

fast-import maintains an in-memory structure for every object written in
this execution.  On a 32 bit system the structure is 32 bytes, on a 64
bit system the structure is 40 bytes (due to the larger pointer sizes).
Objects in the table are not deallocated until fast-import terminates.
Importing 2 million objects on a 32 bit system will require
approximately 64 MiB of memory.

   The object table is actually a hashtable keyed on the object name
(the unique SHA-1).  This storage configuration allows fast-import to
reuse an existing or already written object and avoid writing duplicates
to the output packfile.  Duplicate blobs are surprisingly common in an
import, typically due to branch merges in the source.


per mark
========

Marks are stored in a sparse array, using 1 pointer (4 bytes or 8 bytes,
depending on pointer size) per mark.  Although the array is sparse,
frontends are still strongly encouraged to use marks between 1 and n,
where n is the total number of marks required for this import.


per branch
==========

Branches are classified as active and inactive.  The memory usage of the
two classes is significantly different.

   Inactive branches are stored in a structure which uses 96 or 120
bytes (32 bit or 64 bit systems, respectively), plus the length of the
branch name (typically under 200 bytes), per branch.  fast-import will
easily handle as many as 10,000 inactive branches in under 2 MiB of
memory.

   Active branches have the same overhead as inactive branches, but also
contain copies of every tree that has been recently modified on that
branch.  If subtree ‘include’ has not been modified since the branch
became active, its contents will not be loaded into memory, but if
subtree ‘src’ has been modified by a commit since the branch became
active, then its contents will be loaded in memory.

   As active branches store metadata about the files contained on that
branch, their in-memory storage size can grow to a considerable size
(see below).

   fast-import automatically moves active branches to inactive status
based on a simple least-recently-used algorithm.  The LRU chain is
updated on each ‘commit’ command.  The maximum number of active branches
can be increased or decreased on the command line with
–active-branches=.


per active tree
===============

Trees (aka directories) use just 12 bytes of memory on top of the memory
required for their entries (see “per active file” below).  The cost of a
tree is virtually 0, as its overhead amortizes out over the individual
file entries.


per active file entry
=====================

Files (and pointers to subtrees) within active trees require 52 or 64
bytes (32/64 bit platforms) per entry.  To conserve space, file and tree
names are pooled in a common string table, allowing the filename
“Makefile” to use just 16 bytes (after including the string header
overhead) no matter how many times it occurs within the project.

   The active branch LRU, when coupled with the filename string pool and
lazy loading of subtrees, allows fast-import to efficiently import
projects with 2,000+ branches and 45,114+ files in a very limited memory
footprint (less than 2.7 MiB per active branch).


SIGNALS
*******

Sending *SIGUSR1* to the _git fast-import_ process ends the current
packfile early, simulating a ‘checkpoint’ command.  The impatient
operator can use this facility to peek at the objects and refs from an
import in progress, at the cost of some added running time and worse
compression.


SEE ALSO
********

git-fast-export(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-fetch-pack,  Up: Top

Name
****

git-fetch-pack — 別のリポジトリから不足しているオブジェクトを受け取りま
す


Synopsis
********

     git fetch-pack [–all] [–quiet|-q] [–keep|-k] [–thin] [–include-tag]
             [–upload-pack=<git-upload-pack>]
             [–depth=<n>] [–no-progress]
             [-v] <repository> [<refs>…]


DESCRIPTION
***********

通常は、代わりにこのコマンドの上位レベルのラッパーである ‘git fetch’ を
使用することをお勧めします。

   おそらくはリモートリポジトリで _git-upload-pack_ を起動し、このリポジ
トリから不足しているオブジェクトを送信し、名前付きの head を更新するよう
問合せます。ローカルで利用可能なコミットの一覧は、ローカルの refs/ 階層
をスキャンして見つけ、相手側で実行されている ‘git-upload-pack’ に送信さ
れます。

   このコマンドは、ローカル側に共通の祖先コミットがない場合には、リモー
ト側から要求された参照を完了するためにすべてをダウンロードするよう機能縮
退します。


OPTIONS
*******

‘--all’
     すべてのリモート参照をフェッチします。

‘--stdin’
     stdinから参照のリストを1行に1つずつ取得します。このオプションに加え
     てコマンドラインで参照が指定されている場合、stdinからの参照はコマン
     ドラインでの参照の後に処理されます。

     このオプションと一緒に ‘--stateless-rpc’ を指定する場合、参照のリス
     トはパケット形式(pkt-line)である必要があります。各refは個別のパケッ
     トに含まれている必要があり、リストはフラッシュパケットで終了してい
     る必要があります。

‘-q’
‘--quiet’
     ‘-q’ フラグを ‘git unpack-objects’ に渡します。 これにより、クロー
     ン作成プロセスのおしゃべりが減ります。

‘-k’
‘--keep’
     受信したデータに対して ‘git unpack-objects’ を呼び出さないでくださ
     い。代わりに、そのデータから単一のパックファイルを作成し、オブジェ
     クトデータベースに保存してください。このオプションが2回指定された場
     合、パックは再パックに対してロックされます(the pack is locked
     against repacking)。

‘--thin’
     ネットワークトラフィックを軽減するために、パックに含まれないオブジ
     ェクトを元に、オブジェクトを差分化(デルタ化)して記録する「薄い」パ
     ック(thin pack)をフェッチします。

‘--include-tag’
     リモート側がサポートしている場合、タグが参照するオブジェクトがダウ
     ンロードされると、注釈付きタグオブジェクトが他のオブジェクトと同じ
     接続(same connection)でダウンロードされます。それ以外の場合、呼び出
     し元は、このオプションで使用できるタグを決定する必要があります。

‘--upload-pack=<git-upload-pack>’
     あなたの $PATHに見つからない場合は、これを使用して、リモート側の
     ‘git-upload-pack’ へのパスを指定します。sshdをインストールすると、
     ログインシェル用のユーザーの環境設定スクリプト(‘.bash_profile’ など
     )が無視され、プライベートにインストールされたgitがシステムのデフォ
     ルトの$PATHで見つけられない場合があります。推奨される別の回避策は、
     ‘.bashrc’ に $PATHを設定することですが、このフラグは、(ほとんどのも
     のを.bash_profileに設定して、)中身の無い ‘.bashrc’ ファイルを使用し
     て非対話型シェルのオーバーヘッドを支払いたくない人向けです。

‘--exec=<git-upload-pack>’
     ‘--upload-pack=<git-upload-pack>’ と同じ。

‘--depth=<n>’
     フェッチを n 以下の祖先チェーンに制限します。 ‘git-upload-pack’ は
     、特別な深さ2147483647が指定された場合、その深さの祖先チェーンがあ
     る場合でも、それを無限として扱います。

‘--shallow-since=<date>’
     浅いリポジトリ(shallow repository)の履歴を更に深くするか更に浅くす
     るかして、 <date> 以降の到達可能なすべてのコミットを含めます。

‘--shallow-exclude=<revision>’
     浅いリポジトリ(shallow repository)の履歴を深くするか浅くするかして
     、指定されたリモートブランチまたはタグから到達可能なコミットを除外
     します。このオプションは複数回指定できます。

‘--deepen-relative’
     引数 ‘--depth’ は、各リモートブランチ履歴の先端からではなく、現在の
     浅い境界(shallow boundary)からのコミット数を指定します。

‘--no-progress’
     進捗状況を表示しないでください。

‘--check-self-contained-and-connected’
     受信したパックが自己完結型で接続されている場合は、
     "connectivity-ok" を出力します。

‘-v’
     おしゃべりになります。

<repository>
     リモートリポジトリへのURL。

<refs>…
     更新元のリモートヘッド。これは $GIT_DIR に関連しています(例: ‘HEAD’
     、 ‘refs/heads/master’ )。指定しない場合は、リモート側が持つすべて
     のヘッドから更新します。

     リモートがオプション ‘uploadpack.allowTipSHA1InWant’ または
     ‘uploadpack.allowReachableSHA1InWant’ または
     ‘uploadpack.allowAnySHA1InWant’ を有効にしている場合、それらはリモ
     ートに存在する 16進40桁 sha1 である可能性があります。


SEE ALSO
********

git-fetch(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-fetch,  Up: Top

Name
****

git-fetch — Download objects and refs from another repository


Synopsis
********

     git fetch [<options>] [<repository> [<refspec>…]]
     git fetch [<options>] <group>
     git fetch –multiple [<options>] [(<repository> | <group>)…]
     git fetch –all [<options>]


DESCRIPTION
***********

Fetch branches and/or tags (collectively, "refs") from one or more other
repositories, along with the objects necessary to complete their
histories.  Remote-tracking branches are updated (see the description of
<refspec> below for ways to control this behavior).

   By default, any tag that points into the histories being fetched is
also fetched; the effect is to fetch tags that point at branches that
you are interested in.  This default behavior can be changed by using
the –tags or –no-tags options or by configuring remote.<name>.tagOpt.
By using a refspec that fetches tags explicitly, you can fetch tags that
do not point into branches you are interested in as well.

   _git fetch_ can fetch from either a single named repository or URL,
or from several repositories at once if <group> is given and there is a
remotes.<group> entry in the configuration file.  (See git-config(1)).

   When no remote is specified, by default the ‘origin’ remote will be
used, unless there’s an upstream branch configured for the current
branch.

   The names of refs that are fetched, together with the object names
they point at, are written to ‘.git/FETCH_HEAD’.  This information may
be used by scripts or other git commands, such as git-pull(1).


OPTIONS
*******

‘--all’
     Fetch all remotes.

‘-a’
‘--append’
     Append ref names and object names of fetched refs to the existing
     contents of ‘.git/FETCH_HEAD’.  Without this option old data in
     ‘.git/FETCH_HEAD’ will be overwritten.

‘--atomic’
     Use an atomic transaction to update local refs.  Either all refs
     are updated, or on error, no refs are updated.

‘--depth=<depth>’
     Limit fetching to the specified number of commits from the tip of
     each remote branch history.  If fetching to a _shallow_ repository
     created by ‘git clone’ with ‘--depth=<depth>’ option (see
     git-clone(1)), deepen or shorten the history to the specified
     number of commits.  Tags for the deepened commits are not fetched.

‘--deepen=<depth>’
     Similar to –depth, except it specifies the number of commits from
     the current shallow boundary instead of from the tip of each remote
     branch history.

‘--shallow-since=<date>’
     Deepen or shorten the history of a shallow repository to include
     all reachable commits after <date>.

‘--shallow-exclude=<revision>’
     Deepen or shorten the history of a shallow repository to exclude
     commits reachable from a specified remote branch or tag.  This
     option can be specified multiple times.

‘--unshallow’
     If the source repository is complete, convert a shallow repository
     to a complete one, removing all the limitations imposed by shallow
     repositories.

     If the source repository is shallow, fetch as much as possible so
     that the current repository has the same history as the source
     repository.

‘--update-shallow’
     By default when fetching from a shallow repository, ‘git fetch’
     refuses refs that require updating .git/shallow.  This option
     updates .git/shallow and accept such refs.

‘--negotiation-tip=<commit|glob>’
     By default, Git will report, to the server, commits reachable from
     all local refs to find common commits in an attempt to reduce the
     size of the to-be-received packfile.  If specified, Git will only
     report commits reachable from the given tips.  This is useful to
     speed up fetches when the user knows which local ref is likely to
     have commits in common with the upstream ref being fetched.

     This option may be specified more than once; if so, Git will report
     commits reachable from any of the given commits.

     The argument to this option may be a glob on ref names, a ref, or
     the (possibly abbreviated) SHA-1 of a commit.  Specifying a glob is
     equivalent to specifying this option multiple times, one for each
     matching ref name.

     See also the ‘fetch.negotiationAlgorithm’ and ‘push.negotiate’
     configuration variables documented in git-config(1), and the
     ‘--negotiate-only’ option below.

‘--negotiate-only’
     Do not fetch anything from the server, and instead print the
     ancestors of the provided ‘--negotiation-tip=*’ arguments, which we
     have in common with the server.

     Internally this is used to implement the ‘push.negotiate’ option,
     see git-config(1).

‘--dry-run’
     Show what would be done, without making any changes.

‘--[no-]write-fetch-head’
     Write the list of remote refs fetched in the ‘FETCH_HEAD’ file
     directly under ‘$GIT_DIR’.  This is the default.  Passing
     ‘--no-write-fetch-head’ from the command line tells Git not to
     write the file.  Under ‘--dry-run’ option, the file is never
     written.

‘-f’
‘--force’
     When _git fetch_ is used with ‘<src>:<dst>’ refspec it may refuse
     to update the local branch as discussed in the ‘<refspec>’ part
     below.  This option overrides that check.

‘-k’
‘--keep’
     Keep downloaded pack.

‘--multiple’
     Allow several <repository> and <group> arguments to be specified.
     No <refspec>s may be specified.

‘--[no-]auto-maintenance’
‘--[no-]auto-gc’
     Run ‘git maintenance run --auto’ at the end to perform automatic
     repository maintenance if needed.  (‘--[no-]auto-gc’ is a synonym.)
     This is enabled by default.

‘--[no-]write-commit-graph’
     Write a commit-graph after fetching.  This overrides the config
     setting ‘fetch.writeCommitGraph’.

‘--prefetch’
     Modify the configured refspec to place all refs into the
     ‘refs/prefetch/’ namespace.  See the ‘prefetch’ task in
     git-maintenance(1).

‘-p’
‘--prune’
     Before fetching, remove any remote-tracking references that no
     longer exist on the remote.  Tags are not subject to pruning if
     they are fetched only because of the default tag auto-following or
     due to a –tags option.  However, if tags are fetched due to an
     explicit refspec (either on the command line or in the remote
     configuration, for example if the remote was cloned with the
     –mirror option), then they are also subject to pruning.  Supplying
     ‘--prune-tags’ is a shorthand for providing the tag refspec.

     See the PRUNING section below for more details.

‘-P’
‘--prune-tags’
     Before fetching, remove any local tags that no longer exist on the
     remote if ‘--prune’ is enabled.  This option should be used more
     carefully, unlike ‘--prune’ it will remove any local references
     (local tags) that have been created.  This option is a shorthand
     for providing the explicit tag refspec along with ‘--prune’, see
     the discussion about that in its documentation.

     See the PRUNING section below for more details.

‘-n’
‘--no-tags’
     By default, tags that point at objects that are downloaded from the
     remote repository are fetched and stored locally.  This option
     disables this automatic tag following.  The default behavior for a
     remote may be specified with the remote.<name>.tagOpt setting.  See
     git-config(1).

‘--refmap=<refspec>’
     When fetching refs listed on the command line, use the specified
     refspec (can be given more than once) to map the refs to
     remote-tracking branches, instead of the values of ‘remote.*.fetch’
     configuration variables for the remote repository.  Providing an
     empty ‘<refspec>’ to the ‘--refmap’ option causes Git to ignore the
     configured refspecs and rely entirely on the refspecs supplied as
     command-line arguments.  See section on "Configured Remote-tracking
     Branches" for details.

‘-t’
‘--tags’
     Fetch all tags from the remote (i.e., fetch remote tags
     ‘refs/tags/*’ into local tags with the same name), in addition to
     whatever else would otherwise be fetched.  Using this option alone
     does not subject tags to pruning, even if –prune is used (though
     tags may be pruned anyway if they are also the destination of an
     explicit refspec; see ‘--prune’).

‘--recurse-submodules[=yes|on-demand|no]’
     This option controls if and under what conditions new commits of
     populated submodules should be fetched too.  It can be used as a
     boolean option to completely disable recursion when set to _no_ or
     to unconditionally recurse into all populated submodules when set
     to _yes_, which is the default when this option is used without any
     value.  Use _on-demand_ to only recurse into a populated submodule
     when the superproject retrieves a commit that updates the
     submodule’s reference to a commit that isn’t already in the local
     submodule clone.  By default, _on-demand_ is used, unless
     ‘fetch.recurseSubmodules’ is set (see git-config(1)).

‘-j’
‘--jobs=<n>’
     Number of parallel children to be used for all forms of fetching.

     If the ‘--multiple’ option was specified, the different remotes
     will be fetched in parallel.  If multiple submodules are fetched,
     they will be fetched in parallel.  To control them independently,
     use the config settings ‘fetch.parallel’ and ‘submodule.fetchJobs’
     (see git-config(1)).

     Typically, parallel recursive and multi-remote fetches will be
     faster.  By default fetches are performed sequentially, not in
     parallel.

‘--no-recurse-submodules’
     Disable recursive fetching of submodules (this has the same effect
     as using the ‘--recurse-submodules=no’ option).

‘--set-upstream’
     If the remote is fetched successfully, add upstream (tracking)
     reference, used by argument-less git-pull(1) and other commands.
     For more information, see ‘branch.<name>.merge’ and
     ‘branch.<name>.remote’ in git-config(1).

‘--submodule-prefix=<path>’
     Prepend <path> to paths printed in informative messages such as
     "Fetching submodule foo".  This option is used internally when
     recursing over submodules.

‘--recurse-submodules-default=[yes|on-demand]’
     This option is used internally to temporarily provide a
     non-negative default value for the –recurse-submodules option.  All
     other methods of configuring fetch’s submodule recursion (such as
     settings in gitmodules(5) and git-config(1)) override this option,
     as does specifying –[no-]recurse-submodules directly.

‘-u’
‘--update-head-ok’
     By default _git fetch_ refuses to update the head which corresponds
     to the current branch.  This flag disables the check.  This is
     purely for the internal use for _git pull_ to communicate with _git
     fetch_, and unless you are implementing your own Porcelain you are
     not supposed to use it.

‘--upload-pack <upload-pack>’
     When given, and the repository to fetch from is handled by _git
     fetch-pack_, ‘--exec=<upload-pack>’ is passed to the command to
     specify non-default path for the command run on the other end.

‘-q’
‘--quiet’
     Pass –quiet to git-fetch-pack and silence any other internally used
     git commands.  Progress is not reported to the standard error
     stream.

‘-v’
‘--verbose’
     Be verbose.

‘--progress’
     Progress status is reported on the standard error stream by default
     when it is attached to a terminal, unless -q is specified.  This
     flag forces progress status even if the standard error stream is
     not directed to a terminal.

‘-o <option>’
‘--server-option=<option>’
     Transmit the given string to the server when communicating using
     protocol version 2.  The given string must not contain a NUL or LF
     character.  The server’s handling of server options, including
     unknown ones, is server-specific.  When multiple
     ‘--server-option=<option>’ are given, they are all sent to the
     other side in the order listed on the command line.

‘--show-forced-updates’
     By default, git checks if a branch is force-updated during fetch.
     This can be disabled through fetch.showForcedUpdates, but the
     –show-forced-updates option guarantees this check occurs.  See
     git-config(1).

‘--no-show-forced-updates’
     By default, git checks if a branch is force-updated during fetch.
     Pass –no-show-forced-updates or set fetch.showForcedUpdates to
     false to skip this check for performance reasons.  If used during
     _git-pull_ the –ff-only option will still check for forced updates
     before attempting a fast-forward update.  See git-config(1).

‘-4’
‘--ipv4’
     Use IPv4 addresses only, ignoring IPv6 addresses.

‘-6’
‘--ipv6’
     Use IPv6 addresses only, ignoring IPv4 addresses.

<repository>
     フェッチまたはプル操作のソースである「リモート」リポジトリ。このパ
     ラメーターは、URL(以下の GIT URLS セクションを参照)またはリモートの
     名前(以下の REMOTES セクションを参照)のいずれかです。

<group>
     構成ファイル内のリモート。 <group> の値としてリポジトリーのリストを
     参照する名前。(git-config(1) を参照)。

<refspec>
     フェッチするrefと更新するローカルrefを指定します。コマンドラインに
     <refspec> がない場合、フェッチするrefは代わりに
     ‘remote.<repository>.fetch’ 変数から読み取られます。 (下記
     CONFIGURED REMOTE-TRACKING BRANCHES (*note [CRTB]::) 参照)

     <refspec> パラメータの組織は、オプションのプラス ‘+’ に続いて ソー
     スの <src> 、コロン ‘:’ 宛先refの <dst> の順です。 <dst> が空の場合
     、コロン(‘:’)は省略できます。 <src> は通常、refですが、フルスペルの
     16進オブジェクト名にすることもできます。

     <refspec> の <src> には、単純なパターン一致を示すための ‘*’ が含ま
     れている場合があります。このようなrefspecは、同じプレフィックスを持
     つ任意のrefに一致するglobのように機能します。パターン<refspec>では
     、 <src> と <dst> の両方に ‘*’ が含まれている必要があります。 ‘*’ を
     ソースから一致したコンテンツに置き換えることにより、refを宛先にマッ
     ピングします。

     refspecの前に ‘^’ が付いている場合、それはネガティブのrefspecとして
     解釈されます。このようなrefspecは、フェッチするrefや更新するローカ
     ルrefを指定するのではなく、除外するrefを指定します。 refは、少なく
     とも1つのポジティブ(通常)のrefspecと一致し、ネガティブのrefspecと一
     致しない場合、一致すると見なされます。ネガティブのrefspecは、特定の
     refが含まれないように、パターンrefspecのスコープを制限するのに役立
     ちます。ネガティブのrefspecは、それ自体がパターンrefspecである可能
     性があります。 ただし、 <src> のみを含めることができ、 <dst> を指定
     することはできません。 フルスペルの16進オブジェクト名もサポートされ
     ていません。

     ‘tag <tag>’ は、 ‘refs/tags/<tag>:refs/tags/<tag>’ と同じ意味です。
     指定されたタグまでのすべてをフェッチするように要求します。

     <src> に一致するリモートrefがフェッチされ、 <dst> が空の文字列でな
     い場合は、それに一致するローカルrefを更新しようとします。

     その更新が ‘--force’ なしで許可されるかどうかは、フェッチ先のref名
     前空間、フェッチされるオブジェクトのタイプ、および更新が
     fast-forwardであると見なされるかどうかによって異なります。一般に、
     プッシュする場合と同じルールがフェッチに適用されます。それらが何で
     あるかについては、 git-push(1)の ‘<refspec>...’ セクションを参照し
     てください。 _git fetch_ に固有の例外ルールを以下に示します。

     Gitバージョン2.20までは、 git-push(1) でプッシュする場合とは異なり
     、 ‘refs/tags/*’ の更新は、 refspec に ‘+’ がなくても(または
     ‘--force’ 指定が無くても)受け入れられます。フェッチするとき、リモー
     トからのすべてのタグ更新を強制フェッチとしていました。Gitバージョン
     2.20以降では、 ‘refs/tags/*’ を更新するためのフェッチは、プッシュす
     る場合と同じように機能します。 つまり refspecに ‘+’ が無い場合(また
     は ‘--force’ が無い場合)、更新は拒否されます。

     git-push(1) でプッシュするときとは異なり、 ‘refs/{tags,heads}/*’ 以
     外の更新は、 refspecに ‘+’ がなくても(あるいは ‘--force’ 指定が無く
     ても)受け付けられます。例えば、ツリーオブジェクトとブロブを交換した
     り、あるコミットを、祖先を持たない別のコミットと交換したりできます
     。

     git-push(1) でプッシュする場合とは異なり、これらのルールを修正する
     構成はなく、 ‘pre-receive’ フックに類似した ‘pre-fetch’ フックのよ
     うなものはありません。

     git-push(1) を使用したプッシュと同様に、更新として許可されないもの
     に関する上記のすべてのルールは、refspec先頭にオプションで ‘+’ をに
     追加する(または ‘--force’ コマンドラインオプションを使用する)ことで
     オーバーライドできます。これに対する唯一の例外は、 ‘refs/heads/*’ 名
     前空間が非コミットオブジェクトを受け入れるように強制することはない
     ということです。

          *Note*

          フェッチするリモートブランチが定期的に巻き戻されてリベースされ
          ることがわかっている場合、その新しい先端は(最後にフェッチした
          ときにリモートトラッキングブランチに保存された)以前の先端の子
          孫ではないことが予想されます。あなたは ‘+’ 記号を使用して、そ
          のようなブランチにnon-fast-forwardの更新が必要であることを指示
          します。この操作でブランチがリポジトリで使用可能になることを決
          定または宣言する方法はありません。プルするユーザーは、これがブ
          ランチの予想される使用パターンであることを知っている必要があり
          ます。

‘--stdin’
     Read refspecs, one per line, from stdin in addition to those
     provided as arguments.  The "tag <name>" format is not supported.


GIT URLS
********

一般に、URLには、トランスポートプロトコル、リモートサーバーのアドレス、
およびリポジトリへのパスに関する情報が含まれています。トランスポートプロ
トコルによっては、一部の情報が欠落している場合があります。

   Gitはsshとgitとhttpとhttpsプロトコルをサポートします(さらにftpと
ftpsをフェッチに使用できますが、これは非効率的で非推奨です。使用しないで
ください)。

   ネイティブトランスポート(つまり、 git:// URL)は認証を行わないため、セ
キュリティで保護されていないネットワークでは注意して使用する必要がありま
す。

   以下の構文を使用できます:

   • ssh://[user@]host.xz[:port]/path/to/repo.git/

   • git://host.xz[:port]/path/to/repo.git/

   • http[s]://host.xz[:port]/path/to/repo.git/

   • ftp[s]://host.xz[:port]/path/to/repo.git/

   代替のscpのような構文をsshプロトコルで使用することもできます:

   • [user@]host.xz:path/to/repo.git/

   この構文は、最初のコロン(:)の前にスラッシュがない場合にのみ認識されま
す。これは、コロンを含むローカルパスを区別するのに役立ちます。たとえば、
ローカルパス ‘foo:bar’ を、絶対パスまたは ‘./foo:bar’ として指定して、
ssh url として誤って解釈されないようにすることができます。

   sshおよびgitプロトコルは、さらに ~username 拡張をサポートします:

   • ssh://[user@]host.xz[:port]/~[user]/path/to/repo.git/

   • git://host.xz[:port]/~[user]/path/to/repo.git/

   • [user@]host.xz:/~[user]/path/to/repo.git/

   Gitでもネイティブにサポートされているローカルリポジトリの場合、以下の
構文を使用できます:

   • /path/to/repo.git/

   • file:///path/to/repo.git/

   これらの2つの構文は、前者が ‘--local’ オプションの機能を含むクローン
作成の場合を除いて、ほとんど同等です。 詳細については、 git-clone(1) を
参照してください。

   「git clone」と「git fetch」と「git pull」は、「git push」と違って適
切なバンドルファイルを受け入れます。 git-bundle(1) を参照してください。

   Gitが特定のトランスポートプロトコルを処理する方法を知らない場合、
Gitは _remote-<transport>_ リモートヘルパー(存在する場合)を使用しようと
します。リモートヘルパーを明示的に要求するには、以下の構文を使用できます
:

   • <transport>::<address>

   ここで、 <address> は、パス、サーバーとパス、または呼び出されている特
定のリモートヘルパーによって認識される任意のURLのような文字列です。詳細
については、 gitremote-helpers(7) を参照してください。

   同じ名前のリモートリポジトリが多数あり、それらに異なる形式を使用する
場合(あなたの使用するURLが機能するURLに書き換えられるように)、以下の形式
の構成セクションを作成できます:

             [url "<actual url base>"]
                     insteadOf = <other url base>

   例えば、以下のようになります:

             [url "git://git.host.xz/"]
                     insteadOf = host.xz:/path/to/
                     insteadOf = work:

   "work:repo.git" や "host.xz:/path/to/repo.git" のようなURLは、任意の
コンテキストで、"git://git.host.xz/repo.git" に書き換えられます。

   プッシュ専用のURLを書き換えたい場合は、以下の形式の構成セクションを作
成できます:

             [url "<actual url base>"]
                     pushInsteadOf = <other url base>

   例えば、以下のようになります:

             [url "ssh://example.org/"]
                     pushInsteadOf = git://example.org/

   "git://example.org/path/to/repo.git" のようなURLは、プッシュの場合は
"ssh://example.org/path/to/repo.git" に書き換えられますが、プルは引き続
き元のURLのままです。


REMOTES
*******

‘<repository>’ 引数として、URLの代わりに以下のいずれかの名前を使用できま
す:

   • Git構成ファイル(configuration file)内のリモート(remote)として、
     ‘$GIT_DIR/config’ または

   • ‘$GIT_DIR/remotes’ ディレクトリ内のファイル または

   • ‘$GIT_DIR/branches’ ディレクトリ内のファイル

   これらはすべて、gitがデフォルトで使用するrefspecをそれぞれ含んでいる
ため、コマンドラインからrefspecを省略できます。


Named remote in configuration file
==================================

あなたは、 git-remote(1) を使うか、または git-config(1) を使うか、または
‘$GIT_DIR/config’ ファイルを手動で編集して、これ以前に構成したリモートの
名前から選択できます。このリモートのURLは、リポジトリへのアクセスに使用
されます。コマンドラインでrefspecを指定しない場合、このリモートの
refspecがデフォルトで使用されます。構成ファイルのエントリは以下のように
なります:

             [remote "<name>"]
                     url = <url>
                     pushurl = <pushurl>
                     push = <refspec>
                     fetch = <refspec>

   ‘<pushurl>’ はプッシュにのみ使用されます。 これはオプションであり、デ
フォルトは ‘<url>’ です。


Named file in $GIT_DIR/remotes
==============================

あなたは、 ‘$GIT_DIR/remotes’ でファイル名を指定できます。このファイルの
URLは、リポジトリへのアクセスに使用されます。コマンドラインでrefspecを指
定しない場合、このファイルのrefspecがデフォルトとして使用されます。この
ファイルの形式は以下のとおりです:

             URL: one of the above URL format
             Push: <refspec>
             Pull: <refspec>

   ‘Push:’ 行は _git push_ で使用され、 ‘Pull:’ 行は _git pull_ と _git
fetch_ で使用されます。追加のブランチマッピングのために、複数の ‘Push:’
および ‘Pull:’ 行を指定できます。


Named file in $GIT_DIR/branches
===============================

‘$GIT_DIR/branches’ でファイル名を指定できます。このファイルのURLは、リ
ポジトリへのアクセスに使用されます。 このファイルの形式は以下のとおりで
す:

             <url>#<head>

   ‘<url>’ は必須です。 ‘#<head>’ はオプションです。

   コマンドラインで指定しない場合、操作に応じて、gitは以下のrefspecのい
ずれかを使用します。 ‘<branch>’ は ‘$GIT_DIR/branchs’ 内のこのファイルの
名前であり、 ‘<head>`はデフォルトで `master’ になります。

   git fetch は以下を使用します:

             refs/heads/<head>:refs/heads/<branch>

   git push は以下を使用します:

             HEAD:refs/heads/<head>


CONFIGURED REMOTE-TRACKING BRANCHES
***********************************

You often interact with the same remote repository by regularly and
repeatedly fetching from it.  In order to keep track of the progress of
such a remote repository, ‘git fetch’ allows you to configure
‘remote.<repository>.fetch’ configuration variables.

   Typically such a variable may look like this:

     [remote "origin"]
             fetch = +refs/heads/*:refs/remotes/origin/*

   This configuration is used in two ways:

   • When ‘git fetch’ is run without specifying what branches and/or
     tags to fetch on the command line, e.g.  ‘git fetch origin’ or ‘git
     fetch’, ‘remote.<repository>.fetch’ values are used as the
     refspecs—they specify which refs to fetch and which local refs to
     update.  The example above will fetch all branches that exist in
     the ‘origin’ (i.e.  any ref that matches the left-hand side of the
     value, ‘refs/heads/*’) and update the corresponding remote-tracking
     branches in the ‘refs/remotes/origin/*’ hierarchy.

   • When ‘git fetch’ is run with explicit branches and/or tags to fetch
     on the command line, e.g.  ‘git fetch origin master’, the
     <refspec>s given on the command line determine what are to be
     fetched (e.g.  ‘master’ in the example, which is a short-hand for
     ‘master:’, which in turn means "fetch the _master_ branch but I do
     not explicitly say what remote-tracking branch to update with it
     from the command line"), and the example command will fetch _only_
     the _master_ branch.  The ‘remote.<repository>.fetch’ values
     determine which remote-tracking branch, if any, is updated.  When
     used in this way, the ‘remote.<repository>.fetch’ values do not
     have any effect in deciding _what_ gets fetched (i.e.  the values
     are not used as refspecs when the command-line lists refspecs);
     they are only used to decide _where_ the refs that are fetched are
     stored by acting as a mapping.

   The latter use of the ‘remote.<repository>.fetch’ values can be
overridden by giving the ‘--refmap=<refspec>’ parameter(s) on the
command line.


PRUNING
*******

Git has a default disposition of keeping data unless it’s explicitly
thrown away; this extends to holding onto local references to branches
on remotes that have themselves deleted those branches.

   If left to accumulate, these stale references might make performance
worse on big and busy repos that have a lot of branch churn, and e.g.
make the output of commands like ‘git branch -a --contains <commit>’
needlessly verbose, as well as impacting anything else that’ll work with
the complete set of known references.

   These remote-tracking references can be deleted as a one-off with
either of:

     # While fetching
     $ git fetch --prune <name>

     # Only prune, don't fetch
     $ git remote prune <name>

   To prune references as part of your normal workflow without needing
to remember to run that, set ‘fetch.prune’ globally, or
‘remote.<name>.prune’ per-remote in the config.  See git-config(1).

   Here’s where things get tricky and more specific.  The pruning
feature doesn’t actually care about branches, instead it’ll prune local
←→ remote-references as a function of the refspec of the remote (see
‘<refspec>’ and CONFIGURED REMOTE-TRACKING BRANCHES (*note [CRTB]::)
above).

   Therefore if the refspec for the remote includes e.g.
‘refs/tags/*:refs/tags/*’, or you manually run e.g.  ‘git fetch --prune
<name> "refs/tags/*:refs/tags/*"’ it won’t be stale remote tracking
branches that are deleted, but any local tag that doesn’t exist on the
remote.

   This might not be what you expect, i.e.  you want to prune remote
‘<name>’, but also explicitly fetch tags from it, so when you fetch from
it you delete all your local tags, most of which may not have come from
the ‘<name>’ remote in the first place.

   So be careful when using this with a refspec like
‘refs/tags/*:refs/tags/*’, or any other refspec which might map
references from multiple remotes to the same local namespace.

   Since keeping up-to-date with both branches and tags on the remote is
a common use-case the ‘--prune-tags’ option can be supplied along with
‘--prune’ to prune local tags that don’t exist on the remote, and
force-update those tags that differ.  Tag pruning can also be enabled
with ‘fetch.pruneTags’ or ‘remote.<name>.pruneTags’ in the config.  See
git-config(1).

   The ‘--prune-tags’ option is equivalent to having
‘refs/tags/*:refs/tags/*’ declared in the refspecs of the remote.  This
can lead to some seemingly strange interactions:

     # These both fetch tags
     $ git fetch --no-tags origin 'refs/tags/*:refs/tags/*'
     $ git fetch --no-tags --prune-tags origin

   The reason it doesn’t error out when provided without ‘--prune’ or
its config versions is for flexibility of the configured versions, and
to maintain a 1=1 mapping between what the command line flags do, and
what the configuration versions do.

   It’s reasonable to e.g.  configure ‘fetch.pruneTags=true’ in
‘~/.gitconfig’ to have tags pruned whenever ‘git fetch --prune’ is run,
without making every invocation of ‘git fetch’ without ‘--prune’ an
error.

   Pruning tags with ‘--prune-tags’ also works when fetching a URL
instead of a named remote.  These will all prune tags not found on
origin:

     $ git fetch origin --prune --prune-tags
     $ git fetch origin --prune 'refs/tags/*:refs/tags/*'
     $ git fetch <url of origin> --prune --prune-tags
     $ git fetch <url of origin> --prune 'refs/tags/*:refs/tags/*'


OUTPUT
******

The output of "git fetch" depends on the transport method used; this
section describes the output when fetching over the Git protocol (either
locally or via ssh) and Smart HTTP protocol.

   The status of the fetch is output in tabular form, with each line
representing the status of a single ref.  Each line is of the form:

      <flag> <summary> <from> -> <to> [<reason>]

   The status of up-to-date refs is shown only if the –verbose option is
used.

   In compact output mode, specified with configuration variable
fetch.output, if either entire ‘<from>’ or ‘<to>’ is found in the other
string, it will be substituted with ‘*’ in the other string.  For
example, ‘master -> origin/master’ becomes ‘master -> origin/*’.

flag
     A single character indicating the status of the ref:

     (space)
          for a successfully fetched fast-forward;

     ‘+’
          for a successful forced update;

     ‘-’
          for a successfully pruned ref;

     ‘t’
          for a successful tag update;

     ‘*’
          for a successfully fetched new ref;

     ‘!’
          for a ref that was rejected or failed to update; and

     ‘=’
          for a ref that was up to date and did not need fetching.

summary
     For a successfully fetched ref, the summary shows the old and new
     values of the ref in a form suitable for using as an argument to
     ‘git log’ (this is ‘<old>..<new>’ in most cases, and
     ‘<old>...<new>’ for forced non-fast-forward updates).

from
     The name of the remote ref being fetched from, minus its
     ‘refs/<type>/’ prefix.  In the case of deletion, the name of the
     remote ref is "(none)".

to
     The name of the local ref being updated, minus its ‘refs/<type>/’
     prefix.

reason
     A human-readable explanation.  In the case of successfully fetched
     refs, no explanation is needed.  For a failed ref, the reason for
     failure is described.


EXAMPLES
********

   • Update the remote-tracking branches:

          $ git fetch origin

     The above command copies all branches from the remote refs/heads/
     namespace and stores them to the local refs/remotes/origin/
     namespace, unless the branch.<name>.fetch option is used to specify
     a non-default refspec.

   • Using refspecs explicitly:

          $ git fetch origin +seen:seen maint:tmp

     This updates (or creates, as necessary) branches ‘seen’ and ‘tmp’
     in the local repository by fetching from the branches
     (respectively) ‘seen’ and ‘maint’ from the remote repository.

     The ‘seen’ branch will be updated even if it does not fast-forward,
     because it is prefixed with a plus sign; ‘tmp’ will not be.

   • Peek at a remote’s branch, without configuring the remote in your
     local repository:

          $ git fetch git://git.kernel.org/pub/scm/git/git.git maint
          $ git log FETCH_HEAD

     The first command fetches the ‘maint’ branch from the repository at
     ‘git://git.kernel.org/pub/scm/git/git.git’ and the second command
     uses ‘FETCH_HEAD’ to examine the branch with git-log(1).  The
     fetched objects will eventually be removed by git’s built-in
     housekeeping (see git-gc(1)).


SECURITY
********

フェッチおよびプッシュプロトコルは、共有することを意図していない一方の側
が他方のリポジトリからデータを盗むのを防ぐようには設計されていません。悪
意のある者から保護する必要のあるプライベートデータがある場合、最善のオプ
ションはそれを別のリポジトリに保存することです。これは、クライアントとサ
ーバーの両方に適用されます。特に、サーバー上の名前空間は、読み取りアクセ
ス制御には効果的ではありません。リポジトリ全体への読み取りアクセスで信頼
できるクライアントにのみ、名前空間への読み取りアクセスを許可する必要があ
ります。

   既知の攻撃ベクトル(attack vectors)は以下のとおりです:

  1. 被害者は、明示的に共有することを意図していないオブジェクトのIDをア
     ドバタイズする "have" 行を送信しますが、他にもIDを持っている者が居
     る場合は、転送を最適化するために使用できます。攻撃者はオブジェクト
     ID Xを選択して盗み、refをXに送信しますが、被害者はすでにXのコンテン
     ツを持っているため、Xのコンテンツを送信する必要はありません。 これ
     で、被害者は攻撃者がXを持っていると信じ、Xのコンテンツを後で攻撃者
     に送り返します。 (この攻撃は、クライアントがアクセスできる名前空間
     にXへのrefを作成してフェッチすることにより、クライアントがサーバー
     上で実行するのが最も簡単です。サーバーがクライアント上で実行する最
     も可能性の高い方法は、Xをパブリックブランチにマージし、ユーザーがこ
     のブランチで追加の作業を行い、マージに気付かずにサーバーにプッシュ
     バックすることを期待します。)

  2. #1 と同様に、攻撃者は盗むオブジェクトID Xを選択します。被害者は、攻
     撃者がすでに持っているオブジェクトYを送信し、攻撃者はYではなくXを持
     っていると誤って主張するため、被害者はYをXに対するデルタとして送信
     します。デルタは、攻撃者にYに類似したXの領域を明らかにします。


BUGS
****

Using –recurse-submodules can only fetch new commits in already checked
out submodules right now.  When e.g.  upstream added a new submodule in
the just fetched commits of the superproject the submodule itself cannot
be fetched, making it impossible to check out that submodule later
without having to do a fetch again.  This is expected to be fixed in a
future Git version.


SEE ALSO
********

git-pull(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-filter-branch,  Up: Top

Name
****

git-filter-branch — Rewrite branches


Synopsis
********

     git filter-branch [–setup <command>] [–subdirectory-filter <directory>]
             [–env-filter <command>] [–tree-filter <command>]
             [–index-filter <command>] [–parent-filter <command>]
             [–msg-filter <command>] [–commit-filter <command>]
             [–tag-name-filter <command>] [–prune-empty]
             [–original <namespace>] [-d <directory>] [-f | –force]
             [–state-branch <branch>] [–] [<rev-list options>…]


WARNING
*******

_git filter-branch_ has a plethora of pitfalls that can produce
non-obvious manglings of the intended history rewrite (and can leave you
with little time to investigate such problems since it has such abysmal
performance).  These safety and performance issues cannot be backward
compatibly fixed and as such, its use is not recommended.  Please use an
alternative history filtering tool such as git filter-repo
(https://github.com/newren/git-filter-repo/).  If you still need to use
_git filter-branch_, please carefully read *note SAFETY:: (and *note
PERFORMANCE::) to learn about the land mines of filter-branch, and then
vigilantly avoid as many of the hazards listed there as reasonably
possible.


DESCRIPTION
***********

Lets you rewrite Git revision history by rewriting the branches
mentioned in the <rev-list options>, applying custom filters on each
revision.  Those filters can modify each tree (e.g.  removing a file or
running a perl rewrite on all files) or information about each commit.
Otherwise, all information (including original commit times or merge
information) will be preserved.

   The command will only rewrite the _positive_ refs mentioned in the
command line (e.g.  if you pass _a..b_, only _b_ will be rewritten).  If
you specify no filters, the commits will be recommitted without any
changes, which would normally have no effect.  Nevertheless, this may be
useful in the future for compensating for some Git bugs or such,
therefore such a usage is permitted.

   *NOTE*: This command honors ‘.git/info/grafts’ file and refs in the
‘refs/replace/’ namespace.  If you have any grafts or replacement refs
defined, running this command will make them permanent.

   *WARNING*! The rewritten history will have different object names for
all the objects and will not converge with the original branch.  You
will not be able to easily push and distribute the rewritten branch on
top of the original branch.  Please do not use this command if you do
not know the full implications, and avoid using it anyway, if a simple
single commit would suffice to fix your problem.  (See the "RECOVERING
FROM UPSTREAM REBASE" section in git-rebase(1) for further information
about rewriting published history.)

   Always verify that the rewritten version is correct: The original
refs, if different from the rewritten ones, will be stored in the
namespace _refs/original/_.

   Note that since this operation is very I/O expensive, it might be a
good idea to redirect the temporary directory off-disk with the ‘-d’
option, e.g.  on tmpfs.  Reportedly the speedup is very noticeable.


Filters
=======

The filters are applied in the order as listed below.  The <command>
argument is always evaluated in the shell context using the _eval_
command (with the notable exception of the commit filter, for technical
reasons).  Prior to that, the ‘$GIT_COMMIT’ environment variable will be
set to contain the id of the commit being rewritten.  Also,
GIT_AUTHOR_NAME, GIT_AUTHOR_EMAIL, GIT_AUTHOR_DATE, GIT_COMMITTER_NAME,
GIT_COMMITTER_EMAIL, and GIT_COMMITTER_DATE are taken from the current
commit and exported to the environment, in order to affect the author
and committer identities of the replacement commit created by
git-commit-tree(1) after the filters have run.

   If any evaluation of <command> returns a non-zero exit status, the
whole operation will be aborted.

   A _map_ function is available that takes an "original sha1 id"
argument and outputs a "rewritten sha1 id" if the commit has been
already rewritten, and "original sha1 id" otherwise; the _map_ function
can return several ids on separate lines if your commit filter emitted
multiple commits.


OPTIONS
*******

‘--setup <command>’
     This is not a real filter executed for each commit but a one time
     setup just before the loop.  Therefore no commit-specific variables
     are defined yet.  Functions or variables defined here can be used
     or modified in the following filter steps except the commit filter,
     for technical reasons.

‘--subdirectory-filter <directory>’
     Only look at the history which touches the given subdirectory.  The
     result will contain that directory (and only that) as its project
     root.  Implies *note Remap to ancestor::.

‘--env-filter <command>’
     This filter may be used if you only need to modify the environment
     in which the commit will be performed.  Specifically, you might
     want to rewrite the author/committer name/email/time environment
     variables (see git-commit-tree(1) for details).

‘--tree-filter <command>’
     This is the filter for rewriting the tree and its contents.  The
     argument is evaluated in shell with the working directory set to
     the root of the checked out tree.  The new tree is then used as-is
     (new files are auto-added, disappeared files are auto-removed -
     neither .gitignore files nor any other ignore rules *HAVE ANY
     EFFECT*!).

‘--index-filter <command>’
     This is the filter for rewriting the index.  It is similar to the
     tree filter but does not check out the tree, which makes it much
     faster.  Frequently used with ‘git rm --cached --ignore-unmatch
     ...’, see EXAMPLES below.  For hairy cases, see
     git-update-index(1).

‘--parent-filter <command>’
     This is the filter for rewriting the commit’s parent list.  It will
     receive the parent string on stdin and shall output the new parent
     string on stdout.  The parent string is in the format described in
     git-commit-tree(1): empty for the initial commit, "-p parent" for a
     normal commit and "-p parent1 -p parent2 -p parent3 …" for a merge
     commit.

‘--msg-filter <command>’
     This is the filter for rewriting the commit messages.  The argument
     is evaluated in the shell with the original commit message on
     standard input; its standard output is used as the new commit
     message.

‘--commit-filter <command>’
     This is the filter for performing the commit.  If this filter is
     specified, it will be called instead of the _git commit-tree_
     command, with arguments of the form "<TREE_ID> [(-p
     <PARENT_COMMIT_ID>)…]" and the log message on stdin.  The commit id
     is expected on stdout.

     As a special extension, the commit filter may emit multiple commit
     ids; in that case, the rewritten children of the original commit
     will have all of them as parents.

     You can use the _map_ convenience function in this filter, and
     other convenience functions, too.  For example, calling
     _skip_commit "$@"_ will leave out the current commit (but not its
     changes!  If you want that, use _git rebase_ instead).

     You can also use the ‘git_commit_non_empty_tree "$@"’ instead of
     ‘git commit-tree "$@"’ if you don’t wish to keep commits with a
     single parent and that makes no change to the tree.

‘--tag-name-filter <command>’
     This is the filter for rewriting tag names.  When passed, it will
     be called for every tag ref that points to a rewritten object (or
     to a tag object which points to a rewritten object).  The original
     tag name is passed via standard input, and the new tag name is
     expected on standard output.

     The original tags are not deleted, but can be overwritten; use
     "–tag-name-filter cat" to simply update the tags.  In this case, be
     very careful and make sure you have the old tags backed up in case
     the conversion has run afoul.

     Nearly proper rewriting of tag objects is supported.  If the tag
     has a message attached, a new tag object will be created with the
     same message, author, and timestamp.  If the tag has a signature
     attached, the signature will be stripped.  It is by definition
     impossible to preserve signatures.  The reason this is "nearly"
     proper, is because ideally if the tag did not change (points to the
     same object, has the same name, etc.)  it should retain any
     signature.  That is not the case, signatures will always be
     removed, buyer beware.  There is also no support for changing the
     author or timestamp (or the tag message for that matter).  Tags
     which point to other tags will be rewritten to point to the
     underlying commit.

‘--prune-empty’
     Some filters will generate empty commits that leave the tree
     untouched.  This option instructs git-filter-branch to remove such
     commits if they have exactly one or zero non-pruned parents; merge
     commits will therefore remain intact.  This option cannot be used
     together with ‘--commit-filter’, though the same effect can be
     achieved by using the provided ‘git_commit_non_empty_tree’ function
     in a commit filter.

‘--original <namespace>’
     Use this option to set the namespace where the original commits
     will be stored.  The default value is _refs/original_.

‘-d <directory>’
     Use this option to set the path to the temporary directory used for
     rewriting.  When applying a tree filter, the command needs to
     temporarily check out the tree to some directory, which may consume
     considerable space in case of large projects.  By default it does
     this in the ‘.git-rewrite/’ directory but you can override that
     choice by this parameter.

‘-f’
‘--force’
     _git filter-branch_ refuses to start with an existing temporary
     directory or when there are already refs starting with
     _refs/original/_, unless forced.

‘--state-branch <branch>’
     This option will cause the mapping from old to new objects to be
     loaded from named branch upon startup and saved as a new commit to
     that branch upon exit, enabling incremental of large trees.  If
     _<branch>_ does not exist it will be created.

<rev-list options>…
     Arguments for _git rev-list_.  All positive refs included by these
     options are rewritten.  You may also specify options such as
     ‘--all’, but you must use ‘--’ to separate them from the _git
     filter-branch_ options.  Implies *note Remap to ancestor::.


Remap to ancestor
=================

By using git-rev-list(1) arguments, e.g., path limiters, you can limit
the set of revisions which get rewritten.  However, positive refs on the
command line are distinguished: we don’t let them be excluded by such
limiters.  For this purpose, they are instead rewritten to point at the
nearest ancestor that was not excluded.


EXIT STATUS
***********

On success, the exit status is ‘0’.  If the filter can’t find any
commits to rewrite, the exit status is ‘2’.  On any other error, the
exit status may be any other non-zero value.


EXAMPLES
********

Suppose you want to remove a file (containing confidential information
or copyright violation) from all commits:

     git filter-branch --tree-filter 'rm filename' HEAD

   However, if the file is absent from the tree of some commit, a simple
‘rm filename’ will fail for that tree and commit.  Thus you may instead
want to use ‘rm -f filename’ as the script.

   Using ‘--index-filter’ with _git rm_ yields a significantly faster
version.  Like with using ‘rm filename’, ‘git rm --cached filename’ will
fail if the file is absent from the tree of a commit.  If you want to
"completely forget" a file, it does not matter when it entered history,
so we also add ‘--ignore-unmatch’:

     git filter-branch --index-filter 'git rm --cached --ignore-unmatch filename' HEAD

   Now, you will get the rewritten history saved in HEAD.

   To rewrite the repository to look as if ‘foodir/’ had been its
project root, and discard all other history:

     git filter-branch --subdirectory-filter foodir -- --all

   Thus you can, e.g., turn a library subdirectory into a repository of
its own.  Note the ‘--’ that separates _filter-branch_ options from
revision options, and the ‘--all’ to rewrite all branches and tags.

   To set a commit (which typically is at the tip of another history) to
be the parent of the current initial commit, in order to paste the other
history behind the current history:

     git filter-branch --parent-filter 'sed "s/^\$/-p <graft-id>/"' HEAD

   (if the parent string is empty - which happens when we are dealing
with the initial commit - add graftcommit as a parent).  Note that this
assumes history with a single root (that is, no merge without common
ancestors happened).  If this is not the case, use:

     git filter-branch --parent-filter \
             'test $GIT_COMMIT = <commit-id> && echo "-p <graft-id>" || cat' HEAD

   or even simpler:

     git replace --graft $commit-id $graft-id
     git filter-branch $graft-id..HEAD

   To remove commits authored by "Darl McBribe" from the history:

     git filter-branch --commit-filter '
             if [ "$GIT_AUTHOR_NAME" = "Darl McBribe" ];
             then
                     skip_commit "$@";
             else
                     git commit-tree "$@";
             fi' HEAD

   The function _skip_commit_ is defined as follows:

     skip_commit()
     {
             shift;
             while [ -n "$1" ];
             do
                     shift;
                     map "$1";
                     shift;
             done;
     }

   The shift magic first throws away the tree id and then the -p
parameters.  Note that this handles merges properly!  In case Darl
committed a merge between P1 and P2, it will be propagated properly and
all children of the merge will become merge commits with P1,P2 as their
parents instead of the merge commit.

   *NOTE* the changes introduced by the commits, and which are not
reverted by subsequent commits, will still be in the rewritten branch.
If you want to throw out _changes_ together with the commits, you should
use the interactive mode of _git rebase_.

   You can rewrite the commit log messages using ‘--msg-filter’.  For
example, _git svn-id_ strings in a repository created by _git svn_ can
be removed this way:

     git filter-branch --msg-filter '
             sed -e "/^git-svn-id:/d"
     '

   If you need to add _Acked-by_ lines to, say, the last 10 commits
(none of which is a merge), use this command:

     git filter-branch --msg-filter '
             cat &&
             echo "Acked-by: Bugs Bunny <bunny@bugzilla.org>"
     ' HEAD~10..HEAD

   The ‘--env-filter’ option can be used to modify committer and/or
author identity.  For example, if you found out that your commits have
the wrong identity due to a misconfigured user.email, you can make a
correction, before publishing the project, like this:

     git filter-branch --env-filter '
             if test "$GIT_AUTHOR_EMAIL" = "root@localhost"
             then
                     GIT_AUTHOR_EMAIL=john@example.com
             fi
             if test "$GIT_COMMITTER_EMAIL" = "root@localhost"
             then
                     GIT_COMMITTER_EMAIL=john@example.com
             fi
     ' -- --all

   To restrict rewriting to only part of the history, specify a revision
range in addition to the new branch name.  The new branch name will
point to the top-most revision that a _git rev-list_ of this range will
print.

   Consider this history:

          D--E--F--G--H
         /     /
     A--B-----C

   To rewrite only commits D,E,F,G,H, but leave A, B and C alone, use:

     git filter-branch ... C..H

   To rewrite commits E,F,G,H, use one of these:

     git filter-branch ... C..H --not D
     git filter-branch ... D..H --not C

   To move the whole tree into a subdirectory, or remove it from there:

     git filter-branch --index-filter \
             'git ls-files -s | sed "s-\t\"*-&newsubdir/-" |
                     GIT_INDEX_FILE=$GIT_INDEX_FILE.new \
                             git update-index --index-info &&
              mv "$GIT_INDEX_FILE.new" "$GIT_INDEX_FILE"' HEAD


CHECKLIST FOR SHRINKING A REPOSITORY
************************************

git-filter-branch can be used to get rid of a subset of files, usually
with some combination of ‘--index-filter’ and ‘--subdirectory-filter’.
People expect the resulting repository to be smaller than the original,
but you need a few more steps to actually make it smaller, because Git
tries hard not to lose your objects until you tell it to.  First make
sure that:

   • You really removed all variants of a filename, if a blob was moved
     over its lifetime.  ‘git log --name-only --follow --all --
     filename’ can help you find renames.

   • You really filtered all refs: use ‘--tag-name-filter cat -- --all’
     when calling git-filter-branch.

   Then there are two ways to get a smaller repository.  A safer way is
to clone, that keeps your original intact.

   • Clone it with ‘git clone file:///path/to/repo’.  The clone will not
     have the removed objects.  See git-clone(1).  (Note that cloning
     with a plain path just hardlinks everything!)

   If you really don’t want to clone it, for whatever reasons, check the
following points instead (in this order).  This is a very destructive
approach, so *make a backup* or go back to cloning it.  You have been
warned.

   • Remove the original refs backed up by git-filter-branch: say ‘git
     for-each-ref --format="%(refname)" refs/original/ | xargs -n 1 git
     update-ref -d’.

   • Expire all reflogs with ‘git reflog expire --expire=now --all’.

   • Garbage collect all unreferenced objects with ‘git gc --prune=now’
     (or if your git-gc is not new enough to support arguments to
     ‘--prune’, use ‘git repack -ad; git prune’ instead).


PERFORMANCE
***********

The performance of git-filter-branch is glacially slow; its design makes
it impossible for a backward-compatible implementation to ever be fast:

   • In editing files, git-filter-branch by design checks out each and
     every commit as it existed in the original repo.  If your repo has
     ‘10^5’ files and ‘10^5’ commits, but each commit only modifies five
     files, then git-filter-branch will make you do ‘10^10’
     modifications, despite only having (at most) ‘5*10^5’ unique blobs.

   • If you try and cheat and try to make git-filter-branch only work on
     files modified in a commit, then two things happen

        • you run into problems with deletions whenever the user is
          simply trying to rename files (because attempting to delete
          files that don’t exist looks like a no-op; it takes some
          chicanery to remap deletes across file renames when the
          renames happen via arbitrary user-provided shell)

        • even if you succeed at the map-deletes-for-renames chicanery,
          you still technically violate backward compatibility because
          users are allowed to filter files in ways that depend upon
          topology of commits instead of filtering solely based on file
          contents or names (though this has not been observed in the
          wild).

   • Even if you don’t need to edit files but only want to e.g.  rename
     or remove some and thus can avoid checking out each file (i.e.  you
     can use –index-filter), you still are passing shell snippets for
     your filters.  This means that for every commit, you have to have a
     prepared git repo where those filters can be run.  That’s a
     significant setup.

   • Further, several additional files are created or updated per commit
     by git-filter-branch.  Some of these are for supporting the
     convenience functions provided by git-filter-branch (such as
     map()), while others are for keeping track of internal state (but
     could have also been accessed by user filters; one of
     git-filter-branch’s regression tests does so).  This essentially
     amounts to using the filesystem as an IPC mechanism between
     git-filter-branch and the user-provided filters.  Disks tend to be
     a slow IPC mechanism, and writing these files also effectively
     represents a forced synchronization point between separate
     processes that we hit with every commit.

   • The user-provided shell commands will likely involve a pipeline of
     commands, resulting in the creation of many processes per commit.
     Creating and running another process takes a widely varying amount
     of time between operating systems, but on any platform it is very
     slow relative to invoking a function.

   • git-filter-branch itself is written in shell, which is kind of
     slow.  This is the one performance issue that could be
     backward-compatibly fixed, but compared to the above problems that
     are intrinsic to the design of git-filter-branch, the language of
     the tool itself is a relatively minor issue.

        • Side note: Unfortunately, people tend to fixate on the
          written-in-shell aspect and periodically ask if
          git-filter-branch could be rewritten in another language to
          fix the performance issues.  Not only does that ignore the
          bigger intrinsic problems with the design, it’d help less than
          you’d expect: if git-filter-branch itself were not shell, then
          the convenience functions (map(), skip_commit(), etc) and the
          ‘--setup’ argument could no longer be executed once at the
          beginning of the program but would instead need to be
          prepended to every user filter (and thus re-executed with
          every commit).

   The git filter-repo (https://github.com/newren/git-filter-repo/) tool
is an alternative to git-filter-branch which does not suffer from these
performance problems or the safety problems (mentioned below).  For
those with existing tooling which relies upon git-filter-branch, _git
filter-repo_ also provides filter-lamely
(https://github.com/newren/git-filter-repo/blob/master/contrib/filter-repo-demos/filter-lamely),
a drop-in git-filter-branch replacement (with a few caveats).  While
filter-lamely suffers from all the same safety issues as
git-filter-branch, it at least ameliorates the performance issues a
little.


SAFETY
******

git-filter-branch is riddled with gotchas resulting in various ways to
easily corrupt repos or end up with a mess worse than what you started
with:

   • Someone can have a set of "working and tested filters" which they
     document or provide to a coworker, who then runs them on a
     different OS where the same commands are not working/tested (some
     examples in the git-filter-branch manpage are also affected by
     this).  BSD vs.  GNU userland differences can really bite.  If
     lucky, error messages are spewed.  But just as likely, the commands
     either don’t do the filtering requested, or silently corrupt by
     making some unwanted change.  The unwanted change may only affect a
     few commits, so it’s not necessarily obvious either.  (The fact
     that problems won’t necessarily be obvious means they are likely to
     go unnoticed until the rewritten history is in use for quite a
     while, at which point it’s really hard to justify another flag-day
     for another rewrite.)

   • Filenames with spaces are often mishandled by shell snippets since
     they cause problems for shell pipelines.  Not everyone is familiar
     with find -print0, xargs -0, git-ls-files -z, etc.  Even people who
     are familiar with these may assume such flags are not relevant
     because someone else renamed any such files in their repo back
     before the person doing the filtering joined the project.  And
     often, even those familiar with handling arguments with spaces may
     not do so just because they aren’t in the mindset of thinking about
     everything that could possibly go wrong.

   • Non-ascii filenames can be silently removed despite being in a
     desired directory.  Keeping only wanted paths is often done using
     pipelines like ‘git ls-files | grep -v ^WANTED_DIR/ | xargs git
     rm’.  ls-files will only quote filenames if needed, so folks may
     not notice that one of the files didn’t match the regex (at least
     not until it’s much too late).  Yes, someone who knows about
     core.quotePath can avoid this (unless they have other special
     characters like \t, \n, or "), and people who use ls-files -z with
     something other than grep can avoid this, but that doesn’t mean
     they will.

   • Similarly, when moving files around, one can find that filenames
     with non-ascii or special characters end up in a different
     directory, one that includes a double quote character.  (This is
     technically the same issue as above with quoting, but perhaps an
     interesting different way that it can and has manifested as a
     problem.)

   • It’s far too easy to accidentally mix up old and new history.  It’s
     still possible with any tool, but git-filter-branch almost invites
     it.  If lucky, the only downside is users getting frustrated that
     they don’t know how to shrink their repo and remove the old stuff.
     If unlucky, they merge old and new history and end up with multiple
     "copies" of each commit, some of which have unwanted or sensitive
     files and others which don’t.  This comes about in multiple
     different ways:

        • the default to only doing a partial history rewrite (_–all_ is
          not the default and few examples show it)

        • the fact that there’s no automatic post-run cleanup

        • the fact that –tag-name-filter (when used to rename tags)
          doesn’t remove the old tags but just adds new ones with the
          new name

        • the fact that little educational information is provided to
          inform users of the ramifications of a rewrite and how to
          avoid mixing old and new history.  For example, this man page
          discusses how users need to understand that they need to
          rebase their changes for all their branches on top of new
          history (or delete and reclone), but that’s only one of
          multiple concerns to consider.  See the "DISCUSSION" section
          of the git filter-repo manual page for more details.

   • Annotated tags can be accidentally converted to lightweight tags,
     due to either of two issues:

        • Someone can do a history rewrite, realize they messed up,
          restore from the backups in refs/original/, and then redo
          their git-filter-branch command.  (The backup in
          refs/original/ is not a real backup; it dereferences tags
          first.)

        • Running git-filter-branch with either –tags or –all in your
          <rev-list options>.  In order to retain annotated tags as
          annotated, you must use –tag-name-filter (and must not have
          restored from refs/original/ in a previously botched rewrite).

   • Any commit messages that specify an encoding will become corrupted
     by the rewrite; git-filter-branch ignores the encoding, takes the
     original bytes, and feeds it to commit-tree without telling it the
     proper encoding.  (This happens whether or not –msg-filter is
     used.)

   • Commit messages (even if they are all UTF-8) by default become
     corrupted due to not being updated — any references to other commit
     hashes in commit messages will now refer to no-longer-extant
     commits.

   • There are no facilities for helping users find what unwanted crud
     they should delete, which means they are much more likely to have
     incomplete or partial cleanups that sometimes result in confusion
     and people wasting time trying to understand.  (For example, folks
     tend to just look for big files to delete instead of big
     directories or extensions, and once they do so, then sometime later
     folks using the new repository who are going through history will
     notice a build artifact directory that has some files but not
     others, or a cache of dependencies (node_modules or similar) which
     couldn’t have ever been functional since it’s missing some files.)

   • If –prune-empty isn’t specified, then the filtering process can
     create hoards of confusing empty commits

   • If –prune-empty is specified, then intentionally placed empty
     commits from before the filtering operation are also pruned instead
     of just pruning commits that became empty due to filtering rules.

   • If –prune-empty is specified, sometimes empty commits are missed
     and left around anyway (a somewhat rare bug, but it happens…)

   • A minor issue, but users who have a goal to update all names and
     emails in a repository may be led to –env-filter which will only
     update authors and committers, missing taggers.

   • If the user provides a –tag-name-filter that maps multiple tags to
     the same name, no warning or error is provided; git-filter-branch
     simply overwrites each tag in some undocumented pre-defined order
     resulting in only one tag at the end.  (A git-filter-branch
     regression test requires this surprising behavior.)

   Also, the poor performance of git-filter-branch often leads to safety
issues:

   • Coming up with the correct shell snippet to do the filtering you
     want is sometimes difficult unless you’re just doing a trivial
     modification such as deleting a couple files.  Unfortunately,
     people often learn if the snippet is right or wrong by trying it
     out, but the rightness or wrongness can vary depending on special
     circumstances (spaces in filenames, non-ascii filenames, funny
     author names or emails, invalid timezones, presence of grafts or
     replace objects, etc.), meaning they may have to wait a long time,
     hit an error, then restart.  The performance of git-filter-branch
     is so bad that this cycle is painful, reducing the time available
     to carefully re-check (to say nothing about what it does to the
     patience of the person doing the rewrite even if they do
     technically have more time available).  This problem is extra
     compounded because errors from broken filters may not be shown for
     a long time and/or get lost in a sea of output.  Even worse, broken
     filters often just result in silent incorrect rewrites.

   • To top it all off, even when users finally find working commands,
     they naturally want to share them.  But they may be unaware that
     their repo didn’t have some special cases that someone else’s does.
     So, when someone else with a different repository runs the same
     commands, they get hit by the problems above.  Or, the user just
     runs commands that really were vetted for special cases, but they
     run it on a different OS where it doesn’t work, as noted above.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-fmt-merge-msg,  Up: Top

Name
****

git-fmt-merge-msg — git-fmt-merge-msg-マージコミットメッセージを生成しま
す


Synopsis
********

     git fmt-merge-msg [-m <message>] [–log[=<n>] | –no-log]
     git fmt-merge-msg [-m <message>] [–log[=<n>] | –no-log] -F <file>


DESCRIPTION
***********

標準入力からマージされたオブジェクトのリストを取得し、マージコミットに使
用される適切なコミットメッセージを生成します。通常は、 _git merge_ の
_<merge-message>_ 引数として渡されます。

   このコマンドは主に、 _git merge_ を自動的に呼び出すスクリプトによる内
部使用を目的としています。


OPTIONS
*******

‘--log[=<n>]’
     ブランチ名に加えて、マージされている実際のコミットからの1行説明をロ
     グメッセージに入力します。各マージ親からの最大で <n> のコミットが使
     用されます(<n> が省略されている場合は20)。これは、 ‘merge.log’ 構成
     変数をオーバーライドします。

‘--no-log’
     マージされる実際のコミットからの1行説明をリストしません。

‘--[no-]summary’
     ‘--log’ や ‘--no-log’ の同義語。これは非推奨であり、将来削除される
     予定です。

‘-m <message>’
‘--message <message>’
     ログメッセージの最初の行に、ブランチ名の代わりに <message> を使用し
     ます。 ‘--log’ で使用します。

‘-F <file>’
‘--file <file>’
     標準入力の代わりに <file> からマージされたオブジェクトのリストを取
     得します。


CONFIGURATION
*************

merge.branchdesc
     ブランチ名に加えて、それらに関連付けられたブランチの説明テキストを
     ログメッセージに入力します。デフォルトはfalseです。

merge.log
     ブランチ名に加えて、マージされる実際のコミットからの最大「指定の数
     」の親コミットの1行説明をログメッセージに入力します。デフォルトは
     falseで、trueは20の同義語です。

merge.suppressDest
     統合ブランチの名前に一致するグロブをこの複数値の構成変数
     (multi-valued configuration variable)に追加することにより、これらの
     統合ブランチへのマージに対して計算されるデフォルトのマージメッセー
     ジは、タイトルから「into <branch name>」を省略します。

     空の値を持つ要素を使用して、以前の構成エントリから蓄積されたグロブ
     のリストをクリアできます。 ‘merge.suppressDest’ 変数が定義されてい
     ない場合、下位互換性のためにデフォルト値の ‘master’ が使用されます
     。

merge.summary
     ‘merge.log’ の同義語。これは非推奨であり、将来削除される予定です。


EXAMPLES
********

     $ git fetch origin master
     $ git fmt-merge-msg --log <$GIT_DIR/FETCH_HEAD

   「origin」リモートからの「master」ブランチのマージを説明するログメッ
セージを出力します。


SEE ALSO
********

git-merge(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-for-each-ref,  Up: Top

Name
****

git-for-each-ref — 各refに関する情報を出力します


Synopsis
********

     git for-each-ref [–count=<count>] [–shell|–perl|–python|–tcl]
                        [(–sort=<key>)…] [–format=<format>] [<pattern>…]
                        [–points-at=<object>]
                        [–merged[=<object>]] [–no-merged[=<object>]]
                        [–contains[=<object>]] [–no-contains[=<object>]]


DESCRIPTION
***********

‘<pattern>’ に一致するすべてのrefを繰り返し、指定された ‘<key>’ の組に従
って並べ替えた後、指定の ‘<format>’ に従って表示します。 ‘<count>’ が指
定されている場合は、その数のrefを表示した後で停止します。 ‘<format>’ の
プレースホルダで差し込みされる値は、オプションで、指定のホストプログラム
言語の文字列リテラルとなるようクォートでき、そのホストプログラム言語で直
接評価できます。


OPTIONS
*******

<pattern>…
     1つ以上のパターンが指定されている場合、少なくとも1つのパターンに一
     致する参照のみが表示されます。fnmatch(3) を使用するか、文字通り
     (lietrally)に書くかです。文字通りに書いた場合場合、完全に一致するか
     、最初からスラッシュ(‘/’)まで一致するかです。

‘--count=<count>’
     デフォルトでは、コマンドは ‘<pattern>’ に一致するすべてのrefを表示
     します。このオプションは、指定の数のrefを表示した後に停止します。

‘--sort=<key>’
     並べ替えるフィールド名。 プレフィックス ‘-`を使用して、値の降順で並
     べ替えます。 並べ替えるフィールド名を指定しない場合 `refname’ が使
     用されます。 ‘--sort=<key>’ オプションは複数回使用できます。その場
     合、最後のキーが主キー(primary key)になります。

‘--format=<format>’
     表示されているrefとそれが指すオブジェクトを ‘%(fieldname)’ によって
     を差し込みする書式文字列。 ‘fieldname’ の前にアスタリスク(‘*’)が付
     いていて、refがタグオブジェクトを指している場合は、(タグオブジェク
     トのフィールドではなく)タグオブジェクトが参照するオブジェクトのフィ
     ールドの値を使用します。このオプションを指定しない場合、 ‘<format>’
     はデフォルトで ‘%(objectname) SPC %(objecttype) TAB %(refname)’ で
     す。また ‘%%’ は ‘%’ を差し込み、 ‘%xx’ (‘xx’ は16進数)は16進コード
     ‘xx’ の文字を差し込みます。 たとえば、‘%00’ は ‘\0’ (NUL) を、
     ‘%09’ は ‘\t’ (TAB) を、 ‘%0a’ は ‘\n’ (LF) を、それぞれ差し込みま
     す。

‘--color[=<when>]’
     ‘--format’ オプションで指定された色を尊重します。 ‘<when>’ フィール
     ドは ‘always’ または ‘never’ または ‘auto’ のいずれかでなければなり
     ません(‘<when>’ がない場合は、 ‘always’ が指定されたかのように動作
     します)。

‘--shell’
‘--perl’
‘--python’
‘--tcl’
     指定した場合、 ‘%(fieldname)’ プレースホルダーを置き換える文字列は
     、指定のホストプログラム言語に適した文字列リテラルとしてクォートし
     ます。これは、直接「評価」(eval)できるスクリプトレットを作成するこ
     とを目的としています。

‘--points-at=<object>’
     指定のオブジェクトを指すrefのみをリストします。

‘--merged[=<object>]’
     指定のコミット(指定されていない場合はHEAD)から先端に到達できるrefの
     みをリストします。

‘--no-merged[=<object>]’
     指定のコミット(指定されていない場合はHEAD)から先端に到達できない
     refのみをリストします。

‘--contains[=<object>]’
     指定のコミット(指定されていない場合はHEAD)を含むrefのみをリストしま
     す。

‘--no-contains[=<object>]’
     指定のコミット(指定されていない場合はHEAD)を含まないrefのみをリスト
     します。

‘--ignore-case’
     refの並べ替え(sort)とフィルタリングでは英大文字小文字を区別しません
     。


FIELD NAMES
***********

参照オブジェクトの構造化フィールドのさまざまな値を使用して、結果の出力に
差し込みしたり、ソートキーとして使用したりできます。

   すべてのオブジェクトで、以下の名前を使用できます:

refname
     refの名前( $GIT_DIR/ の後の部分)。refのあいまいでない短い名前の場合
     は、 ‘:short’ を追加します。オプション core.warnAmbiguousRefs は、
     厳密な省略形モードを選択するために使用されます。 ‘lstrip=<N>’
     (‘rstrip=<N>’) が追加された場合、refnameの前(後ろ)からスラッシュ
     (‘/’)で区切られたパスの部分を‘<N>‘ 個削除します(例:
     ‘%(refname:lstrip=2)’ は ‘refs/tags/foo’ を ‘foo’ に変換し、
     ‘%(refname:rstrip=2)’ は ‘refs/tags/foo’ を ‘refs’ に変換します。
     ‘<N>’ が負の数の場合、指定された端から必要な数のパスコンポーネント
     を削除して、 ‘-<N>’ パス部分を残します(たとえば、
     ‘%(refname:lstrip=-2)’ は ‘refs/tags/foo’ を ‘tags/foo’ に変換し、
     ‘%(refname:rstrip=-1)’ は ‘refs/tags/foo’ を ‘refs’ に変換します)。
     refに十分な数のパス部品がない場合、正の <N> でストリッピングすると
     結果は空の文字列になり、負の<N>でストリッピングすると完全な
     refnameになります。どちらもエラーではありません。

     ‘strip’ は ‘lstrip’ の同義語として使用できます。

objecttype
     オブジェクトのタイプ( ‘blob’ 、‘tree’ 、 ‘commit’ 、‘tag’ )。

objectsize
     オブジェクトのサイズ(‘git cat-file -s’ がレポートするものと同じです
     )。 ‘:disk’ を追加して、オブジェクトがディスク上で占めるサイズをバ
     イト単位で取得できます。以下の「CAVEATS」(注意事項)セクションのディ
     スク上のサイズに関する注記を参照してください。

objectname
     オブジェクト名(別名SHA-1)。オブジェクト名のあいまいでない省略形につ
     いては、 ‘:short’ を追加してください。目的の長さのオブジェクト名の
     省略形については、 ‘:short=<length>’ を追加します。ここで、最小の長
     さは MINIMUM_ABBREV です。一意のオブジェクト名を確保するために、指
     定の長さを超える場合があります。

deltabase
     デルタとして保存されている場合、これは指定されたオブジェクトのデル
     タベースのオブジェクト名に展開されます。それ以外の場合は、ヌルオブ
     ジェクト名(すべてゼロ)に展開されます。

upstream
     表示されたrefから「上流」(upstream)と見なすことができるローカル参照
     の名前。 上記の ‘refname’ と同じように、 ‘:short’ や ‘:lstrip’ や
     ‘:rstrip’ を尊重します。さらに、 ‘:track’ は ‘[ahead N, behind M]’
     を表示し、 ‘:trackshort’ は ‘>’ (ahead) または ‘<’ (behind) または
     "<>" (ahead and behind) または "=" (in sync) という簡潔なバージョン
     を表示します。 ‘:track’ は不明なアップストリーム参照が検出されるた
     びに ‘[gone]’ も出力します。 ‘:track,nobracket’ を追加すると角かっ
     こ(‘[’ と ‘]’ )無しで追跡情報を表示します（つまり、 ‘ahead N,
     behind M’ )。

     リモート追跡ブランチの ‘%(upstream)’ と ‘%(upstream:remotename)’ と
     ‘%(upstream:remoteref)`は、それぞれリモートの名前と追跡されたリモー
     トrefの名前を参照します。つまり、 refspec
     `%(upstream:remoteref):%(upstream)’ を使用して
     ‘%(upstream:remotename)’ からフェッチすることにより、リモートト追跡
     ブランチを明示的かつ個別に更新できます。

     refに追跡情報が関連付けられていない場合、効果はありません。
     ‘nobracket’ 以外のすべてのオプションは相互に排他的ですが、一緒に使
     用する場合は最後のオプションが選択されます。

push
     表示されたrefの ‘@{push}’ の場所を表すローカルrefの名前。
     ‘upstream’ と同様に ‘:short’ ・ ‘:lstrip’ ・ ‘:rstrip’ ・ ‘:track’
     ・ ‘:trackshort’ ・ ‘:remotename’ ・ ‘:remoteref’ オプションを尊重
     します。 ‘@{push}’ refが設定されていない場合、空の文字列を生成しま
     す。

HEAD
     HEADが現在のref (チェックアウトされたブランチ)と一致する場合は ‘*’
     、それ以外の場合は ’ ’ 。

color
     出力色を変更します。 その後に ‘:<colorname>’ が続きます。色の名前は
     、 git-config(1) の「CONFIGURATION FILE」セクションの「Values」で説
     明されています。 たとえば、 ‘%(color:bold red)’ です。

align
     コンテンツを %(align:…) から %(end) の間で左揃え、中央揃え、または
     右揃えにします。 ‘align:’ の後には、 ‘width=<width>’ と
     ‘position=<position>’ がコンマ(‘,’)で区切られた任意の順序で続きます
     。ここで、 ‘<position>’ は left または right または middle のいずれ
     かで、‘<position>’ の デフォルトは left で ‘<width>’ のデフォルトは
     配置されたコンテンツの全長です。 簡潔にするために、 ‘width=’ および
     /または ‘position=’ プレフィックスを省略して、代わりに裸の <width>
     および <position> を使用することができます。 たとえば、
     ‘%(align:<width>,<position>)’ です。 コンテンツの長さがwidthよりも
     大きい場合、位置合わせは実行されません。 ‘--quote’ とともに使用する
     と、 %(align:…) から %(end) の間のすべてがクォートされまれますが、
     ネストされている場合は、最上位レベルのみがクォートされます。

if
     %(if) … %(then) … %(end) または %(if) … %(then) … %(else) … %(end)
     として使用されます。 %(if) の後に値または文字列リテラルを持つアトム
     がある場合は、 %(then) の後のすべてが出力されます。そうでない場合、
     %(else) アトムが使用されている場合は、 %(else) の後のすべてが出力さ
     れます。 %(then) の前の文字列を評価するときはスペースを無視します。
     これは、 ‘*’ または ‘ ‘ のいずれかを出力する %(HEAD) アトムを使用し
     、 HEAD ref にのみ if 条件を適用する場合に役立ちます。
     ‘:equals=<string>’ または ‘:notequals=<string>’ を追加して、
     %(if:…) アトムと %(then) アトムの間の値を指定された文字列と比較しま
     す。(訳注:つまり、 %(if) から %(then) の間がconditionである)

symref
     与えられたシンボリックrefが参照するref。シンボリックrefでない場合、
     何も出力されません。上記の ‘refname’ と同じ方法で、 ‘:short’ と
     ‘:lstrip’ と ‘:rstrip’ オプションを尊重します。

worktreepath
     リンクされたワークツリー(linked worktree)でチェックアウトされている
     場合、refがチェックアウトされているワークツリーへの絶対パス。それ以
     外の場合は空文字列です。

   上記に加えて、commitとtagオブジェクトの場合、ヘッダーフィールド名
(‘tree’ と ‘parent’ と ‘object’ と ‘type’ と ‘tag’)を使用して、ヘッダー
フィールドの値を指定できます。 フィールド ‘tree’ と ‘parent’ は、
‘objectname’ と同じように、修飾子 ‘:short’ や ‘:short=<length>’ とともに
使用することもできます。

   commitオブジェクトとtagオブジェクトの場合、特別な ‘creatordate’ フィ
ールドと ‘creator’ フィールドは、オブジェクトタイプに応じて、
‘committer’ または ‘tagger’ フィールドの適切な日付または
name-email-dateタプルに対応します。これらは、注釈付きタグと軽量タグの組
み合わせでの作業を目的としています。

   name-email-dateタプルを値として持つフィールド(‘author’ と ‘committer’
と ‘tagger’)には、名前付きコンポーネントを抽出するために ‘name’ と
‘email’ と ‘date’ の接尾辞を付けることができます。メールフィールド
(‘authoremail’ と ‘committeremail’ と ‘taggeremail’)の場合、 ‘:trim’ を
追加すると山かっこ(‘<’, ‘>’)なしでメールを取得し、 ‘:localpart’ を追加す
ると電子メールアドレスをトリミングして ‘@’ 記号の前の部分を取得できます
。

   オブジェクトの生データは ‘raw’ です。

raw:size
     オブジェクトの生データサイズ。

   注意: ‘--format=%(raw)’ は、 ‘--python’ や ‘--shell’ や ‘--tcl’ と一
緒に使用できないことに注意してください。これらのプログラム言語は、文字列
変数タイプで任意のバイナリデータをサポートしていない可能性があるためです
。

   コミットまたはタグオブジェクト内のメッセージは ‘contents’ であり、そ
こから ‘contents:<part>’ を使用して以下によりさまざまな部分を抽出できま
す:

contents:size
     コミットメッセージまたはタグメッセージのバイト単位のサイズ。

contents:subject
     メッセージの最初の段落(通常は1行)は、コミットまたはタグメッセージの
     「件名」(subject)と見なされます。 ‘contents：subject’ の代わりに、
     フィールド ‘subject’ を使用して同じ結果を取得することもできます。
     ‘subject’ に追加できる ‘:sanitize’ は、件名行をファイル名に適した形
     にします。

contents:body
     コミットメッセージまたはタグメッセージの「件名」に続く残りの部分。

contents:signature
     タグのオプションのGPG署名。

contents:lines=N
     メッセージの最初の N行。

   加えて、 git-interpret-trailers(1) によって解釈されるトレーラーは、
‘trailers[:options]’ として(または履歴エイリアス
‘contents:trailers[:options]’ を使用して)取得されます。有効な [:option]
値については、 git-log(1) の ‘trailers’ セクションを参照してください。

   並べ替えの目的のため、数値のフィールドは数値順で並べ替えられます
(‘objectsize’ 、‘authordate’ 、 ‘committerdate’ 、‘creatordate’ 、
‘taggerdate’)。他のすべてのフィールドは、バイト値の順序で並べ替えられま
す。

   バージョンで並べ替えるオプションもあります。これは、フィールド名
‘version:refname’ またはそのエイリアス ‘v:refname’ を使用して行うことが
できます。

   いずれの場合も、refによって参照されるオブジェクトに適用できないフィー
ルドを参照するフィールド名はエラーを引き起こしません。代わりに空文字列を
返します。

   日付タイプフィールドの特殊なケースとして、 ‘:’ の後に日付フォーマット
名を追加して日付のフォーマットを指定できます(git-rev-list(1) の ‘--date’
オプションのが取る値を参照してください)。

   %(align) や %(if) などの一部のアトムには、常に対応する %(end) が必要
です。 %(align) や %(if) などの一部のアトムを「開始アトム」(opening
atoms)と呼び、 %($open) と表記することもあります。

   スクリプト言語固有のクォートが有効な場合、トップレベルの開始アトムと
それに対応する %(end) の間のすべてが、トップレベル開始アトムのセマンティ
クスに従って評価され、そのトップレベルからの結果のみがクォートされます。


EXAMPLES
********

フォーマットされたテキストを直接生成する例。 直近の3つのタグ付きコミット
を表示します:

     #!/bin/sh

     git for-each-ref --count=3 --sort='-*authordate' \
     --format='From: %(*authorname) %(*authoremail)
     Subject: %(*subject)
     Date: %(*authordate)
     Ref: %(*refname)

     %(*body)
     ' 'refs/tags'

   出力でのshell evalの使用を示す簡単な例で、‘--shell’ の使用を示してい
ます。 すべてのheadのプレフィックスを一覧表示します:

     #!/bin/sh

     git for-each-ref --shell --format="ref=%(refname)" refs/heads | \
     while read entry
     do
             eval "$entry"
             echo `dirname $ref`
     done

   タグに関するもう少し手の込んだレポートで、スクリプト全体のフォーマッ
トである可能性があることを示しています:

     #!/bin/sh

     fmt='
             r=%(refname)
             t=%(*objecttype)
             T=${r#refs/tags/}

             o=%(*objectname)
             n=%(*authorname)
             e=%(*authoremail)
             s=%(*subject)
             d=%(*authordate)
             b=%(*body)

             kind=Tag
             if test "z$t" = z
             then
                     # could be a lightweight tag
                     t=%(objecttype)
                     kind="Lightweight tag"
                     o=%(objectname)
                     n=%(authorname)
                     e=%(authoremail)
                     s=%(subject)
                     d=%(authordate)
                     b=%(body)
             fi
             echo "$kind $T points at a $t object $o"
             if test "z$t" = zcommit
             then
                     echo "The commit was authored by $n $e
     at $d, and titled

         $s

     Its message reads as:
     "
                     echo "$b" | sed -e "s/^/    /"
                     echo
             fi
     '

     eval=`git for-each-ref --shell --format="$fmt" \
             --sort='*objecttype' \
             --sort=-taggerdate \
             refs/tags`
     eval "$eval"

   %(if) … %(then) … %(else) … %(end) の使用法を示す例。 これにより、現
在のブランチの前にアスタリスクが付けられます。

     git for-each-ref --format="%(if)%(HEAD)%(then)* %(else)  %(end)%(refname:short)" refs/heads/

   %(if) … %(then) … %(end) の使用法を示す例。 存在する場合、これは作者
名を出力します。

     git for-each-ref --format="%(refname)%(if)%(authorname)%(then) Authored by: %(authorname)%(end)"


CAVEATS
*******

注意: ディスク上のオブジェクトのサイズは正確に報告されますが、どのrefま
たはオブジェクトがディスクの使用に関与しているかについて結論を出す際には
注意が必要です。パックされた非デルタオブジェクトのサイズは、それに対して
デルタするオブジェクトのサイズよりもはるかに大きい場合がありますが、ベー
スとデルタのオブジェクトの選択は任意であり、再パック中に変更される可能性
があります。

   注意: オブジェクトの複数のコピーがオブジェクトデータベースに存在する
可能性があることにも注意してください。この場合、どのコピーのサイズまたは
デルタベースが報告されるかは未定義です。


NOTES
*****

複数の ‘--contains’ フィルターと ‘--no-contains’ フィルターを組み合わせ
る場合、少なくとも1つの ‘--contains’ コミットを含み、 ‘--no-contains’ コ
ミットを含まない参照のみが表示されます。

   複数の ‘--merged’ フィルターと ‘--no-merged’ フィルターを組み合わせる
と、少なくとも1つの ‘--merged’ コミットから到達可能で、 ‘--no-merged’ コ
ミットのいずれからも到達できない参照のみが表示されます。


SEE ALSO
********

git-show-ref(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-for-each-repo,  Up: Top

Name
****

git-for-each-repo — リポジトリのリストでGitコマンドを実行します


Synopsis
********

     git for-each-repo –config=<config> [–] <arguments>


DESCRIPTION
***********

リポジトリのリストでGitコマンドを実行します。既知のオプションや ‘--’ の
、後ろの引数は、Gitサブプロセスの引数として使用されます。

   ！！このコマンドは実験的なものです！！動作が変わる可能性があります！
！

   たとえば、以下を使用して、 ‘maintenance.repo’ 構成変数に格納されてい
るリポジトリのリストのそれぞれに対して maintenance を実行できます。

     git for-each-repo --config=maintenance.repo maintenance run

   これにより、複数値の構成変数である ‘maintenance.repo’ の各値である
‘<repo>’ ごとに ‘git -C <repo> maintenance run’ が実行されます。


OPTIONS
*******

‘--config=<config>’
     指定された構成変数を、絶対パス名を格納する複数値リストとして使用し
     ます。そのパスのリストを繰り返して(iterate)、指定された引数を実行し
     ます。

     これらの構成値は、利用可能な場合、システム、グローバル、およびロー
     カルのGit構成からロードされます。 ‘git for-each-repo’ がGitリポジト
     リではないディレクトリで実行される場合、システムとグローバル設定の
     みが使用されます。


SUBPROCESS BEHAVIOR
*******************

‘git -C <repo> <arguments>’ サブプロセスがゼロ以外の終了コードを返す場合
、 ‘git for-each-repo’ プロセスはそれ以上のサブプロセスを実行せずにその
終了コードを返します。

   各 ‘git -C <repo> <arguments>’ サブプロセスは、標準のファイルデスクリ
プタ ‘stdin’ と ‘stdout’ と ‘stderr’ を継承します。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-format-patch,  Up: Top

Name
****

git-format-patch — 電子メール送信用のパッチを準備します


Synopsis
********

     git format-patch [-k] [(-o|–output-directory) <dir> | –stdout]
                        [–no-thread | –thread[=<style>]]
                        [(–attach|–inline)[=<boundary>] | –no-attach]
                        [-s | –signoff]
                        [–signature=<signature> | –no-signature]
                        [–signature-file=<file>]
                        [-n | –numbered | -N | –no-numbered]
                        [–start-number <n>] [–numbered-files]
                        [–in-reply-to=<message id>] [–suffix=.<sfx>]
                        [–ignore-if-in-upstream]
                        [–cover-from-description=<mode>]
                        [–rfc] [–subject-prefix=<subject prefix>]
                        [(–reroll-count|-v) <n>]
                        [–to=<email>] [–cc=<email>]
                        [–[no-]cover-letter] [–quiet]
                        [–[no-]encode-email-headers]
                        [–no-notes | –notes[=<ref>]]
                        [–interdiff=<previous>]
                        [–range-diff=<previous> [–creation-factor=<percent>]]
                        [–filename-max-length=<n>]
                        [–progress]
                        [<common diff options>]
                        [ <since> | <revision range> ]


DESCRIPTION
***********

UNIXメールボックスに似た形式で、コミットごとに1つの「メッセージ」に「パ
ッチ」を含む各非マージコミットを準備します。このコマンドの出力は、電子メ
ールの送信や「git am」での使用に便利です。

   コマンドによって生成される「メッセージ」は、以下の3つの部分で構成され
ます:

   • 短いメタデータヘッダー。「file(1)」などのプログラムが、ファイルがこ
     のコマンドからの出力であることを認識できるように「From <commit>」と
     、固定の日付スタンプ「Mon Sep 17 00:00:00 2001」で始まり、 作者
     ID(author identity)や作者の日付(author date)や変更のタイトル(title
     of the change)(コミットログメッセージの最初の段落から取得)が記入さ
     れたフィールドがあります。

   • コミットログメッセージの2番目以降の段落。

   • コミットとその親の間の「diff-p—stat」出力(linkgit: git-diff[1] 参照
     )である「パッチ」。

   ログメッセージとパッチは、3本のダッシュ(‘---’)で区切られています。

   操作するコミットを指定する方法は2つあります。

  1. A single commit, <since>, specifies that the commits leading to the
     tip of the current branch that are not in the history that leads to
     the <since> to be output.

  2. Generic <revision range> expression (see "SPECIFYING REVISIONS"
     section in gitrevisions(7)) means the commits in the specified
     range.

   The first rule takes precedence in the case of a single <commit>.  To
apply the second rule, i.e., format everything since the beginning of
history up until <commit>, use the ‘--root’ option: ‘git format-patch
--root <commit>’.  If you want to format only <commit> itself, you can
do this with ‘git format-patch -1 <commit>’.

   By default, each output file is numbered sequentially from 1, and
uses the first line of the commit message (massaged for pathname safety)
as the filename.  With the ‘--numbered-files’ option, the output file
names will only be numbers, without the first line of the commit
appended.  The names of the output files are printed to standard output,
unless the ‘--stdout’ option is specified.

   If ‘-o’ is specified, output files are created in <dir>.  Otherwise
they are created in the current working directory.  The default path can
be set with the ‘format.outputDirectory’ configuration option.  The ‘-o’
option takes precedence over ‘format.outputDirectory’.  To store patches
in the current working directory even when ‘format.outputDirectory’
points elsewhere, use ‘-o .’.  All directory components will be created.

   By default, the subject of a single patch is "[PATCH] " followed by
the concatenation of lines from the commit message up to the first blank
line (see the DISCUSSION section of git-commit(1)).

   When multiple patches are output, the subject prefix will instead be
"[PATCH n/m] ".  To force 1/1 to be added for a single patch, use ‘-n’.
To omit patch numbers from the subject, use ‘-N’.

   If given ‘--thread’, ‘git-format-patch’ will generate ‘In-Reply-To’
and ‘References’ headers to make the second and subsequent patch mails
appear as replies to the first mail; this also generates a ‘Message-Id’
header to reference.


OPTIONS
*******

‘-p’
‘--no-stat’
     diffstatsなしでプレーンパッチを生成します。

‘-U<n>’
‘--unified=<n>’
     通常の3行ではなく、<n> 行の内容でdiffを生成します。

‘--output=<file>’
     stdout ではなく指定のファイルに出力します。

‘--output-indicator-new=<char>’
‘--output-indicator-old=<char>’
‘--output-indicator-context=<char>’
     生成されたパッチの新しい行、古い行、またはコンテキスト行を示すため
     に使用される文字を指定します。 通常、それらはそれぞれ _+_ 、 _-_ 、
     ’ ’ です。

‘--indent-heuristic’
     diffハンクの境界をずらす(shift)ヒューリスティックを有効にして、パッ
     チを読みやすくします。 これがデフォルトです。

‘--no-indent-heuristic’
     インデントヒューリスティック(indent heuristic)を無効にします。

‘--minimal’
     より多くの時間を費やして、可能な限り最小のdiffが生成されるようにし
     ます。

‘--patience’
     "patience diff" アルゴリズムを使用してdiffを生成します。

‘--histogram’
     "histogram diff" アルゴリズムを使用してdiffを生成します。

‘--anchored=<text>’
     "anchored diff" アルゴリズムを使用してdiffを生成します。

     このオプションは複数回指定できます。

     行がソースと宛先の両方に存在し、1回だけ存在し、このテキストで始まる
     場合、このアルゴリズムは、その行が出力に削除または追加として表示さ
     れないようにします。内部で "patience diff" アルゴリズムを使用します
     。

‘--diff-algorithm={patience|minimal|histogram|myers}’
     diffアルゴリズムを選択します。その派生(variants)は以下のとおりです:

     ‘default’, ‘myers’
          基本的な貪欲な差分アルゴリズム(greedy diff algorithm)。現在、
          これがデフォルトです。

     ‘minimal’
          より多くの時間を費やして、可能な限り最小のdiffが生成されるよう
          にします。

     ‘patience’
          パッチを生成する時に "patience diff" アルゴリズムを使います。

     ‘histogram’
          このアルゴリズムは、忍耐アルゴリズム(patience algorithm)を拡張
          して、「発生率の低い共通要素をサポート」(support
          low-occurrence common elements)します。

     たとえば、 あなたが ‘diff.algorithm’ 変数をデフォルト以外の値に設定
     した上で、それでもデフォルト値を使用する場合は、
     ‘--diff-algorithm=default’ オプションを使用する必要があります。

‘--stat[=<width>[,<name-width>[,<count>]]]’
     diffstatを生成します。 デフォルトでは、必要なだけのスペースがファイ
     ル名部分に使用され、残りはグラフ部分に使用されます。最大幅はデフォ
     ルトで端末幅、または端末に接続されていない場合は80桁であり、
     ‘<width>’ で上書きできます。ファイル名部分の幅は、コンマの後に別の
     幅 ‘<name-width>’ を指定することで制限できます。グラフ部分の幅は、
     ‘--stat-graph-width=<width>’ (統計グラフを生成するすべてのコマンド
     に影響します)を使用するか、 ‘diff.statGraphWidth=<width>’ ( ‘git
     format-patch’ に影響しません)を設定することによって制限できます。
     3番目のパラメータ ‘<count>’ を指定することにより、出力を最初の
     ‘<count>’ 行に制限し、それに ‘...’ が続く形にできます。

     これらのパラメータは、 ‘--stat-width=<width>’ と
     ‘--stat-name-width=<name-width>’ と ‘--stat-count=<count>’ を使用し
     て個別に設定することもできます。

‘--compact-summary’
     ファイルの作成や削除( "new" または "gone" 。オプションでシンボリッ
     クリンクの場合は "+l" )、diffstatのモード変更(実行可能ビットを追加
     または削除する場合は、それぞれ "+x" または "-x" )など、拡張ヘッダー
     情報の要約を出力します。情報はファイル名部分とグラフ部分の間に置か
     れます。本機能は ‘--stat’ の機能を含んでいます。

‘--numstat’
     ‘--stat`に似ていますが、プログラムで処理しやすい(machine friendly)よ
     うに、追加および削除された行数を10進表記とパス名で省略形なしで表示
     します。バイナリファイルの場合、 `0 0’ の代わりに2つの ‘-’ を出力し
     ます。

‘--shortstat’
     変更されたファイルの総数と、追加および削除された行の数を含む
     ‘--stat’ 形式の最後の行のみを出力します。

‘-X[<param1,param2,...>]’
‘--dirstat[=<param1,param2,...>]’
     各サブディレクトリの相対的な変更量の分布を出力します。 ‘--dirstat’
     の動作は、パラメータのコンマ区切りリストを渡すことでカスタマイズで
     きます。デフォルトは、 ‘diff.dirstat’ 構成変数によって制御されます
     (git-config(1) 参照)。以下のパラメータを使用できます:

     ‘changes’
          ソースから削除された、または宛先に追加された行をカウントして、
          dirstat数を計算します。これは、ファイル内の純粋なコード移動の
          量を無視します。つまり、ファイル内の行の再配置は、他の変更ほど
          カウントされません。これは、パラメーターが指定されていない場合
          のデフォルトの動作です。

     ‘lines’
          通常の行ベースのdiff分析を実行し、削除/追加された行数を合計し
          て、dirstat数を計算します。 (バイナリファイルの場合、バイナリ
          ファイルには行の概念がないため、代わりに64バイトのチャンクをカ
          ウントします)。 これは ‘changes’ 動作よりも高価な ‘--dirstat’
          動作ですが、他の変更と同じようにファイル内の再配置された行をカ
          ウントします。結果の出力は、他の ‘--*stat’ オプションから得ら
          れるものと一致しています。

     ‘files’
          変更されたファイルの数を数えて、dirstat数を計算します。変更さ
          れた各ファイルは、dirstat分析で等しくカウントされます。これは
          、ファイルの内容をまったく調べる必要がないため、計算コストが最
          もかからない ‘--dirstat’ の動作です。

     ‘cumulative’
          親ディレクトリの子ディレクトリの変更も同様にカウントします。
          ‘cumulative’(累積的) を使用する場合、報告されるパーセンテージ
          の合計が100%を超える場合があることに注意してください。デフォル
          トの(非累積的な)動作は、‘noncumulative’ パラメーターで指定でき
          ます。

     <limit>
          整数パラメーターは、カットオフパーセント(デフォルトでは3%)を指
          定します。指定の割合より少ないディレクトリは、出力に表示されま
          せん。

     例: 変更されたファイルの総数の10%未満のディレクトリを無視し、親ディ
     レクトリに子ディレクトリの数を累積しながら、変更されたファイルをカ
     ウント: ‘--dirstat=files,10,cumulative’

‘--cumulative’
     ‘--dirstat=cumulative’ と同義語

‘--dirstat-by-file[=<param1,param2>...]’
     ‘--dirstat=files,param1,param2...’ と同義語

‘--summary’
     作成、名前変更、モード変更などの拡張ヘッダー情報の短い要約
     (condensed summary)を出力します。

‘--no-renames’
     構成ファイルにデフォルトで指定されている場合でも、名前変更の検出を
     オフにします。

‘--[no-]rename-empty’
     名前変更ソースとして空のブロブを使用するかどうか。

‘--full-index’
     パッチ形式の出力を生成するときは、最初の一握りの文字(first handful
     of characters)の代わりに、「インデックス」行にイメージ前およびイメ
     ージ後の完全ブロブオブジェクト名を表示します。

‘--binary’
     ‘--full-index’ に加えて、 ‘git-apply’ で適用できるバイナリ差分を出
     力します。

‘--abbrev[=<n>]’
     完全な40バイトの16進オブジェクト名をdiff-raw形式の出力とdiff-treeヘ
     ッダー行に表示する代わりに、オブジェクトを一意に参照する、少なくと
     も _<n>_ 桁の16進数の長さの最短のプレフィックスを表示します。diffパ
     ッチ出力形式では、 ‘--full-index’ が優先されます。つまり、
     ‘--full-index’ が指定されている場合、 ‘--abbrev’ に関係なく、完全な
     ブロブ名が表示されます。デフォルト以外の桁数は、 ‘--abbrev=<n>’ で
     指定できます。

‘-B[<n>][/<m>]’
‘--break-rewrites[=[<n>][/<m>]]’
     完全な書き換えの変更を削除と作成のペアに分割します。これには以下の
     2つの目的があります:

     これは、ファイルの完全な書き換えに相当する変更が、コンテキストとし
     てテキストで一致する非常に少数の行と混合された一連の削除と挿入とし
     てではなく、古いものすべての単一の削除とそれに続く すべての新しいも
     のを1回挿入し、数値 ‘m’ が -B オプションのこの側面を制御します(デフ
     ォルトは60%)。 ‘-B/70%’ は、Gitがそれを完全な書き換えと見なすために
     、元の30%未満が結果に残る必要があることを指定します(つまり、結果の
     パッチは、コンテキスト行と混合された一連の削除と挿入になります)。

     -M と一緒に使用すると、完全に書き換えられたファイルも名前変更のソー
     スと見なされ(通常、 -M は、消えたファイルのみを名前変更のソースと見
     なします)、数 ‘n’ が -Bオプションのこの側面を制御します(デフォルト
     は50%)。 ‘-B20%’ は、ファイルのサイズの20%以上と比較して、追加およ
     び削除を伴う変更が、別のファイルへの名前変更の可能なソースとして取
     得される資格があることを指定します。

‘-M[<n>]’
‘--find-renames[=<n>]’
     名前の変更(renames)を検知する。 ‘n’ が指定されている場合、それは類
     似性インデックスのしきい値です (つまり、ファイルのサイズと比較した
     追加/削除の量)。 たとえば、 ‘-M90%’ は、ファイルの90%以上が変更され
     ていない場合、 Gitが削除/追加のペアを名前変更と見なす必要があること
     を意味します。 ‘%’ 記号がない場合、数値は小数として読み取られ、その
     前に小数点が付きます。 つまり、 ‘-M5’ は0.5になるため、‘-M50%’ と同
     じになります。 同様に、 ‘-M05’ は ‘-M5%’ と同じです。 検出を正確な
     名前変更に制限するには、 ‘-M100%’ を使用します。 デフォルトの類似性
     インデックスは50%です。

‘-C[<n>]’
‘--find-copies[=<n>]’
     名前と同様コピーを検出します。 ‘--find-copies-harder’ ‘も参照してく
     ださい。 `n’ を指定すると、 ‘-M<n>’ と同じ意味になります。

‘--find-copies-harder’
     パフォーマンス上の理由から、デフォルトでは、 ‘-C’ オプションは、コ
     ピーの元のファイルが同じ変更組(changeset)で変更された場合にのみコピ
     ーを検索します。このフラグにより、コマンドは変更されていないファイ
     ルをコピー元の候補として検査します。これは大規模なプロジェクトでは
     非常にコストのかかる操作であるため、注意して使用してください。 複数
     の ‘-C’ オプションを指定しても同じ効果があります。

‘-D’
‘--irreversible-delete’
     削除するプレイメージ(preimage)を省略します。つまり、ヘッダーのみを
     出力し、プレイメージと ‘/dev/null’ の差分は出力しません。結果のパッ
     チは、 ‘patch’ または ‘git apply’ で適用されることを意図していませ
     ん。これは、変更後にテキストを確認することに集中したい人のためだけ
     のものです。さらに、出力には明らかに、そのようなパッチを手動でも逆
     に適用するのに十分な情報が不足しているため、オプションの名前が付け
     られています。

     ‘-B’ と併用する場合は、削除/作成ペアの削除部分のプリイメージ
     (preimage)も省略してください。

‘-l<num>’
     ‘-M’ および ‘-C’ オプションには、名前変更/コピーのサブセットを安価
     に検出できるいくつかの準備手順が含まれ、その後に、残りのすべてのペ
     アになっていない宛先をすべての関連ソースと比較する徹底的なフォール
     バック部分が続きます。(名前の変更の場合、残りのペアになっていないソ
     ースのみが関係します。コピーの場合、すべての元のソースが関係します
     )。Nのソースと宛先の場合、この徹底的なチェックのコストは O(N^2) で
     す。このオプションは、関係するソース/宛先ファイルの数が指定された数
     を超えた場合に、名前変更/コピー検出の完全な部分が実行されないように
     します。デフォルトは diff.renameLimit です。 値0は無制限として扱わ
     れることに注意してください。

‘-O<orderfile>’
     ファイルが出力に表示される順序を制御します。これは ‘diff.orderFile’
     構成変数をオーバーライドします(git-config(1) 参照)。
     ‘diff.orderFile’ をキャンセルするには、 ‘-O/dev/null’ を使用します
     。

     出力順序は、 <orderfile> 内のglobパターンの順序によって決定されます
     。最初のパターンに一致するパス名を持つすべてのファイルが最初に出力
     され、2番目のパターンに一致する(ただし最初のパターンには一致しない
     )パス名を持つすべてのファイルが次に出力されます。パス名がどのパター
     ンとも一致しないすべてのファイルは、ファイルの最後に暗黙のすべて一
     致パターンがあるかのように、最後に出力されます。複数のパス名のラン
     クが同じである場合(同じパターンに一致するが、以前のパターンには一致
     しない)、相互の出力順序は通常の順序です。

     <orderfile> は以下のとおりパースされます:

        • 空白行は無視されるため、読みやすくするための区切りとして使用で
          きます。

        • ハッシュ ("‘#’") で始まる行は無視されるため、コメントに使用で
          きます。 パターンがハッシュで始まる場合は、パターンの先頭にバ
          ックスラッシュ(訳注:日本では環境により円記号)("‘\’") を追加し
          ます。

        • 他の各行には、単一のパターンが含まれています。

     パターンは、 FNM_PATHNAME フラグなしで fnmatch(3) に使用されるパタ
     ーンと同じ構文とセマンティクスを持ちますが、最終的なパス名コンポー
     ネントをいくつも削除するとパターンと一致する場合、パス名もパターン
     と一致する点が異なります。 たとえば、パターン "‘foo*bar’" は、
     "‘fooasdfbar’" および "‘foo/bar/baz/asdf’" と一致しますが、
     "‘foobarx’" とは一致しません。

‘--skip-to=<file>’
‘--rotate-to=<file>’
     名前付き <file> の前のファイルを出力から破棄するか(スキップして)、
     出力の最後に移動させます(ローテーションさせます)。 これらは主に
     ‘git difftool’ コマンドを使用するために考案されたものであり、それ以
     外の場合はあまり役に立たない可能性があります。

‘--relative[=<path>]’
‘--no-relative’
     プロジェクトのサブディレクトリから実行する場合、このオプションを使
     用して、ディレクトリ外の変更を除外し、それに関連するパス名を表示す
     るように指示できます。サブディレクトリ(ベアリポジトリなど)にいない
     場合は、引数として <path> を指定することで、出力を作成するサブディ
     レクトリに名前を付けることができます。 ‘--no-relative`は、
     `diff.relative’ 設定オプションと以前の ‘--relative’ の両方を打ち消
     すために使用できます。

‘-a’
‘--text’
     すべてのファイルをテキストとして扱います。

‘--ignore-cr-at-eol’
     比較を行うときは、行末のキャリッジリターン(carriage-return)を無視し
     ます。

‘--ignore-space-at-eol’
     行末(EOL)での空白(whitespace)の変更を無視します。

‘-b’
‘--ignore-space-change’
     空白(whitespace)の数の変更は無視してください。これは、行末の空白
     (whitespace)を無視し、1つ以上の空白文字(whitespace characters)の他
     のすべてのシーケンスを同等と見なします。

‘-w’
‘--ignore-all-space’
     行を比較するときは空白を無視します。 これにより、一方の行に空白があ
     り、もう一方の行に空白がない場合でも、違いは無視されます。

‘--ignore-blank-lines’
     全て空白の行の変更は無視します。

‘-I<regex>’
‘--ignore-matching-lines=<regex>’
     すべての行が <regex> にマッチする変更を無視します。このオプションは
     複数回指定できます。

‘--inter-hunk-context=<lines>’
     指定された行数までの差分ハンク間のコンテキストを表示し、それによっ
     て互いに近いハンクを融合します。デフォルトは
     ‘diff.interHunkContext’ で、設定オプションが設定されていない場合は
     0です。

‘-W’
‘--function-context’
     関数全体を各変更のコンテキスト行として表示します。関数名は、 ‘git
     diff’ がパッチハンクヘッダーを処理するのと同じ方法で決定されます
     (gitattributes(5) の _Defining a custom hunk-header_ を参照)。

‘--ext-diff’
     外部diffヘルパーの実行を許可します。 gitattributes(5) を使用して外
     部diffドライバーを設定する場合は、 git-log(1) およびその仲間と一緒
     にこのオプションを使用する必要があります。

‘--no-ext-diff’
     外部diffドライバーを禁止します。

‘--textconv’
‘--no-textconv’
     バイナリファイルを比較するときに、外部テキスト変換フィルターの実行
     を許可(または禁止)します。 詳細については、 gitattributes(5) を参照
     してください。textconvフィルターは通常、一方向の変換であるため、結
     果のdiffは人間の消費に適していますが、適用(apply)することはできませ
     ん。このため、textconvフィルターは、 git-diff(1) および git-log(1)
     に対してのみデフォルトで有効になりますが、 git-format-patch(1) また
     はdiff配管コマンドに対しては有効になりません。

‘--ignore-submodules[=<when>]’
     diff生成のサブモジュールへの変更を無視します。 <when> は、 none・
     untracked・dirty・allのいずれかになります。これがデフォルトです。
     noneを使用すると、追跡されていないファイルまたは変更されたファイル
     が含まれている場合、またはそのHEADがスーパープロジェクトに記録され
     ているコミットと異なる場合にサブモジュールが変更されたと見なされ、
     git-config(1) または gitmodules(5) の ignoreオプションの設定をオー
     バーライドするために使用できます。untrackedが使用されている場合、サ
     ブモジュールには追跡されていないコンテンツのみが含まれている場合、
     サブモジュールはダーティとは見なされません(ただし、変更されたコンテ
     ンツはスキャンされます)。「dirty」を使用すると、サブモジュールの作
     業ツリーへのすべての変更が無視され、スーパープロジェクトに格納され
     ているコミットへの変更のみが表示されます(これは1.7.0までの動作でし
     た)。「all」を使用すると、サブモジュールへのすべての変更が非表示に
     なります。

‘--src-prefix=<prefix>’
     "a/" の代わりに、与えられたソースプレフィックス(source prefix)を表
     示します。

‘--dst-prefix=<prefix>’
     "b/" の代わりに、指定された宛先プレフィックス(destination prefix)を
     表示します。

‘--no-prefix’
     送信元(source)または宛先(destination)のプレフィックスを表示しません
     。

‘--line-prefix=<prefix>’
     出力のすべての行に追加のプレフィックスを付加します。

‘--ita-invisible-in-index’
     デフォルトでは、 "git add -N" によって追加されたエントリは、 "git
     diff" に既存の空のファイルとして表示され、 "git diff –cached" に新
     しいファイルとして表示されます。このオプションを使用すると、エント
     リは "git diff" では新しいファイルとして表示され、 "git diff
     –cached" では存在しません。このオプションは、
     ‘--ita-visible-in-index’ で元に戻すことができます。どちらのオプショ
     ンも実験的なものであり、将来削除される可能性があります。

   これらの一般的なオプションの詳細については、 gitdiffcore(7) も参照し
てください。

‘-<n>’
     Prepare patches from the topmost <n> commits.

‘-o <dir>’
‘--output-directory <dir>’
     Use <dir> to store the resulting files, instead of the current
     working directory.

‘-n’
‘--numbered’
     Name output in _[PATCH n/m]_ format, even with a single patch.

‘-N’
‘--no-numbered’
     Name output in _[PATCH]_ format.

‘--start-number <n>’
     Start numbering the patches at <n> instead of 1.

‘--numbered-files’
     Output file names will be a simple number sequence without the
     default first line of the commit appended.

‘-k’
‘--keep-subject’
     Do not strip/add _[PATCH]_ from the first line of the commit log
     message.

‘-s’
‘--signoff’
     Add a ‘Signed-off-by’ trailer to the commit message, using the
     committer identity of yourself.  See the signoff option in
     git-commit(1) for more information.

‘--stdout’
     Print all commits to the standard output in mbox format, instead of
     creating a file for each one.

‘--attach[=<boundary>]’
     Create multipart/mixed attachment, the first part of which is the
     commit message and the patch itself in the second part, with
     ‘Content-Disposition: attachment’.

‘--no-attach’
     Disable the creation of an attachment, overriding the configuration
     setting.

‘--inline[=<boundary>]’
     Create multipart/mixed attachment, the first part of which is the
     commit message and the patch itself in the second part, with
     ‘Content-Disposition: inline’.

‘--thread[=<style>]’
‘--no-thread’
     Controls addition of ‘In-Reply-To’ and ‘References’ headers to make
     the second and subsequent mails appear as replies to the first.
     Also controls generation of the ‘Message-Id’ header to reference.

     オプションの <style> 引数は、 ‘shallow’ または ‘deep’ のいずれかで
     す。 「shallow」スレッドは、すべてのメールをシリーズの先頭に返信し
     ます。先頭は、送付状と ‘--in-reply-to’ と最初のパッチメールからこの
     順序で選択されます。「deep」スレッドは、すべてのメールを前のメール
     への返信にします。

     The default is ‘--no-thread’, unless the ‘format.thread’
     configuration is set.  If ‘--thread’ is specified without a style,
     it defaults to the style specified by ‘format.thread’ if any, or
     else ‘shallow’.

     Beware that the default for _git send-email_ is to thread emails
     itself.  If you want ‘git format-patch’ to take care of threading,
     you will want to ensure that threading is disabled for ‘git
     send-email’.

‘--in-reply-to=<message id>’
     Make the first mail (or all the mails with ‘--no-thread’) appear as
     a reply to the given <message id>, which avoids breaking threads to
     provide a new patch series.

‘--ignore-if-in-upstream’
     Do not include a patch that matches a commit in <until>..<since>.
     This will examine all patches reachable from <since> but not from
     <until> and compare them with the patches being generated, and any
     patch that matches is ignored.

‘--cover-from-description=<mode>’
     ブランチの説明を使用して、送付状のどの部分に自動的に入力されるかを
     制御します。

     ‘<mode>’ が ‘message’ または ‘default’ の場合、送付状の件名にプレー
     スホルダーテキストが入力されます。送付状の本文には、ブランチの説明
     が入力されます。 これは、構成またはコマンドラインオプションが指定さ
     れていない場合のデフォルトモードです。

     ‘<mode>’ が ‘subject’ の場合、ブランチの説明の最初の段落を送付状の
     件名に入力します。ブランチの説明の残りの部分は、送付状の本文に入力
     されます。

     ‘<mode>’ が ‘auto’ の場合、 ブランチの説明の最初の段落 > 100バイト
     なら、モードは ‘message’ になり、そうでない場合は ‘subject’ が使用
     されます。

     ‘<mode>’ が ‘none’ の場合、送付状の件名と本文の両方にプレースホルダ
     ーテキストが入力されます。

‘--subject-prefix=<subject prefix>’
     件名の標準の _[PATCH]_ プレフィックスの代わりに、
     _[<subjectprefix>]_ を使用してください。これにより、パッチシリーズ
     の有用な命名が可能になり、 ‘--numbered’ オプションと組み合わせるこ
     とができます。

‘--filename-max-length=<n>’
     標準の64バイトの代わりに、生成された出力ファイル名を約 _<n>_ バイト
     に切り捨て(短すぎると、値が適切な長さに黙って引き上げられます)。 デ
     フォルトは ‘format.filenameMaxLength’ 構成変数の値、または構成され
     ていない場合は64です。

‘--rfc’
     ‘--subject-prefix="RFC PATCH"’ のエイリアス。 RFCは「Request For
     Comments」を意味します。アプリケーションではなく、議論のために実験
     的なパッチを送信するときにこれを使用します。

‘-v <n>’
‘--reroll-count=<n>’
     Mark the series as the <n>-th iteration of the topic.  The output
     filenames have ‘v<n>’ prepended to them, and the subject prefix
     ("PATCH" by default, but configurable via the ‘--subject-prefix’
     option) has ‘ v<n>‘ appended to it.  E.g.  ‘--reroll-count=4’ may
     produce ‘v4-0001-add-makefile.patch’ file that has "Subject: [PATCH
     v4 1/20] Add makefile" in it.  ‘<n>’ does not have to be an integer
     (e.g.  "–reroll-count=4.4", or "–reroll-count=4rev2" are allowed),
     but the downside of using such a reroll-count is that the
     range-diff/interdiff with the previous version does not state
     exactly which version the new interation is compared against.

‘--to=<email>’
     Add a ‘To:’ header to the email headers.  This is in addition to
     any configured headers, and may be used multiple times.  The
     negated form ‘--no-to’ discards all ‘To:’ headers added so far
     (from config or command line).

‘--cc=<email>’
     Add a ‘Cc:’ header to the email headers.  This is in addition to
     any configured headers, and may be used multiple times.  The
     negated form ‘--no-cc’ discards all ‘Cc:’ headers added so far
     (from config or command line).

‘--from’
‘--from=<ident>’
     Use ‘ident’ in the ‘From:’ header of each commit email.  If the
     author ident of the commit is not textually identical to the
     provided ‘ident’, place a ‘From:’ header in the body of the message
     with the original author.  If no ‘ident’ is given, use the
     committer ident.

     Note that this option is only useful if you are actually sending
     the emails and want to identify yourself as the sender, but retain
     the original author (and ‘git am’ will correctly pick up the
     in-body header).  Note also that ‘git send-email’ already handles
     this transformation for you, and this option should not be used if
     you are feeding the result to ‘git send-email’.

‘--add-header=<header>’
     Add an arbitrary header to the email headers.  This is in addition
     to any configured headers, and may be used multiple times.  For
     example, ‘--add-header="Organization: git-foo"’.  The negated form
     ‘--no-add-header’ discards *all* (‘To:’, ‘Cc:’, and custom) headers
     added so far from config or command line.

‘--[no-]cover-letter’
     In addition to the patches, generate a cover letter file containing
     the branch description, shortlog and the overall diffstat.  You can
     fill in a description in the file before sending it out.

‘--encode-email-headers’
‘--no-encode-email-headers’
     Encode email headers that have non-ASCII characters with
     "Q-encoding" (described in RFC 2047), instead of outputting the
     headers verbatim.  Defaults to the value of the
     ‘format.encodeEmailHeaders’ configuration variable.

‘--interdiff=<previous>’
     As a reviewer aid, insert an interdiff into the cover letter, or as
     commentary of the lone patch of a 1-patch series, showing the
     differences between the previous version of the patch series and
     the series currently being formatted.  ‘previous’ is a single
     revision naming the tip of the previous series which shares a
     common base with the series being formatted (for example ‘git
     format-patch --cover-letter --interdiff=feature/v1 -3 feature/v2’).

‘--range-diff=<previous>’
     As a reviewer aid, insert a range-diff (see git-range-diff(1)) into
     the cover letter, or as commentary of the lone patch of a 1-patch
     series, showing the differences between the previous version of the
     patch series and the series currently being formatted.  ‘previous’
     can be a single revision naming the tip of the previous series if
     it shares a common base with the series being formatted (for
     example ‘git format-patch --cover-letter --range-diff=feature/v1 -3
     feature/v2’), or a revision range if the two versions of the series
     are disjoint (for example ‘git format-patch --cover-letter
     --range-diff=feature/v1~3..feature/v1 -3 feature/v2’).

     Note that diff options passed to the command affect how the primary
     product of ‘format-patch’ is generated, and they are not passed to
     the underlying ‘range-diff’ machinery used to generate the
     cover-letter material (this may change in the future).

‘--creation-factor=<percent>’
     Used with ‘--range-diff’, tweak the heuristic which matches up
     commits between the previous and current series of patches by
     adjusting the creation/deletion cost fudge factor.  See
     git-range-diff(1)) for details.

‘--notes[=<ref>]’
‘--no-notes’
     3つの破線(‘---’)行の後に、コミットのnotes (linkgit: git-notes[1] を
     参照)を追加します。

     The expected use case of this is to write supporting explanation
     for the commit that does not belong to the commit log message
     proper, and include it with the patch submission.  While one can
     simply write these explanations after ‘format-patch’ has run but
     before sending, keeping them as Git notes allows them to be
     maintained between versions of the patch series (but see the
     discussion of the ‘notes.rewrite’ configuration options in
     git-notes(1) to use this workflow).

     The default is ‘--no-notes’, unless the ‘format.notes’
     configuration is set.

‘--[no-]signature=<signature>’
     Add a signature to each message produced.  Per RFC 3676 the
     signature is separated from the body by a line with ’– ’ on it.  If
     the signature option is omitted the signature defaults to the Git
     version number.

‘--signature-file=<file>’
     署名がファイルから読み取られることを除いて、 ‘--signature’ と同じよ
     うに機能します。

‘--suffix=.<sfx>’
     Instead of using ‘.patch’ as the suffix for generated filenames,
     use specified suffix.  A common alternative is ‘--suffix=.txt’.
     Leaving this empty will remove the ‘.patch’ suffix.

     Note that the leading character does not have to be a dot; for
     example, you can use ‘--suffix=-patch’ to get
     ‘0001-description-of-my-change-patch’.

‘-q’
‘--quiet’
     生成されたファイルの名前を標準出力に出力しないでください。

‘--no-binary’
     Do not output contents of changes in binary files, instead display
     a notice that those files changed.  Patches generated using this
     option cannot be applied properly, but they are still useful for
     code review.

‘--zero-commit’
     コミットのハッシュの代わりに、各パッチのFromヘッダーにすべてゼロの
     ハッシュを出力します。

‘--[no-]base[=<commit>]’
     Record the base tree information to identify the state the patch
     series applies to.  See the BASE TREE INFORMATION section below for
     details.  If <commit> is "auto", a base commit is automatically
     chosen.  The ‘--no-base’ option overrides a ‘format.useAutoBase’
     configuration.

‘--root’
     Treat the revision argument as a <revision range>, even if it is
     just a single commit (that would normally be treated as a <since>).
     Note that root commits included in the specified range are always
     formatted as creation patches, independently of this flag.

‘--progress’
     パッチが生成されるときに、stderrへ進捗レポートを表示します。


CONFIGURATION
*************

You can specify extra mail header lines to be added to each message,
defaults for the subject prefix and file suffix, number patches when
outputting more than one patch, add "To:" or "Cc:" headers, configure
attachments, change the patch output directory, and sign off patches
with configuration variables.

     [format]
             headers = "Organization: git-foo\n"
             subjectPrefix = CHANGE
             suffix = .txt
             numbered = auto
             to = <email>
             cc = <email>
             attach [ = mime-boundary-string ]
             signOff = true
             outputDirectory = <directory>
             coverLetter = auto
             coverFromDescription = auto


DISCUSSION
**********

The patch produced by _git format-patch_ is in UNIX mailbox format, with
a fixed "magic" time stamp to indicate that the file is output from
format-patch rather than a real mailbox, like so:

     From 8f72bad1baf19a53459661343e21d6491c3908d3 Mon Sep 17 00:00:00 2001
     From: Tony Luck <tony.luck@intel.com>
     Date: Tue, 13 Jul 2010 11:42:54 -0700
     Subject: [PATCH] =?UTF-8?q?[IA64]=20Put=20ia64=20config=20files=20on=20the=20?=
      =?UTF-8?q?Uwe=20Kleine-K=C3=B6nig=20diet?=
     MIME-Version: 1.0
     Content-Type: text/plain; charset=UTF-8
     Content-Transfer-Encoding: 8bit

     arch/arm config files were slimmed down using a python script
     (See commit c2330e286f68f1c408b4aa6515ba49d57f05beae comment)

     Do the same for ia64 so we can have sleek & trim looking
     ...

   Typically it will be placed in a MUA’s drafts folder, edited to add
timely commentary that should not go in the changelog after the three
dashes, and then sent as a message whose body, in our example, starts
with "arch/arm config files were…".  On the receiving end, readers can
save interesting patches in a UNIX mailbox and apply them with
git-am(1).

   When a patch is part of an ongoing discussion, the patch generated by
_git format-patch_ can be tweaked to take advantage of the _git am
–scissors_ feature.  After your response to the discussion comes a line
that consists solely of "‘-- >8 --’" (scissors and perforation),
followed by the patch with unnecessary header fields removed:

     ...
     > So we should do such-and-such.

     Makes sense to me.  How about this patch?

     -- >8 --
     Subject: [IA64] Put ia64 config files on the Uwe Kleine-König diet

     arch/arm config files were slimmed down using a python script
     ...

   When sending a patch this way, most often you are sending your own
patch, so in addition to the "‘From $SHA1 $magic_timestamp’" marker you
should omit ‘From:’ and ‘Date:’ lines from the patch file.  The patch
title is likely to be different from the subject of the discussion the
patch is in response to, so it is likely that you would want to keep the
Subject: line, like the example above.


パッチの破損のチェック
======================

多くのメーラーは、適切に設定されていないと空白(whitespace)を破損します。
破損の一般的な2つのタイプは以下のとおりです:

   • どの空白(whitespace)もない空のコンテキスト行。

   • 先頭に1つの余分な空白(whitespace)がある空でないコンテキスト行。

   あなたのMUAが正しく設定されているかどうかをテストする方法のひとつは以
下のとおりです:

   • リストとメンテナのアドレスを含まない To: 行 と Cc: 行 を除き、全く
     同じ方法で、パッチを自分自身に送信します。

   • そのパッチをUNIXメールボックス形式のファイルに保存します。それを
     a.patch と呼ぶことにしましょう。

   • それをapplyします:

          $ git fetch <project> master:test-apply
          $ git switch test-apply
          $ git restore --source=HEAD --staged --worktree :/
          $ git am a.patch

   これが正しく適用されない場合、さまざまな理由が考えられます。

   • The patch itself does not apply cleanly.  That is _bad_ but does
     not have much to do with your MUA. You might want to rebase the
     patch with git-rebase(1) before regenerating it in this case.

   • The MUA corrupted your patch; "am" would complain that the patch
     does not apply.  Look in the .git/rebase-apply/ subdirectory and
     see what _patch_ file contains and check for the common corruption
     patterns mentioned above.

   • While at it, check the _info_ and _final-commit_ files as well.  If
     what is in _final-commit_ is not exactly what you would want to see
     in the commit log message, it is very likely that the receiver
     would end up hand editing the log message when applying your patch.
     Things like "Hi, this is my first patch.\n" in the patch e-mail
     should come after the three-dash line that signals the end of the
     commit message.


MUA-SPECIFIC HINTS
******************

さまざまなメーラーを使用してパッチをインラインで正常に送信する方法に関す
るヒントをいくつか。


GMail
=====

GMail does not have any way to turn off line wrapping in the web
interface, so it will mangle any emails that you send.  You can however
use "git send-email" and send your patches through the GMail SMTP
server, or use any IMAP email client to connect to the google IMAP
server and forward the emails through that.

   For hints on using _git send-email_ to send your patches through the
GMail SMTP server, see the EXAMPLE section of git-send-email(1).

   For hints on submission using the IMAP interface, see the EXAMPLE
section of git-imap-send(1).


Thunderbird
===========

By default, Thunderbird will both wrap emails as well as flag them as
being _format=flowed_, both of which will make the resulting email
unusable by Git.

   There are three different approaches: use an add-on to turn off line
wraps, configure Thunderbird to not mangle patches, or use an external
editor to keep Thunderbird from mangling the patches.


Approach #1 (add-on)
--------------------

Install the Toggle Word Wrap add-on that is available from
https://addons.mozilla.org/thunderbird/addon/toggle-word-wrap/
(https://addons.mozilla.org/thunderbird/addon/toggle-word-wrap/) It adds
a menu entry "Enable Word Wrap" in the composer’s "Options" menu that
you can tick off.  Now you can compose the message as you otherwise do
(cut + paste, _git format-patch_ | _git imap-send_, etc), but you have
to insert line breaks manually in any text that you type.


Approach #2 (configuration)
---------------------------

Three steps:

  1. Configure your mail server composition as plain text: Edit…Account
     Settings…Composition & Addressing, uncheck "Compose Messages in
     HTML".

  2. Configure your general composition window to not wrap.

     In Thunderbird 2: Edit..Preferences..Composition, wrap plain text
     messages at 0

     In Thunderbird 3: Edit..Preferences..Advanced..Config Editor.
     Search for "mail.wrap_long_lines".  Toggle it to make sure it is
     set to ‘false’.  Also, search for "mailnews.wraplength" and set the
     value to 0.

  3. Disable the use of format=flowed:
     Edit..Preferences..Advanced..Config Editor.  Search for
     "mailnews.send_plaintext_flowed".  Toggle it to make sure it is set
     to ‘false’.

   After that is done, you should be able to compose email as you
otherwise would (cut + paste, _git format-patch_ | _git imap-send_,
etc), and the patches will not be mangled.


Approach #3 (external editor)
-----------------------------

The following Thunderbird extensions are needed: AboutConfig from
http://aboutconfig.mozdev.org/ (http://aboutconfig.mozdev.org/) and
External Editor from http://globs.org/articles.php?lng=en&pg=8
(http://globs.org/articles.php?lng=en&pg=8)

  1. Prepare the patch as a text file using your method of choice.

  2. Before opening a compose window, use Edit→Account Settings to
     uncheck the "Compose messages in HTML format" setting in the
     "Composition & Addressing" panel of the account to be used to send
     the patch.

  3. In the main Thunderbird window, _before_ you open the compose
     window for the patch, use Tools→about:config to set the following
     to the indicated values:

                  mailnews.send_plaintext_flowed  => false
                  mailnews.wraplength             => 0

  4. Open a compose window and click the external editor icon.

  5. In the external editor window, read in the patch file and exit the
     editor normally.

   Side note: it may be possible to do step 2 with about:config and the
following settings but no one’s tried yet.

             mail.html_compose                       => false
             mail.identity.default.compose_html      => false
             mail.identity.id?.compose_html          => false

   There is a script in contrib/thunderbird-patch-inline which can help
you include patches with Thunderbird in an easy way.  To use it, do the
steps above and then use the script as the external editor.


KMail
=====

This should help you to submit patches inline using KMail.

  1. Prepare the patch as a text file.

  2. Click on New Mail.

  3. Go under "Options" in the Composer window and be sure that "Word
     wrap" is not set.

  4. Use Message → Insert file… and insert the patch.

  5. Back in the compose window: add whatever other text you wish to the
     message, complete the addressing and subject fields, and press
     send.


BASE TREE INFORMATION
*********************

The base tree information block is used for maintainers or third party
testers to know the exact state the patch series applies to.  It
consists of the _base commit_, which is a well-known commit that is part
of the stable part of the project history everybody else works off of,
and zero or more _prerequisite patches_, which are well-known patches in
flight that is not yet part of the _base commit_ that need to be applied
on top of _base commit_ in topological order before the patches can be
applied.

   The _base commit_ is shown as "base-commit: " followed by the 40-hex
of the commit object name.  A _prerequisite patch_ is shown as
"prerequisite-patch-id: " followed by the 40-hex _patch id_, which can
be obtained by passing the patch through the ‘git patch-id --stable’
command.

   Imagine that on top of the public commit P, you applied well-known
patches X, Y and Z from somebody else, and then built your three-patch
series A, B, C, the history would be like:

     ---P---X---Y---Z---A---B---C

   With ‘git format-patch --base=P -3 C’ (or variants thereof, e.g.
with ‘--cover-letter’ or using ‘Z..C’ instead of ‘-3 C’ to specify the
range), the base tree information block is shown at the end of the first
message the command outputs (either the first patch, or the cover
letter), like this:

     base-commit: P
     prerequisite-patch-id: X
     prerequisite-patch-id: Y
     prerequisite-patch-id: Z

   For non-linear topology, such as

     ---P---X---A---M---C
         \         /
          Y---Z---B

   You can also use ‘git format-patch --base=P -3 C’ to generate patches
for A, B and C, and the identifiers for P, X, Y, Z are appended at the
end of the first message.

   If set ‘--base=auto’ in cmdline, it will track base commit
automatically, the base commit will be the merge base of tip commit of
the remote-tracking branch and revision-range specified in cmdline.  For
a local branch, you need to track a remote branch by ‘git branch
--set-upstream-to’ before using this option.


EXAMPLES
********

   • Extract commits between revisions R1 and R2, and apply them on top
     of the current branch using _git am_ to cherry-pick them:

          $ git format-patch -k --stdout R1..R2 | git am -3 -k

   • Extract all commits which are in the current branch but not in the
     origin branch:

          $ git format-patch origin

     For each commit a separate file is created in the current
     directory.

   • Extract all commits that lead to _origin_ since the inception of
     the project:

          $ git format-patch --root origin

   • The same as the previous one:

          $ git format-patch -M -B origin

     Additionally, it detects and handles renames and complete rewrites
     intelligently to produce a renaming patch.  A renaming patch
     reduces the amount of text output, and generally makes it easier to
     review.  Note that non-Git "patch" programs won’t understand
     renaming patches, so use it only when you know the recipient uses
     Git to apply your patch.

   • Extract three topmost commits from the current branch and format
     them as e-mailable patches:

          $ git format-patch -3


CAVEATS
*******

Note that ‘format-patch’ will omit merge commits from the output, even
if they are part of the requested range.  A simple "patch" does not
include enough information for the receiving end to reproduce the same
merge commit.


SEE ALSO
********

git-am(1), git-send-email(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-fsck-objects,  Up: Top

Name
****

git-fsck-objects — データベース内のオブジェクトの接続性(connectivity)と
有効性(validity)を検証(verify)します


Synopsis
********

     git fsck-objects …


DESCRIPTION
***********

これは git-fsck(1) の同義語です。 git-fsck(1) の文書を参照してください。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-fsck,  Up: Top

Name
****

git-fsck — データベース内のオブジェクトの接続性(connectivity)と有効性
(validity)を検証します


Synopsis
********

     git fsck [–tags] [–root] [–unreachable] [–cache] [–no-reflogs]
              [–[no-]full] [–strict] [–verbose] [–lost-found]
              [–[no-]dangling] [–[no-]progress] [–connectivity-only]
              [–[no-]name-objects] [<object>*]


DESCRIPTION
***********

データベース内のオブジェクトの接続性(connectivity)と有効性(validity)を検
証します


OPTIONS
*******

<object>
     到達不能追跡のheadとして扱うオブジェクト。

     オブジェクトが指定されていない場合、 _git fsck_ はデフォルトでイン
     デックスファイルと、 ‘refs’ 名前空間内のすべてのSHA-1参照と、
     (‘--no-reflogs’ が与えられて無い場合)すべてのreflogsを、headとして
     使用します。

‘--unreachable’
     存在するが、どの参照ノードからも到達できないオブジェクトを印刷しま
     す。

‘--[no-]dangling’
     存在するが「直接」使用されることのないオブジェクトを印刷します(デフ
     ォルト)。 ‘--no-dangling’ を使用して、この情報を出力から省略するこ
     とができます。

‘--root’
     ルートノードを報告します。

‘--tags’
     タグを報告します。

‘--cache’
     インデックスに記録されているオブジェクトを、到達不能追跡のheadノー
     ドとしても考慮します。

‘--no-reflogs’
     reflogのエントリによってのみ参照されるコミットが到達可能であるとは
     見なさないようにします。このオプションは、以前はrefに含まれていたが
     、現在は含まれていないが、対応するreflogに残っているコミットを検索
     することのみを目的としています。

‘--full’
     GIT_OBJECT_DIRECTORY（$GIT_DIR/objects) 内のオブジェクトだけでなく
     、GIT_ALTERNATE_OBJECT_DIRECTORIES または
     $GIT_DIR/objects/info/alternates にリストされている代替オブジェクト
     プール、および $GIT_DIR/objects/pack にあるパックされたGitアーカイ
     ブにあるオブジェクトもチェックします。サブディレクトリを代替オブジ
     ェクトプールにパックします。いまやこれがデフォルトになりました。
     ‘--no-full’ でオフにできます。

‘--connectivity-only’
     到達可能なオブジェクトの接続のみをチェックし、到達可能なタグ、コミ
     ット、またはツリーによって参照されるオブジェクトが存在することを確
     認します。これにより、ブロブの読み取りを完全に回避することで操作が
     高速化されます(ただし、参照されたブロブが存在するかどうかは引き続き
     チェックされます)。 これにより、コミットとツリーの破損が検出されま
     すが、セマンティックチェック(フォーマットエラーなど)は行われません
     。ブロブオブジェクトの破損はまったく検出されません。

     到達不能なタグ、コミット、およびツリーにもアクセスして、履歴のぶら
     下がっているセグメントのヒントを見つけることができます。この出力を
     気にせず、さらに高速化したい場合は、 ‘--no-dangling’ を使用してくだ
     さい。

‘--strict’
     より厳密なチェックを有効にします。つまり、古いバージョンのGitによっ
     て作成された g+w ビットセットで記録されたファイルモードをキャッチし
     ます。Linuxカーネル、Git自体、スパースリポジトリなどの既存のリポジ
     トリには、このチェックをトリガーする古いオブジェクトがありますが、
     このフラグを使用して新しいプロジェクトをチェックすることをお勧めし
     ます。

‘--verbose’
     おしゃべりになります。

‘--lost-found’
     タイプに応じて、ぶら下がっているオブジェクトを
     .git/lost-found/commit/ または .git/lost-found/other/ に書き込みま
     す。オブジェクトがブロブの場合、コンテンツはそのオブジェクト名では
     なくファイルに書き込まれます。

‘--name-objects’
     到達可能なオブジェクトの名前を表示する場合、SHA-1に加えて、それらが
     どのように到達可能であるかを説明する名前も表示します。
     git-rev-parse(1) と互換性があります。 例えば
     ‘HEAD@{1234567890}~25^2:src/’

‘--[no-]progress’
     ‘--no-progress’ または ‘--verbose’ が指定されていない限り、進行状況
     ステータスは、端末に接続されている場合、デフォルトで標準エラースト
     リームに報告されます。 ‘--progress’ は、標準エラーストリームが端末
     に送信されていない場合でも、進行状況出力を強制します。


CONFIGURATION
*************

fsck.<msg-id>
     fsck中に、gitは、現在のバージョンのgitでは生成されず、
     ‘transfer.fsckObjects’ が設定されている場合はネットワーク経由で送信
     されない、レガシーデータの問題を検出する場合があります。この機能は
     、そのようなデータを含むレガシーリポジトリの操作をサポートすること
     を目的としています。

     ‘fsck.<msg-id>’ 設定は、 git-fsck(1) によって取得されますが、代わり
     に、そのようなデータセット ‘receive.fsck.<msg-id>’ のプッシュを受け
     入れるか、または、クローンまたはフェッチのセットである
     ‘fetch.fsck.<msg-id>’ を使用します。

     この文書の残りの部分では、簡潔にするために ‘fsck.*’ 変数について説
     明していますが、対応する ‘receive.fsck.*’ 変数と ‘fetch.<msg-id>.*’
     変数にも同じことが当てはまります。

     ‘color.ui’ や ‘core.editor’ のような変数とは異なり、
     ‘receive.fsck.<msg-id>’ と ‘fetch.fsck.<msg-id>’ 変数は、設定されて
     いない場合、 ‘fsck.<msg-id>’ 構成にフォールバックしません。さまざま
     な状況で同じfsck設定を均一に構成するには、3つすべてを同じ値に設定す
     る必要があります。

     ‘fsck.<msg-id>’ が設定されている場合、 ‘fsck.<msg-id>’ の値を
     ‘error’ 、 ‘warn’ 、‘ignore’ のいずれか一つとすることにより、エラー
     を警告に切り替える事もでき、その逆も可能です。そして ‘<msg-id>’ の
     部分はメッセージIDです。便利なように、fsckはエラー/警告メッセージの
     前にメッセージIDを付けます。たとえば「missingEmail: invalid
     author/committer line - missing email」は、 ‘fsck.missingEmail =
     ignore’ を設定するとその問題が非表示になることを意味します。

     一般に、これらの問題のあるオブジェクトが共有する破損の種類をリスト
     して無視するのではなく、 ‘fsck.skipList’ に問題のある既存のオブジェ
     クトを列挙することをお勧めします。前者を実行すると、同じ破損の新し
     いインスタンスが見過ごされる可能性があります。

     不明な ‘fsck.<msg-id>’ 値を設定すると、fsckが停止(die)しますが、
     ‘receive.fsck.<msg-id>’ や ‘fetch.fsck.<msg-id>’ に対して同じことを
     行うと、gitは単に警告するだけです。

fsck.skipList
     非致命的な理由により既に壊れている(broken)ことが分かっているため無
     視する必要があるオブジェクト名(1行につき1つの省略されてないSHA-1)の
     リストへのパス。Git 2.20 以降では、コメント(‘#’)文字から行末までと
     、空行と、先頭と末尾の空白(whitespace)は無視されます。それより古い
     バージョンでは1行につき1つのSHA-1以外は全てエラーになります。

     この機能は、無効なコミッターの電子メールアドレスなど、初期のコミッ
     トにもかかわらず、安全に無視できるエラーを含む、確立されたプロジェ
     クトを受け入れる必要がある場合に役立ちます。 注意: この設定では、
     corruptオブジェクトをスキップすることはできません。

     ‘fsck.<msg-id>’ と同様に、この変数に対応する
     ‘receive.fsck.skipList’ 派生と ‘fetch.fsck.skipList’ 派生があります
     。

     ‘color.ui’ や ‘core.editor’ のような変数とは異なり、
     ‘receive.fsck.skipList’ 変数と ‘fetch.fsck.skipList’ 変数は、設定さ
     れていない場合、 ‘fsck.skipList’ 構成にフォールバックしません。さま
     ざまな状況で同じfsck設定を均一に構成するには、3つすべてを同じ値に設
     定する必要があります。

     古いバージョンのGit(2.20より前)では、オブジェクト名リストを並べ替え
     る必要があることが文書化されています。これは必須ではなく、オブジェ
     クト名は任意の順序で表示できますが、リストを読み取るときに、内部バ
     イナリ検索実装の目的でリストが並べ替えられているかどうかを追跡しま
     した。これにより、既に並べ替えられたリストでは作業を節約できます。
     膨大なリストがない限り、リストを事前に並べ替える必要はありませんで
     した。 Gitバージョン2.20以降では、代わりにハッシュ実装が使用される
     ため、リストを事前に並べ替える必要はありません。


DISCUSSION
**********

git-fsckは、SHA-1と一般的なオブジェクトの健全性をテストし、結果として得
られる到達可能性とその他すべてを完全に追跡します。検出した破損(オブジェ
クトの欠落または不良)を出力し、 ‘--unreachable’ フラグを使用すると、存在
するが指定されたheadノード(または上記デフォルト達)のいずれからも到達でき
ないオブジェクトも出力します。

   つまり、それは、あなたのバックアップや、他のアーカイブで見つけなけれ
ばならない破損したオブジェクトです(つまり、あなたは、それらを削除して、
他の誰かが破損したオブジェクトを持っていることを期待して、他のサイトと「
rsync」を実行できます)。

   core.commitGraph が true の場合、 commit-graph ファイルも「git
commit-graph verify」を使用して検査されます。 git-commit-graph(1) を参照
してください。


Extracted Diagnostics
*********************

unreachable <type> <object>
     <type> というタイプである <object> というオブジェクトは、表示される
     ツリーまたはコミットのいずれにおいても、実際には直接または間接的に
     参照されていません。これは、指定していない別のルートノードがあるか
     、ツリーが破損していることを意味している可能性があります。ルートノ
     ードを見逃していない場合は、到達不能なノードは使用できないため、削
     除することをお勧めします。

missing <type> <object>
     この <type> というタイプの <object> というオブジェクトは参照されて
     いますが、データベースに存在しません。

dangling <type> <object>
     この <type> タイプの <object> というオブジェクトはデータベースに存
     在しますが、「直接」使用されることはありません。 ぶら下がっているコ
     ミットはルートノードである可能性があります。

hash mismatch <object>
     データベースに、ハッシュがオブジェクトデータベースの値と一致しない
     オブジェクトがあります。これは、深刻なデータ整合性の問題を示してい
     ます。


Environment Variables
*********************

GIT_OBJECT_DIRECTORY
     オブジェクトデータベースのルート(通常は $GIT_DIR/objects )を指定す
     るために使用されます

GIT_INDEX_FILE
     インデックスのインデックスファイルを指定するために使用されます

GIT_ALTERNATE_OBJECT_DIRECTORIES
     追加のオブジェクトデータベースルートを指定するために使用されます(通
     常は未設定)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-gc,  Up: Top

Name
****

git-gc — 不要なファイルをクリーンアップし、ローカルリポジトリを最適化す
る


Synopsis
********

     git gc [–aggressive] [–auto] [–quiet] [–prune=<date> | –no-prune] [–force] [–keep-largest-pack]


DESCRIPTION
***********

ファイルリビジョンの圧縮(ディスクスペースの削減とパフォーマンスの向上)ま
たは、「git add」の以前の呼び出しから作成された可能性のある到達不能オブ
ジェクトの削除または、refのパッキングまたは、reflogの剪定(prune)または、
メタデータまたは古い作業ツリーのrerere、など、現在のリポジトリ内で多数の
ハウスキーピングタスクを実行します。 commit-graphなどの補助インデックス
も更新される場合があります。

   オブジェクトを作成する一般的な磁器コマンド操作を実行すると、最後のメ
ンテナンス以降にリポジトリが大幅に拡張されているかどうかが確認され、拡張
されている場合は、 ‘git gc’ が自動的に実行されます。この動作を無効にする
方法については、以下の ‘gc.auto’ を参照してください。

   ‘git gc’ を手動で実行する必要があるのは、そのような磁器コマンドを定期
的に実行せずにオブジェクトをリポジトリに追加する場合、1回限りのリポジト
リ最適化を行う場合などです。最適ではない大量インポートをクリーンアップし
ます。インポートの場合の詳細については、 git-fast-import(1)の「PACKFILE
OPTIMIZATION」セクションを参照してください。


OPTIONS
*******

‘--aggressive’
     通常、「git gc」は非常に高速に実行され、ディスクスペースの使用率と
     パフォーマンスは良好です。このオプションを使用すると、「git gc」は
     リポジトリをより積極的に最適化できますが、時間がかかります。この最
     適化の効果は割と持続性があります。詳細については、以下の「
     AGGRESSIVE」セクションを参照してください。

‘--auto’
     このオプションを使用すると、「git gc」はハウスキーピングが必要かど
     うかを確認します。 そうでない場合は、作業を実行せずに終了します。

     このヒューリスティックな作業がどのように機能するかについては、以下
     の「CONFIGURATION」セクションの「gc.auto」オプションを参照してくだ
     さい。

     ‘gc.auto’ や ‘gc.autoPackLimit’ などの構成オプションの制限を超えて
     ハウスキーピングがトリガーされると、他のすべてのハウスキーピングタ
     スク（rerere、working tree、reflogなど）も実行されます。

‘--prune=<date>’
     指定の日付より古いルーズオブジェクトを削除します(デフォルトは2週間
     前で、構成変数 ‘gc.pruneExpire’ で上書きできます)。 ‘--prune=now’ は
     、日付に関係なく緩いオブジェクトを削除し、別のプロセスが同時にリポ
     ジトリに書き込んでいる場合に破損のリスクが高まります。以下の「
     NOTES」を参照してください。 ‘--prune’ はデフォルトでオンになってい
     ます。

‘--no-prune’
     任意のルーズオブジェクトを剪定しません。

‘--quiet’
     すべての進捗レポートを抑制します。

‘--force’
     このリポジトリで別の ‘git gc’ インスタンスが実行されている場合でも
     、 ‘git gc’ を強制的に実行します。

‘--keep-largest-pack’
     最大のパックと ‘.keep’ ファイルでマークされたパックを除くすべてのパ
     ックが1つのパックに統合されます。このオプションを使用すると、
     ‘gc.bigPackThreshold’ は無視されます。


AGGRESSIVE
**********

‘--aggressive’ オプションが指定されている場合、 git-repack(1) は ‘-f’ フ
ラグを指定して呼び出され、次に ‘--no-reuse-delta’ が git-pack-objects(1)
に渡されます。これにより、既存のデルタが破棄されて再計算され、再パッキン
グに多くの時間を費します。

   この効果は割と長続きします。例えばパックとルーズオブジェクトが互いに
合体すると、そのパック内の既存のデルタが再利用される可能性がありますが、
代わりに新しいパックから次善のデルタを選択する場合もあります。

   さらに、 ‘--aggressive’ を指定すると、 git-repack(1) に渡される
‘--depth’ と ‘--window’ オプションが微調整されます。以下の
‘gc.aggressiveDepth’ と ‘gc.aggressiveWindow’ 設定を参照してください。よ
り大きなウィンドウサイズを使用することで、より最適なデルタを見つける可能
性が高くなります。

   カスタマイズされたパフォーマンスベンチマークを実行せずに、特定のリポ
ジトリでこのオプションを使用することはおそらく価値がありません。それには
もっと時間がかかり、結果として生じるスペース/デルタの最適化はそれだけの
価値があるかもしれませんし、そうでないかもしれません。これをまったく使用
しないことは、ほとんどのユーザーとそのリポジトリにとって正しいトレードオ
フです。


CONFIGURATION
*************

以下の文書は git-config(1) にあるものと同じです:

gc.aggressiveDepth
     ‘git gc --aggressive’ で使用されるデルタ圧縮アルゴリズムで使用され
     る深さパラメーター。これはデフォルトで50に設定されています。これは
     ‘--aggressive’ が使用されていない場合の ‘--depth’ オプションのデフ
     ォルトです。

     詳細については git-repack(1) の ‘--depth’ オプションの文書を参照し
     てください。

gc.aggressiveWindow
     ‘git gc --aggressive’ で使用されるデルタ圧縮アルゴリズムで使用され
     るウィンドウサイズパラメータ。これはデフォルトで250に設定されていま
     す。これは、 ‘--window’ のデフォルト値の10よりもはるかに積極的なウ
     ィンドウサイズです。

     詳細については、 git-repack(1) の ‘--window’ オプションの文書を参照
     してください。

gc.auto
     リポジトリにおおよそ指定の値より多くのルーズオブジェクトがある場合
     、 ‘git gc --auto’ はそれらをパックします。一部の磁器コマンドは、こ
     のコマンドを使用して、軽量のガベージコレクションを時々実行します。
     デフォルト値は6700です。

     これを0に設定すると、ルーズオブジェクトの数に基づく自動パッキングが
     無効にななります。また、他のヒューリスティックな ‘git gc --auto’ が
     、 ‘gc.autoPackLimit’ などの作業があるかどうかを判断するためにこの
     値を使用します。

gc.autoPackLimit
     リポジトリに ‘* .keep’ ファイルでマークされていないパックがこの設定
     値より多くある場合、 ‘git gc --auto’ はそれらを1つの大きなパックに
     統合します。デフォルト値は50です。これを0に設定すると、無効になりま
     す。 ‘gc.auto’ を0に設定すると、この設定も無効になります。

     以下の ‘gc.bigPackThreshold’ 構成変数を参照してください。この設定を
     使用中は、自動パックの制限がどのように機能するかに影響します。

gc.autoDetach
     システムがサポートしている場合は ‘git gc --auto’ は即座戻り、実行は
     バックグラウンドで行われます。デフォルトはtrueです。

gc.bigPackThreshold
     ゼロ以外の場合、 ‘git gc’ の実行時に、この設定値より大きいすべての
     パックが保持されます。これは ‘--keep-largest-pack’ と非常に似ていま
     すが、最大のパックだけでなく、しきい値を満たす全てのパックが保持さ
     れる点が異なります。デフォルトはゼロです。 _k_ 、 _m_ 、 _g_ の一般
     的な単位接尾辞がサポートされています。

     注意: 保持されるパックの数が gc.autoPackLimit を超える場合、この構
     成変数は無視され、基本パックを除くすべてのパックが再パックされるこ
     とに注意してください。再パック後、パックの数は gc.autoPackLimit を
     下回り、再び gc.bigPackThreshold が尊重されるでしょう。

     ‘git repack’ がスムーズに実行されると推定されるメモリ量が利用できず
     、かつ、 ‘gc.bigPackThreshold’ が設定されていない場合、最大のパック
     も除外されます(これは、 ‘--keep-largest-pack’ を指定して ‘git gc’ を
     実行するのと同じです)。

gc.writeCommitGraph
     trueの場合、 git-gc(1) が実行されると、 gcはcommit-graphファイルを
     書き換えます。 ‘git gc --auto’ を使用する場合、ハウスキーピングが必
     要な場合はコミットグラフが更新されます。デフォルトはtrueです。詳細
     については git-commit-graph(1) を参照してください。

gc.logExpiry
     ファイルgc.logが存在する場合、 ‘git gc --auto’ はそのコンテンツを出
     力し、そのファイルが「gc.logExpiry」より古い場合を除いて、実行する
     代わりにステータス0で終了します。デフォルトは「1.day」です。その他
     の値の指定方法については ‘gc.pruneExpire’ を参照してください。

gc.packRefs
     リポジトリで ‘git pack-refs’ を実行すると、HTTPなどの馬鹿プロトコル
     (dumb transport) を介して 1.5.1.2 より前のGitバージョンではクローン
     が作成できなくなります。この変数は、「git gc」が「git pack-refs」を
     実行するかどうかを決定します。これを ‘notbare’ に設定して、すべての
     非ベアリポジトリ内で有効にするか、ブール値に設定することができます
     。 デフォルトは ‘true’ です。

gc.pruneExpire
     「git gc」を実行すると、‘prune --expire 2.weeks.ago’ が呼び出されま
     す。この構成変数で猶予期間をオーバーライドします。 値「now」を使用
     してこの猶予期間を無効にし、到達不能なオブジェクトを常にすぐに剪定
     (prune)するか、「never」を使用して剪定を抑制することができます。こ
     の機能は「git gc」がリポジトリに書き込む別のプロセスと同時に実行さ
     れる場合の破損を防ぐのに役立ちます。 git-gc(1) の「NOTES」セクショ
     ンを参照してください。

gc.worktreePruneExpire
     _git gc_ が実行されると、 ‘git worktree prune --expire3.months.ago’
     が呼び出されます。この構成変数を使用して、別の猶予期間を設定できま
     す。値「now」を使用して猶予期間を無効にし、 ‘$GIT_DIR/worktrees’ を
     すぐに剪定(prune)するか、「never」を使用して剪定を抑制することがで
     きます。

gc.reflogExpire
gc.<pattern>.reflogExpire
     「git reflog expire」は、この時間より古いreflogエントリを削除します
     。デフォルトは90日です。値「now」はすべてのエントリをすぐに期限切れ
     にし、「never」は期限切れを完全に抑制します。中央に「<pattern>」(例
     :「refs/stash」)がある場合、設定は <pattern> に一致するrefにのみ適
     用されます。

gc.reflogExpireUnreachable
gc.<pattern>.reflogExpireUnreachable
     _git reflog expire_ は、この時間より古いreflogエントリを削除し、現
     在の先端(the current tip)から到達不能にします。デフォルトは30日です
     。値「now」はすべてのエントリをすぐに期限切れにし、「never」は期限
     切れを完全に抑制します。中央に「<pattern>」(例:「refs/stash」)があ
     る場合、設定は <pattern> に一致するrefにのみ適用されます。

     これらのタイプのエントリは通常、 ‘git commit--amend’ または ‘git
     rebase’ を使用した結果として作成され、修正またはリベースが発生する
     前のコミットです。これらの変更は現在のプロジェクトの一部ではないた
     め、ほとんどのユーザーはそれらをより早く期限切れにしたいと思うでし
     ょう。そのため、デフォルトは ‘gc.reflogExpire’ よりも積極的です。

gc.rerereResolved
     以前に解決した競合するマージの記録は、「git rerere gc」が実行される
     ときに、この設定値で指定の日数保持されます。より人間が読める「
     1.month.ago」などを使用することもできます。デフォルトは60日です。
     git-rerere(1) を参照してください。

gc.rerereUnresolved
     _git rerere gc_ が実行されると、解決していない競合するマージの記録
     がこの設定値の日数保持されます。より人間が読める「1.month.ago」など
     を使用することもできます。デフォルトは15日です。 git-rerere(1) を参
     照してください。


NOTES
*****

_git gc_ は、リポジトリ内のどこかで参照されているオブジェクトを削除しな
いように非常に努力しています。特に、現在のブランチとタグのセットによって
参照されるオブジェクトだけでなく、インデックス、リモートトラッキングブラ
ンチ、reflog（後で修正または巻き戻されたブランチのコミットを参照する可能
性がある）などによって参照されるオブジェクトも保持されます。それ以外の場
合は、 refs/* 名前空間にあります。オブジェクトに添付された(「git notes」
によって作成された種類の) noteは、オブジェクトの存続に寄与しないことに注
意してください。一部のオブジェクトが削除されることを期待していて、削除さ
れない場合は、それらの場所をすべて確認し、それらの参照を削除することが理
にかなっているかどうかを判断してください。

   一方、「git gc」が別のプロセスと同時に実行されると、他のプロセスが使
用しているが参照を作成していないオブジェクトが削除されるリスクがあります
。これにより、他のプロセスが失敗したり、他のプロセスが後で削除されたオブ
ジェクトへの参照を追加した場合にリポジトリが破損したりする可能性がありま
す。 Gitには、この問題を大幅に軽減する2つの機能があります:

  1. ‘--prune’ の日付よりも新しい変更時刻を持つオブジェクトは、そこから
     到達可能なすべてのモノと共にに保持されます。

  2. データベースにオブジェクトを追加するほとんどの操作は、オブジェクト
     がすでに存在する場合はその変更時刻を更新して、 #1 が適用されるよう
     にします。

   ただし、これらの機能は完全なソリューションには及ばないため、コマンド
を同時に実行するユーザーは、破損のリスクを抱えて生活する必要があります
(実際にはリスクは低いようです)。


HOOKS
*****

‘git gc --auto’ コマンドは、 _pre-auto-gc_ フックを実行します。 詳細につ
いては、 githooks(5) を参照してください。


SEE ALSO
********

git-prune(1) git-reflog(1) git-repack(1) git-rerere(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-get-tar-commit-id,  Up: Top

Name
****

git-get-tar-commit-id — git-archiveを使用して作成されたアーカイブからコ
ミットIDを抽出します


Synopsis
********

     git get-tar-commit-id


DESCRIPTION
***********

_git archive_ によって作成されたtarアーカイブを標準入力から読み取り、そ
こに保存されているコミットIDを抽出します。入力の最初の1024バイトのみを読
み取るため、実行時間はtarアーカイブのサイズに大きく影響されることはあり
ません。

   コミットIDが見つからない場合、 _git get-tar-commit-id_ は何も出力せず
リターンコード1を返すだけです。これは、アーカイブが _git archive_ を使用
して作成されていない場合、または _git archive_ の最初のパラメーターが、
コミットIDまたはタグではなくツリーIDだった場合に発生する可能性があります
。(訳注:入力がtarアーカイブで無い場合はstderrにtarアーカイブで無い旨のエ
ラー出力があり、exit code は 128。入力がtarアーカイブの場合で、コミット
IDが見つからない場合は表記どおりstdout/stderr出力一切無しでexit code 1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-grep,  Up: Top

Name
****

git-grep — Print lines matching a pattern


Synopsis
********

     git grep [-a | –text] [-I] [–textconv] [-i | –ignore-case] [-w | –word-regexp]
                [-v | –invert-match] [-h|-H] [–full-name]
                [-E | –extended-regexp] [-G | –basic-regexp]
                [-P | –perl-regexp]
                [-F | –fixed-strings] [-n | –line-number] [–column]
                [-l | –files-with-matches] [-L | –files-without-match]
                [(-O | –open-files-in-pager) [<pager>]]
                [-z | –null]
                [ -o | –only-matching ] [-c | –count] [–all-match] [-q | –quiet]
                [–max-depth <depth>] [–[no-]recursive]
                [–color[=<when>] | –no-color]
                [–break] [–heading] [-p | –show-function]
                [-A <post-context>] [-B <pre-context>] [-C <context>]
                [-W | –function-context]
                [–threads <num>]
                [-f <file>] [-e] <pattern>
                [–and|–or|–not|(|)|-e <pattern>…]
                [–recurse-submodules] [–parent-basename <basename>]
                [ [–[no-]exclude-standard] [–cached | –no-index | –untracked] | <tree>…]
                [–] [<pathspec>…]


DESCRIPTION
***********

Look for specified patterns in the tracked files in the work tree, blobs
registered in the index file, or blobs in given tree objects.  Patterns
are lists of one or more search expressions separated by newline
characters.  An empty string as search expression matches all lines.


OPTIONS
*******

‘--cached’
     Instead of searching tracked files in the working tree, search
     blobs registered in the index file.

‘--no-index’
     Search files in the current directory that is not managed by Git.

‘--untracked’
     In addition to searching in the tracked files in the working tree,
     search also in untracked files.

‘--no-exclude-standard’
     Also search in ignored files by not honoring the ‘.gitignore’
     mechanism.  Only useful with ‘--untracked’.

‘--exclude-standard’
     Do not pay attention to ignored files specified via the
     ‘.gitignore’ mechanism.  Only useful when searching files in the
     current directory with ‘--no-index’.

‘--recurse-submodules’
     Recursively search in each submodule that is active and checked out
     in the repository.  When used in combination with the <tree> option
     the prefix of all submodule output will be the name of the parent
     project’s <tree> object.  This option has no effect if ‘--no-index’
     is given.

‘-a’
‘--text’
     Process binary files as if they were text.

‘--textconv’
     Honor textconv filter settings.

‘--no-textconv’
     Do not honor textconv filter settings.  This is the default.

‘-i’
‘--ignore-case’
     Ignore case differences between the patterns and the files.

‘-I’
     Don’t match the pattern in binary files.

‘--max-depth <depth>’
     For each <pathspec> given on command line, descend at most <depth>
     levels of directories.  A value of -1 means no limit.  This option
     is ignored if <pathspec> contains active wildcards.  In other words
     if "a*" matches a directory named "a*", "*" is matched literally so
     –max-depth is still effective.

‘-r’
‘--recursive’
     Same as ‘--max-depth=-1’; this is the default.

‘--no-recursive’
     Same as ‘--max-depth=0’.

‘-w’
‘--word-regexp’
     Match the pattern only at word boundary (either begin at the
     beginning of a line, or preceded by a non-word character; end at
     the end of a line or followed by a non-word character).

‘-v’
‘--invert-match’
     Select non-matching lines.

‘-h’
‘-H’
     By default, the command shows the filename for each match.  ‘-h’
     option is used to suppress this output.  ‘-H’ is there for
     completeness and does not do anything except it overrides ‘-h’
     given earlier on the command line.

‘--full-name’
     When run from a subdirectory, the command usually outputs paths
     relative to the current directory.  This option forces paths to be
     output relative to the project top directory.

‘-E’
‘--extended-regexp’
‘-G’
‘--basic-regexp’
     Use POSIX extended/basic regexp for patterns.  Default is to use
     basic regexp.

‘-P’
‘--perl-regexp’
     Use Perl-compatible regular expressions for patterns.

     Support for these types of regular expressions is an optional
     compile-time dependency.  If Git wasn’t compiled with support for
     them providing this option will cause it to die.

‘-F’
‘--fixed-strings’
     Use fixed strings for patterns (don’t interpret pattern as a
     regex).

‘-n’
‘--line-number’
     Prefix the line number to matching lines.

‘--column’
     Prefix the 1-indexed byte-offset of the first match from the start
     of the matching line.

‘-l’
‘--files-with-matches’
‘--name-only’
‘-L’
‘--files-without-match’
     Instead of showing every matched line, show only the names of files
     that contain (or do not contain) matches.  For better compatibility
     with _git diff_, ‘--name-only’ is a synonym for
     ‘--files-with-matches’.

‘-O[<pager>]’
‘--open-files-in-pager[=<pager>]’
     Open the matching files in the pager (not the output of _grep_).
     If the pager happens to be "less" or "vi", and the user specified
     only one pattern, the first file is positioned at the first match
     automatically.  The ‘pager’ argument is optional; if specified, it
     must be stuck to the option without a space.  If ‘pager’ is
     unspecified, the default pager will be used (see ‘core.pager’ in
     git-config(1)).

‘-z’
‘--null’
     Use \0 as the delimiter for pathnames in the output, and print them
     verbatim.  Without this option, pathnames with "unusual" characters
     are quoted as explained for the configuration variable
     core.quotePath (see git-config(1)).

‘-o’
‘--only-matching’
     Print only the matched (non-empty) parts of a matching line, with
     each such part on a separate output line.

‘-c’
‘--count’
     Instead of showing every matched line, show the number of lines
     that match.

‘--color[=<when>]’
     Show colored matches.  The value must be always (the default),
     never, or auto.

‘--no-color’
     Turn off match highlighting, even when the configuration file gives
     the default to color output.  Same as ‘--color=never’.

‘--break’
     Print an empty line between matches from different files.

‘--heading’
     Show the filename above the matches in that file instead of at the
     start of each shown line.

‘-p’
‘--show-function’
     Show the preceding line that contains the function name of the
     match, unless the matching line is a function name itself.  The
     name is determined in the same way as ‘git diff’ works out patch
     hunk headers (see _Defining a custom hunk-header_ in
     gitattributes(5)).

‘-<num>’
‘-C <num>’
‘--context <num>’
     Show <num> leading and trailing lines, and place a line containing
     ‘--’ between contiguous groups of matches.

‘-A <num>’
‘--after-context <num>’
     Show <num> trailing lines, and place a line containing ‘--’ between
     contiguous groups of matches.

‘-B <num>’
‘--before-context <num>’
     Show <num> leading lines, and place a line containing ‘--’ between
     contiguous groups of matches.

‘-W’
‘--function-context’
     Show the surrounding text from the previous line containing a
     function name up to the one before the next function name,
     effectively showing the whole function in which the match was
     found.  The function names are determined in the same way as ‘git
     diff’ works out patch hunk headers (see _Defining a custom
     hunk-header_ in gitattributes(5)).

‘--threads <num>’
     Number of grep worker threads to use.  See ‘grep.threads’ in
     _CONFIGURATION_ for more information.

‘-f <file>’
     Read patterns from <file>, one per line.

     Passing the pattern via <file> allows for providing a search
     pattern containing a \0.

     Not all pattern types support patterns containing \0.  Git will
     error out if a given pattern type can’t support such a pattern.
     The ‘--perl-regexp’ pattern type when compiled against the PCRE v2
     backend has the widest support for these types of patterns.

     In versions of Git before 2.23.0 patterns containing \0 would be
     silently considered fixed.  This was never documented, there were
     also odd and undocumented interactions between e.g.  non-ASCII
     patterns containing \0 and ‘--ignore-case’.

     In future versions we may learn to support patterns containing \0
     for more search backends, until then we’ll die when the pattern
     type in question doesn’t support them.

‘-e’
     The next parameter is the pattern.  This option has to be used for
     patterns starting with ‘-’ and should be used in scripts passing
     user input to grep.  Multiple patterns are combined by _or_.

‘--and’
‘--or’
‘--not’
( … )
     Specify how multiple patterns are combined using Boolean
     expressions.  ‘--or’ is the default operator.  ‘--and’ has higher
     precedence than ‘--or’.  ‘-e’ has to be used for all patterns.

‘--all-match’
     When giving multiple pattern expressions combined with ‘--or’, this
     flag is specified to limit the match to files that have lines to
     match all of them.

‘-q’
‘--quiet’
     Do not output matched lines; instead, exit with status 0 when there
     is a match and with non-zero status when there isn’t.

<tree>…
     Instead of searching tracked files in the working tree, search
     blobs in the given trees.

–
     Signals the end of options; the rest of the parameters are
     <pathspec> limiters.

<pathspec>…
     If given, limit the search to paths matching at least one pattern.
     Both leading paths match and glob(7) patterns are supported.

     For more details about the <pathspec> syntax, see the _pathspec_
     entry in gitglossary(7).


EXAMPLES
********

‘git grep 'time_t' -- '*.[ch]'’
     Looks for ‘time_t’ in all tracked .c and .h files in the working
     directory and its subdirectories.

‘git grep -e '#define' --and \( -e MAX_PATH -e PATH_MAX \)’
     Looks for a line that has ‘#define’ and either ‘MAX_PATH’ or
     ‘PATH_MAX’.

‘git grep --all-match -e NODE -e Unexpected’
     Looks for a line that has ‘NODE’ or ‘Unexpected’ in files that have
     lines that match both.

‘git grep solution -- :^Documentation’
     Looks for ‘solution’, excluding files in ‘Documentation’.


NOTES ON THREADS
****************

The ‘--threads’ option (and the grep.threads configuration) will be
ignored when ‘--open-files-in-pager’ is used, forcing a single-threaded
execution.

   When grepping the object store (with ‘--cached’ or giving tree
objects), running with multiple threads might perform slower than single
threaded if ‘--textconv’ is given and there’re too many text
conversions.  So if you experience low performance in this case, it
might be desirable to use ‘--threads=1’.


CONFIGURATION
*************

grep.lineNumber
     If set to true, enable ‘-n’ option by default.

grep.column
     If set to true, enable the ‘--column’ option by default.

grep.patternType
     Set the default matching behavior.  Using a value of _basic_,
     _extended_, _fixed_, or _perl_ will enable the ‘--basic-regexp’,
     ‘--extended-regexp’, ‘--fixed-strings’, or ‘--perl-regexp’ option
     accordingly, while the value _default_ will return to the default
     matching behavior.

grep.extendedRegexp
     If set to true, enable ‘--extended-regexp’ option by default.  This
     option is ignored when the ‘grep.patternType’ option is set to a
     value other than _default_.

grep.threads
     Number of grep worker threads to use.  If unset (or set to 0), Git
     will use as many threads as the number of logical cores available.

grep.fullName
     If set to true, enable ‘--full-name’ option by default.

grep.fallbackToNoIndex
     If set to true, fall back to git grep –no-index if git grep is
     executed outside of a git repository.  Defaults to false.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-gui,  Up: Top

Name
****

git-gui — Gitのための移植性の高いGUI


Synopsis
********

     git gui [<command>] [arguments]


DESCRIPTION
***********

Gitの為の Tcl/Tk ベースのGUIです。「git gui」は、ユーザーが新しいコミッ
トを作成し、既存のコミットを修正し、ブランチを作成し、ローカルマージを実
行し、リモートリポジトリにフェッチ/プッシュすることでリポジトリに変更を
加えることができるようにすることに重点を置いています。

   _gitk_ とは異なり、 _git gui_ はコミットの生成と単一ファイルの注釈に
焦点を合わせており、プロジェクトの履歴は表示しません。 ただし、「git
gui」内から「gitk」セッションを開始するためのメニュー操作を提供します。

   「git gui」は、すべての一般的なUNIXシステム、Mac OS X、および
Windows(CygwinとMSYSの両方)で動作することが知られています。可能な限り、
OS固有のユーザーインターフェイスガイドラインに従い、「git gui」を各OSの
ユーザーにとってかなり自然なインターフェイスにしようとしています。


COMMANDS
********

blame
     指定されたバージョンの指定されたファイル(または指定されていない場合
     は作業ディレクトリ)でblameビューアを起動します。

browser
     指定されたコミット内のすべてのファイルを表示するツリーブラウザを起
     動します。ブラウザで選択したファイルをblemeビューアで開きます。

citool
     _git gui_ を開始し、シェルを終了してシェルに戻る前に、正確に1つのコ
     ミットを行うように調整します。インターフェイスはコミットアクション
     のみに制限されているため、アプリケーションの起動時間がわずかに短縮
     され、メニューバーが簡素化されます。

version
     現在実行中の「git gui」のバージョンを表示します。


Examples
********

‘git gui blame Makefile’
     現在の作業ディレクトリにあるファイル「Makefile」の内容を表示し、各
     行の元の作成者と、その行を現在の場所に移動した人の両方に注釈を付け
     ます。コミットされていないファイルには注釈が付けられ、(存在する場合
     )コミットされていない変更は「まだコミットされていません」と明示され
     ます。

‘git gui blame v0.99.8 Makefile’
     リビジョン「v0.99.8」の「Makefile」の内容を表示し、各行に注釈を付け
     ます。上記の例とは異なり、ファイルは作業ディレクトリではなくオブジ
     ェクトデータベースから読み取られます。

‘git gui blame --line=100 Makefile’
     上記のように注釈をロードし、100行目を中心にビューを自動的にスクロー
     ルします。

‘git gui citool’
     1つのコミットを行い、完了したらシェルに戻ります。このコマンドは、コ
     ミットを行う以外の方法でウィンドウが閉じられた場合、ゼロ以外の終了
     コードを返します。

‘git gui citool --amend’
     インターフェイスの「Amend Last Commit」モードを自動的に開始します。

‘git gui citool --nocommit’
     通常のcitoolとして動作しますが、コミットを行う代わりに、ゼロの終了
     コードで終了します。インデックスにマージされていないエントリが含ま
     れていないことを引き続きチェックするため、 git-mergetool(1) のGUIバ
     ージョンとして使用できます。

‘git citool’
     ‘git gui citool’ (上記)と同じです。

‘git gui browser maint’
     _maint_ ブランチのツリーのブラウザを表示します。ブラウザで選択した
     ファイルは、内部のblameビューアで表示できます。


SEE ALSO
********

gitk(1)
     Gitリポジトリブラウザ。 ブランチ、コミット履歴、ファイルの差分を表
     示します。 gitkは、「git gui」のリポジトリ視覚化操作によって開始さ
     れるユーティリティです。


Other
*****

「git gui」は実際には独立したプロジェクトとして維持されていますが、エン
ドユーザーの便宜のために安定したバージョンがGitスイートの一部として配布
されています。

   _git gui_ プロジェクトの公式リポジトリは以下の場所にあります:

     https://github.com/prati0100/git-gui.git/


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-hash-object,  Up: Top

Name
****

git-hash-object — オブジェクトIDを計算し、オプションでファイルからブロブ
を作成する


Synopsis
********

     git hash-object [-t <type>] [-w] [–path=<file>|–no-filters] [–stdin [–literally]] [–] <file>…
     git hash-object [-t <type>] [-w] –stdin-paths [–no-filters]


DESCRIPTION
***********

指定のファイル(作業ツリーの外部にある可能性あり)の内容を使用して、指定さ
れたタイプのオブジェクトのオブジェクトID値を計算し、オブジェクトIDを標準
出力に報告します。オプションで結果のオブジェクトをオブジェクトデータベー
スに書き込みます。 <type> が指定されていない場合、デフォルトで「blob」に
なります。


OPTIONS
*******

‘-t <type>’
     タイプの指定(デフォルト: "blob")。

‘-w’
     実際にオブジェクトをオブジェクトデータベースに書き込みます。

‘--stdin’
     ファイルからではなく、標準入力からオブジェクトを読み取ります。

‘--stdin-paths’
     コマンドラインからではなく、標準入力から1行に1つずつファイル名を読
     み取ります。

‘--path’
     指定されたパスにあるオブジェクトをハッシュします。ファイルの場所は
     ハッシュ値に直接影響しませんが、パスを使用して、オブジェクトデータ
     ベースに配置する前にオブジェクトに適用するGitフィルターを決定し、フ
     ィルターを適用した結果、実際のブロブを配置します。オブジェクトデー
     タベースへの入力は、指定されたファイルとは異なる場合があります。こ
     のオプションは主に、作業ディレクトリの外部にある一時ファイルまたは
     標準入力から読み取られたファイルをハッシュする場合に役立ちます。

‘--no-filters’
     行末変換など、属性メカニズムによって選択された入力フィルターを無視
     して、コンテンツをそのままハッシュします。 ファイルが標準入力から読
     み取られる場合、 ‘--path’ オプションが指定されていない限り、これは
     常に暗黙に指定されたものとみなします。

‘--literally’
     ‘--stdin’ が、標準のオブジェクトパースやgit-fsckチェックに合格しな
     い可能性のあるガベージをハッシュして緩いオブジェクトにできるように
     します。Git自体のストレステストや、野生で遭遇した破損または偽のオブ
     ジェクトの特性の再現に役立ちます。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-help,  Up: Top

Name
****

git-help — Display help information about Git


Synopsis
********

     git help [-a|–all [–[no-]verbose]] [-g|–guides]
                [-i|–info|-m|–man|-w|–web] [COMMAND|GUIDE]


DESCRIPTION
***********

With no options and no COMMAND or GUIDE given, the synopsis of the _git_
command and a list of the most commonly used Git commands are printed on
the standard output.

   If the option ‘--all’ or ‘-a’ is given, all available commands are
printed on the standard output.

   If the option ‘--guides’ or ‘-g’ is given, a list of the Git concept
guides is also printed on the standard output.

   If a command, or a guide, is given, a manual page for that command or
guide is brought up.  The _man_ program is used by default for this
purpose, but this can be overridden by other options or configuration
variables.

   If an alias is given, git shows the definition of the alias on
standard output.  To get the manual page for the aliased command, use
‘git COMMAND --help’.

   Note that ‘git --help ...’ is identical to ‘git help ...’ because the
former is internally converted into the latter.

   To display the git(1) man page, use ‘git help git’.

   This page can be displayed with _git help help_ or ‘git help --help’


OPTIONS
*******

‘-a’
‘--all’
     Prints all the available commands on the standard output.  This
     option overrides any given command or guide name.

‘--verbose’
     When used with ‘--all’ print description for all recognized
     commands.  This is the default.

‘-c’
‘--config’
     List all available configuration variables.  This is a short
     summary of the list in git-config(1).

‘-g’
‘--guides’
     Prints a list of the Git concept guides on the standard output.
     This option overrides any given command or guide name.

‘-i’
‘--info’
     Display manual page for the command in the _info_ format.  The
     _info_ program will be used for that purpose.

‘-m’
‘--man’
     Display manual page for the command in the _man_ format.  This
     option may be used to override a value set in the ‘help.format’
     configuration variable.

     By default the _man_ program will be used to display the manual
     page, but the ‘man.viewer’ configuration variable may be used to
     choose other display programs (see below).

‘-w’
‘--web’
     Display manual page for the command in the _web_ (HTML) format.  A
     web browser will be used for that purpose.

     The web browser can be specified using the configuration variable
     ‘help.browser’, or ‘web.browser’ if the former is not set.  If none
     of these config variables is set, the _git web–browse_ helper
     script (called by _git help_) will pick a suitable default.  See
     git-web–browse(1) for more information about this.


CONFIGURATION VARIABLES
***********************


help.format
===========

If no command-line option is passed, the ‘help.format’ configuration
variable will be checked.  The following values are supported for this
variable; they make _git help_ behave as their corresponding command-
line option:

   • "man" corresponds to _-m|–man_,

   • "info" corresponds to _-i|–info_,

   • "web" or "html" correspond to _-w|–web_.


help.browser, web.browser and browser.<tool>.path
=================================================

The ‘help.browser’, ‘web.browser’ and ‘browser.<tool>.path’ will also be
checked if the _web_ format is chosen (either by command-line option or
configuration variable).  See _-w|–web_ in the OPTIONS section above and
git-web–browse(1).


man.viewer
==========

The ‘man.viewer’ configuration variable will be checked if the _man_
format is chosen.  The following values are currently supported:

   • "man": use the _man_ program as usual,

   • "woman": use _emacsclient_ to launch the "woman" mode in emacs
     (this only works starting with emacsclient versions 22),

   • "konqueror": use _kfmclient_ to open the man page in a new
     konqueror tab (see _Note about konqueror_ below).

   Values for other tools can be used if there is a corresponding
‘man.<tool>.cmd’ configuration entry (see below).

   Multiple values may be given to the ‘man.viewer’ configuration
variable.  Their corresponding programs will be tried in the order
listed in the configuration file.

   For example, this configuration:

             [man]
                     viewer = konqueror
                     viewer = woman

   will try to use konqueror first.  But this may fail (for example, if
DISPLAY is not set) and in that case emacs’ woman mode will be tried.

   If everything fails, or if no viewer is configured, the viewer
specified in the ‘GIT_MAN_VIEWER’ environment variable will be tried.
If that fails too, the _man_ program will be tried anyway.


man.<tool>.path
===============

You can explicitly provide a full path to your preferred man viewer by
setting the configuration variable ‘man.<tool>.path’.  For example, you
can configure the absolute path to konqueror by setting
_man.konqueror.path_.  Otherwise, _git help_ assumes the tool is
available in PATH.


man.<tool>.cmd
==============

When the man viewer, specified by the ‘man.viewer’ configuration
variables, is not among the supported ones, then the corresponding
‘man.<tool>.cmd’ configuration variable will be looked up.  If this
variable exists then the specified tool will be treated as a custom
command and a shell eval will be used to run the command with the man
page passed as arguments.


Note about konqueror
====================

When _konqueror_ is specified in the ‘man.viewer’ configuration
variable, we launch _kfmclient_ to try to open the man page on an
already opened konqueror in a new tab if possible.

   For consistency, we also try such a trick if _man.konqueror.path_ is
set to something like ‘A_PATH_TO/konqueror’.  That means we will try to
launch ‘A_PATH_TO/kfmclient’ instead.

   If you really want to use _konqueror_, then you can use something
like the following:

             [man]
                     viewer = konq

             [man "konq"]
                     cmd = A_PATH_TO/konqueror


Note about git config –global
=============================

Note that all these configuration variables should probably be set using
the ‘--global’ flag, for example like this:

     $ git config --global help.format web
     $ git config --global web.browser firefox

   as they are probably more user specific than repository specific.
See git-config(1) for more information about this.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-http-backend,  Up: Top

Name
****

git-http-backend — Server side implementation of Git over HTTP


Synopsis
********

     git http-backend


DESCRIPTION
***********

A simple CGI program to serve the contents of a Git repository to Git
clients accessing the repository over http:// and https:// protocols.
The program supports clients fetching using both the smart HTTP protocol
and the backwards-compatible dumb HTTP protocol, as well as clients
pushing using the smart HTTP protocol.  It also supports Git’s
more-efficient "v2" protocol if properly configured; see the discussion
of ‘GIT_PROTOCOL’ in the ENVIRONMENT section below.

   It verifies that the directory has the magic file
"git-daemon-export-ok", and it will refuse to export any Git directory
that hasn’t explicitly been marked for export this way (unless the
‘GIT_HTTP_EXPORT_ALL’ environmental variable is set).

   By default, only the ‘upload-pack’ service is enabled, which serves
_git fetch-pack_ and _git ls-remote_ clients, which are invoked from
_git fetch_, _git pull_, and _git clone_.  If the client is
authenticated, the ‘receive-pack’ service is enabled, which serves _git
send-pack_ clients, which is invoked from _git push_.


SERVICES
********

These services can be enabled/disabled using the per-repository
configuration file:

http.getanyfile
     This serves Git clients older than version 1.6.6 that are unable to
     use the upload pack service.  When enabled, clients are able to
     read any file within the repository, including objects that are no
     longer reachable from a branch but are still present.  It is
     enabled by default, but a repository can disable it by setting this
     configuration item to ‘false’.

http.uploadpack
     This serves _git fetch-pack_ and _git ls-remote_ clients.  It is
     enabled by default, but a repository can disable it by setting this
     configuration item to ‘false’.

http.receivepack
     This serves _git send-pack_ clients, allowing push.  It is disabled
     by default for anonymous users, and enabled by default for users
     authenticated by the web server.  It can be disabled by setting
     this item to ‘false’, or enabled for all users, including anonymous
     users, by setting it to ‘true’.


URL TRANSLATION
***************

To determine the location of the repository on disk, _git http-backend_
concatenates the environment variables PATH_INFO, which is set
automatically by the web server, and GIT_PROJECT_ROOT, which must be set
manually in the web server configuration.  If GIT_PROJECT_ROOT is not
set, _git http-backend_ reads PATH_TRANSLATED, which is also set
automatically by the web server.


EXAMPLES
********

All of the following examples map ‘http://$hostname/git/foo/bar.git’ to
‘/var/www/git/foo/bar.git’.

Apache 2.x
     Ensure mod_cgi, mod_alias, and mod_env are enabled, set
     GIT_PROJECT_ROOT (or DocumentRoot) appropriately, and create a
     ScriptAlias to the CGI:

          SetEnv GIT_PROJECT_ROOT /var/www/git
          SetEnv GIT_HTTP_EXPORT_ALL
          ScriptAlias /git/ /usr/libexec/git-core/git-http-backend/

          # This is not strictly necessary using Apache and a modern version of
          # git-http-backend, as the webserver will pass along the header in the
          # environment as HTTP_GIT_PROTOCOL, and http-backend will copy that into
          # GIT_PROTOCOL. But you may need this line (or something similar if you
          # are using a different webserver), or if you want to support older Git
          # versions that did not do that copying.
          #
          # Having the webserver set up GIT_PROTOCOL is perfectly fine even with
          # modern versions (and will take precedence over HTTP_GIT_PROTOCOL,
          # which means it can be used to override the client's request).
          SetEnvIf Git-Protocol ".*" GIT_PROTOCOL=$0

     To enable anonymous read access but authenticated write access,
     require authorization for both the initial ref advertisement (which
     we detect as a push via the service parameter in the query string),
     and the receive-pack invocation itself:

          RewriteCond %{QUERY_STRING} service=git-receive-pack [OR]
          RewriteCond %{REQUEST_URI} /git-receive-pack$
          RewriteRule ^/git/ - [E=AUTHREQUIRED:yes]

          <LocationMatch "^/git/">
                  Order Deny,Allow
                  Deny from env=AUTHREQUIRED

                  AuthType Basic
                  AuthName "Git Access"
                  Require group committers
                  Satisfy Any
                  ...
          </LocationMatch>

     If you do not have ‘mod_rewrite’ available to match against the
     query string, it is sufficient to just protect ‘git-receive-pack’
     itself, like:

          <LocationMatch "^/git/.*/git-receive-pack$">
                  AuthType Basic
                  AuthName "Git Access"
                  Require group committers
                  ...
          </LocationMatch>

     In this mode, the server will not request authentication until the
     client actually starts the object negotiation phase of the push,
     rather than during the initial contact.  For this reason, you must
     also enable the ‘http.receivepack’ config option in any
     repositories that should accept a push.  The default behavior, if
     ‘http.receivepack’ is not set, is to reject any pushes by
     unauthenticated users; the initial request will therefore report
     ‘403 Forbidden’ to the client, without even giving an opportunity
     for authentication.

     To require authentication for both reads and writes, use a Location
     directive around the repository, or one of its parent directories:

          <Location /git/private>
                  AuthType Basic
                  AuthName "Private Git Access"
                  Require group committers
                  ...
          </Location>

     To serve gitweb at the same url, use a ScriptAliasMatch to only
     those URLs that _git http-backend_ can handle, and forward the rest
     to gitweb:

          ScriptAliasMatch \
                  "(?x)^/git/(.*/(HEAD | \
                                  info/refs | \
                                  objects/(info/[^/]+ | \
                                           [0-9a-f]{2}/[0-9a-f]{38} | \
                                           pack/pack-[0-9a-f]{40}\.(pack|idx)) | \
                                  git-(upload|receive)-pack))$" \
                  /usr/libexec/git-core/git-http-backend/$1

          ScriptAlias /git/ /var/www/cgi-bin/gitweb.cgi/

     To serve multiple repositories from different gitnamespaces(7) in a
     single repository:

          SetEnvIf Request_URI "^/git/([^/]*)" GIT_NAMESPACE=$1
          ScriptAliasMatch ^/git/[^/]*(.*) /usr/libexec/git-core/git-http-backend/storage.git$1

Accelerated static Apache 2.x
     Similar to the above, but Apache can be used to return static files
     that are stored on disk.  On many systems this may be more
     efficient as Apache can ask the kernel to copy the file contents
     from the file system directly to the network:

          SetEnv GIT_PROJECT_ROOT /var/www/git

          AliasMatch ^/git/(.*/objects/[0-9a-f]{2}/[0-9a-f]{38})$          /var/www/git/$1
          AliasMatch ^/git/(.*/objects/pack/pack-[0-9a-f]{40}.(pack|idx))$ /var/www/git/$1
          ScriptAlias /git/ /usr/libexec/git-core/git-http-backend/

     This can be combined with the gitweb configuration:

          SetEnv GIT_PROJECT_ROOT /var/www/git

          AliasMatch ^/git/(.*/objects/[0-9a-f]{2}/[0-9a-f]{38})$          /var/www/git/$1
          AliasMatch ^/git/(.*/objects/pack/pack-[0-9a-f]{40}.(pack|idx))$ /var/www/git/$1
          ScriptAliasMatch \
                  "(?x)^/git/(.*/(HEAD | \
                                  info/refs | \
                                  objects/info/[^/]+ | \
                                  git-(upload|receive)-pack))$" \
                  /usr/libexec/git-core/git-http-backend/$1
          ScriptAlias /git/ /var/www/cgi-bin/gitweb.cgi/

Lighttpd
     Ensure that ‘mod_cgi’, ‘mod_alias’, ‘mod_auth’, ‘mod_setenv’ are
     loaded, then set ‘GIT_PROJECT_ROOT’ appropriately and redirect all
     requests to the CGI:

          alias.url += ( "/git" => "/usr/lib/git-core/git-http-backend" )
          $HTTP["url"] =~ "^/git" {
                  cgi.assign = ("" => "")
                  setenv.add-environment = (
                          "GIT_PROJECT_ROOT" => "/var/www/git",
                          "GIT_HTTP_EXPORT_ALL" => ""
                  )
          }

     To enable anonymous read access but authenticated write access:

          $HTTP["querystring"] =~ "service=git-receive-pack" {
                  include "git-auth.conf"
          }
          $HTTP["url"] =~ "^/git/.*/git-receive-pack$" {
                  include "git-auth.conf"
          }

     where ‘git-auth.conf’ looks something like:

          auth.require = (
                  "/" => (
                          "method" => "basic",
                          "realm" => "Git Access",
                          "require" => "valid-user"
                         )
          )
          # ...and set up auth.backend here

     To require authentication for both reads and writes:

          $HTTP["url"] =~ "^/git/private" {
                  include "git-auth.conf"
          }


ENVIRONMENT
***********

_git http-backend_ relies upon the ‘CGI’ environment variables set by
the invoking web server, including:

   • PATH_INFO (if GIT_PROJECT_ROOT is set, otherwise PATH_TRANSLATED)

   • REMOTE_USER

   • REMOTE_ADDR

   • CONTENT_TYPE

   • QUERY_STRING

   • REQUEST_METHOD

   The ‘GIT_HTTP_EXPORT_ALL’ environmental variable may be passed to
_git-http-backend_ to bypass the check for the "git-daemon-export-ok"
file in each repository before allowing export of that repository.

   The ‘GIT_HTTP_MAX_REQUEST_BUFFER’ environment variable (or the
‘http.maxRequestBuffer’ config variable) may be set to change the
largest ref negotiation request that git will handle during a fetch; any
fetch requiring a larger buffer will not succeed.  This value should not
normally need to be changed, but may be helpful if you are fetching from
a repository with an extremely large number of refs.  The value can be
specified with a unit (e.g., ‘100M’ for 100 megabytes).  The default is
10 megabytes.

   Clients may probe for optional protocol capabilities (like the v2
protocol) using the ‘Git-Protocol’ HTTP header.  In order to support
these, the contents of that header must appear in the ‘GIT_PROTOCOL’
environment variable.  Most webservers will pass this header to the CGI
via the ‘HTTP_GIT_PROTOCOL’ variable, and ‘git-http-backend’ will
automatically copy that to ‘GIT_PROTOCOL’.  However, some webservers may
be more selective about which headers they’ll pass, in which case they
need to be configured explicitly (see the mention of ‘Git-Protocol’ in
the Apache config from the earlier EXAMPLES section).

   The backend process sets GIT_COMMITTER_NAME to _$REMOTE_USER_ and
GIT_COMMITTER_EMAIL to _${REMOTE_USER}@http.${REMOTE_ADDR}_, ensuring
that any reflogs created by _git-receive-pack_ contain some identifying
information of the remote user who performed the push.

   All ‘CGI’ environment variables are available to each of the hooks
invoked by the _git-receive-pack_.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-http-fetch,  Up: Top

Name
****

git-http-fetch — HTTPでリモートGitリポジトリからダウンロード


Synopsis
********

     git http-fetch [-c] [-t] [-a] [-d] [-v] [-w filename] [–recover] [–stdin | –packfile=<hash> | <commit>] <url>


DESCRIPTION
***********

HTTPでリモートGitリポジトリからダウンロード

   このコマンドは常にすべてのオブジェクトを取得します。歴史的に、ダウン
ロードするオブジェクトを選択するには、 ‘-a’ と ‘-c’ と ‘-t’ の3つのオプ
ションがありました。それらは現在、何も警告を出さずに無視されます。


OPTIONS
*******

commit-id
     プルするハッシュ、または [URL]/refs/ 下のファイル名 のいずれか。

‘-a, -c, -t’
     これらのオプションは、歴史的な理由により無視されます。

‘-v’
     ダウンロードしたものを報告します。

‘-w <filename>’
     転送が完了した後、ローカル側ドの $GIT_DIR/refs/<filename> の下のフ
     ァイル名にcommit-idを書き込みます。

‘--stdin’
     (この場合は期待されていない)コマンドラインのコミットIDの代わりに、
     _githttp-fetch_ は標準入力からの行を以下の形式であると期待します

          <commit-id>['\t'<filename-as-in--w>]

‘--packfile=<hash>’
     内部使用のみ。 (この場合は期待されていない)コマンドラインのコミット
     IDの代わりに、 _git http-fetch_ は指定されたURLで直接パックファイル
     をフェッチし、 index-pack を使用して対応する .idx ファイルと .keep
     ファイルを生成します。ハッシュは一時ファイルの名前を決定するために
     使用され、任意です。 index-pack の出力は stdout に出力されます。
     ‘--index-pack-args’ が必要です。

‘--index-pack-args=<args>’
     内部使用のみ。 ダウンロードしたパックの内容に対して実行するコマンド
     。引数はスペースで区切られURLエンコードされます。

‘--recover’
     ターゲットから到達可能なすべてのものがフェッチされていることを確認
     します。以前のフェッチが中断された後に使用されます。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-http-push,  Up: Top

Name
****

git-http-push — HTTP/DAV を介してオブジェクトを別のリポジトリにプッシュ
する


Synopsis
********

     git http-push [–all] [–dry-run] [–force] [–verbose] <url> <ref> [<ref>…]


DESCRIPTION
***********

リモートに不足しているオブジェクトをリモートリポジトリに送信し、リモート
ブランチを更新します。

   *注* : libcurlが7.16より古い場合、このコマンドは一時的に無効になりま
す。 これは、組み合わせが機能しないことが報告されており、 リポジトリが破
損する場合があるためです。


OPTIONS
*******

‘--all’
     リモートリポジトリが現在の状態で完全であると想定しません。また、ロ
     ーカルrefの履歴全体のすべてのオブジェクトがリモートリポジトリに存在
     することを確認します。

‘--force’
     通常、コマンドは、上書きに使用されたローカルrefの祖先ではないリモー
     トrefの更新を拒否します。このフラグはこのチェックを無効にします。こ
     れが意味するのは、リモートリポジトリがコミットを失う可能性があると
     いうことです。注意して使用してください。

‘--dry-run’
     実際に更新を送信する以外はすべて行います。

‘--verbose’
     ローカルでウォークされているオブジェクトのリストと、リモートリポジ
     トリに正常に送信されたオブジェクトのリストを報告します。

‘-d’
‘-D’
     リモートリポジトリから <ref> を削除します。指定のブランチをリモート
     HEADにすることはできません。 ‘-d’ を指定する場合は、以下の他の条件
     も満たす必要があります:

        • リモートHEADは、ローカルに存在するオブジェクトに名前解決
          (resolve)できなければなりません。

        • 指定のブランチは、ローカルに存在するオブジェクトに名前解決
          (resolve)します。

        • 指定のブランチは、リモートHEADの祖先です。

<ref>…
     更新したいリモートrefs


SPECIFYING THE REFS
*******************

_<ref>_ 指定は、単一のパターン、またはコロン ":" で区切られた、そのよう
なパターンのペアのいずれかです(これは、ref名にコロンを含めることができな
いことを意味します)。 単一のパターン _<name>_ は、 _<name>:<name>_ の短
縮形です。

   各パターンペアは、送信元側(コロンの前)と宛先側(コロンの後)で構成され
ます。プッシュされるrefは、ソース側に一致する一致を見つけることによって
決定され、プッシュされる場所は、宛先側を使用して決定されます。

   • <src> がローカルrefの1つと正確に一致しない場合は、エラーになります
     。

   • <dst> がどのリモートrefとも一致しない場合、以下のどちらかです

        • "refs/" で始まる必要があります。この場合、文字通り <dst> が宛
          先として使用されます。

        • <src> == <dst> かつ <src> に一致するrefは、リモートrefのセット
          に存在してはなりません。ローカルで一致するref <src> は、宛先の
          名前として使用されます。

   ‘--force’ の指定が無く、<dst> が存在しない場合または <dst> が <src> の
適切なサブセット(つまり、祖先)である場合のみリモートに保存されます。
"fast-forward check" (早送りチェック)と呼ばれるこのチェックは、リモート
refを誤って上書きして、そこから他の人のコミットを失うことを回避するため
に実行されます。

   ‘--force’ を使用すると、すべてのrefに対して fast-forward check が無効
になります。

   オプションで、<ref> パラメーターの前に「+」記号を付けて、そのrefでの
み fast-forward check を無効にすることができます。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-imap-send,  Up: Top

Name
****

git-imap-send — 標準入力からIMAPフォルダへパッチのコレクションを送信しま
す


Synopsis
********

     git imap-send [-v] [-q] [–[no-]curl]


DESCRIPTION
***********

このコマンドは、 ‘git format-patch’ で生成されたmailboxをIMAPドラフトフ
ォルダーにアップロードします。これにより、mailboxファイルを直接読み取る
ことができないメールクライアントを使用している場合と同じように、パッチを
送信できます。このコマンドは、電子メールのフィールドが「From」、「Date」
、「Subject」の順になっている一般的なmailboxでも機能します。

   一般的な使用法は以下のようになります:

   git format-patch –signoff –stdout –attach origin | git imap-send


OPTIONS
*******

‘-v’
‘--verbose’
     にぎやかにしろや。

‘-q’
‘--quiet’
     静かにしろや。

‘--curl’
     トンネリングしない限り、libcurl を使用してIMAPサーバーと通信します
     。Gitが USE_CURL_FOR_IMAP_SEND オプションを設定せずにビルドされた場
     合は無視されます。

‘--no-curl’
     libcurl を使用する代わりに、git独自のIMAPルーチンを使用してIMAPサー
     バーと通信します。Gitが NO_OPENSSL オプションを設定してビルドされた
     場合は無視されます。


CONFIGURATION
*************

このツールを使用するには、 ‘imap.folder’ と、 ‘imap.tunnel’ または
‘imap.host’ のいずれかを、適切な値に設定する必要があります。

imap.folder
     メールをドロップするフォルダー。通常はドラフトフォルダーです。 例：
     「INBOX.Drafts」とか「INBOX/Drafts」とか「[Gmail]/Drafts」です。必
     須です。

imap.tunnel
     サーバーへの直接ネットワーク接続を使用する代わりに、コマンドがパイ
     プされるIMAPサーバーへのトンネルをセットアップするために使用される
     コマンド。 imap.host が設定されていない場合に必須です。

imap.host
     サーバーを識別するURL。 非セキュア接続には ‘imap://’ プレフィックス
     を使用し、セキュア接続には ‘imaps://’ プレフィックスを使用します。
     imap.tunnel が設定されている場合は無視されますが、それ以外の場合は
     必須です。

imap.user
     サーバーにログインするときに使用するユーザー名。

imap.pass
     サーバーにログインするときに使用するパスワード。

imap.port
     サーバー上で接続する整数のポート番号。 デフォルトは、 imap:// ホス
     トの場合は143、 imaps:// ホストの場合は993です。 imap.tunnel が設定
     されている場合は無視されます。

imap.sslverify
     SSL/TLS接続で使用されるサーバー証明書の検証を有効/無効にするブール
     値。デフォルトは ‘true’ です。 imap.tunnel が設定されている場合は無
     視されます。

imap.preformattedHTML
     パッチを送信するときにhtmlエンコーディングの使用を有効/無効にするブ
     ール値。 htmlでエンコードされたパッチは <pre> で囲まれ、コンテンツ
     タイプは text/html になります。皮肉なことに、このオプションを有効に
     すると、Thunderbirdはパッチを plane/text の format=fixed メールとし
     て送信します。デフォルトは ‘false’ です。

imap.authMethod
     IMAPサーバーでの認証の認証方法を指定します。GitがNO_CURLオプション
     を使用してビルドされた場合、curlバージョンが7.34.0より古い場合、ま
     たはgit-imap-sendを ‘--no-curl’ オプションを指定して実行している場
     合、サポートされるメソッドは _CRAM-MD5_ のみです。これが設定されて
     いない場合、「git imap-send」は基本的なIMAPプレーンテキストLOGINコ
     マンドを使用します。


EXAMPLES
********

トンネル(tunnel)モード使用:

     [imap]
         folder = "INBOX.Drafts"
         tunnel = "ssh -q -C user@example.com /usr/bin/imapd ./Maildir 2> /dev/null"

   直接(direct)モード使用:

     [imap]
         folder = "INBOX.Drafts"
         host = imap://imap.example.com
         user = bob
         pass = p4ssw0rd

   SSLで直接モードを使用:

     [imap]
         folder = "INBOX.Drafts"
         host = imaps://imap.example.com
         user = bob
         pass = p4ssw0rd
         port = 123
         ; sslVerify = false

     *Note*

     接続の問題が、セットアップしようとしている(またはセットアップ済の
     )プライベートサーバー ‘example.com’ で使用している証明書が正しく検
     証されていないことが原因であると思われる場合、トラブルシューティン
     グ中に ‘sslVerify=false’ を使用することをお勧めします。

   GmailのIMAPインターフェースの使用:

     [imap]
             folder = "[Gmail]/Drafts"
             host = imaps://imap.gmail.com
             user = user@gmail.com
             port = 993

     *Note*

     "Folder doesn’t exist" というエラーが発生した場合は、代わりに
     ‘folder = "[Google Mail]/Drafts"’ を使用する必要があります。

     *Note*

     Gmailアカウントが英語以外の言語に設定されている場合、 "Drafts" フォ
     ルダの名前がローカライズされます。

   コミットを送信する準備ができたら、以下のコマンドを実行します:

     $ git format-patch --cover-letter -M --stdout origin/master | git imap-send

   メールクライアントで行の折り返しを無効にしてください(GmailのWebインタ
ーフェイスは何があっても行を折り返すため、実際のIMAPクライアント(real
IMAP client)を使用する必要があります)。


CAUTION
*******

電子メールプログラムによって送信される電子メールメッセージがプロジェクト
の基準を満たしていることを確認するのは、依然としてあなたの責任です。多く
のプロジェクトは、パッチを電子メールに添付することを好みません。一部のメ
ールエージェントは、パッチを失敗させる方法でパッチを変換します(たとえば
、行を折り返し、format=flowed として送信します)。これをチェックしておか
ないと、怒りの炎があなたを襲います。

   特に Thunderbird は問題があることが知られています。 Thunderbird のユ
ーザーは右記のWebページにアクセスして詳細を確認できます:
http://kb.mozillazine.org/Plain_text_e-mail_-_Thunderbird#Completely_plain_email
(http://kb.mozillazine.org/Plain_text_e-mail_-_Thunderbird#Completely_plain_email)


SEE ALSO
********

git-format-patch(1), git-send-email(1), mbox(5)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-index-pack,  Up: Top

Name
****

git-index-pack — 既存のパックされたアーカイブのパックインデックスファイ
ル構築


Synopsis
********

     git index-pack [-v] [-o <index-file>] [–[no-]rev-index] <pack-file>
     git index-pack –stdin [–fix-thin] [–keep] [-v] [-o <index-file>]
                       [–[no-]rev-index] [<pack-file>]


DESCRIPTION
***********

指定されたファイルからパックされたアーカイブ(.pack)を読み取り、そのため
のパックインデックスファイル(.idx)を作成します。オプションで、指定された
パックの逆インデックス(reverse-index)(.rev)を書き込みます。パックされた
アーカイブは、パックインデックスとともに、Gitリポジトリの objects/pack/
ディレクトリに配置できます。


OPTIONS
*******

‘-v’
     進捗状況など、何が起こっているかについて詳しく説明します。

‘-o <index-file>’
     生成されたパックインデックスを指定のファイルに書き込みます。このオ
     プションがない場合、パックインデックスファイルの名前は、 .pack を
     .idx に置き換えることにより、パックされたアーカイブファイルの名前か
     ら作成されます(パックされたアーカイブの名前が .pack で終わらない場
     合、プログラムは失敗します)。

‘--[no-]rev-index’
     このフラグが指定されている場合、指定されたパックに対応する逆インデ
     ックス(reverse index)(‘.rev’ ファイル)を生成します。 ‘--verify’ が
     指定されている場合は、既存の逆インデックスが正しいことを確認し保証
     (ensure)します。 ‘pack.writeReverseIndex’ よりも優先されます。

‘--stdin’
     このフラグが指定されると、コマンドラインの代わりにパックがstdinから
     読み取られ、コピーが <pack-file> に書き込まれます。 <pack-file> が
     指定されていない場合、パックは現在のGitリポジトリの objects/pack/ デ
     ィレクトリに書き込まれ、デフォルト名はパックの内容から決定されます
     。 <pack-file> が指定されていない場合は、 ‘--keep’ を使用して、この
     プロセスと ‘git repack’ の間の競合状態を防ぐことを検討してください
     。

‘--fix-thin’
     デルタ化オブジェクトが基づいている除外されたオブジェクトをパックに
     追加することにより、 ‘git pack-objects --thin’ によって生成された「
     薄い」パックを修正します(詳細は git-pack-objects(1) を参照)。 この
     オプションは、‘--stdin’ と組み合わせた場合にのみ意味があります。

‘--keep’
     インデックスを最終的な宛先に移動する前に、関連するパックファイル用
     に空の .keep ファイルを作成します。このオプションは通常、 ‘--stdin’
     と一緒に指定する必要があります。これは、パックに含まれるオブジェク
     トを使用するようにrefを更新する前に、 ‘git repack’ プロセスが新しく
     構築されたパックとインデックスを同時に削除しないようにするためです
     。

‘--keep=<msg>’
     ‘--keep’ のように、インデックスを最終的な宛先に移動する前に .keep フ
     ァイルを作成しますが、空のファイルを作成するのではなく、 .keep ファ
     イル内で <msg> の後にLFを配置します。 後ですべての .keep ファイル内
     で <msg> メッセージを検索して、使い古されたものを見つけることができ
     ます。

‘--index-version=<version>[,<offset>]’
     これは、テストスイートでのみ使用することを目的としています。 生成さ
     れたパックインデックスのバージョンを強制し、指定されたオフセットに
     あるオブジェクトに64ビットインデックスエントリを強制することができ
     ます。

‘--strict’
     パックに壊れたオブジェクトやリンクが含まれている場合は、終了します
     (die)。

‘--progress-title’
     内部使用のみ。

     プログレスバーのタイトルを設定します。 タイトルはデフォルトで「
     Receiving objects」(オブジェクトの受信)であり、 ‘--stdin’ が指定さ
     れている場合は「Indexing objects」(オブジェクトのインデックス作成
     )です。

‘--check-self-contained-and-connected’
     パックに壊れたリンクが含まれている場合は終了(die)します。内部使用の
     み。

‘--fsck-objects’
     内部使用のみ。

     パックに壊れたオブジェクトが含まれている場合は終了(die)します。 存
     在しない .gitmodulesblob を指すツリーがパックに含まれている場合、
     pack/idx ファイルの名前に含まれるハッシュの後に、(呼び出し元が確認
     できるように)そのブロブのハッシュを出力します(「Notes」参照)。

‘--threads=<n>’
     デルタを解決するときに生成するスレッドの数を指定します。これには、
     インデックスパックを pthreads でコンパイルする必要があります。そう
     でない場合、このオプションは警告とともに無視されます。これは、マル
     チプロセッサマシンでのパッキング時間を短縮することを目的としていま
     す。ただし、デルタ検索ウィンドウに必要なメモリ量は、スレッド数で乗
     算されます。0を指定すると、GitはCPUの数を自動検出し、最大3つのスレ
     ッドを使用します。

‘--max-input-size=<size>’
     パックが <size> を超える場合は、終了(die)します。

‘--object-format=<hash-algorithm>’
     パックに指定するオブジェクト形式(ハッシュアルゴリズム)を指定します
     。有効な値は ‘sha1’ と ‘sha256’ (有効な場合) です。デフォルトは、
     (‘extensions.objectFormat’ で設定する、)現在のリポジトリのアルゴリ
     ズム、または値が設定されていないかリポジトリの外部にある場合は
     _sha1_ です。

     このオプションは ‘--stdin’ オプションと一緒に使用することはできませ
     ん。

     このオプションは実験的なものです！ SHA-256のサポートは実験的なもの
     であり、まだ初期段階です。 SHA-256リポジトリは、通常、「通常の」
     SHA-1リポジトリと作業を共有できません。 たとえば、SHA-256リポジトリ
     に関連するGit内部ファイル形式は、下位互換性のない方法で変更される可
     能性があると想定する必要があります。テスト目的でのみ
     ‘--object-format=sha256’ を使用してください。


NOTES
*****

一旦インデックスが作成されると、 pack/idx ファイルの名前に含まれるハッシ
ュがstdoutに出力されます。 ‘--stdin’ も使用された場合、これには ‘pack\t’
または新しい.keepファイルが正常に作成された場合は ‘keep\t’ のいずれかの
プレフィックスが付きます。 .これは、上記の ‘git repack’ との競合を防ぐた
めにロックとして使用されているkeepファイルを 削除するのに役立ちます。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-init-db,  Up: Top

Name
****

git-init-db — 空のGitリポジトリを作成


Synopsis
********

     git init-db [-q | –quiet] [–bare] [–template=<template_directory>] [–separate-git-dir <git dir>] [–shared[=<permissions>]]


DESCRIPTION
***********

これは git-init(1) の同義語です。 git-init(1) コマンドの文書を参照してく
ださい。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-init,  Up: Top

Name
****

git-init — Create an empty Git repository or reinitialize an existing
one


Synopsis
********

     git init [-q | –quiet] [–bare] [–template=<template_directory>]
               [–separate-git-dir <git dir>] [–object-format=<format>]
               [-b <branch-name> | –initial-branch=<branch-name>]
               [–shared[=<permissions>]] [directory]


DESCRIPTION
***********

This command creates an empty Git repository - basically a ‘.git’
directory with subdirectories for ‘objects’, ‘refs/heads’, ‘refs/tags’,
and template files.  An initial branch without any commits will be
created (see the ‘--initial-branch’ option below for its name).

   If the ‘$GIT_DIR’ environment variable is set then it specifies a
path to use instead of ‘./.git’ for the base of the repository.

   If the object storage directory is specified via the
‘$GIT_OBJECT_DIRECTORY’ environment variable then the sha1 directories
are created underneath - otherwise the default ‘$GIT_DIR/objects’
directory is used.

   Running _git init_ in an existing repository is safe.  It will not
overwrite things that are already there.  The primary reason for
rerunning _git init_ is to pick up newly added templates (or to move the
repository to another place if –separate-git-dir is given).


OPTIONS
*******

‘-q’
‘--quiet’
     Only print error and warning messages; all other output will be
     suppressed.

‘--bare’
     Create a bare repository.  If ‘GIT_DIR’ environment is not set, it
     is set to the current working directory.

‘--object-format=<format>’
     Specify the given object format (hash algorithm) for the
     repository.  The valid values are _sha1_ and (if enabled) _sha256_.
     _sha1_ is the default.

     このオプションは実験的なものです！ SHA-256のサポートは実験的なもの
     であり、まだ初期段階です。 SHA-256リポジトリは、通常、「通常の」
     SHA-1リポジトリと作業を共有できません。 たとえば、SHA-256リポジトリ
     に関連するGit内部ファイル形式は、下位互換性のない方法で変更される可
     能性があると想定する必要があります。テスト目的でのみ
     ‘--object-format=sha256’ を使用してください。

‘--template=<template_directory>’
     Specify the directory from which templates will be used.  (See the
     "TEMPLATE DIRECTORY" section below.)

‘--separate-git-dir=<git dir>’
     Instead of initializing the repository as a directory to either
     ‘$GIT_DIR’ or ‘./.git/’, create a text file there containing the
     path to the actual repository.  This file acts as
     filesystem-agnostic Git symbolic link to the repository.

     If this is reinitialization, the repository will be moved to the
     specified path.

‘-b <branch-name>’
‘--initial-branch=<branch-name>’
     Use the specified name for the initial branch in the newly created
     repository.  If not specified, fall back to the default name
     (currently ‘master’, but this is subject to change in the future;
     the name can be customized via the ‘init.defaultBranch’
     configuration variable).

‘--shared[=(false|true|umask|group|all|world|everybody|0xxx)]’
     Specify that the Git repository is to be shared amongst several
     users.  This allows users belonging to the same group to push into
     that repository.  When specified, the config variable
     "core.sharedRepository" is set so that files and directories under
     ‘$GIT_DIR’ are created with the requested permissions.  When not
     specified, Git will use permissions reported by umask(2).

     The option can have the following values, defaulting to _group_ if
     no value is given:

     _umask_ (or _false_)
          Use permissions reported by umask(2).  The default, when
          ‘--shared’ is not specified.

     _group_ (or _true_)
          Make the repository group-writable, (and g+sx, since the git
          group may be not the primary group of all users).  This is
          used to loosen the permissions of an otherwise safe umask(2)
          value.  Note that the umask still applies to the other
          permission bits (e.g.  if umask is _0022_, using _group_ will
          not remove read privileges from other (non-group) users).  See
          _0xxx_ for how to exactly specify the repository permissions.

     _all_ (or _world_ or _everybody_)
          Same as _group_, but make the repository readable by all
          users.

     _0xxx_
          _0xxx_ is an octal number and each file will have mode _0xxx_.
          _0xxx_ will override users’ umask(2) value (and not only
          loosen permissions as _group_ and _all_ does).  _0640_ will
          create a repository which is group-readable, but not
          group-writable or accessible to others.  _0660_ will create a
          repo that is readable and writable to the current user and
          group, but inaccessible to others.

   By default, the configuration flag ‘receive.denyNonFastForwards’ is
enabled in shared repositories, so that you cannot force a non
fast-forwarding push into it.

   If you provide a _directory_, the command is run inside it.  If this
directory does not exist, it will be created.


TEMPLATE DIRECTORY
******************

Files and directories in the template directory whose name do not start
with a dot will be copied to the ‘$GIT_DIR’ after it is created.

   The template directory will be one of the following (in order):

   • the argument given with the ‘--template’ option;

   • the contents of the ‘$GIT_TEMPLATE_DIR’ environment variable;

   • the ‘init.templateDir’ configuration variable; or

   • the default template directory: ‘/usr/share/git-core/templates’.

   The default template directory includes some directory structure,
suggested "exclude patterns" (see gitignore(5)), and sample hook files.

   The sample hooks are all disabled by default.  To enable one of the
sample hooks rename it by removing its ‘.sample’ suffix.

   See githooks(5) for more general info on hook execution.


EXAMPLES
********

Start a new Git repository for an existing code base
          $ cd /path/to/my/codebase
          $ git init      (1)
          $ git add .     (2)
          $ git commit    (3)

     *note (1): CO1-1.
          Create a /path/to/my/codebase/.git directory.

     *note (2): CO1-2.
          Add all existing files to the index.

     *note (3): CO1-3.
          Record the pristine state as the first commit in the history.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-instaweb,  Up: Top

Name
****

git-instaweb — gitwebで作業リポジトリをインスタントにブラウズします


Synopsis
********

     git instaweb [–local] [–httpd=<httpd>] [–port=<port>]
                    [–browser=<browser>]
     git instaweb [–start] [–stop] [–restart]


DESCRIPTION
***********

ローカルリポジトリを参照するための ‘gitweb’ とWebサーバーを設定するため
の簡単なスクリプト。


OPTIONS
*******

‘-l’
‘--local’
     WebサーバーをローカルIP(127.0.0.1)にのみバインドします。

‘-d’
‘--httpd’
     実行されるHTTPデーモンのコマンドライン。コマンドラインオプションは
     ここで指定でき、構成ファイルはコマンドラインの最後に追加されます。
     現在、apache2、lighttpd、mongoose、plackup、python、webrickがサポー
     トされています。（デフォルト：lighttpd）

‘-m’
‘--module-path’
     モジュールパス(httpdがApacheの場合にのみ必要)。(デフォルト:
     /usr/lib/apache2/modules )

‘-p’
‘--port’
     httpdをバインドするポート番号。(デフォルト: 1234)

‘-b’
‘--browser’
     gitwebページを表示するために使用する必要があるWebブラウザー。これは
     、gitwebインスタンスのURLとともに _git web–browse_ ヘルパースクリプ
     トに渡されます。詳細については、 git-web–browse(1) を参照してくださ
     い。スクリプトが失敗した場合、URLはstdoutに出力されます。

start
‘--start’
     httpdインスタンスを開始して本コマンドを終了します。新しいインスタン
     スを生成するために、必要に応じて構成ファイルを再生成します。

stop
‘--stop’
     httpdインスタンスを停止して本コマンドを終了します。これにより、新し
     いインスタンスを生成するための構成ファイルが生成されたり、ブラウザ
     ーが閉じられたりすることはありません。

restart
‘--restart’
     httpdインスタンスを再起動して本コマンドを終了します。 新しいインス
     タンスを生成するために、必要に応じて構成ファイルを再生成します。


CONFIGURATION
*************

あなたは .git/config で構成を指定できます

     [instaweb]
             local = true
             httpd = apache2 -f
             port = 4321
             browser = konqueror
             modulePath = /usr/lib/apache2/modules

   構成変数 ‘instaweb.browser’ が設定されていない場合に、‘web.browser’ が
定義されていれば、代わりに ‘web.browser’ が使用されます。詳細については
、 git-web–browse(1) を参照してください。


SEE ALSO
********

gitweb(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-interpret-trailers,  Up: Top

Name
****

git-interpret-trailers — コミットメッセージの構造化情報を追加またはパー
スします


Synopsis
********

     git interpret-trailers [<options>] [(–trailer <token>[(=|:)<value>])…] [<file>…]
     git interpret-trailers [<options>] [–parse] [<file>…]


DESCRIPTION
***********

コミットメッセージの自由形式の部分の最後に、RFC 822 電子メールヘッダーに
似たトレーラー(trailer)行の、追加またはパースを支援します。

   このコマンドは、<file> 引数または、 <file>が指定されていない場合は標
準入力のいずれかから、いくつかのパッチまたはコミットメッセージを読み取り
ます。 ‘--parse’ が指定されている場合、出力はパースされたトレーラーで構
成されます。

   それ以外の場合、このコマンドは、 ‘--trailer’ オプション(存在する場合
)を使用して渡された引数を、各入力ファイルのコミットメッセージ部分に適用
します。結果は標準出力に出力されます。

   一部の構成変数は、 ‘--trailer’ 引数が各コミットメッセージに適用される
方法と、コミットメッセージ内の既存のトレーラーが変更される方法を制御しま
す。また、トレーラーを自動的に追加することもできます。

   デフォルトでは、 ‘--trailer’ で指定された _<token>=<value>_ または
_<token>:<value>_ 引数は、既存の最後のトレーラーのペア(<token>,
<value>)が指定のペア異なる場合(または、既存のに無い場合)にのみ、指定した
モノが既存のトレーラーの後に追加されます。 <token>と<value>の部分は、先
頭と末尾の空白がトリミングされ、以下のようなメッセージとして出力されます
:

     token: value

   これは、トリミングされた<token>と<value>が ‘: ‘ (1つのコロンとそれに
続く1つのスペース)で区切られることを意味します。

   デフォルトでは、新しいトレーラーは既存のすべてのトレーラーの後に出力
されます。既存のトレーラーがない場合は、出力のコミットメッセージ部分の後
に新しいトレーラーが出力されます。コミットメッセージ部分の最後に空白しか
ない行が存在しない場合は、新しいトレーラーの前に空行を1行追加します。

   既存のトレーラーは、(i)すべてのトレーラーであるか、または、(ii)少なく
とも1つのGit生成またはユーザー構成のトレーラーを含む少なくとも25％のトレ
ーラーで構成される、1行以上のグループが入力メッセージから抽出されます。
グループの前には、1行以上の空行(または空白のみの行)が必要です。グループ
は、メッセージの最後にあるか、 ‘---’ で始まる行の前の最後の非空白行であ
る必要があります(その後にスペースまたは行の終わりが続きます)。このような
3つのマイナス記号(‘---’)は、メッセージのパッチ部分を開始します。 以下の
‘--no-divider’ も参照してください。

   トレーラーを読み取る場合、トークンと区切り文字と値の後に空白
(whitespaces)を含めることができます。トークンと値の中に空白を含めること
もできます。値は、RFC 822の "folding"(折りたたみ)のように、空白で始まる
後続の各行で複数の行に分割される場合があります。

   注意: トレーラーはRFC822ヘッダー規則の多くに従うことを意図してません
し、従わないことに注意してください。たとえば、それらはエンコーディング規
則や、おそらく他の多くの規則に従いません。


OPTIONS
*******

‘--in-place’
     その場でファイルを編集します。

‘--trim-empty’
     トレーラーの <value> 部分に空白(whitespace)のみが含まれている場合、
     結果のメッセージからトレーラー全体が削除されます。これは、新しいト
     レーラーだけでなく、既存のトレーラーにも適用されます。

‘--trailer <token>[(=|:)<value>]’
     入力メッセージのトレーラーとして適用する必要があるペア（<token>、
     <value>）を指定します。詳しくはこのコマンドの説明を参照してください
     。

‘--where <placement>’
‘--no-where’
     すべての新しいトレーラーが追加される場所を指定します。 ‘--where’ で
     指定する設定は、すべての構成変数をオーバーライドし、 _–where_ また
     は _–no-where_ が次に出現するまですべての ‘--trailer’ オプションに
     適用されます。 <placement> として可能な値は、 ‘after’ または
     ‘before’ または ‘end’ または ‘start’ です。

‘--if-exists <action>’
‘--no-if-exists’
     メッセージに同じ <token> を持つトレーラーがすでに少なくとも1つある
     場合に、実行される操作を指定します。 ‘--if-exists’ で指定する設定は
     、すべての構成変数をオーバーライドし、 ‘--if-exists’ または
     ‘--no-if-exists’ が次に出現するまですべての ‘--trailer’ オプション
     に適用されます。可能な操作は、 ‘addIfDifferent’ または
     ‘addIfDifferentNeighbor’ または ‘add’ または ‘replace’ または
     ‘doNothing’ です。

‘--if-missing <action>’
‘--no-if-missing’
     メッセージに同じ <token> を持つ他のトレーラーがない場合に実行される
     操作を指定します。 ‘--if-missing’ で指定する設定は、すべての構成変
     数をオーバーライドし、 ‘--if-missing’ または ‘--no-if-missing’ が次
     に出現するまですべての ‘--trailer’ オプションに適用されます。可能な
     操作は ‘doNothing’ または ‘add’ です。

‘--only-trailers’
     トレーラーのみを出力し、入力の他の部分は出力しません。

‘--only-input’
     入力に存在するトレーラーのみを出力します。コマンドラインや、構成さ
     れた ‘trailer.*’ ルールに従って追加することはありません。

‘--unfold’
     トレーラーの複数行に渡る先頭空白による継続を解除して、各トレーラー
     が1行で完結するよう出力します。

‘--parse’
     ‘--only-trailers --only-input --unfold’ の便利なエイリアス。

‘--no-divider’
     ‘---’ をコミットメッセージの終わりとして扱わないでください。(電子メ
     ールや ‘git format-patch‘の出力が含まれておらず、)入力にコミットメ
     ッセージ自体だけが含まれていることがわかっている場合にこれを使用し
     ます。


CONFIGURATION VARIABLES
***********************

trailer.separators
     このオプションは、どの文字がトレーラー区切り文字として認識されるか
     を示します。 デフォルトでは、 ‘:’ のみがトレーラー区切り文字として
     認識されます。ただし、他のgitコマンドとの互換性のために、コマンドラ
     インでは ‘=’ が常に受け入れられます。

     このオプションで指定された最初の1文字は、このトレーラーの構成で別の
     区切り文字が指定されていない場合に使用されるデフォルトの文字になり
     ます。

     たとえば、このオプションの値が "%=$" の場合、 _<token><sep><value>_
     の形式を使用し、<sep> に ‘%’ または ‘=’ または ‘$’ と、空白達を含む
     行のみトレーラーと見なされます。 また、 ‘%’ がデフォルトの区切り文
     字として使用されるため、デフォルトでは、トレーラーは ‘<token>%
     <value>’ と出力されます(デフォルトの場合はこのようにトークンと値の
     間に1つの区切り文字列の最初の文字(パーセント記号)と「1つのスペース
     」が出力されます)。

trailer.where
     このオプションは、新しいトレーラーが追加される場所を示します。

     これは、デフォルトの ‘end’ の他に ‘start’ または ‘after’ または
     ‘before’ にすることができます。

     ‘end’ の場合、新しいトレーラーはそれぞれ、既存のトレーラーの最後に
     出力されます。

     ‘start’ の場合、新しい各トレーラーは、既存のトレーラーの最後ではな
     く、最初に出力されます。

     ‘after’ の場合、新しいトレーラーはそれぞれ、同じ <token> を持つ最後
     のトレーラーの直後に出力されます。

     ‘before’ の場合、新しい各トレーラーは、同じ <token> を持つ最初のト
     レーラーの直前に出力されます。

trailer.ifexists
     このオプションを使用すると、メッセージに同じ <token> を持つトレーラ
     ーがすでに少なくとも1つある場合に、実行する操作を選択できます。

     このオプションの有効な値は、 ‘addIfDifferentNeighbor’ (デフォルト
     )、 または ‘addIfDifferent’ または ‘add’ または ‘replace’ または
     ‘doNothing’ です。

     ‘addIfDifferentNeighbor’ を使用すると、同一のペア(<token>、
     <value>)のトレーラーが、新しいトレーラーが追加される行の上または下
     にない場合にのみ、新しいトレーラーが追加されます。

     ‘addIfDifferent’ を使用すると、同じペア(<token>、<value>)のトレーラ
     ーがメッセージに含まれていない場合にのみ、新しいトレーラーが追加さ
     れます。

     ‘add’ を使用すると、同じペア（<token>、<value>）のトレーラーがすで
     にメッセージに含まれている場合でも、新しいトレーラーが追加されます
     。

     ‘replace’ を使用すると、同じ <token> を持つ既存のトレーラーが削除さ
     れ、新しいトレーラーが追加されます。削除されるトレーラーは、新しい
     トレーラーが追加される場所に最も近い(同じ <token> を持つ)トレーラー
     になります。

     ‘doNothing’ を使用すると、何も実行されません。 つまり、メッセージに
     同じ <token> を持つトレーラーがすでに存在する場合、新しいトレーラー
     は追加されません。

trailer.ifmissing
     このオプションを使用すると、メッセージに同じ <token> を持つトレーラ
     ーがまだない場合に実行する操作を選択できます。

     このオプションの有効な値は、 ‘add’ (デフォルト)と ‘doNothing’ です
     。

     ‘add‘を使用すると、新しいトレーラーが追加されます。

     ‘doNothing’ を使用すると、何も実行されません。

trailer.<token>.key
     この キー(key) は、トレーラーで <token> の代わりに使用されます。こ
     のキーの後ろに、区切り文字を出力してから、いくつかのスペース文字を
     出力できます。デフォルトでは、有効な区切り文字は ‘:’ のみですが、こ
     れは ‘trailer.separators’ 構成変数を使用して変更できます。

     トレーラーを追加するときに、この構成値内に区切り文字がある場合、
     <token> とデフォルトの区切り文字の両方(つまり、<token><区切り文字
     ><空白1つ>)がキーで置き換えられます。

trailer.<token>.where
     このオプションは、「trailer.where」構成変数と同じ値を取り、指定され
     た <token> を持つトレーラーに対してそのオプションで指定されたものを
     オーバーライドします。

trailer.<token>.ifexists
     このオプションは、「trailer.ifexists」構成変数と同じ値を取り、指定
     された <token> を持つトレーラーに対してそのオプションで指定されたも
     のをオーバーライドします。

trailer.<token>.ifmissing
     このオプションは、「trailer.ifmissing」構成変数と同じ値を取り、指定
     された <token> を持つトレーラーに対してそのオプションで指定されたも
     のをオーバーライドします。

trailer.<token>.command
     このオプションは、指定のコマンドに引数として何も渡さないことを除い
     て、 ‘trailer.<token>.cmd’ と同じように動作します。代わりに、文字列
     に最初に現れる置換文字列 $ARG のみ、引数として渡される値に置き換え
     られます。

     _trailer.<token>.command_ オプションは非推奨になり
     ’trailer.<token>.cmd’ が採用されました。これは、ユーザーのコマンド
     の $ARG が一度だけ置き換えられることと、 $ARG を置き換える独創的な
     方法が安全でないためです。

     _trailer.<token>.cmd_ と _trailer.<token>.command_ の両方が同じ
     <token>で指定されている場合、 _trailer.<token>.cmd_ が使用され、
     _trailer.<token>.command_ は無視されます。

trailer.<token>.cmd
     このオプションを使用して、呼び出されるシェルコマンドを指定できます
     。最初の1回は、指定の <token> を持つトレーラーを自動的に追加し、そ
     の後、毎回 _–trailer <token>=<value>_ 引数を使用して、このオプショ
     ンが生成するトレーラーの <value> を変更します。

     指定のコマンドを最初に呼び出して、指定の <token> のトレーラーを追加
     すると、動作は、「git interpret-trailers」コマンドの先頭に特別な
     ‘--trailer <token>=<value>’ 引数が追加されたかのように振る舞います
     。ここで、 <value> は、先頭と末尾の空白が削除された、コマンドからの
     標準出力と見なされます。

     いくつかの ‘--trailer <token>=<value>' 引数がコマンドラインで渡され
     た場合、同じ <token> を持つこれらの引数ごとにコマンドが1回呼び出さ
     れます。そして、これらの引数の <value> 部分は、もしあれば、最初の引
     数としてコマンドに渡されます。このようにして、コマンドは `--trailer
     <token>=<value>’ 引数で渡された <value> から計算された <value> を生
     成できます。


EXAMPLES
********

   • 「Signed-off-by」キーを使用して「sign」トレーラーを構成してから、こ
     れらのトレーラーのうち2つをメッセージに追加します:

          $ git config trailer.sign.key "Signed-off-by"
          $ cat msg.txt
          subject

          message
          $ cat msg.txt | git interpret-trailers --trailer 'sign: Alice <alice@example.com>' --trailer 'sign: Bob <bob@example.com>'
          subject

          message

          Signed-off-by: Alice <alice@example.com>
          Signed-off-by: Bob <bob@example.com>

   • ‘--in-place’ オプションを使用して、メッセージファイルをその場で編集
     します:

          $ cat msg.txt
          subject

          message

          Signed-off-by: Bob <bob@example.com>
          $ git interpret-trailers --trailer 'Acked-by: Alice <alice@example.com>' --in-place msg.txt
          $ cat msg.txt
          subject

          message

          Signed-off-by: Bob <bob@example.com>
          Acked-by: Alice <alice@example.com>

   • 最後のコミットをパッチとして抽出し、それに「Cc」トレーラーと「
     Reviewed-by」トレーラーを追加します:

          $ git format-patch -1
          0001-foo.patch
          $ git interpret-trailers --trailer 'Cc: Alice <alice@example.com>' --trailer 'Reviewed-by: Bob <bob@example.com>' 0001-foo.patch >0001-bar.patch

   • 「Signed-off-by: 」がまだない場合にのみ、作者情報を含む「
     Signed-off-by: 」を自動的に追加するコマンドを伴って「sign」トレーラ
     ーを構成し、それがどのように機能するかを示します:

          $ git config trailer.sign.key "Signed-off-by: "
          $ git config trailer.sign.ifmissing add
          $ git config trailer.sign.ifexists doNothing
          $ git config trailer.sign.command 'echo "$(git config user.name) <$(git config user.email)>"'
          $ git interpret-trailers <<EOF
          > EOF

          Signed-off-by: Bob <bob@example.com>
          $ git interpret-trailers <<EOF
          > Signed-off-by: Alice <alice@example.com>
          > EOF

          Signed-off-by: Alice <alice@example.com>

   • trailer.fix.key に 区切り文字 ‘#’ を含み、その後ろにスペースを含ま
     ないキーを使用して「fix」トレーラーを構成し、それがどのように機能す
     るかを示します:

          $ git config trailer.separators ":#"
          $ git config trailer.fix.key "Fix #"
          $ echo "subject" | git interpret-trailers --trailer fix=42
          subject

          Fix #42

   • cmdを使用して「ヘルプ」トレーラーを構成します。スクリプト
     ‘glog-find-author’ を使用して、gitリポジトリのgitログから指定された
     作成者IDを検索し、その動作を示します。

          $ cat ~/bin/glog-find-author
          #!/bin/sh
          test -n "$1" && git log --author="$1" --pretty="%an <%ae>" -1 || true
          $ git config trailer.help.key "Helped-by: "
          $ git config trailer.help.ifExists "addIfDifferentNeighbor"
          $ git config trailer.help.cmd "~/bin/glog-find-author"
          $ git interpret-trailers --trailer="help:Junio" --trailer="help:Couder" <<EOF
          > subject
          >
          > message
          >
          > EOF
          subject

          message

          Helped-by: Junio C Hamano <gitster@pobox.com>
          Helped-by: Christian Couder <christian.couder@gmail.com>

   • cmdを使用して _ref_ トレーラーを構成し、スクリプト ‘glog-grep’ を使
     用して、gitリポジトリのgitログから最後の関連するコミットをgrepし、
     それがどのように機能するかを示します。

          $ cat ~/bin/glog-grep
          #!/bin/sh
          test -n "$1" && git log --grep "$1" --pretty=reference -1 || true
          $ git config trailer.ref.key "Reference-to: "
          $ git config trailer.ref.ifExists "replace"
          $ git config trailer.ref.cmd "~/bin/glog-grep"
          $ git interpret-trailers --trailer="ref:Add copyright notices." <<EOF
          > subject
          >
          > message
          >
          > EOF
          subject

          message

          Reference-to: 8bc9a0c769 (Add copyright notices., 2005-04-07)

   • 関連するコミットの件名を出力し、それがどのように機能するかを示すコ
     マンドを使用して、「see」トレーラーを構成します:

          $ git config trailer.see.key "See-also: "
          $ git config trailer.see.ifExists "replace"
          $ git config trailer.see.ifMissing "doNothing"
          $ git config trailer.see.command "git log -1 --oneline --format=\"%h (%s)\" --abbrev-commit --abbrev=14 \$ARG"
          $ git interpret-trailers <<EOF
          > subject
          >
          > message
          >
          > see: HEAD~2
          > EOF
          subject

          message

          See-also: fe3187489d69c4 (subject of related commit)

   • 空の値を持ついくつかのトレーラーを使用してコミットテンプレートを構
     成し(sedを使用してトレーラーの後に末尾のスペースを出力および保持し
     ます)、次に、「git interpret-trailers」を使用するcommit-msgフックを
     構成して、値が空のトレーラーを削除し、「git-version」トレーラーを追
     加します:

          $ sed -e 's/ Z$/ /' >commit_template.txt <<EOF
          > ***subject***
          >
          > ***message***
          >
          > Fixes: Z
          > Cc: Z
          > Reviewed-by: Z
          > Signed-off-by: Z
          > EOF
          $ git config commit.template commit_template.txt
          $ cat >.git/hooks/commit-msg <<EOF
          > #!/bin/sh
          > git interpret-trailers --trim-empty --trailer "git-version: \$(git describe)" "\$1" > "\$1.new"
          > mv "\$1.new" "\$1"
          > EOF
          $ chmod +x .git/hooks/commit-msg


SEE ALSO
********

git-commit(1), git-format-patch(1), git-config(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-log,  Up: Top

Name
****

git-log — コミットのログを表示


Synopsis
********

     git log [<options>] [<revision range>] [[–] <path>…]


DESCRIPTION
***********

コミットのログを表示します。

   指定されたコミットから「親」リンクをたどることによって到達可能なコミ
ットをリストしますが、その前に _^_ が付いているコミットから到達可能なコ
ミットは除外します。デフォルトでは、出力は時系列の逆順で表示されます。

   これは集合演算と考えることができます。 コマンドラインで指定されたコミ
ットのいずれかから到達可能なコミットのセットを形成し、 _^_ が前に付いた
コミットのいずれかから到達可能なコミットがそのセットから差し引かれます。
差し引かれた残りのコミットは、コマンドの出力に出力されるものです。他のさ
まざまなオプションとパスパラメータ(pats parameters)を使用して、結果をさ
らに制限できます。

   したがって、以下のコマンド:

     $ git log foo bar ^baz

   は、「 _foo_ または _bar_ から到達可能であるが、 _baz_ からは到達でき
ないすべてのコミットをリストする」を意味します。

   特別な表記 "_<commit1>_.._<commit2>_" は、 "^_<commit1>_ _<commit2>_"
の省略形として使用できます。たとえば、以下のどちらかを同じ意味で使用でき
ます:

     $ git log origin..HEAD
     $ git log HEAD ^origin

   もう1つの特別な表記法は、マージに役立つ "_<commit1>_…_<commit2>_" で
す。結果として得られるコミットのセットは、2つのオペランド間の対称差
(symmetric difference)です。以下の2つのコマンドは同等です:

     $ git log A B --not $(git merge-base --all A B)
     $ git log A...B

   このコマンドは、 git-rev-list(1) コマンドに適用可能なオプションを使用
して、表示内容と方法を制御し、そして git-diff(1) コマンドに適用可能なオ
プションを使用して、各コミットによって導入される変更の表示方法を制御しま
す。


OPTIONS
*******

‘--follow’
     ファイル名が途中でリネームされていてもそこで中断することなく、その
     ファイルの一覧を続けて表示します(単一のファイルに対してのみ機能しま
     す)。

‘--no-decorate’
‘--decorate[=short|full|auto|no]’
     表示されているコミットのref名を出力します。 _short_ が指定されてい
     る場合、ref名の接頭辞 _refs/heads/_ と _refs/tags/_ と
     _refs/remotes/_ は出力されません。 _full_ が指定されている場合、完
     全なref名(接頭辞を含む)が出力されます。_auto_ が指定されている場合
     、出力が端末に送られると、ref名は _short_ が指定されているかのよう
     に表示され、それ以外の場合はref名は表示されません。オプション
     ‘--decorate’ は ‘--decorate=short’ の省略形です。構成されている場合
     はデフォルトで構成値の ‘log.decorate’ になり、構成されていない場合
     は ‘auto’ になります。

‘--decorate-refs=<pattern>’
‘--decorate-refs-exclude=<pattern>’
     ‘--decorate-refs’ が指定されていない場合は、すべてのrefが含まれてい
     るように見せかけます。候補ごとに、‘--decorate-refs-exclude’ に指定
     されたパターンのいずれにもマッチしない場合、または
     ‘--decorate-refs’ に指定されたパターンのいずれにもマッチしない場合
     は、装飾に使用しないでください。 ‘log.excludeDecoration’ 構成オプシ
     ョンを使用すると、装飾からrefを除外できますが、明示的な
     ‘--decorate-refs’ パターンは ‘log.excludeDecoration’ のマッチングを
     オーバーライドします。

‘--source’
     各コミットがコマンドラインで指定のコミットのいずれかから到達できる
     祖先である場合、当該コミット毎にコマンドラインで指定のコミットの
     ref名で表示します。

‘--[no-]mailmap’
‘--[no-]use-mailmap’
     mailmapファイルを使用して、作者名(author names)とコミッター名
     (committer names)と電子メールアドレス(email addresses)を、正式な本
     名と電子メールアドレスにマップします。 git-shortlog(1) 参照。

‘--full-diff’
     このフラグがない場合、 ‘git log -p <path>...’ は、指定されたパスに
     関連(touch)するコミットを示し、その指定されたパスについての差分を取
     ります。これにより、指定されたパスに関連するコミットの完全な差分が
     表示されます。これは、 "<path>…" がコミットのみを制限し、それらのコ
     ミットの差分を制限しないことを意味します。

     これは、例えば ‘--stat’ によって生成されたものなど、すべての差分ベ
     ースの出力タイプに影響することに注意してください。

‘--log-size’
     各コミットの出力に “log size <number>” という行を含めます。ここで、
     <number> はそのコミットのメッセージの長さ(バイト単位)です。プログラ
     ムがスペースをコミットのメッセージ読み込み前に割り当てられるように
     して、 ‘git log’ 出力からログメッセージを読み取るツールを高速化する
     ことを目的としています。

‘-L<start>,<end>:<file>’
‘-L:<funcname>:<file>’
     _<file>_ 内で、 _<start>,<end>_ 、または関数名 regex _<funcname>_ で
     指定された行範囲をトレースします。pathspec リミッターを指定すること
     はできません。これは現在、単一のリビジョンから開始するウォークに制
     限されています。つまり、0個または1個の正のリビジョン引数のみを指定
     でき、 _<start>_ と _<end>_ (または _<funcname>_) が開始リビジョン
     に存在する必要があります。このオプションは複数回指定できます。これ
     は ‘--patch’ オプションの機能を内包しています。パッチ出力は
     ‘--no-patch’ を使用して抑制できますが、他の差分形式(つまり、
     ‘--raw’、 ‘--numstat’、 ‘--shortstat’、 ‘--dirstat’、 ‘--summary’、
     ‘--name-only’、 ‘--name-status’、 ‘--check’)は現在実装されていませ
     ん。

     _<start>_ と _<end>_ は、以下のいずれかの形式です:

        • number

          _<start>_ または _<end>_ が数値の場合、絶対行番号を指定します
          (行は1から数えます)。

        • ‘/regex/’

          この形式は、指定されたPOSIX正規表現に一致する最初の行を使用し
          ます。 _<start>_ が正規表現の場合、前の ‘-L’ 範囲の末尾から検
          索します。それ以外の場合は、ファイルの先頭から検索します。
          _<start>_ が ‘^/regex/’ の場合、ファイルの先頭から検索します。
          _<end>_ が正規表現の場合、 _<start>_ で指定された行から検索開
          始します。

        • +offset or -offset

          これは <end> に対してのみ有効であり、 <start> で指定された行の
          前後の行数を指定します。

     _<start>_ および _<end>_ の代わりに ‘:<funcname>’ が指定されている
     場合、これは _<funcname>_ に一致する最初の関数名行から次の関数名行
     までの範囲を示す正規表現です。 ‘:<funcname>’ は、前の ‘-L’ 範囲の末
     尾から検索します。それ以外の場合は、ファイルの先頭から検索します。
     ‘^:<funcname>’ はファイルの先頭から検索します。関数名は、 ‘git
     diff’ がパッチハンクヘッダーを処理するのと同じ方法で決定されます
     (gitattributes(5) の _Defining a custom hunk-header_ 参照)。

<revision range>
     指定されたリビジョン範囲のコミットのみを表示します。 <revision
     range> が指定されていない場合、デフォルトで ‘HEAD’ (つまり、現在の
     コミットにつながる履歴全体)になります。 ‘origin..HEAD’ は、現在のコ
     ミット(つまり、‘HEAD’)から到達可能なすべてのコミットを指定しますが
     、‘origin‘からは指定しません。 <revision range> の綴り方の完全なリ
     ストについては、 gitrevisions(7) の「Specifying Ranges」節を参照し
     てください。

[–] <path>…
     指定されたパスに一致するファイルがどのようになったかを説明するのに
     必要十分なコミットのみを表示します。詳細およびその他の簡略化モード
     については、以下の _History Simplification_ を参照してください。

     混乱が生じた場合、パスをオプションまたはリビジョン範囲から分離する
     ために、パスの前に ‘--’ を付ける必要がある場合があります。


Commit Limiting
===============

ここで説明されている特別な表記法を使用してリストする必要があるコミットの
範囲を指定することに加えて、追加のコミット制限が適用される場合があります
。

   より多くのオプションを使用すると、通常、出力がさらに制限されます(たと
えば、‘--since=<date1>`は’<date1>‘より新しいコミットに制限され、
’–grep=<pattern>‘と一緒に使用すると、ログメッセージに’<pattern>‘と一致す
る行があるコミットにさらに制限されます)。

   注意: これらは、‘–reverse‘などのコミット順序およびフォーマットオプシ
ョンの前に適用されることに注意してください。

‘-<number>’
‘-n <number>’
‘--max-count=<number>’
     出力するコミットの数を制限します。

‘--skip=<number>’
     コミット出力の表示を開始する前に、’number’個のコミットをスキップし
     ます。

–since=<date>
‘--after=<date>’
     指定の日付よりも新しいコミットを表示します。

‘--until=<date>’
‘--before=<date>’
     指定の日付より古いコミットを表示します。

‘--author=<pattern>’
‘--committer=<pattern>’
     コミット出力を、指定されたパターン(正規表現)に一致する作者
     (author)/コミッター(committer)ヘッダー行を持つものに制限します。複
     数の ‘--author=<pattern>’ がある場合、作者が指定されたパターンのい
     ずれかに一致するコミットが選択されます(複数の
     ‘--committer=<pattern>’ の場合も同様)。

‘--grep-reflog=<pattern>’
     コミット出力を、指定されたパターン(正規表現)に一致するreflogエント
     リを持つものに制限します。複数の‘–grep-reflog‘を使用すると、指定さ
     れたパターンのいずれかに一致するreflogメッセージを持つコミットが選
     択されます。‘–walk-reflogs‘が使用されていない限り、このオプションを
     使用するとエラーになります。

‘--grep=<pattern>’
     コミット出力を、指定されたパターン(正規表現)に一致するログメッセー
     ジを持つものに制限します。複数の‘–grep=<pattern>‘を使用すると、指定
     されたパターンのいずれかにメッセージが一致するコミットが選択されま
     す(全てに一致するコミットだけを選択したい場合、’–all-match‘を参照し
     てください)。

     ‘–notes‘が有効な場合、ノートからのメッセージは、ログメッセージの一
     部であるかのようにマッチングされます。

‘--all-match’
     コミット出力を、少なくとも1つに一致するものではなく、指定されたすべ
     ての‘–grep‘に一致するものに制限します。

‘--invert-grep’
     コミット出力を、‘–grep=<pattern>‘で指定されたパターンと一致しないロ
     グメッセージを持つものに制限します。

‘-i’
‘--regexp-ignore-case’
     大文字小文字に関係なく、正規表現の制限パターンに一致します。

‘--basic-regexp’
     制限パターンを基本正規表現として扱います。これがデフォルトです。

‘-E’
‘--extended-regexp’
     制限パターンを、デフォルトの基本正規表現の代わりに拡張正規表現とし
     て扱います。

‘-F’
‘--fixed-strings’
     制限パターンを固定文字列として扱います(パターンを正規表現として解釈
     しないでください)。

‘-P’
‘--perl-regexp’
     制限パターンをPerl互換の正規表現として扱います。

     これらのタイプの正規表現のサポートは、コンパイル時オプションに依存
     します。Gitが当該のサポート付きでコンパイルされていない場合、このオ
     プションを提供すると、Gitが死にます(die)。

‘--remove-empty’
     指定されたパスがツリーから見えなくなったら停止(stop)します。

‘--merges’
     マージコミットのみを印刷します。これは‘–min-parents=2‘とまったく同
     じです。

‘--no-merges’
     複数の親を持つコミットを出力しない。これは‘–max-parents=1‘とまった
     く同じです。

‘--min-parents=<number>’
‘--max-parents=<number>’
‘--no-min-parents’
‘--no-max-parents’
     量の多少に関わらず、とにかく複数の親コミットがあるコミットのみを表
     示します。特に、‘--max-parents=1`は’–no-merges‘と同じであり、
     ‘--min-parents=2`は’–merges‘と同じです。‘--max-parents=0`はすべての
     ルートコミットを提供し、’–min-parents=3‘はすべてのタコ足マージ
     (octopus merges)を示します。

     ‘--no-min-parents`と’–no-max-parents‘は、これらの制限を(制限なしに
     )再度リセットします。同等の形式は、‘--min-parents=0’(すべてのコミッ
     トに0個以上の親があります)および‘–max-parents=-1‘(マイナスの数は上
     限がないことを示します)です。

‘--first-parent’
     マージコミットを確認したら、最初の親コミットのみを探索します。この
     オプションは、特定のトピックブランチの進化を表示するときに、より良
     い概要を提供できます。トピックブランチへのマージは、時々更新される
     アップストリームに調整することだけである傾向があり、このオプション
     を使用すると、そのようなマージによって履歴に取り込まれた個々のコミ
     ットを無視できます。

     このオプションは、マージコミットのデフォルトのdiff形式も
     ‘first-parent‘に変更します。詳細については、
     ‘–diff-merges=first-parent‘を参照してください。

‘--not’
     次に現れる‘–not‘までの間、後続のすべてのリビジョン指定子の’^’プレフ
     ィックス(またはその欠如)の意味を逆にします。

‘--all’
     ‘refs/‘内のすべてのrefが‘HEAD‘とともに、コマンドラインに
     ’<commit>’としてリストされているかのように見せかけます。

‘--branches[=<pattern>]’
     ‘refs/heads‘内のすべてのrefがコマンドラインに’<commit>’としてリスト
     されているかのように見せかけます。_<pattern>’が指定されている場合、
     ブランチを指定されたシェルグロブ(shell glob)に一致するものに制限し
     ます。パターンに_?_または_*’または’[_がない場合、最後に_/*’が含まれ
     ます。

‘--tags[=<pattern>]’
     ‘refs/tags‘内のすべてのrefがコマンドラインに’<commit>’としてリスト
     されているかのように見せかけます。_<pattern>’が指定されている場合は
     、指定されたシェルグロブ(shell glob)に一致するタグにタグを制限しま
     す。パターンに_?_または_*’または’[_がない場合、最後に_/*’が含まれま
     す。

‘--remotes[=<pattern>]’
     ‘refs/remotes‘内のすべてのrefがコマンドラインに’<commit>’としてリス
     トされているかのように見せかけます。_<pattern>’が指定されている場合
     、リモート追跡ブランチを指定されたシェルグロブ(shell glob)に一致す
     るものに制限します。パターンに_?_または_*’または’[_がない場合、最後
     に_/*’が含まれます。

‘--glob=<glob-pattern>’
     シェルグロブ’<glob-pattern>’に一致するすべてのrefがコマンドラインに
     ’<commit>’としてリストされているかのように見せかけます。先頭の
     ’refs/_は、欠落している場合は自動的に先頭に追加されます。パターンに
     _?_または_*’または’[_がない場合、最後に_/*’が含まれます。

‘--exclude=<glob-pattern>’
     次の‘–all‘または‘–branches‘または‘–tags‘または‘–remotes‘または
     ‘–glob‘が別の方法で考慮する’<glob-pattern>’に一致するrefを含めない
     でください。このオプションを繰り返すと、次の‘–all‘または
     ‘–branches‘または‘–tags‘または‘–remotes‘または‘–glob‘オプションまで
     除外パターンが蓄積されます(他のオプションまたは引数は、蓄積されたパ
     ターンをクリアしません)。

     与えられたパターンは、それぞれ‘–branches‘または‘ –tags‘または
     ‘–remotes‘に適用される場合、‘refs/heads‘または‘refs/tags‘または
     ‘refs/remotes‘で始まるべきではありません。‘--glob`または’–all‘に適
     用する場合は、‘refs/‘で始める必要があります。末尾の’/*’を意図してい
     る場合は、明示的に指定する必要があります。

‘--reflog’
     reflogsで言及されているすべてのオブジェクトがコマンドラインに
     ‘<commit>‘としてリストされているかのように見せかけます。

‘--alternate-refs’
     代替リポジトリのref先端として言及されているすべてのオブジェクトがコ
     マンドラインにリストされているかのように見せかけます。代替リポジト
     リは、オブジェクトディレクトリが‘objects/info/alternates‘で指定され
     ているリポジトリです。インクルードされたオブジェクトのセットは、
     ‘core.alternateRefsCommand‘などによって変更できます。
     git-config(1)を参照してください。

‘--single-worktree’
     デフォルトでは、作業ツリーが複数ある場合、‘--all`と’-reflog‘と
     ‘–indexed-objects‘では、すべての作業ツリーが検査されます
     (git-worktree(1)を参照)。このオプションは、現在の作業ツリーのみを調
     べるように強制します。

‘--ignore-missing’
     入力に無効なオブジェクト名が含まれている場合、そもそもその不正な入
     力が行われていないかのように見せかけます。

‘--bisect’
     コマンドラインで、bad bisection ref ‘refs/bisect/bad’ がリストされ
     、その後に ‘--not’ と good bisection ref ‘refs/bisect/good-*’ が続
     くかのように見せかけます。

‘--stdin’
     コマンドラインにリストされている’<commit>’に加えて、標準入力からそ
     れらを読み取ります。‘–‘区切り文字が表示された場合は、コミットの読み
     取りを停止し、パスの読み取りを開始して結果を制限します。

‘--cherry-mark’
     ‘--cherry-pick’（以下を参照）と同様ですが、同等のコミットを省略せず
     に‘=‘と印し、同等でないコミットを’+‘と印します。

‘--cherry-pick’
     コミットの組を対称差(symmetric difference)に制限する場合、「反対側
     」の別のコミットと同じ変更を導入するコミットを省略します。

     たとえば、‘A`と`B`の2つのブランチがある場合、それらの片側だけですべ
     てのコミットを一覧表示する通常の方法は、’–left-right‘を使用すること
     です(‘–left-right‘オプションの説明の以下の例を参照してください)。た
     だし、他のブランチからは(ブランチAと重複しない)厳選されたコミットが
     表示されます(たとえば、「3rd onb」はブランチAからチェリーピックされ
     る可能性があります)。このオプションを使用すると、そのようなコミット
     のペアは出力から除外されます。

‘--left-only’
‘--right-only’
     リストは、対称差のそれぞれの側でのみコミットします。つまり、
     ‘--left-right`で `<’ と印されるのだけか、あるいは‘–left-right‘で
     ‘>‘と印されるものだけです。

     たとえば、‘--cherry-pick --right-only A...B`は、`A`にある、または
     `A`のコミットとパッチと同等のコミットを`B`から省略します。つまり、
     これは`git cherry A B`からの’+‘コミットをリストします。より正確に書
     くと、’–cherry-pick –right-only –no-merges‘により正確なリストを提供
     します。

‘--cherry’
     ‘–right-only –cherry-mark –no-merges‘の同義語です。出力を私たちの側
     のコミットに制限し、フォークされた履歴の反対の側に適用されたものを
     、‘git cherry upstream mybranch‘と同様に‘git log –cherry
     upstream…mybranch‘で印するのに役立ちます。

‘-g’
‘--walk-reflogs’
     コミットの祖先チェーンをたどる代わりに、reflogエントリを最新のもの
     から古いものに移動します。このオプションを使用する場合、除外するコ
     ミットを指定することはできません(つまり、’^commit’や
     ’commit1..commit2’や’commit1...commit2’表記は使用できません)。

     (明らかな理由で、)‘oneline`と`reference`以外の’–pretty‘形式では、こ
     れにより、出力にreflogから取得された2行の追加情報が含まれます。出力
     のreflog指定子は、‘ref@{Nth}’(‘Nth`はreflogの逆時系列インデックス
     (reverse-chronological index))または`ref@{timestamp}’(そのエントリ
     のタイムスタンプ付き)として表示されます。表示は下記のいくつかのルー
     ルに依存します:

       1. 開始点が ‘ref@{Nth}’ として指定されている場合は、インデックス
          形式を表示します。

       2. 開始点が ‘ref@{now}’ として指定されている場合は、タイムスタン
          プ形式を表示します。

       3. 上記のどちらも使用されていないが、コマンドラインで‘–date‘が指
          定されている場合は、‘–date‘で要求された形式でタイムスタンプを
          表示します。

       4. それ以外の場合は、インデックス形式を表示します。

     ‘--pretty = oneline`では、コミットメッセージの前にこの情報が同じ行
     に付けられます。このオプションを’–reverse‘と組み合わせることはでき
     ません。git-reflog(1)も参照してください。

     ‘–pretty=reference‘では、この情報はまったく表示されません。

‘--merge’
     マージが失敗した後、競合があり、マージするすべてのheadに存在しない
     ファイルに関連(touch)するrefを表示します。

‘--boundary’
     除外された境界コミットを出力します。 境界コミットの前には ‘-‘が付い
     ています。


History Simplification
======================

特定の<path>を変更するコミットなど、履歴の一部のみに関心がある場合があり
ます。ただし、「履歴の簡略化」(History Simplification)は2つの部分から成
ります。履歴を簡略化するためにはさまざまな戦略があるためです。その1つは
コミットの選択であり、もう1つはそれを行う方法です。

   以下のオプションは、表示するコミットを選択します:

<paths>
     指定された<パス>を変更するコミットが選択されます。

‘--simplify-by-decoration’
     いくつかのブランチまたはタグによって参照されるコミットが選択されま
     す。

   注意: 意味のある重要な履歴のために、追加のコミットを表示できることに
注意してください。

   以下のオプションは、簡略化の実行方法に影響します。

Default mode
     履歴を、ツリーの最終状態を説明する最も単純な履歴に単純化します。最
     終結果が同じである場合(つまり、同じコンテンツのブランチをマージする
     場合)、いくつかの傍流ブランチ(side branches)を削除するため、最も単
     純です。

‘--show-pulls’
     デフォルトモードからのすべてのコミットを含めますが、最初の親への
     TREESAMEではなく、後の親へのTREESAMEであるマージコミットも含めます
     。このモードは、ブランチに変更を「最初に導入した」マージコミットを
     表示するのに役立ちます。(訳注:TREESAME=pathspecが全く同一であるツリ
     ー)

‘--full-history’
     デフォルトモードと同じですが、一部の履歴を削除しません。

‘--dense’
     選択したコミットのみが表示され、重大で意味のある履歴を持つコミット
     もいくつか表示されます。

‘--sparse’
     簡略化された履歴内のすべてのコミットが表示されます。

‘--simplify-merges’
     このマージに寄与する選択されたコミットがないため、結果の履歴からい
     くつかの不要なマージを削除するための‘–full-history‘への追加オプショ
     ン。

‘--ancestry-path’
     表示するコミットの範囲が指定されている場合(たとえば、
     _commit1..commit2’または’commit2 ^commit1_)、 _commit1_ と
     _commit2_ の間の祖先チェーンに直接存在するコミットのみ、つまり、
     _commit1_ の子孫であり、 _commit2_ の祖先であるコミットを表示します
     。

   より詳細な説明は以下のとおりです。

   <paths> として ‘foo’ を指定したとします。 ‘foo’ !TREESAME を変更する
コミットを呼び出し、残りをTREESAMEと呼びます。( ‘foo’ のためにフィルタリ
ングされた差分では、それぞれ異なって見えたりたり等しく見えたりします。）

   以下、簡略化設定の違いを説明するために、同じ履歴例を使います。このコ
ミットグラフでは、ファイル ‘foo’ をフィルタリングしていると想定していま
す:

               .-A---M---N---O---P---Q
              /     /   /   /   /   /
             I     B   C   D   E   Y
              \   /   /   /   /   /
               `-------------'   X

   履歴 A—Q の水平線は、各マージの最初の親と見なされます。その各コミット
は以下のとおりです:

   • ‘I’ は最初のコミットであり、ファイル ‘foo’ が内容 “asdf” で存在し、
     ファイル ‘quux’ は内容 “quux” で存在します。最初のコミットは空のツ
     リーと比較されるため、‘I’ は !TREESAME です。

   • ‘A’ では、 ‘foo’ には “foo” だけが含まれています。

   • ‘B’ には ‘A’ と同じ変更が含まれています。そのマージ ‘M’ は些細なこ
     とであり、したがってすべての親にとって TREESAME です。

   • ‘C’ は ‘foo’ を変更しませんが、そのマージ ‘N’ はそれを “foobar” に
     変更するので、どの親にとっても TREESAME ではありません。

   • ‘D’ は ‘foo’ を “baz” に設定します。そのマージ ‘O’ は、 ‘N’ と ‘D’
     から “foobarbaz” への文字列を結合します。つまり、どの親にとっても
     TREESAME ではありません。

   • ‘E’ は ‘quux’ を “xyzzy” に変更し、そのマージ ‘P’ は文字列を
     “quuxxyzzy” に結合します。 ‘P’ は ‘O’ に対して TREESAME ですが、
     ‘E’ に対してはそうではありません。

   • ‘X’ は、新ファイル ‘side’ を追加し、 ‘Y’ がそれを変更した独立したル
     ートコミットです。 ‘Y’ は ‘X’ へのTREESAMEです。そのマージ ‘Q’ は
     ‘P’ に ‘side’ を追加し、 ‘Q’ は ‘P’ にはTREESAMEですが、‘Y’ に対し
     てはそうではありません。

   ‘rev-list’ は、 ‘--full-history’ および/または、( ‘--parents’ または
‘--children’ を介して)親の書き換えが使用されているかどうかに基づいて、コ
ミットを含めたり除外したりして、履歴を逆方向にウォークスルーします。以下
の設定が可能です。

Default mode
     コミットは、どの親に対してもTREESAMEでない場合に含まれます(これは変
     更できますが、以下の ‘--sparse’ を参照してください)。コミットがマー
     ジであり、一方の親に対するTREESAMEであった場合は、その親のみをフォ
     ローします。(TREESAMEの親が複数ある場合でも、そのうちの1つだけをフ
     ォローします)。それ以外の場合は、すべての親をフォローします。

     これにより、以下のようになります:

                    .-A---N---O
                   /     /   /
                  I---------D

     TREESAMEの親のみに従うルールが利用可能な場合は、 ‘B’ を検討対象から
     完全に削除したことに注意してください。 ‘C’ は ‘N’ を介して考慮され
     ましたが、しかしそれはTREESAMEです。ルートコミットは空のツリーと比
     較されるため、 ‘I’ は !TREESAME です。

     親子関係は ‘--parents’ でのみ表示されますが、デフォルトモードで選択
     されたコミットには影響しないため、親の行を示しました。

‘--full-history without parent rewriting’
     このモードは、デフォルトとはある一点で異なります。つまり、いずれか
     の親に対してTREESAMEであっても、常にマージのすべての親に従います。
     マージの複数の側にコミットが含まれている場合でも、これはマージ自体
     が含まれていることを意味するものではありません！ 例では以下のように
     なります。

                  I  A  B  N  D  O  P  Q

     ‘M’ は、両方の親にとってTREESAMEであるため、除外されました。 ‘E’ と
     ‘C’ と ‘B’ をすべて巡りましたが、 ‘B’ だけが !TREESAME だったので、
     他は表示されません。

     注意: 親の書き換え(rewrite)がないと、コミット間の親子関係について話
     す(talk)ことは実際には不可能であるため、それらが切断されている
     (disconnected)ことを示していることに注意してください。

‘--full-history with parent rewriting’
     通常のコミットは !TREESAME の場合にのみ含まれます(これは変更できま
     すが、以下の ‘--sparse’ を参照してください)。

     マージは常に含まれます。ただし、親リストは書き直されます。各親に沿
     って、自分自身に含まれていないコミットを削除します。 これにより以下
     のようになります。

                    .-A---M---N---O---P---Q
                   /     /   /   /   /
                  I     B   /   D   /
                   \   /   /   /   /
                    `-------------'

     上記を書き直さずに ‘--full-history’ と比較してください。 ‘E’ は
     TREESAMEであるため削除されましたが、Pの親リストは ‘E’ の親 ‘I’ を含
     むように書き直されていることに注意してください。 ‘C’ と ‘N’ および
     ‘X’ と ‘Y’ と ‘Q’ についても同じことが起こりました。

   上記の設定に加えて、あなたはTREESAMEが包含に影響を与えるかどうかを変
更できます:

‘--dense’
     巡ったコミットは、親にとってTREESAMEでない場合に含まれます。

‘--sparse’
     巡ったすべてのコミットが含まれます。

     ‘--full-history’ がなくても、これによりマージが単純化されることに注
     意してください。親の1つがTREESAMEの場合、その1つだけに従うため、マ
     ージの反対側を巡ることはありません。

‘--simplify-merges’
     最初に、親を書き換えた ‘--full-history’ と同じ方法で履歴グラフを作
     成します(上記を参照)。

     それから、以下のルールに従って、各コミット ‘C’ を最終履歴内の置換
     ‘C'’ に単純化します:

        • ‘C'’ を ‘C’ にセットします。

        • ‘C'’ の各親 ‘P’ をその簡略化された ‘P'’ に置き換えます。その過
          程で、他の親の祖先であるか、ルートである親を削除すると、
          TREESAMEが空のツリーにコミットされ、重複が削除されますが、
          TREESAMEであるすべての親を削除しないように注意してください。

        • この親の書き換え後、 ‘C'’ がルートまたはマージコミット(0または
          >1 の親を持つ)、境界コミット、または !TREESAMEである場合、それ
          は残ります。それ以外の場合は、唯一の親に置き換えられます。

     この効果は、親の書き換えを使用した ‘--full-history’ と比較すること
     で最もよく示されます。例は以下のようになります:

                    .-A---M---N---O
                   /     /       /
                  I     B       D
                   \   /       /
                    `---------'

     注意: ‘--full-history’ に対する ‘N’ と ‘P’ と ‘Q’ の主な違いに注意
     してください:

        • ‘N’ の親リストは、他の親 ‘M’ の祖先であるため、 ‘I’ が削除され
          ました。それでも、 !TREESAME なので ‘N’ が残りました。

        • ‘P’ の親リストも同様に ‘I’ が削除されました。 ‘P’ は、親が1つ
          で TREESAMEであるため、完全に削除されました。

        • ‘Q’ の親リストでは、 ‘Y’ が ‘X’ に簡略化されていました。その後
          、 ‘X’ はTREESAMEルートであったため、削除されました。 ‘Q’ は、
          親が1つで TREESAMEであるため、完全に削除されました。

   利用可能な別の簡略化モードがあります:

‘--ancestry-path’
     表示されるコミットを、指定されたコミット範囲内の “from” コミットと
     “to” コミットの間の祖先チェーンに直接あるコミットに制限します。つま
     り、 “to” コミットの祖先であるコミットと “from” コミットの子孫であ
     るコミットのみを表示します。

     ユースケースの例として、以下のコミット履歴について考えます:

                      D---E-------F
                     /     \       \
                    B---C---G---H---I---J
                   /                     \
                  A-------K---------------L--M

     通常の _D..M_ は、 ‘M’ の祖先であるコミットのセットを計算しますが、
     ‘D’ の祖先であるコミットは除外します。 これは、「 ‘M’ には ‘D’ には
     存在しなかったものがある」という意味で、 ‘D’ 以降の ‘M`に至るまでの
     歴史に何が起こったのかを知るのに役立ちます。この例の結果は、 `A’ と
     ‘B’ (そしてもちろん ‘D’ 自体)を除くすべてのコミットになります。

     ただし、 ‘M’ のコミットが ‘D’ で入ったバグで汚染されており、修正が
     必要な場合は、実際には ‘D’ の子孫である _D..M_ のサブセットのみを表
     示する必要があります。つまり、 ‘C’ と ‘K’ を除外します。これはまさ
     に ‘--ancestry-path’ オプションが行うことです。これを _D..M_ 範囲に
     適用すると、以下のようになります:

                          E-------F
                           \       \
                            G---H---I---J
                                         \
                                          L--M

   別のオプション ‘--show-pulls’ について説明する前に、新しいサンプル履
歴を作成する必要があります。

   簡略化された履歴を見るときにユーザーが直面する一般的な問題は、ファイ
ルを変更したことがわかっているコミットが、ファイルの簡略化された履歴に表
示されないことです。そこで、新しい例を示し、その場合に ‘--full-history’
や ‘--simplify-merges’ などのオプションがどのように機能するかを示しまし
ょう。

               .-A---M-----C--N---O---P
              /     / \  \  \/   /   /
             I     B   \  R-'`-Z'   /
              \   /     \/         /
               \ /      /\        /
                `---X--'  `---Y--'

   この例では、 ‘I’ が ‘file.txt’ を作成し、それが ‘A’ と‘B‘ と ‘X’ にて
さまざまな方法で変更されたとします。ひとり親のコミット ‘C’ と ‘Z’ と ‘Y’
は ‘file.txt’ を変更していません。マージコミット ‘M’ は、マージの競合を
解決して、 ‘A’ と ‘B’ の両方の変更を含めることによって作成されたため、ど
ちらにもTREESAMEではありません。ただし、マージコミット ‘R’ は、 ‘M’ の
‘file.txt`の内容を無視し、 `X’ の ‘file.txt’ の内容のみを取得することに
よって作成されました。 したがって、 ‘R’ は ‘X’ へのTREESAMEですが、 ‘M’
はそうではありません。最後に、 ‘N’ を作成するための自然なマージ解決は、
‘R’ で ‘file.txt’ の内容を取得することです。したがって、 ‘N’ は ‘C’ では
なく ‘R’ へのTREESAMEです。マージコミット ‘O’ と ‘P’ は、最初の親には
TREESAMEですが、2番目の親である ‘Z’ と ‘Y’ にはついてはそうではありませ
ん。

   デフォルトモードを使用する場合、 ‘N’ と ‘R’ は両方ともTREESAMEの親を
持っているため、これらのエッジはウォークされ、他のエッジは無視されます。
結果の履歴グラフは以下のとおりです:

             I---X

   ‘--full-history’ を使用する場合、Gitはすべてのエッジを巡ります。これ
により、コミット ‘A’ と ‘B’ と マージ ‘M’ が検出されますが、マージコミッ
ト ‘O’ と ‘P’ も明らかになります。 親を書き換えると、結果のグラフは以下
のようになります:

               .-A---M--------N---O---P
              /     / \  \  \/   /   /
             I     B   \  R-'`--'   /
              \   /     \/         /
               \ /      /\        /
                `---X--'  `------'

   ここで、マージコミット ‘O’ と ‘P’ は、実際には ‘file.txt’ への変更を
提供しなかったため、余分なノイズを提供します。古いバージョンの
‘file.txt’ に基づいたトピックのみをマージしました。これは、多くの寄稿者
が並行して作業し、トピックブランチを単一のトランクに沿ってマージするワー
クフローを使用するリポジトリの一般的な問題です。開発に関係のないマージが
‘--full-history’ の結果に表示されます。

   ‘--simplify-merges’ オプションを使用すると、コミット ‘O’ と ‘P’ が結
果から消えます。 これは、 ‘O’ と ‘P’ の書き直された2番目の親が、最初の親
から到達可能であるためです。これらのエッジが削除されると、コミットは、親
にとってTREESAMEである単一の親のコミットのように見えます。これはコミット
‘N’ にも発生し、以下のような履歴ビューが表示されます:

               .-A---M--.
              /     /    \
             I     B      R
              \   /      /
               \ /      /
                `---X--'

   このビューでは、 ‘A’ と ‘B’ と ‘X’ からの重要なひとり親の変更がすべて
表示されます。また、慎重に解決されたマージ ‘M’ とそれほど慎重に解決され
ていないマージ ‘R’ も表示されます。これは通常、コミット ‘A’ と ‘B’ がデ
フォルトのビューの履歴から「消えた」理由を判断するのに十分な情報です。た
だし、このアプローチにはいくつかの問題があります。

   最初の問題はパフォーマンスです。以前のオプションとは異なり、
‘--simplify-merges’ オプションでは、単一の結果を返す前にコミット履歴全体
をウォークする必要があります。これにより、非常に大規模なリポジトリでこの
オプションを使用するのが難しくなる可能性があります。

   2番目の問題は監査の1つです。多くの寄稿者が同じリポジトリで作業してい
る場合、どのマージコミットが重要なブランチに変更を導入したかが重要です。
上記の問題のあるマージ ‘R’ は、重要なブランチにマージするために使用され
たマージコミットではない可能性があります。 代わりに、マージ ‘N’ を使用し
て ‘R’ と ‘X’ を重要なブランチにマージしました。このコミットには、変更
‘X’ がコミットメッセージの ‘A’ と ‘B’ からの変更を上書きするようになった
理由に関する情報が含まれている可能性があります。

‘--show-pulls’
     デフォルトの履歴に表示されるコミットに加えて、最初の親には
     TREESAMEではなく、後の親にはTREESAMEである各マージコミットを表示し
     ます。

     マージコミットが ‘--show-pulls’ に含まれている場合、マージは別のブ
     ランチから変更を「プル」したかのように扱われます。この例で
     ‘--show-pulls’ を使用すると(他のオプションは使用しない場合、)結果の
     グラフは行かのようになります:

                  I---X---R---N

     ここで、コミット ‘X’ と ‘R’ をそれぞれベースブランチにプルしたため
     、マージコミット ‘R’ と ‘N’ が含まれています。これらのマージは、コ
     ミット ‘A’ と ‘B’ がデフォルトの履歴に表示されない理由です。

     ‘--show-pulls’ が ‘--simplify-merges’ とペアになっている場合、グラ
     フには必要なすべての情報が含まれます:

                    .-A---M--.   N
                   /     /    \ /
                  I     B      R
                   \   /      /
                    \ /      /
                     `---X--'

     ‘M’ は ‘R’ から到達可能であるため、 ‘N’ から ‘M’ へのエッジが単純化
     されていることに注意してください。ただし、 ‘N’ は、変更 ‘R’ をメイ
     ンブランチに「プル」したため、重要なコミットとして履歴に表示されま
     す。

   ‘--simplify-by-decoration’ オプションを使用すると、タグで参照されてい
ないコミットを省略して、履歴のトポロジの全体像のみを表示できます。コミッ
トは、(1)タグによって参照されている場合、または (2)コマンドラインで指定
されたパスの内容を変更した場合に、!TREESAMEとしてマークされます(つまり、
上記の履歴簡略化ルールの後に保持されます)。他のすべてのコミットは
TREESAMEとしてマークされます(簡略化される可能性があります)。


Commit Ordering
===============

デフォルトでは、コミットは新しい順に表示されます。

‘--date-order’
     すべての子が表示されるまで親を表示しませんが、それ以外の場合はコミ
     ットタイムスタンプの順序でコミットを表示します。

‘--author-date-order’
     すべての子が表示されるまで親を表示しませんが、それ以外の場合は、作
     者(author)のタイムスタンプ順にコミットを表示します。

‘--topo-order’
     すべての子が表示されるまで親を表示せず、複数の履歴行が混在するコミ
     ットを表示しないようにします。

     たとえば、以下のようなコミット履歴があります:

              ---1----2----4----7
                  \              \
                   3----5----6----8---

     ここで、数字はコミットタイムスタンプの順序を示し、 ‘gitrev-list’ と
     ‘--date-order’ のある友達は、タイムスタンプの順序でコミットを示しま
     す。つまり、8 7 6 5 4 3 2 1

     ‘--topo-order’ を使用すると、8 6 5 3 7 4 2 1（または8 7 4 2 6 5 3
     1）が表示されます。2つの並列開発トラックからのコミットが混在して表
     示されないようにするために、いくつかの古いコミットが新しいコミット
     の前に表示されます。

‘--reverse’
     表示するように選択したコミットを逆の順序で出力します(上記の Commit
     Limiting 節を参照)。 ‘--walk-reflogs’ と組み合わせることはできませ
     ん。


Object Traversal
================

これらのオプションは、主にGitリポジトリのパッキングを対象としています。

‘--unsorted-input’
     コミット時間で時系列の逆順に並べ替えるのではなく、コマンドラインで
     指定された順序でコミットを表示します。‘--no-walk’ または
     ‘--no-walk=sorted’ と組み合わせることはできません。

‘--no-walk[=(sorted|unsorted)]’
     指定されたコミットのみを表示し、祖先をトラバースしない。範囲が指定
     されている場合、これは効果がありません。引数 ‘unsorted’ が指定され
     ている場合、コミットはコマンドラインで指定された順序で表示されます
     。それ以外の場合( ‘sorted’ または引数が指定されていない場合)、コミ
     ットはコミット時間の逆順に表示されます。 ‘--graph’ と組み合わせるこ
     とはできません。 ‘sorted’ または引数が指定されていない場合、
     ‘--unsorted-input’ と組み合わせることはできません。

‘--do-walk’
     以前の ‘--no-walk’ を上書きします。


Commit Formatting
=================

‘--pretty[=<format>]’
‘--format=<format>’
     コミットログの内容を指定された形式できれいに印刷(pretty-print)しま
     す。 _<format>_ は oneline・short・medium・full・fuller・
     reference・email・raw・format:<string>・tformat:<string> のいずれか
     になります。 _<format>_ が上記のいずれでもなく、 _%placeholder_ が
     含まれている場合、 _–pretty=tformat:<format>_ が指定されたかのよう
     に動作します。

     各フォーマットの詳細については、 "PRETTY FORMATS" セクションを参照
     してください。 _=<format>_ の部分を省略すると、デフォルトで
     _medium_ になります。

     注意: リポジトリー構成でデフォルトのpretty formatを指定できます
     (git-config(1) 参照)。

‘--abbrev-commit’
     40バイトの16進コミットオブジェクト名全体を表示する代わりに、オブジ
     ェクトに一意の名前を付けるプレフィックスを表示します。
     "–abbrev=<n>" (表示されている場合はdiff出力も変更します)オプション
     を使用して、プレフィックスの最小長を指定できます。

     これにより、80桁幅の端末を使用している人にとって "–pretty=oneline"
     がずっと読みやすくなるはずです。

‘--no-abbrev-commit’
     完全な40バイトの16進コミットオブジェクト名を表示します。 これにより
     、明示的または "–oneline" などの他のオプションによって暗黙的に示さ
     れる ‘--abbrev-commit’ が無効になります。また、 ‘log.abbrevCommit’
     変数をオーバーライドします。

‘--oneline’
     これは、 "–pretty=oneline –abbrev-commit" を一緒に使用するための省
     略形です。

‘--encoding=<encoding>’
     コミットオブジェクトは、ログメッセージに使用される文字エンコードを
     エンコードヘッダーに記録します。このオプションを使用して、ユーザー
     が好むエンコーディングでコミットログメッセージを再コーディングする
     ようにコマンドに指示できます。配管以外のコマンドの場合、これはデフ
     ォルトでUTF-8になります。オブジェクトが ‘X’ でエンコードされている
     と主張し、 ‘X’ で出力している場合、オブジェクトをそのまま出力するこ
     とに注意してください。これは、元のコミットの無効なシーケンスが出力
     にコピーされる可能性があることを意味します。同様に、 iconv(3) コミ
     ットの変換に失敗した場合、警告とともに元のオブジェクトをそのまま出
     力します。

‘--expand-tabs=<n>’
‘--expand-tabs’
‘--no-expand-tabs’
     出力に表示する前に、ログメッセージでタブ展開を実行します(タブ幅を
     <n> とみなして <n> 境界に揃うように空白で調整する)。
     ‘--expand-tabs’ は ‘--expand-tabs=8’ の省略形であり、
     ‘--no-expand-tabs’ は ‘--expand-tabs=0’ の省略形です。タブの展開を
     無効にします。

     デフォルトでは、タブはログメッセージを4つのスペースでインデントする
     きれいな形式(pretty formats)で展開されます(つまり、デフォルトの
     _medium_ と’full’ と _fuller_)。

‘--notes[=<ref>]’
     コミットログメッセージを表示するときに、コミットに注釈を付ける
     notes(git-notes(1) 参照)を表示します。これは、コマンドラインに
     ‘--pretty’ 、‘--format’ または ‘--oneline’ オプションが指定されてい
     ない場合の、 ‘git log’ と ‘git show’ と ‘ git whatchanged‘ コマンド
     のデフォルトです。

     デフォルトでは、表示されるnotesは、 ‘core.notesRef’ および
     ‘notes.displayRef’ 変数(または対応する環境変数オーバーライド)にリス
     トされているnote refからのものです。詳細については git-config(1) を
     参照してください。

     オプションの _<ref>_ 引数を使用して、refを使用して表示するnotesを検
     索します。 refは、 ‘refs/notes/’ で始まる完全なrefnameを指定できま
     す。 ‘notes/’ で始まるか、 ‘refs/’ で始まるか、それ以外で始まる場合
     、 ‘refs/notes/’ が接頭辞として付けられ、refのフルネームを形成しま
     す。

     複数の –notes オプションを組み合わせて、表示するノートを制御できま
     す。 例: "–notes=foo" は "refs/notes/foo" からのnotesのみを表示しま
     す。 "–notes=foo –notes" は、 "refs/notes/foo" とデフォルトのnotes
     ref(s) の両方のnotesを表示します。

‘--no-notes’
     notesを表示しないでください。 これは、notesが表示されるnotes refの
     リストをリセットすることにより、上記の ‘--notes’ オプションを無効に
     します。 オプションは、コマンドラインで指定された順序で解析されます
     。 "–notes –notes=foo –no-notes –notes=bar" は、 "refs/notes/bar" か
     らのnotesのみを表示します。

‘--show-notes[=<ref>]’
‘--[no-]standard-notes’
     これらのオプションは非推奨です。 代わりに、上記の –notes/–no-notes
     オプションを使用してください。

‘--show-signature’
     署名を ‘gpg --verify’ に渡して、署名されたコミットオブジェクトの有
     効性を確認し、出力を表示します。

‘--relative-date’
     ‘--date=relative’ と同じ。

‘--date=<format>’
     ‘--pretty’ を使用する場合など、人間が読める形式で表示される日付に対
     してのみ有効になります。 ‘log.date’ 構成変数(config variable)は、
     logコマンドの ‘--date’ オプションのデフォルト値を設定します。デフォ
     ルトでは、日付は元のタイムゾーン(コミッターの、または作者のいずれか
     )で表示されます。フォーマットに ‘-local’ が追加されている場合(例:
     ‘iso-local’ )、代わりにユーザーのローカルタイムゾーンが使用されます
     。

     ‘--date=relative’ は、現在の時刻を基準にした日付を示します。例: “2
     hours ago” 。 ‘-local’ オプションは ‘--date = relative’ には効果が
     ありません。

     ‘--date=local’ は ‘--date=default-local’ のエイリアスです。

     ‘--date=iso’ (または ‘--date=iso8601’ )は、タイムスタンプをISO
     8601のような形式で表示します。厳密なISO 8601形式との違いは以下のと
     おりです:

        • ‘T’ 日付/時刻区切り文字の代わりにスペース

        • 時間とタイムゾーンの間のスペース

        • タイムゾーンの時間と分の間にコロンがありません

     ‘--date=iso-strict’ (または ‘--date=iso8601-strict’ )は、タイムスタ
     ンプを厳密なISO 8601形式で表示します。

     ‘--date=rfc’ (または ‘--date=rfc2822’ )は、RFC 2822形式のタイムスタ
     ンプを示します。これは、電子メールメッセージでよく見られます。

     ‘--date=short’ は、日付のみを表示し、時刻は表示せず、 ‘YYYY-MM-DD’
     形式で表示します。

     ‘--date=raw’ は、エポック(1970-01-01 00:00:00 UTC)からの秒数、スペ
     ース、UTCからのオフセット(‘+’ または ‘-’ の付いた4桁数字で、最初の
     2つは時間、次の2つは分です)。つまり、タイムスタンプが ‘strftime("%s
     %z")’ でフォーマットされているかのようになります。 ‘-local’ オプシ
     ョンは、seconds-since-epoch値(常にUTCで測定されます)には影響しませ
     んが、付随するタイムゾーン値を切り替えることに注意してください。

     ‘--date=human’ は、タイムゾーンが現在のタイムゾーンと一致しない場合
     はタイムゾーンを表示し、一致する場合は日付全体を印刷しません(つまり
     、「今年」の日付の場合は年の印刷をスキップしますが、何があったか覚
     えてるような過去数日については日付自体もスキップします)。 古い日付
     の場合、時と分も省略されます。

     ‘--date=unix’ は、日付をUnixエポックタイムスタンプ(1970年からの秒数
     )として表示します。 ‘--raw’ と同様に、これは常にUTCであるため、 ‘
     -local‘ は効果がありません。

     ‘--date=format:...’ は、内部で処理される%zと%Zを除いて、フォーマッ
     ト ‘...’ をあなたのシステムの ‘strftime’ に送ります。
     ‘--date=format:%c’ を使用して、システムロケールの推奨形式で日付を表
     示します。フォーマットプレースホルダーの完全なリストについては、
     ‘strftime’ マニュアルを参照してください。 ‘-local’ を使用する場合、
     正しい構文は ‘--date=format-local:...’ です。

     ‘--date=default’ はデフォルトの形式であり、いくつかの例外を除いて
     ‘--date=rfc2822’ に似ています:

        • 曜日の後にコンマはありません

        • ローカルタイムゾーンを使用する場合、タイムゾーンは省略されます

‘--parents’
     コミットの親も出力します( "commit parent…" の形式で)。親の書き換え
     も可能にします。上記の _History Simplification_ 参照してください。

‘--children’
     コミットの子も出力します( "commit child…" の形式で)。親の書き換えも
     可能にします。上記の _History Simplification_ を参照してください。

‘--left-right’
     対称差のどちら側からコミットに到達できるかをマークします。左側から
     のコミットには‘<‘が付けられ、右側からのコミットには `>`が付けられま
     す。’–boundary‘と組み合わせると、それらのコミットの前に‘-‘が付きま
     す。

     たとえば、以下のトポロジーの場合:

                       y---b---b  branch B
                      / \ /
                     /   .
                    /   / \
                   o---x---a---a  branch A

     以下のような出力が得られます:

                  $ git rev-list --left-right --boundary --pretty=oneline A...B

                  >bbbbbbb... 3rd on b
                  >bbbbbbb... 2nd on b
                  <aaaaaaa... 3rd on a
                  <aaaaaaa... 2nd on a
                  -yyyyyyy... 1st on b
                  -xxxxxxx... 1st on a

‘--graph’
     出力の左側に、コミット履歴のテキストベースのグラフィック表現を描画
     します。グラフ履歴を適切に描画するために、コミットの間に余分な行が
     出力される可能性があります。 ‘--no-walk’ と組み合わせることはできま
     せん。

     これにより、親の書き換えが可能になります。上記の _History
     Simplification_ を参照してください。

     これは、デフォルトで ‘--topo-order’ オプションを意味しますが、
     ‘--date-order’ オプションも指定できます。

‘--show-linear-break[=<barrier>]’
     –graph を使用しない場合、すべての履歴ブランチがフラット化されるため
     、2つの連続するコミットが線形ブランチに属していないことがわかりにく
     くなる可能性があります。このオプションは、その場合、それらの間に障
     壁を置きます。 ‘<barrier>’ が指定されている場合、デフォルトの障壁文
     字列の代わりに ‘<barrier>’ が表示されます。


PRETTY FORMATS
**************

コミットがマージであり、 pretty-format が _oneline_ または _email_ また
は _raw_ でない場合、 _Author:_ 行の前に追加の行が挿入されます。この行は
"Merge: " で始まり、先祖のコミットのハッシュがスペースで区切られて出力さ
れます。履歴の表示を制限している場合、たとえば、特定のディレクトリまたは
ファイルに関連する変更のみに関心がある場合、リストされたコミットは必ずし
も *直接* の親コミットのリストではない可能性があることに注意してください
。

   いくつかの組み込みフォーマットがあります。そして以下で説明するように
、 pretty.<name> 構成オプション(config option)を別のフォーマット名または
_format:_ 文字列に設定することで、追加のフォーマットを定義できます
(git-config(1) 参照)。組み込みフォーマットの詳細は以下のとおりです:

   • _oneline_

          <hash> <title line>

     これは、可能な限りコンパクトになるように設計されています。

   • _short_

          commit <hash>
          Author: <author>

          <title line>

   • _medium_

          commit <hash>
          Author: <author>
          Date:   <author date>

          <title line>

          <full commit message>

   • _full_

          commit <hash>
          Author: <author>
          Commit: <committer>

          <title line>

          <full commit message>

   • _fuller_

          commit <hash>
          Author:     <author>
          AuthorDate: <author date>
          Commit:     <committer>
          CommitDate: <committer date>

          <title line>

          <full commit message>

   • _reference_

          <abbrev hash> (<title line>, <short author date>)

     この形式は、コミットメッセージ内の別のコミットを参照するために使用
     され、 ‘--pretty='format:%C(auto)%h (%s, %ad)'’ と同じです。 デフォ
     ルトでは、別の ‘--date’ オプションが明示的に指定されていない限り、
     日付は ‘--date=short’ でフォーマットされます。formatプレースホルダ
     ーを使用する他の ‘format:’ と同様に、その出力は、 ‘--decorate’ や
     ‘--walk-reflogs’ などの他のオプションの影響を受けません。

   • _email_

          From <hash> <date>
          From: <author>
          Date: <author date>
          Subject: [PATCH] <title line>

          <full commit message>

   • _mboxrd_

     _email_ と同様ですが、コミットメッセージの "From " で始まる行(前に
     0個以上の ">" が付いている)は ">" でクォートされているため、新しい
     コミットの開始と混同されることはありません。

   • _raw_

     _raw_ 形式は、コミットオブジェクトに格納されているとおりにコミット
     全体を正確に表示します。とりわけ –abbrev または –no-abbrev のどちら
     が使用されているかに関係なく、ハッシュは完全に表示され、「親」
     (parents)情報は、移植や履歴の単純化を考慮せずに、真の親のコミットを
     示します。この形式は、コミットの表示方法に影響しますが、いわゆる
     ‘git log --raw’ の差分の表示方法ではありません。生のdiff形式で完全
     なオブジェクト名を取得するには、 ‘--no-abbrev’ を使用します。

   • _format:<string>_

     _format:<string>_ 形式を使用すると、表示する情報を指定できます。注
     意: これはprintf書式に少し似ていますが、 _\n_ の代わりに _%n_ を使
     用して改行を取得するという例外に注意してください。

     例: _format:"The author of %h was %an, %ar%nThe title was
     >>%s<<%n"_ は以下のように表示されます:

          The author of fe6e0ee was Junio C Hamano, 23 hours ago
          The title was >>t4119: test autocomputing -p<n> for traditional diff input.<<

     さて、以下がプレースホルダー達です:

        • 単一のリテラル文字に展開されるプレースホルダー:

          _%n_
               改行(newline)

          _%%_
               ’%’そのもの

          _%x00_
               16進数のバイト値を出力

        • うしろのプレースホルダーのフォーマッティングに影響するプレース
          ホルダー:

          _%Cred_
               赤色に切り替える

          _%Cgreen_
               緑色に切り替える

          _%Cblue_
               青色に切り替える。

          _%Creset_
               色をリセットする

          _%C(…)_
               git-config(1) の "CONFIGURATION FILE" 節の Values で説明
               されている色の指定。 デフォルトでは、色はログ出力が有効に
               なっている場合にのみ表示されます（ ‘color.diff’ または ‘
               color.ui‘ または ‘--color`によって、ターミナルに行く場合
               は前者の `auto’ 設定を尊重します)。 ‘%C(auto,...)’ は、
               default の歴史的同義語として受け入れられます(例:
               ‘%C(auto,red)’)。 ‘%C(always,...)’ を指定すると、色が有効
               になっていない場合でも色が表示されます(この形式やgitが色
               付けする可能性のある他のすべてのものを含め、出力全体の色
               を有効にするために ‘--color = always’ の使用を検討してく
               ださい)。 ‘auto’ のみ(つまり、 ‘%C(auto)’ )は、色が再び切
               り替わるまで、続くプレースホルダーで自動色付けをオンにし
               ます。

          _%m_
               左(‘<’) または 右(‘>’) または 境界 (‘-’) の印

          _%w([<w>[,<i1>[,<i2>]]])_
               git-shortlog(1) の -w オプションのように、 行の折り返しを
               切り替えます。

          _%<(<N>[,trunc|ltrunc|mtrunc])_
               次のプレースホルダーに少なくともN列を使用させ、 必要に応
               じて右側にスペースを埋め込みます。オプションで、出力がN列
               より長い場合は、先頭(ltrunc)または中間(mtrunc)または末尾
               (trunc)で切り捨てます。注意: 切り捨ては、 N >= 2 でのみ正
               しく機能することに注意してください。

          _%<|(<N>)_
               次のプレースホルダーを少なくともN番目の列まで取得し、 必
               要に応じて右側にスペースを埋め込みます

          _%>(<N>)_, _%>|(<N>)_
               それぞれ _%<(<N>)_ 、 _%<|(<N>)_ に似ていますが、 左側に
               スペースが埋め込まれています

          _%>>(<N>)_, _%>>|(<N>)_
               _%>(<N>)_ 、 _%>|(<N>)_ とそれぞれ似ていますが、 次のプレ
               ースホルダーが指定されたよりも多くのスペースを取り、その
               左側にスペースがある場合は、それらのスペースを使用します
               。

          _%><(<N>)_, _%><|(<N>)_
               それぞれ _%<(<N>)_ 、 _%<|(<N>)_ に似ていますが、 両側に
               パディングがあります(つまり、テキストが中央に配置されます
               )

        • コミットから抽出された情報に展開するプレースホルダー:

          _%H_
               コミットハッシュ

          _%h_
               省略されたコミットハッシュ

          _%T_
               ツリーハッシュ

          _%t_
               省略されたツリーハッシュ

          _%P_
               親のハッシュ達

          _%p_
               省略された親のハッシュ達

          _%an_
               作者名

          _%aN_
               作者名( .mailmap に関しては、git-shortlog(1) または
               git-blame(1) を参照)

          _%ae_
               作者電子メールアドレス

          _%aE_
               作者電子メールアドレス(.mailmap に関しては
               git-shortlog(1) または git-blame(1) を参照)

          _%al_
               作者電子メールアドレスアカウント名(local-part)( _@_ の前
               の部分)

          _%aL_
               作者電子メールアドレスアカウント名(local-part)(_%al_ 参照
               ) .mailmap に関しては git-shortlog(1) または git-blame(1)
               参照)

          _%ad_
               作成日(フォーマットに関しては –date= オプション参照)

          _%aD_
               作成日 RFC2822形式

          _%ar_
               作成日 相対(relative)形式

          _%at_
               作成日 UNIXタイムスタンプ形式

          _%ai_
               作成日 ISO 8601風形式

          _%aI_
               作成日 厳密なISO 8601形式

          _%as_
               作成日 短い形式(‘YYYY-MM-DD’)

          _%ah_
               作成日 human形式( git-rev-list(1) の ‘--date=human’ オプ
               ションのようなかんじ)

          _%cn_
               コミッター名

          _%cN_
               コミッター名( .mailmap に関しては git-shortlog(1) または
               git-blame(1) 参照)

          _%ce_
               コミッター電子メールアドレス

          _%cE_
               コミッター電子メールアドレス(.mailmap に関しては
               git-shortlog(1) または git-blame(1) 参照)

          _%cl_
               コミッター電子メールアドレスアカウント名(local-part)( _@_
               の前の部分)

          _%cL_
               コミッター電子メールアドレスアカウント名(local-part)(
               _%cl_ 参照) .mailmap に関しては git-shortlog(1) または
               git-blame(1) 参照)

          _%cd_
               コミッター日付(フォーマットに関しては –date= オプション参
               照)

          _%cD_
               コミッター日付 RFC2822形式

          _%cr_
               コミッター日付 相対(relative)形式

          _%ct_
               コミッター日付 UNIXタイムスタンプ形式

          _%ci_
               コミッター日付 ISO 8601風形式

          _%cI_
               コミッター日付 厳密なISO 8601形式

          _%cs_
               コミッター日付 短い形式(‘YYYY-MM-DD’)

          _%ch_
               コミッター日付 human形式(git-rev-list(1) の
               ‘--date=human’ オプションのようなかんじ)

          _%d_
               ref名 git-log(1) の –decorate オプションみたいなの

          _%D_
               " (", ")" で囲ってないref名

          _%(describe[:options])_
               git-describe(1) のような人間が読める名前。 説明できないコ
               ミットの場合は空の文字列。 ‘describe’ 文字列の後には、コ
               ロンと0個以上のカンマ区切りオプションを続けることができま
               す。タグが同時に追加または削除されると、説明に一貫性がな
               くなる可能性があります。

                  • _match=<pattern>_: "refs/tags/" プレフィックスを除い
                    て、指定された ‘glob(7)’ パターンに一致するタグのみ
                    を考慮します。

                  • _exclude=<pattern>_: "refs/tags/" プレフィックスを除
                    いて、指定された ‘glob(7)’ パターンに一致するタグを
                    考慮しないでください。

          _%S_
               コミットに到達したコマンドラインで指定されたref名 ( ‘git
               log --source’ など)は、 ‘git log’ でのみ機能します

          _%e_
               エンコーディング

          _%s_
               件名(subject)

          _%f_
               ファイル名に適した、サニタイズされた件名

          _%b_
               本文(body)

          _%B_
               生本文(raw body)(ラップされてない件名と本文)

          _%N_
               コミットノート(commit notes)

          _%GG_
               署名されたコミットの為のGPSからの生の検証メッセージ

          _%G?_
               良い(good)な(有効な)署名の場合は "G" 、 悪い(bad)な署名の
               場合は "B" 、有効性が不明(unknown)な良い署名の場合は "U"
               、期限切れ(eXpired)の良い署名の場合は "X" 、期限切れのキ
               ーで作成された良い署名の場合は "Y" 、取り消されたキーによ
               って作成された良い署名の場合は "R" 、署名を確認できない場
               合(キーの欠落など)は "E" 、署名がない場合は "N" を表示し
               ます。

          _%GS_
               署名されたコミットの署名者の名前を表示する

          _%GK_
               署名されたコミットに署名するために使用されるキーを表示す
               る

          _%GF_
               署名されたコミットに署名するために使用されるキーのフィン
               ガープリントを表示する

          _%GP_
               署名されたコミットに署名するためにサブキーが使用された 主
               キーのフィンガープリントを表示します

          _%GT_
               署名されたコミットに署名するために使用されるキーの信頼レ
               ベル(trust level)を表示します

          _%gD_
               reflogセレクター(例:‘refs/stash@{1}’ or ‘refs/stash@{2
               minutes ago}’) この形式は、 ‘-g’ オプションで説明されてい
               る規則に従います。 ‘@’ の前の部分は、コマンドラインで指定
               されたrefnameです(したがって、 ‘git log -g
               refs/heads/master’ は ‘refs/heads/master@{0}’ を生成しま
               す)。

          _%gd_
               短縮されたreflogセレクター。 ‘%gD’ と同じですが、 人間が
               読みやすいようにrefname部分が短縮されています(したがって
               、 ‘refs/heads/master’ は単に ‘master’ になります)。

          _%gn_
               reflog ID名

          _%gN_
               reflog ID名( .mailmap に関しては git-shortlog(1) または
               git-blame(1) 参照)

          _%ge_
               reflog ID 電子メールアドレス

          _%gE_
               reflog ID 電子メールアドレス( .mailmap に関しては
               git-shortlog(1) または git-blame(1) 参照)

          _%gs_
               reflog 件名

          _%(trailers[:options])_
               git-interpret-trailers(1) によって解釈されるようにボディ
               のトレーラーを表示します。 ‘trailers’ 文字列の後には、コ
               ロンと0個以上のカンマ区切りオプションを続けることができま
               す。いずれかのオプションが複数回提供された場合、それぞれ
               最後のものが優先されます。

               ブール値オプションは、オプションの値 ‘[=<BOOL>]’ を受け入
               れます。 値 ‘true’ 、‘false’ 、 ‘on’ 、‘off’ などはすべて
               受け入れられます。 git-config(1) の "EXAMPLES" の
               "boolean" サブセクションを参照してください。ブール値オプ
               ションが値なしで指定された場合、それは有効を指定した事に
               なります。

                  • _key=<K>_ は指定されたキーを持つトレーラーのみを表示
                    します。マッチングは大文字と小文字を区別せずに行われ
                    、末尾のコロンはオプションです。オプションが複数回指
                    定されている場合、いずれかのキーに一致するトレーラー
                    行が表示されます。このオプションは自動的に ‘only’ オ
                    プションを有効にして、トレーラーブロック内の非トレー
                    ラー行が非表示になるようにします。それが望ましくない
                    場合は、 ‘only=false’ で無効にすることができます。 た
                    とえば、 ‘%(trailers:key=Reviewed-by)’ は、キーが
                    ‘Reviewed-by‘のトレーラー行を表示します。

                  • _only[=<BOOL>]_ はトレーラーブロックに非トレーラー行
                    を含めるかどうかを選択します。

                  • _separator=<SEP>_ はトレーラー行の間に挿入される区切
                    り文字を指定します。このオプションが指定されていない
                    場合、各トレーラー行は改行文字で終了します。文字列
                    SEPには、上記のリテラルフォーマットコードが含まれる
                    場合があります。区切り文字としてコンマを使用するには
                    、次のオプションとして解析されないよう ‘%x2C’ を使用
                    する必要があります。 たとえば、
                    %(trailers:key=Ticket,separator=%x2C )‘ は、キーが
                    "Ticket" であるすべてのトレーラー行をカンマとスペー
                    スで区切って表示します。

                  • _unfold[=<BOOL>]_ は interpret-trailer の ‘--unfold’
                    オプションが指定されたかのように動作させます。たとえ
                    ば、 ‘%(trailers:only,unfold=true)’ が展開され、すべ
                    てのトレーラー行が表示されます。

                  • _keyonly[=<BOOL>]_ トレーラーのキー部分のみを表示。

                  • _valueonly[=<BOOL>]_ トレーラーの値部分のみ表示。

                  • _key_value_separator=<SEP>_ トレーラー行の間に挿入さ
                    れる区切り文字を指定します。このオプションが指定され
                    ていない場合、各トレーラーのキーと値のペアは ": " で
                    区切られます。 それ以外の場合は、上記の
                    _separator=<SEP>_ と同じセマンティクスを共有します。

     *Note*

     一部のプレースホルダーは、リビジョントラバーサルエンジンに指定され
     た他のオプションに依存する場合があります。 たとえば、 ‘%g*’ reflogオ
     プションは、reflogエントリをトラバースしない限り(たとえば、 ‘git
     log -g`によって)空の文字列を挿入します。コマンドラインで
     `--decorate’ がまだ指定されていない場合、 ‘%d’ と ‘%D’ プレースホル
     ダーは「短い」(short)装飾形式を使用します。

   プレースホルダーの _%_ の後に ‘+’ (プラス記号)を追加すると、プレース
ホルダーが空でない文字列に展開される場合に限り、展開の直前に改行が挿入さ
れます。

   プレースホルダーの _%_ の後に ‘-’ (マイナス記号)を追加すると、プレー
スホルダーが空の文字列に展開された場合にのみ、展開の直前の連続するすべて
の改行が削除されます。

   プレースホルダーの _%_ の後に ‘ ‘ (スペース)を追加すると、プレースホ
ルダーが空でない文字列に展開される場合に限り、展開の直前にスペースが挿入
されます。

   • _tformat:_

     _tformat:_ 形式は、 "separator" セマンティクスの代わりに
     "terminator" セマンティクスを提供することを除いて、 _format:_ とま
     ったく同じように機能します。 つまり、各コミットには、エントリ間に区
     切り文字を配置するのではなく、メッセージターミネータ文字(通常は改行
     )が追加されます。 これは、「1行」形式と同様に、1行形式の最終エント
     リが新しい行で適切に終了することを意味します。 例えば:

          $ git log -2 --pretty=format:%h 4da45bef \
            | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
          4da45be
          7134973 -- NO NEWLINE

          $ git log -2 --pretty=tformat:%h 4da45bef \
            | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
          4da45be
          7134973

     加えて、 ‘%’ が含まれている認識されない文字列は、その前に
     ‘tformat:’ があるかのように解釈(interpret)されます。 たとえば、以下
     の2つは同等です:

          $ git log -2 --pretty=tformat:%h 4da45bef
          $ git log -2 --pretty=%h 4da45bef


DIFF FORMATTING
***************

デフォルトでは、 ‘git log’ はdiff出力を生成しません。以下のオプションを
使用して、各コミットによって行われた変更を表示できます。

   注意: ‘--diff-merges’ のバリエーション(短い ‘-m’、 ‘-c’、 ‘--cc’ オプ
ションを含む)の1つが明示的に指定されていない限り、マージコミットはdiffを
表示しませんし、‘--patch`のようなdiff書式が選択されていても、’-S‘のよう
な検索オプションと一致しません。例外は、‘–first-parent‘が使用されている
場合です。この場合、‘first-parent‘がデフォルトの書式です。

‘-p’
‘-u’
‘--patch’
     パッチを生成します(generating patches に関するセクションを参照)。

‘-s’
‘--no-patch’
     diff出力を抑制します。デフォルトでパッチを表示する ‘git show’ のよ
     うなコマンド、または ‘--patch’ の効果をキャンセルする場合に便利です
     。

‘--diff-merges=(off|none|on|first-parent|1|separate|m|combined|c|dense-combined|cc)’
‘--no-diff-merges’
     マージコミットに使用するdiff形式を指定します。 ‘--first-parent’ が
     使用されている場合を除き、デフォルトは ‘off’ です。使用されている場
     合は、 ‘first-parent’ がデフォルトです。

     ‘--diff-merges=(off|none)’
     ‘--no-diff-merges’
          マージコミットのdiffの出力を無効にします。暗黙の値を上書きする
          のに便利です。

     ‘--diff-merges=on’
     ‘--diff-merges=m’
     ‘-m’
          このオプションにより、マージコミットのdiff出力がデフォルトの形
          式で表示されます。 ‘-m’ は、 ‘-p’ も指定されている場合にのみ出
          力を生成します。デフォルトの形式は、 ‘log.diffMerges’ 構成パラ
          メーター(configuration parameter)を使用して変更できます。デフ
          ォルト値は ‘separate’ です。

     ‘--diff-merges=first-parent’
     ‘--diff-merges=1’
          このオプションにより、マージコミットは最初の親に関してのみ完全
          なdiffを表示します。

     ‘--diff-merges=separate’
          これにより、マージコミットは各親に関して完全なdiffを表示します
          。親ごとに個別のログエントリとdiffが生成されます。

     ‘--diff-merges=combined’
     ‘--diff-merges=c’

‘-c:’
     このオプションを使用すると、マージコミットのdiff出力は、親と結果の
     ペアごとの差分を一度に1つずつ表示するのではなく、各親からの差分をマ
     ージ結果に同時に表示します。さらに、すべての親から変更されたファイ
     ルのみが一覧表示されます。 ‘-c’ は ‘-p’ の機能を含んでいます。

     ‘--diff-merges=dense-combined’
     ‘--diff-merges=cc’
     ‘--cc’
          このオプションを使用すると、 ‘--diff-merges=Combined’ によって
          生成される出力は、親のコンテンツに2つの派生(variants)しかない
          、興味のないハンクを省略してさらに圧縮され、マージ結果は変更な
          しでそのうちの1つを選択します。 ‘--cc’ は ‘-p’ の機能を含んで
          います。

‘--combined-all-paths’
     このフラグにより、結合された差分(マージコミットに使用)にすべての親
     からのファイルの名前が一覧表示されます。したがって、これは
     ‘--diff-merges=[dense-]combined’ が使用されている場合にのみ有効であ
     り、ファイル名の変更が検出された場合(つまり、名前の変更またはコピー
     の検出が要求された場合)にのみ役立つ可能性があります。

‘-U<n>’
‘--unified=<n>’
     通常の3行ではなく、<n> 行の内容でdiffを生成します。 ‘--patch’ の機
     能を含んでいます。

‘--output=<file>’
     stdout ではなく指定のファイルに出力します。

‘--output-indicator-new=<char>’
‘--output-indicator-old=<char>’
‘--output-indicator-context=<char>’
     生成されたパッチの新しい行、古い行、またはコンテキスト行を示すため
     に使用される文字を指定します。 通常、それらはそれぞれ _+_ 、 _-_ 、
     ’ ’ です。

‘--raw’
     コミットごとに、生の差分形式を使用して変更の概要を表示します。
     git-diff(1) の "RAW OUTPUT FORMAT" セクションを参照してください。 こ
     れは、ログ自体をraw形式で表示することとは異なります。 これは
     ‘--format=raw’ で 実現できます。

‘--patch-with-raw’
     ‘-p --raw’ の同義語。

‘-t’
     diff出力にツリーオブジェクトを表示します。

‘--indent-heuristic’
     diffハンクの境界をずらす(shift)ヒューリスティックを有効にして、パッ
     チを読みやすくします。 これがデフォルトです。

‘--no-indent-heuristic’
     インデントヒューリスティック(indent heuristic)を無効にします。

‘--minimal’
     より多くの時間を費やして、可能な限り最小のdiffが生成されるようにし
     ます。

‘--patience’
     "patience diff" アルゴリズムを使用してdiffを生成します。

‘--histogram’
     "histogram diff" アルゴリズムを使用してdiffを生成します。

‘--anchored=<text>’
     "anchored diff" アルゴリズムを使用してdiffを生成します。

     このオプションは複数回指定できます。

     行がソースと宛先の両方に存在し、1回だけ存在し、このテキストで始まる
     場合、このアルゴリズムは、その行が出力に削除または追加として表示さ
     れないようにします。内部で "patience diff" アルゴリズムを使用します
     。

‘--diff-algorithm={patience|minimal|histogram|myers}’
     diffアルゴリズムを選択します。その派生(variants)は以下のとおりです:

     ‘default’, ‘myers’
          基本的な貪欲な差分アルゴリズム(greedy diff algorithm)。現在、
          これがデフォルトです。

     ‘minimal’
          より多くの時間を費やして、可能な限り最小のdiffが生成されるよう
          にします。

     ‘patience’
          パッチを生成する時に "patience diff" アルゴリズムを使います。

     ‘histogram’
          このアルゴリズムは、忍耐アルゴリズム(patience algorithm)を拡張
          して、「発生率の低い共通要素をサポート」(support
          low-occurrence common elements)します。

     たとえば、 あなたが ‘diff.algorithm’ 変数をデフォルト以外の値に設定
     した上で、それでもデフォルト値を使用する場合は、
     ‘--diff-algorithm=default’ オプションを使用する必要があります。

‘--stat[=<width>[,<name-width>[,<count>]]]’
     diffstatを生成します。 デフォルトでは、必要なだけのスペースがファイ
     ル名部分に使用され、残りはグラフ部分に使用されます。最大幅はデフォ
     ルトで端末幅、または端末に接続されていない場合は80桁であり、
     ‘<width>’ で上書きできます。ファイル名部分の幅は、コンマの後に別の
     幅 ‘<name-width>’ を指定することで制限できます。グラフ部分の幅は、
     ‘--stat-graph-width=<width>’ (統計グラフを生成するすべてのコマンド
     に影響します)を使用するか、 ‘diff.statGraphWidth=<width>’ ( ‘git
     format-patch’ に影響しません)を設定することによって制限できます。
     3番目のパラメータ ‘<count>’ を指定することにより、出力を最初の
     ‘<count>’ 行に制限し、それに ‘...’ が続く形にできます。

     これらのパラメータは、 ‘--stat-width=<width>’ と
     ‘--stat-name-width=<name-width>’ と ‘--stat-count=<count>’ を使用し
     て個別に設定することもできます。

‘--compact-summary’
     ファイルの作成や削除( "new" または "gone" 。オプションでシンボリッ
     クリンクの場合は "+l" )、diffstatのモード変更(実行可能ビットを追加
     または削除する場合は、それぞれ "+x" または "-x" )など、拡張ヘッダー
     情報の要約を出力します。情報はファイル名部分とグラフ部分の間に置か
     れます。本機能は ‘--stat’ の機能を含んでいます。

‘--numstat’
     ‘--stat`に似ていますが、プログラムで処理しやすい(machine friendly)よ
     うに、追加および削除された行数を10進表記とパス名で省略形なしで表示
     します。バイナリファイルの場合、 `0 0’ の代わりに2つの ‘-’ を出力し
     ます。

‘--shortstat’
     変更されたファイルの総数と、追加および削除された行の数を含む
     ‘--stat’ 形式の最後の行のみを出力します。

‘-X[<param1,param2,...>]’
‘--dirstat[=<param1,param2,...>]’
     各サブディレクトリの相対的な変更量の分布を出力します。 ‘--dirstat’
     の動作は、パラメータのコンマ区切りリストを渡すことでカスタマイズで
     きます。デフォルトは、 ‘diff.dirstat’ 構成変数によって制御されます
     (git-config(1) 参照)。以下のパラメータを使用できます:

     ‘changes’
          ソースから削除された、または宛先に追加された行をカウントして、
          dirstat数を計算します。これは、ファイル内の純粋なコード移動の
          量を無視します。つまり、ファイル内の行の再配置は、他の変更ほど
          カウントされません。これは、パラメーターが指定されていない場合
          のデフォルトの動作です。

     ‘lines’
          通常の行ベースのdiff分析を実行し、削除/追加された行数を合計し
          て、dirstat数を計算します。 (バイナリファイルの場合、バイナリ
          ファイルには行の概念がないため、代わりに64バイトのチャンクをカ
          ウントします)。 これは ‘changes’ 動作よりも高価な ‘--dirstat’
          動作ですが、他の変更と同じようにファイル内の再配置された行をカ
          ウントします。結果の出力は、他の ‘--*stat’ オプションから得ら
          れるものと一致しています。

     ‘files’
          変更されたファイルの数を数えて、dirstat数を計算します。変更さ
          れた各ファイルは、dirstat分析で等しくカウントされます。これは
          、ファイルの内容をまったく調べる必要がないため、計算コストが最
          もかからない ‘--dirstat’ の動作です。

     ‘cumulative’
          親ディレクトリの子ディレクトリの変更も同様にカウントします。
          ‘cumulative’(累積的) を使用する場合、報告されるパーセンテージ
          の合計が100%を超える場合があることに注意してください。デフォル
          トの(非累積的な)動作は、‘noncumulative’ パラメーターで指定でき
          ます。

     <limit>
          整数パラメーターは、カットオフパーセント(デフォルトでは3%)を指
          定します。指定の割合より少ないディレクトリは、出力に表示されま
          せん。

     例: 変更されたファイルの総数の10%未満のディレクトリを無視し、親ディ
     レクトリに子ディレクトリの数を累積しながら、変更されたファイルをカ
     ウント: ‘--dirstat=files,10,cumulative’

‘--cumulative’
     ‘--dirstat=cumulative’ と同義語

‘--dirstat-by-file[=<param1,param2>...]’
     ‘--dirstat=files,param1,param2...’ と同義語

‘--summary’
     作成、名前変更、モード変更などの拡張ヘッダー情報の短い要約
     (condensed summary)を出力します。

‘--patch-with-stat’
     ‘-p --stat’ と同義語。

‘-z’
     改行(newline)ではなく、NULでコミットを区切ります。

     また、 ‘--raw’ または ‘--numstat’ を指定した場合は、パス名を難読化
     (munge)したり、出力フィールドターミネータとしてNULを使用したりしな
     いでください。

     このオプションがないと、構成変数 ‘core.quotePath’ で説明されている
     ように、 通常の文字以外(unusual characters)を含むパス名が引用符で囲
     まれます(git-config(1) 参照)。

‘--name-only’
     変更されたファイルの名前のみを表示します。 多くの場合、ファイル名は
     UTF-8でエンコードされます。 詳細については、 git-log(1) のマニュア
     ルページにあるエンコーディングに関する議論(the discussion about
     encoding)を参照してください。

‘--name-status’
     変更されたファイルの名前とステータスのみを表示します。ステータス文
     字の意味については、 ‘--diff-filter’ オプションの説明を参照してくだ
     さい。 ‘--name-only’ と同じように、ファイル名はしばしばUTF-8でエン
     コードされます。

‘--submodule[=<format>]’
     サブモジュールの違いをどのように表示するかを指定します。
     ‘--submodule=short’ を指定する場合、 _short_ 形式が使用されます。こ
     の形式は、範囲の最初と最後にコミットの名前を表示するだけです。
     ‘--submodule’ または ‘--submodule=log’ が指定されている場合、 _log_
     形式が使用されます。この形式では、 git-submodule(1) ‘summary’ のよ
     うに範囲内のコミットが一覧表示されます。 ‘--submodule=diff’ が指定
     されている場合、 _diff_ 形式が使用されます。この形式は、コミット範
     囲間のサブモジュールの内容の変更のインラインdiffを示します。
     configオプションが設定されていない場合、デフォルトは
     ‘diff.submodule’ または _short_ 形式です。

‘--color[=<when>]’
     色付きのdiffを表示します。 ‘--color’ (つまり、 _=<when>_ ) は
     ‘--color=always’ と同じです。 _<when>_ は、 ‘always’ または ‘never’
     または ‘auto’ のいずれかになります。

‘--no-color’
     カラーdiffをオフにします。 ‘--color=never’ と同じです。

‘--color-moved[=<mode>]’
     ソースコードの移動した行を別の色にします。 <mode>は、オプションが指
     定されていない場合はデフォルトで _no_ になり、 モードが指定されてい
     ないオプションが指定されている場合は _zebra_ になります。 モードは
     以下のいずれかでなければなりません:

     no
          移動行をハイライトしません。

     default
          ‘zebra’ の同義語です。これは、将来、より賢明なモードに変更され
          る可能性があります。

     plain
          ある場所で追加され、別の場所で削除された行は、
          _color.diff.newMoved_ で色付けされます。 同様に、
          _color.diff.oldMoved_ は、差分の別の場所に追加された削除された
          行に使用されます。このモードは移動された行をピックアップします
          が、コードのブロックが順列なしで移動されたかどうかを判断するこ
          とはレビューではあまり役に立ちません。

     blocks
          少なくとも20文字の英数字の移動テキストのブロックが貪欲に検出さ
          れます。検出されたブロックは、 _color.diff.{old,new}Moved_ 色
          のいずれかを使用して色付けされます。隣接するブロックを区別する
          ことはできません。

     zebra
          移動されたテキストのブロックは、 _blocks_ モードの場合と同様に
          検出されます。 ブロックは、 _color.diff.{old,new}Moved_ 色また
          は _color.diff.{old,new}MovedAlternative_ 色のいずれかを使用し
          て色付けされます。2つの色の間の変化は、新しいブロックが検出さ
          れたことを示します。

     dimmed-zebra
          _zebra_ に似ていますが、移動されたコードの重要でない部分の追加
          の調光(dimmed)が実行されます。隣接する2つのブロックの境界線は
          興味深いと見なされ、残りは興味深いものではありません。
          ‘dimmed_zebra’ は非推奨の同義語です。

‘--no-color-moved’
     移動検出をオフにします。 これは、構成設定を上書きするために使用でき
     ます。 ‘--color-moved=no’ と同じです。

‘--color-moved-ws=<modes>’
     これは、 ‘--color-moved’ の移動検出を実行するときに空白を無視する方
     法を設定します。 これらのモードは、コンマ区切りのリストとして指定で
     きます:

     no
          移動行検出を実行するときに、空白(whitespace)を無視しない。

     ignore-space-at-eol
          行末(EOL)での空白(whitespace)の変更を無視します。

     ignore-space-change
          空白(whitespace)の数の変更は無視してください。これは、行末の空
          白(whitespace)を無視し、1つ以上の空白文字(whitespace
          characters)の他のすべてのシーケンスを同等と見なします。

     ignore-all-space
          行を比較するときは空白(whitespace)を無視します。これにより、一
          方の行に空白があり、もう一方の行に空白がない場合でも、違いは無
          視されます。

     allow-indentation-change
          最初に移動検出で空白(whitespace)を無視し、空白(whitespace)の変
          更が行ごとに同じである場合にのみ、移動されたコードブロックをブ
          ロックにグループ化します。 これは他のモードと互換性がありませ
          ん。

‘--no-color-moved-ws’
     移動検出を実行するときは、空白(whitespace)を無視しないでください。
     これは、構成設定を上書きするために使用できます。
     ‘--color-moved-ws=no’ と同じです。

‘--word-diff[=<mode>]’
     <mode> を使用して変更された単語を区切ることにより、単語のdiffを表示
     します。デフォルトでは、単語は空白で区切られます。 以下の
     ‘--word-diff-regex’ を参照してください。 <mode> のデフォルトは
     ’plain’です。 <mode> は以下のいずれかである必要があります:

     color
          変更された単語(word)を色のみを使用して強調表示します。
          ‘--color’ を意味します。

     plain
          単語を ‘[-removed-]’ および ‘{+added+}’ として表示します。 区
          切り文字が入力に表示されている場合、区切り文字をエスケープしよ
          うとしないため、出力があいまいになる可能性があります。

     porcelain
          スクリプトの使用を目的とした特別な行ベースの形式を使用します。
          追加/削除/無変更については、通常の統一されたdiff形式で印刷され
          、行の先頭の ‘+’/‘-’/‘ ‘ 文字で始まり、行の終わりまで続きます
          。入力の改行は、それ自体の行のチルダ ‘~’ で表されます。

     none
          単語(word)のdiffを再度無効にします。

     注意: 最初のモードの名前にもかかわらず、有効になっている場合、すべ
     てのモードで変更された部分を強調するために色が使用されることに注意
     してください。

‘--word-diff-regex=<regex>’
     空白以外を単語と見なす代わりに、 <regex> を使用して単語が何であるか
     を決定します。また、すでに有効になっていない限り、この機能は
     ‘--word-diff’ の機能を含んでいます。

     <regex> の重複しないマッチはすべて、単語と見なされます。これらのマ
     ッチの間のすべては空白と見なされ、違いを見つけるためとしては無視さ
     れます！ 正規表現に ‘|[^[:space:]]’ を追加して、空白以外のすべての
     文字とマッチすることを確認することをお勧めします。改行を含むマッチ
     は、改行で黙って切り捨てられます！

     たとえば、 ‘--word-diff-regex=.’ は各文字を単語として扱い、それに応
     じて文字ごとの違いを表示します。

     正規表現は、diffドライバーまたは構成オプション(configuration
     option)を介して設定することもできます。 gitattributes(5) または
     git-config(1) を参照してください。これを指定すると、diffドライバー
     または構成設定(configuration settings)が明示的にオーバーライドされ
     ます。diffドライバーは構成設定を上書きします。

‘--color-words[=<regex>]’
     ‘--word-diff=color’ に ‘--word-diff-regex=<regex>’ を加えたものに相
     当します(正規表現が指定されている場合)。

‘--no-renames’
     構成ファイルにデフォルトで指定されている場合でも、名前変更の検出を
     オフにします。

‘--[no-]rename-empty’
     名前変更ソースとして空のブロブを使用するかどうか。

‘--check’
     変更によって競合マーカーまたは空白エラーが発生した場合に警告します
     。空白エラーと見なされるものは、 ‘core.whitespace’ 構成によって制御
     されます。 デフォルトでは、末尾の空白(空白のみで構成される行を含む
     )と、行の最初のインデント内で直後にタブ文字が続くスペース文字は、空
     白エラーと見なされます。問題が見つかった場合は、ゼロ以外のステータ
     スで終了します。なお、 –exit-code とは互換性がありません。

‘--ws-error-highlight=<kind>’
     diffの ‘context’ または ‘old’ または ‘new’ 行の空白エラーを強調表示
     します。複数の値はコンマで区切られ、 ‘none’ は前の値をリセットし、
     ‘default’ はリストを ‘new’ にリセットし、 ‘all’ は old、new、
     context の省略形です。このオプションが指定されておらず、構成変数
     ‘diff.wsErrorHighlight’ が設定されていない場合、 ‘new’ 行の空白エラ
     ーのみが強調表示されます。空白エラーは ‘color.diff.whitespace’ で色
     分けされています。

‘--full-index’
     パッチ形式の出力を生成するときは、最初の一握りの文字(first handful
     of characters)の代わりに、「インデックス」行にイメージ前およびイメ
     ージ後の完全ブロブオブジェクト名を表示します。

‘--binary’
     ‘--full-index’ に加えて、 ‘git-apply’ で適用できるバイナリ差分を出
     力します。 ‘--patch’ の機能を含んでいます。

‘--abbrev[=<n>]’
     完全な40バイトの16進オブジェクト名をdiff-raw形式の出力とdiff-treeヘ
     ッダー行に表示する代わりに、オブジェクトを一意に参照する、少なくと
     も _<n>_ 桁の16進数の長さの最短のプレフィックスを表示します。diffパ
     ッチ出力形式では、 ‘--full-index’ が優先されます。つまり、
     ‘--full-index’ が指定されている場合、 ‘--abbrev’ に関係なく、完全な
     ブロブ名が表示されます。デフォルト以外の桁数は、 ‘--abbrev=<n>’ で
     指定できます。

‘-B[<n>][/<m>]’
‘--break-rewrites[=[<n>][/<m>]]’
     完全な書き換えの変更を削除と作成のペアに分割します。これには以下の
     2つの目的があります:

     これは、ファイルの完全な書き換えに相当する変更が、コンテキストとし
     てテキストで一致する非常に少数の行と混合された一連の削除と挿入とし
     てではなく、古いものすべての単一の削除とそれに続く すべての新しいも
     のを1回挿入し、数値 ‘m’ が -B オプションのこの側面を制御します(デフ
     ォルトは60%)。 ‘-B/70%’ は、Gitがそれを完全な書き換えと見なすために
     、元の30%未満が結果に残る必要があることを指定します(つまり、結果の
     パッチは、コンテキスト行と混合された一連の削除と挿入になります)。

     -M と一緒に使用すると、完全に書き換えられたファイルも名前変更のソー
     スと見なされ(通常、 -M は、消えたファイルのみを名前変更のソースと見
     なします)、数 ‘n’ が -Bオプションのこの側面を制御します(デフォルト
     は50%)。 ‘-B20%’ は、ファイルのサイズの20%以上と比較して、追加およ
     び削除を伴う変更が、別のファイルへの名前変更の可能なソースとして取
     得される資格があることを指定します。

‘-M[<n>]’
‘--find-renames[=<n>]’
     diffを生成する場合は、コミットごとに名前の変更を検出して報告します
     。 履歴をトラバースしながら名前を変更してファイルをフォローする方法
     については、 ‘--follow’ を参照してください。 ‘n’ が指定されている場
     合、それは類似性インデックスのしきい値です (つまり、ファイルのサイ
     ズと比較した追加/削除の量)。 たとえば、 ‘-M90%’ は、ファイルの90%以
     上が変更されていない場合、 Gitが削除/追加のペアを名前変更と見なす必
     要があることを意味します。 ‘%’ 記号がない場合、数値は小数として読み
     取られ、その前に小数点が付きます。 つまり、 ‘-M5’ は0.5になるため、
     ‘-M50%’ と同じになります。 同様に、 ‘-M05’ は ‘-M5%’ と同じです。 検
     出を正確な名前変更に制限するには、 ‘-M100%’ を使用します。 デフォル
     トの類似性インデックスは50%です。

‘-C[<n>]’
‘--find-copies[=<n>]’
     名前と同様コピーを検出します。 ‘--find-copies-harder’ ‘も参照してく
     ださい。 `n’ を指定すると、 ‘-M<n>’ と同じ意味になります。

‘--find-copies-harder’
     パフォーマンス上の理由から、デフォルトでは、 ‘-C’ オプションは、コ
     ピーの元のファイルが同じ変更組(changeset)で変更された場合にのみコピ
     ーを検索します。このフラグにより、コマンドは変更されていないファイ
     ルをコピー元の候補として検査します。これは大規模なプロジェクトでは
     非常にコストのかかる操作であるため、注意して使用してください。 複数
     の ‘-C’ オプションを指定しても同じ効果があります。

‘-D’
‘--irreversible-delete’
     削除するプレイメージ(preimage)を省略します。つまり、ヘッダーのみを
     出力し、プレイメージと ‘/dev/null’ の差分は出力しません。結果のパッ
     チは、 ‘patch’ または ‘git apply’ で適用されることを意図していませ
     ん。これは、変更後にテキストを確認することに集中したい人のためだけ
     のものです。さらに、出力には明らかに、そのようなパッチを手動でも逆
     に適用するのに十分な情報が不足しているため、オプションの名前が付け
     られています。

     ‘-B’ と併用する場合は、削除/作成ペアの削除部分のプリイメージ
     (preimage)も省略してください。

‘-l<num>’
     ‘-M’ および ‘-C’ オプションには、名前変更/コピーのサブセットを安価
     に検出できるいくつかの準備手順が含まれ、その後に、残りのすべてのペ
     アになっていない宛先をすべての関連ソースと比較する徹底的なフォール
     バック部分が続きます。(名前の変更の場合、残りのペアになっていないソ
     ースのみが関係します。コピーの場合、すべての元のソースが関係します
     )。Nのソースと宛先の場合、この徹底的なチェックのコストは O(N^2) で
     す。このオプションは、関係するソース/宛先ファイルの数が指定された数
     を超えた場合に、名前変更/コピー検出の完全な部分が実行されないように
     します。デフォルトは diff.renameLimit です。 値0は無制限として扱わ
     れることに注意してください。

‘--diff-filter=[(A|C|D|M|R|T|U|X|B)...[*]]’
     追加(Add)・コピー(Copy)・削除(Delete)・変更(Modify)・名前変更
     (Rename)されたファイル、タイプが変更されたファイル(T)、マージされて
     いないファイル(U)、不明なファイル(X)、またはペアリングが壊れている
     ファイル(B)のみを選択します。フィルタ文字(無しも含む)の任意の組み合
     わせを使用できます。 組み合わせに ‘*’ (全てまたは無し)が追加される
     と、比較で他の基準に一致するファイルがある場合、すべてのパスが選択
     されます。 他の基準に一致するファイルがない場合、何も選択されません
     。

     また、逆に、除外したい時はこれらの各大文字指定を小文字にして指定し
     ます。例えば ‘--diff-filter=ad’ は、追加および削除されたパスを除外
     します。

     注意:すべてのdiffがすべてのタイプを特徴とするわけではないことに注意
     してください。 たとえば、インデックスから作業ツリーへのdiffにエント
     リを追加することはできません(diffに含まれるパスのセットは、インデッ
     クスの内容によって制限されるため)。 同様に、これらのタイプの検出が
     無効になっている場合、コピーおよび名前変更されたエントリは表示され
     ません。

‘-S<string>’
     ファイル内の指定の文字列(つまり、 addition 、deletion)の出現回数の
     差分を調べます。スクリプターが使用することを目的としています。

     (構造体など)コードの正確なブロックを探していて、そのブロックが最初
     に作成されてからの履歴を知りたい場合に便利です。この機能を繰り返し
     使用して、プリイメージ(preimage)内の興味深いブロックを ‘-S’ にフィ
     ードバックし、そしてあなたはそれをブロックの最初のバージョンを取得
     するまで続けます。

     バイナリファイルも検索されます。

‘-G<regex>’
     パッチテキストに <regex> にマッチする 追加/削除 された行が含まれて
     いる差分を探します。

     ‘-S<regex> --pickaxe-regex’ と ‘-G<regex>’ の違いを説明するために、
     同じファイル内で以下のdiffを使用してコミットすることを検討してくだ
     さい:

          +    return frotz(nitfol, two->ptr, 1, 0);
          ...
          -    hit = frotz(nitfol, mf2.ptr, 1, 0);

     ‘git log -G"frotz\(nitfol"’ はこのコミットを表示しますが、 ‘git log
     -S"frotz\(nitfol" --pickaxe-regex’ は表示しません(その文字列の出現
     回数が変更されなかったため)。

     ‘--text’ が提供されていない限り、 textconv フィルターのないバイナリ
     ファイルのパッチは無視されます。

     詳細については gitdiffcore(7) の _pickaxe_ エントリを参照してくださ
     い。

‘--find-object=<object-id>’
     指定されたオブジェクトの出現回数を変更する違いを探します。 ‘-S’ と
     同様に、引数だけが異なり、特定の文字列ではなく特定のオブジェクト
     IDを検索します。

     オブジェクトは、ブロブまたはサブモジュールのコミットにすることがで
     きます。 これは、 ‘git-log’ の ‘-t’ オプションがツリーも探すことを
     意味します。

‘--pickaxe-all’
     ‘-S’ または ‘-G’ が変更を見つけたら、 <string> の変更を含むファイル
     だけでなく、その変更セット(changeset)のすべての変更を表示します。

‘--pickaxe-regex’
     ‘-S’ に指定した <string> を拡張POSIX正規表現として扱います。

‘-O<orderfile>’
     ファイルが出力に表示される順序を制御します。これは ‘diff.orderFile’
     構成変数をオーバーライドします(git-config(1) 参照)。
     ‘diff.orderFile’ をキャンセルするには、 ‘-O/dev/null’ を使用します
     。

     出力順序は、 <orderfile> 内のglobパターンの順序によって決定されます
     。最初のパターンに一致するパス名を持つすべてのファイルが最初に出力
     され、2番目のパターンに一致する(ただし最初のパターンには一致しない
     )パス名を持つすべてのファイルが次に出力されます。パス名がどのパター
     ンとも一致しないすべてのファイルは、ファイルの最後に暗黙のすべて一
     致パターンがあるかのように、最後に出力されます。複数のパス名のラン
     クが同じである場合(同じパターンに一致するが、以前のパターンには一致
     しない)、相互の出力順序は通常の順序です。

     <orderfile> は以下のとおりパースされます:

        • 空白行は無視されるため、読みやすくするための区切りとして使用で
          きます。

        • ハッシュ ("‘#’") で始まる行は無視されるため、コメントに使用で
          きます。 パターンがハッシュで始まる場合は、パターンの先頭にバ
          ックスラッシュ(訳注:日本では環境により円記号)("‘\’") を追加し
          ます。

        • 他の各行には、単一のパターンが含まれています。

     パターンは、 FNM_PATHNAME フラグなしで fnmatch(3) に使用されるパタ
     ーンと同じ構文とセマンティクスを持ちますが、最終的なパス名コンポー
     ネントをいくつも削除するとパターンと一致する場合、パス名もパターン
     と一致する点が異なります。 たとえば、パターン "‘foo*bar’" は、
     "‘fooasdfbar’" および "‘foo/bar/baz/asdf’" と一致しますが、
     "‘foobarx’" とは一致しません。

‘--skip-to=<file>’
‘--rotate-to=<file>’
     名前付き <file> の前のファイルを出力から破棄するか(スキップして)、
     出力の最後に移動させます(ローテーションさせます)。 これらは主に
     ‘git difftool’ コマンドを使用するために考案されたものであり、それ以
     外の場合はあまり役に立たない可能性があります。

‘-R’
     2つの入力を交換します。 つまり、インデックスまたはディスク上のファ
     イルとツリーの内容の違いを表示します。

‘--relative[=<path>]’
‘--no-relative’
     プロジェクトのサブディレクトリから実行する場合、このオプションを使
     用して、ディレクトリ外の変更を除外し、それに関連するパス名を表示す
     るように指示できます。サブディレクトリ(ベアリポジトリなど)にいない
     場合は、引数として <path> を指定することで、出力を作成するサブディ
     レクトリに名前を付けることができます。 ‘--no-relative`は、
     `diff.relative’ 設定オプションと以前の ‘--relative’ の両方を打ち消
     すために使用できます。

‘-a’
‘--text’
     すべてのファイルをテキストとして扱います。

‘--ignore-cr-at-eol’
     比較を行うときは、行末のキャリッジリターン(carriage-return)を無視し
     ます。

‘--ignore-space-at-eol’
     行末(EOL)での空白(whitespace)の変更を無視します。

‘-b’
‘--ignore-space-change’
     空白(whitespace)の数の変更は無視してください。これは、行末の空白
     (whitespace)を無視し、1つ以上の空白文字(whitespace characters)の他
     のすべてのシーケンスを同等と見なします。

‘-w’
‘--ignore-all-space’
     行を比較するときは空白を無視します。 これにより、一方の行に空白があ
     り、もう一方の行に空白がない場合でも、違いは無視されます。

‘--ignore-blank-lines’
     全て空白の行の変更は無視します。

‘-I<regex>’
‘--ignore-matching-lines=<regex>’
     すべての行が <regex> にマッチする変更を無視します。このオプションは
     複数回指定できます。

‘--inter-hunk-context=<lines>’
     指定された行数までの差分ハンク間のコンテキストを表示し、それによっ
     て互いに近いハンクを融合します。デフォルトは
     ‘diff.interHunkContext’ で、設定オプションが設定されていない場合は
     0です。

‘-W’
‘--function-context’
     関数全体を各変更のコンテキスト行として表示します。関数名は、 ‘git
     diff’ がパッチハンクヘッダーを処理するのと同じ方法で決定されます
     (gitattributes(5) の _Defining a custom hunk-header_ を参照)。

‘--ext-diff’
     外部diffヘルパーの実行を許可します。 gitattributes(5) を使用して外
     部diffドライバーを設定する場合は、 git-log(1) およびその仲間と一緒
     にこのオプションを使用する必要があります。

‘--no-ext-diff’
     外部diffドライバーを禁止します。

‘--textconv’
‘--no-textconv’
     バイナリファイルを比較するときに、外部テキスト変換フィルターの実行
     を許可(または禁止)します。 詳細については、 gitattributes(5) を参照
     してください。textconvフィルターは通常、一方向の変換であるため、結
     果のdiffは人間の消費に適していますが、適用(apply)することはできませ
     ん。このため、textconvフィルターは、 git-diff(1) および git-log(1)
     に対してのみデフォルトで有効になりますが、 git-format-patch(1) また
     はdiff配管コマンドに対しては有効になりません。

‘--ignore-submodules[=<when>]’
     diff生成のサブモジュールへの変更を無視します。 <when> は、 none・
     untracked・dirty・allのいずれかになります。これがデフォルトです。
     noneを使用すると、追跡されていないファイルまたは変更されたファイル
     が含まれている場合、またはそのHEADがスーパープロジェクトに記録され
     ているコミットと異なる場合にサブモジュールが変更されたと見なされ、
     git-config(1) または gitmodules(5) の ignoreオプションの設定をオー
     バーライドするために使用できます。untrackedが使用されている場合、サ
     ブモジュールには追跡されていないコンテンツのみが含まれている場合、
     サブモジュールはダーティとは見なされません(ただし、変更されたコンテ
     ンツはスキャンされます)。「dirty」を使用すると、サブモジュールの作
     業ツリーへのすべての変更が無視され、スーパープロジェクトに格納され
     ているコミットへの変更のみが表示されます(これは1.7.0までの動作でし
     た)。「all」を使用すると、サブモジュールへのすべての変更が非表示に
     なります。

‘--src-prefix=<prefix>’
     "a/" の代わりに、与えられたソースプレフィックス(source prefix)を表
     示します。

‘--dst-prefix=<prefix>’
     "b/" の代わりに、指定された宛先プレフィックス(destination prefix)を
     表示します。

‘--no-prefix’
     送信元(source)または宛先(destination)のプレフィックスを表示しません
     。

‘--line-prefix=<prefix>’
     出力のすべての行に追加のプレフィックスを付加します。

‘--ita-invisible-in-index’
     デフォルトでは、 "git add -N" によって追加されたエントリは、 "git
     diff" に既存の空のファイルとして表示され、 "git diff –cached" に新
     しいファイルとして表示されます。このオプションを使用すると、エント
     リは "git diff" では新しいファイルとして表示され、 "git diff
     –cached" では存在しません。このオプションは、
     ‘--ita-visible-in-index’ で元に戻すことができます。どちらのオプショ
     ンも実験的なものであり、将来削除される可能性があります。

   これらの一般的なオプションの詳細については、 gitdiffcore(7) も参照し
てください。


Generating patch text with -p
*****************************

git-diff(1) 、 git-log(1) 、 git-show(1) 、 git-diff-index(1) 、
git-diff-tree(1) 、 git-diff-files(1) に ‘-p’ オプションを付けて実行する
とパッチテキストを生成します。パッチテキストの作成は、
‘GIT_EXTERNAL_DIFF’ と ‘GIT_DIFF_OPTS’ 環境変数( git(1) 参照)、および
‘diff’ 属性( gitattributes(5) 参照)を介してカスタマイズできます。

   -pオプションが生成するものは、従来のdiff形式とは少々異なります:

  1. 先行して、以下のような "git diff" ヘッダーがあります:

          diff --git a/file1 b/file2

     名前の変更/コピーが含まれない限り、 ‘a/’ と ‘b/’ のファイル名は同じ
     です。 特に、作成または削除の場合でも、 ‘a/’ または ‘b/’ ファイル名
     の代わりに ‘/dev/ null’ が使用されることはありません。

     名前変更/コピーが含まれる場合、 ‘file1’ と‘file2‘ は、それぞれ名前
     変更/コピーのソースファイルの名前と、名前変更/コピーが生成するファ
     イルの名前を示します。

  2. その後に、1つ以上の拡張ヘッダー行達が続きます:

          old mode <mode>
          new mode <mode>
          deleted file mode <mode>
          new file mode <mode>
          copy from <path>
          copy to <path>
          rename from <path>
          rename to <path>
          similarity index <number>
          dissimilarity index <number>
          index <hash>..<hash> <mode>

     ファイルモードは、ファイルタイプとファイル許可ビットを含む6桁の8進
     数として出力されます。

     拡張ヘッダーのパス名には、 ‘a/’ および ‘b/’ プレフィックスは含まれ
     ません。

     類似インデックス(similarity index)は変更されていない行のパーセンテ
     ージであり、非類似インデックス(dissimilarity index)は変更された行の
     パーセンテージです。これは切り捨てられた整数であり、その後にパーセ
     ント記号が続きます。したがって、100％の類似インデックス値は2つの等
     しいファイルを表し、100％の非類似性は古いファイルから新しいファイル
     に移行された行がないことを意味します。

     インデックス行には、変更前後のブロブオブジェクト名が含まれます。
     <mode> は、ファイルモードが変更されない場合に含まれます。それ以外の
     場合、別々の行は古いモードと新しいモードを示します。

  3. 通常の文字でないキャラクタ(\"unusual\" characters)を含むパス名は、
     構成変数 ‘core.quotePath’ で説明されているように引用符で囲まれてい
     ます( git-config(1)参照)。

  4. 出力内のすべての ‘file1’ ファイルはコミット前のファイルを参照し、す
     べての ‘file2’ ファイルはコミット後のファイルを参照します。各変更を
     各ファイルに順番に適用するのは誤りです。たとえば、以下のパッチはaと
     bを交換します:

          diff --git a/a b/b
          rename from a
          rename to b
          diff --git a/b b/a
          rename from b
          rename to a

  5. ハンクのヘッダーには、ハンクが適用される関数の名前が記載されていま
     す。特定の言語に合わせてこれを調整する方法の詳細については、
     gitattributes(5) の "Defining a custom hunk-header" を参照してくだ
     さい。


Combined diff format
********************

diffを生成するコマンドは、マージを表示するときに ‘-c’ または ‘--cc’ オプ
ションを使用して「合成diff」(combined diff)を生成できます。これは
git-diff(1) または git-show(1) でのマージを表示するときのデフォルトの形
式です。 注意: これらのコマンドのいずれかに適切な ‘--diff-merges’ オプシ
ョンを指定して、特定の形式で差分を強制的に生成できることにも注意してくだ
さい。

   合成diff形式は以下のようになります:

     diff --combined describe.c
     index fabadb8,cc95eb0..4866510
     --- a/describe.c
     +++ b/describe.c
     @@@ -98,20 -98,12 +98,20 @@@
             return (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;
       }

     - static void describe(char *arg)
      -static void describe(struct commit *cmit, int last_one)
     ++static void describe(char *arg, int last_one)
       {
      +      unsigned char sha1[20];
      +      struct commit *cmit;
             struct commit_list *list;
             static int initialized = 0;
             struct commit_name *n;

      +      if (get_sha1(arg, sha1) < 0)
      +              usage(describe_usage);
      +      cmit = lookup_commit_reference(sha1);
      +      if (!cmit)
      +              usage(describe_usage);
      +
             if (!initialized) {
                     initialized = 1;
                     for_each_ref(get_name);

  1. まず "git diff" ヘッダーがあり、以下のようになります( ‘-c’ オプショ
     ンが使用されている場合):

          diff --combined file

     または、以下のようになります( ‘--cc’ オプションが使用されている場合
     ):

          diff --cc file

  2. その後に1つ以上の拡張ヘッダー行が続きます(以下の例は、2つの親とのマ
     ージを示しています):

          index <hash>,<hash>..<hash>
          mode <mode>,<mode>..<mode>
          new file mode <mode>
          deleted file mode <mode>,<mode>

     ‘mode <mode>,<mode>..<mode>’ 行は、<mode> の少なくとも1つが他の
     <mode> と異なる場合にのみ表示されます。検出されたコンテンツの移動
     (名前の変更とコピーの検出)に関する情報を含む拡張ヘッダーは、2つの
     <tree-ish> のdiffで機能するように設計されており、合成diff形式では使
     用されません。

  3. その後に2行の from-file/to-file ヘッダーが続きます

          --- a/file
          +++ b/file

     従来の統一diff形式の2行ヘッダーと同様に、 ‘/dev/null’ は、作成また
     は削除されたファイルを通知するために使用されます。

     ただし、 –combined-all-paths オプションが指定されている場合、2行の
     from-file/to-file の代わりに、 N+1 行の from-file/to-file ヘッダー
     が取得されます。ここで、 N はマージコミットの親の数です。

          --- a/file
          --- a/file
          --- a/file
          +++ b/file

     この拡張形式は、名前変更またはコピー検出がアクティブな場合に役立ち
     、別の親のファイルの元の名前を確認できます。

  4. チャンクヘッダーの形式が変更され、誤って ‘patch-p1’ にフィードされ
     るのを防ぎます。合成差分形式は、マージコミットの変更を確認するため
     に作成されたものであり、適用されることを意図したものではありません
     。この変更は、拡張された「インデックス」ヘッダーの変更に似ています:

          @@@ <from-file-range> <from-file-range> <to-file-range> @@@

     合成diff形式のチャンクヘッダーには親の数+1の ‘@’ 文字があります。

   従来の統一diff形式とは異なり、2つのファイルAとBが、 ‘-’ (マイナスは
Aに表示されますが、Bでは削除されます) または ‘+’ (プラスはAにはありませ
んが、Bには追加されます)、または ‘" "’（スペースは変更なし) プレフィック
スを持つ単一の列で表示される場合、この形式は2つ以上のファイル file1,
file2,… を1つのファイルXと比較し、Xが各 fileN とどのように異なるかを示し
ます。ファイルNごとに1つの列が出力行の前に追加され、Xの行が出力行とどの
ように異なるかを示します。

   列Nの ‘-’ 文字は、その行が fileN に表示されているが、結果には表示され
ていないことを意味します。 列Nの ‘+’ 文字は、結果に行が表示され、 fileN
にその行がないことを意味します(つまり、その親の観点から見て行が追加され
たことを示す)。

   上記の出力例では、関数のシグネチャが両方のファイルから見て変更されて
います(したがって、 file1 と file2 の両方から2つの ‘-’ が削除され、さら
に ‘++’ が追加されたため、 file1 と file2 のどちらにも表示されません)。
また、他の8行は file1 と同じですが、 file2 には表示されません(したがって
、接頭辞として ‘+’ が付けられます)。

   ‘git diff-tree -c’ で表示される場合、マージコミットの親をマージ結果と
比較します(つまり、 file1..fileN が親です)。 ‘git diff-files -c’ で表示
される場合、2つの未解決のマージ親を作業ツリーファイルと比較します(つまり
、 file1 はステージ2、別名「私たちのバージョン」、 file2 はステージ3、別
名「彼らのバージョン」です)。


EXAMPLES
********

‘git log --no-merges’
     コミット履歴全体を表示しますが、マージはスキップします

‘git log v2.6.12.. include/scsi drivers/scsi’
     バージョン _v2.6.12_ 以降で ‘include/scsi’ または ‘drivers/scsi’ サ
     ブディレクトリ内のファイルの変更がある、すべてのコミットを表示しま
     す

‘git log --since="2 weeks ago" -- gitk’
     _gitk_ ファイルの変更について過去2週間の範囲で表示します。‘–‘は*ブ
     ランチ*名 _gitk_ と混同しないようにするために必要です。

‘git log --name-status release..test’
     「test」ブランチにはあるがまだ「release」ブランチにはないコミットを
     、各コミットが変更するパスのリストとともに表示します。

‘git log --follow builtin/rev-list.c’
     ファイルに現在の名前が付けられる前に発生したコミット(訳注:つまりフ
     ァイル名が変更される前の当該ファイル)を含め、‘builtin/rev-list.c‘を
     変更したコミットを表示します。

‘git log --branches --not --remotes=origin’
     ローカルブランチ’origin’にあり、’origin’のリモートトラッキングブラ
     ンチのいずれにも存在していないコミットを表示します。

‘git log master --not --remotes=*/master’
     ローカルmasterにはあるが、リモートリポジトリmasterブランチにはない
     すべてのコミットを表示します。

‘git log -p -m --first-parent’
     変更の差分を含む履歴を表示しますが、‘‘main branch’’の観点からのみ、
     マージされたブランチからのコミットをスキップし、マージによって導入
     された変更の完全な差分を表示します。これは、単一の統合ブランチにと
     どまり、そのブランチにすべてのトピックブランチをマージするという厳
     格なポリシーに従う場合にのみ意味があります。

‘git log -L '/int main/',/^}/:main.c’
     ファイル‘main.c‘の関数‘main()‘が時間の経過とともにどのように進化し
     たかを示します。

‘git log -3’
     表示するコミットの数を3個に制限します。


DISCUSSION
**********

Gitは、ある程度までは文字エンコードに依存しません。

   • ブロブオブジェクトの内容は、解釈されていないバイトのシーケンスです
     。コアレベルでのエンコーディング変換はありません。

   • パス名はUTF-8正規化形式C(UTF-8 normalization form C)でエンコードさ
     れます。これは、ツリーオブジェクト、インデックスファイル、ref名、お
     よびコマンドライン引数、環境変数、構成ファイル( ‘.git/config’
     (git-config(1) 参照) と gitignore(5) と gitattributes(5) と
     gitmodules(5)) のパス名に適用されます。

     コアレベルのGitは、パス名を単に非NULバイトのシーケンスとして扱い、
     パス名をエンコードする変換はありません(MacとWindowsを除く)。したが
     って、非ASCIIパス名の使用は、レガシー拡張ASCIIエンコーディングを使
     用するプラットフォームやファイルシステムでもほとんど機能します。た
     だし、そのようなシステムで作成されたリポジトリは、UTF-8ベースのシス
     テム(Linux、Mac、Windowsなど)では正しく機能しません。その逆も同様で
     す。さらに、多くのGitベースのツールは、パス名がUTF-8であると単純に
     想定しており、他のエンコーディングを正しく表示できません。

   • コミットログメッセージは通常UTF-8でエンコードされますが、他の拡張
     ASCIIエンコードもサポートされています。これには、ISO-8859-x、
     CP125xなどが含まれますが、UTF-16/32、EBCDIC、およびCJKマルチバイト
     エンコーディング(GBK、Shift-JIS、Big5、EUC-x、CP9xxなど)は含まれま
     せん。

   我々はコミットログメッセージをUTF-8でエンコードすることをお勧めします
が、コアとGit Porcelainはどちらも、プロジェクトでUTF-8を強制しないように
設計されています。特定のプロジェクトのすべての参加者がレガシーエンコーデ
ィングを使用する方が便利だと感じた場合、Gitはそれを禁止しません。 ただし
、覚えておくべきことがいくつかあります。

  1. _git commit_ と _git commit-tree_ は、プロジェクトがレガシーエンコ
     ーディングを使用していることを明示的に指定しない限り、与えられたコ
     ミットログメッセージが有効なUTF-8文字列のように見えない場合に警告を
     発します。明示的に指定する方法は、以下のように、 ‘.git/config’ ファ
     イルに ‘i18n.commitEncoding’ を含めることです。

          [i18n]
                  commitEncoding = ISO-8859-1

     上記の設定で作成されたコミットオブジェクトは、 ‘encoding’ ヘッダー
     に ‘i18n.commitEncoding’ の値を記録します。 これは、後でそれらを見
     る他の人々を助けるためです。このヘッダーがないということは、コミッ
     トログメッセージがUTF-8でエンコードされていることを意味します。

  2. _git log_ と _git show_ と _git blame_ とその仲間たちは、コミットオ
     ブジェクトの ‘encoding’ ヘッダーを見て、特に指定がない限り、ログメ
     ッセージをUTF-8に再コーディングしようとします。あなたは以下のように
     、 ‘.git/config’ ファイルの ‘i18n.logOutputEncoding’ を使用して目的
     の出力エンコーディングを指定できます。

          [i18n]
                  logOutputEncoding = ISO-8859-1

     この構成変数がない場合は、代わりに ‘i18n.commitEncoding’ の値が使用
     されます。

   UTF-8への再コーディングは必ずしも可逆的な操作ではないため、我々はコミ
ットが行われたときにコミットログメッセージを再コーディングしないことを意
図的に選択したことに注意してください。


CONFIGURATION
*************

コア変数については git-config(1) を、diff生成に関連する設定については
git-diff(1) を参照してください。

format.pretty
     ‘–format‘オプションのデフォルト。(上記’Pretty Formats’を参照してく
     ださい。)デフォルトは‘medium‘です。

i18n.logOutputEncoding
     ログを表示するときに使用するエンコーディング。(上記’Discussion’を参
     照してください。)デフォルトでは、設定されている場合は
     ‘i18n.commitEncoding’ の値になり、そうでない場合は UTF-8 になります
     。

log.date
     人間が読める形式の日付のデフォルト形式。(‘--date`オプションと比べて
     みてください。)デフォルトは "default" です。これは、`Sat May 8
     19:35:34 2010 -0500’ のような日付を書き込むことを意味します。

     フォーマットが"auto:foo"に設定されていて、かつ、ページャーが使用さ
     れている場合、フォーマット "foo" が日付フォーマットに使用されます。
     それ以外の場合は"default"が使用されます。

log.follow
     ‘true`の場合、`git log`は、単一の<path>が指定されたときに
     ’–follow‘オプションが使用されたかのように機能します。これには
     ‘–follow‘と同じ制限があります。つまり、複数のファイルを追跡するため
     に使用することはできず、非線形履歴(non-linear history)ではうまく機
     能しません。

log.showRoot
     ‘false‘の場合、‘git log‘および関連するコマンドは最初のコミットを大
     きな作成イベント(big creation event)として扱いません。‘git log -p‘出
     力のルートコミットは、差分を添付せずに表示されます。デフォルトは
     ‘true‘です。

log.showSignature
     ‘true`の場合、`git log`および関連するコマンドは’–show-signature‘オ
     プションが渡されたかのように動作します。

mailmap.*
     git-shortlog(1) 参照。

notes.displayRef
     ‘core.notesRef‘または‘GIT_NOTES_REF‘によって設定されたデフォルトに
     加えて、コマンドの‘log‘ファミリーでコミットメッセージを表示するとき
     にメモを読み取るためのrefs。git-notes(1)を参照してください。

     省略されていないref名またはグロブ(glob)である可能性があり、複数回指
     定される可能性があります。存在しないrefsに対しては警告が発行されま
     すが、どのrefsとも一致しないグロブ(glob)は黙って無視されます。

     この設定は、‘--no-notes`オプションで無効にしたり、
     `GIT_NOTES_DISPLAY_REF`環境変数で上書きしたり、’–notes=<ref>‘オプシ
     ョンで上書きしたりできます。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-ls-files,  Up: Top

Name
****

git-ls-files — インデックスと作業ツリーのファイルに関する情報を表示する


Synopsis
********

     git ls-files [-z] [-t] [-v] [-f]
                     (–[cached|deleted|others|ignored|stage|unmerged|killed|modified])*
                     (-[c|d|o|i|s|u|k|m])*
                     [–eol]
                     [–deduplicate]
                     [-x <pattern>|–exclude=<pattern>]
                     [-X <file>|–exclude-from=<file>]
                     [–exclude-per-directory=<file>]
                     [–exclude-standard]
                     [–error-unmatch] [–with-tree=<tree-ish>]
                     [–full-name] [–recurse-submodules]
                     [–abbrev[=<n>]] [–] [<file>…]


DESCRIPTION
***********

これにより、インデックス内のファイルリストが実際の作業ディレクトリリスト
とマージされ、2つのさまざまな組み合わせが表示されます。

   以下の1つ以上のオプションを使用して、表示されるファイルを判別できます
:


OPTIONS
*******

‘-c’
‘--cached’
     キャッシュされたファイルを出力に表示します(デフォルト)

‘-d’
‘--deleted’
     削除されたファイルを出力に表示します

‘-m’
‘--modified’
     変更されたファイルを出力に表示

‘-o’
‘--others’
     その他(たとえば 追跡されていない)ファイルを出力に表示します

‘-i’
‘--ignored’
     無視されたファイル(ignored files)のみを出力に表示します。インデック
     のファイルを表示する場合は、除外パターンに一致するファイルのみを印
     刷してください。 「その他」のファイルを表示する場合は、除外パターン
     に一致するファイルのみを表示してください。標準の無視ルールは自動的
     にアクティブ化されないため、少なくとも1つの ‘--exclude*’ オプション
     が必要です。

‘-s’
‘--stage’
     ステージングされたコンテンツのモードビット、オブジェクト名、ステー
     ジ番号を出力に表示します。

‘--directory’
     ディレクトリ全体が「その他」に分類される場合は、(末尾にスラッシュを
     付けて)そのディレクトリ名だけを表示し、ディレクトリの内容を表示しな
     いでください。

‘--no-empty-directory’
     空のディレクトリをリストしないでください。 ‘--directory’ を指定して
     いないと効果がありません。

‘-u’
‘--unmerged’
     マージされていないファイルを出力に表示します(‘--stage’ の機能を含む
     )

‘-k’
‘--killed’
     checkout-indexを成功させるために、ファイル/ディレクトリの競合のため
     に削除する必要があるファイルシステム上のファイルを表示します。

‘-z’
     \ 0出力での行の終了であり、ファイルをクォートしません。 詳細につい
     ては、以下の「OUTPUT」を参照してください。

‘--deduplicate’
     ファイル名のみが表示されている場合は、マージ中に複数のステージがあ
     ること、または ‘--deleted’ と ‘--modified’ オプションを同時に指定す
     ることで発生する可能性のある重複を抑制します。 ‘-t’ または
     ‘--unmerged’ または ‘--stage’ オプションのいずれかが使用されている
     場合、このオプションは効果がありません。

‘-x <pattern>’
‘--exclude=<pattern>’
     パターンに一致する追跡されていないファイルをスキップします。パター
     ンはシェルワイルドカードパターンであることに注意してください。 詳細
     については、以下の「EXCLUDE PATTERNS」を参照してください。

‘-X <file>’
‘--exclude-from=<file>’
     <file> から除外パターンを読み取ります。1行に1つづつです。

‘--exclude-per-directory=<file>’
     各ディレクトリとサブディレクトリにのみ適用される、追加の除外パター
     ンを、そのディレクトリの <file> から読み取ります。(通常は
     ‘.gitignore’ )

‘--exclude-standard’
     標準のGit除外を追加します: .git/info/exclude と 各ディレクトリの
     .gitignore と ユーザーのグローバル除外ファイル。

‘--error-unmatch’
     <file> がインデックスに現れない場合は、これをエラーとして扱います
     (1を返します)。

‘--with-tree=<tree-ish>’
     ‘--error-unmatch’ を使用して、ユーザーが指定した <file>（つまり、パ
     スパターン）引数をパスに展開する場合、名前付きの <tree-ish> がまだ
     存在するためにインデックスから削除されたパスを装います。 このオプシ
     ョンを ‘-s’ または ‘-u’ オプションと一緒に使用しても意味がありませ
     ん。

‘-t’
     この機能は準非推奨です。スクリプト化の目的では、 git-status(1)
     ‘--porcelain’ と git-diff-files(1) ‘--name-status’ がほとんどの場合
     優れた代替手段であり、さらにユーザーフレンドリーな代替手段について
     は、 git-status(1) ‘--short’ または git-diff(1) ‘--name-status’ を
     ご覧下さい。

     このオプションは、各行の先頭にある以下のタグ(スペースが続く)でファ
     イルのステータスを識別します:

     H
          cached

     S
          skip-worktree

     M
          unmerged

     R
          removed/deleted

     C
          modified/changed

     K
          to be killed

     ?
          other

‘-v’
     ‘-t’ に似ていますが、「変更されていないと仮定する」とマークされたフ
     ァイルには小文字を使用します(git-update-index(1) を参照)。

‘-f’
     ‘-t’ に似ていますが、「fsmonitor valid」とマークされているファイル
     には小文字を使用します(git-update-index(1) を参照)。

‘--full-name’
     サブディレクトリから実行する場合、コマンドは通常、現在のディレクト
     リからの相対パスを出力します。 このオプションは、プロジェクトの最上
     位ディレクトリを基準にしたパスを強制的に出力します。

‘--recurse-submodules’
     リポジトリ内のアクティブなサブモジュールごとに ls-files を再帰的に
     呼び出します。 現在、 ‘--cached’ モードのみがサポートされています。

‘--abbrev[=<n>]’
     40バイトの16進数のオブジェクト行全体を表示する代わりに、オブジェク
     トを一意に参照する、少なくとも <n> の長さ16進数の長さの最短のプレフ
     ィックスを表示します。デフォルト以外の桁数は、 ‘--abbrev=<n>’ で指
     定できます。

‘--debug’
     ファイルを説明する各行の後に、そのキャッシュエントリに関するデータ
     を追加します。これは、手動検査のために可能な限り多くの情報を表示す
     ることを目的としています。正確な形式は予告なく変更される可能性があ
     ります。

‘--eol’
     ファイルの <eolinfo> と <eolattr> を表示します。 <eolinfo> は、「
     text」属性が「auto」の場合(または設定されておらず、 core.autocrlf が
     false でない場合)にGitが使用するファイルコンテンツIDです。
     <eolinfo> は、「-text」、「none」、「lf」、「crlf」、「mixed」、「
     」のいずれかです。

     「」は、ファイルが通常のファイルではない、インデックスにない、また
     は作業ツリーでアクセスできないことを意味します。

     <eolattr> は、チェックアウトまたはコミット時に使用される属性であり
     、「」・「-text」・「text」・「text=auto」・「text eol=lf」・「text
     eol=crlf」 のいずれかです。 Git 2.10以降では「text=auto eol=lf」と
     「text=auto eol=crlf」がサポートされています。

     通常のファイルの場合、インデックス("i/<eolinfo>")と作業ツリー
     ("w/<eolinfo>")の両方の<eolinfo>が表示され、そのうしろに
     "attr/<eolattr>" が続きます。

‘--’
     これ以降の引数をオプションとして解釈しないでください。

<file>
     表示するファイル。ファイルが指定されていない場合、他の指定された基
     準に一致するすべてのファイルが表示されます。


OUTPUT
******

_git ls-files_ は、 ‘--stage’ が指定されていない限り、ファイル名を出力す
るだけです。指定されている場合は、以下のように出力されます:

     [<tag> ]<mode> <object> <stage> <file>

   _git ls-files –eol_ の場合:
i/<eolinfo><SPACES>w/<eolinfo><SPACES>attr/<eolattr><SPACE*><TAB><file>

   ‘git ls-files --unmerged’ と ‘git ls-files --stage’ を使用して、マー
ジされていないパスの詳細情報を調べることができます。

   マージされていないパスの場合、単一の モード/SHA-1 ペアを記録する代わ
りに、インデックスは最大3つのそのようなペアを記録します。 ステージ1のツ
リーOから一つと、ステージ2のAから一つと、ステージ3のBからの一つです。こ
の情報は、ユーザー(または磁器コマンド)がパスに最終的に記録する内容を確認
するために使用できます。(状態の詳細については、 git-read-tree(1) を参照
してください)

   ‘-z’ オプションを指定しない場合、構成変数 ‘core.quotePath’ で説明され
ているように、「異常な」文字を含むパス名がクォートされます(git-config(1)
を参照)。 ‘-z’ を使用すると、ファイル名がそのまま出力され、行はNULバイト
で終了します。


EXCLUDE PATTERNS
****************

_git ls-files_ は、ディレクトリツリーをトラバースし、フラグ ‘--others’ ま
たは ‘--ignored’ が指定されている場合に表示するファイルを検索するときに
、「除外パターン」(exclude patterns)のリストを使用できます。
gitignore(5) は、除外パターンの形式を指定します。

   これらの除外パターンは、以下の順序で取得されます:

  1. コマンドラインフラグ ‘--exclude=<pattern>’ は、単一のパターンを指定
     します。 パターンは、コマンドラインに現れるのと同じ順序で並べられま
     す。

  2. コマンドラインフラグ ‘--exclude-from=<file>’ は、パターンのリストを
     含むファイルを指定します。 パターンは、ファイルに現れるのと同じ順序
     で並べられます。

  3. コマンドラインフラグ ‘--exclude-per-directory=<name> ` は、 'git
     ls-files' が調べる各ディレクトリ内のファイルの名前(通常は
     `.gitignore’ )を指定します。 より深いディレクトリ内のファイルが優先
     されます。パターンは、ファイルに現れるのと同じ順序で並べられます。

   コマンドラインで ‘--exclude’ で指定されたパターン、または
‘--exclude-from’ で指定されたファイルから読み取られたパターンは、ディレ
クトリツリーの最上位を基準にしています。 ‘--exclude-per-directory’ で指
定されたファイルから読み取られたパターンは、パターンファイルが置かれてい
るディレクトリを基準にしています。


SEE ALSO
********

git-read-tree(1), gitignore(5)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-ls-remote,  Up: Top

Name
****

git-ls-remote — リモートリポジトリの参照を一覧表示する


Synopsis
********

     git ls-remote [–heads] [–tags] [–refs] [–upload-pack=<exec>]
                   [-q | –quiet] [–exit-code] [–get-url] [–sort=<key>]
                   [–symref] [<repository> [<refs>…]]


DESCRIPTION
***********

リモートリポジトリで有効な参照を、関連するコミットIDとともに表示します。


OPTIONS
*******

‘-h’
‘--heads’
‘-t’
‘--tags’
     それぞれ、refs/heads と refs/tags のみに制限します。これらのオプシ
     ョンは相互に排他的ではありません。両方を指定すると、 refs/heads と
     refs/tags に保存されている参照が表示されます。コマンドラインで他に
     何も指定せずに使用された ‘git ls-remote -h’ は、他のgitサブコマンド
     と同じようにヘルプを提供することに注意してください。

‘--refs’
     ピーリングされたタグ(peeled tag)や ‘HEAD’ のような疑似参照
     (pseudoref)を出力に表示しないでください。

‘-q’
‘--quiet’
     stderrにリモートURLを出力しないでください。

‘--upload-pack=<exec>’
     リモートホストの「git-upload-pack」のフルパスを指定します。これによ
     り、SSH経由でアクセスされ、SSHデーモンがユーザーによって構成された
     PATHを使用しないリポジトリからの参照を一覧表示できます。

‘--exit-code’
     リモートリポジトリに一致する参照が見つからない場合は、ステータス「
     2」で終了します。通常、コマンドはステータス「0」で終了し、一致する
     参照が見つかったかどうかに関係なく、リモートリポジトリと正常に通信
     したことを示します。

‘--get-url’
     ‘url.<base>.insteadOf’ 構成設定(git-config(1)を参照)を考慮して、指
     定されたリモートリポジトリのURLを展開し、リモートと通信せずに終了し
     ます。

‘--symref’
     それが指すオブジェクトに加えて、シンボリックrefを表示するときに、そ
     れが指す基になるrefを表示します。 現在、upload-packはsymref HEADの
     みを表示するため、ls-remoteによって表示されるのはこれだけです。

‘--sort=<key>’
     指定されたキーに基づいて並べ替えます。接頭辞 ‘-’ を使用して、値の降
     順で並べ替えます。 ‘version:refname’ または ‘v:refname’ をサポート
     します(タグ名はバージョンとして扱われます)。 ‘version:refname’ のソ
     ート順は、 ‘versionsort.suffix’ 構成変数の影響も受ける可能性があり
     ます。 その他の並べ替えオプションについては git-for-each-ref(1) を
     参照してください。ただし、オブジェクト自体へのアクセスを必要とする
     ‘committerdate’ のようなキーは、オブジェクトがまだリモートからフェ
     ッチされていないrefに対しては機能せず、 ‘missing object’ エラーが発
     生することに注意してください。

‘-o <option>’
‘--server-option=<option>’
     プロトコルバージョン2を使用して通信する場合は、指定された文字列をサ
     ーバーに送信します。指定された文字列には、NULまたはLF文字を含めるこ
     とはできません。 複数の ‘--server-option=<option>’ が指定されている
     場合、それらはコマンドラインにリストされている順序で送信されます。

<repository>
     クエリする「リモート」リポジトリ。 このパラメーターは、URLまたはリ
     モートの名前のいずれかです(git-fetch(1) の「GIT URLS」と「REMOTES」
     セクションを参照してください)。

<refs>…
     指定しない場合、 ‘--heads’ と ‘--tags’ でフィルタリングを行った後の
     すべての参照が表示されます。 <refs>… を指定すると、指定したパターン
     に一致する参照のみが表示されます。


EXAMPLES
********

     $ git ls-remote --tags ./.
     d6602ec5194c87b0fc87103ca4d67251c76f233a        refs/tags/v0.99
     f25a265a342aed6041ab0cc484224d9ca54b6f41        refs/tags/v0.99.1
     7ceca275d047c90c0c7d5afb13ab97efdf51bd6e        refs/tags/v0.99.3
     c5db5456ae3b0873fc659c19fafdde22313cc441        refs/tags/v0.99.2
     0918385dbd9656cab0d1d81ba7453d49bbc16250        refs/tags/junio-gpg-pub
     $ git ls-remote http://www.kernel.org/pub/scm/git/git.git master seen rc
     5fe978a5381f1fbad26a80e682ddd2a401966740        refs/heads/master
     c781a84b5204fb294c9ccc79f8b3baceeb32c061        refs/heads/seen
     $ git remote add korg http://www.kernel.org/pub/scm/git/git.git
     $ git ls-remote --tags korg v\*
     d6602ec5194c87b0fc87103ca4d67251c76f233a        refs/tags/v0.99
     f25a265a342aed6041ab0cc484224d9ca54b6f41        refs/tags/v0.99.1
     c5db5456ae3b0873fc659c19fafdde22313cc441        refs/tags/v0.99.2
     7ceca275d047c90c0c7d5afb13ab97efdf51bd6e        refs/tags/v0.99.3


SEE ALSO
********

git-check-ref-format(1).


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-ls-tree,  Up: Top

Name
****

git-ls-tree — ツリーオブジェクトの内容を一覧表示します


Synopsis
********

     git ls-tree [-d] [-r] [-t] [-l] [-z]
                 [–name-only] [–name-status] [–full-name] [–full-tree] [–abbrev[=<n>]]
                 <tree-ish> [<path>…]


DESCRIPTION
***********

「/bin/ls -a」が現在の作業ディレクトリで行うことのように、特定のツリーオ
ブジェクトの内容を一覧表示します。 ただし以下の点に注意してください:

   • 動作は「/bin/ls」の動作とは少し異なり、「<path>」は一致するパターン
     のリストのみを示します。 したがって、( ‘-r’ なしで)ディレクトリ名を
     指定すると動作が異なり、引数の順序は重要ではありません。

   • _<path>_ が現在の作業ディレクトリを基準にして取得されるという点で、
     動作は「/bin/ls」の動作と似ています。例えば、あなたの現在の作業ディ
     レクトリが「sub」で、その下にサブディレクトリ「dir」がある場合は、
     「git ls-tree -r HEAD dir」を実行すると、「dir」ツリーの内容を一覧
     表示できます(つまり、「HEAD」の「sub/dir」) 。あなたが、ルートレベ
     ル以外のツリーを直接指定したいとします(たとえば ‘git ls-tree -r
     HEAD:sub dir’ と指定します)。しかし、この場合は結果として ‘HEAD’ コ
     ミットで ‘sub/sub/dir’ を要求したことになります(そしてそんなディレ
     クトリはないので何も表示されない)。ただし、 ‘--full-tree’ プション
     を渡すと、現在の作業ディレクトリを無視できます(つまり、 ‘git
     ls-tree --fulltree -r HEAD:sub dir’ とすれば意図したとおりに動く)


OPTIONS
*******

<tree-ish>
     ツリーっぽい何か(tree-ish)のID

‘-d’
     名前付きツリーエントリ自体のみを表示し、その子供たちは表示しません
     。

‘-r’
     サブツリーに再帰的に入っていきます

‘-t’
     サブツリーに再帰的入っていく場合でも、ツリーエントリを表示します。
     ‘-r’ が渡されなかった場合は効果がありません。 ‘-d’ は ‘-t’ の意味を
     含んでいます。

‘-l’
‘--long’
     ブロブ(ファイル)エントリのオブジェクトサイズを表示します。

‘-z’
     ‘\0’ (NULバイト)出力での行終了であり、ファイル名をクォートしません
     。 詳細については、以下の OUTPUT FORMAT を参照してください。

‘--name-only’
‘--name-status’
     (「long」出力ではなく)ファイル名のみを1行に1つずつリストします。

‘--abbrev[=<n>]’
     40バイトの16進オブジェクト行全体を表示する代わりに、オブジェクトを
     一意に参照できる、少なくとも _<n>_ 以上の長さの最短のプレフィックス
     を表示します。デフォルト以外の桁数は ‘--abbrev=<n>’ で指定できます
     。(訳注:手元ではデフォルトは10桁で表示された。 ‘--abbrev=1’ とする
     と5桁(一部6桁)表示となった)

‘--full-name’
     現在の作業ディレクトリに関連するパス名を表示する代わりに、フルパス
     名を表示します。

‘--full-tree’
     現在の作業ディレクトリを無視して、ルートレベルを起点として一覧表示
     します。 ‘--full-name’ の意味を含んでいます。

[<path>…]
     パスが指定されたら、それらを表示します(これは実際には生のパス名では
     なく、一致するパターンのリストであることに注意してください)。 それ
     以外の場合は、ツリーのルートレベルを唯一のパス引数として暗黙的に使
     用します。


Output Format
*************

     <mode> SP <type> SP <object> TAB <file>

   この出力形式は、「git update-index」の「–index-info—stdin」が期待する
ものと互換性があります。

   ‘-l’ オプションを使用すると、形式が以下のように変わります

     <mode> SP <type> SP <object> SP <object size> TAB <file>

   <object> で識別されるオブジェクトサイズはバイト単位で指定され、最小幅
7文字で右寄せされます。オブジェクトサイズは、ブロブ(ファイル)エントリに
対してのみ指定されます。他のエントリの場合、サイズの代わりに ‘-’ 文字が
使用されます。

   ‘-z’ オプションを指定しない場合、構成変数 ‘core.quotePath’ で説明され
ているように、「異常な」文字を含むパス名が引用符で囲まれます
(git-config(1) を参照)。 ‘-z’ を使用すると、ファイル名がそのまま出力され
、行はNULバイトで終了します。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-mailinfo,  Up: Top

Name
****

git-mailinfo — 単一の電子メールメッセージからパッチと作成者を抽出します


Synopsis
********

     git mailinfo [-k|-b] [-u | –encoding=<encoding> | -n]
                    [–[no-]scissors] [–quoted-cr=<action>]
                    <msg> <patch>


DESCRIPTION
***********

標準入力から単一の電子メールメッセージを読み取り、コミットログメッセージ
を <msg> ファイルに書き込み、パッチを <patch> ファイルに書き込みます。作
者名と電子メールアドレスと電子メールの件名は、コミットを作成する ‘git
am’ で使用するために標準出力に書き出されます。通常、このコマンドをユーザ
ーが直接使用する必要はありません。代わりに git-am(1) を参照してください
。


OPTIONS
*******

‘-k’
     通常、プログラムは、 ‘Subject:’ ヘッダー行から電子メール特有の断片
     文字列を取り除き、コミットログメッセージのタイトル行を取り出します
     。このオプションは、この変更をある程度防ぎ、 ‘git format-patch -k’
     出力を読み返すために使用する場合に最も役立つようにします。

     具体的には、以下のものがなくなるまでは削除を行います:

        • 先頭と末尾の空白(whitespace)を削除。

        • 先頭の ‘Re:’ や ‘re:’ や ‘:’ を削除。

        • 先頭のブラケットで囲まれた文字列( ‘[’ 〜 ‘]’ 、 通常は
          ‘[PATCH]’ ) 。

     最後に、空白類(whitespace)は単一のASCIIスペース文字(\x20)に正規化さ
     れます。

‘-b’
     ‘-k’ が有効でない場合、 先頭のブラケット ‘[’ と ‘]’ のペアで囲まれ
     たすべての文字列が削除されます。このオプションは、括弧で囲まれた文
     字列に ‘PATCH’ という単語が含まれているペアのみに削除を制限します。

‘-u’
     コミットログメッセージ、作者名、作者の電子メールアドレスは電子メー
     ルから取得され、MIME転送エンコーディングを最小限にデコードした後、
     それらを変換することにより、 ‘i18n.commitEncoding’ (デフォルトは
     UTF-8) で指定された文字セットに再コーディングされます。これは以前は
     オプションでしたが、現在はデフォルトです。

     注意: このフラグがあっても、パッチは常に文字セット変換なしでそのま
     ま使用されることに注意してください。

‘--encoding=<encoding>’
     ‘-u’ に似ています。 ただし、再コーディング時には、
     ‘i18n.commitEncoding’ で指定された文字セットまたはUTF-8の代わりに、
     ここで指定した文字セットが使用されます。

‘-n’
     メタデータのすべての文字セットの再コーディングを無効にします。

‘-m’
‘--message-id’
     コミットメッセージの最後にあるMessage-IDヘッダーをコピーします。こ
     れは、コミットをメーリングリストのディスカッションに関連付けるのに
     役立ちます。

‘--scissors’
     本文で切り取り線(例えば ‘-- >8 --’ )の前にあるすべてを取り除きます
     。 この線は、はさみ(scissors)とミシン目マークを表しており、その行で
     メッセージをカットするように読者に要求するために使用されます。パッ
     チの前のメッセージの本文にその行が表示されている場合、このオプショ
     ンを使用すると、その行の前のすべて(切り取り線の行自体を含む)が無視
     されます(訳注: ‘>8’ や ‘8<’ は「ハサミ」を示す絵文字)。

     これは、返信するメッセージに関するコメントと提案を含むディスカッシ
     ョンスレッドでメッセージを開始し、パッチの送信でメッセージを終了し
     、ディスカッションと提案されたコミットログメッセージの開始を切り取
     り線で区切る場合に役立ちます。

     これは、構成オプション mailinfo.scissors を使用してデフォルトで有効
     にできます。

‘--no-scissors’
     切り取り線を無視します。 mailinfo.scissors 設定を上書きするのに便利
     です。

‘--quoted-cr=<action>’
     base64またはquoted-printableエンコーディングで送信された電子メール
     メッセージを処理し、デコードされた行が単純なLFではなくCRLFで終了す
     る場合の操作(action)を指定。

     有効な操作(action)は:

        • ‘nowarn’: そのようなCRLFが見つかった場合、Gitは何もしません。

        • ‘warn’: そのようなCRLFが見つかった場合、 Gitはメッセージごとに
          警告を発行します。

        • ‘strip’: GitはそれらのCRLFをLFに変換します。

     デフォルトの操作(action)は、構成オプション ‘mailinfo.quotedCR’ で設
     定できます。そのような構成オプションが設定されていない場合、 ‘warn’
     が使用されます。

<msg>
     電子メールから抽出されたコミットログメッセージ。通常、電子メールの
     件名から抽出したタイトル行は除きます。

<patch>
     電子メールから抽出されたパッチ。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-mailsplit,  Up: Top

Name
****

git-mailsplit — 簡易 UNIX mbox 分割プログラム


Synopsis
********

     git mailsplit [-b] [-f<nn>] [-d<prec>] [–keep-cr] [–mboxrd]
                     -o<directory> [–] [(<mbox>|<Maildir>)…]


DESCRIPTION
***********

mboxファイルまたはMaildirを指定のディレクトリ内でファイルのリストに分割
し("0001" "0002" ..)、そこからさらに処理できるようにします。

     *Important*

     Maildirの分割は、ファイル名が正しい順序でパッチを出力するためにソー
     トされていることに依存しています。


OPTIONS
*******

<mbox>
     分割するmboxファイル。指定しない場合、mboxは標準入力から読み取られ
     ます。

<Maildir>
     分割するMaildirのルート。このディレクトリには、cur と tmp とnew サ
     ブディレクトリが含まれている必要があります。

‘-o<directory>’
     個々のメッセージを配置するディレクトリ。

‘-b’
     ファイルがFrom行で始まらない場合は、エラーにするのではなく、単一の
     メールメッセージであると想定してください。

‘-d<prec>’
     先行ゼロを含むデフォルトの4桁の代わりに、生成するファイル名に異なる
     桁数を指定できます。

‘-f<nn>’
     出力ファイル名の最初の <nn> 番号までをスキップします。たとえば、
     -f3 が指定されている場合は、番号を0004から始めます。

‘--keep-cr’
     ‘\r\n’ で終わる行から ‘\r’ を削除しないでください。

‘--mboxrd’
     入力は「mboxrd」形式であり、 "^>+From " 行のエスケープは逆になりま
     す。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-maintenance,  Up: Top

Name
****

git-maintenance — Run tasks to optimize Git repository data


Synopsis
********

     git maintenance run [<options>]


DESCRIPTION
***********

Run tasks to optimize Git repository data, speeding up other Git
commands and reducing storage requirements for the repository.

   Git commands that add repository data, such as ‘git add’ or ‘git
fetch’, are optimized for a responsive user experience.  These commands
do not take time to optimize the Git data, since such optimizations
scale with the full size of the repository while these user commands
each perform a relatively small action.

   The ‘git maintenance’ command provides flexibility for how to
optimize the Git repository.


SUBCOMMANDS
***********

register
     Initialize Git config values so any scheduled maintenance will
     start running on this repository.  This adds the repository to the
     ‘maintenance.repo’ config variable in the current user’s global
     config and enables some recommended configuration values for
     ‘maintenance.<task>.schedule’.  The tasks that are enabled are safe
     for running in the background without disrupting foreground
     processes.

     The ‘register’ subcommand will also set the ‘maintenance.strategy’
     config value to ‘incremental’, if this value is not previously set.
     The ‘incremental’ strategy uses the following schedule for each
     maintenance task:

        • ‘gc’: disabled.

        • ‘commit-graph’: hourly.

        • ‘prefetch’: hourly.

        • ‘loose-objects’: daily.

        • ‘incremental-repack’: daily.

     ‘git maintenance register’ will also disable foreground maintenance
     by setting ‘maintenance.auto = false’ in the current repository.
     This config setting will remain after a ‘git maintenance
     unregister’ command.

run
     Run one or more maintenance tasks.  If one or more ‘--task’ options
     are specified, then those tasks are run in that order.  Otherwise,
     the tasks are determined by which ‘maintenance.<task>.enabled’
     config options are true.  By default, only ‘maintenance.gc.enabled’
     is true.

start
     Start running maintenance on the current repository.  This performs
     the same config updates as the ‘register’ subcommand, then updates
     the background scheduler to run ‘git maintenance run --scheduled’
     on an hourly basis.

stop
     Halt the background maintenance schedule.  The current repository
     is not removed from the list of maintained repositories, in case
     the background maintenance is restarted later.

unregister
     Remove the current repository from background maintenance.  This
     only removes the repository from the configured list.  It does not
     stop the background maintenance processes from running.


TASKS
*****

commit-graph
     The ‘commit-graph’ job updates the ‘commit-graph’ files
     incrementally, then verifies that the written data is correct.  The
     incremental write is safe to run alongside concurrent Git processes
     since it will not expire ‘.graph’ files that were in the previous
     ‘commit-graph-chain’ file.  They will be deleted by a later run
     based on the expiration delay.

prefetch
     The ‘prefetch’ task updates the object directory with the latest
     objects from all registered remotes.  For each remote, a ‘git
     fetch’ command is run.  The configured refspec is modified to place
     all requested refs within ‘refs/prefetch/’.  Also, tags are not
     updated.

     This is done to avoid disrupting the remote-tracking branches.  The
     end users expect these refs to stay unmoved unless they initiate a
     fetch.  With prefetch task, however, the objects necessary to
     complete a later real fetch would already be obtained, so the real
     fetch would go faster.  In the ideal case, it will just become an
     update to a bunch of remote-tracking branches without any object
     transfer.

gc
     Clean up unnecessary files and optimize the local repository.  "GC"
     stands for "garbage collection," but this task performs many
     smaller tasks.  This task can be expensive for large repositories,
     as it repacks all Git objects into a single pack-file.  It can also
     be disruptive in some situations, as it deletes stale data.  See
     git-gc(1) for more details on garbage collection in Git.

loose-objects
     The ‘loose-objects’ job cleans up loose objects and places them
     into pack-files.  In order to prevent race conditions with
     concurrent Git commands, it follows a two-step process.  First, it
     deletes any loose objects that already exist in a pack-file;
     concurrent Git processes will examine the pack-file for the object
     data instead of the loose object.  Second, it creates a new
     pack-file (starting with "loose-") containing a batch of loose
     objects.  The batch size is limited to 50 thousand objects to
     prevent the job from taking too long on a repository with many
     loose objects.  The ‘gc’ task writes unreachable objects as loose
     objects to be cleaned up by a later step only if they are not
     re-added to a pack-file; for this reason it is not advisable to
     enable both the ‘loose-objects’ and ‘gc’ tasks at the same time.

incremental-repack
     The ‘incremental-repack’ job repacks the object directory using the
     ‘multi-pack-index’ feature.  In order to prevent race conditions
     with concurrent Git commands, it follows a two-step process.
     First, it calls ‘git multi-pack-index expire’ to delete pack-files
     unreferenced by the ‘multi-pack-index’ file.  Second, it calls ‘git
     multi-pack-index repack’ to select several small pack-files and
     repack them into a bigger one, and then update the
     ‘multi-pack-index’ entries that refer to the small pack-files to
     refer to the new pack-file.  This prepares those small pack-files
     for deletion upon the next run of ‘git multi-pack-index expire’.
     The selection of the small pack-files is such that the expected
     size of the big pack-file is at least the batch size; see the
     ‘--batch-size’ option for the ‘repack’ subcommand in
     git-multi-pack-index(1).  The default batch-size is zero, which is
     a special case that attempts to repack all pack-files into a single
     pack-file.

pack-refs
     The ‘pack-refs’ task collects the loose reference files and
     collects them into a single file.  This speeds up operations that
     need to iterate across many references.  See git-pack-refs(1) for
     more information.


OPTIONS
*******

‘--auto’
     When combined with the ‘run’ subcommand, run maintenance tasks only
     if certain thresholds are met.  For example, the ‘gc’ task runs
     when the number of loose objects exceeds the number stored in the
     ‘gc.auto’ config setting, or when the number of pack-files exceeds
     the ‘gc.autoPackLimit’ config setting.  Not compatible with the
     ‘--schedule’ option.

‘--schedule’
     When combined with the ‘run’ subcommand, run maintenance tasks only
     if certain time conditions are met, as specified by the
     ‘maintenance.<task>.schedule’ config value for each ‘<task>’.  This
     config value specifies a number of seconds since the last time that
     task ran, according to the ‘maintenance.<task>.lastRun’ config
     value.  The tasks that are tested are those provided by the
     ‘--task=<task>’ option(s) or those with
     ‘maintenance.<task>.enabled’ set to true.

‘--quiet’
     Do not report progress or other information over ‘stderr’.

‘--task=<task>’
     If this option is specified one or more times, then only run the
     specified tasks in the specified order.  If no ‘--task=<task>’
     arguments are specified, then only the tasks with
     ‘maintenance.<task>.enabled’ configured as ‘true’ are considered.
     See the _TASKS_ section for the list of accepted ‘<task>’ values.

‘--scheduler=auto|crontab|systemd-timer|launchctl|schtasks’
     When combined with the ‘start’ subcommand, specify the scheduler
     for running the hourly, daily and weekly executions of ‘git
     maintenance run’.  Possible values for ‘<scheduler>’ are ‘auto’,
     ‘crontab’ (POSIX), ‘systemd-timer’ (Linux), ‘launchctl’ (macOS),
     and ‘schtasks’ (Windows).  When ‘auto’ is specified, the
     appropriate platform-specific scheduler is used; on Linux,
     ‘systemd-timer’ is used if available, otherwise ‘crontab’.  Default
     is ‘auto’.


TROUBLESHOOTING
***************

The ‘git maintenance’ command is designed to simplify the repository
maintenance patterns while minimizing user wait time during Git
commands.  A variety of configuration options are available to allow
customizing this process.  The default maintenance options focus on
operations that complete quickly, even on large repositories.

   Users may find some cases where scheduled maintenance tasks do not
run as frequently as intended.  Each ‘git maintenance run’ command takes
a lock on the repository’s object database, and this prevents other
concurrent ‘git maintenance run’ commands from running on the same
repository.  Without this safeguard, competing processes could leave the
repository in an unpredictable state.

   The background maintenance schedule runs ‘git maintenance run’
processes on an hourly basis.  Each run executes the "hourly" tasks.  At
midnight, that process also executes the "daily" tasks.  At midnight on
the first day of the week, that process also executes the "weekly"
tasks.  A single process iterates over each registered repository,
performing the scheduled tasks for that frequency.  Depending on the
number of registered repositories and their sizes, this process may take
longer than an hour.  In this case, multiple ‘git maintenance run’
commands may run on the same repository at the same time, colliding on
the object database lock.  This results in one of the two tasks not
running.

   If you find that some maintenance windows are taking longer than one
hour to complete, then consider reducing the complexity of your
maintenance tasks.  For example, the ‘gc’ task is much slower than the
‘incremental-repack’ task.  However, this comes at a cost of a slightly
larger object database.  Consider moving more expensive tasks to be run
less frequently.

   Expert users may consider scheduling their own maintenance tasks
using a different schedule than is available through ‘git maintenance
start’ and Git configuration options.  These users should be aware of
the object database lock and how concurrent ‘git maintenance run’
commands behave.  Further, the ‘git gc’ command should not be combined
with ‘git maintenance run’ commands.  ‘git gc’ modifies the object
database but does not take the lock in the same way as ‘git maintenance
run’.  If possible, use ‘git maintenance run --task=gc’ instead of ‘git
gc’.

   The following sections describe the mechanisms put in place to run
background maintenance by ‘git maintenance start’ and how to customize
them.


BACKGROUND MAINTENANCE ON POSIX SYSTEMS
***************************************

The standard mechanism for scheduling background tasks on POSIX systems
is cron(8).  This tool executes commands based on a given schedule.  The
current list of user-scheduled tasks can be found by running ‘crontab
-l’.  The schedule written by ‘git maintenance start’ is similar to
this:

     # BEGIN GIT MAINTENANCE SCHEDULE
     # The following schedule was created by Git
     # Any edits made in this region might be
     # replaced in the future by a Git command.

     0 1-23 * * * "/<path>/git" --exec-path="/<path>" for-each-repo --config=maintenance.repo maintenance run --schedule=hourly
     0 0 * * 1-6 "/<path>/git" --exec-path="/<path>" for-each-repo --config=maintenance.repo maintenance run --schedule=daily
     0 0 * * 0 "/<path>/git" --exec-path="/<path>" for-each-repo --config=maintenance.repo maintenance run --schedule=weekly

     # END GIT MAINTENANCE SCHEDULE

   The comments are used as a region to mark the schedule as written by
Git.  Any modifications within this region will be completely deleted by
‘git maintenance stop’ or overwritten by ‘git maintenance start’.

   The ‘crontab’ entry specifies the full path of the ‘git’ executable
to ensure that the executed ‘git’ command is the same one with which
‘git maintenance start’ was issued independent of ‘PATH’.  If the same
user runs ‘git maintenance start’ with multiple Git executables, then
only the latest executable is used.

   These commands use ‘git for-each-repo --config=maintenance.repo’ to
run ‘git maintenance run --schedule=<frequency>’ on each repository
listed in the multi-valued ‘maintenance.repo’ config option.  These are
typically loaded from the user-specific global config.  The ‘git
maintenance’ process then determines which maintenance tasks are
configured to run on each repository with each ‘<frequency>’ using the
‘maintenance.<task>.schedule’ config options.  These values are loaded
from the global or repository config values.

   If the config values are insufficient to achieve your desired
background maintenance schedule, then you can create your own schedule.
If you run ‘crontab -e’, then an editor will load with your
user-specific ‘cron’ schedule.  In that editor, you can add your own
schedule lines.  You could start by adapting the default schedule listed
earlier, or you could read the crontab(5) documentation for advanced
scheduling techniques.  Please do use the full path and ‘--exec-path’
techniques from the default schedule to ensure you are executing the
correct binaries in your schedule.


BACKGROUND MAINTENANCE ON LINUX SYSTEMD SYSTEMS
***********************************************

While Linux supports ‘cron’, depending on the distribution, ‘cron’ may
be an optional package not necessarily installed.  On modern Linux
distributions, systemd timers are superseding it.

   If user systemd timers are available, they will be used as a
replacement of ‘cron’.

   In this case, ‘git maintenance start’ will create user systemd timer
units and start the timers.  The current list of user-scheduled tasks
can be found by running ‘systemctl --user list-timers’.  The timers
written by ‘git maintenance start’ are similar to this:

     $ systemctl --user list-timers
     NEXT                         LEFT          LAST                         PASSED     UNIT                         ACTIVATES
     Thu 2021-04-29 19:00:00 CEST 42min left    Thu 2021-04-29 18:00:11 CEST 17min ago  git-maintenance@hourly.timer git-maintenance@hourly.service
     Fri 2021-04-30 00:00:00 CEST 5h 42min left Thu 2021-04-29 00:00:11 CEST 18h ago    git-maintenance@daily.timer  git-maintenance@daily.service
     Mon 2021-05-03 00:00:00 CEST 3 days left   Mon 2021-04-26 00:00:11 CEST 3 days ago git-maintenance@weekly.timer git-maintenance@weekly.service

   One timer is registered for each ‘--schedule=<frequency>’ option.

   The definition of the systemd units can be inspected in the following
files:

     ~/.config/systemd/user/git-maintenance@.timer
     ~/.config/systemd/user/git-maintenance@.service
     ~/.config/systemd/user/timers.target.wants/git-maintenance@hourly.timer
     ~/.config/systemd/user/timers.target.wants/git-maintenance@daily.timer
     ~/.config/systemd/user/timers.target.wants/git-maintenance@weekly.timer

   ‘git maintenance start’ will overwrite these files and start the
timer again with ‘systemctl --user’, so any customization should be done
by creating a drop-in file, i.e.  a ‘.conf’ suffixed file in the
‘~/.config/systemd/user/git-maintenance@.service.d’ directory.

   ‘git maintenance stop’ will stop the user systemd timers and delete
the above mentioned files.

   For more details, see ‘systemd.timer(5)’.


BACKGROUND MAINTENANCE ON MACOS SYSTEMS
***************************************

While macOS technically supports ‘cron’, using ‘crontab -e’ requires
elevated privileges and the executed process does not have a full user
context.  Without a full user context, Git and its credential helpers
cannot access stored credentials, so some maintenance tasks are not
functional.

   Instead, ‘git maintenance start’ interacts with the ‘launchctl’ tool,
which is the recommended way to schedule timed jobs in macOS. Scheduling
maintenance through ‘git maintenance (start|stop)’ requires some
‘launchctl’ features available only in macOS 10.11 or later.

   Your user-specific scheduled tasks are stored as XML-formatted
‘.plist’ files in ‘~/Library/LaunchAgents/’.  You can see the
currently-registered tasks using the following command:

     $ ls ~/Library/LaunchAgents/org.git-scm.git*
     org.git-scm.git.daily.plist
     org.git-scm.git.hourly.plist
     org.git-scm.git.weekly.plist

   One task is registered for each ‘--schedule=<frequency>’ option.  To
inspect how the XML format describes each schedule, open one of these
‘.plist’ files in an editor and inspect the ‘<array>’ element following
the ‘<key>StartCalendarInterval</key>’ element.

   ‘git maintenance start’ will overwrite these files and register the
tasks again with ‘launchctl’, so any customizations should be done by
creating your own ‘.plist’ files with distinct names.  Similarly, the
‘git maintenance stop’ command will unregister the tasks with
‘launchctl’ and delete the ‘.plist’ files.

   To create more advanced customizations to your background tasks, see
launchctl.plist(5) for more information.


BACKGROUND MAINTENANCE ON WINDOWS SYSTEMS
*****************************************

Windows does not support ‘cron’ and instead has its own system for
scheduling background tasks.  The ‘git maintenance start’ command uses
the ‘schtasks’ command to submit tasks to this system.  You can inspect
all background tasks using the Task Scheduler application.  The tasks
added by Git have names of the form ‘Git Maintenance (<frequency>)’.
The Task Scheduler GUI has ways to inspect these tasks, but you can also
export the tasks to XML files and view the details there.

   Note that since Git is a console application, these background tasks
create a console window visible to the current user.  This can be
changed manually by selecting the "Run whether user is logged in or not"
option in Task Scheduler.  This change requires a password input, which
is why ‘git maintenance start’ does not select it by default.

   If you want to customize the background tasks, please rename the
tasks so future calls to ‘git maintenance (start|stop)’ do not overwrite
your custom tasks.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-merge-base,  Up: Top

Name
****

git-merge-base — Find as good common ancestors as possible for a merge


Synopsis
********

     git merge-base [-a|–all] <commit> <commit>…
     git merge-base [-a|–all] –octopus <commit>…
     git merge-base –is-ancestor <commit> <commit>
     git merge-base –independent <commit>…
     git merge-base –fork-point <ref> [<commit>]


DESCRIPTION
***********

_git merge-base_ finds best common ancestor(s) between two commits to
use in a three-way merge.  One common ancestor is _better_ than another
common ancestor if the latter is an ancestor of the former.  A common
ancestor that does not have any better common ancestor is a _best common
ancestor_, i.e.  a _merge base_.  Note that there can be more than one
merge base for a pair of commits.


OPERATION MODES
***************

As the most common special case, specifying only two commits on the
command line means computing the merge base between the given two
commits.

   More generally, among the two commits to compute the merge base from,
one is specified by the first commit argument on the command line; the
other commit is a (possibly hypothetical) commit that is a merge across
all the remaining commits on the command line.

   As a consequence, the _merge base_ is not necessarily contained in
each of the commit arguments if more than two commits are specified.
This is different from git-show-branch(1) when used with the
‘--merge-base’ option.

‘--octopus’
     Compute the best common ancestors of all supplied commits, in
     preparation for an n-way merge.  This mimics the behavior of _git
     show-branch –merge-base_.

‘--independent’
     Instead of printing merge bases, print a minimal subset of the
     supplied commits with the same ancestors.  In other words, among
     the commits given, list those which cannot be reached from any
     other.  This mimics the behavior of _git show-branch –independent_.

‘--is-ancestor’
     Check if the first <commit> is an ancestor of the second <commit>,
     and exit with status 0 if true, or with status 1 if not.  Errors
     are signaled by a non-zero status that is not 1.

‘--fork-point’
     Find the point at which a branch (or any history that leads to
     <commit>) forked from another branch (or any reference) <ref>.
     This does not just look for the common ancestor of the two commits,
     but also takes into account the reflog of <ref> to see if the
     history leading to <commit> forked from an earlier incarnation of
     the branch <ref> (see discussion on this mode below).


OPTIONS
*******

‘-a’
‘--all’
     Output all merge bases for the commits, instead of just one.


DISCUSSION
**********

Given two commits _A_ and _B_, ‘git merge-base A B’ will output a commit
which is reachable from both _A_ and _B_ through the parent
relationship.

   For example, with this topology:

              o---o---o---B
             /
     ---o---1---o---o---o---A

   the merge base between _A_ and _B_ is _1_.

   Given three commits _A_, _B_ and _C_, ‘git merge-base A B C’ will
compute the merge base between _A_ and a hypothetical commit _M_, which
is a merge between _B_ and _C_. For example, with this topology:

            o---o---o---o---C
           /
          /   o---o---o---B
         /   /
     ---2---1---o---o---o---A

   the result of ‘git merge-base A B C’ is _1_.  This is because the
equivalent topology with a merge commit _M_ between _B_ and _C_ is:

            o---o---o---o---o
           /                 \
          /   o---o---o---o---M
         /   /
     ---2---1---o---o---o---A

   and the result of ‘git merge-base A M’ is _1_.  Commit _2_ is also a
common ancestor between _A_ and _M_, but _1_ is a better common
ancestor, because _2_ is an ancestor of _1_.  Hence, _2_ is not a merge
base.

   The result of ‘git merge-base --octopus A B C’ is _2_, because _2_ is
the best common ancestor of all commits.

   When the history involves criss-cross merges, there can be more than
one _best_ common ancestor for two commits.  For example, with this
topology:

     ---1---o---A
         \ /
          X
         / \
     ---2---o---o---B

   both _1_ and _2_ are merge-bases of A and B. Neither one is better
than the other (both are _best_ merge bases).  When the ‘--all’ option
is not given, it is unspecified which best one is output.

   A common idiom to check "fast-forward-ness" between two commits A and
B is (or at least used to be) to compute the merge base between A and B,
and check if it is the same as A, in which case, A is an ancestor of B.
You will see this idiom used often in older scripts.

     A=$(git rev-parse --verify A)
     if test "$A" = "$(git merge-base A B)"
     then
             ... A is an ancestor of B ...
     fi

   In modern git, you can say this in a more direct way:

     if git merge-base --is-ancestor A B
     then
             ... A is an ancestor of B ...
     fi

   instead.


Discussion on fork-point mode
*****************************

After working on the ‘topic’ branch created with ‘git switch -c topic
origin/master’, the history of remote-tracking branch ‘origin/master’
may have been rewound and rebuilt, leading to a history of this shape:

                      o---B2
                     /
     ---o---o---B1--o---o---o---B (origin/master)
             \
              B0
               \
                D0---D1---D (topic)

   where ‘origin/master’ used to point at commits B0, B1, B2 and now it
points at B, and your ‘topic’ branch was started on top of it back when
‘origin/master’ was at B0, and you built three commits, D0, D1, and D,
on top of it.  Imagine that you now want to rebase the work you did on
the topic on top of the updated origin/master.

   In such a case, ‘git merge-base origin/master topic’ would return the
parent of B0 in the above picture, but B0^..D is *not* the range of
commits you would want to replay on top of B (it includes B0, which is
not what you wrote; it is a commit the other side discarded when it
moved its tip from B0 to B1).

   ‘git merge-base --fork-point origin/master topic’ is designed to help
in such a case.  It takes not only B but also B0, B1, and B2 (i.e.  old
tips of the remote-tracking branches your repository’s reflog knows
about) into account to see on which commit your topic branch was built
and finds B0, allowing you to replay only the commits on your topic,
excluding the commits the other side later discarded.

   Hence

     $ fork_point=$(git merge-base --fork-point origin/master topic)

   will find B0, and

     $ git rebase --onto origin/master $fork_point topic

   will replay D0, D1 and D on top of B to create a new history of this
shape:

                      o---B2
                     /
     ---o---o---B1--o---o---o---B (origin/master)
             \                   \
              B0                  D0'--D1'--D' (topic - updated)
               \
                D0---D1---D (topic - old)

   A caveat is that older reflog entries in your repository may be
expired by ‘git gc’.  If B0 no longer appears in the reflog of the
remote-tracking branch ‘origin/master’, the ‘--fork-point’ mode
obviously cannot find it and fails, avoiding to give a random and
useless result (such as the parent of B0, like the same command without
the ‘--fork-point’ option gives).

   Also, the remote-tracking branch you use the ‘--fork-point’ mode with
must be the one your topic forked from its tip.  If you forked from an
older commit than the tip, this mode would not find the fork point
(imagine in the above sample history B0 did not exist, origin/master
started at B1, moved to B2 and then B, and you forked your topic at
origin/master^ when origin/master was B1; the shape of the history would
be the same as above, without B0, and the parent of B1 is what ‘git
merge-base origin/master topic’ correctly finds, but the ‘--fork-point’
mode will not, because it is not one of the commits that used to be at
the tip of origin/master).


See also
********

git-rev-list(1), git-show-branch(1), git-merge(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-merge-file,  Up: Top

Name
****

git-merge-file — 3方向ファイルマージを実行する


Synopsis
********

     git merge-file [-L <current-name> [-L <base-name> [-L <other-name>]]]
             [–ours|–theirs|–union] [-p|–stdout] [-q|–quiet] [–marker-size=<n>]
             [–[no-]diff3] <current-file> <base-file> <other-file>


DESCRIPTION
***********

_git merge-file_ は、 ‘<base-file>’ から ‘<other-file>’ へのすべての変更
を ‘<current-file>’ に組み込みます。結果は通常 ‘<current-file>’ に入りま
す。 _git merge-file_ は、元のファイルへの個別の変更を組み合わせるのに役
立ちます。 ‘<base-file>’ がオリジナルであり、 ‘<current-file>’ と
‘<other-file>’ の両方が ‘<base-file>’ の変更であるとすると、 _git
merge-file_ は両方の変更を結合します。

   ‘<current-file>’ と ‘<other-file>’ の両方の行の共通セグメントに変更が
ある場合、競合が発生します。競合が見つかった場合、「git merge-file」は通
常、警告を出力し、 ‘<<<<<<<’ および ‘>>>>>>>’ マーカーを含む行で競合を囲
みます。典型的な競合は以下のようになります:

     <<<<<<< A
     lines in file A
     =======
     lines in file B
     >>>>>>> B

   競合がある場合、ユーザーは結果を編集して、選択肢の1つを削除する必要が
あります。 ただし ‘--ours’ または ‘--theirs’ または ‘--union’ オプション
が有効な場合、これらの競合は、 ‘<current-file>’ の行または
‘<other-file>’ の行または両方からの行を優先して解決します。競合マーカー
の長さは ‘--marker-size’ オプションで指定できます。

   このプログラムの終了値は、エラーの場合は負数であり、それ以外の場合は
競合した数です(競合たくさんの場合は127に切り捨てられます)。マージがクリ
ーンだった場合、終了値は0です。

   _git merge-file_ は、RCS用マージの最小限のクローンになるように設計さ
れています。つまり git(1) に必要なRCSのマージ機能をすべて実装します。


OPTIONS
*******

‘-L <label>’
     このオプションは最大3回指定でき、競合レポートで対応するファイル名の
     代わりに使用するラベルを指定します。 つまり ‘git merge-file -L x -L
     y -L z a b c’ は、ファイルa、b、cからではなく、ファイルx、y、zから
     来たように見える出力を生成します。

‘-p’
     ‘<current-file>’ を上書きする代わりに、結果を標準出力に送信します。

‘-q’
     静かにします(quiet)。競合について警告しないでください。

‘--diff3’
     「diff3」スタイルで競合を表示します。

‘--ours’
‘--theirs’
‘--union’
     ファイルに競合を残す代わりに、競合部分の、our (または their または
     両方)側に有利な競合解決します。


EXAMPLES
********

‘git merge-file README.my README README.upstream’
     README以降のREADME.myとREADME.upstreamの変更を組み合わせて、それら
     をマージしようとし、結果をREADME.myに書き込みます。

‘git merge-file -L a -L b -L c tmp/a123 tmp/b234 tmp/c345’
     tmp/a123 と tmp/c345 をベースの tmp/b234 とマージしますが、
     ‘tmp/a123’ と ‘tmp/c345’ の代わりにラベル ‘a’ と ‘c’ を使用します。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-merge-index,  Up: Top

Name
****

git-merge-index — マージが必要なファイルのマージを実行します


Synopsis
********

     git merge-index [-o] [-q] <merge-program> (-a | [–] <file>*)


DESCRIPTION
***********

これにより、インデックス内の <file> が検索され、マージエントリがある場合
は、それらのファイルのSHA-1ハッシュが引数1、2、3（ファイルがない場合は空
の引数）として、および、引数4として <file> が渡されます。引数1、2、3の
3つのファイルのファイルモードは、引数5、6、7として渡されます。


OPTIONS
*******

‘--’
     これ以後の引数をオプションとして解釈しないでください。

‘-a’
     インデックス内のマージが必要なすべてのファイルに対してマージを実行
     します。

‘-o’
     最初に失敗したマージで停止するのではなく、すべてを一度に実行します
     。前のマージでエラーが返された場合でもマージを続行し、すべてのマー
     ジ後にエラーコードを返します。

‘-q’
     マージプログラムの失敗について文句を言わないでください(マージプログ
     ラムの失敗は通常、マージ中の競合を示します)。 これは、カスタムメッ
     セージを送信する可能性のある磁器コマンド用です。

   _git merge-index_ が複数の <file> (または ‘-a’ )で呼び出された場合、
それらを順番に処理し、マージがゼロ以外の終了コードを返した場合にのみ停止
します。

   通常、これは、RCSパッケージの「マージ」コマンドのGitの模倣を呼び出す
スクリプトで実行されます。

   _git merge-one-file_ というサンプルスクリプトがディストリビューション
に含まれています。

   警告！警告！警告！ Gitの「オブジェクトのマージ順序」は、RCSの「マージ
」プログラムのオブジェクトのマージ順序とは異なります。上記の順番では、オ
リジナルが最初です。しかし、3方向マージプログラム「マージ」の引数の順序
は、オリジナルを中央に置きます。理由は聞かないで…

   例:

     torvalds@ppc970:~/merge-test> git merge-index cat MM
     This is MM from the original tree.              # original
     This is modified MM in the branch A.            # merge1
     This is modified MM in the branch B.            # merge2
     This is modified MM in the branch B.            # current contents

   または

     torvalds@ppc970:~/merge-test> git merge-index cat AA MM
     cat: : No such file or directory
     This is added AA in the branch A.
     This is added AA in the branch B.
     This is added AA in the branch B.
     fatal: merge program failed

   後者の例は、何かがエラーを返した後、「git merge-index」がマージの試行
を停止する方法を示しています(つまり、「cat」は元のファイルに存在しなかっ
たため、AAファイルのエラーを返しました。 _git merge-index_ はMMをマージ
しようとさえしませんでした)。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-merge-one-file,  Up: Top

Name
****

git-merge-one-file — git-merge-indexで使用する標準のヘルパープログラム


Synopsis
********

     git merge-one-file


DESCRIPTION
***********

これは、 _git merge-index_ で行われた簡単なマージの後にマージを解決する
ために、 _git read-tree -m_ で使用する標準のヘルパープログラムです。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-merge-tree,  Up: Top

Name
****

git-merge-tree — インデックスに触れずに(without touching)3者間マージを表
示する


Synopsis
********

     git merge-tree <base-tree> <branch1> <branch2>


DESCRIPTION
***********

3つのツリーっぽいものを読み取り、些細なマージ結果と競合するステージを標
準出力に出力します。 これは、3者間の _git read-tree -m_ と似ていますが、
結果をインデックスに格納する代わりに、コマンドはエントリを標準出力に出力
します。

   これは、インデックスの外部でマージ結果を計算し、結果をインデックスに
戻すために、より高いレベルのスクリプトによって使用されることを意図してい
ます。 このため、コマンドからの出力では、 <branch1> ツリーに一致するエン
トリが省略されます。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-merge,  Up: Top

Name
****

git-merge — Join two or more development histories together


Synopsis
********

     git merge [-n] [–stat] [–no-commit] [–squash] [–[no-]edit]
             [–no-verify] [-s <strategy>] [-X <strategy-option>] [-S[<keyid>]]
             [–[no-]allow-unrelated-histories]
             [–[no-]rerere-autoupdate] [-m <msg>] [-F <file>] [<commit>…]
     git merge (–continue | –abort | –quit)


DESCRIPTION
***********

Incorporates changes from the named commits (since the time their
histories diverged from the current branch) into the current branch.
This command is used by _git pull_ to incorporate changes from another
repository and can be used by hand to merge changes from one branch into
another.

   Assume the following history exists and the current branch is
"‘master’":

               A---B---C topic
              /
         D---E---F---G master

   Then "‘git merge topic’" will replay the changes made on the ‘topic’
branch since it diverged from ‘master’ (i.e., ‘E’) until its current
commit (‘C’) on top of ‘master’, and record the result in a new commit
along with the names of the two parent commits and a log message from
the user describing the changes.

               A---B---C topic
              /         \
         D---E---F---G---H master

   The second syntax ("‘git merge --abort’") can only be run after the
merge has resulted in conflicts.  _git merge –abort_ will abort the
merge process and try to reconstruct the pre-merge state.  However, if
there were uncommitted changes when the merge started (and especially if
those changes were further modified after the merge was started), _git
merge –abort_ will in some cases be unable to reconstruct the original
(pre-merge) changes.  Therefore:

   *Warning*: Running _git merge_ with non-trivial uncommitted changes
is discouraged: while possible, it may leave you in a state that is hard
to back out of in the case of a conflict.

   The third syntax ("‘git merge --continue’") can only be run after the
merge has resulted in conflicts.


OPTIONS
*******

‘--commit’
‘--no-commit’
     Perform the merge and commit the result.  This option can be used
     to override –no-commit.

     With –no-commit perform the merge and stop just before creating a
     merge commit, to give the user a chance to inspect and further
     tweak the merge result before committing.

     Note that fast-forward updates do not create a merge commit and
     therefore there is no way to stop those merges with –no-commit.
     Thus, if you want to ensure your branch is not changed or updated
     by the merge command, use –no-ff with –no-commit.

‘--edit’
‘-e’
‘--no-edit’
     Invoke an editor before committing successful mechanical merge to
     further edit the auto-generated merge message, so that the user can
     explain and justify the merge.  The ‘--no-edit’ option can be used
     to accept the auto-generated message (this is generally
     discouraged).  The ‘--edit’ (or ‘-e’) option is still useful if you
     are giving a draft message with the ‘-m’ option from the command
     line and want to edit it in the editor.

     Older scripts may depend on the historical behaviour of not
     allowing the user to edit the merge log message.  They will see an
     editor opened when they run ‘git merge’.  To make it easier to
     adjust such scripts to the updated behaviour, the environment
     variable ‘GIT_MERGE_AUTOEDIT’ can be set to ‘no’ at the beginning
     of them.

‘--cleanup=<mode>’
     This option determines how the merge message will be cleaned up
     before committing.  See git-commit(1) for more details.  In
     addition, if the _<mode>_ is given a value of ‘scissors’, scissors
     will be appended to ‘MERGE_MSG’ before being passed on to the
     commit machinery in the case of a merge conflict.

‘--ff’
‘--no-ff’
‘--ff-only’
     Specifies how a merge is handled when the merged-in history is
     already a descendant of the current history.  ‘--ff’ is the default
     unless merging an annotated (and possibly signed) tag that is not
     stored in its natural place in the ‘refs/tags/’ hierarchy, in which
     case ‘--no-ff’ is assumed.

     With ‘--ff’, when possible resolve the merge as a fast-forward
     (only update the branch pointer to match the merged branch; do not
     create a merge commit).  When not possible (when the merged-in
     history is not a descendant of the current history), create a merge
     commit.

     With ‘--no-ff’, create a merge commit in all cases, even when the
     merge could instead be resolved as a fast-forward.

     With ‘--ff-only’, resolve the merge as a fast-forward when
     possible.  When not possible, refuse to merge and exit with a
     non-zero status.

‘-S[<keyid>]’
‘--gpg-sign[=<keyid>]’
‘--no-gpg-sign’
     GPG-sign the resulting merge commit.  The ‘keyid’ argument is
     optional and defaults to the committer identity; if specified, it
     must be stuck to the option without a space.  ‘--no-gpg-sign’ is
     useful to countermand both ‘commit.gpgSign’ configuration variable,
     and earlier ‘--gpg-sign’.

‘--log[=<n>]’
‘--no-log’
     In addition to branch names, populate the log message with one-line
     descriptions from at most <n> actual commits that are being merged.
     See also git-fmt-merge-msg(1).

     With –no-log do not list one-line descriptions from the actual
     commits being merged.

‘--signoff’
‘--no-signoff’
     コミットログメッセージの最後に、コミッターによる「Signed-off-by」ト
     レーラーを追加します。signoffの意味は、コミットしているプロジェクト
     によって異なります。たとえば、コミッターがプロジェクトのライセンス
     に基づいて作品を提出する権利を持っていることを証明したり、開発者の
     原産地証明書などの寄稿者の代表に同意したりする場合があります。
     (LinuxカーネルおよびGitプロジェクトで使用されるものについては、
     http：//developercertificate.orgを参照してください)。プロジェクトで
     signoffがどのように使用されるかを理解するには、貢献しているプロジェ
     クトのドキュメントまたはリーダーシップ(leadership)を参照してくださ
     い。

     ‘--no-signoff’ オプションを使用すると、コマンドラインで以前の
     ‘--signoff’ オプションを無効にすることができます。

‘--stat’
‘-n’
‘--no-stat’
     Show a diffstat at the end of the merge.  The diffstat is also
     controlled by the configuration option merge.stat.

     With -n or –no-stat do not show a diffstat at the end of the merge.

‘--squash’
‘--no-squash’
     Produce the working tree and index state as if a real merge
     happened (except for the merge information), but do not actually
     make a commit, move the ‘HEAD’, or record ‘$GIT_DIR/MERGE_HEAD’ (to
     cause the next ‘git commit’ command to create a merge commit).
     This allows you to create a single commit on top of the current
     branch whose effect is the same as merging another branch (or more
     in case of an octopus).

     With –no-squash perform the merge and commit the result.  This
     option can be used to override –squash.

     With –squash, –commit is not allowed, and will fail.

‘--no-verify’
     This option bypasses the pre-merge and commit-msg hooks.  See also
     githooks(5).

‘-s <strategy>’
‘--strategy=<strategy>’
     Use the given merge strategy; can be supplied more than once to
     specify them in the order they should be tried.  If there is no
     ‘-s’ option, a built-in list of strategies is used instead (‘ort’
     when merging a single head, ‘octopus’ otherwise).

‘-X <option>’
‘--strategy-option=<option>’
     Pass merge strategy specific option through to the merge strategy.

‘--verify-signatures’
‘--no-verify-signatures’
     Verify that the tip commit of the side branch being merged is
     signed with a valid key, i.e.  a key that has a valid uid: in the
     default trust model, this means the signing key has been signed by
     a trusted key.  If the tip commit of the side branch is not signed
     with a valid key, the merge is aborted.

‘--summary’
‘--no-summary’
     Synonyms to –stat and –no-stat; these are deprecated and will be
     removed in the future.

‘-q’
‘--quiet’
     Operate quietly.  Implies –no-progress.

‘-v’
‘--verbose’
     Be verbose.

‘--progress’
‘--no-progress’
     Turn progress on/off explicitly.  If neither is specified, progress
     is shown if standard error is connected to a terminal.  Note that
     not all merge strategies may support progress reporting.

‘--autostash’
‘--no-autostash’
     Automatically create a temporary stash entry before the operation
     begins, record it in the special ref ‘MERGE_AUTOSTASH’ and apply it
     after the operation ends.  This means that you can run the
     operation on a dirty worktree.  However, use with care: the final
     stash application after a successful merge might result in
     non-trivial conflicts.

‘--allow-unrelated-histories’
     By default, ‘git merge’ command refuses to merge histories that do
     not share a common ancestor.  This option can be used to override
     this safety when merging histories of two projects that started
     their lives independently.  As that is a very rare occasion, no
     configuration variable to enable this by default exists and will
     not be added.

‘-m <msg>’
     Set the commit message to be used for the merge commit (in case one
     is created).

     If ‘--log’ is specified, a shortlog of the commits being merged
     will be appended to the specified message.

     The _git fmt-merge-msg_ command can be used to give a good default
     for automated _git merge_ invocations.  The automated message can
     include the branch description.

‘-F <file>’
‘--file=<file>’
     Read the commit message to be used for the merge commit (in case
     one is created).

     If ‘--log’ is specified, a shortlog of the commits being merged
     will be appended to the specified message.

‘--rerere-autoupdate’
‘--no-rerere-autoupdate’
     Allow the rerere mechanism to update the index with the result of
     auto-conflict resolution if possible.

‘--overwrite-ignore’
‘--no-overwrite-ignore’
     Silently overwrite ignored files from the merge result.  This is
     the default behavior.  Use ‘--no-overwrite-ignore’ to abort.

‘--abort’
     Abort the current conflict resolution process, and try to
     reconstruct the pre-merge state.  If an autostash entry is present,
     apply it to the worktree.

     If there were uncommitted worktree changes present when the merge
     started, _git merge –abort_ will in some cases be unable to
     reconstruct these changes.  It is therefore recommended to always
     commit or stash your changes before running _git merge_.

     _git merge –abort_ is equivalent to _git reset –merge_ when
     ‘MERGE_HEAD’ is present unless ‘MERGE_AUTOSTASH’ is also present in
     which case _git merge –abort_ applies the stash entry to the
     worktree whereas _git reset –merge_ will save the stashed changes
     in the stash list.

‘--quit’
     Forget about the current merge in progress.  Leave the index and
     the working tree as-is.  If ‘MERGE_AUTOSTASH’ is present, the stash
     entry will be saved to the stash list.

‘--continue’
     After a _git merge_ stops due to conflicts you can conclude the
     merge by running _git merge –continue_ (see "HOW TO RESOLVE
     CONFLICTS" section below).

<commit>…
     Commits, usually other branch heads, to merge into our branch.
     Specifying more than one commit will create a merge with more than
     two parents (affectionately called an Octopus merge).

     If no commit is given from the command line, merge the
     remote-tracking branches that the current branch is configured to
     use as its upstream.  See also the configuration section of this
     manual page.

     When ‘FETCH_HEAD’ (and no other commit) is specified, the branches
     recorded in the ‘.git/FETCH_HEAD’ file by the previous invocation
     of ‘git fetch’ for merging are merged to the current branch.


PRE-MERGE CHECKS
****************

Before applying outside changes, you should get your own work in good
shape and committed locally, so it will not be clobbered if there are
conflicts.  See also git-stash(1).  _git pull_ and _git merge_ will stop
without doing anything when local uncommitted changes overlap with files
that _git pull_/_git merge_ may need to update.

   To avoid recording unrelated changes in the merge commit, _git pull_
and _git merge_ will also abort if there are any changes registered in
the index relative to the ‘HEAD’ commit.  (Special narrow exceptions to
this rule may exist depending on which merge strategy is in use, but
generally, the index must match HEAD.)

   If all named commits are already ancestors of ‘HEAD’, _git merge_
will exit early with the message "Already up to date."


FAST-FORWARD MERGE
******************

Often the current branch head is an ancestor of the named commit.  This
is the most common case especially when invoked from _git pull_: you are
tracking an upstream repository, you have committed no local changes,
and now you want to update to a newer upstream revision.  In this case,
a new commit is not needed to store the combined history; instead, the
‘HEAD’ (along with the index) is updated to point at the named commit,
without creating an extra merge commit.

   This behavior can be suppressed with the ‘--no-ff’ option.


TRUE MERGE
**********

Except in a fast-forward merge (see above), the branches to be merged
must be tied together by a merge commit that has both of them as its
parents.

   A merged version reconciling the changes from all branches to be
merged is committed, and your ‘HEAD’, index, and working tree are
updated to it.  It is possible to have modifications in the working tree
as long as they do not overlap; the update will preserve them.

   When it is not obvious how to reconcile the changes, the following
happens:

  1. The ‘HEAD’ pointer stays the same.

  2. The ‘MERGE_HEAD’ ref is set to point to the other branch head.

  3. Paths that merged cleanly are updated both in the index file and in
     your working tree.

  4. For conflicting paths, the index file records up to three versions:
     stage 1 stores the version from the common ancestor, stage 2 from
     ‘HEAD’, and stage 3 from ‘MERGE_HEAD’ (you can inspect the stages
     with ‘git ls-files -u’).  The working tree files contain the result
     of the "merge" program; i.e.  3-way merge results with familiar
     conflict markers ‘<<<’ ‘===’ ‘>>>’.

  5. No other changes are made.  In particular, the local modifications
     you had before you started merge will stay the same and the index
     entries for them stay as they were, i.e.  matching ‘HEAD’.

   If you tried a merge which resulted in complex conflicts and want to
start over, you can recover with ‘git merge --abort’.


MERGING TAG
***********

When merging an annotated (and possibly signed) tag, Git always creates
a merge commit even if a fast-forward merge is possible, and the commit
message template is prepared with the tag message.  Additionally, if the
tag is signed, the signature check is reported as a comment in the
message template.  See also git-tag(1).

   When you want to just integrate with the work leading to the commit
that happens to be tagged, e.g.  synchronizing with an upstream release
point, you may not want to make an unnecessary merge commit.

   In such a case, you can "unwrap" the tag yourself before feeding it
to ‘git merge’, or pass ‘--ff-only’ when you do not have any work on
your own.  e.g.

     git fetch origin
     git merge v1.2.3^0
     git merge --ff-only v1.2.3


HOW CONFLICTS ARE PRESENTED
***************************

During a merge, the working tree files are updated to reflect the result
of the merge.  Among the changes made to the common ancestor’s version,
non-overlapping ones (that is, you changed an area of the file while the
other side left that area intact, or vice versa) are incorporated in the
final result verbatim.  When both sides made changes to the same area,
however, Git cannot randomly pick one side over the other, and asks you
to resolve it by leaving what both sides did to that area.

   By default, Git uses the same style as the one used by the "merge"
program from the RCS suite to present such a conflicted hunk, like this:

     Here are lines that are either unchanged from the common
     ancestor, or cleanly resolved because only one side changed.
     <<<<<<< yours:sample.txt
     Conflict resolution is hard;
     let's go shopping.
     =======
     Git makes conflict resolution easy.
     >>>>>>> theirs:sample.txt
     And here is another line that is cleanly resolved or unmodified.

   The area where a pair of conflicting changes happened is marked with
markers ‘<<<<<<<’, ‘=======’, and ‘>>>>>>>’.  The part before the
‘=======’ is typically your side, and the part afterwards is typically
their side.

   The default format does not show what the original said in the
conflicting area.  You cannot tell how many lines are deleted and
replaced with Barbie’s remark on your side.  The only thing you can tell
is that your side wants to say it is hard and you’d prefer to go
shopping, while the other side wants to claim it is easy.

   An alternative style can be used by setting the "merge.conflictStyle"
configuration variable to "diff3".  In "diff3" style, the above conflict
may look like this:

     Here are lines that are either unchanged from the common
     ancestor, or cleanly resolved because only one side changed.
     <<<<<<< yours:sample.txt
     Conflict resolution is hard;
     let's go shopping.
     |||||||
     Conflict resolution is hard.
     =======
     Git makes conflict resolution easy.
     >>>>>>> theirs:sample.txt
     And here is another line that is cleanly resolved or unmodified.

   In addition to the ‘<<<<<<<’, ‘=======’, and ‘>>>>>>>’ markers, it
uses another ‘|||||||’ marker that is followed by the original text.
You can tell that the original just stated a fact, and your side simply
gave in to that statement and gave up, while the other side tried to
have a more positive attitude.  You can sometimes come up with a better
resolution by viewing the original.


HOW TO RESOLVE CONFLICTS
************************

After seeing a conflict, you can do two things:

   • Decide not to merge.  The only clean-ups you need are to reset the
     index file to the ‘HEAD’ commit to reverse 2.  and to clean up
     working tree changes made by 2.  and 3.; ‘git merge --abort’ can be
     used for this.

   • Resolve the conflicts.  Git will mark the conflicts in the working
     tree.  Edit the files into shape and _git add_ them to the index.
     Use _git commit_ or _git merge –continue_ to seal the deal.  The
     latter command checks whether there is a (interrupted) merge in
     progress before calling _git commit_.

   You can work through the conflict with a number of tools:

   • Use a mergetool.  ‘git mergetool’ to launch a graphical mergetool
     which will work you through the merge.

   • Look at the diffs.  ‘git diff’ will show a three-way diff,
     highlighting changes from both the ‘HEAD’ and ‘MERGE_HEAD’
     versions.

   • Look at the diffs from each branch.  ‘git log --merge -p <path>’
     will show diffs first for the ‘HEAD’ version and then the
     ‘MERGE_HEAD’ version.

   • Look at the originals.  ‘git show :1:filename’ shows the common
     ancestor, ‘git show :2:filename’ shows the ‘HEAD’ version, and ‘git
     show :3:filename’ shows the ‘MERGE_HEAD’ version.


EXAMPLES
********

   • Merge branches ‘fixes’ and ‘enhancements’ on top of the current
     branch, making an octopus merge:

          $ git merge fixes enhancements

   • Merge branch ‘obsolete’ into the current branch, using ‘ours’ merge
     strategy:

          $ git merge -s ours obsolete

   • Merge branch ‘maint’ into the current branch, but do not make a new
     commit automatically:

          $ git merge --no-commit maint

     This can be used when you want to include further changes to the
     merge, or want to write your own merge commit message.

     You should refrain from abusing this option to sneak substantial
     changes into a merge commit.  Small fixups like bumping
     release/version name would be acceptable.


MERGE STRATEGIES
****************

The merge mechanism (‘git merge’ and ‘git pull’ commands) allows the
backend _merge strategies_ to be chosen with ‘-s’ option.  Some
strategies can also take their own options, which can be passed by
giving ‘-X<option>’ arguments to ‘git merge’ and/or ‘git pull’.

ort
     This is the default merge strategy when pulling or merging one
     branch.  This strategy can only resolve two heads using a 3-way
     merge algorithm.  When there is more than one common ancestor that
     can be used for 3-way merge, it creates a merged tree of the common
     ancestors and uses that as the reference tree for the 3-way merge.
     This has been reported to result in fewer merge conflicts without
     causing mismerges by tests done on actual merge commits taken from
     Linux 2.6 kernel development history.  Additionally this strategy
     can detect and handle merges involving renames.  It does not make
     use of detected copies.  The name for this algorithm is an acronym
     ("Ostensibly Recursive’s Twin") and came from the fact that it was
     written as a replacement for the previous default algorithm,
     ‘recursive’.

     The _ort_ strategy can take the following options:

     ours
          This option forces conflicting hunks to be auto-resolved
          cleanly by favoring _our_ version.  Changes from the other
          tree that do not conflict with our side are reflected in the
          merge result.  For a binary file, the entire contents are
          taken from our side.

          This should not be confused with the _ours_ merge strategy,
          which does not even look at what the other tree contains at
          all.  It discards everything the other tree did, declaring
          _our_ history contains all that happened in it.

     theirs
          This is the opposite of _ours_; note that, unlike _ours_,
          there is no _theirs_ merge strategy to confuse this merge
          option with.

     ignore-space-change
     ignore-all-space
     ignore-space-at-eol
     ignore-cr-at-eol
          Treats lines with the indicated type of whitespace change as
          unchanged for the sake of a three-way merge.  Whitespace
          changes mixed with other changes to a line are not ignored.
          See also git-diff(1) ‘-b’, ‘-w’, ‘--ignore-space-at-eol’, and
          ‘--ignore-cr-at-eol’.

             • If _their_ version only introduces whitespace changes to
               a line, _our_ version is used;

             • If _our_ version introduces whitespace changes but
               _their_ version includes a substantial change, _their_
               version is used;

             • Otherwise, the merge proceeds in the usual way.

     renormalize
          This runs a virtual check-out and check-in of all three stages
          of a file when resolving a three-way merge.  This option is
          meant to be used when merging branches with different clean
          filters or end-of-line normalization rules.  See "Merging
          branches with differing checkin/checkout attributes" in
          gitattributes(5) for details.

     no-renormalize
          Disables the ‘renormalize’ option.  This overrides the
          ‘merge.renormalize’ configuration variable.

     find-renames[=<n>]
          Turn on rename detection, optionally setting the similarity
          threshold.  This is the default.  This overrides the
          _merge.renames_ configuration variable.  See also git-diff(1)
          ‘--find-renames’.

     rename-threshold=<n>
          Deprecated synonym for ‘find-renames=<n>’.

     subtree[=<path>]
          This option is a more advanced form of _subtree_ strategy,
          where the strategy makes a guess on how two trees must be
          shifted to match with each other when merging.  Instead, the
          specified path is prefixed (or stripped from the beginning) to
          make the shape of two trees to match.

recursive
     This can only resolve two heads using a 3-way merge algorithm.
     When there is more than one common ancestor that can be used for
     3-way merge, it creates a merged tree of the common ancestors and
     uses that as the reference tree for the 3-way merge.  This has been
     reported to result in fewer merge conflicts without causing
     mismerges by tests done on actual merge commits taken from Linux
     2.6 kernel development history.  Additionally this can detect and
     handle merges involving renames.  It does not make use of detected
     copies.  This was the default strategy for resolving two heads from
     Git v0.99.9k until v2.33.0.

     The _recursive_ strategy takes the same options as _ort_.  However,
     there are three additional options that _ort_ ignores (not
     documented above) that are potentially useful with the _recursive_
     strategy:

     patience
          Deprecated synonym for ‘diff-algorithm=patience’.

     diff-algorithm=[patience|minimal|histogram|myers]
          Use a different diff algorithm while merging, which can help
          avoid mismerges that occur due to unimportant matching lines
          (such as braces from distinct functions).  See also
          git-diff(1) ‘--diff-algorithm’.  Note that ‘ort’ specifically
          uses ‘diff-algorithm=histogram’, while ‘recursive’ defaults to
          the ‘diff.algorithm’ config setting.

     no-renames
          Turn off rename detection.  This overrides the ‘merge.renames’
          configuration variable.  See also git-diff(1) ‘--no-renames’.

resolve
     This can only resolve two heads (i.e.  the current branch and
     another branch you pulled from) using a 3-way merge algorithm.  It
     tries to carefully detect criss-cross merge ambiguities.  It does
     not handle renames.

octopus
     This resolves cases with more than two heads, but refuses to do a
     complex merge that needs manual resolution.  It is primarily meant
     to be used for bundling topic branch heads together.  This is the
     default merge strategy when pulling or merging more than one
     branch.

ours
     This resolves any number of heads, but the resulting tree of the
     merge is always that of the current branch head, effectively
     ignoring all changes from all other branches.  It is meant to be
     used to supersede old development history of side branches.  Note
     that this is different from the -Xours option to the _recursive_
     merge strategy.

subtree
     This is a modified ‘ort’ strategy.  When merging trees A and B, if
     B corresponds to a subtree of A, B is first adjusted to match the
     tree structure of A, instead of reading the trees at the same
     level.  This adjustment is also done to the common ancestor tree.

   With the strategies that use 3-way merge (including the default,
_ort_), if a change is made on both branches, but later reverted on one
of the branches, that change will be present in the merged result; some
people find this behavior confusing.  It occurs because only the heads
and the merge base are considered when performing a merge, not the
individual commits.  The merge algorithm therefore considers the
reverted change as no change at all, and substitutes the changed version
instead.


CONFIGURATION
*************

merge.conflictStyle
     Specify the style in which conflicted hunks are written out to
     working tree files upon merge.  The default is "merge", which shows
     a ‘<<<<<<<’ conflict marker, changes made by one side, a ‘=======’
     marker, changes made by the other side, and then a ‘>>>>>>>’
     marker.  An alternate style, "diff3", adds a ‘|||||||’ marker and
     the original text before the ‘=======’ marker.

merge.defaultToUpstream
     If merge is called without any commit argument, merge the upstream
     branches configured for the current branch by using their last
     observed values stored in their remote-tracking branches.  The
     values of the ‘branch.<current branch>.merge’ that name the
     branches at the remote named by ‘branch.<current branch>.remote’
     are consulted, and then they are mapped via ‘remote.<remote>.fetch’
     to their corresponding remote-tracking branches, and the tips of
     these tracking branches are merged.  Defaults to true.

merge.ff
     By default, Git does not create an extra merge commit when merging
     a commit that is a descendant of the current commit.  Instead, the
     tip of the current branch is fast-forwarded.  When set to ‘false’,
     this variable tells Git to create an extra merge commit in such a
     case (equivalent to giving the ‘--no-ff’ option from the command
     line).  When set to ‘only’, only such fast-forward merges are
     allowed (equivalent to giving the ‘--ff-only’ option from the
     command line).

merge.verifySignatures
     If true, this is equivalent to the –verify-signatures command line
     option.  See git-merge(1) for details.

merge.branchdesc
     ブランチ名に加えて、それらに関連付けられたブランチの説明テキストを
     ログメッセージに入力します。デフォルトはfalseです。

merge.log
     ブランチ名に加えて、マージされる実際のコミットからの最大「指定の数
     」の親コミットの1行説明をログメッセージに入力します。デフォルトは
     falseで、trueは20の同義語です。

merge.suppressDest
     統合ブランチの名前に一致するグロブをこの複数値の構成変数
     (multi-valued configuration variable)に追加することにより、これらの
     統合ブランチへのマージに対して計算されるデフォルトのマージメッセー
     ジは、タイトルから「into <branch name>」を省略します。

     空の値を持つ要素を使用して、以前の構成エントリから蓄積されたグロブ
     のリストをクリアできます。 ‘merge.suppressDest’ 変数が定義されてい
     ない場合、下位互換性のためにデフォルト値の ‘master’ が使用されます
     。

merge.renameLimit
     The number of files to consider in the exhaustive portion of rename
     detection during a merge.  If not specified, defaults to the value
     of diff.renameLimit.  If neither merge.renameLimit nor
     diff.renameLimit are specified, currently defaults to 7000.  This
     setting has no effect if rename detection is turned off.

merge.renames
     Whether Git detects renames.  If set to "false", rename detection
     is disabled.  If set to "true", basic rename detection is enabled.
     Defaults to the value of diff.renames.

merge.directoryRenames
     Whether Git detects directory renames, affecting what happens at
     merge time to new files added to a directory on one side of history
     when that directory was renamed on the other side of history.  If
     merge.directoryRenames is set to "false", directory rename
     detection is disabled, meaning that such new files will be left
     behind in the old directory.  If set to "true", directory rename
     detection is enabled, meaning that such new files will be moved
     into the new directory.  If set to "conflict", a conflict will be
     reported for such paths.  If merge.renames is false,
     merge.directoryRenames is ignored and treated as false.  Defaults
     to "conflict".

merge.renormalize
     Tell Git that canonical representation of files in the repository
     has changed over time (e.g.  earlier commits record text files with
     CRLF line endings, but recent ones use LF line endings).  In such a
     repository, Git can convert the data recorded in commits to a
     canonical form before performing a merge to reduce unnecessary
     conflicts.  For more information, see section "Merging branches
     with differing checkin/checkout attributes" in gitattributes(5).

merge.stat
     Whether to print the diffstat between ORIG_HEAD and the merge
     result at the end of the merge.  True by default.

merge.autoStash
     When set to true, automatically create a temporary stash entry
     before the operation begins, and apply it after the operation ends.
     This means that you can run merge on a dirty worktree.  However,
     use with care: the final stash application after a successful merge
     might result in non-trivial conflicts.  This option can be
     overridden by the ‘--no-autostash’ and ‘--autostash’ options of
     git-merge(1).  Defaults to false.

merge.tool
     Controls which merge tool is used by git-mergetool(1).  The list
     below shows the valid built-in values.  Any other value is treated
     as a custom merge tool and requires that a corresponding
     mergetool.<tool>.cmd variable is defined.

merge.guitool
     Controls which merge tool is used by git-mergetool(1) when the
     -g/–gui flag is specified.  The list below shows the valid built-in
     values.  Any other value is treated as a custom merge tool and
     requires that a corresponding mergetool.<guitool>.cmd variable is
     defined.

        • araxis

        • bc

        • bc3

        • bc4

        • codecompare

        • deltawalker

        • diffmerge

        • diffuse

        • ecmerge

        • emerge

        • examdiff

        • guiffy

        • gvimdiff

        • gvimdiff1

        • gvimdiff2

        • gvimdiff3

        • kdiff3

        • meld

        • nvimdiff

        • nvimdiff1

        • nvimdiff2

        • nvimdiff3

        • opendiff

        • p4merge

        • smerge

        • tkdiff

        • tortoisemerge

        • vimdiff

        • vimdiff1

        • vimdiff2

        • vimdiff3

        • winmerge

        • xxdiff

merge.verbosity
     Controls the amount of output shown by the recursive merge
     strategy.  Level 0 outputs nothing except a final error message if
     conflicts were detected.  Level 1 outputs only conflicts, 2 outputs
     conflicts and file changes.  Level 5 and above outputs debugging
     information.  The default is level 2.  Can be overridden by the
     ‘GIT_MERGE_VERBOSITY’ environment variable.

merge.<driver>.name
     Defines a human-readable name for a custom low-level merge driver.
     See gitattributes(5) for details.

merge.<driver>.driver
     Defines the command that implements a custom low-level merge
     driver.  See gitattributes(5) for details.

merge.<driver>.recursive
     Names a low-level merge driver to be used when performing an
     internal merge between common ancestors.  See gitattributes(5) for
     details.

branch.<name>.mergeOptions
     Sets default options for merging into branch <name>.  The syntax
     and supported options are the same as those of _git merge_, but
     option values containing whitespace characters are currently not
     supported.


SEE ALSO
********

git-fmt-merge-msg(1), git-pull(1), gitattributes(5), git-reset(1),
git-diff(1), git-ls-files(1), git-add(1), git-rm(1), git-mergetool(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-mergetool--lib,  Up: Top

Name
****

git-mergetool–lib — 共通 Gitマージツール シェル スクリプレット群


Synopsis
********

     TOOL_MODE=(diff|merge) . "$(git –exec-path)/git-mergetool–lib"


DESCRIPTION
***********

これは、全くもってエンドユーザー向けコマンドではありません。この文書は、
磁器風のスクリプトを研究している、および/または 新しいスクリプトを書いて
いる人々を対象としています。

   _git-mergetool–lib_ スクリプトレットは、Gitマージツールを操作するため
の関数を設定するために、他のシェルスクリプトから( ‘.‘を使用して)呼び出さ
れる(source)されるように設計されています。

   _git-mergetool–lib_ を(sourceで)実行する前に、スクリプトで
‘TOOL_MODE’ を設定して、以下にリストされている関数の操作モードを定義する
必要があります。 _diff_ と _merge_ は有効な値です。


FUNCTIONS
*********

get_merge_tool
     マージツールを返します。推測されたマージツールを返した場合、戻りコ
     ードは1です。それ以外の場合は0です。適切なGUIツールを検索するために
     、 _$GIT_MERGETOOL_GUI_ を _true_ に設定できます。

get_merge_tool_cmd
     マージツールのカスタムコマンドを返します。

get_merge_tool_path
     マージツールのカスタムパスを返します。

initialize_merge_tool
     マージツール固有の関数をスコープに入れて、使用またはオーバーライド
     できるようにします。

run_merge_tool
     ツール名と true/false フラグを指定してマージツールを起動し、マージ
     ベースが存在するかどうかを示します。 _$MERGED_ ・ _$LOCAL_ ・
     _$REMOTE_ ・ _$BASE_ は、マージツールで使用するために定義する必要が
     あります。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-mergetool,  Up: Top

Name
****

git-mergetool — マージ競合解決ツールを実行して、マージ競合を解決します


Synopsis
********

     git mergetool [–tool=<tool>] [-y | –[no-]prompt] [<file>…]


DESCRIPTION
***********

‘git mergetool’ を使用して、いくつかのマージユーティリティの1つを実行し
、マージの競合を解決します。通常、 ‘git merge’ の後に実行されます。

   1つ以上の <file> パラメーターが指定されている場合、マージツールプログ
ラムが実行され、その各ファイルの違いが解決されます(競合のないものはスキ
ップされます)。ディレクトリを指定すると、そのパスにあるすべての未解決の
ファイルが含まれます。ファイル名が指定されていない場合、 ‘git mergetool’
は、マージで競合するすべてのファイルに対してマージツールプログラムを実行
します。


OPTIONS
*******

‘-t <tool>’
‘--tool=<tool>’
     <tool> で指定したマージ解決プログラムを使用します。 有効な値には
     emerge、gvimdiff、kdiff3、meld、vimdiff、tortoisemerge が含まれます
     。有効な <tool> 設定のリストについては、 ‘git mergetool
     --tool-help’ を実行してください。

     マージ解決プログラムが指定されていない場合、 ‘git mergetool’ は構成
     変数 ‘merge.tool’ を使用します。 構成変数 ‘merge.tool’ が設定されて
     いない場合、 _git mergetool_ は適切なデフォルトを選択します。

     あなたは構成変数 ‘mergetool.<tool>.path’ を設定することにより、ツー
     ルへのフルパスを明示的に指定できます。たとえば、
     ‘mergetool.kdiff3.path’ を設定することにより、kdiff3への絶対パスを
     構成できます。それ以外の場合、 _git mergetool_ はツールがPATHで使用
     可能であると想定します。

     既知のマージツールプログラムの1つを実行する代わりに、構成変数
     ‘mergetool.<tool>.cmd’ で呼び出すコマンドラインを指定することにより
     、 _git mergetool_ をカスタマイズして代替プログラムを実行できます。

     ( ‘-t’ または ‘--tool’ または ‘merge.tool’ 構成変数のいずれかを介し
     て) ‘git mergetool’ をこのツールで呼び出すと、構成されたコマンドラ
     インが呼び出され、 ‘$BASE’ がマージの共通ベースを含む一時ファイルの
     名前に設定され、使用可能な場合、 ‘$LOCAL’ は現在のブランチのファイ
     ルの内容を含む一時ファイルの名前に設定され、 ‘$REMOTE’ はマージされ
     るファイルの内容を含む一時ファイルの名前に設定され、 ‘$REMOTE’ はマ
     ージされるファイルの内容を含む一時ファイルの名前に設定されます。

     カスタムマージツールがその終了コードでマージ解決の成功を正確に示し
     ている場合、構成変数 ‘mergetool.<tool>.trustExitCode’ を ‘true’ に
     設定できます。それ以外の場合、 ‘git mergetool’ は、カスタムツールが
     終了した後、解決の成功を示すようにユーザーに促します。

‘--tool-help’
     ‘--tool’ で使用できるマージツールのリストを出力します。

‘-y’
‘--no-prompt’
     マージ解決プログラムを呼び出す前にプロンプトを表示しないでください
     。これは、マージ解決プログラムが ‘--tool’ オプションまたは
     ‘merge.tool’ 構成変数で明示的に指定されている場合のデフォルトです。

‘--prompt’
     マージ解決プログラムを呼び出す前にプロンプトを表示して、ユーザーに
     パス(path)をスキップする機会を与えます。

‘-g’
‘--gui’
     ‘git-mergetool’ が ‘-g’ または ‘--gui’ オプションを伴って呼び出され
     ると、デフォルトのマージツールは ‘merge.tool’ ではなく設定された
     ‘merge.guitool’ 変数から読み取られます。 ‘merge.guitool’ が設定され
     ていない場合、 ‘merge.tool’ で構成されたツールにフォールバックしま
     す。

‘--no-gui’
     これにより、以前の ‘-g’ または ‘--gui’ 設定が上書きされ、デフォルト
     のマージツールは構成された ‘merge.tool’ 変数から読み取られます。

‘-O<orderfile>’
     <orderfile> で指定された順序でファイルを処理します。これには、1行に
     1つのシェルグロブパターンがあります。 これは ‘diff.orderFile’ 構成
     変数をオーバーライドします(git-config(1) を参照)。 ‘diff.orderFile’
     をキャンセルするには、 ‘-O/dev/null’ を使用します。


CONFIGURATION
*************

mergetool.<tool>.path
     Override the path for the given tool.  This is useful in case your
     tool is not in the PATH.

mergetool.<tool>.cmd
     Specify the command to invoke the specified merge tool.  The
     specified command is evaluated in shell with the following
     variables available: _BASE_ is the name of a temporary file
     containing the common base of the files to be merged, if available;
     _LOCAL_ is the name of a temporary file containing the contents of
     the file on the current branch; _REMOTE_ is the name of a temporary
     file containing the contents of the file from the branch being
     merged; _MERGED_ contains the name of the file to which the merge
     tool should write the results of a successful merge.

mergetool.<tool>.hideResolved
     Allows the user to override the global ‘mergetool.hideResolved’
     value for a specific tool.  See ‘mergetool.hideResolved’ for the
     full description.

mergetool.<tool>.trustExitCode
     For a custom merge command, specify whether the exit code of the
     merge command can be used to determine whether the merge was
     successful.  If this is not set to true then the merge target file
     timestamp is checked and the merge assumed to have been successful
     if the file has been updated, otherwise the user is prompted to
     indicate the success of the merge.

mergetool.meld.hasOutput
     Older versions of ‘meld’ do not support the ‘--output’ option.  Git
     will attempt to detect whether ‘meld’ supports ‘--output’ by
     inspecting the output of ‘meld --help’.  Configuring
     ‘mergetool.meld.hasOutput’ will make Git skip these checks and use
     the configured value instead.  Setting ‘mergetool.meld.hasOutput’
     to ‘true’ tells Git to unconditionally use the ‘--output’ option,
     and ‘false’ avoids using ‘--output’.

mergetool.meld.useAutoMerge
     When the ‘--auto-merge’ is given, meld will merge all
     non-conflicting parts automatically, highlight the conflicting
     parts and wait for user decision.  Setting
     ‘mergetool.meld.useAutoMerge’ to ‘true’ tells Git to
     unconditionally use the ‘--auto-merge’ option with ‘meld’.  Setting
     this value to ‘auto’ makes git detect whether ‘--auto-merge’ is
     supported and will only use ‘--auto-merge’ when available.  A value
     of ‘false’ avoids using ‘--auto-merge’ altogether, and is the
     default value.

mergetool.hideResolved
     During a merge Git will automatically resolve as many conflicts as
     possible and write the _MERGED_ file containing conflict markers
     around any conflicts that it cannot resolve; _LOCAL_ and _REMOTE_
     normally represent the versions of the file from before Git’s
     conflict resolution.  This flag causes _LOCAL_ and _REMOTE_ to be
     overwriten so that only the unresolved conflicts are presented to
     the merge tool.  Can be configured per-tool via the
     ‘mergetool.<tool>.hideResolved’ configuration variable.  Defaults
     to ‘false’.

mergetool.keepBackup
     After performing a merge, the original file with conflict markers
     can be saved as a file with a ‘.orig’ extension.  If this variable
     is set to ‘false’ then this file is not preserved.  Defaults to
     ‘true’ (i.e.  keep the backup files).

mergetool.keepTemporaries
     When invoking a custom merge tool, Git uses a set of temporary
     files to pass to the tool.  If the tool returns an error and this
     variable is set to ‘true’, then these temporary files will be
     preserved, otherwise they will be removed after the tool has
     exited.  Defaults to ‘false’.

mergetool.writeToTemp
     Git writes temporary _BASE_, _LOCAL_, and _REMOTE_ versions of
     conflicting files in the worktree by default.  Git will attempt to
     use a temporary directory for these files when set ‘true’.
     Defaults to ‘false’.

mergetool.prompt
     Prompt before each invocation of the merge resolution program.


TEMPORARY FILES
***************

‘git mergetool’ は、マージの解決中に ‘*.orig’ バックアップファイルを作成
します。これらは、ファイルがマージされ、その ‘git mergetool’ セッション
が完了したら安全に削除できます。

   ‘mergetool.keepBackup’ 構成変数を ‘false’ に設定すると、ファイルが正
常にマージされたときに、 ‘git mergetool’ がバックアップを自動的に削除し
ます。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-mktag,  Up: Top

Name
****

git-mktag — 追加の検証(extra validation)でタグオブジェクトを作成します


Synopsis
********

     git mktag


DESCRIPTION
***********

標準入力でタグの内容を読み取り、タグオブジェクトを作成します。 出力は、
新しいタグの <object> IDです。

   このコマンドは、 git-hash-object(1) を ‘-t tag -w --stdin’ オプション
で呼び出すのとほとんど同じです。例:以下は両方とも、 ‘my-tag’ ファイル中
からタグの記述を見つけ、見つけたタグの記述からをタグオブジェクトを作成し
て書き込みます。

     git mktag <my-tag
     git hash-object -t tag -w --stdin <my-tag

   git-hash-object(1) の違いは、タグが git-fsck(1) チェックに合格しない
場合、タグを書き込む前にmktagが停止することです。

   mktagで実行される「fsck」チェックは、すべての ‘fsck.<msg-id>’ メッセ
ージが警告からエラーに昇格されるという点で git-fsck(1) がデフォルトで実
行するものよりも厳密(strict)です(たとえば、tagger行の欠落はエラーです)。

   オブジェクトの余分なヘッダーもmktagではエラーになりますが、
git-fsck(1) では無視されます。この追加のチェックは、適切な
‘fsck.<msg-id>’ 変数を設定することでオフにできます:

     git -c fsck.extraHeaderEntry=ignore mktag <my-tag-with-headers


OPTIONS
*******

‘--strict’
     デフォルトでは、mktagは git-fsck(1) の ‘--strict’ モードに相当する
     ものをオンにします。無効にするには、 ‘--no-strict’ を使用します。


Tag Format
**********

このコマンドの標準入力に供給されるタグ署名ファイル(tag signature file)は
、非常に単純な固定形式です。それは以下の4行からなります。

     object <hash>
     type <typename>
     tag <tagname>
     tagger <tagger>

   この後ろにいくつかのオプションの自由形式のメッセージが続きます(古い
Gitによって作成された一部のタグには ‘tagger’ 行がない場合があります)。メ
ッセージが存在する場合は、ヘッダーとは空白行で区切られます。メッセージ部
分には、Git自体は気にしない署名が含まれている場合がありますが、それは
gpgで確認できます。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-mktree,  Up: Top

Name
****

git-mktree — ls-tree形式のテキストからツリーオブジェクトを構築する


Synopsis
********

     git mktree [-z] [–missing] [–batch]


DESCRIPTION
***********

非再帰的な ‘ls-tree’ 出力形式で標準入力を読み取り、ツリーオブジェクトを
作成します。ツリーエントリの順序はmktreeによって正規化されるため、入力を
事前に並べ替える必要はありません。構築されたツリーオブジェクトのオブジェ
クト名が標準出力に書き出されます。


OPTIONS
*******

‘-z’
     通常の ls-tree 出力形式の代わりに、(行終端がNULLである) ‘ls-tree
     -z’ 出力形式を読み取ります。

‘--missing’
     欠落しているオブジェクトを許可します。 (このオプションなしでの)デフ
     ォルトの動作では、各ツリーエントリのSHA1が、存在するオブジェクトを
     識別していることを確認します。なお、このオプションは、常に欠落して
     いることが許可されている gitlink エントリ(別名「サブモジュール」)の
     処理には影響しません。

‘--batch’
     終了せずに、複数のツリーオブジェクトの構築をする事を許可します。入
     力の各ツリーは、空白行1行で区切られています。最後の改行はオプション
     です。注意: ‘-z’ オプションを使用すると、行はNUL終端になります。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-multi-pack-index,  Up: Top

Name
****

git-multi-pack-index — multi-pack-indexを書き出し・検証します


Synopsis
********

     git multi-pack-index [–object-dir=<dir>] [–[no-]progress]
             [–preferred-pack=<pack>] [–[no-]bitmap] <subcommand>


DESCRIPTION
***********

multi-pack-index (MIDX) ファイルを書き出し・検証します。


OPTIONS
*******

‘--object-dir=<dir>’
     Gitオブジェクトの場所として、指定されたディレクトリを使用します。 現
     在のMIDXファイルについては ‘<dir>/packs/multi-pack-index’ をチェッ
     クし、インデックスを作成するパックファイルについては ‘<dir>/packs’
     をチェックします。

     ‘<dir>’ は、現在のリポジトリの代替(alternate)である必要があります。

‘--[no-]progress’
     進行状況を明示的にオン/オフにします。どちらも指定されていない場合、
     標準エラーが端末に接続されていれば進行状況が表示されます。

   以下のサブコマンドを使用できます:

write
     新しいMIDXファイルを書き込みます。 ‘write’ サブコマンドでは、以下の
     オプションを使用できます:

     ‘--preferred-pack=<pack>’
          オプションで、複数のパックに同じオブジェクトが含まれている場合
          に使用されるタイブレークパッキング(tie-breaking pack)を指定し
          ます。 ‘<pack>’ には少なくとも1つのオブジェクトが含まれている
          必要があります。与えられていない場合、mtimeが最も低いパックを
          優先して採用(ties are broken)します。

     ‘--[no-]bitmap’
          マルチパックビットマップ(multi-pack bitmap)を書き込むかどうか
          を制御します。

verify
     MIDXファイルの内容を検証(verify)します。

expire
     MIDXファイルによって追跡されているが、MIDXによって参照されているオ
     ブジェクトがないパックファイルを削除します。その後、MIDXファイルを
     書き直して、これらのパックファイルへのすべての参照を削除します。

repack
     マルチパックインデックス(multi-pack-index)によって参照される小さな
     パックファイル(pack-files)にオブジェクトを含む新しいパックファイル
     を作成します。 ‘--batch-size=<size>’ 引数で指定されたサイズがゼロの
     場合、マルチパックインデックスによって参照されるすべてのオブジェク
     トを含むパックを作成します。ゼロ以外のバッチサイズの場合は、パック
     を古いものから新しいものへと調べてパックファイルを選択します。マル
     チパックインデックスによって参照されるパック内のオブジェクトの数を
     カウントすることにより、「予想サイズ」を計算します。次に、予想サイ
     ズをパック内のオブジェクトの総数で割り、パックサイズを掛けます。パ
     ックのセットが少なくともバッチサイズの合計予想サイズになるまで、ま
     たはすべてのパックファイルが考慮されるまで、予想サイズがバッチサイ
     ズよりも小さいパックを選択します。パックファイルが1つだけ選択されて
     いる場合は、何もしません。 新しいパックファイルが作成された場合は、
     マルチパックインデックスを書き直して(rewrite)、新しいパックファイル
     を参照します。後で ‘git multi-pack-index expire’ を実行すると、この
     バッチの一部であったパックファイルが削除されます。

     ‘repack.packKeptObjects’ が ‘false`の場合、 `.keep’ ファイルが関連
     付けられているパックファイルはバッチで再パックするために選択されま
     せん。


EXAMPLES
********

   • 現在の.gitフォルダーにpackfilesのMIDXファイルを書き込みます。

          $ git multi-pack-index write

   • 対応するビットマップを使用して、現在の ‘.git’ フォルダー内の
     packfilesのMIDXファイルを書き込みます。

          $ git multi-pack-index write --preferred-pack=<pack> --bitmap

   • 代替オブジェクトストア(alternate object store)にパックファイルの
     MIDXファイルを書き込みます。

          $ git multi-pack-index --object-dir <alt> write

   • 現在の ‘.git’ フォルダー内のpackfilesのMIDXファイルを検証(verify)し
     ます。

          $ git multi-pack-index verify


SEE ALSO
********

マルチパックインデックス機能の詳細については、 The Multi-Pack-Index
Design Document (technical/multi-pack-index.html) と The
Multi-Pack-Index Format (technical/pack-format.html) を参照してください
。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-mv,  Up: Top

Name
****

git-mv — ファイルまたはディレクトリまたはシンボリックリンクを移動
(move)または名前変更(rename)します


Synopsis
********

     git mv <options>… <args>…


DESCRIPTION
***********

ファイルまたはディレクトリまたはシンボリックリンクを移動または名前変更し
ます。

     git mv [-v] [-f] [-n] [-k] <source> <destination>
     git mv [-v] [-f] [-n] [-k] <source> ... <destination directory>

   最初の形式では、ファイル・シンボリックリンク・ディレクトリのいずれか
である必要がある <source> の名前を <destination> に変更します。2番目の形
式では、最後の引数は既存のディレクトリである必要があります。指定のソース
はこのディレクトリに移動されます。

   正常に完了するとインデックスは更新されますが、変更はコミットする必要
があります。


OPTIONS
*******

‘-f’
‘--force’
     ターゲットが存在する場合でも、ファイルの名前変更または移動を強制し
     ます

‘-k’
     エラー状態になる移動または名前変更をスキップします。ソースが存在せ
     ず、Gitによって制御されていない場合、または ‘-f’ が指定されていない
     限り、ソースが既存のファイルを上書きする場合、エラーが発生します。

‘-n’
‘--dry-run’
     何も操作しない。何が起こるかを示すだけです。

‘-v’
‘--verbose’
     移動するファイルの名前を報告します。


SUBMODULES
**********

gitfile(つまり、Gitバージョン1.7.8以降で複製された)を使用してサブモジュ
ールを移動すると、gitfileとcore.worktreeの設定が更新され、サブモジュール
が新しい場所で機能するようになります。また、 gitmodules(5) ファイルの
submodule.<name>.path 設定を更新し、そのファイルをステージングしようとし
ます( ‘-n’ が使用されている場合を除く)。


BUGS
****

スーパープロジェクトの更新により、入力されたサブモジュールが移動されるた
びに(たとえば、移動の前後でコミットを切り替える場合)、古いサブモジュール
のチェックアウトは古い場所に残り、空のディレクトリが新しい場所に表示され
ます。新しい場所にサブモジュールを再度入力するには、後で「git submodule
update」を実行する必要があります。古いディレクトリの削除は、gitfileを使
用している場合にのみ安全です。そうでなければ、サブモジュールの履歴も削除
されます。再帰的なサブモジュールの更新が実装されている場合、これらの手順
は廃止されるでしょう。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-name-rev,  Up: Top

Name
****

git-name-rev — 指定のrevのシンボリック名を検索します


Synopsis
********

     git name-rev [–tags] [–refs=<pattern>]
                    ( –all | –stdin | <commit-ish>… )


DESCRIPTION
***********

_gitrev-parse_ で解析可能な任意の形式で指定されたリビジョンの、人間にと
って読みやすい記号名を検索します。


OPTIONS
*******

‘--tags’
     ブランチ名は使用せず、コミットに名前を付けるためにタグのみを使用し
     ます

‘--refs=<pattern>’
     名前が特定のシェルパターンに一致するrefのみを使用します。 パターン
     は、ブランチ名、タグ名、または完全修飾ref名のいずれかです。複数回指
     定する場合は、指定したシェルパターンのいずれかに名前が一致する
     refsを使用します。 ‘--no-refs’ を使用して、既に指定済のrefパターン
     をクリアします。

‘--exclude=<pattern>’
     名前が特定のシェルパターンと一致するrefは使用しない。 パターンは、
     ブランチ名、タグ名、または完全修飾ref名のいずれかです。複数回指定さ
     れた場合、指定されたパターンのいずれかに一致するrefは除外されます。
     ‘--refs’ と一緒に使用すると、refは少なくとも1つの ‘--refs’ パターン
     に一致し、 ‘--exclude’ パターンに一致しない場合にのみ一致として使用
     されます。 ‘--no-exclude’ を使用して、除外パターンのリストをクリア
     します。

‘--all’
     すべてのrefから到達可能なすべてのコミットを一覧表示します

‘--stdin’
     16死ん40文字のSHA-1($hexとする)をすべて "$hex ($rev_name)" に置き換
     えて、stdinを変換します。 ‘--name-only’ と一緒に使用する場合は、
     "$rev_name" に置き換えて、 $hex を完全に省略します。スクリプトで使
     用することを目的としています。

‘--name-only’
     SHA-1と名前の両方を印刷する代わりに、名前のみを印刷します。
     ‘--tags’ を指定すると、通常のタグプレフィックス "tags/" も名前から
     省略され、 ‘git-describe‘の出力とより厳密に一致します。

‘--no-undefined’
     参照が未定義の場合、 ‘undefined’ を出力する代わりに、エラーコード
     != 0 で終了します。

‘--always’
     一意を保つように省略されたコミットオブジェクトをフォールバックとし
     て表示します。


EXAMPLES
********

コミットが与えられたら、そのローカルrefsとの相対的な位置を見つけます。 誰
かがその素晴らしいコミット 33db5f4d9027a10e477ccf054b2c1ab94f74c85a につ
いてあなたに述べたとしましょう。もちろん、あなたはそのコミットを調べます
が、そこでは何が起こったのかを教えてくれるだけで、文脈は教えてくれません
。

   _git name-rev_ に入力します:

     % git name-rev 33db5f4d9027a10e477ccf054b2c1ab94f74c85a
     33db5f4d9027a10e477ccf054b2c1ab94f74c85a tags/v0.99~940

   あなたは今や、v0.99より前に940のリビジョンが発生したことが分かりまし
たね。

   別の方法:

     % git log | git name-rev --stdin


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-notes,  Up: Top

Name
****

git-notes — Add or inspect object notes


Synopsis
********

     git notes [list [<object>]]
     git notes add [-f] [–allow-empty] [-F <file> | -m <msg> | (-c | -C) <object>] [<object>]
     git notes copy [-f] ( –stdin | <from-object> [<to-object>] )
     git notes append [–allow-empty] [-F <file> | -m <msg> | (-c | -C) <object>] [<object>]
     git notes edit [–allow-empty] [<object>]
     git notes show [<object>]
     git notes merge [-v | -q] [-s <strategy> ] <notes-ref>
     git notes merge –commit [-v | -q]
     git notes merge –abort [-v | -q]
     git notes remove [–ignore-missing] [–stdin] [<object>…]
     git notes prune [-n] [-v]
     git notes get-ref


DESCRIPTION
***********

Adds, removes, or reads notes attached to objects, without touching the
objects themselves.

   By default, notes are saved to and read from ‘refs/notes/commits’,
but this default can be overridden.  See the OPTIONS, CONFIGURATION, and
ENVIRONMENT sections below.  If this ref does not exist, it will be
quietly created when it is first needed to store a note.

   A typical use of notes is to supplement a commit message without
changing the commit itself.  Notes can be shown by _git log_ along with
the original commit message.  To distinguish these notes from the
message stored in the commit object, the notes are indented like the
message, after an unindented line saying "Notes (<refname>):" (or
"Notes:" for ‘refs/notes/commits’).

   Notes can also be added to patches prepared with ‘git format-patch’
by using the ‘--notes’ option.  Such notes are added as a patch
commentary after a three dash separator line.

   To change which notes are shown by _git log_, see the
"notes.displayRef" configuration in git-log(1).

   See the "notes.rewrite.<command>" configuration for a way to carry
notes across commands that rewrite commits.


SUBCOMMANDS
***********

list
     List the notes object for a given object.  If no object is given,
     show a list of all note objects and the objects they annotate (in
     the format "<note object> <annotated object>").  This is the
     default subcommand if no subcommand is given.

add
     Add notes for a given object (defaults to HEAD). Abort if the
     object already has notes (use ‘-f’ to overwrite existing notes).
     However, if you’re using ‘add’ interactively (using an editor to
     supply the notes contents), then - instead of aborting - the
     existing notes will be opened in the editor (like the ‘edit’
     subcommand).

copy
     Copy the notes for the first object onto the second object
     (defaults to HEAD). Abort if the second object already has notes,
     or if the first object has none (use -f to overwrite existing notes
     to the second object).  This subcommand is equivalent to: ‘git
     notes add [-f] -C $(git notes list <from-object>) <to-object>’

     In ‘--stdin’ mode, take lines in the format

          <from-object> SP <to-object> [ SP <rest> ] LF

     on standard input, and copy the notes from each <from-object> to
     its corresponding <to-object>.  (The optional ‘<rest>’ is ignored
     so that the command can read the input given to the ‘post-rewrite’
     hook.)

append
     Append to the notes of an existing object (defaults to HEAD).
     Creates a new notes object if needed.

edit
     Edit the notes for a given object (defaults to HEAD).

show
     Show the notes for a given object (defaults to HEAD).

merge
     Merge the given notes ref into the current notes ref.  This will
     try to merge the changes made by the given notes ref (called
     "remote") since the merge-base (if any) into the current notes ref
     (called "local").

     If conflicts arise and a strategy for automatically resolving
     conflicting notes (see the "NOTES MERGE STRATEGIES" section) is not
     given, the "manual" resolver is used.  This resolver checks out the
     conflicting notes in a special worktree
     (‘.git/NOTES_MERGE_WORKTREE’), and instructs the user to manually
     resolve the conflicts there.  When done, the user can either
     finalize the merge with _git notes merge –commit_, or abort the
     merge with _git notes merge –abort_.

remove
     Remove the notes for given objects (defaults to HEAD). When giving
     zero or one object from the command line, this is equivalent to
     specifying an empty note message to the ‘edit’ subcommand.

prune
     Remove all notes for non-existing/unreachable objects.

get-ref
     Print the current notes ref.  This provides an easy way to retrieve
     the current notes ref (e.g.  from scripts).


OPTIONS
*******

‘-f’
‘--force’
     When adding notes to an object that already has notes, overwrite
     the existing notes (instead of aborting).

‘-m <msg>’
‘--message=<msg>’
     Use the given note message (instead of prompting).  If multiple
     ‘-m’ options are given, their values are concatenated as separate
     paragraphs.  Lines starting with ‘#’ and empty lines other than a
     single line between paragraphs will be stripped out.

‘-F <file>’
‘--file=<file>’
     Take the note message from the given file.  Use _-_ to read the
     note message from the standard input.  Lines starting with ‘#’ and
     empty lines other than a single line between paragraphs will be
     stripped out.

‘-C <object>’
‘--reuse-message=<object>’
     Take the given blob object (for example, another note) as the note
     message.  (Use ‘git notes copy <object>’ instead to copy notes
     between objects.)

‘-c <object>’
‘--reedit-message=<object>’
     Like _-C_, but with ‘-c’ the editor is invoked, so that the user
     can further edit the note message.

‘--allow-empty’
     Allow an empty note object to be stored.  The default behavior is
     to automatically remove empty notes.

‘--ref <ref>’
     Manipulate the notes tree in <ref>.  This overrides ‘GIT_NOTES_REF’
     and the "core.notesRef" configuration.  The ref specifies the full
     refname when it begins with ‘refs/notes/’; when it begins with
     ‘notes/’, ‘refs/’ and otherwise ‘refs/notes/’ is prefixed to form a
     full name of the ref.

‘--ignore-missing’
     Do not consider it an error to request removing notes from an
     object that does not have notes attached to it.

‘--stdin’
     Also read the object names to remove notes from the standard input
     (there is no reason you cannot combine this with object names from
     the command line).

‘-n’
‘--dry-run’
     Do not remove anything; just report the object names whose notes
     would be removed.

‘-s <strategy>’
‘--strategy=<strategy>’
     When merging notes, resolve notes conflicts using the given
     strategy.  The following strategies are recognized: "manual"
     (default), "ours", "theirs", "union" and "cat_sort_uniq".  This
     option overrides the "notes.mergeStrategy" configuration setting.
     See the "NOTES MERGE STRATEGIES" section below for more information
     on each notes merge strategy.

‘--commit’
     Finalize an in-progress _git notes merge_.  Use this option when
     you have resolved the conflicts that _git notes merge_ stored in
     .git/NOTES_MERGE_WORKTREE. This amends the partial merge commit
     created by _git notes merge_ (stored in .git/NOTES_MERGE_PARTIAL)
     by adding the notes in .git/NOTES_MERGE_WORKTREE. The notes ref
     stored in the .git/NOTES_MERGE_REF symref is updated to the
     resulting commit.

‘--abort’
     Abort/reset an in-progress _git notes merge_, i.e.  a notes merge
     with conflicts.  This simply removes all files related to the notes
     merge.

‘-q’
‘--quiet’
     When merging notes, operate quietly.

‘-v’
‘--verbose’
     When merging notes, be more verbose.  When pruning notes, report
     all object names whose notes are removed.


DISCUSSION
**********

Commit notes are blobs containing extra information about an object
(usually information to supplement a commit’s message).  These blobs are
taken from notes refs.  A notes ref is usually a branch which contains
"files" whose paths are the object names for the objects they describe,
with some directory separators included for performance reasons (1).

   Every notes change creates a new commit at the specified notes ref.
You can therefore inspect the history of the notes by invoking, e.g.,
‘git log -p notes/commits’.  Currently the commit message only records
which operation triggered the update, and the commit authorship is
determined according to the usual rules (see git-commit(1)).  These
details may change in the future.

   It is also permitted for a notes ref to point directly to a tree
object, in which case the history of the notes can be read with ‘git log
-p -g <refname>’.


NOTES MERGE STRATEGIES
**********************

The default notes merge strategy is "manual", which checks out
conflicting notes in a special work tree for resolving notes conflicts
(‘.git/NOTES_MERGE_WORKTREE’), and instructs the user to resolve the
conflicts in that work tree.  When done, the user can either finalize
the merge with _git notes merge –commit_, or abort the merge with _git
notes merge –abort_.

   Users may select an automated merge strategy from among the following
using either -s/–strategy option or configuring notes.mergeStrategy
accordingly:

   "ours" automatically resolves conflicting notes in favor of the local
version (i.e.  the current notes ref).

   "theirs" automatically resolves notes conflicts in favor of the
remote version (i.e.  the given notes ref being merged into the current
notes ref).

   "union" automatically resolves notes conflicts by concatenating the
local and remote versions.

   "cat_sort_uniq" is similar to "union", but in addition to
concatenating the local and remote versions, this strategy also sorts
the resulting lines, and removes duplicate lines from the result.  This
is equivalent to applying the "cat | sort | uniq" shell pipeline to the
local and remote versions.  This strategy is useful if the notes follow
a line-based format where one wants to avoid duplicated lines in the
merge result.  Note that if either the local or remote version contain
duplicate lines prior to the merge, these will also be removed by this
notes merge strategy.


EXAMPLES
********

You can use notes to add annotations with information that was not
available at the time a commit was written.

     $ git notes add -m 'Tested-by: Johannes Sixt <j6t@kdbg.org>' 72a144e2
     $ git show -s 72a144e
     [...]
         Signed-off-by: Junio C Hamano <gitster@pobox.com>

     Notes:
         Tested-by: Johannes Sixt <j6t@kdbg.org>

   In principle, a note is a regular Git blob, and any kind of
(non-)format is accepted.  You can binary-safely create notes from
arbitrary files using _git hash-object_:

     $ cc *.c
     $ blob=$(git hash-object -w a.out)
     $ git notes --ref=built add --allow-empty -C "$blob" HEAD

   (You cannot simply use ‘git notes --ref=built add -F a.out HEAD’
because that is not binary-safe.)  Of course, it doesn’t make much sense
to display non-text-format notes with _git log_, so if you use such
notes, you’ll probably need to write some special-purpose tools to do
something useful with them.


CONFIGURATION
*************

core.notesRef
     Notes ref to read and manipulate instead of ‘refs/notes/commits’.
     Must be an unabbreviated ref name.  This setting can be overridden
     through the environment and command line.

notes.mergeStrategy
     Which merge strategy to choose by default when resolving notes
     conflicts.  Must be one of ‘manual’, ‘ours’, ‘theirs’, ‘union’, or
     ‘cat_sort_uniq’.  Defaults to ‘manual’.  See "NOTES MERGE
     STRATEGIES" section above for more information on each strategy.

     This setting can be overridden by passing the ‘--strategy’ option.

notes.<name>.mergeStrategy
     Which merge strategy to choose when doing a notes merge into
     refs/notes/<name>.  This overrides the more general
     "notes.mergeStrategy".  See the "NOTES MERGE STRATEGIES" section
     above for more information on each available strategy.

notes.displayRef
     Which ref (or refs, if a glob or specified more than once), in
     addition to the default set by ‘core.notesRef’ or ‘GIT_NOTES_REF’,
     to read notes from when showing commit messages with the _git log_
     family of commands.  This setting can be overridden on the command
     line or by the ‘GIT_NOTES_DISPLAY_REF’ environment variable.  See
     git-log(1).

notes.rewrite.<command>
     When rewriting commits with <command> (currently ‘amend’ or
     ‘rebase’), if this variable is ‘false’, git will not copy notes
     from the original to the rewritten commit.  Defaults to ‘true’.
     See also "‘notes.rewriteRef’" below.

     This setting can be overridden by the ‘GIT_NOTES_REWRITE_REF’
     environment variable.

notes.rewriteMode
     When copying notes during a rewrite, what to do if the target
     commit already has a note.  Must be one of ‘overwrite’,
     ‘concatenate’, ‘cat_sort_uniq’, or ‘ignore’.  Defaults to
     ‘concatenate’.

     This setting can be overridden with the ‘GIT_NOTES_REWRITE_MODE’
     environment variable.

notes.rewriteRef
     When copying notes during a rewrite, specifies the (fully
     qualified) ref whose notes should be copied.  May be a glob, in
     which case notes in all matching refs will be copied.  You may also
     specify this configuration several times.

     Does not have a default value; you must configure this variable to
     enable note rewriting.

     Can be overridden with the ‘GIT_NOTES_REWRITE_REF’ environment
     variable.


ENVIRONMENT
***********

‘GIT_NOTES_REF’
     Which ref to manipulate notes from, instead of
     ‘refs/notes/commits’.  This overrides the ‘core.notesRef’ setting.

‘GIT_NOTES_DISPLAY_REF’
     Colon-delimited list of refs or globs indicating which refs, in
     addition to the default from ‘core.notesRef’ or ‘GIT_NOTES_REF’, to
     read notes from when showing commit messages.  This overrides the
     ‘notes.displayRef’ setting.

     A warning will be issued for refs that do not exist, but a glob
     that does not match any refs is silently ignored.

‘GIT_NOTES_REWRITE_MODE’
     When copying notes during a rewrite, what to do if the target
     commit already has a note.  Must be one of ‘overwrite’,
     ‘concatenate’, ‘cat_sort_uniq’, or ‘ignore’.  This overrides the
     ‘core.rewriteMode’ setting.

‘GIT_NOTES_REWRITE_REF’
     When rewriting commits, which notes to copy from the original to
     the rewritten commit.  Must be a colon-delimited list of refs or
     globs.

     If not set in the environment, the list of notes to copy depends on
     the ‘notes.rewrite.<command>’ and ‘notes.rewriteRef’ settings.


GIT
***

Part of the git(1) suite

   ---------- Footnotes ----------

   (1) Permitted pathnames have the form
_bf_‘/’_fe_‘/’_30_‘/’_…_‘/’_680d5a…_: a sequence of directory names of
two hexadecimal digits each followed by a filename with the rest of the
object ID.


File: gitman.info,  Node: git-p4,  Up: Top

Name
****

git-p4 — Perforceリポジトリからのインポートと、Perforceリポジトリへの
submit


Synopsis
********

     git p4 clone [<sync options>] [<clone options>] <p4 depot path>…
     git p4 sync [<sync options>] [<p4 depot path>…]
     git p4 rebase
     git p4 submit [<submit options>] [<master branch name>]


DESCRIPTION
***********

このコマンドは、Gitを使用してp4リポジトリと対話する方法を提供します。

   ’git p4 clone’を使用して既存のp4リポジトリから新しいGitリポジトリを作
成し、1つ以上のp4デポパス(depot path)を指定します。’git p4sync’を使用し
てp4の変更からの新しいコミットを組み込みます。’sync’コマンドは、他のp4デ
ポパスからの新しいブランチを含めるためにも使用されます。’git p4 submit’を
使用してGitの変更をp4に送信します。 コマンド’git p4 rebase’は同期を実行
し、現在のブランチを更新されたp4リモートブランチにリベースします。


EXAMPLES
********

   • リポジトリをクローンします:

          $ git p4 clone //depot/path/project

   • 新しく作成されたGitリポジトリでいくつかの作業を行います:

          $ cd project
          $ vi foo.h
          $ git commit -a -m "edited foo.h"

   • p4からの最近の変更でGitリポジトリを更新し、あなたの作業ツリーにリベ
     ースします:

          $ git p4 rebase

   • あなたのコミットを送信しp4へ戻します:

          $ git p4 submit


COMMANDS
********


Clone
=====

通常、’git p4 clone’は、既存のp4リポジトリから新しいGitディレクトリを作
成するために使用されます:

     $ git p4 clone //depot/path/project

   これは以下の事を行います:

  1. _project_ というサブディレクトリに空のGitリポジトリを作成します。

  2. 指定されたp4デポパス(p4 depot path)からGitブランチ
     _refs/remotes/p4/master_ の単一のコミットにヘッドリビジョンの全内容
     をインポートします。

  3. このリモートからローカルブランチ _master_ を作成し、チェックアウト
     します。

   Gitでp4履歴全体を再現するには、デポパス(dept path)で _@all_ 修飾子を
使用します:

     $ git p4 clone //depot/path/project@all


Sync
====

p4リポジトリで開発が継続されていて、それらの変更をGitリポジトリに取り込
むには以下を使用します:

     $ git p4 sync

   このコマンドは、p4の新しい変更を検出し、Gitがコミットするときにそれら
をインポートします。

   P4リポジトリは、 _git p4 sync_ を使用して既存のGitリポジトリに追加す
ることもできます:

     $ mkdir repo-git
     $ cd repo-git
     $ git init
     $ git p4 sync //path/in/your/perforce/depot

   これにより、指定したデポが既存のGitリポジトリの
_refs/remotes/p4/master_ にインポートされます。 ‘--branch’ オプションを
使用して、p4コンテンツに使用する別のブランチを指定することも可能です。

   Gitリポジトリにブランチ ‘refs/remotes/origin/p4’ が含まれている場合、
これらは ‘git p4 sync’ 実行中に最初にフェッチされて調べ(consult)られます
。p4から直接インポートするのは、Gitリモートから変更をプルするよりもかな
り遅いため、これは複数開発者環境(multi-developer environment)で役立ちま
す。

   複数のブランチがある場合、 ‘git p4 sync’ を実行すると、「BRANCH
DETECTION」アルゴリズムが自動的に使用され、新しい変更を適切なブランチに
分割しようとします。 これを ‘--branch’ オプションでオーバーライドして、
更新するブランチを1つだけ指定できます。


Rebase
======

一般的な動作パターンは、p4デポから最新の変更をフェッチし、それらをローカ
ルのコミットされていない変更とマージすることです。多くの場合、p4リポジト
リはすべてのコードの最終的な場所であるため、リベース作業フローは理にかな
っています。このコマンドは、 ‘git p4 sync’ に続いて ‘git rebase’ を実行
して、更新されたp4の変更に加えてローカルコミットを移動します。

     $ git p4 rebase


Submit
======

Gitリポジトリからp4リポジトリに変更を送信するには、別のp4クライアントワ
ークスペース(p4 client workspace)が必要です。 これは、 ‘P4CLIENT’ 環境変
数またはGit構成変数 ‘git-p4.client’ を使用して指定する必要があります。
p4クライアントは存在する必要がありますが、クライアントルート(client
root)がまだ存在しない場合は、クライアントルートが作成されて入力されます
。

   現在のGitブランチにはあるが、 ‘p4/master’ ブランチにはないすべての変
更を送信するには、以下を使用します:

     $ git p4 submit

   現在のブランチ以外のブランチを指定するには、以下を使用します:

     $ git p4 submit topicbranch

   単一のコミットまたはコミットの範囲を指定するには、以下を使用します:

     $ git p4 submit --commit <sha1>
     $ git p4 submit --commit <sha1..sha1>

   アップストリーム参照は一般的には _refs/remotes/p4/master_ ですが、
‘--origin=’ コマンドラインオプションを使用してオーバーライドできます。

   p4の変更は、ユーザーが ‘git p4 submit’ を呼び出すと作成されます。
‘--preserve-user’ オプションを使用すると、Gitコミットの作者(author)に応
じて所有権が変更されます。このオプションには、 ‘p4 protect’ を使用して付
与できるp4の管理者権限が必要です。

   送信する代わりに変更を保存するには、以下のように ‘--shelve’ と
‘--update-shelve’ を使用します:

     $ git p4 submit --shelve
     $ git p4 submit --update-shelve 1234 --update-shelve 2345


Unshelve
========

Unshelvingは、棚上げされたP4チェンジリスト(shelved P4 changelist)を取得
し、ブランチ refs/remotes/p4-unshelved/<changelist> で同等のgit commitを
生成します。

   git commitは、現在のoriginリビジョン(デフォルトではHEAD)を基準にして
作成されます。親コミットはoriginに基づいて作成され、次にunshelveコミット
はそれに基づいて作成されます。

   originリビジョンは、 ‘--origin’ オプションで変更できます。

   refs/remotes/p4-unshelved のターゲットブランチがすでに存在する場合、
古いブランチの名前が変更されます。

     $ git p4 sync
     $ git p4 unshelve 12345
     $ git show p4-unshelved/12345
     <submit more changes via p4 to the same files>
     $ git p4 unshelve 12345
     <refuses to unshelve until git is in sync with p4 again>


OPTIONS
*******


General options
===============

cloneを除くすべてのコマンドは、これらのオプションを受け入れます。

‘--git-dir <dir>’
     ‘GIT_DIR’ 環境変数を設定します。 git(1) 参照。

‘-v’
‘--verbose’
     より多くの進捗情報を提供します。


Sync options
============

これらのオプションは、最初の「クローン」(clone)操作と後続の「同期」
(sync)操作で使用できます。

‘--branch <ref>’
     変更を ‘refs/remotes/p4/master’ ではなく <ref> にインポートします。
     <ref>が ‘refs/’ で始まる場合は、そのまま使用されます。それ以外の場
     合、 ‘p4/’ で始まらない場合は、その接頭辞が追加されます。

     デフォルトでは、 ‘refs/’ で始まらない<ref>は、リモート追跡ブランチ
     の名前として扱われます(‘refs/remotes/’ の下)。この動作は、
     ‘--import-local’ オプションを使用して変更できます。

     <ref> のデフォルトは "master" です。

     この例では、新しい remote "p4/proj2" を既存のGitリポジトリにインポ
     ートします:

              $ git init
              $ git p4 sync --branch=refs/remotes/p4/proj2 //depot/proj2

‘--detect-branches’
     ブランチ検出アルゴリズムを使用して、p4の新しいパスを見つけます。 こ
     れは、以下の「BRANCH DETECTION」で解説してあります。

‘--changesfile <file>’
     <file> にリストされているp4変更番号(p4 change numbers)を1行に1つず
     つ正確にインポートします。 通常、 ‘git p4’ は、現在のp4リポジトリの
     状態を検査し、インポートする必要のある変更を検出します。

‘--silent’
     進捗情報を出力しません。

‘--detect-labels’
     デポパス(depot paths)に関連付けられているラベルをp4に問い合わせ、
     Gitにタグとして追加します。新しいチェンジリストに関連付けられたラベ
     ルのみをインポートするため、有用性は限られています。非推奨です。

‘--import-labels’
     p4からGitにラベルをインポートします。

‘--import-local’
     デフォルトでは、p4ブランチは ‘refs/remotes/p4/’ に保存され、
     git-branch(1) およびその他のコマンドによってリモート追跡ブランチと
     して扱われます。 このオプションは、代わりにp4ブランチを
     ‘refs/heads/p4/’ に配置します。このオプション使用後、今後の同期操作
     では、 ‘refs/heads’ でp4ブランチを見つけることができるように、
     ‘--import-local’ も指定する必要があることに注意してください。

‘--max-changes <n>’
     指定されたリビジョン指定子(revision specifier)に含まれる変更の全範
     囲ではなく、最大で <n> 個の変更をインポートします。通常の使用法は、
     リビジョン指定子として ‘@all’ を使用しますが、 ‘--max-changes 1000’
     を使用して、リビジョン履歴全体ではなく、最後の1000リビジョンのみを
     インポートします。

‘--changes-block-size <n>’
     ‘@all’ などのリビジョン指定子を特定の変更番号のリストに変換するとき
     に使用する内部ブロックサイズ。変換の変更の完全なリストを見つけるた
     めに ‘p4 changes’ への単一の呼び出しを使用する代わりに、 ‘p4
     changes -m’ への一連の呼び出しがあり、それぞれが指定のサイズの変更
     の1ブロックを要求します。デフォルトのブロックサイズは500で、通常は
     これが適切です。

‘--keep-path’
     デフォルトでは、p4デポパスからGitへのファイル名のマッピングには、デ
     ポパス全体の削除が含まれます。このオプションを使用すると、完全な
     p4デポパスがGitに保持されます。 たとえば、パス
     ‘//depot/main/foo/bar.c’ は、 ‘//depot/main/’ からインポートすると
     、 ‘foo/bar.c’ になります。 ‘--keep-path`を使用すると、Gitパスは代
     わりに `depot/main/foo/bar.c’ になります。

‘--use-client-spec’
     クライアント仕様(client spec)を使用して、p4でinterestingファイルの
     リストを見つけます。以下の「CLIENT SPEC」セクションを参照してくださ
     い。

‘-/ <path>’
     クローン作成または同期時に、選択したデポパスを除外します。


Clone options
=============

これらのオプションは、上記の「sync」オプションとともに、最初の「clone」
で使用できます。

‘--destination <directory>’
     Gitリポジトリを作成する場所。 指定しない場合、p4デポパス(p4 depot
     path)の最後のコンポーネントを使用して新しいディレクトリを作成します
     。

‘--bare’
     ベアクローン(bare clone)を実行します。 git-clone(1) を参照してくだ
     さい。


Submit options
==============

これらのオプションを使用して、「git p4 submit」の動作を変更できます。

‘--origin <commit>’
     p4に送信するコミットが識別される上流の場所。デフォルトでは、これは
     ‘HEAD’ から到達可能な最新のp4コミットです。

‘-M’
     名前の変更(renames)を検出します。 git-diff(1) を参照してください。
     名前の変更は、p4ででは明示的な「移動」操作を使用して表されます。コ
     ピーを検出するための対応するオプションはありませんが、移動とコピー
     の両方に変数があります。

‘--preserve-user’
     p4に送信する前に、p4の変更を再作成(re-author)してください。このオプ
     ションには、p4管理者権限が必要です。

‘--export-labels’
     Gitからタグをp4ラベルとしてエクスポートします。Gitで見つかったタグ
     は、perforce 作業ディレクトリに適用されます。

‘-n’
‘--dry-run’
     どのコミットがp4に送信されるかだけを表示します。Gitまたはp4の状態を
     変更しないでください。

‘--prepare-p4-only’
     通常の送信操作と同様に、p4ワークスペースにコミットを適用し、p4でフ
     ァイルを開いたり、追加したり、削除したりします。 最後の「p4送信」を
     発行しません。代わりに、手動で送信する方法または元に戻す方法に関す
     るメッセージを表示します。このオプションは、最初の(最も古い)コミッ
     ト後に常に停止(stop)します。Gitタグはp4にエクスポートされません。

‘--shelve’
     送信する代わりに、一連の棚上げされたチェンジリスト(shelved
     changelists)を作成します。各シェルフ(shelve)を作成した後、関連する
     ファイルは元に戻され(revert)/削除(delete)されます。保留中のコミット
     が複数ある場合は、複数のシェルフが作成されます。

‘--update-shelve CHANGELIST’
     このコミットで既存の棚上げされたチェンジリスト(shelved changelist)を
     更新します。 ‘--shelve’ の指定を含んでいます。複数の棚上げされたチ
     ェンジリストに対して繰り返します。

‘--conflict=(ask|skip|quit)’
     p4にコミットを適用すると、競合が発生する可能性があります。 これが発
     生した場合、デフォルトの動作("ask")は、このコミットをスキップして続
     行するか、終了するかを尋ねる動作です。このオプションを使用すると、
     プロンプトをバイパスして、競合するコミットを自動的にスキップしたり
     、プロンプトを表示せずにコミットの適用を中止(quit)したりできます。

‘--branch <branch>’
     送信後、デフォルトの p4/master の代わりに、この名前付きブランチを同
     期します。詳細については、上記の「Sync options」セクションを参照し
     てください。

‘--commit <sha1>|<sha1..sha1>’
     現在のGitブランチにある変更の完全なリストではなく、指定されたコミッ
     トまたはコミットの範囲のみを送信します。

‘--disable-rebase’
     すべてのコミットが正常に送信された後の自動リベースを無効にします。
     git-p4.disableRebase で設定することもできます。

‘--disable-p4sync’
     コミットが送信された後、Perforceからのp4/masterの自動同期を無効にし
     ます。 ‘--disable-rebase’ の指定を含んでいます。
     git-p4.disableP4Sync で設定することもできます。 可能であれば、
     origin/master との同期は引き続き続行されます。


Hooks for submit
****************


p4-pre-submit
=============

‘p4-pre-submit’ フックが存在し、実行可能である場合に実行されます。フック
はパラメータを受け取らず、標準入力からも何も受け取りません。このスクリプ
トをゼロ以外のステータスで終了すると、 ‘git-p4 submit’ が起動しなくなり
ます。 ‘--no-verify’ コマンドラインオプションでバイパスできます。

   使用シナリオの１つは、フックで単体テストを実行することです。


p4-prepare-changelist
=====================

‘p4-prepare-changelist’ フックは、デフォルトのチェンジリストメッセージを
準備した直後、エディタが起動する前に実行されます。 これは、変更リストの
テキストを含むファイルの名前という1つのパラメーターを取ります。スクリプ
トをゼロ以外のステータスで終了すると、プロセスが中止(abort)されます。

   フックの目的は、メッセージファイルをその場で編集することであり、
‘--no-verify’ オプションによって抑制されることはありません。このフックは
、 ‘--prepare-p4-only’ が設定されている場合でも呼び出されます。


p4-changelist
=============

‘p4-changelist’ フックは、ユーザーがチェンジリストメッセージを編集した後
に実行されます。 ‘--no-verify’ オプションでバイパスできます。提案された
チェンジリストテキストを保持するファイルの名前という単一のパラメータを取
ります。ゼロ以外のステータスで終了すると、コマンドは中止(abort)されます
。

   フックはチェンジリストファイルの編集を許可されており、テキストをプロ
ジェクトの標準形式に正規化するために使用できます。 また、メッセージファ
イルを検査した後に送信を拒否するために使用することもできます。


p4-post-changelist
==================

‘p4-post-changelist’ フックは、submitがP4で正常に発生した後に呼び出され
ます。 これはパラメーターを必要とせず、主に通知を目的としており、git p4
submitアクションの結果に影響を与えることはできません。


Rebase options
==============

これらのオプションを使用して、「git p4 rebase」の動作を変更できます。

‘--import-labels’
     p4ラベルのインポート。


Unshelve options
================

‘--origin’
     棚上げされたP4チェンジリスト(shelved P4 changelist)が比較される git
     refspec を設定します。デフォルトは p4/master です。


DEPOT PATH SYNTAX
*****************

‘git p4 sync’ と ‘gitp4 clone’ へのp4デポパス引数は、1つ以上のスペースで
区切られたp4デポパスにすることができ、最後にオプションのp4リビジョン指定
子があります:

"//depot/my/project"
     そのツリーの下の「#head」変更内のすべてのファイルを含む1つのコミッ
     トをインポートします。

"//depot/my/project@all"
     そのデポパスの履歴の変更ごとに1つのコミットをインポートします。

"//depot/my/project@1,6"
     1から6の変更のみをインポートする。

"//depot/proj1@all //depot/proj2@all"
     両方の名前付きのデポパスからのすべての変更を単一のリポジトリにイン
     ポートします。これらのディレクトリの下にあるファイルのみが含まれま
     す。 Gitには、「proj1」と「proj2」ごとのサブディレクトリはありませ
     ん。複数のデポパスを指定する場合は、‘--destination’ オプションを使
     用する必要があります。 リビジョン指定子は、各デポパスで同じように指
     定する必要があります。 同じ名前のファイルがデポパスにある場合、ファ
     イルの最新バージョンのパスがGitに表示されるパスになります。

   p4リビジョン指定子の完全な構文については、「p4 help revisions」を参照
してください。


CLIENT SPEC
***********

p4クライアントの仕様は、 ‘p4 client’ コマンドで維持され、他のフィールド
の中でも、デポがクライアントリポジトリにマップされる方法を指定するビュー
が含まれています。 ‘clone’ と ‘sync`コマンドは、 `--use-client-spec’ オ
プションが指定されているか、または useClientSpec 変数がtrueの場合に、ク
ライアント仕様(client spec)を参照できます。 ‘git p4 clone’ の後、
useClientSpec変数がリポジトリ構成ファイルに自動的に設定されます。これに
より、将来の ‘git p4 submit’ コマンドが正しく機能するようになります。
submitコマンドは変数のみを調べ、コマンドラインオプションはありません。

   p4ビューの完全な構文は、「p4 help views」に記載されています。 ‘git
p4’ は、ビュー構文のサブセットのみを認識します。 複数行のマッピング、「
+」のオーバーレイ、「-」の除外、空白の前後の二重引用符(‘"’)を理解します
。可能なワイルドカードのうち、 ‘git p4’ は ‘...’ のみを処理し、パスの最
後にある場合にのみ処理します。 ‘git p4’ は、未実装のワイルドカードに遭遇
すると文句を言います。

   バグ: オーバーラップマッピングの実装にはバグがあります。複数のデポパ
スがオーバーレイを介してリポジトリ内の同じ場所にマップされる場合、 ‘git
p4’ は間違ったパスを選択する可能性があります。 これは、 ‘git p4’ 専用の
クライアント仕様を使用せずに解決するのは困難です。

   クライアントの名前は、複数の方法で ‘git p4’ に指定できます。 変数
‘git-p4.client’ が存在する場合は、それが優先されます。 それ以外の場合は
、クライアントを決定する通常のp4メカニズムが使用されます。それは、環境変
数 ‘P4CLIENT’ または‘P4CONFIG‘ によって参照されるファイル または ローカ
ルホスト名 です。


BRANCH DETECTION
****************

P4には、Gitと同じブランチの概念はありません。代わりに、p4はそのコンテン
ツをディレクトリツリーとして編成します。慣例により、さまざまな論理ブラン
チがツリー内のさまざまな場所にあります。 ‘p4 branch’ コマンドは、ツリー
内の異なる領域間のマッピングを維持し、関連するコンテンツを示すために使用
されます。 ‘git p4’ は、これらのマッピングを使用してブランチの関係を判別
できます。

   対象のすべてのブランチが単一のデポパスのサブディレクトリとして存在す
るリポジトリがある場合、クローン作成または同期時に ‘--detect-branches’ を
使用して、 ‘git p4’ がp4内のサブディレクトリを自動的に検出し、これらを
Gitのブランチとして生成できます。

   たとえば、P4リポジトリ構造が以下の場合:

     //depot/main/...
     //depot/branch1/...

   そして、「p4 branch -o branch1」は、以下のようなビューライン(View
line)を表示します:

     //depot/main/... //depot/branch1/...

   それから、以下の _git p4 clone_ コマンドを実行します:

     git p4 clone --detect-branches //depot@all

   ‘refs/remotes/p4/’ には ‘//depot/main’ 用の ‘master’ というブランチと
‘//depot/branch1’ 用の ‘depot/branch1’ というブランチが別々に作成される
ことになります。

   ただし、ブランチのように使用できるようにするために、p4でブランチを作
成する必要はありません。ブランチ関係を自動的に推測することは難しいため、
Git構成設定 ‘git-p4.branchList’ を使用して、ブランチ関係を明示的に識別す
ることができます。これは、単純なp4ブランチ仕様のような
"source:destination" ペアのリストであり、 "source" と "destination" は
p4リポジトリ内のパス要素です。上記の例は、p4ブランチの存在に依存していま
した。 p4ブランチがない場合、同じ結果が以下の場合に発生します:

     git init depot
     cd depot
     git config git-p4.branchList main:branch1
     git p4 clone --detect-branches //depot@all .


PERFORMANCE
***********

‘git p4’ で使用される高速インポートメカニズムは、 ‘git p4 sync’ の呼び出
しごとに1つのパックファイルを作成します。通常、Gitガベージ圧縮
(git-gc(1))は、これらをより少ないパックファイルに自動的に圧縮しますが、
‘git repack -adf’ を明示的に呼び出すと、パフォーマンスが向上する場合があ
ります。


CONFIGURATION VARIABLES
***********************

以下の構成設定を使用して、 ‘git p4’ の振る舞いを変更できます。全てを見た
い時は「git-p4」セクションを参照してください。


General variables
=================

git-p4.user
     すべてのp4コマンドのオプションとして、 ‘-u <user>’ で指定されるユー
     ザー。代わりに環境変数 ‘P4USER’ を使用することができます。

git-p4.password
     すべてのp4コマンドのオプションとして、 ‘-P <password>’ で指定される
     パスワード。代わりに環境変数 ‘P4PASS’ を使用することができます。

git-p4.port
     すべてのp4コマンドのオプションとして ‘-p <port>’ で指定されるポート
     。代わりに、環境変数 ‘P4PORT’ を使用することができます。

git-p4.host
     全てのp4コマンドのオプションとして ‘-h <host>’ で指定されるホスト。
     代わりに環境変数 ‘P4HOST’ を使用することができます。

git-p4.client
     全てのp4コマンドのオプションとして ‘-c <client>’ で指定されるクライ
     アント。クライアントスペック(client spec)を含んでいます。

git-p4.retries
     ネットワークがタイムアウトした場合にp4コマンド(特に ‘p4 sync’)を再
     試行する回数を指定します。デフォルト値は 3 です。再試行を無効にする
     場合、またはp4バージョンが再試行をサポートしていない場合(2012.2より
     前)は、値を0に設定します。


Clone and sync variables
========================

git-p4.syncFromOrigin
     他のGitリポジトリからコミットをインポートする方がp4からインポートす
     るよりもはるかに高速であるため、Gitのリモートで最初にp4の変更を見つ
     けるメカニズムが存在します。 ‘refs/remote/origin/p4’ の下にブランチ
     が存在する場合、それらはp4から同期するときにフェッチされて使用され
     ます。 この変数を ‘false’ に設定して、この動作を無効にすることがで
     きます。

git-p4.branchUser
     ブランチ検出のフェーズの一つでは、p4ブランチを調べて、インポートす
     る新しいブランチを見つけます。デフォルトでは、すべてのブランチが検
     査されます。 このオプションは、検索を、変数で指定した単一のユーザー
     が所有するものだけに制限します。

git-p4.branchList
     ブランチ検出が有効になっている場合にインポートされるブランチのリス
     ト。各エントリは、コロン(‘:’)で区切られたブランチ名のペアである必要
     があります。以下の例では、branchAとbranchBの両方がmainから作成され
     たことを宣言しています:

          git config       git-p4.branchList main:branchA
          git config --add git-p4.branchList main:branchB

git-p4.ignoredP4Labels
     無視するp4ラベルのリスト。これは、インポートできないラベルが検出さ
     れると自動的に作成されます。

git-p4.importLabels
     ‘--import-labels’ に従って、p4ラベルをgitにインポートします。

git-p4.labelImportRegexp
     この正規表現にマッチするp4ラベルのみがインポートされます。 デフォル
     ト値は ‘[a-zA-Z0-9_\-.]+$’ です。

git-p4.useClientSpec
     対象のp4デポパスを識別するためにp4クライアント仕様(p4 client spec)を
     使用する必要があることを指定します。これは、オプション
     ‘--use-client-spec’ を指定するのと同じです。上記の「CLIENT SPEC」セ
     クションを参照してください。 この変数はブール値であり、p4クライアン
     トの名前ではありません。

git-p4.pathEncoding
     Perforceは、元のOSによって指定されたパスのエンコーディングを保持し
     ます。 Gitは、UTF-8としてエンコードされたパスを想定しています。 こ
     の設定を使用して、PERFORCEがパスに使用したエンコーディングを
     git-p4に通知します。 このエンコーディングは、パスのエンコーディング
     をUTF-8に変換するために使用されます。例として、Windows上の
     PERFORCEは、パス名をエンコードするために "cp1252" を使用することが
     よくあります。

git-p4.largeFileSystem
     大きな(バイナリ)ファイルに使用されるシステムを指定します。ラージフ
     ァイルシステム(large file systems)は ‘git p4 submit’ コマンドをサポ
     ートしていないことに注意してください。 現在、Git LFSのみが実装され
     ています(詳細については、 https://git-lfs.github.com/
     (https://git-lfs.github.com/) を参照してください)。このオプションを
     使用して以下のように構成するには、Git LFSコマンドライン拡張機能をダ
     ウンロードしてインストールします:

          git config       git-p4.largeFileSystem GitLFS

git-p4.largeFileExtensions
     リスト内のファイル拡張子に一致するすべてのファイルは、ラージファイ
     ルシステムによって処理されます。 拡張子の前に ‘.’ を付けないでくだ
     さい。

git-p4.largeFileThreshold
     非圧縮サイズがしきい値を超えるすべてのファイルは、ラージファイルシ
     ステム(large file system)によって処理されます。デフォルトでは、しき
     い値はバイト単位で定義されています。 単位を変更するには、接尾辞k、
     m、gを追加します。

git-p4.largeFileCompressedThreshold
     圧縮サイズがしきい値を超えるすべてのファイルは、ラージファイルシス
     テム(large file system)によって処理されます。このオプションを使用す
     ると、クローン/同期プロセスの速度が低下する可能性があります。デフォ
     ルトでは、しきい値はバイト単位で定義されています。 単位を変更するに
     は、接尾辞k、m、gを追加します。

git-p4.largeFilePush
     大きなファイルをサーバーに自動的にプッシュするかどうかを定義するブ
     ール変数。

git-p4.keepEmptyCommits
     このブールオプションがtrueに設定されている場合、除外されたファイル
     のみを含むチェンジリストは空のコミットとしてインポートされます。

git-p4.mapUser
     P4 user をGitのnameとemail addressにマッピングします。以下の形式の
     文字列を使用して、マッピングを作成します:

          git config --add git-p4.mapUser "p4user = First Last <mail@address.com>"

     マッピングは、P4からのユーザー情報を上書きします。複数のP4ユーザー
     のマッピングを定義できます。


Submit variables
================

git-p4.detectRenames
     名前の変更(renames)を検出します。git-diff(1) を参照してください。 こ
     れは、true または、false または ‘git diff -M’ で期待されるスコアに
     なります。

git-p4.detectCopies
     コピーを検出します。 git-diff(1) を参照してください。 これは、true
     または false または ‘git diff -C’ で期待されるスコアになります。

git-p4.detectCopiesHarder
     コピーをより厳しく検出します。 git-diff(1) を参照してください。 ブ
     ール値です。

git-p4.preserveUser
     送信時に、誰が ‘git p4 submit’ を呼び出したかに関係なく、Git作者
     (author)を反映するように変更を再作成(re-author)します。

git-p4.allowMissingP4Users
     ‘preserveUser’ がtrueの場合、 ‘git p4’ は通常、p4ユーザーマップで作
     者(author)が見つからない場合に停止(die)します。この設定は、それを気
     にせずに変更を送信します。

git-p4.skipSubmitEdit
     送信プロセスは、各p4変更が送信される前にエディタを呼び出します。た
     だし、この設定がtrueの場合、編集手順はスキップされます。

git-p4.skipSubmitEditCheck
     p4変更メッセージを編集した後、 ‘git p4’ は、ファイルの変更時刻を調
     べて、説明が実際に変更されたことを確認します。このオプションは、そ
     の変更時刻を調べるテストを無効にします。

git-p4.allowSubmit
     デフォルトでは、任意のブランチを ‘git p4 submit’ 操作のソースとして
     使用できます。 この構成変数が設定されている場合、指定されたブランチ
     のみを送信ソースとして使用できます。ブランチ名は短い名前
     (‘refs/heads/’ は不可)である必要があり、スペースを入れずにコンマ
     (‘,’)で区切る必要があります。

git-p4.skipUserNameCheck
     ‘git p4 submit’ を実行しているユーザーがp4ユーザーマップに存在しな
     い場合、 ‘git p4’ は終了(exit)します。このオプションは、関係なく送
     信を強制するために使用できます。

git-p4.attemptRCSCleanup
     有効にすると、 ‘git p4submit’ はRCSキーワード($Header$ など)のクリ
     ーンアップを試みます。そうしないと、マージの競合が発生し、送信が続
     行できなくなります。 このオプションは、現時点では実験的なものと見な
     す必要があります。

git-p4.exportLabels
     ‘--export-labels’ に従って、Gitタグをp4ラベルにエクスポートします。

git-p4.labelExportRegexp
     この正規表現にマッチするp4ラベルのみがエクスポートされます。 デフォ
     ルト値は ‘[a-zA-Z0-9_\-.]+$’ です。

git-p4.conflict
     ‘--conflict’ に従って、p4との競合が見つかった場合の送信動作を指定し
     ます。デフォルトの動作は「ask」です。

git-p4.disableRebase
     送信後に p4/master に対してツリーをリベースしないでください。

git-p4.disableP4Sync
     送信後に p4/master を Perforce と同期しないでください。
     git-p4.disableRebase の指定を含んでいます。


IMPLEMENTATION DETAILS
**********************

   • p4からのチェンジセットは、Git fast-import を使用してインポートされ
     ます。

   • クローン作成または同期には、p4クライアントは必要ありません。ファイ
     ルの内容は ‘p4 print’ を使用して収集されます。

   • 送信するには、Gitリポジトリと同じ場所にないp4クライアントが必要です
     。パッチは、このp4クライアントに一度に1つずつ適用され、そこから送信
     されます。

   • ‘git p4’ によってインポートされた各コミットには、ログメッセージの最
     後にp4デポの場所と変更番号を示す行があります。 この行は、後の ‘git
     p4 sync’ 操作で、どのp4の変更が新しいかを知るために使用されます。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-pack-objects,  Up: Top

Name
****

git-pack-objects — オブジェクトのパックされたアーカイブを作成する


Synopsis
********

     git pack-objects [-q | –progress | –all-progress] [–all-progress-implied]
             [–no-reuse-delta] [–delta-base-offset] [–non-empty]
             [–local] [–incremental] [–window=<n>] [–depth=<n>]
             [–revs [–unpacked | –all]] [–keep-pack=<pack-name>]
             [–stdout [–filter=<filter-spec>] | base-name]
             [–shallow] [–keep-true-parents] [–[no-]sparse] < object-list


DESCRIPTION
***********

標準入力からオブジェクトのリストを読み取り、指定されたベース名を持つ1つ
以上のパックされたアーカイブをディスクに書き込むか、パックされたアーカイ
ブを標準出力に書き出します。

   パックされたアーカイブは、2つのリポジトリ間でオブジェクトのセットを転
送するための効率的な方法であり、アクセス効率の高いアーカイブ形式でもあり
ます。パックされたアーカイブでは、オブジェクトはその全体を圧縮したものと
して、または他のオブジェクトとの差分として保存されます。後者はしばしばデ
ルタ(delta)と呼ばれます。

   パックされたアーカイブ形式(.pack)は、自己完結型であるように設計されて
いるため、それ以上の情報がなくても解凍できます。したがって、デルタが依存
する各オブジェクトがパック内に存在する必要があります。

   パックインデックスファイル(.idx)が、パック内のオブジェクトへの高速で
ランダムなアクセスのために生成されます。インデックスファイル(.idx)とパッ
クされたアーカイブ(.pack)の両方を $GIT_OBJECT_DIRECTORY の pack/ サブデ
ィレクトリ（または $GIT_ALTERNATE_OBJECT_DIRECTORIES の任意のディレクト
リ)に配置すると、Gitはパックアーカイブから読み取ることができます。

   _git unpack-objects_ コマンドは、パックされたアーカイブを読み取り、パ
ックに含まれるオブジェクトを「1ファイル1オブジェクト」形式に展開できます
。これは通常、ピアによる効率的なネットワーク転送のためにパックがオンザフ
ライで作成されるときに、smart-pullコマンドによって実行されます。


OPTIONS
*******

base-name
     ファイルのペア(.packと.idx)に書き込み、そして、 <base-name> を使用
     して、作成されたファイルの名前を決定します。このオプションを使用す
     ると、ペアの2つのファイルが <base-name>-<SHA-1>.{pack,idx} ファイル
     に書き込まれます。 <SHA-1>は、パックの内容に基づくハッシュであり、
     コマンドの標準出力にも書き込まれます。

‘--stdout’
     パックの内容(.packファイルに書き込まれる内容)を標準出力に書き込みま
     す。

‘--revs’
     個々のオブジェクト名ではなく、標準入力からリビジョン引数を読み取り
     ます。リビジョン引数は、 ‘git rev-list’ と同じ方法で処理され、
     ‘--objects’ フラグはその「commit」引数を使用して、出力するオブジェ
     クトのリストを作成します。結果のリストのオブジェクトはパックされま
     す。リビジョンに加えて、 ‘--not’ または ‘--shallow <SHA-1>’ 行も受
     け入れられます。

‘--unpacked’
     これは ‘--revs’ の指定を含んでいます。標準入力から読み取られたリビ
     ジョン引数のリストを処理するときは、オブジェクトのパッキングを未だ
     パックされていないオブジェクトに制限してください。

‘--all’
     これは ‘--revs’ の指定を含んでいます。標準入力から読み取られたリビ
     ジョン引数のリストに加えて、 ‘refs/’ の下のすべてのrefが含まれるよ
     うに指定してあるかのように振る舞います。

‘--include-tag’
     参照するオブジェクトが結果のパックファイルに含まれている場合は、要
     求されていない注釈付きタグを含めます。これは、ネイティブGitクライア
     ントに新しいタグを送信するのに役立ちます。

‘--stdin-packs’
     オブジェクト名やリビジョン引数ではなく、標準入力からパックファイル
     (例: ‘pack-1234abcd.pack’)のベース名を読み取ります。 結果のパックに
     は、除外されたパック( ‘^`で始まる)にリストされているオブジェクトを
     除く、含まれているパック(’^‘ で始まらないもの)にリストされているす
     べてのオブジェクトが含まれます。

     互換性のある ‘--unpacked’ を除いて、‘ –revs‘ または、 ‘--revs’ を含
     むオプション(‘ –all‘ など)とは互換性がありません。

‘--window=<n>’
‘--depth=<n>’
     これらの2つのオプションは、パックに含まれるオブジェクトをデルタ圧縮
     を使用して格納する方法に影響します。オブジェクトは最初にタイプとサ
     イズ、および、オプションで名前で、内部的にソートされ、 ‘--window’ 内
     の他のオブジェクトと比較されて、デルタ圧縮を使用することでスペース
     が節約されるかどうかが確認されます。 ‘--depth’ は、最大デルタ深度を
     制限します。 深くしすぎると、必要なオブジェクトに到達するために差分
     データを何度も適用する必要があるため、パック解凍側のパフォーマンス
     に影響します。

     ‘--window’ のデフォルト値は10で、 ‘--depth’ のデフォルト値は50です
     。 ‘--depth’ の最大深度は4095です。

‘--window-memory=<n>’
     このオプションは、 ‘--window’ に加えて追加の制限を提供します。ウィ
     ンドウサイズは、メモリ内で ‘<n>’ バイトを超えないように動的に縮小さ
     れます。これは、大きなオブジェクトと小さなオブジェクトが混在するリ
     ポジトリで、大きなウィンドウでメモリを使い果たさないようにしつつ、
     小さなオブジェクトには大きなウィンドウを活用できるようにするために
     有効です。サイズには、「k」または「m」または「g」の接尾辞を付けるこ
     とができます。 ‘--window-memory=0’ は、メモリ使用量を無制限にします
     。デフォルトは、 ‘pack.windowMemory’ 構成変数から取得されます。

‘--max-pack-size=<n>’
     めったにないシナリオですが、ファイルシステム上に特定のサイズより大
     きいファイルを作成できない場合があります。このオプションを使用して
     、出力パックファイルをそれぞれ指定されたサイズ以下の複数の独立した
     パックファイルに分割するようにコマンドに指示できます。 サイズには、
     「k」または「m」または「g」の接尾辞を付けることができます。許可され
     る最小サイズは1MiBに制限されています。 構成変数
     ‘pack.packSizeLimit’ が設定されていない限り、デフォルトは無制限です
     。このオプションを使用すると、リポジトリが大きくなり、速度が低下す
     る可能性があることに注意してください。 ‘pack.packSizeLimit’ の説明
     を参照してください。

‘--honor-pack-keep’
     このフラグにより、.keepファイルを含むローカルパックにすでに含まれて
     いるオブジェクトは、他の方法でパックされていたとしても無視されます
     。

‘--keep-pack=<pack-name>’
     このフラグにより、指定のパックにすでに含まれているオブジェクトは、
     他の方法でパックされていたとしても無視されます。 ‘<pack-name>’ は、
     先頭にディレクトリ名がないパックファイル名です(例:
     ‘pack-123.pack’)。このオプションは、複数のパックを保持するために複
     数回指定できます。

‘--incremental’
     このフラグにより、すでにパックされているオブジェクトは、他の方法で
     パックされていたとしても無視されます。

‘--local’
     このフラグにより、代替オブジェクトストアから借用されたオブジェクト
     は、他の方法でパックされていたとしても無視されます。

‘--non-empty’
     少なくとも1つのオブジェクトが含まれる場合にのみパックされたアーカイ
     ブを作成します。

‘--progress’
     ‘-q’ が指定されていない場合、進行状況は、端末に接続されている場合、
     デフォルトで標準エラーストリームに報告されます。このフラグは、標準
     エラーストリームが端末に送信されていない場合でも、進行状況を強制し
     ます。

‘--all-progress’
     ‘--stdout’ を指定すると、進行状況レポートはオブジェクトのカウントお
     よび圧縮フェーズでは表示されますが、書き込みフェーズでは禁止されま
     す。その理由は、場合によっては、出力ストリームが別のコマンドに直接
     リンクされており、受信パックデータを処理するときに独自の進行状況を
     表示したい場合があるためです。このフラグは ‘--progress’ に似ていま
     すが、 ‘--stdout’ が使用されている場合でも、書き込みフェーズの進行
     状況レポートを強制する点が異なります。

‘--all-progress-implied’
     これは、進行状況の表示がアクティブになるたびに ‘--all-progress’ の
     指定を含ませるために使用されます。 ‘--all-progress’ とは異なり、こ
     のフラグは実際には進行状況の表示を強制しません。

‘-q’
     このフラグにより、コマンドは標準エラーストリームで進行状況を報告し
     なくなります。

‘--no-reuse-delta’
     既存のパックがあるリポジトリに、パックされたアーカイブを作成する場
     合、コマンドは既存のデルタを再利用します。これにより、パックがわず
     かに最適化されない場合があります。このフラグは、既存のデルタを再利
     用せずに最初から計算するようにコマンドに指示します。

‘--no-reuse-object’
     このフラグは、削除されていないオブジェクトを含め、既存のオブジェク
     トデータをまったく再利用しないようにコマンドに指示し、すべてを強制
     的に再圧縮します。 これは、 ‘--no-reuse-delta’ の指定を含みます。パ
     ックされたデータに異なる圧縮レベルを大規模に適用する必要がある曖昧
     模糊なケースでのみ役立ちます。

‘--compression=<n>’
     生成するパック内の新しく圧縮するデータの圧縮レベルを指定します。指
     定しない場合、パックの圧縮レベルは pack.compression 、
     core.compression の順で取得します。どちらも設定されていない場合は、
     zlibのデフォルトである -1 になります。ソースに関係なくすべてのデー
     タに均一な圧縮レベルを強制する場合は、 ‘-no-reuse-object’ オプショ
     ンを追加します。

‘--[no-]sparse’
     ‘--revs’ オプションと組み合わせた場合、「スパース」(sparse)アルゴリ
     ズムを切り替えて、パックに含めるオブジェクトを決定します。このアル
     ゴリズムは、新しいオブジェクトを導入するパスに現れるツリーのみをウ
     ォークします。これは、小さな変更を送信するためのパックを計算すると
     きに、パフォーマンスに大きなメリットをもたらす可能性があります。た
     だし、含まれているコミットに特定の種類の直接名前変更(direct
     renames)含まれている場合は、パックファイルに追加のオブジェクトが追
     加される可能性があります。このオプションが含まれていない場合、デフ
     ォルトで ‘pack.useSparse’ の値になります。 ‘pack.useSparse’ の値は
     、特に指定されていない限りtrueです。

‘--thin’
     ネットワーク転送を減らすために、送信者と受信者の間の共通オブジェク
     トを省略して「薄い」(thin)パックを作成します。このオプションは、
     ‘--stdout’ と組み合わせた場合にのみ意味があります。

     注意: 薄いパックは、必要なオブジェクトを省略するという理由でパック
     されたアーカイブ形式に違反するため、Gitは自己完結型にしないと使用で
     きません。 ‘git index-pack --fix-thin’ (git-index-pack(1) を参照)を
     使用して、自己完結型のプロパティを復元します。

‘--shallow’
     浅いリポジトリ(shallow repository)を持つクライアントに提供されるパ
     ックを最適化します。このオプションを ‘--thin’ と組み合わせると、速
     度を犠牲にしてパックを小さくすることができます。

‘--delta-base-offset’
     パックされたアーカイブは、デルタのベースオブジェクトを20バイトのオ
     ブジェクト名またはストリーム内のオフセットのいずれかで表現できます
     が、Gitの古いバージョンは後者を理解していません。 デフォルトでは、
     ‘git pack-objects’ は互換性を高めるために前者の形式のみを使用します
     。このオプションを使用すると、コマンドで後者の形式を使用してコンパ
     クトにすることができます。平均デルタチェーンの長さに応じて、このオ
     プションは通常、結果のパックファイルを3〜5パーセント縮小します。

     注意: 最新のGitでは、 ‘git gc’ (git-gc(1) 参照)や ‘git repack’
     (git-repack(1) 参照)などの磁器コマンドは、あなたのリポジトリ内のフ
     ァイルをパックファイルに入れるときに、デフォルトでこのオプションを
     渡します。バンドルを作成する ‘git bundle’ (git-bundle(1) 参照)も同
     様です。

‘--threads=<n>’
     最適なデルタマッチングを検索するときに生成するスレッドの数を指定し
     ます。これには、pack-objectsをpthreadでコンパイルする必要があります
     。そうでない場合、このオプションは警告とともに無視されます。これは
     、マルチプロセッサマシンでのパッキング時間を短縮することを目的とし
     ています。ただし、デルタ検索ウィンドウに必要なメモリ量は、スレッド
     数で乗算されます。 0を指定すると、GitはCPUの数を自動検出し、それに
     応じてスレッドの数を設定します。

‘--index-version=<version>[,<offset>]’
     これは、テストスイートでのみ使用することを目的としています。生成す
     るパックインデックスのバージョンを強制し、指定のオフセット上にある
     オブジェクトに64ビットインデックスエントリを強制することができます
     。

‘--keep-true-parents’
     このオプションを使用すると、graftsによって隠されている親はそれでも
     パックされます。

‘--filter=<filter-spec>’
     ‘--stdout’ が必要です。結果のパックファイルから特定のオブジェクト
     (通常はブロブ)を省略します。 有効な ‘<filter-spec>’ 形式ついては、
     git-rev-list(1) を参照してください。

‘--no-filter’
     以前の任意の ‘--filter=’ 引数をオフにします。

‘--missing=<missing-action>’
     将来の「partial clone」(部分クローン)開発に役立つデバッグオプション
     。このオプションは、欠落しているオブジェクトの処理方法を指定します
     。

     _–missing=error_ は、欠落しているオブジェクトが検出された場合に、
     pack-objectsがエラーで停止することを要求します。リポジトリが部分ク
     ローン(partial clone)の場合は、欠落していると言う前に、欠落している
     オブジェクトをフェッチしようとします。 _–missing=error_ がデフォル
     トの操作です。

     _–missing=allow-any_ は、欠落しているオブジェクトが検出された場合で
     も、オブジェクトの走査(object traversal)を続行できます。欠落してい
     るオブジェクトのフェッチは発生しません。欠落しているオブジェクトは
     、結果から警告無しに黙って省略されます。

     _–missing=allow-promisor_ は _allow-any_ に似ていますが、オブジェク
     トの走査は、「予想される」promisorが欠落しているオブジェクトに対し
     てのみ続行できます。欠落しているオブジェクトのフェッチは発生しませ
     ん。予期しないオブジェクトの欠落により、エラーが発生します。

‘--exclude-promisor-objects’
     promisorリモートにあることがわかっているオブジェクトを省略します。
     (このオプションは、ローカルで作成されたオブジェクトのみを操作するこ
     とを目的としているため、再パックするときに、ローカルで作成されたオ
     ブジェクト[.promisor なし]とpromisorリモートのオブジェクト
     [.promisor あり]の区別を維持します。) これは部分クローン(partial
     clone)で使用されます。

‘--keep-unreachable’
     ‘--unpacked=’ オプションで指定されたパック内の参照から到達不能なオ
     ブジェクトは、 ‘*.keep’ ファイルでマークされたパック内にない到達可
     能オブジェクトに加えて、結果のパックに追加されます。 これは
     ‘--revs’ の指定を含んでいます。

‘--pack-loose-unreachable’
     到達不能な緩いオブジェクト(loose objects)をパックします(そしてそれ
     らの緩いオブジェクトを削除します)。 これは ‘--revs’ の指定を含んで
     います。

‘--unpack-unreachable’
     到達不能なオブジェクトは緩い(loose)オブジェクト形式のままにしてくだ
     さい。これは ‘--revs’ の指定を含んでいます。

‘--delta-islands’
     「islands」に基づいてデルタのマッチを制限します。 以下の DELTA
     ISLANDS を参照してください。


DELTA ISLANDS
*************

可能な場合、 ‘pack-objects’ は既存のディスク上のデルタを再利用して、その
場で新しいデルタを検索する必要がないようにします。これは、フェッチを提供
するための重要な最適化です。つまりこれは、サーバーがほとんどのオブジェク
トの展開作業を回避し、ディスクから直接バイトを送信できることを意味するた
めです。この最適化は、受信側が持っていない(そしてまだ送信していない)ベー
スに対するデルタとしてオブジェクトが保存されている場合は機能しません。そ
の場合、サーバーはデルタを「壊し」、CPUコストの高い新しいデルタを見つけ
る必要があります。したがって、パフォーマンスにとって重要なのは、ディスク
上のデルタ関係にあるオブジェクトのセットが、クライアントがフェッチするも
のと一致することです。

   通常のリポジトリでは、これは自動的に機能する傾向があります。オブジェ
クトのほとんどはブランチとタグから到達可能であり、それがクライアントがフ
ェッチするものです。サーバー上で検出されたデルタは、クライアントが既に持
っているモノとこれから持つ予定のオブジェクトの間にある可能性があります。

   ただし、一部のリポジトリ設定では、いくつかの関連しているが別個のref先
端のグループがあり、クライアントはそれらのグループを個別にフェッチする傾
向があります。 たとえば、単一の共有オブジェクトストアでリポジトリの複数
の「フォーク」をホストし、クライアントがそれらを ‘GIT_NAMESPACE’ を介し
て個別のリポジトリとして、または代替メカニズムを使用して個別のリポジトリ
として表示できるようにする場合を考えてみます。素朴な再パックでは、オブジ
ェクトの最適なデルタが、別のフォークでのみ検出されるベースに対してのもの
であることがわかる場合があります。ただし、クライアントがフェッチするとき
、クライアントにはベースオブジェクトがないため、その場で新しいデルタを見
つける必要があります。

   関連するオブジェクトを指す ‘refs/heads/’ と ‘refs/tags/’ のほかに多く
の参照がある場合(たとえば一部のホスティングプロバイダーで使用される
‘refs/pull’ や ‘refs/Changes’ )、同様の状況が存在する可能性があります。
デフォルトでは、クライアントはヘッドとタグのみをフェッチし、それらの他の
グループでのみ見つかったオブジェクトに対するデルタをそのまま送信すること
はできません。

   デルタ島(delta islands)は、refを個別の「島」にグループ化できるように
することで、この問題を解決します。 Pack-objectsは、どのオブジェクトがど
の島から到達可能かを計算し、全く ‘A’ 島に存在しないベースに対してオブジ
ェクト ‘A’ からデルタを作成することを拒否します。これにより、パックがわ
ずかに大きくなります(デルタ化の機会を逃すため)が、1つの島のフェッチで、
島の境界を越えるためにその場でデルタを再計算する必要がないことが保証され
ます。

   デルタ島(delta islands)で再パックする場合、デルタ窓は、構成によって禁
止されている候補で詰まる傾向があります。大きな ‘--window’ で再梱包するこ
とが助けになります(コンテンツに対して計算を行う前に、島に基づいて一部の
オブジェクトペアを拒否できるため、他の方法ほど長くはかかりません)。

   島は、複数回指定できる ‘pack.island’ オプションを介して構成されます。
各値は、refnames に一致する左アンカーの正規表現(left-anchored regular
expressions)です。 例えば:

     [pack]
     island = refs/heads/
     island = refs/tags/

   ヘッドとタグを島に配置します(名前は空の文字列です。名前の詳細について
は、以下を参照してください)。 これらの正規表現に一致しない参照(例:
‘refs/pull/123’)は、どの島にもありません。 したがって、 ‘refs/pull/’ か
らのみ到達可能(ヘッドやタグは不可)のオブジェクトは、 ‘refs/heads/’ のベ
ースとして使用される候補にはなりません。

   参照は「名前」に基づいて島にグループ化され、同じ名前を生成する2つの正
規表現は同じ島にあると見なされます。名前は、正規表現で間に「-」ダッシュ
があるキャプチャグループを連結することにより、正規表現から計算されます
(訳注:[0-9]+ の部分)。(キャプチャグループがない場合、上記の例のように、
名前は空の文字列になります。) これにより、任意の数の島を作成できます。 た
だし、このようなキャプチャグループは最大14個しかサポートされていません。

   たとえば、各フォークの参照を ‘refs/virtual/ID’ に格納するとします。こ
こで、 ‘ID’ は数値識別子です。 次に、以下を構成します:

     [pack]
     island = refs/virtual/([0-9]+)/heads/
     island = refs/virtual/([0-9]+)/tags/
     island = refs/virtual/([0-9]+)/(pull)/

   これにより、各フォークのヘッドとタグがそれぞれの島( "1234” などの名前
)に配置され、それぞれのプルrefsが独自の "1234-pull" になります。

   注意: 「最後の1つが勝つ」順序を使用して、正規表現ごとに1つの島を選択
することに注意してください(これにより、リポジトリ固有の構成がユーザー全
体の構成よりも優先されます)。


CONFIGURATION
*************

さまざまな構成変数がパッキングに影響します。 git-config(1) を参照してく
ださい( pack および delta を検索してください)。

   特に、デルタ圧縮は、 ‘core.bigFileThreshold’ 構成変数より大きいオブジ
ェクト、および属性 ‘delta’ がfalseに設定されているファイルでは使用されま
せん。


SEE ALSO
********

git-rev-list(1) git-repack(1) git-prune-packed(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-pack-redundant,  Up: Top

Name
****

git-pack-redundant — 無駄なパックファイルを探す


Synopsis
********

     git pack-redundant [ –verbose ] [ –alt-odb ] < –all | .pack filename … >


DESCRIPTION
***********

このプログラムは、リポジトリ内のどのパックが無駄であるかを計算します。あ
なたがリポジトリのルートにいる場合、出力は ‘xargsrm’ へのパイプに適して
います。

   _git pack-redundant_ は、標準入力のオブジェクトのリストを受け入れます
。無駄でない必要なパックを確認するとき、指定した任意のオブジェクトはすべ
て無視されます。これにより、到達不能なオブジェクトを含むパックを削除する
場合に、以下のコマンドが役立ちます。

   git fsck –full –unreachable | cut -d ’ ’ -f3 | \ git pack-redundant
–all | xargs rm


OPTIONS
*******

‘--all’
     すべてのパックを処理します。コマンドラインのファイル名はすべて無視
     されます。

‘--alt-odb’
     代替オブジェクトディレクトリのパックに存在するオブジェクトがローカ
     ルパックに存在する必要なしとします。

‘--verbose’
     いくつかの統計をstderrに出力します。 パフォーマンスの低下はわずかで
     す。


SEE ALSO
********

git-pack-objects(1) git-repack(1) git-prune-packed(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-pack-refs,  Up: Top

Name
****

git-pack-refs — 効率的なリポジトリアクセスのためにヘッド(heads)とタグ
(tags)をパックします


Synopsis
********

     git pack-refs [–all] [–no-prune]


DESCRIPTION
***********

旧来、ブランチとタグのヒント(まとめて「refs」と呼ばれます)は、refごとに
1つのファイルを ‘$GIT_DIR/refs’ ディレクトリの下のディレクトリ(サブディ
レクトリ)に保存していました。多くのブランチヒントは頻繁に更新される傾向
がありますが、ほとんどのタグと一部のブランチヒントは更新されません。リポ
ジトリに数百または数千のタグがある場合、この 1ファイル毎に1ref形式 はス
トレージを浪費し、パフォーマンスを低下させます。

   このコマンドは、refを単一のファイル ‘$GIT_DIR/packed-refs’ に保存する
ことにより、ストレージとパフォーマンスの問題を解決するために使用されます
。旧来の ‘$GIT_DIR/refs’ ディレクトリ階層にrefがない場合、このファイルの
中から探し、見つかればそれが使用されます。

   その後のブランチの更新では、常に ‘$GIT_DIR/refs’ ディレクトリ階層の下
に新しいファイルが作成されます。

   refが多すぎるリポジトリを処理するための推奨される方法は、refを
‘--all’ で一度パックし、ときどき ‘git pack-refs’ を実行することです。タ
グは定義上静止しており、変更されることは期待されていません。ブランチヘッ
ドは最初の ‘pack-refs --all’ でパックされますが、現在アクティブなブラン
チヘッドのみはアンパックされ、その後 ‘pack-refs’ ( ‘--all’ なし)ではアン
パックされたままになります。


OPTIONS
*******

‘--all’
     このコマンドはデフォルトでは、すでにパックされているすべてのタグと
     refをパックし、他のrefはそのままにします。これは、ブランチが積極的
     に開発されることが期待されており、そのヒントをパックしてもパフォー
     マンスが向上しないためです。このオプションを使用すると、ブランチの
     ヒントもパックされます。 歴史的な関心のある多くのブランチがあるリポ
     ジトリに役立ちます。

‘--no-prune’
     コマンドは通常、それらをパックした後、 ‘$GIT_DIR/refs’ 階層の下の緩
     いrefを削除します。このオプションは、そうしないように指示します。


BUGS
****

pack-refs メカニズムが導入される前に作成された古い文書では、 "branch
<branch> exists" という意味の場合でも ".git/refs/heads/<branch> file
exists" などと紹介される場合があります。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-patch-id,  Up: Top

Name
****

git-patch-id — パッチの一意のIDを計算します


Synopsis
********

     git patch-id [–stable | –unstable]


DESCRIPTION
***********

標準入力からパッチを読み取り、そのパッチIDを計算します。

   「パッチID」は、パッチに関連付けられたファイル差分のSHA-1の合計に過ぎ
ず、空白と行番号は無視されます。そのため、「適度に安定」していますが、同
時に適度に一意です。つまり、同じ「パッチID」を持つ2つのパッチは、ほぼ同
じものであることが保証されています。

   つまり、これを使用して、重複している可能性のあるコミットを探すことが
できます。

   _git diff-tree_ 出力を処理する場合、パッチの前にコミットのオブジェク
ト名が付いているという事実を利用して、2つの40バイトの16進文字列を出力し
ます。最初の文字列はパッチIDで、2番目の文字列はコミットIDです。これを使
用して、パッチIDからコミットIDへのマッピングを作成できます。


OPTIONS
*******

‘--stable’
     パッチIDとして「安定した」ハッシュの合計を使用します。 このオプショ
     ンを使用すると:

        • パッチを構成するファイル差分を並べ替えても、IDには影響しません
          。特に、 "-O<orderfile>" の異なる2つの設定で同じ2つのツリーを
          比較することによって生成された2つのパッチは、同じパッチIDにな
          ります。これにより、計算結果をキーとして使用して、 2本のツリー
          間の変更に関するメタ情報にインデックスを付ける事ができます。

        • 結果として、 "-O<orderfile>" を使用せずに取得されたdiff出力で
          使用された場合でも、 git 1.9 以前で生成された値、または「
          unstable」ハッシュ(以下 ‘--unstable’ を参照)が構成されたときに
          生成された値とは異なります。これにより、そのような「不安定な」
          または過去のパッチIDを格納している既存のデータベースが使用でき
          なくなります。

               patchid.stable が true に設定されている場合は、こちらがデフォルトになります。

‘--unstable’
     パッチIDとして「不安定な」ハッシュを使用します。このオプションを使
     用すると、生成される結果は git1.9 以前で生成される patch-id 値と互
     換性があります。git 1.9 以前で作成されたパッチIDを保存している既存
     のデータベースを使用しているユーザー(並べ替えられたパッチを処理しな
     いユーザー)は、このオプションを使用することをお勧めします。

          ※これがデフォルトです。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-prune-packed,  Up: Top

Name
****

git-prune-packed — すでにパックファイルにある余分なオブジェクトを削除し
ます


Synopsis
********

     git prune-packed [-n|–dry-run] [-q|–quiet]


DESCRIPTION
***********

このプログラムは、 パックファイルに現在存在するすべてのオブジェクトを、
‘$GIT_OBJECT_DIRECTORY’ で検索し、独立したオブジェクトディレクトリでも検
索します。

   余分なオブジェクトはすべて削除されます。

   パックは、個別に圧縮され、デルタ圧縮が適用され、単一のファイルに格納
され、関連付けられたインデックスファイルを持つオブジェクトのコレクション
です。

   パックは、ミラーシステム、バックアップエンジン、ディスクストレージな
どの負荷を軽減するために使用されます。


OPTIONS
*******

‘-n’
‘--dry-run’
     実際にオブジェクトを削除するのではなく、削除されるはずのオブジェク
     トの表示のみを行います。

‘-q’
‘--quiet’
     進行状況インジケーターを黙らせます。


SEE ALSO
********

git-pack-objects(1) git-repack(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-prune,  Up: Top

Name
****

git-prune — オブジェクトデータベースで、到達不能なすべてのオブジェクトを
剪定(prune)します


Synopsis
********

     git prune [-n] [-v] [–progress] [–expire <time>] [–] [<head>…]


DESCRIPTION
***********

     *Note*

     ほとんどの場合、ユーザーは _git prune_ を呼び出す _git gc_ を実行す
     る必要があります。 以下の「NOTES」セクションを参照してください。

   これは、 ‘refs/’ で使用可能なすべてのrefを使用して _git fsck
–unreachable_ を実行し、オプションでコマンドラインで指定されたオブジェク
トの追加セットを使用して、オブジェクトデータベースのこれらのヘッドオブジ
ェクトから到達できないすべてのアンパックされたオブジェクトを剪定
(prune)します。さらに、「git prune-packed」を実行することにより、パック
内にも同じモノがあるアンパックされたオブジェクトを剪定します。 また、ど
のrefからも到達できないエントリを .git/shallow から削除(removes)します。

   注意: 到達不能なパックされたオブジェクトが残ることに注意してください
。これが望ましくない場合は、 git-repack(1) を参照してください。


OPTIONS
*******

‘-n’
‘--dry-run’
     何も削除しません。何が削除される予定かを報告するだけです。

‘-v’
‘--verbose’
     削除されたすべてのオブジェクトを報告します。

‘--progress’
     進捗状況を表示します。

‘--expire <time>’
     <time> より古いルーズオブジェクトのみを期限切れにします。

‘--’
     これ以降の引数をオプションとして解釈しないでください。

<head>…
     我々の任意の参照から到達可能なオブジェクトに加えて、リストされた
     <head>s から到達可能なオブジェクトを保持します。


EXAMPLES
********

リポジトリで使用されていないオブジェクト、またはリポジトリから
‘.git/objects/info/alternates’ を介して借用しているオブジェクトを剪定
(prune)するには:

     $ git prune $(cd ../another && git rev-parse --all)


NOTES
*****

ほとんどの場合、ユーザーは「git prune」を直接呼び出す必要はありませんが
、代わりに「git gc」を呼び出す必要があります。これは、他の多くのハウスキ
ーピングタスクとともに剪定(plune)を処理します。

   剪定(prune)の対象と見なされるオブジェクトの説明については、「git
fsck」の ‘--unreachable’ オプションを参照してください。


SEE ALSO
********

git-fsck(1), git-gc(1), git-reflog(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-pull,  Up: Top

Name
****

git-pull — Fetch from and integrate with another repository or a local
branch


Synopsis
********

     git pull [<options>] [<repository> [<refspec>…]]


DESCRIPTION
***********

Incorporates changes from a remote repository into the current branch.
If the current branch is behind the remote, then by default it will
fast-forward the current branch to match the remote.  If the current
branch and the remote have diverged, the user needs to specify how to
reconcile the divergent branches with ‘--rebase’ or ‘--no-rebase’ (or
the corresponding configuration option in ‘pull.rebase’).

   More precisely, ‘git pull’ runs ‘git fetch’ with the given parameters
and then depending on configuration options or command line flags, will
call either ‘git rebase’ or ‘git merge’ to reconcile diverging branches.

   <repository> should be the name of a remote repository as passed to
git-fetch(1).  <refspec> can name an arbitrary remote ref (for example,
the name of a tag) or even a collection of refs with corresponding
remote-tracking branches (e.g., refs/heads/*:refs/remotes/origin/*), but
usually it is the name of a branch in the remote repository.

   Default values for <repository> and <branch> are read from the
"remote" and "merge" configuration for the current branch as set by
git-branch(1) ‘--track’.

   Assume the following history exists and the current branch is
"‘master’":

               A---B---C master on origin
              /
         D---E---F---G master
             ^
             origin/master in your repository

   Then "‘git pull’" will fetch and replay the changes from the remote
‘master’ branch since it diverged from the local ‘master’ (i.e., ‘E’)
until its current commit (‘C’) on top of ‘master’ and record the result
in a new commit along with the names of the two parent commits and a log
message from the user describing the changes.

               A---B---C origin/master
              /         \
         D---E---F---G---H master

   See git-merge(1) for details, including how conflicts are presented
and handled.

   In Git 1.7.0 or later, to cancel a conflicting merge, use ‘git reset
--merge’.  *Warning*: In older versions of Git, running _git pull_ with
uncommitted changes is discouraged: while possible, it leaves you in a
state that may be hard to back out of in the case of a conflict.

   If any of the remote changes overlap with local uncommitted changes,
the merge will be automatically canceled and the work tree untouched.
It is generally best to get any local changes in working order before
pulling or stash them away with git-stash(1).


OPTIONS
*******

‘-q’
‘--quiet’
     This is passed to both underlying git-fetch to squelch reporting of
     during transfer, and underlying git-merge to squelch output during
     merging.

‘-v’
‘--verbose’
     Pass –verbose to git-fetch and git-merge.

‘--[no-]recurse-submodules[=yes|on-demand|no]’
     This option controls if new commits of populated submodules should
     be fetched, and if the working trees of active submodules should be
     updated, too (see git-fetch(1), git-config(1) and gitmodules(5)).

     If the checkout is done via rebase, local submodule commits are
     rebased as well.

     If the update is done via merge, the submodule conflicts are
     resolved and checked out.


Options related to merging
==========================

‘--commit’
‘--no-commit’
     Perform the merge and commit the result.  This option can be used
     to override –no-commit.  Only useful when merging.

     With –no-commit perform the merge and stop just before creating a
     merge commit, to give the user a chance to inspect and further
     tweak the merge result before committing.

     Note that fast-forward updates do not create a merge commit and
     therefore there is no way to stop those merges with –no-commit.
     Thus, if you want to ensure your branch is not changed or updated
     by the merge command, use –no-ff with –no-commit.

‘--edit’
‘-e’
‘--no-edit’
     Invoke an editor before committing successful mechanical merge to
     further edit the auto-generated merge message, so that the user can
     explain and justify the merge.  The ‘--no-edit’ option can be used
     to accept the auto-generated message (this is generally
     discouraged).

     Older scripts may depend on the historical behaviour of not
     allowing the user to edit the merge log message.  They will see an
     editor opened when they run ‘git merge’.  To make it easier to
     adjust such scripts to the updated behaviour, the environment
     variable ‘GIT_MERGE_AUTOEDIT’ can be set to ‘no’ at the beginning
     of them.

‘--cleanup=<mode>’
     This option determines how the merge message will be cleaned up
     before committing.  See git-commit(1) for more details.  In
     addition, if the _<mode>_ is given a value of ‘scissors’, scissors
     will be appended to ‘MERGE_MSG’ before being passed on to the
     commit machinery in the case of a merge conflict.

‘--ff-only’
     Only update to the new history if there is no divergent local
     history.  This is the default when no method for reconciling
     divergent histories is provided (via the –rebase=* flags).

‘--ff’
‘--no-ff’
     When merging rather than rebasing, specifies how a merge is handled
     when the merged-in history is already a descendant of the current
     history.  If merging is requested, ‘--ff’ is the default unless
     merging an annotated (and possibly signed) tag that is not stored
     in its natural place in the ‘refs/tags/’ hierarchy, in which case
     ‘--no-ff’ is assumed.

     With ‘--ff’, when possible resolve the merge as a fast-forward
     (only update the branch pointer to match the merged branch; do not
     create a merge commit).  When not possible (when the merged-in
     history is not a descendant of the current history), create a merge
     commit.

     With ‘--no-ff’, create a merge commit in all cases, even when the
     merge could instead be resolved as a fast-forward.

‘-S[<keyid>]’
‘--gpg-sign[=<keyid>]’
‘--no-gpg-sign’
     GPG-sign the resulting merge commit.  The ‘keyid’ argument is
     optional and defaults to the committer identity; if specified, it
     must be stuck to the option without a space.  ‘--no-gpg-sign’ is
     useful to countermand both ‘commit.gpgSign’ configuration variable,
     and earlier ‘--gpg-sign’.

‘--log[=<n>]’
‘--no-log’
     In addition to branch names, populate the log message with one-line
     descriptions from at most <n> actual commits that are being merged.
     See also git-fmt-merge-msg(1).  Only useful when merging.

     With –no-log do not list one-line descriptions from the actual
     commits being merged.

‘--signoff’
‘--no-signoff’
     コミットログメッセージの最後に、コミッターによる「Signed-off-by」ト
     レーラーを追加します。signoffの意味は、コミットしているプロジェクト
     によって異なります。たとえば、コミッターがプロジェクトのライセンス
     に基づいて作品を提出する権利を持っていることを証明したり、開発者の
     原産地証明書などの寄稿者の代表に同意したりする場合があります。
     (LinuxカーネルおよびGitプロジェクトで使用されるものについては、
     http：//developercertificate.orgを参照してください)。プロジェクトで
     signoffがどのように使用されるかを理解するには、貢献しているプロジェ
     クトのドキュメントまたはリーダーシップ(leadership)を参照してくださ
     い。

     ‘--no-signoff’ オプションを使用すると、コマンドラインで以前の
     ‘--signoff’ オプションを無効にすることができます。

‘--stat’
‘-n’
‘--no-stat’
     Show a diffstat at the end of the merge.  The diffstat is also
     controlled by the configuration option merge.stat.

     With -n or –no-stat do not show a diffstat at the end of the merge.

‘--squash’
‘--no-squash’
     Produce the working tree and index state as if a real merge
     happened (except for the merge information), but do not actually
     make a commit, move the ‘HEAD’, or record ‘$GIT_DIR/MERGE_HEAD’ (to
     cause the next ‘git commit’ command to create a merge commit).
     This allows you to create a single commit on top of the current
     branch whose effect is the same as merging another branch (or more
     in case of an octopus).

     With –no-squash perform the merge and commit the result.  This
     option can be used to override –squash.

     With –squash, –commit is not allowed, and will fail.

     Only useful when merging.

‘--no-verify’
     This option bypasses the pre-merge and commit-msg hooks.  See also
     githooks(5).  Only useful when merging.

‘-s <strategy>’
‘--strategy=<strategy>’
     Use the given merge strategy; can be supplied more than once to
     specify them in the order they should be tried.  If there is no
     ‘-s’ option, a built-in list of strategies is used instead (‘ort’
     when merging a single head, ‘octopus’ otherwise).

‘-X <option>’
‘--strategy-option=<option>’
     Pass merge strategy specific option through to the merge strategy.

‘--verify-signatures’
‘--no-verify-signatures’
     Verify that the tip commit of the side branch being merged is
     signed with a valid key, i.e.  a key that has a valid uid: in the
     default trust model, this means the signing key has been signed by
     a trusted key.  If the tip commit of the side branch is not signed
     with a valid key, the merge is aborted.

     Only useful when merging.

‘--summary’
‘--no-summary’
     Synonyms to –stat and –no-stat; these are deprecated and will be
     removed in the future.

‘--autostash’
‘--no-autostash’
     Automatically create a temporary stash entry before the operation
     begins, record it in the special ref ‘MERGE_AUTOSTASH’ and apply it
     after the operation ends.  This means that you can run the
     operation on a dirty worktree.  However, use with care: the final
     stash application after a successful merge might result in
     non-trivial conflicts.

‘--allow-unrelated-histories’
     By default, ‘git merge’ command refuses to merge histories that do
     not share a common ancestor.  This option can be used to override
     this safety when merging histories of two projects that started
     their lives independently.  As that is a very rare occasion, no
     configuration variable to enable this by default exists and will
     not be added.

     Only useful when merging.

‘-r’
‘--rebase[=false|true|merges|preserve|interactive]’
     When true, rebase the current branch on top of the upstream branch
     after fetching.  If there is a remote-tracking branch corresponding
     to the upstream branch and the upstream branch was rebased since
     last fetched, the rebase uses that information to avoid rebasing
     non-local changes.

     When set to ‘merges’, rebase using ‘git rebase --rebase-merges’ so
     that the local merge commits are included in the rebase (see
     git-rebase(1) for details).

     When set to ‘preserve’ (deprecated in favor of ‘merges’), rebase
     with the ‘--preserve-merges’ option passed to ‘git rebase’ so that
     locally created merge commits will not be flattened.

     When false, merge the upstream branch into the current branch.

     When ‘interactive’, enable the interactive mode of rebase.

     See ‘pull.rebase’, ‘branch.<name>.rebase’ and
     ‘branch.autoSetupRebase’ in git-config(1) if you want to make ‘git
     pull’ always use ‘--rebase’ instead of merging.

          *Note*

          This is a potentially _dangerous_ mode of operation.  It
          rewrites history, which does not bode well when you published
          that history already.  Do *not* use this option unless you
          have read git-rebase(1) carefully.

‘--no-rebase’
     This is shorthand for –rebase=false.


Options related to fetching
===========================

‘--all’
     Fetch all remotes.

‘-a’
‘--append’
     Append ref names and object names of fetched refs to the existing
     contents of ‘.git/FETCH_HEAD’.  Without this option old data in
     ‘.git/FETCH_HEAD’ will be overwritten.

‘--atomic’
     Use an atomic transaction to update local refs.  Either all refs
     are updated, or on error, no refs are updated.

‘--depth=<depth>’
     Limit fetching to the specified number of commits from the tip of
     each remote branch history.  If fetching to a _shallow_ repository
     created by ‘git clone’ with ‘--depth=<depth>’ option (see
     git-clone(1)), deepen or shorten the history to the specified
     number of commits.  Tags for the deepened commits are not fetched.

‘--deepen=<depth>’
     Similar to –depth, except it specifies the number of commits from
     the current shallow boundary instead of from the tip of each remote
     branch history.

‘--shallow-since=<date>’
     Deepen or shorten the history of a shallow repository to include
     all reachable commits after <date>.

‘--shallow-exclude=<revision>’
     Deepen or shorten the history of a shallow repository to exclude
     commits reachable from a specified remote branch or tag.  This
     option can be specified multiple times.

‘--unshallow’
     If the source repository is complete, convert a shallow repository
     to a complete one, removing all the limitations imposed by shallow
     repositories.

     If the source repository is shallow, fetch as much as possible so
     that the current repository has the same history as the source
     repository.

‘--update-shallow’
     By default when fetching from a shallow repository, ‘git fetch’
     refuses refs that require updating .git/shallow.  This option
     updates .git/shallow and accept such refs.

‘--negotiation-tip=<commit|glob>’
     By default, Git will report, to the server, commits reachable from
     all local refs to find common commits in an attempt to reduce the
     size of the to-be-received packfile.  If specified, Git will only
     report commits reachable from the given tips.  This is useful to
     speed up fetches when the user knows which local ref is likely to
     have commits in common with the upstream ref being fetched.

     This option may be specified more than once; if so, Git will report
     commits reachable from any of the given commits.

     The argument to this option may be a glob on ref names, a ref, or
     the (possibly abbreviated) SHA-1 of a commit.  Specifying a glob is
     equivalent to specifying this option multiple times, one for each
     matching ref name.

     See also the ‘fetch.negotiationAlgorithm’ and ‘push.negotiate’
     configuration variables documented in git-config(1), and the
     ‘--negotiate-only’ option below.

‘--negotiate-only’
     Do not fetch anything from the server, and instead print the
     ancestors of the provided ‘--negotiation-tip=*’ arguments, which we
     have in common with the server.

     Internally this is used to implement the ‘push.negotiate’ option,
     see git-config(1).

‘--dry-run’
     Show what would be done, without making any changes.

‘-f’
‘--force’
     When _git fetch_ is used with ‘<src>:<dst>’ refspec it may refuse
     to update the local branch as discussed in the ‘<refspec>’ part of
     the git-fetch(1) documentation.  This option overrides that check.

‘-k’
‘--keep’
     Keep downloaded pack.

‘--prefetch’
     Modify the configured refspec to place all refs into the
     ‘refs/prefetch/’ namespace.  See the ‘prefetch’ task in
     git-maintenance(1).

‘-p’
‘--prune’
     Before fetching, remove any remote-tracking references that no
     longer exist on the remote.  Tags are not subject to pruning if
     they are fetched only because of the default tag auto-following or
     due to a –tags option.  However, if tags are fetched due to an
     explicit refspec (either on the command line or in the remote
     configuration, for example if the remote was cloned with the
     –mirror option), then they are also subject to pruning.  Supplying
     ‘--prune-tags’ is a shorthand for providing the tag refspec.

‘--no-tags’
     By default, tags that point at objects that are downloaded from the
     remote repository are fetched and stored locally.  This option
     disables this automatic tag following.  The default behavior for a
     remote may be specified with the remote.<name>.tagOpt setting.  See
     git-config(1).

‘--refmap=<refspec>’
     When fetching refs listed on the command line, use the specified
     refspec (can be given more than once) to map the refs to
     remote-tracking branches, instead of the values of ‘remote.*.fetch’
     configuration variables for the remote repository.  Providing an
     empty ‘<refspec>’ to the ‘--refmap’ option causes Git to ignore the
     configured refspecs and rely entirely on the refspecs supplied as
     command-line arguments.  See section on "Configured Remote-tracking
     Branches" for details.

‘-t’
‘--tags’
     Fetch all tags from the remote (i.e., fetch remote tags
     ‘refs/tags/*’ into local tags with the same name), in addition to
     whatever else would otherwise be fetched.  Using this option alone
     does not subject tags to pruning, even if –prune is used (though
     tags may be pruned anyway if they are also the destination of an
     explicit refspec; see ‘--prune’).

‘-j’
‘--jobs=<n>’
     Number of parallel children to be used for all forms of fetching.

     If the ‘--multiple’ option was specified, the different remotes
     will be fetched in parallel.  If multiple submodules are fetched,
     they will be fetched in parallel.  To control them independently,
     use the config settings ‘fetch.parallel’ and ‘submodule.fetchJobs’
     (see git-config(1)).

     Typically, parallel recursive and multi-remote fetches will be
     faster.  By default fetches are performed sequentially, not in
     parallel.

‘--set-upstream’
     If the remote is fetched successfully, add upstream (tracking)
     reference, used by argument-less git-pull(1) and other commands.
     For more information, see ‘branch.<name>.merge’ and
     ‘branch.<name>.remote’ in git-config(1).

‘--upload-pack <upload-pack>’
     When given, and the repository to fetch from is handled by _git
     fetch-pack_, ‘--exec=<upload-pack>’ is passed to the command to
     specify non-default path for the command run on the other end.

‘--progress’
     Progress status is reported on the standard error stream by default
     when it is attached to a terminal, unless -q is specified.  This
     flag forces progress status even if the standard error stream is
     not directed to a terminal.

‘-o <option>’
‘--server-option=<option>’
     Transmit the given string to the server when communicating using
     protocol version 2.  The given string must not contain a NUL or LF
     character.  The server’s handling of server options, including
     unknown ones, is server-specific.  When multiple
     ‘--server-option=<option>’ are given, they are all sent to the
     other side in the order listed on the command line.

‘--show-forced-updates’
     By default, git checks if a branch is force-updated during fetch.
     This can be disabled through fetch.showForcedUpdates, but the
     –show-forced-updates option guarantees this check occurs.  See
     git-config(1).

‘--no-show-forced-updates’
     By default, git checks if a branch is force-updated during fetch.
     Pass –no-show-forced-updates or set fetch.showForcedUpdates to
     false to skip this check for performance reasons.  If used during
     _git-pull_ the –ff-only option will still check for forced updates
     before attempting a fast-forward update.  See git-config(1).

‘-4’
‘--ipv4’
     Use IPv4 addresses only, ignoring IPv6 addresses.

‘-6’
‘--ipv6’
     Use IPv6 addresses only, ignoring IPv4 addresses.

<repository>
     フェッチまたはプル操作のソースである「リモート」リポジトリ。このパ
     ラメーターは、URL(以下の GIT URLS セクションを参照)またはリモートの
     名前(以下の REMOTES セクションを参照)のいずれかです。

<refspec>
     フェッチするrefと更新するローカルrefを指定します。コマンドラインに
     <refspec> がない場合、フェッチするrefは代わりに
     ‘remote.<repository>.fetch’ 変数から読み取られます。 (git-fetch(1)
     の 「CONFIGURED REMOTE-TRACKING BRANCHES」セクション参照)

     <refspec> パラメータの組織は、オプションのプラス ‘+’ に続いて ソー
     スの <src> 、コロン ‘:’ 宛先refの <dst> の順です。 <dst> が空の場合
     、コロン(‘:’)は省略できます。 <src> は通常、refですが、フルスペルの
     16進オブジェクト名にすることもできます。

     <refspec> の <src> には、単純なパターン一致を示すための ‘*’ が含ま
     れている場合があります。このようなrefspecは、同じプレフィックスを持
     つ任意のrefに一致するglobのように機能します。パターン<refspec>では
     、 <src> と <dst> の両方に ‘*’ が含まれている必要があります。 ‘*’ を
     ソースから一致したコンテンツに置き換えることにより、refを宛先にマッ
     ピングします。

     refspecの前に ‘^’ が付いている場合、それはネガティブのrefspecとして
     解釈されます。このようなrefspecは、フェッチするrefや更新するローカ
     ルrefを指定するのではなく、除外するrefを指定します。 refは、少なく
     とも1つのポジティブ(通常)のrefspecと一致し、ネガティブのrefspecと一
     致しない場合、一致すると見なされます。ネガティブのrefspecは、特定の
     refが含まれないように、パターンrefspecのスコープを制限するのに役立
     ちます。ネガティブのrefspecは、それ自体がパターンrefspecである可能
     性があります。 ただし、 <src> のみを含めることができ、 <dst> を指定
     することはできません。 フルスペルの16進オブジェクト名もサポートされ
     ていません。

     ‘tag <tag>’ は、 ‘refs/tags/<tag>:refs/tags/<tag>’ と同じ意味です。
     指定されたタグまでのすべてをフェッチするように要求します。

     <src> に一致するリモートrefがフェッチされ、 <dst> が空の文字列でな
     い場合は、それに一致するローカルrefを更新しようとします。

     その更新が ‘--force’ なしで許可されるかどうかは、フェッチ先のref名
     前空間、フェッチされるオブジェクトのタイプ、および更新が
     fast-forwardであると見なされるかどうかによって異なります。一般に、
     プッシュする場合と同じルールがフェッチに適用されます。それらが何で
     あるかについては、 git-push(1)の ‘<refspec>...’ セクションを参照し
     てください。 _git fetch_ に固有の例外ルールを以下に示します。

     Gitバージョン2.20までは、 git-push(1) でプッシュする場合とは異なり
     、 ‘refs/tags/*’ の更新は、 refspec に ‘+’ がなくても(または
     ‘--force’ 指定が無くても)受け入れられます。フェッチするとき、リモー
     トからのすべてのタグ更新を強制フェッチとしていました。Gitバージョン
     2.20以降では、 ‘refs/tags/*’ を更新するためのフェッチは、プッシュす
     る場合と同じように機能します。 つまり refspecに ‘+’ が無い場合(また
     は ‘--force’ が無い場合)、更新は拒否されます。

     git-push(1) でプッシュするときとは異なり、 ‘refs/{tags,heads}/*’ 以
     外の更新は、 refspecに ‘+’ がなくても(あるいは ‘--force’ 指定が無く
     ても)受け付けられます。例えば、ツリーオブジェクトとブロブを交換した
     り、あるコミットを、祖先を持たない別のコミットと交換したりできます
     。

     git-push(1) でプッシュする場合とは異なり、これらのルールを修正する
     構成はなく、 ‘pre-receive’ フックに類似した ‘pre-fetch’ フックのよ
     うなものはありません。

     git-push(1) を使用したプッシュと同様に、更新として許可されないもの
     に関する上記のすべてのルールは、refspec先頭にオプションで ‘+’ をに
     追加する(または ‘--force’ コマンドラインオプションを使用する)ことで
     オーバーライドできます。これに対する唯一の例外は、 ‘refs/heads/*’ 名
     前空間が非コミットオブジェクトを受け入れるように強制することはない
     ということです。

          *Note*

          フェッチするリモートブランチが定期的に巻き戻されてリベースされ
          ることがわかっている場合、その新しい先端は(最後にフェッチした
          ときにリモートトラッキングブランチに保存された)以前の先端の子
          孫ではないことが予想されます。あなたは ‘+’ 記号を使用して、そ
          のようなブランチにnon-fast-forwardの更新が必要であることを指示
          します。この操作でブランチがリポジトリで使用可能になることを決
          定または宣言する方法はありません。プルするユーザーは、これがブ
          ランチの予想される使用パターンであることを知っている必要があり
          ます。

          *Note*

          _git pull_ コマンドラインに直接複数の <refspec> をリストするこ
          とと、 <repository> の構成に複数の ‘remote.<repository>.fetch’
          エントリを含めることと、明示的な <refspec> パラメーターなしで
          _git pull_ コマンドを実行することには違いがあります。コマンド
          ラインに明示的にリストされている <refspec> は、フェッチ後に常
          に現在のブランチにマージされます。いいかえると、複数のリモート
          refをリストする場合 ‘git pull’ はOctopusマージを作成します。一
          方、コマンドラインに明示的な <refspec> パラメータをリストしな
          い場合 _git pull_ は ‘remote.<repository>.fetch’ 構成で見つか
          ったすべての <refspec> をフェッチし、最初に見つかった
          <refspec> のみを現在のブランチにマージします。これはリモート
          refからOctopusを作成することはめったに行われない為ですが、複数
          のリモートヘッドを追跡するために複数のリモートヘッドを一度にフ
          ェッチすると便利なことがよくあります。


GIT URLS
********

一般に、URLには、トランスポートプロトコル、リモートサーバーのアドレス、
およびリポジトリへのパスに関する情報が含まれています。トランスポートプロ
トコルによっては、一部の情報が欠落している場合があります。

   Gitはsshとgitとhttpとhttpsプロトコルをサポートします(さらにftpと
ftpsをフェッチに使用できますが、これは非効率的で非推奨です。使用しないで
ください)。

   ネイティブトランスポート(つまり、 git:// URL)は認証を行わないため、セ
キュリティで保護されていないネットワークでは注意して使用する必要がありま
す。

   以下の構文を使用できます:

   • ssh://[user@]host.xz[:port]/path/to/repo.git/

   • git://host.xz[:port]/path/to/repo.git/

   • http[s]://host.xz[:port]/path/to/repo.git/

   • ftp[s]://host.xz[:port]/path/to/repo.git/

   代替のscpのような構文をsshプロトコルで使用することもできます:

   • [user@]host.xz:path/to/repo.git/

   この構文は、最初のコロン(:)の前にスラッシュがない場合にのみ認識されま
す。これは、コロンを含むローカルパスを区別するのに役立ちます。たとえば、
ローカルパス ‘foo:bar’ を、絶対パスまたは ‘./foo:bar’ として指定して、
ssh url として誤って解釈されないようにすることができます。

   sshおよびgitプロトコルは、さらに ~username 拡張をサポートします:

   • ssh://[user@]host.xz[:port]/~[user]/path/to/repo.git/

   • git://host.xz[:port]/~[user]/path/to/repo.git/

   • [user@]host.xz:/~[user]/path/to/repo.git/

   Gitでもネイティブにサポートされているローカルリポジトリの場合、以下の
構文を使用できます:

   • /path/to/repo.git/

   • file:///path/to/repo.git/

   これらの2つの構文は、前者が ‘--local’ オプションの機能を含むクローン
作成の場合を除いて、ほとんど同等です。 詳細については、 git-clone(1) を
参照してください。

   「git clone」と「git fetch」と「git pull」は、「git push」と違って適
切なバンドルファイルを受け入れます。 git-bundle(1) を参照してください。

   Gitが特定のトランスポートプロトコルを処理する方法を知らない場合、
Gitは _remote-<transport>_ リモートヘルパー(存在する場合)を使用しようと
します。リモートヘルパーを明示的に要求するには、以下の構文を使用できます
:

   • <transport>::<address>

   ここで、 <address> は、パス、サーバーとパス、または呼び出されている特
定のリモートヘルパーによって認識される任意のURLのような文字列です。詳細
については、 gitremote-helpers(7) を参照してください。

   同じ名前のリモートリポジトリが多数あり、それらに異なる形式を使用する
場合(あなたの使用するURLが機能するURLに書き換えられるように)、以下の形式
の構成セクションを作成できます:

             [url "<actual url base>"]
                     insteadOf = <other url base>

   例えば、以下のようになります:

             [url "git://git.host.xz/"]
                     insteadOf = host.xz:/path/to/
                     insteadOf = work:

   "work:repo.git" や "host.xz:/path/to/repo.git" のようなURLは、任意の
コンテキストで、"git://git.host.xz/repo.git" に書き換えられます。

   プッシュ専用のURLを書き換えたい場合は、以下の形式の構成セクションを作
成できます:

             [url "<actual url base>"]
                     pushInsteadOf = <other url base>

   例えば、以下のようになります:

             [url "ssh://example.org/"]
                     pushInsteadOf = git://example.org/

   "git://example.org/path/to/repo.git" のようなURLは、プッシュの場合は
"ssh://example.org/path/to/repo.git" に書き換えられますが、プルは引き続
き元のURLのままです。


REMOTES
*******

‘<repository>’ 引数として、URLの代わりに以下のいずれかの名前を使用できま
す:

   • Git構成ファイル(configuration file)内のリモート(remote)として、
     ‘$GIT_DIR/config’ または

   • ‘$GIT_DIR/remotes’ ディレクトリ内のファイル または

   • ‘$GIT_DIR/branches’ ディレクトリ内のファイル

   これらはすべて、gitがデフォルトで使用するrefspecをそれぞれ含んでいる
ため、コマンドラインからrefspecを省略できます。


Named remote in configuration file
==================================

あなたは、 git-remote(1) を使うか、または git-config(1) を使うか、または
‘$GIT_DIR/config’ ファイルを手動で編集して、これ以前に構成したリモートの
名前から選択できます。このリモートのURLは、リポジトリへのアクセスに使用
されます。コマンドラインでrefspecを指定しない場合、このリモートの
refspecがデフォルトで使用されます。構成ファイルのエントリは以下のように
なります:

             [remote "<name>"]
                     url = <url>
                     pushurl = <pushurl>
                     push = <refspec>
                     fetch = <refspec>

   ‘<pushurl>’ はプッシュにのみ使用されます。 これはオプションであり、デ
フォルトは ‘<url>’ です。


Named file in $GIT_DIR/remotes
==============================

あなたは、 ‘$GIT_DIR/remotes’ でファイル名を指定できます。このファイルの
URLは、リポジトリへのアクセスに使用されます。コマンドラインでrefspecを指
定しない場合、このファイルのrefspecがデフォルトとして使用されます。この
ファイルの形式は以下のとおりです:

             URL: one of the above URL format
             Push: <refspec>
             Pull: <refspec>

   ‘Push:’ 行は _git push_ で使用され、 ‘Pull:’ 行は _git pull_ と _git
fetch_ で使用されます。追加のブランチマッピングのために、複数の ‘Push:’
および ‘Pull:’ 行を指定できます。


Named file in $GIT_DIR/branches
===============================

‘$GIT_DIR/branches’ でファイル名を指定できます。このファイルのURLは、リ
ポジトリへのアクセスに使用されます。 このファイルの形式は以下のとおりで
す:

             <url>#<head>

   ‘<url>’ は必須です。 ‘#<head>’ はオプションです。

   コマンドラインで指定しない場合、操作に応じて、gitは以下のrefspecのい
ずれかを使用します。 ‘<branch>’ は ‘$GIT_DIR/branchs’ 内のこのファイルの
名前であり、 ‘<head>`はデフォルトで `master’ になります。

   git fetch は以下を使用します:

             refs/heads/<head>:refs/heads/<branch>

   git push は以下を使用します:

             HEAD:refs/heads/<head>


MERGE STRATEGIES
****************

The merge mechanism (‘git merge’ and ‘git pull’ commands) allows the
backend _merge strategies_ to be chosen with ‘-s’ option.  Some
strategies can also take their own options, which can be passed by
giving ‘-X<option>’ arguments to ‘git merge’ and/or ‘git pull’.

ort
     This is the default merge strategy when pulling or merging one
     branch.  This strategy can only resolve two heads using a 3-way
     merge algorithm.  When there is more than one common ancestor that
     can be used for 3-way merge, it creates a merged tree of the common
     ancestors and uses that as the reference tree for the 3-way merge.
     This has been reported to result in fewer merge conflicts without
     causing mismerges by tests done on actual merge commits taken from
     Linux 2.6 kernel development history.  Additionally this strategy
     can detect and handle merges involving renames.  It does not make
     use of detected copies.  The name for this algorithm is an acronym
     ("Ostensibly Recursive’s Twin") and came from the fact that it was
     written as a replacement for the previous default algorithm,
     ‘recursive’.

     The _ort_ strategy can take the following options:

     ours
          This option forces conflicting hunks to be auto-resolved
          cleanly by favoring _our_ version.  Changes from the other
          tree that do not conflict with our side are reflected in the
          merge result.  For a binary file, the entire contents are
          taken from our side.

          This should not be confused with the _ours_ merge strategy,
          which does not even look at what the other tree contains at
          all.  It discards everything the other tree did, declaring
          _our_ history contains all that happened in it.

     theirs
          This is the opposite of _ours_; note that, unlike _ours_,
          there is no _theirs_ merge strategy to confuse this merge
          option with.

     ignore-space-change
     ignore-all-space
     ignore-space-at-eol
     ignore-cr-at-eol
          Treats lines with the indicated type of whitespace change as
          unchanged for the sake of a three-way merge.  Whitespace
          changes mixed with other changes to a line are not ignored.
          See also git-diff(1) ‘-b’, ‘-w’, ‘--ignore-space-at-eol’, and
          ‘--ignore-cr-at-eol’.

             • If _their_ version only introduces whitespace changes to
               a line, _our_ version is used;

             • If _our_ version introduces whitespace changes but
               _their_ version includes a substantial change, _their_
               version is used;

             • Otherwise, the merge proceeds in the usual way.

     renormalize
          This runs a virtual check-out and check-in of all three stages
          of a file when resolving a three-way merge.  This option is
          meant to be used when merging branches with different clean
          filters or end-of-line normalization rules.  See "Merging
          branches with differing checkin/checkout attributes" in
          gitattributes(5) for details.

     no-renormalize
          Disables the ‘renormalize’ option.  This overrides the
          ‘merge.renormalize’ configuration variable.

     find-renames[=<n>]
          Turn on rename detection, optionally setting the similarity
          threshold.  This is the default.  This overrides the
          _merge.renames_ configuration variable.  See also git-diff(1)
          ‘--find-renames’.

     rename-threshold=<n>
          Deprecated synonym for ‘find-renames=<n>’.

     subtree[=<path>]
          This option is a more advanced form of _subtree_ strategy,
          where the strategy makes a guess on how two trees must be
          shifted to match with each other when merging.  Instead, the
          specified path is prefixed (or stripped from the beginning) to
          make the shape of two trees to match.

recursive
     This can only resolve two heads using a 3-way merge algorithm.
     When there is more than one common ancestor that can be used for
     3-way merge, it creates a merged tree of the common ancestors and
     uses that as the reference tree for the 3-way merge.  This has been
     reported to result in fewer merge conflicts without causing
     mismerges by tests done on actual merge commits taken from Linux
     2.6 kernel development history.  Additionally this can detect and
     handle merges involving renames.  It does not make use of detected
     copies.  This was the default strategy for resolving two heads from
     Git v0.99.9k until v2.33.0.

     The _recursive_ strategy takes the same options as _ort_.  However,
     there are three additional options that _ort_ ignores (not
     documented above) that are potentially useful with the _recursive_
     strategy:

     patience
          Deprecated synonym for ‘diff-algorithm=patience’.

     diff-algorithm=[patience|minimal|histogram|myers]
          Use a different diff algorithm while merging, which can help
          avoid mismerges that occur due to unimportant matching lines
          (such as braces from distinct functions).  See also
          git-diff(1) ‘--diff-algorithm’.  Note that ‘ort’ specifically
          uses ‘diff-algorithm=histogram’, while ‘recursive’ defaults to
          the ‘diff.algorithm’ config setting.

     no-renames
          Turn off rename detection.  This overrides the ‘merge.renames’
          configuration variable.  See also git-diff(1) ‘--no-renames’.

resolve
     This can only resolve two heads (i.e.  the current branch and
     another branch you pulled from) using a 3-way merge algorithm.  It
     tries to carefully detect criss-cross merge ambiguities.  It does
     not handle renames.

octopus
     This resolves cases with more than two heads, but refuses to do a
     complex merge that needs manual resolution.  It is primarily meant
     to be used for bundling topic branch heads together.  This is the
     default merge strategy when pulling or merging more than one
     branch.

ours
     This resolves any number of heads, but the resulting tree of the
     merge is always that of the current branch head, effectively
     ignoring all changes from all other branches.  It is meant to be
     used to supersede old development history of side branches.  Note
     that this is different from the -Xours option to the _recursive_
     merge strategy.

subtree
     This is a modified ‘ort’ strategy.  When merging trees A and B, if
     B corresponds to a subtree of A, B is first adjusted to match the
     tree structure of A, instead of reading the trees at the same
     level.  This adjustment is also done to the common ancestor tree.

   With the strategies that use 3-way merge (including the default,
_ort_), if a change is made on both branches, but later reverted on one
of the branches, that change will be present in the merged result; some
people find this behavior confusing.  It occurs because only the heads
and the merge base are considered when performing a merge, not the
individual commits.  The merge algorithm therefore considers the
reverted change as no change at all, and substitutes the changed version
instead.


DEFAULT BEHAVIOUR
*****************

Often people use ‘git pull’ without giving any parameter.
Traditionally, this has been equivalent to saying ‘git pull origin’.
However, when configuration ‘branch.<name>.remote’ is present while on
branch ‘<name>’, that value is used instead of ‘origin’.

   In order to determine what URL to use to fetch from, the value of the
configuration ‘remote.<origin>.url’ is consulted and if there is not any
such variable, the value on the ‘URL:’ line in
‘$GIT_DIR/remotes/<origin>’ is used.

   In order to determine what remote branches to fetch (and optionally
store in the remote-tracking branches) when the command is run without
any refspec parameters on the command line, values of the configuration
variable ‘remote.<origin>.fetch’ are consulted, and if there aren’t any,
‘$GIT_DIR/remotes/<origin>’ is consulted and its ‘Pull:’ lines are used.
In addition to the refspec formats described in the OPTIONS section, you
can have a globbing refspec that looks like this:

     refs/heads/*:refs/remotes/origin/*

   A globbing refspec must have a non-empty RHS (i.e.  must store what
were fetched in remote-tracking branches), and its LHS and RHS must end
with ‘/*’.  The above specifies that all remote branches are tracked
using remote-tracking branches in ‘refs/remotes/origin/’ hierarchy under
the same name.

   The rule to determine which remote branch to merge after fetching is
a bit involved, in order not to break backward compatibility.

   If explicit refspecs were given on the command line of ‘git pull’,
they are all merged.

   When no refspec was given on the command line, then ‘git pull’ uses
the refspec from the configuration or ‘$GIT_DIR/remotes/<origin>’.  In
such cases, the following rules apply:

  1. If ‘branch.<name>.merge’ configuration for the current branch
     ‘<name>’ exists, that is the name of the branch at the remote site
     that is merged.

  2. If the refspec is a globbing one, nothing is merged.

  3. Otherwise the remote branch of the first refspec is merged.


EXAMPLES
********

   • Update the remote-tracking branches for the repository you cloned
     from, then merge one of them into your current branch:

          $ git pull
          $ git pull origin

     Normally the branch merged in is the HEAD of the remote repository,
     but the choice is determined by the branch.<name>.remote and
     branch.<name>.merge options; see git-config(1) for details.

   • Merge into the current branch the remote branch ‘next’:

          $ git pull origin next

     This leaves a copy of ‘next’ temporarily in FETCH_HEAD, and updates
     the remote-tracking branch ‘origin/next’.  The same can be done by
     invoking fetch and merge:

          $ git fetch origin
          $ git merge origin/next

   If you tried a pull which resulted in complex conflicts and would
want to start over, you can recover with _git reset_.


SECURITY
********

フェッチおよびプッシュプロトコルは、共有することを意図していない一方の側
が他方のリポジトリからデータを盗むのを防ぐようには設計されていません。悪
意のある者から保護する必要のあるプライベートデータがある場合、最善のオプ
ションはそれを別のリポジトリに保存することです。これは、クライアントとサ
ーバーの両方に適用されます。特に、サーバー上の名前空間は、読み取りアクセ
ス制御には効果的ではありません。リポジトリ全体への読み取りアクセスで信頼
できるクライアントにのみ、名前空間への読み取りアクセスを許可する必要があ
ります。

   既知の攻撃ベクトル(attack vectors)は以下のとおりです:

  1. 被害者は、明示的に共有することを意図していないオブジェクトのIDをア
     ドバタイズする "have" 行を送信しますが、他にもIDを持っている者が居
     る場合は、転送を最適化するために使用できます。攻撃者はオブジェクト
     ID Xを選択して盗み、refをXに送信しますが、被害者はすでにXのコンテン
     ツを持っているため、Xのコンテンツを送信する必要はありません。 これ
     で、被害者は攻撃者がXを持っていると信じ、Xのコンテンツを後で攻撃者
     に送り返します。 (この攻撃は、クライアントがアクセスできる名前空間
     にXへのrefを作成してフェッチすることにより、クライアントがサーバー
     上で実行するのが最も簡単です。サーバーがクライアント上で実行する最
     も可能性の高い方法は、Xをパブリックブランチにマージし、ユーザーがこ
     のブランチで追加の作業を行い、マージに気付かずにサーバーにプッシュ
     バックすることを期待します。)

  2. #1 と同様に、攻撃者は盗むオブジェクトID Xを選択します。被害者は、攻
     撃者がすでに持っているオブジェクトYを送信し、攻撃者はYではなくXを持
     っていると誤って主張するため、被害者はYをXに対するデルタとして送信
     します。デルタは、攻撃者にYに類似したXの領域を明らかにします。


BUGS
****

Using –recurse-submodules can only fetch new commits in already checked
out submodules right now.  When e.g.  upstream added a new submodule in
the just fetched commits of the superproject the submodule itself cannot
be fetched, making it impossible to check out that submodule later
without having to do a fetch again.  This is expected to be fixed in a
future Git version.


SEE ALSO
********

git-fetch(1), git-merge(1), git-config(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-push,  Up: Top

Name
****

git-push — Update remote refs along with associated objects


Synopsis
********

     git push [–all | –mirror | –tags] [–follow-tags] [–atomic] [-n | –dry-run] [–receive-pack=<git-receive-pack>]
                [–repo=<repository>] [-f | –force] [-d | –delete] [–prune] [-v | –verbose]
                [-u | –set-upstream] [-o <string> | –push-option=<string>]
                [–[no-]signed|–signed=(true|false|if-asked)]
                [–force-with-lease[=<refname>[:<expect>]] [–force-if-includes]]
                [–no-verify] [<repository> [<refspec>…]]


DESCRIPTION
***********

Updates remote refs using local refs, while sending objects necessary to
complete the given refs.

   You can make interesting things happen to a repository every time you
push into it, by setting up _hooks_ there.  See documentation for
git-receive-pack(1).

   When the command line does not specify where to push with the
‘<repository>’ argument, ‘branch.*.remote’ configuration for the current
branch is consulted to determine where to push.  If the configuration is
missing, it defaults to _origin_.

   When the command line does not specify what to push with
‘<refspec>...’ arguments or ‘--all’, ‘--mirror’, ‘--tags’ options, the
command finds the default ‘<refspec>’ by consulting ‘remote.*.push’
configuration, and if it is not found, honors ‘push.default’
configuration to decide what to push (See git-config(1) for the meaning
of ‘push.default’).

   When neither the command-line nor the configuration specify what to
push, the default behavior is used, which corresponds to the ‘simple’
value for ‘push.default’: the current branch is pushed to the
corresponding upstream branch, but as a safety measure, the push is
aborted if the upstream branch does not have the same name as the local
one.


OPTIONS
*******

<repository>
     The "remote" repository that is destination of a push operation.
     This parameter can be either a URL (see the section GIT URLS below)
     or the name of a remote (see the section REMOTES below).

<refspec>…
     Specify what destination ref to update with what source object.
     The format of a <refspec> parameter is an optional plus ‘+’,
     followed by the source object <src>, followed by a colon ‘:’,
     followed by the destination ref <dst>.

     The <src> is often the name of the branch you would want to push,
     but it can be any arbitrary "SHA-1 expression", such as ‘master~4’
     or ‘HEAD’ (see gitrevisions(7)).

     The <dst> tells which ref on the remote side is updated with this
     push.  Arbitrary expressions cannot be used here, an actual ref
     must be named.  If ‘git push [<repository>]’ without any
     ‘<refspec>’ argument is set to update some ref at the destination
     with ‘<src>’ with ‘remote.<repository>.push’ configuration
     variable, ‘:<dst>’ part can be omitted—such a push will update a
     ref that ‘<src>’ normally updates without any ‘<refspec>’ on the
     command line.  Otherwise, missing ‘:<dst>’ means to update the same
     ref as the ‘<src>’.

     If <dst> doesn’t start with ‘refs/’ (e.g.  ‘refs/heads/master’) we
     will try to infer where in ‘refs/*’ on the destination <repository>
     it belongs based on the type of <src> being pushed and whether
     <dst> is ambiguous.

        • If <dst> unambiguously refers to a ref on the <repository>
          remote, then push to that ref.

        • If <src> resolves to a ref starting with refs/heads/ or
          refs/tags/, then prepend that to <dst>.

        • Other ambiguity resolutions might be added in the future, but
          for now any other cases will error out with an error
          indicating what we tried, and depending on the
          ‘advice.pushUnqualifiedRefname’ configuration (see
          git-config(1)) suggest what refs/ namespace you may have
          wanted to push to.

     The object referenced by <src> is used to update the <dst>
     reference on the remote side.  Whether this is allowed depends on
     where in ‘refs/*’ the <dst> reference lives as described in detail
     below, in those sections "update" means any modifications except
     deletes, which as noted after the next few sections are treated
     differently.

     The ‘refs/heads/*’ namespace will only accept commit objects, and
     updates only if they can be fast-forwarded.

     The ‘refs/tags/*’ namespace will accept any kind of object (as
     commits, trees and blobs can be tagged), and any updates to them
     will be rejected.

     It’s possible to push any type of object to any namespace outside
     of ‘refs/{tags,heads}/*’.  In the case of tags and commits, these
     will be treated as if they were the commits inside ‘refs/heads/*’
     for the purposes of whether the update is allowed.

     I.e.  a fast-forward of commits and tags outside
     ‘refs/{tags,heads}/*’ is allowed, even in cases where what’s being
     fast-forwarded is not a commit, but a tag object which happens to
     point to a new commit which is a fast-forward of the commit the
     last tag (or commit) it’s replacing.  Replacing a tag with an
     entirely different tag is also allowed, if it points to the same
     commit, as well as pushing a peeled tag, i.e.  pushing the commit
     that existing tag object points to, or a new tag object which an
     existing commit points to.

     Tree and blob objects outside of ‘refs/{tags,heads}/*’ will be
     treated the same way as if they were inside ‘refs/tags/*’, any
     update of them will be rejected.

     All of the rules described above about what’s not allowed as an
     update can be overridden by adding an the optional leading ‘+’ to a
     refspec (or using ‘--force’ command line option).  The only
     exception to this is that no amount of forcing will make the
     ‘refs/heads/*’ namespace accept a non-commit object.  Hooks and
     configuration can also override or amend these rules, see e.g.
     ‘receive.denyNonFastForwards’ in git-config(1) and ‘pre-receive’
     and ‘update’ in githooks(5).

     Pushing an empty <src> allows you to delete the <dst> ref from the
     remote repository.  Deletions are always accepted without a leading
     ‘+’ in the refspec (or ‘--force’), except when forbidden by
     configuration or hooks.  See ‘receive.denyDeletes’ in git-config(1)
     and ‘pre-receive’ and ‘update’ in githooks(5).

     The special refspec ‘:’ (or ‘+:’ to allow non-fast-forward updates)
     directs Git to push "matching" branches: for every branch that
     exists on the local side, the remote side is updated if a branch of
     the same name already exists on the remote side.

     ‘tag <tag>’ means the same as ‘refs/tags/<tag>:refs/tags/<tag>’.

‘--all’
     Push all branches (i.e.  refs under ‘refs/heads/’); cannot be used
     with other <refspec>.

‘--prune’
     Remove remote branches that don’t have a local counterpart.  For
     example a remote branch ‘tmp’ will be removed if a local branch
     with the same name doesn’t exist any more.  This also respects
     refspecs, e.g.  ‘git push --prune remote refs/heads/*:refs/tmp/*’
     would make sure that remote ‘refs/tmp/foo’ will be removed if
     ‘refs/heads/foo’ doesn’t exist.

‘--mirror’
     Instead of naming each ref to push, specifies that all refs under
     ‘refs/’ (which includes but is not limited to ‘refs/heads/’,
     ‘refs/remotes/’, and ‘refs/tags/’) be mirrored to the remote
     repository.  Newly created local refs will be pushed to the remote
     end, locally updated refs will be force updated on the remote end,
     and deleted refs will be removed from the remote end.  This is the
     default if the configuration option ‘remote.<remote>.mirror’ is
     set.

‘-n’
‘--dry-run’
     Do everything except actually send the updates.

‘--porcelain’
     Produce machine-readable output.  The output status line for each
     ref will be tab-separated and sent to stdout instead of stderr.
     The full symbolic names of the refs will be given.

‘-d’
‘--delete’
     All listed refs are deleted from the remote repository.  This is
     the same as prefixing all refs with a colon.

‘--tags’
     All refs under ‘refs/tags’ are pushed, in addition to refspecs
     explicitly listed on the command line.

‘--follow-tags’
     Push all the refs that would be pushed without this option, and
     also push annotated tags in ‘refs/tags’ that are missing from the
     remote but are pointing at commit-ish that are reachable from the
     refs being pushed.  This can also be specified with configuration
     variable ‘push.followTags’.  For more information, see
     ‘push.followTags’ in git-config(1).

‘--[no-]signed’
‘--signed=(true|false|if-asked)’
     GPG-sign the push request to update refs on the receiving side, to
     allow it to be checked by the hooks and/or be logged.  If ‘false’
     or ‘--no-signed’, no signing will be attempted.  If ‘true’ or
     ‘--signed’, the push will fail if the server does not support
     signed pushes.  If set to ‘if-asked’, sign if and only if the
     server supports signed pushes.  The push will also fail if the
     actual call to ‘gpg --sign’ fails.  See git-receive-pack(1) for the
     details on the receiving end.

‘--[no-]atomic’
     Use an atomic transaction on the remote side if available.  Either
     all refs are updated, or on error, no refs are updated.  If the
     server does not support atomic pushes the push will fail.

‘-o <option>’
‘--push-option=<option>’
     Transmit the given string to the server, which passes them to the
     pre-receive as well as the post-receive hook.  The given string
     must not contain a NUL or LF character.  When multiple
     ‘--push-option=<option>’ are given, they are all sent to the other
     side in the order listed on the command line.  When no
     ‘--push-option=<option>’ is given from the command line, the values
     of configuration variable ‘push.pushOption’ are used instead.

‘--receive-pack=<git-receive-pack>’
‘--exec=<git-receive-pack>’
     Path to the _git-receive-pack_ program on the remote end.
     Sometimes useful when pushing to a remote repository over ssh, and
     you do not have the program in a directory on the default $PATH.

‘--[no-]force-with-lease’
‘--force-with-lease=<refname>’
‘--force-with-lease=<refname>:<expect>’
     Usually, "git push" refuses to update a remote ref that is not an
     ancestor of the local ref used to overwrite it.

     This option overrides this restriction if the current value of the
     remote ref is the expected value.  "git push" fails otherwise.

     Imagine that you have to rebase what you have already published.
     You will have to bypass the "must fast-forward" rule in order to
     replace the history you originally published with the rebased
     history.  If somebody else built on top of your original history
     while you are rebasing, the tip of the branch at the remote may
     advance with their commit, and blindly pushing with ‘--force’ will
     lose their work.

     This option allows you to say that you expect the history you are
     updating is what you rebased and want to replace.  If the remote
     ref still points at the commit you specified, you can be sure that
     no other people did anything to the ref.  It is like taking a
     "lease" on the ref without explicitly locking it, and the remote
     ref is updated only if the "lease" is still valid.

     ‘--force-with-lease’ alone, without specifying the details, will
     protect all remote refs that are going to be updated by requiring
     their current value to be the same as the remote-tracking branch we
     have for them.

     ‘--force-with-lease=<refname>’, without specifying the expected
     value, will protect the named ref (alone), if it is going to be
     updated, by requiring its current value to be the same as the
     remote-tracking branch we have for it.

     ‘--force-with-lease=<refname>:<expect>’ will protect the named ref
     (alone), if it is going to be updated, by requiring its current
     value to be the same as the specified value ‘<expect>’ (which is
     allowed to be different from the remote-tracking branch we have for
     the refname, or we do not even have to have such a remote-tracking
     branch when this form is used).  If ‘<expect>’ is the empty string,
     then the named ref must not already exist.

     Note that all forms other than
     ‘--force-with-lease=<refname>:<expect>’ that specifies the expected
     current value of the ref explicitly are still experimental and
     their semantics may change as we gain experience with this feature.

     "–no-force-with-lease" will cancel all the previous
     –force-with-lease on the command line.

     A general note on safety: supplying this option without an expected
     value, i.e.  as ‘--force-with-lease’ or
     ‘--force-with-lease=<refname>’ interacts very badly with anything
     that implicitly runs ‘git fetch’ on the remote to be pushed to in
     the background, e.g.  ‘git fetch origin’ on your repository in a
     cronjob.

     The protection it offers over ‘--force’ is ensuring that subsequent
     changes your work wasn’t based on aren’t clobbered, but this is
     trivially defeated if some background process is updating refs in
     the background.  We don’t have anything except the remote tracking
     info to go by as a heuristic for refs you’re expected to have seen
     & are willing to clobber.

     If your editor or some other system is running ‘git fetch’ in the
     background for you a way to mitigate this is to simply set up
     another remote:

          git remote add origin-push $(git config remote.origin.url)
          git fetch origin-push

     Now when the background process runs ‘git fetch origin’ the
     references on ‘origin-push’ won’t be updated, and thus commands
     like:

          git push --force-with-lease origin-push

     Will fail unless you manually run ‘git fetch origin-push’.  This
     method is of course entirely defeated by something that runs ‘git
     fetch --all’, in that case you’d need to either disable it or do
     something more tedious like:

          git fetch              # update 'master' from remote
          git tag base master    # mark our base point
          git rebase -i master   # rewrite some commits
          git push --force-with-lease=master:base master:master

     I.e.  create a ‘base’ tag for versions of the upstream code that
     you’ve seen and are willing to overwrite, then rewrite history, and
     finally force push changes to ‘master’ if the remote version is
     still at ‘base’, regardless of what your local
     ‘remotes/origin/master’ has been updated to in the background.

     Alternatively, specifying ‘--force-if-includes’ as an ancillary
     option along with ‘--force-with-lease[=<refname>]’ (i.e., without
     saying what exact commit the ref on the remote side must be
     pointing at, or which refs on the remote side are being protected)
     at the time of "push" will verify if updates from the
     remote-tracking refs that may have been implicitly updated in the
     background are integrated locally before allowing a forced update.

‘-f’
‘--force’
     Usually, the command refuses to update a remote ref that is not an
     ancestor of the local ref used to overwrite it.  Also, when
     ‘--force-with-lease’ option is used, the command refuses to update
     a remote ref whose current value does not match what is expected.

     This flag disables these checks, and can cause the remote
     repository to lose commits; use it with care.

     Note that ‘--force’ applies to all the refs that are pushed, hence
     using it with ‘push.default’ set to ‘matching’ or with multiple
     push destinations configured with ‘remote.*.push’ may overwrite
     refs other than the current branch (including local refs that are
     strictly behind their remote counterpart).  To force a push to only
     one branch, use a ‘+’ in front of the refspec to push (e.g ‘git
     push origin +master’ to force a push to the ‘master’ branch).  See
     the ‘<refspec>...’ section above for details.

‘--[no-]force-if-includes’
     Force an update only if the tip of the remote-tracking ref has been
     integrated locally.

     This option enables a check that verifies if the tip of the
     remote-tracking ref is reachable from one of the "reflog" entries
     of the local branch based in it for a rewrite.  The check ensures
     that any updates from the remote have been incorporated locally by
     rejecting the forced update if that is not the case.

     If the option is passed without specifying ‘--force-with-lease’, or
     specified along with ‘--force-with-lease=<refname>:<expect>’, it is
     a "no-op".

     Specifying ‘--no-force-if-includes’ disables this behavior.

‘--repo=<repository>’
     This option is equivalent to the <repository> argument.  If both
     are specified, the command-line argument takes precedence.

‘-u’
‘--set-upstream’
     For every branch that is up to date or successfully pushed, add
     upstream (tracking) reference, used by argument-less git-pull(1)
     and other commands.  For more information, see
     ‘branch.<name>.merge’ in git-config(1).

‘--[no-]thin’
     These options are passed to git-send-pack(1).  A thin transfer
     significantly reduces the amount of sent data when the sender and
     receiver share many of the same objects in common.  The default is
     ‘--thin’.

‘-q’
‘--quiet’
     Suppress all output, including the listing of updated refs, unless
     an error occurs.  Progress is not reported to the standard error
     stream.

‘-v’
‘--verbose’
     Run verbosely.

‘--progress’
     Progress status is reported on the standard error stream by default
     when it is attached to a terminal, unless -q is specified.  This
     flag forces progress status even if the standard error stream is
     not directed to a terminal.

‘--no-recurse-submodules’
‘--recurse-submodules=check|on-demand|only|no’
     May be used to make sure all submodule commits used by the
     revisions to be pushed are available on a remote-tracking branch.
     If _check_ is used Git will verify that all submodule commits that
     changed in the revisions to be pushed are available on at least one
     remote of the submodule.  If any commits are missing the push will
     be aborted and exit with non-zero status.  If _on-demand_ is used
     all submodules that changed in the revisions to be pushed will be
     pushed.  If on-demand was not able to push all necessary revisions
     it will also be aborted and exit with non-zero status.  If _only_
     is used all submodules will be recursively pushed while the
     superproject is left unpushed.  A value of _no_ or using
     ‘--no-recurse-submodules’ can be used to override the
     push.recurseSubmodules configuration variable when no submodule
     recursion is required.

‘--[no-]verify’
     Toggle the pre-push hook (see githooks(5)).  The default is
     –verify, giving the hook a chance to prevent the push.  With
     –no-verify, the hook is bypassed completely.

‘-4’
‘--ipv4’
     Use IPv4 addresses only, ignoring IPv6 addresses.

‘-6’
‘--ipv6’
     Use IPv6 addresses only, ignoring IPv4 addresses.


GIT URLS
********

一般に、URLには、トランスポートプロトコル、リモートサーバーのアドレス、
およびリポジトリへのパスに関する情報が含まれています。トランスポートプロ
トコルによっては、一部の情報が欠落している場合があります。

   Gitはsshとgitとhttpとhttpsプロトコルをサポートします(さらにftpと
ftpsをフェッチに使用できますが、これは非効率的で非推奨です。使用しないで
ください)。

   ネイティブトランスポート(つまり、 git:// URL)は認証を行わないため、セ
キュリティで保護されていないネットワークでは注意して使用する必要がありま
す。

   以下の構文を使用できます:

   • ssh://[user@]host.xz[:port]/path/to/repo.git/

   • git://host.xz[:port]/path/to/repo.git/

   • http[s]://host.xz[:port]/path/to/repo.git/

   • ftp[s]://host.xz[:port]/path/to/repo.git/

   代替のscpのような構文をsshプロトコルで使用することもできます:

   • [user@]host.xz:path/to/repo.git/

   この構文は、最初のコロン(:)の前にスラッシュがない場合にのみ認識されま
す。これは、コロンを含むローカルパスを区別するのに役立ちます。たとえば、
ローカルパス ‘foo:bar’ を、絶対パスまたは ‘./foo:bar’ として指定して、
ssh url として誤って解釈されないようにすることができます。

   sshおよびgitプロトコルは、さらに ~username 拡張をサポートします:

   • ssh://[user@]host.xz[:port]/~[user]/path/to/repo.git/

   • git://host.xz[:port]/~[user]/path/to/repo.git/

   • [user@]host.xz:/~[user]/path/to/repo.git/

   Gitでもネイティブにサポートされているローカルリポジトリの場合、以下の
構文を使用できます:

   • /path/to/repo.git/

   • file:///path/to/repo.git/

   これらの2つの構文は、前者が ‘--local’ オプションの機能を含むクローン
作成の場合を除いて、ほとんど同等です。 詳細については、 git-clone(1) を
参照してください。

   「git clone」と「git fetch」と「git pull」は、「git push」と違って適
切なバンドルファイルを受け入れます。 git-bundle(1) を参照してください。

   Gitが特定のトランスポートプロトコルを処理する方法を知らない場合、
Gitは _remote-<transport>_ リモートヘルパー(存在する場合)を使用しようと
します。リモートヘルパーを明示的に要求するには、以下の構文を使用できます
:

   • <transport>::<address>

   ここで、 <address> は、パス、サーバーとパス、または呼び出されている特
定のリモートヘルパーによって認識される任意のURLのような文字列です。詳細
については、 gitremote-helpers(7) を参照してください。

   同じ名前のリモートリポジトリが多数あり、それらに異なる形式を使用する
場合(あなたの使用するURLが機能するURLに書き換えられるように)、以下の形式
の構成セクションを作成できます:

             [url "<actual url base>"]
                     insteadOf = <other url base>

   例えば、以下のようになります:

             [url "git://git.host.xz/"]
                     insteadOf = host.xz:/path/to/
                     insteadOf = work:

   "work:repo.git" や "host.xz:/path/to/repo.git" のようなURLは、任意の
コンテキストで、"git://git.host.xz/repo.git" に書き換えられます。

   プッシュ専用のURLを書き換えたい場合は、以下の形式の構成セクションを作
成できます:

             [url "<actual url base>"]
                     pushInsteadOf = <other url base>

   例えば、以下のようになります:

             [url "ssh://example.org/"]
                     pushInsteadOf = git://example.org/

   "git://example.org/path/to/repo.git" のようなURLは、プッシュの場合は
"ssh://example.org/path/to/repo.git" に書き換えられますが、プルは引き続
き元のURLのままです。


REMOTES
*******

‘<repository>’ 引数として、URLの代わりに以下のいずれかの名前を使用できま
す:

   • Git構成ファイル(configuration file)内のリモート(remote)として、
     ‘$GIT_DIR/config’ または

   • ‘$GIT_DIR/remotes’ ディレクトリ内のファイル または

   • ‘$GIT_DIR/branches’ ディレクトリ内のファイル

   これらはすべて、gitがデフォルトで使用するrefspecをそれぞれ含んでいる
ため、コマンドラインからrefspecを省略できます。


Named remote in configuration file
==================================

あなたは、 git-remote(1) を使うか、または git-config(1) を使うか、または
‘$GIT_DIR/config’ ファイルを手動で編集して、これ以前に構成したリモートの
名前から選択できます。このリモートのURLは、リポジトリへのアクセスに使用
されます。コマンドラインでrefspecを指定しない場合、このリモートの
refspecがデフォルトで使用されます。構成ファイルのエントリは以下のように
なります:

             [remote "<name>"]
                     url = <url>
                     pushurl = <pushurl>
                     push = <refspec>
                     fetch = <refspec>

   ‘<pushurl>’ はプッシュにのみ使用されます。 これはオプションであり、デ
フォルトは ‘<url>’ です。


Named file in $GIT_DIR/remotes
==============================

あなたは、 ‘$GIT_DIR/remotes’ でファイル名を指定できます。このファイルの
URLは、リポジトリへのアクセスに使用されます。コマンドラインでrefspecを指
定しない場合、このファイルのrefspecがデフォルトとして使用されます。この
ファイルの形式は以下のとおりです:

             URL: one of the above URL format
             Push: <refspec>
             Pull: <refspec>

   ‘Push:’ 行は _git push_ で使用され、 ‘Pull:’ 行は _git pull_ と _git
fetch_ で使用されます。追加のブランチマッピングのために、複数の ‘Push:’
および ‘Pull:’ 行を指定できます。


Named file in $GIT_DIR/branches
===============================

‘$GIT_DIR/branches’ でファイル名を指定できます。このファイルのURLは、リ
ポジトリへのアクセスに使用されます。 このファイルの形式は以下のとおりで
す:

             <url>#<head>

   ‘<url>’ は必須です。 ‘#<head>’ はオプションです。

   コマンドラインで指定しない場合、操作に応じて、gitは以下のrefspecのい
ずれかを使用します。 ‘<branch>’ は ‘$GIT_DIR/branchs’ 内のこのファイルの
名前であり、 ‘<head>`はデフォルトで `master’ になります。

   git fetch は以下を使用します:

             refs/heads/<head>:refs/heads/<branch>

   git push は以下を使用します:

             HEAD:refs/heads/<head>


OUTPUT
******

The output of "git push" depends on the transport method used; this
section describes the output when pushing over the Git protocol (either
locally or via ssh).

   The status of the push is output in tabular form, with each line
representing the status of a single ref.  Each line is of the form:

      <flag> <summary> <from> -> <to> (<reason>)

   If –porcelain is used, then each line of the output is of the form:

      <flag> \t <from>:<to> \t <summary> (<reason>)

   The status of up-to-date refs is shown only if –porcelain or –verbose
option is used.

flag
     A single character indicating the status of the ref:

     (space)
          for a successfully pushed fast-forward;

     ‘+’
          for a successful forced update;

     ‘-’
          for a successfully deleted ref;

     ‘*’
          for a successfully pushed new ref;

     ‘!’
          for a ref that was rejected or failed to push; and

     ‘=’
          for a ref that was up to date and did not need pushing.

summary
     For a successfully pushed ref, the summary shows the old and new
     values of the ref in a form suitable for using as an argument to
     ‘git log’ (this is ‘<old>..<new>’ in most cases, and
     ‘<old>...<new>’ for forced non-fast-forward updates).

     For a failed update, more details are given:

     rejected
          Git did not try to send the ref at all, typically because it
          is not a fast-forward and you did not force the update.

     remote rejected
          The remote end refused the update.  Usually caused by a hook
          on the remote side, or because the remote repository has one
          of the following safety options in effect:
          ‘receive.denyCurrentBranch’ (for pushes to the checked out
          branch), ‘receive.denyNonFastForwards’ (for forced
          non-fast-forward updates), ‘receive.denyDeletes’ or
          ‘receive.denyDeleteCurrent’.  See git-config(1).

     remote failure
          The remote end did not report the successful update of the
          ref, perhaps because of a temporary error on the remote side,
          a break in the network connection, or other transient error.

from
     The name of the local ref being pushed, minus its ‘refs/<type>/’
     prefix.  In the case of deletion, the name of the local ref is
     omitted.

to
     The name of the remote ref being updated, minus its ‘refs/<type>/’
     prefix.

reason
     A human-readable explanation.  In the case of successfully pushed
     refs, no explanation is needed.  For a failed ref, the reason for
     failure is described.


NOTE ABOUT FAST-FORWARDS
************************

When an update changes a branch (or more in general, a ref) that used to
point at commit A to point at another commit B, it is called a
fast-forward update if and only if B is a descendant of A.

   In a fast-forward update from A to B, the set of commits that the
original commit A built on top of is a subset of the commits the new
commit B builds on top of.  Hence, it does not lose any history.

   In contrast, a non-fast-forward update will lose history.  For
example, suppose you and somebody else started at the same commit X, and
you built a history leading to commit B while the other person built a
history leading to commit A. The history looks like this:

           B
          /
      ---X---A

   Further suppose that the other person already pushed changes leading
to A back to the original repository from which you two obtained the
original commit X.

   The push done by the other person updated the branch that used to
point at commit X to point at commit A. It is a fast-forward.

   But if you try to push, you will attempt to update the branch (that
now points at A) with commit B. This does _not_ fast-forward.  If you
did so, the changes introduced by commit A will be lost, because
everybody will now start building on top of B.

   The command by default does not allow an update that is not a
fast-forward to prevent such loss of history.

   If you do not want to lose your work (history from X to B) or the
work by the other person (history from X to A), you would need to first
fetch the history from the repository, create a history that contains
changes done by both parties, and push the result back.

   You can perform "git pull", resolve potential conflicts, and "git
push" the result.  A "git pull" will create a merge commit C between
commits A and B.

           B---C
          /   /
      ---X---A

   Updating A with the resulting merge commit will fast-forward and your
push will be accepted.

   Alternatively, you can rebase your change between X and B on top of
A, with "git pull –rebase", and push the result back.  The rebase will
create a new commit D that builds the change between X and B on top of
A.

           B   D
          /   /
      ---X---A

   Again, updating A with this commit will fast-forward and your push
will be accepted.

   There is another common situation where you may encounter
non-fast-forward rejection when you try to push, and it is possible even
when you are pushing into a repository nobody else pushes into.  After
you push commit A yourself (in the first picture in this section),
replace it with "git commit –amend" to produce commit B, and you try to
push it out, because forgot that you have pushed A out already.  In such
a case, and only if you are certain that nobody in the meantime fetched
your earlier commit A (and started building on top of it), you can run
"git push –force" to overwrite it.  In other words, "git push –force" is
a method reserved for a case where you do mean to lose history.


EXAMPLES
********

‘git push’
     Works like ‘git push <remote>’, where <remote> is the current
     branch’s remote (or ‘origin’, if no remote is configured for the
     current branch).

‘git push origin’
     Without additional configuration, pushes the current branch to the
     configured upstream (‘branch.<name>.merge’ configuration variable)
     if it has the same name as the current branch, and errors out
     without pushing otherwise.

     The default behavior of this command when no <refspec> is given can
     be configured by setting the ‘push’ option of the remote, or the
     ‘push.default’ configuration variable.

     For example, to default to pushing only the current branch to
     ‘origin’ use ‘git config remote.origin.push HEAD’.  Any valid
     <refspec> (like the ones in the examples below) can be configured
     as the default for ‘git push origin’.

‘git push origin :’
     Push "matching" branches to ‘origin’.  See <refspec> in the OPTIONS
     (*note [OPTIONS]::) section above for a description of "matching"
     branches.

‘git push origin master’
     Find a ref that matches ‘master’ in the source repository (most
     likely, it would find ‘refs/heads/master’), and update the same ref
     (e.g.  ‘refs/heads/master’) in ‘origin’ repository with it.  If
     ‘master’ did not exist remotely, it would be created.

‘git push origin HEAD’
     A handy way to push the current branch to the same name on the
     remote.

‘git push mothership master:satellite/master dev:satellite/dev’
     Use the source ref that matches ‘master’ (e.g.
     ‘refs/heads/master’) to update the ref that matches
     ‘satellite/master’ (most probably ‘refs/remotes/satellite/master’)
     in the ‘mothership’ repository; do the same for ‘dev’ and
     ‘satellite/dev’.

     See the section describing ‘<refspec>...’ above for a discussion of
     the matching semantics.

     This is to emulate ‘git fetch’ run on the ‘mothership’ using ‘git
     push’ that is run in the opposite direction in order to integrate
     the work done on ‘satellite’, and is often necessary when you can
     only make connection in one way (i.e.  satellite can ssh into
     mothership but mothership cannot initiate connection to satellite
     because the latter is behind a firewall or does not run sshd).

     After running this ‘git push’ on the ‘satellite’ machine, you would
     ssh into the ‘mothership’ and run ‘git merge’ there to complete the
     emulation of ‘git pull’ that were run on ‘mothership’ to pull
     changes made on ‘satellite’.

‘git push origin HEAD:master’
     Push the current branch to the remote ref matching ‘master’ in the
     ‘origin’ repository.  This form is convenient to push the current
     branch without thinking about its local name.

‘git push origin master:refs/heads/experimental’
     Create the branch ‘experimental’ in the ‘origin’ repository by
     copying the current ‘master’ branch.  This form is only needed to
     create a new branch or tag in the remote repository when the local
     name and the remote name are different; otherwise, the ref name on
     its own will work.

‘git push origin :experimental’
     Find a ref that matches ‘experimental’ in the ‘origin’ repository
     (e.g.  ‘refs/heads/experimental’), and delete it.

‘git push origin +dev:master’
     Update the origin repository’s master branch with the dev branch,
     allowing non-fast-forward updates.  *This can leave unreferenced
     commits dangling in the origin repository.*  Consider the following
     situation, where a fast-forward is not possible:

                      o---o---o---A---B  origin/master
                               \
                                X---Y---Z  dev

     The above command would change the origin repository to

                                A---B  (unnamed branch)
                               /
                      o---o---o---X---Y---Z  master

     Commits A and B would no longer belong to a branch with a symbolic
     name, and so would be unreachable.  As such, these commits would be
     removed by a ‘git gc’ command on the origin repository.


SECURITY
********

フェッチおよびプッシュプロトコルは、共有することを意図していない一方の側
が他方のリポジトリからデータを盗むのを防ぐようには設計されていません。悪
意のある者から保護する必要のあるプライベートデータがある場合、最善のオプ
ションはそれを別のリポジトリに保存することです。これは、クライアントとサ
ーバーの両方に適用されます。特に、サーバー上の名前空間は、読み取りアクセ
ス制御には効果的ではありません。リポジトリ全体への読み取りアクセスで信頼
できるクライアントにのみ、名前空間への読み取りアクセスを許可する必要があ
ります。

   既知の攻撃ベクトル(attack vectors)は以下のとおりです:

  1. 被害者は、明示的に共有することを意図していないオブジェクトのIDをア
     ドバタイズする "have" 行を送信しますが、他にもIDを持っている者が居
     る場合は、転送を最適化するために使用できます。攻撃者はオブジェクト
     ID Xを選択して盗み、refをXに送信しますが、被害者はすでにXのコンテン
     ツを持っているため、Xのコンテンツを送信する必要はありません。 これ
     で、被害者は攻撃者がXを持っていると信じ、Xのコンテンツを後で攻撃者
     に送り返します。 (この攻撃は、クライアントがアクセスできる名前空間
     にXへのrefを作成してフェッチすることにより、クライアントがサーバー
     上で実行するのが最も簡単です。サーバーがクライアント上で実行する最
     も可能性の高い方法は、Xをパブリックブランチにマージし、ユーザーがこ
     のブランチで追加の作業を行い、マージに気付かずにサーバーにプッシュ
     バックすることを期待します。)

  2. #1 と同様に、攻撃者は盗むオブジェクトID Xを選択します。被害者は、攻
     撃者がすでに持っているオブジェクトYを送信し、攻撃者はYではなくXを持
     っていると誤って主張するため、被害者はYをXに対するデルタとして送信
     します。デルタは、攻撃者にYに類似したXの領域を明らかにします。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-quiltimport,  Up: Top

Name
****

git-quiltimport — quilt(キルト)パッチセットを現在のブランチに適用します


Synopsis
********

     git quiltimport [–dry-run | -n] [–author <author>] [–patches <dir>]
                     [–series <file>] [–keep-non-patch]


DESCRIPTION
***********

quiltパッチセットを現在のGitブランチに適用し、quiltパッチセットに存在す
るパッチ境界、パッチ順序、およびパッチの説明を保持します。

   パッチごとに、コードはパッチの説明から作者を抽出しようとします。それ
が失敗した場合は、 ‘--author’ で指定された作者にフォールバックします。
‘--author’ フラグが指定されていない場合、パッチの説明が表示され、ユーザ
ーはパッチの作者をインタラクティブに入力するように求められます。

   パッチの説明に件名が見つからない場合、パッチ名はGitの説明の1行の件名
として保持されます。


OPTIONS
*******

‘-n’
‘--dry-run’
     一連(series)のパッチをウォークスルーし、パッチをコミットするために
     必要なすべての情報が見つからない場合は警告します。この記事の執筆時
     点では、欠落している作者情報のみを警告します。

‘--author Author Name <Author Email>’
     パッチの説明に作者情報が見つからない場合に使用する作者名と電子メー
     ルアドレス。

‘--patches <dir>’
     quiltパッチを見つけるためのディレクトリ。

     パッチディレクトリのデフォルトは、 patches または ‘$QUILT_PATCHES’
     環境変数の値です。

‘--series <file>’
     キルトシリーズファイル(quilt series file)。

     シリーズファイルのデフォルトは、 <patches>/series または
     ‘$QUILT_SERIES’ 環境変数の値です。

‘--keep-non-patch’
     ‘-b’ フラグを _git mailinfo_ に渡します(git-mailinfo(1) 参照)。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-range-diff,  Up: Top

Name
****

git-range-diff — Compare two commit ranges (e.g.  two versions of a
branch)


Synopsis
********

     git range-diff [–color=[<when>]] [–no-color] [<diff-options>]
             [–no-dual-color] [–creation-factor=<factor>]
             [–left-only | –right-only]
             ( <range1> <range2> | <rev1>…<rev2> | <base> <rev1> <rev2> )


DESCRIPTION
***********

This command shows the differences between two versions of a patch
series, or more generally, two commit ranges (ignoring merge commits).

   To that end, it first finds pairs of commits from both commit ranges
that correspond with each other.  Two commits are said to correspond
when the diff between their patches (i.e.  the author information, the
commit message and the commit diff) is reasonably small compared to the
patches’ size.  See “Algorithm“ below for details.

   Finally, the list of matching commits is shown in the order of the
second commit range, with unmatched commits being inserted just after
all of their ancestors have been shown.

   There are three ways to specify the commit ranges:

   • ‘<range1> <range2>’: Either commit range can be of the form
     ‘<base>..<rev>’, ‘<rev>^!’ or ‘<rev>^-<n>’.  See ‘SPECIFYING
     RANGES’ in gitrevisions(7) for more details.

   • ‘<rev1>...<rev2>’.  This is equivalent to ‘<rev2>..<rev1>
     <rev1>..<rev2>’.

   • ‘<base> <rev1> <rev2>’: This is equivalent to ‘<base>..<rev1>
     <base>..<rev2>’.


OPTIONS
*******

‘--no-dual-color’
     When the commit diffs differ, ‘git range-diff‘ recreates the
     original diffs’ coloring, and adds outer -/+ diff markers with the
     *background* being red/green to make it easier to see e.g.  when
     there was a change in what exact lines were added.

     Additionally, the commit diff lines that are only present in the
     first commit range are shown "dimmed" (this can be overridden using
     the ‘color.diff.<slot>’ config setting where ‘<slot>’ is one of
     ‘contextDimmed’, ‘oldDimmed’ and ‘newDimmed’), and the commit diff
     lines that are only present in the second commit range are shown in
     bold (which can be overridden using the config settings
     ‘color.diff.<slot>’ with ‘<slot>’ being one of ‘contextBold’,
     ‘oldBold’ or ‘newBold’).

     This is known to ‘range-diff’ as "dual coloring".  Use
     ‘--no-dual-color’ to revert to color all lines according to the
     outer diff markers (and completely ignore the inner diff when it
     comes to color).

‘--creation-factor=<percent>’
     Set the creation/deletion cost fudge factor to ‘<percent>’.
     Defaults to

       1. Try a larger value if ‘git range-diff’ erroneously considers a
          large change a total rewrite (deletion of one commit and
          addition of another), and a smaller one in the reverse case.
          See the “Algorithm“ section below for an explanation why this
          is needed.

‘--left-only’
     Suppress commits that are missing from the first specified range
     (or the "left range" when using the ‘<rev1>...<rev2>’ format).

‘--right-only’
     Suppress commits that are missing from the second specified range
     (or the "right range" when using the ‘<rev1>...<rev2>’ format).

‘--[no-]notes[=<ref>]’
     This flag is passed to the ‘git log’ program (see git-log(1)) that
     generates the patches.

<range1> <range2>
     Compare the commits specified by the two ranges, where ‘<range1>’
     is considered an older version of ‘<range2>’.

<rev1>…<rev2>
     Equivalent to passing ‘<rev2>..<rev1>’ and ‘<rev1>..<rev2>’.

<base> <rev1> <rev2>
     Equivalent to passing ‘<base>..<rev1>’ and ‘<base>..<rev2>’.  Note
     that ‘<base>’ does not need to be the exact branch point of the
     branches.  Example: after rebasing a branch ‘my-topic’, ‘git
     range-diff my-topic@{u} my-topic@{1} my-topic’ would show the
     differences introduced by the rebase.

   ‘git range-diff’ also accepts the regular diff options (see
git-diff(1)), most notably the ‘--color=[<when>]’ and ‘--no-color’
options.  These options are used when generating the "diff between
patches", i.e.  to compare the author, commit message and diff of
corresponding old/new commits.  There is currently no means to tweak
most of the diff options passed to ‘git log’ when generating those
patches.


OUTPUT STABILITY
****************

The output of the ‘range-diff’ command is subject to change.  It is
intended to be human-readable porcelain output, not something that can
be used across versions of Git to get a textually stable ‘range-diff’
(as opposed to something like the ‘--stable’ option to git-patch-id(1)).
There’s also no equivalent of git-apply(1) for ‘range-diff’, the output
is not intended to be machine-readable.

   This is particularly true when passing in diff options.  Currently
some options like ‘--stat’ can, as an emergent effect, produce output
that’s quite useless in the context of ‘range-diff’.  Future versions of
‘range-diff’ may learn to interpret such options in a manner specific to
‘range-diff’ (e.g.  for ‘--stat’ producing human-readable output which
summarizes how the diffstat changed).


CONFIGURATION
*************

This command uses the ‘diff.color.*’ and ‘pager.range-diff’ settings
(the latter is on by default).  See git-config(1).


EXAMPLES
********

When a rebase required merge conflicts to be resolved, compare the
changes introduced by the rebase directly afterwards using:

     $ git range-diff @{u} @{1} @

   A typical output of ‘git range-diff’ would look like this:

     -:  ------- > 1:  0ddba11 Prepare for the inevitable!
     1:  c0debee = 2:  cab005e Add a helpful message at the start
     2:  f00dbal ! 3:  decafe1 Describe a bug
         @@ -1,3 +1,3 @@
          Author: A U Thor <author@example.com>

         -TODO: Describe a bug
         +Describe a bug
         @@ -324,5 +324,6
           This is expected.

         -+What is unexpected is that it will also crash.
         ++Unexpectedly, it also crashes. This is a bug, and the jury is
         ++still out there how to fix it best. See ticket #314 for details.

           Contact
     3:  bedead < -:  ------- TO-UNDO

   In this example, there are 3 old and 3 new commits, where the
developer removed the 3rd, added a new one before the first two, and
modified the commit message of the 2nd commit as well its diff.

   When the output goes to a terminal, it is color-coded by default,
just like regular ‘git diff’’s output.  In addition, the first line
(adding a commit) is green, the last line (deleting a commit) is red,
the second line (with a perfect match) is yellow like the commit header
of ‘git show’’s output, and the third line colors the old commit red,
the new one green and the rest like ‘git show’’s commit header.

   A naive color-coded diff of diffs is actually a bit hard to read,
though, as it colors the entire lines red or green.  The line that added
"What is unexpected" in the old commit, for example, is completely red,
even if the intent of the old commit was to add something.

   To help with that, ‘range’ uses the ‘--dual-color’ mode by default.
In this mode, the diff of diffs will retain the original diff colors,
and prefix the lines with -/+ markers that have their *background* red
or green, to make it more obvious that they describe how the diff itself
changed.


Algorithm
*********

The general idea is this: we generate a cost matrix between the commits
in both commit ranges, then solve the least-cost assignment.

   The cost matrix is populated thusly: for each pair of commits, both
diffs are generated and the "diff of diffs" is generated, with 3 context
lines, then the number of lines in that diff is used as cost.

   To avoid false positives (e.g.  when a patch has been removed, and an
unrelated patch has been added between two iterations of the same patch
series), the cost matrix is extended to allow for that, by adding
fixed-cost entries for wholesale deletes/adds.

   Example: Let commits ‘1--2’ be the first iteration of a patch series
and ‘A--C’ the second iteration.  Let’s assume that ‘A’ is a cherry-pick
of ‘2,’ and ‘C’ is a cherry-pick of ‘1’ but with a small modification
(say, a fixed typo).  Visualize the commits as a bipartite graph:

         1            A

         2            B

                      C

   We are looking for a "best" explanation of the new series in terms of
the old one.  We can represent an "explanation" as an edge in the graph:

         1            A
                    /
         2 --------'  B

                      C

   This explanation comes for "free" because there was no change.
Similarly ‘C’ could be explained using ‘1’, but that comes at some cost
c>0 because of the modification:

         1 ----.      A
               |    /
         2 ----+---'  B
               |
               `----- C
               c>0

   In mathematical terms, what we are looking for is some sort of a
minimum cost bipartite matching; ‘1‘ is matched to ‘C’ at some cost,
etc.  The underlying graph is in fact a complete bipartite graph; the
cost we associate with every edge is the size of the diff between the
two commits’ patches.  To explain also new commits, we introduce dummy
nodes on both sides:

         1 ----.      A
               |    /
         2 ----+---'  B
               |
         o     `----- C
               c>0
         o            o

         o            o

   The cost of an edge ‘o--C’ is the size of ‘C’’s diff, modified by a
fudge factor that should be smaller than 100%.  The cost of an edge
‘o--o’ is free.  The fudge factor is necessary because even if ‘1’ and
‘C’ have nothing in common, they may still share a few empty lines and
such, possibly making the assignment ‘1--C’, ‘o--o’ slightly cheaper
than ‘1--o’, ‘o--C’ even if ‘1’ and ‘C’ have nothing in common.  With
the fudge factor we require a much larger common part to consider
patches as corresponding.

   The overall time needed to compute this algorithm is the time needed
to compute n+m commit diffs and then n*m diffs of patches, plus the time
needed to compute the least-cost assignment between n and m diffs.  Git
uses an implementation of the Jonker-Volgenant algorithm to solve the
assignment problem, which has cubic runtime complexity.  The matching
found in this case will look like this:

         1 ----.      A
               |    /
         2 ----+---'  B
            .--+-----'
         o -'  `----- C
               c>0
         o ---------- o

         o ---------- o


SEE ALSO
********

git-log(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-read-tree,  Up: Top

Name
****

git-read-tree — Reads tree information into the index


Synopsis
********

     git read-tree [[-m [–trivial] [–aggressive] | –reset | –prefix=<prefix>]
                     [-u [–exclude-per-directory=<gitignore>] | -i]]
                     [–index-output=<file>] [–no-sparse-checkout]
                     (–empty | <tree-ish1> [<tree-ish2> [<tree-ish3>]])


DESCRIPTION
***********

Reads the tree information given by <tree-ish> into the index, but does
not actually *update* any of the files it "caches".  (see:
git-checkout-index(1))

   Optionally, it can merge a tree into the index, perform a
fast-forward (i.e.  2-way) merge, or a 3-way merge, with the ‘-m’ flag.
When used with ‘-m’, the ‘-u’ flag causes it to also update the files in
the work tree with the result of the merge.

   Trivial merges are done by _git read-tree_ itself.  Only conflicting
paths will be in unmerged state when _git read-tree_ returns.


OPTIONS
*******

‘-m’
     Perform a merge, not just a read.  The command will refuse to run
     if your index file has unmerged entries, indicating that you have
     not finished previous merge you started.

‘--reset’
     Same as -m, except that unmerged entries are discarded instead of
     failing.  When used with ‘-u’, updates leading to loss of working
     tree changes will not abort the operation.

‘-u’
     After a successful merge, update the files in the work tree with
     the result of the merge.

‘-i’
     Usually a merge requires the index file as well as the files in the
     working tree to be up to date with the current head commit, in
     order not to lose local changes.  This flag disables the check with
     the working tree and is meant to be used when creating a merge of
     trees that are not directly related to the current working tree
     status into a temporary index file.

‘-n’
‘--dry-run’
     Check if the command would error out, without updating the index or
     the files in the working tree for real.

‘-v’
     Show the progress of checking files out.

‘--trivial’
     Restrict three-way merge by _git read-tree_ to happen only if there
     is no file-level merging required, instead of resolving merge for
     trivial cases and leaving conflicting files unresolved in the
     index.

‘--aggressive’
     Usually a three-way merge by _git read-tree_ resolves the merge for
     really trivial cases and leaves other cases unresolved in the
     index, so that porcelains can implement different merge policies.
     This flag makes the command resolve a few more cases internally:

        • when one side removes a path and the other side leaves the
          path unmodified.  The resolution is to remove that path.

        • when both sides remove a path.  The resolution is to remove
          that path.

        • when both sides add a path identically.  The resolution is to
          add that path.

‘--prefix=<prefix>’
     Keep the current index contents, and read the contents of the named
     tree-ish under the directory at ‘<prefix>’.  The command will
     refuse to overwrite entries that already existed in the original
     index file.

‘--exclude-per-directory=<gitignore>’
     When running the command with ‘-u’ and ‘-m’ options, the merge
     result may need to overwrite paths that are not tracked in the
     current branch.  The command usually refuses to proceed with the
     merge to avoid losing such a path.  However this safety valve
     sometimes gets in the way.  For example, it often happens that the
     other branch added a file that used to be a generated file in your
     branch, and the safety valve triggers when you try to switch to
     that branch after you ran ‘make’ but before running ‘make clean’ to
     remove the generated file.  This option tells the command to read
     per-directory exclude file (usually _.gitignore_) and allows such
     an untracked but explicitly ignored file to be overwritten.

‘--index-output=<file>’
     Instead of writing the results out to ‘$GIT_INDEX_FILE’, write the
     resulting index in the named file.  While the command is operating,
     the original index file is locked with the same mechanism as usual.
     The file must allow to be rename(2)ed into from a temporary file
     that is created next to the usual index file; typically this means
     it needs to be on the same filesystem as the index file itself, and
     you need write permission to the directories the index file and
     index output file are located in.

‘--[no-]recurse-submodules’
     Using –recurse-submodules will update the content of all active
     submodules according to the commit recorded in the superproject by
     calling read-tree recursively, also setting the submodules’ HEAD to
     be detached at that commit.

‘--no-sparse-checkout’
     Disable sparse checkout support even if ‘core.sparseCheckout’ is
     true.

‘--empty’
     Instead of reading tree object(s) into the index, just empty it.

‘-q’
‘--quiet’
     Quiet, suppress feedback messages.

<tree-ish#>
     The id of the tree object(s) to be read/merged.


MERGING
*******

If ‘-m’ is specified, _git read-tree_ can perform 3 kinds of merge, a
single tree merge if only 1 tree is given, a fast-forward merge with 2
trees, or a 3-way merge if 3 or more trees are provided.


Single Tree Merge
=================

If only 1 tree is specified, _git read-tree_ operates as if the user did
not specify ‘-m’, except that if the original index has an entry for a
given pathname, and the contents of the path match with the tree being
read, the stat info from the index is used.  (In other words, the
index’s stat()s take precedence over the merged tree’s).

   That means that if you do a ‘git read-tree -m <newtree>’ followed by
a ‘git checkout-index -f -u -a’, the _git checkout-index_ only checks
out the stuff that really changed.

   This is used to avoid unnecessary false hits when _git diff-files_ is
run after _git read-tree_.


Two Tree Merge
==============

Typically, this is invoked as ‘git read-tree -m $H $M’, where $H is the
head commit of the current repository, and $M is the head of a foreign
tree, which is simply ahead of $H (i.e.  we are in a fast-forward
situation).

   When two trees are specified, the user is telling _git read-tree_ the
following:

  1. The current index and work tree is derived from $H, but the user
     may have local changes in them since $H.

  2. The user wants to fast-forward to $M.

   In this case, the ‘git read-tree -m $H $M’ command makes sure that no
local change is lost as the result of this "merge".  Here are the "carry
forward" rules, where "I" denotes the index, "clean" means that index
and work tree coincide, and "exists"/"nothing" refer to the presence of
a path in the specified commit:

             I                   H        M        Result
            -------------------------------------------------------
          0  nothing             nothing  nothing  (does not happen)
          1  nothing             nothing  exists   use M
          2  nothing             exists   nothing  remove path from index
          3  nothing             exists   exists,  use M if "initial checkout",
                                          H == M   keep index otherwise
                                          exists,  fail
                                          H != M

             clean I==H  I==M
            ------------------
          4  yes   N/A   N/A     nothing  nothing  keep index
          5  no    N/A   N/A     nothing  nothing  keep index

          6  yes   N/A   yes     nothing  exists   keep index
          7  no    N/A   yes     nothing  exists   keep index
          8  yes   N/A   no      nothing  exists   fail
          9  no    N/A   no      nothing  exists   fail

          10 yes   yes   N/A     exists   nothing  remove path from index
          11 no    yes   N/A     exists   nothing  fail
          12 yes   no    N/A     exists   nothing  fail
          13 no    no    N/A     exists   nothing  fail

             clean (H==M)
            ------
          14 yes                 exists   exists   keep index
          15 no                  exists   exists   keep index

             clean I==H  I==M (H!=M)
            ------------------
          16 yes   no    no      exists   exists   fail
          17 no    no    no      exists   exists   fail
          18 yes   no    yes     exists   exists   keep index
          19 no    no    yes     exists   exists   keep index
          20 yes   yes   no      exists   exists   use M
          21 no    yes   no      exists   exists   fail

   In all "keep index" cases, the index entry stays as in the original
index file.  If the entry is not up to date, _git read-tree_ keeps the
copy in the work tree intact when operating under the -u flag.

   When this form of _git read-tree_ returns successfully, you can see
which of the "local changes" that you made were carried forward by
running ‘git diff-index --cached $M’.  Note that this does not
necessarily match what ‘git diff-index --cached $H’ would have produced
before such a two tree merge.  This is because of cases 18 and 19 — if
you already had the changes in $M (e.g.  maybe you picked it up via
e-mail in a patch form), ‘git diff-index --cached $H’ would have told
you about the change before this merge, but it would not show in ‘git
diff-index --cached $M’ output after the two-tree merge.

   Case 3 is slightly tricky and needs explanation.  The result from
this rule logically should be to remove the path if the user staged the
removal of the path and then switching to a new branch.  That however
will prevent the initial checkout from happening, so the rule is
modified to use M (new tree) only when the content of the index is
empty.  Otherwise the removal of the path is kept as long as $H and $M
are the same.


3-Way Merge
===========

Each "index" entry has two bits worth of "stage" state.  stage 0 is the
normal one, and is the only one you’d see in any kind of normal use.

   However, when you do _git read-tree_ with three trees, the "stage"
starts out at 1.

   This means that you can do

     $ git read-tree -m <tree1> <tree2> <tree3>

   and you will end up with an index with all of the <tree1> entries in
"stage1", all of the <tree2> entries in "stage2" and all of the <tree3>
entries in "stage3".  When performing a merge of another branch into the
current branch, we use the common ancestor tree as <tree1>, the current
branch head as <tree2>, and the other branch head as <tree3>.

   Furthermore, _git read-tree_ has special-case logic that says: if you
see a file that matches in all respects in the following states, it
"collapses" back to "stage0":

   • stage 2 and 3 are the same; take one or the other (it makes no
     difference - the same work has been done on our branch in stage 2
     and their branch in stage 3)

   • stage 1 and stage 2 are the same and stage 3 is different; take
     stage 3 (our branch in stage 2 did not do anything since the
     ancestor in stage 1 while their branch in stage 3 worked on it)

   • stage 1 and stage 3 are the same and stage 2 is different take
     stage 2 (we did something while they did nothing)

   The _git write-tree_ command refuses to write a nonsensical tree, and
it will complain about unmerged entries if it sees a single entry that
is not stage 0.

   OK, this all sounds like a collection of totally nonsensical rules,
but it’s actually exactly what you want in order to do a fast merge.
The different stages represent the "result tree" (stage 0, aka
"merged"), the original tree (stage 1, aka "orig"), and the two trees
you are trying to merge (stage 2 and 3 respectively).

   The order of stages 1, 2 and 3 (hence the order of three <tree-ish>
command-line arguments) are significant when you start a 3-way merge
with an index file that is already populated.  Here is an outline of how
the algorithm works:

   • if a file exists in identical format in all three trees, it will
     automatically collapse to "merged" state by _git read-tree_.

   • a file that has _any_ difference what-so-ever in the three trees
     will stay as separate entries in the index.  It’s up to "porcelain
     policy" to determine how to remove the non-0 stages, and insert a
     merged version.

   • the index file saves and restores with all this information, so you
     can merge things incrementally, but as long as it has entries in
     stages 1/2/3 (i.e., "unmerged entries") you can’t write the result.
     So now the merge algorithm ends up being really simple:

        • you walk the index in order, and ignore all entries of stage
          0, since they’ve already been done.

        • if you find a "stage1", but no matching "stage2" or "stage3",
          you know it’s been removed from both trees (it only existed in
          the original tree), and you remove that entry.

        • if you find a matching "stage2" and "stage3" tree, you remove
          one of them, and turn the other into a "stage0" entry.  Remove
          any matching "stage1" entry if it exists too.  ..  all the
          normal trivial rules ..

   You would normally use _git merge-index_ with supplied _git
merge-one-file_ to do this last step.  The script updates the files in
the working tree as it merges each path and at the end of a successful
merge.

   When you start a 3-way merge with an index file that is already
populated, it is assumed that it represents the state of the files in
your work tree, and you can even have files with changes unrecorded in
the index file.  It is further assumed that this state is "derived" from
the stage 2 tree.  The 3-way merge refuses to run if it finds an entry
in the original index file that does not match stage 2.

   This is done to prevent you from losing your work-in-progress
changes, and mixing your random changes in an unrelated merge commit.
To illustrate, suppose you start from what has been committed last to
your repository:

     $ JC=`git rev-parse --verify "HEAD^0"`
     $ git checkout-index -f -u -a $JC

   You do random edits, without running _git update-index_.  And then
you notice that the tip of your "upstream" tree has advanced since you
pulled from him:

     $ git fetch git://.... linus
     $ LT=`git rev-parse FETCH_HEAD`

   Your work tree is still based on your HEAD ($JC), but you have some
edits since.  Three-way merge makes sure that you have not added or
modified index entries since $JC, and if you haven’t, then does the
right thing.  So with the following sequence:

     $ git read-tree -m -u `git merge-base $JC $LT` $JC $LT
     $ git merge-index git-merge-one-file -a
     $ echo "Merge with Linus" | \
       git commit-tree `git write-tree` -p $JC -p $LT

   what you would commit is a pure merge between $JC and $LT without
your work-in-progress changes, and your work tree would be updated to
the result of the merge.

   However, if you have local changes in the working tree that would be
overwritten by this merge, _git read-tree_ will refuse to run to prevent
your changes from being lost.

   In other words, there is no need to worry about what exists only in
the working tree.  When you have local changes in a part of the project
that is not involved in the merge, your changes do not interfere with
the merge, and are kept intact.  When they *do* interfere, the merge
does not even start (_git read-tree_ complains loudly and fails without
modifying anything).  In such a case, you can simply continue doing what
you were in the middle of doing, and when your working tree is ready
(i.e.  you have finished your work-in-progress), attempt the merge
again.


SPARSE CHECKOUT
***************

"Sparse checkout" allows populating the working directory sparsely.  It
uses the skip-worktree bit (see git-update-index(1)) to tell Git whether
a file in the working directory is worth looking at.

   _git read-tree_ and other merge-based commands (_git merge_, _git
checkout_…) can help maintaining the skip-worktree bitmap and working
directory update.  ‘$GIT_DIR/info/sparse-checkout’ is used to define the
skip-worktree reference bitmap.  When _git read-tree_ needs to update
the working directory, it resets the skip-worktree bit in the index
based on this file, which uses the same syntax as .gitignore files.  If
an entry matches a pattern in this file, skip-worktree will not be set
on that entry.  Otherwise, skip-worktree will be set.

   Then it compares the new skip-worktree value with the previous one.
If skip-worktree turns from set to unset, it will add the corresponding
file back.  If it turns from unset to set, that file will be removed.

   While ‘$GIT_DIR/info/sparse-checkout’ is usually used to specify what
files are in, you can also specify what files are _not_ in, using negate
patterns.  For example, to remove the file ‘unwanted’:

     /*
     !unwanted

   Another tricky thing is fully repopulating the working directory when
you no longer want sparse checkout.  You cannot just disable "sparse
checkout" because skip-worktree bits are still in the index and your
working directory is still sparsely populated.  You should re-populate
the working directory with the ‘$GIT_DIR/info/sparse-checkout’ file
content as follows:

     /*

   Then you can disable sparse checkout.  Sparse checkout support in
_git read-tree_ and similar commands is disabled by default.  You need
to turn ‘core.sparseCheckout’ on in order to have sparse checkout
support.


SEE ALSO
********

git-write-tree(1); git-ls-files(1); gitignore(5);
git-sparse-checkout(1);


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-rebase,  Up: Top

Name
****

git-rebase — 別のベースの先端のその先頭にコミットを再適用します


Synopsis
********

     git rebase [-i | –interactive] [<options>] [–exec <cmd>]
             [–onto <newbase> | –keep-base] [<upstream> [<branch>]]
     git rebase [-i | –interactive] [<options>] [–exec <cmd>] [–onto <newbase>]
             –root [<branch>]
     git rebase (–continue | –skip | –abort | –quit | –edit-todo | –show-current-patch)


DESCRIPTION
***********

<branch>が指定されている場合、 _git rebase_ は他の処理を行う前に自動で
‘git switch <branch>’ を実行します。それ以外の場合は、現在のブランチに残
ります。

   <upstream> が指定されていない場合、 branch.<name>.remote と
branch.<name>.merge オプションで構成されたアップストリーム(詳細は
git-config(1) を参照)および ‘--fork-point’ オプションが想定されています
。現在のブランチを使用していない場合、または現在のブランチにアップストリ
ームが構成されていない場合、リベースは中止されます。

   現在のブランチでコミットによって行われたが、<upstream>にないすべての
変更は、一時領域に保存されます。 これは ‘git log <upstream>..HEAD’ で表
示されるのと同じコミットのセットで、または ‘--fork-point’ がアクティブな
場合 ‘git log 'fork_point'..HEAD’ で表示されるのと同じコミットのセットで
、または ‘--root’ オプションが指定されている場合 ‘git log HEAD’ で表示さ
れるのと同じコミットのセットです。

   現在のブランチは<upstream>にリセットされ、または ‘--onto’ オプション
が指定されている場合は<newbase>にリセットされます。これは、 ‘git reset
--hard <upstream>’ (または<newbase>)とまったく同じ効果があります。
ORIG_HEADは、リセット前にブランチの先端を指すように設定されています。

   以前に一時領域に保存されたコミットは、現在のブランチに1つずつ順番に再
適用されます。注意: ‘HEAD..<upstream>’ でのコミットと同一のテキスト変更
を導入するHEADでのコミットは省略されることに注意してください(つまり、異
なるコミットメッセージまたはタイムスタンプで、アップストリームで既に受け
入れ済のパッチはスキップされます)。

   マージに失敗すると、このプロセスが完全には自動で行われなくなる事があ
ります。あなたは、このようなマージの失敗を解決し、そして ‘git rebase
--continue’ を実行する必要があります。 別のオプションとしては、 ‘git
rebase --skip’ でマージの失敗を引き起こしたコミットをバイパスすることで
す。そして、元の<branch>をチェックアウトし、‘.git/rebase-apply’ 作業ファ
イルを削除するには、代わりにコマンド ‘git rebase --abort’ を使用します。

   以下の履歴が存在し、現在のブランチが「topic」であると想定します:

               A---B---C topic
              /
         D---E---F---G master

   この時点で、以下のコマンドのどちらかを実行します:

     git rebase master
     git rebase master topic

   そうすると以下のようになります:

                       A'--B'--C' topic
                      /
         D---E---F---G master

   *注意:* 後者の形式は、‘git checkout topic’ の後に ‘git rebase master’
が続く省略形です。 リベースが終了すると、 ‘topic’ はチェックアウトされた
ブランチのままになります。

   (たとえば、アップストリームに適用されたパッチをメールで送信したため
)アップストリームブランチにすでに行った変更が含まれている場合、そのコミ
ットはスキップされ、警告が発行されます(‘merge’ バックエンドが使用されて
いる場合)。たとえば、以下の履歴で ‘git rebase master’ を実行します(‘A'’
と ‘A’ は同じ変更セットを導入しますが、コミッター情報は異なります):

               A---B---C topic
              /
         D---E---A'---F master

   その結果は

                        B'---C' topic
                       /
         D---E---A'---F master

   これは、あるブランチに基づいてトピックブランチを別のブランチに移植し
、 ‘rebase --onto’ を使用して、トピックブランチを後者のブランチからフォ
ークしたふりをする方法です。

   まず、「topic」がブランチ「next」に基づいているとしましょう。 たとえ
ば「topic」で開発された機能は、「next」にあるいくつかの機能に依存してい
ます。

         o---o---o---o---o  master
              \
               o---o---o---o---o  next
                                \
                                 o---o---o  topic

   我々は _topic_ をブランチ _master_ からフォークさせたいのです。たとえ
ば「topic」が依存する機能が、より安定した「master」ブランチにマージされ
たためです。 ツリーを以下のようにしたいわけです:

         o---o---o---o---o  master
             |            \
             |             o'--o'--o'  topic
              \
               o---o---o---o---o  next

   これは、以下のコマンドを使用して取得できます:

     git rebase --onto master next topic

   ‘--onto’ オプションの別の例は、ブランチの一部をリベースすることです。
以下のような状況の場合:

                                 H---I---J topicB
                                /
                       E---F---G  topicA
                      /
         A---B---C---D  master

   そして、以下のコマンドを実行します

     git rebase --onto master topicA topicB

   そうすると結果は以下のようになります:

                      H'--I'--J'  topicB
                     /
                     | E---F---G  topicA
                     |/
         A---B---C---D  master

   これは、topicBがtopicAに依存していない場合に役立ちます。

   コミットの範囲は、リベースで削除することもできます。以下の状況の場合:

         E---F---G---H---I---J  topicA

   そして、以下のコマンドを実行します

     git rebase --onto topicA~5 topicA~3 topicA

   そうすると、以下のようにコミットFとGが削除されます:

         E---H'---I'---J'  topicA

   これは、FとGに何らかの欠陥がある場合、または、topicAの一部であっては
ならない場合に役立ちます。注意: ‘--onto’ と<upstream>パラメーターの引数
は、任意の有効なコミットっぽい何か(commit-ish)にすることができることに注
意してください。

   競合が発生した場合、「git rebase」は最初の問題のあるコミットで停止し
、ツリーに競合マーカーを残します。 _git diff_ を使用して、マーカー
(<<<<<<)を見つけ、編集して競合を解決できます。編集するファイルごとに、競
合が解決されたことをGitに通知する必要があります。通常、これは以下の方法
で行います。

     git add <filename>

   競合を手動で解決し、あなたが欲する解決策でインデックスを更新した後、
以下のコマンドでリベースプロセスを続行できます。

     git rebase --continue

   あるいは、「git rebase」を元に戻す(undo)こともできます

     git rebase --abort


OPTIONS
*******

‘--onto <newbase>’
     新しいコミットを作成する開始点。 ‘--onto’ オプションが指定されてい
     ない場合、開始点は<upstream>です。これは、既存のブランチ名だけでな
     く、任意の有効なコミットである可能性があります。

     特別な場合として、マージベースが1つしかない場合は、AとBのマージベー
     スのショートカットとして "A...B" を使用できます。最大でAとBのいずれ
     かを省略できます。その場合、デフォルトでHEADになります。

‘--keep-base’
     <upstream> <branch> のマージベースへの新しいコミットを作成する開始
     点を設定します。 ‘git rebase --keep-base <upstream> <branch>’ を実
     行することは ‘git rebase --onto <upstream>... <upstream>’ を実行す
     ることと同じです。

     このオプションは、アップストリームブランチの先頭で機能を開発してい
     る場合に役立ちます。この機能が働いている間に、アップストリームのブ
     ランチが進むことがあり、アップストリームの先頭にリベースを続けるの
     は得策ではなく、ベースのコミットをそのままにしておくことがあります
     。

     このオプションと ‘--fork-point’ はどちらも<upstream>と<branch>の間
     のマージベースを検索します。しかし、このオプションは新しいコミット
     が作成される「開始点」としてマージベースを使用します。一方
     ‘--fork-point’ はマージベースを使用して、リベースされる「コミットの
     セット」を決定します。

     以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。

<upstream>
     比較するアップストリームブランチ。既存のブランチ名だけでなく、任意
     の有効なコミットである可能性があります。デフォルトは、現在のブラン
     チ用に構成されたアップストリームです。

<branch>
     作業するブランチ。デフォルトはHEADです。

‘--continue’
     マージの競合を解決した後、リベースプロセスを再開します。

‘--abort’
     リベース操作を中止(abort)し、HEADを元のブランチにリセットします。リ
     ベース操作の開始時に<branch>が指定された場合、HEADは<branch>にリセ
     ットされます。それ以外の場合、HEADはリベース操作が開始されたときの
     位置にリセットされます。

‘--quit’
     リベース操作を中止(abort)しますが、HEADは元のブランチにリセットされ
     ません。その結果、インデックスと作業ツリーも変更されません。
     ‘--autostash’ を使用して一時的なstashエントリが作成された場合、それ
     はstashリストに保存されます。

‘--apply’
     適用戦略(applying strategies)を使用してリベースします(内部で
     ‘git-am’ を呼び出します)。このオプションは、マージバックエンドが
     applyのすべてを処理すると、将来的には動作しなくなる可能性があります
     。

     以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。

‘--empty={drop,keep,ask}’
     任意のアップストリームコミットの、開始時は空ではなく、かつ、クリー
     ンでは無いチェリーピックであるが、(すでにアップストリームの変更のサ
     ブセットが含まれているため、)リベース後に空になるコミットを処理する
     方法。dropを使用すると、空になるコミットはドロップされます(これがデ
     フォルトです)。keepを使用すると、そのようなコミットは保持されます。
     ask を使用すると、空のコミットが適用されるとリベースが停止し、ドロ
     ップするか、ファイルをさらに編集するか、空の変更をコミットするかを
     選択できます(‘--interactive’ の指定を含んでいます)。‘--exec’ などの
     他のオプションでは、-i / -interactiveが明示的に指定されていない限り
     、デフォルトのドロップが使用されます。

     注意: (‘--no-keep-empty’ が指定されていない場合、)空で開始するコミ
     ットは保持され、(‘--reapply-cherry-picks’ が渡されない限り)準備ステ
     ップとして、( ‘git log --cherry-mark ...’ によって決定される)クリー
     ンなチェリーピックであるコミットが検出・ドロップされます。

     以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。

‘--no-keep-empty’
‘--keep-empty’
     Do not keep commits that start empty before the rebase (i.e.  that
     do not change anything from its parent) in the result.  The default
     is to keep commits which start empty, since creating such commits
     requires passing the –allow-empty override flag to ‘git commit’,
     signifying that a user is very intentionally creating such a commit
     and thus wants to keep it.

     Usage of this flag will probably be rare, since you can get rid of
     commits that start empty by just firing up an interactive rebase
     and removing the lines corresponding to the commits you don’t want.
     This flag exists as a convenient shortcut, such as for cases where
     external tools generate many empty commits and you want them all
     removed.

     空では開始されないが、リベース後に空になるコミットについては、
     ‘--empty’ フラグを参照してください。

     以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。

‘--reapply-cherry-picks’
‘--no-reapply-cherry-picks’
     Reapply all clean cherry-picks of any upstream commit instead of
     preemptively dropping them.  (If these commits then become empty
     after rebasing, because they contain a subset of already upstream
     changes, the behavior towards them is controlled by the ‘--empty’
     flag.)

     By default (or if ‘--no-reapply-cherry-picks’ is given), these
     commits will be automatically dropped.  Because this necessitates
     reading all upstream commits, this can be expensive in repos with a
     large number of upstream commits that need to be read.  When using
     the ‘merge’ backend, warnings will be issued for each dropped
     commit (unless ‘--quiet’ is given).  Advice will also be issued
     unless ‘advice.skippedCherryPicks’ is set to false (see
     git-config(1)).

     ‘--reapply-cherry-picks’ を使用すると、リベースはすべてのアップスト
     リームコミットの読み取りを放棄できるため、パフォーマンスが向上する
     可能性があります。

     以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。

‘--allow-empty-message’
     No-op.  Rebasing commits with an empty message used to fail and
     this option would override that behavior, allowing commits with
     empty messages to be rebased.  Now commits with an empty message do
     not cause rebasing to halt.

     以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。

‘--skip’
     現在のパッチをスキップして、リベースプロセスを再開します。

‘--edit-todo’
     対話的リベース中にToDoリストを編集します。

‘--show-current-patch’
     対話的なリベース、または、競合のためにリベースが停止されたときに、
     現在のパッチを表示します。 これは ‘git show REBASE_HEAD’ と同等です
     。

‘-m’
‘--merge’
     マージ戦略(merging strategies)を使用してリベースします(デフォルト
     )。

     Note that a rebase merge works by replaying each commit from the
     working branch on top of the <upstream> branch.  Because of this,
     when a merge conflict happens, the side reported as _ours_ is the
     so-far rebased series, starting with <upstream>, and _theirs_ is
     the working branch.  In other words, the sides are swapped.

     以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。

‘-s <strategy>’
‘--strategy=<strategy>’
     デフォルトの ‘ort’ の代わりに、指定のマージ戦略を使用します。 この
     オプションは ‘--merge’ の指定を含んでいます。

     Because _git rebase_ replays each commit from the working branch on
     top of the <upstream> branch using the given strategy, using the
     _ours_ strategy simply empties all patches from the <branch>, which
     makes little sense.

     以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。

‘-X <strategy-option>’
‘--strategy-option=<strategy-option>’
     Pass the <strategy-option> through to the merge strategy.  This
     implies ‘--merge’ and, if no strategy has been specified, ‘-s ort’.
     Note the reversal of _ours_ and _theirs_ as noted above for the
     ‘-m’ option.

     以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。

‘--rerere-autoupdate’
‘--no-rerere-autoupdate’
     可能であれば、rerereメカニズムが自動競合解決の結果でインデックスを
     更新できるようにします。

‘-S[<keyid>]’
‘--gpg-sign[=<keyid>]’
‘--no-gpg-sign’
     GPG-sign commits.  The ‘keyid’ argument is optional and defaults to
     the committer identity; if specified, it must be stuck to the
     option without a space.  ‘--no-gpg-sign’ is useful to countermand
     both ‘commit.gpgSign’ configuration variable, and earlier
     ‘--gpg-sign’.

‘-q’
‘--quiet’
     静かにします。このオプションは ‘--no-stat’ を含んでいます。

‘-v’
‘--verbose’
     おしゃべりになります。 ‘--stat’ を含んでいます。

‘--stat’
     最後のリベース以降にアップストリームで変更されたもののdiffstatを表
     示します。 diffstatは、構成オプション rebase.stat によっても制御さ
     れます。

‘-n’
‘--no-stat’
     リベースプロセスの一部としてdiffstatを表示しないでください。

‘--no-verify’
     このオプションは、リベース前のフックをバイパスします。 githooks(5)
     も参照してください。

‘--verify’
     プリリベースフック(pre-rebase hook)の実行を許可します。これがデフォ
     ルトです。このオプションは、 ‘--no-verify’ をオーバーライドするため
     に使用できます。 githooks(5) も参照してください。

‘-C<n>’
     Ensure at least <n> lines of surrounding context match before and
     after each change.  When fewer lines of surrounding context exist
     they all must match.  By default no context is ever ignored.
     Implies –apply.

     以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。

‘--no-ff’
‘--force-rebase’
‘-f’
     Individually replay all rebased commits instead of fast-forwarding
     over the unchanged ones.  This ensures that the entire history of
     the rebased branch is composed of new commits.

     You may find this helpful after reverting a topic branch merge, as
     this option recreates the topic branch with fresh commits so it can
     be remerged successfully without needing to "revert the reversion"
     (see the revert-a-faulty-merge How-To
     (howto/revert-a-faulty-merge.html) for details).

‘--fork-point’
‘--no-fork-point’
     <branch>によって導入されたコミットを計算するときに、reflogを使用し
     て、<upstream>と<branch>の間の、より一般的な祖先を見つけます。

     When –fork-point is active, _fork_point_ will be used instead of
     <upstream> to calculate the set of commits to rebase, where
     _fork_point_ is the result of ‘git merge-base --fork-point
     <upstream> <branch>’ command (see git-merge-base(1)).  If
     _fork_point_ ends up being empty, the <upstream> will be used as a
     fallback.

     コマンドラインで<upstream>が指定されている場合、デフォルトは
     ‘--no-fork-point’ です。それ以外の場合、デフォルトは ‘--fork-point’
     です。

     If your branch was based on <upstream> but <upstream> was rewound
     and your branch contains commits which were dropped, this option
     can be used with ‘--keep-base’ in order to drop those commits from
     your branch.

     以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。

‘--ignore-whitespace’
     差分を調整しようとするときは、空白の違いを無視してください。現在、
     各バックエンドはこの振る舞いの近似を実装しています:

     apply backend: When applying a patch, ignore changes in whitespace
     in context lines.  Unfortunately, this means that if the "old"
     lines being replaced by the patch differ only in whitespace from
     the existing file, you will get a merge conflict instead of a
     successful patch application.

     merge backend: Treat lines with only whitespace changes as
     unchanged when merging.  Unfortunately, this means that any patch
     hunks that were intended to modify whitespace and nothing else will
     be dropped, even if the other side had no changes that conflicted.

‘--whitespace=<option>’
     このフラグは、パッチを適用する「git apply」プログラム(git-apply(1)
     を参照)に渡されます。 ‘--apply’ の意味を含んでいます。

     以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。

‘--committer-date-is-author-date’
     Instead of using the current time as the committer date, use the
     author date of the commit being rebased as the committer date.
     This option implies ‘--force-rebase’.

‘--ignore-date’
‘--reset-author-date’
     Instead of using the author date of the original commit, use the
     current time as the author date of the rebased commit.  This option
     implies ‘--force-rebase’.

     以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。

‘--signoff’
     Add a ‘Signed-off-by’ trailer to all the rebased commits.  Note
     that if ‘--interactive’ is given then only commits marked to be
     picked, edited or reworded will have the trailer added.

     以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。

‘-i’
‘--interactive’
     Make a list of the commits which are about to be rebased.  Let the
     user edit that list before rebasing.  This mode can also be used to
     split commits (see SPLITTING COMMITS below).

     The commit list format can be changed by setting the configuration
     option rebase.instructionFormat.  A customized instruction format
     will automatically have the long commit hash prepended to the
     format.

     以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。

‘-r’
‘--rebase-merges[=(rebase-cousins|no-rebase-cousins)]’
     By default, a rebase will simply drop merge commits from the todo
     list, and put the rebased commits into a single, linear branch.
     With ‘--rebase-merges’, the rebase will instead try to preserve the
     branching structure within the commits that are to be rebased, by
     recreating the merge commits.  Any resolved merge conflicts or
     manual amendments in these merge commits will have to be
     resolved/re-applied manually.

     By default, or when ‘no-rebase-cousins’ was specified, commits
     which do not have ‘<upstream>’ as direct ancestor will keep their
     original branch point, i.e.  commits that would be excluded by
     git-log(1)’s ‘--ancestry-path’ option will keep their original
     ancestry by default.  If the ‘rebase-cousins’ mode is turned on,
     such commits are instead rebased onto ‘<upstream>’ (or ‘<onto>’, if
     specified).

     The ‘--rebase-merges’ mode is similar in spirit to the deprecated
     ‘--preserve-merges’ but works with interactive rebases, where
     commits can be reordered, inserted and dropped at will.

     It is currently only possible to recreate the merge commits using
     the ‘ort’ merge strategy; different merge strategies can be used
     only via explicit ‘exec git merge -s <strategy> [...]’ commands.

     以下の「REBASING MERGES」(マージのリベース)および「INCOMPATIBLE
     OPTIONS」(互換性のないオプション)も参照してください。

‘-p’
‘--preserve-merges’
     [DEPRECATED: use ‘--rebase-merges’ instead] Recreate merge commits
     instead of flattening the history by replaying commits a merge
     commit introduces.  Merge conflict resolutions or manual amendments
     to merge commits are not preserved.

     This uses the ‘--interactive’ machinery internally, but combining
     it with the ‘--interactive’ option explicitly is generally not a
     good idea unless you know what you are doing (see BUGS below).

     以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。

‘-x <cmd>’
‘--exec <cmd>’
     Append "exec <cmd>" after each line creating a commit in the final
     history.  <cmd> will be interpreted as one or more shell commands.
     Any command that fails will interrupt the rebase, with exit code 1.

     ‘--exec’ の1つのインスタンスを複数のコマンドで使用することにより、
     複数のコマンドを実行できます:

          git rebase -i --exec "cmd1 && cmd2 && ..."

     または、複数の ‘--exec’ を指定します:

          git rebase -i --exec "cmd1" --exec "cmd2" --exec ...

     ‘--autosquash’ が使用されている場合、「exec」行は中間コミットに追加
     されず、各スカッシュ/修正シリーズの最後にのみ現れます。

     これは内部で ‘--interactive’ 機構を使用しますが、明示的な
     ‘--interactive’ の指定なしで実行できます。

     以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。

‘--root’
     Rebase all commits reachable from <branch>, instead of limiting
     them with an <upstream>.  This allows you to rebase the root
     commit(s) on a branch.  When used with –onto, it will skip changes
     already contained in <newbase> (instead of <upstream>) whereas
     without –onto it will operate on every change.  When used together
     with both –onto and –preserve-merges, _all_ root commits will be
     rewritten to have <newbase> as parent instead.

     以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。

‘--autosquash’
‘--no-autosquash’
     When the commit log message begins with "squash!  …" or "fixup!  …"
     or "amend!  …", and there is already a commit in the todo list that
     matches the same ‘...’, automatically modify the todo list of
     ‘rebase -i’, so that the commit marked for squashing comes right
     after the commit to be modified, and change the action of the moved
     commit from ‘pick’ to ‘squash’ or ‘fixup’ or ‘fixup -C’
     respectively.  A commit matches the ‘...’ if the commit subject
     matches, or if the ‘...’ refers to the commit’s hash.  As a
     fall-back, partial matches of the commit subject work, too.  The
     recommended way to create fixup/amend/squash commits is by using
     the ‘--fixup’, ‘--fixup=amend:’ or ‘--fixup=reword:’ and ‘--squash’
     options respectively of git-commit(1).

     If the ‘--autosquash’ option is enabled by default using the
     configuration variable ‘rebase.autoSquash’, this option can be used
     to override and disable this setting.

     以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。

‘--autostash’
‘--no-autostash’
     Automatically create a temporary stash entry before the operation
     begins, and apply it after the operation ends.  This means that you
     can run rebase on a dirty worktree.  However, use with care: the
     final stash application after a successful rebase might result in
     non-trivial conflicts.

‘--reschedule-failed-exec’
‘--no-reschedule-failed-exec’
     失敗した ‘exec’ コマンドを自動的に再スケジュールします。 これは、対
     話モード(または ‘--exec’ オプションが提供された場合)でのみ意味があ
     ります。

     Even though this option applies once a rebase is started, it’s set
     for the whole rebase at the start based on either the
     ‘rebase.rescheduleFailedExec’ configuration (see git-config(1) or
     "CONFIGURATION" below) or whether this option is provided.
     Otherwise an explicit ‘--no-reschedule-failed-exec’ at the start
     would be overridden by the presence of
     ‘rebase.rescheduleFailedExec=true’ configuration.


INCOMPATIBLE OPTIONS
********************

これら、

   • ‘--apply’

   • ‘--whitespace’

   • ‘-C’

   は、以下のオプションと互換性がありません:

   • ‘--merge’

   • ‘--strategy’

   • ‘--strategy-option’

   • ‘--allow-empty-message’

   • ‘--[no-]autosquash’

   • ‘--rebase-merges’

   • ‘--preserve-merges’

   • ‘--interactive’

   • ‘--exec’

   • ‘--no-keep-empty’

   • ‘--empty=’

   • ‘--reapply-cherry-picks’

   • ‘--edit-todo’

   • ‘--onto’ と組み合わせて使用する場合の ‘--root’

   加えて、以下のオプションの組み合わせには互換性がありません:

   • ‘--preserve-merges’ かつ ‘--interactive’

   • ‘--preserve-merges’ かつ ‘--signoff’

   • ‘--preserve-merges’ かつ ‘--rebase-merges’

   • ‘--preserve-merges’ かつ ‘--empty=’

   • ‘--preserve-merges’ かつ ‘--ignore-whitespace’

   • ‘--preserve-merges’ かつ ‘--committer-date-is-author-date’

   • ‘--preserve-merges’ かつ ‘--ignore-date’

   • ‘--keep-base’ かつ ‘--onto’

   • ‘--keep-base’ かつ ‘--root’

   • ‘--fork-point’ かつ ‘--root’


振る舞いの違い
**************

git rebase has two primary backends: apply and merge.  (The apply
backend used to be known as the _am_ backend, but the name led to
confusion as it looks like a verb instead of a noun.  Also, the merge
backend used to be known as the interactive backend, but it is now used
for non-interactive cases as well.  Both were renamed based on
lower-level functionality that underpinned each.)  There are some subtle
differences in how these two backends behave:


空のコミット
============

The apply backend unfortunately drops intentionally empty commits, i.e.
commits that started empty, though these are rare in practice.  It also
drops commits that become empty and has no option for controlling this
behavior.

   The merge backend keeps intentionally empty commits by default
(though with -i they are marked as empty in the todo list editor, or
they can be dropped automatically with –no-keep-empty).

   Similar to the apply backend, by default the merge backend drops
commits that become empty unless -i/–interactive is specified (in which
case it stops and asks the user what to do).  The merge backend also has
an –empty={drop,keep,ask} option for changing the behavior of handling
commits that become empty.


ディレクトリ名変更の検知
========================

Due to the lack of accurate tree information (arising from constructing
fake ancestors with the limited information available in patches),
directory rename detection is disabled in the apply backend.  Disabled
directory rename detection means that if one side of history renames a
directory and the other adds new files to the old directory, then the
new files will be left behind in the old directory without any warning
at the time of rebasing that you may want to move these files into the
new directory.

   ディレクトリ名変更の検出は、マージバックエンドと連携して、このような
場合に警告を提供します。


Context
=======

The apply backend works by creating a sequence of patches (by calling
‘format-patch’ internally), and then applying the patches in sequence
(calling ‘am’ internally).  Patches are composed of multiple hunks, each
with line numbers, a context region, and the actual changes.  The line
numbers have to be taken with some fuzz, since the other side will
likely have inserted or deleted lines earlier in the file.  The context
region is meant to help find how to adjust the line numbers in order to
apply the changes to the right lines.  However, if multiple areas of the
code have the same surrounding lines of context, the wrong one can be
picked.  There are real-world cases where this has caused commits to be
reapplied incorrectly with no conflicts reported.  Setting diff.context
to a larger value may prevent such types of problems, but increases the
chance of spurious conflicts (since it will require more lines of
matching context to apply).

   マージバックエンドは、関連する各ファイルの完全なコピーを使って動作し
、これらの種類の問題からファイルを保護します。


Labelling of conflicts markers
==============================

When there are content conflicts, the merge machinery tries to annotate
each side’s conflict markers with the commits where the content came
from.  Since the apply backend drops the original information about the
rebased commits and their parents (and instead generates new fake
commits based off limited information in the generated patches), those
commits cannot be identified; instead it has to fall back to a commit
summary.  Also, when merge.conflictStyle is set to diff3, the apply
backend will use "constructed merge base" to label the content from the
merge base, and thus provide no information about the merge base commit
whatsoever.

   マージバックエンドは、履歴の両側で完全なコミットで動作するため、その
ような制限はありません。


フック
======

The apply backend has not traditionally called the post-commit hook,
while the merge backend has.  Both have called the post-checkout hook,
though the merge backend has squelched its output.  Further, both
backends only call the post-checkout hook with the starting point commit
of the rebase, not the intermediate commits nor the final commit.  In
each case, the calling of these hooks was by accident of implementation
rather than by design (both backends were originally implemented as
shell scripts and happened to invoke other commands like _git checkout_
or _git commit_ that would call the hooks).  Both backends should have
the same behavior, though it is not entirely clear which, if any, is
correct.  We will likely make rebase stop calling either of these hooks
in the future.


Interruptability
================

The apply backend has safety problems with an ill-timed interrupt; if
the user presses Ctrl-C at the wrong time to try to abort the rebase,
the rebase can enter a state where it cannot be aborted with a
subsequent ‘git rebase --abort’.  The merge backend does not appear to
suffer from the same shortcoming.  (See
https://lore.kernel.org/git/20200207132152.GC2868@szeder.dev/
(https://lore.kernel.org/git/20200207132152.GC2868@szeder.dev/) for
details.)


Commit Rewording
================

When a conflict occurs while rebasing, rebase stops and asks the user to
resolve.  Since the user may need to make notable changes while
resolving conflicts, after conflicts are resolved and the user has run
‘git rebase --continue’, the rebase should open an editor and ask the
user to update the commit message.  The merge backend does this, while
the apply backend blindly applies the original commit message.


Miscellaneous differences
=========================

ほとんどの人がおそらく取るに足らないと考えるであろうが、完全性のためにい
くつかの振る舞いの違いについて言及します:

   • Reflog: 2つのバックエンドは、reflogで行われた変更を説明するときに異
     なる表現を使用しますが、どちらも「リベース」という単語を使用します
     。

   • Progress, informational, and error messages: The two backends
     provide slightly different progress and informational messages.
     Also, the apply backend writes error messages (such as "Your files
     would be overwritten…") to stdout, while the merge backend writes
     them to stderr.

   • 状態ディレクトリ: 2つのバックエンドは、.git/ の下の異なるディレクト
     リに状態を保持します


MERGE STRATEGIES
****************

The merge mechanism (‘git merge’ and ‘git pull’ commands) allows the
backend _merge strategies_ to be chosen with ‘-s’ option.  Some
strategies can also take their own options, which can be passed by
giving ‘-X<option>’ arguments to ‘git merge’ and/or ‘git pull’.

ort
     This is the default merge strategy when pulling or merging one
     branch.  This strategy can only resolve two heads using a 3-way
     merge algorithm.  When there is more than one common ancestor that
     can be used for 3-way merge, it creates a merged tree of the common
     ancestors and uses that as the reference tree for the 3-way merge.
     This has been reported to result in fewer merge conflicts without
     causing mismerges by tests done on actual merge commits taken from
     Linux 2.6 kernel development history.  Additionally this strategy
     can detect and handle merges involving renames.  It does not make
     use of detected copies.  The name for this algorithm is an acronym
     ("Ostensibly Recursive’s Twin") and came from the fact that it was
     written as a replacement for the previous default algorithm,
     ‘recursive’.

     The _ort_ strategy can take the following options:

     ours
          This option forces conflicting hunks to be auto-resolved
          cleanly by favoring _our_ version.  Changes from the other
          tree that do not conflict with our side are reflected in the
          merge result.  For a binary file, the entire contents are
          taken from our side.

          This should not be confused with the _ours_ merge strategy,
          which does not even look at what the other tree contains at
          all.  It discards everything the other tree did, declaring
          _our_ history contains all that happened in it.

     theirs
          This is the opposite of _ours_; note that, unlike _ours_,
          there is no _theirs_ merge strategy to confuse this merge
          option with.

     ignore-space-change
     ignore-all-space
     ignore-space-at-eol
     ignore-cr-at-eol
          Treats lines with the indicated type of whitespace change as
          unchanged for the sake of a three-way merge.  Whitespace
          changes mixed with other changes to a line are not ignored.
          See also git-diff(1) ‘-b’, ‘-w’, ‘--ignore-space-at-eol’, and
          ‘--ignore-cr-at-eol’.

             • If _their_ version only introduces whitespace changes to
               a line, _our_ version is used;

             • If _our_ version introduces whitespace changes but
               _their_ version includes a substantial change, _their_
               version is used;

             • Otherwise, the merge proceeds in the usual way.

     renormalize
          This runs a virtual check-out and check-in of all three stages
          of a file when resolving a three-way merge.  This option is
          meant to be used when merging branches with different clean
          filters or end-of-line normalization rules.  See "Merging
          branches with differing checkin/checkout attributes" in
          gitattributes(5) for details.

     no-renormalize
          Disables the ‘renormalize’ option.  This overrides the
          ‘merge.renormalize’ configuration variable.

     find-renames[=<n>]
          Turn on rename detection, optionally setting the similarity
          threshold.  This is the default.  This overrides the
          _merge.renames_ configuration variable.  See also git-diff(1)
          ‘--find-renames’.

     rename-threshold=<n>
          Deprecated synonym for ‘find-renames=<n>’.

     subtree[=<path>]
          This option is a more advanced form of _subtree_ strategy,
          where the strategy makes a guess on how two trees must be
          shifted to match with each other when merging.  Instead, the
          specified path is prefixed (or stripped from the beginning) to
          make the shape of two trees to match.

recursive
     This can only resolve two heads using a 3-way merge algorithm.
     When there is more than one common ancestor that can be used for
     3-way merge, it creates a merged tree of the common ancestors and
     uses that as the reference tree for the 3-way merge.  This has been
     reported to result in fewer merge conflicts without causing
     mismerges by tests done on actual merge commits taken from Linux
     2.6 kernel development history.  Additionally this can detect and
     handle merges involving renames.  It does not make use of detected
     copies.  This was the default strategy for resolving two heads from
     Git v0.99.9k until v2.33.0.

     The _recursive_ strategy takes the same options as _ort_.  However,
     there are three additional options that _ort_ ignores (not
     documented above) that are potentially useful with the _recursive_
     strategy:

     patience
          Deprecated synonym for ‘diff-algorithm=patience’.

     diff-algorithm=[patience|minimal|histogram|myers]
          Use a different diff algorithm while merging, which can help
          avoid mismerges that occur due to unimportant matching lines
          (such as braces from distinct functions).  See also
          git-diff(1) ‘--diff-algorithm’.  Note that ‘ort’ specifically
          uses ‘diff-algorithm=histogram’, while ‘recursive’ defaults to
          the ‘diff.algorithm’ config setting.

     no-renames
          Turn off rename detection.  This overrides the ‘merge.renames’
          configuration variable.  See also git-diff(1) ‘--no-renames’.

resolve
     This can only resolve two heads (i.e.  the current branch and
     another branch you pulled from) using a 3-way merge algorithm.  It
     tries to carefully detect criss-cross merge ambiguities.  It does
     not handle renames.

octopus
     This resolves cases with more than two heads, but refuses to do a
     complex merge that needs manual resolution.  It is primarily meant
     to be used for bundling topic branch heads together.  This is the
     default merge strategy when pulling or merging more than one
     branch.

ours
     This resolves any number of heads, but the resulting tree of the
     merge is always that of the current branch head, effectively
     ignoring all changes from all other branches.  It is meant to be
     used to supersede old development history of side branches.  Note
     that this is different from the -Xours option to the _recursive_
     merge strategy.

subtree
     This is a modified ‘ort’ strategy.  When merging trees A and B, if
     B corresponds to a subtree of A, B is first adjusted to match the
     tree structure of A, instead of reading the trees at the same
     level.  This adjustment is also done to the common ancestor tree.

   With the strategies that use 3-way merge (including the default,
_ort_), if a change is made on both branches, but later reverted on one
of the branches, that change will be present in the merged result; some
people find this behavior confusing.  It occurs because only the heads
and the merge base are considered when performing a merge, not the
individual commits.  The merge algorithm therefore considers the
reverted change as no change at all, and substitutes the changed version
instead.


NOTES
*****

共有リポジトリで「git rebase」を使用することの意味を理解する必要がありま
す。 下記の「RECOVERING FROM UPSTREAM REBASE」も参照してください。

   When the git-rebase command is run, it will first execute a
"pre-rebase" hook if one exists.  You can use this hook to do sanity
checks and reject the rebase if it isn’t appropriate.  Please see the
template pre-rebase hook script for an example.

   完了すると、<branch>が現在のブランチになります。


INTERACTIVE MODE
****************

対話的にリベースするということは、リベースされるコミットを編集する機会が
あることを意味します。コミットを並べ替えたり、削除したりできます(不良パ
ッチやその他の不要なパッチを削除します)。

   対話的モードは、以下の種類の作業の流れを対象としています:

  1. 素晴らしいアイデアを思いついた

  2. コードをハックハック

  3. 提出用のシリーズを準備する

  4. 送信

   ここで、(2)は、以下のいくつかの内容で構成されています

   a) 通常

  1. コミットに値する何かを終える

  2. コミット

   b) 独立した修正

  1. 何かが機能しないことに気付く

  2. そいつを修正する

  3. それをコミット

   Sometimes the thing fixed in b.2.  cannot be amended to the not-quite
perfect commit it fixes, because that commit is buried deeply in a patch
series.  That is exactly what interactive rebase is for: use it after
plenty of "a"s and "b"s, by rearranging and editing commits, and
squashing multiple commits into one.

   あなたがそのまま保持したい最後のコミットから開始します:

     git rebase -i <after-this-commit>

   An editor will be fired up with all the commits in your current
branch (ignoring merge commits), which come after the given commit.  You
can reorder the commits in this list to your heart’s content, and you
can remove them.  The list looks more or less like this:

     pick deadbee The oneline of this commit
     pick fa1afe1 The oneline of the next commit
     ...

   The oneline descriptions are purely for your pleasure; _git rebase_
will not look at them but at the commit names ("deadbee" and "fa1afe1"
in this example), so do not delete or edit the names.

   By replacing the command "pick" with the command "edit", you can tell
_git rebase_ to stop after applying that commit, so that you can edit
the files and/or the commit message, amend the commit, and continue
rebasing.

   リベースを中断するには(「edit」コマンドと同じように、ただし最初にコミ
ットを選択せずに)、「break」コマンドを使用します。

   コミットのコミットメッセージを編集するだけの場合は、コマンド「pick」
をコマンド「reword」に置き換えます。

   コミットを削除するには、コマンド「pick」を「drop」に置き換えるか、マ
ッチする行を削除します。

   If you want to fold two or more commits into one, replace the command
"pick" for the second and subsequent commits with "squash" or "fixup".
If the commits had different authors, the folded commit will be
attributed to the author of the first commit.  The suggested commit
message for the folded commit is the concatenation of the first commit’s
message with those identified by "squash" commands, omitting the
messages of commits identified by "fixup" commands, unless "fixup -c" is
used.  In that case the suggested commit message is only the message of
the "fixup -c" commit, and an editor is opened allowing you to edit the
message.  The contents (patch) of the "fixup -c" commit are still
incorporated into the folded commit.  If there is more than one "fixup
-c" commit, the message from the final one is used.  You can also use
"fixup -C" to get the same behavior as "fixup -c" except without opening
an editor.

   _git rebase_ will stop when "pick" has been replaced with "edit" or
when a command fails due to merge errors.  When you are done editing
and/or resolving conflicts you can continue with ‘git rebase
--continue’.

   For example, if you want to reorder the last 5 commits, such that
what was HEAD~4 becomes the new HEAD. To achieve that, you would call
_git rebase_ like this:

     $ git rebase -i HEAD~5

   そして、最初のパッチをリストの最後に移動します。

   たとえば、あなたが以下のような歴史を持っているなら、マージコミットを
再作成することをお勧めします:

                X
                 \
              A---M---B
             /
     ---o---O---P---Q

   あなたは「A」から「Q」までのサイドブランチをリベースしたいとします。
現在のHEADが「B」であることを確認して

     $ git rebase -i -r --onto Q O

   Reordering and editing commits usually creates untested intermediate
steps.  You may want to check that your history editing did not break
anything by running a test, or at least recompiling at intermediate
points in history by using the "exec" command (shortcut "x").  You may
do so by creating a todo list like this one:

     pick deadbee Implement feature XXX
     fixup f1a5c00 Fix to feature XXX
     exec make
     pick c0ffeee The oneline of the next commit
     edit deadbab The oneline of the commit after
     exec cd subdir; make test
     ...

   The interactive rebase will stop when a command fails (i.e.  exits
with non-0 status) to give you an opportunity to fix the problem.  You
can continue with ‘git rebase --continue’.

   The "exec" command launches the command in a shell (the one specified
in ‘$SHELL’, or the default shell if ‘$SHELL’ is not set), so you can
use shell features (like "cd", ">", ";" …).  The command is run from the
root of the working tree.

     $ git rebase -i --exec "make test"

   このコマンドを使用すると、中間コミットがコンパイル可能であることを確
認できます。ToDoリストは以下のようになります:

     pick 5928aea one
     exec make test
     pick 04d0fda two
     exec make test
     pick ba46169 three
     exec make test
     pick f4593f9 four
     exec make test


コミットの分割
**************

In interactive mode, you can mark commits with the action "edit".
However, this does not necessarily mean that _git rebase_ expects the
result of this edit to be exactly one commit.  Indeed, you can undo the
commit, or you can add other commits.  This can be used to split a
commit into two:

   • Start an interactive rebase with ‘git rebase -i <commit>^’, where
     <commit> is the commit you want to split.  In fact, any commit
     range will do, as long as it contains that commit.

   • 分割するコミットを、アクション「edit」でマークします。

   • When it comes to editing that commit, execute ‘git reset HEAD^’.
     The effect is that the HEAD is rewound by one, and the index
     follows suit.  However, the working tree stays the same.

   • Now add the changes to the index that you want to have in the first
     commit.  You can use ‘git add’ (possibly interactively) or _git
     gui_ (or both) to do that.

   • 最新の適切なコミットメッセージを使用して、最新の「現在のインデック
     ス」をコミットします。

   • 作業ツリーがクリーンになるまで、最後の2つの手順を繰り返します。

   • ‘git rebase --continue’ でリベースを続行します。

   If you are not absolutely sure that the intermediate revisions are
consistent (they compile, pass the testsuite, etc.)  you should use _git
stash_ to stash away the not-yet-committed changes after each commit,
test, and amend the commit if fixes are necessary.


RECOVERING FROM UPSTREAM REBASE
*******************************

Rebasing (or any other form of rewriting) a branch that others have
based work on is a bad idea: anyone downstream of it is forced to
manually fix their history.  This section explains how to do the fix
from the downstream’s point of view.  The real fix, however, would be to
avoid rebasing the upstream in the first place.

   To illustrate, suppose you are in a situation where someone develops
a _subsystem_ branch, and you are working on a _topic_ that is dependent
on this _subsystem_.  You might end up with a history like the
following:

         o---o---o---o---o---o---o---o  master
              \
               o---o---o---o---o  subsystem
                                \
                                 *---*---*  topic

   _subsystem_ が _master_ に対してリベースされる場合、以下が発生します:

         o---o---o---o---o---o---o---o  master
              \                       \
               o---o---o---o---o       o'--o'--o'--o'--o'  subsystem
                                \
                                 *---*---*  topic

   これで通常どおり開発を続行し、最終的に「topic」を「subsystem」にマー
ジすると、「subsystem」からのコミットは永久に複製されたままになります:

         o---o---o---o---o---o---o---o  master
              \                       \
               o---o---o---o---o       o'--o'--o'--o'--o'--M  subsystem
                                \                         /
                                 *---*---*-..........-*--*  topic

   Such duplicates are generally frowned upon because they clutter up
history, making it harder to follow.  To clean things up, you need to
transplant the commits on _topic_ to the new _subsystem_ tip, i.e.,
rebase _topic_.  This becomes a ripple effect: anyone downstream from
_topic_ is forced to rebase too, and so on!

   以下のサブセクションで議論する2種類の修正があります:

簡単な場合: 変更は文字通り同じ(same)
     これは、 _subsystem_ のリベースが単純なリベースであり、競合がなかっ
     た場合に発生します。

難しい場合: 変更は同じではありません
     This happens if the _subsystem_ rebase had conflicts, or used
     ‘--interactive’ to omit, edit, squash, or fixup commits; or if the
     upstream used one of ‘commit --amend’, ‘reset’, or a full history
     rewriting command like ‘filter-repo’
     (https://github.com/newren/git-filter-repo).


簡単な場合
==========

Only works if the changes (patch IDs based on the diff contents) on
_subsystem_ are literally the same before and after the rebase
_subsystem_ did.

   In that case, the fix is easy because _git rebase_ knows to skip
changes that are already present in the new upstream (unless
‘--reapply-cherry-picks’ is given).  So if you say (assuming you’re on
_topic_)

         $ git rebase subsystem

   あなたは修正された履歴で終わります。

         o---o---o---o---o---o---o---o  master
                                      \
                                       o'--o'--o'--o'--o'  subsystem
                                                        \
                                                         *---*---*  topic


難しい場合
==========

_subsystem_ の変更がリベース前の変更に正確に対応していない場合、事態はさ
らに複雑になります。

     *Note*

     While an "easy case recovery" sometimes appears to be successful
     even in the hard case, it may have unintended consequences.  For
     example, a commit that was removed via ‘git rebase --interactive’
     will be *resurrected*!

   The idea is to manually tell _git rebase_ "where the old _subsystem_
ended and your _topic_ began", that is, what the old merge base between
them was.  You will have to find a way to name the last commit of the
old _subsystem_, for example:

   • With the _subsystem_ reflog: after _git fetch_, the old tip of
     _subsystem_ is at ‘subsystem@{1}’.  Subsequent fetches will
     increase the number.  (See git-reflog(1).)

   • _topic’の先端に関連して: ’topic_ に3つのコミットがあることを知って
     いるので、 _subsystem_ の古い先端は ‘topic~3’ でなければなりません
     。

   次に、あなたは以下のように言って、古い ‘subsystem..topic’ を新しい先
端に移植できます(reflogの場合、すでに _topic_ にいると仮定します):

         $ git rebase --onto subsystem subsystem@{1}

   The ripple effect of a "hard case" recovery is especially bad:
_everyone_ downstream from _topic_ will now have to perform a "hard
case" recovery too!


REBASING MERGES
***************

The interactive rebase command was originally designed to handle
individual patch series.  As such, it makes sense to exclude merge
commits from the todo list, as the developer may have merged the
then-current ‘master’ while working on the branch, only to rebase all
the commits onto ‘master’ eventually (skipping the merge commits).

   However, there are legitimate reasons why a developer may want to
recreate merge commits: to keep the branch structure (or "commit
topology") when working on multiple, inter-related branches.

   In the following example, the developer works on a topic branch that
refactors the way buttons are defined, and on another topic branch that
uses that refactoring to implement a "Report a bug" button.  The output
of ‘git log --graph --format=%s -5’ may look like this:

     *   Merge branch 'report-a-bug'
     |\
     | * Add the feedback button
     * | Merge branch 'refactor-button'
     |\ \
     | |/
     | * Use the Button class for all buttons
     | * Extract a generic Button class from the DownloadButton one

   The developer might want to rebase those commits to a newer ‘master’
while keeping the branch topology, for example when the first topic
branch is expected to be integrated into ‘master’ much earlier than the
second one, say, to resolve merge conflicts with changes to the
DownloadButton class that made it into ‘master’.

   This rebase can be performed using the ‘--rebase-merges’ option.  It
will generate a todo list looking like this:

     label onto

     # Branch: refactor-button
     reset onto
     pick 123456 Extract a generic Button class from the DownloadButton one
     pick 654321 Use the Button class for all buttons
     label refactor-button

     # Branch: report-a-bug
     reset refactor-button # Use the Button class for all buttons
     pick abcdef Add the feedback button
     label report-a-bug

     reset onto
     merge -C a1b2c3 refactor-button # Merge 'refactor-button'
     merge -C 6f5e4d report-a-bug # Merge 'report-a-bug'

   In contrast to a regular interactive rebase, there are ‘label’,
‘reset’ and ‘merge’ commands in addition to ‘pick’ ones.

   The ‘label’ command associates a label with the current HEAD when
that command is executed.  These labels are created as worktree-local
refs (‘refs/rewritten/<label>’) that will be deleted when the rebase
finishes.  That way, rebase operations in multiple worktrees linked to
the same repository do not interfere with one another.  If the ‘label’
command fails, it is rescheduled immediately, with a helpful message how
to proceed.

   The ‘reset’ command resets the HEAD, index and worktree to the
specified revision.  It is similar to an ‘exec git reset --hard
<label>’, but refuses to overwrite untracked files.  If the ‘reset’
command fails, it is rescheduled immediately, with a helpful message how
to edit the todo list (this typically happens when a ‘reset’ command was
inserted into the todo list manually and contains a typo).

   The ‘merge’ command will merge the specified revision(s) into
whatever is HEAD at that time.  With ‘-C <original-commit>’, the commit
message of the specified merge commit will be used.  When the ‘-C’ is
changed to a lower-case ‘-c’, the message will be opened in an editor
after a successful merge so that the user can edit the message.

   If a ‘merge’ command fails for any reason other than merge conflicts
(i.e.  when the merge operation did not even start), it is rescheduled
immediately.

   By default, the ‘merge’ command will use the ‘ort’ merge strategy for
regular merges, and ‘octopus’ for octopus merges.  One can specify a
default strategy for all merges using the ‘--strategy’ argument when
invoking rebase, or can override specific merges in the interactive list
of commands by using an ‘exec’ command to call ‘git merge’ explicitly
with a ‘--strategy’ argument.  Note that when calling ‘git merge’
explicitly like this, you can make use of the fact that the labels are
worktree-local refs (the ref ‘refs/rewritten/onto’ would correspond to
the label ‘onto’, for example) in order to refer to the branches you
want to merge.

   Note: the first command (‘label onto’) labels the revision onto which
the commits are rebased; The name ‘onto’ is just a convention, as a nod
to the ‘--onto’ option.

   It is also possible to introduce completely new merge commits from
scratch by adding a command of the form ‘merge <merge-head>’.  This form
will generate a tentative commit message and always open an editor to
let the user edit it.  This can be useful e.g.  when a topic branch
turns out to address more than a single concern and wants to be split
into two or even more topic branches.  Consider this todo list:

     pick 192837 Switch from GNU Makefiles to CMake
     pick 5a6c7e Document the switch to CMake
     pick 918273 Fix detection of OpenSSL in CMake
     pick afbecd http: add support for TLS v1.3
     pick fdbaec Fix detection of cURL in CMake on Windows

   The one commit in this list that is not related to CMake may very
well have been motivated by working on fixing all those bugs introduced
by switching to CMake, but it addresses a different concern.  To split
this branch into two topic branches, the todo list could be edited like
this:

     label onto

     pick afbecd http: add support for TLS v1.3
     label tlsv1.3

     reset onto
     pick 192837 Switch from GNU Makefiles to CMake
     pick 918273 Fix detection of OpenSSL in CMake
     pick fdbaec Fix detection of cURL in CMake on Windows
     pick 5a6c7e Document the switch to CMake
     label cmake

     reset onto
     merge tlsv1.3
     merge cmake


CONFIGURATION
*************

rebase.backend
     Default backend to use for rebasing.  Possible choices are _apply_
     or _merge_.  In the future, if the merge backend gains all
     remaining capabilities of the apply backend, this setting may
     become unused.

rebase.stat
     Whether to show a diffstat of what changed upstream since the last
     rebase.  False by default.

rebase.autoSquash
     If set to true enable ‘--autosquash’ option by default.

rebase.autoStash
     When set to true, automatically create a temporary stash entry
     before the operation begins, and apply it after the operation ends.
     This means that you can run rebase on a dirty worktree.  However,
     use with care: the final stash application after a successful
     rebase might result in non-trivial conflicts.  This option can be
     overridden by the ‘--no-autostash’ and ‘--autostash’ options of
     git-rebase(1).  Defaults to false.

rebase.missingCommitsCheck
     If set to "warn", git rebase -i will print a warning if some
     commits are removed (e.g.  a line was deleted), however the rebase
     will still proceed.  If set to "error", it will print the previous
     warning and stop the rebase, _git rebase –edit-todo_ can then be
     used to correct the error.  If set to "ignore", no checking is
     done.  To drop a commit without warning or error, use the ‘drop’
     command in the todo list.  Defaults to "ignore".

rebase.instructionFormat
     A format string, as specified in git-log(1), to be used for the
     todo list during an interactive rebase.  The format will
     automatically have the long commit hash prepended to the format.

rebase.abbreviateCommands
     If set to true, ‘git rebase’ will use abbreviated command names in
     the todo list resulting in something like this:

                  p deadbee The oneline of the commit
                  p fa1afe1 The oneline of the next commit
                  ...

     instead of:

                  pick deadbee The oneline of the commit
                  pick fa1afe1 The oneline of the next commit
                  ...

     Defaults to false.

rebase.rescheduleFailedExec
     Automatically reschedule ‘exec’ commands that failed.  This only
     makes sense in interactive mode (or when an ‘--exec’ option was
     provided).  This is the same as specifying the
     ‘--reschedule-failed-exec’ option.

rebase.forkPoint
     If set to false set ‘--no-fork-point’ option by default.

sequence.editor
     リベース命令ファイル(rebase instruction file)を編集するために ‘git
     rebase -i’ によって使用されるテキストエディタ。この値は、使用時にシ
     ェルによって解釈されることを意図しています。 これは、
     ‘GIT_SEQUENCE_EDITOR’ 環境変数によってオーバーライドできます。構成
     されていない場合は、代わりにデフォルトのコミットメッセージエディタ
     が使用されます。


BUGS
****

The todo list presented by the deprecated ‘--preserve-merges
--interactive’ does not represent the topology of the revision graph
(use ‘--rebase-merges’ instead).  Editing commits and rewording their
commit messages should work fine, but attempts to reorder commits tend
to produce counterintuitive results.  Use ‘--rebase-merges’ in such
scenarios instead.

   For example, an attempt to rearrange

     1 --- 2 --- 3 --- 4 --- 5

   to

     1 --- 2 --- 4 --- 3 --- 5

   by moving the "pick 4" line will result in the following history:

             3
            /
     1 --- 2 --- 4 --- 5


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-receive-pack,  Up: Top

Name
****

git-receive-pack — Receive what is pushed into the repository


Synopsis
********

     git-receive-pack <directory>


DESCRIPTION
***********

Invoked by _git send-pack_ and updates the repository with the
information fed from the remote end.

   This command is usually not invoked directly by the end user.  The UI
for the protocol is on the _git send-pack_ side, and the program pair is
meant to be used to push updates to remote repository.  For pull
operations, see git-fetch-pack(1).

   The command allows for creation and fast-forwarding of sha1 refs
(heads/tags) on the remote end (strictly speaking, it is the local end
_git-receive-pack_ runs, but to the user who is sitting at the send-pack
end, it is updating the remote.  Confused?)

   There are other real-world examples of using update and post-update
hooks found in the Documentation/howto directory.

   _git-receive-pack_ honours the receive.denyNonFastForwards config
option, which tells it if updates to a ref should be denied if they are
not fast-forwards.

   A number of other receive.* config options are available to tweak its
behavior, see git-config(1).


OPTIONS
*******

<directory>
     The repository to sync into.

‘--http-backend-info-refs’
     Used by git-http-backend(1) to serve up
     ‘$GIT_URL/info/refs?service=git-receive-pack’ requests.  See
     ‘--http-backend-info-refs’ in git-upload-pack(1).


PRE-RECEIVE HOOK
****************

Before any ref is updated, if $GIT_DIR/hooks/pre-receive file exists and
is executable, it will be invoked once with no parameters.  The standard
input of the hook will be one line per ref to be updated:

     sha1-old SP sha1-new SP refname LF

   The refname value is relative to $GIT_DIR; e.g.  for the master head
this is "refs/heads/master".  The two sha1 values before each refname
are the object names for the refname before and after the update.  Refs
to be created will have sha1-old equal to 0{40}, while refs to be
deleted will have sha1-new equal to 0{40}, otherwise sha1-old and
sha1-new should be valid objects in the repository.

   When accepting a signed push (see git-push(1)), the signed push
certificate is stored in a blob and an environment variable
‘GIT_PUSH_CERT’ can be consulted for its object name.  See the
description of ‘post-receive’ hook for an example.  In addition, the
certificate is verified using GPG and the result is exported with the
following environment variables:

‘GIT_PUSH_CERT_SIGNER’
     The name and the e-mail address of the owner of the key that signed
     the push certificate.

‘GIT_PUSH_CERT_KEY’
     The GPG key ID of the key that signed the push certificate.

‘GIT_PUSH_CERT_STATUS’
     The status of GPG verification of the push certificate, using the
     same mnemonic as used in ‘%G?’ format of ‘git log’ family of
     commands (see git-log(1)).

‘GIT_PUSH_CERT_NONCE’
     The nonce string the process asked the signer to include in the
     push certificate.  If this does not match the value recorded on the
     "nonce" header in the push certificate, it may indicate that the
     certificate is a valid one that is being replayed from a separate
     "git push" session.

‘GIT_PUSH_CERT_NONCE_STATUS’

     ‘UNSOLICITED’
          "git push –signed" sent a nonce when we did not ask it to send
          one.

     ‘MISSING’
          "git push –signed" did not send any nonce header.

     ‘BAD’
          "git push –signed" sent a bogus nonce.

     ‘OK’
          "git push –signed" sent the nonce we asked it to send.

     ‘SLOP’
          "git push –signed" sent a nonce different from what we asked
          it to send now, but in a previous session.  See
          ‘GIT_PUSH_CERT_NONCE_SLOP’ environment variable.

‘GIT_PUSH_CERT_NONCE_SLOP’
     "git push –signed" sent a nonce different from what we asked it to
     send now, but in a different session whose starting time is
     different by this many seconds from the current session.  Only
     meaningful when ‘GIT_PUSH_CERT_NONCE_STATUS’ says ‘SLOP’.  Also
     read about ‘receive.certNonceSlop’ variable in git-config(1).

   This hook is called before any refname is updated and before any
fast-forward checks are performed.

   If the pre-receive hook exits with a non-zero exit status no updates
will be performed, and the update, post-receive and post-update hooks
will not be invoked either.  This can be useful to quickly bail out if
the update is not to be supported.

   See the notes on the quarantine environment below.


UPDATE HOOK
***********

Before each ref is updated, if $GIT_DIR/hooks/update file exists and is
executable, it is invoked once per ref, with three parameters:

     $GIT_DIR/hooks/update refname sha1-old sha1-new

   The refname parameter is relative to $GIT_DIR; e.g.  for the master
head this is "refs/heads/master".  The two sha1 arguments are the object
names for the refname before and after the update.  Note that the hook
is called before the refname is updated, so either sha1-old is 0{40}
(meaning there is no such ref yet), or it should match what is recorded
in refname.

   The hook should exit with non-zero status if it wants to disallow
updating the named ref.  Otherwise it should exit with zero.

   Successful execution (a zero exit status) of this hook does not
ensure the ref will actually be updated, it is only a prerequisite.  As
such it is not a good idea to send notices (e.g.  email) from this hook.
Consider using the post-receive hook instead.


POST-RECEIVE HOOK
*****************

After all refs were updated (or attempted to be updated), if any ref
update was successful, and if $GIT_DIR/hooks/post-receive file exists
and is executable, it will be invoked once with no parameters.  The
standard input of the hook will be one line for each successfully
updated ref:

     sha1-old SP sha1-new SP refname LF

   The refname value is relative to $GIT_DIR; e.g.  for the master head
this is "refs/heads/master".  The two sha1 values before each refname
are the object names for the refname before and after the update.  Refs
that were created will have sha1-old equal to 0{40}, while refs that
were deleted will have sha1-new equal to 0{40}, otherwise sha1-old and
sha1-new should be valid objects in the repository.

   The ‘GIT_PUSH_CERT*’ environment variables can be inspected, just as
in ‘pre-receive’ hook, after accepting a signed push.

   Using this hook, it is easy to generate mails describing the updates
to the repository.  This example script sends one mail message per ref
listing the commits pushed to the repository, and logs the push
certificates of signed pushes with good signatures to a logger service:

     #!/bin/sh
     # mail out commit update information.
     while read oval nval ref
     do
             if expr "$oval" : '0*$' >/dev/null
             then
                     echo "Created a new ref, with the following commits:"
                     git rev-list --pretty "$nval"
             else
                     echo "New commits:"
                     git rev-list --pretty "$nval" "^$oval"
             fi |
             mail -s "Changes to ref $ref" commit-list@mydomain
     done
     # log signed push certificate, if any
     if test -n "${GIT_PUSH_CERT-}" && test ${GIT_PUSH_CERT_STATUS} = G
     then
             (
                     echo expected nonce is ${GIT_PUSH_NONCE}
                     git cat-file blob ${GIT_PUSH_CERT}
             ) | mail -s "push certificate from $GIT_PUSH_CERT_SIGNER" push-log@mydomain
     fi
     exit 0

   The exit code from this hook invocation is ignored, however a
non-zero exit code will generate an error message.

   Note that it is possible for refname to not have sha1-new when this
hook runs.  This can easily occur if another user modifies the ref after
it was updated by _git-receive-pack_, but before the hook was able to
evaluate it.  It is recommended that hooks rely on sha1-new rather than
the current value of refname.


POST-UPDATE HOOK
****************

After all other processing, if at least one ref was updated, and if
$GIT_DIR/hooks/post-update file exists and is executable, then
post-update will be called with the list of refs that have been updated.
This can be used to implement any repository wide cleanup tasks.

   The exit code from this hook invocation is ignored; the only thing
left for _git-receive-pack_ to do at that point is to exit itself
anyway.

   This hook can be used, for example, to run ‘git update-server-info’
if the repository is packed and is served via a dumb transport.

     #!/bin/sh
     exec git update-server-info


QUARANTINE ENVIRONMENT
**********************

When ‘receive-pack’ takes in objects, they are placed into a temporary
"quarantine" directory within the ‘$GIT_DIR/objects’ directory and
migrated into the main object store only after the ‘pre-receive’ hook
has completed.  If the push fails before then, the temporary directory
is removed entirely.

   This has a few user-visible effects and caveats:

  1. Pushes which fail due to problems with the incoming pack, missing
     objects, or due to the ‘pre-receive’ hook will not leave any
     on-disk data.  This is usually helpful to prevent repeated failed
     pushes from filling up your disk, but can make debugging more
     challenging.

  2. Any objects created by the ‘pre-receive’ hook will be created in
     the quarantine directory (and migrated only if it succeeds).

  3. The ‘pre-receive’ hook MUST NOT update any refs to point to
     quarantined objects.  Other programs accessing the repository will
     not be able to see the objects (and if the pre-receive hook fails,
     those refs would become corrupted).  For safety, any ref updates
     from within ‘pre-receive’ are automatically rejected.


SEE ALSO
********

git-send-pack(1), gitnamespaces(7)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-reflog,  Up: Top

Name
****

git-reflog — reflog情報を管理します


Synopsis
********

     git reflog <subcommand> <options>


DESCRIPTION
***********

このコマンドは、さまざまなサブコマンドと、サブコマンドに応じて異なるオプ
ションを取ります:

     git reflog [show] [log-options] [<ref>]
     git reflog expire [–expire=<time>] [–expire-unreachable=<time>]
             [–rewrite] [–updateref] [–stale-fix]
             [–dry-run | -n] [–verbose] [–all [–single-worktree] | <refs>…]
     git reflog delete [–rewrite] [–updateref]
             [–dry-run | -n] [–verbose] ref@{specifier}…
     git reflog exists <ref>

   参照ログ(reference logs)、または "reflogs" は、ブランチのヒントやその
他の参照がローカルリポジトリで更新された時期を記録します。reflogは、参照
の古い値を指定するために、さまざまなGitコマンドで役立ちます。 たとえば、
‘HEAD@{2}’ は「HEADが2移動前にあった位置」を意味し、
‘master@{one.week.ago}’ は「masterがこのローカルリポジトリで1週間前を指
していた位置」を意味する等々。詳細については gitrevisions(7) を参照して
ください。

   このコマンドは、reflogに記録された情報を管理します。

   「show」サブコマンド(サブコマンドの指定がない場合のデフォルトでもあり
ます)は、コマンドライン(またはデフォルトでは「HEAD」)で指定される参照の
ログを表示します。 reflogは最近のすべてのアクションをカバーし、さらに
‘HEAD’ reflogはブランチの切り替えを記録します。 ‘git reflog show’ は
‘git log -g --abbrev-commit --pretty=oneline’ のエイリアスです。詳細につ
いては git-log(1) を参照してください。

   「expire」サブコマンドは、古いreflogエントリを刈り取ります。「
expire」時間より古いエントリ、または「expire-unreachable」時間より古く、
現在の先端から到達できないエントリがreflogから削除されます。これは通常、
エンドユーザーが直接使用することはありません。代わりに、 git-gc(1) を参
照してください。

   「delete」サブコマンドは、reflogから単一のエントリを削除します。 その
引数は「正確な」エントリである必要があります(例: ‘git reflog delete
master@{2}’ )。 このサブコマンドは、通常、エンドユーザーが直接使用するこ
ともありません。

   「exists」サブコマンドは、refにreflogがあるかどうかをチェックします。
reflogが存在する場合はゼロのステータスで終了し、存在しない場合はゼロ以外
のステータスで終了します。


OPTIONS
*******


showサブコマンド用オプション
============================

‘git reflog show’ は、 ‘git log’ で受け入れられるすべてのオプションを受
け入れます。


expireサブコマンド用オプション
==============================

‘--all’
     すべての参照のreflogを処理します。

‘--single-worktree’
     デフォルトでは、 ‘--all’ が指定されている場合、すべての作業ツリーか
     らのreflogが処理されます。 このオプションは、処理を現在の作業ツリー
     からのreflogのみに制限します。

‘--expire=<time>’
     指定された時間より古いエントリを刈り取ります。このオプションが指定
     されていない場合、有効期限は構成設定 ‘gc.reflogExpire’ から取得され
     、デフォルトで90日になります。 ‘--expire=all’ は、年齢に関係なくエ
     ントリを削除します。 ‘--expire=never’ は、到達可能なエントリの刈り
     取りをオフにします(しかし、 ‘--expire-unreachable’ を参照してくださ
     い)。

‘--expire-unreachable=<time>’
     ブランチの現在の先端から到達できない ‘<time>’ より古いエントリを刈
     り取ります。このオプションが指定されていない場合、有効期限は構成設
     定 ‘gc.reflogExpireUnreachable’ から取得され、デフォルトで30日にな
     ります。 ‘--expire-unreachable=all’ は、年齢に関係なく、到達不能な
     エントリを刈り取ります。 ‘--expire-unreachable=never’ は、到達不能
     なエントリの早期刈り取りをオフにします(しかし、 ‘--expire’ を参照し
     てください)。

‘--updateref’
     以前の最上位エントリが刈り取りされた場合は、最上位のreflogエントリ
     の値(つまり、 <ref>@{0} )への参照を更新します。(このオプションは、
     シンボリック参照では無視されます。)

‘--rewrite’
     reflogエントリーの前任者が刈り込まれてしまった場合、その「古い」
     SHA-1を、現在の前任者にあるエントリーの「新しい」SHA-1フィールドと
     等しくなるように調整します。

‘--stale-fix’
     「壊れたコミット」(broken commits)を指すreflogエントリを削除します
     。壊れたコミットとは、どのリファレンスヒントからも到達できず、直接
     または間接的に、欠落しているコミットまたはツリーまたはブロブオブジ
     ェクトを参照するコミットです。

     これの計算では、到達可能なすべてのオブジェクトのトラバースが含まれ
     ます。つまり、 ‘git prune’ と同じコストがかかります。これは主に、
     reflogによって参照されるオブジェクトを保護しなかった古いバージョン
     のGitを使用したガベージコレクションによって引き起こされた破損を修正
     することを目的としています。

‘-n’
‘--dry-run’
     実際にエントリの刈り取りは行いません。何が刈り取られるかを表示する
     だけです。

‘--verbose’
     画面に追加情報を出力します。


deleteサブコマンド用オプション
==============================

‘git reflog delete’ は、オプション ‘--updateref’ と ‘-rewrite’ と ‘-n’ と
‘--dry-run’ と‘ –verbose‘ を受け入れます。これらは、 ‘expire’ で使用され
る場合と同じ意味です。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-remote-ext,  Up: Top

Name
****

git-remote-ext — スマートトランスポートを外部コマンドにブリッジします。


Synopsis
********

     git remote add <nick> "ext::<command>[ <arguments>…]"


DESCRIPTION
***********

このリモートヘルパーは、指定の ‘<command>’ を使用してリモートGitサーバー
に接続します。

   指定の ‘<command>’ のstdinに書き込んだデータは、git:// サーバーまたは
git-upload-pack または git-receive-pack または (状況に応じて
)git-upload-archive に送信されるものと見なし、かつ、 <command> の
stdoutからの読み取りは、同一のサービスから受信されたものと見なされます。

   コマンドと引数は、エスケープされていない空白で区切られます。

   以下のシーケンスには特別な意味があります:

‘% ‘
     コマンドまたは引数のリテラル空白

‘%%’
     リテラルのパーセント文字

‘%s’
     Gitが呼び出したいサービスの名前(receive-pack または upload-pack ま
     たは upload-archive)に置き換えられます。

‘%S’
     Gitが呼び出したいサービスの長い名前(long name)(git-receive-pack ま
     たは git-upload-pack または git-upload-archive)に置き換えられます。

‘%G’ (引数の最初の文字列である必要があります)
     この引数は ‘<command>’ には渡されません。その代わりにヘルパーは、サ
     ービスフィールドが適切な値に設定され、かつ、リポジトリフィールドが
     引数の残りの部分に設定された状態でリモート側に git:// サービス要求
     (request)を送信することから開始します。デフォルトでは、そのような要
     求は送信されません。

     これはリモート側の git:// サーバーへトンネルを介してアクセスする場
     合に便利です。

‘%V’ (引数の最初の文字列である必要があります)
     この引数は ‘<command>’ には渡されません。その代わりに git:// サービ
     ス要求でvhostフィールドを(引数の残りの部分に)設定します。デフォルト
     では、(送信の場合)そのような要求でvhostを送信しません。


ENVIRONMENT VARIABLES
*********************

GIT_TRANSLOOP_DEBUG
     設定されている場合、さまざまな読み取り/書き込みに関するデバッグ情報
     を出力します。


ENVIRONMENT VARIABLES PASSED TO COMMAND
***************************************

GIT_EXT_SERVICE
     サービスヘルパーが呼び出す必要のある長い名前(git-upload-pack など
     )を設定します。

GIT_EXT_SERVICE_NOPREFIX
     サービスヘルパーが呼び出す必要のある名前(upload-pack など)を設定し
     ます。


EXAMPLES
********

このリモートヘルパーは、 ‘git fetch <URL>’ 、 ‘git clone <URL>’ 、 ‘git
push <URL>’ 、 ‘git remote add <nick> <URL>’ などのコマンドを使用すると
きに、Gitによって透過的に使用され、 <URL>は ‘ext::’ で始まります。 例:

"ext::ssh -i /home/foo/.ssh/somekey user@host.example %S _foo/repo_"
     host.example:foo/repo と同様ですが、キーペアとして
     /home/foo/.ssh/somekey を使用し、リモート側のユーザーとしてuserを使
     用します。 これにより、 .ssh/config を編集する必要がなくなります。

"ext::socat -t3600 - ABSTRACT-CONNECT:/git-server %G/somerepo"
     抽象名前空間アドレス(abstract namespace address) /git-server で
     gitプロトコルを介してアクセス可能なパス /somerepo を持つリポジトリ
     を表します。

"ext::git-server-alias foo %G/repo"
     ヘルパープログラム ‘git-server-alias foo’ を使用してアクセスされる
     パス /repo を持つリポジトリを表します。リポジトリへのパスとリクエス
     トのタイプは、コマンドラインではなく、通常の git:// プロトコルのよ
     うにプロトコルストリームの一部として渡されます。

"ext::git-server-alias foo %G/repo %Vfoo"
     ヘルパープログラム ‘git-server-alias foo’ を使用してアクセスされる
     パス /repo を持つリポジトリを表します。プロトコルストリームで渡され
     るリモートサーバーのホスト名は「foo」になります(これにより、複数の
     仮想Gitサーバーがリンクレベルのアドレスを共有できるようになります
     )。

"ext::git-server-alias foo %G/repo% with% spaces %Vfoo"
     ヘルパープログラム ‘git-server-alias foo’ を使用してアクセスされる
     パス ‘/repo with spaces’ のリポジトリを表します。プロトコルストリー
     ムで渡されるリモートサーバーのホスト名は「foo」になります(これによ
     り、複数の仮想Gitサーバーがリンクレベルのアドレスを共有できるように
     なります)。

"ext::git-ssl foo.example /bar"
     ヘルパープログラム ‘git-ssl foo.example /bar’ を使用してアクセスさ
     れるリポジトリを表します。リクエストのタイプは、ヘルパーが環境変数
     を使用して決定できます(上記参照)。


SEE ALSO
********

gitremote-helpers(7)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-remote-fd,  Up: Top

Name
****

git-remote-fd — スマートトランスポートストリームを呼び出し元に反映します
(Reflect smart transport stream back to caller)


Synopsis
********

"fd::<infd>[,<outfd>][/<anything>]" (as URL)


DESCRIPTION
***********

このヘルパーは、指定のファイルデスクリプタを使用してリモートGitサーバー
に接続します。これはエンドユーザー向けではなく、git fetch、pushまたは
archiveを呼び出すプログラムとスクリプトを対象としています。

   <infd> のみが指定されている場合は、リモートGitサーバー
(git-upload-pack、git-receive-pack または git-upload-archive)に接続され
ている双方向ソケットであると見なされます。 <infd> と <outfd> の両方が指
定されている場合、それらはリモートGitサーバーに接続されているパイプであ
ると見なされます( <infd> は入力パイプ、 <outfd> は出力パイプです)。

   このヘルパーが開始される前に、ハンドシェイク手順(git:// のサービスリ
クエストの送信など)がすでに完了していることを前提としています。

   <anything> は任意の文字列にすることができます。それは無視されます。こ
れは、URLが何らかのコンテキストで表示される場合に、URLでユーザーに情報を
提供するためのものです。


ENVIRONMENT VARIABLES
*********************

GIT_TRANSLOOP_DEBUG
     設定されている場合、さまざまな 読み取り/書き込み に関するデバッグ情
     報を出力します。


EXAMPLES
********

‘git fetch fd::17 master’
     ファイルデスクリプタ #17 使用して master を Fetch し、
     git-upload-pack と通信します。

‘git fetch fd::17/foo master’
     同上。

‘git push fd::7,8 master (as URL)’
     master を push し、ファイルデスクリプタ #7 を使用して
     git-receive-pack からデータを読み取り、ファイルデスクリプタ #8 を使
     用して同じサービスにデータを書き込みます。

‘git push fd::7,8/bar master’
     同上。


SEE ALSO
********

gitremote-helpers(7)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-remote,  Up: Top

Name
****

git-remote — Manage set of tracked repositories


Synopsis
********

     git remote [-v | –verbose]
     git remote add [-t <branch>] [-m <master>] [-f] [–[no-]tags] [–mirror=(fetch|push)] <name> <url>
     git remote rename <old> <new>
     git remote remove <name>
     git remote set-head <name> (-a | –auto | -d | –delete | <branch>)
     git remote set-branches [–add] <name> <branch>…
     git remote get-url [–push] [–all] <name>
     git remote set-url [–push] <name> <newurl> [<oldurl>]
     git remote set-url –add [–push] <name> <newurl>
     git remote set-url –delete [–push] <name> <url>
     git remote [-v | –verbose] show [-n] <name>…
     git remote prune [-n | –dry-run] <name>…
     git remote [-v | –verbose] update [-p | –prune] [(<group> | <remote>)…]


DESCRIPTION
***********

Manage the set of repositories ("remotes") whose branches you track.


OPTIONS
*******

‘-v’
‘--verbose’
     Be a little more verbose and show remote url after name.  NOTE:
     This must be placed between ‘remote’ and subcommand.


COMMANDS
********

With no arguments, shows a list of existing remotes.  Several
subcommands are available to perform operations on the remotes.

_add_
     Add a remote named <name> for the repository at <url>.  The command
     ‘git fetch <name>’ can then be used to create and update
     remote-tracking branches <name>/<branch>.

     With ‘-f’ option, ‘git fetch <name>’ is run immediately after the
     remote information is set up.

     With ‘--tags’ option, ‘git fetch <name>’ imports every tag from the
     remote repository.

     With ‘--no-tags’ option, ‘git fetch <name>’ does not import tags
     from the remote repository.

     By default, only tags on fetched branches are imported (see
     git-fetch(1)).

     With ‘-t <branch>’ option, instead of the default glob refspec for
     the remote to track all branches under the ‘refs/remotes/<name>/’
     namespace, a refspec to track only ‘<branch>’ is created.  You can
     give more than one ‘-t <branch>’ to track multiple branches without
     grabbing all branches.

     With ‘-m <master>’ option, a symbolic-ref
     ‘refs/remotes/<name>/HEAD’ is set up to point at remote’s
     ‘<master>’ branch.  See also the set-head command.

     When a fetch mirror is created with ‘--mirror=fetch’, the refs will
     not be stored in the _refs/remotes/_ namespace, but rather
     everything in _refs/_ on the remote will be directly mirrored into
     _refs/_ in the local repository.  This option only makes sense in
     bare repositories, because a fetch would overwrite any local
     commits.

     When a push mirror is created with ‘--mirror=push’, then ‘git push’
     will always behave as if ‘--mirror’ was passed.

_rename_
     Rename the remote named <old> to <new>.  All remote-tracking
     branches and configuration settings for the remote are updated.

     In case <old> and <new> are the same, and <old> is a file under
     ‘$GIT_DIR/remotes’ or ‘$GIT_DIR/branches’, the remote is converted
     to the configuration file format.

_remove_
_rm_
     Remove the remote named <name>.  All remote-tracking branches and
     configuration settings for the remote are removed.

_set-head_
     Sets or deletes the default branch (i.e.  the target of the
     symbolic-ref ‘refs/remotes/<name>/HEAD’) for the named remote.
     Having a default branch for a remote is not required, but allows
     the name of the remote to be specified in lieu of a specific
     branch.  For example, if the default branch for ‘origin’ is set to
     ‘master’, then ‘origin’ may be specified wherever you would
     normally specify ‘origin/master’.

     With ‘-d’ or ‘--delete’, the symbolic ref
     ‘refs/remotes/<name>/HEAD’ is deleted.

     With ‘-a’ or ‘--auto’, the remote is queried to determine its
     ‘HEAD’, then the symbolic-ref ‘refs/remotes/<name>/HEAD’ is set to
     the same branch.  e.g., if the remote ‘HEAD’ is pointed at ‘next’,
     ‘git remote set-head origin -a’ will set the symbolic-ref
     ‘refs/remotes/origin/HEAD’ to ‘refs/remotes/origin/next’.  This
     will only work if ‘refs/remotes/origin/next’ already exists; if not
     it must be fetched first.

     Use ‘<branch>’ to set the symbolic-ref ‘refs/remotes/<name>/HEAD’
     explicitly.  e.g., ‘git remote set-head origin master’ will set the
     symbolic-ref ‘refs/remotes/origin/HEAD’ to
     ‘refs/remotes/origin/master’.  This will only work if
     ‘refs/remotes/origin/master’ already exists; if not it must be
     fetched first.

_set-branches_
     Changes the list of branches tracked by the named remote.  This can
     be used to track a subset of the available remote branches after
     the initial setup for a remote.

     The named branches will be interpreted as if specified with the
     ‘-t’ option on the ‘git remote add’ command line.

     With ‘--add’, instead of replacing the list of currently tracked
     branches, adds to that list.

_get-url_
     Retrieves the URLs for a remote.  Configurations for ‘insteadOf’
     and ‘pushInsteadOf’ are expanded here.  By default, only the first
     URL is listed.

     With ‘--push’, push URLs are queried rather than fetch URLs.

     With ‘--all’, all URLs for the remote will be listed.

_set-url_
     Changes URLs for the remote.  Sets first URL for remote <name> that
     matches regex <oldurl> (first URL if no <oldurl> is given) to
     <newurl>.  If <oldurl> doesn’t match any URL, an error occurs and
     nothing is changed.

     With ‘--push’, push URLs are manipulated instead of fetch URLs.

     With ‘--add’, instead of changing existing URLs, new URL is added.

     With ‘--delete’, instead of changing existing URLs, all URLs
     matching regex <url> are deleted for remote <name>.  Trying to
     delete all non-push URLs is an error.

     Note that the push URL and the fetch URL, even though they can be
     set differently, must still refer to the same place.  What you
     pushed to the push URL should be what you would see if you
     immediately fetched from the fetch URL. If you are trying to fetch
     from one place (e.g.  your upstream) and push to another (e.g.
     your publishing repository), use two separate remotes.

_show_
     Gives some information about the remote <name>.

     With ‘-n’ option, the remote heads are not queried first with ‘git
     ls-remote <name>’; cached information is used instead.

_prune_
     Deletes stale references associated with <name>.  By default, stale
     remote-tracking branches under <name> are deleted, but depending on
     global configuration and the configuration of the remote we might
     even prune local tags that haven’t been pushed there.  Equivalent
     to ‘git fetch --prune <name>’, except that no new references will
     be fetched.

     See the PRUNING section of git-fetch(1) for what it’ll prune
     depending on various configuration.

     With ‘--dry-run’ option, report what branches would be pruned, but
     do not actually prune them.

_update_
     Fetch updates for remotes or remote groups in the repository as
     defined by ‘remotes.<group>’.  If neither group nor remote is
     specified on the command line, the configuration parameter
     remotes.default will be used; if remotes.default is not defined,
     all remotes which do not have the configuration parameter
     ‘remote.<name>.skipDefaultUpdate’ set to true will be updated.
     (See git-config(1)).

     With ‘--prune’ option, run pruning against all the remotes that are
     updated.


DISCUSSION
**********

The remote configuration is achieved using the ‘remote.origin.url’ and
‘remote.origin.fetch’ configuration variables.  (See git-config(1)).


EXIT STATUS
***********

On success, the exit status is ‘0’.

   When subcommands such as _add_, _rename_, and _remove_ can’t find the
remote in question, the exit status is ‘2’.  When the remote already
exists, the exit status is ‘3’.

   On any other error, the exit status may be any other non-zero value.


EXAMPLES
********

   • Add a new remote, fetch, and check out a branch from it

          $ git remote
          origin
          $ git branch -r
            origin/HEAD -> origin/master
            origin/master
          $ git remote add staging git://git.kernel.org/.../gregkh/staging.git
          $ git remote
          origin
          staging
          $ git fetch staging
          ...
          From git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/staging
           * [new branch]      master     -> staging/master
           * [new branch]      staging-linus -> staging/staging-linus
           * [new branch]      staging-next -> staging/staging-next
          $ git branch -r
            origin/HEAD -> origin/master
            origin/master
            staging/master
            staging/staging-linus
            staging/staging-next
          $ git switch -c staging staging/master
          ...

   • Imitate _git clone_ but track only selected branches

          $ mkdir project.git
          $ cd project.git
          $ git init
          $ git remote add -f -t master -m master origin git://example.com/git.git/
          $ git merge origin


SEE ALSO
********

git-fetch(1) git-branch(1) git-config(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-repack,  Up: Top

Name
****

git-repack — リポジトリ内のアンパックオブジェクトをパックする


Synopsis
********

     git repack [-a] [-A] [-d] [-f] [-F] [-l] [-n] [-q] [-b] [–window=<n>] [–depth=<n>] [–threads=<n>] [–keep-pack=<pack-name>]


DESCRIPTION
***********

このコマンドは、現在パック内に存在しないすべてのオブジェクトを1つのパッ
クに結合するために使用されます。また、既存のパックを単一のより効率的なパ
ックに再編成するために使用することもできます。

   パックは、個別に圧縮され、デルタ圧縮が適用され、関連付けられたインデ
ックスファイルとともに単一のファイルに格納されたオブジェクトのコレクショ
ンです。

   パックは、ミラーシステム、バックアップエンジン、ディスクストレージな
どの負荷を軽減するために使用されます。


OPTIONS
*******

‘-a’
     パックされていないオブジェクトを段階的にパックする代わりに、参照さ
     れるすべてのものを1つのパックにパックします。プライベート開発に使用
     されるリポジトリをパックする場合に特に便利です。 ‘-d’ と一緒に使用
     します。 これにより、 ‘git prune’ が残したオブジェクトがクリーンア
     ップされますが、 ‘git fsck --full --dangling’ ではぶら下がりを表示
     します。

     馬鹿プロトコル(dumb protocol)を介してフェッチするユーザーは、含まれ
     ているオブジェクトを取得するために、そのパック内にすでにローカルに
     ある他のオブジェクトの数に関係なく、まったく新しいパックをフェッチ
     する必要があることに注意してください。

     promisorパックファイルは個別に再パックされます。 ‘.promisor’ ファイ
     ルに関連付けられているパックファイルがある場合、これらのパックファ
     イルは別の個別パックに再パックされ、新しい個別パックに対応する、空
     の ‘.promisor’ ファイルが書き込まれます。

‘-A’
     ‘-d’ を使用しない限り ‘-a’ と同じです。 それから、前のパックの到達
     不能なオブジェクトは、古いパックに残されるのではなく、looseになって
     、パックされていないオブジェクトになります。再パックする場合でも、
     到達不能なオブジェクトが意図的にパックに追加されることはありません
     。このオプションは、到達不能なオブジェクトが古いパックに残されて、
     古いパックごと削除されることによって、すぐに削除されてしまうのを防
     ぎます。代わりに、loose到達不能オブジェクトは、以下の 「git gc」呼
     び出しで通常の有効期限ルールに従って剪定されます。 git-gc(1) を参照
     してください。

‘-d’
     パック後、新しく作成されたパックによって既存のパックの一部が冗長に
     なる場合は、冗長パックを削除してください。 また、「git
     prune-packed」を実行して、冗長なルーズオブジェクトファイルを削除し
     ます。

‘-l’
     ‘--local’ オプションを _git pack-objects_ に渡します。
     git-pack-objects(1) を参照してください。

‘-f’
     ‘--no-reuse-delta’ オプションを ‘git-pack-objects’ に渡します。
     git-pack-objects(1) を参照してください。

‘-F’
     ‘--no-reuse-object’ オプションを ‘git-pack-objects’ に渡します。
     git-pack-objects(1) を参照してください。

‘-q’
     ‘-q‘オプションを _git pack-objects_ に渡します。
     git-pack-objects(1) を参照してください。

‘-n’
     _git update-server-info_ でサーバー情報を更新しないでください。この
     オプションは、HTTPまたはFTPを介してこのリポジトリ(またはその直接の
     コピー)を公開するために必要なローカルカタログファイルの更新をスキッ
     プします。 git-update-server-info(1) を参照してください。

‘--window=<n>’
‘--depth=<n>’
     これらの2つのオプションは、パックに含まれるオブジェクトがデルタ圧縮
     を使用して格納される方法に影響します。オブジェクトは最初にタイプ、
     サイズ、およびオプションで名前で内部的にソートされ、 ‘--window’ 内
     の他のオブジェクトと比較されて、デルタ圧縮を使用することでスペース
     が節約されるかどうかが確認されます。 ‘--depth’ は最大デルタ深度を制
     限します。深くしすぎると、必要なオブジェクトに到達するためにデルタ
     データを何度も適用する必要があるため、アンパッカー側(unpacker
     side)のパフォーマンスに影響します。

     ‘--window’ のデフォルト値は10で、 ‘--depth’ は50です。最大深度
     (maximum depth)は4095です。

‘--threads=<n>’
     このオプションは ‘git pack-objects’ に渡されます。

‘--window-memory=<n>’
     このオプションは、 ‘--window’ に加えて追加の制限を提供します。ウィ
     ンドウサイズは、メモリ内で _<n>_ バイトを超えないように動的に縮小さ
     れます。これは、大きなウィンドウと小さなオブジェクトが混在するリポ
     ジトリで、大きなウィンドウでメモリが不足しないようにするのに役立ち
     ますが、小さなオブジェクトは大きなウィンドウを利用できます。 サイズ
     には、「k」または「m」または「g」の接尾辞を付けることができます。
     ‘--window-memory=0’ は、メモリ使用量を無制限にします。 デフォルトは
     、 ‘pack.windowMemory’ 構成変数から取得されます。 実際のメモリ使用
     量は、制限に git-pack-objects(1) で使用されるスレッド数を掛けたもの
     になることに注意してください。

‘--max-pack-size=<n>’
     各出力パックファイルの最大サイズ。 サイズには、「k」または「m」また
     は「g」の接尾辞を付けることができます。許可される最小サイズは1MiBに
     制限されています。 指定した場合、複数のパックファイルが作成される可
     能性があります。これにより、ビットマップインデックスの作成も妨げら
     れます。構成変数 ‘pack.packSizeLimit’ が設定されていない限り、デフ
     ォルトは無制限です。このオプションを使用すると、リポジトリが大きく
     なり、速度が低下する可能性があることに注意してください。
     ‘pack.packSizeLimit’ の説明を参照してください。

‘-b’
‘--write-bitmap-index’
     再パックの一部として到達可能性ビットマップインデックスを書き込みま
     す。ビットマップは到達可能なすべてのオブジェクトを参照できる必要が
     あるため、これは ‘-a’ または ‘-A’ とともに使用する場合にのみ意味が
     あります。このオプションは、 ‘repack.writeBitmaps’ の設定を上書きし
     ます。複数のパックファイルが作成されている場合、このオプションは効
     果がありません。

‘--pack-kept-objects’
     再パックするときは ‘.keep’ ファイルにオブジェクトを含めます。
     ‘pack-objects’ が終了した後も ‘.keep’ パックを削除しないことに注意
     してください。これは、オブジェクトを複製する可能性があることを意味
     しますが、これにより、プッシュまたはフェッチが同時に発生する場合に
     オプションを安全に使用できます。このオプションを指定すると、ビット
     マップ化されたパックファイルに必要なオブジェクトが確実に含まれるた
     め、通常、 ‘-b’ または ‘repack.writeBitmaps’ を使用してビットマップ
     を書き込む場合にのみ役立ちます。

‘--keep-pack=<pack-name>’
     指定されたパックを再パックから除外します。 これは、パックに ‘.keep’
     ファイルがあるのと同じです。 ‘<pack-name>’ は、先頭にディレクトリが
     ないパックファイル名です(例: ‘pack-123.pack’)。このオプションは、複
     数のパックを保持するために複数回指定できます。

‘--unpack-unreachable=<when>’
     到達不能なオブジェクトのパックをほどく(loose)ときは、 ‘<when>’ より
     古いオブジェクトをわざわざほどきません。これは、フォローアップで行
     う ‘git prune’ によってすぐに剪定されるオブジェクトの書き込みを最適
     化するために使用できます。

‘-k’
‘--keep-unreachable’
     ‘-ad’ と一緒に使用すると、既存のパックから到達できないオブジェクト
     は、削除されるのではなく、パックファイルの最後に追加されます。さら
     に、到達不能なlooseオブジェクトはパックされます(そしてそれらの
     looseオブジェクトは削除されます)。

‘-i’
‘--delta-islands’
     ‘--delta-islands’ オプションを ‘git-pack-objects’ に渡します。
     git-pack-objects(1) を参照してください。

‘-g=<factor>’
‘--geometric=<factor>’
     結果のパック構造を、連続する各パックに、次に大きいパックのオブジェ
     クト数の少なくとも ‘<factor>’ 倍が含まれるように配置します。

     ‘git repack’ が、等比数列を確実にするために1つに再パックする必要が
     あるパックファイルの「切り分け」を決断することによってこれを保証し
     ます。 大きいパックファイルの多く(そのパックに含まれるオブジェクト
     の数による)がそのまま残るように、パックファイルの最小セットを選択し
     ます。

     他の再パックモードとは異なり、梱包するオブジェクトのセットは、「ロ
     ールアップ」(rolled-up)されるパックのセットによって一意に決定されま
     す。言い換えれば、等比数列を復元するために組み合わせる必要があると
     判断されたパックです。

     ‘--unpacked’ が指定されている場合、ルーズオブジェクトは、到達可能性
     に関係なく、この「ロールアップ」に暗黙的に含まれます。 これは将来変
     更される可能性があります。このオプション(大幅に異なる再パックモード
     を意味する)は、 ‘git repack’ の他のすべてのオプションの組み合わせで
     機能することが保証されていません。


CONFIGURATION
*************

さまざまな構成変数がパッキングに影響します。 git-config(1) を参照してく
ださい(「pack」と「delta」を検索してください)。

   デフォルトでは、コマンドは ‘--delta-base-offset’ オプションを
_gitpack-objects_ に渡します。これにより、通常、パックはわずかに小さくな
りますが、生成されたパックは、バージョン1.4.4より古いバージョンのGitと互
換性がありません。直接またはダムhttpプロトコルを介して、このような古いバ
ージョンのGitとリポジトリを共有する必要がある場合は、構成変数
‘repack.UseDeltaBaseOffset’ を ‘false’ に設定して再パックする必要があり
ます。この場合、必要に応じて変換がオンザフライで実行されるため、ネイティ
ブプロトコルを介した古いGitバージョンからのアクセスではこのオプションの
影響を受けません。

   デルタ圧縮は、 ‘core.bigFileThreshold’ 構成変数より大きいオブジェクト
、および属性 ‘delta’ がfalseに設定されているファイルでは使用されません。


SEE ALSO
********

git-pack-objects(1) git-prune-packed(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-replace,  Up: Top

Name
****

git-replace — オブジェクトを置き換えるためのrefsの作成、一覧表示、削除


Synopsis
********

     git replace [-f] <object> <replacement>
     git replace [-f] –edit <object>
     git replace [-f] –graft <commit> [<parent>…]
     git replace [-f] –convert-graft-file
     git replace -d <object>…
     git replace [–format=<format>] [-l [<pattern>]]


DESCRIPTION
***********

‘refs/replace/’ 名前空間に _replace_ 参照を追加します。

   _replace_ 参照の名前は、置き換えられるオブジェクトのSHA-1です。
_replace_ 参照の内容は、置き換えるオブジェクトのSHA-1です。

   置き換えられるオブジェクトと置き換えるオブジェクトは同じタイプである
必要があります。 この制限は、 ‘-f’ を使用して迂回(bypass)できます。

   ‘-f’ が指定されていない限り、 _replace_ 参照はまだ存在していてはなり
ません。

   置換されるオブジェクトと置換するオブジェクトに他の制限はありません。
マージコミットは非マージコミットに置き換えることができ、その逆も可能です
。

   置換する参照は、デフォルトでは、到達可能性トラバーサル(剪定(prune)と
パックと転送とfsck)実行するコマンドを除くすべてのGitコマンドで使用されま
す。

   _git_ の直後に ‘--no-replace-objects’ オプションを使用すると、任意の
コマンドでの置換参照の使用を無効にすることができます。

   たとえば、 コミット _foo_ がコミット _bar_ に置き換えられた場合:

     $ git --no-replace-objects cat-file commit foo

   上記は、コミット _foo_ に関する情報を表示します。

     $ git cat-file commit foo

   これはコミット _bar_ に関する情報を表示します。

   ‘GIT_NO_REPLACE_OBJECTS’ 環境変数は、 ‘--no-replace-objects’ オプショ
ンと同じ効果を達成するように設定できます。


OPTIONS
*******

‘-f’
‘--force’
     同じオブジェクトの既存の置換refが存在する場合、(失敗するのではなく
     )上書きされます。

‘-d’
‘--delete’
     指定されたオブジェクトの既存の置換refsを削除します。

‘--edit <object>’
     オブジェクトのコンテンツを対話的に編集します。 <object> の既存のコ
     ンテンツは一時ファイルにきれいに表示(pretty-printed)され、そのファ
     イルでエディタが起動され、エディタの編集結果がパースされて <object>
     と同じタイプの新しいオブジェクトが作成されます。続いて、置換refが作
     成され、 <object> が新しく作成されたオブジェクトに置き換えられます
     。エディタの選択方法の詳細については git-var(1) を参照してください
     。

‘--raw’
     編集するときにきれいに出力されたものではなく、生のオブジェクトの内
     容を提供します。現在、これはツリーにのみ影響し、バイナリ形式で表示
     されます。これは扱いが難しいですが、きれいに出力できないほど破損し
     ているツリーを修復するときに役立ちます。バイナリデータをきれいに読
     み書きできるようにエディタを設定する必要がある場合があることに注意
     してください。

‘--graft <commit> [<parent>...]’
     graftコミットを作成します。 <commit> と同じ内容で新しいコミットが作
     成されますが、その親は <commit> の親ではなく [<parent>…] になります
     。続けて、置換refが作成され、 <commit> が新しく作成されたコミットに
     置き換えられます。 ‘--convert-graft-file’ を使用して
     ‘$GIT_DIR/info/grafts’ ファイルを変換し、代わりに置換refsを使用しま
     す。

‘--convert-graft-file’
     ‘$GIT_DIR/info/grafts’ のすべてのエントリに対してgraftコミットを作
     成し、成功するとそのファイルを削除します。目的は、現在非推奨の
     graftファイルからの移行の為にユーザーを支援することです。

‘-l <pattern>’
‘--list <pattern>’
     指定されたパターンに一致する(またはパターンが指定されていない場合は
     すべての)オブジェクトの置換refをリストします。引数なしで「git
     replace」と入力すると、すべての置換refが一覧表示されます。

‘--format=<format>’
     リストするときに、指定の <format> を使用します。これには、「short」
     および「medium」および「long」のいずれかになります。 省略した場合、
     フォーマットはデフォルトで「short」になります。


FORMATS
*******

以下の形式を使用できます:

   • _short_: <置換された sha1>

   • _medium_: <置換された sha1> → <置換する sha1>

   • _long_: <置換された sha1> (<置換された sha1 のタイプ>) → <置換する
     sha1> (<置換する sha1 のタイプ>)


CREATING REPLACEMENT OBJECTS
****************************

git-hash-object(1) と git-rebase(1) と git-filter-repo
(https://github.com/newren/git-filter-repo) は、他のgitコマンドの中でも
特に 既存のオブジェクトから置換オブジェクトを作成するために使用されます
。 ‘--edit’ オプションを _git replace_ と一緒に使用して、既存のオブジェ
クトを編集することで置換オブジェクトを作成することもできます。

   コミットの文字列の一部である多くの、ブロブまたはツリーまたはコミット
を置き換える場合は、コミットの置換文字列を作成してから、コミットのターゲ
ット文字列の先端にあるコミットのみを、コミットの置換文字列の先端にあるコ
ミットに置き換えることができます。


BUGS
****

置き換えられたブロブまたはツリーをそれらを置き換えるものと比較すると、正
しく機能しません。 また、 ‘git reset --hard’ を使用して置換されたコミッ
トに戻ると、ブランチは置換されたコミットではなく置換されたコミットに移動
します。

   保留中のオブジェクトに関連する「git rev-list」を使用すると、他の問題
が発生する可能性があります。


SEE ALSO
********

git-hash-object(1) git-rebase(1) git-tag(1) git-branch(1) git-commit(1)
git-var(1) git(1) git-filter-repo
(https://github.com/newren/git-filter-repo)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-request-pull,  Up: Top

Name
****

git-request-pull — 保留中の変更の概要を生成します


Synopsis
********

     git request-pull [-p] <start> <url> [<end>]


DESCRIPTION
***********

アップストリームプロジェクトに変更をツリーにプルするように要求するリクエ
ストを生成します。標準出力に出力される要求は、ブランチの説明で始まり、変
更を要約し、どこからプルできるかを示します。

   アップストリームプロジェクトには ‘<start>’ という名前のコミットがある
と予想され、出力では、そのコミット以降に行った変更を ‘<url>`という名前の
リポジトリの、’<end>‘ という名前のコミットまで統合するように求められます
。


OPTIONS
*******

‘-p’
     出力にパッチテキストを含めます。

<start>
     開始コミット。これは、すでにアップストリーム履歴に存在するコミット
     を指定します。

<url>
     プル元のリポジトリURL。

<end>
     終了コミット(省略時デフォルトはHEAD)。プルを要求している履歴の先端
     にあるコミットを指定します。

     ‘<url>’ で指定されたリポジトリの、ローカルにあるrefとは異なるrefの
     先端にコミットがある場合、「ローカル名 コロン(:) リモート名」である
     、 ‘<local>:<remote>’ 構文を使用することができます。


EXAMPLES
********

‘v1.0’ リリースの上にある ‘master’ ブランチで作業を構築し、それをプロジ
ェクトに統合したいとします。 まず、他の人が見ることができるように、その
変更をパブリックリポジトリにプッシュします:

     git push https://git.ko.xz/project master

   それから、あなたは以下のコマンドを実行します:

     git request-pull v1.0 https://git.ko.xz/project master

   これにより、アップストリームへのリクエストが生成され、 ‘v1.0’ リリー
スと ‘master’ の間の変更が要約されて、パブリックリポジトリからプルされま
す。

   ローカルにあるブランチとは名前が異なるブランチに変更をプッシュする場
合、例えば、

     git push https://git.ko.xz/project master:for-linus

   それからあなたはそれをプルするように頼むことができます

     git request-pull v1.0 https://git.ko.xz/project master:for-linus


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-rerere,  Up: Top

Name
****

git-rerere — 競合するマージの記録された競合解決決定を再利用する


Synopsis
********

     git rerere [clear|forget <pathspec>|diff|remaining|status|gc]


DESCRIPTION
***********

比較的長期間存続するトピックブランチを使用するワークフローでは、開発者は
、トピックブランチが完了するまで(「リリース」ブランチにマージされるか、
アップストリームに送信されて受け入れられるまで)、同じ競合を何度も解決す
る必要がある場合があります。

   このコマンドは、最初の手動マージにて、自動マージ結果の競合とそれに対
応した手動解決結果を記録しておいて、以後の自動マージ結果の競合に、その記
録した手動競合解決決定を適用することにより、この処理において開発者を支援
します。

     *Note*

     あなたがこのコマンドを有効にするには、構成変数 ‘rerere.enabled’ を
     設定する必要があります。


COMMANDS
********

通常、「git rerere」は、引数やユーザーの介入なしで実行されます。 ただし
、動作状態との対話を可能にするいくつかのコマンドがあります。

_clear_
     マージ競合解決決定を中止する場合は、rerereが使用するメタデータをリ
     セットします。 ‘git am [--skip|--abort]’ または ‘git rebase
     [--skip|--abort]’ を呼び出すと、このコマンドが自動的に呼び出されま
     す。

_forget_ <pathspec>
     <pathspec> の現在の競合について rerere が記録した競合解決決定をリセ
     ットします。

_diff_
     競合解決決定の現在の状態の差分を表示します。これは、ユーザーが競合
     を解決している間に何が変更されたかを追跡するのに役立ちます。追加の
     引数は、PATHにインストールされているシステムの「diff」コマンドに直
     接渡されます。

_status_
     マージ競合解決決定がrerereで記録される競合のあるパスをプリントする
     。

_remaining_
     rerereによって自動解決されていない競合のあるパスをプリントする。こ
     れには、競合するサブモジュールなど、rerereで競合解決決定を追跡でき
     ないパスが含まれます。

_gc_
     ずっと前に発生した競合するマージのレコードを剪定(prune)します。デフ
     ォルトでは、15日より古い未解決の競合と、60日より古い解決済みの競合
     は剪定されます。これらのデフォルトは、それぞれ
     ‘gc.rerereUnresolved’ および ‘gc.rerereResolved’ 構成変数を介して制
     御されます。


DISCUSSION
**********

トピックブランチが分岐してからマスターブランチ(またはアップストリーム)が
触れた重複領域をトピックブランチが変更する場合、トピックブランチをアップ
ストリームにプッシュする準備ができる前であっても、最新のマスターでテスト
することをお勧めします:

                   o---*---o topic
                  /
         o---o---o---*---o---o master

   このようなテストでは、マスターとトピックを何らかの方法でマージする必
要があります。これを行う1つの方法は、マスターをトピックブランチにプルす
ることです:

             $ git switch topic
             $ git merge master

                   o---*---o---+ topic
                  /           /
         o---o---o---*---o---o master

   ‘*’ でマークされたコミットは、同じファイルの同じ領域にアクセスします
。 ‘+’ でマークされたコミットを作成するときに競合を解決する必要がありま
す。次に、結果をテストして、進行中の作業が最新のマスターにあるもので引き
続き機能することを確認できます。

   このテストマージの後、トピックの作業を続行するには2つの方法があります
。最も簡単なのは、テストマージコミット ‘+’ の上に構築することです。トピ
ックブランチでの作業の準備ができたら、トピックブランチをマスターにプルす
るか、アップストリームにプルするように依頼します。ただし、その時点で、テ
ストマージ ‘+’ 以降、マスターまたはアップストリームが進んでいる可能性が
あります。その場合、最終的なコミットグラフは以下のようになります:

             $ git switch topic
             $ git merge master
             $ ... work on both topic and master branches
             $ git switch master
             $ git merge topic

                   o---*---o---+---o---o topic
                  /           /         \
         o---o---o---*---o---o---o---o---+ master

   けれども、トピックブランチの存続期間が長い場合、トピックブランチには
そのような「マスターからのマージ」コミットが多数含まれることになり、開発
履歴が不必要に乱雑になります。Linuxカーネルメーリングリストの読者は、サ
ブシステムのメンテナが「役に立たないマージ」でいっぱいのブランチからプル
するように要求したときに、Linusがテストマージの頻度が高すぎると不平を言
ったことを覚えているかもしれません。

   別の方法として、トピックブランチでテストマージをクリーンに保つために
、テストマージを吹き飛ばし、テストマージの前に、先端の先に構築し続けるこ
とができます:

             $ git switch topic
             $ git merge master
             $ git reset --hard HEAD^ ;# rewind the test merge
             $ ... work on both topic and master branches
             $ git switch master
             $ git merge topic

                   o---*---o-------o---o topic
                  /                     \
         o---o---o---*---o---o---o---o---+ master

   これにより、トピックブランチの準備が整い、マスターブランチにマージさ
れたときに、マージコミットが1つだけ残ります。 このマージでは、 ‘*’ でマ
ークされたコミットによって導入された競合を解決する必要があります。ただし
、この競合は、多くの場合、吹き飛ばしたテストマージを作成したときに解決し
た競合と同じです。 _git rerere_ は、以前の手動解決からの情報を使用して、
この最後の競合するマージを解決するのに役立ちます。

   競合する自動マージの直後に「git rerere」コマンドを実行すると、それら
の中の、通常の競合マーカー ‘<<<<<<<’ と ‘=======’ と ‘>>>>>>>’ を使用し
て、競合する作業ツリーファイルが記録されます。後で、競合の解決が完了した
後、「git rerere」を再度実行すると、これらのファイルの解決された状態が記
録されます。 masterのトピックブランチへのテストマージを作成したときにこ
れを行ったとします。

   次回、同じ競合する自動マージを確認した後、「git rerere」を実行すると
、以前の競合する自動マージ、以前の手動解決、および現在の競合する自動マー
ジの間で3方向のマージが実行されます。この3方向マージが正常に解決される場
合、結果は作業ツリーファイルに書き出されるため、手動で解決する必要はあり
ません。注意: _git rerere_ はインデックスファイルをそのままにしておくの
で、結果に満足のいく場合は、 ‘git diff’ (または ‘git diff -c’)を使用して
最終的な健全性チェックを行い、そして、 _git add_ する必要があることに注
意してください。

   より便利な方法として、「git merge」は、失敗した自動マージで終了すると
自動的に「git rerere」を呼び出し、「git rerere」は、新しい競合の場合は手
動解決を記録し、そうでない場合は以前の手動解決を再利用します。「git
commit」は、マージ結果をコミットするときに「git rerere」も呼び出します。
これが意味することは、（rerere.enabled構成変数を有効にする以外に）自分で
特別なことをする必要がないということです。

   この例では、テストマージを実行すると、手動の競合解決決定が記録され、
記録された競合解決決定が引き続き適用可能である限り、後で更新されたマスタ
ーブランチとトピックブランチを使用して実際のマージを実行するときに再利用
されます。

   「git rerere」レコードの情報は、「git rebase」を実行するときにも使用
されます。 テストマージを吹き飛ばし、トピックブランチで開発を続けた後:

                   o---*---o-------o---o topic
                  /
         o---o---o---*---o---o---o---o   master

             $ git rebase master topic

                                       o---*---o-------o---o topic
                                      /
         o---o---o---*---o---o---o---o   master

   ‘git rebase master topic’ を実行して、トピックをアップストリームに送
信する準備ができる前に最新の状態にすることができます。これにより、3方向
マージにフォールバックし、前に解決したテストマージと同じように競合します
。 「git rerere」は「git rebase」によって実行され、この競合を解決するの
に役立ちます。

   [注] _git rerere_ は、ファイル内の競合マーカーに依存して競合を検出し
ます。ファイルに競合マーカーのある行と同じように見える行がすでに含まれて
いる場合、「git rerere」は競合解決の記録に失敗する可能性があります。これ
を回避するには、 gitattributes(5) の ‘conflict-marker-size’ 設定を使用で
きます。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-reset,  Up: Top

Name
****

git-reset — Reset current HEAD to the specified state


Synopsis
********

     git reset [-q] [<tree-ish>] [–] <pathspec>…
     git reset [-q] [–pathspec-from-file=<file> [–pathspec-file-nul]] [<tree-ish>]
     git reset (–patch | -p) [<tree-ish>] [–] [<pathspec>…]
     git reset [–soft | –mixed [-N] | –hard | –merge | –keep] [-q] [<commit>]


DESCRIPTION
***********

In the first three forms, copy entries from ‘<tree-ish>’ to the index.
In the last form, set the current branch head (‘HEAD’) to ‘<commit>’,
optionally modifying index and working tree to match.  The
‘<tree-ish>’/‘<commit>’ defaults to ‘HEAD’ in all forms.

_git reset_ [-q] [<tree-ish>] [–] <pathspec>…
_git reset_ [-q] [–pathspec-from-file=<file> [–pathspec-file-nul]] [<tree-ish>]
     These forms reset the index entries for all paths that match the
     ‘<pathspec>’ to their state at ‘<tree-ish>’.  (It does not affect
     the working tree or the current branch.)

     This means that ‘git reset <pathspec>’ is the opposite of ‘git add
     <pathspec>’.  This command is equivalent to ‘git restore
     [--source=<tree-ish>] --staged <pathspec>...’.

     After running ‘git reset <pathspec>’ to update the index entry, you
     can use git-restore(1) to check the contents out of the index to
     the working tree.  Alternatively, using git-restore(1) and
     specifying a commit with ‘--source’, you can copy the contents of a
     path out of a commit to the index and to the working tree in one
     go.

_git reset_ (–patch | -p) [<tree-ish>] [–] [<pathspec>…]
     Interactively select hunks in the difference between the index and
     ‘<tree-ish>’ (defaults to ‘HEAD’).  The chosen hunks are applied in
     reverse to the index.

     This means that ‘git reset -p’ is the opposite of ‘git add -p’,
     i.e.  you can use it to selectively reset hunks.  See the
     “Interactive Mode” section of git-add(1) to learn how to operate
     the ‘--patch’ mode.

_git reset_ [<mode>] [<commit>]
     This form resets the current branch head to ‘<commit>’ and possibly
     updates the index (resetting it to the tree of ‘<commit>’) and the
     working tree depending on ‘<mode>’.  If ‘<mode>’ is omitted,
     defaults to ‘--mixed’.  The ‘<mode>’ must be one of the following:

     ‘--soft’
          Does not touch the index file or the working tree at all (but
          resets the head to ‘<commit>’, just like all modes do).  This
          leaves all your changed files "Changes to be committed", as
          ‘git status’ would put it.

     ‘--mixed’
          Resets the index but not the working tree (i.e., the changed
          files are preserved but not marked for commit) and reports
          what has not been updated.  This is the default action.

          If ‘-N’ is specified, removed paths are marked as
          intent-to-add (see git-add(1)).

     ‘--hard’
          Resets the index and working tree.  Any changes to tracked
          files in the working tree since ‘<commit>’ are discarded.

     ‘--merge’
          Resets the index and updates the files in the working tree
          that are different between ‘<commit>’ and ‘HEAD’, but keeps
          those which are different between the index and working tree
          (i.e.  which have changes which have not been added).  If a
          file that is different between ‘<commit>’ and the index has
          unstaged changes, reset is aborted.

          In other words, ‘--merge’ does something like a ‘git read-tree
          -u -m <commit>’, but carries forward unmerged index entries.

     ‘--keep’
          Resets index entries and updates files in the working tree
          that are different between ‘<commit>’ and ‘HEAD’.  If a file
          that is different between ‘<commit>’ and ‘HEAD’ has local
          changes, reset is aborted.

     ‘--[no-]recurse-submodules’
          When the working tree is updated, using –recurse-submodules
          will also recursively reset the working tree of all active
          submodules according to the commit recorded in the
          superproject, also setting the submodules’ HEAD to be detached
          at that commit.

   See "Reset, restore and revert" in git(1) for the differences between
the three commands.


OPTIONS
*******

‘-q’
‘--quiet’
‘--no-quiet’
     Be quiet, only report errors.  The default behavior is set by the
     ‘reset.quiet’ config option.  ‘--quiet’ and ‘--no-quiet’ will
     override the default behavior.

‘--pathspec-from-file=<file>’
     Pathspec is passed in ‘<file>’ instead of commandline args.  If
     ‘<file>’ is exactly ‘-’ then standard input is used.  Pathspec
     elements are separated by LF or CR/LF. Pathspec elements can be
     quoted as explained for the configuration variable ‘core.quotePath’
     (see git-config(1)).  See also ‘--pathspec-file-nul’ and global
     ‘--literal-pathspecs’.

‘--pathspec-file-nul’
     Only meaningful with ‘--pathspec-from-file’.  Pathspec elements are
     separated with NUL character and all other characters are taken
     literally (including newlines and quotes).

–
     Do not interpret any more arguments as options.

<pathspec>…
     Limits the paths affected by the operation.

     For more details, see the _pathspec_ entry in gitglossary(7).


EXAMPLES
********

Undo add
          $ edit                                     (1)
          $ git add frotz.c filfre.c
          $ mailx                                    (2)
          $ git reset                                (3)
          $ git pull git://info.example.com/ nitfol  (4)

     *note (1): CO1-1.
          You are happily working on something, and find the changes in
          these files are in good order.  You do not want to see them
          when you run ‘git diff’, because you plan to work on other
          files and changes with these files are distracting.

     *note (2): CO1-2.
          Somebody asks you to pull, and the changes sound worthy of
          merging.

     *note (3): CO1-3.
          However, you already dirtied the index (i.e.  your index does
          not match the ‘HEAD’ commit).  But you know the pull you are
          going to make does not affect ‘frotz.c’ or ‘filfre.c’, so you
          revert the index changes for these two files.  Your changes in
          working tree remain there.

     *note (4): CO1-4.
          Then you can pull and merge, leaving ‘frotz.c’ and ‘filfre.c’
          changes still in the working tree.

Undo a commit and redo
          $ git commit ...
          $ git reset --soft HEAD^      (1)
          $ edit                        (2)
          $ git commit -a -c ORIG_HEAD  (3)

     *note (1): CO2-1.
          This is most often done when you remembered what you just
          committed is incomplete, or you misspelled your commit
          message, or both.  Leaves working tree as it was before
          "reset".

     *note (2): CO2-2.
          Make corrections to working tree files.

     *note (3): CO2-3.
          "reset" copies the old head to ‘.git/ORIG_HEAD’; redo the
          commit by starting with its log message.  If you do not need
          to edit the message further, you can give ‘-C’ option instead.

          See also the ‘--amend’ option to git-commit(1).

Undo a commit, making it a topic branch
          $ git branch topic/wip          (1)
          $ git reset --hard HEAD~3       (2)
          $ git switch topic/wip          (3)

     *note (1): CO3-1.
          You have made some commits, but realize they were premature to
          be in the ‘master’ branch.  You want to continue polishing
          them in a topic branch, so create ‘topic/wip’ branch off of
          the current ‘HEAD’.

     *note (2): CO3-2.
          Rewind the master branch to get rid of those three commits.

     *note (3): CO3-3.
          Switch to ‘topic/wip’ branch and keep working.

Undo commits permanently
          $ git commit ...
          $ git reset --hard HEAD~3   (1)

     *note (1): CO4-1.
          The last three commits (‘HEAD’, ‘HEAD^’, and ‘HEAD~2’) were
          bad and you do not want to ever see them again.  Do *not* do
          this if you have already given these commits to somebody else.
          (See the "RECOVERING FROM UPSTREAM REBASE" section in
          git-rebase(1) for the implications of doing so.)

Undo a merge or pull
          $ git pull                         (1)
          Auto-merging nitfol
          CONFLICT (content): Merge conflict in nitfol
          Automatic merge failed; fix conflicts and then commit the result.
          $ git reset --hard                 (2)
          $ git pull . topic/branch          (3)
          Updating from 41223... to 13134...
          Fast-forward
          $ git reset --hard ORIG_HEAD       (4)

     *note (1): CO5-1.
          Try to update from the upstream resulted in a lot of
          conflicts; you were not ready to spend a lot of time merging
          right now, so you decide to do that later.

     *note (2): CO5-2.
          "pull" has not made merge commit, so ‘git reset --hard’ which
          is a synonym for ‘git reset --hard HEAD’ clears the mess from
          the index file and the working tree.

     *note (3): CO5-3.
          Merge a topic branch into the current branch, which resulted
          in a fast-forward.

     *note (4): CO5-4.
          But you decided that the topic branch is not ready for public
          consumption yet.  "pull" or "merge" always leaves the original
          tip of the current branch in ‘ORIG_HEAD’, so resetting hard to
          it brings your index file and the working tree back to that
          state, and resets the tip of the branch to that commit.

Undo a merge or pull inside a dirty working tree
          $ git pull                         (1)
          Auto-merging nitfol
          Merge made by recursive.
           nitfol                |   20 +++++----
           ...
          $ git reset --merge ORIG_HEAD      (2)

     *note (1): CO6-1.
          Even if you may have local modifications in your working tree,
          you can safely say ‘git pull’ when you know that the change in
          the other branch does not overlap with them.

     *note (2): CO6-2.
          After inspecting the result of the merge, you may find that
          the change in the other branch is unsatisfactory.  Running
          ‘git reset --hard ORIG_HEAD’ will let you go back to where you
          were, but it will discard your local changes, which you do not
          want.  ‘git reset --merge’ keeps your local changes.

Interrupted workflow
     Suppose you are interrupted by an urgent fix request while you are
     in the middle of a large change.  The files in your working tree
     are not in any shape to be committed yet, but you need to get to
     the other branch for a quick bugfix.

          $ git switch feature  ;# you were working in "feature" branch and
          $ work work work      ;# got interrupted
          $ git commit -a -m "snapshot WIP"                 (1)
          $ git switch master
          $ fix fix fix
          $ git commit ;# commit with real log
          $ git switch feature
          $ git reset --soft HEAD^ ;# go back to WIP state  (2)
          $ git reset                                       (3)

     *note (1): CO7-1.
          This commit will get blown away so a throw-away log message is
          OK.

     *note (2): CO7-2.
          This removes the _WIP_ commit from the commit history, and
          sets your working tree to the state just before you made that
          snapshot.

     *note (3): CO7-3.
          At this point the index file still has all the WIP changes you
          committed as _snapshot WIP_. This updates the index to show
          your WIP files as uncommitted.

          See also git-stash(1).

Reset a single file in the index
     Suppose you have added a file to your index, but later decide you
     do not want to add it to your commit.  You can remove the file from
     the index while keeping your changes with git reset.

          $ git reset -- frotz.c                      (1)
          $ git commit -m "Commit files in index"     (2)
          $ git add frotz.c                           (3)

     *note (1): CO8-1.
          This removes the file from the index while keeping it in the
          working directory.

     *note (2): CO8-2.
          This commits all other changes in the index.

     *note (3): CO8-3.
          Adds the file to the index again.

Keep changes in working tree while discarding some previous commits
     Suppose you are working on something and you commit it, and then
     you continue working a bit more, but now you think that what you
     have in your working tree should be in another branch that has
     nothing to do with what you committed previously.  You can start a
     new branch and reset it while keeping the changes in your working
     tree.

          $ git tag start
          $ git switch -c branch1
          $ edit
          $ git commit ...                            (1)
          $ edit
          $ git switch -c branch2                     (2)
          $ git reset --keep start                    (3)

     *note (1): CO9-1.
          This commits your first edits in ‘branch1’.

     *note (2): CO9-2.
          In the ideal world, you could have realized that the earlier
          commit did not belong to the new topic when you created and
          switched to ‘branch2’ (i.e.  ‘git switch -c branch2 start’),
          but nobody is perfect.

     *note (3): CO9-3.
          But you can use ‘reset --keep’ to remove the unwanted commit
          after you switched to ‘branch2’.

Split a commit apart into a sequence of commits
     Suppose that you have created lots of logically separate changes
     and committed them together.  Then, later you decide that it might
     be better to have each logical chunk associated with its own
     commit.  You can use git reset to rewind history without changing
     the contents of your local files, and then successively use ‘git
     add -p’ to interactively select which hunks to include into each
     commit, using ‘git commit -c’ to pre-populate the commit message.

          $ git reset -N HEAD^                        (1)
          $ git add -p                                (2)
          $ git diff --cached                         (3)
          $ git commit -c HEAD@{1}                    (4)
          ...                                         (5)
          $ git add ...                               (6)
          $ git diff --cached                         (7)
          $ git commit ...                            (8)

     *note (1): CO10-1.
          First, reset the history back one commit so that we remove the
          original commit, but leave the working tree with all the
          changes.  The -N ensures that any new files added with ‘HEAD’
          are still marked so that ‘git add -p’ will find them.

     *note (2): CO10-2.
          Next, we interactively select diff hunks to add using the ‘git
          add -p’ facility.  This will ask you about each diff hunk in
          sequence and you can use simple commands such as "yes, include
          this", "No don’t include this" or even the very powerful
          "edit" facility.

     *note (3): CO10-3.
          Once satisfied with the hunks you want to include, you should
          verify what has been prepared for the first commit by using
          ‘git diff --cached’.  This shows all the changes that have
          been moved into the index and are about to be committed.

     *note (4): CO10-4.
          Next, commit the changes stored in the index.  The ‘-c’ option
          specifies to pre-populate the commit message from the original
          message that you started with in the first commit.  This is
          helpful to avoid retyping it.  The ‘HEAD@{1}’ is a special
          notation for the commit that ‘HEAD’ used to be at prior to the
          original reset commit (1 change ago).  See git-reflog(1) for
          more details.  You may also use any other valid commit
          reference.

     *note (5): CO10-5.
          You can repeat steps 2-4 multiple times to break the original
          code into any number of commits.

     *note (6): CO10-6.
          Now you’ve split out many of the changes into their own
          commits, and might no longer use the patch mode of ‘git add’,
          in order to select all remaining uncommitted changes.

     *note (7): CO10-7.
          Once again, check to verify that you’ve included what you want
          to.  You may also wish to verify that git diff doesn’t show
          any remaining changes to be committed later.

     *note (8): CO10-8.
          And finally create the final commit.


DISCUSSION
**********

The tables below show what happens when running:

     git reset --option target

   to reset the ‘HEAD’ to another commit (‘target’) with the different
reset options depending on the state of the files.

   In these tables, ‘A’, ‘B’, ‘C’ and ‘D’ are some different states of a
file.  For example, the first line of the first table means that if a
file is in state ‘A’ in the working tree, in state ‘B’ in the index, in
state ‘C’ in ‘HEAD’ and in state ‘D’ in the target, then ‘git reset
--soft target’ will leave the file in the working tree in state ‘A’ and
in the index in state ‘B’.  It resets (i.e.  moves) the ‘HEAD’ (i.e.
the tip of the current branch, if you are on one) to ‘target’ (which has
the file in state ‘D’).

     working index HEAD target         working index HEAD
     ----------------------------------------------------
      A       B     C    D     --soft   A       B     D
                               --mixed  A       D     D
                               --hard   D       D     D
                               --merge (disallowed)
                               --keep  (disallowed)

     working index HEAD target         working index HEAD
     ----------------------------------------------------
      A       B     C    C     --soft   A       B     C
                               --mixed  A       C     C
                               --hard   C       C     C
                               --merge (disallowed)
                               --keep   A       C     C

     working index HEAD target         working index HEAD
     ----------------------------------------------------
      B       B     C    D     --soft   B       B     D
                               --mixed  B       D     D
                               --hard   D       D     D
                               --merge  D       D     D
                               --keep  (disallowed)

     working index HEAD target         working index HEAD
     ----------------------------------------------------
      B       B     C    C     --soft   B       B     C
                               --mixed  B       C     C
                               --hard   C       C     C
                               --merge  C       C     C
                               --keep   B       C     C

     working index HEAD target         working index HEAD
     ----------------------------------------------------
      B       C     C    D     --soft   B       C     D
                               --mixed  B       D     D
                               --hard   D       D     D
                               --merge (disallowed)
                               --keep  (disallowed)

     working index HEAD target         working index HEAD
     ----------------------------------------------------
      B       C     C    C     --soft   B       C     C
                               --mixed  B       C     C
                               --hard   C       C     C
                               --merge  B       C     C
                               --keep   B       C     C

   ‘reset --merge’ is meant to be used when resetting out of a
conflicted merge.  Any mergy operation guarantees that the working tree
file that is involved in the merge does not have a local change with
respect to the index before it starts, and that it writes the result out
to the working tree.  So if we see some difference between the index and
the target and also between the index and the working tree, then it
means that we are not resetting out from a state that a mergy operation
left after failing with a conflict.  That is why we disallow ‘--merge’
option in this case.

   ‘reset --keep’ is meant to be used when removing some of the last
commits in the current branch while keeping changes in the working tree.
If there could be conflicts between the changes in the commit we want to
remove and the changes in the working tree we want to keep, the reset is
disallowed.  That’s why it is disallowed if there are both changes
between the working tree and ‘HEAD’, and between ‘HEAD’ and the target.
To be safe, it is also disallowed when there are unmerged entries.

   The following tables show what happens when there are unmerged
entries:

     working index HEAD target         working index HEAD
     ----------------------------------------------------
      X       U     A    B     --soft  (disallowed)
                               --mixed  X       B     B
                               --hard   B       B     B
                               --merge  B       B     B
                               --keep  (disallowed)

     working index HEAD target         working index HEAD
     ----------------------------------------------------
      X       U     A    A     --soft  (disallowed)
                               --mixed  X       A     A
                               --hard   A       A     A
                               --merge  A       A     A
                               --keep  (disallowed)

   ‘X’ means any state and ‘U’ means an unmerged index.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-restore,  Up: Top

Name
****

git-restore — 作業ツリーファイルを復元します


Synopsis
********

     git restore [<options>] [–source=<tree>] [–staged] [–worktree] [–] <pathspec>…
     git restore [<options>] [–source=<tree>] [–staged] [–worktree] –pathspec-from-file=<file> [–pathspec-file-nul]
     git restore (-p|–patch) [<options>] [–source=<tree>] [–staged] [–worktree] [–] [<pathspec>…]


DESCRIPTION
***********

復元ソースからのコンテンツを使用して、作業ツリー内の指定されたパスを復元
します。パスが追跡されているが、復元ソースに存在しない場合、復元ソースと
一致するように削除されます。

   このコマンドを使用して、 ‘--staged’ を使用してインデックスのコンテン
ツを復元したり、 ‘--staged--worktree’ を使用して作業ツリーとインデックス
の両方を復元したりすることもできます。

   デフォルトでは、 ‘--staged’ が指定されている場合、コンテンツは ‘HEAD’
から復元され、そうでない場合はインデックスから復元されます。別のコミット
から復元するには、 ‘--source’ を使用します。

   3つのコマンドの違いについては、 git(1) の "Reset, restore and revert"
を参照してください。

   !!このコマンドは実験的なものです。 動作が変わる可能性があります!!


OPTIONS
*******

‘-s <tree>’
‘--source=<tree>’
     指定のツリーのコンテンツを使用して、作業ツリーファイルを復元します
     。ソースツリーに関連付けられているコミット、ブランチ、またはタグに
     名前を付けてソースツリーを指定するのが一般的です。

     このオプションを指定しない場合で、 ‘--staged’ が指定されている場合
     は ‘HEAD’ から、それ以外の場合はインデックスから内容が復元されます
     。

     特別な場合として、マージベースが1つしかない場合は、 ‘A’ と ‘B’ のマ
     ージベースのショートカットとして ‘A...B’ を使用できます。 ‘A’ と
     ‘B’ の片方を省略できます。その場合、省略した方はデフォルトで ‘HEAD’
     になります。

‘-p’
‘--patch’
     復元ソースと復元場所の違いでハンクを対話的に選択します。 ‘--patch’
     モードの操作方法については、 git-add(1) の「Interactive Mode」セク
     ションを参照してください。

     注意: ‘--patch’ はpathspecを受け入れることができず、変更されたすべ
     てのパスを復元するように求められることに注意してください。

‘-W’
‘--worktree’
‘-S’
‘--staged’
     復元場所を指定します。どちらのオプションも指定されていない場合、デ
     フォルトで作業ツリーが復元されます。 ‘--staged’ を指定すると、イン
     デックスのみが復元されます。両方を指定すると、両方が復元されます。

‘-q’
‘--quiet’
     静かにします。フィードバックメッセージを抑制します。
     ‘--no-progress’ を含んでいます。

‘--progress’
‘--no-progress’
     ‘--quiet’ が指定されていない限り、進行状況は、端末に接続されている
     場合、デフォルトで標準エラーストリームに報告されます。このフラグは
     、 ‘--quiet’ に関係なく、端末に接続されていない場合でも進行状況のレ
     ポートを有効にします。

‘--ours’
‘--theirs’
     作業ツリー内のファイルをインデックスから復元する場合は、マージされ
     ていないパスにステージ#2(_ours_)または#3(_theirs_)を使用します。

     注意: ‘git rebase`と `git pull --rebase’ での作業中、「ours」と「
     theirs」が入れ替わっているように見える場合があることに注意してくだ
     さい。 詳細については、 git-checkout(1) の同じオプションの説明を参
     照してください。

‘-m’
‘--merge’
     作業ツリー上のファイルをインデックスから復元する場合は、マージされ
     ていないパスで競合するマージを再作成してください。

‘--conflict=<style>’
     上記の ‘--merge’ オプションと同じですが、競合するハンクの表示方法を
     変更し、 ‘merge.conflictStyle’ 構成変数をオーバーライドします。 可
     能な値は「merge」(デフォルト)と「diff3」(「merge」スタイルで表示さ
     れるものに加えて、元のコンテンツを表示します)です。

‘--ignore-unmerged’
     作業ツリー上のファイルをインデックスから復元するときに、マージされ
     ていないエントリがあり、 ‘--ours’ 、‘--theirs’ 、 ‘--merge’ または
     ‘--conflict’ のいずれも指定されていない場合は、操作を中止しないでく
     ださい。作業ツリー上のマージされていないパスはそのままになります。

‘--ignore-skip-worktree-bits’
     スパースチェックアウトモード(sparse checkout mode)では、デフォルト
     では、 ‘<pathspec>’ に一致するエントリと、
     $GIT_DIR/info/sparse-checkout のスパースパターンのみが更新されます
     。このオプションは、スパースパターンを無視し、 ‘<pathspec>’ 内のす
     べてのファイルを無条件に復元します。

‘--recurse-submodules’
‘--no-recurse-submodules’
     ‘<pathspec>’ がアクティブなサブモジュールを指定し、復元場所に作業ツ
     リーが含まれている場合、このオプションが指定されている場合にのみサ
     ブモジュールが更新されます。この場合、その作業ツリーはスーパープロ
     ジェクトに記録されたコミットに復元されます。ローカルの変更は上書き
     されます。何も使用されていない場合(または ‘--no-recurse-submodules’
     の場合)、サブモジュールの作業ツリーは更新されません。
     git-checkout(1) と同様に、これはサブモジュールの ‘HEAD’ を切り離し
     ます(detach)。

‘--overlay’
‘--no-overlay’
     オーバーレイモード(overlay mode)では、コマンドは復元時にファイルを
     削除しません。オーバーレイなしモード(no-overlay mode)では、
     ‘--source’ ツリーに表示されない追跡ファイルが削除され、 ‘<tree>’ と
     完全に一致するようになります。 デフォルトはオーバーレイなしモード
     (no-overlay mode)です。

‘--pathspec-from-file=<file>’
     pathspecは、コマンドライン引数の代わりに ‘<file>’ で渡されます。
     ‘<file>’ が正確に ‘-’ の場合、標準入力が使用されます。pathspec要素
     はLFまたはCR/LFで区切られます。pathspec要素は、構成変数
     ‘core.quotePath’ で説明されているように引用できます(git-config(1) 参
     照)。 ‘--pathspec-file-nul’ およびグローバルの
     ‘--literal-pathspecs’ も参照してください。

‘--pathspec-file-nul’
     ‘--pathspec-from-file’ でのみ意味があります。pathspec要素はNUL文字
     で区切られ、他のすべての文字は文字通りに解釈されます(改行と引用符を
     含む)。

‘--’
     これより後ろの引数をオプションとして解釈しないでください。

<pathspec>…
     操作の影響を受けるパスを制限します。

     詳細については、 gitglossary(7) の「pathspec」エントリを参照してく
     ださい。


EXAMPLES
********

以下のシーケンスは、 ‘master’ ブランチに切り替え、‘Makefile’ を2つ前のリ
ビジョンに戻し、誤って hello.c を削除して、インデックスから戻します。

     $ git switch master
     $ git restore --source master~2 Makefile  (1)
     $ rm -f hello.c
     $ git restore hello.c                     (2)

*note (1): CO1-1.
     別のコミットからファイルを取り出します

*note (2): CO1-2.
     インデックスから hello.c を復元します。

   あなたが、インデックス内のバージョンと一致するように「すべての」Cソー
スファイルを復元する場合は、以下のように書くことができます。

     $ git restore '*.c'

   注意: ‘*.c’ を囲む引用符に注意してください。 ファイル ‘hello.c’ は、
作業ツリーに存在しなくなった場合でも復元されます。これは、ファイルグロブ
がインデックス内のエントリを照合するために使用されるためです(シェルによ
る作業ツリー内ではありません)。

   現在のディレクトリ内のすべてのファイルを復元するには

     $ git restore .

   または、_top_ pathspec魔法を使用してすべての作業ツリーファイルを復元
します(gitglossary(7) 参照)。

     $ git restore :/

   ‘HEAD’ のバージョンと一致するようにインデックス内のファイルを復元する
には(これは git-reset(1) を使用するのと同じです)

     $ git restore --staged hello.c

   または、インデックスと作業ツリーの両方を復元できます(これは、
git-checkout(1) を使用する場合と同じです)。

     $ git restore --source=HEAD --staged --worktree hello.c

   または、より実用的で読みにくい短い形式:

     $ git restore -s@ -SW hello.c


SEE ALSO
********

git-checkout(1), git-reset(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-rev-list,  Up: Top

Name
****

git-rev-list — コミットオブジェクトを新しい順に一覧表示します


Synopsis
********

     git rev-list [<options>] <commit>… [[–] <path>…]


DESCRIPTION
***********

指定されたコミットから「親」リンクをたどることによって到達可能なコミット
をリストしますが、その前に _^_ が付いているコミットから到達可能なコミッ
トは除外します。デフォルトでは、出力は時系列の逆順で表示されます。

   これは集合演算と考えることができます。 コマンドラインで指定されたコミ
ットのいずれかから到達可能なコミットのセットを形成し、 _^_ が前に付いた
コミットのいずれかから到達可能なコミットがそのセットから差し引かれます。
差し引かれた残りのコミットは、コマンドの出力に出力されるものです。他のさ
まざまなオプションとパスパラメータ(pats parameters)を使用して、結果をさ
らに制限できます。

   したがって、以下のコマンド:

     $ git rev-list foo bar ^baz

   は、「 _foo_ または _bar_ から到達可能であるが、 _baz_ からは到達でき
ないすべてのコミットをリストする」を意味します。

   特別な表記 "_<commit1>_.._<commit2>_" は、 "^_<commit1>_ _<commit2>_"
の省略形として使用できます。たとえば、以下のどちらかを同じ意味で使用でき
ます:

     $ git rev-list origin..HEAD
     $ git rev-list HEAD ^origin

   もう1つの特別な表記法は、マージに役立つ "_<commit1>_…_<commit2>_" で
す。結果として得られるコミットのセットは、2つのオペランド間の対称差
(symmetric difference)です。以下の2つのコマンドは同等です:

     $ git rev-list A B --not $(git merge-base --all A B)
     $ git rev-list A...B

   ’rev-list’は、コミットの祖先グラフ作成およびトラバースする機能を提供
するため、非常に重要なGitコマンドです。 このため、’git bisect’や’git
repack’などのさまざまなコマンドで使用できるようにするさまざまなオプショ
ンがあります。


OPTIONS
*******


Commit Limiting
===============

ここで説明されている特別な表記法を使用してリストする必要があるコミットの
範囲を指定することに加えて、追加のコミット制限が適用される場合があります
。

   より多くのオプションを使用すると、通常、出力がさらに制限されます(たと
えば、‘--since=<date1>`は’<date1>‘より新しいコミットに制限され、
’–grep=<pattern>‘と一緒に使用すると、ログメッセージに’<pattern>‘と一致す
る行があるコミットにさらに制限されます)。

   注意: これらは、‘–reverse‘などのコミット順序およびフォーマットオプシ
ョンの前に適用されることに注意してください。

‘-<number>’
‘-n <number>’
‘--max-count=<number>’
     出力するコミットの数を制限します。

‘--skip=<number>’
     コミット出力の表示を開始する前に、’number’個のコミットをスキップし
     ます。

–since=<date>
‘--after=<date>’
     指定の日付よりも新しいコミットを表示します。

‘--until=<date>’
‘--before=<date>’
     指定の日付より古いコミットを表示します。

‘--max-age=<timestamp>’
‘--min-age=<timestamp>’
     コミット出力を指定された時間範囲に制限します。

‘--author=<pattern>’
‘--committer=<pattern>’
     コミット出力を、指定されたパターン(正規表現)に一致する作者
     (author)/コミッター(committer)ヘッダー行を持つものに制限します。複
     数の ‘--author=<pattern>’ がある場合、作者が指定されたパターンのい
     ずれかに一致するコミットが選択されます(複数の
     ‘--committer=<pattern>’ の場合も同様)。

‘--grep-reflog=<pattern>’
     コミット出力を、指定されたパターン(正規表現)に一致するreflogエント
     リを持つものに制限します。複数の‘–grep-reflog‘を使用すると、指定さ
     れたパターンのいずれかに一致するreflogメッセージを持つコミットが選
     択されます。‘–walk-reflogs‘が使用されていない限り、このオプションを
     使用するとエラーになります。

‘--grep=<pattern>’
     コミット出力を、指定されたパターン(正規表現)に一致するログメッセー
     ジを持つものに制限します。複数の‘–grep=<pattern>‘を使用すると、指定
     されたパターンのいずれかにメッセージが一致するコミットが選択されま
     す(全てに一致するコミットだけを選択したい場合、’–all-match‘を参照し
     てください)。

‘--all-match’
     コミット出力を、少なくとも1つに一致するものではなく、指定されたすべ
     ての‘–grep‘に一致するものに制限します。

‘--invert-grep’
     コミット出力を、‘–grep=<pattern>‘で指定されたパターンと一致しないロ
     グメッセージを持つものに制限します。

‘-i’
‘--regexp-ignore-case’
     大文字小文字に関係なく、正規表現の制限パターンに一致します。

‘--basic-regexp’
     制限パターンを基本正規表現として扱います。これがデフォルトです。

‘-E’
‘--extended-regexp’
     制限パターンを、デフォルトの基本正規表現の代わりに拡張正規表現とし
     て扱います。

‘-F’
‘--fixed-strings’
     制限パターンを固定文字列として扱います(パターンを正規表現として解釈
     しないでください)。

‘-P’
‘--perl-regexp’
     制限パターンをPerl互換の正規表現として扱います。

     これらのタイプの正規表現のサポートは、コンパイル時オプションに依存
     します。Gitが当該のサポート付きでコンパイルされていない場合、このオ
     プションを提供すると、Gitが死にます(die)。

‘--remove-empty’
     指定されたパスがツリーから見えなくなったら停止(stop)します。

‘--merges’
     マージコミットのみを印刷します。これは‘–min-parents=2‘とまったく同
     じです。

‘--no-merges’
     複数の親を持つコミットを出力しない。これは‘–max-parents=1‘とまった
     く同じです。

‘--min-parents=<number>’
‘--max-parents=<number>’
‘--no-min-parents’
‘--no-max-parents’
     量の多少に関わらず、とにかく複数の親コミットがあるコミットのみを表
     示します。特に、‘--max-parents=1`は’–no-merges‘と同じであり、
     ‘--min-parents=2`は’–merges‘と同じです。‘--max-parents=0`はすべての
     ルートコミットを提供し、’–min-parents=3‘はすべてのタコ足マージ
     (octopus merges)を示します。

     ‘--no-min-parents`と’–no-max-parents‘は、これらの制限を(制限なしに
     )再度リセットします。同等の形式は、‘--min-parents=0’(すべてのコミッ
     トに0個以上の親があります)および‘–max-parents=-1‘(マイナスの数は上
     限がないことを示します)です。

‘--first-parent’
     マージコミットを確認したら、最初の親コミットのみを探索します。この
     オプションは、特定のトピックブランチの進化を表示するときに、より良
     い概要を提供できます。トピックブランチへのマージは、時々更新される
     アップストリームに調整することだけである傾向があり、このオプション
     を使用すると、そのようなマージによって履歴に取り込まれた個々のコミ
     ットを無視できます。

‘--not’
     次に現れる‘–not‘までの間、後続のすべてのリビジョン指定子の’^’プレフ
     ィックス(またはその欠如)の意味を逆にします。

‘--all’
     ‘refs/‘内のすべてのrefが‘HEAD‘とともに、コマンドラインに
     ’<commit>’としてリストされているかのように見せかけます。

‘--branches[=<pattern>]’
     ‘refs/heads‘内のすべてのrefがコマンドラインに’<commit>’としてリスト
     されているかのように見せかけます。_<pattern>’が指定されている場合、
     ブランチを指定されたシェルグロブ(shell glob)に一致するものに制限し
     ます。パターンに_?_または_*’または’[_がない場合、最後に_/*’が含まれ
     ます。

‘--tags[=<pattern>]’
     ‘refs/tags‘内のすべてのrefがコマンドラインに’<commit>’としてリスト
     されているかのように見せかけます。_<pattern>’が指定されている場合は
     、指定されたシェルグロブ(shell glob)に一致するタグにタグを制限しま
     す。パターンに_?_または_*’または’[_がない場合、最後に_/*’が含まれま
     す。

‘--remotes[=<pattern>]’
     ‘refs/remotes‘内のすべてのrefがコマンドラインに’<commit>’としてリス
     トされているかのように見せかけます。_<pattern>’が指定されている場合
     、リモート追跡ブランチを指定されたシェルグロブ(shell glob)に一致す
     るものに制限します。パターンに_?_または_*’または’[_がない場合、最後
     に_/*’が含まれます。

‘--glob=<glob-pattern>’
     シェルグロブ’<glob-pattern>’に一致するすべてのrefがコマンドラインに
     ’<commit>’としてリストされているかのように見せかけます。先頭の
     ’refs/_は、欠落している場合は自動的に先頭に追加されます。パターンに
     _?_または_*’または’[_がない場合、最後に_/*’が含まれます。

‘--exclude=<glob-pattern>’
     次の‘–all‘または‘–branches‘または‘–tags‘または‘–remotes‘または
     ‘–glob‘が別の方法で考慮する’<glob-pattern>’に一致するrefを含めない
     でください。このオプションを繰り返すと、次の‘–all‘または
     ‘–branches‘または‘–tags‘または‘–remotes‘または‘–glob‘オプションまで
     除外パターンが蓄積されます(他のオプションまたは引数は、蓄積されたパ
     ターンをクリアしません)。

     与えられたパターンは、それぞれ‘–branches‘または‘ –tags‘または
     ‘–remotes‘に適用される場合、‘refs/heads‘または‘refs/tags‘または
     ‘refs/remotes‘で始まるべきではありません。‘--glob`または’–all‘に適
     用する場合は、‘refs/‘で始める必要があります。末尾の’/*’を意図してい
     る場合は、明示的に指定する必要があります。

‘--reflog’
     reflogsで言及されているすべてのオブジェクトがコマンドラインに
     ‘<commit>‘としてリストされているかのように見せかけます。

‘--alternate-refs’
     代替リポジトリのref先端として言及されているすべてのオブジェクトがコ
     マンドラインにリストされているかのように見せかけます。代替リポジト
     リは、オブジェクトディレクトリが‘objects/info/alternates‘で指定され
     ているリポジトリです。インクルードされたオブジェクトのセットは、
     ‘core.alternateRefsCommand‘などによって変更できます。
     git-config(1)を参照してください。

‘--single-worktree’
     デフォルトでは、作業ツリーが複数ある場合、‘--all`と’-reflog‘と
     ‘–indexed-objects‘では、すべての作業ツリーが検査されます
     (git-worktree(1)を参照)。このオプションは、現在の作業ツリーのみを調
     べるように強制します。

‘--ignore-missing’
     入力に無効なオブジェクト名が含まれている場合、そもそもその不正な入
     力が行われていないかのように見せかけます。

‘--stdin’
     コマンドラインにリストされている’<commit>’に加えて、標準入力からそ
     れらを読み取ります。‘–‘区切り文字が表示された場合は、コミットの読み
     取りを停止し、パスの読み取りを開始して結果を制限します。

‘--quiet’
     標準出力には何も出力しないでください。この形式は主に、呼び出し元が
     終了ステータスをテストして、オブジェクトの範囲が完全に接続されてい
     るかどうかを確認できるようにすることを目的としています。出力をフォ
     ーマットする必要がないため、stdoutを‘/dev/null‘にリダイレクトするよ
     りも高速です。

‘--disk-usage’
     通常の出力を抑制します。代わりに、選択したコミットまたはオブジェク
     トによってディスク上のストレージに使用されたバイトの合計を出力しま
     す。これは、出力が(特に‘–use-bitmap-index‘を伴った場合)はるかに高速
     に実行されることを除いて、出力を‘git cat-file
     –batch-check=_%(objectsize:disk)_‘にパイプすることと同じです。
     "on-disk storage"の意味する制限については、git-cat-file(1)の
     ‘CAVEATS‘節を参照してください。

‘--cherry-mark’
     ‘--cherry-pick’（以下を参照）と同様ですが、同等のコミットを省略せず
     に‘=‘と印し、同等でないコミットを’+‘と印します。

‘--cherry-pick’
     コミットの組を対称差(symmetric difference)に制限する場合、「反対側
     」の別のコミットと同じ変更を導入するコミットを省略します。

     たとえば、‘A`と`B`の2つのブランチがある場合、それらの片側だけですべ
     てのコミットを一覧表示する通常の方法は、’–left-right‘を使用すること
     です(‘–left-right‘オプションの説明の以下の例を参照してください)。た
     だし、他のブランチからは(ブランチAと重複しない)厳選されたコミットが
     表示されます(たとえば、「3rd onb」はブランチAからチェリーピックされ
     る可能性があります)。このオプションを使用すると、そのようなコミット
     のペアは出力から除外されます。

‘--left-only’
‘--right-only’
     リストは、対称差のそれぞれの側でのみコミットします。つまり、
     ‘--left-right`で `<’ と印されるのだけか、あるいは‘–left-right‘で
     ‘>‘と印されるものだけです。

     たとえば、‘--cherry-pick --right-only A...B`は、`A`にある、または
     `A`のコミットとパッチと同等のコミットを`B`から省略します。つまり、
     これは`git cherry A B`からの’+‘コミットをリストします。より正確に書
     くと、’–cherry-pick –right-only –no-merges‘により正確なリストを提供
     します。

‘--cherry’
     ‘–right-only –cherry-mark –no-merges‘の同義語です。出力を私たちの側
     のコミットに制限し、フォークされた履歴の反対の側に適用されたものを
     、‘git cherry upstream mybranch‘と同様に‘git log –cherry
     upstream…mybranch‘で印するのに役立ちます。

‘-g’
‘--walk-reflogs’
     コミットの祖先チェーンをたどる代わりに、reflogエントリを最新のもの
     から古いものに移動します。このオプションを使用する場合、除外するコ
     ミットを指定することはできません(つまり、’^commit’や
     ’commit1..commit2’や’commit1...commit2’表記は使用できません)。

     (明らかな理由で、)‘oneline`と`reference`以外の’–pretty‘形式では、こ
     れにより、出力にreflogから取得された2行の追加情報が含まれます。出力
     のreflog指定子は、‘ref@{Nth}’(‘Nth`はreflogの逆時系列インデックス
     (reverse-chronological index))または`ref@{timestamp}’(そのエントリ
     のタイムスタンプ付き)として表示されます。表示は下記のいくつかのルー
     ルに依存します:

       1. 開始点が ‘ref@{Nth}’ として指定されている場合は、インデックス
          形式を表示します。

       2. 開始点が ‘ref@{now}’ として指定されている場合は、タイムスタン
          プ形式を表示します。

       3. 上記のどちらも使用されていないが、コマンドラインで‘–date‘が指
          定されている場合は、‘–date‘で要求された形式でタイムスタンプを
          表示します。

       4. それ以外の場合は、インデックス形式を表示します。

     ‘--pretty = oneline`では、コミットメッセージの前にこの情報が同じ行
     に付けられます。このオプションを’–reverse‘と組み合わせることはでき
     ません。git-reflog(1)も参照してください。

     ‘–pretty=reference‘では、この情報はまったく表示されません。

‘--merge’
     マージが失敗した後、競合があり、マージするすべてのheadに存在しない
     ファイルに関連(touch)するrefを表示します。

‘--boundary’
     除外された境界コミットを出力します。 境界コミットの前には ‘-‘が付い
     ています。

‘--use-bitmap-index’
     (使用可能な場合は、)パックビットマップインデックスを使用して、トラ
     バーサルを高速化しようと試みます。‘–objects‘でトラバースする場合、
     ツリーとブロブには関連するパスが出力されないことに注意してください
     。

‘--progress=<header>’
     オブジェクトが対称になるときに、stderrに進捗レポートを表示します。
     ‘<header>‘テキストは、進行状況が更新されるたびに印刷されます。


History Simplification
======================

特定の<path>を変更するコミットなど、履歴の一部のみに関心がある場合があり
ます。ただし、「履歴の簡略化」(History Simplification)は2つの部分から成
ります。履歴を簡略化するためにはさまざまな戦略があるためです。その1つは
コミットの選択であり、もう1つはそれを行う方法です。

   以下のオプションは、表示するコミットを選択します:

<paths>
     指定された<パス>を変更するコミットが選択されます。

‘--simplify-by-decoration’
     いくつかのブランチまたはタグによって参照されるコミットが選択されま
     す。

   注意: 意味のある重要な履歴のために、追加のコミットを表示できることに
注意してください。

   以下のオプションは、簡略化の実行方法に影響します。

Default mode
     履歴を、ツリーの最終状態を説明する最も単純な履歴に単純化します。最
     終結果が同じである場合(つまり、同じコンテンツのブランチをマージする
     場合)、いくつかの傍流ブランチ(side branches)を削除するため、最も単
     純です。

‘--show-pulls’
     デフォルトモードからのすべてのコミットを含めますが、最初の親への
     TREESAMEではなく、後の親へのTREESAMEであるマージコミットも含めます
     。このモードは、ブランチに変更を「最初に導入した」マージコミットを
     表示するのに役立ちます。(訳注:TREESAME=pathspecが全く同一であるツリ
     ー)

‘--full-history’
     デフォルトモードと同じですが、一部の履歴を削除しません。

‘--dense’
     選択したコミットのみが表示され、重大で意味のある履歴を持つコミット
     もいくつか表示されます。

‘--sparse’
     簡略化された履歴内のすべてのコミットが表示されます。

‘--simplify-merges’
     このマージに寄与する選択されたコミットがないため、結果の履歴からい
     くつかの不要なマージを削除するための‘–full-history‘への追加オプショ
     ン。

‘--ancestry-path’
     表示するコミットの範囲が指定されている場合(たとえば、
     _commit1..commit2’または’commit2 ^commit1_)、 _commit1_ と
     _commit2_ の間の祖先チェーンに直接存在するコミットのみ、つまり、
     _commit1_ の子孫であり、 _commit2_ の祖先であるコミットを表示します
     。

   より詳細な説明は以下のとおりです。

   <paths> として ‘foo’ を指定したとします。 ‘foo’ !TREESAME を変更する
コミットを呼び出し、残りをTREESAMEと呼びます。( ‘foo’ のためにフィルタリ
ングされた差分では、それぞれ異なって見えたりたり等しく見えたりします。）

   以下、簡略化設定の違いを説明するために、同じ履歴例を使います。このコ
ミットグラフでは、ファイル ‘foo’ をフィルタリングしていると想定していま
す:

               .-A---M---N---O---P---Q
              /     /   /   /   /   /
             I     B   C   D   E   Y
              \   /   /   /   /   /
               `-------------'   X

   履歴 A—Q の水平線は、各マージの最初の親と見なされます。その各コミット
は以下のとおりです:

   • ‘I’ は最初のコミットであり、ファイル ‘foo’ が内容 “asdf” で存在し、
     ファイル ‘quux’ は内容 “quux” で存在します。最初のコミットは空のツ
     リーと比較されるため、‘I’ は !TREESAME です。

   • ‘A’ では、 ‘foo’ には “foo” だけが含まれています。

   • ‘B’ には ‘A’ と同じ変更が含まれています。そのマージ ‘M’ は些細なこ
     とであり、したがってすべての親にとって TREESAME です。

   • ‘C’ は ‘foo’ を変更しませんが、そのマージ ‘N’ はそれを “foobar” に
     変更するので、どの親にとっても TREESAME ではありません。

   • ‘D’ は ‘foo’ を “baz” に設定します。そのマージ ‘O’ は、 ‘N’ と ‘D’
     から “foobarbaz” への文字列を結合します。つまり、どの親にとっても
     TREESAME ではありません。

   • ‘E’ は ‘quux’ を “xyzzy” に変更し、そのマージ ‘P’ は文字列を
     “quuxxyzzy” に結合します。 ‘P’ は ‘O’ に対して TREESAME ですが、
     ‘E’ に対してはそうではありません。

   • ‘X’ は、新ファイル ‘side’ を追加し、 ‘Y’ がそれを変更した独立したル
     ートコミットです。 ‘Y’ は ‘X’ へのTREESAMEです。そのマージ ‘Q’ は
     ‘P’ に ‘side’ を追加し、 ‘Q’ は ‘P’ にはTREESAMEですが、‘Y’ に対し
     てはそうではありません。

   ‘rev-list’ は、 ‘--full-history’ および/または、( ‘--parents’ または
‘--children’ を介して)親の書き換えが使用されているかどうかに基づいて、コ
ミットを含めたり除外したりして、履歴を逆方向にウォークスルーします。以下
の設定が可能です。

Default mode
     コミットは、どの親に対してもTREESAMEでない場合に含まれます(これは変
     更できますが、以下の ‘--sparse’ を参照してください)。コミットがマー
     ジであり、一方の親に対するTREESAMEであった場合は、その親のみをフォ
     ローします。(TREESAMEの親が複数ある場合でも、そのうちの1つだけをフ
     ォローします)。それ以外の場合は、すべての親をフォローします。

     これにより、以下のようになります:

                    .-A---N---O
                   /     /   /
                  I---------D

     TREESAMEの親のみに従うルールが利用可能な場合は、 ‘B’ を検討対象から
     完全に削除したことに注意してください。 ‘C’ は ‘N’ を介して考慮され
     ましたが、しかしそれはTREESAMEです。ルートコミットは空のツリーと比
     較されるため、 ‘I’ は !TREESAME です。

     親子関係は ‘--parents’ でのみ表示されますが、デフォルトモードで選択
     されたコミットには影響しないため、親の行を示しました。

‘--full-history without parent rewriting’
     このモードは、デフォルトとはある一点で異なります。つまり、いずれか
     の親に対してTREESAMEであっても、常にマージのすべての親に従います。
     マージの複数の側にコミットが含まれている場合でも、これはマージ自体
     が含まれていることを意味するものではありません！ 例では以下のように
     なります。

                  I  A  B  N  D  O  P  Q

     ‘M’ は、両方の親にとってTREESAMEであるため、除外されました。 ‘E’ と
     ‘C’ と ‘B’ をすべて巡りましたが、 ‘B’ だけが !TREESAME だったので、
     他は表示されません。

     注意: 親の書き換え(rewrite)がないと、コミット間の親子関係について話
     す(talk)ことは実際には不可能であるため、それらが切断されている
     (disconnected)ことを示していることに注意してください。

‘--full-history with parent rewriting’
     通常のコミットは !TREESAME の場合にのみ含まれます(これは変更できま
     すが、以下の ‘--sparse’ を参照してください)。

     マージは常に含まれます。ただし、親リストは書き直されます。各親に沿
     って、自分自身に含まれていないコミットを削除します。 これにより以下
     のようになります。

                    .-A---M---N---O---P---Q
                   /     /   /   /   /
                  I     B   /   D   /
                   \   /   /   /   /
                    `-------------'

     上記を書き直さずに ‘--full-history’ と比較してください。 ‘E’ は
     TREESAMEであるため削除されましたが、Pの親リストは ‘E’ の親 ‘I’ を含
     むように書き直されていることに注意してください。 ‘C’ と ‘N’ および
     ‘X’ と ‘Y’ と ‘Q’ についても同じことが起こりました。

   上記の設定に加えて、あなたはTREESAMEが包含に影響を与えるかどうかを変
更できます:

‘--dense’
     巡ったコミットは、親にとってTREESAMEでない場合に含まれます。

‘--sparse’
     巡ったすべてのコミットが含まれます。

     ‘--full-history’ がなくても、これによりマージが単純化されることに注
     意してください。親の1つがTREESAMEの場合、その1つだけに従うため、マ
     ージの反対側を巡ることはありません。

‘--simplify-merges’
     最初に、親を書き換えた ‘--full-history’ と同じ方法で履歴グラフを作
     成します(上記を参照)。

     それから、以下のルールに従って、各コミット ‘C’ を最終履歴内の置換
     ‘C'’ に単純化します:

        • ‘C'’ を ‘C’ にセットします。

        • ‘C'’ の各親 ‘P’ をその簡略化された ‘P'’ に置き換えます。その過
          程で、他の親の祖先であるか、ルートである親を削除すると、
          TREESAMEが空のツリーにコミットされ、重複が削除されますが、
          TREESAMEであるすべての親を削除しないように注意してください。

        • この親の書き換え後、 ‘C'’ がルートまたはマージコミット(0または
          >1 の親を持つ)、境界コミット、または !TREESAMEである場合、それ
          は残ります。それ以外の場合は、唯一の親に置き換えられます。

     この効果は、親の書き換えを使用した ‘--full-history’ と比較すること
     で最もよく示されます。例は以下のようになります:

                    .-A---M---N---O
                   /     /       /
                  I     B       D
                   \   /       /
                    `---------'

     注意: ‘--full-history’ に対する ‘N’ と ‘P’ と ‘Q’ の主な違いに注意
     してください:

        • ‘N’ の親リストは、他の親 ‘M’ の祖先であるため、 ‘I’ が削除され
          ました。それでも、 !TREESAME なので ‘N’ が残りました。

        • ‘P’ の親リストも同様に ‘I’ が削除されました。 ‘P’ は、親が1つ
          で TREESAMEであるため、完全に削除されました。

        • ‘Q’ の親リストでは、 ‘Y’ が ‘X’ に簡略化されていました。その後
          、 ‘X’ はTREESAMEルートであったため、削除されました。 ‘Q’ は、
          親が1つで TREESAMEであるため、完全に削除されました。

   利用可能な別の簡略化モードがあります:

‘--ancestry-path’
     表示されるコミットを、指定されたコミット範囲内の “from” コミットと
     “to” コミットの間の祖先チェーンに直接あるコミットに制限します。つま
     り、 “to” コミットの祖先であるコミットと “from” コミットの子孫であ
     るコミットのみを表示します。

     ユースケースの例として、以下のコミット履歴について考えます:

                      D---E-------F
                     /     \       \
                    B---C---G---H---I---J
                   /                     \
                  A-------K---------------L--M

     通常の _D..M_ は、 ‘M’ の祖先であるコミットのセットを計算しますが、
     ‘D’ の祖先であるコミットは除外します。 これは、「 ‘M’ には ‘D’ には
     存在しなかったものがある」という意味で、 ‘D’ 以降の ‘M`に至るまでの
     歴史に何が起こったのかを知るのに役立ちます。この例の結果は、 `A’ と
     ‘B’ (そしてもちろん ‘D’ 自体)を除くすべてのコミットになります。

     ただし、 ‘M’ のコミットが ‘D’ で入ったバグで汚染されており、修正が
     必要な場合は、実際には ‘D’ の子孫である _D..M_ のサブセットのみを表
     示する必要があります。つまり、 ‘C’ と ‘K’ を除外します。これはまさ
     に ‘--ancestry-path’ オプションが行うことです。これを _D..M_ 範囲に
     適用すると、以下のようになります:

                          E-------F
                           \       \
                            G---H---I---J
                                         \
                                          L--M

   別のオプション ‘--show-pulls’ について説明する前に、新しいサンプル履
歴を作成する必要があります。

   簡略化された履歴を見るときにユーザーが直面する一般的な問題は、ファイ
ルを変更したことがわかっているコミットが、ファイルの簡略化された履歴に表
示されないことです。そこで、新しい例を示し、その場合に ‘--full-history’
や ‘--simplify-merges’ などのオプションがどのように機能するかを示しまし
ょう。

               .-A---M-----C--N---O---P
              /     / \  \  \/   /   /
             I     B   \  R-'`-Z'   /
              \   /     \/         /
               \ /      /\        /
                `---X--'  `---Y--'

   この例では、 ‘I’ が ‘file.txt’ を作成し、それが ‘A’ と‘B‘ と ‘X’ にて
さまざまな方法で変更されたとします。ひとり親のコミット ‘C’ と ‘Z’ と ‘Y’
は ‘file.txt’ を変更していません。マージコミット ‘M’ は、マージの競合を
解決して、 ‘A’ と ‘B’ の両方の変更を含めることによって作成されたため、ど
ちらにもTREESAMEではありません。ただし、マージコミット ‘R’ は、 ‘M’ の
‘file.txt`の内容を無視し、 `X’ の ‘file.txt’ の内容のみを取得することに
よって作成されました。 したがって、 ‘R’ は ‘X’ へのTREESAMEですが、 ‘M’
はそうではありません。最後に、 ‘N’ を作成するための自然なマージ解決は、
‘R’ で ‘file.txt’ の内容を取得することです。したがって、 ‘N’ は ‘C’ では
なく ‘R’ へのTREESAMEです。マージコミット ‘O’ と ‘P’ は、最初の親には
TREESAMEですが、2番目の親である ‘Z’ と ‘Y’ にはついてはそうではありませ
ん。

   デフォルトモードを使用する場合、 ‘N’ と ‘R’ は両方ともTREESAMEの親を
持っているため、これらのエッジはウォークされ、他のエッジは無視されます。
結果の履歴グラフは以下のとおりです:

             I---X

   ‘--full-history’ を使用する場合、Gitはすべてのエッジを巡ります。これ
により、コミット ‘A’ と ‘B’ と マージ ‘M’ が検出されますが、マージコミッ
ト ‘O’ と ‘P’ も明らかになります。 親を書き換えると、結果のグラフは以下
のようになります:

               .-A---M--------N---O---P
              /     / \  \  \/   /   /
             I     B   \  R-'`--'   /
              \   /     \/         /
               \ /      /\        /
                `---X--'  `------'

   ここで、マージコミット ‘O’ と ‘P’ は、実際には ‘file.txt’ への変更を
提供しなかったため、余分なノイズを提供します。古いバージョンの
‘file.txt’ に基づいたトピックのみをマージしました。これは、多くの寄稿者
が並行して作業し、トピックブランチを単一のトランクに沿ってマージするワー
クフローを使用するリポジトリの一般的な問題です。開発に関係のないマージが
‘--full-history’ の結果に表示されます。

   ‘--simplify-merges’ オプションを使用すると、コミット ‘O’ と ‘P’ が結
果から消えます。 これは、 ‘O’ と ‘P’ の書き直された2番目の親が、最初の親
から到達可能であるためです。これらのエッジが削除されると、コミットは、親
にとってTREESAMEである単一の親のコミットのように見えます。これはコミット
‘N’ にも発生し、以下のような履歴ビューが表示されます:

               .-A---M--.
              /     /    \
             I     B      R
              \   /      /
               \ /      /
                `---X--'

   このビューでは、 ‘A’ と ‘B’ と ‘X’ からの重要なひとり親の変更がすべて
表示されます。また、慎重に解決されたマージ ‘M’ とそれほど慎重に解決され
ていないマージ ‘R’ も表示されます。これは通常、コミット ‘A’ と ‘B’ がデ
フォルトのビューの履歴から「消えた」理由を判断するのに十分な情報です。た
だし、このアプローチにはいくつかの問題があります。

   最初の問題はパフォーマンスです。以前のオプションとは異なり、
‘--simplify-merges’ オプションでは、単一の結果を返す前にコミット履歴全体
をウォークする必要があります。これにより、非常に大規模なリポジトリでこの
オプションを使用するのが難しくなる可能性があります。

   2番目の問題は監査の1つです。多くの寄稿者が同じリポジトリで作業してい
る場合、どのマージコミットが重要なブランチに変更を導入したかが重要です。
上記の問題のあるマージ ‘R’ は、重要なブランチにマージするために使用され
たマージコミットではない可能性があります。 代わりに、マージ ‘N’ を使用し
て ‘R’ と ‘X’ を重要なブランチにマージしました。このコミットには、変更
‘X’ がコミットメッセージの ‘A’ と ‘B’ からの変更を上書きするようになった
理由に関する情報が含まれている可能性があります。

‘--show-pulls’
     デフォルトの履歴に表示されるコミットに加えて、最初の親には
     TREESAMEではなく、後の親にはTREESAMEである各マージコミットを表示し
     ます。

     マージコミットが ‘--show-pulls’ に含まれている場合、マージは別のブ
     ランチから変更を「プル」したかのように扱われます。この例で
     ‘--show-pulls’ を使用すると(他のオプションは使用しない場合、)結果の
     グラフは行かのようになります:

                  I---X---R---N

     ここで、コミット ‘X’ と ‘R’ をそれぞれベースブランチにプルしたため
     、マージコミット ‘R’ と ‘N’ が含まれています。これらのマージは、コ
     ミット ‘A’ と ‘B’ がデフォルトの履歴に表示されない理由です。

     ‘--show-pulls’ が ‘--simplify-merges’ とペアになっている場合、グラ
     フには必要なすべての情報が含まれます:

                    .-A---M--.   N
                   /     /    \ /
                  I     B      R
                   \   /      /
                    \ /      /
                     `---X--'

     ‘M’ は ‘R’ から到達可能であるため、 ‘N’ から ‘M’ へのエッジが単純化
     されていることに注意してください。ただし、 ‘N’ は、変更 ‘R’ をメイ
     ンブランチに「プル」したため、重要なコミットとして履歴に表示されま
     す。

   ‘--simplify-by-decoration’ オプションを使用すると、タグで参照されてい
ないコミットを省略して、履歴のトポロジの全体像のみを表示できます。コミッ
トは、(1)タグによって参照されている場合、または (2)コマンドラインで指定
されたパスの内容を変更した場合に、!TREESAMEとしてマークされます(つまり、
上記の履歴簡略化ルールの後に保持されます)。他のすべてのコミットは
TREESAMEとしてマークされます(簡略化される可能性があります)。


Bisection Helpers
=================

‘--bisect’
     含まれるコミットと除外されるコミットのほぼ中間にある1つのコミットオ
     ブジェクトに出力を制限します。(存在する場合)bad bisection ref
     ‘refs/bisect/bad’ が含まれるコミットに追加され、（存在する場合)good
     bisection ref ‘refs/bisect/good-*’ が除外されるコミットに追加される
     ことに注意してください。したがって、 ‘refs/bisect/’ にrefsがないと
     仮定すると、

                  $ git rev-list --bisect foo ^bar ^baz

     は、2つのコマンドの出力である中間点(midpoint)を出力します

                  $ git rev-list foo ^midpoint
                  $ git rev-list midpoint ^bar ^baz

     上記は、ほぼ同じ長さになります。 したがって、回帰を導入する変更を見
     つけることは、バイナリ検索(binary search)に還元されます。コミットチ
     ェーンの長さが1になるまで、新しい中間点(midpoint)を繰り返し生成して
     テストします。

‘--bisect-vars’
     これは、 ‘refs/bisect/’ 内のrefが使用されないこと、およびシェルによ
     って評価される準備ができているテキストを出力することを除いて、
     ‘--bisect’ と同じように計算されます。これらの行は、中間点リビジョン
     の名前を変数 ‘bisect_rev’ に割り当て、 ‘bisect_rev’ が ‘bisect_nr’
     にテストされた後にテストされるコミットの予想数、 ‘bisect_rev’ が
     ‘bisect_good`に適していることが判明した場合にテストされるコミットの
     予想数、 `bisect_rev’ が ‘bisect_bad’ に不適切であることが判明した
     場合にテストされるコミットの予想数、および現在 ‘bisect_all’ に二等
     分しているコミットの数です。

‘--bisect-all’
     これにより、含まれるコミットと除外されるコミットの間のすべてのコミ
     ットオブジェクトが、含まれるコミットと除外されるコミットまでの距離
     順に出力されます。 ‘refs/bisect/’ のrefは使用されません。それらから
     最も遠いものが最初に表示されます。(これは ‘--bisect’ によって表示さ
     れる唯一のものです。)

     これは、何らかの理由(たとえば、コンパイルできない場合など)でそれら
     の一部をテストすることを避けたい場合に、テストするための適切なコミ
     ットを簡単に選択できるため便利です。

     このオプションは ‘--bisect-vars’ と一緒に使用できます。この場合、ソ
     ートされたすべてのコミットオブジェクトの後に、 ‘--bisect-vars’ が単
     独で使用された場合と同じテキストが表示されます。


Commit Ordering
===============

デフォルトでは、コミットは新しい順に表示されます。

‘--date-order’
     すべての子が表示されるまで親を表示しませんが、それ以外の場合はコミ
     ットタイムスタンプの順序でコミットを表示します。

‘--author-date-order’
     すべての子が表示されるまで親を表示しませんが、それ以外の場合は、作
     者(author)のタイムスタンプ順にコミットを表示します。

‘--topo-order’
     すべての子が表示されるまで親を表示せず、複数の履歴行が混在するコミ
     ットを表示しないようにします。

     たとえば、以下のようなコミット履歴があります:

              ---1----2----4----7
                  \              \
                   3----5----6----8---

     ここで、数字はコミットタイムスタンプの順序を示し、 ‘gitrev-list’ と
     ‘--date-order’ のある友達は、タイムスタンプの順序でコミットを示しま
     す。つまり、8 7 6 5 4 3 2 1

     ‘--topo-order’ を使用すると、8 6 5 3 7 4 2 1（または8 7 4 2 6 5 3
     1）が表示されます。2つの並列開発トラックからのコミットが混在して表
     示されないようにするために、いくつかの古いコミットが新しいコミット
     の前に表示されます。

‘--reverse’
     表示するように選択したコミットを逆の順序で出力します(上記の Commit
     Limiting 節を参照)。 ‘--walk-reflogs’ と組み合わせることはできませ
     ん。


Object Traversal
================

これらのオプションは、主にGitリポジトリのパッキングを対象としています。

‘--objects’
     リストされたコミットによって参照されるオブジェクトのオブジェクト
     IDを出力します。 したがって、 ‘--objects foo ^bar’ 「コミットオブジ
     ェクトが _bar_ であるが _foo_ でない場合にダウンロードする必要があ
     るすべてのオブジェクトIDを送ってください」という意味です。

‘--in-commit-order’
     ツリーIDとブロブのIDをコミット順に出力します。 ツリーIDとブロブの
     IDは、コミットによって最初に参照された後に出力されます。

‘--objects-edge’
     ‘--objects’ に似ていますが、接頭辞 “-” 文字が付いた除外されたコミッ
     トのIDも出力します。これは git-pack-objects(1) によって使用され、ネ
     ットワークトラフィックを削減するために、これらの除外されたコミット
     に含まれるオブジェクトに基づいてオブジェクトを削除された形式で記録
     する「薄い」パック(thin pack)を構築します。

‘--objects-edge-aggressive’
     ‘--objects-edge’ に似ていますが、時間がかかるという犠牲を払って、除
     外されたコミットを見つけためにもっともっと頑張ります。これは、
     ‘--objects-edge’ の代わりに使用されて浅いリポジトリ(shallow
     repositories)用の「薄い」パック(thin pack)を構築します。

‘--indexed-objects’
     インデックスで使用されるすべてのツリーとブロブがコマンドラインにリ
     ストされているかのように見せかけます。 注意: たぶんあなたは一緒に
     ‘--objects’ も使用したいと思うでしょう。

‘--unpacked’
     ‘--objects’ と一緒の時のみ役立ちます。パックに含まれていないオブジ
     ェクトIDを出力します。

‘--object-names’
     ‘--objects’ と一緒の時のみ役立ちます。見つかったオブジェクトIDの名
     前を出力します。これがデフォルトの動作です。

‘--no-object-names’
     ‘--objects’ と一緒の時のみ役立ちます。見つかったオブジェクトIDの名
     前は出力されません。これにより、 ‘--object-names’ が反転します。 こ
     のフラグを使用すると、 git-cat-file(1) などのコマンドで出力をより簡
     単に解析できます。

‘--filter=<filter-spec>’
     ‘--objectsほげほげ’ のどれかと一緒の時のみ役立ちます。印刷されたオ
     ブジェクトのリストからオブジェクト(通常はブロブ)を省略します。
     _<filter-spec>_ は、以下のいずれかになります:

     _–filter=blob:none_ の形式では、すべてのブロブが省略されます。

     _–filter=blob:limit=<n>[kmg]_ の形式では、nバイトまたは指定の単位よ
     り大きいブロブが省略されます。nはゼロの場合があります。 接尾辞kと
     mとgを使用して、KiBまたはMiBまたはGiBの単位にすることができます。 た
     とえば、 _blob:limit=1k_ は _blob:limit=1024_ と同じです。

     _–filter=object:type=(tag|commit|tree|blob)_ の形式では、要求された
     タイプではないすべてのオブジェクトが省略されます。

     _–filter=sparse:oid=<blob-ish>_ の形式は、ブロブ(またはブロブ式)
     _<blob-ish>_ に含まれるsparse-checkout仕様を使用して、 要求された
     refsでsparse checkoutに必要のないブロブを省略します。

     _–filter=tree:<depth>_ の形式は、ルートツリーからの深さが >=
     <depth> (オブジェクトがトラバースされたコミットの複数の深さにある場
     合の最小深さ)であるすべてのブロブとツリーを省略します。 <depth>=0 は
     、コマンドライン(または –stdin が使用されている場合は標準入力)に明
     示的に含まれていない限り、ツリーやブロブを含みません。 <depth>=1 は
     、 <commit> から到達可能なコミットまたは明示的に指定されたオブジェ
     クトによって直接参照されるツリーとブロブのみが含まれます。
     <depth>=2 は <depth>=1 に似ていますが、明示的に指定されたコミットま
     たはツリーから削除されたもう1つのレベルのツリーとブロブも含まれます
     。

     注意: ファイルシステム上の任意のパスから読み取れる形式である
     _–filter=sparse:path=<path>_ は、セキュリティ上の理由から削除された
     ことに注意してください。

     複数の _–filter=_ フラグを指定して、フィルターを組み合わせることが
     できます。指定の全てのフィルターで受け入れられるオブジェクトのみが
     含まれます。

     _–filter=combine:<filter1>+<filter2>+…<filterN>_ の形式を使用して、
     複数のフィルターを組み合わせることができますが、これは _–filter_ フ
     ラグを繰り返すよりもずっとずっと難しく、通常は必要はありません。フ
     ィルタは _+_ で結合され、個々のフィルタは % エンコードされます(つま
     り、URLエンコードされます)。 _+_ と _%_ 文字に加えて、次の文字は予
     約されており、エンコードする必要があります:
     ‘~!@#$^&*()[]{}\;",<>?’‘'`’ およびASCIコード ‘0x20’ 以下の全ての文
     字(空白(space)と改行(newline)を含む)。

     他の任意の文字もエンコードできます。 たとえば、
     _combine:tree:3+blob:none_ と _combine:tree%3A3+blob%3Anone_ は同等
     です。

‘--no-filter’
     以前の ‘--filter=’ 引数をすべてオフにします。

‘--filter-provided-objects’
     明示的に提供されたオブジェクトのリストをフィルタリングします。そう
     しないと、どのフィルターとも一致しなくても常に出力されます。
     ‘--filter=’ と一緒に使った時のみ役に立ちます。

‘--filter-print-omitted’
     ‘--filter=’ と一緒の時のみ役立ちます。フィルタによって省略されたオ
     ブジェクトのリストを出力します。オブジェクトIDの前には “~” 文字が付
     いています。

‘--missing=<missing-action>’
     将来の「部分クローン」(partial clone)開発に役立つデバッグオプション
     。このオプションは、欠落しているオブジェクトの処理方法を指定します
     。

     _–missing=error_ の形式は、欠落しているオブジェクトが検出された場合
     に、rev-list がエラーで停止することを要求します。これがデフォルトの
     アクションです。

     _–missing=allow-any_ の形式を使用すると、欠落しているオブジェクトが
     検出された場合でも、オブジェクトの走査を続行できます。欠落している
     オブジェクトは、結果から黙って省略されます。

     _–missing=allow-promisor_ の形式は _allow-any_ に似ていますが、オブ
     ジェクトのトラバーサルは、 EXPECTED promisor が欠落しているオブジェ
     クトに対してのみ続行できます。予期しない欠落したオブジェクトはエラ
     ーを発生させます。

     _–missing=print_ の形式は _allow-any_ に似ていますが、欠落している
     オブジェクトのリストも出力します。オブジェクトIDの前には “?” 文字が
     付いています。

‘--exclude-promisor-objects’
     (内部使用のみ。) promisor境界でのオブジェクトトラバーサルをプレフィ
     ルターします。これは部分クローン(partial clone)で使用されます。これ
     は、欠落しているオブジェクトに関するエラーを単に黙らせるのではなく
     、トラバーサルを制限するため、 ‘--missing=allow-promisor’ よりも強
     力です。

‘--unsorted-input’
     コミット時間で時系列の逆順に並べ替えるのではなく、コマンドラインで
     指定された順序でコミットを表示します。‘--no-walk’ または
     ‘--no-walk=sorted’ と組み合わせることはできません。

‘--no-walk[=(sorted|unsorted)]’
     指定されたコミットのみを表示し、祖先をトラバースしない。範囲が指定
     されている場合、これは効果がありません。引数 ‘unsorted’ が指定され
     ている場合、コミットはコマンドラインで指定された順序で表示されます
     。それ以外の場合( ‘sorted’ または引数が指定されていない場合)、コミ
     ットはコミット時間の逆順に表示されます。 ‘--graph’ と組み合わせるこ
     とはできません。 ‘sorted’ または引数が指定されていない場合、
     ‘--unsorted-input’ と組み合わせることはできません。

‘--do-walk’
     以前の ‘--no-walk’ を上書きします。


Commit Formatting
=================

これらのオプションを使用すると、 git-rev-list(1) より専門的なコミットロ
グツールのファミリーである git-log(1) や git-show(1) や
git-whatchanged(1) と同様に機能します。

‘--pretty[=<format>]’
‘--format=<format>’
     コミットログの内容を指定された形式できれいに印刷(pretty-print)しま
     す。 _<format>_ は oneline・short・medium・full・fuller・
     reference・email・raw・format:<string>・tformat:<string> のいずれか
     になります。 _<format>_ が上記のいずれでもなく、 _%placeholder_ が
     含まれている場合、 _–pretty=tformat:<format>_ が指定されたかのよう
     に動作します。

     各フォーマットの詳細については、 "PRETTY FORMATS" セクションを参照
     してください。 _=<format>_ の部分を省略すると、デフォルトで
     _medium_ になります。

     注意: リポジトリー構成でデフォルトのpretty formatを指定できます
     (git-config(1) 参照)。

‘--abbrev-commit’
     40バイトの16進コミットオブジェクト名全体を表示する代わりに、オブジ
     ェクトに一意の名前を付けるプレフィックスを表示します。
     "–abbrev=<n>" (表示されている場合はdiff出力も変更します)オプション
     を使用して、プレフィックスの最小長を指定できます。

     これにより、80桁幅の端末を使用している人にとって "–pretty=oneline"
     がずっと読みやすくなるはずです。

‘--no-abbrev-commit’
     完全な40バイトの16進コミットオブジェクト名を表示します。 これにより
     、明示的または "–oneline" などの他のオプションによって暗黙的に示さ
     れる ‘--abbrev-commit’ が無効になります。また、 ‘log.abbrevCommit’
     変数をオーバーライドします。

‘--oneline’
     これは、 "–pretty=oneline –abbrev-commit" を一緒に使用するための省
     略形です。

‘--encoding=<encoding>’
     コミットオブジェクトは、ログメッセージに使用される文字エンコードを
     エンコードヘッダーに記録します。このオプションを使用して、ユーザー
     が好むエンコーディングでコミットログメッセージを再コーディングする
     ようにコマンドに指示できます。配管以外のコマンドの場合、これはデフ
     ォルトでUTF-8になります。オブジェクトが ‘X’ でエンコードされている
     と主張し、 ‘X’ で出力している場合、オブジェクトをそのまま出力するこ
     とに注意してください。これは、元のコミットの無効なシーケンスが出力
     にコピーされる可能性があることを意味します。同様に、 iconv(3) コミ
     ットの変換に失敗した場合、警告とともに元のオブジェクトをそのまま出
     力します。

‘--expand-tabs=<n>’
‘--expand-tabs’
‘--no-expand-tabs’
     出力に表示する前に、ログメッセージでタブ展開を実行します(タブ幅を
     <n> とみなして <n> 境界に揃うように空白で調整する)。
     ‘--expand-tabs’ は ‘--expand-tabs=8’ の省略形であり、
     ‘--no-expand-tabs’ は ‘--expand-tabs=0’ の省略形です。タブの展開を
     無効にします。

     デフォルトでは、タブはログメッセージを4つのスペースでインデントする
     きれいな形式(pretty formats)で展開されます(つまり、デフォルトの
     _medium_ と’full’ と _fuller_)。

‘--show-signature’
     署名を ‘gpg --verify’ に渡して、署名されたコミットオブジェクトの有
     効性を確認し、出力を表示します。

‘--relative-date’
     ‘--date=relative’ と同じ。

‘--date=<format>’
     ‘--pretty’ を使用する場合など、人間が読める形式で表示される日付に対
     してのみ有効になります。 ‘log.date’ 構成変数(config variable)は、
     logコマンドの ‘--date’ オプションのデフォルト値を設定します。デフォ
     ルトでは、日付は元のタイムゾーン(コミッターの、または作者のいずれか
     )で表示されます。フォーマットに ‘-local’ が追加されている場合(例:
     ‘iso-local’ )、代わりにユーザーのローカルタイムゾーンが使用されます
     。

     ‘--date=relative’ は、現在の時刻を基準にした日付を示します。例: “2
     hours ago” 。 ‘-local’ オプションは ‘--date = relative’ には効果が
     ありません。

     ‘--date=local’ は ‘--date=default-local’ のエイリアスです。

     ‘--date=iso’ (または ‘--date=iso8601’ )は、タイムスタンプをISO
     8601のような形式で表示します。厳密なISO 8601形式との違いは以下のと
     おりです:

        • ‘T’ 日付/時刻区切り文字の代わりにスペース

        • 時間とタイムゾーンの間のスペース

        • タイムゾーンの時間と分の間にコロンがありません

     ‘--date=iso-strict’ (または ‘--date=iso8601-strict’ )は、タイムスタ
     ンプを厳密なISO 8601形式で表示します。

     ‘--date=rfc’ (または ‘--date=rfc2822’ )は、RFC 2822形式のタイムスタ
     ンプを示します。これは、電子メールメッセージでよく見られます。

     ‘--date=short’ は、日付のみを表示し、時刻は表示せず、 ‘YYYY-MM-DD’
     形式で表示します。

     ‘--date=raw’ は、エポック(1970-01-01 00:00:00 UTC)からの秒数、スペ
     ース、UTCからのオフセット(‘+’ または ‘-’ の付いた4桁数字で、最初の
     2つは時間、次の2つは分です)。つまり、タイムスタンプが ‘strftime("%s
     %z")’ でフォーマットされているかのようになります。 ‘-local’ オプシ
     ョンは、seconds-since-epoch値(常にUTCで測定されます)には影響しませ
     んが、付随するタイムゾーン値を切り替えることに注意してください。

     ‘--date=human’ は、タイムゾーンが現在のタイムゾーンと一致しない場合
     はタイムゾーンを表示し、一致する場合は日付全体を印刷しません(つまり
     、「今年」の日付の場合は年の印刷をスキップしますが、何があったか覚
     えてるような過去数日については日付自体もスキップします)。 古い日付
     の場合、時と分も省略されます。

     ‘--date=unix’ は、日付をUnixエポックタイムスタンプ(1970年からの秒数
     )として表示します。 ‘--raw’ と同様に、これは常にUTCであるため、 ‘
     -local‘ は効果がありません。

     ‘--date=format:...’ は、内部で処理される%zと%Zを除いて、フォーマッ
     ト ‘...’ をあなたのシステムの ‘strftime’ に送ります。
     ‘--date=format:%c’ を使用して、システムロケールの推奨形式で日付を表
     示します。フォーマットプレースホルダーの完全なリストについては、
     ‘strftime’ マニュアルを参照してください。 ‘-local’ を使用する場合、
     正しい構文は ‘--date=format-local:...’ です。

     ‘--date=default’ はデフォルトの形式であり、いくつかの例外を除いて
     ‘--date=rfc2822’ に似ています:

        • 曜日の後にコンマはありません

        • ローカルタイムゾーンを使用する場合、タイムゾーンは省略されます

‘--header’
     コミットの内容をraw形式で出力します。各レコードはNUL文字で区切られ
     ます。

‘--no-commit-header’
     "commit" を含むヘッダー行と、指定された形式の前に出力されたオブジェ
     クトIDを抑制します。これは組み込みフォーマットには影響しません。 カ
     スタムフォーマットのみが影響を受けます。

‘--commit-header’
     以前の ‘--no-commit-header’ を上書きします。

‘--parents’
     コミットの親も出力します( "commit parent…" の形式で)。親の書き換え
     も可能にします。上記の _History Simplification_ 参照してください。

‘--children’
     コミットの子も出力します( "commit child…" の形式で)。親の書き換えも
     可能にします。上記の _History Simplification_ を参照してください。

‘--timestamp’
     生のコミットタイムスタンプを出力します。

‘--left-right’
     対称差のどちら側からコミットに到達できるかをマークします。左側から
     のコミットには‘<‘が付けられ、右側からのコミットには `>`が付けられま
     す。’–boundary‘と組み合わせると、それらのコミットの前に‘-‘が付きま
     す。

     たとえば、以下のトポロジーの場合:

                       y---b---b  branch B
                      / \ /
                     /   .
                    /   / \
                   o---x---a---a  branch A

     以下のような出力が得られます:

                  $ git rev-list --left-right --boundary --pretty=oneline A...B

                  >bbbbbbb... 3rd on b
                  >bbbbbbb... 2nd on b
                  <aaaaaaa... 3rd on a
                  <aaaaaaa... 2nd on a
                  -yyyyyyy... 1st on b
                  -xxxxxxx... 1st on a

‘--graph’
     出力の左側に、コミット履歴のテキストベースのグラフィック表現を描画
     します。グラフ履歴を適切に描画するために、コミットの間に余分な行が
     出力される可能性があります。 ‘--no-walk’ と組み合わせることはできま
     せん。

     これにより、親の書き換えが可能になります。上記の _History
     Simplification_ を参照してください。

     これは、デフォルトで ‘--topo-order’ オプションを意味しますが、
     ‘--date-order’ オプションも指定できます。

‘--show-linear-break[=<barrier>]’
     –graph を使用しない場合、すべての履歴ブランチがフラット化されるため
     、2つの連続するコミットが線形ブランチに属していないことがわかりにく
     くなる可能性があります。このオプションは、その場合、それらの間に障
     壁を置きます。 ‘<barrier>’ が指定されている場合、デフォルトの障壁文
     字列の代わりに ‘<barrier>’ が表示されます。

‘--count’
     リストされたコミットの数を示す数値を出力し、他のすべての出力を抑制
     します。 ‘--left-right’ と一緒に使用する場合は、代わりに、タブで区
     切って、左右のコミットのカウントを出力します。 ‘--cherry-mark’ と一
     緒に使用する場合は、これらのカウントからパッチの同等のコミットを省
     略し、タブで区切られた同等のコミットのカウントを出力します。


PRETTY FORMATS
**************

コミットがマージであり、 pretty-format が _oneline_ または _email_ また
は _raw_ でない場合、 _Author:_ 行の前に追加の行が挿入されます。この行は
"Merge: " で始まり、先祖のコミットのハッシュがスペースで区切られて出力さ
れます。履歴の表示を制限している場合、たとえば、特定のディレクトリまたは
ファイルに関連する変更のみに関心がある場合、リストされたコミットは必ずし
も *直接* の親コミットのリストではない可能性があることに注意してください
。

   いくつかの組み込みフォーマットがあります。そして以下で説明するように
、 pretty.<name> 構成オプション(config option)を別のフォーマット名または
_format:_ 文字列に設定することで、追加のフォーマットを定義できます
(git-config(1) 参照)。組み込みフォーマットの詳細は以下のとおりです:

   • _oneline_

          <hash> <title line>

     これは、可能な限りコンパクトになるように設計されています。

   • _short_

          commit <hash>
          Author: <author>

          <title line>

   • _medium_

          commit <hash>
          Author: <author>
          Date:   <author date>

          <title line>

          <full commit message>

   • _full_

          commit <hash>
          Author: <author>
          Commit: <committer>

          <title line>

          <full commit message>

   • _fuller_

          commit <hash>
          Author:     <author>
          AuthorDate: <author date>
          Commit:     <committer>
          CommitDate: <committer date>

          <title line>

          <full commit message>

   • _reference_

          <abbrev hash> (<title line>, <short author date>)

     この形式は、コミットメッセージ内の別のコミットを参照するために使用
     され、 ‘--pretty='format:%C(auto)%h (%s, %ad)'’ と同じです。 デフォ
     ルトでは、別の ‘--date’ オプションが明示的に指定されていない限り、
     日付は ‘--date=short’ でフォーマットされます。formatプレースホルダ
     ーを使用する他の ‘format:’ と同様に、その出力は、 ‘--decorate’ や
     ‘--walk-reflogs’ などの他のオプションの影響を受けません。

   • _email_

          From <hash> <date>
          From: <author>
          Date: <author date>
          Subject: [PATCH] <title line>

          <full commit message>

   • _mboxrd_

     _email_ と同様ですが、コミットメッセージの "From " で始まる行(前に
     0個以上の ">" が付いている)は ">" でクォートされているため、新しい
     コミットの開始と混同されることはありません。

   • _raw_

     _raw_ 形式は、コミットオブジェクトに格納されているとおりにコミット
     全体を正確に表示します。とりわけ –abbrev または –no-abbrev のどちら
     が使用されているかに関係なく、ハッシュは完全に表示され、「親」
     (parents)情報は、移植や履歴の単純化を考慮せずに、真の親のコミットを
     示します。この形式は、コミットの表示方法に影響しますが、いわゆる
     ‘git log --raw’ の差分の表示方法ではありません。生のdiff形式で完全
     なオブジェクト名を取得するには、 ‘--no-abbrev’ を使用します。

   • _format:<string>_

     _format:<string>_ 形式を使用すると、表示する情報を指定できます。注
     意: これはprintf書式に少し似ていますが、 _\n_ の代わりに _%n_ を使
     用して改行を取得するという例外に注意してください。

     例: _format:"The author of %h was %an, %ar%nThe title was
     >>%s<<%n"_ は以下のように表示されます:

          The author of fe6e0ee was Junio C Hamano, 23 hours ago
          The title was >>t4119: test autocomputing -p<n> for traditional diff input.<<

     さて、以下がプレースホルダー達です:

        • 単一のリテラル文字に展開されるプレースホルダー:

          _%n_
               改行(newline)

          _%%_
               ’%’そのもの

          _%x00_
               16進数のバイト値を出力

        • うしろのプレースホルダーのフォーマッティングに影響するプレース
          ホルダー:

          _%Cred_
               赤色に切り替える

          _%Cgreen_
               緑色に切り替える

          _%Cblue_
               青色に切り替える。

          _%Creset_
               色をリセットする

          _%C(…)_
               git-config(1) の "CONFIGURATION FILE" 節の Values で説明
               されている色の指定。 デフォルトでは、色はログ出力が有効に
               なっている場合にのみ表示されます（ ‘color.diff’ または ‘
               color.ui‘ または ‘--color`によって、ターミナルに行く場合
               は前者の `auto’ 設定を尊重します)。 ‘%C(auto,...)’ は、
               default の歴史的同義語として受け入れられます(例:
               ‘%C(auto,red)’)。 ‘%C(always,...)’ を指定すると、色が有効
               になっていない場合でも色が表示されます(この形式やgitが色
               付けする可能性のある他のすべてのものを含め、出力全体の色
               を有効にするために ‘--color = always’ の使用を検討してく
               ださい)。 ‘auto’ のみ(つまり、 ‘%C(auto)’ )は、色が再び切
               り替わるまで、続くプレースホルダーで自動色付けをオンにし
               ます。

          _%m_
               左(‘<’) または 右(‘>’) または 境界 (‘-’) の印

          _%w([<w>[,<i1>[,<i2>]]])_
               git-shortlog(1) の -w オプションのように、 行の折り返しを
               切り替えます。

          _%<(<N>[,trunc|ltrunc|mtrunc])_
               次のプレースホルダーに少なくともN列を使用させ、 必要に応
               じて右側にスペースを埋め込みます。オプションで、出力がN列
               より長い場合は、先頭(ltrunc)または中間(mtrunc)または末尾
               (trunc)で切り捨てます。注意: 切り捨ては、 N >= 2 でのみ正
               しく機能することに注意してください。

          _%<|(<N>)_
               次のプレースホルダーを少なくともN番目の列まで取得し、 必
               要に応じて右側にスペースを埋め込みます

          _%>(<N>)_, _%>|(<N>)_
               それぞれ _%<(<N>)_ 、 _%<|(<N>)_ に似ていますが、 左側に
               スペースが埋め込まれています

          _%>>(<N>)_, _%>>|(<N>)_
               _%>(<N>)_ 、 _%>|(<N>)_ とそれぞれ似ていますが、 次のプレ
               ースホルダーが指定されたよりも多くのスペースを取り、その
               左側にスペースがある場合は、それらのスペースを使用します
               。

          _%><(<N>)_, _%><|(<N>)_
               それぞれ _%<(<N>)_ 、 _%<|(<N>)_ に似ていますが、 両側に
               パディングがあります(つまり、テキストが中央に配置されます
               )

        • コミットから抽出された情報に展開するプレースホルダー:

          _%H_
               コミットハッシュ

          _%h_
               省略されたコミットハッシュ

          _%T_
               ツリーハッシュ

          _%t_
               省略されたツリーハッシュ

          _%P_
               親のハッシュ達

          _%p_
               省略された親のハッシュ達

          _%an_
               作者名

          _%aN_
               作者名( .mailmap に関しては、git-shortlog(1) または
               git-blame(1) を参照)

          _%ae_
               作者電子メールアドレス

          _%aE_
               作者電子メールアドレス(.mailmap に関しては
               git-shortlog(1) または git-blame(1) を参照)

          _%al_
               作者電子メールアドレスアカウント名(local-part)( _@_ の前
               の部分)

          _%aL_
               作者電子メールアドレスアカウント名(local-part)(_%al_ 参照
               ) .mailmap に関しては git-shortlog(1) または git-blame(1)
               参照)

          _%ad_
               作成日(フォーマットに関しては –date= オプション参照)

          _%aD_
               作成日 RFC2822形式

          _%ar_
               作成日 相対(relative)形式

          _%at_
               作成日 UNIXタイムスタンプ形式

          _%ai_
               作成日 ISO 8601風形式

          _%aI_
               作成日 厳密なISO 8601形式

          _%as_
               作成日 短い形式(‘YYYY-MM-DD’)

          _%ah_
               作成日 human形式( git-rev-list(1) の ‘--date=human’ オプ
               ションのようなかんじ)

          _%cn_
               コミッター名

          _%cN_
               コミッター名( .mailmap に関しては git-shortlog(1) または
               git-blame(1) 参照)

          _%ce_
               コミッター電子メールアドレス

          _%cE_
               コミッター電子メールアドレス(.mailmap に関しては
               git-shortlog(1) または git-blame(1) 参照)

          _%cl_
               コミッター電子メールアドレスアカウント名(local-part)( _@_
               の前の部分)

          _%cL_
               コミッター電子メールアドレスアカウント名(local-part)(
               _%cl_ 参照) .mailmap に関しては git-shortlog(1) または
               git-blame(1) 参照)

          _%cd_
               コミッター日付(フォーマットに関しては –date= オプション参
               照)

          _%cD_
               コミッター日付 RFC2822形式

          _%cr_
               コミッター日付 相対(relative)形式

          _%ct_
               コミッター日付 UNIXタイムスタンプ形式

          _%ci_
               コミッター日付 ISO 8601風形式

          _%cI_
               コミッター日付 厳密なISO 8601形式

          _%cs_
               コミッター日付 短い形式(‘YYYY-MM-DD’)

          _%ch_
               コミッター日付 human形式(git-rev-list(1) の
               ‘--date=human’ オプションのようなかんじ)

          _%d_
               ref名 git-log(1) の –decorate オプションみたいなの

          _%D_
               " (", ")" で囲ってないref名

          _%(describe[:options])_
               git-describe(1) のような人間が読める名前。 説明できないコ
               ミットの場合は空の文字列。 ‘describe’ 文字列の後には、コ
               ロンと0個以上のカンマ区切りオプションを続けることができま
               す。タグが同時に追加または削除されると、説明に一貫性がな
               くなる可能性があります。

                  • _match=<pattern>_: "refs/tags/" プレフィックスを除い
                    て、指定された ‘glob(7)’ パターンに一致するタグのみ
                    を考慮します。

                  • _exclude=<pattern>_: "refs/tags/" プレフィックスを除
                    いて、指定された ‘glob(7)’ パターンに一致するタグを
                    考慮しないでください。

          _%S_
               コミットに到達したコマンドラインで指定されたref名 ( ‘git
               log --source’ など)は、 ‘git log’ でのみ機能します

          _%e_
               エンコーディング

          _%s_
               件名(subject)

          _%f_
               ファイル名に適した、サニタイズされた件名

          _%b_
               本文(body)

          _%B_
               生本文(raw body)(ラップされてない件名と本文)

          _%GG_
               署名されたコミットの為のGPSからの生の検証メッセージ

          _%G?_
               良い(good)な(有効な)署名の場合は "G" 、 悪い(bad)な署名の
               場合は "B" 、有効性が不明(unknown)な良い署名の場合は "U"
               、期限切れ(eXpired)の良い署名の場合は "X" 、期限切れのキ
               ーで作成された良い署名の場合は "Y" 、取り消されたキーによ
               って作成された良い署名の場合は "R" 、署名を確認できない場
               合(キーの欠落など)は "E" 、署名がない場合は "N" を表示し
               ます。

          _%GS_
               署名されたコミットの署名者の名前を表示する

          _%GK_
               署名されたコミットに署名するために使用されるキーを表示す
               る

          _%GF_
               署名されたコミットに署名するために使用されるキーのフィン
               ガープリントを表示する

          _%GP_
               署名されたコミットに署名するためにサブキーが使用された 主
               キーのフィンガープリントを表示します

          _%GT_
               署名されたコミットに署名するために使用されるキーの信頼レ
               ベル(trust level)を表示します

          _%gD_
               reflogセレクター(例:‘refs/stash@{1}’ or ‘refs/stash@{2
               minutes ago}’) この形式は、 ‘-g’ オプションで説明されてい
               る規則に従います。 ‘@’ の前の部分は、コマンドラインで指定
               されたrefnameです(したがって、 ‘git log -g
               refs/heads/master’ は ‘refs/heads/master@{0}’ を生成しま
               す)。

          _%gd_
               短縮されたreflogセレクター。 ‘%gD’ と同じですが、 人間が
               読みやすいようにrefname部分が短縮されています(したがって
               、 ‘refs/heads/master’ は単に ‘master’ になります)。

          _%gn_
               reflog ID名

          _%gN_
               reflog ID名( .mailmap に関しては git-shortlog(1) または
               git-blame(1) 参照)

          _%ge_
               reflog ID 電子メールアドレス

          _%gE_
               reflog ID 電子メールアドレス( .mailmap に関しては
               git-shortlog(1) または git-blame(1) 参照)

          _%gs_
               reflog 件名

          _%(trailers[:options])_
               git-interpret-trailers(1) によって解釈されるようにボディ
               のトレーラーを表示します。 ‘trailers’ 文字列の後には、コ
               ロンと0個以上のカンマ区切りオプションを続けることができま
               す。いずれかのオプションが複数回提供された場合、それぞれ
               最後のものが優先されます。

               ブール値オプションは、オプションの値 ‘[=<BOOL>]’ を受け入
               れます。 値 ‘true’ 、‘false’ 、 ‘on’ 、‘off’ などはすべて
               受け入れられます。 git-config(1) の "EXAMPLES" の
               "boolean" サブセクションを参照してください。ブール値オプ
               ションが値なしで指定された場合、それは有効を指定した事に
               なります。

                  • _key=<K>_ は指定されたキーを持つトレーラーのみを表示
                    します。マッチングは大文字と小文字を区別せずに行われ
                    、末尾のコロンはオプションです。オプションが複数回指
                    定されている場合、いずれかのキーに一致するトレーラー
                    行が表示されます。このオプションは自動的に ‘only’ オ
                    プションを有効にして、トレーラーブロック内の非トレー
                    ラー行が非表示になるようにします。それが望ましくない
                    場合は、 ‘only=false’ で無効にすることができます。 た
                    とえば、 ‘%(trailers:key=Reviewed-by)’ は、キーが
                    ‘Reviewed-by‘のトレーラー行を表示します。

                  • _only[=<BOOL>]_ はトレーラーブロックに非トレーラー行
                    を含めるかどうかを選択します。

                  • _separator=<SEP>_ はトレーラー行の間に挿入される区切
                    り文字を指定します。このオプションが指定されていない
                    場合、各トレーラー行は改行文字で終了します。文字列
                    SEPには、上記のリテラルフォーマットコードが含まれる
                    場合があります。区切り文字としてコンマを使用するには
                    、次のオプションとして解析されないよう ‘%x2C’ を使用
                    する必要があります。 たとえば、
                    %(trailers:key=Ticket,separator=%x2C )‘ は、キーが
                    "Ticket" であるすべてのトレーラー行をカンマとスペー
                    スで区切って表示します。

                  • _unfold[=<BOOL>]_ は interpret-trailer の ‘--unfold’
                    オプションが指定されたかのように動作させます。たとえ
                    ば、 ‘%(trailers:only,unfold=true)’ が展開され、すべ
                    てのトレーラー行が表示されます。

                  • _keyonly[=<BOOL>]_ トレーラーのキー部分のみを表示。

                  • _valueonly[=<BOOL>]_ トレーラーの値部分のみ表示。

                  • _key_value_separator=<SEP>_ トレーラー行の間に挿入さ
                    れる区切り文字を指定します。このオプションが指定され
                    ていない場合、各トレーラーのキーと値のペアは ": " で
                    区切られます。 それ以外の場合は、上記の
                    _separator=<SEP>_ と同じセマンティクスを共有します。

     *Note*

     一部のプレースホルダーは、リビジョントラバーサルエンジンに指定され
     た他のオプションに依存する場合があります。 たとえば、 ‘%g*’ reflogオ
     プションは、reflogエントリをトラバースしない限り(たとえば、 ‘git
     log -g`によって)空の文字列を挿入します。コマンドラインで
     `--decorate’ がまだ指定されていない場合、 ‘%d’ と ‘%D’ プレースホル
     ダーは「短い」(short)装飾形式を使用します。

   プレースホルダーの _%_ の後に ‘+’ (プラス記号)を追加すると、プレース
ホルダーが空でない文字列に展開される場合に限り、展開の直前に改行が挿入さ
れます。

   プレースホルダーの _%_ の後に ‘-’ (マイナス記号)を追加すると、プレー
スホルダーが空の文字列に展開された場合にのみ、展開の直前の連続するすべて
の改行が削除されます。

   プレースホルダーの _%_ の後に ‘ ‘ (スペース)を追加すると、プレースホ
ルダーが空でない文字列に展開される場合に限り、展開の直前にスペースが挿入
されます。

   • _tformat:_

     _tformat:_ 形式は、 "separator" セマンティクスの代わりに
     "terminator" セマンティクスを提供することを除いて、 _format:_ とま
     ったく同じように機能します。 つまり、各コミットには、エントリ間に区
     切り文字を配置するのではなく、メッセージターミネータ文字(通常は改行
     )が追加されます。 これは、「1行」形式と同様に、1行形式の最終エント
     リが新しい行で適切に終了することを意味します。 例えば:

          $ git log -2 --pretty=format:%h 4da45bef \
            | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
          4da45be
          7134973 -- NO NEWLINE

          $ git log -2 --pretty=tformat:%h 4da45bef \
            | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
          4da45be
          7134973

     加えて、 ‘%’ が含まれている認識されない文字列は、その前に
     ‘tformat:’ があるかのように解釈(interpret)されます。 たとえば、以下
     の2つは同等です:

          $ git log -2 --pretty=tformat:%h 4da45bef
          $ git log -2 --pretty=%h 4da45bef


EXAMPLES
********

   • 現在のブランチから到達可能なコミットのリストを出力します。

          git rev-list HEAD

   • このブランチのコミットのリストを出力しますが、アップストリームブラ
     ンチのは表示しません。

          git rev-list @{upstream}..HEAD

   • 作者(author)とコミットメッセージを使用してコミットをフォーマットし
     ます(磁器コマンドのgit-log(1)も参照)。

          git rev-list --format=medium HEAD

   • コミットとその差分をフォーマットします(これを単一のプロセスで実行で
     きる磁器コマンドのgit-log(1)も参照してください)。

          git rev-list HEAD |
          git diff-tree --stdin --format=medium -p

   • 現在のブランチで、‘Documentation‘ディレクトリ内のファイルに関連
     (touch)したコミットのリストを出力します。

          git rev-list HEAD -- Documentation/

   • 任意のブランチ・タグ・他のrefから過去1年間に作者you@example.comが作
     成したコミットのリストを出力します (mailto:他のrefから過去1年間に作
     者you@example.comが作成したコミットのリストを出力します)。

          git rev-list --author=you@example.com --since=1.year.ago --all

   • 現在のブランチから到達可能なオブジェクトのリストを出力します(つまり
     、すべてのコミットと、それらに含まれるブロブとツリー)。

          git rev-list --objects HEAD

   • 到達可能なすべてのオブジェクトのディスクサイズ、reflogから到達可能
     なオブジェクト、およびパックされた合計サイズを比較します。これによ
     り、‘git repack -ad‘を実行すると(到達不能なオブジェクトを削除するこ
     とで)リポジトリのサイズが減少するかどうか、およびreflogの有効期限が
     切れる(expire)ことによってリポジトリのサイズ減少に役立つかどうかが
     わかります。

          # reachable objects
          git rev-list --disk-usage --objects --all
          # plus reflogs
          git rev-list --disk-usage --objects --all --reflog
          # total disk size used
          du -c .git/objects/pack/*.pack .git/objects/??/*
          # alternative to du: add up "size" and "size-pack" fields
          git count-objects -v

   • 現在のブランチで使用されているオブジェクトを除いて、各ブランチのデ
     ィスクサイズを報告します。 これにより、リポジトリサイズの肥大化の原
     因となっているイレギュラー値を見つけることができます(たとえば、誰か
     が誤って大きなビルドアーティファクトをコミットしたためとか)。

          git for-each-ref --format='%(refname)' |
          while read branch
          do
                  size=$(git rev-list --disk-usage --objects HEAD..$branch)
                  echo "$size $branch"
          done |
          sort -n

   • (別のグループを除いた)refsの単一のグループのブランチのディスク上の
     サイズを比較します。1つのリポジトリに複数のリモートからのオブジェク
     トを混在させる場合、これにより、リポジトリ内で、どのリモートがどれ
     だけ占めているかを示すことができます(‘origin‘のサイズを基準値として
     使用)。

          git rev-list --disk-usage --objects --remotes=$suspect --not --remotes=origin


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-rev-parse,  Up: Top

Name
****

git-rev-parse — パラメータを選択してもみもみします。


Synopsis
********

     git rev-parse [<options>] <args>…


DESCRIPTION
***********

多くのGit磁器コマンドは、内部で使用されベースとなる ‘git rev-list’ コマ
ンド用のフラグとパラメーターの組み合わせと、 ‘git rev-list’ の下流で使用
する他のコマンドのフラグとパラメーターの組み合わせを使用します。このコマ
ンドは、それらを識別するために使用されます。


OPTIONS
*******


Operation Modes
===============

これらの各オプションは、コマンドラインの最初にある必要があります。

‘--parseopt’
     オプション解析モードで ‘git rev-parse’ を使用します(以下の PARSEOPT
     セクションを参照)。

‘--sq-quote’
     シェルクォートモードで _git rev-parse_ を使用します(以下の SQ-QUOTE
     セクションを参照)。以下の ‘--sq’ オプションとは対照的に、このモード
     はクォートのみを実行します。コマンド入力に対して他に何も行われませ
     ん。


Options for –parseopt
=====================

‘--keep-dashdash’
     ‘--parseopt’ モードでのみ意味があります。 オプションパーサーに、最
     初に出会った ‘--’ をスキップするのではなく、エコー出力(echo out)す
     るように指示します。

‘--stop-at-non-option’
     ‘--parseopt’ モードでのみ意味があります。オプションパーサーを最初の
     非オプション引数で停止させます。これは、オプション自体を受け取るサ
     ブコマンドを解析するために使用できます。

‘--stuck-long’
     ‘--parseopt’ モードでのみ意味があります。可能な場合は長い形式でオプ
     ションを出力し、それらの引数を固定(stick)します。


Options for Filtering
=====================

‘--revs-only’
     ‘git rev-list’ コマンド用ではないフラグやパラメーターを出力しないで
     ください。

‘--no-revs’
     ‘git rev-list’ コマンド用のフラグとパラメーターを出力しないでくださ
     い。

‘--flags’
     非フラグパラメータを出力しないでください。

‘--no-flags’
     フラグパラメータを出力しないでください。


Options for Output
==================

‘--default <arg>’
     ユーザーが指定したパラメーターがない場合は、代わりに ‘<arg>’ を使用
     してください。

‘--prefix <arg>’
     ‘git rev-parse’ が作業ツリーの ‘<arg>’ サブディレクトリから呼び出さ
     れたかのように動作します。相対ファイル名は、接頭辞が ‘<arg>’ である
     かのように解決され、その形式で出力されます。

     これを使用して、引数をサブディレクトリで実行されるコマンドに変換し
     、リポジトリの最上位に移動した後も使用できるようにすることができま
     す。 例えば:

          prefix=$(git rev-parse --show-prefix)
          cd "$(git rev-parse --show-toplevel)"
          # rev-parse provides the -- needed for 'set'
          eval "set $(git rev-parse --sq --prefix "$prefix" -- "$@")"

‘--verify’
     正確に1つのパラメーターが提供されていること、およびそれがオブジェク
     ト・データベースへのアクセスに使用できる生の20バイトのSHA-1に変換で
     きることを検証します。もしそうなら、それを標準出力に出力します。そ
     れ以外の場合は、エラー出力になります。

     出力が実際にオブジェクトデータベース内のオブジェクトに名前を付けて
     いること、および/または必要な特定のタイプのオブジェクトとして使用で
     きることを確認したい場合は、パラメータに ‘^{type}’ 皮むき演算子
     (peeling operator)を追加できます。 たとえば、 ‘git rev-parse
     "$VAR^{commit}"’ は、 ‘$VAR’ がコミットっぽい既存のオブジェクト(つ
     まりコミット、またはコミットを指す注釈付きタグ)に名前を付けることを
     確認します。 ‘$VAR’ が任意のタイプの既存のオブジェクトに名前を付け
     るようにするには、 ‘git rev-parse "$VAR^{object}"’ を使用できます。

     注意: 信頼できないソースからの名前を検証(verify)する場合は、name引
     数が別のオプションと間違えられないように、 ‘--end-of-options’ の使
     用が賢明です。

‘-q’
‘--quiet’
     ‘--verify’ モードでのみ意味があります。最初の引数が有効なオブジェク
     ト名でない場合は、エラーメッセージを出力しないでください。代わりに
     、ゼロ以外のステータスで黙って終了(exit)します。有効なオブジェクト
     名のSHA-1は、成功するとstdoutに出力されます。

‘--sq’
     通常、出力はフラグとパラメータごとに1行になります。このオプションは
     、シェルによって消費されるための適切に引用された1行の出力を作成しま
     す。パラメータに空白と改行が含まれていると予想される場合に便利です
     (たとえば、 pickaxe ‘-S’ with _git diff-*_ )。 ‘--sq-quote’ オプシ
     ョンとは対照的に、コマンド入力は通常どおり解釈されます。

‘--short[=length]’
     ‘--verify’ と同じですが、オブジェクト名を少なくとも ‘length’ 文字の
     一意のプレフィックスに短縮します。最小の長さは4で、デフォルトは
     ‘core.abbrev’ 構成変数の有効な値です(git-config(1)を参照)。

‘--not’
     オブジェクト名を表示するときは、それらに ‘{caret}’ というプレフィッ
     クスを付け、逆に既に、 ‘{caret}’ プレフィックスを持っているオブジェ
     クト名からは ‘{caret}’ プレフィックスを削除します。

‘--abbrev-ref[=(strict|loose)]’
     オブジェクト名のあいまいでない短い名前。オプション
     core.warnAmbiguousRefs は、厳密な省略形モードを選択するために使用さ
     れます。

‘--symbolic’
     通常、オブジェクト名はSHA-1形式で出力されます(可能な場合は
     ‘{caret}’ プレフィックス付き)。このオプションを使用すると、入力され
     たオリジナルにできるだけ近い形式で出力されます。

‘--symbolic-full-name’
     これは ‘--symbolic’ に似ていますが、ref(つまり、ブランチ名とタグ名
     。または、残念ながら ‘master’ と名付けられたタグがあるとき ‘master’
     ブランチに名前を付けたい場合はより明確な ‘heads/master’ 形式である
     )ではない入力を省略し、完全なrefname(例: "refs/heads/master")として
     表示します。


Options for Objects
===================

‘--all’
     ‘refs/’ で見つかったすべての参照を表示します。

‘--branches[=pattern]’
‘--tags[=pattern]’
‘--remotes[=pattern]’
     すべてのブランチまたはタグまたはリモートトラッキングブランチをそれ
     ぞれ表示します(つまり、それぞれ ‘refs/heads’ または ‘refs/tags’ ま
     たは ‘refs/remotes’ で見つかったref)。

     ‘pattern’ が指定されている場合、指定されたシェルグロブに一致する
     refのみが表示されます。パターンにグロビング文字(‘?’ または ‘*’ また
     は ‘[’)が含まれていない場合は、 ‘/*’ を追加することでプレフィックス
     一致に変換されます。

‘--glob=pattern’
     シェルグロブパターン ‘pattern’ に一致するすべてのrefを表示します。
     パターンが ‘refs/’ で始まらない場合、自動的に先頭に追加されます。パ
     ターンにグロビング文字(‘?’ または ‘*’ または ‘[’)が含まれていない場
     合は、 ‘/*’ を追加することでプレフィックス一致に変換されます。

‘--exclude=<glob-pattern>’
     このオプションに続く ‘--all’ または ‘--branches’ または ‘--tags’ ま
     たは ‘--remotes’ または ‘--glob’ がそれぞれ考慮する
     _<glob-pattern>_ に一致するrefを含めないでください。このオプション
     を繰り返すと、次の ‘--all’ または ‘--branches’ または ‘--tags’ また
     は ‘--remotes’ または ‘--glob’ オプションまで除外パターンが蓄積され
     ます(他のオプションや引数は蓄積されたパターンをクリアしませんされま
     せん)。

     与えられたパターンは、それぞれ ‘--branches’ または ‘--tags’ または
     ‘--remotes’ に適用される場合、それぞれ ‘refs/heads’ 、 ‘refs/tags’
     、‘refs/remotes’ で始まるべきではありません。 ‘--glob’ または
     ‘--all’ に適用する場合は、 ‘refs/’ で始める必要があります。末尾の
     _/*_ を意図している場合は、それを明示的に指定する必要があります。

‘--disambiguate=<prefix>’
     名前が、指定されたプレフィックスで始まるすべてのオブジェクトを表示
     します。 <prefix> は、リポジトリ内のすべてのオブジェクトを誤ってリ
     ストしないように、少なくとも4桁の16進数である必要があります。


Options for Files
=================

‘--local-env-vars’
     リポジトリローカルな GIT_* 環境変数を一覧表示します(例: GIT_DIRまた
     はGIT_WORK_TREE、ただしGIT_EDITORは除く)。 変数が設定されている場合
     でも、変数の名前のみがリストされ、値はリストされません。

‘--path-format=(absolute|relative)’
     他の特定のオプションの動作を制御します。absolute(絶対)を指定すると
     、これらのオプションによって出力されるパスは絶対パスかつ正規化され
     ます。relative(相対)を指定すると、可能であれば、パスは現在の作業デ
     ィレクトリからの相対パスになります。デフォルトは対象の、他の特定の
     オプションそれぞれ固有です。

     このオプションは複数回指定でき、コマンドラインの最後か、またはこの
     オプションの次のインスタンスかの、いずれかに続くコマンドラインの引
     数にのみ影響します。

   以下のオプションは ‘--path-format’ による変更対象です:

‘--git-dir’
     定義されている場合は ‘$GIT_DIR’ を表示します。それ以外の場合は、
     ‘.git’ ディレクトリへのパスを表示します。表示されているパスは、相対
     の場合、現在の作業ディレクトリからの相対パスです。

     ‘$GIT_DIR’ が定義されておらず、現在のディレクトリがGitリポジトリま
     たは作業ツリーにあることが検出されない場合は、標準エラー出力にメッ
     セージを出力し、ゼロ以外のステータスで終了(exit)します。

‘--git-common-dir’
     定義されている場合は ‘$GIT_COMMON_DIR’ を表示し、そうでない場合は
     ‘$GIT_DIR’ を表示します。

‘--resolve-git-dir <path>’
     <path> が有効なリポジトリまたは有効なリポジトリを指す gitfile であ
     るかどうかを確認し、リポジトリの場所を出力します。 <path> が
     gitfile の場合、実際のリポジトリへの解決されたパス(resoluved path)が
     出力されます。

‘--git-path <path>’
     ‘$GIT_DIR/<path>’ を解決し、 $GIT_OBJECT_DIRECTORY、
     $GIT_INDEX_FILE…などの他のパス再配置変数を考慮に入れます。 たとえば
     、 $GIT_OBJECT_DIRECTORY が ‘/foo/bar’ に設定されている場合、 ‘git
     rev-parse --git-path objects/abc’ は ‘/foo/bar/abc’ を返します。

‘--show-toplevel’
     作業ツリーの最上位ディレクトリの(デフォルトでは絶対)パスを表示しま
     す。作業ツリーがない場合は、エラーを報告します。

‘--show-superproject-working-tree’
     現在のリポジトリをサブモジュールとして使用するスーパープロジェクト
     の作業ツリー(存在する場合)のルート(root)の絶対パスを表示します。現
     在のリポジトリがどのプロジェクトでもサブモジュールとして使用されて
     いない場合は、何も出力しません。

‘--shared-index-path’
     共有インデックスファイル(shared index file)へのパスを分割インデック
     スモード(split index mode)で表示します。分割インデックスモードで無
     い場合は空です。

   以下のオプションは、 ‘--path-format’ の影響を受けません:

‘--absolute-git-dir’
     ‘--git-dir’ に似ていますが、その出力は常に正規化された絶対パスです
     。

‘--is-inside-git-dir’
     現在の作業ディレクトリがリポジトリディレクトリ(訳注: 通常 ‘.git’ デ
     ィレクトリ)の下にある場合は ‘true’ 、それ以外の場合は ‘false’ と出
     力します。

‘--is-inside-work-tree’
     現在の作業ディレクトリがリポジトリの作業ツリー内にある場合は ‘true’
     、それ以外の場合は ‘false’ と出力します。(訳注 ‘.git’ ディレクトリ
     内では ‘false’)

‘--is-bare-repository’
     ベアリポジトリの場合は ‘true’ 、それ以外の場合は ‘false’ を出力。

‘--is-shallow-repository’
     shallowリポジトリの場合は ‘true’ 、そうでない場合は ‘false’ を出力
     します。

‘--show-cdup’
     コマンドがサブディレクトリから呼び出された場合は、現在のディレクト
     リを基準にした最上位ディレクトリのパスを表示します(通常は ‘../’ の
     シーケンスまたは空の文字列)。(訳注:作業ディレクトリ内じゃない時はエ
     ラー)

‘--show-prefix’
     コマンドがサブディレクトリから呼び出された場合は、最上位ディレクト
     リを基準にした現在のディレクトリのパスを表示します。(訳注:作業ディ
     レクトリ内じゃない時はエラー)

‘--show-object-format[=(storage|input|output)]’
     ‘.git’ ディレクトリ内でリポジトリのために使われるストレージ
     (storage)、または入力(input)、または出力(output)に使われるオブジェ
     クト形式(ハッシュアルゴリズム)を表示します。入力(input)の場合、複数
     のアルゴリズムがスペースで区切られて出力される場合があります。形式
     を指定しない場合、デフォルトは ‘storage’ です。


Other Options
=============

‘--since=datestring’
‘--after=datestring’
     日付文字列をパースし、 ‘git rev-list’ に対応する ‘-max-age=’ パラメ
     ーターを出力します。

‘--until=datestring’
‘--before=datestring’
     日付文字列をパースし、 ‘git rev-list’ に対応する ‘--min-age=’ パラ
     メーターを出力します。

<args>…
     パースされるフラグとパラメーター。


SPECIFYING REVISIONS
********************

リビジョンパラメータ ‘<rev>’ は必ずしもそうとは限りませんが、通常はコミ
ットオブジェクトに名前を付けます。これは、いわゆる「拡張SHA-1」構文を使
用します。 オブジェクト名を綴るにはさまざまな方法があります。このリスト
の終わり近くにリストされているものは、コミットに含まれているツリーとブロ
ブに名前を付けています。

     *Note*

     この文書は、gitで見られる「生の」構文を示しています。シェルおよびそ
     の他のUIでは、特殊文字を保護し、単語の分割を回避するために、追加の
     引用符が必要になる場合があります。

‘<sha1>’ 例: ‘dae86e1950b1277e545cee180551750029cfe735’, ‘dae86e’
     完全なSHA-1オブジェクト名(40バイトの16進文字列)、またはリポジトリ内
     で一意の先頭のsubstring。例えば
     dae86e1950b1277e545cee180551750029cfe735 と dae86e はどちらも、リポ
     ジトリ内にオブジェクト名が dae86e で始まる他のオブジェクトがない場
     合、全く同じコミットオブジェクトに名前を付けます。

‘<describeOutput>’ 例: ‘v1.7.4.2-679-g3bee7fb’
     ‘git describe’ からの出力。つまり、現在のコミットから最も近いタグ。
     オプションで、ダッシュ(-)とそのタグ以降現在のコミットが何番目になる
     かの数が続き、その後にダッシュ(-)、「g」、および省略されたオブジェ
     クト名が続きます。

‘<refname>’ 例: ‘master’, ‘heads/master’, ‘refs/heads/master’
     シンボリックref名。例えば ‘master’ は通常、 ‘refs/heads/master’ に
     よって参照されるコミットオブジェクトを意味します。 ‘heads/master’ と
     ‘tags/master’ の両方がある場合は、あなたは ‘heads/master’ と明示的
     に指定して、どちらを意味するかをGitに伝えることができます。 あいま
     いな場合、 ‘<refname>’ は、以下のルールに従い最初の一致を採用ことで
     明確になります:

       1. もし ‘$GIT_DIR/<refname>’ が存在するならば、それはあなたが指定
          した通りのものです(これは通常、‘HEAD’ と ‘FETCH_HEAD’ と
          ‘ORIG_HEAD’ と ‘MERGE_HEAD’ と ‘CHERRY_PICK_HEAD’ のみで役に立
          ちます)

       2. でなければ ‘refs/<refname>’ が存在すればそれを採用します。

       3. でなければ ‘refs/tags/<refname>’ が存在すればそれを採用します
          。

       4. でなければ ‘refs/heads/<refname>’ が存在すればそれを採用します
          。

       5. でなければ ‘refs/remotes/<refname>’ が存在すればそれを採用しま
          す。

       6. でなければ ‘refs/remotes/<refname>/HEAD’ が存在すればそれを採
          用します。

          ‘HEAD’ は、作業ツリーの変更に基づいたコミットに名前を付けます
          。 ‘FETCH_HEAD’ は、最後の ‘git fetch’ 呼び出しでリモートリポ
          ジトリからフェッチしたブランチを記録します。 ‘ORIG_HEAD’ は、
          ‘HEAD’ を大幅に移動するコマンドによって作成され、操作前の
          ‘HEAD’ の位置を記録します。これにより、ブランチの先端を実行前
          の状態に簡単に戻すことができます。 ‘MERGE_HEAD’ は、 ‘git
          merge`を実行するときにブランチにマージするコミットを記録します
          。 `CHERRY_PICK_HEAD’ は、 ‘git cherry-pick’ を実行したときに
          チェリーピックしているコミットを記録します。

          注意: 上記の ‘refs/*’ の場合、 ‘$GIT_DIR/refs’ ディレクトリま
          たは ‘$GIT_DIR/packed-refs’ ファイルのいずれかから発生する可能
          性があることに注意してください。ref名のエンコードは指定されて
          いませんが、一部の出力処理ではUTF-8でref名を想定する場合がある
          ため、UTF-8が推奨されます。

‘@’
     ‘@’ 単独では ‘HEAD’ のショートカットを意味します。

‘[<refname>]@{<date>}’ 例: ‘master@\{yesterday\}’, ‘HEAD@{5 minutes ago}’
     refの後に接尾辞 ‘@’ が続き、日付指定が中括弧のペアで囲まれています
     (例: ‘\{yesterday\}’ 、 ‘{1 month 2 weeks 3 days 1 hour 1 second
     ago}’ 、‘{1979-02-26 18:30:00}’ )。これは以前の時点でのrefの値を指
     定します。この接尾辞は、ref名の直後にのみ使用でき、refには既存のロ
     グ( ‘$GIT_DIR/logs/<ref>’ )が必要です。これは、特定の時点での *ロー
     カル* refの状態を検索することに注意してください。たとえば、先週ロー
     カルの ‘master’ ブランチに何があったか、です。特定の時間に行われた
     コミットを確認する場合は、 ‘--since’ と ‘--until’ を参照してくださ
     い。

‘<refname>@{<n>}’ 例: ‘master@\{1\}’
     refの後に接尾辞 ‘@’ が続き、数の指定が中括弧のペアで囲まれている場
     合(たとえば ‘\{1\}’, ‘\{15\}’)、そのrefのn個前の値を指定します。た
     とえば ‘master@\{1\}’ は ‘master’ の直前の値であり、 ‘master@\{5\}’
     は ‘master’ の5個前の値です。この接頭辞は、ref名の直後にのみ使用で
     き、refには既存のログ( ‘$GIT_DIR/logs/<refname>’ )が必要です。

‘@{<n>}’ 例: ‘@\{1\}’
     空のref部分で ‘@’ コンストラクトを使用して、現在のブランチの
     reflogエントリを取得できます。たとえば、あなたがブランチ ‘blabla’ を
     使用している場合、 ‘@\{1\}’ は ‘blabla@\{1\}’ と同じ意味になります
     。

‘@{-<n>}’ 例: ‘@{-1}’
     構成 ‘@{-<n>}’ は、現在のブランチ/コミットの前にチェックアウトされ
     た<n>番目のブランチ/コミットを意味します。

_[<branchname>]@{upstream}_ 例: _master@{upstream}_, _@{u}_
     ブランチ名の接尾辞 _@{upstream}_ (短縮形 _<branchname>@{u}_)は、
     branchnameで指定されたブランチの上部に構築するように設定されている
     ブランチを指します(‘branch.<name>.remote’ と ‘branch.<name>.merge’
     によって設定されます)。ブランチ名が欠落してい場合は、デフォルトで現
     在のブランチ名になります。これらの接尾辞は、大文字で綴る場合にも受
     け入れられ、大文字と小文字を問わず同じ意味になります。

_[<branchname>]@{push}_ 例: _master@{push}_, _@{push}_
     接尾辞 _@{push}_ は、 ‘branchname’ がチェックアウトされているときに
     ‘git push’ が実行された場合(またはブランチ名が指定されていない場合
     は現在の ‘HEAD’ )、「プッシュ先」のブランチを報告します。もちろん、
     プッシュ先はリモートリポジトリにあるため、そのブランチに対応するロ
     ーカルトラッキングブランチ(つまり、 ‘refs/remotes/’ 内の何か)を報告
     します。

     ここで、よりはっきり分かる例を以下に示します:

          $ git config push.default current
          $ git config remote.pushdefault myfork
          $ git switch -c mybranch origin/master

          $ git rev-parse --symbolic-full-name @{upstream}
          refs/remotes/origin/master

          $ git rev-parse --symbolic-full-name @{push}
          refs/remotes/myfork/mybranch

     注意: この例では、ある場所からプルして別の場所にプッシュする三角形
     のワークフローを設定していることに注意してください。非三角形のワー
     クフローでは、 _@{push}_ は _@{upstream}_ と同じであり、このような
     ことをする必要はありません。

     この接尾辞は大文字で綴る場合にも受け入れられ、大文字と小文字を問わ
     ず同じことを意味します。

_<rev>^[<n>]_ 例: _HEAD^, v1.5.1^0_
     リビジョンパラメータの接尾辞 _^_ は、そのコミットオブジェクトの最初
     の親を意味します。 _^<n>_ は <n> 番目の親を意味します(つまり、
     _<rev>^_ は _<rev>^1_ と同じです)。特別ルールとして、 _<rev>^0_ は
     コミット自体を意味し、 _<rev>_ がコミットオブジェクトを参照するタグ
     オブジェクトのオブジェクト名である場合に使用されます。

_<rev>~[<n>]_ 例: _HEAD~, master~3_
     リビジョンパラメータの接尾辞 _~_ は、そのコミットオブジェクトの最初
     の親を意味します。リビジョンパラメータの接尾辞 _~<n>_ は、最初の親
     のみに続く、指定されたコミットオブジェクトの <n> 世代の祖先であるコ
     ミットオブジェクトを意味します。つまり、 _<rev>~3_ は _<rev>^^^_ と
     同じで、するってぇと _<rev>^1^1^1_ と同じということです。この形式に
     ついては以下の図を参照してください。

_<rev>^{<type>}_ 例: _v0.99.8^{commit}_
     接尾辞 _^_ の後に中括弧のペアで囲まれたオブジェクトタイプ名が続くと
     いうことは、タイプ _<type>_ のオブジェクトが見つかるか、オブジェク
     トを逆参照できなくなるまで、 _<rev>_ でオブジェクトを再帰的に逆参照
     する(この場合は、いろいろ一旦飲み込んでしまったのを吐きもどすような
     感じだぬ)ことを意味します。 たとえば、 _<rev>_ がコミットっぽい場合
     、 _<rev>^{commit}_ は対応するコミットオブジェクトを記述します。同
     様に、 _<rev>_ がツリーっぽい場合、 _<rev>^{tree}_ は対応するツリー
     オブジェクトを記述します。 _<rev>^0_ は _<rev>^{commit}_ の省略形で
     す。

     _<rev>^{object}_ を使用すると、 _<rev>_ がタグである必要がなく、
     _<rev>_ を逆参照することなく、 _<rev>_ が存在するオブジェクトに名前
     を付けることができます。なお、タグはすでにオブジェクトであるため、
     オブジェクトに到達するために一度も逆参照する必要はありません。

     _<rev>^{tag}_ を使用して、 _<rev>_ が既存のタグオブジェクトを確実に
     識別することができます。

_<rev>^{}_ 例: _v0.99.8^{}_
     接尾辞 _^_ の後に空のブレースペアが続くということは、オブジェクトが
     タグである可能性があることを意味し、タグ以外のオブジェクトが見つか
     るまでタグを再帰的に逆参照します。

_<rev>^{/<text>}_ 例: _HEAD^{/fix nasty bug}_
     リビジョンパラメータの接尾辞 _^_ と、それに続くスラッシュで始まるテ
     キストを含む中括弧のペアは、以下の _:/fix nasty bug_ 構文と同じです
     が、 _^_ の前の _<rev>_ から到達可能な一致する最も若いコミットを返
     す点が異なります。

_:/<text>_ 例: _:/fix nasty bug_
     コロンに続いてスラッシュそしてそれに続くテキストは、コミットメッセ
     ージが指定された正規表現と一致するコミットを示します。この名前は、
     HEADを含む任意のrefから到達可能な最も若い一致するコミットを返します
     。正規表現は、コミットメッセージの任意の部分に一致できます。文字列
     で始まるメッセージを照合するには、たとえば、 _:/^foo_ とします。特
     別なシーケンス _:/!_ はマッチングの修飾子用に予約されています。ます
     。 _:/!-foo_ は一致の否定を実行し、 _:/!!foo_ はリテラル _!_ 後に
     _foo_ が続く文字列とマッチします。 _:/!_ で始まるその他のシーケンス
     は今のところ予約されています。指定されたテキストによっては、シェル
     により追加の引用符が必要になる場合があります。

_<rev>:<path>_ 例: _HEAD:README_, _master:./README_
     接尾辞 _:_ の後にパス(path)を続けると、コロンの前の部分によって名前
     が付けられたツリー風のオブジェクト内の、指定されたパスにあるブロブ
     またはツリーに名前が付けられます。 _./_ または _../_ で始まるパスは
     、現在の作業ディレクトリからの相対パスです。指定のパスは、作業ツリ
     ーのルートディレクトリからの相対パスに変換されます。これは、作業ツ
     リーと同じツリー構造を持つコミットまたはツリーからブロブまたはツリ
     ーをアドレス指定するのに最も役立ちます。

_:[<n>:]<path>_ 例: _:0:README_, _:README_
     コロンに、オプションでステージ番号(0〜3)とコロンが続き、それにパス
     が続くと、指定されたパスのインデックス内のブロブオブジェクトに名前
     を付けます。ステージ番号省略(およびそれに続くコロン)は、ステージ0エ
     ントリーを示します。マージ作業中、ステージ1は共通の祖先、ステージ
     2はターゲットブランチのバージョン(通常は現在のブランチ)、ステージ
     3はマージされるブランチのバージョンです。

   以下はJon Loeligerによる図解です。コミットノードBとCはどちらもコミッ
トノードAの親です。親コミットは左から右に順序付けられます。

     G   H   I   J
      \ /     \ /
       D   E   F
        \  |  / \
         \ | /   |
          \|/    |
           B     C
            \   /
             \ /
              A

     A =      = A^0
     B = A^   = A^1     = A~1
     C =      = A^2
     D = A^^  = A^1^1   = A~2
     E = B^2  = A^^2
     F = B^3  = A^^3
     G = A^^^ = A^1^1^1 = A~3
     H = D^2  = B^^2    = A^^^2  = A~2^2
     I = F^   = B^3^    = A^^3^
     J = F^2  = B^3^2   = A^^3^2


SPECIFYING RANGES
*****************

‘git log’ などの履歴トラバースコマンドは、単一のコミットだけでなく、一連
のコミットで動作します。

   これらのコマンドの場合、前のセクションで説明した表記法を使用して単一
のリビジョンを指定することは、指定のコミットから「到達可能」なコミットの
組を意味します。

   複数のリビジョンを指定するということは、指定のコミットのいずれかから
到達可能なコミットの組を意味します。

   コミットの到達可能な組は、コミット自体とその祖先チェーン内のコミット
です。

   以下に示すように、接続されたコミット(connected commits)の組(「リビジ
ョン範囲」(revision range)と呼ばれる)を指定するためのいくつかの表記法が
あります。


Commit Exclusions
=================

_^<rev>_ (カレット)記法
     とある到達可能なコミットをコミット達から除外するには、接頭辞 _^_ 表
     記を使用します。 例えば _^r1 r2_ は _r2_ から到達可能なコミットだけ
     ども、 _r1_ から到達可能なコミット(つまり _r1_ とその祖先)は除外す
     る事を意味します。


Dotted Range Notations
======================

_.._ (2ドット)範囲記法
     _^r1 r2_ 操作は頻繁に表示されるため、省略形があります。(上記の
     SPECIFYING REVISIONS で説明されている構文に従って名前が付けられてい
     る)2つのコミット _r1_ と _r2_ がある場合、あなたは _^r1 r2_ によっ
     てr1から到達可能なコミットを取り除き、r2から到達可能なコミットを要
     求できます。そしてこれは _r1..r2_ と書くことができます。

_..._ (3ドット)対称差記法
     似た表記 _r1...r2_ は _r1_ と _r2_ の対称差と呼ばれ、 _r1 r2 –not
     $(git merge-base –all r1 r2)_ として定義されます。 これは、 _r1_ (左
     側)または _r2_ (右側)のいずれかから到達可能であるが、両方からは到達
     できないコミットの組です。

   これらの2つの省略表記では、一方の端を省略して、デフォルトでHEADにする
ことができます。たとえば、 _origin.._ は _origin..HEAD_ の省略形であり、
「originブランチから分岐(fork)してから何をしましたか？」と尋ねます。 同
様に、 _..origin_ は _HEAD..origin_ の省略形であり、「私がそれらから分岐
してから、originは何をしましたか？」と尋ねます。 _.._ は _HEAD..HEAD_ を
意味することに注意してください。これは、HEADから到達可能および到達不能の
両方の空の範囲です。

   2つの異なる範囲を取るように特別に設計されたコマンド(たとえば、2つの範
囲を比較するための "git range-diff R1 R2" ) は存在しますが、それらは例外
です。特に明記されていない限り、一連のコミットを操作するすべての "git" コ
マンドは、単一のリビジョン範囲で機能します。言い換えると、2つの「2ドット
範囲表記」を隣り合わせに記述します。

     $ git log A..B C..D

   ほとんどのコマンドでは2つのリビジョン範囲を指定しません。代わりに、接
続された単一のコミットの組、つまりBまたはDのいずれかから到達可能であるが
、AまたはCのどちらからも到達可能でないコミットの組に名前を付けます。線形
履歴では、以下のようになります:

     ---A---B---o---o---C---D

   AとBはCから到達可能であるため、これら2つの2ドット範囲記法で指定された
リビジョン範囲は単一のコミットDです。


Other <rev>^ Parent Shorthand Notations
=======================================

コミットとその親コミットによって形成される組に名前を付けるために、マージ
コミットに特に役立つ他の3つの省略形が存在します。

   ‘r1{caret}@’ 表記は、 ‘r1’ のすべての親を意味します。

   ‘r1{caret}!’ 表記には コミット ‘r1’ が含まれますが、そのすべての親は
除外されます。この表記自体は、単一のコミット ‘r1’ を示します。

   ‘<rev>{caret}-[<n>]’ 表記には ‘<rev>’ が含まれますが、 <n> 番目の親
(つまり、 ‘<rev>{caret}<n>..<rev>’ の省略形)は除外されます。 <n> が指定
されていない場合は ‘<n>’ = 1 とみなします。これは通常、
‘<commit>{caret}-’ を渡すだけで、マージコミット ‘<commit>’(‘<commit>’ 自
体を含む)でマージされたブランチ内のすべてのコミットを取得できるマージコ
ミットに役立ちます。

   ‘<rev>{caret}<n>’ は単一のコミット親を指定することに関するものでした
が、これらの3つの表記はその親も考慮します。たとえば、
‘HEAD{caret}2{caret}@’ と言うことはできますが、 ‘HEAD{caret}@{caret}2’ と
言うことはできません。


Revision Range Summary
**********************

‘<rev>’
     <rev> から到達可能なコミット(つまり <rev> とその祖先)を含めます。

‘{caret}<rev>’
     <rev> から到達可能なコミット(つまり <rev> とその祖先)を除外します。

‘<rev1>..<rev2>’
     <rev2> から到達可能なコミットを含めますが、 <rev1> から到達可能なコ
     ミットは除外します。 <rev1> または <rev2> のいずれかを省略すると、
     それらはそれぞれデフォルトで ‘HEAD’ になります。

‘<rev1>\...<rev2>’
     <rev1> または <rev2> のいずれかから到達可能なコミットを含めますが、
     両方から到達可能なコミットは除外します。 <rev1> または <rev2> のい
     ずれかを省略すると、それらはそれぞれデフォルトで ‘HEAD’ になります
     。

‘<rev>{caret}@’ 例: ‘HEAD{caret}@’
     接尾辞 ‘{caret}’ の後にアットマーク(‘@’)を付けることは、 ‘<rev>’ の
     すべての親をリストすることと同じです(つまり、親から到達可能なものは
     すべて含まれますが、コミット自体は含まれません)。

‘<rev>{caret}!’ 例: ‘HEAD{caret}!’
     接尾辞 ‘{caret}’ の後に感嘆符(‘!’)を付けることは、コミット ‘<rev>’
     を指定し、そのすべての親の前に ‘{caret}’ を付けてそれら(およびその
     祖先)を除外することと同じです。

‘<rev>{caret}-<n>’ 例: ‘HEAD{caret}-, HEAD{caret}-2’
     ‘<rev>{caret}<n>..<rev>’ と同等であり、 ‘<n>’ が指定されていない場
     合は ‘<n>’ = 1 です。

   上記のLoeliger図解を使用したいくつかの例を以下に示します。表記の拡張
と選択は、それぞれ段階が分かるようステップを踏んで説明してあります:

        Args   Expanded arguments    Selected commits
        D                            G H D
        D F                          G H I J D F
        ^G D                         H D
        ^D B                         E I J F B
        ^D B C                       E I J F B C
        C                            I J F C
        B..C   = ^B C                C
        B...C  = B ^F C              G H D E B C
        B^-    = B^..B
               = ^B^1 B              E I J F B
        C^@    = C^1
               = F                   I J F
        B^@    = B^1 B^2 B^3
               = D E F               D G H E F I J
        C^!    = C ^C^@
               = C ^C^1
               = C ^F                C
        B^!    = B ^B^@
               = B ^B^1 ^B^2 ^B^3
               = B ^D ^E ^F          B
        F^! D  = F ^I ^J D           G H D F


PARSEOPT
********

‘--parseopt’ モードでは、 ‘git rev-parse’ は、オプションをもみもみして、
Cビルトインと同じ機能をシェルスクリプトにもたらすのに役立ちます。これは
、 ‘getopt(1)’ と少し似た、オプションの正規化機能です(たとえば、単一のス
イッチの集合を分割します)。

   パースおよび理解できるオプションの仕様を標準入力で受け取り、引数を正
規化されたものに置き換えるために、‘sh(1)’ ‘eval’ に適した文字列をエコー
します。エラーが発生した場合は、標準エラーストリームで使用状況を出力し、
コード129で終了します。

   注: 結果を ‘eval’ に渡すときは、必ず引用符で囲んでください。例につい
ては、以下を参照してください。


Input Format
============

‘git rev-parse --parseopt’ 入力形式は完全にテキストベースです。 ‘--’ の
みを含む行で区切られた2つの部分から構成されます。セパレーターの前の行
(1つ以上である必要があります)が使用例に使用されます。区切り文字の後の行
は、オプションを示しています。

   オプションの各行の形式はいかのとおりです:

     <opt-spec><flags>*<arg-hint>? SP+ help LF

‘<opt-spec>’
     この形式は、短いオプション1文字で、続いてコンマ(_,_)で区切り、そし
     て長いオプション名があります。少なくとも短長のうち1つは必要ですが、
     両方揃ってなくてもいいです。 ‘<flags>’ 文字を含めることはできません
     。 ‘h,help’ や ‘dry-run’ や ‘f’ は正しい ‘<opt-spec>’ の例です。

‘<flags>’
     ‘<flags>’ とは ‘*’ または ‘=’ または ‘?’ または ‘!’ です。

        • オプションが引数を取る場合は、 ‘=’ を使用します。

        • ‘?’ の使用は、オプションがオプションの引数を取ることを意味しま
          す。オプションの引数を明確に解析できるようにするには、おそらく
          ‘--stuck-long’ モードを使用する必要があります。

        • ‘*’ を使用すると、このオプションが ‘-h’ 引数に対して生成された
          使用法にリストされてはならないことを意味します。 gitcli(7) に
          記載されているように、 ‘--help-all’ には表示されます。

        • ‘！’ を使用すると、対応する否定されたlongオプションを使用可能
          にしません。

‘<arg-hint>’
     ‘<arg-hint>’ は、指定された場合、引数を取るオプションのヘルプ出力で
     引数の名前として使用されます。 ‘<arg-hint>’ は最初の空白で終了しま
     す。複数単語の引数ヒントで単語を区切りたい時は、ダッシュを使う通例
     です。

   スペースを取り除いた後の行の残りの部分は、オプションに関連付けられた
ヘルプとして使用されます。

   空白行は無視され、この仕様に一致しない行はオプショングループヘッダー
として使用されます(意図的にそのような行を作成するためにはスペースで行を
開始します)。


Example
=======

     OPTS_SPEC="\
     some-command [<options>] <args>...

     some-command does foo and bar!
     --
     h,help    show the help

     foo       some nifty option --foo
     bar=      some cool option --bar with an argument
     baz=arg   another cool option --baz with a named argument
     qux?path  qux may take a path argument but has meaning by itself

       An option group Header
     C?        option C with an optional argument"

     eval "$(echo "$OPTS_SPEC" | git rev-parse --parseopt -- "$@" || echo exit $?)"


Usage text
==========

上記の例で ‘"$@"’ が ‘-h’ または ‘--help’ の場合、以下の使用法テキストが
表示されます:

     usage: some-command [<options>] <args>...

         some-command does foo and bar!

         -h, --help            show the help
         --foo                 some nifty option --foo
         --bar ...             some cool option --bar with an argument
         --baz <arg>           another cool option --baz with a named argument
         --qux[=<path>]        qux may take a path argument but has meaning by itself

     An option group Header
         -C[...]               option C with an optional argument


SQ-QUOTE
********

‘--sq-quote’ モードでは、 ‘git rev-parse’ は、 ‘sh(1)’ ‘eval’ に適した
1行を標準出力にエコーします。この行は、 ‘--sq-quote’ に続く引数を正規化
することによって作成されます。引数をクォートする以外に何も行いません。

   出力がシェル引用符で囲まれる前に、コマンド入力を ‘git rev-parse’ によ
って通常どおりに解釈するには ‘--sq’ オプションを参照してください。


Example
=======

     $ cat >your-git-script.sh <<\EOF
     #!/bin/sh
     args=$(git rev-parse --sq-quote "$@")   # quote user-supplied arguments
     command="git frotz -n24 $args"          # and use it inside a handcrafted
                                             # command line
     eval "$command"
     EOF

     $ sh your-git-script.sh "a b'c"


EXAMPLES
********

   • 現在のコミットのオブジェクト名を出力します:

          $ git rev-parse --verify HEAD

   • $REV シェル変数のリビジョンからコミットオブジェクト名を出力します:

          $ git rev-parse --verify --end-of-options $REV^{commit}

     $REV が空であるか、有効なリビジョンでない場合エラーになります。

   • 上記と同様ですが…:

          $ git rev-parse --default master --verify --end-of-options $REV

     これは、 $REV が空の場合、masterからのコミットオブジェクト名が出力
     されます。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-revert,  Up: Top

Name
****

git-revert — いくつかの既存のコミットを元に戻します


Synopsis
********

     git revert [–[no-]edit] [-n] [-m parent-number] [-s] [-S[<keyid>]] <commit>…
     git revert (–continue | –skip | –abort | –quit)


DESCRIPTION
***********

1つ以上の既存のコミットが与えられた場合、関連するパッチによって導入され
た変更を元に戻し、それらを記録するいくつかの新しいコミットを記録します。
これには、作業ツリーがクリーンである必要があります(HEADコミットからの変
更はありません)。

   注意: ‘git revert’ は、いくつかの新しいコミットを記録して、以前のコミ
ットの効果を元に戻すために使用されます(多くの場合、障害のあるコミットの
み)。あなたが作業ディレクトリ内のコミットされていないすべての変更を破棄
したい場合は、 git-reset(1) 、特に ‘--hard’ オプションについて参照すべき
です。あなたが別のコミットから特定のファイルを抽出したい場合は、
git-restore(1) 、特に ‘--source’ オプションについて参照すべきです。これ
らは作業ディレクトリ内のコミットされていない変更を破棄するため、これらの
選択肢には注意してください。

   3つのコマンドの違いについては、 git(1) の「Reset, restore and revert」
を参照してください。


OPTIONS
*******

<commit>…
     元に戻すためのコミットを指定。コミット名を綴る方法のより完全なリス
     トについては、 gitrevisions(7) を参照してください。コミットのセット
     を指定することもできますが、デフォルトではトラバーサルは実行されま
     せん。 git-rev-list(1) と、その ‘--no-walk’ オプションを参照してく
     ださい。

‘-e’
‘--edit’
     このオプションを使用すると、 ‘git revert’ は「戻し」(the revert)を
     コミットする前にあなたにコミットメッセージを編集させます。これは、
     端末からコマンドを実行する場合のデフォルトです。

‘-m parent-number’
‘--mainline parent-number’
     通常、マージのどの筋を本線(mainline)と見なすかわからないため、マー
     ジを元に戻すことはできません。 このオプションは、本線とする親番号
     (1から始まる)を指定し、指定された親を基準にして変更を元に戻すことが
     できます。

     マージコミットを戻す(revert)と、そのマージによってもたらされたツリ
     ーの変更が不要になることが宣言されます。その結果、その後に行われる
     マージでは、先に戻されたマージの先祖ではないコミットによってもたら
     されたツリーの変更のみが適用されます。これはあなたの望むところかも
     しれませんし、そうでないかもしれません。

     詳細については、 revert-a-faulty-merge How-To
     (howto/revert-a-faulty-merge.html) (誤ったマージの取り消し方法)を参
     照してください。

‘--no-edit’
     このオプションを使うと、 _git revert_ はコミットメッセージエディタ
     を起動しません。

‘--cleanup=<mode>’
     このオプションは、コミットメッセージがコミット機構に渡される前にど
     のようにクリーンアップされるかを決定します。詳細については、
     git-commit(1) を参照してください。 特に、競合が発生した場合、
     <mode> に値 ‘scissors’ が指定されていると、渡される前に、MERGE_MSG
     に切り取り線が追加されます。

‘-n’
‘--no-commit’
     通常、コマンドは、どのコミットが元に戻されたかを示すコミットログメ
     ッセージを含むいくつかのコミットを自動的に作成します。このフラグは
     、名前付きコミットを作業ツリーとインデックスに戻すために必要な変更
     を適用(apply)しますが、コミットは行いません。さらに、このオプション
     を使用する場合、インデックスはHEADコミットと一致する必要はありませ
     ん。 revertは、あなたのインデックスの開始状態に対して行われます。

     これは、複数のコミットの効果を連続してインデックスにrevertする場合
     に役立ちます。

‘-S[<keyid>]’
‘--gpg-sign[=<keyid>]’
‘--no-gpg-sign’
     GPG署名コミット。 ‘keyid’ 引数はオプションであり、デフォルトはコミ
     ッターIDになります。指定する場合は、スペースなしでオプションに指定
     する必要があります。 ‘--no-gpg-sign’ は、 ‘commit.gpgSign’ 構成変数
     と、 それより前で指定された ‘--gpg-sign’ の両方を打ち消すのに役立ち
     ます。

‘-s’
‘--signoff’
     コミットメッセージの最後に ‘Signed-off-by’ トレーラーを追加します。
     詳細については、 git-commit(1) の signoff オプションを参照してくだ
     さい。

‘--strategy=<strategy>’
     指定されたマージ戦略を使用します。指定できるのは一度だけです。詳細
     については、 git-merge(1) の「MERGE STRATEGIES」セクションを参照し
     てください。

‘-X<option>’
‘--strategy-option=<option>’
     マージ戦略固有のオプションをマージ戦略に渡します。詳細については、
     git-merge(1) を参照してください。

‘--rerere-autoupdate’
‘--no-rerere-autoupdate’
     可能であれば、rerereメカニズムの自動競合解決の結果でインデックスを
     更新できるようにします。


SEQUENCER SUBCOMMANDS
*********************

‘--continue’
     ‘.git/sequencer’ の情報を使用して、進行中の操作の続行を行います。失
     敗したcherry-pickまたはrevertの競合を解決した後、続行するために使用
     できます。

‘--skip’
     現在のコミットをスキップして、残りのシーケンスを続行します。

‘--quit’
     進行中の今回の操作を忘れてください。チェリーピックまたはrevertに失
     敗した後、シーケンサーの状態をクリアするために使用できます。

‘--abort’
     操作をキャンセルして、シーケンス操作前の状態に戻ります。


EXAMPLES
********

‘git revert HEAD~3’
     HEADの最後から4番目のコミットで指定された変更を元に戻し、元に戻した
     変更を使用して新しいコミットを作成します。

‘git revert -n master~5..master~2’
     コミットによって行われた変更を、masterの最後から5番目のコミット(そ
     れ自身を含む)から、masterの最後から3番目のコミット(それ自身を含む
     )に戻しますが、元に戻した変更でコミットを作成しないでください。元に
     戻すと、作業ツリーとインデックスのみが変更されます。


SEE ALSO
********

git-cherry-pick(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-rm,  Up: Top

Name
****

git-rm — Remove files from the working tree and from the index


Synopsis
********

     git rm [-f | –force] [-n] [-r] [–cached] [–ignore-unmatch]
               [–quiet] [–pathspec-from-file=<file> [–pathspec-file-nul]]
               [–] [<pathspec>…]


DESCRIPTION
***********

Remove files matching pathspec from the index, or from the working tree
and the index.  ‘git rm’ will not remove a file from just your working
directory.  (There is no option to remove a file only from the working
tree and yet keep it in the index; use ‘/bin/rm’ if you want to do
that.)  The files being removed have to be identical to the tip of the
branch, and no updates to their contents can be staged in the index,
though that default behavior can be overridden with the ‘-f’ option.
When ‘--cached’ is given, the staged content has to match either the tip
of the branch or the file on disk, allowing the file to be removed from
just the index.  When sparse-checkouts are in use (see
git-sparse-checkout(1)), ‘git rm’ will only remove paths within the
sparse-checkout patterns.


OPTIONS
*******

<pathspec>…
     Files to remove.  A leading directory name (e.g.  ‘dir’ to remove
     ‘dir/file1’ and ‘dir/file2’) can be given to remove all files in
     the directory, and recursively all sub-directories, but this
     requires the ‘-r’ option to be explicitly given.

     The command removes only the paths that are known to Git.

     File globbing matches across directory boundaries.  Thus, given two
     directories ‘d’ and ‘d2’, there is a difference between using ‘git
     rm 'd*'’ and ‘git rm 'd/*'’, as the former will also remove all of
     directory ‘d2’.

     For more details, see the _pathspec_ entry in gitglossary(7).

‘-f’
‘--force’
     Override the up-to-date check.

‘-n’
‘--dry-run’
     Don’t actually remove any file(s).  Instead, just show if they
     exist in the index and would otherwise be removed by the command.

‘-r’
     Allow recursive removal when a leading directory name is given.

–
     This option can be used to separate command-line options from the
     list of files, (useful when filenames might be mistaken for
     command-line options).

‘--cached’
     Use this option to unstage and remove paths only from the index.
     Working tree files, whether modified or not, will be left alone.

‘--ignore-unmatch’
     Exit with a zero status even if no files matched.

‘-q’
‘--quiet’
     ‘git rm’ normally outputs one line (in the form of an ‘rm’ command)
     for each file removed.  This option suppresses that output.

‘--pathspec-from-file=<file>’
     Pathspec is passed in ‘<file>’ instead of commandline args.  If
     ‘<file>’ is exactly ‘-’ then standard input is used.  Pathspec
     elements are separated by LF or CR/LF. Pathspec elements can be
     quoted as explained for the configuration variable ‘core.quotePath’
     (see git-config(1)).  See also ‘--pathspec-file-nul’ and global
     ‘--literal-pathspecs’.

‘--pathspec-file-nul’
     Only meaningful with ‘--pathspec-from-file’.  Pathspec elements are
     separated with NUL character and all other characters are taken
     literally (including newlines and quotes).


REMOVING FILES THAT HAVE DISAPPEARED FROM THE FILESYSTEM
********************************************************

There is no option for ‘git rm’ to remove from the index only the paths
that have disappeared from the filesystem.  However, depending on the
use case, there are several ways that can be done.


Using “git commit -a”
=====================

If you intend that your next commit should record all modifications of
tracked files in the working tree and record all removals of files that
have been removed from the working tree with ‘rm’ (as opposed to ‘git
rm’), use ‘git commit -a’, as it will automatically notice and record
all removals.  You can also have a similar effect without committing by
using ‘git add -u’.


Using “git add -A”
==================

When accepting a new code drop for a vendor branch, you probably want to
record both the removal of paths and additions of new paths as well as
modifications of existing paths.

   Typically you would first remove all tracked files from the working
tree using this command:

     git ls-files -z | xargs -0 rm -f

   and then untar the new code in the working tree.  Alternately you
could _rsync_ the changes into the working tree.

   After that, the easiest way to record all removals, additions, and
modifications in the working tree is:

     git add -A

   See git-add(1).


Other ways
==========

If all you really want to do is to remove from the index the files that
are no longer present in the working tree (perhaps because your working
tree is dirty so that you cannot use ‘git commit -a’), use the following
command:

     git diff --name-only --diff-filter=D -z | xargs -0 git rm --cached


SUBMODULES
**********

Only submodules using a gitfile (which means they were cloned with a Git
version 1.7.8 or newer) will be removed from the work tree, as their
repository lives inside the .git directory of the superproject.  If a
submodule (or one of those nested inside it) still uses a .git
directory, ‘git rm’ will move the submodules git directory into the
superprojects git directory to protect the submodule’s history.  If it
exists the submodule.<name> section in the gitmodules(5) file will also
be removed and that file will be staged (unless –cached or -n are used).

   A submodule is considered up to date when the HEAD is the same as
recorded in the index, no tracked files are modified and no untracked
files that aren’t ignored are present in the submodules work tree.
Ignored files are deemed expendable and won’t stop a submodule’s work
tree from being removed.

   If you only want to remove the local checkout of a submodule from
your work tree without committing the removal, use git-submodule(1)
‘deinit’ instead.  Also see gitsubmodules(7) for details on submodule
removal.


EXAMPLES
********

‘git rm Documentation/\*.txt’
     Removes all ‘*.txt’ files from the index that are under the
     ‘Documentation’ directory and any of its subdirectories.

     Note that the asterisk ‘*’ is quoted from the shell in this
     example; this lets Git, and not the shell, expand the pathnames of
     files and subdirectories under the ‘Documentation/’ directory.

‘git rm -f git-*.sh’
     Because this example lets the shell expand the asterisk (i.e.  you
     are listing the files explicitly), it does not remove
     ‘subdir/git-foo.sh’.


BUGS
****

Each time a superproject update removes a populated submodule (e.g.
when switching between commits before and after the removal) a stale
submodule checkout will remain in the old location.  Removing the old
directory is only safe when it uses a gitfile, as otherwise the history
of the submodule will be deleted too.  This step will be obsolete when
recursive submodule update has been implemented.


SEE ALSO
********

git-add(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-send-email,  Up: Top

Name
****

git-send-email — Send a collection of patches as emails


Synopsis
********

     git send-email [<options>] <file|directory|rev-list options>…
     git send-email –dump-aliases


DESCRIPTION
***********

Takes the patches given on the command line and emails them out.
Patches can be specified as files, directories (which will send all
files in the directory), or directly as a revision list.  In the last
case, any format accepted by git-format-patch(1) can be passed to git
send-email.

   The header of the email is configurable via command-line options.  If
not specified on the command line, the user will be prompted with a
ReadLine enabled interface to provide the necessary information.

   There are two formats accepted for patch files:

  1. mbox format files

     This is what git-format-patch(1) generates.  Most headers and MIME
     formatting are ignored.

  2. The original format used by Greg Kroah-Hartman’s
     _send_lots_of_email.pl_ script

     This format expects the first line of the file to contain the "Cc:"
     value and the "Subject:" of the message as the second line.


OPTIONS
*******


Composing
=========

‘--annotate’
     Review and edit each patch you’re about to send.  Default is the
     value of ‘sendemail.annotate’.  See the CONFIGURATION section for
     ‘sendemail.multiEdit’.

‘--bcc=<address>,...’
     Specify a "Bcc:" value for each email.  Default is the value of
     ‘sendemail.bcc’.

     This option may be specified multiple times.

‘--cc=<address>,...’
     Specify a starting "Cc:" value for each email.  Default is the
     value of ‘sendemail.cc’.

     This option may be specified multiple times.

‘--compose’
     Invoke a text editor (see GIT_EDITOR in git-var(1)) to edit an
     introductory message for the patch series.

     When ‘--compose’ is used, git send-email will use the From,
     Subject, and In-Reply-To headers specified in the message.  If the
     body of the message (what you type after the headers and a blank
     line) only contains blank (or Git: prefixed) lines, the summary
     won’t be sent, but From, Subject, and In-Reply-To headers will be
     used unless they are removed.

     Missing From or In-Reply-To headers will be prompted for.

     See the CONFIGURATION section for ‘sendemail.multiEdit’.

‘--from=<address>’
     Specify the sender of the emails.  If not specified on the command
     line, the value of the ‘sendemail.from’ configuration option is
     used.  If neither the command-line option nor ‘sendemail.from’ are
     set, then the user will be prompted for the value.  The default for
     the prompt will be the value of GIT_AUTHOR_IDENT, or
     GIT_COMMITTER_IDENT if that is not set, as returned by "git var
     -l".

‘--reply-to=<address>’
     Specify the address where replies from recipients should go to.
     Use this if replies to messages should go to another address than
     what is specified with the –from parameter.

‘--in-reply-to=<identifier>’
     Make the first mail (or all the mails with ‘--no-thread’) appear as
     a reply to the given Message-Id, which avoids breaking threads to
     provide a new patch series.  The second and subsequent emails will
     be sent as replies according to the ‘--[no-]chain-reply-to’
     setting.

     So for example when ‘--thread’ and ‘--no-chain-reply-to’ are
     specified, the second and subsequent patches will be replies to the
     first one like in the illustration below where ‘[PATCH v2 0/3]’ is
     in reply to ‘[PATCH 0/2]’:

          [PATCH 0/2] Here is what I did...
            [PATCH 1/2] Clean up and tests
            [PATCH 2/2] Implementation
            [PATCH v2 0/3] Here is a reroll
              [PATCH v2 1/3] Clean up
              [PATCH v2 2/3] New tests
              [PATCH v2 3/3] Implementation

     Only necessary if –compose is also set.  If –compose is not set,
     this will be prompted for.

‘--subject=<string>’
     Specify the initial subject of the email thread.  Only necessary if
     –compose is also set.  If –compose is not set, this will be
     prompted for.

‘--to=<address>,...’
     Specify the primary recipient of the emails generated.  Generally,
     this will be the upstream maintainer of the project involved.
     Default is the value of the ‘sendemail.to’ configuration value; if
     that is unspecified, and –to-cmd is not specified, this will be
     prompted for.

     This option may be specified multiple times.

‘--8bit-encoding=<encoding>’
     When encountering a non-ASCII message or subject that does not
     declare its encoding, add headers/quoting to indicate it is encoded
     in <encoding>.  Default is the value of the
     _sendemail.assume8bitEncoding_; if that is unspecified, this will
     be prompted for if any non-ASCII files are encountered.

     Note that no attempts whatsoever are made to validate the encoding.

‘--compose-encoding=<encoding>’
     Specify encoding of compose message.  Default is the value of the
     _sendemail.composeencoding_; if that is unspecified, UTF-8 is
     assumed.

‘--transfer-encoding=(7bit|8bit|quoted-printable|base64|auto)’
     Specify the transfer encoding to be used to send the message over
     SMTP. 7bit will fail upon encountering a non-ASCII message.
     quoted-printable can be useful when the repository contains files
     that contain carriage returns, but makes the raw patch email file
     (as saved from a MUA) much harder to inspect manually.  base64 is
     even more fool proof, but also even more opaque.  auto will use
     8bit when possible, and quoted-printable otherwise.

     Default is the value of the ‘sendemail.transferEncoding’
     configuration value; if that is unspecified, default to ‘auto’.

‘--xmailer’
‘--no-xmailer’
     Add (or prevent adding) the "X-Mailer:" header.  By default, the
     header is added, but it can be turned off by setting the
     ‘sendemail.xmailer’ configuration variable to ‘false’.


Sending
=======

‘--envelope-sender=<address>’
     Specify the envelope sender used to send the emails.  This is
     useful if your default address is not the address that is
     subscribed to a list.  In order to use the _From_ address, set the
     value to "auto".  If you use the sendmail binary, you must have
     suitable privileges for the -f parameter.  Default is the value of
     the ‘sendemail.envelopeSender’ configuration variable; if that is
     unspecified, choosing the envelope sender is left to your MTA.

‘--sendmail-cmd=<command>’
     Specify a command to run to send the email.  The command should be
     sendmail-like; specifically, it must support the ‘-i’ option.  The
     command will be executed in the shell if necessary.  Default is the
     value of ‘sendemail.sendmailcmd’.  If unspecified, and if
     –smtp-server is also unspecified, git-send-email will search for
     ‘sendmail’ in ‘/usr/sbin’, ‘/usr/lib’ and $PATH.

‘--smtp-encryption=<encryption>’
     Specify the encryption to use, either _ssl_ or _tls_.  Any other
     value reverts to plain SMTP. Default is the value of
     ‘sendemail.smtpEncryption’.

‘--smtp-domain=<FQDN>’
     Specifies the Fully Qualified Domain Name (FQDN) used in the
     HELO/EHLO command to the SMTP server.  Some servers require the
     FQDN to match your IP address.  If not set, git send-email attempts
     to determine your FQDN automatically.  Default is the value of
     ‘sendemail.smtpDomain’.

‘--smtp-auth=<mechanisms>’
     Whitespace-separated list of allowed SMTP-AUTH mechanisms.  This
     setting forces using only the listed mechanisms.  Example:

          $ git send-email --smtp-auth="PLAIN LOGIN GSSAPI" ...

     If at least one of the specified mechanisms matches the ones
     advertised by the SMTP server and if it is supported by the
     utilized SASL library, the mechanism is used for authentication.
     If neither _sendemail.smtpAuth_ nor ‘--smtp-auth’ is specified, all
     mechanisms supported by the SASL library can be used.  The special
     value _none_ maybe specified to completely disable authentication
     independently of ‘--smtp-user’

‘--smtp-pass[=<password>]’
     Password for SMTP-AUTH. The argument is optional: If no argument is
     specified, then the empty string is used as the password.  Default
     is the value of ‘sendemail.smtpPass’, however ‘--smtp-pass’ always
     overrides this value.

     Furthermore, passwords need not be specified in configuration files
     or on the command line.  If a username has been specified (with
     ‘--smtp-user’ or a ‘sendemail.smtpUser’), but no password has been
     specified (with ‘--smtp-pass’ or ‘sendemail.smtpPass’), then a
     password is obtained using _git-credential_.

‘--no-smtp-auth’
     Disable SMTP authentication.  Short hand for ‘--smtp-auth=none’

‘--smtp-server=<host>’
     If set, specifies the outgoing SMTP server to use (e.g.
     ‘smtp.example.com’ or a raw IP address).  If unspecified, and if
     ‘--sendmail-cmd’ is also unspecified, the default is to search for
     ‘sendmail’ in ‘/usr/sbin’, ‘/usr/lib’ and $PATH if such a program
     is available, falling back to ‘localhost’ otherwise.

     For backward compatibility, this option can also specify a full
     pathname of a sendmail-like program instead; the program must
     support the ‘-i’ option.  This method does not support passing
     arguments or using plain command names.  For those use cases,
     consider using ‘--sendmail-cmd’ instead.

‘--smtp-server-port=<port>’
     Specifies a port different from the default port (SMTP servers
     typically listen to smtp port 25, but may also listen to submission
     port 587, or the common SSL smtp port 465); symbolic port names
     (e.g.  "submission" instead of 587) are also accepted.  The port
     can also be set with the ‘sendemail.smtpServerPort’ configuration
     variable.

‘--smtp-server-option=<option>’
     If set, specifies the outgoing SMTP server option to use.  Default
     value can be specified by the ‘sendemail.smtpServerOption’
     configuration option.

     The –smtp-server-option option must be repeated for each option you
     want to pass to the server.  Likewise, different lines in the
     configuration files must be used for each option.

‘--smtp-ssl’
     Legacy alias for _–smtp-encryption ssl_.

‘--smtp-ssl-cert-path’
     Path to a store of trusted CA certificates for SMTP SSL/TLS
     certificate validation (either a directory that has been processed
     by _c_rehash_, or a single file containing one or more PEM format
     certificates concatenated together: see verify(1) -CAfile and
     -CApath for more information on these).  Set it to an empty string
     to disable certificate verification.  Defaults to the value of the
     ‘sendemail.smtpsslcertpath’ configuration variable, if set, or the
     backing SSL library’s compiled-in default otherwise (which should
     be the best choice on most platforms).

‘--smtp-user=<user>’
     Username for SMTP-AUTH. Default is the value of
     ‘sendemail.smtpUser’; if a username is not specified (with
     ‘--smtp-user’ or ‘sendemail.smtpUser’), then authentication is not
     attempted.

‘--smtp-debug=0|1’
     Enable (1) or disable (0) debug output.  If enabled, SMTP commands
     and replies will be printed.  Useful to debug TLS connection and
     authentication problems.

‘--batch-size=<num>’
     Some email servers (e.g.  smtp.163.com) limit the number emails to
     be sent per session (connection) and this will lead to a failure
     when sending many messages.  With this option, send-email will
     disconnect after sending $<num> messages and wait for a few seconds
     (see –relogin-delay) and reconnect, to work around such a limit.
     You may want to use some form of credential helper to avoid having
     to retype your password every time this happens.  Defaults to the
     ‘sendemail.smtpBatchSize’ configuration variable.

‘--relogin-delay=<int>’
     Waiting $<int> seconds before reconnecting to SMTP server.  Used
     together with –batch-size option.  Defaults to the
     ‘sendemail.smtpReloginDelay’ configuration variable.


Automating
==========

‘--no-[to|cc|bcc]’
     Clears any list of "To:", "Cc:", "Bcc:" addresses previously set
     via config.

‘--no-identity’
     Clears the previously read value of ‘sendemail.identity’ set via
     config, if any.

‘--to-cmd=<command>’
     Specify a command to execute once per patch file which should
     generate patch file specific "To:" entries.  Output of this command
     must be single email address per line.  Default is the value of
     _sendemail.tocmd_ configuration value.

‘--cc-cmd=<command>’
     Specify a command to execute once per patch file which should
     generate patch file specific "Cc:" entries.  Output of this command
     must be single email address per line.  Default is the value of
     ‘sendemail.ccCmd’ configuration value.

‘--[no-]chain-reply-to’
     If this is set, each email will be sent as a reply to the previous
     email sent.  If disabled with "–no-chain-reply-to", all emails
     after the first will be sent as replies to the first email sent.
     When using this, it is recommended that the first file given be an
     overview of the entire patch series.  Disabled by default, but the
     ‘sendemail.chainReplyTo’ configuration variable can be used to
     enable it.

‘--identity=<identity>’
     A configuration identity.  When given, causes values in the
     _sendemail.<identity>_ subsection to take precedence over values in
     the _sendemail_ section.  The default identity is the value of
     ‘sendemail.identity’.

‘--[no-]signed-off-by-cc’
     If this is set, add emails found in the ‘Signed-off-by’ trailer or
     Cc: lines to the cc list.  Default is the value of
     ‘sendemail.signedoffbycc’ configuration value; if that is
     unspecified, default to –signed-off-by-cc.

‘--[no-]cc-cover’
     If this is set, emails found in Cc: headers in the first patch of
     the series (typically the cover letter) are added to the cc list
     for each email set.  Default is the value of _sendemail.cccover_
     configuration value; if that is unspecified, default to
     –no-cc-cover.

‘--[no-]to-cover’
     If this is set, emails found in To: headers in the first patch of
     the series (typically the cover letter) are added to the to list
     for each email set.  Default is the value of _sendemail.tocover_
     configuration value; if that is unspecified, default to
     –no-to-cover.

‘--suppress-cc=<category>’
     Specify an additional category of recipients to suppress the
     auto-cc of:

        • _author_ will avoid including the patch author.

        • _self_ will avoid including the sender.

        • _cc_ will avoid including anyone mentioned in Cc lines in the
          patch header except for self (use _self_ for that).

        • _bodycc_ will avoid including anyone mentioned in Cc lines in
          the patch body (commit message) except for self (use _self_
          for that).

        • _sob_ will avoid including anyone mentioned in the
          Signed-off-by trailers except for self (use _self_ for that).

        • _misc-by_ will avoid including anyone mentioned in Acked-by,
          Reviewed-by, Tested-by and other "-by" lines in the patch
          body, except Signed-off-by (use _sob_ for that).

        • _cccmd_ will avoid running the –cc-cmd.

        • _body_ is equivalent to _sob_ + _bodycc_ + _misc-by_.

        • _all_ will suppress all auto cc values.

     Default is the value of ‘sendemail.suppresscc’ configuration value;
     if that is unspecified, default to _self_ if –suppress-from is
     specified, as well as _body_ if –no-signed-off-cc is specified.

‘--[no-]suppress-from’
     If this is set, do not add the From: address to the cc: list.
     Default is the value of ‘sendemail.suppressFrom’ configuration
     value; if that is unspecified, default to –no-suppress-from.

‘--[no-]thread’
     If this is set, the In-Reply-To and References headers will be
     added to each email sent.  Whether each mail refers to the previous
     email (‘deep’ threading per _git format-patch_ wording) or to the
     first email (‘shallow’ threading) is governed by
     "–[no-]chain-reply-to".

     If disabled with "–no-thread", those headers will not be added
     (unless specified with –in-reply-to).  Default is the value of the
     ‘sendemail.thread’ configuration value; if that is unspecified,
     default to –thread.

     It is up to the user to ensure that no In-Reply-To header already
     exists when _git send-email_ is asked to add it (especially note
     that _git format-patch_ can be configured to do the threading
     itself).  Failure to do so may not produce the expected result in
     the recipient’s MUA.


Administering
=============

‘--confirm=<mode>’
     Confirm just before sending:

        • _always_ will always confirm before sending

        • _never_ will never confirm before sending

        • _cc_ will confirm before sending when send-email has
          automatically added addresses from the patch to the Cc list

        • _compose_ will confirm before sending the first message when
          using –compose.

        • _auto_ is equivalent to _cc_ + _compose_

     Default is the value of ‘sendemail.confirm’ configuration value; if
     that is unspecified, default to _auto_ unless any of the suppress
     options have been specified, in which case default to _compose_.

‘--dry-run’
     Do everything except actually send the emails.

‘--[no-]format-patch’
     When an argument may be understood either as a reference or as a
     file name, choose to understand it as a format-patch argument
     (‘--format-patch’) or as a file name (‘--no-format-patch’).  By
     default, when such a conflict occurs, git send-email will fail.

‘--quiet’
     Make git-send-email less verbose.  One line per email should be all
     that is output.

‘--[no-]validate’
     Perform sanity checks on patches.  Currently, validation means the
     following:

        • Invoke the sendemail-validate hook if present (see
          githooks(5)).

        • Warn of patches that contain lines longer than 998 characters
          unless a suitable transfer encoding (_auto_, _base64_, or
          _quoted-printable_) is used; this is due to SMTP limits as
          described by http://www.ietf.org/rfc/rfc5322.txt
          (http://www.ietf.org/rfc/rfc5322.txt).

     Default is the value of ‘sendemail.validate’; if this is not set,
     default to ‘--validate’.

‘--force’
     Send emails even if safety checks would prevent it.


Information
===========

‘--dump-aliases’
     Instead of the normal operation, dump the shorthand alias names
     from the configured alias file(s), one per line in alphabetical
     order.  Note, this only includes the alias name and not its
     expanded email addresses.  See _sendemail.aliasesfile_ for more
     information about aliases.


CONFIGURATION
*************

sendemail.aliasesFile
     To avoid typing long email addresses, point this to one or more
     email aliases files.  You must also supply
     ‘sendemail.aliasFileType’.

sendemail.aliasFileType
     Format of the file(s) specified in sendemail.aliasesFile.  Must be
     one of _mutt_, _mailrc_, _pine_, _elm_, or _gnus_, or _sendmail_.

     What an alias file in each format looks like can be found in the
     documentation of the email program of the same name.  The
     differences and limitations from the standard formats are described
     below:

     sendmail

             • Quoted aliases and quoted addresses are not supported:
               lines that contain a ‘"’ symbol are ignored.

             • Redirection to a file (‘/path/name’) or pipe (‘|command’)
               is not supported.

             • File inclusion (‘:include: /path/name’) is not supported.

             • Warnings are printed on the standard error output for any
               explicitly unsupported constructs, and any other lines
               that are not recognized by the parser.

sendemail.multiEdit
     If true (default), a single editor instance will be spawned to edit
     files you have to edit (patches when ‘--annotate’ is used, and the
     summary when ‘--compose’ is used).  If false, files will be edited
     one after the other, spawning a new editor each time.

sendemail.confirm
     Sets the default for whether to confirm before sending.  Must be
     one of _always_, _never_, _cc_, _compose_, or _auto_.  See
     ‘--confirm’ in the previous section for the meaning of these
     values.


EXAMPLES
********


Use gmail as the smtp server
============================

To use _git send-email_ to send your patches through the GMail SMTP
server, edit ~/.gitconfig to specify your account settings:

     [sendemail]
             smtpEncryption = tls
             smtpServer = smtp.gmail.com
             smtpUser = yourname@gmail.com
             smtpServerPort = 587

   If you have multi-factor authentication set up on your Gmail account,
you will need to generate an app-specific password for use with _git
send-email_.  Visit
https://security.google.com/settings/security/apppasswords
(https://security.google.com/settings/security/apppasswords) to create
it.

   If you do not have multi-factor authentication set up on your Gmail
account, you will need to allow less secure app access.  Visit
https://myaccount.google.com/lesssecureapps
(https://myaccount.google.com/lesssecureapps) to enable it.

   Once your commits are ready to be sent to the mailing list, run the
following commands:

     $ git format-patch --cover-letter -M origin/master -o outgoing/
     $ edit outgoing/0000-*
     $ git send-email outgoing/*

   The first time you run it, you will be prompted for your credentials.
Enter the app-specific or your regular password as appropriate.  If you
have credential helper configured (see git-credential(1)), the password
will be saved in the credential store so you won’t have to type it the
next time.

   Note: the following core Perl modules that may be installed with your
distribution of Perl are required: MIME::Base64, MIME::QuotedPrint,
Net::Domain and Net::SMTP. These additional Perl modules are also
required: Authen::SASL and Mail::Address.


SEE ALSO
********

git-format-patch(1), git-imap-send(1), mbox(5)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-send-pack,  Up: Top

Name
****

git-send-pack — Push objects over Git protocol to another repository


Synopsis
********

     git send-pack [–all] [–dry-run] [–force] [–receive-pack=<git-receive-pack>]
                     [–verbose] [–thin] [–atomic]
                     [–[no-]signed|–signed=(true|false|if-asked)]
                     [<host>:]<directory> [<ref>…]


DESCRIPTION
***********

Usually you would want to use _git push_, which is a higher-level
wrapper of this command, instead.  See git-push(1).

   Invokes _git-receive-pack_ on a possibly remote repository, and
updates it from the current repository, sending named refs.


OPTIONS
*******

‘--receive-pack=<git-receive-pack>’
     Path to the _git-receive-pack_ program on the remote end.
     Sometimes useful when pushing to a remote repository over ssh, and
     you do not have the program in a directory on the default $PATH.

‘--exec=<git-receive-pack>’
     Same as –receive-pack=<git-receive-pack>.

‘--all’
     Instead of explicitly specifying which refs to update, update all
     heads that locally exist.

‘--stdin’
     Take the list of refs from stdin, one per line.  If there are refs
     specified on the command line in addition to this option, then the
     refs from stdin are processed after those on the command line.

     If ‘--stateless-rpc’ is specified together with this option then
     the list of refs must be in packet format (pkt-line).  Each ref
     must be in a separate packet, and the list must end with a flush
     packet.

‘--dry-run’
     Do everything except actually send the updates.

‘--force’
     Usually, the command refuses to update a remote ref that is not an
     ancestor of the local ref used to overwrite it.  This flag disables
     the check.  What this means is that the remote repository can lose
     commits; use it with care.

‘--verbose’
     Run verbosely.

‘--thin’
     Send a "thin" pack, which records objects in deltified form based
     on objects not included in the pack to reduce network traffic.

‘--atomic’
     Use an atomic transaction for updating the refs.  If any of the
     refs fails to update then the entire push will fail without
     changing any refs.

‘--[no-]signed’
‘--signed=(true|false|if-asked)’
     GPG-sign the push request to update refs on the receiving side, to
     allow it to be checked by the hooks and/or be logged.  If ‘false’
     or ‘--no-signed’, no signing will be attempted.  If ‘true’ or
     ‘--signed’, the push will fail if the server does not support
     signed pushes.  If set to ‘if-asked’, sign if and only if the
     server supports signed pushes.  The push will also fail if the
     actual call to ‘gpg --sign’ fails.  See git-receive-pack(1) for the
     details on the receiving end.

‘--push-option=<string>’
     Pass the specified string as a push option for consumption by hooks
     on the server side.  If the server doesn’t support push options,
     error out.  See git-push(1) and githooks(5) for details.

<host>
     A remote host to house the repository.  When this part is
     specified, _git-receive-pack_ is invoked via ssh.

<directory>
     The repository to update.

<ref>…
     The remote refs to update.


SPECIFYING THE REFS
*******************

There are three ways to specify which refs to update on the remote end.

   With ‘--all’ flag, all refs that exist locally are transferred to the
remote side.  You cannot specify any _<ref>_ if you use this flag.

   Without ‘--all’ and without any _<ref>_, the heads that exist both on
the local side and on the remote side are updated.

   When one or more _<ref>_ are specified explicitly (whether on the
command line or via ‘--stdin’), it can be either a single pattern, or a
pair of such pattern separated by a colon ":" (this means that a ref
name cannot have a colon in it).  A single pattern _<name>_ is just a
shorthand for _<name>:<name>_.

   Each pattern pair consists of the source side (before the colon) and
the destination side (after the colon).  The ref to be pushed is
determined by finding a match that matches the source side, and where it
is pushed is determined by using the destination side.  The rules used
to match a ref are the same rules used by _git rev-parse_ to resolve a
symbolic ref name.  See git-rev-parse(1).

   • It is an error if <src> does not match exactly one of the local
     refs.

   • It is an error if <dst> matches more than one remote refs.

   • If <dst> does not match any remote ref, either

        • it has to start with "refs/"; <dst> is used as the destination
          literally in this case.

        • <src> == <dst> and the ref that matched the <src> must not
          exist in the set of remote refs; the ref matched <src> locally
          is used as the name of the destination.

   Without ‘–force‘, the <src> ref is stored at the remote only if <dst>
does not exist, or <dst> is a proper subset (i.e.  an ancestor) of
<src>.  This check, known as "fast-forward check", is performed in order
to avoid accidentally overwriting the remote ref and lose other peoples’
commits from there.

   With ‘--force’, the fast-forward check is disabled for all refs.

   Optionally, a <ref> parameter can be prefixed with a plus _+_ sign to
disable the fast-forward check only on that ref.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-sh-i18n--envsubst,  Up: Top

Name
****

git-sh-i18n–envsubst — i18nフォールバック用のGit独自のenvsubst(1)


Synopsis
********

     eval_gettext () {
             printf "%s" "$1" | (
                     export PATH $(git sh-i18n–envsubst –variables "$1");
                     git sh-i18n–envsubst "$1"
             )
     }


DESCRIPTION
***********

これは、全くもってエンドユーザーが実行するコマンドではありません。この文
書は、配管スクリプトを研究している、および/または新しいスクリプトを作成
している人々を対象としています。

   _git sh-i18n–envsubst_ は、GNU gettextパッケージに付属するGNU
‘envsubst(1)’ プログラムのGit用簡略版です。これは、 git-sh-i18n(1) によ
って内部的に使用され、 ‘eval_gettext’ 関数に渡された変数を差し込みます。

   インターフェイスについては何も約束されていません。また、このプログラ
ムが次のバージョンのGitで警告なしに消えることはありません。使用しないで
ください。(No promises are made about the interface, or that this
program won’t disappear without warning in the next version of Git.
Don’t use it.)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-sh-i18n,  Up: Top

Name
****

git-sh-i18n — シェルスクリプトのためのGit用i18nセットアップコード


Synopsis
********

     . "$(git –exec-path)/git-sh-i18n"


DESCRIPTION
***********

これは、全くもってエンドユーザーが実行するコマンドではありません。この文
書は、磁器風のスクリプトを研究している、および/または新しいスクリプトを
書いている人々を対象としています。

   ’git sh-i18n スクリプトレットは、シェルスクリプト内に実装されたGitの
磁器プログラムによって、(‘.`を使用してsourceコマンドで)実行されるように
設計されています。 これは、 `gettext.sh’ スクリプトを介してアクセス可能
なGNU ‘gettext’ および ‘eval_gettext’ 関数のラッパーを提供し、GNU
gettextのないシステムではこれらが自動的に使われます(pass-through
fallbacks)。


FUNCTIONS
*********

gettext
     現在、 ‘printf(1)’ のラッパーとして実装されているダミーのフォールス
     ルー関数。今後のバージョンでは、実際のgettext実装に置き換えられる事
     でしょう。

eval_gettext
     現在、 ‘printf(1)’ のラッパーとして実装されているダミーのフォールス
     ルー関数で、その変数達は git-sh-i18n–envsubst(1) ヘルパーによって展
     開されます。今後のバージョンでは、実際のgettext実装に置き換えられる
     事でしょう。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-sh-setup,  Up: Top

Name
****

git-sh-setup — 一般的なGitシェルスクリプトのセットアップコード


Synopsis
********

     . "$(git –exec-path)/git-sh-setup"


DESCRIPTION
***********

これは、エンドユーザーが実行するコマンドではありません。この文書は、磁器
風のスクリプトを研究している、および/または 新しいスクリプトを書いている
人々を対象としています。

   _git sh-setup_ スクリプトレットは、他のシェルスクリプトから( ‘.’ を使
用して)実行(source)され、通常のGitディレクトリと、いくつかのヘルパーシェ
ル関数を指す、いくつかの環境変数を設定するように設計されています。

   実行(source)前に、スクリプトでいくつかの環境変数を設定する必要があり
ます。‘USAGE’ (および存在する場合は ‘LONG_USAGE’ )は、 ‘usage()’ シェル
関数によって与えられるメッセージを定義するために使用されます。スクリプト
が作業ツリーのサブディレクトリから実行できる場合は、 ‘SUBDIRECTORY_OK’ を
設定できます(一部のコマンドは実行できません)。

   スクリプトレットは ‘GIT_DIR’ と ‘GIT_OBJECT_DIRECTORY’ シェル変数を設
定しますが、それらを環境にエクスポートしません。


FUNCTIONS
*********

die
     提供されたエラーメッセージを標準エラーストリームに出力した後に終了
     します。

usage
     使用法メッセージで die します。

set_reflog_action
     すでに設定されていない限り、 ‘GIT_REFLOG_ACTION’ 環境変数を指定の文
     字列(通常はプログラムの名前)に設定します。スクリプトが、refを更新す
     る ‘git’ コマンドを実行するたびに、この文字列の値を使用してreflogエ
     ントリが作成され、どのコマンドがrefを更新したかの記録が残されます。

git_editor
     特定のファイルに対してユーザーが選択したエディター(GIT_EDITOR また
     は core.editor または VISUAL または EDITOR)を実行しますが、エディタ
     ーが指定されておらず、端末がダムの場合はエラーになります。

is_bare_repository
     ‘true’ または ‘false’ を標準出力ストリームに出力して、リポジトリが
     ベアリポジトリであるかどうか(つまり、関連する作業ツリーがないかどう
     か)を示します。

cd_to_toplevel
     作業ツリーのトップレベルまでchdirを実行します。

require_work_tree
     現在のディレクトリがリポジトリの作業ツリー内にあるかどうかを確認し
     、そうでない場合は停止(die)します。

require_work_tree_exists
     リポジトリに関連付けられている作業ツリーが存在するかどうかを確認し
     、存在しない場合は停止(die)します。多くの場合、cd_to_toplevelを呼び
     出す前に実行されますが、作業ツリーがない場合は実行できません。

require_clean_work_tree <action> [<hint>]
     リポジトリに関連付けられている作業ツリーとインデックスに、追跡され
     たファイルへのコミットされていない変更がないことを確認します。それ
     以外の場合は、 ‘Cannot <action>: <reason>. <hint>’ の形式のエラーメ
     ッセージを出力し、dieします。 例:

          require_clean_work_tree rebase "Please commit or stash them."

get_author_ident_from_commit
     特定のコミットの GIT_AUTHOR_NAME と GIT_AUTHOR_EMAIL と
     GIT_AUTHOR_DATE 変数を設定するためにevalで使用するコードを出力しま
     す。

create_virtual_base
     最初のファイルを変更して、2番目のファイルと共通の行だけが残るように
     します。共通の資料が不十分な場合、最初のファイルは空のままになりま
     す。 結果は、3方向マージの仮想ベース入力として適しています。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-shell,  Up: Top

Name
****

git-shell — GitのみのSSHアクセス用の制限付きログインシェル


Synopsis
********

     chsh -s $(command -v git-shell) <user>
     git clone <user>@localhost:/path/to/repo.git
     ssh <user>@localhost


DESCRIPTION
***********

これは、制限されたGitアクセスを提供するためのSSHアカウントのログインシェ
ルです。プル/プッシュ機能を実装するサーバー側のGitコマンドと、ユーザーの
ホームディレクトリの ‘git-shell-commands’ という名前のサブディレクトリに
あるカスタムコマンドの実行のみを許可します。


COMMANDS
********

_git shell_ は、 ‘-c’ オプションの後に以下のコマンドを受け入れます:

_git receive-pack <argument>_
_git upload-pack <argument>_
_git upload-archive <argument>_
     対応するサーバー側コマンドを呼び出して、クライアントの「git push」
     または「git fetch」または「git archive –remote」リクエストをサポー
     トします。

_cvs server_
     CVSサーバーを模倣します。 git-cvsserver(1) 参照。

   ‘~/git-shell-commands’ ディレクトリが存在する場合、 _git shell_ は、
ユーザーのホームディレクトリから "‘git-shell-commands/<command>
<arguments>’" を実行することにより他のカスタムコマンドも処理します。


INTERACTIVE USE
***************

デフォルトでは、上記のコマンドは ‘-c’ オプションでのみ実行できます。シェ
ルはインタラクティブではありません。

   ‘~/git-shell-commands’ ディレクトリが存在する場合、 _git shell_ をイ
ンタラクティブに実行することもできます(引数なしで)。 ‘help’ コマンドが
‘git-shell-commands’ ディレクトリにある場合、許可されたアクションの概要
をユーザーに提供するために実行されます。次に、 ‘git> ‘ プロンプトが表示
され、「git-shell-commands」ディレクトリから任意のコマンドを入力すること
ができます。「exit」を使用すれば接続を閉じることができます。

   通常、このモードは、ユーザーがアクセスできるリポジトリの一覧表示、リ
ポジトリの作成、削除、名前変更、またはリポジトリの説明と権限の変更を可能
にする管理インターフェイスとして使用されます。

   ‘no-interactive-login’ コマンドが存在する場合、それが実行され、対話型
シェルが中止(abort)されます。


EXAMPLES
********

インタラクティブログインを無効にするには、代わりにgreeting(挨拶)を表示し
ます:

     $ chsh -s /usr/bin/git-shell
     $ mkdir $HOME/git-shell-commands
     $ cat >$HOME/git-shell-commands/no-interactive-login <<\EOF
     #!/bin/sh
     printf '%s\n' "Hi $USER! You've successfully authenticated, but I do not"
     printf '%s\n' "provide interactive shell access."
     exit 128
     EOF
     $ chmod +x $HOME/git-shell-commands/no-interactive-login

   git-cvsserverアクセスを有効にするには(なお、git-shell-commandsディレ
クトリを作成するとインタラクティブログインが可能になるため、通常、上記の
「no-interactive-login」の例が前提条件として必要です):

     $ cat >$HOME/git-shell-commands/cvs <<\EOF
     if ! test $# = 1 && test "$1" = "server"
     then
             echo >&2 "git-cvsserver only handles \"server\""
             exit 1
     fi
     exec git cvsserver server
     EOF
     $ chmod +x $HOME/git-shell-commands/cvs


SEE ALSO
********

ssh(1), git-daemon(1), contrib/git-shell-commands/README


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-shortlog,  Up: Top

Name
****

git-shortlog — ’git log’ の出力を要約します。


Synopsis
********

     git shortlog [<options>] [<revision range>] [[–] <path>…]
     git log –pretty=short | git shortlog [<options>]


DESCRIPTION
***********

’git log’の出力を、リリースアナウンスに含めるのに適した形式で要約します
。各コミットは、作者とタイトルごとにグループ化されます。

   加えて、「[PATCH]」はコミットの説明から削除されます。

   コマンドラインでリビジョンが渡されず、かつ、標準入力が端末ではないか
または現在のブランチがない場合、「git shortlog」は、現在のリポジトリを参
照せずに、標準入力から読み取られたログの概要を出力します。


OPTIONS
*******

‘-n’
‘--numbered’
     作者のアルファベット順ではなく、作者のコミット数に従って出力を並べ
     替えます。

‘-s’
‘--summary’
     コミットの説明を抑制し、コミット数の要約のみを提供します。

‘-e’
‘--email’
     各作者のメールアドレスを表示します。

‘--format[=<format>]’
     コミットの件名の代わりに、他の情報を使用して各コミットを説明します
     。 ‘<format>’ は、 ‘* [%h] %s’ など 、 ‘git log’ の ‘--format’ オプ
     ションで受け入れられる任意の文字列にすることができます。
     (git-log(1) の「PRETTY FORMATS」セクションを参照してください。)

          pretty-printされた各コミットは、表示される前に再ラップ(rewrapp)されます。

‘--group=<type>’
     グループは ‘<type>’ に基づいてコミットします。 ‘--group’ オプション
     が指定されていない場合、デフォルトは ‘author’ です。 ‘<type>’ は以
     下のいずれかです:

        • ‘author’ : コミットは作成者ごとにグループ化されます

        • ‘committer’ : コミットはコミッターによってグループ化されます(
          ‘-c’ と同じ)

        • ‘trailer:<field>’ : ‘<field>’ は大文字と小文字を区別しないコミ
          ットメッセージトレーラーとして解釈されます
          (git-interpret-trailers(1) 参照)。たとえば、プロジェクトで
          ‘Reviewed-by’ のトレーラーを使用している場合、 ‘git shortlog
          -ns --group=trailer:reviewed-by’ を使用して誰がレビューしてい
          るかを確認できます。

          注意: トレーラーを含まないコミットはカウントされないことに注意
          してください。同様に、複数のトレーラーを使用したコミット(複数
          のサインオフなど)は、複数回カウントされる場合があります(ただし
          、そのコミットの一意のトレーラー値ごとに1回のみです)。

          shortlog は、各トレーラー値を ‘name <email>’ ID としてパースし
          ようとします。成功すると、mailmapが適用され、 ‘--email’ オプシ
          ョンが指定されていない限りemailは省略されます。値をIDとして解
          析できない場合は、その文言通りに取得されます。

     ‘--group’ が複数回指定されている場合、コミットは各値でカウントされ
     ます(ただし、そのコミットの一意の値ごとに1回だけカウントされます)。
     たとえば、 ‘git shortlog --group=author
     --group=trailer:co-authored-by’ は、authorとco-authorの両方をカウン
     トします。

‘-c’
‘--committer’
     ‘--group=committer’ のエイリアスです。

‘-w[<width>[,<indent1>[,<indent2>]]]’
     各行を ‘width’ で折り返すことにより、出力を行折り返します。各エント
     リの最初の行は ‘indent1’ スペースでインデントされ、2行目以降は
     ‘indent2’ スペースでインデントされます。 ‘width’ と ‘indent1’ と
     ‘indent2’ のデフォルトは、それぞれ76と6と9です。

     widthが ‘0’ (ゼロ)の場合、出力の行を折り返すことなくインデントしま
     す。

<revision range>
     指定のリビジョン範囲のコミットのみを表示します。 <revision range> が
     指定されていない場合、デフォルトで ‘HEAD’ (つまり、現在のコミットに
     つながる履歴全体)になります。 ‘origin..HEAD’ は、現在のコミット(つ
     まり、 ‘HEAD’ )から到達可能なすべてのコミットを指定しますが、
     ‘origin’ からは指定しません。 <revision range> のスペルの完全なリス
     トについては、 gitrevisions(7) の「Specifying Ranges」セクションを
     参照してください。

[–] <path>…
     指定されたパスに一致するファイルがどのように作成されたかを説明する
     のに十分なコミットのみを検討してください。

     混乱が生じた場合、パスをオプションまたはリビジョン範囲から分離する
     ために、パスの前に ‘--’ を付ける必要がある場合があります。


Commit Limiting
===============

ここで説明されている特別な表記法を使用してリストする必要があるコミットの
範囲を指定することに加えて、追加のコミット制限が適用される場合があります
。

   より多くのオプションを使用すると、通常、出力がさらに制限されます(たと
えば、‘--since=<date1>`は’<date1>‘より新しいコミットに制限され、
’–grep=<pattern>‘と一緒に使用すると、ログメッセージに’<pattern>‘と一致す
る行があるコミットにさらに制限されます)。

   注意: これらは、‘–reverse‘などのコミット順序およびフォーマットオプシ
ョンの前に適用されることに注意してください。

‘-<number>’
‘-n <number>’
‘--max-count=<number>’
     出力するコミットの数を制限します。

‘--skip=<number>’
     コミット出力の表示を開始する前に、’number’個のコミットをスキップし
     ます。

–since=<date>
‘--after=<date>’
     指定の日付よりも新しいコミットを表示します。

‘--until=<date>’
‘--before=<date>’
     指定の日付より古いコミットを表示します。

‘--author=<pattern>’
‘--committer=<pattern>’
     コミット出力を、指定されたパターン(正規表現)に一致する作者
     (author)/コミッター(committer)ヘッダー行を持つものに制限します。複
     数の ‘--author=<pattern>’ がある場合、作者が指定されたパターンのい
     ずれかに一致するコミットが選択されます(複数の
     ‘--committer=<pattern>’ の場合も同様)。

‘--grep-reflog=<pattern>’
     コミット出力を、指定されたパターン(正規表現)に一致するreflogエント
     リを持つものに制限します。複数の‘–grep-reflog‘を使用すると、指定さ
     れたパターンのいずれかに一致するreflogメッセージを持つコミットが選
     択されます。‘–walk-reflogs‘が使用されていない限り、このオプションを
     使用するとエラーになります。

‘--grep=<pattern>’
     コミット出力を、指定されたパターン(正規表現)に一致するログメッセー
     ジを持つものに制限します。複数の‘–grep=<pattern>‘を使用すると、指定
     されたパターンのいずれかにメッセージが一致するコミットが選択されま
     す(全てに一致するコミットだけを選択したい場合、’–all-match‘を参照し
     てください)。

     ‘–notes‘が有効な場合、ノートからのメッセージは、ログメッセージの一
     部であるかのようにマッチングされます。

‘--all-match’
     コミット出力を、少なくとも1つに一致するものではなく、指定されたすべ
     ての‘–grep‘に一致するものに制限します。

‘--invert-grep’
     コミット出力を、‘–grep=<pattern>‘で指定されたパターンと一致しないロ
     グメッセージを持つものに制限します。

‘-i’
‘--regexp-ignore-case’
     大文字小文字に関係なく、正規表現の制限パターンに一致します。

‘--basic-regexp’
     制限パターンを基本正規表現として扱います。これがデフォルトです。

‘-E’
‘--extended-regexp’
     制限パターンを、デフォルトの基本正規表現の代わりに拡張正規表現とし
     て扱います。

‘-F’
‘--fixed-strings’
     制限パターンを固定文字列として扱います(パターンを正規表現として解釈
     しないでください)。

‘-P’
‘--perl-regexp’
     制限パターンをPerl互換の正規表現として扱います。

     これらのタイプの正規表現のサポートは、コンパイル時オプションに依存
     します。Gitが当該のサポート付きでコンパイルされていない場合、このオ
     プションを提供すると、Gitが死にます(die)。

‘--remove-empty’
     指定されたパスがツリーから見えなくなったら停止(stop)します。

‘--merges’
     マージコミットのみを印刷します。これは‘–min-parents=2‘とまったく同
     じです。

‘--no-merges’
     複数の親を持つコミットを出力しない。これは‘–max-parents=1‘とまった
     く同じです。

‘--min-parents=<number>’
‘--max-parents=<number>’
‘--no-min-parents’
‘--no-max-parents’
     量の多少に関わらず、とにかく複数の親コミットがあるコミットのみを表
     示します。特に、‘--max-parents=1`は’–no-merges‘と同じであり、
     ‘--min-parents=2`は’–merges‘と同じです。‘--max-parents=0`はすべての
     ルートコミットを提供し、’–min-parents=3‘はすべてのタコ足マージ
     (octopus merges)を示します。

     ‘--no-min-parents`と’–no-max-parents‘は、これらの制限を(制限なしに
     )再度リセットします。同等の形式は、‘--min-parents=0’(すべてのコミッ
     トに0個以上の親があります)および‘–max-parents=-1‘(マイナスの数は上
     限がないことを示します)です。

‘--first-parent’
     マージコミットを確認したら、最初の親コミットのみを探索します。この
     オプションは、特定のトピックブランチの進化を表示するときに、より良
     い概要を提供できます。トピックブランチへのマージは、時々更新される
     アップストリームに調整することだけである傾向があり、このオプション
     を使用すると、そのようなマージによって履歴に取り込まれた個々のコミ
     ットを無視できます。

‘--not’
     次に現れる‘–not‘までの間、後続のすべてのリビジョン指定子の’^’プレフ
     ィックス(またはその欠如)の意味を逆にします。

‘--all’
     ‘refs/‘内のすべてのrefが‘HEAD‘とともに、コマンドラインに
     ’<commit>’としてリストされているかのように見せかけます。

‘--branches[=<pattern>]’
     ‘refs/heads‘内のすべてのrefがコマンドラインに’<commit>’としてリスト
     されているかのように見せかけます。_<pattern>’が指定されている場合、
     ブランチを指定されたシェルグロブ(shell glob)に一致するものに制限し
     ます。パターンに_?_または_*’または’[_がない場合、最後に_/*’が含まれ
     ます。

‘--tags[=<pattern>]’
     ‘refs/tags‘内のすべてのrefがコマンドラインに’<commit>’としてリスト
     されているかのように見せかけます。_<pattern>’が指定されている場合は
     、指定されたシェルグロブ(shell glob)に一致するタグにタグを制限しま
     す。パターンに_?_または_*’または’[_がない場合、最後に_/*’が含まれま
     す。

‘--remotes[=<pattern>]’
     ‘refs/remotes‘内のすべてのrefがコマンドラインに’<commit>’としてリス
     トされているかのように見せかけます。_<pattern>’が指定されている場合
     、リモート追跡ブランチを指定されたシェルグロブ(shell glob)に一致す
     るものに制限します。パターンに_?_または_*’または’[_がない場合、最後
     に_/*’が含まれます。

‘--glob=<glob-pattern>’
     シェルグロブ’<glob-pattern>’に一致するすべてのrefがコマンドラインに
     ’<commit>’としてリストされているかのように見せかけます。先頭の
     ’refs/_は、欠落している場合は自動的に先頭に追加されます。パターンに
     _?_または_*’または’[_がない場合、最後に_/*’が含まれます。

‘--exclude=<glob-pattern>’
     次の‘–all‘または‘–branches‘または‘–tags‘または‘–remotes‘または
     ‘–glob‘が別の方法で考慮する’<glob-pattern>’に一致するrefを含めない
     でください。このオプションを繰り返すと、次の‘–all‘または
     ‘–branches‘または‘–tags‘または‘–remotes‘または‘–glob‘オプションまで
     除外パターンが蓄積されます(他のオプションまたは引数は、蓄積されたパ
     ターンをクリアしません)。

     与えられたパターンは、それぞれ‘–branches‘または‘ –tags‘または
     ‘–remotes‘に適用される場合、‘refs/heads‘または‘refs/tags‘または
     ‘refs/remotes‘で始まるべきではありません。‘--glob`または’–all‘に適
     用する場合は、‘refs/‘で始める必要があります。末尾の’/*’を意図してい
     る場合は、明示的に指定する必要があります。

‘--reflog’
     reflogsで言及されているすべてのオブジェクトがコマンドラインに
     ‘<commit>‘としてリストされているかのように見せかけます。

‘--alternate-refs’
     代替リポジトリのref先端として言及されているすべてのオブジェクトがコ
     マンドラインにリストされているかのように見せかけます。代替リポジト
     リは、オブジェクトディレクトリが‘objects/info/alternates‘で指定され
     ているリポジトリです。インクルードされたオブジェクトのセットは、
     ‘core.alternateRefsCommand‘などによって変更できます。
     git-config(1)を参照してください。

‘--single-worktree’
     デフォルトでは、作業ツリーが複数ある場合、‘--all`と’-reflog‘と
     ‘–indexed-objects‘では、すべての作業ツリーが検査されます
     (git-worktree(1)を参照)。このオプションは、現在の作業ツリーのみを調
     べるように強制します。

‘--ignore-missing’
     入力に無効なオブジェクト名が含まれている場合、そもそもその不正な入
     力が行われていないかのように見せかけます。

‘--bisect’
     コマンドラインで、bad bisection ref ‘refs/bisect/bad’ がリストされ
     、その後に ‘--not’ と good bisection ref ‘refs/bisect/good-*’ が続
     くかのように見せかけます。

‘--stdin’
     コマンドラインにリストされている’<commit>’に加えて、標準入力からそ
     れらを読み取ります。‘–‘区切り文字が表示された場合は、コミットの読み
     取りを停止し、パスの読み取りを開始して結果を制限します。

‘--cherry-mark’
     ‘--cherry-pick’（以下を参照）と同様ですが、同等のコミットを省略せず
     に‘=‘と印し、同等でないコミットを’+‘と印します。

‘--cherry-pick’
     コミットの組を対称差(symmetric difference)に制限する場合、「反対側
     」の別のコミットと同じ変更を導入するコミットを省略します。

     たとえば、‘A`と`B`の2つのブランチがある場合、それらの片側だけですべ
     てのコミットを一覧表示する通常の方法は、’–left-right‘を使用すること
     です(‘–left-right‘オプションの説明の以下の例を参照してください)。た
     だし、他のブランチからは(ブランチAと重複しない)厳選されたコミットが
     表示されます(たとえば、「3rd onb」はブランチAからチェリーピックされ
     る可能性があります)。このオプションを使用すると、そのようなコミット
     のペアは出力から除外されます。

‘--left-only’
‘--right-only’
     リストは、対称差のそれぞれの側でのみコミットします。つまり、
     ‘--left-right`で `<’ と印されるのだけか、あるいは‘–left-right‘で
     ‘>‘と印されるものだけです。

     たとえば、‘--cherry-pick --right-only A...B`は、`A`にある、または
     `A`のコミットとパッチと同等のコミットを`B`から省略します。つまり、
     これは`git cherry A B`からの’+‘コミットをリストします。より正確に書
     くと、’–cherry-pick –right-only –no-merges‘により正確なリストを提供
     します。

‘--cherry’
     ‘–right-only –cherry-mark –no-merges‘の同義語です。出力を私たちの側
     のコミットに制限し、フォークされた履歴の反対の側に適用されたものを
     、‘git cherry upstream mybranch‘と同様に‘git log –cherry
     upstream…mybranch‘で印するのに役立ちます。

‘-g’
‘--walk-reflogs’
     コミットの祖先チェーンをたどる代わりに、reflogエントリを最新のもの
     から古いものに移動します。このオプションを使用する場合、除外するコ
     ミットを指定することはできません(つまり、’^commit’や
     ’commit1..commit2’や’commit1...commit2’表記は使用できません)。

     (明らかな理由で、)‘oneline`と`reference`以外の’–pretty‘形式では、こ
     れにより、出力にreflogから取得された2行の追加情報が含まれます。出力
     のreflog指定子は、‘ref@{Nth}’(‘Nth`はreflogの逆時系列インデックス
     (reverse-chronological index))または`ref@{timestamp}’(そのエントリ
     のタイムスタンプ付き)として表示されます。表示は下記のいくつかのルー
     ルに依存します:

       1. 開始点が ‘ref@{Nth}’ として指定されている場合は、インデックス
          形式を表示します。

       2. 開始点が ‘ref@{now}’ として指定されている場合は、タイムスタン
          プ形式を表示します。

       3. 上記のどちらも使用されていないが、コマンドラインで‘–date‘が指
          定されている場合は、‘–date‘で要求された形式でタイムスタンプを
          表示します。

       4. それ以外の場合は、インデックス形式を表示します。

     ‘--pretty = oneline`では、コミットメッセージの前にこの情報が同じ行
     に付けられます。このオプションを’–reverse‘と組み合わせることはでき
     ません。git-reflog(1)も参照してください。

     ‘–pretty=reference‘では、この情報はまったく表示されません。

‘--merge’
     マージが失敗した後、競合があり、マージするすべてのheadに存在しない
     ファイルに関連(touch)するrefを表示します。

‘--boundary’
     除外された境界コミットを出力します。 境界コミットの前には ‘-‘が付い
     ています。


History Simplification
======================

特定の<path>を変更するコミットなど、履歴の一部のみに関心がある場合があり
ます。ただし、「履歴の簡略化」(History Simplification)は2つの部分から成
ります。履歴を簡略化するためにはさまざまな戦略があるためです。その1つは
コミットの選択であり、もう1つはそれを行う方法です。

   以下のオプションは、表示するコミットを選択します:

<paths>
     指定された<パス>を変更するコミットが選択されます。

‘--simplify-by-decoration’
     いくつかのブランチまたはタグによって参照されるコミットが選択されま
     す。

   注意: 意味のある重要な履歴のために、追加のコミットを表示できることに
注意してください。

   以下のオプションは、簡略化の実行方法に影響します。

Default mode
     履歴を、ツリーの最終状態を説明する最も単純な履歴に単純化します。最
     終結果が同じである場合(つまり、同じコンテンツのブランチをマージする
     場合)、いくつかの傍流ブランチ(side branches)を削除するため、最も単
     純です。

‘--show-pulls’
     デフォルトモードからのすべてのコミットを含めますが、最初の親への
     TREESAMEではなく、後の親へのTREESAMEであるマージコミットも含めます
     。このモードは、ブランチに変更を「最初に導入した」マージコミットを
     表示するのに役立ちます。(訳注:TREESAME=pathspecが全く同一であるツリ
     ー)

‘--full-history’
     デフォルトモードと同じですが、一部の履歴を削除しません。

‘--dense’
     選択したコミットのみが表示され、重大で意味のある履歴を持つコミット
     もいくつか表示されます。

‘--sparse’
     簡略化された履歴内のすべてのコミットが表示されます。

‘--simplify-merges’
     このマージに寄与する選択されたコミットがないため、結果の履歴からい
     くつかの不要なマージを削除するための‘–full-history‘への追加オプショ
     ン。

‘--ancestry-path’
     表示するコミットの範囲が指定されている場合(たとえば、
     _commit1..commit2’または’commit2 ^commit1_)、 _commit1_ と
     _commit2_ の間の祖先チェーンに直接存在するコミットのみ、つまり、
     _commit1_ の子孫であり、 _commit2_ の祖先であるコミットを表示します
     。

   より詳細な説明は以下のとおりです。

   <paths> として ‘foo’ を指定したとします。 ‘foo’ !TREESAME を変更する
コミットを呼び出し、残りをTREESAMEと呼びます。( ‘foo’ のためにフィルタリ
ングされた差分では、それぞれ異なって見えたりたり等しく見えたりします。）

   以下、簡略化設定の違いを説明するために、同じ履歴例を使います。このコ
ミットグラフでは、ファイル ‘foo’ をフィルタリングしていると想定していま
す:

               .-A---M---N---O---P---Q
              /     /   /   /   /   /
             I     B   C   D   E   Y
              \   /   /   /   /   /
               `-------------'   X

   履歴 A—Q の水平線は、各マージの最初の親と見なされます。その各コミット
は以下のとおりです:

   • ‘I’ は最初のコミットであり、ファイル ‘foo’ が内容 “asdf” で存在し、
     ファイル ‘quux’ は内容 “quux” で存在します。最初のコミットは空のツ
     リーと比較されるため、‘I’ は !TREESAME です。

   • ‘A’ では、 ‘foo’ には “foo” だけが含まれています。

   • ‘B’ には ‘A’ と同じ変更が含まれています。そのマージ ‘M’ は些細なこ
     とであり、したがってすべての親にとって TREESAME です。

   • ‘C’ は ‘foo’ を変更しませんが、そのマージ ‘N’ はそれを “foobar” に
     変更するので、どの親にとっても TREESAME ではありません。

   • ‘D’ は ‘foo’ を “baz” に設定します。そのマージ ‘O’ は、 ‘N’ と ‘D’
     から “foobarbaz” への文字列を結合します。つまり、どの親にとっても
     TREESAME ではありません。

   • ‘E’ は ‘quux’ を “xyzzy” に変更し、そのマージ ‘P’ は文字列を
     “quuxxyzzy” に結合します。 ‘P’ は ‘O’ に対して TREESAME ですが、
     ‘E’ に対してはそうではありません。

   • ‘X’ は、新ファイル ‘side’ を追加し、 ‘Y’ がそれを変更した独立したル
     ートコミットです。 ‘Y’ は ‘X’ へのTREESAMEです。そのマージ ‘Q’ は
     ‘P’ に ‘side’ を追加し、 ‘Q’ は ‘P’ にはTREESAMEですが、‘Y’ に対し
     てはそうではありません。

   ‘rev-list’ は、 ‘--full-history’ および/または、( ‘--parents’ または
‘--children’ を介して)親の書き換えが使用されているかどうかに基づいて、コ
ミットを含めたり除外したりして、履歴を逆方向にウォークスルーします。以下
の設定が可能です。

Default mode
     コミットは、どの親に対してもTREESAMEでない場合に含まれます(これは変
     更できますが、以下の ‘--sparse’ を参照してください)。コミットがマー
     ジであり、一方の親に対するTREESAMEであった場合は、その親のみをフォ
     ローします。(TREESAMEの親が複数ある場合でも、そのうちの1つだけをフ
     ォローします)。それ以外の場合は、すべての親をフォローします。

     これにより、以下のようになります:

                    .-A---N---O
                   /     /   /
                  I---------D

     TREESAMEの親のみに従うルールが利用可能な場合は、 ‘B’ を検討対象から
     完全に削除したことに注意してください。 ‘C’ は ‘N’ を介して考慮され
     ましたが、しかしそれはTREESAMEです。ルートコミットは空のツリーと比
     較されるため、 ‘I’ は !TREESAME です。

     親子関係は ‘--parents’ でのみ表示されますが、デフォルトモードで選択
     されたコミットには影響しないため、親の行を示しました。

‘--full-history without parent rewriting’
     このモードは、デフォルトとはある一点で異なります。つまり、いずれか
     の親に対してTREESAMEであっても、常にマージのすべての親に従います。
     マージの複数の側にコミットが含まれている場合でも、これはマージ自体
     が含まれていることを意味するものではありません！ 例では以下のように
     なります。

                  I  A  B  N  D  O  P  Q

     ‘M’ は、両方の親にとってTREESAMEであるため、除外されました。 ‘E’ と
     ‘C’ と ‘B’ をすべて巡りましたが、 ‘B’ だけが !TREESAME だったので、
     他は表示されません。

     注意: 親の書き換え(rewrite)がないと、コミット間の親子関係について話
     す(talk)ことは実際には不可能であるため、それらが切断されている
     (disconnected)ことを示していることに注意してください。

‘--full-history with parent rewriting’
     通常のコミットは !TREESAME の場合にのみ含まれます(これは変更できま
     すが、以下の ‘--sparse’ を参照してください)。

     マージは常に含まれます。ただし、親リストは書き直されます。各親に沿
     って、自分自身に含まれていないコミットを削除します。 これにより以下
     のようになります。

                    .-A---M---N---O---P---Q
                   /     /   /   /   /
                  I     B   /   D   /
                   \   /   /   /   /
                    `-------------'

     上記を書き直さずに ‘--full-history’ と比較してください。 ‘E’ は
     TREESAMEであるため削除されましたが、Pの親リストは ‘E’ の親 ‘I’ を含
     むように書き直されていることに注意してください。 ‘C’ と ‘N’ および
     ‘X’ と ‘Y’ と ‘Q’ についても同じことが起こりました。

   上記の設定に加えて、あなたはTREESAMEが包含に影響を与えるかどうかを変
更できます:

‘--dense’
     巡ったコミットは、親にとってTREESAMEでない場合に含まれます。

‘--sparse’
     巡ったすべてのコミットが含まれます。

     ‘--full-history’ がなくても、これによりマージが単純化されることに注
     意してください。親の1つがTREESAMEの場合、その1つだけに従うため、マ
     ージの反対側を巡ることはありません。

‘--simplify-merges’
     最初に、親を書き換えた ‘--full-history’ と同じ方法で履歴グラフを作
     成します(上記を参照)。

     それから、以下のルールに従って、各コミット ‘C’ を最終履歴内の置換
     ‘C'’ に単純化します:

        • ‘C'’ を ‘C’ にセットします。

        • ‘C'’ の各親 ‘P’ をその簡略化された ‘P'’ に置き換えます。その過
          程で、他の親の祖先であるか、ルートである親を削除すると、
          TREESAMEが空のツリーにコミットされ、重複が削除されますが、
          TREESAMEであるすべての親を削除しないように注意してください。

        • この親の書き換え後、 ‘C'’ がルートまたはマージコミット(0または
          >1 の親を持つ)、境界コミット、または !TREESAMEである場合、それ
          は残ります。それ以外の場合は、唯一の親に置き換えられます。

     この効果は、親の書き換えを使用した ‘--full-history’ と比較すること
     で最もよく示されます。例は以下のようになります:

                    .-A---M---N---O
                   /     /       /
                  I     B       D
                   \   /       /
                    `---------'

     注意: ‘--full-history’ に対する ‘N’ と ‘P’ と ‘Q’ の主な違いに注意
     してください:

        • ‘N’ の親リストは、他の親 ‘M’ の祖先であるため、 ‘I’ が削除され
          ました。それでも、 !TREESAME なので ‘N’ が残りました。

        • ‘P’ の親リストも同様に ‘I’ が削除されました。 ‘P’ は、親が1つ
          で TREESAMEであるため、完全に削除されました。

        • ‘Q’ の親リストでは、 ‘Y’ が ‘X’ に簡略化されていました。その後
          、 ‘X’ はTREESAMEルートであったため、削除されました。 ‘Q’ は、
          親が1つで TREESAMEであるため、完全に削除されました。

   利用可能な別の簡略化モードがあります:

‘--ancestry-path’
     表示されるコミットを、指定されたコミット範囲内の “from” コミットと
     “to” コミットの間の祖先チェーンに直接あるコミットに制限します。つま
     り、 “to” コミットの祖先であるコミットと “from” コミットの子孫であ
     るコミットのみを表示します。

     ユースケースの例として、以下のコミット履歴について考えます:

                      D---E-------F
                     /     \       \
                    B---C---G---H---I---J
                   /                     \
                  A-------K---------------L--M

     通常の _D..M_ は、 ‘M’ の祖先であるコミットのセットを計算しますが、
     ‘D’ の祖先であるコミットは除外します。 これは、「 ‘M’ には ‘D’ には
     存在しなかったものがある」という意味で、 ‘D’ 以降の ‘M`に至るまでの
     歴史に何が起こったのかを知るのに役立ちます。この例の結果は、 `A’ と
     ‘B’ (そしてもちろん ‘D’ 自体)を除くすべてのコミットになります。

     ただし、 ‘M’ のコミットが ‘D’ で入ったバグで汚染されており、修正が
     必要な場合は、実際には ‘D’ の子孫である _D..M_ のサブセットのみを表
     示する必要があります。つまり、 ‘C’ と ‘K’ を除外します。これはまさ
     に ‘--ancestry-path’ オプションが行うことです。これを _D..M_ 範囲に
     適用すると、以下のようになります:

                          E-------F
                           \       \
                            G---H---I---J
                                         \
                                          L--M

   別のオプション ‘--show-pulls’ について説明する前に、新しいサンプル履
歴を作成する必要があります。

   簡略化された履歴を見るときにユーザーが直面する一般的な問題は、ファイ
ルを変更したことがわかっているコミットが、ファイルの簡略化された履歴に表
示されないことです。そこで、新しい例を示し、その場合に ‘--full-history’
や ‘--simplify-merges’ などのオプションがどのように機能するかを示しまし
ょう。

               .-A---M-----C--N---O---P
              /     / \  \  \/   /   /
             I     B   \  R-'`-Z'   /
              \   /     \/         /
               \ /      /\        /
                `---X--'  `---Y--'

   この例では、 ‘I’ が ‘file.txt’ を作成し、それが ‘A’ と‘B‘ と ‘X’ にて
さまざまな方法で変更されたとします。ひとり親のコミット ‘C’ と ‘Z’ と ‘Y’
は ‘file.txt’ を変更していません。マージコミット ‘M’ は、マージの競合を
解決して、 ‘A’ と ‘B’ の両方の変更を含めることによって作成されたため、ど
ちらにもTREESAMEではありません。ただし、マージコミット ‘R’ は、 ‘M’ の
‘file.txt`の内容を無視し、 `X’ の ‘file.txt’ の内容のみを取得することに
よって作成されました。 したがって、 ‘R’ は ‘X’ へのTREESAMEですが、 ‘M’
はそうではありません。最後に、 ‘N’ を作成するための自然なマージ解決は、
‘R’ で ‘file.txt’ の内容を取得することです。したがって、 ‘N’ は ‘C’ では
なく ‘R’ へのTREESAMEです。マージコミット ‘O’ と ‘P’ は、最初の親には
TREESAMEですが、2番目の親である ‘Z’ と ‘Y’ にはついてはそうではありませ
ん。

   デフォルトモードを使用する場合、 ‘N’ と ‘R’ は両方ともTREESAMEの親を
持っているため、これらのエッジはウォークされ、他のエッジは無視されます。
結果の履歴グラフは以下のとおりです:

             I---X

   ‘--full-history’ を使用する場合、Gitはすべてのエッジを巡ります。これ
により、コミット ‘A’ と ‘B’ と マージ ‘M’ が検出されますが、マージコミッ
ト ‘O’ と ‘P’ も明らかになります。 親を書き換えると、結果のグラフは以下
のようになります:

               .-A---M--------N---O---P
              /     / \  \  \/   /   /
             I     B   \  R-'`--'   /
              \   /     \/         /
               \ /      /\        /
                `---X--'  `------'

   ここで、マージコミット ‘O’ と ‘P’ は、実際には ‘file.txt’ への変更を
提供しなかったため、余分なノイズを提供します。古いバージョンの
‘file.txt’ に基づいたトピックのみをマージしました。これは、多くの寄稿者
が並行して作業し、トピックブランチを単一のトランクに沿ってマージするワー
クフローを使用するリポジトリの一般的な問題です。開発に関係のないマージが
‘--full-history’ の結果に表示されます。

   ‘--simplify-merges’ オプションを使用すると、コミット ‘O’ と ‘P’ が結
果から消えます。 これは、 ‘O’ と ‘P’ の書き直された2番目の親が、最初の親
から到達可能であるためです。これらのエッジが削除されると、コミットは、親
にとってTREESAMEである単一の親のコミットのように見えます。これはコミット
‘N’ にも発生し、以下のような履歴ビューが表示されます:

               .-A---M--.
              /     /    \
             I     B      R
              \   /      /
               \ /      /
                `---X--'

   このビューでは、 ‘A’ と ‘B’ と ‘X’ からの重要なひとり親の変更がすべて
表示されます。また、慎重に解決されたマージ ‘M’ とそれほど慎重に解決され
ていないマージ ‘R’ も表示されます。これは通常、コミット ‘A’ と ‘B’ がデ
フォルトのビューの履歴から「消えた」理由を判断するのに十分な情報です。た
だし、このアプローチにはいくつかの問題があります。

   最初の問題はパフォーマンスです。以前のオプションとは異なり、
‘--simplify-merges’ オプションでは、単一の結果を返す前にコミット履歴全体
をウォークする必要があります。これにより、非常に大規模なリポジトリでこの
オプションを使用するのが難しくなる可能性があります。

   2番目の問題は監査の1つです。多くの寄稿者が同じリポジトリで作業してい
る場合、どのマージコミットが重要なブランチに変更を導入したかが重要です。
上記の問題のあるマージ ‘R’ は、重要なブランチにマージするために使用され
たマージコミットではない可能性があります。 代わりに、マージ ‘N’ を使用し
て ‘R’ と ‘X’ を重要なブランチにマージしました。このコミットには、変更
‘X’ がコミットメッセージの ‘A’ と ‘B’ からの変更を上書きするようになった
理由に関する情報が含まれている可能性があります。

‘--show-pulls’
     デフォルトの履歴に表示されるコミットに加えて、最初の親には
     TREESAMEではなく、後の親にはTREESAMEである各マージコミットを表示し
     ます。

     マージコミットが ‘--show-pulls’ に含まれている場合、マージは別のブ
     ランチから変更を「プル」したかのように扱われます。この例で
     ‘--show-pulls’ を使用すると(他のオプションは使用しない場合、)結果の
     グラフは行かのようになります:

                  I---X---R---N

     ここで、コミット ‘X’ と ‘R’ をそれぞれベースブランチにプルしたため
     、マージコミット ‘R’ と ‘N’ が含まれています。これらのマージは、コ
     ミット ‘A’ と ‘B’ がデフォルトの履歴に表示されない理由です。

     ‘--show-pulls’ が ‘--simplify-merges’ とペアになっている場合、グラ
     フには必要なすべての情報が含まれます:

                    .-A---M--.   N
                   /     /    \ /
                  I     B      R
                   \   /      /
                    \ /      /
                     `---X--'

     ‘M’ は ‘R’ から到達可能であるため、 ‘N’ から ‘M’ へのエッジが単純化
     されていることに注意してください。ただし、 ‘N’ は、変更 ‘R’ をメイ
     ンブランチに「プル」したため、重要なコミットとして履歴に表示されま
     す。

   ‘--simplify-by-decoration’ オプションを使用すると、タグで参照されてい
ないコミットを省略して、履歴のトポロジの全体像のみを表示できます。コミッ
トは、(1)タグによって参照されている場合、または (2)コマンドラインで指定
されたパスの内容を変更した場合に、!TREESAMEとしてマークされます(つまり、
上記の履歴簡略化ルールの後に保持されます)。他のすべてのコミットは
TREESAMEとしてマークされます(簡略化される可能性があります)。


MAPPING AUTHORS
***************

See gitmailmap(5).

   注意: (標準入力でログの内容を処理するため) ‘git shortlog’ がリポジト
リの外部で実行される場合、現在のディレクトリで ‘.mailmap’ ファイルが検索
されることに注意してください。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-show-branch,  Up: Top

Name
****

git-show-branch — ブランチとそのコミットを表示します


Synopsis
********

     git show-branch [-a|–all] [-r|–remotes] [–topo-order | –date-order]
                     [–current] [–color[=<when>] | –no-color] [–sparse]
                     [–more=<n> | –list | –independent | –merge-base]
                     [–no-name | –sha1-name] [–topics]
                     [(<rev> | <glob>)…]
     git show-branch (-g|–reflog)[=<n>[,<base>]] [–list] [<ref>]


DESCRIPTION
***********

<rev> または <glob> (または、 refs/heads および/または refs/tags の下の
すべてのref)で名前が付けられたコミットから始まるコミットの祖先グラフを半
視覚的に表示します。

   一度に29を超えるブランチとコミットを表示することはできません。

   コマンドラインで <rev> または <glob> が指定されていない場合は、
‘showbranch.default’ の複数値(multi-valued)の構成アイテムを使用します。


OPTIONS
*******

<rev>
     通常はブランチヘッドまたはタグに名前を付ける任意の拡張SHA-1式
     (gitrevisions(7) 参照)。

<glob>
     refs/ の下のブランチ名またはタグ名に一致するグロブパターン。 たとえ
     ば、 refs/heads/topic の下に多くのトピックブランチがある場合、
     ‘topic/*’ を指定するとそれらすべてが表示されます。

‘-r’
‘--remotes’
     リモート追跡ブランチを表示します。

‘-a’
‘--all’
     リモート追跡ブランチとローカルブランチの両方を表示します。

‘--current’
     このオプションを使用すると、コマンドラインに指定されていない場合に
     表示されるrevのリストに現在のブランチが含まれます。

‘--topo-order’
     デフォルトでは、ブランチとそのコミットは新しい順に表示されます。こ
     のオプションを使用すると、トポロジカル順に表示されます(つまり、子孫
     のコミットは親の前に表示されます)。

‘--date-order’
     このオプションは、すべての子の前に親が来ないという意味で
     ‘--topo-order’ に似ていますが、それ以外の場合、コミットはコミット日
     に従って順序付けられます。

‘--sparse’
     デフォルトでは、出力には、表示されている1つの先端からのみ到達可能な
     マージが省略されています。このオプションにより、それらが表示されま
     す。

‘--more=<n>’
     通常、コマンドは、すべてのブランチの共通の祖先であるコミットを表示
     すると出力を停止します。このフラグは、それを超えて共通のコミットを
     <n> 回表示するようコマンドに指示します。 <n>が負の場合、コミットの
     祖先ツリーを表示せずに、指定された<reference>のみを表示します。

‘--list’
     ‘--more=-1’ と同義です。

‘--merge-base’
     コミットリストを表示する代わりに、指定されたコミットの可能なマージ
     ベースを決定します。すべてのマージベースは、指定されたすべてのコミ
     ットに含まれます。 これは、 git-merge-base(1) が3つ以上のコミットの
     場合を処理する方法とは異なります。

‘--independent’
     与えられた <reference> のうち、他の <reference> から到達できないも
     ののみを表示します。

‘--no-name’
     各コミットの名前付け文字列(naming strings)を表示しません。

‘--sha1-name’
     ヘッドからコミットに到達するためのパスを使用してコミットに名前を付
     ける代わりに(たとえば、「master」の祖父母を意味する「master~2」)、
     オブジェクト名の一意のプレフィックスを使用してコミットに名前を付け
     ます。

‘--topics’
     指定された最初のブランチにないコミットのみを表示します。これは、す
     でに開発のメインラインにあるコミットを非表示にすることで、トピック
     ブランチを追跡するのに役立ちます。 ‘git show-branch --topics master
     topic1 topic2’ を指定すると、 ‘git rev-list {caret}master topic1
     topic2’ で指定されたリビジョンが表示されます。

‘-g’
‘--reflog[=<n>[,<base>]] [<ref>]’
     指定された参照の最新の参照ログエントリを<n>個表示します。<base>が指
     定されている場合、<n>エントリはそのエントリから戻ります。 <base>は
     、カウントまたは日付として指定できます。 明示的な<ref>パラメータが
     指定されていない場合、デフォルトで現在のブランチ(またはデタッチされ
     ている場合は ‘HEAD’ )になります。

‘--color[=<when>]’
     所属するブランチに対応する各コミットのステータス記号(‘*’ ‘！’ ‘+’
     ‘-’ )に色を付けます。値は always (デフォルト) または never または
     auto である必要があります。

‘--no-color’
     構成ファイルでデフォルトのカラー出力が指定されている場合でも、カラ
     ー出力をオフにします。 ‘--color=never’ と同じです。

   ‘--more@ と `-list’ と ‘-independent’ と ‘--merge-base’ オプションは
相互に排他的であることに注意してください。


OUTPUT
******

N <references> が与えられた場合、最初のN行はコミットメッセージからの各
1行説明です。 $GIT_DIR/HEAD が指すブランチヘッドには、アスタリスクの ‘*’
文字が接頭辞として付けられ、他のヘッドには、 ‘!’ 文字が接頭辞として付け
られます。

   これらのN行に続いて、コミットごとに1行のログが表示され、N桁インデント
されます。 コミットがI番目のブランチにある場合、I番目のインデント文字は
‘+’ 記号を示します。それ以外の場合は、スペースが表示されます。 マージコ
ミットは ‘-’ 記号で示されます。各コミットは、そのコミットに名前を付ける
ための拡張SHA-1として使用できる短い名前が表示されます。

   以下の例は、「master」と「fixes」と「mhf」の3つのブランチを示していま
す:

     $ git show-branch master fixes mhf
     * [master] Add 'git show-branch'.
      ! [fixes] Introduce "reset type" flag to "git reset"
       ! [mhf] Allow "+remote:local" refspec to cause --force when fetching.
     ---
       + [mhf] Allow "+remote:local" refspec to cause --force when fetching.
       + [mhf~1] Use git-octopus when pulling more than one heads.
      +  [fixes] Introduce "reset type" flag to "git reset"
       + [mhf~2] "git fetch --force".
       + [mhf~3] Use .git/remote/origin, not .git/branches/origin.
       + [mhf~4] Make "git pull" and "git fetch" default to origin
       + [mhf~5] Infamous 'octopus merge'
       + [mhf~6] Retire git-parse-remote.
       + [mhf~7] Multi-head fetch.
       + [mhf~8] Start adding the $GIT_DIR/remotes/ support.
     *++ [master] Add 'git show-branch'.

   これらの3つのブランチはすべて、共通のコミット[master]から分岐し、その
コミットメッセージは「Add ’git show-branch’」です。「fixes」ブランチは、
「gitreset」に「Resettype」フラグを導入するコミットを1つ追加します。「
mhf」ブランチは、他の多くのコミットを追加します。 現在のブランチは「
master」です。


EXAMPLES
********

プライマリブランチを ‘refs/heads’ のすぐ下に置き、トピックブランチをその
サブディレクトリに保持する場合は、構成ファイルに以下の情報を含めると役立
つ場合があります:

     [showbranch]
             default = --topo-order
             default = heads/*

   これにより、追加のパラメータがない ‘git show-branch’ は、プライマリブ
ランチのみを表示します。さらに、トピックブランチにいる場合は、それも表示
されます。

     $ git show-branch --reflog="10,1 hour ago" --list master

   これは、1時間前の時点で先端から戻った10個のreflogエントリを示していま
す。 ‘--list’ がない場合、出力には、これらのヒントがトポロジ的に相互にど
のように関連しているかも示されます。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-show-index,  Up: Top

Name
****

git-show-index — パックされたアーカイブインデックスを表示する


Synopsis
********

     git show-index [–object-format=<hash-algorithm>]


DESCRIPTION
***********

標準入力から、(git-pack-objects(1) または git-index-pack(1) で作成の
)Gitパックファイルの、 ‘.idx’ ファイルを読み取り、その内容をダンプします
。 出力は、行ごとに1つのオブジェクトで構成され、各行には2つまたは3つのス
ペースで区切られた複数列が含まれます:

   • 最初の列は、対応するパックファイル内のオブジェクトのバイト単位のオ
     フセットです。

   • 2番目の列はオブジェクトのオブジェクトIDです

   • インデックスバージョンが2以上の場合、3番目の列にはオブジェクトデー
     タのCRC32が含まれます

   オブジェクトは、インデックスファイルで見つかった順序で出力されます。
(正しく作成されたファイルであれば、)インデックスファイルはオブジェクト
IDソートされていなければなりません。

   注意: あなたは git-verify-pack(1) を呼び出すと、パックファイルに関す
る情報をよりたくさん取得できます。けれども、このコマンド(show-index)はイ
ンデックスファイル自体のみを考慮するため、より高速で柔軟性があります。


OPTIONS
*******

‘--object-format=<hash-algorithm>’
     インデックスファイルのためのオブジェクト形式(ハッシュアルゴリズム
     )を指定します。有効な値は _sha1_ および (有効な場合) _sha256_ です
     。 デフォルトは、現在のリポジトリのアルゴリズム
     (‘extensions.objectFormat’ で設定)、または値が設定されていないかリ
     ポジトリの外部にある場合は _sha1_ です。

     このオプションは実験的なものです！ SHA-256のサポートは実験的なもの
     であり、まだ初期段階です。 SHA-256リポジトリは、通常、「通常の」
     SHA-1リポジトリと作業を共有できません。 たとえば、SHA-256リポジトリ
     に関連するGit内部ファイル形式は、下位互換性のない方法で変更される可
     能性があると想定する必要があります。テスト目的でのみ
     ‘--object-format=sha256’ を使用してください。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-show-ref,  Up: Top

Name
****

git-show-ref — ローカルリポジトリ内の参照を一覧表示します


Synopsis
********

     git show-ref [-q|–quiet] [–verify] [–head] [-d|–dereference]
                  [-s|–hash[=<n>]] [–abbrev[=<n>]] [–tags]
                  [–heads] [–] [<pattern>…]
     git show-ref –exclude-existing[=<pattern>]


DESCRIPTION
***********

ローカルリポジトリで使用可能な参照を、関連するコミットIDとともに表示しま
す。結果はパターンを使用してフィルタリングでき、タグはオブジェクトIDに逆
参照できます。さらに、特定のrefが存在するかどうかをテストするために使用
できます。

   デフォルトでは、タグとヘッドとリモートrefを表示します。

   ‘--exclude-existing’ 形式は、逆を行うフィルターです。 stdinから1行に
1つのrefを読み取り、ローカルリポジトリに存在しないものを表示します。

   ‘.git’ ディレクトリの下のファイルに直接アクセスするために、このユーテ
ィリティの使用をお勧めします。


OPTIONS
*******

‘--head’
     通常は検索除外される場合でも、HEAD参照を表示します。

‘--heads’
‘--tags’
     それぞれ「refs/heads」と「refs/tags」に制限します。これらのオプショ
     ンは相互に排他的ではありません。 両方を指定すると、「refs/heads」と
     「refs/tags」に保存されている参照が表示されます。

‘-d’
‘--dereference’
     タグをオブジェクトIDにも逆参照します。 ‘{caret}{}’ が追加されて表示
     されます。

‘-s’
‘--hash[=<n>]’
     参照名ではなく、SHA-1ハッシュのみを表示します。 ‘--dereference’ と
     組み合わせると、逆参照されたタグがSHA-1の後に依然として表示されます
     。

‘--verify’
     正確な参照パスを要求することにより、より厳密な参照チェックを有効に
     します。エラーコード1を返す以外に、 ‘--quiet’ が指定されていない場
     合はエラーメッセージも出力します。

‘--abbrev[=<n>]’
     オブジェクト名を省略します。 ‘--hash’ を使用する場合は ‘--hash
     --abbrev’ と言う必要はなく、 ‘--hash=n’ で十分です。

‘-q’
‘--quiet’
     結果をstdoutに出力しないでください。 ‘--verify’ と組み合わせると、
     参照が存在するかどうかをサイレントにチェックするために使用できます
     。

‘--exclude-existing[=<pattern>]’
     "‘^(?:<anything>\s)?<refname>(?:\^{})?$’" 形式でstdinからrefを読み
     取り、そのそれぞれに対して以下のアクションを実行するフィルターとし
     て _git show-ref_ を使います: (1) 行末の ‘{caret}{}’ を削除します
     (2) パターンが指定されていて、refnameとヘッドが一致(head-match)しな
     い場合は無視 (3) refnameが整形式(well-formed)のrefnameでない場合は
     警告し、スキップします (4) refnameがローカルリポジトリに存在する
     refである場合は無視 (5) それ以外の場合は、行を出力します。

<pattern>…
     1つ以上のパターンに一致する参照を表示します。パターンはフルネームの
     末尾から一致し、完全な部品のみが一致します。 「master」は「
     refs/heads/master」や「refs/remotes/origin/master」や「
     refs/tags/jedi/master」と一致しますが、「refs/heads/mymaster」とか
     「refs/remotes/master/jedi」とは一致しません 。


OUTPUT
******

出力形式: <SHA-1 ID><空白><参照名>

     $ git show-ref --head --dereference
     832e76a9899f560a90ffd62ae2ce83bbeff58f54 HEAD
     832e76a9899f560a90ffd62ae2ce83bbeff58f54 refs/heads/master
     832e76a9899f560a90ffd62ae2ce83bbeff58f54 refs/heads/origin
     3521017556c5de4159da4615a39fa4d5d2c279b5 refs/tags/v0.99.9c
     6ddc0964034342519a87fe013781abf31c6db6ad refs/tags/v0.99.9c^{}
     055e4ae3ae6eb344cbabf2a5256a49ea66040131 refs/tags/v1.0rc4
     423325a2d24638ddcc82ce47be5e40be550f4507 refs/tags/v1.0rc4^{}
     ...

   ( ‘--dereference’ ではなく) ‘--hash’ を使用する場合の出力形式: <SHA-1
ID>

     $ git show-ref --heads --hash
     2e3ba0114a1f52b47df29743d6915d056be13278
     185008ae97960c8d551adcd9e23565194651b5d1
     03adf42c988195b50e1a1935ba5fcbc39b2b029b
     ...


EXAMPLES
********

タグやヘッドなど、「master」と呼ばれるすべての参照を表示するには、参照の
名前付け階層の深さに関係なく、以下を使用します:

             git show-ref master

   これには、「refs/heads/master」だけでなく、「
refs/remote/other-repo/master」も表示されます(そのような参照が存在する場
合)。

   ‘--verify’ フラグを使用する場合、コマンドには正確なパスが必要です:

             git show-ref --verify refs/heads/master

   これは「master」と呼ばれる正確なブランチにのみ一致します。

   一致するものがない場合、「git show-ref」はエラーコード1を返し、検証の
場合はエラーメッセージを表示します。

   スクリプトの場合は、 ‘--quiet’ フラグを使用して静かにするように要求で
きます。これにより、以下のようにできます

             git show-ref --quiet --verify -- "refs/heads/$headname" ||
                     echo "$headname is not a valid branch"

   これは、特定のブランチが存在するかどうかを確認します(実際には結果を表
示したくないので、あいまいな部分一致で問題が発生しないように、完全な
refnameを使用します)。

   タグのみ、または適切なブランチヘッドのみを表示するには、それぞれ「
–tags」かつ/または「–heads」を使用します(両方を使用すると、タグとヘッド
が表示されますが、 refs/ サブディレクトリの下にある他のランダムな参照は
表示されません)。

   タグオブジェクトの自動逆参照を行うには、「-d」または「–dereference」
フラグを使用して、以下のことができるようにします

             git show-ref --tags --dereference

   これは、すべてのタグのリストを、それらが逆参照するものと一緒に取得し
ます。


FILES
*****

‘.git/refs/*’, ‘.git/packed-refs’


SEE ALSO
********

git-for-each-ref(1), git-ls-remote(1), git-update-ref(1),
gitrepository-layout(5)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-show,  Up: Top

Name
****

git-show — さまざまなタイプのオブジェクトを表示


Synopsis
********

     git show [<options>] [<object>…]


DESCRIPTION
***********

1つまたはそれ以上のオブジェクト(ブロブ・ツリー・タグ・コミット)を表示し
ます。

   コミットの場合、ログメッセージとテキストの差分が表示されます。 また、
_git diff-tree –cc_ によって生成された特別な形式でマージコミットを示しま
す。

   タグの場合、タグメッセージと参照オブジェクトが表示されます。

   ツリーの場合は、名前が表示されます(‘--name-only’ オプション付きの
_git ls-tree_ 相当)。

   プレーンブロブの場合は、プレーンコンテンツが表示されます。

   このコマンドは、「git diff-tree」コマンドに適用可能なオプションを使用
して、コミットによって導入された変更の表示方法を制御します。

   このマニュアルページでは、最も頻繁に使用されるオプションについてのみ
説明します。


OPTIONS
*******

<object>…
     表示するオブジェクトの名前(デフォルトは「HEAD」)。オブジェクト名を
     綴る方法のより完全なリストについては、 gitrevisions(7) の「
     SPECIFYING REVISIONS」セクションを参照してください。

‘--pretty[=<format>]’
‘--format=<format>’
     コミットログの内容を指定された形式できれいに印刷(pretty-print)しま
     す。 _<format>_ は oneline・short・medium・full・fuller・
     reference・email・raw・format:<string>・tformat:<string> のいずれか
     になります。 _<format>_ が上記のいずれでもなく、 _%placeholder_ が
     含まれている場合、 _–pretty=tformat:<format>_ が指定されたかのよう
     に動作します。

     各フォーマットの詳細については、 "PRETTY FORMATS" セクションを参照
     してください。 _=<format>_ の部分を省略すると、デフォルトで
     _medium_ になります。

     注意: リポジトリー構成でデフォルトのpretty formatを指定できます
     (git-config(1) 参照)。

‘--abbrev-commit’
     40バイトの16進コミットオブジェクト名全体を表示する代わりに、オブジ
     ェクトに一意の名前を付けるプレフィックスを表示します。
     "–abbrev=<n>" (表示されている場合はdiff出力も変更します)オプション
     を使用して、プレフィックスの最小長を指定できます。

     これにより、80桁幅の端末を使用している人にとって "–pretty=oneline"
     がずっと読みやすくなるはずです。

‘--no-abbrev-commit’
     完全な40バイトの16進コミットオブジェクト名を表示します。 これにより
     、明示的または "–oneline" などの他のオプションによって暗黙的に示さ
     れる ‘--abbrev-commit’ が無効になります。また、 ‘log.abbrevCommit’
     変数をオーバーライドします。

‘--oneline’
     これは、 "–pretty=oneline –abbrev-commit" を一緒に使用するための省
     略形です。

‘--encoding=<encoding>’
     コミットオブジェクトは、ログメッセージに使用される文字エンコードを
     エンコードヘッダーに記録します。このオプションを使用して、ユーザー
     が好むエンコーディングでコミットログメッセージを再コーディングする
     ようにコマンドに指示できます。配管以外のコマンドの場合、これはデフ
     ォルトでUTF-8になります。オブジェクトが ‘X’ でエンコードされている
     と主張し、 ‘X’ で出力している場合、オブジェクトをそのまま出力するこ
     とに注意してください。これは、元のコミットの無効なシーケンスが出力
     にコピーされる可能性があることを意味します。同様に、 iconv(3) コミ
     ットの変換に失敗した場合、警告とともに元のオブジェクトをそのまま出
     力します。

‘--expand-tabs=<n>’
‘--expand-tabs’
‘--no-expand-tabs’
     出力に表示する前に、ログメッセージでタブ展開を実行します(タブ幅を
     <n> とみなして <n> 境界に揃うように空白で調整する)。
     ‘--expand-tabs’ は ‘--expand-tabs=8’ の省略形であり、
     ‘--no-expand-tabs’ は ‘--expand-tabs=0’ の省略形です。タブの展開を
     無効にします。

     デフォルトでは、タブはログメッセージを4つのスペースでインデントする
     きれいな形式(pretty formats)で展開されます(つまり、デフォルトの
     _medium_ と’full’ と _fuller_)。

‘--notes[=<ref>]’
     コミットログメッセージを表示するときに、コミットに注釈を付ける
     notes(git-notes(1) 参照)を表示します。これは、コマンドラインに
     ‘--pretty’ 、‘--format’ または ‘--oneline’ オプションが指定されてい
     ない場合の、 ‘git log’ と ‘git show’ と ‘ git whatchanged‘ コマンド
     のデフォルトです。

     デフォルトでは、表示されるnotesは、 ‘core.notesRef’ および
     ‘notes.displayRef’ 変数(または対応する環境変数オーバーライド)にリス
     トされているnote refからのものです。詳細については git-config(1) を
     参照してください。

     オプションの _<ref>_ 引数を使用して、refを使用して表示するnotesを検
     索します。 refは、 ‘refs/notes/’ で始まる完全なrefnameを指定できま
     す。 ‘notes/’ で始まるか、 ‘refs/’ で始まるか、それ以外で始まる場合
     、 ‘refs/notes/’ が接頭辞として付けられ、refのフルネームを形成しま
     す。

     複数の –notes オプションを組み合わせて、表示するノートを制御できま
     す。 例: "–notes=foo" は "refs/notes/foo" からのnotesのみを表示しま
     す。 "–notes=foo –notes" は、 "refs/notes/foo" とデフォルトのnotes
     ref(s) の両方のnotesを表示します。

‘--no-notes’
     notesを表示しないでください。 これは、notesが表示されるnotes refの
     リストをリセットすることにより、上記の ‘--notes’ オプションを無効に
     します。 オプションは、コマンドラインで指定された順序で解析されます
     。 "–notes –notes=foo –no-notes –notes=bar" は、 "refs/notes/bar" か
     らのnotesのみを表示します。

‘--show-notes[=<ref>]’
‘--[no-]standard-notes’
     これらのオプションは非推奨です。 代わりに、上記の –notes/–no-notes
     オプションを使用してください。

‘--show-signature’
     署名を ‘gpg --verify’ に渡して、署名されたコミットオブジェクトの有
     効性を確認し、出力を表示します。


PRETTY FORMATS
**************

コミットがマージであり、 pretty-format が _oneline_ または _email_ また
は _raw_ でない場合、 _Author:_ 行の前に追加の行が挿入されます。この行は
"Merge: " で始まり、先祖のコミットのハッシュがスペースで区切られて出力さ
れます。履歴の表示を制限している場合、たとえば、特定のディレクトリまたは
ファイルに関連する変更のみに関心がある場合、リストされたコミットは必ずし
も *直接* の親コミットのリストではない可能性があることに注意してください
。

   いくつかの組み込みフォーマットがあります。そして以下で説明するように
、 pretty.<name> 構成オプション(config option)を別のフォーマット名または
_format:_ 文字列に設定することで、追加のフォーマットを定義できます
(git-config(1) 参照)。組み込みフォーマットの詳細は以下のとおりです:

   • _oneline_

          <hash> <title line>

     これは、可能な限りコンパクトになるように設計されています。

   • _short_

          commit <hash>
          Author: <author>

          <title line>

   • _medium_

          commit <hash>
          Author: <author>
          Date:   <author date>

          <title line>

          <full commit message>

   • _full_

          commit <hash>
          Author: <author>
          Commit: <committer>

          <title line>

          <full commit message>

   • _fuller_

          commit <hash>
          Author:     <author>
          AuthorDate: <author date>
          Commit:     <committer>
          CommitDate: <committer date>

          <title line>

          <full commit message>

   • _reference_

          <abbrev hash> (<title line>, <short author date>)

     この形式は、コミットメッセージ内の別のコミットを参照するために使用
     され、 ‘--pretty='format:%C(auto)%h (%s, %ad)'’ と同じです。 デフォ
     ルトでは、別の ‘--date’ オプションが明示的に指定されていない限り、
     日付は ‘--date=short’ でフォーマットされます。formatプレースホルダ
     ーを使用する他の ‘format:’ と同様に、その出力は、 ‘--decorate’ や
     ‘--walk-reflogs’ などの他のオプションの影響を受けません。

   • _email_

          From <hash> <date>
          From: <author>
          Date: <author date>
          Subject: [PATCH] <title line>

          <full commit message>

   • _mboxrd_

     _email_ と同様ですが、コミットメッセージの "From " で始まる行(前に
     0個以上の ">" が付いている)は ">" でクォートされているため、新しい
     コミットの開始と混同されることはありません。

   • _raw_

     _raw_ 形式は、コミットオブジェクトに格納されているとおりにコミット
     全体を正確に表示します。とりわけ –abbrev または –no-abbrev のどちら
     が使用されているかに関係なく、ハッシュは完全に表示され、「親」
     (parents)情報は、移植や履歴の単純化を考慮せずに、真の親のコミットを
     示します。この形式は、コミットの表示方法に影響しますが、いわゆる
     ‘git log --raw’ の差分の表示方法ではありません。生のdiff形式で完全
     なオブジェクト名を取得するには、 ‘--no-abbrev’ を使用します。

   • _format:<string>_

     _format:<string>_ 形式を使用すると、表示する情報を指定できます。注
     意: これはprintf書式に少し似ていますが、 _\n_ の代わりに _%n_ を使
     用して改行を取得するという例外に注意してください。

     例: _format:"The author of %h was %an, %ar%nThe title was
     >>%s<<%n"_ は以下のように表示されます:

          The author of fe6e0ee was Junio C Hamano, 23 hours ago
          The title was >>t4119: test autocomputing -p<n> for traditional diff input.<<

     さて、以下がプレースホルダー達です:

        • 単一のリテラル文字に展開されるプレースホルダー:

          _%n_
               改行(newline)

          _%%_
               ’%’そのもの

          _%x00_
               16進数のバイト値を出力

        • うしろのプレースホルダーのフォーマッティングに影響するプレース
          ホルダー:

          _%Cred_
               赤色に切り替える

          _%Cgreen_
               緑色に切り替える

          _%Cblue_
               青色に切り替える。

          _%Creset_
               色をリセットする

          _%C(…)_
               git-config(1) の "CONFIGURATION FILE" 節の Values で説明
               されている色の指定。 デフォルトでは、色はログ出力が有効に
               なっている場合にのみ表示されます（ ‘color.diff’ または ‘
               color.ui‘ または ‘--color`によって、ターミナルに行く場合
               は前者の `auto’ 設定を尊重します)。 ‘%C(auto,...)’ は、
               default の歴史的同義語として受け入れられます(例:
               ‘%C(auto,red)’)。 ‘%C(always,...)’ を指定すると、色が有効
               になっていない場合でも色が表示されます(この形式やgitが色
               付けする可能性のある他のすべてのものを含め、出力全体の色
               を有効にするために ‘--color = always’ の使用を検討してく
               ださい)。 ‘auto’ のみ(つまり、 ‘%C(auto)’ )は、色が再び切
               り替わるまで、続くプレースホルダーで自動色付けをオンにし
               ます。

          _%m_
               左(‘<’) または 右(‘>’) または 境界 (‘-’) の印

          _%w([<w>[,<i1>[,<i2>]]])_
               git-shortlog(1) の -w オプションのように、 行の折り返しを
               切り替えます。

          _%<(<N>[,trunc|ltrunc|mtrunc])_
               次のプレースホルダーに少なくともN列を使用させ、 必要に応
               じて右側にスペースを埋め込みます。オプションで、出力がN列
               より長い場合は、先頭(ltrunc)または中間(mtrunc)または末尾
               (trunc)で切り捨てます。注意: 切り捨ては、 N >= 2 でのみ正
               しく機能することに注意してください。

          _%<|(<N>)_
               次のプレースホルダーを少なくともN番目の列まで取得し、 必
               要に応じて右側にスペースを埋め込みます

          _%>(<N>)_, _%>|(<N>)_
               それぞれ _%<(<N>)_ 、 _%<|(<N>)_ に似ていますが、 左側に
               スペースが埋め込まれています

          _%>>(<N>)_, _%>>|(<N>)_
               _%>(<N>)_ 、 _%>|(<N>)_ とそれぞれ似ていますが、 次のプレ
               ースホルダーが指定されたよりも多くのスペースを取り、その
               左側にスペースがある場合は、それらのスペースを使用します
               。

          _%><(<N>)_, _%><|(<N>)_
               それぞれ _%<(<N>)_ 、 _%<|(<N>)_ に似ていますが、 両側に
               パディングがあります(つまり、テキストが中央に配置されます
               )

        • コミットから抽出された情報に展開するプレースホルダー:

          _%H_
               コミットハッシュ

          _%h_
               省略されたコミットハッシュ

          _%T_
               ツリーハッシュ

          _%t_
               省略されたツリーハッシュ

          _%P_
               親のハッシュ達

          _%p_
               省略された親のハッシュ達

          _%an_
               作者名

          _%aN_
               作者名( .mailmap に関しては、git-shortlog(1) または
               git-blame(1) を参照)

          _%ae_
               作者電子メールアドレス

          _%aE_
               作者電子メールアドレス(.mailmap に関しては
               git-shortlog(1) または git-blame(1) を参照)

          _%al_
               作者電子メールアドレスアカウント名(local-part)( _@_ の前
               の部分)

          _%aL_
               作者電子メールアドレスアカウント名(local-part)(_%al_ 参照
               ) .mailmap に関しては git-shortlog(1) または git-blame(1)
               参照)

          _%ad_
               作成日(フォーマットに関しては –date= オプション参照)

          _%aD_
               作成日 RFC2822形式

          _%ar_
               作成日 相対(relative)形式

          _%at_
               作成日 UNIXタイムスタンプ形式

          _%ai_
               作成日 ISO 8601風形式

          _%aI_
               作成日 厳密なISO 8601形式

          _%as_
               作成日 短い形式(‘YYYY-MM-DD’)

          _%ah_
               作成日 human形式( git-rev-list(1) の ‘--date=human’ オプ
               ションのようなかんじ)

          _%cn_
               コミッター名

          _%cN_
               コミッター名( .mailmap に関しては git-shortlog(1) または
               git-blame(1) 参照)

          _%ce_
               コミッター電子メールアドレス

          _%cE_
               コミッター電子メールアドレス(.mailmap に関しては
               git-shortlog(1) または git-blame(1) 参照)

          _%cl_
               コミッター電子メールアドレスアカウント名(local-part)( _@_
               の前の部分)

          _%cL_
               コミッター電子メールアドレスアカウント名(local-part)(
               _%cl_ 参照) .mailmap に関しては git-shortlog(1) または
               git-blame(1) 参照)

          _%cd_
               コミッター日付(フォーマットに関しては –date= オプション参
               照)

          _%cD_
               コミッター日付 RFC2822形式

          _%cr_
               コミッター日付 相対(relative)形式

          _%ct_
               コミッター日付 UNIXタイムスタンプ形式

          _%ci_
               コミッター日付 ISO 8601風形式

          _%cI_
               コミッター日付 厳密なISO 8601形式

          _%cs_
               コミッター日付 短い形式(‘YYYY-MM-DD’)

          _%ch_
               コミッター日付 human形式(git-rev-list(1) の
               ‘--date=human’ オプションのようなかんじ)

          _%d_
               ref名 git-log(1) の –decorate オプションみたいなの

          _%D_
               " (", ")" で囲ってないref名

          _%(describe[:options])_
               git-describe(1) のような人間が読める名前。 説明できないコ
               ミットの場合は空の文字列。 ‘describe’ 文字列の後には、コ
               ロンと0個以上のカンマ区切りオプションを続けることができま
               す。タグが同時に追加または削除されると、説明に一貫性がな
               くなる可能性があります。

                  • _match=<pattern>_: "refs/tags/" プレフィックスを除い
                    て、指定された ‘glob(7)’ パターンに一致するタグのみ
                    を考慮します。

                  • _exclude=<pattern>_: "refs/tags/" プレフィックスを除
                    いて、指定された ‘glob(7)’ パターンに一致するタグを
                    考慮しないでください。

          _%S_
               コミットに到達したコマンドラインで指定されたref名 ( ‘git
               log --source’ など)は、 ‘git log’ でのみ機能します

          _%e_
               エンコーディング

          _%s_
               件名(subject)

          _%f_
               ファイル名に適した、サニタイズされた件名

          _%b_
               本文(body)

          _%B_
               生本文(raw body)(ラップされてない件名と本文)

          _%N_
               コミットノート(commit notes)

          _%GG_
               署名されたコミットの為のGPSからの生の検証メッセージ

          _%G?_
               良い(good)な(有効な)署名の場合は "G" 、 悪い(bad)な署名の
               場合は "B" 、有効性が不明(unknown)な良い署名の場合は "U"
               、期限切れ(eXpired)の良い署名の場合は "X" 、期限切れのキ
               ーで作成された良い署名の場合は "Y" 、取り消されたキーによ
               って作成された良い署名の場合は "R" 、署名を確認できない場
               合(キーの欠落など)は "E" 、署名がない場合は "N" を表示し
               ます。

          _%GS_
               署名されたコミットの署名者の名前を表示する

          _%GK_
               署名されたコミットに署名するために使用されるキーを表示す
               る

          _%GF_
               署名されたコミットに署名するために使用されるキーのフィン
               ガープリントを表示する

          _%GP_
               署名されたコミットに署名するためにサブキーが使用された 主
               キーのフィンガープリントを表示します

          _%GT_
               署名されたコミットに署名するために使用されるキーの信頼レ
               ベル(trust level)を表示します

          _%gD_
               reflogセレクター(例:‘refs/stash@{1}’ or ‘refs/stash@{2
               minutes ago}’) この形式は、 ‘-g’ オプションで説明されてい
               る規則に従います。 ‘@’ の前の部分は、コマンドラインで指定
               されたrefnameです(したがって、 ‘git log -g
               refs/heads/master’ は ‘refs/heads/master@{0}’ を生成しま
               す)。

          _%gd_
               短縮されたreflogセレクター。 ‘%gD’ と同じですが、 人間が
               読みやすいようにrefname部分が短縮されています(したがって
               、 ‘refs/heads/master’ は単に ‘master’ になります)。

          _%gn_
               reflog ID名

          _%gN_
               reflog ID名( .mailmap に関しては git-shortlog(1) または
               git-blame(1) 参照)

          _%ge_
               reflog ID 電子メールアドレス

          _%gE_
               reflog ID 電子メールアドレス( .mailmap に関しては
               git-shortlog(1) または git-blame(1) 参照)

          _%gs_
               reflog 件名

          _%(trailers[:options])_
               git-interpret-trailers(1) によって解釈されるようにボディ
               のトレーラーを表示します。 ‘trailers’ 文字列の後には、コ
               ロンと0個以上のカンマ区切りオプションを続けることができま
               す。いずれかのオプションが複数回提供された場合、それぞれ
               最後のものが優先されます。

               ブール値オプションは、オプションの値 ‘[=<BOOL>]’ を受け入
               れます。 値 ‘true’ 、‘false’ 、 ‘on’ 、‘off’ などはすべて
               受け入れられます。 git-config(1) の "EXAMPLES" の
               "boolean" サブセクションを参照してください。ブール値オプ
               ションが値なしで指定された場合、それは有効を指定した事に
               なります。

                  • _key=<K>_ は指定されたキーを持つトレーラーのみを表示
                    します。マッチングは大文字と小文字を区別せずに行われ
                    、末尾のコロンはオプションです。オプションが複数回指
                    定されている場合、いずれかのキーに一致するトレーラー
                    行が表示されます。このオプションは自動的に ‘only’ オ
                    プションを有効にして、トレーラーブロック内の非トレー
                    ラー行が非表示になるようにします。それが望ましくない
                    場合は、 ‘only=false’ で無効にすることができます。 た
                    とえば、 ‘%(trailers:key=Reviewed-by)’ は、キーが
                    ‘Reviewed-by‘のトレーラー行を表示します。

                  • _only[=<BOOL>]_ はトレーラーブロックに非トレーラー行
                    を含めるかどうかを選択します。

                  • _separator=<SEP>_ はトレーラー行の間に挿入される区切
                    り文字を指定します。このオプションが指定されていない
                    場合、各トレーラー行は改行文字で終了します。文字列
                    SEPには、上記のリテラルフォーマットコードが含まれる
                    場合があります。区切り文字としてコンマを使用するには
                    、次のオプションとして解析されないよう ‘%x2C’ を使用
                    する必要があります。 たとえば、
                    %(trailers:key=Ticket,separator=%x2C )‘ は、キーが
                    "Ticket" であるすべてのトレーラー行をカンマとスペー
                    スで区切って表示します。

                  • _unfold[=<BOOL>]_ は interpret-trailer の ‘--unfold’
                    オプションが指定されたかのように動作させます。たとえ
                    ば、 ‘%(trailers:only,unfold=true)’ が展開され、すべ
                    てのトレーラー行が表示されます。

                  • _keyonly[=<BOOL>]_ トレーラーのキー部分のみを表示。

                  • _valueonly[=<BOOL>]_ トレーラーの値部分のみ表示。

                  • _key_value_separator=<SEP>_ トレーラー行の間に挿入さ
                    れる区切り文字を指定します。このオプションが指定され
                    ていない場合、各トレーラーのキーと値のペアは ": " で
                    区切られます。 それ以外の場合は、上記の
                    _separator=<SEP>_ と同じセマンティクスを共有します。

     *Note*

     一部のプレースホルダーは、リビジョントラバーサルエンジンに指定され
     た他のオプションに依存する場合があります。 たとえば、 ‘%g*’ reflogオ
     プションは、reflogエントリをトラバースしない限り(たとえば、 ‘git
     log -g`によって)空の文字列を挿入します。コマンドラインで
     `--decorate’ がまだ指定されていない場合、 ‘%d’ と ‘%D’ プレースホル
     ダーは「短い」(short)装飾形式を使用します。

   プレースホルダーの _%_ の後に ‘+’ (プラス記号)を追加すると、プレース
ホルダーが空でない文字列に展開される場合に限り、展開の直前に改行が挿入さ
れます。

   プレースホルダーの _%_ の後に ‘-’ (マイナス記号)を追加すると、プレー
スホルダーが空の文字列に展開された場合にのみ、展開の直前の連続するすべて
の改行が削除されます。

   プレースホルダーの _%_ の後に ‘ ‘ (スペース)を追加すると、プレースホ
ルダーが空でない文字列に展開される場合に限り、展開の直前にスペースが挿入
されます。

   • _tformat:_

     _tformat:_ 形式は、 "separator" セマンティクスの代わりに
     "terminator" セマンティクスを提供することを除いて、 _format:_ とま
     ったく同じように機能します。 つまり、各コミットには、エントリ間に区
     切り文字を配置するのではなく、メッセージターミネータ文字(通常は改行
     )が追加されます。 これは、「1行」形式と同様に、1行形式の最終エント
     リが新しい行で適切に終了することを意味します。 例えば:

          $ git log -2 --pretty=format:%h 4da45bef \
            | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
          4da45be
          7134973 -- NO NEWLINE

          $ git log -2 --pretty=tformat:%h 4da45bef \
            | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
          4da45be
          7134973

     加えて、 ‘%’ が含まれている認識されない文字列は、その前に
     ‘tformat:’ があるかのように解釈(interpret)されます。 たとえば、以下
     の2つは同等です:

          $ git log -2 --pretty=tformat:%h 4da45bef
          $ git log -2 --pretty=%h 4da45bef


DIFF FORMATTING
***************

以下のオプションを使用して、 ‘git show’ がdiff出力を生成する方法を変更で
きます。

‘-p’
‘-u’
‘--patch’
     パッチを生成します(generating patches に関するセクションを参照)。

‘-s’
‘--no-patch’
     diff出力を抑制します。デフォルトでパッチを表示する ‘git show’ のよ
     うなコマンド、または ‘--patch’ の効果をキャンセルする場合に便利です
     。

‘--diff-merges=(off|none|on|first-parent|1|separate|m|combined|c|dense-combined|cc)’
‘--no-diff-merges’
     マージコミットに使用するdiff形式を指定します。 ‘--first-parent’ が
     使用されている場合を除き、デフォルトは ‘dense-combined’ です。使用
     されている場合は、 ‘first-parent’ がデフォルトです。

     ‘--diff-merges=(off|none)’
     ‘--no-diff-merges’
          マージコミットのdiffの出力を無効にします。暗黙の値を上書きする
          のに便利です。

     ‘--diff-merges=on’
     ‘--diff-merges=m’
     ‘-m’
          このオプションにより、マージコミットのdiff出力がデフォルトの形
          式で表示されます。 ‘-m’ は、 ‘-p’ も指定されている場合にのみ出
          力を生成します。デフォルトの形式は、 ‘log.diffMerges’ 構成パラ
          メーター(configuration parameter)を使用して変更できます。デフ
          ォルト値は ‘separate’ です。

     ‘--diff-merges=first-parent’
     ‘--diff-merges=1’
          このオプションにより、マージコミットは最初の親に関してのみ完全
          なdiffを表示します。

     ‘--diff-merges=separate’
          これにより、マージコミットは各親に関して完全なdiffを表示します
          。親ごとに個別のログエントリとdiffが生成されます。

     ‘--diff-merges=combined’
     ‘--diff-merges=c’

‘-c:’
     このオプションを使用すると、マージコミットのdiff出力は、親と結果の
     ペアごとの差分を一度に1つずつ表示するのではなく、各親からの差分をマ
     ージ結果に同時に表示します。さらに、すべての親から変更されたファイ
     ルのみが一覧表示されます。 ‘-c’ は ‘-p’ の機能を含んでいます。

     ‘--diff-merges=dense-combined’
     ‘--diff-merges=cc’
     ‘--cc’
          このオプションを使用すると、 ‘--diff-merges=Combined’ によって
          生成される出力は、親のコンテンツに2つの派生(variants)しかない
          、興味のないハンクを省略してさらに圧縮され、マージ結果は変更な
          しでそのうちの1つを選択します。 ‘--cc’ は ‘-p’ の機能を含んで
          います。

‘--combined-all-paths’
     このフラグにより、結合された差分(マージコミットに使用)にすべての親
     からのファイルの名前が一覧表示されます。したがって、これは
     ‘--diff-merges=[dense-]combined’ が使用されている場合にのみ有効であ
     り、ファイル名の変更が検出された場合(つまり、名前の変更またはコピー
     の検出が要求された場合)にのみ役立つ可能性があります。

‘-U<n>’
‘--unified=<n>’
     通常の3行ではなく、<n> 行の内容でdiffを生成します。 ‘--patch’ の機
     能を含んでいます。

‘--output=<file>’
     stdout ではなく指定のファイルに出力します。

‘--output-indicator-new=<char>’
‘--output-indicator-old=<char>’
‘--output-indicator-context=<char>’
     生成されたパッチの新しい行、古い行、またはコンテキスト行を示すため
     に使用される文字を指定します。 通常、それらはそれぞれ _+_ 、 _-_ 、
     ’ ’ です。

‘--raw’
     コミットごとに、生の差分形式を使用して変更の概要を表示します。
     git-diff(1) の "RAW OUTPUT FORMAT" セクションを参照してください。 こ
     れは、ログ自体をraw形式で表示することとは異なります。 これは
     ‘--format=raw’ で 実現できます。

‘--patch-with-raw’
     ‘-p --raw’ の同義語。

‘-t’
     diff出力にツリーオブジェクトを表示します。

‘--indent-heuristic’
     diffハンクの境界をずらす(shift)ヒューリスティックを有効にして、パッ
     チを読みやすくします。 これがデフォルトです。

‘--no-indent-heuristic’
     インデントヒューリスティック(indent heuristic)を無効にします。

‘--minimal’
     より多くの時間を費やして、可能な限り最小のdiffが生成されるようにし
     ます。

‘--patience’
     "patience diff" アルゴリズムを使用してdiffを生成します。

‘--histogram’
     "histogram diff" アルゴリズムを使用してdiffを生成します。

‘--anchored=<text>’
     "anchored diff" アルゴリズムを使用してdiffを生成します。

     このオプションは複数回指定できます。

     行がソースと宛先の両方に存在し、1回だけ存在し、このテキストで始まる
     場合、このアルゴリズムは、その行が出力に削除または追加として表示さ
     れないようにします。内部で "patience diff" アルゴリズムを使用します
     。

‘--diff-algorithm={patience|minimal|histogram|myers}’
     diffアルゴリズムを選択します。その派生(variants)は以下のとおりです:

     ‘default’, ‘myers’
          基本的な貪欲な差分アルゴリズム(greedy diff algorithm)。現在、
          これがデフォルトです。

     ‘minimal’
          より多くの時間を費やして、可能な限り最小のdiffが生成されるよう
          にします。

     ‘patience’
          パッチを生成する時に "patience diff" アルゴリズムを使います。

     ‘histogram’
          このアルゴリズムは、忍耐アルゴリズム(patience algorithm)を拡張
          して、「発生率の低い共通要素をサポート」(support
          low-occurrence common elements)します。

     たとえば、 あなたが ‘diff.algorithm’ 変数をデフォルト以外の値に設定
     した上で、それでもデフォルト値を使用する場合は、
     ‘--diff-algorithm=default’ オプションを使用する必要があります。

‘--stat[=<width>[,<name-width>[,<count>]]]’
     diffstatを生成します。 デフォルトでは、必要なだけのスペースがファイ
     ル名部分に使用され、残りはグラフ部分に使用されます。最大幅はデフォ
     ルトで端末幅、または端末に接続されていない場合は80桁であり、
     ‘<width>’ で上書きできます。ファイル名部分の幅は、コンマの後に別の
     幅 ‘<name-width>’ を指定することで制限できます。グラフ部分の幅は、
     ‘--stat-graph-width=<width>’ (統計グラフを生成するすべてのコマンド
     に影響します)を使用するか、 ‘diff.statGraphWidth=<width>’ ( ‘git
     format-patch’ に影響しません)を設定することによって制限できます。
     3番目のパラメータ ‘<count>’ を指定することにより、出力を最初の
     ‘<count>’ 行に制限し、それに ‘...’ が続く形にできます。

     これらのパラメータは、 ‘--stat-width=<width>’ と
     ‘--stat-name-width=<name-width>’ と ‘--stat-count=<count>’ を使用し
     て個別に設定することもできます。

‘--compact-summary’
     ファイルの作成や削除( "new" または "gone" 。オプションでシンボリッ
     クリンクの場合は "+l" )、diffstatのモード変更(実行可能ビットを追加
     または削除する場合は、それぞれ "+x" または "-x" )など、拡張ヘッダー
     情報の要約を出力します。情報はファイル名部分とグラフ部分の間に置か
     れます。本機能は ‘--stat’ の機能を含んでいます。

‘--numstat’
     ‘--stat`に似ていますが、プログラムで処理しやすい(machine friendly)よ
     うに、追加および削除された行数を10進表記とパス名で省略形なしで表示
     します。バイナリファイルの場合、 `0 0’ の代わりに2つの ‘-’ を出力し
     ます。

‘--shortstat’
     変更されたファイルの総数と、追加および削除された行の数を含む
     ‘--stat’ 形式の最後の行のみを出力します。

‘-X[<param1,param2,...>]’
‘--dirstat[=<param1,param2,...>]’
     各サブディレクトリの相対的な変更量の分布を出力します。 ‘--dirstat’
     の動作は、パラメータのコンマ区切りリストを渡すことでカスタマイズで
     きます。デフォルトは、 ‘diff.dirstat’ 構成変数によって制御されます
     (git-config(1) 参照)。以下のパラメータを使用できます:

     ‘changes’
          ソースから削除された、または宛先に追加された行をカウントして、
          dirstat数を計算します。これは、ファイル内の純粋なコード移動の
          量を無視します。つまり、ファイル内の行の再配置は、他の変更ほど
          カウントされません。これは、パラメーターが指定されていない場合
          のデフォルトの動作です。

     ‘lines’
          通常の行ベースのdiff分析を実行し、削除/追加された行数を合計し
          て、dirstat数を計算します。 (バイナリファイルの場合、バイナリ
          ファイルには行の概念がないため、代わりに64バイトのチャンクをカ
          ウントします)。 これは ‘changes’ 動作よりも高価な ‘--dirstat’
          動作ですが、他の変更と同じようにファイル内の再配置された行をカ
          ウントします。結果の出力は、他の ‘--*stat’ オプションから得ら
          れるものと一致しています。

     ‘files’
          変更されたファイルの数を数えて、dirstat数を計算します。変更さ
          れた各ファイルは、dirstat分析で等しくカウントされます。これは
          、ファイルの内容をまったく調べる必要がないため、計算コストが最
          もかからない ‘--dirstat’ の動作です。

     ‘cumulative’
          親ディレクトリの子ディレクトリの変更も同様にカウントします。
          ‘cumulative’(累積的) を使用する場合、報告されるパーセンテージ
          の合計が100%を超える場合があることに注意してください。デフォル
          トの(非累積的な)動作は、‘noncumulative’ パラメーターで指定でき
          ます。

     <limit>
          整数パラメーターは、カットオフパーセント(デフォルトでは3%)を指
          定します。指定の割合より少ないディレクトリは、出力に表示されま
          せん。

     例: 変更されたファイルの総数の10%未満のディレクトリを無視し、親ディ
     レクトリに子ディレクトリの数を累積しながら、変更されたファイルをカ
     ウント: ‘--dirstat=files,10,cumulative’

‘--cumulative’
     ‘--dirstat=cumulative’ と同義語

‘--dirstat-by-file[=<param1,param2>...]’
     ‘--dirstat=files,param1,param2...’ と同義語

‘--summary’
     作成、名前変更、モード変更などの拡張ヘッダー情報の短い要約
     (condensed summary)を出力します。

‘--patch-with-stat’
     ‘-p --stat’ と同義語。

‘-z’
     改行(newline)ではなく、NULでコミットを区切ります。

     また、 ‘--raw’ または ‘--numstat’ を指定した場合は、パス名を難読化
     (munge)したり、出力フィールドターミネータとしてNULを使用したりしな
     いでください。

     このオプションがないと、構成変数 ‘core.quotePath’ で説明されている
     ように、 通常の文字以外(unusual characters)を含むパス名が引用符で囲
     まれます(git-config(1) 参照)。

‘--name-only’
     変更されたファイルの名前のみを表示します。 多くの場合、ファイル名は
     UTF-8でエンコードされます。 詳細については、 git-log(1) のマニュア
     ルページにあるエンコーディングに関する議論(the discussion about
     encoding)を参照してください。

‘--name-status’
     変更されたファイルの名前とステータスのみを表示します。ステータス文
     字の意味については、 ‘--diff-filter’ オプションの説明を参照してくだ
     さい。 ‘--name-only’ と同じように、ファイル名はしばしばUTF-8でエン
     コードされます。

‘--submodule[=<format>]’
     サブモジュールの違いをどのように表示するかを指定します。
     ‘--submodule=short’ を指定する場合、 _short_ 形式が使用されます。こ
     の形式は、範囲の最初と最後にコミットの名前を表示するだけです。
     ‘--submodule’ または ‘--submodule=log’ が指定されている場合、 _log_
     形式が使用されます。この形式では、 git-submodule(1) ‘summary’ のよ
     うに範囲内のコミットが一覧表示されます。 ‘--submodule=diff’ が指定
     されている場合、 _diff_ 形式が使用されます。この形式は、コミット範
     囲間のサブモジュールの内容の変更のインラインdiffを示します。
     configオプションが設定されていない場合、デフォルトは
     ‘diff.submodule’ または _short_ 形式です。

‘--color[=<when>]’
     色付きのdiffを表示します。 ‘--color’ (つまり、 _=<when>_ ) は
     ‘--color=always’ と同じです。 _<when>_ は、 ‘always’ または ‘never’
     または ‘auto’ のいずれかになります。

‘--no-color’
     カラーdiffをオフにします。 ‘--color=never’ と同じです。

‘--color-moved[=<mode>]’
     ソースコードの移動した行を別の色にします。 <mode>は、オプションが指
     定されていない場合はデフォルトで _no_ になり、 モードが指定されてい
     ないオプションが指定されている場合は _zebra_ になります。 モードは
     以下のいずれかでなければなりません:

     no
          移動行をハイライトしません。

     default
          ‘zebra’ の同義語です。これは、将来、より賢明なモードに変更され
          る可能性があります。

     plain
          ある場所で追加され、別の場所で削除された行は、
          _color.diff.newMoved_ で色付けされます。 同様に、
          _color.diff.oldMoved_ は、差分の別の場所に追加された削除された
          行に使用されます。このモードは移動された行をピックアップします
          が、コードのブロックが順列なしで移動されたかどうかを判断するこ
          とはレビューではあまり役に立ちません。

     blocks
          少なくとも20文字の英数字の移動テキストのブロックが貪欲に検出さ
          れます。検出されたブロックは、 _color.diff.{old,new}Moved_ 色
          のいずれかを使用して色付けされます。隣接するブロックを区別する
          ことはできません。

     zebra
          移動されたテキストのブロックは、 _blocks_ モードの場合と同様に
          検出されます。 ブロックは、 _color.diff.{old,new}Moved_ 色また
          は _color.diff.{old,new}MovedAlternative_ 色のいずれかを使用し
          て色付けされます。2つの色の間の変化は、新しいブロックが検出さ
          れたことを示します。

     dimmed-zebra
          _zebra_ に似ていますが、移動されたコードの重要でない部分の追加
          の調光(dimmed)が実行されます。隣接する2つのブロックの境界線は
          興味深いと見なされ、残りは興味深いものではありません。
          ‘dimmed_zebra’ は非推奨の同義語です。

‘--no-color-moved’
     移動検出をオフにします。 これは、構成設定を上書きするために使用でき
     ます。 ‘--color-moved=no’ と同じです。

‘--color-moved-ws=<modes>’
     これは、 ‘--color-moved’ の移動検出を実行するときに空白を無視する方
     法を設定します。 これらのモードは、コンマ区切りのリストとして指定で
     きます:

     no
          移動行検出を実行するときに、空白(whitespace)を無視しない。

     ignore-space-at-eol
          行末(EOL)での空白(whitespace)の変更を無視します。

     ignore-space-change
          空白(whitespace)の数の変更は無視してください。これは、行末の空
          白(whitespace)を無視し、1つ以上の空白文字(whitespace
          characters)の他のすべてのシーケンスを同等と見なします。

     ignore-all-space
          行を比較するときは空白(whitespace)を無視します。これにより、一
          方の行に空白があり、もう一方の行に空白がない場合でも、違いは無
          視されます。

     allow-indentation-change
          最初に移動検出で空白(whitespace)を無視し、空白(whitespace)の変
          更が行ごとに同じである場合にのみ、移動されたコードブロックをブ
          ロックにグループ化します。 これは他のモードと互換性がありませ
          ん。

‘--no-color-moved-ws’
     移動検出を実行するときは、空白(whitespace)を無視しないでください。
     これは、構成設定を上書きするために使用できます。
     ‘--color-moved-ws=no’ と同じです。

‘--word-diff[=<mode>]’
     <mode> を使用して変更された単語を区切ることにより、単語のdiffを表示
     します。デフォルトでは、単語は空白で区切られます。 以下の
     ‘--word-diff-regex’ を参照してください。 <mode> のデフォルトは
     ’plain’です。 <mode> は以下のいずれかである必要があります:

     color
          変更された単語(word)を色のみを使用して強調表示します。
          ‘--color’ を意味します。

     plain
          単語を ‘[-removed-]’ および ‘{+added+}’ として表示します。 区
          切り文字が入力に表示されている場合、区切り文字をエスケープしよ
          うとしないため、出力があいまいになる可能性があります。

     porcelain
          スクリプトの使用を目的とした特別な行ベースの形式を使用します。
          追加/削除/無変更については、通常の統一されたdiff形式で印刷され
          、行の先頭の ‘+’/‘-’/‘ ‘ 文字で始まり、行の終わりまで続きます
          。入力の改行は、それ自体の行のチルダ ‘~’ で表されます。

     none
          単語(word)のdiffを再度無効にします。

     注意: 最初のモードの名前にもかかわらず、有効になっている場合、すべ
     てのモードで変更された部分を強調するために色が使用されることに注意
     してください。

‘--word-diff-regex=<regex>’
     空白以外を単語と見なす代わりに、 <regex> を使用して単語が何であるか
     を決定します。また、すでに有効になっていない限り、この機能は
     ‘--word-diff’ の機能を含んでいます。

     <regex> の重複しないマッチはすべて、単語と見なされます。これらのマ
     ッチの間のすべては空白と見なされ、違いを見つけるためとしては無視さ
     れます！ 正規表現に ‘|[^[:space:]]’ を追加して、空白以外のすべての
     文字とマッチすることを確認することをお勧めします。改行を含むマッチ
     は、改行で黙って切り捨てられます！

     たとえば、 ‘--word-diff-regex=.’ は各文字を単語として扱い、それに応
     じて文字ごとの違いを表示します。

     正規表現は、diffドライバーまたは構成オプション(configuration
     option)を介して設定することもできます。 gitattributes(5) または
     git-config(1) を参照してください。これを指定すると、diffドライバー
     または構成設定(configuration settings)が明示的にオーバーライドされ
     ます。diffドライバーは構成設定を上書きします。

‘--color-words[=<regex>]’
     ‘--word-diff=color’ に ‘--word-diff-regex=<regex>’ を加えたものに相
     当します(正規表現が指定されている場合)。

‘--no-renames’
     構成ファイルにデフォルトで指定されている場合でも、名前変更の検出を
     オフにします。

‘--[no-]rename-empty’
     名前変更ソースとして空のブロブを使用するかどうか。

‘--check’
     変更によって競合マーカーまたは空白エラーが発生した場合に警告します
     。空白エラーと見なされるものは、 ‘core.whitespace’ 構成によって制御
     されます。 デフォルトでは、末尾の空白(空白のみで構成される行を含む
     )と、行の最初のインデント内で直後にタブ文字が続くスペース文字は、空
     白エラーと見なされます。問題が見つかった場合は、ゼロ以外のステータ
     スで終了します。なお、 –exit-code とは互換性がありません。

‘--ws-error-highlight=<kind>’
     diffの ‘context’ または ‘old’ または ‘new’ 行の空白エラーを強調表示
     します。複数の値はコンマで区切られ、 ‘none’ は前の値をリセットし、
     ‘default’ はリストを ‘new’ にリセットし、 ‘all’ は old、new、
     context の省略形です。このオプションが指定されておらず、構成変数
     ‘diff.wsErrorHighlight’ が設定されていない場合、 ‘new’ 行の空白エラ
     ーのみが強調表示されます。空白エラーは ‘color.diff.whitespace’ で色
     分けされています。

‘--full-index’
     パッチ形式の出力を生成するときは、最初の一握りの文字(first handful
     of characters)の代わりに、「インデックス」行にイメージ前およびイメ
     ージ後の完全ブロブオブジェクト名を表示します。

‘--binary’
     ‘--full-index’ に加えて、 ‘git-apply’ で適用できるバイナリ差分を出
     力します。 ‘--patch’ の機能を含んでいます。

‘--abbrev[=<n>]’
     完全な40バイトの16進オブジェクト名をdiff-raw形式の出力とdiff-treeヘ
     ッダー行に表示する代わりに、オブジェクトを一意に参照する、少なくと
     も _<n>_ 桁の16進数の長さの最短のプレフィックスを表示します。diffパ
     ッチ出力形式では、 ‘--full-index’ が優先されます。つまり、
     ‘--full-index’ が指定されている場合、 ‘--abbrev’ に関係なく、完全な
     ブロブ名が表示されます。デフォルト以外の桁数は、 ‘--abbrev=<n>’ で
     指定できます。

‘-B[<n>][/<m>]’
‘--break-rewrites[=[<n>][/<m>]]’
     完全な書き換えの変更を削除と作成のペアに分割します。これには以下の
     2つの目的があります:

     これは、ファイルの完全な書き換えに相当する変更が、コンテキストとし
     てテキストで一致する非常に少数の行と混合された一連の削除と挿入とし
     てではなく、古いものすべての単一の削除とそれに続く すべての新しいも
     のを1回挿入し、数値 ‘m’ が -B オプションのこの側面を制御します(デフ
     ォルトは60%)。 ‘-B/70%’ は、Gitがそれを完全な書き換えと見なすために
     、元の30%未満が結果に残る必要があることを指定します(つまり、結果の
     パッチは、コンテキスト行と混合された一連の削除と挿入になります)。

     -M と一緒に使用すると、完全に書き換えられたファイルも名前変更のソー
     スと見なされ(通常、 -M は、消えたファイルのみを名前変更のソースと見
     なします)、数 ‘n’ が -Bオプションのこの側面を制御します(デフォルト
     は50%)。 ‘-B20%’ は、ファイルのサイズの20%以上と比較して、追加およ
     び削除を伴う変更が、別のファイルへの名前変更の可能なソースとして取
     得される資格があることを指定します。

‘-M[<n>]’
‘--find-renames[=<n>]’
     diffを生成する場合は、コミットごとに名前の変更を検出して報告します
     。 履歴をトラバースしながら名前を変更してファイルをフォローする方法
     については、 ‘--follow’ を参照してください。 ‘n’ が指定されている場
     合、それは類似性インデックスのしきい値です (つまり、ファイルのサイ
     ズと比較した追加/削除の量)。 たとえば、 ‘-M90%’ は、ファイルの90%以
     上が変更されていない場合、 Gitが削除/追加のペアを名前変更と見なす必
     要があることを意味します。 ‘%’ 記号がない場合、数値は小数として読み
     取られ、その前に小数点が付きます。 つまり、 ‘-M5’ は0.5になるため、
     ‘-M50%’ と同じになります。 同様に、 ‘-M05’ は ‘-M5%’ と同じです。 検
     出を正確な名前変更に制限するには、 ‘-M100%’ を使用します。 デフォル
     トの類似性インデックスは50%です。

‘-C[<n>]’
‘--find-copies[=<n>]’
     名前と同様コピーを検出します。 ‘--find-copies-harder’ ‘も参照してく
     ださい。 `n’ を指定すると、 ‘-M<n>’ と同じ意味になります。

‘--find-copies-harder’
     パフォーマンス上の理由から、デフォルトでは、 ‘-C’ オプションは、コ
     ピーの元のファイルが同じ変更組(changeset)で変更された場合にのみコピ
     ーを検索します。このフラグにより、コマンドは変更されていないファイ
     ルをコピー元の候補として検査します。これは大規模なプロジェクトでは
     非常にコストのかかる操作であるため、注意して使用してください。 複数
     の ‘-C’ オプションを指定しても同じ効果があります。

‘-D’
‘--irreversible-delete’
     削除するプレイメージ(preimage)を省略します。つまり、ヘッダーのみを
     出力し、プレイメージと ‘/dev/null’ の差分は出力しません。結果のパッ
     チは、 ‘patch’ または ‘git apply’ で適用されることを意図していませ
     ん。これは、変更後にテキストを確認することに集中したい人のためだけ
     のものです。さらに、出力には明らかに、そのようなパッチを手動でも逆
     に適用するのに十分な情報が不足しているため、オプションの名前が付け
     られています。

     ‘-B’ と併用する場合は、削除/作成ペアの削除部分のプリイメージ
     (preimage)も省略してください。

‘-l<num>’
     ‘-M’ および ‘-C’ オプションには、名前変更/コピーのサブセットを安価
     に検出できるいくつかの準備手順が含まれ、その後に、残りのすべてのペ
     アになっていない宛先をすべての関連ソースと比較する徹底的なフォール
     バック部分が続きます。(名前の変更の場合、残りのペアになっていないソ
     ースのみが関係します。コピーの場合、すべての元のソースが関係します
     )。Nのソースと宛先の場合、この徹底的なチェックのコストは O(N^2) で
     す。このオプションは、関係するソース/宛先ファイルの数が指定された数
     を超えた場合に、名前変更/コピー検出の完全な部分が実行されないように
     します。デフォルトは diff.renameLimit です。 値0は無制限として扱わ
     れることに注意してください。

‘--diff-filter=[(A|C|D|M|R|T|U|X|B)...[*]]’
     追加(Add)・コピー(Copy)・削除(Delete)・変更(Modify)・名前変更
     (Rename)されたファイル、タイプが変更されたファイル(T)、マージされて
     いないファイル(U)、不明なファイル(X)、またはペアリングが壊れている
     ファイル(B)のみを選択します。フィルタ文字(無しも含む)の任意の組み合
     わせを使用できます。 組み合わせに ‘*’ (全てまたは無し)が追加される
     と、比較で他の基準に一致するファイルがある場合、すべてのパスが選択
     されます。 他の基準に一致するファイルがない場合、何も選択されません
     。

     また、逆に、除外したい時はこれらの各大文字指定を小文字にして指定し
     ます。例えば ‘--diff-filter=ad’ は、追加および削除されたパスを除外
     します。

     注意:すべてのdiffがすべてのタイプを特徴とするわけではないことに注意
     してください。 たとえば、インデックスから作業ツリーへのdiffにエント
     リを追加することはできません(diffに含まれるパスのセットは、インデッ
     クスの内容によって制限されるため)。 同様に、これらのタイプの検出が
     無効になっている場合、コピーおよび名前変更されたエントリは表示され
     ません。

‘-S<string>’
     ファイル内の指定の文字列(つまり、 addition 、deletion)の出現回数の
     差分を調べます。スクリプターが使用することを目的としています。

     (構造体など)コードの正確なブロックを探していて、そのブロックが最初
     に作成されてからの履歴を知りたい場合に便利です。この機能を繰り返し
     使用して、プリイメージ(preimage)内の興味深いブロックを ‘-S’ にフィ
     ードバックし、そしてあなたはそれをブロックの最初のバージョンを取得
     するまで続けます。

     バイナリファイルも検索されます。

‘-G<regex>’
     パッチテキストに <regex> にマッチする 追加/削除 された行が含まれて
     いる差分を探します。

     ‘-S<regex> --pickaxe-regex’ と ‘-G<regex>’ の違いを説明するために、
     同じファイル内で以下のdiffを使用してコミットすることを検討してくだ
     さい:

          +    return frotz(nitfol, two->ptr, 1, 0);
          ...
          -    hit = frotz(nitfol, mf2.ptr, 1, 0);

     ‘git log -G"frotz\(nitfol"’ はこのコミットを表示しますが、 ‘git log
     -S"frotz\(nitfol" --pickaxe-regex’ は表示しません(その文字列の出現
     回数が変更されなかったため)。

     ‘--text’ が提供されていない限り、 textconv フィルターのないバイナリ
     ファイルのパッチは無視されます。

     詳細については gitdiffcore(7) の _pickaxe_ エントリを参照してくださ
     い。

‘--find-object=<object-id>’
     指定されたオブジェクトの出現回数を変更する違いを探します。 ‘-S’ と
     同様に、引数だけが異なり、特定の文字列ではなく特定のオブジェクト
     IDを検索します。

     オブジェクトは、ブロブまたはサブモジュールのコミットにすることがで
     きます。 これは、 ‘git-log’ の ‘-t’ オプションがツリーも探すことを
     意味します。

‘--pickaxe-all’
     ‘-S’ または ‘-G’ が変更を見つけたら、 <string> の変更を含むファイル
     だけでなく、その変更セット(changeset)のすべての変更を表示します。

‘--pickaxe-regex’
     ‘-S’ に指定した <string> を拡張POSIX正規表現として扱います。

‘-O<orderfile>’
     ファイルが出力に表示される順序を制御します。これは ‘diff.orderFile’
     構成変数をオーバーライドします(git-config(1) 参照)。
     ‘diff.orderFile’ をキャンセルするには、 ‘-O/dev/null’ を使用します
     。

     出力順序は、 <orderfile> 内のglobパターンの順序によって決定されます
     。最初のパターンに一致するパス名を持つすべてのファイルが最初に出力
     され、2番目のパターンに一致する(ただし最初のパターンには一致しない
     )パス名を持つすべてのファイルが次に出力されます。パス名がどのパター
     ンとも一致しないすべてのファイルは、ファイルの最後に暗黙のすべて一
     致パターンがあるかのように、最後に出力されます。複数のパス名のラン
     クが同じである場合(同じパターンに一致するが、以前のパターンには一致
     しない)、相互の出力順序は通常の順序です。

     <orderfile> は以下のとおりパースされます:

        • 空白行は無視されるため、読みやすくするための区切りとして使用で
          きます。

        • ハッシュ ("‘#’") で始まる行は無視されるため、コメントに使用で
          きます。 パターンがハッシュで始まる場合は、パターンの先頭にバ
          ックスラッシュ(訳注:日本では環境により円記号)("‘\’") を追加し
          ます。

        • 他の各行には、単一のパターンが含まれています。

     パターンは、 FNM_PATHNAME フラグなしで fnmatch(3) に使用されるパタ
     ーンと同じ構文とセマンティクスを持ちますが、最終的なパス名コンポー
     ネントをいくつも削除するとパターンと一致する場合、パス名もパターン
     と一致する点が異なります。 たとえば、パターン "‘foo*bar’" は、
     "‘fooasdfbar’" および "‘foo/bar/baz/asdf’" と一致しますが、
     "‘foobarx’" とは一致しません。

‘--skip-to=<file>’
‘--rotate-to=<file>’
     名前付き <file> の前のファイルを出力から破棄するか(スキップして)、
     出力の最後に移動させます(ローテーションさせます)。 これらは主に
     ‘git difftool’ コマンドを使用するために考案されたものであり、それ以
     外の場合はあまり役に立たない可能性があります。

‘-R’
     2つの入力を交換します。 つまり、インデックスまたはディスク上のファ
     イルとツリーの内容の違いを表示します。

‘--relative[=<path>]’
‘--no-relative’
     プロジェクトのサブディレクトリから実行する場合、このオプションを使
     用して、ディレクトリ外の変更を除外し、それに関連するパス名を表示す
     るように指示できます。サブディレクトリ(ベアリポジトリなど)にいない
     場合は、引数として <path> を指定することで、出力を作成するサブディ
     レクトリに名前を付けることができます。 ‘--no-relative`は、
     `diff.relative’ 設定オプションと以前の ‘--relative’ の両方を打ち消
     すために使用できます。

‘-a’
‘--text’
     すべてのファイルをテキストとして扱います。

‘--ignore-cr-at-eol’
     比較を行うときは、行末のキャリッジリターン(carriage-return)を無視し
     ます。

‘--ignore-space-at-eol’
     行末(EOL)での空白(whitespace)の変更を無視します。

‘-b’
‘--ignore-space-change’
     空白(whitespace)の数の変更は無視してください。これは、行末の空白
     (whitespace)を無視し、1つ以上の空白文字(whitespace characters)の他
     のすべてのシーケンスを同等と見なします。

‘-w’
‘--ignore-all-space’
     行を比較するときは空白を無視します。 これにより、一方の行に空白があ
     り、もう一方の行に空白がない場合でも、違いは無視されます。

‘--ignore-blank-lines’
     全て空白の行の変更は無視します。

‘-I<regex>’
‘--ignore-matching-lines=<regex>’
     すべての行が <regex> にマッチする変更を無視します。このオプションは
     複数回指定できます。

‘--inter-hunk-context=<lines>’
     指定された行数までの差分ハンク間のコンテキストを表示し、それによっ
     て互いに近いハンクを融合します。デフォルトは
     ‘diff.interHunkContext’ で、設定オプションが設定されていない場合は
     0です。

‘-W’
‘--function-context’
     関数全体を各変更のコンテキスト行として表示します。関数名は、 ‘git
     diff’ がパッチハンクヘッダーを処理するのと同じ方法で決定されます
     (gitattributes(5) の _Defining a custom hunk-header_ を参照)。

‘--ext-diff’
     外部diffヘルパーの実行を許可します。 gitattributes(5) を使用して外
     部diffドライバーを設定する場合は、 git-log(1) およびその仲間と一緒
     にこのオプションを使用する必要があります。

‘--no-ext-diff’
     外部diffドライバーを禁止します。

‘--textconv’
‘--no-textconv’
     バイナリファイルを比較するときに、外部テキスト変換フィルターの実行
     を許可(または禁止)します。 詳細については、 gitattributes(5) を参照
     してください。textconvフィルターは通常、一方向の変換であるため、結
     果のdiffは人間の消費に適していますが、適用(apply)することはできませ
     ん。このため、textconvフィルターは、 git-diff(1) および git-log(1)
     に対してのみデフォルトで有効になりますが、 git-format-patch(1) また
     はdiff配管コマンドに対しては有効になりません。

‘--ignore-submodules[=<when>]’
     diff生成のサブモジュールへの変更を無視します。 <when> は、 none・
     untracked・dirty・allのいずれかになります。これがデフォルトです。
     noneを使用すると、追跡されていないファイルまたは変更されたファイル
     が含まれている場合、またはそのHEADがスーパープロジェクトに記録され
     ているコミットと異なる場合にサブモジュールが変更されたと見なされ、
     git-config(1) または gitmodules(5) の ignoreオプションの設定をオー
     バーライドするために使用できます。untrackedが使用されている場合、サ
     ブモジュールには追跡されていないコンテンツのみが含まれている場合、
     サブモジュールはダーティとは見なされません(ただし、変更されたコンテ
     ンツはスキャンされます)。「dirty」を使用すると、サブモジュールの作
     業ツリーへのすべての変更が無視され、スーパープロジェクトに格納され
     ているコミットへの変更のみが表示されます(これは1.7.0までの動作でし
     た)。「all」を使用すると、サブモジュールへのすべての変更が非表示に
     なります。

‘--src-prefix=<prefix>’
     "a/" の代わりに、与えられたソースプレフィックス(source prefix)を表
     示します。

‘--dst-prefix=<prefix>’
     "b/" の代わりに、指定された宛先プレフィックス(destination prefix)を
     表示します。

‘--no-prefix’
     送信元(source)または宛先(destination)のプレフィックスを表示しません
     。

‘--line-prefix=<prefix>’
     出力のすべての行に追加のプレフィックスを付加します。

‘--ita-invisible-in-index’
     デフォルトでは、 "git add -N" によって追加されたエントリは、 "git
     diff" に既存の空のファイルとして表示され、 "git diff –cached" に新
     しいファイルとして表示されます。このオプションを使用すると、エント
     リは "git diff" では新しいファイルとして表示され、 "git diff
     –cached" では存在しません。このオプションは、
     ‘--ita-visible-in-index’ で元に戻すことができます。どちらのオプショ
     ンも実験的なものであり、将来削除される可能性があります。

   これらの一般的なオプションの詳細については、 gitdiffcore(7) も参照し
てください。


Generating patch text with -p
*****************************

git-diff(1) 、 git-log(1) 、 git-show(1) 、 git-diff-index(1) 、
git-diff-tree(1) 、 git-diff-files(1) に ‘-p’ オプションを付けて実行する
とパッチテキストを生成します。パッチテキストの作成は、
‘GIT_EXTERNAL_DIFF’ と ‘GIT_DIFF_OPTS’ 環境変数( git(1) 参照)、および
‘diff’ 属性( gitattributes(5) 参照)を介してカスタマイズできます。

   -pオプションが生成するものは、従来のdiff形式とは少々異なります:

  1. 先行して、以下のような "git diff" ヘッダーがあります:

          diff --git a/file1 b/file2

     名前の変更/コピーが含まれない限り、 ‘a/’ と ‘b/’ のファイル名は同じ
     です。 特に、作成または削除の場合でも、 ‘a/’ または ‘b/’ ファイル名
     の代わりに ‘/dev/ null’ が使用されることはありません。

     名前変更/コピーが含まれる場合、 ‘file1’ と‘file2‘ は、それぞれ名前
     変更/コピーのソースファイルの名前と、名前変更/コピーが生成するファ
     イルの名前を示します。

  2. その後に、1つ以上の拡張ヘッダー行達が続きます:

          old mode <mode>
          new mode <mode>
          deleted file mode <mode>
          new file mode <mode>
          copy from <path>
          copy to <path>
          rename from <path>
          rename to <path>
          similarity index <number>
          dissimilarity index <number>
          index <hash>..<hash> <mode>

     ファイルモードは、ファイルタイプとファイル許可ビットを含む6桁の8進
     数として出力されます。

     拡張ヘッダーのパス名には、 ‘a/’ および ‘b/’ プレフィックスは含まれ
     ません。

     類似インデックス(similarity index)は変更されていない行のパーセンテ
     ージであり、非類似インデックス(dissimilarity index)は変更された行の
     パーセンテージです。これは切り捨てられた整数であり、その後にパーセ
     ント記号が続きます。したがって、100％の類似インデックス値は2つの等
     しいファイルを表し、100％の非類似性は古いファイルから新しいファイル
     に移行された行がないことを意味します。

     インデックス行には、変更前後のブロブオブジェクト名が含まれます。
     <mode> は、ファイルモードが変更されない場合に含まれます。それ以外の
     場合、別々の行は古いモードと新しいモードを示します。

  3. 通常の文字でないキャラクタ(\"unusual\" characters)を含むパス名は、
     構成変数 ‘core.quotePath’ で説明されているように引用符で囲まれてい
     ます( git-config(1)参照)。

  4. 出力内のすべての ‘file1’ ファイルはコミット前のファイルを参照し、す
     べての ‘file2’ ファイルはコミット後のファイルを参照します。各変更を
     各ファイルに順番に適用するのは誤りです。たとえば、以下のパッチはaと
     bを交換します:

          diff --git a/a b/b
          rename from a
          rename to b
          diff --git a/b b/a
          rename from b
          rename to a

  5. ハンクのヘッダーには、ハンクが適用される関数の名前が記載されていま
     す。特定の言語に合わせてこれを調整する方法の詳細については、
     gitattributes(5) の "Defining a custom hunk-header" を参照してくだ
     さい。


Combined diff format
********************

diffを生成するコマンドは、マージを表示するときに ‘-c’ または ‘--cc’ オプ
ションを使用して「合成diff」(combined diff)を生成できます。これは
git-diff(1) または git-show(1) でのマージを表示するときのデフォルトの形
式です。 注意: これらのコマンドのいずれかに適切な ‘--diff-merges’ オプシ
ョンを指定して、特定の形式で差分を強制的に生成できることにも注意してくだ
さい。

   合成diff形式は以下のようになります:

     diff --combined describe.c
     index fabadb8,cc95eb0..4866510
     --- a/describe.c
     +++ b/describe.c
     @@@ -98,20 -98,12 +98,20 @@@
             return (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;
       }

     - static void describe(char *arg)
      -static void describe(struct commit *cmit, int last_one)
     ++static void describe(char *arg, int last_one)
       {
      +      unsigned char sha1[20];
      +      struct commit *cmit;
             struct commit_list *list;
             static int initialized = 0;
             struct commit_name *n;

      +      if (get_sha1(arg, sha1) < 0)
      +              usage(describe_usage);
      +      cmit = lookup_commit_reference(sha1);
      +      if (!cmit)
      +              usage(describe_usage);
      +
             if (!initialized) {
                     initialized = 1;
                     for_each_ref(get_name);

  1. まず "git diff" ヘッダーがあり、以下のようになります( ‘-c’ オプショ
     ンが使用されている場合):

          diff --combined file

     または、以下のようになります( ‘--cc’ オプションが使用されている場合
     ):

          diff --cc file

  2. その後に1つ以上の拡張ヘッダー行が続きます(以下の例は、2つの親とのマ
     ージを示しています):

          index <hash>,<hash>..<hash>
          mode <mode>,<mode>..<mode>
          new file mode <mode>
          deleted file mode <mode>,<mode>

     ‘mode <mode>,<mode>..<mode>’ 行は、<mode> の少なくとも1つが他の
     <mode> と異なる場合にのみ表示されます。検出されたコンテンツの移動
     (名前の変更とコピーの検出)に関する情報を含む拡張ヘッダーは、2つの
     <tree-ish> のdiffで機能するように設計されており、合成diff形式では使
     用されません。

  3. その後に2行の from-file/to-file ヘッダーが続きます

          --- a/file
          +++ b/file

     従来の統一diff形式の2行ヘッダーと同様に、 ‘/dev/null’ は、作成また
     は削除されたファイルを通知するために使用されます。

     ただし、 –combined-all-paths オプションが指定されている場合、2行の
     from-file/to-file の代わりに、 N+1 行の from-file/to-file ヘッダー
     が取得されます。ここで、 N はマージコミットの親の数です。

          --- a/file
          --- a/file
          --- a/file
          +++ b/file

     この拡張形式は、名前変更またはコピー検出がアクティブな場合に役立ち
     、別の親のファイルの元の名前を確認できます。

  4. チャンクヘッダーの形式が変更され、誤って ‘patch-p1’ にフィードされ
     るのを防ぎます。合成差分形式は、マージコミットの変更を確認するため
     に作成されたものであり、適用されることを意図したものではありません
     。この変更は、拡張された「インデックス」ヘッダーの変更に似ています:

          @@@ <from-file-range> <from-file-range> <to-file-range> @@@

     合成diff形式のチャンクヘッダーには親の数+1の ‘@’ 文字があります。

   従来の統一diff形式とは異なり、2つのファイルAとBが、 ‘-’ (マイナスは
Aに表示されますが、Bでは削除されます) または ‘+’ (プラスはAにはありませ
んが、Bには追加されます)、または ‘" "’（スペースは変更なし) プレフィック
スを持つ単一の列で表示される場合、この形式は2つ以上のファイル file1,
file2,… を1つのファイルXと比較し、Xが各 fileN とどのように異なるかを示し
ます。ファイルNごとに1つの列が出力行の前に追加され、Xの行が出力行とどの
ように異なるかを示します。

   列Nの ‘-’ 文字は、その行が fileN に表示されているが、結果には表示され
ていないことを意味します。 列Nの ‘+’ 文字は、結果に行が表示され、 fileN
にその行がないことを意味します(つまり、その親の観点から見て行が追加され
たことを示す)。

   上記の出力例では、関数のシグネチャが両方のファイルから見て変更されて
います(したがって、 file1 と file2 の両方から2つの ‘-’ が削除され、さら
に ‘++’ が追加されたため、 file1 と file2 のどちらにも表示されません)。
また、他の8行は file1 と同じですが、 file2 には表示されません(したがって
、接頭辞として ‘+’ が付けられます)。

   ‘git diff-tree -c’ で表示される場合、マージコミットの親をマージ結果と
比較します(つまり、 file1..fileN が親です)。 ‘git diff-files -c’ で表示
される場合、2つの未解決のマージ親を作業ツリーファイルと比較します(つまり
、 file1 はステージ2、別名「私たちのバージョン」、 file2 はステージ3、別
名「彼らのバージョン」です)。


EXAMPLES
********

‘git show v1.0.0’
     タグ ‘v1.0.0’ と、タグが指すオブジェクトを表示します。

‘git show v1.0.0^{tree}’
     タグ ‘v1.0.0’ が指すツリーを表示します。

‘git show -s --format=%s v1.0.0^{commit}’
     タグ ‘v1.0.0’ が指すコミットの件名を表示します。

‘git show next~10:Documentation/README’
     ブランチ ‘next’ の最後から10番目のコミットで最新であったファイル
     ‘Documentation/README’ の内容を表示します。

‘git show master:Makefile master:t/Makefile’
     ブランチ ‘master’ の先頭にあるMakefileの内容を連結して表示します。


DISCUSSION
**********

Gitは、ある程度までは文字エンコードに依存しません。

   • ブロブオブジェクトの内容は、解釈されていないバイトのシーケンスです
     。コアレベルでのエンコーディング変換はありません。

   • パス名はUTF-8正規化形式C(UTF-8 normalization form C)でエンコードさ
     れます。これは、ツリーオブジェクト、インデックスファイル、ref名、お
     よびコマンドライン引数、環境変数、構成ファイル( ‘.git/config’
     (git-config(1) 参照) と gitignore(5) と gitattributes(5) と
     gitmodules(5)) のパス名に適用されます。

     コアレベルのGitは、パス名を単に非NULバイトのシーケンスとして扱い、
     パス名をエンコードする変換はありません(MacとWindowsを除く)。したが
     って、非ASCIIパス名の使用は、レガシー拡張ASCIIエンコーディングを使
     用するプラットフォームやファイルシステムでもほとんど機能します。た
     だし、そのようなシステムで作成されたリポジトリは、UTF-8ベースのシス
     テム(Linux、Mac、Windowsなど)では正しく機能しません。その逆も同様で
     す。さらに、多くのGitベースのツールは、パス名がUTF-8であると単純に
     想定しており、他のエンコーディングを正しく表示できません。

   • コミットログメッセージは通常UTF-8でエンコードされますが、他の拡張
     ASCIIエンコードもサポートされています。これには、ISO-8859-x、
     CP125xなどが含まれますが、UTF-16/32、EBCDIC、およびCJKマルチバイト
     エンコーディング(GBK、Shift-JIS、Big5、EUC-x、CP9xxなど)は含まれま
     せん。

   我々はコミットログメッセージをUTF-8でエンコードすることをお勧めします
が、コアとGit Porcelainはどちらも、プロジェクトでUTF-8を強制しないように
設計されています。特定のプロジェクトのすべての参加者がレガシーエンコーデ
ィングを使用する方が便利だと感じた場合、Gitはそれを禁止しません。 ただし
、覚えておくべきことがいくつかあります。

  1. _git commit_ と _git commit-tree_ は、プロジェクトがレガシーエンコ
     ーディングを使用していることを明示的に指定しない限り、与えられたコ
     ミットログメッセージが有効なUTF-8文字列のように見えない場合に警告を
     発します。明示的に指定する方法は、以下のように、 ‘.git/config’ ファ
     イルに ‘i18n.commitEncoding’ を含めることです。

          [i18n]
                  commitEncoding = ISO-8859-1

     上記の設定で作成されたコミットオブジェクトは、 ‘encoding’ ヘッダー
     に ‘i18n.commitEncoding’ の値を記録します。 これは、後でそれらを見
     る他の人々を助けるためです。このヘッダーがないということは、コミッ
     トログメッセージがUTF-8でエンコードされていることを意味します。

  2. _git log_ と _git show_ と _git blame_ とその仲間たちは、コミットオ
     ブジェクトの ‘encoding’ ヘッダーを見て、特に指定がない限り、ログメ
     ッセージをUTF-8に再コーディングしようとします。あなたは以下のように
     、 ‘.git/config’ ファイルの ‘i18n.logOutputEncoding’ を使用して目的
     の出力エンコーディングを指定できます。

          [i18n]
                  logOutputEncoding = ISO-8859-1

     この構成変数がない場合は、代わりに ‘i18n.commitEncoding’ の値が使用
     されます。

   UTF-8への再コーディングは必ずしも可逆的な操作ではないため、我々はコミ
ットが行われたときにコミットログメッセージを再コーディングしないことを意
図的に選択したことに注意してください。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-sparse-checkout,  Up: Top

Name
****

git-sparse-checkout — Initialize and modify the sparse-checkout
configuration, which reduces the checkout to a set of paths given by a
list of patterns.


Synopsis
********

     git sparse-checkout <subcommand> [options]


DESCRIPTION
***********

Initialize and modify the sparse-checkout configuration, which reduces
the checkout to a set of paths given by a list of patterns.

   THIS COMMAND IS EXPERIMENTAL. ITS BEHAVIOR, AND THE BEHAVIOR OF OTHER
COMMANDS IN THE PRESENCE OF SPARSE-CHECKOUTS, WILL LIKELY CHANGE IN THE
FUTURE.


COMMANDS
********

_list_
     Describe the patterns in the sparse-checkout file.

_init_
     Enable the ‘core.sparseCheckout’ setting.  If the sparse-checkout
     file does not exist, then populate it with patterns that match
     every file in the root directory and no other directories, then
     will remove all directories tracked by Git.  Add patterns to the
     sparse-checkout file to repopulate the working directory.

     To avoid interfering with other worktrees, it first enables the
     ‘extensions.worktreeConfig’ setting and makes sure to set the
     ‘core.sparseCheckout’ setting in the worktree-specific config file.

     When ‘--cone’ is provided, the ‘core.sparseCheckoutCone’ setting is
     also set, allowing for better performance with a limited set of
     patterns (see _CONE PATTERN SET_ below).

     Use the ‘--[no-]sparse-index’ option to toggle the use of the
     sparse index format.  This reduces the size of the index to be more
     closely aligned with your sparse-checkout definition.  This can
     have significant performance advantages for commands such as ‘git
     status’ or ‘git add’.  This feature is still experimental.  Some
     commands might be slower with a sparse index until they are
     properly integrated with the feature.

     *WARNING:* Using a sparse index requires modifying the index in a
     way that is not completely understood by external tools.  If you
     have trouble with this compatibility, then run ‘git sparse-checkout
     init --no-sparse-index’ to rewrite your index to not be sparse.
     Older versions of Git will not understand the sparse directory
     entries index extension and may fail to interact with your
     repository until it is disabled.

_set_
     Write a set of patterns to the sparse-checkout file, as given as a
     list of arguments following the _set_ subcommand.  Update the
     working directory to match the new patterns.  Enable the
     core.sparseCheckout config setting if it is not already enabled.

     When the ‘--stdin’ option is provided, the patterns are read from
     standard in as a newline-delimited list instead of from the
     arguments.

     When ‘core.sparseCheckoutCone’ is enabled, the input list is
     considered a list of directories instead of sparse-checkout
     patterns.  The command writes patterns to the sparse-checkout file
     to include all files contained in those directories (recursively)
     as well as files that are siblings of ancestor directories.  The
     input format matches the output of ‘git ls-tree --name-only’.  This
     includes interpreting pathnames that begin with a double quote (")
     as C-style quoted strings.

_add_
     Update the sparse-checkout file to include additional patterns.  By
     default, these patterns are read from the command-line arguments,
     but they can be read from stdin using the ‘--stdin’ option.  When
     ‘core.sparseCheckoutCone’ is enabled, the given patterns are
     interpreted as directory names as in the _set_ subcommand.

_reapply_
     Reapply the sparsity pattern rules to paths in the working tree.
     Commands like merge or rebase can materialize paths to do their
     work (e.g.  in order to show you a conflict), and other
     sparse-checkout commands might fail to sparsify an individual file
     (e.g.  because it has unstaged changes or conflicts).  In such
     cases, it can make sense to run ‘git sparse-checkout reapply’ later
     after cleaning up affected paths (e.g.  resolving conflicts,
     undoing or committing changes, etc.).

_disable_
     Disable the ‘core.sparseCheckout’ config setting, and restore the
     working directory to include all files.  Leaves the sparse-checkout
     file intact so a later _git sparse-checkout init_ command may
     return the working directory to the same state.


SPARSE CHECKOUT
***************

"Sparse checkout" allows populating the working directory sparsely.  It
uses the skip-worktree bit (see git-update-index(1)) to tell Git whether
a file in the working directory is worth looking at.  If the
skip-worktree bit is set, then the file is ignored in the working
directory.  Git will not populate the contents of those files, which
makes a sparse checkout helpful when working in a repository with many
files, but only a few are important to the current user.

   The ‘$GIT_DIR/info/sparse-checkout’ file is used to define the
skip-worktree reference bitmap.  When Git updates the working directory,
it updates the skip-worktree bits in the index based on this file.  The
files matching the patterns in the file will appear in the working
directory, and the rest will not.

   To enable the sparse-checkout feature, run ‘git sparse-checkout init’
to initialize a simple sparse-checkout file and enable the
‘core.sparseCheckout’ config setting.  Then, run ‘git sparse-checkout
set’ to modify the patterns in the sparse-checkout file.

   To repopulate the working directory with all files, use the ‘git
sparse-checkout disable’ command.


FULL PATTERN SET
****************

By default, the sparse-checkout file uses the same syntax as
‘.gitignore’ files.

   While ‘$GIT_DIR/info/sparse-checkout’ is usually used to specify what
files are included, you can also specify what files are _not_ included,
using negative patterns.  For example, to remove the file ‘unwanted’:

     /*
     !unwanted


CONE PATTERN SET
****************

The full pattern set allows for arbitrary pattern matches and
complicated inclusion/exclusion rules.  These can result in O(N*M)
pattern matches when updating the index, where N is the number of
patterns and M is the number of paths in the index.  To combat this
performance issue, a more restricted pattern set is allowed when
‘core.sparseCheckoutCone’ is enabled.

   The accepted patterns in the cone pattern set are:

  1. *Recursive:* All paths inside a directory are included.

  2. *Parent:* All files immediately inside a directory are included.

   In addition to the above two patterns, we also expect that all files
in the root directory are included.  If a recursive pattern is added,
then all leading directories are added as parent patterns.

   By default, when running ‘git sparse-checkout init’, the root
directory is added as a parent pattern.  At this point, the
sparse-checkout file contains the following patterns:

     /*
     !/*/

   This says "include everything in root, but nothing two levels below
root."

   When in cone mode, the ‘git sparse-checkout set’ subcommand takes a
list of directories instead of a list of sparse-checkout patterns.  In
this mode, the command ‘git sparse-checkout set A/B/C’ sets the
directory ‘A/B/C’ as a recursive pattern, the directories ‘A’ and ‘A/B’
are added as parent patterns.  The resulting sparse-checkout file is now

     /*
     !/*/
     /A/
     !/A/*/
     /A/B/
     !/A/B/*/
     /A/B/C/

   Here, order matters, so the negative patterns are overridden by the
positive patterns that appear lower in the file.

   If ‘core.sparseCheckoutCone=true’, then Git will parse the
sparse-checkout file expecting patterns of these types.  Git will warn
if the patterns do not match.  If the patterns do match the expected
format, then Git will use faster hash- based algorithms to compute
inclusion in the sparse-checkout.

   In the cone mode case, the ‘git sparse-checkout list’ subcommand will
list the directories that define the recursive patterns.  For the
example sparse-checkout file above, the output is as follows:

     $ git sparse-checkout list
     A/B/C

   If ‘core.ignoreCase=true’, then the pattern-matching algorithm will
use a case-insensitive check.  This corrects for case mismatched
filenames in the _git sparse-checkout set_ command to reflect the
expected cone in the working directory.

   When changing the sparse-checkout patterns in cone mode, Git will
inspect each tracked directory that is not within the sparse-checkout
cone to see if it contains any untracked files.  If all of those files
are ignored due to the ‘.gitignore’ patterns, then the directory will be
deleted.  If any of the untracked files within that directory is not
ignored, then no deletions will occur within that directory and a
warning message will appear.  If these files are important, then reset
your sparse-checkout definition so they are included, use ‘git add’ and
‘git commit’ to store them, then remove any remaining files manually to
ensure Git can behave optimally.


SUBMODULES
**********

If your repository contains one or more submodules, then submodules are
populated based on interactions with the ‘git submodule’ command.
Specifically, ‘git submodule init -- <path>’ will ensure the submodule
at ‘<path>’ is present, while ‘git submodule deinit [-f] -- <path>’ will
remove the files for the submodule at ‘<path>’ (including any untracked
files, uncommitted changes, and unpushed history).  Similar to how
sparse-checkout removes files from the working tree but still leaves
entries in the index, deinitialized submodules are removed from the
working directory but still have an entry in the index.

   Since submodules may have unpushed changes or untracked files,
removing them could result in data loss.  Thus, changing sparse
inclusion/exclusion rules will not cause an already checked out
submodule to be removed from the working copy.  Said another way, just
as ‘checkout’ will not cause submodules to be automatically removed or
initialized even when switching between branches that remove or add
submodules, using ‘sparse-checkout’ to reduce or expand the scope of
"interesting" files will not cause submodules to be automatically
deinitialized or initialized either.

   Further, the above facts mean that there are multiple reasons that
"tracked" files might not be present in the working copy: sparsity
pattern application from sparse-checkout, and submodule initialization
state.  Thus, commands like ‘git grep’ that work on tracked files in the
working copy may return results that are limited by either or both of
these restrictions.


SEE ALSO
********

git-read-tree(1) gitignore(5)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-stage,  Up: Top

Name
****

git-stage — ファイルの内容をステージング領域に追加


Synopsis
********

     git stage args…


DESCRIPTION
***********

これは git-add(1) の同義語です。 git-add(1) の文書を参照してください。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-stash,  Up: Top

Name
****

git-stash — Stash the changes in a dirty working directory away


Synopsis
********

     git stash list [<log-options>]
     git stash show [-u|–include-untracked|–only-untracked] [<diff-options>] [<stash>]
     git stash drop [-q|–quiet] [<stash>]
     git stash ( pop | apply ) [–index] [-q|–quiet] [<stash>]
     git stash branch <branchname> [<stash>]
     git stash [push [-p|–patch] [-k|–[no-]keep-index] [-q|–quiet]
                  [-u|–include-untracked] [-a|–all] [-m|–message <message>]
                  [–pathspec-from-file=<file> [–pathspec-file-nul]]
                  [–] [<pathspec>…]]
     git stash clear
     git stash create [<message>]
     git stash store [-m|–message <message>] [-q|–quiet] <commit>


DESCRIPTION
***********

Use ‘git stash’ when you want to record the current state of the working
directory and the index, but want to go back to a clean working
directory.  The command saves your local modifications away and reverts
the working directory to match the ‘HEAD’ commit.

   The modifications stashed away by this command can be listed with
‘git stash list’, inspected with ‘git stash show’, and restored
(potentially on top of a different commit) with ‘git stash apply’.
Calling ‘git stash’ without any arguments is equivalent to ‘git stash
push’.  A stash is by default listed as "WIP on _branchname_ …", but you
can give a more descriptive message on the command line when you create
one.

   The latest stash you created is stored in ‘refs/stash’; older stashes
are found in the reflog of this reference and can be named using the
usual reflog syntax (e.g.  ‘stash@{0}’ is the most recently created
stash, ‘stash@{1}’ is the one before it, ‘stash@{2.hours.ago}’ is also
possible).  Stashes may also be referenced by specifying just the stash
index (e.g.  the integer ‘n’ is equivalent to ‘stash@{n}’).


COMMANDS
********

push [-p|–patch] [-k|–[no-]keep-index] [-u|–include-untracked] [-a|–all] [-q|–quiet] [-m|–message <message>] [–pathspec-from-file=<file> [–pathspec-file-nul]] [–] [<pathspec>…]
     Save your local modifications to a new _stash entry_ and roll them
     back to HEAD (in the working tree and in the index).  The <message>
     part is optional and gives the description along with the stashed
     state.

     For quickly making a snapshot, you can omit "push".  In this mode,
     non-option arguments are not allowed to prevent a misspelled
     subcommand from making an unwanted stash entry.  The two exceptions
     to this are ‘stash -p’ which acts as alias for ‘stash push -p’ and
     pathspec elements, which are allowed after a double hyphen ‘--’ for
     disambiguation.

save [-p|–patch] [-k|–[no-]keep-index] [-u|–include-untracked] [-a|–all] [-q|–quiet] [<message>]
     This option is deprecated in favour of _git stash push_.  It
     differs from "stash push" in that it cannot take pathspec.
     Instead, all non-option arguments are concatenated to form the
     stash message.

list [<log-options>]
     List the stash entries that you currently have.  Each _stash entry_
     is listed with its name (e.g.  ‘stash@{0}’ is the latest entry,
     ‘stash@{1}’ is the one before, etc.), the name of the branch that
     was current when the entry was made, and a short description of the
     commit the entry was based on.

          stash@{0}: WIP on submit: 6ebd0e2... Update git-stash documentation
          stash@{1}: On master: 9cc0589... Add git-stash

     The command takes options applicable to the _git log_ command to
     control what is shown and how.  See git-log(1).

show [-u|–include-untracked|–only-untracked] [<diff-options>] [<stash>]
     Show the changes recorded in the stash entry as a diff between the
     stashed contents and the commit back when the stash entry was first
     created.  By default, the command shows the diffstat, but it will
     accept any format known to _git diff_ (e.g., ‘git stash show -p
     stash@{1}’ to view the second most recent entry in patch form).  If
     no ‘<diff-option>’ is provided, the default behavior will be given
     by the ‘stash.showStat’, and ‘stash.showPatch’ config variables.
     You can also use ‘stash.showIncludeUntracked’ to set whether
     ‘--include-untracked’ is enabled by default.

pop [–index] [-q|–quiet] [<stash>]
     Remove a single stashed state from the stash list and apply it on
     top of the current working tree state, i.e., do the inverse
     operation of ‘git stash push’.  The working directory must match
     the index.

     Applying the state can fail with conflicts; in this case, it is not
     removed from the stash list.  You need to resolve the conflicts by
     hand and call ‘git stash drop’ manually afterwards.

apply [–index] [-q|–quiet] [<stash>]
     Like ‘pop’, but do not remove the state from the stash list.
     Unlike ‘pop’, ‘<stash>’ may be any commit that looks like a commit
     created by ‘stash push’ or ‘stash create’.

branch <branchname> [<stash>]
     Creates and checks out a new branch named ‘<branchname>’ starting
     from the commit at which the ‘<stash>’ was originally created,
     applies the changes recorded in ‘<stash>’ to the new working tree
     and index.  If that succeeds, and ‘<stash>’ is a reference of the
     form ‘stash@{<revision>}’, it then drops the ‘<stash>’.

     This is useful if the branch on which you ran ‘git stash push’ has
     changed enough that ‘git stash apply’ fails due to conflicts.
     Since the stash entry is applied on top of the commit that was HEAD
     at the time ‘git stash’ was run, it restores the originally stashed
     state with no conflicts.

clear
     Remove all the stash entries.  Note that those entries will then be
     subject to pruning, and may be impossible to recover (see
     _Examples_ below for a possible strategy).

drop [-q|–quiet] [<stash>]
     Remove a single stash entry from the list of stash entries.

create
     Create a stash entry (which is a regular commit object) and return
     its object name, without storing it anywhere in the ref namespace.
     This is intended to be useful for scripts.  It is probably not the
     command you want to use; see "push" above.

store
     Store a given stash created via _git stash create_ (which is a
     dangling merge commit) in the stash ref, updating the stash reflog.
     This is intended to be useful for scripts.  It is probably not the
     command you want to use; see "push" above.


OPTIONS
*******

‘-a’
‘--all’
     This option is only valid for ‘push’ and ‘save’ commands.

     All ignored and untracked files are also stashed and then cleaned
     up with ‘git clean’.

‘-u’
‘--include-untracked’
‘--no-include-untracked’
     When used with the ‘push’ and ‘save’ commands, all untracked files
     are also stashed and then cleaned up with ‘git clean’.

     When used with the ‘show’ command, show the untracked files in the
     stash entry as part of the diff.

‘--only-untracked’
     This option is only valid for the ‘show’ command.

     Show only the untracked files in the stash entry as part of the
     diff.

‘--index’
     This option is only valid for ‘pop’ and ‘apply’ commands.

     Tries to reinstate not only the working tree’s changes, but also
     the index’s ones.  However, this can fail, when you have conflicts
     (which are stored in the index, where you therefore can no longer
     apply the changes as they were originally).

‘-k’
‘--keep-index’
‘--no-keep-index’
     This option is only valid for ‘push’ and ‘save’ commands.

     All changes already added to the index are left intact.

‘-p’
‘--patch’
     This option is only valid for ‘push’ and ‘save’ commands.

     Interactively select hunks from the diff between HEAD and the
     working tree to be stashed.  The stash entry is constructed such
     that its index state is the same as the index state of your
     repository, and its worktree contains only the changes you selected
     interactively.  The selected changes are then rolled back from your
     worktree.  See the “Interactive Mode” section of git-add(1) to
     learn how to operate the ‘--patch’ mode.

     The ‘--patch’ option implies ‘--keep-index’.  You can use
     ‘--no-keep-index’ to override this.

‘--pathspec-from-file=<file>’
     This option is only valid for ‘push’ command.

     Pathspec is passed in ‘<file>’ instead of commandline args.  If
     ‘<file>’ is exactly ‘-’ then standard input is used.  Pathspec
     elements are separated by LF or CR/LF. Pathspec elements can be
     quoted as explained for the configuration variable ‘core.quotePath’
     (see git-config(1)).  See also ‘--pathspec-file-nul’ and global
     ‘--literal-pathspecs’.

‘--pathspec-file-nul’
     This option is only valid for ‘push’ command.

     Only meaningful with ‘--pathspec-from-file’.  Pathspec elements are
     separated with NUL character and all other characters are taken
     literally (including newlines and quotes).

‘-q’
‘--quiet’
     This option is only valid for ‘apply’, ‘drop’, ‘pop’, ‘push’,
     ‘save’, ‘store’ commands.

     Quiet, suppress feedback messages.

–
     This option is only valid for ‘push’ command.

     Separates pathspec from options for disambiguation purposes.

<pathspec>…
     This option is only valid for ‘push’ command.

     The new stash entry records the modified states only for the files
     that match the pathspec.  The index entries and working tree files
     are then rolled back to the state in HEAD only for these files,
     too, leaving files that do not match the pathspec intact.

     For more details, see the _pathspec_ entry in gitglossary(7).

<stash>
     This option is only valid for ‘apply’, ‘branch’, ‘drop’, ‘pop’,
     ‘show’ commands.

     A reference of the form ‘stash@{<revision>}’.  When no ‘<stash>’ is
     given, the latest stash is assumed (that is, ‘stash@{0}’).


DISCUSSION
**********

A stash entry is represented as a commit whose tree records the state of
the working directory, and its first parent is the commit at ‘HEAD’ when
the entry was created.  The tree of the second parent records the state
of the index when the entry is made, and it is made a child of the
‘HEAD’ commit.  The ancestry graph looks like this:

            .----W
           /    /
     -----H----I

   where ‘H’ is the ‘HEAD’ commit, ‘I’ is a commit that records the
state of the index, and ‘W’ is a commit that records the state of the
working tree.


EXAMPLES
********

Pulling into a dirty tree
     When you are in the middle of something, you learn that there are
     upstream changes that are possibly relevant to what you are doing.
     When your local changes do not conflict with the changes in the
     upstream, a simple ‘git pull’ will let you move forward.

     However, there are cases in which your local changes do conflict
     with the upstream changes, and ‘git pull’ refuses to overwrite your
     changes.  In such a case, you can stash your changes away, perform
     a pull, and then unstash, like this:

          $ git pull
           ...
          file foobar not up to date, cannot merge.
          $ git stash
          $ git pull
          $ git stash pop

Interrupted workflow
     When you are in the middle of something, your boss comes in and
     demands that you fix something immediately.  Traditionally, you
     would make a commit to a temporary branch to store your changes
     away, and return to your original branch to make the emergency fix,
     like this:

          # ... hack hack hack ...
          $ git switch -c my_wip
          $ git commit -a -m "WIP"
          $ git switch master
          $ edit emergency fix
          $ git commit -a -m "Fix in a hurry"
          $ git switch my_wip
          $ git reset --soft HEAD^
          # ... continue hacking ...

     You can use _git stash_ to simplify the above, like this:

          # ... hack hack hack ...
          $ git stash
          $ edit emergency fix
          $ git commit -a -m "Fix in a hurry"
          $ git stash pop
          # ... continue hacking ...

Testing partial commits
     You can use ‘git stash push --keep-index’ when you want to make two
     or more commits out of the changes in the work tree, and you want
     to test each change before committing:

          # ... hack hack hack ...
          $ git add --patch foo            # add just first part to the index
          $ git stash push --keep-index    # save all other changes to the stash
          $ edit/build/test first part
          $ git commit -m 'First part'     # commit fully tested change
          $ git stash pop                  # prepare to work on all other changes
          # ... repeat above five steps until one commit remains ...
          $ edit/build/test remaining parts
          $ git commit foo -m 'Remaining parts'

Recovering stash entries that were cleared/dropped erroneously
     If you mistakenly drop or clear stash entries, they cannot be
     recovered through the normal safety mechanisms.  However, you can
     try the following incantation to get a list of stash entries that
     are still in your repository, but not reachable any more:

          git fsck --unreachable |
          grep commit | cut -d\  -f3 |
          xargs git log --merges --no-walk --grep=WIP


SEE ALSO
********

git-checkout(1), git-commit(1), git-reflog(1), git-reset(1),
git-switch(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-status,  Up: Top

Name
****

git-status — Show the working tree status


Synopsis
********

     git status [<options>…] [–] [<pathspec>…]


DESCRIPTION
***********

Displays paths that have differences between the index file and the
current HEAD commit, paths that have differences between the working
tree and the index file, and paths in the working tree that are not
tracked by Git (and are not ignored by gitignore(5)).  The first are
what you _would_ commit by running ‘git commit’; the second and third
are what you _could_ commit by running _git add_ before running ‘git
commit’.


OPTIONS
*******

‘-s’
‘--short’
     Give the output in the short-format.

‘-b’
‘--branch’
     Show the branch and tracking info even in short-format.

‘--show-stash’
     Show the number of entries currently stashed away.

‘--porcelain[=<version>]’
     Give the output in an easy-to-parse format for scripts.  This is
     similar to the short output, but will remain stable across Git
     versions and regardless of user configuration.  See below for
     details.

     The version parameter is used to specify the format version.  This
     is optional and defaults to the original version _v1_ format.

‘--long’
     Give the output in the long-format.  This is the default.

‘-v’
‘--verbose’
     In addition to the names of files that have been changed, also show
     the textual changes that are staged to be committed (i.e., like the
     output of ‘git diff --cached’).  If ‘-v’ is specified twice, then
     also show the changes in the working tree that have not yet been
     staged (i.e., like the output of ‘git diff’).

‘-u[<mode>]’
‘--untracked-files[=<mode>]’
     Show untracked files.

     The mode parameter is used to specify the handling of untracked
     files.  It is optional: it defaults to _all_, and if specified, it
     must be stuck to the option (e.g.  ‘-uno’, but not ‘-u no’).

     The possible options are:

        • _no_ - Show no untracked files.

        • _normal_ - Shows untracked files and directories.

        • _all_ - Also shows individual files in untracked directories.

     When ‘-u’ option is not used, untracked files and directories are
     shown (i.e.  the same as specifying ‘normal’), to help you avoid
     forgetting to add newly created files.  Because it takes extra work
     to find untracked files in the filesystem, this mode may take some
     time in a large working tree.  Consider enabling untracked cache
     and split index if supported (see ‘git update-index
     --untracked-cache’ and ‘git update-index --split-index’), Otherwise
     you can use ‘no’ to have ‘git status’ return more quickly without
     showing untracked files.

     The default can be changed using the status.showUntrackedFiles
     configuration variable documented in git-config(1).

‘--ignore-submodules[=<when>]’
     Ignore changes to submodules when looking for changes.  <when> can
     be either "none", "untracked", "dirty" or "all", which is the
     default.  Using "none" will consider the submodule modified when it
     either contains untracked or modified files or its HEAD differs
     from the commit recorded in the superproject and can be used to
     override any settings of the _ignore_ option in git-config(1) or
     gitmodules(5).  When "untracked" is used submodules are not
     considered dirty when they only contain untracked content (but they
     are still scanned for modified content).  Using "dirty" ignores all
     changes to the work tree of submodules, only changes to the commits
     stored in the superproject are shown (this was the behavior before
     1.7.0).  Using "all" hides all changes to submodules (and
     suppresses the output of submodule summaries when the config option
     ‘status.submoduleSummary’ is set).

‘--ignored[=<mode>]’
     Show ignored files as well.

     The mode parameter is used to specify the handling of ignored
     files.  It is optional: it defaults to _traditional_.

     The possible options are:

        • _traditional_ - Shows ignored files and directories, unless
          –untracked-files=all is specified, in which case individual
          files in ignored directories are displayed.

        • _no_ - Show no ignored files.

        • _matching_ - Shows ignored files and directories matching an
          ignore pattern.

     When _matching_ mode is specified, paths that explicitly match an
     ignored pattern are shown.  If a directory matches an ignore
     pattern, then it is shown, but not paths contained in the ignored
     directory.  If a directory does not match an ignore pattern, but
     all contents are ignored, then the directory is not shown, but all
     contents are shown.

‘-z’
     Terminate entries with NUL, instead of LF. This implies the
     ‘--porcelain=v1’ output format if no other format is given.

‘--column[=<options>]’
‘--no-column’
     Display untracked files in columns.  See configuration variable
     ‘column.status’ for option syntax.  ‘--column’ and ‘--no-column’
     without options are equivalent to _always_ and _never_
     respectively.

‘--ahead-behind’
‘--no-ahead-behind’
     Display or do not display detailed ahead/behind counts for the
     branch relative to its upstream branch.  Defaults to true.

‘--renames’
‘--no-renames’
     Turn on/off rename detection regardless of user configuration.  See
     also git-diff(1) ‘--no-renames’.

‘--find-renames[=<n>]’
     Turn on rename detection, optionally setting the similarity
     threshold.  See also git-diff(1) ‘--find-renames’.

<pathspec>…
     See the _pathspec_ entry in gitglossary(7).


OUTPUT
******

The output from this command is designed to be used as a commit template
comment.  The default, long format, is designed to be human readable,
verbose and descriptive.  Its contents and format are subject to change
at any time.

   The paths mentioned in the output, unlike many other Git commands,
are made relative to the current directory if you are working in a
subdirectory (this is on purpose, to help cutting and pasting).  See the
status.relativePaths config option below.


Short Format
============

In the short-format, the status of each path is shown as one of these
forms

     XY PATH
     XY ORIG_PATH -> PATH

   where ‘ORIG_PATH’ is where the renamed/copied contents came from.
‘ORIG_PATH’ is only shown when the entry is renamed or copied.  The ‘XY’
is a two-letter status code.

   The fields (including the ‘->’) are separated from each other by a
single space.  If a filename contains whitespace or other nonprintable
characters, that field will be quoted in the manner of a C string
literal: surrounded by ASCII double quote (34) characters, and with
interior special characters backslash-escaped.

   There are three different types of states that are shown using this
format, and each one uses the ‘XY’ syntax differently:

   • When a merge is occurring and the merge was successful, or outside
     of a merge situation, ‘X’ shows the status of the index and ‘Y’
     shows the status of the working tree.

   • When a merge conflict has occurred and has not yet been resolved,
     ‘X’ and ‘Y’ show the state introduced by each head of the merge,
     relative to the common ancestor.  These paths are said to be
     _unmerged_.

   • When a path is untracked, ‘X’ and ‘Y’ are always the same, since
     they are unknown to the index.  ‘??’ is used for untracked paths.
     Ignored files are not listed unless ‘--ignored’ is used; if it is,
     ignored files are indicated by ‘!!’.

   Note that the term _merge_ here also includes rebases using the
default ‘--merge’ strategy, cherry-picks, and anything else using the
merge machinery.

   In the following table, these three classes are shown in separate
sections, and these characters are used for ‘X’ and ‘Y’ fields for the
first two sections that show tracked paths:

   • ’ ’ = unmodified

   • _M_ = modified

   • _A_ = added

   • _D_ = deleted

   • _R_ = renamed

   • _C_ = copied

   • _U_ = updated but unmerged

     X          Y     Meaning
     -------------------------------------------------
              [AMD]   not updated
     M        [ MD]   updated in index
     A        [ MD]   added to index
     D                deleted from index
     R        [ MD]   renamed in index
     C        [ MD]   copied in index
     [MARC]           index and work tree matches
     [ MARC]     M    work tree changed since index
     [ MARC]     D    deleted in work tree
     [ D]        R    renamed in work tree
     [ D]        C    copied in work tree
     -------------------------------------------------
     D           D    unmerged, both deleted
     A           U    unmerged, added by us
     U           D    unmerged, deleted by them
     U           A    unmerged, added by them
     D           U    unmerged, deleted by us
     A           A    unmerged, both added
     U           U    unmerged, both modified
     -------------------------------------------------
     ?           ?    untracked
     !           !    ignored
     -------------------------------------------------

   Submodules have more state and instead report M the submodule has a
different HEAD than recorded in the index m the submodule has modified
content ?  the submodule has untracked files since modified content or
untracked files in a submodule cannot be added via ‘git add’ in the
superproject to prepare a commit.

   _m_ and _?_  are applied recursively.  For example if a nested
submodule in a submodule contains an untracked file, this is reported as
_?_  as well.

   If -b is used the short-format status is preceded by a line

     ## branchname tracking info


Porcelain Format Version 1
==========================

Version 1 porcelain format is similar to the short format, but is
guaranteed not to change in a backwards-incompatible way between Git
versions or based on user configuration.  This makes it ideal for
parsing by scripts.  The description of the short format above also
describes the porcelain format, with a few exceptions:

  1. The user’s color.status configuration is not respected; color will
     always be off.

  2. The user’s status.relativePaths configuration is not respected;
     paths shown will always be relative to the repository root.

   There is also an alternate -z format recommended for machine parsing.
In that format, the status field is the same, but some other things
change.  First, the _->_ is omitted from rename entries and the field
order is reversed (e.g _from -> to_ becomes _to from_).  Second, a NUL
(ASCII 0) follows each filename, replacing space as a field separator
and the terminating newline (but a space still separates the status
field from the first filename).  Third, filenames containing special
characters are not specially formatted; no quoting or backslash-escaping
is performed.

   Any submodule changes are reported as modified ‘M’ instead of ‘m’ or
single ‘?’.


Porcelain Format Version 2
==========================

Version 2 format adds more detailed information about the state of the
worktree and changed items.  Version 2 also defines an extensible set of
easy to parse optional headers.

   Header lines start with "#" and are added in response to specific
command line arguments.  Parsers should ignore headers they don’t
recognize.


Branch Headers
--------------

If ‘--branch’ is given, a series of header lines are printed with
information about the current branch.

     Line                                     Notes
     ------------------------------------------------------------
     # branch.oid <commit> | (initial)        Current commit.
     # branch.head <branch> | (detached)      Current branch.
     # branch.upstream <upstream_branch>      If upstream is set.
     # branch.ab +<ahead> -<behind>           If upstream is set and
                                              the commit is present.
     ------------------------------------------------------------


Changed Tracked Entries
-----------------------

Following the headers, a series of lines are printed for tracked
entries.  One of three different line formats may be used to describe an
entry depending on the type of change.  Tracked entries are printed in
an undefined order; parsers should allow for a mixture of the 3 line
types in any order.

   Ordinary changed entries have the following format:

     1 <XY> <sub> <mH> <mI> <mW> <hH> <hI> <path>

   Renamed or copied entries have the following format:

     2 <XY> <sub> <mH> <mI> <mW> <hH> <hI> <X><score> <path><sep><origPath>

     Field       Meaning
     --------------------------------------------------------
     <XY>        A 2 character field containing the staged and
                 unstaged XY values described in the short format,
                 with unchanged indicated by a "." rather than
                 a space.
     <sub>       A 4 character field describing the submodule state.
                 "N..." when the entry is not a submodule.
                 "S<c><m><u>" when the entry is a submodule.
                 <c> is "C" if the commit changed; otherwise ".".
                 <m> is "M" if it has tracked changes; otherwise ".".
                 <u> is "U" if there are untracked changes; otherwise ".".
     <mH>        The octal file mode in HEAD.
     <mI>        The octal file mode in the index.
     <mW>        The octal file mode in the worktree.
     <hH>        The object name in HEAD.
     <hI>        The object name in the index.
     <X><score>  The rename or copy score (denoting the percentage
                 of similarity between the source and target of the
                 move or copy). For example "R100" or "C75".
     <path>      The pathname.  In a renamed/copied entry, this
                 is the target path.
     <sep>       When the `-z` option is used, the 2 pathnames are separated
                 with a NUL (ASCII 0x00) byte; otherwise, a tab (ASCII 0x09)
                 byte separates them.
     <origPath>  The pathname in the commit at HEAD or in the index.
                 This is only present in a renamed/copied entry, and
                 tells where the renamed/copied contents came from.
     --------------------------------------------------------

   Unmerged entries have the following format; the first character is a
"u" to distinguish from ordinary changed entries.

     u <xy> <sub> <m1> <m2> <m3> <mW> <h1> <h2> <h3> <path>

     Field       Meaning
     --------------------------------------------------------
     <XY>        A 2 character field describing the conflict type
                 as described in the short format.
     <sub>       A 4 character field describing the submodule state
                 as described above.
     <m1>        The octal file mode in stage 1.
     <m2>        The octal file mode in stage 2.
     <m3>        The octal file mode in stage 3.
     <mW>        The octal file mode in the worktree.
     <h1>        The object name in stage 1.
     <h2>        The object name in stage 2.
     <h3>        The object name in stage 3.
     <path>      The pathname.
     --------------------------------------------------------


Other Items
-----------

Following the tracked entries (and if requested), a series of lines will
be printed for untracked and then ignored items found in the worktree.

   Untracked items have the following format:

     ? <path>

   Ignored items have the following format:

     ! <path>


Pathname Format Notes and -z
----------------------------

When the ‘-z’ option is given, pathnames are printed as is and without
any quoting and lines are terminated with a NUL (ASCII 0x00) byte.

   Without the ‘-z’ option, pathnames with "unusual" characters are
quoted as explained for the configuration variable ‘core.quotePath’ (see
git-config(1)).


CONFIGURATION
*************

The command honors ‘color.status’ (or ‘status.color’ — they mean the
same thing and the latter is kept for backward compatibility) and
‘color.status.<slot>’ configuration variables to colorize its output.

   If the config variable ‘status.relativePaths’ is set to false, then
all paths shown are relative to the repository root, not to the current
directory.

   If ‘status.submoduleSummary’ is set to a non zero number or true
(identical to -1 or an unlimited number), the submodule summary will be
enabled for the long format and a summary of commits for modified
submodules will be shown (see –summary-limit option of
git-submodule(1)).  Please note that the summary output from the status
command will be suppressed for all submodules when
‘diff.ignoreSubmodules’ is set to _all_ or only for those submodules
where ‘submodule.<name>.ignore=all’.  To also view the summary for
ignored submodules you can either use the –ignore-submodules=dirty
command line option or the _git submodule summary_ command, which shows
a similar output but does not honor these settings.


BACKGROUND REFRESH
******************

By default, ‘git status’ will automatically refresh the index, updating
the cached stat information from the working tree and writing out the
result.  Writing out the updated index is an optimization that isn’t
strictly necessary (‘status’ computes the values for itself, but writing
them out is just to save subsequent programs from repeating our
computation).  When ‘status’ is run in the background, the lock held
during the write may conflict with other simultaneous processes, causing
them to fail.  Scripts running ‘status’ in the background should
consider using ‘git --no-optional-locks status’ (see git(1) for
details).


SEE ALSO
********

gitignore(5)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-stripspace,  Up: Top

Name
****

git-stripspace — 不要な空白(whitespace)を削除します


Synopsis
********

     git stripspace [-s | –strip-comments]
     git stripspace [-c | –comment-lines]


DESCRIPTION
***********

コミットメッセージ・メモ・タグ・ブランチの説明などのテキストを標準の入力
から読み取り、Gitで使用されている作法でクリーンアップします。

   引数なしの場合、この作法は以下のようになります:

   • 全ての行の末尾の空白(whitespace)を取り除く

   • 複数の連続する空行を1つの空行に折りたたむ

   • 入力の最初と最後から空行を削除

   • 必要に応じて、欠落している _\n_ を最後の行に追加します。

   入力がすべて空白文字(whitespace characters)で構成されている場合、出力
は生成されません。

   *注意* これはメタデータのクリーニングを目的としています。リポジトリ内
のパッチまたは ファイルの空白を修正するには、 git-apply(1) の
‘--whitespace=fix’ モードをお勧めします。


OPTIONS
*******

‘-s’
‘--strip-comments’
     コメント文字で始まるすべての行をスキップして削除します(デフォルトは
     _#_ )。

‘-c’
‘--comment-lines’
     各行の前にコメント文字と空白を付けます。行は自動的に改行で終了しま
     す。 空行では、コメント文字のみが先頭に追加されます。


EXAMPLES
********

以下のようなノイズの多い入力があるとします。 _$_ は行の終わりを示してい
ます:

     |A brief introduction   $
     |   $
     |$
     |A new paragraph$
     |# with a commented-out line    $
     |explaining lots of stuff.$
     |$
     |# An old paragraph, also commented-out. $
     |      $
     |The end.$
     |  $

   _git stripspace_ を引数無しで実行すると以下のようになります:

     |A brief introduction$
     |$
     |A new paragraph$
     |# with a commented-out line$
     |explaining lots of stuff.$
     |$
     |# An old paragraph, also commented-out.$
     |$
     |The end.$

   _git stripspace –strip-comments_ を使うと以下のようになります:

     |A brief introduction$
     |$
     |A new paragraph$
     |explaining lots of stuff.$
     |$
     |The end.$


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-submodule,  Up: Top

Name
****

git-submodule — サブモジュールを初期化、更新、または検査します


Synopsis
********

     git submodule [–quiet] [–cached]
     git submodule [–quiet] add [<options>] [–] <repository> [<path>]
     git submodule [–quiet] status [–cached] [–recursive] [–] [<path>…]
     git submodule [–quiet] init [–] [<path>…]
     git submodule [–quiet] deinit [-f|–force] (–all|[–] <path>…)
     git submodule [–quiet] update [<options>] [–] [<path>…]
     git submodule [–quiet] set-branch [<options>] [–] <path>
     git submodule [–quiet] set-url [–] <path> <newurl>
     git submodule [–quiet] summary [<options>] [–] [<path>…]
     git submodule [–quiet] foreach [–recursive] <command>
     git submodule [–quiet] sync [–recursive] [–] [<path>…]
     git submodule [–quiet] absorbgitdirs [–] [<path>…]


DESCRIPTION
***********

サブモジュールを検査、更新、管理します。

   サブモジュールの詳細については、 gitsubmodules(7) を参照してください
。


COMMANDS
********

引数なしで、既存のサブモジュールのステータスを示します。 サブモジュール
で操作を実行するために、いくつかのサブコマンドを使用できます。

add [-b <branch>] [-f|–force] [–name <name>] [–reference <repository>] [–depth <depth>] [–] <repository> [<path>]
     現在のプロジェクトの次にコミットされるチェンジセットへの指定のパス
     で、指定のポジトリをサブモジュールとして追加します。現在のプロジェ
     クトは「スーパープロジェクト」と呼ばれます。

     <repository> は、新しいサブモジュールの元リポジトリのURLです。これ
     は、絶対URLまたは、( ‘./’ または ‘../’ で始まる場合、)スーパープロ
     ジェクトのデフォルトのリモートリポジトリに相対的な場所のいずれかで
     す(スーパープロジェクト ‘bar.git’ のすぐ隣にあるリポジトリ
     ‘foo.git’ を指定するには、 ‘./foo.git’ の代わりに ‘../foo.git’ を使
     用する必要があることに注意してください — 相対 URL の規則に従ってい
     れば、期待通りになるでしょう — Git における相対 URL の評価は相対デ
     ィレクトリの場合と同じだからです)。

     デフォルトのリモートは、現在のブランチのリモート追跡ブランチのリモ
     ートです。そのようなリモート追跡ブランチが存在しないか、または、
     HEADが切り離されている場合、「origin」がデフォルトのリモートである
     と見なされます。 スーパープロジェクトにデフォルトのリモートが構成さ
     れていない場合、スーパープロジェクトはそれ自身に権限のあるアップス
     トリームであり、代わりに現在の作業ディレクトリが使用されます。

     オプションの引数 <path> は、複製されたサブモジュールがスーパープロ
     ジェクト内で存在するための相対的な場所です。 <path> が指定されてい
     ない場合、ソースリポジトリの正規部分(canonical part)が使用されます
     (‘/path/to/repo.git’ の場合は「repo」、 ‘host.xz:foo/.git’ の場合は
     「foo」)。 <path> が存在し、すでに有効なGitリポジトリである場合、ク
     ローンを作成せずにコミット用にステージングされます。 <path> は、
     ‘--name’ を使用して論理名を指定しない限り、構成エントリでサブモジュ
     ールの論理名としても使用されます。

     指定のURLは、スーパープロジェクトのクローンを作成する後続のユーザー
     が使用できるように ‘.gitmodules’ に記録されます。 URLがスーパープロ
     ジェクトのリポジトリに関連して指定されている場合、スーパープロジェ
     クトとサブモジュールのリポジトリは同じ相対位置にまとめられ、スーパ
     ープロジェクトのURLのみを指定する必要があると想定します。
     git-submoduleは、 ‘.gitmodules’ の相対URLを使用してサブモジュールを
     正しく検索します。

status [–cached] [–recursive] [–] [<path>…]
     サブモジュールの状態を表示します。これにより、各サブモジュールの現
     在チェックアウトされているコミットの SHA-1 が、サブモジュールのパス
     と SHA-1 の _git describe_ の出力と共に出力されます。各 SHA-1 には
     、サブモジュールが初期化されていない場合は _-_ 、現在チェックアウト
     されているサブモジュールコミットが、含まれているリポジトリのインデ
     ックスにある SHA-1 と一致しない場合は _+_ 、サブモジュールにマージ
     競合がある場合は _U_ 、 という接頭辞が付く可能性があります。

     ‘--cached’ が指定されている場合、このコマンドは代わりに、各サブモジ
     ュールのスーパープロジェクトに記録されたSHA-1を出力します。

     ‘--recursive’ が指定されている場合、このコマンドはネストされたサブ
     モジュールに再帰し、それらのステータスも表示します。

     あなたがインデックスまたはHEADに記録されたコミットに関して、現在初
     期化されているサブモジュールの変更のみに関心がある場合は、
     git-status(1) および git-diff(1) もその情報を提供します(サブモジュ
     ールの作業ツリーへの変更も報告します)。

init [–] [<path>…]
     インデックスに記録されたサブモジュール(他の場所で追加およびコミット
     されたサブモジュール)を初期化するには、 ‘.git/config’ に
     ‘submodule.$name.url’ を設定します。テンプレートとして
     ‘.gitmodules’ と同じ設定を使用します。URLが相対的な場合は、デフォル
     トのリモートを使用して解決されます。デフォルトのリモートがない場合
     、現在のリポジトリはアップストリームであると見なされます。

     オプションの <path> 引数は、初期化されるサブモジュールを制限します
     。パスが指定されておらず、 submodule.active が構成されている場合、
     アクティブになるように構成されたサブモジュールが初期化されます。そ
     うでない場合、すべてのサブモジュールが初期化されます。

     存在する場合は、 ‘submodule.$name.update’ の値もコピーします。この
     コマンドは、 ‘.git/config’ の既存の情報を変更しません。あなたは次に
     、ローカル設定用に ‘.git/config’ のサブモジュールクローンURLをカス
     タマイズして、 ‘git submodule update’ に進むことができます。サブモ
     ジュールの場所をカスタマイズする予定がない場合は、明示的な「init」
     ステップなしで ‘git submodule update --init’ を使用することもできま
     す。

     デフォルトのリモートの定義については、add サブコマンドを参照してく
     ださい。

deinit [-f|–force] (–all|[–] <path>…)
     指定のサブモジュールの登録を解除します。つまり、‘.git/config’ から
     _submodule.$name_ セクション全体をその作業ツリーとともに削除します
     。さらに ‘git submodule update’ と ‘git submodule foreach’ と ‘git
     submodule sync’ を呼び出すと、 未登録のサブモジュールが再び初期化さ
     れるまでスキップされるので、作業ツリーにあるサブモジュールのローカ
     ルチェックアウトをもうこれ以上やりたくない場合は、このコマンドを使
     用してください。

     コマンドをpathspecなしで実行すると、間違いを防ぐために、すべてを無
     効にするのではなく、エラーが発生します。

     ‘--force’ が指定されている場合、サブモジュールの作業ツリーは、ロー
     カルの変更が含まれていても削除されます。

     あなたが本当にリポジトリからサブモジュールを削除してコミットしたい
     場合は、代わりに git-rm(1) を使用してください。削除オプションについ
     ては、 gitsubmodules(7) を参照してください。

update [–init] [–remote] [-N|–no-fetch] [–[no-]recommend-shallow] [-f|–force] [–checkout|–rebase|–merge] [–reference <repository>] [–depth <depth>] [–recursive] [–jobs <n>] [–[no-]single-branch] [–] [<path>…]
     登録されたサブモジュールを更新して、欠落しているサブモジュールのク
     ローンを作成し、サブモジュールで欠落しているコミットをフェッチし、
     サブモジュールの作業ツリーを更新して、スーパープロジェクトが期待す
     るものと一致させます。「更新」は、コマンドラインオプションと
     ‘submodule.<name>.update’ 構成変数の値に応じていくつかの方法で実行
     できます。 コマンドラインオプションは、構成変数よりも優先されます。
     どちらも指定されていない場合、「checkout」が実行されます。 コマンド
     ラインと ‘submodule.<name>.update’ 構成の両方でサポートされる「
     update」手順は以下のとおりです:

     checkout
          スーパープロジェクトに記録されたコミットは、 切り離された
          HEAD(detached HEAD)のサブモジュール(submodule)でチェックアウト
          されます。

     + ‘--force’ が指定された場合、サブモジュールは(‘git checkout
     --force’ を使って)チェックアウトされます。たとえ含んでいるリポジト
     リのインデックスで指定されたコミットが、すでにサブモジュールでチェ
     ックアウトしたコミットに一致していてもです。

     rebase
          サブモジュールの現在のブランチは、 スーパープロジェクトに記録
          されたコミットに基づいてリベースされます。

     merge
          スーパープロジェクトに記録されたコミットは、 サブモジュールの
          現在のブランチにマージされます。

     以下の「update」手順は、 ‘submodule.<name>.update’ 構成変数を介して
     のみ使用できます:

     custom command
          単一の引数 (スーパープロジェクトに記録されたコミットのsha1)を
          とる 任意のシェルコマンドが実行されます。
          ‘submodule.<name>.update’ が ‘!command’ に設定されている場合、
          感嘆符(‘!’)の後の残りはカスタムコマンドです。

     none
          サブモジュールは更新されません。

     サブモジュールがまだ初期化されておらず、 ‘.gitmodules’ に格納されて
     いる設定を使用するだけの場合、 あなたは ‘--init’ オプションを使用し
     てサブモジュールを自動的に初期化できます。

     ‘--recursive’ が指定されている場合、このコマンドは登録されたサブモ
     ジュールに再帰し、その中でネストされたサブモジュールを更新します。

set-branch (-b|–branch) <branch> [–] <path>
set-branch (-d|–default) [–] <path>
     サブモジュールのデフォルトのリモート追跡ブランチを設定します。
     ‘--branch’ オプションを使用すると、リモートブランチを指定できます。
     ‘--default’ オプションを使用すると、 submodule.<name>.branch 構成キ
     ーを削除し、これにより、追跡ブランチはデフォルトでリモートの「
     HEAD」になります。

set-url [–] <path> <newurl>
     指定されたサブモジュールのURLを <newurl> に設定します。そしてその次
     に、サブモジュールの新しいリモートURL構成を自動的に同期します。

summary [–cached|–files] [(-n|–summary-limit) <n>] [commit] [–] [<path>…]
     指定のコミット(デフォルトはHEAD)と 作業ツリー/インデックス の間のコ
     ミットの概要を表示します。問い合わせがサブモジュールの場合、指定の
     スーパープロジェクトコミットと、インデックスまたは作業ツリー
     (‘--cached’ によって切り替えられる)の間のサブモジュール内の一連のコ
     ミットが表示されます。オプション ‘--files’ が指定されている場合は、
     スーパープロジェクトのインデックスとサブモジュールの作業ツリーの間
     の、サブモジュールでの一連のコミットを表示します(このオプションでは
     、 ‘--cached’ オプションを使用したり、明示的なコミットを提供したり
     することはできません)。

     git-diff(1) で ‘--submodule=log’ オプションを使用すると、その情報も
     提供されます。

foreach [–recursive] <command>
     チェックアウトされた各サブモジュールで任意のシェルコマンドを評価し
     ます。このコマンドは、変数 $name と $sm_path と $displaypath と
     $sha1 と$toplevel にアクセスできます。$name は、 ‘.gitmodules’ の関
     連するサブモジュールセクションの名前で、 $sm_path は、直接のスーパ
     ープロジェクト(immediate superproject)に記録されているサブモジュー
     ルのパスで、 $displaypath には、現在の作業ディレクトリからサブモジ
     ュールのルートディレクトリへの相対パスが含まれ、 $sha1 は、直接のス
     ーパープロジェクト(immediate superproject)に記録されているコミット
     で、 $toplevel は、直接のスーパープロジェクト(immediate
     superproject)のトップレベルへの絶対パスです。Windowsでの ‘$PATH’ と
     の競合を避けるために、 ‘$path’ 変数は ‘$sm_path’ 変数の非推奨の同義
     語になっていることに注意してください。スーパープロジェクトで定義さ
     れているがチェックアウトされていないサブモジュールは、このコマンド
     では無視されます。‘--quiet’ が指定されていない限り、foreachはコマン
     ドを評価する前に各サブモジュールの名前を出力します。 ‘--recursive’
     が指定されている場合、サブモジュールは再帰的にトラバースされます(つ
     まり、指定のシェルコマンドはネストされたサブモジュールでも評価され
     ます)。 サブモジュールのコマンドからゼロ以外の値が返されると、処理
     が終了(terminate)します。これは、コマンドの最後に ‘|| :’ を追加する
     ことでオーバーライドできます。

     例として、以下のコマンドは、各サブモジュールのパスと現在チェックア
     ウトされているコミットを表示します:

          git submodule foreach 'echo $sm_path `git rev-parse HEAD`'

sync [–recursive] [–] [<path>…]
     サブモジュールのリモートURL構成設定を ‘.gitmodules’ で指定された値
     に同期します。 これは、‘.git/config’ にすでにURLエントリがあるサブ
     モジュールにのみ影響します(これは、初期化されたとき、または新しく追
     加されたときの場合です)。これは、サブモジュールのURLがアップストリ
     ームで変更され、それに応じてローカルリポジトリを更新する必要がある
     場合に役立ちます。

     ‘git submodule sync’ はすべてのサブモジュールを同期しますが、 ‘git
     submodule sync -- A’ はサブモジュール "A" のみを同期します。

     ‘--recursive’ が指定されている場合、このコマンドは登録されたサブモ
     ジュールに再帰し、その中でネストされたサブモジュールを同期します。

absorbgitdirs
     サブモジュールのgitディレクトリがサブモジュール内にある場合、サブモ
     ジュールのgitディレクトリをそのスーパープロジェクトの
     ‘$GIT_DIR/modules’ パスに移動し、次に、 ‘core.worktree’ を設定して
     、gitディレクトリとその作業ディレクトリを接続し、そして、スーパープ
     ロジェクトのgitディレクトリに埋め込んだサブモジュールのgitディレク
     トリを指す .git ファイルを追加します。

     独立して複製され、後でサブモジュールまたは古いセットアップとして追
     加されたリポジトリでは、スーパープロジェクトのgitディレクトリに埋め
     込まれるのではなく、サブモジュール内にサブモジュールのgitディレクト
     リがあります。

     このコマンドはデフォルトで再帰的に実行されます。


OPTIONS
*******

‘-q’
‘--quiet’
     エラーメッセージのみを出力します。

‘--progress’
     このオプションは、addおよびupdateコマンドにのみ有効です。 ‘-q’ が指
     定されていない限り、進行状況は、端末に接続されている場合、デフォル
     トで標準エラーストリームに報告されます。このフラグは、標準エラース
     トリームが端末に送信されていない場合でも、進行状況を強制します。

‘--all’
     このオプションは、deinitコマンドに対してのみ有効です。 作業ツリーの
     すべてのサブモジュールの登録を解除します。

‘-b <branch>’
‘--branch <branch>’
     サブモジュールとして追加するリポジトリのブランチ。ブランチの名前は
     、‘update --remote’ の ‘.gitmodules’ に ‘submodule.<name>.branch’ と
     して記録されます。 特別な値 ‘.’ は、サブモジュール内のブランチの名
     前が現在のリポジトリ内の現在のブランチと同じ名前でなければならない
     ことを示すために使用されます。オプションが指定されていない場合、デ
     フォルトでリモートの「HEAD」になります。

‘-f’
‘--force’
     このオプションは、addとdeinitとupdateコマンドにのみ有効です。addを
     実行するときは、無視されるサブモジュールパスの追加を許可します。
     deinitを実行するときは、ローカルの変更が含まれている場合でも、サブ
     モジュールの作業ツリーが削除されます。 updateを実行するときは
     (checkout手順でのみ有効)、別のコミットに切り替えるときにサブモジュ
     ールのローカル変更を破棄し、そして、含まれているリポジトリのインデ
     ックスにリストされているコミットがサブモジュールでチェックアウトさ
     れたコミットと一致する場合でも、常にサブモジュールでチェックアウト
     操作を実行します。

‘--cached’
     このオプションは、statusコマンドとsummaryコマンドにのみ有効です。こ
     れらのコマンドは通常、サブモジュールHEADにあるコミットを使用します
     が、このオプションを使用すると、代わりにインデックスに格納されてい
     るコミットが使用されます。

‘--files’
     このオプションは、summaryコマンドにのみ有効です。 このコマンドを使
     用すると、インデックス内のコミットと、サブモジュールHEAD内のコミッ
     トが比較されます。

‘-n’
‘--summary-limit’
     このオプションは、summaryコマンドにのみ有効です。 サマリーサイズ(合
     計で表示されるコミットの数)を制限します。 0を指定すると、要約が無効
     になります。 負の数は無制限(デフォルト)を意味します。この制限は、変
     更されたサブモジュールにのみ適用されます。 追加/削除/タイプ変更され
     た サブモジュールのサイズは常に1に制限されます。

‘--remote’
     このオプションは、updateコマンドに対してのみ有効です。 スーパープロ
     ジェクトの記録されたSHA-1を使用してサブモジュールを更新する代わりに
     、サブモジュールのリモート追跡ブランチのステータスを使用します。 使
     用されるリモートはブランチのリモート(‘branch.<name>.remote’)で、デ
     フォルトは ‘origin’ です。 使用されるリモートブランチのデフォルトは
     リモートの ‘HEAD’ ですが、ブランチ名は、 ‘.git / config’ または
     ‘.gitmodules’ のいずれかで ‘submodule.<name>.branch’ オプションを設
     定することでオーバーライドできます(‘.git / config’ が優先されます
     )。

     これは、サポートされている更新手順(‘--checkout’ 、‘--rebase’ など
     )のいずれでも機能します。唯一の変更は、ターゲットSHA-1のソースです
     。 たとえば、 ‘submodule update --remote --merge’ はアップストリー
     ムのサブモジュールの変更をサブモジュールにマージし、 ‘submodule
     update --merge’ はスーパープロジェクトのgitlinkの変更をサブモジュー
     ルにマージします。

     現在の追跡ブランチの状態を確認するために、 ‘update --remote’ は
     SHA-1を計算する前にサブモジュールのリモートリポジトリをフェッチしま
     す。フェッチしたくない場合は、 ‘submodule update --remote
     --no-fetch’ を使用する必要があります。

     このオプションを使用して、アップストリームサブプロジェクトからの変
     更をサブモジュールの現在のHEADと統合します。または、サブモジュール
     から ‘git pull’ を実行することもできます。これは、リモートブランチ
     名を除いて同等です。‘update --remote’ はデフォルトのアップストリー
     ムリポジトリと ‘submodule.<name>.branch’ を使用し、 ‘git pull’ はサ
     ブモジュールの ‘branch.<name>.merge’ を使用します。スーパープロジェ
     クトでデフォルトのアップストリームブランチを配布する場合は
     ‘submodule.<name>.branch’ を、サブモジュール自体で作業しているとき
     によりネイティブな感じが必要な場合は ‘branch.<name>.merge’ を使用し
     てください。

‘-N’
‘--no-fetch’
     このオプションは、updateコマンドに対してのみ有効です。リモートサイ
     トから新しいオブジェクトをフェッチしません。

‘--checkout’
     このオプションは、updateコマンドに対してのみ有効です。サブモジュー
     ルの切り離されたHEAD(detached HEAD)のスーパープロジェクトに記録され
     たコミットをチェックアウトします。これはデフォルトの動作です。この
     オプションの主な用途は、 ‘checkout’ 以外の値に設定されたときに
     ‘submodule.$name.update’ をオーバーライドすることです。 キー
     ‘submodule.$name.update’ が明示的に設定されていないか、 ‘checkout’
     に設定されている場合、このオプションが暗黙に指定されています。

‘--merge’
     このオプションは、updateコマンドに対してのみ有効です。 スーパープロ
     ジェクトに記録されたコミットをサブモジュールの現在のブランチにマー
     ジします。 このオプションを指定すると、サブモジュールのHEADは切り離
     されません。 マージの失敗によりこの処理が妨げられる場合は、通常の競
     合解決ツールを使用して、サブモジュール内で発生する競合を解決する必
     要があります。 キー ‘submodule.$name.update’ が ‘merge’ に設定され
     ている場合、このオプションが暗黙に指定されます。

‘--rebase’
     このオプションは、updateコマンドに対してのみ有効です。 現在のブラン
     チをスーパープロジェクトに記録されたコミットにリベースします。 この
     オプションを指定すると、サブモジュールのHEADは切り離されません。 マ
     ージの失敗によりこのプロセスが妨げられる場合は、 git-rebase(1) を使
     用してこれらの失敗を解決する必要があります。 キー
     ‘submodule.$name.update’ が ‘rebase’ に設定されている場合、このオプ
     ションが暗黙に指定されます。

‘--init’
     このオプションは、updateコマンドに対してのみ有効です。更新する前に
     、これまで ‘git submodule init’ が呼び出されていないすべてのサブモ
     ジュールを初期化します。

‘--name’
     このオプションは、addコマンドに対してのみ有効です。 サブモジュール
     の名前を、デフォルトのパスではなく、指定の文字列に設定します。 名前
     はディレクトリ名として有効である必要があり、 ‘/’ で終わらせることは
     できません。

‘--reference <repository>’
     このオプションは、addとupdateコマンドにのみ有効です。これらのコマン
     ドでは、リモートリポジトリのクローンを作成する必要がある場合があり
     ます。その場合、このオプションを git-clone(1) コマンドに渡します。

     *注意*: git-clone(1) の ‘--reference’ と ‘--shared’ と
     ‘--dissociate’ オプションに関するNOTEを注意深く読んでいない限り、 こ
     のオプションを使用しないでください。

‘--dissociate’
     このオプションは、addとupdateコマンドにのみ有効です。これらのコマン
     ドでは、リモートリポジトリのクローンを作成する必要がある場合があり
     ます。その場合、このオプションを git-clone(1) コマンドに渡します。

     *注意*: ‘--reference’ オプションについては NOTE を参照してください
     。

‘--recursive’
     このオプションは、foreachとupdateとstatusとsyncコマンドにのみ有効で
     す。サブモジュールを再帰的にトラバースします。この操作は、現在のリ
     ポジトリのサブモジュールだけでなく、それらのサブモジュール内のネス
     トされたサブモジュール(など)でも実行されます。

‘--depth’
     このオプションは、addとupdateコマンドに有効です。 指定のリビジョン
     数に切り捨てられた履歴を持つ「浅い」クローン(shallow clone)を作成し
     ます。 git-clone(1) を参照してください。

‘--[no-]recommend-shallow’
     このオプションは、updateコマンドに対してのみ有効です。サブモジュー
     ルの初期クローンは、デフォルトで ‘.gitmodules’ ファイルによって提供
     される推奨される ‘submodule.<name>.shallow’ を使用します。 提案を無
     視するには、‘--no-recommend-shallow’ を使用します。

‘-j <n>’
‘--jobs <n>’
     このオプションは、updateコマンドに対してのみ有効です。多くのジョブ
     と並行して新しいサブモジュールのクローンを作成します。デフォルトは
     ‘submodule.fetchJobs’ オプションです。

‘--[no-]single-branch’
     このオプションは、updateコマンドに対してのみ有効です。 HEAD または
     、 ‘--branch’ で指定されたブランチは、更新中に1つのブランチのみを複
     製します

<path>…
     サブモジュールへのパス。これを指定すると、指定したパスで見つかった
     サブモジュールでのみ動作するようにコマンドが制限されます。(この引数
     はaddでは必須です)。


FILES
*****

サブモジュールを初期化するとき、含まれているリポジトリの最上位ディレクト
リにある ‘.gitmodules’ ファイルを使用して、各サブモジュールのURLを検索し
ます。 このファイルは、 ‘$GIT_DIR/config’ と同じ方法でフォーマットする必
要があります。各サブモジュールURLのキーは、「submodule.$name.url」です。
詳細については、 gitmodules(5) を参照してください。


SEE ALSO
********

gitsubmodules(7), gitmodules(5).


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-svn,  Up: Top

Name
****

git-svn — Bidirectional operation between a Subversion repository and
Git


Synopsis
********

     git svn <command> [<options>] [<arguments>]


DESCRIPTION
***********

_git svn_ is a simple conduit for changesets between Subversion and Git.
It provides a bidirectional flow of changes between a Subversion and a
Git repository.

   _git svn_ can track a standard Subversion repository, following the
common "trunk/branches/tags" layout, with the –stdlayout option.  It can
also follow branches and tags in any layout with the -T/-t/-b options
(see options to _init_ below, and also the _clone_ command).

   Once tracking a Subversion repository (with any of the above
methods), the Git repository can be updated from Subversion by the
_fetch_ command and Subversion updated from Git by the _dcommit_
command.


COMMANDS
********

_init_
     Initializes an empty Git repository with additional metadata
     directories for _git svn_.  The Subversion URL may be specified as
     a command-line argument, or as full URL arguments to -T/-t/-b.
     Optionally, the target directory to operate on can be specified as
     a second argument.  Normally this command initializes the current
     directory.

     -T<trunk_subdir>
     –trunk=<trunk_subdir>
     -t<tags_subdir>
     –tags=<tags_subdir>
     -b<branches_subdir>
     –branches=<branches_subdir>
     -s
     –stdlayout
          These are optional command-line options for init.  Each of
          these flags can point to a relative repository path
          (–tags=project/tags) or a full url
          (–tags=https://foo.org/project/tags).  You can specify more
          than one –tags and/or –branches options, in case your
          Subversion repository places tags or branches under multiple
          paths.  The option –stdlayout is a shorthand way of setting
          trunk,tags,branches as the relative paths, which is the
          Subversion default.  If any of the other options are given as
          well, they take precedence.

     –no-metadata
          Set the _noMetadata_ option in the [svn-remote] config.  This
          option is not recommended, please read the _svn.noMetadata_
          section of this manpage before using this option.

     –use-svm-props
          Set the _useSvmProps_ option in the [svn-remote] config.

     –use-svnsync-props
          Set the _useSvnsyncProps_ option in the [svn-remote] config.

     –rewrite-root=<URL>
          Set the _rewriteRoot_ option in the [svn-remote] config.

     –rewrite-uuid=<UUID>
          Set the _rewriteUUID_ option in the [svn-remote] config.

     –username=<user>
          For transports that SVN handles authentication for (http,
          https, and plain svn), specify the username.  For other
          transports (e.g.  ‘svn+ssh://’), you must include the username
          in the URL, e.g.  ‘svn+ssh://foo@svn.bar.com/project’

     –prefix=<prefix>
          This allows one to specify a prefix which is prepended to the
          names of remotes if trunk/branches/tags are specified.  The
          prefix does not automatically include a trailing slash, so be
          sure you include one in the argument if that is what you want.
          If –branches/-b is specified, the prefix must include a
          trailing slash.  Setting a prefix (with a trailing slash) is
          strongly encouraged in any case, as your SVN-tracking refs
          will then be located at "refs/remotes/$prefix/*", which is
          compatible with Git’s own remote-tracking ref layout
          (refs/remotes/$remote/*).  Setting a prefix is also useful if
          you wish to track multiple projects that share a common
          repository.  By default, the prefix is set to _origin/_.

               *Note*

               Before Git v2.0, the default prefix was "" (no prefix).
               This meant that SVN-tracking refs were put at
               "refs/remotes/*", which is incompatible with how Git’s
               own remote-tracking refs are organized.  If you still
               want the old default, you can get it by passing ‘--prefix
               ""’ on the command line (‘--prefix=""’ may not work if
               your Perl’s Getopt::Long is < v2.37).

     –ignore-refs=<regex>
          When passed to _init_ or _clone_ this regular expression will
          be preserved as a config key.  See _fetch_ for a description
          of ‘--ignore-refs’.

     –ignore-paths=<regex>
          When passed to _init_ or _clone_ this regular expression will
          be preserved as a config key.  See _fetch_ for a description
          of ‘--ignore-paths’.

     –include-paths=<regex>
          When passed to _init_ or _clone_ this regular expression will
          be preserved as a config key.  See _fetch_ for a description
          of ‘--include-paths’.

     –no-minimize-url
          When tracking multiple directories (using –stdlayout,
          –branches, or –tags options), git svn will attempt to connect
          to the root (or highest allowed level) of the Subversion
          repository.  This default allows better tracking of history if
          entire projects are moved within a repository, but may cause
          issues on repositories where read access restrictions are in
          place.  Passing ‘--no-minimize-url’ will allow git svn to
          accept URLs as-is without attempting to connect to a higher
          level directory.  This option is off by default when only one
          URL/branch is tracked (it would do little good).

_fetch_
     Fetch unfetched revisions from the Subversion remote we are
     tracking.  The name of the [svn-remote "…"] section in the
     $GIT_DIR/config file may be specified as an optional command-line
     argument.

     This automatically updates the rev_map if needed (see
     _$GIT_DIR/svn/**/.rev_map.*_ in the FILES section below for
     details).

     –localtime
          Store Git commit times in the local time zone instead of UTC.
          This makes _git log_ (even without –date=local) show the same
          times that ‘svn log’ would in the local time zone.

          This doesn’t interfere with interoperating with the Subversion
          repository you cloned from, but if you wish for your local Git
          repository to be able to interoperate with someone else’s
          local Git repository, either don’t use this option or you
          should both use it in the same local time zone.

     –parent
          Fetch only from the SVN parent of the current HEAD.

     –ignore-refs=<regex>
          Ignore refs for branches or tags matching the Perl regular
          expression.  A "negative look-ahead assertion" like
          ‘^refs/remotes/origin/(?!tags/wanted-tag|wanted-branch).*$’
          can be used to allow only certain refs.

               config key: svn-remote.<name>.ignore-refs

          If the ignore-refs configuration key is set, and the
          command-line option is also given, both regular expressions
          will be used.

     –ignore-paths=<regex>
          This allows one to specify a Perl regular expression that will
          cause skipping of all matching paths from checkout from SVN.
          The ‘--ignore-paths’ option should match for every _fetch_
          (including automatic fetches due to _clone_, _dcommit_,
          _rebase_, etc) on a given repository.

               config key: svn-remote.<name>.ignore-paths

          If the ignore-paths configuration key is set, and the
          command-line option is also given, both regular expressions
          will be used.

          Examples:

          Skip "doc*" directory for every fetch
                    --ignore-paths="^doc"

          Skip "branches" and "tags" of first level directories
                    --ignore-paths="^[^/]+/(?:branches|tags)"

     –include-paths=<regex>
          This allows one to specify a Perl regular expression that will
          cause the inclusion of only matching paths from checkout from
          SVN. The ‘--include-paths’ option should match for every
          _fetch_ (including automatic fetches due to _clone_,
          _dcommit_, _rebase_, etc) on a given repository.
          ‘--ignore-paths’ takes precedence over ‘--include-paths’.

               config key: svn-remote.<name>.include-paths

     –log-window-size=<n>
          Fetch <n> log entries per request when scanning Subversion
          history.  The default is 100.  For very large Subversion
          repositories, larger values may be needed for _clone_/_fetch_
          to complete in reasonable time.  But overly large values may
          lead to higher memory usage and request timeouts.

_clone_
     Runs _init_ and _fetch_.  It will automatically create a directory
     based on the basename of the URL passed to it; or if a second
     argument is passed; it will create a directory and work within
     that.  It accepts all arguments that the _init_ and _fetch_
     commands accept; with the exception of ‘--fetch-all’ and
     ‘--parent’.  After a repository is cloned, the _fetch_ command will
     be able to update revisions without affecting the working tree; and
     the _rebase_ command will be able to update the working tree with
     the latest changes.

     –preserve-empty-dirs
          Create a placeholder file in the local Git repository for each
          empty directory fetched from Subversion.  This includes
          directories that become empty by removing all entries in the
          Subversion repository (but not the directory itself).  The
          placeholder files are also tracked and removed when no longer
          necessary.

     –placeholder-filename=<filename>
          Set the name of placeholder files created by
          –preserve-empty-dirs.  Default: ".gitignore"

_rebase_
     This fetches revisions from the SVN parent of the current HEAD and
     rebases the current (uncommitted to SVN) work against it.

     This works similarly to ‘svn update’ or _git pull_ except that it
     preserves linear history with _git rebase_ instead of _git merge_
     for ease of dcommitting with _git svn_.

     This accepts all options that _git svn fetch_ and _git rebase_
     accept.  However, ‘--fetch-all’ only fetches from the current
     [svn-remote], and not all [svn-remote] definitions.

     Like _git rebase_; this requires that the working tree be clean and
     have no uncommitted changes.

     This automatically updates the rev_map if needed (see
     _$GIT_DIR/svn/**/.rev_map.*_ in the FILES section below for
     details).

     -l
     –local
          Do not fetch remotely; only run _git rebase_ against the last
          fetched commit from the upstream SVN.

_dcommit_
     Commit each diff from the current branch directly to the SVN
     repository, and then rebase or reset (depending on whether or not
     there is a diff between SVN and head).  This will create a revision
     in SVN for each commit in Git.

     When an optional Git branch name (or a Git commit object name) is
     specified as an argument, the subcommand works on the specified
     branch, not on the current branch.

     Use of _dcommit_ is preferred to _set-tree_ (below).

     –no-rebase
          After committing, do not rebase or reset.

     –commit-url <URL>
          Commit to this SVN URL (the full path).  This is intended to
          allow existing _git svn_ repositories created with one
          transport method (e.g.  ‘svn://’ or ‘http://’ for anonymous
          read) to be reused if a user is later given access to an
          alternate transport method (e.g.  ‘svn+ssh://’ or ‘https://’)
          for commit.

               config key: svn-remote.<name>.commiturl
               config key: svn.commiturl (overwrites all svn-remote.<name>.commiturl options)

          Note that the SVN URL of the commiturl config key includes the
          SVN branch.  If you rather want to set the commit URL for an
          entire SVN repository use svn-remote.<name>.pushurl instead.

          Using this option for any other purpose (don’t ask) is very
          strongly discouraged.

     –mergeinfo=<mergeinfo>
          Add the given merge information during the dcommit (e.g.
          ‘--mergeinfo="/branches/foo:1-10"’).  All svn server versions
          can store this information (as a property), and svn clients
          starting from version 1.5 can make use of it.  To specify
          merge information from multiple branches, use a single space
          character between the branches
          (‘--mergeinfo="/branches/foo:1-10 /branches/bar:3,5-6,8"’)

               config key: svn.pushmergeinfo

          This option will cause git-svn to attempt to automatically
          populate the svn:mergeinfo property in the SVN repository when
          possible.  Currently, this can only be done when dcommitting
          non-fast-forward merges where all parents but the first have
          already been pushed into SVN.

     –interactive
          Ask the user to confirm that a patch set should actually be
          sent to SVN. For each patch, one may answer "yes" (accept this
          patch), "no" (discard this patch), "all" (accept all patches),
          or "quit".

          _git svn dcommit_ returns immediately if answer is "no" or
          "quit", without committing anything to SVN.

_branch_
     Create a branch in the SVN repository.

     -m
     –message
          Allows to specify the commit message.

     -t
     –tag
          Create a tag by using the tags_subdir instead of the
          branches_subdir specified during git svn init.

     -d<path>
     –destination=<path>
          If more than one –branches (or –tags) option was given to the
          _init_ or _clone_ command, you must provide the location of
          the branch (or tag) you wish to create in the SVN repository.
          <path> specifies which path to use to create the branch or tag
          and should match the pattern on the left-hand side of one of
          the configured branches or tags refspecs.  You can see these
          refspecs with the commands

               git config --get-all svn-remote.<name>.branches git config --get-all
               svn-remote.<name>.tags

          where <name> is the name of the SVN repository as specified by
          the -R option to _init_ (or "svn" by default).

     –username
          Specify the SVN username to perform the commit as.  This
          option overrides the _username_ configuration property.

     –commit-url
          Use the specified URL to connect to the destination Subversion
          repository.  This is useful in cases where the source SVN
          repository is read-only.  This option overrides configuration
          property _commiturl_.

               git config --get-all svn-remote.<name>.commiturl

     –parents
          Create parent folders.  This parameter is equivalent to the
          parameter –parents on svn cp commands and is useful for
          non-standard repository layouts.

_tag_
     Create a tag in the SVN repository.  This is a shorthand for
     _branch -t_.

_log_
     This should make it easy to look up svn log messages when svn users
     refer to -r/–revision numbers.

     The following features from ‘svn log’ are supported:

     -r <n>[:<n>]
     –revision=<n>[:<n>]
          is supported, non-numeric args are not: HEAD, NEXT, BASE,
          PREV, etc …

     -v
     –verbose
          it’s not completely compatible with the –verbose output in svn
          log, but reasonably close.

     –limit=<n>
          is NOT the same as –max-count, doesn’t count merged/excluded
          commits

     –incremental
          supported

     New features:

     –show-commit
          shows the Git commit sha1, as well

     –oneline
          our version of –pretty=oneline

          *Note*

          SVN itself only stores times in UTC and nothing else.  The
          regular svn client converts the UTC time to the local time (or
          based on the TZ= environment).  This command has the same
          behaviour.

     Any other arguments are passed directly to _git log_

_blame_
     Show what revision and author last modified each line of a file.
     The output of this mode is format-compatible with the output of
     ‘svn blame’ by default.  Like the SVN blame command, local
     uncommitted changes in the working tree are ignored; the version of
     the file in the HEAD revision is annotated.  Unknown arguments are
     passed directly to _git blame_.

     –git-format
          Produce output in the same format as _git blame_, but with SVN
          revision numbers instead of Git commit hashes.  In this mode,
          changes that haven’t been committed to SVN (including local
          working-copy edits) are shown as revision 0.

_find-rev_
     When given an SVN revision number of the form _rN_, returns the
     corresponding Git commit hash (this can optionally be followed by a
     tree-ish to specify which branch should be searched).  When given a
     tree-ish, returns the corresponding SVN revision number.

     -B
     –before
          Don’t require an exact match if given an SVN revision, instead
          find the commit corresponding to the state of the SVN
          repository (on the current branch) at the specified revision.

     -A
     –after
          Don’t require an exact match if given an SVN revision; if
          there is not an exact match return the closest match searching
          forward in the history.

_set-tree_
     You should consider using _dcommit_ instead of this command.
     Commit specified commit or tree objects to SVN. This relies on your
     imported fetch data being up to date.  This makes absolutely no
     attempts to do patching when committing to SVN, it simply
     overwrites files with those specified in the tree or commit.  All
     merging is assumed to have taken place independently of _git svn_
     functions.

_create-ignore_
     Recursively finds the svn:ignore property on directories and
     creates matching .gitignore files.  The resulting files are staged
     to be committed, but are not committed.  Use -r/–revision to refer
     to a specific revision.

_show-ignore_
     Recursively finds and lists the svn:ignore property on directories.
     The output is suitable for appending to the $GIT_DIR/info/exclude
     file.

_mkdirs_
     Attempts to recreate empty directories that core Git cannot track
     based on information in $GIT_DIR/svn/<refname>/unhandled.log files.
     Empty directories are automatically recreated when using "git svn
     clone" and "git svn rebase", so "mkdirs" is intended for use after
     commands like "git checkout" or "git reset".  (See the
     svn-remote.<name>.automkdirs config file option for more
     information.)

_commit-diff_
     Commits the diff of two tree-ish arguments from the command-line.
     This command does not rely on being inside a ‘git svn init’-ed
     repository.  This command takes three arguments, (a) the original
     tree to diff against, (b) the new tree result, (c) the URL of the
     target Subversion repository.  The final argument (URL) may be
     omitted if you are working from a _git svn_-aware repository (that
     has been ‘init’-ed with _git svn_).  The -r<revision> option is
     required for this.

     The commit message is supplied either directly with the ‘-m’ or
     ‘-F’ option, or indirectly from the tag or commit when the second
     tree-ish denotes such an object, or it is requested by invoking an
     editor (see ‘--edit’ option below).

     -m <msg>
     –message=<msg>
          Use the given ‘msg’ as the commit message.  This option
          disables the ‘--edit’ option.

     -F <filename>
     –file=<filename>
          Take the commit message from the given file.  This option
          disables the ‘--edit’ option.

_info_
     Shows information about a file or directory similar to what ‘svn
     info’ provides.  Does not currently support a -r/–revision
     argument.  Use the –url option to output only the value of the
     _URL:_ field.

_proplist_
     Lists the properties stored in the Subversion repository about a
     given file or directory.  Use -r/–revision to refer to a specific
     Subversion revision.

_propget_
     Gets the Subversion property given as the first argument, for a
     file.  A specific revision can be specified with -r/–revision.

_propset_
     Sets the Subversion property given as the first argument, to the
     value given as the second argument for the file given as the third
     argument.

     Example:

          git svn propset svn:keywords "FreeBSD=%H" devel/py-tipper/Makefile

     This will set the property _svn:keywords_ to _FreeBSD=%H_ for the
     file _devel/py-tipper/Makefile_.

_show-externals_
     Shows the Subversion externals.  Use -r/–revision to specify a
     specific revision.

_gc_
     Compress $GIT_DIR/svn/<refname>/unhandled.log files and remove
     $GIT_DIR/svn/<refname>/index files.

_reset_
     Undoes the effects of _fetch_ back to the specified revision.  This
     allows you to re-_fetch_ an SVN revision.  Normally the contents of
     an SVN revision should never change and _reset_ should not be
     necessary.  However, if SVN permissions change, or if you alter
     your –ignore-paths option, a _fetch_ may fail with "not found in
     commit" (file not previously visible) or "checksum mismatch"
     (missed a modification).  If the problem file cannot be ignored
     forever (with –ignore-paths) the only way to repair the repo is to
     use _reset_.

     Only the rev_map and refs/remotes/git-svn are changed (see
     _$GIT_DIR/svn/**/.rev_map.*_ in the FILES section below for
     details).  Follow _reset_ with a _fetch_ and then _git reset_ or
     _git rebase_ to move local branches onto the new tree.

     -r <n>
     –revision=<n>
          Specify the most recent revision to keep.  All later revisions
          are discarded.

     -p
     –parent
          Discard the specified revision as well, keeping the nearest
          parent instead.

     Example:
          Assume you have local changes in "master", but you need to
          refetch "r2".

                   r1---r2---r3 remotes/git-svn
                               \
                                A---B master

          Fix the ignore-paths or SVN permissions problem that caused
          "r2" to be incomplete in the first place.  Then:

               git svn reset -r2 -p
               git svn fetch

                   r1---r2'--r3' remotes/git-svn
                     \
                      r2---r3---A---B master

          Then fixup "master" with _git rebase_.  Do NOT use _git merge_
          or your history will not be compatible with a future
          _dcommit_!

               git rebase –onto remotes/git-svn A^ master

                   r1---r2'--r3' remotes/git-svn
                               \
                                A'--B' master


OPTIONS
*******

‘--shared[=(false|true|umask|group|all|world|everybody)]’
‘--template=<template_directory>’
     Only used with the _init_ command.  These are passed directly to
     _git init_.

‘-r <arg>’
‘--revision <arg>’
     Used with the _fetch_ command.

     This allows revision ranges for partial/cauterized history to be
     supported.  $NUMBER, $NUMBER1:$NUMBER2 (numeric ranges),
     $NUMBER:HEAD, and BASE:$NUMBER are all supported.

     This can allow you to make partial mirrors when running fetch; but
     is generally not recommended because history will be skipped and
     lost.

-
‘--stdin’
     Only used with the _set-tree_ command.

     Read a list of commits from stdin and commit them in reverse order.
     Only the leading sha1 is read from each line, so _git rev-list
     –pretty=oneline_ output can be used.

‘--rmdir’
     Only used with the _dcommit_, _set-tree_ and _commit-diff_
     commands.

     Remove directories from the SVN tree if there are no files left
     behind.  SVN can version empty directories, and they are not
     removed by default if there are no files left in them.  Git cannot
     version empty directories.  Enabling this flag will make the commit
     to SVN act like Git.

          config key: svn.rmdir

‘-e’
‘--edit’
     Only used with the _dcommit_, _set-tree_ and _commit-diff_
     commands.

     Edit the commit message before committing to SVN. This is off by
     default for objects that are commits, and forced on when committing
     tree objects.

          config key: svn.edit

‘-l<num>’
‘--find-copies-harder’
     Only used with the _dcommit_, _set-tree_ and _commit-diff_
     commands.

     They are both passed directly to _git diff-tree_; see
     git-diff-tree(1) for more information.

          config key: svn.l
          config key: svn.findcopiesharder

‘-A<filename>’
‘--authors-file=<filename>’
     Syntax is compatible with the file used by _git cvsimport_ but an
     empty email address can be supplied with _<>_:

                  loginname = Joe User <user@example.com>

     If this option is specified and _git svn_ encounters an SVN
     committer name that does not exist in the authors-file, _git svn_
     will abort operation.  The user will then have to add the
     appropriate entry.  Re-running the previous _git svn_ command after
     the authors-file is modified should continue operation.

          config key: svn.authorsfile

‘--authors-prog=<filename>’
     If this option is specified, for each SVN committer name that does
     not exist in the authors file, the given file is executed with the
     committer name as the first argument.  The program is expected to
     return a single line of the form "Name <email>" or "Name <>", which
     will be treated as if included in the authors file.

     Due to historical reasons a relative _filename_ is first searched
     relative to the current directory for _init_ and _clone_ and
     relative to the root of the working tree for _fetch_.  If
     _filename_ is not found, it is searched like any other command in
     _$PATH_.

          config key: svn.authorsProg

‘-q’
‘--quiet’
     Make _git svn_ less verbose.  Specify a second time to make it even
     less verbose.

‘-m’
‘--merge’
‘-s<strategy>’
‘--strategy=<strategy>’
‘-p’
‘--rebase-merges’
‘--preserve-merges (DEPRECATED)’
     These are only used with the _dcommit_ and _rebase_ commands.

     Passed directly to _git rebase_ when using _dcommit_ if a _git
     reset_ cannot be used (see _dcommit_).

‘-n’
‘--dry-run’
     This can be used with the _dcommit_, _rebase_, _branch_ and _tag_
     commands.

     For _dcommit_, print out the series of Git arguments that would
     show which diffs would be committed to SVN.

     For _rebase_, display the local branch associated with the upstream
     svn repository associated with the current branch and the URL of
     svn repository that will be fetched from.

     For _branch_ and _tag_, display the urls that will be used for
     copying when creating the branch or tag.

‘--use-log-author’
     When retrieving svn commits into Git (as part of _fetch_, _rebase_,
     or _dcommit_ operations), look for the first ‘From:’ line or
     ‘Signed-off-by’ trailer in the log message and use that as the
     author string.

          config key: svn.useLogAuthor

‘--add-author-from’
     When committing to svn from Git (as part of _set-tree_ or _dcommit_
     operations), if the existing log message doesn’t already have a
     ‘From:’ or ‘Signed-off-by’ trailer, append a ‘From:’ line based on
     the Git commit’s author string.  If you use this, then
     ‘--use-log-author’ will retrieve a valid author string for all
     commits.

          config key: svn.addAuthorFrom


ADVANCED OPTIONS
****************

‘-i<GIT_SVN_ID>’
‘--id <GIT_SVN_ID>’
     This sets GIT_SVN_ID (instead of using the environment).  This
     allows the user to override the default refname to fetch from when
     tracking a single URL. The _log_ and _dcommit_ commands no longer
     require this switch as an argument.

‘-R<remote name>’
‘--svn-remote <remote name>’
     Specify the [svn-remote "<remote name>"] section to use, this
     allows SVN multiple repositories to be tracked.  Default: "svn"

‘--follow-parent’
     This option is only relevant if we are tracking branches (using one
     of the repository layout options –trunk, –tags, –branches,
     –stdlayout).  For each tracked branch, try to find out where its
     revision was copied from, and set a suitable parent in the first
     Git commit for the branch.  This is especially helpful when we’re
     tracking a directory that has been moved around within the
     repository.  If this feature is disabled, the branches created by
     _git svn_ will all be linear and not share any history, meaning
     that there will be no information on where branches were branched
     off or merged.  However, following long/convoluted histories can
     take a long time, so disabling this feature may speed up the
     cloning process.  This feature is enabled by default, use
     –no-follow-parent to disable it.

          config key: svn.followparent


CONFIG FILE-ONLY OPTIONS
************************

svn.noMetadata
svn-remote.<name>.noMetadata
     This gets rid of the _git-svn-id:_ lines at the end of every
     commit.

     This option can only be used for one-shot imports as _git svn_ will
     not be able to fetch again without metadata.  Additionally, if you
     lose your _$GIT_DIR/svn/**/.rev_map.*_ files, _git svn_ will not be
     able to rebuild them.

     The _git svn log_ command will not work on repositories using this,
     either.  Using this conflicts with the _useSvmProps_ option for
     (hopefully) obvious reasons.

     This option is NOT recommended as it makes it difficult to track
     down old references to SVN revision numbers in existing
     documentation, bug reports, and archives.  If you plan to
     eventually migrate from SVN to Git and are certain about dropping
     SVN history, consider git-filter-repo
     (https://github.com/newren/git-filter-repo) instead.  filter-repo
     also allows reformatting of metadata for ease-of-reading and
     rewriting authorship info for non-"svn.authorsFile" users.

svn.useSvmProps
svn-remote.<name>.useSvmProps
     This allows _git svn_ to re-map repository URLs and UUIDs from
     mirrors created using SVN::Mirror (or svk) for metadata.

     If an SVN revision has a property, "svm:headrev", it is likely that
     the revision was created by SVN::Mirror (also used by SVK). The
     property contains a repository UUID and a revision.  We want to
     make it look like we are mirroring the original URL, so introduce a
     helper function that returns the original identity URL and UUID,
     and use it when generating metadata in commit messages.

svn.useSvnsyncProps
svn-remote.<name>.useSvnsyncprops
     Similar to the useSvmProps option; this is for users of the
     svnsync(1) command distributed with SVN 1.4.x and later.

svn-remote.<name>.rewriteRoot
     This allows users to create repositories from alternate URLs.  For
     example, an administrator could run _git svn_ on the server locally
     (accessing via file://) but wish to distribute the repository with
     a public http:// or svn:// URL in the metadata so users of it will
     see the public URL.

svn-remote.<name>.rewriteUUID
     Similar to the useSvmProps option; this is for users who need to
     remap the UUID manually.  This may be useful in situations where
     the original UUID is not available via either useSvmProps or
     useSvnsyncProps.

svn-remote.<name>.pushurl
     Similar to Git’s ‘remote.<name>.pushurl’, this key is designed to
     be used in cases where _url_ points to an SVN repository via a
     read-only transport, to provide an alternate read/write transport.
     It is assumed that both keys point to the same repository.  Unlike
     _commiturl_, _pushurl_ is a base path.  If either _commiturl_ or
     _pushurl_ could be used, _commiturl_ takes precedence.

svn.brokenSymlinkWorkaround
     This disables potentially expensive checks to workaround broken
     symlinks checked into SVN by broken clients.  Set this option to
     "false" if you track a SVN repository with many empty blobs that
     are not symlinks.  This option may be changed while _git svn_ is
     running and take effect on the next revision fetched.  If unset,
     _git svn_ assumes this option to be "true".

svn.pathnameencoding
     This instructs git svn to recode pathnames to a given encoding.  It
     can be used by windows users and by those who work in non-utf8
     locales to avoid corrupted file names with non-ASCII characters.
     Valid encodings are the ones supported by Perl’s Encode module.

svn-remote.<name>.automkdirs
     Normally, the "git svn clone" and "git svn rebase" commands attempt
     to recreate empty directories that are in the Subversion
     repository.  If this option is set to "false", then empty
     directories will only be created if the "git svn mkdirs" command is
     run explicitly.  If unset, _git svn_ assumes this option to be
     "true".

   Since the noMetadata, rewriteRoot, rewriteUUID, useSvnsyncProps and
useSvmProps options all affect the metadata generated and used by _git
svn_; they *must* be set in the configuration file before any history is
imported and these settings should never be changed once they are set.

   Additionally, only one of these options can be used per svn-remote
section because they affect the _git-svn-id:_ metadata line, except for
rewriteRoot and rewriteUUID which can be used together.


BASIC EXAMPLES
**************

Tracking and contributing to the trunk of a Subversion-managed project
(ignoring tags and branches):

     # Clone a repo (like git clone):
             git svn clone http://svn.example.com/project/trunk
     # Enter the newly cloned directory:
             cd trunk
     # You should be on master branch, double-check with 'git branch'
             git branch
     # Do some work and commit locally to Git:
             git commit ...
     # Something is committed to SVN, rebase your local changes against the
     # latest changes in SVN:
             git svn rebase
     # Now commit your changes (that were committed previously using Git) to SVN,
     # as well as automatically updating your working HEAD:
             git svn dcommit
     # Append svn:ignore settings to the default Git exclude file:
             git svn show-ignore >> .git/info/exclude

   Tracking and contributing to an entire Subversion-managed project
(complete with a trunk, tags and branches):

     # Clone a repo with standard SVN directory layout (like git clone):
             git svn clone http://svn.example.com/project --stdlayout --prefix svn/
     # Or, if the repo uses a non-standard directory layout:
             git svn clone http://svn.example.com/project -T tr -b branch -t tag --prefix svn/
     # View all branches and tags you have cloned:
             git branch -r
     # Create a new branch in SVN
             git svn branch waldo
     # Reset your master to trunk (or any other branch, replacing 'trunk'
     # with the appropriate name):
             git reset --hard svn/trunk
     # You may only dcommit to one branch/tag/trunk at a time.  The usage
     # of dcommit/rebase/show-ignore should be the same as above.

   The initial _git svn clone_ can be quite time-consuming (especially
for large Subversion repositories).  If multiple people (or one person
with multiple machines) want to use _git svn_ to interact with the same
Subversion repository, you can do the initial _git svn clone_ to a
repository on a server and have each person clone that repository with
_git clone_:

     # Do the initial import on a server
             ssh server "cd /pub && git svn clone http://svn.example.com/project [options...]"
     # Clone locally - make sure the refs/remotes/ space matches the server
             mkdir project
             cd project
             git init
             git remote add origin server:/pub/project
             git config --replace-all remote.origin.fetch '+refs/remotes/*:refs/remotes/*'
             git fetch
     # Prevent fetch/pull from remote Git server in the future,
     # we only want to use git svn for future updates
             git config --remove-section remote.origin
     # Create a local branch from one of the branches just fetched
             git checkout -b master FETCH_HEAD
     # Initialize 'git svn' locally (be sure to use the same URL and
     # --stdlayout/-T/-b/-t/--prefix options as were used on server)
             git svn init http://svn.example.com/project [options...]
     # Pull the latest changes from Subversion
             git svn rebase


REBASE VS. PULL/MERGE
*********************

Prefer to use _git svn rebase_ or _git rebase_, rather than _git pull_
or _git merge_ to synchronize unintegrated commits with a _git svn_
branch.  Doing so will keep the history of unintegrated commits linear
with respect to the upstream SVN repository and allow the use of the
preferred _git svn dcommit_ subcommand to push unintegrated commits back
into SVN.

   Originally, _git svn_ recommended that developers pulled or merged
from the _git svn_ branch.  This was because the author favored ‘git svn
set-tree B’ to commit a single head rather than the ‘git svn set-tree
A..B’ notation to commit multiple commits.  Use of _git pull_ or _git
merge_ with ‘git svn set-tree A..B’ will cause non-linear history to be
flattened when committing into SVN and this can lead to merge commits
unexpectedly reversing previous commits in SVN.


MERGE TRACKING
**************

While _git svn_ can track copy history (including branches and tags) for
repositories adopting a standard layout, it cannot yet represent merge
history that happened inside git back upstream to SVN users.  Therefore
it is advised that users keep history as linear as possible inside Git
to ease compatibility with SVN (see the CAVEATS section below).


HANDLING OF SVN BRANCHES
************************

If _git svn_ is configured to fetch branches (and –follow-branches is in
effect), it sometimes creates multiple Git branches for one SVN branch,
where the additional branches have names of the form _branchname@nnn_
(with nnn an SVN revision number).  These additional branches are
created if _git svn_ cannot find a parent commit for the first commit in
an SVN branch, to connect the branch to the history of the other
branches.

   Normally, the first commit in an SVN branch consists of a copy
operation.  _git svn_ will read this commit to get the SVN revision the
branch was created from.  It will then try to find the Git commit that
corresponds to this SVN revision, and use that as the parent of the
branch.  However, it is possible that there is no suitable Git commit to
serve as parent.  This will happen, among other reasons, if the SVN
branch is a copy of a revision that was not fetched by _git svn_ (e.g.
because it is an old revision that was skipped with ‘--revision’), or if
in SVN a directory was copied that is not tracked by _git svn_ (such as
a branch that is not tracked at all, or a subdirectory of a tracked
branch).  In these cases, _git svn_ will still create a Git branch, but
instead of using an existing Git commit as the parent of the branch, it
will read the SVN history of the directory the branch was copied from
and create appropriate Git commits.  This is indicated by the message
"Initializing parent: <branchname>".

   Additionally, it will create a special branch named
_<branchname>@<SVN-Revision>_, where <SVN-Revision> is the SVN revision
number the branch was copied from.  This branch will point to the newly
created parent commit of the branch.  If in SVN the branch was deleted
and later recreated from a different version, there will be multiple
such branches with an _@_.

   Note that this may mean that multiple Git commits are created for a
single SVN revision.

   An example: in an SVN repository with a standard trunk/tags/branches
layout, a directory trunk/sub is created in r.100.  In r.200, trunk/sub
is branched by copying it to branches/.  _git svn clone -s_ will then
create a branch _sub_.  It will also create new Git commits for r.100
through r.199 and use these as the history of branch _sub_.  Thus there
will be two Git commits for each revision from r.100 to r.199 (one
containing trunk/, one containing trunk/sub/).  Finally, it will create
a branch _sub@200_ pointing to the new parent commit of branch _sub_
(i.e.  the commit for r.200 and trunk/sub/).


CAVEATS
*******

For the sake of simplicity and interoperating with Subversion, it is
recommended that all _git svn_ users clone, fetch and dcommit directly
from the SVN server, and avoid all _git clone_/_pull_/_merge_/_push_
operations between Git repositories and branches.  The recommended
method of exchanging code between Git branches and users is _git
format-patch_ and _git am_, or just ’dcommit’ing to the SVN repository.

   Running _git merge_ or _git pull_ is NOT recommended on a branch you
plan to _dcommit_ from because Subversion users cannot see any merges
you’ve made.  Furthermore, if you merge or pull from a Git branch that
is a mirror of an SVN branch, _dcommit_ may commit to the wrong branch.

   If you do merge, note the following rule: _git svn dcommit_ will
attempt to commit on top of the SVN commit named in

     git log --grep=^git-svn-id: --first-parent -1

   You _must_ therefore ensure that the most recent commit of the branch
you want to dcommit to is the _first_ parent of the merge.  Chaos will
ensue otherwise, especially if the first parent is an older commit on
the same SVN branch.

   _git clone_ does not clone branches under the refs/remotes/ hierarchy
or any _git svn_ metadata, or config.  So repositories created and
managed with using _git svn_ should use _rsync_ for cloning, if cloning
is to be done at all.

   Since _dcommit_ uses rebase internally, any Git branches you _git
push_ to before _dcommit_ on will require forcing an overwrite of the
existing ref on the remote repository.  This is generally considered bad
practice, see the git-push(1) documentation for details.

   Do not use the –amend option of git-commit(1) on a change you’ve
already dcommitted.  It is considered bad practice to –amend commits
you’ve already pushed to a remote repository for other users, and
dcommit with SVN is analogous to that.

   When cloning an SVN repository, if none of the options for describing
the repository layout is used (–trunk, –tags, –branches, –stdlayout),
_git svn clone_ will create a Git repository with completely linear
history, where branches and tags appear as separate directories in the
working copy.  While this is the easiest way to get a copy of a complete
repository, for projects with many branches it will lead to a working
copy many times larger than just the trunk.  Thus for projects using the
standard directory structure (trunk/branches/tags), it is recommended to
clone with option ‘--stdlayout’.  If the project uses a non-standard
structure, and/or if branches and tags are not required, it is easiest
to only clone one directory (typically trunk), without giving any
repository layout options.  If the full history with branches and tags
is required, the options ‘--trunk’ / ‘--branches’ / ‘--tags’ must be
used.

   When using multiple –branches or –tags, _git svn_ does not
automatically handle name collisions (for example, if two branches from
different paths have the same name, or if a branch and a tag have the
same name).  In these cases, use _init_ to set up your Git repository
then, before your first _fetch_, edit the $GIT_DIR/config file so that
the branches and tags are associated with different name spaces.  For
example:

     branches = stable/*:refs/remotes/svn/stable/*
     branches = debug/*:refs/remotes/svn/debug/*


CONFIGURATION
*************

_git svn_ stores [svn-remote] configuration information in the
repository $GIT_DIR/config file.  It is similar the core Git [remote]
sections except _fetch_ keys do not accept glob arguments; but they are
instead handled by the _branches_ and _tags_ keys.  Since some SVN
repositories are oddly configured with multiple projects glob expansions
such those listed below are allowed:

     [svn-remote "project-a"]
             url = http://server.org/svn
             fetch = trunk/project-a:refs/remotes/project-a/trunk
             branches = branches/*/project-a:refs/remotes/project-a/branches/*
             branches = branches/release_*:refs/remotes/project-a/branches/release_*
             branches = branches/re*se:refs/remotes/project-a/branches/*
             tags = tags/*/project-a:refs/remotes/project-a/tags/*

   Keep in mind that the ‘*’ (asterisk) wildcard of the local ref (right
of the ‘:’) *must* be the farthest right path component; however the
remote wildcard may be anywhere as long as it’s an independent path
component (surrounded by ‘/’ or EOL). This type of configuration is not
automatically created by _init_ and should be manually entered with a
text-editor or using _git config_.

   Also note that only one asterisk is allowed per word.  For example:

     branches = branches/re*se:refs/remotes/project-a/branches/*

   will match branches _release_, _rese_, _re123se_, however

     branches = branches/re*s*e:refs/remotes/project-a/branches/*

   will produce an error.

   It is also possible to fetch a subset of branches or tags by using a
comma-separated list of names within braces.  For example:

     [svn-remote "huge-project"]
             url = http://server.org/svn
             fetch = trunk/src:refs/remotes/trunk
             branches = branches/{red,green}/src:refs/remotes/project-a/branches/*
             tags = tags/{1.0,2.0}/src:refs/remotes/project-a/tags/*

   Multiple fetch, branches, and tags keys are supported:

     [svn-remote "messy-repo"]
             url = http://server.org/svn
             fetch = trunk/project-a:refs/remotes/project-a/trunk
             fetch = branches/demos/june-project-a-demo:refs/remotes/project-a/demos/june-demo
             branches = branches/server/*:refs/remotes/project-a/branches/*
             branches = branches/demos/2011/*:refs/remotes/project-a/2011-demos/*
             tags = tags/server/*:refs/remotes/project-a/tags/*

   Creating a branch in such a configuration requires disambiguating
which location to use using the -d or –destination flag:

     $ git svn branch -d branches/server release-2-3-0

   Note that git-svn keeps track of the highest revision in which a
branch or tag has appeared.  If the subset of branches or tags is
changed after fetching, then $GIT_DIR/svn/.metadata must be manually
edited to remove (or reset) branches-maxRev and/or tags-maxRev as
appropriate.


FILES
*****

$GIT_DIR/svn/**/.rev_map.*
     Mapping between Subversion revision numbers and Git commit names.
     In a repository where the noMetadata option is not set, this can be
     rebuilt from the git-svn-id: lines that are at the end of every
     commit (see the _svn.noMetadata_ section above for details).

     _git svn fetch_ and _git svn rebase_ automatically update the
     rev_map if it is missing or not up to date.  _git svn reset_
     automatically rewinds it.


BUGS
****

We ignore all SVN properties except svn:executable.  Any unhandled
properties are logged to $GIT_DIR/svn/<refname>/unhandled.log

   Renamed and copied directories are not detected by Git and hence not
tracked when committing to SVN. I do not plan on adding support for this
as it’s quite difficult and time-consuming to get working for all the
possible corner cases (Git doesn’t do it, either).  Committing renamed
and copied files is fully supported if they’re similar enough for Git to
detect them.

   In SVN, it is possible (though discouraged) to commit changes to a
tag (because a tag is just a directory copy, thus technically the same
as a branch).  When cloning an SVN repository, _git svn_ cannot know if
such a commit to a tag will happen in the future.  Thus it acts
conservatively and imports all SVN tags as branches, prefixing the tag
name with _tags/_.


SEE ALSO
********

git-rebase(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-switch,  Up: Top

Name
****

git-switch — ブランチを切り替える


Synopsis
********

     git switch [<options>] [–no-guess] <branch>
     git switch [<options>] –detach [<start-point>]
     git switch [<options>] (-c|-C) <new-branch> [<start-point>]
     git switch [<options>] –orphan <new-branch>


DESCRIPTION
***********

指定のブランチに切り替えます。作業ツリーとインデックスは、ブランチに一致
するように更新されます。新規コミットは、全てこのブランチの先端に追加され
ることになります。

   オプションで、同じ名前のリモートブランチから自動的に ‘-c’ や ‘-C’ を
使用して新しいブランチを作成するか(‘--guess’ 参照)、あるいは切り替え時に
‘--detach’ を使用して任意のブランチから作業ツリーをデタッチできます。

   ブランチを切り替えるには、クリーンなインデックスと作業ツリーは必要あ
りません(つまり、「HEAD」との違いはありません)。ただし、操作によってロー
カル変更が失われる場合、 ‘--discard-changes’ または ‘--merge’ で特に指示
されない限り、操作は中止されます。

   !!このコマンドは実験的なものです。 動作が変わる可能性があります!!


OPTIONS
*******

<branch>
     切り替え先のブランチ

<new-branch>
     新ブランチの名前

<start-point>
     新ブランチの開始点。 ‘<start-point>’ を指定すると、HEADが現在指し示
     している場所以外の履歴内の場所に基づいてブランチを作成できます。(ま
     たは、 ‘--detach’ の場合、他の場所から検査してデタッチすることがで
     きます。)

     ‘@{-N}’ 構文を使用して、「git switch」または「git checkout」操作を
     使用して切り替えられた最後からN番目のブランチ/コミットを参照できま
     す。 ‘@{-1}’ と同義の ‘-’ を指定することもできます。これは、2つのブ
     ランチをすばやく切り替えたり、誤って切り替えたブランチを元に戻した
     りするためによく使用されます。

     特別な場合として、マージベースが1つしかない場合は、 ‘A’ と ‘B’ のマ
     ージベースのショートカットとして ‘A...B’ を使用できます。 ‘A’ と
     ‘B’ のうち片方を省略できます。その場合、省略した方はデフォルトで
     ‘HEAD’ になります。

‘-c <new-branch>’
‘--create <new-branch>’
     ブランチに切り替える前に、 ‘<start-point>’ で始まる ‘<new-branch>’
     という名前の新しいブランチを作成します。これは以下に代わる便利なシ
     ョートカットです:

          $ git branch <new-branch>
          $ git switch <new-branch>

‘-C <new-branch>’
‘--force-create <new-branch>’
     ‘--create`と似ていますが、 `<new-branch>’ がすでに存在する場合、
     ‘<start-point>’ にリセットされる点が異なります。これは以下に代わる
     便利なショートカットです:

          $ git branch -f <new-branch>
          $ git switch <new-branch>

‘-d’
‘--detach’
     検査と破棄可能な実験のためのコミットに切り替えます。詳細については
     、 git-checkout(1) の「DETACHED HEAD」セクションを参照してください
     。

‘--guess’
‘--no-guess’
     ‘<branch>’ が見つからないが、名前が一致するリモートが正確に1つだけ
     あり(‘<remote>’ と呼びます)、それに追跡ブランチが存在する場合は、以
     下と同等のものとして扱います。

          $ git switch -c <branch> --track <remote>/<branch>

     ブランチが複数のリモートに存在し、そのうちの1つが
     ‘checkout.defaultRemote’ 構成変数によって名前が付けられている場合、
     ‘<branch>’ がすべてのリモートで一意でなくても、曖昧さ回避の目的でそ
     のブランチを使用します。例えば、 ‘<branch>’ があいまいであるが、
     _origin_ リモートに存在する場合、そこからリモートブランチを常にチェ
     ックアウトするには、これを ‘checkout.defaultRemote=origin’ と設定し
     ます。 git-config(1) の ‘checkout.defaultRemote’ も参照してください
     。

     ‘--guess’ がデフォルトの動作です。無効にするには、 ‘--no-guess’ を
     使用します。

     デフォルトの動作は、 ‘checkout.guess’ 構成変数で設定できます。

‘-f’
‘--force’
     ‘--discard-changes’ のエイリアス。

‘--discard-changes’
     インデックスまたは作業ツリーが ‘HEAD’ と異なっていても続行します。
     インデックスと作業ツリーの両方が、切り替え先(switching target)に一
     致するように復元されます。 ‘--recurse-submodules’ が指定されている
     場合、サブモジュールの内容も切り替え先に一致するように復元されます
     。これは、ローカルの変更を破棄するために使用されます。

‘-m’
‘--merge’
     現在のブランチと切り替え先のブランチの間で異なる1つ以上のファイルに
     ローカルの変更がある場合、コマンドは、変更をコンテキストに保持する
     ためにブランチの切り替えを拒否します。 ただし、このオプションを使用
     すると、現在のブランチ、作業ツリーの内容、および新しいブランチの間
     の3方向のマージが実行され、新しいブランチに移動します。

     マージの競合が発生すると、競合するパスのインデックスエントリはマー
     ジされないままになり、競合を解決し、解決されたパスを ‘git add’ (ま
     たはマージによってパスが削除される場合は ‘git rm’)でマークする必要
     があります。

‘--conflict=<style>’
     上記の ‘--merge’ オプションと同じですが、競合するハンクの表示方法を
     変更し、 ‘merge.conflictStyle’ 構成変数をオーバーライドします。指定
     可能な値は「merge」(デフォルト)と「diff3」(「merge」スタイルで表示
     されるものに加えて、元のコンテンツを表示)です。

‘-q’
‘--quiet’
     静かにします。フィードバックメッセージを抑制します。

‘--progress’
‘--no-progress’
     ‘--quiet’ が指定されていない限り、進行状況は、端末に接続されている
     場合、デフォルトで標準エラーストリームに報告されます。このフラグは
     、 ‘--quiet’ に関係なく、端末に接続されていない場合でも進行状況のレ
     ポートを有効にします。

‘-t’
‘--track’
     新しいブランチを作成するときは、 "upstream" 構成をセットアップしま
     す。 ‘-c’ が暗黙に指定されたものと見なします。詳細については、
     git-branch(1) の ‘--track’ を参照してください。

     ‘-c’ オプションが指定されていない場合、新しいブランチの名前は、対応
     するリモート用に構成されたrefspecのローカル部分を調べ、次に、最初の
     部分を「*」まで削除することにより、リモート追跡ブランチから取得され
     ます。これは、 ‘origin/hack’ (または ‘remotes/origin/hack’ あるいは
     ‘refs/remotes/origin/hack’)から分岐するときに、ローカルブランチとし
     て ‘hack’ を使用するように指示します。指定された名前にスラッシュ
     (/)がない場合、または上記の推測の結果が空の名前になる場合、推測は中
     止されます。このような場合は、 ‘-c’ を使用して明示的に名前を付ける
     ことができます。

‘--no-track’
     ‘branch.autoSetupMerge’ 構成変数がtrueであっても、 "upstream" 構成
     をセットアップしない。

‘--orphan <new-branch>’
     ‘<new-branch>’ という名前の新しい 「孤立した」(orphan)ブランチを作
     成します。追跡中のファイルはすべて削除されます。

‘--ignore-other-worktrees’
     ‘git switch’ は、必要なrefが別のワークツリーによってすでにチェック
     アウトされている場合に拒否します。このオプションを使用すると、とに
     かくrefをチェックアウトできます。つまり、refは複数のワークツリーで
     保持できます。

‘--recurse-submodules’
‘--no-recurse-submodules’
     ‘--recurse-submodules’ を使用すると、スーパープロジェクト(親プロジ
     ェクト)に記録されたコミットに従って、すべてのアクティブなサブモジュ
     ールのコンテンツが更新されます。何も使用されていない(または
     ‘--no-recurse-submodules’)場合、サブモジュールの作業ツリーは更新さ
     れません。 git-submodule(1) と同様に、これはサブモジュールの ‘HEAD’
     を切り離します(detach)。


EXAMPLES
********

以下のコマンドは "master" ブランチに切り替えます:

     $ git switch master

   間違ったブランチで作業した後、正しいブランチへの切り替えは以下を使用
して行われます:

     $ git switch mytopic

   ただし、「間違った」ブランチと正しい「mytopic」ブランチは、ローカルで
変更したファイルが異なる場合があります。その場合、上記のswitchは以下のよ
うに失敗します:

     $ git switch mytopic
     error: You have local changes to 'frotz'; not switching branches.

   コマンドに ‘-m’ フラグを指定すると、3方向のマージを試行します:

     $ git switch -m mytopic
     Auto-merging frotz

   この3者間マージの後、ローカルの変更はインデックスファイルに登録されな
いため、 ‘git diff’ は、新しいブランチの先端以降に行った変更を示します。

   mytopicに切り替える前に前のブランチ(つまり、 "master" ブランチ)に戻す
には:

     $ git switch -

   どのコミットからでも新しいブランチを成長させることができます。たとえ
ば、 "HEAD~3" に切り替えて、ブランチ "fixup" を作成します:

     $ git switch -c fixup HEAD~3
     Switched to a new branch 'fixup'

   同じ名前のリモートブランチから新しいブランチを開始する場合:

     $ git switch new-topic
     Branch 'new-topic' set up to track remote branch 'new-topic' from 'origin'
     Switched to a new branch 'new-topic'

   新しいブランチを作成せずに、一時的な検査または実験のためにコミット
‘HEAD~3’ をチェックアウトするには:

     $ git switch --detach HEAD~3
     HEAD is now at 9fc9555312 Merge branch 'cc/shared-index-permbits'

   一時的な検査または実験のために行ったことに維持する価値があることが判
明した場合は、(切り替えることなく)、いつでも新しい名前を作成できます:

     $ git switch -c good-surprises


SEE ALSO
********

git-checkout(1), git-branch(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-symbolic-ref,  Up: Top

Name
****

git-symbolic-ref — シンボリックrefの読み取り、変更、および削除


Synopsis
********

     git symbolic-ref [-m <reason>] <name> <ref>
     git symbolic-ref [-q] [–short] <name>
     git symbolic-ref –delete [-q] <name>


DESCRIPTION
***********

引数が1つ与えられると、指定されたシンボリックrefが参照するブランチヘッド
を読み取り、 ‘.git/’ ディレクトリを基準にしてそのパスを出力します。 通常
、作業ツリーがどのブランチにあるかを確認するには、 <name> 引数として
‘HEAD’ を指定します。

   2つの引数を与えると、指定されたブランチ <ref> を指すようにシンボリッ
クref <name> を作成または更新します。

   ‘--delete’ と追加の引数を指定すると、指定されたシンボリックrefが削除
されます。

   シンボリックrefは、 ‘ref: refs/’ で始まる文字列を格納する通常のファイ
ルです。 たとえば、 ‘.git/HEAD’ は、内容が ‘ref: refs/heads/master’ であ
る通常のファイルです。


OPTIONS
*******

‘-d’
‘--delete’
     シンボリックref <name> を削除します。

‘-q’
‘--quiet’
     <name> がシンボリックrefではなく、切り離されたHEAD(detached HEAD)で
     ある場合は、エラーメッセージを発行しないでください。 代わりに、ゼロ
     以外のステータスで何も言わずに終了します。

‘--short’
     <name> の値をシンボリックrefとして表示する場合は、値を短くする事を
     試みます。例えば ‘refs/heads/master’ から ‘master’ へ。

‘-m’
     <name> のreflogを <reason> で更新します。これは、シンボリックrefを
     作成または更新する場合にのみ有効です。


NOTES
*****

以前は、 ‘.git/HEAD’ は ‘refs/heads/master’ を指すシンボリックリンクでし
た。別のブランチに切り替えたい場合は、 ‘ln -sf refs/heads/newbranch
.git/HEAD’ を実行し、現在のブランチを確認したい場合は、 ‘readlink
.git/HEAD’ を実行しました。 ただし、シンボリックリンクは完全に移植可能で
はないため、非推奨になり、(上記のとおり)シンボリックrefがデフォルトで使
用されます。

   _git symbolic-ref_ は、シンボリックrefの内容が正しく出力された場合は
ステータス0で終了し、要求された名前がシンボリックrefでない場合はステータ
ス1で終了し、別のエラーが発生した場合は128で終了します。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-tag,  Up: Top

Name
****

git-tag — Create, list, delete or verify a tag object signed with GPG


Synopsis
********

     git tag [-a | -s | -u <keyid>] [-f] [-m <msg> | -F <file>] [-e]
             <tagname> [<commit> | <object>]
     git tag -d <tagname>…
     git tag [-n[<num>]] -l [–contains <commit>] [–no-contains <commit>]
             [–points-at <object>] [–column[=<options>] | –no-column]
             [–create-reflog] [–sort=<key>] [–format=<format>]
             [–merged <commit>] [–no-merged <commit>] [<pattern>…]
     git tag -v [–format=<format>] <tagname>…


DESCRIPTION
***********

Add a tag reference in ‘refs/tags/’, unless ‘-d/-l/-v’ is given to
delete, list or verify tags.

   Unless ‘-f’ is given, the named tag must not yet exist.

   If one of ‘-a’, ‘-s’, or ‘-u <keyid>’ is passed, the command creates
a _tag_ object, and requires a tag message.  Unless ‘-m <msg>’ or ‘-F
<file>’ is given, an editor is started for the user to type in the tag
message.

   If ‘-m <msg>’ or ‘-F <file>’ is given and ‘-a’, ‘-s’, and ‘-u
<keyid>’ are absent, ‘-a’ is implied.

   Otherwise, a tag reference that points directly at the given object
(i.e., a lightweight tag) is created.

   A GnuPG signed tag object will be created when ‘-s’ or ‘-u <keyid>’
is used.  When ‘-u <keyid>’ is not used, the committer identity for the
current user is used to find the GnuPG key for signing.  The
configuration variable ‘gpg.program’ is used to specify custom GnuPG
binary.

   Tag objects (created with ‘-a’, ‘-s’, or ‘-u’) are called "annotated"
tags; they contain a creation date, the tagger name and e-mail, a
tagging message, and an optional GnuPG signature.  Whereas a
"lightweight" tag is simply a name for an object (usually a commit
object).

   Annotated tags are meant for release while lightweight tags are meant
for private or temporary object labels.  For this reason, some git
commands for naming objects (like ‘git describe’) will ignore
lightweight tags by default.


OPTIONS
*******

‘-a’
‘--annotate’
     Make an unsigned, annotated tag object

‘-s’
‘--sign’
     Make a GPG-signed tag, using the default e-mail address’s key.  The
     default behavior of tag GPG-signing is controlled by ‘tag.gpgSign’
     configuration variable if it exists, or disabled otherwise.  See
     git-config(1).

‘--no-sign’
     Override ‘tag.gpgSign’ configuration variable that is set to force
     each and every tag to be signed.

‘-u <keyid>’
‘--local-user=<keyid>’
     Make a GPG-signed tag, using the given key.

‘-f’
‘--force’
     Replace an existing tag with the given name (instead of failing)

‘-d’
‘--delete’
     Delete existing tags with the given names.

‘-v’
‘--verify’
     Verify the GPG signature of the given tag names.

‘-n<num>’
     <num> specifies how many lines from the annotation, if any, are
     printed when using -l.  Implies ‘--list’.

     The default is not to print any annotation lines.  If no number is
     given to ‘-n’, only the first line is printed.  If the tag is not
     annotated, the commit message is displayed instead.

‘-l’
‘--list’
     List tags.  With optional ‘<pattern>...’, e.g.  ‘git tag --list
     'v-*'’, list only the tags that match the pattern(s).

     Running "git tag" without arguments also lists all tags.  The
     pattern is a shell wildcard (i.e., matched using fnmatch(3)).
     Multiple patterns may be given; if any of them matches, the tag is
     shown.

     This option is implicitly supplied if any other list-like option
     such as ‘--contains’ is provided.  See the documentation for each
     of those options for details.

‘--sort=<key>’
     Sort based on the key given.  Prefix ‘-’ to sort in descending
     order of the value.  You may use the –sort=<key> option multiple
     times, in which case the last key becomes the primary key.  Also
     supports "version:refname" or "v:refname" (tag names are treated as
     versions).  The "version:refname" sort order can also be affected
     by the "versionsort.suffix" configuration variable.  The keys
     supported are the same as those in ‘git for-each-ref’.  Sort order
     defaults to the value configured for the ‘tag.sort’ variable if it
     exists, or lexicographic order otherwise.  See git-config(1).

‘--color[=<when>]’
     Respect any colors specified in the ‘--format’ option.  The
     ‘<when>’ field must be one of ‘always’, ‘never’, or ‘auto’ (if
     ‘<when>’ is absent, behave as if ‘always’ was given).

‘-i’
‘--ignore-case’
     Sorting and filtering tags are case insensitive.

‘--column[=<options>]’
‘--no-column’
     Display tag listing in columns.  See configuration variable
     ‘column.tag’ for option syntax.  ‘--column’ and ‘--no-column’
     without options are equivalent to _always_ and _never_
     respectively.

     This option is only applicable when listing tags without annotation
     lines.

‘--contains [<commit>]’
     Only list tags which contain the specified commit (HEAD if not
     specified).  Implies ‘--list’.

‘--no-contains [<commit>]’
     Only list tags which don’t contain the specified commit (HEAD if
     not specified).  Implies ‘--list’.

‘--merged [<commit>]’
     Only list tags whose commits are reachable from the specified
     commit (‘HEAD’ if not specified).

‘--no-merged [<commit>]’
     Only list tags whose commits are not reachable from the specified
     commit (‘HEAD’ if not specified).

‘--points-at <object>’
     Only list tags of the given object (HEAD if not specified).
     Implies ‘--list’.

‘-m <msg>’
‘--message=<msg>’
     Use the given tag message (instead of prompting).  If multiple ‘-m’
     options are given, their values are concatenated as separate
     paragraphs.  Implies ‘-a’ if none of ‘-a’, ‘-s’, or ‘-u <keyid>’ is
     given.

‘-F <file>’
‘--file=<file>’
     Take the tag message from the given file.  Use _-_ to read the
     message from the standard input.  Implies ‘-a’ if none of ‘-a’,
     ‘-s’, or ‘-u <keyid>’ is given.

‘-e’
‘--edit’
     The message taken from file with ‘-F’ and command line with ‘-m’
     are usually used as the tag message unmodified.  This option lets
     you further edit the message taken from these sources.

‘--cleanup=<mode>’
     This option sets how the tag message is cleaned up.  The _<mode>_
     can be one of _verbatim_, _whitespace_ and _strip_.  The _strip_
     mode is default.  The _verbatim_ mode does not change message at
     all, _whitespace_ removes just leading/trailing whitespace lines
     and _strip_ removes both whitespace and commentary.

‘--create-reflog’
     Create a reflog for the tag.  To globally enable reflogs for tags,
     see ‘core.logAllRefUpdates’ in git-config(1).  The negated form
     ‘--no-create-reflog’ only overrides an earlier ‘--create-reflog’,
     but currently does not negate the setting of
     ‘core.logAllRefUpdates’.

‘--format=<format>’
     A string that interpolates ‘%(fieldname)’ from a tag ref being
     shown and the object it points at.  The format is the same as that
     of git-for-each-ref(1).  When unspecified, defaults to
     ‘%(refname:strip=2)’.

<tagname>
     The name of the tag to create, delete, or describe.  The new tag
     name must pass all checks defined by git-check-ref-format(1).  Some
     of these checks may restrict the characters allowed in a tag name.

<commit>
<object>
     The object that the new tag will refer to, usually a commit.
     Defaults to HEAD.


CONFIGURATION
*************

By default, _git tag_ in sign-with-default mode (-s) will use your
committer identity (of the form ‘Your Name <your@email.address>’) to
find a key.  If you want to use a different default key, you can specify
it in the repository configuration as follows:

     [user]
         signingKey = <gpg-keyid>

   ‘pager.tag’ is only respected when listing tags, i.e., when ‘-l’ is
used or implied.  The default is to use a pager.  See git-config(1).


DISCUSSION
**********


On Re-tagging
=============

What should you do when you tag a wrong commit and you would want to
re-tag?

   If you never pushed anything out, just re-tag it.  Use "-f" to
replace the old one.  And you’re done.

   But if you have pushed things out (or others could just read your
repository directly), then others will have already seen the old tag.
In that case you can do one of two things:

  1. The sane thing.  Just admit you screwed up, and use a different
     name.  Others have already seen one tag-name, and if you keep the
     same name, you may be in the situation that two people both have
     "version X", but they actually have _different_ "X"’s.  So just
     call it "X.1" and be done with it.

  2. The insane thing.  You really want to call the new version "X" too,
     _even though_ others have already seen the old one.  So just use
     _git tag -f_ again, as if you hadn’t already published the old one.

   However, Git does *not* (and it should not) change tags behind users
back.  So if somebody already got the old tag, doing a _git pull_ on
your tree shouldn’t just make them overwrite the old one.

   If somebody got a release tag from you, you cannot just change the
tag for them by updating your own one.  This is a big security issue, in
that people MUST be able to trust their tag-names.  If you really want
to do the insane thing, you need to just fess up to it, and tell people
that you messed up.  You can do that by making a very public
announcement saying:

     Ok, I messed up, and I pushed out an earlier version tagged as X. I
     then fixed something, and retagged the *fixed* tree as X again.

     If you got the wrong tag, and want the new one, please delete
     the old one and fetch the new one by doing:

             git tag -d X
             git fetch origin tag X

     to get my updated tag.

     You can test which tag you have by doing

             git rev-parse X

     which should return 0123456789abcdef.. if you have the new version.

     Sorry for the inconvenience.

   Does this seem a bit complicated?  It *should* be.  There is no way
that it would be correct to just "fix" it automatically.  People need to
know that their tags might have been changed.


On Automatic following
======================

If you are following somebody else’s tree, you are most likely using
remote-tracking branches (eg.  ‘refs/remotes/origin/master’).  You
usually want the tags from the other end.

   On the other hand, if you are fetching because you would want a
one-shot merge from somebody else, you typically do not want to get tags
from there.  This happens more often for people near the toplevel but
not limited to them.  Mere mortals when pulling from each other do not
necessarily want to automatically get private anchor point tags from the
other person.

   Often, "please pull" messages on the mailing list just provide two
pieces of information: a repo URL and a branch name; this is designed to
be easily cut&pasted at the end of a _git fetch_ command line:

     Linus, please pull from

             git://git..../proj.git master

     to get the following updates...

   becomes:

     $ git pull git://git..../proj.git master

   In such a case, you do not want to automatically follow the other
person’s tags.

   One important aspect of Git is its distributed nature, which largely
means there is no inherent "upstream" or "downstream" in the system.  On
the face of it, the above example might seem to indicate that the tag
namespace is owned by the upper echelon of people and that tags only
flow downwards, but that is not the case.  It only shows that the usage
pattern determines who are interested in whose tags.

   A one-shot pull is a sign that a commit history is now crossing the
boundary between one circle of people (e.g.  "people who are primarily
interested in the networking part of the kernel") who may have their own
set of tags (e.g.  "this is the third release candidate from the
networking group to be proposed for general consumption with 2.6.21
release") to another circle of people (e.g.  "people who integrate
various subsystem improvements").  The latter are usually not interested
in the detailed tags used internally in the former group (that is what
"internal" means).  That is why it is desirable not to follow tags
automatically in this case.

   It may well be that among networking people, they may want to
exchange the tags internal to their group, but in that workflow they are
most likely tracking each other’s progress by having remote-tracking
branches.  Again, the heuristic to automatically follow such tags is a
good thing.


On Backdating Tags
==================

If you have imported some changes from another VCS and would like to add
tags for major releases of your work, it is useful to be able to specify
the date to embed inside of the tag object; such data in the tag object
affects, for example, the ordering of tags in the gitweb interface.

   To set the date used in future tag objects, set the environment
variable GIT_COMMITTER_DATE (see the later discussion of possible
values; the most common form is "YYYY-MM-DD HH:MM").

   For example:

     $ GIT_COMMITTER_DATE="2006-10-02 10:31" git tag -s v1.0.1


DATE FORMATS
************

‘GIT_AUTHOR_DATE’ と ‘GIT_COMMITTER_DATE’ 環境変数は、以下の日付形式をサ
ポートします:

Git internal format
     これは ‘<unix timestamp> <time zone offset>’ ここで、 ‘<unix
     timestamp>’ UNIXエポックからの秒数です。 ‘<time zone offset>’ は
     UTCからの正または負のオフセットです。 たとえば、CET(UTCより1時間進
     んでいます)は ‘+0100’ です。

RFC 2822
     RFC 2822で説明されている標準の電子メール形式。たとえば、 ‘Thu, 07
     Apr 2005 22:13:13 +0200’ 。

ISO 8601
     ISO 8601規格で指定されている日時(例: ‘2005-04-07T22:13:13’)。パーサ
     は、 ‘T’ 文字の代わりにスペースも受け入れます。秒の小数部分は無視さ
     れます。たとえば、 ‘2005-04-07T22:13:13.019’ は
     ‘2005-04-07T22:13:13’ として扱われます。

          *Note*

          日付部分は、上記に加えて、 ‘YYYY.MM.DD’ または ‘MM/DD/YYYY’ ま
          たは ‘DD.MM.YYYY’ 形式が受け入れられます。


NOTES
*****

複数の ‘--contains’ フィルターと ‘--no-contains’ フィルターを組み合わせ
る場合、少なくとも1つの ‘--contains’ コミットを含み、 ‘--no-contains’ コ
ミットを含まない参照のみが表示されます。

   複数の ‘--merged’ フィルターと ‘--no-merged’ フィルターを組み合わせる
と、少なくとも1つの ‘--merged’ コミットから到達可能で、 ‘--no-merged’ コ
ミットのいずれからも到達できない参照のみが表示されます。


SEE ALSO
********

git-check-ref-format(1).  git-config(1).


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-unpack-file,  Up: Top

Name
****

git-unpack-file — ブロブの内容を含む一時(temporary)ファイルを作成します


Synopsis
********

     git unpack-file <blob>


DESCRIPTION
***********

sha1で指定されたブロブの内容を保持するファイルを作成します。 一時
(temporary)ファイルの名前を次の形式で返します: .merge_file_XXXXX


OPTIONS
*******

<blob>
     ブロブIDである必要があります


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-unpack-objects,  Up: Top

Name
****

git-unpack-objects — パックされたアーカイブからオブジェクトを取り出しま
す


Synopsis
********

     git unpack-objects [-n] [-q] [-r] [–strict]


DESCRIPTION
***********

標準入力からパックされたアーカイブ(.pack)を読み取り、そこに含まれるオブ
ジェクトを展開して、"loose" 形式(ファイルごとに1つのオブジェクト)でリポ
ジトリに書き込みます。

   リポジトリにすでに存在するオブジェクトは、パックファイルから取り出さ
れません。したがって、ターゲットリポジトリ内に存在するパックファイルでこ
のコマンドを使用しても、何も取り出されません。

   新しいパックを生成して既存のパックを置き換えるオプションについては、
git-repack(1) を参照してください。


OPTIONS
*******

‘-n’
     ドライランします。 実際にオブジェクトを取り出さずにパックファイルを
     確認するのみです。

‘-q’
     このコマンドは通常、進捗率を表示しますが、このフラグはそれを抑制し
     ます。

‘-r’
     破損したパックファイルから取り出そうとすると、コマンドは最初の破損
     で終了します。このフラグは破損があっても続行し、できるだけ多くのオ
     ブジェクトを回復するために最善を尽くすことを指示します。

‘--strict’
     壊れたコンテンツやリンクを含むオブジェクトをリポジトリに書き込まな
     い

‘--max-input-size=<size>’
     入力サイズが <size> より大きい場合は何もせず終了します。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-update-index,  Up: Top

Name
****

git-update-index — Register file contents in the working tree to the
index


Synopsis
********

     git update-index
                  [–add] [–remove | –force-remove] [–replace]
                  [–refresh] [-q] [–unmerged] [–ignore-missing]
                  [(–cacheinfo <mode>,<object>,<file>)…]
                  [–chmod=(+|-)x]
                  [–[no-]assume-unchanged]
                  [–[no-]skip-worktree]
                  [–[no-]ignore-skip-worktree-entries]
                  [–[no-]fsmonitor-valid]
                  [–ignore-submodules]
                  [–[no-]split-index]
                  [–[no-|test-|force-]untracked-cache]
                  [–[no-]fsmonitor]
                  [–really-refresh] [–unresolve] [–again | -g]
                  [–info-only] [–index-info]
                  [-z] [–stdin] [–index-version <n>]
                  [–verbose]
                  [–] [<file>…]


DESCRIPTION
***********

Modifies the index.  Each file mentioned is updated into the index and
any _unmerged_ or _needs updating_ state is cleared.

   See also git-add(1) for a more user-friendly way to do some of the
most common operations on the index.

   The way _git update-index_ handles files it is told about can be
modified using the various options:


OPTIONS
*******

‘--add’
     If a specified file isn’t in the index already then it’s added.
     Default behaviour is to ignore new files.

‘--remove’
     If a specified file is in the index but is missing then it’s
     removed.  Default behavior is to ignore removed file.

‘--refresh’
     Looks at the current index and checks to see if merges or updates
     are needed by checking stat() information.

‘-q’
     Quiet.  If –refresh finds that the index needs an update, the
     default behavior is to error out.  This option makes _git
     update-index_ continue anyway.

‘--ignore-submodules’
     Do not try to update submodules.  This option is only respected
     when passed before –refresh.

‘--unmerged’
     If –refresh finds unmerged changes in the index, the default
     behavior is to error out.  This option makes _git update-index_
     continue anyway.

‘--ignore-missing’
     Ignores missing files during a –refresh

‘--cacheinfo <mode>,<object>,<path>’
‘--cacheinfo <mode> <object> <path>’
     Directly insert the specified info into the index.  For backward
     compatibility, you can also give these three arguments as three
     separate parameters, but new users are encouraged to use a
     single-parameter form.

‘--index-info’
     Read index information from stdin.

‘--chmod=(+|-)x’
     Set the execute permissions on the updated files.

‘--[no-]assume-unchanged’
     When this flag is specified, the object names recorded for the
     paths are not updated.  Instead, this option sets/unsets the
     "assume unchanged" bit for the paths.  When the "assume unchanged"
     bit is on, the user promises not to change the file and allows Git
     to assume that the working tree file matches what is recorded in
     the index.  If you want to change the working tree file, you need
     to unset the bit to tell Git.  This is sometimes helpful when
     working with a big project on a filesystem that has very slow
     lstat(2) system call (e.g.  cifs).

     Git will fail (gracefully) in case it needs to modify this file in
     the index e.g.  when merging in a commit; thus, in case the
     assumed-untracked file is changed upstream, you will need to handle
     the situation manually.

‘--really-refresh’
     Like ‘--refresh’, but checks stat information unconditionally,
     without regard to the "assume unchanged" setting.

‘--[no-]skip-worktree’
     When one of these flags is specified, the object name recorded for
     the paths are not updated.  Instead, these options set and unset
     the "skip-worktree" bit for the paths.  See section "Skip-worktree
     bit" below for more information.

‘--[no-]ignore-skip-worktree-entries’
     Do not remove skip-worktree (AKA "index-only") entries even when
     the ‘--remove’ option was specified.

‘--[no-]fsmonitor-valid’
     When one of these flags is specified, the object name recorded for
     the paths are not updated.  Instead, these options set and unset
     the "fsmonitor valid" bit for the paths.  See section "File System
     Monitor" below for more information.

‘-g’
‘--again’
     Runs _git update-index_ itself on the paths whose index entries are
     different from those from the ‘HEAD’ commit.

‘--unresolve’
     Restores the _unmerged_ or _needs updating_ state of a file during
     a merge if it was cleared by accident.

‘--info-only’
     Do not create objects in the object database for all <file>
     arguments that follow this flag; just insert their object IDs into
     the index.

‘--force-remove’
     Remove the file from the index even when the working directory
     still has such a file.  (Implies –remove.)

‘--replace’
     By default, when a file ‘path’ exists in the index, _git
     update-index_ refuses an attempt to add ‘path/file’.  Similarly if
     a file ‘path/file’ exists, a file ‘path’ cannot be added.  With
     –replace flag, existing entries that conflict with the entry being
     added are automatically removed with warning messages.

‘--stdin’
     Instead of taking list of paths from the command line, read list of
     paths from the standard input.  Paths are separated by LF (i.e.
     one path per line) by default.

‘--verbose’
     Report what is being added and removed from index.

‘--index-version <n>’
     Write the resulting index out in the named on-disk format version.
     Supported versions are 2, 3 and 4.  The current default version is
     2 or 3, depending on whether extra features are used, such as ‘git
     add -N’.

     Version 4 performs a simple pathname compression that reduces index
     size by 30%-50% on large repositories, which results in faster load
     time.  Version 4 is relatively young (first released in 1.8.0 in
     October 2012).  Other Git implementations such as JGit and libgit2
     may not support it yet.

‘-z’
     Only meaningful with ‘--stdin’ or ‘--index-info’; paths are
     separated with NUL character instead of LF.

‘--split-index’
‘--no-split-index’
     Enable or disable split index mode.  If split-index mode is already
     enabled and ‘--split-index’ is given again, all changes in
     $GIT_DIR/index are pushed back to the shared index file.

     These options take effect whatever the value of the
     ‘core.splitIndex’ configuration variable (see git-config(1)).  But
     a warning is emitted when the change goes against the configured
     value, as the configured value will take effect next time the index
     is read and this will remove the intended effect of the option.

‘--untracked-cache’
‘--no-untracked-cache’
     Enable or disable untracked cache feature.  Please use
     ‘--test-untracked-cache’ before enabling it.

     These options take effect whatever the value of the
     ‘core.untrackedCache’ configuration variable (see git-config(1)).
     But a warning is emitted when the change goes against the
     configured value, as the configured value will take effect next
     time the index is read and this will remove the intended effect of
     the option.

‘--test-untracked-cache’
     Only perform tests on the working directory to make sure untracked
     cache can be used.  You have to manually enable untracked cache
     using ‘--untracked-cache’ or ‘--force-untracked-cache’ or the
     ‘core.untrackedCache’ configuration variable afterwards if you
     really want to use it.  If a test fails the exit code is 1 and a
     message explains what is not working as needed, otherwise the exit
     code is 0 and OK is printed.

‘--force-untracked-cache’
     Same as ‘--untracked-cache’.  Provided for backwards compatibility
     with older versions of Git where ‘--untracked-cache’ used to imply
     ‘--test-untracked-cache’ but this option would enable the extension
     unconditionally.

‘--fsmonitor’
‘--no-fsmonitor’
     Enable or disable files system monitor feature.  These options take
     effect whatever the value of the ‘core.fsmonitor’ configuration
     variable (see git-config(1)).  But a warning is emitted when the
     change goes against the configured value, as the configured value
     will take effect next time the index is read and this will remove
     the intended effect of the option.

–
     Do not interpret any more arguments as options.

<file>
     Files to act on.  Note that files beginning with _._  are
     discarded.  This includes ‘./file’ and ‘dir/./file’.  If you don’t
     want this, then use cleaner names.  The same applies to directories
     ending _/_ and paths with _//_


USING –REFRESH
**************

‘--refresh’ does not calculate a new sha1 file or bring the index up to
date for mode/content changes.  But what it *does* do is to "re-match"
the stat information of a file with the index, so that you can refresh
the index for a file that hasn’t been changed but where the stat entry
is out of date.

   For example, you’d want to do this after doing a _git read-tree_, to
link up the stat index details with the proper files.


USING –CACHEINFO OR –INFO-ONLY
******************************

‘--cacheinfo’ is used to register a file that is not in the current
working directory.  This is useful for minimum-checkout merging.

   To pretend you have a file at path with mode and sha1, say:

     $ git update-index --add --cacheinfo <mode>,<sha1>,<path>

   ‘--info-only’ is used to register files without placing them in the
object database.  This is useful for status-only repositories.

   Both ‘--cacheinfo’ and ‘--info-only’ behave similarly: the index is
updated but the object database isn’t.  ‘--cacheinfo’ is useful when the
object is in the database but the file isn’t available locally.
‘--info-only’ is useful when the file is available, but you do not wish
to update the object database.


USING –INDEX-INFO
*****************

‘--index-info’ is a more powerful mechanism that lets you feed multiple
entry definitions from the standard input, and designed specifically for
scripts.  It can take inputs of three formats:

  1. mode SP type SP sha1 TAB path

     This format is to stuff ‘git ls-tree’ output into the index.

  2. mode SP sha1 SP stage TAB path

     This format is to put higher order stages into the index file and
     matches _git ls-files –stage_ output.

  3. mode SP sha1 TAB path

     This format is no longer produced by any Git command, but is and
     will continue to be supported by ‘update-index --index-info’.

   To place a higher stage entry to the index, the path should first be
removed by feeding a mode=0 entry for the path, and then feeding
necessary input lines in the third format.

   For example, starting with this index:

     $ git ls-files -s
     100644 8a1218a1024a212bb3db30becd860315f9f3ac52 0       frotz

   you can feed the following input to ‘--index-info’:

     $ git update-index --index-info
     0 0000000000000000000000000000000000000000      frotz
     100644 8a1218a1024a212bb3db30becd860315f9f3ac52 1       frotz
     100755 8a1218a1024a212bb3db30becd860315f9f3ac52 2       frotz

   The first line of the input feeds 0 as the mode to remove the path;
the SHA-1 does not matter as long as it is well formatted.  Then the
second and third line feeds stage 1 and stage 2 entries for that path.
After the above, we would end up with this:

     $ git ls-files -s
     100644 8a1218a1024a212bb3db30becd860315f9f3ac52 1       frotz
     100755 8a1218a1024a212bb3db30becd860315f9f3ac52 2       frotz


USING “ASSUME UNCHANGED” BIT
****************************

Many operations in Git depend on your filesystem to have an efficient
‘lstat(2)’ implementation, so that ‘st_mtime’ information for working
tree files can be cheaply checked to see if the file contents have
changed from the version recorded in the index file.  Unfortunately,
some filesystems have inefficient ‘lstat(2)’.  If your filesystem is one
of them, you can set "assume unchanged" bit to paths you have not
changed to cause Git not to do this check.  Note that setting this bit
on a path does not mean Git will check the contents of the file to see
if it has changed — it makes Git to omit any checking and assume it has
*not* changed.  When you make changes to working tree files, you have to
explicitly tell Git about it by dropping "assume unchanged" bit, either
before or after you modify them.

   In order to set "assume unchanged" bit, use ‘--assume-unchanged’
option.  To unset, use ‘--no-assume-unchanged’.  To see which files have
the "assume unchanged" bit set, use ‘git ls-files -v’ (see
git-ls-files(1)).

   The command looks at ‘core.ignorestat’ configuration variable.  When
this is true, paths updated with ‘git update-index paths...’ and paths
updated with other Git commands that update both index and working tree
(e.g.  _git apply –index_, _git checkout-index -u_, and _git read-tree
-u_) are automatically marked as "assume unchanged".  Note that "assume
unchanged" bit is *not* set if ‘git update-index --refresh’ finds the
working tree file matches the index (use ‘git update-index
--really-refresh’ if you want to mark them as "assume unchanged").


EXAMPLES
********

To update and refresh only the files already checked out:

     $ git checkout-index -n -f -a && git update-index --ignore-missing --refresh

On an inefficient filesystem with ‘core.ignorestat’ set
          $ git update-index --really-refresh              (1)
          $ git update-index --no-assume-unchanged foo.c   (2)
          $ git diff --name-only                           (3)
          $ edit foo.c
          $ git diff --name-only                           (4)
          M foo.c
          $ git update-index foo.c                         (5)
          $ git diff --name-only                           (6)
          $ edit foo.c
          $ git diff --name-only                           (7)
          $ git update-index --no-assume-unchanged foo.c   (8)
          $ git diff --name-only                           (9)
          M foo.c

     *note (1): CO1-1.
          forces lstat(2) to set "assume unchanged" bits for paths that
          match index.

     *note (2): CO1-2.
          mark the path to be edited.

     *note (3): CO1-3.
          this does lstat(2) and finds index matches the path.

     *note (4): CO1-4.
          this does lstat(2) and finds index does *not* match the path.

     *note (5): CO1-5.
          registering the new version to index sets "assume unchanged"
          bit.

     *note (6): CO1-6.
          and it is assumed unchanged.

     *note (7): CO1-7.
          even after you edit it.

     *note (8): CO1-8.
          you can tell about the change after the fact.

     *note (9): CO1-9.
          now it checks with lstat(2) and finds it has been changed.


SKIP-WORKTREE BIT
*****************

Skip-worktree bit can be defined in one (long) sentence: When reading an
entry, if it is marked as skip-worktree, then Git pretends its working
directory version is up to date and read the index version instead.

   To elaborate, "reading" means checking for file existence, reading
file attributes or file content.  The working directory version may be
present or absent.  If present, its content may match against the index
version or not.  Writing is not affected by this bit, content safety is
still first priority.  Note that Git _can_ update working directory
file, that is marked skip-worktree, if it is safe to do so (i.e.
working directory version matches index version)

   Although this bit looks similar to assume-unchanged bit, its goal is
different from assume-unchanged bit’s.  Skip-worktree also takes
precedence over assume-unchanged bit when both are set.


SPLIT INDEX
***********

This mode is designed for repositories with very large indexes, and aims
at reducing the time it takes to repeatedly write these indexes.

   In this mode, the index is split into two files, $GIT_DIR/index and
$GIT_DIR/sharedindex.<SHA-1>.  Changes are accumulated in
$GIT_DIR/index, the split index, while the shared index file contains
all index entries and stays unchanged.

   All changes in the split index are pushed back to the shared index
file when the number of entries in the split index reaches a level
specified by the splitIndex.maxPercentChange config variable (see
git-config(1)).

   Each time a new shared index file is created, the old shared index
files are deleted if their modification time is older than what is
specified by the splitIndex.sharedIndexExpire config variable (see
git-config(1)).

   To avoid deleting a shared index file that is still used, its
modification time is updated to the current time every time a new split
index based on the shared index file is either created or read from.


UNTRACKED CACHE
***************

This cache is meant to speed up commands that involve determining
untracked files such as ‘git status’.

   This feature works by recording the mtime of the working tree
directories and then omitting reading directories and stat calls against
files in those directories whose mtime hasn’t changed.  For this to work
the underlying operating system and file system must change the
‘st_mtime’ field of directories if files in the directory are added,
modified or deleted.

   You can test whether the filesystem supports that with the
‘--test-untracked-cache’ option.  The ‘--untracked-cache’ option used to
implicitly perform that test in older versions of Git, but that’s no
longer the case.

   If you want to enable (or disable) this feature, it is easier to use
the ‘core.untrackedCache’ configuration variable (see git-config(1))
than using the ‘--untracked-cache’ option to ‘git update-index’ in each
repository, especially if you want to do so across all repositories you
use, because you can set the configuration variable to ‘true’ (or
‘false’) in your ‘$HOME/.gitconfig’ just once and have it affect all
repositories you touch.

   When the ‘core.untrackedCache’ configuration variable is changed, the
untracked cache is added to or removed from the index the next time a
command reads the index; while when ‘--[no-|force-]untracked-cache’ are
used, the untracked cache is immediately added to or removed from the
index.

   Before 2.17, the untracked cache had a bug where replacing a
directory with a symlink to another directory could cause it to
incorrectly show files tracked by git as untracked.  See the "status:
add a failing test showing a core.untrackedCache bug" commit to git.git.
A workaround for that is (and this might work for other undiscovered
bugs in the future):

     $ git -c core.untrackedCache=false status

   This bug has also been shown to affect non-symlink cases of replacing
a directory with a file when it comes to the internal structures of the
untracked cache, but no case has been reported where this resulted in
wrong "git status" output.

   There are also cases where existing indexes written by git versions
before 2.17 will reference directories that don’t exist anymore,
potentially causing many "could not open directory" warnings to be
printed on "git status".  These are new warnings for existing issues
that were previously silently discarded.

   As with the bug described above the solution is to one-off do a "git
status" run with ‘core.untrackedCache=false’ to flush out the leftover
bad data.


FILE SYSTEM MONITOR
*******************

This feature is intended to speed up git operations for repos that have
large working directories.

   It enables git to work together with a file system monitor (see the
"fsmonitor-watchman" section of githooks(5)) that can inform it as to
what files have been modified.  This enables git to avoid having to
lstat() every file to find modified files.

   When used in conjunction with the untracked cache, it can further
improve performance by avoiding the cost of scanning the entire working
directory looking for new files.

   If you want to enable (or disable) this feature, it is easier to use
the ‘core.fsmonitor’ configuration variable (see git-config(1)) than
using the ‘--fsmonitor’ option to ‘git update-index’ in each repository,
especially if you want to do so across all repositories you use, because
you can set the configuration variable in your ‘$HOME/.gitconfig’ just
once and have it affect all repositories you touch.

   When the ‘core.fsmonitor’ configuration variable is changed, the file
system monitor is added to or removed from the index the next time a
command reads the index.  When ‘--[no-]fsmonitor’ are used, the file
system monitor is immediately added to or removed from the index.


CONFIGURATION
*************

The command honors ‘core.filemode’ configuration variable.  If your
repository is on a filesystem whose executable bits are unreliable, this
should be set to _false_ (see git-config(1)).  This causes the command
to ignore differences in file modes recorded in the index and the file
mode on the filesystem if they differ only on executable bit.  On such
an unfortunate filesystem, you may need to use _git update-index
–chmod=_.

   Quite similarly, if ‘core.symlinks’ configuration variable is set to
_false_ (see git-config(1)), symbolic links are checked out as plain
files, and this command does not modify a recorded file mode from
symbolic link to regular file.

   The command looks at ‘core.ignorestat’ configuration variable.  See
_Using "assume unchanged" bit_ section above.

   The command also looks at ‘core.trustctime’ configuration variable.
It can be useful when the inode change time is regularly modified by
something outside Git (file system crawlers and backup systems use ctime
for marking files processed) (see git-config(1)).

   The untracked cache extension can be enabled by the
‘core.untrackedCache’ configuration variable (see git-config(1)).


NOTES
*****

Users often try to use the assume-unchanged and skip-worktree bits to
tell Git to ignore changes to files that are tracked.  This does not
work as expected, since Git may still check working tree files against
the index when performing certain operations.  In general, Git does not
provide a way to ignore changes to tracked files, so alternate solutions
are recommended.

   For example, if the file you want to change is some sort of config
file, the repository can include a sample config file that can then be
copied into the ignored name and modified.  The repository can even
include a script to treat the sample file as a template, modifying and
copying it automatically.


SEE ALSO
********

git-config(1), git-add(1), git-ls-files(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-update-ref,  Up: Top

Name
****

git-update-ref — Update the object name stored in a ref safely


Synopsis
********

     git update-ref [-m <reason>] [–no-deref] (-d <ref> [<oldvalue>] | [–create-reflog] <ref> <newvalue> [<oldvalue>] | –stdin [-z])


DESCRIPTION
***********

Given two arguments, stores the <newvalue> in the <ref>, possibly
dereferencing the symbolic refs.  E.g.  ‘git update-ref HEAD <newvalue>’
updates the current branch head to the new object.

   Given three arguments, stores the <newvalue> in the <ref>, possibly
dereferencing the symbolic refs, after verifying that the current value
of the <ref> matches <oldvalue>.  E.g.  ‘git update-ref
refs/heads/master <newvalue> <oldvalue>’ updates the master branch head
to <newvalue> only if its current value is <oldvalue>.  You can specify
40 "0" or an empty string as <oldvalue> to make sure that the ref you
are creating does not exist.

   It also allows a "ref" file to be a symbolic pointer to another ref
file by starting with the four-byte header sequence of "ref:".

   More importantly, it allows the update of a ref file to follow these
symbolic pointers, whether they are symlinks or these "regular file
symbolic refs".  It follows *real* symlinks only if they start with
"refs/": otherwise it will just try to read them and update them as a
regular file (i.e.  it will allow the filesystem to follow them, but
will overwrite such a symlink to somewhere else with a regular
filename).

   If –no-deref is given, <ref> itself is overwritten, rather than the
result of following the symbolic pointers.

   In general, using

     git update-ref HEAD "$head"

   should be a _lot_ safer than doing

     echo "$head" > "$GIT_DIR/HEAD"

   both from a symlink following standpoint *and* an error checking
standpoint.  The "refs/" rule for symlinks means that symlinks that
point to "outside" the tree are safe: they’ll be followed for reading
but not for writing (so we’ll never write through a ref symlink to some
other tree, if you have copied a whole archive by creating a symlink
tree).

   With ‘-d’ flag, it deletes the named <ref> after verifying it still
contains <oldvalue>.

   With ‘--stdin’, update-ref reads instructions from standard input and
performs all modifications together.  Specify commands of the form:

     update SP <ref> SP <newvalue> [SP <oldvalue>] LF
     create SP <ref> SP <newvalue> LF
     delete SP <ref> [SP <oldvalue>] LF
     verify SP <ref> [SP <oldvalue>] LF
     option SP <opt> LF
     start LF
     prepare LF
     commit LF
     abort LF

   With ‘--create-reflog’, update-ref will create a reflog for each ref
even if one would not ordinarily be created.

   Quote fields containing whitespace as if they were strings in C
source code; i.e., surrounded by double-quotes and with backslash
escapes.  Use 40 "0" characters or the empty string to specify a zero
value.  To specify a missing value, omit the value and its preceding SP
entirely.

   Alternatively, use ‘-z’ to specify in NUL-terminated format, without
quoting:

     update SP <ref> NUL <newvalue> NUL [<oldvalue>] NUL
     create SP <ref> NUL <newvalue> NUL
     delete SP <ref> NUL [<oldvalue>] NUL
     verify SP <ref> NUL [<oldvalue>] NUL
     option SP <opt> NUL
     start NUL
     prepare NUL
     commit NUL
     abort NUL

   In this format, use 40 "0" to specify a zero value, and use the empty
string to specify a missing value.

   In either format, values can be specified in any form that Git
recognizes as an object name.  Commands in any other format or a
repeated <ref> produce an error.  Command meanings are:

update
     Set <ref> to <newvalue> after verifying <oldvalue>, if given.
     Specify a zero <newvalue> to ensure the ref does not exist after
     the update and/or a zero <oldvalue> to make sure the ref does not
     exist before the update.

create
     Create <ref> with <newvalue> after verifying it does not exist.
     The given <newvalue> may not be zero.

delete
     Delete <ref> after verifying it exists with <oldvalue>, if given.
     If given, <oldvalue> may not be zero.

verify
     Verify <ref> against <oldvalue> but do not change it.  If
     <oldvalue> is zero or missing, the ref must not exist.

option
     Modify behavior of the next command naming a <ref>.  The only valid
     option is ‘no-deref’ to avoid dereferencing a symbolic ref.

start
     Start a transaction.  In contrast to a non-transactional session, a
     transaction will automatically abort if the session ends without an
     explicit commit.  This command may create a new empty transaction
     when the current one has been committed or aborted already.

prepare
     Prepare to commit the transaction.  This will create lock files for
     all queued reference updates.  If one reference could not be
     locked, the transaction will be aborted.

commit
     Commit all reference updates queued for the transaction, ending the
     transaction.

abort
     Abort the transaction, releasing all locks if the transaction is in
     prepared state.

   If all <ref>s can be locked with matching <oldvalue>s simultaneously,
all modifications are performed.  Otherwise, no modifications are
performed.  Note that while each individual <ref> is updated or deleted
atomically, a concurrent reader may still see a subset of the
modifications.


LOGGING UPDATES
***************

If config parameter "core.logAllRefUpdates" is true and the ref is one
under "refs/heads/", "refs/remotes/", "refs/notes/", or a pseudoref like
HEAD or ORIG_HEAD; or the file "$GIT_DIR/logs/<ref>" exists then ‘git
update-ref’ will append a line to the log file "$GIT_DIR/logs/<ref>"
(dereferencing all symbolic refs before creating the log name)
describing the change in ref value.  Log lines are formatted as:

     oldsha1 SP newsha1 SP committer LF

   Where "oldsha1" is the 40 character hexadecimal value previously
stored in <ref>, "newsha1" is the 40 character hexadecimal value of
<newvalue> and "committer" is the committer’s name, email address and
date in the standard Git committer ident format.

   Optionally with -m:

     oldsha1 SP newsha1 SP committer TAB message LF

   Where all fields are as described above and "message" is the value
supplied to the -m option.

   An update will fail (without changing <ref>) if the current user is
unable to create a new log file, append to the existing log file or does
not have committer information available.


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-update-server-info,  Up: Top

Name
****

git-update-server-info — ダムサーバー(dumb servers)を支援するために補助
情報ファイル(auxiliary info file)を更新する


Synopsis
********

     git update-server-info


DESCRIPTION
***********

オンザフライパック生成(on-the-fly pack generations)を行わないダムサーバ
ー(dumb server)は、クライアントがサーバーの参照とパックを検出できるよう
に、 $GIT_DIR/info と $GIT_OBJECT_DIRECTORY/info ディレクトリにいくつか
の補助情報ファイル(auxiliary information files)を持っている必要がありま
す。このコマンドは、そのような補助ファイルを生成します。


OUTPUT
******

現在、このコマンドは以下のファイルを更新します。それらの目的の説明につい
ては、 gitrepository-layout(5) を参照してください:

   • objects/info/packs

   • info/refs


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-upload-archive,  Up: Top

Name
****

git-upload-archive — アーカイブを git-archive に送り返す


Synopsis
********

     git upload-archive <directory>


DESCRIPTION
***********

_git archive –remote_ によって呼び出され、生成されたアーカイブをGitプロ
トコルを介して送信します。

   このコマンドは通常、エンドユーザーによって直接呼び出されることはあり
ません。 プロトコルのUIは _git archive_ 側にあり、プログラムのペアはリモ
ートリポジトリからアーカイブを取得するために使用することを目的としていま
す。


SECURITY
********

履歴から削除されたが、まだ剪定(prune)されてない可能性のあるオブジェクト
のプライバシーを保護するために、 ‘git-upload-archive’ は、リポジトリの
refから到達できないコミットおよびツリーのアーカイブの提供を回避します。
ただし、オブジェクトの到達可能性の計算には計算コストがかかるため、
‘git-upload-archive’ は、より厳密でありながらチェックしやすい一連のルー
ルを実装します。

  1. クライアントは、refが直接指すコミットまたはツリーを要求できます。 例
     : ‘git archive --remote=origin v1.0’

  2. クライアントは、 ‘ref：path’ 構文を使用して、コミットまたはツリー内
     のサブツリーを要求できます。例: ‘git archive --remote=origin
     v1.0:Documentation’

  3. 最終結果に到達できる場合でも、クライアントは他のsha1式を使用できま
     せん。 たとえば、refから結果に到達できる場合でも、 ‘master^’ のよう
     な相対コミットや ‘abcd1234’ のようなリテラルsha1は許可されません。

   注意: 3番目の規則3は、プライバシーに影響を与えない多くの場合を許可し
ないことに注意してください。これらのルールはgitの将来のバージョンで変更
される可能性があり、 ‘git archive --remote’ によってアクセスされるサーバ
ーは、これらの正確なルールに従う場合と従わない場合があります。

   構成オプション ‘uploadArchive.allowUnreachable’ がtrueの場合、これら
の規則は無視され、クライアントは任意のsha1式を使用できます。これは、到達
不能なオブジェクトのプライバシーを気にしない場合、またはオブジェクトデー
タベースが非スマートhttp経由でアクセスできるようにすでに公開されている場
合に役立ちます。


OPTIONS
*******

<directory>
     tarアーカイブを取得するリポジトリ。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-upload-pack,  Up: Top

Name
****

git-upload-pack — パックされたオブジェクトをgit-fetch-packに送り返す


Synopsis
********

     git-upload-pack [–[no-]strict] [–timeout=<n>] [–stateless-rpc]
                       [–advertise-refs] <directory>


DESCRIPTION
***********

_git fetch-pack_ によって呼び出され、通信の反対側で欠落しているオブジェ
クトを調べ、パッキング後にそれらを送信します。

   このコマンドは通常、エンドユーザーによって直接呼び出されることはあり
ません。プロトコルのUIは「git fetch-pack」側にあり、プログラムのペアはリ
モートリポジトリから更新をプルするために使用されることを目的としています
。プッシュ操作については、「git send-pack」を参照してください。


OPTIONS
*******

‘--[no-]strict’
     <directory> Gitディレクトリでない場合、 <directory>/.git/ を試さな
     い

‘--timeout=<n>’
     非アクティブになった <n> 秒後に転送を中断します。

‘--stateless-rpc’
     stdinとstdoutを使用して 読み取り/書き込み サイクルを1回だけ実行しま
     す。これは、プログラムが要求を読み取り、応答を書き込み、終了する必
     要があるHTTP POST要求処理モデルに適合します。

‘--http-backend-info-refs’
     git-http-backend(1) が、
     ‘$GIT_URL/info/refs?service=git-upload-pack’ リクエストを処理するた
     めに使用します。 the HTTP transfer protocols
     (technical/http-protocol.html) 文書の「Smart Clients」および the
     Git Wire Protocol, Version 2 (technical/protocol-v2.html) 文書の「
     HTTP Transport」を参照してください。なお、 git-receive-pack(1) でも
     同様です。

<directory>
     同期元のリポジトリ。


ENVIRONMENT
***********

‘GIT_PROTOCOL’
     ワイヤープロトコルをハンドシェイクするために使用される内部変数。サ
     ーバー管理者は、この変数を渡すことができるようにいくつかのトランス
     ポートを構成する必要がある場合があります。 git(1) のdiscussionを参
     照してください。


SEE ALSO
********

gitnamespaces(7)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-var,  Up: Top

Name
****

git-var — Git論理変数を表示します


Synopsis
********

     git var ( -l | <variable> )


DESCRIPTION
***********

Git論理変数を出力します。


OPTIONS
*******

‘-l’
     論理変数をリストします。さらに、Git構成ファイル .git/config のすべ
     ての変数も一覧表示されます。 (ただし、構成変数を一覧表示する機能は
     非推奨になり、 ‘git config -l’ が採用されました。)


EXAMPLES
********

     $ git var GIT_AUTHOR_IDENT
     Eric W. Biederman <ebiederm@lnxi.com> 1121223278 -0600


VARIABLES
*********

GIT_AUTHOR_IDENT
     コードの作者。

GIT_COMMITTER_IDENT
     コードの一部をGitに入れた人。

GIT_EDITOR
     Gitコマンドで使用するためのテキストエディタ。この値は、使用時にシェ
     ルによって解釈されることを意図しています。例: ‘~/bin/vi’ 、
     ‘$SOME_ENVIRONMENT_VARIABLE’ 、 ‘"C:\Program Files\Vim\gvim.exe"
     --nofork’ 。 優先順位は、 ‘$GIT_EDITOR’ 環境変数 、‘core.editor’ 構
     成、 ‘$VISUAL’ 、‘$EDITOR’ 、そしてコンパイル時に選択されるデフォル
     ト(通常は _vi_)です。

GIT_PAGER
     Gitコマンドで使用するためのテキストビューア(例: less)。値はシェルに
     よって解釈されることを意図しています。 優先順位は、 ‘$GIT_PAGER’ 環
     境変数、 ‘core.pager’ 構成、 ‘$PAGER’ 、そしてコンパイル時に選択さ
     れるデフォルト(通常は _less_)です。


SEE ALSO
********

git-commit-tree(1) git-tag(1) git-config(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-verify-commit,  Up: Top

Name
****

git-verify-commit — コミットのGPG署名を確認します。


Synopsis
********

     git verify-commit <commit>…


DESCRIPTION
***********

_git commit -S_ によって作成されたGPG署名を検証します。


OPTIONS
*******

‘--raw’
     通常の人間が読める形式の出力ではなく、生のgpgステータス出力を、標準
     エラーに出力します。

‘-v’
‘--verbose’
     検証する前に、コミットオブジェクトの内容を出力します。

<commit>…
     GitコミットオブジェクトのSHA-1 ID。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-verify-pack,  Up: Top

Name
****

git-verify-pack — パックされたGitアーカイブファイルを検証する


Synopsis
********

     git verify-pack [-v|–verbose] [-s|–stat-only] [–] <pack>.idx …


DESCRIPTION
***********

_git pack-objects_ コマンドで作成されたパックされたGitアーカイブの指定の
idxファイルを読み取り、idxファイルと、対応するパックファイルが正しいこと
を確認します。


OPTIONS
*******

<pack>.idx …
     確認するidxファイル(複数ファイル指定可)

‘-v’
‘--verbose’
     パックを確認した後、パックに含まれるオブジェクトのリストとデルタチ
     ェーン長のヒストグラムを表示します。

‘-s’
‘--stat-only’
     パックの内容を確認せず、デルタチェーン長のヒストグラムのみを表示し
     ます。 ‘--verbose’ を使用すると、オブジェクトのリストも表示されます
     。

–
     これ以降の引数をオプションとして解釈しないでください。


OUTPUT FORMAT
*************

オプション -v を指定する場合、使用される形式は以下のとおりです:

     SHA-1 type size size-in-packfile offset-in-packfile

   は、パックで削除されていないオブジェクトの場合です。そして、

     SHA-1 type size size-in-packfile offset-in-packfile depth base-SHA-1

   は、削除されたオブジェクトの場合です。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-verify-tag,  Up: Top

Name
****

git-verify-tag — タグのGPG署名を確認する


Synopsis
********

     git verify-tag [–format=<format>] <tag>…


DESCRIPTION
***********

_git tag_ によって作成されたgpg署名を検証します。


OPTIONS
*******

‘--raw’
     通常の人間が読める形式の出力の代わりに、生のgpgステータス出力を標準
     エラーに出力します。

‘-v’
‘--verbose’
     検証する前に、タグオブジェクトの内容を出力します。

<tag>…
     GitタグオブジェクトのSHA-1 ID。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-version,  Up: Top

Name
****

git-version — Gitに関するバージョン情報を表示する


Synopsis
********

     git version [–build-options]


DESCRIPTION
***********

オプションが指定されていない場合、 _git_ のバージョンが標準出力に出力さ
れます。

   ‘git --version’ は ‘git version’ と同じであることに注意してください。
これは、前者が内部で後者に変換されるためです。


OPTIONS
*******

‘--build-options’
     診断目的でgitがどのように構築されたかに関する追加情報を含めます。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-web--browse,  Up: Top

Name
****

git-web–browse — Webブラウザを起動するためのGitヘルパースクリプト


Synopsis
********

     git web–browse [<options>] <url|file>…


DESCRIPTION
***********

このスクリプトは、引数として渡されたURLとファイルを、可能な限り、既に開
いているWebブラウザーの新しいタブにHTMLページとして表示しようとします。

   現在、以下のブラウザ(またはコマンド)がサポートされています:

   • firefox (これは、KDEを使用しない場合のX Windowのデフォルトです)

   • iceweasel

   • seamonkey

   • iceape

   • chromium (chromium-browser としてもサポートされています)

   • google-chrome (chromeとしてもサポートされています)

   • konqueror (これはKDEのデフォルトです。以下の「Note about konqueror」
     を参照してください)

   • opera

   • w3m (これはグラフィカル環境以外のデフォルトです)

   • elinks

   • links

   • lynx

   • dillo

   • open (これはMac OS X GUIのデフォルトです)

   • start (これはMinGWのデフォルトです)

   • cygstart (これはCygwinのデフォルトです)

   • xdg-open

   カスタムコマンドを指定することもできます。


OPTIONS
*******

‘-b <browser>’
‘--browser=<browser>’
     指定のブラウザを使用します。サポートされているブラウザのリストに含
     まれている必要があります。

‘-t <browser>’
‘--tool=<browser>’
     同上。

‘-c <conf.var>’
‘--config=<conf.var>’
     CONF.VAR はGit構成ファイルで検索されます。設定されている場合、その
     値は使用するブラウザを指定します。


CONFIGURATION VARIABLES
***********************


CONF.VAR( -c 由来) と web.browser
=================================

Webブラウザーは、 ‘-c’ (または ‘--config’)コマンドラインオプションで渡さ
れる構成変数、または前者が使用されていない場合は ‘web.browser’ 構成変数
を使用して指定できます。


browser.<tool>.path
===================

あなたは構成変数 ‘browser.<tool>.path’ を設定することにより、希望するブ
ラウザーへのフルパスを明示的に指定できます。たとえば、
‘browser.firefox.path’ を設定することで、Firefoxへの絶対パスを設定できま
す。それ以外の場合、 ‘git web{litdd}browse’ はツールがPATH上にあると想定
します。


browser.<tool>.cmd
==================

オプションまたは構成変数で指定されたブラウザーがサポートされているブラウ
ザーに含まれていない場合、対応する ‘browser.<tool>.cmd’ 構成変数が検索さ
れます。 この変数が存在する場合、 ‘git web{litdd}browse’ は指定されたツ
ールをカスタムコマンドとして扱い、シェルのevalを使用してURLを引数として
渡してコマンドを実行します。


NOTE ABOUT KONQUEROR
********************

_konqueror_ がコマンドラインオプションまたは構成変数で指定されている場合
、可能であれば、 _kfmclient_ を起動して、既に開いているkonquerorのHTMLマ
ニュアルページを新しいタブで開こうとします。

   一貫性を保つために、 ‘browser.konqueror.path’ が
‘A_PATH_TO/konqueror’ のように設定されている場合にも、このようなトリック
を試します。 つまり、代わりに ‘A_PATH_TO/kfmclient’ を起動しようと試みま
す。

   あなたが本当に ‘konqueror’ の使用を望むのなら、あなたは以下のようなも
のを使用できます:

             [web]
                     browser = konq

             [browser "konq"]
                     cmd = A_PATH_TO/konqueror


注意: git-config –global について
=================================

注意: これらの構成変数は、おそらく以下のように ‘--global’ フラグを使用し
て設定する必要があることに注意してください:

     $ git config --global web.browser firefox

   なぜなら、おそらくリポジトリ固有よりもユーザー固有であるためです。詳
細については、 git-config(1) を参照してください。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-whatchanged,  Up: Top

Name
****

git-whatchanged — 各コミットでの差分のログを表示


Synopsis
********

     git whatchanged <option>…


DESCRIPTION
***********

各コミットのコミットログとdiff出力を表示します。

   新規ユーザーは、これの代わりに git-log(1) を使用することをお勧めしま
す。 ‘whatchanged’ コマンドは基本的に git-log(1) と同じですが、デフォル
トでは生の形式の差分出力を表示し、マージをスキップします。

   このコマンドは主に歴史的な理由で保持されています。‘git log’ が発明さ
れるずっと前に Linux kernel mailing list を読んで Gitを学んだ多くの人々
の指は、このコマンドをタイプするよう訓練されています。


Examples
********

‘git whatchanged -p v2.6.12.. include/scsi drivers/scsi’
     include/scsi または drivers/scsi サブディレクトリ内のファイルを変更
     したバージョン _v2.6.12_ 以降のコミットをパッチとして表示する

‘git whatchanged --since="2 weeks ago" -- gitk’
     過去2週間の変更をファイル _gitk_ に表示します。 "–" は、「ブランチ
     名 _gitk_ 」との混同を避けるために必要です。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-worktree,  Up: Top

Name
****

git-worktree — 複数の作業ツリーを管理します


Synopsis
********

     git worktree add [-f] [–detach] [–checkout] [–lock [–reason <string>]] [-b <new-branch>] <path> [<commit-ish>]
     git worktree list [–porcelain]
     git worktree lock [–reason <string>] <worktree>
     git worktree move <worktree> <new-path>
     git worktree prune [-n] [-v] [–expire <expire>]
     git worktree remove [-f] <worktree>
     git worktree repair [<path>…]
     git worktree unlock <worktree>


DESCRIPTION
***********

同一のリポジトリに接続されている複数の作業ツリーを管理します。

   gitリポジトリは複数の作業ツリーをサポートできるため、一度に複数のブラ
ンチをチェックアウトできます。‘git worktree add’ を使用すると、新しい作
業ツリーがリポジトリに関連付けられます。この新しい作業ツリーは、
git-init(1) または git-clone(1) によって作成された「メイン作業ツリー」
(main working tree)とは対照的に、「リンクされた作業ツリー」(linked
working tree)と呼ばれます。リポジトリには、1つのメイン作業ツリー(ベアリ
ポジトリでない場合)と、0個以上のリンクされた作業ツリーがあります。あなた
がリンクされた作業ツリーを使い終わったら、 ‘git worktree remove’ で削除
します。

   最も単純な形式では、 ‘git worktree add <path>’ は、名前が ‘<path>’ の
最後のコンポーネントである新しいブランチを自動的に作成します。これは、あ
なたが新しいトピックで作業する場合に便利です。たとえば、 ‘git worktree
add ../hotfix’ は、新しいブランチ ‘hotfix’ を作成し、パス ‘../hotfix’ で
チェックアウトします。代わりに、既存のブランチの新しい作業ツリーで作業す
るには、 ‘git worktree add <path> <branch>’ を使用します。一方、既存の開
発を妨げることなく実験的な変更やテストを行う場合は、ブランチに関連付けら
れていない「使い捨て」の作業ツリーを作成すると便利なことがよくあります。
たとえば、 ‘git worktree add -d <path>’ は、現在のブランチと同じコミット
で、切り離された‘HEAD‘(detached HEAD)を持つ新しい作業ツリーを作成します
。

   ‘git worktree remove’ を使用せずに作業ツリーを削除すると、リポジトリ
にある関連する管理ファイル(後述の「DETAILS」参照)が最終的には自動的に削
除されます(git-config(1) の ‘gc.worktreePruneExpire’ 参照)。または、メイ
ンまたはリンクされた作業ツリーで、古い管理ファイルをクリーンアップするた
めに ‘git worktree prune’ を実行できます。

   リンクされた作業ツリーが、常にマウントされているとは限らないポータブ
ルデバイスまたはネットワーク共有に保存されている場合、‘git worktree
lock’ コマンドを、オプションで ‘–reason‘を指定して、作業ツリーがロックさ
れている理由を説明して発行することで、管理ファイルが刈り込み(prune)され
ないようにすることができます。


COMMANDS
********

add <path> [<commit-ish>]
     ‘<path>’ を作成し、それに ‘<commit-ish>’ をチェックアウトします。 新
     しい作業ディレクトリは現在のリポジトリにリンクされ、 ‘HEAD’ や
     ‘index’ などの作業ディレクトリ固有のファイルを除くすべてを共有しま
     す。便宜上、 ‘<commit-ish>’ は裸の ‘-’ である場合があり、これは
     ‘@{-1}’ と同義です。

     上記 ‘<commit-ish>’ がブランチ名(以下 ‘<branch>’ とします)で見つか
     らず、 ‘-b’ や ‘-B’ や ‘--detach’ のいずれも使用されていないが、名
     前が一致する1つのリモート(以下 ‘<remote>’ とします)には追跡ブランチ
     が存在する場合、上記は以下と同等です:

          $ git worktree add --track -b <branch> <path> <remote>/<branch>

     ブランチが複数のリモートに存在し、そのうちの1つが
     ‘checkout.defaultRemote’ 設定変数によって名付けられた場合、
     ‘<branch>’ がすべてのリモートでユニークでなくても、曖昧さをなくすた
     めにその1つを使用します。例えば、 ‘checkout.defaultRemote=origin’ と
     設定すると、 ‘<branch>’ があいまいで、かつ ‘origin’ リモートに存在
     する場合、常にそこからリモートブランチをチェックアウトすることがで
     きます。git-config(1) にある ‘checkout.defaultRemote’ も参照してく
     ださい。

     ‘<commit-ish>’ が省略され、 ‘-b’ も ‘-B’ も ‘--detach’ も使用されて
     いない場合、便宜上、新しい作業ツリーは ‘$(basename <path>)’ にちな
     んで名付けらたブランチ(‘<branch>’ とします)に関連付けられます。
     ‘<branch>’ が存在しない場合、 ‘-b <branch>’ が指定されたかのように
     、 ‘HEAD’ に基づく新しいブランチが自動的に作成されます。
     ‘<branch>`が存在する場合で、他の場所でチェックアウトされていない場
     合は、新しい作業ツリーでチェックアウトされます。存在しない場合、コ
     マンドは作業ツリーの作成を拒否します(’–force‘ が使用されている場合
     を除く)。

list
     各作業ツリーの詳細を一覧表示します。 メインの作業ツリーが最初にリス
     トされ、次にリンクされた各作業ツリーがリストされます。 出力の詳細に
     含まれるのは、作業ツリーがベア(bare)であるかどうか、現在チェックア
     ウトされているリビジョン、現在チェックアウトされているブランチ(また
     は、存在しない場合は「切り離されたHEAD」(detached HEAD))、ワークツ
     リーがロックされている場合は「locked」、 ‘prune’ コマンドによってワ
     ークツリーを刈り込みできる場合は「prunable」です。

lock
     作業ツリーが常にマウントされているとは限らないポータブルデバイスま
     たはネットワーク共有上にある場合は、管理ファイルが自動的に刈り込み
     (prune)されないように、ツリーをロックします。 これにより、移動や削
     除も防止されます。 オプションで、‘--reason’ を使用してロックの理由
     を指定します。

move
     作業ツリーを新しい場所に移動します。このコマンドでは、メインの作業
     ツリーまたはサブモジュールを含むリンクされた作業ツリーを移動できな
     いことに注意してください。(ただし、 ‘git worktree repair’ コマンド
     を使用すると、メインの作業ツリーを手動で移動した場合に、リンクされ
     た作業ツリーとの接続を再確立できます。)

prune
     ‘$GIT_DIR/worktrees’ の作業ツリー情報を刈り込みます(prune)。

remove
     作業ツリーを削除します。削除できるのは、クリーンな作業ツリー(追跡し
     てないファイルが無く、かつ、追跡ファイルの変更が無い場合)のみです。
     汚れた作業ツリーまたはサブモジュールのあるツリーは、 ‘--force’ を使
     用して削除できます。メインの作業ツリーは削除できません。

repair [<path>…]
     可能であれば、外部要因によって破損または古くなった作業ツリー管理フ
     ァイルを修復します。

     たとえば、メインの作業ツリー(またはベアリポジトリ(bare
     repository))を移動すると、リンクされた作業ツリーはそれを見つけるこ
     とができなくなります。メインの作業ツリーで ‘repair’ を実行すると、
     リンクされた作業ツリーからメインの作業ツリーへの接続が再確立されま
     す。

     同様に、リンクされた作業ツリーが ‘git worktree move’ を使用せずに移
     動された場合、メインの作業ツリー(またはベアリポジトリ(bare
     repository))はそれを見つけることができません。直近に移動した作業ツ
     リー内で ‘repair’ を実行すると、接続が再確立されます。リンクされた
     作業ツリーが複数移動された場合、各作業ツリーの新しい ‘<path>’ を引
     数として任意の作業ツリーから ‘repair’ を実行すると、指定されたすべ
     てのパスへの接続が再確立されます。

     メイン作業ツリーとリンクされた作業ツリーの両方が手動で移動された場
     合、メイン作業ツリーで ‘repair’ を実行し、リンクされた各作業ツリー
     の新しい ‘<path>’ を指定すると、両方向のすべての接続が再確立されま
     す。

unlock
     作業ツリーのロックを解除(unlock)して、刈り込(prune)みまたは移動
     (move)または削除(delete)できるようにします。


OPTIONS
*******

‘-f’
‘--force’
     デフォルトでは、‘<commit-ish>’ がブランチ名であり、別の作業ツリーに
     よってすでにチェックアウトされている場合、または ‘<path>’ がすでに
     作業ツリーに割り当てられているが欠落している場合(たとえば、
     ‘<path>`が手動で削除された場合)、`add’ は新しい作業ツリーの作成を拒
     否します。このオプションは、これらの安全装置(safeguards)をオーバー
     ライドします。欠落しているがロックされている作業ツリーパスを追加す
     るには、‘--force’ を2回指定します。

     ‘--force’ が2回指定されていない限り、 ‘move’ はロックされた作業ツリ
     ーの移動を拒否します。移動先がすでに他の作業ツリーに割り当てられて
     いるが欠落している場合(たとえば、 ‘<new-path>’ が手動で削除された場
     合)は、 ‘--force’ は移動を続行できます。移動先がロックされている場
     合は、 ‘--force’ を2回使用します。

     ‘--force’ が使用されていない限り、 ‘remove’ は汚れた作業ツリー
     (unclean working tree)の削除を拒否します。ロックされた作業ツリーを
     削除するには、‘--force’ を2回指定します。

‘-b <new-branch>’
‘-B <new-branch>’
     ‘add’ を使用して、 ‘<commit-ish>’ から開始する ‘<new-branch>’ とい
     う名前の新しいブランチを作成し、 ‘<new-branch>’ を新しい作業ツリー
     にチェックアウトします。 ‘<commit-ish>’ を省略すると、デフォルトで
     ‘HEAD’ になります。 デフォルトでは、 ‘-b’ は、新しいブランチがすで
     に存在する場合、それを作成することを拒否します。 ‘-B’ はこの安全装
     置をオーバーライドし、 ‘<new-branch>’ を ‘<commit-ish>’ にリセット
     します。

‘-d’
‘--detach’
     ‘add’ を使用して、新しい作業ツリーで ‘HEAD’ を切り離します
     (detach)。 git-checkout(1) の「DETACHED HEAD」を参照してください。

‘--[no-]checkout’
     デフォルトでは、 ‘add’ は ‘<commit-ish>’ をチェックアウトしますが、
     ‘--no-checkout’ を使用して、スパースチェックアウト(suppress
     checkout)の構成などのカスタマイズを行うためにチェックアウトを抑制す
     ることができます。 git-read-tree(1) の「Sparse checkout」を参照して
     ください。

‘--[no-]guess-remote’
     ‘<commit-ish>’ を伴わずに ‘worktree add <path>’ を使用し、 ‘HEAD’ か
     ら新しいブランチを作成する代わりに、 ‘<path>’ のベース名に一致する
     追跡ブランチが１つリモートにだけ存在する場合、新しいブランチをその
     リモート追跡ブランチに基づいて作成し、そのリモート追跡ブランチを新
     しいブランチの「アップストリーム」としてマークします。

     これは、 ‘worktree.guessRemote’ 構成オプションを使用してデフォルト
     の動作として設定することもできます。

‘--[no-]track’
     新しいブランチを作成するときに、 ‘<commit-ish>’ がブランチである場
     合は、新しいブランチの「アップストリーム」としてマークします。
     ‘<commit-ish>’ がリモート追跡ブランチの場合、これの振る舞いがデフォ
     ルトです。詳細については、 git-branch(1)の ‘--track’ を参照してくだ
     さい。

‘--lock’
     作成後は、作業ツリーをロックしたままにします。 これは、 ‘git
     worktree add’ の後に ‘git worktree lock’ するのと同等ですが、競合状
     態(race condition)はありません。

‘-n’
‘--dry-run’
     ‘prune’ では、何も削除しないでください。何が削除されるかを報告する
     だけです。

‘--porcelain’
     ‘list’ を使用すると、スクリプトの解析が容易な形式で出力されます。こ
     の形式は、Gitのバージョン間で、ユーザー構成に関係なく安定しています
     。詳細については、後述します。

‘-q’
‘--quiet’
     ‘add’ を使用して、フィードバックメッセージを抑制します。

‘-v’
‘--verbose’
     ‘prune’ を使用して、すべての削除を報告します。

     ‘list’ を使用して、ワークツリーに関する追加情報を出力します(後述)。

‘--expire <time>’
     ‘prune’ と共に使うと、 ‘<time>’ より古い未使用の作業ツリーのみを期
     限切れにします。

     ‘list’ と共に使うと、 ‘<time>’ より古い場合は、欠落している作業ツリ
     ーに刈り込み可能(prunable)という注釈(annotate)を付けます。

‘--reason <string>’
     ‘lock’ または ‘add --lock’ と共に使用して、作業ツリーがロックされて
     いる理由の説明とします。

<worktree>
     作業ツリーは、相対パスまたは絶対パスのいずれかで識別できます。

     作業ツリーのパスの最後のパスコンポーネントが作業ツリー間で一意であ
     る場合、それを使用して作業ツリーを識別できます。 たとえば、
     ‘/abc/def/ghi’ と ‘/abc/def/ggg’ の2つの作業ツリーしかない場合、前
     の作業ツリーを指すには、 ‘ghi’ または ‘def/ghi’ で十分です。


REFS
****

複数の作業ツリーでは、一部のrefはすべての作業ツリー間で共有される場合が
あり、一部のrefはローカルです。 一例として、作業ツリーごとに異なる
‘HEAD’ があります。このセクションでは、共有ルールと、ある作業ツリーの
refに別の作業ツリーからアクセスする方法について説明します。

   一般に、すべての疑似ref(pseudo refs)は作業ツリーごとにあり、そして、
‘refs/’ で始まるすべての参照は共有されます。 疑似refは、 ‘$GIT_DIR/refs’
内ではなく、 ‘$GIT_DIR’ の直下にある ‘HEAD’ のようなものです。 ただし、
例外があります。 ‘refs/bisect’ 内のrefと ‘refs/worktree’ は共有されませ
ん。

   作業ツリーごとのrefには、別の作業ツリーから、 ‘main-worktree’ と
‘worktrees’ の2つの特別なパスを介してアクセスできます。 ‘main-worktree’
はメインの作業ツリーから作業ごとのツリーrefへのアクセスを提供し、
‘worktrees’ すべてのリンクされた作業ツリーへのアクセスを提供します。

   たとえば、 ‘main-worktree/HEAD’ または
‘main-worktree/refs/bisect/good’ は、それぞれメインの作業ツリーの ‘HEAD’
および ‘refs/bisect/good ` と同じ値に解決されます。 同様に、
`worktrees/foo/HEAD’ または ‘worktrees/bar/refs/bisect/bad’ は
‘$GIT_COMMON_DIR/worktrees/foo/HEAD’ および
‘$GIT_COMMON_DIR/worktrees/bar/refs/bisect/bad’ と同じです。

   refにアクセスするのに ‘$GIT_DIR’ の内部を直接調べないことをお勧めしま
す。代わりに、refを正しく処理する git-rev-parse(1) や git-update-ref(1)
などのコマンドを使用してください。


CONFIGURATION FILE
******************

デフォルトでは、リポジトリの ‘config’ ファイルはすべての作業ツリー間で共
有されます。構成変数 ‘core.bare’ または ‘core.worktree’ が構成ファイルに
すでに存在する場合、それらはメインの作業ツリーにのみ適用されます。

   作業ツリーに固有の構成を作成するには、 ‘worktreeConfig’ 拡張機能をオ
ンにします。例:

     $ git config extensions.worktreeConfig true

   このモードでは、指定の構成は ‘git rev-parse --git-path
config.worktree’ が指すパスに残ります。 ‘git config --worktree’ を使用し
て、このファイルの構成を追加または更新できます。古いバージョンのGitは、
この拡張機能を備えたリポジトリへのアクセスを拒否します。

   注意: このファイルでは、 ‘core.bare’ と ‘core.worktree’ が例外扱いさ
れないことに注意してください。 それらが ‘$GIT_DIR/config’ に存在する場合
は、メインの作業ツリーの ‘config.worktree’ に移動する必要があります。こ
の機会に、共有したくない他の構成を確認して、すべての作業ツリーに移動する
こともできます。

   • ‘core.worktree’ と ‘core.bare’ は決して共有しないでください

   • すべての作業ツリーに常にスパースチェックアウト(sparse checkout)を使
     用することが確実でない限りは、作業ツリーごとに
     ‘core.sparseCheckout’ をお勧めします。


DETAILS
*******

リンクされた各作業ツリーには、リポジトリの ‘$ GIT_DIR/worktrees`ディレク
トリにプライベートサブディレクトリがあります。 プライベートサブディレク
トリの名前は通常、リンクされた作業ツリーのパスのベース名であり、一意にす
るために番号が追加される場合があります。たとえば、
`$GIT_DIR=/path/main/.git’ の場合、コマンド ‘git worktree add
/path/other/test-next next’ はリンクされた作業ツリーを
‘/path/other/test-next`に作成し、そしてまた
`$GIT_DIR/worktrees/test-next’ ディレクトリ(または、 ‘test-next’ がすで
に実行されている場合は、 ‘$GIT_DIR/worktrees/test-next1’ ディレクトリ)を
作成します。

   リンクされた作業ツリー内で、 ‘$GIT_DIR’ は、このプライベートディレク
トリを指すように設定され(例では ‘/path/main/.git/worktrees/test-next’ )、
‘$GIT_COMMON_DIR’ はメインの作業ツリーの ‘$GIT_DIR’ (例では
‘/path/main/.git’ )を指すように設定されます。これらの設定は、リンクされ
た作業ツリーの最上位ディレクトリにある ‘.git’ ファイルで行われます。

   ‘git rev-parse --git-path’ によるパス解決では、パスに応じて
‘$GIT_DIR’ または ‘$GIT_COMMON_DIR’ のいずれかが使用されます。たとえば、
リンクされた作業ツリーでは、 ‘git rev-parse --git-path HEAD’ は
‘/path/main/.git/worktrees/test-next/HEAD’ を返します
(‘/path/other/test-next/.git/HEAD’ や ‘/path/main/.git/HEAD’ ではありま
せん)。一方、 ‘git rev-parse --git-path refs/heads/master’ は
‘$GIT_COMMON_DIR’ を使用し、 ‘/path/main/.git/refs/heads/ master’ を返し
ます。refは、 ‘refs/bisect’ と ‘refs/worktree’ を除くすべての作業ツリー
で共有されるためです。

   詳細については、 gitrepository-layout(5) を参照してください。 経験則
では、 ‘$GIT_DIR’ 内の何かに直接アクセスする必要がある場合、パスが
‘$GIT_DIR’ または ‘$GIT_COMMON_DIR’ のどちらに属するかについては何も想定
していません。 ‘git rev-parse --git-path’ を使用して、最終的なパスを取得
してください。

   リンクされた作業ツリーを手動で移動する場合は、エントリのディレクトリ
にある ‘gitdir’ ファイルを更新する必要があります。 たとえば、リンクされ
た作業ツリーが ‘/newpath/test-next’ に移動され、その ‘.git’ ファイルが
‘/path/main/.git/worktrees/test-next’ を指しているならば、代わりに
‘/path/main/.git/worktrees/test-next/gitdir’ を更新し
‘/newpath/test-next’ を参照するようにします。もっといいのは、 ‘git
worktree repair’ を実行して、接続を自動的に再確立することです。

   ‘$GIT_DIR/worktrees’ エントリが刈り込み(prune)されないようにする(これ
は、エントリの作業ツリーがポータブルデバイスに保存されている場合など、状
況によっては便利です)には、 ‘git worktree lock’ コマンドを使用します。こ
のコマンドは ‘locked’ という名前のファイルをエントリのディレクトリに追加
します。ファイルには、理由(reason)がプレーンテキストで含まれています。た
とえば、リンクされた作業ツリーの ‘.git’ ファイルが
‘/path/main/.git/worktrees/test-next’ を指しているならば、
‘/path/main/.git/worktrees/test-next/locked’ という名前のファイルは
‘test-next’ エントリが刈り込み(pruned)されるのを防ぎます。詳細については
、 gitrepository-layout(5) を参照してください。

   ‘extensions.worktreeConfig’ が有効になっている場合、設定ファイル
‘.git/worktrees/<id>/config.worktree’ は ‘.git/config’ の後に読み込まれ
ます。


LIST OUTPUT FORMAT
******************

‘worktreelist’ コマンドには2つの出力形式があります。デフォルトの形式では
、詳細が1行に複数列で表示されます。例えば:

     $ git worktree list
     /path/to/bare-source            (bare)
     /path/to/linked-worktree        abcd1234 [master]
     /path/to/other-linked-worktree  1234abc  (detached HEAD)

   このコマンドは、状態に応じて、各作業ツリーの注釈(annotations)も表示し
ます。これらの注釈は以下のとおりです:

   • ‘locked’ : 作業ツリーがロックされている場合。

   • ‘prunable’ : 作業ツリーが ‘git worktree prune’ を介して刈り込みでき
     る場合。

     $ git worktree list
     /path/to/linked-worktree    abcd1234 [master]
     /path/to/locked-worktree    acbd5678 (brancha) locked
     /path/to/prunable-worktree  5678abc  (detached HEAD) prunable

   これらの注釈(annotations)については、理由(reason)も利用できる可能性が
あり、これは冗長モード(verbose mode)を使用して確認できます。そして、注釈
はインデントされた次の行に移動され、その後に追加情報が続きます。

     $ git worktree list --verbose
     /path/to/linked-worktree              abcd1234 [master]
     /path/to/locked-worktree-no-reason    abcd5678 (detached HEAD) locked
     /path/to/locked-worktree-with-reason  1234abcd (brancha)
             locked: working tree path is mounted on a portable device
     /path/to/prunable-worktree            5678abc1 (detached HEAD)
             prunable: gitdir file points to non-existent location

   注意: 追加情報が利用可能な場合、注釈は次の行に移動されることに注意し
てください。そうでない場合、注釈は作業ツリー自体と同じ行にとどまります。


Porcelain Format
================

磁器コマンドのフォーマットは、属性ごとに1行あります。 属性は、単一のスペ
ースで区切られたラベルと値でリストされます。ブール属性(‘bare’ や
‘detached’ など)はラベルとしてのみリストされ、値がtrueの場合にのみ存在し
ます。 一部の属性(‘locked’ など)は、ラベルとしてのみリストすることも、理
由が利用可能かどうかに応じて値とともにリストすることもできます。作業ツリ
ーの最初の属性は常に ‘worktree’ であり、空の行はレコードの終わりを示しま
す。例えば:

     $ git worktree list --porcelain
     worktree /path/to/bare-source
     bare

     worktree /path/to/linked-worktree
     HEAD abcd1234abcd1234abcd1234abcd1234abcd1234
     branch refs/heads/master

     worktree /path/to/other-linked-worktree
     HEAD 1234abc1234abc1234abc1234abc1234abc1234a
     detached

     worktree /path/to/linked-worktree-locked-no-reason
     HEAD 5678abc5678abc5678abc5678abc5678abc5678c
     branch refs/heads/locked-no-reason
     locked

     worktree /path/to/linked-worktree-locked-with-reason
     HEAD 3456def3456def3456def3456def3456def3456b
     branch refs/heads/locked-with-reason
     locked reason why is locked

     worktree /path/to/linked-worktree-prunable
     HEAD 1233def1234def1234def1234def1234def1234b
     detached
     prunable gitdir file points to non-existent location

   ロック理由に改行などの「異常な」文字が含まれている場合、それらはエス
ケープされ、構成変数 ‘core.quotePath’ で説明されているように理由全体がク
ォートされます(git-config(1) 参照)。例えば:

     $ git worktree list --porcelain
     ...
     locked "reason\nwhy is locked"
     ...


EXAMPLES
********

リファクタリングセッションの真っ最中に、上司がやって来て、あなたに、すぐ
に何かを修正するように要求します。 通常、 git-stash(1) を使用して変更を
一時的に保存しますが、作業ツリーは、(新しいファイル、移動されたファイル
、削除されたファイル、その他の断片が散らばっていて)混乱状態にあります。
あなたはそれのいずれかを邪魔する危険を冒したくありません。あなたは代わり
に、一時的にリンクされた作業ツリーを作成して緊急修正を行い、完了したらそ
れを削除してから、以前のリファクタリングセッションを再開することにします
。

     $ git worktree add -b emergency-fix ../temp master
     $ pushd ../temp
     # ... hack hack hack ...
     $ git commit -a -m 'emergency fix for boss'
     $ popd
     $ git worktree remove ../temp


BUGS
****

一般的な複数チェックアウト(multiple checkout)はまだ実験段階であり、サブ
モジュールのサポートは不完全です。スーパープロジェクトを複数チェックアウ
トすることはお勧めしません。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git-write-tree,  Up: Top

Name
****

git-write-tree — 現在のインデックスからツリーオブジェクトを作成します


Synopsis
********

     git write-tree [–missing-ok] [–prefix=<prefix>/]


DESCRIPTION
***********

現在のインデックスを使用してツリーオブジェクトを作成します。新しいツリー
オブジェクトの名前が標準出力に出力されます。

   インデックスは完全にマージされた状態である必要があります。

   概念的には、 _git write-tree_ は、現在のインデックスの内容をツリーフ
ァイルのセットに sync() します。現在ディレクトリに実際にあるものと一致さ
せるには、 _git write-tree_ を実行する前に _git update-index_ フェイズを
実行する必要があります。


OPTIONS
*******

‘--missing-ok’
     通常、 _git write-tree_ は、ディレクトリによって参照されるオブジェ
     クトがオブジェクトデータベースに存在することを保証します。このオプ
     ションは、このチェックを無効にします。

‘--prefix=<prefix>/’
     サブディレクトリ ‘<prefix>’ を表すツリーオブジェクトを書き込みます
     。これは、指定されたサブディレクトリにあるサブプロジェクトのツリー
     オブジェクトを書き込むために使用できます。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: git,  Up: Top

Name
****

git — くだらないコンテンツトラッカー


Synopsis
********

     git [–version] [–help] [-C <path>] [-c <name>=<value>]
         [–exec-path[=<path>]] [–html-path] [–man-path] [–info-path]
         [-p|–paginate|-P|–no-pager] [–no-replace-objects] [–bare]
         [–git-dir=<path>] [–work-tree=<path>] [–namespace=<name>]
         [–super-prefix=<path>] [–config-env=<name>=<envvar>]
         <command> [<args>]


DESCRIPTION
***********

Gitは、高速でスケーラブルな分散型リビジョン管理システムであり、高レベル
の操作と内部へのフルアクセスの両方を提供する非常に豊富なコマンドセットを
備えています。

   始めは gittutorial(7) を参照してください。次に、便利な最小限のコマン
ドセットについては giteveryday(7) を参照してください。 Git User’s Manual
(user-manual.html) には、より詳細な紹介があります。

   あなたが基本的な概念をマスターしたら、このページに戻ってGitが提供する
コマンドを学ぶことができます。「git help command」を使用して、個々の
Gitコマンドについて詳しく知ることができます。 gitcli(7) のマニュアルペー
ジには、コマンドラインコマンド構文の概要が記載されています。

   最新のGitドキュメントの、フォーマットされ、ハイパーリンクされたコピー
は、 https://git.github.io/htmldocs/git.html
(https://git.github.io/htmldocs/git.html) または
https://git-scm.com/docs (https://git-scm.com/docs) で表示できます。


OPTIONS
*******

‘--version’
     _git_ プログラムの元となったGitスイートのバージョンを出力します。

     このオプションは内部で ‘git version ...’ に変換されるので、
     git-version(1) コマンドと同じオプションを受け入れます。 ‘--help’ も
     指定されている場合は ‘--version’ よりも優先されます。

‘--help’
     概要と、最も一般的に使用されるコマンドのリストを出力します。 オプシ
     ョン ‘--all’ または ‘-a’ を指定すると、使用可能なすべてのコマンドが
     出力されます。Gitコマンドが明示された場合、このオプションはそのコマ
     ンドのマニュアルページを表示します。

     マニュアルページの表示方法を制御するために、他のオプションを使用で
     きます。‘git --help ...’ は内部で ‘git help ...’ に変換されるため、
     詳細については git-help(1) を参照してください。

‘-C <path>’
     現在の作業ディレクトリではなく、「<path>」でgitが開始されたかのよう
     に実行します。 複数の ‘-C’ オプションが指定されている場合、後続の「
     非絶対 ‘-C <path> ` 」は、それぞれ先行する `-C <path>’ に関連して解
     釈されます。 ’<path>’は存在するが空の場合(例: ‘-C" "’)の場合、現在
     の作業ディレクトリは変更されません。

     このオプションは、パス名の解釈が ‘-C’ オプションによって引き起こさ
     れる作業ディレクトリに対して行われるという点で、 ‘--git-dir’ や
     ‘--work-tree’ のようなパス名を期待するオプションに影響します。たと
     えば、以下の2つの呼び出しは同等です:

          git --git-dir=a.git --work-tree=b -C c status
          git --git-dir=c/a.git --work-tree=c/b status

‘-c <name>=<value>’
     構成パラメーターをコマンドに渡します。指定された値は、構成ファイル
     の値を上書きします。 <name>は、「git config」(ドットで区切られたサ
     ブキー)でリストされているものと同じ形式である必要があります。

     ‘git -c foo.bar ...’ で ‘=’ を省略することは許可されており、その場
     合 ‘foo.bar’ を(設定ファイルの ‘[foo]bar’ と同様に)ブール値のtrueに
     設定することに注意してください。等号と空の値(‘git -c foo.bar= ...’
     など)を含むと、 ‘foo.bar’ が空の文字列に設定されます。 ‘git config
     --type=bool’ ではこれを ‘false’ に変換します。

‘--config-env=<name>=<envvar>’
     ‘-c <name>=<value>’ と同様に、構成変数 _<name>_ に値を指定します。
     ここで、 <envvar> は、値を取得する環境変数の名前です。 ‘-c’ とは異
     なり、値を空の文字列に直接設定するためのショートカットはありません
     。代わりに、環境変数自体を空の文字列に設定する必要があります。
     ‘<envvar>’ が環境に存在しない場合はエラーになります。 ‘<envvar>’ に
     は等号を含めることはできません。これは、 ‘<name>’ に等号が含まれて
     いる場合のあいまいさを避けるためです。

     これは、あなたが一時的な構成オプションをgitに渡したいが、他のプロセ
     スで、あなたのコマンドライン(たとえば ‘/proc/self/cmdline’)は読み取
     れるが、あなたの環境(たとえば ‘/proc/self/environ’)は読み取れない可
     能性があるOS上で作業している場合に役立ちます。この動作はLinuxのデフ
     ォルトですが、あなたのシステムでは設定されてない場合があります。

     注意:これにより、機密情報が値の一部である ‘http.extraHeader’ などの
     変数のセキュリティが追加される可能性がありますが、機密情報をキーの
     一部にすることができるモノ、例えば ‘url.<base>.insteadOf’ は使用で
     きません。

‘--exec-path[=<path>]’
     あなたのコアGitプログラムがインストールされている場所へのパス。これ
     は、 GIT_EXEC_PATH 環境変数を設定することによっても制御できます。パ
     スが指定されていない場合、「git」は現在の設定を出力して終了します。

‘--html-path’
     GitのHTMLドキュメントがインストールされているパスを末尾のスラッシュ
     なしで印刷し、終了します。

‘--man-path’
     このバージョンのGitのマニュアルページのmanpath(‘man(1)’ 参照)を印刷
     して終了します。

‘--info-path’
     このバージョンのGitを文書化したInfoファイルがインストールされている
     パスを印刷して終了します。

‘-p’
‘--paginate’
     標準出力が端末の場合は、すべての出力を _less_ (または設定されている
     場合は $PAGER )にパイプします。これにより、 ‘pager.<cmd>’ 構成オプ
     ションが上書きされます(以下の「Configuration Mechanism」セクション
     を参照)。

‘-P’
‘--no-pager’
     Git出力をページャーにパイプしないでください。

‘--git-dir=<path>’
     リポジトリ(".git" ディレクトリ)へのパスを設定します。これは、
     ‘GIT_DIR’ 環境変数を設定することによっても制御できます。現在の作業
     ディレクトリへの絶対パスまたは相対パスにすることができます。

     このオプションを使用して ‘.git’ ディレクトリの場所を指定すると、 (リ
     ポジトリとトップレベルの作業ツリーを検出できる、) ‘.git’ サブディレ
     クトリを持つディレクトリを検索しようとするリポジトリ検出機能がオフ
     になり、あなたが作業ツリーの最上位にいるとGitに通知します。あなたが
     作業ツリーの最上位ディレクトリにいない場合は、 ‘--work-tree=<path>’
     オプション(または ‘GIT_WORK_TREE’ 環境変数)を使用して、作業ツリーの
     最上位がどこにあるかをGitに通知する必要があります。

     ‘<path>’ で開始されたかのようにgitを実行したい場合は、 ‘git -C
     <path>’ を使用します。

‘--work-tree=<path>’
     作業ツリーへのパスを設定します。絶対パスまたは現在の作業ディレクト
     リからの相対パスにすることができます。これは、 GIT_WORK_TREE環境変
     数とcore.worktree構成変数を設定することによっても制御できます(詳細
     については、 git-config(1) の core.worktree を参照してください)。

‘--namespace=<path>’
     Git名前空間を設定します。詳細については linkgit: gitnamespaces[7] を
     参照してください。 ‘GIT_NAMESPACE’ 環境変数を設定するのと同じです。

‘--super-prefix=<path>’
     現在、内部使用のみです。リポジトリの上位からそのリポジトリのルート
     までのパスを与えるプレフィックスを設定します。1つの使用法は、サブモ
     ジュールに、それを呼び出したスーパープロジェクトに関するコンテキス
     トを与えることです。

‘--bare’
     リポジトリをベアリポジトリとして扱います。GIT_DIR環境が設定されてい
     ない場合は、現在の作業ディレクトリに設定されます。

‘--no-replace-objects’
     Gitオブジェクトを置き換えるための置換refを使用しません。 詳細につい
     ては git-replace(1) を参照してください。

‘--literal-pathspecs’
     パススペックを文字通り扱います(つまり globbing 無し、 pathspec
     magic 無しです)。 これは、 ‘GIT_LITERAL_PATHSPECS’ 環境変数を ‘1’ に
     設定するのと同じです。

‘--glob-pathspecs’
     すべてのパススペックにグロブマジック(glob magic)を追加します。 これ
     は、 ‘GIT_GLOB_PATHSPECS’ 環境変数を ‘1’ に設定するのと同じです。 個
     々のパススペックで globbing を無効にするには、パススペックマジック
     ‘:(literal)’ を使用します。

‘--noglob-pathspecs’
     すべてのパススペックにリテラルマジック(literal magic)を追加します。
     これは、 ‘GIT_NOGLOB_PATHSPECS’ 環境変数を ‘1’ に設定するのと同じで
     す。個々のパススペックでグロブを有効にするには、パススペックマジッ
     ク ‘:(glob)’ を使用します。

‘--icase-pathspecs’
     すべてのパススペックに icase magic を追加します。 これは、
     ‘GIT_ICASE_PATHSPECS’ 環境変数を ‘1’ に設定するのと同じです。

‘--no-optional-locks’
     ロック(lock)を必要とするオプションの操作は実行しないでください。こ
     れは、 ‘GIT_OPTIONAL_LOCKS’ を ‘0’ に設定するのと同じです。

‘--list-cmds=group[,group...]’
     コマンドをグループ別に一覧表示します。これは 内部/実験的 なオプショ
     ンであり、将来変更または削除される可能性があります。サポートされて
     いるグループは、builtins、parseopt(parse-optionsを使用するbuiltinコ
     マンド)、main(libexecディレクトリ内のすべてのコマンド)、その他
     (git-プレフィックスを持つ ‘$PATH’ 内の他のすべてのコマンド)、
     list-<category> (command-list.txt 内の categories を参照)、
     nohelpers(ヘルパーコマンドを除く)、alias、config(構成変数
     completion.commands から取得したコマンドリスト)、です。


GIT COMMANDS
************

私達はGitを、高レベル(porcelain;磁器)コマンドと低レベル(plumbing;配管)コ
マンドに分けています。


High-level commands (porcelain)
*******************************

磁器コマンドは、メインコマンド群といくつかの補助ユーティリティに分けられ
ます。


Main porcelain commands
=======================

git-add(1)
     Add file contents to the index.

git-am(1)
     Apply a series of patches from a mailbox.

git-archive(1)
     名前付きツリーからファイルのアーカイブを作成します.

git-bisect(1)
     Use binary search to find the commit that introduced a bug.

git-branch(1)
     List, create, or delete branches.

git-bundle(1)
     Move objects and refs by archive.

git-checkout(1)
     ブランチの切り替え、または作業ツリーファイルの復元を行います。.

git-cherry-pick(1)
     Apply the changes introduced by some existing commits.

git-citool(1)
     git-commitのグラフィカルな代替手段.

git-clean(1)
     作業ツリーから追跡されていないファイルを削除する.

git-clone(1)
     Clone a repository into a new directory.

git-commit(1)
     Record changes to the repository.

git-describe(1)
     Give an object a human readable name based on an available.

git-diff(1)
     Show changes between commits, commit and working tree, etc.

git-fetch(1)
     Download objects and refs from another repository.

git-format-patch(1)
     電子メール送信用のパッチを準備します.

git-gc(1)
     不要なファイルをクリーンアップし、ローカルリポジトリを最適化する.

git-grep(1)
     Print lines matching a pattern.

git-gui(1)
     Gitのための移植性の高いGUI.

git-init(1)
     Create an empty Git repository or reinitialize an existing one.

git-log(1)
     コミットのログを表示.

git-maintenance(1)
     Run tasks to optimize Git repository data.

git-merge(1)
     Join two or more development histories together.

git-mv(1)
     ファイルまたはディレクトリまたはシンボリックリンクを移動(move)また
     は名前変更(rename)します.

git-notes(1)
     Add or inspect object notes.

git-pull(1)
     Fetch from and integrate with another repository or a local.

git-push(1)
     Update remote refs along with associated objects.

git-range-diff(1)
     Compare two commit ranges (e.g.  two versions of a branch).

git-rebase(1)
     別のベースの先端のその先頭にコミットを再適用します.

git-reset(1)
     Reset current HEAD to the specified state.

git-restore(1)
     作業ツリーファイルを復元します.

git-revert(1)
     いくつかの既存のコミットを元に戻します.

git-rm(1)
     Remove files from the working tree and from the index.

git-shortlog(1)
     _git log_ の出力を要約します。.

git-show(1)
     さまざまなタイプのオブジェクトを表示.

git-sparse-checkout(1)
     Initialize and modify the sparse-checkout.

git-stash(1)
     Stash the changes in a dirty working directory away.

git-status(1)
     Show the working tree status.

git-submodule(1)
     サブモジュールを初期化、更新、または検査します.

git-switch(1)
     ブランチを切り替える.

git-tag(1)
     Create, list, delete or verify a tag object signed with GPG.

git-worktree(1)
     複数の作業ツリーを管理します.

gitk(1)
     Gitリポジトリブラウザ.


Ancillary Commands(補助コマンド)
================================

操作コマンド:

git-config(1)
     リポジトリオプションまたはグローバルオプションを、取得および設定す
     る.

git-fast-export(1)
     Git data exporter.

git-fast-import(1)
     Backend for fast Git data importers.

git-filter-branch(1)
     Rewrite branches.

git-mergetool(1)
     マージ競合解決ツールを実行して、マージ競合を解決します.

git-pack-refs(1)
     効率的なリポジトリアクセスのためにヘッド(heads)とタグ(tags)をパック
     します.

git-prune(1)
     オブジェクトデータベースで、到達不能なすべてのオブジェクトを剪定
     (prune)します.

git-reflog(1)
     reflog情報を管理します.

git-remote(1)
     Manage set of tracked repositories.

git-repack(1)
     リポジトリ内のアンパックオブジェクトをパックする.

git-replace(1)
     オブジェクトを置き換えるためのrefsの作成、一覧表示、削除.

   問合せコマンド:

git-annotate(1)
     指定ファイルの各行のコミット情報を表示.

git-blame(1)
     Show what revision and author last modified each line of a file.

git-bugreport(1)
     ユーザーがバグ報告を提出するための情報を収集する.

git-count-objects(1)
     パックされていない(unpack)オブジェクトの数とそのディスク消費量を計
     量します.

git-difftool(1)
     Show changes using common diff tools.

git-fsck(1)
     データベース内のオブジェクトの接続性(connectivity)と有効性
     (validity)を検証します.

git-help(1)
     Display help information about Git.

git-instaweb(1)
     gitwebで作業リポジトリをインスタントにブラウズします.

git-merge-tree(1)
     インデックスに触れずに(without touching)3者間マージを表示する.

git-rerere(1)
     競合するマージの記録された競合解決決定を再利用する.

git-show-branch(1)
     ブランチとそのコミットを表示します.

git-verify-commit(1)
     コミットのGPG署名を確認します。.

git-verify-tag(1)
     タグのGPG署名を確認する.

git-whatchanged(1)
     各コミットでの差分のログを表示.

gitweb(1)
     Git Webインターフェイス(GitリポジトリのためのWebフロントエンド).


Interacting with Others(他者との交流)
=====================================

これらのコマンドは、電子メールを利用したパッチを介して、他のSCMや人々と
対話するためのものです。

git-archimport(1)
     GNU Arch リポジトリをGitにインポートします.

git-cvsexportcommit(1)
     単一のコミットをCVSチェックアウトにエクスポートします.

git-cvsimport(1)
     Salvage your data out of another SCM people love to hate.

git-cvsserver(1)
     A CVS server emulator for Git.

git-imap-send(1)
     標準入力からIMAPフォルダへパッチのコレクションを送信します.

git-p4(1)
     Perforceリポジトリからのインポートと、Perforceリポジトリへのsubmit.

git-quiltimport(1)
     quilt(キルト)パッチセットを現在のブランチに適用します.

git-request-pull(1)
     保留中の変更の概要を生成します.

git-send-email(1)
     Send a collection of patches as emails.

git-svn(1)
     Bidirectional operation between a Subversion repository and Git.


Reset, restore and revert
=========================

同様の名前の3つのコマンドがあります。それは ‘git reset’ と ‘git restore’
と ‘git revert’ です。

   • git-revert(1) は、他のコミットによって行われた変更を元に戻す新しい
     コミットを作成することです。

   • git-restore(1) は、インデックスまたは別のコミットから作業ツリー内の
     ファイルを復元することです。このコマンドはブランチを更新しません。
     このコマンドを使用して、別のコミットからインデックス内のファイルを
     復元することもできます。

   • git-reset(1) は、ブランチを更新し、ブランチにコミットを追加または削
     除するために先端ポインタが指し示す先端(tip)を移動させることです。こ
     の操作により、コミット履歴が変更されます。

     ‘git restore’ と重複しますが、 ‘git reset’ はインデックスを復元する
     ためにも使用できます。


Low-level commands (plumbing)
*****************************

Gitには独自の磁器コマンドレイヤーが含まれていますが、代替磁器コマンドの
開発をサポートするには、その低レベルのコマンドで十分です。このような磁器
コマンドの開発者は git-update-index(1) と git-read-tree(1) を読むことか
ら始めるといいでしょう。

   これらの低レベルコマンドへのインターフェイス(入力、出力、オプションの
セット、セマンティクス)は、これらのコマンドが主にスクリプトで使用される
ため、磁器レベルのコマンドよりもはるかに安定していることを意味します。 一
方、磁器コマンドへのインターフェースは、エンドユーザーエクスペリエンスを
向上させるために変更される可能性があります。

   以下の説明では、低レベルのコマンドを、オブジェクト(リポジトリ、インデ
ックス、作業ツリー内)を操作するコマンドと、オブジェクトに問い合わせて比
較するコマンドと、リポジトリ間でオブジェクトと参照を移動するコマンドに、
分けています。


Manipulation commands(操作コマンド)
===================================

git-apply(1)
     Apply a patch to files and/or to the index.

git-checkout-index(1)
     Copy files from the index to the working tree.

git-commit-graph(1)
     Gitコミットグラフファイル(commit-graph file)の書き出しと検証
     (verify).

git-commit-tree(1)
     新しいコミットオブジェクトを作成します.

git-hash-object(1)
     オブジェクトIDを計算し、オプションでファイルからブロブを作成する.

git-index-pack(1)
     既存のパックされたアーカイブのパックインデックスファイル構築.

git-merge-file(1)
     3方向ファイルマージを実行する.

git-merge-index(1)
     マージが必要なファイルのマージを実行します.

git-mktag(1)
     追加の検証(extra validation)でタグオブジェクトを作成します.

git-mktree(1)
     ls-tree形式のテキストからツリーオブジェクトを構築する.

git-multi-pack-index(1)
     multi-pack-indexを書き出し・検証します.

git-pack-objects(1)
     オブジェクトのパックされたアーカイブを作成する.

git-prune-packed(1)
     すでにパックファイルにある余分なオブジェクトを削除します.

git-read-tree(1)
     Reads tree information into the index.

git-symbolic-ref(1)
     シンボリックrefの読み取り、変更、および削除.

git-unpack-objects(1)
     パックされたアーカイブからオブジェクトを取り出します.

git-update-index(1)
     Register file contents in the working tree to the index.

git-update-ref(1)
     Update the object name stored in a ref safely.

git-write-tree(1)
     現在のインデックスからツリーオブジェクトを作成します.


Interrogation commands(問合せコマンド)
======================================

git-cat-file(1)
     Provide content or type and size information for repository.

git-cherry(1)
     アップストリームにまだ適用されていないコミットを検索する.

git-diff-files(1)
     作業ツリーとインデックス内のファイルを比較します.

git-diff-index(1)
     ツリーを作業ツリーまたはインデックスと比較します.

git-diff-tree(1)
     2つのツリーオブジェクト間で、ブロブの内容とモードを比較します.

git-for-each-ref(1)
     各refに関する情報を出力します.

git-for-each-repo(1)
     リポジトリのリストでGitコマンドを実行します.

git-get-tar-commit-id(1)
     git-archiveを使用して作成されたアーカイブからコミットIDを抽出します
     .

git-ls-files(1)
     インデックスと作業ツリーのファイルに関する情報を表示する.

git-ls-remote(1)
     リモートリポジトリの参照を一覧表示する.

git-ls-tree(1)
     ツリーオブジェクトの内容を一覧表示します.

git-merge-base(1)
     Find as good common ancestors as possible for a merge.

git-name-rev(1)
     指定のrevのシンボリック名を検索します.

git-pack-redundant(1)
     無駄なパックファイルを探す.

git-rev-list(1)
     コミットオブジェクトを新しい順に一覧表示します.

git-rev-parse(1)
     パラメータを選択してもみもみします。.

git-show-index(1)
     パックされたアーカイブインデックスを表示する.

git-show-ref(1)
     ローカルリポジトリ内の参照を一覧表示します.

git-unpack-file(1)
     ブロブの内容を含む一時(temporary)ファイルを作成します.

git-var(1)
     Git論理変数を表示します.

git-verify-pack(1)
     パックされたGitアーカイブファイルを検証する.

   一般に、問い合わせコマンドは作業ツリー内のファイルには影響しません。


Syncing repositories(リポジトリの同期)
======================================

git-daemon(1)
     Gitリポジトリ用のほんまにシンプルなサーバー.

git-fetch-pack(1)
     別のリポジトリから不足しているオブジェクトを受け取ります.

git-http-backend(1)
     Server side implementation of Git over HTTP.

git-send-pack(1)
     Push objects over Git protocol to another repository.

git-update-server-info(1)
     ダムサーバー(dumb servers)を支援するために補助情報ファイル
     (auxiliary info.

   以下は、上記で使用されるヘルパーコマンドです。エンドユーザーは通常、
これらを直接使用することはありません。

git-http-fetch(1)
     HTTPでリモートGitリポジトリからダウンロード.

git-http-push(1)
     HTTP/DAV を介してオブジェクトを別のリポジトリにプッシュする.

git-receive-pack(1)
     Receive what is pushed into the repository.

git-shell(1)
     GitのみのSSHアクセス用の制限付きログインシェル.

git-upload-archive(1)
     アーカイブを git-archive に送り返す.

git-upload-pack(1)
     パックされたオブジェクトをgit-fetch-packに送り返す.


Internal helper commands(内部ヘルパーコマンド)
==============================================

これらは、他のコマンドで使用される内部ヘルパーコマンドです。エンドユーザ
ーは通常、これらを直接使用することはありません。

git-check-attr(1)
     gitattributes情報を表示.

git-check-ignore(1)
     gitignoreや除外ファイルのデバッグ.

git-check-mailmap(1)
     連絡先(contacts)の、正式な名前と電子メールアドレスを表示.

git-check-ref-format(1)
     参照名が整形式であることを確認します.

git-column(1)
     データを複数列表示する.

git-credential(1)
     ユーザー資格情報の取得と保存.

git-credential-cache(1)
     パスワードを一時的にメモリに保存するヘルパー.

git-credential-store(1)
     資格情報をディスクに保存するヘルパー.

git-fmt-merge-msg(1)
     git-fmt-merge-msg-マージコミットメッセージを生成します.

git-interpret-trailers(1)
     コミットメッセージの構造化情報を追加またはパースします.

git-mailinfo(1)
     単一の電子メールメッセージからパッチと作成者を抽出します.

git-mailsplit(1)
     簡易 UNIX mbox 分割プログラム.

git-merge-one-file(1)
     git-merge-indexで使用する標準のヘルパープログラム.

git-patch-id(1)
     パッチの一意のIDを計算します.

git-sh-i18n(1)
     シェルスクリプトのためのGit用i18nセットアップコード.

git-sh-setup(1)
     一般的なGitシェルスクリプトのセットアップコード.

git-stripspace(1)
     不要な空白(whitespace)を削除します.


Guides(ガイド)
**************

以下のドキュメントページ群は、Gitの概念に関するガイドです。

gitattributes(5)
     パスごとの属性の定義.

gitcli(7)
     Gitコマンドラインのインターフェイスと規則.

gitcore-tutorial(7)
     開発者のためのGit coreチュートリアル.

gitcredentials(7)
     Gitにユーザー名とパスワードを提供する.

gitcvs-migration(7)
     CVSユーザー向けGit.

gitdiffcore(7)
     diff出力の微調整.

giteveryday(7)
     Git日常利用に役立つ最小限のコマンドセット.

gitfaq(7)
     Gitの使用に関するよくある質問(FAQ).

gitglossary(7)
     Git用語集.

githooks(5)
     Gitで使われるフック.

gitignore(5)
     無視する、意図的に追跡しないファイルを指定します.

gitmailmap(5)
     作者(author)/コミッター(committer) および/または 電子メールアドレス
     (E-Mail.

gitmodules(5)
     サブモジュールプロパティの定義.

gitnamespaces(7)
     Git名前空間.

gitremote-helpers(7)
     リモートリポジトリと対話するためのヘルパープログラム群.

gitrepository-layout(5)
     Gitリポジトリの間取り.

gitrevisions(7)
     Gitのリビジョンと範囲を指定する.

gitsubmodules(7)
     あるリポジトリを別のリポジトリ内にマウントする.

gittutorial(7)
     Git入門.

gittutorial-2(7)
     Git入門パート2.

gitworkflows(7)
     Gitで推奨の作業手順の概要.


Configuration Mechanism(構成メカニズム)
***************************************

Gitは、単純なテキスト形式を使用して、リポジトリごとおよびユーザーごとの
カスタマイズを保存します。 このような構成ファイルは以下のようになります:

     #
     # A '#' or ';' character indicates a comment.
     #

     ; core variables
     [core]
             ; Don't trust file modes
             filemode = false

     ; user identity
     [user]
             name = "Junio C Hamano"
             email = "gitster@pobox.com"

   さまざまなコマンドが構成ファイルから読み取られ、それに応じて操作が調
整されます。構成メカニズムのリストと詳細については、 git-config(1) を参
照してください。


Identifier Terminology(識別子の用語)
************************************

<object>
     任意のタイプのオブジェクトのオブジェクト名を現します。

<blob>
     BLOBオブジェクト名を現します。

<tree>
     ツリーオブジェクト名を示します。

<commit>
     コミットオブジェクト名を示します。

<tree-ish>
     ツリーまたはコミットまたはタグオブジェクト名を示します。 <tree-ish>
     引数を取るコマンドは、最終的には <tree> オブジェクトを操作したいの
     で、 <tree> を指す <commit> オブジェクトと <tag> オブジェクトは自動
     的に逆参照(dereference)されます。(訳注: tree-ish;ツリーっぽいナニか
     の意)

<commit-ish>
     コミットまたはタグオブジェクト名を示します。 <commit-ish> 引数を取
     るコマンドは、最終的には <commit> オブジェクトを操作したいので、
     <commit> を指す <tag>オブジェクトを自動的に逆参照します。

<type>
     オブジェクトタイプが必要であることを示します。 現在、 ‘blob’ または
     ‘tree’ または ‘commit’ または ‘tag’ のいずれかです。

<file>
     ファイル名を示します。ほとんどの場合、 ‘GIT_INDEX_FILE’ が記述する
     ツリー構造のルートを基準にしています。


Symbolic Identifiers
********************

<object> を受け入れるGitコマンドでは、以下の記号表記も使用できます:

HEAD
     現在のブランチのヘッドを現します。

<tag>
     有効なタグ名(つまり ‘refs/tags/<tag>’ ref)。

<head>
     有効なhead名(つまり ‘refs/heads/<head>’ ref)。

   オブジェクト名のスペルのより完全なリストについては、 gitrevisions(7)
の「SPECIFYING REVISIONS」セクションを参照してください。


File/Directory Structure
************************

gitrepository-layout(5) 文書を参照してください。

   各フックの詳細については githooks(5) をご覧下さい。

   高レベルのSCMは、 ‘$GIT_DIR’ で追加情報を提供および管理する場合があり
ます。


Terminology(用語)
*****************

gitglossary(7) を参照してください。


Environment Variables(環境変数)
*******************************

さまざまなGitコマンドは、以下の環境変数を使用します:


The Git Repository
==================

これらの環境変数は、「すべての」コアGitコマンドに適用されます。 Nb: Gitの
上位にあるSCMSによって 使用/オーバーライド される可能性があることに注意
してください。したがって、外部のフロントエンドを使用する場合は注意が必要
です。

‘GIT_INDEX_FILE’
     この環境変数は、代替インデックスファイルを指定できます。指定しない
     場合、デフォルトの ‘$GIT_DIR/index’ が使用されます。

‘GIT_INDEX_VERSION’
     この環境変数を使用すると、新しいリポジトリのインデックスバージョン
     を指定できます。「既存のインデックスファイルには影響しません」。デ
     フォルトでは、バージョン2または3のインデックスファイルが使用されま
     す。詳細については、 git-update-index(1) を参照してください。

‘GIT_OBJECT_DIRECTORY’
     オブジェクトストレージディレクトリがこの環境変数を介して指定されて
     いる場合、 sha1 ディレクトリがその下に作成されます。それ以外の場合
     は、デフォルトの ‘$GIT_DIR/objects’ ディレクトリが使用されます。

‘GIT_ALTERNATE_OBJECT_DIRECTORIES’
     Gitオブジェクトは不変であるため、古いオブジェクトを共有の読み取り専
     用ディレクトリにアーカイブできます。この変数は、Gitオブジェクトの検
     索に使用できるGitオブジェクトディレクトリの ‘:’ で区切られた
     (Windowsでは ‘;’ で区切られた)リストを指定します。新しいオブジェク
     トはこれらのディレクトリに書き込まれません。

     ‘"’ (二重引用符;\x22)で始まるエントリは、Cスタイルの引用符で囲まれ
     たパスとして解釈され、先頭と末尾の二重引用符が削除され、バックスラ
     ッシュ(‘\' \x5c);のエスケープが尊重されます。たとえば、値
     `"path-with-\"-and-:-in-it":vanilla-path’ には
     ‘path-with-"-and-:-in-it’ と ‘vanilla-path’ の2つのパスがあります。

‘GIT_DIR’
     ‘GIT_DIR’ 環境変数が設定されている場合、リポジトリのベースにデフォ
     ルトの ‘.git’ の代わりに使用するパスを指定します。 ‘--git-dir’ コマ
     ンドラインオプションもこの値を設定します。

‘GIT_WORK_TREE’
     作業ツリーのルートへのパスを設定します。 これは、 ‘--work-tree’ コ
     マンドラインオプションと core.worktree 構成変数でも制御できます。

‘GIT_NAMESPACE’
     Git名前空間(Git namespace)を設定します。詳細については、
     gitnamespaces(7) を参照してください。 ‘--namespace’ コマンドライン
     オプションもこの値を設定します。

‘GIT_CEILING_DIRECTORIES’
     これは、コロン(‘:’)で区切られた絶対パスのリストである必要があります
     。設定されている場合、これは、リポジトリディレクトリを探すときに
     Gitがchdirを実行してはいけないディレクトリのリストです(読み込みの遅
     いネットワークディレクトリを除外する場合に便利です)。コマンドライン
     または環境で設定されている現在の作業ディレクトリまたはGIT_DIRは除外
     されません。通常、Gitはこのリストのエントリを読み取り、現在のディレ
     クトリと比較するために存在する可能性のあるシンボリックリンクを解決
     する必要があります。ただし、このアクセスが遅い場合でも、リストに空
     のエントリを追加して、後続のエントリがシンボリックリンクではなく、
     解決する必要がないことをGitに通知できます。 例:
     ‘GIT_CEILING_DIRECTORIES=/maybe/symlink::/very/slow/non/symlink’

‘GIT_DISCOVERY_ACROSS_FILESYSTEM’
     ‘.git’ リポジトリディレクトリがないディレクトリで実行すると、Gitは
     それより親のディレクトリでそのようなディレクトリを見つけて作業ツリ
     ーの最上位を見つけようとしますが、デフォルトではファイルシステムの
     境界を越えません。この環境変数をtrueに設定して、ファイルシステムの
     境界で停止しないようにGitに指示できます。 ‘GIT_CEILING_DIRECTORIES’
     と同様に、これは ‘GIT_DIR’ またはコマンドラインで設定された明示的な
     リポジトリディレクトリには影響しません。

‘GIT_COMMON_DIR’
     この変数にパスが設定されている場合、通常は $GIT_DIR にある非ワーク
     ツリーファイルが、代わりにこのパスから取得されます。HEADやインデッ
     クスなどのワークツリー固有のファイルは $GIT_DIR から取得されます。
     詳細については、 gitrepository-layout(5) と git-worktree(1) を参照
     してください。この変数は GIT_INDEX_FILE や GIT_OBJECT_DIRECTORY な
     どの他のパス変数よりも優先順位が低くなります。

‘GIT_DEFAULT_HASH’
     この変数が設定されている場合、新しいリポジトリのデフォルトのハッシ
     ュアルゴリズムはこの値に設定されます。 現在、この値はクローン作成時
     は無視され、代わりに、リモートリポジトリの設定が使用されます。デフ
     ォルトは「sha1」です。この変数は実験的です！(「THIS VARIABLE IS
     EXPERIMENTAL!」) git-init(1) の ‘--object-format’ を参照してくださ
     い。


Git Commits
===========

‘GIT_AUTHOR_NAME’
     コミットまたはタグオブジェクトを作成するとき、またはreflogを書き込
     むときに、作者IDで使用される、人間が読める名前。 ‘user.name’ と
     ‘author.name’ の構成設定を上書きします。

‘GIT_AUTHOR_EMAIL’
     コミットまたはタグオブジェクトを作成するとき、またはreflogを書き込
     むときに作者IDで使用される電子メールアドレス。 ‘user.email’ と
     ‘author.email’ の設定を上書きします。

‘GIT_AUTHOR_DATE’
     commitまたはtagオブジェクトを作成するとき、またはreflogを書き込むと
     きに作者IDに使用される日付。有効な形式については、 git-commit(1) を
     参照してください。

‘GIT_COMMITTER_NAME’
     コミットオブジェクトまたはタグオブジェクトを作成するとき、または
     reflogを書き込むときに、コミッターIDで使用される、人間が読める形式
     の名前。 ‘user.name’ と ‘committer.name’ の設定を上書きします。

‘GIT_COMMITTER_EMAIL’
     コミットまたはタグオブジェクトを作成するとき、またはreflogを書き込
     むときに作者IDで使用される電子メールアドレス。 ‘user.email’ と
     ‘committer.email’ の設定を上書きします。

‘GIT_COMMITTER_DATE’
     コミットオブジェクトまたはタグオブジェクトを作成するとき、または
     reflogを書き込むときにコミッターIDに使用される日付。有効な形式につ
     いては、 git-commit(1) を参照してください。

‘EMAIL’
     他の関連する環境変数または構成設定が設定されていない場合に、作者と
     コミッターのIDで使用される電子メールアドレス。


Git Diffs
=========

‘GIT_DIFF_OPTS’
     有効な設定は、統一された差分(unified diff)が作成されたときに表示さ
     れるコンテキスト行の数を設定するための ‘--unified=??’ または ‘-u??’
     だけです。これは、Git diff コマンドラインで渡される ‘-U’ または
     ‘--unified’ のオプション値よりも優先されます。

‘GIT_EXTERNAL_DIFF’
     環境変数 ‘GIT_EXTERNAL_DIFF’ が設定されている場合、それによって指定
     されたプログラムが呼び出されてdiffが生成され、Gitは組み込みのdiff機
     構を使用しません。 追加または削除または変更されたパスの場合、
     ‘GIT_EXTERNAL_DIFF’ は以下の7つのパラメーターで呼び出されます:

          path old-file old-hex old-mode new-file new-hex new-mode

     これは:

<old|new>-file
     GIT_EXTERNAL_DIFF が <old|new> の内容を読み取るために 使用できるフ
     ァイルです。

<old|new>-hex
     16進40桁のSHA-1ハッシュです。

<old|new>-mode
     8進数で表現されたファイルモードです。

     ファイルパラメータは、ユーザーの作業ファイル(たとえば
     "git-diff-files" の ‘new-file’ )、または ‘/dev/null’ (たとえば、新
     しいファイルが追加されたときの ‘old-file’ )、または一時ファイル(た
     とえば インデックスの ‘old-file’) を指し示す事ができます。
     ‘GIT_EXTERNAL_DIFF’ は、一時ファイルの削除(unlink)を心配する必要は
     ありません。一時ファイルは ‘GIT_EXTERNAL_DIFF’ の指定したプログラム
     の呼び出しが終了すると削除されます。

     パスがマージされていない場合、 ‘GIT_EXTERNAL_DIFF’ は1つのパラメー
     ター <path> で呼び出されます。

     パス ‘GIT_EXTERNAL_DIFF’ が呼び出されるたびに、
     ‘GIT_DIFF_PATH_COUNTER’ と ‘GIT_DIFF_PATH_TOTAL’ の2つの環境変数が
     設定されます。

‘GIT_DIFF_PATH_COUNTER’
     パスごとに1ずつインクリメントされる1で始まるカウンター。

‘GIT_DIFF_PATH_TOTAL’
     パスの総数。


other
=====

‘GIT_MERGE_VERBOSITY’
     再帰的マージ戦略(recursive merge strategy)によって表示される出力の
     量を制御する数値。 merge.verbosity をオーバーライドします。
     git-merge(1) を参照してください

‘GIT_PAGER’
     この環境変数は ‘$PAGER’ をオーバーライドします。 空の文字列または値
     "cat"に設定されている場合、Gitはページャーを起動しません。
     git-config(1) の ‘core.pager’ オプションも参照してください。

‘GIT_PROGRESS_DELAY’
     オプションの進行状況インジケーターを表示する前に遅延する秒数を制御
     する数値。デフォルトは2です。

‘GIT_EDITOR’
     この環境変数は、 ‘$EDITOR’ と ‘$VISUAL’ をオーバーライドします。イ
     ンタラクティブモードでエディタを起動するときに、いくつかのGitコマン
     ドで使用されます。 git-var(1) と git-config(1) の ‘core.editor’ オ
     プションも参照してください。

‘GIT_SEQUENCE_EDITOR’
     この環境変数は、インタラクティブリベース(interactive rebase)の
     todoリストを編集するときに、構成されたGitエディタをオーバーライドし
     ます。 git-rebase(1) と git-config(1) の ‘sequence.editor’ オプショ
     ンも参照してください。

‘GIT_SSH’
‘GIT_SSH_COMMAND’
     これらの環境変数のいずれかが設定されている場合、 _git fetch_ と
     _git push_ は、リモートシステムに接続する必要があるときに、 _ssh_ の
     代わりに指定されたコマンドを使用します。設定されたコマンドに渡され
     るコマンドラインパラメータは、 ssh.variant によって決定されます。詳
     細については、 git-config(1) の ‘ssh.variant’ オプションを参照して
     ください。

     ‘$GIT_SSH_COMMAND’ は ‘$GIT_SSH’ よりも優先され、シェルによって解釈
     されます。これにより、追加の引数を含めることができます。 一方、
     ‘$GIT_SSH’ は、プログラムへのパスである必要があります(追加の引数が
     必要な場合は、ラッパーシェルスクリプトにすることができます)。

     通常、個人の ‘.ssh/config’ ファイルを使用して必要なオプションを設定
     する方が簡単です。詳細については、あなたのお手元のsshのドキュメント
     を参照してください。

‘GIT_SSH_VARIANT’
     この環境変数が設定されている場合、 ‘GIT_SSH’ ・ ‘ GIT_SSH_COMMAND‘
     ・ ‘core.sshCommand’ が OpenSSH・plink・tortoiseplinkのいずれを参照
     しているかにかかわらず、Gitの自動検出をオーバーライドします。この変
     数は、同じ目的を果たす構成設定 ‘ssh.variant’ をオーバーライドします
     。

‘GIT_ASKPASS’
     この環境変数が設定されている場合、パスワードまたはパスフレーズを取
     得する必要があるGitコマンド(HTTPまたはIMAP認証など)は、コマンドライ
     ン引数として適切なプロンプトを使用してこのプログラムを呼び出し、そ
     のプログラムの標準出力からパスワードを読み取ります。 git-config(1)の
     ‘core.askPass’ オプションも参照してください。

‘GIT_TERMINAL_PROMPT’
     この環境変数が ‘0’ に設定されている場合、gitは端末でプロンプトを表
     示しません(たとえば、HTTP認証を要求する場合)。

‘GIT_CONFIG_GLOBAL’
‘GIT_CONFIG_SYSTEM’
     グローバルまたはシステムレベルの構成ファイルからではなく、指定され
     たファイルから構成を取得します。 ‘GIT_CONFIG_SYSTEM’ が設定されてい
     る場合、ビルド時に定義されたシステム構成ファイル(通常は
     ‘/etc/gitconfig’)は読み取られません。同様に、 ‘GIT_CONFIG_GLOBAL’ が
     設定されている場合、 ‘$HOME/.gitconfig’ も
     ‘$XDG_CONFIG_HOME/git/config’ も読み取られません。 ‘/dev/null’ に設
     定すると、それぞれのレベルの構成ファイルの読み取りをスキップできま
     す。

‘GIT_CONFIG_NOSYSTEM’
     システム全体の ‘$(prefix)/etc/gitconfig’ ファイルからの設定の読み取
     りをスキップするかどうか。 この環境変数を ‘$HOME’ や
     ‘$XDG_CONFIG_HOME’ と一緒に使用して、厄介なスクリプトの予測可能な環
     境を作成するか、または、バグのある ‘/etc/gitconfig’ ファイルを使用
     しないように一時的に設定して、十分な権限を持つ誰かが修正するのを待
     つこともできます。

‘GIT_FLUSH’
     この環境変数が ‘1’ に設定されている場合、 _git blame_ (インクリメン
     タルモード)、 _git rev-list_ 、 _git log_ 、 _git check-attr_ 、
     _git check-ignore_ などのコマンドは、 各レコードがフラッシュされた
     後に出力ストリームを強制的にフラッシュします。 この変数が ‘0’ に設
     定されている場合、 これらのコマンドの出力は、完全にバッファリングさ
     れた入出力を使用して実行されます。 この環境変数が設定されていない場
     合、 Gitは、標準出力がファイルにリダイレクトされているように見える
     かどうかに基づいて、 バッファリングするか、またはレコード指向のフラ
     ッシュを選択します。

‘GIT_TRACE’
     一般的なトレースメッセージを有効にします。例えば、エイリアス拡張や
     、組み込みコマンド実行や、外部コマンド実行 においてです。

     この変数が ‘1’ または ‘2’ または ‘true’ に設定されている場合(比較で
     は英大文字小文字は区別されません)、トレースメッセージがstderrに出力
     されます。

     変数が2より大きく10より小さい整数値(訳注:つまり 2 < 変数 < 10)に設
     定されている場合、(厳密には、)Gitはこの値を、開いているファイルデス
     クリプターとして解釈し、トレースメッセージをこのファイルデスクリプ
     ターに書き込もうとします。

     または、変数が絶対パス(’/’文字で始まる)に設定されている場合、Gitは
     これをファイルパスとして解釈し、トレースメッセージをそのファイルに
     追加しようとします。

     変数の設定を解除(unset)するか、空(empty) または ‘0’ または ‘false’
     (英大文字小文字を区別しない)に設定すると、トレースメッセージが無効
     になります。

‘GIT_TRACE_FSMONITOR’
     ファイルシステムモニター拡張機能(filesystem monitor extension)のト
     レースメッセージを有効にします。使用可能なトレース出力オプションに
     ついては、 ‘GIT_TRACE’ を参照してください。

‘GIT_TRACE_PACK_ACCESS’
     任意のパックへのすべてのアクセスに対してトレースメッセージを有効に
     します。アクセスごとに、パックファイル名とパック内のオフセットが記
     録されます。これは、パック関連のパフォーマンスの問題のトラブルシュ
     ーティングに役立つ場合があります。使用可能なトレース出力オプション
     については、 ‘GIT_TRACE’ を参照してください。

‘GIT_TRACE_PACKET’
     特定のプログラムに出入りするすべてのパケットのトレースメッセージを
     有効にします。これは、オブジェクトネゴシエーションまたはその他のプ
     ロトコルの問題のデバッグに役立ちます。 "PACK" で始まるパケットでは
     トレースがオフになります(ただし、以下の ‘GIT_TRACE_PACKFILE’ を参照
     してください)。使用可能なトレース出力オプションについては、
     ‘GIT_TRACE’ を参照してください。

‘GIT_TRACE_PACKFILE’
     特定のプログラムによって送受信されたパックファイルのトレースを有効
     にします。他のトレース出力とは異なり、このトレースは垂れ流しです。
     ヘッダーやバイナリデータの引用はありません。あなたはこれを、ファイ
     ルを端末に表示したり、他のトレース出力と混合したりするのではなく、
     ほぼ確実に、ファイル(たとえば、 ‘GIT_TRACE_PACKFILE=/tmp/my.pack’
     )に転送する必要があります。

     注意: これは現在、クローンとフェッチのクライアント側にのみ実装され
     ていることに注意してください。

‘GIT_TRACE_PERFORMANCE’
     パフォーマンス関連のトレースメッセージを有効にします。例えば、各
     Gitコマンドの合計実行時間です。使用可能なトレース出力オプションにつ
     いては、 ‘GIT_TRACE’ を参照してください。

‘GIT_TRACE_REFS’
     refデータベースでの操作のトレースメッセージを有効にします。使用可能
     なトレース出力オプションについては、 ‘GIT_TRACE’ を参照してください
     。

‘GIT_TRACE_SETUP’
     Gitがセットアップフェーズを完了した後、‘.git’ と作業ツリーと現在の
     作業ディレクトリを出力するトレースメッセージを有効にします。使用可
     能なトレース出力オプションについては、 ‘GIT_TRACE’ を参照してくださ
     い。

‘GIT_TRACE_SHALLOW’
     浅い(shallow)リポジトリの フェッチ/クローン のデバッグに役立つトレ
     ースメッセージを有効にします。使用可能なトレース出力オプションにつ
     いては、 ‘GIT_TRACE’ を参照してください。

‘GIT_TRACE_CURL’
     gitトランスポートプロトコルのすべての着信および発信データ
     (descriptive information;説明情報を含む)のcurlフルトレースダンプを
     有効にします。これは、コマンドラインで curl ‘--trace-ascii’ を実行
     するのと似ています。使用可能なトレース出力オプションについては、
     ‘GIT_TRACE’ を参照してください。

‘GIT_TRACE_CURL_NO_DATA’
     curlトレースが有効になっている場合(上記の ‘GIT_TRACE_CURL’ を参照
     )、データをダンプしないでください(つまり、情報行とヘッダー(info
     lines and headers)のみをダンプします)。

‘GIT_TRACE2’
     「trace2」ライブラリからのより詳細なトレースメッセージを有効にしま
     す。 ‘GIT_TRACE2’ からの出力は、人間が読みやすいように単純なテキス
     トベースの形式です。

     この変数が ‘1’ または ‘2’ または ‘true’ に設定されている場合(比較で
     は英大文字小文字は区別されません)、トレースメッセージがstderrに出力
     されます。

     変数が2より大きく10より小さい整数値(訳注:つまり 2 < 変数 < 10)に設
     定されている場合、(厳密には、)Gitはこの値を、開いているファイルデス
     クリプターとして解釈し、トレースメッセージをこのファイルデスクリプ
     ターに書き込もうとします。

     あるいは、変数が絶対パス(‘/‘文字で始まる)に設定されている場合、
     Gitはこれをファイルパスとして解釈し、トレースメッセージをそのファイ
     ルに追加しようとします。パスがすでに存在し、ディレクトリである場合
     、トレースメッセージは、SIDの最後のコンポーネントと(ファイル名の衝
     突を回避するための)オプションのカウンタに従って名前が付けられた、そ
     のディレクトリ内のファイル(プロセスごとに1つ)に書き込まれます。

     加えて、変数が ‘af_unix:[<socket_type>:]<absolute-pathname>’ に設定
     されている場合、GitはパスをUnixドメインソケットとして開こうとします
     。ソケットタイプは、 ‘stream’ または ‘dgram’ のいずれかです。

     変数の設定を解除(unset)するか、空(empty) または ‘0’ または ‘false’
     (英大文字小文字を区別しない)に設定すると、トレースメッセージが無効
     になります。

     完全な詳細については Trace2 documentation
     (technical/api-trace2.html) を参照してください。

‘GIT_TRACE2_EVENT’
     この設定は、ソフトウェア処理(machine interpretation)に適したJSONベ
     ースの形式で書き込みます。利用可能なトレース出力オプションについて
     は ‘GIT_TRACE2’ を、詳細については Trace2 documentation
     (technical/api-trace2.html) を参照してください。

‘GIT_TRACE2_PERF’
     ‘GIT_TRACE2’ で利用可能なテキストベースのメッセージに加えて、この設
     定はネスト領域(nesting regions)を理解するための列ベース
     (column-based)のフォーマットを書き込みます。利用可能なトレース出力
     オプションについては ‘GIT_TRACE2’ を、完全な詳細については Trace2
     documentation (technical/api-trace2.html) を参照してください。

‘GIT_TRACE_REDACT’
     デフォルトでは、トレースがアクティブ化されると、Gitはクッキーと「
     Authorization:」ヘッダーと「Proxy-Authorization:」ヘッダーの値を編
     集します。この編集を防ぐには、この変数を ‘0’ に設定します。

‘GIT_LITERAL_PATHSPECS’
     この変数を ‘1’ に設定すると、Gitはすべてのパススペックをグロブパタ
     ーンとしてではなく文字通りに処理します。たとえば、
     ‘GIT_LITERAL_PATHSPECS=1 git log -- '*.c'’ を実行すると、グロブ
     ‘*.c’ が一致するパスではなく、パス ‘*.c’ に接触するコミットが検索さ
     れます。リテラルパスをGitにフィードする場合(たとえば、以前に ‘git
     ls-tree’ や ‘--raw’ diff output などによって与えられたパス)にこれが
     必要になる場合があります。

‘GIT_GLOB_PATHSPECS’
     この変数を ‘1’ に設定すると、Gitはすべてのパススペックをグロブパタ
     ーン(別名 グロブマジック(glob magic))として扱います。

‘GIT_NOGLOB_PATHSPECS’
     この変数を ‘1’ に設定すると、Gitはすべてのパススペックをリテラル(別
     名 リテラルマジック(literal magic))として扱います。

‘GIT_ICASE_PATHSPECS’
     この変数を ‘1’ に設定すると、Gitはすべてのパススペックの英大文字小
     文字を区別しないものとして扱います。

‘GIT_REFLOG_ACTION’
     refが更新されると、reflogエントリが作成され、refの新旧の値に加えて
     、refが更新された理由(通常はrefを更新した高レベルコマンドの名前)を
     追跡します。スクリプト化された磁器コマンドは、 ‘git-sh-setup’ の
     set_reflog_actionヘルパー関数を使用して、エンドユーザーがトップレベ
     ルコマンドとして呼び出したときにその名前をこの変数に設定して、
     reflogの本文(body)に記録できます。

‘GIT_REF_PARANOIA’
     ‘1’ に設定されている場合、refのリストを反復処理するときに、壊れた、
     または名前の悪いrefを含めます。通常の破損していないリポジトリでは、
     これは何もしません。ただし、これを有効にすると、refが壊れている場合
     にgitが一部の操作を検出して中止するのに役立つ場合があります。 Gitは
     、 git-prune(1) のような破壊的な操作を実行するときに、この変数を自
     動的に設定します。あなたが、操作がすべてのrefに影響を与えていること
     を確認したい場合(たとえば、バックアップを作成するためにリポジトリの
     クローンを作成しているため)を除いて、あなた自身で設定する必要はあり
     ません。

‘GIT_ALLOW_PROTOCOL’
     コロン(‘:’)で区切られたプロトコルのリストが設定されている場合、
     ‘protocol.allow’ が ‘never’ に設定され、リストされた各プロトコルで
     は、 ‘protocol.<name>.allow’ が ‘always’ に設定されているかのように
     振る舞います(既存の構成をオーバーライドします)。言い換えると、言及
     されていないプロトコルは許可されません(つまり、これはホワイトリスト
     であり、ブラックリストではありません)。詳細については、
     git-config(1) の ‘protocol.allow’ の説明を参照してください。

‘GIT_PROTOCOL_FROM_USER’
     ‘user’ 状態に構成されている fetch/push/clone によって使用されるプロ
     トコルを妨げるには、 ‘0’ に設定します。これは、信頼できないリポジト
     リからの再帰的なサブモジュールの初期化を制限したり、信頼できない可
     能性のあるURLをgitコマンドにフィードするプログラムに役立ちます。詳
     細については、 git-config(1) を参照してください。

‘GIT_PROTOCOL’
     内部使用のみ。ワイヤープロトコルのハンドシェイクで使用されます。オ
     プションで値 _key[=value]_ を持つ、 コロン(_:_)で区切られたリストを
     含んでいます。不明なキーと値は無視する必要があります。

     注意:この変数が一部のトランスポートを通過できるようにサーバーを構成
     する必要がある場合があることに注意してください。ローカルリポジトリ
     (つまり、 ‘file://’ またはファイルシステムパス)にアクセスするとき、
     および ‘git://’ プロトコルを介して自動的に伝播されます。
     git-over-http の場合、ほとんどの構成で自動的に機能するはずですが、
     git-http-backend(1) の説明を参照してください。 git-over-ssh の場合
     、クライアントがこの変数を渡すことができるようにsshサーバーを構成す
     る必要がある場合があります(たとえば、OpenSSHで ‘AcceptEnv
     GIT_PROTOCOL’ を使用することにより)。

     この構成はオプションです。変数が伝播されない場合、クライアントは元
     の "v0" プロトコルにフォールバックします(ただし、パフォーマンスの向
     上や機能の一部を見逃す可能性があります)。この変数は現在、cloneと
     fetchにのみ影響します。pushにはまだ使用されていません(ただし、将来
     的に使用される可能性があります)。

‘GIT_OPTIONAL_LOCKS’
     ‘0’ に設定すると、Gitは、ロックを取得する必要のあるオプションのサブ
     操作を実行せずに、要求された操作を完了します。たとえば、これにより
     、‘git status’ が副作用としてインデックスを更新するのを防ぐことがで
     きます。これは、リポジトリ上の他の操作とのロック競合を引き起こした
     くない、バックグラウンドで実行されているプロセスに役立ちます。デフ
     ォルトは ‘1’ です。

‘GIT_REDIRECT_STDIN’
‘GIT_REDIRECT_STDOUT’
‘GIT_REDIRECT_STDERR’
     Windowsのみ: 標準の入力/出力/エラーハンドルを環境変数で指定されたパ
     スにリダイレクトできるようにします。これは、 ‘CreateProcess()’ を介
     して標準ハンドルを渡す標準的な方法がオプションではないマルチスレッ
     ドアプリケーションで特に役立ちます。これは、ハンドルを継承可能とし
     てマークする必要があるためです(したがって、生成された「すべて」のプ
     ロセスがそれらを継承し、通常のGit操作をブロックする可能性があります
     )。主な使用目的は、通信に名前付きパイプを使用することです(例:
     ‘\\.\pipe\my-git-stdin-123’)。

     2つの特別な値がサポートされています。‘off’ は対応する標準ハンドルを
     閉じるだけです。そして、 ‘GIT_REDIRECT_STDERR’ が ‘2>&1’ の場合、標
     準エラーは標準出力と同じハンドルにリダイレクトされます。

‘GIT_PRINT_SHA1_ELLIPSIS’ (deprecated)
     (非推奨): ‘yes’ に設定されている場合、(省略形の)SHA-1値の後に省略記
     号を出力します。これは、切り離されたHEAD(detached HEAD)の表示
     (git-checkout(1))と生のdiff出力(git-diff(1))に影響します。上記の場
     合に省略記号を印刷することはもはや適切であるとは見なされておらず、
     そのサポートは(この変数と一緒に)近い将来削除される可能性があります
     。


Discussion
**********

以下の詳細については、 Git concepts chapter of the user-manual
(user-manual.html#git-concepts) および gitcore-tutorial(7) から入手でき
ます。

   Gitプロジェクトは通常、最上位に ‘.git’ サブディレクトリがある作業ディ
レクトリで構成されます。 ‘.git’ ディレクトリには、プロジェクトの完全な履
歴を表す圧縮オブジェクトデータベース、その履歴を作業ツリーの現在のコンテ
ンツにリンクする「インデックス」ファイル、タグやブランチヘッドなど、その
履歴への名前付きポインタが含まれています。

   オブジェクトデータベースには、主に3つのタイプのオブジェクトが含まれて
います。ファイルデータを保持するブロブ(blob)。ディレクトリ階層を構築する
ためのブロブやその他のツリーを指すツリー(tree)。そしてコミット(commit)は
、それぞれが単一のツリーといくつかの親コミットを参照します。

   コミットは、他のシステムが「チェンジセット」または「バージョン」と呼
ぶものと同等であり、プロジェクトの履歴のステップを表し、各親は直前のステ
ップを表します。複数の親とのコミットは、それぞれ独立していた開発ラインの
統合(マージ;merge)を表します。

   すべてのオブジェクトは、その内容のSHA-1ハッシュによって名前が付けられ
、通常は40桁の16進数の文字列として記述されます。このような名前はグローバ
ルに一意です。コミットに至るまでの履歴全体は、そのコミットだけに署名する
ことで保証できます。この目的のために、4番目のオブジェクトタイプであるタ
グ(tag)が提供されます。

   最初に作成されたとき、オブジェクトは個々のファイルに保存されますが、
効率を上げるために、後で「パックファイル」にまとめて圧縮される場合があり
ます。

   ref(refs)と呼ばれる名前付きポインターは、履歴の中で興味深い点を指し示
しています。refには、オブジェクトのSHA-1名または別のrefの名前を含めるこ
とができます。名前が ‘ref/head/’ で始まるrefには、開発中のブランチの最新
のコミット(または「head」)のSHA-1名が含まれます。対象のタグのSHA-1名は、
‘ref/tags/’ の下に保存されます。 ‘HEAD’ という名前の特別な参照には、現在
チェックアウトされているブランチの名前が含まれています。

   インデックスファイルは、すべてのパスのリストと、パスごとのブロブオブ
ジェクトと属性のセットで初期化されます。ブロブオブジェクトは、現在のブラ
ンチの先端にあるファイルの内容を表します。属性(最終変更時刻、サイズなど
)は、作業ツリー内の対応するファイルから取得されます。作業ツリーへのその
後の変更は、これらの属性を比較することで見つけることができます。インデッ
クスは新しいコンテンツで更新される可能性があり、新しいコミットはインデッ
クスに保存されているコンテンツから作成される可能性があります。

   インデックスは、特定のパス名の複数のエントリ(「ステージ」と呼ばれる
)を格納することもできます。これらのステージは、マージの進行中に、マージ
されていないさまざまなバージョンのファイルを保持するために使用されます。


FURTHER DOCUMENTATION
*********************

Gitの使用を開始するには、「description」セクションのリファレンスを参照し
てください。 以下は、初めてのユーザーにとっては、おそらく必要以上に詳細
です。

   Git concepts chapter of the user-manual
(user-manual.html#git-concepts) と gitcore-tutorial(7) はどちらも、基盤
となるGitアーキテクチャの概要を示しています。

   おすすめの作業手順の概要については gitworkflows(7) を参照してください
。

   いくつかの便利な実例について howto (howto-index.html) 文書もご覧下さ
い。

   Git内部については Git API documentation (technical/api-index.html) に
記載されています。

   CVSから移行するユーザーには gitcvs-migration(7) も読んで欲しいです。


Authors
*******

GitはLinus Torvalds(リーナス トーバルズ)によって開始され、現在はJunio C
Hamano(濱野 純)によって保守されています。Gitメーリングリスト
<git@vger.kernel.org (mailto:git@vger.kernel.org)> から多くの貢献があり
ました。 http://www.openhub.net/p/git/contributors/summary
(http://www.openhub.net/p/git/contributors/summary) は、貢献者のより完全
なリストを提供します。

   あなたが git.git 自体のクローンを持っている場合、 git-shortlog(1) と
git-blame(1) の出力は、プロジェクトの特定の部分の作者を表示することがで
きます。


Reporting Bugs
**************

開発とメンテナンスが主に行われるGitメーリングリスト <git@vger.kernel.org
(mailto:git@vger.kernel.org)> にバグを報告してください。そこにメッセージ
を送信するためにリストに登録する必要はありません。以前のバグレポートやそ
の他の議論については、 https://lore.kernel.org/git
(https://lore.kernel.org/git) メーリングリストアーカイブを参照してくださ
い。

   セキュリティに関連する問題は、Gitセキュリティメーリングリスト
<git-security@googlegroups.com (mailto:git-security@googlegroups.com)> に
非公開で投稿する必要があります。


SEE ALSO
********

gittutorial(7), gittutorial-2(7), giteveryday(7), gitcvs-migration(7),
gitglossary(7), gitcore-tutorial(7), gitcli(7), The Git User’s Manual
(user-manual.html), gitworkflows(7)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: gitattributes,  Up: Top

Name
****

gitattributes — パスごとの属性の定義


Synopsis
********

$GIT_DIR/info/attributes, .gitattributes


DESCRIPTION
***********

‘gitattributes’ ファイルは、パス名に属性(attributes)を与える単純なテキス
トファイルです。

   ‘gitattributes’ ファイルの各行は以下の形式です:

     pattern attr1 attr2 ...

   つまり、パターンの後に空白(whitespaces)で区切られた属性リストが続きま
す。先頭と末尾の空白は無視されます。 _#_ で始まる行は無視されます。 二重
引用符(‘"’)で始まるパターンは、Cスタイルでクォートされます。パターンが問
題のパスと一致すると、その行にリストされている属性がそのパスに与えられま
す。

   各属性は、特定のパスに対して以下のいずれかの状態になる可能性がありま
す:

set(設定)
     パスには、特別な値 ‘true’ を持つ属性があります。これは、属性リスト
     にその属性の名前のみをリストすることによって指定されます。

unset(設定解除)
     パスには、特別な値 ‘false’ を持つ属性があります。 これは、属性リス
     トにダッシュ ‘-’ で始まる属性の名前をリストすることによって指定され
     ます。

Set to a value(値を設定)
     パスには、指定の文字列値を持つ属性があります。これは、属性の名前の
     後に等号 ‘=’ とその値を、属性リストにリストすることによって指定され
     ます。

unspecified(未指定)
     パスに一致するパターンはなく、パスに属性があるかどうかはわかりませ
     ん。パスの属性は未指定(unspecified)であると言われます。

   複数のパターンがパスに一致する場合、後の行が前の行をオーバーライドし
ます。このオーバーライドは属性ごとに行われます。

   パターンがパスと一致するルールは、以下のいくつかの例外を除いて、
‘.gitignore’ ファイル(gitignore(5) 参照)と同じです:

   • 否定パターンは使えません

   • ディレクトリに一致するパターンは、そのディレクトリ内のパスに再帰的
     に一致しません(したがって、属性ファイルで末尾のスラッシュの ‘path/’
     構文を使用しても意味がありません。代わりに ‘path/**’ を使用してくだ
     さい)

   パスに割り当てる属性を決定するとき、Gitは、(優先順位が最も高い)
‘$GIT_DIR/info/attributes’ ファイルと、問題のパスと同じディレクトリにあ
る ‘.gitattributes’ ファイルと、作業ツリーの最上位までその親ディレクトリ
を参照します(‘.gitattributes’ を含むディレクトリが問題のパスから離れるほ
ど、優先順位は低くなります)。最後に、(優先順位が最も低い)グローバルファ
イルとシステム全体のファイルが考慮されます。

   ‘.gitattributes’ ファイルが作業ツリーにない場合、インデックス内のパス
がフォールバックとして使用されます。チェックアウト処理では、インデックス
の ‘.gitattributes’ が使用され、作業ツリーのファイルがフォールバックとし
て使用されます。

   単一のリポジトリのみに影響を与えたい(つまり、そのリポジトリの1人のユ
ーザーのワークフローに固有のファイルに属性を割り当てる)場合は、属性を
‘$GIT_DIR/info/attributes’ ファイルに配置する必要があります。バージョン
管理して他のリポジトリに配布する必要がある属性(つまり、すべてのユーザー
が関心を持つ属性)は、 ‘.gitattributes’ ファイルに入れる必要があります
(git-config(1) を参照)。 あるユーザーのすべてのリポジトリに影響を与える
属性は、 ‘core.attributesFile’ 構成オプションで指定されたファイルに配置
する必要があり、そのデフォルト値は $XDG_CONFIG_HOME/git/attributes です
。 $XDG_CONFIG_HOME が設定されていないか空の場合、代わりに
$HOME/.config/git/attributes が使用されます。システム上のすべてのユーザ
ーの属性は、 ‘$(prefix)/etc/gitattributes’ ファイルに配置する必要があり
ます。

   しばしばあなたは、 Unspecified(未指定)状態へのパスの属性の設定をオー
バーライドする必要があります。これは、感嘆符 ‘!’ が前に付いた属性の名前
をリストすることで行えます。


EFFECTS
*******

Gitによる特定の操作は、特定の属性をパスに割り当てることによって影響を受
ける可能性があります。 現在、以下の操作は属性対応(attributes-aware)です
。


Checking-out and checking-in
============================

これらの属性は、 ‘git switch’ や ‘git checkout’ や ‘git merge’ などのコ
マンドが実行されたときに、リポジトリに保存されているコンテンツが作業ツリ
ーファイルにコピーされる方法に影響します。 また、Gitが ‘git add’ や ‘git
commit’ する時に準備したコンテンツをリポジトリの作業ツリーに保存する方法
にも影響します。


text
----

この属性は、行末の正規化を有効にして制御します。テキストファイルが正規化
されると、その行末はリポジトリ内でLFに変換されます。作業ディレクトリ内で
使用される行末スタイルを制御するには、単一のファイルには ‘eol’ 属性を使
用し、すべてのテキストファイルには ‘core.eol’ 構成変数を使用します。
‘core.autocrlf’ を ‘true’ または ‘input’ に設定すると、 ‘core.eol’ がオ
ーバーライドされることに注意してください(git-config(1) のこれらのオプシ
ョンの定義を参照してください)。

set(設定)
     パスに ‘text’ 属性を設定すると、行末の正規化が有効になり、パスがテ
     キストファイルとしてマークされます。行末変換は、コンテンツタイプを
     推測せずに行われます。

unset(設定解除)
     パスの ‘text’ 属性を設定解除(unset)すると、チェックインまたはチェッ
     クアウト時に行末変換を試行しないようにGitに指示します。

Set to string value "auto"
     ‘text’ の値が "auto" に設定されている場合、パスは自動行末変換用にマ
     ークされます。Gitがコンテンツがテキストであると判断した場合、その行
     末はチェックイン時にLFに変換されます。ファイルがCRLFでコミットされ
     ている場合、変換は行われません。

unspecified(未指定)
     ‘text’ 属性が指定されていない場合、Gitは ‘core.autocrlf’ 構成変数を
     使用してファイルを変換する必要があるかどうかを判断します。

   その他の値の場合、Gitは ‘text’ が未指定(unspecified)であるかのように
動作します。


eol
---

この属性は、作業ディレクトリ内で使用される特定の行末スタイルを設定します
。コンテンツチェックなしで行末変換を可能にし、‘text’ 属性を効果的に設定
します。インデックスにあるCRLF行末のパスにこの属性を設定すると、パスがダ
ーティと見なされる可能性があることに注意してください。インデックスにパス
を再度追加すると、インデックスの行末が正規化されます。

文字列値 "crlf" を設定
     この設定により、Gitはチェックイン時にこのファイルの行末を正規化し、
     ファイルがチェックアウトされるときにCRLFに変換します。

文字列値 "lf" を設定
     この設定により、Gitはチェックイン時に行末をLFに正規化し、ファイルが
     チェックアウトされたときにCRLFに変換されないようにします。


crlf 属性との下位互換性
-----------------------

下位互換性のために、 ‘crlf’ 属性は以下のように解釈されます:

     crlf            text
     -crlf           -text
     crlf=input      eol=lf


行末変換
--------

Gitは通常、ファイルの内容をそのままにしますが、リポジトリ内で行末をLFに
正規化し、オプションで、ファイルがチェックアウトされたときにCRLFに変換す
るように構成できます。

   あなたが作業しているリポジトリに関係なく、あなたの作業ディレクトリ内
でCRLF行末を設定したいだけの場合は、属性を使用せずに構成変数
‘core.autocrlf’ を設定できます。

     [core]
             autocrlf = true

   これにより、テキストファイルの正規化は強制されませんが、リポジトリに
導入するテキストファイルの行末は、追加時にLFに正規化され、リポジトリです
でに正規化されているファイルは正規化されたままになります。

   貢献者(contributor)がリポジトリに導入するテキストファイルの行末が正規
化されていることを確認する場合は、「全て」のファイルに対して ‘text’ 属性
を "auto" に設定できます。

     *       text=auto

   属性を使用すると、行末の変換方法をきめ細かく制御できます。以下は、
Gitが ‘.txt’ と、‘.vcproj’ と ‘.sh’ ファイルを正規化し、 ‘.vcproj’ ファ
イルがCRLFを持ち、 ‘.sh’ ファイルが作業ディレクトリでLFを持っていること
を確認し、‘.jpg’ ファイルがその内容に関係なく正規化されないようにする例
です。

     *               text=auto
     *.txt           text
     *.vcproj        text eol=crlf
     *.sh            text eol=lf
     *.jpg           -text

     *Note*

     中央リポジトリへのプッシュとプルを使用してクロスプラットフォームプ
     ロジェクトで ‘text = auto’ 変換が有効になっている場合、CRLFを含むテ
     キストファイルを正規化する必要があります。

   クリーンな作業ディレクトリから始めます:

     $ echo "* text=auto" >.gitattributes
     $ git add --renormalize .
     $ git status        # 正規化されるファイルを表示
     $ git commit -m "Introduce end-of-line normalization"

   正規化してはならないファイルが ‘git status’ に表示される場合は、 ‘git
add -u’ を実行する前に、以下のように ‘text’ 属性の設定を解除してください
。

     manual.pdf      -text

   逆に、Gitが検出しないテキストファイルは、以下のように正規化を手動で有
効にすることができます。

     weirdchars.txt  text

   ‘core.safecrlf’ が "true" または "warn" に設定されている場合、Gitは変
換が ‘core.autocrlf’ の現在の設定に対して可逆的であるかどうかを確認しま
す。 "true" の場合、Gitは不可逆的な変換を拒否します。 "warn" の場合、
Gitは警告を出力するだけで、元に戻せない変換を受け入れます。作業ツリー内
のファイルに対してこのような変換が行われるのを防ぐための安全トリガーがあ
りますが、いくつかの例外がありますが、しかし…

   • _git add_ 自体は作業ツリー内のファイルに影響を与えません。その次に
     行うチェックアウトは影響を与えるため、セーフティーがトリガーされま
     す:

   • パッチでテキストファイルを更新するための ‘git apply’ は作業ツリー内
     のファイルに影響を与えますが、操作はテキストファイルに関するもので
     あり、CRLF変換は行末の不整合の修正に関するものであるため、セーフテ
     ィーはトリガーされません。

   • ‘git diff’ 自体は作業ツリー内のファイルに影響を与えません。多くの場
     合、次に ‘git add’ する予定の変更を検査するために実行されます。潜在
     的な問題を早期に発見するために、セーフティーがトリガーされます。


working-tree-encoding
---------------------

Gitは、ASCIIまたはそのスーパーセットの1つ(UTF-8、ISO-8859-1など)でエンコ
ードされたファイルをテキストファイルとして認識します。他の特定のエンコー
ディング(UTF-16など)でエンコードされたファイルはバイナリとして解釈される
ため、組み込みのGitテキスト処理ツール(‘git diff’ など)や、ほとんどの
GitWebフロントエンドはデフォルトでこれらのファイルのコンテンツを視覚化し
ません 。

   このような場合、 ‘working-tree-encoding’ 属性を使用して作業ディレクト
リ内のファイルのエンコーディングをGitに指示できます。この属性を持つファ
イルがGitに追加されると、Gitは指定されたエンコーディングからUTF-8にコン
テンツを再エンコードします。最後に、GitはUTF-8でエンコードされたコンテン
ツを内部データ構造(「インデックス」と呼ばれます)に格納します。チェックア
ウト時に、コンテンツは指定されたエンコーディングに再エンコードされます。

   注意: ‘working-tree-encoding’ 属性を使用すると、いくつかの落とし穴が
あることに注意してください:

   • (2018年3月現在、)代替のGit実装(JGitやlibgit2など)やGit古いバージョ
     ンは、 ‘working-tree-encoding’ 属性をサポートしていません。リポジト
     リで ‘working-tree-encoding’ 属性を使用する場合は、リポジトリを使用
     するすべてのクライアントがそれをサポートしていることを確認すること
     を強くお勧めします。

     たとえば、Microsoft Visual Studio リソースファイル(‘*.rc’)または
     PowerShellスクリプトファイル(‘*.ps1’)は、UTF-16でエンコードされる場
     合があります。 ‘*.ps1’ をUTF-16のファイルとして宣言し、
     ‘working-tree-encoding’ が有効なGitクライアントで ‘foo.ps1’ を追加
     すると、 ‘foo.ps1’ はUTF-8として内部に保存されます。
     ‘working-tree-encoding’ をサポートしていないクライアントは、
     ‘foo.ps1’ をUTF-8でエンコードされたファイルとしてチェックアウトしま
     す。これは通常、このファイルのユーザーに問題を引き起こします。

     ‘working-tree-encoding’ 属性をサポートしないGitクライアントが新しい
     ファイル ‘bar.ps1’ を追加した場合、 ‘bar.ps1`は内部に「現状のまま」
     (この例ではおそらくUTF-16として)保存されます。そしてそれに対して、
     `working-tree-encoding’ をサポートするクライアントは、内部コンテン
     ツをUTF-8として解釈し、チェックアウト時にUTF-16に変換しようとします
     。その操作は失敗し、エラーが発生します。

   • コンテンツを非UTFエンコーディングに再エンコードすると、変換が
     UTF-8ラウンドトリップセーフではない可能性があるため、エラーが発生す
     る可能性があります。 エンコーディングがラウンドトリップセーフではな
     いと思われる場合は、それを ‘core.checkRoundtripEncoding’ に追加して
     、Gitにラウンドトリップエンコーディングをチェックさせます
     (git-config(1) を参照)。 SHIFT-JIS(日本語文字セット)はUTF-8でラウン
     ドトリップ問題があることが知られており、デフォルトでチェックされて
     います。

   • コンテンツを再エンコードするには、計算機資源が必要なため、特定の
     Git操作(‘git checkout’ や ‘git add’ など)の速度を低下させる可能性が
     あります。

   ‘working-tree-encoding’ 属性は、ファイルをUTF-8エンコーディングで保存
できない場合や、Gitでコンテンツをテキストとして処理できるようにする場合
にのみ使用してください。

   例として、 あなたの _*.ps1_ ファイルがバイトオーダーマーク(BOM)付きで
UTF-16エンコードされており、Gitであなたのプラットフォームに基づいて自動
行末変換を実行する場合、以下の属性を使用します。

     *.ps1           text working-tree-encoding=UTF-16

   あなたの _* .ps1_ ファイルがBOMなしでUTF-16リトルエンディアンでエンコ
ードされており、Gitで作業ディレクトリのWindows行末を使用する場合は、以下
の属性を使用します(BOMを使用したUTF-16リトルエンディアンが必要な場合、
‘UTF-16LE’ の代わりに ‘UTF-16LE-BOM’ を使用します)。あいまいさを避けるた
めに ‘working-tree-encoding’ 属性を使用する場合は、行末を ‘eol’ で明示的
に定義することを強くお勧めします。

     *.ps1           text working-tree-encoding=UTF-16LE eol=CRLF

   あなたは以下のコマンドを使用して、あなたのプラットフォームで使用可能
なすべてのエンコーディングのリストを取得できます:

     iconv --list

   ファイルのエンコーディングがわからない場合、あなたは ‘file’ コマンド
を使用してエンコーディングを推測できます:

     file foo.ps1


ident
-----

パスに属性 ‘ident’ が設定されている場合、Gitはチェックアウト時にブロブオ
ブジェクト内の ‘$Id$’ を ‘$Id:’ に置き換え、その後に40文字の16進ブロブオ
ブジェクト名が続き、その後にドル記号 ‘$’ が続きます。ワークツリーファイ
ルで ‘$Id:’ で始まり、 ‘$’ で終わるバイトシーケンスは、チェックイン時に
‘$Id$’ に置き換えられます。


filter
------

filter‘ 属性には、構成で指定されたフィルタドライバの名前を文字列で指定す
ることができます。

   フィルタドライバは、 ‘clean’ コマンドと ‘smudge’ コマンドで構成されて
おり、どちらも指定しないでおくことができます。チェックアウト時に、
‘smudge’ コマンドが指定されると、コマンドはその標準入力からブロブオブジ
ェクトを供給され、その標準出力はワークツリーファイルを更新するために使用
されます。同様に、 ‘clean’ コマンドはチェックイン時にワークツリーファイ
ルの内容を変換するために使用されます。デフォルトでは、これらのコマンドは
単一のブロブのみを処理して終了します。長時間実行される ‘process’ フィル
ターが ‘clean’ および/または ‘smudge’ フィルターの代わりに使用される場合
、Gitは単一のGitコマンドの存続期間中、単一のフィルターコマンド呼び出しで
すべてのブロブを処理できます。例えば ‘git --all’ を追加します。長時間実
行される ‘process’ フィルターが構成されている場合、構成された単一のブロ
ブフィルターよりも常に優先されます。 ‘process’ フィルターとの通信に使用
されるプロトコルの説明については、以下のセクションを参照してください。

   コンテンツフィルタリングの用途の1つは、プラットフォームやファイルシス
テムやユーザーが使用しやすい形にコンテンツをもみもみ(massage)することで
す。この操作モードでは、ここでのキーワードは「より便利」であり、「使用で
きないものを使用可能にする」ではありません。 つまり、誰かがフィルタード
ライバーの定義を設定解除した場合、または適切なフィルタープログラムを持っ
ていない場合でも、プロジェクトは引き続き使用可能である必要があります。

   コンテンツフィルタリングのもう1つの用途は、リポジトリに直接使用できな
いコンテンツ(Gitの外部に保存されている実際のコンテンツを参照するUUIDや暗
号化されたコンテンツなど)を保存し、チェックアウト時に使用可能な形式に変
換することです(例: 外部コンテンツをダウンロードする、または暗号化された
コンテンツを復号化する)。

   これらの2つのフィルターの振る舞い異なり、デフォルトでは、フィルターは
前者と見なされ、コンテンツをより便利な形にもみもみ(massage)します。構成
にフィルタードライバー定義がないか、ゼロ以外のステータスで終了するフィル
タードライバーはエラーではありませんが、フィルターを無操作パススルーにし
ます。

   filter.<driver>.required 構成変数を ‘true’ に設定することにより、フィ
ルター自体が使用できないコンテンツを使用可能なコンテンツに変換することを
宣言できます。

   注意: clean フィルターを変更するたびに、リポジトリを再正規化する必要
があります: $ git add –renormalize

   たとえば、 ‘.gitattributes’ で、あなたはパスに ‘filter’ 属性を割り当
てるとします。

     *.c     filter=indent

   次に、あなたは以下のように ‘.git/config’ で ‘filter.indent.clean’ と
‘filter.indent.smudge’ 構成を定義して、ソースファイルがチェックインされ
たとき(‘clean’ が実行されます)と、チェックアウトされたとき(コマンドが
‘cat’ であるため、変更は行われません)、にCプログラムの内容を変更するコマ
ンドのペアを指定します。

     [filter "indent"]
             clean = indent
             smudge = cat

   最良の結果を得るには、 ‘clean’ を2回実行しても出力を変更しないでくだ
さい("clean→clean" は "clean" と同等である必要があります)。また、複数の
‘smudge’ コマンドで ‘clean’ の出力を変更しないでください
("smudge→smudge→clean" は "clean” と同等である必要があります)。 以下の
mergingセクションを参照してください。

   "indent" フィルターは、この点で適切に動作します。すでに正しくインデン
トされている入力は変更されません。この場合、smudgeフィルターがないという
ことは、cleanフィルターが自身の出力を変更せずに受け入れる必要があること
を意味します。

   保存されたコンテンツを使用可能にするためにフィルターが成功する必要が
ある場合は、構成でフィルターが ‘required’ (必須)であることを宣言できます
:

     [filter "crypt"]
             clean = openssl enc ...
             smudge = openssl enc -d ...
             required

   フィルタコマンドラインのシーケンス ‘%f’ は、フィルタが機能しているフ
ァイルの名前に置き換えられます。フィルタはこれをキーワード置換で使用する
場合があります。例えば:

     [filter "p4"]
             clean = git-p4-filter --clean %f
             smudge = git-p4-filter --smudge %f

   注意: ‘%f’ は、作業中のパスの名前であることに注意してください。フィル
タリングされているバージョンによっては、ディスク上の対応するファイルが存
在しないか、内容が異なる場合があります。したがって、smudgeおよびcleanコ
マンドは、ディスク上のファイルにアクセスしようとするのではなく、標準入力
で提供されるコンテンツのフィルターとしてのみ機能する必要があります。


Long Running Filter Process
---------------------------

フィルタコマンド(文字列値)が ‘filter.<driver>.process’ を介して定義され
ている場合、Gitは単一のGitコマンドの存続期間中、単一のフィルタ呼び出しで
すべてのブロブを処理できます。 これは、長時間実行プロセスプロトコル(
technical/long-running-process-protocol.txt にて説明)を使用して実現され
ます。

   Gitは、クリーニング(cleaned)またはスマッジング(smudged)が必要な最初の
ファイルを検出すると、フィルターを開始してハンドシェイクを実行します。ハ
ンドシェイクでは、Gitによって送信されるウェルカムメッセージは
"git-filter-client" であり、プロトコルバージョン2("version=2")のみがサポ
ートされ、サポートされる機能は "clean" と "smudge" と ”delay" です。

   その後、Gitはフラッシュパケットで終了する "key=value" ペアのリストを
送信します。リストには、少なくとも(サポートされている機能に基づく)フィル
ターコマンドと、リポジトリルートを基準にしてフィルタリングするファイルの
パス名が含まれます。フラッシュパケットの直後に、Gitはコンテンツを0個以上
のpkt-lineパケットに分割して送信し、フラッシュパケットを送信してコンテン
ツを終了します。フィルタは、コンテンツと最終的なフラッシュパケットを受信
する前に、応答を送信してはならないことに注意してください。 また、
"key=value" ペアの「value」には「=」文字を含めることができますが、キーに
は含めることはできません。

     packet:          git> command=smudge
     packet:          git> pathname=path/testfile.dat
     packet:          git> 0000
     packet:          git> CONTENT
     packet:          git> 0000

   フィルタは、フラッシュパケットで終了する "key=value" ペアのリストで応
答することが期待されます。フィルタで問題が発生しない場合は、リストに
"success" ステータスが含まれている必要があります。これらのパケットの直後
に、フィルターはコンテンツを0個以上のpkt-lineパケットで送信し、最後にフ
ラッシュパケットを送信することが期待されます。最後に、フラッシュパケット
で終了する "key=value" ペアの2番目のリストが必要です。フィルタは、2番目
のリストのステータスを変更したり、空のリストでステータスをそのまま維持し
たりできます。空のリストは、フラッシュパケットで終了する必要があることに
注意してください。

     packet:          git< status=success
     packet:          git< 0000
     packet:          git< SMUDGED_CONTENT
     packet:          git< 0000
     packet:          git< 0000  # empty list, keep "status=success" unchanged!

   結果のコンテンツが空の場合、フィルターは "success" ステータスとフラッ
シュパケットで応答して、空のコンテンツを通知することが期待されます。

     packet:          git< status=success
     packet:          git< 0000
     packet:          git< 0000  # empty content!
     packet:          git< 0000  # empty list, keep "status=success" unchanged!

   フィルタがコンテンツを処理できない、または処理したくない場合は、
"error" ステータスで応答することが期待されます。

     packet:          git< status=error
     packet:          git< 0000

   フィルタの処理中にエラーが発生した場合、コンテンツが(部分的または完全
に)送信された後、ステータス "error" を送信できます。

     packet:          git< status=success
     packet:          git< 0000
     packet:          git< HALF_WRITTEN_ERRONEOUS_CONTENT
     packet:          git< 0000
     packet:          git< status=error
     packet:          git< 0000

   フィルタがGitプロセスの存続期間中、コンテンツと将来のコンテンツを処理
できない、または処理したくない場合は、プロトコルの任意の時点で "abort" ス
テータスで応答することが期待されます。

     packet:          git< status=abort
     packet:          git< 0000

   "error"/"abort" ステータスが設定されている場合、Gitはフィルタープロセ
スを停止も再開もしません。 ただし、Gitは ‘filter.<driver>.required`フラ
グに従って終了コードを設定し、 `filter.<driver>.clean’ /
‘filter.<driver>.smudge’ メカニズムの振る舞いを真似っこします。

   通信中にフィルターが停止した場合、またはプロトコルに準拠していない場
合、Gitはフィルタープロセスを停止し、処理が必要な次のファイルでフィルタ
ーを再開します。 ‘filter.<driver>.required’ フラグの設定によっては、
Gitはそれをエラーとして解釈します。


Delay
-----

フィルタが "delay" 機能をサポートしている場合、Gitはフィルタコマンドとパ
ス名の後にフラグ "can-delay" を送信できます。このフラグは、コンテンツな
しでステータス "delayed" とフラッシュパケットで応答することにより、フィ
ルターが現在のブロブのフィルタリングを遅らせることができることを示します
(たとえば、ネットワーク遅延を補正するため)。

     packet:          git> command=smudge
     packet:          git> pathname=path/testfile.dat
     packet:          git> can-delay=1
     packet:          git> 0000
     packet:          git> CONTENT
     packet:          git> 0000
     packet:          git< status=delayed
     packet:          git< 0000

   フィルタが "delay" 機能をサポートしている場合は、
"list_available_blobs" コマンドをサポートしている必要があります。Gitがこ
のコマンドを送信すると、フィルターは、以前に遅延されて現在使用可能なブロ
ブを表すパス名のリストを返すことが期待されます。リストはフラッシュパケッ
トで終了する必要があり、その後に "success" ステータスが続き、これもフラ
ッシュパケットで終了します。 遅延パスのブロブがまだ利用できない場合、フ
ィルターは少なくとも1つのブロブが利用可能になるまで応答をブロックするこ
とが期待されます。フィルタは、空のリストを送信することで、遅延ブロブがな
くなったことをGitに伝えることができます。フィルタが空のリストで応答する
とすぐに、Gitは質問を停止します。この時点でGitが受信していないすべてのブ
ロブは欠落していると見なされ、エラーが発生します。

     packet:          git> command=list_available_blobs
     packet:          git> 0000
     packet:          git< pathname=path/testfile.dat
     packet:          git< pathname=path/otherfile.dat
     packet:          git< 0000
     packet:          git< status=success
     packet:          git< 0000

   Gitはパス名を受け取った後、対応するブロブを再度要求します。これらのリ
クエストには、パス名と空のコンテンツセクションが含まれています。フィルタ
ーは、上記で説明した通常の方法で汚れたコンテンツ(smudged content)に応答
することが期待されます。

     packet:          git> command=smudge
     packet:          git> pathname=path/testfile.dat
     packet:          git> 0000
     packet:          git> 0000  # empty content!
     packet:          git< status=success
     packet:          git< 0000
     packet:          git< SMUDGED_CONTENT
     packet:          git< 0000
     packet:          git< 0000  # empty list, keep "status=success" unchanged!


Example
-------

長時間実行されるフィルターのデモの実装は、Gitコアリポジトリにある
‘contrib/long-running-filter/example.pl’ にあります。 独自の長時間実行フ
ィルタープロセスを開発する場合は、 ‘GIT_TRACE_PACKET’ 環境変数がデバッグ
に非常に役立ちます(git(1) を参照)。

   既存の ‘filter.<driver>.clean’ や ‘filter.<driver>.smudge’ コマンドを
‘filter.<driver>.process’ で使用できないことに注意してください。前者は後
者とは異なるプロセス間通信プロトコルを使用するからです。


チェックイン/チェックアウト属性間の相互作用
-------------------------------------------

チェックインのコードの流れでは、ワークツリーファイルは最初に(指定され、
対応するドライバーが定義されている場合、) ‘filter’ ドライバーで変換され
、次に結果が(指定されている場合) ‘ident‘で処理され、最後に(指定されて適
用可能な場合) ‘text‘で処理されます。

   チェックアウトのコードの流れでは、ブロブコンテンツは最初に ‘text’ で
変換され、次に ‘ident’ で変換され、 ‘filter’ に送られます。


チェックイン/チェックアウト属性が異なるブランチをマージする
-----------------------------------------------------------

clean/smudge フィルターや text/eol/ident 属性の追加など、そのファイルの
正規リポジトリ形式を変更する属性をファイルに追加した場合、属性が配置され
ていない場所で何かをマージすると、通常、マージの競合が発生します。

   これらの不必要なマージの競合を防ぐために、Gitは、 ‘merge.renormalize’
構成変数を設定することにより、3方向マージを解決するときに、ファイルの3つ
のステージすべての仮想チェックアウトとチェックインを実行するように指示で
きます。これにより、チェックイン変換によって引き起こされた変更によって、
変換されたファイルが変換されていないファイルとマージされるときに、誤った
マージの競合が発生するのを防ぐことができます。

   「smudge→clean」の結果がすでに汚されている(smudged)ファイルでも「
clean」と同じ出力になる限り、この戦略はすべてのフィルター関連の競合を自
動的に解決します。このように機能しないフィルターは、手動で解決する必要が
ある追加のマージ競合を引き起こす可能性があります。


Generating diff text
====================


diff
----

属性 ‘diff’ は、Gitが特定のファイルのdiffを生成する方法に影響を与えます
。パスのテキストパッチを生成するか、パスをバイナリファイルとして扱うかを
Gitに指示できます。 また、ハンクヘッダーの ‘@@ -k,l +n,m @@’ 行に表示さ
れる行に影響を与えたり、外部コマンドを使用して差分を生成するようにGitに
指示したり、差分を生成する前にバイナリファイルをテキスト形式に変換するよ
うにGitに依頼したりすることもできます。

set(設定)
     ‘diff’ 属性が設定されているパスは、NULなどのテキストファイルには通
     常表示されないバイト値が含まれている場合でも、テキストとして扱われ
     ます。

unset(設定解除)
     ‘diff’ 属性が設定されていないパスは、 ‘Binary files differ’ (バイナ
     リファイル差分) (または、バイナリパッチが有効になっている場合、バイ
     ナリパッチ) を生成します。

unspecified(未指定)
     ‘diff’ 属性が指定されていないパスは、最初にその内容が検査され、テキ
     ストのように見え、 core.bigFileThreshold よりも小さい場合は、テキス
     トとして扱われます。さもなければ ‘Binary files differ’ (バイナリフ
     ァイル差分) が生成されます。

String(文字列値)
     指定されたdiffドライバーを使用してdiffが表示されます。以下のセクシ
     ョンで説明するように、各ドライバーは1つ以上のオプションを指定できま
     す。diffドライバー「foo」のオプションは、Git構成ファイルの「
     diff.foo」セクションの構成変数によって定義されます。


外部diffドライバーの定義
------------------------

diffドライバの定義は ‘gitattributes’ ファイルではなく ‘gitconfig’ で行わ
れるため、厳密に言えば、このマニュアルページはそれについて話すのには間違
った場所はありますが…

   外部diffドライバー ‘jcdiff’ を定義するには、以下のように
‘$GIT_DIR/config’ ファイル(または ‘$HOME/.gitconfig’ ファイル)にセクショ
ンを追加します:

     [diff "jcdiff"]
             command = j-c-diff

   Git は ‘diff’ 属性が ‘jcdiff’ に設定されているパスの diff を表示する
必要がある場合、上記の設定で指定したコマンド、つまり ‘j-c-diff’ を 7 つ
のパラメータで、 ‘GIT_EXTERNAL_DIFF’ プログラムが呼ばれるのと同じように
呼び出します。 詳しくは git(1) を参照してください。


Defining a custom hunk-header
-----------------------------

テキストdiff出力の変更の各グループ(ハンク(hunk)と呼ばれます)には、以下の
形式の行が接頭辞として付けられます:

     @@ -k,l +n,m @@ TEXT

   これはハンクヘッダー(hunk header)と呼ばれます。 "TEXT" の部分は、デフ
ォルトでは、アルファベットまたは、アンダースコア(‘_’)または、ドル記号
(‘$’)で始まる行です。 これは、GNU _diff -p_ 出力が使用するものとマッチし
ます。ただし、このデフォルトの選択は一部のコンテンツには適していないため
、カスタマイズされたパターンを使用して選択を行うことができます。

   最初に、 .gitattributesで、パスに ‘diff’ 属性を割り当てます。

     *.tex   diff=tex

   次に、 ‘diff.tex.xfuncname’ 構成を定義して、ハンクヘッダー "TEXT" と
して表示する行にマッチする正規表現を指定します。以下のように、
‘$GIT_DIR/config’ ファイル(または ‘$HOME/.gitconfig’ ファイル)にセクショ
ンを追加します:

     [diff "tex"]
             xfuncname = "^(\\\\(sub)*section\\{.*)$"

   注意: 単一レベルのバックスラッシュは構成ファイルパーサーによって使用
されるため、バックスラッシュを2重にする必要があります。 上記のパターンは
、バックスラッシュで始まり、行の終わりまで、 ‘sub’ 、 ‘section’ 、 ‘{’ の
順に0回以上出現する行を選択します。

   これを簡単にするための組み込みパターンがいくつかあり、 ‘tex’ はその
1つであるため、構成ファイルに上記を書き込む必要はありません(これは、
‘.gitattributes’ を介して属性メカニズムで有効にする必要があります)。以下
の組み込みパターンを使用できます:

   • ‘ada’ はAda言語のソースコードに適しています。

   • ‘bash’ はBourne-Againシェル言語(bash)のソースコードに適しています。
     POSIXシェル関数定義のスーパーセットをカバーしています。

   • ‘bibtex’ はBibTeXでコード化されたリファレンスを持つファイルに適して
     います。

   • ‘cpp’ はC言語とC++言語のソースコードに適しています。

   • ‘csharp’ はC#言語のソースコードに適しています。

   • ‘css’ はCSS(cascading style sheets)に適しています。

   • ‘dts’ は devicetree (DTS) ファイルに適しています。

   • ‘elixir’ はElixir言語のソースコードに適しています。

   • ‘fortran’ はFORTRAN言語のソースコードに適しています。

   • ‘fountain’ はFountain文書に適しています。

   • ‘golang’ はGo言語のソースコードに適しています。

   • ‘html’ は HTML/XHTML 文書に適しています。

   • ‘java’ はJava言語のソースコードに適しています。

   • ‘markdown’ はMarkdown文書に適しています。

   • ‘matlab’ はMATLABとOctave言語のソースコードに適しています。

   • ‘objc’ はObjective-C言語のソースコードに適しています。

   • ‘pascal’ は Pascal/Delphi 言語のソースコードに適しています。

   • ‘perl’ はPerl言語のソースコードに適しています。

   • ‘php’ はPHP言語のソースコードに適しています。

   • ‘python’ はPython言語のソースコードに適しています。

   • ‘ruby’ はRuby言語のソースコードに適しています。

   • ‘rust’ はRust言語のソースコードに適しています。

   • ‘scheme’ はScheme言語のソースコードに適しています。

   • ‘tex’ はLaTeX文書のソースコードに適しています。


Customizing word diff
---------------------

‘diff.*.wordRegex’ 構成変数で適切な正規表現を指定することにより、 ‘git
diff --word-diff’ が単語を1行に分割するために使用するルールをカスタマイ
ズできます。たとえば、TeXでは、バックスラッシュとそれに続く一連の文字が
コマンドを形成しますが、そのようなコマンドのいくつかは、空白を介さずに一
緒に実行できます。それらを分離するには、以下のように ‘$GIT_DIR/config’ フ
ァイル(または ‘$HOME/.gitconfig’ ファイル)で正規表現を使用します:

     [diff "tex"]
             wordRegex = "\\\\[a-zA-Z]+|[{}]|\\\\.|[^\\{}[:space:]]+"

   前のセクションにリストされているすべての言語には組み込みのパターンが
用意されています。


バイナリファイルのテキスト差分の取得
------------------------------------

一部のバイナリファイルのテキスト変換バージョンの差分を確認することが望ま
しい場合があります。たとえば、ワードプロセッサ文書をASCIIテキスト表現に
変換し、テキストの差分を表示することができます。この変換によって一部の情
報が失われますが、結果のdiffは人間が見るのに役立ちます(ただし、直接適用
(apply)することはできません)。

   ‘textconv’ configオプションは、そのような変換を実行するためのプログラ
ムを定義するために使用されます。プログラムは、変換するファイルの名前であ
る単一の引数を取り、結果のテキストをstdoutに生成する必要があります。

   たとえば、バイナリ情報の代わりにファイルのexif情報の差分を表示するに
は(exifツールがインストールされていると仮定して)、以下のセクションを
‘$GIT_DIR/config’ ファイル(または ‘$HOME/.gitconfig ファイル)に追加しま
す:

     [diff "jpg"]
             textconv = exif

     *Note*

     テキスト変換は通常、一方向の変換です。この例では、実際の画像コンテ
     ンツを失い、テキストデータのみに焦点を当てています。これは、
     textconvによって生成されたdiffが適用(apply)に適していないことを意味
     します。このため、テキスト変換を実行するのは、 ‘git diff’ と ‘git
     log’ ファミリーのコマンド(つまり、log、whatchanged、show)のみです。
     ‘git format-patch’ はこの出力を生成しません。バイナリファイルのテキ
     スト変換された差分を誰かに送信したい場合(たとえば、行った変更をすば
     やく伝達するため)、それを別個に生成し、送信する通常のバイナリ差分に
     加えてコメントとして送信する必要があります。

   特に ‘git log -p’ を使用して大量のテキスト変換を行う場合、テキスト変
換が遅くなる可能性があるため、Gitは出力をキャッシュし、将来の差分で使用
するメカニズムを提供します。 キャッシュを有効にするには、diffドライバー
の構成で「cachetextconv」変数を設定します。 例えば:

     [diff "jpg"]
             textconv = exif
             cachetextconv = true

   これにより、各ブロブで「exif」を実行した結果が無期限にキャッシュされ
ます。diffドライバーのtextconv構成変数を変更すると、Gitはキャッシュエン
トリを自動的に無効にし、textconvフィルターを再実行します。キャッシュを手
動で無効にしたい場合(たとえば、「exif」のバージョンが更新され、より良い
出力が生成されようになった等)、 ‘git update-ref -d
refs/notes/textconv/jpg’ を使用してキャッシュを手動で削除できます( ここ
で、「jpg」は上記の例のように、diffドライバーの名前です)。


textconvと外部diffの選択
------------------------

あなたがリポジトリ内のバイナリまたは特別にフォーマットされたブロブの違い
を表示したい場合は、外部のdiffコマンドを使用するか、textconvを使用してそ
れらを差分可能(diff-able)なテキストフォーマットに変換するかを選択できま
す。どちらの方法を選択するかは、状況に完全に依存します。

   外部diffコマンドを使用する利点は、柔軟性です。行指向の変更を見つける
必要はありません。また、出力が統一されたdiff(unified diff)に似ている必要
もありません。あなたはあなたのデータ形式に最も適した方法で変更を自由に見
つけて報告できます。

   それと比較すると、textconvははるかに制限的です。データを行指向のテキ
スト形式に変換すると、Gitは通常のdiffツールを使用して出力を生成します。
この方法を選択することにはいくつかの利点があります:

  1. 容易に使えます。多くの場合、独自の差分を実行するよりも、バイナリか
     らテキストへの変換を作成する方がはるかに簡単です。多くの場合、既存
     のプログラム(つまり exif や odt2txt)をtextconvフィルターとして使用
     できます。

  2. Gitのdiff機能。変換ステップのみを自分で実行することで、カラー化、単
     語diff、マージ用の複合diffなど、Gitのdiff機能の多くを引き続き利用で
     きます。

  3. キャッシュ機能。 textconvキャッシングは、 ‘git log -p’ を実行してト
     リガーするような、繰り返されるdiffを高速化できます。


ファイルをバイナリとしてマークする
----------------------------------

Gitは通常、コンテンツの先頭を調べることで、ブロブにテキストデータとバイ
ナリデータのどちらが含まれているかを正しく推測します。ただし、ブロブにフ
ァイルの後半にバイナリデータが含まれている、またはコンテンツが技術的には
テキスト文字で構成されているものの、人間の読者には不明瞭であるために、あ
なたは、その推測を上書きしたい場合があります。たとえば、多くのポストスク
リプトファイルにはASCII文字しか含まれていません(つまりテキストデータです
)が、ノイズが多く意味のないdiffが生成されます。

   ファイルをバイナリとしてマークする最も簡単な方法は、 ‘.gitattributes’
ファイルでdiff属性を設定解除(unset)することです。

     *.ps -diff

   これにより、Gitは通常の差分ではなく ‘Binary files differ’ (バイナリフ
ァイルの差分)(またはバイナリパッチが有効になっている場合はバイナリパッチ
)を生成します。

   しかしながら、他のdiffドライバー属性を指定することもできます。 たとえ
ば、 ‘textconv’ を使用してポストスクリプトファイルをASCII表現に変換し、
人間が表示できるようにしたい場合があるけども、それ以外の場合はバイナリフ
ァイルとして扱いたいとします。 ‘-diff’ 属性 と ‘diff=ps’ 属性の両方を指
定することはできません。 解決策は、 ‘diff.*.binary’ 構成オプションを使用
することです:

     [diff "ps"]
       textconv = ps2ascii
       binary = true


Performing a three-way merge
============================


merge
-----

属性 ‘merge’ は、 ‘git merge’ 中にファイルレベルのマージが必要な場合にフ
ァイルの3つのバージョンをマージする方法や、 ‘gitr evert’ や ‘git
cherry-pick’ などの他のコマンドに、影響します。

set(設定)
     組み込みの３方向マージドライバーは、 ‘RCS’ スイートの _merge_ コマ
     ンドと同様の方法でコンテンツをマージするために使用されます。これは
     通常のテキストファイルに適しています。

unset(設定解除)
     現在のブランチのバージョンを暫定的なマージ結果として取得し、マージ
     に競合があることを宣言します。これは、明確に定義されたマージセマン
     ティクスを持たないバイナリファイルに適しています。

unspecified(未指定)
     デフォルトでは、これは ‘merge’ 属性が設定されている場合と同じ組み込
     みの３方向マージドライバーを使用します。 ただし、 ‘merge.default’ 構
     成変数は、 ‘merge’ 属性未指定(unspecified)のパスで使用される別のマ
     ージドライバーに名前を付けることができます。

String(文字列値)
     3方向マージは、指定のカスタムマージドライバーを使用して実行されます
     。組み込みの3方向マージドライバーは、「text」ドライバーを要求するこ
     とで明示的に指定できます。 現在のブランチを取得する組み込みドライバ
     ーは、「binary」を要求することで指定できます。


Built-in merge drivers
----------------------

‘merge’ 属性を介して要求できる、いくつかの組み込みの低レベルのマージドラ
イバーが定義されています。

text
     テキストファイルの通常の3方向ファイルレベルのマージ。 競合する領域
     は、競合マーカー ‘<<<<<<<’ と ‘=======’ と ‘>>>>>>>’ でマークされま
     す。ブランチのバージョンは ‘=======’ マーカーの前に表示され、マージ
     されたブランチのバージョンは ‘=======’ マーカーの後に表示されます。

binary
     ブランチのバージョンを作業ツリーに保持しますが、ユーザーが整理でき
     るようにパスを競合状態のままにします。

union
     テキストファイルに対して3方向のファイルレベルのマージを実行しますが
     、競合マーカーを残すのではなく、両方のバージョンから行を取得します
     。これにより、結果のファイルに追加された行がランダムな順序で残る傾
     向があり、ユーザーは結果を確認すべきです。影響を理解していない場合
     は、これを使用してはいけません。


Defining a custom merge driver
------------------------------

マージドライバの定義は、 ‘gitattributes’ ファイルではなく ‘.git/config’
ファイルで行われるため、厳密に言えば、このマニュアルページはそれについて
話すのに間違った場所ではありますが…

   カスタムマージドライバー ‘filfre’ を定義するには、以下のように
‘$GIT_DIR/config’ ファイル(または ‘$HOME/.gitconfig’ ファイル)にセクショ
ンを追加します:

     [merge "filfre"]
             name = feel-free merge driver
             driver = filfre %O %A %B %L %P
             recursive = binary

   ‘merge.*.name’ 変数は、ドライバーに人間が読める名前を付けます。

   ‘merge.*.driver’ 変数の値は、祖先のバージョン(‘%O’)と、現在のバージョ
ン(‘%A’)と、他のブランチのバージョン(‘%B’)をマージするために実行するコマ
ンドを作成するために使用されます。これらの3つのトークンは、コマンドライ
ンの構築時にこれらのバージョンの内容を保持する一時ファイルの名前に置き換
えられます。さらに、 ‘%L’ は競合マーカーのサイズに置き換えられます(以下
を参照)。

   マージドライバーは、マージの結果を ‘%A’ という名前のファイルに上書き
して残し、それらを正常にマージできた場合はゼロステータスで終了し、競合が
あった場合は非ゼロで終了することが期待されます。

   ‘merge.*.recursive’ 変数は、複数の祖先が存在する場合に、共通の祖先間
の内部マージのためにマージドライバーが呼び出されるときに使用する他のマー
ジドライバーを指定します。指定しない場合、ドライバー自体が内部マージと最
終マージの両方に使用されます。

   マージドライバーは、プレースホルダー ‘%P’ を介して、マージされた結果
が格納されるパス名を知ります。


conflict-marker-size
--------------------

この属性は、競合するマージ中に作業ツリーファイルに残る競合マーカーの長さ
を制御します。値を正の整数に設定するだけで、意味のある効果があります。

   たとえば、 ファイル ‘Documentation/git-merge.txt’ の結果をマージする
と競合するときに、‘.gitattributes’ で(通常の7文字の長さではなく)はるかに
長い競合マーカーを残すようにマージ機構に指示できます。

     Documentation/git-merge.txt     conflict-marker-size=32


Checking whitespace errors
==========================


whitespace
----------

      `core.whitespace` 設定変数を使用すると、プロジェクト内のすべてのパスに対して 'diff' と 'apply'
     が空白エラー(whitespace errors)をどうみなすかを定義します(linkgit:git-config[1]
     を参照)。この属性では、あなたはパスごとに細かく制御できます。

set(設定)
     Gitでチェックできる全てのタイプの潜在的な空白エラーを通知します。タ
     ブ幅は ‘core.whitespace’ 構成変数の値から取得されます。

unset(設定解除)
     何もエラーとして通知しません。

unspecified(未指定)
     ‘core.whitespace’ 構成変数の値を使用して、エラーとして通知する内容
     を決定します。

String(文字列値)
     ‘core.whitespace’ 構成変数と同じ形式で、通知すべき一般的な空白の問
     題のコンマ区切りリストを指定します。


Creating an archive
===================


export-ignore
-------------

属性 ‘export-ignore’ を持つファイルとディレクトリはアーカイブファイルに
追加されません。


export-subst
------------

属性 ‘export-subst’ がファイルに設定されている場合、Gitはこのファイルを
アーカイブに追加するときにいくつかのプレースホルダーを展開します。展開は
、コミットIDの可用性に依存します。たとえば git-archive(1) にコミットやタ
グの代わりにツリーが与えられている場合、置換は行われません。プレースホル
ダーは、 git-log(1) のオプション ‘--pretty=format:’ のプレースホルダーと
同じですが、ファイル内で ‘$Format:PLACEHOLDERS$’ のようにラップする必要
がある点が異なります。 例えば、 文字列 ‘$Format:%H$’ は、コミットハッシ
ュに置き換えられます。ただし、DoS攻撃(denial-of-service attacks)を回避す
るために、アーカイブごとに1つの ‘%(describe)’ プレースホルダーのみが展開
されます。


Packing objects
===============


delta
-----

属性 ‘delta’ がfalseに設定されているパスのブロブに対して、デルタ圧縮は試
行されません。


Viewing files in GUI tools
==========================


encoding
--------

この属性の値は、関連するファイルの内容を表示するためにGUIツール(gitk(1)
や git-gui(1) など)で使用される文字エンコードを指定します。注意: パフォ
ーマンス上の考慮事項により、 gitk(1) は、オプションでファイルごとのエン
コーディングを手動で有効にしない限り、この属性を使用しないことに注意して
ください。

   この属性が設定されていないか、値が無効な場合は、代わりに
‘gui.encoding’ 構成変数の値が使用されます(git-config(1) を参照)。


USING MACRO ATTRIBUTES
**********************

追跡中のバイナリファイルに、行末変換を適用したり、テキストの差分を作成し
たりする必要はありません。あなたは、たとえば以下のように指定する必要があ
ります。

     *.jpg -text -diff

   しかし、多くの属性がある場合、これはめんどくさいです。マクロ属性を使
用すると、あなたは設定時に他の多くの属性を同時に設定または設定解除する属
性を定義できます。システムは、組み込みのマクロ属性 ‘binary’ を認識します
:

     *.jpg binary

   「binary」属性を設定すると、上記のように「text」属性と「diff」属性の
設定も解除されます。マクロ属性は「set」のみであることに注意してください
。ただし、1つを設定すると、他の属性をsetまたはunsetしたり、他の属性を「
Unspecified」状態に戻したりする事があります。


DEFINING MACRO ATTRIBUTES
*************************

カスタムマクロ属性は、最上位のgitattributesファイル
(‘$GIT_DIR/info/attributes’ または、作業ツリーの最上位にある ‘
.gitattributes‘ ファイルまたは、グローバルgitattributesファイルまたは、
システム全体のgitattributesファイル)でのみ定義でき、作業ツリーサブディレ
クトリの ‘.gitattributes’ ファイルでは定義できません。 組み込みのマクロ
属性「binary」は、以下のものと同等です:

     [attr]binary -diff -merge -text


NOTES
*****

作業ツリーの ‘.gitattributes’ ファイルにアクセスするとき、Gitはシンボリ
ックリンクをたどりません。 これにより、ファイルシステムからではなく、イ
ンデックスまたはツリーからファイルにアクセスする場合の動作の一貫性が保た
れます。


EXAMPLES
********

これらの以下の3つの ‘gitattributes’ ファイルがある場合:

     (in $GIT_DIR/info/attributes)

     a*      foo !bar -baz

     (in .gitattributes)
     abc     foo bar baz

     (in t/.gitattributes)
     ab*     merge=filfre
     abc     -foo -bar
     *.c     frotz

   パス ‘t/abc’ に与えられる属性は、以下のように計算されます:

  1. (問題のパスと同じディレクトリにある) ‘t/.gitattributes’ を調べるこ
     とにより、Gitは最初の行が一致することを検出します。 ‘merge’ 属性が
     設定されます。 また、2行目が一致し、属性 ‘foo’ と ‘bar‘が設定解除
     (unseet)されていることもわかります。

  2. 次に (親ディレクトリにある) ‘.gitattributes’ を調べ、最初の行がマッ
     チすることを確認します。しかし、 ‘t/.gitattributes’ ファイルでは、
     このパスに対して ‘merge’ や ‘foo’ や ‘bar’ 属性をどのように与えるべ
     きかを既に決めているので、‘foo’ と ‘bar’ は設定解除(unset)のままに
     しています。属性 ‘baz’ がsetされます。

  3. 最後に、 ‘$GIT_DIR/info/attributes’ を調べます。このファイルは、ツ
     リー内の設定を上書きするために使用されます。最初の行がマッチして
     ‘foo’ がsetされ、 ‘bar’ が指定解除(unset)の状態に戻され、 ‘baz’ が
     設定解除(unset)されます。

   その結果、 ‘t/abc’ への属性の割り当ては以下のようになります:

     foo     set to true
     bar     unspecified
     baz     set to false
     merge   set to string value "filfre"
     frotz   unspecified


SEE ALSO
********

git-check-attr(1).


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: gitcli,  Up: Top

Name
****

gitcli — Gitコマンドラインのインターフェイスと規則


Synopsis
********

gitcli


DESCRIPTION
***********

このマニュアルでは Git CLI 全体で使用される規則について説明します。

   多くのコマンドは、引数としてリビジョン(revisions)(それはほとんどの場
合「コミット」(commits)ですが、文脈とコマンドによっては「ツリーっぽい」
(tree-ish)場合もあります)と、パス(paths)を取ります。ルールは以下のとおり
です:

   • リビジョン達が最初に来て、その次にパス達が来ます。 例えば、 ‘git
     diff v1.0 v2.0 arch/x86 include/asm-x86’ では ‘v1.0’ と ‘v2.0’ はリ
     ビジョン達であり、 ‘arch/x86’ と ‘include/asm-x86’ はパス達です。

   • 引数がリビジョンまたはパスのいずれかと誤解される可能性がある場合は
     、それらの間に ‘--’ を配置することで曖昧さを解消できます。例えば、
     ‘git diff -- HEAD’ は、「作業ツリーにHEADというファイルがあります。
     インデックスにステージングしたバージョンと、そのファイルの作業ツリ
     ーにあるバージョンとの変更を表示してください」であり、「HEADコミッ
     トとワークツリー全体の違いを表示する」ではありません。後者を求める
     には ‘git diff HEAD --’ とします。

   • ‘--’ を明示しなくても、Gitは合理的な推測を行いますが、あいまいな場
     合はエラーが発生し、あなたに明確にするように求めます。例えば、作業
     ツリーにHEADというファイルがある場合、 ‘git diff HEAD’ はあいまいで
     あり、曖昧さを解消するには、 ‘git diff HEAD --’ または ‘git diff --
     HEAD’ のいずれかを指定する必要があります。

   • 一部のコマンドでは、 ‘--’ はリビジョンとパスを明確に区別するために
     使われるため、これら一部のコマンドでオプションとリビジョンを分離す
     るために使用することはできません。これら一部のコマンドではオプショ
     ンとリビジョンを分離するために ‘--end-of-options’ を使用できます(こ
     れら以外のパスのリビジョンを区別しないコマンドでも機能します。その
     場合、 ‘--end-of-options’ は単に ‘--’ のエイリアスです)。

     ランダムなユーザー入力を処理することが期待されるスクリプトを作成す
     るときは、適切な場所に曖昧さ回避の ‘--’ を配置することにより、どの
     引数がどれであるかを明示することをお勧めします。

   • 多くのコマンドではパスにワイルドカードを使用できますが、シェルによ
     ってワイルドカードが取得されないように保護する必要があります。以下
     の2つの意味は異なります:

          $ git restore *.c
          $ git restore \*.c

     前者を使用すると、シェルでfileglobを展開でき、作業ツリー内の C言語
     ソースファイル(dot-C)をインデックス内のバージョンで上書きするように
     要求されます。後者は ‘*.c’ をGitに渡し、作業ツリーにチェックアウト
     するパターンに一致するインデックス内のパスを要求しています。‘git
     add hello.c; rm hello.c’ を実行後、前者では作業ツリーに ‘hello.c’ は
     表示されませんが、後者では表示されます。

   • ファイルシステムの ‘.’ (ピリオド)が現在のディレクトリを参照するのと
     同じように、Gitでリポジトリ名として ‘.’ を使用すること(a
     dot-repository)は相対パスであり、あなたの現在のリポジトリを意味しま
     す。

   Gitのスクリプトを作成するときに従う必要のある「フラグ」(flag)に関する
ルールは以下のとおりです:

   • ダッシュで繋がない形式(non-dashed form)のGitコマンドを使用すること
     をお勧めします。つまり、 ‘git-foo’ よりは ‘git foo’ を使用すべきで
     す。

   • 短いオプションは分割して単語に区切ります( ‘git foo -ab’ よりも ‘git
     foo -a -b’ を優先します。前者は機能しない事があります)。

   • コマンドラインオプションが引数を取る場合は、串刺し形式(stuck’ form)
     を使用します。つまり、短いオプションの場合は ‘git foo -o Arg’ の代
     わりに ‘git foo -oArg’ を記述し、長いオプションの場合は ‘git foo
     --long-opt Arg’ の代わりに ‘git foo --long-opt=Arg’ を記述します。
     オプションのオプション引数をとるオプションは、串刺し形式で記述する
     必要があります。

   • コマンドにリビジョンパラメータを指定するときは、そのパラメータが作
     業ツリー内のファイルの名前と混同されないことを確認してください。例
     えば、 ‘git log -1 HEAD’ とは記述せず、‘git log -1 HEAD --’ と記述
     します。作業ツリーに ‘HEAD’ というファイルがある場合、前者は機能し
     ません。

   • 多くのコマンドでは、長いオプション ‘--option’ を一意であるかぎり短
     いプレフィックスのみに省略できます(たとえば、名前が ‘opt’ で始まる
     オプションが他にない場合は、 ‘--opt’ と入力して ‘--option’ フラグを
     呼び出すことができます)。ただし、スクリプトを作成するときは、省略し
     てはいけません。なぜならGitのより新しいバージョンで、名前が同じプレ
     フィックスを共有する新しいオプションが導入される可能性があるからで
     す。例えば ‘--optimize’ が導入されると、以前は一意であった短いプレ
     フィックス(‘--option’ , ‘--opt’)を一意では無くしてしまいます。


ENHANCED OPTION PARSER
**********************

Git 1.5.4シリーズ以降、多くのGitコマンド(この文書の執筆時点ではすべてで
はありませんが)は、拡張オプションパーサーを備えています。

   以下は、この拡張オプションパーサーによって提供される機能のリストです
。


Magic Options
=============

拡張オプションパーサーがアクティブになっているコマンドはすべて、いくつか
の魔法のコマンドラインオプション(magic command-line options)を理解します
:

‘-h’
     コマンドの、かなり整った使用法を提供します。

          $ git describe -h
          usage: git describe [<options>] <commit-ish>*
             or: git describe [<options>] --dirty

              --contains            find the tag that comes after the commit
              --debug               debug search strategy on stderr
              --all                 use any ref
              --tags                use any tag, even unannotated
              --long                always use long format
              --abbrev[=<n>]        use <n> digits to display SHA-1s

     注意: 一部のサブコマンド(例: ‘git grep’ )は、コマンドラインに ‘-h’
     以外のものがある場合、動作が異なる場合がありますが、コマンドライン
     に何も含まれていない ‘git subcmd -h’ は、一貫して使用法を提供するこ
     とを目的としています。

‘--help-all’
     一部のGitコマンドは、配管コマンドにのみ使用されるオプションまたは非
     推奨のオプションを取り、そのようなオプションはデフォルトの使用法か
     ら隠されています。 このオプションはオプションの完全なリストを提供し
     ます。


否定オプション
==============

長いオプションは、接頭辞 ‘--no-’ を付けることで無効にできます。 たとえば
、 ‘git branch’ にはオプション ‘--track’ があります。これはデフォルトで
_on_ です。 ‘--no-track’ を使用して、その動作をオーバーライドできます。
‘--color’ と ‘--no-color’ についても同じことが言えます。


短いオプションのおまとめ
========================

拡張オプションパーサーをサポートするコマンドを使用すると、短いオプション
をおまとめできます。これは、たとえば、 ‘git rm -rf’ や ‘git clean -fdx’
を使用できることを意味します。


長いオプションの省略
====================

拡張オプションパーサーをサポートするコマンドは、クソ詳しく長いオプション
の一意なプレフィックスを受け入れますが、これは注意して使用してください。
たとえば、 ‘git commit --amen’ は ‘git commit --amend’ と入力したかのよ
うに動作しますが、これは、後のバージョンのGitが同じプレフィックスを共有
する別のオプションを導入するまでのみ当てはまります。例えば ‘git commit
--amenity’ オプションが導入されたら一意で無くなります。


Separating argument from the option
===================================

コマンドラインで、オプションの必須パラメータを単に区切られた単語として記
述することができます。これは、以下のすべての使い方が機能することを意味し
ます:

     $ git foo --long-opt=Arg
     $ git foo --long-opt Arg
     $ git foo -oArg
     $ git foo -o Arg

   ただし、これは必須ではないオプションの値を持つスイッチでは許可されて
いません。その場合は串刺し形式を使用する必要があります:

     $ git describe --abbrev HEAD     # correct
     $ git describe --abbrev=10 HEAD  # correct
     $ git describe --abbrev 10 HEAD  # NOT WHAT YOU MEANT


注意：よく混同されるオプションに関する注記
******************************************

作業ツリーおよび/またはインデックス内のファイルを処理できる多くのコマン
ドは、 ‘--cached’ および/または ‘--index’ オプションを使用できます。イン
デックスは元々キャッシュと呼ばれていたため、これら2つは同義語であると誤
解されることがあります。ちゃいます。これらの2つのオプションは非常に異な
ることを意味します。

   • ‘--cached’ オプションは、通常は作業ツリー内のファイルで機能するコマ
     ンドに、「インデックスのみで」機能するように要求するために使用され
     ます。 たとえば、 ‘git grep’ をコミットせずに使用して、どのコミット
     から文字列を検索するかを指定すると、通常は作業ツリー内のファイルで
     機能しますが、 ‘--cached’ オプションを使用するとインデックス内の文
     字列を検索します。

   • ‘--index’ オプションは、通常は作業ツリー内のファイルで機能するコマ
     ンドに、「インデックスにも」影響を与えるように要求するために使用さ
     れます。たとえば、 ‘git stash apply’ は通常、stashエントリに記録さ
     れた変更を作業ツリーにマージしますが、 ‘--index’ オプションを使用す
     ると、インデックスへの変更もマージします。

   ‘git apply`コマンドは、 `--cached’ または ‘--index’ のいずれかを伴っ
て使用できます(同時に使用することはできません。通常、このコマンドは作業
ツリー内のファイルにのみ影響しますが、 ‘--index’ を使用すると、ファイル
とそのインデックスエントリの両方にパッチが適用され、 ‘--cached’ を使用す
ると、インデックスエントリのみが変更されます。

   詳細については
https://lore.kernel.org/git/7v64clg5u9.fsf@assigned-by-dhcp.cox.net/
(https://lore.kernel.org/git/7v64clg5u9.fsf@assigned-by-dhcp.cox.net/) と
https://lore.kernel.org/git/7vy7ej9g38.fsf@gitster.siamese.dyndns.org/
(https://lore.kernel.org/git/7vy7ej9g38.fsf@gitster.siamese.dyndns.org/)
も参照してください。

   作業ツリー および/または インデックス内のファイルに対しても機能する他
のいくつかのコマンドは、 ‘--staged’ および/または ‘--worktree’ を取るこ
とができます。

   • ‘--staged’ は ‘--cached’ とまったく同じです。これは、作業ツリーでは
     なく、インデックスでのみ機能するようにコマンドに要求するために使用
     されます。

   • ‘--worktree’ は反対に、インデックスではなく、作業ツリーのみで作業す
     るようにコマンドに要求します。

   • 2つのオプションを一緒に指定して、インデックスと作業ツリーの両方で作
     業するようにコマンドに要求することができます。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: gitcore-tutorial,  Up: Top

Name
****

gitcore-tutorial — 開発者のためのGit coreチュートリアル


Synopsis
********

git *


DESCRIPTION
***********

このチュートリアルでは、「コア」(core)Gitコマンドを使用してGitリポジトリ
を設定および操作する方法について説明します。

   あなたがGitをリビジョン管理システムとして使用する必要がある場合は、「
A Tutorial Introduction to Git」( linkgit: gittutorial[7] )または the
Git User Manual (user-manual.html) から始めることをお勧めします。

   しかしながら、Gitの内部を理解したい場合は、これら低レベルのツールを理
解しておくと役に立ちます。

   コアGit(core Git)は「配管」(plumbing)と呼ばれることが多く、その上に「
磁器」(porcelain)と呼ばれるより美しいユーザーインターフェイスがあります
。配管コマンドを直接使用することはあまりありませんが、磁器コマンドが使え
ない時に配管コマンドでどうするかを知っておくのは良い事です。

   このドキュメントが最初に作成されたとき、多くの磁器コマンドはシェルス
クリプトでした。説明を簡単にするために、配管がどのように組み合わされて磁
器コマンドを形成するかを示す例としていまだそれらを使用しています。ソース
ツリーには、参照用に contrib/examples/ にこれらのスクリプトの一部が含ま
れています。これらは最早シェルスクリプトとして実装されなくなりましたが、
それでも、配管レイヤーコマンドの機能の説明は引き続き有効です。

     *Note*

     より深い技術的な詳細は、多くの場合 Note 欄になっています。最初の読
     書ではスキップしてかまいません。


Creating a Git repository
*************************

新しいGitリポジトリの作成はこれ以上ないほど簡単です。すべてのGitリポジト
リは空から始まります。必要なのは、作業ツリーとして使用するサブディレクト
リを見つけることだけです。まったく新しいプロジェクトの場合は、それは空の
ものか、あるいは、Gitにインポートする既存の作業ツリーのいずれかです。

   私達の最初の例において、既存のファイルを使用せずに、まったく新しいリ
ポジトリを最初から開始します。これを「git-tutorial」と呼ぶことにします。
起動するには、そのサブディレクトリを作成し、そのサブディレクトリに入って
、 ‘git init’ を使用してGitインフラストラクチャを初期化します:

     $ mkdir git-tutorial
     $ cd git-tutorial
     $ git init

   そうすると、Gitは以下のように答えます

     Initialized empty Git repository in .git/

   これは、奇妙なことを何もしていないこと、そして新しいプロジェクト用に
ローカルの ‘.git’ ディレクトリセットアップを作成したことを示すGit流のや
り方です。これで ‘.git’ ディレクトリができ、_ls_ でそれを調べることがで
きます。新しい空のプロジェクトの場合、特に、以下の3つのエントリが表示さ
れます:

   • ‘ref: refs/heads/master’ という内容の ‘HEAD’ というファイル。これは
     シンボリックリンクに似ており、 ‘HEAD’ ファイルは
     ‘refs/heads/master’ を指します。

     ‘HEAD’ リンクが指すファイルがまだ存在しないという事実について心配す
     る必要はありません。まだあなたは ‘HEAD’ 開発ブランチを開始するコミ
     ットを作成していないからです。

   • プロジェクトのすべてのオブジェクトを含む ‘objects’ というサブディレ
     クトリ。オブジェクトを直接見る理由は何も無いはずですが、これらのオ
     ブジェクトがリポジトリ内のすべての実際の「データ」を含むものである
     ことを知りたい場合があります。

   • オブジェクトへの参照を含む ‘refs’ と呼ばれるサブディレクトリ。

   特に、 ‘refs’ サブディレクトリには、それぞれ ‘heads’ と ‘tags’ という
名前の2つのサブディレクトリが含まれます。それらは、名前が示すとおりに機
能します。つまり、開発のさまざまな「ヘッド」(先頭)(別名「ブランチ」)への
参照と、リポジトリ内の特定のバージョンに名前を付けるために作成した「タグ
」への参照が含まれます。

   注: 特別な ‘master’ ヘッドがデフォルトのブランチであるため、作成され
た ‘.git/HEAD’ ファイルは、まだ存在していなくてもそれを指します。基本的
に、 ‘HEAD’ リンクは常に現在作業しているブランチを指しているはずであり、
いつも ‘master’ ブランチでの作業から始まることを期待します。

   けれども、これは単なる慣例であり、ブランチには任意の名前を付けること
ができ、あなたは「master」ブランチを持つ必要はありません。ただし、多くの
Gitツールは ‘.git/HEAD’ が最初から有効であると想定します。

     *Note*

     「オブジェクト」は、その160ビットのSHA-1ハッシュ、別名「オブジェク
     ト名」によって識別され、オブジェクトへの参照は、常にそのSHA-1名の
     16進表現の40バイトです。 ‘refs’ サブディレクトリ内のファイルには、
     これらの16進参照(通常、末尾に ‘\n’ があります)が含まれていると予想
     されるため、実際にあなたのツリーにデータを入力し始めると、これらの
     ‘refs’ サブディレクトリにはこれらの参照を含む41バイトのファイルが多
     数表示されるはずです。

     *Note*

     上級ユーザーは、このチュートリアルを終了した後、
     gitrepository-layout(5) を確認することをお勧めします。

   これで、あなたの最初のGitリポジトリが作成されました。もちろん、空なの
であまり役に立ちません。なので、データの入力を始めましょう。


Populating a Git repository
***************************

我々はシンプルかつ愚直に行きたいと思います、まずは簡単なファイルをいくつ
か入力して、その感触をつかむことから始めます。

   あなたのGitリポジトリに保持したいランダムファイルを作成することから始
めます。これがどのように機能するかを理解するために、いくつかの悪い例から
始めます:

     $ echo "Hello World" >hello
     $ echo "Silly example" >example

   これで、あなたの作業ツリー(working tree)(別名「作業ディレクトリ」
(working directory))に2つのファイルが作成されましたが、実際にあなたの作
業をチェックインするには、以下の2つの手順を実行する必要があります:

   • _index_ ファイル(別名 _cache_ ）に作業ツリーの状態に関する情報を入
     力します。

   • そのインデックスファイルをオブジェクトとしてコミットします。

   最初のステップは至極簡単です。作業ツリーへの変更についてGitに通知する
場合は、 ‘git update-index’ プログラムを使用します。このプログラムは通常
、更新するファイル名のリストを取得しますが、些細な間違いを避けるために、
‘--add’ フラグを使用して新しいエントリを追加すること(または ‘–remove‘で
エントリを削除すること)を明示的に指定しない限り、インデックスへの新しい
エントリの追加(または既存のものを削除)することを拒否します。

   したがって、作成した2つのファイルをインデックスに追加するには、以下の
ようにします

     $ git update-index --add hello example

   これで、あなたはGitにこれら2つのファイルを追跡するように指示しました
。

   実際、上記を行った後にオブジェクトディレクトリを調べると、Gitがオブジ
ェクトデータベースに2つの新しいオブジェクトを追加していることがわかりま
す。上記の手順を正確に実行した場合は、あなたは以下のように実行できます

     $ ls .git/objects/??/*

   そうすると以下の２つのファイルが見えます:

     .git/objects/55/7db03de997c86a4a028e1ebd3a1ceb225be238
     .git/objects/f2/4c74a2e500f5ee1332c86b94199f52b1d1d962

   これは、それぞれ「557db…」および「f24c7…」という名前のオブジェクトに
対応します。

   必要に応じて、 ‘git cat-file’ を使用してこれらのオブジェクトを確認で
きますが、オブジェクトのファイル名ではなく、オブジェクト名を使用する必要
があります:

     $ git cat-file -t 557db03de997c86a4a028e1ebd3a1ceb225be238

   ここで、 ‘-t’ は _git cat-file_ に、オブジェクトの「タイプ」が何であ
るかを通知させます。 Gitは、「blob」(ブロブ)オブジェクト(つまり、通常の
ファイル)があることを通知し、あなたは以下のコマンドで内容を表示できます
。

     $ git cat-file blob 557db03

   "Hello World" が出力されます。オブジェクト ‘557db03’ は、ファイル
‘hello’ の内容そのものです。

     *Note*

     そのオブジェクトをファイル ‘hello’ 自体と混同しないでください。オブ
     ジェクトは文字通りファイルの特定の「内容」(contents)であり、後でフ
     ァイル ‘hello’ の内容を変更しても、先ほど見たオブジェクトは変更され
     ません。オブジェクトは不変(immutable)です。

     *Note*

     2番目の例は、ほとんどの場所でオブジェクト名を最初の数桁の16進数にの
     みに省略できることを示しています。

   とにかく、前述したように、通常、オブジェクト自体を実際に確認すること
はありません。40文字の長い16進名を入力することは、通常は行いたくないこと
です。上記の余談は、「git update-index」が魔法のようなことをし、実際にフ
ァイルの内容をGitオブジェクトデータベースに保存したことを現しています。

   インデックスを更新すると、他のことも行います。それは、 ‘.git/index’ フ
ァイルの作成です。これは、現在の作業ツリーを説明するインデックスであり、
とても注意を払う必要があります。 繰り返しになりますが、通常はインデック
スファイル自体について心配することはありませんが、ここまでファイルを実際
にはGitに「チェックイン」しておらず、Gitに「伝えただけ」であることに注意
する必要があります。

   しなしながら、Gitはそれらについて知っているため、最も基本的なGitコマ
ンドのいくつかを使用して、ファイルを操作したり、ファイルのステータスを確
認したりできます。

   特に、この時点ではこの2つのファイルをGitにチェックインしないでくださ
い。私達は、最初に、‘hello’ に別の行を追加することから始めます:

     $ echo "It's a new day for git" >>hello

   これで、Gitに以前の ‘hello’ の状態について伝えたので、 _git
diff-files_ コマンドを使用して、古いインデックスと比較してツリーで何が変
更されたかをGitに尋ねることができます:

     $ git diff-files

   おっと、これはあまり読みやすくないですね。これは _diff_ の独自の内部
バージョンを吐き出すだけですが、その内部バージョンは、「hello」が変更さ
れたこと、および古いオブジェクトの内容が別のものに置き換えられたことに気
付いたことを示しています。

   読みやすくするために、 ‘-p’ フラグを使用して、 _git diff-files_ にパ
ッチとして差分を出力するように指示できます:

     $ git diff-files -p
     diff --git a/hello b/hello
     index 557db03..263414f 100644
     --- a/hello
     +++ b/hello
     @@ -1 +1,2 @@
      Hello World
     +It's a new day for git

   つまり、これは ‘hello’ に別の行を追加することによって引き起された変更
の diff です。

   言い換えると、 _git diff-files_ は、常に、インデックスに記録されてい
るものと、現在作業ツリーにあるものとの違いを示しています。これはとても便
利です。

   ‘git diff-files -p’ の一般的な省略形は、 ‘git diff’ と書くことで、左
記と同一の事を行います。

     $ git diff
     diff --git a/hello b/hello
     index 557db03..263414f 100644
     --- a/hello
     +++ b/hello
     @@ -1 +1,2 @@
      Hello World
     +It's a new day for git


Committing Git state
********************

次に、私達はGitの次の段階に進みます。これは、Gitが知っているファイルをイ
ンデックスより取得し、それらを実際のツリーとしてコミットすることです。こ
れは次の2つのフェーズで行います。「ツリー」オブジェクトの作成し、そして
、ツリーが何であるかについての説明と、私たちがどのようにしてその状態に到
達したかについての情報とともに、その「ツリー」オブジェクトを「コミット」
オブジェクトとしてコミットします。

   ツリーオブジェクトの作成は至極簡単で、 ‘git write-tree’ を使用します
。オプションやその他の入力はありません。 ‘git write-tree’ は現在のインデ
ックスの状態を取得し、そのインデックス全体を記述するオブジェクトを書き込
みます。つまり、現在、すべての異なるファイル名をそれらのコンテンツ(およ
びそれらのアクセス許可)と結び付けており、Gitの「ディレクトリ」オブジェク
トに相当するものを作成します:

     $ git write-tree

   これにより、結果のツリーの名前が出力されます。この場合(私が説明したと
おり正確に実行した場合)、以下のようになっているべきです

     8988da15d077d4829fc51d8544c097def6644dbb

   これは、別のワケワカメなオブジェクト名です。繰り返しになりますが、あ
なたは必要に応じて、 ‘git cat-file -t 8988d...’ を使用して、今回のオブジ
ェクトが「ブロブ」オブジェクトではなく「ツリー」オブジェクトであることを
確認できます( ‘git cat-file’ を使用して、生のオブジェクトの内容を実際に
出力することもできますが、主にごちゃごちゃしたバイナリが見れるだけであま
り面白くありません)。

   しかしながら、通常は ‘git commit-tree’ コマンドを使用してツリーをコミ
ットオブジェクトにコミットするため、通常は ‘git write-tree’ を単独で使用
することはありません。 実際のところ ‘git write-tree’ を単独で使用するの
ではなく、その結果を ‘git commit-tree’ へ引数として渡す方が簡単です。

   _git commit-tree_ は通常、いくつかの引数を取ります。 ‘git
commit-tree’ はコミットの「親」が何であるかを知りたいのですが、これはこ
の新しいリポジトリでの最初のコミットであり、親がないため、ツリーのオブジ
ェクト名を渡すだけで済みます。ただし、 ‘git commit-tree’ は、標準入力か
らコミットメッセージを取得することも必要です。そしてコミットの結果のオブ
ジェクト名を標準出力に書き出します。

   ここで、 ‘HEAD’ が指す ‘.git/refs/heads/master’ ファイルを作成します
。このファイルには、masterブランチのツリーのてっぺん(top-of-tree)への参
照が含まれているはずです。これはまさに「git commit-tree」が吐き出すもの
なので、一連の単純なシェルコマンドでこれをすべて行うことができます:

     $ tree=$(git write-tree)
     $ commit=$(echo 'Initial commit' | git commit-tree $tree)
     $ git update-ref HEAD $commit

   この場合に限り、他の何にも関係のないまったく新しいコミットが作成され
ます。 通常、これはプロジェクトに対して「1回だけ」行います。このコミット
はこの後のすべてのコミットの親になります。

   繰り返しますが、通常、これを実際に手作業で行うことはありません。 これ
らすべてを実行する ‘git commit’ という便利なスクリプトがあります。 した
がって、あなたは代わりに ‘git commit’ と記述すれば、上記の魔法のスクリプ
トが実行されます。


Making a change
***************

以前、ファイル ‘hello’ で ‘git update-index’ を実行し、その後 ‘hello’ を
変更して、 ‘hello’ の新しい状態を、インデックスファイルに保存した状態と
比較したことを覚えていますか？

   さらに、 私が ‘git write-tree’ は「インデックス」ファイルの内容をツリ
ーに書き込むと言ったことを思い出してください。したがって、コミットしたの
は、実際にはファイル ‘hello’ の「元の内容」であり、新しい内容ではありま
せん。これは、インデックスの状態と作業ツリーの状態の違い、および私達が何
かをコミットした場合でもそれらが一致する必要がない事を示すために意図的に
行いました。

   以前と同様に、git-tutorialプロジェクトで ‘git diff-files -p’ を実行し
た場合でも、前回と同一の差異が見られます。つまり、何かをコミットすること
によってインデックスファイルが変更されていないということです。ただし、私
達は何かをコミットしたので、新しいコマンド ‘git diff-index’ の使用方法を
学ぶこともできます:

   インデックスファイルと作業ツリーの違いを示した ‘git diff-files’ とは
異なり、 ‘gitdiff-index’ はコミットされたツリーと、インデックスファイル
または作業ツリーとの違いを示します。言い換えると、 ‘git diff-index’ はツ
リーとの差分することを望んでおり、コミットする前は、そもそも差分するモノ
がなかったため、差分を行うことができませんでした。

   しかし、今や私達は以下のようにできます

     $ git diff-index -p HEAD

   (ここで、‘-p’ は ‘git diff-files’ のと同じ意味です。) 同一の差異が表
示されますが、理由はまったく異なります。これは、作業ツリーを、インデック
スファイルではなく、作成したツリーと比較しています。たまたまこれら2つが
明らかに同じであるため、私達は同じ結果を得たのです。

   繰り返しになりますが、これは一般的な操作であるため、以下のように短縮
することもできます

     $ git diff HEAD

   これで、結局は上記のようなことをやってくれます。

   つまり、 ‘git diff-index｀ は通常、ツリーを作業ツリーと比較しますが、
`--cached’ フラグを指定すると、代わりにインデックスキャッシュの内容と比
較し、現在の作業ツリーの状態を完全に無視するように指示します。我々はイン
デックスファイルをHEADに書き込んだばかりなので、 ‘git diff-index
--cached -p HEAD’ を実行すると、空の差分セットを返すはずで、これは正に指
示したとおりの結果です。

     *Note*

     ‘git diff-index’ は実際には「常に」その比較にインデックスを使用する
     ため、ツリーを作業ツリーと比較すると言ったことは厳密には正確ではあ
     りません。特に、比較するファイルのリスト(「メタデータ」
     (meta-data))は、 ‘--cached’ フラグが使用されているかどうかに関係な
     く、常にインデックスファイルから取得されます。 ‘--cached’ フラグは
     、実際には、比較されるファイルの「内容」が作業ツリーからのものであ
     るか否かを決定するだけです。

     これを理解するのは難しいことでは無く、すぐにあなたは、Gitが明示的に
     通知されていないファイルを知らない(または気にしない)ことに気付きま
     す。Gitは比較するファイルを「探す」ことは決してありません。ファイル
     が何であるかを教えて貰えることを期待しており、それがインデックスの
     目的なのです。

   ただし、私達の次のステップは、私達の行った変更をコミットすることです
。繰り返しますが、何が起こっているのかを理解するために、「作業ツリーの内
容」と「インデックスファイル」と「コミットされたツリー」の違いに注意して
ください。私達がコミットしたい作業ツリーに変更があり、私達は常にインデッ
クスファイルを処理する必要があるため、したがって、私達が最初に行う必要が
あるのは、インデックスキャッシュを更新することです:

     $ git update-index hello

   (注意: Gitはファイルについてすでに知っていたので、私達は今回は
‘--add’ フラグを必要としなかったことに注意してください)。

   注意: ここで、個別の ‘git diff-{asterisk}’ バージョンには何が起こるで
しょうか。我々がインデックス内の ‘hello’ を更新した後、 ‘git diff-files
-p’ は、違いを示さなくなりましたが、 ‘git diff-index -p HEAD’ は、現在の
状態がコミットした状態とは異なることを示しています。 実際、 ‘git
diff-index’ は、 ‘--cached’ フラグを使用するかどうかに関係なく同一の違い
を示します。これは、インデックスは作業ツリーと一貫性があるためです。

   これで、我々はインデックス内の ‘hello’ を更新したので、我々は新しいバ
ージョンをコミットできます。我々はもう一度手動でツリーを作成し、ツリーを
コミットすることでそれを行うことができます(今回は、 ‘-p HEAD’ フラグを使
用して、HEADが新しいコミットの「親」であり、これが最初のコミットではなく
なったことをコミットに通知する必要があります)。しかし、あなたはすでに一
度この手作業を経験済みですので、今回は役立つスクリプトを使用してみましょ
う:

     $ git commit

   これにより、あなたがコミットメッセージを書き込むためのエディタが起動
し、あなたがさっきやった事についてちょっぴり教えてくれます。

   あなたが必要なメッセージを書き込むと、 ‘#’ で始まるすべての行が削除さ
れ、残りはこの変更のコミットメッセージとして使用されます。あなたがこの時
点で結局何もコミットしたくないと判断した場合(あなたは引き続き編集してイ
ンデックスを更新できます)、あなたは空のメッセージを残すことができます。
それ以外の場合、 ‘git commit’ は変更をコミットします。

   これで、最初の実際のGitコミットが完了しました。 ‘git commit’ が実際に
何をするのかを知りたい場合は、お気軽に調査してください。役立つ(？)コミッ
トメッセージヘッダーを生成するための非常に単純なシェルスクリプトがいくつ
かあり、そして実際にコミット自体を行ういくつかのワンライナーがあります
(‘git commit’)。


Inspecting Changes
******************

変更を作成することは便利ですが、後で何が変更されたかを知ることができれば
さらに便利です。このための最も便利なコマンドは、diffファミリーのもう1つ
、つまり ‘git diff-tree’ です。

   ‘git diff-tree’ には任意の2つのツリーを指定でき、それらの間の違いがわ
かります。けれども、おそらくもっと一般的には、あなたはコミットオブジェク
トを1つだけ与えることができ、そうすると、そのコミット自体の親を把握し、
違いを直接表示します。したがって、すでに数回見たのと同一のdiffを取得する
ために、以下のようにすることができます

     $ git diff-tree -p HEAD

   (繰り返しになりますが、 ‘-p’ は人間が読めるパッチとして違いを表示する
ことを意味します)、(‘HEAD’ が指す)最後のコミットが実際に何を変更したかを
表示します。

     *Note*

     以下は、さまざまな ‘diff-{asterisk}’ コマンドが物事を比較する方法を
     表す、Jon Loeliger によるアスキーアートです。

                      diff-tree
                       +----+
                       |    |
                       |    |
                       V    V
                    +-----------+
                    | Object DB |
                    |  Backing  |
                    |   Store   |
                    +-----------+
                      ^    ^
                      |    |
                      |    |  diff-index --cached
                      |    |
          diff-index  |    V
                      |  +-----------+
                      |  |   Index   |
                      |  |  "cache"  |
                      |  +-----------+
                      |    ^
                      |    |
                      |    |  diff-files
                      |    |
                      V    V
                    +-----------+
                    |  Working  |
                    | Directory |
                    +-----------+

   さらに興味深いことに、 ‘git diff-tree’ に ‘--pretty’ フラグを指定する
こともできます。これにより、コミットメッセージと作者とコミットの日付も表
示され、一連のdiff全体を表示するように指示します。または、「黙って」
(silent)と指示して、差分をまったく表示せずに実際のコミットメッセージを表
示することもできます。

   実際には、 (リビジョンのリストを生成する) ‘git rev-list’ プログラムと
一緒に使うことで、 ‘git diff-tree’ は、正に変更の源泉と化します。 ‘git
rev-list’ の出力を ‘git diff-tree --stdin’ にパイプする簡単なスクリプト
を使用して、 ‘git log’ や ‘git log -p’ などをエミュレートできます。これ
は正に初期バージョンの ‘git log’ が実装された方法でした。


Tagging a version
*****************

Gitには、「軽い」(light)タグと「注釈付きタグ」(annotated tag)の2種類のタ
グがあります。

   「軽い」タグは、 ヘッドと呼ぶ代わりに ‘.git/refs/tags/’ サブディレク
トリに配置することを除いて、技術的にはブランチ以上のものではありません。
したがって、最も単純な形式のタグは以下のようになります

     $ git tag my-first-tag

   これは、現在の HEAD を ‘.git/refs/tags/my-first-tag’ ファイルに書き込
むだけです。その後は、その特定の状態にこのシンボル名を使用できます。たと
えば、以下のことができます

     $ git diff my-first-tag

   あなたの現在の状態をそのタグとdiffします。この時点では明らかに空の
diffになりますが、あなたが開発とコミットを続ければ、タグを「アンカーポイ
ント」として使用して、あなたがタグを付けてから何が変更されたかを確認でき
ます。

   「注釈付きタグ」(annotated tag)は現実には実際のGitオブジェクトです。
タグ付けする状態へのポインタだけでなく、小さなタグ名とメッセージ、および
オプションで「はい、あなたは実際にそのタグを作成した」というPGP署名もあ
ります。これらの注釈付きタグは、 ‘git tag’ に対して ‘-a’ または ‘-s’ フ
ラグを使用して作成します:

     $ git tag -s <tagname>

   これは現在の‘HEAD‘に署名します(しかし、あなたはタグ付けするものを指定
する別の引数を指定することもできます。たとえば、 ‘git tag <tagname>
mybranch’ を使用して現在の ‘mybranch’ ポイントにタグを付けることができま
す)。

   あなたは、通常は、メジャーリリースなどの署名付きタグ付けのみを行いま
すが、軽量タグ(light-weight tags)は、あなたがマーキングしたい時に便利で
す。つまり、特定のポイントを覚えておきたいと思ったときはいつでも、そのポ
イントのプライベートタグを作成するだけで、その時点の状態の適切なシンボル
名が得られます。


Copying repositories
********************

Gitリポジトリは通常、完全に自給自足で再配置可能です。たとえば、CVSとは異
なり、「リポジトリ」と「作業ツリー」という別個の概念はありません。Gitリ
ポジトリは通常、作業ツリーであり、ローカルのGit情報は ‘.git’ サブディレ
クトリに隠されています。他には何もありません。あなたが見たそのままです。

     *Note*

     あなたは、追跡中のディレクトリからGitの内部情報を分割するように
     Gitに指示できますが、我々は今のところはそれを無視します。なぜならそ
     れは、通常のプロジェクトの仕組みでなく、本当に特別な用途のためだけ
     のものだからです。よって、「Git情報は、それが記述する作業ツリーに常
     に直接関連付けられている」という概念は技術的には100%正確ではない可
     能性がありますが、通常はそれで通ります。

   これには2つの意味があります:

   • あなたが、作成したチュートリアルリポジトリに飽きてしまった場合(また
     は間違えて最初からやり直したい場合)は、単純に以下のようにするだけで
     す

          $ rm -rf git-tutorial

     そしてそれはなくなります。外部リポジトリはありませんし、あなたが作
     成したプロジェクト以外に履歴はありません。

   • あなたがGitリポジトリを移動または複製する場合は、あなたはそうするこ
     とができます。 ‘git clone’ コマンドがありますが、リポジトリ(と、そ
     れに伴うすべての完全な履歴とともに)のコピーを作成するだけの場合は、
     通常の ‘cp -a git-tutorial new-git-tutorial’ を使用して作成できます
     。

     注意: Gitリポジトリを移動またはコピーした場合、Gitインデックスファ
     イル(さまざまな情報、特に関連するファイルの「統計」情報の一部をキャ
     ッシュする)を更新する必要がある可能性があることに注意してください。
     したがって、 ‘cp -a’ を実行して新しいコピーを作成した後、あなたは以
     下を実行する必要があります

          $ git update-index --refresh

     これは、新しいリポジトリで、インデックスファイルが最新であることを
     確認します。

   注意: 2番目のポイントは、PC間でも当てはまることに注意してください。
scpやrsyncやwget等々、通常のコピーメカニズムを使用してリモートGitリポジ
トリを複製できます。

   リモートリポジトリをコピーするときは、あなたは、これを行うときに少な
くともインデックスキャッシュを更新する必要があります。特に、他の人のリポ
ジトリでは、インデックスキャッシュが既知の状態(あなたには、彼らが何をし
たのか、まだチェックインしていないのかわかりません)にあることを確認する
必要があるため、通常は ‘git update-index’ の前に以下のようにします。

     $ git read-tree --reset HEAD
     $ git update-index --refresh

   これにより、‘HEAD’ が指すツリーからインデックス全体が再構築されます。
それはインデックスの内容を ‘HEAD’ にリセットし、 ‘git update-index’ がす
べてのインデックスエントリをチェックアウトされたファイルと一致させるよう
にします。元のリポジトリの作業ツリーにコミットされていない変更があった場
合、 ‘git update-index --refresh’ はそれらに気づき、更新する必要があるこ
とをあなたに通知します。

   上記は以下のように簡単に書くこともできます

     $ git reset

   実際、一般的なGitコマンドの組み合わせの多くは、 ‘git xyz’ インターフ
ェースを使用してスクリプト化できます。あなたは、さまざまなgitスクリプト
が何をするかを見るだけで、物事を学ぶことができます。たとえば、 ‘git
reset’ は、以前は上記2行を記述したものでした。ただし、 ‘git status’ や
‘git commit’ などのいくつかは、基本的なGitコマンドを中心とした少し複雑な
スクリプトです。

   多くの(ほとんどの？)パブリックリモートリポジトリには、チェックアウト
されたファイルやインデックスファイルすら含まれず、実際のコアGitファイル
のみが含まれます。このようなリポジトリには通常、 ‘.git’ サブディレクトリ
すらなく、すべてのGitファイルが直接リポジトリにあります。

   このような「生の」Gitリポジトリのあなた独自のローカルな活きたコピー
(local live copy)を作成するには、最初にプロジェクト用の独自のサブディレ
クトリを作成し、次に生のリポジトリの内容を ‘.git’ ディレクトリにコピーし
ます。たとえば、Gitリポジトリのあなた独自のコピーを作成するには、以下の
ようにします

     $ mkdir my-git
     $ cd my-git
     $ rsync -rL rsync://rsync.kernel.org/pub/scm/git/git.git/ .git

   これに、以下が続きます

     $ git read-tree HEAD

   インデックスにデータを入力します。ただし、これでインデックスにデータ
が入力され、すべてのGit内部ファイルが作成されましたが、実際に作業するツ
リーファイルがないことに気付くでしょう。 それらを取得するには、以下のよ
うにしてそれらをチェックアウトします

     $ git checkout-index -u -a

   ここで、 ‘-u’ フラグは、(後で更新する必要がないように)チェックアウト
でインデックスを最新の状態に保つことを意味し、 ‘-a’ フラグは「すべてのフ
ァイルをチェックアウトする」ことを意味します(古いコピーまたはチェックア
ウトされたツリーの古いバージョンがある場合は、最初に ‘-f’ フラグを追加し
て、 ‘git checkout-index’ に古いファイルの上書きを「強制」するように指示
する必要がある事があります)。

   繰り返しますが、これはすべて以下のように簡略化できます

     $ git clone git://git.kernel.org/pub/scm/git/git.git/ my-git
     $ cd my-git
     $ git checkout

   これは正に上記のすべてを行います。

   これで、あなたは、他の誰か誰か(またはあなた自身の)のリモートリポジト
リをコピーし、チェックアウトすることに成功しました。


Creating a new branch
*********************

Gitのブランチは、実際には ‘.git/refs/’ サブディレクトリ内からGitオブジェ
クトデータベースへのポインタにすぎません。すでに説明したように、‘HEAD’ ブ
ランチはこれらのオブジェクトポインタの1つへのシンボリックリンクにすぎま
せん。

   あなたはプロジェクト履歴の任意のポイントを選択し、そのオブジェクトの
SHA-1名を ‘.git/refs/heads/’ の下のファイルに書き込むだけで、いつでも新
しいブランチを作成できます。任意のファイル名(実際にはサブディレクトリ名
)を使用できますが、慣例では、「通常の」ブランチ(normal branch)は「
master」と呼ばれます。 ただし、これは単なる慣例であり、強制されるもので
はありません。

   これを例として示すために、以前使用したgit-tutorialリポジトリに戻り、
その中にブランチを作成しましょう。これを行うには、あなたは新しいブランチ
をチェックアウトしたいと言うだけです:

     $ git switch -c mybranch

   現在の ‘HEAD’ 位置に基づいて新しいブランチを作成し、それに切り替えま
す。

     *Note*

     あなたが、履歴の現在のHEAD以外の時点で新しいブランチを開始すること
     を決定した場合は、 ‘git switch’ にチェックアウトの起点を指定するだ
     けで開始できます。 言い換えれば、以前に作ったタグまたはブランチがあ
     る場合は以下のようにします。

          $ git switch -c mybranch earlier-commit

     そうすると、これは以前のコミットにて新しいブランチ ‘mybranch’ を作
     成し、その時の状態をチェックアウトします。

   以下のように実行することで、あなたはいつでも元の ‘master’ ブランチに
戻ることができます

     $ git switch master

   (または、その他のブランチ名を指定します。) そして、あなたがたまたまど
のブランチにいるのかを忘れた場合は、単純に以下のようにします。

     $ cat .git/HEAD

   とすると、それが指している場所を教えてくれます。あなたが持っているブ
ランチのリストを取得するには、以下のようにします。

     $ git branch

   これは、以前は、 ‘ls .git/refs/heads’ を囲む単純なスクリプトにすぎま
せんでした。それはそれとして、これは、現在使用しているブランチの前にアス
タリスクが表示されます。

   実際にチェックアウトして切り替えることなく、新しいブランチを作成した
い場合があります。その場合は、以下のコマンドを使用してください

     $ git branch <branchname> [startingpoint]

   これは単にブランチを作成しますが、それ以上は何もしません。 その後 — そ
のブランチで実際に開発することを決定したら — 引数としてブランチ名を使用
して、通常の ‘git switch ‘を使用してそのブランチに切り替えることができま
す。


Merging two branches
********************

ブランチを持つことのアイデアの1つは、ブランチでいくつかの(おそらく実験的
な)作業を行い、最終的にそれをメインブランチにマージすることです。したが
って、元の ‘master’ ブランチと同じである、上記の ‘mybranch’ を作成したと
仮定して、我々がそのブランチにいることを確認し、そこでいくつかの作業を行
いましょう。

     $ git switch mybranch
     $ echo "Work, work, work" >>hello
     $ git commit -m "Some work." -i hello

   ここでは、 ‘hello’ に別の行を追加し、 ‘-i’ フラグ(コミット時にこれま
でにインデックスファイルに対して行ったことに加えて、そのファイルを「含め
る」ようにGitに指示)を使用してファイル名を ‘git commit’ に直接指定する、
‘git update-index hello’ と ‘git commit’ の両方を実行するための省略形を
使用しました。 ‘-m’ フラグは、コマンドラインからコミットログメッセージを
指定するためのものです。

   ここで、もう少し面白くするために、他の誰かが元のブランチで何らかの作
業を行っていると仮定し、マスターブランチに戻って同じファイルを別の方法で
編集することにより、それをシミュレートします:

     $ git switch master

   ここで、 ‘hello’ の内容を確認して、あなたが ‘mybranch’ で行った作業が
含まれていないことに注目してください。その作業は ‘master’ ブランチではま
ったく行われていないためです。確認後、以下のようにします

     $ echo "Play, play, play" >>hello
     $ echo "Lots of fun" >>example
     $ git commit -m "Some fun." -i hello example

   masterブランチもいい感じになってきました。

   いまや、2つのブランチがあり、あなたは完了した作業をマージすることにし
ました。 その前に、何が起こっているのかを確認するのに役立つクールなグラ
フィカルツールを紹介しましょう:

     $ gitk --all

   あなたのブランチ(これが ‘--all’ の意味です。通常は、現在の ‘HEAD’ が
表示されます)とその履歴の両方をグラフィカルに表示します。また、それらが
どのようにして共通のソースから得られたのかを正確に確認することもできます
。

   とにかく、 _gitk_ を終了( ‘^Q’ または Fileメニュー)し、 ‘mybranch’ ブ
ランチで行った作業を ‘master’ ブランチ（現在は ‘HEAD’ でもあります)にマ
ージすることにします。これを行うために、 ‘git merge’ と呼ばれる優れたス
クリプトがあり、それは、あなたがどのブランチを解決したいのか、そのマージ
が何なのかを知りたがっています:

     $ git merge -m "Merge work in mybranch" mybranch

   マージを自動的に解決できる場合は、最初の引数がコミットメッセージとし
て使用されます。

   さて、今回は、マージを手動で修正する必要がある状況を意図的に作成した
ので、Gitは可能な限り多くのことを自動的に実行(この場合は、 ‘mybranch’ ブ
ランチの、差異がない ‘example’ ファイルをマージするだけ)した上で、以下の
ように言います:

             Auto-merging hello
             CONFLICT (content): Merge conflict in hello
             Automatic merge failed; fix conflicts and then commit the result.

   これは、「自動マージ」(Automatic merge)を実行したら ‘hello’ の競合が
原因で失敗したと表示しています。

   でも心配無用。これにより、あなたがCVSを使ったことがあるなら既に慣れて
いる形式で ‘hello’ に競合を残したので、エディタで ‘hello’ を開いて、なん
とかして修正しましょう。私は ‘hello‘に4行すべてが含まれるようにすること
を提案することにします:

     Hello World
     It's a new day for git
     Play, play, play
     Work, work, work

   手動マージに満足したら、以下の手順を実行します。

     $ git commit -i hello

   これは、現在マージをコミットしていることを非常に大声で警告します(今回
は正しい事をしているので、警告は気にしないでください)。また、あなたは
‘git merge’ 遊園地でのあなたの冒険についての小さなマージメッセージを書く
ことができます。

   完了したら、 ‘gitk --all’ を起動して、履歴がどのように表示されるかを
グラフィカルに確認します。 ‘mybranch’ はまだ存在していることに注意してく
ださい。これに切り替えて、必要に応じて作業を続けることができます。
‘mybranch’ ブランチにはそのマージが含まれませんが、次回 ‘master’ ブラン
チにてそれをマージするときに、Gitはそれがどのようにマージされたかを知っ
ているため、再度マージを行う必要はありません。

   X-Window環境で常に作業するわけではない場合、もう1つの便利ツールは、
‘git show-branch’ です。

     $ git show-branch --topo-order --more=1 master mybranch
     * [master] Merge work in mybranch
      ! [mybranch] Some work.
     --
     -  [master] Merge work in mybranch
     *+ [mybranch] Some work.
     *  [master^] Some fun.

   最初の2行は、ツリーの最上位コミットのタイトル付の2つのブランチを示し
ています。あなたは現在(アスタリスク ‘*’ 文字に注意)、 ‘master’ ブランチ
を使用しており、その後の出力行は、 ‘master’ ブランチに含まれるコミットと
、 ‘mybranch’ ブランチの行の2桁目(‘+’)を表示するために使用されます。3つ
のコミットがタイトルとともに表示されます。それらはすべて1桁目に空白以外
の文字があり( ‘*’ は現在のブランチでの通常のコミットを示し、‘-’ はマージ
コミットです)、これはそれらが現在 ‘master’ ブランチの一部であることを意
味します。 ‘mybranch’ はmasterブランチからのこれらのコミットを組み込むた
めにマージされていないため、「Some work」コミットのみが2桁目にプラスの
‘+’ 文字を持っています。コミットログメッセージの前の括弧内の文字列は、コ
ミットに名前を付けるために使用できる短い名前です。上記の例では、
"master" と "mybranch" がブランチヘッドです。 "master^" は "master" ブラ
ンチヘッドの最初の親です。より複雑なケースを確認したい場合は、
gitrevisions(7) を参照してください。

     *Note*

     _–more=1_ オプションがないと、 _[mybranch]_ コミット は _master_ と
     _mybranch_ の両方の先端の共通の祖先であるため、 ‘git show-branch’ は
     ’[master^] コミットを出力しません。詳細については、
     git-show-branch(1) を参照してください。

     *Note*

     マージ後に ‘master’ ブランチにさらにコミットがあった場合、‘git
     show-branch’ はデフォルトではマージコミット自体を表示しません。この
     場合、マージコミットを表示するには、 ‘--sparse’ オプションを指定す
     る必要があります。

   さて、あなたが ‘mybranch’ ですべての作業を行ったとしましょう。そして
、あなたの努力の成果がついに ‘master’ ブランチに統合されました。あなたは
‘mybranch‘に戻り、 _git merge_ を実行して、「アップストリームの変更」を
あなたのブランチに戻しましょう。

     $ git switch mybranch
     $ git merge -m "Merge upstream changes." master

   これは以下のようなものを出力します(実際のコミットオブジェクト名は異な
ります)

     Updating from ae3a2da... to a80b4aa....
     Fast-forward (no commit created; -m option ignored)
      example | 1 +
      hello   | 1 +
      2 files changed, 2 insertions(+)

   あなたのブランチにはすでに ‘master’ ブランチにマージされたもの以外の
ものが含まれていなかったため、マージ操作は実際にはマージを実行しませんで
した。代わりに、あなたのブランチのツリーのトップを ‘master’ ブランチのツ
リーのトップに更新しました。これはしばしば「早送り」(fast-forward)マージ
と呼ばれます。

   あなたは再び ‘gitk --all’ を実行して、コミットの祖先がどのように見え
るかを確認するか、 ‘show-branch’ を実行して表示します。

     $ git show-branch master mybranch
     ! [master] Merge work in mybranch
      * [mybranch] Merge work in mybranch
     --
     -- [master] Merge work in mybranch


Merging external work
*********************

通常、自分のブランチとマージするよりも、他の誰かのとマージする方がはるか
に一般的です。そして、Gitを使用すると、これも非常に簡単になります。事実
、 ‘git merge’ を実行するのとそれほど違いはありません。 実際、リモートマ
ージは、「リモートリポジトリから一時的タグ(temporary tag)に作業をフェッ
チする」だけで、その後に ‘git merge’ が続きます。

   リモートリポジトリからのフェッチは、ご想像の通り、 ‘git fetch’ によっ
て行われます:

     $ git fetch <remote-repository>

   以下の転送方法(transport)のいずれかを使用して、ダウンロード元のリポジ
トリに名前を付けることができます:

SSH
     ‘remote.machine:/path/to/repo.git/’ または

     ‘ssh://remote.machine/path/to/repo.git/’

     この転送方法(transport)はアップロードとダウンロードの両方に使用でき
     、リモートマシンへの ‘ssh’ を介したログイン権限が必要です。転送元と
     転送先が持つヘッドコミットを交換し、オブジェクトの最小組を(限定的に
     )転送することにより、反対側に欠けているオブジェクトの組を見つけます
     。これは、リポジトリ間でGitオブジェクトを交換するための最も効率的な
     方法です。

ローカルディレクトリ
     ‘/path/to/repo.git/’

     この転送方法はSSH転送と同じですが、 ‘ssh’ を介してリモートマシンで
     もう一方の端を実行する代わりに、 ‘sh’ を使用してローカルマシンで転
     送元と転送先で実行します。

Gitネイティブ
     ‘git://remote.machine/path/to/repo.git/’

     この転送方法は、匿名(anonymous)でダウンロードするために設計されまし
     た。SSH転送と同様に、ダウンストリーム側にないオブジェクトの組を検出
     し、最小のオブジェクトの組を(限定的)転送します。

HTTP(S)
     ‘http://remote.machine/path/to/repo.git/’

     http URL や https URL からのダウンローダーは、最初に、
     ‘repo.git/refs/’ ディレクトリの下にある指定のref名を調べて、リモー
     トサイトから最上位のコミットオブジェクト名を獲得し、それから、その
     コミットオブジェクトのオブジェクト名を使用して
     ‘repo.git/objects/xx/xxx...’ からダウンロードすることにより、コミッ
     トオブジェクトの取得を試みます。次に、そのコミットオブジェクトを読
     み取り、その親コミットと関連するツリーオブジェクトを見つけます。必
     要なすべてのオブジェクトを取得するまで、このプロセスを繰り返します
     。この動作のため、これらは「コミットウォーカー」(commit walkers)と
     呼ばれることもあります。

     「コミットウォーカー」(commit walkers)は、Gitネイティブ転送のように
     Git対応のスマートサーバーを必要としないため、「バカ転送」(dumb
     transports)と呼ばれることもあります。ディレクトリインデックスさえサ
     ポートしていないストックHTTPサーバーで十分です。 ただし、バカ転送ダ
     ウンローダー(dumb transport downloaders)を支援するには、 ‘git
     update-server-info’ を使用してリポジトリを準備する必要があります。

   リモートリポジトリからフェッチしたら、あなたはそれを現在のブランチに
「マージ」します。

   ただし、「フェッチ」してすぐに「マージ」するのは非常に一般的なことな
ので、 ‘git pull’ を使えば簡単に実行できます:

     $ git pull <remote-repository>

   そして、オプションで、リモート側のブランチ名を2番目の引数として指定し
ます。

     *Note*

     あなたが持ちたいブランチの数のローカルリポジトリを保持し、ブランチ
     間のマージと同様に ‘git pull’ でそれらの間のマージを行うことで、ブ
     ランチを全く使用しないことも可能です。このアプローチの利点は、チェ
     ックアウトされた各々「ブランチ」のファイルの組を保持できることです
     。複数の開発ラインを同時に調整すると、切り替えが簡単になる場合があ
     ります。もちろん、複数の作業ツリーを保持するためにディスク使用量を
     増やすという代償を払うことにはなりますが、最近のディスク容量は安価
     です。

   あなたは同じリモートリポジトリからしばしばプルする可能性があります。
なので略記法として、リモートリポジトリのURLをローカルリポジトリの設定フ
ァイルに以下のように保存できます:

     $ git config remote.linus.url http://www.kernel.org/pub/scm/git/git.git/

   そして、完全なURLの代わりに ‘git pull’ で "linus" キーワードを使用し
ます。

   例:

  1. ‘git pull linus’

  2. ‘git pull linus tag v0.99.1’

   上記は以下と同じです:

  1. ‘git pull http://www.kernel.org/pub/scm/git/git.git/ HEAD’

  2. ‘git pull http://www.kernel.org/pub/scm/git/git.git/ tag v0.99.1’


How does the merge work?
************************

このチュートリアルでは、動作しない磁器コマンドに対処するために配管コマン
ドがどのように機能するかを示していますが、これまでのところ、マージが実際
にどのように機能するかについては説明していません。あなたがこのチュートリ
アルを初めて読む時は、「Publishing your work」セクションにスキップして、
後でここに戻ってくることをお勧めします。

   上記を了承したとして、続きをやります。例を示すために、 ‘hello’ ファイ
ルと ‘example’ ファイルを使用した以前のリポジトリに戻り、マージ前の状態
に戻しましょう:

     $ git show-branch --more=2 master mybranch
     ! [master] Merge work in mybranch
      * [mybranch] Merge work in mybranch
     --
     -- [master] Merge work in mybranch
     +* [master^2] Some work.
     +* [master^] Some fun.

   ‘git merge’ を実行する前は、 ‘master’ ヘッドが "Some fun." コミット、
‘mybranch’ ヘッドが "Some work." コミットだったことを思い出してください
。

     $ git switch -C mybranch master^2
     $ git switch master
     $ git reset --hard master^

   巻き戻し後、コミット構造は以下のようになります:

     $ git show-branch
     * [master] Some fun.
      ! [mybranch] Some work.
     --
     *  [master] Some fun.
      + [mybranch] Some work.
     *+ [master^] second commit.

   これで、手動でマージを試す準備ができました。

   ‘git merge’ コマンドは、2つのブランチをマージするときに、3方向マージ
アルゴリズムを使用します。 まず、それらの間の共通の祖先を見つけます。使
用するコマンドは ‘git merge-base’ です:

     $ mb=$(git merge-base HEAD mybranch)

   このコマンドは、共通の祖先のコミットオブジェクト名を標準出力に書き込
むため、我々は次のステップで使用するため、その出力を変数にキャプチャしま
した。ちなみに、今回は、共通の祖先コミットは「second commit.」コミットで
す。あなたはそれを以下のように言うことができます:

     $ git name-rev --name-only --tags $mb
     my-first-tag

   共通の祖先コミットを見つけた後の、2番目のステップは以下のとおりです:

     $ git read-tree -m -u $mb HEAD mybranch

   これは、すでに見たのと同じ ‘git read-tree’ コマンドですが、前の例とは
異なり、3つのツリーが必要です。 これにより、各ツリーの内容がインデックス
ファイルの異なる「ステージ」に読み込まれます(最初のツリーはステージ1に、
2番目はステージ2に、等)。3つのツリーを3つのステージに読み取った後、3つの
ステージで同じパスがある場合はステージ0に「折りたたまれます」
(collapsed)。また、3つのステージのうちの2つで同じパスは、ステージ0に折り
たたまれ、ステージ1と異なるステージ2またはステージ3のいずれかからSHA-1を
取得します(つまり、共通の祖先から片側だけが変更されます)。

   「折りたたみ」(collapsing)操作の後、3つのツリーで異なるパスはゼロ以外
のステージに残されます。この時点で、以下のコマンドを使用してインデックス
ファイルを調査できます:

     $ git ls-files --stage
     100644 7f8b141b65fdcee47321e399a2598a235a032422 0       example
     100644 557db03de997c86a4a028e1ebd3a1ceb225be238 1       hello
     100644 ba42a2a96e3027f3333e13ede4ccf4498c3ae942 2       hello
     100644 cc44c73eb783565da5831b4d820c962954019b69 3       hello

   私達の2つのファイルのみの例では、変更されていないファイルがなかったた
め、 ‘example’ のみが折りたたまれました。 しかし、実際の大規模なプロジェ
クトでは、1回のコミットで変更されるファイルの数が少ない場合、この「折り
たたみ」はほとんどのパスをかなり迅速にマージする傾向があり、ゼロ以外のス
テージでの実際の変更はほんの一握りになります。

   ゼロ以外のステージのみを確認するには、 ‘--unmerged’ フラグを使用しま
す:

     $ git ls-files --unmerged
     100644 557db03de997c86a4a028e1ebd3a1ceb225be238 1       hello
     100644 ba42a2a96e3027f3333e13ede4ccf4498c3ae942 2       hello
     100644 cc44c73eb783565da5831b4d820c962954019b69 3       hello

   マージの次のステップは、3方向マージを使用して、これら3つのバージョン
のファイルをマージすることです。これは、 ‘git merge-index’ コマンドの引
数の1つとして ‘git merge-one-file’ コマンドを指定することによって行われ
ます:

     $ git merge-index git-merge-one-file hello
     Auto-merging hello
     ERROR: Merge conflict in hello
     fatal: merge program failed

   ‘git merge-one-file’ スクリプトは、これら3つのバージョンを記述するた
めのパラメーターを使用して呼び出され、マージ結果を作業ツリーに残す役割を
果たします。 これはかなり単純なシェルスクリプトであり、最終的にはRCSスイ
ートから ‘merge’ プログラムを呼び出して、ファイルレベルの3方向マージを実
行します。今回は、 ‘merge’ は競合を検出し、競合マークのあるマージ結果が
作業ツリーに残ります。これは、この時点で ‘ls-files --stage’ を再度実行す
ると確認できます:

     $ git ls-files --stage
     100644 7f8b141b65fdcee47321e399a2598a235a032422 0       example
     100644 557db03de997c86a4a028e1ebd3a1ceb225be238 1       hello
     100644 ba42a2a96e3027f3333e13ede4ccf4498c3ae942 2       hello
     100644 cc44c73eb783565da5831b4d820c962954019b69 3       hello

   これは、 ‘git merge’ が制御を返した後のインデックスファイルと作業ファ
イルの状態であり、競合するマージを解決できるようにします。 パス ‘hello’
はまだマージされておらず、この時点で ‘git diff’ で表示されるのは、ステー
ジ2(つまり、あなたのバージョン)との違いであることに注意してください。


Publishing your work
********************

そういうわけで、私達はリモートリポジトリから他の人の作業を使用することは
できますが、他の人がリポジトリからプルできるようにリポジトリを作成するに
は、あなたはどうすればよいのでしょうか？

   あなたのプライマリリポジトリが ‘.git’ サブディレクトリとしてその下に
ぶら下がっているあなたの作業ツリーで実際の作業を行っています。あなたはそ
のリポジトリにリモートでアクセスできるようにして、そこからプルするように
人々に依頼することも可能ですが、実際には、それは通常の方法ではありません
。推奨される方法は、パブリックリポジトリを用意し、他の人がアクセスできる
ようにすることです。あなたのプライマリ作業ツリーに加えた変更がよい状態に
なったら、そこからパブリックリポジトリを更新します。これはしばしば「プッ
シュ」(pushing)と呼ばれます。

     *Note*

     このパブリックリポジトリはさらにミラーリングされる可能性があり、そ
     れが ‘kernel.org’ のGitリポジトリの管理方法です。

   ローカル(プライベート)リポジトリからリモート(パブリック)リポジトリに
変更を公開するには、リモートマシンでの書き込み権限が必要です。単一のコマ
ンド ‘git-receive-pack’ を実行するには、そこにSSHアカウントが必要です。

   まず、パブリックリポジトリを格納する空のリポジトリをリモートマシンに
作成する必要があります。この空のリポジトリは、後でプッシュすることで、デ
ータが設定され、最新の状態に保たれる。明らかに、このリポジトリの作成は
1度だけ実行する必要があります。

     *Note*

     ‘git push’ は、ローカルマシンでは ‘git send-pack’ 、リモートマシン
     では ‘git-receive-pack’ というコマンドのペアを使用します。ネットワ
     ークを介した2つのコマンドの間の通信は、内部でSSH接続を使用します。

   あなたのプライベートリポジトリのGitディレクトリは通常 ‘.git’ ですが、
パブリックリポジトリはプロジェクト名にちなんで名付けられていることがよく
あります。つまり ‘<project>.git’ です。 プロジェクト ‘my-git’ のこのよう
なパブリックリポジトリを作成しましょう。リモートマシンにログインした後、
以下のように空のディレクトリを作成します:

     $ mkdir my-git.git

   次に、 _git init_ を実行してそのディレクトリをGitリポジトリにしますが
、今回はその名前が通常の ‘.git’ ではないため、我々は少し異なる方法で処理
します:

     $ GIT_DIR=my-git.git git init

   あなたが選択した転送方法(transport)を介して変更をプルする他のユーザー
がこのディレクトリを使用できることを確認してください。 また、あなたは
‘$PATH’ 上に _git-receive-pack_ プログラムがあることを確認する必要があり
ます。

     *Note*

     sshdの多くのインストールでは、あなたがプログラムを直接実行するとき
     に、ログインシェルとしてあなたのシェルが呼び出されません。これが意
     味するのは、ログインシェルが ‘bash’ の場合、 ‘.bashrc’ のみが読み取
     られ、 ‘.bash_profile’ は読み取られないということです。 回避策とし
     て、あなたが ‘git-receive-pack’ プログラムを実行できるように、
     ‘.bashrc’ で ‘$PATH’ を設定していることを確認してください。

     *Note*

     あなたがこのリポジトリを公開してhttp経由でアクセスする場合は、この
     時点で ‘mv my-git.git/hooks/post-update.sample
     my-git.git/hooks/post-update’ を実行する必要があります。これにより
     、このリポジトリにプッシュするたびに、 ‘git update-server-info’ が
     実行されます。

   これで、あなたの「パブリックリポジトリ」であなたの変更を受け入れる準
備が整いました。あなたのプライベートリポジトリがあるマシンに戻ってくださ
い。 そこから、以下のコマンドを実行します:

     $ git push <public-host>:/path/to/my-git.git master

   これにより、あなたのパブリックリポジトリが同期され、指定のブランチヘ
ッド(つまり、この場合は ‘master’)と、あなたの現在のリポジトリ内のそれら
から到達可能なオブジェクトが一致します。

   実例として、以下は私のパブリックGitリポジトリを更新する方法です。
Kernel.orgミラーネットワークは、他の公開されているマシンへの伝播を処理し
ます:

     $ git push master.kernel.org:/pub/scm/git/git.git/


Packing your repository
***********************

以前、私達は作成したGitオブジェクトごとに ‘.git/objects/??/’ ディレクト
リの下に1つのファイルが保存されていることを確認しました。この表現は、ア
トミックかつ安全に作成するには効率的ですが、ネットワークを介した転送には
それほど便利ではありません。Gitオブジェクトは、作成されると不変であるた
め、「一緒にパックする」ことでストレージを最適化する方法があります。以下
のコマンド

     $ git repack

   は、あなたのためにそれをします。チュートリアルの例に従うと、これまで
に約17個のオブジェクトが ‘.git/objects/??/’ ディレクトリに蓄積されている
はずです。 ‘git repack’ は、パックしたオブジェクトの数を示し、パックされ
たファイルを ‘.git/objects/pack’ ディレクトリに保存します。

     *Note*

     ‘.git/objects/pack’ ディレクトリに ‘pack-*.pack’ と ‘pack-*.idx’ の
     2つのファイルがあります。これらは互いに密接に関連しているため、何ら
     かの理由で手動で別のリポジトリにコピーする場合は、必ず一緒にコピー
     する必要があります。前者はパック内のオブジェクトからのすべてのデー
     タを保持し、後者はランダムアクセスのためのインデックスを保持します
     。

   あなたが病的なほど疑り深い場合は、 ‘git verify-pack’ コマンドを実行す
ると、破損したパックがあるかどうかが検出されますが、あまり心配する必要は
ありません。私たちのプログラムは常に完璧です ;-)

   オブジェクトをパックしたら、既にパックファイルに取り込まれている、パ
ックされていないオブジェクトを残す必要はありません。

     $ git prune-packed

   これは、あなたのためにそれらを削除します。

   あなたがもの好きならば、‘git prune-packed’ を実行する前後に ‘find
.git/objects -type f’ を実行してみてください。 また、 ‘git
count-objects’ は、リポジトリ内でパックされていないオブジェクト(unpacked
objects)の数と、それらが消費しているスペースの量を示します。

     *Note*

     パックされたリポジトリでは比較的大きなパックに含まれるオブジェクト
     が比較的少ない可能性があるため、HTTP転送(transport)での ‘git pull’
     は少々面倒です。パブリックリポジトリから多くのHTTPプルが予想される
     場合は、頻繁に再パックして整理するか、まったく行わないことをお勧め
     します。

   この時点で再度 ‘git repack’ を実行すると、「Nothing new to pack.」(新
しくパックするものはありません)と表示されます。あなたが開発を続行して変
更を蓄積してから、 ‘git repack’ を再度実行すると、前回リポジトリをパック
して以降に作成されたオブジェクトを含む新しいパックが作成されます。最初の
インポートの直後にプロジェクトをパックし(プロジェクトを最初から開始する
場合を除く)、プロジェクトの活発度度に応じて、時々 ‘git repack’ を実行す
ることをお勧めします。

   リポジトリが ‘git push’ と ‘git pull’ を介して同期される場合、転送元
リポジトリにてパックされてたオブジェクトは通常、転送先ではアンパックされ
て保存されます。これにより、転送元と転送先で異なるパッキング戦略を使用で
きますが、両方のリポジトリを時々再パックする必要がある場合もあります。


Working with Others
*******************

Gitは真に分散されたシステムですが、多くの場合、開発者の非公式な階層でプ
ロジェクト編成すると便利です。Linuxカーネル開発はこの方法で実行されます
。 Randy Dunlap’s presentation
(https://web.archive.org/web/20120915203609/http://www.xenotime.net/linux/mentor/linux-mentoring-2006.pdf)
の (17ページ "Merges to Mainline") にイラストがあります。

   この階層は純粋に「非公式」であることを強調しておく必要があります。こ
の階層が意味する「パッチフローのチェーン」を強制するようなGitでの必須の
ものは何もありません。あなたはただ1つのリモートリポジトリからプルする必
要はありません。

   「プロジェクト指揮」(project lead)の推奨作業フローは以下のようになり
ます:

  1. あなたのローカルマシンで、あなたのプライマリリポジトリを準備します
     。あなたの作業はそこで行います。

  2. 他の人がアクセスできる公開リポジトリを準備します。

     他の人がバカ転送プロトコル(dumb transport protocols)(HTTP)を介して
     リポジトリからプルしている場合、このリポジトリを「バカ転送フレンド
     リー」(dumb transport friendly)に保つ必要があります。 ‘git init’ 後
     、標準テンプレートからコピーした
     ‘$GIT_DIR/hooks/post-update.sample’ には、 ‘git update-server-info’
     の呼び出しが含まれますが、あなたは ‘mv post-update.sample
     post-update’ を使用してフックを手動で有効にする必要があります。これ
     により、 ‘git update-server-info’ が必要なファイルを最新の状態に保
     つことができます。

  3. あなたのプライマリリポジトリから公開リポジトリにプッシュします。

  4. 公開リポジトリを ‘git repack’ します。これにより、オブジェクトの初
     期セットをベースラインとして含む大きなパックが確立されます。リポジ
     トリからのプルに使用される転送方法(transport)がパックされたリポジト
     リ(packed repositories)をサポートしている場合は、 ‘git prune’ が使
     える可能性があります。

  5. あなたはプライマリリポジトリで作業を続けます。あなたの変更は、あな
     た独自の変更や、電子メールで受信するパッチや、「サブシステム保守者
     」の「公開」リポジトリをプルした結果のマージを含んでいます。

     あなたはこのプライベートリポジトリはいつでも再パックできます。

  6. あなたの変更を公開リポジトリにプッシュし、公開します。

  7. 時々、公開リポジトリを ‘git repack’ します。 手順5に戻り、作業を続
     行します。

   そのプロジェクトに取り組んでいて、独自の「公開リポジトリ」を持つ「サ
ブシステム保守者」に推奨される作業サイクルは以下のようになります:

  1. 「プロジェクト指揮」の公開リポジトリ上で ‘git clone’ を実行して、あ
     なたの作業リポジトリを準備します。初期クローン作成に使用されるURLは
     、 remote.origin.url 構成変数に格納されます。

  2. 「プロジェクト指揮」の人と同じように、他の人がアクセスできる公開リ
     ポジトリを準備します。

  3. 「プロジェクト指揮」リポジトリが同じマシン上にある場合を除き、パッ
     クされたファイルを「プロジェク指揮」の公開リポジトリからあなたの公
     開リポジトリにコピーします。後者の場合、あなたは
     ‘objects/info/alternates’ ファイルを使用して、借用しているリポジト
     リを指すことができます。

  4. あなたのプライマリリポジトリから公開リポジトリにプッシュします。
     ‘git repack’ を実行し、そして、リポジトリからのプルに使用される転送
     方法(transport)がパックされたリポジトリ(packed repositories)をサポ
     ートしている場合は ‘git prune’ を実行します。

  5. あなたのプライマリリポジトリで作業を続けます。あなたの変更には、あ
     なた独自の変更や、電子メールで受信するパッチや、「プロジェクト指揮
     」と場合によっては「サブサブシステム保守者」の「公開」リポジトリを
     プルした結果のマージが含まれます。

     あなたはこのプライベートリポジトリはいつでも再パックできます。

  6. あなたの変更をあなたの公開リポジトリにプッシュし、「プロジェクト指
     揮」と、場合によっては「サブサブシステム保守者」にプルするように依
     頼します。

  7. 時々、公開リポジトリを ‘git repack’ します。 手順5に戻り、作業を続
     行します。

   「公開」リポジトリを持たない「個人開発者」に推奨される作業サイクルは
多少異なります。以下のようになります:

  1. 「プロジェクト指揮」(またはサブシステムで作業している場合は「サブシ
     ステム保守者」)の公開リポジトリを ‘git clone’ して、あなたの作業リ
     ポジトリを準備します。初期クローン作成に使用されるURLは、
     remote.origin.url 構成変数に格納されます。

  2. あなたは、あなたのリポジトリの _master_ ブランチで作業を行います。

  3. 時々、あなたのアップストリームの公開リポジトリから ‘git fetcho
     rigin’ を実行します。これは ‘git pull’ の前半のみを実行しますが、マ
     ージはしません。公開リポジトリのヘッドは
     ‘.git/refs/remotes/origin/master’ に保存されています。

  4. ‘git cherry origin’ を使用して、どのパッチが受け入れられたかを確認
     したり、 ‘git rebase origin’ を使用して、あなたのマージされていない
     変更を更新されたアップストリームに転送します。

  5. ‘git format-patch origin’ を使用して、アップストリームへの電子メー
     ル送信用のパッチを準備し、送信します。 手順2に戻り、作業を続行しま
     す。


Working with Others, Shared Repository Style
********************************************

あなたがCVS界隈から来ていたら、前のセクションで提案された協力のスタイル
はあなたにとって新しいものかもしれません。でも心配する必要はありません。
Gitは、おそらくあなたもよく知っている「共有公開リポジトリ」(shared
public repository)スタイルの協同作業をサポートしています。

   詳細については gitcvs-migration(7) を参照してください。


Bundling your work together
***************************

あなたは一度に複数のことに取り組む可能性があります。Gitでブランチを使用
すると、これらの多かれ少なかれ独立したタスクを簡単に管理できます。

   私達は2つのブランチを使用した「fun and work」の例で、ブランチがどのよ
うに機能するかはすでに見てきました。ブランチが3つ以上ある場合も、考え方
は同じです。 ‘master’ ヘッドから始めて、 ‘master’ ブランチにいくつかの新
しいコードがあり、 ‘commit-fix’ ブランチと ‘diff-fix’ ブランチに2つの独
立した修正があるとします:

     $ git show-branch
     ! [commit-fix] Fix commit message normalization.
      ! [diff-fix] Fix rename detection.
       * [master] Release candidate #1
     ---
      +  [diff-fix] Fix rename detection.
      +  [diff-fix~1] Better common substring algorithm.
     +   [commit-fix] Fix commit message normalization.
       * [master] Release candidate #1
     ++* [diff-fix~2] Pretty-print messages.

   両方の修正は十分にテストされており、この時点で、両方をマージする必要
があります。あなたは以下のように、最初に ‘diff-fix’ でマージし、次に
‘commit-fix’ でマージする事ができます:

     $ git merge -m "Merge fix in diff-fix" diff-fix
     $ git merge -m "Merge fix in commit-fix" commit-fix

   この結果は以下のようになります:

     $ git show-branch
     ! [commit-fix] Fix commit message normalization.
      ! [diff-fix] Fix rename detection.
       * [master] Merge fix in commit-fix
     ---
       - [master] Merge fix in commit-fix
     + * [commit-fix] Fix commit message normalization.
       - [master~1] Merge fix in diff-fix
      +* [diff-fix] Fix rename detection.
      +* [diff-fix~1] Better common substring algorithm.
       * [master~2] Release candidate #1
     ++* [master~3] Pretty-print messages.

   しかしながら、あなたが持っているものが真に独立した変更のセットである
場合、最初に一方のブランチにマージし、次にもう一方のブランチにマージする
特別な理由はありません(もし順序が重要な場合は、それらは定義上独立してい
るとは言えません)。代わりに、これら2つのブランチを現在のブランチに一度に
マージすることができます。まずは、今行ったことを元に戻して、最初からやり
直しましょう。 ‘master~2’ にリセットすることにより、これら2つのマージの
前のmasterブランチを取得する必要があります:

     $ git reset --hard master~2

   ‘git show-branch’ すれば、先ほど行った2つの ‘git merge’ の前の状態と
一致することを確認できます。 次に、2つの ‘git merge’ コマンドを連続して
実行する代わりに、これら2つのブランチヘッドをマージします(これは「making
an Octopus」(タコ足メイク)として知られています):

     $ git merge commit-fix diff-fix
     $ git show-branch
     ! [commit-fix] Fix commit message normalization.
      ! [diff-fix] Fix rename detection.
       * [master] Octopus merge of branches 'diff-fix' and 'commit-fix'
     ---
       - [master] Octopus merge of branches 'diff-fix' and 'commit-fix'
     + * [commit-fix] Fix commit message normalization.
      +* [diff-fix] Fix rename detection.
      +* [diff-fix~1] Better common substring algorithm.
       * [master~1] Release candidate #1
     ++* [master~2] Pretty-print messages.

   注意: 可能であるからいって必ずしもタコ足(octopus)をやるべきではない、
ということに注意してください。タコ足(octopus)は有効な方法であり、2つ以上
の独立した変更を同時にマージする場合、コミット履歴を簡単に表示できること
がよくあります。しかし、マージしているブランチのいずれかとマージの競合が
あり、手動で解決する必要がある場合は、これは、これらのブランチで発生した
開発が結局独立していないことを示しています。そうすると、あなたは、どうし
て一度に2つをマージして、競合をどのように解決したか、および一方の側で行
われた変更をもう一方の側よりも優先した理由を文書化しなければならなくなり
ます。そうしないと、プロジェクトの履歴を追跡するのが難しくなり、簡単では
なくなります。


SEE ALSO
********

gittutorial(7), gittutorial-2(7), gitcvs-migration(7), git-help(1),
giteveryday(7), The Git User’s Manual (user-manual.html)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: gitcredentials,  Up: Top

Name
****

gitcredentials — Gitにユーザー名とパスワードを提供する


Synopsis
********

     git config credential.https://example.com.username myusername
     git config credential.helper "$helper $options"


DESCRIPTION
***********

Gitは、操作を実行するためにユーザーからの資格情報を必要とする場合があり
ます。たとえば、HTTP経由でリモートリポジトリにアクセスするために、ユーザ
ー名とパスワードを要求する必要がある場合があります。このマニュアルでは、
Gitがこれらの資格情報を要求するために使用するメカニズムと、これらの資格
情報を繰り返し入力しないようにするためのいくつかの機能について説明します
。


REQUESTING CREDENTIALS
**********************

資格情報ヘルパーが定義されていない場合、Gitは以下の戦略でユーザーにユー
ザー名とパスワードを要求します:

  1. ‘GIT_ASKPASS’ 環境変数が設定されている場合、その環境変数で指定した
     プログラムが呼び出されます。コマンドラインでプログラムによって適切
     なプロンプトが表示され、ユーザーの入力が標準出力から読み取られます
     。

  2. それ以外の場合、 ‘core.askPass’ 構成変数が設定されていると、その値
     は上記と同様に使用されます。

  3. それ以外の場合、‘SSH_ASKPASS’ 環境変数が設定されていると、その値は
     上記と同様に使用されます。

  4. それ以外の場合、端末でユーザーの入力が促されます。


AVOIDING REPETITION
*******************

同じ資格情報を何度も入力するのは面倒な場合があります。 Gitには、この煩わ
しさを軽減する2つの方法があります:

  1. 指定の認証コンテキストのためのユーザー名の静的構成。

  2. パスワードをキャッシュまたは保存するため、またはシステムパスワード
     ウォレットまたはキーチェーンと対話するための資格情報ヘルパー。

   1つ目は、パスワードに使用できる安全なストレージがない場合に簡単で適切
です。これは通常、以下を構成に追加することによって設定します:

     [credential "https://example.com"]
             username = me

   一方、資格情報ヘルパーは、Gitがユーザー名とパスワードの両方を要求でき
る外部プログラムです。これらは通常、OSまたは他のプログラムによって提供さ
れる安全なストレージとインターフェイスします。

   ヘルパーを使用するには、最初に使用するヘルパーを選択する必要がありま
す。Gitには現在、以下のヘルパーが含まれています:

cache
     資格情報をメモリに短期間キャッシュします。 詳細については
     git-credential-cache(1) を参照してください。

store
     資格情報をディスクに無期限に保存します。詳細については
     git-credential-store(1) を参照してください。

   サードパーティのヘルパーがインストールされている場合もあります。 ‘git
help -a’ の出力で ‘credential-*’ を検索し、個々のヘルパーのドキュメント
を参照してください。あなたが使いたいヘルパーを選んだら、その名前を
credential.helper 変数に入力することで、Gitにそのヘルパーを使用するよう
に指示できます。

  1. ヘルパーを探す。

          $ git help -a | grep credential-
          credential-foo

  2. その説明を読む。

          $ git help credential-foo

  3. Gitにそれを使用するように伝えます。

          $ git config --global credential.helper foo


CREDENTIAL CONTEXTS
*******************

Gitは、各資格情報がURLによって定義されたコンテキストを持っていると見なし
ます。このコンテキストは、コンテキスト固有の構成を検索するために使用され
、すべてのヘルパーに渡されます。ヘルパーは、これを安全なストレージへのイ
ンデックスとして使用できます。

   たとえば、 ‘https://example.com/foo.git’ にアクセスしていると想像して
ください。Gitが構成ファイルを調べてセクションがこのコンテキストに一致す
るかどうかを確認するとき、コンテキストが構成ファイル内のパターンのより具
体的なサブセットである場合、Gitは2つが一致すると見なします。たとえば、設
定ファイルに以下がある場合:

     [credential "https://example.com"]
             username = foo

   これはマッチします。両方のプロトコルが同じで、かつ、両方のホストが同
じであり、かつ、パターンURLはパス部分を気にしないからです。ただし、以下
のコンテキストは一致しません:

     [credential "https://kernel.org"]
             username = foo

   なぜならホスト名が異なるためです。 また、 ‘foo.example.com’ とは一致
しません。 Gitは、2つのホストが同じドメインの一部であるかどうかを考慮せ
ずに、ホスト名を正確に比較します。 同様に、 ‘http://example.com’ の設定
エントリは一致しません。Gitはプロトコルを正確に比較します。 ただし、
‘http.<url>.*’ オプションと同様に、ドメイン名やその他のパターンマッチン
グにワイルドカードを使用できます。

   パターンURLにパス部分が含まれている場合、これも完全に一致する必要があ
ります。コンテキスト ‘https://example.com/bar/baz.git’ は
(‘https://example.com’ 部分の照合に加えてパス部分も一致する)
‘https://example.com/bar/baz.git’ の設定エントリとは一致しますが、
‘https://example.com/bar’ 構成エントリとは一致しません。


CONFIGURATION OPTIONS
*********************

コンテキストのオプションは、 ‘credential.*’ (すべての資格情報に適用) ま
たは ‘credential.<url>.*’ のいずれかで構成できます。ここで、 <url> は上
記のコンテキストと一致します。

   以下のオプションは、どちらの場所でも使用できます:

helper
     外部資格情報ヘルパーの名前、および関連するオプション。ヘルパー名が
     絶対パスでない場合は、文字列 ‘git credential-’ が先頭に追加されます
     。結果の文字列はシェルによって実行されます(たとえば、これを ‘foo
     --option=bar’ に設定すると、シェルを介して ‘git credential-foo
     --option=bar’ が実行されます。例については使用するヘルパーのマニュ
     アルを参照してください。

     ‘credential.helper’ 構成変数のインスタンスが複数ある場合、各ヘルパ
     ーが順番に試行され、ユーザー名 または パスワード または 何も提供し
     ない 場合があります。Gitがユーザー名とパスワードの両方を取得すると
     、それ以上ヘルパーは試行されません。

     ‘credential.helper’ が空の文字列に設定されている場合、これによりヘ
     ルパーリストが空にリセットされます(したがって、空の文字列ヘルパーを
     構成し、その後に必要なヘルパーのセットを構成することで、優先度の低
     い構成ファイルによって設定されたヘルパーをオーバーライドできます)。

username
     URLに指定されていない場合のデフォルトのユーザー名。

useHttpPath
     デフォルトでは、Gitはhttp URLのパス部分を外部ヘルパーを介して照合す
     る価値があるとは見なしません。 これは、
     ‘https://example.com/foo.git’ に保存されている資格情報が
     ‘https://example.com/bar.git’ にも使用されることを意味します。これ
     らの場合を区別したい場合は、このオプションを「true」に設定してくだ
     さい。


CUSTOM HELPERS
**************

あなた独自のカスタムヘルパーを作成して、資格情報を保持している任意のシス
テムとインターフェイスすることができます。

   資格情報ヘルパーは、資格情報を長期ストレージとの間でフェッチまたは保
存するためにGitによって実行されるプログラムです(「長期」とは単一のGitプ
ロセスよりも単純に長いという意味です。たとえば、資格情報はメモリ内に数分
間、またはディスク上で無期限に保存される場合があります)。

   各ヘルパーは、構成変数 ‘credential.helper’ の単一の文字列で指定されま
す(その他 git-config(1) を参照)。文字列はGitによって、以下のルールを使用
して実行されるコマンドに変換されます:

  1. ヘルパー文字列が "!" で始まる場合、それはシェルスニペットと見なされ
     、 "!" の後のすべてが コマンドになります。

  2. それ以外の場合、ヘルパー文字列が絶対パスで始まる場合は、文字列がそ
     のままコマンドとして扱われます。

  3. それ以外の場合は、文字列 "git credential-" がヘルパー文字列の前に付
     加され、その結果がコマンドになります。

   結果のコマンドには「operation」引数が追加され(詳細は下記参照)、結果は
シェルによって実行されます。

   仕様の例を以下に示します:

     # run "git credential-foo"
     [credential]
             helper = foo

     # same as above, but pass an argument to the helper
     [credential]
             helper = "foo --bar=baz"

     # the arguments are parsed by the shell, so use shell
     # quoting if necessary
     [credential]
             helper = "foo --bar='whitespace arg'"

     # you can also use an absolute path, which will not use the git wrapper
     [credential]
             helper = "/path/to/my/helper --with-arguments"

     # or you can specify your own shell snippet
     [credential "https://example.com"]
             username = your_user
             helper = "!f() { test \"$1\" = get && echo \"password=$(cat $HOME/.secret)\"; }; f"

   一般的に、上記の ルール(3）は、ユーザーが指定するのが最も簡単です。資
格情報ヘルパーの作成者は、プログラムに "git-credential-$NAME" という名前
を付け、インストール中に ‘$PATH’ または ‘$GIT_EXEC_PATH’ に配置して、ユ
ーザーが ‘git config credential.helper $NAME’ を有効にできるようにするこ
とで、ユーザーを支援するように努める必要があります。

   ヘルパーが実行されると、コマンドラインに以下のいずれかの「操作」引数
が追加されます:

‘get’
     一致する資格情報が存在する場合は、それを返します。

‘store’
     ヘルパーに該当する場合は、資格情報を保存します。

‘erase’
     もしあれば、ヘルパーのストレージから一致する資格情報を削除します。

   資格情報の詳細は、ヘルパーの標準入力ストリームで提供されます。正確な
形式は、 ‘git credential’ 配管コマンドの 入力/出力形式 と同じです(詳細な
仕様については、 git-credential(1) の「INPUT/OUTPUT FORMAT」のセクション
を参照してください)。

   ‘get‘操作の場合、ヘルパーは標準出力の属性のリストを同じ形式で作成する
必要があります(一般的な属性については git-credential(1) を参照してくださ
い)。ヘルパーはサブセットを自由に作成できます。提供するのに役立つものが
ない場合は、値をまったく作成しません。提供された属性は、Gitの資格情報サ
ブシステムによってすでに知られている属性を上書きします。

   すべての属性を上書きすることが可能ですが、正常に動作するヘルパーは、
ユーザー名とパスワード以外の属性については上書きしないようにする必要があ
ります。

   ヘルパーが ‘true’ または ‘1’ の値で ‘quit’ 属性を出力した場合、それ以
上のヘルパーは参照されず、ユーザーにプロンプトも表示されません(資格情報
が提供されていない場合、操作は失敗します)。

   同様に、ユーザー名とパスワードの両方が提供されると、ヘルパーに相談す
ることはありません。

   ‘store’ または ‘erase’ 操作の場合、ヘルパーの出力は無視されます。

   ヘルパーが要求された操作の実行に失敗した場合、または潜在的な問題をユ
ーザーに通知する必要がある場合、ヘルパーは標準エラー出力に書き込むことが
あります。

   要求された操作(読み取り専用ストアなど)をサポートしていない場合は、要
求を黙って無視する必要があります。

   ヘルパーが他の操作を受け取った場合、ヘルパーはその要求を黙って無視す
る必要があります。これにより、将来の操作を追加する余地が残ります(古いヘ
ルパーは新しい要求を無視するだけです)。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: gitcvs-migration,  Up: Top

Name
****

gitcvs-migration — CVSユーザー向けGit


Synopsis
********

     git cvsimport *


DESCRIPTION
***********

GitはCVSとは異なり、すべての作業ツリーにはプロジェクト履歴の完全なコピー
を含むリポジトリが含まれており、他のどのリポジトリよりも決定的に重要であ
るリポジトリなどというものはありません。ただし、あなたはユーザーが同期で
きる単一の共有リポジトリを指定することで、CVSモデルをエミュレートできま
す。このドキュメントでは、その方法について説明します。

   Gitに関する基本的な知識が必要ですが、 gittutorial(7) と
gitglossary(7) を理解しておけば十分です。


共有リポジトリに対面する開発
****************************

ホスト foo.com の /pub/repo.git に共有リポジトリが設定されているとします
。次に、個々のコミッターは、以下コマンドを使用してssh経由で共有リポジト
リのクローンを作成できます:

     $ git clone foo.com:/pub/repo.git/ my-project
     $ cd my-project

   そしてハックハックします。 ‘cvs update’ に相当するものは以下です

     $ git pull origin

   これは、クローン操作以降に他の人が行った可能性のあるすべての作業をマ
ージします。作業ツリーにコミットされていない変更がある場合は、まずは
‘git pull’ を実行する前にコミットしてください。

     *Note*

     ‘pull’ コマンドは、最初の ‘git clone’ コマンドによって設定された構
     成変数によって、更新をどこから取得するかを認識しています。詳細につ
     いては、 ‘git config -l’ および git-config(1) のマニュアルページを
     参照してください。

   まずあなたの変更をコミットしてから、その後 ‘git push’ コマンドを使用
することで、あなたの変更を採用して共有リポジトリを更新できます:

     $ git push origin master

   それらのコミットを共有リポジトリに「プッシュ」します。他の誰かが最近
リポジトリを更新した場合、「cvs commit」のように「git push」が文句を言い
ます。その場合、プッシュを再試行する前に変更をプルする必要があります。

   上記の ‘git push’ コマンドで、更新するリモートブランチの名前
(‘master’)を指定します。これを省略した場合、 ‘git push’ は、ローカルリポ
ジトリ内のブランチと同じ名前を持つリモートリポジトリ内のブランチを更新し
ようとします。したがって、最後の「プッシュ」は以下のいずれかで実行できま
す:

     $ git push origin
     $ git push foo.com:/pub/project.git/

   上記は共有リポジトリに ‘master’ 以外のブランチがない限りは動作します
。


Setting Up a Shared Repository
******************************

私達は、プロジェクトのGitリポジトリをすでに作成しているか、または最初か
らまたはtarballから作成したか(gittutorial(7) を参照)、または既存のCVSリ
ポジトリからインポートした(次のセクションを参照)と想定しします。

   あなたの既存のリポジトリが /home/alice/myproject にあると想定します。
新しい「ベア」リポジトリ(作業ツリーのないリポジトリ)を作成し、あなたのプ
ロジェクトをそのリポジトリにフェッチします:

     $ mkdir /pub/my-repo.git
     $ cd /pub/my-repo.git
     $ git --bare init --shared
     $ git --bare fetch /home/alice/myproject master:master

   次に、すべてのチームメンバーにこのリポジトリへの読み取り/書き込みアク
セスを許可します。これを行う簡単な方法の1つは、すべてのチームメンバーに
リポジトリがホストされているマシンへのsshアクセスを許可することです。マ
シン上で完全なシェルを提供したくない場合は、ユーザーがGitのプッシュとプ
ルのみを実行できる制限付きシェルがあります。 git-shell(1) を参照してくだ
さい。

   コミッター全員を同じグループに入れ、リポジトリをそのグループで書き込
み可能にします:

     $ chgrp -R $group /pub/my-repo.git

   コミッターが作成するディレクトリが他のグループメンバーによって書き込
みおよび検索できるように、コミッターのumaskが027であることを確認してくだ
さい。


Importing a CVS archive
***********************

     *Note*

     これらの手順では、gitに付属している ‘git-cvsimport’ スクリプトを使
     用しますが、他のインポーターがより良い結果を提供する場合があります
     。他のオプションについては、 git-cvsimport(1) のthe noteを参照して
     ください。

   まず、 https://github.com/andreyvit/cvsps
(https://github.com/andreyvit/cvsps) からバージョン2.1以降のcvspsをイン
ストールし、あなたの $PATH に含まれていることを確認します。次に、あなた
が関心を持っているプロジェクトのチェックアウトされたCVS作業ディレクトリ
にcdして、 git-cvsimport(1) を実行します:

     $ git cvsimport -C <destination> <module>

   これにより、指定されたCVSモジュールのGitアーカイブがディレクトリ
<destination> に必要に応じて作成され、配置されます。

   インポートは、すべてのファイルのすべてのリビジョンをCVSからチェックア
ウトします。聞いた限りでは、cvsimportは1秒あたり平均約20個のリビジョンを
処理できるので、中規模のプロジェクトの場合、これには数分以上かかることは
ありません。大規模なプロジェクトやリモートリポジトリには時間がかかる場合
があります。

   メインtrunkは ‘origin’ という名前のGitブランチに保存され、追加のCVSブ
ランチは同じ名前のGitブランチに保存されます。メインtrunkの最新バージョン
も ‘master‘ブランチにチェックアウトされたままなので、すぐにあなた独自の
変更を追加し始めることができます。

   インポートはインクリメンタルであるため、来月再度呼び出すと、その間に
行われたCVS更新がフェッチされます。これが機能するためには、インポートさ
れたブランチを変更してはなりません。代わりに、独自の変更のために新しいブ
ランチを作成し、必要に応じてインポートされたブランチをマージします。

   あなたが共有リポジトリが必要な場合は、上記のように、あなたはインポー
トされたディレクトリのベアクローンを作成する必要があります。次に、増分イ
ンポートをマージするために、インポートされたディレクトリを別の開発クロー
ンとして扱います。


Advanced Shared Repository Management
*************************************

Gitでは、特定の箇所で実行される「フック」(hooks)と呼ばれるスクリプトを指
定できます。これらを使用して、たとえば、共有リポジトリへのすべてのコミッ
トをメーリングリストに送信することができます。 githooks(5) を参照してく
ださい。

   更新フックを使用して、よりきめ細かいアクセス許可を適用できます。
Controlling access to branches using update hooks
(howto/update-hook-example.html) (更新フックを使用したブランチへのアクセ
スの制御) を参照してください。


Providing CVS Access to a Git Repository
****************************************

開発者が引き続きCVSを使用できるように、Gitリポジトリへの真のCVSアクセス
を提供することも可能です。詳細については、 git-cvsserver(1) を参照してく
ださい。


Alternative Development Models
******************************

CVSユーザーは、開発者のグループに共通のリポジトリへのコミットアクセスを
与えることに慣れています。これまで見てきたように、これはGitでも可能です
。ただし、Gitの分散性により、他の開発モデルが利用可能になるため、最初に
、そのうちのどれがプロジェクトにより適しているかどうかを検討することをお
勧めします。

   たとえば、プロジェクトのプライマリ公開リポジトリを保守するために1人の
人を選択できます。次に、他の開発者がこのリポジトリのクローンを作成し、そ
れぞれが独自のクローンで作業します。満足のいく一連の変更がある場合、変更
を含むブランチからプルするように保守者に依頼します。保守者は変更を確認し
、プライマリリポジトリにプルします。プライマリリポジトリは、他の開発者が
調整を維持するために必要に応じてプルします。 Linuxカーネルおよびその他の
プロジェクトは、このモデルのバリエーションを使用します。

   少人数のグループでは、開発者は中央の保守者を必要とせずに、互いのリポ
ジトリから変更をプルするだけで済みます。


SEE ALSO
********

gittutorial(7), gittutorial-2(7), gitcore-tutorial(7), gitglossary(7),
giteveryday(7), The Git User’s Manual (user-manual.html)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: gitdiffcore,  Up: Top

Name
****

gitdiffcore — diff出力の微調整


Synopsis
********

     git diff *


DESCRIPTION
***********

diffコマンド ‘gitdiff-index’ と ‘git diff-files’ と ‘git diff-tree’ は、
‘diff’ 出力を表示する前に、従来とは異なる方法で検出した差異を操作するよ
うに指示できます。この操作を総称して「diffcore変換」(diffcore
transformation)と呼びます。この短いノートでは、それらが何であるか、およ
びそれらを使用して、従来の種類よりも理解しやすい ‘diff’ 出力を生成する方
法について説明します。


The chain of operation
**********************

‘git diff-{asterisk}’ ファミリの仕事は、まずは2つのファイルセットを比較
することです:

   • ‘git diff-index’ は、 (‘--cached’ フラグが使用されていない場合)ツリ
     ーオブジェクトと作業ディレクトリの内容を比較するか、または(‘
     –cached‘ フラグが使用されている場合)ツリーオブジェクトとインデック
     スファイルの内容を比較します。

   • ‘git diff-files’ は、インデックスファイルと作業ディレクトリの内容を
     比較します。

   • ‘git diff-tree’ は、2つのツリーオブジェクトの内容を比較します。

   これらすべての場合において、コマンド自体は、最初にオプションで、コマ
ンドラインで指定されたパススペックによって2つのファイルの組を限定し、結
果として得られる2つのファイルの組の対応するパスを比較します。

   パススペックは、diffが動作するワールドを制限するために使用されます。
これらは、指定されたパス名の組の外側にあるファイルペア(filepairs)を削除
します。例えば。ファイルペアの入力組が含まれている場合:

     :100644 100644 bcd1234... 0123456... M junkfile

   しかし、コマンドの呼び出しが ‘git diff-files myfile’ の場合、
‘myfile’ のみが考慮されているため、junkfileエントリがリストから削除され
ます。

   比較の結果は、これらのコマンドから、 ‘-p｀ オプションが使用されていな
い場合に出力されるものと同様の形式で、内部的に「diffcore」と呼ばれるもの
に渡されます。例えば

     in-place edit  :100644 100644 bcd1234... 0123456... M file0
     create         :000000 100644 0000000... 1234567... A file4
     delete         :100644 000000 1234567... 0000000... D file5
     unmerged       :000000 000000 0000000... 0000000... U file6

   diffcoreメカニズムには、そのような比較結果のリストが提供され(それぞれ
が「ファイルペア」(filepair)と呼ばれますが、この時点ではそれぞれ1つのフ
ァイルについて話します)、そのようなリストを別のリストに変換します。現在
、そのような変換(transformations)は5つあります:

   • diffcore-break

   • diffcore-rename

   • diffcore-merge-broken

   • diffcore-pickaxe

   • diffcore-order

   • diffcore-rotate

   これらは順番に適用されます。 ‘git diff-{asterisk}’ コマンド群の探索の
ファイルペアのセットは、diffcore-breakへの入力として使用されます。
diffcore-breakからの出力は、次の変換への入力として使用されます。そして、
最終結果が出力ルーチンに渡され、diff-raw形式(マニュアルの ‘git
diff-{asterisk}’ コマンド の「Output format」セクションを参照)または
diff-patch形式のいずれかが生成されます。


diffcore-break: 完全な書き換えを分割するため
********************************************

操作チェーンの2番目の変換(transformation)はdiffcore-breakで、 ‘git
diff-{asterisk}’ コマンド群の ‘-B’ オプションによって制御されます。これ
は、「完全な書き換え」を表すファイルペアを検出し、そして、そのようなファ
イルペアを削除と作成を表す2つのファイルペアに分割するために使用されます
。例えば、入力に以下のファイルペアが含まれている場合:

     :100644 100644 bcd1234... 0123456... M file0

   そして、ファイル "file0" が完全に書き換えられたことを検出すると、以下
のように変更されます:

     :100644 000000 bcd1234... 0000000... D file0
     :000000 100644 0000000... 0123456... A file0

   ファイルペアを切断する(break)目的で、diffcore-breakは、変更前後のファ
イルの内容(つまり、上記の例では、SHA-1コンテンツIDとして ‘bcd1234...’ と
‘0123456...’ を持つコンテンツ)の間の変更の程度を調べます。元のコンテンツ
の削除と新しい素材の挿入の量が合計され、「ブレークスコア」(break score)を
超えると、ファイルペアが2つに分割されます。ブレークスコアのデフォルトは
、元のサイズと結果の小さい方のサイズの50%であり(つまり、編集によってファ
イルが縮小される場合は、結果のサイズが使用されます。編集によってファイル
が長くなる場合は、元のサイズが使用されます)、 ‘-B’ オプションの後に数字
を付けることでカスタマイズできます(たとえば、 ‘-B75’ で75%にするように指
示します)。


diffcore-rename: 名前変更とコピーを検出するため
***********************************************

この変換(transformation)は、名前変更とコピーを検出するために使用され、
‘git diff-{asterisk}’ コマンド群の ‘-M’ オプション(名前変更検出用）と
‘-C’ オプション(コピーも検出するため)によって制御されます。入力にこれら
のファイルペアが含まれている場合:

     :100644 000000 0123456... 0000000... D fileX
     :000000 100644 0000000... 0123456... A file0

   ここで、削除されたファイルfileXの内容は、作成されたファイルfile0の内
容と十分に類似しているため、名前変更検出はこれらのファイルペアをマージし
て以下を作成します:

     :100644 100644 0123456... 0123456... R100 fileX file0

   ‘-C’ オプションを使用すると、変更されたファイルと削除されたファイル(
‘--find-copies-harder’ オプションが使用されている場合は、変更されていな
いファイルも)の元の内容が、名前変更/コピー 操作のソースファイルの候補と
見なされます。入力がこれらのファイルペアのようなものである場合、変更され
たファイルfileYと新しく作成されたファイルfile0について以下のようになりま
す:

     :100644 100644 0123456... 1234567... M fileY
     :000000 100644 0000000... bcd3456... A file0

   fileYの元の内容とfile0の結果の内容が比較され、それらが十分に類似して
いる場合は、以下のように変更されます:

     :100644 100644 0123456... 1234567... M fileY
     :100644 100644 0123456... bcd3456... C100 fileY file0

   名前の変更とコピーの検出の両方で、diffcore-breakで使用されるのと同じ
「変更の範囲」(extent of changes)アルゴリズムを使用して、2つのファイルが
「十分に類似」しているかどうかを判断し、デフォルトの50%とは異なる類似ス
コアを使用するようにカスタマイズできます。 ‘-M’ または ‘-C’ オプションの
後に番号を付けます(たとえば、 ‘-M8’ で 8/10 = 80% にするように指示します
)。

   注意: 名前変更検出がオンで、コピーとブレークの両方の検出がオフの場合
、名前変更検出は、ファイル名を同じに保ちながらファイルがディレクトリ間で
移動されるかどうかを最初にチェックする予備ステップを追加することに注意し
てください。 別のディレクトリから削除された同じ名前のファイルと内容が十
分に類似しているファイルがディレクトリに追加されている場合、それらを名前
変更としてマークし、後の2次ステップ(一致しないすべてのファイルをペアごと
に比較して、コンテンツの類似性が最も高いことによって決定される「最良の」
一致を見つけるステップ)から除外します。したがって、たとえば、削除された
docs/ext.txt と追加された docs/config/ext.txt が十分に類似している場合、
それらは名前変更としてマークされ、削除された docs/ext.txt にさらに類似し
ている可能性のある、追加された docs/ext.md が後のステップで名前変更先と
見なされないようにします。 このため、予備の「同じファイル名に一致」ステ
ップでは、少し高いしきい値を使用してファイルペアを名前変更としてマークし
、他の候補をより適切に一致させることを検討しなくなります。 この予備ステ
ップでは、ファイルごとに最大で1つの比較が行われます。したがって、正確な
名前変更が検出された後、ディレクトリ階層全体にext.txtファイルがいくつか
残っている場合は、これらのファイルのこの準備手順をスキップできます。

   注意: ‘-C’ オプションを ‘--find-copies-harder’ オプションとともに使用
すると、 ‘git diff-{asterisk}’ コマンド群は、変更されていないファイルペ
アと変更されたファイルペアをdiffcoreメカニズムに送ります。これにより、コ
ピー検出器は、ファイルの速度を低下させる代わりに、変更されていないファイ
ルをコピーソース候補と見なすことができます。 ‘--find-copies-harder’ がな
いと、 ‘git diff-{asterisk}’ コマンド群は、コピーされたファイルがたまた
ま同じチェンジセットで変更された場合にのみコピーを検出できます。


diffcore-merge-broken: 完全な書き換えを元に戻すため
***************************************************

この変換は、diffcore-breakによって分割したファイルペアをマージするために
使用され、 diffcore-rename によって rename/copy に変換されず、単一の変更
に戻されます。これは、diffcore-breakが使用されている場合は常に実行されま
す。

   分割したファイルペアをマージする目的で、 diffcore-break および
diffcore-rename で使用されるものとは異なる「変更の範囲」の計算を使用しま
す。オリジナルからの削除のみをカウントし、挿入はカウントしません。100行
のドキュメントから10行だけを削除した場合、新しい1000行のドキュメントを作
成するために910行を追加しても、完全な書き換えは行われたとは見なしません
。 diffcore-break は、 diffcore-renameがそのようなファイルペアを 名前変
更/コピー 検出の候補と見なすのを助けるためにそのような場合のを分割します
が、その方法で分割したファイルペアが他のファイルペアと一致して 名前変更
/コピー を作成しなかった場合、この変換でそれらをマージして「元の変更」に
戻します 。

   「変更の範囲」パラメータは、 ‘-B’ に2番目の数値を指定することで、デフ
ォルトの80%から微調整できます(つまり、元のマテリアルの80%以上が削除され
ない限り、分割されたペアは1つの変更にマージされます)。以下のように指定で
きます:

   • ‘-B50/60’ (diffcore-breakに50%の「ブレークスコア」を与え、
     diffcore-merge-brokenに60%を与えます)。

   • ‘-B/60’ (上記と同じです。diffcore-breakのデフォルトは50%であるため
     )。

   注意:以前の実装では、個別の作成パッチと削除パッチとして分割したペアが
残っていたことに注意してください。これは不必要なハックであり、最新の実装
では常にすべての分割されたペアが変更にマージされます。ただし、結果のパッ
チ出力は、 ‘-’ で始まる古いバージョンのコンテンツ全体を表示することによ
り、このような完全な書き換えの場合に簡単に確認できるように、異なる形式に
なっています。その後に、接頭辞 ‘+’ が付いた新しいバージョンのコンテンツ
全体が続きます。


diffcore-pickaxe: 指定の文字列(string)の追加/削除の検知のため
*************************************************************

この変換により、ファイルペアの組が、特定の方法でプリイメージとポストイメ
ージの間で指した文字列を変更するものに制限されます。 ‘-S<テキストのブロ
ック>’ および ‘-G<正規表現>’ オプションは、これらの文字列を検索するさま
ざまな方法を指定するために使用されます。

   ‘-S<テキストブロック>’ は、指定されたテキストのブロックの出現回数がプ
リイメージとポストイメージで異なるファイルペアを検出します。定義上、ファ
イル内の移動は検出されません。また、チェンジセットが対象の文字列に影響を
与えずにファイルを大規模に移動すると、通常どおりdiffcore-renameが開始さ
れ、‘-S’ はファイルペアを省略します(その文字列の出現回数は、名前変更で検
出されたファイルペアで変更されなかったため)。 ‘--pickaxe-regex’ と一緒に
使用する場合、<テキストブロック>は、リテラル文字列ではなく、マッチする拡
張POSIX正規表現として扱います。

   ‘-G<正規表現>’ (grep文法)は、指定された正規表現にマッチする行が追加ま
たは削除されたテキスト差分を持つファイルペアを検出します。これは、ノイズ
であるファイル内の移動(またはrename-detectionが同じファイルと見なすもの
)を検出することを意味します。実装はdiffを2回実行してgrepsしますが、これ
は非常にコストがかかる可能性があります。高速化のため、textconvフィルタが
ないバイナリファイルは無視されます。

   ‘-S’ または ‘-G’ を ‘--pickaxe-all’ なしで使用すると、それぞれの基準
に一致するファイルペアのみが出力に保持されます。 ‘--pickaxe-all’ が使用
されている場合、1つのファイルペアでもチェンジセット内のそれぞれの基準に
一致すると、チェンジセット全体が保持されます。この振る舞いは、チェンジセ
ット全体のコンテキストでの変更のレビューを容易にするために設計されていま
す。


diffcore-order: ファイル名に基づいて出力をソートするため
********************************************************

これは、ユーザー(またはプロジェクト)の好みに応じてファイルペアを並べ替え
るために使用され、 ‘git diff-{asterisk}’ コマンド群の ‘-O’ オプションに
よって制御されます。

   これは、各行がシェルグロブパターンであるテキストファイルを取ります。
ファイルの前の行のグロブパターンに一致するファイルペアは、後の行に一致す
るファイルペアの前に出力され、どのグロブパターンにも一致しないファイルペ
アは最後に出力されます。

   例として、コアGitの一般的な orderfile おそらく以下のようになります:

     README
     Makefile
     Documentation
     *.h
     *.c
     t


diffcore-rotate: 出力開始パス(path)を変更するため
*************************************************

この変換は1つのパス名を取り、ファイルペアのセットをローテーションして、
指定されたパス名のファイルペアが最初に来るようにします。オプションで、そ
の前にあるパスを破棄します。これは、 ‘--skip-to’ および ‘--rotate-to’ オ
プションを実装するために使用されます。指定されたパス名がファイルペアのセ
ットにない場合はエラーになりますが、 ‘git log ` ファミリーのコマンドで使
用するとエラーになることはありません。 `git log’ コマンドで表示されるす
べてのコミットによって特定のパスが変更されることを期待するのは不合理だか
らです。このため、 ‘git log’ と一緒に使用すると、指定されたパス名と同じ
ように並べ替えられるファイルペア、または最初に並べ替えられるファイルペア
が出力の開始場所になります。

   この変換をdiffcore-orderと組み合わせて使用すると、diffcore-orderが有
効な場合、この変換への入力がソートされない可能性があるため、予期しない結
果が生成されます。


SEE ALSO
********

git-diff(1), git-diff-files(1), git-diff-index(1), git-diff-tree(1),
git-format-patch(1), git-log(1), gitglossary(7), The Git User’s Manual
(user-manual.html)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: giteveryday,  Up: Top

Name
****

giteveryday — Git日常利用に役立つ最小限のコマンドセット


Synopsis
********

Git日常利用の為の20程度のコマンド


DESCRIPTION
***********

日常のGit利用に役立つコマンドの小さなセットを説明するため、Gitユーザーを
大きく4つのカテゴリに分類します。

   • 開発者個人(スタンドアローン) (*note [STANDALONE]::) のコマンドは 一
     人で作業する人でも、コミットする人には不可欠です。

   • 他の人と一緒に作業する場合は、開発者個人(グループプロジェクト参加者
     ) (*note [PARTICIPANT]::) セクションにリストされているコマンドも必
     要になります。

   • インテグレーター (*note [INTEGRATOR]::) 役の人々は、 上記に加えて更
     に幾つかのコマンドを学ぶ必要があります。

   • リポジトリ管理 (*note [ADMINISTRATION]::) コマンドは、 Gitリポジト
     リの管理と提供を担当するシステム管理者向けです。


Individual Developer (Standalone)
*********************************

独立した個々の開発者は、他の人とパッチを交換せず、以下のコマンドを使用し
て、単一のリポジトリで単独で作業します。

   • git-init(1) 新しいリポジトリを作成します。

   • git-log(1) 何が起こったのか確認します。

   • git-switch(1) と git-branch(1) ブランチを切り替えます。

   • git-add(1) インデックスファイルを管理します。

   • git-diff(1) と git-status(1) を使用して、あなたは何をしている最中か
     確認します。

   • git-commit(1) を使用して、現在のブランチを進めます。

   • git-restore(1) を使用して、変更を元に戻します(undo)。

   • git-merge(1) は、ローカルブランチ間でマージします。

   • git-rebase(1) は、トピックブランチを保守します。

   • git-tag(1) を使用して、既知のポイントをマークします。


Examples
========

新しいリポジトリの開始点としてtarballを使用します
          $ tar zxf frotz.tar.gz
          $ cd frotz
          $ git init
          $ git add . (1)
          $ git commit -m "import of frotz source tree."
          $ git tag v2.43 (2)

     *note (1): CO1-1.
          あなたが現在いるディレクトリ下のすべてをaddします。

     *note (2): CO1-2.
          軽量で注釈のないタグを作成します。

トピックブランチを作成して開発します
          $ git switch -c alsa-audio (1)
          $ edit/compile/test
          $ git restore curses/ux_audio_oss.c (2)
          $ git add curses/ux_audio_alsa.c (3)
          $ edit/compile/test
          $ git diff HEAD (4)
          $ git commit -a -s (5)
          $ edit/compile/test
          $ git diff HEAD^ (6)
          $ git commit -a --amend (7)
          $ git switch master (8)
          $ git merge alsa-audio (9)
          $ git log --since='3 days ago' (10)
          $ git log v2.43.. curses/ (11)

     *note (1): CO2-1.
          新しいトピックブランチを作成します。

     *note (2): CO2-2.
          ‘curses/ux_audio_oss.c’ で失敗した変更を元に戻します(revert)。

     *note (3): CO2-3.
          あなたは新しいファイルを追加したかどうかをGitに伝える必要があ
          ります。 後で ‘git commit -a’ を実行すると、削除と変更が捕捉さ
          れます。

     *note (4): CO2-4.
          コミットしようとしている変更を確認します。

     *note (5): CO2-5.
          あなたがテストしたと署名(sign-off)して、全てをコミットします。

     *note (6): CO2-6.
          前のコミットを含むすべての変更を確認します。

     *note (7): CO2-7.
          元のメッセージを流用して、以前のコミットを修正し、すべての新し
          い変更を追加します。

     *note (8): CO2-8.
          masterブランチに切り替えます。

     *note (9): CO2-9.
          トピックブランチをあなたのmasterブランチへマージします。

     *note (10): CO2-10.
          コミットログを確認します。出力を制限する他の形式を組み合わせて
          、 ‘-10’ (最大10個のコミットを表示）、 ‘--until=2005-12-10’ な
          どを含めることができます。

     *note (11): CO2-11.
          ‘v2.43’ タグ以降 、‘curses/’ ディレクトリにあるものに影響を与
          える変更のみを表示します。


Individual Developer(Participant;グループプロジェクト参加者)
************************************************************

グループプロジェクトの参加者として作業する開発者個人は、他の人と連絡する
方法を学ぶ必要があり、スタンドアロンの開発者個人が必要とするコマンドに加
えて、これらのコマンドを使用します。

   • git-clone(1) をアップストリームから実行して、あなたのローカルリポジ
     トリを準備します。

   • git-pull(1) と git-fetch(1) により、 "origin" をアップストリームと
     共に最新の状態に保ちます。

   • CVSスタイルの共有リポジトリワークフローを採用している場合、共有リポ
     ジトリのために git-push(1) を使います。

   • Linuxカーネルスタイルのパブリックフォーラムワークフローを採用してい
     る場合に、 git-format-patch(1) は電子メール送信を準備します。

   • git-send-email(1) を使用して、MUAによる破損なしに電子メール送信を送
     信します。

   • git-request-pull(1) を使用して、あなたのアップストリームがプルする
     変更の概要を作成します。


Examples
========

アップストリームのクローンを作成して作業します。 変更をアップストリームに送ります。
          $ git clone git://git.kernel.org/pub/scm/.../torvalds/linux-2.6 my2.6
          $ cd my2.6
          $ git switch -c mine master (1)
          $ edit/compile/test; git commit -a -s (2)
          $ git format-patch master (3)
          $ git send-email --to="person <email@example.com>" 00*.patch (4)
          $ git switch master (5)
          $ git pull (6)
          $ git log -p ORIG_HEAD.. arch/i386 include/asm-i386 (7)
          $ git ls-remote --heads http://git.kernel.org/.../jgarzik/libata-dev.git (8)
          $ git pull git://git.kernel.org/pub/.../jgarzik/libata-dev.git ALL (9)
          $ git reset --hard ORIG_HEAD (10)
          $ git gc (11)

     *note (1): CO3-1.
          master から新ブランチ ‘mine’ を作成し、 ‘mine’ でチェックアウ
          トします。

     *note (2): CO3-2.
          必要に応じてこの作業を繰り返します。

     *note (3): CO3-3.
          masterに関連して、あなたのブランチからパッチを抽出します。

     *note (4): CO3-4.
          そしてそれらを電子メールで送ります。

     *note (5): CO3-5.
          ‘master’ に戻り、最新情報を確認する準備をします

     *note (6): CO3-6.
          ‘git pull’ はデフォルトで ‘origin’ からフェッチし、現在のブラ
          ンチにマージします。

     *note (7): CO3-7.
          プルした直後に、前回チェックしてから上流で行われた変更を、関心
          のある領域でのみ確認します。

     *note (8): CO3-8.
          (不明な場合)外部リポジトリのブランチ名を確認します。

     *note (9): CO3-9.
          指定のリポジトリから、指定のブランチ ‘ALL’ をフェッチしマージ
          します。

     *note (10): CO3-10.
          プルしたのを元に戻します。(revert)

     *note (11): CO3-11.
          ガベージコレクションは、元に戻されたプルからゴミオブジェクト
          (leftover objects)を収集します。

別のリポジトリにプッシュします。
          satellite$ git clone mothership:frotz frotz (1)
          satellite$ cd frotz
          satellite$ git config --get-regexp '^(remote|branch)\.' (2)
          remote.origin.url mothership:frotz
          remote.origin.fetch refs/heads/*:refs/remotes/origin/*
          branch.master.remote origin
          branch.master.merge refs/heads/master
          satellite$ git config remote.origin.push \
                     +refs/heads/*:refs/remotes/satellite/* (3)
          satellite$ edit/compile/test/commit
          satellite$ git push origin (4)

          mothership$ cd frotz
          mothership$ git switch master
          mothership$ git merge satellite/master (5)

     *note (1): CO4-1.
          マザーシップ機には、ホームディレクトリの下にfrotzリポジトリが
          あります。そこからクローンを作成して、サテライト機でリポジトリ
          を開始します。

     *note (2): CO4-2.
          cloneは、これらの構成変数をデフォルトで設定します。 これは、マ
          ザーシップ機のブランチをフェッチしてローカルの
          ‘remotes/origin/*’ リモートトラッキングブランチに保存するため
          に ‘git pull’ を手配します。

     *note (3): CO4-3.
          すべてのローカルブランチをマザーシップ機の対応するブランチにプ
          ッシュするために ‘git push’ を手配します。

     *note (4): CO4-4.
          pushは、マザーシップ機の ‘remotes/satellite/*’ リモートトラッ
          キングブランチへすべての作業をstashします。これをバックアップ
          方法として使用できます。同様に、あなたはそのマザーシップ機があ
          なたから「フェッチされた」ふりをすることができます(アクセスが
          一方的な場合に便利です)。

     *note (5): CO4-5.
          マザーシップ機で、サテライト機で行われた作業をmasterブランチに
          マージします。

Branch off of a specific tag.
          $ git switch -c private2.6.14 v2.6.14 (1)
          $ edit/compile/test; git commit -a
          $ git checkout master
          $ git cherry-pick v2.6.14..private2.6.14 (2)

     *note (1): CO5-1.
          よく知られている(ただし多少遅れている)タグに基づいてプライベー
          トブランチを作成します。

     *note (2): CO5-2.
          forward port all changes in ‘private2.6.14’ branch to ‘master’
          branch without a formal "merging".  Or longhand + ‘git
          format-patch -k -m --stdout v2.6.14..private2.6.14 | git am -3
          -k’

   別の参加者送信メカニズム(participant submission mechanism)は、 ‘git
request-pull’ または pull-request メカニズム(GitHub（www.github.com）で
使用されているものなど)を使用して、あなたの貢献をあなたのアップストリー
ムに通知します。


インテグレーター
****************

グループプロジェクトのインテグレーターとして機能するかなり中心的な人物は
、他の人が行った変更を受け取り、それらをレビューして統合し、参加者が必要
とするコマンドに加えて以下のコマンドを使用して、他の人が使用できるように
結果を公開します。

   このセクションのコマンドは、GitHub（www.github.com）で ‘git
request-pull’ または pull-request に応答するユーザーが、他のユーザーの作
業を履歴に統合するために使用することもできます。 リポジトリの部分担当リ
ーダー(sub-area lieutenant)は、参加者とインテグレーターの両方として機能
します。

   • git-am(1) を使用して、寄稿者から電子メールで送信されて来たパッチを
     適用します。

   • git-pull(1) を使用して、信頼できる部分担当リーダーの分からマージし
     ます。

   • git-format-patch(1) を準備し、提案された代替案を寄稿者に送信します
     。

   • git-revert(1) は、失敗したコミットを元に戻します。(revert)

   • git-push(1) を使用して、最先端を公開します。


Examples
========

典型的なGitインテグレーターの一日。
          $ git status (1)
          $ git branch --no-merged master (2)
          $ mailx (3)
          & s 2 3 4 5 ./+to-apply
          & s 7 8 ./+hold-linus
          & q
          $ git switch -c topic/one master
          $ git am -3 -i -s ./+to-apply (4)
          $ compile/test
          $ git switch -c hold/linus && git am -3 -i -s ./+hold-linus (5)
          $ git switch topic/one && git rebase master (6)
          $ git switch -C seen next (7)
          $ git merge topic/one topic/two && git merge hold/linus (8)
          $ git switch maint
          $ git cherry-pick master~4 (9)
          $ compile/test
          $ git tag -s -m "GIT 0.99.9x" v0.99.9x (10)
          $ git fetch ko && for branch in master maint next seen (11)
              do
                  git show-branch ko/$branch $branch (12)
              done
          $ git push --follow-tags ko (13)

     *note (1): CO6-1.
          どちらかといえば、あなたが途中で何をしていたかを見てください。

     *note (2): CO6-2.
          ‘master’ にマージされていないのがどのブランチかを確認してくだ
          さい。他の統合ブランチ(‘maint’ 、‘ next‘ 、 ‘seen’)についても
          同様です。

     *note (3): CO6-3.
          メールを読んだり、該当するものを保存したり、準備が整っていない
          ものを保存したりします(他のメールリーダーも利用できます)。

     *note (4): CO6-4.
          あなたの署名伴って、対話的にそれらを適用します。

     *note (5): CO6-5.
          必要に応じてトピックブランチを作成し、再度署名して適用します。

     *note (6): CO6-6.
          masterにマージされていない、または安定したブランチの一部として
          公開されていない内部トピックブランチをリベースします。

     *note (7): CO6-7.
          next から 毎回 ‘seen’ を再スタートします。

     *note (8): CO6-8.
          そして、まだ調理中のトピックブランチをバンドルします。

     *note (9): CO6-9.
          深刻な修正をバックポートします。

     *note (10): CO6-10.
          署名付きタグを作成します。

     *note (11): CO6-11.
          masterがすでにpushされたものを超えて誤って巻き戻されていないこ
          とを確認してください。

     *note (12): CO6-12.
          ‘git show-branch’ からの出力では、 ‘master’ には ‘ko/master’ が
          持つすべてのものが含まれ、 ‘next’ には ‘ko/next’ が持つすべて
          のものが含まれる必要があります。

     *note (13): CO6-13.
          プッシュされた履歴を指す新しいタグとともに、最先端をプッシュし
          ます。

   この例では、 ‘ko’ の省略形はkernel.orgにあるGitメンテナのリポジトリを
指しており、以下のようになります:

     (in .git/config)
     [remote "ko"]
             url = kernel.org:/pub/scm/git/git.git
             fetch = refs/heads/*:refs/remotes/ko/*
             push = refs/heads/master
             push = refs/heads/next
             push = +refs/heads/seen
             push = refs/heads/maint


リポジトリ管理
**************

リポジトリ管理者は、以下のツールを使用して、開発者によるリポジトリへのア
クセスを設定および維持します。

   • git-daemon(1) を使用して、リポジトリからの匿名ダウンロードを許可し
     ます。

   • git-shell(1) は、共有中央リポジトリユーザーの「制限付きログインシェ
     ル」として使用できます。

   • git-http-backend(1) は、フェッチサービスとプッシュサービスの両方を
     可能にする Git-over-HTTP(スマートhttp)のサーバー側実装を提供します
     。

   • gitweb(1) は、GitリポジトリへのWebフロントエンドを提供します。これ
     は、 git-instaweb(1) スクリプトを使用して設定できます。

   update hook howto (howto/update-hook-example.html) には、共有中央リポ
ジトリを管理する良い例があります。

   さらに、以下のような他の広く展開されているホスティング、ブラウジング
、レビューソリューションがいくつかあります:

   • gitolite 、 gerrit code review 、 cgit 、その他。


Examples
========

‘/etc/services’ では以下を前提としています
          $ grep 9418 /etc/services
          git             9418/tcp                # Git Version Control System

Run git-daemon to serve /pub/scm from inetd.
          $ grep git /etc/inetd.conf
          git     stream  tcp     nowait  nobody \
            /usr/bin/git-daemon git-daemon --inetd --export-all /pub/scm

     実際の行は1行で書く必要があります。

Run git-daemon to serve /pub/scm from xinetd.
          $ cat /etc/xinetd.d/git-daemon
          # default: off
          # description: The Git server offers access to Git repositories
          service git
          {
                  disable = no
                  type            = UNLISTED
                  port            = 9418
                  socket_type     = stream
                  wait            = no
                  user            = nobody
                  server          = /usr/bin/git-daemon
                  server_args     = --inetd --export-all --base-path=/pub/scm
                  log_on_failure  += USERID
          }

     あなたの xinetd(8) のドキュメントとセットアップを確認してください。
     これはFedoraシステムからのものです。その他は異なる場合があります。

Give push/pull only access to developers using git-over-ssh.
     例えばこのように使います: ‘$ git push/pull
     ssh://host.xz/pub/scm/project’

          $ grep git /etc/passwd (1)
          alice:x:1000:1000::/home/alice:/usr/bin/git-shell
          bob:x:1001:1001::/home/bob:/usr/bin/git-shell
          cindy:x:1002:1002::/home/cindy:/usr/bin/git-shell
          david:x:1003:1003::/home/david:/usr/bin/git-shell
          $ grep git /etc/shells (2)
          /usr/bin/git-shell

     *note (1): CO7-1.
          ログインシェルは /usr/bin/git-shell に設定されており、 ‘git
          push’ と ‘git pull’ 以外は許可されていません。ユーザーはマシン
          へのsshアクセスを必要とします。

     *note (2): CO7-2.
          多くのディストリビューションでは、 /etc/shells にはログインシ
          ェルとして使用されるものをリストする必要があります。

CVS-style shared repository.
          $ grep git /etc/group (1)
          git:x:9418:alice,bob,cindy,david
          $ cd /home/devo.git
          $ ls -l (2)
            lrwxrwxrwx   1 david git    17 Dec  4 22:40 HEAD -> refs/heads/master
            drwxrwsr-x   2 david git  4096 Dec  4 22:40 branches
            -rw-rw-r--   1 david git    84 Dec  4 22:40 config
            -rw-rw-r--   1 david git    58 Dec  4 22:40 description
            drwxrwsr-x   2 david git  4096 Dec  4 22:40 hooks
            -rw-rw-r--   1 david git 37504 Dec  4 22:40 index
            drwxrwsr-x   2 david git  4096 Dec  4 22:40 info
            drwxrwsr-x   4 david git  4096 Dec  4 22:40 objects
            drwxrwsr-x   4 david git  4096 Nov  7 14:58 refs
            drwxrwsr-x   2 david git  4096 Dec  4 22:40 remotes
          $ ls -l hooks/update (3)
            -r-xr-xr-x   1 david git  3536 Dec  4 22:40 update
          $ cat info/allowed-users (4)
          refs/heads/master       alice\|cindy
          refs/heads/doc-update   bob
          refs/tags/v[0-9]*       david

     *note (1): CO8-1.
          開発者を同じgitグループに配置します。

     *note (2): CO8-2.
          そして、共有リポジトリをグループで書き込み可能にします。

     *note (3): CO8-3.
          ブランチポリシーの制御には、 Documentation/howto/ の Carl によ
          る update-hook の例を使用してください。

     *note (4): CO8-4.
          alice と cindy はmasterにプッシュでき、bobだけがdoc-updateにプ
          ッシュできます。 davidはリリースマネージャーであり、バージョン
          タグを作成してプッシュできる唯一の人物です。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: gitfaq,  Up: Top

Name
****

gitfaq — Gitの使用に関するよくある質問(FAQ)


Synopsis
********

gitfaq


DESCRIPTION
***********

このFAQの例では、 ‘bash’ や ‘dash’ などの標準のPOSIXシェルと、ホスティン
グプロバイダー ‘git.example.org’ にアカウント ‘author’ を持つユーザー A
U Thor を想定しています。


Configuration
*************

‘user.name’ には何を入れるべきですか？
     個人名、通常は名前とファミリーネームを使用した形式を入力する必要が
     あります。たとえば、Gitの現在のメンテナは "Junio C Hamano" (濱野 純
     )を使用しています。 これは、コミットするたびに保存される名前の部分
     になります。

     この構成は、リモートサービスへの認証には影響しません。 そのためには
     、 git-config(1) の ‘credential.username’ を参照してください。

‘http.postBuffer’ は実際には何をしますか？
     このオプションは、HTTPまたはHTTPSを介してデータをリモートにプッシュ
     するときにGitが使用するバッファーのサイズを変更します。データがこの
     サイズより大きい場合、GitのHTTPサポートを処理するlibcurlは、プッシ
     ュされたデータのサイズが事前にわからないため、チャンク転送エンコー
     ディングを使用します。

     リモートサーバーまたは中間のプロキシが、(チャンク転送エンコーディン
     グを導入している) HTTP/1.1 をサポートしていないか、チャンクデータが
     壊れていることがわかっている場合を除いて、この値をデフォルトサイズ
     のままにしておくことは問題ありません。これは一般的なプッシュ問題の
     解決策として、(誤って)提案されることがよくありますが、ほとんどすべ
     てのサーバーとプロキシが少なくとも HTTP/1.1 はサポートしているため
     、この値を上げてもほとんどのプッシュ問題は解決されません。 HTTP/1.1
     とチャンク転送エンコーディングを正しくサポートしていなかったサーバ
     ーまたはプロキシは、大量のトラフィックを遮断するため、今日のインタ
     ーネットでは無用の長物です。

     注意: この値を増やすと、GitがHTTPまたはHTTPSを介して行うすべての関
     連プッシュで使用されるメモリが増えることに注意してください。これは
     、すべてが使用されているかどうかに関係なく、バッファ全体が割り当て
     られるためです。したがって、別の値が必要であることが確実でない限り
     、デフォルトのままにしておくことをお勧めします。

別のエディタを構成するにはどうすればよいですか？
     Git専用のエディターを指定していない場合は、デフォルトで、「VISUAL」
     または「EDITOR」環境変数を使用して構成したエディターが使用されます
     。どちらも指定されていない場合は、システムのデフォルト(通常は「vi」
     )が使用されます。 ‘vi’ は使いにくい、または別のエディターを好む人も
     いるため、使用するエディターを変更することが望ましい場合があります
     。

     エディタを必要とするプログラム用に、あなたがエディタを構成したい場
     合、シェル構成(つまり、 ‘~/.bashrc’ とか ‘~/.zshenv’)を編集して、
     ‘EDITOR’ または ‘VISUAL’ 環境変数に適切な値に設定する行を含めること
     ができます。たとえば、エディタ ‘nano’ が必要な場合は、以下のように
     記述できます:

          export VISUAL=nano

     あなたがGit専用のエディタを構成したい場合は、 ‘core.editor’ 構成 ま
     たは ‘GIT_EDITOR’ 環境変数を設定できます。これらのオプションが参照
     される順序の詳細については git-var(1) を参照してください。

     注意: いずれの場合も、エディタの値はシェルに渡されるため、スペース
     を含む引数は適切に引用符で囲む必要があることに注意してください。さ
     らに、エディタが呼び出されたとき、通常ターミナルからデタッチするタ
     イプのエディタ場合は、それを行わないようにする引数を指定して指定す
     る必要があります。そうしないと、Gitはエディタでの変更を認識しません
     。 Windowsでこれらの問題の両方に対処する構成の例は、構成
     ‘"C:\Program Files\Vim\gvim.exe" --nofork’ です。これは、空白を含ん
     だファイル名をクォートし、プロセスのバックグラウンド実行を回避する
     ため ‘--nofork’ オプションを指定します。


Credentials
***********

HTTPでプッシュするときに資格情報を指定するにはどうすればよいですか？
     これを行う最も簡単な方法は、 ‘credential.helper’ 構成を介して資格情
     報ヘルパーを使用することです。ほとんどのシステムは、システム資格情
     報マネージャーと統合するための標準的な選択肢を提供します。たとえば
     、Git for Windowsは「wincred」資格情報マネージャーを提供し、macOSは
     「osxkeychain」資格情報マネージャーを提供し、標準デスクトップ環境を
     備えたUnixシステムは「libsecret」資格情報マネージャーを使用できます
     。 これらはすべて、パスワードまたはトークンを安全に保つために暗号化
     されたストアに資格情報を保存します。

     さらに、ホームディレクトリのファイルに保存する ‘store’ 資格情報マネ
     ージャー、または資格情報を永続的に保存しないが、特定の時間、資格情
     報の入力を求められないようにする ‘cache’ 資格情報マネージャーを使用
     できます。

     プロンプトが表示されたら、パスワードを入力することもできます。 URLに
     パスワード(パーセントエンコードする必要があります)を配置することは
     可能ですが、これは全然安全じゃ無く、誤って資格情報が公開される可能
     性があるため、お勧めしません。

環境変数からパスワードまたはトークンを読み取るにはどうすればよいですか？
     ‘credential.helper’ 構成オプションは、標準出力で資格情報プロトコル
     を生成する任意のシェルコマンドを受け取ることもできます。これは、た
     とえば、資格情報をコンテナに渡すときに役立ちます。

     このようなシェルコマンドは、オプション値を感嘆符(‘!’)で開始すること
     で指定できます。パスワードまたはトークンが ‘GIT_TOKEN’ に保存されて
     いる場合は、以下のコマンドを実行して資格情報ヘルパーを設定できます:

          $ git config credential.helper \
                  '!f() { echo username=author; echo "password=$GIT_TOKEN"; };f'

資格情報マネージャーに保存したパスワードまたはトークンを変更するにはどうすればよいですか？
     通常、パスワードまたはトークンが無効な場合、Gitはそれを消去し、新し
     いものを要求します。ただし、これが常に発生するとは限りません。パス
     ワードまたはトークンを変更するには、既存の資格情報を消去してくださ
     い。そうすればGitが新しい資格情報の入力を求めます。資格情報を消去す
     るには、以下の構文を使用します(ユーザー名(「author」の部分)とホスト
     名(「git.example.org」の部分)をあなた自身のに置き換えてください):

          $ echo url=https://author@git.example.org | git credential reject

HTTPを使用して同じホスティングプロバイダーで複数のアカウントを使用するにはどうすればよいですか？
     通常、これらのアカウントを区別する最も簡単な方法は、URLでユーザー名
     を使用することです。 たとえば、 ‘git.example.org’ にアカウント
     ‘author’ と ‘committer’ がある場合、URLに
     https://author@git.example.org/org1/project1.git
     (https://author@git.example.org/org1/project1.git) と
     https://committer@git.example.org/org2/project2.git
     (https://committer@git.example.org/org2/project2.git) を使用できま
     す。このように、資格情報ヘルパーを使用すると、アカウントの正しい資
     格情報が自動的に検索されます。すでにリモートを設定している場合は
     ‘git remote set-url origin
     https://author@git.example.org/org1/project1.git’ としてURLを変更で
     きます(詳細は git-remote(1) を参照)。

SSHを使用して同じホスティングプロバイダーで複数のアカウントを使用するにはどうすればよいですか？
     SSHをサポートするほとんどのホスティングプロバイダーでは、単一のキー
     ペアがユーザーを一意に識別します。したがって、複数のアカウントを使
     用するには、アカウントごとにキーペアを作成する必要があります。適度
     に最新のOpenSSHバージョンを使用している場合は ‘ssh-keygen -t
     ed25519 -f ~/.ssh/id_committer’ などとして新しいキーペアを作成でき
     ます。次に、公開鍵(この場合は ‘~/.ssh/id_committer.pub’ ※拡張子
     ‘.pub’ に注意) をホスティングプロバイダーに登録できます。

     ほとんどのホスティングプロバイダーは、プッシュに単一のSSHアカウント
     を使用します。つまり、すべてのユーザーが ‘git’ アカウント(例:
     ‘git@git.example.org’)にプッシュします。プロバイダーの場合は、SSHで
     複数のエイリアスを設定して、使用するキーペアを明確にすることができ
     ます。たとえば、以下のようなのを ‘~/.ssh/config’ に記述して、適切な
     秘密鍵ファイルに置き換えることができます:

          # This is the account for author on git.example.org.
          Host example_author
                  HostName git.example.org
                  User git
                  # This is the key pair registered for author with git.example.org.
                  IdentityFile ~/.ssh/id_author
                  IdentitiesOnly yes
          # This is the account for committer on git.example.org.
          Host example_committer
                  HostName git.example.org
                  User git
                  # This is the key pair registered for committer with git.example.org.
                  IdentityFile ~/.ssh/id_committer
                  IdentitiesOnly yes

     こうすれば、あなたはプッシュURLを調整して、 ‘git@example.org’ の代
     わりに ‘git@example_author’ または ‘git@example_committer’ を使用で
     きます(例: ‘git remote set-url
     git@example_author:org1/project1.git’) 。


Common Issues
*************

前回のコミットでミスをしました。どうすれば変更できますか？
     作業ツリーに適切な変更を加え、必要に応じて ‘git add <file>’ または
     ‘git rm <file>’ を実行してステージングしてから、 ‘git commit
     --amend’ を実行できます。変更はコミットに含まれ、コミットメッセージ
     を再度編集するように求められます。元のメッセージをそのまま使用した
     い場合は、 ‘--no-edit’ オプションを伴ってて ‘git commit’ を使用する
     か、または、エディタが開いたら何もせず保存して終了して済ませること
     もできます。

バグで変更を加えましたが、それは既にメインブランチに含まれてしまっています。どうすれば元に戻すことができますか？
     これに対処する通常の方法は、 ‘git revert’ を使用することです。これ
     により、元の変更が行われて貴重な貢献であった、という履歴が保持され
     るとともに、元の変更に問題があったためにそれらの変更を元に戻す新し
     いコミットも導入されます。revertのコミットメッセージは、復帰
     (revert)されたコミットを示し、通常、復帰(revert)が行われた理由に関
     する説明を含むように編集されます。

追跡されているファイルへの変更を無視するにはどうすればよいですか？
     Gitはこれを行う方法を提供していません。 その理由は、チェックアウト
     中など、Gitがこのファイルを上書きする必要がある場合、ファイルへの変
     更が貴重で保持されるべきかどうか、または無関係で安全に破棄できるか
     どうかがわからないためです。したがって、安全なルートを取り、常にそ
     れらを保存する必要があります。

     ‘git update-index’ の特定の機能、つまり、assume-unchangedビットと
     skip-worktreeビットを使おうとするのは魅力的ですが、これらはこの目的
     には適切に機能しないため、このように使用しないでください。

     あなたの目的が構成ファイルを変更することの場合は、テンプレートまた
     はデフォルトのセットであるファイルをリポジトリにチェックインして、
     一緒にコピーして必要に応じて変更できると便利なことがよくあります。
     この場合の変更されたファイルは、誤ってコミットすることを防ぐために
     、通常は無視されます。

さまざまなファイルを無視するようにGitに依頼したはずなのに、それらはまだ追跡されています
     ‘gitignore’ ファイルは、Gitによって追跡されていない特定のファイルが
     追跡されないままであることを保証します。ただし、特定のファイルが
     ‘.gitignore’ に追加される前に追跡されている場合は追跡されたままにな
     ります。ファイル/パターン を追跡解除して無視するには、 ‘git rm
     --cached <file/pattern>’ を使用し、 <file> に一致するパターンを
     ‘.gitignore’ に追加します。詳細については gitignore(5) を参照してく
     ださい。

フェッチまたはプルのどちらを実行すればよいか知るにはどうすればよいですか？
     フェッチは、作業ツリーや現在のブランチを変更せずに、リモートリポジ
     トリからの最新の変更のコピーを保存します。その後、自由に、アップス
     トリームの変更を検査、マージ、リベース、または無視することができま
     す。プルは、フェッチとその直後のマージまたはリベースで構成されます
     。 git-pull(1) を参照してください。


Merging and Rebasing
********************

寿命の長いブランチをスカッシュマージとマージすると、どのような問題が発生する可能性がありますか？
     一般に、スカッシュマージを使用して2つのブランチを複数回マージすると
     、さまざまな問題が発生する可能性があります。これには、GUIを使用した
     場合、または ‘...`表記を使用して範囲を表す場合に、 `git log’ 出力で
     追加のコミットが表示されることや、競合を何度も再解決する必要がある
     可能性が含まれます。

     Gitが2つのブランチ間で通常のマージを行う場合、正確に3者が考慮されま
     す。2つのブランチと、通常は2つのコミットの共通の祖先である「マージ
     ベース」(merge base)と呼ばれる3番目のコミットです。マージの結果は、
     マージベースと各headの間の変更の合計です。2つのブランチを通常のマー
     ジコミットでマージすると、新しい共通の祖先を持つ、新しいコミットが
     発生し、再度マージされるときはそれが最終的なマージベースになります
     。そうすると、Gitは、マージベースの前に発生した変更を考慮する必要が
     ないため、以前に解決した競合を再解決する必要がありません。

     スカッシュマージを実行する場合、マージコミットは作成されません。代
     わりに、一方の側からの変更は、もう一方の側への通常のコミットとして
     適用されます。つまり、これらのブランチのマージベースは変更されない
     ため、Gitが次のマージを実行するときに、前回考慮したすべての変更と新
     しい変更が考慮されます。つまり、競合を再解決する必要があるかもしれ
     ません。 同様に、 ‘git diff’ または ‘git log’ またはGUIで ‘...’ 表
     記を使用すると、元のマージベース以降のすべての変更が表示されます。

     結果として、2つの長期間有効なブランチを繰り返しマージする場合は、常
     に通常のマージコミットを使用するのが最善です。

2つのブランチに変更を加えた後、それを1つに戻した場合、それら2つのブランチのマージに変更が含まれるのはなぜですか？
     デフォルトでは、Gitがマージを行うとき、それは「ort」戦略と呼ばれる
     戦略を使用します。これは、派手な3者間マージ(fancy three-way merge)を
     行います。 このような場合、Gitはマージを実行するときに、正確に3つの
     ポイントを考慮します。2つのheadと、通常はこれらのコミットの共通の祖
     先である「マージベース」(merge base)と呼ばれる3番目のポイントです。
     Gitは、これらのブランチで発生した履歴や個々のコミットをまったく考慮
     しません。

     その結果、両方の側に変更があり、一方の側がその変更を元に戻した場合
     、結果には変更が含まれます。 これは、コードが一方の側で変更され、も
     う一方の側では正味の変更がないためです。このシナリオでは、Gitが変更
     を採用します。

     これが問題になる場合は、代わりにリベースを実行して、ブランチを他の
     ブランチに戻すことでリベースすることができます。このシナリオでのリ
     ベースは変更を元に戻します。これは、リベースが元に戻すことを含め、
     個々のコミットを適用するためです。リベースは書き換え履歴(rewrite
     history)をリベースするため、問題がない場合を除いて、公開されたブラ
     ンチのリベースは避けてください。詳細については、 git-rebase(1)の
     NOTESセクションを参照してください。


Hooks
*****

フックを使用して、ユーザーが特定の変更を行うのを妨げるにはどうすればよいですか？
     これらの変更を行うための唯一の安全な場所は、リモートリポジトリ(つま
     り、Gitサーバー)で、通常は ‘pre-receive’ フックまたは継続的インテグ
     レーション(CI)システムです。これらは、ポリシーを効果的に実施できる
     場所です。

     ‘pre-commit’ フック(または、コミットメッセージの場合は ‘commit-msg’
     フック)を使用してこれらをチェックするのが一般的です。これは、単独の
     開発者として作業していて、ツールが役立つことを望んでいる場合に最適
     です。ただし、開発者のマシンでフックを使用することは、ユーザーが(他
     のさまざまな方法の中でも)気付かれることなく ‘--no-verify’ でこれら
     のフックをバイパスできるため、ポリシーコントロールとしては効果的で
     はありません。 Gitは、ユーザーがローカルリポジトリを管理しているこ
     とを前提としており、これを防止したり、ユーザーを攻撃したりすること
     はありません。

     さらに、一部の上級ユーザーは、「pre-commit」フックが、一時的なコミ
     ットを使用して進行中の作業をステージングしたり、修正コミットを作成
     したりするワークフローの障害であると感じているため、とにかくこれら
     の種類のチェックはサーバーに押しやることをお勧めします。


Cross-Platform Issues
*********************

Windowsを使用していますが、テキストファイルがバイナリとして検出されます。
     Gitは、テキストファイルをUTF-8として保存する場合に最適に機能します
     。Windows上の多くのプログラムはUTF-8をサポートしていますが、Gitがバ
     イナリとして検出するリトルエンディアンのUTF-16形式を使用していない
     プログラムもあります。プログラムでUTF-8を使用できない場合は、これら
     のファイルをUTF-8としてリポジトリに保存しながら、ファイルをチェック
     アウトするエンコードを示す作業ツリーエンコーディング(working tree
     encoding)を指定できます。これにより、 git-diff(1) などのツールを期
     待どおりに機能させながら、ツールを機能させることができます。

     これを行うには、 ‘working-tree-encoding’ 属性を使用して
     gitattributes(5) パターンを指定できます。たとえば、以下のパターンは
     、Windowsで一般的なエンコーディングである UTF-16LE-BOM を使用するよ
     うにすべてのC言語ファイルを設定します:

          *.c     working-tree-encoding=UTF-16LE-BOM

     これを有効にするには、 ‘git add --renormalize’ を実行する必要があり
     ます。プラットフォーム間で使用されるプロジェクトでこれらの変更を行
     う場合は、ユーザーごとの構成ファイルまたは
     ‘$GIT_DIR/info/attributes’ の構成ファイルで行う必要があることに注意
     してください。リポジトリ内の ‘.gitattributes’ ファイルは、リポジト
     リのすべてのユーザーに適用されます。

     行末の正規化については以下のエントリを参照してください。属性ファイ
     ルの詳細については、gitattributes(5) を参照してください。

Windowsの git diff はファイルの最後に ‘^M’ があると表示します。
     デフォルトでは、GitはファイルがUnixの行末で保存されることを想定して
     います。そのため、Windowsの行末の一部であるキャリッジリターン
     (‘^M’)は、末尾の空白と見なされるため、表示されます。Gitはデフォルト
     で、既存の行ではなく、新しい行にのみ末尾の空白を表示します。

     ファイルをUnixの行末でリポジトリに保存し、プラットフォームの行末に
     自動的に変換できます。 これを行うには、構成オプション ‘core.eol’ を
     ‘native’ に設定し、以下のエントリで、ファイルをテキストまたはバイナ
     リとして構成する方法について確認してください。

     行末からキャリッジリターン(CR;\x0d)を削除したくない場合は、
     ‘core.whitespace’ 設定を使用してこの動作を制御することもできます。

常に変更されるファイルがあるのはなぜですか？
     内部的には、Gitは常にファイル名をバイトのシーケンスとして保存し、エ
     ンコードや大文字と小文字の区別は行いません。 ただし、Windowsと
     macOSはどちらも、デフォルトでファイル名に対して大文字と小文字を区別
     します。その結果、大文字と小文字が区別される場合にのみ名前が異なる
     複数のファイルまたはディレクトリが作成される可能性があります。Gitは
     これを問題なく処理できますが、ファイルシステムはこれらのファイルの
     1つしか保存できないため、Gitが他のファイルを読み取ってその内容を確
     認すると、変更されているように見えます。

     ファイルが1つだけになるように、ファイルの1つを削除することをお勧め
     します。これは、以下のようなコマンド(2つのファイル ‘AFile.txt’ と
     ‘afile.txt‘ を想定)を使用して、他の点ではクリーンな作業ツリーで実行
     できます:

          $ git rm --cached AFile.txt
          $ git commit -m 'Remove files conflicting in case'
          $ git checkout .

     これにより、ディスクへの変更は回避され、追加のファイルは削除されま
     す。プロジェクトでは、この問題が再発しないように、すべて小文字の名
     前などの命名規則を採用することをお勧めします。このような規則は、
     ‘pre-receive’ フックを使用して、または継続的インテグレーション
     (CI)システムにてチェックできます。

     システムでスマッジまたはクリーンフィルター(a smudge or clean
     filter)が使用されているが、スマッジまたはクリーンフィルターを実行せ
     ずにファイルが以前にコミットされた場合、任意のプラットフォームで永
     続的に変更されたファイルが発生する可能性もあります。これを修正する
     には、他の点ではクリーンな作業ツリーで以下を実行します:

          $ git add --renormalize .

Gitにファイルを保存するための推奨の方法は何ですか？
     Gitはあらゆるタイプのあらゆるファイルを保存および処理できますが、他
     の設定よりもうまく機能する設定がいくつかあります。一般に、テキスト
     ファイルは、LF(Unixスタイル)で終わるバイト順マーク(BOM)なしで
     UTF-8に保存することをお勧めします。また、コミットメッセージで
     UTF-8(ここでもBOMなし)を使用することをお勧めします。これらは、プラ
     ットフォーム間や ‘git diff’ や ‘git merge’ などのツールで最適に機能
     する設定です。

     さらに、テキストベースまたは非テキストベースのストレージ形式を選択
     できる場合は、ファイルをテキスト形式で保存し、必要に応じて他の形式
     に変換することをお勧めします。たとえば、1行に1つのレコードを持つテ
     キストベースのSQLダンプは、実際のデータベースファイルよりも差分とマ
     ージにはるかに適しています。同様に、MarkdownやAsciiDocなどのテキス
     トベースの形式は、MicrosoftWordやPDFなどのバイナリ形式よりもうまく
     機能します。

     同様に、バイナリ依存関係(共有ライブラリやJARファイルなど)を格納した
     り、リポジトリに製品をビルドしたりすることは、通常はお勧めしません
     。依存関係とビルド製品は、リポジトリに保存されている参照、URL、ハッ
     シュのみを使用して、アーティファクトサーバーまたはパッケージサーバ
     ーに保存するのが最適です。

     また、 gitattributes(5) ファイルを設定して、どのファイルがテキスト
     でどのファイルがバイナリであるかを明示的にマークすることをお勧めし
     ます。Gitに推測させたい場合は、属性 ‘text=auto’ を設定できます。 た
     とえば、一部のプロジェクトでは以下の設定が適切な場合があります:

          # By default, guess.
          *       text=auto
          # Mark all C files as text.
          *.c     text
          # Mark all JPEG files as binary.
          *.jpg   binary

     これらの設定は、ツールがパッチなどの出力に適切な形式を選択するのに
     役立ち、プラットフォームに適切な行末コードでファイルがチェックアウ
     トされます。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: gitglossary,  Up: Top

Name
****

gitglossary — Git用語集


Synopsis
********

*


DESCRIPTION
***********

alternate object database
     代役(alternate)メカニズムを介して、 リポジトリ (*note
     [def_repository]::) は オブジェクトデータベース (*note
     [def_object_database]::) の一部を "alternate" (代役) 呼ばれる別のオ
     ブジェクトデータベースから継承できます。

bare repository
     ベアリポジトリは通常、適切な名前のディレクトリ (*note
     [def_directory]::)で、接尾辞は ‘.git’ で、リビジョン管理下にあるフ
     ァイルのローカルでチェックアウトされたコピーはありません。つまり、
     通常は非表示の ‘.git’ サブディレクトリに存在するすべてのGit管理ファ
     イルと制御ファイルは、代わりに ‘repository.git’ ディレクトリに直接
     存在し、他のファイルは存在せず、チェックアウトされません。通常、公
     開リポジトリの発行者は、ベアリポジトリを利用可能にします。

blob object(ブロブオブジェクト)
     型の無いオブジェクト (*note [def_object]::)。例:ファイルの中身。

branch
     「ブランチ」は開発ラインです。ブランチの最新のコミット (*note
     [def_commit]::)は、そのブランチの先端(the tip of that branch)と呼ば
     れます。ブランチの先端はブランチhead (*note [def_head]::)によって参
     照され、ブランチで追加の開発が行われると前進します。単一のGit リポ
     ジトリ (*note [def_repository]::)は任意の数のブランチを追跡できます
     が、あなたの作業ツリー (*note [def_working_tree]::)はそのうちの1つ
     (「current branch」(現在のブランチ)または「checked out branch」(チ
     ェックアウトされたブランチ))に関連付けられ、 HEAD (*note
     [def_HEAD]::) はそのブランチを指します。

cache
     廃止。 index (*note [def_index]::) を使ってください。

chain(チェーン,チェイン)
     オブジェクトのリスト。リスト内の各 オブジェクト (*note
     [def_object]::) には、その後ろへの参照が含まれます(たとえば、 コミ
     ット (*note [def_commit]::) の後ろはその 親 (*note [def_parent]::)
     の1つである可能性があります)。

changeset
     "コミット (*note [def_commit]::)" の BitKeeper/cvsps での言い方です
     。Gitで変更を保存せず状態を保存するため、Gitでコミットを「
     changeset」と呼ぶのはナンセンスです。

checkout
     作業ツリー (*note [def_working_tree]::)の全部または一部をオブジェク
     トデータベース (*note [def_object_database]::)のツリーオブジェクト
     (*note [def_tree_object]::)またはブロブ (*note
     [def_blob_object]::)で更新し、作業ツリー全体が新しいブランチ (*note
     [def_branch]::)を指している場合は、インデックス (*note
     [def_index]::)とHEAD (*note [def_HEAD]::)を更新する操作。

cherry-picking(チェリーピック,チェリーピッキング)
     SCM (*note [def_SCM]::) の専門用語では、 "cherry pick" (つまみ食い
     )とは、一連の変更(通常はコミット)から変更のサブセットを選択し、それ
     らを別のコードベースの上に新しい一連の変更として記録することを意味
     します。Gitでは、これは "git cherry-pick" コマンドによって実行され
     、既存のコミット (*note [def_commit]::)によって導入された変更を抽出
     し、現在のブランチ (*note [def_branch]::)の先端に基づいてそれを新し
     いコミットとして記録します。

clean
     現在のhead (*note [def_head]::)が参照するリビジョン>と
     <<def_working_tree (*note [def_revision]::)が完全に一致
     (correspond)しているのであれば、その作業ツリー (*note
     [def_working_tree]::)はクリーンです。「dirty (*note [def_dirty]::)」
     も参照下さい。

commit
     名詞として: Gitの履歴における一つのポイント。プロジェクトの履歴全体
     は、相互に関連する一連のコミットとして表されます。「コミット」とい
     う言葉は、他のリビジョン管理システムが「リビジョン」または「バージ
     ョン」という言葉を使用するのと同じ場所で、Gitによってよく使用されま
     す。 コミットオブジェクト (*note [def_commit_object]::) の省略形と
     しても使用されます。

     動詞として(コミットする): インデックス (*note [def_index]::)の現在
     の状態を表す新しいコミットを作成し、その新しいコミットをポイントす
     るようにHEAD (*note [def_HEAD]::)を進めることにより、プロジェクトの
     状態の新しいスナップショットをGit履歴に保存する操作。

commit object
     親 (*note [def_parent]::)、コミッター、作者、日付、保存されたリビジ
     ョンの最上位ディレクトリ (*note [def_directory]::)に対応するツリー
     オブジェクト (*note [def_tree_object]::)など、特定のリビジョン
     (*note [def_revision]::)に関する情報を含むオブジェクト (*note
     [def_object]::)。

commit-ish (also committish)(コミットっぽい;コミット風)
     コミットオブジェクト (*note [def_commit_object]::)または、コミット
     オブジェクト (*note [def_commit_object]::)に再帰的に逆参照可能なオ
     ブジェクト (*note [def_object]::)。 コミットオブジェクト (*note
     [def_commit_object]::)や、コミットオブジェクト (*note
     [def_commit_object]::)を指すタグオブジェクト (*note
     [def_tag_object]::)や、コミットオブジェクト (*note
     [def_commit_object]::)を指すタグオブジェクト (*note
     [def_tag_object]::)を指すタグオブジェクト (*note
     [def_tag_object]::)などは全てcommit-ish(commit-ishes)です。

core Git
     Gitの基本的なデータ構造とユーティリティ。これは、限定的なソースコー
     ド管理ツールのみです。

DAG
     有向非巡回グラフ(Directed acyclic graph)。 コミットオブジェクト
     (*note [def_commit_object]::) は、(有向の)親を持ち、コミットオブジ
     ェクトのグラフが非巡回(同じ オブジェクト (*note [def_object]::) で
     開始・終了する チェイン (*note [def_chain]::) はありません)であるた
     め有向非巡回グラフを形成します。

dangling object
     (ぶらぶら揺れるオブジェクト)他の到達不能オブジェクト (*note
     [def_unreachable_object]::)からでも到達できない到達不能オブジェクト
     (*note [def_unreachable_object]::)。 danglingオブジェクトには、リポ
     ジトリ (*note [def_repository]::)内の任意のrefまたはオブジェクト
     (*note [def_object]::)からの参照はありません。

detached HEAD
     通常、HEAD (*note [def_HEAD]::)はブランチ (*note [def_branch]::)の
     名前を格納し、HEADが示す履歴を操作するコマンドは、HEADが指すブラン
     チの先端につながる履歴を操作します。 ただし、Gitでは、必ずしも特定
     のブランチの先端ではない任意のコミット (*note [def_commit]::)をチェ
     ックアウト (*note [def_checkout]::)することもできます。このような状
     態のHEADを「detached」(切り離されている、デタッチされている)と呼び
     ます。

     注意: 現在のブランチの履歴を操作するコマンド(たとえば、その上に新し
     い履歴を構築するための ‘git commit’)は、HEADがデタッチされている間
     も機能することに注意してください。それらは、ブランチに影響を与える
     ことなく、更新された履歴の先端を指すようにHEADを更新します。現在の
     ブランチに関する情報を更新または照会するコマンド(たとえば、現在のブ
     ランチが統合するリモートトラッキングブランチを設定する ‘git branch
     --set-upstream-to’)は、この状態で問い合わせる(実際の)現在のブランチ
     がないため、明らかに機能しません。

directory
     あなたが "ls" で得られる一覧の事 :-)

dirty
     作業ツリー (*note [def_working_tree]::)で、現在のブランチ (*note
     [def_branch]::)に対してコミット (*note [def_commit]::)されてない変
     更が含まれている場合、「作業ツリー (*note [def_working_tree]::)はダ
     ーティーである」と言われます。

evil merge
     邪悪なマージとは、どの 親 (*note [def_parent]::) にも表示されない変
     更を導入する マージ (*note [def_merge]::) です。

fast-forward
     fast-forward(早送り)は、とあるリビジョン (*note [def_revision]::)に
     、その子孫である別のブランチ (*note [def_branch]::)の変更をマージす
     る特殊なタイプのマージ (*note [def_merge]::)です。このような場合、
     新しいマージ (*note [def_merge]::)コミット (*note [def_commit]::)を
     行うのではなく、マージするブランチと同じリビジョンを指すようにブラ
     ンチを更新するだけです。これは、リモートリポジトリ (*note
     [def_repository]::)のリモート追跡ブランチ (*note
     [def_remote_tracking_branch]::)で頻繁に発生します。

fetch
     ブランチ (*note [def_branch]::)をフェッチするということは、リモート
     リポジトリ (*note [def_repository]::)からブランチのhead ref (*note
     [def_head_ref]::)を取得して、ローカルのオブジェクトデータベース
     (*note [def_object_database]::)に欠落しているオブジェクトを見つけ、
     そして欠落したオブジェクトを取得することを意味します。 git-fetch(1)
     も参照してください。

file system
     リーナス・トーバルズは当初、Gitをユーザー空間ファイルシステム、つま
     りファイルとディレクトリを保持するインフラストラクチャとして設計し
     ました。これにより、Gitの効率と速度が保証されました。

Git archive
     リポジトリ (*note [def_repository]::) の同義語(arch people 向け)。

gitfile
     実際のリポジトリであるディレクトリを指す、作業ツリーのルートにある
     プレーンファイル ‘.git’

grafts
     graftsは、コミットの偽の祖先情報を記録することで、他の点では異なる
     2つの開発ラインを結合できます。こうすることで、あるコミット (*note
     [def_commit]::)が持つ親 (*note [def_parent]::)の組を、コミット作成
     時に記録されたものとは異なるものとして Git に見せかけることができる
     のです。これは ‘.git/info/grafts’ ファイルを介して構成されます。

     注意: graftsメカニズムは時代遅れであり、リポジトリ間でオブジェクト
     を転送する際に問題が発生する可能性があることに注意してください。 同
     じことを行うためのより柔軟で堅牢なシステムについては、
     git-replace(1) を参照してください。

hash
     Gitの文脈では オブジェクト名 (*note [def_object_name]::) と同義語。

head
     ブランチ (*note [def_branch]::) の先端にある コミット (*note
     [def_commit]::) への、 名付けられた参照 (*note [def_ref]::) です。
     パックされた参照を使用する場合を除いて、headは
     ‘$GIT_DIR/refs/heads/’ ディレクトリのファイルに保存されます。
     (linkgit: git-pack-refs[1] を参照してください。)

HEAD
     現在のブランチ (*note [def_branch]::)。 より詳細に言うと、あなたの
     作業ツリー (*note [def_working_tree]::)は通常、HEADによって参照され
     るツリーの状態から派生します。HEADは、リポジトリ内のhead (*note
     [def_head]::)達のうちの一つへの参照です。ただし、detached HEAD
     (*note [def_detached_HEAD]::)をの場合は、任意のコミットを直接参照し
     ています。

head ref
     head (*note [def_head]::) の同義語。

hook
     いくつかのGitコマンドの通常の実行中に、開発者が機能を追加したりチェ
     ックしたりできるようにするオプションのスクリプトを呼び出します。通
     常、フックを使用すると、コマンドを事前に確認して中止することができ
     、そしてまた、操作の完了後に事後通知を行うことができます。フックス
     クリプトは ‘$GIT_DIR/hooks/’ ディレクトリにあり、ファイル名から
     ‘.sample’ サフィックスを削除するだけで有効になります。以前のバージ
     ョンのGitでは、それらを実行可能にする必要がありました。

index
     状態情報を含むファイルのコレクションで、その内容はオブジェクトとし
     て保存されます。インデックスは、あなたの作業ツリー (*note
     [def_working_tree]::)の保存バージョンです。正直なところ、これには、
     マージ (*note [def_merge]::)のときに使用される、作業ツリーの2番目お
     よび3番目のバージョンを含めることもできます。

index entry
     インデックス (*note [def_index]::)に保存されている特定のファイルに
     関する情報。マージ (*note [def_merge]::)が開始されたが、まだ終了し
     ていない場合(つまり、インデックスにそのファイルの複数のバージョンが
     含まれている場合)、インデックスエントリをマージ解除(unmerge)できま
     す。

master
     デフォルトの開発 ブランチ (*note [def_branch]::) 。 Git リポジトリ
     (*note [def_repository]::) を作成するたびに、「master」という名前の
     ブランチが作成され、アクティブなブランチになります。 ほとんどのロー
     カル開発に含まれていますが、これは純粋に慣例によるものであり、必須
     ではありません。

merge
     動詞として: 別のブランチ (*note [def_branch]::)(あるいは外部のリポ
     ジトリ (*note [def_repository]::)から)の内容を現在のブランチに取り
     込むこと。マージされたブランチが別のリポジトリからのものである場合
     、これは最初にリモートブランチをフェッチ (*note [def_fetch]::)し、
     次に結果を現在のブランチにマージすることによって行われます。このフ
     ェッチ操作とマージ操作の組み合わせは、プル(pull) (*note
     [def_pull]::)と呼ばれます。マージは、ブランチが分岐してから行われた
     変更を識別し、それらすべての変更を一緒に適用する自動プロセスによっ
     て実行されます。変更が競合する場合は、マージを完了するために手動に
     よる介入が必要になる場合があります。

     名詞として: fast-forward (*note [def_fast_forward]::)でない限り、マ
     ージ成功の結果として、マージされたブランチ (*note [def_branch]::)の
     先端を親 (*note [def_parent]::)に持つ新しいコミット (*note
     [def_commit]::)が作成されます。このコミットは「マージコミット」と呼
     ばれます。または単に「マージ」と呼ばれることもあります。

object(オブジェクト)
     Gitの保管ユニット(unit of storage)。その内容による SHA-1 (*note
     [def_SHA1]::) によって一意に識別されます。したがって、オブジェクト
     を変更することはできません。

object database
     「オブジェクト」の組を格納し、個々のオブジェクト (*note
     [def_object]::)はそのオブジェクト名 (*note [def_object_name]::)によ
     って識別されます。オブジェクトは通常、 ‘$GIT_DIR/objects/’ にありま
     す。

object identifier(オブジェクトID)
     object name (*note [def_object_name]::) (オブジェクト名)の同義語

object name(オブジェクト名)
     オブジェクト> の一意の識別子。オブジェクト名は通常、40文字の16進文
     字列で表されます。一般に <<def_SHA1 (*note [def_object]::) とも呼ば
     れます。

object type(オブジェクトタイプ)
     「コミット (*note [def_commit_object]::) 識別子」または「ツリー
     (*note [def_tree_object]::) 識別子」または「タグ (*note
     [def_tag_object]::) 識別子」または「ブロブ (*note
     [def_blob_object]::) 識別子」のいずれかで、 オブジェクト (*note
     [def_object]::) のタイプを表します。

octopus
     3つ以上(more than two)のブランチをマージします

origin
     デフォルトの上流(upstream)リポジトリ (*note [def_repository]::)。ほ
     とんどのプロジェクトには、追跡する上流プロジェクトが少なくとも1つあ
     ります。デフォルトでは、「origin」がその目的で使用されます。新しい
     上流更新分は、 origin/name-of-upstream-branch という名前の リモート
     追跡ブランチ (*note [def_remote_tracking_branch]::)にフェッチされま
     す。これは、 ‘git branch-r’ を使用して確認できます。

overlay
     ‘cp -R’ が宛先ディレクトリの内容を更新するのと同様に、ファイルを更
     新して作業ディレクトリに追加するのみで削除を行いません。これは、イ
     ンデックス (*note [def_index]::)またはツリー風の何か(tree-ish)
     (*note [def_tree-ish]::)からファイルをチェックアウトするときの
     checkout (*note [def_checkout]::)のデフォルトモードです。対照的に、
     オーバーレイなしモード(no-overlay mode)では、 ‘rsync --delete’ と同
     様に、ソース側に存在しない追跡ファイルは削除されます。

pack
     1つのファイルに圧縮されたオブジェクトの組(スペースを節約するため、
     またはそれらを効率的に送信するため)。

pack index
     パックの内容に効率的にアクセスするのに役立つ、パック (*note
     [def_pack]::)内のオブジェクトの識別子とその他の情報のリスト。

pathspec
     Gitコマンドでパスを制限するために使用されるパターン。

     pathspecsは、「git ls-files」、「git ls-tree」、「git add」、「git
     grep」、「git diff」、「git checkout」、および、ツリーまたはワーク
     ツリーのサブセットへの操作の為にスコープを制限する他の多くのコマン
     ドのコマンドラインで使用されます。パスが現在のディレクトリまたはト
     ップレベルのどちらを基準にしているかについては、各コマンドのドキュ
     メントを参照してください。 pathspecの構文は以下のとおりです:

        • どのパスもそれ自体と一致します

        • 最後がスラッシュであるpathspecは、ディレクトリプレフィックスを
          表します。そのpathspecのスコープは、そのサブツリーに制限されて
          います。

        • pathspecの残りの部分は、pathnameの残りの部分のパターンです。 デ
          ィレクトリプレフィックスに関連するパスは、 fnmatch(3) を使用し
          てそのパターンと照合されます。特に、 _*_ と _?_ はディレクトリ
          区切り文字と一致させる事ができます。

     たとえば、 ‘Documentation/*.jpg’ は、
     ‘Documentation/chapter_1/figure_1.jpg’ を含む、Documentationサブツ
     リー内のすべての ‘.jpg’ ファイルと一致します。

     コロン(‘:’)で始まるpathspecには特別な意味があります。短い形式では、
     先頭のコロン(‘:’)の後に0個以上の「魔法記号」(magic signature)(オプ
     ションで別のコロン(‘:’)で終了)が続き、残りはパスと照合するパターン
     です。「魔法記号」は、英数字、グロブ、正規表現の特殊文字でもコロン
     でもないASCII記号で構成されます。パターンが「魔法記号」シンボルセッ
     トに属さず、コロンではない文字で始まる場合、「魔法記号」を終了する
     オプションのコロンは省略できます。

     長い形式では、先頭のコロン(‘:’)の後に開き括弧(‘(’) 、0個以上の「魔
     法単語」(magic words)のコンマ区切りリスト、および閉じ括弧(‘)’) が続
     き、残りは次のパターンです。パスと一致します。

     コロンのみのpathspecは、「pathspecがない」ことを意味します。 この形
     式は、他のpathspecと組み合わせないでください。

     top
          魔法単語 ‘top’ (魔法記号: ‘/’)は、サブディレクトリ内からコマン
          ドを実行している場合でも、作業ツリーのルートからパターンを一致
          させます。

     literal
          ‘*’ または ‘?’ などのパターンのワイルドカードはリテラル文字と
          して扱われます。

     icase
          (英文字の)大文字小文字区別せずにマッチ

     glob
          Gitはパターンを、 FNM_PATHNAMEフラグを指定した fnmatch(3) に消
          費されるのに適したシェルグロブとして扱います。パターン内のワイ
          ルドカードは、パス名内の / と一致しません。 たとえば、「
          Documentation/*.html」は「Documentation/git.html」と一致します
          が、「Documentation/ppc/ppc.html」または「
          tools/perf/Documentation/perf.html」とは一致しません。

          フルパス名と一致するパターンの2つの連続するアスタリスク ‘**’ は
          、特別な意味を持つ場合があります:

             • 先頭の ‘**’ の後にスラッシュが続く場合は、すべてのディレ
               クトリで一致することを意味します。たとえば、 ‘**/foo’ は
               、パターン ‘foo’ と同じように、ファイルまたはディレクトリ
               ‘foo’ のどこにでも一致します。 ‘**/foo/bar’ は、ディレク
               トリ ‘foo’ の直下にあるファイルまたはディレクトリ ‘bar’ と
               一致します。

             • 末尾の ‘/**’ は、内部のすべてに一致します(matches
               everything inside)。たとえば、 ‘abc/**’ は、 ‘.gitignore’
               ファイルの場所を基準にして、ディレクトリ "abc" 内のすべて
               のファイルと無限の深さで一致します。

             • スラッシュの後に2つの連続するアスタリスクが続く場合、スラ
               ッシュは0個以上のディレクトリに一致します。 たとえば、
               ‘a/**/b’ は ‘a/b’ 、 ‘a/x/b’ 、‘a/x/y/b’ などと一致します
               。

             • 他の連続するアスタリスクは無効と見なされます。

               グロブ魔法はリテラル魔法と互換性がありません。

     attr
          ‘attr:’ の後には、スペースで区切られた「属性要件」(attribute
          requirements)のリストがあります。パスが一致すると見なされるに
          は、これらすべてを満たす必要があります。これは、通常の非魔法
          pathspecパターンマッチングに追加されます。 gitattributes(5) 参
          照。

          パスの各属性要件は、以下のいずれかの形式を取ります:

             • ‘ATTR’ では、属性 ‘ATTR’ を設定する必要があります。

             • ‘-ATTR’ では、属性 ‘ATTR’ が設定されていない必要がありま
               す。

             • ‘ATTR = VALUE’ では、属性 ‘ATTR’ を文字列 ‘VALUE’ に設定
               する必要があります。

             • ‘!ATTR’ では、属性 ‘ATTR’ が指定されていない必要がありま
               す。

               注意: ツリーオブジェクトと照合する場合、属性は、指定され
               たツリーオブジェクトからではなく、作業ツリーから取得され
               ることに注意してください。

     exclude
          パスが非除外パススペックと一致すると、すべての除外パススペック
          (魔法記号: ‘!’ またはその同義語 ‘^’)が実行されます。一致する場
          合、パスは無視されます。非除外パススペックがない場合、パススペ
          ックなしで呼び出されたかのように、除外が結果セットに適用されま
          す。

parent(親)
     コミットオブジェクト (*note [def_commit_object]::)には、開発ライン
     で論理的に前にあったもののリスト、つまり親が含まれています(あるいは
     、前・親が無い場合は空です)。

pickaxe
     pickaxe (*note [def_pickaxe]::)(ピカクス;十字鋤;鶴嘴;つるはし)とい
     う用語は、特定のテキスト文字列を追加または削除する変更を選択するの
     に役立つdiffcoreルーチンのオプションを指します。 ‘--pickaxe-all’ オ
     プションを使用すると、特定のテキスト行などを導入または削除した完全
     なチェンジセット (*note [def_changeset]::)を表示するために使用でき
     ます。 git-diff(1) を参照してください。

plumbing(配管)
     core Git (*note [def_core_git]::) のキュートな呼び方。

porcelain(磁器)
     core Git (*note [def_core_git]::)に依存するプログラムとプログラムス
     イートのキュートな名前で、コアGitへの高レベルのアクセスを示します。
     磁器(porcelain)は、配管(plumbing) (*note [def_plumbing]::)よりも多
     くのSCM (*note [def_SCM]::)インターフェースを公開します。

per-worktree ref
     グローバルではなく、ワークツリー (*note [def_working_tree]::)ごとの
     ref。これは現在、HEAD (*note [def_HEAD]::)と ‘refs/bisect/’ で始ま
     るすべての参照のみですが、のちには普通でない他の参照が含まれる可能
     性があります。

pseudoref
     疑似参照(pseudoref)は ‘$GIT_DIR’ の下にあるファイルのクラスであり、
     rev-parseしたときrefのように動作しますが、それはgitによって特別扱さ
     れます。疑似参照はすべて大文字の名前を持ち、かつ、常にSHA-1 (*note
     [def_SHA1]::)とそれに続く空白(whitespace)で構成される行で始まります
     。したがって、HEADは疑似参照ではありません。なぜならHEADはシンボリ
     ック参照である場合があるためです。オプションで、いくつかの追加デー
     タが含まれる場合があります。例としては ‘MERGE_HEAD’ と
     ‘CHERRY_PICK_HEAD’ があります。 per-worktree refs (*note
     [def_per_worktree_ref]::) とは異なり、これらのファイルはシンボリッ
     クrefにすることはできず、reflogを含めることはできません。 また、通
     常のref更新機構を使用して更新することもできません。代わりに、ファイ
     ルに直接書き込むことによって更新されます。ただし、それらはrefである
     かのように読み取ることができるため、 ‘git rev-parse MERGE_HEAD’ は
     機能します。

pull
     ブランチ (*note [def_branch]::)をプルするとは、それをフェッチ
     (*note [def_fetch]::)しマージ (*note [def_merge]::)することを意味し
     ます。 git-pull(1) も参照してください。

push
     ブランチ (*note [def_branch]::)をプッシュするとは、リモートリポジト
     リ (*note [def_repository]::)からブランチのヘッド参照 (*note
     [def_head_ref]::)を取得し、それがブランチのローカルヘッド参照の祖先
     であるかどうかを確認し、そしてその場合ローカルヘッド参照から到達可
     能 (*note [def_reachable]::)であり、かつ、リモートリポジトリに欠落
     しているすべてのオブジェクトを、リモートオブジェクトデータベース
     (*note [def_object_database]::)に持っていき、リモートヘッド参照を更
     新します。リモートヘッド (*note [def_head]::)がローカルヘッドの祖先
     でない場合、プッシュは失敗します。

reachable(到達可能)
     特定のコミット (*note [def_commit]::)のすべての祖先は、その特定のコ
     ミットから到達可能(reachable)であると言われます。より一般的には、タ
     グ (*note [def_tag]::)付けしたものだったり、親またはツリーへのコミ
     ットオブジェクト (*note [def_commit_object]::)だったり、ツリー
     (*note [def_tree_object]::)に含まれるツリーやブロブだったり、をたど
     るチェーン (*note [def_chain]::)によって、あるオブジェクト (*note
     [def_object]::)から別のオブジェクト (*note [def_object]::)に到達で
     きる場合に到達が可能です。

rebase
     一連の変更をブランチ (*note [def_branch]::)から別のベースに再適用し
     、そのブランチのヘッド (*note [def_head]::)を再適用した結果にリセッ
     トします。

ref
     オブジェクト名または別のrefを指す ‘refs/’ で始まる名前(例:
     ‘refs/heads/master’;別のrefを指すrefは シンボリックref (*note
     [def_symref]::) と呼ぶ)。便宜上、Gitコマンドの引数として使用する場
     合は ‘refs/’ を省略できる場合があります。詳細については
     gitrevisions(7) を参照してください。 refs は repository (*note
     [def_repository]::) に保存されます。

     ref名前空間は階層的です。さまざまなサブ階層がさまざまな目的で使用さ
     れます(たとえば、 ‘refs/heads/’ 階層はローカルブランチを表すために
     使用されます)。

     ‘refs/’ で始まらない特別な目的のrefがいくつかあります。最も注目すべ
     き例は ‘HEAD’ です。

reflog
     reflogは、refのローカルの「履歴」を示します。 つまり、このリポジト
     リの最後の3番目のリビジョンが何であったか、およびこのリポジトリの昨
     日の午後9時14分時点での「現在の状態」が何であったかを知ることができ
     ます。詳細については git-reflog(1) を参照してください。

refspec
     「refspec」は、フェッチ (*note [def_fetch]::)やプッシュ (*note
     [def_push]::)によって使用され、リモートref (*note [def_ref]::)とロ
     ーカルrefの間のマッピングを記述します。

remote repository
     同じプロジェクトを追跡するために使用されるが、別の場所にあるリポジ
     トリ (*note [def_repository]::)。リモートと通信するには、フェッチ
     (*note [def_fetch]::)またはプッシュ (*note [def_push]::)を参照して
     ください。

remote-tracking branch
     別のリポジトリ (*note [def_repository]::)からの変更を追跡するために
     使用されるref (*note [def_ref]::)。 これは通常、
     ‘refs/remotes/foo/bar’ のように見え(「foo」という名前のリモートで「
     bar」という名前のブランチを追跡することを示します)、構成されたフェ
     ッチrefspec (*note [def_refspec]::)の右側(right-hand-side)に一致し
     ます。リモート追跡ブランチには、直接の変更を含めたり、ローカルコミ
     ットを行ったりしないでください。

repository
     << def_ref,refs>>のコレクションと、refから到達可能 (*note
     [def_reachable]::)なすべてのオブジェクトを含むオブジェクトデータベ
     ース (*note [def_object_database]::)。1つまたは複数の磁器 (*note
     [def_porcelain]::)コマンドからのメタデータが付随している可能性があ
     ります。リポジトリは、代替メカニズム (*note
     [def_alternate_object_database]::)を介してオブジェクトデータベース
     を他のリポジトリと共有できます。

resolve
     失敗した自動 マージ (*note [def_merge]::) が残したものを手動で修正
     する操作。

revision
     コミット (*note [def_commit]::) (名詞) の同義語

rewind(巻き戻し)
     開発の一部を破棄する、つまり、 head (*note [def_head]::) を以前の リ
     ビジョン (*note [def_revision]::) に割り当てる。

SCM
     Source code management (tool).

SHA-1
     セキュアハッシュアルゴリズム1(Secure Hash Algorithm 1);暗号化ハッシ
     ュ関数。 Git界隈ではオブジェクト名 (*note [def_object_name]::)の同
     義語として使用されます。

shallow clone
     ほとんどの場合 shallowリポジトリ (*note [def_shallow_repository]::)
     の同義語ですが、この言い方は、 ‘git clone --depth=...’ コマンドを実
     行して作成されたこと明言したものです。

shallow repository
     浅いリポジトリ(shallow repository)には不完全な履歴があり、そのコミ
     ットの一部では親が削除されて(cauterized away)います(言い換えると、
     Gitは、コミットオブジェクトに記録があっても、これらのコミットには親
     がないふりをするように指示されます)。これは、アップストリームで記録
     された実際の履歴がはるかに大きい場合でも、プロジェクトの最近の履歴
     のみに関心がある場合に役立つことがあります。浅いリポジトリは、
     git-clone(1) に ‘--depth’ オプションを指定することで作成され、その
     履歴は後で git-fetch(1) で深めることができます。

stash entry
     ダーティ (*note [def_dirty]::) な作業ディレクトリの内容とインデック
     スを、将来の再利用のために一時的に保存するのに使用される オブジェク
     ト (*note [def_object]::) 。

submodule
     とあるリポジトリの内部で、それとは別個のプロジェクトの履歴を保持す
     る リポジトリ (*note [def_repository]::) (ここで、その、とあるリポ
     ジトリを スーパープロジェクト (*note [def_superproject]::) と呼びま
     す)。

superproject
     作業ツリー内の他のプロジェクトのリポジトリを サブモジュール (*note
     [def_submodule]::) として参照する リポジトリ (*note
     [def_repository]::) 。 スーパープロジェクトは、含まれているサブモジ
     ュールのコミットオブジェクトの名前を知っています(ただし、そのコピー
     は保持していません)。

symref
     シンボリックref(シンボリック参照): SHA-1 (*note [def_SHA1]::) ID自
     体を含む代わりに「ref: refs/some/thing」の形式であり、参照されると
     、この参照を再帰的に逆参照します。 _HEAD (*note [def_HEAD]::)_ は
     symrefの代表的な例です。シンボリックrefは git-symbolic-ref(1) コマ
     ンドで操作されます。

tag
     任意のタイプのオブジェクトを指す ‘refs/tags/’ 名前空間の下のref
     (*note [def_ref]::)(通常、タグは タグ (*note [def_tag_object]::) ま
     たは コミットオブジェクト (*note [def_commit_object]::) のいずれか
     を指します)。head (*note [def_head]::)とは対照的に、タグは ‘commit’
     コマンドによって更新されません。Gitタグは、Lispタグとは何の関係もあ
     りません(Git界隈では、それはオブジェクトタイプ (*note
     [def_object_type]::)と呼ばれます)。タグは通常、コミットの祖先チェー
     ン (*note [def_chain]::)の特定のポイントをマークするために使用され
     ます。

tag object
     別のオブジェクトを指すref (*note [def_ref]::)を含むオブジェクト
     (*note [def_object]::)。これには、コミットオブジェクト (*note
     [def_commit_object]::)のようにメッセージを含めることができます。ま
     たPGP署名を含めることもでき、その場合、「署名付きタグオブジェクト」
     (signed tag object)と呼ばれます。

topic branch
     開発者が概念的な開発ラインを識別するために使用する通常のGitブランチ
     (*note [def_branch]::)。(従来のSCMに比べて)ブランチは非常に簡単で処
     理コストが掛からないため、それぞれが非常に明確に定義された概念また
     は小さな増分であるが関連する変更を含む、いくつかの小さなブランチを
     持つことが望ましい場合がよくあります。

tree
     作業ツリー (*note [def_working_tree]::)、または、ツリーオブジェクト
     (*note [def_tree_object]::)とそれに依存するブロブ (*note
     [def_blob_object]::)やツリーオブジェクト(つまり、作業ツリーの保存さ
     れた表現)、のいずれか。

tree object
     ファイル名とモードのリスト、および関連するブロブやツリーオブジェク
     トへのrefを含むオブジェクト (*note [def_object]::)。<< def_tree,ツ
     リー>>とディレクトリ (*note [def_directory]::)は同じ意味です。

tree-ish (also treeish)
     ツリーっぽい何か。ツリーオブジェクトに再帰的に逆参照できる ツリーオ
     ブジェクト (*note [def_tree_object]::) または オブジェクト (*note
     [def_object]::) です。 コミットオブジェクト (*note
     [def_commit_object]::) を逆参照すると、その リビジョン (*note
     [def_revision]::) の最上位 ディレクトリ> に対応するツリーオブジェク
     トが生成されます。※右記は全てツリーっぽい(tree-ish)モノです:
     <<def_commit-ish (*note [def_directory]::) 、ツリーオブジェクト、ツ
     リーオブジェクトを指す タグオブジェクト (*note [def_tag_object]::)
     、タグオブジェクトを指すタグオブジェクト

unmerged index
     マージされていないインデックスエントリ (*note [def_index_entry]::)を
     含むインデックス (*note [def_index]::)。

unreachable object
     ブランチ (*note [def_branch]::) または タグ (*note [def_tag]::) ま
     たはその他の参照から 到達可能 (*note [def_reachable]::) ではない(辿
     れない、ポイントされてない) オブジェクト (*note [def_object]::) 。

upstream branch
     当該のブランチからマージされる(または当該のブランチがリベースされる
     )デフォルトのブランチ (*note [def_branch]::)。これは、
     ‘branch.<name>.remote’ や ‘branch.<name>.merge’ を介して構成されま
     す。Aのアップストリームブランチが ‘origin/B’ の場合、「Aは
     ‘origin/B’ を追跡しています」と言うことがあります。

working tree
     実際にチェックアウトされたファイル群のツリー。 作業ツリーには通常、
     HEAD (*note [def_HEAD]::) コミットのツリーの内容に加えて、任意の、
     まだコミットされていないローカルの変更が含まれています。


SEE ALSO
********

gittutorial(7), gittutorial-2(7), gitcvs-migration(7), giteveryday(7),
The Git User’s Manual (user-manual.html)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: githooks,  Up: Top

Name
****

githooks — Gitで使われるフック


Synopsis
********

$GIT_DIR/hooks/* (or ‘git config core.hooksPath‘/*)


DESCRIPTION
***********

フック(hook)は、フックディレクトリ(hooks directory)に配置して、gitの実行
の特定の時点でアクションをトリガーできるプログラムです。実行可能ビットが
設定されていないフックは無視されます。

   デフォルトでは、フックディレクトリ(ooks directory)は ‘$GIT_DIR/hooks’
ですが、これは ‘core.hooksPath’ 構成変数を介して変更できます
(git-config(1) を参照)。

   Gitはフックを呼び出す前に、ベアリポジトリでは作業ディレクトリを
$GIT_DIRに変更し、非ベアリポジトリではの作業ディレクトリを作業ツリーのル
ートに変更します。例外は、プッシュ中にトリガーされるフック(_pre-receive_
、_update_ 、_post-receive_ 、_post-update_ 、_push-to-checkout_)で、常
に $GIT_DIR で実行されます。

   フックは、環境変数やコマンドライン引数やstdinを介して引数を取得できま
す。詳細については、以下の各フックのドキュメントを参照してください。

   ‘git init’ は、その構成に応じて、フックを新しいリポジトリにコピーする
場合があります。詳細については、 git-init(1) の「TEMPLAT EDIRECTORY」セ
クションを参照してください。このドキュメントの残りの部分で「デフォルトの
フック」について言及している場合は、Gitに付属しているデフォルトのテンプ
レートについて説明しています。

   現在サポートされているフックを以下に説明します。


HOOKS
*****


applypatch-msg
==============

このフックは git-am(1) によって呼び出されます。単一のパラメータとして、
提案するコミットログメッセージを保持するファイルの名前を取ります。ゼロ以
外のステータスで終了すると、パッチを適用する前に ‘git am’ が中止されます
。

   フックを使用すると、メッセージファイルを所定の場所で編集でき、メッセ
ージをプロジェクトの標準形式に正規化するために使用できます。 また、メッ
セージファイルを検査した後にコミットを拒否するために使用することもできま
す。

   デフォルトの ‘applypatch-msg’ フックが有効になっている場合に
‘commit-msg’ フックが有効になっていれば、 ‘commit-msg’ フックを実行しま
す。


pre-applypatch
==============

このフックは git-am(1) によって呼び出されます。これはパラメーターを受け
取らず、パッチが適用された後、コミットが行われる前に呼び出されます。

   これがゼロ以外のステータスで終了する場合、パッチの適用後に作業ツリー
はコミットされません。

   現在の作業ツリーを検査し、特定のテストに合格しない場合はコミットを拒
否するために使用できます。

   デフォルトの ‘pre-applypatch’ フックが有効になっている場合に
‘pre-commit’ フックが有効になっている場合は、 ‘pre-commit’ フックが実行
されます。


post-applypatch
===============

このフックは git-am(1) によって呼び出されます。これはパラメーターを受け
取らず、パッチが適用されてコミットが行われた後に呼び出されます。

   このフックは主に通知用であり、 ‘git am’ の結果に影響を与えることはで
きません。


pre-commit
==========

このフックは git-commit(1) によって呼び出され、 ‘--no-verify’ オプション
でバイパスできます。パラメータを必要とせず、提案したコミットログメッセー
ジを取得してコミットする前に呼び出されます。このスクリプトをゼロ以外のス
テータスで終了すると、コミットを作成する前に ‘git commit’ コマンドが中止
(abort)されます。

   デフォルトの ‘pre-commit’ フックを有効にすると、末尾に空白がある行の
導入をキャッチし、そのような行が見つかるとコミットを中止(abort)します。

   すべての ‘git commit’ フックは環境変数 $GIT_EDITOR を ‘GIT_EDITOR=:’
とすれば、 コミットメッセージを変更するためのエディターを起動しません。

   デフォルトの ‘pre-commit’ フックが有効になっていて、かつ、
‘hooks.allownonascii’ 構成オプションが設定されていないかfalseに設定され
ている場合、非ASCIIファイル名の使用を防止します。


pre-merge-commit
================

このフックは git-merge(1) によって呼び出され、 ‘--no-verify’ オプション
でバイパスできます。パラメータを必要とせず、マージが正常に実行された後、
提案したコミットログメッセージを取得してコミットする前に呼び出されます。
このスクリプトをゼロ以外のステータスで終了すると、コミットを作成する前に
‘git merge’ コマンドが中止(abort)されます。

   デフォルトの ‘pre-merge-commit’ フックが有効になっている場合に
‘pre-commit’ フック後者が有効になっている場合は、 ‘pre-commit’ フックが
実行されます。

   このフックは環境変数 $GIT_EDITOR を ‘GIT_EDITOR=:’ とすれば、 コミッ
トメッセージを変更するためのエディターを起動しません。

   マージを自動的に実行できない場合は、競合を解決し、結果を個別にコミッ
トする必要があります(git-merge(1) 参照)。その時点では、このフックは実行
されませんが、 ‘pre-commit’ が有効になっている場合は ‘pre-commit’ フック
が実行されます。


prepare-commit-msg
==================

このフックは、デフォルトのログメッセージを準備した直後、エディターを起動
する前に、 git-commit(1) によって呼び出されます。

   1つから3つのパラメーターを取ります。 1つ目は、内容がコミットログメッ
セージであるファイルの名前です。2番目はコミットメッセージのソースであり
、‘message’(‘-m’ または ‘-F’ オプションが指定された場合)、 ‘template’(
‘-t’ オプションが指定された場合、または構成オプション ‘commit.template’
が設定されている場合)、 ‘merge’(コミットがマージであるか、
‘.git/MERGE_MSG’ ファイルが存在する場合)、 ‘squash’( ‘.git/SQUASH_MSG’ フ
ァイルが存在する場合)、または ‘commit’( ‘-c’ または ‘-C’ または
‘--amend’ オプションが指定された場合)に続いて(3つ目のパラメータとして)
commitオブジェクト名。

   終了ステータスがゼロ以外の場合、 ‘git commit’ は中止(abort)されます。

   フックの目的は、メッセージファイルを所定の位置で編集することであり、
‘--no-verify’ オプションによって抑制されることはありません。ゼロ以外ステ
ータスでの終了は、フックの失敗を意味し、コミットを中止(abort)します。
pre-commitフックの代わりとして使用すべきではありません。

   Gitに付属するサンプルの ‘prepare-commit-msg’ フックは、コミットテンプ
レートのコメント部分にあるヘルプメッセージを削除します。


commit-msg
==========

このフックは git-commit(1) と git-merge(1) によって呼び出され、
‘--no-verify’ オプションでバイパスできます。単一のパラメータとして提案さ
れたコミットログメッセージを保持するファイルの名前を取ります。ゼロ以外の
ステータスで終了すると、コマンドは中止(abort)されます。

   フックを使用すると、メッセージファイルを所定の場所で編集でき、メッセ
ージをプロジェクトの標準形式に正規化するために使用できます。 また、メッ
セージファイルを検査した後にコミットを拒否するために使用することもできま
す。

   デフォルトの ‘commit-msg’ フックを有効にすると、重複する
‘Signed-off-by’ トレーラーが検出され、見つかった場合はコミットが中止
(abort)されます。


post-commit
===========

このフックは git-commit(1) によって呼び出されます。パラメータを必要とせ
ず、コミットが行われた後に呼び出されます。

   このフックは主に通知用であり、 ‘git commit’ の結果に影響を与えること
はできません。


pre-rebase
==========

このフックは git-rebase(1) によって呼び出され、ブランチがリベースされる
のを防ぐために使用できます。フックは、1つまたは2つのパラメーターで呼び出
すことができます。最初のパラメーターは、シリーズがフォークされたアップス
トリームです。2番目のパラメーターは、リベースされるブランチであり、現在
のブランチをリベースするときは設定されません。


post-checkout
=============

このフックは、ワークツリーを更新した後に git-checkout(1) または
git-switch(1) が実行されたときに呼び出されます。フックには、以前のHEADの
ref、新しいHEADのref(変更されている場合と変更されていない場合があります
)、およびチェックアウトがブランチチェックアウト(ブランチの変更、
flag=1)あるいはファイルのチェックアウト(インデックスからファイルを取得、
flag=0)のいずれかであるかどうかを示すフラグ、の3つのパラメーターが与えら
れます。このフックは、フックの終了ステータスがこれら2つのコマンドの終了
ステータスになることを除いて、 ‘git switch’ または ‘git checkout’ の結果
に影響を与えることはできません。

   これは ‘--no-checkout’ (‘-n’)オプションが使用されていない限り、
git-clone(1)の後でも実行されます。 フックに指定された最初のパラメーター
は null-refで、2番目は新しいHEADのrefであり、フラグは常に1です。
‘--no-checkout’ が使用されていない限り、 ‘git worktree add’ についても同
様です。

   このフックを使用して、リポジトリの有効性チェックを実行したり、以前の
HEADとの違いを自動表示したり、作業ディレクトリのメタデータプロパティを設
定したりできます。


post-merge
==========

このフックは git-merge(1) によって呼び出されます。これは、ローカルリポジ
トリで ‘git pull’ が実行されたときに発生します。フックは単一のパラメータ
ー、つまり、実行されているマージがスカッシュマージ(squash merge)であるか
どうかを指定するステータスフラグを受け取ります。このフックは ‘git merge’
の結果に影響を与えることはできず、競合が原因でマージが失敗した場合は実行
されません。

   このフックを対応するpre-commitフックと組み合わせて使用すると、作業ツ
リーに関連付けられている任意の形式のメタデータ(たとえば、権限/所有権、
ACLSなど)を保存および復元できます。これを行う方法の例については、
contrib/hooks/setgitperms.perl を参照してください。


pre-push
========

このフックは git-push(1) によって呼び出され、プッシュが行われないように
するために使用できます。フックは、宛先リモートの名前と場所を提供する2つ
のパラメーターで呼び出されます。名前付きリモートが使用されていない場合、
両方の値は同一になります。

   何をプッシュするかについての情報は、フックの標準入力に次の形式の行で
提供されます:

     <local ref> SP <local object name> SP <remote ref> SP <remote object name> LF

   たとえば、コマンド ‘git push origin master:foreign’ を実行すると、フ
ックは以下のような行を受け取ります:

     refs/heads/master 67890 refs/heads/foreign 12345

   ただし、完全なオブジェクト名が提供されます。外部参照がまだ存在しない
場合、 <remote object name> はすべてゼロのオブジェクト名になります。
refを削除する場合は、 <local ref> が ‘(delete)’ として提供され、 ‘<local
object name>’ がすべてゼロのオブジェクト名になります。ローカルコミットが
拡張可能な名前以外の名前(‘HEAD~’ やオブジェクト名など)で指定された場合は
、最初に指定されたとおりに提供されます。

   このフックがゼロ以外のステータスで終了した場合、 ‘git push’ は何もプ
ッシュせずに中止(abort)します。プッシュが拒否された理由に関する情報は、
標準エラーに書き込むことでユーザーに送信される場合があります。


pre-receive
===========

このフックは、 ‘git push’ に反応し、リポジトリ内の参照を更新するときに、
git-receive-pack(1) によって呼び出されます。リモートリポジトリのrefの更
新を開始する直前に、pre-receiveフックが呼び出されます。その終了ステータ
スによって、更新の成功または失敗が決まります。

   このフックは、受信操作に対して1回実行されます。引数は必要ありませんが
、更新される各refについて、標準入力で以下の形式の行を受け取ります:

     <old-value> SP <new-value> SP <ref-name> LF

   ここで、 ‘<old-value>’ は、refに保存されている古いオブジェクト名です
。 ‘<new-value>’ はrefに格納される新しいオブジェクト名です。
‘<ref-name>’ はrefのフルネームです。 新しいrefを作成する場合、
‘<old-value>’ はすべてゼロのオブジェクト名です。

   フックがゼロ以外のステータスで終了した場合、どのrefも更新されません。
フックがゼロで終了する場合でも、個々のrefの更新は_update_ (*note
update::)フックによって防ぐことができます。

   標準出力と標準エラー出力の両方がもう一方の側の ‘git send-pack’ に転送
(forward)されるため、ユーザーにメッセージを ‘echo’ するだけで済みます。

   ‘git push --push-option=...’ のコマンドラインで指定された、プッシュオ
プションの数は環境変数 ‘GIT_PUSH_OPTION_COUNT’ から読み取ることができ、
オプション自体は ‘GIT_PUSH_OPTION_0’ 、 ‘GIT_PUSH_OPTION_1’ 、 … から読
み取る事ができます。プッシュオプションフェーズを使用しないように取り決め
た場合、環境変数は設定されません。クライアントがプッシュオプションの使用
を選択したが、何も送信しない場合、カウント変数はゼロ、つまり
‘GIT_PUSH_OPTION_COUNT=0’ に設定されます。

   いくつかの注意点については、 git-receive-pack(1) の「Quarantine
Environment」のセクションを参照してください。


update
======

このフックは、 ‘git push’ に反応し、リポジトリ内の参照を更新するときに、
git-receive-pack(1) によって呼び出されます。リモートリポジトリのrefを更
新する直前に、 update フックが呼び出されます。その終了ステータスによって
、ref更新の成功または失敗が決まります。

   フックは、更新されるrefごとに1回実行され、以下の3つのパラメーターを取
ります:

   • 更新されるrefの名前

   • refに保存されている古いオブジェクト名

   • refに格納される新しいオブジェクト名

   更新フックがゼロステータスで終了すると、refを更新できます。ゼロ以外の
ステータスで終了すると、 ‘git receive-pack’ はそのrefを更新できなくなり
ます。

   このフックは、オブジェクト名が古いオブジェクト名で指定されたコミット
オブジェクトの子孫であるコミットオブジェクトであることを確認することによ
り、特定のrefでの「強制」更新を防ぐために使用できます。つまり、「早送り
のみ」(fast-forward only)のポリシーを適用します。

   また、 old..new ステータスをログに記録するために使用することもできま
す。ただし、ブランチのセット全体を認識しているわけではないため、単純に使
用すると、refごとに1つの電子メールが送信されることになります。そのために
は_post-receive_ (*note post-receive::)フックの方が適しています。

   ユーザーのアクセスをネットワーク経由のgitコマンドのみに制限する環境で
は、このフックを使用して、ファイルシステムの所有権やグループメンバーシッ
プに依存せずにアクセス制御を実装できます。ログインシェルを使用してユーザ
ーのアクセスをgitコマンドのみに制限する方法については、 git-shell(1) を
参照してください。

   標準出力と標準エラー出力の両方がもう一方の側の ‘git send-pack’ に転送
(forward)されるため、ユーザーにメッセージを ‘echo’ するだけで済みます。

   デフォルトの ‘update’ フックが有効になっている場合 — および
‘hooks.allowunannotated’ 構成オプションが設定されていないかfalseに設定さ
れている場合 — 注釈のないタグ(unannotated tags)がプッシュされるのを防ぎ
ます。


proc-receive
============

このフックは git-receive-pack(1) によって呼び出されます。サーバーが複数
値の構成変数 ‘receive.procReceiveRefs’ を設定し、そして ‘receive-pack’ に
送信されるコマンドの参照名が一致する場合、これらのコマンドは、内部の
‘execute_commands()’ 関数ではなく、このフックによって実行されます。この
フックは、関連する参照を更新し、結果を ‘receive-pack’ に報告する役割を果
たします。

   このフックは、受信操作に対して1回実行されます。引数は取りませんが、
pkt-line形式のプロトコルを使用して ‘receive-pack’ と通信し、コマンド、プ
ッシュオプションを読み取り、結果を送信します。行かのプロトコルの例では、
文字 ‘S’ は ‘receive-pack’ を表し、文字 ‘H’ はこのフックを表します。

     # Version and features negotiation.
     S: PKT-LINE(version=1\0push-options atomic...)
     S: flush-pkt
     H: PKT-LINE(version=1\0push-options...)
     H: flush-pkt

     # Send commands from server to the hook.
     S: PKT-LINE(<old-oid> <new-oid> <ref>)
     S: ... ...
     S: flush-pkt
     # Send push-options only if the 'push-options' feature is enabled.
     S: PKT-LINE(push-option)
     S: ... ...
     S: flush-pkt

     # Receive result from the hook.
     # OK, run this command successfully.
     H: PKT-LINE(ok <ref>)
     # NO, I reject it.
     H: PKT-LINE(ng <ref> <reason>)
     # Fall through, let 'receive-pack' to execute it.
     H: PKT-LINE(ok <ref>)
     H: PKT-LINE(option fall-through)
     # OK, but has an alternate reference.  The alternate reference name
     # and other status can be given in option directives.
     H: PKT-LINE(ok <ref>)
     H: PKT-LINE(option refname <refname>)
     H: PKT-LINE(option old-oid <old-oid>)
     H: PKT-LINE(option new-oid <new-oid>)
     H: PKT-LINE(option forced-update)
     H: ... ...
     H: flush-pkt

   _proc-receive_ フックの各コマンドは、疑似参照(pseudo-reference)を指す
場合があり、そのold-oidとして常にゼロオールドを持ちます。一方、
‘proc-receive’ フックは代替参照(alternate reference)を更新する可能性があ
り、代替参照はゼロ以外のold-oidで既に存在する可能性があります。この場合
、このフックは ‘option’ ディレクティブを使用して、先頭の ‘ok’ ディレクテ
ィブによって指定された参照の拡張属性を報告します。

   このフックのコマンドの報告は、入力と同じ順序である必要があります。
‘proc-receive’ フックの終了ステータスは、アトミックプッシュ(atomic
push)が使用されていない限り、送信したコマンドグループの成功または失敗の
みを決定します。


post-receive
============

このフックは、 ‘git push’ に反応し、リポジトリ内の参照を更新するときに、
git-receive-pack(1) によって呼び出されます。すべてのrefが更新された後、
リモートリポジトリで実行されます。

   このフックは、受信操作に対して1回実行されます。引数は取りませんが、
_pre-receive_ (*note pre-receive::) フックが標準入力で行うのと同じ情報を
取得します。

   このフックは、実際の作業が完了した後に呼び出されるため、 ‘git
receive-pack’ の結果には影響しません。

   これは、名前に加えてすべてのrefの古い値と新しい値の両方を取得するとい
う点で、 _post-update_ (*note post-update::) フックに取って代わります。

   標準出力と標準エラー出力の両方がもう一方の側の ‘git send-pack’ に転送
(forward)されるため、ユーザーにメッセージを ‘echo’ するだけで済みます。

   デフォルトの ‘post-receive’ フックは空ですが、Gitディストリビューショ
ンの ‘contrib/hooks’ ディレクトリにサンプルスクリプト
‘post-receive-email’ があり、コミットメールの送信を実装しています。

   ‘git push --push-option=...’ のコマンドラインで指定された、プッシュオ
プションの数は環境変数 ‘GIT_PUSH_OPTION_COUNT’ から読み取ることができ、
オプション自体は ‘GIT_PUSH_OPTION_0’ 、 ‘GIT_PUSH_OPTION_1’ 、 … から読
み取る事ができます。プッシュオプションフェーズを使用しないように取り決め
た場合、環境変数は設定されません。クライアントがプッシュオプションの使用
を選択したが、何も送信しない場合、カウント変数はゼロ、つまり
‘GIT_PUSH_OPTION_COUNT=0’ に設定されます。


post-update
===========

このフックは、 ‘git push’ に反応し、リポジトリ内の参照を更新するときに、
git-receive-pack(1) によって呼び出されます。すべてのrefが更新された後、
リモートリポジトリで実行されます。

   可変数のパラメーターを取ります。各パラメーターは、実際に更新された
refの名前です。

   このフックは主に通知用であり、 ‘git receive-pack’ の結果に影響を与え
ることはできません。

   _post-update_ フックは、プッシュされたヘッドが何であるかを知ることが
できますが、元の値と更新された値が何であるかを知らないため、 logold..new
を実行するのに適した場所ではありません。 _post-receive_ (*note
post-receive::)フックは、参照の元の値と更新された値の両方を取得するので
、必要に応じて、このフックの代わりに検討することもできます。

   有効にすると、デフォルトの ‘post-update’ フックが ‘git
update-server-info’ を実行して、バカ転送(dumb transports)(例:HTTP)で使用
される情報を最新の状態に保ちます。 HTTP経由でアクセスできるGitリポジトリ
を公開している場合は、あなたはおそらくこのフックを有効にする必要がありま
す。

   標準出力と標準エラー出力の両方がもう一方の側の ‘git send-pack’ に転送
(forward)されるため、ユーザーにメッセージを ‘echo’ するだけで済みます。


reference-transaction
=====================

このフックは、参照の更新を実行するGitコマンドによって呼び出されます。参
照トランザクションが、準備またはコミットまたは中止されるたびに実行される
ため、複数回呼び出される可能性があります。このフックはシンボリック参照を
カバーしていません(ただし、将来変更される可能性があります)。

   フックは引数を1つだけ取りますが、これは指定された参照トランザクション
の現在の状態です:

   • "prepared" : すべての参照更新がトランザクションのキューに入れられ、
     参照がディスク上でロックされました。

   • "committed": 参照トランザクションがコミットされ、すべての参照にそれ
     ぞれの新しい値が追加されました。

   • "aborted": 参照トランザクションが中止され、変更は実行されず、ロック
     が解放されました。

   トランザクションに追加された参照更新ごとに、フックは標準入力で以下の
形式の行を受け取ります:

     <old-value> SP <new-value> SP <ref-name> LF

   ここで、 ‘<old-value>’ は、参照トランザクションに渡された古いオブジェ
クト名です。 ‘<new-value>’ はrefに格納される新しいオブジェクト名であり、
‘<ref-name>’ はrefのフルネームです。現在の値に関係なく参照を強制的に更新
する場合、または参照を新たに作成する場合は、 ‘<old-value>’ はすべてゼロ
のオブジェクト名です。あなたは、これらのケースを区別するために、
‘gitrev-parse’ を介して ‘<ref-name>’ の現在の値を調べることができます。

   フックの終了ステータスは、「prepared」(準備済み)状態を除くすべての状
態で無視されます。「prepared」状態では、ゼロ以外の終了ステータスにより、
トランザクションが中止(abort)されます。その場合、フックは「中止」状態で
呼び出さることはありません。


push-to-checkout
================

プッシュが現在チェックアウトされているブランチを更新しようと試み、かつ、
‘receive.denyCurrentBranch’ 構成変数が ‘updateInstead’ に設定されている
場合、このフックは、 ‘git push’ に反応し、リポジトリ内の参照を更新すると
きに、 git-receive-pack(1) によって呼び出されます。作業ツリーとリモート
リポジトリのインデックスが現在チェックアウトされているコミットと異なる場
合、このようなプッシュはデフォルトで拒否されます。作業ツリーとインデック
スの両方が現在のコミットと一致する場合、それらは、ブランチの新しくプッシ
ュされた先端に一致するように更新されます。このフックは、デフォルトの動作
をオーバーライドするために使用されます。

   フックは、現在のブランチの先端が更新されるコミットを受け取ります。ゼ
ロ以外のステータスで終了してプッシュを拒否できます(そうする場合は、イン
デックスまたは作業ツリーを変更してはいけません)。または、作業ツリーとイ
ンデックスに必要な変更を加えて、現在のブランチの先端が新しいコミットに更
新されたときにそれらを目的の状態にし、ゼロステータスで終了することもでき
ます。

   例えば、フックは単純に ‘git read-tree -u -m HEAD "$1"’ を実行して、
‘git push’ と逆方向に実行する ‘git fetch’ をエミュレートすることができま
す。 ‘git read-tree -u -m’ の二木形式(two-tree form)は、ブランチの違いを
妨げない範囲で作業ツリー(working tree)のローカル変更を維持しながらブラン
チを切り替える ‘git switch’ や ‘git checkout’ と本質的に同じものだからで
す。


pre-auto-gc
===========

このフックは ‘git gc --auto’ によって呼び出されます(git-gc(1) を参照)。
パラメータを必要とせず、このスクリプトをゼロ以外のステータスで終了させる
と、 ‘git gc --auto’ が中止(abort)されます。


post-rewrite
============

このフックは、commitを書き換えるコマンド(‘--amend’ や git-rebase(1) から
呼び出された場合の git-commit(1) 。ただし、 git-fast-import(1)や
git-filter-repo (https://github.com/newren/git-filter-repo) などの完全な
履歴(再)書き込みツールは通常、呼び出さないでください！)によって呼び出さ
れます。その最初の引数は、それが呼び出されたコマンドを示します。それは現
在、‘amend’ または ‘rebase’ のいずれかです。将来、コマンドに依存する引数
がさらに渡される可能性があります。

   フックは、stdinから、書き換えられたコミットのリストを以下の形式で受け
取ります。

     <old-object-name> SP <new-object-name> [ SP <extra-info> ] LF

   ‘extra-info’ もコマンド依存です。空の場合、先行するSPも省略されます。
現在、 ‘extra-info’ を渡すコマンドはありません。

   フックは常に、自動noteコピー(git-config(1)の
‘notes.rewrite.<command>’ 参照)が発生した後に実行されるため、フックはこ
れらのnoteにアクセスできます。

   以下のコマンド固有のコメントが適用されます:

rebase
     _squash_ 操作と _fixup_ 操作の場合、スカッシュされたすべてのコミッ
     トは、スカッシュされたコミットに書き換えられたものとしてリストされ
     ます。これは、同じ「new-object-name」を共有する複数の行があることを
     意味します。

     コミットは、リベースによって処理された順序でリストされることが保証
     されています。


sendemail-validate
==================

このフックは git-send-email(1) によって呼び出されます。単一のパラメータ
ーとして、送信する電子メールを保持するファイルの名前を取ります。ゼロ以外
のステータスで終了すると、電子メールを送信する前に ‘git send-email’ が中
止(abort)されます。


fsmonitor-watchman
==================

このフックは、使用するフックのバージョンに応じて、構成オプション
‘core.fsmonitor’ が ‘.git/hooks/fsmonitor-watchman’ または
‘.git/hooks/fsmonitor-watchmanv2’ に設定されている場合に呼び出されます。

   バージョン1は、バージョン(つまり、1)と、1970年1月1日の0:00から経過し
たナノ秒単位の時間の、2つの引数を取ります。

   バージョン2は、バージョン(つまり、2)と、トークン以降の変更を識別する
ために使用されるトークンの、2つの引数を取ります。ウォッチマン
(watchman)の場合、これはクロックID(clock id)になります。このバージョンで
は、新しいトークンの後のファイルのリストの前にNULを付けて標準出力しなけ
ればなりません。

   フックは、要求された時間以降に変更された可能性のある作業ディレクトリ
内のすべてのファイルのリストをstdoutに出力する必要があります。潜在的な変
更を見逃さないように、ロジックは包括的(inclusive)である必要があります。
パスは、作業ディレクトリのルートを基準にして、単一のNULで区切る必要があ
ります。

   実際に変更されていないファイルを含めてもかまいません。新しく作成およ
び削除されたファイルを含むすべての変更を含める必要があります。ファイルの
名前を変更するときは、古い名前と新しい名前の両方を含める必要があります。

   Gitは、指定のパス名に基づいて、変更をチェックするファイルと、追跡され
ていないファイルをチェックするディレクトリを制限します。

   gitに「すべてのファイルが変更されました」と伝えるための最適化された方
法は、ファイル名 ‘/’ を返すことです。

   終了ステータスは、gitがフックからのデータを使用して検索を制限するかど
うかを決定します。エラーが発生すると、すべてのファイルとフォルダーの検証
にフォールバックします。


p4-changelist
=============

このフックは ‘git-p4 submit’ によって呼び出されます。

   ‘p4-changelist’ フックは、ユーザーがチェンジリストメッセージ
(changelist message)を編集した後に実行されます。 ‘--no-verify’ オプショ
ンでバイパスできます。提案されたチェンジリストテキストを保持するファイル
の名前という単一のパラメータを取ります。ゼロ以外のステータスで終了すると
、コマンドは中止(abort)されます。

   フックはチェンジリストファイル(changelist file)の編集を許可されており
、テキストをプロジェクトの標準形式に正規化するために使用できます。また、
メッセージファイルを検査した後に送信を拒否するために使用することもできま
す。

   詳細については、 ‘git-p4 submit --help’ を実行してください。


p4-prepare-changelist
=====================

このフックは ‘git-p4 submit’ によって呼び出されます。

   ‘p4-prepare-changelist’ フックは、デフォルトのチェンジリストメッセー
ジ(changelist message)を準備した直後、エディタが起動する前に実行されます
。これは、チェンジリストのテキストを含むファイルの名前という1つのパラメ
ーターを取ります。スクリプトをゼロ以外のステータスで終了すると、プロセス
が中止(abort)されます。

   フックの目的は、メッセージファイルを所定の位置で編集することであり、
‘--no-verify’ オプションによって抑制されることはありません。 このフック
は、 ‘--prepare-p4-only’ が設定されている場合でも呼び出されます。

   詳細については、 ‘git-p4 submit --help’ を実行してください。


p4-post-changelist
==================

このフックは ‘git-p4 submit’ によって呼び出されます。

   ‘p4-post-changelist’ フックは、送信(submit)がP4で正常に発生した後に呼
び出されます。これはパラメーターを必要とせず、主に通知を目的としており、
git p4 submitアクションの結果に影響を与えることはできません。

   詳細については、 ‘git-p4 submit --help’ を実行してください。


p4-pre-submit
=============

このフックは ‘git-p4 submit’ によって呼び出されます。これはパラメータを
とらず、標準入力から何も取りません。このスクリプトをゼロ以外のステータス
で終了すると、 ‘git-p4 submit’ の起動を妨げます。 ‘--no-verify’ コマンド
ラインオプションでバイパスできます。詳細については、 ‘git-p4 submit
--help’ を実行してください。


post-index-change
=================

このフックは、インデックスが read-cache.c の do_write_locked_index に書
き込まれるときに呼び出されます。

   フックに渡される最初のパラメーターは、更新される作業ディレクトリのイ
ンジケーターです。「1」は作業ディレクトリが更新されたことを意味し、「0」
は作業ディレクトリが更新されなかったことを意味します。

   フックに渡される2番目のパラメーターは、インデックスが更新され、
skip-worktree ビットが変更された可能性があるかどうかを示すインジケーター
です。「1」はskip-worktreeビットが更新された可能性があることを意味し、「
0」は更新されなかったことを意味します。

   フックの実行時に "1" に設定するパラメーターは1つだけです。 両方のパラ
メータを "1" に設定してはいけません。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: gitignore,  Up: Top

Name
****

gitignore — 無視する、意図的に追跡しないファイルを指定します


Synopsis
********

$XDG_CONFIG_HOME/git/ignore, $GIT_DIR/info/exclude, .gitignore


DESCRIPTION
***********

‘gitignore’ ファイルは、Gitが無視する必要のある意図的に追跡しないファイ
ルを指定します。 Gitによってすでに追跡されているファイルは影響を受けませ
ん。 詳細については、以下のNOTESを参照してください。

   ‘gitignore’ ファイルの各行にはパターンを指定します。パスを無視するか
どうかを決定するとき、Gitは通常、複数のソースからの ‘gitignore’ パターン
を、最高から最低の順に以下の優先順位でチェックします(各レベルの優先順位
内では最後に一致するパターンが結果を決定します)。

   • パターンは、それらをサポートするコマンドのコマンドラインから読み取
     られます。

   • そのパスから見て同じディレクトリまたは親ディレクトリ(作業ツリーの最
     上位まで)にある ‘.gitignore’ ファイルから読み取られたパターン。ディ
     レクトリの上位レベルのファイルのパターンは、‘.gitignore’ ファイルを
     含むディレクトリまでディレクトリ下位レベルの ‘.gitignore’ ファイル
     のパターンによって上書きされますこれらのパターンは、 ‘.gitignore’ フ
     ァイルのあるディレクトリを基準にしてマッチします。 プロジェクトは通
     常、リポジトリにそのような、プロジェクトビルドの部品として生成され
     たファイルのパターンを含んだ ‘.gitignore’ ファイルを含みます。(訳注
     :各サブディレクトリに .gigignore ファイルを含む事ができ、各ディレク
     トリの .gitignore はその親ディレクトリまたはその上位ディレクトリの
     .gitignore をオーバーライドする)

   • パターンは ‘$GIT_DIR/info/exclude’ から読み取られます。

   • 構成変数 ‘core.excludesFile’ で指定されたファイルから読み取られたパ
     ターン。

   パターンを配置するファイルは、パターンの使用方法によって異なります。

   • バージョン管理され、クローンを介して他のリポジトリに配布される必要
     があるパターン(つまり、すべての開発者が無視したいファイル)は、
     ‘.gitignore’ ファイルに入れる必要があります。

   • 特定のリポジトリに固有であるが、他の関連するリポジトリと共有する必
     要のないパターン(たとえば、リポジトリ内に存在するが1人のユーザーの
     ワークフローに固有の補助ファイル)は、 ‘$GIT_DIR/info/exclude’ ファ
     イルに配置する必要があります。

   • ユーザーがすべての状況でGitに無視させたいパターン(たとえば、選択し
     たユーザーのエディタによって生成されたバックアップファイルまたは一
     時ファイル)は、通常、ユーザーの ‘~/.gitconfig’ の
     ‘core.excludesFile’ で指定されたファイルに入ります。デフォルト値は
     $XDG_CONFIG_HOME/git/ignore です。 $XDG_CONFIG_HOME が設定されてい
     ないか空の場合、代わりに $HOME/.config/git/ignore が使用されます。

   _gitls-files_ や _git read-tree_ などの基盤となるGit配管ツールは、コ
マンドラインオプションで指定された ‘gitignore’ パターンを読み取るか、コ
マンドラインオプションで指定されたファイルから読み取ります。「git
status」や「git add」などの高レベルのGitツールは、上記で指定されたソース
からのパターンを使用します。


PATTERN FORMAT
**************

   • 空行はどのファイルともマッチしないため、読みやすくするための区切り
     として使えます。

   • ‘#’ で始まる行はコメントとして機能します。 ‘#’ で始まるパターンの最
     初の ‘#’ の前にはバックスラッシュ(「‘\’」)を置きます。

   • 末尾の空白は、バックススラッシュ(‘\’)でクォートされていない限り無視
     されます。

   • パターンを否定するオプションのプレフィックス ‘!’ 。以前のパターンで
     除外されたマッチするファイルは、再び含まれるようになります。そのフ
     ァイルの親ディレクトリが除外されている場合、そのファイルを再インク
     ルードすることはできません。Gitはパフォーマンス上の理由から除外され
     たディレクトリを一覧表示しないため、含まれているファイルのパターン
     は、それらがどこで定義されていても効果がありません。 リテラル ‘!’ で
     始まるパターンの場合は、最初の ‘!’ の前にバックスラッシュ(‘\’)を付
     けます(例: ‘\!important!.txt’)。

   • スラッシュ ‘/’ はディレクトリ区切り文字として使用されます。区切り文
     字は、 ‘.gitignore’ 検索パターンの最初、中間、または最後に発生する
     可能性があります。

   • パターンの先頭または中間(あるいはその両方)に区切り文字がある場合、
     パターンは特定の ‘.gitignore’ ファイル自体のディレクトリレベルに関
     連しています。そうしないと、パターンは ‘.gitignore’ レベルより下の
     任意のレベルでも一致する可能性があります。

   • パターンの最後に区切り文字がある場合、パターンはディレクトリのみに
     一致します。それ以外の場合、パターンはファイルとディレクトリの両方
     に一致する可能性があります。

   • たとえば、パターン ‘doc/frotz/’ は ‘doc/frotz’ ディレクトリと一致し
     ますが、 ‘a/doc/frotz’ ディレクトリとは一致しません。 ただし、
     ‘frotz/’ は ‘frotz’ およびディレクトリである ‘a/frotz’ と一致します
     (すべてのパスは ‘.gitignore’ ファイルのあるディレクトリからの相対パ
     スです)。

   • アスタリスク(‘*’)はスラッシュ(‘/’)以外のものと一致します。文字 ‘?’
     は、 ‘/’ 以外の任意の1文字と一致します。 範囲表記、例えば
     ‘[a-zA-Z]’ は、範囲内の文字の1つと一致させるために使用できます。詳
     細については、 fnmatch3）および FNM_PATHNAME フラグを参照してくださ
     い。

   フルパス名と一致するパターンの、2つの連続するアスタリスク(‘**’)は、以
下の特別な意味を持つ場合があります:

   • 先頭の ‘**’ の後にスラッシュ(‘/’)が続く場合は、すべてのディレクトリ
     で一致することを意味します。 たとえば、 ‘**/foo’ は、パターン ‘foo’
     と同じように、任意の場所のファイルまたはディレクトリ ‘foo’ と一致し
     ます。 ‘**/foo/bar’ は、ディレクトリ ‘foo’ の直下にあるファイルまた
     はディレクトリ ‘bar’ と一致します。

   • 末尾の ‘/**’ は内部のすべてに一致します。 たとえば、 ‘abc/**’ は、
     ‘.gitignore’ ファイルの場所を基準にして、ディレクトリ ‘abc’ 内のす
     べてのファイルと無限の深さで一致します。

   • スラッシュ(‘/’)の後に2つの連続するアスタリスク(‘**’)が続く場合、ス
     ラッシュは0個以上のディレクトリに一致します。たとえば、 ‘a/**/b’ は
     ‘a/b’ や ‘a/x/b’ や ‘a/x/y/b’ などと一致します。

   • 他の連続するアスタリスクは通常のアスタリスクと見なされ、以前のルー
     ルに従って一致します。


CONFIGURATION
*************

オプションの構成変数 ‘core.excludesFile’ は、 ‘$GIT_DIR/info/exclude’ と
同様に、除外するファイル名のパターンを含むファイルへのパスを示します。
‘$GIT_DIR/info/exclude’ のパターンに加えて、excludeファイルのパターンが
使用されます。


NOTES
*****

gitignoreファイルの目的は、Gitによって未だ追跡されていない特定のファイル
がGitによって追跡される事が無いようにすることです。

   現在追跡されているファイルの追跡を停止するには、 ‘git rm --cached’ を
使用します。

   作業ツリーの ‘.gitignore’ ファイルにアクセスするとき、Gitはシンボリッ
クリンクをたどりません。これにより、ファイルシステムからではなく、インデ
ックスまたはツリーからファイルにアクセスする場合の動作の一貫性が保たれま
す。


EXAMPLES
********

   • パターン ‘hello.*’ は、名前が ‘hello.’ で始まるすべてのファイルまた
     はフォルダーにマッチします。これをディレクトリのみに制限し、そのサ
     ブディレクトリには制限したくない場合は、パターンの前にスラッシュを
     付けることができます。つまり、 ‘/hello.*’ とします。このパターンは
     ‘hello.txt’ や ‘hello.c’ とマッチしますが、 ‘a/hello.java’ とはマッ
     チしません。

   • パターン ‘foo/’ は、ディレクトリ ‘foo’ とその下のパスに一致しますが
     、通常のファイルまたはシンボリックリンク ‘foo’ には一致しません(こ
     れは、Gitでのpathspecの一般的な動作方法と一致します)

   • パターン ‘doc/frotz’ と ‘/doc/frotz’ は、どの ‘.gitignore’ ファイル
     でも同じ効果があります。つまり、パターンの中間にスラッシュ(‘/’)があ
     る場合、先頭のスラッシュは関係ありません。

   • パターン ‘foo/*’ は、 ‘foo/test.json’ (通常のファイル) や ‘foo/bar’
     (ディレクトリ)とマッチしますが、パターンのアスタリスク(‘*’)がスラッ
     シュ(‘/’)を含む ‘bar/hello.c’ とマッチしないため、
     ‘foo/bar/hello.c’ (通常のファイル)とは一致しません。

         $ git status
         [...]
         # Untracked files:
         [...]
         #       Documentation/foo.html
         #       Documentation/gitignore.html
         #       file.o
         #       lib.a
         #       src/internal.o
         [...]
         $ cat .git/info/exclude
         # ignore objects and archives, anywhere in the tree.
         *.[oa]
         $ cat Documentation/.gitignore
         # ignore generated html files,
         *.html
         # except foo.html which is maintained by hand
         !foo.html
         $ git status
         [...]
         # Untracked files:
         [...]
         #       Documentation/foo.html
         [...]

   別の例:

         $ cat .gitignore
         vmlinux*
         $ ls arch/foo/kernel/vm*
         arch/foo/kernel/vmlinux.lds.S
         $ echo '!/vmlinux*' >arch/foo/kernel/.gitignore

   2番目の .gitignore は、Gitが ‘arch/foo/kernel/vmlinux.lds.S’ を無視す
るのを防ぎます。

   特定のディレクトリ ‘foo/bar’ 以外のすべてを除外する例(‘/*’ に注意して
ください。スラッシュ(‘/’)なしでワイルドカード(‘*’)は、 ‘foo/bar’ 内のす
べても除外します):

         $ cat .gitignore
         # exclude everything except directory foo/bar
         /*
         !/foo
         /foo/*
         !/foo/bar


SEE ALSO
********

git-rm(1), gitrepository-layout(5), git-check-ignore(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: gitk,  Up: Top

Name
****

gitk — Gitリポジトリブラウザ


Synopsis
********

     gitk [<options>] [<revision range>] [–] [<path>…]


DESCRIPTION
***********

リポジトリまたは選択したコミットのセットの変更を表示します。 これには、
コミットグラフの視覚化、各コミットに関連する情報、および各リビジョンのツ
リー内のファイルの表示が含まれます。


OPTIONS
*******

表示するリビジョンを制御するために、gitkは ‘git rev-list’ コマンドに適用
できるほとんどのオプションをサポートしています。 また、 ‘git diff-*’ コ
マンド群に適用できるいくつかのオプションをサポートして、各コミットによっ
て導入される変更の表示方法を制御します。最後に、いくつかのgitk固有のオプ
ションをサポートします。

   gitkは通常、コマンドラインパーサーの制限により、串刺し形式(sticked
form)の引数を持つオプションのみを理解します(linkgit: gitcli[7] を参照)。


rev-list options and arguments
==============================

このマニュアルページでは、最も頻繁に使用されるオプションについてのみ説明
しています。 完全なリストについては、 git-rev-list(1) を参照してください
。

‘--all’
     全ての参照(ブランチ、タグ、等)を表示します。

‘--branches[=<pattern>]’
‘--tags[=<pattern>]’
‘--remotes[=<pattern>]’
     すべてのブランチ(タグ、リモートブランチ、等)がコマンドラインに
     <commit> としてリストされているかのように見せかけます。 <pattern> が
     指定されている場合、参照を指定されたシェルグロブに一致するものに制
     限します。

‘--since=<date>’
     指定の日付よりも新しいコミットを表示します。

‘--until=<date>’
     指定の日付より古いコミットを表示します。

‘--date-order’
     可能な場合は、コミットを日付順で並べ替えます。

‘--merge’
     マージの試みが競合で停止した後、競合するファイルを変更し、マージさ
     れるすべてのヘッドに存在しない2つのブランチ間(つまり、HEADと
     MERGE_HEAD)の履歴のコミットを表示します。

‘--left-right’
     対称差のどちら側からコミットに到達できるかをマークします。左側から
     のコミットには ‘<’ 記号が接頭辞として付けられ、右側からのコミットに
     は ‘>’ 記号が付けられます。

‘--full-history’
     ‘<path>...’ で履歴をフィルタリングする場合、一部の履歴は削除されま
     せん。(詳細な説明については、 git-log(1) の「History
     simplification」を参照してください。)

‘--simplify-merges’
     ‘--full-history’ への追加オプションで、このマージに寄与する選択され
     たコミットがないため、結果の履歴からいくつかの不要なマージを削除し
     ます。(詳細な説明については、 git-log(1) の「History
     simplification」を参照してください。)

‘--ancestry-path’
     表示するコミットの範囲が指定されている(例: ‘commit1..commit2’ また
     は ‘commit2 {caret}commit1’)場合、 commit1とcommit2の間の祖先チェー
     ンに直接存在するコミット、つまりcommit1の子孫であり、commit2の祖先
     でもあるコミットのみを表示します。(詳細な説明については、 linkgit：
     git-log[1] の「History simplification」を参照してください。)

‘-L<start>,<end>:<file>’
‘-L:<funcname>:<file>’
     _<file>_ 内で、 _<start>,<end>_ 、または関数名 regex _<funcname>_ で
     指定された行範囲をトレースします。pathspec リミッターを指定すること
     はできません。これは現在、単一のリビジョンから開始するウォークに制
     限されています。つまり、0個または1個の正のリビジョン引数のみを指定
     でき、 _<start>_ と _<end>_ (または _<funcname>_) が開始リビジョン
     に存在する必要があります。このオプションは複数回指定できます。これ
     は ‘--patch’ オプションの機能を内包しています。パッチ出力は
     ‘--no-patch’ を使用して抑制できますが、他の差分形式(つまり、
     ‘--raw’、 ‘--numstat’、 ‘--shortstat’、 ‘--dirstat’、 ‘--summary’、
     ‘--name-only’、 ‘--name-status’、 ‘--check’)は現在実装されていませ
     ん。

     _<start>_ と _<end>_ は、以下のいずれかの形式です:

        • number

          _<start>_ または _<end>_ が数値の場合、絶対行番号を指定します
          (行は1から数えます)。

        • ‘/regex/’

          この形式は、指定されたPOSIX正規表現に一致する最初の行を使用し
          ます。 _<start>_ が正規表現の場合、前の ‘-L’ 範囲の末尾から検
          索します。それ以外の場合は、ファイルの先頭から検索します。
          _<start>_ が ‘^/regex/’ の場合、ファイルの先頭から検索します。
          _<end>_ が正規表現の場合、 _<start>_ で指定された行から検索開
          始します。

        • +offset or -offset

          これは <end> に対してのみ有効であり、 <start> で指定された行の
          前後の行数を指定します。

     _<start>_ および _<end>_ の代わりに ‘:<funcname>’ が指定されている
     場合、これは _<funcname>_ に一致する最初の関数名行から次の関数名行
     までの範囲を示す正規表現です。 ‘:<funcname>’ は、前の ‘-L’ 範囲の末
     尾から検索します。それ以外の場合は、ファイルの先頭から検索します。
     ‘^:<funcname>’ はファイルの先頭から検索します。関数名は、 ‘git
     diff’ がパッチハンクヘッダーを処理するのと同じ方法で決定されます
     (gitattributes(5) の _Defining a custom hunk-header_ 参照)。

<revision range>
     表示するリビジョンを制限します。これは、指定されたリビジョンからの
     表示を意味する単一のリビジョンのいずれか、または、
     "_<from>_.._<to>_" 形式の範囲で、 <from> から <to> までのすべてのリ
     ビジョンを表示することもできます。注意:より高度なリビジョン選択を適
     用できることに注意してください。オブジェクト名のスペルのより完全な
     リストについては、 gitrevisions(7) を参照してください。

<path>…
     指定されたパス内のファイルにアクセスするモノだけにコミットを制限し
     ます。注意:リビジョン名に関するあいまいさを避けるために、 ‘--’ を使
     用してパスを先行するオプションから分離することに注意してください。


gitk-specific options
=====================

‘--argscmd=<command>’
     gitkが表示するリビジョン範囲を決定する必要があるたびに実行されるコ
     マンド。このコマンドは、標準出力に、表示される追加のリビジョンのリ
     ストを1行に1つずつ出力することが期待されています。表示するコミット
     のセットが更新ごとに異なる可能性がある場合は、<リビジョン範囲> を明
     示的に指定する代わりにこれを使用してください。

‘--select-commit=<ref>’
     グラフを読み込んだ後、指定したコミットを選択します。デフォルトの動
     作は、 ‘-select-commit=HEAD’ を指定するのと同じです。


Examples
********

gitk v2.6.12.. include/scsi drivers/scsi
     バージョン「v2.6.12」以降の変更で、include/scsiまたはdrivers/scsiサ
     ブディレクトリ内で変更されたファイルを表示する

gitk –since="2 weeks ago" – gitk
     ファイル ‘gitk’ について過去2週間の変更を表示します。 ‘--’ は、ブラ
     ンチ名 ‘gitk’ と混同されるのを避けるために必要です。

gitk –max-count=100 –all – Makefile
     ファイル ‘Makefile’ に加えられた最大100個の変更を表示します。現在の
     ブランチの変更だけを探すのではなく、すべてのブランチを調べます。


Files
*****

ユーザー構成と設定は以下の場所に保存されます:

   • 存在すれば ‘$XDG_CONFIG_HOME/git/gitk’ です。でなければ、

   • 存在すれば ‘$HOME/.gitk’ です。

   上記のいずれも存在しない場合は、デフォルトで
‘$XDG_CONFIG_HOME/git/gitk’ が作成されて使用されます。
_$XDG_CONFIG_HOME_ が設定されていない場合、すべての場合でデフォルトで
‘$HOME/.config’ になります。


History
*******

Gitkは最初のグラフィカルリポジトリブラウザでした。それはtcl/tkで書かれて
います。

   ‘gitk’ は実際には独立したプロジェクトとして維持されていますが、エンド
ユーザーの便宜のために安定したバージョンがGitスイートの一部として配布さ
れています。

   gitk-git/ は、 Paul Mackerras のgitkプロジェクトからのものです:

     git://ozlabs.org/~paulus/gitk


SEE ALSO
********

_qgit(1)_
     Qtを使用してC++で記述されたリポジトリブラウザです。

_tig(1)_
     Ncursesを使用してCで記述された最小限のリポジトリブラウザーとGitツー
     ルの出力ハイライト。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: gitmailmap,  Up: Top

Name
****

gitmailmap — 作者(author)/コミッター(committer) および/または 電子メール
アドレス(E-Mail addresses)をマップします


Synopsis
********

$GIT_WORK_TREE/.mailmap


DESCRIPTION
***********

ファイル ‘.mailmap’ がリポジトリのトップレベルに存在する場合、または
‘mailmap.file’ とか ‘mailmap.blob’ 構成オプション(git-config(1) 参照)が
指す場所(ファイルパスとかブロブ)に存在する場合は、 作者とコミッターの名
前と電子メールアドレスを、正規の本名と電子メールアドレスにマッピングする
ために使用されます。


SYNTAX
******

_#_ 文字から行末まではコメントで、空白行は無視されます。

   単純な形式では、ファイルの各行は、作成の正規の本名、空白、および名前
にマップするためにコミットで使用される電子メールアドレス(_<_ と _>_ で囲
まれている)で構成されます。 例えば:

     Proper Name <commit@email.xx>

   より複雑な形式では:

     <proper@email.xx> <commit@email.xx>

   で、これにより、メールマップはコミット用の電子メールアドレスのみを置
き換えることができます。そして:

     Proper Name <proper@email.xx> <commit@email.xx>

   では、mailmapは、指定されたコミット用電子メールアドレスに一致するコミ
ッターの名前と電子メールのアドレス両方を置き換えることができます。そして
:

     Proper Name <proper@email.xx> Commit Name <commit@email.xx>

   では、mailmapは、指定されたコミッターの名前と電子メールアドレスの両方
に一致するコミッターの名前と電子メールの両方を置き換えることができます。

   電子メールアドレスと名前の両方が大文字と小文字を区別せずに照合されま
す。たとえば、以下は上記の _Commit Name <commit@email.xx>_ とも一致しま
す:

     Proper Name <proper@email.xx> CoMmIt NaMe <CoMmIt@EmAiL.xX>


NOTES
*****

作業ツリーの ‘.mailmap’ ファイルにアクセスするとき、Gitはシンボリックリ
ンクをたどりません。 これにより、ファイルがインデックスまたはツリーから
アクセスされたときとファイルシステムからアクセスされたときの動作の一貫性
が保たれます。


EXAMPLES
********

あなたの履歴には、JaneとJoeの2人の作者(authors)によるコミットが含まれて
います。これらの作成の名前は、リポジトリにいくつかの形式で表示されます:

     Joe Developer <joe@example.com>
     Joe R. Developer <joe@example.com>
     Jane Doe <jane@example.com>
     Jane Doe <jane@laptop.(none)>
     Jane D. <jane@desktop.(none)>

   ここで、Joeが当初は、ミドルネームを使用することを望み、Janeが彼女の家
族名を完全に綴ることを好むとします。名前を修正するための ‘.mailmap’ ファ
イルは以下のようになります:

     Joe R. Developer <joe@example.com>
     Jane Doe <jane@example.com>
     Jane Doe <jane@desktop.(none)>

   注意: 名前を修正するためだけに、 _<jane@laptop.(none)>_ のnamesをマッ
プする必要はないことに注意してください。ただし、明らかに壊れた
_<jane@laptop.(none)>_ と _<jane@desktop.(none)>_ というの電子メールアド
レスをそのままにしておくことは、通常、希望するものではありません。したが
って、これらも修正する ‘.mailmap’ ファイルは以下のとおりです:

     Joe R. Developer <joe@example.com>
     Jane Doe <jane@example.com> <jane@laptop.(none)>
     Jane Doe <jane@example.com> <jane@desktop.(none)>

   最後に、JoeとJaneが電子メールアドレスを共有しているが、名前は共有して
いないとしましょう。バグ報告システムによって生成された履歴にそれぞれのコ
ミットを含めるとします。つまり、履歴には以下のように名前があらわれます:

     Joe <bugs@example.com>
     Jane <bugs@example.com>

   これらのケースも処理する完全な ‘.mailmap’ ファイル(上記の例に2行追加
)は以下のようになります:

     Joe R. Developer <joe@example.com>
     Jane Doe <jane@example.com> <jane@laptop.(none)>
     Jane Doe <jane@example.com> <jane@desktop.(none)>
     Joe R. Developer <joe@example.com> Joe <bugs@example.com>
     Jane Doe <jane@example.com> Jane <bugs@example.com>


SEE ALSO
********

git-check-mailmap(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: gitmodules,  Up: Top

Name
****

gitmodules — サブモジュールプロパティの定義


Synopsis
********

$GIT_WORK_TREE/.gitmodules


DESCRIPTION
***********

Git作業ツリーの最上位ディレクトリにある ‘.gitmodules’ ファイルは、
git-config(1) の構文を持つテキストファイルです。

   このファイルには、サブモジュールごとに1つのサブセクションが含まれてお
り、サブセクションの値はサブモジュールの名前です。名前は、 ‘git
submodule add’ の ‘--name’ プションでカスタマイズされていない限り、サブ
モジュールが追加されたパス名として使用されます。各サブモジュールセクショ
ンには、以下の必須キーも含まれています:

submodule.<name>.path
     サブモジュールがチェックアウトされると予想される、Git作業ツリーの最
     上位ディレクトリを基準にしたパスを定義します。 パス名は‘/‘ で終わら
     せてはいけません。 すべてのサブモジュールパスは、 ‘.gitmodules’ フ
     ァイル内で一意である必要があります。

submodule.<name>.url
     サブモジュールリポジトリのクローンを作成できるURLを定義します。 こ
     れは、 git-clone(1) に渡す準備ができている絶対URLか、 ( ‘./’ または
     ‘../’ で始まる場合)スーパープロジェクトの、元のリポジトリ
     (superproject’s origin repository)から相対的な場所のいずれかです。

   さらに、いくつかのオプションのキーがあります:

submodule.<name>.update
     名前付きサブモジュールのデフォルトの更新手順を定義します。つまり、
     スーパープロジェクトの ‘git submodul eupdate’ コマンドによってサブ
     モジュールが更新される方法を定義します。これは、同一名称の構成変数
     を初期化するために ‘git submodule init’ によってのみ使用されます。
     ここで許可される値は、「checkout」、「rebase」、「merge」、「none」
     です。 それらの意味については、 git-submodule(1) の「update」コマン
     ドの説明を参照してください。セキュリティ上の理由から、「!command」
     形式は受け入れられません。

submodule.<name>.branch
     アップストリームサブモジュールの更新を追跡するためのリモートブラン
     チ名。このオプションが指定されていない場合のデフォルトは、リモート
     のHEADになります。 別な値 ‘.’ は、サブモジュール内のブランチ名が現
     在のリポジトリ内の現在のブランチ名と同一でなければならないことを示
     すために使用されます。詳細については、 git-submodule(1) の
     ‘--remote’ ドキュメントを参照してください。

submodule.<name>.fetchRecurseSubmodules
     このオプションは、このサブモジュールの再帰的フェッチを制御するため
     に使用できます。このオプションがスーパープロジェクトの
     ‘.git/config’ のサブモジュールのエントリにも存在する場合、そこでの
     設定は ‘.gitmodules’ にある設定を上書きします。コマンドラインで両方
     の設定を上書きするには、 ‘--[no-]recurse-submodules’ オプションを
     ‘git fetch’ と ‘git pull’ で使用します。

submodule.<name>.ignore
     どのような状況で ‘git status’ とdiffファミリーがサブモジュールを変
     更済みとして表示するかを定義します。指定できるのは以下の値です:

     all
          サブモジュールが変更されたと見なされる事は決してありません( た
          だし、ステータスの出力には表示され、ステージングされるとコミッ
          ト されます)。

     dirty
          サブモジュールの作業ツリーへのすべての変更は無視され、 サブモ
          ジュールの「HEAD」とスーパープロジェクトで記録された状態との間
          の コミットされた違いのみが考慮されます。

     untracked
          サブモジュール内の追跡されていないファイル(untracked files)の
          みが無視されます。 追跡中のファイルへのコミットされた違いと変
          更が 表示されます。

     none
          サブモジュールへの変更は無視されず、コミットされたすべての違い
          、 および追跡されたファイルと追跡されていないファイルへの変更
          が表示されます。 これはデフォルトのオプションです。

     このオプションがスーパープロジェクトの ‘.git/config’ のサブモジュー
     ルのエントリにも存在する場合、そこでの設定は ‘.gitmodules’ にある設
     定を上書きします。

     ‘--ignore-submodules’ オプションを使用すると、コマンドラインで両方
     の設定を上書きできます。 ‘git submodule’ コマンドは、この設定の影響
     を受けません。

submodule.<name>.shallow
     trueに設定すると、ユーザーが明示的に非浅いクローン(non-shallow
     clone)を要求しない限り、このサブモジュールのクローンは浅いクローン
     (shallow clone)(履歴の深さ1)として実行されます。


NOTES
*****

Gitは、作業ツリー内の ‘.gitmodules’ ファイルをシンボリックリンクにするこ
とを許可せず、そのようなツリーエントリのチェックアウトを拒否します。これ
により、ファイルがインデックスまたはツリーからアクセスされたときとファイ
ルシステムからアクセスされたときの動作の一貫性が保たれ、Gitがファイルの
内容のセキュリティチェックを確実に実施できるようになります。


EXAMPLES
********

以下の ‘.gitmodules’ ファイルについて考えてみます:

     [submodule "libfoo"]
             path = include/foo
             url = git://foo.com/git/lib.git

     [submodule "libbar"]
             path = include/bar
             url = git://bar.com/git/lib.git

   これは、‘libfoo’ と ‘libbar’ の2つのサブモジュールを定義します。 これ
らはパス ‘include/foo’ と ‘include/bar’ でチェックアウトされることが期待
されており、両方のサブモジュールに対して、サブモジュールのクローン作成に
使用できるURLが指定されています。


SEE ALSO
********

git-submodule(1), gitsubmodules(7), git-config(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: gitnamespaces,  Up: Top

Name
****

gitnamespaces — Git名前空間


Synopsis
********

     GIT_NAMESPACE=<namespace> git upload-pack
     GIT_NAMESPACE=<namespace> git receive-pack


DESCRIPTION
***********

Gitは、単一のリポジトリのrefを複数の名前空間に分割することをサポートして
います。各名前空間には、独自のブランチ、タグ、およびHEADがあります。
Gitは、オブジェクトストアを共有し、すべてのrefを git-gc(1) などの操作に
公開しながら、プル元とプッシュ先の独立したリポジトリとして各名前空間を公
開できます。

   複数のリポジトリを単一のリポジトリの名前空間として保存すると、同じソ
ースの複数のブランチを保存する場合など、同じオブジェクトの重複コピーを保
存することを回避できます。代替メカニズムは、重複を回避するための同様のサ
ポートを提供しますが、名前空間が行うのに対し、代替は、継続的なメンテナン
スなしでリポジトリに追加された新しいオブジェクト間の重複を防止しません。

   名前空間を指定するには、 ‘GIT_NAMESPACE’ 環境変数に名前空間を設定しま
す。 ref名前空間ごとに、Gitは対応するrefを ‘refs/namespaces/’ の下のディ
レクトリに保存します。 たとえば、 ‘GIT_NAMESPACE=foo’ はrefを
‘refs/namespaces/foo/’ の下に保存します。 git(1) の ‘--namespace’ オプシ
ョンを使用して名前空間を指定することもできます。

   注意: ‘/’ を含む名前空間は、名前空間の階層に拡張されることに注意して
ください。たとえば、 ‘GIT_NAMESPACE=foo/bar’ はrefを
‘refs/namespaces/foo/refs/namespaces/bar/’ の下に保存します。 これにより
、 ‘GIT_NAMESPACE’ のパスが階層的に動作するため、
‘GIT_NAMESPACE=foo/bar’ でクローンを作成すると、 ‘GIT_NAMESPACE=foo’ で
クローンを作成してそのリポジトリから ‘GIT_NAMESPACE=bar’ でクローンを作
成するのと同じ結果が得られます。また、 ‘foo/refs/heads/’ などの奇妙な名
前空間パスとのあいまいさを回避します。そうしないと、 ‘refs’ ディレクトリ
内で ディレクトリ/ファイル の競合が発生する可能性があります。

   git-upload-pack(1) と git-receive-pack(1) は、 ‘GIT_NAMESPACE’ で指定
されているようにrefの名前を書き換えます。 git-upload-pack と
git-receive-pack は、指定された名前空間外のすべてのrefを無視します。

   スマートHTTPサーバー git-http-backend(1) は、 GIT_NAMESPACE をバック
エンドプログラムに渡します。リポジトリの名前空間をリポジトリとして公開す
るための設定例については、 git-http-backend(1) を参照してください。

   簡単なローカルテストには、あなたは git-remote-ext(1) を使用できます:

     git clone ext::'git --namespace=foo %s /tmp/prefixed.git'


SECURITY
********

フェッチおよびプッシュプロトコルは、共有することを意図していない一方の側
が他方のリポジトリからデータを盗むのを防ぐようには設計されていません。悪
意のある者から保護する必要のあるプライベートデータがある場合、最善のオプ
ションはそれを別のリポジトリに保存することです。これは、クライアントとサ
ーバーの両方に適用されます。特に、サーバー上の名前空間は、読み取りアクセ
ス制御には効果的ではありません。リポジトリ全体への読み取りアクセスで信頼
できるクライアントにのみ、名前空間への読み取りアクセスを許可する必要があ
ります。

   既知の攻撃ベクトル(attack vectors)は以下のとおりです:

  1. 被害者は、明示的に共有することを意図していないオブジェクトのIDをア
     ドバタイズする "have" 行を送信しますが、他にもIDを持っている者が居
     る場合は、転送を最適化するために使用できます。攻撃者はオブジェクト
     ID Xを選択して盗み、refをXに送信しますが、被害者はすでにXのコンテン
     ツを持っているため、Xのコンテンツを送信する必要はありません。 これ
     で、被害者は攻撃者がXを持っていると信じ、Xのコンテンツを後で攻撃者
     に送り返します。 (この攻撃は、クライアントがアクセスできる名前空間
     にXへのrefを作成してフェッチすることにより、クライアントがサーバー
     上で実行するのが最も簡単です。サーバーがクライアント上で実行する最
     も可能性の高い方法は、Xをパブリックブランチにマージし、ユーザーがこ
     のブランチで追加の作業を行い、マージに気付かずにサーバーにプッシュ
     バックすることを期待します。)

  2. #1 と同様に、攻撃者は盗むオブジェクトID Xを選択します。被害者は、攻
     撃者がすでに持っているオブジェクトYを送信し、攻撃者はYではなくXを持
     っていると誤って主張するため、被害者はYをXに対するデルタとして送信
     します。デルタは、攻撃者にYに類似したXの領域を明らかにします。


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: gitremote-helpers,  Up: Top

Name
****

gitremote-helpers — リモートリポジトリと対話するためのヘルパープログラム
群


Synopsis
********

     git remote-<transport> <repository> [<URL>]


DESCRIPTION
***********

リモートヘルパープログラムは通常、エンドユーザーが直接使用することはあり
ませんが、Gitがネイティブでサポートしていないリモートリポジトリと対話す
る必要がある場合にGitによって呼び出されます。 特定のヘルパーは、ここに記
載されている機能のサブセットを実装します。 Gitがリモートヘルパーを使用し
てリポジトリと対話する必要がある場合、Gitは独立したプロセスとしてヘルパ
ーを生成し、ヘルパーの標準入力にコマンドを送信し、ヘルパーの標準出力から
の結果を期待します。 リモートヘルパーはGitから独立したプロセスとして実行
されるため、新しいヘルパーを追加するためにGitを再リンクする必要も、ヘル
パーをGitの実装にリンクする必要もありません。

   すべてのヘルパーは ‘capabilities’ (機能)コマンドをサポートする必要が
あります。これは、ヘルパーが受け入れる他のコマンドをGitが決定するために
使用します。これらの他のコマンドを使用して、リモート参照の検出と更新や、
オブジェクトデータベースとリモートリポジトリ間のオブジェクトの転送や、ロ
ーカルオブジェクトストアの更新を行うことができます。

   Gitには、 ‘git-remote-http’ や、 ‘git-remote-https’ や、
‘git-remote-ftp’ や、 ‘git-remote-ftps’ などのさまざまな転送
(transport)プロトコルを処理する "curl" ファミリーのリモートヘルパーが付
属しています。これらは、機能(capabilities)として、 ‘fetch’ と ‘option’ と
‘push’ を実装します。


INVOCATION
**********

リモートヘルパープログラムは、1つまたは(オプションで)2つの引数を使用して
呼び出されます。最初の引数は、Gitのようにリモートリポジトリを指定します
。それは設定されたリモートの名前またはURLのいずれかです。2番目の引数は
URLを指定します。 通常は ‘<transport>://<address>’ の形式ですが、任意の
文字列を使用できます。 ‘GIT_DIR’ 環境変数はリモートヘルパー用に設定され
ており、追加データを保存する場所や、補助Gitコマンドを呼び出すディレクト
リを決定するために使用できます。

   Gitが ‘<transport>://<address>’ の形式のURLを検出すると、ここで、
‘<transport>’ はネイティブに処理できないプロトコルで、2番目の引数として
完全なURLを使用して ‘git remote-<transport>’ を自動的に呼び出します。そ
のようなURLがコマンドラインで直接検出された場合は最初の引数は2番目の引数
と同じであり、構成されたリモートで検出された場合最初の引数はそのリモート
の名前です。

   ‘<transport>::<address>’ の形式のURLは、2番目の引数として ‘<address>’
を使用して ‘git remote-<transport>’ を呼び出すようにGitに明示的に指示し
ます。このようなURLがコマンドラインで直接検出された場合最初の引数は
‘<address>’ であり、構成されたリモートで検出された場合最初の引数はそのリ
モートの名前です。

   さらに、構成されたリモートで ‘remote.<name>.vcs’ が ‘<transport>’ に
設定されている場合、Gitは最初の引数として ‘<name>’ を使用して ‘git
remote-<transport>’ を明示的に呼び出します。 ‘remote.<name>.url’ が設定
されている場合は、2番目の引数は ‘remote.<name>.url’ です。
‘remote.<name>.url’ が設定されてない場合、2番目の引数は省略されます。


INPUT FORMAT
************

Gitは、リモートヘルパーの標準入力にコマンドのリストを1行に1つずつ送信し
ます。 最初のコマンドは常に ‘capabilities’ (機能)コマンドであり、これに
応答して、リモートヘルパーはサポートする機能のリスト(以下を参照)とそれに
続く空白行を出力する必要があります。機能コマンドへの応答により、Gitがコ
マンドストリームの残りの部分で使用するコマンドが決まります。

   コマンドストリームは空白行で終了します。場合によっては(関連するコマン
ドのドキュメントに示されています)、この空白行の後に他のプロトコル(packプ
ロトコルなど)のペイロードが続きますが、他の場合は入力の終了を示します。


Capabilities
============

各リモートヘルパーは、コマンド群のサブセットのみをサポートすることが期待
されています。ヘルパーがサポートする操作は、 ‘capabilities’ コマンドへの
応答でGitに宣言されます(以下のCOMMANDSを参照)。

   以下に、定義されているすべての機能をリストし、それぞれについて、その
機能を持つヘルパーが提供しなければならないコマンドをリストします。


Capabilities for Pushing
------------------------

_connect_
     gitのネイティブpackfileプロトコルを使用した通信のために、 ‘git
     receive-pack’(プッシュ用)、 ‘git upload-pack’ などへの接続を試みる
     ことができます。これには、双方向の全二重接続が必要です。

     サポートされているコマンド: _connect_

_stateless-connect_
     実験的:内部使用のみ。 gitのワイヤープロトコル バージョン2を使用して
     、通信のためにリモートサーバーへの接続を試みることができます。詳細
     については、 stateless-connect コマンドのドキュメントを参照してくだ
     さい。

     サポートされているコマンド: _stateless-connect_.

_push_
     リモートrefを発見する事ができ、そして、ローカルコミットとそれらに至
     るまでの履歴を、新規または既存のリモートrefにプッシュする事ができま
     す。

     サポートされているコマンド: _list for-push_, _push_.

_export_
     リモートrefを発見し、指定のオブジェクトを高速インポートストリームか
     らリモートrefにプッシュできます。

     サポートされているコマンド: _list for-push_, _export_.

   ヘルパーが ‘connect’ を広告(advertise)する場合、Gitは可能であればそれ
を使用し、接続時にヘルパーが要求すると別の機能にフォールバックします(「
COMMANDS」セクションの ‘connect’ コマンド参照)。 ‘push’ と ‘export’ のど
ちらかを選択する場合、Gitは ‘push’ を優先します。他のフロントエンドには
、他の優先順位がある場合があります。

_no-private-update_
     ‘refspec’ 機能を使用する場合、gitは通常、プッシュが成功するとプライ
     ベートrefを更新します。リモートヘルパーが機能 ‘no-private-update’ を
     宣言すると、この更新は無効になります。


Capabilities for Fetching
-------------------------

_connect_
     Gitのネイティブpackfileプロトコルを使用した通信のために、 ‘git
     upload-pack’(フェッチ用)、 ‘git receive-pack’ などへの接続を試みる
     ことができます。これには、双方向の全二重接続が必要です。

     サポートされているコマンド: _connect_

_stateless-connect_
     実験的:内部使用のみ。 gitのワイヤープロトコル バージョン2を使用して
     、通信のためにリモートサーバーへの接続を試みることができます。詳細
     については、 stateless-connect コマンドのドキュメントを参照してくだ
     さい。

     サポートされているコマンド: _stateless-connect_.

_fetch_
     リモートrefを発見し、それらから到達可能なオブジェクトをローカルオブ
     ジェクトストアに転送できます。

     サポートされているコマンド: _list_, _fetch_.

_import_
     リモートrefを発見し、それらから到達可能なオブジェクトを高速インポー
     ト形式(fast-import format)のストリームとして出力できます。

     サポートされているコマンド: _list_, _import_.

_check-connectivity_
     クローンを要求(request)されたときに、受信したパックが、自己完結して
     おり、そして、接続されていることを保証できます。

   ヘルパーが ‘connect’ を広告(advertise)する場合、Gitは可能であればそれ
を使用し、接続時にヘルパーが要求すると別の機能にフォールバックします(「
COMMANDS」セクションの ‘connect’ コマンド参照)。 ‘fetch’ と ‘import’ の
どちらかを選択する場合、Gitは ‘fetch’ を優先します。他のフロントエンドに
は、他の優先順位がある場合があります。


Miscellaneous capabilities
--------------------------

_option_
     他のコマンドの実行方法に影響を与える ‘verbosity’ (stderrに書き込む
     出力量)や、 ‘depth’ (浅いクローン(shallow clone)の場合に必要な履歴
     量)などの設定を指定します。

_refspec_ <refspec>
     ‘import’ または ‘export’ を実装するリモートヘルパーの場合、この機能
     により、 ‘refs/heads’ または ‘refs/remotes’ に直接書き込む代わりに
     、refsをプライベート名前空間に制約できます。 ‘import’ 機能を提供す
     るすべてのインポーターがこれを使用することをお勧めします。 ‘export’
     では必須です。

     機能 ‘refspec refs/heads/*:refs/svn/origin/branches/*’ を広告
     (advertise)するヘルパーは、 ‘import refs/heads/topic’ と問われた時
     に出力されるストリームは 、‘refs/svn/origin/branches/topic’ ref を
     更新します。

     この機能は複数回広告できます。最初に適用可能なrefspecが優先されます
     。この機能でアドバタイズされるrefspecの(‘:’ の)左側は、listコマンド
     によって報告されるすべてのrefをカバーする必要があります。 ‘refspec’
     機能が広告されていない場合は暗黙の ‘refspec *:*’ が設定されています
     。

     分散型バージョン管理システム用のリモートヘルパーを作成する場合は、
     リポジトリのローカルコピーを保持して対話することをお勧めします。プ
     ライベート名前空間refsがこのローカルリポジトリを指すようにし、
     refs/remotes 名前空間はリモートリポジトリを追跡するために使用されま
     す。

_bidi-import_
     これにより、 ‘import’ 機能が変更されます。fast-importコマンドの
     ‘cat-blob’ と ‘ls’ をリモートヘルパーが使用して、fast-importのメモ
     リにすでに存在するブロブとツリーに関する情報を取得できます。これに
     は、fast-importからリモートヘルパーへのチャネルが必要です。
     ‘import’ に加えて広告される場合、Gitはfast-importからリモートヘルパ
     ーのstdinへのパイプを確立します。 したがって、Gitとfast-importは両
     方ともリモートヘルパーのstdinに接続されています。Gitは複数のコマン
     ドをリモートヘルパーに送信できるため、データをfast-importに送信する
     前に、 ‘bidi-import’ を使用するヘルパーがバッチのすべての ‘import’
     コマンドをバッファリングする必要があります。 これは、ヘルパーの
     stdinでコマンドと、fast-import高速インポート応答が混在するのを防ぐ
     ためです。

_export-marks_ <file>
     これにより、 ‘export’ 機能が変更され、完了時に内部マークテーブル
     (internal marks table)を<file>にダンプするようにGitに指示します。詳
     細については git-fast-export(1) の ‘--export-marks=<file>’ を参照し
     てください。

_import-marks_ <file>
     これにより、 ‘export’ 機能が変更され、入力を処理する前に<file>で指
     定したマークをロードするようにGitに指示します。詳細については
     git-fast-export(1) の ‘--import-marks=<file>’ を参照してください。

_signed-tags_
     これにより、 ‘export’ 機能が変更され、 ‘--signed-tags=verbatim’ を
     linkgit：git-fast-export[1]に渡すようにGitに指示します。この機能が
     ない場合、Gitは ‘--signed-tags=warn-strip’ を使用します。

_object-format_
     これは、ヘルパーが明示的なハッシュアルゴリズム拡張(explicit hash
     algorithm extension)を使用してリモート側と対話できることを示してい
     ます。


COMMANDS
********

コマンドは、ヘルパーの標準入力に、呼び出し元によって1行に1つずつ与えられ
ます。

_capabilities_
     ヘルパーの機能を1行に1つずつリスト出力し、空白行で終わります。各機
     能の前に ‘*’ を付けることができます。これは、リモートヘルパーを使う
     Gitのバージョンで理解することが必須であることを示します。不明な必須
     機能は致命的なエラーです。

     このコマンドのサポートは必須です。

_list_
     refを1行に1つずつ、 ‘<value> <name> [<attr> ...]’ の形式で一覧出力
     します。 値は、16進のsha1ハッシュ または、symrefの場合は ‘@<dest>’
     または、キーと値のペアの場合は ‘:<keyword> <value>’ または、 ‘？｀
     の場合はヘルパーがrefの値を取得できなかったことを示します。 nameの
     後には、スペースで区切られたattributes(属性)のリストが続きます。認
     識されない属性は無視されます。リストは空白行で終わります。

     現在定義されている属性のリストについては、「REF LIST ATTRIBUTES」を
     参照してください。現在定義されているキーワードのリストについては、
     「REF LIST KEYWORDS」を参照してください。

     ヘルパーに「fetch」または「import」機能がある場合にサポートされます
     。

_list for-push_
     ‘list’ と似ていますが、呼び出し元が結果のrefリストでプッシュコマン
     ドを準備したい場合にのみ使用される点が異なります。プッシュとフェッ
     チの両方をサポートするヘルパーは、これを使用して、 ‘list’ の出力が
     使用される操作を区別し、実行する必要のある作業の量を減らすことがで
     きます。

     ヘルパーに "push" または "export" 機能がある場合にサポートされます
     。

_option_ <name> <value>
     転送(transport)ヘルパーオプション <name> を <value> に設定します。
     出力は、 ‘ok’(オプションが正常に設定された)または、 ‘unsupported’(オ
     プションが認識されない)または、 ‘error <msg>’(オプション<name>はサ
     ポートされていますが、<value>は無効です)のいずれかを含む単一行です
     。オプションは他のコマンドの前に設定する必要があり、それらのコマン
     ドの動作に影響を与える可能性があります。

     現在定義されているオプションのリストについては、OPTIONSを参照してく
     ださい。

     ヘルパーに "option" 機能がある場合にサポートされます。

_fetch_ <sha1> <name>
     指定されたオブジェクトをフェッチし、必要なオブジェクトをデータベー
     スに書き込みます。fetchコマンドは、1行に1つずつバッチで送信され、空
     白行で終了します。 同じバッチ内のすべてのfetchコマンドが完了すると
     、1行の空白行を出力します。この方法でフェッチできるのは、sha1を使用
     した ‘list’ の出力で報告されたオブジェクトのみです。

     オプションで、refが適切に更新されるまでパックを保持している
     ‘$GIT_DIR/objects/pack’ の下のファイルのフルパスを示す ‘lock<file>’
     行を出力できます。パスは ‘.keep’ で終わる必要があります。これは、
     keepコンポーネントのみを指定して、 <pack,idx,keep> タプルに名前を付
     けるメカニズムです。保持されたパックは、フェッチが完了するまでその
     オブジェクトが参照されない場合でも、並列再パック(concurrent
     repack)によって削除されません。 ‘.keep’ ファイルはフェッチの終了時
     に削除されます。

     オプション ‘check-connectivity’ が要求された場合、クローンが自己完
     結型(self-contained)で接続されていれば、ヘルパーは
     ‘connectivity-ok’ を出力する必要があります。

     ヘルパーに "fetch" 機能がある場合にサポートされます。

_push_ +<src>:<dst>
     指定された ローカル <src> コミットまたはブランチを、 <dst>で記述さ
     れたリモートブランチにプッシュします。 1つ以上の ‘push’ コマンドの
     バッチシーケンスは空白行で終了します(pushへの参照が1つしかない場合
     は、単一の ‘push’ コマンドの後に空白行が続きます)。たとえば、以下は
     ‘push’ の2つのバッチであり、最初のはリモートヘルパーに、ローカル参
     照 ‘master’ をリモート参照 ‘master’ にプッシュし、ローカル ‘HEAD’ を
     リモート ‘branch’ にプッシュするように要求します。2番目のは ref
     ‘foo’ を ref ‘bar’ にプッシュするように要求します(_+_ によって要求
     された強制更新です)。

          push refs/heads/master:refs/heads/master
          push HEAD:refs/heads/branch
          \n
          push +refs/heads/foo:refs/heads/bar
          \n

     最後の ‘push’ コマンドの後、バッチの終了空白行の前に、0個以上のプロ
     トコルオプションを入力できます。

     プッシュが完了すると、1つ以上の ‘ok <dst>’ または ‘error <dst>
     <why>?’ 行を出力して、プッシュされた各参照の成功または失敗を示しま
     す。ステータスレポートの出力は空白行で終了します。オプションフィー
     ルド <why> は、LFが含まれている場合、Cスタイルの文字列でクォートさ
     れる場合があります。

     ヘルパーに "push" 機能がある場合にサポートされます。

_import_ <name>
     名前付きrefの現在の値をインポートするfast-importストリームを生成し
     ます。履歴を効率的に構築するために、必要に応じて他の参照を追加でイ
     ンポートする場合があります。スクリプトは、ヘルパー固有のプライベー
     ト名前空間に書き込みます。名前付きrefの値は、「refspec」機能からの
     refspecをrefの名前に適用することによって派生した、この名前空間内の
     場所に書き込む必要があります。

     他のバージョン管理システムとの相互運用性に特に役立ちます。

     ‘push’ と同様に、1つ以上の ‘import’ のバッチシーケンスは空白行で終
     了します。 ‘import’ の各バッチごとに、リモートヘルパーは ‘done’ コ
     マンドで終了する fast-import ストリームを生成する必要があります。

     ‘bidi-import’ 機能を使用する場合は、ヘルパーのstdinでの、コマンドと
     fast-import応答の混合を防ぐために、fast-importへのデータの送信を開
     始する前にバッチシーケンスを完全にバッファリングする必要があること
     に注意してください。

     ヘルパーに "import" 機能がある場合にサポートされます。

_export_
     後続の入力は、リモートにプッシュする必要のあるオブジェクトを含む
     fast-importストリーム( ‘git fast-export’ によって生成される)の一部
     であることをリモートヘルパーに指示します。

     他のバージョン管理システムとの相互運用性に特に役立ちます。

     ‘export-marks’ と ‘import-marks’ 機能は、指定されている場合、 ‘git
     fast-export｀ に渡される限り、このコマンドに影響します。 `git
     fast-export’ は、ローカルオブジェクトのマークのテーブルを ロード/保
     存 します。 これは、増分操作の実装に使用できます。

     ヘルパーに "export" 機能がある場合にサポートされます。

_connect_ <service>
     指定のサービスに接続します。ヘルパーの標準入力と標準出力は、リモー
     ト側で指定指定のサービスに接続されます(gitプレフィックスはサービス
     名に含まれているので、例えばフェッチはサービスとして
     ‘git-upload-pack’ を使用します)。このコマンドに対する有効な応答は、
     空行(接続が確立されました)と、 ‘fallback’ (スマート転送サポートなし
     、バカ転送(dumb transports)にフォールバック)と、エラーメッセージが
     印刷された状態で終了するだけです(接続できません、フォールバックしよ
     うと気にしないで)。肯定(空)応答が改行で終了すると、サービスの出力が
     開始されます。接続が終了すると、リモートヘルパーは終了します。

     ヘルパーに "connect" 機能がある場合にサポートされます。

_stateless-connect_ <service>
     実験的: 内部使用のみ。 gitのワイヤープロトコルバージョン2を使用して
     通信するために、指定のリモートサービスに接続します。このコマンドへ
     の有効な応答は、空行(接続が確立されました)と、 ‘fall back’ (スマー
     ト転送サポートなし、バカ転送にフォールバック)と、エラーメッセージ出
     力するだけです(接続できません。わざわざフォールバックしようとしない
     でください)。 正の(空の)応答を終了する改行の後、サービスの出力が開
     始されます。 メッセージ(要求と応答の両方)は、0個以上のPKT-LINEで構
     成され、フラッシュパケットで終了する必要があります。 応答メッセージ
     には、応答の終了を示すフラッシュパケットの後に応答終了パケットがあ
     ります。 クライアントは、サーバーが要求と応答のペアの間に状態を保持
     することを期待してはなりません。接続が終了すると、リモートヘルパー
     が終了します。

     ヘルパーに "stateless-connect" 機能がある場合にサポートされます。

   致命的なエラーが発生した場合、プログラムはエラーメッセージをstderrに
書き込み、終了します。呼び出し元は、子が現在のコマンドに対する有効な応答
を完了せずに接続を閉じた場合に、適切なエラーメッセージを出力することを期
待します。

   ヘルパーによって報告された機能から判断できるように、追加のコマンドが
サポートされる場合があります。


REF LIST ATTRIBUTES
*******************

’list’コマンドは、各refの後に属性(attribute)のリストが続くことがある
refのリストを生成します。以下のrefリスト属性(ref list attributes)が定義
されています。

_unchanged_
     このrefは、最後にインポートまたはフェッチしたときから変更されていま
     せんが、ヘルパーは必ずしもどの値が生成されたかを判別することはでき
     るわけではありません。


REF LIST KEYWORDS
*****************

listコマンドは、キーと値のペア(key-value pairs)のリストを生成する場合が
あります。以下のキーが定義されています。

_object-format_
     refは指定のハッシュアルゴリズムを使用しています。このキーワードは、
     サーバーとクライアントの両方がオブジェクト形式の拡張機能
     (object-format extension)をサポートしている場合にのみ使用されます。


OPTIONS
*******

以下のオプションは、リモートヘルパーに option 機能がある場合にGitによっ
て定義され、(適切な状況下で)設定されます。

_option verbosity_ <n>
     ヘルパーによって表示されるメッセージの詳細度を変更します。 <n>の値
     0は、プロセスが静かに動作し、ヘルパーがエラー出力のみを生成すること
     を意味します。 1は冗長性のデフォルトレベルであり、<n>の値が大きさは
     、コマンドラインで渡される ‘-v’ フラグの数に対応します。

_option progress_ {_true_|_false_}
     コマンド実行中に転送(transport)ヘルパーによって表示される進行状況メ
     ッセージを有効(または無効)にします。

_option depth_ <depth>
     浅いリポジトリ(shallow repository)の履歴を深めます。

’option deepen-since <timestamp>
     時間に基づいて浅いリポジトリ(shallow repository)の履歴を深めます。

’option deepen-not <ref>
     refを除く浅いリポジトリ(shallow repository)の履歴を深めます。複数回
     使用できます。

_option deepen-relative {’true_|_false_}
     現在の境界に比べて浅いリポジトリの履歴を深めます。 「option depth」
     で使用する場合にのみ有効です。

_option followtags_ {_true_|_false_}
     有効にすると、フェッチコマンド中にタグが指すオブジェクトが転送され
     た場合、ヘルパーは注釈付きのタグオブジェクトを自動的にフェッチする
     必要があります。 タグがヘルパーによってフェッチされない場合、通常、
     2番目のフェッチコマンドが送信され、タグを具体的に要求します。一部の
     ヘルパーは、このオプションを使用して2番目のネットワーク接続を回避で
     きる場合があります。

_option dry-run_ {_true_|_false_}
     trueの場合、操作が正常に完了したふりをしますが、実際にはリポジトリ
     データを変更しません。 ほとんどのヘルパーの場合、これはサポートされ
     ている場合、 ‘push’ にのみ適用されます。

_option servpath <c-style-quoted-path>_
     次の接続のサービスパス(‘--upload-pack’ 、‘--receive-pack’ など)を設
     定します。 リモートヘルパーはこのオプションをサポートする場合があり
     ますが、接続要求が発生する前に、設定されているこのオプションに依存
     してはなりません。

_option check-connectivity_ {_true_|_false_}
     ヘルパーにクローンの接続を確認(check)するように依頼(request)します
     。

_option force_ {_true_|_false_}
     ヘルパーに強制更新を実行するように依頼(request)します。デフォルトは
     ‘false’ です。

_option cloning_ {_true_|_false_}
     これがクローンリクエストであることをヘルパーに通知します(つまり、現
     在のリポジトリは空であることが保証されています)。

_option update-shallow_ {_true_|_false_}
     新しいrefで必要な場合は、 .git/shallow を拡張できるようにします。

_option pushcert_ {_true_|_false_}
     GPG署名プッシュ。

’option push-option <string>
     <string>をプッシュオプションとして送信します。プッシュオプションに
     はLFまたはNUL文字を含めることはできないため、文字列はエンコードされ
     ません。

_option from-promisor_ {_true_|_false_}
     これらのオブジェクトがpromisorからフェッチされていることを示します
     。

_option no-dependents_ {_true_|_false_}
     依存関係ではなく、必要なオブジェクトのみをフェッチする必要があるこ
     とを示します。

_option atomic_ {_true_|_false_}
     プッシュするときは、リモートサーバーに単一のアトミックトランザクシ
     ョンで参照を更新するように要求します。 成功すると、すべての参照が更
     新されるか、何も更新されません。 リモート側がこの機能をサポートして
     いない場合、プッシュは失敗します。

_option object-format_ {_true_|algorithm}
     ‘true’ の場合、呼び出し元がハッシュアルゴリズム情報をリモートから返
     すことを望んでいることを示します。このモードは、参照をフェッチする
     ときに使用されます。

     アルゴリズムに設定されている場合は、発信者がそのアルゴリズムを使用
     してリモート側と対話することを希望していることを示します。


SEE ALSO
********

git-remote(1)

   git-remote-ext(1)

   git-remote-fd(1)

   git-fast-import(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: gitrepository-layout,  Up: Top

Name
****

gitrepository-layout — Gitリポジトリの間取り


Synopsis
********

$GIT_DIR/*


DESCRIPTION
***********

Gitリポジトリには2つの風味があります:

   • 作業ツリーのルートにある ‘.git’ ディレクトリ

   • bare(裸の)リポジトリである(つまり、独自の作業ツリーがない)「
     <project>.git」ディレクトリ。通常、このディレクトリにプッシュしてフ
     ェッチすることにより、他のユーザーと履歴を交換するために使用されま
     す。

   *注*: また、作業ツリーのルートにプレーンテキストファイル ‘.git’ を作
成できます。 このファイルには、リポジトリがある実際のディレクトリを指す
‘gitdir: <path>’ が含まれています。 このメカニズムは、サブモジュールチェ
ックアウトの作業ツリーによく使用され、 サブモジュールを含むスーパープロ
ジェクトで、 サブモジュールを持たないブランチを「git checkout」できるよ
うにします。 ‘checkout’ は、サブモジュールリポジトリを失うことなく、 サ
ブモジュール作業ツリー全体を削除する必要があります。

   以下のものがGitリポジトリに存在する可能性があります。

objects
     このリポジトリに関連付けられているオブジェクトストア。通常、オブジ
     ェクトストアは自給自足です(つまり、そこにあるオブジェクトによって参
     照されるすべてのオブジェクトもそこにあります)が、それに違反する方法
     はいくつかあります。

       1. 浅いクローン(shallow clone)を作成することにより、不完全である
          がローカルで使用可能なリポジトリを作成できます。 git-clone(1)
          を参照してください。

       2. ‘objects/info/alternates’ または
          ‘$GIT_ALTERNATE_OBJECT_DIRECTORIES’ メカニズムを使用して、他の
          オブジェクトストアからオブジェクトを「借用」(borrow)することが
          できます。この種の不完全なオブジェクトストアを持つリポジトリは
          、馬鹿プロトコル(dumb transport)で使用するために公開するのには
          適していませんが、それ以外の場合は「objects/info/alternates」
          が借用するオブジェクトストアを指している限り問題ありません。

          $GIT_COMMON_DIR が設定されている場合、このディレクトリは無視さ
          れ、代わりに「$GIT_COMMON_DIR/objects」が使用されます。

objects/[0-9a-f][0-9a-f]
     新しく作成されたオブジェクトは、独自のファイルに保存されます。オブ
     ジェクトは、sha1オブジェクト名の最初の2文字を使用して、256個のサブ
     ディレクトリに分散され、 ‘objects’ 自体のディレクトリエントリの数を
     管理可能な数に保ちます。ここにあるオブジェクトは、「アンパックオブ
     ジェクト」(unpacked obuject)(または「ルーズオブジェクト」(loose
     object))と呼ばれることがよくあります。

objects/pack
     パック(多くのオブジェクトを圧縮形式で格納するファイルと、ランダムに
     アクセスできるようにするためのインデックスファイル)は、このディレク
     トリにあります。

objects/info
     オブジェクトストアに関する追加情報は、このディレクトリに記録されま
     す。

objects/info/packs
     このファイルは、馬鹿プロトコルがこのオブジェクトストアで使用可能な
     パックを検出するのに役立ちます。リポジトリが馬鹿プロトコル用に公開
     されている場合は、パックを追加または削除するたびに、 ‘git
     update-server-info’ を実行して、このファイルを最新の状態に保つ必要
     があります。 _git repack_ はデフォルトでこれを行います。

objects/info/alternates
     このファイルは、このオブジェクトストアがオブジェクトを借用
     (borrow)する代替オブジェクトストアへのパスを、1行に1つのパス名で記
     録します。ネイティブGitツールがローカルで使用するだけでなく、HTTP
     fetcher もリモートで使用しようとすることに注意してください。これは
     通常、代替ファイルに相対パス(リポジトリではなくオブジェクトデータベ
     ースに対して！)がある場合は機能しますが、ファイルシステムとWeb URLの
     絶対パスが同じでない限り、絶対パスを使用する場合は機能しません。
     ‘objects/info/http-alternates’ も参照してください。

objects/info/http-alternates
     このファイルは、このオブジェクトストアがオブジェクトを借用
     (borrow)する代替オブジェクトストアへのURLを記録し、リポジトリが
     HTTP経由でフェッチされるときに使用されます。

refs
     参照(reference)は、このディレクトリのサブディレクトリに保存されます
     。 _git prune_ コマンドは、このディレクトリとそのサブディレクトリに
     見つかったrefsから到達可能なオブジェクトを認識し保持します。
     $GIT_COMMON_DIRが設定されていて、代わりに「$GIT_COMMON_DIR/refs」が
     使用される場合、このディレクトリは無視されます(refs/bisectと
     refs/rewrittenとrefs/worktreeを除く)。

refs/heads/‘name’
     ブランチ ‘name’ のツリーの先端(tip-of-the-tree)のコミットオブジェク
     トを記録します

refs/tags/‘name’
     オブジェクト名を記録します(必ずしもコミットオブジェクト、またはコミ
     ットオブジェクトを指すタグオブジェクトである必要はありません)。

refs/remotes/‘name’
     リモートリポジトリからコピーされたブランチのツリーの先端
     (tip-of-the-tree)のコミットオブジェクトを記録します。

refs/replace/‘<obj-sha1>’
     ‘<obj-sha1>’ を置き換えるオブジェクトのSHA-1を記録します。これは
     info/graftsに似ており、 git-replace(1) によって内部的に使用および保
     守されます。 このようなrefsはリポジトリ間で交換できますが、graftsは
     交換できません。

packed-refs
     refs/heads/ や refs/tags/ と同じ情報を記録し、そして friends がより
     効率的な方法で記録します。 git-pack-refs(1) を参照してください。
     $GIT_COMMON_DIR が設定されている場合、このファイルは無視され、代わ
     りに「$GIT_COMMON_DIR/packed-refs」が使用されます。

HEAD
     現在アクティブなブランチを説明する ‘refs/heads/’ 名前空間へのシンボ
     リックref(symref;glossaryを参照)。リポジトリが作業ツリーに関連付け
     られていない場合(つまり、ベアリポジトリの場合)はあまり意味がありま
     せんが、有効なGitリポジトリにはHEADファイルが「必要」です。一部の磁
     器コマンドは、これを使用して、リポジトリの指定された「デフォルト」
     ブランチ(通常は「master」)を推測する場合があります。名前付きブラン
     チ _name_ が(まだ)存在しない場合も合法です。一部のレガシー設定では
     、現在のブランチを指すシンボリックref(symref)ではなくシンボリックリ
     ンクです。

     HEADは、現在のブランチを指すシンボリックref(symref)である代わりに、
     特定のコミットを直接記録することもできます。このような状態は「
     detached HEAD」と呼ばれることがよくあります。詳細については
     git-checkout(1)を参照してください。

config
     リポジトリ固有の構成ファイル。 $GIT_COMMON_DIR が設定されている場合
     、このファイルは無視され、代わりに「$GIT_COMMON_DIR/config」が使用
     されます。

config.worktree
     複数の作業ディレクトリ設定の、メイン作業ディレクトリための、作業デ
     ィレクトリ固有の構成ファイル(git-worktree(1) を参照)。

branches
     _git fetch_ や _git pull_ や _git push_ へのURLを指定するために使用
     される短縮形を格納するための、少々非推奨の方法。ファイルは
     ‘branches/<name>’ として保存でき、 _repository_ 引数の代わりに
     _name_ をこれらのコマンドに指定できます。詳細については、
     git-fetch(1) の REMOTES セクションを参照してください。この機構はレ
     ガシーであり、最新のリポジトリには見られない可能性があります。
     $GIT_COMMON_DIR が設定されている場合、このディレクトリは無視され、
     代わりに「$GIT_COMMON_DIR/branches」が使用されます。

hooks
     フックは、さまざまなGitコマンドで使用されるカスタマイズスクリプトで
     す。 _git init_ を実行すると、いくつかのサンプルフックがインストー
     ルされますが、デフォルトではすべて無効になっています。有効にするに
     は、ファイル名から ‘.sample’ サフィックスを削除して名前を変更する必
     要があります。各フックの詳細については、 githooks(5) をお読みくださ
     い。 $GIT_COMMON_DIR が設定されている場合、このディレクトリは無視さ
     れ、代わりに「$GIT_COMMON_DIR/hooks」が使用されます。

common
     複数の作業ツリーが使用されている場合、 $GIT_DIR 内のほとんどのファ
     イルは、いくつかの既知の例外を除いて、各作業ツリー毎とにありますで
     す。ただし、「common」の下にあるすべてのファイルは、すべての作業ツ
     リー間で共有されます。

index
     リポジトリの現在のインデックスファイル。通常、ベアリポジトリには見
     つかりません。

sharedindex.<SHA-1>
     $GIT_DIR/indexおよびその他の一時(temporary)インデックスファイルによ
     って参照される共有インデックス部分。スプリットインデックスモード
     (split index mode)でのみ有効です。

info
     リポジトリに関する追加情報は、このディレクトリに記録されます。
     $GIT_COMMON_DIR が設定されている場合、このディレクトリは無視され、
     代わりに「$GIT_COMMON_DIR/info」が使用されます。

info/refs
     このファイルは、馬鹿プロトコル(dumb transports)がこのリポジトリで使
     用可能なrefsを検出するのに役立ちます。リポジトリが馬鹿プロトコル
     (dumb transports)用に公開されている場合、このファイルは、タグまたは
     ブランチが作成または変更されるたびに、「git update-server-info」に
     よって再生成される必要があります。これは通常、リポジトリに「git
     push」したときに「git-receive-pack」コマンドによって実行される「
     hooks/update」フックから実行されます。

info/grafts
     このファイルは、コミットが実際に作成された方法とは異なる親のセット
     を装うために、偽のコミットの祖先情報を記録します。1行に1つのレコー
     ドは、スペースで区切られ、改行で終了する40バイトの16進オブジェクト
     名をリストすることにより、コミットとその偽の親を記述します。

     graftsメカニズムは古臭く、リポジトリ間でオブジェクトを転送する際に
     問題が発生する可能性があることに注意してください。 同じことを行うた
     めのより柔軟で堅牢なシステムについては、 git-replace(1) を参照して
     ください。

info/exclude
     このファイルは、磁器コマンドの慣例により、除外パターンリストを格納
     します。 ‘.gitignore’ は、ディレクトリごとの無視ファイルです。「git
     status」、「git add」、「git rm」、「git clean」はこの除外パターン
     リストを調べますが、コアGitコマンドはこの除外パターンリストを調べま
     せん。 gitignore(5) も参照してください。

info/attributes
     ディレクトリごとの ‘.gitattributes’ ファイルと同様に、パスに割り当
     てる属性を定義します。 gitattributes(5) も参照してください。

info/sparse-checkout
     このファイルには、スパースチェックアウトパターン(sparse checkout
     patterns)が格納されています。 git-read-tree(1) も参照してください。

remotes
     _git fetch_ と _git pull_ と _git push_ コマンドを介してリモートリ
     ポジトリと対話するときに使用するURLの省略形とデフォルトのref名を格
     納します。詳細については、 git-fetch(1)のREMOTESセクションを参照し
     てください。このメカニズムはレガシーであり、最新のリポジトリには見
     られない可能性があります。 $GIT_COMMON_DIR が設定されている場合、こ
     のディレクトリは無視され、代わりに「$GIT_COMMON_DIR/remotes」が使用
     されます。

logs
     refに加えられた変更の記録は、このディレクトリに保存されます。詳細に
     ついては、 git-update-ref(1) を参照してください。 $GIT_COMMON_DIRが
     設定されていて、代わりに「$GIT_COMMON_DIR/logs」が使用される場合、
     このディレクトリは無視されます(但し、logs/HEADを除く)。

logs/refs/heads/‘name’
     ‘name’ という名前のブランチ先端(branch tip)に加えられたすべての変更
     を記録します。

logs/refs/tags/‘name’
     ‘name’ という名前のタグに加えられたすべての変更を記録します。

shallow
     これは ‘info/grafts’ に似ていますが、内部的に使用され、浅いクローン
     メカニズム(shallow clone mechanism)によって維持されます。
     git-clone(1) と git-fetch(1) の ‘--depth’ オプションを参照してくだ
     さい。 $GIT_COMMON_DIRが設定されている場合、このファイルは無視され
     、代わりに「$GIT_COMMON_DIR/shallow」が使用されます。

commondir
     このファイルが存在する場合、明示的に設定されていなければ、
     $GIT_COMMON_DIR (git(1) を参照)はこのファイルで指定されたパスに設定
     されます。指定されたパスが相対パスの場合、それは$GIT_DIRからの相対
     パスです。commondirのあるリポジトリは、「commondir」が指すリポジト
     リがないと不完全です。

modules
     サブモジュールのgitリポジトリが含まれています。

worktrees
     リンクされた作業ツリー(linked working trees)の管理データが含まれて
     います。各サブディレクトリには、リンクされた作業ツリーの作業ツリー
     関連部分が含まれています。 $GIT_COMMON_DIRが設定されている場合、こ
     のディレクトリは無視され、代わりに「$GIT_COMMON_DIR/worktrees」が使
     用されます。

worktrees/<id>/gitdir
     ここを指す .git ファイルに戻る絶対パスを含むテキストファイル。これ
     は、リンクされたリポジトリが手動で削除されているかどうかを確認する
     ために使用され、このディレクトリをこれ以上保持する必要はありません
     。 このファイルのmtimeは、リンクされたリポジトリにアクセスするたび
     に更新する必要があります。

worktrees/<id>/locked
     このファイルが存在する場合、リンクされた作業ツリーがポータブルデバ
     イス上にあり、使用できない可能性があります。このファイルが存在する
     と、 ‘git worktree prune’ によって ‘worktrees/<id>’ が自動または手
     動で剪定(prune)されるのを防ぎます。ファイルには、リポジトリがロック
     されている理由を説明する文字列が含まれている場合があります。

worktrees/<id>/config.worktree
     作業ディレクトリ固有の構成ファイル。


Git Repository Format Versions
******************************

すべてのgitリポジトリは、その ‘config’ ファイルの‘
core.repositoryformatversion‘ 数値のバージョンが印されています。この数値
のバージョンは、ディスク上のリポジトリデータを操作するためのルールを指定
します。 ディスク上のリポジトリから告知された特定のバージョンを理解しな
いgitの実装は、そのリポジトリで動作してはなりません。それを動作させと、
間違った結果を生み出すだけでなく、実際にデータを失うリスクがあります。

   このルールのため、バージョンアップは最小限に抑える必要があります。代
わりに、我々は一般的に以下の戦略を好みます:

   • 個々のデータファイル(インデックス、パックファイルなど)のフォーマッ
     トバージョン番号をバージョンアップします。これにより、非互換性がそ
     れらのファイルのみに制限されます。

   • 古いクライアントで使用すると正常に機能制限される(gracefully
     degrade)新しいデータを導入します(たとえば、パックビットマップファイ
     ルは古いクライアントでは無視され、提供される最適化を利用しません)。

   リポジトリ全体の形式のバージョンアップは、個別にバージョン管理できな
い部分だけにするべきです。たとえば、オブジェクトの到達可能性ルール、また
はrefをロックするためのルールを変更する場合、リポジトリ形式バージョンの
バージョンアップが必要になります。

   注意: これは、リポジトリのディスクコンテンツに直接アクセスする場合に
のみ適用されることに注意してください。 フォーマット ‘0’ のみを理解する古
いクライアントは、サーバープロセスがフォーマット ‘1’ を理解している限り
、フォーマット ‘1’ を使用して ‘git://’ を介してリポジトリに接続できます
。

   バージョンアップをお披露目するための推奨される戦略(リポジトリ全体また
は単一ファイル)は、gitに新しい形式を読み取るように教え、(実験用または古
いgitとの下位互換性については気にしないでいいように)構成スイッチまたはコ
マンドラインオプションを使用して新しい形式を記述できるようにすることです
。その後、読み取り機能が一般的になるまでの長い期間の後、デフォルトを新し
い形式の書き込みに切り替える場合があります。

   現在定義されているフォーマットバージョンは以下のとおりです:


Version 0
=========

これは、gitの初期バージョンで定義されている形式であり、リポジトリディレ
クトリ、リポジトリ構成ファイル、オブジェクトおよびrefストレージの形式が
含まれま すが、これらに限定されません。gitの完全な動作を記述することは、
このドキュメントの役割ではありません。


Version 1
=========

この形式は、以下の例外を除いて、バージョン ‘0‘と同じです:

  1. ‘core.repositoryformatversion’ 変数を読み取る場合、バージョン1をサ
     ポートするgit実装は、構成ファイルの ‘extensions’ セクションにある構
     成キーも読み取る必要があります。

  2. バージョン1リポジトリが、実行中のgitが実装していない ‘extensions.*’
     キーを指定している場合、操作の続行は禁止です。同様に、既知のキーの
     値が実装によって理解されない場合、操作の続行は禁止です。

   注意: 設定ファイルに拡張機能(extension)の指定が無い場合は、
‘core.repositoryformatversion’ を ‘0’ に設定する必要があります(‘1‘に設定
してもメリットはなく、リポジトリはgitの古い実装と互換性がなくなります)。

   このドキュメントは、拡張機能のマスターリストとして機能します。新しい
拡張機能を定義したい実装は、名前を主張するために、ここにそれを書き留めて
おく必要があります。

   定義されている拡張機能は以下のとおりです:


noop
----

この拡張機能は、gitの動作をまったく変更しません。 これは、フォーマット
1の互換性をテストする場合にのみ役立ちます。


preciousObjects
---------------

設定キー ‘extensions.preciousObjects’ が ‘true’ に設定されている場合、リ
ポジトリ内のオブジェクトを削除してはなりません(たとえば、 ‘git-prune’ ま
たは ‘git repack -d’ など)。


partialclone
------------

設定キー ‘extensions.partialclone’ が設定されている場合、リポジトリが部
分クローンで作成された(または後で部分フェッチを実行した)こと、およびリモ
ートが特定の不要なオブジェクトの送信を省略した可能性があることを示します
。 このようなリモートはpromisor remoteと呼ばれ、将来、このような省略され
たオブジェクトをすべてフェッチできることを約束します。

   このキーの値は、promisor remoteの名前です。


worktreeConfig
--------------

設定されている場合、デフォルトでは、「git config」はGIT_DIRの「config」
ファイルと「config.worktree」ファイルの両方からこの順序で読み取ります。
複数の作業ディレクトリモードでは、「config.worktree」が作業ディレクトリ
ごとにある間（つまり、 GIT_COMMON_DIR/worktrees/<id>/config.worktree に
あります)、「config」ファイルは共有されます。


SEE ALSO
********

git-init(1), git-clone(1), git-fetch(1), git-pack-refs(1), git-gc(1),
git-checkout(1), gitglossary(7), The Git User’s Manual
(user-manual.html)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: gitrevisions,  Up: Top

Name
****

gitrevisions — Gitのリビジョンと範囲を指定する


Synopsis
********

gitrevisions


DESCRIPTION
***********

多くのGitコマンドは、リビジョンパラメーターを引数として取ります。コマン
ドに応じて、特定のコミットを示します。リビジョングラフをたどるコマンド
(git-log(1) など)の場合は、そのコミットから到達可能なすべてのコミットを
示します。リビジョングラフをたどるコマンドの場合、リビジョンの範囲を明示
的に指定することもできます。

   さらに、一部のGitコマンド(git-show(1) や git-push(1) など)は、コミッ
ト以外のオブジェクトを示すリビジョンパラメーターを受け取ることもできます
。例えば、ブロブ(ファイル)またはツリー(ファイルのディレクトリ)です。


SPECIFYING REVISIONS
********************

リビジョンパラメータ ‘<rev>’ は必ずしもそうとは限りませんが、通常はコミ
ットオブジェクトに名前を付けます。これは、いわゆる「拡張SHA-1」構文を使
用します。 オブジェクト名を綴るにはさまざまな方法があります。このリスト
の終わり近くにリストされているものは、コミットに含まれているツリーとブロ
ブに名前を付けています。

     *Note*

     この文書は、gitで見られる「生の」構文を示しています。シェルおよびそ
     の他のUIでは、特殊文字を保護し、単語の分割を回避するために、追加の
     引用符が必要になる場合があります。

‘<sha1>’ 例: ‘dae86e1950b1277e545cee180551750029cfe735’, ‘dae86e’
     完全なSHA-1オブジェクト名(40バイトの16進文字列)、またはリポジトリ内
     で一意の先頭のsubstring。例えば
     dae86e1950b1277e545cee180551750029cfe735 と dae86e はどちらも、リポ
     ジトリ内にオブジェクト名が dae86e で始まる他のオブジェクトがない場
     合、全く同じコミットオブジェクトに名前を付けます。

‘<describeOutput>’ 例: ‘v1.7.4.2-679-g3bee7fb’
     ‘git describe’ からの出力。つまり、現在のコミットから最も近いタグ。
     オプションで、ダッシュ(-)とそのタグ以降現在のコミットが何番目になる
     かの数が続き、その後にダッシュ(-)、「g」、および省略されたオブジェ
     クト名が続きます。

‘<refname>’ 例: ‘master’, ‘heads/master’, ‘refs/heads/master’
     シンボリックref名。例えば ‘master’ は通常、 ‘refs/heads/master’ に
     よって参照されるコミットオブジェクトを意味します。 ‘heads/master’ と
     ‘tags/master’ の両方がある場合は、あなたは ‘heads/master’ と明示的
     に指定して、どちらを意味するかをGitに伝えることができます。 あいま
     いな場合、 ‘<refname>’ は、以下のルールに従い最初の一致を採用ことで
     明確になります:

       1. もし ‘$GIT_DIR/<refname>’ が存在するならば、それはあなたが指定
          した通りのものです(これは通常、‘HEAD’ と ‘FETCH_HEAD’ と
          ‘ORIG_HEAD’ と ‘MERGE_HEAD’ と ‘CHERRY_PICK_HEAD’ のみで役に立
          ちます)

       2. でなければ ‘refs/<refname>’ が存在すればそれを採用します。

       3. でなければ ‘refs/tags/<refname>’ が存在すればそれを採用します
          。

       4. でなければ ‘refs/heads/<refname>’ が存在すればそれを採用します
          。

       5. でなければ ‘refs/remotes/<refname>’ が存在すればそれを採用しま
          す。

       6. でなければ ‘refs/remotes/<refname>/HEAD’ が存在すればそれを採
          用します。

          ‘HEAD’ は、作業ツリーの変更に基づいたコミットに名前を付けます
          。 ‘FETCH_HEAD’ は、最後の ‘git fetch’ 呼び出しでリモートリポ
          ジトリからフェッチしたブランチを記録します。 ‘ORIG_HEAD’ は、
          ‘HEAD’ を大幅に移動するコマンドによって作成され、操作前の
          ‘HEAD’ の位置を記録します。これにより、ブランチの先端を実行前
          の状態に簡単に戻すことができます。 ‘MERGE_HEAD’ は、 ‘git
          merge`を実行するときにブランチにマージするコミットを記録します
          。 `CHERRY_PICK_HEAD’ は、 ‘git cherry-pick’ を実行したときに
          チェリーピックしているコミットを記録します。

          注意: 上記の ‘refs/*’ の場合、 ‘$GIT_DIR/refs’ ディレクトリま
          たは ‘$GIT_DIR/packed-refs’ ファイルのいずれかから発生する可能
          性があることに注意してください。ref名のエンコードは指定されて
          いませんが、一部の出力処理ではUTF-8でref名を想定する場合がある
          ため、UTF-8が推奨されます。

‘@’
     ‘@’ 単独では ‘HEAD’ のショートカットを意味します。

‘[<refname>]@{<date>}’ 例: ‘master@\{yesterday\}’, ‘HEAD@{5 minutes ago}’
     refの後に接尾辞 ‘@’ が続き、日付指定が中括弧のペアで囲まれています
     (例: ‘\{yesterday\}’ 、 ‘{1 month 2 weeks 3 days 1 hour 1 second
     ago}’ 、‘{1979-02-26 18:30:00}’ )。これは以前の時点でのrefの値を指
     定します。この接尾辞は、ref名の直後にのみ使用でき、refには既存のロ
     グ( ‘$GIT_DIR/logs/<ref>’ )が必要です。これは、特定の時点での *ロー
     カル* refの状態を検索することに注意してください。たとえば、先週ロー
     カルの ‘master’ ブランチに何があったか、です。特定の時間に行われた
     コミットを確認する場合は、 ‘--since’ と ‘--until’ を参照してくださ
     い。

‘<refname>@{<n>}’ 例: ‘master@\{1\}’
     refの後に接尾辞 ‘@’ が続き、数の指定が中括弧のペアで囲まれている場
     合(たとえば ‘\{1\}’, ‘\{15\}’)、そのrefのn個前の値を指定します。た
     とえば ‘master@\{1\}’ は ‘master’ の直前の値であり、 ‘master@\{5\}’
     は ‘master’ の5個前の値です。この接頭辞は、ref名の直後にのみ使用で
     き、refには既存のログ( ‘$GIT_DIR/logs/<refname>’ )が必要です。

‘@{<n>}’ 例: ‘@\{1\}’
     空のref部分で ‘@’ コンストラクトを使用して、現在のブランチの
     reflogエントリを取得できます。たとえば、あなたがブランチ ‘blabla’ を
     使用している場合、 ‘@\{1\}’ は ‘blabla@\{1\}’ と同じ意味になります
     。

‘@{-<n>}’ 例: ‘@{-1}’
     構成 ‘@{-<n>}’ は、現在のブランチ/コミットの前にチェックアウトされ
     た<n>番目のブランチ/コミットを意味します。

_[<branchname>]@{upstream}_ 例: _master@{upstream}_, _@{u}_
     ブランチ名の接尾辞 _@{upstream}_ (短縮形 _<branchname>@{u}_)は、
     branchnameで指定されたブランチの上部に構築するように設定されている
     ブランチを指します(‘branch.<name>.remote’ と ‘branch.<name>.merge’
     によって設定されます)。ブランチ名が欠落してい場合は、デフォルトで現
     在のブランチ名になります。これらの接尾辞は、大文字で綴る場合にも受
     け入れられ、大文字と小文字を問わず同じ意味になります。

_[<branchname>]@{push}_ 例: _master@{push}_, _@{push}_
     接尾辞 _@{push}_ は、 ‘branchname’ がチェックアウトされているときに
     ‘git push’ が実行された場合(またはブランチ名が指定されていない場合
     は現在の ‘HEAD’ )、「プッシュ先」のブランチを報告します。もちろん、
     プッシュ先はリモートリポジトリにあるため、そのブランチに対応するロ
     ーカルトラッキングブランチ(つまり、 ‘refs/remotes/’ 内の何か)を報告
     します。

     ここで、よりはっきり分かる例を以下に示します:

          $ git config push.default current
          $ git config remote.pushdefault myfork
          $ git switch -c mybranch origin/master

          $ git rev-parse --symbolic-full-name @{upstream}
          refs/remotes/origin/master

          $ git rev-parse --symbolic-full-name @{push}
          refs/remotes/myfork/mybranch

     注意: この例では、ある場所からプルして別の場所にプッシュする三角形
     のワークフローを設定していることに注意してください。非三角形のワー
     クフローでは、 _@{push}_ は _@{upstream}_ と同じであり、このような
     ことをする必要はありません。

     この接尾辞は大文字で綴る場合にも受け入れられ、大文字と小文字を問わ
     ず同じことを意味します。

_<rev>^[<n>]_ 例: _HEAD^, v1.5.1^0_
     リビジョンパラメータの接尾辞 _^_ は、そのコミットオブジェクトの最初
     の親を意味します。 _^<n>_ は <n> 番目の親を意味します(つまり、
     _<rev>^_ は _<rev>^1_ と同じです)。特別ルールとして、 _<rev>^0_ は
     コミット自体を意味し、 _<rev>_ がコミットオブジェクトを参照するタグ
     オブジェクトのオブジェクト名である場合に使用されます。

_<rev>~[<n>]_ 例: _HEAD~, master~3_
     リビジョンパラメータの接尾辞 _~_ は、そのコミットオブジェクトの最初
     の親を意味します。リビジョンパラメータの接尾辞 _~<n>_ は、最初の親
     のみに続く、指定されたコミットオブジェクトの <n> 世代の祖先であるコ
     ミットオブジェクトを意味します。つまり、 _<rev>~3_ は _<rev>^^^_ と
     同じで、するってぇと _<rev>^1^1^1_ と同じということです。この形式に
     ついては以下の図を参照してください。

_<rev>^{<type>}_ 例: _v0.99.8^{commit}_
     接尾辞 _^_ の後に中括弧のペアで囲まれたオブジェクトタイプ名が続くと
     いうことは、タイプ _<type>_ のオブジェクトが見つかるか、オブジェク
     トを逆参照できなくなるまで、 _<rev>_ でオブジェクトを再帰的に逆参照
     する(この場合は、いろいろ一旦飲み込んでしまったのを吐きもどすような
     感じだぬ)ことを意味します。 たとえば、 _<rev>_ がコミットっぽい場合
     、 _<rev>^{commit}_ は対応するコミットオブジェクトを記述します。同
     様に、 _<rev>_ がツリーっぽい場合、 _<rev>^{tree}_ は対応するツリー
     オブジェクトを記述します。 _<rev>^0_ は _<rev>^{commit}_ の省略形で
     す。

     _<rev>^{object}_ を使用すると、 _<rev>_ がタグである必要がなく、
     _<rev>_ を逆参照することなく、 _<rev>_ が存在するオブジェクトに名前
     を付けることができます。なお、タグはすでにオブジェクトであるため、
     オブジェクトに到達するために一度も逆参照する必要はありません。

     _<rev>^{tag}_ を使用して、 _<rev>_ が既存のタグオブジェクトを確実に
     識別することができます。

_<rev>^{}_ 例: _v0.99.8^{}_
     接尾辞 _^_ の後に空のブレースペアが続くということは、オブジェクトが
     タグである可能性があることを意味し、タグ以外のオブジェクトが見つか
     るまでタグを再帰的に逆参照します。

_<rev>^{/<text>}_ 例: _HEAD^{/fix nasty bug}_
     リビジョンパラメータの接尾辞 _^_ と、それに続くスラッシュで始まるテ
     キストを含む中括弧のペアは、以下の _:/fix nasty bug_ 構文と同じです
     が、 _^_ の前の _<rev>_ から到達可能な一致する最も若いコミットを返
     す点が異なります。

_:/<text>_ 例: _:/fix nasty bug_
     コロンに続いてスラッシュそしてそれに続くテキストは、コミットメッセ
     ージが指定された正規表現と一致するコミットを示します。この名前は、
     HEADを含む任意のrefから到達可能な最も若い一致するコミットを返します
     。正規表現は、コミットメッセージの任意の部分に一致できます。文字列
     で始まるメッセージを照合するには、たとえば、 _:/^foo_ とします。特
     別なシーケンス _:/!_ はマッチングの修飾子用に予約されています。ます
     。 _:/!-foo_ は一致の否定を実行し、 _:/!!foo_ はリテラル _!_ 後に
     _foo_ が続く文字列とマッチします。 _:/!_ で始まるその他のシーケンス
     は今のところ予約されています。指定されたテキストによっては、シェル
     により追加の引用符が必要になる場合があります。

_<rev>:<path>_ 例: _HEAD:README_, _master:./README_
     接尾辞 _:_ の後にパス(path)を続けると、コロンの前の部分によって名前
     が付けられたツリー風のオブジェクト内の、指定されたパスにあるブロブ
     またはツリーに名前が付けられます。 _./_ または _../_ で始まるパスは
     、現在の作業ディレクトリからの相対パスです。指定のパスは、作業ツリ
     ーのルートディレクトリからの相対パスに変換されます。これは、作業ツ
     リーと同じツリー構造を持つコミットまたはツリーからブロブまたはツリ
     ーをアドレス指定するのに最も役立ちます。

_:[<n>:]<path>_ 例: _:0:README_, _:README_
     コロンに、オプションでステージ番号(0〜3)とコロンが続き、それにパス
     が続くと、指定されたパスのインデックス内のブロブオブジェクトに名前
     を付けます。ステージ番号省略(およびそれに続くコロン)は、ステージ0エ
     ントリーを示します。マージ作業中、ステージ1は共通の祖先、ステージ
     2はターゲットブランチのバージョン(通常は現在のブランチ)、ステージ
     3はマージされるブランチのバージョンです。

   以下はJon Loeligerによる図解です。コミットノードBとCはどちらもコミッ
トノードAの親です。親コミットは左から右に順序付けられます。

     G   H   I   J
      \ /     \ /
       D   E   F
        \  |  / \
         \ | /   |
          \|/    |
           B     C
            \   /
             \ /
              A

     A =      = A^0
     B = A^   = A^1     = A~1
     C =      = A^2
     D = A^^  = A^1^1   = A~2
     E = B^2  = A^^2
     F = B^3  = A^^3
     G = A^^^ = A^1^1^1 = A~3
     H = D^2  = B^^2    = A^^^2  = A~2^2
     I = F^   = B^3^    = A^^3^
     J = F^2  = B^3^2   = A^^3^2


SPECIFYING RANGES
*****************

‘git log’ などの履歴トラバースコマンドは、単一のコミットだけでなく、一連
のコミットで動作します。

   これらのコマンドの場合、前のセクションで説明した表記法を使用して単一
のリビジョンを指定することは、指定のコミットから「到達可能」なコミットの
組を意味します。

   複数のリビジョンを指定するということは、指定のコミットのいずれかから
到達可能なコミットの組を意味します。

   コミットの到達可能な組は、コミット自体とその祖先チェーン内のコミット
です。

   以下に示すように、接続されたコミット(connected commits)の組(「リビジ
ョン範囲」(revision range)と呼ばれる)を指定するためのいくつかの表記法が
あります。


Commit Exclusions
=================

_^<rev>_ (カレット)記法
     とある到達可能なコミットをコミット達から除外するには、接頭辞 _^_ 表
     記を使用します。 例えば _^r1 r2_ は _r2_ から到達可能なコミットだけ
     ども、 _r1_ から到達可能なコミット(つまり _r1_ とその祖先)は除外す
     る事を意味します。


Dotted Range Notations
======================

_.._ (2ドット)範囲記法
     _^r1 r2_ 操作は頻繁に表示されるため、省略形があります。(上記の
     SPECIFYING REVISIONS で説明されている構文に従って名前が付けられてい
     る)2つのコミット _r1_ と _r2_ がある場合、あなたは _^r1 r2_ によっ
     てr1から到達可能なコミットを取り除き、r2から到達可能なコミットを要
     求できます。そしてこれは _r1..r2_ と書くことができます。

_..._ (3ドット)対称差記法
     似た表記 _r1...r2_ は _r1_ と _r2_ の対称差と呼ばれ、 _r1 r2 –not
     $(git merge-base –all r1 r2)_ として定義されます。 これは、 _r1_ (左
     側)または _r2_ (右側)のいずれかから到達可能であるが、両方からは到達
     できないコミットの組です。

   これらの2つの省略表記では、一方の端を省略して、デフォルトでHEADにする
ことができます。たとえば、 _origin.._ は _origin..HEAD_ の省略形であり、
「originブランチから分岐(fork)してから何をしましたか？」と尋ねます。 同
様に、 _..origin_ は _HEAD..origin_ の省略形であり、「私がそれらから分岐
してから、originは何をしましたか？」と尋ねます。 _.._ は _HEAD..HEAD_ を
意味することに注意してください。これは、HEADから到達可能および到達不能の
両方の空の範囲です。

   2つの異なる範囲を取るように特別に設計されたコマンド(たとえば、2つの範
囲を比較するための "git range-diff R1 R2" ) は存在しますが、それらは例外
です。特に明記されていない限り、一連のコミットを操作するすべての "git" コ
マンドは、単一のリビジョン範囲で機能します。言い換えると、2つの「2ドット
範囲表記」を隣り合わせに記述します。

     $ git log A..B C..D

   ほとんどのコマンドでは2つのリビジョン範囲を指定しません。代わりに、接
続された単一のコミットの組、つまりBまたはDのいずれかから到達可能であるが
、AまたはCのどちらからも到達可能でないコミットの組に名前を付けます。線形
履歴では、以下のようになります:

     ---A---B---o---o---C---D

   AとBはCから到達可能であるため、これら2つの2ドット範囲記法で指定された
リビジョン範囲は単一のコミットDです。


Other <rev>^ Parent Shorthand Notations
=======================================

コミットとその親コミットによって形成される組に名前を付けるために、マージ
コミットに特に役立つ他の3つの省略形が存在します。

   ‘r1{caret}@’ 表記は、 ‘r1’ のすべての親を意味します。

   ‘r1{caret}!’ 表記には コミット ‘r1’ が含まれますが、そのすべての親は
除外されます。この表記自体は、単一のコミット ‘r1’ を示します。

   ‘<rev>{caret}-[<n>]’ 表記には ‘<rev>’ が含まれますが、 <n> 番目の親
(つまり、 ‘<rev>{caret}<n>..<rev>’ の省略形)は除外されます。 <n> が指定
されていない場合は ‘<n>’ = 1 とみなします。これは通常、
‘<commit>{caret}-’ を渡すだけで、マージコミット ‘<commit>’(‘<commit>’ 自
体を含む)でマージされたブランチ内のすべてのコミットを取得できるマージコ
ミットに役立ちます。

   ‘<rev>{caret}<n>’ は単一のコミット親を指定することに関するものでした
が、これらの3つの表記はその親も考慮します。たとえば、
‘HEAD{caret}2{caret}@’ と言うことはできますが、 ‘HEAD{caret}@{caret}2’ と
言うことはできません。


Revision Range Summary
**********************

‘<rev>’
     <rev> から到達可能なコミット(つまり <rev> とその祖先)を含めます。

‘{caret}<rev>’
     <rev> から到達可能なコミット(つまり <rev> とその祖先)を除外します。

‘<rev1>..<rev2>’
     <rev2> から到達可能なコミットを含めますが、 <rev1> から到達可能なコ
     ミットは除外します。 <rev1> または <rev2> のいずれかを省略すると、
     それらはそれぞれデフォルトで ‘HEAD’ になります。

‘<rev1>\...<rev2>’
     <rev1> または <rev2> のいずれかから到達可能なコミットを含めますが、
     両方から到達可能なコミットは除外します。 <rev1> または <rev2> のい
     ずれかを省略すると、それらはそれぞれデフォルトで ‘HEAD’ になります
     。

‘<rev>{caret}@’ 例: ‘HEAD{caret}@’
     接尾辞 ‘{caret}’ の後にアットマーク(‘@’)を付けることは、 ‘<rev>’ の
     すべての親をリストすることと同じです(つまり、親から到達可能なものは
     すべて含まれますが、コミット自体は含まれません)。

‘<rev>{caret}!’ 例: ‘HEAD{caret}!’
     接尾辞 ‘{caret}’ の後に感嘆符(‘!’)を付けることは、コミット ‘<rev>’
     を指定し、そのすべての親の前に ‘{caret}’ を付けてそれら(およびその
     祖先)を除外することと同じです。

‘<rev>{caret}-<n>’ 例: ‘HEAD{caret}-, HEAD{caret}-2’
     ‘<rev>{caret}<n>..<rev>’ と同等であり、 ‘<n>’ が指定されていない場
     合は ‘<n>’ = 1 です。

   上記のLoeliger図解を使用したいくつかの例を以下に示します。表記の拡張
と選択は、それぞれ段階が分かるようステップを踏んで説明してあります:

        Args   Expanded arguments    Selected commits
        D                            G H D
        D F                          G H I J D F
        ^G D                         H D
        ^D B                         E I J F B
        ^D B C                       E I J F B C
        C                            I J F C
        B..C   = ^B C                C
        B...C  = B ^F C              G H D E B C
        B^-    = B^..B
               = ^B^1 B              E I J F B
        C^@    = C^1
               = F                   I J F
        B^@    = B^1 B^2 B^3
               = D E F               D G H E F I J
        C^!    = C ^C^@
               = C ^C^1
               = C ^F                C
        B^!    = B ^B^@
               = B ^B^1 ^B^2 ^B^3
               = B ^D ^E ^F          B
        F^! D  = F ^I ^J D           G H D F


SEE ALSO
********

git-rev-parse(1)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: gitsubmodules,  Up: Top

Name
****

gitsubmodules — あるリポジトリを別のリポジトリ内にマウントする


Synopsis
********

     .gitmodules, $GIT_DIR/config

     git submodule
     git <command> --recurse-submodules


DESCRIPTION
***********

サブモジュール(submodule)は、別のリポジトリ内に埋め込まれたリポジトリで
す。サブモジュールにはサブモジュール独自の履歴があります。 それが埋め込
まれているリポジトリはスーパープロジェクト(superproject)と呼ばれます。

   ファイルシステムでは、サブモジュールは通常(常にではありませんが。以下
のFORMSを参照)、(i)スーパープロジェクトの ‘$GIT_DIR/modules/’ ディレクト
リの下にあるGitディレクトリや、(ii)スーパープロジェクトの作業ディレクト
リ内の作業ディレクトリや、(i)の指すサブモジュールの作業ディレクトリのル
ートにある ‘.git’ ファイルで構成されます。

   サブモジュールのGitディレクトリが ‘$GIT_DIR/modules/foo/’ にあり、作
業ディレクトリが ‘path/to/bar/’ にあるとすると、スーパープロジェクトは、
ツリーの ‘path/to/bar’ にある ‘gitlink’ エントリと、‘submodule.foo.path
= path/to/bar’ 形式の ‘.gitmodules’ ファイル(linkgit: gitmodules[5] を参
照)のエントリを介してサブモジュールを追跡します。

   ‘gitlink’ エントリには、スーパープロジェクトがサブモジュールの作業デ
ィレクトリにあると予想するコミットのオブジェクト名が含まれています。

   ‘.gitmodules’ ファイルのセクション ‘submodule.foo.*’ は、Gitの磁器レ
イヤーに追加のヒントを提供します。 たとえば、 ‘submodule.foo.url’ 設定は
、サブモジュールを取得する場所を指定します。

   サブモジュールは、少なくとも2つの異なるユースケースに使用できます:

  1. 独立した履歴を維持しながら別のプロジェクトを使用。サブモジュールを
     使用すると、両方のプロジェクトの履歴を分離したまま、あなた独自の作
     業ツリー内に別のプロジェクトの作業ツリーを含めることができます。ま
     た、サブモジュールは任意のバージョンに固定できるため、別のプロジェ
     クトは、スーパープロジェクトに影響を与えることなく独立して開発でき
     、スーパープロジェクトプロジェクトが必要とした場合にのみ別プロジェ
     クトを新しいバージョンに固定できます。

  2. (論理的に単一の)プロジェクトを複数のリポジトリに分割し、それらを結
     び付けます。これを使用して、Gitの実装の現在の制限を克服し、よりきめ
     細かいアクセスを実現できます:

     Gitリポジトリのサイズ
          現在の形式では、 Gitは、ツリー間のデルタ計算によって圧縮されて
          いないコンテンツを含む大規模なリポジトリではスケールアップが十
          分にできません。 たとえば、あなたはサブモジュールを使用して大
          きなバイナリアセットを保持し、 これらのリポジトリを浅く複製し
          て、 ローカルに大きな履歴がないようにすることができます。

     転送サイズ
          現在の形式では、Gitは作業ツリー全体が存在する必要があります。
          部分的なツリーをフェッチまたはクローンで転送することはできませ
          ん。 あなたが作業しているプロジェクトが、 スーパープロジェクト
          のサブモジュールとして結合された複数のリポジトリで構成されてい
          る場合は、 関心のないリポジトリの作業ツリーをフェッチすること
          を回避できます。

     アクセス制御
          サブモジュールへのユーザーアクセスを制限することにより、 さま
          ざまなユーザーの読み取り/書き込みポリシーを実装できます。


The configuration of submodules
*******************************

サブモジュール操作は、以下のメカニズムを使用して構成(configure)できます
(優先順位の高い順です):

   • パススペックの一部としてサブモジュールを使用することをサポートする
     コマンドのコマンドライン。 ほとんどのコマンドには、サブモジュールに
     再帰するかどうかを指定するブールフラグ ‘--recurse-submodules’ があ
     ります。 例としては、 ‘grep’ や ‘checkout’ があります。 ‘fetch’ や
     ‘push’ などの一部のコマンドは、サブモジュールがどのように影響を受け
     るかを指定できる列挙型を取ります。

   • サブモジュール内の構成。 これには、サブモジュール内の
     ‘$GIT_DIR/config’ だけでなく、サブモジュール内のコマンドの動作を指
     定する ‘.gitattributes’ または ‘.gitignore’ ファイルなどのツリー内
     の設定も含まれます。

     たとえば、スーパープロジェクトで ‘git status
     --ignore-submodules=none’ を実行すると、サブモジュールの
     ‘.gitignore’ ファイルの効果が確認できます。これは、サブモジュールの
     ‘.gitignore’ ファイルに注意を払いながらサブモジュールで ‘status’ を
     実行することにより、サブモジュールの作業ディレクトリから情報を収集
     します。

     サブモジュールの ‘$GIT_DIR/config’ ファイルは、スーパープロジェクト
     で ‘git push --recurse-submodules=check’ を実行すると機能します。こ
     れは、サブモジュールにリモートに公開されていない変更があるかどうか
     をチェックするためです。リモートは、通常どおりサブモジュールの
     ‘$GIT_DIR/config’ ファイルで構成されます。

   • スーパープロジェクトの構成ファイル ‘$GIT_DIR/config’ 。Gitはアクテ
     ィブなサブモジュールのみ再帰します(以下の「ACTIVE SUBMODULES」セク
     ションを参照)。

     サブモジュールがまだ初期化されていない場合、サブモジュール内の構成
     (configuration)はまだ存在しないため、たとえば、サブモジュールを取得
     する場所はここで構成されます。

   • スーパープロジェクト内の ‘.gitmodules’ ファイル。プロジェクトは通常
     、このファイルを使用して、サブモジュールの名前とパスの間に必要なマ
     ッピングについて、上流のリポジトリコレクションのデフォルトを提案し
     ます。

     このファイルは主に、スーパープロジェクト内のサブモジュールの名前と
     パスの間のマッピングとして機能し、サブモジュールのGitディレクトリを
     見つけることができます。

     サブモジュールが初期化されていない場合、これはサブモジュール構成が
     見つかる唯一の場所です。 これは、サブモジュールを取得する場所を指定
     するための最後のフォールバックとして機能します。


FORMS
*****

サブモジュールは以下の形式をとることができます:

   DESCRIPTIONで説明されている、Gitディレクトリと、作業ディレクトリと、
‘gitlink’ と、 ‘.gitmodules‘エントリ、を含む基本形式。

   「古い形式」のサブモジュール: ‘.git’ ディレクトリが埋め込まれた作業デ
ィレクトリと、スーパープロジェクトの ‘gitlink’ および ‘.gitmodules’ エン
トリの追跡。 これは通常、古いバージョンのGitを使用して生成されたリポジト
リにあります。

   + これらの古い形式のリポジトリを手動で構築することは可能です。

   + 非初期化(deinitialized)または削除されると(以下を参照)、サブモジュー
ルのGitディレクトリはスーパープロジェクトの ‘$GIT_DIR/modules/<name>/’ に
自動的に移動されます。

   非初期化された(deinitialized)サブモジュール: ‘gitlink’ と
‘.gitmodules’ エントリがありますが、サブモジュールの作業ディレクトリはあ
りません。サブモジュールのGitディレクトリは、Gitディレクトリを初期化解除
した後も保持されているため、そこにある可能性があります。 代わりに、作業
ディレクトリであるはずのディレクトリが空になります。

   + サブモジュールは、 ‘git submodule deinit’ を実行することで非初期化
(deinitialized)できます。このコマンドは、作業ディレクトリを空にするだけ
でなく、スーパープロジェクトの ‘$GIT_DIR/config’ ファイルのみを変更する
ため、スーパープロジェクトの履歴は影響を受けません。 これは、 ‘git
submodule init’ を使用して元に戻すことができます。

   削除されたサブモジュール: サブモジュールは、 ‘git rm <submodule path>
&& git commit’ を実行することで削除できます。これは、 ‘git revert’ を使
用して元に戻すことができます。

   + 削除すると、スーパープロジェクトの追跡データが削除されます。これは
、 ‘gitlink’ エントリと ‘.gitmodules’ ファイルのセクションの両方です。サ
ブモジュールの作業ディレクトリはファイルシステムから削除されますが、
Gitディレクトリは、別のリポジトリからフェッチすることなく過去のコミット
をチェックアウトできるようにするために保持されます。

   + サブモジュールを完全に削除するには、手動で
‘$GIT_DIR/modules/<name>/’ を削除します。


ACTIVE SUBMODULES
*****************

サブモジュールがアクティブと見なされるには、

  1. if ‘submodule.<name>.active’ が ‘true’ に設定されている

     or

  2. if サブモジュールのパスが ‘submodule.active’ のパススペックと一致す
     る

     or

  3. if ‘submodule.<name>.url’ が設定されている

   これらは上記の順序で評価されます。

   例:

       [submodule "foo"]
         active = false
         url = https://example.org/foo
       [submodule "bar"]
         active = true
         url = https://example.org/bar
       [submodule "baz"]
         url = https://example.org/baz

   上記の構成では、サブモジュール ‘bar’ と ‘baz’ のみがアクティブになり
ます。 ‘bar’ は上記(1)により、 ‘baz’ は上記(3)によりアクティブになります
。 (1)が(3)よりも優先されるため、 ‘foo’ は非アクティブです。

   上記(1)と(2)でサブモジュールがアクティブでないことを指定している場合
は、(3)は歴史的遺物であり、無視されることに注意してください。 つまり、
‘submodule.<name>.active’ が ‘false’ に設定されている場合、またはサブモ
ジュールのパスが ‘submodule.active’ のパススペックで除外されている場合、
URLは存在するかどうかは関係ありません。これを以下の例に示します。

       [submodule "foo"]
         active = true
         url = https://example.org/foo
       [submodule "bar"]
         url = https://example.org/bar
       [submodule "baz"]
         url = https://example.org/baz
       [submodule "bob"]
         ignore = true
       [submodule]
         active = b*
         active = :(exclude) baz

   ここでは、 baz を除くすべてのサブモジュール(foo、bar、bob)がアクティ
ブになっています。 foo はそれ自体のアクティブフラグによるものであり、他
のすべては submodule active パススペック によるものです。これは、 .url フ
ィールドの存在に関係なく、baz を除く _b_ で始まるすべてのサブモジュール
もアクティブであることを指定します。


Workflow for a third party library
**********************************

       # サブモジュールの追加
       git submodule add <url> <path>

       # ときどきサブモジュールを新しいバージョンに更新します:
       git -C <path> checkout <new version>
       git add <path>
       git commit -m "update submodule to new version"

       # スーパープロジェクト内でサブモジュールのリストを表示します
       git submodule status

       # サブモジュールの削除については、「FORMS」を参照してください


Workflow for an artificially split repo
***************************************

       # 関連するコマンドの再帰(recursion)を有効にし、
       # 対象のコマンドがデフォルトでサブモジュールで再帰処理するようにします
       git config --global submodule.recurse true

       # 他のほとんどのコマンドとは異なり、
       # cloneには独自の再帰フラグが必要です:
       git clone --recurse <URL> <directory>
       cd <directory>

       # (ソース)コードを知る為に取得する
       git grep foo
       git ls-files --recurse-submodules

     *Note*

     ‘git ls-files’ もまた、それ独自の ‘--recurse-submodules’ フラグが必
     要です。

       # 新しいコードを得る
       git fetch
       git pull --rebase

       # 作業ツリーの変更
       git checkout
       git reset


Implementation details
**********************

サブモジュールを含むリポジトリのクローンを作成またはプルする場合、デフォ
ルトではサブモジュールはチェックアウトされません。クローンにサブモジュー
ルに再帰するように指示できます。 ‘git submodule’ の ‘init’ および
‘update’ サブコマンドは、チェックアウトされたサブモジュールを維持し、作
業ツリーの適切なリビジョンに維持します。 または、 ‘submodule.recurse’ を
設定して ‘checkout’ をサブモジュールに再帰させることもできます(
‘submodule.recurse’ は他のGitコマンドにも影響することに注意してください
。完全なリストについてはgit-config(1) を参照してください)。


SEE ALSO
********

git-submodule(1), gitmodules(5).


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: gittutorial-2,  Up: Top

Name
****

gittutorial-2 — Git入門パート2


Synopsis
********

     git *


DESCRIPTION
***********

このGit入門パート2を読む前に、 gittutorial(7) (Git入門)を読んで下さい。

   この入門の目的は、Gitのアーキテクチャの2つの基本的な部分(オブジェクト
データベースとインデックスファイル)を紹介し、残りのGit文書を理解するため
に必要なすべてのものを読者に提供することです。


The Git object database
***********************

新しいプロジェクトを開始して、履歴を少々作成しましょう:

     $ mkdir test-project
     $ cd test-project
     $ git init
     Initialized empty Git repository in .git/
     $ echo 'hello world' > file.txt
     $ git add .
     $ git commit -a -m "initial commit"
     [master (root-commit) 54196cc] initial commit
      1 file changed, 1 insertion(+)
      create mode 100644 file.txt
     $ echo 'hello world!' >file.txt
     $ git commit -a -m "add emphasis"
     [master c4d59f3] add emphasis
      1 file changed, 1 insertion(+), 1 deletion(-)

   さて、ここで、Gitがコミットで返してきた7桁の16進数は一体何でしょうか
？

   入門のパート1で、コミットには名前が付いていることがわかりました。
Git履歴内のすべてのオブジェクトは、40桁の16進名で保存されていることがわ
かりました。その名前は、オブジェクトの内容のSHA-1ハッシュです。特に、こ
れにより、Gitが同じデータを2回保存することはなく(同一のデータには同一の
SHA-1名が付けられるため)、Gitオブジェクトの内容が変更されることはありま
せん(オブジェクトの名前も変更されるため)。ここでの7文字の16進文字列は、
このような40文字の長さの文字列の略語です。 略語は、明確である限り(訳注
:その環境で一意になる限り)、40文字の16進文字列を使用できるすべての場所で
使用できます。

   上記の例に従って作成したコミットオブジェクトのコンテンツは、コミット
オブジェクトが作成された時刻とコミットを実行した人の名前を記録するため、
上記とは異なるSHA-1ハッシュを生成することが期待されます。

   ‘cat-file’ コマンドを使用して、この特定のオブジェクトについてGitに問
い合わせることができます。上記の例から40桁の16進数をコピーするのではなく
、あなたの手元で実行したバージョンの16進数を使用してください。40桁すべて
の16進数を入力する手間を省くために、数文字に短縮できることに注目です:

     $ git cat-file -t 54196cc2
     commit
     $ git cat-file commit 54196cc2
     tree 92b8b694ffb1675e5975148e1121810081dbdffe
     author J. Bruce Fields <bfields@puzzle.fieldses.org> 1143414668 -0500
     committer J. Bruce Fields <bfields@puzzle.fieldses.org> 1143414668 -0500

     initial commit

   ツリーは、それぞれがファイルに対応する、1つ以上のブロブ(blob)オブジェ
クトを参照できます。さらに、ツリーは他のツリーオブジェクトを参照すること
もできるため、ディレクトリ階層が作成されます。 ls-tree を使用して任意の
ツリーの内容を調べることができます(その際、SHA-1の最初の部分を指定するだ
けで十分なことを忘れないでください)。

     $ git ls-tree 92b8b694
     100644 blob 3b18e512dba79e4c8300dd08aeb37f8e728b8dad    file.txt

   これで、このツリーには1つのファイルが含まれていることがわかります。
SHA-1ハッシュは、そのファイルのデータへの参照(reference)です:

     $ git cat-file -t 3b18e512
     blob

   「blob」は単なるファイルデータであり、cat-fileで調べることもできます:

     $ git cat-file blob 3b18e512
     hello world

   注意: これは古いファイルデータであることに注意してください。つまり、
Gitが最初のツリーに対する応答で名付けたオブジェクトは、最初のコミットで
記録されたディレクトリ状態のスナップショットを持つツリーです。

   これらのオブジェクトはすべて、Gitディレクトリ内部にSHA-1名で保存され
ます:

     $ find .git/objects/
     .git/objects/
     .git/objects/pack
     .git/objects/info
     .git/objects/3b
     .git/objects/3b/18e512dba79e4c8300dd08aeb37f8e728b8dad
     .git/objects/92
     .git/objects/92/b8b694ffb1675e5975148e1121810081dbdffe
     .git/objects/54
     .git/objects/54/196cc2703dc165cbd373a65a4dcf22d50ae7f7
     .git/objects/a0
     .git/objects/a0/423896973644771497bdc03eb99d5281615b51
     .git/objects/d0
     .git/objects/d0/492b368b66bdabf2ac1fd8c92b39d3db916e59
     .git/objects/c4
     .git/objects/c4/d59f390b9cfd4318117afde11d601c1085f241

   そして、これらのファイルの内容は、圧縮されたデータに加えて、ファイル
の長さとタイプを識別するヘッダーだけです。 タイプは、blob、tree、
commit、tag のいずれかです。

   見つけるのが最も簡単なコミットはHEADコミットで、これは .git/HEAD から
見つけることができます:

     $ cat .git/HEAD
     ref: refs/heads/master

   ご覧のとおり、これにより、現在どのブランチを使用しているかがわかりま
す。 ‘.git’ ディレクトリの下にあるファイルに名前を付ける事でこれを私達に
知らせます。このディレクトリ自体には、コミットオブジェクトを参照する
SHA-1名が含まれていて、 cat-file で調べることができます:

     $ cat .git/refs/heads/master
     c4d59f390b9cfd4318117afde11d601c1085f241
     $ git cat-file -t c4d59f39
     commit
     $ git cat-file commit c4d59f39
     tree d0492b368b66bdabf2ac1fd8c92b39d3db916e59
     parent 54196cc2703dc165cbd373a65a4dcf22d50ae7f7
     author J. Bruce Fields <bfields@puzzle.fieldses.org> 1143418702 -0500
     committer J. Bruce Fields <bfields@puzzle.fieldses.org> 1143418702 -0500

     add emphasis

   ここでの「tree」オブジェクトは、ツリーの新しい状態を指します:

     $ git ls-tree d0492b36
     100644 blob a0423896973644771497bdc03eb99d5281615b51    file.txt
     $ git cat-file blob a0423896
     hello world!

   そして「親」オブジェクトは前のコミットを参照します:

     $ git cat-file commit 54196cc2
     tree 92b8b694ffb1675e5975148e1121810081dbdffe
     author J. Bruce Fields <bfields@puzzle.fieldses.org> 1143414668 -0500
     committer J. Bruce Fields <bfields@puzzle.fieldses.org> 1143414668 -0500

     initial commit

   そのツリーオブジェクトは最初に調べたツリーであり、このコミットには親
がないという点でレアです。

   多くのコミットでは親が1つしかないですが、 複数の親を持つコミットも割
とあります。 その場合、コミットはマージを表し、 親参照はマージされたブラ
ンチのヘッドを指します。

   ブロブ・ツリー・コミット以外に残っているオブジェクトのタイプは「タグ
」だけです。これについてはここでは説明しません。 詳細については、
git-tag(1) を参照してください。

   これで、Gitがオブジェクトデータベースを使用してプロジェクトの履歴を表
す方法がわかりました:

   • 「コミット」オブジェクトは、履歴の特定のポイントでのディレクトリツ
     リーのスナップショットを表す「ツリー」オブジェクトを指し、「親」コ
     ミットを、プロジェクト履歴にどのように接続されているかを示すために
     参照します。

   • 「ツリー」オブジェクトは単一のディレクトリの状態を表し、ディレクト
     リ名をファイルデータを含む「ブロブ」オブジェクトとサブディレクトリ
     情報を含む「ツリー」オブジェクトに関連付けます。

   • 「ブロブ」オブジェクトには、他の構造でないファイルデータが含まれて
     います。

   • 各ブランチのヘッドにあるコミットオブジェクトへの参照は、
     .git/refs/heads/ の下のファイルに保存されます。

   • 現在のブランチの名前は .git/HEAD に保存されます。

   注意: ちなみに、多くのコマンドは引数としてツリーを使用することに注意
してください。 しかし、上で見ることができるように、ツリーは多くの異なる
方法(そのツリーのSHA-1名、そのツリーを参照するコミットの名前、そのツリー
を参照するヘッドを持つブランチの名前など)で参照できます。そのツリーの
SHA-1名、ツリーを参照するコミットの名前、ヘッドが参照するブランチの名前
そのツリーなどに-そしてそのようなコマンドのほとんどはこれらの名前のいず
れかを受け入れることができます。

   コマンドの概要では、「tree-ish」(ツリーっぽい)という単語がそのような
引数を示すために使用されることがあります。


The index file
**************

コミットを作成するために使用している主なツールは ‘git-commit -a’ です。
これは、作業ツリーに加えたすべての変更を含むコミットを作成します。しかし
、特定のファイルの変更のみをコミットしたい場合はどうでしょうか？ または
、特定のファイルの特定(一部の)の変更のみをコミットしたい場合はどうでしょ
うか？

   コミット作成の秘密を知れば、コミットを作成するより柔軟な方法があるこ
とがわかります。

   我々のテストプロジェクトを続けて、file.txt を再び変更しましょう:

     $ echo "hello world, again" >>file.txt

   しかし、今回はすぐにコミットするのではなく、中間のステップを踏んで、
何が起こっているかを追跡するために途中でdiffを要求しましょう:

     $ git diff
     --- a/file.txt
     +++ b/file.txt
     @@ -1 +1,2 @@
      hello world!
     +hello world, again
     $ git add file.txt
     $ git diff

   最後の差分は空ですが、新しいコミットは行われておらず、ヘッドにはまだ
新しい行が含まれていないからです:

     $ git diff HEAD
     diff --git a/file.txt b/file.txt
     index a042389..513feba 100644
     --- a/file.txt
     +++ b/file.txt
     @@ -1 +1,2 @@
      hello world!
     +hello world, again

   つまり、「git diff」はヘッド以外のものと比較しているのです。比較して
いるのは、実際にはインデックスファイルです。これはバイナリ形式で
.git/index に保存されていますが、その内容はls-filesで調べることができま
す:

     $ git ls-files --stage
     100644 513feba2e53ebbd2532419ded848ba19de88ba00 0       file.txt
     $ git cat-file -t 513feba2
     blob
     $ git cat-file blob 513feba2
     hello world!
     hello world, again

   したがって、「git add」が行ったことは、新しいブロブを格納し、それへの
参照をインデックスファイルに配置することでした。ファイルを再度変更すると
、新しい変更が「git diff」出力に反映されていることがわかります:

     $ echo 'again?' >>file.txt
     $ git diff
     index 513feba..ba3da7b 100644
     --- a/file.txt
     +++ b/file.txt
     @@ -1,2 +1,3 @@
      hello world!
      hello world, again
     +again?

   正しい引数を使用すると、 _git diff_ は、作業ディレクトリと最後のコミ
ットの違い、またはインデックスと最後のコミットの違いを示すこともできます
:

     $ git diff HEAD
     diff --git a/file.txt b/file.txt
     index a042389..ba3da7b 100644
     --- a/file.txt
     +++ b/file.txt
     @@ -1 +1,3 @@
      hello world!
     +hello world, again
     +again?
     $ git diff --cached
     diff --git a/file.txt b/file.txt
     index a042389..513feba 100644
     --- a/file.txt
     +++ b/file.txt
     @@ -1 +1,2 @@
      hello world!
     +hello world, again

   何度でも私達は「git commit」( ‘-a’ オプションなし）を使用して新しいコ
ミットを作成することができ、コミットされた状態にはインデックスファイルに
保存されている変更のみが含まれ、作業ツリーにのみ残っている追加の変更が含
まれていないことを確認できます:

     $ git commit -m "repeat"
     $ git diff HEAD
     diff --git a/file.txt b/file.txt
     index 513feba..ba3da7b 100644
     --- a/file.txt
     +++ b/file.txt
     @@ -1,2 +1,3 @@
      hello world!
      hello world, again
     +again?

   つまり、デフォルトでは、「git commit」は、作業ツリーではなく、インデ
ックスを使用してコミットを作成します。 コミットでの ‘-a’ オプションの指
定は、最初に作業ツリーのすべての変更をインデックスに反映するように指示し
ます。

   最後に、インデックスファイルに対する「git add」の効果を確認しておきま
しょう:

     $ echo "goodbye, world" >closing.txt
     $ git add closing.txt

   _git add_ の効果は、インデックスファイルに1つのエントリを追加すること
でした:

     $ git ls-files --stage
     100644 8b9743b20d4b15be3955fc8d5cd2b09cd2336138 0       closing.txt
     100644 513feba2e53ebbd2532419ded848ba19de88ba00 0       file.txt

   そして、 cat-file でわかるように、この新しいエントリはファイルの現在
の内容を参照しています:

     $ git cat-file blob 8b9743b2
     goodbye, world

   「status」コマンドは、状況の概要をすばやく取得するための便利な方法で
す:

     $ git status
     ブランチ master
     コミット予定の変更点:
       (use "git restore --staged <file>..." to unstage)

             new file:   closing.txt

     Changes not staged for commit:
       (use "git add <file>..." to update what will be committed)
       (use "git restore <file>..." to discard changes in working directory)

             modified:   file.txt

   closeing.txtの現在の状態はインデックスファイルにキャッシュされている
ため、「コミット予定の変更点」(Changes to be committed)としてリストされ
ます。 file.txtには、インデックスに反映されていない作業ディレクトリの変
更があるため、「Changes not staged for commit」とマークされています。 こ
の時点で、「git commit」を実行すると、（新しいコンテンツを含む
)closeing.txtが追加されたコミットが作成されますが、file.txtは変更されま
せんでした。

   また、裸の ‘git diff’ はfile.txtへの変更を示しますが、closeing.txtの
追加は示しません。これは、インデックスファイルのcloseing.txtのバージョン
が作業ディレクトリのバージョンと同じであるためです。

   インデックスファイルは、新しいコミットのステージング領域であることに
加えて、ブランチをチェックアウトするときにオブジェクトデータベースからも
入力され、マージ操作に関係するツリーを保持するためにも使用されます。詳細
については、 gitcore-tutorial(7) および関連するマニュアルページを参照し
てください。


What next?
**********

この期に及んでは、あなたはgitコマンドのマニュアルページを読むために必要
なすべてを知っている必要があります。それを始めるのに適した場所の1つは、
giteveryday(7) に記載されているコマンドを使用することです。また、あなた
は gitglossary(7) で不明な専門用語を調べる事もできます。

   Git User’s Manual (user-manual.html) は、Gitのより包括的な紹介を提供
します。

   gitcvs-migration(7) は、CVSリポジトリをGitにインポートする方法を説明
し、CVSのような方法でGitを使用する方法を示しています。

   Gitの使用に関する興味深い例については、 howtos (howto-index.html) を
参照してください。

   Git開発者向けに、 gitcore-tutorial(7) で、新しいコミットの作成などに
関連する低レベルのGitメカニズムについて詳しく説明しています。


SEE ALSO
********

gittutorial(7), gitcvs-migration(7), gitcore-tutorial(7),
gitglossary(7), git-help(1), giteveryday(7), The Git User’s Manual
(user-manual.html)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: gittutorial,  Up: Top

Name
****

gittutorial — Git入門


Synopsis
********

     git *


DESCRIPTION
***********

このチュートリアルでは、新しいプロジェクトをGitにインポートし、変更を加
え、他の開発者と変更を共有する方法について説明します。

   Gitを使用してプロジェクトをフェッチする方に主な関心がある場合、たとえ
ば、最新バージョンをテストする場合は、 The Git User’s Manual
(user-manual.html) の最初の2つの章から始めることをお勧めします。

   注意: まず最初に、 あなたは ‘git log --graph’ などのコマンドの文書を
以下のようにして入手する事ができます:

     $ man git-log

   または:

     $ git help log

   後者では。あなたが選択したマニュアルビューアを使用できます。詳細につ
いては git-help(1) を参照してください。

   操作を行う前に、名前と公開メールアドレスを使用してあなた自身をGitに紹
介する(introduce yourself)ことをお勧めします。これを行う最も簡単な方法は
以下のとおりです:

     $ git config --global user.name "Your Name Comes Here"
     $ git config --global user.email you@yourdomain.example.com


Importing a new project
***********************

既にtarball project.tar.gz があると仮定します。あなたは以下にしてそれを
Gitリビジョン管理下に置くことができます。

     $ tar xzf project.tar.gz
     $ cd project
     $ git init

   Gitは以下のメッセージを返すでしょう

     Initialized empty Git repository in .git/

   これで作業ディレクトリが初期化されました。あなたは ".git" という名前
の新しいディレクトリが作成されていることに気付くかもしれません。

   次に、Gitに、現在のディレクトリ(_._ に注意)の下にあるすべてのファイル
の内容のスナップショットを「git add」で取得するように指示します:

     $ git add .

   このスナップショットは、Gitが「インデックス」と呼ぶ一時的な足場領域
(temporary staging area)に保存されました。 _git commit_ を使用して、イン
デックスの内容をリポジトリに永続的に保存できます:

     $ git commit

   これにより、コミットメッセージの入力を求められます。 これで、プロジェ
クトの最初のバージョンがGitに保存されました。


Making changes
**************

いくつかのファイルを変更してから、更新された内容をインデックスに追加しま
す:

     $ git add file1 file2 file3

   これで、コミットする準備ができました。 ‘--cached’ オプションを指定し
た「git diff」を使用して、何がコミットされようとしているのかを確認できま
す:

     $ git diff --cached

   (‘--cached’ を指定しない場合、「git diff」は、編集を行ったがまだイン
デックスに追加されていない変更を表示します。）あなたは「git status」を使
用して状況の簡単な要約を取得することもできます:

     $ git status
     On branch master
     Changes to be committed:
     Your branch is up to date with 'origin/master'.
       (use "git restore --staged <file>..." to unstage)

             modified:   file1
             modified:   file2
             modified:   file3

   さらに調整が必要な場合は、ここで調整してから、新しく変更したコンテン
ツをインデックスに追加します。 最後に、以下のコマンドであなたの変更をコ
ミットします。

     $ git commit

   これにより、変更を説明するメッセージの入力を再度求められ、プロジェク
トの新しいバージョンが記録されます。

   または、事前に「git add」を実行する代わりに、あなたは以下を使用できま
す。

     $ git commit -a

   これにより、変更された(ただし新規ではない)ファイルが自動的に認識され
、それらがインデックスに追加され、コミットされます。それらがすべて1つの
ステップで実行されます。

   コミットメッセージに関する注意: 必須ではありませんが、コミットメッセ
ージは、変更を要約した1行の短い(50文字未満)行で始まり、空行が1行あり、そ
の後にさらに詳細な説明が続くようにすることをお勧めします。コミットメッセ
ージの最初の空白行までのテキストはコミットタイトルとして扱われ、そのタイ
トルはGit全体で使用されます。たとえば、 git-format-patch(1) はコミットを
電子メールに変換し、件名としてコミットタイトル、本文として残りのコミット
メッセージを使用します。


Git tracks content not files
****************************

【Gitはファイルではなくコンテンツを追跡する】多くのリビジョン管理システ
ムは、新しいファイルへの変更の追跡を開始するようにシステムに指示する
‘add’ コマンドを提供します。 Gitの ‘add’ コマンドは、よりシンプルで強力
な機能を実行します。 ‘git add’ ’は、新しいファイルと新しく変更されたファ
イルの両方に使用されます。どちらの場合も、指定されたファイルのスナップシ
ョットを取得し、そのコンテンツをインデックスにステージングして、次のコミ
ットにすぐに含めることができます。


Viewing project history
***********************

あなたはいつでも、以下を使用して変更の履歴を表示できます

     $ git log

   あなたが各ステップで完全な差分も表示したい場合は、以下を使用してくだ
さい

     $ git log -p

   多くの場合、以下のような変更の概要は、各ステップの感触をつかむのに役
立ちます

     $ git log --stat --summary


Managing branches
*****************

単一のGitリポジトリで、開発の複数のブランチを維持できます。「
experimental」という名前の新しいブランチを作成するには、以下のようにしま
す。

     $ git branch experimental

   そして、以下のようにすることができます

     $ git branch

   そうすると、既存のすべてのブランチのリストが表示されます。

       experimental
     * master

   「experimental」ブランチは作成したばかりのブランチであり、「master」
ブランチは自動的に作成されたデフォルトのブランチです。アスタリスク
(‘*’)は、現在使用しているブランチを示します。そして以下のようにタイプし
ます。

     $ git switch experimental

   するとexperimentalブランチに切り替えます。次に、ファイルを編集し、変
更をコミットして、masterブランチに戻ります:

     (edit file)
     $ git commit -a
     $ git switch master

   その変更はexperimentalブランチで行われ、masterブランチに戻ったため、
その変更が表示されなくなったことを確認します。

   masterブランチで別の変更を加えることができます:

     (edit file)
     $ git commit -a

   この時点で、2つのブランチは分岐しており、それぞれに異なる変更が加えら
れています。experimentalで行った変更をmasterにマージするには、以下を実行
します

     $ git merge experimental

   変更が競合しない場合は、これで完了です。 競合がある場合、競合を示すマ
ーカーが問題のあるファイルに残されます。

     $ git diff

   とすると、これを表示します。あなたが競合を解決するためにファイルを編
集したら

     $ git commit -a

   とすると、マージの結果をコミットします。そして最後に、

     $ gitk

   とすると、結果の履歴の優れたグラフィック表現が表示されます。

   この時点で、以下のコマンドでexperimentalブランチを削除できます

     $ git branch -d experimental

   このコマンドは、experimentalブランチでの変更がすでに現在のブランチに
あることを確認します。

   あなたがブランチクレイジーアイデアで開発し、それを後悔しているなら、
あなたはいつでもブランチを(マージせずに)削除することができます

     $ git branch -D crazy-idea

   ブランチのコストは安くて、かつ操作は簡単なので、これは何かを一時的に
試す良い方法です。


Using Git for collaboration
***************************

アリス(Alice)が /home/alice/project にGitリポジトリを使用して新しいプロ
ジェクトを開始し、同じマシンにホームディレクトリを持っているボブ(Bob)が
貢献したいとします。

   ボブは以下のように始めます:

     bob$ git clone /home/alice/project myrepo

   これにより、アリスのリポジトリのクローンを含む新しいディレクトリ「
myrepo」が作成されます。クローンは元のプロジェクトと同等の立場にあり、元
のプロジェクトの履歴の独自のコピーを所有しています。

   次に、ボブはいくつかの変更を加えてコミットします:

     (edit files)
     bob$ git commit -a
     (repeat as necessary)

   準備ができたら、ボブはアリスに /home/bob/myrepo のリポジトリから変更
をプルするように指示します。アリスはこれを以下のように行います:

     alice$ cd /home/alice/project
     alice$ git pull /home/bob/myrepo master

   これにより、ボブの「master」ブランチからの変更がアリスの現在のブラン
チにマージされます。その間にアリスが自分で変更を加えた場合は、競合を手動
で修正する必要があります。

   つまり「pull」コマンドは2つの操作を実行します。リモートブランチから変
更をフェッチしてから、それらを現在のブランチにマージします。

   一般に、アリスが「プル」を開始する前に、アリス自身のローカルの変更を
コミットすることを望んでいることに注意してください。ボブの作業が、履歴が
分岐してからアリスが行ったことと競合する場合、アリスは作業ツリーとインデ
ックスを使用して競合を解決し、既存のアリス自身のローカル変更は競合解決プ
ロセスの障害となります(Gitは引き続きフェッチを実行しますが、マージを拒否
します。アリスは、何らかの方法でアリス自身のローカルの変更を取り除き、再
度プルする必要があります)。

   アリスは、「fetch」コマンドを使用して、マージせずにボブが行ったことを
確認できます。 これにより、アリスはボブが何をしたかを特別な記号「
FETCH_HEAD」を使用して検査し、プルする価値があるかどうかを判断できます。

     alice$ git fetch /home/bob/myrepo master
     alice$ git log -p HEAD..FETCH_HEAD

   この操作は、アリスがアリス自身のローカルの変更をコミットしていない場
合でも安全です。 範囲表記 ‘HEAD..FETCH_HEAD’ は、「FETCH_HEADから到達可
能なすべてのものを表示し、HEADから到達可能なものはすべて除外する」ことを
意味します。 このコマンドで、アリスは、現在の状態（HEAD）につながるすべ
てのことをすでに知っているとして、ボブが持っている状態（FETCH_HEAD）で、
かつ、アリスが持っていないモノを確認します。

   アリスが、ボブとの履歴が分岐してから何をしたかを視覚化したい場合は、
以下のコマンドを実行できます:

     $ gitk HEAD..FETCH_HEAD

   これは、前に「git log」で見たのと同じ2ドットの範囲表記を使用します。

   アリスは、フォークして以来、アリスとボブの両方が何をしたかを見たいと
思うかもしれません。その場合、アリスはは2ドット形式の代わりに3ドット形式
を使用できます:

     $ gitk HEAD...FETCH_HEAD

   これは、「どちらか一方から到達可能なものはすべて表示し、両方から到達
可能なものはすべて除外する」ことを意味します。

   これらの範囲表記は、gitkと「git log」の両方で使用できることに注意して
ください。

   ボブが何をしたかを調べた後、緊急のことがなければ、アリスはボブからプ
ルせずに作業を続けることを決定するかもしれません。ボブの履歴にアリスがす
ぐに必要とするものがある場合、アリスは最初に進行中の作業をstashし、「プ
ル」を実行し、最後に結果の履歴に加えて進行中の作業をunstashすることを選
択できます。

   小さな緊密なグループで作業している場合、同じリポジトリを何度も操作す
ることは珍しくありません。リモートリポジトリの省略形を定義すると、作業は
以下のように簡単になります:

     alice$ git remote add bob /home/bob/myrepo

   これにより、アリスは「git fetch」コマンドを使用して、「pull」操作の最
初の部分を自分のブランチとマージせずに、以下のコマンドを使用して単独で実
行できます:

     alice$ git fetch bob

   直接書いた形式とは異なり、アリスが「git remote」で設定したリモートリ
ポジト省略形を使用してボブからフェッチする場合、フェッチされたものはリモ
ート追跡ブランチ(この場合は「bob/master」）に保存されます。 したがって、
以下のようにすると:

     alice$ git log -p master..bob/master

   ボブがアリスのmasterブランチから分岐してから行ったすべての変更のリス
トを示します。

   これらの変更を調べた後、アリスは変更をアリス自身のmasterブランチにマ
ージできます。

     alice$ git merge bob/master

   この「マージ」は、以下のように「アリス自身のリモート追跡ブランチから
プルする」ことによっても実行できます:

     alice$ git pull . remotes/bob/master

   注意: コマンドラインで他に何が指定されているかに関係なく、 ‘git pull’
は常に現在のブランチにマージされることに注意してください。

   その後、ボブは以下を使用してアリスの最新の変更でボブのリポジトリを更
新できます

     bob$ git pull

   注意: ボブはアリスのリポジトリへのパスを指定する必要がないことに注意
してください。ボブがアリスのリポジトリのクローンを作成したとき、Gitはア
リスのリポジトリの場所をリポジトリ構成に保存し、その場所がプルに使用され
ます。

     bob$ git config --get remote.origin.url
     /home/alice/project

   ( _git clone_ によって作成される完全な構成は、 ‘git config -l’ を使用
して表示でき、 git-config(1) のマニュアルページで各オプションの意味を説
明しています。)

   Gitは、「origin/master」という名前でアリスのmasterブランチの当初の綺
麗なコピー(pristine copy)も保持しています。

     bob$ git branch -r
       origin/master

   ボブが後で別のホストから作業することを決定した場合でも、sshプロトコル
を使用してクローンとプルを実行できます:

     bob$ git clone alice.org:/home/alice/project myrepo

   代わりに、Gitのネイティブプロトコルや、httpを使用できます。詳細につい
ては、 git-pull(1) を参照してください。

   Gitは、さまざまなユーザーが変更をプッシュする中央リポジトリを使用して
、CVSのようなモードで使用することもできます。 git-push(1) と
gitcvs-migration(7) を参照してください。


Exploring history
*****************

Gitの履歴は、相互に関連する一連のコミットとして表されます。 _git log_ コ
マンドでこれらのコミットを一覧表示できることはすでに見てきました。注意:
各gitログエントリの最初の行には、コミットの名前も示されていることに注意
してください:

     $ git log
     commit c82a22c39cbc32576f64f5c6b3f24b99ea8149c7
     Author: Junio C Hamano <junkio@cox.net>
     Date:   Tue May 16 17:18:22 2006 -0700

         merge-base: Clarify the comments on post processing.

   このコミットの詳細を確認するには、この名前を「git show」に与えます。

     $ git show c82a22c39cbc32576f64f5c6b3f24b99ea8149c7

   ただし、コミットを参照する方法は他にもあります。あなたはコミットを一
意に識別するのに十分な長さであれば名前の最初の部分だけを指定できます:

     $ git show c82a22c39c   # the first few characters of the name are
                             # usually enough
     $ git show HEAD         # the tip of the current branch
     $ git show experimental # the tip of the "experimental" branch

   通常、あらゆるコミットには、プロジェクトの以前の状態を指す1つの「親」
コミットがあります:

     $ git show HEAD^  # to see the parent of HEAD
     $ git show HEAD^^ # to see the grandparent of HEAD
     $ git show HEAD~4 # to see the great-great grandparent of HEAD

   注意: マージコミットには複数の親が含まれる場合があることに注意してく
ださい:

     $ git show HEAD^1 # show the first parent of HEAD (same as HEAD^)
     $ git show HEAD^2 # show the second parent of HEAD

   コミットに独自の名前を付けることもできます。

     $ git tag v2.5 1b2e1d63ff

   と実行すると、1b2e1d63ff は「v2.5」という名前で参照できます。この名前
を他の人と共有する場合(たとえば、リリースバージョンを識別するため)、「タ
グ」オブジェクトを作成し、おそらくそれに署名する必要があります。 詳細に
ついては git-tag(1) を参照してください。

   コミットを知る必要のあるGitコマンドは、これらの名前のいずれかを指定す
ることができます。 例えば:

     $ git diff v2.5 HEAD     # compare the current HEAD to v2.5
     $ git branch stable v2.5 # start a new branch named "stable" based
                              # at v2.5
     $ git reset --hard HEAD^ # reset your current branch and working
                              # directory to its state at HEAD^

   最後のコマンドには注意してください。作業ディレクトリの変更が失われる
だけでなく、このブランチからそれ以降のすべてのコミットも削除されます。こ
のブランチがそれらのコミットを含む唯一のブランチである場合、それらは失わ
れます。また、他の開発者がプルする公開ブランチで「git reset」を使用しな
いでください。他の開発者に不必要なマージを強制して、履歴をクリーンアップ
してしまうためです。プッシュした変更を元に戻す必要がある場合は、代わりに
「git revert」を使用してください。

   _git grep_ コマンドは、プロジェクトの任意のバージョンで文字列を検索で
きます。

     $ git grep "hello" v2.5

   これは、v2.5で出現するすべての「hello」を検索します。

   以下のようにコミット名を省略すると、「git grep」は現在のディレクトリ
で管理しているファイルを検索します。

     $ git grep "hello"

   これは、Gitによって追跡されているファイルだけですばやく検索する方法で
す。

   多くのGitコマンドは、さまざまな方法で指定できる一連のコミットも指定で
きます。 _git log_ の例を以下に示します:

     $ git log v2.5..v2.6            # commits between v2.5 and v2.6
     $ git log v2.5..                # commits since v2.5
     $ git log --since="2 weeks ago" # commits from the last 2 weeks
     $ git log v2.5.. Makefile       # commits since v2.5 which modify
                                     # Makefile

   ’git log’にコミットの「範囲」を与えることもできます。ここで、最初のコ
ミットは必ずしも2番目の祖先とは限りません。 たとえば、ブランチの「
stable」と「master」の先端が、しばらく前に共通のコミットから分岐した場合
、

     $ git log stable..master

   とすると、masterブランチで行われたコミットはリストされますが、
stableブランチに対しては行われません。

     $ git log master..stable

   とすると、stableブランチで行われたコミットのリストが表示されますが、
masterブランチに対しては表示されません。

   「git log」コマンドには弱点があります。コミットを一覧として表示する必
要があることです。履歴に分岐してからマージされた開発ラインがある場合、「
git log」がそれらのコミットを提示する順序は無意味な順序になります。

   複数のコントリビューター（LinuxカーネルやGit自体など）を持つほとんど
のプロジェクトでは、頻繁にマージが行われ、「gitk」はそれらの履歴をより適
切に視覚化できます。

     $ gitk --since="2 weeks ago" drivers/

   これは、「drivers」ディレクトリの下のファイルを変更した過去2週間のコ
ミットからのコミットを参照できます。 (注: Ctrlキーを押しながら「-」また
は「+」を押すと、gitkのフォントサイズを調整できます。）

   最後に、ファイル名を取得するほとんどのコマンドでは、オプションで、フ
ァイルの特定のバージョンを指定するために、任意のファイル名の前にコミット
を付けることができます:

     $ git diff v2.5:Makefile HEAD:Makefile.in

   _git show_ を使用して、任意のファイルを表示することもできます:

     $ git show v2.5:Makefile


Next Steps
**********

このチュートリアルは、プロジェクトの基本的な分散リビジョン管理を実行する
のに十分なはずです。ただし、Gitの奥深さとパワーを完全に理解するには、
Gitの基礎となる2つの簡単なアイデアを理解する必要があります:

   • オブジェクトデータベースは、あなたのプロジェクトの履歴（ファイル、
     ディレクトリ、コミット）を格納するために使用されるかなり洗練された
     システムです。

   • インデックスファイルは、ディレクトリツリーの状態のキャッシュであり
     、コミットの作成、作業ディレクトリのチェックアウト、およびマージに
     関係するさまざまなツリーの保持に使用されます。

   このチュートリアルのパート2では、オブジェクトデータベース、インデック
スファイル、およびGitを最大限に活用するために必要なその他のいくつかのガ
ラクタについて説明します。 linkgit: gittutorial-2[7] をご覧下さい。

   すぐにそれを続けたくない場合は、この時点で興味深いかもしれない他のい
くつかのより道は以下のとおりです:

   • git-format-patch(1) 、git-am(1): これらは一連のgitコミットを電子メ
     ールで送信されたパッチに変換します。その逆も同様です。電子メールで
     送信されたパッチに大きく依存するLinuxカーネルなどのプロジェクトで役
     立ちます。

   • git-bisect(1): プロジェクトにデグレがある場合、バグを追跡する1つの
     方法は、履歴を検索して、原因となる正確なコミットを見つけることです
     。 Git bisectは、そのコミットの二分木検索を実行するのに役立ちます。
     マージされたブランチが多数ある複雑な非線形履歴の場合でも、最適に近
     い検索を実行するのに十分賢いです。

   • gitworkflows(7): 推奨される作業の流れの概要を示します。

   • giteveryday(7): 20コマンド程度で綴る日々のGit。

   • gitcvs-migration(7): CVSユーザー向けのGit。


SEE ALSO
********

gittutorial-2(7), gitcvs-migration(7), gitcore-tutorial(7),
gitglossary(7), git-help(1), gitworkflows(7), giteveryday(7), The Git
User’s Manual (user-manual.html)


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: gitweb.conf,  Up: Top

Name
****

gitweb.conf — Gitweb(Git Webインターフェイス)構成ファイル


Synopsis
********

/etc/gitweb.conf, /etc/gitweb-common.conf, $GITWEBDIR/gitweb_config.perl


DESCRIPTION
***********

Web上でGitリポジトリを表示するためのgitweb CGIスクリプトは、設定ファイル
としてperlスクリプト断片を使用します。 ‘our $variable = value’ を使用し
て変数を設定できます。 ‘#’ 文字から行末までのテキストは無視されます。 詳
細については、「perlsyn(1)」を参照してください。

   とある例:

     # gitweb configuration file for http://git.example.org
     #
     our $projectroot = "/srv/git"; # FHS recommendation
     our $site_name = 'Example.org >> Repos';

   構成ファイルは、 ‘gitweb.cgi’ スクリプトが生成されたときにgitwebに組
み込み済みのデフォルト設定を上書きするために使用されます。

   gitweb CGI自体の構成設定を変更することもできますが、それらの変更はア
ップグレード時に失われます。構成設定は、デフォルト名が
‘gitweb_config.perl’ のCGIスクリプトと同じディレクトリ内のファイルに配置
される場合もあります。これにより、シンボリックリンクを使用して、構成が異
なる複数のgitwebインスタンスを作成できます。

   注意: 一部の構成は、gitweb全体ではなく、リポジトリごとに制御できるこ
とに注意してください。 gitweb(1)の manpage の「Per-repository gitweb
configuration」サブセクションを参照してください。


DISCUSSION
**********

gitwebは、以下のソースから以下の順序で構成データを読み取ります:

   • 組み込み値(ビルド段階で設定されるものもあります)

   • 共通のシステム全体の構成ファイル(デフォルトは
     ‘/etc/gitweb-common.conf’)

   • インスタンスごとの構成ファイル(デフォルトでは、インストールされた
     gitwebと同じディレクトリにある ‘gitweb_config.perl’ になります)。ま
     たは、存在しない場合は、システム全体の構成ファイル(デフォルトは
     ‘/etc/gitweb.conf’)にフォールバックします。

   後から構成ファイルで得られた値は、上記の順序で先に得られた値を上書き
します。

   共通のシステム全体の構成ファイルや、フォールバックシステム全体の構成
ファイルや、インスタンスごとの構成ファイルの場所は、ビルド時のMakefile構
成変数、それぞれ ‘GITWEB_CONFIG_COMMON’ と ‘GITWEB_CONFIG_SYSTEM’ と
‘GITWEB_CONFIG’ を使用して定義されます。

   あなたは環境変数 ‘GITWEB_CONFIG_COMMON’ と ‘GITWEB_CONFIG_SYSTEM’ と
‘GITWEB_CONFIG’ を空でない値に設定することにより、実行時にgitweb構成ファ
イルの場所をオーバーライドすることもできます。

   構成ファイルの構文はPerlの構文です。これらのファイルは、Perlコード
(gitweb自体が記述されている言語)の断片としてそれらをsourceすることによっ
て処理されるためです。 変数は通常、 (‘our $variable = <value>;’ のように
) ‘our’ 修飾子を使用して設定され、新しいバージョンのgitwebがとある変数を
使用しなくなったために、とある変数の宣言で停止(stop)する構文エラーを回避
します。

   あなたは read_config_file() サブルーチンを使用して、他の構成ファイル
を含めることができます。たとえば、(Gitリポジトリ管理ツールの1つである
)Gitoliteを介してリポジトリを表示するための、アクセス制御に関連する
gitweb構成を別のファイルに入れたい場合があります。例えばそれが
‘/etc/gitweb-gitolite.conf’ にあるとすると、それを含めるには以下のように
します。

     read_config_file("/etc/gitweb-gitolite.conf");

   これを、使用されているgitweb構成ファイルのどこか、例えばインストール
ごとのgitweb構成ファイルに置きます。 注意: read_config_file()は、読み取
ったファイルが存在することを自分自身でチェックし、見つからない場合は何も
しないことに注意してください。 また、インクルードファイルのエラーも処理
します。

   一部のインストールでは、構成ファイルがまったくないデフォルトの構成が
完全に機能する場合があります。それでも、構成ファイルはgitwebの動作をさま
ざまな方法でカスタマイズまたは微調整するのに役立ち、構成可能な
‘%features’ 変数を使用して明示的に有効にしない限り、一部のオプション機能
は有効になりません(以下の「Configuring gitweb features」セクションも参照
)。


CONFIGURATION VARIABLES
***********************

設定変数の中には、gitwebのビルド時にデフォルト値が設定されるものがありま
す(CGIスクリプトに埋め込まれています) — その場合は、その事実を記述してい
ます。 gitwebのビルドとインストールについては、gitwebの INSTALL ファイル
を参照してください。


Location of repositories
========================

以下で説明する構成変数は、gitwebがGitリポジトリを見つける方法、およびリ
ポジトリが表示およびアクセスされる方法を制御します。

   gitweb(1)の manpage の「Repositories」以降のサブセクションも参照して
ください。

$projectroot
     プロジェクトパスの前に付加されるファイルシステム絶対パス。リポジト
     リへのパスは ‘$projectroot/$project’ です。 インストール時に
     ‘$GITWEB_PROJECTROOT’ に設定します。gitwebがリポジトリを見つけるに
     は、この変数を正しく設定する必要があります。

     たとえば、 ‘$projectroot’ が ‘/srv/git’ に設定されている場合、
     gitweb構成ファイルに以下のように入力します:

          our $projectroot = "/srv/git";

     これは以下のようになります

          http://git.example.com/gitweb.cgi?p=foo/bar.git

     そして以下はpath_infoベースの同等のものです

          http://git.example.com/gitweb.cgi/foo/bar.git

     これはファイルシステムのパス ‘/srv/git/foo/bar.git’ にマップされま
     す。

$projects_list
     プロジェクトを一覧表示するプレーンテキストファイルの名前、またはプ
     ロジェクトをスキャンするディレクトリの名前。

     プロジェクトリストファイルには、1行に1つのプロジェクトがリストされ
     、各行の形式は以下のとおりです

          <URI-encoded filesystem path to repository> SP <URI-encoded repository owner>

     この変数のデフォルト値は、インストール時に ‘GITWEB_LIST’ makefile変
     数によって決定されます。この変数が空の場合、gitwebはフォールバック
     して ‘$projectroot’ ディレクトリのリポジトリをスキャンします。

$project_maxdepth
     ‘$projects_list’ 変数が設定されていない場合、gitwebはファイルシステ
     ムを再帰的にスキャンしてGitリポジトリを探します。
     ‘$project_maxdepth’ は、 ‘$projectroot’ (開始点)を基準にしてトラバ
     ーサル深度を制限するために使用されます。 これは、
     ‘$project_maxdepth’ よりも ‘$projectroot’ から離れているディレクト
     リがスキップされることを意味します。

     これは純粋にパフォーマンスの最適化であり、元々は再帰的なディレクト
     リトラバーサルが遅い MacOS X を対象としています。Gitwebはシンボリッ
     クリンクをたどりますが、重複するファイルやディレクトリを無視して循
     環を検出します。

     この変数のデフォルト値は、ビルド時の構成変数
     ‘GITWEB_PROJECT_MAXDEPTH’ によって決定されます。デフォルトは2007で
     す。

$export_ok
     この(変数の値のファイル名の)ファイルが(リポジトリに)存在する場合に
     のみリポジトリを表示します。この変数がtrueと評価された場合にのみ有
     効です。 ‘GITWEB_EXPORT_OK’ を設定することにより、gitwebを構築する
     ときに設定できます。 このパスは ‘GIT_DIR’ からの相対パスです。
     git-daemon[1] は、 ‘--export-all’ で開始されていない限り、
     ‘git-daemon-export-ok’ を使用します。デフォルトでは、この変数は設定
     されていません。つまり、この機能はオフになっています。

$export_auth_hook
     表示するリポジトリを決定するために使用される関数。このサブルーチン
     は、プロジェクトへのフルパスという1つのパラメーターを受け取る必要が
     あり、trueを返した場合、そのプロジェクトはプロジェクトリストに含ま
     れ、 ‘$export_ok’ と $‘projects_list’ と ‘$projects_maxdepth’ とで
     説明されている他の要件を満たしている限り、gitwebからアクセスできま
     す。例:

          our $export_auth_hook = sub { return -e "$_[0]/git-daemon-export-ok"; };

     上記は代わりに、以下のように ‘$export_ok’ を使用して行うことができ
     ますが

          our $export_ok = "git-daemon-export-ok";

     設定されていない場合(デフォルト)は、この機能はが無効になっています
     。

     より複雑な例として、 gitweb(1) manpage の「Controlling access to
     Git repositories」サブセクションも参照してください。

$strict_export
     概要ページにも表示されているリポジトリの表示のみを許可します。これ
     により、たとえば、 ‘$ export_ok’ ファイルは、リポジトリが表示されて
     いるかどうかだけでなく、リポジトリが使用可能かどうかを判断します。
     ‘$projects_list’ がプロジェクトのリストを含むファイルを指している場
     合、リストされているリポジトリのみがgitwebで使用できます。
     ‘GITWEB_STRICT_EXPORT’ を介してgitwebの構築中に設定できます。デフォ
     ルトでは、この変数は設定されていません。つまり、プロジェクトリスト
     ページから非表示になっている(たとえば、 ‘$projects_listファイルにリ
     ストされいない)リポジトリに直接のアクセスができます。


Finding files
=============

以下の構成変数は、ファイルの場所をgitwebに指示します。これらの変数の値は
、ファイルシステム上のパスです。

$GIT
     使用するコアgit実行可能ファイル。デフォルトでは ‘$GIT_BINDIR/git’ に
     設定されており、これはデフォルトで ‘$(bindir)/git’ に設定されていま
     す。バイナリパッケージからインストールされたGitを使用する場合は、通
     常、これを ‘/usr/bin/git’ に設定する必要があります。Webサーバーに適
     切なPATHが通っている場合、これは単に ‘git’ になる可能性があります。
     セキュリティの観点から、gitバイナリへの絶対パスを使用することをお勧
     めします。複数のGitバージョンがインストールされている場合は、gitバ
     イナリへの絶対パスを使用して、使用するバージョンを選択できます。
     gitwebが機能するには、(正しく)設定する必要があります。

$mimetypes_file
     ‘/etc/mime.types’ を試す前に、(ファイル名拡張子に基づいて)MIMEタイ
     プを推測するために使用するファイル。 *NOTE* このパスは、相対的であ
     る場合、CGIスクリプトではなく、現在のGitリポジトリに相対的であると
     見なされます。 設定されていない場合、 ‘/etc/mime.types’ のみが使用
     されます(‘/etc/mime.types’ がファイルシステムに存在する場合)。
     mimetypesファイルが見つからない場合、ファイルの拡張子に基づく
     mimetypeの推測は無効になります。デフォルトでは設定されていません。

$highlight_bin
     使用するhighlight実行可能ファイルのパス(パラメーターと出力に関して
     仮定してあるため、 http://www.andre-simon.de
     (http://www.andre-simon.de) からのものである必要があります)。デフォ
     ルトでは ‘highlight’ に設定されています。WebサーバーのPATHが通った
     ところにインストールされていない場合は、highlight実行可能ファイルへ
     のフルパスを設定します。gitwebが実際に構文の強調表示(syntax
     highlighting)を使用するには、 ‘highlight’ 機能を設定する必要がある
     ことに注意してください。

     *注意* : ファイルを強調表示するには、その構文タイプを検出し、 その
     構文を ‘highlight’ でサポートする必要があります。 デフォルトの構文
     検出は最小限であり、 デフォルトで検出されない多くのサポートされてい
     る構文タイプがあります。 構文検出を追加するには、3つのオプションが
     あります。 1番目と2番目の優先順位は ‘%highlight_basename’ と
     ‘%highlight_ext’ で、 これらはベース名(完全なファイル名、たとえば
     ‘Makefile’)と拡張子(たとえば ‘sh’)に基づいて検出します。 これらのハ
     ッシュのキーはそれぞれベース名と拡張子であり、 指定されたキーの値は
     、‘--syntax<syntax>’ を介して ‘highlight’ に渡される構文の名前です
     。 最後の優先順位は、 ファイルの最初の行に基づいて言語を検出するた
     めの ‘Shebang’ 正規表現の ‘highlight’ 構成です (たとえば、行
     ‘#!/bin/bash’ とマッチします)。 highlightのドキュメントとデフォルト
     の設定を参照してください。 詳細については、
     ‘/etc/highlight/filetypes.conf’ を参照してください。

     たとえば、ホストしているリポジトリがPHPファイルに ‘phtml’ 拡張子を
     使用していて、それらのファイルに正しい構文を強調表示したい場合は、
     gitweb構成に以下を追加できます:

          our %highlight_ext;
          $highlight_ext{'phtml'} = 'php';


Links and their targets
=======================

以下で説明する構成変数は、いくつかのgitwebリンクを構成します。ターゲット
と外観(テキストまたは画像)、およびページの前提条件(スタイルシート、
favicon、画像、スクリプト)の場所です。 通常、 ‘@stylesheets’ 変数を除い
て、デフォルト値のままになります。

‘@stylesheets’
     スタイルシートのURIのリスト(ページのベースURIからの相対パス)。複数
     のスタイルシートを指定する場合があります。たとえば、 ‘gitweb.css’ を
     ベースとして使用し、サイト固有の変更を別のスタイルシートに追加して
     、gitwebのアップグレードを容易にします。 たとえば、あなたが ‘site’
     スタイルシートを追加するには以下のようにします

          push @stylesheets, "gitweb-site.css";

     これをgitweb構成ファイルに追加します。相対パスであるこれらの値は、
     gitwebのベースURIを基準にしています。

     このリストには、gitwebの標準スタイルシートのURIが含まれている必要が
     あります。gitwebスタイルシートのデフォルトURIは、ビルド時に
     ‘GITWEB_CSS’ makefile変数を使用して設定できます。デフォルト値は
     ‘static/gitweb.css’ (または、 ‘CSSMIN’ 変数が定義されている場合、つ
     まり、ビルド中にCSS minifierが使用されている場合は
     ‘static/gitweb.min.css’ ) です。

     *注意*: 古いgitwebで使用されていた従来の ‘$stylesheet’ 構成変数もあ
     ります。 ‘$stylesheet‘変数が定義されている場合、 この変数によって指
     定されたCSSスタイルシートのみがgitwebによって使用されます。

$logo
     Webサーバー上で ‘git-logo.png’ を配置する場所を指定します。または、
     72x27サイズの汎用ロゴのURIを指します。この画像は、各gitwebページの
     右上隅に表示され、Atomフィードのロゴとして使用されます。 gitwebのベ
     ースURIからの相対パスです。 ‘GITWEB_LOGO’ 変数を使用してgitwebを構
     築するときに調整できます。デフォルトでは ‘static/git-logo.png’ に設
     定されています。

$favicon
     Webサーバー上で ‘git-favicon.png’ を配置する場所を指します。または
     、 ‘image/png’ タイプとして提供されるfaviconの汎用URIを指します。
     favicon(Webサイトアイコン)をサポートするWebブラウザーは、
     favicon(Webサイトアイコン)をブラウザーのURLバーに表示し、ブックマー
     クのサイト名の横に表示する場合があります。gitwebのベースURIからの相
     対パスです。 ‘GITWEB_FAVICON’ 変数を使用してビルド時に調整できます
     。 デフォルトでは ‘static/git-favicon.png’ に設定されています。

$javascript
     Webサーバー上で ‘gitweb.js’ を配置する場所を指します。より一般的に
     は、gitwebで使用されるJavaScriptコードのURIを指します。 gitwebのベ
     ースURIを基準にしています。 ‘GITWEB_JS’ ビルド時構成変数を使用して
     ビルド時に設定できます。

     デフォルト値は、 ‘static/gitweb.js’ または ‘JSMIN’ ビルド変数が定義
     されている場合、つまりビルド時にJavaScript minifierが使用されている
     場合は ‘static/gitweb.min.js’ です。 *注意* この単一のファイルは、
     複数の個別のJavaScriptモジュール達から生成されます。

$home_link
     すべてのページの上部にあるホームリンク(home link)のターゲット(パン
     くずリスト(breadcrumbs)ビューの最初の部分)。 デフォルトでは、現在の
     ページの絶対URIに設定されます(‘$my_uri’ 変数の値、または ‘$my_uri’
     が未定義または空の文字列の場合は ‘/’ に設定されます)。

$home_link_str
     すべてのページの上部にある「home link」のラベルで、‘$home_link’ に
     誘導します(通常、プロジェクトリストを含むメインのgitwebページです
     )。 ‘<home link> / <project> / <action>’ は、gitwebの「パンくずリス
     ト」の最初のコンポーネントとして使用されます。
     ‘GITWEB_HOME_LINK_STR’ 変数を使用してビルド時に設定できます。このリ
     ンクからプロジェクトのリストが表示されるため、デフォルトではラベル
     は "projects" に設定されています。もう1つの一般的な選択肢は、サイト
     の名前に設定することです。生のHTMLとして扱われるため、信頼できない
     ソースからは設定しないでください。

‘@extra_breadcrumbs’
     ホームリンクの前のパンくずリスト(breadcrumb trail)の先頭に、
     gitwebサーバーをホストする組織や部門など、gitwebプロジェクトリスト
     の論理的に「上位」にあたるページに追加される追加のリンク。リストの
     各要素は配列への参照であり、要素0はリンクテキスト(‘$home_link_str’
     相当)で、要素1はターゲットURL(‘$home_link’ 相当)です。

     たとえば、以下の設定では、 ‘home/dev/projects/ ...’ のようなパンく
     ずリストが生成されます。ここで、 ‘projects’ はホームリンクです。

              our @extra_breadcrumbs = (
                [ 'home' => 'https://www.example.org/' ],
                [ 'dev'  => 'https://dev.example.org/' ],
              );

$logo_url
$logo_label
     Gitロゴリンク(または、別のロゴ画像を使用することを選択した場合はサ
     イトのロゴ)の、URIとラベル(タイトル)。デフォルトでは、これらは両方
     ともGitホームページ https://git-scm.com (https://git-scm.com) を参
     照します。 過去には、 https://www.kernel.org
     (https://www.kernel.org) のGitのドキュメントを参照していました。


Changing gitweb’s look
======================

あなたは、以下で説明する変数を使用して、gitwebによって生成されたページの
外観を調整できます。サイト名を変更したり、すべてのページに共通のヘッダー
とフッターを追加したり、メインページ(プロジェクトリストページ)に、この
gitwebインストールの説明を追加したりできます。

$site_name
     ページタイトルに表示される、サイト名または組織名です。 ブックマーク
     などを分かりやすくするために、何か説明的なものに設定してください。
     この変数が設定されていない場合、あるいは設定されていても、gitweb は
     ‘SERVER_NAME’ CGI環境変数の値を使用して、サイト名を "$SERVER_NAME
     Git" に設定し、この環境変数が設定されていない場合(例: gitweb がスタ
     ンドアローンのスクリプトとして起動している場合など)は "Untitled
     Git" に設定します。

     ビルド時に ‘GITWEB_SITENAME’ を使用して設定できます。 デフォルトで
     は設定されていません。

$site_html_head_string
     各ページの<head>セクションに含まれるHTMLスニペット。ビルド時に
     ‘GITWEB_SITE_HTML_HEAD_STRING’ を使用して設定できます。 デフォルト
     値はありません。

$site_header
     各ページの先頭にインクルードされるHTMLを記述したファイル名。
     ‘gitweb.cgi’ スクリプトを含むディレクトリからの相対パスです。 ビル
     ド時に ‘GITWEB_SITE_HEADER’ を使用して設定することができる。デフォ
     ルト値はありません。

$site_footer
     各ページの下部にインクルードされるHTMLを含むファイルの名前。
     ‘gitweb.cgi’ スクリプトを含むディレクトリに相対的です。ビルド時に
     ‘GITWEB_SITE_FOOTER’ を使用して設定できます。 デフォルト値はありま
     せん。

$home_text
     存在すればgitwebプロジェクトの概要ページ(‘projects_list’ ビュー)に
     インクルードされるHTMLファイルの名前。 ‘gitweb.cgi’ スクリプトを含
     むディレクトリに相対的です。デフォルト値は、 ‘GITWEB_HOMETEXT’ 変数
     を使用してビルド時に調整できます。デフォルトでは ‘indextext.html’ に
     設定されています。

$projects_list_description_width
     プロジェクトリストの「説明」列の幅(文字数)。長い説明は切り捨てられ
     ます(単語の境界で切り取ろうと試みます)。完全な説明は、(通常はマウス
     オーバーで表示される)title属性にあります。デフォルトは25ですが、長
     いプロジェクトの説明を使用する場合は小さすぎる可能性があります。

$default_projects_order
     プロジェクトリストページでのプロジェクトの順序のデフォルト値。これ
     は、プロジェクトリストを明示的に並べ替えない場合に使用される順序を
     意味します(URLに ‘o’ CGIクエリパラメータがない場合)。 有効な値は、
     「none」(並べ替えなし)、「project」(プロジェクトはプロジェクト名、
     つまり「$ projectroot」からのリポジトリへのパス)、「descr」(プロジ
     ェクトの説明)、「owner」、「age」(最新のコミットの日付) です。

     デフォルト値は ‘project’ です。不明な値は、ソートされていないことを
     意味します。


Changing gitweb’s behavior
==========================

これらの構成変数は、gitwebの「内部」動作を制御します。

$default_blob_plain_mimetype
     mimetypeチェックで他のタイプが生成されない場合の、blob_plain (raw)ビ
     ューのデフォルトのmimetype。デフォルトでは "text/plain" です。
     Gitwebは、 ‘$mimetypes_file’ (設定されていてfileが存在する場合)と
     ‘/etc/mime.types’ ファイルを使用して、ファイル名の拡張子に基づいて
     表示するファイルのmimetypeを推測します。( mime.types(5) manpage を
     参照してください。gitwebではファイル名拡張子ルールのみがサポートさ
     れています。)

$default_text_plain_charset
     テキストファイルのデフォルトの文字セット。これが設定されていない場
     合は、Webサーバー構成が使用されます。デフォルトでは設定されていませ
     ん(unset)。

$fallback_encoding
     行にUTF-8以外の文字が含まれている場合、Gitwebはこの文字セットを想定
     します。フォールバックデコードはエラーチェックなしで使用されるため
     、「utf-8」にすることもできます。値は有効なエンコーディングである必
     要があります。 リストについては、 Encoding::Supported (3pm) の
     manpage を参照してください。デフォルトは「latin1」、別名「
     iso-8859-1」です。

‘@diff_opts’
     git-diffおよびgit-diff-treeの検出オプションの名前を変更します。デフ
     ォルトは (’-M’) です。コピーも検出するには (’-C’) または (’-C’,
     ’-C’）に設定するか、名前変更を検出したくない場合は () 、つまり空の
     リストに設定します。

     *注意* 名前の変更、特にコピーの検出は、CPUにかなりの負荷がかかる可
     能性があります。 また、Git以外のツールでは、 上記のオプションで生成
     されたパッチで問題が発生する可能性があることにも注意してください。
     特に、ファイルのコピー (’-C’) またはcriss-cross名前変更 (’-B’) が含
     まれる場合はそうです。


Some optional features and policies
===================================

ほとんどの機能は ‘%feature’ ハッシュを介して構成されます。ただし、追加の
gitweb機能の一部は、以下で説明する変数を使用してオンにして構成できます。
gitwebの外観を制御する構成変数の傍にあるこのリストには、gitwebの管理側を
構成する変数が含まれています。(例: クロスサイトスクリプティングの防止。
ご存知のとおり、これは副作用として「要約」ページの外観や負荷制限に影響し
ます)

‘@git_base_url_list’
     GitベースURLのリスト。これらのURL群は、プロジェクトの概要ページに表
     示される、プロジェクトを取得する場所を説明するURLを生成するために使
     用されます。このリストの各要素の完全なフェッチURLは
     ‘$git_base_url/$project’ です。 複数のベースURLを設定できます(たと
     えば、1つは ‘git://’ プロトコル用、もう1つは ‘http://’ プロトコル用
     )。

     注意: リポジトリごとの構成は、 ‘$GIT_DIR/cloneurl’ ファイルで設定す
     ることも、プロジェクト構成の、複数値の ‘gitweb.url’ 構成変数の値と
     して設定することもできます。リポジトリごとの構成は、
     ‘@git_base_url_list’ 要素とプロジェクト名で構成される値よりも優先さ
     れます。

     あなたは ‘GITWEB_BASE_URL’ ビルド時構成変数を設定することにより、ビ
     ルド時に単一の値(1つの entry/item だけを持つリスト)を設定できます。
     デフォルトでは、 () 、つまり空のリストに設定されています。これは、
     gitwebがプロジェクト名から(フェッチのための)プロジェクトURLを作成し
     ようとしないことを意味します。

$projects_list_group_categories
     プロジェクトリストページでカテゴリ別にプロジェクトをグループ化でき
     るようにするかどうか。プロジェクトのカテゴリは、各リポジトリの構成
     の ‘$GIT_DIR/category’ ファイル、または ‘gitweb.category’ 変数によ
     って決定されます。デフォルトでは無効になっています(0に設定)。

$project_list_default_category
     何も指定されていないプロジェクトのデフォルトカテゴリ。 これが空の文
     字列に設定されている場合、そのようなプロジェクトは未分類のままで、
     分類されたプロジェクトの上に表示されます。 プロジェクトカテゴリが有
     効になっている場合、つまり ‘$projects_list_group_categories’ が
     trueの場合にのみ使用されます。デフォルトでは "" (空文字列)に設定さ
     れています。

$prevent_xss
     trueの場合、リポジトリ内のコンテンツがクロスサイトスクリプティング
     (XSS)攻撃を開始するのを防ぐために、一部のgitweb機能が無効になってい
     ます。リポジトリのコンテンツを信頼できない場合は、これをtrueに設定
     します。デフォルトではFalse(0に設定)。

$maxload
     gitwebクエリに応答する最大負荷を設定するために使用されます。サーバ
     ーの負荷がこの値を超えると、gitwebは「503 Service Unavailable」エラ
     ーを返します。 gitwebがその値を判別できない場合、サーバーの負荷は
     0と見なされます。 現在、Linuxでのみ動作し、 ‘/proc/loadavg’ を使用
     します。 負荷は、システム上でアクティブなタスクの数 — 実際に実行さ
     れているプロセス — が最後の1分間に平均化されたものです。

     この機能をオフにするには、 ‘$maxload’ を未定義の値(undef)に設定しま
     す。デフォルト値は300です。

$omit_age_column
     trueの場合、プロジェクトリストページの最新のコミットの日付の列を省
     略します。リポジトリごとに少しのI/Oとフォークを節約できます。

$omit_owner
     trueの場合、リポジトリ所有者に関する情報を表示できなくなります。

$per_request_config
     これがコードへの参照に設定されている場合、リクエストごとに1回実行さ
     れます。この方法で、セッションごとに構成の一部を変更設定できます。
     たとえば、gitweb構成ファイルで以下のコードを使用する場合があります

          our $per_request_config = sub {
                  $ENV{GL_USER} = $cgi->remote_user || "gitweb";
          };

     ‘$per_request_config’ がコードへの参照でない場合、ブール値として解
     釈されます。trueの場合、gitwebはリクエストごとに1回設定ファイルを処
     理し、falseの場合、gitwebは実行されるたびに1回だけ設定ファイルを処
     理します。デフォルトではtrueです(1に設定)。

     *注意*: ‘$my_url’ と ‘$my_uri’ と ‘$base_url’ は、すべてのリクエス
     トの発生前にデフォルト値で上書きされるため、 変更する場合は、必ずこ
     の変数をtrueに設定するか、 必要な変更を行うコードへの参照を設定して
     ください。

     この変数は、mod_perl、FastCGI、Plackupなどの単一のgitwebインスタン
     スを使用して複数のリクエストを処理する永続的なWeb環境を使用する場合
     にのみ重要です。


Other variables
===============

通常、あなたは以下で説明する構成変数を変更(調整)する必要はありません。 そ
れらは正しい値にするために、gitwebが自動で設定する必要があります。

$version
     Gitwebバージョン。gitweb.perlからgitweb.cgiを作成するときに自動的に
     設定されます。たとえば、あなたが変更したgitwebを実行している場合は
     、変更することをお勧めします。

          our $version .= " with caching";

     あなたがキャッシュのサポートがある、変更バージョンのgitwebを実行す
     る場合。この変数は純粋に情報提供用であり、たとえばHTMLヘッダーの「
     generator」メタヘッダー内で使われます。

$my_url
$my_uri
     gitwebスクリプトの完全なURLと絶対URL。以前のバージョンのgitwebでは
     、これらの変数を設定する必要があるかもしれませんが、今では設定する
     必要はありません。 まだ設定する必要がある場合は、
     ‘$per_request_config’ を参照してください。

$base_url
     gitwebによって生成されたページ内の相対URLのベースURL(例えば、相対
     URLの場合は _$logo_ 、 _$favicon_ 、 _@stylesheets_)が必要で、空で
     ないPATH_INFOを持つURLに対してのみ _<base href="$base_url">_ が必要
     でした。通常、gitwebはその値を正しく設定し、この変数に $my_uri や
     "/" などを設定する必要はありません。あなたがとにかくそれをオーバー
     ライドする必要がある場合は、 _$per_request_config_ を参照してくださ
     い。


CONFIGURING GITWEB FEATURES
***************************

多くのgitweb機能は、 ‘%feature’ ハッシュ(連想配列)を使用して有効化(また
は無効化)および構成できます。gitweb機能の名前は、このハッシュのキーです
。

   各 ‘％feature’ ハッシュ(連想配列)要素はハッシュへの参照であり、以下の
構造を持っています:

     "<feature_name>" => {
             "sub" => <feature-sub (subroutine)>,
             "override" => <allow-override (boolean)>,
             "default" => [ <options>... ]
     },

   一部の機能は、プロジェクトごとにオーバーライドできません。 これらの機
能の場合、適切な ‘%feature’ ハッシュ要素の構造はより単純な形式になります
:

     "<feature_name>" => {
             "override" => 0,
             "default" => [ <options>... ]
     },

   上記にはご覧のとおり、’sub’ 要素がありません。

   機能構成の各部分の意味を以下に説明します:

default
     機能パラメータ(存在する場合)のリスト(配列への参照)。特定の機能を切
     り替える(有効または無効にする)ためにも使用されます。

     注意: 機能が構成パラメーターを受け入れない場合でも、現在は常に配列
     への参照であり、’default’ はオンまたはオフにするためにのみ使用され
     ることに注意してください。 このような場合は、この要素を ‘[1]’ に設
     定して機能をオンにし、 ‘[0]’ に設定して機能を解除します。「
     Examples例」セクションの「blame」機能に関する一節も参照してください
     。

     パラメータを受け入れる(設定可能な)機能を無効にするには、この要素を
     空のリスト、つまり ‘[]’ に設定する必要があります。

override
     このフィールドにtrue値がある場合、指定の機能はオーバーライド可能で
     す。つまり、リポジトリごとに構成(または 有効/無効 化)できます。

     通常、指定の「<feature>」は、リポジトリごとのGit構成ファイルの
     ‘gitweb.<feature>’ 構成変数を介して構成できます。

     *注意* デフォルトではオーバーライド可能な機能はありません。

sub
     実装の内部詳細。重要なのは、このフィールドが存在しない場合、特定の
     機能のリポジトリごとのオーバーライドはサポートされないということで
     す。

     あなたはgitweb構成ファイルでこれを変更する必要はありません。


Features in %feature
====================

‘%feature’ ハッシュを介して構成可能なgitweb機能を以下に示します。これは
完全なリストであるべきですが、最終的に信頼できる完全なリストは
gitweb.cgiソースコードにあり、機能はそのコメントで説明されています。

blame
     「blame」および「blame_incremental」ブロブビューを有効にし、各行に
     それを変更した最後のコミットを表示します。 git-blame(1) を参照して
     ください。 これはCPUに非常に負荷がかかる可能性があるため、デフォル
     トでは無効になっています。

     この機能は、リポジトリの ‘gitweb.blame’ 構成変数(ブール値)を介して
     リポジトリごとに構成できます。

snapshot
     「snapshot」アクションを有効にして構成します。これにより、ユーザー
     は、 git-archive(1) によって生成され、そして、場合によってはさらに
     圧縮された、任意のツリーまたはコミットの圧縮アーカイブをダウンロー
     ドできます。大規模なプロジェクトがある場合、これにより大量のトラフ
     ィックが発生する可能性があります。

     ’default’ の値は、提供するスナップショット形式の名前のリストであり
     、 ‘%known_snapshot_formats’ ハッシュで定義されています。サポートさ
     れている形式には、"tgz"、"tbz2"、"txz" (gzip/bzip2/xz で圧縮された
     tarアーカイブ)、および "zip" が含まれます。完全なリストについては、
     gitwebのソースを参照してください。 デフォルトでは、"tgz"のみが提供
     されます。

     この機能は、リポジトリの ‘gitweb.snapshot’ 構成変数を介してリポジト
     リごとに構成できます。この変数には、書式のコンマ区切りリストが含ま
     れるか、スナップショットを無効にする場合は ‘none’ が含まれます。不
     明な値は無視されます。

grep
     grep検索を有効にします。これにより、現在選択されているツリー(ディレ
     クトリ)内で指定の文字列を含むファイルが一覧表示されます。
     git-grep(1) を参照してください。 もちろん、これは潜在的にCPUを集中
     的に使用する可能性があります。 デフォルトで有効になっています。

     この機能は、リポジトリの ‘gitweb.grep’ 構成変数(ブール値)を介してリ
     ポジトリごとに構成できます。

pickaxe
     いわゆるpickaxe検索を有効にします。これにより、ファイル内の特定の文
     字列を導入または削除したコミットが一覧表示されます。 これは実用的で
     、「blame」アクションの非常に高速な代替手段ですが、それでもCPUに負
     荷がかかる可能性があります。 デフォルトで有効になっています。

     pickaxe検索については、 git-log(1) で説明されています(詳細について
     は gitdiffcore(7) のpickaxeエントリの ‘-S<string>’ オプションを参照
     してください)。

     この機能は、リポジトリの ‘gitweb.pickaxe’ 構成変数(ブール値)を設定
     することにより、リポジトリごとに構成できます。

show-sizes
     ‘ls -l’ と同様に、別の列の「ツリー」ビューにブロブ(通常のファイル
     )のサイズを表示できるようにします。 git-ls-tree(1) のmanpageにある
     ‘-l’ オプションの説明を参照してください。これにはちょびっとI/Oコス
     トがかかります。デフォルトで有効になっています。

     この機能は、リポジトリの ‘gitweb.showSizes’ 構成変数(ブール値)を介
     してリポジトリごとに構成できます。

patches
     コミットのリストを電子メール(プレーンテキスト)出力形式で表示する「
     パッチ」ビューを有効にして構成します。 git-format-patch(1) も参照し
     てください。 この値は、「パッチ」ビューで生成されたパッチセット内の
     パッチの最大数です。 _default_ フィールドを、パッチビューを無効にす
     るための単一の項目を含むリストまたは空のリストに設定するか、制限を
     削除するために単一の負の数を含むリストに設定します。デフォルト値は
     16です。

     この機能は、リポジトリの ‘gitweb.patches’ 構成変数(整数)を介してリ
     ポジトリごとに構成できます。

avatar
     アバター(avatar)のサポート。この機能を有効にすると、「shortlog」や
     「commit」などのビューに、各コミッターと作成者の電子メールに関連付
     けられたアバターが表示されます。

     現在利用可能なプロバイダーは、 gravatar と picon です。 一度に選択
     できるプロバイダーは1つだけです(「default」は要素1つだけのリストで
     す)。不明なプロバイダーが指定されている場合、この機能は無効になりま
     す。 *注意* 一部のプロバイダーでは、追加のPerlパッケージをインスト
     ールする必要がある場合があります。 詳細については、
     ‘gitweb/INSTALL’ を参照してください。

     この機能は、リポジトリの ‘gitweb.avatar’ 構成変数を介してリポジトリ
     ごとに構成できます。

     アイコンとアバターのピクセルサイズを含む ‘%avatar_size’ も参照して
     ください( "default" は "log" や "shortlog" などの1行モノに使用され
     、 "double" は "commit"、"commitdiff"、"tag" などの2行モノに使用さ
     れます)。デフォルトのフォントサイズまたは行の高さが変更された場合は
     、これらの値を変更すること(たとえば、 ‘@stylesheets’ にCSSスタイル
     シートを追加するなど)が適切な場合があります。

email-privacy
     生成されたHTMLなどのコンテンツの電子メールアドレスを改訂します。こ
     れにより、Gitログの作者/コミッターおよびコメントセクションから取得
     された電子メールアドレスを不明瞭にします。 これは、アドレスを収集し
     て悪用するWebクローラーを妨害することを目的としています。このような
     クローラーはrobots.txtを尊重しない場合があります。 注意: ユーザーと
     ユーザーツールもアドレスが編集されたものとして表示されることに注意
     してください。Gitwebがワークフローの最後のステップではない場合、後
     続のステップは、受け取った情報が編集されているために誤動作する可能
     性があります。デフォルトでは無効になっています。

highlight
     「ブロブ」ビューでサーバー側構文ハイライトサポートします。
     ‘$height_bin’ プログラムが使用可能である必要があるため(上記の「構成
     変数」セクションの、この変数の説明を参照)、デフォルトで無効になって
     います。

     この機能は、リポジトリの ‘gitweb.highlight’ 構成変数(ブール値)を介
     してリポジトリごとに構成できます。

remote_heads
     「ヘッド」リストにリモートヘッド(リモート追跡ブランチ)を表示できる
     ようにします。ほとんどの場合、リモート追跡ブランチのリストは不要な
     内部プライベート詳細であるため、この機能はデフォルトで無効になって
     います。 git-instaweb(1) は、通常、ローカルリポジトリを参照するため
     に使用され、この機能を有効にして使用します。

     この機能は、リポジトリの ‘gitweb.remote_heads’ 構成変数(ブール値)を
     介してリポジトリごとに構成できます。

   以下の、残りの機能は、プロジェクトごとにオーバーライドすることはでき
ません。

search
     テキスト検索を有効にします。これにより、作者(author)または、コミッ
     ターまたは、コミットテキストが特定の文字列に一致するコミットが一覧
     表示されます。 git-log(1) のmanpage にある ‘--author’ と
     ‘--committer’ と ‘--grep’ オプションの説明を参照してください。デフ
     ォルトで有効になっています。

     プロジェクト固有のオーバーライドはサポートされていません。

forks
     この機能が有効になっている場合、gitwebは、プロジェクトルート(ベース
     名)のサブディレクトリ内のプロジェクトを既存のプロジェクトのフォーク
     と見なします。 ‘$projname.git’ プロジェクトごとに、 ‘$projname/’ デ
     ィレクトリ内のプロジェクトとそのサブディレクトリはメインプロジェク
     トリストに表示されません。代わりに、 ‘$projname’ の横に ‘+’ マーク
     が表示されます。これは、すべてのフォーク(‘$projname/’ サブディレク
     トリ内のすべてのプロジェクト)を一覧表示する "forks" ビューにリンク
     しています。さらに、プロジェクトの「fork」ビューは、プロジェクトの
     概要ページからリンクされています。

     プロジェクトリストがファイルから取得された場合( ‘$projects_list’ は
     ファイルを指している)、フォーク(fork)は、そのファイルのメインプロジ
     ェクトの後にリストされている場合にのみ認識されます。

     プロジェクト固有のオーバーライドはサポートされていません。

actions
     すべてのプロジェクトページのアクションバーへのカスタムリンクを挿入
     します。これにより、あなたはgitwebに統合されているサードパーティの
     スクリプトにリンクできます。

     「default」値は、 ‘("<label>", "<link>", "<position>")’ という3要素
     組形式の、リストで構成されます。ここで、 "position" は、リンクを挿
     入するラベルです。 "link" はフォーマット文字列で、 ‘%n’ はプロジェ
     クト名に展開され、 ‘%f’ はファイルシステム内のプロジェクトパス(つま
     り "$projectroot/$project")に展開され、 ‘%h’ は現在のハッシュ(‘h’
     gitwebパラメーター)、 ‘%b’ は現在のハッシュベース(‘hb’ ’gitwebパラ
     メーター) です。‘%%’ は ‘%’ に展開されます。

     たとえば、このページが作成された時点で、 http://repo.or.cz
     (http://repo.or.cz) Gitホスティングサイトは、グラフィカルログを有効
     にするために次のように設定しました(サードパーティツール git-browser
     を使用):

          $feature{'actions'}{'default'} =
                  [ ('graphiclog', '/git-browser/by-commit.html?r=%n', 'summary')];

     これにより、「summary」リンクの後に「graphiclog」というタイトルのリ
     ンクが追加され、クエリパラメータとして ‘r=<project>’ を渡して、
     ‘git-browser’ スクリプトへ誘導します。

     プロジェクト固有のオーバーライドはサポートされていません。

timed
     ページフッター(ページの下部)に各ページを生成して表示するのにかかっ
     た時間とGitコマンドの数を表示できるようにします。たとえば、フッター
     には次のように含まれます。「This page took 6.53325 seconds and 13
     Git commands to generate.」(このページの生成には6.53325秒と13の
     Gitコマンドが必要でした。)。デフォルトでは無効になっています。

     プロジェクト固有のオーバーライドはサポートされていません。

javascript-timezone
     JavaScriptを介してgitweb出力の日付の共通タイムゾーンを変更する機能
     を有効にして構成します。 gitweb出力の日付には、「commit」ビューと「
     commitdiff」ビューと「log」ビューでのauthordateとcommitterdate、お
     よび「tag」ビューでのtaggerdateが含まれます。デフォルトで有効になっ
     ています。

     値は、3つの値のリストです。デフォルトのタイムゾーン(default time
     zone)(クライアントが他のタイムゾーンを選択してCookieに保存していな
     い場合)と、選択したタイムゾーンを保存するCookieの名前と、操作の日付
     をマークアップするために使用されるCSSクラスです。この機能をオフにす
     る場合は、「default」を空のリストに設定します。つまり ‘[]’ 。

     通常のgitweb構成ファイルでは、最初の、(default)タイムゾーンのみを変
     更し、他の要素はデフォルト値のままにします:

          $feature{'javascript-timezone'}{'default'}[0] = "utc";

     ここに示されている構成例は、下位互換性と上位互換性が保証されていま
     す。

     タイムゾーンの値は、 "local"(ブラウザが使用するローカルタイムゾーン
     の場合)、"utc"(JavaScriptまたは、この機能が無効になっている場合に
     gitwebが使用するもの)、または "‘0200" のような "’/-HHMM" 形式の数値
     のタイムゾーンにすることができます。

     プロジェクト固有のオーバーライドはサポートされていません。

extra-branch-refs
     "refs" の下にある、ブランチのrefとして使用される追加ディレクトリの
     リスト。たとえば、gerrit のセットアップで、refs/heads/ 以下のすべて
     のブランチが公式のもので、push-after-review のもの、そして
     refs/sandbox/, refs/wip, refs/other 以下のブランチはより広いパーミ
     ッションを持つユーザーのものである場合、あなたはこの変数を以下のよ
     うに設定したいと思うことでしょう。

          $feature{'extra-branch-refs'}{'default'} =
                  ['sandbox', 'wip', 'other'];

     この機能は、 $feature{_extra-branch-refs_}{_override_} をtrueに設定
     した後、リポジトリの ‘gitweb.extraBranchRefs’ 構成変数を介して、リ
     ポジトリごとに構成できます。これには、スペースで区切られたrefのリス
     トが含まれます。 例:

          [gitweb]
                  extraBranchRefs = sandbox wip other

     gitweb.extraBranchRefsは実際には複数値の構成変数であるため、以下の
     例も正しくて、結果は上記のスニペットと同じです:

          [gitweb]
                  extraBranchRefs = sandbox
                  extraBranchRefs = wip other

     「gitcheck-ref-format」の精査に合格しないrefを指定するとエラーにな
     ります。 重複した値はフィルタリングされます。


EXAMPLES
********

blameと、pickaxe検索と、スナップショットのサポート("tar.gz" と "zip" の
スナップショットを許可)を有効にし、個々のプロジェクトでそれらをオフにで
きるようにするには、GITWEB_CONFIGファイルに以下のように入力します:

     $feature{'blame'}{'default'} = [1];
     $feature{'blame'}{'override'} = 1;

     $feature{'pickaxe'}{'default'} = [1];
     $feature{'pickaxe'}{'override'} = 1;

     $feature{'snapshot'}{'default'} = ['zip', 'tgz'];
     $feature{'snapshot'}{'override'} = 1;

   スナップショット機能のオーバーライドを許可する場合は、グローバルに無
効にするスナップショット形式を指定できます。必要なコマンドラインオプショ
ン(圧縮レベルの設定など)を追加することもできます。 たとえば、gitweb構成
ファイルに以下の行を追加することで、Zip圧縮スナップショットを無効にし、
gzip(1)をレベル6で実行するように設定できます:

     $known_snapshot_formats{'zip'}{'disabled'} = 1;
     $known_snapshot_formats{'tgz'}{'compressor'} = ['gzip','-6'];


BUGS
****

フォールバック構成ファイル(‘/etc/gitweb.conf’)とその場所をオーバーライド
する環境変数(_GITWEB_CONFIG_SYSTEM_)に、「fallback」の役割を反映した名前
が付いていると、デバッグが容易になります。 現在の名前は、作業セットアッ
プを壊さないように保持されます。


ENVIRONMENT
***********

インスタンスごとおよびシステム全体の構成ファイルの場所は、以下の環境変数
を使用してオーバーライドできます:

GITWEB_CONFIG
     インスタンスごとの構成ファイルの場所を設定します。

GITWEB_CONFIG_SYSTEM
     フォールバックするシステム全体の構成ファイルの場所を設定します。 こ
     のファイルは、インスタンスごとのファイルが存在しない場合にのみ読み
     取られます。

GITWEB_CONFIG_COMMON
     共通のシステム全体の構成ファイルの場所を設定します。


FILES
*****

‘gitweb_config.perl’
     これは、インスタンスごとの構成ファイルのデフォルト名です。このファ
     イルの形式は前述のとおりです。

‘/etc/gitweb.conf’
     これは、フォールバックするシステム全体の構成ファイルのデフォルト名
     です。このファイルは、インスタンスごとの構成変数が見つからない場合
     にのみ使用されます。

‘/etc/gitweb-common.conf’
     これは、共通システム全体の構成ファイルのデフォルト名です。


SEE ALSO
********

gitweb(1), git-instaweb(1)

   _gitweb/README_, _gitweb/INSTALL_


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: gitweb,  Up: Top

Name
****

gitweb — Git Webインターフェイス(GitリポジトリのためのWebフロントエンド)


Synopsis
********

gitwebの使用を開始するには、Gitリポジトリから git-instaweb(1) を実行しま
す。これにより、Webサーバーが構成および起動され、gitwebを指すWebブラウザ
ーが実行されます。


DESCRIPTION
***********

Gitwebは、GitリポジトリへのWebインターフェイスを提供します。その機能は以
下のとおりです:

   • 共通のルートを持つ複数のGitリポジトリを表示します。

   • リポジトリのすべてのリビジョンをブラウズします。

   • リポジトリ内の任意のリビジョンのファイルの内容を表示します。

   • ブランチのリビジョンログ、ファイルとディレクトリの履歴を表示して、
     何がいつ、誰によって変更されたかを表示します。

   • (有効になっている場合)ファイルの blame/annotation の詳細を表示しま
     す。

   • 任意のブランチに対して、コミットのRSSおよびAtomフィードを生成します
     。フィードは、最新のWebブラウザーで自動検出可能です。

   • リビジョンで変更されたすべてのものを表示し、一度に1つずつリビジョン
     をステップ表示して、リポジトリの履歴を表示します。

   • 指定した検索語にマッチするコミットメッセージのコミットを検索します
     。

   gitweb自体を使用してブラウズできるgitwebソースコードについては、
http://repo.or.cz/w/git.git/tree/HEAD:/gitweb/
(http://repo.or.cz/w/git.git/tree/HEAD:/gitweb/) を参照してください。


CONFIGURATION
*************

gitwebの動作のさまざまな側面は、構成ファイル ‘gitweb_config.perl’ または
‘/etc/gitweb.conf’ を介して制御できます。詳細については gitweb.conf(5) を
参照してください。


Repositories
============

Gitwebは、1つ以上のGitリポジトリからの情報を表示できます。 これらのリポ
ジトリはすべてローカルファイルシステム上にあり、共通のリポジトリルートを
共有する必要があります。つまり、すべてが単一の親リポジトリの下にある必要
があります(ただし、「Advanced web server setup」セクションの「Webserver
configuration with multiple projects’ root」(複数のプロジェクトのルート
を使用したWebサーバーの構成)サブセクションも参照してください)。

     our $projectroot = '/path/to/parent/directory';

   ‘$projectroot’ のデフォルト値は ‘/pub/git’ です。 gitwebのビルド中に
、‘GITWEB_PROJECTROOT’ ビルド構成変数を介して変更できます。

   デフォルトでは、 ‘$projectroot’ の下にあるすべてのGitリポジトリが表示
され、gitwebで利用できます。 プロジェクトのリストは、デフォルトで
‘$projectroot’ ディレクトリをスキャンしてGitリポジトリを探します(オブジ
ェクトデータベースをより正確に言うと、gitwebは作業領域に関心がなく、「裸
の」(bare)リポジトリを表示するのに最適です)。

   gitwebのリポジトリの名前は、‘$projectroot’ を基準にした ‘$GIT_DIR’ (そ
のオブジェクトデータベース)へのパスです。 したがって、リポジトリ $repoは
‘$projectroot/$repo’ にあります。


Projects list file format
=========================

$projectroot から始まるファイルシステムをスキャンしてgitwebにリポジトリ
を検索させる代わりに、(いくつかの追加情報を含む)プロジェクトのリストを含
むプレーンテキストファイルを指すように ‘$projects_list’ を設定することに
より、事前生成された表示可能なプロジェクトのリストを提供できます。

   このファイルは以下の形式を使用します:

   • 1行に1つのレコード(プロジェクト/リポジトリ用)。行の継続(改行のエス
     ケープ)はサポートされていません。

   • 先頭と末尾の空白(whitespace)は無視されます。

   • 空白(whitespace)で区切られたフィールド。 空白(whitespace)はすべてフ
     ィールド区切り文字として使用できます(Perlの "‘split(" ", $line)’" ル
     ール)。

   • フィールドは、RFC 3986のセクション2.1(Percent-Encoding)で定義されて
     いるmodified URI encoding、または「Query string encoding」
     (https://en.wikipedia.org/wiki/Query_string#URL_encoding
     (https://en.wikipedia.org/wiki/Query_string#URL_encoding) 参照)を使
     用します。違いは次のとおりです。 そのSP（‘ ‘）は `{plus}’ としてエ
     ンコードできます(したがって、 ‘{plus}’ もパーセントエンコードする必
     要があります)。

     予約文字は次のとおりです: ‘%’ (エンコードに使用)と、 ‘{plus}’ (スペ
     ースのエンコードに使用可能)と SP・TAB・LFを含むPerlで定義されている
     すべての空白文字(レコード内のフィールドの区切りに使用)。

   • 現在認識されているフィールドは以下のとおりです:

     <repository path>
          ‘$projectroot’ に相対的なリポジトリ GIT_DIR へのパス

     <repository owner>
          リポジトリの所有者、できればフルネームまたは電子メール、または
          その両方として表示されます

   あなたはgitwebから直接project_indexアクション(プロジェクトリストペー
ジの TXT リンク)を使用して、プロジェクトリストインデックスファイルを生成
できます。 以下の「Generating projects list using gitweb」(gitwebを使用
したプロジェクトリストの生成)セクションも参照してください。

   内容例:

     foo.git       Joe+R+Hacker+<joe@example.com>
     foo/bar.git   O+W+Ner+<owner@example.org>

   デフォルトでは、このファイルはプロジェクトリストページに「表示」され
るプロジェクトのみを制御します(注意:正しく認識されたGitリポジトリを指し
ていないエントリはgitwebによって表示されないことに注意してください)。あ
なたはプロジェクトがプロジェクトリストページに表示されていない場合でも、
gitwebURLを手動で作成することでプロジェクトを表示できます。
‘$strict_export’ 構成変数(gitweb.conf(5) 参照)をtrueに設定すると、概要ペ
ージにも表示されるリポジトリのみを表示許可します(つまり、プロジェクトリ
ストファイルに明示的にリストされているプロジェクトのみのアクセス)。


Generating projects list using gitweb
=====================================

私達はGITWEB_CONFIGにはデフォルトのMakefile値、つまり「
gitweb_config.perl」があると想定しています。 ‘gitweb_make_index.perl’ フ
ァイルに以下を入れてください:

     read_config_file("gitweb_config.perl");
     $projects_list = $projectroot;

   次に、以下のスクリプトを作成して、GITWEB_LISTビルド構成変数(または
gitweb構成の ‘$projects_list’ 変数)に適した形式でプロジェクトのリストを
取得します。

     #!/bin/sh

     export GITWEB_CONFIG="gitweb_make_index.perl"
     export GATEWAY_INTERFACE="CGI/1.1"
     export HTTP_ACCEPT="*/*"
     export REQUEST_METHOD="GET"
     export QUERY_STRING="a=project_index"

     perl -- /var/www/cgi-bin/gitweb.cgi

   このスクリプトを実行し、その出力をファイルに保存します。このファイル
は、プロジェクトリストファイルとして使用できます。つまり
‘$projects_list’ にそのファイル名を設定できます。


Controlling access to Git repositories
======================================

デフォルトでは、 ‘$projectroot’ の下にあるすべてのGitリポジトリが表示さ
れ、gitwebで利用できます。 ただし、あなたはgitwebがリポジトリへのアクセ
スを制御する方法を構成できます。

   • 「Projects list file format」のセクションで説明したように、プロジェ
     クトリストファイルにリポジトリを選択的に含め、それを指すように ‘$
     projects_list’ gitweb構成変数を設定することにより、どのプロジェクト
     を「表示」するかを制御できます。 ‘$strict_export’ を設定すると、プ
     ロジェクトリストファイルを使用して、「利用可能な」リポジトリを制御
     することもできます。

   • あなたはgitweb構成ファイルの ‘$export_ok’ 変数を使用して、明示的に
     エクスポートされたリポジトリのみを一覧表示して表示できるように
     gitwebを構成できます。 gitweb.conf(5) のmanpageを参照してください。
     trueと評価された場合、gitwebは、 ‘$export_ok’ を評価したファイル名
     のファイルがオブジェクトデータベースに存在する場合にのみリポジトリ
     を表示します(つまりディレクトリに ‘$export_ok’ を評価した値のファイ
     ル名のマジックファイルがある場合)。

     たとえば、 git-daemon(1)は、デフォルトで(‘--export-all’ オプション
     が使用されていない限り)、 ‘git-daemon-export-ok’ ファイルを持つリポ
     ジトリに対してのみプルを許可します。以下のように追加します

          our $export_ok = "git-daemon-export-ok";

     こうすると、gitwebを表示し、 ‘git://’ プロトコルを介してフェッチで
     きるリポジトリへのアクセスのみを許可します。

   • 最後に、リポジトリごとに呼び出される任意のperlサブルーチンを指定し
     て、リポジトリをエクスポートできるかどうかを判断することができます
     。サブルーチンは、プロジェクト(リポジトリ)への絶対パスを唯一のパラ
     メータ(つまり、 ‘$projectroot/$ project’ )として受け取ります。

     たとえば、mod_perlを使用してスクリプトを実行し、リポジトリにバカ
     HTTPプロトコル認証(dumb HTTP protocol authentication)を構成している
     場合、以下のフックを使用して、ユーザーがファイルの読み取りを許可さ
     れている場合にのみアクセスを許可できます。

          $export_auth_hook = sub {
                  use Apache2::SubRequest ();
                  use Apache2::Const -compile => qw(HTTP_OK);
                  my $path = "$_[0]/HEAD";
                  my $r    = Apache2::RequestUtil->request;
                  my $sub  = $r->lookup_file($path);
                  return $sub->filename eq $path
                      && $sub->status == Apache2::Const::HTTP_OK;
          };


Per-repository gitweb configuration
===================================

gitwebに表示される個々のリポジトリを構成するには、Gitリポジトリの
‘GIT_DIR’ にファイルを作成するか、リポジトリ構成変数を設定します(
‘GIT_DIR/config’ で。 git-config(1) 参照)。

   あなたはリポジトリ内で以下のファイルを使用できます:

README.html
     gitwebプロジェクトの「summary」ページの ‘<div>’ ブロック要素内にイ
     ンクルードされるhtmlファイル(HTMLブロック)。プロジェクトのより長い
     説明、リンクの提供(たとえば、プロジェクトのホームページへ)などに使
     用できます。これは、XSS防止がオフの場合にのみ認識されます
     (‘$prevent_xss’ はfalseです。 gitweb.conf(5) 参照)。XSS防止がオンに
     なっているときにREADMEを安全に含める方法は、将来的には解決される可
     能性があります。

description (または ‘gitweb.description’)
     短いプロジェクトの(リポジトリの)1行説明(プロジェクトリストページで
     は ‘$ projects_list_description_width’ に長さをつめます。デフォルト
     では25文字です。 gitweb.conf(5) 参照)。プレーンテキストファイルです
     。 HTMLはエスケープされます。デフォルトで以下のように設定されていま
     す

          Unnamed repository; edit this file to name it for gitweb.

     リポジトリ作成中にテンプレートから引用されます。テンプレートは通常
     は ‘/usr/share/git-core/templates/’ にインストールされます。
     ‘gitweb.description’ リポジトリ構成変数を使用できますが、ファイルが
     優先されます。

category (または ‘gitweb.category’)
     プロジェクトの単一行カテゴリ。 ‘$projects_list_group_categories’ が
     有効になっている場合にプロジェクトをグループ化するために使用されま
     す。(ファイルと構成変数が設定されていない)デフォルトでは、分類され
     ていないプロジェクトは ‘$project_list_default_category’ カテゴリに
     入れられます。 ‘gitweb.category’ リポジトリ構成変数を使用できますが
     、ファイルが優先されます。

     構成変数‘$projects_list_group_categories‘ と
     ‘$project_list_default_category’ は gitweb.conf(5) で説明されていま
     す。

cloneurl (または 複数値変数の ‘gitweb.url’)
     1行に1つずつ、リポジトリURL(クローンとフェッチに使用)を含むファイル
     。プロジェクトの概要ページに表示されます。そのために複数値の
     ‘gitweb.url’ リポジトリ設定変数を使用できますが、ファイルが優先され
     ます。

     これは、グローバルプレフィックスベースの ‘@git_base_url_list’
     gitweb 設定変数をリポジトリ毎用に拡張/改造したものです
     (gitweb.conf(5) 参照)。

gitweb.owner
     ‘gitweb.owner’ リポジトリ設定変数を使用して、リポジトリの所有者を設
     定できます。 プロジェクトリストと概要ページに表示されます。

     これが設定されていない場合、 ‘$projects_list’ が設定されていなけれ
     ば(unset)、(gitweb は ‘$projectroot’ をスキャンしてリポジトリを探し
     、)ファイルシステムディレクトリの所有者(GECOSフィールド、つまり「
     getpwuid(3)」の実名フィールド経由)が使用されます。 ‘$projects_list’
     がリポジトリのリストを含むファイルを指している場合、プロジェクト所
     有者はデフォルトで、指定されたリポジトリのこのファイルの値になりま
     す。

various ‘gitweb.*’ config variables (in config)
     詳細なリストと説明については、 ‘%feature’ ハッシュ(連想配列)の説明
     をお読みください。 gitweb.conf(5) の「Configuring gitweb features」
     (gitweb機能の構成)セクションも参照してください。


ACTIONS, AND URLS
*****************

gitwebは、path_info (コンポーネント)ベースのURLを使用することも、クエリ
パラメーターを介して必要なすべての情報を渡すこともできます。一般的な
gitweb URLは、次の以下の5つのコンポーネントに分類されます:

     .../gitweb.cgi/<repo>/<action>/<revision>:/<path>?<arguments>

repo
     アクションが実行されるリポジトリ。

     利用可能なすべてのプロジェクトをリストするアクションを除く、すべて
     のアクションには、どのような形式でも、このパラメーターが必要です。

action
     実行されるアクション。 デフォルトは、リポジトリが設定されていない場
     合は ‘projects_list’ 、それ以外の場合は ‘summary’ です。

revision
     表示されるリビジョン。デフォルトはHEADです。

path
     それを必要とするアクション用の、アクションが実行される <repository>
     内のパス。

arguments
     アクションの振る舞いを制御する任意の引数。

   一部のアクションでは、2つのリビジョン、場合によっては2つのパス名を指
定する必要があります。最も一般的な形式では、このようなpath_info(コンポー
ネント)ベースの gitweb URL では以下のようになります:

     .../gitweb.cgi/<repo>/<action>/<revision_from>:/<path_from>..<revision_to>:/<path_to>?<arguments>

   各アクションはサブルーチンとして実装され、%actions ハッシュ(連想配列
)に存在する必要があります。一部のアクションはデフォルトで無効になってお
り、機能メカニズムを介してオンにする必要があります。たとえば、 ‘blame’ ビ
ューを有効にするには、gitweb構成ファイルに以下を追加します:

     $feature{'blame'}{'default'} = [1];


Actions:
========

標準のアクションは以下のとおりです:

project_list
     利用可能なGitリポジトリを一覧表示します。 URLにリポジトリが指定され
     ていない場合、これがデフォルトのコマンドです。

summary
     指定されたリポジトリに関する要約を表示します。 これは、URLにアクシ
     ョンが指定されておらず、リポジトリのみが指定されている場合のデフォ
     ルトのコマンドです。

heads
remotes
     特定のリポジトリ内の、すべてのローカル、またはすべてのリモート追跡
     ブランチを一覧表示します。

     後者は、構成されていない限り、デフォルトでは使用できません。

tags
     指定のリポジトリ内のすべてのタグ(軽量および注釈付き)を一覧表示しま
     す。

blob
tree
     指定のリポジトリパス内のファイルとディレクトリの指定のリビジョンを
     表示します。これは、URLにアクションが指定されておらず、パスが指定さ
     れている場合のデフォルトのコマンドです。

blob_plain
     指定されたリポジトリ内の指定されたパスとリビジョンのファイルの生デ
     ータを返します。このアクションへのリンクは ‘raw’ とマークされていま
     す。

blobdiff
     同一ファイルの2つのリビジョンの間の違いを示します。

blame
blame_incremental
     ファイルのblame(注釈とも呼ばれる)情報を表示します。行ごとに、その行
     が最後に変更されたリビジョンと、変更をコミットしたユーザーが表示さ
     れます。(設定されている場合は、JavaScriptが有効なときに自動的に使用
     される、)インクリメンタルバージョンは、Ajaxを使用して、指定されたフ
     ァイルのコンテンツにblame情報をインクリメンタルに追加します。

     このアクションは、パフォーマンス上の理由からデフォルトでは無効にな
     っています。

commit
commitdiff
     リポジトリ内の特定のコミットに関する情報を表示します。 ‘commit’ ビ
     ューにはコミットに関する情報がより詳細に表示され、 ‘commitdiff’ ア
     クションには特定のコミットの変更セットが表示されます。

patch
     git-am(1) で適用するのに適した、プレーンテキストのメール形式でコミ
     ットを返します。

tag
     特定の注釈付きタグ(タグオブジェクト)を表示します。

log
shortlog
     (特定のリビジョンから開始の)特定のブランチのログ情報(コミットメッセ
     ージまたはコミット件名)を表示します。

     shortlogビューはよりコンパクトです。1行に1つのコミットが表示されま
     す。

history
     指定されたリビジョンから開始して、指定されたリポジトリパス内のファ
     イルまたはディレクトリの履歴を表示します(デフォルトはHEAD、つまりデ
     フォルトのブランチ)。

     このビューは「shortlog」ビューに似ています。

rss
atom
     リポジトリへの変更のRSS(またはAtom)フィードを生成します。


WEBSERVER CONFIGURATION
***********************

このセクションでは、gitwebを実行するようにいくつかの一般的なWebサーバー
を構成する方法について説明します。いずれの場合も、例の ‘/path/to/gitweb’
は、インストールしたgitwebを実行したディレクトリであり、
‘gitweb_config.perl’ を含んでいます。

   あなたが、以下にリストされていない Web サーバーを gitweb 用に構成した
場合は、将来のリリースに含めることができるように、ぜひ手順を送ってくださ
い。


Apache as CGI
=============

Apacheは、gitwebがインストールされているディレクトリでCGIスクリプトをサ
ポートするように設定する必要があります。 それが ‘/var/www/cgi-bin’ ディ
レクトリであると仮定しましょう。

     ScriptAlias /cgi-bin/ "/var/www/cgi-bin/"

     <Directory "/var/www/cgi-bin">
         Options Indexes FollowSymlinks ExecCGI
         AllowOverride None
         Order allow,deny
         Allow from all
     </Directory>

   この構成では、リポジトリをブラウズするためのフルパスは以下のようにな
ります:

     http://server/cgi-bin/gitweb.cgi


Apache with mod_perl, via ModPerl::Registry
===========================================

あなたはgitwebでmod_perlを使用できます。このサポートを有効にするには、
mod_perl 1.xの場合は Apache::Registry をインストールする必要があり、また
、 mod_perl 2.x の場合は ModPerl::Registry をインストールする必要があり
ます。

   gitwebが ‘/var/www/perl’ にインストールされていると仮定すると、以下の
Apache構成(mod_perl 2.xの場合)が適切です。

     Alias /perl "/var/www/perl"

     <Directory "/var/www/perl">
         SetHandler perl-script
         PerlResponseHandler ModPerl::Registry
         PerlOptions +ParseHeaders
         Options Indexes FollowSymlinks +ExecCGI
         AllowOverride None
         Order allow,deny
         Allow from all
     </Directory>

   この構成では、リポジトリをブラウズするためのフルパスは以下のようにな
ります:

     http://server/perl/gitweb.cgi


Apache with FastCGI
===================

GitwebはApache＋FastCGIで動作します。 まず、 gitweb.cgiの名前を変更する
か、コピーするか、シンボリックリンクして gitweb.fcgi にする必要がありま
す。gitwebが ‘/usr/share/gitweb’ ディレクトリにインストールされていると
仮定しましょう。以下のApache構成が適しています(スマン。これれはテストさ
れていません！)

     FastCgiServer /usr/share/gitweb/gitweb.cgi
     ScriptAlias /gitweb /usr/share/gitweb/gitweb.cgi

     Alias /gitweb/static /usr/share/gitweb/static
     <Directory /usr/share/gitweb/static>
         SetHandler default-handler
     </Directory>

   この構成では、リポジトリをブラウズするためのフルパスは以下のようにな
ります:

     http://server/gitweb


ADVANCED WEB SERVER SETUP
*************************

これらの例はすべてリクエストの書き換えを使用しており、 ‘mod_rewrite’ (ま
たは同等のもの。以下の例はApache用に記述されています)が必要です。


Single URL for gitweb and for fetching
======================================

gitwebと あなたの ‘http://’ リポジトリの両方に1つのURLが必要な場合は、以
下のようにApacheを構成できます:

     <VirtualHost *:80>
         ServerName    git.example.org
         DocumentRoot  /pub/git
         SetEnv        GITWEB_CONFIG   /etc/gitweb.conf

         # turning on mod rewrite
         RewriteEngine on

         # make the front page an internal rewrite to the gitweb script
         RewriteRule ^/$  /cgi-bin/gitweb.cgi

         # make access for "dumb clients" work
         RewriteRule ^/(.*\.git/(?!/?(HEAD|info|objects|refs)).*)?$ \
                     /cgi-bin/gitweb.cgi%{REQUEST_URI}  [L,PT]
     </VirtualHost>

   上記の構成では、あなたのパブリックリポジトリが ‘/pub/git’ 下にあり、
クローン可能なGit URLとブラウズ可能なgitwebインターフェイスの両方として
‘http://git.domain.org/dir-under-pub-git’ としてサービス提供することを想
定しています。あなたの git-daemon(1) を ‘--base-path=/pub/git
--export-all’ を伴って開始すると、まったく同じパスで ‘git://’ URLを使用
することもできます。

   環境変数 ‘GITWEB_CONFIG’ を設定すると、名前付きファイル(つまり、この
例では ‘/etc/gitweb.conf’)をgitwebの構成として使用するようにgitwebに指示
します。 上記の例では、実際には必要ありません。構成ファイルが組み込み
(gitwebのコンパイル中) や ‘gitweb_config.perl’ や ‘/etc/gitweb.conf’ と
は異なる場所にある場合にのみ必要です。 詳細、特に優先順位ルールに関する
情報については、 gitweb.conf(5) を参照してください。

   あなたが例の書き換えルールを使用する場合は、gitweb構成ファイル(以下の
例の ‘/etc/gitweb.conf’)に以下のようなものも必要になる場合があります:

     @stylesheets = ("/some/absolute/path/gitweb.css");
     $my_uri    = "/";
     $home_link = "/";
     $per_request_config = 1;

   今どきでは、gitwebは必要に応じて、(相対リンクのベースURIを設定するた
めに、)HTMLベースタグを作成する必要があるため、自動的に機能するはずです
。


Webserver configuration with multiple projects’ root
====================================================

あなたが複数のプロジェクトルートでgitwebを使用する場合は、以下の方法で
Apache仮想ホストとgitweb構成ファイルを編集できます。

   (Apache構成ファイル内の)仮想ホスト構成は以下のようになります:

     <VirtualHost *:80>
         ServerName    git.example.org
         DocumentRoot  /pub/git
         SetEnv        GITWEB_CONFIG  /etc/gitweb.conf

         # turning on mod rewrite
         RewriteEngine on

         # make the front page an internal rewrite to the gitweb script
         RewriteRule ^/$  /cgi-bin/gitweb.cgi  [QSA,L,PT]

         # look for a public_git folder in unix users' home
         # http://git.example.org/~<user>/
         RewriteRule ^/\~([^\/]+)(/|/gitweb.cgi)?$   /cgi-bin/gitweb.cgi \
                     [QSA,E=GITWEB_PROJECTROOT:/home/$1/public_git/,L,PT]

         # http://git.example.org/+<user>/
         #RewriteRule ^/\+([^\/]+)(/|/gitweb.cgi)?$  /cgi-bin/gitweb.cgi \
                      [QSA,E=GITWEB_PROJECTROOT:/home/$1/public_git/,L,PT]

         # http://git.example.org/user/<user>/
         #RewriteRule ^/user/([^\/]+)/(gitweb.cgi)?$ /cgi-bin/gitweb.cgi \
                      [QSA,E=GITWEB_PROJECTROOT:/home/$1/public_git/,L,PT]

         # defined list of project roots
         RewriteRule ^/scm(/|/gitweb.cgi)?$ /cgi-bin/gitweb.cgi \
                     [QSA,E=GITWEB_PROJECTROOT:/pub/scm/,L,PT]
         RewriteRule ^/var(/|/gitweb.cgi)?$ /cgi-bin/gitweb.cgi \
                     [QSA,E=GITWEB_PROJECTROOT:/var/git/,L,PT]

         # make access for "dumb clients" work
         RewriteRule ^/(.*\.git/(?!/?(HEAD|info|objects|refs)).*)?$ \
                     /cgi-bin/gitweb.cgi%{REQUEST_URI}  [L,PT]
     </VirtualHost>

   ここで、実際のプロジェクトルートはWebサーバーから
‘GITWEB_PROJECT_ROOT’ 環境変数を介してgitwebに渡されるため、gitweb構成フ
ァイル(上記の例では ‘/etc/gitweb.conf’)に以下の行を入れる必要があります:

     $projectroot = $ENV{'GITWEB_PROJECTROOT'} || "/pub/git";

   *Note* これはリクエストごとに設定する必要があるため、 ‘$
per_request_config’ はfalseであるか、 上記を ‘$per_request_config’ によ
って参照されるコードに含める必要があります。

   これらの構成により、2つのことが可能になります。 まず、サーバーの各
UNIXユーザー(‘<user>’)は、 ‘~/public_git/’ にある gitweb Gitリポジトリを
以下のURLで参照できます:

     http://git.example.org/~<user>/

   あなたがサーバーでこの機能を使用したくない場合は、2番目の書き換えルー
ルを削除してください。

   仮想ホストですでに ‘mod_userdir’ を使用している場合、または最初の文字
として ‘~‘ を使用したくない場合は、2番目の書き換えルールをコメント化また
は削除し、必要に応じてそれ以降のいずれかをコメント化解除します。

   次に、 ‘/pub/scm/’ と ‘/var/git/’ にあるリポジトリには、
‘http://git.example.org/scm/’ と ‘http://git.example.org/var/’ からアク
セスできます。3番目や4番目のような書き換えルールを追加することで、必要な
数のプロジェクトルートを追加できます。


PATH_INFO usage
===============

あなたがgitwebでPATH_INFOの使用を有効にするには以下のようにします

     $feature{'pathinfo'}{'default'} = [1];

   あなたのgitweb構成ファイルで、あなたのサーバーが以下の形式のURLを消費
および生成するようにサーバーを設定することができます

     http://git.example.com/project.git/shortlog/sometag

   つまり、以下のような構成を使用して、 ‘gitweb.cgi’ 部分を使用しません
。この構成では、 ‘/var/www/gitweb’ がWebサーバーのDocumentRootであり、
gitweb.cgiスクリプトと補完的な静的ファイル(スタイルシート、favicon、
JavaScript)が含まれていることを前提としています:

     <VirtualHost *:80>
             ServerAlias git.example.com

             DocumentRoot /var/www/gitweb

             <Directory /var/www/gitweb>
                     Options ExecCGI
                     AddHandler cgi-script cgi

                     DirectoryIndex gitweb.cgi

                     RewriteEngine On
                     RewriteCond %{REQUEST_FILENAME} !-f
                     RewriteCond %{REQUEST_FILENAME} !-d
                     RewriteRule ^.* /gitweb.cgi/$0 [L,PT]
             </Directory>
     </VirtualHost>

   書き換えルールは、既存の静的ファイルが適切に提供されることを保証しま
すが、他のURLはPATH_INFOパラメーターとしてgitwebに渡されます。

   *注意* この場合、 ‘@stylesheets’ と ‘$my_uri’ と ‘$home_link’ の特別
な設定は必要ありません。 ただし、あなたのプロジェクトの .git ディレクト
リへの「ダムクライアント」(dumb client)アクセスは失われます (「Single
URL for gitweb and for fetching」セクションで説明されています)。 後者の
可能な回避策は次のとおりです。 つまり、あなたのプロジェクトのルートディ
レクトリ(例: ‘/pub/git’)に、 .git拡張子なしで名前を付けたプロジェクト(例
: ‘/pub/git/project.git’ の代わりに ‘/pub/git/project’)を作成し、
Apacheを以下のように構成します:

     <VirtualHost *:80>
             ServerAlias git.example.com

             DocumentRoot /var/www/gitweb

             AliasMatch ^(/.*?)(\.git)(/.*)?$ /pub/git$1$3
             <Directory /var/www/gitweb>
                     Options ExecCGI
                     AddHandler cgi-script cgi

                     DirectoryIndex gitweb.cgi

                     RewriteEngine On
                     RewriteCond %{REQUEST_FILENAME} !-f
                     RewriteCond %{REQUEST_FILENAME} !-d
                     RewriteRule ^.* /gitweb.cgi/$0 [L,PT]
             </Directory>
     </VirtualHost>

   追加のAliasMatchにより、

     http://git.example.com/project.git

   これはプロジェクトのGitディレクトリへの生のアクセスを提供します(プロ
ジェクトのクローンを作成できるようにします)。

     http://git.example.com/project

   これは人間に優しいgitwebアクセスを提供します。

   この解決策100%安全ではありません。つまり、プロジェクトに ‘git/’ で始
まる名前付きref(ブランチ、タグ)がある場合、以下のようなパスがあります

     http://git.example.com/project/command/abranch..git/abranch

   これは404エラーで失敗します。


BUGS
****

お手数ですが、メールの件名に「gitweb」を入れて、バグや機能のリクエストを
git@vger.kernel.orgに報告してください (mailto:バグや機能のリクエストを
git@vger.kernel.orgに報告してください)。


SEE ALSO
********

gitweb.conf(5), git-instaweb(1)

   ‘gitweb/README’, ‘gitweb/INSTALL’


GIT
***

Part of the git(1) suite


File: gitman.info,  Node: gitworkflows,  Up: Top

Name
****

gitworkflows — Gitで推奨の作業手順の概要


Synopsis
********

     git *


DESCRIPTION
***********

この文書は、 ‘git.git’ 自体に使用されるワークフロー要素のいくつかを書き
留めて動機付けしようとしています。一般に多くのアイデアが当てはまりますが
、関係者が少ない小規模なプロジェクトではこのような完全なワークフローが必
要になることはめったにありません。

   私たちが、すぐに参照できるように一連の「ルール」を作ったのは、本当に
みんなのモチベーションを高めるためです。ですから常に文字通りに解釈する必
要はありません。このような文章よりも、自分の行動に対する正当な理由を大切
にしてください。


SEPARATE CHANGES
****************

原則として、変更を小さな論理ステップに分割し、それぞれでコミットするよう
にしてください。それらは一貫性があり、その後のコミットとは独立して機能し
、テストスイートに合格する必要があります。これにより、レビュープロセスが
はるかに簡単になり、その履歴は、たとえば git-blame(1) や git-bisect(1)を
使用して後で検査や分析する時にはるかに役立ちます。

   これを実現するには、最初から作業を小さなステップに分割してみてくださ
い。1つの大きなコミットを複数に分割するよりも、いくつかのコミットをまと
める方が常に簡単です。途中で小さすぎる、または不完全なステップを作成する
ことを恐れないでください。いつでも後で戻って、公開する前に ‘git rebase
--interactive’ を使用してコミットを編集できます。 ‘git stash push
--keep-index’ を使用して、他のコミットされていない変更とは無関係にテスト
スイートを実行できます。 git-stash(1) の「EXAMPLES」セクションを参照して
ください。


MANAGING BRANCHES
*****************

あるブランチから別のブランチへの変更を含めるために使用できる2つの主要な
ツールがあります。 git-merge(1) と git-cherry-pick(1) です。

   マージには多くの利点があるため、マージだけで可能な限り多くの問題を解
決しようとしています。 cherry-pickingまだ時々役に立ちます。例については
、以下の「Merging upwards」を参照してください。

   最も重要なことは、マージはブランチレベルで機能し、チェリーピッキング
はコミットレベルで機能することです。これは、マージが1、10、または1000の
コミットからの変更を同じように簡単に引き継ぐことができることを意味します
。つまり、ワークフローは多数の貢献者(および貢献)に対してはるかに適切にス
ケーリングされます。マージコミットは、すべての親からのすべての変更が含ま
れた「約束」(promise)であるため、マージも理解しやすくなります。

   もちろん、トレードオフがあります。マージには、より慎重なブランチ管理
が必要です。以下のサブセクションでは、重要なポイントについて説明します。


Graduation
==========

特定の機能が実験的なもの(experimental)から安定したもの(stable)に変わると
、ソフトウェアの対応するブランチ間でも「段階的に」(graduates)移行します
。 ‘git.git’ は以下の「統合ブランチ」(integration branches)を使用します:

   • _maint_ は、次の「メンテナンスリリース」(maintenance release)、つま
     り最後にリリースされた安定バージョンの更新に入るコミットを追跡しま
     す

   • _master_ は、次のリリースに入る予定のコミットを追跡します。

   • _next_ は、masterの安定性をテストするトピックのテストブランチとして
     意図されています。

   少し異なる方法で使用される4番目の公式ブランチがあります:

   • _seen_ (メンテナによって表示されるパッチ)は、まだ含める準備が整って
     いないモノの統合ブランチです(以下の「Integration Branches」を参照
     )。

   4つのブランチのそれぞれは、通常、その上のブランチの直接の子孫です。

   概念的には、機能(feature)は不安定なブランチ(通常は「next」または「
seen」)に入り、十分に安定している(stable)と見なされると、次のリリースの
ために「master」に「卒業」(graduates)します。


Merging upwards
===============

上記の「downwards graduation」(下向きの卒業)は、実際に下向きにマージする
ことによって実行することはできません。なぜなら、不安定なブランチの「すべ
ての」変更が安定したブランチにマージされるためです。 したがって、以下の
ようになります:

   *Merge upwards*

   修正を必要とするサポートされている最も古いブランチに常に修正をコミッ
トします。 次に、 (定期的に)統合ブランチを互いに上向きにマージします。

   これにより、修正のフローが非常によく制御されます。たとえば、修正を適
用したことに気付いた場合。 _maint_ でも必要な _master_ は、
(git-cherry-pick(1) を使用して)下向きにチェリーピックする必要があります
。これは数回発生しますが、頻繁に実行しない限り心配する必要はありません。


Topic branches
==============

重要な機能を実装するにはいくつかのパッチが必要であり、その存続期間中に追
加のバグ修正または改善が行われる可能性があります。

   統合ブランチですべてを直接コミットすると、多くの問題が発生します。不
正なコミットは元に戻せないため、1つずつ元に戻す必要があります。これによ
り、変更のグループの一部を元に戻すのを忘れると、混乱した履歴とエラーが発
生する可能性があります。並行して作業すると、変更がごちゃまぜになり、さら
に混乱が生じます。

   「topic branches」(トピックブランチ)を使用すると、これらの問題が解決
されます。名前はかなり自明ですが、上記の「merge upwards」(上向きにマージ
)ルールに由来する警告があります:

   *Topic branches*

   すべてのトピック(機能、バグ修正など)のサイドブランチを作成します。最
終的にマージする最も古い統合ブランチでフォークします。

   そうすれば、以下のように多くのことが非常に自然に実行できます:

   • 機能/バグ修正を統合ブランチに取り込むには、それをマージするだけです
     。その間にトピックがさらに進化した場合は、再度マージしてください。
     (必ずしも最初に最も古い統合ブランチにマージする必要はないことに注意
     してください。たとえば、最初にバグ修正を next にマージし、テスト時
     間を与え、安定していることがわかったら maint にマージできます。)

   • トピックの作業を続行するためにブランチ other の新機能が必要な場合は
     、 other を topic にマージします。 (ただし、これを「習慣的に」行わ
     ないでください。以下を参照してください。)

   • 分岐したブランチが間違っていることに気づき、それを「過去にさかのぼ
     って」移動したい場合は、 git-rebase(1) を使用してください。

   注意: 最後の項目が他の2つと衝突することに注意してください。他の場所で
マージされたトピックは、リベースしないでください。 git-rebase(1) の「
RECOVERING FROM UPSTREAM REBASE」に関するセクションを参照してください。

   (通常は理由もなく)「習慣的に」統合ブランチをあなたのトピックにマージ
すること(つまり、トピックを拡張し、定期的に上流からマージし続けること)は
眉をひそめられる行為であることを指摘しておく必要があります。

   *明確に定義されたポイントでのみ下流にマージします*

   正当な理由がある場合を除いて、ダウンストリームにマージしないでくださ
い。正当な理由とは、例えば、アップストリームAPIの変更がブランチに影響す
る、ブランチがアップストリームにきれいにマージされなくなりました、等です
。

   正当な理由以外の場合、マージされたトピックには、(激しくバラバラの)突
然の複数の変更が含まれます。結果として生じる多くの小さなマージは、履歴を
大幅に混乱させます。後でファイルの履歴を調査する人は、そのマージが開発中
のトピックに影響を与えたかどうかを確認する必要があります。アップストリー
ムは、誤って「より安定した」ブランチにマージされることさえあるかも等々。


使い捨て統合
============

先程の話題についていうと、多くの小さなトピックブランチがあり、あなたはそ
れらがどのように相互作用するのかワケワカメに思うことがあるでしょう。それ
らをマージしたらちゃんと機能しないかも？ そして、このようなマージは簡単
に元に戻せないため、我々はこれらに対して「安定した」場所でのマージは避け
たいと考えています。

   もちろん、解決策は、元に戻すことができるマージを作成することです。つ
まり、使い捨てブランチ(throw-away branch)にマージします。

   *Throw-away integration branches*

   いくつかのトピックの相互作用をテストするには、それらを使い捨てのブラ
ンチにマージします。あなたは決してそのようなブランチに基づいて作業を行っ
てはいけません！

   テストの直後にこのブランチが削除されることを(非常に)明確にすると、こ
のブランチを公開して、たとえば、テスターがこのブランチを操作できるように
したり、他の開発者が進行中の作業に互換性があるかどうかを確認したりするこ
ともできます。 ‘git.git’ には、「seen」と呼ばれるそのような公式の使い捨
て統合ブランチがあります。


Branch management for a release
===============================

上記のマージアプローチを使用していると仮定すると、プロジェクトをリリース
するときに、追加のブランチ管理作業を行う必要があります。

   「master」は次の機能(feature)リリースに入るコミットを追跡するため、機
能(feature)リリースは「master」ブランチから作成されます。

   _master_ ブランチは、 _maint_ のスーパーセットであると想定されていま
す。この条件が満たされない場合、「maint」には「master」に含まれていない
コミットが含まれています。したがって、「maint」のコミットによって表され
る修正は、機能(feature)リリースには含まれません。

   _master_ が実際に _maint_ のスーパーセットであることを確認するには、
‘git log’ を使用します:

   *「master」が「maint」のスーパーセットであることを確認(verify)します
:*

   ‘git log master..maint’

   このコマンドは、コミットを一切リストしないはずです。そうでない場合は
、「master」をチェックアウトし、「maint」をマージします。

   これで、あなたは機能(feature)リリースの作成に進むことができます。リリ
ースバージョンを示すタグを「master」の先端に適用します:

   *Release tagging*

   ‘git tag -s -m "Git X.Y.Z" vX.Y.Z master’

   あなたは新しいタグをパブリックGitサーバーにプッシュする必要があります
(以下の「DISTRIBUTED WORKFLOWS」参照)。これにより、プロジェクトを追跡し
ている他のユーザーがタグを利用できるようになります。プッシュでは、更新後
のフックをトリガーして、リリースtarballの作成や事前にフォーマットされた
ドキュメントページなどのリリース関連の項目を実行することもできます。

   同様に、メンテナンスリリースの場合、「maint」はリリースされるコミット
を追跡します。ゆえに、タグのリリース手順では、「master」ではなく「
maint」にタグを付けてプッシュするだけです。


機能リリース後のメンテナンスブランチ管理
========================================

機能(feature)リリース後、あなたはメンテナンスブランチを管理する必要があ
ります。

   まず、直近のリリースより前に行われた機能リリースのメンテナンス修正を
引き続きリリースする場合は、その前のリリースのコミットを追跡するために別
のブランチを作成する必要があります。

   これを行うために、現在のメンテナンスブランチは、以前のリリースバージ
ョン番号で名前が付けられた別のブランチにコピーされます(例:
maint-X.Y.(Z-1) ここでX.Y.Zは現在のリリースとする)。

   *Copy maint*

   ‘git branch maint-X.Y.(Z-1) maint’

   ’maint’ブランチは、新しくリリースされたコードに早送り
(fast-forwarded)され、現在のリリースのメンテナンス修正を追跡できるように
なります:

   *Update maint to new release*

   • ‘git checkout maint’

   • ‘git merge --ff-only master’

   早送り(fast-forwarded)ではないためにマージが失敗した場合は、機能リリ
ースで「maint」のいくつかの修正が欠落している可能性があります。前のセク
ションで説明したようにブランチのコンテンツを検証(verify)した場合、これは
発生しません。


機能リリース後の「next」と「seen」のブランチ管理
================================================

機能のリリース後、統合ブランチ _next_ は、オプションで、 _next_ の残りの
トピックを使用して、 _master_ の先端から巻き戻されて再構築される場合があ
ります:

   *Rewind and rebuild next*

   • ‘git switch -C next master’

   • ‘git merge ai/topic_in_next1’

   • ‘git merge ai/topic_in_next2’

   • …

   これを行うことの利点は、「next」の履歴がクリーンになることです。 たと
えば、「next」にマージされた一部のトピックは、最初は有望に見えたかもしれ
ませんが、後で望ましくないか時期尚早であることがわかりました。このような
場合、トピックは「next」から元に戻され(revert)ますが、一度マージされて元
に戻されたという事実は履歴に残ります。「next」を再作成することで、そのよ
うなトピックの別の化身に再試行するためのきれいな状態を与えることができま
す。機能のリリースは、これを行うための履歴上の良い地点です。

   これを行う場合は、「next」が巻き戻されて再構築されたことを示す公開ア
ナウンスを行う必要があります。

   「seen」についても、同じの巻き戻しと再構築のプロセスを行います。なお
、上記のとおり「seen」は使い捨てのブランチであるため、公の発表は必要あり
ません。


DISTRIBUTED WORKFLOWS
*********************

前セクションを読んだ今となっては、あなたはトピックを管理する方法を知って
おくべきです。 一般的に、プロジェクトに取り組んでいるのはあなただけでは
ないので、あなたの仕事は共有しなければなりません。

   大まかに言えば、マージとパッチという2つの重要な作業フローがあります。
重要な違いは、マージ作業フローはマージを含む完全な履歴を伝播できますが、
パッチは伝播できないことです。両方の作業フローを並行して使用できます。
‘git.git’ では、サブシステムメンテナのみがマージ作業フローを使用し、他の
すべての作業フローはパッチを送信します。

   注意: メンテナは、インクルードするために提出されたすべてのコミット/パ
ッチが遵守しなければならない「Signed-off-by」要件などの制限を課すことが
できることに注意してください。より詳細な情報については、プロジェクトのド
キュメントを参照してください。


Merge workflow
==============

マージ作業フローは、上流(upstream)と下流(downstream)の間でブランチをコピ
ーすることによって機能します。上流では、貢献の結果を公式の履歴に統合する
ことができます。下流では、公式の履歴に基づいて作業します。

   これに使用できる主なツールは3つあります:

   • git-push(1) は、ブランチをリモートリポジトリにコピーします。通常は
     、関係者全員が読み取れるリポジトリにコピーします。

   • git-fetch(1) は、リモートブランチをあなたのリポジトリにコピーします
     。

   • git-pull(1) は、フェッチしてマージするのを一度に行います。

   注意: 最後の点に注意してください。 実際にリモートブランチをマージする
場合を除いて ‘git pull’ を使用しないでください。

   変更を取得するのは簡単です:

   *push/pull: branches/topics の公開*

   ‘git push <remote> <branch>’ を実行、そして、どこからフェッチできるか
をみんなに伝えます。

   あなたは今の所メールなどの他の手段で人々に伝えなければなりません。
(Gitは git-request-pull(1) を提供して、このタスクを簡素化するために、事
前にフォーマットされたプルリクエストをアップストリームのメンテナーに送信
します。 )

   統合ブランチの最新のコピーを取得したいだけの場合は、最新の状態に保つ
のも簡単です:

   *push/pull: 最新の状態に保つ*

   最新の状態に保つには ‘git fetch <remote>’ または ‘git remote update’
を使います。

   次に、以前に説明したように、安定したリモートからトピックブランチをフ
ォークするだけです。

   あなたがメンテナであり、他の人のトピックブランチを統合ブランチにマー
ジしたい場合、他の人々は通常、メールでそうするようにリクエストを送信して
きます。そのようなリクエストは以下のようになります

     Please pull from
         <url> <branch>

   その場合、 ‘git pull’ は、以下のように、フェッチとマージを一度に実行
できます。

   *Push/pull: Merging remote topics*

   ‘git pull <url> <branch>’

   場合によっては、メンテナが下流(downstream)から変更をプルしようとする
と、マージの競合が発生することがあります。 この場合、下流にマージを実行
して競合を彼ら自身で解決するように依頼できます(おそらく、彼らは競合を解
決する方法をよりよく知っているでしょう)。これは、下流が上流(upsteram)か
らマージする必要があるまれなケースの1つです。


Patch workflow
==============

あなたが変更を電子メールの形式でアップストリームに送信する貢献者の場合は
、通常どおりトピックブランチを使用する必要があります(上記参照)。 次に、
git-format-patch(1) を使用して、対応する電子メールを生成します(メンテナ
の作業が楽になるため、手動でフォーマットするよりもこれを使うのを強く推奨
します)。

   *format-patch/am: Publishing branches/topics*

   • ‘git format-patch -M upstream..topic’ を使用して、事前に形式が決ま
     っているパッチファイルに変換します

   • ‘git send-email --to=<recipient> <patches>’

   使用上の注意については、 git-format-patch(1) と git-send-email(1) の
manpageを参照してください。

   あなたのパッチがもはや現在の上流(upstream)に適用されなくなったとメン
テナが告げた場合は、トピックをリベースする必要があります(format-patch マ
ージができないため、マージを使用できません):

   *format-patch/am: Keeping topics up to date*

   ‘git pull --rebase <url> <branch>’

   あなたはその後、リベース中に競合を修正できます。おそらくあなたはメー
ル以外であなたのトピックを公開していないので、それをリベースすることは問
題ではありません。

   あなたがこのようなパッチシリーズを受け取った場合(メンテナとして、また
は送信先のメーリングリストの読者として)、メールをファイルに保存し、新し
いトピックブランチを作成し、 ‘git am’ を使用してコミットをインポートしま
す:

   *format-patch/am: Importing patches*

   ‘git am < patch’

   指摘する価値のある機能の1つは、競合が発生した場合に役立つ3方向マージ
です。 ‘git am -3’ は、パッチに含まれるインデックス情報を使用して、マー
ジベースを把握します。他のオプションについては git-am(1) を参照してくだ
さい。


SEE ALSO
********

gittutorial(7), git-push(1), git-pull(1), git-merge(1), git-rebase(1),
git-format-patch(1), git-send-email(1), git-am(1)


GIT
***

Part of the git(1) suite



Tag Table:
Node: Top216
Node: git-add3477
Node: git-am20115
Node: git-annotate29214
Node: git-apply39671
Node: git-archimport51683
Node: git-archive57286
Node: git-bisect66507
Node: git-blame83576
Node: git-branch101742
Node: git-bugreport117470
Node: git-bundle119469
Node: git-cat-file131501
Node: git-check-attr142771
Node: git-check-ignore146641
Node: git-check-mailmap152330
Node: git-check-ref-format153830
Node: git-checkout-index161415
Node: git-checkout167140
Node: git-cherry-pick199076
Node: git-cherry209281
Node: git-citool213798
Node: git-clean214580
Node: git-clone221038
Node: git-column240463
Node: git-commit-graph243098
Node: git-commit-tree251472
Node: git-commit260644
Node: git-config290363
Node: git-count-objects590845
Node: git-credential-cache--daemon592993
Node: git-credential-cache594158
Node: git-credential-store597111
Node: git-credential602047
Node: git-cvsexportcommit610496
Node: git-cvsimport615019
Node: git-cvsserver623364
Node: git-daemon639738
Node: git-describe657807
Node: git-diff-files666613
Node: git-diff-index726301
Node: git-diff-tree791039
Node: git-diff882853
Node: git-difftool949439
Node: git-fast-export954968
Node: git-fast-import966209
Node: git-fetch-pack1029765
Node: git-fetch1035996
Node: git-filter-branch1075145
Node: git-fmt-merge-msg1106727
Node: git-for-each-ref1110105
Node: git-for-each-repo1131735
Node: git-format-patch1133837
Node: git-fsck-objects1188849
Node: git-fsck1189262
Node: git-gc1202626
Node: git-get-tar-commit-id1219348
Node: git-grep1220676
Node: git-gui1233414
Node: git-hash-object1238279
Node: git-help1241156
Node: git-http-backend1247922
Node: git-http-fetch1259566
Node: git-http-push1262005
Node: git-imap-send1266348
Node: git-index-pack1273658
Node: git-init-db1281532
Node: git-init1281976
Node: git-instaweb1288742
Node: git-interpret-trailers1291739
Node: git-log1313304
Node: git-ls-files1461382
Node: git-ls-remote1473735
Node: git-ls-tree1479230
Node: git-mailinfo1484405
Node: git-mailsplit1490187
Node: git-maintenance1492055
Node: git-merge-base1511264
Node: git-merge-file1519528
Node: git-merge-index1523246
Node: git-merge-one-file1526591
Node: git-merge-tree1527050
Node: git-merge1528032
Node: git-mergetool--lib1564678
Node: git-mergetool1566747
Node: git-mktag1576578
Node: git-mktree1579129
Node: git-multi-pack-index1580750
Node: git-mv1585959
Node: git-name-rev1588952
Node: git-notes1592527
Ref: git-notes-Footnote-11607788
Node: git-p41608004
Node: git-pack-objects1645781
Node: git-pack-redundant1672508
Node: git-pack-refs1674054
Node: git-patch-id1677106
Node: git-prune-packed1680218
Node: git-prune1681539
Node: git-pull1684484
Node: git-push1733496
Node: git-quiltimport1773639
Node: git-range-diff1775808
Node: git-read-tree1786818
Node: git-rebase1804774
Node: git-receive-pack1871930
Node: git-reflog1881996
Node: git-remote-ext1888723
Node: git-remote-fd1894307
Node: git-remote1896642
Node: git-repack1906343
Node: git-replace1919279
Node: git-request-pull1926242
Node: git-rerere1928877
Node: git-reset1939470
Node: git-restore1962074
Node: git-rev-list1972247
Node: git-rev-parse2065100
Node: git-revert2110603
Node: git-rm2118164
Node: git-send-email2125462
Node: git-send-pack2148650
Node: git-sh-i18n--envsubst2154169
Node: git-sh-i18n2155530
Node: git-sh-setup2157174
Node: git-shell2161467
Node: git-shortlog2165332
Node: git-show-branch2208454
Node: git-show-index2217400
Node: git-show-ref2220007
Node: git-show2226911
Node: git-sparse-checkout2314412
Node: git-stage2325352
Node: git-stash2325686
Node: git-status2339730
Node: git-stripspace2357880
Node: git-submodule2360375
Node: git-svn2390788
Node: git-switch2440023
Node: git-symbolic-ref2451911
Node: git-tag2454704
Node: git-unpack-file2470215
Node: git-unpack-objects2470740
Node: git-update-index2472580
Node: git-update-ref2495957
Node: git-update-server-info2502529
Node: git-upload-archive2503552
Node: git-upload-pack2506439
Node: git-var2508856
Node: git-verify-commit2510624
Node: git-verify-pack2511305
Node: git-verify-tag2512881
Node: git-version2513538
Node: git-web--browse2514220
Node: git-whatchanged2518750
Node: git-worktree2520126
Node: git-write-tree2548534
Node: git2550043
Node: gitattributes2622063
Node: gitcli2685464
Node: gitcore-tutorial2699251
Node: gitcredentials2783499
Node: gitcvs-migration2797482
Node: gitdiffcore2807489
Node: giteveryday2825526
Node: gitfaq2847027
Node: gitglossary2877047
Node: githooks2918738
Node: gitignore2956873
Node: gitk2969332
Node: gitmailmap2979504
Node: gitmodules2984285
Node: gitnamespaces2991325
Node: gitremote-helpers2997049
Node: gitrepository-layout3028086
Node: gitrevisions3051697
Node: gitsubmodules3075682
Node: gittutorial-23090941
Node: gittutorial3108261
Node: gitweb.conf3133888
Node: gitweb3190953
Node: gitworkflows3225365

End Tag Table


Local Variables:
coding: utf-8
End:
