'\" t
.\"     Title: git-fast-import
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: 12/10/2022
.\"    Manual: Git Manual
.\"    Source: Git 2.38.0.rc1.238.g4f4d434dc6.dirty
.\"  Language: English
.\"
.TH "GIT\-FAST\-IMPORT" "1" "12/10/2022" "Git 2\&.38\&.0\&.rc1\&.238\&.g" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-fast-import \- 高速Gitデータインポーターのバックエンド
.SH "SYNOPSIS"
.sp
.nf
frontend | \fIgit fast\-import\fR [<options>]
.fi
.sp
.SH "DESCRIPTION"
.sp
このプログラムは通常、エンドユーザーが直接実行したいものではありません。 ほとんどのエンドユーザーは、既存のフロントエンドプログラムの1つを使用したいと考えています。このプログラムは、特定の種類の外部ソースをパースし、そこに保存されているコンテンツを \fBgit fast\-import\fR に送ります。
.sp
fast\-importは、標準入力から 混合 コマンド/データストリーム を読み取り、1つ以上のパックファイルを現在のリポジトリに直接書き込みます。 EOFが標準入力で受信されると、高速インポートは更新されたブランチとタグの参照を書き出し、新しくインポートされたデータで現在のリポジトリを完全に更新します。
.sp
高速インポートバックエンド自体は、空のリポジトリ(\fBgit init\fR によってすでに初期化されているリポジトリ)にインポートすることも、既存の入力済みリポジトリを増分更新(incrementally update)することもできます。 特定の外部ソースからの増分インポートがサポートされているかどうかは、使用しているフロントエンドプログラムによって異なります。
.SH "OPTIONS"
.PP
\fB\-\-force\fR
.RS 4
コミットが失われる場合でも(新しいコミットには古いコミットが含まれていないため)、変更された既存のブランチを強制的に更新します。
.RE
.PP
\fB\-\-quiet\fR
.RS 4
\fB\-\-stats\fR
で示される出力を無効にし、正常に実行されると、通常、fast\-importをサイレントにします。 ただし、インポートストリームに、ユーザー出力を表示することを目的としたディレクティブ(`progress`ディレクティブなど)がある場合も対応するメッセージが表示されます。
.RE
.PP
\fB\-\-stats\fR
.RS 4
fast\-importが作成したオブジェクト、それらが保存されたパックファイル、およびこの実行中にfast\-importによって使用されたメモリに関するいくつかの基本的な統計を表示します。 この出力の表示は現在デフォルトですが、
\fB\-\-quiet\fR
を使用して無効にすることができます。
.RE
.PP
\fB\-\-allow\-unsafe\-features\fR
.RS 4
\fBfeature\fR
または
\fBoption\fR
コマンドを使用して、高速インポートストリーム自体の一部として多くのコマンドラインオプションを提供できます。 ただし、これらのオプションの一部は安全ではありません(たとえば、高速インポートでリポジトリの外部のファイルシステムにアクセスできるようにするなど)。 これらのオプションはデフォルトで無効になっていますが、コマンドラインでこのオプションを指定することで許可できます。 これは現在、
\fBexport\-marks\fR
と
\fBimport\-marks\fR
と
\fBimport\-marks\-if\-exists\fR
機能コマンドにのみ影響します。
.sp
.if n \{\
.RS 4
.\}
.nf
高速インポートストリームを生成するプログラムを信頼する場合にのみ、このオプションを有効にしてください。
このオプションは、独自のコードを実行することがすでに信頼されているため、 `import`
機能を使用するリモートヘルパーに対して自動的に有効になります。
.fi
.if n \{\
.RE
.\}
.RE
.SS "Options for Frontends"
.PP
\fB\-\-cat\-blob\-fd=<fd>\fR
.RS 4
\fBget\-mark\fR
と
\fBcat\-blob\fR
と
\fBls\fR
クエリへの応答を、
\fBstdout\fR
ではなくファイルデスクリプタ<fd>に書き込みます。 エンドユーザー向けの
\fBprogress\fR
出力を他の出力から分離できるようにします。
.RE
.PP
\fB\-\-date\-format=<fmt>\fR
.RS 4
フロントエンドが高速インポートに提供する日付のタイプを、
\fBauthor\fR
と
\fBcommitter\fR
と`tagger` コマンド内で指定します。 サポートされているフォーマットとその構文の詳細については、以下の「Date Formats」を参照してください。
.RE
.PP
\fB\-\-done\fR
.RS 4
ストリームの最後に
\fBdone\fR
コマンドがない場合は、エラーで終了(terminate)します。 このオプションは、フロントエンドがストリームの書き込みを開始する前に終了する原因となるエラーを検出するのに役立つ場合があります。
.RE
.SS "Locations of Marks Files"
.PP
\fB\-\-export\-marks=<file>\fR
.RS 4
完了すると、内部マークテーブルを<file>にダンプします。 マークは1行に1つずつ
\fB:markid SHA\-1\fR
として書き込まれます。 フロントエンドは、このファイルを使用して、インポートが完了した後にインポートを検証したり、増分実行(incremental runs)全体でマークテーブルを保存したりできます。 <file>はチェックポイント(または完了)でのみ開かれ(open)、切り捨て(truncate)られるため、同じパスを
\fB\-\-import\-marks\fR
に安全に指定することもできます。
.RE
.PP
\fB\-\-import\-marks=<file>\fR
.RS 4
入力を処理する前に、<file>で指定されたマークをロードします。 入力ファイルは存在し、読み取り可能であり、
\fB\-\-export\-marks\fR
によって生成されたものと同じ形式を使用する必要があります。 複数のマークのセットをインポートするために、オプションを複数回指定できます。 マークが異なる値に定義されている場合、最後のファイルが優先されます。
.RE
.PP
\fB\-\-import\-marks\-if\-exists=<file>\fR
.RS 4
\fB\-\-import\-marks\fR
と同様ですが、エラーが発生する代わりに、ファイルが存在しない場合は黙ってスキップします。
.RE
.PP
\fB\-\-[no\-]relative\-marks\fR
.RS 4
\fB\-\-relative\-marks\fR
を指定した後、
\fB\-\-import\-marks=\fR
と
\fB\-\-export\-marks=\fR
で指定されたパスは、現在のリポジトリの内部ディレクトリからの相対パスになります。 git\-fast\-importでは、これはパスが
\fB\&.git/info/fast\-import\fR
ディレクトリから相対的であることを意味します。 ただし、他のインポーターは別の場所を使用する場合があります。
.sp
\fB\-\-(no\-)\-relative\-marks\fR
を
\fB\-\-(import|export)\-marks=\fR
と織り交ぜることで、相対マークと非相対マークを組み合わせることができます。
.RE
.SS "Submodule Rewriting"
.PP
\fB\-\-rewrite\-submodules\-from=<name>:<file>\fR, \fB\-\-rewrite\-submodules\-to=<name>:<file>\fR
.RS 4
<name>で指定されたサブモジュールのオブジェクトIDを値から書き換えます from <file> で使用されるものから to <file> で使用されるものまで。同じサブモジュールをインポートする場合、fromマークは
\fBgit fast\-export\fR
によって作成され、toマークは
\fBgit fast\-import\fR
によって作成されている必要があります。
.sp
<name>は、コロン文字を含まない任意の文字列にすることができますが、対応するマークを指定するときは、両方のオプションで同じ値を使用する必要があります。 <name>の値が異なる複数のサブモジュールを指定できます。 対応するペアでこれらのオプションを使用しないのはエラーです。
.sp
これらのオプションは、リポジトリをあるハッシュアルゴリズムから別のハッシュアルゴリズムに変換するときに主に役立ちます。 それらがないと、オブジェクトIDを新しいハッシュアルゴリズムに書き込む方法がないため、サブモジュールが検出された場合、fast\-importは失敗します。
.RE
.SS "Performance and Compression Tuning"
.PP
\fB\-\-active\-branches=<n>\fR
.RS 4
一度にアクティブを維持するブランチの最大数。 詳細については、下記「Memory Utilization」(メモリ使用率)を参照してください。 デフォルトは5です。
.RE
.PP
\fB\-\-big\-file\-threshold=<n>\fR
.RS 4
fast\-importがデルタを作成しようとするブロブの最大サイズ(バイト単位)。 デフォルトは512m(512 MiB)です。 一部のインポーターは、メモリが制限されているシステムでこの値を下げることを希望する事があります。
.RE
.PP
\fB\-\-depth=<n>\fR
.RS 4
ブロブとツリーの差分化(deltification)の最大デルタ深度。 デフォルトは50です。
.RE
.PP
\fB\-\-export\-pack\-edges=<file>\fR
.RS 4
パックファイルを作成した後、データの行を<file>に出力して、パックファイルのファイル名と、そのパックファイルに書き込まれた各ブランチの最後のコミットをリストします。 この情報は、オブジェクトセットの合計が4 GiBパックファイルの制限を超えるプロジェクトをインポートした後に役立つ場合があります。 これらのコミットは、
\fBgit pack\-objects\fR
の呼び出し中にエッジポイントとして使用できるためです。
.RE
.PP
\fB\-\-max\-pack\-size=<n>\fR
.RS 4
各出力パックファイルの最大サイズ。 デフォルトは無制限です。
.RE
.PP
fastimport\&.unpackLimit
.RS 4
\fBgit-config\fR(1)
参照
.RE
.SH "PERFORMANCE"
.sp
高速インポートの設計により、最小限のメモリ使用量と処理時間で大規模なプロジェクトをインポートできます。 フロントエンドが高速インポートに対応し、一定のデータストリームをフィードできると仮定すると、10年以上の履歴を保持し、100,000以上の個別のコミットを含むプロジェクトのインポート時間は、通常、非常に控えめな(〜$2,000 USD)ハードウェアで、わずか1〜2時間で完了します。
.sp
ほとんどのボトルネックは、外部ソースデータアクセス(ソースがリビジョンを十分に速く抽出できない)、またはディスクI/O(ディスクがデータを取得するのと同じ速さで高速インポート書き込み)にあるように見えます。 ソースデータが宛先Gitリポジトリとは異なるドライブに保存されている場合、(I/Oの競合が少ないため)、インポートはより高速に実行されます。
.SH "DEVELOPMENT COST"
.sp
fast\-importの一般的なフロントエンドは、200行程度の Perl/Python/Ruby コードを使用する傾向があります。 ほとんどの開発者は、fast\-import、場合によってはGitに初めて触れたとしても、わずか数時間で実用的なインポーターを作成することができました。 ほとんどの変換ツールが使い捨て(一度使用すると、決して振り返ることがない)であることを考えると、これは理想的な状況です。
.SH "PARALLEL OPERATION"
.sp
\fBgit push\fR や \fBgit fetch\fR と同様に、fast\-importによって処理されるインポートは、並列の \fBgit repack \-a \-d\fR や \fBgit gc\fR の呼び出し、またはその他のGit操作(\fBgit prune\fR を含む、そしてfast\-importでは緩いオブジェクト(loose objects)は使用されないため。)と一緒に実行しても安全です。
.sp
fast\-importは、アクティブにインポートしているブランチまたはタグ参照をロックしません。 インポート後、refの更新フェーズで、fast\-importは、既存の各ブランチrefをテストして、更新が早送り更新(fast\-forward update)になることを確認(verifty)します(refに格納されているコミットは、書き込まれるコミットの新しい履歴に含まれます)。 更新が早送り更新でない場合、fast\-importはその参照の更新をスキップし、代わりに警告メッセージを出力します。 fast\-importは常にすべてのブランチ参照を更新しようとし、最初の失敗で停止(stop)しません。
.sp
ブランチの更新は \fB\-\-force\fR を使用して強制できますが、それ以外の場合は静かなリポジトリ(quiet repository)でのみ使用することをお勧めします。 空のリポジトリへの最初のインポートには、 \fB\-\-force\fR を使用する必要はありません。
.SH "TECHNICAL DISCUSSION"
.sp
fast\-importは、メモリ内の一連のブランチを追跡します。 入力ストリームで \fBcommit\fR コマンドを送信することにより、インポートプロセス中の任意の時点で任意のブランチを作成または変更できます。 この設計により、フロントエンドプログラムは無制限の数のブランチを同時に処理し、ソースデータから利用可能な順序でコミットを生成できます。 また、フロントエンドプログラムを大幅に簡素化します。
.sp
fast\-importは、現在の作業ディレクトリまたはその中のファイルを使用または変更しません。 (ただし、 \fBGIT_DIR\fR で参照されるように、現在のGitリポジトリを更新します。) したがって、インポートフロントエンドは、外部ソースからファイルリビジョンを抽出するなど、独自の目的で作業ディレクトリを使用する場合があります。 この、作業ディレクトリの無感知により、ブランチを切り替えるときにコストのかかるファイル更新操作を実行する必要がないため、fast\-importを非常に迅速に実行することもできます。
.SH "INPUT FORMAT"
.sp
(Gitが解釈しない)生のファイルデータを除いて、fast\-import入力形式はテキスト(ASCII)ベースです。 このテキストベースの形式は、特にPerl、Python、Rubyなどの高級言語が使用されている場合に、フロントエンドプログラムの開発とデバッグを簡素化します。
.sp
fast\-importは、入力に関して非常に厳密です。 以下でSPと言う場合、「正確に」1つのスペースを意味します。 同様に、LFは1つ(そして1つだけ)の改行を意味し、HTは1つ(そして1つだけ)の水平タブを意味します。追加の空白文字を指定すると、名前の先頭または末尾にスペースが含まれるブランチ名やファイル名などの予期しない結果が発生したり、予期しない入力が発生した場合に高速インポートが早期に終了したりします。
.SS "Stream Comments"
.sp
フロントエンドのデバッグを支援するために、fast\-importは、 \fB#\fR (ASCII シャープ/ハッシュ) で始まり、\fBLF\fR で終わる行を無視します。 コメント行には、LFを含まないバイトのシーケンスを含めることができるため、フロントエンドに固有でfast\-importのデータストリームを検査するときに役立つ詳細なデバッグ情報を含めるために使用できます。
.SS "Date Formats"
.sp
以下の日付形式がサポートされています。 フロントエンドは、\fB\-\-date\-format=<fmt>\fR コマンドラインオプションで形式名を渡すことにより、このインポートに使用する形式を選択する必要があります。
.PP
\fBraw\fR
.RS 4
これはGitのネイティブ形式であり、
\fB<time>SP<offutc>\fR
です。
\fB\-\-date\-format\fR
が指定されていない場合は、fast\-importのデフォルト形式でもあります。
.sp
イベントの時刻は、UNIXエポック(1970年1月1日午前0時、UTC)からの秒数として
\fB<time>\fR
で指定され、ASCIIの10進整数として書き込まれます。
.sp
ローカルオフセットは、UTCからの正または負のオフセットとして
\fB<offutc>\fR
によって指定されます。 たとえば、EST(UTCから5時間遅れている)は、UTCが「+0000」であるのに対し、「<tz>」は「\-0500」で表されます。 ローカルオフセットは
\fB<time>\fR
には影響しません。 これは、フォーマットルーチンがタイムスタンプを表示するのに役立つアドバイスとしてのみ使用されます。
.sp
ローカルオフセットがソース素材で使用できない場合は、「+0000」、または最も一般的なローカルオフセットを使用します。 たとえば、多くの組織には、同じ場所とタイムゾーンにいるユーザーだけがアクセスしたことのあるCVSリポジトリがあります。 この場合、UTCからの妥当なオフセットを想定できます。
.sp
\fBrfc2822\fR
形式とは異なり、この形式は非常に厳密です。 フォーマッティングに変化があると、fast\-importが値を拒否し、数値の健全性チェックも実行される場合があります。
.RE
.PP
\fBraw\-permissive\fR
.RS 4
これは、数値エポックとローカルオフセットの健全性チェックが実行されないことを除いて、\fBraw\fR
と同じです。 これは、例えば、偽のタイムゾーン値を使用して既存の履歴をフィルタリングまたはインポートしようとする場合に役立ちます。
.RE
.PP
\fBrfc2822\fR
.RS 4
これは、RFC2822で説明されている標準の電子メール形式です。
.sp
この値は例えば
\fBTue Feb 6 11:22:18 2007 \-0500\fR
です。 Gitパーサーは正確ですが、ちょっぴり寛大です。 これは、電子メールから受信したパッチを適用するときに
\fBgit am\fR
によって使用されるのと同じパーサーです。
.sp
一部の不正な形式の文字列が、有効な日付として受け入れられる場合があります。 これらの場合のいくつかでは、Gitは不正な形式の文字列から正しい日付を取得できます。 また、Gitが誤ってパースし、それでも有効と見なす不正な形式の文字列の種類もあります。 ひどくおかしい文字列は拒否されます。
.sp
上記の`raw`形式とは異なり、RFC2822日付文字列に含まれる タイムゾーン/UTC オフセット情報は、保存前に日付値をUTCに調整するために使用されます。 したがって、この情報が可能な限り正確であることが重要です。
.sp
もしソース素材がRFC2822スタイルの日付を使っているなら、フロントエンドは(自分でやろうとするよりも、)fast\-importにパースと変換を任せるべきです。なぜなら、Gitパーサーは実際によくテストされているからです。
.sp
フロントエンドは、ソース素材がすでに UNIX\-epoch フォーマットを使っていて、そのフォーマットで日付を与えるように言いくるめられる場合、あるいはパースに曖昧さがないため、そのフォーマットが簡単に
\fBraw\fR
フォーマットに変換できる場合は、
\fBraw\fR
フォーマットを優先するべきです。
.RE
.PP
\fBnow\fR
.RS 4
常に現在の時間とタイムゾーンを使用します。
\fB<when>\fR
には常に
\fBnow\fR
というリテラルを指定しなければなりません。
.sp
これはおもちゃのフォーマット(toy format)です。 このシステムの現在の時刻とタイムゾーンは、fast\-importによって作成されるときに常にID文字列にコピーされます。 別の時間またはタイムゾーンを指定する方法はありません。
.sp
この特定の形式は、実装が簡単なために提供されており、作業ディレクトリや
\fBgit update\-index\fR
を使用せずに、今すぐ新しいコミットを作成したいプロセスに役立つ場合があります。
.sp
\fBcommit\fR
で別々の
\fBauthor\fR
コマンドと
\fBcommitter\fR
コマンドが使用されている場合、システムクロックが2回(コマンドごとに1回)ポーリングされるため、タイムスタンプが一致しない可能性があります。 作者とコミッターの両方のID情報のタイムスタンプが同じであることを確認する唯一の方法は、
\fBauthor\fR
を省略するか(したがって
\fBcommitter\fR
からコピーする)、または
\fBnow\fR
以外の日付形式を使用することです。
.RE
.SS "Commands"
.sp
fast\-importは、現在のリポジトリを更新し、現在のインポートプロセスを制御するためのいくつかのコマンドを受け入れます。 各コマンドの詳細(例を含む)については後述します。
.PP
\fBcommit\fR
.RS 4
新しいコミットを作成し、新しく作成されたコミットを指すようにブランチを更新することにより、新しいブランチを作成するか、既存のブランチを更新します。
.RE
.PP
\fBtag\fR
.RS 4
既存のコミットまたはブランチから注釈付きタグオブジェクト(annotated tag object)を作成します。 軽量タグ(Lightweight tags)は、意味のある時点を記録するためには推奨されていないため、このコマンドではサポートされていません。
.RE
.PP
\fBreset\fR
.RS 4
既存のブランチ(または新しいブランチ)を特定のリビジョンにリセットします。 このコマンドは、ブランチをコミットせずに特定のリビジョンに変更する目的で使用する必要があります。
.RE
.PP
\fBblob\fR
.RS 4
将来
\fBcommit\fR
コマンドで使用するために、生のファイルデータをブロブに変換します。 このコマンドはオプションであり、インポートを実行するために必要ではありません。
.RE
.PP
\fBalias\fR
.RS 4
最初に新しいオブジェクトを作成せずに、マークが特定のオブジェクトを参照していることを記録します。
\fB\-\-import\-marks\fR
を使用し、欠落しているマークを参照すると fast\-import が失敗するため、エイリアスは、刈り込まれたコミットを有効な値(刈り込まれていない最も近い祖先など)に設定する方法を提供できます。
.RE
.PP
\fBcheckpoint\fR
.RS 4
fast\-importを強制して、現在のパックファイルを閉じ、一意のSHA\-1チェックサムとインデックスを生成して、新しいパックファイルを開始します。 このコマンドはオプションであり、インポートを実行するために必須ではありません。
.RE
.PP
\fBprogress\fR
.RS 4
fast\-importにより、行全体が自身の標準出力にエコーされます。このコマンドはオプションであり、インポートを実行するために必要ではありません。
.RE
.PP
\fBdone\fR
.RS 4
ストリームの終わりを示します。
\fB\-\-done\fR
コマンドラインオプションまたは
\fBfeature done\fR
コマンドを使用して
\fBdone\fR
機能が要求された場合を除き、このコマンドはオプションです。
.RE
.PP
\fBget\-mark\fR
.RS 4
fast\-import により、マークに対応するSHA\-1が、
\fB\-\-cat\-blob\-fd\fR
にて設定されたファイルデスクリプタへ出力されるか、または、指定されていない場合は stdout のファイルデスクリプタへ出力されます。
.RE
.PP
\fBcat\-blob\fR
.RS 4
fast\-importにより、
\fBcat\-file \-\-batch\fR
形式のブロブが、
\fB\-\-cat\-blob\-fd\fR
にて設定されたファイルデスクリプタへ出力されるか、または、指定されていない場合は stdout のファイルデスクリプタへ出力されます。
.RE
.PP
\fBls\fR
.RS 4
fast\-importにより、ディレクトリエントリを
\fBls\-tree\fR
形式で記述した行が、
\fB\-\-cat\-blob\-fd\fR
にて設定されたファイルデスクリプタへ出力されるか、または、指定されていない場合は stdout のファイルデスクリプタへ出力されます。
.RE
.PP
\fBfeature\fR
.RS 4
指定された機能を有効にします。 これには、fast\-importが指定された機能をサポートしている必要があり、サポートしていない場合は中止(abort)されます。
.RE
.PP
\fBoption\fR
.RS 4
フロントエンドのニーズに合わせてストリームセマンティックを変更しないオプションの下にリストされているオプションのいずれかを指定します。 このコマンドはオプションであり、インポートを実行するために必須ではありません。
.RE
.SS "\fBcommit\fR"
.sp
新しいコミットでブランチを作成または更新し、プロジェクトへの1つの論理的な変更を記録します。
.sp
.if n \{\
.RS 4
.\}
.nf
        \*(Aqcommit\*(Aq SP <ref> LF
        mark?
        original\-oid?
        (\*(Aqauthor\*(Aq (SP <name>)? SP LT <email> GT SP <when> LF)?
        \*(Aqcommitter\*(Aq (SP <name>)? SP LT <email> GT SP <when> LF
        (\*(Aqencoding\*(Aq SP <encoding>)?
        data
        (\*(Aqfrom\*(Aq SP <commit\-ish> LF)?
        (\*(Aqmerge\*(Aq SP <commit\-ish> LF)*
        (filemodify | filedelete | filecopy | filerename | filedeleteall | notemodify)*
        LF?
.fi
.if n \{\
.RE
.\}
.sp
ここで、 \fB<ref>\fR はコミットを行うブランチの名前です。 通常、Gitではブランチ名の前に \fBrefs/heads/\fR が付いているため、CVSブランチシンボル \fBRELENG\-1_0\fR をインポートすると、 \fB<ref>\fR の値に \fBrefs/heads/RELENG\-1_0\fR が使用されます。 \fB<ref>\fR の値は、Gitで有効なrefnameである必要があります。 \fBLF\fR はGit refnameでは無効であるため、ここではクォートやエスケープ構文はサポートされていません。
.sp
\fBmark\fR コマンドがオプションで表示され、フロントエンドで将来使用するために新しく作成されたコミットへの参照を保存するようにfast\-importを要求する場合があります(形式については以下を参照)。 フロントエンドが作成するすべてのコミットにマークを付けることは非常に一般的であり、これにより、インポートされたコミットから将来のブランチを作成できます。
.sp
\fBcommitter\fR に続く \fBdata\fR コマンドは、コミットメッセージを提供する必要があります(\fBdata\fR コマンドの構文については以下を参照してください)。 空のコミットメッセージをインポートするには、長さ0のデータを使用します。 コミットメッセージは自由形式であり、Gitによって解釈されません。 fast\-importでは他のエンコードを指定できないため、現在はUTF\-8でエンコードする必要があります。
.sp
コミットを作成する前にブランチの内容を更新するために、0個以上の \fBfilemodify\fR 、 \fBfiledelete\fR 、 \fBfilecopy\fR 、 \fBfilerename\fR 、 \fBfiledeleteall\fR 、 \fBnotemodify\fR コマンドを含めることができます。 これらのコマンドは、任意の順序で指定できます。 ただし、 \fBfiledeleteall\fR はブランチをクリーンにワイプするため、 \fBfiledeleteall\fR コマンドを同じコミット内のすべての \fBfilemodify\fR 、 \fBfilecopy\fR 、 \fBfilerename\fR 、 ` notemodify` コマンドの前に置くことをお勧めします(下記参照)。
.sp
コマンドの後の \fBLF\fR はオプションです(以前は必須でした)。 下位互換性の理由から、コミットが \fBdata\fR コマンドで終了する場合(つまり、 \fBfrom\fR 、 \fBmerge\fR 、 \fBfilemodify\fR 、 \fBfiledelete\fR 、 \fBfilecopy\fR 、 \fBfilerename\fR 、 \fBfiledeleteall\fR 、 \fBnotemodify\fR コマンドがないことに注意してください)の場合、コマンドの最後に1つではなく2つの \fBLF\fR コマンドが表示される場合があります。
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBauthor\fR
.RS 4
.sp
作者情報がコミッター情報と異なる場合は、オプションで \fBauthor\fR コマンドが表示されることがあります。 \fBauthor\fR を省略すると、fast\-importはコミットの作者部分にコミッターの情報を自動的に使用します。 \fBauthor\fR のフィールドの説明については、 \fBcommitter\fR と同じであるため、以下を参照してください。
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBcommitter\fR
.RS 4
.sp
\fBcommitter\fR コマンドは、誰がこのコミットを行ったのか、いつ行ったのかを示します。
.sp
ここで、 \fB<name>\fR は個人の表示名(たとえば、 "Com M Itter")であり、 \fB<email>\fR は個人の電子メールアドレス("cm@example\&.com")です。 \fBLT\fR と \fBGT\fR は、文字通りの小なり記号(\ex3c)と大なり記号(\ex3e)です。 これらは、行の他のフィールドから電子メールアドレスを区切るために必要です。 \fB<name>\fR と \fB<email>\fR は自由形式であり、 \fBLT\fR 、\fBGT\fR 、 \fBLF\fR を除く任意のバイトシーケンスを含むことができることに注意してください。 \fB<name>\fR は通常UTF\-8でエンコードされています。
.sp
変更時刻は、 \fB\-\-date\-format=<fmt>\fR コマンドラインオプションで選択された日付形式を使用して \fB<when>\fR で指定されます。サポートされている形式のセットとその構文については、上記「Date Formats」を参照してください。
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBencoding\fR
.RS 4
.sp
オプションの \fBencoding\fR コマンドは、コミットメッセージのエンコーディングを示します。 ほとんどのコミットはUTF\-8であり、エンコードは省略されていますが、これにより、最初に再エンコードせずにコミットメッセージをgitにインポートできます。
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBfrom\fR
.RS 4
.sp
\fBfrom\fR コマンドは、このブランチを初期化するコミットを指定するために使用されます。 このリビジョンは、新しいコミットの最初の祖先になります。 このコミットで構築されたツリーの状態は、 \fBfrom\fR コミットでの状態で始まり、このコミットでのコンテンツの変更によって交換(alter)されます。
.sp
新しいブランチの最初のコミットで \fBfrom\fR コマンドを省略すると、fast\-importが祖先なしでそのコミットを作成します。 これは、プロジェクトの最初のコミットでのみ必要になる傾向があります。 新しいブランチを作成するときにフロントエンドがすべてのファイルを最初から作成する場合は、 \fBfrom\fR の代わりに \fBmerge\fR コマンドを使用して、空のツリーでコミットを開始できます。 そのブランチの現在のコミットは自動的に新しいコミットの最初の祖先であると見なされるため、既存のブランチでは通常は \fBfrom\fR コマンドを省略することが望まれます。
.sp
\fBLF\fR は Git refname または SHA\-1式では無効であるため、\fB<commit\-ish>\fR 内でのクォートまたはエスケープ構文はサポートされていません。
.sp
ここで、\fB<commit\-ish>\fR は以下のいずれかです:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
fast\-importの内部ブランチテーブルにすでに存在する既存のブランチの名前。 fast\-importが名前を知らない場合は、SHA\-1式として扱われます。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
マーク参照: <idnum> 。ここで、
\fB<idnum>\fR
はマーク番号です。
.sp
fast\-importがマーク参照を示すために
\fB:\fR
を使用する理由は、この文字がGitブランチ名では無効であるためです。 先頭
\fB:\fR
を使用すると、マーク42(\fB:42\fR)とブランチ42(\fB42\fR
または
\fBrefs/heads/42\fR)、または、たまたま10進数で構成されていた省略形のSHA\-1を、簡単に区別できます。
.sp
マークは、使用する前に(
\fBmark\fR
を介して)宣言する必要があります。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
完全な40バイトまたは省略された16進数のコミットSHA\-1。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
コミットに解決される有効な Git SHA\-1式。 詳細については、
\fBgitrevisions\fR(7)
の「SPECIFYING REVISIONS」を参照してください。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
特別な null SHA\-1(40個のゼロ)は、ブランチが削除されることを指定します。
.RE
.sp
現在のブランチ値から増分インポート(incremental import)を再スタートする特殊なケースは、以下のように記述する必要があります:
.sp
.if n \{\
.RS 4
.\}
.nf
        from refs/heads/branch^0
.fi
.if n \{\
.RE
.\}
.sp
.sp
fast\-importはブランチをそれ自体から開始することを許可しないため、 \fB^0\fR サフィックスが必要です。ブランチは、 \fBfrom\fR コマンドが入力から読み取られる前にメモリに作成されます。 \fB^0\fR を追加すると、fast\-importは、内部ブランチテーブルではなく、Gitのリビジョンパースライブラリを介してコミットを解決し、ブランチの既存の値をロードします。
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBmerge\fR
.RS 4
.sp
1つの追加の祖先コミットが含まれます。 追加の祖先リンクは、このコミットでツリー状態が構築される方法を変更しません。 新しいブランチを作成するときに \fBfrom\fR コマンドを省略すると、最初の \fBmerge\fR コミットが現在のコミットの最初の祖先になり、ブランチはファイルなしで開始されます。 fast\-importでは、コミットごとに無制限の数の \fBmerge\fR コマンドが許可されるため、n方向(n\-way)マージが確立されます。
.sp
ここで、 \fB<commit\-ish>\fR は、 \fBfrom\fR でも受け入れられるコミット仕様式のいずれかです(上記参照)。
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBfilemodify\fR
.RS 4
.sp
新しいファイルを追加したり、既存のファイルの内容を変更したりするために \fBcommit\fR コマンドに含まれています。 このコマンドには、ファイルの内容を指定する2つの異なる方法があります。
.PP
External data format
.RS 4
ファイルのデータコンテンツは、以前の
\fBblob\fR
コマンドによってすでに提供されています。フロントエンドはそれに接続する必要があります。
.sp
.if n \{\
.RS 4
.\}
.nf
        \*(AqM\*(Aq SP <mode> SP <dataref> SP <path> LF
.fi
.if n \{\
.RE
.\}
.sp
ここで通常、
\fB<dataref>\fR
は、前の
\fBblob\fR
コマンドによって設定されたマーク参照(\fB:<idnum>\fR)か、既存のGitブロブオブジェクトの完全な40バイトのSHA\-1である必要があります。
\fB<mode>\fR
が
\fB040000\fR
の場合、
\fB<dataref>\fR
は既存のGitツリーオブジェクトの完全な40バイトのSHA\-1または
\fB\-\-import\-marks\fR
で設定されたマーク参照である必要があります。
.RE
.PP
Inline data format
.RS 4
ファイルのデータコンテンツはまだ提供されていません。 フロントエンドは、この変更コマンドの一部としてそれを提供したいと考えています。
.sp
.if n \{\
.RS 4
.\}
.nf
        \*(AqM\*(Aq SP <mode> SP \*(Aqinline\*(Aq SP <path> LF
        data
.fi
.if n \{\
.RE
.\}
.sp
\fBdata\fR
コマンドの詳細については下記参照。
.RE
.sp
どちらの形式でも、 \fB<mode>\fR はファイルエントリのタイプであり、8進数で指定されます。 Gitは以下のモードのみをサポートします:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB100644\fR
または
\fB644\fR
: 通常の(実行可能でない)ファイル。 ほとんどのプロジェクトのファイルの大部分はこのモードを使用しています。迷ったらコレ。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB100755\fR
または
\fB755\fR
: 通常の、しかし実行可能なファイル。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB120000\fR: シンボリックリンク。ファイルの内容がリンクターゲットになります。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB160000\fR
: gitlink、オブジェクトのSHA\-1は、他のリポジトリのコミットを参照しています。 Gitリンクは、SHAまたはコミットマークを介してのみ指定できます。 これらは、サブモジュールを実装するために使用されます。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB040000\fR: サブディレクトリ。 サブディレクトリは、SHAによって、または
\fB\-\-import\-marks\fR
で設定されたツリーマークを介してのみ指定できます。
.RE
.sp
どちらの形式でも、 \fB<path>\fR は、追加(まだ存在しない場合)または変更(すでに存在する場合)するファイルの完全なパスです。
.sp
\fB<path>\fR 文字列はUNIXスタイルのディレクトリ区切り文字(スラッシュ \fB/\fR)を使用する必要があり、 \fBLF\fR 以外のバイトを含めることができ、二重引用符(\fB"\fR)で始めることはできません。
.sp
パスはC言語スタイルの文字列クォートを使用できます。 これはすべての場合に受け入れられ、ファイル名が二重引用符で始まるか、\fBLF\fR を含む場合は必須です。 C言語スタイルのクォートでは、完全な名前を二重引用符で囲み、 \fBLF\fR、 バックスラッシュ(\fB\e\fR)、または二重引用符の文字の前に円記号を付けてエスケープする必要があります(例: \fB"path/with\en, \e\e and \e" in it"\fR )。
.sp
\fB<path>\fR の値は標準形(canonical form)でなければなりません。以下は禁止です:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
空のディレクトリコンポーネントが含まれている(例:
\fBfoo//bar\fR
は無効)、
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
ディレクトリ区切り文字で終了する(例:
\fBfoo/\fR
は無効)、
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
ディレクトリ区切り文字で始まる(例:
\fB/foo\fR
は無効)、
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
特別なコンポーネント
\fB\&.\fR
または
\fB\&.\&.\fR
を含む(例:
\fBfoo/\&./bar\fR
や
\fBfoo/\&.\&./bar\fR
は無効)。
.RE
.sp
ツリーのルートは、 \fB<path>\fR に空の文字列を指定します。
.sp
\fB<path>\fR は常にUTF\-8を使用してエンコードすることをお勧めします。
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBfiledelete\fR
.RS 4
.sp
ファイルを削除したり、ブランチからディレクトリ全体を再帰的に削除したりするために \fBcommit\fR コマンドに含まれています。 ファイルまたはディレクトリを削除して、その親ディレクトリが空になると、親ディレクトリも自動的に削除されます。 これは、最初の空でないディレクトリまたはルートに到達するまで、ツリーを上流へ連鎖的にたどります(cascade up)。
.sp
.if n \{\
.RS 4
.\}
.nf
        \*(AqD\*(Aq SP <path> LF
.fi
.if n \{\
.RE
.\}
.sp
ここで、 \fB<path>\fR は、ブランチから削除されるファイルまたはサブディレクトリの完全なパスです。 \fB<path>\fR の詳細な説明については、上記の \fBfilemodify\fR を参照してください。
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBfilecopy\fR
.RS 4
.sp
既存のファイルまたはサブディレクトリをブランチ内の別の場所に再帰的にコピーします。 既存のファイルまたはディレクトリが存在する必要があります。 宛先が存在する場合は、ソースからコピーされたコンテンツに完全に置き換えられます。
.sp
.if n \{\
.RS 4
.\}
.nf
        \*(AqC\*(Aq SP <path> SP <path> LF
.fi
.if n \{\
.RE
.\}
.sp
ここで、最初の \fB<path>\fR はソースの場所であり、2番目の \fB<path>\fR は宛先です。 \fB<path>\fR がどのように見えるかの詳細な説明については、上記の \fBfilemodify\fR を参照してください。 SPを含むソースパスを使用するには、パスを引用符で囲む必要があります。
.sp
\fBfilecopy\fR コマンドの効果は即時です。ソースの場所が宛先にコピーされると、ソースの場所に適用される以降のコマンドは、コピーの宛先に影響を与えません。
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBfilerename\fR
.RS 4
.sp
既存のファイルまたはサブディレクトリの名前をブランチ内の別の場所に変更します。 既存のファイルまたはディレクトリが存在する必要があります。 宛先が存在する場合は、ソースディレクトリに置き換えられます。
.sp
.if n \{\
.RS 4
.\}
.nf
        \*(AqR\*(Aq SP <path> SP <path> LF
.fi
.if n \{\
.RE
.\}
.sp
ここで、最初の \fB<path>\fR はソースの場所であり、2番目の \fB<path>\fR は宛先です。 \fB<path>\fR がどのように見えるかの詳細な説明については、上記の \fBfilemodify\fR を参照してください。 SPを含むソースパスを使用するには、パスを引用符で囲む必要があります。
.sp
\fBfilerename\fR コマンドの効果は即時です。 ソースの場所の名前が宛先に変更されると、ソースの場所に適用される将来のコマンドは、そこに新しいファイルを作成し、名前変更の宛先に影響を与えません。
.sp
注意: \fBfilerename\fR は、 \fBfilecopy\fR の後にソースの場所の \fBfiledelete\fR が続くのと同じであることに注意してください。 \fBfilerename\fR を使用することにはわずかなパフォーマンス上の利点がありますが、その利点は非常に小さいため、ソース素材の 削除/追加ペア を高速インポート用の名前変更に変換する価値はありません。 この \fBfilerename\fR コマンドは、名前変更情報がすでにあるフロントエンドを単純化するために提供されており、それを \fBfilecopy\fR とそれに続く \fBfiledelete\fR に分解する必要はありません。
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBfiledeleteall\fR
.RS 4
.sp
ブランチからすべてのファイル(およびすべてのディレクトリ)を削除するために \fBcommit\fR コマンドに含まれています。 このコマンドは、内部ブランチ構造をリセットしてファイルを含まないようにし、フロントエンドの関心あるすべてのファイルを最初から追加できるようにします。
.sp
.if n \{\
.RS 4
.\}
.nf
        \*(Aqdeleteall\*(Aq LF
.fi
.if n \{\
.RE
.\}
.sp
このコマンドは、フロントエンドが現在ブランチ上にあるファイルを知らない(あるいは知ろうとしない)ため、コンテンツを更新するための適切な \fBfiledelete\fR コマンドを生成できない場合に非常に役立ちます。
.sp
正しいコンテンツを設定するために \fBfiledeleteall\fR の後に必要な \fBfilemodify\fR コマンドを発行すると、必要な \fBfilemodify\fR および \fBfiledelete\fR コマンドのみを送信するのと同じ結果が得られます。 しかし、\fBfiledeleteall\fR のアプローチでは、fast\-import がアクティブブランチごとに若干多くのメモリの使用を必要する場合があります(ほとんどの大規模プロジェクトでも1 MiB未満ではありますが)。 したがって、コミットの影響を受けるパスのみを簡単に取得できるフロントエンドは、コミットの影響を受けるパスのみを取得することをお勧めします。
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBnotemodify\fR
.RS 4
.sp
\fB<commit\-ish>\fR に注釈する新しいノートを追加したり、この注釈の内容を変更したりするために \fBcommit\fR \fB<notes_ref>\fR コマンドに含まれています。 内部的には、 \fB<commit\-ish>\fR パスの \fBfilemodify 100644\fR に似ています(サブディレクトリに分割されている可能性があります)。 \fBfiledeleteall\fR 以外のコマンドを使用して \fB<notes_ref>\fR ツリーに書き込み、このツリー内の既存のノートをすべて削除することはお勧めしません。 このコマンドには、ノートの内容を指定する2つの異なる方法があります。
.PP
External data format
.RS 4
ノートのデータコンテンツは、以前の
\fBblob\fR
コマンドによってすでに提供されています。 フロントエンドは、注釈を付けるコミットに接続する必要があります。
.sp
.if n \{\
.RS 4
.\}
.nf
        \*(AqN\*(Aq SP <dataref> SP <commit\-ish> LF
.fi
.if n \{\
.RE
.\}
.sp
ここで、
\fB<dataref>\fR
は、前の
\fBblob\fR
コマンドによって設定されたマーク参照(\fB:<idnum>\fR)、または既存のGitブロブオブジェクトの完全な40バイトのSHA\-1のいずれかです。
.RE
.PP
Inline data format
.RS 4
ノートのデータ内容はまだ提供されていません。 フロントエンドは、この変更コマンドの一部としてそれを提供したいと考えています。
.sp
.if n \{\
.RS 4
.\}
.nf
        \*(AqN\*(Aq SP \*(Aqinline\*(Aq SP <commit\-ish> LF
        data
.fi
.if n \{\
.RE
.\}
.sp
\fBdata\fR
コマンドの詳細については下記参照。
.RE
.sp
どちらの形式でも、 \fB<commit\-ish>\fR は、 \fBfrom\fR でも受け入れられるコミット仕様式のいずれかです(上記参照)。
.RE
.SS "\fBmark\fR"
.sp
fast\-import を手配して現在のオブジェクトへの参照を保存し、フロントエンドがSHA\-1を知らなくても、将来の時点でこのオブジェクトを呼び出すことができるようにします。 ここで、現在のオブジェクトは、 \fBmark\fR コマンドが含まれるオブジェクト作成コマンドです。 これは \fBcommit\fR や \fBtag\fR や \fBblob\fR にすることができますが、 \fBcommit\fR が最も一般的な使用法です。
.sp
.if n \{\
.RS 4
.\}
.nf
        \*(Aqmark\*(Aq SP \*(Aq:\*(Aq <idnum> LF
.fi
.if n \{\
.RE
.\}
.sp
ここで、 \fB<idnum>\fR は、フロントエンドによってこのマークに割り当てられた番号です。 \fB<idnum>\fR の値は、ASCIIの10進整数として表されます。 値0は予約されており、マークとして使用することはできません。 1以上の値のみをマークとして使用できます。
.sp
新しいマークは自動的に作成されます。 同じ \fB<idnum>\fR を別の \fBmark\fR コマンドで再利用するだけで、既存のマークを別のオブジェクトに移動できます。
.SS "\fBoriginal\-oid\fR"
.sp
元のソース管理システムのオブジェクトの名前を提供します。 fast\-import はこのディレクティブを単に無視しますが、fast\-importにフィードする前にストリームを操作および変更するフィルタープロセスは、この情報を使用する場合があります。
.sp
.if n \{\
.RS 4
.\}
.nf
        \*(Aqoriginal\-oid\*(Aq SP <object\-identifier> LF
.fi
.if n \{\
.RE
.\}
.sp
ここで、 \fB<object\-identifier>\fR は LF を含まない任意の文字列です。
.SS "\fBtag\fR"
.sp
特定のコミットを参照する注釈付きタグ(annotated tag)を作成します。 軽量(注釈なし)タグ(lightweight tag)を作成するには、下記 \fBreset\fR コマンドを参照してください。
.sp
.if n \{\
.RS 4
.\}
.nf
        \*(Aqtag\*(Aq SP <name> LF
        mark?
        \*(Aqfrom\*(Aq SP <commit\-ish> LF
        original\-oid?
        \*(Aqtagger\*(Aq (SP <name>)? SP LT <email> GT SP <when> LF
        data
.fi
.if n \{\
.RE
.\}
.sp
ここで、 \fB<name>\fR は作成するタグの名前です。
.sp
タグ名はGitに保存されるときに自動的に \fBrefs/tags/\fR のプレフィックスが付けられるため、CVSブランチシンボル \fBRELENG\-1_0\-FINAL\fR をインポートすると、 \fB<name>\fR に \fBRELENG\-1_0\-FINAL\fR だけが使用され、 fast\-importは対応するrefを \fBrefs/tags/RELENG\-1_0\-FINAL\fR として書き込みます。
.sp
\fB<name>\fR の値は、Gitで有効なrefnameである必要があるため、スラッシュを含めることができます。 \fBLF\fR はGit refnameでは無効であるため、ここではクォートやエスケープ構文はサポートされていません。
.sp
\fBfrom\fR コマンドは \fBcommit\fR コマンドと同じです。 詳細については、上記を参照してください。
.sp
\fBtagger\fR コマンドは、 \fBcommit\fR 内の \fBcommitter\fR と同じ形式を使用します。 詳細については、再度上記を参照してください。
.sp
\fBtagger\fR に続く \fBdata\fR コマンドは、注釈付きのタグメッセージを提供する必要があります(\fBdata\fR コマンドの構文については以下を参照してください)。 空のタグメッセージをインポートするには、長さ0のデータを使用します。 タグメッセージは自由形式であり、Gitによって解釈されません。 fast\-importでは他のエンコードを指定できないため、現在はUTF\-8でエンコードする必要があります。
.sp
fast\-import内からのインポート中に注釈付きタグに署名することはサポートされていません。 フロントエンドは通常そのような署名に入るバイトの完全なセットに(簡単に)アクセスできないため、独自の PGP/GPG 署名を含めることはお勧めしません。 署名が必要な場合は、 \fBreset\fR を使用してfast\-import内から軽量タグを作成し、標準の \fBgit tag\fR プロセスを使用してそれらのタグの注釈付きバージョンをオフラインで作成します。
.SS "\fBreset\fR"
.sp
名前付きブランチを作成(または再作成)します。オプションで、特定のリビジョンから開始します。 resetコマンドを使用すると、フロントエンドは既存のブランチに対して新しい \fBfrom\fR コマンドを発行したり、新しいコミットを作成せずに既存のコミットから新しいブランチを作成したりできます。
.sp
.if n \{\
.RS 4
.\}
.nf
        \*(Aqreset\*(Aq SP <ref> LF
        (\*(Aqfrom\*(Aq SP <commit\-ish> LF)?
        LF?
.fi
.if n \{\
.RE
.\}
.sp
\fB<ref>\fR と \fB<commit\-ish>\fR の詳細については、上記 \fBcommit\fR と \fBfrom\fR を参照してください。
.sp
コマンドの後の \fBLF\fR はオプションです(以前は必須でした)。
.sp
\fBreset\fR コマンドを使用して、軽量(注釈なし)タグ(lightweight tag)を作成することもできます。 例えば:
.sp
.if n \{\
.RS 4
.\}
.nf
reset refs/tags/938
from :938
.fi
.if n \{\
.RE
.\}
.sp
これはコミットマーク \fB:938\fR が参照するものを参照して、軽量タグ \fBrefs/tags/938\fR を作成します。
.SS "\fBblob\fR"
.sp
パックファイルに1つのファイルリビジョンを書き込むように要求します。 リビジョンはコミットに接続されていません。 この接続は、割り当てられたマークを介してブロブを参照することにより、後続の \fBcommit\fR コマンドで形成する必要があります。
.sp
.if n \{\
.RS 4
.\}
.nf
        \*(Aqblob\*(Aq LF
        mark?
        original\-oid?
        data
.fi
.if n \{\
.RE
.\}
.sp
一部のフロントエンドが独自にブロブのGitSHA\-1を生成し、それを直接 \fBcommit\fR にフィードすることを選択したため、ここではmarkコマンドはオプションです。 ただし、マークは安価で保管しやすく、使い勝手も良いため、これは一般的にはマークより手間がかかると思われます。
.SS "\fBdata\fR"
.sp
生データ(ブロブ/ファイル コンテンツ または コミットメッセージ または 注釈付きタグメッセージ として使用するため)をfast\-importに提供します。 データは、正確なバイトカウントを使用して提供することも、終了行で区切ることもできます。 本番品質の変換を目的とした実際のフロントエンドは、より堅牢でパフォーマンスが高いため、常に正確なバイトカウント形式を使用する必要があります。 区切られた形式は、主にfast\-importのテストを目的としています。
.sp
\fBdata\fR コマンドの \fB<raw>\fR 部分に表示されるコメント行は、常にデータの本文の一部と見なされるため、fast\-importによって無視されることはありません。 これにより、行が \fB#\fR で始まる可能性のある ファイル/メッセージ コンテンツを安全にインポートできます。
.PP
Exact byte count format
.RS 4
フロントエンドは、データのバイト数を指定する必要があります。
.sp
.if n \{\
.RS 4
.\}
.nf
        \*(Aqdata\*(Aq SP <count> LF
        <raw> LF?
.fi
.if n \{\
.RE
.\}
.sp
ここで、\fB<count>\fR
は
\fB<raw>\fR
内に表示される正確なバイト数です。
\fB<count>\fR
の値はASCII10進整数として表されます。
\fB<raw>\fR
の両側の
\fBLF\fR
は
\fB<count>\fR
に含まれず、インポートされたデータに含まれません。
.sp
\fB<raw>\fR
の後の
\fBLF\fR
はオプションです(以前は必須でした)が、推奨されます。
\fB<raw>\fR
が
\fBLF\fR
で終わっていなくても、次のコマンドは常に次の行の列0で開始するため、常にこれを含めると、fast\-importストリームのデバッグが容易になります。
.RE
.PP
Delimited format
.RS 4
区切り文字列は、データの終わりを示すために使用されます。 fast\-importは、区切り文字を検索して長さを計算します。 この形式は主にテストに役立ち、実際のデータにはお勧めしません。
.sp
.if n \{\
.RS 4
.\}
.nf
        \*(Aqdata\*(Aq SP \*(Aq<<\*(Aq <delim> LF
        <raw> LF
        <delim> LF
        LF?
.fi
.if n \{\
.RE
.\}
.sp
ここで、\fB<delim>\fR
は選択された区切り文字列です。 文字列
\fB<delim>\fR
は、
\fB<raw>\fR
内の行に単独で表示されてはなりません。そうしないと、fast\-importはデータが実際よりも早く終了すると見なします。
\fB<raw>\fR
の直後に続く
\fBLF\fR
は
\fB<raw>\fR
の一部です。 これは区切り形式の制限の1つであり、最後のバイトとしてLFを持たないデータチャンクを提供することはできません。
.sp
\fB<delim> LF\fR
の後の
\fBLF\fR
はオプションです(以前は必須でした)。
.RE
.SS "\fBalias\fR"
.sp
最初に新しいオブジェクトを作成せずに、マークが特定のオブジェクトを参照していることを記録します。
.sp
.if n \{\
.RS 4
.\}
.nf
        \*(Aqalias\*(Aq LF
        mark
        \*(Aqto\*(Aq SP <commit\-ish> LF
        LF?
.fi
.if n \{\
.RE
.\}
.sp
\fB<commit\-ish>\fR の詳細については、上記の \fBfrom\fR を参照してください。
.SS "\fBcheckpoint\fR"
.sp
fast\-importを強制して、現在のパックファイルを閉じ、新しいパックファイルを開始し、現在のすべてのブランチ参照とタグとマークを保存します。
.sp
.if n \{\
.RS 4
.\}
.nf
        \*(Aqcheckpoint\*(Aq LF
        LF?
.fi
.if n \{\
.RE
.\}
.sp
注意: fast\-importは、現在のパックファイルが \fB\-\-max\-pack\-size\fR または 4 GiB のいずれか小さい方の制限に達すると、パックファイルを自動的に切り替えることに注意してください。 自動パックファイル切り替え中、fast\-importは、ブランチの参照またはタグまたはマーク を更新しません。
.sp
\fBcheckpoint\fR はかなりのCPU時間とディスクI/Oを必要とする可能性があるため(パック全体のSHA\-1チェックサムを計算し、対応するインデックスファイルを生成し、refを更新するため)、単一の \fBcheckpoint\fR コマンド完了に数分かかる場合があります。
.sp
フロントエンドは、非常に大規模で長時間実行されるインポート中、または別のGitプロセスにブランチへのアクセスを許可する必要があるときにチェックポイントを発行することを選択できます。 ただし、30 GiB Subversion リポジトリを fast\-import によって約3時間でGitにロードできることを考えると、明示的なチェックポイントは必要ない場合があります。
.sp
コマンドの後の \fBLF\fR はオプションです(以前は必須でした)。
.SS "\fBprogress\fR"
.sp
コマンドが入力ストリームから処理されるときに、fast\-importが \fBprogress\fR 行全体を変更せずに標準の出力チャネル(ファイルデスクリプタ 1)に出力します。 それ以外の場合、このコマンドは現在のインポートやfast\-importの内部状態には影響しません。
.sp
.if n \{\
.RS 4
.\}
.nf
        \*(Aqprogress\*(Aq SP <any> LF
        LF?
.fi
.if n \{\
.RE
.\}
.sp
コマンドの \fB<any>\fR 部分には、 \fBLF`を含まないバイトシーケンスを含めることができます。 コマンドの後の `LF\fR はオプションです。 呼び出し元は、sedなどのツールを使用して出力を処理し、行の先頭部分を削除したい場合があります。以下に例を示します:
.sp
.if n \{\
.RS 4
.\}
.nf
frontend | git fast\-import | sed \*(Aqs/^progress //\*(Aq
.fi
.if n \{\
.RE
.\}
.sp
\fBcheckpoint\fR の直後に \fBprogress`コマンドを配置すると、 `checkpoint\fR が完了したときにリーダーに通知され、fast\-importで更新されたrefに安全にアクセスできます。
.SS "\fBget\-mark\fR"
.sp
fast\-importが、標準出力または \fB\-\-cat\-blob\-fd\fR 引数であらかじめ指定されたファイルディスクリプタに、マークに対応するSHA\-1を表示するようにします。 それ以外の場合、コマンドは現在のインポートに影響を与えません。 その目的は、後でコミットがコミットメッセージで参照する可能性のあるSHA\-1を取得することです。
.sp
.if n \{\
.RS 4
.\}
.nf
        \*(Aqget\-mark\*(Aq SP \*(Aq:\*(Aq <idnum> LF
.fi
.if n \{\
.RE
.\}
.sp
この出力を安全に読み取る方法の詳細については、以下の「Responses To Commands」(コマンドへの応答)を参照してください。
.SS "\fBcat\-blob\fR"
.sp
fast\-importにより、以前に \fB\-\-cat\-blob\-fd\fR 引数で設定されたファイルデスクリプタにブロブが出力されます。 それ以外の場合、コマンドは現在のインポートに影響を与えません。 その主な目的は、fast\-importのメモリにある可能性があるが、ターゲットリポジトリからはアクセスできないブロブを取得することです。
.sp
.if n \{\
.RS 4
.\}
.nf
        \*(Aqcat\-blob\*(Aq SP <dataref> LF
.fi
.if n \{\
.RE
.\}
.sp
\fB<dataref>\fR は、以前に設定されたマーク参照(\fB:<idnum>\fR)か、既存または書き込みの準備ができているGitブロブの完全な40バイトのSHA\-1のいずれかです。
.sp
出力は \fBgit cat\-file \-\-batch\fR と同一形式を使用します:
.sp
.if n \{\
.RS 4
.\}
.nf
<sha1> SP \*(Aqblob\*(Aq SP <size> LF
<contents> LF
.fi
.if n \{\
.RE
.\}
.sp
このコマンドは、 \fBfilemodify\fR ディレクティブを表示できる場所で使用でき、コミットの途中で使用できます。 インラインディレクティブを使用する \fBfilemodify\fR の場合、 \fBdata\fR ディレクティブの直前に表示することもできます。
.sp
この出力を安全に読み取る方法の詳細については、以下の「Responses To Commands」(コマンドへの応答)を参照してください。
.SS "\fBls\fR"
.sp
パスにあるオブジェクトに関する情報を、事前に \fB\-\-cat\-blob\-fd\fR 引数で指定したファイルディスクリプタへ出力します。 これにより、アクティブなコミットからブロブを表示したり(\fBcat\-blob\fR を使用)、以前のコミットからブロブやツリーをコピーして現在のコミットで使用したり(\fBfilemodify\fR を使用))することができます。
.sp
\fBls\fR コマンドは、 \fBfilemodify\fR ディレクティブを表示できる場所でも使用でき、コミットの途中で使用できます。
.PP
Reading from the active commit
.RS 4
この形式は、\fBcommit\fR
の途中でのみ使用できます。 パスは、fast\-importのアクティブなコミット内のディレクトリエントリに名前を付けます。 この場合、パスはクォートする必要があります。
.sp
.if n \{\
.RS 4
.\}
.nf
        \*(Aqls\*(Aq SP <path> LF
.fi
.if n \{\
.RE
.\}
.RE
.PP
Reading from a named tree
.RS 4
\fB<dataref>\fR
は、マーク参照(\fB:<idnum>\fR)、またはGitタグ、コミット、ツリーオブジェクトの完全な40バイトのSHA\-1であり、既存または書き込みを待機しています。 パスは、
\fB<dataref>\fR
で指定されたツリーの最上位を基準にしています。
.sp
.if n \{\
.RS 4
.\}
.nf
        \*(Aqls\*(Aq SP <dataref> SP <path> LF
.fi
.if n \{\
.RE
.\}
.RE
.sp
\fB<path>\fR の詳細な説明については、上記の \fBfilemodify\fR を参照してください。
.sp
出力は \fBgit ls\-tree <tree> \-\- <path>\fR と同一形式を使用します:
.sp
.if n \{\
.RS 4
.\}
.nf
<mode> SP (\*(Aqblob\*(Aq | \*(Aqtree\*(Aq | \*(Aqcommit\*(Aq) SP <dataref> HT <path> LF
.fi
.if n \{\
.RE
.\}
.sp
<dataref>は、<path>にあるblob、tree、またはcommitオブジェクトを表し、後の \fBget\-mark\fR 、 \fBcat\-blob\fR 、 \fBfilemodify\fR 、 \fBls\fR コマンドで使用できます。
.sp
そのパスにファイルまたはサブツリーがない場合、 \fBgit fast\-import\fR が代わりに報告します
.sp
.if n \{\
.RS 4
.\}
.nf
missing SP <path> LF
.fi
.if n \{\
.RE
.\}
.sp
この出力を安全に読み取る方法の詳細については、以下の「Responses To Commands」(コマンドへの応答)を参照してください。
.SS "\fBfeature\fR"
.sp
fast\-importが指定の機能をサポートすることを要求するか、サポートしない場合は中止(abort)します。
.sp
.if n \{\
.RS 4
.\}
.nf
        \*(Aqfeature\*(Aq SP <feature> (\*(Aq=\*(Aq <argument>)? LF
.fi
.if n \{\
.RE
.\}
.sp
コマンドの <feature> 部分は、以下のいずれかになります:
.PP
date\-format, export\-marks, relative\-marks, no\-relative\-marks, force
.RS 4
先頭に
\fB\-\-\fR
が付いた対応するコマンドラインオプションが、コマンドラインで渡されたかのように動作します(上記 OPTIONS 参照)。
.RE
.PP
import\-marks, import\-marks\-if\-exists
.RS 4
\fB\-\-import\-marks\fR
と同様ですが、2つの点が異なります。まず、ストリームごとに1つの
\fBfeature import\-marks\fR
または
\fBfeature import\-marks\-if\-exists\fR
コマンドのみが許可されます。 次に、
\fB\-\-import\-marks=\fR
または
\fB\-\-import\-marks\-if\-exists\fR
コマンドラインオプションは、ストリーム内のこれらの「feature」コマンドのいずれかをオーバーライドします。 第3に、対応するコマンドラインオプションのような
\fBfeature import\-marks\-if\-exists\fR
は、存在しないファイルを黙ってスキップします。
.RE
.PP
get\-mark, cat\-blob, ls
.RS 4
バックエンドがそれぞれ
\fBget\-mark\fR
または
\fBcat\-blob\fR
または
\fBls\fR
コマンドをサポートしていることを要求します。 指定されたコマンドをサポートしていないバージョンのfast\-importは、そのことを示すメッセージとともに終了します。 これにより、サポートされていないコマンドが検出される前にインポートの初期部分で時間を無駄にするのではなく、明確なメッセージでインポートエラーを早期に発生させることができます。
.RE
.PP
notes
.RS 4
バックエンドが
\fBcommit\fR
コマンドの
\fBnotemodify\fR
(N) サブコマンドをサポートしていることを要求します。 ノートをサポートしていないfast\-importのバージョンは、そのことを示すメッセージとともに終了します。
.RE
.PP
done
.RS 4
\fBdone\fR
コマンドなしでストリームが終了した場合はエラーになります。 この機能がないと、ストリーム内の便利なポイントでフロントエンドが突然終了する原因となるエラーが検出されなくなる可能性があります。 これは、たとえば、インポートフロントエンドがその下位のgit fast\-importインスタンスでSIGTERMまたはSIGKILLを発行せずに、操作の途中で停止した場合に発生する可能性があります。
.RE
.SS "\fBoption\fR"
.sp
指定されたオプションを処理して、git fast\-importがフロントエンドのニーズに合った方法で動作するようにします。 フロントエンドで指定されたオプションは、ユーザーがgit fast\-import自体に指定したオプションによって上書きされることに注意してください。
.sp
.if n \{\
.RS 4
.\}
.nf
    \*(Aqoption\*(Aq SP <option> LF
.fi
.if n \{\
.RE
.\}
.sp
コマンドの \fB<option>\fR 部分には、OPTIONSセクションにリストされているオプションのいずれかを含めることができます。これらのオプションは、先頭の \fB\-\-\fR がなくても、インポートのセマンティクスを変更せず、同じように扱われます。
.sp
optionコマンドは、非オプションコマンドがエラーになった後にオプションコマンドを与えるために、入力の最初のコマンドである必要があります(featureコマンドはカウントされません)。
.sp
以下のコマンドラインオプションはインポートセマンティクスを変更するため、オプションとして渡されない場合があります:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
date\-format
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
import\-marks
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
export\-marks
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
cat\-blob\-fd
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
force
.RE
.SS "\fBdone\fR"
.sp
\fBdone\fR 機能が使用されていない場合は、EOFが読み取られたかのように扱われます。 これを使用して、fast\-importに早期に終了するように指示できます。
.sp
\fB\-\-done\fR コマンドラインオプションまたは \fBfeature done\fR コマンドが使用されている場合、 \fBdone\fR コマンドは必須であり、ストリームの終わりを示します。
.SH "RESPONSES TO COMMANDS"
.sp
fast\-importによって作成された新しいオブジェクトはすぐには利用できません。 ほとんどのfast\-importコマンドは、次のチェックポイント(または完了)まで目に見える効果はありません。 フロントエンドは、コマンドが有効になる速度を気にせずに、fast\-importの入力パイプを埋めるためのコマンドを送信できます。これにより、スケジューリングが簡素化され、パフォーマンスが向上します。
.sp
ただし、一部のフロントエンドでは、更新中に現在のリポジトリからデータを読み戻すことができると便利です(たとえば、ソース素材が、以前にインポートされたオブジェクトに適用されるパッチの観点からオブジェクトを記述している場合)。 これは、フロントエンドとfast\-importを双方向パイプを介して接続することで実現できます:
.sp
.if n \{\
.RS 4
.\}
.nf
mkfifo fast\-import\-output
frontend <fast\-import\-output |
git fast\-import >fast\-import\-output
.fi
.if n \{\
.RE
.\}
.sp
このように設定されたフロントエンドは、 \fBprogress\fR 、 \fBget\-mark\fR 、 \fBls\fR 、 \fBcat\-blob\fR コマンドを使用して、進行中のインポートから情報を読み取ることができます。
.sp
デッドロックを回避するために、このようなフロントエンドは、ブロックする可能性のあるfast\-importへの書き込みを実行する前に、 \fBprogress\fR 、 \fBls\fR 、 \fBget\-mark\fR 、 \fBcat\-blob\fR からの保留中の出力を完全に消費する必要があります。
.SH "CRASH REPORTS"
.sp
fast\-importに無効な入力が指定された場合、ゼロ以外の終了ステータスで終了し、インポート先のGitリポジトリのトップレベルにクラッシュレポートが作成されます。 クラッシュレポートには、内部のfast\-import状態のスナップショットと、クラッシュにつながる最も最近のコマンドが含まれています。
.sp
最近のすべてのコマンド(ストリームコメント、ファイル変更、進行状況コマンドを含む)は、クラッシュレポート内のコマンド履歴に表示されますが、生のファイルデータとコミットメッセージはクラッシュレポートから除外されます。 この除外により、レポートファイル内のスペースが節約され、fast\-importが実行中に実行する必要のあるバッファリングの量が削減されます。
.sp
クラッシュレポートを作成した後、fast\-importは現在のパックファイルを閉じ、マークテーブルをエクスポートします。 これにより、フロントエンド開発者はリポジトリの状態を検査し、クラッシュしたポイントからインポートを再開できます。 インポートが正常に完了しなかったため、変更されたブランチとタグはクラッシュ時に更新されません。 ブランチとタグの情報はクラッシュレポートに記載されており、更新が必要な場合は手動で適用する必要があります。
.sp
クラッシュ例:
.sp
.if n \{\
.RS 4
.\}
.nf
$ cat >in <<END_OF_INPUT
# my very first test commit
commit refs/heads/master
committer Shawn O\&. Pearce <spearce> 19283 \-0400
# who is that guy anyway?
data <<EOF
this is my commit
EOF
M 644 inline \&.gitignore
data <<EOF
\&.gitignore
EOF
M 777 inline bob
END_OF_INPUT
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
$ git fast\-import <in
fatal: Corrupt mode: M 777 inline bob
fast\-import: dumping crash report to \&.git/fast_import_crash_8434
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
$ cat \&.git/fast_import_crash_8434
fast\-import crash report:
    fast\-import process: 8434
    parent process     : 1391
    at Sat Sep 1 00:58:12 2007
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
fatal: Corrupt mode: M 777 inline bob
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Most Recent Commands Before Crash
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
  # my very first test commit
  commit refs/heads/master
  committer Shawn O\&. Pearce <spearce> 19283 \-0400
  # who is that guy anyway?
  data <<EOF
  M 644 inline \&.gitignore
  data <<EOF
* M 777 inline bob
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Active Branch LRU
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
    active_branches = 1 cur, 5 max
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
pos clock name ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1)      0 refs/heads/master
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Inactive Branches
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
refs/heads/master:
  status      : active loaded dirty
  tip commit  : 0000000000000000000000000000000000000000
  old tree    : 0000000000000000000000000000000000000000
  cur tree    : 0000000000000000000000000000000000000000
  commit clock: 0
  last pack   :
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\- END OF CRASH REPORT
.fi
.if n \{\
.RE
.\}
.SH "TIPS AND TRICKS"
.sp
以下のヒントとコツは、fast\-importのさまざまなユーザーから収集されたものであり、提案として提供されています。
.SS "Use One Mark Per Commit"
.sp
リポジトリ変換を行うときは、コミットごとに一意のマーク(\fBmark :<n>\fR)を使用し、コマンドラインで \fB\-\-export\-marks\fR オプションを指定します。 fast\-importは、すべてのマークとそれに対応するGitオブジェクトSHA\-1をリストするファイルをダンプします。 フロントエンドがマークをソースリポジトリに結び付けることができる場合、各Gitコミットを対応するソースリビジョンと比較することで、インポートの正確性と完全性を簡単に確認できます。
.sp
PerforceやSubversionなどのシステムから来る場合、これは非常に単純なはずです。fast\-importマークは、Perforceのチェンジセット番号またはSubversionのリビジョン番号でもある可能性があるためです。
.SS "Freely Skip Around Branches"
.sp
インポート中に一度に1つのブランチに固執するようにフロントエンドをわざわざ最適化しようとしないでください。 これを行うと、fast\-importの場合は少し速くなる可能性がありますが、フロントエンドコードの複雑さが大幅に増す傾向があります。
.sp
高速インポートに組み込まれているブランチLRUは非常に適切に動作する傾向があり、非アクティブなブランチをアクティブ化するコストは非常に低いため、ブランチ間でのバウンスはインポートのパフォーマンスに実質的に影響しません。
.SS "Handling Renames"
.sp
名前を変更したファイルまたはディレクトリをインポートするときは、対応するコミット中に古い名前を削除し、新しい名前を変更するだけです。 Gitは、コミット中に明示的にではなく、事後に名前変更の検出を実行します。
.SS "Use Tag Fixup Branches"
.sp
他のいくつかのSCMシステムでは、ユーザーは同じ コミット/チェンジセット からではない複数のファイルからタグを作成できます。 または、リポジトリで使用可能なファイルのサブセットであるタグを作成します。
.sp
これらのタグをそのままGitにインポートするには、タグのコンテンツと一致するようにファイルを「修正」するコミットを少なくとも1つ実行する必要があります。 fast\-importの \fBreset\fR コマンドを使用して、通常のブランチスペースの外側にあるダミーブランチをタグのベースコミットにリセットし、1つ以上のファイル修正コミットをコミットして、最後にダミーブランチにタグを付けます。
.sp
たとえば、すべての通常のブランチは \fBrefs/heads/\fR の下に保存されるため、タグ修正ブランチには \fBTAG_FIXUP\fR という名前を付けます。 このように、インポーターによって使用される修正ブランチが、ソースからインポートされた実際のブランチと名前空間の競合を持つことは不可能です((名前 \fBTAG_FIXUP\fR は \fBrefs/heads/TAG_FIXUP\fR ではありません)。
.sp
フィックスアップ(fixup)をコミットするときは、 \fBmerge\fR を使用してファイルリビジョンを提供しているコミットをフィックスアップブランチに接続することを検討してください。 そうすることで、 \fBgit blame\fR などのツールが実際のコミット履歴を追跡し、ソースファイルに適切に注釈を付けることができます。
.sp
fast\-importが終了した後、フロントエンドはダミーブランチを削除するために \fBrm \&.git/TAG_FIXUP\fR を実行する必要があります。
.SS "Import Now, Repack Later"
.sp
fast\-importが完了するとすぐに、Gitリポジトリは完全に有効になり、使用できるようになります。 通常、これは非常に大規模なプロジェクト(100,000以上のコミット)の場合でも、非常に短い時間しかかかりません。
.sp
ただし、データの局所性とアクセスパフォーマンスを向上させるには、リポジトリを再パックする必要があります。 また、非常に大規模なプロジェクトでは数時間かかる場合があります(特に、 \fB\-f\fR および 大きな \fB\-\-window\fR パラメーターが使用されている場合)。 再パックはリーダーやライターと一緒に実行しても安全なので、バックグラウンドで再パックを実行し、再パックが終了したらリーダーやライターを終了させます。 あなたが新しいGitプロジェクトに挑戦するのを待たされる事はありません！
.sp
あなたが再パックを待つことを選択した場合は、再パックが完了するまでベンチマークやパフォーマンステストを実行しないでください。 その場合、 fast\-importは、実際の使用状況では決して見られないような、最適でないパックファイルを出力します。
.SS "Repacking Historical Data"
.sp
非常に古くにインポートされたデータ(たとえば、昨年より古い)を再パックする場合は、 \fBgit repack\fR を実行するときに、 \fB\-\-window=50\fR (またはそれ以上)を指定して余分なCPU時間を費やすことを検討してください。 これには時間がかかりますが、作成されるパックファイルも小さくなります。 あなたが労力を費やす必要があるのは1回だけで、あなたのプロジェクトを使用するすべての人が小さくなったリポジトリの恩恵を受けることができます。
.SS "Include Some Progress Messages"
.sp
時々、フロントエンドに \fBprogress\fR メッセージを送信してfast\-importします。 メッセージの内容は完全に自由形式であるため、現在のコミット日が翌月に移動するたびに、現在の月と年を出力することをお勧めします。あなたのユーザーは、処理されたデータストリームの量をよりよく知ることができます。
.SH "PACKFILE OPTIMIZATION"
.sp
ブロブを高速にパックする場合、インポートは常に最後に書き込まれたブロブに対して削除を試みます。 フロントエンドによって特別に調整されていない限り、これはおそらく同じファイルの以前のバージョンではないため、生成されるデルタは可能な限り最小にはなりません。 結果のパックファイルは圧縮されますが、最適ではありません。
.sp
単一のファイルのすべてのリビジョンに効率的にアクセスできるフロントエンド(たとえば、 RCS/CVS ,v file の読み取り)は、連続する \fBblob\fR コマンドのシーケンスとして、そのファイルのすべてのリビジョンを提供することを選択できます。 これにより、fast\-importでさまざまなファイルリビジョンを相互に区別し、最終的なパックファイルのスペースを節約できます。 マークは、後で一連の \fBcommit\fR コマンド中に個々のファイルリビジョンを識別するために使用できます。
.sp
fast\-importによって作成されたパックファイルは、適切なディスクアクセスパターンを促進しません。 これは、標準入力で受信した順序でデータをfast\-importで書き込むことが原因ですが、Gitは通常、パックファイル内のデータを整理して、最新の(現在の先端)データを履歴データの前に表示します。 Gitはまた、コミットをクラスター化し、キャッシュの局所性を向上させることでリビジョンのトラバーサルを高速化します。
.sp
このため、fast\-importが完了した後、ユーザーがリポジトリを \fBgit repack \-a \-d\fR で再パックし、Gitがパックファイルを再編成してデータアクセスを高速化できるようにすることを強くお勧めします。 ブロブデルタが最適ではない場合(上記参照)、すべてのデルタの再計算を強制するために \fB\-f\fR オプションを追加すると、最終的なパックファイルサイズを大幅に減らすことができます(ほとんどの場合30〜50%小さくなります)。
.sp
\fBgit repack\fR を実行する代わりに、 \fBgit gc \-\-aggressive\fR を実行することもできます。これにより、インポート後に他のものも最適化されます(たとえば、loose refs をパックします)。 \fBgit-gc\fR(1) の「AGGRESSIVE」セクションに記載されているように、 \fB\-\-aggressive`オプションは、 linkgit:git\-repack[1] への `\-f\fR オプションを使用して新しいデルタを検索します。 上記で詳しく説明した理由により、fast\-importの後に \fB\-\-aggressive\fR を使用することは、価値があることがわかっている数少ないケースの1つです。
.SH "MEMORY UTILIZATION"
.sp
fast\-importがインポートを実行するために必要なメモリの量に影響を与えるいくつかの要因があります。 コアGitのクリティカルセクションと同様に、fast\-importは独自のメモリアロケータを使用して、mallocに関連するオーバーヘッドを減らします。 実際には、fast\-importは、大きなブロック割り当てを使用するため、mallocオーバーヘッドを0に減らす傾向があります。
.SS "per object"
.sp
fast\-importは、この実行で書き込まれるすべてのオブジェクトのメモリ内構造を維持します。 32ビットシステムでは、構造は32バイトですが、64ビットシステムでは、構造は40バイトです(ポインタサイズが大きいため)。 テーブル内のオブジェクトは、fast\-importが終了するまで割り当てが解除されません。 32ビットシステムに200万個のオブジェクトをインポートするには、約64MiBのメモリが必要です。
.sp
オブジェクトテーブルは、実際にはオブジェクト名(一意のSHA\-1)をキーとするハッシュテーブルです。 このストレージ構成により、fast\-importで既存または既に書き込まれたオブジェクトを再利用し、出力パックファイルへの重複の書き込みを回避できます。 インポートでは、ブロブの重複が驚くほど一般的です。これは通常、ソースでのブランチのマージが原因です。
.SS "per mark"
.sp
マークは、マークごとに1つのポインター(ポインターのサイズに応じて4バイトまたは8バイト)を使用して、まばらな配列に格納されます。 配列はまばらですが、フロントエンドでは 1〜n のマークを使用することを強くお勧めします。ここで、n はこのインポートに必要なマークの総数です。
.SS "per branch"
.sp
ブランチはアクティブと非アクティブにクラス分けされます。 2つのクラスのメモリ使用量は大幅に異なります。
.sp
非アクティブなブランチは、ブランチごとに96バイトまたは120バイト(それぞれ32ビットまたは64ビットシステム)とブランチ名の長さ(通常は200バイト未満)を使用する構造に格納されます。 fast\-importは、2MiB未満のメモリで10,000もの非アクティブなブランチを簡単に処理します。
.sp
アクティブなブランチには非アクティブなブランチと同じオーバーヘッドがありますが、そのブランチで最近変更されたすべてのツリーのコピーも含まれています。 ブランチがアクティブになってからサブツリー \fBinclude\fR が変更されていない場合、その内容はメモリに読み込まれませんが、ブランチがアクティブになってからコミットによってサブツリー \fBsrc\fR が変更されている場合、その内容はメモリに読み込まれます。
.sp
アクティブなブランチは、そのブランチに含まれるファイルに関するメタデータを格納するため、メモリ内のストレージサイズがかなり大きくなる可能性があります(以下参照)。
.sp
fast\-importは、単純な「最も最近使用されていない」アルゴリズム(least\-recently\-used algorithm)に基づいて、アクティブなブランチを自動的に非アクティブなステータスに移動します。 LRUチェーンは、\fBcommit\fR コマンドごとに更新されます。 アクティブなブランチの最大数は、コマンドラインで \fB\-\-active\-branches=\fR を使用して増減できます。
.SS "per active tree"
.sp
ツリー(別名ディレクトリ)は、エントリに必要なメモリに加えて、わずか12バイトのメモリを使用します(以下「per active file」参照)。 ツリーのオーバーヘッドは個々のファイルエントリで償却されるため、ツリーのコストは実質的に0です。
.SS "per active file entry"
.sp
アクティブツリー内のファイル(およびサブツリーへのポインター)には、エントリごとに52バイトまたは64バイト(32/64 ビットプラットフォーム)が必要です。 スペースを節約するために、ファイル名とツリー名は共通の文字列テーブルにプールされ、ファイル名 \fBMakefile\fR が(文字列ヘッダーのオーバーヘッドを含めた後)、プロジェクト内で何度発生しても、わずか16バイトしか使用しないようにします。
.sp
アクティブブランチLRUは、ファイル名文字列プールおよびサブツリーの遅延読み込みと組み合わせると、fast\-importにより、非常に限られたメモリフットプリント(アクティブブランチあたり2\&.7 MiB未満)で2,000以上のブランチと45,114以上のファイルを持つプロジェクトを効率的にインポートできます。
.SH "SIGNALS"
.sp
\fBSIGUSR1\fR を \fBgit fast\-import\fR プロセスに送信すると、現在のパックファイルが早期に終了し、 \fBcheckpoint\fR コマンドがシミュレートされます。 せっかちなオペレーターは、この機能を使用して、実行時間の追加と圧縮率の低下を犠牲にして、進行中のインポートからオブジェクトとrefを確認できます。
.SH "CONFIGURATION"
.sp
このセクションの以下のすべては、 \fBgit-config\fR(1) ドキュメントの抜粋です。 内容は \fBgit-config\fR(1) ドキュメント にあるものと同一です:
.PP
fastimport\&.unpackLimit
.RS 4
\fBgit-fast-import\fR(1)
によってインポートされたオブジェクトの数がこの制限を下回る場合、オブジェクトは緩いオブジェクト(loose object)ファイルに解凍されます。 ただし、インポートされたオブジェクトの数がこの制限以上の場合、パックはパックとして保存されます。 fast\-import(高速インポート)からパックを保存すると、特に低速のファイルシステムで、インポート操作をより速く完了することができます。 設定されていない場合は、代わりに
\fBtransfer\&.unpackLimit\fR
の値が使用されます。
.RE
.SH "SEE ALSO"
.sp
\fBgit-fast-export\fR(1)
.SH "GIT"
.sp
Part of the \fBgit\fR(1) suite
