'\" t
.\"     Title: git-cat-file
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: 12/10/2022
.\"    Manual: Git Manual
.\"    Source: Git 2.38.0.rc1.238.g4f4d434dc6.dirty
.\"  Language: English
.\"
.TH "GIT\-CAT\-FILE" "1" "12/10/2022" "Git 2\&.38\&.0\&.rc1\&.238\&.g" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-cat-file \- リポジトリオブジェクトのコンテンツまたはタイプとサイズの情報を提供します
.SH "SYNOPSIS"
.sp
.nf
\fIgit cat\-file\fR <type> <object>
\fIgit cat\-file\fR (\-e | \-p) <object>
\fIgit cat\-file\fR (\-t | \-s) [\-\-allow\-unknown\-type] <object>
\fIgit cat\-file\fR (\-\-batch | \-\-batch\-check | \-\-batch\-command) [\-\-batch\-all\-objects]
             [\-\-buffer] [\-\-follow\-symlinks] [\-\-unordered]
             [\-\-textconv | \-\-filters] [\-z]
\fIgit cat\-file\fR (\-\-textconv | \-\-filters)
             [<rev>:<path|tree\-ish> | \-\-path=<path|tree\-ish> <rev>]
.fi
.sp
.SH "DESCRIPTION"
.sp
SYNOPSISの最初の形式では、コマンドはリポジトリ内のオブジェクトのコンテンツまたはタイプを提供します。 オブジェクトのタイプを調べるために \fB\-t\fR や \fB\-p\fR が使われているか、オブジェクトのサイズを調べるために \fB\-s\fR が使われているか、あるいは \fB\-\-textconv\fR や \fB\-\-filters\fR が使われている(これらはタイプ \fBblob\fR を意味する)場合を除いて、タイプは必須となります。
.sp
SYNOPSISの2番目の形式では、オブジェクトのリスト(改行で区切られている)がstdinに提供され、各オブジェクトのSHA\-1のタイプとサイズがstdoutに出力されます。 オプションの \fB<format>\fR 引数を使用して、出力形式をオーバーライドできます。 \fB\-\-textconv\fR または \fB\-\-filters\fR のいずれかが指定された場合、入力は、適切なドライバーを決定できるように、オブジェクト名とそれに続くパス名を単一の空白で区切ってリストすることが期待されます。
.SH "OPTIONS"
.PP
<object>
.RS 4
表示するオブジェクトの名前。 オブジェクト名を綴る方法のより完全なリストについては、
\fBgitrevisions\fR(7)
の「SPECIFYING REVISIONS」セクションを参照してください。
.RE
.PP
\fB\-t\fR
.RS 4
コンテンツの代わりに、
\fB<object>\fR
で識別されるオブジェクトタイプを表示します。
.RE
.PP
\fB\-s\fR
.RS 4
コンテンツの代わりに、
\fB<object>\fR
で識別されるオブジェクトサイズを表示します。
.RE
.PP
\fB\-e\fR
.RS 4
\fB<object>\fR
が存在し、有効なオブジェクトである場合、ステータスはゼロで終了(exit)します。
\fB<object>\fR
が無効な形式の場合、ゼロ以外で終了(exit)し、stderrでエラーを発行します。
.RE
.PP
\fB\-p\fR
.RS 4
そのタイプに基づいて
\fB<object>\fR
の内容をきれいに印刷(pretty\-print)します。
.RE
.PP
<type>
.RS 4
通常、これは実際のタイプの
\fB<object>\fR
と一致しますが、指定された
\fB<object>\fR
から簡単に逆参照できるタイプを要求することもできます。 例として、\fB<object>`がそれを含むコミットオブジェクトである `tree`を要求するか、または `<object>\fR
がそれを指すタグオブジェクトである
\fBblob\fR
を要求します。
.RE
.PP
\fB\-\-[no\-]mailmap\fR, \fB\-\-[no\-]use\-mailmap\fR
.RS 4
mailmap ファイルを使用して、作者(author)やコミッター(commiter)やタグ付けした人(taggr)の名前と電子メール・アドレスを正規の実名と電子メール・アドレスにマップします。
\fBgit-shortlog\fR(1)
を参照してください。
.RE
.PP
\fB\-\-textconv\fR
.RS 4
textconvフィルターによって変換されたコンテンツを表示します。 この場合、
\fB<object>\fR
は、
\fB<tree\-ish>:<path>\fR
または
\fB:<path>\fR
の形式である必要があり、
\fB<path>\fR
のインデックスに記録されたコンテンツにフィルターを適用します。
.RE
.PP
\fB\-\-filters\fR
.RS 4
与えられた
\fB<path>\fR
に対して、現在の作業ツリーで構成されているフィルターによって変換された内容を表示します(つまり、スマッジ(smudge)フィルター、行末変換など)。 この場合、\fB<object>\fR
は
\fB<tree\-ish>:<path>\fR
または
\fB:<path>\fR
の形式である必要があります。
.RE
.PP
\fB\-\-path=<path>\fR
.RS 4
\fB\-\-textconv\fR
または
\fB\-\-filters\fR
とともに使用して、例えば、ブロブの元となったリビジョンを把握するのが難しいときに、オブジェクト名とパスを別々に指定できるようにします。
.RE
.PP
\fB\-\-batch\fR, \fB\-\-batch=<format>\fR
.RS 4
stdinで提供される各オブジェクトの、オブジェクト情報とコンテンツを印刷します。
\fB\-\-textconv\fR
または
\fB\-\-filters\fR
以外は、他のオプションや引数と組み合わせることはできません。
\fB\-\-textconv\fR
または
\fB\-\-filters\fR
場合、入力行も空白で区切られたパスを指定する必要があります。 詳細については、以下の「BATCH OUTPUT」のセクションを参照してください。
.RE
.PP
\fB\-\-batch\-check\fR, \fB\-\-batch\-check=<format>\fR
.RS 4
stdinで提供される各オブジェクトのオブジェクト情報を出力します。
\fB\-\-textconv\fR
または
\fB\-\-filters\fR
を除いて、他のオプションや引数と組み合わせることはできません。
\fB\-\-textconv\fR
または
\fB\-\-filters\fR
の場合、入力行も空白で区切られたパスを指定する必要があります。 詳細については、以下の「BATCH OUTPUT」のセクションを参照してください。
.RE
.PP
\fB\-\-batch\-command\fR, \fB\-\-batch\-command=<format>\fR
.RS 4
stdin からコマンドと引数を読み取るコマンド・モードに入ります。
\fB\-\-buffer\fR
または`\-\-textconv` または
\fB\-\-filters\fR
とのみ組み合わせることができます。
\fB\-\-textconv\fR
または
\fB\-\-filters\fR
の場合、入力行は空白で区切られたパスも指定する必要があります。 詳細については、下記セクション「BATCH OUTPUT」を参照してください。
.sp
\fB\-\-batch\-command\fR
は以下のコマンドを認識します:
.PP
contents <object>
.RS 4
オブジェクト参照
\fB<object>\fR
のオブジェクトの内容を出力します。 これは
\fB\-\-batch\fR
の出力に対応します。
.RE
.PP
info <object>
.RS 4
オブジェクト参照
\fB<object>\fR
のオブジェクト情報を出力します。 これは
\fB\-\-batch\-check\fR
の出力に対応します。
.RE
.PP
flush
.RS 4
\fB\-\-buffer\fR
とともに使用して、最初から、または最後のフラッシュが発行されてから発行された先行するすべてのコマンドを実行します。
\fB\-\-buffer\fR
を使用すると、
\fBflush\fR
が発行されるまで何も出力されません。
\fB\-\-buffer\fR
を使用しない場合は、
\fBflush\fR
を発行しなくてもコマンドを毎回フラッシュします。
.RE
.RE
.PP
\fB\-\-batch\-all\-objects\fR
.RS 4
stdinでオブジェクトのリストを読み取る代わりに、 (到達可能なオブジェクトだけでなく、)リポジトリ内のすべてのオブジェクトと代替オブジェクトストア(alternate object stores)に対して要求されたバッチ操作を実行します。
\fB\-\-batch\fR
または
\fB\-\-batch\-check\fR
を指定する必要があります。 デフォルトでは、オブジェクトはハッシュでソートされた順序でアクセスされます。 下記
\fB\-\-unordered\fR
も参照してください。 オブジェクトは、\fBgit-replace\fR(1)
の置換メカニズムを考慮せずに、そのまま表示されます。
.RE
.PP
\fB\-\-buffer\fR
.RS 4
通常、バッチ出力は各オブジェクトが出力された後にフラッシュされるため、プロセスは
\fBcat\-file\fR
からインタラクティブに読み取りおよび書き込みを行うことができます。 このオプションを使用すると、出力は通常のstdioバッファリングを使用します。 これは、多数のオブジェクトで
\fB\-\-batch\-check\fR
または
\fB\-\-batch\-command\fR
を呼び出す場合には、はるかに効率的です。
.RE
.PP
\fB\-\-unordered\fR
.RS 4
\fB\-\-batch\-all\-objects\fR
が使用されている場合に、このオプションを使用すると、ハッシュの順序よりもオブジェクトのコンテンツにアクセスするのに効率的な順序でオブジェクトにアクセスします。 順序の正確な詳細は指定されていませんが、特定の順序が必要ない場合は、特に
\fB\-\-batch\fR
を使用すると、通常、出力が速くなります。 注意:
\fBcat\-file\fR
は、リポジトリに同一オブジェクトが複数回保存されている場合でも、オブジェクトを1回だけ表示することに注意してください。
.RE
.PP
\fB\-\-allow\-unknown\-type\fR
.RS 4
\fB\-s\fR
または
\fB\-t\fR
が不明なタイプの 壊れた/破損した オブジェクトを照会できるようにします。
.RE
.PP
\fB\-\-follow\-symlinks\fR
.RS 4
\fB\-\-batch\fR
または
\fB\-\-batch\-check\fR
を使用して、 tree\-ish:path\-in\-tree 形式の拡張SHA\-1式を使用してオブジェクトを要求する場合は、リポジトリ内のシンボリックリンクをたどります。 リンク自体に関する出力を提供する代わりに、リンク先オブジェクトに関する出力を提供します。 シンボリックリンクがツリーっぽいものの外側を指している場合(たとえば、
\fB/foo\fR
へのリンクまたは
\fB\&.\&./foo\fR
へのルートレベルのリンク)、ツリーの外側にあるリンクの部分が出力されます。
.sp
このオプションは、ツリー内のオブジェクトではなく、インデックス内のオブジェクトが指定されている場合(たとえば、
\fBHEAD:link\fR
ではなく
\fB:link\fR）、 (現在のところ)正しく機能しません。
.sp
\fB\-\-batch\fR
または
\fB\-\-batch\-check\fR
が使用されていない限り、このオプションは(現在のところ)使用できません。
.sp
たとえば、以下のものを含むgitリポジトリについて考えてみましょう:
.sp
.if n \{\
.RS 4
.\}
.nf
f はファイルで、内容は "hello\en" です。
link は f への symlink です。
dir/link は \&.\&./f への symlink です。
plink は \&.\&./f への symlink です。
alink は /etc/passwd への symlink です。
.fi
.if n \{\
.RE
.\}
.sp
通常のファイル
\fBf\fR
の場合、
\fBecho HEAD:f | git cat\-file \-\-batch\fR
とすると、以下を出力します
.sp
.if n \{\
.RS 4
.\}
.nf
ce013625030ba8dba906f756967f9e9ca394464a blob 6
.fi
.if n \{\
.RE
.\}
.sp
そして
\fBecho HEAD:link | git cat\-file \-\-batch \-\-follow\-symlinks\fR
は、
\fBHEAD:dir/link\fR
と同様に、 両方とも
\fBHEAD:f\fR
を指しているため、同一の出力を行います。
.sp
\fB\-\-follow\-symlinks\fR
がないと、これらはシンボリックリンク自体に関するデータを出力します。
\fBHEAD:link\fR
の場合、以下のように表示されます。
.sp
.if n \{\
.RS 4
.\}
.nf
4d1ae35ba2c8ec712fa2a379db44ad639ca277bd blob 1
.fi
.if n \{\
.RE
.\}
.sp
\fBplink\fR
と
\fBalink\fR
はどちらもツリーの外側を指しているため、それぞれ以下のように出力されます:
.sp
.if n \{\
.RS 4
.\}
.nf
symlink 4
\&.\&./f
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
symlink 11
/etc/passwd
.fi
.if n \{\
.RE
.\}
.RE
.PP
\fB\-z\fR
.RS 4
\fB\-\-batch\fR
または
\fB\-\-batch\-check\fR
または
\fB\-\-batch\-command\fR
でのみ意味があります。 入力は改行区切りではなく NUL 区切りです。
.RE
.SH "OUTPUT"
.sp
\fB\-t\fR が指定されている場合、 \fB<type>\fR の1つを出力。
.sp
\fB\-s\fR が指定されている場合、 \fB<object>\fR のサイズ(バイト単位)を出力。
.sp
\fB\-e\fR が指定されている場合、 \fB<object>\fR の形式が正しくない限り、出力は行われません。
.sp
\fB\-p\fR を指定すると、\fB<object>\fR の内容がきれいに印刷(pretty\-printed)されます。
.sp
\fB<type>\fR が指定されている場合、 \fB<object>\fR の生の(圧縮されていない)コンテンツが返されます。
.SH "BATCH OUTPUT"
.sp
\fB\-\-batch\fR または \fB\-\-batch\-check\fR が指定されている場合、 \fBcat\-file\fR はstdinからオブジェクトを1行に1つずつ読み取り、それらに関する情報を出力します。 デフォルトでは、 \fBgit-rev-parse\fR(1) にフィードされたかのように、行全体がオブジェクトと見なされます。
.sp
\fB\-\-batch\-command\fR が指定されると、 \fBcat\-file\fR は標準入力からコマンドを 1 行に 1 つずつ読み取り、指定されたコマンドに基づいて情報を出力します。 \fB\-\-batch\-command\fR を使用すると、 \fBinfo\fR コマンドの後にオブジェクトが続くと \fB\-\-batch\-check\fR と同一の方法でオブジェクトに関する情報が出力され、 \fBcontents\fR コマンドの後にオブジェクトが続くと \fB\-\-batch\fR と同一の方法で内容が出力されます。
.sp
カスタム \fB<format>\fR を使用して、オブジェクトごとに表示される情報を指定できます。 \fB<format>\fR は、各オブジェクトのstdoutに文字通りコピーされ、 \fB%(atom)\fR `形式のプレースホルダーが展開され、その後に改行が続きます。 使用可能なatomは以下のとおりです:
.PP
\fBobjectname\fR
.RS 4
オブジェクト名の完全な16進表現。
.RE
.PP
\fBobjecttype\fR
.RS 4
オブジェクトのタイプ(\fBcat\-file \-t\fR
で表示されるものと同じ)。
.RE
.PP
\fBobjectsize\fR
.RS 4
オブジェクトのサイズ(バイト単位) (\fBcat\-file \-s\fR
で表示されるものと同じ)。
.RE
.PP
\fBobjectsize:disk\fR
.RS 4
オブジェクトがディスク上で占めるサイズ(バイト単位)。 下記「CAVEATS」セクションの「note about on\-disk sizes」（ディスク上のサイズに関する注記)を参照してください。
.RE
.PP
\fBdeltabase\fR
.RS 4
オブジェクトがディスク上にデルタとして保存されている場合、これはデルタベースオブジェクト名の完全な16進表現に展開されます。 それ以外の場合は、null OID ( 全てゼロ)に展開されます。 下記「CAVEATS」を参照してください。
.RE
.PP
\fBrest\fR
.RS 4
このatomが出力文字列で使用されている場合、入力行は最初の空白の境界で分割されます。 その空白の前のすべての文字がオブジェクト名と見なされます。 その最初の空白後の文字(つまり、行の「残り」)は、
\fB%(rest)\fR
アトムに置き換えられて出力されます。
.RE
.sp
形式が指定されていない場合、デフォルトの形式は \fB%(objectname) %(objecttype) %(objectsize)\fR です。
.sp
\fB\-\-batch\fR が指定されている場合、 または \fB\-\-batch\-command\fR が \fBcontents\fR コマンドで使用されている場合、 オブジェクト情報の後にオブジェクトの内容(\fB%(objectsize)\fR バイトのサイズ)が続き、その後に改行(newline)が続きます。
.sp
たとえば、カスタム形式のない \fB\-\-batch\fR は、以下のように生成されます:
.sp
.if n \{\
.RS 4
.\}
.nf
<oid> SP <type> SP <size> LF
<contents> LF
.fi
.if n \{\
.RE
.\}
.sp
.sp
一方、 \fB\-\-batch\-check=\*(Aq%(objectname) %(objecttype)\*(Aq\fR は、以下のように生成します:
.sp
.if n \{\
.RS 4
.\}
.nf
<oid> SP <type> LF
.fi
.if n \{\
.RE
.\}
.sp
.sp
リポジトリ内のオブジェクトに解決できない名前がstdinに指定されている場合、 \fBcat\-file\fR はカスタム形式を無視して以下のように出力します:
.sp
.if n \{\
.RS 4
.\}
.nf
<object> SP missing LF
.fi
.if n \{\
.RE
.\}
.sp
.sp
(あいまいな短い sha など、)複数のオブジェクトを参照する可能性のある名前が指定されている場合、 \fBcat\-file\fR はカスタム形式を無視して以下のように出力します:
.sp
.if n \{\
.RS 4
.\}
.nf
<object> SP ambiguous LF
.fi
.if n \{\
.RE
.\}
.sp
.sp
\fB\-\-follow\-symlinks\fR が使用され、リポジトリ内のシンボリックリンクがリポジトリの外部を指している場合、 \fBcat\-file\fR はカスタム形式を無視して以下のように出力します:
.sp
.if n \{\
.RS 4
.\}
.nf
symlink SP <size> LF
<symlink> LF
.fi
.if n \{\
.RE
.\}
.sp
.sp
シンボリックリンク(symlink)はツリーのルートに対して絶対(absolute)(\fB/\fR で始まる)か、あるいは相対(relative)です。 たとえば、 dir/link が \fB\&.\&./\&.\&./foo\fR を指している場合、\fB<symlink>\fR は \fB\&.\&./foo\fR になります。 \fB<size>\fR は、バイト単位のシンボリックリンクのサイズです。
.sp
\fB\-\-follow\-symlinks\fR を使用すると、以下のエラーメッセージが表示されます:
.sp
.if n \{\
.RS 4
.\}
.nf
<object> SP missing LF
.fi
.if n \{\
.RE
.\}
.sp
.sp
これは、要求した最初のシンボリックリンク(initial symlink)が存在しない場合に出力されます。
.sp
.if n \{\
.RS 4
.\}
.nf
dangling SP <size> LF
<object> LF
.fi
.if n \{\
.RE
.\}
.sp
.sp
これは、最初のシンボリックリンク(initial symlink)が存在する場合に出力されますが、それが指すモノは出力されません。
.sp
.if n \{\
.RS 4
.\}
.nf
loop SP <size> LF
<object> LF
.fi
.if n \{\
.RE
.\}
.sp
.sp
これは、シンボリックリンクループ(または解決するために40を超えるリンク段数を必要とするシンボリックリンク)に対して出力されます。
.sp
.if n \{\
.RS 4
.\}
.nf
notdir SP <size> LF
<object> LF
.fi
.if n \{\
.RE
.\}
.sp
.sp
これは、シンボリックリンクの解決中に、ファイルがディレクトリ名として使用された場合に出力されます。
.SH "CAVEATS(警告)"
.sp
注意: ディスク上のオブジェクトのサイズは正確に報告されますが、どのrefまたはオブジェクトがディスクの使用に関与しているかについて結論を出す際には注意が必要です。 パックされた非デルタオブジェクトのサイズは、それに対してデルタするオブジェクトのサイズよりもはるかに大きい場合がありますが、ベースとデルタのオブジェクトの選択は任意であり、再パック中に変更される可能性があります。
.sp
注意: オブジェクトの複数のコピーがオブジェクトデータベースに存在する可能性があることにも注意してください。 この場合、どのコピーのサイズまたはデルタベースが報告されるかは未定義です。
.SH "GIT"
.sp
Part of the \fBgit\fR(1) suite
