'\" t
.\"     Title: gitcredentials
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: 12/10/2022
.\"    Manual: Git Manual
.\"    Source: Git 2.38.0.rc1.238.g4f4d434dc6.dirty
.\"  Language: English
.\"
.TH "GITCREDENTIALS" "7" "12/10/2022" "Git 2\&.38\&.0\&.rc1\&.238\&.g" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
gitcredentials \- Gitにユーザー名とパスワードを提供する
.SH "SYNOPSIS"
.sp
.nf
git config credential\&.https://example\&.com\&.username myusername
git config credential\&.helper "$helper $options"
.fi
.sp
.SH "DESCRIPTION"
.sp
Gitは、操作を実行するためにユーザーからの資格情報を必要とする場合があります。たとえば、HTTP経由でリモートリポジトリにアクセスするために、ユーザー名とパスワードを要求する必要がある場合があります。このマニュアルでは、Gitがこれらの資格情報を要求するために使用するメカニズムと、これらの資格情報を繰り返し入力しないようにするためのいくつかの機能について説明します。
.SH "REQUESTING CREDENTIALS"
.sp
資格情報ヘルパーが定義されていない場合、Gitは以下の戦略でユーザーにユーザー名とパスワードを要求します:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
\fBGIT_ASKPASS\fR
環境変数が設定されている場合、その環境変数で指定したプログラムが呼び出されます。コマンドラインでプログラムによって適切なプロンプトが表示され、ユーザーの入力が標準出力から読み取られます。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
それ以外の場合、
\fBcore\&.askPass\fR
構成変数が設定されていると、その値は上記と同様に使用されます。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
それ以外の場合、\fBSSH_ASKPASS\fR
環境変数が設定されていると、その値は上記と同様に使用されます。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
それ以外の場合、端末でユーザーの入力が促されます。
.RE
.SH "AVOIDING REPETITION"
.sp
同じ資格情報を何度も入力するのは面倒な場合があります。 Gitには、この煩わしさを軽減する2つの方法があります:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
指定の認証コンテキストのためのユーザー名の静的構成。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
パスワードをキャッシュまたは保存するため、またはシステムパスワードウォレットまたはキーチェーンと対話するための資格情報ヘルパー。
.RE
.sp
1つ目は、パスワードに使用できる安全なストレージがない場合に簡単で適切です。これは通常、以下を構成に追加することによって設定します:
.sp
.if n \{\
.RS 4
.\}
.nf
[credential "https://example\&.com"]
        username = me
.fi
.if n \{\
.RE
.\}
.sp
.sp
一方、資格情報ヘルパーは、Gitがユーザー名とパスワードの両方を要求できる外部プログラムです。これらは通常、OSまたは他のプログラムによって提供される安全なストレージとインターフェイスします。
.sp
ヘルパーを使用するには、最初に使用するヘルパーを選択する必要があります。Gitには現在、以下のヘルパーが含まれています:
.PP
cache
.RS 4
資格情報をメモリに短期間キャッシュします。 詳細については
\fBgit-credential-cache\fR(1)
を参照してください。
.RE
.PP
store
.RS 4
資格情報をディスクに無期限に保存します。詳細については
\fBgit-credential-store\fR(1)
を参照してください。
.RE
.sp
サードパーティのヘルパーがインストールされている場合もあります。 \fBgit help \-a\fR の出力で \fBcredential\-*\fR を検索し、個々のヘルパーのドキュメントを参照してください。あなたが使いたいヘルパーを選んだら、その名前を credential\&.helper 変数に入力することで、Gitにそのヘルパーを使用するように指示できます。
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
ヘルパーを探す。
.sp
.if n \{\
.RS 4
.\}
.nf
$ git help \-a | grep credential\-
credential\-foo
.fi
.if n \{\
.RE
.\}
.sp
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
その説明を読む。
.sp
.if n \{\
.RS 4
.\}
.nf
$ git help credential\-foo
.fi
.if n \{\
.RE
.\}
.sp
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
Gitにそれを使用するように伝えます。
.sp
.if n \{\
.RS 4
.\}
.nf
$ git config \-\-global credential\&.helper foo
.fi
.if n \{\
.RE
.\}
.sp
.RE
.SH "CREDENTIAL CONTEXTS"
.sp
Gitは、各資格情報がURLによって定義されたコンテキストを持っていると見なします。このコンテキストは、コンテキスト固有の構成を検索するために使用され、すべてのヘルパーに渡されます。ヘルパーは、これを安全なストレージへのインデックスとして使用できます。
.sp
たとえば、 \fBhttps://example\&.com/foo\&.git\fR にアクセスしていると想像してください。Gitが構成ファイルを調べてセクションがこのコンテキストに一致するかどうかを確認するとき、コンテキストが構成ファイル内のパターンのより具体的なサブセットである場合、Gitは2つが一致すると見なします。たとえば、設定ファイルに以下がある場合:
.sp
.if n \{\
.RS 4
.\}
.nf
[credential "https://example\&.com"]
        username = foo
.fi
.if n \{\
.RE
.\}
.sp
.sp
これはマッチします。両方のプロトコルが同じで、かつ、両方のホストが同じであり、かつ、パターンURLはパス部分を気にしないからです。ただし、以下のコンテキストは一致しません:
.sp
.if n \{\
.RS 4
.\}
.nf
[credential "https://kernel\&.org"]
        username = foo
.fi
.if n \{\
.RE
.\}
.sp
.sp
なぜならホスト名が異なるためです。 また、 \fBfoo\&.example\&.com\fR とは一致しません。 Gitは、2つのホストが同じドメインの一部であるかどうかを考慮せずに、ホスト名を正確に比較します。 同様に、 \fBhttp://example\&.com\fR の設定エントリは一致しません。Gitはプロトコルを正確に比較します。 ただし、 \fBhttp\&.<URL>\&.*\fR オプションと同様に、ドメイン名やその他のパターンマッチングにワイルドカードを使用できます。
.sp
パターンURLにパス部分が含まれている場合、これも完全に一致する必要があります。コンテキスト \fBhttps://example\&.com/bar/baz\&.git\fR は(\fBhttps://example\&.com\fR 部分の照合に加えてパス部分も一致する) \fBhttps://example\&.com/bar/baz\&.git\fR の設定エントリとは一致しますが、 \fBhttps://example\&.com/bar\fR 構成エントリとは一致しません。
.SH "CONFIGURATION OPTIONS"
.sp
コンテキストのオプションは、 \fBcredential\&.*\fR (すべての資格情報に適用) または \fBcredential\&.<URL>\&.*\fR のいずれかで構成できます。ここで、 <URL> は上記のコンテキストと一致します。
.sp
以下のオプションは、どちらの場所でも使用できます:
.PP
helper
.RS 4
外部資格情報ヘルパーの名前、および関連するオプション。ヘルパー名が絶対パスでない場合は、文字列
\fBgit credential\-\fR
が先頭に追加されます。結果の文字列はシェルによって実行されます(たとえば、これを
\fBfoo \-\-option=bar\fR
に設定すると、シェルを介して
\fBgit credential\-foo \-\-option=bar\fR
が実行されます。例については使用するヘルパーのマニュアルを参照してください。
.sp
\fBcredential\&.helper\fR
構成変数のインスタンスが複数ある場合、各ヘルパーが順番に試行され、ユーザー名 または パスワード または 何も提供しない 場合があります。Gitがユーザー名とパスワードの両方を取得すると、それ以上ヘルパーは試行されません。
.sp
\fBcredential\&.helper\fR
が空の文字列に設定されている場合、これによりヘルパーリストが空にリセットされます(したがって、空の文字列ヘルパーを構成し、その後に必要なヘルパーのセットを構成することで、優先度の低い構成ファイルによって設定されたヘルパーをオーバーライドできます)。
.RE
.PP
username
.RS 4
URLに指定されていない場合のデフォルトのユーザー名。
.RE
.PP
useHttpPath
.RS 4
デフォルトでは、Gitはhttp URLのパス部分を外部ヘルパーを介して照合する価値があるとは見なしません。 これは、
\fBhttps://example\&.com/foo\&.git\fR
に保存されている資格情報が
\fBhttps://example\&.com/bar\&.git\fR
にも使用されることを意味します。これらの場合を区別したい場合は、このオプションを「true」に設定してください。
.RE
.SH "CUSTOM HELPERS"
.sp
あなた独自のカスタムヘルパーを作成して、資格情報を保持している任意のシステムとインターフェイスすることができます。
.sp
資格情報ヘルパーは、資格情報を長期ストレージとの間でフェッチまたは保存するためにGitによって実行されるプログラムです(「長期」とは単一のGitプロセスよりも単純に長いという意味です。たとえば、資格情報はメモリ内に数分間、またはディスク上で無期限に保存される場合があります)。
.sp
各ヘルパーは、構成変数 \fBcredential\&.helper\fR の単一の文字列で指定されます(その他 \fBgit-config\fR(1) を参照)。文字列はGitによって、以下のルールを使用して実行されるコマンドに変換されます:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
ヘルパー文字列が "!" で始まる場合、それはシェルスニペットと見なされ、 "!" の後のすべてが コマンドになります。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
それ以外の場合、ヘルパー文字列が絶対パスで始まる場合は、文字列がそのままコマンドとして扱われます。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
それ以外の場合は、文字列 "git credential\-" がヘルパー文字列の前に付加され、その結果がコマンドになります。
.RE
.sp
結果のコマンドには「operation」引数が追加され(詳細は下記参照)、結果はシェルによって実行されます。
.sp
仕様の例を以下に示します:
.sp
.if n \{\
.RS 4
.\}
.nf
# run "git credential\-foo"
[credential]
        helper = foo

# same as above, but pass an argument to the helper
[credential]
        helper = "foo \-\-bar=baz"

# the arguments are parsed by the shell, so use shell
# quoting if necessary
[credential]
        helper = "foo \-\-bar=\*(Aqwhitespace arg\*(Aq"

# you can also use an absolute path, which will not use the git wrapper
[credential]
        helper = "/path/to/my/helper \-\-with\-arguments"

# or you can specify your own shell snippet
[credential "https://example\&.com"]
        username = your_user
        helper = "!f() { test \e"$1\e" = get && echo \e"password=$(cat $HOME/\&.secret)\e"; }; f"
.fi
.if n \{\
.RE
.\}
.sp
.sp
一般的に、上記の ルール(3）は、ユーザーが指定するのが最も簡単です。資格情報ヘルパーの作成者は、プログラムに "git\-credential\-$NAME" という名前を付け、インストール中に \fB$PATH\fR または \fB$GIT_EXEC_PATH\fR に配置して、ユーザーが \fBgit config credential\&.helper $NAME\fR を有効にできるようにすることで、ユーザーを支援するように努める必要があります。
.sp
ヘルパーが実行されると、コマンドラインに以下のいずれかの「操作」引数が追加されます:
.PP
\fBget\fR
.RS 4
一致する資格情報が存在する場合は、それを返します。
.RE
.PP
\fBstore\fR
.RS 4
ヘルパーに該当する場合は、資格情報を保存します。
.RE
.PP
\fBerase\fR
.RS 4
もしあれば、ヘルパーのストレージから一致する資格情報を削除します。
.RE
.sp
資格情報の詳細は、ヘルパーの標準入力ストリームで提供されます。正確な形式は、 \fBgit credential\fR 配管コマンドの 入力/出力形式 と同じです(詳細な仕様については、 \fBgit-credential\fR(1) の「INPUT/OUTPUT FORMAT」のセクションを参照してください)。
.sp
`get`操作の場合、ヘルパーは標準出力の属性のリストを同じ形式で作成する必要があります(一般的な属性については \fBgit-credential\fR(1) を参照してください)。ヘルパーはサブセットを自由に作成できます。提供するのに役立つものがない場合は、値をまったく作成しません。提供された属性は、Gitの資格情報サブシステムによってすでに知られている属性を上書きします。
.sp
すべての属性を上書きすることが可能ですが、正常に動作するヘルパーは、ユーザー名とパスワード以外の属性については上書きしないようにする必要があります。
.sp
ヘルパーが \fBtrue\fR または \fB1\fR の値で \fBquit\fR 属性を出力した場合、それ以上のヘルパーは参照されず、ユーザーにプロンプトも表示されません(資格情報が提供されていない場合、操作は失敗します)。
.sp
同様に、ユーザー名とパスワードの両方が提供されると、ヘルパーに相談することはありません。
.sp
\fBstore\fR または \fBerase\fR 操作の場合、ヘルパーの出力は無視されます。
.sp
ヘルパーが要求された操作の実行に失敗した場合、または潜在的な問題をユーザーに通知する必要がある場合、ヘルパーは標準エラー出力に書き込むことがあります。
.sp
要求された操作(読み取り専用ストアなど)をサポートしていない場合は、要求を黙って無視する必要があります。
.sp
ヘルパーが他の操作を受け取った場合、ヘルパーはその要求を黙って無視する必要があります。これにより、将来の操作を追加する余地が残ります(古いヘルパーは新しい要求を無視するだけです)。
.SH "GIT"
.sp
Part of the \fBgit\fR(1) suite
