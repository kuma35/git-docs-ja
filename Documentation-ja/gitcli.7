'\" t
.\"     Title: gitcli
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: 12/10/2022
.\"    Manual: Git Manual
.\"    Source: Git 2.38.0.rc1.238.g4f4d434dc6.dirty
.\"  Language: English
.\"
.TH "GITCLI" "7" "12/10/2022" "Git 2\&.38\&.0\&.rc1\&.238\&.g" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
gitcli \- Gitコマンドラインのインターフェイスと規則
.SH "SYNOPSIS"
.sp
gitcli
.SH "DESCRIPTION"
.sp
このマニュアルでは Git CLI 全体で使用される規則について説明します。
.sp
多くのコマンドは、引数としてリビジョン(revisions)(それはほとんどの場合「コミット」(commits)ですが、文脈とコマンドによっては「ツリーっぽい」(tree\-ish)場合もあります)と、パス(paths)を取ります。ルールは以下のとおりです:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
オプションが最初に来て、次に引数が来ます。 サブコマンドは、 ダッシュで始まるオプション(\fB\-\-max\-parents 2\fR
などの独自の引数を取ることができます)と引数を取ることができます。 最初にダッシュで始まるオプション達を指定し、その後ろ次に引数達を指定する必要があります。 一部のコマンドは、 オプション以外の引数を指定した後でダッシュで始まるオプションを受け入れる場合がありますが、(コマンドがあいまいになる可能性があり、)それに依存すべきではありません(なぜなら、いずれは「オプションの後に引数」というルールを強制して、 これらの曖昧さを修正する事になるかもしれないからです)。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
リビジョン達が最初に来て、その次にパス達が来ます。 例えば、
\fBgit diff v1\&.0 v2\&.0 arch/x86 include/asm\-x86\fR
では
\fBv1\&.0\fR
と
\fBv2\&.0\fR
はリビジョン達であり、
\fBarch/x86\fR
と
\fBinclude/asm\-x86\fR
はパス達です。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
引数がリビジョンまたはパスのいずれかと誤解される可能性がある場合は、それらの間に
\fB\-\-\fR
を配置することで曖昧さを解消できます。例えば、
\fBgit diff \-\- HEAD\fR
は、「作業ツリーにHEADというファイルがあります。インデックスにステージングしたバージョンと、そのファイルの作業ツリーにあるバージョンとの変更を表示してください」であり、「HEADコミットとワークツリー全体の違いを表示する」ではありません。後者を求めるには
\fBgit diff HEAD \-\-\fR
とします。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-\fR
を明示しなくても、Gitは合理的な推測を行いますが、あいまいな場合はエラーが発生し、あなたに明確にするように求めます。例えば、作業ツリーにHEADというファイルがある場合、
\fBgit diff HEAD\fR
はあいまいであり、曖昧さを解消するには、
\fBgit diff HEAD \-\-\fR
または
\fBgit diff \-\- HEAD\fR
のいずれかを指定する必要があります。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
一部のコマンドでは、
\fB\-\-\fR
はリビジョンとパスを明確に区別するために使われるため、これら一部のコマンドでオプションとリビジョンを分離するために使用することはできません。これら一部のコマンドではオプションとリビジョンを分離するために
\fB\-\-end\-of\-options\fR
を使用できます(これら以外のパスのリビジョンを区別しないコマンドでも機能します。その場合、
\fB\-\-end\-of\-options\fR
は単に
\fB\-\-\fR
のエイリアスです)。
.sp
ランダムなユーザー入力を処理することが期待されるスクリプトを作成するときは、適切な場所に曖昧さ回避の
\fB\-\-\fR
を配置することにより、どの引数がどれであるかを明示することをお勧めします。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
多くのコマンドではパスにワイルドカードを使用できますが、シェルによってワイルドカードが取得されないように保護する必要があります。以下の2つの意味は異なります:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git restore *\&.c
$ git restore \e*\&.c
.fi
.if n \{\
.RE
.\}
.sp
前者を使用すると、シェルでfileglobを展開でき、作業ツリー内の C言語ソースファイル(dot\-C)をインデックス内のバージョンで上書きするように要求されます。後者は
\fB*\&.c\fR
をGitに渡し、作業ツリーにチェックアウトするパターンに一致するインデックス内のパスを要求しています。\fBgit add hello\&.c; rm hello\&.c\fR
を実行後、前者では作業ツリーに
\fBhello\&.c\fR
は表示されませんが、後者では表示されます。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
ファイルシステムの
\fB\&.\fR
(ピリオド)が現在のディレクトリを参照するのと同じように、Gitでリポジトリ名として
\fB\&.\fR
を使用すること(a dot\-repository)は相対パスであり、あなたの現在のリポジトリを意味します。
.RE
.sp
Gitのスクリプトを作成するときに従う必要のある「フラグ」(flag)に関するルールは以下のとおりです:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
ダッシュで繋がない形式(non\-dashed form)のGitコマンドを使用することをお勧めします。つまり、
\fBgit\-foo\fR
よりは
\fBgit foo\fR
を使用すべきです。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
短いオプションは分割して単語に区切ります(
\fBgit foo \-ab\fR
よりも
\fBgit foo \-a \-b\fR
を優先します。前者は機能しない事があります)。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
コマンドラインオプションが引数を取る場合は、串刺し形式(stuck form) を使用します。つまり、短いオプションの場合は
\fBgit foo \-o Arg\fR
の代わりに
\fBgit foo \-oArg\fR
を記述し、長いオプションの場合は
\fBgit foo \-\-long\-opt Arg\fR
の代わりに
\fBgit foo \-\-long\-opt=Arg\fR
を記述します。オプションのオプション引数をとるオプションは、串刺し形式で記述する必要があります。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
コマンドにリビジョンパラメータを指定するときは、そのパラメータが作業ツリー内のファイルの名前と混同されないことを確認してください。例えば、
\fBgit log \-1 HEAD\fR
とは記述せず、\fBgit log \-1 HEAD \-\-\fR
と記述します。作業ツリーに
\fBHEAD\fR
というファイルがある場合、前者は機能しません。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
多くのコマンドでは、長いオプション
\fB\-\-option\fR
を一意であるかぎり短いプレフィックスのみに省略できます(たとえば、名前が
\fBopt\fR
で始まるオプションが他にない場合は、
\fB\-\-opt\fR
と入力して
\fB\-\-option\fR
フラグを呼び出すことができます)。ただし、スクリプトを作成するときは、省略してはいけません。なぜならGitのより新しいバージョンで、名前が同じプレフィックスを共有する新しいオプションが導入される可能性があるからです。例えば
\fB\-\-optimize\fR
が導入されると、以前は一意であった短いプレフィックス(\fB\-\-option\fR
,
\fB\-\-opt\fR)を一意では無くしてしまいます。
.RE
.SH "ENHANCED OPTION PARSER"
.sp
Git 1\&.5\&.4シリーズ以降、多くのGitコマンド(この文書の執筆時点ではすべてではありませんが)は、拡張オプションパーサーを備えています。
.sp
以下は、この拡張オプションパーサーによって提供される機能のリストです。
.SS "Magic Options"
.sp
拡張オプションパーサーがアクティブになっているコマンドはすべて、いくつかの魔法のコマンドラインオプション(magic command\-line options)を理解します:
.PP
\fB\-h\fR
.RS 4
コマンドの、かなり整った使用法を提供します。
.sp
.if n \{\
.RS 4
.\}
.nf
$ git describe \-h
usage: git describe [<options>] <commit\-ish>*
   or: git describe [<options>] \-\-dirty

    \-\-contains            find the tag that comes after the commit
    \-\-debug               debug search strategy on stderr
    \-\-all                 use any ref
    \-\-tags                use any tag, even unannotated
    \-\-long                always use long format
    \-\-abbrev[=<n>]        use <n> digits to display SHA\-1s
.fi
.if n \{\
.RE
.\}
.sp
注意: 一部のサブコマンド(例:
\fBgit grep\fR
)は、コマンドラインに
\fB\-h\fR
以外のものがある場合、動作が異なる場合がありますが、コマンドラインに何も含まれていない
\fBgit subcmd \-h\fR
は、一貫して使用法を提供することを目的としています。
.RE
.PP
\fB\-\-help\-all\fR
.RS 4
一部のGitコマンドは、配管コマンドにのみ使用されるオプションまたは非推奨のオプションを取り、そのようなオプションはデフォルトの使用法から隠されています。 このオプションはオプションの完全なリストを提供します。
.RE
.SS "否定オプション"
.sp
長いオプションは、接頭辞 \fB\-\-no\-\fR を付けることで無効にできます。 たとえば、 \fBgit branch\fR にはオプション \fB\-\-track\fR があります。これはデフォルトで \fBon\fR です。 \fB\-\-no\-track\fR を使用して、その動作をオーバーライドできます。 \fB\-\-color\fR と \fB\-\-no\-color\fR についても同じことが言えます。
.SS "短いオプションのおまとめ"
.sp
拡張オプションパーサーをサポートするコマンドを使用すると、短いオプションをおまとめできます。これは、たとえば、 \fBgit rm \-rf\fR や \fBgit clean \-fdx\fR を使用できることを意味します。
.SS "長いオプションの省略"
.sp
拡張オプションパーサーをサポートするコマンドは、クソ詳しく長いオプションの一意なプレフィックスを受け入れますが、これは注意して使用してください。 たとえば、 \fBgit commit \-\-amen\fR は \fBgit commit \-\-amend\fR と入力したかのように動作しますが、これは、後のバージョンのGitが同じプレフィックスを共有する別のオプションを導入するまでのみ当てはまります。例えば \fBgit commit \-\-amenity\fR オプションが導入されたら一意で無くなります。
.SS "Separating argument from the option"
.sp
コマンドラインで、オプションの必須パラメータを単に区切られた単語として記述することができます。これは、以下のすべての使い方が機能することを意味します:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git foo \-\-long\-opt=Arg
$ git foo \-\-long\-opt Arg
$ git foo \-oArg
$ git foo \-o Arg
.fi
.if n \{\
.RE
.\}
.sp
.sp
ただし、これは必須ではないオプションの値を持つスイッチでは許可されていません。その場合は串刺し形式を使用する必要があります:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git describe \-\-abbrev HEAD     # correct
$ git describe \-\-abbrev=10 HEAD  # correct
$ git describe \-\-abbrev 10 HEAD  # NOT WHAT YOU MEANT
.fi
.if n \{\
.RE
.\}
.sp
.SH "注意：よく混同されるオプションに関する注記"
.sp
作業ツリーおよび/またはインデックス内のファイルを処理できる多くのコマンドは、 \fB\-\-cached\fR および/または \fB\-\-index\fR オプションを使用できます。インデックスは元々キャッシュと呼ばれていたため、これら2つは同義語であると誤解されることがあります。ちゃいます。これらの2つのオプションは非常に異なることを意味します。
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-cached\fR
オプションは、通常は作業ツリー内のファイルで機能するコマンドに、「インデックスのみで」機能するように要求するために使用されます。 たとえば、
\fBgit grep\fR
をコミットせずに使用して、どのコミットから文字列を検索するかを指定すると、通常は作業ツリー内のファイルで機能しますが、
\fB\-\-cached\fR
オプションを使用するとインデックス内の文字列を検索します。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-index\fR
オプションは、通常は作業ツリー内のファイルで機能するコマンドに、「インデックスにも」影響を与えるように要求するために使用されます。たとえば、
\fBgit stash apply\fR
は通常、stashエントリに記録された変更を作業ツリーにマージしますが、
\fB\-\-index\fR
オプションを使用すると、インデックスへの変更もマージします。
.RE
.sp
\fBgit apply`コマンドは、 `\-\-cached\fR または \fB\-\-index\fR のいずれかを伴って使用できます(同時に使用することはできません。通常、このコマンドは作業ツリー内のファイルにのみ影響しますが、 \fB\-\-index\fR を使用すると、ファイルとそのインデックスエントリの両方にパッチが適用され、 \fB\-\-cached\fR を使用すると、インデックスエントリのみが変更されます。
.sp
詳細については \m[blue]\fBhttps://lore\&.kernel\&.org/git/7v64clg5u9\&.fsf@assigned\-by\-dhcp\&.cox\&.net/\fR\m[] と \m[blue]\fBhttps://lore\&.kernel\&.org/git/7vy7ej9g38\&.fsf@gitster\&.siamese\&.dyndns\&.org/\fR\m[] も参照してください。
.sp
作業ツリー および/または インデックス内のファイルに対しても機能する他のいくつかのコマンドは、 \fB\-\-staged\fR および/または \fB\-\-worktree\fR を取ることができます。
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-staged\fR
は
\fB\-\-cached\fR
とまったく同じです。これは、作業ツリーではなく、インデックスでのみ機能するようにコマンドに要求するために使用されます。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-worktree\fR
は反対に、インデックスではなく、作業ツリーのみで作業するようにコマンドに要求します。
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
2つのオプションを一緒に指定して、インデックスと作業ツリーの両方で作業するようにコマンドに要求することができます。
.RE
.SH "GIT"
.sp
Part of the \fBgit\fR(1) suite
