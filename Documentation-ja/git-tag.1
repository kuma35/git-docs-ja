'\" t
.\"     Title: git-tag
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: 12/10/2022
.\"    Manual: Git Manual
.\"    Source: Git 2.38.0.rc1.238.g4f4d434dc6.dirty
.\"  Language: English
.\"
.TH "GIT\-TAG" "1" "12/10/2022" "Git 2\&.38\&.0\&.rc1\&.238\&.g" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-tag \- GPG署名されたタグオブジェクトを作成、一覧表示、削除、検証します
.SH "SYNOPSIS"
.sp
.nf
\fIgit tag\fR [\-a | \-s | \-u <keyid>] [\-f] [\-m <msg> | \-F <file>] [\-e]
        <tagname> [<commit> | <object>]
\fIgit tag\fR \-d <tagname>\&...
\fIgit tag\fR [\-n[<num>]] \-l [\-\-contains <commit>] [\-\-no\-contains <commit>]
        [\-\-points\-at <object>] [\-\-column[=<options>] | \-\-no\-column]
        [\-\-create\-reflog] [\-\-sort=<key>] [\-\-format=<format>]
        [\-\-merged <commit>] [\-\-no\-merged <commit>] [<pattern>\&...]
\fIgit tag\fR \-v [\-\-format=<format>] <tagname>\&...
.fi
.sp
.SH "DESCRIPTION"
.sp
タグを削除、一覧表示、検証するために \fB\-d/\-l/\-v\fR が指定されていない限り、 \fBrefs/tags/\fR にタグ参照を追加します。
.sp
\fB\-f\fR が指定されていない限り、名前付きタグはまだ存在してはいけません。
.sp
\fB\-a\fR, \fB\-s\fR, \fB\-u <keyid>\fR のいずれかが渡されると、コマンドは「タグ」オブジェクトを作成し、タグメッセージを必要とします。 \fB\-m<msg>\fR または \fB\-F<file>\fR が指定されていない限り、ユーザーがタグメッセージを入力するためのエディターが起動します。
.sp
\fB\-m<msg>\fR または \fB\-F<file>\fR が指定され、 \fB\-a\fR と \fB\-s\fR と \fB\-u <keyid>\fR がない場合、 \fB\-a\fR が暗黙に指定されます。
.sp
それ以外の場合は、指定されたオブジェクトを直接指すタグ参照(つまり、軽量タグ)が作成されます。
.sp
\fB\-s\fR または \fB\-u<keyid>\fR を使用すると、GnuPG署名付きタグオブジェクトが作成されます。 \fB\-u <keyid>\fR が使用されていない場合、現在のユーザーのコミッターIDを使用して、署名用のGnuPGキーが検索されます。 構成変数 \fBgpg\&.program\fR は、カスタムGnuPGバイナリを指定するために使用されます。
.sp
(\fB\-a\fR または \fB\-s\fR または \fB\-u\fR で作成した)タグオブジェクトは「注釈付き」タグ(annotated tags)と呼ばれます。 これらには、作成日や、タグ付け者(tagger)の名前と電子メールアドレスや、タグ付けメッセージや、オプションのGnuPG署名が含まれています。 一方、「軽量」タグ(lightweight tag)は単にオブジェクト(通常はコミットオブジェクト)の名前が含まれています。
.sp
注釈付きタグはリリース用であり、軽量タグはプライベートまたは一時オブジェクトラベル用です。 このため、オブジェクトに名前を付けるための一部のgitコマンド( \fBgit describe\fR など)は、デフォルトでは軽量タグを無視します。
.SH "OPTIONS"
.PP
\fB\-a\fR, \fB\-\-annotate\fR
.RS 4
署名されていない注釈付きのタグオブジェクトを作成します
.RE
.PP
\fB\-s\fR, \fB\-\-sign\fR
.RS 4
デフォルトの電子メールアドレスのキーを使用して、GPG署名付きタグを作成します。 タグGPG署名のデフォルトの動作は、存在する場合は
\fBtag\&.gpgSign\fR
構成変数によって制御され、存在しない場合は無効になります。
\fBgit-config\fR(1)
を参照してください。
.RE
.PP
\fB\-\-no\-sign\fR
.RS 4
すべてのタグに強制的に署名するように設定されている
\fBtag\&.gpgSign\fR
構成変数をオーバーライドします。
.RE
.PP
\fB\-u <keyid>\fR, \fB\-\-local\-user=<keyid>\fR
.RS 4
指定されたキーを使用して、GPG署名付きタグを作成します。
.RE
.PP
\fB\-f\fR, \fB\-\-force\fR
.RS 4
既存のタグを、(失敗して終了するのではなく、)指定された名前に置き換えます
.RE
.PP
\fB\-d\fR, \fB\-\-delete\fR
.RS 4
指定された名前の既存のタグを削除します。
.RE
.PP
\fB\-v\fR, \fB\-\-verify\fR
.RS 4
指定されたタグ名のGPG署名を検証(verify)します。
.RE
.PP
\fB\-n<num>\fR
.RS 4
<num> は、\fB\-l\fR
を使用したときに、注釈を何行出力するか指定します。
\fB\-\-list\fR
の指定を含んでいます。
.sp
デフォルトでは、注釈行は印刷されません。
\fB\-n\fR
に番号が指定されていない場合、最初の行のみが出力されます。 タグに注釈が付けられていない場合は、代わりにコミットメッセージが表示されます。
.RE
.PP
\fB\-l\fR, \fB\-\-list\fR
.RS 4
タグを一覧表示します。オプションで
\fB<pattern>\&.\&.\&.\fR
を指定すると、例えば
\fBgit tag \-\-list \*(Aqv\-*\*(Aq\fR
のように、パターンにマッチするタグのみをリストアップします。
.sp
引数なしで
\fBgit tag\fR
を実行した時も、すべてのタグが一覧表示されます。 パターンはシェルワイルドカードです(つまり、fnmatch(3) を使用してマッチします)。 複数のパターンを指定できます。 それらのいずれかがマッチする場合、タグが表示されます。
.sp
このオプションは、
\fB\-\-contains\fR
などの他のリストっぽいオプション(list\-like option)が提供されている場合に暗黙的に提供されます。 詳細については、これらの各オプションのドキュメントを参照してください。
.RE
.PP
\fB\-\-sort=<key>\fR
.RS 4
指定されたキーに基づいて並べ替えます。 接頭辞
\fB\-\fR
を使用して、値の降順で並べ替えます。
\fB\-sort=<key>\fR
オプションは複数回使用できます。その場合、最後のキーが主キーになります。 "version:refname" または "v:refname" もサポートします(タグ名はバージョンとして扱われます)。 "version:refname" のソート順は、
\fBversionsort\&.suffix\fR
構成変数の影響も受ける可能性があります。 サポートされているキーは、\fBgit for\-each\-ref\fR
のキーと同じです。 並べ替え順序は、デフォルトで、
\fBtag\&.sort\fR
変数が存在する場合は設定された値になり、存在しない場合は辞書式順序(lexicographic order)になります。
\fBgit-config\fR(1)
を参照してください。
.RE
.PP
\fB\-\-color[=<when>]\fR
.RS 4
\fB\-\-format\fR
オプションで指定された色を尊重します。
\fB<when>\fR
フィールドは
\fBalways\fR,
\fBnever\fR,
\fBauto\fR
のいずれかでなければなりません(\fB<when>\fR
がない場合は、
\fBalways\fR
が指定されたかのように振る舞います)。
.RE
.PP
\fB\-i\fR, \fB\-\-ignore\-case\fR
.RS 4
タグの並べ替えとフィルタリングでは英大文字小文字は区別されません(case insensitive)。
.RE
.PP
\fB\-\-column[=<options>]\fR, \fB\-\-no\-column\fR
.RS 4
タグリストを列(columns)に表示します。 オプションの構文については、構成変数
\fBcolumn\&.tag\fR
を参照してください。 オプションのない
\fB\-\-column\fR
と
\fB\-\-no\-column\fR
は、それぞれ
\fBalways\fR
と
\fBnever\fR
と同等です。
.sp
このオプションは、注釈行(annotation lines)のないタグをリストする場合にのみ適用できます。
.RE
.PP
\fB\-\-contains [<commit>]\fR
.RS 4
指定されたコミットを含むタグのみをリストします(指定されていない場合はHEAD)。
\fB\-\-list\fR
の指定を含んでいます。
.RE
.PP
\fB\-\-no\-contains [<commit>]\fR
.RS 4
指定されたコミットを含まないタグのみをリストします(指定されていない場合はHEAD)。
\fB\-\-list\fR
の指定を含んでいます。
.RE
.PP
\fB\-\-merged [<commit>]\fR
.RS 4
指定されたコミットから、コミットに到達できるタグのみをリストします(指定されていない場合は
\fBHEAD\fR)。
.RE
.PP
\fB\-\-no\-merged [<commit>]\fR
.RS 4
指定されたコミットから、コミットに到達できないタグのみをリストします(指定されていない場合は
\fBHEAD\fR)。
.RE
.PP
\fB\-\-points\-at <object>\fR
.RS 4
指定されたオブジェクトのタグのみを一覧表示します(指定されていない場合はHEAD)。
\fB\-\-list\fR
の指定を含んでいます。
.RE
.PP
\fB\-m <msg>\fR, \fB\-\-message=<msg>\fR
.RS 4
(プロンプトを表示する代わりに)指定されたタグメッセージを使用します。 複数の
\fB\-m\fR
オプションが指定されている場合、それらの値は個別の段落として連結されます。
\fB\-a\fR
と
\fB\-s\fR
と
\fB\-u <keyid>\fR
のいずれも指定されていない場合は、
\fB\-a\fR
を意味します。
.RE
.PP
\fB\-F <file>\fR, \fB\-\-file=<file>\fR
.RS 4
指定されたファイルからタグメッセージを取得します。
\fB\-\fR
を使用して、標準入力からメッセージを読み取ります。
\fB\-a\fR
と
\fB\-s\fR
と
\fB\-u <keyid>\fR
のいずれも指定されていない場合は、
\fB\-a\fR
を意味します。
.RE
.PP
\fB\-e\fR, \fB\-\-edit\fR
.RS 4
\fB\-F\fR
を使用してファイルから取得したメッセージと、
\fB\-m\fR
を使用してコマンドラインを使用したメッセージは、通常は編集しないタグメッセージとして使用されます。 このオプションを使用すると、これらのソースから取得したメッセージをさらに編集できます。
.RE
.PP
\fB\-\-cleanup=<mode>\fR
.RS 4
このオプションは、タグメッセージのクリーンアップ方法を設定します。
\fB<mode>\fR
は、
\fBverbatim\fR,
\fBwhitespace\fR,
\fBstrip\fR
のいずれかになります。
\fBstrip\fR
モードがデフォルトです。
\fBverbatim\fR
モードはメッセージをまったく変更せず、\fBwhitespace\fR
は 先頭/末尾 の空白行のみを削除し、\fBstrip\fR
は空白(whitespace)とコメント(commentary)の両方を削除します。
.RE
.PP
\fB\-\-create\-reflog\fR
.RS 4
タグのreflogを作成します。 タグのreflogをグローバルに有効にするには、
\fBgit-config\fR(1)
の
\fBcore\&.logAllRefUpdates\fR
を参照してください。 否定形式
\fB\-\-no\-create\-reflog\fR
は、(コマンドラインで)それ以前に指定された
\fB\-\-create\-reflog\fR
をオーバーライドするだけですが、現在のところ、\fBcore\&.logAllRefUpdates\fR
の設定を否定しません。
.RE
.PP
\fB\-\-format=<format>\fR
.RS 4
表示されているタグrefとそれが指すオブジェクトを
\fB%(fieldname)\fR
によって差し込みする文字列。 形式は\fBgit-for-each-ref\fR(1)
の形式と同じです。 指定しない場合、デフォルトは
\fB%(refname:strip=2)\fR
です。
.RE
.PP
<tagname>
.RS 4
作成または削除または説明するタグの名前。 新しいタグ名は、\fBgit-check-ref-format\fR(1)
で定義されているすべてのチェックに合格する必要があります。 これらのチェックの一部は、タグ名で許可される文字を制限する場合があります。
.RE
.PP
<commit>, <object>
.RS 4
新しいタグが参照するオブジェクト、通常はコミット。 デフォルトはHEADです。
.RE
.SH "CONFIGURATION"
.sp
デフォルトでは、 sign\-with\-default モード(\fB\-s\fR)の \fBgit tag\fR は、コミッターID(\fBYour Name <your@email\&.address>\fR 形式)を使用してキーを検索します。 別のデフォルトキーを使用する場合は、リポジトリ構成(repository configuration)で以下のように指定できます:
.sp
.if n \{\
.RS 4
.\}
.nf
[user]
    signingKey = <gpg\-keyid>
.fi
.if n \{\
.RE
.\}
.sp
.sp
\fBpager\&.tag\fR は、タグを一覧表示する場合、つまり \fB\-l\fR が使用または暗示されている場合にのみ尊重されます。 デフォルトではpagerを使用します。 \fBgit-config\fR(1) を参照してください。
.SH "DISCUSSION"
.SS "On Re\-tagging"
.sp
間違ったコミットにタグを付けてしまいました。再度タグを付けたい場合はどうすればよいですか？
.sp
あなたがまだ何もプッシュしたことがない場合は、タグを付け直してください。 古いものを置き換えるには \fB\-f\fR を使用します。 これで完了です。
.sp
しかし、あなたが何かプッシュした場合(または他の人があなたのリポジトリを直接読み取ることができた場合)、他の人はすでに古いタグを見ているでしょう。 その場合、あなたは以下の2つのいずれかを実行できます:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
常識的には、失敗したことを認めて、別の名前を使用してください。 他の人は既にとあるタグ名を見たことがあり、同一の名前を保持している場合、2人が両方とも「バージョンX」を持っているように見える状況にあるかもしれませんが、実際には「異なる」「X」を持っています。 だから、それを「X\&.1」と呼んで、それで終わりです。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
非常識なやり方は、他の人がすでに古いバージョンを見たとしても、あなたは本当に新しいバージョンを「X」と呼びたいのです。 したがって、古いものをまだ公開していないかのように、もう一度
\fBgit tag \-f\fR
を使用します。
.RE
.sp
しかしながら、Gitは、ユーザーの背後でタグを変更することはありません(また、変更すべきではありません)。 ですから、誰かが既に古いタグを取得している場合、あなたのツリーで \fBgit pull\fR を実行しても、古いタグを上書きすることにはならないはずです。
.sp
誰かがあなたからリリースタグを取得した場合、あなた自身のタグを更新することで、その人のタグを変更することはできません。これは、人々が自分のタグ名を信頼できなければならないという点で、大きなセキュリティ上の問題です。 もしあなたが本当に非常識なことをしたいのであれば、素直に白状して、自分が失敗したことを人々に伝える必要があります。そうするには、以下のように公言すればよいでしょう:
.sp
.if n \{\
.RS 4
.\}
.nf
私はやらかしちまって、間違いのあるバージョンをXとタグ付けしてプッシュしてしまいました。
それから私は、その何かを修正し、「修正された」ツリーを再度Xとしてタグ付けしました。

あなたが既に間違ったタグを取得してしまっていて、新しいタグが必要な場合は、
古いタグを削除し、以下の手順を実行して新しいタグをフェッチしてください。お願いします:

        git tag \-d X
        git fetch origin tag X

これで更新されたタグを取得します。

あなたは以下のようにしてあなたの持っているタグをテストできます

        git rev\-parse X

これは、あなたが新しいバージョンを持っているなら、 0123456789abcdef\&.\&. と返されるはずです。

ご不便おかけしてすみませんでした。
.fi
.if n \{\
.RE
.\}
.sp
.sp
これは少し複雑に見えますか？ 然り。 自動的に「修正」するだけで正しくなる方法はありません。 人々にタグが変更された可能性があることを知らせる必要があります。
.SS "On Automatic following"
.sp
他の誰かのツリーを追っている場合は、リモート追跡ブランチ(例: \fBrefs/remotes/origin/master\fR)を使用している可能性があります。 通常、相手側からのタグが必要です。
.sp
一方、他の誰かからの一回限りの(one\-shot)マージが必要なためにフェッチしている場合は、通常、そこからタグを取得する必要はありません。 これは、トップレベルに近い人によく起こりますが、それに限定されません。 神ならぬ人々は、お互いからプルするとき、必ずしも相手からプライベートアンカーポイントタグを自動的に取得したいとは思いません。
.sp
多くの場合、メーリングリストの「プルしてください」というメッセージは、リポジトリのURLとブランチ名の2つの情報を提供するだけです。 これは、 \fBgit fetch\fR コマンドラインの最後で簡単にカットアンドペーストできるように設計されています:
.sp
.if n \{\
.RS 4
.\}
.nf
リーナス、更新を取得するために、

        git://git\&.\&.\&.\&./proj\&.git master

上記から取得してください。
.fi
.if n \{\
.RE
.\}
.sp
.sp
とあれば、以下のようになります:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git pull git://git\&.\&.\&.\&./proj\&.git master
.fi
.if n \{\
.RE
.\}
.sp
.sp
このような場合、あなたは相手のタグを自動的に追跡したくはないでしょう。
.sp
Gitの重要な側面の1つは分散型であり、これは主にシステムに固有の「上流」(upstream)または「下流」(downstream)がないことを意味します。 一見すると、上記の例は、タグの名前空間が上層部の人々によって所有されており、タグが下向きにのみ流れることを示しているように見えるかもしれませんが、そうではありません。 使用パターンによって、誰が誰のタグに関心があるかが決まることだけが示されています。
.sp
一回限りのプル(on\-shot pull)は、あるコミット履歴が、独自のタグ(例:「これは、2\&.6\&.21リリースで一般消費向けに提案されるネットワーキンググループからの3番目のリリース候補です」)を持つあるサークル(例:「カーネルのネットワーキング部分に主に関心がある人々」)と、別のサークル(例:「さまざまなサブシステムの改善を統合する人々」)の間の境界を越えていることを示すサインです。 後者は通常、前者のグループで内部的に使用される詳細なタグには関心がありません(これが「内部」の意味です)。そのため、この場合、タグを自動的に追跡しないことが望ましいです。
.sp
ネットワーキングの人々の間では、グループ内でタグを交換したいと思うかもしれませんが、その作業フローでは、リモート追跡ブランチを使用して互いの進行状況を追跡している可能性があります。 繰り返しますが、そのようなタグを自動的に追跡するヒューリスティックは良いことです。
.SS "On Backdating Tags"
.sp
別のVCSからいくつかの変更をインポートし、作業のメジャーリリースのタグを追加したい場合は、タグオブジェクト内に埋め込む日付を指定できると便利です。 タグオブジェクト内のこのようなデータは、たとえば、gitwebインターフェイスでのタグの順序に影響します。
.sp
将来のタグオブジェクトで使用される日付を設定するには、環境変数 GIT_COMMITTER_DATE を設定します(可能な値については後の説明を参照してください。最も一般的な形式は "YYYY\-MM\-DD HH:MM" です)。
.sp
For example:
.sp
.if n \{\
.RS 4
.\}
.nf
$ GIT_COMMITTER_DATE="2006\-10\-02 10:31" git tag \-s v1\&.0\&.1
.fi
.if n \{\
.RE
.\}
.sp
.SH "DATE FORMATS"
.sp
\fBGIT_AUTHOR_DATE\fR と \fBGIT_COMMITTER_DATE\fR 環境変数は、以下の日付形式をサポートします:
.PP
Git internal format
.RS 4
これは
\fB<unix\-timestamp> <time\-zone\-offset>\fR
ここで、
\fB<unix\-timestamp>\fR
UNIXエポックからの秒数です。
\fB<time\-zone\-offset>\fR
はUTCからの正または負のオフセットです。 たとえば、CET(UTCより1時間進んでいます)は
\fB+0100\fR
です。
.RE
.PP
RFC 2822
.RS 4
RFC 2822で説明されている標準の電子メール形式。たとえば、
\fBThu, 07 Apr 2005 22:13:13 +0200\fR
。
.RE
.PP
ISO 8601
.RS 4
ISO 8601規格で指定されている日時(例:
\fB2005\-04\-07T22:13:13\fR)。パーサは、
\fBT\fR
文字の代わりにスペースも受け入れます。秒の小数部分は無視されます。たとえば、
\fB2005\-04\-07T22:13:13\&.019\fR
は
\fB2005\-04\-07T22:13:13\fR
として扱われます。
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
日付部分は、上記に加えて、
\fBYYYY\&.MM\&.DD\fR
または
\fBMM/DD/YYYY\fR
または
\fBDD\&.MM\&.YYYY\fR
形式が受け入れられます。
.sp .5v
.RE
.RE
.SH "NOTES"
.sp
複数の \fB\-\-contains\fR フィルターと \fB\-\-no\-contains\fR フィルターを組み合わせる場合、少なくとも1つの \fB\-\-contains\fR コミットを含み、 \fB\-\-no\-contains\fR コミットを含まない参照のみが表示されます。
.sp
複数の \fB\-\-merged\fR フィルターと \fB\-\-no\-merged\fR フィルターを組み合わせると、少なくとも1つの \fB\-\-merged\fR コミットから到達可能で、 \fB\-\-no\-merged\fR コミットのいずれからも到達できない参照のみが表示されます。
.SH "SEE ALSO"
.sp
\fBgit-check-ref-format\fR(1)\&. \fBgit-config\fR(1)\&.
.SH "GIT"
.sp
Part of the \fBgit\fR(1) suite
