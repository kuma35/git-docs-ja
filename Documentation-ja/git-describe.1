'\" t
.\"     Title: git-describe
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: 12/10/2022
.\"    Manual: Git Manual
.\"    Source: Git 2.38.0.rc1.238.g4f4d434dc6.dirty
.\"  Language: English
.\"
.TH "GIT\-DESCRIBE" "1" "12/10/2022" "Git 2\&.38\&.0\&.rc1\&.238\&.g" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-describe \- 有効なrefに基づいて、オブジェクトに人間が読める形式の名前を付けます
.SH "SYNOPSIS"
.sp
.nf
\fIgit describe\fR [\-\-all] [\-\-tags] [\-\-contains] [\-\-abbrev=<n>] [<commit\-ish>\&...]
\fIgit describe\fR [\-\-all] [\-\-tags] [\-\-contains] [\-\-abbrev=<n>] \-\-dirty[=<mark>]
\fIgit describe\fR <blob>
.fi
.sp
.SH "DESCRIPTION"
.sp
このコマンドは、コミットから到達可能な最新のタグを検索します。 タグがコミットを指している場合は、タグのみが表示されます。 それ以外の場合は、タグ名に、タグ付けされたオブジェクトの上に追加されたコミットの数と、最新のコミットの省略されたオブジェクト名の接尾辞が付きます。 結果は「人間が読める」オブジェクト名であり、他のgitコマンドへのコミットを識別するためにも使用できます。
.sp
デフォルト(\fB\-\-all\fR または \fB\-\-tags\fR なし)では、 \fBgit describe\fR は注釈付きタグのみを表示します。 注釈付きタグの作成の詳細については、 \fBgit-tag\fR(1) の \fB\-a\fR および \fB\-s\fR オプションを参照してください。
.sp
与えられたオブジェクトがブロブを参照している場合、それは \fB<commit\-ish>:<path>\fR として表されます。これは、そブロブが \fB<commit\-ish>\fR の \fB<path>\fR にあり、それ自体が、このブロブがHEADからの逆リビジョンウォークで発生する最初のコミットを表しているためです。
.SH "OPTIONS"
.PP
<commit\-ish>\&...
.RS 4
説明するコミットっぽいオブジェクト名。 省略した場合、デフォルトでHEADになります。
.RE
.PP
\fB\-\-dirty[=<mark>]\fR, \fB\-\-broken[=<mark>]\fR
.RS 4
作業ツリーの状態を説明します。 作業ツリーがHEADと一致する場合、出力は
\fBgit describe HEAD\fR
と同じになります。 作業ツリーにローカル変更がある場合、接尾辞
\fB\-dirty\fR
が追加されます。 リポジトリが破損していて、Gitがローカルでの変更があるかどうかを判断できない場合(代わりに接尾辞
\fB\-broken\fR
を追加する
\fB\-\-broken\fR
が指定されていない限り)、Gitはエラーになります。
.RE
.PP
\fB\-\-all\fR
.RS 4
注釈付きタグのみを使用する代わりに、
\fBrefs/\fR
名前空間にあるrefを使用してください。 このオプションを使用すると、既知のブランチ または リモート追跡ブランチ または 軽量タグ を照合できます。
.RE
.PP
\fB\-\-tags\fR
.RS 4
注釈付きタグのみを使用する代わりに、
\fBrefs/tags\fR
名前空間にあるタグを使用してください。 このオプションを使用すると、軽量(注釈なし)タグのマッチングが可能になります。
.RE
.PP
\fB\-\-contains\fR
.RS 4
そのコミットより前のタグを見つける代わりに、そのコミットの後に来るタグを見つけて、それを含めます。 自動的に
\fB\-\-tags\fR
の指定を含んでいます。
.RE
.PP
\fB\-\-abbrev=<n>\fR
.RS 4
省略されたオブジェクト名のデフォルトの16進数(これは、リポジトリ内のオブジェクトの数によって異なりますが、デフォルトは7桁です)を使用する代わりに、<n>桁、または一意のオブジェクト名を形成するために必要な数の桁を使用します。<n>が0の場合、長い形式は抑制され、最も近いタグのみが表示されます。
.RE
.PP
\fB\-\-candidates=<n>\fR
.RS 4
入力のコミットっぽいのを説明するための候補として最新の10個のタグのみを考慮するのではなく、最大<n>個の候補を考慮してください。 <n>を10より大きくすると、少し時間がかかりますが、より正確な結果が得られる場合があります。 <n>が0の場合、完全一致のみが出力されます。
.RE
.PP
\fB\-\-exact\-match\fR
.RS 4
完全一致のみを出力します(タグは指定されたコミットを直接参照します)。 これは
\fB\-\-candidates=0\fR
の同義語です。
.RE
.PP
\fB\-\-debug\fR
.RS 4
標準エラーに、検索戦略に関する情報を詳細に表示します。タグ名は引き続き標準出力で印刷されます。
.RE
.PP
\fB\-\-long\fR
.RS 4
タグと一致する場合でも、常に長い形式(タグとコミット数と省略されたコミット名)を出力します。 これは、問題のコミットがタグ付きバージョンである場合でも、
\fBdescribe\fR
出力にコミットオブジェクト名の一部を表示する場合に役立ちます。 タグ名を発行するだけでなく、v1\&.2\-0\-gdeadbeeなどのコミットを記述します(オブジェクトdeadbeeを指すタグv1\&.2以降の0番目のコミット\&...)。
.RE
.PP
\fB\-\-match <pattern>\fR
.RS 4
\fBrefs/tags/\fR
プレフィックスを除いて、指定された glob(7) パターンに一致するタグのみを考慮してください。
\fB\-\-all\fR
と一緒に使用すると、パターンに一致するローカルブランチとリモート追跡参照も考慮されます。ただし、それぞれ
\fBrefs/heads/\fR
と
\fBrefs/remotes/\fR
プレフィックスは除外されます。 他のタイプの参照は考慮されません。 複数回指定すると、パターンのリストが蓄積され、いずれかのパターンに一致するタグが考慮されます。 パターンのリストをクリアしてリセットするには、
\fB\-\-no\-match\fR
を使用します。
.RE
.PP
\fB\-\-exclude <pattern>\fR
.RS 4
\fBrefs/tags/\fR
プレフィックスを除いて、指定された glob(7) パターンに一致するタグを考慮しないでください。
\fB\-\-all\fR
と一緒に使用すると、それぞれ
\fBrefs/heads/\fR
と
\fBrefs/remotes/\fR
プレフィックスを除いて、パターンに一致するローカルブランチとリモート追跡参照も考慮されません。 他のタイプの参照は考慮されません。 複数回指定すると、パターンのリストが蓄積され、いずれかのパターンに一致するタグが除外されます。
\fB\-\-match\fR
と組み合わせると、タグが少なくとも1つの
\fB\-\-match\fR
パターンに一致し、
\fB\-exclude\fR
パターンのいずれにも一致しない場合にタグが考慮されます。 パターンのリストをクリアしてリセットするには、
\fB\-\-no\-exclude\fR
を使用します。
.RE
.PP
\fB\-\-always\fR
.RS 4
ユニークさを保ちつつ省略されたコミットオブジェクトをフォールバックとして表示します。
.RE
.PP
\fB\-\-first\-parent\fR
.RS 4
マージコミットを確認したら、最初の親コミットのみを追跡します。 これは、ターゲットコミットの履歴でマージされたブランチのタグを一致させたくない場合に役立ちます。
.RE
.SH "EXAMPLES"
.sp
git\&.gitのツリーのようなナニカなら、以下のようなものを得るでしょう:
.sp
.if n \{\
.RS 4
.\}
.nf
[torvalds@g5 git]$ git describe parent
v1\&.0\&.4\-14\-g2414721
.fi
.if n \{\
.RE
.\}
.sp
つまり、私の「親」ブランチの現在のヘッドはv1\&.0\&.4に基づいていますが、その上にいくつかのコミットがあるため、describeは、追加のコミットの数(\fB14\fR)と、コミット自体の省略されたオブジェクト名(\fB2414721\fR)を最後に追加しました。
.sp
追加のコミットの数は、 \fBgit log v1\&.0\&.4\&.\&.parent\fR によって表示されるコミットの数です。 ハッシュ接尾辞は \fB\-g\fR 親の先端コミットの明確な略語です(これは \fB2414721b194453f058079d897d13c4e377f92dc6\fR でした)。 省略形の長さは、リポジトリ内のオブジェクトのおおよその数と、誕生日のパラドックスに関する少しの計算を使用して、リポジトリが大きくなるにつれてスケーリングされ、デフォルトでは最小7になります。 \fBg\fR プレフィックスは \fBgit\fR を表し、ソフトウェアが管理されているSCMに応じてソフトウェアのバージョンを記述できるようにするために使用されます。 これは、人々がさまざまなSCMを使用する可能性がある環境で役立ちます。
.sp
タグ名に対して \fBgit describe\fR を実行すると、タグ名が表示されるだけです:
.sp
.if n \{\
.RS 4
.\}
.nf
[torvalds@g5 git]$ git describe v1\&.0\&.4
v1\&.0\&.4
.fi
.if n \{\
.RE
.\}
.sp
\fB\-\-all\fR を使用すると、コマンドはブランチヘッドを参照として使用できるため、出力には参照パスも表示されます:
.sp
.if n \{\
.RS 4
.\}
.nf
[torvalds@g5 git]$ git describe \-\-all \-\-abbrev=4 v1\&.0\&.5^2
tags/v1\&.0\&.0\-21\-g975b
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
[torvalds@g5 git]$ git describe \-\-all \-\-abbrev=4 HEAD^
heads/lt/describe\-7\-g975b
.fi
.if n \{\
.RE
.\}
.sp
`\-\-abbrev`を0に設定すると、このコマンドを使用して、接尾辞(suffix)なしで最も近いタグ名を見つけることができます:
.sp
.if n \{\
.RS 4
.\}
.nf
[torvalds@g5 git]$ git describe \-\-abbrev=0 v1\&.0\&.5^2
tags/v1\&.0\&.0
.fi
.if n \{\
.RE
.\}
.sp
注意: 今、これらのコマンドを入力した場合に取得するサフィックスは、かつてLinusがこれらのコマンドを実行したときに上記で見たものよりも長くなる可能性があることに注意してください。Gitリポジトリには、オブジェクト名が975bで始まり、当時は存在しなかった新しいコミットが含まれている可能性があります。 \fB\-g975b\fR サフィックスだけでは、これらのコミットを明確にするのに十分でない場合があります。
.SH "SEARCH STRATEGY"
.sp
提供されたコミットっぽいのごとに、 \fBgit describe\fR は最初にそのコミットを正確にタグ付けするタグを探します。 注釈付きタグは常に軽量タグよりも優先され、新しい日付のタグは常に古い日付のタグよりも優先されます。 完全に一致するものが見つかると、その名前が出力され、検索が停止します。
.sp
完全に一致するものが見つからなかった場合、 \fBgit describe\fR はコミット履歴をさかのぼって、タグ付けされた祖先コミットを見つけます。 祖先のタグは、入力したコミットっぽい何かのSHA\-1の省略形とともに出力されます。 \fB\-\-first\-parent\fR が指定された場合、ウォークは各コミットの最初の親のみを考慮します。
.sp
ウォーク中に複数のタグが見つかった場合は、入力コミットっぽい何かとは異なるコミットが最も少ないタグが選択されて出力されます。 ここで異なるコミットの数は、 \fBgit log tag\&.\&.input\fR で示されるコミットの数として定義され、可能な限り最小のコミット数になります。
.SH "BUGS"
.sp
ツリーオブジェクト、およびコミットを指していないタグオブジェクトは表わせません。 ブロブを表す場合、ブロブを指す軽量タグは無視されますが、軽量タグが有利であるにもかかわらず、ブロブは依然として <committ\-ish>:<path> として表されます。
.SH "GIT"
.sp
Part of the \fBgit\fR(1) suite
