\input texinfo
@setfilename gitman.info
@documentencoding UTF-8
@dircategory Development
@direntry
* Git Man Pages: (gitman).  Manual pages for Git revision control system
@end direntry
@node Top,,, (dir)
@top Git Manual Pages
@documentlanguage en
@menu
* git-add::
* git-am::
* git-annotate::
* git-apply::
* git-archimport::
* git-archive::
* git-bisect::
* git-blame::
* git-branch::
* git-bugreport::
* git-bundle::
* git-cat-file::
* git-check-attr::
* git-check-ignore::
* git-check-mailmap::
* git-check-ref-format::
* git-checkout-index::
* git-checkout::
* git-cherry-pick::
* git-cherry::
* git-citool::
* git-clean::
* git-clone::
* git-column::
* git-commit-graph::
* git-commit-tree::
* git-commit::
* git-config::
* git-count-objects::
* git-credential-cache--daemon::
* git-credential-cache::
* git-credential-store::
* git-credential::
* git-cvsexportcommit::
* git-cvsimport::
* git-cvsserver::
* git-daemon::
* git-describe::
* git-diff-files::
* git-diff-index::
* git-diff-tree::
* git-diff::
* git-difftool::
* git-fast-export::
* git-fast-import::
* git-fetch-pack::
* git-fetch::
* git-filter-branch::
* git-fmt-merge-msg::
* git-for-each-ref::
* git-for-each-repo::
* git-format-patch::
* git-fsck-objects::
* git-fsck::
* git-gc::
* git-get-tar-commit-id::
* git-grep::
* git-gui::
* git-hash-object::
* git-help::
* git-http-backend::
* git-http-fetch::
* git-http-push::
* git-imap-send::
* git-index-pack::
* git-init-db::
* git-init::
* git-instaweb::
* git-interpret-trailers::
* git-log::
* git-ls-files::
* git-ls-remote::
* git-ls-tree::
* git-mailinfo::
* git-mailsplit::
* git-maintenance::
* git-merge-base::
* git-merge-file::
* git-merge-index::
* git-merge-one-file::
* git-merge-tree::
* git-merge::
* git-mergetool--lib::
* git-mergetool::
* git-mktag::
* git-mktree::
* git-multi-pack-index::
* git-mv::
* git-name-rev::
* git-notes::
* git-p4::
* git-pack-objects::
* git-pack-redundant::
* git-pack-refs::
* git-patch-id::
* git-prune-packed::
* git-prune::
* git-pull::
* git-push::
* git-quiltimport::
* git-range-diff::
* git-read-tree::
* git-rebase::
* git-receive-pack::
* git-reflog::
* git-remote-ext::
* git-remote-fd::
* git-remote::
* git-repack::
* git-replace::
* git-request-pull::
* git-rerere::
* git-reset::
* git-restore::
* git-rev-list::
* git-rev-parse::
* git-revert::
* git-rm::
* git-send-email::
* git-send-pack::
* git-sh-i18n--envsubst::
* git-sh-i18n::
* git-sh-setup::
* git-shell::
* git-shortlog::
* git-show-branch::
* git-show-index::
* git-show-ref::
* git-show::
* git-sparse-checkout::
* git-stage::
* git-stash::
* git-status::
* git-stripspace::
* git-submodule::
* git-svn::
* git-switch::
* git-symbolic-ref::
* git-tag::
* git-unpack-file::
* git-unpack-objects::
* git-update-index::
* git-update-ref::
* git-update-server-info::
* git-upload-archive::
* git-upload-pack::
* git-var::
* git-verify-commit::
* git-verify-pack::
* git-verify-tag::
* git-version::
* git-web--browse::
* git-whatchanged::
* git-worktree::
* git-write-tree::
* git::
* gitattributes::
* gitcli::
* gitcore-tutorial::
* gitcredentials::
* gitcvs-migration::
* gitdiffcore::
* giteveryday::
* gitfaq::
* gitglossary::
* githooks::
* gitignore::
* gitk::
* gitmailmap::
* gitmodules::
* gitnamespaces::
* gitremote-helpers::
* gitrepository-layout::
* gitrevisions::
* gitsubmodules::
* gittutorial-2::
* gittutorial::
* gitweb.conf::
* gitweb::
* gitworkflows::
@end menu
@node git-add,,,Top
@chapheading Name

git-add — Add file contents to the index

@noindent

@chapheading Synopsis

@display
git add [--verbose | -v] [--dry-run | -n] [--force | -f] [--interactive | -i] [--patch | -p]
          [--edit | -e] [--[no-]all | --[no-]ignore-removal | [--update | -u]]
          [--intent-to-add | -N] [--refresh] [--ignore-errors] [--ignore-missing] [--renormalize]
          [--chmod=(+|-)x] [--pathspec-from-file=<file> [--pathspec-file-nul]]
          [--] [<pathspec>…]
@end display


@noindent

@chapheading DESCRIPTION

This command updates the index using the current content found in the
working tree, to prepare the content staged for the next commit.  It
typically adds the current content of existing paths as a whole, but with
some options it can also be used to add content with only part of the
changes made to the working tree files applied, or remove paths that do not
exist in the working tree anymore.

The "index" holds a snapshot of the content of the working tree, and it is
this snapshot that is taken as the contents of the next commit.  Thus after
making any changes to the working tree, and before running the commit
command, you must use the @samp{add} command to add any new or modified files to
the index.

This command can be performed multiple times before a commit.  It only adds
the content of the specified file(s) at the time the add command is run; if
you want subsequent changes included in the next commit, then you must run
@samp{git add} again to add the new content to the index.

The @samp{git status} command can be used to obtain a summary of which files have
changes that are staged for the next commit.

The @samp{git add} command will not add ignored files by default.  If any ignored
files were explicitly specified on the command line, @samp{git add} will fail
with a list of ignored files.  Ignored files reached by directory recursion
or filename globbing performed by Git (quote your globs before the shell)
will be silently ignored.  The @emph{git add} command can be used to add ignored
files with the @samp{-f} (force) option.

Please see git-commit(1) for alternative ways to add content to a
commit.

@noindent

@chapheading OPTIONS

@table @asis

@item  <pathspec>… 
Files to add content from.  Fileglobs (e.g. @samp{*.c}) can be given to add all
matching files.  Also a leading directory name (e.g. @samp{dir} to add
@samp{dir/file1} and @samp{dir/file2}) can be given to update the index to match the
current state of the directory as a whole (e.g.  specifying @samp{dir} will
record not just a file @samp{dir/file1} modified in the working tree, a file
@samp{dir/file2} added to the working tree, but also a file @samp{dir/file3} removed
from the working tree). Note that older versions of Git used to ignore
removed files; use @samp{--no-all} option if you want to add modified or new
files but ignore removed ones.

For more details about the <pathspec> syntax, see the @emph{pathspec} entry in
gitglossary(7).

@item  @samp{-n} 
@itemx  @samp{--dry-run} 
Don’t actually add the file(s), just show if they exist and/or will be
ignored.

@item  @samp{-v} 
@itemx  @samp{--verbose} 
Be verbose.

@item  @samp{-f} 
@itemx  @samp{--force} 
Allow adding otherwise ignored files.

@item  @samp{-i} 
@itemx  @samp{--interactive} 
Add modified contents in the working tree interactively to the
index. Optional path arguments may be supplied to limit operation to a
subset of the working tree. See “Interactive mode” for details.

@item  @samp{-p} 
@itemx  @samp{--patch} 
Interactively choose hunks of patch between the index and the work tree and
add them to the index. This gives the user a chance to review the difference
before adding modified contents to the index.

This effectively runs @samp{add --interactive}, but bypasses the initial command
menu and directly jumps to the @samp{patch} subcommand.  See “Interactive mode”
for details.

@item  @samp{-e} 
@itemx  @samp{--edit} 
Open the diff vs. the index in an editor and let the user edit it.  After
the editor was closed, adjust the hunk headers and apply the patch to the
index.

The intent of this option is to pick and choose lines of the patch to apply,
or even to modify the contents of lines to be staged. This can be quicker
and more flexible than using the interactive hunk selector.  However, it is
easy to confuse oneself and create a patch that does not apply to the
index. See EDITING PATCHES below.

@item  @samp{-u} 
@itemx  @samp{--update} 
Update the index just where it already has an entry matching <pathspec>.
This removes as well as modifies index entries to match the working tree,
but adds no new files.

If no <pathspec> is given when @samp{-u} option is used, all tracked files in the
entire working tree are updated (old versions of Git used to limit the
update to the current directory and its subdirectories).

@item  @samp{-A} 
@itemx  @samp{--all} 
@itemx  @samp{--no-ignore-removal} 
Update the index not only where the working tree has a file matching
<pathspec> but also where the index already has an entry. This adds,
modifies, and removes index entries to match the working tree.

If no <pathspec> is given when @samp{-A} option is used, all files in the entire
working tree are updated (old versions of Git used to limit the update to
the current directory and its subdirectories).

@item  @samp{--no-all} 
@itemx  @samp{--ignore-removal} 
Update the index by adding new files that are unknown to the index and files
modified in the working tree, but ignore files that have been removed from
the working tree.  This option is a no-op when no <pathspec> is used.

This option is primarily to help users who are used to older versions of
Git, whose "git add <pathspec>…" was a synonym for "git add --no-all
<pathspec>…", i.e. ignored removed files.

@item  @samp{-N} 
@itemx  @samp{--intent-to-add} 
Record only the fact that the path will be added later. An entry for the
path is placed in the index with no content. This is useful for, among other
things, showing the unstaged content of such files with @samp{git diff} and
committing them with @samp{git commit -a}.

@item  @samp{--refresh} 
Don’t add the file(s), but only refresh their stat()  information in the
index.

@item  @samp{--ignore-errors} 
If some files could not be added because of errors indexing them, do not
abort the operation, but continue adding the others. The command shall still
exit with non-zero status.  The configuration variable @samp{add.ignoreErrors}
can be set to true to make this the default behaviour.

@item  @samp{--ignore-missing} 
This option can only be used together with --dry-run. By using this option
the user can check if any of the given files would be ignored, no matter if
they are already present in the work tree or not.

@item  @samp{--no-warn-embedded-repo} 
By default, @samp{git add} will warn when adding an embedded repository to the
index without using @samp{git submodule add} to create an entry in
@samp{.gitmodules}. This option will suppress the warning (e.g., if you are
manually performing operations on submodules).

@item  @samp{--renormalize} 
Apply the "clean" process freshly to all tracked files to forcibly add them
again to the index.  This is useful after changing @samp{core.autocrlf}
configuration or the @samp{text} attribute in order to correct files added with
wrong CRLF/LF line endings.  This option implies @samp{-u}.

@item  @samp{--chmod=(+|-)x} 
Override the executable bit of the added files.  The executable bit is only
changed in the index, the files on disk are left unchanged.

@item  @samp{--pathspec-from-file=<file>} 
Pathspec is passed in @samp{<file>} instead of commandline args. If @samp{<file>} is
exactly @samp{-} then standard input is used. Pathspec elements are separated by
LF or CR/LF. Pathspec elements can be quoted as explained for the
configuration variable @samp{core.quotePath} (see git-config(1)). See
also @samp{--pathspec-file-nul} and global @samp{--literal-pathspecs}.

@item  @samp{--pathspec-file-nul} 
Only meaningful with @samp{--pathspec-from-file}. Pathspec elements are separated
with NUL character and all other characters are taken literally (including
newlines and quotes).

@item  -- 
This option can be used to separate command-line options from the list of
files, (useful when filenames might be mistaken for command-line options).
@end table

@noindent

@chapheading EXAMPLES

@itemize 

@item
Adds content from all @samp{*.txt} files under @samp{Documentation} directory and its
subdirectories:

@example
$ git add Documentation/\*.txt
@end example


Note that the asterisk @samp{*} is quoted from the shell in this example; this
lets the command include the files from subdirectories of @samp{Documentation/}
directory.

@item
Considers adding content from all git-*.sh scripts:

@example
$ git add git-*.sh
@end example


Because this example lets the shell expand the asterisk (i.e. you are
listing the files explicitly), it does not consider @samp{subdir/git-foo.sh}.
@end itemize

@noindent

@chapheading INTERACTIVE MODE

When the command enters the interactive mode, it shows the output of the
@emph{status} subcommand, and then goes into its interactive command loop.

The command loop shows the list of subcommands available, and gives a prompt
"What now> ".  In general, when the prompt ends with a single @emph{>}, you can
pick only one of the choices given and type return, like this:

@example
    *** Commands ***
      1: status       2: update       3: revert       4: add untracked
      5: patch        6: diff         7: quit         8: help
    What now> 1
@end example


You also could say @samp{s} or @samp{sta} or @samp{status} above as long as the choice is
unique.

The main command loop has 6 subcommands (plus help and quit).

@table @asis

@item  status 
This shows the change between HEAD and index (i.e. what will be committed if
you say @samp{git commit}), and between index and working tree files (i.e. what
you could stage further before @samp{git commit} using @samp{git add}) for each path.
A sample output looks like this:

@example
              staged     unstaged path
     1:       binary      nothing foo.png
     2:     +403/-35        +1/-1 git-add--interactive.perl
@end example


It shows that foo.png has differences from HEAD (but that is binary so line
count cannot be shown) and there is no difference between indexed copy and
the working tree version (if the working tree version were also different,
@emph{binary} would have been shown in place of @emph{nothing}).  The other file,
git-add--interactive.perl, has 403 lines added and 35 lines deleted if
you commit what is in the index, but working tree file has further
modifications (one addition and one deletion).

@item  update 
This shows the status information and issues an "Update>>" prompt.  When the
prompt ends with double @emph{>>}, you can make more than one selection,
concatenated with whitespace or comma.  Also you can say ranges.  E.g. "2-5
7,9" to choose 2,3,4,5,7,9 from the list.  If the second number in a range
is omitted, all remaining patches are taken.  E.g. "7-" to choose 7,8,9 from
the list.  You can say @emph{*} to choose everything.

What you chose are then highlighted with @emph{*}, like this:

@example
           staged     unstaged path
  1:       binary      nothing foo.png
* 2:     +403/-35        +1/-1 git-add--interactive.perl
@end example


To remove selection, prefix the input with @samp{-} like this:

@example
Update>> -2
@end example


After making the selection, answer with an empty line to stage the contents
of working tree files for selected paths in the index.

@item  revert 
This has a very similar UI to @emph{update}, and the staged information for
selected paths are reverted to that of the HEAD version.  Reverting new
paths makes them untracked.

@item  add untracked 
This has a very similar UI to @emph{update} and @emph{revert}, and lets you add
untracked paths to the index.

@item  patch 
This lets you choose one path out of a @emph{status} like selection.  After
choosing the path, it presents the diff between the index and the working
tree file and asks you if you want to stage the change of each hunk.  You
can select one of the following options and type return:

@example
y - stage this hunk
n - do not stage this hunk
q - quit; do not stage this hunk or any of the remaining ones
a - stage this hunk and all later hunks in the file
d - do not stage this hunk or any of the later hunks in the file
g - select a hunk to go to
/ - search for a hunk matching the given regex
j - leave this hunk undecided, see next undecided hunk
J - leave this hunk undecided, see next hunk
k - leave this hunk undecided, see previous undecided hunk
K - leave this hunk undecided, see previous hunk
s - split the current hunk into smaller hunks
e - manually edit the current hunk
? - print help
@end example

After deciding the fate for all hunks, if there is any hunk that was chosen,
the index is updated with the selected hunks.

You can omit having to type return here, by setting the configuration
variable @samp{interactive.singleKey} to @samp{true}.

@item  diff 
This lets you review what will be committed (i.e. between HEAD and index).
@end table

@noindent

@chapheading EDITING PATCHES

Invoking @samp{git add -e} or selecting @samp{e} from the interactive hunk selector
will open a patch in your editor; after the editor exits, the result is
applied to the index. You are free to make arbitrary changes to the patch,
but note that some changes may have confusing results, or even result in a
patch that cannot be applied.  If you want to abort the operation entirely
(i.e., stage nothing new in the index), simply delete all lines of the
patch. The list below describes some common things you may see in a patch,
and which editing operations make sense on them.

@table @asis

@item  added content 
Added content is represented by lines beginning with "+". You can
prevent staging any addition lines by deleting them.

@item  removed content 
Removed content is represented by lines beginning with "-". You can prevent
staging their removal by converting the "-" to a " " (space).

@item  modified content 
Modified content is represented by "-" lines (removing the old content)
followed by "+" lines (adding the replacement content). You can prevent
staging the modification by converting "-" lines to " ", and removing
"+" lines. Beware that modifying only half of the pair is likely to
introduce confusing changes to the index.
@end table

There are also more complex operations that can be performed. But beware
that because the patch is applied only to the index and not the working
tree, the working tree will appear to "undo" the change in the index.  For
example, introducing a new line into the index that is in neither the HEAD
nor the working tree will stage the new line for commit, but the line will
appear to be reverted in the working tree.

Avoid using these constructs, or do so with extreme caution.

@table @asis

@item  removing untouched content 
Content which does not differ between the index and working tree may be
shown on context lines, beginning with a " " (space).  You can stage context
lines for removal by converting the space to a "-". The resulting working
tree file will appear to re-add the content.

@item  modifying existing content 
One can also modify context lines by staging them for removal (by converting
" " to "-") and adding a "+" line with the new content.  Similarly, one
can modify "+" lines for existing additions or modifications. In all
cases, the new modification will appear reverted in the working tree.

@item  new content 
You may also add new content that does not exist in the patch; simply add
new lines, each starting with "+". The addition will appear reverted in
the working tree.
@end table

There are also several operations which should be avoided entirely, as they
will make the patch impossible to apply:

@itemize 

@item
adding context (" ") or removal ("-") lines

@item
deleting context or removal lines

@item
modifying the contents of context or removal lines
@end itemize

@noindent

@chapheading SEE ALSO

git-status(1) git-rm(1) git-reset(1)
git-mv(1) git-commit(1) git-update-index(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-am,,,Top
@chapheading Name

git-am — Apply a series of patches from a mailbox

@noindent

@chapheading Synopsis

@display
git am [--signoff] [--keep] [--[no-]keep-cr] [--[no-]utf8]
         [--[no-]3way] [--interactive] [--committer-date-is-author-date]
         [--ignore-date] [--ignore-space-change | --ignore-whitespace]
         [--whitespace=<option>] [-C<n>] [-p<n>] [--directory=<dir>]
         [--exclude=<path>] [--include=<path>] [--reject] [-q | --quiet]
         [--[no-]scissors] [-S[<keyid>]] [--patch-format=<format>]
         [--quoted-cr=<action>]
         [(<mbox> | <Maildir>)…]
git am (--continue | --skip | --abort | --quit | --show-current-patch[=(diff|raw)])
@end display


@noindent

@chapheading DESCRIPTION

Splits mail messages in a mailbox into commit log message, authorship
information and patches, and applies them to the current branch.

@noindent

@chapheading OPTIONS

@table @asis

@item  (<mbox>|<Maildir>)… 
The list of mailbox files to read patches from. If you do not supply this
argument, the command reads from the standard input.  If you supply
directories, they will be treated as Maildirs.

@item  @samp{-s} 
@itemx  @samp{--signoff} 
Add a @samp{Signed-off-by} trailer to the commit message, using the committer
identity of yourself.  See the signoff option in git-commit(1) for
more information.

@item  @samp{-k} 
@itemx  @samp{--keep} 
Pass @samp{-k} flag to @emph{git mailinfo} (see git-mailinfo(1)).

@item  @samp{--keep-non-patch} 
Pass @samp{-b} flag to @emph{git mailinfo} (see git-mailinfo(1)).

@item  @samp{--[no-]keep-cr} 
With @samp{--keep-cr}, call @emph{git mailsplit} (see git-mailsplit(1))  with
the same option, to prevent it from stripping CR at the end of
lines. @samp{am.keepcr} configuration variable can be used to specify the default
behaviour.  @samp{--no-keep-cr} is useful to override @samp{am.keepcr}.

@item  @samp{-c} 
@itemx  @samp{--scissors} 
Remove everything in body before a scissors line (see
git-mailinfo(1)). Can be activated by default using the
@samp{mailinfo.scissors} configuration variable.

@item  @samp{--no-scissors} 
Ignore scissors lines (see git-mailinfo(1)).

@item  @samp{--quoted-cr=<action>} 
This flag will be passed down to @emph{git mailinfo} (see
git-mailinfo(1)).

@item  @samp{-m} 
@itemx  @samp{--message-id} 
Pass the @samp{-m} flag to @emph{git mailinfo} (see git-mailinfo(1)), so that
the Message-ID header is added to the commit message.  The @samp{am.messageid}
configuration variable can be used to specify the default behaviour.

@item  @samp{--no-message-id} 
Do not add the Message-ID header to the commit message.  @samp{no-message-id} is
useful to override @samp{am.messageid}.

@item  @samp{-q} 
@itemx  @samp{--quiet} 
Be quiet. Only print error messages.

@item  @samp{-u} 
@itemx  @samp{--utf8} 
Pass @samp{-u} flag to @emph{git mailinfo} (see git-mailinfo(1)).  The
proposed commit log message taken from the e-mail is re-coded into UTF-8
encoding (configuration variable @samp{i18n.commitEncoding} can be used to
specify project’s preferred encoding if it is not UTF-8).

This was optional in prior versions of git, but now it is the
default.   You can use @samp{--no-utf8} to override this.

@item  @samp{--no-utf8} 
Pass @samp{-n} flag to @emph{git mailinfo} (see git-mailinfo(1)).

@item  @samp{-3} 
@itemx  @samp{--3way} 
@itemx  @samp{--no-3way} 
When the patch does not apply cleanly, fall back on 3-way merge if the patch
records the identity of blobs it is supposed to apply to and we have those
blobs available locally. @samp{--no-3way} can be used to override am.threeWay
configuration variable. For more information, see am.threeWay in
git-config(1).

@item  @samp{--rerere-autoupdate} 
@itemx  @samp{--no-rerere-autoupdate} 
Allow the rerere mechanism to update the index with the result of
auto-conflict resolution if possible.

@item  @samp{--ignore-space-change} 
@itemx  @samp{--ignore-whitespace} 
@itemx  @samp{--whitespace=<option>} 
@itemx  @samp{-C<n>} 
@itemx  @samp{-p<n>} 
@itemx  @samp{--directory=<dir>} 
@itemx  @samp{--exclude=<path>} 
@itemx  @samp{--include=<path>} 
@itemx  @samp{--reject} 
These flags are passed to the @emph{git apply} (see git-apply(1))
program that applies the patch.

@item  @samp{--patch-format} 
By default the command will try to detect the patch format
automatically. This option allows the user to bypass the automatic detection
and specify the patch format that the patch(es) should be interpreted
as. Valid formats are mbox, mboxrd, stgit, stgit-series and hg.

@item  @samp{-i} 
@itemx  @samp{--interactive} 
Run interactively.

@item  @samp{--committer-date-is-author-date} 
By default the command records the date from the e-mail message as the
commit author date, and uses the time of commit creation as the committer
date. This allows the user to lie about the committer date by using the same
value as the author date.

@item  @samp{--ignore-date} 
By default the command records the date from the e-mail message as the
commit author date, and uses the time of commit creation as the committer
date. This allows the user to lie about the author date by using the same
value as the committer date.

@item  @samp{--skip} 
Skip the current patch.  This is only meaningful when restarting an aborted
patch.

@item  @samp{-S[<keyid>]} 
@itemx  @samp{--gpg-sign[=<keyid>]} 
@itemx  @samp{--no-gpg-sign} 
GPG-sign commits. The @samp{keyid} argument is optional and defaults to the
committer identity; if specified, it must be stuck to the option without a
space. @samp{--no-gpg-sign} is useful to countermand both @samp{commit.gpgSign}
configuration variable, and earlier @samp{--gpg-sign}.

@item  @samp{--continue} 
@itemx  @samp{-r} 
@itemx  @samp{--resolved} 
After a patch failure (e.g. attempting to apply conflicting patch), the user
has applied it by hand and the index file stores the result of the
application.  Make a commit using the authorship and commit log extracted
from the e-mail message and the current index file, and continue.

@item  @samp{--resolvemsg=<msg>} 
When a patch failure occurs, <msg> will be printed to the screen before
exiting.  This overrides the standard message informing you to use
@samp{--continue} or @samp{--skip} to handle the failure.  This is solely for internal
use between @emph{git rebase} and @emph{git am}.

@item  @samp{--abort} 
Restore the original branch and abort the patching operation.  Revert
contents of files involved in the am operation to their pre-am state.

@item  @samp{--quit} 
Abort the patching operation but keep HEAD and the index untouched.

@item  @samp{--show-current-patch[=(diff|raw)]} 
Show the message at which @samp{git am} has stopped due to conflicts.  If @samp{raw}
is specified, show the raw contents of the e-mail message; if @samp{diff}, show
the diff portion only.  Defaults to @samp{raw}.
@end table

@noindent

@chapheading DISCUSSION

The commit author name is taken from the "From: " line of the message, and
commit author date is taken from the "Date: " line of the message.  The
"Subject: " line is used as the title of the commit, after stripping common
prefix "[PATCH <anything>]".  The "Subject: " line is supposed to concisely
describe what the commit is about in one line of text.

"From: ", "Date: ", and "Subject: " lines starting the body override the
respective commit author name and title values taken from the headers.

The commit message is formed by the title taken from the "Subject: ", a
blank line and the body of the message up to where the patch begins.  Excess
whitespace at the end of each line is automatically stripped.

The patch is expected to be inline, directly following the message.  Any
line that is of the form:

@itemize 

@item
three-dashes and end-of-line, or

@item
a line that begins with "diff -", or

@item
a line that begins with "Index: "
@end itemize

is taken as the beginning of a patch, and the commit log message is
terminated before the first occurrence of such a line.

When initially invoking @samp{git am}, you give it the names of the mailboxes to
process.  Upon seeing the first patch that does not apply, it aborts in the
middle.  You can recover from this in one of two ways:

@enumerate 

@item
skip the current patch by re-running the command with the @samp{--skip} option.

@item
hand resolve the conflict in the working directory, and update the index
file to bring it into a state that the patch should have produced.  Then run
the command with the @samp{--continue} option.
@end enumerate

The command refuses to process new mailboxes until the current operation is
finished, so if you decide to start over from scratch, run @samp{git am --abort}
before running the command with mailbox names.

Before any patches are applied, ORIG_HEAD is set to the tip of the current
branch.  This is useful if you have problems with multiple commits, like
running @emph{git am} on the wrong branch or an error in the commits that is more
easily fixed by changing the mailbox (e.g.  errors in the "From:" lines).

@noindent

@chapheading HOOKS

This command can run @samp{applypatch-msg}, @samp{pre-applypatch}, and
@samp{post-applypatch} hooks.  See githooks(5) for more information.

@noindent

@chapheading SEE ALSO

git-apply(1).

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-annotate,,,Top
@chapheading Name

git-annotate — 指定ファイルの各行のコミット情報を表示

@noindent

@chapheading Synopsis

@display
git annotate [<options>] <file> [<revision>]
@end display


@noindent

@chapheading DESCRIPTION

指定されたファイルの各行に、その行を導入したコミットからの情報で注釈を付けます。オプションで、特定のリビジョンから注釈を付けます。

このコマンドと git-blame(1)
の唯一の違いは、わずかに異なる出力形式を使用することです。このコマンドは、既存のスクリプトをサポートするための下位互換性のためにのみ存在し、他のSCMシステムから来た人々により馴染みのあるコマンド名を提供します。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-b} 
境界コミットでは空白のSHA-1を表示します。これは、 @samp{blame.blankBoundary} 構成オプションを介して制御することもできます。

@item  @samp{--root} 
ルートコミットを境界として扱わないでください。 これは、 @samp{blame.showRoot} 構成オプションを介して制御することもできます。

@item  @samp{--show-stats} 
blameの出力の最後に追加の統計を含めます。

@item  @samp{-L <start>,<end>} 
@itemx  @samp{-L :<funcname>} 
@emph{<start>,<end>} で指定の行範囲のみ、または正規表現関数名 @emph{<funcname>}
で指定の行範囲のみに注釈を付けます。複数回指定できます。範囲が重複するのは許されます。

@emph{<start>} と @emph{<end>} はオプションです。 @samp{-L <start>} または @samp{-L <start>,} は @emph{<start>}
からファイルの終わりまでの範囲です。 @samp{-L ,<end>} は、ファイルの先頭から @emph{<end>} までの範囲です。

@emph{<start>} と @emph{<end>} は、以下のいずれかの形式です:

@itemize 

@item
number

@emph{<start>} または @emph{<end>} が数値の場合、絶対行番号を指定します(行は1から数えます)。

@item
@samp{/regex/}

この形式は、指定されたPOSIX正規表現に一致する最初の行を使用します。 @emph{<start>} が正規表現の場合、前の @samp{-L}
範囲の末尾から検索します。それ以外の場合は、ファイルの先頭から検索します。 @emph{<start>} が @samp{^/regex/}
の場合、ファイルの先頭から検索します。 @emph{<end>} が正規表現の場合、 @emph{<start>} で指定された行から検索開始します。

@item
+offset or -offset

これは <end> に対してのみ有効であり、 <start> で指定された行の前後の行数を指定します。
@end itemize

@emph{<start>} および @emph{<end>} の代わりに @samp{:<funcname>} が指定されている場合、これは @emph{<funcname>}
に一致する最初の関数名行から次の関数名行までの範囲を示す正規表現です。 @samp{:<funcname>} は、前の @samp{-L}
範囲の末尾から検索します。それ以外の場合は、ファイルの先頭から検索します。 @samp{^:<funcname>} はファイルの先頭から検索します。関数名は、
@samp{git diff} がパッチハンクヘッダーを処理するのと同じ方法で決定されます(gitattributes(5) の
@emph{Defining a custom hunk-header} 参照)。

@item  @samp{-l} 
長いレビジョンを表示します(デフォルト: off)。

@item  @samp{-t} 
生のタイムスタンプを表示します(デフフォルト: off)。

@item  @samp{-S <revs-file>} 
git-rev-list(1) を呼び出す代わりに、revs-fileのリビジョンを使用します。

@item  @samp{--reverse <rev>..<rev>} 
履歴を後方へではなく前方へウォークします。行があらわれたされたリビジョンを表示する代わりに、行が存在した最後のリビジョンを表示します。これには、START..END
のように、STARTにblameのパスが存在するレビジョン範囲が必要です。 便宜上、 @samp{git blame --reverse START} は
@samp{git blame --reverse START..HEAD} と見なされます。

@item  @samp{--first-parent} 
マージコミットを確認したら、最初の親コミットのみを追跡します。
このオプションは、履歴全体にいつ導入されたかではなく、特定の統合ブランチにいつ導入されたかを判別するために使用できます。

@item  @samp{-p} 
@itemx  @samp{--porcelain} 
ソフトウェア等で使用するのに適した形式で表示します。

@item  @samp{--line-porcelain} 
磁器形式で表示しますが、コミットが最初に参照されたときだけでなく、各行のコミット情報を出力します。 --porcelain の機能を含んでいます。

@item  @samp{--incremental} 
ソフトウェア等で使用するのに適した形式で結果を段階的(incrementally)に表示します。

@item  @samp{--encoding=<encoding>} 
作者名(author names)の出力と要約のコミットに使用されるエンコーディングを指定します。 これを @samp{none}
に設定すると、blame出力は変換されていないデータになります。詳細については、 git-log(1) のマニュアルページにある
discussion の encoding に関する説明を参照してください。

@item  @samp{--contents <file>} 
<rev>
が指定されていない場合、コマンドは作業ツリーのコピーから逆方向に開始して変更に注釈を付けます。このフラグにより、コマンドは、作業ツリーのコピーに、指定されたファイルの内容が含まれているように見せかけます(コマンドを標準入力から読み取るには、
@samp{-} を指定します)。

@item  @samp{--date <format>} 
日付の出力に使用される形式を指定します。 --date が指定されていない場合、blame.date 構成変数の値が使用されます。 blame.date
構成変数も設定されていない場合は、 iso形式が使用されます。サポートされている値については、 git-log(1) の --date
オプションの説明を参照してください。

@item  @samp{--[no-]progress} 
進行状況は、端末に接続されている場合、デフォルトで標準エラーストリームに報告されます。このフラグは、端末に接続されていない場合でも進行状況のレポートを有効にします。
@samp{--progress} を @samp{--porcelain} または @samp{--incremental} と一緒に使用することはできません。

@item  @samp{-M[<num>]} 
ファイル内の移動またはコピーされた行を検出します。コミットが行のブロックを移動またはコピーすると(たとえば、元のファイルにA、次にBがあり、コミットによってB、次にAに変更される)、従来の「blame」アルゴリズムは移動の半分だけに気づき、通常は行をblameします
それは親に上に移動され(つまりB)、子のコミットに下に移動された(つまりA)行にblameを割り当てます。このオプションを使用すると、追加の検査パスを実行することにより、両方のグループの行が親のせいになります。

<num> はオプションですが、Gitがそれらの行を親コミットに関連付けるためにファイル内で移動/コピーとして検出する必要がある英数字の数(number
of alphanumeric characters)の下限です。デフォルト値は20です。

@item  @samp{-C[<num>]} 
@samp{-M}
に加えて、同じコミットで変更された他のファイルから移動またはコピーされた行を検出します。これは、プログラムを再編成し、ファイル間でコードを移動するときに役立ちます。このオプションを2回指定すると、コマンドは、ファイルを作成するコミットで他のファイルからのコピーを追加で検索します。このオプションを3回指定すると、コマンドはコミットで他のファイルからのコピーを追加で検索します。

<num> はオプションですが、Gitがそれらの行を親コミットに関連付けるためにファイル間の移動/コピーとして検出する必要がある英数字の数(number
of alphanumeric characters)の下限です。また、デフォルト値は40です。複数の @samp{-C} オプションが指定されている場合、最後の
@samp{-C} の <num> 引数が有効になります。

@item  @samp{--ignore-rev <rev>} 
変更が発生しなかったかのように、blameを割り当てるときにリビジョンによって行われた変更を無視します。無視されたコミットによって変更または追加された行は、その行または近くの行を変更した前のコミットのせいになります。このオプションは、複数のリビジョンを無視するために複数回指定できます。
@samp{blame.markIgnoredLines}
構成オプションが設定されている場合、無視されたコミットによって変更され、別のコミットに起因する行は、blame出力で @samp{?} でマークされます。
@samp{blame.markUnblamableLines}
構成オプションが設定されている場合、別のリビジョンに帰することができなかった無視されたコミットによって触れられた行は、 @emph{*} でマークされます。

@item  @samp{--ignore-revs-file <file>} 
@samp{file} にリストされているリビジョンを無視します。これは @samp{fsck.skipList}
と同じ形式である必要があります。このオプションは繰り返すことができ、これらのファイルは、 @samp{blame.ignoreRevsFile}
構成オプションで指定されたファイルの後に処理されます。空のファイル名 @samp{""} は、以前に処理されたファイルからrevsのリストをクリアします。

@item  @samp{-h} 
ヘルプメッセージを表示する。
@end table

@noindent

@chapheading SEE ALSO

git-blame(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-apply,,,Top
@chapheading Name

git-apply — Apply a patch to files and/or to the index

@noindent

@chapheading Synopsis

@display
git apply [--stat] [--numstat] [--summary] [--check] [--index | --intent-to-add] [--3way]
          [--apply] [--no-add] [--build-fake-ancestor=<file>] [-R | --reverse]
          [--allow-binary-replacement | --binary] [--reject] [-z]
          [-p<n>] [-C<n>] [--inaccurate-eof] [--recount] [--cached]
          [--ignore-space-change | --ignore-whitespace]
          [--whitespace=(nowarn|warn|fix|error|error-all)]
          [--exclude=<path>] [--include=<path>] [--directory=<root>]
          [--verbose] [--unsafe-paths] [<patch>…]
@end display


@noindent

@chapheading DESCRIPTION

Reads the supplied diff output (i.e. "a patch") and applies it to files.
When running from a subdirectory in a repository, patched paths outside the
directory are ignored.  With the @samp{--index} option the patch is also applied
to the index, and with the @samp{--cached} option the patch is only applied to
the index.  Without these options, the command applies the patch only to
files, and does not require them to be in a Git repository.

This command applies the patch but does not create a commit.  Use
git-am(1) to create commits from patches generated by
git-format-patch(1) and/or received by email.

@noindent

@chapheading OPTIONS

@table @asis

@item  <patch>… 
The files to read the patch from.  @emph{-} can be used to read from the standard
input.

@item  @samp{--stat} 
Instead of applying the patch, output diffstat for the input.  Turns off
"apply".

@item  @samp{--numstat} 
Similar to @samp{--stat}, but shows the number of added and deleted lines in
decimal notation and the pathname without abbreviation, to make it more
machine friendly.  For binary files, outputs two @samp{-} instead of saying @samp{0
0}.  Turns off "apply".

@item  @samp{--summary} 
Instead of applying the patch, output a condensed summary of information
obtained from git diff extended headers, such as creations, renames and mode
changes.  Turns off "apply".

@item  @samp{--check} 
Instead of applying the patch, see if the patch is applicable to the current
working tree and/or the index file and detects errors.  Turns off "apply".

@item  @samp{--index} 
Apply the patch to both the index and the working tree (or merely check that
it would apply cleanly to both if @samp{--check} is in effect). Note that
@samp{--index} expects index entries and working tree copies for relevant paths
to be identical (their contents and metadata such as file mode must match),
and will raise an error if they are not, even if the patch would apply
cleanly to both the index and the working tree in isolation.

@item  @samp{--cached} 
Apply the patch to just the index, without touching the working tree. If
@samp{--check} is in effect, merely check that it would apply cleanly to the
index entry.

@item  @samp{--intent-to-add} 
When applying the patch only to the working tree, mark new files to be added
to the index later (see @samp{--intent-to-add} option in
git-add(1)). This option is ignored unless running in a Git
repository and @samp{--index} is not specified.  Note that @samp{--index} could be
implied by other options such as @samp{--cached} or @samp{--3way}.

@item  @samp{-3} 
@itemx  @samp{--3way} 
Attempt 3-way merge if the patch records the identity of blobs it is
supposed to apply to and we have those blobs available locally, possibly
leaving the conflict markers in the files in the working tree for the user
to resolve.  This option implies the @samp{--index} option unless the @samp{--cached}
option is used, and is incompatible with the @samp{--reject} option.  When used
with the @samp{--cached} option, any conflicts are left at higher stages in the
cache.

@item  @samp{--build-fake-ancestor=<file>} 
Newer @emph{git diff} output has embedded @emph{index information} for each blob to
help identify the original version that the patch applies to.  When this
flag is given, and if the original versions of the blobs are available
locally, builds a temporary index containing those blobs.

When a pure mode change is encountered (which has no index information), the
information is read from the current index instead.

@item  @samp{-R} 
@itemx  @samp{--reverse} 
Apply the patch in reverse.

@item  @samp{--reject} 
For atomicity, @emph{git apply} by default fails the whole patch and does not
touch the working tree when some of the hunks do not apply.  This option
makes it apply the parts of the patch that are applicable, and leave the
rejected hunks in corresponding *.rej files.

@item  @samp{-z} 
When @samp{--numstat} has been given, do not munge pathnames, but use a
NUL-terminated machine-readable format.

Without this option, pathnames with "unusual" characters are quoted as
explained for the configuration variable @samp{core.quotePath} (see
git-config(1)).

@item  @samp{-p<n>} 
Remove <n> leading path components (separated by slashes) from traditional
diff paths. E.g., with @samp{-p2}, a patch against @samp{a/dir/file} will be applied
directly to @samp{file}. The default is 1.

@item  @samp{-C<n>} 
Ensure at least <n> lines of surrounding context match before and after each
change.  When fewer lines of surrounding context exist they all must match.
By default no context is ever ignored.

@item  @samp{--unidiff-zero} 
By default, @emph{git apply} expects that the patch being applied is a unified
diff with at least one line of context.  This provides good safety measures,
but breaks down when applying a diff generated with @samp{--unified=0}. To bypass
these checks use @samp{--unidiff-zero}.

Note, for the reasons stated above usage of context-free patches is
discouraged.

@item  @samp{--apply} 
If you use any of the options marked "Turns off @emph{apply}" above, @emph{git apply}
reads and outputs the requested information without actually applying the
patch.  Give this flag after those flags to also apply the patch.

@item  @samp{--no-add} 
When applying a patch, ignore additions made by the patch.  This can be used
to extract the common part between two files by first running @emph{diff} on them
and applying the result with this option, which would apply the deletion
part but not the addition part.

@item  @samp{--allow-binary-replacement} 
@itemx  @samp{--binary} 
Historically we did not allow binary patch applied without an explicit
permission from the user, and this flag was the way to do so.  Currently we
always allow binary patch application, so this is a no-op.

@item  @samp{--exclude=<path-pattern>} 
Don’t apply changes to files matching the given path pattern. This can be
useful when importing patchsets, where you want to exclude certain files or
directories.

@item  @samp{--include=<path-pattern>} 
Apply changes to files matching the given path pattern. This can be useful
when importing patchsets, where you want to include certain files or
directories.

When @samp{--exclude} and @samp{--include} patterns are used, they are examined in the
order they appear on the command line, and the first match determines if a
patch to each path is used.  A patch to a path that does not match any
include/exclude pattern is used by default if there is no include pattern on
the command line, and ignored if there is any include pattern.

@item  @samp{--ignore-space-change} 
@itemx  @samp{--ignore-whitespace} 
When applying a patch, ignore changes in whitespace in context lines if
necessary.  Context lines will preserve their whitespace, and they will not
undergo whitespace fixing regardless of the value of the @samp{--whitespace}
option. New lines will still be fixed, though.

@item  @samp{--whitespace=<action>} 
When applying a patch, detect a new or modified line that has whitespace
errors.  What are considered whitespace errors is controlled by
@samp{core.whitespace} configuration.  By default, trailing whitespaces
(including lines that solely consist of whitespaces) and a space character
that is immediately followed by a tab character inside the initial indent of
the line are considered whitespace errors.

By default, the command outputs warning messages but applies the patch.
When @samp{git-apply} is used for statistics and not applying a patch, it
defaults to @samp{nowarn}.

You can use different @samp{<action>} values to control this behavior:

@itemize 

@item
@samp{nowarn} turns off the trailing whitespace warning.

@item
@samp{warn} outputs warnings for a few such errors, but applies the patch as-is
(default).

@item
@samp{fix} outputs warnings for a few such errors, and applies the patch after
fixing them (@samp{strip} is a synonym --- the tool used to consider only
trailing whitespace characters as errors, and the fix involved @emph{stripping}
them, but modern Gits do more).

@item
@samp{error} outputs warnings for a few such errors, and refuses to apply the
patch.

@item
@samp{error-all} is similar to @samp{error} but shows all errors.
@end itemize

@item  @samp{--inaccurate-eof} 
Under certain circumstances, some versions of @emph{diff} do not correctly detect
a missing new-line at the end of the file. As a result, patches created by
such @emph{diff} programs do not record incomplete lines correctly. This option
adds support for applying such patches by working around this bug.

@item  @samp{-v} 
@itemx  @samp{--verbose} 
Report progress to stderr. By default, only a message about the current
patch being applied will be printed. This option will cause additional
information to be reported.

@item  @samp{--recount} 
Do not trust the line counts in the hunk headers, but infer them by
inspecting the patch (e.g. after editing the patch without adjusting the
hunk headers appropriately).

@item  @samp{--directory=<root>} 
Prepend <root> to all filenames.  If a "-p" argument was also passed, it is
applied before prepending the new root.

For example, a patch that talks about updating @samp{a/git-gui.sh} to
@samp{b/git-gui.sh} can be applied to the file in the working tree
@samp{modules/git-gui/git-gui.sh} by running @samp{git apply
--directory=modules/git-gui}.

@item  @samp{--unsafe-paths} 
By default, a patch that affects outside the working area (either a Git
controlled working tree, or the current working directory when "git apply"
is used as a replacement of GNU patch) is rejected as a mistake (or a
mischief).

When @samp{git apply} is used as a "better GNU patch", the user can pass the
@samp{--unsafe-paths} option to override this safety check.  This option has no
effect when @samp{--index} or @samp{--cached} is in use.
@end table

@noindent

@chapheading CONFIGURATION

@table @asis

@item  apply.ignoreWhitespace 
Set to @emph{change} if you want changes in whitespace to be ignored by default.
Set to one of: no, none, never, false if you want changes in whitespace to
be significant.

@item  apply.whitespace 
When no @samp{--whitespace} flag is given from the command line, this
configuration item is used as the default.
@end table

@noindent

@chapheading SUBMODULES

If the patch contains any changes to submodules then @emph{git apply} treats
these changes as follows.

If @samp{--index} is specified (explicitly or implicitly), then the submodule
commits must match the index exactly for the patch to apply.  If any of the
submodules are checked-out, then these check-outs are completely ignored,
i.e., they are not required to be up to date or clean and they are not
updated.

If @samp{--index} is not specified, then the submodule commits in the patch are
ignored and only the absence or presence of the corresponding subdirectory
is checked and (if possible) updated.

@noindent

@chapheading SEE ALSO

git-am(1).

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-archimport,,,Top
@chapheading Name

git-archimport — GNU Arch リポジトリをGitにインポートします

@noindent

@chapheading Synopsis

@display
git archimport [-h] [-v] [-o] [-a] [-f] [-T] [-D depth] [-t tempdir]
               <archive/branch>[:<git-branch>] …
@end display


@noindent

@chapheading DESCRIPTION

1つ以上の GNU Arch リポジトリからプロジェクトをインポートします。これは、提供された <archive/branch>
パラメーターによって定義された名前空間内のブランチとリポジトリに従います。リモートブランチが見つからない場合は、マージ元から通常のコミットとしてインポートされます。見つかった場合は、可能な限りマージとしてマークします(以下の説明を参照)。

スクリプトは、 @emph{initial import} または @emph{tag} 型のArchコミットからインポートを開始できるキールート(key
root)を提供することを想定しています。提供されたルート(root)内の新しいブランチを追跡してインポートします。

1つのプロジェクトのみを扱うことを想定しています。ルート(root)が異なるブランチを検出した場合、実行を拒否します。その場合は、
<archive/branch> パラメータを編集して、インポートの範囲を明確に定義します。

@emph{git archimport} は、バックグラウンドで @samp{tla} を広範囲に使用して、Archリポジトリにアクセスします。パス上に利用可能な
@samp{tla} の最新バージョンがあることを確認してください。 @samp{tla} は、 @emph{git archimport}
に渡すリポジトリについて知っている必要があります。

最初のインポートでは、 @emph{git archimport} は空のディレクトリに自分自身を見つけることをf期待しています。
Archを使用するプロジェクトの開発を追跡するには、最初のインポートと同じパラメーターを使用して「git
archimport」を再実行し、増分インポートを実行します。

@emph{git archimport}
は、インポートするアーカイブに適切なブランチ名を作成しようとしますが、Gitブランチ名を手動で指定することもできます。これを行うには、各
<archive/branch>
パラメーターの後にコロン(@samp{:})で区切ってGitブランチ名を記述します。このようにして、Archブランチ名を短縮し、Arch専門用語をGit専門用語に変換できます。たとえば、「PROJECT--devo--VERSION」ブランチを「master」にマッピングします。

複数のArchブランチを1つのGitブランチに関連付けることができます。
結果は、2番目のブランチが作成された後、最初のブランチに対してコミットが行われない場合にのみ最も意味があります。それでも、これは定期的にローテーションされたArchリポジトリを変換するのに役立ちます。

@noindent

@chapheading MERGES

Archからのパッチマージデータは、Gitでのマージをマークするためにも使用されます。
Gitはパッチの追跡についてはあまり気にせず、分岐した時点以降、ブランチにすべてのコミットが組み込まれている場合にのみマージを考慮します。最終的な結果として、Gitはブランチがどこまで分岐したかを把握できます。したがって、インポートプロセスでは、パッチ取引のメタデータが失われます。

幸い、Archからインポートされたブランチをマージしようとすると、Gitは適切なマージベースを見つけ、ブランチ間で順番どおりにトレードされていないパッチを特定できる可能性が高くなります。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-h} 
使い方表示。

@item  @samp{-v} 
詳細な出力。

@item  @samp{-T} 
多くのタグ。Archリポジトリのコミット名を反映して、すべてのコミットにタグを作成します。

@item  @samp{-f} 
高速パッチセットインポート戦略(fast patchset import
strategy)を使用します。これは、大きなツリーでは大幅に高速化できますが、ディレクトリの名前変更やアクセス許可の変更を処理できません。デフォルトの戦略は遅いけど安全(slow
and safe)です。

@item  @samp{-o} 
これは、以前のバージョンの「git
archimport」で使用されていた古いスタイルのブランチ名との互換性のために使用します。古いスタイルのブランチ名は
category--branch でしたが、新しいスタイルのブランチ名は
category--branch--version です。
どちらの場合も、コマンドラインで指定された名前が自動生成された名前を上書きします。

@item  @samp{-D <depth>} 
マージの祖先に従い、マージされたツリーのインポートを試みます。パッチログが剪定されている場合は、1より大きい深さを指定します。

@item  @samp{-a} 
@samp{http://mirrors.sourcecontrol.net} でアーカイブを自動登録してみてください。これは、 @samp{-D}
オプションを使用すると特に便利です。

@item  @samp{-t <tmpdir>} 
デフォルトのtempdirをオーバーライドします。

@item  <archive/branch> 
@samp{tla log} が理解できる形式の archive/branch ID。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-archive,,,Top
@chapheading Name

git-archive — 名前付きツリーからファイルのアーカイブを作成します

@noindent

@chapheading Synopsis

@display
git archive [--format=<fmt>] [--list] [--prefix=<prefix>/] [<extra>]
              [-o <file> | --output=<file>] [--worktree-attributes]
              [--remote=<repo> [--exec=<git-upload-archive>]] <tree-ish>
              [<path>…]
@end display


@noindent

@chapheading DESCRIPTION

名前付きツリーのツリー構造を含む指定された形式のアーカイブを作成し、それを標準出力に書き込みます。 <prefix>
が指定されている場合、アーカイブ内のファイル名の前に追加されます。

「git
archive」は、ツリーIDを指定した場合と、コミットIDまたはタグIDを指定した場合の動作が異なります。ツリーIDを指定した場合は、現在の時刻がアーカイブ内の各ファイルの変更時刻として使用されます。コミットIDまたはタグIDを指定した場合、参照されたコミットオブジェクトに記録されたコミット時間が代わりに使用されます。さらに、tar形式が使用されている場合、コミットIDはグローバル拡張paxヘッダー(global
extended pax header)に格納されます。 @samp{git get-tar-commit-id}
を使用して抽出できます。ZIPファイルでは、ファイルコメントとして保存されます。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--format=<fmt>} 
結果のアーカイブの形式を指定します。「tar」または「zip」です。
このオプションが指定されておらず、出力ファイルが指定されている場合、可能であればファイル名から形式が推測されます(たとえば、「foo.zip」に書き込むと、出力はzip形式になります)。それ以外の場合、出力形式は
@samp{tar} です。

@item  @samp{-l} 
@itemx  @samp{--list} 
有効なすべての形式を表示します。

@item  @samp{-v} 
@itemx  @samp{--verbose} 
進捗状況をstderrに報告します。

@item  @samp{--prefix=<prefix>/} 
アーカイブ内の各ファイル名の前に <prefix>/ を付けます。

@item  @samp{-o <file>} 
@itemx  @samp{--output=<file>} 
アーカイブをstdoutではなく<file>に書き込みます。

@item  @samp{--add-file=<file>} 
追跡されていないファイルをアーカイブに追加します。繰り返すことで複数のファイルを追加する事ができます。アーカイブ内のファイルのパスは、
@samp{--prefix} の値(存在する場合) と<file>のベース名を連結することによって作成されます。

@item  @samp{--worktree-attributes} 
作業ツリーの .gitattributes ファイルでも属性を探します( @ref{ATTRIBUTES} 参照)。

@item  <extra> 
これは、アーカイババックエンドが理解できる任意のオプションです。次のセクションを参照してください。

@item  @samp{--remote=<repo>} 
ローカルリポジトリからtarアーカイブを作成する代わりに、リモートリポジトリからtarアーカイブを取得します。リモートリポジトリは、
@samp{<tree-ish>} で許可されるsha1式に制限を課す場合があることに注意してください。詳細については、
git-upload-archive(1) を参照してください。

@item  @samp{--exec=<git-upload-archive>} 
@samp{--remote} とともに使用して、リモート側の「git-upload-archive」へのパスを指定します。

@item  <tree-ish> 
アーカイブを作成するためのツリーまたはコミット。

@item  <path> 
オプションのパスパラメータがない場合、現在の作業ディレクトリのすべてのファイルとサブディレクトリがアーカイブに含まれます。1つ以上のパスが指定されている場合、それらのみが含まれます。
@end table

@noindent

@chapheading BACKEND EXTRA OPTIONS

@noindent

@heading zip

@table @asis

@item  @samp{-0} 
ファイルを圧縮せずに保存します。

@item  @samp{-9} 
最も高圧縮かつ最も遅い圧縮レベル。あなたは1〜9までの任意の整数を指定して、圧縮速度と比率を調整できます。
@end table

@noindent

@chapheading CONFIGURATION

@table @asis

@item  tar.umask 
この変数は、tarアーカイブエントリの許可ビットを制限するために使用できます。 デフォルトは 0002
で、ワールド書き込みビットをオフにします。特別な値「user」は、代わりにアーカイブユーザーのumaskが使用されることを示します。詳細については、
umask(2) を参照してください。 @samp{--remote} が使用されている場合、リモートリポジトリの設定のみが有効になります。

@item  tar.<format>.command 
この変数は、 @samp{git archive}
によって生成されたtar出力をパイプするシェルコマンドを指定します。コマンドは、標準入力から生成されたtarファイル取り込み、シェルを使用して実行され、標準出力に最終出力を生成する必要があります。圧縮レベルのオプションはすべてコマンドに渡されます(例:
@samp{-9} )。他の形式が指定されていない場合、出力ファイルの拡張子が @samp{<format>} と同じ場合にこの形式を使用します。

「tar.gz」および「tgz」形式は自動的に定義され、デフォルトで「gzip -cn」になります。
カスタムコマンドでそれらを上書きすることができます。

@item  tar.<format>.remote 
trueの場合、 git-upload-archive(1) を介してリモートクライアントで使用できるように @samp{<format>}
を有効にします。 ユーザー定義形式の場合、デフォルトはfalseですが、「tar.gz」および「tgz」形式の場合はtrueです。
@end table

@noindent

@chapheading ATTRIBUTES

@table @asis

@item  export-ignore 
属性export-ignoreを持つファイルとディレクトリは、アーカイブファイルに追加されません。 詳細については、
gitattributes(5) を参照してください。

@item  export-subst 
属性export-substがファイルに設定されている場合、Gitはこのファイルをアーカイブに追加するときにいくつかのプレースホルダーを展開します。詳細については、
gitattributes(5) を参照してください。
@end table

注意: デフォルトでは、属性はアーカイブされているツリーの @samp{.gitattributes}
ファイルから取得されることに注意してください。事後に出力が生成される方法を微調整したい場合(たとえば、 @samp{.gitattributes} に適切な
export-ignore を追加せずにコミットした場合)、必要に応じてチェックアウトされた @samp{.gitattributes} ファイルを調整して
@samp{--worktree-attributes} オプションを使用します。 または、 @samp{$GIT_DIR/info/attributes}
ファイルに、ツリーをアーカイブするときに適用する必要のある属性を保持することもできます。

@noindent

@chapheading EXAMPLES

@table @asis

@item  @samp{git archive --format=tar --prefix=junk/ HEAD | (cd /var/tmp/ && tar xf -)} 
現在のブランチの最新のコミットの内容を含むtarアーカイブを作成し、それを @samp{/var/tmp/junk} ディレクトリに抽出します。

@item  @samp{git archive --format=tar --prefix=git-1.4.0/ v1.4.0 | gzip >git-1.4.0.tar.gz} 
これは、 v1.4.0リリース用の圧縮tarballを作成します。

@item  @samp{git archive --format=tar.gz --prefix=git-1.4.0/ v1.4.0 >git-1.4.0.tar.gz} 
これは、上記と同じですが、組み込みのtar.gz処理を使用します。

@item  @samp{git archive --prefix=git-1.4.0/ -o git-1.4.0.tar.gz v1.4.0} 
これは上記と同じですが、形式は出力ファイル名から推測されます。

@item  @samp{git archive --format=tar --prefix=git-1.4.0/ v1.4.0^@{tree@} | gzip >git-1.4.0.tar.gz} 
v1.4.0リリース用の圧縮tarballを作成しますが、グローバル拡張paxヘッダー(global extended pax
header)はありません。

@item  @samp{git archive --format=zip --prefix=git-docs/ HEAD:Documentation/ > git-1.4.0-docs.zip} 
現在のヘッド のDocumentation/
ディレクトリにあるすべてのものを「git-1.4.0-docs.zip」にプレフィックス「git-docs/」を付けて配置します。

@item  @samp{git archive -o latest.zip HEAD} 
現在のブランチの最新のコミットの内容を含むZipアーカイブを作成します。出力形式は、出力ファイルの拡張子によって推測されることに注意してください。

@item  @samp{git config tar.tar.xz.command "xz -c"} 
LZMA圧縮tarファイルを作成するための「tar.xz」形式を構成します。 @samp{--format=tar.xz} を指定するか、 @samp{-o
foo.tar.xz} のような出力ファイルを作成することで使用できます。
@end table

@noindent

@chapheading SEE ALSO

gitattributes(5)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-bisect,,,Top
@chapheading Name

git-bisect — Use binary search to find the commit that introduced a bug

@noindent

@chapheading Synopsis

@display
git bisect <subcommand> <options>
@end display


@noindent

@chapheading DESCRIPTION

The command takes various subcommands, and different options depending on
the subcommand:

@example
git bisect start [--term-@{new,bad@}=<term> --term-@{old,good@}=<term>]
                 [--no-checkout] [--first-parent] [<bad> [<good>...]] [--] [<paths>...]
git bisect (bad|new|<term-new>) [<rev>]
git bisect (good|old|<term-old>) [<rev>...]
git bisect terms [--term-good | --term-bad]
git bisect skip [(<rev>|<range>)...]
git bisect reset [<commit>]
git bisect (visualize|view)
git bisect replay <logfile>
git bisect log
git bisect run <cmd>...
git bisect help
@end example

This command uses a binary search algorithm to find which commit in your
project’s history introduced a bug. You use it by first telling it a "bad"
commit that is known to contain the bug, and a "good" commit that is known
to be before the bug was introduced. Then @samp{git bisect} picks a commit
between those two endpoints and asks you whether the selected commit is
"good" or "bad". It continues narrowing down the range until it finds the
exact commit that introduced the change.

In fact, @samp{git bisect} can be used to find the commit that changed @strong{any}
property of your project; e.g., the commit that fixed a bug, or the commit
that caused a benchmark’s performance to improve. To support this more
general usage, the terms "old" and "new" can be used in place of "good" and
"bad", or you can choose your own terms. See section "Alternate terms" below
for more information.

@noindent

@heading Basic bisect commands: start, bad, good

As an example, suppose you are trying to find the commit that broke a
feature that was known to work in version @samp{v2.6.13-rc2} of your project. You
start a bisect session as follows:

@example
$ git bisect start
$ git bisect bad                 # Current version is bad
$ git bisect good v2.6.13-rc2    # v2.6.13-rc2 is known to be good
@end example


Once you have specified at least one bad and one good commit, @samp{git bisect}
selects a commit in the middle of that range of history, checks it out, and
outputs something similar to the following:

@example
Bisecting: 675 revisions left to test after this (roughly 10 steps)
@end example


You should now compile the checked-out version and test it. If that version
works correctly, type

@example
$ git bisect good
@end example


If that version is broken, type

@example
$ git bisect bad
@end example


Then @samp{git bisect} will respond with something like

@example
Bisecting: 337 revisions left to test after this (roughly 9 steps)
@end example


Keep repeating the process: compile the tree, test it, and depending on
whether it is good or bad run @samp{git bisect good} or @samp{git bisect bad} to ask
for the next commit that needs testing.

Eventually there will be no more revisions left to inspect, and the command
will print out a description of the first bad commit. The reference
@samp{refs/bisect/bad} will be left pointing at that commit.

@noindent

@heading Bisect reset

After a bisect session, to clean up the bisection state and return to the
original HEAD, issue the following command:

@example
$ git bisect reset
@end example


By default, this will return your tree to the commit that was checked out
before @samp{git bisect start}.  (A new @samp{git bisect start} will also do that, as
it cleans up the old bisection state.)

With an optional argument, you can return to a different commit instead:

@example
$ git bisect reset <commit>
@end example


For example, @samp{git bisect reset bisect/bad} will check out the first bad
revision, while @samp{git bisect reset HEAD} will leave you on the current
bisection commit and avoid switching commits at all.

@noindent

@heading Alternate terms

Sometimes you are not looking for the commit that introduced a breakage, but
rather for a commit that caused a change between some other "old" state and
"new" state. For example, you might be looking for the commit that
introduced a particular fix. Or you might be looking for the first commit in
which the source-code filenames were finally all converted to your company’s
naming standard. Or whatever.

In such cases it can be very confusing to use the terms "good" and "bad" to
refer to "the state before the change" and "the state after the change". So
instead, you can use the terms "old" and "new", respectively, in place of
"good" and "bad". (But note that you cannot mix "good" and "bad" with "old"
and "new" in a single session.)

In this more general usage, you provide @samp{git bisect} with a "new" commit
that has some property and an "old" commit that doesn’t have that
property. Each time @samp{git bisect} checks out a commit, you test if that
commit has the property. If it does, mark the commit as "new"; otherwise,
mark it as "old". When the bisection is done, @samp{git bisect} will report which
commit introduced the property.

To use "old" and "new" instead of "good" and bad, you must run @samp{git bisect
start} without commits as argument and then run the following commands to
add the commits:

@example
git bisect old [<rev>]
@end example


to indicate that a commit was before the sought change, or

@example
git bisect new [<rev>...]
@end example


to indicate that it was after.

To get a reminder of the currently used terms, use

@example
git bisect terms
@end example


You can get just the old (respectively new) term with @samp{git bisect terms
--term-old} or @samp{git bisect terms --term-good}.

If you would like to use your own terms instead of "bad"/"good" or
"new"/"old", you can choose any names you like (except existing bisect
subcommands like @samp{reset}, @samp{start}, …) by starting the bisection using

@example
git bisect start --term-old <term-old> --term-new <term-new>
@end example


For example, if you are looking for a commit that introduced a performance
regression, you might use

@example
git bisect start --term-old fast --term-new slow
@end example


Or if you are looking for the commit that fixed a bug, you might use

@example
git bisect start --term-new fixed --term-old broken
@end example


Then, use @samp{git bisect <term-old>} and @samp{git bisect <term-new>} instead of
@samp{git bisect good} and @samp{git bisect bad} to mark commits.

@noindent

@heading Bisect visualize/view

To see the currently remaining suspects in @emph{gitk}, issue the following
command during the bisection process (the subcommand @samp{view} can be used as
an alternative to @samp{visualize}):

@example
$ git bisect visualize
@end example


If the @samp{DISPLAY} environment variable is not set, @emph{git log} is used
instead.  You can also give command-line options such as @samp{-p} and @samp{--stat}.

@example
$ git bisect visualize --stat
@end example


@noindent

@heading Bisect log and bisect replay

After having marked revisions as good or bad, issue the following command to
show what has been done so far:

@example
$ git bisect log
@end example


If you discover that you made a mistake in specifying the status of a
revision, you can save the output of this command to a file, edit it to
remove the incorrect entries, and then issue the following commands to
return to a corrected state:

@example
$ git bisect reset
$ git bisect replay that-file
@end example


@noindent

@heading Avoiding testing a commit

If, in the middle of a bisect session, you know that the suggested revision
is not a good one to test (e.g. it fails to build and you know that the
failure does not have anything to do with the bug you are chasing), you can
manually select a nearby commit and test that one instead.

For example:

@example
$ git bisect good/bad                   # previous round was good or bad.
Bisecting: 337 revisions left to test after this (roughly 9 steps)
$ git bisect visualize                  # oops, that is uninteresting.
$ git reset --hard HEAD~3               # try 3 revisions before what
                                        # was suggested
@end example


Then compile and test the chosen revision, and afterwards mark the revision
as good or bad in the usual manner.

@noindent

@heading Bisect skip

Instead of choosing a nearby commit by yourself, you can ask Git to do it
for you by issuing the command:

@example
$ git bisect skip                 # Current version cannot be tested
@end example


However, if you skip a commit adjacent to the one you are looking for, Git
will be unable to tell exactly which of those commits was the first bad one.

You can also skip a range of commits, instead of just one commit, using
range notation. For example:

@example
$ git bisect skip v2.5..v2.6
@end example


This tells the bisect process that no commit after @samp{v2.5}, up to and
including @samp{v2.6}, should be tested.

Note that if you also want to skip the first commit of the range you would
issue the command:

@example
$ git bisect skip v2.5 v2.5..v2.6
@end example


This tells the bisect process that the commits between @samp{v2.5} and @samp{v2.6}
(inclusive) should be skipped.

@noindent

@heading Cutting down bisection by giving more parameters to bisect start

You can further cut down the number of trials, if you know what part of the
tree is involved in the problem you are tracking down, by specifying path
parameters when issuing the @samp{bisect start} command:

@example
$ git bisect start -- arch/i386 include/asm-i386
@end example


If you know beforehand more than one good commit, you can narrow the bisect
space down by specifying all of the good commits immediately after the bad
commit when issuing the @samp{bisect start} command:

@example
$ git bisect start v2.6.20-rc6 v2.6.20-rc4 v2.6.20-rc1 --
                   # v2.6.20-rc6 is bad
                   # v2.6.20-rc4 and v2.6.20-rc1 are good
@end example


@noindent

@heading Bisect run

If you have a script that can tell if the current source code is good or
bad, you can bisect by issuing the command:

@example
$ git bisect run my_script arguments
@end example


Note that the script (@samp{my_script} in the above example) should exit with
code 0 if the current source code is good/old, and exit with a code between
1 and 127 (inclusive), except 125, if the current source code is bad/new.

Any other exit code will abort the bisect process. It should be noted that a
program that terminates via @samp{exit(-1)} leaves $? = 255, (see the exit(3)
manual page), as the value is chopped with @samp{& 0377}.

The special exit code 125 should be used when the current source code cannot
be tested. If the script exits with this code, the current revision will be
skipped (see @samp{git bisect skip} above). 125 was chosen as the highest
sensible value to use for this purpose, because 126 and 127 are used by
POSIX shells to signal specific error status (127 is for command not found,
126 is for command found but not executable—these details do not matter, as
they are normal errors in the script, as far as @samp{bisect run} is concerned).

You may often find that during a bisect session you want to have temporary
modifications (e.g. s/#define DEBUG 0/#define DEBUG 1/ in a header file, or
"revision that does not have this commit needs this patch applied to work
around another problem this bisection is not interested in") applied to the
revision being tested.

To cope with such a situation, after the inner @emph{git bisect} finds the next
revision to test, the script can apply the patch before compiling, run the
real test, and afterwards decide if the revision (possibly with the needed
patch) passed the test and then rewind the tree to the pristine state.
Finally the script should exit with the status of the real test to let the
@samp{git bisect run} command loop determine the eventual outcome of the bisect
session.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--no-checkout} 
Do not checkout the new working tree at each iteration of the bisection
process. Instead just update a special reference named @samp{BISECT_HEAD} to make
it point to the commit that should be tested.

This option may be useful when the test you would perform in each step does
not require a checked out tree.

If the repository is bare, @samp{--no-checkout} is assumed.

@item  @samp{--first-parent} 
Follow only the first parent commit upon seeing a merge commit.

In detecting regressions introduced through the merging of a branch, the
merge commit will be identified as introduction of the bug and its ancestors
will be ignored.

This option is particularly useful in avoiding false positives when a merged
branch contained broken or non-buildable commits, but the merge itself was
OK.
@end table

@noindent

@chapheading EXAMPLES

@itemize 

@item
Automatically bisect a broken build between v1.2 and HEAD:

@example
$ git bisect start HEAD v1.2 --      # HEAD is bad, v1.2 is good
$ git bisect run make                # "make" builds the app
$ git bisect reset                   # quit the bisect session
@end example


@item
Automatically bisect a test failure between origin and HEAD:

@example
$ git bisect start HEAD origin --    # HEAD is bad, origin is good
$ git bisect run make test           # "make test" builds and tests
$ git bisect reset                   # quit the bisect session
@end example


@item
Automatically bisect a broken test case:

@example
$ cat ~/test.sh
#!/bin/sh
make || exit 125                     # this skips broken builds
~/check_test_case.sh                 # does the test case pass?
$ git bisect start HEAD HEAD~10 --   # culprit is among the last 10
$ git bisect run ~/test.sh
$ git bisect reset                   # quit the bisect session
@end example


Here we use a @samp{test.sh} custom script. In this script, if @samp{make} fails, we
skip the current commit.  @samp{check_test_case.sh} should @samp{exit 0} if the test
case passes, and @samp{exit 1} otherwise.

It is safer if both @samp{test.sh} and @samp{check_test_case.sh} are outside the
repository to prevent interactions between the bisect, make and test
processes and the scripts.

@item
Automatically bisect with temporary modifications (hot-fix):

@example
$ cat ~/test.sh
#!/bin/sh

# tweak the working tree by merging the hot-fix branch
# and then attempt a build
if      git merge --no-commit --no-ff hot-fix &&
        make
then
        # run project specific test and report its status
        ~/check_test_case.sh
        status=$?
else
        # tell the caller this is untestable
        status=125
fi

# undo the tweak to allow clean flipping to the next commit
git reset --hard

# return control
exit $status
@end example


This applies modifications from a hot-fix branch before each test run,
e.g. in case your build or test environment changed so that older revisions
may need a fix which newer ones have already. (Make sure the hot-fix branch
is based off a commit which is contained in all revisions which you are
bisecting, so that the merge does not pull in too much, or use @samp{git
cherry-pick} instead of @samp{git merge}.)

@item
Automatically bisect a broken test case:

@example
$ git bisect start HEAD HEAD~10 --   # culprit is among the last 10
$ git bisect run sh -c "make || exit 125; ~/check_test_case.sh"
$ git bisect reset                   # quit the bisect session
@end example


This shows that you can do without a run script if you write the test on a
single line.

@item
Locate a good region of the object graph in a damaged repository

@example
$ git bisect start HEAD <known-good-commit> [ <boundary-commit> ... ] --no-checkout
$ git bisect run sh -c '
        GOOD=$(git for-each-ref "--format=%(objectname)" refs/bisect/good-*) &&
        git rev-list --objects BISECT_HEAD --not $GOOD >tmp.$$ &&
        git pack-objects --stdout >/dev/null <tmp.$$
        rc=$?
        rm -f tmp.$$
        test $rc = 0'

$ git bisect reset                   # quit the bisect session
@end example


In this case, when @emph{git bisect run} finishes, bisect/bad will refer to a
commit that has at least one parent whose reachable graph is fully
traversable in the sense required by @emph{git pack objects}.

@item
Look for a fix instead of a regression in the code

@example
$ git bisect start
$ git bisect new HEAD    # current commit is marked as new
$ git bisect old HEAD~10 # the tenth commit from now is marked as old
@end example


or:
@end itemize

@example
$ git bisect start --term-old broken --term-new fixed
$ git bisect fixed
$ git bisect broken HEAD~10
@end example


@noindent

@heading Getting help

Use @samp{git bisect} to get a short usage description, and @samp{git bisect help} or
@samp{git bisect -h} to get a long usage description.

@noindent

@chapheading SEE ALSO

@uref{git-bisect-lk2009.html,Fighting regressions with git bisect},
git-blame(1).

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-blame,,,Top
@chapheading Name

git-blame — Show what revision and author last modified each line of a file

@noindent

@chapheading Synopsis

@display
git blame [-c] [-b] [-l] [--root] [-t] [-f] [-n] [-s] [-e] [-p] [-w] [--incremental]
            [-L <range>] [-S <revs-file>] [-M] [-C] [-C] [-C] [--since=<date>]
            [--ignore-rev <rev>] [--ignore-revs-file <file>]
            [--progress] [--abbrev=<n>] [<rev> | --contents <file> | --reverse <rev>..<rev>]
            [--] <file>
@end display


@noindent

@chapheading DESCRIPTION

Annotates each line in the given file with information from the revision
which last modified the line. Optionally, start annotating from the given
revision.

When specified one or more times, @samp{-L} restricts annotation to the requested
lines.

The origin of lines is automatically followed across whole-file renames
(currently there is no option to turn the rename-following off). To follow
lines moved from one file to another, or to follow lines that were copied
and pasted from another file, etc., see the @samp{-C} and @samp{-M} options.

The report does not tell you anything about lines which have been deleted or
replaced; you need to use a tool such as @emph{git diff} or the "pickaxe"
interface briefly mentioned in the following paragraph.

Apart from supporting file annotation, Git also supports searching the
development history for when a code snippet occurred in a change. This makes
it possible to track when a code snippet was added to a file, moved or
copied between files, and eventually deleted or replaced. It works by
searching for a text string in the diff. A small example of the pickaxe
interface that searches for @samp{blame_usage}:

@example
$ git log --pretty=oneline -S'blame_usage'
5040f17eba15504bad66b14a645bddd9b015ebb7 blame -S <ancestry-file>
ea4c7f9bf69e781dd0cd88d2bccb2bf5cc15c9a7 git-blame: Make the output
@end example


@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-b} 
境界コミットでは空白のSHA-1を表示します。これは、 @samp{blame.blankBoundary} 構成オプションを介して制御することもできます。

@item  @samp{--root} 
ルートコミットを境界として扱わないでください。 これは、 @samp{blame.showRoot} 構成オプションを介して制御することもできます。

@item  @samp{--show-stats} 
blameの出力の最後に追加の統計を含めます。

@item  @samp{-L <start>,<end>} 
@itemx  @samp{-L :<funcname>} 
@emph{<start>,<end>} で指定の行範囲のみ、または正規表現関数名 @emph{<funcname>}
で指定の行範囲のみに注釈を付けます。複数回指定できます。範囲が重複するのは許されます。

@emph{<start>} と @emph{<end>} はオプションです。 @samp{-L <start>} または @samp{-L <start>,} は @emph{<start>}
からファイルの終わりまでの範囲です。 @samp{-L ,<end>} は、ファイルの先頭から @emph{<end>} までの範囲です。

@emph{<start>} と @emph{<end>} は、以下のいずれかの形式です:

@itemize 

@item
number

@emph{<start>} または @emph{<end>} が数値の場合、絶対行番号を指定します(行は1から数えます)。

@item
@samp{/regex/}

この形式は、指定されたPOSIX正規表現に一致する最初の行を使用します。 @emph{<start>} が正規表現の場合、前の @samp{-L}
範囲の末尾から検索します。それ以外の場合は、ファイルの先頭から検索します。 @emph{<start>} が @samp{^/regex/}
の場合、ファイルの先頭から検索します。 @emph{<end>} が正規表現の場合、 @emph{<start>} で指定された行から検索開始します。

@item
+offset or -offset

これは <end> に対してのみ有効であり、 <start> で指定された行の前後の行数を指定します。
@end itemize

@emph{<start>} および @emph{<end>} の代わりに @samp{:<funcname>} が指定されている場合、これは @emph{<funcname>}
に一致する最初の関数名行から次の関数名行までの範囲を示す正規表現です。 @samp{:<funcname>} は、前の @samp{-L}
範囲の末尾から検索します。それ以外の場合は、ファイルの先頭から検索します。 @samp{^:<funcname>} はファイルの先頭から検索します。関数名は、
@samp{git diff} がパッチハンクヘッダーを処理するのと同じ方法で決定されます(gitattributes(5) の
@emph{Defining a custom hunk-header} 参照)。

@item  @samp{-l} 
長いレビジョンを表示します(デフォルト: off)。

@item  @samp{-t} 
生のタイムスタンプを表示します(デフフォルト: off)。

@item  @samp{-S <revs-file>} 
git-rev-list(1) を呼び出す代わりに、revs-fileのリビジョンを使用します。

@item  @samp{--reverse <rev>..<rev>} 
履歴を後方へではなく前方へウォークします。行があらわれたされたリビジョンを表示する代わりに、行が存在した最後のリビジョンを表示します。これには、START..END
のように、STARTにblameのパスが存在するレビジョン範囲が必要です。 便宜上、 @samp{git blame --reverse START} は
@samp{git blame --reverse START..HEAD} と見なされます。

@item  @samp{--first-parent} 
マージコミットを確認したら、最初の親コミットのみを追跡します。
このオプションは、履歴全体にいつ導入されたかではなく、特定の統合ブランチにいつ導入されたかを判別するために使用できます。

@item  @samp{-p} 
@itemx  @samp{--porcelain} 
ソフトウェア等で使用するのに適した形式で表示します。

@item  @samp{--line-porcelain} 
磁器形式で表示しますが、コミットが最初に参照されたときだけでなく、各行のコミット情報を出力します。 --porcelain の機能を含んでいます。

@item  @samp{--incremental} 
ソフトウェア等で使用するのに適した形式で結果を段階的(incrementally)に表示します。

@item  @samp{--encoding=<encoding>} 
作者名(author names)の出力と要約のコミットに使用されるエンコーディングを指定します。 これを @samp{none}
に設定すると、blame出力は変換されていないデータになります。詳細については、 git-log(1) のマニュアルページにある
discussion の encoding に関する説明を参照してください。

@item  @samp{--contents <file>} 
<rev>
が指定されていない場合、コマンドは作業ツリーのコピーから逆方向に開始して変更に注釈を付けます。このフラグにより、コマンドは、作業ツリーのコピーに、指定されたファイルの内容が含まれているように見せかけます(コマンドを標準入力から読み取るには、
@samp{-} を指定します)。

@item  @samp{--date <format>} 
日付の出力に使用される形式を指定します。 --date が指定されていない場合、blame.date 構成変数の値が使用されます。 blame.date
構成変数も設定されていない場合は、 iso形式が使用されます。サポートされている値については、 git-log(1) の --date
オプションの説明を参照してください。

@item  @samp{--[no-]progress} 
進行状況は、端末に接続されている場合、デフォルトで標準エラーストリームに報告されます。このフラグは、端末に接続されていない場合でも進行状況のレポートを有効にします。
@samp{--progress} を @samp{--porcelain} または @samp{--incremental} と一緒に使用することはできません。

@item  @samp{-M[<num>]} 
ファイル内の移動またはコピーされた行を検出します。コミットが行のブロックを移動またはコピーすると(たとえば、元のファイルにA、次にBがあり、コミットによってB、次にAに変更される)、従来の「blame」アルゴリズムは移動の半分だけに気づき、通常は行をblameします
それは親に上に移動され(つまりB)、子のコミットに下に移動された(つまりA)行にblameを割り当てます。このオプションを使用すると、追加の検査パスを実行することにより、両方のグループの行が親のせいになります。

<num> はオプションですが、Gitがそれらの行を親コミットに関連付けるためにファイル内で移動/コピーとして検出する必要がある英数字の数(number
of alphanumeric characters)の下限です。デフォルト値は20です。

@item  @samp{-C[<num>]} 
@samp{-M}
に加えて、同じコミットで変更された他のファイルから移動またはコピーされた行を検出します。これは、プログラムを再編成し、ファイル間でコードを移動するときに役立ちます。このオプションを2回指定すると、コマンドは、ファイルを作成するコミットで他のファイルからのコピーを追加で検索します。このオプションを3回指定すると、コマンドはコミットで他のファイルからのコピーを追加で検索します。

<num> はオプションですが、Gitがそれらの行を親コミットに関連付けるためにファイル間の移動/コピーとして検出する必要がある英数字の数(number
of alphanumeric characters)の下限です。また、デフォルト値は40です。複数の @samp{-C} オプションが指定されている場合、最後の
@samp{-C} の <num> 引数が有効になります。

@item  @samp{--ignore-rev <rev>} 
変更が発生しなかったかのように、blameを割り当てるときにリビジョンによって行われた変更を無視します。無視されたコミットによって変更または追加された行は、その行または近くの行を変更した前のコミットのせいになります。このオプションは、複数のリビジョンを無視するために複数回指定できます。
@samp{blame.markIgnoredLines}
構成オプションが設定されている場合、無視されたコミットによって変更され、別のコミットに起因する行は、blame出力で @samp{?} でマークされます。
@samp{blame.markUnblamableLines}
構成オプションが設定されている場合、別のリビジョンに帰することができなかった無視されたコミットによって触れられた行は、 @emph{*} でマークされます。

@item  @samp{--ignore-revs-file <file>} 
@samp{file} にリストされているリビジョンを無視します。これは @samp{fsck.skipList}
と同じ形式である必要があります。このオプションは繰り返すことができ、これらのファイルは、 @samp{blame.ignoreRevsFile}
構成オプションで指定されたファイルの後に処理されます。空のファイル名 @samp{""} は、以前に処理されたファイルからrevsのリストをクリアします。

@item  @samp{-h} 
ヘルプメッセージを表示する。

@item  @samp{-c} 
Use the same output mode as git-annotate(1) (Default: off).

@item  @samp{--score-debug} 
Include debugging information related to the movement of lines between files
(see @samp{-C}) and lines moved within a file (see @samp{-M}).  The first number
listed is the score.  This is the number of alphanumeric characters detected
as having been moved between or within files.  This must be above a certain
threshold for @emph{git blame} to consider those lines of code to have been
moved.

@item  @samp{-f} 
@itemx  @samp{--show-name} 
Show the filename in the original commit.  By default the filename is shown
if there is any line that came from a file with a different name, due to
rename detection.

@item  @samp{-n} 
@itemx  @samp{--show-number} 
Show the line number in the original commit (Default: off).

@item  @samp{-s} 
Suppress the author name and timestamp from the output.

@item  @samp{-e} 
@itemx  @samp{--show-email} 
Show the author email instead of author name (Default: off).  This can also
be controlled via the @samp{blame.showEmail} config option.

@item  @samp{-w} 
Ignore whitespace when comparing the parent’s version and the child’s to
find where the lines came from.

@item  @samp{--abbrev=<n>} 
Instead of using the default 7+1 hexadecimal digits as the abbreviated
object name, use <m>+1 digits, where <m> is at least <n> but ensures the
commit object names are unique.  Note that 1 column is used for a caret to
mark the boundary commit.
@end table

@noindent

@chapheading THE PORCELAIN FORMAT

In this format, each line is output after a header; the header at the
minimum has the first line which has:

@itemize 

@item
40-byte SHA-1 of the commit the line is attributed to;

@item
the line number of the line in the original file;

@item
the line number of the line in the final file;

@item
on a line that starts a group of lines from a different commit than the
previous one, the number of lines in this group.  On subsequent lines this
field is absent.
@end itemize

This header line is followed by the following information at least once for
each commit:

@itemize 

@item
the author name ("author"), email ("author-mail"), time ("author-time"), and
time zone ("author-tz"); similarly for committer.

@item
the filename in the commit that the line is attributed to.

@item
the first line of the commit log message ("summary").
@end itemize

The contents of the actual line is output after the above header, prefixed
by a TAB. This is to allow adding more header elements later.

The porcelain format generally suppresses commit information that has
already been seen. For example, two lines that are blamed to the same commit
will both be shown, but the details for that commit will be shown only
once. This is more efficient, but may require more state be kept by the
reader. The @samp{--line-porcelain} option can be used to output full commit
information for each line, allowing simpler (but less efficient)  usage
like:

@example
# count the number of lines attributed to each author
git blame --line-porcelain file |
sed -n 's/^author //p' |
sort | uniq -c | sort -rn
@end example

@noindent

@chapheading SPECIFYING RANGES

Unlike @emph{git blame} and @emph{git annotate} in older versions of git, the extent
of the annotation can be limited to both line ranges and revision
ranges. The @samp{-L} option, which limits annotation to a range of lines, may be
specified multiple times.

When you are interested in finding the origin for lines 40-60 for file
@samp{foo}, you can use the @samp{-L} option like so (they mean the same thing — both
ask for 21 lines starting at line 40):

@example
git blame -L 40,60 foo
git blame -L 40,+21 foo
@end example

Also you can use a regular expression to specify the line range:

@example
git blame -L '/^sub hello @{/,/^@}$/' foo
@end example

which limits the annotation to the body of the @samp{hello} subroutine.

When you are not interested in changes older than version v2.6.18, or
changes older than 3 weeks, you can use revision range specifiers similar to
@emph{git rev-list}:

@example
git blame v2.6.18.. -- foo
git blame --since=3.weeks -- foo
@end example

When revision range specifiers are used to limit the annotation, lines that
have not changed since the range boundary (either the commit v2.6.18 or the
most recent commit that is more than 3 weeks old in the above example) are
blamed for that range boundary commit.

A particularly useful way is to see if an added file has lines created by
copy-and-paste from existing files.  Sometimes this indicates that the
developer was being sloppy and did not refactor the code properly.  You can
first find the commit that introduced the file with:

@example
git log --diff-filter=A --pretty=short -- foo
@end example

and then annotate the change between the commit and its parents, using
@samp{commit^!} notation:

@example
git blame -C -C -f $commit^! -- foo
@end example

@noindent

@chapheading INCREMENTAL OUTPUT

When called with @samp{--incremental} option, the command outputs the result as
it is built.  The output generally will talk about lines touched by more
recent commits first (i.e. the lines will be annotated out of order) and is
meant to be used by interactive viewers.

The output format is similar to the Porcelain format, but it does not
contain the actual lines from the file that is being annotated.

@enumerate 

@item
Each blame entry always starts with a line of:

@example
<40-byte hex sha1> <sourceline> <resultline> <num_lines>
@end example

Line numbers count from 1.

@item
The first time that a commit shows up in the stream, it has various other
information about it printed out with a one-word tag at the beginning of
each line describing the extra commit information (author, email, committer,
dates, summary, etc.).

@item
Unlike the Porcelain format, the filename information is always given and
terminates the entry:

@example
"filename" <whitespace-quoted-filename-goes-here>
@end example

and thus it is really quite easy to parse for some line- and word-oriented
parser (which should be quite natural for most scripting languages).

@quotation

@strong{Note}

For people who do parsing: to make it more robust, just ignore any lines
between the first and last one ("<sha1>" and "filename" lines)  where you do
not recognize the tag words (or care about that particular one) at the
beginning of the "extended information" lines. That way, if there is ever
added information (like the commit encoding or extended commit commentary),
a blame viewer will not care.
@end quotation
@end enumerate

@noindent

@chapheading MAPPING AUTHORS

See gitmailmap(5).

@noindent

@chapheading SEE ALSO

git-annotate(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-branch,,,Top
@chapheading Name

git-branch — List, create, or delete branches

@noindent

@chapheading Synopsis

@display
git branch [--color[=<when>] | --no-color] [--show-current]
        [-v [--abbrev=<n> | --no-abbrev]]
        [--column[=<options>] | --no-column] [--sort=<key>]
        [--merged [<commit>]] [--no-merged [<commit>]]
        [--contains [<commit>]] [--no-contains [<commit>]]
        [--points-at <object>] [--format=<format>]
        [(-r | --remotes) | (-a | --all)]
        [--list] [<pattern>…]
git branch [--track | --no-track] [-f] <branchname> [<start-point>]
git branch (--set-upstream-to=<upstream> | -u <upstream>) [<branchname>]
git branch --unset-upstream [<branchname>]
git branch (-m | -M) [<oldbranch>] <newbranch>
git branch (-c | -C) [<oldbranch>] <newbranch>
git branch (-d | -D) [-r] <branchname>…
git branch --edit-description [<branchname>]
@end display


@noindent

@chapheading DESCRIPTION

If @samp{--list} is given, or if there are no non-option arguments, existing
branches are listed; the current branch will be highlighted in green and
marked with an asterisk.  Any branches checked out in linked worktrees will
be highlighted in cyan and marked with a plus sign. Option @samp{-r} causes the
remote-tracking branches to be listed, and option @samp{-a} shows both local and
remote branches.

If a @samp{<pattern>} is given, it is used as a shell wildcard to restrict the
output to matching branches. If multiple patterns are given, a branch is
shown if it matches any of the patterns.

Note that when providing a @samp{<pattern>}, you must use @samp{--list}; otherwise the
command may be interpreted as branch creation.

With @samp{--contains}, shows only the branches that contain the named commit (in
other words, the branches whose tip commits are descendants of the named
commit), @samp{--no-contains} inverts it. With @samp{--merged}, only branches merged
into the named commit (i.e. the branches whose tip commits are reachable
from the named commit) will be listed.  With @samp{--no-merged} only branches not
merged into the named commit will be listed.  If the <commit> argument is
missing it defaults to @samp{HEAD} (i.e. the tip of the current branch).

The command’s second form creates a new branch head named <branchname> which
points to the current @samp{HEAD}, or <start-point> if given. As a special case,
for <start-point>, you may use @samp{"A...B"} as a shortcut for the merge base of
@samp{A} and @samp{B} if there is exactly one merge base. You can leave out at most
one of @samp{A} and @samp{B}, in which case it defaults to @samp{HEAD}.

Note that this will create the new branch, but it will not switch the
working tree to it; use "git switch <newbranch>" to switch to the new
branch.

When a local branch is started off a remote-tracking branch, Git sets up the
branch (specifically the @samp{branch.<name>.remote} and @samp{branch.<name>.merge}
configuration entries) so that @emph{git pull} will appropriately merge from the
remote-tracking branch. This behavior may be changed via the global
@samp{branch.autoSetupMerge} configuration flag. That setting can be overridden
by using the @samp{--track} and @samp{--no-track} options, and changed later using
@samp{git branch --set-upstream-to}.

With a @samp{-m} or @samp{-M} option, <oldbranch> will be renamed to <newbranch>.  If
<oldbranch> had a corresponding reflog, it is renamed to match <newbranch>,
and a reflog entry is created to remember the branch renaming. If
<newbranch> exists, -M must be used to force the rename to happen.

The @samp{-c} and @samp{-C} options have the exact same semantics as @samp{-m} and @samp{-M},
except instead of the branch being renamed, it will be copied to a new name,
along with its config and reflog.

With a @samp{-d} or @samp{-D} option, @samp{<branchname>} will be deleted.  You may specify
more than one branch for deletion.  If the branch currently has a reflog
then the reflog will also be deleted.

Use @samp{-r} together with @samp{-d} to delete remote-tracking branches. Note, that
it only makes sense to delete remote-tracking branches if they no longer
exist in the remote repository or if @emph{git fetch} was configured not to fetch
them again. See also the @emph{prune} subcommand of git-remote(1) for a
way to clean up all obsolete remote-tracking branches.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-d} 
@itemx  @samp{--delete} 
Delete a branch. The branch must be fully merged in its upstream branch, or
in @samp{HEAD} if no upstream was set with @samp{--track} or @samp{--set-upstream-to}.

@item  @samp{-D} 
Shortcut for @samp{--delete --force}.

@item  @samp{--create-reflog} 
Create the branch’s reflog.  This activates recording of all changes made to
the branch ref, enabling use of date based sha1 expressions such as
"<branchname>@@@{yesterday@}".  Note that in non-bare repositories, reflogs
are usually enabled by default by the @samp{core.logAllRefUpdates} config
option.  The negated form @samp{--no-create-reflog} only overrides an earlier
@samp{--create-reflog}, but currently does not negate the setting of
@samp{core.logAllRefUpdates}.

@item  @samp{-f} 
@itemx  @samp{--force} 
Reset <branchname> to <startpoint>, even if <branchname> exists
already. Without @samp{-f}, @emph{git branch} refuses to change an existing branch.
In combination with @samp{-d} (or @samp{--delete}), allow deleting the branch
irrespective of its merged status, or whether it even points to a valid
commit. In combination with @samp{-m} (or @samp{--move}), allow renaming the branch
even if the new branch name already exists, the same applies for @samp{-c} (or
@samp{--copy}).

@item  @samp{-m} 
@itemx  @samp{--move} 
Move/rename a branch and the corresponding reflog.

@item  @samp{-M} 
Shortcut for @samp{--move --force}.

@item  @samp{-c} 
@itemx  @samp{--copy} 
Copy a branch and the corresponding reflog.

@item  @samp{-C} 
Shortcut for @samp{--copy --force}.

@item  @samp{--color[=<when>]} 
Color branches to highlight current, local, and remote-tracking branches.
The value must be always (the default), never, or auto.

@item  @samp{--no-color} 
Turn off branch colors, even when the configuration file gives the default
to color output.  Same as @samp{--color=never}.

@item  @samp{-i} 
@itemx  @samp{--ignore-case} 
Sorting and filtering branches are case insensitive.

@item  @samp{--column[=<options>]} 
@itemx  @samp{--no-column} 
Display branch listing in columns. See configuration variable
@samp{column.branch} for option syntax. @samp{--column} and @samp{--no-column} without
options are equivalent to @emph{always} and @emph{never} respectively.

This option is only applicable in non-verbose mode.

@item  @samp{-r} 
@itemx  @samp{--remotes} 
List or delete (if used with -d) the remote-tracking branches.  Combine with
@samp{--list} to match the optional pattern(s).

@item  @samp{-a} 
@itemx  @samp{--all} 
List both remote-tracking branches and local branches.  Combine with
@samp{--list} to match optional pattern(s).

@item  @samp{-l} 
@itemx  @samp{--list} 
List branches.  With optional @samp{<pattern>...}, e.g. @samp{git branch --list
'maint-*'}, list only the branches that match the pattern(s).

@item  @samp{--show-current} 
Print the name of the current branch. In detached HEAD state, nothing is
printed.

@item  @samp{-v} 
@itemx  @samp{-vv} 
@itemx  @samp{--verbose} 
When in list mode, show sha1 and commit subject line for each head, along
with relationship to upstream branch (if any). If given twice, print the
path of the linked worktree (if any) and the name of the upstream branch, as
well (see also @samp{git remote show <remote>}).  Note that the current
worktree’s HEAD will not have its path printed (it will always be your
current directory).

@item  @samp{-q} 
@itemx  @samp{--quiet} 
Be more quiet when creating or deleting a branch, suppressing non-error
messages.

@item  @samp{--abbrev=<n>} 
In the verbose listing that show the commit object name, show the shortest
prefix that is at least @emph{<n>} hexdigits long that uniquely refers the
object.  The default value is 7 and can be overridden by the @samp{core.abbrev}
config option.

@item  @samp{--no-abbrev} 
Display the full sha1s in the output listing rather than abbreviating them.

@item  @samp{-t} 
@itemx  @samp{--track} 
When creating a new branch, set up @samp{branch.<name>.remote} and
@samp{branch.<name>.merge} configuration entries to mark the start-point branch
as "upstream" from the new branch. This configuration will tell git to show
the relationship between the two branches in @samp{git status} and @samp{git branch
-v}. Furthermore, it directs @samp{git pull} without arguments to pull from the
upstream when the new branch is checked out.

This behavior is the default when the start point is a remote-tracking
branch.  Set the branch.autoSetupMerge configuration variable to @samp{false} if
you want @samp{git switch}, @samp{git checkout} and @samp{git branch} to always behave as
if @samp{--no-track} were given. Set it to @samp{always} if you want this behavior
when the start-point is either a local or remote-tracking branch.

@item  @samp{--no-track} 
Do not set up "upstream" configuration, even if the branch.autoSetupMerge
configuration variable is true.

@item  @samp{--set-upstream} 
As this option had confusing syntax, it is no longer supported.  Please use
@samp{--track} or @samp{--set-upstream-to} instead.

@item  @samp{-u <upstream>} 
@itemx  @samp{--set-upstream-to=<upstream>} 
Set up <branchname>'s tracking information so <upstream> is considered
<branchname>'s upstream branch. If no <branchname> is specified, then it
defaults to the current branch.

@item  @samp{--unset-upstream} 
Remove the upstream information for <branchname>. If no branch is specified
it defaults to the current branch.

@item  @samp{--edit-description} 
Open an editor and edit the text to explain what the branch is for, to be
used by various other commands (e.g. @samp{format-patch}, @samp{request-pull}, and
@samp{merge} (if enabled)). Multi-line explanations may be used.

@item  @samp{--contains [<commit>]} 
Only list branches which contain the specified commit (HEAD if not
specified). Implies @samp{--list}.

@item  @samp{--no-contains [<commit>]} 
Only list branches which don’t contain the specified commit (HEAD if not
specified). Implies @samp{--list}.

@item  @samp{--merged [<commit>]} 
Only list branches whose tips are reachable from the specified commit (HEAD
if not specified). Implies @samp{--list}.

@item  @samp{--no-merged [<commit>]} 
Only list branches whose tips are not reachable from the specified commit
(HEAD if not specified). Implies @samp{--list}.

@item  <branchname> 
The name of the branch to create or delete.  The new branch name must pass
all checks defined by git-check-ref-format(1).  Some of these checks
may restrict the characters allowed in a branch name.

@item  <start-point> 
The new branch head will point to this commit.  It may be given as a branch
name, a commit-id, or a tag.  If this option is omitted, the current HEAD
will be used instead.

@item  <oldbranch> 
The name of an existing branch to rename.

@item  <newbranch> 
The new name for an existing branch. The same restrictions as for
<branchname> apply.

@item  @samp{--sort=<key>} 
Sort based on the key given. Prefix @samp{-} to sort in descending order of the
value. You may use the --sort=<key> option multiple times, in which case the
last key becomes the primary key. The keys supported are the same as those
in @samp{git for-each-ref}. Sort order defaults to the value configured for the
@samp{branch.sort} variable if exists, or to sorting based on the full refname
(including @samp{refs/...} prefix). This lists detached HEAD (if present) first,
then local branches and finally remote-tracking branches. See
git-config(1).

@item  @samp{--points-at <object>} 
Only list branches of the given object.

@item  @samp{--format <format>} 
A string that interpolates @samp{%(fieldname)} from a branch ref being shown and
the object it points at.  The format is the same as that of
git-for-each-ref(1).
@end table

@noindent

@chapheading CONFIGURATION

@samp{pager.branch} is only respected when listing branches, i.e., when @samp{--list}
is used or implied. The default is to use a pager.  See
git-config(1).

@noindent

@chapheading EXAMPLES

@table @asis

@item  Start development from a known tag 
@example
$ git clone git://git.kernel.org/pub/scm/.../linux-2.6 my2.6
$ cd my2.6
$ git branch my2.6.14 v2.6.14   (1)
$ git switch my2.6.14
@end example


@table @asis

@item @pxref{CO1-1,,(1)}
This step and the next one could be combined into a single step with
"checkout -b my2.6.14 v2.6.14".
@end table

@item  Delete an unneeded branch 
@example
$ git clone git://git.kernel.org/.../git.git my.git
$ cd my.git
$ git branch -d -r origin/todo origin/html origin/man   (1)
$ git branch -D test                                    (2)
@end example


@table @asis

@item @pxref{CO2-1,,(1)}
Delete the remote-tracking branches "todo", "html" and "man". The next
@emph{fetch} or @emph{pull} will create them again unless you configure them not to.
See git-fetch(1).

@item @pxref{CO2-2,,(2)}
Delete the "test" branch even if the "master" branch (or whichever branch is
currently checked out) does not have all commits from the test branch.
@end table

@item  Listing branches from a specific remote 
@example
$ git branch -r -l '<remote>/<pattern>'                 (1)
$ git for-each-ref 'refs/remotes/<remote>/<pattern>'    (2)
@end example


@table @asis

@item @pxref{CO3-1,,(1)}
Using @samp{-a} would conflate <remote> with any local branches you happen to
have been prefixed with the same <remote> pattern.

@item @pxref{CO3-2,,(2)}
@samp{for-each-ref} can take a wide range of options. See
git-for-each-ref(1)
@end table
@end table

Patterns will normally need quoting.

@noindent

@chapheading NOTES

If you are creating a branch that you want to switch to immediately, it is
easier to use the "git switch" command with its @samp{-c} option to do the same
thing with a single command.

The options @samp{--contains}, @samp{--no-contains}, @samp{--merged} and @samp{--no-merged}
serve four related but different purposes:

@itemize 

@item
@samp{--contains <commit>} is used to find all branches which will need special
attention if <commit> were to be rebased or amended, since those branches
contain the specified <commit>.

@item
@samp{--no-contains <commit>} is the inverse of that, i.e. branches that don’t
contain the specified <commit>.

@item
@samp{--merged} is used to find all branches which can be safely deleted, since
those branches are fully contained by HEAD.

@item
@samp{--no-merged} is used to find branches which are candidates for merging into
HEAD, since those branches are not fully contained by HEAD.
@end itemize

複数の @samp{--contains} フィルターと @samp{--no-contains} フィルターを組み合わせる場合、少なくとも1つの @samp{--contains}
コミットを含み、 @samp{--no-contains} コミットを含まない参照のみが表示されます。

複数の @samp{--merged} フィルターと @samp{--no-merged} フィルターを組み合わせると、少なくとも1つの @samp{--merged}
コミットから到達可能で、 @samp{--no-merged} コミットのいずれからも到達できない参照のみが表示されます。

@noindent

@chapheading SEE ALSO

git-check-ref-format(1), git-fetch(1),
git-remote(1),
@uref{user-manual.html#what-is-a-branch,“Understanding history: What is a branch?”} in the Git User’s Manual.

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-bugreport,,,Top
@chapheading Name

git-bugreport — ユーザーがバグ報告を提出するための情報を収集する

@noindent

@chapheading Synopsis

@display
git bugreport [(-o | --output-directory) <path>] [(-s | --suffix) <format>]
@end display


@noindent

@chapheading DESCRIPTION

ユーザーのマシン、Gitクライアント、リポジトリの状態に関する情報、およびユーザーが観察した動作に関する情報の入力書式を(例えば、Gitメーリングリストに観察されたバグを報告するために)、ユーザーが共有できる単一のテキストファイルとして獲得します。

以下の情報がユーザーに要求されます:

@itemize 

@item
再現手順

@item
期待する動作

@item
実際の動作
@end itemize

以下の情報が自動的に収集されます:

@itemize 

@item
@emph{git version --build-options}

@item
uname sysname と release と version と machine strings

@item
コンパイラ指定情報文字列

@item
有効なフックのリスト

@item
$SHELL
@end itemize

このツールは、通常のGitセットアッププロセスを介して呼び出されます。つまり、関連する構成ファイルが読み取れない場合など、起動できない場合があります。
この種のシナリオでは、手動で助けを求めるときに、上記の種類の情報を手動で収集すると役立つ場合があります。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-o <path>} 
@itemx  @samp{--output-directory <path>} 
結果のバグレポートファイルを現在のディレクトリではなく @samp{<path>} に配置します。

@item  @samp{-s <format>} 
@itemx  @samp{--suffix <format>} 
バグレポート名の代替サフィックスを指定して、 @emph{git-bugreport-<formatted suffix>} という名前のファイルを作成します。
これは、 strftime(3) 形式の文字列の形式をとる必要があります。現在の現地時間が使用されます。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-bundle,,,Top
@chapheading Name

git-bundle — Move objects and refs by archive

@noindent

@chapheading Synopsis

@display
git bundle create [-q | --quiet | --progress | --all-progress] [--all-progress-implied]
                    [--version=<version>] <file> <git-rev-list-args>
git bundle verify [-q | --quiet] <file>
git bundle list-heads <file> [<refname>…]
git bundle unbundle [--progress] <file> [<refname>…]
@end display


@noindent

@chapheading DESCRIPTION

Create, unpack, and manipulate "bundle" files. Bundles are used for the
"offline" transfer of Git objects without an active "server" sitting on the
other side of the network connection.

They can be used to create both incremental and full backups of a
repository, and to relay the state of the references in one repository to
another.

Git commands that fetch or otherwise "read" via protocols such as @samp{ssh://}
and @samp{https://} can also operate on bundle files. It is possible
git-clone(1) a new repository from a bundle, to use
git-fetch(1) to fetch from one, and to list the references contained
within it with git-ls-remote(1). There’s no corresponding "write"
support, i.e.a @emph{git push} into a bundle is not supported.

See the "EXAMPLES" section below for examples of how to use bundles.

@noindent

@chapheading BUNDLE FORMAT

Bundles are @samp{.pack} files (see git-pack-objects(1)) with a header
indicating what references are contained within the bundle.

Like the the packed archive format itself bundles can either be
self-contained, or be created using exclusions.  See the "OBJECT
PREREQUISITES" section below.

Bundles created using revision exclusions are "thin packs" created using the
@samp{--thin} option to git-pack-objects(1), and unbundled using the
@samp{--fix-thin} option to git-index-pack(1).

There is no option to create a "thick pack" when using revision exclusions,
users should not be concerned about the difference. By using "thin packs"
bundles created using exclusions are smaller in size. That they’re "thin"
under the hood is merely noted here as a curiosity, and as a reference to
other documentation

See @uref{technical/bundle-format.html,the @samp{bundle-format} documentation} for
more details and the discussion of "thin pack" in
@uref{technical/pack-format.html,the pack format documentation} for further
details.

@noindent

@chapheading OPTIONS

@table @asis

@item  create [options] <file> <git-rev-list-args> 
Used to create a bundle named @emph{file}.  This requires the
@emph{<git-rev-list-args>} arguments to define the bundle contents.  @emph{options}
contains the options specific to the @emph{git bundle create} subcommand.

@item  verify <file> 
Used to check that a bundle file is valid and will apply cleanly to the
current repository.  This includes checks on the bundle format itself as
well as checking that the prerequisite commits exist and are fully linked in
the current repository.  @emph{git bundle} prints a list of missing commits, if
any, and exits with a non-zero status.

@item  list-heads <file> 
Lists the references defined in the bundle.  If followed by a list of
references, only references matching those given are printed out.

@item  unbundle <file> 
Passes the objects in the bundle to @emph{git index-pack} for storage in the
repository, then prints the names of all defined references. If a list of
references is given, only references matching those in the list are
printed. This command is really plumbing, intended to be called only by @emph{git
fetch}.

@item  <git-rev-list-args> 
A list of arguments, acceptable to @emph{git rev-parse} and @emph{git rev-list} (and
containing a named ref, see SPECIFYING REFERENCES below), that specifies the
specific objects and references to transport.  For example,
@samp{master~10..master} causes the current master reference to be packaged along
with all objects added since its 10th ancestor commit.  There is no explicit
limit to the number of references and objects that may be packaged.

@item  [<refname>…] 
A list of references used to limit the references reported as
available. This is principally of use to @emph{git fetch}, which expects to
receive only those references asked for and not necessarily everything in
the pack (in this case, @emph{git bundle} acts like @emph{git fetch-pack}).

@item  @samp{--progress} 
Progress status is reported on the standard error stream by default when it
is attached to a terminal, unless -q is specified. This flag forces progress
status even if the standard error stream is not directed to a terminal.

@item  @samp{--all-progress} 
When --stdout is specified then progress report is displayed during the
object count and compression phases but inhibited during the write-out
phase. The reason is that in some cases the output stream is directly linked
to another command which may wish to display progress status of its own as
it processes incoming pack data.  This flag is like --progress except that
it forces progress report for the write-out phase as well even if --stdout
is used.

@item  @samp{--all-progress-implied} 
This is used to imply --all-progress whenever progress display is
activated.  Unlike --all-progress this flag doesn’t actually force any
progress display by itself.

@item  @samp{--version=<version>} 
Specify the bundle version.  Version 2 is the older format and can only be
used with SHA-1 repositories; the newer version 3 contains capabilities that
permit extensions. The default is the oldest supported format, based on the
hash algorithm in use.

@item  @samp{-q} 
@itemx  @samp{--quiet} 
This flag makes the command not to report its progress on the standard error
stream.
@end table

@noindent

@chapheading SPECIFYING REFERENCES

Revisions must accompanied by reference names to be packaged in a bundle.

More than one reference may be packaged, and more than one set of
prerequisite objects can be specified.  The objects packaged are those not
contained in the union of the prerequisites.

The @emph{git bundle create} command resolves the reference names for you using
the same rules as @samp{git rev-parse --abbrev-ref=loose}. Each prerequisite can
be specified explicitly (e.g. @samp{^master~10}), or implicitly
(e.g. @samp{master~10..master}, @samp{--since=10.days.ago master}).

All of these simple cases are OK (assuming we have a "master" and "next"
branch):

@example
$ git bundle create master.bundle master
$ echo master | git bundle create master.bundle --stdin
$ git bundle create master-and-next.bundle master next
$ (echo master; echo next) | git bundle create master-and-next.bundle --stdin
@end example


And so are these (and the same but omitted @samp{--stdin} examples):

@example
$ git bundle create recent-master.bundle master~10..master
$ git bundle create recent-updates.bundle master~10..master next~5..next
@end example


A revision name or a range whose right-hand-side cannot be resolved to a
reference is not accepted:

@example
$ git bundle create HEAD.bundle $(git rev-parse HEAD)
fatal: Refusing to create empty bundle.
$ git bundle create master-yesterday.bundle master~10..master~5
fatal: Refusing to create empty bundle.
@end example


@noindent

@chapheading OBJECT PREREQUISITES

When creating bundles it is possible to create a self-contained bundle that
can be unbundled in a repository with no common history, as well as
providing negative revisions to exclude objects needed in the earlier parts
of the history.

Feeding a revision such as @samp{new} to @samp{git bundle create} will create a bundle
file that contains all the objects reachable from the revision @samp{new}. That
bundle can be unbundled in any repository to obtain a full history that
leads to the revision @samp{new}:

@example
$ git bundle create full.bundle new
@end example


A revision range such as @samp{old..new} will produce a bundle file that will
require the revision @samp{old} (and any objects reachable from it)  to exist for
the bundle to be "unbundle"-able:

@example
$ git bundle create full.bundle old..new
@end example


A self-contained bundle without any prerequisites can be extracted into
anywhere, even into an empty repository, or be cloned from (i.e., @samp{new}, but
not @samp{old..new}).

It is okay to err on the side of caution, causing the bundle file to contain
objects already in the destination, as these are ignored when unpacking at
the destination.

If you want to match @samp{git clone --mirror}, which would include your refs
such as @samp{refs/remotes/*}, use @samp{--all}.  If you want to provide the same set
of refs that a clone directly from the source repository would get, use
@samp{--branches --tags} for the @samp{<git-rev-list-args>}.

The @emph{git bundle verify} command can be used to check whether your recipient
repository has the required prerequisite commits for a bundle.

@noindent

@chapheading EXAMPLES

Assume you want to transfer the history from a repository R1 on machine A to
another repository R2 on machine B.  For whatever reason, direct connection
between A and B is not allowed, but we can move data from A to B via some
mechanism (CD, email, etc.).  We want to update R2 with development made on
the branch master in R1.

To bootstrap the process, you can first create a bundle that does not have
any prerequisites. You can use a tag to remember up to what commit you last
processed, in order to make it easy to later update the other repository
with an incremental bundle:

@example
machineA$ cd R1
machineA$ git bundle create file.bundle master
machineA$ git tag -f lastR2bundle master
@end example


Then you transfer file.bundle to the target machine B. Because this bundle
does not require any existing object to be extracted, you can create a new
repository on machine B by cloning from it:

@example
machineB$ git clone -b master /home/me/tmp/file.bundle R2
@end example


This will define a remote called "origin" in the resulting repository that
lets you fetch and pull from the bundle. The $GIT_DIR/config file in R2 will
have an entry like this:

@example
[remote "origin"]
    url = /home/me/tmp/file.bundle
    fetch = refs/heads/*:refs/remotes/origin/*
@end example


To update the resulting mine.git repository, you can fetch or pull after
replacing the bundle stored at /home/me/tmp/file.bundle with incremental
updates.

After working some more in the original repository, you can create an
incremental bundle to update the other repository:

@example
machineA$ cd R1
machineA$ git bundle create file.bundle lastR2bundle..master
machineA$ git tag -f lastR2bundle master
@end example


You then transfer the bundle to the other machine to replace
/home/me/tmp/file.bundle, and pull from it.

@example
machineB$ cd R2
machineB$ git pull
@end example


If you know up to what commit the intended recipient repository should have
the necessary objects, you can use that knowledge to specify the
prerequisites, giving a cut-off point to limit the revisions and objects
that go in the resulting bundle. The previous example used the lastR2bundle
tag for this purpose, but you can use any other options that you would give
to the git-log(1) command. Here are more examples:

You can use a tag that is present in both:

@example
$ git bundle create mybundle v1.0.0..master
@end example


You can use a prerequisite based on time:

@example
$ git bundle create mybundle --since=10.days master
@end example


You can use the number of commits:

@example
$ git bundle create mybundle -10 master
@end example


You can run @samp{git-bundle verify} to see if you can extract from a bundle that
was created with a prerequisite:

@example
$ git bundle verify mybundle
@end example


This will list what commits you must have in order to extract from the
bundle and will error out if you do not have them.

A bundle from a recipient repository’s point of view is just like a regular
repository which it fetches or pulls from. You can, for example, map
references when fetching:

@example
$ git fetch mybundle master:localRef
@end example


You can also see what references it offers:

@example
$ git ls-remote mybundle
@end example


@noindent

@chapheading GIT

Part of the git(1) suite

@node git-cat-file,,,Top
@chapheading Name

git-cat-file — Provide content or type and size information for repository objects

@noindent

@chapheading Synopsis

@display
git cat-file (-t [--allow-unknown-type]| -s [--allow-unknown-type]| -e | -p | <type> | --textconv | --filters ) [--path=<path>] <object>
git cat-file (--batch[=<format>] | --batch-check[=<format>]) [ --textconv | --filters ] [--follow-symlinks]
@end display


@noindent

@chapheading DESCRIPTION

In its first form, the command provides the content or the type of an object
in the repository. The type is required unless @samp{-t} or @samp{-p} is used to find
the object type, or @samp{-s} is used to find the object size, or @samp{--textconv} or
@samp{--filters} is used (which imply type "blob").

In the second form, a list of objects (separated by linefeeds) is provided
on stdin, and the SHA-1, type, and size of each object is printed on
stdout. The output format can be overridden using the optional @samp{<format>}
argument. If either @samp{--textconv} or @samp{--filters} was specified, the input is
expected to list the object names followed by the path name, separated by a
single whitespace, so that the appropriate drivers can be determined.

@noindent

@chapheading OPTIONS

@table @asis

@item  <object> 
The name of the object to show.  For a more complete list of ways to spell
object names, see the "SPECIFYING REVISIONS" section in
gitrevisions(7).

@item  @samp{-t} 
Instead of the content, show the object type identified by @samp{<object>}.

@item  @samp{-s} 
Instead of the content, show the object size identified by @samp{<object>}.

@item  @samp{-e} 
Exit with zero status if @samp{<object>} exists and is a valid object. If
@samp{<object>} is of an invalid format exit with non-zero and emits an error on
stderr.

@item  @samp{-p} 
Pretty-print the contents of @samp{<object>} based on its type.

@item  <type> 
Typically this matches the real type of @samp{<object>} but asking for a type
that can trivially be dereferenced from the given @samp{<object>} is also
permitted.  An example is to ask for a "tree" with @samp{<object>} being a commit
object that contains it, or to ask for a "blob" with @samp{<object>} being a tag
object that points at it.

@item  @samp{--textconv} 
Show the content as transformed by a textconv filter. In this case,
@samp{<object>} has to be of the form @samp{<tree-ish>:<path>}, or @samp{:<path>} in order
to apply the filter to the content recorded in the index at @samp{<path>}.

@item  @samp{--filters} 
Show the content as converted by the filters configured in the current
working tree for the given @samp{<path>} (i.e. smudge filters, end-of-line
conversion, etc). In this case, @samp{<object>} has to be of the form
@samp{<tree-ish>:<path>}, or @samp{:<path>}.

@item  @samp{--path=<path>} 
For use with @samp{--textconv} or @samp{--filters}, to allow specifying an object name
and a path separately, e.g. when it is difficult to figure out the revision
from which the blob came.

@item  @samp{--batch} 
@itemx  @samp{--batch=<format>} 
Print object information and contents for each object provided on stdin.
May not be combined with any other options or arguments except @samp{--textconv}
or @samp{--filters}, in which case the input lines also need to specify the path,
separated by whitespace.  See the section @samp{BATCH OUTPUT} below for details.

@item  @samp{--batch-check} 
@itemx  @samp{--batch-check=<format>} 
Print object information for each object provided on stdin.  May not be
combined with any other options or arguments except @samp{--textconv} or
@samp{--filters}, in which case the input lines also need to specify the path,
separated by whitespace.  See the section @samp{BATCH OUTPUT} below for details.

@item  @samp{--batch-all-objects} 
Instead of reading a list of objects on stdin, perform the requested batch
operation on all objects in the repository and any alternate object stores
(not just reachable objects).  Requires @samp{--batch} or @samp{--batch-check} be
specified. Note that the objects are visited in order sorted by their
hashes.

@item  @samp{--buffer} 
Normally batch output is flushed after each object is output, so that a
process can interactively read and write from @samp{cat-file}. With this option,
the output uses normal stdio buffering; this is much more efficient when
invoking @samp{--batch-check} on a large number of objects.

@item  @samp{--unordered} 
When @samp{--batch-all-objects} is in use, visit objects in an order which may be
more efficient for accessing the object contents than hash order. The exact
details of the order are unspecified, but if you do not require a specific
order, this should generally result in faster output, especially with
@samp{--batch}.  Note that @samp{cat-file} will still show each object only once, even
if it is stored multiple times in the repository.

@item  @samp{--allow-unknown-type} 
Allow @samp{-s} or @samp{-t} to query broken/corrupt objects of unknown type.

@item  @samp{--follow-symlinks} 
With @samp{--batch} or @samp{--batch-check}, follow symlinks inside the repository
when requesting objects with extended SHA-1 expressions of the form
tree-ish:path-in-tree.  Instead of providing output about the link itself,
provide output about the linked-to object.  If a symlink points outside the
tree-ish (e.g. a link to @samp{/foo} or a root-level link to @samp{../foo}), the
portion of the link which is outside the tree will be printed.

This option does not (currently) work correctly when an object in the index
is specified (e.g. @samp{:link} instead of @samp{HEAD:link}) rather than one in the
tree.

This option cannot (currently) be used unless @samp{--batch} or @samp{--batch-check}
is used.

For example, consider a git repository containing:

@example
f: a file containing "hello\n"
link: a symlink to f
dir/link: a symlink to ../f
plink: a symlink to ../f
alink: a symlink to /etc/passwd
@end example

For a regular file @samp{f}, @samp{echo HEAD:f | git cat-file --batch} would print

@example
ce013625030ba8dba906f756967f9e9ca394464a blob 6
@end example

And @samp{echo HEAD:link | git cat-file --batch --follow-symlinks} would print
the same thing, as would @samp{HEAD:dir/link}, as they both point at @samp{HEAD:f}.

Without @samp{--follow-symlinks}, these would print data about the symlink
itself.  In the case of @samp{HEAD:link}, you would see

@example
4d1ae35ba2c8ec712fa2a379db44ad639ca277bd blob 1
@end example

Both @samp{plink} and @samp{alink} point outside the tree, so they would respectively
print:

@example
symlink 4
../f
@end example

@example
symlink 11
/etc/passwd
@end example
@end table

@noindent

@chapheading OUTPUT

If @samp{-t} is specified, one of the @samp{<type>}.

If @samp{-s} is specified, the size of the @samp{<object>} in bytes.

If @samp{-e} is specified, no output, unless the @samp{<object>} is malformed.

If @samp{-p} is specified, the contents of @samp{<object>} are pretty-printed.

If @samp{<type>} is specified, the raw (though uncompressed) contents of the
@samp{<object>} will be returned.

@noindent

@chapheading BATCH OUTPUT

If @samp{--batch} or @samp{--batch-check} is given, @samp{cat-file} will read objects from
stdin, one per line, and print information about them. By default, the whole
line is considered as an object, as if it were fed to
git-rev-parse(1).

You can specify the information shown for each object by using a custom
@samp{<format>}. The @samp{<format>} is copied literally to stdout for each object,
with placeholders of the form @samp{%(atom)} expanded, followed by a newline. The
available atoms are:

@table @asis

@item  @samp{objectname} 
The full hex representation of the object name.

@item  @samp{objecttype} 
The type of the object (the same as @samp{cat-file -t} reports).

@item  @samp{objectsize} 
The size, in bytes, of the object (the same as @samp{cat-file -s} reports).

@item  @samp{objectsize:disk} 
The size, in bytes, that the object takes up on disk. See the note about
on-disk sizes in the @samp{CAVEATS} section below.

@item  @samp{deltabase} 
If the object is stored as a delta on-disk, this expands to the full hex
representation of the delta base object name.  Otherwise, expands to the
null OID (all zeroes). See @samp{CAVEATS} below.

@item  @samp{rest} 
If this atom is used in the output string, input lines are split at the
first whitespace boundary. All characters before that whitespace are
considered to be the object name; characters after that first run of
whitespace (i.e., the "rest" of the line) are output in place of the
@samp{%(rest)} atom.
@end table

If no format is specified, the default format is @samp{%(objectname)
%(objecttype) %(objectsize)}.

If @samp{--batch} is specified, the object information is followed by the object
contents (consisting of @samp{%(objectsize)} bytes), followed by a newline.

For example, @samp{--batch} without a custom format would produce:

@example
<oid> SP <type> SP <size> LF
<contents> LF
@end example


Whereas @samp{--batch-check='%(objectname) %(objecttype)'} would produce:

@example
<oid> SP <type> LF
@end example


If a name is specified on stdin that cannot be resolved to an object in the
repository, then @samp{cat-file} will ignore any custom format and print:

@example
<object> SP missing LF
@end example


If a name is specified that might refer to more than one object (an
ambiguous short sha), then @samp{cat-file} will ignore any custom format and
print:

@example
<object> SP ambiguous LF
@end example


If @samp{--follow-symlinks} is used, and a symlink in the repository points
outside the repository, then @samp{cat-file} will ignore any custom format and
print:

@example
symlink SP <size> LF
<symlink> LF
@end example


The symlink will either be absolute (beginning with a @samp{/}), or relative to
the tree root.  For instance, if dir/link points to @samp{../../foo}, then
@samp{<symlink>} will be @samp{../foo}.  @samp{<size>} is the size of the symlink in bytes.

If @samp{--follow-symlinks} is used, the following error messages will be
displayed:

@example
<object> SP missing LF
@end example


is printed when the initial symlink requested does not exist.

@example
dangling SP <size> LF
<object> LF
@end example


is printed when the initial symlink exists, but something that it
(transitive-of) points to does not.

@example
loop SP <size> LF
<object> LF
@end example


is printed for symlink loops (or any symlinks that require more than 40 link
resolutions to resolve).

@example
notdir SP <size> LF
<object> LF
@end example


is printed when, during symlink resolution, a file is used as a directory
name.

@noindent

@chapheading CAVEATS

Note that the sizes of objects on disk are reported accurately, but care
should be taken in drawing conclusions about which refs or objects are
responsible for disk usage. The size of a packed non-delta object may be
much larger than the size of objects which delta against it, but the choice
of which object is the base and which is the delta is arbitrary and is
subject to change during a repack.

Note also that multiple copies of an object may be present in the object
database; in this case, it is undefined which copy’s size or delta base will
be reported.

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-check-attr,,,Top
@chapheading Name

git-check-attr — gitattributes情報を表示

@noindent

@chapheading Synopsis

@display
git check-attr [-a | --all | <attr>…] [--] <pathname>…
git check-attr --stdin [-z] [-a | --all | <attr>…]
@end display


@noindent

@chapheading DESCRIPTION

このコマンドは、すべてのパス名について、gitattributesとしての各属性を @samp{unspecified}(未指定)または @samp{set} または
@samp{unset} であるかどうか一覧表示します。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-a, --all} 
指定されたパスに関連付けられているすべての属性を一覧表示します。 このオプションを使用すると、 @emph{unspecified}
(指定されていない)属性は出力に含まれません。

@item  @samp{--cached} 
作業ツリーを無視して、インデックス内のみに対して @samp{.gitattributes} を考慮してください。

@item  @samp{--stdin} 
コマンドラインからではなく、標準入力から1行に1つずつパス名を読み取ります。

@item  @samp{-z} 
出力形式は、マシンで解析できるように変更されます。 @samp{--stdin} も指定されている場合、入力パスは改行文字ではなくNUL文字で区切ります。

@item  @samp{--} 
先行するすべての引数を属性として解釈し、後続のすべての引数をパス名として解釈します。
@end table

@samp{--stdin} と @samp{--all} と @samp{--} のいずれも使用されていない場合、最初の引数は属性として扱われ、残りの引数はパス名として扱われます。

@noindent

@chapheading OUTPUT

出力形式: <path> COLON SP <attribute> COLON SP <info> LF

@samp{-z} が有効の場合はNULが区切り文字として使用されます: <path> NUL <attribute> NUL <info> NUL

<path>はクエリ対象のファイルのパス、 <attribute> はクエリ対象の属性、 <info> は行かのいずれかになります:

@table @asis

@item  @samp{unspecified} 
(未指定)パスにその属性が定義されていない場合。

@item  @samp{unset} 
属性がfalseとして定義されている場合。

@item  @samp{set} 
属性がtrueとして定義されている場合。

@item  <value> 
属性に値が割り当てられたとき。
@end table

バッファリングは、 git(1) の @samp{GIT_FLUSH}
オプションに記載されているように行われます。呼び出し元は、入力バッファーのオーバーフィル(overfilling)または空の出力バッファーからの読み取りによって引き起こされるデッドロックを回避する責任があります。

@noindent

@chapheading EXAMPLES

これらの例では、以下の @samp{.gitattributes} ファイルが使用されています:

@example
*.java diff=java -crlf myAttr
NoMyAttr.java !myAttr
README caveat=unspecified
@end example


@itemize 

@item
単一の属性のリスト:
@end itemize

@example
$ git check-attr diff org/example/MyClass.java
org/example/MyClass.java: diff: java
@end example


@itemize 

@item
ファイルの複数の属性の一覧表示:
@end itemize

@example
$ git check-attr crlf diff myAttr -- org/example/MyClass.java
org/example/MyClass.java: crlf: unset
org/example/MyClass.java: diff: java
org/example/MyClass.java: myAttr: set
@end example


@itemize 

@item
ファイルのすべての属性を一覧表示:
@end itemize

@example
$ git check-attr --all -- org/example/MyClass.java
org/example/MyClass.java: diff: java
org/example/MyClass.java: myAttr: set
@end example


@itemize 

@item
複数のファイルの属性を一覧表示:
@end itemize

@example
$ git check-attr myAttr -- org/example/MyClass.java org/example/NoMyAttr.java
org/example/MyClass.java: myAttr: set
org/example/NoMyAttr.java: myAttr: unspecified
@end example


@itemize 

@item
すべての値が等しく明確であるわけではありません:
@end itemize

@example
$ git check-attr caveat README
README: caveat: unspecified
@end example


@noindent

@chapheading SEE ALSO

gitattributes(5).

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-check-ignore,,,Top
@chapheading Name

git-check-ignore — gitignoreや除外ファイルのデバッグ

@noindent

@chapheading Synopsis

@display
git check-ignore [<options>] <pathname>…
git check-ignore [<options>] --stdin
@end display


@noindent

@chapheading DESCRIPTION

コマンドラインまたは @samp{--stdin} を介してファイルから指定されたパス名ごとに、ファイルが @samp{.gitignore}
(またはexcludeメカニズムへの他の入力ファイル)によって除外されているかどうかを確認し、除外されている場合はそのパスを出力します。

デフォルトでは、追跡中のファイル(tracked files)は除外ルールの対象ではないため、まったく表示されません。但し、 ‘--no-index’
もご覧下さい。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-q, --quiet} 
何も出力せず、終了ステータスを設定するだけです。 これは、単一のパス名でのみ有効です。

@item  @samp{-v, --verbose} 
除外されたパスを出力する代わりに、除外パターンに一致するパスごとに、パスと一緒に除外パターンを出力します。(通常、除外パターンに一致することはパスが除外されることを意味しますが、パターンが
@samp{!} で始まる場合、それは否定パターンであり、一致することはパスが除外されないことを意味します。)

除外ソース内および除外ソース間の優先ルールについては、 gitignore(5) を参照してください。

@item  @samp{--stdin} 
コマンドラインからではなく、標準入力から1行に1つずつパス名を読み取ります。

@item  @samp{-z} 
出力フォーマットは、マシン解析可能になるように変更されます(以下を参照)。 @samp{--stdin}
も指定されている場合、入力パスは改行文字ではなくNUL文字で区切られます。

@item  @samp{-n, --non-matching} 
どのパターンにも一致しないパスを表示します。これは、 @samp{--verbose}
が有効になっている場合にのみ意味があります。有効になっていないと、パターンに一致するパスと一致しないパスを区別できません。

@item  @samp{--no-index} 
チェックを行うときにインデックスを調べません。これは、例えば @samp{git add .}
で追跡されたパスが、ユーザーの期待通りにルールで無視されなかった場合のデバッグに使用できます。また、以前に @samp{git add -f}
で追加したパスにマッチするように、否定を含むパターンを開発するときにも使用できます。
@end table

@noindent

@chapheading OUTPUT

デフォルトでは、指定されたパス名のうち無視パターンに一致するパスが1行に1つずつ出力されます。特定のパスに一致する無視パターンがない場合、そのパスについては何も出力されません。これは、そのパスが無視されないことを意味します。

@samp{--verbose} が指定されている場合、出力の各行は以下の形式になります:

<source> <COLON> <linenum> <COLON> <pattern> <HT> <pathname>

<pathname> はクエリ対象のファイルのパス、 <pattern> は一致するパターン、 <source> はパターンのソースファイル、
<linenum> はそのソース内のパターンの行番号です。 パターンに @samp{!} 接頭辞または @samp{/}
接尾辞が含まれている場合、それは出力でも保持されます。 <source> は、 @samp{core.excludesFile}
で構成されたファイルを参照する場合は絶対パス、 @samp{.git/info/exclude}
またはディレクトリごとの除外ファイルを参照する場合はリポジトリルートを基準とします。

@samp{-z} が指定されている場合、出力のパス名はヌル文字で区切られます。 @samp{--verbose}
も指定されている場合、コロンとハードタブの代わりにヌル文字も使用されます:

<source> <NULL> <linenum> <NULL> <pattern> <NULL> <pathname> <NULL>

@samp{-n} または @samp{--non-matching} が指定されている場合、一致しないパス名も出力されます。その場合、 <pathname>
を除く各出力レコードのすべてのフィールドが空になります。これは、非対話的に実行する場合に役立ちます。これにより、ファイル達を長時間実行されるチェック無視プロセスのSTDINに段階的にストリーミングでき、これらのファイルごとに、STDOUTはそのファイルがパターンに一致するかどうかを示します。
(このオプションがないと、特定のファイルの出力がないということは、どのパターンとも一致しなかったのか、出力がまだ生成されていないのかを判断することはできません。)

バッファリングは、 git(1) の @samp{GIT_FLUSH}
オプションに記載されているように行われます。呼び出し元は、入力バッファーのオーバーフィルまたは空の出力バッファーからの読み取りによって引き起こされるデッドロックを回避する責任があります。

@noindent

@chapheading EXIT STATUS

@table @asis

@item  0 
提供されたパスの1つ以上が無視されます。

@item  1 
提供されたパスはどれも無視されません。

@item  128 
致命的なエラーが発生しました。
@end table

@noindent

@chapheading SEE ALSO

gitignore(5) git-config(1) git-ls-files(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-check-mailmap,,,Top
@chapheading Name

git-check-mailmap — 連絡先(contacts)の、正式な名前と電子メールアドレスを表示

@noindent

@chapheading Synopsis

@display
git check-mailmap [<options>] <contact>…
@end display


@noindent

@chapheading DESCRIPTION

コマンドライン指定または、(@samp{--stdin} を使用する場合)標準入力からの各 “Name <user@@host>” または
“<user@@host>” について、その人の正規名と電子メールアドレス(以下 "Mapping Authors"
参照)を検索します。見つかった場合は、それらを印刷します。それ以外の場合は、入力をそのまま出力します。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--stdin} 
コマンドラインで指定された連絡先(contacts)を消費後、標準入力から連絡先(contacts)を1行に1つずつ読み取ります。
@end table

@noindent

@chapheading OUTPUT

各連絡先(contact)ごとに、改行で終了する1行が出力されます。 名前が @emph{mailmap} に提供または認識されている場合、 “Name
<user@@host>” が出力されます。それ以外の場合は、 “<user@@host>” のみが出力されます。

@noindent

@chapheading CONFIGURATION

カスタムの @samp{.mailmap} ターゲットファイルまたはオブジェクトを指定する方法については、 git-config(1) の
@samp{mailmap.file} と @samp{mailmap.blob} を参照してください。

@noindent

@chapheading MAPPING AUTHORS

gitmailmap(5) 参照。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-check-ref-format,,,Top
@chapheading Name

git-check-ref-format — 参照名が整形式であることを確認します

@noindent

@chapheading Synopsis

@display
git check-ref-format [--normalize]
       [--[no-]allow-onelevel] [--refspec-pattern]
       <refname>
git check-ref-format --branch <branchname-shorthand>
@end display


@noindent

@chapheading DESCRIPTION

指定の refname が受け入れ可能かどうかを確認し、受け入れられない場合はゼロ以外のステータスで終了します。

参照はGitでブランチとタグを指定するために使用されます。ブランチヘッドは @samp{refs/heads} 階層に格納され、タグはref名前空間の
@samp{refs/tags} 階層に格納されます(通常は @samp{$GIT_DIR/refs/heads} ディレクトリと @samp{$GIT_DIR/refs/tags}
ディレクトリに、または refが @samp{git gc} によってパックされている場合はファイル @samp{$GIT_DIR/packed-refs}
のエントリとしてあります)。

Gitは、参照の命名方法に以下のルールを課しています:

@enumerate 

@item
階層(ディレクトリ)グループ化のためにスラッシュ(@samp{/})を含めることができますが、スラッシュで区切られたコンポーネントは、ドット(@samp{.})で開始したり、シーケンス
@samp{.lock} で終了したりすることはできません。

@item
少なくとも1つのスラッシュ(@samp{/})が含まれている必要があります。これにより、 @samp{heads/} 、 @samp{tags/}
などのカテゴリの存在が強制されますが、実際の名前は制限されません。 @samp{--allow-onelevel}
オプションが使用されている場合、このルールは放棄されます。

@item
どこにも2つの連続したドット(@samp{..})を含めることはできません。

@item
ASCII制御文字(つまり、値が \040 未満のバイト または
\177(@samp{DEL}))、スペース、チルダ(@samp{~})、キャレット(@samp{^})、コロン(@samp{:})はどこにでも含めることはできません。

@item
疑問符(@samp{？})、アスタリスク(@samp{*})、角かっこ(@samp{[})がどこにあってもいけません。この規則の例外については、以下の
@samp{--refspec-pattern} オプションを参照してください。

@item
スラッシュ(@samp{/})で開始または終了したり、複数の連続したスラッシュを含めることはできません(この規則の例外については、以下の
@samp{--normalize} オプションを参照してください)。

@item
ドット(@samp{.})で終わらせることはできません。

@item
シーケンス @samp{@@@{} を含めることはできません。

@item
単一の文字 @samp{@@} にすることはできません。

@item
@samp{\} を含めることはできません。
@end enumerate

これらのルールにより、シェルスクリプトをベースにしたツールで参照名を簡単にパースできるようになり、参照名が(誤って)引用符なしで使われたときにシェルでパス名を展開したり、特定の参照名表現におけるあいまいさを回避することができます(gitrevisions(7)
を参照)。

@enumerate 

@item
二重ドット(@samp{..})は、 @samp{ref1..ref2} などとよく使用されます。一部のコンテキストでは、この表記は @samp{^ref1 ref2}
を意味します(つまり、@samp{ref1} に無く かつ @samp{ref2} にある)。

@item
チルダ(@samp{~})とキャレット(@samp{^})は、接尾辞 @emph{nth parent} (n番目の親)と @emph{peel onion}
(玉ねぎ剥き)操作を導入するために使用されます。

@item
コロン(@samp{：})は、 @samp{srcref:dstref}
のように、フェッチおよびプッシュ操作で「srcrefの値を使用してdstrefに格納する」ことを意味するために使用されます。 @samp{git cat-file
blob v1.3.3:refs.c} のようにして @samp{git cat-file} などで特定のオブジェクトを選択するためにも使用できます。

@item
at-open-brace(@samp{@@@{})は、reflogエントリにアクセスするための表記法として使用されます。
@end enumerate

@samp{--branch}
オプションを使用すると、コマンドは名前を取得し、それが有効なブランチ名として使用できるかどうかを確認します(たとえば、新しいブランチを作成するとき)。ただし、切り離された(detached)HEAD状態を参照する可能性のある、遡及チェックアウト構文(previous
checkout syntax)を使用する場合は注意が必要です。 @samp{git check-ref-format --branch $name}
が実装するルールは、 @samp{git check-ref-format refs/heads/$name}
が言うことよりも厳しい場合があります(たとえば、参照コンポーネントの先頭にダッシュが表示される場合がありますが、ブランチ名の先頭では明示的に禁止されています)。リポジトリで
@samp{--branch} オプションを指定して実行すると、入力は最初に「遡及チェックアウト構文」 @samp{@@@{-n@}} 用に展開されます。たとえば、
@samp{@@@{-1@}} は、 @samp{git switch} または @samp{git checkout}
操作を使用して最後にチェックアウトされたものを参照する方法です。磁器コマンドでは、ブランチ名が必要な場所でこの構文を受け入れるために、このオプションを使用する必要があります。これにより、あなたがブランチ名を入力したかのように機能できます。注意:
「遡及チェックアウト操作」では、例外として、チェックアウトされたN番目の最後のものがブランチではなかった場合にコミットオブジェクト名が生成される可能性があることに注意してください。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--[no-]allow-onelevel} 
1レベルのrefnameを受け入れるかどうかを制御します(つまり、複数の @samp{/} で区切られたコンポーネントを含まないrefname)。 デフォルトは
@samp{--no-allow-onelevel} です。

@item  @samp{--refspec-pattern} 
<refname>を(リモートリポジトリで使用される)refspecの参照名パターンとして解釈します。このオプションを有効にすると、<refname>はrefspecに単一の
@samp{*} を含めることができます(例: @samp{foo/bar*/baz} または @samp{foo/bar*baz/} はOKですが、 @samp{foo/bar*/baz*}
はダメです)。

@item  @samp{--normalize} 
先行スラッシュ(@samp{/})文字を削除し、名前コンポーネント間の隣接するスラッシュを1つのスラッシュに折りたたむことにより、 @emph{refname}
を正規化します。正規化されたrefnameが有効な場合は、それを標準出力に出力し、ステータス0で終了します。それ以外の場合は、ゼロ以外のステータスで終了します。
( @samp{--print} は @samp{--normalize} を綴る非推奨の方法です。)
@end table

@noindent

@chapheading EXAMPLES

@itemize 

@item
チェックアウトしたのモノの一つ前のものの名前を印刷します:

@example
$ git check-ref-format --branch @@@{-1@}
@end example


@item
新しいブランチに使用する参照名を決定します:

@example
$ ref=$(git check-ref-format --normalize "refs/heads/$newbranch")||
@{ echo "we do not like '$newbranch' as a branch name." >&2 ; exit 1 ; @}
@end example

@end itemize

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-checkout-index,,,Top
@chapheading Name

git-checkout-index — Copy files from the index to the working tree

@noindent

@chapheading Synopsis

@display
git checkout-index [-u] [-q] [-a] [-f] [-n] [--prefix=<string>]
                   [--stage=<number>|all]
                   [--temp]
                   [-z] [--stdin]
                   [--] [<file>…]
@end display


@noindent

@chapheading DESCRIPTION

Will copy all files listed from the index to the working directory (not
overwriting existing files).

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-u} 
@itemx  @samp{--index} 
update stat information for the checked out entries in the index file.

@item  @samp{-q} 
@itemx  @samp{--quiet} 
be quiet if files exist or are not in the index

@item  @samp{-f} 
@itemx  @samp{--force} 
forces overwrite of existing files

@item  @samp{-a} 
@itemx  @samp{--all} 
checks out all files in the index.  Cannot be used together with explicit
filenames.

@item  @samp{-n} 
@itemx  @samp{--no-create} 
Don’t checkout new files, only refresh files already checked out.

@item  @samp{--prefix=<string>} 
When creating files, prepend <string> (usually a directory including a
trailing /)

@item  @samp{--stage=<number>|all} 
Instead of checking out unmerged entries, copy out the files from named
stage.  <number> must be between 1 and 3.  Note: --stage=all automatically
implies --temp.

@item  @samp{--temp} 
Instead of copying the files to the working directory write the content to
temporary files.  The temporary name associations will be written to stdout.

@item  @samp{--stdin} 
Instead of taking list of paths from the command line, read list of paths
from the standard input.  Paths are separated by LF (i.e. one path per line)
by default.

@item  @samp{-z} 
Only meaningful with @samp{--stdin}; paths are separated with NUL character
instead of LF.

@item  -- 
Do not interpret any more arguments as options.
@end table

The order of the flags used to matter, but not anymore.

Just doing @samp{git checkout-index} does nothing. You probably meant @samp{git
checkout-index -a}. And if you want to force it, you want @samp{git
checkout-index -f -a}.

Intuitiveness is not the goal here. Repeatability is. The reason for the "no
arguments means no work" behavior is that from scripts you are supposed to
be able to do:

@example
$ find . -name '*.h' -print0 | xargs -0 git checkout-index -f --
@end example


which will force all existing @samp{*.h} files to be replaced with their cached
copies. If an empty command line implied "all", then this would
force-refresh everything in the index, which was not the point.  But since
@emph{git checkout-index} accepts --stdin it would be faster to use:

@example
$ find . -name '*.h' -print0 | git checkout-index -f -z --stdin
@end example


The @samp{--} is just a good idea when you know the rest will be filenames; it
will prevent problems with a filename of, for example, @samp{-a}.  Using @samp{--} is
probably a good policy in scripts.

@noindent

@chapheading Using --temp or --stage=all

When @samp{--temp} is used (or implied by @samp{--stage=all})  @emph{git checkout-index}
will create a temporary file for each index entry being checked out.  The
index will not be updated with stat information.  These options can be
useful if the caller needs all stages of all unmerged entries so that the
unmerged files can be processed by an external merge tool.

A listing will be written to stdout providing the association of temporary
file names to tracked path names.  The listing format has two variations:

@enumerate 

@item
tempname TAB path RS

The first format is what gets used when @samp{--stage} is omitted or is not
@samp{--stage=all}. The field tempname is the temporary file name holding the
file content and path is the tracked path name in the index.  Only the
requested entries are output.

@item
stage1temp SP stage2temp SP stage3tmp TAB path RS

The second format is what gets used when @samp{--stage=all}.  The three stage
temporary fields (stage1temp, stage2temp, stage3temp) list the name of the
temporary file if there is a stage entry in the index or @samp{.} if there is no
stage entry.  Paths which only have a stage 0 entry will always be omitted
from the output.
@end enumerate

In both formats RS (the record separator) is newline by default but will be
the null byte if -z was passed on the command line.  The temporary file
names are always safe strings; they will never contain directory separators
or whitespace characters.  The path field is always relative to the current
directory and the temporary file names are always relative to the top level
directory.

If the object being copied out to a temporary file is a symbolic link the
content of the link will be written to a normal file.  It is up to the
end-user or the Porcelain to make use of this information.

@noindent

@chapheading EXAMPLES

@table @asis

@item  To update and refresh only the files already checked out 
@example
$ git checkout-index -n -f -a && git update-index --ignore-missing --refresh
@end example


@item  Using @emph{git checkout-index} to "export an entire tree" 
The prefix ability basically makes it trivial to use @emph{git checkout-index} as
an "export as tree" function.  Just read the desired tree into the index,
and do:

@example
$ git checkout-index --prefix=git-export-dir/ -a
@end example


@samp{git checkout-index} will "export" the index into the specified directory.

The final "/" is important. The exported name is literally just prefixed
with the specified string.  Contrast this with the following example.

@item  Export files with a prefix 
@example
$ git checkout-index --prefix=.merged- Makefile
@end example


This will check out the currently cached copy of @samp{Makefile} into the file
@samp{.merged-Makefile}.
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-checkout,,,Top
@chapheading Name

git-checkout — ブランチの切り替え、または作業ツリーファイルの復元を行います。

@noindent

@chapheading Synopsis

@display
git checkout [-q] [-f] [-m] [<branch>]
git checkout [-q] [-f] [-m] --detach [<branch>]
git checkout [-q] [-f] [-m] [--detach] <commit>
git checkout [-q] [-f] [-m] [[-b|-B|--orphan] <new_branch>] [<start_point>]
git checkout [-f|--ours|--theirs|-m|--conflict=<style>] [<tree-ish>] [--] <pathspec>…
git checkout [-f|--ours|--theirs|-m|--conflict=<style>] [<tree-ish>] --pathspec-from-file=<file> [--pathspec-file-nul]
git checkout (-p|--patch) [<tree-ish>] [--] [<pathspec>…]
@end display


@noindent

@chapheading DESCRIPTION

作業ツリー内のファイルを、インデックスまたは指定されたツリー内のバージョンと一致するように更新します。 pathspecが指定されていない場合、
@emph{git checkout} は @samp{HEAD} も更新して、指定されたブランチを現在のブランチとして設定します。

@table @asis

@item  @emph{git checkout} [<branch>] 
@samp{<branch>} での作業の準備をするために、インデックスと作業ツリーのファイルを更新し、 @samp{HEAD}
をブランチに向けることで、@samp{<branch>} に切り替わります。作業ツリーのファイルに対するローカルな変更は保持され、 @samp{<branch>}
にコミットできるようになります。

@samp{<branch>} が見つからないが、一致する名前を持つ1つのリモート(@samp{<remote>} と呼びます)に追跡ブランチが存在し、`
--no-guess` が指定されていない場合は、以下と同等として扱います

@example
$ git checkout -b <branch> --track <remote>/<branch>
@end example


あなたは @samp{<branch>}
を省略できます。この場合、コマンドは「現在のブランチをチェックアウトする」ことになり、(もし存在すれば)現在のブランチの追跡情報だけを表示するという、かなり高価な副作用のある、見栄えの良いノー・オペレーション(no-op)となります。

@item  @emph{git checkout} -b|-B <new_branch> [<start point>] 
@samp{-b} を指定すると、git-branch(1) が呼び出されてチェックアウトされたかのように新しいブランチが作成されます。
この場合、 @samp{git branch} に渡される @samp{--track} または @samp{--no-track} オプションを使用できます。便利にするために
@samp{-b} のない @samp{--track} はブランチの作成を意味します。後述の @samp{--track} の説明を参照してください。

@samp{-B} を指定すると、存在しない場合は @samp{<new_branch>} が作成されます。
それ以外の場合はリセットされます。これは、以下の取引(transaction)と同等です

@example
$ git branch -f <branch> [<start point>]
$ git checkout <branch>
@end example


つまり、 @samp{git checkout} が成功しない限り、ブランチは リセット/作成 されません。

@item  @emph{git checkout} --detach [<branch>] 
@itemx  @emph{git checkout} [--detach] <commit> 
@samp{<commit>} の上で作業する準備をします。その上で、 @samp{HEAD} を切り離し(「DETACHED
HEAD」セクションを参照)、作業ツリーのインデックスとファイルを更新します。
作業ツリー内のファイルへのローカルの変更は保持されるため、結果の作業ツリーは、コミットに記録された状態と、ローカルの変更になります。

@samp{<commit>} 引数がブランチ名の場合、 @samp{--detach} オプションを使用して、ブランチの先端にある @samp{HEAD}
をデタッチできます(@samp{git checkout <branch>} は、 @samp{HEAD} をデタッチせずにそのブランチをチェックアウトします)。

@samp{<branch>} を省略すると、現在のブランチの先端にある @samp{HEAD} が切り離されます。

@item  @emph{git checkout} [-f|--ours|--theirs|-m|--conflict=<style>] [<tree-ish>] [--] <pathspec>… 
@itemx  @emph{git checkout} [-f|--ours|--theirs|-m|--conflict=<style>] [<tree-ish>] --pathspec-from-file=<file> [--pathspec-file-nul] 
pathspecにマッチするファイルの内容を上書きします。 @samp{<tree-ish>}
(ほとんどの場合コミット)が指定されていない場合は、作業ツリーをインデックスの内容で上書きします。 @samp{<tree-ish>}
が指定された場合、インデックスと作業ツリーの両方を @samp{<tree-ish>} の内容で上書きします。

以前にマージに失敗したため、インデックスがマージされていないエントリを含んでいる可能性があります。デフォルトでは、インデックスからそのようなエントリをチェックアウトしようとすると、チェックアウト操作は失敗し、何もチェックアウトされません。
@samp{-f} を使用すると、これらのマージされていないエントリは無視されます。マージの特定の側からのコンテンツは、 @samp{--ours} または
@samp{--theirs} を使用してインデックスからチェックアウトできます。 @samp{-m}
を使用すると、作業ツリーファイルに加えられた変更を破棄して、元の競合するマージ結果を再作成できます。

@item  @emph{git checkout} (-p|--patch) [<tree-ish>] [--] [<pathspec>…] 
これは以前のモードと似ていますが、対話的インターフェイスを使用して「diff」出力を表示し、その結果において使用するハンクを選択できます。
@samp{--patch} オプションの説明については、以下を参照してください。
@end table

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-q} 
@itemx  @samp{--quiet} 
静かにします。フィードバックメッセージを抑制します。

@item  @samp{--progress} 
@itemx  @samp{--no-progress} 
@samp{--quiet} が指定されていない限り、進行状況は、端末に接続されている場合、デフォルトで標準エラーストリームに報告されます。 このフラグは、
@samp{--quiet} に関係なく、端末に接続されていない場合でも進行状況のレポートを有効にします。

@item  @samp{-f} 
@itemx  @samp{--force} 
ブランチを切り替えるときは、インデックスや作業ツリーが @samp{HEAD} と異なっていても続行します。これは、ローカルの変更を破棄するために使用されます。

インデックスからパスをチェックアウトするときは、マージされていないエントリでエラーにしないでください。代わりに、マージされていないエントリは無視されます。

@item  @samp{--ours} 
@itemx  @samp{--theirs} 
インデックスからパスをチェックアウトするときは、ステージ#2(@emph{ours})または#3(@emph{theirs})でマージされていないパスをチェックアウトしてください。

注意: @samp{git rebase} と @samp{git pull --rebase}
での作業中、「ours」と「theirs」が入れ替わっているように見える場合があることに注意してください。 @samp{--ours}
は、変更がリベースされるブランチからのバージョンを提供し、 @samp{--theirs} は、リベースされる作業を保持するブランチからのバージョンを提供します。

これは、リモートでの履歴を共有の正規の履歴として扱うワークフローで @samp{rebase}
が使用されているためです。リベースするブランチで行われた作業を、統合されるサードパーティの作業として扱います。そして、あなたは一時的にリベース中に正規の歴史の管理者の役割を引き受けています。正規の履歴の管理者として、リモートからの履歴を「私たち」(ours;
つまり、「私達の共有された正規の履歴」)として表示する必要があり、サイドブランチで行ったことは「彼ら」(theirs;つまり「その上での貢献者の作品」)として表示する必要があります。

@item  @samp{-b <new_branch>} 
@samp{<new_branch>} という名前の新しいブランチを作成し、 @samp{<start_point>} で開始します。詳細については、
git-branch(1) を参照してください。

@item  @samp{-B <new_branch>} 
ブランチ @samp{<new_branch>} を作成し、 @samp{<start_point>} で開始します。すでに存在する場合は、 @samp{<start_point>}
にリセットします。 これは、 @samp{-f} を伴って @samp{git branch} を実行するのと同じです。詳細については、
git-branch(1) を参照してください。

@item  @samp{-t} 
@itemx  @samp{--track} 
新しいブランチを作成するときは、「アップストリーム構成」(upstream configuration)をセットアップします。 詳細については、
git-branch(1)の @samp{--track} を参照してください。

@samp{-b`オプションが指定されていない場合、新しいブランチの名前は、対応するリモート用に構成されたrefspecのローカル部分を調べ、最初の部分を `*}
まで削除することにより、リモート追跡ブランチから派生させます。これにより、 @samp{origin/hack} (または
@samp{remotes/origin/hack}、 あるいは @samp{refs/remotes/origin/hack})
から分岐するときに、ローカルブランチとして @samp{hack}
を使用するように指示されます。指定された名前にスラッシュ(@samp{/})がない場合、または上記の推測の結果が空の名前になる場合、推測は中止されます。このような場合は、
@samp{-b} を使用して明示的に名前を付けることができます。

@item  @samp{--no-track} 
@samp{branch.autoSetupMerge} 構成変数がtrueであっても、「アップストリーム構成」を設定しないでください。

@item  @samp{--guess} 
@itemx  @samp{--no-guess} 
`<branch>`が見つからないが、名前が一致する1つのリモート(
`<remote>`と呼びます)に追跡ブランチが存在する場合は、以下と同等としてあつかいます

@example
$ git checkout -b <branch> --track <remote>/<branch>
@end example


ブランチが複数のリモートに存在し、そのうちの1つが @emph{checkout.defaultRemote} 構成変数で名付けられている場合、
@emph{<branch>} がすべてのリモートで一意でなくても、曖昧さ回避の目的でそのブランチを使用します。例えば
@samp{checkout.defaultRemote=origin} と設定すると、 @emph{<branch>} があいまいだが @emph{origin}
リモート上に存在する場合、常にそこからリモートブランチをチェックアウトします。 git-config(1) の
@emph{checkout.defaultRemote} も参照してください。

@samp{--guess} がデフォルトの振る舞いです。無効にするには、 @samp{--no-guess} を使用します。

デフォルトの振る舞いは、@samp{checkout.guess} 構成変数を介して設定できます。

@item  @samp{-l} 
新しいブランチのreflogを作成します。詳細については、 git-branch(1) を参照してください。

@item  @samp{-d} 
@itemx  @samp{--detach} 
ブランチをチェックアウトして作業するのではなく、検査と破棄可能な実験のためのコミットをチェックアウトします。 これは、 @samp{<commit>}
がブランチ名でない場合の、 @samp{git checkout <commit>} のデフォルトの動作です。 詳細については、以下の「DETACHED
HEAD」セクションを参照してください。

@item  @samp{--orphan <new_branch>} 
@samp{<start_point>} から開始された @samp{<new_branch>} という名前の新しい @emph{孤立した} (orphan)
ブランチを作成し、それに切り替えます。
この新しいブランチで行われた最初のコミットには親がなく、他のすべてのブランチとコミットから完全に切断された新しい履歴のルートになります。

インデックスと作業ツリーは、以前に @samp{git checkout <start_point>} を実行した場合と同じように調整されます。これにより、
ルート(root)をコミットするために容易に @samp{git commit -a} 実行をでき、@samp{<start_point>}
と同様のパスのセットを記録する新しい履歴を開始できます。

これは、ツリーの完全な履歴を公開せずにコミットからツリーを公開する場合に便利です。これは、現在のツリーが「クリーン」であるが、完全な履歴にはプロプライエタリなコードやその他の邪魔なコードが含まれているプロジェクトの、オープンソースブランチを公開するためにこれを行うことができます。

@samp{<start_point>} のパスとはまったく異なるパスのセットを記録する切断された履歴を開始する場合は、作業ツリーの最上位から @samp{git rm
-rf .} を実行して、孤立したブランチ(orphan
branch)を作成した直後にインデックスと作業ツリーをクリアする必要があります。その後に、新しいファイルを準備したり、作業ツリーを再作成したり、他の場所からファイルをコピーしたり、tarballを抽出したりする準備が整います。

@item  @samp{--ignore-skip-worktree-bits} 
スパースチェックアウトモード(sparse checkout mode)では、 @samp{git checkout -- <paths>} は、
@samp{<paths>} と一致するエントリと、 @samp{$GIT_DIR/info/sparse-checkout} のスパースパターン(sparse
patterns)のみを更新します。このオプションは、スパースパターンを無視し、 @samp{<paths>} 内のファイルを追加し直します。

@item  @samp{-m} 
@itemx  @samp{--merge} 
ブランチを切り替えるときに、現在のブランチと切り替え先のブランチの間で異なる1つ以上のファイルにローカルの変更がある場合、コマンドは、コンテキストでの変更を保持するためにブランチの切り替えを拒否します。ただし、このオプションを使用すると、現在のブランチ、作業ツリーの内容、および新しいブランチの間の3方向のマージを実行してから新しいブランチに移動します。

マージの競合が発生すると、競合するパスのインデックスエントリはマージされないままになります。競合を解決し、解決されたパスを @samp{git
add}（またはマージによってパスが削除される場合は @samp{git rm})でマークする必要があります。

インデックスからパスをチェックアウトする場合、このオプションを使用すると、指定したパスで競合するマージを再作成できます。

@samp{--merge} でブランチを切り替えると、ステージされた変更が失われる可能性があります。

@item  @samp{--conflict=<style>} 
上記の @samp{--merge} オプションと同一ですが、競合するハンクの表示方法を変更し、 @samp{merge.conflictStyle}
構成変数をオーバーライドします。
可能な値は「merge」(デフォルト)と「diff3」(「merge」スタイルで表示されるものに加えて、元のコンテンツを表示する)です。

@item  @samp{-p} 
@itemx  @samp{--patch} 
@samp{<tree-ish>}
(または指定されていない場合はインデックス)と作業ツリーの間の差分でハンクを対話的に選択します。選択されたハンクは、作業ツリー(@samp{<tree-ish>}
が指定されている場合はインデックス)に逆に適用されます。

これは、 @samp{git checkout -p} を使用して、現在の作業ツリーから編集を選択的に破棄できることを意味します。 @samp{--patch}
モードの操作方法については、 git-add(1) の「Interactive Mode」セクションを参照してください。

注意: このオプションはデフォルトでオーバーレイなしモードを使用します(@samp{--overlay}
も参照)。現在はオーバーレイモードをサポートしていないことに注意してください。

@item  @samp{--ignore-other-worktrees} 
@samp{git checkout}
は、必要なrefが別のワークツリーによってすでにチェックアウトされている場合に拒否します。このオプションを使用すると、とにかくrefをチェックアウトできます。つまり、refを複数のワークツリーで保持できます。

@item  @samp{--overwrite-ignore} 
@itemx  @samp{--no-overwrite-ignore} 
ブランチを切り替えるときに、無視したファイルを黙って上書きします。これがデフォルトの動作です。新しいブランチに無視したファイルが含まれている場合に操作を中止するには、
@samp{--no-overwrite-ignore} を使用します。

@item  @samp{--recurse-submodules} 
@itemx  @samp{--no-recurse-submodules} 
@samp{--recurse-submodules}
を使用すると、スーパープロジェクトに記録されたコミットに従って、すべてのアクティブなサブモジュールのコンテンツが更新されます。サブモジュールのローカル変更が上書きされる場合、
@samp{-f} が使用されない限り、チェックアウトは失敗します。何も使用されていない場合(または
@samp{--no-recurse-submodules})、サブモジュールの作業ツリーは更新されません。 git-submodule(1)
と同様に、これはサブモジュールの @samp{HEAD} を切り離します(detach)。

@item  @samp{--overlay} 
@itemx  @samp{--no-overlay} 
デフォルトのオーバーレイモードでは、 @samp{git checkout} がインデックスまたは作業ツリーからファイルを削除することはありません。
@samp{--no-overlay} を指定すると、インデックスと作業ツリーには表示されるが、 @samp{<tree-ish>} には表示されないファイルが削除され、
@samp{<tree-ish>} と完全に一致するようになります。

@item  @samp{--pathspec-from-file=<file>} 
pathspecは、コマンドライン引数の代わりに @samp{<file>} で渡されます。 @samp{<file>} が正確に @samp{-}
の場合、標準入力が使用されます。pathspec要素は、LFまたはCR/LFで区切られます。pathspec要素は、構成変数
@samp{core.quotePath} で説明されているように、クォートできます(git-config(1) 参照)。
@samp{--pathspec-file-nul} および グローバル @samp{--literal-pathspecs} も参照してください。

@item  @samp{--pathspec-file-nul} 
`--pathspec-from-file`でのみ意味があります。Pathspec要素はNUL文字で区切られ、他のすべての文字は文字通りに解釈されます(改行と引用符を含む)。

@item  <branch> 
チェックアウトするブランチ。もしそれがブランチ(つまり、 @samp{refs/heads/}
を前につけたとき、有効なrefである名前)を参照しているなら、そのブランチはチェックアウトされます。そうでない場合、もしそれが有効なコミットを参照していれば、あなたの
@samp{HEAD} は "detached" となり、あなたはもはやどのブランチにもいません(詳しくは以下を参照してください)。

@samp{@@@{-N@}} 構文を使用して、 @samp{git checkout `操作を使用してチェックアウトされた最後からN番目ブランチ/コミットを参照できます。
`@@@{-1@}} と同義の @samp{-} を指定することもできます。

特殊なケースとして、マージベースが1つしかない場合は、 @samp{A} と @samp{B} のマージベースのショートカットとして @samp{A...B} を使用できます。
最大で @samp{A} と @samp{B} のどちらかを省略できます。その場合、デフォルトで @samp{HEAD} になります。

@item  <new_branch> 
新しいブランチの名前。

@item  <start_point> 
新しいブランチを開始するコミットの名前。詳細については、 git-branch(1) を参照してください。デフォルトは @samp{HEAD}
です。

特殊なケースとして、マージベースが1つしかない場合は、 @samp{A} と @samp{B} のマージベースのショートカットとして @samp{A...B} を使用できます。
最大で @samp{A} と @samp{B} のどちらかを省略できます。その場合、デフォルトで @samp{HEAD} になります。

@item  <tree-ish> 
チェックアウト元のツリー(パスが指定されている場合)。指定しない場合はインデックスが使用されます。

特殊なケースとして、マージベースが1つしかない場合は、 @samp{A} と @samp{B} のマージベースのショートカットとして @samp{A...B} を使用できます。
最大で @samp{A} と @samp{B} のどちらかを省略できます。その場合、デフォルトで @samp{HEAD} になります。

@item  @samp{--} 
これ以降の引数をオプションとして解釈しないでください。

@item  <pathspec>… 
操作の影響を受けるパスを制限します。

詳細については、 gitglossary(7) の「pathspec」エントリを参照してください。
@end table

@noindent

@chapheading DETACHED HEAD

@samp{HEAD} は通常、名前付きブランチ(@samp{master}
など)を指します。一方、各ブランチは特定のコミットを参照します。3つのコミットがあり、そのうちの1つがタグ付けされており、ブランチ`master`
がチェックアウトされているリポジトリを見てみましょう:

@example
           HEAD (refers to branch 'master')
            |
            v
a---b---c  branch 'master' (refers to commit 'c')
    ^
    |
  tag 'v2.0' (refers to commit 'b')
@end example


この状態でコミットが作成されると、新しいコミットを参照するようにブランチが更新されます。 具体的には、 @samp{git commit} は、親がコミット
@samp{c} である新しいコミット @samp{d} を作成し、ブランチ @samp{master} を更新して新しい コミット @samp{d} を参照します。 @samp{HEAD}
はまだブランチ @samp{master} を参照しているので、間接的に コミット @samp{d} を参照するようになりました:

@example
$ edit; git add; git commit

               HEAD (refers to branch 'master')
                |
                v
a---b---c---d  branch 'master' (refers to commit 'd')
    ^
    |
  tag 'v2.0' (refers to commit 'b')
@end example


名前付きブランチの先端にないコミットをチェックアウトしたり、名前付きブランチによって参照されていない新しいコミットを作成したりできると便利な場合があります。
コミット @samp{b} をチェックアウトするとどうなるか見てみましょう(ここでは、これを行う2つの方法を示します):

@example
$ git checkout v2.0  # or
$ git checkout master^^

   HEAD (refers to commit 'b')
    |
    v
a---b---c---d  branch 'master' (refers to commit 'd')
    ^
    |
  tag 'v2.0' (refers to commit 'b')
@end example


使用するcheckoutコマンドに関係なく、 @samp{HEAD} はコミット @samp{b} を直接参照するようになりました。 これは、切り離された @samp{HEAD}
(detached HEAD)状態にあることとして知られています。これは、名前付きブランチを参照するのではなく、単に @samp{HEAD}
が特定のコミットを参照することを意味します。この状態でコミットを作成するとどうなるか見てみましょう:

@example
$ edit; git add; git commit

     HEAD (refers to commit 'e')
      |
      v
      e
     /
a---b---c---d  branch 'master' (refers to commit 'd')
    ^
    |
  tag 'v2.0' (refers to commit 'b')
@end example


新しいコミット @samp{e} がありますが、これは @samp{HEAD} によってのみ参照されます。 もちろん、この状態でさらに別のコミットを追加できます:

@example
$ edit; git add; git commit

         HEAD (refers to commit 'f')
          |
          v
      e---f
     /
a---b---c---d  branch 'master' (refers to commit 'd')
    ^
    |
  tag 'v2.0' (refers to commit 'b')
@end example


実際、私達は通常のGit操作はすべて実行できます。 しかし、ここで私達が @samp{master} をチェックアウトするとどうなるか見てみましょう:

@example
$ git checkout master

               HEAD (refers to branch 'master')
      e---f     |
     /          v
a---b---c---d  branch 'master' (refers to commit 'd')
    ^
    |
  tag 'v2.0' (refers to commit 'b')
@end example


この時点で、コミット @samp{f} を指しているものは何もないことを理解することが重要です。最終的に、コミット @samp{f} (および拡張によりコミット @samp{e}
)は、あなたがルーチンのGitガベージコレクションプロセス前に参照を作成しない限り、ルーチンのGitガベージコレクションプロセスによって削除されます。あなたが、まだコミット`f`から離れていない場合、以下のいずれかがそれへの参照を作成します:

@example
$ git checkout -b foo   (1)
$ git branch foo        (2)
$ git tag foo           (3)
@end example


@table @asis

@item @pxref{CO1-1,,(1)}
コミット @samp{f} を参照する新しいブランチ @samp{foo} を作成し、次にブランチ @samp{foo}
を参照するように`HEAD`を更新します。つまり、このコマンドを実行すると、もはや切り離された`HEAD` (detached
HEAD)状態では無くなります。

@item @pxref{CO1-2,,(2)}
同様に、コミット @samp{f} を参照する新しいブランチ @samp{foo} を作成しますが、 @samp{HEAD} は切り離されたままにします。

@item @pxref{CO1-3,,(3)}
新しいタグ @samp{foo} を作成します。これは、@samp{HEAD} を切り離したままコミット @samp{f} を参照します。
@end table

私達がうっかり @samp{f} から離れてしまった場合は、最初にそのオブジェクト名を回復する必要があり(通常は @samp{git reflog}
を使用)、次にそれへの参照を作成できます。 たとえば、 @samp{HEAD}
が参照した最後の2つのコミットを確認するには、以下のいずれかのコマンドを使用できます:

@example
$ git reflog -2 HEAD # or
$ git log -g -2 HEAD
@end example


@noindent

@chapheading ARGUMENT DISAMBIGUATION(引数の曖昧性解消)

与えられた引数が1つだけで、それが @samp{--} ではない場合(例: @samp{git checkout abc})や、引数が有効な @samp{<tree-ish>}
(例:ブランチ @samp{abc} が存在する)や、有効な @samp{<pathspec>} (たとえば、 "abc"
という名前のファイルまたはディレクトリが存在する)な場合、Gitは通常、明確にするように求めます。ただし、ブランチのチェックアウトは非常に一般的な操作であるため、このような状況では、
@samp{git checkout abc} は "abc" を @samp{<tree-ish>}
と見なします。これらのパスをインデックスからチェックアウトする場合は、 @samp{git checkout -- <pathspec>} を使用します。

@noindent

@chapheading EXAMPLES

@enumerate 

@item
以下のシーケンスは、 @samp{master} ブランチをチェックアウトし、 @samp{Makefile} のリビジョンを2つ戻し、誤って @samp{hello.c}
を削除したので、 @samp{hello.c} をインデックスから取得します。

@example
$ git checkout master             (1)
$ git checkout master~2 Makefile  (2)
$ rm -f hello.c
$ git checkout hello.c            (3)
@end example


@table @asis

@item @pxref{CO2-1,,(1)}
ブランチを切り替えます

@item @pxref{CO2-2,,(2)}
別のコミットからファイルを取り出します

@item @pxref{CO2-3,,(3)}
インデックスから @samp{hello.c} を復元します

あなたがインデックスから「すべての」Cソースファイルをチェックアウトしたい場合は、以下のように言うことができます

@example
$ git checkout -- '*.c'
@end example


@samp{*.c} を囲む引用符に注意してください。 ファイル @samp{hello.c}
も、作業ツリーに存在していなくてもチェックアウトされます。これは、(引用符で囲む事で作業ツリーに対してシェル展開するのではなくて)ファイルグロブがインデックスのエントリを照合するために使用されるためです。

@samp{hello.c}
という名前の不幸なブランチがある場合、このステップはそのブランチに切り替えるための指示として混乱を産みます。あなたは代わりに以下のように書く必要があります。

@example
$ git checkout -- hello.c
@end example

@end table

@item
間違ったブランチで作業した後、正しいブランチへの切り替えは以下を使用して行います:

@example
$ git checkout mytopic
@end example


ただし、あなたの「間違った」ブランチと正しい @samp{mytopic}
ブランチは、ローカルで変更したファイルで異なる場合があります。その場合、上記のチェックアウトは以下のように失敗します:

@example
$ git checkout mytopic
error: You have local changes to 'frotz'; not switching branches.
@end example


コマンドに @samp{-m} フラグを指定すると、3方向のマージを試みます:

@example
$ git checkout -m mytopic
Auto-merging frotz
@end example


この3方向マージの後、ローカルの変更はインデックスファイルに登録されないため、 @samp{git diff}
は、新しいブランチの先端以降に行った変更を表示します。

@item
@samp{-m} オプションを使用してブランチを切り替えるときにマージの競合が発生すると、以下のように表示されます:

@example
$ git checkout -m mytopic
Auto-merging frotz
ERROR: Merge conflict in frotz
fatal: merge program failed
@end example


この時点で、 @samp{git diff} は、前の例のようにきれいにマージされた変更と、競合するファイルの変更を示しています。
競合を編集して解決し、通常どおり @samp{git add} で解決済みのマークを付けます。

@example
$ edit frotz
$ git add frotz
@end example

@end enumerate

@noindent

@chapheading SEE ALSO

git-switch(1), git-restore(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-cherry-pick,,,Top
@chapheading Name

git-cherry-pick — Apply the changes introduced by some existing commits

@noindent

@chapheading Synopsis

@display
git cherry-pick [--edit] [-n] [-m parent-number] [-s] [-x] [--ff]
                  [-S[<keyid>]] <commit>…
git cherry-pick (--continue | --skip | --abort | --quit)
@end display


@noindent

@chapheading DESCRIPTION

Given one or more existing commits, apply the change each one introduces,
recording a new commit for each.  This requires your working tree to be
clean (no modifications from the HEAD commit).

When it is not obvious how to apply a change, the following happens:

@enumerate 

@item
The current branch and @samp{HEAD} pointer stay at the last commit successfully
made.

@item
The @samp{CHERRY_PICK_HEAD} ref is set to point at the commit that introduced the
change that is difficult to apply.

@item
Paths in which the change applied cleanly are updated both in the index file
and in your working tree.

@item
For conflicting paths, the index file records up to three versions, as
described in the "TRUE MERGE" section of git-merge(1).  The working
tree files will include a description of the conflict bracketed by the usual
conflict markers @samp{<<<<<<<} and @samp{>>>>>>>}.

@item
No other modifications are made.
@end enumerate

See git-merge(1) for some hints on resolving such conflicts.

@noindent

@chapheading OPTIONS

@table @asis

@item  <commit>… 
Commits to cherry-pick.  For a more complete list of ways to spell commits,
see gitrevisions(7).  Sets of commits can be passed but no traversal
is done by default, as if the @samp{--no-walk} option was specified, see
git-rev-list(1). Note that specifying a range will feed all
<commit>… arguments to a single revision walk (see a later example that
uses @emph{maint master..next}).

@item  @samp{-e} 
@itemx  @samp{--edit} 
With this option, @emph{git cherry-pick} will let you edit the commit message
prior to committing.

@item  @samp{--cleanup=<mode>} 
This option determines how the commit message will be cleaned up before
being passed on to the commit machinery. See git-commit(1) for more
details. In particular, if the @emph{<mode>} is given a value of @samp{scissors},
scissors will be appended to @samp{MERGE_MSG} before being passed on in the case
of a conflict.

@item  @samp{-x} 
When recording the commit, append a line that says "(cherry picked from
commit …)" to the original commit message in order to indicate which
commit this change was cherry-picked from.  This is done only for cherry
picks without conflicts.  Do not use this option if you are cherry-picking
from your private branch because the information is useless to the
recipient.  If on the other hand you are cherry-picking between two publicly
visible branches (e.g. backporting a fix to a maintenance branch for an
older release from a development branch), adding this information can be
useful.

@item  @samp{-r} 
It used to be that the command defaulted to do @samp{-x} described above, and
@samp{-r} was to disable it.  Now the default is not to do @samp{-x} so this option is
a no-op.

@item  @samp{-m parent-number} 
@itemx  @samp{--mainline parent-number} 
Usually you cannot cherry-pick a merge because you do not know which side of
the merge should be considered the mainline.  This option specifies the
parent number (starting from 1) of the mainline and allows cherry-pick to
replay the change relative to the specified parent.

@item  @samp{-n} 
@itemx  @samp{--no-commit} 
Usually the command automatically creates a sequence of commits.  This flag
applies the changes necessary to cherry-pick each named commit to your
working tree and the index, without making any commit.  In addition, when
this option is used, your index does not have to match the HEAD commit.  The
cherry-pick is done against the beginning state of your index.

This is useful when cherry-picking more than one commits' effect to your
index in a row.

@item  @samp{-s} 
@itemx  @samp{--signoff} 
Add a @samp{Signed-off-by} trailer at the end of the commit message.  See the
signoff option in git-commit(1) for more information.

@item  @samp{-S[<keyid>]} 
@itemx  @samp{--gpg-sign[=<keyid>]} 
@itemx  @samp{--no-gpg-sign} 
GPG-sign commits. The @samp{keyid} argument is optional and defaults to the
committer identity; if specified, it must be stuck to the option without a
space. @samp{--no-gpg-sign} is useful to countermand both @samp{commit.gpgSign}
configuration variable, and earlier @samp{--gpg-sign}.

@item  @samp{--ff} 
If the current HEAD is the same as the parent of the cherry-pick’ed commit,
then a fast forward to this commit will be performed.

@item  @samp{--allow-empty} 
By default, cherry-picking an empty commit will fail, indicating that an
explicit invocation of @samp{git commit --allow-empty} is required. This option
overrides that behavior, allowing empty commits to be preserved
automatically in a cherry-pick. Note that when "--ff" is in effect, empty
commits that meet the "fast-forward" requirement will be kept even without
this option.  Note also, that use of this option only keeps commits that
were initially empty (i.e. the commit recorded the same tree as its
parent).  Commits which are made empty due to a previous commit are
dropped.  To force the inclusion of those commits use
@samp{--keep-redundant-commits}.

@item  @samp{--allow-empty-message} 
By default, cherry-picking a commit with an empty message will fail.  This
option overrides that behavior, allowing commits with empty messages to be
cherry picked.

@item  @samp{--keep-redundant-commits} 
If a commit being cherry picked duplicates a commit already in the current
history, it will become empty.  By default these redundant commits cause
@samp{cherry-pick} to stop so the user can examine the commit. This option
overrides that behavior and creates an empty commit object.  Implies
@samp{--allow-empty}.

@item  @samp{--strategy=<strategy>} 
Use the given merge strategy.  Should only be used once.  See the MERGE
STRATEGIES section in git-merge(1) for details.

@item  @samp{-X<option>} 
@itemx  @samp{--strategy-option=<option>} 
Pass the merge strategy-specific option through to the merge strategy.  See
git-merge(1) for details.

@item  @samp{--rerere-autoupdate} 
@itemx  @samp{--no-rerere-autoupdate} 
Allow the rerere mechanism to update the index with the result of
auto-conflict resolution if possible.
@end table

@noindent

@chapheading SEQUENCER SUBCOMMANDS

@table @asis

@item  @samp{--continue} 
@samp{.git/sequencer}
の情報を使用して、進行中の操作の続行を行います。失敗したcherry-pickまたはrevertの競合を解決した後、続行するために使用できます。

@item  @samp{--skip} 
現在のコミットをスキップして、残りのシーケンスを続行します。

@item  @samp{--quit} 
進行中の今回の操作を忘れてください。チェリーピックまたはrevertに失敗した後、シーケンサーの状態をクリアするために使用できます。

@item  @samp{--abort} 
操作をキャンセルして、シーケンス操作前の状態に戻ります。
@end table

@noindent

@chapheading EXAMPLES

@table @asis

@item  @samp{git cherry-pick master} 
Apply the change introduced by the commit at the tip of the master branch
and create a new commit with this change.

@item  @samp{git cherry-pick ..master} 
@itemx  @samp{git cherry-pick ^HEAD master} 
Apply the changes introduced by all commits that are ancestors of master but
not of HEAD to produce new commits.

@item  @samp{git cherry-pick maint next ^master} 
@itemx  @samp{git cherry-pick maint master..next} 
Apply the changes introduced by all commits that are ancestors of maint or
next, but not master or any of its ancestors.  Note that the latter does not
mean @samp{maint} and everything between @samp{master} and @samp{next}; specifically,
@samp{maint} will not be used if it is included in @samp{master}.

@item  @samp{git cherry-pick master~4 master~2} 
Apply the changes introduced by the fifth and third last commits pointed to
by master and create 2 new commits with these changes.

@item  @samp{git cherry-pick -n master~1 next} 
Apply to the working tree and the index the changes introduced by the second
last commit pointed to by master and by the last commit pointed to by next,
but do not create any commit with these changes.

@item  @samp{git cherry-pick --ff ..next} 
If history is linear and HEAD is an ancestor of next, update the working
tree and advance the HEAD pointer to match next.  Otherwise, apply the
changes introduced by those commits that are in next but not HEAD to the
current branch, creating a new commit for each new change.

@item  @samp{git rev-list --reverse master -- README | git cherry-pick -n --stdin} 
Apply the changes introduced by all commits on the master branch that
touched README to the working tree and index, so the result can be inspected
and made into a single new commit if suitable.
@end table

The following sequence attempts to backport a patch, bails out because the
code the patch applies to has changed too much, and then tries again, this
time exercising more care about matching up context lines.

@example
$ git cherry-pick topic^             (1)
$ git diff                           (2)
$ git reset --merge ORIG_HEAD        (3)
$ git cherry-pick -Xpatience topic^  (4)
@end example


@table @asis

@item @pxref{CO1-1,,(1)}
apply the change that would be shown by @samp{git show topic^}.  In this example,
the patch does not apply cleanly, so information about the conflict is
written to the index and working tree and no new commit results.

@item @pxref{CO1-2,,(2)}
summarize changes to be reconciled

@item @pxref{CO1-3,,(3)}
cancel the cherry-pick.  In other words, return to the pre-cherry-pick
state, preserving any local modifications you had in the working tree.

@item @pxref{CO1-4,,(4)}
try to apply the change introduced by @samp{topic^} again, spending extra time to
avoid mistakes based on incorrectly matching context lines.
@end table

@noindent

@chapheading SEE ALSO

git-revert(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-cherry,,,Top
@chapheading Name

git-cherry — アップストリームにまだ適用されていないコミットを検索する

@noindent

@chapheading Synopsis

@display
git cherry [-v] [<upstream> [<head> [<limit>]]]
@end display


@noindent

@chapheading DESCRIPTION

@samp{<head>..<upstream>} に @samp{<limit>..<head>}
の範囲と同等のコミットがあるかどうかを検査(determine)します。

等価性テストは、空白と行番号を削除した後のdiffに基づいています。したがって、git-cherry は、
git-cherry-pick(1) または git-am(1) または git-rebase(1)
を使用してコミットが「コピー」された時に検出します。

@samp{<limit>..<head>} の範囲のすべてのコミットのSHA1を出力し、 <upstream> に同等のものがあるコミットの場合は @samp{-}
を接頭辞として付け、そうでないコミットの場合は @samp{+} を接頭辞として付けます。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-v} 
SHA1の横にコミット件名(commit subject)を表示します。

@item  <upstream> 
同等のコミットを検索するためのアップストリームブランチ。デフォルトはHEADのアップストリームブランチです。

@item  <head> 
作業ブランチ。デフォルトはHEADです。

@item  <limit> 
コミットをlimitまで(limitを含む)報告しないでください。
@end table

@noindent

@chapheading EXAMPLES

@noindent

@heading Patch workflows

git-cherryは、パッチベースのワークフロー(gitworkflows(7)
参照)で頻繁に使用され、一連のパッチがアップストリームメンテナによって適用されているかどうかを判断します。このようなワークフローでは、以下のようなトピックブランチを作成して送信できます:

@example
$ git checkout -b topic origin/master
# work and create some commits
$ git format-patch origin/master
$ git send-email ... 00*
@end example


後で、あなたは(まだ @samp{topic} に居る時に、)次のように言うことで、変更が適用されたかどうかを確認できます:

@example
$ git fetch  # update your notion of origin/master
$ git cherry -v
@end example


@noindent

@heading Concrete example

トピックが3つのコミットで構成され、メンテナがそのうちの2つを適用した状況では、状況は以下のようになります:

@example
$ git log --graph --oneline --decorate --boundary origin/master...topic
* 7654321 (origin/master) upstream tip commit
[... snip some other commits ...]
* cccc111 cherry-pick of C
* aaaa111 cherry-pick of A
[... snip a lot more that has happened ...]
| * cccc000 (topic) commit C
| * bbbb000 commit B
| * aaaa000 commit A
|/
o 1234567 branch point
@end example


このような場合、git-cherryはまだ適用されていないモノの簡潔な要約を示します:

@example
$ git cherry origin/master topic
- cccc000... commit C
+ bbbb000... commit B
- aaaa000... commit A
@end example


ここで、(@samp{-} でマークされている)コミットAとCは、 @samp{origin/master}
のトップでリベースすると、トピックブランチから削除できますが、（@samp{+} でマークされている)コミットBは @samp{origin/master}
にapplyするために送信されるために、まだ保持しつづける必要があります。

@noindent

@heading Using a limit

オプションの <limit>
は、あなたのトピックがアップストリームにない他の作業に基づいている場合に役立ちます。前の例を拡張すると、これは以下のようになります:

@example
$ git log --graph --oneline --decorate --boundary origin/master...topic
* 7654321 (origin/master) upstream tip commit
[... snip some other commits ...]
* cccc111 cherry-pick of C
* aaaa111 cherry-pick of A
[... snip a lot more that has happened ...]
| * cccc000 (topic) commit C
| * bbbb000 commit B
| * aaaa000 commit A
| * 0000fff (base) unpublished stuff F
[... snip ...]
| * 0000aaa unpublished stuff A
|/
o 1234567 merge-base between upstream and topic
@end example


制限として @samp{base} を指定することで、 @samp{base} と @samp{topic} の間のコミットをリストすることを回避できます:

@example
$ git cherry origin/master topic base
- cccc000... commit C
+ bbbb000... commit B
- aaaa000... commit A
@end example


@noindent

@chapheading SEE ALSO

git-patch-id(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-citool,,,Top
@chapheading Name

git-citool — git-commitのグラフィカルな代替手段

@noindent

@chapheading Synopsis

@display
git citool
@end display


@noindent

@chapheading DESCRIPTION

Tcl/Tkベースのグラフィカルインターフェイス。変更されたファイルを確認し、それらをインデックスにステージングし、コミットメッセージを入力して、新しいコミットを現在のブランチに記録します。このインターフェースは、インタラクティブ性の低い’git
commit’プログラムの代替手段です。

'git citool’は実際には`git gui
citool`の標準エイリアスです。詳細については、git-gui(1)を参照してください。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-clean,,,Top
@chapheading Name

git-clean — 作業ツリーから追跡されていないファイルを削除する

@noindent

@chapheading Synopsis

@display
git clean [-d] [-f] [-i] [-n] [-q] [-e <pattern>] [-x | -X] [--] <path>…
@end display


@noindent

@chapheading DESCRIPTION

現在のディレクトリから開始して、バージョン管理下にないファイルを再帰的に削除することにより、作業ツリーをクリーンにします。

通常、Gitが追跡していないファイルのみが削除されますが、 @samp{-x} オプションが指定されている場合、無視されたファイル(ignored
files)も削除されます。これは、たとえば、ビルドでの生成物全てを削除するのに役立ちます。

オプションで、任意の数の @samp{<path> ...} 引数を指定すると、それらのパスのみが影響を受けます。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-d} 
通常、<path> が指定されていない場合、削除が多すぎるのを避けるために、git cleanは追跡されていないディレクトリ内には再帰処理しません。
@samp{-d} を指定すると、そのようなディレクトリ内でも再帰的に処理します。パスが指定されている場合、 @samp{-d} は関係ありません。(@samp{--force}
で言及されているネストされたgitディレクトリを除く、)指定されたパスに一致するすべての追跡されていないファイルは削除されます。

@item  @samp{-f} 
@itemx  @samp{--force} 
Git構成変数 clean.requireForce が false に設定されてい無い場合、「git clean」は、 @samp{-f} または @samp{-i}
が指定されていない限り、ファイルまたはディレクトリの削除を拒否します。 2つ目の @samp{-f}
が指定されていない限り、Gitは追跡されていないネストされたgitリポジトリ(.gitサブディレクトリを持つディレクトリ)の変更を拒否します。

@item  @samp{-i} 
@itemx  @samp{--interactive} 
何が行われるを示し、ファイルを対話的にクリーンアップします。 詳細は「Interactive mode」を参照してください。

@item  @samp{-n} 
@itemx  @samp{--dry-run} 
実際には何も削除せず、何が行われるかを表示します。

@item  @samp{-q} 
@itemx  @samp{--quiet} 
静かにして、エラーのみを報告し、正常に削除されたファイルは報告しないでください。

@item  @samp{-e <pattern>} 
@itemx  @samp{--exclude=<pattern>} 
標準の無視ルールに加えて、指定の除外パターンを使用します(gitignore(5) 参照)。

@item  @samp{-x} 
標準の無視ルール(gitignore(5) 参照)を使用しないでください。ただし、コマンドラインから @samp{-e}
オプションを指定して指定された無視ルールは使用してください。これにより、ビルド生成物を含む、追跡されていないすべてのファイルを削除できます。これを使用して（おそらく「git
restore」または「git reset」と組み合わせて）、ビルドをテストするためのクリーンな、元の作業ディレクトリを作成できます。

@item  @samp{-X} 
Gitによって無視されたファイルのみを削除します。これは、すべてを最初から再構築するのに役立つ場合がありますが、手動で作成したファイルは保持します。
@end table

@noindent

@chapheading Interactive mode

コマンドがinteractive modeに入ると、クリーンアップするファイルとディレクトリが表示され、インタラクティブコマンドループに入ります。

コマンドループは、使用可能なサブコマンドのリストを表示し、「Whatnow>
」というプロンプトを表示します。一般に、プロンプトが単一の「>」で終わる場合、以下のように、選択肢の1つだけを選択し、ENTERキーを押します:

@example
    *** Commands ***
        1: clean                2: filter by pattern    3: select by numbers
        4: ask each             5: quit                 6: help
    What now> 1
@end example


選択が一意である限り、上記は「c」または「clean」と打ち込む事もできます。

メインコマンドループには6つのサブコマンドがあります。

@table @asis

@item  clean 
ファイルとディレクトリのクリーニングを開始して、終了(quit)します。

@item  filter by pattern 
これにより、削除するファイルとディレクトリが表示され、「Input ignore
patterns>>」(入力無視パターン)プロンプトが表示されます。スペースで区切られたパターンを入力して、ファイルとディレクトリを削除から除外できます。
例えば。 「* .c * .h」は、「.c」と「.h」で終わるファイルを削除から除外します。そして、結果に満足したら、ENTER
を押してメインメニューに戻ります。

@item  select by numbers 
これにより、削除するファイルとディレクトリが表示され、「Select items to
delete>>」(削除するアイテムを選択)というプロンプトが表示されます。プロンプトがこのように二重の「>>」で終わる場合、空白またはコンマで連結して複数の選択を行うことができます。また、あなたは範囲を伝えることができます。
例えば「2-57,9」でリストから2,3,4,5,7,9を選択します。範囲の2番目の数値を省略すると、残りのすべての項目が選択されます。
例えば「7-」はリストから7,8,9を選択します。「*」dで全てを選択できます。そして、結果に満足したら、ENTER を押してメインメニューに戻ります。

@item  ask each 
これはクリーニングが始まると、アイテムを削除するために一つずつ確認する必要があります。この操作は、上記の2つのアクションほど効率的ではないことに注意してください。

@item  quit 
これにより、クリーニングを行わずに終了(quit)できます。

@item  help 
git-cleanの対話的な簡単な使用法を示します。
@end table

@noindent

@chapheading SEE ALSO

gitignore(5)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-clone,,,Top
@chapheading Name

git-clone — Clone a repository into a new directory

@noindent

@chapheading Synopsis

@display
git clone [--template=<template_directory>]
          [-l] [-s] [--no-hardlinks] [-q] [-n] [--bare] [--mirror]
          [-o <name>] [-b <name>] [-u <upload-pack>] [--reference <repository>]
          [--dissociate] [--separate-git-dir <git dir>]
          [--depth <depth>] [--[no-]single-branch] [--no-tags]
          [--recurse-submodules[=<pathspec>]] [--[no-]shallow-submodules]
          [--[no-]remote-submodules] [--jobs <n>] [--sparse] [--[no-]reject-shallow]
          [--filter=<filter>] [--] <repository>
          [<directory>]
@end display


@noindent

@chapheading DESCRIPTION

Clones a repository into a newly created directory, creates remote-tracking
branches for each branch in the cloned repository (visible using @samp{git branch
--remotes}), and creates and checks out an initial branch that is forked
from the cloned repository’s currently active branch.

After the clone, a plain @samp{git fetch} without arguments will update all the
remote-tracking branches, and a @samp{git pull} without arguments will in
addition merge the remote master branch into the current master branch, if
any (this is untrue when "--single-branch" is given; see below).

This default configuration is achieved by creating references to the remote
branch heads under @samp{refs/remotes/origin} and by initializing
@samp{remote.origin.url} and @samp{remote.origin.fetch} configuration variables.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-l} 
@itemx  @samp{--local} 
When the repository to clone from is on a local machine, this flag bypasses
the normal "Git aware" transport mechanism and clones the repository by
making a copy of HEAD and everything under objects and refs directories.
The files under @samp{.git/objects/} directory are hardlinked to save space when
possible.

If the repository is specified as a local path (e.g., @samp{/path/to/repo}), this
is the default, and --local is essentially a no-op.  If the repository is
specified as a URL, then this flag is ignored (and we never use the local
optimizations).  Specifying @samp{--no-local} will override the default when
@samp{/path/to/repo} is given, using the regular Git transport instead.

@strong{NOTE}: this operation can race with concurrent modification to the
source repository, similar to running @samp{cp -r src dst} while modifying
@samp{src}.

@item  @samp{--no-hardlinks} 
Force the cloning process from a repository on a local filesystem to copy
the files under the @samp{.git/objects} directory instead of using
hardlinks. This may be desirable if you are trying to make a back-up of your
repository.

@item  @samp{-s} 
@itemx  @samp{--shared} 
When the repository to clone is on the local machine, instead of using hard
links, automatically setup @samp{.git/objects/info/alternates} to share the
objects with the source repository.  The resulting repository starts out
without any object of its own.

@strong{NOTE}: this is a possibly dangerous operation; do @strong{not} use
it unless you understand what it does. If you clone your
repository using this option and then delete branches (or use any
other Git command that makes any existing commit unreferenced) in the
source repository, some objects may become unreferenced (or dangling).
These objects may be removed by normal Git operations (such as @samp{git commit})
which automatically call @samp{git maintenance run --auto}. (See
git-maintenance(1).) If these objects are removed and were referenced
by the cloned repository, then the cloned repository will become corrupt.

Note that running @samp{git repack} without the @samp{--local} option in a repository
cloned with @samp{--shared} will copy objects from the source repository into a
pack in the cloned repository, removing the disk space savings of @samp{clone
--shared}.  It is safe, however, to run @samp{git gc}, which uses the @samp{--local}
option by default.

If you want to break the dependency of a repository cloned with @samp{--shared}
on its source repository, you can simply run @samp{git repack -a} to copy all
objects from the source repository into a pack in the cloned repository.

@item  @samp{--reference[-if-able] <repository>} 
If the reference repository is on the local machine, automatically setup
@samp{.git/objects/info/alternates} to obtain objects from the reference
repository.  Using an already existing repository as an alternate will
require fewer objects to be copied from the repository being cloned,
reducing network and local storage costs.  When using the
@samp{--reference-if-able}, a non existing directory is skipped with a warning
instead of aborting the clone.

@strong{NOTE}: see the NOTE for the @samp{--shared} option, and also the
@samp{--dissociate} option.

@item  @samp{--dissociate} 
Borrow the objects from reference repositories specified with the
@samp{--reference} options only to reduce network transfer, and stop borrowing
from them after a clone is made by making necessary local copies of borrowed
objects.  This option can also be used when cloning locally from a
repository that already borrows objects from another repository—the new
repository will borrow objects from the same repository, and this option can
be used to stop the borrowing.

@item  @samp{-q} 
@itemx  @samp{--quiet} 
Operate quietly.  Progress is not reported to the standard error stream.

@item  @samp{-v} 
@itemx  @samp{--verbose} 
Run verbosely. Does not affect the reporting of progress status to the
standard error stream.

@item  @samp{--progress} 
Progress status is reported on the standard error stream by default when it
is attached to a terminal, unless @samp{--quiet} is specified. This flag forces
progress status even if the standard error stream is not directed to a
terminal.

@item  @samp{--server-option=<option>} 
Transmit the given string to the server when communicating using protocol
version 2.  The given string must not contain a NUL or LF character.  The
server’s handling of server options, including unknown ones, is
server-specific.  When multiple @samp{--server-option=<option>} are given, they
are all sent to the other side in the order listed on the command line.

@item  @samp{-n} 
@itemx  @samp{--no-checkout} 
No checkout of HEAD is performed after the clone is complete.

@item  @samp{--[no-]reject-shallow} 
Fail if the source repository is a shallow repository.  The
@emph{clone.rejectShallow} configuration variable can be used to specify the
default.

@item  @samp{--bare} 
Make a @emph{bare} Git repository.  That is, instead of creating @samp{<directory>}
and placing the administrative files in @samp{<directory>/.git}, make the
@samp{<directory>} itself the @samp{$GIT_DIR}. This obviously implies the
@samp{--no-checkout} because there is nowhere to check out the working tree.
Also the branch heads at the remote are copied directly to corresponding
local branch heads, without mapping them to @samp{refs/remotes/origin/}.  When
this option is used, neither remote-tracking branches nor the related
configuration variables are created.

@item  @samp{--sparse} 
Initialize the sparse-checkout file so the working directory starts with
only the files in the root of the repository. The sparse-checkout file can
be modified to grow the working directory as needed.

@item  @samp{--filter=<filter-spec>} 
Use the partial clone feature and request that the server sends a subset of
reachable objects according to a given object filter.  When using
@samp{--filter}, the supplied @samp{<filter-spec>} is used for the partial clone
filter. For example, @samp{--filter=blob:none} will filter out all blobs (file
contents) until needed by Git. Also, @samp{--filter=blob:limit=<size>} will
filter out all blobs of size at least @samp{<size>}. For more details on filter
specifications, see the @samp{--filter} option in git-rev-list(1).

@item  @samp{--mirror} 
Set up a mirror of the source repository.  This implies @samp{--bare}.  Compared
to @samp{--bare}, @samp{--mirror} not only maps local branches of the source to local
branches of the target, it maps all refs (including remote-tracking
branches, notes etc.) and sets up a refspec configuration such that all
these refs are overwritten by a @samp{git remote update} in the target
repository.

@item  @samp{-o <name>} 
@itemx  @samp{--origin <name>} 
Instead of using the remote name @samp{origin} to keep track of the upstream
repository, use @samp{<name>}.  Overrides @samp{clone.defaultRemoteName} from the
config.

@item  @samp{-b <name>} 
@itemx  @samp{--branch <name>} 
Instead of pointing the newly created HEAD to the branch pointed to by the
cloned repository’s HEAD, point to @samp{<name>} branch instead. In a non-bare
repository, this is the branch that will be checked out.  @samp{--branch} can
also take tags and detaches the HEAD at that commit in the resulting
repository.

@item  @samp{-u <upload-pack>} 
@itemx  @samp{--upload-pack <upload-pack>} 
When given, and the repository to clone from is accessed via ssh, this
specifies a non-default path for the command run on the other end.

@item  @samp{--template=<template_directory>} 
Specify the directory from which templates will be used; (See the "TEMPLATE
DIRECTORY" section of git-init(1).)

@item  @samp{-c <key>=<value>} 
@itemx  @samp{--config <key>=<value>} 
Set a configuration variable in the newly-created repository; this takes
effect immediately after the repository is initialized, but before the
remote history is fetched or any files checked out.  The key is in the same
format as expected by git-config(1) (e.g., @samp{core.eol=true}). If
multiple values are given for the same key, each value will be written to
the config file. This makes it safe, for example, to add additional fetch
refspecs to the origin remote.

Due to limitations of the current implementation, some configuration
variables do not take effect until after the initial fetch and checkout.
Configuration variables known to not take effect are: @samp{remote.<name>.mirror}
and @samp{remote.<name>.tagOpt}.  Use the corresponding @samp{--mirror} and
@samp{--no-tags} options instead.

@item  @samp{--depth <depth>} 
Create a @emph{shallow} clone with a history truncated to the specified number of
commits. Implies @samp{--single-branch} unless @samp{--no-single-branch} is given to
fetch the histories near the tips of all branches. If you want to clone
submodules shallowly, also pass @samp{--shallow-submodules}.

@item  @samp{--shallow-since=<date>} 
Create a shallow clone with a history after the specified time.

@item  @samp{--shallow-exclude=<revision>} 
Create a shallow clone with a history, excluding commits reachable from a
specified remote branch or tag.  This option can be specified multiple
times.

@item  @samp{--[no-]single-branch} 
Clone only the history leading to the tip of a single branch, either
specified by the @samp{--branch} option or the primary branch remote’s @samp{HEAD}
points at.  Further fetches into the resulting repository will only update
the remote-tracking branch for the branch this option was used for the
initial cloning.  If the HEAD at the remote did not point at any branch when
@samp{--single-branch} clone was made, no remote-tracking branch is created.

@item  @samp{--no-tags} 
Don’t clone any tags, and set @samp{remote.<remote>.tagOpt=--no-tags} in the
config, ensuring that future @samp{git pull} and @samp{git fetch} operations won’t
follow any tags. Subsequent explicit tag fetches will still work, (see
git-fetch(1)).

Can be used in conjunction with @samp{--single-branch} to clone and maintain a
branch with no references other than a single cloned branch. This is useful
e.g. to maintain minimal clones of the default branch of some repository for
search indexing.

@item  @samp{--recurse-submodules[=<pathspec>]} 
After the clone is created, initialize and clone submodules within based on
the provided pathspec.  If no pathspec is provided, all submodules are
initialized and cloned.  This option can be given multiple times for
pathspecs consisting of multiple entries.  The resulting clone has
@samp{submodule.active} set to the provided pathspec, or "." (meaning all
submodules) if no pathspec is provided.

Submodules are initialized and cloned using their default settings. This is
equivalent to running @samp{git submodule update --init --recursive <pathspec>}
immediately after the clone is finished. This option is ignored if the
cloned repository does not have a worktree/checkout (i.e. if any of
@samp{--no-checkout}/@samp{-n}, @samp{--bare}, or @samp{--mirror} is given)

@item  @samp{--[no-]shallow-submodules} 
All submodules which are cloned will be shallow with a depth of 1.

@item  @samp{--[no-]remote-submodules} 
All submodules which are cloned will use the status of the submodule’s
remote-tracking branch to update the submodule, rather than the
superproject’s recorded SHA-1. Equivalent to passing @samp{--remote} to @samp{git
submodule update}.

@item  @samp{--separate-git-dir=<git dir>} 
Instead of placing the cloned repository where it is supposed to be, place
the cloned repository at the specified directory, then make a
filesystem-agnostic Git symbolic link to there.  The result is Git
repository can be separated from working tree.

@item  @samp{-j <n>} 
@itemx  @samp{--jobs <n>} 
The number of submodules fetched at the same time.  Defaults to the
@samp{submodule.fetchJobs} option.

@item  <repository> 
The (possibly remote) repository to clone from.  See the GIT URLS 
section below for more information on specifying repositories.

@item  <directory> 
The name of a new directory to clone into.  The "humanish" part of the
source repository is used if no directory is explicitly given (@samp{repo} for
@samp{/path/to/repo.git} and @samp{foo} for @samp{host.xz:foo/.git}).  Cloning into an
existing directory is only allowed if the directory is empty.
@end table

@noindent

@chapheading GIT URLS

一般に、URLには、トランスポートプロトコル、リモートサーバーのアドレス、およびリポジトリへのパスに関する情報が含まれています。トランスポートプロトコルによっては、一部の情報が欠落している場合があります。

Gitはsshとgitとhttpとhttpsプロトコルをサポートします(さらにftpとftpsをフェッチに使用できますが、これは非効率的で非推奨です。使用しないでください)。

ネイティブトランスポート(つまり、 git://
URL)は認証を行わないため、セキュリティで保護されていないネットワークでは注意して使用する必要があります。

以下の構文を使用できます:

@itemize 

@item
ssh://[user@@]host.xz[:port]/path/to/repo.git/

@item
git://host.xz[:port]/path/to/repo.git/

@item
http[s]://host.xz[:port]/path/to/repo.git/

@item
ftp[s]://host.xz[:port]/path/to/repo.git/
@end itemize

代替のscpのような構文をsshプロトコルで使用することもできます:

@itemize 

@item
[user@@]host.xz:path/to/repo.git/
@end itemize

この構文は、最初のコロン(:)の前にスラッシュがない場合にのみ認識されます。これは、コロンを含むローカルパスを区別するのに役立ちます。たとえば、ローカルパス
@samp{foo:bar} を、絶対パスまたは @samp{./foo:bar} として指定して、 ssh url として誤って解釈されないようにすることができます。

sshおよびgitプロトコルは、さらに ~username 拡張をサポートします:

@itemize 

@item
ssh://[user@@]host.xz[:port]/~[user]/path/to/repo.git/

@item
git://host.xz[:port]/~[user]/path/to/repo.git/

@item
[user@@]host.xz:/~[user]/path/to/repo.git/
@end itemize

Gitでもネイティブにサポートされているローカルリポジトリの場合、以下の構文を使用できます:

@itemize 

@item
/path/to/repo.git/

@item
file:///path/to/repo.git/
@end itemize

これらの2つの構文は、前者が @samp{--local} オプションを含むことを除いて、ほとんど同等です。

「git clone」と「git fetch」と「git pull」は、「git push」と違って適切なバンドルファイルを受け入れます。
git-bundle(1) を参照してください。

Gitが特定のトランスポートプロトコルを処理する方法を知らない場合、Gitは @emph{remote-<transport>}
リモートヘルパー(存在する場合)を使用しようとします。リモートヘルパーを明示的に要求するには、以下の構文を使用できます:

@itemize 

@item
<transport>::<address>
@end itemize

ここで、 <address>
は、パス、サーバーとパス、または呼び出されている特定のリモートヘルパーによって認識される任意のURLのような文字列です。詳細については、
gitremote-helpers(7) を参照してください。

同じ名前のリモートリポジトリが多数あり、それらに異なる形式を使用する場合(あなたの使用するURLが機能するURLに書き換えられるように)、以下の形式の構成セクションを作成できます:

@example
        [url "<actual url base>"]
                insteadOf = <other url base>
@end example


例えば、以下のようになります:

@example
        [url "git://git.host.xz/"]
                insteadOf = host.xz:/path/to/
                insteadOf = work:
@end example


"work:repo.git" や "host.xz:/path/to/repo.git"
のようなURLは、任意のコンテキストで、"git://git.host.xz/repo.git" に書き換えられます。

プッシュ専用のURLを書き換えたい場合は、以下の形式の構成セクションを作成できます:

@example
        [url "<actual url base>"]
                pushInsteadOf = <other url base>
@end example


例えば、以下のようになります:

@example
        [url "ssh://example.org/"]
                pushInsteadOf = git://example.org/
@end example


"git://example.org/path/to/repo.git" のようなURLは、プッシュの場合は
"ssh://example.org/path/to/repo.git" に書き換えられますが、プルは引き続き元のURLのままです。

@noindent

@chapheading EXAMPLES

@itemize 

@item
Clone from upstream:

@example
$ git clone git://git.kernel.org/pub/scm/.../linux.git my-linux
$ cd my-linux
$ make
@end example


@item
Make a local clone that borrows from the current directory, without checking
things out:

@example
$ git clone -l -s -n . ../copy
$ cd ../copy
$ git show-branch
@end example


@item
Clone from upstream while borrowing from an existing local directory:

@example
$ git clone --reference /git/linux.git \
        git://git.kernel.org/pub/scm/.../linux.git \
        my-linux
$ cd my-linux
@end example


@item
Create a bare repository to publish your changes to the public:

@example
$ git clone --bare -l /home/proj/.git /pub/scm/proj.git
@end example

@end itemize

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-column,,,Top
@chapheading Name

git-column — データを複数列表示する

@noindent

@chapheading Synopsis

@display
git column [--command=<name>] [--[raw-]mode=<mode>] [--width=<width>]
             [--indent=<string>] [--nl=<string>] [--padding=<n>]
@end display


@noindent

@chapheading DESCRIPTION

このコマンドは、標準入力の行を複数の列を持つテーブル(表)にフォーマットします。各入力行は、テーブルの1つのセルを占有します。これは、出力を複数列にフォーマットするために他のgitコマンドによって内部的に使用されます。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--command=<name>} 
構成変数 column.<name> とcolumn.ui を使用してレイアウトモードを探します。

@item  @samp{--mode=<mode>} 
レイアウトモードを指定します。 git-config(1) のオプション構文については、構成変数 column.ui
を参照してください。

@item  @samp{--raw-mode=<n>} 
@samp{--mode}
と同じですが、数値としてエンコードされたモードを使用します。これは主に、レイアウトモードをすでにパースしている他のコマンドによって使用されます。

@item  @samp{--width=<width>} 
端末幅を指定します。デフォルトでは、「git column」は端末の幅を検出するか、検出できない場合は80にフォールバックします。

@item  @samp{--indent=<string>} 
各行の先頭に印刷される文字列。

@item  @samp{--nl=<string>} 
改行文字を含む、各行の終わりに印刷される文字列。

@item  @samp{--padding=<N>} 
列間のスペースの数。 デフォルトでは1つの空白。
@end table

@noindent

@chapheading EXAMPLES

データを複数列(columns)でフォーマット:

@example
$ seq 1 24 | git column --mode=column --padding=5
1      4      7      10     13     16     19     22
2      5      8      11     14     17     20     23
3      6      9      12     15     18     21     24
@end example


データを複数行(rows)でフォーマット:

@example
$ seq 1 21 | git column --mode=row --padding=5
1      2      3      4      5      6      7
8      9      10     11     12     13     14
15     16     17     18     19     20     21
@end example


列幅が等しくないテーブルにいくつかのタグをリストします:

@example
$ git tag --list 'v2.4.*' --column=row,dense
v2.4.0  v2.4.0-rc0  v2.4.0-rc1  v2.4.0-rc2  v2.4.0-rc3
v2.4.1  v2.4.10     v2.4.11     v2.4.12     v2.4.2
v2.4.3  v2.4.4      v2.4.5      v2.4.6      v2.4.7
v2.4.8  v2.4.9
@end example


@noindent

@chapheading GIT

Part of the git(1) suite

@node git-commit-graph,,,Top
@chapheading Name

git-commit-graph — Gitコミットグラフファイル(commit-graph file)の書き出しと検証(verify)

@noindent

@chapheading Synopsis

@display
git commit-graph verify [--object-dir <dir>] [--shallow] [--[no-]progress]
git commit-graph write <options> [--object-dir <dir>] [--[no-]progress]
@end display


@noindent

@chapheading DESCRIPTION

シリアル化されたコミットグラフファイルを管理します。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--object-dir} 
パックファイルとコミットグラフファイルの場所として、指定のディレクトリを使用します。このパラメータは、完全な @samp{.git}
ディレクトリではなく、objectsディレクトリのみを持つ代替の場所を指定するために存在します。コミットグラフファイルは @samp{<dir>/info}
ディレクトリにあり、パックファイルは @samp{<dir>/pack}
にあるものと期待されます。ディレクトリを絶対パスにすることができなかった場合、または既知のオブジェクトディレクトリと一致しない場合、 @samp{git
commit-graph ...} はゼロ以外のステータスで終了します。

@item  @samp{--[no-]progress} 
進行状況を明示的にオン/オフにします。どちらも指定されていない場合、標準エラーが端末に接続されていれば進行状況が表示されます。
@end table

@noindent

@chapheading COMMANDS

@table @asis

@item  @emph{write} 
パックファイルで見つかったコミットに基づいてコミットグラフファイルを書き出します。構成オプション @samp{core.commitGraph}
が無効になっている場合、このコマンドは警告を出力し、コミットグラフファイルを書き込まずに成功を返します。

@samp{--stdin-packs}
オプションを使用して、指定のパックインデックス内のオブジェクトのみをウォークすることにより、新しいコミットグラフを生成します。
(@samp{--stdin-commits} または @samp{--reachable} と組み合わせることはできません。)

@samp{--stdin-commits}
オプションと使用して、16進数のOIDのリストとしてstdinで指定されたコミットから始まるコミットを1行に1つずつウォークして、新しいコミットグラフを生成します。(直接に、またはタグの皮むきによって、)非コミットに解決されるOIDは黙って無視されます。不正な形式のOID、または存在しないOIDは、エラーを生成します。
(@samp{--stdin-packs} または @samp{--reachable} と組み合わせることはできません。)

@samp{--reachable} オプションと使用して、すべての参照で開始するコミットをウォークして、新しいコミットグラフを生成します。
(@samp{--stdin-commits} または @samp{--stdin-packs} と組み合わせることはできません。)

@samp{--append} オプションと使用して、既存のコミットグラフファイルに存在するすべてのコミットを含めます。

@samp{--changed-paths} オプションと使用すると、コミットとその最初の親(first
parent)の間で変更されたパスに関する情報を計算して書き込みます。この操作は、大規模なリポジトリでは時間がかかる場合があります。 @samp{git log
-- <path>}
を使用すると、ディレクトリまたはファイルの履歴を取得するためのパフォーマンスが大幅に向上します。このオプションが指定されている場合、その後のコミットグラフ書き込みでは、このオプションが指定されたものであると自動的に想定されます。このデータの保存を停止するには、
@samp{--no-changed-paths} を使用します。

@samp{--max-new-filters=<n>} オプションと使用して、(@samp{--changed-paths} が指定されている場合、)最大で @samp{n}
の新しいブルームフィルター(Bloom filters)を生成します。 @samp{n} が @samp{-1}
の場合、制限は適用されません。この制限に対しては、新しいレイヤーに存在するコミットのみがカウントされます。以前のレイヤーでブルームフィルターをさかのぼって計算するには、
@samp{--split=replace} を使用することをお勧めします。 @samp{commitGraph.maxNewFilters} 構成をオーバーライドします。

@samp{--split[=<strategy>]} オプションと使用して、 @samp{<dir>/info/commit-graphs}
に格納されている複数のコミットグラフファイルのチェーンとしてコミットグラフを記述します。コミットグラフレイヤーは、戦略およびその他の分割オプションに基づいてマージされます。コミットグラフにまだ含まれていない新しいコミットは、新しい先端ファイル(tip
file)に追加されます。以下のマージ条件が満たされた場合、このファイルは既存のファイルとマージされます:

@itemize 

@item
@samp{--split=no-merge} が指定されている場合、マージは実行されず、残りのオプションは無視されます。 @samp{--split=replace}
は、既存のチェーンを新しいチェーンで上書きします。裸の @samp{--split} は後続のオプションに従います。 (注意:
コミットグラフのチェーンをマージすると、既存のチェーンが長さ1のチェーンに置き換えられ、最初で唯一の増分がグラフ全体を保持することに注意してください)。

@item
@samp{--size-multiple=<X>} が指定されていない場合は、 Xを2に等しくします。新しい先端ファイル(tip
file)にN個のコミットがあり、以前の先端にM個のコミットがあり、「X 掛ける N」が M
より大きい場合は、代わりに2つのファイルを1つのファイルにマージします。

@item
@samp{--max-commits=<M>} オプションの M が正の整数で指定され、新しい先端ファイル(tip file) に M
以上のコミットがある場合は、代わりに新しい先端を以前の先端とマージします。

最後に、 @samp{--expire-time=<datetime>} が指定されていない場合は、
datetimeを現在の時刻とします。分割コミットグラフ(split
commit-graph)を書き込んだ後、変更時刻がdatetimeより古い未使用のコミットグラフをすべて削除します。
@end itemize

@item  @emph{verify} 
コミットグラフファイルを読み取り、その内容をオブジェクトデータベースと照合して確認(verify)します。破損したデータをチェックするために使用されます。

@samp{--shallow} オプションと使用すると、分割コミットグラフ(split
commit-graphs)のチェーン内の先端コミットグラフファイルのみをチェックします。
@end table

@noindent

@chapheading EXAMPLES

@itemize 

@item
パックされたコミットのコミットグラフファイルをローカルの @samp{.git} ディレクトリに書き込みます。

@example
$ git commit-graph write
@end example


@item
@samp{<pack-index>} のコミットを使用して、現在のコミットグラフファイルを拡張するコミットグラフファイルを書き出します。

@example
$ echo <pack-index> | git commit-graph write --stdin-packs
@end example


@item
到達可能なすべてのコミットを含むコミットグラフファイルを作成します。

@example
$ git show-ref -s | git commit-graph write --stdin-commits
@end example


@item
現在のコミットグラフファイル内のすべてのコミットと @samp{HEAD} から到達可能なコミットを含むコミットグラフファイルを書き出します。

@example
$ git rev-parse HEAD | git commit-graph write --stdin-commits --append
@end example

@end itemize

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-commit-tree,,,Top
@chapheading Name

git-commit-tree — 新しいコミットオブジェクトを作成します

@noindent

@chapheading Synopsis

@display
git commit-tree <tree> [(-p <parent>)…]
git commit-tree [(-p <parent>)…] [-S[<keyid>]] [(-m <message>)…]
                  [(-F <file>)…] <tree>
@end display


@noindent

@chapheading DESCRIPTION

これは通常、エンドユーザーが直接実行するものではありません。代わりに git-commit(1) を参照してください。

提供されたツリーオブジェクトに基づいて新しいコミットオブジェクトを作成し、標準出力に新しいコミットオブジェクトIDを発行します。 @samp{-m} または
@samp{-F} オプションが指定されていない限り、ログメッセージは標準入力から読み取られます。

@samp{-m} および @samp{-F} オプションは、任意の回数、任意の順序で指定できます。コミットログメッセージは、オプションが指定された順序で作成されます。

コミットオブジェクトには、任意の数の親を含めることができます。親が1つだけの場合、これは通常のコミットです。
複数の親を持つことで、コミットは複数の履歴行の間でマージされます。なお、最初のコミット(ルートコミット)には親はありません。

ツリーは作業ディレクトリの特定のディレクトリ状態を表しますが、コミットはある「時点」における状態を表し、そこに到達する方法を説明します。

あなたがその状態に関するメモをは何処に保存してもGitは気にしませんが、通常、コミットは新しい「HEAD」状態を識別します。実際のところGitは、@samp{.git/HEAD}
が指すファイルに結果を書き込む傾向にあり、最後にコミットされた状態が何であったかを常に確認できるようにしています。

@noindent

@chapheading OPTIONS

@table @asis

@item  <tree> 
既存のツリーオブジェクト。

@item  @samp{-p <parent>} 
各 @samp{-p} は、親コミットオブジェクトのIDを示します。

@item  @samp{-m <message>} 
コミットログメッセージの段落。これは複数回指定でき、各 <message> は独立した段落になります。

@item  @samp{-F <file>} 
指定されたファイルからコミットログメッセージを読み取ります。 標準入力から読み取るには、 @samp{-} を使用します。
これは複数回指定でき、各ファイルの内容は独自した段落になります。

@item  @samp{-S[<keyid>]} 
@itemx  @samp{--gpg-sign[=<keyid>]} 
@itemx  @samp{--no-gpg-sign} 
GPG署名コミット。 @samp{keyid}
引数はオプションで、デフォルトはコミッターIDです。指定する場合は、スペースなしでオプションに指定する必要があります。 @samp{--no-gpg-sign}
は、コマンドラインで前に指定した @samp{--gpg-sign} オプションを無効にするのに役立ちます。
@end table

@noindent

@chapheading Commit Information

コミットをカプセル化します:

@itemize 

@item
全ての親のオブジェクトID

@item
作者名と電子メールアドレスと日付

@item
コミッター名とコミッター電子メールアドレスとコミット日付
@end itemize

コミットコメントは標準入力から読み取られます。変更ログエントリが "<" リダイレクトを介して提供されない場合、「git
commit-tree」は、変更ログエントリがターミナルから入力されて ^D で終了するのを待つだけです。

@noindent

@chapheading DATE FORMATS

@samp{GIT_AUTHOR_DATE} と @samp{GIT_COMMITTER_DATE} 環境変数は、以下の日付形式をサポートします:

@table @asis

@item  Git internal format 
これは @samp{<unix timestamp> <time zone offset>} ここで、 @samp{<unix timestamp>}
UNIXエポックからの秒数です。 @samp{<time zone offset>} はUTCからの正または負のオフセットです。
たとえば、CET(UTCより1時間進んでいます)は @samp{+0100} です。

@item  RFC 2822 
RFC 2822で説明されている標準の電子メール形式。たとえば、 @samp{Thu, 07 Apr 2005 22:13:13 +0200} 。

@item  ISO 8601 
ISO 8601規格で指定されている日時(例: @samp{2005-04-07T22:13:13})。パーサは、 @samp{T}
文字の代わりにスペースも受け入れます。秒の小数部分は無視されます。たとえば、 @samp{2005-04-07T22:13:13.019} は
@samp{2005-04-07T22:13:13} として扱われます。

@quotation

@strong{Note}

日付部分は、上記に加えて、 @samp{YYYY.MM.DD} または @samp{MM/DD/YYYY} または @samp{DD.MM.YYYY} 形式が受け入れられます。
@end quotation
@end table

@noindent

@chapheading Discussion

Gitは、ある程度までは文字エンコードに依存しません。

@itemize 

@item
ブロブオブジェクトの内容は、解釈されていないバイトのシーケンスです。コアレベルでのエンコーディング変換はありません。

@item
パス名はUTF-8正規化形式C(UTF-8 normalization form
C)でエンコードされます。これは、ツリーオブジェクト、インデックスファイル、ref名、およびコマンドライン引数、環境変数、構成ファイル(
@samp{.git/config} (git-config(1) 参照) と gitignore(5) と
gitattributes(5) と gitmodules(5)) のパス名に適用されます。

コアレベルのGitは、パス名を単に非NULバイトのシーケンスとして扱い、パス名をエンコードする変換はありません(MacとWindowsを除く)。したがって、非ASCIIパス名の使用は、レガシー拡張ASCIIエンコーディングを使用するプラットフォームやファイルシステムでもほとんど機能します。ただし、そのようなシステムで作成されたリポジトリは、UTF-8ベースのシステム(Linux、Mac、Windowsなど)では正しく機能しません。その逆も同様です。さらに、多くのGitベースのツールは、パス名がUTF-8であると単純に想定しており、他のエンコーディングを正しく表示できません。

@item
コミットログメッセージは通常UTF-8でエンコードされますが、他の拡張ASCIIエンコードもサポートされています。これには、ISO-8859-x、CP125xなどが含まれますが、UTF-16/32、EBCDIC、およびCJKマルチバイトエンコーディング(GBK、Shift-JIS、Big5、EUC-x、CP9xxなど)は含まれません。
@end itemize

我々はコミットログメッセージをUTF-8でエンコードすることをお勧めしますが、コアとGit
Porcelainはどちらも、プロジェクトでUTF-8を強制しないように設計されています。特定のプロジェクトのすべての参加者がレガシーエンコーディングを使用する方が便利だと感じた場合、Gitはそれを禁止しません。
ただし、覚えておくべきことがいくつかあります。

@enumerate 

@item
@emph{git commit} と @emph{git commit-tree}
は、プロジェクトがレガシーエンコーディングを使用していることを明示的に指定しない限り、与えられたコミットログメッセージが有効なUTF-8文字列のように見えない場合に警告を発します。明示的に指定する方法は、以下のように、
@samp{.git/config} ファイルに @samp{i18n.commitEncoding} を含めることです。

@example
[i18n]
        commitEncoding = ISO-8859-1
@end example


上記の設定で作成されたコミットオブジェクトは、 @samp{encoding} ヘッダーに @samp{i18n.commitEncoding} の値を記録します。
これは、後でそれらを見る他の人々を助けるためです。このヘッダーがないということは、コミットログメッセージがUTF-8でエンコードされていることを意味します。

@item
@emph{git log} と @emph{git show} と @emph{git blame} とその仲間たちは、コミットオブジェクトの @samp{encoding}
ヘッダーを見て、特に指定がない限り、ログメッセージをUTF-8に再コーディングしようとします。あなたは以下のように、 @samp{.git/config}
ファイルの @samp{i18n.logOutputEncoding} を使用して目的の出力エンコーディングを指定できます。

@example
[i18n]
        logOutputEncoding = ISO-8859-1
@end example


この構成変数がない場合は、代わりに @samp{i18n.commitEncoding} の値が使用されます。
@end enumerate

UTF-8への再コーディングは必ずしも可逆的な操作ではないため、我々はコミットが行われたときにコミットログメッセージを再コーディングしないことを意図的に選択したことに注意してください。

@noindent

@chapheading FILES

/etc/mailname

@noindent

@chapheading SEE ALSO

git-write-tree(1) git-commit(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-commit,,,Top
@chapheading Name

git-commit — Record changes to the repository

@noindent

@chapheading Synopsis

@display
git commit [-a | --interactive | --patch] [-s] [-v] [-u<mode>] [--amend]
           [--dry-run] [(-c | -C | --squash) <commit> | --fixup [(amend|reword):]<commit>)]
           [-F <file> | -m <msg>] [--reset-author] [--allow-empty]
           [--allow-empty-message] [--no-verify] [-e] [--author=<author>]
           [--date=<date>] [--cleanup=<mode>] [--[no-]status]
           [-i | -o] [--pathspec-from-file=<file> [--pathspec-file-nul]]
           [(--trailer <token>[(=|:)<value>])…] [-S[<keyid>]]
           [--] [<pathspec>…]
@end display


@noindent

@chapheading DESCRIPTION

Create a new commit containing the current contents of the index and the
given log message describing the changes. The new commit is a direct child
of HEAD, usually the tip of the current branch, and the branch is updated to
point to it (unless no branch is associated with the working tree, in which
case HEAD is "detached" as described in git-checkout(1)).

The content to be committed can be specified in several ways:

@enumerate 

@item
by using git-add(1) to incrementally "add" changes to the index
before using the @emph{commit} command (Note: even modified files must be
"added");

@item
by using git-rm(1) to remove files from the working tree and the
index, again before using the @emph{commit} command;

@item
by listing files as arguments to the @emph{commit} command (without --interactive
or --patch switch), in which case the commit will ignore changes staged in
the index, and instead record the current content of the listed files (which
must already be known to Git);

@item
by using the -a switch with the @emph{commit} command to automatically "add"
changes from all known files (i.e. all files that are already listed in the
index) and to automatically "rm" files in the index that have been removed
from the working tree, and then perform the actual commit;

@item
by using the --interactive or --patch switches with the @emph{commit} command to
decide one by one which files or hunks should be part of the commit in
addition to contents in the index, before finalizing the operation. See the
“Interactive Mode” section of git-add(1) to learn how to operate
these modes.
@end enumerate

The @samp{--dry-run} option can be used to obtain a summary of what is included
by any of the above for the next commit by giving the same set of parameters
(options and paths).

If you make a commit and then find a mistake immediately after that, you can
recover from it with @emph{git reset}.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-a} 
@itemx  @samp{--all} 
Tell the command to automatically stage files that have been modified and
deleted, but new files you have not told Git about are not affected.

@item  @samp{-p} 
@itemx  @samp{--patch} 
Use the interactive patch selection interface to choose which changes to
commit. See git-add(1) for details.

@item  @samp{-C <commit>} 
@itemx  @samp{--reuse-message=<commit>} 
Take an existing commit object, and reuse the log message and the authorship
information (including the timestamp)  when creating the commit.

@item  @samp{-c <commit>} 
@itemx  @samp{--reedit-message=<commit>} 
Like @emph{-C}, but with @samp{-c} the editor is invoked, so that the user can further
edit the commit message.

@item  @samp{--fixup=[(amend|reword):]<commit>} 
Create a new commit which "fixes up" @samp{<commit>} when applied with @samp{git
rebase --autosquash}. Plain @samp{--fixup=<commit>} creates a "fixup!" commit
which changes the content of @samp{<commit>} but leaves its log message
untouched. @samp{--fixup=amend:<commit>} is similar but creates an "amend!"
commit which also replaces the log message of @samp{<commit>} with the log
message of the "amend!" commit.  @samp{--fixup=reword:<commit>} creates an
"amend!" commit which replaces the log message of @samp{<commit>} with its own
log message but makes no changes to the content of @samp{<commit>}.

The commit created by plain @samp{--fixup=<commit>} has a subject composed of
"fixup!" followed by the subject line from <commit>, and is recognized
specially by @samp{git rebase --autosquash}. The @samp{-m} option may be used to
supplement the log message of the created commit, but the additional
commentary will be thrown away once the "fixup!" commit is squashed into
@samp{<commit>} by @samp{git rebase --autosquash}.

The commit created by @samp{--fixup=amend:<commit>} is similar but its subject is
instead prefixed with "amend!". The log message of <commit> is copied into
the log message of the "amend!" commit and opened in an editor so it can be
refined. When @samp{git rebase --autosquash} squashes the "amend!" commit into
@samp{<commit>}, the log message of @samp{<commit>} is replaced by the refined log
message from the "amend!" commit. It is an error for the "amend!" commit’s
log message to be empty unless @samp{--allow-empty-message} is specified.

@samp{--fixup=reword:<commit>} is shorthand for @samp{--fixup=amend:<commit>
--only}. It creates an "amend!" commit with only a log message (ignoring any
changes staged in the index). When squashed by @samp{git rebase --autosquash}, it
replaces the log message of @samp{<commit>} without making any other changes.

Neither "fixup!" nor "amend!" commits change authorship of @samp{<commit>} when
applied by @samp{git rebase --autosquash}.  See git-rebase(1) for
details.

@item  @samp{--squash=<commit>} 
Construct a commit message for use with @samp{rebase --autosquash}.  The commit
message subject line is taken from the specified commit with a prefix of
"squash! ".  Can be used with additional commit message options
(@samp{-m}/@samp{-c}/@samp{-C}/@samp{-F}). See git-rebase(1) for details.

@item  @samp{--reset-author} 
When used with -C/-c/--amend options, or when committing after a conflicting
cherry-pick, declare that the authorship of the resulting commit now belongs
to the committer. This also renews the author timestamp.

@item  @samp{--short} 
When doing a dry-run, give the output in the short-format. See
git-status(1) for details. Implies @samp{--dry-run}.

@item  @samp{--branch} 
Show the branch and tracking info even in short-format.

@item  @samp{--porcelain} 
When doing a dry-run, give the output in a porcelain-ready format. See
git-status(1) for details. Implies @samp{--dry-run}.

@item  @samp{--long} 
When doing a dry-run, give the output in the long-format.  Implies
@samp{--dry-run}.

@item  @samp{-z} 
@itemx  @samp{--null} 
When showing @samp{short} or @samp{porcelain} status output, print the filename
verbatim and terminate the entries with NUL, instead of LF.  If no format is
given, implies the @samp{--porcelain} output format.  Without the @samp{-z} option,
filenames with "unusual" characters are quoted as explained for the
configuration variable @samp{core.quotePath} (see git-config(1)).

@item  @samp{-F <file>} 
@itemx  @samp{--file=<file>} 
Take the commit message from the given file.  Use @emph{-} to read the message
from the standard input.

@item  @samp{--author=<author>} 
Override the commit author. Specify an explicit author using the standard @samp{A
U Thor <author@@example.com>} format. Otherwise <author> is assumed to be a
pattern and is used to search for an existing commit by that author
(i.e. rev-list --all -i --author=<author>); the commit author is then copied
from the first such commit found.

@item  @samp{--date=<date>} 
Override the author date used in the commit.

@item  @samp{-m <msg>} 
@itemx  @samp{--message=<msg>} 
Use the given <msg> as the commit message.  If multiple @samp{-m} options are
given, their values are concatenated as separate paragraphs.

The @samp{-m} option is mutually exclusive with @samp{-c}, @samp{-C}, and @samp{-F}.

@item  @samp{-t <file>} 
@itemx  @samp{--template=<file>} 
When editing the commit message, start the editor with the contents in the
given file.  The @samp{commit.template} configuration variable is often used to
give this option implicitly to the command.  This mechanism can be used by
projects that want to guide participants with some hints on what to write in
the message in what order.  If the user exits the editor without editing the
message, the commit is aborted.  This has no effect when a message is given
by other means, e.g. with the @samp{-m} or @samp{-F} options.

@item  @samp{-s} 
@itemx  @samp{--signoff} 
@itemx  @samp{--no-signoff} 
コミットログメッセージの最後に、コミッターによる「Signed-off-by」トレーラーを追加します。signoffの意味は、コミットしているプロジェクトによって異なります。たとえば、コミッターがプロジェクトのライセンスに基づいて作品を提出する権利を持っていることを証明したり、開発者の原産地証明書などの寄稿者の代表に同意したりする場合があります。(LinuxカーネルおよびGitプロジェクトで使用されるものについては、http：//developercertificate.orgを参照してください)。プロジェクトでsignoffがどのように使用されるかを理解するには、貢献しているプロジェクトのドキュメントまたはリーダーシップ(leadership)を参照してください。

@samp{--no-signoff} オプションを使用すると、コマンドラインで以前の @samp{--signoff} オプションを無効にすることができます。

@item  @samp{--trailer <token>[(=|:)<value>]} 
Specify a (<token>, <value>) pair that should be applied as a
trailer. (e.g. @samp{git commit --trailer "Signed-off-by:C O Mitter \
<committer@@example.com>" --trailer "Helped-by:C O Mitter \
<committer@@example.com>"} will add the "Signed-off-by" trailer and the
"Helped-by" trailer to the commit message.)  The @samp{trailer.*} configuration
variables (git-interpret-trailers(1)) can be used to define if a
duplicated trailer is omitted, where in the run of trailers each trailer
would appear, and other details.

@item  @samp{-n} 
@itemx  @samp{--no-verify} 
This option bypasses the pre-commit and commit-msg hooks.  See also
githooks(5).

@item  @samp{--allow-empty} 
Usually recording a commit that has the exact same tree as its sole parent
commit is a mistake, and the command prevents you from making such a
commit.  This option bypasses the safety, and is primarily for use by
foreign SCM interface scripts.

@item  @samp{--allow-empty-message} 
Like --allow-empty this command is primarily for use by foreign SCM
interface scripts. It allows you to create a commit with an empty commit
message without using plumbing commands like git-commit-tree(1).

@item  @samp{--cleanup=<mode>} 
This option determines how the supplied commit message should be cleaned up
before committing.  The @emph{<mode>} can be @samp{strip}, @samp{whitespace}, @samp{verbatim},
@samp{scissors} or @samp{default}.

@table @asis

@item  strip 
Strip leading and trailing empty lines, trailing whitespace, commentary and
collapse consecutive empty lines.

@item  whitespace 
Same as @samp{strip} except #commentary is not removed.

@item  verbatim 
Do not change the message at all.

@item  scissors 
Same as @samp{whitespace} except that everything from (and including)  the line
found below is truncated, if the message is to be edited.  "@samp{#}" can be
customized with core.commentChar.

@example
# ------------------------ >8 ------------------------
@end example

@item  default 
Same as @samp{strip} if the message is to be edited.  Otherwise @samp{whitespace}.
@end table

The default can be changed by the @samp{commit.cleanup} configuration variable
(see git-config(1)).

@item  @samp{-e} 
@itemx  @samp{--edit} 
The message taken from file with @samp{-F}, command line with @samp{-m}, and from
commit object with @samp{-C} are usually used as the commit log message
unmodified. This option lets you further edit the message taken from these
sources.

@item  @samp{--no-edit} 
Use the selected commit message without launching an editor.  For example,
@samp{git commit --amend --no-edit} amends a commit without changing its commit
message.

@item  @samp{--amend} 
Replace the tip of the current branch by creating a new commit. The recorded
tree is prepared as usual (including the effect of the @samp{-i} and @samp{-o} options
and explicit pathspec), and the message from the original commit is used as
the starting point, instead of an empty message, when no other message is
specified from the command line via options such as @samp{-m}, @samp{-F}, @samp{-c}, etc.
The new commit has the same parents and author as the current one (the
@samp{--reset-author} option can countermand this).

It is a rough equivalent for:

@example
        $ git reset --soft HEAD^
        $ ... do something else to come up with the right tree ...
        $ git commit -c ORIG_HEAD
@end example


but can be used to amend a merge commit.

You should understand the implications of rewriting history if you amend a
commit that has already been published.  (See the "RECOVERING FROM UPSTREAM
REBASE" section in git-rebase(1).)

@item  @samp{--no-post-rewrite} 
Bypass the post-rewrite hook.

@item  @samp{-i} 
@itemx  @samp{--include} 
Before making a commit out of staged contents so far, stage the contents of
paths given on the command line as well.  This is usually not what you want
unless you are concluding a conflicted merge.

@item  @samp{-o} 
@itemx  @samp{--only} 
Make a commit by taking the updated working tree contents of the paths
specified on the command line, disregarding any contents that have been
staged for other paths. This is the default mode of operation of @emph{git
commit} if any paths are given on the command line, in which case this
option can be omitted.  If this option is specified together with @samp{--amend},
then no paths need to be specified, which can be used to amend the last
commit without committing changes that have already been staged. If used
together with @samp{--allow-empty} paths are also not required, and an empty
commit will be created.

@item  @samp{--pathspec-from-file=<file>} 
Pathspec is passed in @samp{<file>} instead of commandline args. If @samp{<file>} is
exactly @samp{-} then standard input is used. Pathspec elements are separated by
LF or CR/LF. Pathspec elements can be quoted as explained for the
configuration variable @samp{core.quotePath} (see git-config(1)). See
also @samp{--pathspec-file-nul} and global @samp{--literal-pathspecs}.

@item  @samp{--pathspec-file-nul} 
Only meaningful with @samp{--pathspec-from-file}. Pathspec elements are separated
with NUL character and all other characters are taken literally (including
newlines and quotes).

@item  @samp{-u[<mode>]} 
@itemx  @samp{--untracked-files[=<mode>]} 
Show untracked files.

The mode parameter is optional (defaults to @emph{all}), and is used to specify
the handling of untracked files; when -u is not used, the default is
@emph{normal}, i.e. show untracked files and directories.

The possible options are:

@itemize 

@item
@emph{no}     - Show no untracked files

@item
@emph{normal} - Shows untracked files and directories

@item
@emph{all}    - Also shows individual files in untracked directories.
@end itemize

The default can be changed using the status.showUntrackedFiles configuration
variable documented in git-config(1).

@item  @samp{-v} 
@itemx  @samp{--verbose} 
Show unified diff between the HEAD commit and what would be committed at the
bottom of the commit message template to help the user describe the commit
by reminding what changes the commit has.  Note that this diff output
doesn’t have its lines prefixed with @emph{#}. This diff will not be a part of
the commit message. See the @samp{commit.verbose} configuration variable in
git-config(1).

If specified twice, show in addition the unified diff between what would be
committed and the worktree files, i.e. the unstaged changes to tracked
files.

@item  @samp{-q} 
@itemx  @samp{--quiet} 
Suppress commit summary message.

@item  @samp{--dry-run} 
Do not create a commit, but show a list of paths that are to be committed,
paths with local changes that will be left uncommitted and paths that are
untracked.

@item  @samp{--status} 
Include the output of git-status(1) in the commit message template
when using an editor to prepare the commit message.  Defaults to on, but can
be used to override configuration variable commit.status.

@item  @samp{--no-status} 
Do not include the output of git-status(1) in the commit message
template when using an editor to prepare the default commit message.

@item  @samp{-S[<keyid>]} 
@itemx  @samp{--gpg-sign[=<keyid>]} 
@itemx  @samp{--no-gpg-sign} 
GPG-sign commits. The @samp{keyid} argument is optional and defaults to the
committer identity; if specified, it must be stuck to the option without a
space. @samp{--no-gpg-sign} is useful to countermand both @samp{commit.gpgSign}
configuration variable, and earlier @samp{--gpg-sign}.

@item  -- 
Do not interpret any more arguments as options.

@item  <pathspec>… 
When pathspec is given on the command line, commit the contents of the files
that match the pathspec without recording the changes already added to the
index. The contents of these files are also staged for the next commit on
top of what have been staged before.

For more details, see the @emph{pathspec} entry in gitglossary(7).
@end table

@noindent

@chapheading EXAMPLES

When recording your own work, the contents of modified files in your working
tree are temporarily stored to a staging area called the "index" with @emph{git
add}.  A file can be reverted back, only in the index but not in the working
tree, to that of the last commit with @samp{git restore --staged <file>}, which
effectively reverts @emph{git add} and prevents the changes to this file from
participating in the next commit.  After building the state to be committed
incrementally with these commands, @samp{git commit} (without any pathname
parameter) is used to record what has been staged so far.  This is the most
basic form of the command.  An example:

@example
$ edit hello.c
$ git rm goodbye.c
$ git add hello.c
$ git commit
@end example


Instead of staging files after each individual change, you can tell @samp{git
commit} to notice the changes to the files whose contents are tracked in
your working tree and do corresponding @samp{git add} and @samp{git rm} for you.  That
is, this example does the same as the earlier example if there is no other
change in your working tree:

@example
$ edit hello.c
$ rm goodbye.c
$ git commit -a
@end example


The command @samp{git commit -a} first looks at your working tree, notices that
you have modified hello.c and removed goodbye.c, and performs necessary @samp{git
add} and @samp{git rm} for you.

After staging changes to many files, you can alter the order the changes are
recorded in, by giving pathnames to @samp{git commit}.  When pathnames are given,
the command makes a commit that only records the changes made to the named
paths:

@example
$ edit hello.c hello.h
$ git add hello.c hello.h
$ edit Makefile
$ git commit Makefile
@end example


This makes a commit that records the modification to @samp{Makefile}.  The
changes staged for @samp{hello.c} and @samp{hello.h} are not included in the resulting
commit.  However, their changes are not lost — they are still staged and
merely held back.  After the above sequence, if you do:

@example
$ git commit
@end example


this second commit would record the changes to @samp{hello.c} and @samp{hello.h} as
expected.

After a merge (initiated by @emph{git merge} or @emph{git pull}) stops because of
conflicts, cleanly merged paths are already staged to be committed for you,
and paths that conflicted are left in unmerged state.  You would have to
first check which paths are conflicting with @emph{git status} and after fixing
them manually in your working tree, you would stage the result as usual with
@emph{git add}:

@example
$ git status | grep unmerged
unmerged: hello.c
$ edit hello.c
$ git add hello.c
@end example


After resolving conflicts and staging the result, @samp{git ls-files -u} would
stop mentioning the conflicted path.  When you are done, run @samp{git commit} to
finally record the merge:

@example
$ git commit
@end example


As with the case to record your own changes, you can use @samp{-a} option to save
typing.  One difference is that during a merge resolution, you cannot use
@samp{git commit} with pathnames to alter the order the changes are committed,
because the merge should be recorded as a single commit.  In fact, the
command refuses to run when given pathnames (but see @samp{-i} option).

@noindent

@chapheading COMMIT INFORMATION

Author and committer information is taken from the following environment
variables, if set:

@example
GIT_AUTHOR_NAME
GIT_AUTHOR_EMAIL
GIT_AUTHOR_DATE
GIT_COMMITTER_NAME
GIT_COMMITTER_EMAIL
GIT_COMMITTER_DATE
@end example

(nb "<", ">" and "\n"s are stripped)

The author and committer names are by convention some form of a personal
name (that is, the name by which other humans refer to you), although Git
does not enforce or require any particular form. Arbitrary Unicode may be
used, subject to the constraints listed above. This name has no effect on
authentication; for that, see the @samp{credential.username} variable in
git-config(1).

In case (some of) these environment variables are not set, the information
is taken from the configuration items @samp{user.name} and @samp{user.email}, or, if
not present, the environment variable EMAIL, or, if that is not set, system
user name and the hostname used for outgoing mail (taken from
@samp{/etc/mailname} and falling back to the fully qualified hostname when that
file does not exist).

The @samp{author.name} and @samp{committer.name} and their corresponding email options
override @samp{user.name} and @samp{user.email} if set and are overridden themselves
by the environment variables.

The typical usage is to set just the @samp{user.name} and @samp{user.email} variables;
the other options are provided for more complex use cases.

@noindent

@chapheading DATE FORMATS

@samp{GIT_AUTHOR_DATE} と @samp{GIT_COMMITTER_DATE} 環境変数は、以下の日付形式をサポートします:

@table @asis

@item  Git internal format 
これは @samp{<unix timestamp> <time zone offset>} ここで、 @samp{<unix timestamp>}
UNIXエポックからの秒数です。 @samp{<time zone offset>} はUTCからの正または負のオフセットです。
たとえば、CET(UTCより1時間進んでいます)は @samp{+0100} です。

@item  RFC 2822 
RFC 2822で説明されている標準の電子メール形式。たとえば、 @samp{Thu, 07 Apr 2005 22:13:13 +0200} 。

@item  ISO 8601 
ISO 8601規格で指定されている日時(例: @samp{2005-04-07T22:13:13})。パーサは、 @samp{T}
文字の代わりにスペースも受け入れます。秒の小数部分は無視されます。たとえば、 @samp{2005-04-07T22:13:13.019} は
@samp{2005-04-07T22:13:13} として扱われます。

@quotation

@strong{Note}

日付部分は、上記に加えて、 @samp{YYYY.MM.DD} または @samp{MM/DD/YYYY} または @samp{DD.MM.YYYY} 形式が受け入れられます。
@end quotation
@end table

上記のすべての日付形式を認識することに加えて、 @samp{--date} オプションは、 "yesterday" や "last Friday at noon"
など、より人間よりの日付形式も理解しようとします。

@noindent

@chapheading DISCUSSION

Though not required, it’s a good idea to begin the commit message with a
single short (less than 50 character) line summarizing the change, followed
by a blank line and then a more thorough description.  The text up to the
first blank line in a commit message is treated as the commit title, and
that title is used throughout Git.  For example, git-format-patch(1)
turns a commit into email, and it uses the title on the Subject line and the
rest of the commit in the body.

Gitは、ある程度までは文字エンコードに依存しません。

@itemize 

@item
ブロブオブジェクトの内容は、解釈されていないバイトのシーケンスです。コアレベルでのエンコーディング変換はありません。

@item
パス名はUTF-8正規化形式C(UTF-8 normalization form
C)でエンコードされます。これは、ツリーオブジェクト、インデックスファイル、ref名、およびコマンドライン引数、環境変数、構成ファイル(
@samp{.git/config} (git-config(1) 参照) と gitignore(5) と
gitattributes(5) と gitmodules(5)) のパス名に適用されます。

コアレベルのGitは、パス名を単に非NULバイトのシーケンスとして扱い、パス名をエンコードする変換はありません(MacとWindowsを除く)。したがって、非ASCIIパス名の使用は、レガシー拡張ASCIIエンコーディングを使用するプラットフォームやファイルシステムでもほとんど機能します。ただし、そのようなシステムで作成されたリポジトリは、UTF-8ベースのシステム(Linux、Mac、Windowsなど)では正しく機能しません。その逆も同様です。さらに、多くのGitベースのツールは、パス名がUTF-8であると単純に想定しており、他のエンコーディングを正しく表示できません。

@item
コミットログメッセージは通常UTF-8でエンコードされますが、他の拡張ASCIIエンコードもサポートされています。これには、ISO-8859-x、CP125xなどが含まれますが、UTF-16/32、EBCDIC、およびCJKマルチバイトエンコーディング(GBK、Shift-JIS、Big5、EUC-x、CP9xxなど)は含まれません。
@end itemize

我々はコミットログメッセージをUTF-8でエンコードすることをお勧めしますが、コアとGit
Porcelainはどちらも、プロジェクトでUTF-8を強制しないように設計されています。特定のプロジェクトのすべての参加者がレガシーエンコーディングを使用する方が便利だと感じた場合、Gitはそれを禁止しません。
ただし、覚えておくべきことがいくつかあります。

@enumerate 

@item
@emph{git commit} と @emph{git commit-tree}
は、プロジェクトがレガシーエンコーディングを使用していることを明示的に指定しない限り、与えられたコミットログメッセージが有効なUTF-8文字列のように見えない場合に警告を発します。明示的に指定する方法は、以下のように、
@samp{.git/config} ファイルに @samp{i18n.commitEncoding} を含めることです。

@example
[i18n]
        commitEncoding = ISO-8859-1
@end example


上記の設定で作成されたコミットオブジェクトは、 @samp{encoding} ヘッダーに @samp{i18n.commitEncoding} の値を記録します。
これは、後でそれらを見る他の人々を助けるためです。このヘッダーがないということは、コミットログメッセージがUTF-8でエンコードされていることを意味します。

@item
@emph{git log} と @emph{git show} と @emph{git blame} とその仲間たちは、コミットオブジェクトの @samp{encoding}
ヘッダーを見て、特に指定がない限り、ログメッセージをUTF-8に再コーディングしようとします。あなたは以下のように、 @samp{.git/config}
ファイルの @samp{i18n.logOutputEncoding} を使用して目的の出力エンコーディングを指定できます。

@example
[i18n]
        logOutputEncoding = ISO-8859-1
@end example


この構成変数がない場合は、代わりに @samp{i18n.commitEncoding} の値が使用されます。
@end enumerate

UTF-8への再コーディングは必ずしも可逆的な操作ではないため、我々はコミットが行われたときにコミットログメッセージを再コーディングしないことを意図的に選択したことに注意してください。

@noindent

@chapheading ENVIRONMENT AND CONFIGURATION VARIABLES

The editor used to edit the commit log message will be chosen from the
@samp{GIT_EDITOR} environment variable, the core.editor configuration variable,
the @samp{VISUAL} environment variable, or the @samp{EDITOR} environment variable (in
that order).  See git-var(1) for details.

@noindent

@chapheading HOOKS

This command can run @samp{commit-msg}, @samp{prepare-commit-msg}, @samp{pre-commit},
@samp{post-commit} and @samp{post-rewrite} hooks.  See githooks(5) for more
information.

@noindent

@chapheading FILES

@table @asis

@item  @samp{$GIT_DIR/COMMIT_EDITMSG} 
This file contains the commit message of a commit in progress.  If @samp{git
commit} exits due to an error before creating a commit, any commit message
that has been provided by the user (e.g., in an editor session) will be
available in this file, but will be overwritten by the next invocation of
@samp{git commit}.
@end table

@noindent

@chapheading SEE ALSO

git-add(1), git-rm(1), git-mv(1),
git-merge(1), git-commit-tree(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-config,,,Top
@chapheading Name

git-config — リポジトリオプションまたはグローバルオプションを、取得および設定する

@noindent

@chapheading Synopsis

@display
git config [<file-option>] [--type=<type>] [--fixed-value] [--show-origin] [--show-scope] [-z|--null] name [value [value-pattern]]
git config [<file-option>] [--type=<type>] --add name value
git config [<file-option>] [--type=<type>] [--fixed-value] --replace-all name value [value-pattern]
git config [<file-option>] [--type=<type>] [--show-origin] [--show-scope] [-z|--null] [--fixed-value] --get name [value-pattern]
git config [<file-option>] [--type=<type>] [--show-origin] [--show-scope] [-z|--null] [--fixed-value] --get-all name [value-pattern]
git config [<file-option>] [--type=<type>] [--show-origin] [--show-scope] [-z|--null] [--fixed-value] [--name-only] --get-regexp name_regex [value-pattern]
git config [<file-option>] [--type=<type>] [-z|--null] --get-urlmatch name URL
git config [<file-option>] [--fixed-value] --unset name [value-pattern]
git config [<file-option>] [--fixed-value] --unset-all name [value-pattern]
git config [<file-option>] --rename-section old_name new_name
git config [<file-option>] --remove-section name
git config [<file-option>] [--show-origin] [--show-scope] [-z|--null] [--name-only] -l | --list
git config [<file-option>] --get-color name [default]
git config [<file-option>] --get-colorbool name [stdout-is-tty]
git config [<file-option>] -e | --edit
@end display


@noindent

@chapheading DESCRIPTION

このコマンドを使用して、オプションを照会(query)/設定(set)/置換(replace)/設定解除(unset;削除)できます。名前は実際にはドットで区切られたセクションとキーであり、値はエスケープされます。

@samp{--add}
オプションを使用すると、オプションに複数の行を追加できます。複数行で発生する可能性のあるオプションを更新または設定解除する場合は、@samp{value-pattern}
( @samp{--fixed-value}
オプションが指定されていない限り、拡張正規表現)を指定する必要があります。パターンに一致する既存の値のみが更新または設定解除されます。パターンと「一致しない」行を処理する場合は、前に1つの感嘆符(@samp{!})を追加するだけです(@ref{EXAMPLES}
も参照下さい)が、ただし、これは @samp{--fixed-value} オプションが使用されていない場合のみ機能することに注意してください。

@samp{--type=<type>} オプションは @emph{git config} に指示して、指定の<type>の下で入力値(incoming
value)と出力値(outgoing value)が正規化可能であることを確認します。 @samp{-type=<type>}
が指定されていない場合、正規化は実行されません。 呼び出し元は、既に指定済の @samp{--type} 指定子を @samp{--no-type} で設定解除できます。

読み取り時、値はデフォルトでシステム、グローバル、リポジトリのローカル構成ファイルから読み取られ、オプション @samp{--system}
、@samp{--global} 、 @samp{--local} 、 @samp{--worktree} 、 `--file <filename> `
を使用して、その場所から「のみ」読み取るようにコマンドに指示できます(@ref{FILES} 参照)。

書き込み時、新しい値はデフォルトでリポジトリのローカル構成ファイルに書き込まれます。オプション @samp{--system} 、@samp{--global} 、
@samp{--worktree} 、@samp{--file <filename> ` を使用すれば、コマンドにその場所に書き込むよう指示できます(あなたは
`--local} と言うこともでき、そしてこれはデフォルトです)。

このコマンドは、エラー時にゼロ以外のステータスで失敗します。 いくつかの終了コードは以下のとおりです:

@itemize 

@item
セクションキーが不正(ret=1)

@item
セクションまたは名前が与えられてない(ret=2)

@item
configファイルが不正(ret=3)

@item
configファイルに書き込みできない(ret=4)

@item
存在しないオプションの設定を削除(unseet)しようとしました(ret=5)

@item
あなたは、複数の行が一致するオプションを設定(set)/削除(unset)しようとしています(ret=5)

@item
不正な正規表現を使おうとしています(ret=6)
@end itemize

成功の場合、コマンドは終了コード 0 を返します。

使用可能なすべての構成変数のリストは、 @samp{git help --config} コマンドを使用して取得できます。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--replace-all} 
デフォルトの振る舞いでは最大1行を置き換えますが、このオプションより、キー(およびオプションで
@samp{value-pattern})に一致するすべての行が置換されます。

@item  @samp{--add} 
既存の値を変更せずに、オプションに新しい「行を追加」します。 これは @samp{--replace-all} の @samp{value-pattern} として
@emph{^$} を指定しても同じ事が可能です。

@item  @samp{--get} 
指定されたキーの値を取得します(オプションで、値に一致する正規表現でフィルタリングされます)。キーが見つからなかった場合はエラーコード1を返し、複数のキー値が見つかった場合は「最後の値」を返します。

@item  @samp{--get-all} 
@samp{--get} と同様ですが、複数値キー(複数行;multivar)のすべての値を返します。

@item  @samp{--get-regexp} 
@samp{--get-all}
と同様ですが、名前を正規表現として解釈し、キー名を書き出します。正規表現の照合では現在、大文字と小文字が区別され、セクション名と変数名が小文字になっている正規化されたバージョンのキーに対して実行されますが、サブセクション名は大文字と小文字が区別されません。

@item  @samp{--get-urlmatch name URL} 
2つの部分からなる名前 section.key を指定すると、<url> 部分が指定したURLに最もよく一致する section.<url>.key
の値が返されます(そのようなキーが存在しない場合は、
section.keyの値にフォールバックします)。セクションだけを名前として指定した合は、当該セクション内のすべてのキー・値をリストします。値が見つからない場合はエラーコード1を返します。

@item  @samp{--global} 
オプション書き込みの場合: リポジトリの @samp{.git/config} ではなくグローバル @samp{~/.gitconfig}
@samp{$XDG_CONFIG_HOME/git/config} ファイルがある場合は @samp{$XDG_CONFIG_HOME/git/config}
ファイルに書き込みます。

オプション読み取りの場合: 使用可能なすべてのファイルからではなく、グローバル @samp{~/.gitconfig} と
@samp{$XDG_CONFIG_HOME/git/config} からのみ読み取ります。

@ref{FILES} も参照して下さい。

@item  @samp{--system} 
オプション書き込みの場合: リポジトリの @samp{.git/config} ではなくシステム全体の @samp{$(prefix)/etc/gitconfig}
に書き込みます。

オプション読み取りの場合: 使用可能なすべてのファイルからではなく、システム全体の @samp{$(prefix)/etc/gitconfig}
からのみ読み取ります。

@ref{FILES} も参照して下さい。

@item  @samp{--local} 
オプションを書き込む場合: リポジトリの @samp{.git/config} ファイルに書き込みます。これがデフォルトの動作です。

読み取りオプションの場合: 使用可能なすべてのファイルからではなく、リポジトリ @samp{.git/config} からのみ読み取ります。

@ref{FILES} も参照して下さい。

@item  @samp{--worktree} 
@samp{--local} と似ていますが、 @samp{extensions.worktreeConfig} が存在する場合、
@samp{.git/config.worktree} が読み書きされる点が異なります。@samp{extensions.worktreeConfig} が存在しない場合は
@samp{--local} と同じです。

@item  @samp{-f config-file} 
@itemx  @samp{--file config-file} 
オプション書き込みの場合: リポジトリの @samp{.git/config} ではなく、指定のファイルに書き込みます。

オプション読み取りの場合: 使用可能なすべてのファイルからではなく、指定のファイルからのみ読み取ります。

@ref{FILES} も参照して下さい。

@item  @samp{--blob blob} 
@samp{--file} に似ていますが、ファイルの代わりに指定のブロブを使用します。例えば、 @emph{master:.gitmodules}
を使用して、masterブランチのファイル @emph{.gitmodules} から値を読み取ることができます。ブロブ名の綴りのより完全なリストについては、
gitrevisions(7) の「SPECIFYING REVISIONS」セクションを参照してください。

@item  @samp{--remove-section} 
指定のセクションを構成ファイルから削除します。

@item  @samp{--rename-section} 
指定のセクションの名前を新しい名前に変更します。

@item  @samp{--unset} 
キーに一致する行を構成ファイルから削除します。

@item  @samp{--unset-all} 
キーに一致するすべての行を構成ファイルから削除します。

@item  @samp{-l} 
@itemx  @samp{--list} 
構成ファイルに「設定されている」すべての変数とその値を一覧表示します(訳注:使用可能なすべての構成変数のリストは、 @samp{git help
--config})。

@item  @samp{--fixed-value} 
@samp{value-pattern} 引数と一緒に使用する場合、 @samp{value-pattern}
を正規表現ではなく単なる文字列として扱います。これにより、値が @samp{value-pattern}
と完全に等しいものにのみ一致する、名前/値のペアだけに制限されます。

@item  @samp{--type <type>} 
@emph{git config} は、入力または出力が指定された型(type)の制約の下で有効であることを保証し、その型の正規形式で出力値を正規化します。

有効な型には以下のものがあります:

@itemize 

@item
@emph{bool}:  値を「true」または「false」として正規化します。

@item
@emph{int}
値を単純な10進数として正規化します。オプションのサフィックス「k」また「m」または「g」を使用すると、入力時に値にそれぞれ1,024または1,048,576(1024^2)または1,073,741,824(10243)が掛け算されます。

@item
@emph{bool-or-int}: 上記のように、 @emph{bool} または @emph{int} のいずれかに従って正規化します。

@item
@emph{path}: @samp{$HOME} の値を意味する @samp{~} を先頭に追加し、指定のユーザのホームディレクトリを @samp{~user} として正規化します。この
@samp{~} は値を書き込むときには効果がありません(ただし、あなたはコマンドラインから @samp{git config section.variable ~/}
と実行してシェルに展開をさせることができます)。

@item
@emph{expiry-date}: 固定または相対の日付文字列からタイムスタンプに変換することで正規化します。この指定は値を書き込むときには効果がありません。

@item
@emph{color}:
値を取得するときに、ANSIカラーエスケープシーケンスに変換して正規化します。値を設定するとき、指定された値がANSIカラーとして正規化可能であることを確認するために健全性チェックが実行されますが、正規化自体は行われず、そのまま書き込まれます。
@end itemize

@item  @samp{--bool} 
@itemx  @samp{--int} 
@itemx  @samp{--bool-or-int} 
@itemx  @samp{--path} 
@itemx  @samp{--expiry-date} 
タイプ指定子を選択するための歴史的オプション。 代わりに @samp{--type} を優先します(上記参照)。

@item  @samp{--no-type} 
(これ以前に設定されていた場合、)これ以前に設定された型指定子の設定を解除します。このオプションは、「git
config」が取得した変数を正規化しないように要求します。 @samp{--no-type} は、@samp{--type=<type>} または @samp{--<type>}
が無い場合は何の効果もありません。

@item  @samp{-z} 
@itemx  @samp{--null} 
値やキーを出力するすべてのオプションで、値を(改行ではなく)常にヌルバイト(\0)で終了します。代わりに、キーと値の間の区切り文字として改行を使用します。これにより、例えば、改行を含む値を混乱することなく、出力を安全にパースできます。

@item  @samp{--name-only} 
@samp{--list} または @samp{--get-regexp} の構成変数で名前のみを出力します。

@item  @samp{--show-origin} 
照会されたすべての構成オプションの出力に、その構成オプションの出処の種類(ファイル、標準入力、blob、コマンドライン)と実際の出処(設定ファイルのパス、参照、または該当する場合はblobのID)を追加します。

@item  @samp{--show-scope} 
@samp{--show-origin}
と同様に、クエリされたすべての設定オプションの出力をその値のスコープ(ローカル、グローバル、システム、コマンド)で拡張します。

@item  @samp{--get-colorbool name [stdout-is-tty]} 
@samp{name} の色設定(たとえば @samp{color.diff})を見つけて、「true」または「false」を出力します。 @samp{stdout-is-tty}
は「true」または「false」のいずれかである必要があり、構成で「auto」と表示されている場合に考慮されます。 @samp{stdout-is-tty}
がない場合は、コマンド自体の標準出力をチェックし、色を使用する場合はステータス0で終了し、それ以外の場合はステータス1で終了します。 @samp{name}
の色設定が未定義の場合、コマンドはフォールバックとして @samp{color.ui} を使用します。

@item  @samp{--get-color name [default]} 
@samp{name} (例: @samp{color.diff.new}) に設定されている色を見つけて、ANSIカラーエスケープシーケンスとして標準出力に出力します。
@samp{name} に色が設定されていない場合は、オプションの @samp{default} パラメータが代わりに使用されます。

@samp{--type=color [--default=<default>]} は @samp{--get-color} よりも優先されます(ただし、
@samp{--get-color} は、 @samp{--type=color} によって出力される末尾の改行を省略します)。

@item  @samp{-e} 
@itemx  @samp{--edit} 
指定の構成ファイルを変更するためのエディタを開きます。指定できるのは、 @samp{--system} または @samp{--global}
または「リポジトリ」(指定なし;デフォルト)、のいずれかです。

@item  @samp{--[no-]includes} 
値を検索するときは、設定ファイルの @samp{include.*} ディレクティブを尊重します。特定のファイルが指定されている場合(たとえば、 @samp{--file}
、@samp{--global} などを使用した場合)はデフォルトで @samp{off} になり、すべての構成ファイルを検索する場合は @samp{on} になります。

@item  @samp{--default <value>} 
@samp{--get} を使用していて、要求した変数が見つからない場合、 <value> がその変数に割り当てられた値であるかのように動作します。
@end table

@noindent

@chapheading CONFIGURATION

@samp{pager.config} は、構成を一覧表示する場合、つまり、 ` --list` 、または複数の結果を返す可能性のある @samp{--get-*}
のいずれか、を使用する場合にのみ尊重されます。デフォルトでは pager を使用します。

@noindent

@chapheading FILES

@samp{--file} で明示的に設定されていない場合、 @emph{git config} が構成オプションを検索する以下の4つのファイルがあります:

@table @asis

@item  $(prefix)/etc/gitconfig 
システム全体(PC毎)の構成ファイル

@item  $XDG_CONFIG_HOME/git/config 
2番目のユーザー固有の構成ファイルです。 $XDG_CONFIG_HOME が設定されていないか空の場合
@samp{$HOME/.config/git/config} が使用されます。このファイルに設定されている単一値の変数は、 @samp{~/.gitconfig}
にあるものによって上書きされます。このファイルのサポートはごく最近追加されたため、古いバージョンのGitを使用することがある場合は、このファイルを作成しないことをお勧めします。

@item  ~/.gitconfig 
ユーザー毎の構成ファイル。グローバル(global)構成ファイルとも呼ばれる。

@item  $GIT_DIR/config 
リポジトリ毎の構成ファイル。

@item  $GIT_DIR/config.worktree 
これはオプションであり、 @samp{extensions.worktreeConfig} が $GIT_DIR/config に存在する場合にのみ検索されます。
@end table

それ以上のオプションが指定されていない場合、すべての読み取りオプションは、使用可能なこれらのファイルをすべて読み取ります。グローバルまたはシステム全体の構成ファイルが使用できない場合、それらは無視されます。リポジトリ設定ファイルが利用できないか読み取り可能でない場合、「git
config」はゼロ以外のエラーコードで終了します。 ただし、どちらの場合もエラーメッセージは発行されません。

ファイルは上記の順序で読み取られ、「最後」に見つかった値が前に読み取った値よりも優先されます。なお、複数値(multiple
values)を取得すると、すべてのファイルのキーのすべての値が使用されます。

あなたは gitコマンドを実行するとき、 @samp{-c} オプションを使用して、個々の構成パラメーターをオーバーライドできます。詳細については
git(1) を参照してください。

すべての書き込みオプションは、デフォルトではリポジトリ固有の構成ファイルに書き込みます。これは、 @samp{--replace-all} や @samp{--unset}
などのオプションにも影響することに注意してください。 ※ @samp{git config} は一度に1つのファイルのみを変更します。

これらのルールは、 @samp{--global} と` --system` と @samp{--local} と` --worktree` と @samp{--file}
コマンドラインオプションを使用してオーバーライドできます。上記の @ref{OPTIONS} を参照してください。

@noindent

@chapheading ENVIRONMENT

@table @asis

@item  GIT_CONFIG_GLOBAL 
@itemx  GIT_CONFIG_SYSTEM 
グローバルまたはシステムレベルの構成からではなく、指定されたファイルから構成を取得します。詳細については git(1)
を参照してください。

@item  GIT_CONFIG_NOSYSTEM 
システム全体(PC毎)の $(prefix)/etc/gitconfig ファイルからの設定の読み取りをスキップするかどうか。詳細については
git(1) を参照してください。
@end table

@ref{FILES} も参照して下さい。

@table @asis

@item  GIT_CONFIG_COUNT 
@itemx  GIT_CONFIG_KEY_<n> 
@itemx  GIT_CONFIG_VALUE_<n> 
GIT_CONFIG_COUNTが正の数に設定されている場合、その数までのすべての環境ペア GIT_CONFIG_KEY_<n> と
GIT_CONFIG_VALUE_<n>
がプロセスのランタイム構成に追加されます。構成ペアはゼロインデックスです。キーまたは値が欠落している場合は、エラーとして扱われます。空のGIT_CONFIG_COUNTは、GIT_CONFIG_COUNT=0と同じように扱われます。つまり、ペアは処理されません。これらの環境変数は構成ファイルの値をオーバーライドしますが、
@samp{git -c} を介して渡された明示的なオプションによってオーバーライドされます。

これは、共通の構成で複数のgitコマンドを生成したいが、スクリプトを作成する場合など、構成ファイルに依存できない場合に役立ちます。

@item  GIT_CONFIG 
@samp{git config} に @samp{--file} オプションが指定されていない場合は、 @samp{--file} を介して提供されているかのように
@samp{GIT_CONFIG} によって指定されたファイルを使用します。この変数は他のGitコマンドには影響せず、主に歴史的な互換性のためのものです。 通常、
@samp{--file} オプションの代わりに使用する理由はありません。
@end table

@noindent

@chapheading EXAMPLES

以下の .git/config が与えられているものとします:

@example
#
# This is the config file, and
# a '#' or ';' character indicates
# a comment
#

; core variables
[core]
        ; Don't trust file modes
        filemode = false

; Our diff algorithm
[diff]
        external = /usr/local/bin/diff-wrapper
        renames = true

; Proxy settings
[core]
        gitproxy=proxy-command for kernel.org
        gitproxy=default-proxy ; for all the rest

; HTTP
[http]
        sslVerify
[http "https://weak.example.com"]
        sslVerify = false
        cookieFile = /tmp/cookie.txt
@end example


あなたは以下のようにしてfilemodeをtrueに設定できます

@example
% git config core.filemode true
@end example


とある架空のプロキシコマンドエントリで、末尾が kernel.org である行を、 @emph{"ssh" for kernel.org} に置換するには

@example
% git config core.gitproxy '"ssh" for kernel.org' 'for kernel.org$'
@end example


これにより、kernel.orgのキーと値のペアのみが置き換えられます。

renamesのエントリを削除するには

@example
% git config --unset diff.renames
@end example


マルチ変数(multivar)(上記のcore.gitproxyなど)のエントリを削除する場合は、正確に1行の値に一致する正規表現を指定する必要があります。

特定のキーの値を照会するには、次のようにします。

@example
% git config --get core.filemode
@end example


または

@example
% git config core.filemode
@end example


また、マルチ変数(multivar)の照会は:

@example
% git config --get core.gitproxy "for kernel.org$"
@end example


マルチ変数のすべての値を知りたい場合は、次のようにします:

@example
% git config --get-all core.gitproxy
@end example


あなたが危険極まりない人生を送りたい場合は、以下のようにして core.gitproxy の「全て」を新しいものに置き換えることができます。

@example
% git config --replace-all core.gitproxy ssh
@end example


しかし、あなたが本当にデフォルトプロキシの行、つまり「for …」の接尾辞のない行だけを置き換えたい場合は、次のようにします:

@example
% git config core.gitproxy ssh '! for '
@end example


感嘆符(@samp{!})と実際に一致させるには、以下のことを行う必要があります。

@example
% git config section.key value '[!]'
@end example


既存のプロキシを変更せずに新しいプロキシを追加するには、以下を使用します。

@example
% git config --add core.gitproxy '"proxy-command" for example.com'
@end example


あなたのスクリプトで構成からカスタマイズされた色を使う例:

@example
#!/bin/sh
WS=$(git config --get-color color.diff.whitespace "blue reverse")
RESET=$(git config --get-color "" "reset")
echo "$@{WS@}your whitespace color or blue reverse$@{RESET@}"
@end example


URL が @samp{https://weak.example.com} の場合、 @samp{http.sslVerify}
はfalseに設定され、他のすべてのURLでは @samp{true} に設定されます:

@example
% git config --type=bool --get-urlmatch http.sslverify https://good.example.com
true
% git config --type=bool --get-urlmatch http.sslverify https://weak.example.com
false
% git config --get-urlmatch http https://weak.example.com
http.cookieFile /tmp/cookie.txt
http.sslverify false
@end example


@noindent

@chapheading CONFIGURATION FILE

Git構成ファイルには、Gitコマンドの動作に影響を与えるいくつかの変数が含まれています。各リポジトリ内のファイル @samp{.git/config}
と、オプションで @samp{config.worktree} (git-worktree(1) の「CONFIGURATION
FILE」セクションを参照)は、そのリポジトリの設定を保存するために使用され、 @samp{$HOME/.gitconfig} は、ユーザーごとの構成を
@samp{.git/config} ファイルのフォールバック値として保存するために使用されます。 ファイル @samp{/etc/gitconfig}
を使用して、システム全体のデフォルト設定を保存できます。

構成変数は、Git配管コマンドとGit磁器コマンドの両方で使用されます。変数はセクションに分割されます。変数自体の完全修飾変数名は最後のドット区切りセグメントであり、セクション名は最後のドットより前のすべてです。変数名では大文字と小文字が区別されず、英数字(alphanumeric)と
@samp{-}(\x2d)
のみが許可され、英字(alphabetic)で始まる必要があります。一部の変数は複数回現れる場合があり、その変数はmultivalueであると言います(訳注:multiple
lines(複数行)という表現とmultivalueと言う表現が混在する。configでは同じ意味)。

@noindent

@heading Syntax

構文はかなり柔軟で寛容です。空白(whitespace)はほとんど無視されます。 @emph{#} と @emph{;}
文字はそこからその行の行末までコメントにします。空白行は無視されます。

このファイルは、セクションと変数で構成されています。セクションは角括弧内(@samp{[' …
`]')のセクションの名前で始まり、次のセクションが始まるまで続きます。セクション名では大文字と小文字は区別されません。セクション名には、英数字(alphanumeric)
と `-} (\x2d) と @samp{.} (\x2e)
のみを使用できます。各変数はあるセクションに属している必要があります。つまり、変数の最初の設定の前にセクションヘッダーが必要です。

セクションはさらにサブセクションに分割できます。サブセクションを開始するには、以下の例のように、セクションヘッダーで、セクション名からスペースで区切って、その名前を二重引用符で囲みます:

@example
        [section "subsection"]
@end example


サブセクション名では大文字と小文字が区別され、改行とヌルバイト(\x00)以外の任意の文字を含めることができます。 二重引用符 @samp{"} (\x22)と
バックスラッシュ(\x5c;日本の環境では円記号で表示される事がある)は、それぞれ @samp{\"} と @samp{\\}
としてエスケープすることで含めることができます。 他の文字の前にあるバックスラッシュは、読み取るときに削除されます。 たとえば、 @samp{\t} は @samp{t}
として読み取られ、 @samp{\0} は @samp{0}
として読み取られます。セクションヘッダーは複数行にまたがることはできません。変数は、セクションまたは特定のサブセクションに直接属する場合があります。
@samp{[section" subsection "]} がある場合は @samp{[section]} も使用できますが、必須ではありません。

非推奨の @samp{[section.subsection]}
構文があります。この構文では、サブセクション名は小文字に変換され、大文字と小文字が区別されて比較されます。これらのサブセクション名は、セクション名と同じ制限に従います。

他のすべての行(およびセクションヘッダーの後の行の残りの部分)は、「name =
value」(または単に「name」)の形式で設定変数として認識されます(「name」形式は「name =
true」の省略形で、変数をブール値「true」に設定します)。変数名では大文字と小文字が区別されず、英数字(alphanumeric)と @samp{-}
(\x2d) のみが許可され、英字(alphabetic)で始まる必要があります。

値を定義する行は、 @samp{\} (\x5c) で終了することにより、次の行に続けることができます。続けた時、バックスラッシュと行末は削除されて認識されます。
@emph{name =} の後の先頭の空白と、その行で最初に現れるコメント文字 @emph{#} または @emph{;}
以降行末まで、または、行末尾の空白は、二重引用符で囲まれていない限り破棄されます。値内の内部空白はそのまま保持されます。

ダブルクォートで囲まれた中では、ダブルクォート @samp{"} とバックスラッシュ @samp{\} 文字はエスケープしなければなりません。 @samp{"} を表わすには
@samp{\"} を使い、 @samp{\} を表わすには @samp{\\} を使ってください。

( @samp{\"} と @samp{\\} に加えて)認識されるエスケープシーケンスは、改行文字(NL;newline)が @samp{\n} 、水平タブ(HT;TAB)が
@samp{\t} 、バックスペース(BS)が @samp{\b} です。他のエスケープシーケンス(8進エスケープシーケンスを含む)は無効です。

@noindent

@heading Includes

@samp{include} セクションと @samp{includeIf}
セクションを使用すると、別のソースからの設定ディレクティブを含めることができます。これら２つのセクションは、条件がtrueと評価されない場合
@samp{includeIf} セクションが無視されることを除いて、同様に動作します。 以下の「Conditional includes」を参照してください。

特別な @samp{include.path} (または @samp{includeIf.*.path}
)変数をインクルードするファイルの名前に設定することにより、別の構成ファイルをインクルードできます。
変数はその値としてパス名を取り、チルダ展開の対象となります。これらの変数は複数回指定できます。

インクルードファイルの内容は、includeディレクティブの場所で見つかったかのように、すぐに挿入されます。変数の値が相対パスである場合、そのパスは、includeディレクティブが見つかった構成ファイルからの相対パスであると見なされます。例については、以下を参照してください。

@noindent

@heading Conditional includes

@samp{includeIf.<condition>.path}
変数をインクルードするファイルの名前に設定することにより、条件付きで別の構成ファイルをインクルードできます。

条件は、キーワードで始まり、その後にコロンと、形式と意味がキーワードによって異なるいくつかのデータが続きます。サポートされているキーワードは以下のとおりです:

@table @asis

@item  @samp{gitdir} 
キーワード @samp{gitdir:} 続くデータは、グロブパターンとして使用されます。 .git
ディレクトリの場所がパターンと一致する場合、インクルード条件が満たされます。

@samp{.git} の場所は自動検出されるか、 @samp{$GIT_DIR} 環境変数から取得されます。 リポジトリが .git
ファイルを介して(つまり、サブモジュールやリンクされたワークツリーなどから)自動検出される場合、最終的に検出される .git の場所とは、 .git
ファイルの場所ではなく .git ファイルからたどった
.gitディレクトリの場所です。

パターンには、標準のグロブワイルドカードと、複数のパス部分に一致する可能性のある2つの追加のワイルドカード @samp{**/} と @samp{/**}
を含めることができます。詳細については、 gitignore(5) を参照してください。便宜上、以下の記法が使えます:

@itemize 

@item
パターンが @samp{~/} で始まる場合、 @samp{~} は環境変数 @samp{HOME} の内容に置き換えられます。

@item
パターンが @samp{./} で始まる場合、現在の設定ファイルを含むディレクトリに置き換えられます。

@item
パターンが @samp{~/} ・ @samp{./} ・ @samp{/} のいずれでも始まらない場合、 @samp{**/} 自動的に先頭に追加されます。たとえば、パターン
@samp{foo/bar} は @samp{**/foo/bar} になり、 @samp{/any/path/to/foo/bar} と一致します。

@item
パターンが @samp{/} で終わる場合、 @samp{**} が自動的に追加されます。 たとえば、パターン @samp{foo/} は @samp{foo/**}
になります。言い換えると、「foo」ディレクトリとその中のすべてに再帰的に一致します。
@end itemize

@item  @samp{gitdir/i} 
これは、照合が大文字と小文字を区別せずに行われることを除いて、 @samp{gitdir} と同じです(大文字と小文字を区別しないファイルシステムなど)。

@item  @samp{onbranch} 
キーワード @samp{onbranch:} に続くデータは、標準のグロブワイルドカードと、複数のパス部分に一致する可能性のある2つの追加のワイルドカード
@samp{**/} と @samp{/**}
を含むパターンと見なされます。現在チェックアウトされているブランチの名前がパターンと一致するワークツリーにいる場合、インクルード条件が満たされます。

パターンが @samp{/} で終わる場合、 @samp{**} が自動的に追加されます。 たとえば、パターン @samp{foo/} は @samp{foo/**} になります。つまり、
@samp{foo/}
で始まるすべてのブランチに一致します。これは、ブランチが階層的に編成されていて、その階層内のすべてのブランチに構成を適用する場合に役立ちます。
@end table

@samp{gitdir} と @samp{gitdir/i} を介したマッチングに関するいくつかの注意事項:

@itemize 

@item
@samp{$GIT_DIR} の中のシンボリックリンクは、マッチ前に解決されません。

@item
シンボリックリンクバージョンとrealpathバージョンの両方のパスが、 @samp{$GIT_DIR} の値と照合されます。例えば @samp{~/git} が
@samp{/mnt/storage/git} へのシンボリックリンクである場合、 @samp{gitdir:~/git} と
@samp{gitdir:/mnt/storage/git} の両方が一致します。

これは、Git v2.13.0
でのこの機能の最初のリリースには当てはまりませんでした。これは、realpathバージョンにのみ一致していました。この機能の初期リリースとの互換性を希望する構成では、realpathバージョンのみ、あるいは両方のバージョンを指定する必要があります。

@item
注意: 「../」は特別なものではなく、文字通り一致することに注意してください。これは、あなたが望むものではない可能性があります。
@end itemize

@noindent

@heading Example

@example
# Core variables
[core]
        ; Don't trust file modes
        filemode = false

# Our diff algorithm
[diff]
        external = /usr/local/bin/diff-wrapper
        renames = true

[branch "devel"]
        remote = origin
        merge = refs/heads/devel

# Proxy settings
[core]
        gitProxy="ssh" for "kernel.org"
        gitProxy=default-proxy ; for the rest

[include]
        path = /path/to/foo.inc ; include by absolute path
        path = foo.inc ; find "foo.inc" relative to the current file
        path = ~/foo.inc ; find "foo.inc" in your `$HOME` directory

; include if $GIT_DIR is /path/to/foo/.git
[includeIf "gitdir:/path/to/foo/.git"]
        path = /path/to/foo.inc

; include for all repositories inside /path/to/group
[includeIf "gitdir:/path/to/group/"]
        path = /path/to/foo.inc

; include for all repositories inside $HOME/to/group
[includeIf "gitdir:~/to/group/"]
        path = /path/to/foo.inc

; relative paths are always relative to the including
; file (if the condition is true); their location is not
; affected by the condition
[includeIf "gitdir:/path/to/group/"]
        path = foo.inc

; include only if we are in a worktree where foo-branch is
; currently checked out
[includeIf "onbranch:foo-branch"]
        path = foo.inc
@end example


@noindent

@heading Values

多くの変数の値は単純な文字列として扱われますが、特定のタイプの値をとる変数があり、それらの綴り方に関する規則があります。

@table @asis

@item  boolean 
変数がブール値をとると言われるとき、「true」と「false」の多くの同義語が受け入れられます。なお、これらはすべて大文字と小文字を区別しません。

@table @asis

@item  true 
ブール値 true のリテラルは、 @samp{yes} と @samp{on} と @samp{true} と @samp{1`です。
また、値の指定無し( `= <value>} 無し)
の変数は true と見なされます。

@item  false 
ブール値 false リテラルは、 @samp{no} と @samp{off} と @samp{false} と @samp{0} と
空文字列です。

@samp{--type = bool} 型指定子を使用して値を正規形に変換する場合、 @emph{git config}
は、値の出力を「true」または「false」（小文字で表記）にします。
@end table

@item  integer 
さまざまなサイズを指定する多くの変数の値には、「k」、「M」などの接尾辞を付けることができます。これは、「数値に1024掛けた値に」、「数値に1024x1024を掛けた値に」などを意味します。

@item  color 
色をとる変数の値は、スペースで区切られた色(最大で2つ、1つは前景用(foreground)、もう1つは背景用(background))と、(必要な数の)属性(attribute)の「リスト」です。

使用できる基本色は、 @samp{normal} と @samp{black} と @samp{red} と @samp{green} と @samp{yellow} と @samp{blue} と
@samp{magenta} と @samp{cyan} と @samp{white} です。与えられた最初の色は前景用です。2番目は背景用です。 @samp{normal}
を除くすべての基本色には、 @samp{brightred} のように色の前に @samp{bright} と付けることで指定できる明るいバリエーションがあります。

色は0から255までの数字で指定することもできます。これらはANSI256色モードを使用します(ただし、すべての端末がこれをサポートしているわけではないことに注意してください)。端末が24ビットRGB値をサポートしている場合は
@samp{#ff0ab3} のように16進数として指定することもできます。

受け入れられる属性(attribute)は、 @samp{bold} と @samp{dim} と @samp{ul} と @samp{blink} と @samp{reverse} と
@samp{italic} と @samp{strike} (取り消し線(cross-out)または「取り消し線」の文字(strikethrough
letters)の場合)
です。色に関する属性の位置(前、後、または中間)は重要ではありません。特定の属性は、それらの前に「no」または「no-」を付けることによってオフにすることができます(たとえば、「noreverse」、「no-ul」など)。

空のカラー文字列は、色の効果をまったく生成しません。 これは、色を完全に無効にすることなく、特定の要素の色付けを回避するために使用できます。

gitで事前定義されたカラースロットの場合、属性は、カラー出力の各アイテムの先頭でリセットされることを意図しています。したがって、
@samp{color.decorate.branch`を} black`に設定すると、同じ出力行の前のものが @samp{bold}
または他の属性でペイントされるように設定されている場合(たとえば @samp{log --decorate}
出力のブランチ名のリストの前で括弧を開く)でも、そのブランチ名がプレーンな @samp{black}
でペイントされます。ただし、カスタムログ形式では、より複雑で階層化された色付けが行われる場合があり、否定された形式が役立つ場合があります。

@item  pathname 
パス名の値をとる変数には、 @samp{~/} または @samp{~user/} で始まる文字列を指定できます。このような文字列には、通常のチルダ展開が行われます。
@samp{~/} は @samp{$HOME} の値に展開され、 @samp{~user/} は指定のユーザーのホームディレクトリに展開されます。

パスが  @samp{%(prefix)/}
で始まる場合、残りはGitの「ランタイムプレフィックス」に関連するパス、つまりGit自体がインストールされた場所に関連するパスとして解釈されます。
たとえば、 @samp{%(prefix)/bin/}
は、Git実行可能ファイル自体が存在するディレクトリを指します。Gitがランタイムプレフィックスのサポートなしでコンパイルされた場合、代わりにコンパイルされたプレフィックスが置き換えられます。万が一、展開してはならないリテラルパスを指定する必要がある場合は、
@samp{./%(prefix)/bin} のように接頭辞 @samp{./} を付ける必要があります。
@end table

@noindent

@heading Variables

注意:
このリストは包括的ではなく、必ずしも完全ではないことに注意してください。コマンド固有の変数については、適切なマニュアルページに詳細な説明があります。

他のgit関連ツールは、独自の変数を使用する場合があります。独自のツールで使用する新しい変数を考案するときは、それらの名前がGit自体や他の一般的なツールで使用されているものと競合しないことを確認し、ドキュメントに記述してください。

@table @asis

@item  advice.* 
これらの変数は、新しいユーザーを支援するために設計されたさまざまなオプションのヘルプメッセージを制御します。すべての「advice.*」変数はデフォルトで「true」に設定されており、これらを「false」に設定することで、ヘルプが不要であることをGitに伝えることができます。

@table @asis

@item  fetchShowForcedUpdates 
git-fetch(1)がrefの更新後に強制更新を計算したり、
チェックが無効になっていることを警告したりするのに
長い時間がかかる場合に表示されるアドバイス。

@item  pushUpdateRejected 
@emph{pushNonFFCurrent} と @emph{pushNonFFMatching} と @emph{pushAlreadyExists} と
@emph{pushFetchFirst} と @emph{pushNeedsForce} と @emph{pushRefNeedsUpdate} を
同時に無効にする場合は、この変数を
@emph{false} に設定します。

@item  pushNonFFCurrent 
現在のブランチへの non-fast-forward 更新が原因で
git-push(1) が失敗した場合に表示されるアドバイス。

@item  pushNonFFMatching 
git-push(1) を実行し、
「matching refs」を明示的にプッシュ(つまり あなたは「:」を使用したか、
あなたの現在のブランチではないrefspecを指定した)して、
「non-fast-forward」エラーが発生したときに表示されるアドバイスです。

@item  pushAlreadyExists 
git-push(1) が、
fast-forwarding の対象とならない更新(タグなど)を拒否した場合に表示されます。

@item  pushFetchFirst 
git-push(1) が、私たちが持っていないオブジェクトを指す
リモート参照を上書きしようとする更新を
拒否した場合に表示されます。

@item  pushNeedsForce 
git-push(1) が、
コミットっぽくないオブジェクトを指すリモートrefを上書きしようとする更新、
またはコミットっぽくないブジェクトを指すリモートrefを作成しようとする更新を
拒否した場合に表示されます。

@item  pushUnqualifiedRefname 
git-push(1) が、
ソースと宛先のrefsに基づいて、
ソースが属するリモートref名前空間を推測しようとするのをあきらめたときに表示されます。
ただし、
ソースオブジェクトのタイプに基づいて、
refs/heads/* または refs/tags/* のいずれかにプッシュすることを提案できる場合もあります。

@item  pushRefNeedsUpdate 
git-push(1) が、
リモート追跡refにローカルにない更新がある場合に、
ブランチの強制更新を拒否した場合に表示されます。

@item  skippedCherryPicks 
git-rebase(1) が、
アップストリームブランチにすでにチェリーピックされているコミットをスキップした場合に表示されます。

@item  statusAheadBehind 
git-status(1) が、
リモート追跡refと比較したローカルrefの先行(ahead)/遅延(behind)カウントを計算し、
その計算に予想よりも時間がかかる場合に表示されます。
@samp{status.aheadBehind} がfalseの場合、
またはオプション @samp{--no-ahead-behind} が指定されている場合は表示されません。

@item  statusHints 
git-status(1) の出力や、
git-commit(1) の
コミットメッセージ記入時のテンプレート表示や、
git-switch(1) または git-checkout(1) の
ブランチ切り替え時のヘルプメッセージに、
現在の状態からどのように進めていくかの指示を表示します。

@item  statusUoption 
コマンドが、
追跡されていないファイルを列挙するのに2秒以上かかる場合は、
git-status(1) で @samp{-u} オプション使用の検討をアドバイスします。

@item  commitBeforeMerge 
git-merge(1) がローカルの変更を上書きしないようにマージを拒否した場合に、
アドバイスが表示されます。

@item  resetQuiet 
コマンドがreset後に、
ステージングされていない変更を列挙するのに2秒以上かかる場合は、
git-reset(1) で @samp{--quiet} オプション使用の検討をアドバイスします。

@item  resolveConflict 
競合が原因で操作が実行できない場合に、
さまざまなコマンドによって表示されるアドバイス。

@item  sequencerInUse 
シーケンサーコマンドがすでに進行中の場合に表示されるアドバイス。

@item  implicitIdentity 
システムのユーザー名とドメイン名から
情報が推測される場合のID構成の設定方法に
関するアドバイス。

@item  detachedHead 
git-switch(1) または git-checkout(1) を使用して
HEADのデタッチ状態に移行し、
事後にローカルブランチを作成する方法を
指示したときに表示されるアドバイス。

@item  checkoutAmbiguousRemoteBranchName 
git-checkout(1) と git-switch(1) の引数が、
明確な引数によらず
リモート追跡ブランチがチェックアウトされる状況で、
複数のリモート上のリモート追跡ブランチに対して
あいまいに解決される場合に表示されるアドバイス。
このアドバイスが出力される状況で、
特定のリモートをデフォルトで
使用するように設定する方法については、
@samp{checkout.defaultRemote}
構成変数を参照してください。

@item  amWorkDir 
git-am(1) がパッチファイルの適用に失敗した場合に
パッチファイルの場所を示すアドバイス。

@item  rmHints 
git-rm(1) の出力に失敗した場合、
現在の状態からどのように進めるかについての指示を表示します。

@item  addEmbeddedRepo 
誤って、あるgitリポジトリを別のリポジトリ内に追加した
場合の対処方法に関するアドバイス。

@item  ignoredHook 
フックが実行可能ファイルとして設定されていないために
フックが無視された場合に表示されるアドバイス。

@item  waitingForEditor 
Gitがユーザーからのエディタ入力を待機しているときは、
いつでも端末にメッセージを出力します。

@item  nestedTag 
ユーザーがタグオブジェクトに再帰的にタグを付けようとした
場合に表示されるアドバイス。

@item  submoduleAlternateErrorStrategyDie 
「die」に設定された submodule.alternateErrorStrategy オプションが
致命的なエラーを引き起こす場合に表示されるアドバイス。

@item  addIgnoredFile 
ユーザーが、無視されたファイルをインデックスに追加しようとした
場合に表示されるアドバイス。

@item  addEmptyPathspec 
ユーザーがpathspecパラメーターを指定せずに
addコマンドを実行した場合に表示されるアドバイス。

@item  updateSparsePath 
git-add(1) または git-rm(1) のいずれかが、
現在のスパースチェックアウト外のインデックスエントリを
更新するように求められたときに表示されるアドバイス。
@end table

@item  core.fileMode 
作業ツリー内のファイルの実行可能ビットを尊重するかどうかをGitに通知します。

一部のファイルシステムでは、実行可能としてマークされたファイルがチェックアウトされるか、実行可能ビットがオンになっている実行不可能なファイルをチェックアウトすると、実行可能ビットを失います。
git-clone(1) または git-init(1)
は、ファイルシステムを調査して、実行可能ビットを正しく処理し、この変数が必要に応じて自動的に設定されるかどうかを確認します。

リポジトリはファイルモードを正しく処理するファイルシステム上にある可能性があり、この変数は作成時に「true」に設定されますが、後でファイルモードを失う別の環境からアクセスできるようになる可能性があります(たとえば、CIFSマウントを介したext4のエクスポート。CygwinがGit
for WindowsまたはEclipseでリポジトリを作成た時など)。このような場合、この変数を「false」に設定する必要がある場合があります。
git-update-index(1) を参照してください。

(設定ファイルでcore.filemodeが指定されていない場合、)デフォルトはtrueです。

@item  core.hideDotFiles 
(Windowsのみ)trueの場合、名前がドットで始まる、新しく作成されたディレクトリと新しく作成されたファイルを非表示としてマークします。
@emph{dotGitOnly} の場合、  @samp{.git/}
ディレクトリのみが非表示になり、ドットで始まる他のファイルは非表示になりません。デフォルトのモードは「dotGitOnly」です。

@item  core.ignoreCase 
APFS、HFS+、FAT、NTFSなどの大文字と小文字を区別しないファイルシステムでGitをより適切に機能させるためのさまざまな回避策を可能にする内部変数。たとえば、Gitが「Makefile」を予期しているときにディレクトリリストで「makefile」が見つかった場合、Git
それは実際には同じファイルであると想定し、「Makefile」として記憶し続けます。

デフォルトはfalseですが、 git-clone(1) または git-init(1)
は、リポジトリの作成時に必要に応じてcore.ignoreCaseを調査してtrueに設定します。

あなたのオペレーティングシステムとファイルシステムに関して、Gitは、この変数の適切な構成に依存しています。この値を変更すると、予期しない動作が発生する可能性があります。

@item  core.precomposeUnicode 
このオプションは、GitのMacOS実装でのみ使用されます。 core.precomposeUnicode=true
の場合、GitはMacOSによって行われたファイル名のUnicode分解(unicode
decomposition)を元に戻します。これは、MacOSとLinuxまたはWindowsの間でリポジトリを共有する場合に便利です。 (Git
for Windows 1.7.10以降、または Git under cygwin 1.7 が必要です)。
falseの場合、ファイル名はGitによって完全に透過的に処理されます。これは、古いバージョンのGitとの下位互換性があります。

@item  core.protectHFS 
trueに設定されている場合、 HFS+ ファイルシステムで @samp{.git}
と同等と見なされるパスのチェックアウトを許可しないでください。デフォルトはMacOSでは @samp{true} 、それ以外の場合は @samp{false} です。

@item  core.protectNTFS 
trueに設定されている場合、NTFSファイルシステムで問題を引き起こす可能性のあるパスのチェックアウトを許可しないでください。 例えば、 8.3
の「短い」名前と競合します。デフォルトは、Windowsでは「true」、それ以外の場合は「false」です。

@item  core.fsmonitor 
設定されている場合、この変数の値は、要求された日時以降に変更された可能性のあるすべてのファイルを識別するコマンドとして使用されます。この情報は、変更されていないファイルの不要な処理を回避することにより、gitを高速化するために使用されます。
githooks(5) の「fsmonitor-watchman」セクションを参照してください。

@item  core.fsmonitorHookVersion 
fsmonitorを呼び出すときに使用されるフックのバージョンを設定します。現在、バージョン1と2があります。これが設定されていない場合、バージョン2が最初に試行され、失敗した場合はバージョン1が試行されます。
バージョン1は、入力としてtimpstampを使用して、それ以降に変更があったファイルを判別しますが、watchmanなどの一部のモニターでは、timestampを使用すると競合状態になります。バージョン2はopaque
stringを使用しているため、モニターは競合状態なしで変更されたファイルを判別するために使用できるものを返すことができます。

@item  core.trustctime 
falseの場合、インデックスと作業ツリー間のctimeの違いは無視されます。iノードの変更時刻がGitの外部の何か(ファイルシステムクローラーおよび一部のバックアップシステム)によって定期的に変更される場合に役立ちます。
git-update-index(1) を参照してください。デフォルトではtrueです。

@item  core.splitIndex 
trueの場合、インデックスの分割インデックス機能が使用されます。 git-update-index(1) を参照してください。
デフォルトではfalseです。

@item  core.untrackedCache 
インデックスの追跡されていないモノのキャッシュ機能をどうするかを決定します。この変数が設定されていない(unset)か、 @samp{keep}
に設定されている場合、キャッシュが保持されます。 @samp{true`に設定すると、自動的に追加されます。 また、 `false}
に設定すると、自動的に削除されます。 @samp{true} に設定する前に、mtimeがシステムで正しく機能していることを確認する必要があります。
git-update-index(1) を参照してください。 この設定をデフォルトで @samp{true} に設定する
@samp{feature.manyFiles} が有効になっていない限り、デフォルトは @samp{keep} です。

@item  core.checkStat 
core.checkStat が設定されていないか @samp{default}
に設定されている場合、Gitがファイルを調べてからファイルが変更されたかどうかを検出するために、stat構造体の多くのフィールドがチェックされます。この構成変数が
@samp{minimal}
に設定されている場合、mtimeとctimeの1秒未満の部分、ファイルの所有者のuidとgid、iノード番号(およびGitがそれを使用するようにコンパイルされている場合はデバイス番号も)はチェック対象から除外され、mtimeの2分の1の部分(および
@samp{core.trustCtime} が設定されている場合はctime)とファイルサイズチェックのみがチェック対象として残ります。

(JGitなど)一部のフィールドに使用可能な値を残さないGitの実装があります。これらのフィールドを比較から除外することにより、 @samp{minimal}
モードは、同じリポジトリがこれらの他のシステムによって同時に使用される場合の相互運用性に役立つ可能性があります。

@item  core.quotePath 
パスを出力するコマンド(例: @emph{ls-files} 、
@emph{diff})は、パス名を二重引用符で囲み(@samp{"..."})、Cが制御文字をエスケープするのと同じ方法でそれらの文字をバックスラッシュ(@samp{\})でエスケープすることにより、パス名の「異常な」文字をクォートします(例:
TABの場合は @samp{\t} 、LFの場合は @samp{\n} 、バックスラッシュの場合は @samp{\\} )、または0x80より大きい値のバイト(たとえば、UTF-8の
"micro" の場合は8進数
@samp{\302\265})。この変数がfalseに設定されている場合、0x80を超えるバイトは「異常」とは見なされなくなります。この変数の設定に関係なく、二重引用符(@samp{"})、バックスラッシュ(@samp{\})、および制御文字は常にエスケープされます。単純なスペース文字は「異常」とは見なされません。多くのコマンドは、
@samp{-z} オプションを使用してパス名を完全にそのままで出力できます。デフォルト値はtrueです。

@item  core.eol 
作業ディレクトリ内で、( @samp{text} 属性を設定するか、@samp{text=auto}
とGitがコンテンツをテキストとして自動検出することにより)テキストとしてマークされたファイルが使用する行末タイプを設定します。 代替手段は、 @samp{lf}
と  @samp{crlf} と プラットフォームの生来の行末を使用する @samp{native} があります。デフォルト値は @samp{native}
です。行末変換の詳細については、 gitattributes(5) を参照してください。注意: @samp{core.autocrlf} が
@samp{true} または @samp{input} に設定されている場合、この値は無視されることに注意してください。

@item  core.safecrlf 
trueの場合、行末変換がアクティブなときに @samp{CRLF} の変換が可逆的かどうかをGitにチェックさせます。
Gitは、コマンドが作業ツリー内のファイルを直接または間接的に変更するかどうかを確認します。たとえば、あるファイルをコミットしてから同じファイルをチェックアウトすると、作業ツリーに元のファイルが生成されます。この操作が
@samp{core.autocrlf} の現在の設定に当てはまらない場合、Gitはそのファイルを拒否します。変数を @samp{warn}
に設定でき、その場合、Gitは不可逆的な変換についてのみ警告はしますが、操作を続行します。

CRLF変換には、データが破損する可能性がわずかにあります。有効にすると、Gitはコミット時にCRLFをLFに変換し、チェックアウト時にLFをCRLFに変換します。コミット前にLFとCRLFが混在しているファイルは、Gitでは復元できません。リポジトリにLF行末のみが含まれるように行末を修正するのは、テキストファイルの場合は正しい操作です。しかし、誤ってテキストとして分類されたバイナリファイルの場合、変換によってデータが破損する可能性があります。

あなたがこのような破損を早期に認識した場合は、 .gitattributes
で変換タイプを明示的に設定することで簡単に修正できます。コミットした直後は、作業ツリーに元のファイルが残っており、このファイルはまだ破損していません。
このファイルはバイナリファイルなのだからと、Gitがファイルを適切に処理することをGitに明示的に伝えることができます。

残念ながら、行末が混在するテキストファイルをクリーンアップするという望ましい効果と、バイナリファイルを破損するという望ましくない効果を区別することはできません。どちらの場合も、CRLFは元に戻せない方法で削除されます。テキストファイルの場合、CRLFは行末であるため、これは正しいことですが、バイナリファイルの場合、CRLFを変換するとデータが破損します。

注意: この安全性チェックは、チェックアウトによって、 @samp{core.eol} と @samp{core.autocrlf}
の異なる設定に対して元のファイルと同じファイルが生成されることを意味するのではなく、現在のファイルに対してのみ生成されることに注意してください。
たとえば、 @samp{LF} を含むテキストファイルは @samp{core.eol=lf} で受け入れられ、後で ` core.eol=crlf`
でチェックアウトできます。この場合、結果のファイルには @samp{CRLF} が含まれますが、 元のファイルには @samp{LF`が含まれていました。
ただし、両方の作業ツリーで、行末は一貫しています。つまり、すべて `LF} または、 すべて @samp{CRLF}
のいずれかですが、混合されることはありません。行末が混在するファイルは、 @samp{core.safecrlf} メカニズムによって報告されます。

@item  core.autocrlf 
この変数を「true」に設定することは、すべてのファイルで「text」属性を「auto」に設定し、core.eolを「crlf」に設定することと同じです。
作業ディレクトリに @samp{CRLF} 行末があり、リポジトリにLF行末がある場合は、trueに設定します。
この変数は「input」に設定できます。この場合、出力変換は実行されません。

@item  core.checkRoundtripEncoding 
@samp{working-tree-encoding} 属性で使用された場合に Git が UTF-8
のラウンドトリップチェックを行うエンコーディングの、カンマや空白で区切られたリスト(gitattributes(5)
を参照)。デフォルト値は @samp{SHIFT-JIS} です。

@item  core.symlinks 
falseの場合、シンボリックリンクは、リンクテキストを含む小さなプレーンファイルとしてチェックアウトされます。
git-update-index(1) と git-add(1)
は、記録されたタイプを通常のファイルに変更しません。シンボリックリンクをサポートしないFATのようなファイルシステムで役立ちます。

デフォルトは true ですが、git-clone(1) や git-init(1) はリポジトリの作成時に
core.symlinks を調査して必要に応じて core.symlinks を false に設定します。

@item  core.gitProxy 
フェッチにGitプロトコルを使用する場合、リモートサーバーへの直接接続を確立する代わりに(「コマンドホストポート」として)実行する「プロキシコマンド」。変数値が「COMMAND
for
DOMAIN」形式の場合、コマンドは、指定されたドメイン文字列で終わるホスト名にのみ適用されます。この変数は複数回設定でき、指定された順序で照合されます。最初にマッチしたものが採用されます。

@samp{GIT_PROXY_COMMAND} 環境変数(特別な「for」処理なしで常に普遍的に適用されます)によってオーバーライドできます。

特別な文字列 @samp{none}
をプロキシコマンドとして使用して、特定のドメインパターンにプロキシを使用しないように指定できます。これは、ファイアウォール内のサーバをプロキシの使用から除外する一方で、外部ドメインには共通のプロキシをデフォルトで使用する場合に便利です。

@item  core.sshCommand 
この変数が設定されている場合、 @samp{git fetch} と @samp{git push} は、リモートシステムに接続する必要があるときに、 @samp{ssh}
の代わりに指定したコマンドを使用します。このコマンドは @samp{GIT_SSH_COMMAND}
環境変数と同じ形式であり、環境変数が設定されると上書きされます。

@item  core.ignoreStat 
trueの場合、Gitは lstat()
呼び出しを使用して、インデックスと作業ツリーの両方で同じように更新された追跡ファイルの「assume-unchanged」ビットを設定することにより、ファイルが変更されたかどうかを検出することを回避します。

ファイルがGitの外部で変更される場合、ユーザーは変更されたファイルを明示的にステージングする必要があります(たとえば、
git-update-index(1) の「Examples」セクションを参照)。
Gitは通常、これらのファイルへの変更を検出しません。

これは、 CIFS/Microsoft Windows など、 lstat() 呼び出しが非常に遅いシステムで役立ちます。

false がデフォルトです。

@item  core.preferSymlinkRefs 
HEADおよびその他のシンボリック参照ファイルのデフォルトの「symref」形式の代わりに、シンボリックリンクを使用します。これは、HEADがシンボリックリンクであることを期待する古いスクリプトを操作するために必要になる場合があります。

@item  core.alternateRefsCommand 
alternateから利用可能な履歴のヒントをアドバタイズする場合は、 git-for-each-ref(1)
の代わりに、シェルを使用して指定されたコマンドを実行します。最初の引数は、alternateの絶対パスです。出力には、1行に1つの16進オブジェクトIDが含まれている必要があります(つまり、
@samp{git for-each-ref --format='%(objectname)'} によって生成されたものと同じある必要があります)。

注意: 通常、 あなたは @samp{git for-each-ref}
をconfig値に直接入れることはできません。これは、リポジトリパスを引数として受け取らないためです(ただし、あなたは上記のコマンドをシェルスクリプトでラップすることはできます)。

@item  core.alternateRefsPrefixes 
alternateからの参照を一覧表示する場合は、指定のプレフィックスで始まる参照のみを一覧表示します。プレフィックスは
git-for-each-ref(1)
への引数として指定されたかのようにマッチングします。複数のプレフィックスを一覧表示するには、それらを空白で区切ります。
@samp{core.alternateRefsCommand} が設定されている場合、 @samp{core.alternateRefsPrefixes}
を設定しても効果ありません。

@item  core.bare 
trueの場合、このリポジトリは「ベア」(bare;ベアリポジトリ)であると見なされ、作業ディレクトリは関連付けられていません。この場合、
git-add(1) や git-merge(1) など、作業ディレクトリを必要とする多くのコマンドが無効になります。

この設定は、リポジトリの作成時に git-clone(1) または git-init(1)
によって自動的に推測されます。 デフォルトでは、 @samp{/.git} で終わるリポジトリはベアではないと見なされ(bare =
false)、他のすべてのリポジトリはベアであると見なされます(bare
= true)。

@item  core.worktree 
作業ツリーのルートへのパスを設定します。 @samp{GIT_COMMON_DIR} 環境変数が設定されている場合、 core.worktree
は無視され、作業ツリーのルートを決定するために使用されません。core.worktree は @samp{GIT_WORK_TREE} 環境変数と
@samp{--work-tree} コマンドラインオプションで上書きできます。値は、絶対パスまたは @samp{.git}
ディレクトリへの相対パスにすることができます。これは、 @samp{--git-dir} または GIT_DIR 環境変数で指定されるか、@samp{--git-dir}
や GIT_DIR 環境変数の指定が無い場合は自動的に検出されます。@samp{--work-tree} と GIT_WORK_TREE と
core.worktree のいずれも指定されていない場合、現在の作業ディレクトリが作業ツリーの最上位と見なされます。

注意: この変数は、ディレクトリの @samp{.git｀
サブディレクトリ内の構成ファイルに設定されている場合でも適用され、その値は前者のディレクトリとは異なることに注意してください(たとえば、
`/path/to/} ディレクトリの @samp{.git} サブディレクトリ内の構成ファイル @samp{/path/to/.git/config} 内の
core.worktree が @samp{/different/path} に設定されていたとする)、これはおそらく設定ミスです。あなたが @samp{/path/to}
ディレクトリでGitコマンドを実行すると、引き続き @samp{/different/path}
が作業ツリーのルートとして使用され、あなたが何をしているのか分かっている(たとえば、リポジトリの通常の作業ツリーとは異なる場所に同じインデックスの読み取り専用スナップショットを作成している)のでない限り混乱を招く可能性があります。

@item  core.logAllRefUpdates 
reflogを有効にします。新旧のSHA-1の追加や、日付/時刻・理由の更新による、refである <ref> の更新は、ファイル
@samp{$GIT_DIR/logs/<ref>} が存在する場合のみ、そのファイルにロギングされます。この構成変数が @samp{true}
に設定されている場合、欠落している @samp{$GIT_DIR/logs/<ref>} ファイルがブランチヘッド(つまり、 @samp{refs/heads/}
下)、リモートref(つまり、 refs/ 下)、note refs(つまり、 @samp{refs/notes/} 下)、およびシンボリックref @samp{HEAD}
。 @samp{always`に設定されている場合、欠落しているreflogは、 `refs/} 下のすべてのrefに対して自動的に作成されます。

この情報を使用して、「2日前」(2 days ago)にブランチの先端であったコミットを判別できます。

この値は、作業ディレクトリが関連付けられているリポジトリではデフォルトでtrueになり、ベアリポジトリではデフォルトでfalseになります。

@item  core.repositoryFormatVersion 
リポジトリの形式とレイアウトのバージョンを識別する内部変数。

@item  core.sharedRepository 
@emph{group} (または @emph{true}
)の場合、リポジトリはグループ内の複数のユーザー間で共有可能になります(すべてのファイルとオブジェクトがグループ書き込み可能であることを確認してください)。
@emph{all} (または @emph{world} または
@emph{everybody})の場合、リポジトリはグループ共有可能であることに加えて、すべてのユーザーが読み取り可能になります。 @emph{umask} (または
@emph{false} )の場合、Gitは umask(2)
によって報告された権限を使用します。「0xxx」(「0xxx」は8進数)の場合、リポジトリ内のファイルはこのモード値になります。「0xxx」はユーザーのumask値をオーバーライドします(他のオプションはユーザーのumask値の要求された部分のみをオーバーライドします)。例:「0660」は、所有者とグループがリポジトリを読み取り/書き込み可能にしますが、他のユーザーはアクセスできません(umaskが「0022」などでない限り、「group」と同等です)。
「0640」は、グループで読み取り可能ですが、グループで書き込み可能ではないリポジトリです。 git-init(1)
を参照してください。 デフォルトではFalseです。

@item  core.warnAmbiguousRefs 
trueの場合、渡したref名があいまいでリポジトリ内の複数のrefと一致する可能性がある場合、Gitは警告を表示します。 デフォルトではtrue。

@item  core.compression 
デフォルトの圧縮レベルを示す整数 -1〜9。
-1はzlibのデフォルトです。0は圧縮がないことを意味し、1〜9はさまざまな速度とサイズのトレードオフであり、9が最も低速です。設定されている場合、これは
@samp{core.looseCompression} や @samp{pack.compression} などの他の圧縮変数のデフォルトを提供します。

@item  core.looseCompression 
整数
-1〜9は、パックファイルにないオブジェクトの圧縮レベルを示します。-1はzlibのデフォルトです。0は圧縮がないことを意味し、1〜9はさまざまな速度とサイズのトレードオフであり、9が最も低速です。設定されていない場合、デフォルトは
core.compression です。 これが設定されていない場合、デフォルトは1(最高速度)になります。

@item  core.packedGitWindowSize 
1回のマッピング操作でメモリにマップするパックファイルのバイト数。ウィンドウサイズを大きくすると、システムが少数の大きなパックファイルをより迅速に処理できるようになる場合があります。ウィンドウサイズを小さくすると、オペレーティングシステムのメモリマネージャへの呼び出しが増えるため、パフォーマンスに悪影響を及ぼしますが、多数の大きなパックファイルにアクセスする場合のパフォーマンスが向上する可能性があります。

コンパイル時にNO_MMAPが設定されている場合、デフォルトは1Mバイトです。それ以外の場合、32ビットプラットフォームでは32Mバイト、64ビットプラットフォームでは1Gバイトです。これは、すべてのユーザー/オペレーティングシステムにとって妥当なはずです。おそらくあなたはこの値を調整する必要はありません。

@emph{k} または @emph{m} または @emph{g} の一般的な単位接尾辞がサポートされています。

@item  core.packedGitLimit 
パックファイルからメモリに同時にマップする最大バイト数。Gitが操作を完了するために一度にこれ以上のバイトにアクセスする必要がある場合、Gitは既存の領域のマップを解除して、プロセス内の仮想アドレス空間を再利用します。

デフォルトは、32ビットプラットフォームでは256Mバイト、64ビットプラットフォームでは32Tバイト(事実上無制限)です。これは、超巨大プロジェクトを除いて、すべてのユーザー/オペレーティングシステムにとって妥当なはずです。あなたは、おそらくこの値を調整する必要はありません。

@emph{k} または @emph{m} または @emph{g} の一般的な単位接尾辞がサポートされています。

@item  core.deltaBaseCacheLimit 
複数の削除されたオブジェクトによって参照される可能性のあるベースオブジェクトをキャッシュするために予約するスレッドあたりの最大バイト数。解凍(decompress)されたベースオブジェクト全体をキャッシュに保存することで、Gitは頻繁に使用されるベースオブジェクトを何度もアンパックおよび解凍することを回避できます。

デフォルトは、すべてのプラットフォームで96Mバイトです。これは、超巨大プロジェクトを除いて、すべてのユーザー/オペレーティングシステムにとって妥当なはずです。あなたは、おそらくこの値を調整する必要はありません。

@emph{k} または @emph{m} または @emph{g} の一般的な単位接尾辞がサポートされています。

@item  core.bigFileThreshold 
このサイズより大きいファイルは、デルタ圧縮を試行せずに、デフレートして保存されます。デルタ圧縮なしで大きなファイルを保存すると、ディスク使用量が増えるというわずかな犠牲を払って、過度のメモリ使用量を回避できます。加えて、このサイズより大きいファイルは常にバイナリとして扱われます。

デフォルトは、すべてのプラットフォームで512Mバイトです。ソースコードやその他のテキストファイルは依然としてデルタ圧縮できるため、これはほとんどのプロジェクトにとって合理的ですが、より大きなバイナリメディアファイルにとっては合理的ではありません。

@emph{k} または @emph{m} または @emph{g} の一般的な単位接尾辞がサポートされています。

@item  core.excludesFile 
@samp{.gitignore} (ディレクトリごと)と @samp{.git/info/exclude}
に加えて、追跡されることを意図されていないパスを記述するパターンを含むファイルへのパス名を指定します。 デフォルトは
@samp{$XDG_CONFIG_HOME/git/ignore} です。 @samp{$XDG_CONFIG_HOME} が設定されていないか空の場合、代わりに
@samp{$HOME/.config/git/ignore} が使用されます。 gitignore(5) を参照してください。

@item  core.askPass 
パスワードを対話的に要求する一部のコマンド(svnやhttpインターフェイスなど)は、この変数の値を介して指定された外部プログラムを使用するように指示できます。
@samp{GIT_ASKPASS} 環境変数でオーバーライドできます。設定されていない場合は、 @samp{SSH_ASKPASS}
環境変数の値にフォールバックするか、それが失敗した場合は、単純なパスワードプロンプトにフォールバックします。外部プログラムには、コマンドライン引数として適切なプロンプトが与えられ、その標準出力にパスワードを書き出す事になっています。

@item  core.attributesFile 
@samp{.gitattributes} (ディレクトリごと) と @samp{.git/info/attributes}
に加えて、Gitはこのファイルで属性を調べます(gitattributes(5) を参照)。パスの拡張は、
@samp{core.excludesFile} の場合と同じ方法で行われます。デフォルト値は @samp{$XDG_CONFIG_HOME/git/attributes}
です。 @samp{$XDG_CONFIG_HOME} が設定されていないか空の場合、代わりに @samp{$HOME/.config/git/attributes}
が使用されます。

@item  core.hooksPath 
デフォルトでは、Gitは @samp{$GIT_DIR/hooks} ディレクトリでフックを探します。これを別のパスに設定します。例えば
@samp{/etc/git/hooks} です。そしてGitはそのディレクトリであなたのフックを見つけようとします。例えば
@samp{$GIT_DIR/hooks/pre-receive} の代わりに @samp{/etc/git/hooks/pre-receive} です。

パスは絶対パスでも相対パスでもかまいません。相対パスは、フックが実行されているディレクトリを基準にしたものと見なされます(githooks(5)
の「DESCRIPTION」セクションを参照)。

この設定変数は、あなたのGitフックをリポジトリごとに設定するのではなく一元的に設定したい場合や、デフォルトのフックを変更した
@samp{init.templateDir} に代わるより柔軟で一元的な設定として有用です。

@item  core.editor 
エディタを起動してメッセージを編集できる @samp{commit} や @samp{tag}
などのコマンドは、この変数が設定されているときにこの変数の値を使用し、環境変数 @samp{GIT_EDITOR} は設定されていません。
git-var(1) を参照してください。

@item  core.commentChar 
メッセージを編集できる @samp{commit} や @samp{tag}
などのコマンドは、この文字で始まるコメント行を考慮し、エディタから戻った後にそれらを削除します(デフォルトは @samp{#})。

@samp{auto} に設定すると、 @samp{git-commit} は、既存のコミットメッセージのどの行の先頭文字でもない文字を選択します。

@item  core.filesRefLockTimeout 
個々の参照をロックしようとしたときに再試行する時間の長さ(ミリ秒単位)。値0は、まったく再試行しないことを意味します。 -1
は無期限に試すことを意味します。 デフォルトは100です(つまり、100ミリ秒再試行します)。

@item  core.packedRefsTimeout 
@samp{packed-refs}
ファイルをロックしようとしたときに再試行する時間の長さ(ミリ秒単位)。値0は、まったく再試行しないことを意味します。-1は無期限に試すことを意味します。デフォルトは1000です(つまり、1秒間再試行します)。

@item  core.pager 
Gitコマンドで使用するテキストビューア(「less」など)。値はシェルによって解釈されることを意図しています。 優先順位は、 @samp{$GIT_PAGER}
環境変数、 @samp{core.pager} 構成、 @samp{$PAGER} 、そしてコンパイル時に選択されたデフォルト(通常は @emph{less})です。

@samp{LESS} 環境変数が設定されていない(unset)場合、Gitはそれを @samp{FRX} に設定(set)します(@samp{LESS}
環境変数が設定されている場合は、Gitはそれをまったく変更しません)。Gitのデフォルト設定である @samp{LESS} を選択的にオーバーライドする場合は、
@samp{core.pager} を、例えば @samp{less -S} と設定できます。これはGitによってシェルに渡され、Gitは最後のコマンドを
@samp{LESS=FRX less -S} に変換します。環境変数では @samp{S}
オプションを設定しませんが、コマンドラインでは設定し、長い行を切り捨てるように指示します。同様に、 @samp{core.pager} を @samp{less -+F}
に設定すると、環境変数によって指定された @samp{F`オプションがコマンドラインによって非アクティブになり、 `less}
の「1画面の場合は終了」動作が非アクティブになります。特定のGitコマンドに対していくつかのフラグを特に指定してアクティブにすることができます。たとえば、
@samp{pager.blame} を @samp{less -S} に設定すると、 @samp{git blame} でのみページャーで行の切り捨てが有効になります。

同様に、 @samp{LV} 環境変数が設定されていない場合、Gitはそれを @samp{-c} に設定します。この設定を上書きするには、 @samp{LV}
を別の値でエクスポートするか、 @samp{core.pager} を @samp{lv +c} に設定します。

@item  core.whitespace 
注意すべき一般的な空白(whitespace)の問題のコンマ(@samp{,})区切りのリスト。 @emph{gitd iff} は
@samp{color.diff.whitespace} を使用してそれらを強調表示し、 @samp{git apply --whitespace = error}
はそれらをエラーと見なします。 接頭辞 @samp{-} を付けて、それらのいずれかを無効にすることができます(例: @samp{-trailing-space}):

@itemize 

@item
@samp{blank-at-eol} は、行末の末尾の空白をエラーとして扱います(デフォルトで有効になっています)。

@item
@samp{space-before-tab}
は、行の最初のインデント部分のタブ文字の直前に表示されるスペース文字をエラーとして扱います(デフォルトで有効になっています)。

@item
@samp{indent-with-non-tab}
は、同等のタブではなくスペース文字でインデントされた行をエラーとして扱います(デフォルトでは有効になっていません)。

@item
@samp{tab-in-indent} は、行の最初のインデント部分にあるタブ文字をエラーとして扱います(デフォルトでは有効になっていません)。

@item
@samp{blank-at-eof} は、ファイルの最後に追加された空白行をエラーとして扱います(デフォルトで有効になっています)。

@item
@samp{trailing-space} は、` blank-at-eol` と @samp{blank-at-eof} の両方をカバーする省略形です。

@item
@samp{cr-at-eol} は、行末のキャリッジリターンをラインターミネータの一部として扱います。つまり、そのようなキャリッジリターンの前の文字が空白(a
whitespace)でない場合、 @samp{trailing-space} はトリガーされません(デフォルトでは有効になっていません)。

@item
@samp{tabwidth=<n>} は、タブが占める文字数を示します。 これは、 @samp{indent-with-non-tab} と、 Gitが
@samp{tab-in-indent} エラーを修正する場合に関連します。デフォルトのタブ幅は8です。許可される値は1〜63です。
@end itemize

@item  core.fsyncObjectFiles 
このブール値は、オブジェクトファイルを書き込むときに @emph{fsync()} を有効にします。

これは、データの書き込みを適切に順序付けるファイルシステムでは時間と労力の無駄ですが、ジャーナル処理を使用しないファイルシステム(伝統的なUNIXファイルシステム)や、ファイルの内容ではなくメタデータのみをジャーナル処理するファイルシステム(OS
XのHFS+や、@samp{data=writeback} な Linux ext3)で役立ちます。

@item  core.preloadIndex 
@emph{git diff} などの操作のために並列インデックスプリロードを有効にする

これにより、特にキャッシュセマンティクスが弱く、IOレイテンシが比較的高いNFSなどのファイルシステムで、「git diff」や「git
status」などの操作を高速化できます。有効にすると、Gitはファイルシステムデータとのインデックス比較を並行して実行し、重複する入出力を許可します。デフォルトはtrueです。

@item  core.unsetenvvars 
Windowsのみ: 他のプロセスを生成する前に設定を解除する必要がある環境変数の名前のコンマ(@samp{,})区切りのリスト。Git for
Windowsが独自のPerlインタープリターの使用を主張しているという事実を説明するために、デフォルトは @samp{PERL5LIB} です。

@item  core.restrictinheritedhandles 
Windowsのみ: 生成されたプロセスが標準のファイルハンドル( @samp{stdin} と @samp{stdout} と
@samp{stderr})のみを継承するか、すべてのハンドルを継承するかをオーバーライドします。 @samp{auto} または @samp{true} または @samp{false}
にすることができます。デフォルトは @samp{auto} で、これはWindows7以降では @samp{true} を意味し、古いバージョンのWindowsでは
@samp{false} を意味します。

@item  core.createObject 
これを @emph{link}
に設定できます。この場合、ハードリンク後のソース削除を、オブジェクトの作成が既存のオブジェクトが上書しないことをチェックするために使用します。

一部のファイルシステム/オペレーティングシステムの組み合わせでは、これは信頼できませんので、この構成設定を @emph{rename}
に設定します。ただし、これにより、既存のオブジェクトファイルが上書きされないようにするチェックが削除されます。

@item  core.notesRef 
コミットメッセージを表示するときは、指定されたrefに保存されている note
も表示します。refは完全に修飾されている必要があります。指定されたrefが存在しない場合、それはエラーではありませんが、noteを印刷してはならないことを意味します。

この設定のデフォルトは「refs/notes/commits」であり、 @samp{GIT_NOTES_REF} 環境変数でオーバーライドできます。
git-notes(1) を参照してください。

@item  core.commitGraph 
trueの場合、gitはcommit-graphファイル(存在する場合)を読み取り、コミットのグラフ構造をパースします。デフォルトはtrueです。詳細については、
git-commit-graph(1) を参照してください。

@item  core.useReplaceRefs 
@samp{false} に設定すると、コマンドラインで @samp{--no-replace-objects}
オプションが指定されたかのように振る舞います。詳細については git(1) と git-replace(1)
を参照してください。

@item  core.multiPackIndex 
multi-pack-index ファイルを使用して、単一のインデックスを使用して複数のパックファイルを追跡します。詳細については
git-multi-pack-index(1) を参照してください。デフォルトはtrueです。

@item  core.sparseCheckout 
「スパースチェックアウト」(sparse checkout)機能を有効にします。 詳細については、
git-sparse-checkout(1) を参照してください。

@item  core.sparseCheckoutCone 
スパースチェックアウト機能の「コーンモード」(cone
mode)を有効にします。スパースチェックアウトファイルに含まれるパターンのセットが限られている場合、このモードはパフォーマンスに大きな利点をもたらします。詳細については
git-sparse-checkout(1) を参照してください。

@item  core.abbrev 
オブジェクト名の省略形の長さを設定します。指定されていないか「auto」に設定されている場合、リポジトリ内のパックされたオブジェクトのおおよその数に基づいて適切な値が計算されます。それは、省略されたオブジェクト名がしばらくの間(some
time)一意であるのに十分な長さです。「no」に設定すると、省略形は作成されず、オブジェクト名は完全な長さで表示されます。 最小の長さは4です。

@item  add.ignoreErrors 
@itemx  add.ignore-errors (deprecated) 
Tells @emph{git add} to continue adding files when some files cannot be added due
to indexing errors. Equivalent to the @samp{--ignore-errors} option of
git-add(1).  @samp{add.ignore-errors} is deprecated, as it does not
follow the usual naming convention for configuration variables.

@item  add.interactive.useBuiltin 
[EXPERIMENTAL] Set to @samp{true} to use the experimental built-in implementation
of the interactive version of git-add(1) instead of the Perl script
version. Is @samp{false} by default.

@item  alias.* 
Command aliases for the git(1) command wrapper - e.g.  after
defining @samp{alias.last = cat-file commit HEAD}, the invocation @samp{git last} is
equivalent to @samp{git cat-file commit HEAD}. To avoid confusion and troubles
with script usage, aliases that hide existing Git commands are
ignored. Arguments are split by spaces, the usual shell quoting and escaping
is supported.  A quote pair or a backslash can be used to quote them.

Note that the first word of an alias does not necessarily have to be a
command. It can be a command-line option that will be passed into the
invocation of @samp{git}. In particular, this is useful when used with @samp{-c} to
pass in one-time configurations or @samp{-p} to force pagination. For example,
@samp{loud-rebase = -c commit.verbose=true rebase} can be defined such that
running @samp{git loud-rebase} would be equivalent to @samp{git -c commit.verbose=true
rebase}. Also, @samp{ps = -p status} would be a helpful alias since @samp{git ps}
would paginate the output of @samp{git status} where the original command does
not.

If the alias expansion is prefixed with an exclamation point, it will be
treated as a shell command.  For example, defining @samp{alias.new = !gitk --all
--not ORIG_HEAD}, the invocation @samp{git new} is equivalent to running the
shell command @samp{gitk --all --not ORIG_HEAD}.  Note that shell commands will
be executed from the top-level directory of a repository, which may not
necessarily be the current directory.  @samp{GIT_PREFIX} is set as returned by
running @samp{git rev-parse --show-prefix} from the original current
directory. See git-rev-parse(1).

@item  am.keepcr 
If true, git-am will call git-mailsplit for patches in mbox format with
parameter @samp{--keep-cr}. In this case git-mailsplit will not remove @samp{\r} from
lines ending with @samp{\r\n}. Can be overridden by giving @samp{--no-keep-cr} from
the command line.  See git-am(1), git-mailsplit(1).

@item  am.threeWay 
By default, @samp{git am} will fail if the patch does not apply cleanly. When set
to true, this setting tells @samp{git am} to fall back on 3-way merge if the
patch records the identity of blobs it is supposed to apply to and we have
those blobs available locally (equivalent to giving the @samp{--3way} option from
the command line). Defaults to @samp{false}.  See git-am(1).

@item  apply.ignoreWhitespace 
When set to @emph{change}, tells @emph{git apply} to ignore changes in whitespace, in
the same way as the @samp{--ignore-space-change} option.  When set to one of: no,
none, never, false tells @emph{git apply} to respect all whitespace differences.
See git-apply(1).

@item  apply.whitespace 
Tells @emph{git apply} how to handle whitespaces, in the same way as the
@samp{--whitespace} option. See git-apply(1).

@item  blame.blankBoundary 
Show blank commit object name for boundary commits in
git-blame(1). This option defaults to false.

@item  blame.coloring 
This determines the coloring scheme to be applied to blame output. It can be
@emph{repeatedLines}, @emph{highlightRecent}, or @emph{none} which is the default.

@item  blame.date 
Specifies the format used to output dates in git-blame(1).  If unset
the iso format is used. For supported values, see the discussion of the
@samp{--date} option at git-log(1).

@item  blame.showEmail 
Show the author email instead of author name in git-blame(1).  This
option defaults to false.

@item  blame.showRoot 
Do not treat root commits as boundaries in git-blame(1).  This
option defaults to false.

@item  blame.ignoreRevsFile 
Ignore revisions listed in the file, one unabbreviated object name per line,
in git-blame(1).  Whitespace and comments beginning with @samp{#} are
ignored.  This option may be repeated multiple times.  Empty file names will
reset the list of ignored revisions.  This option will be handled before the
command line option @samp{--ignore-revs-file}.

@item  blame.markUnblamableLines 
Mark lines that were changed by an ignored revision that we could not
attribute to another commit with a @emph{*} in the output of
git-blame(1).

@item  blame.markIgnoredLines 
Mark lines that were changed by an ignored revision that we attributed to
another commit with a @emph{?} in the output of git-blame(1).

@item  branch.autoSetupMerge 
Tells @emph{git branch}, @emph{git switch} and @emph{git checkout} to set up new branches
so that git-pull(1) will appropriately merge from the starting point
branch. Note that even if this option is not set, this behavior can be
chosen per-branch using the @samp{--track} and @samp{--no-track} options. The valid
settings are: @samp{false} — no automatic setup is done; @samp{true} — automatic
setup is done when the starting point is a remote-tracking branch; @samp{always}
 — automatic setup is done when the starting point is either a local branch
or remote-tracking branch. This option defaults to true.

@item  branch.autoSetupRebase 
When a new branch is created with @emph{git branch}, @emph{git switch} or @emph{git
checkout} that tracks another branch, this variable tells Git to set up pull
to rebase instead of merge (see "branch.<name>.rebase").  When @samp{never},
rebase is never automatically set to true.  When @samp{local}, rebase is set to
true for tracked branches of other local branches.  When @samp{remote}, rebase is
set to true for tracked branches of remote-tracking branches.  When
@samp{always}, rebase will be set to true for all tracking branches.  See
"branch.autoSetupMerge" for details on how to set up a branch to track
another branch.  This option defaults to never.

@item  branch.sort 
This variable controls the sort ordering of branches when displayed by
git-branch(1). Without the "--sort=<value>" option provided, the
value of this variable will be used as the default.  See
git-for-each-ref(1) field names for valid values.

@item  branch.<name>.remote 
When on branch <name>, it tells @emph{git fetch} and @emph{git push} which remote to
fetch from/push to.  The remote to push to may be overridden with
@samp{remote.pushDefault} (for all branches).  The remote to push to, for the
current branch, may be further overridden by @samp{branch.<name>.pushRemote}.  If
no remote is configured, or if you are not on any branch, it defaults to
@samp{origin} for fetching and @samp{remote.pushDefault} for pushing.  Additionally,
@samp{.} (a period) is the current local repository (a dot-repository), see
@samp{branch.<name>.merge}'s final note below.

@item  branch.<name>.pushRemote 
When on branch <name>, it overrides @samp{branch.<name>.remote} for pushing.  It
also overrides @samp{remote.pushDefault} for pushing from branch <name>.  When
you pull from one place (e.g. your upstream) and push to another place
(e.g. your own publishing repository), you would want to set
@samp{remote.pushDefault} to specify the remote to push to for all branches, and
use this option to override it for a specific branch.

@item  branch.<name>.merge 
Defines, together with branch.<name>.remote, the upstream branch for the
given branch. It tells @emph{git fetch}/@emph{git pull}/@emph{git rebase} which branch to
merge and can also affect @emph{git push} (see push.default).  When in branch
<name>, it tells @emph{git fetch} the default refspec to be marked for merging in
FETCH_HEAD. The value is handled like the remote part of a refspec, and must
match a ref which is fetched from the remote given by
"branch.<name>.remote".  The merge information is used by @emph{git pull} (which
at first calls @emph{git fetch}) to lookup the default branch for
merging. Without this option, @emph{git pull} defaults to merge the first refspec
fetched.  Specify multiple values to get an octopus merge.  If you wish to
setup @emph{git pull} so that it merges into <name> from another branch in the
local repository, you can point branch.<name>.merge to the desired branch,
and use the relative path setting @samp{.} (a period) for branch.<name>.remote.

@item  branch.<name>.mergeOptions 
Sets default options for merging into branch <name>. The syntax and
supported options are the same as those of git-merge(1), but option
values containing whitespace characters are currently not supported.

@item  branch.<name>.rebase 
When true, rebase the branch <name> on top of the fetched branch, instead of
merging the default branch from the default remote when "git pull" is
run. See "pull.rebase" for doing this in a non branch-specific manner.

When @samp{merges} (or just @emph{m}), pass the @samp{--rebase-merges} option to @emph{git
rebase} so that the local merge commits are included in the rebase (see
git-rebase(1) for details).

When @samp{preserve} (or just @emph{p}, deprecated in favor of @samp{merges}), also pass
@samp{--preserve-merges} along to @emph{git rebase} so that locally committed merge
commits will not be flattened by running @emph{git pull}.

When the value is @samp{interactive} (or just @emph{i}), the rebase is run in
interactive mode.

@strong{NOTE}: this is a possibly dangerous operation; do @strong{not} use
it unless you understand the implications (see git-rebase(1)
for details).

@item  branch.<name>.description 
Branch description, can be edited with @samp{git branch
--edit-description}. Branch description is automatically added in the
format-patch cover letter or request-pull summary.

@item  browser.<tool>.cmd 
Specify the command to invoke the specified browser. The specified command
is evaluated in shell with the URLs passed as arguments. (See
git-web--browse(1).)

@item  browser.<tool>.path 
Override the path for the given tool that may be used to browse HTML help
(see @samp{-w} option in git-help(1)) or a working repository in gitweb
(see git-instaweb(1)).

@item  checkout.defaultRemote 
When you run @samp{git checkout <something>} or @samp{git switch <something>} and only
have one remote, it may implicitly fall back on checking out and tracking
e.g. @samp{origin/<something>}. This stops working as soon as you have more than
one remote with a @samp{<something>} reference. This setting allows for setting
the name of a preferred remote that should always win when it comes to
disambiguation. The typical use-case is to set this to @samp{origin}.

Currently this is used by git-switch(1) and git-checkout(1)
when @samp{git checkout <something>} or @samp{git switch <something>} will checkout
the @samp{<something>} branch on another remote, and by git-worktree(1)
when @samp{git worktree add} refers to a remote branch. This setting might be
used for other checkout-like commands or functionality in the future.

@item  checkout.guess 
Provides the default value for the @samp{--guess} or @samp{--no-guess} option in @samp{git
checkout} and @samp{git switch}. See git-switch(1) and
git-checkout(1).

@item  checkout.workers 
The number of parallel workers to use when updating the working tree.  The
default is one, i.e. sequential execution. If set to a value less than one,
Git will use as many workers as the number of logical cores available. This
setting and @samp{checkout.thresholdForParallelism} affect all commands that
perform checkout. E.g. checkout, clone, reset, sparse-checkout, etc.

Note: parallel checkout usually delivers better performance for repositories
located on SSDs or over NFS. For repositories on spinning disks and/or
machines with a small number of cores, the default sequential checkout often
performs better. The size and compression level of a repository might also
influence how well the parallel version performs.

@item  checkout.thresholdForParallelism 
When running parallel checkout with a small number of files, the cost of
subprocess spawning and inter-process communication might outweigh the
parallelization gains. This setting allows to define the minimum number of
files for which parallel checkout should be attempted. The default is 100.

@item  clean.requireForce 
ブール値。falseで無いの場合 @samp{-f} または @samp{-i} または @samp{-n} を指定しない限りgit-cleanは何もしません。
デフォルトはtrueです。

@item  clone.defaultRemoteName 
The name of the remote to create when cloning a repository.  Defaults to
@samp{origin}, and can be overridden by passing the @samp{--origin} command-line
option to git-clone(1).

@item  clone.rejectShallow 
Reject to clone a repository if it is a shallow one, can be overridden by
passing option @samp{--reject-shallow} in command line. See git-clone(1)

@item  color.advice 
A boolean to enable/disable color in hints (e.g. when a push failed, see
@samp{advice.*} for a list).  May be set to @samp{always}, @samp{false} (or @samp{never}) or
@samp{auto} (or @samp{true}), in which case colors are used only when the error output
goes to a terminal. If unset, then the value of @samp{color.ui} is used (@samp{auto}
by default).

@item  color.advice.hint 
Use customized color for hints.

@item  color.blame.highlightRecent 
This can be used to color the metadata of a blame line depending on age of
the line.

This setting should be set to a comma-separated list of color and date
settings, starting and ending with a color, the dates should be set from
oldest to newest.  The metadata will be colored given the colors if the line
was introduced before the given timestamp, overwriting older timestamped
colors.

Instead of an absolute timestamp relative timestamps work as well, e.g.
2.weeks.ago is valid to address anything older than 2 weeks.

It defaults to @emph{blue,12 month ago,white,1 month ago,red}, which colors
everything older than one year blue, recent changes between one month and
one year old are kept white, and lines introduced within the last month are
colored red.

@item  color.blame.repeatedLines 
Use the customized color for the part of git-blame output that is repeated
meta information per line (such as commit id, author name, date and
timezone). Defaults to cyan.

@item  color.branch 
A boolean to enable/disable color in the output of
git-branch(1). May be set to @samp{always}, @samp{false} (or @samp{never}) or
@samp{auto} (or @samp{true}), in which case colors are used only when the output is to
a terminal. If unset, then the value of @samp{color.ui} is used (@samp{auto} by
default).

@item  color.branch.<slot> 
Use customized color for branch coloration. @samp{<slot>} is one of @samp{current}
(the current branch), @samp{local} (a local branch), @samp{remote} (a remote-tracking
branch in refs/remotes/), @samp{upstream} (upstream tracking branch), @samp{plain}
(other refs).

@item  color.diff 
Whether to use ANSI escape sequences to add color to patches.  If this is
set to @samp{always}, git-diff(1), git-log(1), and
git-show(1) will use color for all patches.  If it is set to @samp{true}
or @samp{auto}, those commands will only use color when output is to the
terminal.  If unset, then the value of @samp{color.ui} is used (@samp{auto} by
default).

This does not affect git-format-patch(1) or the
@emph{git-diff-*} plumbing commands.  Can be overridden on the command
line with the @samp{--color[=<when>]} option.

@item  color.diff.<slot> 
Use customized color for diff colorization.  @samp{<slot>} specifies which part
of the patch to use the specified color, and is one of @samp{context} (context
text - @samp{plain} is a historical synonym), @samp{meta} (metainformation), @samp{frag}
(hunk header), @emph{func} (function in hunk header), @samp{old} (removed lines),
@samp{new} (added lines), @samp{commit} (commit headers), @samp{whitespace} (highlighting
whitespace errors), @samp{oldMoved} (deleted lines), @samp{newMoved} (added lines),
@samp{oldMovedDimmed}, @samp{oldMovedAlternative}, @samp{oldMovedAlternativeDimmed},
@samp{newMovedDimmed}, @samp{newMovedAlternative} @samp{newMovedAlternativeDimmed} (See the
@emph{<mode>} setting of @emph{--color-moved} in git-diff(1) for details),
@samp{contextDimmed}, @samp{oldDimmed}, @samp{newDimmed}, @samp{contextBold}, @samp{oldBold}, and
@samp{newBold} (see git-range-diff(1) for details).

@item  color.decorate.<slot> 
Use customized color for @emph{git log --decorate} output.  @samp{<slot>} is one of
@samp{branch}, @samp{remoteBranch}, @samp{tag}, @samp{stash} or @samp{HEAD} for local branches,
remote-tracking branches, tags, stash and HEAD, respectively and @samp{grafted}
for grafted commits.

@item  color.grep 
When set to @samp{always}, always highlight matches.  When @samp{false} (or @samp{never}),
never.  When set to @samp{true} or @samp{auto}, use color only when the output is
written to the terminal.  If unset, then the value of @samp{color.ui} is used
(@samp{auto} by default).

@item  color.grep.<slot> 
Use customized color for grep colorization.  @samp{<slot>} specifies which part
of the line to use the specified color, and is one of

@table @asis

@item  @samp{context} 
non-matching text in context lines (when using @samp{-A}, @samp{-B}, or @samp{-C})

@item  @samp{filename} 
filename prefix (when not using @samp{-h})

@item  @samp{function} 
function name lines (when using @samp{-p})

@item  @samp{lineNumber} 
line number prefix (when using @samp{-n})

@item  @samp{column} 
column number prefix (when using @samp{--column})

@item  @samp{match} 
matching text (same as setting @samp{matchContext} and @samp{matchSelected})

@item  @samp{matchContext} 
matching text in context lines

@item  @samp{matchSelected} 
matching text in selected lines

@item  @samp{selected} 
non-matching text in selected lines

@item  @samp{separator} 
separators between fields on a line (@samp{:}, @samp{-}, and @samp{=})  and between hunks
(@samp{--})
@end table

@item  color.interactive 
When set to @samp{always}, always use colors for interactive prompts and displays
(such as those used by "git-add --interactive" and "git-clean
--interactive"). When false (or @samp{never}), never.  When set to @samp{true} or
@samp{auto}, use colors only when the output is to the terminal. If unset, then
the value of @samp{color.ui} is used (@samp{auto} by default).

@item  color.interactive.<slot> 
Use customized color for @emph{git add --interactive} and @emph{git clean
--interactive} output. @samp{<slot>} may be @samp{prompt}, @samp{header}, @samp{help} or
@samp{error}, for four distinct types of normal output from interactive commands.

@item  color.pager 
A boolean to specify whether @samp{auto} color modes should colorize output going
to the pager. Defaults to true; set this to false if your pager does not
understand ANSI color codes.

@item  color.push 
A boolean to enable/disable color in push errors. May be set to @samp{always},
@samp{false} (or @samp{never}) or @samp{auto} (or @samp{true}), in which case colors are used
only when the error output goes to a terminal.  If unset, then the value of
@samp{color.ui} is used (@samp{auto} by default).

@item  color.push.error 
Use customized color for push errors.

@item  color.remote 
If set, keywords at the start of the line are highlighted. The keywords are
"error", "warning", "hint" and "success", and are matched
case-insensitively. May be set to @samp{always}, @samp{false} (or @samp{never}) or @samp{auto}
(or @samp{true}). If unset, then the value of @samp{color.ui} is used (@samp{auto} by
default).

@item  color.remote.<slot> 
Use customized color for each remote keyword. @samp{<slot>} may be @samp{hint},
@samp{warning}, @samp{success} or @samp{error} which match the corresponding keyword.

@item  color.showBranch 
A boolean to enable/disable color in the output of
git-show-branch(1). May be set to @samp{always}, @samp{false} (or @samp{never}) or
@samp{auto} (or @samp{true}), in which case colors are used only when the output is to
a terminal. If unset, then the value of @samp{color.ui} is used (@samp{auto} by
default).

@item  color.status 
A boolean to enable/disable color in the output of
git-status(1). May be set to @samp{always}, @samp{false} (or @samp{never}) or
@samp{auto} (or @samp{true}), in which case colors are used only when the output is to
a terminal. If unset, then the value of @samp{color.ui} is used (@samp{auto} by
default).

@item  color.status.<slot> 
Use customized color for status colorization. @samp{<slot>} is one of @samp{header}
(the header text of the status message), @samp{added} or @samp{updated} (files which
are added but not committed), @samp{changed} (files which are changed but not
added in the index), @samp{untracked} (files which are not tracked by Git),
@samp{branch} (the current branch), @samp{nobranch} (the color the @emph{no branch} warning
is shown in, defaulting to red), @samp{localBranch} or @samp{remoteBranch} (the local
and remote branch names, respectively, when branch and tracking information
is displayed in the status short-format), or @samp{unmerged} (files which have
unmerged changes).

@item  color.transport 
A boolean to enable/disable color when pushes are rejected. May be set to
@samp{always}, @samp{false} (or @samp{never}) or @samp{auto} (or @samp{true}), in which case colors
are used only when the error output goes to a terminal.  If unset, then the
value of @samp{color.ui} is used (@samp{auto} by default).

@item  color.transport.rejected 
Use customized color when a push was rejected.

@item  color.ui 
This variable determines the default value for variables such as
@samp{color.diff} and @samp{color.grep} that control the use of color per command
family. Its scope will expand as more commands learn configuration to set a
default for the @samp{--color} option.  Set it to @samp{false} or @samp{never} if you
prefer Git commands not to use color unless enabled explicitly with some
other configuration or the @samp{--color} option. Set it to @samp{always} if you want
all output not intended for machine consumption to use color, to @samp{true} or
@samp{auto} (this is the default since Git 1.8.4) if you want such output to use
color when written to the terminal.

@item  column.ui 
Specify whether supported commands should output in columns.  This variable
consists of a list of tokens separated by spaces or commas:

These options control when the feature should be enabled (defaults to
@emph{never}):

@table @asis

@item  @samp{always} 
always show in columns

@item  @samp{never} 
never show in columns

@item  @samp{auto} 
show in columns if the output is to the terminal
@end table

These options control layout (defaults to @emph{column}).  Setting any of these
implies @emph{always} if none of @emph{always}, @emph{never}, or @emph{auto} are specified.

@table @asis

@item  @samp{column} 
fill columns before rows

@item  @samp{row} 
fill rows before columns

@item  @samp{plain} 
show in one column
@end table

Finally, these options can be combined with a layout option (defaults to
@emph{nodense}):

@table @asis

@item  @samp{dense} 
make unequal size columns to utilize more space

@item  @samp{nodense} 
make equal size columns
@end table

@item  column.branch 
Specify whether to output branch listing in @samp{git branch} in columns.  See
@samp{column.ui} for details.

@item  column.clean 
Specify the layout when list items in @samp{git clean -i}, which always shows
files and directories in columns. See @samp{column.ui} for details.

@item  column.status 
Specify whether to output untracked files in @samp{git status} in columns.  See
@samp{column.ui} for details.

@item  column.tag 
Specify whether to output tag listing in @samp{git tag} in columns.  See
@samp{column.ui} for details.

@item  commit.cleanup 
This setting overrides the default of the @samp{--cleanup} option in @samp{git
commit}. See git-commit(1) for details. Changing the default can be
useful when you always want to keep lines that begin with comment character
@samp{#} in your log message, in which case you would do @samp{git config
commit.cleanup whitespace} (note that you will have to remove the help lines
that begin with @samp{#} in the commit log template yourself, if you do this).

@item  commit.gpgSign 
A boolean to specify whether all commits should be GPG signed.  Use of this
option when doing operations such as rebase can result in a large number of
commits being signed. It may be convenient to use an agent to avoid typing
your GPG passphrase several times.

@item  commit.status 
A boolean to enable/disable inclusion of status information in the commit
message template when using an editor to prepare the commit message.
Defaults to true.

@item  commit.template 
Specify the pathname of a file to use as the template for new commit
messages.

@item  commit.verbose 
A boolean or int to specify the level of verbose with @samp{git commit}.  See
git-commit(1).

@item  commitGraph.generationVersion 
Specifies the type of generation number version to use when writing or
reading the commit-graph file. If version 1 is specified, then the corrected
commit dates will not be written or read. Defaults to 2.

@item  commitGraph.maxNewFilters 
Specifies the default value for the @samp{--max-new-filters} option of @samp{git
commit-graph write} (c.f., git-commit-graph(1)).

@item  commitGraph.readChangedPaths 
If true, then git will use the changed-path Bloom filters in the
commit-graph file (if it exists, and they are present). Defaults to
true. See git-commit-graph(1) for more information.

@item  credential.helper 
ユーザー名またはパスワードの資格情報が必要なときに呼び出される外部ヘルパーを指定します。ヘルパーは、ユーザーに資格情報の入力を求めないように、外部ストレージを参照する場合があります。これは通常、可能な引数を持つ資格情報ヘルパーの名前ですが、引数を持つ絶対パス、または
@samp{!} が前に付いている場合はシェルコマンドの場合もあります。

注意: 複数のヘルパーが定義されている場合があることに注意してください。詳細と例については、 gitcredentials(7)
を参照してください。

@item  credential.useHttpPath 
資格情報を取得するとき、http URL または https URL のパス部分を重要視します。デフォルトはfalseです。詳細については、
gitcredentials(7) を参照してください。

@item  credential.username 
ネットワーク認証にユーザー名が設定されていない場合は、デフォルトでこのユーザー名を使用します。 以下の credential.<context>.* と
gitcredentials(7) を参照してください。

@item  credential.<url>.* 
上記の credential.* オプションは、一部の資格情報に選択的に適用できます。 たとえば、
"credential.https://example.com.username" は、example.com への https
接続に対してのみデフォルトのユーザー名を設定します。 URLの照合方法の詳細については、 gitcredentials(7)
を参照してください。

@item  credentialCache.ignoreSIGHUP 
git-credential-cache—daemon に、終了する代わりにSIGHUPを無視するように指示します。

@item  credentialStore.lockTimeoutMS 
資格情報ファイルをロックしようとしたときに git-credential-store
が再試行する時間の長さ(ミリ秒単位)。値0は、まったく再試行しないことを意味します。-1は無期限に試すことを意味します。デフォルトは1000です(つまり、1秒間再試行します)。

@item  completion.commands 
これは、補完コマンドのリストからコマンドを追加または削除するためにgit-completion.bashによってのみ使用されます。通常、磁器コマンドと、いくつかの選択されたコマンドのみが補完します。この変数には、スペースで区切ってコマンドを追加できます。
コマンドの前に @samp{-} を付けると、既存のリストから削除されます。

@item  diff.autoRefreshIndex 
@emph{git diff} を使用して作業ツリーファイルと比較する場合、統計のみの変更を変更されたものと見なさない。代わりに、サイレントに @samp{git
update-index --refresh}
を実行して、ワークツリーの内容がインデックスの内容と一致するパスの、キャッシュされた統計情報を更新します。このオプションのデフォルトはtrueです。注意:
これは @samp{git diff} 磁器コマンドにのみ影響し、 @samp{git diff-files}
などの下位レベルのdiffコマンドには影響しないことに注意してください。

@item  diff.dirstat 
git-diff(1) およびその仲間に対する @samp{--dirstat} オプションのデフォルトの動作を指定する @samp{--dirstat}
パラメーターのコンマ区切りリスト。デフォルトは(@samp{--dirstat=<param1,param2,...>}
を使用して)コマンドラインでオーバーライドできます。フォールバックのデフォルトは @samp{changes,noncumulative,3}
です(@samp{diff.dirstat} によって変更されていない限り)。以下のパラメータを使用できます:

@table @asis

@item  @samp{changes} 
ソースから削除された、または宛先に追加された行をカウントして、dirstat数を計算します。これは、ファイル内の純粋なコード移動の量を無視します。つまり、ファイル内の行の再配置は、他の変更ほどカウントされません。これは、パラメーターが指定されていない場合のデフォルトの動作です。

@item  @samp{lines} 
通常の行ベースのdiff分析を実行し、削除/追加
された行数を合計して、dirstat数を計算します。(バイナリファイルの場合、バイナリファイルには行の自然な概念がないため、代わりに64バイトのチャンクをカウントします)。
これは @samp{changes} 動作よりもコストのかかる @samp{--dirstat}
動作ですが、他の変更と同じようにファイル内の再配置された行をカウントします。 結果の出力は、他の @samp{--*stat}
オプションから得られるものと一致しています。

@item  @samp{files} 
変更されたファイルの数を数えて、dirstat数を計算します。変更された各ファイルは、dirstat分析で等しくカウントされます。これは、ファイルの内容をまったく調べる必要がないため、計算コストが最も安価な
@samp{--dirstat} の動作です。

@item  @samp{cumulative} 
親ディレクトリの子ディレクトリの変更もカウントします。 @samp{cumulative}
を使用する場合、報告されるパーセンテージの合計が100％を超える場合があることに注意してください。 デフォルトの(非累積的な)動作は、
@samp{non-cumulative} パラメーターで指定できます。

@item  <limit> 
整数パラメーターは、カットオフパーセント(デフォルトでは3%)を指定します。変更への貢献がこの割合より少ないディレクトリは出力に表示されません。
@end table

例: 変更されたファイルの総数の10%未満のディレクトリを無視し、親ディレクトリに子ディレクトリの数を累積しながら、変更されたファイルをカウントする:
@samp{files,10,cumulative}

@item  diff.statGraphWidth 
@samp{--stat} 出力でグラフ部分の幅を制限します。設定されている場合、format-patchを除く @samp{--stat}
出力を生成するすべてのコマンドに適用されます。

@item  diff.context 
デフォルトの3ではなく<n>行のコンテキストで差分を生成します。この値は @samp{-U} オプションによってオーバーライドされます。

@item  diff.interHunkContext 
指定された行数までのdiffハンク間のコンテキストを表示し、それによって互いに近いハンクを融合します。この値は、
@samp{--inter-hunk-context} コマンドラインオプションのデフォルトとして機能します。

@item  diff.external 
この構成変数が設定されている場合、diffの生成は、内部のdiff機構を使用して実行されるのではなく、指定されたコマンドを使用して実行されます。
‘GIT_EXTERNAL_DIFF’ 環境変数でオーバーライドできます。このコマンドは、 git(1) の「git
Diffs」で説明されているパラメーターを使用して呼び出されます。 注意: ファイルのサブセットでのみ外部diffプログラムを使用する場合は、代わりに
gitattributes(5) を使用することをお勧めします。

@item  diff.ignoreSubmodules 
@samp{--ignore-submodules} のデフォルト値を設定します。これは @samp{git diff} 磁器コマンドにのみ影響し、 @samp{git
diff-files} などの下位レベルのdiffコマンドには影響しないことに注意してください。 @samp{git checkout} や @samp{git
switch} も、コミットされていない変更を報告するときにこの設定を尊重します。 @emph{all} に設定すると、
@samp{--ignore-submodules} コマンドラインオプションを使用してオーバーライドされない限り、
@samp{status.submoduleSummary} が設定されている場合、通常は @emph{git commit} および @emph{git status}
で表示されるサブモジュールの概要が無効になります。 @emph{git submodule} コマンドは、この設定の影響を受けません。デフォルトでは、これは
untracked に設定されているため、追跡されていないサブモジュールはすべて無視されます。

@item  diff.mnemonicPrefix 
設定されている場合、 @samp{git diff} は、比較対象に応じて標準の @emph{a/} や @emph{b/}
とは異なるプレフィックスのペアを使用します。この構成が有効な場合、逆差分出力でもプレフィックスの順序が入れ替わります:

@table @asis

@item  @samp{git diff} 
(i)ndex と (w)ork tree を比較

@item  @samp{git diff HEAD} 
(c)ommit と (w)ork tree を比較

@item  @samp{git diff --cached} 
(c)ommit と (i)ndex を比較

@item  @samp{git diff HEAD:file1 file2} 
(o)bject と (w)ork tree エンティティを比較

@item  @samp{git diff --no-index a b} 
2つの非git項目 (1) と (2) を比較
@end table

@item  diff.noprefix 
設定されている場合、 @samp{git diff} は送信元または宛先のプレフィックスを表示しません。

@item  diff.relative 
@emph{true} に設定すると、 @emph{git diff} はディレクトリ外の変更を表示せず、現在のディレクトリへの相対的なパス名を表示します。

@item  diff.orderFile 
diff内でファイルを並べ替える方法を示すファイル。 詳細については、 git-diff(1) の @samp{-O}
オプションを参照してください。 @samp{diff.orderFile} が相対パス名の場合、作業ツリーの最上位を基準として扱います。

@item  diff.renameLimit 
コピー/名前変更 の検出の徹底的な部分で考慮するファイルの数。 @emph{git diff} の @samp{-l}
オプションと同等です。設定されていない場合、デフォルト値は現在1000です。この設定は、名前変更の検出がオフになっている場合は効果がありません。

@item  diff.renames 
Gitが名前の変更を検出するかどうかとその方法。 "false" に設定すると、名前変更の検出が無効になります。 "true"
に設定すると、基本的な名前変更の検出が有効になります。 "copies" または "copy"
に設定されている場合、Gitはコピーも検出します。デフォルトはtrueです。これは git-diff(1) や
git-log(1) のような @emph{git diff} 磁器コマンドにのみ影響し、 git-diff-files(1)
などの下位レベルのコマンドには影響しないことに注意してください。

@item  diff.suppressBlankEmpty 
空の出力行の前にスペースを印刷する標準的な動作を禁止するブール値。デフォルトはfalseです。

@item  diff.submodule 
サブモジュールの違いを表示する形式を指定します。 "short" 形式は、範囲の最初と最後にコミットの名前を表示するだけです。 "log" 形式は、
git-submodule(1) の @samp{summary} のように範囲内のコミットをリストします。 "diff"
形式は、サブモジュールの変更された内容のインラインdiffを示します。デフォルトは "short" です。

@item  diff.wordRegex 
単語ごとの差の計算を実行するときに「単語」(word)とは何かを判別するために使用されるPOSIX拡張正規表現。正規表現に一致する文字シーケンスは「単語」(words)であり、他のすべての文字は*無視できる*空白(whitespace)です。

@item  diff.<driver>.command 
カスタムdiffドライバーコマンド。詳細については gitattributes(5) を参照してください。

@item  diff.<driver>.xfuncname 
diffドライバーがハンクヘッダーを認識するために使用する必要がある正規表現。内蔵パターンを使用することもできます。詳細については
gitattributes(5) を参照してください。

@item  diff.<driver>.binary 
このオプションをtrueに設定すると、diffドライバーがファイルをバイナリとして処理します。詳細については
gitattributes(5) を参照してください。

@item  diff.<driver>.textconv 
ファイルのテキスト変換バージョンを生成するためにdiffドライバーが呼び出す必要のあるコマンド。変換の結果は、人間が読める形式のdiffを生成するために使用されます。詳細については
gitattributes(5) を参照してください。

@item  diff.<driver>.wordRegex 
diffドライバーが単語(words)を1行に分割するために使用する必要がある正規表現。詳細については gitattributes(5)
を参照してください。

@item  diff.<driver>.cachetextconv 
このオプションをtrueに設定すると、diffドライバーがテキスト変換出力をキャッシュするようになります。詳細については
gitattributes(5) を参照してください。

@item  diff.tool 
git-difftool(1) によって使用されるdiffツールを制御します。この変数は、 @samp{merge.tool}
で構成された値をオーバーライドします。以下のリストは、有効な組み込み値を示しています。その他の値はカスタムdiffツールとして扱われ、対応する
difftool.<tool>.cmd 変数が定義されている必要があります。

@item  diff.guitool 
@samp{-g/--gui} フラグが指定されている場合に、 git-difftool(1) が使用するdiffツールを制御します。この変数は、
@samp{merge.guitool}
で構成された値をオーバーライドします。以下のリストは、有効な組み込み値を示しています。その他の値はカスタムdiffツールとして扱われ、対応する
difftool.<guitool>.cmd 変数が定義されている必要があります。

@itemize 

@item
araxis

@item
bc

@item
bc3

@item
bc4

@item
codecompare

@item
deltawalker

@item
diffmerge

@item
diffuse

@item
ecmerge

@item
emerge

@item
examdiff

@item
guiffy

@item
gvimdiff

@item
gvimdiff1

@item
gvimdiff2

@item
gvimdiff3

@item
kdiff3

@item
kompare

@item
meld

@item
nvimdiff

@item
nvimdiff1

@item
nvimdiff2

@item
nvimdiff3

@item
opendiff

@item
p4merge

@item
smerge

@item
tkdiff

@item
vimdiff

@item
vimdiff1

@item
vimdiff2

@item
vimdiff3

@item
winmerge

@item
xxdiff
@end itemize

@item  diff.indentHeuristic 
このオプションを @samp{false}
に設定すると、パッチを読みやすくするためにdiffハンク境界をシフトするデフォルトのヒューリスティックが無効になります。

@item  diff.algorithm 
diffアルゴリズムを選択します。 派生形は以下のとおりです:

@table @asis

@item  @samp{default}, @samp{myers} 
基本的な貪欲な差分アルゴリズム。現在、これがデフォルトです。

@item  @samp{minimal} 
より多くの時間を費やして。可能な限り最小の差分が生成されるようにします。

@item  @samp{patience} 
パッチを生成するときは、patience diff(忍耐差分)アルゴリズムを使用してください。

@item  @samp{histogram} 
このアルゴリズムは、忍耐アルゴリズムを拡張して、「発生頻度の低い共通要素をサポート」(support low-occurrence common
elements)します。
@end table

@item  diff.wsErrorHighlight 
差分の @samp{context} または @samp{old または `new} 行の空白エラー(whitespace
errors)を強調表示します。複数の値はコンマで区切られ、 @samp{none} は前の値をリセットし、 @samp{default} はリストを @samp{new}
にリセットし、 @samp{all} は @samp{old,new,context} の省略形です。空白のエラー(whitespace errors)は
@samp{color.diff.whitespace} で色分けされています。コマンドラインオプション
@samp{--ws-error-highlight=<kind>} はこの設定を上書きします。

@item  diff.colorMoved 
有効な @samp{<mode>} またはtrueのいずれかに設定すると、diff内の移動された行が異なる色で表示されます。有効なモードの詳細については、
git-diff(1) の @samp{--color-moved}
を参照してください。単にtrueに設定すると、デフォルトのカラーモードが使用されます。 falseに設定すると、移動した行は色付けされません。

@item  diff.colorMovedWS 
このオプションは、例えば @samp{diff.colorMoved} 設定を使用して移動した行に色を付ける場合、スペース(spaces)をどのように扱うかを
@samp{<mode>} で制御します。有効なモードの詳細については git-diff(1) の @samp{--color-moved-ws}
を参照してください。

@item  difftool.<tool>.path 
Override the path for the given tool.  This is useful in case your tool is
not in the PATH.

@item  difftool.<tool>.cmd 
Specify the command to invoke the specified diff tool.  The specified
command is evaluated in shell with the following variables available:
@emph{LOCAL} is set to the name of the temporary file containing the contents of
the diff pre-image and @emph{REMOTE} is set to the name of the temporary file
containing the contents of the diff post-image.

@item  difftool.prompt 
Prompt before each invocation of the diff tool.

@item  extensions.objectFormat 
Specify the hash algorithm to use.  The acceptable values are @samp{sha1} and
@samp{sha256}.  If not specified, @samp{sha1} is assumed.  It is an error to specify
this key unless @samp{core.repositoryFormatVersion} is 1.

Note that this setting should only be set by git-init(1) or
git-clone(1).  Trying to change it after initialization will not
work and will produce hard-to-diagnose issues.

@item  fastimport.unpackLimit 
If the number of objects imported by git-fast-import(1) is below
this limit, then the objects will be unpacked into loose object files.
However if the number of imported objects equals or exceeds this limit then
the pack will be stored as a pack.  Storing the pack from a fast-import can
make the import operation complete faster, especially on slow filesystems.
If not set, the value of @samp{transfer.unpackLimit} is used instead.

@item  feature.* 
The config settings that start with @samp{feature.} modify the defaults of a
group of other config settings. These groups are created by the Git
developer community as recommended defaults and are subject to change.  In
particular, new config options may be added with different defaults.

@item  feature.experimental 
Enable config options that are new to Git, and are being considered for
future defaults. Config settings included here may be added or removed with
each release, including minor version updates. These settings may have
unintended interactions since they are so new. Please enable this setting if
you are interested in providing feedback on experimental features. The new
default values are:

@itemize 

@item
@samp{fetch.negotiationAlgorithm=skipping} may improve fetch negotiation times by
skipping more commits at a time, reducing the number of round trips.
@end itemize

@item  feature.manyFiles 
Enable config options that optimize for repos with many files in the working
directory. With many files, commands such as @samp{git status} and @samp{git checkout}
may be slow and these new defaults improve performance:

@itemize 

@item
@samp{index.version=4} enables path-prefix compression in the index.

@item
@samp{core.untrackedCache=true} enables the untracked cache. This setting assumes
that mtime is working on your machine.
@end itemize

@item  fetch.recurseSubmodules 
This option controls whether @samp{git fetch} (and the underlying fetch in @samp{git
pull}) will recursively fetch into populated submodules.  This option can be
set either to a boolean value or to @emph{on-demand}.  Setting it to a boolean
changes the behavior of fetch and pull to recurse unconditionally into
submodules when set to true or to not recurse at all when set to false. When
set to @emph{on-demand}, fetch and pull will only recurse into a populated
submodule when its superproject retrieves a commit that updates the
submodule’s reference.  Defaults to @emph{on-demand}, or to the value of
@emph{submodule.recurse} if set.

@item  fetch.fsckObjects 
If it is set to true, git-fetch-pack will check all fetched objects. See
@samp{transfer.fsckObjects} for what’s checked. Defaults to false. If not set,
the value of @samp{transfer.fsckObjects} is used instead.

@item  fetch.fsck.<msg-id> 
Acts like @samp{fsck.<msg-id>}, but is used by git-fetch-pack(1) instead
of git-fsck(1). See the @samp{fsck.<msg-id>} documentation for details.

@item  fetch.fsck.skipList 
Acts like @samp{fsck.skipList}, but is used by git-fetch-pack(1) instead
of git-fsck(1). See the @samp{fsck.skipList} documentation for details.

@item  fetch.unpackLimit 
If the number of objects fetched over the Git native transfer is below this
limit, then the objects will be unpacked into loose object files. However if
the number of received objects equals or exceeds this limit then the
received pack will be stored as a pack, after adding any missing delta
bases.  Storing the pack from a push can make the push operation complete
faster, especially on slow filesystems.  If not set, the value of
@samp{transfer.unpackLimit} is used instead.

@item  fetch.prune 
If true, fetch will automatically behave as if the @samp{--prune} option was
given on the command line.  See also @samp{remote.<name>.prune} and the PRUNING
section of git-fetch(1).

@item  fetch.pruneTags 
If true, fetch will automatically behave as if the @samp{refs/tags/*:refs/tags/*}
refspec was provided when pruning, if not set already. This allows for
setting both this option and @samp{fetch.prune} to maintain a 1=1 mapping to
upstream refs. See also @samp{remote.<name>.pruneTags} and the PRUNING section of
git-fetch(1).

@item  fetch.output 
Control how ref update status is printed. Valid values are @samp{full} and
@samp{compact}. Default value is @samp{full}. See section OUTPUT in
git-fetch(1) for detail.

@item  fetch.negotiationAlgorithm 
Control how information about the commits in the local repository is sent
when negotiating the contents of the packfile to be sent by the server. Set
to "skipping" to use an algorithm that skips commits in an effort to
converge faster, but may result in a larger-than-necessary packfile; or set
to "noop" to not send any information at all, which will almost certainly
result in a larger-than-necessary packfile, but will skip the negotiation
step.  The default is "default" which instructs Git to use the default
algorithm that never skips commits (unless the server has acknowledged it or
one of its descendants). If @samp{feature.experimental} is enabled, then this
setting defaults to "skipping".  Unknown values will cause @emph{git fetch} to
error out.

See also the @samp{--negotiate-only} and @samp{--negotiation-tip} options to
git-fetch(1).

@item  fetch.showForcedUpdates 
Set to false to enable @samp{--no-show-forced-updates} in git-fetch(1)
and git-pull(1) commands.  Defaults to true.

@item  fetch.parallel 
Specifies the maximal number of fetch operations to be run in parallel at a
time (submodules, or remotes when the @samp{--multiple} option of
git-fetch(1) is in effect).

A value of 0 will give some reasonable default. If unset, it defaults to 1.

For submodules, this setting can be overridden using the
@samp{submodule.fetchJobs} config setting.

@item  fetch.writeCommitGraph 
Set to true to write a commit-graph after every @samp{git fetch} command that
downloads a pack-file from a remote. Using the @samp{--split} option, most
executions will create a very small commit-graph file on top of the existing
commit-graph file(s). Occasionally, these files will merge and the write may
take longer. Having an updated commit-graph file helps performance of many
Git commands, including @samp{git merge-base}, @samp{git push -f}, and @samp{git log
--graph}. Defaults to false.

@item  format.attach 
Enable multipart/mixed attachments as the default for @emph{format-patch}.  The
value can also be a double quoted string which will enable attachments as
the default and set the value as the boundary.  See the --attach option in
git-format-patch(1).

@item  format.from 
Provides the default value for the @samp{--from} option to format-patch.  Accepts
a boolean value, or a name and email address.  If false, format-patch
defaults to @samp{--no-from}, using commit authors directly in the "From:" field
of patch mails.  If true, format-patch defaults to @samp{--from}, using your
committer identity in the "From:" field of patch mails and including a
"From:" field in the body of the patch mail if different.  If set to a
non-boolean value, format-patch uses that value instead of your committer
identity.  Defaults to false.

@item  format.numbered 
A boolean which can enable or disable sequence numbers in patch subjects.
It defaults to "auto" which enables it only if there is more than one
patch.  It can be enabled or disabled for all messages by setting it to
"true" or "false".  See --numbered option in git-format-patch(1).

@item  format.headers 
Additional email headers to include in a patch to be submitted by mail.  See
git-format-patch(1).

@item  format.to 
@itemx  format.cc 
Additional recipients to include in a patch to be submitted by mail.  See
the --to and --cc options in git-format-patch(1).

@item  format.subjectPrefix 
The default for format-patch is to output files with the @emph{[PATCH]} subject
prefix. Use this variable to change that prefix.

@item  format.coverFromDescription 
The default mode for format-patch to determine which parts of the cover
letter will be populated using the branch’s description. See the
@samp{--cover-from-description} option in git-format-patch(1).

@item  format.signature 
The default for format-patch is to output a signature containing the Git
version number. Use this variable to change that default.  Set this variable
to the empty string ("") to suppress signature generation.

@item  format.signatureFile 
Works just like format.signature except the contents of the file specified
by this variable will be used as the signature.

@item  format.suffix 
The default for format-patch is to output files with the suffix
@samp{.patch}. Use this variable to change that suffix (make sure to include the
dot if you want it).

@item  format.encodeEmailHeaders 
Encode email headers that have non-ASCII characters with "Q-encoding"
(described in RFC 2047) for email transmission.  Defaults to true.

@item  format.pretty 
The default pretty format for log/show/whatchanged command, See
git-log(1), git-show(1), git-whatchanged(1).

@item  format.thread 
The default threading style for @emph{git format-patch}.  Can be a boolean value,
or @samp{shallow} or @samp{deep}.  @samp{shallow} threading makes every mail a reply to the
head of the series, where the head is chosen from the cover letter, the
@samp{--in-reply-to}, and the first patch mail, in this order.  @samp{deep} threading
makes every mail a reply to the previous one.  A true boolean value is the
same as @samp{shallow}, and a false value disables threading.

@item  format.signOff 
A boolean value which lets you enable the @samp{-s/--signoff} option of
format-patch by default. @strong{Note:} Adding the @samp{Signed-off-by} trailer to a
patch should be a conscious act and means that you certify you have the
rights to submit this work under the same open source license.  Please see
the @emph{SubmittingPatches} document for further discussion.

@item  format.coverLetter 
A boolean that controls whether to generate a cover-letter when format-patch
is invoked, but in addition can be set to "auto", to generate a cover-letter
only when there’s more than one patch.  Default is false.

@item  format.outputDirectory 
Set a custom directory to store the resulting files instead of the current
working directory. All directory components will be created.

@item  format.filenameMaxLength 
The maximum length of the output filenames generated by the @samp{format-patch}
command; defaults to 64.  Can be overridden by the
@samp{--filename-max-length=<n>} command line option.

@item  format.useAutoBase 
A boolean value which lets you enable the @samp{--base=auto} option of
format-patch by default. Can also be set to "whenAble" to allow enabling
@samp{--base=auto} if a suitable base is available, but to skip adding base info
otherwise without the format dying.

@item  format.notes 
Provides the default value for the @samp{--notes} option to format-patch. Accepts
a boolean value, or a ref which specifies where to get notes. If false,
format-patch defaults to @samp{--no-notes}. If true, format-patch defaults to
@samp{--notes}. If set to a non-boolean value, format-patch defaults to
@samp{--notes=<ref>}, where @samp{ref} is the non-boolean value. Defaults to false.

If one wishes to use the ref @samp{ref/notes/true}, please use that literal
instead.

This configuration can be specified multiple times in order to allow
multiple notes refs to be included. In that case, it will behave similarly
to multiple @samp{--[no-]notes[=]} options passed in. That is, a value of @samp{true}
will show the default notes, a value of @samp{<ref>} will also show notes from
that notes ref and a value of @samp{false} will negate previous configurations
and not show notes.

For example,

@example
[format]
        notes = true
        notes = foo
        notes = false
        notes = bar
@end example


will only show notes from @samp{refs/notes/bar}.

@item  filter.<driver>.clean 
The command which is used to convert the content of a worktree file to a
blob upon checkin.  See gitattributes(5) for details.

@item  filter.<driver>.smudge 
The command which is used to convert the content of a blob object to a
worktree file upon checkout.  See gitattributes(5) for details.

@item  fsck.<msg-id> 
fsck中に、gitは、現在のバージョンのgitでは生成されず、 @samp{transfer.fsckObjects}
が設定されている場合はネットワーク経由で送信されない、レガシーデータの問題を検出する場合があります。この機能は、そのようなデータを含むレガシーリポジトリの操作をサポートすることを目的としています。

@samp{fsck.<msg-id>} 設定は、 git-fsck(1) によって取得されますが、代わりに、そのようなデータセット
@samp{receive.fsck.<msg-id>} のプッシュを受け入れるか、または、クローンまたはフェッチのセットである
@samp{fetch.fsck.<msg-id>} を使用します。

この文書の残りの部分では、簡潔にするために @samp{fsck.*} 変数について説明していますが、対応する @samp{receive.fsck.*} 変数と
@samp{fetch.<msg-id>.*} 変数にも同じことが当てはまります。

@samp{color.ui} や @samp{core.editor} のような変数とは異なり、 @samp{receive.fsck.<msg-id>} と
@samp{fetch.fsck.<msg-id>} 変数は、設定されていない場合、 @samp{fsck.<msg-id>}
構成にフォールバックしません。さまざまな状況で同じfsck設定を均一に構成するには、3つすべてを同じ値に設定する必要があります。

@samp{fsck.<msg-id>} が設定されている場合、 @samp{fsck.<msg-id>} の値を @samp{error} 、 @samp{warn} 、@samp{ignore}
のいずれか一つとすることにより、エラーを警告に切り替える事もでき、その逆も可能です。そして @samp{<msg-id>}
の部分はメッセージIDです。便利なように、fsckはエラー/警告メッセージの前にメッセージIDを付けます。たとえば「missingEmail:
invalid author/committer line - missing email」は、 @samp{fsck.missingEmail =
ignore} を設定するとその問題が非表示になることを意味します。

一般に、これらの問題のあるオブジェクトが共有する破損の種類をリストして無視するのではなく、 @samp{fsck.skipList}
に問題のある既存のオブジェクトを列挙することをお勧めします。前者を実行すると、同じ破損の新しいインスタンスが見過ごされる可能性があります。

不明な @samp{fsck.<msg-id>} 値を設定すると、fsckが停止(die)しますが、 @samp{receive.fsck.<msg-id>} や
@samp{fetch.fsck.<msg-id>} に対して同じことを行うと、gitは単に警告するだけです。

@item  fsck.skipList 
非致命的な理由により既に壊れている(broken)ことが分かっているため無視する必要があるオブジェクト名(1行につき1つの省略されてないSHA-1)のリストへのパス。Git
2.20
以降では、コメント(@samp{#})文字から行末までと、空行と、先頭と末尾の空白(whitespace)は無視されます。それより古いバージョンでは1行につき1つのSHA-1以外は全てエラーになります。

この機能は、無効なコミッターの電子メールアドレスなど、初期のコミットにもかかわらず、安全に無視できるエラーを含む、確立されたプロジェクトを受け入れる必要がある場合に役立ちます。
注意: この設定では、corruptオブジェクトをスキップすることはできません。

@samp{fsck.<msg-id>} と同様に、この変数に対応する @samp{receive.fsck.skipList} 派生と
@samp{fetch.fsck.skipList} 派生があります。

@samp{color.ui} や @samp{core.editor} のような変数とは異なり、 @samp{receive.fsck.skipList} 変数と
@samp{fetch.fsck.skipList} 変数は、設定されていない場合、 @samp{fsck.skipList}
構成にフォールバックしません。さまざまな状況で同じfsck設定を均一に構成するには、3つすべてを同じ値に設定する必要があります。

古いバージョンのGit(2.20より前)では、オブジェクト名リストを並べ替える必要があることが文書化されています。これは必須ではなく、オブジェクト名は任意の順序で表示できますが、リストを読み取るときに、内部バイナリ検索実装の目的でリストが並べ替えられているかどうかを追跡しました。これにより、既に並べ替えられたリストでは作業を節約できます。膨大なリストがない限り、リストを事前に並べ替える必要はありませんでした。
Gitバージョン2.20以降では、代わりにハッシュ実装が使用されるため、リストを事前に並べ替える必要はありません。

@item  gc.aggressiveDepth 
@samp{git gc --aggressive}
で使用されるデルタ圧縮アルゴリズムで使用される深さパラメーター。これはデフォルトで50に設定されています。これは @samp{--aggressive}
が使用されていない場合の @samp{--depth} オプションのデフォルトです。

詳細については git-repack(1) の @samp{--depth} オプションの文書を参照してください。

@item  gc.aggressiveWindow 
@samp{git gc --aggressive}
で使用されるデルタ圧縮アルゴリズムで使用されるウィンドウサイズパラメータ。これはデフォルトで250に設定されています。これは、 @samp{--window}
のデフォルト値の10よりもはるかに積極的なウィンドウサイズです。

詳細については、 git-repack(1) の @samp{--window} オプションの文書を参照してください。

@item  gc.auto 
リポジトリにおおよそ指定の値より多くのルーズオブジェクトがある場合、 @samp{git gc --auto}
はそれらをパックします。一部の磁器コマンドは、このコマンドを使用して、軽量のガベージコレクションを時々実行します。デフォルト値は6700です。

これを0に設定すると、ルーズオブジェクトの数に基づく自動パッキングが無効にななります。また、他のヒューリスティックな @samp{git gc --auto}
が、 @samp{gc.autoPackLimit} などの作業があるかどうかを判断するためにこの値を使用します。

@item  gc.autoPackLimit 
リポジトリに @samp{* .keep} ファイルでマークされていないパックがこの設定値より多くある場合、 @samp{git gc --auto}
はそれらを1つの大きなパックに統合します。デフォルト値は50です。これを0に設定すると、無効になります。 @samp{gc.auto}
を0に設定すると、この設定も無効になります。

以下の @samp{gc.bigPackThreshold} 構成変数を参照してください。この設定を使用中は、自動パックの制限がどのように機能するかに影響します。

@item  gc.autoDetach 
システムがサポートしている場合は @samp{git gc --auto} は即座戻り、実行はバックグラウンドで行われます。デフォルトはtrueです。

@item  gc.bigPackThreshold 
ゼロ以外の場合、 @samp{git gc} の実行時に、この設定値より大きいすべてのパックが保持されます。これは @samp{--keep-largest-pack}
と非常に似ていますが、最大のパックだけでなく、しきい値を満たす全てのパックが保持される点が異なります。デフォルトはゼロです。 @emph{k} 、 @emph{m} 、
@emph{g} の一般的な単位接尾辞がサポートされています。

注意: 保持されるパックの数が gc.autoPackLimit
を超える場合、この構成変数は無視され、基本パックを除くすべてのパックが再パックされることに注意してください。再パック後、パックの数は
gc.autoPackLimit を下回り、再び gc.bigPackThreshold が尊重されるでしょう。

@samp{git repack} がスムーズに実行されると推定されるメモリ量が利用できず、かつ、 @samp{gc.bigPackThreshold}
が設定されていない場合、最大のパックも除外されます(これは、 @samp{--keep-largest-pack} を指定して @samp{git gc}
を実行するのと同じです)。

@item  gc.writeCommitGraph 
trueの場合、 git-gc(1) が実行されると、 gcはcommit-graphファイルを書き換えます。 @samp{git gc
--auto} を使用する場合、ハウスキーピングが必要な場合はコミットグラフが更新されます。デフォルトはtrueです。詳細については
git-commit-graph(1) を参照してください。

@item  gc.logExpiry 
ファイルgc.logが存在する場合、 @samp{git gc --auto}
はそのコンテンツを出力し、そのファイルが「gc.logExpiry」より古い場合を除いて、実行する代わりにステータス0で終了します。デフォルトは「1.day」です。その他の値の指定方法については
@samp{gc.pruneExpire} を参照してください。

@item  gc.packRefs 
リポジトリで @samp{git pack-refs} を実行すると、HTTPなどの馬鹿プロトコル(dumb transport) を介して 1.5.1.2
より前のGitバージョンではクローンが作成できなくなります。この変数は、「git gc」が「git
pack-refs」を実行するかどうかを決定します。これを @samp{notbare}
に設定して、すべての非ベアリポジトリ内で有効にするか、ブール値に設定することができます。 デフォルトは @samp{true} です。

@item  gc.pruneExpire 
「git gc」を実行すると、@samp{prune --expire 2.weeks.ago} が呼び出されます。この構成変数で猶予期間をオーバーライドします。
値「now」を使用してこの猶予期間を無効にし、到達不能なオブジェクトを常にすぐに剪定(prune)するか、「never」を使用して剪定を抑制することができます。この機能は「git
gc」がリポジトリに書き込む別のプロセスと同時に実行される場合の破損を防ぐのに役立ちます。 git-gc(1)
の「NOTES」セクションを参照してください。

@item  gc.worktreePruneExpire 
@emph{git gc} が実行されると、 @samp{git worktree prune --expire3.months.ago}
が呼び出されます。この構成変数を使用して、別の猶予期間を設定できます。値「now」を使用して猶予期間を無効にし、
@samp{$GIT_DIR/worktrees} をすぐに剪定(prune)するか、「never」を使用して剪定を抑制することができます。

@item  gc.reflogExpire 
@itemx  gc.<pattern>.reflogExpire 
「git reflog
expire」は、この時間より古いreflogエントリを削除します。デフォルトは90日です。値「now」はすべてのエントリをすぐに期限切れにし、「never」は期限切れを完全に抑制します。中央に「<pattern>」(例:「refs/stash」)がある場合、設定は
<pattern> に一致するrefにのみ適用されます。

@item  gc.reflogExpireUnreachable 
@itemx  gc.<pattern>.reflogExpireUnreachable 
@emph{git reflog expire} は、この時間より古いreflogエントリを削除し、現在の先端(the current
tip)から到達不能にします。デフォルトは30日です。値「now」はすべてのエントリをすぐに期限切れにし、「never」は期限切れを完全に抑制します。中央に「<pattern>」(例:「refs/stash」)がある場合、設定は
<pattern> に一致するrefにのみ適用されます。

これらのタイプのエントリは通常、 @samp{git commit--amend} または @samp{git rebase}
を使用した結果として作成され、修正またはリベースが発生する前のコミットです。これらの変更は現在のプロジェクトの一部ではないため、ほとんどのユーザーはそれらをより早く期限切れにしたいと思うでしょう。そのため、デフォルトは
@samp{gc.reflogExpire} よりも積極的です。

@item  gc.rerereResolved 
以前に解決した競合するマージの記録は、「git rerere
gc」が実行されるときに、この設定値で指定の日数保持されます。より人間が読める「1.month.ago」などを使用することもできます。デフォルトは60日です。
git-rerere(1) を参照してください。

@item  gc.rerereUnresolved 
@emph{git rerere gc}
が実行されると、解決していない競合するマージの記録がこの設定値の日数保持されます。より人間が読める「1.month.ago」などを使用することもできます。デフォルトは15日です。
git-rerere(1) を参照してください。

@item  gitcvs.commitMsgAnnotation 
Append this string to each commit message. Set to empty string to disable
this feature. Defaults to "via git-CVS emulator".

@item  gitcvs.enabled 
Whether the CVS server interface is enabled for this repository.  See
git-cvsserver(1).

@item  gitcvs.logFile 
Path to a log file where the CVS server interface well… logs various
stuff. See git-cvsserver(1).

@item  gitcvs.usecrlfattr 
If true, the server will look up the end-of-line conversion attributes for
files to determine the @samp{-k} modes to use. If the attributes force Git to
treat a file as text, the @samp{-k} mode will be left blank so CVS clients will
treat it as text. If they suppress text conversion, the file will be set
with @emph{-kb} mode, which suppresses any newline munging the client might
otherwise do. If the attributes do not allow the file type to be determined,
then @samp{gitcvs.allBinary} is used. See gitattributes(5).

@item  gitcvs.allBinary 
This is used if @samp{gitcvs.usecrlfattr} does not resolve the correct @emph{-kb} mode
to use. If true, all unresolved files are sent to the client in mode
@emph{-kb}. This causes the client to treat them as binary files, which
suppresses any newline munging it otherwise might do. Alternatively, if it
is set to "guess", then the contents of the file are examined to decide if
it is binary, similar to @samp{core.autocrlf}.

@item  gitcvs.dbName 
Database used by git-cvsserver to cache revision information derived from
the Git repository. The exact meaning depends on the used database driver,
for SQLite (which is the default driver) this is a filename. Supports
variable substitution (see git-cvsserver(1) for details). May not
contain semicolons (@samp{;}).  Default: @emph{%Ggitcvs.%m.sqlite}

@item  gitcvs.dbDriver 
Used Perl DBI driver. You can specify any available driver for this here,
but it might not work. git-cvsserver is tested with @emph{DBD::SQLite}, reported
to work with @emph{DBD::Pg}, and reported @strong{not} to work with
@emph{DBD::mysql}. Experimental feature.  May not contain double colons
(@samp{:}). Default: @emph{SQLite}.  See git-cvsserver(1).

@item  gitcvs.dbUser, gitcvs.dbPass 
Database user and password. Only useful if setting @samp{gitcvs.dbDriver}, since
SQLite has no concept of database users and/or passwords.  @emph{gitcvs.dbUser}
supports variable substitution (see git-cvsserver(1) for details).

@item  gitcvs.dbTableNamePrefix 
Database table name prefix.  Prepended to the names of any database tables
used, allowing a single database to be used for several repositories.
Supports variable substitution (see git-cvsserver(1) for details).
Any non-alphabetic characters will be replaced with underscores.
@end table

All gitcvs variables except for @samp{gitcvs.usecrlfattr} and @samp{gitcvs.allBinary}
can also be specified as @emph{gitcvs.<access_method>.<varname>} (where
@emph{access_method} is one of "ext" and "pserver") to make them apply only for
the given access method.

@table @asis

@item  gitweb.category 
@itemx  gitweb.description 
@itemx  gitweb.owner 
@itemx  gitweb.url 
See gitweb(1) for description.

@item  gitweb.avatar 
@itemx  gitweb.blame 
@itemx  gitweb.grep 
@itemx  gitweb.highlight 
@itemx  gitweb.patches 
@itemx  gitweb.pickaxe 
@itemx  gitweb.remote_heads 
@itemx  gitweb.showSizes 
@itemx  gitweb.snapshot 
See gitweb.conf(5) for description.

@item  grep.lineNumber 
If set to true, enable @samp{-n} option by default.

@item  grep.column 
If set to true, enable the @samp{--column} option by default.

@item  grep.patternType 
Set the default matching behavior. Using a value of @emph{basic}, @emph{extended},
@emph{fixed}, or @emph{perl} will enable the @samp{--basic-regexp}, @samp{--extended-regexp},
@samp{--fixed-strings}, or @samp{--perl-regexp} option accordingly, while the value
@emph{default} will return to the default matching behavior.

@item  grep.extendedRegexp 
If set to true, enable @samp{--extended-regexp} option by default. This option is
ignored when the @samp{grep.patternType} option is set to a value other than
@emph{default}.

@item  grep.threads 
Number of grep worker threads to use.  See @samp{grep.threads} in
git-grep(1) for more information.

@item  grep.fallbackToNoIndex 
If set to true, fall back to git grep --no-index if git grep is executed
outside of a git repository.  Defaults to false.

@item  gpg.program 
Use this custom program instead of "@samp{gpg}" found on @samp{$PATH} when making or
verifying a PGP signature. The program must support the same command-line
interface as GPG, namely, to verify a detached signature, "@samp{gpg --verify
$signature - <$file}" is run, and the program is expected to signal a good
signature by exiting with code 0, and to generate an ASCII-armored detached
signature, the standard input of "@samp{gpg -bsau $key}" is fed with the contents
to be signed, and the program is expected to send the result to its standard
output.

@item  gpg.format 
Specifies which key format to use when signing with @samp{--gpg-sign}.  Default
is "openpgp" and another possible value is "x509".

@item  gpg.<format>.program 
Use this to customize the program used for the signing format you
chose. (see @samp{gpg.program} and @samp{gpg.format}) @samp{gpg.program} can still be used
as a legacy synonym for @samp{gpg.openpgp.program}. The default value for
@samp{gpg.x509.program} is "gpgsm".

@item  gpg.minTrustLevel 
Specifies a minimum trust level for signature verification.  If this option
is unset, then signature verification for merge operations require a key
with at least @samp{marginal} trust.  Other operations that perform signature
verification require a key with at least @samp{undefined} trust.  Setting this
option overrides the required trust-level for all operations.  Supported
values, in increasing order of significance:

@itemize 

@item
@samp{undefined}

@item
@samp{never}

@item
@samp{marginal}

@item
@samp{fully}

@item
@samp{ultimate}
@end itemize

@item  gui.commitMsgWidth 
Defines how wide the commit message window is in the
git-gui(1). "75" is the default.

@item  gui.diffContext 
Specifies how many context lines should be used in calls to diff made by the
git-gui(1). The default is "5".

@item  gui.displayUntracked 
Determines if git-gui(1) shows untracked files in the file list. The
default is "true".

@item  gui.encoding 
Specifies the default character encoding to use for displaying of file
contents in git-gui(1) and gitk(1).  It can be overridden by
setting the @emph{encoding} attribute for relevant files (see
gitattributes(5)).  If this option is not set, the tools default to
the locale encoding.

@item  gui.matchTrackingBranch 
Determines if new branches created with git-gui(1) should default to
tracking remote branches with matching names or not. Default: "false".

@item  gui.newBranchTemplate 
Is used as suggested name when creating new branches using the
git-gui(1).

@item  gui.pruneDuringFetch 
"true" if git-gui(1) should prune remote-tracking branches when
performing a fetch. The default value is "false".

@item  gui.trustmtime 
Determines if git-gui(1) should trust the file modification
timestamp or not. By default the timestamps are not trusted.

@item  gui.spellingDictionary 
Specifies the dictionary used for spell checking commit messages in the
git-gui(1). When set to "none" spell checking is turned off.

@item  gui.fastCopyBlame 
If true, @emph{git gui blame} uses @samp{-C} instead of @samp{-C -C} for original location
detection. It makes blame significantly faster on huge repositories at the
expense of less thorough copy detection.

@item  gui.copyBlameThreshold 
Specifies the threshold to use in @emph{git gui blame} original location
detection, measured in alphanumeric characters. See the git-blame(1)
manual for more information on copy detection.

@item  gui.blamehistoryctx 
Specifies the radius of history context in days to show in gitk(1)
for the selected commit, when the @samp{Show History Context} menu item is
invoked from @emph{git gui blame}. If this variable is set to zero, the whole
history is shown.

@item  guitool.<name>.cmd 
Specifies the shell command line to execute when the corresponding item of
the git-gui(1) @samp{Tools} menu is invoked. This option is mandatory for
every tool. The command is executed from the root of the working directory,
and in the environment it receives the name of the tool as @samp{GIT_GUITOOL},
the name of the currently selected file as @emph{FILENAME}, and the name of the
current branch as @emph{CUR_BRANCH} (if the head is detached, @emph{CUR_BRANCH} is
empty).

@item  guitool.<name>.needsFile 
Run the tool only if a diff is selected in the GUI. It guarantees that
@emph{FILENAME} is not empty.

@item  guitool.<name>.noConsole 
Run the command silently, without creating a window to display its output.

@item  guitool.<name>.noRescan 
Don’t rescan the working directory for changes after the tool finishes
execution.

@item  guitool.<name>.confirm 
Show a confirmation dialog before actually running the tool.

@item  guitool.<name>.argPrompt 
Request a string argument from the user, and pass it to the tool through the
@samp{ARGS} environment variable. Since requesting an argument implies
confirmation, the @emph{confirm} option has no effect if this is enabled. If the
option is set to @emph{true}, @emph{yes}, or @emph{1}, the dialog uses a built-in generic
prompt; otherwise the exact value of the variable is used.

@item  guitool.<name>.revPrompt 
Request a single valid revision from the user, and set the @samp{REVISION}
environment variable. In other aspects this option is similar to
@emph{argPrompt}, and can be used together with it.

@item  guitool.<name>.revUnmerged 
Show only unmerged branches in the @emph{revPrompt} subdialog.  This is useful
for tools similar to merge or rebase, but not for things like checkout or
reset.

@item  guitool.<name>.title 
Specifies the title to use for the prompt dialog. The default is the tool
name.

@item  guitool.<name>.prompt 
Specifies the general prompt string to display at the top of the dialog,
before subsections for @emph{argPrompt} and @emph{revPrompt}.  The default value
includes the actual command.

@item  help.browser 
Specify the browser that will be used to display help in the @emph{web}
format. See git-help(1).

@item  help.format 
Override the default help format used by git-help(1).  Values @emph{man},
@emph{info}, @emph{web} and @emph{html} are supported. @emph{man} is the default. @emph{web} and
@emph{html} are the same.

@item  help.autoCorrect 
If git detects typos and can identify exactly one valid command similar to
the error, git will try to suggest the correct command or even run the
suggestion automatically. Possible config values are:

@itemize 

@item
0 (default): show the suggested command.
positive number: run the suggested command after specified deciseconds (0.1
sec).

@item
"immediate": run the suggested command immediately.
"prompt": show the suggestion and prompt for confirmation to run the
command.

@item
"never": don’t run or show any suggested command.
@end itemize

@item  help.htmlPath 
Specify the path where the HTML documentation resides. File system paths and
URLs are supported. HTML pages will be prefixed with this path when help is
displayed in the @emph{web} format. This defaults to the documentation path of
your Git installation.

@item  http.proxy 
Override the HTTP proxy, normally configured using the @emph{http_proxy},
@emph{https_proxy}, and @emph{all_proxy} environment variables (see @samp{curl(1)}). In
addition to the syntax understood by curl, it is possible to specify a proxy
string with a user name but no password, in which case git will attempt to
acquire one in the same way it does for other credentials. See
gitcredentials(7) for more information. The syntax thus is
@emph{[protocol://][user[:password]@@]proxyhost[:port]}. This can be overridden on
a per-remote basis; see remote.<name>.proxy

@item  http.proxyAuthMethod 
Set the method with which to authenticate against the HTTP proxy. This only
takes effect if the configured proxy string contains a user name part
(i.e. is of the form @emph{user@@host} or @emph{user@@host:port}). This can be
overridden on a per-remote basis; see @samp{remote.<name>.proxyAuthMethod}.  Both
can be overridden by the @samp{GIT_HTTP_PROXY_AUTHMETHOD} environment variable.
Possible values are:

@itemize 

@item
@samp{anyauth} - Automatically pick a suitable authentication method. It is
assumed that the proxy answers an unauthenticated request with a 407 status
code and one or more Proxy-authenticate headers with supported
authentication methods. This is the default.

@item
@samp{basic} - HTTP Basic authentication

@item
@samp{digest} - HTTP Digest authentication; this prevents the password from being
transmitted to the proxy in clear text

@item
@samp{negotiate} - GSS-Negotiate authentication (compare the --negotiate option
of @samp{curl(1)})

@item
@samp{ntlm} - NTLM authentication (compare the --ntlm option of @samp{curl(1)})
@end itemize

@item  http.proxySSLCert 
The pathname of a file that stores a client certificate to use to
authenticate with an HTTPS proxy. Can be overridden by the
@samp{GIT_PROXY_SSL_CERT} environment variable.

@item  http.proxySSLKey 
The pathname of a file that stores a private key to use to authenticate with
an HTTPS proxy. Can be overridden by the @samp{GIT_PROXY_SSL_KEY} environment
variable.

@item  http.proxySSLCertPasswordProtected 
Enable Git’s password prompt for the proxy SSL certificate.  Otherwise
OpenSSL will prompt the user, possibly many times, if the certificate or
private key is encrypted. Can be overridden by the
@samp{GIT_PROXY_SSL_CERT_PASSWORD_PROTECTED} environment variable.

@item  http.proxySSLCAInfo 
Pathname to the file containing the certificate bundle that should be used
to verify the proxy with when using an HTTPS proxy. Can be overridden by the
@samp{GIT_PROXY_SSL_CAINFO} environment variable.

@item  http.emptyAuth 
Attempt authentication without seeking a username or password.  This can be
used to attempt GSS-Negotiate authentication without specifying a username
in the URL, as libcurl normally requires a username for authentication.

@item  http.delegation 
Control GSSAPI credential delegation. The delegation is disabled by default
in libcurl since version 7.21.7. Set parameter to tell the server what it is
allowed to delegate when it comes to user credentials. Used with
GSS/kerberos. Possible values are:

@itemize 

@item
@samp{none} - Don’t allow any delegation.

@item
@samp{policy} - Delegates if and only if the OK-AS-DELEGATE flag is set in the
Kerberos service ticket, which is a matter of realm policy.

@item
@samp{always} - Unconditionally allow the server to delegate.
@end itemize

@item  http.extraHeader 
Pass an additional HTTP header when communicating with a server.  If more
than one such entry exists, all of them are added as extra headers.  To
allow overriding the settings inherited from the system config, an empty
value will reset the extra headers to the empty list.

@item  http.cookieFile 
The pathname of a file containing previously stored cookie lines, which
should be used in the Git http session, if they match the server. The file
format of the file to read cookies from should be plain HTTP headers or the
Netscape/Mozilla cookie file format (see @samp{curl(1)}).  NOTE that the file
specified with http.cookieFile is used only as input unless http.saveCookies
is set.

@item  http.saveCookies 
If set, store cookies received during requests to the file specified by
http.cookieFile. Has no effect if http.cookieFile is unset.

@item  http.version 
Use the specified HTTP protocol version when communicating with a server.
If you want to force the default. The available and default version depend
on libcurl. Currently the possible values of this option are:

@itemize 

@item
HTTP/2

@item
HTTP/1.1
@end itemize

@item  http.sslVersion 
The SSL version to use when negotiating an SSL connection, if you want to
force the default.  The available and default version depend on whether
libcurl was built against NSS or OpenSSL and the particular configuration of
the crypto library in use. Internally this sets the @emph{CURLOPT_SSL_VERSION}
option; see the libcurl documentation for more details on the format of this
option and for the ssl version supported. Currently the possible values of
this option are:

@itemize 

@item
sslv2

@item
sslv3

@item
tlsv1

@item
tlsv1.0

@item
tlsv1.1

@item
tlsv1.2

@item
tlsv1.3
@end itemize

Can be overridden by the @samp{GIT_SSL_VERSION} environment variable.  To force
git to use libcurl’s default ssl version and ignore any explicit
http.sslversion option, set @samp{GIT_SSL_VERSION} to the empty string.

@item  http.sslCipherList 
A list of SSL ciphers to use when negotiating an SSL connection.  The
available ciphers depend on whether libcurl was built against NSS or OpenSSL
and the particular configuration of the crypto library in use.  Internally
this sets the @emph{CURLOPT_SSL_CIPHER_LIST} option; see the libcurl
documentation for more details on the format of this list.

Can be overridden by the @samp{GIT_SSL_CIPHER_LIST} environment variable.  To
force git to use libcurl’s default cipher list and ignore any explicit
http.sslCipherList option, set @samp{GIT_SSL_CIPHER_LIST} to the empty string.

@item  http.sslVerify 
Whether to verify the SSL certificate when fetching or pushing over
HTTPS. Defaults to true. Can be overridden by the @samp{GIT_SSL_NO_VERIFY}
environment variable.

@item  http.sslCert 
File containing the SSL certificate when fetching or pushing over HTTPS. Can
be overridden by the @samp{GIT_SSL_CERT} environment variable.

@item  http.sslKey 
File containing the SSL private key when fetching or pushing over HTTPS. Can
be overridden by the @samp{GIT_SSL_KEY} environment variable.

@item  http.sslCertPasswordProtected 
Enable Git’s password prompt for the SSL certificate.  Otherwise OpenSSL
will prompt the user, possibly many times, if the certificate or private key
is encrypted.  Can be overridden by the @samp{GIT_SSL_CERT_PASSWORD_PROTECTED}
environment variable.

@item  http.sslCAInfo 
File containing the certificates to verify the peer with when fetching or
pushing over HTTPS. Can be overridden by the @samp{GIT_SSL_CAINFO} environment
variable.

@item  http.sslCAPath 
Path containing files with the CA certificates to verify the peer with when
fetching or pushing over HTTPS. Can be overridden by the @samp{GIT_SSL_CAPATH}
environment variable.

@item  http.sslBackend 
Name of the SSL backend to use (e.g. "openssl" or "schannel").  This option
is ignored if cURL lacks support for choosing the SSL backend at runtime.

@item  http.schannelCheckRevoke 
Used to enforce or disable certificate revocation checks in cURL when
http.sslBackend is set to "schannel". Defaults to @samp{true} if unset. Only
necessary to disable this if Git consistently errors and the message is
about checking the revocation status of a certificate. This option is
ignored if cURL lacks support for setting the relevant SSL option at
runtime.

@item  http.schannelUseSSLCAInfo 
As of cURL v7.60.0, the Secure Channel backend can use the certificate
bundle provided via @samp{http.sslCAInfo}, but that would override the Windows
Certificate Store. Since this is not desirable by default, Git will tell
cURL not to use that bundle by default when the @samp{schannel} backend was
configured via @samp{http.sslBackend}, unless @samp{http.schannelUseSSLCAInfo}
overrides this behavior.

@item  http.pinnedpubkey 
Public key of the https service. It may either be the filename of a PEM or
DER encoded public key file or a string starting with @emph{sha256//} followed by
the base64 encoded sha256 hash of the public key. See also libcurl
@emph{CURLOPT_PINNEDPUBLICKEY}. git will exit with an error if this option is set
but not supported by cURL.

@item  http.sslTry 
Attempt to use AUTH SSL/TLS and encrypted data transfers when connecting via
regular FTP protocol. This might be needed if the FTP server requires it for
security reasons or you wish to connect securely whenever remote FTP server
supports it.  Default is false since it might trigger certificate
verification errors on misconfigured servers.

@item  http.maxRequests 
How many HTTP requests to launch in parallel. Can be overridden by the
@samp{GIT_HTTP_MAX_REQUESTS} environment variable. Default is 5.

@item  http.minSessions 
The number of curl sessions (counted across slots) to be kept across
requests. They will not be ended with curl_easy_cleanup() until
http_cleanup() is invoked. If USE_CURL_MULTI is not defined, this value will
be capped at 1. Defaults to 1.

@item  http.postBuffer 
Maximum size in bytes of the buffer used by smart HTTP transports when
POSTing data to the remote system.  For requests larger than this buffer
size, HTTP/1.1 and Transfer-Encoding: chunked is used to avoid creating a
massive pack file locally.  Default is 1 MiB, which is sufficient for most
requests.

Note that raising this limit is only effective for disabling chunked
transfer encoding and therefore should be used only where the remote server
or a proxy only supports HTTP/1.0 or is noncompliant with the HTTP
standard.  Raising this is not, in general, an effective solution for most
push problems, but can increase memory consumption significantly since the
entire buffer is allocated even for small pushes.

@item  http.lowSpeedLimit, http.lowSpeedTime 
If the HTTP transfer speed is less than @emph{http.lowSpeedLimit} for longer than
@emph{http.lowSpeedTime} seconds, the transfer is aborted.  Can be overridden by
the @samp{GIT_HTTP_LOW_SPEED_LIMIT} and @samp{GIT_HTTP_LOW_SPEED_TIME} environment
variables.

@item  http.noEPSV 
A boolean which disables using of EPSV ftp command by curl.  This can
helpful with some "poor" ftp servers which don’t support EPSV mode. Can be
overridden by the @samp{GIT_CURL_FTP_NO_EPSV} environment variable. Default is
false (curl will use EPSV).

@item  http.userAgent 
The HTTP USER_AGENT string presented to an HTTP server.  The default value
represents the version of the client Git such as git/1.7.1.  This option
allows you to override this value to a more common value such as
Mozilla/4.0.  This may be necessary, for instance, if connecting through a
firewall that restricts HTTP connections to a set of common USER_AGENT
strings (but not including those like git/1.7.1).  Can be overridden by the
@samp{GIT_HTTP_USER_AGENT} environment variable.

@item  http.followRedirects 
Whether git should follow HTTP redirects. If set to @samp{true}, git will
transparently follow any redirect issued by a server it encounters. If set
to @samp{false}, git will treat all redirects as errors. If set to @samp{initial}, git
will follow redirects only for the initial request to a remote, but not for
subsequent follow-up HTTP requests. Since git uses the redirected URL as the
base for the follow-up requests, this is generally sufficient. The default
is @samp{initial}.

@item  http.<url>.* 
Any of the http.* options above can be applied selectively to some URLs.
For a config key to match a URL, each element of the config key is compared
to that of the URL, in the following order:

@enumerate 

@item
Scheme (e.g., @samp{https} in @samp{https://example.com/}). This field must match
exactly between the config key and the URL.

@item
Host/domain name (e.g., @samp{example.com} in @samp{https://example.com/}).  This
field must match between the config key and the URL. It is possible to
specify a @samp{*} as part of the host name to match all subdomains at this
level. @samp{https://*.example.com/} for example would match
@samp{https://foo.example.com/}, but not @samp{https://foo.bar.example.com/}.

@item
Port number (e.g., @samp{8080} in @samp{http://example.com:8080/}).  This field must
match exactly between the config key and the URL.  Omitted port numbers are
automatically converted to the correct default for the scheme before
matching.

@item
Path (e.g., @samp{repo.git} in @samp{https://example.com/repo.git}). The path field of
the config key must match the path field of the URL either exactly or as a
prefix of slash-delimited path elements.  This means a config key with path
@samp{foo/} matches URL path @samp{foo/bar}.  A prefix can only match on a slash (@samp{/})
boundary.  Longer matches take precedence (so a config key with path
@samp{foo/bar} is a better match to URL path @samp{foo/bar} than a config key with
just path @samp{foo/}).

@item
User name (e.g., @samp{user} in @samp{https://user@@example.com/repo.git}). If the
config key has a user name it must match the user name in the URL
exactly. If the config key does not have a user name, that config key will
match a URL with any user name (including none), but at a lower precedence
than a config key with a user name.
@end enumerate

The list above is ordered by decreasing precedence; a URL that matches a
config key’s path is preferred to one that matches its user name. For
example, if the URL is @samp{https://user@@example.com/foo/bar} a config key match
of @samp{https://example.com/foo} will be preferred over a config key match of
@samp{https://user@@example.com}.

All URLs are normalized before attempting any matching (the password part,
if embedded in the URL, is always ignored for matching purposes) so that
equivalent URLs that are simply spelled differently will match properly.
Environment variable settings always override any matches.  The URLs that
are matched against are those given directly to Git commands.  This means
any URLs visited as a result of a redirection do not participate in
matching.

@item  i18n.commitEncoding 
Character encoding the commit messages are stored in; Git itself does not
care per se, but this information is necessary e.g. when importing commits
from emails or in the gitk graphical history browser (and possibly at other
places in the future or in other porcelains). See
e.g. git-mailinfo(1). Defaults to @emph{utf-8}.

@item  i18n.logOutputEncoding 
Character encoding the commit messages are converted to when running @emph{git
log} and friends.

@item  imap.folder 
メールをドロップするフォルダー。通常はドラフトフォルダーです。
例：「INBOX.Drafts」とか「INBOX/Drafts」とか「[Gmail]/Drafts」です。必須です。

@item  imap.tunnel 
サーバーへの直接ネットワーク接続を使用する代わりに、コマンドがパイプされるIMAPサーバーへのトンネルをセットアップするために使用されるコマンド。
imap.host が設定されていない場合に必須です。

@item  imap.host 
サーバーを識別するURL。 非セキュア接続には @samp{imap://} プレフィックスを使用し、セキュア接続には @samp{imaps://}
プレフィックスを使用します。 imap.tunnel が設定されている場合は無視されますが、それ以外の場合は必須です。

@item  imap.user 
サーバーにログインするときに使用するユーザー名。

@item  imap.pass 
サーバーにログインするときに使用するパスワード。

@item  imap.port 
サーバー上で接続する整数のポート番号。 デフォルトは、 imap:// ホストの場合は143、 imaps:// ホストの場合は993です。
imap.tunnel が設定されている場合は無視されます。

@item  imap.sslverify 
SSL/TLS接続で使用されるサーバー証明書の検証を有効/無効にするブール値。デフォルトは @samp{true} です。 imap.tunnel
が設定されている場合は無視されます。

@item  imap.preformattedHTML 
パッチを送信するときにhtmlエンコーディングの使用を有効/無効にするブール値。 htmlでエンコードされたパッチは <pre>
で囲まれ、コンテンツタイプは text/html になります。皮肉なことに、このオプションを有効にすると、Thunderbirdはパッチを
plane/text の format=fixed メールとして送信します。デフォルトは @samp{false} です。

@item  imap.authMethod 
IMAPサーバーでの認証の認証方法を指定します。GitがNO_CURLオプションを使用してビルドされた場合、curlバージョンが7.34.0より古い場合、またはgit-imap-sendを
@samp{--no-curl} オプションを指定して実行している場合、サポートされるメソッドは @emph{CRAM-MD5}
のみです。これが設定されていない場合、「git imap-send」は基本的なIMAPプレーンテキストLOGINコマンドを使用します。

@item  index.recordEndOfIndexEntries 
Specifies whether the index file should include an "End Of Index Entry"
section. This reduces index load time on multiprocessor machines but
produces a message "ignoring EOIE extension" when reading the index using
Git versions before 2.20. Defaults to @emph{true} if index.threads has been
explicitly enabled, @emph{false} otherwise.

@item  index.recordOffsetTable 
Specifies whether the index file should include an "Index Entry Offset
Table" section. This reduces index load time on multiprocessor machines but
produces a message "ignoring IEOT extension" when reading the index using
Git versions before 2.20.  Defaults to @emph{true} if index.threads has been
explicitly enabled, @emph{false} otherwise.

@item  index.sparse 
When enabled, write the index using sparse-directory entries. This has no
effect unless @samp{core.sparseCheckout} and @samp{core.sparseCheckoutCone} are both
enabled. Defaults to @emph{false}.

@item  index.threads 
Specifies the number of threads to spawn when loading the index.  This is
meant to reduce index load time on multiprocessor machines.  Specifying 0 or
@emph{true} will cause Git to auto-detect the number of CPU’s and set the number
of threads accordingly. Specifying 1 or @emph{false} will disable
multithreading. Defaults to @emph{true}.

@item  index.version 
Specify the version with which new index files should be initialized.  This
does not affect existing repositories.  If @samp{feature.manyFiles} is enabled,
then the default is 4.

@item  init.templateDir 
テンプレートのコピー元のディレクトリを指定します。 (git-init(1) の「TEMPLATE
DIRECTORY」セクションを参照してください。)

@item  init.defaultBranch 
デフォルトのブランチ名を上書きできます。例えば、新しいリポジトリを初期化するとき。

@item  instaweb.browser 
Specify the program that will be used to browse your working repository in
gitweb. See git-instaweb(1).

@item  instaweb.httpd 
The HTTP daemon command-line to start gitweb on your working repository. See
git-instaweb(1).

@item  instaweb.local 
If true the web server started by git-instaweb(1) will be bound to
the local IP (127.0.0.1).

@item  instaweb.modulePath 
The default module path for git-instaweb(1) to use instead of
/usr/lib/apache2/modules.  Only used if httpd is Apache.

@item  instaweb.port 
The port number to bind the gitweb httpd to. See git-instaweb(1).

@item  interactive.singleKey 
In interactive commands, allow the user to provide one-letter input with a
single key (i.e., without hitting enter).  Currently this is used by the
@samp{--patch} mode of git-add(1), git-checkout(1),
git-restore(1), git-commit(1), git-reset(1), and
git-stash(1). Note that this setting is silently ignored if portable
keystroke input is not available; requires the Perl module Term::ReadKey.

@item  interactive.diffFilter 
When an interactive command (such as @samp{git add --patch}) shows a colorized
diff, git will pipe the diff through the shell command defined by this
configuration variable. The command may mark up the diff further for human
consumption, provided that it retains a one-to-one correspondence with the
lines in the original diff. Defaults to disabled (no filtering).

@item  log.abbrevCommit 
If true, makes git-log(1), git-show(1), and
git-whatchanged(1) assume @samp{--abbrev-commit}. You may override this
option with @samp{--no-abbrev-commit}.

@item  log.date 
Set the default date-time mode for the @emph{log} command.  Setting a value for
log.date is similar to using @emph{git log}'s @samp{--date} option.  See
git-log(1) for details.

@item  log.decorate 
Print out the ref names of any commits that are shown by the log command. If
@emph{short} is specified, the ref name prefixes @emph{refs/heads/}, @emph{refs/tags/} and
@emph{refs/remotes/} will not be printed. If @emph{full} is specified, the full ref
name (including prefix) will be printed.  If @emph{auto} is specified, then if
the output is going to a terminal, the ref names are shown as if @emph{short}
were given, otherwise no ref names are shown. This is the same as the
@samp{--decorate} option of the @samp{git log}.

@item  log.excludeDecoration 
Exclude the specified patterns from the log decorations. This is similar to
the @samp{--decorate-refs-exclude} command-line option, but the config option can
be overridden by the @samp{--decorate-refs} option.

@item  log.diffMerges 
Set default diff format to be used for merge commits. See @samp{--diff-merges} in
git-log(1) for details.  Defaults to @samp{separate}.

@item  log.follow 
If @samp{true}, @samp{git log} will act as if the @samp{--follow} option was used when a
single <path> is given.  This has the same limitations as @samp{--follow},
i.e. it cannot be used to follow multiple files and does not work well on
non-linear history.

@item  log.graphColors 
A list of colors, separated by commas, that can be used to draw history
lines in @samp{git log --graph}.

@item  log.showRoot 
If true, the initial commit will be shown as a big creation event.  This is
equivalent to a diff against an empty tree.  Tools like git-log(1)
or git-whatchanged(1), which normally hide the root commit will now
show it. True by default.

@item  log.showSignature 
If true, makes git-log(1), git-show(1), and
git-whatchanged(1) assume @samp{--show-signature}.

@item  log.mailmap 
If true, makes git-log(1), git-show(1), and
git-whatchanged(1) assume @samp{--use-mailmap}, otherwise assume
@samp{--no-use-mailmap}. True by default.

@item  lsrefs.unborn 
May be "advertise" (the default), "allow", or "ignore". If "advertise", the
server will respond to the client sending "unborn" (as described in
protocol-v2.txt) and will advertise support for this feature during the
protocol v2 capability advertisement. "allow" is the same as "advertise"
except that the server will not advertise support for this feature; this is
useful for load-balanced servers that cannot be updated atomically (for
example), since the administrator could configure "allow", then after a
delay, configure "advertise".

@item  mailinfo.scissors 
trueの場合、 git-mailinfo(1) (それゆえ git-am(1) も)は、コマンドラインで
@samp{--scissors}
オプションが指定されているかのようにデフォルトで動作します。この機能がアクティブな場合、メッセージ本文から切り取り線(つまり、主に ">8" や
"8<" や "-" で構成される)行とそれより前のすべてを削除します。

@item  mailmap.file 
拡張メールマップファイルの場所。リポジトリのルートにあるデフォルトのメールマップが最初にロードされ、次にこの変数が指すメールマップファイルがロードされます。メールマップファイルの場所は、リポジトリサブディレクトリ内、またはリポジトリの外部のどこかにあります。
git-shortlog(1) と git-blame(1) を参照してください。

@item  mailmap.blob 
@samp{mailmap.file} と同様ですが、値をリポジトリ内のブロブへの参照と見なします。 @samp{mailmap.file} と
@samp{mailmap.blob} の両方が指定されている場合、両方が解析され、 @samp{mailmap.file}
からのエントリが優先されます。この変数は、ベアリポジトリではデフォルトで @samp{HEAD:.mailmap}
になります。非ベアリポジトリでは、デフォルトで空になります。

@item  maintenance.auto 
This boolean config option controls whether some commands run @samp{git
maintenance run --auto} after doing their normal work. Defaults to true.

@item  maintenance.strategy 
This string config option provides a way to specify one of a few recommended
schedules for background maintenance. This only affects which tasks are run
during @samp{git maintenance run --schedule=X} commands, provided no
@samp{--task=<task>} arguments are provided.  Further, if a
@samp{maintenance.<task>.schedule} config value is set, then that value is used
instead of the one provided by @samp{maintenance.strategy}. The possible strategy
strings are:

@itemize 

@item
@samp{none}: This default setting implies no task are run at any schedule.

@item
@samp{incremental}: This setting optimizes for performing small maintenance
activities that do not delete any data. This does not schedule the @samp{gc}
task, but runs the @samp{prefetch} and @samp{commit-graph} tasks hourly, the
@samp{loose-objects} and @samp{incremental-repack} tasks daily, and the @samp{pack-refs}
task weekly.
@end itemize

@item  maintenance.<task>.enabled 
This boolean config option controls whether the maintenance task with name
@samp{<task>} is run when no @samp{--task} option is specified to @samp{git maintenance
run}. These config values are ignored if a @samp{--task} option exists. By
default, only @samp{maintenance.gc.enabled} is true.

@item  maintenance.<task>.schedule 
This config option controls whether or not the given @samp{<task>} runs during a
@samp{git maintenance run --schedule=<frequency>} command. The value must be one
of "hourly", "daily", or "weekly".

@item  maintenance.commit-graph.auto 
This integer config option controls how often the @samp{commit-graph} task should
be run as part of @samp{git maintenance run --auto}. If zero, then the
@samp{commit-graph} task will not run with the @samp{--auto} option. A negative value
will force the task to run every time. Otherwise, a positive value implies
the command should run when the number of reachable commits that are not in
the commit-graph file is at least the value of
@samp{maintenance.commit-graph.auto}. The default value is 100.

@item  maintenance.loose-objects.auto 
This integer config option controls how often the @samp{loose-objects} task
should be run as part of @samp{git maintenance run --auto}. If zero, then the
@samp{loose-objects} task will not run with the @samp{--auto} option. A negative value
will force the task to run every time. Otherwise, a positive value implies
the command should run when the number of loose objects is at least the
value of @samp{maintenance.loose-objects.auto}.  The default value is 100.

@item  maintenance.incremental-repack.auto 
This integer config option controls how often the @samp{incremental-repack} task
should be run as part of @samp{git maintenance run --auto}. If zero, then the
@samp{incremental-repack} task will not run with the @samp{--auto} option. A negative
value will force the task to run every time.  Otherwise, a positive value
implies the command should run when the number of pack-files not in the
multi-pack-index is at least the value of
@samp{maintenance.incremental-repack.auto}. The default value is 10.

@item  man.viewer 
Specify the programs that may be used to display help in the @emph{man}
format. See git-help(1).

@item  man.<tool>.cmd 
Specify the command to invoke the specified man viewer. The specified
command is evaluated in shell with the man page passed as argument. (See
git-help(1).)

@item  man.<tool>.path 
Override the path for the given tool that may be used to display help in the
@emph{man} format. See git-help(1).

@item  merge.conflictStyle 
Specify the style in which conflicted hunks are written out to working tree
files upon merge.  The default is "merge", which shows a @samp{<<<<<<<} conflict
marker, changes made by one side, a @samp{=======} marker, changes made by the
other side, and then a @samp{>>>>>>>} marker.  An alternate style, "diff3", adds
a @samp{|||||||} marker and the original text before the @samp{=======} marker.

@item  merge.defaultToUpstream 
If merge is called without any commit argument, merge the upstream branches
configured for the current branch by using their last observed values stored
in their remote-tracking branches.  The values of the @samp{branch.<current
branch>.merge} that name the branches at the remote named by
@samp{branch.<current branch>.remote} are consulted, and then they are mapped via
@samp{remote.<remote>.fetch} to their corresponding remote-tracking branches, and
the tips of these tracking branches are merged. Defaults to true.

@item  merge.ff 
By default, Git does not create an extra merge commit when merging a commit
that is a descendant of the current commit. Instead, the tip of the current
branch is fast-forwarded. When set to @samp{false}, this variable tells Git to
create an extra merge commit in such a case (equivalent to giving the
@samp{--no-ff} option from the command line). When set to @samp{only}, only such
fast-forward merges are allowed (equivalent to giving the @samp{--ff-only} option
from the command line).

@item  merge.verifySignatures 
If true, this is equivalent to the --verify-signatures command line
option. See git-merge(1) for details.

@item  merge.branchdesc 
ブランチ名に加えて、それらに関連付けられたブランチの説明テキストをログメッセージに入力します。デフォルトはfalseです。

@item  merge.log 
ブランチ名に加えて、マージされる実際のコミットからの最大「指定の数」の親コミットの1行説明をログメッセージに入力します。デフォルトはfalseで、trueは20の同義語です。

@item  merge.suppressDest 
統合ブランチの名前に一致するグロブをこの複数値の構成変数(multi-valued configuration
variable)に追加することにより、これらの統合ブランチへのマージに対して計算されるデフォルトのマージメッセージは、タイトルから「into
<branch name>」を省略します。

空の値を持つ要素を使用して、以前の構成エントリから蓄積されたグロブのリストをクリアできます。 @samp{merge.suppressDest}
変数が定義されていない場合、下位互換性のためにデフォルト値の @samp{master} が使用されます。

@item  merge.renameLimit 
The number of files to consider in the exhaustive portion of rename
detection during a merge.  If not specified, defaults to the value of
diff.renameLimit.  If neither merge.renameLimit nor diff.renameLimit are
specified, currently defaults to 7000.  This setting has no effect if rename
detection is turned off.

@item  merge.renames 
Whether Git detects renames.  If set to "false", rename detection is
disabled. If set to "true", basic rename detection is enabled.  Defaults to
the value of diff.renames.

@item  merge.directoryRenames 
Whether Git detects directory renames, affecting what happens at merge time
to new files added to a directory on one side of history when that directory
was renamed on the other side of history.  If merge.directoryRenames is set
to "false", directory rename detection is disabled, meaning that such new
files will be left behind in the old directory.  If set to "true", directory
rename detection is enabled, meaning that such new files will be moved into
the new directory.  If set to "conflict", a conflict will be reported for
such paths.  If merge.renames is false, merge.directoryRenames is ignored
and treated as false.  Defaults to "conflict".

@item  merge.renormalize 
Tell Git that canonical representation of files in the repository has
changed over time (e.g. earlier commits record text files with CRLF line
endings, but recent ones use LF line endings).  In such a repository, Git
can convert the data recorded in commits to a canonical form before
performing a merge to reduce unnecessary conflicts.  For more information,
see section "Merging branches with differing checkin/checkout attributes" in
gitattributes(5).

@item  merge.stat 
Whether to print the diffstat between ORIG_HEAD and the merge result at the
end of the merge.  True by default.

@item  merge.autoStash 
When set to true, automatically create a temporary stash entry before the
operation begins, and apply it after the operation ends.  This means that
you can run merge on a dirty worktree.  However, use with care: the final
stash application after a successful merge might result in non-trivial
conflicts.  This option can be overridden by the @samp{--no-autostash} and
@samp{--autostash} options of git-merge(1).  Defaults to false.

@item  merge.tool 
Controls which merge tool is used by git-mergetool(1).  The list
below shows the valid built-in values.  Any other value is treated as a
custom merge tool and requires that a corresponding mergetool.<tool>.cmd
variable is defined.

@item  merge.guitool 
Controls which merge tool is used by git-mergetool(1) when the
-g/--gui flag is specified. The list below shows the valid built-in values.
Any other value is treated as a custom merge tool and requires that a
corresponding mergetool.<guitool>.cmd variable is defined.

@itemize 

@item
araxis

@item
bc

@item
bc3

@item
bc4

@item
codecompare

@item
deltawalker

@item
diffmerge

@item
diffuse

@item
ecmerge

@item
emerge

@item
examdiff

@item
guiffy

@item
gvimdiff

@item
gvimdiff1

@item
gvimdiff2

@item
gvimdiff3

@item
kdiff3

@item
meld

@item
nvimdiff

@item
nvimdiff1

@item
nvimdiff2

@item
nvimdiff3

@item
opendiff

@item
p4merge

@item
smerge

@item
tkdiff

@item
tortoisemerge

@item
vimdiff

@item
vimdiff1

@item
vimdiff2

@item
vimdiff3

@item
winmerge

@item
xxdiff
@end itemize

@item  merge.verbosity 
Controls the amount of output shown by the recursive merge strategy.  Level
0 outputs nothing except a final error message if conflicts were
detected. Level 1 outputs only conflicts, 2 outputs conflicts and file
changes.  Level 5 and above outputs debugging information.  The default is
level 2.  Can be overridden by the @samp{GIT_MERGE_VERBOSITY} environment
variable.

@item  merge.<driver>.name 
Defines a human-readable name for a custom low-level merge driver.  See
gitattributes(5) for details.

@item  merge.<driver>.driver 
Defines the command that implements a custom low-level merge driver.  See
gitattributes(5) for details.

@item  merge.<driver>.recursive 
Names a low-level merge driver to be used when performing an internal merge
between common ancestors.  See gitattributes(5) for details.

@item  mergetool.<tool>.path 
Override the path for the given tool.  This is useful in case your tool is
not in the PATH.

@item  mergetool.<tool>.cmd 
Specify the command to invoke the specified merge tool.  The specified
command is evaluated in shell with the following variables available: @emph{BASE}
is the name of a temporary file containing the common base of the files to
be merged, if available; @emph{LOCAL} is the name of a temporary file containing
the contents of the file on the current branch; @emph{REMOTE} is the name of a
temporary file containing the contents of the file from the branch being
merged; @emph{MERGED} contains the name of the file to which the merge tool
should write the results of a successful merge.

@item  mergetool.<tool>.hideResolved 
Allows the user to override the global @samp{mergetool.hideResolved} value for a
specific tool. See @samp{mergetool.hideResolved} for the full description.

@item  mergetool.<tool>.trustExitCode 
For a custom merge command, specify whether the exit code of the merge
command can be used to determine whether the merge was successful.  If this
is not set to true then the merge target file timestamp is checked and the
merge assumed to have been successful if the file has been updated,
otherwise the user is prompted to indicate the success of the merge.

@item  mergetool.meld.hasOutput 
Older versions of @samp{meld} do not support the @samp{--output} option.  Git will
attempt to detect whether @samp{meld} supports @samp{--output} by inspecting the
output of @samp{meld --help}.  Configuring @samp{mergetool.meld.hasOutput} will make
Git skip these checks and use the configured value instead.  Setting
@samp{mergetool.meld.hasOutput} to @samp{true} tells Git to unconditionally use the
@samp{--output} option, and @samp{false} avoids using @samp{--output}.

@item  mergetool.meld.useAutoMerge 
When the @samp{--auto-merge} is given, meld will merge all non-conflicting parts
automatically, highlight the conflicting parts and wait for user decision.
Setting @samp{mergetool.meld.useAutoMerge} to @samp{true} tells Git to unconditionally
use the @samp{--auto-merge} option with @samp{meld}.  Setting this value to @samp{auto}
makes git detect whether @samp{--auto-merge} is supported and will only use
@samp{--auto-merge} when available.  A value of @samp{false} avoids using
@samp{--auto-merge} altogether, and is the default value.

@item  mergetool.hideResolved 
During a merge Git will automatically resolve as many conflicts as possible
and write the @emph{MERGED} file containing conflict markers around any conflicts
that it cannot resolve; @emph{LOCAL} and @emph{REMOTE} normally represent the versions
of the file from before Git’s conflict resolution. This flag causes @emph{LOCAL}
and @emph{REMOTE} to be overwriten so that only the unresolved conflicts are
presented to the merge tool. Can be configured per-tool via the
@samp{mergetool.<tool>.hideResolved} configuration variable. Defaults to @samp{false}.

@item  mergetool.keepBackup 
After performing a merge, the original file with conflict markers can be
saved as a file with a @samp{.orig} extension.  If this variable is set to
@samp{false} then this file is not preserved.  Defaults to @samp{true} (i.e. keep the
backup files).

@item  mergetool.keepTemporaries 
When invoking a custom merge tool, Git uses a set of temporary files to pass
to the tool. If the tool returns an error and this variable is set to
@samp{true}, then these temporary files will be preserved, otherwise they will be
removed after the tool has exited. Defaults to @samp{false}.

@item  mergetool.writeToTemp 
Git writes temporary @emph{BASE}, @emph{LOCAL}, and @emph{REMOTE} versions of conflicting
files in the worktree by default.  Git will attempt to use a temporary
directory for these files when set @samp{true}.  Defaults to @samp{false}.

@item  mergetool.prompt 
Prompt before each invocation of the merge resolution program.

@item  notes.mergeStrategy 
Which merge strategy to choose by default when resolving notes conflicts.
Must be one of @samp{manual}, @samp{ours}, @samp{theirs}, @samp{union}, or @samp{cat_sort_uniq}.
Defaults to @samp{manual}.  See "NOTES MERGE STRATEGIES" section of
git-notes(1) for more information on each strategy.

@item  notes.<name>.mergeStrategy 
Which merge strategy to choose when doing a notes merge into
refs/notes/<name>.  This overrides the more general "notes.mergeStrategy".
See the "NOTES MERGE STRATEGIES" section in git-notes(1) for more
information on the available strategies.

@item  notes.displayRef 
The (fully qualified) refname from which to show notes when showing commit
messages.  The value of this variable can be set to a glob, in which case
notes from all matching refs will be shown.  You may also specify this
configuration variable several times.  A warning will be issued for refs
that do not exist, but a glob that does not match any refs is silently
ignored.

This setting can be overridden with the @samp{GIT_NOTES_DISPLAY_REF} environment
variable, which must be a colon separated list of refs or globs.

The effective value of "core.notesRef" (possibly overridden by
GIT_NOTES_REF) is also implicitly added to the list of refs to be displayed.

@item  notes.rewrite.<command> 
When rewriting commits with <command> (currently @samp{amend} or @samp{rebase}) and
this variable is set to @samp{true}, Git automatically copies your notes from the
original to the rewritten commit.  Defaults to @samp{true}, but see
"notes.rewriteRef" below.

@item  notes.rewriteMode 
When copying notes during a rewrite (see the "notes.rewrite.<command>"
option), determines what to do if the target commit already has a note.
Must be one of @samp{overwrite}, @samp{concatenate}, @samp{cat_sort_uniq}, or @samp{ignore}.
Defaults to @samp{concatenate}.

This setting can be overridden with the @samp{GIT_NOTES_REWRITE_MODE} environment
variable.

@item  notes.rewriteRef 
When copying notes during a rewrite, specifies the (fully qualified) ref
whose notes should be copied.  The ref may be a glob, in which case notes in
all matching refs will be copied.  You may also specify this configuration
several times.

Does not have a default value; you must configure this variable to enable
note rewriting.  Set it to @samp{refs/notes/commits} to enable rewriting for the
default commit notes.

This setting can be overridden with the @samp{GIT_NOTES_REWRITE_REF} environment
variable, which must be a colon separated list of refs or globs.

@item  pack.window 
コマンドラインでウィンドウサイズが指定されていない場合に git-pack-objects(1)
によって使用されるウィンドウのサイズ。デフォルトは10です。

@item  pack.depth 
コマンドラインで最大深度が指定されていない場合に git-pack-objects(1)
によって使用される最大デルタ深度。デフォルトは50です。最大値は4095です。

@item  pack.windowMemory 
コマンドラインで制限が指定されていない場合に、パックウィンドウメモリの git-pack-objects(1)
の各スレッドで消費されるメモリの最大サイズ。値には、「k」または「m」または「g」の接尾辞を付けることができます。未構成のまま(または明示的に0に設定する)にした場合、制限はありません。

@item  pack.compression 
パックファイル内のオブジェクトの圧縮レベルを示す整数
-1〜9。-1はzlibのデフォルトです。0は圧縮がないことを意味し、1〜9はさまざまな速度とサイズのトレードオフであり、9が最も低速です。設定されていない場合のデフォルトは
core.compression です。 core.compression も設定されていない場合、デフォルトは -1
になります。これは、「速度と圧縮の間のデフォルトの妥協点(現在はレベル6と同等)」であるzlibのデフォルトです。

注意: 圧縮レベルを変更しても、既存のすべてのオブジェクトが自動的に再圧縮されるわけではないことに注意してください。 @samp{-F} オプションを
git-repack(1) に渡すことで、強制的に再圧縮できます。

@item  pack.allowPackReuse 
trueの場合、かつ、到達可能性ビットマップ(reachability
bitmaps)が有効になっている場合、pack-objectsはビットマップ化されたパックファイルの一部をそのままで送信しようとします。これにより、フェッチを提供するためのメモリとCPUの使用量を減らすことができますが、送信するパックが少し大きくなる可能性があります。デフォルトはtrueです。

@item  pack.island 
デルタアイランド(delta islands)のセットを構成する拡張正規表現。詳細については、 git-pack-objects(1)
の「DELTA ISLANDS」を参照してください。

@item  pack.islandCore 
オブジェクトを最初にパックする島名(island name)を指定します。
これにより、1つのパックの前に一種の疑似パックが作成されるため、指定の島のオブジェクトを、これらのオブジェクトを要求するユーザーに提供する必要のあるパックにコピーする速度が速くなることが期待されます。実際には、これは、指定された島が、リポジトリで最も一般的に複製される島に対応している可能性が高いことを意味します。
git-pack-objects(1) の「DELTA ISLANDS」も参照してください。

@item  pack.deltaCacheSize 
デルタをパックに書き出す前に、 git-pack-objects(1)
でデルタをキャッシュするために使用されるバイト単位の最大メモリ。すべてのオブジェクトに最適なものが見つけたあとで、このキャッシュがあれば、最終的なデルタ結果を再計算する必要がないため、オブジェクトの書き込みフェーズを高速化できます。そのために使用されます。ただし、メモリが不足しているマシンで大規模なリポジトリを再パックして、特にこのキャッシュがシステムをスワップに追いやる場合、これによって悪影響を受ける可能性があります。値0は、制限がないことを意味します。このキャッシュを事実上無効にするために、最小サイズの1バイトを使用できます。デフォルトは256MiBです。

@item  pack.deltaCacheLimit 
git-pack-objects(1)
でキャッシュされるデルタの最大サイズ。すべてのオブジェクトに最適なものが見つかった後、このキャッシュがあれば、最終的なデルタ結果を再計算する必要がないため、オブジェクトの書き込みフェーズを高速化します。そのために使用されます。デフォルトは1000です。最大値は65535です。

@item  pack.threads 
最適なデルタマッチングを検索するときに生成するスレッドの数を指定します。このためには
git-pack-objects(1)をpthreadでコンパイルする必要があります。そうしないと、このオプションは無視され、警告が表示されます。
これは、マルチプロセッサマシンでのパッキング時間を短縮することを目的としています。ただし、デルタ検索ウィンドウに必要なメモリ量は、スレッド数で乗算されます。0を指定すると、GitはCPUの数を自動検出し、それに応じてスレッドの数を設定します。

@item  pack.indexVersion 
デフォルトのパックインデックスバージョンを指定します。有効な値は、1.5.2より前のバージョンで使用されていたレガシーパックインデックスの場合は1、4GBを超えるパックの機能と破損したパックの再パックに対する適切な保護を備えた新しいパックインデックスの場合は2です。バージョン2がデフォルトです。注意:
対応するパックが2GBを超える場合は常にバージョン2が適用され、この構成オプションは無視されることに注意してください。

バージョン2の @samp{*.idx} ファイルを理解しない古いGitを使用している場合は、 @samp{*.pack} ファイルと対応する @samp{*.idx}
ファイルの両方を反対側からコピーする非ネイティブプロトコル(例:http)を介してクローンを作成またはフェッチすると、古いバージョンのGitではアクセスできないリポジトリが提供される場合があります。けれども、
@samp{*.pack} ファイルが2GBより小さい場合は、 *.pack に git-index-pack(1) を使用して、 @samp{*.idx}
ファイルを再生成できます。

@item  pack.packSizeLimit 
パックの最大サイズ。この設定は、再パック時にファイルへパッキングするときのみ影響します。つまり、 git:// プロトコルは影響を受けません。
git-repack(1) の @samp{--max-pack-size}
オプションでオーバーライドできます。この制限に達すると、複数のパックファイルが作成されます。

注意:
このオプションが役立つことはめったになく、(Gitはパックにまたがるデルタを保存しないため、)ディスク上の合計サイズが大きくなり、実行時のパフォーマンスが低下する可能性があることに注意してください(複数のパック内のオブジェクトルックアップは単一のパックで行うよりも遅く、到達可能性ビットマップなどの最適化は複数パックに対応できません)。

(たとえば、ファイルシステムが大きいファイルをサポートしていないため、)あなたが小さいパックファイルを使用してGitをバリバリと使う必要がある場合、このオプションが役立かもしれません。ただし、限られたサイズをサポートするメディア(たとえば、リポジトリ全体を保存できないリムーバブルメディア)を介してパックファイルを送信することが目標である場合は、単一の大きなパックファイルを作成し、一般的なマルチボリュームアーカイブツール(例えば
Unix @samp{split} )を使用して分割する方がよいでしょう。

許可される最小サイズは1MiBに制限されています。デフォルトの大きさは無制限です。 @emph{k} または @emph{m} または @emph{g}
の一般的な単位接尾辞がサポートされています。

@item  pack.useBitmaps 
trueの場合、(たとえば、フェッチ作業中のサーバー側で、)gitはstdoutにパックするときに(可能な場合は、)パックビットマップを使用します。デフォルトはtrueです。パックビットマップをデバッグしている場合を除いて、通常、これをオフにする必要はありません。

@item  pack.useSparse 
trueの場合、 gitは @emph{git pack-objects` で '--revs} オプションが存在する場合、デフォルトで @samp{--sparse}
オプションを使用します。このアルゴリズムは、新しいオブジェクトを導入するパスに現れるツリーのみをウォークします。これは、小さな変更を送信するパックを計算するときに、パフォーマンスに大きなメリットをもたらす可能性があります。ただし、含まれているコミットに特定の種類の直接名前変更(direct
renames)が含まれている場合は、パックファイルに追加のオブジェクトが追加される可能性があります。 デフォルトは @samp{true} です。

@item  pack.preferBitmapTips 
ビットマップを受け取るコミットを選択するときは、「選択ウィンドウ」(selection
window)の他のコミットよりも、この構成の任意の値の接尾辞である参照の先端にあるコミットを優先します。

注意: この設定を @samp{refs/foo} に設定しても、 @samp{refs/foo/bar} と @samp{refs/foo/baz}
の先端のコミットが必ずしも選択されるわけではないことに注意してください。
これは、可変長の一連のウィンドウ内からビットマップに対してコミットが選択されるためです。

この構成の任意の値の接尾辞である参照の先端にあるコミットがウィンドウに表示された場合、そのウィンドウ内の他のコミットよりも即座に優先されます。

@item  pack.writeBitmaps (deprecated) 
これは、 @samp{repack.writeBitmaps} の非推奨の同義語です。

@item  pack.writeBitmapHashCache 
trueの場合、gitはビットマップインデックスに「hash cache」(ハッシュキャッシュ)セクションを含めます(記述されている場合)。
このキャッシュは、gitのデルタヒューリスティックを供給するために使用でき、ビットマップオブジェクトと非ビットマップオブジェクト間のデルタを改善する可能性があります(たとえば、古いビットマップパックと最後のgc以降にプッシュされたオブジェクト間のフェッチを提供する場合)。欠点は、ディスクスペースのオブジェクトごとに4バイトを消費することです。
デフォルトはtrueです。

@item  pack.writeReverseIndex 
trueの場合、gitは、 git-fast-import(1) と バルクチェックインメカニズム(bulk checkin
mechanism)を除く、すべての場所に書き込む新しいパックファイルごとに対応する .rev ファイル(参照:
@uref{../technical/pack-format.html,Documentation/technical/pack-format.txt})を書き込みます。デフォルトはfalseです。

@item  pager.<cmd> 
値がブール値の場合、ttyへの書き込み時に特定のGitサブコマンドの出力のページ付けをオンまたはオフにします。それ以外の場合は、
@samp{pager.<cmd>} の値で指定されたページャーを使用してサブコマンドのページ付けをオンにします。コマンドラインで @samp{--paginate}
または @samp{--no-pager} が指定されている場合、このオプションよりも優先されます。すべてのコマンドのページ付けを無効にするには、
@samp{core.pager} または @samp{GIT_PAGER} を @samp{cat} に設定します。

@item  pretty.<name> 
git-log(1)で 指定されている、 @samp{--pretty=}
書式文字列のエイリアス。ここで定義されたエイリアスは、組み込みのpretty書式と同じように使用できます。 たとえば、 @samp{git config
pretty.changelog "format:* %H %s"} を実行すると、 @samp{git log --pretty=changelog}
の呼び出しは @samp{git log "--pretty=format:* %H %s"} を実行するのと同じになります。注意:
組み込みフォーマットと同じ名前のエイリアスは黙って無視されることに注意してください。

@item  protocol.allow 
設定されている場合は、ポリシーを明示的に持たないすべてのプロトコルにユーザー定義のデフォルトポリシーを指定します(@samp{protocol.<name>.allow})。デフォルトでは、設定されていない場合、既知の安全なプロトコル(http、https、git、ssh、file)のデフォルトポリシーは「always」、既知の危険なプロトコル(ext)のデフォルトポリシーは「never」、その他の全てのプロトコルのデフォルトのポリシーは「user」です。サポートされているポリシーは以下です:

@itemize 

@item
@samp{always} - プロトコルは常に使用できます。

@item
@samp{never} - プロトコルを使用することはできません。

@item
@samp{user} - プロトコルは、 @samp{GIT_PROTOCOL_FROM_USER} が設定されていないか、値が @samp{1}
の場合にのみ使用できます。このポリシーは、プロトコルをユーザーが直接使用できるようにしたいが、ユーザー入力なしの clone/fetch/push
を実行するコマンドでは使用したくない場合(たとえば再帰的なsubmoduleの初期化の場合)、設定しなければなりません。
@end itemize

@item  protocol.<name>.allow 
clone/fetch/push コマンドでプロトコル @samp{<name>} が使用するポリシーを設定します。
使用可能なポリシーについては、上記の「protocol.allow」を参照してください。

現在gitで使用されているプロトコル名はイカのとおりです:

@itemize 

@item
@samp{file}: 任意のローカルファイルベースのパス( @samp{file://} URL または ローカルパス を含む)

@item
@samp{git}: 直接TCP接続(または構成されている場合はプロキシ)を介した匿名のgitプロトコル

@item
@samp{ssh}: sshプロトコルの上で動くgitプロトコル( @samp{host:path} 書式や @samp{ssh://} 等を含む)

@item
@samp{http}:
httpプロトコルの上で動くgitプロトコル。「スマートhttp」と「ダムhttp」の両方です。両方を構成する場合は、個別に構成する必要があります。注意:これには
@samp{https} は含まれないことに注意してください。

@item
外部ヘルパーはそれらのプロトコルによる名前が付けられます(たとえば、 @samp{hg} というプロトコルを指定したら @samp{git-remote-hg}
ヘルパーを許可します)
@end itemize

@item  protocol.version 
設定されている場合、クライアントは指定されたプロトコルバージョンを使用してサーバーとの通信を試みます。サーバーがサポートしていない場合、通信はバージョン0にフォールバックします。設定されていない場合、デフォルトは「2」です。
サポートされているバージョンは以下です:

@itemize 

@item
@samp{0} - 独自のワイヤープロトコル

@item
@samp{1} - サーバーからの初期応答にバージョン文字列が追加された独自のワイヤープロトコル。

@item
@samp{2} - @uref{technical/protocol-v2.html,wire protocol version 2}
@end itemize

@item  pull.ff 
By default, Git does not create an extra merge commit when merging a commit
that is a descendant of the current commit. Instead, the tip of the current
branch is fast-forwarded. When set to @samp{false}, this variable tells Git to
create an extra merge commit in such a case (equivalent to giving the
@samp{--no-ff} option from the command line). When set to @samp{only}, only such
fast-forward merges are allowed (equivalent to giving the @samp{--ff-only} option
from the command line). This setting overrides @samp{merge.ff} when pulling.

@item  pull.rebase 
When true, rebase branches on top of the fetched branch, instead of merging
the default branch from the default remote when "git pull" is run. See
"branch.<name>.rebase" for setting this on a per-branch basis.

When @samp{merges} (or just @emph{m}), pass the @samp{--rebase-merges} option to @emph{git
rebase} so that the local merge commits are included in the rebase (see
git-rebase(1) for details).

When @samp{preserve} (or just @emph{p}, deprecated in favor of @samp{merges}), also pass
@samp{--preserve-merges} along to @emph{git rebase} so that locally committed merge
commits will not be flattened by running @emph{git pull}.

When the value is @samp{interactive} (or just @emph{i}), the rebase is run in
interactive mode.

@strong{NOTE}: this is a possibly dangerous operation; do @strong{not} use
it unless you understand the implications (see git-rebase(1)
for details).

@item  pull.octopus 
The default merge strategy to use when pulling multiple branches at once.

@item  pull.twohead 
The default merge strategy to use when pulling a single branch.

@item  push.default 
Defines the action @samp{git push} should take if no refspec is given (whether
from the command-line, config, or elsewhere).  Different values are
well-suited for specific workflows; for instance, in a purely central
workflow (i.e. the fetch source is equal to the push destination),
@samp{upstream} is probably what you want.  Possible values are:

@itemize 

@item
@samp{nothing} - do not push anything (error out) unless a refspec is given. This
is primarily meant for people who want to avoid mistakes by always being
explicit.

@item
@samp{current} - push the current branch to update a branch with the same name on
the receiving end.  Works in both central and non-central workflows.

@item
@samp{upstream} - push the current branch back to the branch whose changes are
usually integrated into the current branch (which is called @samp{@@@{upstream@}}).
This mode only makes sense if you are pushing to the same repository you
would normally pull from (i.e. central workflow).

@item
@samp{tracking} - This is a deprecated synonym for @samp{upstream}.

@item
@samp{simple} - pushes the current branch with the same name on the remote.

If you are working on a centralized workflow (pushing to the same repository
you pull from, which is typically @samp{origin}), then you need to configure an
upstream branch with the same name.

This mode is the default since Git 2.0, and is the safest option suited for
beginners.

@item
@samp{matching} - push all branches having the same name on both ends.  This
makes the repository you are pushing to remember the set of branches that
will be pushed out (e.g. if you always push @emph{maint} and @emph{master} there and
no other branches, the repository you push to will have these two branches,
and your local @emph{maint} and @emph{master} will be pushed there).

To use this mode effectively, you have to make sure @emph{all} the branches you
would push out are ready to be pushed out before running @emph{git push}, as the
whole point of this mode is to allow you to push all of the branches in one
go.  If you usually finish work on only one branch and push out the result,
while other branches are unfinished, this mode is not for you.  Also this
mode is not suitable for pushing into a shared central repository, as other
people may add new branches there, or update the tip of existing branches
outside your control.

This used to be the default, but not since Git 2.0 (@samp{simple} is the new
default).
@end itemize

@item  push.followTags 
If set to true enable @samp{--follow-tags} option by default.  You may override
this configuration at time of push by specifying @samp{--no-follow-tags}.

@item  push.gpgSign 
May be set to a boolean value, or the string @emph{if-asked}. A true value causes
all pushes to be GPG signed, as if @samp{--signed} is passed to
git-push(1). The string @emph{if-asked} causes pushes to be signed if the
server supports it, as if @samp{--signed=if-asked} is passed to @emph{git push}. A
false value may override a value from a lower-priority config file. An
explicit command-line flag always overrides this config option.

@item  push.pushOption 
When no @samp{--push-option=<option>} argument is given from the command line,
@samp{git push} behaves as if each <value> of this variable is given as
@samp{--push-option=<value>}.

This is a multi-valued variable, and an empty value can be used in a higher
priority configuration file (e.g. @samp{.git/config} in a repository) to clear
the values inherited from a lower priority configuration files
(e.g. @samp{$HOME/.gitconfig}).

@example
Example:

/etc/gitconfig
  push.pushoption = a
  push.pushoption = b

~/.gitconfig
  push.pushoption = c

repo/.git/config
  push.pushoption =
  push.pushoption = b

This will result in only b (a and c are cleared).
@end example


@item  push.recurseSubmodules 
Make sure all submodule commits used by the revisions to be pushed are
available on a remote-tracking branch. If the value is @emph{check} then Git will
verify that all submodule commits that changed in the revisions to be pushed
are available on at least one remote of the submodule. If any commits are
missing, the push will be aborted and exit with non-zero status. If the
value is @emph{on-demand} then all submodules that changed in the revisions to be
pushed will be pushed. If on-demand was not able to push all necessary
revisions it will also be aborted and exit with non-zero status. If the
value is @emph{no} then default behavior of ignoring submodules when pushing is
retained. You may override this configuration at time of push by specifying
@emph{--recurse-submodules=check|on-demand|no}.  If not set, @emph{no} is used by
default, unless @emph{submodule.recurse} is set (in which case a @emph{true} value
means @emph{on-demand}).

@item  push.useForceIfIncludes 
If set to "true", it is equivalent to specifying @samp{--force-if-includes} as an
option to git-push(1) in the command line. Adding
@samp{--no-force-if-includes} at the time of push overrides this configuration
setting.

@item  push.negotiate 
If set to "true", attempt to reduce the size of the packfile sent by rounds
of negotiation in which the client and the server attempt to find commits in
common. If "false", Git will rely solely on the server’s ref advertisement
to find commits in common.

@item  rebase.backend 
Default backend to use for rebasing.  Possible choices are @emph{apply} or
@emph{merge}.  In the future, if the merge backend gains all remaining
capabilities of the apply backend, this setting may become unused.

@item  rebase.stat 
Whether to show a diffstat of what changed upstream since the last
rebase. False by default.

@item  rebase.autoSquash 
If set to true enable @samp{--autosquash} option by default.

@item  rebase.autoStash 
When set to true, automatically create a temporary stash entry before the
operation begins, and apply it after the operation ends.  This means that
you can run rebase on a dirty worktree.  However, use with care: the final
stash application after a successful rebase might result in non-trivial
conflicts.  This option can be overridden by the @samp{--no-autostash} and
@samp{--autostash} options of git-rebase(1).  Defaults to false.

@item  rebase.missingCommitsCheck 
If set to "warn", git rebase -i will print a warning if some commits are
removed (e.g. a line was deleted), however the rebase will still proceed. If
set to "error", it will print the previous warning and stop the rebase, @emph{git
rebase --edit-todo} can then be used to correct the error. If set to
"ignore", no checking is done.  To drop a commit without warning or error,
use the @samp{drop} command in the todo list.  Defaults to "ignore".

@item  rebase.instructionFormat 
A format string, as specified in git-log(1), to be used for the todo
list during an interactive rebase.  The format will automatically have the
long commit hash prepended to the format.

@item  rebase.abbreviateCommands 
If set to true, @samp{git rebase} will use abbreviated command names in the todo
list resulting in something like this:

@example
        p deadbee The oneline of the commit
        p fa1afe1 The oneline of the next commit
        ...
@end example


instead of:

@example
        pick deadbee The oneline of the commit
        pick fa1afe1 The oneline of the next commit
        ...
@end example


Defaults to false.

@item  rebase.rescheduleFailedExec 
Automatically reschedule @samp{exec} commands that failed. This only makes sense
in interactive mode (or when an @samp{--exec} option was provided).  This is the
same as specifying the @samp{--reschedule-failed-exec} option.

@item  rebase.forkPoint 
If set to false set @samp{--no-fork-point} option by default.

@item  receive.advertiseAtomic 
デフォルトでは、git-receive-packはアトミックプッシュ機能(atomic push
capability)をクライアントに公表(advertise)します。この機能を公表したくない場合は、この変数をfalseに設定してください。

@item  receive.advertisePushOptions 
trueに設定すると、git-receive-packはプッシュオプション機能(push options
capability)をクライアントに公表(advertise)します。デフォルトではFalse。

@item  receive.autogc 
デフォルトでは、git-pushからデータを受信し、参照を更新した後、git-receive-packは @samp{git-gc --auto} を実行します。
この変数をfalseに設定することで停止できます。

@item  receive.certNonceSeed 
この変数を文字列に設定すると、 @samp{git receive-pack} は @samp{git push --signed}
を受け入れ、その文字列を秘密鍵として使用してHMACによって保護された「nonce」を使用して検証します。

@item  receive.certNonceSlop 
@samp{git push --signed}
が、同じリポジトリにサービスを提供するreceive-packによって発行された「nonce」を含むプッシュ証明書をこの数秒以内に送信した場合、証明書で見つかった「nonce」をフックのために
@samp{GIT_PUSH_CERT_NONCE} にエクスポートします(receive-packが送信側に含めるように要求したものの代わりに)。 これにより、
@samp{pre-receive} と @samp{post-receive}
でのチェックの記述が少し簡単になります。証明書を受け入れるかどうかを決定するために、nonce が何秒後に古くなるかを記録する環境変数
@samp{GIT_PUSH_CERT_NONCE_SLOP} をチェックする代わりに、 @samp{GIT_PUSH_CERT_NONCE_STATUS} が @samp{OK}
であることだけをチェックすることができます。

@item  receive.fsckObjects 
trueに設定されている場合、git-receive-packは受信したすべてのオブジェクトをチェックします。 チェックされる内容については、
@samp{transfer.fsckObjects} を参照してください。デフォルトはfalseです。設定されていない場合は、代わりに
@samp{transfer.fsckObjects} の値が使用されます。

@item  receive.fsck.<msg-id> 
@samp{fsck.<msg-id>} のように機能しますが、 linkgit: git-fsck[1] の代わりに
git-receive-pack(1) によって使用されます。詳細については、 @samp{fsck.<msg-id>}
の文書を参照してください。

@item  receive.fsck.skipList 
@samp{fsck.skipList} のように機能しますが、 git-fsck(1) の代わりに
git-receive-pack(1) によって使用されます。詳細については、 @samp{fsck.skipList}
の文書を参照してください。

@item  receive.keepAlive 
クライアントからパックを受信した後、パックの処理中に @samp{receive-pack} が出力を生成せず(@samp{--quiet}
が指定されている場合)、一部のネットワークがTCP接続を切断する可能性があります。このオプションを設定すると、 @samp{receive-pack}
はこのフェーズで @samp{receive.keepAlive} 秒の間データを送信しない場合、short keepalive
packetを送信します。デフォルトは5秒です。キープアライブを完全に無効にするには、0に設定します。

@item  receive.unpackLimit 
プッシュで受信されるオブジェクトの数がこの制限を下回る場合、オブジェクトは緩いオブジェクト(loose
object)ファイルに解凍されます。ただし、受信したオブジェクトの数がこの制限以上の場合、受信したパックは、欠落しているデルタベースを追加した後、パックとして保存されます。プッシュからパックを保存すると、特に低速のファイルシステムで、プッシュ操作をより速く完了することができます。
設定されていない場合は、代わりに @samp{transfer.unpackLimit} の値が使用されます。

@item  receive.maxInputSize 
着信パックストリームのサイズがこの制限よりも大きい場合、パックファイルを受け入れる代わりに git-receive-pack
がエラーになります。0に設定または設定されていない場合、サイズは無制限です。

@item  receive.denyDeletes 
trueに設定すると、git-receive-packはrefを削除するrefの更新を拒否します。これを使用して、プッシュによるそのような参照の削除を防ぎます。

@item  receive.denyDeleteCurrent 
trueに設定すると、git-receive-packは、非ベアリポジトリの現在チェックアウトされているブランチを削除するrefの更新を拒否します。

@item  receive.denyCurrentBranch 
trueまたは "refuse"(拒否)に設定すると、 git-receive-pack
は、非ベアリポジトリの現在チェックアウトされているブランチへのrefの更新を拒否します。このようなプッシュは、HEADがインデックスおよび作業ツリーと同期しなくなるため、潜在的に危険です。"warn"(警告)に設定されている場合は、stderrへのそのようなプッシュの警告を出力しますが、プッシュを続行できるようにします。
falseまたは"ignore"(無視)に設定されている場合は、メッセージなしでそのようなプッシュを許可します。 デフォルトは"refuse"です。

別のオプションは"updateInstead"で、現在のブランチにプッシュすると作業ツリーが更新されます。このオプションは、インタラクティブsshを介して一方の側に簡単にアクセスできない場合に作業ディレクトリを同期することを目的としています(たとえば、ライブWebサイト。つまり作業ディレクトリがクリーンである必要があります)。
このモードは、VM内で開発して、さまざまなオペレーティングシステムでコードをテストおよび修正する場合にも役立ちます。

デフォルトでは、作業ツリーまたはインデックスにHEADとの違いがある場合、"updateInstead"はプッシュを拒否しますが、
@samp{push-to-checkout} フックを使用してこれをカスタマイズできます。 githooks(5) を参照してください。

@item  receive.denyNonFastForwards 
trueに設定すると、git-receive-packは、fast-forwardではないrefの更新を拒否します。これを使用して、プッシュが強制されている場合でも、プッシュによるそのような更新を防ぎます。この構成変数は、共有リポジトリを初期化するときに設定されます。

@item  receive.hideRefs 
この変数は @samp{transfer.hideRefs} と同じですが、 @samp{receive-pack}
にのみ適用されます(したがって、プッシュには影響しますが、フェッチには影響しません)。 @samp{git push}
によって非表示の参照を更新または削除しようとする試みは拒否されます。

@item  receive.procReceiveRefs 
これは、 @samp{receive-pack} のコマンドに一致する参照プレフィックスを定義する複数値の変数(multi-valued
variable)です。プレフィックスに一致するコマンドは、内部の @samp{execute_commands}
関数ではなく、外部フック「proc-receive」によって実行されます。この変数が定義されていない場合、「proc-receive」フックは使用されず、すべてのコマンドは内部の
@samp{execute_commands} 関数によって実行されます。

たとえば、この変数が "refs/for" に設定されている場合、 "refs/for/master" などの参照にプッシュしても
"refs/for/master" という名前の参照は作成・更新されませんが、 "proc-receive"
フックを実行すれば直接プルリクエストを作成・更新できるはずです。

オプションの修飾子を値の先頭に指定して、特定のアクション(作成(a)、変更(m)、削除(d))のコマンドをフィルター処理できます。 @samp{!}
を修飾子に含めて、参照プレフィックスエントリを無効にすることができます。 例えば以下のようにできます:

@example
git config --system --add receive.procReceiveRefs ad:refs/heads
git config --system --add receive.procReceiveRefs !:refs/heads
@end example

@item  receive.updateServerInfo 
trueに設定すると、git-pushからデータを受信し、参照を更新した後、git-receive-packはgit-update-server-infoを実行します。

@item  receive.shallowUpdate 
trueに設定すると、新しい参照に新しいshallow rootsが必要になったときに .git/shallow
を更新できます。それ以外の場合、それらの参照は拒否されます。

@item  remote.pushDefault 
The remote to push to by default.  Overrides @samp{branch.<name>.remote} for all
branches, and is overridden by @samp{branch.<name>.pushRemote} for specific
branches.

@item  remote.<name>.url 
The URL of a remote repository.  See git-fetch(1) or
git-push(1).

@item  remote.<name>.pushurl 
The push URL of a remote repository.  See git-push(1).

@item  remote.<name>.proxy 
For remotes that require curl (http, https and ftp), the URL to the proxy to
use for that remote.  Set to the empty string to disable proxying for that
remote.

@item  remote.<name>.proxyAuthMethod 
For remotes that require curl (http, https and ftp), the method to use for
authenticating against the proxy in use (probably set in
@samp{remote.<name>.proxy}). See @samp{http.proxyAuthMethod}.

@item  remote.<name>.fetch 
The default set of "refspec" for git-fetch(1). See
git-fetch(1).

@item  remote.<name>.push 
The default set of "refspec" for git-push(1). See
git-push(1).

@item  remote.<name>.mirror 
If true, pushing to this remote will automatically behave as if the
@samp{--mirror} option was given on the command line.

@item  remote.<name>.skipDefaultUpdate 
If true, this remote will be skipped by default when updating using
git-fetch(1) or the @samp{update} subcommand of git-remote(1).

@item  remote.<name>.skipFetchAll 
If true, this remote will be skipped by default when updating using
git-fetch(1) or the @samp{update} subcommand of git-remote(1).

@item  remote.<name>.receivepack 
The default program to execute on the remote side when pushing.  See option
--receive-pack of git-push(1).

@item  remote.<name>.uploadpack 
The default program to execute on the remote side when fetching.  See option
--upload-pack of git-fetch-pack(1).

@item  remote.<name>.tagOpt 
Setting this value to --no-tags disables automatic tag following when
fetching from remote <name>. Setting it to --tags will fetch every tag from
remote <name>, even if they are not reachable from remote branch
heads. Passing these flags directly to git-fetch(1) can override
this setting. See options --tags and --no-tags of git-fetch(1).

@item  remote.<name>.vcs 
Setting this to a value <vcs> will cause Git to interact with the remote
with the git-remote-<vcs> helper.

@item  remote.<name>.prune 
When set to true, fetching from this remote by default will also remove any
remote-tracking references that no longer exist on the remote (as if the
@samp{--prune} option was given on the command line).  Overrides @samp{fetch.prune}
settings, if any.

@item  remote.<name>.pruneTags 
When set to true, fetching from this remote by default will also remove any
local tags that no longer exist on the remote if pruning is activated in
general via @samp{remote.<name>.prune}, @samp{fetch.prune} or @samp{--prune}. Overrides
@samp{fetch.pruneTags} settings, if any.

See also @samp{remote.<name>.prune} and the PRUNING section of
git-fetch(1).

@item  remote.<name>.promisor 
When set to true, this remote will be used to fetch promisor objects.

@item  remote.<name>.partialclonefilter 
The filter that will be applied when fetching from this promisor remote.

@item  remotes.<group> 
@samp{git remote update <group>} によってフェッチされるremoteのリスト。 git-remote(1)
を参照してください。

@item  repack.useDeltaBaseOffset 
By default, git-repack(1) creates packs that use delta-base
offset. If you need to share your repository with Git older than version
1.4.4, either directly or via a dumb protocol such as http, then you need to
set this option to "false" and repack. Access from old Git versions over the
native protocol are unaffected by this option.

@item  repack.packKeptObjects 
If set to true, makes @samp{git repack} act as if @samp{--pack-kept-objects} was
passed. See git-repack(1) for details. Defaults to @samp{false} normally,
but @samp{true} if a bitmap index is being written (either via
@samp{--write-bitmap-index} or @samp{repack.writeBitmaps}).

@item  repack.useDeltaIslands 
If set to true, makes @samp{git repack} act as if @samp{--delta-islands} was
passed. Defaults to @samp{false}.

@item  repack.writeBitmaps 
When true, git will write a bitmap index when packing all objects to disk
(e.g., when @samp{git repack -a} is run).  This index can speed up the "counting
objects" phase of subsequent packs created for clones and fetches, at the
cost of some disk space and extra time spent on the initial repack.  This
has no effect if multiple packfiles are created.  Defaults to true on bare
repos, false otherwise.

@item  rerere.autoUpdate 
When set to true, @samp{git-rerere} updates the index with the resulting contents
after it cleanly resolves conflicts using previously recorded resolution.
Defaults to false.

@item  rerere.enabled 
Activate recording of resolved conflicts, so that identical conflict hunks
can be resolved automatically, should they be encountered again.  By
default, git-rerere(1) is enabled if there is an @samp{rr-cache}
directory under the @samp{$GIT_DIR}, e.g. if "rerere" was previously used in the
repository.

@item  reset.quiet 
trueに設定すると、 @samp{git reset} はデフォルトで @samp{--quiet} オプションになります。

@item  sendemail.identity 
A configuration identity. When given, causes values in the
@emph{sendemail.<identity>} subsection to take precedence over values in the
@emph{sendemail} section. The default identity is the value of
@samp{sendemail.identity}.

@item  sendemail.smtpEncryption 
See git-send-email(1) for description.  Note that this setting is
not subject to the @emph{identity} mechanism.

@item  sendemail.smtpsslcertpath 
Path to ca-certificates (either a directory or a single file).  Set it to an
empty string to disable certificate verification.

@item  sendemail.<identity>.* 
Identity-specific versions of the @emph{sendemail.*} parameters found below,
taking precedence over those when this identity is selected, through either
the command-line or @samp{sendemail.identity}.

@item  sendemail.aliasesFile 
@itemx  sendemail.aliasFileType 
@itemx  sendemail.annotate 
@itemx  sendemail.bcc 
@itemx  sendemail.cc 
@itemx  sendemail.ccCmd 
@itemx  sendemail.chainReplyTo 
@itemx  sendemail.confirm 
@itemx  sendemail.envelopeSender 
@itemx  sendemail.from 
@itemx  sendemail.multiEdit 
@itemx  sendemail.signedoffbycc 
@itemx  sendemail.smtpPass 
@itemx  sendemail.suppresscc 
@itemx  sendemail.suppressFrom 
@itemx  sendemail.to 
@itemx  sendemail.tocmd 
@itemx  sendemail.smtpDomain 
@itemx  sendemail.smtpServer 
@itemx  sendemail.smtpServerPort 
@itemx  sendemail.smtpServerOption 
@itemx  sendemail.smtpUser 
@itemx  sendemail.thread 
@itemx  sendemail.transferEncoding 
@itemx  sendemail.validate 
@itemx  sendemail.xmailer 
See git-send-email(1) for description.

@item  sendemail.signedoffcc (deprecated) 
Deprecated alias for @samp{sendemail.signedoffbycc}.

@item  sendemail.smtpBatchSize 
Number of messages to be sent per connection, after that a relogin will
happen.  If the value is 0 or undefined, send all messages in one
connection.  See also the @samp{--batch-size} option of
git-send-email(1).

@item  sendemail.smtpReloginDelay 
Seconds wait before reconnecting to smtp server.  See also the
@samp{--relogin-delay} option of git-send-email(1).

@item  sendemail.forbidSendmailVariables 
To avoid common misconfiguration mistakes, git-send-email(1) will
abort with a warning if any configuration options for "sendmail" exist. Set
this variable to bypass the check.

@item  sequence.editor 
リベース命令ファイル(rebase instruction file)を編集するために @samp{git rebase -i}
によって使用されるテキストエディタ。この値は、使用時にシェルによって解釈されることを意図しています。 これは、
@samp{GIT_SEQUENCE_EDITOR}
環境変数によってオーバーライドできます。構成されていない場合は、代わりにデフォルトのコミットメッセージエディタが使用されます。

@item  showBranch.default 
git-show-branch(1) のデフォルトのブランチセット。 git-show-branch(1)
を参照してください。

@item  splitIndex.maxPercentChange 
When the split index feature is used, this specifies the percent of entries
the split index can contain compared to the total number of entries in both
the split index and the shared index before a new shared index is written.
The value should be between 0 and 100. If the value is 0 then a new shared
index is always written, if it is 100 a new shared index is never written.
By default the value is 20, so a new shared index is written if the number
of entries in the split index would be greater than 20 percent of the total
number of entries.  See git-update-index(1).

@item  splitIndex.sharedIndexExpire 
When the split index feature is used, shared index files that were not
modified since the time this variable specifies will be removed when a new
shared index file is created. The value "now" expires all entries
immediately, and "never" suppresses expiration altogether.  The default
value is "2.weeks.ago".  Note that a shared index file is considered
modified (for the purpose of expiration) each time a new split-index file is
either created based on it or read from it.  See
git-update-index(1).

@item  ssh.variant 
デフォルトでは、Gitは設定されたSSHコマンドのベース名(環境変数 @samp{GIT_SSH} または環境変数 @samp{GIT_SSH_COMMAND}
または構成設定 @samp{core.sshCommand}
を使用して設定)に基づいて使用するコマンドライン引数を決定します。ベース名が認識されない場合、Gitは最初に @samp{-G} (print
configuration)オプションを使用して構成済みのSSHコマンドを呼び出し、その後、(成功した場合、)OpenSSHオプションを使用するか、(失敗した場合、)hostおよびremoteコマンド以外のオプションを使用しないことで、OpenSSHオプションのサポートを検出しようとします。

構成変数 @samp{ssh.variant} は、この検出をオーバーライドするように設定できます。有効な値は、 @samp{ssh}
(OpenSSHオプションを使用する場合)、 @samp{plink} 、 @samp{putty} 、 @samp{tortoiseplink} 、 @samp{simple}
(hostおよびremoteコマンド以外のオプションを持っていません)、です。 デフォルトの自動検出は、値 @samp{auto}
を使用して明示的に要求できます。また、これ以外の値は @samp{ssh} として扱われます。この設定は、環境変数 @samp{GIT_SSH_VARIANT}
を介してオーバーライドすることもできます。

各派生で使用されている現在のコマンドラインパラメータは以下のとおりです:

@itemize 

@item
@samp{ssh} - [-p port] [-4] [-6] [-o option] [username@@]host command

@item
@samp{simple} - [username@@]host command

@item
@samp{plink} or @samp{putty} - [-P port] [-4] [-6] [username@@]host command

@item
@samp{tortoiseplink} - [-P port] [-4] [-6] -batch [username@@]host command
@end itemize

@samp{simple} 派生を除き、コマンドラインパラメータはgitが新しい機能を取得するにつれて変更される可能性があります。

@item  status.relativePaths 
By default, git-status(1) shows paths relative to the current
directory. Setting this variable to @samp{false} shows paths relative to the
repository root (this was the default for Git prior to v1.5.4).

@item  status.short 
Set to true to enable --short by default in git-status(1).  The
option --no-short takes precedence over this variable.

@item  status.branch 
Set to true to enable --branch by default in git-status(1).  The
option --no-branch takes precedence over this variable.

@item  status.aheadBehind 
Set to true to enable @samp{--ahead-behind} and false to enable
@samp{--no-ahead-behind} by default in git-status(1) for non-porcelain
status formats.  Defaults to true.

@item  status.displayCommentPrefix 
If set to true, git-status(1) will insert a comment prefix before
each output line (starting with @samp{core.commentChar}, i.e. @samp{#} by
default). This was the behavior of git-status(1) in Git 1.8.4 and
previous.  Defaults to false.

@item  status.renameLimit 
The number of files to consider when performing rename detection in
git-status(1) and git-commit(1). Defaults to the value of
diff.renameLimit.

@item  status.renames 
Whether and how Git detects renames in git-status(1) and
git-commit(1) .  If set to "false", rename detection is disabled. If
set to "true", basic rename detection is enabled.  If set to "copies" or
"copy", Git will detect copies, as well.  Defaults to the value of
diff.renames.

@item  status.showStash 
If set to true, git-status(1) will display the number of entries
currently stashed away.  Defaults to false.

@item  status.showUntrackedFiles 
By default, git-status(1) and git-commit(1) show files which
are not currently tracked by Git. Directories which contain only untracked
files, are shown with the directory name only. Showing untracked files means
that Git needs to lstat() all the files in the whole repository, which might
be slow on some systems. So, this variable controls how the commands
displays the untracked files. Possible values are:

@itemize 

@item
@samp{no} - Show no untracked files.

@item
@samp{normal} - Show untracked files and directories.

@item
@samp{all} - Show also individual files in untracked directories.
@end itemize

If this variable is not specified, it defaults to @emph{normal}.  This variable
can be overridden with the -u|--untracked-files option of
git-status(1) and git-commit(1).

@item  status.submoduleSummary 
Defaults to false.  If this is set to a non zero number or true (identical
to -1 or an unlimited number), the submodule summary will be enabled and a
summary of commits for modified submodules will be shown (see
--summary-limit option of git-submodule(1)). Please note that the
summary output command will be suppressed for all submodules when
@samp{diff.ignoreSubmodules} is set to @emph{all} or only for those submodules where
@samp{submodule.<name>.ignore=all}. The only exception to that rule is that
status and commit will show staged submodule changes. To also view the
summary for ignored submodules you can either use the
--ignore-submodules=dirty command-line option or the @emph{git submodule summary}
command, which shows a similar output but does not honor these settings.

@item  stash.useBuiltin 
Unused configuration variable.  Used in Git versions 2.22 to 2.26 as an
escape hatch to enable the legacy shellscript implementation of stash.  Now
the built-in rewrite of it in C is always used. Setting this will emit a
warning, to alert any remaining users that setting this now does nothing.

@item  stash.showIncludeUntracked 
If this is set to true, the @samp{git stash show} command will show the untracked
files of a stash entry.  Defaults to false. See description of @emph{show}
command in git-stash(1).

@item  stash.showPatch 
If this is set to true, the @samp{git stash show} command without an option will
show the stash entry in patch form.  Defaults to false.  See description of
@emph{show} command in git-stash(1).

@item  stash.showStat 
If this is set to true, the @samp{git stash show} command without an option will
show diffstat of the stash entry.  Defaults to true.  See description of
@emph{show} command in git-stash(1).

@item  submodule.<name>.url 
The URL for a submodule. This variable is copied from the .gitmodules file
to the git config via @emph{git submodule init}. The user can change the
configured URL before obtaining the submodule via @emph{git submodule update}. If
neither submodule.<name>.active or submodule.active are set, the presence of
this variable is used as a fallback to indicate whether the submodule is of
interest to git commands.  See git-submodule(1) and
gitmodules(5) for details.

@item  submodule.<name>.update 
The method by which a submodule is updated by @emph{git submodule update}, which
is the only affected command, others such as @emph{git checkout
--recurse-submodules} are unaffected. It exists for historical reasons, when
@emph{git submodule} was the only command to interact with submodules; settings
like @samp{submodule.active} and @samp{pull.rebase} are more specific. It is populated
by @samp{git submodule init} from the gitmodules(5) file.  See
description of @emph{update} command in git-submodule(1).

@item  submodule.<name>.branch 
The remote branch name for a submodule, used by @samp{git submodule update
--remote}.  Set this option to override the value found in the @samp{.gitmodules}
file.  See git-submodule(1) and gitmodules(5) for details.

@item  submodule.<name>.fetchRecurseSubmodules 
This option can be used to control recursive fetching of this submodule. It
can be overridden by using the --[no-]recurse-submodules command-line option
to "git fetch" and "git pull".  This setting will override that from in the
gitmodules(5) file.

@item  submodule.<name>.ignore 
Defines under what circumstances "git status" and the diff family show a
submodule as modified. When set to "all", it will never be considered
modified (but it will nonetheless show up in the output of status and commit
when it has been staged), "dirty" will ignore all changes to the submodules
work tree and takes only differences between the HEAD of the submodule and
the commit recorded in the superproject into account. "untracked" will
additionally let submodules with modified tracked files in their work tree
show up.  Using "none" (the default when this option is not set) also shows
submodules that have untracked files in their work tree as changed.  This
setting overrides any setting made in .gitmodules for this submodule, both
settings can be overridden on the command line by using the
"--ignore-submodules" option. The @emph{git submodule} commands are not affected
by this setting.

@item  submodule.<name>.active 
Boolean value indicating if the submodule is of interest to git commands.
This config option takes precedence over the submodule.active config
option. See gitsubmodules(7) for details.

@item  submodule.active 
A repeated field which contains a pathspec used to match against a
submodule’s path to determine if the submodule is of interest to git
commands. See gitsubmodules(7) for details.

@item  submodule.recurse 
A boolean indicating if commands should enable the @samp{--recurse-submodules}
option by default.  Applies to all commands that support this option
(@samp{checkout}, @samp{fetch}, @samp{grep}, @samp{pull}, @samp{push}, @samp{read-tree}, @samp{reset},
@samp{restore} and @samp{switch}) except @samp{clone} and @samp{ls-files}.  Defaults to false.
When set to true, it can be deactivated via the @samp{--no-recurse-submodules}
option. Note that some Git commands lacking this option may call some of the
above commands affected by @samp{submodule.recurse}; for instance @samp{git remote
update} will call @samp{git fetch} but does not have a @samp{--no-recurse-submodules}
option.  For these commands a workaround is to temporarily change the
configuration value by using @samp{git -c submodule.recurse=0}.

@item  submodule.fetchJobs 
Specifies how many submodules are fetched/cloned at the same time.  A
positive integer allows up to that number of submodules fetched in
parallel. A value of 0 will give some reasonable default.  If unset, it
defaults to 1.

@item  submodule.alternateLocation 
Specifies how the submodules obtain alternates when submodules are
cloned. Possible values are @samp{no}, @samp{superproject}.  By default @samp{no} is
assumed, which doesn’t add references. When the value is set to
@samp{superproject} the submodule to be cloned computes its alternates location
relative to the superprojects alternate.

@item  submodule.alternateErrorStrategy 
Specifies how to treat errors with the alternates for a submodule as
computed via @samp{submodule.alternateLocation}. Possible values are @samp{ignore},
@samp{info}, @samp{die}. Default is @samp{die}. Note that if set to @samp{ignore} or @samp{info}, and
if there is an error with the computed alternate, the clone proceeds as if
no alternate was specified.

@item  tag.forceSignAnnotated 
A boolean to specify whether annotated tags created should be GPG signed.
If @samp{--annotate} is specified on the command line, it takes precedence over
this option.

@item  tag.sort 
This variable controls the sort ordering of tags when displayed by
git-tag(1). Without the "--sort=<value>" option provided, the value
of this variable will be used as the default.

@item  tag.gpgSign 
A boolean to specify whether all tags should be GPG signed.  Use of this
option when running in an automated script can result in a large number of
tags being signed. It is therefore convenient to use an agent to avoid
typing your gpg passphrase several times. Note that this option doesn’t
affect tag signing behavior enabled by "-u <keyid>" or
"--local-user=<keyid>" options.

@item  tar.umask 
この変数は、tarアーカイブエントリの許可ビットを制限するために使用できます。デフォルトは0002で、ワールド書き込みビット(world write
bit)をオフにします。 特別な値 "user" は、アーカイブユーザーのumaskが代わりに使用されることを示します。 umask(2) および
git-archive(1) を参照してください。
@end table

Trace2 config settings are only read from the system and global config
files; repository local and worktree config files and @samp{-c} command line
arguments are not respected.

@table @asis

@item  trace2.normalTarget 
This variable controls the normal target destination.  It may be overridden
by the @samp{GIT_TRACE2} environment variable.  The following table shows
possible values.

@item  trace2.perfTarget 
This variable controls the performance target destination.  It may be
overridden by the @samp{GIT_TRACE2_PERF} environment variable.  The following
table shows possible values.

@item  trace2.eventTarget 
This variable controls the event target destination.  It may be overridden
by the @samp{GIT_TRACE2_EVENT} environment variable.  The following table shows
possible values.

@itemize 

@item
@samp{0} or @samp{false} - ターゲットを無効にします。

@item
@samp{1} or @samp{true} - @samp{STDERR} に書き出します。

@item
@samp{[2-9]} - すでに開いているファイル・デスクリプターに書き出します。

@item
@samp{<absolute-pathname>} -
appendモードでファイルに書き込みます。ターゲットがすでに存在し、ディレクトリである場合、トレースは指定のディレクトリの下のファイル(プロセスごとに1つ)に書き込まれます。

@item
@samp{af_unix:[<socket_type>:]<absolute-pathname>} -
Unixドメインソケットに書き出します(それらをサポートするプラットフォーム上であれば)。ソケットタイプは @samp{stream} または @samp{dgram}
のいずれかです。省略した場合、Gitは両方を試します。
@end itemize

@item  trace2.normalBrief 
Boolean.  When true @samp{time}, @samp{filename}, and @samp{line} fields are omitted from
normal output.  May be overridden by the @samp{GIT_TRACE2_BRIEF} environment
variable.  Defaults to false.

@item  trace2.perfBrief 
Boolean.  When true @samp{time}, @samp{filename}, and @samp{line} fields are omitted from
PERF output.  May be overridden by the @samp{GIT_TRACE2_PERF_BRIEF} environment
variable.  Defaults to false.

@item  trace2.eventBrief 
Boolean.  When true @samp{time}, @samp{filename}, and @samp{line} fields are omitted from
event output.  May be overridden by the @samp{GIT_TRACE2_EVENT_BRIEF} environment
variable.  Defaults to false.

@item  trace2.eventNesting 
Integer.  Specifies desired depth of nested regions in the event output.
Regions deeper than this value will be omitted.  May be overridden by the
@samp{GIT_TRACE2_EVENT_NESTING} environment variable.  Defaults to 2.

@item  trace2.configParams 
A comma-separated list of patterns of "important" config settings that
should be recorded in the trace2 output.  For example, @samp{core.*,remote.*.url}
would cause the trace2 output to contain events listing each configured
remote.  May be overridden by the @samp{GIT_TRACE2_CONFIG_PARAMS} environment
variable.  Unset by default.

@item  trace2.envVars 
A comma-separated list of "important" environment variables that should be
recorded in the trace2 output.  For example,
@samp{GIT_HTTP_USER_AGENT,GIT_CONFIG} would cause the trace2 output to contain
events listing the overrides for HTTP user agent and the location of the Git
configuration file (assuming any are set).  May be overridden by the
@samp{GIT_TRACE2_ENV_VARS} environment variable.  Unset by default.

@item  trace2.destinationDebug 
Boolean.  When true Git will print error messages when a trace target
destination cannot be opened for writing.  By default, these errors are
suppressed and tracing is silently disabled.  May be overridden by the
@samp{GIT_TRACE2_DST_DEBUG} environment variable.

@item  trace2.maxFiles 
Integer.  When writing trace files to a target directory, do not write
additional traces if we would exceed this many files. Instead, write a
sentinel file that will block further tracing to this directory. Defaults to
0, which disables this check.

@item  transfer.fsckObjects 
When @samp{fetch.fsckObjects} or @samp{receive.fsckObjects} are not set, the value of
this variable is used instead.  Defaults to false.

When set, the fetch or receive will abort in the case of a malformed object
or a link to a nonexistent object. In addition, various other issues are
checked for, including legacy issues (see @samp{fsck.<msg-id>}), and potential
security issues like the existence of a @samp{.GIT} directory or a malicious
@samp{.gitmodules} file (see the release notes for v2.2.1 and v2.17.1 for
details). Other sanity and security checks may be added in future releases.

On the receiving side, failing fsckObjects will make those objects
unreachable, see "QUARANTINE ENVIRONMENT" in git-receive-pack(1). On
the fetch side, malformed objects will instead be left unreferenced in the
repository.

Due to the non-quarantine nature of the @samp{fetch.fsckObjects} implementation
it cannot be relied upon to leave the object store clean like
@samp{receive.fsckObjects} can.

As objects are unpacked they’re written to the object store, so there can be
cases where malicious objects get introduced even though the "fetch" failed,
only to have a subsequent "fetch" succeed because only new incoming objects
are checked, not those that have already been written to the object
store. That difference in behavior should not be relied upon. In the future,
such objects may be quarantined for "fetch" as well.

For now, the paranoid need to find some way to emulate the quarantine
environment if they’d like the same protection as "push". E.g. in the case
of an internal mirror do the mirroring in two steps, one to fetch the
untrusted objects, and then do a second "push" (which will use the
quarantine) to another internal repo, and have internal clients consume this
pushed-to repository, or embargo internal fetches and only allow them once a
full "fsck" has run (and no new fetches have happened in the meantime).

@item  transfer.hideRefs 
String(s) @samp{receive-pack} and @samp{upload-pack} use to decide which refs to omit
from their initial advertisements.  Use more than one definition to specify
multiple prefix strings. A ref that is under the hierarchies listed in the
value of this variable is excluded, and is hidden when responding to @samp{git
push} or @samp{git fetch}.  See @samp{receive.hideRefs} and @samp{uploadpack.hideRefs} for
program-specific versions of this config.

You may also include a @samp{!} in front of the ref name to negate the entry,
explicitly exposing it, even if an earlier entry marked it as hidden.  If
you have multiple hideRefs values, later entries override earlier ones (and
entries in more-specific config files override less-specific ones).

If a namespace is in use, the namespace prefix is stripped from each
reference before it is matched against @samp{transfer.hiderefs} patterns. In
order to match refs before stripping, add a @samp{^} in front of the ref name. If
you combine @samp{!} and @samp{^}, @samp{!} must be specified first.

For example, if @samp{refs/heads/master} is specified in @samp{transfer.hideRefs} and
the current namespace is @samp{foo}, then @samp{refs/namespaces/foo/refs/heads/master}
is omitted from the advertisements. If @samp{uploadpack.allowRefInWant} is set,
@samp{upload-pack} will treat @samp{want-ref refs/heads/master} in a protocol v2
@samp{fetch} command as if @samp{refs/namespaces/foo/refs/heads/master} did not
exist.  @samp{receive-pack}, on the other hand, will still advertise the object
id the ref is pointing to without mentioning its name (a so-called ".have"
line).

Even if you hide refs, a client may still be able to steal the target
objects via the techniques described in the "SECURITY" section of the
gitnamespaces(7) man page; it’s best to keep private data in a
separate repository.

@item  transfer.unpackLimit 
When @samp{fetch.unpackLimit} or @samp{receive.unpackLimit} are not set, the value of
this variable is used instead.  The default value is 100.

@item  transfer.advertiseSID 
Boolean. When true, client and server processes will advertise their unique
session IDs to their remote counterpart. Defaults to false.

@item  uploadarchive.allowUnreachable 
trueの場合、クライアントが @samp{git archive --remote}
を使用して、ref先端から到達可能かどうかに関係なく、任意のツリーを要求できるようにします。詳細については、
git-upload-archive(1)の「SECURITY」セクションの説明を参照してください。デフォルトは @samp{false} です。

@item  uploadpack.hideRefs 
This variable is the same as @samp{transfer.hideRefs}, but applies only to
@samp{upload-pack} (and so affects only fetches, not pushes).  An attempt to
fetch a hidden ref by @samp{git fetch} will fail.  See also
@samp{uploadpack.allowTipSHA1InWant}.

@item  uploadpack.allowTipSHA1InWant 
When @samp{uploadpack.hideRefs} is in effect, allow @samp{upload-pack} to accept a
fetch request that asks for an object at the tip of a hidden ref (by
default, such a request is rejected).  See also @samp{uploadpack.hideRefs}.  Even
if this is false, a client may be able to steal objects via the techniques
described in the "SECURITY" section of the gitnamespaces(7) man
page; it’s best to keep private data in a separate repository.

@item  uploadpack.allowReachableSHA1InWant 
Allow @samp{upload-pack} to accept a fetch request that asks for an object that
is reachable from any ref tip. However, note that calculating object
reachability is computationally expensive.  Defaults to @samp{false}.  Even if
this is false, a client may be able to steal objects via the techniques
described in the "SECURITY" section of the gitnamespaces(7) man
page; it’s best to keep private data in a separate repository.

@item  uploadpack.allowAnySHA1InWant 
Allow @samp{upload-pack} to accept a fetch request that asks for any object at
all.  Defaults to @samp{false}.

@item  uploadpack.keepAlive 
When @samp{upload-pack} has started @samp{pack-objects}, there may be a quiet period
while @samp{pack-objects} prepares the pack. Normally it would output progress
information, but if @samp{--quiet} was used for the fetch, @samp{pack-objects} will
output nothing at all until the pack data begins. Some clients and networks
may consider the server to be hung and give up. Setting this option
instructs @samp{upload-pack} to send an empty keepalive packet every
@samp{uploadpack.keepAlive} seconds. Setting this option to 0 disables keepalive
packets entirely. The default is 5 seconds.

@item  uploadpack.packObjectsHook 
If this option is set, when @samp{upload-pack} would run @samp{git pack-objects} to
create a packfile for a client, it will run this shell command instead.  The
@samp{pack-objects} command and arguments it @emph{would} have run (including the @samp{git
pack-objects} at the beginning) are appended to the shell command. The stdin
and stdout of the hook are treated as if @samp{pack-objects} itself was
run. I.e., @samp{upload-pack} will feed input intended for @samp{pack-objects} to the
hook, and expects a completed packfile on stdout.

Note that this configuration variable is ignored if it is seen in the
repository-level config (this is a safety measure against fetching from
untrusted repositories).

@item  uploadpack.allowFilter 
If this option is set, @samp{upload-pack} will support partial clone and partial
fetch object filtering.

@item  uploadpackfilter.allow 
Provides a default value for unspecified object filters (see: the below
configuration variable). If set to @samp{true}, this will also enable all filters
which get added in the future.  Defaults to @samp{true}.

@item  uploadpackfilter.<filter>.allow 
Explicitly allow or ban the object filter corresponding to @samp{<filter>}, where
@samp{<filter>} may be one of: @samp{blob:none}, @samp{blob:limit}, @samp{object:type}, @samp{tree},
@samp{sparse:oid}, or @samp{combine}.  If using combined filters, both @samp{combine} and
all of the nested filter kinds must be allowed. Defaults to
@samp{uploadpackfilter.allow}.

@item  uploadpackfilter.tree.maxDepth 
Only allow @samp{--filter=tree:<n>} when @samp{<n>} is no more than the value of
@samp{uploadpackfilter.tree.maxDepth}. If set, this also implies
@samp{uploadpackfilter.tree.allow=true}, unless this configuration variable had
already been set. Has no effect if unset.

@item  uploadpack.allowRefInWant 
If this option is set, @samp{upload-pack} will support the @samp{ref-in-want} feature
of the protocol version 2 @samp{fetch} command.  This feature is intended for the
benefit of load-balanced servers which may not have the same view of what
OIDs their refs point to due to replication delay.

@item  url.<base>.insteadOf 
Any URL that starts with this value will be rewritten to start, instead,
with <base>. In cases where some site serves a large number of repositories,
and serves them with multiple access methods, and some users need to use
different access methods, this feature allows people to specify any of the
equivalent URLs and have Git automatically rewrite the URL to the best
alternative for the particular user, even for a never-before-seen repository
on the site.  When more than one insteadOf strings match a given URL, the
longest match is used.

Note that any protocol restrictions will be applied to the rewritten URL. If
the rewrite changes the URL to use a custom protocol or remote helper, you
may need to adjust the @samp{protocol.*.allow} config to permit the request.  In
particular, protocols you expect to use for submodules must be set to
@samp{always} rather than the default of @samp{user}. See the description of
@samp{protocol.allow} above.

@item  url.<base>.pushInsteadOf 
Any URL that starts with this value will not be pushed to; instead, it will
be rewritten to start with <base>, and the resulting URL will be pushed
to. In cases where some site serves a large number of repositories, and
serves them with multiple access methods, some of which do not allow push,
this feature allows people to specify a pull-only URL and have Git
automatically use an appropriate URL to push, even for a never-before-seen
repository on the site.  When more than one pushInsteadOf strings match a
given URL, the longest match is used.  If a remote has an explicit pushurl,
Git will ignore this setting for that remote.

@item  user.name 
@itemx  user.email 
@itemx  author.name 
@itemx  author.email 
@itemx  committer.name 
@itemx  committer.email 
The @samp{user.name} and @samp{user.email} variables determine what ends up in the
@samp{author} and @samp{committer} field of commit objects.  If you need the @samp{author}
or @samp{committer} to be different, the @samp{author.name}, @samp{author.email},
@samp{committer.name} or @samp{committer.email} variables can be set.  Also, all of
these can be overridden by the @samp{GIT_AUTHOR_NAME}, @samp{GIT_AUTHOR_EMAIL},
@samp{GIT_COMMITTER_NAME}, @samp{GIT_COMMITTER_EMAIL} and @samp{EMAIL} environment
variables.

Note that the @samp{name} forms of these variables conventionally refer to some
form of a personal name.  See git-commit(1) and the environment
variables section of git(1) for more information on these settings
and the @samp{credential.username} option if you’re looking for authentication
credentials instead.

@item  user.useConfigOnly 
Instruct Git to avoid trying to guess defaults for @samp{user.email} and
@samp{user.name}, and instead retrieve the values only from the
configuration. For example, if you have multiple email addresses and would
like to use a different one for each repository, then with this
configuration option set to @samp{true} in the global config along with a name,
Git will prompt you to set up an email before making new commits in a newly
cloned repository.  Defaults to @samp{false}.

@item  user.signingKey 
If git-tag(1) or git-commit(1) is not selecting the key you
want it to automatically when creating a signed tag or commit, you can
override the default selection with this variable.  This option is passed
unchanged to gpg’s --local-user parameter, so you may specify a key using
any method that gpg supports.

@item  versionsort.prereleaseSuffix (deprecated) 
Deprecated alias for @samp{versionsort.suffix}.  Ignored if @samp{versionsort.suffix}
is set.

@item  versionsort.suffix 
Even when version sort is used in git-tag(1), tagnames with the same
base version but different suffixes are still sorted lexicographically,
resulting e.g. in prerelease tags appearing after the main release
(e.g. "1.0-rc1" after "1.0").  This variable can be specified to determine
the sorting order of tags with different suffixes.

By specifying a single suffix in this variable, any tagname containing that
suffix will appear before the corresponding main release.  E.g. if the
variable is set to "-rc", then all "1.0-rcX" tags will appear before "1.0".
If specified multiple times, once per suffix, then the order of suffixes in
the configuration will determine the sorting order of tagnames with those
suffixes.  E.g. if "-pre" appears before "-rc" in the configuration, then
all "1.0-preX" tags will be listed before any "1.0-rcX" tags.  The placement
of the main release tag relative to tags with various suffixes can be
determined by specifying the empty suffix among those other suffixes.
E.g. if the suffixes "-rc", "", "-ck" and "-bfs" appear in the configuration
in this order, then all "v4.8-rcX" tags are listed first, followed by
"v4.8", then "v4.8-ckX" and finally "v4.8-bfsX".

If more than one suffixes match the same tagname, then that tagname will be
sorted according to the suffix which starts at the earliest position in the
tagname.  If more than one different matching suffixes start at that
earliest position, then that tagname will be sorted according to the longest
of those suffixes.  The sorting order between different suffixes is
undefined if they are in multiple config files.

@item  web.browser 
一部のコマンドで使用できるWebブラウザを指定します。 現在、 git-instaweb(1) と
git-help(1) のみが使用できます。

@item  worktree.guessRemote 
If no branch is specified and neither @samp{-b} nor @samp{-B} nor @samp{--detach} is used,
then @samp{git worktree add} defaults to creating a new branch from HEAD.  If
@samp{worktree.guessRemote} is set to true, @samp{worktree add} tries to find a
remote-tracking branch whose name uniquely matches the new branch name.  If
such a branch exists, it is checked out and set as "upstream" for the new
branch.  If no such match can be found, it falls back to creating a new
branch from the current HEAD.
@end table

@noindent

@chapheading BUGS

非推奨の @samp{[section.subsection]}
構文を使用する場合、サブセクションに少なくとも1つの大文字が指定されていると、値を変更すると、変更ではなく複数行のキーが追加されます。たとえば、設定が以下のようになっている場合

@example
  [section.subsection]
    key = value1
@end example


@samp{git config section.Subsection.key value2} を実行すると、以下のようになります。

@example
  [section.subsection]
    key = value1
    key = value2
@end example


@noindent

@chapheading GIT

Part of the git(1) suite

@node git-count-objects,,,Top
@chapheading Name

git-count-objects — パックされていない(unpack)オブジェクトの数とそのディスク消費量を計量します

@noindent

@chapheading Synopsis

@display
git count-objects [-v] [-H | --human-readable]
@end display


@noindent

@chapheading DESCRIPTION

これは、パックされていないオブジェクトファイルの数とそれらによって消費されたディスク領域を計量し、再パックするのに適した時期を判断するのに役立ちます。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-v} 
@itemx  @samp{--verbose} 
より詳細な報告:

count: 緩いオブジェクト(loose objects;ファイルごとに１つのオブジェクトな形式)の数

size: 緩いオブジェクトによって消費される、KiB単位のディスク容量(-H が指定されていない場合)

in-pack: パック内にあるオブジェクトの数

size-pack: パック群によって消費される、KiB単位のディスク容量(-Hが指定されていない場合)

prune-packable: パック内にも同じものが存在する緩いオブジェクトの数。これらの緩いオブジェクトは、@samp{git prune-packed}
を使用して剪定する(prune)事ができます。

garbage: オブジェクトデータベース内の、有効な緩いオブジェクトでも有効なパックでもないファイルの数

size-garbage: garbageファイルによって消費されるKiB単位のディスク容量(-Hが指定されていない場合)

alternate:
代替オブジェクトデータベース群の絶対パス。パスごとに1行ずつ、複数回表示される場合があります。パスに印刷不可能な文字が含まれている場合は、二重引用符で囲まれ、C言語スタイルのバックスラッシュエスケープシーケンスが含まれている可能性があることに注意してください。

@item  @samp{-H} 
@itemx  @samp{--human-readable} 
人間に分かりやすい形式でサイズを出力する
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-credential-cache--daemon,,,Top
@chapheading Name

git-credential-cache--daemon — ユーザーの資格情報を一時的にメモリに保存する

@noindent

@chapheading Synopsis

@display
git credential-cache—daemon [--debug] <socket>
@end display


@noindent

@chapheading DESCRIPTION

@quotation

@strong{Note}

あなたが、このコマンドを手動で起動したくないなら、 git-credential-cache(1) を使用すれば自動的に開始されます。
@end quotation

このコマンドは、 @samp{<socket>} で指定されたUnixドメインソケットで @samp{git-credential-cache}
クライアントをリッスンします。クライアントは、資格情報を保存および取得できます。
各資格情報は、クライアントによって指定されたタイムアウトまで保持されます。資格情報が保持されなくなると、デーモンは終了します。

@samp{--debug}
オプションが指定されている場合、デーモンはstderrストリームを閉じず、クライアントのリッスンを開始した後でも、追加の診断を出力する場合があります。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-credential-cache,,,Top
@chapheading Name

git-credential-cache — パスワードを一時的にメモリに保存するヘルパー

@noindent

@chapheading Synopsis

@example
git config credential.helper 'cache [<options>]'
@end example


@noindent

@chapheading DESCRIPTION

このコマンドは、将来のGitプログラムで使用するために認証情報(credential)をメモリにキャッシュします。保存された認証情報はディスクに記録されることはなく、設定可能なタイムアウト後にメモリから削除されます。キャッシュはUnixドメインソケットを介してアクセスでき、ファイルシステムのアクセス許可によって現在のユーザーに制限されます。

あなたはこのコマンドを直接呼び出すことは無いでしょう。これは、Gitの他の部分で認証情報ヘルパーとして使用されることを目的としています。gitcredentials(7)
または 以下の EXAMPLES を参照してください。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--timeout <seconds>} 
認証情報をキャッシュする秒数(デフォルト: 900)。

@item  @samp{--socket <path>} 
@samp{<path>} を使用して、実行中のキャッシュデーモンに接続します(または、新しいキャッシュデーモンが開始されていない場合は開始します)。デフォルトは
@samp{$XDG_CACHE_HOME/git/credential/socket} です(@samp{~/.git-credential-cache/}
が存在しない限り)。 @samp{~/.git-credential-cache/} が存在する場合は、代わりに
@samp{~/.git-credential-cache/}
が使用されます。あなたのホームディレクトリがネットワークにマウントされたファイルシステム上にある場合は、これをローカルファイルシステムに変更する必要がある場合があります。あなたは絶対パスを指定しなければなりません。
@end table

@noindent

@chapheading CONTROLLING THE DAEMON

あなたがデーモンを早期に終了させ、タイムアウトする前にキャッシュされたすべての認証情報を忘れ去りたい場合は、「exit」アクションを発行できます:

@example
git credential-cache exit
@end example


@noindent

@chapheading EXAMPLES

このヘルパーの肝は、ユーザー名またはパスワードを入力する必要がある回数を減らすことです。例えば:

@example
$ git config credential.helper cache
$ git push http://example.com/repo.git
Username: <type your username>
Password: <type your password>

[work for 5 more minutes]
$ git push http://example.com/repo.git
[your credentials are used automatically]
@end example


credential.helper構成変数を介してオプションを提供できます(この例では、キャッシュ時間が5分に短縮されます):

@example
$ git config credential.helper 'cache --timeout=300'
@end example


@noindent

@chapheading GIT

Part of the git(1) suite

@node git-credential-store,,,Top
@chapheading Name

git-credential-store — 資格情報をディスクに保存するヘルパー

@noindent

@chapheading Synopsis

@example
git config credential.helper 'store [<options>]'
@end example


@noindent

@chapheading DESCRIPTION

@quotation

@strong{Note}

このヘルパーを使用すると、パスワードは暗号化されずにディスクに保存され、ファイルシステムのアクセス許可によってのみ保護されます。これが許容できるセキュリティのトレードオフではない場合は
git-credential-cache(1)
を試すか、オペレーティングシステムが提供する安全なストレージと統合するヘルパーを探してください。
@end quotation

このコマンドは、将来に渡ってGitプログラムで使用できるように、資格情報をディスクに無期限に保存します。

このコマンドが直接呼び出されることはありません。これは、gitの他の部分で資格情報ヘルパーとして使用されることを目的としています。以下のEXAMPLESまたは
gitcredentials(7) を参照してください。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--file=<path>} 
@samp{<path>}
を使用して、資格情報を探してして保存します。ファイルには、システム上の他のユーザーがファイルを読み取れないようにファイルシステムのアクセス許可が設定されますが、暗号化またはその他の方法で保護されることはありません。@samp{<path>}
指定がない場合、資格情報は @samp{~/.git-credentials} と @samp{$XDG_CONFIG_HOME/git/credentials}
から検索されます。そして、書き込みは、存在すれば @samp{~/.git-credentials} に書き込みますが、@samp{~/.git-credentials}
に書き込まなかった場合、存在すれば @samp{$XDG_CONFIG_HOME/git/credentials} に書き込みます。 @ref{FILES}
も参照してください。
@end table

@noindent

@chapheading FILES

@samp{--file} で明示的に設定されていない場合、git-credential-store
が優先順位に従って資格情報を検索する2つのファイルがあります:

@table @asis

@item  ~/.git-credentials 
ユーザー毎の資格情報ファイル。

@item  $XDG_CONFIG_HOME/git/credentials 
2番目のユーザー毎の資格情報ファイル。 @emph{$XDG_CONFIG_HOME} が設定されていないか空の場合、
@samp{$HOME/.config/git/credentials} が使用されます。 @samp{~/.git-credentials}
に一致する資格情報がある場合、このファイルに保存されている資格情報は使用されません。このファイルがサポートされていない、古いバージョンのGitを使用することがある場合は、このファイルを作成しないことをお勧めします。
@end table

資格情報探索の場合、ファイルは上記の順序で読み取られ、最初に一致した資格情報が、リストのさらに下のファイルで見つかった資格情報よりも優先されます。

資格情報ストレージは、デフォルトでこのリストの順で最初に見つかった既存のファイルに書き込みます。これらのファイルが存在しない場合は、
@samp{~/.git-credentials} を作成して書き込みます。

資格情報の消去を行うと、一致するすべての資格情報がすべてのファイルから消去されます。

@noindent

@chapheading EXAMPLES

このヘルパーの要点は、ユーザー名またはパスワードを入力する必要がある回数を減らすことです。 例えば:

@example
$ git config credential.helper store
$ git push http://example.com/repo.git
Username: <type your username>
Password: <type your password>

[several days later]
$ git push http://example.com/repo.git
[your credentials are used automatically]
@end example


@noindent

@chapheading STORAGE FORMAT

@samp{.git-credentials} ファイルはプレーンテキストで保存されます。各資格情報は、以下のようなURLとしてそれぞれ独自の行に保存されます:

@example
https://user:pass@@example.com
@end example


他の種類の行(空の行やコメント行など)は、一部が黙って無視される場合でも、ファイル内では許可されません。エディタでファイルを表示または編集しないでください。

Gitが特定のURLコンテキストの認証を必要とする場合、credential-store
はそのコンテキストを、資格情報ファイルの各エントリと照合するパターンと見なします。
protocolとhostnameと(すでに持っている場合)usernameが一致する場合、パスワードはGitに返されます。詳細については、
gitcredentials(7) の 「the discussion of configuration」を参照してください。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-credential,,,Top
@chapheading Name

git-credential — ユーザー資格情報の取得と保存

@noindent

@chapheading Synopsis

@example
git credential <fill|approve|reject>
@end example


@noindent

@chapheading DESCRIPTION

Gitには、システム固有のヘルパーから資格情報(credentials)を保存および取得したり、ユーザーにユーザー名とパスワードの入力を求めたりするための内部インターフェイスがあります。
git-credentialコマンドは、Gitと同じ方法で資格情報を取得、保存、または要求する可能性のあるスクリプトにこのインターフェイスを公開します。
このスクリプト可能なインターフェイスの設計は、内部CAPIをモデル化しています。 概念の背景については、credential.hを参照してください。

git-credentialは、コマンドラインで「action」オプション(@samp{fill} または @samp{approve} または @samp{reject}
のいずれか)を取り、stdinで資格情報の説明(description)を読み取ります(INPUT/OUTPUT FORMAT (@pxref{INPUT/OUTPUT FORMAT})
を参照)

アクションが @samp{fill}
の場合、git-credentialは、構成ファイルを読み取るか、構成された資格情報ヘルパーに連絡するか、ユーザーにプロンプトを表示することにより、説明(description)に「username」および「password」属性を追加しようとします。次に、資格情報の説明(description)のユーザー名とパスワードの属性が、すでに提供されている属性とともにstdoutに出力されます。

アクションが
@samp{approve}(承認)の場合、git-credentialは、構成された資格情報ヘルパーに説明(description)を送信します。ヘルパーは、後で使用するために資格情報を保存する場合があります。

アクションが @samp{reject}
の場合、git-credentialは設定された資格情報ヘルパーに説明(description)を送信します。これにより、説明(description)に一致する保存済みの資格情報が消去される場合があります。

アクションが @samp{approve}(承認)または @samp{reject}(拒否)の場合、出力は生成されません。

@noindent

@chapheading TYPICAL USE OF GIT CREDENTIAL

git-credentialを使用するアプリケーションは、通常、以下の手順に従って @samp{git credential} を使用します:

@enumerate 

@item
コンテキストに基づいて資格情報の説明(description)を生成します。

たとえば、 @samp{https://example.com/foo.git}
のパスワードが必要な場合は、以下の資格情報の説明(description)を生成できます(最後の空白行を忘れないでください。これは、アプリケーションがすべての情報の提供を終了したことを
@samp{git credential} に通知します):

@example
protocol=https
host=example.com
path=foo.git
@end example

@item
この説明(description)のユーザー名とパスワードを提供するようにgit-credentialに依頼してください。 これは、 @samp{git
credential fill}
を実行し、ステップ(1)の説明(description)を標準入力に送ることで実行されます。完全な資格情報の説明(description)(資格情報自体、つまりログインとパスワードを含む)は、以下のように標準出力へ生成されます。

@example
protocol=https
host=example.com
username=bob
password=secr3t
@end example

ほとんどの場合、これは入力で指定された属性が出力で繰り返されることを意味しますが、Gitは資格情報の説明(description)を変更する場合もあります。たとえば、プロトコルがHTTP(s)であり、
@samp{credential.useHttpPath} がfalseの場合、 @samp{path} 属性を削除します。

@samp{git credential} が既にパスワードを知っていた場合、この手順では、ユーザーが @samp{password=secr3t}
を返す前に実際にこのパスワードを入力していなかった可能性があります(ユーザーが代わりにキーチェーンのロックを解除するためにパスワードを入力したか、キーチェーンがすでにロック解除している場合はユーザーの操作が行われなかった可能性があります)。

@item
資格情報を使用し(たとえば、手順(2)のユーザー名とパスワードを使用してURLにアクセスします)、それが受け入れられるかどうかを確認します。

@item
パスワードの成功または失敗について報告します。資格情報によって操作が正常に完了することが許可された場合は、「approve」アクションでマークを付けて、「git
credential」に次の呼び出しで再利用するように指示できます。操作中に資格情報が拒否された場合は、「reject」アクションを使用して、 @samp{git
credential} が次の呼び出しで新しいパスワードを要求するようにします。 いずれの場合も、 @samp{git credential}
には、ステップ(2)で取得した資格情報の説明(description)(ステップ(1)で提供されたものも含まれます)を指定する必要があります。
@end enumerate

@noindent

@chapheading INPUT/OUTPUT FORMAT

@samp{git credential} は、標準入力/標準出力で(使用するアクションに応じて)資格情報を読み取り および/また は書き込みます。この情報は、
@samp{git credential}
がログイン情報(ホスト、プロトコル、パスなど)を取得するキー、または取得する実際の資格データ(ユーザー名/パスワード)のいずれかに対応できます。

資格情報は、1行に1つの属性を持つ、名前付き属性のセットに分割されます。 各属性は、キーと値のペアで指定され、 @samp{=} (等号)記号と、改行で続けます。

キーには、 @samp{=} または改行またはNUL以外の任意のバイトを含めることができます。値には、改行またはNUL以外の任意のバイトを含めることができます。

どちらの場合も、すべてのバイトはそのまま扱われます(つまり、クォートせず、改行またはNULを含む値を送信することはできません)。属性のリストは、空白行またはファイルの終わりで終了します。

Gitは以下の属性を理解します:

@table @asis

@item  @samp{protocol} 
資格情報が使用されるプロトコル(例: @samp{https})。

@item  @samp{host} 
ネットワーク資格情報のリモートホスト名。これには、ポート番号が指定されている場合はそれも含まれます(例: @samp{example.com:8088})。

@item  @samp{path} 
資格情報が使用されるパス。 たとえば、リモートhttpsリポジトリにアクセスする場合、これはサーバー上のリポジトリのパスになります。

@item  @samp{username} 
私達が既に持っている(たとえば、URL、構成、ユーザー、または以前に実行したヘルパーから)場合、資格情報のユーザー名。

@item  @samp{password} 
資格情報のパスワード(私達が保存を要求している場合)。

@item  @samp{url} 
この特別な属性が @samp{git credential}
によって読み取られると、値はURLとして解析され、その構成要素が読み取られたかのように扱われます(たとえば、
@samp{url=https://example.com} は @samp{protocol=https} と @samp{host=example.com}
が提供されたかのように振る舞います)。これは、発信者がURL自体を解析することを回避するのに役立ちます。

注意:プロトコルの指定は必須であり、そして、URLでホスト名が指定されていない場合(たとえば
"cert:///path/to/file")、資格情報には、値が空の文字列であるホスト名属性が含まれることに注意してください。

URLから欠落しているコンポーネント(たとえば、上記の例にユーザー名がないとか)は未設定のままになります。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-cvsexportcommit,,,Top
@chapheading Name

git-cvsexportcommit — 単一のコミットをCVSチェックアウトにエクスポートします

@noindent

@chapheading Synopsis

@display
git cvsexportcommit [-h] [-u] [-v] [-c] [-P] [-p] [-a] [-d cvsroot]
        [-w cvsworkdir] [-W] [-f] [-m msgprefix] [PARENTCOMMIT] COMMITID
@end display


@noindent

@chapheading DESCRIPTION

コミットをGitからCVSチェックアウトにエクスポートし、GitリポジトリからCVSリポジトリへのパッチのマージを容易にします。

@samp{-w}
スイッチを使用してCVSチェックアウトの名前を指定するか、CVS作業コピーのルートから実行します。後者の場合、GIT_DIRを定義する必要があります。以下の例を参照してください。

安全寄りに最大限振って、CVSチェックアウトでファイルが変更されておらず、最新であることを確認したら、デフォルトでは自動コミットしません。

バイナリファイルに影響するファイルの追加、削除、およびコミットをサポートします。

コミットがマージコミットの場合は、あなたは @samp{git cvsexportcommit} にchangesetの対象となる親を指定する必要があります。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-c} 
パッチが正常に適用された場合、自動的にコミットします。ハンクが適用されない場合、またはその他の問題が発生した場合、コミットされません。

@item  @samp{-p} 
パッチを適用するときは、pedantic(衒学的)(paranoid;病的なほど疑り深い)にする。 @samp{--fuzz=0} でpatchを呼び出します。

@item  @samp{-a} 
著者情報を追加します。作者行と(作成者と異なる場合)コミッターをメッセージに追加します。

@item  @samp{-d} 
使用する代替CVSROOTを設定します。これは、 @samp{CVS -d} パラメーターに対応します。
非対称的な方法でCVSを使用する場合を除いて、通常、ユーザーはこれを設定することは無いと思います。

@item  @samp{-f} 
ファイルが最新でない場合でも、強制的にマージします。

@item  @samp{-P} 
直接の親でなくても、親を強制的にコミットします。

@item  @samp{-m} 
コミットメッセージの前に、指定のプレフィックスを付けます。パッチシリーズなどに便利です。

@item  @samp{-u} 
エクスポートを試みる前に、影響を受けるファイルをCVSリポジトリから更新してください。

@item  @samp{-k} 
パッチを適用する前に、CVSチェックアウトの動作でCVSキーワード拡張を逆にします。 (例: $Revision: 1.2.3.4$ は
$Revision$ になります)

@item  @samp{-w} 
エクスポートに使用するCVSチェックアウトの場所を指定します。現在のディレクトリがGitリポジトリ内にある場合、このオプションでは、実行前にGIT_DIRを設定する必要はありません。
デフォルトは @samp{cvsexportcommit.cvsdir} の値です。

@item  @samp{-W} 
現在の作業ディレクトリがGitチェックアウトであるだけでなく、CVSチェックアウトでもあることをcvsexportcommitに伝えます。したがって、Gitは続行する前に作業ディレクトリを親コミットにリセットします。

@item  @samp{-v} 
おしゃべりにします。
@end table

@noindent

@chapheading CONFIGURATION

@table @asis

@item  cvsexportcommit.cvsdir 
エクスポートに使用するCVSチェックアウトのデフォルトの場所。
@end table

@noindent

@chapheading EXAMPLES

@table @asis

@item  1つのパッチをCVSにマージします 
@example
$ export GIT_DIR=~/project/.git
$ cd ~/project_cvs_checkout
$ git cvsexportcommit -v <commit-sha1>
$ cvs commit -F .msg <files>
@end example


@item  1つのパッチをCVSにマージします( @samp{-c} および @samp{-w} オプション)。作業ディレクトリはGitリポジトリ内にあります 
@example
        $ git cvsexportcommit -v -c -w ~/project_cvs_checkout <commit-sha1>
@end example


@item  保留中のパッチをCVSに自動的にマージします — 自分が何をしているかを本当に知っている場合だけにしましょう。 
@example
$ export GIT_DIR=~/project/.git
$ cd ~/project_cvs_checkout
$ git cherry cvshead myhead | sed -n 's/^+ //p' | xargs -l1 git cvsexportcommit -c -p -v
@end example

@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-cvsimport,,,Top
@chapheading Name

git-cvsimport — Salvage your data out of another SCM people love to hate

@noindent

@chapheading Synopsis

@display
git cvsimport [-o <branch-for-HEAD>] [-h] [-v] [-d <CVSROOT>]
              [-A <author-conv-file>] [-p <options-for-cvsps>] [-P <file>]
              [-C <git_repository>] [-z <fuzz>] [-i] [-k] [-u] [-s <subst>]
              [-a] [-m] [-M <regex>] [-S <regex>] [-L <commitlimit>]
              [-r <remote>] [-R] [<CVS_module>]
@end display


@noindent

@chapheading DESCRIPTION

@strong{WARNING:} @samp{git cvsimport} uses cvsps version 2, which is considered
deprecated; it does not work with cvsps version 3 and later.  If you are
performing a one-shot import of a CVS repository consider using
@uref{http://cvs2svn.tigris.org/cvs2git.html,cvs2git} or
@uref{http://www.catb.org/esr/cvs-fast-export/,cvs-fast-export}.

Imports a CVS repository into Git. It will either create a new repository,
or incrementally import into an existing one.

Splitting the CVS log into patch sets is done by @emph{cvsps}.  At least version
2.1 is required.

@strong{WARNING:} for certain situations the import leads to incorrect results.
Please see the section ISSUES (@pxref{ISSUES}) for further reference.

You should @strong{never} do any work of your own on the branches that are created
by @emph{git cvsimport}.  By default initial import will create and populate a
"master" branch from the CVS repository’s main branch which you’re free to
work with; after that, you need to @emph{git merge} incremental imports, or any
CVS branches, yourself.  It is advisable to specify a named remote via -r to
separate and protect the incoming branches.

If you intend to set up a shared public repository that all developers can
read/write, or if you want to use git-cvsserver(1), then you
probably want to make a bare clone of the imported repository, and use the
clone as the shared repository.  See gitcvs-migration(7).

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-v} 
Verbosity: let @emph{cvsimport} report what it is doing.

@item  @samp{-d <CVSROOT>} 
The root of the CVS archive. May be local (a simple path) or remote;
currently, only the :local:, :ext: and :pserver: access methods are
supported. If not given, @emph{git cvsimport} will try to read it from
@samp{CVS/Root}. If no such file exists, it checks for the @samp{CVSROOT} environment
variable.

@item  <CVS_module> 
The CVS module you want to import. Relative to <CVSROOT>.  If not given,
@emph{git cvsimport} tries to read it from @samp{CVS/Repository}.

@item  @samp{-C <target-dir>} 
The Git repository to import to.  If the directory doesn’t
exist, it will be created.  Default is the current directory.

@item  @samp{-r <remote>} 
The Git remote to import this CVS repository into.  Moves all CVS branches
into remotes/<remote>/<branch> akin to the way @emph{git clone} uses @emph{origin} by
default.

@item  @samp{-o <branch-for-HEAD>} 
When no remote is specified (via -r) the @samp{HEAD} branch from CVS is imported
to the @emph{origin} branch within the Git repository, as @samp{HEAD} already has a
special meaning for Git.  When a remote is specified the @samp{HEAD} branch is
named remotes/<remote>/master mirroring @emph{git clone} behaviour.  Use this
option if you want to import into a different branch.

Use @emph{-o master} for continuing an import that was initially done by the old
cvs2git tool.

@item  @samp{-i} 
Import-only: don’t perform a checkout after importing.  This option ensures
the working directory and index remain untouched and will not create them if
they do not exist.

@item  @samp{-k} 
Kill keywords: will extract files with @emph{-kk} from the CVS archive to avoid
noisy changesets. Highly recommended, but off by default to preserve
compatibility with early imported trees.

@item  @samp{-u} 
Convert underscores in tag and branch names to dots.

@item  @samp{-s <subst>} 
Substitute the character "/" in branch names with <subst>

@item  @samp{-p <options-for-cvsps>} 
Additional options for cvsps.  The options @samp{-u} and @emph{-A} are implicit and
should not be used here.

If you need to pass multiple options, separate them with a comma.

@item  @samp{-z <fuzz>} 
Pass the timestamp fuzz factor to cvsps, in seconds. If unset, cvsps
defaults to 300s.

@item  @samp{-P <cvsps-output-file>} 
Instead of calling cvsps, read the provided cvsps output file. Useful for
debugging or when cvsps is being handled outside cvsimport.

@item  @samp{-m} 
Attempt to detect merges based on the commit message. This option will
enable default regexes that try to capture the source branch name from the
commit message.

@item  @samp{-M <regex>} 
Attempt to detect merges based on the commit message with a custom regex. It
can be used with @samp{-m} to enable the default regexes as well. You must escape
forward slashes.

The regex must capture the source branch name in $1.

This option can be used several times to provide several detection regexes.

@item  @samp{-S <regex>} 
Skip paths matching the regex.

@item  @samp{-a} 
Import all commits, including recent ones. cvsimport by default skips
commits that have a timestamp less than 10 minutes ago.

@item  @samp{-L <limit>} 
Limit the number of commits imported. Workaround for cases where cvsimport
leaks memory.

@item  @samp{-A <author-conv-file>} 
CVS by default uses the Unix username when writing its commit logs. Using
this option and an author-conv-file maps the name recorded in CVS to author
name, e-mail and optional time zone:

@example
        exon=Andreas Ericsson <ae@@op5.se>
        spawn=Simon Pawn <spawn@@frog-pond.org> America/Chicago
@end example


@emph{git cvsimport} will make it appear as those authors had their
GIT_AUTHOR_NAME and GIT_AUTHOR_EMAIL set properly all along.  If a time zone
is specified, GIT_AUTHOR_DATE will have the corresponding offset applied.

For convenience, this data is saved to @samp{$GIT_DIR/cvs-authors} each time the
@emph{-A} option is provided and read from that same file each time @emph{git
cvsimport} is run.

It is not recommended to use this feature if you intend to export changes
back to CVS again later with @emph{git cvsexportcommit}.

@item  @samp{-R} 
Generate a @samp{$GIT_DIR/cvs-revisions} file containing a mapping from CVS
revision numbers to newly-created Git commit IDs.  The generated file will
contain one line for each (filename, revision) pair imported; each line will
look like

@example
src/widget.c 1.1 1d862f173cdc7325b6fa6d2ae1cfd61fd1b512b7
@end example


The revision data is appended to the file if it already exists, for use when
doing incremental imports.

This option may be useful if you have CVS revision numbers stored in commit
messages, bug-tracking systems, email archives, and the like.

@item  @samp{-h} 
Print a short usage message and exit.
@end table

@noindent

@chapheading OUTPUT

If @samp{-v} is specified, the script reports what it is doing.

Otherwise, success is indicated the Unix way, i.e. by simply exiting with a
zero exit status.

@noindent

@chapheading ISSUES

Problems related to timestamps:

@itemize 

@item
If timestamps of commits in the CVS repository are not stable enough to be
used for ordering commits changes may show up in the wrong order.

@item
If any files were ever "cvs import"ed more than once (e.g., import of more
than one vendor release) the HEAD contains the wrong content.

@item
If the timestamp order of different files cross the revision order within
the commit matching time window the order of commits may be wrong.
@end itemize

Problems related to branches:

@itemize 

@item
Branches on which no commits have been made are not imported.

@item
All files from the branching point are added to a branch even if never added
in CVS.

@item
This applies to files added to the source branch @strong{after} a daughter branch
was created: if previously no commit was made on the daughter branch they
will erroneously be added to the daughter branch in git.
@end itemize

Problems related to tags:

@itemize 

@item
Multiple tags on the same revision are not imported.
@end itemize

If you suspect that any of these issues may apply to the repository you want
to import, consider using cvs2git:

@itemize 

@item
cvs2git (part of cvs2svn), @samp{http://subversion.apache.org/}
@end itemize

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-cvsserver,,,Top
@chapheading Name

git-cvsserver — A CVS server emulator for Git

@noindent

@chapheading Synopsis

SSH:

@display
export CVS_SERVER="git cvsserver"
cvs -d :ext:user@@server/path/repo.git co <HEAD_name>
@end display


pserver (/etc/inetd.conf):

@display
cvspserver stream tcp nowait nobody /usr/bin/git-cvsserver git-cvsserver pserver
@end display


Usage:

@display
git-cvsserver [<options>] [pserver|server] [<directory> …]
@end display


@noindent

@chapheading DESCRIPTION

This application is a CVS emulation layer for Git.

It is highly functional. However, not all methods are implemented, and for
those methods that are implemented, not all switches are implemented.

Testing has been done using both the CLI CVS client, and the Eclipse CVS
plugin. Most functionality works fine with both of these clients.

@noindent

@chapheading OPTIONS

All these options obviously only make sense if enforced by the server side.
They have been implemented to resemble the git-daemon(1) options as
closely as possible.

@table @asis

@item  @samp{--base-path <path>} 
Prepend @emph{path} to requested CVSROOT

@item  @samp{--strict-paths} 
Don’t allow recursing into subdirectories

@item  @samp{--export-all} 
Don’t check for @samp{gitcvs.enabled} in config. You also have to specify a list
of allowed directories (see below) if you want to use this option.

@item  @samp{-V} 
@itemx  @samp{--version} 
Print version information and exit

@item  @samp{-h} 
@itemx  @samp{-H} 
@itemx  @samp{--help} 
Print usage information and exit

@item  <directory> 
You can specify a list of allowed directories. If no directories are given,
all are allowed. This is an additional restriction, gitcvs access still
needs to be enabled by the @samp{gitcvs.enabled} config option unless
@samp{--export-all} was given, too.
@end table

@noindent

@chapheading LIMITATIONS

CVS clients cannot tag, branch or perform Git merges.

@emph{git-cvsserver} maps Git branches to CVS modules. This is very different
from what most CVS users would expect since in CVS modules usually represent
one or more directories.

@noindent

@chapheading INSTALLATION

@enumerate 

@item
If you are going to offer CVS access via pserver, add a line in
/etc/inetd.conf like

@example
   cvspserver stream tcp nowait nobody git-cvsserver pserver
@end example


Note: Some inetd servers let you specify the name of the executable
independently of the value of argv[0] (i.e. the name the program assumes it
was executed with). In this case the correct line in /etc/inetd.conf looks
like

@example
   cvspserver stream tcp nowait nobody /usr/bin/git-cvsserver git-cvsserver pserver
@end example


Only anonymous access is provided by pserve by default. To commit you will
have to create pserver accounts, simply add a gitcvs.authdb setting in the
config file of the repositories you want the cvsserver to allow writes to,
for example:

@example
   [gitcvs]
        authdb = /etc/cvsserver/passwd
@end example


The format of these files is username followed by the encrypted password,
for example:

@example
   myuser:$1Oyx5r9mdGZ2
   myuser:$1$BA)@@$vbnMJMDym7tA32AamXrm./
@end example


You can use the @emph{htpasswd} facility that comes with Apache to make these
files, but Apache’s MD5 crypt method differs from the one used by most C
library’s crypt() function, so don’t use the -m option.

Alternatively you can produce the password with perl’s crypt() operator:

@example
   perl -e 'my ($user, $pass) = @@ARGV; printf "%s:%s\n", $user, crypt($user, $pass)' $USER password
@end example


Then provide your password via the pserver method, for example:

@example
   cvs -d:pserver:someuser:somepassword <at> server/path/repo.git co <HEAD_name>
@end example


No special setup is needed for SSH access, other than having Git tools in
the PATH. If you have clients that do not accept the CVS_SERVER environment
variable, you can rename @emph{git-cvsserver} to @samp{cvs}.

Note: Newer CVS versions (>= 1.12.11) also support specifying CVS_SERVER
directly in CVSROOT like

@example
cvs -d ":ext;CVS_SERVER=git cvsserver:user@@server/path/repo.git" co <HEAD_name>
@end example


This has the advantage that it will be saved in your @emph{CVS/Root} files and
you don’t need to worry about always setting the correct environment
variable.  SSH users restricted to @emph{git-shell} don’t need to override the
default with CVS_SERVER (and shouldn’t) as @emph{git-shell} understands @samp{cvs} to
mean @emph{git-cvsserver} and pretends that the other end runs the real @emph{cvs}
better.

@item
For each repo that you want accessible from CVS you need to edit config in
the repo and add the following section.

@example
   [gitcvs]
        enabled=1
        # optional for debugging
        logFile=/path/to/logfile
@end example


Note: you need to ensure each user that is going to invoke @emph{git-cvsserver}
has write access to the log file and to the database (see
Database Backend (@pxref{DATABASE BACKEND}). If you want to offer write access over SSH,
the users of course also need write access to the Git repository itself.

You also need to ensure that each repository is "bare" (without a Git index
file) for @samp{cvs commit} to work. See gitcvs-migration(7).

All configuration variables can also be overridden for a specific method of
access. Valid method names are "ext" (for SSH access) and "pserver". The
following example configuration would disable pserver access while still
allowing access over SSH.

@example
   [gitcvs]
        enabled=0

   [gitcvs "ext"]
        enabled=1
@end example


@item
If you didn’t specify the CVSROOT/CVS_SERVER directly in the checkout
command, automatically saving it in your @emph{CVS/Root} files, then you need to
set them explicitly in your environment.  CVSROOT should be set as per
normal, but the directory should point at the appropriate Git repo.  As
above, for SSH clients @emph{not} restricted to @emph{git-shell}, CVS_SERVER should be
set to @emph{git-cvsserver}.

@example
     export CVSROOT=:ext:user@@server:/var/git/project.git
     export CVS_SERVER="git cvsserver"
@end example


@item
For SSH clients that will make commits, make sure their server-side
.ssh/environment files (or .bashrc, etc., according to their specific shell)
export appropriate values for GIT_AUTHOR_NAME, GIT_AUTHOR_EMAIL,
GIT_COMMITTER_NAME, and GIT_COMMITTER_EMAIL.  For SSH clients whose login
shell is bash, .bashrc may be a reasonable alternative.

@item
Clients should now be able to check out the project. Use the CVS @emph{module}
name to indicate what Git @emph{head} you want to check out.  This also sets the
name of your newly checked-out directory, unless you tell it otherwise with
@samp{-d <dir_name>}.  For example, this checks out @emph{master} branch to the
@samp{project-master} directory:

@example
     cvs co -d project-master master
@end example

@end enumerate

@noindent

@chapheading DATABASE BACKEND

@emph{git-cvsserver} uses one database per Git head (i.e. CVS module) to store
information about the repository to maintain consistent CVS revision
numbers. The database needs to be updated (i.e. written to) after every
commit.

If the commit is done directly by using @samp{git} (as opposed to using
@emph{git-cvsserver}) the update will need to happen on the next repository
access by @emph{git-cvsserver}, independent of access method and requested
operation.

That means that even if you offer only read access (e.g. by using the
pserver method), @emph{git-cvsserver} should have write access to the database to
work reliably (otherwise you need to make sure that the database is up to
date any time @emph{git-cvsserver} is executed).

By default it uses SQLite databases in the Git directory, named
@samp{gitcvs.<module_name>.sqlite}. Note that the SQLite backend creates
temporary files in the same directory as the database file on write so it
might not be enough to grant the users using @emph{git-cvsserver} write access to
the database file without granting them write access to the directory, too.

The database cannot be reliably regenerated in a consistent form after the
branch it is tracking has changed.  Example: For merged branches,
@emph{git-cvsserver} only tracks one branch of development, and after a @emph{git
merge} an incrementally updated database may track a different branch than a
database regenerated from scratch, causing inconsistent CVS revision
numbers. @samp{git-cvsserver} has no way of knowing which branch it would have
picked if it had been run incrementally pre-merge. So if you have to fully
or partially (from old backup) regenerate the database, you should be
suspicious of pre-existing CVS sandboxes.

You can configure the database backend with the following configuration
variables:

@noindent

@heading Configuring database backend

@emph{git-cvsserver} uses the Perl DBI module. Please also read its documentation
if changing these variables, especially about @samp{DBI->connect()}.

@table @asis

@item  gitcvs.dbName 
Database name. The exact meaning depends on the selected database driver,
for SQLite this is a filename.  Supports variable substitution (see
below). May not contain semicolons (@samp{;}).  Default: @emph{%Ggitcvs.%m.sqlite}

@item  gitcvs.dbDriver 
Used DBI driver. You can specify any available driver for this here, but it
might not work. cvsserver is tested with @emph{DBD::SQLite}, reported to work
with @emph{DBD::Pg}, and reported @strong{not} to work with @emph{DBD::mysql}.  Please regard
this as an experimental feature. May not contain colons (@samp{:}).  Default:
@emph{SQLite}

@item  gitcvs.dbuser 
Database user. Only useful if setting @samp{dbDriver}, since SQLite has no
concept of database users. Supports variable substitution (see below).

@item  gitcvs.dbPass 
Database password.  Only useful if setting @samp{dbDriver}, since SQLite has no
concept of database passwords.

@item  gitcvs.dbTableNamePrefix 
Database table name prefix.  Supports variable substitution (see below).
Any non-alphabetic characters will be replaced with underscores.
@end table

All variables can also be set per access method, see
above (@pxref{configaccessmethod}).

@noindent

@subheading Variable substitution

In @samp{dbDriver} and @samp{dbUser} you can use the following variables:

@table @asis

@item  %G 
Git directory name

@item  %g 
Git directory name, where all characters except for alphanumeric ones, @samp{.},
and @samp{-} are replaced with @samp{_} (this should make it easier to use the
directory name in a filename if wanted)

@item  %m 
CVS module/Git head name

@item  %a 
access method (one of "ext" or "pserver")

@item  %u 
Name of the user running @emph{git-cvsserver}.  If no name can be determined, the
numeric uid is used.
@end table

@noindent

@chapheading ENVIRONMENT

These variables obviate the need for command-line options in some
circumstances, allowing easier restricted usage through git-shell.

GIT_CVSSERVER_BASE_PATH takes the place of the argument to --base-path.

GIT_CVSSERVER_ROOT specifies a single-directory whitelist. The repository
must still be configured to allow access through git-cvsserver, as described
above.

When these environment variables are set, the corresponding command-line
arguments may not be used.

@noindent

@chapheading ECLIPSE CVS CLIENT NOTES

To get a checkout with the Eclipse CVS client:

@enumerate 

@item
Select "Create a new project → From CVS checkout"

@item
Create a new location. See the notes below for details on how to choose the
right protocol.

@item
Browse the @emph{modules} available. It will give you a list of the heads in the
repository. You will not be able to browse the tree from there. Only the
heads.

@item
Pick @samp{HEAD} when it asks what branch/tag to check out. Untick the "launch
commit wizard" to avoid committing the .project file.
@end enumerate

Protocol notes: If you are using anonymous access via pserver, just select
that.  Those using SSH access should choose the @emph{ext} protocol, and
configure @emph{ext} access on the Preferences→Team→CVS→ExtConnection
pane. Set CVS_SERVER to "@samp{git cvsserver}". Note that password support is not
good when using @emph{ext}, you will definitely want to have SSH keys setup.

Alternatively, you can just use the non-standard extssh protocol that
Eclipse offer. In that case CVS_SERVER is ignored, and you will have to
replace the cvs utility on the server with @emph{git-cvsserver} or manipulate
your @samp{.bashrc} so that calling @emph{cvs} effectively calls @emph{git-cvsserver}.

@noindent

@chapheading CLIENTS KNOWN TO WORK

@itemize 

@item
CVS 1.12.9 on Debian

@item
CVS 1.11.17 on MacOSX (from Fink package)

@item
Eclipse 3.0, 3.1.2 on MacOSX (see Eclipse CVS Client Notes)

@item
TortoiseCVS
@end itemize

@noindent

@chapheading OPERATIONS SUPPORTED

All the operations required for normal use are supported, including
checkout, diff, status, update, log, add, remove, commit.

Most CVS command arguments that read CVS tags or revision numbers (typically
-r) work, and also support any git refspec (tag, branch, commit ID, etc).
However, CVS revision numbers for non-default branches are not well
emulated, and cvs log does not show tags or branches at all.
(Non-main-branch CVS revision numbers superficially resemble CVS revision
numbers, but they actually encode a git commit ID directly, rather than
represent the number of revisions since the branch point.)

Note that there are two ways to checkout a particular branch.  As described
elsewhere on this page, the "module" parameter of cvs checkout is
interpreted as a branch name, and it becomes the main branch.  It remains
the main branch for a given sandbox even if you temporarily make another
branch sticky with cvs update -r.  Alternatively, the -r argument can
indicate some other branch to actually checkout, even though the module is
still the "main" branch.  Tradeoffs (as currently implemented): Each new
"module" creates a new database on disk with a history for the given module,
and after the database is created, operations against that main branch are
fast.  Or alternatively, -r doesn’t take any extra disk space, but may be
significantly slower for many operations, like cvs update.

If you want to refer to a git refspec that has characters that are not
allowed by CVS, you have two options.  First, it may just work to supply the
git refspec directly to the appropriate CVS -r argument; some CVS clients
don’t seem to do much sanity checking of the argument.  Second, if that
fails, you can use a special character escape mechanism that only uses
characters that are valid in CVS tags.  A sequence of 4 or 5 characters of
the form (underscore (@samp{"_"}), dash (@samp{"-"}), one or two characters, and dash
(@samp{"-"})) can encode various characters based on the one or two letters:
@samp{"s"} for slash (@samp{"/"}), @samp{"p"} for period (@samp{"."}), @samp{"u"} for underscore
(@samp{"_"}), or two hexadecimal digits for any byte value at all (typically an
ASCII number, or perhaps a part of a UTF-8 encoded character).

Legacy monitoring operations are not supported (edit, watch and related).
Exports and tagging (tags and branches) are not supported at this stage.

@noindent

@heading CRLF Line Ending Conversions

By default the server leaves the @samp{-k} mode blank for all files, which causes
the CVS client to treat them as a text files, subject to end-of-line
conversion on some platforms.

You can make the server use the end-of-line conversion attributes to set the
@samp{-k} modes for files by setting the @samp{gitcvs.usecrlfattr} config variable.
See gitattributes(5) for more information about end-of-line
conversion.

Alternatively, if @samp{gitcvs.usecrlfattr} config is not enabled or the
attributes do not allow automatic detection for a filename, then the server
uses the @samp{gitcvs.allBinary} config for the default setting.  If
@samp{gitcvs.allBinary} is set, then file not otherwise specified will default to
@emph{-kb} mode. Otherwise the @samp{-k} mode is left blank. But if @samp{gitcvs.allBinary}
is set to "guess", then the correct @samp{-k} mode will be guessed based on the
contents of the file.

For best consistency with @emph{cvs}, it is probably best to override the
defaults by setting @samp{gitcvs.usecrlfattr} to true, and @samp{gitcvs.allBinary} to
"guess".

@noindent

@chapheading DEPENDENCIES

@emph{git-cvsserver} depends on DBD::SQLite.

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-daemon,,,Top
@chapheading Name

git-daemon — Gitリポジトリ用のほんまにシンプルなサーバー

@noindent

@chapheading Synopsis

@display
git daemon [--verbose] [--syslog] [--export-all]
             [--timeout=<n>] [--init-timeout=<n>] [--max-connections=<n>]
             [--strict-paths] [--base-path=<path>] [--base-path-relaxed]
             [--user-path | --user-path=<path>]
             [--interpolated-path=<pathtemplate>]
             [--reuseaddr] [--detach] [--pid-file=<file>]
             [--enable=<service>] [--disable=<service>]
             [--allow-override=<service>] [--forbid-override=<service>]
             [--access-hook=<path>] [--[no-]informative-errors]
             [--inetd |
              [--listen=<host_or_ipaddr>] [--port=<n>]
              [--user=<user> [--group=<group>]]]
             [--log-destination=(stderr|syslog|none)]
             [<directory>…]
@end display


@noindent

@chapheading DESCRIPTION

通常はポート「DEFAULT_GIT_PORT」(9418)でリッスンする非常に単純なTCP
Gitデーモン。サービスを要求する接続を待機し、有効になっている場合はそのサービスを提供します。

ディレクトリにマジックファイル "git-daemon-export-ok"
があることを確認し、この方法でエクスポートのマークが明示されていないGitディレクトリのエクスポートを拒否します(@samp{--export-all}
パラメーターが指定されていない場合)。 いくつかのディレクトリパスを @samp{git daemon}
の引数として渡すと、あなたは提供するモノをそれらで構成されるホワイトリストにさらに制限できます。

デフォルトでは、 @samp{upload-pack} サービスのみが有効になっており、 @emph{git fetch} や @emph{git pull} や @emph{git
clone} から呼び出される @emph{git fetch-pack} と @emph{git ls-remote} クライアントにサービスを提供します。

これは、読み取り専用の更新、つまりGitリポジトリからのプルに最適です。

@emph{git archive} を提供するための @samp{upload-archive} もあります。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--strict-paths} 
パスを正確に一致させ(つまり、実際のパスが "/foo/repo.git" または "/foo/repo/.git" の場合は "/foo/repo"
を許可しないでください)、そしてユーザー相対パスを許可しないでください。このオプションが有効で、かつ、ホワイトリストが指定されていない場合、 @samp{git
daemon} は起動を拒否します。

@item  @samp{--base-path=<path>} 
指定されたパスを基準にして、すべてのパス要求を再マップします。これは一種の "Git root" です。example.comで
@samp{--base-path=/srv/git} を伴って @samp{git daemon} を実行し、後で
@samp{git://example.com/hello.git} をプルしようと試みると、 @samp{git daemon} はパスを
@samp{/srv/git/hello.git} として解釈します。

@item  @samp{--base-path-relaxed} 
@samp{--base-path} が有効になっていて、リポジトリを探すのに失敗した場合、このオプションを使用すると、 @samp{git daemon}
はベースパスを前に付けずに探索を試みます。 これは、古いパスを許可したまま、 @samp{--base-path} 使用に切り替える場合に便利です。

@item  @samp{--interpolated-path=<pathtemplate>} 
仮想ホスティングをサポートするために、補完されたパステンプレートを使用して、代替パスを動的に構築できます。テンプレートは、クライアントから提供されたターゲットホスト名の
%H をサポートしますが、すべて小文字に変換されます。正規ホスト名の場合は %CH、サーバーのIPアドレスの場合は %IP、ポート番号の場合は
%P、名前付きリポジトリの絶対パスの場合は %D です。補完後、パスはディレクトリホワイトリストに対して検証されます。

@item  @samp{--export-all} 
@emph{git-daemon-export-ok} ファイルがない場合でも、Gitリポジトリのように見えるすべてのディレクトリ(@emph{objects} と
@emph{refs} サブディレクトリがある)からのプルを許可します。

@item  @samp{--inetd} 
サーバーをinetdサービスとして実行します。@samp{--syslog} の指定を含んでいます(@samp{--log-destination=}
でオーバーライドされる場合があります)。 @samp{--detach} 、 @samp{--port} 、 @samp{--listen} 、 @samp{--user} 、
@samp{--group} オプションとは互換性がありません。

@item  @samp{--listen=<host_or_ipaddr>} 
特定のIPアドレスまたはホスト名でリッスンします。IPアドレスは、IPv4アドレス、またはサポートされている場合はIPv6アドレスのいずれかになります。IPv6がサポートされていない場合、
@samp{--listen=hostname} もサポートされていないため、 @samp{--listen}
にはIPv4アドレスを指定する必要があります。このオプションは複数回与えることができます。 @samp{--inetd} オプションと互換性がありません。

@item  @samp{--port=<n>} 
代わりのポートでリッスンします。 @samp{--inetd} オプションと互換性がありません。

@item  @samp{--init-timeout=<n>} 
接続が確立されてからクライアント要求が受信されるまでのタイムアウト(秒単位)(基本的には即時である必要があるため、通常はかなり低い値)。

@item  @samp{--timeout=<n>} 
特定のクライアントサブリクエスト(client
sub-requests)のタイムアウト(秒単位)。これには、サーバーがサブリクエストを処理するのにかかる時間と、次のクライアントのリクエストを待つために費やされる時間が含まれます。

@item  @samp{--max-connections=<n>} 
同時クライアントの最大数。デフォルトは32です。制限しない場合はゼロに設定します。

@item  @samp{--syslog} 
@samp{--log-destination=syslog} の短縮形。

@item  @samp{--log-destination=<destination>} 
指定した宛先にログメッセージを送信します。 このオプションは @samp{--verbose}
を意味しないため、デフォルトではエラー状態のみがログに記録されることに注意してください。 <destination>
は以下のいずれかである必要があります:

@table @asis

@item  stderr 
標準エラーに書き込みます。 @samp{--detach} が指定されている場合、プロセスは実際の標準エラーから切断され、この宛先は実質的に @samp{none}
と同等になることに注意してください。

@item  syslog 
@samp{git-daemon} 識別子を使用してsyslogに書き込みます。

@item  none 
すべてのログを無効にします。
@end table

デフォルトの宛先は、 @samp{--inetd} または @samp{--detach} が指定されている場合、は @samp{syslog} であり、それ以外の場合は
@samp{stderr} です。

@item  @samp{--user-path} 
@itemx  @samp{--user-path=<path>} 
~user 表記をリクエストで使用できるようにします。パラメータなしで指定した場合、 git://host/~alice/foo
git：// host / ~ alice / fooへのリクエストは、ユーザー @samp{alice} のホームディレクトリにある @emph{foo}
リポジトリへのアクセスリクエストと見なされます。 @samp{--user-path=path} が指定されている場合、同じリクエストが、ユーザー @samp{alice}
のホームディレクトリにある @samp{path/foo} リポジトリにアクセスするリクエストと見なされます。

@item  @samp{--verbose} 
着信接続と要求されたファイルに関する詳細をログに記録します。

@item  @samp{--reuseaddr} 
リスニングソケットをバインドするときは SO_REUSEADDR を使用します。
これにより、古い接続がタイムアウトするのを待たずにサーバーを再起動できます。

@item  @samp{--detach} 
シェルからデタッチします。 @samp{--syslog} オプションの指定を含んでいます。

@item  @samp{--pid-file=<file>} 
プロセスIDを <file> に保存します。デーモンが @samp{--inetd} で実行されている場合は無視されます。

@item  @samp{--user=<user>} 
@itemx  @samp{--group=<group>} 
サービスループに入る前に、デーモンのuidとgidを変更します。 @samp{--group} なしで @samp{--user}
のみが指定された場合、ユーザーのプライマリグループIDが使用されます。オプションの値は @samp{getpwnam(3)} と @samp{getgrnam(3)}
に与えられ、数値IDはサポートされていません。

これらのオプションを指定すると、 @samp{--inetd} と一緒に使用するとエラーになります。 同じことを実現するには、必要に応じて、 @emph{git
daemon} を生成する前に、inetデーモンの機能を使用します。

ユーザーIDを切り替える多くのプログラムと同様に、デーモンは、(例えば、@samp{upload-pack} や`receive-pack` の)
gitプログラムを実行するときに @samp{$HOME} などの環境変数をリセットしません。このオプションを使用する場合は、デーモンを起動する前に、
@samp{HOME} を @samp{<user>} のホームディレクトリを指すように設定、およびエクスポートし、そのディレクトリ内のGit構成ファイルが
@samp{<user>} によって読み取り可能であることを確認してください。

@item  @samp{--enable=<service>} 
@itemx  @samp{--disable=<service>} 
デフォルトでサイト全体のサービスを 有効/無効
にします。サイト全体で無効にされたサービスは、オーバーライド可能とマークされていて、リポジトリが構成アイテムでサービスを有効にしている場合でも、リポジトリごとに有効にできることに注意してください。

@item  @samp{--allow-override=<service>} 
@itemx  @samp{--forbid-override=<service>} 
リポジトリごとの構成でサイト全体のデフォルトをオーバーライドすることを 許可/禁止
します。デフォルトでは、すべてのサービスがオーバーライドされる場合があります。

@item  @samp{--[no-]informative-errors} 
informative-errorsがオンになっている場合、git-daemonはより詳細なエラーをクライアントに報告し、「no such
repository」(そのようなリポジトリがない)と「repository not
exported」(リポジトリがエクスポートされていない)などの条件を区別します。これはクライアントにとってより便利ですが、エクスポートされていないリポジトリの存在に関する情報が漏洩する可能性があります。informative-errorsが有効になっていない場合、すべてのエラーは「access
denied」とクライアントに報告します。 デフォルトは @samp{--no-informative-errors} です。

@item  @samp{--access-hook=<path>} 
クライアントが接続するたびに、最初に、<path>
で指定された外部コマンドを実行します。コマンドライン引数として、サービス名("upload-pack"など)や、リポジトリへのパスや、ホスト名(%H)や、正規のホスト名(%CH)や、IPアドレス(%IP)や、TCPポート(%P)を、指定します。外部コマンドは、ゼロ以外のステータスで終了することによってサービスを拒否する(またはゼロ・ステータスで終了することによってサービスを許可する)ことを決定できます。また
$REMOTE_ADDR や @samp{$REMOTE_PORT}
環境変数を調べて、この決定を行うときにリクエスト側(requestor)ついて調べることもできます。

外部コマンドはオプションで、サービスを拒否したときにエラーメッセージとしてリクエスト側(requestor)に送信される1行を標準出力に書き込むことができます。

@item  <directory> 
許可するディレクトリを列挙するホワイトリストに追加するディレクトリ。 @samp{--strict-paths}
が指定されていない限り、これには指定のディレクトリのサブディレクトリも含まれます。
@end table

@noindent

@chapheading SERVICES

これらのサービスは、このコマンドのコマンドラインオプションを使用してグローバルに 有効/無効
にできます。よりきめ細かい制御が必要な場合(たとえば、デーモンがサービスを提供するいくつかの選択されたリポジトリでのみ @samp{git archive}
を実行できるようしたい時)、リポジトリごとの構成ファイルを使用して、それらを有効または無効にできます。

@table @asis

@item  upload-pack 
これは、 @samp{git fetch-pack} と @samp{git ls-remote}
クライアントにサービスを提供します。デフォルトで有効になっていますが、リポジトリでは @samp{daemon.uploadpack `構成アイテムを
`false} に設定することで無効にできます。

@item  upload-archive 
これは @samp{git archive --remote} を提供します。 デフォルトでは無効になっていますが、リポジトリでは、
@samp{daemon.uploadarch} 構成アイテムを @samp{true} に設定することで有効にできます。

@item  receive-pack 
これは @samp{git send-pack}
クライアントにサービスを提供し、匿名プッシュを可能にします。プロトコルに認証が「ない」ため、デフォルトでは無効になっています(つまり、参照の削除を含め、誰でもリポジトリに何でもプッシュできます)。これは、誰もが友好的であるクローズドLAN設定のみを対象としています。このサービスは、
@samp{daemon.receivepack} 構成アイテムを @samp{true} に設定することで有効にできます。
@end table

@noindent

@chapheading EXAMPLES

@table @asis

@item  ここでは /etc/services の下に構築するものと仮定します 
@example
$ grep 9418 /etc/services
git             9418/tcp                # Git Version Control System
@end example


@item  @emph{git daemon} as inetd server 
ホワイトリストに登録されたディレクトリのセット /pub/foo および /pub/bar
の下にあるリポジトリを処理するinetdサービスとして「git daemon」を設定するには、以下のようなエントリを /etc/inetd
にすべて1行で配置します:

@example
        git stream tcp nowait nobody  /usr/bin/git
                git daemon --inetd --verbose --export-all
                /pub/foo /pub/bar
@end example


@item  @emph{git daemon} as inetd server for virtual hosts 
異なる仮想ホスト @samp{www.example.com} と @samp{www.example.org} のリポジトリを処理するinetdサービスとして「git
daemon」を設定するには、以下のようなエントリをすべて１行で  @samp{/etc/inetd} に配置します:

@example
        git stream tcp nowait nobody /usr/bin/git
                git daemon --inetd --verbose --export-all
                --interpolated-path=/pub/%H%D
                /pub/www.example.org/software
                /pub/www.example.com/software
                /software
@end example


この例では、ルートレベルのディレクトリ @samp{/pub}
には、サポートされている各仮想ホスト名のサブディレクトリが含まれています。さらに、両方のホストは、リポジトリを単に
@samp{git://www.example.com/software/repo.git} として公開します。 1.4.0より前のクライアントの場合、
@samp{/software} から適切なデフォルトリポジトリへのシンボリックリンクも作成できます。

@item  @emph{git daemon} as regular daemon for virtual hosts 
IPアドレスに基づいて複数の仮想ホストのリポジトリを処理する通常の非inetdサービスとして「git
daemon」を設定するには、以下のようにデーモンを起動します:

@example
        git daemon --verbose --export-all
                --interpolated-path=/pub/%IP/%D
                /pub/192.168.1.200/software
                /pub/10.10.220.23/software
@end example


IPアドレスに基づいて複数の仮想ホストのリポジトリを処理する通常の非inetdサービスとして「git
daemon」を設定するには、以下のようにデーモンを起動します。

@item  selectively enable/disable services per repository 
リポジトリに対して @samp{git archive --remote} を有効にし、 @samp{git fetch}
を無効にするには、リポジトリの構成ファイルに以下のものを含めます（つまり、「HEAD」、「refs」、および「objects」の横にあるファイル「config」)。

@example
        [daemon]
                uploadpack = false
                uploadarch = true
@end example

@end table

@noindent

@chapheading ENVIRONMENT

「git daemon」は、IPアドレスが使用可能な場合、REMOTE_ADDRをそれに接続したクライアントのIPアドレスに設定します。
REMOTE_ADDRは、サービスの実行時に呼び出されるフックの環境で使用できます。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-describe,,,Top
@chapheading Name

git-describe — Give an object a human readable name based on an available ref

@noindent

@chapheading Synopsis

@display
git describe [--all] [--tags] [--contains] [--abbrev=<n>] [<commit-ish>…]
git describe [--all] [--tags] [--contains] [--abbrev=<n>] --dirty[=<mark>]
git describe <blob>
@end display


@noindent

@chapheading DESCRIPTION

The command finds the most recent tag that is reachable from a commit.  If
the tag points to the commit, then only the tag is shown.  Otherwise, it
suffixes the tag name with the number of additional commits on top of the
tagged object and the abbreviated object name of the most recent commit. The
result is a "human-readable" object name which can also be used to identify
the commit to other git commands.

By default (without --all or --tags) @samp{git describe} only shows annotated
tags.  For more information about creating annotated tags see the -a and -s
options to git-tag(1).

If the given object refers to a blob, it will be described as
@samp{<commit-ish>:<path>}, such that the blob can be found at @samp{<path>} in the
@samp{<commit-ish>}, which itself describes the first commit in which this blob
occurs in a reverse revision walk from HEAD.

@noindent

@chapheading OPTIONS

@table @asis

@item  <commit-ish>… 
Commit-ish object names to describe.  Defaults to HEAD if omitted.

@item  @samp{--dirty[=<mark>]} 
@itemx  @samp{--broken[=<mark>]} 
Describe the state of the working tree.  When the working tree matches HEAD,
the output is the same as "git describe HEAD".  If the working tree has
local modification "-dirty" is appended to it.  If a repository is corrupt
and Git cannot determine if there is local modification, Git will error out,
unless ‘--broken’ is given, which appends the suffix "-broken" instead.

@item  @samp{--all} 
Instead of using only the annotated tags, use any ref found in @samp{refs/}
namespace.  This option enables matching any known branch, remote-tracking
branch, or lightweight tag.

@item  @samp{--tags} 
Instead of using only the annotated tags, use any tag found in @samp{refs/tags}
namespace.  This option enables matching a lightweight (non-annotated) tag.

@item  @samp{--contains} 
Instead of finding the tag that predates the commit, find the tag that comes
after the commit, and thus contains it.  Automatically implies --tags.

@item  @samp{--abbrev=<n>} 
Instead of using the default number of hexadecimal digits (which will vary
according to the number of objects in the repository with a default of 7) of
the abbreviated object name, use <n> digits, or as many digits as needed to
form a unique object name. An <n> of 0 will suppress long format, only
showing the closest tag.

@item  @samp{--candidates=<n>} 
Instead of considering only the 10 most recent tags as candidates to
describe the input commit-ish consider up to <n> candidates.  Increasing <n>
above 10 will take slightly longer but may produce a more accurate result.
An <n> of 0 will cause only exact matches to be output.

@item  @samp{--exact-match} 
Only output exact matches (a tag directly references the supplied commit).
This is a synonym for --candidates=0.

@item  @samp{--debug} 
Verbosely display information about the searching strategy being employed to
standard error.  The tag name will still be printed to standard out.

@item  @samp{--long} 
Always output the long format (the tag, the number of commits and the
abbreviated commit name) even when it matches a tag.  This is useful when
you want to see parts of the commit object name in "describe" output, even
when the commit in question happens to be a tagged version.  Instead of just
emitting the tag name, it will describe such a commit as v1.2-0-gdeadbee
(0th commit since tag v1.2 that points at object deadbee….).

@item  @samp{--match <pattern>} 
Only consider tags matching the given @samp{glob(7)} pattern, excluding the
"refs/tags/" prefix. If used with @samp{--all}, it also considers local branches
and remote-tracking references matching the pattern, excluding respectively
"refs/heads/" and "refs/remotes/" prefix; references of other types are
never considered. If given multiple times, a list of patterns will be
accumulated, and tags matching any of the patterns will be considered.  Use
@samp{--no-match} to clear and reset the list of patterns.

@item  @samp{--exclude <pattern>} 
Do not consider tags matching the given @samp{glob(7)} pattern, excluding the
"refs/tags/" prefix. If used with @samp{--all}, it also does not consider local
branches and remote-tracking references matching the pattern, excluding
respectively "refs/heads/" and "refs/remotes/" prefix; references of other
types are never considered. If given multiple times, a list of patterns will
be accumulated and tags matching any of the patterns will be excluded. When
combined with --match a tag will be considered when it matches at least one
--match pattern and does not match any of the --exclude patterns. Use
@samp{--no-exclude} to clear and reset the list of patterns.

@item  @samp{--always} 
Show uniquely abbreviated commit object as fallback.

@item  @samp{--first-parent} 
Follow only the first parent commit upon seeing a merge commit.  This is
useful when you wish to not match tags on branches merged in the history of
the target commit.
@end table

@noindent

@chapheading EXAMPLES

With something like git.git current tree, I get:

@example
[torvalds@@g5 git]$ git describe parent
v1.0.4-14-g2414721
@end example

i.e. the current head of my "parent" branch is based on v1.0.4, but since it
has a few commits on top of that, describe has added the number of
additional commits ("14") and an abbreviated object name for the commit
itself ("2414721")  at the end.

The number of additional commits is the number of commits which would be
displayed by "git log v1.0.4..parent".  The hash suffix is "-g" + an
unambigous abbreviation for the tip commit of parent (which was
@samp{2414721b194453f058079d897d13c4e377f92dc6}). The length of the abbreviation
scales as the repository grows, using the approximate number of objects in
the repository and a bit of math around the birthday paradox, and defaults
to a minimum of 7.  The "g" prefix stands for "git" and is used to allow
describing the version of a software depending on the SCM the software is
managed with. This is useful in an environment where people may use
different SCMs.

Doing a @emph{git describe} on a tag-name will just show the tag name:

@example
[torvalds@@g5 git]$ git describe v1.0.4
v1.0.4
@end example

With --all, the command can use branch heads as references, so the output
shows the reference path as well:

@example
[torvalds@@g5 git]$ git describe --all --abbrev=4 v1.0.5^2
tags/v1.0.0-21-g975b
@end example

@example
[torvalds@@g5 git]$ git describe --all --abbrev=4 HEAD^
heads/lt/describe-7-g975b
@end example

With --abbrev set to 0, the command can be used to find the closest tagname
without any suffix:

@example
[torvalds@@g5 git]$ git describe --abbrev=0 v1.0.5^2
tags/v1.0.0
@end example

Note that the suffix you get if you type these commands today may be longer
than what Linus saw above when he ran these commands, as your Git repository
may have new commits whose object names begin with 975b that did not exist
back then, and "-g975b" suffix alone may not be sufficient to disambiguate
these commits.

@noindent

@chapheading SEARCH STRATEGY

For each commit-ish supplied, @emph{git describe} will first look for a tag which
tags exactly that commit.  Annotated tags will always be preferred over
lightweight tags, and tags with newer dates will always be preferred over
tags with older dates.  If an exact match is found, its name will be output
and searching will stop.

If an exact match was not found, @emph{git describe} will walk back through the
commit history to locate an ancestor commit which has been tagged.  The
ancestor’s tag will be output along with an abbreviation of the input
commit-ish’s SHA-1. If @samp{--first-parent} was specified then the walk will
only consider the first parent of each commit.

If multiple tags were found during the walk then the tag which has the
fewest commits different from the input commit-ish will be selected and
output.  Here fewest commits different is defined as the number of commits
which would be shown by @samp{git log tag..input} will be the smallest number of
commits possible.

@noindent

@chapheading BUGS

Tree objects as well as tag objects not pointing at commits, cannot be
described.  When describing blobs, the lightweight tags pointing at blobs
are ignored, but the blob is still described as <committ-ish>:<path> despite
the lightweight tag being favorable.

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-diff-files,,,Top
@chapheading Name

git-diff-files — 作業ツリーとインデックス内のファイルを比較します

@noindent

@chapheading Synopsis

@display
git diff-files [-q] [-0|-1|-2|-3|-c|--cc] [<common diff options>] [<path>…]
@end display


@noindent

@chapheading DESCRIPTION

作業ツリーとインデックス内のファイルを比較します。パスが指定されている場合、それらの名前付きパスのみを比較します。それ以外の場合は、インデックス内のすべてのエントリが比較されます。出力形式は、
@emph{git diff-index} や @emph{git diff-tree} の場合と同じです。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-p} 
@itemx  @samp{-u} 
@itemx  @samp{--patch} 
パッチを生成します(generating patches に関するセクションを参照)。

@item  @samp{-s} 
@itemx  @samp{--no-patch} 
diff出力を抑制します。デフォルトでパッチを表示する @samp{git show} のようなコマンド、または @samp{--patch}
の効果をキャンセルする場合に便利です。

@item  @samp{-U<n>} 
@itemx  @samp{--unified=<n>} 
通常の3行ではなく、<n> 行の内容でdiffを生成します。
@samp{--patch} の機能を含んでいます。

@item  @samp{--output=<file>} 
stdout ではなく指定のファイルに出力します。

@item  @samp{--output-indicator-new=<char>} 
@itemx  @samp{--output-indicator-old=<char>} 
@itemx  @samp{--output-indicator-context=<char>} 
生成されたパッチの新しい行、古い行、またはコンテキスト行を示すために使用される文字を指定します。 通常、それらはそれぞれ @emph{+} 、 @emph{-} 、 ' '
です。

@item  @samp{--raw} 
生形式(raw format)でdiffを生成します。
これがデフォルトです。

@item  @samp{--patch-with-raw} 
@samp{-p --raw} の同義語。

@item  @samp{--indent-heuristic} 
diffハンクの境界をずらす(shift)ヒューリスティックを有効にして、パッチを読みやすくします。 これがデフォルトです。

@item  @samp{--no-indent-heuristic} 
インデントヒューリスティック(indent heuristic)を無効にします。

@item  @samp{--minimal} 
より多くの時間を費やして、可能な限り最小のdiffが生成されるようにします。

@item  @samp{--patience} 
"patience diff" アルゴリズムを使用してdiffを生成します。

@item  @samp{--histogram} 
"histogram diff" アルゴリズムを使用してdiffを生成します。

@item  @samp{--anchored=<text>} 
"anchored diff" アルゴリズムを使用してdiffを生成します。

このオプションは複数回指定できます。

行がソースと宛先の両方に存在し、1回だけ存在し、このテキストで始まる場合、このアルゴリズムは、その行が出力に削除または追加として表示されないようにします。内部で
"patience diff" アルゴリズムを使用します。

@item  @samp{--diff-algorithm=@{patience|minimal|histogram|myers@}} 
diffアルゴリズムを選択します。その派生(variants)は以下のとおりです:

@table @asis

@item  @samp{default}, @samp{myers} 
基本的な貪欲な差分アルゴリズム(greedy diff algorithm)。現在、これがデフォルトです。

@item  @samp{minimal} 
より多くの時間を費やして、可能な限り最小のdiffが生成されるようにします。

@item  @samp{patience} 
パッチを生成する時に "patience diff" アルゴリズムを使います。

@item  @samp{histogram} 
このアルゴリズムは、忍耐アルゴリズム(patience algorithm)を拡張して、「発生率の低い共通要素をサポート」(support
low-occurrence common elements)します。
@end table

たとえば、 あなたが @samp{diff.algorithm}
変数をデフォルト以外の値に設定した上で、それでもデフォルト値を使用する場合は、@samp{--diff-algorithm=default}
オプションを使用する必要があります。

@item  @samp{--stat[=<width>[,<name-width>[,<count>]]]} 
diffstatを生成します。
デフォルトでは、必要なだけのスペースがファイル名部分に使用され、残りはグラフ部分に使用されます。最大幅はデフォルトで端末幅、または端末に接続されていない場合は80桁であり、
@samp{<width>} で上書きできます。ファイル名部分の幅は、コンマの後に別の幅 @samp{<name-width>}
を指定することで制限できます。グラフ部分の幅は、 @samp{--stat-graph-width=<width>}
(統計グラフを生成するすべてのコマンドに影響します)を使用するか、 @samp{diff.statGraphWidth=<width>} ( @samp{git
format-patch} に影響しません)を設定することによって制限できます。3番目のパラメータ @samp{<count>}
を指定することにより、出力を最初の @samp{<count>} 行に制限し、それに @samp{...} が続く形にできます。

これらのパラメータは、 @samp{--stat-width=<width>} と @samp{--stat-name-width=<name-width>} と
@samp{--stat-count=<count>} を使用して個別に設定することもできます。

@item  @samp{--compact-summary} 
ファイルの作成や削除( "new" または "gone" 。オプションでシンボリックリンクの場合は "+l"
)、diffstatのモード変更(実行可能ビットを追加または削除する場合は、それぞれ "+x" または "-x"
)など、拡張ヘッダー情報の要約を出力します。情報はファイル名部分とグラフ部分の間に置かれます。本機能は @samp{--stat} の機能を含んでいます。

@item  @samp{--numstat} 
@samp{--stat`に似ていますが、プログラムで処理しやすい(machine
friendly)ように、追加および削除された行数を10進表記とパス名で省略形なしで表示します。バイナリファイルの場合、 `0 0} の代わりに2つの
@samp{-} を出力します。

@item  @samp{--shortstat} 
変更されたファイルの総数と、追加および削除された行の数を含む @samp{--stat} 形式の最後の行のみを出力します。

@item  @samp{-X[<param1,param2,...>]} 
@itemx  @samp{--dirstat[=<param1,param2,...>]} 
各サブディレクトリの相対的な変更量の分布を出力します。 @samp{--dirstat}
の動作は、パラメータのコンマ区切りリストを渡すことでカスタマイズできます。デフォルトは、 @samp{diff.dirstat}
構成変数によって制御されます(git-config(1) 参照)。以下のパラメータを使用できます:

@table @asis

@item  @samp{changes} 
ソースから削除された、または宛先に追加された行をカウントして、dirstat数を計算します。これは、ファイル内の純粋なコード移動の量を無視します。つまり、ファイル内の行の再配置は、他の変更ほどカウントされません。これは、パラメーターが指定されていない場合のデフォルトの動作です。

@item  @samp{lines} 
通常の行ベースのdiff分析を実行し、削除/追加された行数を合計して、dirstat数を計算します。
(バイナリファイルの場合、バイナリファイルには行の概念がないため、代わりに64バイトのチャンクをカウントします)。 これは @samp{changes}
動作よりも高価な @samp{--dirstat} 動作ですが、他の変更と同じようにファイル内の再配置された行をカウントします。結果の出力は、他の
@samp{--*stat} オプションから得られるものと一致しています。

@item  @samp{files} 
変更されたファイルの数を数えて、dirstat数を計算します。変更された各ファイルは、dirstat分析で等しくカウントされます。これは、ファイルの内容をまったく調べる必要がないため、計算コストが最もかからない
@samp{--dirstat} の動作です。

@item  @samp{cumulative} 
親ディレクトリの子ディレクトリの変更も同様にカウントします。 @samp{cumulative}(累積的)
を使用する場合、報告されるパーセンテージの合計が100%を超える場合があることに注意してください。デフォルトの(非累積的な)動作は、@samp{noncumulative}
パラメーターで指定できます。

@item  <limit> 
整数パラメーターは、カットオフパーセント(デフォルトでは3%)を指定します。指定の割合より少ないディレクトリは、出力に表示されません。
@end table

例: 変更されたファイルの総数の10%未満のディレクトリを無視し、親ディレクトリに子ディレクトリの数を累積しながら、変更されたファイルをカウント:
@samp{--dirstat=files,10,cumulative}

@item  @samp{--cumulative} 
@samp{--dirstat=cumulative} と同義語

@item  @samp{--dirstat-by-file[=<param1,param2>...]} 
@samp{--dirstat=files,param1,param2...} と同義語

@item  @samp{--summary} 
作成、名前変更、モード変更などの拡張ヘッダー情報の短い要約(condensed summary)を出力します。

@item  @samp{--patch-with-stat} 
@samp{-p --stat} と同義語。

@item  @samp{-z} 
@samp{--raw} または @samp{--numstat} または @samp{--name-only} または @samp{--name-status} が指定されている場合は
パス名を変更せず、出力フィールドターミネータとしてNULLを使用してください。

このオプションがないと、構成変数 @samp{core.quotePath} で説明されているように、 通常の文字以外(unusual
characters)を含むパス名が引用符で囲まれます(git-config(1) 参照)。

@item  @samp{--name-only} 
変更されたファイルの名前のみを表示します。 多くの場合、ファイル名はUTF-8でエンコードされます。 詳細については、
git-log(1) のマニュアルページにあるエンコーディングに関する議論(the discussion about
encoding)を参照してください。

@item  @samp{--name-status} 
変更されたファイルの名前とステータスのみを表示します。ステータス文字の意味については、 @samp{--diff-filter}
オプションの説明を参照してください。 @samp{--name-only} と同じように、ファイル名はしばしばUTF-8でエンコードされます。

@item  @samp{--submodule[=<format>]} 
サブモジュールの違いをどのように表示するかを指定します。 @samp{--submodule=short} を指定する場合、 @emph{short}
形式が使用されます。この形式は、範囲の最初と最後にコミットの名前を表示するだけです。 @samp{--submodule} または
@samp{--submodule=log} が指定されている場合、 @emph{log} 形式が使用されます。この形式では、
git-submodule(1) @samp{summary} のように範囲内のコミットが一覧表示されます。 @samp{--submodule=diff}
が指定されている場合、 @emph{diff}
形式が使用されます。この形式は、コミット範囲間のサブモジュールの内容の変更のインラインdiffを示します。configオプションが設定されていない場合、デフォルトは
@samp{diff.submodule} または @emph{short} 形式です。

@item  @samp{--color[=<when>]} 
色付きのdiffを表示します。 @samp{--color} (つまり、 @emph{=<when>} ) は @samp{--color=always} と同じです。
@emph{<when>} は、 @samp{always} または @samp{never} または @samp{auto} のいずれかになります。

@item  @samp{--no-color} 
カラーdiffをオフにします。
@samp{--color=never} と同じです。

@item  @samp{--color-moved[=<mode>]} 
ソースコードの移動した行を別の色にします。
<mode>は、オプションが指定されていない場合はデフォルトで @emph{no} になり、
モードが指定されていないオプションが指定されている場合は @emph{zebra} になります。
モードは以下のいずれかでなければなりません:

@table @asis

@item  no 
移動行をハイライトしません。

@item  default 
@samp{zebra} の同義語です。これは、将来、より賢明なモードに変更される可能性があります。

@item  plain 
ある場所で追加され、別の場所で削除された行は、 @emph{color.diff.newMoved} で色付けされます。 同様に、
@emph{color.diff.oldMoved}
は、差分の別の場所に追加された削除された行に使用されます。このモードは移動された行をピックアップしますが、コードのブロックが順列なしで移動されたかどうかを判断することはレビューではあまり役に立ちません。

@item  blocks 
少なくとも20文字の英数字の移動テキストのブロックが貪欲に検出されます。検出されたブロックは、 @emph{color.diff.@{old,new@}Moved}
色のいずれかを使用して色付けされます。隣接するブロックを区別することはできません。

@item  zebra 
移動されたテキストのブロックは、 @emph{blocks} モードの場合と同様に検出されます。 ブロックは、
@emph{color.diff.@{old,new@}Moved} 色または @emph{color.diff.@{old,new@}MovedAlternative}
色のいずれかを使用して色付けされます。2つの色の間の変化は、新しいブロックが検出されたことを示します。

@item  dimmed-zebra 
@emph{zebra}
に似ていますが、移動されたコードの重要でない部分の追加の調光(dimmed)が実行されます。隣接する2つのブロックの境界線は興味深いと見なされ、残りは興味深いものではありません。
@samp{dimmed_zebra} は非推奨の同義語です。
@end table

@item  @samp{--no-color-moved} 
移動検出をオフにします。 これは、構成設定を上書きするために使用できます。 @samp{--color-moved=no} と同じです。

@item  @samp{--color-moved-ws=<modes>} 
これは、 @samp{--color-moved} の移動検出を実行するときに空白を無視する方法を設定します。
これらのモードは、コンマ区切りのリストとして指定できます:

@table @asis

@item  no 
移動行検出を実行するときに、空白(whitespace)を無視しない。

@item  ignore-space-at-eol 
行末(EOL)での空白(whitespace)の変更を無視します。

@item  ignore-space-change 
空白(whitespace)の数の変更は無視してください。これは、行末の空白(whitespace)を無視し、1つ以上の空白文字(whitespace
characters)の他のすべてのシーケンスを同等と見なします。

@item  ignore-all-space 
行を比較するときは空白(whitespace)を無視します。これにより、一方の行に空白があり、もう一方の行に空白がない場合でも、違いは無視されます。

@item  allow-indentation-change 
最初に移動検出で空白(whitespace)を無視し、空白(whitespace)の変更が行ごとに同じである場合にのみ、移動されたコードブロックをブロックにグループ化します。
これは他のモードと互換性がありません。
@end table

@item  @samp{--no-color-moved-ws} 
移動検出を実行するときは、空白(whitespace)を無視しないでください。これは、構成設定を上書きするために使用できます。
@samp{--color-moved-ws=no} と同じです。

@item  @samp{--word-diff[=<mode>]} 
<mode> を使用して変更された単語を区切ることにより、単語のdiffを表示します。デフォルトでは、単語は空白で区切られます。 以下の
@samp{--word-diff-regex} を参照してください。 <mode> のデフォルトは 'plain’です。 <mode>
は以下のいずれかである必要があります:

@table @asis

@item  color 
変更された単語(word)を色のみを使用して強調表示します。 @samp{--color} を意味します。

@item  plain 
単語を @samp{[-removed-]} および @samp{@{+added+@}} として表示します。
区切り文字が入力に表示されている場合、区切り文字をエスケープしようとしないため、出力があいまいになる可能性があります。

@item  porcelain 
スクリプトの使用を目的とした特別な行ベースの形式を使用します。追加/削除/無変更については、通常の統一されたdiff形式で印刷され、行の先頭の
@samp{+}/@samp{-}/` ` 文字で始まり、行の終わりまで続きます。入力の改行は、それ自体の行のチルダ @samp{~} で表されます。

@item  none 
単語(word)のdiffを再度無効にします。
@end table

注意: 最初のモードの名前にもかかわらず、有効になっている場合、すべてのモードで変更された部分を強調するために色が使用されることに注意してください。

@item  @samp{--word-diff-regex=<regex>} 
空白以外を単語と見なす代わりに、 <regex> を使用して単語が何であるかを決定します。また、すでに有効になっていない限り、この機能は
@samp{--word-diff} の機能を含んでいます。

<regex> の重複しないマッチはすべて、単語と見なされます。これらのマッチの間のすべては空白と見なされ、違いを見つけるためとしては無視されます！
正規表現に @samp{|[^[:space:]]}
を追加して、空白以外のすべての文字とマッチすることを確認することをお勧めします。改行を含むマッチは、改行で黙って切り捨てられます！

たとえば、 @samp{--word-diff-regex=.} は各文字を単語として扱い、それに応じて文字ごとの違いを表示します。

正規表現は、diffドライバーまたは構成オプション(configuration option)を介して設定することもできます。
gitattributes(5) または git-config(1)
を参照してください。これを指定すると、diffドライバーまたは構成設定(configuration
settings)が明示的にオーバーライドされます。diffドライバーは構成設定を上書きします。

@item  @samp{--color-words[=<regex>]} 
@samp{--word-diff=color} に @samp{--word-diff-regex=<regex>}
を加えたものに相当します(正規表現が指定されている場合)。

@item  @samp{--no-renames} 
構成ファイルにデフォルトで指定されている場合でも、名前変更の検出をオフにします。

@item  @samp{--[no-]rename-empty} 
名前変更ソースとして空のブロブを使用するかどうか。

@item  @samp{--check} 
変更によって競合マーカーまたは空白エラーが発生した場合に警告します。空白エラーと見なされるものは、 @samp{core.whitespace}
構成によって制御されます。
デフォルトでは、末尾の空白(空白のみで構成される行を含む)と、行の最初のインデント内で直後にタブ文字が続くスペース文字は、空白エラーと見なされます。問題が見つかった場合は、ゼロ以外のステータスで終了します。なお、
--exit-code とは互換性がありません。

@item  @samp{--ws-error-highlight=<kind>} 
diffの @samp{context} または @samp{old} または @samp{new} 行の空白エラーを強調表示します。複数の値はコンマで区切られ、 @samp{none}
は前の値をリセットし、 @samp{default} はリストを @samp{new} にリセットし、 @samp{all} は old、new、context
の省略形です。このオプションが指定されておらず、構成変数 @samp{diff.wsErrorHighlight} が設定されていない場合、 @samp{new}
行の空白エラーのみが強調表示されます。空白エラーは @samp{color.diff.whitespace} で色分けされています。

@item  @samp{--full-index} 
パッチ形式の出力を生成するときは、最初の一握りの文字(first handful of
characters)の代わりに、「インデックス」行にイメージ前およびイメージ後の完全ブロブオブジェクト名を表示します。

@item  @samp{--binary} 
@samp{--full-index} に加えて、 @samp{git-apply} で適用できるバイナリ差分を出力します。
@samp{--patch} の機能を含んでいます。

@item  @samp{--abbrev[=<n>]} 
完全な40バイトの16進オブジェクト名をdiff-raw形式の出力とdiff-treeヘッダー行に表示する代わりに、オブジェクトを一意に参照する、少なくとも
@emph{<n>} 桁の16進数の長さの最短のプレフィックスを表示します。diffパッチ出力形式では、 @samp{--full-index} が優先されます。つまり、
@samp{--full-index} が指定されている場合、 @samp{--abbrev} に関係なく、完全なブロブ名が表示されます。デフォルト以外の桁数は、
@samp{--abbrev=<n>} で指定できます。

@item  @samp{-B[<n>][/<m>]} 
@itemx  @samp{--break-rewrites[=[<n>][/<m>]]} 
完全な書き換えの変更を削除と作成のペアに分割します。これには以下の2つの目的があります:

これは、ファイルの完全な書き換えに相当する変更が、コンテキストとしてテキストで一致する非常に少数の行と混合された一連の削除と挿入としてではなく、古いものすべての単一の削除とそれに続く
すべての新しいものを1回挿入し、数値 @samp{m} が -B オプションのこの側面を制御します(デフォルトは60%)。 @samp{-B/70%}
は、Gitがそれを完全な書き換えと見なすために、元の30%未満が結果に残る必要があることを指定します(つまり、結果のパッチは、コンテキスト行と混合された一連の削除と挿入になります)。

-M と一緒に使用すると、完全に書き換えられたファイルも名前変更のソースと見なされ(通常、 -M
は、消えたファイルのみを名前変更のソースと見なします)、数 @samp{n} が -Bオプションのこの側面を制御します(デフォルトは50%)。 @samp{-B20%}
は、ファイルのサイズの20%以上と比較して、追加および削除を伴う変更が、別のファイルへの名前変更の可能なソースとして取得される資格があることを指定します。

@item  @samp{-M[<n>]} 
@itemx  @samp{--find-renames[=<n>]} 
名前の変更(renames)を検知する。
@samp{n} が指定されている場合、それは類似性インデックスのしきい値です
(つまり、ファイルのサイズと比較した追加/削除の量)。
たとえば、 @samp{-M90%} は、ファイルの90%以上が変更されていない場合、
Gitが削除/追加のペアを名前変更と見なす必要があることを意味します。
@samp{%} 記号がない場合、数値は小数として読み取られ、その前に小数点が付きます。
つまり、 @samp{-M5} は0.5になるため、@samp{-M50%} と同じになります。
同様に、 @samp{-M05} は @samp{-M5%} と同じです。
検出を正確な名前変更に制限するには、 @samp{-M100%} を使用します。
デフォルトの類似性インデックスは50%です。

@item  @samp{-C[<n>]} 
@itemx  @samp{--find-copies[=<n>]} 
名前と同様コピーを検出します。 @samp{--find-copies-harder} @samp{も参照してください。 `n} を指定すると、 @samp{-M<n>}
と同じ意味になります。

@item  @samp{--find-copies-harder} 
パフォーマンス上の理由から、デフォルトでは、 @samp{-C}
オプションは、コピーの元のファイルが同じ変更組(changeset)で変更された場合にのみコピーを検索します。このフラグにより、コマンドは変更されていないファイルをコピー元の候補として検査します。これは大規模なプロジェクトでは非常にコストのかかる操作であるため、注意して使用してください。
複数の @samp{-C} オプションを指定しても同じ効果があります。

@item  @samp{-D} 
@itemx  @samp{--irreversible-delete} 
削除するプレイメージ(preimage)を省略します。つまり、ヘッダーのみを出力し、プレイメージと @samp{/dev/null}
の差分は出力しません。結果のパッチは、 @samp{patch} または @samp{git apply}
で適用されることを意図していません。これは、変更後にテキストを確認することに集中したい人のためだけのものです。さらに、出力には明らかに、そのようなパッチを手動でも逆に適用するのに十分な情報が不足しているため、オプションの名前が付けられています。

@samp{-B} と併用する場合は、削除/作成ペアの削除部分のプリイメージ(preimage)も省略してください。

@item  @samp{-l<num>} 
@samp{-M} および @samp{-C}
オプションには、名前変更/コピーのサブセットを安価に検出できるいくつかの準備手順が含まれ、その後に、残りのすべてのペアになっていない宛先をすべての関連ソースと比較する徹底的なフォールバック部分が続きます。(名前の変更の場合、残りのペアになっていないソースのみが関係します。コピーの場合、すべての元のソースが関係します)。Nのソースと宛先の場合、この徹底的なチェックのコストは
O(N^2)
です。このオプションは、関係するソース/宛先ファイルの数が指定された数を超えた場合に、名前変更/コピー検出の完全な部分が実行されないようにします。デフォルトは
diff.renameLimit です。 値0は無制限として扱われることに注意してください。

@item  @samp{--diff-filter=[(A|C|D|M|R|T|U|X|B)...[*]]} 
追加(Add)・コピー(Copy)・削除(Delete)・変更(Modify)・名前変更(Rename)されたファイル、タイプが変更されたファイル(T)、マージされていないファイル(U)、不明なファイル(X)、またはペアリングが壊れているファイル(B)のみを選択します。フィルタ文字(無しも含む)の任意の組み合わせを使用できます。
組み合わせに @samp{*} (全てまたは無し)が追加されると、比較で他の基準に一致するファイルがある場合、すべてのパスが選択されます。
他の基準に一致するファイルがない場合、何も選択されません。

また、逆に、除外したい時はこれらの各大文字指定を小文字にして指定します。例えば @samp{--diff-filter=ad}
は、追加および削除されたパスを除外します。

注意:すべてのdiffがすべてのタイプを特徴とするわけではないことに注意してください。
たとえば、インデックスから作業ツリーへのdiffにエントリを追加することはできません(diffに含まれるパスのセットは、インデックスの内容によって制限されるため)。
同様に、これらのタイプの検出が無効になっている場合、コピーおよび名前変更されたエントリは表示されません。

@item  @samp{-S<string>} 
ファイル内の指定の文字列(つまり、 addition 、deletion)の出現回数の差分を調べます。スクリプターが使用することを目的としています。

(構造体など)コードの正確なブロックを探していて、そのブロックが最初に作成されてからの履歴を知りたい場合に便利です。この機能を繰り返し使用して、プリイメージ(preimage)内の興味深いブロックを
@samp{-S} にフィードバックし、そしてあなたはそれをブロックの最初のバージョンを取得するまで続けます。

バイナリファイルも検索されます。

@item  @samp{-G<regex>} 
パッチテキストに <regex> にマッチする 追加/削除 された行が含まれている差分を探します。

@samp{-S<regex> --pickaxe-regex} と @samp{-G<regex>}
の違いを説明するために、同じファイル内で以下のdiffを使用してコミットすることを検討してください:

@example
+    return frotz(nitfol, two->ptr, 1, 0);
...
-    hit = frotz(nitfol, mf2.ptr, 1, 0);
@end example


@samp{git log -G"frotz\(nitfol"} はこのコミットを表示しますが、 @samp{git log -S"frotz\(nitfol"
--pickaxe-regex} は表示しません(その文字列の出現回数が変更されなかったため)。

@samp{--text} が提供されていない限り、 textconv フィルターのないバイナリファイルのパッチは無視されます。

詳細については gitdiffcore(7) の @emph{pickaxe} エントリを参照してください。

@item  @samp{--find-object=<object-id>} 
指定されたオブジェクトの出現回数を変更する違いを探します。 @samp{-S}
と同様に、引数だけが異なり、特定の文字列ではなく特定のオブジェクトIDを検索します。

オブジェクトは、ブロブまたはサブモジュールのコミットにすることができます。 これは、 @samp{git-log} の @samp{-t}
オプションがツリーも探すことを意味します。

@item  @samp{--pickaxe-all} 
@samp{-S} または @samp{-G} が変更を見つけたら、 <string>
の変更を含むファイルだけでなく、その変更セット(changeset)のすべての変更を表示します。

@item  @samp{--pickaxe-regex} 
@samp{-S} に指定した <string> を拡張POSIX正規表現として扱います。

@item  @samp{-O<orderfile>} 
ファイルが出力に表示される順序を制御します。これは @samp{diff.orderFile}
構成変数をオーバーライドします(git-config(1) 参照)。 @samp{diff.orderFile} をキャンセルするには、
@samp{-O/dev/null} を使用します。

出力順序は、 <orderfile>
内のglobパターンの順序によって決定されます。最初のパターンに一致するパス名を持つすべてのファイルが最初に出力され、2番目のパターンに一致する(ただし最初のパターンには一致しない)パス名を持つすべてのファイルが次に出力されます。パス名がどのパターンとも一致しないすべてのファイルは、ファイルの最後に暗黙のすべて一致パターンがあるかのように、最後に出力されます。複数のパス名のランクが同じである場合(同じパターンに一致するが、以前のパターンには一致しない)、相互の出力順序は通常の順序です。

<orderfile> は以下のとおりパースされます:

@itemize 

@item
空白行は無視されるため、読みやすくするための区切りとして使用できます。

@item
ハッシュ ("@samp{#}") で始まる行は無視されるため、コメントに使用できます。
パターンがハッシュで始まる場合は、パターンの先頭にバックスラッシュ(訳注:日本では環境により円記号)("@samp{\}") を追加します。

@item
他の各行には、単一のパターンが含まれています。
@end itemize

パターンは、 FNM_PATHNAME フラグなしで fnmatch(3)
に使用されるパターンと同じ構文とセマンティクスを持ちますが、最終的なパス名コンポーネントをいくつも削除するとパターンと一致する場合、パス名もパターンと一致する点が異なります。
たとえば、パターン "@samp{foo*bar}" は、 "@samp{fooasdfbar}" および "@samp{foo/bar/baz/asdf}" と一致しますが、
"@samp{foobarx}" とは一致しません。

@item  @samp{--skip-to=<file>} 
@itemx  @samp{--rotate-to=<file>} 
名前付き <file> の前のファイルを出力から破棄するか(スキップして)、出力の最後に移動させます(ローテーションさせます)。 これらは主に @samp{git
difftool} コマンドを使用するために考案されたものであり、それ以外の場合はあまり役に立たない可能性があります。

@item  @samp{-R} 
2つの入力を交換します。 つまり、インデックスまたはディスク上のファイルとツリーの内容の違いを表示します。

@item  @samp{--relative[=<path>]} 
@itemx  @samp{--no-relative} 
プロジェクトのサブディレクトリから実行する場合、このオプションを使用して、ディレクトリ外の変更を除外し、それに関連するパス名を表示するように指示できます。サブディレクトリ(ベアリポジトリなど)にいない場合は、引数として
<path> を指定することで、出力を作成するサブディレクトリに名前を付けることができます。 @samp{--no-relative`は、
`diff.relative} 設定オプションと以前の @samp{--relative} の両方を打ち消すために使用できます。

@item  @samp{-a} 
@itemx  @samp{--text} 
すべてのファイルをテキストとして扱います。

@item  @samp{--ignore-cr-at-eol} 
比較を行うときは、行末のキャリッジリターン(carriage-return)を無視します。

@item  @samp{--ignore-space-at-eol} 
行末(EOL)での空白(whitespace)の変更を無視します。

@item  @samp{-b} 
@itemx  @samp{--ignore-space-change} 
空白(whitespace)の数の変更は無視してください。これは、行末の空白(whitespace)を無視し、1つ以上の空白文字(whitespace
characters)の他のすべてのシーケンスを同等と見なします。

@item  @samp{-w} 
@itemx  @samp{--ignore-all-space} 
行を比較するときは空白を無視します。 これにより、一方の行に空白があり、もう一方の行に空白がない場合でも、違いは無視されます。

@item  @samp{--ignore-blank-lines} 
全て空白の行の変更は無視します。

@item  @samp{-I<regex>} 
@itemx  @samp{--ignore-matching-lines=<regex>} 
すべての行が <regex> にマッチする変更を無視します。このオプションは複数回指定できます。

@item  @samp{--inter-hunk-context=<lines>} 
指定された行数までの差分ハンク間のコンテキストを表示し、それによって互いに近いハンクを融合します。デフォルトは
@samp{diff.interHunkContext} で、設定オプションが設定されていない場合は0です。

@item  @samp{-W} 
@itemx  @samp{--function-context} 
関数全体を各変更のコンテキスト行として表示します。関数名は、 @samp{git diff}
がパッチハンクヘッダーを処理するのと同じ方法で決定されます(gitattributes(5) の @emph{Defining a custom
hunk-header} を参照)。

@item  @samp{--exit-code} 
diff(1）と同様のコードでプログラムを終了させます。つまり、違いがあった場合は 1 で終了し、 0 は違いがないことを意味します。

@item  @samp{--quiet} 
プログラムのすべての出力を無効にします。 @samp{--exit-code} を意味します。

@item  @samp{--ext-diff} 
外部diffヘルパーの実行を許可します。 gitattributes(5) を使用して外部diffドライバーを設定する場合は、
git-log(1) およびその仲間と一緒にこのオプションを使用する必要があります。

@item  @samp{--no-ext-diff} 
外部diffドライバーを禁止します。

@item  @samp{--textconv} 
@itemx  @samp{--no-textconv} 
バイナリファイルを比較するときに、外部テキスト変換フィルターの実行を許可(または禁止)します。 詳細については、
gitattributes(5)
を参照してください。textconvフィルターは通常、一方向の変換であるため、結果のdiffは人間の消費に適していますが、適用(apply)することはできません。このため、textconvフィルターは、
git-diff(1) および git-log(1) に対してのみデフォルトで有効になりますが、
git-format-patch(1) またはdiff配管コマンドに対しては有効になりません。

@item  @samp{--ignore-submodules[=<when>]} 
diff生成のサブモジュールへの変更を無視します。 <when> は、
none・untracked・dirty・allのいずれかになります。これがデフォルトです。noneを使用すると、追跡されていないファイルまたは変更されたファイルが含まれている場合、またはそのHEADがスーパープロジェクトに記録されているコミットと異なる場合にサブモジュールが変更されたと見なされ、
git-config(1) または gitmodules(5) の
ignoreオプションの設定をオーバーライドするために使用できます。untrackedが使用されている場合、サブモジュールには追跡されていないコンテンツのみが含まれている場合、サブモジュールはダーティとは見なされません(ただし、変更されたコンテンツはスキャンされます)。「dirty」を使用すると、サブモジュールの作業ツリーへのすべての変更が無視され、スーパープロジェクトに格納されているコミットへの変更のみが表示されます(これは1.7.0までの動作でした)。「all」を使用すると、サブモジュールへのすべての変更が非表示になります。

@item  @samp{--src-prefix=<prefix>} 
"a/" の代わりに、与えられたソースプレフィックス(source prefix)を表示します。

@item  @samp{--dst-prefix=<prefix>} 
"b/" の代わりに、指定された宛先プレフィックス(destination prefix)を表示します。

@item  @samp{--no-prefix} 
送信元(source)または宛先(destination)のプレフィックスを表示しません。

@item  @samp{--line-prefix=<prefix>} 
出力のすべての行に追加のプレフィックスを付加します。

@item  @samp{--ita-invisible-in-index} 
デフォルトでは、 "git add -N" によって追加されたエントリは、 "git diff" に既存の空のファイルとして表示され、 "git
diff --cached" に新しいファイルとして表示されます。このオプションを使用すると、エントリは "git diff"
では新しいファイルとして表示され、 "git diff --cached" では存在しません。このオプションは、
@samp{--ita-visible-in-index} で元に戻すことができます。どちらのオプションも実験的なものであり、将来削除される可能性があります。
@end table

これらの一般的なオプションの詳細については、 gitdiffcore(7) も参照してください。

@table @asis

@item  @samp{-1 --base} 
@itemx  @samp{-2 --ours} 
@itemx  @samp{-3 --theirs} 
@itemx  @samp{-0} 
"base" バージョン または "our branch" または "their branch"
とそれぞれ異なります。これらのオプションを使用すると、マージされたエントリのdiffは表示されません。

デフォルトでは、 our branch (-2) とクリーンに解決されたパスに対してdiffを取ります。オプション -0
を指定すると、マージされていないエントリのdiff出力を省略し、 "Unmerged" と表示することができます。

@item  @samp{-c} 
@itemx  @samp{--cc} 
これは、ステージ2（ブランチ）、ステージ3（ブランチ）、および作業ツリーファイルを比較し、 @emph{diff-tree}
がこれらのフラグを使用してマージコミットを示すのと同様に、結合された差分を出力します。

@item  @samp{-q} 
存在しないファイルでも黙っています
@end table

@noindent

@chapheading Raw output format

@samp{git-diff-index} と @samp{git-diff-tree} と @samp{git-diff-files} と @samp{git diff --raw}
からの生の出力形式は非常に似ています。

これらのコマンドはすべて、2つのセットを比較します。なお、比較されるものは異なります:

@table @asis

@item  git-diff-index <tree-ish> 
<tree-ish> とファイルシステム上のファイルを比較します。

@item  git-diff-index --cached <tree-ish> 
<tree-ish> とインデックスを比較します。

@item  git-diff-tree [-r] <tree-ish-1> <tree-ish-2> [<pattern>…] 
2つの引数で指定されたツリーを比較します。

@item  git-diff-files [<pattern>…] 
インデックスとファイルシステム上のファイルを比較します。
@end table

"git-diff-tree"
コマンドは、比較対象のハッシュ値を出力することで出力を開始します。その後、すべてのコマンドは、変更されたファイルごとに1つの出力行を出力します。

出力行は以下のようにフォーマットされます:

@example
in-place edit  :100644 100644 bcd1234 0123456 M file0
copy-edit      :100644 100644 abcd123 1234567 C68 file1 file2
rename-edit    :100644 100644 abcd123 1234567 R86 file1 file3
create         :000000 100644 0000000 1234567 A file4
delete         :100644 000000 1234567 0000000 D file5
unmerged       :000000 000000 0000000 0000000 U file6
@end example


つまり、左から右へ:

@enumerate 

@item
コロン(:)

@item
"src" のモード。作成(creation)またはマージされていない(unmerged)場合は 000000

@item
空白

@item
"dst" のモード。作成(creation)またはマージされていない(unmerged)場合は 000000

@item
空白

@item
"src" のsha1。作成(creation)またはマージされていない(unmerged)場合は 0@{40@}

@item
空白

@item
"dst" のsha1。作成(creation)またはマージされていない(unmerged)または作業ツリーにある場合は 0@{40@}

@item
空白

@item
ステータスの後に、オプションの「スコア数」("score" number)が続きます

@item
@samp{-z} オプションが使用されている場合はタブまたはNUL

@item
"src" のパス

@item
@samp{-z} オプションが使用されている場合タブまたはNUL。ステータスCまたはRにのみ存在します

@item
"dst" のパス。ステータスCまたはRにのみ存在します

@item
LFでレコードを終了します。 @samp{-z} オプションが使用されている場合はNULでレコードを終了します。
@end enumerate

ステータス文字の種類は以下のとおり:

@itemize 

@item
A: ファイルの追加

@item
C: ファイルを新しいファイルにコピー

@item
D: ファイルの削除

@item
M: ファイルの内容やモードの変更

@item
R: ファイル名の名前変更

@item
T: ファイルのタイプを変更

@item
U: ファイルはマージされていません(コミットする前にマージを完了する必要があります)

@item
X: 「不明な」変更タイプ(おそらくバグです。報告してください)
@end itemize

ステータス文字CとRの後には常にスコアが続きます(移動またはコピーのソースとターゲットの間の類似性のパーセンテージを示します)。ステータス文字Mの後には、ファイルの書き換えのスコア(非類似度のパーセンテージを示す)が続く場合があります。

<sha1> は、ファイルがファイルシステム上で新規で、インデックスと同期していない場合、すべて0として表示されます。

例:

@example
:100644 100644 5be4a4a 0000000 M file.c
@end example


@samp{-z} オプションを指定しない場合、構成変数 @samp{core.quotePath} で説明されているように、通常の文字以外(unusual
characters)を含むパス名が引用符で囲まれます(git-config(1) 参照)。 @samp{-z}
を使用すると、ファイル名がそのまま出力され、行はNULバイトで終了します。

@noindent

@chapheading diff format for merges

"git-diff-tree" と "git-diff-files" と "git-diff --raw" は、 @samp{-c} または @samp{--cc}
オプションを使用して、マージコミットに対してもdiff出力を生成できます。出力は、以下の点で上記の形式とは異なります:

@enumerate 

@item
親ごとにコロン(:)があります

@item
より多くの "src" モードと "src" sha1があります

@item
statusは、各親のステータス文字を連結したものです

@item
オプションの「スコア数」はありません

@item
ファイルのタブ区切りのパス名
@end enumerate

@samp{-c} および ` -cc` の場合、履歴のいずれかの側でファイルの名前が変更された場合でも、宛先(dst)または最終パスのみが表示されます。
@samp{--combined-all-paths} を使用すると、各親のパスの名前が表示され、それに続いてマージコミットのパスの名前が表示されます。

例: @samp{--combined-all-paths} を使用しない @samp{-c} および @samp{--cc} の場合:

@example
::100644 100644 100644 fabadb8 cc95eb0 4866510 MM       desc.c
::100755 100755 100755 52b7a2d 6d1ac04 d2ac7d7 RM       bar.sh
::100644 100644 100644 e07d6c5 9042e82 ee91881 RR       phooey.c
@end example


例: @samp{-c} または @samp{--cc} のいずれかに @samp{--combined-all-paths} が追加された場合:

@example
::100644 100644 100644 fabadb8 cc95eb0 4866510 MM       desc.c  desc.c  desc.c
::100755 100755 100755 52b7a2d 6d1ac04 d2ac7d7 RM       foo.sh  bar.sh  bar.sh
::100644 100644 100644 e07d6c5 9042e82 ee91881 RR       fooey.c fuey.c  phooey.c
@end example


注意: 'combined diff’は、すべての親から変更されたファイルのみをリストすることに注意してください。

@noindent

@chapheading Generating patch text with -p

git-diff(1) 、 git-log(1) 、 git-show(1) 、
git-diff-index(1) 、 git-diff-tree(1) 、
git-diff-files(1) に @samp{-p} オプションを付けて実行するとパッチテキストを生成します。パッチテキストの作成は、
@samp{GIT_EXTERNAL_DIFF} と @samp{GIT_DIFF_OPTS} 環境変数( git(1) 参照)、および @samp{diff}
属性( gitattributes(5) 参照)を介してカスタマイズできます。

-pオプションが生成するものは、従来のdiff形式とは少々異なります:

@enumerate 

@item
先行して、以下のような "git diff" ヘッダーがあります:

@example
diff --git a/file1 b/file2
@end example

名前の変更/コピーが含まれない限り、 @samp{a/} と @samp{b/} のファイル名は同じです。 特に、作成または削除の場合でも、 @samp{a/} または @samp{b/}
ファイル名の代わりに @samp{/dev/ null} が使用されることはありません。

名前変更/コピーが含まれる場合、 @samp{file1} と`file2`
は、それぞれ名前変更/コピーのソースファイルの名前と、名前変更/コピーが生成するファイルの名前を示します。

@item
その後に、1つ以上の拡張ヘッダー行達が続きます:

@example
old mode <mode>
new mode <mode>
deleted file mode <mode>
new file mode <mode>
copy from <path>
copy to <path>
rename from <path>
rename to <path>
similarity index <number>
dissimilarity index <number>
index <hash>..<hash> <mode>
@end example

ファイルモードは、ファイルタイプとファイル許可ビットを含む6桁の8進数として出力されます。

拡張ヘッダーのパス名には、 @samp{a/} および @samp{b/} プレフィックスは含まれません。

類似インデックス(similarity index)は変更されていない行のパーセンテージであり、非類似インデックス(dissimilarity
index)は変更された行のパーセンテージです。これは切り捨てられた整数であり、その後にパーセント記号が続きます。したがって、100％の類似インデックス値は2つの等しいファイルを表し、100％の非類似性は古いファイルから新しいファイルに移行された行がないことを意味します。

インデックス行には、変更前後のブロブオブジェクト名が含まれます。 <mode>
は、ファイルモードが変更されない場合に含まれます。それ以外の場合、別々の行は古いモードと新しいモードを示します。

@item
通常の文字でないキャラクタ(\"unusual\" characters)を含むパス名は、構成変数 @samp{core.quotePath}
で説明されているように引用符で囲まれています( git-config(1)参照)。

@item
出力内のすべての @samp{file1} ファイルはコミット前のファイルを参照し、すべての @samp{file2}
ファイルはコミット後のファイルを参照します。各変更を各ファイルに順番に適用するのは誤りです。たとえば、以下のパッチはaとbを交換します:

@example
diff --git a/a b/b
rename from a
rename to b
diff --git a/b b/a
rename from b
rename to a
@end example

@item
ハンクのヘッダーには、ハンクが適用される関数の名前が記載されています。特定の言語に合わせてこれを調整する方法の詳細については、
gitattributes(5) の "Defining a custom hunk-header" を参照してください。
@end enumerate

@noindent

@chapheading Combined diff format

diffを生成するコマンドは、マージを表示するときに @samp{-c} または @samp{--cc} オプションを使用して「合成diff」(combined
diff)を生成できます。これは git-diff(1) または git-show(1)
でのマージを表示するときのデフォルトの形式です。 注意: これらのコマンドのいずれかに適切な @samp{--diff-merges}
オプションを指定して、特定の形式で差分を強制的に生成できることにも注意してください。

合成diff形式は以下のようになります:

@example
diff --combined describe.c
index fabadb8,cc95eb0..4866510
--- a/describe.c
+++ b/describe.c
@@@@@@ -98,20 -98,12 +98,20 @@@@@@
        return (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;
  @}

- static void describe(char *arg)
 -static void describe(struct commit *cmit, int last_one)
++static void describe(char *arg, int last_one)
  @{
 +      unsigned char sha1[20];
 +      struct commit *cmit;
        struct commit_list *list;
        static int initialized = 0;
        struct commit_name *n;

 +      if (get_sha1(arg, sha1) < 0)
 +              usage(describe_usage);
 +      cmit = lookup_commit_reference(sha1);
 +      if (!cmit)
 +              usage(describe_usage);
 +
        if (!initialized) @{
                initialized = 1;
                for_each_ref(get_name);
@end example


@enumerate 

@item
まず "git diff"  ヘッダーがあり、以下のようになります( @samp{-c} オプションが使用されている場合):

@example
diff --combined file
@end example

または、以下のようになります( @samp{--cc} オプションが使用されている場合):

@example
diff --cc file
@end example

@item
その後に1つ以上の拡張ヘッダー行が続きます(以下の例は、2つの親とのマージを示しています):

@example
index <hash>,<hash>..<hash>
mode <mode>,<mode>..<mode>
new file mode <mode>
deleted file mode <mode>,<mode>
@end example

@samp{mode <mode>,<mode>..<mode>} 行は、<mode> の少なくとも1つが他の <mode>
と異なる場合にのみ表示されます。検出されたコンテンツの移動(名前の変更とコピーの検出)に関する情報を含む拡張ヘッダーは、2つの <tree-ish>
のdiffで機能するように設計されており、合成diff形式では使用されません。

@item
その後に2行の from-file/to-file ヘッダーが続きます

@example
--- a/file
+++ b/file
@end example

従来の統一diff形式の2行ヘッダーと同様に、 @samp{/dev/null} は、作成または削除されたファイルを通知するために使用されます。

ただし、 --combined-all-paths  オプションが指定されている場合、2行の from-file/to-file の代わりに、 N+1
行の from-file/to-file ヘッダーが取得されます。ここで、 N はマージコミットの親の数です。

@example
--- a/file
--- a/file
--- a/file
+++ b/file
@end example

この拡張形式は、名前変更またはコピー検出がアクティブな場合に役立ち、別の親のファイルの元の名前を確認できます。

@item
チャンクヘッダーの形式が変更され、誤って @samp{patch-p1}
にフィードされるのを防ぎます。合成差分形式は、マージコミットの変更を確認するために作成されたものであり、適用されることを意図したものではありません。この変更は、拡張された「インデックス」ヘッダーの変更に似ています:

@example
@@@@@@ <from-file-range> <from-file-range> <to-file-range> @@@@@@
@end example

合成diff形式のチャンクヘッダーには親の数+1の @samp{@@} 文字があります。
@end enumerate

従来の統一diff形式とは異なり、2つのファイルAとBが、 @samp{-} (マイナスはAに表示されますが、Bでは削除されます) または @samp{+}
(プラスはAにはありませんが、Bには追加されます)、または @samp{" "}（スペースは変更なし)
プレフィックスを持つ単一の列で表示される場合、この形式は2つ以上のファイル file1, file2,… を1つのファイルXと比較し、Xが各
fileN とどのように異なるかを示します。ファイルNごとに1つの列が出力行の前に追加され、Xの行が出力行とどのように異なるかを示します。

列Nの @samp{-} 文字は、その行が fileN に表示されているが、結果には表示されていないことを意味します。 列Nの @samp{+}
文字は、結果に行が表示され、 fileN にその行がないことを意味します(つまり、その親の観点から見て行が追加されたことを示す)。

上記の出力例では、関数のシグネチャが両方のファイルから見て変更されています(したがって、 file1 と file2 の両方から2つの @samp{-}
が削除され、さらに @samp{++} が追加されたため、 file1 と file2 のどちらにも表示されません)。また、他の8行は file1 と同じですが、
file2 には表示されません(したがって、接頭辞として @samp{+} が付けられます)。

@samp{git diff-tree -c} で表示される場合、マージコミットの親をマージ結果と比較します(つまり、 file1..fileN が親です)。
@samp{git diff-files -c} で表示される場合、2つの未解決のマージ親を作業ツリーファイルと比較します(つまり、 file1
はステージ2、別名「私たちのバージョン」、 file2 はステージ3、別名「彼らのバージョン」です)。

@noindent

@chapheading other diff formats

@samp{--summary} オプションは、新しく追加、削除、名前変更、およびコピーされたファイルを説明します。@samp{--stat} オプションは、
diffstat(1) グラフ を出力に追加します。これらのオプションは、 @samp{-p}
などの他のオプションと組み合わせることができ、人間が読むことを目的としています。

名前の変更またはコピーを伴う変更を表示する場合、 @samp{--stat}
出力は、パス名の共通のプレフィックスとサフィックスを組み合わせることにより、パス名をコンパクトにフォーマットします。
たとえば、4行を変更(modify)しながら @samp{arch/i386/Makefile} を @samp{arch/x86/Makefile}
に移動(move)する変更(change)は、次のように表示されます:

@example
arch/@{i386 => x86@}/Makefile    |   4 +--
@end example


@samp{--numstat} オプションは diffstat(1) 情報を提供しますが、人間ではなくソフトウェアで読むのを容易にするように設計されています。
@samp{--numstat} 出力のエントリは以下のようになります:

@example
1       2       README
3       1       arch/@{i386 => x86@}/Makefile
@end example


この形式は、左から右へ:

@enumerate 

@item
追加行数

@item
タブ

@item
削除行数

@item
タブ

@item
パス名(おそらく rename/copy 情報を含む)

@item
改行
@end enumerate

@samp{-z} 出力オプションが有効な場合、出力は以下のようにフォーマットされます:

@example
1       2       README NUL
3       1       NUL arch/i386/Makefile NUL arch/x86/Makefile NUL
@end example


これは:

@enumerate 

@item
追加行数

@item
タブ

@item
削除行数

@item
タブ

@item
NUL(rename/copy された場合のみ存在します)

@item
プリイメージのパス名

@item
NUL(rename/copy された場合のみ存在します)

@item
ポストイメージのパス名(rename/copy された場合のみ存在します)

@item
NUL
@end enumerate

名前が変更された場合のプリイメージパスの前の追加の @samp{NUL}
は、出力を読み取るスクリプトが、先読みせずに、読み取られている現在のレコードがシングルパスレコードであるか、名前変更/コピーレコードであるか、を判断できるようにするためです。追加および削除された行を読み取った後、
@samp{NUL} まで読み取るとパス名が生成されますが、それが @samp{NUL} の場合、レコードには2つのパスが表示されます。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-diff-index,,,Top
@chapheading Name

git-diff-index — ツリーを作業ツリーまたはインデックスと比較します

@noindent

@chapheading Synopsis

@display
git diff-index [-m] [--cached] [--merge-base] [<common diff options>] <tree-ish> [<path>…]
@end display


@noindent

@chapheading DESCRIPTION

ツリーオブジェクトで見つかったブロブの内容とモードを、作業ツリー内の対応する追跡中のファイルまたはインデックス内の対応するパスと比較します。<path>引数が存在する場合、それらのパターンに一致するパスのみを比較します。それ以外の場合は、追跡中のすべてのファイルが比較されます。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-p} 
@itemx  @samp{-u} 
@itemx  @samp{--patch} 
パッチを生成します(generating patches に関するセクションを参照)。

@item  @samp{-s} 
@itemx  @samp{--no-patch} 
diff出力を抑制します。デフォルトでパッチを表示する @samp{git show} のようなコマンド、または @samp{--patch}
の効果をキャンセルする場合に便利です。

@item  @samp{-U<n>} 
@itemx  @samp{--unified=<n>} 
通常の3行ではなく、<n> 行の内容でdiffを生成します。
@samp{--patch} の機能を含んでいます。

@item  @samp{--output=<file>} 
stdout ではなく指定のファイルに出力します。

@item  @samp{--output-indicator-new=<char>} 
@itemx  @samp{--output-indicator-old=<char>} 
@itemx  @samp{--output-indicator-context=<char>} 
生成されたパッチの新しい行、古い行、またはコンテキスト行を示すために使用される文字を指定します。 通常、それらはそれぞれ @emph{+} 、 @emph{-} 、 ' '
です。

@item  @samp{--raw} 
生形式(raw format)でdiffを生成します。
これがデフォルトです。

@item  @samp{--patch-with-raw} 
@samp{-p --raw} の同義語。

@item  @samp{--indent-heuristic} 
diffハンクの境界をずらす(shift)ヒューリスティックを有効にして、パッチを読みやすくします。 これがデフォルトです。

@item  @samp{--no-indent-heuristic} 
インデントヒューリスティック(indent heuristic)を無効にします。

@item  @samp{--minimal} 
より多くの時間を費やして、可能な限り最小のdiffが生成されるようにします。

@item  @samp{--patience} 
"patience diff" アルゴリズムを使用してdiffを生成します。

@item  @samp{--histogram} 
"histogram diff" アルゴリズムを使用してdiffを生成します。

@item  @samp{--anchored=<text>} 
"anchored diff" アルゴリズムを使用してdiffを生成します。

このオプションは複数回指定できます。

行がソースと宛先の両方に存在し、1回だけ存在し、このテキストで始まる場合、このアルゴリズムは、その行が出力に削除または追加として表示されないようにします。内部で
"patience diff" アルゴリズムを使用します。

@item  @samp{--diff-algorithm=@{patience|minimal|histogram|myers@}} 
diffアルゴリズムを選択します。その派生(variants)は以下のとおりです:

@table @asis

@item  @samp{default}, @samp{myers} 
基本的な貪欲な差分アルゴリズム(greedy diff algorithm)。現在、これがデフォルトです。

@item  @samp{minimal} 
より多くの時間を費やして、可能な限り最小のdiffが生成されるようにします。

@item  @samp{patience} 
パッチを生成する時に "patience diff" アルゴリズムを使います。

@item  @samp{histogram} 
このアルゴリズムは、忍耐アルゴリズム(patience algorithm)を拡張して、「発生率の低い共通要素をサポート」(support
low-occurrence common elements)します。
@end table

たとえば、 あなたが @samp{diff.algorithm}
変数をデフォルト以外の値に設定した上で、それでもデフォルト値を使用する場合は、@samp{--diff-algorithm=default}
オプションを使用する必要があります。

@item  @samp{--stat[=<width>[,<name-width>[,<count>]]]} 
diffstatを生成します。
デフォルトでは、必要なだけのスペースがファイル名部分に使用され、残りはグラフ部分に使用されます。最大幅はデフォルトで端末幅、または端末に接続されていない場合は80桁であり、
@samp{<width>} で上書きできます。ファイル名部分の幅は、コンマの後に別の幅 @samp{<name-width>}
を指定することで制限できます。グラフ部分の幅は、 @samp{--stat-graph-width=<width>}
(統計グラフを生成するすべてのコマンドに影響します)を使用するか、 @samp{diff.statGraphWidth=<width>} ( @samp{git
format-patch} に影響しません)を設定することによって制限できます。3番目のパラメータ @samp{<count>}
を指定することにより、出力を最初の @samp{<count>} 行に制限し、それに @samp{...} が続く形にできます。

これらのパラメータは、 @samp{--stat-width=<width>} と @samp{--stat-name-width=<name-width>} と
@samp{--stat-count=<count>} を使用して個別に設定することもできます。

@item  @samp{--compact-summary} 
ファイルの作成や削除( "new" または "gone" 。オプションでシンボリックリンクの場合は "+l"
)、diffstatのモード変更(実行可能ビットを追加または削除する場合は、それぞれ "+x" または "-x"
)など、拡張ヘッダー情報の要約を出力します。情報はファイル名部分とグラフ部分の間に置かれます。本機能は @samp{--stat} の機能を含んでいます。

@item  @samp{--numstat} 
@samp{--stat`に似ていますが、プログラムで処理しやすい(machine
friendly)ように、追加および削除された行数を10進表記とパス名で省略形なしで表示します。バイナリファイルの場合、 `0 0} の代わりに2つの
@samp{-} を出力します。

@item  @samp{--shortstat} 
変更されたファイルの総数と、追加および削除された行の数を含む @samp{--stat} 形式の最後の行のみを出力します。

@item  @samp{-X[<param1,param2,...>]} 
@itemx  @samp{--dirstat[=<param1,param2,...>]} 
各サブディレクトリの相対的な変更量の分布を出力します。 @samp{--dirstat}
の動作は、パラメータのコンマ区切りリストを渡すことでカスタマイズできます。デフォルトは、 @samp{diff.dirstat}
構成変数によって制御されます(git-config(1) 参照)。以下のパラメータを使用できます:

@table @asis

@item  @samp{changes} 
ソースから削除された、または宛先に追加された行をカウントして、dirstat数を計算します。これは、ファイル内の純粋なコード移動の量を無視します。つまり、ファイル内の行の再配置は、他の変更ほどカウントされません。これは、パラメーターが指定されていない場合のデフォルトの動作です。

@item  @samp{lines} 
通常の行ベースのdiff分析を実行し、削除/追加された行数を合計して、dirstat数を計算します。
(バイナリファイルの場合、バイナリファイルには行の概念がないため、代わりに64バイトのチャンクをカウントします)。 これは @samp{changes}
動作よりも高価な @samp{--dirstat} 動作ですが、他の変更と同じようにファイル内の再配置された行をカウントします。結果の出力は、他の
@samp{--*stat} オプションから得られるものと一致しています。

@item  @samp{files} 
変更されたファイルの数を数えて、dirstat数を計算します。変更された各ファイルは、dirstat分析で等しくカウントされます。これは、ファイルの内容をまったく調べる必要がないため、計算コストが最もかからない
@samp{--dirstat} の動作です。

@item  @samp{cumulative} 
親ディレクトリの子ディレクトリの変更も同様にカウントします。 @samp{cumulative}(累積的)
を使用する場合、報告されるパーセンテージの合計が100%を超える場合があることに注意してください。デフォルトの(非累積的な)動作は、@samp{noncumulative}
パラメーターで指定できます。

@item  <limit> 
整数パラメーターは、カットオフパーセント(デフォルトでは3%)を指定します。指定の割合より少ないディレクトリは、出力に表示されません。
@end table

例: 変更されたファイルの総数の10%未満のディレクトリを無視し、親ディレクトリに子ディレクトリの数を累積しながら、変更されたファイルをカウント:
@samp{--dirstat=files,10,cumulative}

@item  @samp{--cumulative} 
@samp{--dirstat=cumulative} と同義語

@item  @samp{--dirstat-by-file[=<param1,param2>...]} 
@samp{--dirstat=files,param1,param2...} と同義語

@item  @samp{--summary} 
作成、名前変更、モード変更などの拡張ヘッダー情報の短い要約(condensed summary)を出力します。

@item  @samp{--patch-with-stat} 
@samp{-p --stat} と同義語。

@item  @samp{-z} 
@samp{--raw} または @samp{--numstat} または @samp{--name-only} または @samp{--name-status} が指定されている場合は
パス名を変更せず、出力フィールドターミネータとしてNULLを使用してください。

このオプションがないと、構成変数 @samp{core.quotePath} で説明されているように、 通常の文字以外(unusual
characters)を含むパス名が引用符で囲まれます(git-config(1) 参照)。

@item  @samp{--name-only} 
変更されたファイルの名前のみを表示します。 多くの場合、ファイル名はUTF-8でエンコードされます。 詳細については、
git-log(1) のマニュアルページにあるエンコーディングに関する議論(the discussion about
encoding)を参照してください。

@item  @samp{--name-status} 
変更されたファイルの名前とステータスのみを表示します。ステータス文字の意味については、 @samp{--diff-filter}
オプションの説明を参照してください。 @samp{--name-only} と同じように、ファイル名はしばしばUTF-8でエンコードされます。

@item  @samp{--submodule[=<format>]} 
サブモジュールの違いをどのように表示するかを指定します。 @samp{--submodule=short} を指定する場合、 @emph{short}
形式が使用されます。この形式は、範囲の最初と最後にコミットの名前を表示するだけです。 @samp{--submodule} または
@samp{--submodule=log} が指定されている場合、 @emph{log} 形式が使用されます。この形式では、
git-submodule(1) @samp{summary} のように範囲内のコミットが一覧表示されます。 @samp{--submodule=diff}
が指定されている場合、 @emph{diff}
形式が使用されます。この形式は、コミット範囲間のサブモジュールの内容の変更のインラインdiffを示します。configオプションが設定されていない場合、デフォルトは
@samp{diff.submodule} または @emph{short} 形式です。

@item  @samp{--color[=<when>]} 
色付きのdiffを表示します。 @samp{--color} (つまり、 @emph{=<when>} ) は @samp{--color=always} と同じです。
@emph{<when>} は、 @samp{always} または @samp{never} または @samp{auto} のいずれかになります。

@item  @samp{--no-color} 
カラーdiffをオフにします。
@samp{--color=never} と同じです。

@item  @samp{--color-moved[=<mode>]} 
ソースコードの移動した行を別の色にします。
<mode>は、オプションが指定されていない場合はデフォルトで @emph{no} になり、
モードが指定されていないオプションが指定されている場合は @emph{zebra} になります。
モードは以下のいずれかでなければなりません:

@table @asis

@item  no 
移動行をハイライトしません。

@item  default 
@samp{zebra} の同義語です。これは、将来、より賢明なモードに変更される可能性があります。

@item  plain 
ある場所で追加され、別の場所で削除された行は、 @emph{color.diff.newMoved} で色付けされます。 同様に、
@emph{color.diff.oldMoved}
は、差分の別の場所に追加された削除された行に使用されます。このモードは移動された行をピックアップしますが、コードのブロックが順列なしで移動されたかどうかを判断することはレビューではあまり役に立ちません。

@item  blocks 
少なくとも20文字の英数字の移動テキストのブロックが貪欲に検出されます。検出されたブロックは、 @emph{color.diff.@{old,new@}Moved}
色のいずれかを使用して色付けされます。隣接するブロックを区別することはできません。

@item  zebra 
移動されたテキストのブロックは、 @emph{blocks} モードの場合と同様に検出されます。 ブロックは、
@emph{color.diff.@{old,new@}Moved} 色または @emph{color.diff.@{old,new@}MovedAlternative}
色のいずれかを使用して色付けされます。2つの色の間の変化は、新しいブロックが検出されたことを示します。

@item  dimmed-zebra 
@emph{zebra}
に似ていますが、移動されたコードの重要でない部分の追加の調光(dimmed)が実行されます。隣接する2つのブロックの境界線は興味深いと見なされ、残りは興味深いものではありません。
@samp{dimmed_zebra} は非推奨の同義語です。
@end table

@item  @samp{--no-color-moved} 
移動検出をオフにします。 これは、構成設定を上書きするために使用できます。 @samp{--color-moved=no} と同じです。

@item  @samp{--color-moved-ws=<modes>} 
これは、 @samp{--color-moved} の移動検出を実行するときに空白を無視する方法を設定します。
これらのモードは、コンマ区切りのリストとして指定できます:

@table @asis

@item  no 
移動行検出を実行するときに、空白(whitespace)を無視しない。

@item  ignore-space-at-eol 
行末(EOL)での空白(whitespace)の変更を無視します。

@item  ignore-space-change 
空白(whitespace)の数の変更は無視してください。これは、行末の空白(whitespace)を無視し、1つ以上の空白文字(whitespace
characters)の他のすべてのシーケンスを同等と見なします。

@item  ignore-all-space 
行を比較するときは空白(whitespace)を無視します。これにより、一方の行に空白があり、もう一方の行に空白がない場合でも、違いは無視されます。

@item  allow-indentation-change 
最初に移動検出で空白(whitespace)を無視し、空白(whitespace)の変更が行ごとに同じである場合にのみ、移動されたコードブロックをブロックにグループ化します。
これは他のモードと互換性がありません。
@end table

@item  @samp{--no-color-moved-ws} 
移動検出を実行するときは、空白(whitespace)を無視しないでください。これは、構成設定を上書きするために使用できます。
@samp{--color-moved-ws=no} と同じです。

@item  @samp{--word-diff[=<mode>]} 
<mode> を使用して変更された単語を区切ることにより、単語のdiffを表示します。デフォルトでは、単語は空白で区切られます。 以下の
@samp{--word-diff-regex} を参照してください。 <mode> のデフォルトは 'plain’です。 <mode>
は以下のいずれかである必要があります:

@table @asis

@item  color 
変更された単語(word)を色のみを使用して強調表示します。 @samp{--color} を意味します。

@item  plain 
単語を @samp{[-removed-]} および @samp{@{+added+@}} として表示します。
区切り文字が入力に表示されている場合、区切り文字をエスケープしようとしないため、出力があいまいになる可能性があります。

@item  porcelain 
スクリプトの使用を目的とした特別な行ベースの形式を使用します。追加/削除/無変更については、通常の統一されたdiff形式で印刷され、行の先頭の
@samp{+}/@samp{-}/` ` 文字で始まり、行の終わりまで続きます。入力の改行は、それ自体の行のチルダ @samp{~} で表されます。

@item  none 
単語(word)のdiffを再度無効にします。
@end table

注意: 最初のモードの名前にもかかわらず、有効になっている場合、すべてのモードで変更された部分を強調するために色が使用されることに注意してください。

@item  @samp{--word-diff-regex=<regex>} 
空白以外を単語と見なす代わりに、 <regex> を使用して単語が何であるかを決定します。また、すでに有効になっていない限り、この機能は
@samp{--word-diff} の機能を含んでいます。

<regex> の重複しないマッチはすべて、単語と見なされます。これらのマッチの間のすべては空白と見なされ、違いを見つけるためとしては無視されます！
正規表現に @samp{|[^[:space:]]}
を追加して、空白以外のすべての文字とマッチすることを確認することをお勧めします。改行を含むマッチは、改行で黙って切り捨てられます！

たとえば、 @samp{--word-diff-regex=.} は各文字を単語として扱い、それに応じて文字ごとの違いを表示します。

正規表現は、diffドライバーまたは構成オプション(configuration option)を介して設定することもできます。
gitattributes(5) または git-config(1)
を参照してください。これを指定すると、diffドライバーまたは構成設定(configuration
settings)が明示的にオーバーライドされます。diffドライバーは構成設定を上書きします。

@item  @samp{--color-words[=<regex>]} 
@samp{--word-diff=color} に @samp{--word-diff-regex=<regex>}
を加えたものに相当します(正規表現が指定されている場合)。

@item  @samp{--no-renames} 
構成ファイルにデフォルトで指定されている場合でも、名前変更の検出をオフにします。

@item  @samp{--[no-]rename-empty} 
名前変更ソースとして空のブロブを使用するかどうか。

@item  @samp{--check} 
変更によって競合マーカーまたは空白エラーが発生した場合に警告します。空白エラーと見なされるものは、 @samp{core.whitespace}
構成によって制御されます。
デフォルトでは、末尾の空白(空白のみで構成される行を含む)と、行の最初のインデント内で直後にタブ文字が続くスペース文字は、空白エラーと見なされます。問題が見つかった場合は、ゼロ以外のステータスで終了します。なお、
--exit-code とは互換性がありません。

@item  @samp{--ws-error-highlight=<kind>} 
diffの @samp{context} または @samp{old} または @samp{new} 行の空白エラーを強調表示します。複数の値はコンマで区切られ、 @samp{none}
は前の値をリセットし、 @samp{default} はリストを @samp{new} にリセットし、 @samp{all} は old、new、context
の省略形です。このオプションが指定されておらず、構成変数 @samp{diff.wsErrorHighlight} が設定されていない場合、 @samp{new}
行の空白エラーのみが強調表示されます。空白エラーは @samp{color.diff.whitespace} で色分けされています。

@item  @samp{--full-index} 
パッチ形式の出力を生成するときは、最初の一握りの文字(first handful of
characters)の代わりに、「インデックス」行にイメージ前およびイメージ後の完全ブロブオブジェクト名を表示します。

@item  @samp{--binary} 
@samp{--full-index} に加えて、 @samp{git-apply} で適用できるバイナリ差分を出力します。
@samp{--patch} の機能を含んでいます。

@item  @samp{--abbrev[=<n>]} 
完全な40バイトの16進オブジェクト名をdiff-raw形式の出力とdiff-treeヘッダー行に表示する代わりに、オブジェクトを一意に参照する、少なくとも
@emph{<n>} 桁の16進数の長さの最短のプレフィックスを表示します。diffパッチ出力形式では、 @samp{--full-index} が優先されます。つまり、
@samp{--full-index} が指定されている場合、 @samp{--abbrev} に関係なく、完全なブロブ名が表示されます。デフォルト以外の桁数は、
@samp{--abbrev=<n>} で指定できます。

@item  @samp{-B[<n>][/<m>]} 
@itemx  @samp{--break-rewrites[=[<n>][/<m>]]} 
完全な書き換えの変更を削除と作成のペアに分割します。これには以下の2つの目的があります:

これは、ファイルの完全な書き換えに相当する変更が、コンテキストとしてテキストで一致する非常に少数の行と混合された一連の削除と挿入としてではなく、古いものすべての単一の削除とそれに続く
すべての新しいものを1回挿入し、数値 @samp{m} が -B オプションのこの側面を制御します(デフォルトは60%)。 @samp{-B/70%}
は、Gitがそれを完全な書き換えと見なすために、元の30%未満が結果に残る必要があることを指定します(つまり、結果のパッチは、コンテキスト行と混合された一連の削除と挿入になります)。

-M と一緒に使用すると、完全に書き換えられたファイルも名前変更のソースと見なされ(通常、 -M
は、消えたファイルのみを名前変更のソースと見なします)、数 @samp{n} が -Bオプションのこの側面を制御します(デフォルトは50%)。 @samp{-B20%}
は、ファイルのサイズの20%以上と比較して、追加および削除を伴う変更が、別のファイルへの名前変更の可能なソースとして取得される資格があることを指定します。

@item  @samp{-M[<n>]} 
@itemx  @samp{--find-renames[=<n>]} 
名前の変更(renames)を検知する。
@samp{n} が指定されている場合、それは類似性インデックスのしきい値です
(つまり、ファイルのサイズと比較した追加/削除の量)。
たとえば、 @samp{-M90%} は、ファイルの90%以上が変更されていない場合、
Gitが削除/追加のペアを名前変更と見なす必要があることを意味します。
@samp{%} 記号がない場合、数値は小数として読み取られ、その前に小数点が付きます。
つまり、 @samp{-M5} は0.5になるため、@samp{-M50%} と同じになります。
同様に、 @samp{-M05} は @samp{-M5%} と同じです。
検出を正確な名前変更に制限するには、 @samp{-M100%} を使用します。
デフォルトの類似性インデックスは50%です。

@item  @samp{-C[<n>]} 
@itemx  @samp{--find-copies[=<n>]} 
名前と同様コピーを検出します。 @samp{--find-copies-harder} @samp{も参照してください。 `n} を指定すると、 @samp{-M<n>}
と同じ意味になります。

@item  @samp{--find-copies-harder} 
パフォーマンス上の理由から、デフォルトでは、 @samp{-C}
オプションは、コピーの元のファイルが同じ変更組(changeset)で変更された場合にのみコピーを検索します。このフラグにより、コマンドは変更されていないファイルをコピー元の候補として検査します。これは大規模なプロジェクトでは非常にコストのかかる操作であるため、注意して使用してください。
複数の @samp{-C} オプションを指定しても同じ効果があります。

@item  @samp{-D} 
@itemx  @samp{--irreversible-delete} 
削除するプレイメージ(preimage)を省略します。つまり、ヘッダーのみを出力し、プレイメージと @samp{/dev/null}
の差分は出力しません。結果のパッチは、 @samp{patch} または @samp{git apply}
で適用されることを意図していません。これは、変更後にテキストを確認することに集中したい人のためだけのものです。さらに、出力には明らかに、そのようなパッチを手動でも逆に適用するのに十分な情報が不足しているため、オプションの名前が付けられています。

@samp{-B} と併用する場合は、削除/作成ペアの削除部分のプリイメージ(preimage)も省略してください。

@item  @samp{-l<num>} 
@samp{-M} および @samp{-C}
オプションには、名前変更/コピーのサブセットを安価に検出できるいくつかの準備手順が含まれ、その後に、残りのすべてのペアになっていない宛先をすべての関連ソースと比較する徹底的なフォールバック部分が続きます。(名前の変更の場合、残りのペアになっていないソースのみが関係します。コピーの場合、すべての元のソースが関係します)。Nのソースと宛先の場合、この徹底的なチェックのコストは
O(N^2)
です。このオプションは、関係するソース/宛先ファイルの数が指定された数を超えた場合に、名前変更/コピー検出の完全な部分が実行されないようにします。デフォルトは
diff.renameLimit です。 値0は無制限として扱われることに注意してください。

@item  @samp{--diff-filter=[(A|C|D|M|R|T|U|X|B)...[*]]} 
追加(Add)・コピー(Copy)・削除(Delete)・変更(Modify)・名前変更(Rename)されたファイル、タイプが変更されたファイル(T)、マージされていないファイル(U)、不明なファイル(X)、またはペアリングが壊れているファイル(B)のみを選択します。フィルタ文字(無しも含む)の任意の組み合わせを使用できます。
組み合わせに @samp{*} (全てまたは無し)が追加されると、比較で他の基準に一致するファイルがある場合、すべてのパスが選択されます。
他の基準に一致するファイルがない場合、何も選択されません。

また、逆に、除外したい時はこれらの各大文字指定を小文字にして指定します。例えば @samp{--diff-filter=ad}
は、追加および削除されたパスを除外します。

注意:すべてのdiffがすべてのタイプを特徴とするわけではないことに注意してください。
たとえば、インデックスから作業ツリーへのdiffにエントリを追加することはできません(diffに含まれるパスのセットは、インデックスの内容によって制限されるため)。
同様に、これらのタイプの検出が無効になっている場合、コピーおよび名前変更されたエントリは表示されません。

@item  @samp{-S<string>} 
ファイル内の指定の文字列(つまり、 addition 、deletion)の出現回数の差分を調べます。スクリプターが使用することを目的としています。

(構造体など)コードの正確なブロックを探していて、そのブロックが最初に作成されてからの履歴を知りたい場合に便利です。この機能を繰り返し使用して、プリイメージ(preimage)内の興味深いブロックを
@samp{-S} にフィードバックし、そしてあなたはそれをブロックの最初のバージョンを取得するまで続けます。

バイナリファイルも検索されます。

@item  @samp{-G<regex>} 
パッチテキストに <regex> にマッチする 追加/削除 された行が含まれている差分を探します。

@samp{-S<regex> --pickaxe-regex} と @samp{-G<regex>}
の違いを説明するために、同じファイル内で以下のdiffを使用してコミットすることを検討してください:

@example
+    return frotz(nitfol, two->ptr, 1, 0);
...
-    hit = frotz(nitfol, mf2.ptr, 1, 0);
@end example


@samp{git log -G"frotz\(nitfol"} はこのコミットを表示しますが、 @samp{git log -S"frotz\(nitfol"
--pickaxe-regex} は表示しません(その文字列の出現回数が変更されなかったため)。

@samp{--text} が提供されていない限り、 textconv フィルターのないバイナリファイルのパッチは無視されます。

詳細については gitdiffcore(7) の @emph{pickaxe} エントリを参照してください。

@item  @samp{--find-object=<object-id>} 
指定されたオブジェクトの出現回数を変更する違いを探します。 @samp{-S}
と同様に、引数だけが異なり、特定の文字列ではなく特定のオブジェクトIDを検索します。

オブジェクトは、ブロブまたはサブモジュールのコミットにすることができます。 これは、 @samp{git-log} の @samp{-t}
オプションがツリーも探すことを意味します。

@item  @samp{--pickaxe-all} 
@samp{-S} または @samp{-G} が変更を見つけたら、 <string>
の変更を含むファイルだけでなく、その変更セット(changeset)のすべての変更を表示します。

@item  @samp{--pickaxe-regex} 
@samp{-S} に指定した <string> を拡張POSIX正規表現として扱います。

@item  @samp{-O<orderfile>} 
ファイルが出力に表示される順序を制御します。これは @samp{diff.orderFile}
構成変数をオーバーライドします(git-config(1) 参照)。 @samp{diff.orderFile} をキャンセルするには、
@samp{-O/dev/null} を使用します。

出力順序は、 <orderfile>
内のglobパターンの順序によって決定されます。最初のパターンに一致するパス名を持つすべてのファイルが最初に出力され、2番目のパターンに一致する(ただし最初のパターンには一致しない)パス名を持つすべてのファイルが次に出力されます。パス名がどのパターンとも一致しないすべてのファイルは、ファイルの最後に暗黙のすべて一致パターンがあるかのように、最後に出力されます。複数のパス名のランクが同じである場合(同じパターンに一致するが、以前のパターンには一致しない)、相互の出力順序は通常の順序です。

<orderfile> は以下のとおりパースされます:

@itemize 

@item
空白行は無視されるため、読みやすくするための区切りとして使用できます。

@item
ハッシュ ("@samp{#}") で始まる行は無視されるため、コメントに使用できます。
パターンがハッシュで始まる場合は、パターンの先頭にバックスラッシュ(訳注:日本では環境により円記号)("@samp{\}") を追加します。

@item
他の各行には、単一のパターンが含まれています。
@end itemize

パターンは、 FNM_PATHNAME フラグなしで fnmatch(3)
に使用されるパターンと同じ構文とセマンティクスを持ちますが、最終的なパス名コンポーネントをいくつも削除するとパターンと一致する場合、パス名もパターンと一致する点が異なります。
たとえば、パターン "@samp{foo*bar}" は、 "@samp{fooasdfbar}" および "@samp{foo/bar/baz/asdf}" と一致しますが、
"@samp{foobarx}" とは一致しません。

@item  @samp{--skip-to=<file>} 
@itemx  @samp{--rotate-to=<file>} 
名前付き <file> の前のファイルを出力から破棄するか(スキップして)、出力の最後に移動させます(ローテーションさせます)。 これらは主に @samp{git
difftool} コマンドを使用するために考案されたものであり、それ以外の場合はあまり役に立たない可能性があります。

@item  @samp{-R} 
2つの入力を交換します。 つまり、インデックスまたはディスク上のファイルとツリーの内容の違いを表示します。

@item  @samp{--relative[=<path>]} 
@itemx  @samp{--no-relative} 
プロジェクトのサブディレクトリから実行する場合、このオプションを使用して、ディレクトリ外の変更を除外し、それに関連するパス名を表示するように指示できます。サブディレクトリ(ベアリポジトリなど)にいない場合は、引数として
<path> を指定することで、出力を作成するサブディレクトリに名前を付けることができます。 @samp{--no-relative`は、
`diff.relative} 設定オプションと以前の @samp{--relative} の両方を打ち消すために使用できます。

@item  @samp{-a} 
@itemx  @samp{--text} 
すべてのファイルをテキストとして扱います。

@item  @samp{--ignore-cr-at-eol} 
比較を行うときは、行末のキャリッジリターン(carriage-return)を無視します。

@item  @samp{--ignore-space-at-eol} 
行末(EOL)での空白(whitespace)の変更を無視します。

@item  @samp{-b} 
@itemx  @samp{--ignore-space-change} 
空白(whitespace)の数の変更は無視してください。これは、行末の空白(whitespace)を無視し、1つ以上の空白文字(whitespace
characters)の他のすべてのシーケンスを同等と見なします。

@item  @samp{-w} 
@itemx  @samp{--ignore-all-space} 
行を比較するときは空白を無視します。 これにより、一方の行に空白があり、もう一方の行に空白がない場合でも、違いは無視されます。

@item  @samp{--ignore-blank-lines} 
全て空白の行の変更は無視します。

@item  @samp{-I<regex>} 
@itemx  @samp{--ignore-matching-lines=<regex>} 
すべての行が <regex> にマッチする変更を無視します。このオプションは複数回指定できます。

@item  @samp{--inter-hunk-context=<lines>} 
指定された行数までの差分ハンク間のコンテキストを表示し、それによって互いに近いハンクを融合します。デフォルトは
@samp{diff.interHunkContext} で、設定オプションが設定されていない場合は0です。

@item  @samp{-W} 
@itemx  @samp{--function-context} 
関数全体を各変更のコンテキスト行として表示します。関数名は、 @samp{git diff}
がパッチハンクヘッダーを処理するのと同じ方法で決定されます(gitattributes(5) の @emph{Defining a custom
hunk-header} を参照)。

@item  @samp{--exit-code} 
diff(1）と同様のコードでプログラムを終了させます。つまり、違いがあった場合は 1 で終了し、 0 は違いがないことを意味します。

@item  @samp{--quiet} 
プログラムのすべての出力を無効にします。 @samp{--exit-code} を意味します。

@item  @samp{--ext-diff} 
外部diffヘルパーの実行を許可します。 gitattributes(5) を使用して外部diffドライバーを設定する場合は、
git-log(1) およびその仲間と一緒にこのオプションを使用する必要があります。

@item  @samp{--no-ext-diff} 
外部diffドライバーを禁止します。

@item  @samp{--textconv} 
@itemx  @samp{--no-textconv} 
バイナリファイルを比較するときに、外部テキスト変換フィルターの実行を許可(または禁止)します。 詳細については、
gitattributes(5)
を参照してください。textconvフィルターは通常、一方向の変換であるため、結果のdiffは人間の消費に適していますが、適用(apply)することはできません。このため、textconvフィルターは、
git-diff(1) および git-log(1) に対してのみデフォルトで有効になりますが、
git-format-patch(1) またはdiff配管コマンドに対しては有効になりません。

@item  @samp{--ignore-submodules[=<when>]} 
diff生成のサブモジュールへの変更を無視します。 <when> は、
none・untracked・dirty・allのいずれかになります。これがデフォルトです。noneを使用すると、追跡されていないファイルまたは変更されたファイルが含まれている場合、またはそのHEADがスーパープロジェクトに記録されているコミットと異なる場合にサブモジュールが変更されたと見なされ、
git-config(1) または gitmodules(5) の
ignoreオプションの設定をオーバーライドするために使用できます。untrackedが使用されている場合、サブモジュールには追跡されていないコンテンツのみが含まれている場合、サブモジュールはダーティとは見なされません(ただし、変更されたコンテンツはスキャンされます)。「dirty」を使用すると、サブモジュールの作業ツリーへのすべての変更が無視され、スーパープロジェクトに格納されているコミットへの変更のみが表示されます(これは1.7.0までの動作でした)。「all」を使用すると、サブモジュールへのすべての変更が非表示になります。

@item  @samp{--src-prefix=<prefix>} 
"a/" の代わりに、与えられたソースプレフィックス(source prefix)を表示します。

@item  @samp{--dst-prefix=<prefix>} 
"b/" の代わりに、指定された宛先プレフィックス(destination prefix)を表示します。

@item  @samp{--no-prefix} 
送信元(source)または宛先(destination)のプレフィックスを表示しません。

@item  @samp{--line-prefix=<prefix>} 
出力のすべての行に追加のプレフィックスを付加します。

@item  @samp{--ita-invisible-in-index} 
デフォルトでは、 "git add -N" によって追加されたエントリは、 "git diff" に既存の空のファイルとして表示され、 "git
diff --cached" に新しいファイルとして表示されます。このオプションを使用すると、エントリは "git diff"
では新しいファイルとして表示され、 "git diff --cached" では存在しません。このオプションは、
@samp{--ita-visible-in-index} で元に戻すことができます。どちらのオプションも実験的なものであり、将来削除される可能性があります。
@end table

これらの一般的なオプションの詳細については、 gitdiffcore(7) も参照してください。

@table @asis

@item  <tree-ish> 
diffするツリーオブジェクトのID。

@item  @samp{--cached} 
ディスク上のファイルはまったく考慮しないでください。

@item  @samp{--merge-base} 
<tree-ish>を直接比較する代わりに、<tree-ish>とHEADの間のマージベースを使用してください。
<tree-ish>はコミットでなければなりません。

@item  @samp{-m} 
デフォルトでは、インデックスに記録されているがチェックアウトされていないファイルは削除済みとして報告されます。このフラグにより、 @samp{git
diff-index} はチェックアウトされていないファイルは全て最新とします。
@end table

@noindent

@chapheading Raw output format

@samp{git-diff-index} と @samp{git-diff-tree} と @samp{git-diff-files} と @samp{git diff --raw}
からの生の出力形式は非常に似ています。

これらのコマンドはすべて、2つのセットを比較します。なお、比較されるものは異なります:

@table @asis

@item  git-diff-index <tree-ish> 
<tree-ish> とファイルシステム上のファイルを比較します。

@item  git-diff-index --cached <tree-ish> 
<tree-ish> とインデックスを比較します。

@item  git-diff-tree [-r] <tree-ish-1> <tree-ish-2> [<pattern>…] 
2つの引数で指定されたツリーを比較します。

@item  git-diff-files [<pattern>…] 
インデックスとファイルシステム上のファイルを比較します。
@end table

"git-diff-tree"
コマンドは、比較対象のハッシュ値を出力することで出力を開始します。その後、すべてのコマンドは、変更されたファイルごとに1つの出力行を出力します。

出力行は以下のようにフォーマットされます:

@example
in-place edit  :100644 100644 bcd1234 0123456 M file0
copy-edit      :100644 100644 abcd123 1234567 C68 file1 file2
rename-edit    :100644 100644 abcd123 1234567 R86 file1 file3
create         :000000 100644 0000000 1234567 A file4
delete         :100644 000000 1234567 0000000 D file5
unmerged       :000000 000000 0000000 0000000 U file6
@end example


つまり、左から右へ:

@enumerate 

@item
コロン(:)

@item
"src" のモード。作成(creation)またはマージされていない(unmerged)場合は 000000

@item
空白

@item
"dst" のモード。作成(creation)またはマージされていない(unmerged)場合は 000000

@item
空白

@item
"src" のsha1。作成(creation)またはマージされていない(unmerged)場合は 0@{40@}

@item
空白

@item
"dst" のsha1。作成(creation)またはマージされていない(unmerged)または作業ツリーにある場合は 0@{40@}

@item
空白

@item
ステータスの後に、オプションの「スコア数」("score" number)が続きます

@item
@samp{-z} オプションが使用されている場合はタブまたはNUL

@item
"src" のパス

@item
@samp{-z} オプションが使用されている場合タブまたはNUL。ステータスCまたはRにのみ存在します

@item
"dst" のパス。ステータスCまたはRにのみ存在します

@item
LFでレコードを終了します。 @samp{-z} オプションが使用されている場合はNULでレコードを終了します。
@end enumerate

ステータス文字の種類は以下のとおり:

@itemize 

@item
A: ファイルの追加

@item
C: ファイルを新しいファイルにコピー

@item
D: ファイルの削除

@item
M: ファイルの内容やモードの変更

@item
R: ファイル名の名前変更

@item
T: ファイルのタイプを変更

@item
U: ファイルはマージされていません(コミットする前にマージを完了する必要があります)

@item
X: 「不明な」変更タイプ(おそらくバグです。報告してください)
@end itemize

ステータス文字CとRの後には常にスコアが続きます(移動またはコピーのソースとターゲットの間の類似性のパーセンテージを示します)。ステータス文字Mの後には、ファイルの書き換えのスコア(非類似度のパーセンテージを示す)が続く場合があります。

<sha1> は、ファイルがファイルシステム上で新規で、インデックスと同期していない場合、すべて0として表示されます。

例:

@example
:100644 100644 5be4a4a 0000000 M file.c
@end example


@samp{-z} オプションを指定しない場合、構成変数 @samp{core.quotePath} で説明されているように、通常の文字以外(unusual
characters)を含むパス名が引用符で囲まれます(git-config(1) 参照)。 @samp{-z}
を使用すると、ファイル名がそのまま出力され、行はNULバイトで終了します。

@noindent

@chapheading diff format for merges

"git-diff-tree" と "git-diff-files" と "git-diff --raw" は、 @samp{-c} または @samp{--cc}
オプションを使用して、マージコミットに対してもdiff出力を生成できます。出力は、以下の点で上記の形式とは異なります:

@enumerate 

@item
親ごとにコロン(:)があります

@item
より多くの "src" モードと "src" sha1があります

@item
statusは、各親のステータス文字を連結したものです

@item
オプションの「スコア数」はありません

@item
ファイルのタブ区切りのパス名
@end enumerate

@samp{-c} および ` -cc` の場合、履歴のいずれかの側でファイルの名前が変更された場合でも、宛先(dst)または最終パスのみが表示されます。
@samp{--combined-all-paths} を使用すると、各親のパスの名前が表示され、それに続いてマージコミットのパスの名前が表示されます。

例: @samp{--combined-all-paths} を使用しない @samp{-c} および @samp{--cc} の場合:

@example
::100644 100644 100644 fabadb8 cc95eb0 4866510 MM       desc.c
::100755 100755 100755 52b7a2d 6d1ac04 d2ac7d7 RM       bar.sh
::100644 100644 100644 e07d6c5 9042e82 ee91881 RR       phooey.c
@end example


例: @samp{-c} または @samp{--cc} のいずれかに @samp{--combined-all-paths} が追加された場合:

@example
::100644 100644 100644 fabadb8 cc95eb0 4866510 MM       desc.c  desc.c  desc.c
::100755 100755 100755 52b7a2d 6d1ac04 d2ac7d7 RM       foo.sh  bar.sh  bar.sh
::100644 100644 100644 e07d6c5 9042e82 ee91881 RR       fooey.c fuey.c  phooey.c
@end example


注意: 'combined diff’は、すべての親から変更されたファイルのみをリストすることに注意してください。

@noindent

@chapheading Generating patch text with -p

git-diff(1) 、 git-log(1) 、 git-show(1) 、
git-diff-index(1) 、 git-diff-tree(1) 、
git-diff-files(1) に @samp{-p} オプションを付けて実行するとパッチテキストを生成します。パッチテキストの作成は、
@samp{GIT_EXTERNAL_DIFF} と @samp{GIT_DIFF_OPTS} 環境変数( git(1) 参照)、および @samp{diff}
属性( gitattributes(5) 参照)を介してカスタマイズできます。

-pオプションが生成するものは、従来のdiff形式とは少々異なります:

@enumerate 

@item
先行して、以下のような "git diff" ヘッダーがあります:

@example
diff --git a/file1 b/file2
@end example

名前の変更/コピーが含まれない限り、 @samp{a/} と @samp{b/} のファイル名は同じです。 特に、作成または削除の場合でも、 @samp{a/} または @samp{b/}
ファイル名の代わりに @samp{/dev/ null} が使用されることはありません。

名前変更/コピーが含まれる場合、 @samp{file1} と`file2`
は、それぞれ名前変更/コピーのソースファイルの名前と、名前変更/コピーが生成するファイルの名前を示します。

@item
その後に、1つ以上の拡張ヘッダー行達が続きます:

@example
old mode <mode>
new mode <mode>
deleted file mode <mode>
new file mode <mode>
copy from <path>
copy to <path>
rename from <path>
rename to <path>
similarity index <number>
dissimilarity index <number>
index <hash>..<hash> <mode>
@end example

ファイルモードは、ファイルタイプとファイル許可ビットを含む6桁の8進数として出力されます。

拡張ヘッダーのパス名には、 @samp{a/} および @samp{b/} プレフィックスは含まれません。

類似インデックス(similarity index)は変更されていない行のパーセンテージであり、非類似インデックス(dissimilarity
index)は変更された行のパーセンテージです。これは切り捨てられた整数であり、その後にパーセント記号が続きます。したがって、100％の類似インデックス値は2つの等しいファイルを表し、100％の非類似性は古いファイルから新しいファイルに移行された行がないことを意味します。

インデックス行には、変更前後のブロブオブジェクト名が含まれます。 <mode>
は、ファイルモードが変更されない場合に含まれます。それ以外の場合、別々の行は古いモードと新しいモードを示します。

@item
通常の文字でないキャラクタ(\"unusual\" characters)を含むパス名は、構成変数 @samp{core.quotePath}
で説明されているように引用符で囲まれています( git-config(1)参照)。

@item
出力内のすべての @samp{file1} ファイルはコミット前のファイルを参照し、すべての @samp{file2}
ファイルはコミット後のファイルを参照します。各変更を各ファイルに順番に適用するのは誤りです。たとえば、以下のパッチはaとbを交換します:

@example
diff --git a/a b/b
rename from a
rename to b
diff --git a/b b/a
rename from b
rename to a
@end example

@item
ハンクのヘッダーには、ハンクが適用される関数の名前が記載されています。特定の言語に合わせてこれを調整する方法の詳細については、
gitattributes(5) の "Defining a custom hunk-header" を参照してください。
@end enumerate

@noindent

@chapheading Combined diff format

diffを生成するコマンドは、マージを表示するときに @samp{-c} または @samp{--cc} オプションを使用して「合成diff」(combined
diff)を生成できます。これは git-diff(1) または git-show(1)
でのマージを表示するときのデフォルトの形式です。 注意: これらのコマンドのいずれかに適切な @samp{--diff-merges}
オプションを指定して、特定の形式で差分を強制的に生成できることにも注意してください。

合成diff形式は以下のようになります:

@example
diff --combined describe.c
index fabadb8,cc95eb0..4866510
--- a/describe.c
+++ b/describe.c
@@@@@@ -98,20 -98,12 +98,20 @@@@@@
        return (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;
  @}

- static void describe(char *arg)
 -static void describe(struct commit *cmit, int last_one)
++static void describe(char *arg, int last_one)
  @{
 +      unsigned char sha1[20];
 +      struct commit *cmit;
        struct commit_list *list;
        static int initialized = 0;
        struct commit_name *n;

 +      if (get_sha1(arg, sha1) < 0)
 +              usage(describe_usage);
 +      cmit = lookup_commit_reference(sha1);
 +      if (!cmit)
 +              usage(describe_usage);
 +
        if (!initialized) @{
                initialized = 1;
                for_each_ref(get_name);
@end example


@enumerate 

@item
まず "git diff"  ヘッダーがあり、以下のようになります( @samp{-c} オプションが使用されている場合):

@example
diff --combined file
@end example

または、以下のようになります( @samp{--cc} オプションが使用されている場合):

@example
diff --cc file
@end example

@item
その後に1つ以上の拡張ヘッダー行が続きます(以下の例は、2つの親とのマージを示しています):

@example
index <hash>,<hash>..<hash>
mode <mode>,<mode>..<mode>
new file mode <mode>
deleted file mode <mode>,<mode>
@end example

@samp{mode <mode>,<mode>..<mode>} 行は、<mode> の少なくとも1つが他の <mode>
と異なる場合にのみ表示されます。検出されたコンテンツの移動(名前の変更とコピーの検出)に関する情報を含む拡張ヘッダーは、2つの <tree-ish>
のdiffで機能するように設計されており、合成diff形式では使用されません。

@item
その後に2行の from-file/to-file ヘッダーが続きます

@example
--- a/file
+++ b/file
@end example

従来の統一diff形式の2行ヘッダーと同様に、 @samp{/dev/null} は、作成または削除されたファイルを通知するために使用されます。

ただし、 --combined-all-paths  オプションが指定されている場合、2行の from-file/to-file の代わりに、 N+1
行の from-file/to-file ヘッダーが取得されます。ここで、 N はマージコミットの親の数です。

@example
--- a/file
--- a/file
--- a/file
+++ b/file
@end example

この拡張形式は、名前変更またはコピー検出がアクティブな場合に役立ち、別の親のファイルの元の名前を確認できます。

@item
チャンクヘッダーの形式が変更され、誤って @samp{patch-p1}
にフィードされるのを防ぎます。合成差分形式は、マージコミットの変更を確認するために作成されたものであり、適用されることを意図したものではありません。この変更は、拡張された「インデックス」ヘッダーの変更に似ています:

@example
@@@@@@ <from-file-range> <from-file-range> <to-file-range> @@@@@@
@end example

合成diff形式のチャンクヘッダーには親の数+1の @samp{@@} 文字があります。
@end enumerate

従来の統一diff形式とは異なり、2つのファイルAとBが、 @samp{-} (マイナスはAに表示されますが、Bでは削除されます) または @samp{+}
(プラスはAにはありませんが、Bには追加されます)、または @samp{" "}（スペースは変更なし)
プレフィックスを持つ単一の列で表示される場合、この形式は2つ以上のファイル file1, file2,… を1つのファイルXと比較し、Xが各
fileN とどのように異なるかを示します。ファイルNごとに1つの列が出力行の前に追加され、Xの行が出力行とどのように異なるかを示します。

列Nの @samp{-} 文字は、その行が fileN に表示されているが、結果には表示されていないことを意味します。 列Nの @samp{+}
文字は、結果に行が表示され、 fileN にその行がないことを意味します(つまり、その親の観点から見て行が追加されたことを示す)。

上記の出力例では、関数のシグネチャが両方のファイルから見て変更されています(したがって、 file1 と file2 の両方から2つの @samp{-}
が削除され、さらに @samp{++} が追加されたため、 file1 と file2 のどちらにも表示されません)。また、他の8行は file1 と同じですが、
file2 には表示されません(したがって、接頭辞として @samp{+} が付けられます)。

@samp{git diff-tree -c} で表示される場合、マージコミットの親をマージ結果と比較します(つまり、 file1..fileN が親です)。
@samp{git diff-files -c} で表示される場合、2つの未解決のマージ親を作業ツリーファイルと比較します(つまり、 file1
はステージ2、別名「私たちのバージョン」、 file2 はステージ3、別名「彼らのバージョン」です)。

@noindent

@chapheading other diff formats

@samp{--summary} オプションは、新しく追加、削除、名前変更、およびコピーされたファイルを説明します。@samp{--stat} オプションは、
diffstat(1) グラフ を出力に追加します。これらのオプションは、 @samp{-p}
などの他のオプションと組み合わせることができ、人間が読むことを目的としています。

名前の変更またはコピーを伴う変更を表示する場合、 @samp{--stat}
出力は、パス名の共通のプレフィックスとサフィックスを組み合わせることにより、パス名をコンパクトにフォーマットします。
たとえば、4行を変更(modify)しながら @samp{arch/i386/Makefile} を @samp{arch/x86/Makefile}
に移動(move)する変更(change)は、次のように表示されます:

@example
arch/@{i386 => x86@}/Makefile    |   4 +--
@end example


@samp{--numstat} オプションは diffstat(1) 情報を提供しますが、人間ではなくソフトウェアで読むのを容易にするように設計されています。
@samp{--numstat} 出力のエントリは以下のようになります:

@example
1       2       README
3       1       arch/@{i386 => x86@}/Makefile
@end example


この形式は、左から右へ:

@enumerate 

@item
追加行数

@item
タブ

@item
削除行数

@item
タブ

@item
パス名(おそらく rename/copy 情報を含む)

@item
改行
@end enumerate

@samp{-z} 出力オプションが有効な場合、出力は以下のようにフォーマットされます:

@example
1       2       README NUL
3       1       NUL arch/i386/Makefile NUL arch/x86/Makefile NUL
@end example


これは:

@enumerate 

@item
追加行数

@item
タブ

@item
削除行数

@item
タブ

@item
NUL(rename/copy された場合のみ存在します)

@item
プリイメージのパス名

@item
NUL(rename/copy された場合のみ存在します)

@item
ポストイメージのパス名(rename/copy された場合のみ存在します)

@item
NUL
@end enumerate

名前が変更された場合のプリイメージパスの前の追加の @samp{NUL}
は、出力を読み取るスクリプトが、先読みせずに、読み取られている現在のレコードがシングルパスレコードであるか、名前変更/コピーレコードであるか、を判断できるようにするためです。追加および削除された行を読み取った後、
@samp{NUL} まで読み取るとパス名が生成されますが、それが @samp{NUL} の場合、レコードには2つのパスが表示されます。

@noindent

@chapheading OPERATING MODES

あなたはインデックスファイルを完全に信頼するか(@samp{--cached}
フラグを使用)、diffロジックにてstat状態と一致しないファイルを「仮変更」(tentatively
changed)として表示するようにするかを選択できます。これらの操作はどちらも非常に便利です。

@noindent

@chapheading CACHED MODE

@samp{--cached} が指定されている場合、あなたは以下のように問うことができます:

@example
HEADと、現在のインデックスの内容(`git write-tree` を
使用して書き込むもの)との違いを見せてください
@end example

たとえば、あなたがあなたの作業ディレクトリで作業して、インデックス内のいくつかのファイルを更新し、コミットする準備ができました。あなたは何をコミットしようとしているかを正確に確認したいのですが、比較のために新しいツリーオブジェクトを作成する必要はありません。そのためには、あなたは以下のようにします。

@example
git diff-index --cached HEAD
@end example

例: @samp{commit.c} の名前を @samp{git-commit.c} に変更し、それをインデックスファイルで有効にするために @samp{update-index}
を実行したとします。 インデックスファイルが私の作業ディレクトリと一致するため、 @samp{git diff-files} は何も表示しません。 しかし、
@samp{git diff-index} を実行すると以下のようになります:

@example
torvalds@@ppc970:~/git> git diff-index --cached HEAD
-100644 blob    4161aecc6700a2eb579e842af0b7f22b98443f74        commit.c
+100644 blob    4161aecc6700a2eb579e842af0b7f22b98443f74        git-commit.c
@end example

あなたは上記が名前変更(rename)であることが簡単にわかります。

実際、 @samp{git diff-index --cached} は、実際に @samp{git write-tree}
を実行して比較することと常に完全に同等です。実際に実行するのではなくて、自分がどういう状態にあるかを確認したいだけの場合には、こちらの方がはるかに優れています。

したがって、 @samp{git diff-index --cached}
を実行することは、「コミット済みとしてすでにマークしたものと、前のツリーとの違い」を自問するときに実に役に立つのです。

@noindent

@chapheading NON-CACHED MODE

非キャッシュモードは別のアプローチを取り、 @samp{git write-tree} + ` git diff-tree`
でエミュレートできないという点で、2つのモードの中でより便利になる可能性があります。したがって、これがデフォルトのモードです。非キャッシュバージョンは以下のように問いかけます:

@example
HEADと現在チェックアウトされているツリーの違いを
表示 - インデックスの内容や最新でないファイル
@end example

これは明らかに非常に役立つ質問です。何をコミットできるかがわかるからです。 この場合も、出力は @emph{git diff-tree -r}
の出力と完全に一致しますが、更にひとひねりあります。

そのひとひねりとは、一部のファイルがインデックスと一致しない場合、そのファイルには裏付けがないことです。これを示すために、魔法の「オールゼロ」sha1を使用します。
@samp{kernel/sched.c} を編集したが、実際にはまだ @emph{git update-index}
を実行していないとしましょう。そうすると、新しい状態に関連付けられた「オブジェクト」はなく、以下のようになります:

@example
torvalds@@ppc970:~/v2.6/linux> git diff-index --abbrev HEAD
:100644 100664 7476bb... 000000...      kernel/sched.c
@end example

つまり、ツリーが変更され、 @samp{kernel/sched.c}
が最新ではなく、新しいものが含まれている可能性があることを示しています。オールゼロのsha1は、実際の差分を取得するには、オブジェクト間のdiffを行うのではなく、作業ディレクトリ内のオブジェクトを直接確認する必要があることを意味します。

@quotation

@strong{Note}

このタイプの他のコマンドと同様に、 @samp{git diff-index} は実際にはファイルの内容をまったく調べません。 つまり、
@samp{kernel/sched.c} は実際には変更されておらず、触れた(touch)だけです。いずれの場合も、インデックスを同期させるには、 @samp{gitu
pdate-index} する必要があることに注意してください。
@end quotation

@quotation

@strong{Note}

「has been updated」(更新されました)と「is still dirty in the working
directory」(作業ディレクトリでまだダーティです)というファイルが混在している場合があります。「更新された」ファイルには有効なsha1が表示され、「インデックスと同期していない」ファイルには常に特別なすべてゼロのsha1が表示されるため、どのファイルがどの状態にあるかをいつでも確認できます。
@end quotation

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-diff-tree,,,Top
@chapheading Name

git-diff-tree — 2つのツリーオブジェクト間で、ブロブの内容とモードを比較します

@noindent

@chapheading Synopsis

@display
git diff-tree [--stdin] [-m] [-s] [-v] [--no-commit-id] [--pretty]
              [-t] [-r] [-c | --cc] [--combined-all-paths] [--root] [--merge-base]
              [<common diff options>] <tree-ish> [<tree-ish>] [<path>…]
@end display


@noindent

@chapheading DESCRIPTION

2つのツリーオブジェクト間で、ブロブの内容とモードを比較します

<tree-ish> が1つだけ指定されている場合、コミットはその親と比較されます(以下の @samp{--stdin} 参照)。

注意: @samp{git diff-tree} は、コミットオブジェクトにカプセル化されたツリーを使用できます。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-p} 
@itemx  @samp{-u} 
@itemx  @samp{--patch} 
パッチを生成します(generating patches に関するセクションを参照)。

@item  @samp{-s} 
@itemx  @samp{--no-patch} 
diff出力を抑制します。デフォルトでパッチを表示する @samp{git show} のようなコマンド、または @samp{--patch}
の効果をキャンセルする場合に便利です。

@item  @samp{-U<n>} 
@itemx  @samp{--unified=<n>} 
通常の3行ではなく、<n> 行の内容でdiffを生成します。
@samp{--patch} の機能を含んでいます。

@item  @samp{--output=<file>} 
stdout ではなく指定のファイルに出力します。

@item  @samp{--output-indicator-new=<char>} 
@itemx  @samp{--output-indicator-old=<char>} 
@itemx  @samp{--output-indicator-context=<char>} 
生成されたパッチの新しい行、古い行、またはコンテキスト行を示すために使用される文字を指定します。 通常、それらはそれぞれ @emph{+} 、 @emph{-} 、 ' '
です。

@item  @samp{--raw} 
生形式(raw format)でdiffを生成します。
これがデフォルトです。

@item  @samp{--patch-with-raw} 
@samp{-p --raw} の同義語。

@item  @samp{--indent-heuristic} 
diffハンクの境界をずらす(shift)ヒューリスティックを有効にして、パッチを読みやすくします。 これがデフォルトです。

@item  @samp{--no-indent-heuristic} 
インデントヒューリスティック(indent heuristic)を無効にします。

@item  @samp{--minimal} 
より多くの時間を費やして、可能な限り最小のdiffが生成されるようにします。

@item  @samp{--patience} 
"patience diff" アルゴリズムを使用してdiffを生成します。

@item  @samp{--histogram} 
"histogram diff" アルゴリズムを使用してdiffを生成します。

@item  @samp{--anchored=<text>} 
"anchored diff" アルゴリズムを使用してdiffを生成します。

このオプションは複数回指定できます。

行がソースと宛先の両方に存在し、1回だけ存在し、このテキストで始まる場合、このアルゴリズムは、その行が出力に削除または追加として表示されないようにします。内部で
"patience diff" アルゴリズムを使用します。

@item  @samp{--diff-algorithm=@{patience|minimal|histogram|myers@}} 
diffアルゴリズムを選択します。その派生(variants)は以下のとおりです:

@table @asis

@item  @samp{default}, @samp{myers} 
基本的な貪欲な差分アルゴリズム(greedy diff algorithm)。現在、これがデフォルトです。

@item  @samp{minimal} 
より多くの時間を費やして、可能な限り最小のdiffが生成されるようにします。

@item  @samp{patience} 
パッチを生成する時に "patience diff" アルゴリズムを使います。

@item  @samp{histogram} 
このアルゴリズムは、忍耐アルゴリズム(patience algorithm)を拡張して、「発生率の低い共通要素をサポート」(support
low-occurrence common elements)します。
@end table

たとえば、 あなたが @samp{diff.algorithm}
変数をデフォルト以外の値に設定した上で、それでもデフォルト値を使用する場合は、@samp{--diff-algorithm=default}
オプションを使用する必要があります。

@item  @samp{--stat[=<width>[,<name-width>[,<count>]]]} 
diffstatを生成します。
デフォルトでは、必要なだけのスペースがファイル名部分に使用され、残りはグラフ部分に使用されます。最大幅はデフォルトで端末幅、または端末に接続されていない場合は80桁であり、
@samp{<width>} で上書きできます。ファイル名部分の幅は、コンマの後に別の幅 @samp{<name-width>}
を指定することで制限できます。グラフ部分の幅は、 @samp{--stat-graph-width=<width>}
(統計グラフを生成するすべてのコマンドに影響します)を使用するか、 @samp{diff.statGraphWidth=<width>} ( @samp{git
format-patch} に影響しません)を設定することによって制限できます。3番目のパラメータ @samp{<count>}
を指定することにより、出力を最初の @samp{<count>} 行に制限し、それに @samp{...} が続く形にできます。

これらのパラメータは、 @samp{--stat-width=<width>} と @samp{--stat-name-width=<name-width>} と
@samp{--stat-count=<count>} を使用して個別に設定することもできます。

@item  @samp{--compact-summary} 
ファイルの作成や削除( "new" または "gone" 。オプションでシンボリックリンクの場合は "+l"
)、diffstatのモード変更(実行可能ビットを追加または削除する場合は、それぞれ "+x" または "-x"
)など、拡張ヘッダー情報の要約を出力します。情報はファイル名部分とグラフ部分の間に置かれます。本機能は @samp{--stat} の機能を含んでいます。

@item  @samp{--numstat} 
@samp{--stat`に似ていますが、プログラムで処理しやすい(machine
friendly)ように、追加および削除された行数を10進表記とパス名で省略形なしで表示します。バイナリファイルの場合、 `0 0} の代わりに2つの
@samp{-} を出力します。

@item  @samp{--shortstat} 
変更されたファイルの総数と、追加および削除された行の数を含む @samp{--stat} 形式の最後の行のみを出力します。

@item  @samp{-X[<param1,param2,...>]} 
@itemx  @samp{--dirstat[=<param1,param2,...>]} 
各サブディレクトリの相対的な変更量の分布を出力します。 @samp{--dirstat}
の動作は、パラメータのコンマ区切りリストを渡すことでカスタマイズできます。デフォルトは、 @samp{diff.dirstat}
構成変数によって制御されます(git-config(1) 参照)。以下のパラメータを使用できます:

@table @asis

@item  @samp{changes} 
ソースから削除された、または宛先に追加された行をカウントして、dirstat数を計算します。これは、ファイル内の純粋なコード移動の量を無視します。つまり、ファイル内の行の再配置は、他の変更ほどカウントされません。これは、パラメーターが指定されていない場合のデフォルトの動作です。

@item  @samp{lines} 
通常の行ベースのdiff分析を実行し、削除/追加された行数を合計して、dirstat数を計算します。
(バイナリファイルの場合、バイナリファイルには行の概念がないため、代わりに64バイトのチャンクをカウントします)。 これは @samp{changes}
動作よりも高価な @samp{--dirstat} 動作ですが、他の変更と同じようにファイル内の再配置された行をカウントします。結果の出力は、他の
@samp{--*stat} オプションから得られるものと一致しています。

@item  @samp{files} 
変更されたファイルの数を数えて、dirstat数を計算します。変更された各ファイルは、dirstat分析で等しくカウントされます。これは、ファイルの内容をまったく調べる必要がないため、計算コストが最もかからない
@samp{--dirstat} の動作です。

@item  @samp{cumulative} 
親ディレクトリの子ディレクトリの変更も同様にカウントします。 @samp{cumulative}(累積的)
を使用する場合、報告されるパーセンテージの合計が100%を超える場合があることに注意してください。デフォルトの(非累積的な)動作は、@samp{noncumulative}
パラメーターで指定できます。

@item  <limit> 
整数パラメーターは、カットオフパーセント(デフォルトでは3%)を指定します。指定の割合より少ないディレクトリは、出力に表示されません。
@end table

例: 変更されたファイルの総数の10%未満のディレクトリを無視し、親ディレクトリに子ディレクトリの数を累積しながら、変更されたファイルをカウント:
@samp{--dirstat=files,10,cumulative}

@item  @samp{--cumulative} 
@samp{--dirstat=cumulative} と同義語

@item  @samp{--dirstat-by-file[=<param1,param2>...]} 
@samp{--dirstat=files,param1,param2...} と同義語

@item  @samp{--summary} 
作成、名前変更、モード変更などの拡張ヘッダー情報の短い要約(condensed summary)を出力します。

@item  @samp{--patch-with-stat} 
@samp{-p --stat} と同義語。

@item  @samp{-z} 
@samp{--raw} または @samp{--numstat} または @samp{--name-only} または @samp{--name-status} が指定されている場合は
パス名を変更せず、出力フィールドターミネータとしてNULLを使用してください。

このオプションがないと、構成変数 @samp{core.quotePath} で説明されているように、 通常の文字以外(unusual
characters)を含むパス名が引用符で囲まれます(git-config(1) 参照)。

@item  @samp{--name-only} 
変更されたファイルの名前のみを表示します。 多くの場合、ファイル名はUTF-8でエンコードされます。 詳細については、
git-log(1) のマニュアルページにあるエンコーディングに関する議論(the discussion about
encoding)を参照してください。

@item  @samp{--name-status} 
変更されたファイルの名前とステータスのみを表示します。ステータス文字の意味については、 @samp{--diff-filter}
オプションの説明を参照してください。 @samp{--name-only} と同じように、ファイル名はしばしばUTF-8でエンコードされます。

@item  @samp{--submodule[=<format>]} 
サブモジュールの違いをどのように表示するかを指定します。 @samp{--submodule=short} を指定する場合、 @emph{short}
形式が使用されます。この形式は、範囲の最初と最後にコミットの名前を表示するだけです。 @samp{--submodule} または
@samp{--submodule=log} が指定されている場合、 @emph{log} 形式が使用されます。この形式では、
git-submodule(1) @samp{summary} のように範囲内のコミットが一覧表示されます。 @samp{--submodule=diff}
が指定されている場合、 @emph{diff}
形式が使用されます。この形式は、コミット範囲間のサブモジュールの内容の変更のインラインdiffを示します。configオプションが設定されていない場合、デフォルトは
@samp{diff.submodule} または @emph{short} 形式です。

@item  @samp{--color[=<when>]} 
色付きのdiffを表示します。 @samp{--color} (つまり、 @emph{=<when>} ) は @samp{--color=always} と同じです。
@emph{<when>} は、 @samp{always} または @samp{never} または @samp{auto} のいずれかになります。

@item  @samp{--no-color} 
カラーdiffをオフにします。
@samp{--color=never} と同じです。

@item  @samp{--color-moved[=<mode>]} 
ソースコードの移動した行を別の色にします。
<mode>は、オプションが指定されていない場合はデフォルトで @emph{no} になり、
モードが指定されていないオプションが指定されている場合は @emph{zebra} になります。
モードは以下のいずれかでなければなりません:

@table @asis

@item  no 
移動行をハイライトしません。

@item  default 
@samp{zebra} の同義語です。これは、将来、より賢明なモードに変更される可能性があります。

@item  plain 
ある場所で追加され、別の場所で削除された行は、 @emph{color.diff.newMoved} で色付けされます。 同様に、
@emph{color.diff.oldMoved}
は、差分の別の場所に追加された削除された行に使用されます。このモードは移動された行をピックアップしますが、コードのブロックが順列なしで移動されたかどうかを判断することはレビューではあまり役に立ちません。

@item  blocks 
少なくとも20文字の英数字の移動テキストのブロックが貪欲に検出されます。検出されたブロックは、 @emph{color.diff.@{old,new@}Moved}
色のいずれかを使用して色付けされます。隣接するブロックを区別することはできません。

@item  zebra 
移動されたテキストのブロックは、 @emph{blocks} モードの場合と同様に検出されます。 ブロックは、
@emph{color.diff.@{old,new@}Moved} 色または @emph{color.diff.@{old,new@}MovedAlternative}
色のいずれかを使用して色付けされます。2つの色の間の変化は、新しいブロックが検出されたことを示します。

@item  dimmed-zebra 
@emph{zebra}
に似ていますが、移動されたコードの重要でない部分の追加の調光(dimmed)が実行されます。隣接する2つのブロックの境界線は興味深いと見なされ、残りは興味深いものではありません。
@samp{dimmed_zebra} は非推奨の同義語です。
@end table

@item  @samp{--no-color-moved} 
移動検出をオフにします。 これは、構成設定を上書きするために使用できます。 @samp{--color-moved=no} と同じです。

@item  @samp{--color-moved-ws=<modes>} 
これは、 @samp{--color-moved} の移動検出を実行するときに空白を無視する方法を設定します。
これらのモードは、コンマ区切りのリストとして指定できます:

@table @asis

@item  no 
移動行検出を実行するときに、空白(whitespace)を無視しない。

@item  ignore-space-at-eol 
行末(EOL)での空白(whitespace)の変更を無視します。

@item  ignore-space-change 
空白(whitespace)の数の変更は無視してください。これは、行末の空白(whitespace)を無視し、1つ以上の空白文字(whitespace
characters)の他のすべてのシーケンスを同等と見なします。

@item  ignore-all-space 
行を比較するときは空白(whitespace)を無視します。これにより、一方の行に空白があり、もう一方の行に空白がない場合でも、違いは無視されます。

@item  allow-indentation-change 
最初に移動検出で空白(whitespace)を無視し、空白(whitespace)の変更が行ごとに同じである場合にのみ、移動されたコードブロックをブロックにグループ化します。
これは他のモードと互換性がありません。
@end table

@item  @samp{--no-color-moved-ws} 
移動検出を実行するときは、空白(whitespace)を無視しないでください。これは、構成設定を上書きするために使用できます。
@samp{--color-moved-ws=no} と同じです。

@item  @samp{--word-diff[=<mode>]} 
<mode> を使用して変更された単語を区切ることにより、単語のdiffを表示します。デフォルトでは、単語は空白で区切られます。 以下の
@samp{--word-diff-regex} を参照してください。 <mode> のデフォルトは 'plain’です。 <mode>
は以下のいずれかである必要があります:

@table @asis

@item  color 
変更された単語(word)を色のみを使用して強調表示します。 @samp{--color} を意味します。

@item  plain 
単語を @samp{[-removed-]} および @samp{@{+added+@}} として表示します。
区切り文字が入力に表示されている場合、区切り文字をエスケープしようとしないため、出力があいまいになる可能性があります。

@item  porcelain 
スクリプトの使用を目的とした特別な行ベースの形式を使用します。追加/削除/無変更については、通常の統一されたdiff形式で印刷され、行の先頭の
@samp{+}/@samp{-}/` ` 文字で始まり、行の終わりまで続きます。入力の改行は、それ自体の行のチルダ @samp{~} で表されます。

@item  none 
単語(word)のdiffを再度無効にします。
@end table

注意: 最初のモードの名前にもかかわらず、有効になっている場合、すべてのモードで変更された部分を強調するために色が使用されることに注意してください。

@item  @samp{--word-diff-regex=<regex>} 
空白以外を単語と見なす代わりに、 <regex> を使用して単語が何であるかを決定します。また、すでに有効になっていない限り、この機能は
@samp{--word-diff} の機能を含んでいます。

<regex> の重複しないマッチはすべて、単語と見なされます。これらのマッチの間のすべては空白と見なされ、違いを見つけるためとしては無視されます！
正規表現に @samp{|[^[:space:]]}
を追加して、空白以外のすべての文字とマッチすることを確認することをお勧めします。改行を含むマッチは、改行で黙って切り捨てられます！

たとえば、 @samp{--word-diff-regex=.} は各文字を単語として扱い、それに応じて文字ごとの違いを表示します。

正規表現は、diffドライバーまたは構成オプション(configuration option)を介して設定することもできます。
gitattributes(5) または git-config(1)
を参照してください。これを指定すると、diffドライバーまたは構成設定(configuration
settings)が明示的にオーバーライドされます。diffドライバーは構成設定を上書きします。

@item  @samp{--color-words[=<regex>]} 
@samp{--word-diff=color} に @samp{--word-diff-regex=<regex>}
を加えたものに相当します(正規表現が指定されている場合)。

@item  @samp{--no-renames} 
構成ファイルにデフォルトで指定されている場合でも、名前変更の検出をオフにします。

@item  @samp{--[no-]rename-empty} 
名前変更ソースとして空のブロブを使用するかどうか。

@item  @samp{--check} 
変更によって競合マーカーまたは空白エラーが発生した場合に警告します。空白エラーと見なされるものは、 @samp{core.whitespace}
構成によって制御されます。
デフォルトでは、末尾の空白(空白のみで構成される行を含む)と、行の最初のインデント内で直後にタブ文字が続くスペース文字は、空白エラーと見なされます。問題が見つかった場合は、ゼロ以外のステータスで終了します。なお、
--exit-code とは互換性がありません。

@item  @samp{--ws-error-highlight=<kind>} 
diffの @samp{context} または @samp{old} または @samp{new} 行の空白エラーを強調表示します。複数の値はコンマで区切られ、 @samp{none}
は前の値をリセットし、 @samp{default} はリストを @samp{new} にリセットし、 @samp{all} は old、new、context
の省略形です。このオプションが指定されておらず、構成変数 @samp{diff.wsErrorHighlight} が設定されていない場合、 @samp{new}
行の空白エラーのみが強調表示されます。空白エラーは @samp{color.diff.whitespace} で色分けされています。

@item  @samp{--full-index} 
パッチ形式の出力を生成するときは、最初の一握りの文字(first handful of
characters)の代わりに、「インデックス」行にイメージ前およびイメージ後の完全ブロブオブジェクト名を表示します。

@item  @samp{--binary} 
@samp{--full-index} に加えて、 @samp{git-apply} で適用できるバイナリ差分を出力します。
@samp{--patch} の機能を含んでいます。

@item  @samp{--abbrev[=<n>]} 
完全な40バイトの16進オブジェクト名をdiff-raw形式の出力とdiff-treeヘッダー行に表示する代わりに、オブジェクトを一意に参照する、少なくとも
@emph{<n>} 桁の16進数の長さの最短のプレフィックスを表示します。diffパッチ出力形式では、 @samp{--full-index} が優先されます。つまり、
@samp{--full-index} が指定されている場合、 @samp{--abbrev} に関係なく、完全なブロブ名が表示されます。デフォルト以外の桁数は、
@samp{--abbrev=<n>} で指定できます。

@item  @samp{-B[<n>][/<m>]} 
@itemx  @samp{--break-rewrites[=[<n>][/<m>]]} 
完全な書き換えの変更を削除と作成のペアに分割します。これには以下の2つの目的があります:

これは、ファイルの完全な書き換えに相当する変更が、コンテキストとしてテキストで一致する非常に少数の行と混合された一連の削除と挿入としてではなく、古いものすべての単一の削除とそれに続く
すべての新しいものを1回挿入し、数値 @samp{m} が -B オプションのこの側面を制御します(デフォルトは60%)。 @samp{-B/70%}
は、Gitがそれを完全な書き換えと見なすために、元の30%未満が結果に残る必要があることを指定します(つまり、結果のパッチは、コンテキスト行と混合された一連の削除と挿入になります)。

-M と一緒に使用すると、完全に書き換えられたファイルも名前変更のソースと見なされ(通常、 -M
は、消えたファイルのみを名前変更のソースと見なします)、数 @samp{n} が -Bオプションのこの側面を制御します(デフォルトは50%)。 @samp{-B20%}
は、ファイルのサイズの20%以上と比較して、追加および削除を伴う変更が、別のファイルへの名前変更の可能なソースとして取得される資格があることを指定します。

@item  @samp{-M[<n>]} 
@itemx  @samp{--find-renames[=<n>]} 
名前の変更(renames)を検知する。
@samp{n} が指定されている場合、それは類似性インデックスのしきい値です
(つまり、ファイルのサイズと比較した追加/削除の量)。
たとえば、 @samp{-M90%} は、ファイルの90%以上が変更されていない場合、
Gitが削除/追加のペアを名前変更と見なす必要があることを意味します。
@samp{%} 記号がない場合、数値は小数として読み取られ、その前に小数点が付きます。
つまり、 @samp{-M5} は0.5になるため、@samp{-M50%} と同じになります。
同様に、 @samp{-M05} は @samp{-M5%} と同じです。
検出を正確な名前変更に制限するには、 @samp{-M100%} を使用します。
デフォルトの類似性インデックスは50%です。

@item  @samp{-C[<n>]} 
@itemx  @samp{--find-copies[=<n>]} 
名前と同様コピーを検出します。 @samp{--find-copies-harder} @samp{も参照してください。 `n} を指定すると、 @samp{-M<n>}
と同じ意味になります。

@item  @samp{--find-copies-harder} 
パフォーマンス上の理由から、デフォルトでは、 @samp{-C}
オプションは、コピーの元のファイルが同じ変更組(changeset)で変更された場合にのみコピーを検索します。このフラグにより、コマンドは変更されていないファイルをコピー元の候補として検査します。これは大規模なプロジェクトでは非常にコストのかかる操作であるため、注意して使用してください。
複数の @samp{-C} オプションを指定しても同じ効果があります。

@item  @samp{-D} 
@itemx  @samp{--irreversible-delete} 
削除するプレイメージ(preimage)を省略します。つまり、ヘッダーのみを出力し、プレイメージと @samp{/dev/null}
の差分は出力しません。結果のパッチは、 @samp{patch} または @samp{git apply}
で適用されることを意図していません。これは、変更後にテキストを確認することに集中したい人のためだけのものです。さらに、出力には明らかに、そのようなパッチを手動でも逆に適用するのに十分な情報が不足しているため、オプションの名前が付けられています。

@samp{-B} と併用する場合は、削除/作成ペアの削除部分のプリイメージ(preimage)も省略してください。

@item  @samp{-l<num>} 
@samp{-M} および @samp{-C}
オプションには、名前変更/コピーのサブセットを安価に検出できるいくつかの準備手順が含まれ、その後に、残りのすべてのペアになっていない宛先をすべての関連ソースと比較する徹底的なフォールバック部分が続きます。(名前の変更の場合、残りのペアになっていないソースのみが関係します。コピーの場合、すべての元のソースが関係します)。Nのソースと宛先の場合、この徹底的なチェックのコストは
O(N^2)
です。このオプションは、関係するソース/宛先ファイルの数が指定された数を超えた場合に、名前変更/コピー検出の完全な部分が実行されないようにします。デフォルトは
diff.renameLimit です。 値0は無制限として扱われることに注意してください。

@item  @samp{--diff-filter=[(A|C|D|M|R|T|U|X|B)...[*]]} 
追加(Add)・コピー(Copy)・削除(Delete)・変更(Modify)・名前変更(Rename)されたファイル、タイプが変更されたファイル(T)、マージされていないファイル(U)、不明なファイル(X)、またはペアリングが壊れているファイル(B)のみを選択します。フィルタ文字(無しも含む)の任意の組み合わせを使用できます。
組み合わせに @samp{*} (全てまたは無し)が追加されると、比較で他の基準に一致するファイルがある場合、すべてのパスが選択されます。
他の基準に一致するファイルがない場合、何も選択されません。

また、逆に、除外したい時はこれらの各大文字指定を小文字にして指定します。例えば @samp{--diff-filter=ad}
は、追加および削除されたパスを除外します。

注意:すべてのdiffがすべてのタイプを特徴とするわけではないことに注意してください。
たとえば、インデックスから作業ツリーへのdiffにエントリを追加することはできません(diffに含まれるパスのセットは、インデックスの内容によって制限されるため)。
同様に、これらのタイプの検出が無効になっている場合、コピーおよび名前変更されたエントリは表示されません。

@item  @samp{-S<string>} 
ファイル内の指定の文字列(つまり、 addition 、deletion)の出現回数の差分を調べます。スクリプターが使用することを目的としています。

(構造体など)コードの正確なブロックを探していて、そのブロックが最初に作成されてからの履歴を知りたい場合に便利です。この機能を繰り返し使用して、プリイメージ(preimage)内の興味深いブロックを
@samp{-S} にフィードバックし、そしてあなたはそれをブロックの最初のバージョンを取得するまで続けます。

バイナリファイルも検索されます。

@item  @samp{-G<regex>} 
パッチテキストに <regex> にマッチする 追加/削除 された行が含まれている差分を探します。

@samp{-S<regex> --pickaxe-regex} と @samp{-G<regex>}
の違いを説明するために、同じファイル内で以下のdiffを使用してコミットすることを検討してください:

@example
+    return frotz(nitfol, two->ptr, 1, 0);
...
-    hit = frotz(nitfol, mf2.ptr, 1, 0);
@end example


@samp{git log -G"frotz\(nitfol"} はこのコミットを表示しますが、 @samp{git log -S"frotz\(nitfol"
--pickaxe-regex} は表示しません(その文字列の出現回数が変更されなかったため)。

@samp{--text} が提供されていない限り、 textconv フィルターのないバイナリファイルのパッチは無視されます。

詳細については gitdiffcore(7) の @emph{pickaxe} エントリを参照してください。

@item  @samp{--find-object=<object-id>} 
指定されたオブジェクトの出現回数を変更する違いを探します。 @samp{-S}
と同様に、引数だけが異なり、特定の文字列ではなく特定のオブジェクトIDを検索します。

オブジェクトは、ブロブまたはサブモジュールのコミットにすることができます。 これは、 @samp{git-log} の @samp{-t}
オプションがツリーも探すことを意味します。

@item  @samp{--pickaxe-all} 
@samp{-S} または @samp{-G} が変更を見つけたら、 <string>
の変更を含むファイルだけでなく、その変更セット(changeset)のすべての変更を表示します。

@item  @samp{--pickaxe-regex} 
@samp{-S} に指定した <string> を拡張POSIX正規表現として扱います。

@item  @samp{-O<orderfile>} 
ファイルが出力に表示される順序を制御します。これは @samp{diff.orderFile}
構成変数をオーバーライドします(git-config(1) 参照)。 @samp{diff.orderFile} をキャンセルするには、
@samp{-O/dev/null} を使用します。

出力順序は、 <orderfile>
内のglobパターンの順序によって決定されます。最初のパターンに一致するパス名を持つすべてのファイルが最初に出力され、2番目のパターンに一致する(ただし最初のパターンには一致しない)パス名を持つすべてのファイルが次に出力されます。パス名がどのパターンとも一致しないすべてのファイルは、ファイルの最後に暗黙のすべて一致パターンがあるかのように、最後に出力されます。複数のパス名のランクが同じである場合(同じパターンに一致するが、以前のパターンには一致しない)、相互の出力順序は通常の順序です。

<orderfile> は以下のとおりパースされます:

@itemize 

@item
空白行は無視されるため、読みやすくするための区切りとして使用できます。

@item
ハッシュ ("@samp{#}") で始まる行は無視されるため、コメントに使用できます。
パターンがハッシュで始まる場合は、パターンの先頭にバックスラッシュ(訳注:日本では環境により円記号)("@samp{\}") を追加します。

@item
他の各行には、単一のパターンが含まれています。
@end itemize

パターンは、 FNM_PATHNAME フラグなしで fnmatch(3)
に使用されるパターンと同じ構文とセマンティクスを持ちますが、最終的なパス名コンポーネントをいくつも削除するとパターンと一致する場合、パス名もパターンと一致する点が異なります。
たとえば、パターン "@samp{foo*bar}" は、 "@samp{fooasdfbar}" および "@samp{foo/bar/baz/asdf}" と一致しますが、
"@samp{foobarx}" とは一致しません。

@item  @samp{--skip-to=<file>} 
@itemx  @samp{--rotate-to=<file>} 
名前付き <file> の前のファイルを出力から破棄するか(スキップして)、出力の最後に移動させます(ローテーションさせます)。 これらは主に @samp{git
difftool} コマンドを使用するために考案されたものであり、それ以外の場合はあまり役に立たない可能性があります。

@item  @samp{-R} 
2つの入力を交換します。 つまり、インデックスまたはディスク上のファイルとツリーの内容の違いを表示します。

@item  @samp{--relative[=<path>]} 
@itemx  @samp{--no-relative} 
プロジェクトのサブディレクトリから実行する場合、このオプションを使用して、ディレクトリ外の変更を除外し、それに関連するパス名を表示するように指示できます。サブディレクトリ(ベアリポジトリなど)にいない場合は、引数として
<path> を指定することで、出力を作成するサブディレクトリに名前を付けることができます。 @samp{--no-relative`は、
`diff.relative} 設定オプションと以前の @samp{--relative} の両方を打ち消すために使用できます。

@item  @samp{-a} 
@itemx  @samp{--text} 
すべてのファイルをテキストとして扱います。

@item  @samp{--ignore-cr-at-eol} 
比較を行うときは、行末のキャリッジリターン(carriage-return)を無視します。

@item  @samp{--ignore-space-at-eol} 
行末(EOL)での空白(whitespace)の変更を無視します。

@item  @samp{-b} 
@itemx  @samp{--ignore-space-change} 
空白(whitespace)の数の変更は無視してください。これは、行末の空白(whitespace)を無視し、1つ以上の空白文字(whitespace
characters)の他のすべてのシーケンスを同等と見なします。

@item  @samp{-w} 
@itemx  @samp{--ignore-all-space} 
行を比較するときは空白を無視します。 これにより、一方の行に空白があり、もう一方の行に空白がない場合でも、違いは無視されます。

@item  @samp{--ignore-blank-lines} 
全て空白の行の変更は無視します。

@item  @samp{-I<regex>} 
@itemx  @samp{--ignore-matching-lines=<regex>} 
すべての行が <regex> にマッチする変更を無視します。このオプションは複数回指定できます。

@item  @samp{--inter-hunk-context=<lines>} 
指定された行数までの差分ハンク間のコンテキストを表示し、それによって互いに近いハンクを融合します。デフォルトは
@samp{diff.interHunkContext} で、設定オプションが設定されていない場合は0です。

@item  @samp{-W} 
@itemx  @samp{--function-context} 
関数全体を各変更のコンテキスト行として表示します。関数名は、 @samp{git diff}
がパッチハンクヘッダーを処理するのと同じ方法で決定されます(gitattributes(5) の @emph{Defining a custom
hunk-header} を参照)。

@item  @samp{--exit-code} 
diff(1）と同様のコードでプログラムを終了させます。つまり、違いがあった場合は 1 で終了し、 0 は違いがないことを意味します。

@item  @samp{--quiet} 
プログラムのすべての出力を無効にします。 @samp{--exit-code} を意味します。

@item  @samp{--ext-diff} 
外部diffヘルパーの実行を許可します。 gitattributes(5) を使用して外部diffドライバーを設定する場合は、
git-log(1) およびその仲間と一緒にこのオプションを使用する必要があります。

@item  @samp{--no-ext-diff} 
外部diffドライバーを禁止します。

@item  @samp{--textconv} 
@itemx  @samp{--no-textconv} 
バイナリファイルを比較するときに、外部テキスト変換フィルターの実行を許可(または禁止)します。 詳細については、
gitattributes(5)
を参照してください。textconvフィルターは通常、一方向の変換であるため、結果のdiffは人間の消費に適していますが、適用(apply)することはできません。このため、textconvフィルターは、
git-diff(1) および git-log(1) に対してのみデフォルトで有効になりますが、
git-format-patch(1) またはdiff配管コマンドに対しては有効になりません。

@item  @samp{--ignore-submodules[=<when>]} 
diff生成のサブモジュールへの変更を無視します。 <when> は、
none・untracked・dirty・allのいずれかになります。これがデフォルトです。noneを使用すると、追跡されていないファイルまたは変更されたファイルが含まれている場合、またはそのHEADがスーパープロジェクトに記録されているコミットと異なる場合にサブモジュールが変更されたと見なされ、
git-config(1) または gitmodules(5) の
ignoreオプションの設定をオーバーライドするために使用できます。untrackedが使用されている場合、サブモジュールには追跡されていないコンテンツのみが含まれている場合、サブモジュールはダーティとは見なされません(ただし、変更されたコンテンツはスキャンされます)。「dirty」を使用すると、サブモジュールの作業ツリーへのすべての変更が無視され、スーパープロジェクトに格納されているコミットへの変更のみが表示されます(これは1.7.0までの動作でした)。「all」を使用すると、サブモジュールへのすべての変更が非表示になります。

@item  @samp{--src-prefix=<prefix>} 
"a/" の代わりに、与えられたソースプレフィックス(source prefix)を表示します。

@item  @samp{--dst-prefix=<prefix>} 
"b/" の代わりに、指定された宛先プレフィックス(destination prefix)を表示します。

@item  @samp{--no-prefix} 
送信元(source)または宛先(destination)のプレフィックスを表示しません。

@item  @samp{--line-prefix=<prefix>} 
出力のすべての行に追加のプレフィックスを付加します。

@item  @samp{--ita-invisible-in-index} 
デフォルトでは、 "git add -N" によって追加されたエントリは、 "git diff" に既存の空のファイルとして表示され、 "git
diff --cached" に新しいファイルとして表示されます。このオプションを使用すると、エントリは "git diff"
では新しいファイルとして表示され、 "git diff --cached" では存在しません。このオプションは、
@samp{--ita-visible-in-index} で元に戻すことができます。どちらのオプションも実験的なものであり、将来削除される可能性があります。
@end table

これらの一般的なオプションの詳細については、 gitdiffcore(7) も参照してください。

@table @asis

@item  <tree-ish> 
ツリーオブジェクトのID。

@item  <path>… 
<path>… が提供された場合、結果は提供されたパススペックの1つに一致するファイルのサブセットに制限されます。

@item  @samp{-r} 
サブツリーを再帰的に辿ります。

@item  @samp{-t} 
ツリーエントリ自体とサブツリーを表示します。 @samp{-r} の機能を含みます。

@item  @samp{--root} 
@samp{--root} が指定されている場合、最初のコミット(initial commit)は大きな作成イベント(big creation
event)として表示されます。これは、NULLツリーに対する差分と同等です。

@item  @samp{--merge-base} 
<tree-ish>を直接比較する代わりに、2つの<tree-ish>間のマージベースをbefore側として使用します。2つの<tree-ish>が指定されている必要があり、両方ともコミットである必要があります。

@item  @samp{--stdin} 
`--stdin`が指定されている場合、コマンドはコマンドラインから<tree-ish>引数を取りません。代わりに、2つの<tree> または
1つの<commit> または <commit>のリストのいずれかを含む行を標準入力から読み取ります。（区切り文字として空白1文字を使用します。）

2つのツリーが与えられると、最初のツリーと2番目のツリーが比較されます。単一のコミットが与えられると、そのコミットをその親と比較します。
残りのコミットは、指定されると、最初のコミットの親であるかのように使用されます。

2つのツリーを比較する場合、違いの前に両方のツリーのID(スペースで区切られ、改行で終了)が出力されます。コミットを比較する場合、最初の(または唯一の)コミットのIDと、それに続く改行が出力されます。

以下のフラグは、(ツリーではなく、)コミットを比較するときの動作に影響します。

@item  @samp{-m} 
デフォルトでは、 @samp{git diff-tree --stdin} はマージコミットの違いを表示しません。
このフラグを使用すると、すべての親からのコミットとの違いが示されます。 @samp{-c} も参照してください。

@item  @samp{-s} 
デフォルトでは、 @samp{git diff-tree --stdin} は、機械可読形式( @samp{-p} なし) または パッチ形式( ` -p`
あり)のいずれかで違いを示します。この出力を抑制できます。 @samp{-v} フラグでのみ役立ちます。

@item  @samp{-v} 
このフラグにより、 @samp{git diff-tree --stdin} は、違いの前にコミットメッセージも表示します。

@item  @samp{--pretty[=<format>]} 
@itemx  @samp{--format=<format>} 
コミットログの内容を指定された形式できれいに印刷(pretty-print)します。 @emph{<format>} は
oneline・short・medium・full・fuller・reference・email・raw・format:<string>・tformat:<string>
のいずれかになります。 @emph{<format>} が上記のいずれでもなく、 @emph{%placeholder} が含まれている場合、
@emph{--pretty=tformat:<format>} が指定されたかのように動作します。

各フォーマットの詳細については、 "PRETTY FORMATS" セクションを参照してください。 @emph{=<format>}
の部分を省略すると、デフォルトで @emph{medium} になります。

注意: リポジトリー構成でデフォルトのpretty formatを指定できます(git-config(1) 参照)。

@item  @samp{--abbrev-commit} 
40バイトの16進コミットオブジェクト名全体を表示する代わりに、オブジェクトに一意の名前を付けるプレフィックスを表示します。
"--abbrev=<n>" (表示されている場合はdiff出力も変更します)オプションを使用して、プレフィックスの最小長を指定できます。

これにより、80桁幅の端末を使用している人にとって "--pretty=oneline" がずっと読みやすくなるはずです。

@item  @samp{--no-abbrev-commit} 
完全な40バイトの16進コミットオブジェクト名を表示します。 これにより、明示的または "--oneline"
などの他のオプションによって暗黙的に示される @samp{--abbrev-commit} が無効になります。また、 @samp{log.abbrevCommit}
変数をオーバーライドします。

@item  @samp{--oneline} 
これは、 "--pretty=oneline --abbrev-commit" を一緒に使用するための省略形です。

@item  @samp{--encoding=<encoding>} 
コミットオブジェクトは、ログメッセージに使用される文字エンコードをエンコードヘッダーに記録します。このオプションを使用して、ユーザーが好むエンコーディングでコミットログメッセージを再コーディングするようにコマンドに指示できます。配管以外のコマンドの場合、これはデフォルトでUTF-8になります。オブジェクトが
@samp{X} でエンコードされていると主張し、 @samp{X}
で出力している場合、オブジェクトをそのまま出力することに注意してください。これは、元のコミットの無効なシーケンスが出力にコピーされる可能性があることを意味します。同様に、
iconv(3) コミットの変換に失敗した場合、警告とともに元のオブジェクトをそのまま出力します。

@item  @samp{--expand-tabs=<n>} 
@itemx  @samp{--expand-tabs} 
@itemx  @samp{--no-expand-tabs} 
出力に表示する前に、ログメッセージでタブ展開を実行します(タブ幅を <n> とみなして <n> 境界に揃うように空白で調整する)。
@samp{--expand-tabs} は @samp{--expand-tabs=8} の省略形であり、 @samp{--no-expand-tabs} は
@samp{--expand-tabs=0} の省略形です。タブの展開を無効にします。

デフォルトでは、タブはログメッセージを4つのスペースでインデントするきれいな形式(pretty formats)で展開されます(つまり、デフォルトの
@emph{medium} と’full' と @emph{fuller})。

@item  @samp{--notes[=<ref>]} 
コミットログメッセージを表示するときに、コミットに注釈を付けるnotes(git-notes(1)
参照)を表示します。これは、コマンドラインに @samp{--pretty} 、@samp{--format} または @samp{--oneline}
オプションが指定されていない場合の、 @samp{git log} と @samp{git show} と ` git whatchanged` コマンドのデフォルトです。

デフォルトでは、表示されるnotesは、 @samp{core.notesRef} および @samp{notes.displayRef}
変数(または対応する環境変数オーバーライド)にリストされているnote refからのものです。詳細については git-config(1)
を参照してください。

オプションの @emph{<ref>} 引数を使用して、refを使用して表示するnotesを検索します。 refは、 @samp{refs/notes/}
で始まる完全なrefnameを指定できます。 @samp{notes/} で始まるか、 @samp{refs/} で始まるか、それ以外で始まる場合、
@samp{refs/notes/} が接頭辞として付けられ、refのフルネームを形成します。

複数の --notes オプションを組み合わせて、表示するノートを制御できます。 例: "--notes=foo" は "refs/notes/foo"
からのnotesのみを表示します。 "--notes=foo --notes" は、 "refs/notes/foo" とデフォルトのnotes
ref(s) の両方のnotesを表示します。

@item  @samp{--no-notes} 
notesを表示しないでください。 これは、notesが表示されるnotes refのリストをリセットすることにより、上記の @samp{--notes}
オプションを無効にします。 オプションは、コマンドラインで指定された順序で解析されます。 "--notes --notes=foo --no-notes
--notes=bar" は、 "refs/notes/bar" からのnotesのみを表示します。

@item  @samp{--show-notes[=<ref>]} 
@itemx  @samp{--[no-]standard-notes} 
これらのオプションは非推奨です。 代わりに、上記の --notes/--no-notes オプションを使用してください。

@item  @samp{--show-signature} 
署名を @samp{gpg --verify} に渡して、署名されたコミットオブジェクトの有効性を確認し、出力を表示します。

@item  @samp{--no-commit-id} 
@samp{git diff-tree} は、該当する場合、コミットIDを含む行を出力します。このフラグは、コミットIDの出力を抑制します。

@item  @samp{-c} 
このフラグは、マージコミットの表示方法を変更します(つまり、コマンドに1つの <tree-ish> 、または @samp{--stdin}
が指定されている場合にのみ役立ちます)。これは、親と結果を一度に1つずつ表示するのではなく、各親とマージ結果の違いを同時に表示します(これは、 @samp{-m}
オプションが行うことです)。さらに、すべての親から変更されたファイルのみが一覧表示されます。

@item  @samp{--cc} 
このフラグは、 @samp{-c} オプションと同様に、マージコミットパッチの表示方法を変更します。これは @samp{-c} と @samp{-p}
オプションの機能を含んでいて、さらに、パッチの出力を圧縮するために、親のコンテンツが二つのバリエーションしかなく、マージ結果がそのうちの一つをそのまま選んでしまうような、つまらないハンクは省きます。すべてのハンクがつまらない場合、他の「空の差分」の場合と同様に、コミット自体とコミットログメッセージは表示されません。

@item  @samp{--combined-all-paths} 
このフラグにより、結合された差分(combined diff)(マージコミットに使用)にすべての親からのファイルの名前が一覧表示されます。したがって、
@samp{-c} または @samp{--cc}
が指定されている場合にのみ有効であり、ファイル名の変更が検出された場合(つまり、名前変更またはコピーの検出が要求された場合)にのみ役立つ可能性があります。

@item  @samp{--always} 
差分自体が空の場合でも、コミット自体とコミットログメッセージを表示します。
@end table

@noindent

@chapheading PRETTY FORMATS

コミットがマージであり、 pretty-format が @emph{oneline} または @emph{email} または @emph{raw} でない場合、
@emph{Author:} 行の前に追加の行が挿入されます。この行は "Merge: "
で始まり、先祖のコミットのハッシュがスペースで区切られて出力されます。履歴の表示を制限している場合、たとえば、特定のディレクトリまたはファイルに関連する変更のみに関心がある場合、リストされたコミットは必ずしも
@strong{直接} の親コミットのリストではない可能性があることに注意してください。

いくつかの組み込みフォーマットがあります。そして以下で説明するように、 pretty.<name> 構成オプション(config
option)を別のフォーマット名または @emph{format:}
文字列に設定することで、追加のフォーマットを定義できます(git-config(1)
参照)。組み込みフォーマットの詳細は以下のとおりです:

@itemize 

@item
@emph{oneline}

@example
<hash> <title line>
@end example

これは、可能な限りコンパクトになるように設計されています。

@item
@emph{short}

@example
commit <hash>
Author: <author>
@end example

@example
<title line>
@end example

@item
@emph{medium}

@example
commit <hash>
Author: <author>
Date:   <author date>
@end example

@example
<title line>
@end example

@example
<full commit message>
@end example

@item
@emph{full}

@example
commit <hash>
Author: <author>
Commit: <committer>
@end example

@example
<title line>
@end example

@example
<full commit message>
@end example

@item
@emph{fuller}

@example
commit <hash>
Author:     <author>
AuthorDate: <author date>
Commit:     <committer>
CommitDate: <committer date>
@end example

@example
<title line>
@end example

@example
<full commit message>
@end example

@item
@emph{reference}

@example
<abbrev hash> (<title line>, <short author date>)
@end example

この形式は、コミットメッセージ内の別のコミットを参照するために使用され、 @samp{--pretty='format:%C(auto)%h (%s,
%ad)'} と同じです。 デフォルトでは、別の @samp{--date} オプションが明示的に指定されていない限り、日付は @samp{--date=short}
でフォーマットされます。formatプレースホルダーを使用する他の @samp{format:} と同様に、その出力は、 @samp{--decorate} や
@samp{--walk-reflogs} などの他のオプションの影響を受けません。

@item
@emph{email}

@example
From <hash> <date>
From: <author>
Date: <author date>
Subject: [PATCH] <title line>
@end example

@example
<full commit message>
@end example

@item
@emph{mboxrd}

@emph{email} と同様ですが、コミットメッセージの "From " で始まる行(前に0個以上の ">" が付いている)は ">"
でクォートされているため、新しいコミットの開始と混同されることはありません。

@item
@emph{raw}

@emph{raw} 形式は、コミットオブジェクトに格納されているとおりにコミット全体を正確に表示します。とりわけ --abbrev または
--no-abbrev
のどちらが使用されているかに関係なく、ハッシュは完全に表示され、「親」(parents)情報は、移植や履歴の単純化を考慮せずに、真の親のコミットを示します。この形式は、コミットの表示方法に影響しますが、いわゆる
@samp{git log --raw} の差分の表示方法ではありません。生のdiff形式で完全なオブジェクト名を取得するには、 @samp{--no-abbrev}
を使用します。

@item
@emph{format:<string>}

@emph{format:<string>} 形式を使用すると、表示する情報を指定できます。注意: これはprintf書式に少し似ていますが、 @emph{\n}
の代わりに @emph{%n} を使用して改行を取得するという例外に注意してください。

例:  @emph{format:"The author of %h was %an, %ar%nThe title was >>%s<<%n"}
は以下のように表示されます:

@example
The author of fe6e0ee was Junio C Hamano, 23 hours ago
The title was >>t4119: test autocomputing -p<n> for traditional diff input.<<
@end example


さて、以下がプレースホルダー達です:

@itemize 

@item
単一のリテラル文字に展開されるプレースホルダー:

@table @asis

@item  @emph{%n} 
改行(newline)

@item  @emph{%%} 
'%'そのもの

@item  @emph{%x00} 
16進数のバイト値を出力
@end table

@item
うしろのプレースホルダーのフォーマッティングに影響するプレースホルダー:

@table @asis

@item  @emph{%Cred} 
赤色に切り替える

@item  @emph{%Cgreen} 
緑色に切り替える

@item  @emph{%Cblue} 
青色に切り替える。

@item  @emph{%Creset} 
色をリセットする

@item  @emph{%C(…)} 
git-config(1) の "CONFIGURATION FILE" 節の Values で説明されている色の指定。
デフォルトでは、色はログ出力が有効になっている場合にのみ表示されます（ @samp{color.diff} または ` color.ui` または
@samp{--color`によって、ターミナルに行く場合は前者の `auto} 設定を尊重します)。 @samp{%C(auto,...)} は、 default
の歴史的同義語として受け入れられます(例: @samp{%C(auto,red)})。 @samp{%C(always,...)}
を指定すると、色が有効になっていない場合でも色が表示されます(この形式やgitが色付けする可能性のある他のすべてのものを含め、出力全体の色を有効にするために
@samp{--color = always} の使用を検討してください)。 @samp{auto} のみ(つまり、 @samp{%C(auto)}
)は、色が再び切り替わるまで、続くプレースホルダーで自動色付けをオンにします。

@item  @emph{%m} 
左(@samp{<}) または 右(@samp{>}) または 境界 (@samp{-}) の印

@item  @emph{%w([<w>[,<i1>[,<i2>]]])} 
git-shortlog(1) の -w オプションのように、
行の折り返しを切り替えます。

@item  @emph{%<(<N>[,trunc|ltrunc|mtrunc])} 
次のプレースホルダーに少なくともN列を使用させ、
必要に応じて右側にスペースを埋め込みます。オプションで、出力がN列より長い場合は、先頭(ltrunc)または中間(mtrunc)または末尾(trunc)で切り捨てます。注意:
切り捨ては、 N >= 2 でのみ正しく機能することに注意してください。

@item  @emph{%<|(<N>)} 
次のプレースホルダーを少なくともN番目の列まで取得し、
必要に応じて右側にスペースを埋め込みます

@item  @emph{%>(<N>)}, @emph{%>|(<N>)} 
それぞれ @emph{%<(<N>)} 、 @emph{%<|(<N>)} に似ていますが、
左側にスペースが埋め込まれています

@item  @emph{%>>(<N>)}, @emph{%>>|(<N>)} 
@emph{%>(<N>)} 、 @emph{%>|(<N>)} とそれぞれ似ていますが、
次のプレースホルダーが指定されたよりも多くのスペースを取り、その左側にスペースがある場合は、それらのスペースを使用します。

@item  @emph{%><(<N>)}, @emph{%><|(<N>)} 
それぞれ @emph{%<(<N>)} 、 @emph{%<|(<N>)} に似ていますが、
両側にパディングがあります(つまり、テキストが中央に配置されます)
@end table

@item
コミットから抽出された情報に展開するプレースホルダー:

@table @asis

@item  @emph{%H} 
コミットハッシュ

@item  @emph{%h} 
省略されたコミットハッシュ

@item  @emph{%T} 
ツリーハッシュ

@item  @emph{%t} 
省略されたツリーハッシュ

@item  @emph{%P} 
親のハッシュ達

@item  @emph{%p} 
省略された親のハッシュ達

@item  @emph{%an} 
作者名

@item  @emph{%aN} 
作者名( .mailmap に関しては、git-shortlog(1) または
git-blame(1) を参照)

@item  @emph{%ae} 
作者電子メールアドレス

@item  @emph{%aE} 
作者電子メールアドレス(.mailmap に関しては git-shortlog(1) または
git-blame(1) を参照)

@item  @emph{%al} 
作者電子メールアドレスアカウント名(local-part)( @emph{@@} の前の部分)

@item  @emph{%aL} 
作者電子メールアドレスアカウント名(local-part)(@emph{%al} 参照) .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%ad} 
作成日(フォーマットに関しては --date= オプション参照)

@item  @emph{%aD} 
作成日 RFC2822形式

@item  @emph{%ar} 
作成日 相対(relative)形式

@item  @emph{%at} 
作成日 UNIXタイムスタンプ形式

@item  @emph{%ai} 
作成日 ISO 8601風形式

@item  @emph{%aI} 
作成日 厳密なISO 8601形式

@item  @emph{%as} 
作成日 短い形式(@samp{YYYY-MM-DD})

@item  @emph{%ah} 
作成日 human形式( git-rev-list(1) の @samp{--date=human}
オプションのようなかんじ)

@item  @emph{%cn} 
コミッター名

@item  @emph{%cN} 
コミッター名( .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%ce} 
コミッター電子メールアドレス

@item  @emph{%cE} 
コミッター電子メールアドレス(.mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%cl} 
コミッター電子メールアドレスアカウント名(local-part)( @emph{@@} の前の部分)

@item  @emph{%cL} 
コミッター電子メールアドレスアカウント名(local-part)( @emph{%cl} 参照) .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%cd} 
コミッター日付(フォーマットに関しては --date= オプション参照)

@item  @emph{%cD} 
コミッター日付 RFC2822形式

@item  @emph{%cr} 
コミッター日付 相対(relative)形式

@item  @emph{%ct} 
コミッター日付 UNIXタイムスタンプ形式

@item  @emph{%ci} 
コミッター日付 ISO 8601風形式

@item  @emph{%cI} 
コミッター日付 厳密なISO 8601形式

@item  @emph{%cs} 
コミッター日付 短い形式(@samp{YYYY-MM-DD})

@item  @emph{%ch} 
コミッター日付 human形式(git-rev-list(1) の @samp{--date=human}
オプションのようなかんじ)

@item  @emph{%d} 
ref名 git-log(1) の --decorate オプションみたいなの

@item  @emph{%D} 
" (", ")" で囲ってないref名

@item  @emph{%(describe[:options])} 
git-describe(1) のような人間が読める名前。
説明できないコミットの場合は空の文字列。 @samp{describe}
文字列の後には、コロンと0個以上のカンマ区切りオプションを続けることができます。タグが同時に追加または削除されると、説明に一貫性がなくなる可能性があります。

@itemize 

@item
@emph{match=<pattern>}:  "refs/tags/" プレフィックスを除いて、指定された @samp{glob(7)}
パターンに一致するタグのみを考慮します。

@item
@emph{exclude=<pattern>}: "refs/tags/" プレフィックスを除いて、指定された @samp{glob(7)}
パターンに一致するタグを考慮しないでください。
@end itemize

@item  @emph{%S} 
コミットに到達したコマンドラインで指定されたref名
( @samp{git log --source} など)は、 @samp{git log} でのみ機能します

@item  @emph{%e} 
エンコーディング

@item  @emph{%s} 
件名(subject)

@item  @emph{%f} 
ファイル名に適した、サニタイズされた件名

@item  @emph{%b} 
本文(body)

@item  @emph{%B} 
生本文(raw body)(ラップされてない件名と本文)

@item  @emph{%N} 
コミットノート(commit notes)

@item  @emph{%GG} 
署名されたコミットの為のGPSからの生の検証メッセージ

@item  @emph{%G?} 
良い(good)な(有効な)署名の場合は "G" 、
悪い(bad)な署名の場合は "B" 、有効性が不明(unknown)な良い署名の場合は "U" 、期限切れ(eXpired)の良い署名の場合は "X"
、期限切れのキーで作成された良い署名の場合は "Y" 、取り消されたキーによって作成された良い署名の場合は "R"
、署名を確認できない場合(キーの欠落など)は "E" 、署名がない場合は "N" を表示します。

@item  @emph{%GS} 
署名されたコミットの署名者の名前を表示する

@item  @emph{%GK} 
署名されたコミットに署名するために使用されるキーを表示する

@item  @emph{%GF} 
署名されたコミットに署名するために使用されるキーのフィンガープリントを表示する

@item  @emph{%GP} 
署名されたコミットに署名するためにサブキーが使用された
主キーのフィンガープリントを表示します

@item  @emph{%GT} 
署名されたコミットに署名するために使用されるキーの信頼レベル(trust level)を表示します

@item  @emph{%gD} 
reflogセレクター(例:@samp{refs/stash@@@{1@}} or @samp{refs/stash@@@{2 minutes ago@}})
この形式は、 @samp{-g} オプションで説明されている規則に従います。 @samp{@@} の前の部分は、コマンドラインで指定されたrefnameです(したがって、
@samp{git log -g refs/heads/master} は @samp{refs/heads/master@@@{0@}} を生成します)。

@item  @emph{%gd} 
短縮されたreflogセレクター。 @samp{%gD} と同じですが、
人間が読みやすいようにrefname部分が短縮されています(したがって、 @samp{refs/heads/master} は単に @samp{master}
になります)。

@item  @emph{%gn} 
reflog ID名

@item  @emph{%gN} 
reflog ID名( .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%ge} 
reflog ID 電子メールアドレス

@item  @emph{%gE} 
reflog ID 電子メールアドレス( .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%gs} 
reflog 件名

@item  @emph{%(trailers[:options])} 
git-interpret-trailers(1) によって解釈されるようにボディのトレーラーを表示します。
@samp{trailers}
文字列の後には、コロンと0個以上のカンマ区切りオプションを続けることができます。いずれかのオプションが複数回提供された場合、それぞれ最後のものが優先されます。

ブール値オプションは、オプションの値 @samp{[=<BOOL>]} を受け入れます。 値 @samp{true} 、@samp{false} 、 @samp{on} 、@samp{off}
などはすべて受け入れられます。 git-config(1) の "EXAMPLES" の "boolean"
サブセクションを参照してください。ブール値オプションが値なしで指定された場合、それは有効を指定した事になります。

@itemize 

@item
@emph{key=<K>}
は指定されたキーを持つトレーラーのみを表示します。マッチングは大文字と小文字を区別せずに行われ、末尾のコロンはオプションです。オプションが複数回指定されている場合、いずれかのキーに一致するトレーラー行が表示されます。このオプションは自動的に
@samp{only} オプションを有効にして、トレーラーブロック内の非トレーラー行が非表示になるようにします。それが望ましくない場合は、
@samp{only=false} で無効にすることができます。 たとえば、 @samp{%(trailers:key=Reviewed-by)} は、キーが
`Reviewed-by`のトレーラー行を表示します。

@item
@emph{only[=<BOOL>]} はトレーラーブロックに非トレーラー行を含めるかどうかを選択します。

@item
@emph{separator=<SEP>}
はトレーラー行の間に挿入される区切り文字を指定します。このオプションが指定されていない場合、各トレーラー行は改行文字で終了します。文字列SEPには、上記のリテラルフォーマットコードが含まれる場合があります。区切り文字としてコンマを使用するには、次のオプションとして解析されないよう
@samp{%x2C} を使用する必要があります。 たとえば、 %(trailers:key=Ticket,separator=%x2C )` は、キーが
"Ticket" であるすべてのトレーラー行をカンマとスペースで区切って表示します。

@item
@emph{unfold[=<BOOL>]} は interpret-trailer の @samp{--unfold}
オプションが指定されたかのように動作させます。たとえば、 @samp{%(trailers:only,unfold=true)}
が展開され、すべてのトレーラー行が表示されます。

@item
@emph{keyonly[=<BOOL>]} トレーラーのキー部分のみを表示。

@item
@emph{valueonly[=<BOOL>]} トレーラーの値部分のみ表示。

@item
@emph{key_value_separator=<SEP>}
トレーラー行の間に挿入される区切り文字を指定します。このオプションが指定されていない場合、各トレーラーのキーと値のペアは ": " で区切られます。
それ以外の場合は、上記の @emph{separator=<SEP>} と同じセマンティクスを共有します。
@end itemize
@end table
@end itemize
@end itemize

@quotation

@strong{Note}

一部のプレースホルダーは、リビジョントラバーサルエンジンに指定された他のオプションに依存する場合があります。 たとえば、 @samp{%g*}
reflogオプションは、reflogエントリをトラバースしない限り(たとえば、 @samp{git log
-g`によって)空の文字列を挿入します。コマンドラインで `--decorate} がまだ指定されていない場合、 @samp{%d} と @samp{%D}
プレースホルダーは「短い」(short)装飾形式を使用します。
@end quotation

プレースホルダーの @emph{%} の後に @samp{+}
(プラス記号)を追加すると、プレースホルダーが空でない文字列に展開される場合に限り、展開の直前に改行が挿入されます。

プレースホルダーの @emph{%} の後に @samp{-}
(マイナス記号)を追加すると、プレースホルダーが空の文字列に展開された場合にのみ、展開の直前の連続するすべての改行が削除されます。

プレースホルダーの @emph{%} の後に ` `
(スペース)を追加すると、プレースホルダーが空でない文字列に展開される場合に限り、展開の直前にスペースが挿入されます。

@itemize 

@item
@emph{tformat:}

@emph{tformat:} 形式は、 "separator" セマンティクスの代わりに "terminator" セマンティクスを提供することを除いて、
@emph{format:} とまったく同じように機能します。
つまり、各コミットには、エントリ間に区切り文字を配置するのではなく、メッセージターミネータ文字(通常は改行)が追加されます。
これは、「1行」形式と同様に、1行形式の最終エントリが新しい行で適切に終了することを意味します。 例えば:

@example
$ git log -2 --pretty=format:%h 4da45bef \
  | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
4da45be
7134973 -- NO NEWLINE

$ git log -2 --pretty=tformat:%h 4da45bef \
  | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
4da45be
7134973
@end example


加えて、 @samp{%} が含まれている認識されない文字列は、その前に @samp{tformat:} があるかのように解釈(interpret)されます。
たとえば、以下の2つは同等です:

@example
$ git log -2 --pretty=tformat:%h 4da45bef
$ git log -2 --pretty=%h 4da45bef
@end example

@end itemize

@noindent

@chapheading Raw output format

@samp{git-diff-index} と @samp{git-diff-tree} と @samp{git-diff-files} と @samp{git diff --raw}
からの生の出力形式は非常に似ています。

これらのコマンドはすべて、2つのセットを比較します。なお、比較されるものは異なります:

@table @asis

@item  git-diff-index <tree-ish> 
<tree-ish> とファイルシステム上のファイルを比較します。

@item  git-diff-index --cached <tree-ish> 
<tree-ish> とインデックスを比較します。

@item  git-diff-tree [-r] <tree-ish-1> <tree-ish-2> [<pattern>…] 
2つの引数で指定されたツリーを比較します。

@item  git-diff-files [<pattern>…] 
インデックスとファイルシステム上のファイルを比較します。
@end table

"git-diff-tree"
コマンドは、比較対象のハッシュ値を出力することで出力を開始します。その後、すべてのコマンドは、変更されたファイルごとに1つの出力行を出力します。

出力行は以下のようにフォーマットされます:

@example
in-place edit  :100644 100644 bcd1234 0123456 M file0
copy-edit      :100644 100644 abcd123 1234567 C68 file1 file2
rename-edit    :100644 100644 abcd123 1234567 R86 file1 file3
create         :000000 100644 0000000 1234567 A file4
delete         :100644 000000 1234567 0000000 D file5
unmerged       :000000 000000 0000000 0000000 U file6
@end example


つまり、左から右へ:

@enumerate 

@item
コロン(:)

@item
"src" のモード。作成(creation)またはマージされていない(unmerged)場合は 000000

@item
空白

@item
"dst" のモード。作成(creation)またはマージされていない(unmerged)場合は 000000

@item
空白

@item
"src" のsha1。作成(creation)またはマージされていない(unmerged)場合は 0@{40@}

@item
空白

@item
"dst" のsha1。作成(creation)またはマージされていない(unmerged)または作業ツリーにある場合は 0@{40@}

@item
空白

@item
ステータスの後に、オプションの「スコア数」("score" number)が続きます

@item
@samp{-z} オプションが使用されている場合はタブまたはNUL

@item
"src" のパス

@item
@samp{-z} オプションが使用されている場合タブまたはNUL。ステータスCまたはRにのみ存在します

@item
"dst" のパス。ステータスCまたはRにのみ存在します

@item
LFでレコードを終了します。 @samp{-z} オプションが使用されている場合はNULでレコードを終了します。
@end enumerate

ステータス文字の種類は以下のとおり:

@itemize 

@item
A: ファイルの追加

@item
C: ファイルを新しいファイルにコピー

@item
D: ファイルの削除

@item
M: ファイルの内容やモードの変更

@item
R: ファイル名の名前変更

@item
T: ファイルのタイプを変更

@item
U: ファイルはマージされていません(コミットする前にマージを完了する必要があります)

@item
X: 「不明な」変更タイプ(おそらくバグです。報告してください)
@end itemize

ステータス文字CとRの後には常にスコアが続きます(移動またはコピーのソースとターゲットの間の類似性のパーセンテージを示します)。ステータス文字Mの後には、ファイルの書き換えのスコア(非類似度のパーセンテージを示す)が続く場合があります。

<sha1> は、ファイルがファイルシステム上で新規で、インデックスと同期していない場合、すべて0として表示されます。

例:

@example
:100644 100644 5be4a4a 0000000 M file.c
@end example


@samp{-z} オプションを指定しない場合、構成変数 @samp{core.quotePath} で説明されているように、通常の文字以外(unusual
characters)を含むパス名が引用符で囲まれます(git-config(1) 参照)。 @samp{-z}
を使用すると、ファイル名がそのまま出力され、行はNULバイトで終了します。

@noindent

@chapheading diff format for merges

"git-diff-tree" と "git-diff-files" と "git-diff --raw" は、 @samp{-c} または @samp{--cc}
オプションを使用して、マージコミットに対してもdiff出力を生成できます。出力は、以下の点で上記の形式とは異なります:

@enumerate 

@item
親ごとにコロン(:)があります

@item
より多くの "src" モードと "src" sha1があります

@item
statusは、各親のステータス文字を連結したものです

@item
オプションの「スコア数」はありません

@item
ファイルのタブ区切りのパス名
@end enumerate

@samp{-c} および ` -cc` の場合、履歴のいずれかの側でファイルの名前が変更された場合でも、宛先(dst)または最終パスのみが表示されます。
@samp{--combined-all-paths} を使用すると、各親のパスの名前が表示され、それに続いてマージコミットのパスの名前が表示されます。

例: @samp{--combined-all-paths} を使用しない @samp{-c} および @samp{--cc} の場合:

@example
::100644 100644 100644 fabadb8 cc95eb0 4866510 MM       desc.c
::100755 100755 100755 52b7a2d 6d1ac04 d2ac7d7 RM       bar.sh
::100644 100644 100644 e07d6c5 9042e82 ee91881 RR       phooey.c
@end example


例: @samp{-c} または @samp{--cc} のいずれかに @samp{--combined-all-paths} が追加された場合:

@example
::100644 100644 100644 fabadb8 cc95eb0 4866510 MM       desc.c  desc.c  desc.c
::100755 100755 100755 52b7a2d 6d1ac04 d2ac7d7 RM       foo.sh  bar.sh  bar.sh
::100644 100644 100644 e07d6c5 9042e82 ee91881 RR       fooey.c fuey.c  phooey.c
@end example


注意: 'combined diff’は、すべての親から変更されたファイルのみをリストすることに注意してください。

@noindent

@chapheading Generating patch text with -p

git-diff(1) 、 git-log(1) 、 git-show(1) 、
git-diff-index(1) 、 git-diff-tree(1) 、
git-diff-files(1) に @samp{-p} オプションを付けて実行するとパッチテキストを生成します。パッチテキストの作成は、
@samp{GIT_EXTERNAL_DIFF} と @samp{GIT_DIFF_OPTS} 環境変数( git(1) 参照)、および @samp{diff}
属性( gitattributes(5) 参照)を介してカスタマイズできます。

-pオプションが生成するものは、従来のdiff形式とは少々異なります:

@enumerate 

@item
先行して、以下のような "git diff" ヘッダーがあります:

@example
diff --git a/file1 b/file2
@end example

名前の変更/コピーが含まれない限り、 @samp{a/} と @samp{b/} のファイル名は同じです。 特に、作成または削除の場合でも、 @samp{a/} または @samp{b/}
ファイル名の代わりに @samp{/dev/ null} が使用されることはありません。

名前変更/コピーが含まれる場合、 @samp{file1} と`file2`
は、それぞれ名前変更/コピーのソースファイルの名前と、名前変更/コピーが生成するファイルの名前を示します。

@item
その後に、1つ以上の拡張ヘッダー行達が続きます:

@example
old mode <mode>
new mode <mode>
deleted file mode <mode>
new file mode <mode>
copy from <path>
copy to <path>
rename from <path>
rename to <path>
similarity index <number>
dissimilarity index <number>
index <hash>..<hash> <mode>
@end example

ファイルモードは、ファイルタイプとファイル許可ビットを含む6桁の8進数として出力されます。

拡張ヘッダーのパス名には、 @samp{a/} および @samp{b/} プレフィックスは含まれません。

類似インデックス(similarity index)は変更されていない行のパーセンテージであり、非類似インデックス(dissimilarity
index)は変更された行のパーセンテージです。これは切り捨てられた整数であり、その後にパーセント記号が続きます。したがって、100％の類似インデックス値は2つの等しいファイルを表し、100％の非類似性は古いファイルから新しいファイルに移行された行がないことを意味します。

インデックス行には、変更前後のブロブオブジェクト名が含まれます。 <mode>
は、ファイルモードが変更されない場合に含まれます。それ以外の場合、別々の行は古いモードと新しいモードを示します。

@item
通常の文字でないキャラクタ(\"unusual\" characters)を含むパス名は、構成変数 @samp{core.quotePath}
で説明されているように引用符で囲まれています( git-config(1)参照)。

@item
出力内のすべての @samp{file1} ファイルはコミット前のファイルを参照し、すべての @samp{file2}
ファイルはコミット後のファイルを参照します。各変更を各ファイルに順番に適用するのは誤りです。たとえば、以下のパッチはaとbを交換します:

@example
diff --git a/a b/b
rename from a
rename to b
diff --git a/b b/a
rename from b
rename to a
@end example

@item
ハンクのヘッダーには、ハンクが適用される関数の名前が記載されています。特定の言語に合わせてこれを調整する方法の詳細については、
gitattributes(5) の "Defining a custom hunk-header" を参照してください。
@end enumerate

@noindent

@chapheading Combined diff format

diffを生成するコマンドは、マージを表示するときに @samp{-c} または @samp{--cc} オプションを使用して「合成diff」(combined
diff)を生成できます。これは git-diff(1) または git-show(1)
でのマージを表示するときのデフォルトの形式です。 注意: これらのコマンドのいずれかに適切な @samp{--diff-merges}
オプションを指定して、特定の形式で差分を強制的に生成できることにも注意してください。

合成diff形式は以下のようになります:

@example
diff --combined describe.c
index fabadb8,cc95eb0..4866510
--- a/describe.c
+++ b/describe.c
@@@@@@ -98,20 -98,12 +98,20 @@@@@@
        return (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;
  @}

- static void describe(char *arg)
 -static void describe(struct commit *cmit, int last_one)
++static void describe(char *arg, int last_one)
  @{
 +      unsigned char sha1[20];
 +      struct commit *cmit;
        struct commit_list *list;
        static int initialized = 0;
        struct commit_name *n;

 +      if (get_sha1(arg, sha1) < 0)
 +              usage(describe_usage);
 +      cmit = lookup_commit_reference(sha1);
 +      if (!cmit)
 +              usage(describe_usage);
 +
        if (!initialized) @{
                initialized = 1;
                for_each_ref(get_name);
@end example


@enumerate 

@item
まず "git diff"  ヘッダーがあり、以下のようになります( @samp{-c} オプションが使用されている場合):

@example
diff --combined file
@end example

または、以下のようになります( @samp{--cc} オプションが使用されている場合):

@example
diff --cc file
@end example

@item
その後に1つ以上の拡張ヘッダー行が続きます(以下の例は、2つの親とのマージを示しています):

@example
index <hash>,<hash>..<hash>
mode <mode>,<mode>..<mode>
new file mode <mode>
deleted file mode <mode>,<mode>
@end example

@samp{mode <mode>,<mode>..<mode>} 行は、<mode> の少なくとも1つが他の <mode>
と異なる場合にのみ表示されます。検出されたコンテンツの移動(名前の変更とコピーの検出)に関する情報を含む拡張ヘッダーは、2つの <tree-ish>
のdiffで機能するように設計されており、合成diff形式では使用されません。

@item
その後に2行の from-file/to-file ヘッダーが続きます

@example
--- a/file
+++ b/file
@end example

従来の統一diff形式の2行ヘッダーと同様に、 @samp{/dev/null} は、作成または削除されたファイルを通知するために使用されます。

ただし、 --combined-all-paths  オプションが指定されている場合、2行の from-file/to-file の代わりに、 N+1
行の from-file/to-file ヘッダーが取得されます。ここで、 N はマージコミットの親の数です。

@example
--- a/file
--- a/file
--- a/file
+++ b/file
@end example

この拡張形式は、名前変更またはコピー検出がアクティブな場合に役立ち、別の親のファイルの元の名前を確認できます。

@item
チャンクヘッダーの形式が変更され、誤って @samp{patch-p1}
にフィードされるのを防ぎます。合成差分形式は、マージコミットの変更を確認するために作成されたものであり、適用されることを意図したものではありません。この変更は、拡張された「インデックス」ヘッダーの変更に似ています:

@example
@@@@@@ <from-file-range> <from-file-range> <to-file-range> @@@@@@
@end example

合成diff形式のチャンクヘッダーには親の数+1の @samp{@@} 文字があります。
@end enumerate

従来の統一diff形式とは異なり、2つのファイルAとBが、 @samp{-} (マイナスはAに表示されますが、Bでは削除されます) または @samp{+}
(プラスはAにはありませんが、Bには追加されます)、または @samp{" "}（スペースは変更なし)
プレフィックスを持つ単一の列で表示される場合、この形式は2つ以上のファイル file1, file2,… を1つのファイルXと比較し、Xが各
fileN とどのように異なるかを示します。ファイルNごとに1つの列が出力行の前に追加され、Xの行が出力行とどのように異なるかを示します。

列Nの @samp{-} 文字は、その行が fileN に表示されているが、結果には表示されていないことを意味します。 列Nの @samp{+}
文字は、結果に行が表示され、 fileN にその行がないことを意味します(つまり、その親の観点から見て行が追加されたことを示す)。

上記の出力例では、関数のシグネチャが両方のファイルから見て変更されています(したがって、 file1 と file2 の両方から2つの @samp{-}
が削除され、さらに @samp{++} が追加されたため、 file1 と file2 のどちらにも表示されません)。また、他の8行は file1 と同じですが、
file2 には表示されません(したがって、接頭辞として @samp{+} が付けられます)。

@samp{git diff-tree -c} で表示される場合、マージコミットの親をマージ結果と比較します(つまり、 file1..fileN が親です)。
@samp{git diff-files -c} で表示される場合、2つの未解決のマージ親を作業ツリーファイルと比較します(つまり、 file1
はステージ2、別名「私たちのバージョン」、 file2 はステージ3、別名「彼らのバージョン」です)。

@noindent

@chapheading other diff formats

@samp{--summary} オプションは、新しく追加、削除、名前変更、およびコピーされたファイルを説明します。@samp{--stat} オプションは、
diffstat(1) グラフ を出力に追加します。これらのオプションは、 @samp{-p}
などの他のオプションと組み合わせることができ、人間が読むことを目的としています。

名前の変更またはコピーを伴う変更を表示する場合、 @samp{--stat}
出力は、パス名の共通のプレフィックスとサフィックスを組み合わせることにより、パス名をコンパクトにフォーマットします。
たとえば、4行を変更(modify)しながら @samp{arch/i386/Makefile} を @samp{arch/x86/Makefile}
に移動(move)する変更(change)は、次のように表示されます:

@example
arch/@{i386 => x86@}/Makefile    |   4 +--
@end example


@samp{--numstat} オプションは diffstat(1) 情報を提供しますが、人間ではなくソフトウェアで読むのを容易にするように設計されています。
@samp{--numstat} 出力のエントリは以下のようになります:

@example
1       2       README
3       1       arch/@{i386 => x86@}/Makefile
@end example


この形式は、左から右へ:

@enumerate 

@item
追加行数

@item
タブ

@item
削除行数

@item
タブ

@item
パス名(おそらく rename/copy 情報を含む)

@item
改行
@end enumerate

@samp{-z} 出力オプションが有効な場合、出力は以下のようにフォーマットされます:

@example
1       2       README NUL
3       1       NUL arch/i386/Makefile NUL arch/x86/Makefile NUL
@end example


これは:

@enumerate 

@item
追加行数

@item
タブ

@item
削除行数

@item
タブ

@item
NUL(rename/copy された場合のみ存在します)

@item
プリイメージのパス名

@item
NUL(rename/copy された場合のみ存在します)

@item
ポストイメージのパス名(rename/copy された場合のみ存在します)

@item
NUL
@end enumerate

名前が変更された場合のプリイメージパスの前の追加の @samp{NUL}
は、出力を読み取るスクリプトが、先読みせずに、読み取られている現在のレコードがシングルパスレコードであるか、名前変更/コピーレコードであるか、を判断できるようにするためです。追加および削除された行を読み取った後、
@samp{NUL} まで読み取るとパス名が生成されますが、それが @samp{NUL} の場合、レコードには2つのパスが表示されます。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-diff,,,Top
@chapheading Name

git-diff — Show changes between commits, commit and working tree, etc

@noindent

@chapheading Synopsis

@display
git diff [<options>] [<commit>] [--] [<path>…]
git diff [<options>] --cached [--merge-base] [<commit>] [--] [<path>…]
git diff [<options>] [--merge-base] <commit> [<commit>…] <commit> [--] [<path>…]
git diff [<options>] <commit>…<commit> [--] [<path>…]
git diff [<options>] <blob> <blob>
git diff [<options>] --no-index [--] <path> <path>
@end display


@noindent

@chapheading DESCRIPTION

Show changes between the working tree and the index or a tree, changes
between the index and a tree, changes between two trees, changes resulting
from a merge, changes between two blob objects, or changes between two files
on disk.

@table @asis

@item  @emph{git diff} [<options>] [--] [<path>…] 
This form is to view the changes you made relative to the index (staging
area for the next commit).  In other words, the differences are what you
@emph{could} tell Git to further add to the index but you still haven’t.  You can
stage these changes by using git-add(1).

@item  @emph{git diff} [<options>] --no-index [--] <path> <path> 
This form is to compare the given two paths on the filesystem.  You can omit
the @samp{--no-index} option when running the command in a working tree
controlled by Git and at least one of the paths points outside the working
tree, or when running the command outside a working tree controlled by
Git. This form implies @samp{--exit-code}.

@item  @emph{git diff} [<options>] --cached [--merge-base] [<commit>] [--] [<path>…] 
This form is to view the changes you staged for the next commit relative to
the named <commit>.  Typically you would want comparison with the latest
commit, so if you do not give <commit>, it defaults to HEAD.  If HEAD does
not exist (e.g. unborn branches) and <commit> is not given, it shows all
staged changes.  --staged is a synonym of --cached.

If --merge-base is given, instead of using <commit>, use the merge base of
<commit> and HEAD.  @samp{git diff --cached --merge-base A} is equivalent to @samp{git
diff --cached $(git merge-base A HEAD)}.

@item  @emph{git diff} [<options>] [--merge-base] <commit> [--] [<path>…] 
This form is to view the changes you have in your working tree relative to
the named <commit>.  You can use HEAD to compare it with the latest commit,
or a branch name to compare with the tip of a different branch.

If --merge-base is given, instead of using <commit>, use the merge base of
<commit> and HEAD.  @samp{git diff --merge-base A} is equivalent to @samp{git diff
$(git merge-base A HEAD)}.

@item  @emph{git diff} [<options>] [--merge-base] <commit> <commit> [--] [<path>…] 
This is to view the changes between two arbitrary <commit>.

If --merge-base is given, use the merge base of the two commits for the
"before" side.  @samp{git diff --merge-base A B} is equivalent to @samp{git diff $(git
merge-base A B) B}.

@item  @emph{git diff} [<options>] <commit> <commit>… <commit> [--] [<path>…] 
This form is to view the results of a merge commit.  The first listed
<commit> must be the merge itself; the remaining two or more commits should
be its parents.  A convenient way to produce the desired set of revisions is
to use the @samp{^@@} suffix.  For instance, if @samp{master} names a merge commit,
@samp{git diff master master^@@} gives the same combined diff as @samp{git show
master}.

@item  @emph{git diff} [<options>] <commit>..<commit> [--] [<path>…] 
This is synonymous to the earlier form (without the @samp{..}) for viewing the
changes between two arbitrary <commit>.  If <commit> on one side is omitted,
it will have the same effect as using HEAD instead.

@item  @emph{git diff} [<options>] <commit>...<commit> [--] [<path>…] 
This form is to view the changes on the branch containing and up to the
second <commit>, starting at a common ancestor of both <commit>.  @samp{git diff
A...B} is equivalent to @samp{git diff $(git merge-base A B) B}.  You can omit
any one of <commit>, which has the same effect as using HEAD instead.
@end table

Just in case you are doing something exotic, it should be noted that all of
the <commit> in the above description, except in the @samp{--merge-base} case and
in the last two forms that use @samp{..} notations, can be any <tree>.

For a more complete list of ways to spell <commit>, see "SPECIFYING
REVISIONS" section in gitrevisions(7).  However, "diff" is about
comparing two @emph{endpoints}, not ranges, and the range notations
(@samp{<commit>..<commit>} and @samp{<commit>...<commit>}) do not mean a range as
defined in the "SPECIFYING RANGES" section in gitrevisions(7).

@table @asis

@item  @emph{git diff} [<options>] <blob> <blob> 
This form is to view the differences between the raw contents of two blob
objects.
@end table

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-p} 
@itemx  @samp{-u} 
@itemx  @samp{--patch} 
パッチを生成します(generating patches に関するセクションを参照)。
これがデフォルトです。

@item  @samp{-s} 
@itemx  @samp{--no-patch} 
diff出力を抑制します。デフォルトでパッチを表示する @samp{git show} のようなコマンド、または @samp{--patch}
の効果をキャンセルする場合に便利です。

@item  @samp{-U<n>} 
@itemx  @samp{--unified=<n>} 
通常の3行ではなく、<n> 行の内容でdiffを生成します。
@samp{--patch} の機能を含んでいます。

@item  @samp{--output=<file>} 
stdout ではなく指定のファイルに出力します。

@item  @samp{--output-indicator-new=<char>} 
@itemx  @samp{--output-indicator-old=<char>} 
@itemx  @samp{--output-indicator-context=<char>} 
生成されたパッチの新しい行、古い行、またはコンテキスト行を示すために使用される文字を指定します。 通常、それらはそれぞれ @emph{+} 、 @emph{-} 、 ' '
です。

@item  @samp{--raw} 
生形式(raw format)でdiffを生成します。

@item  @samp{--patch-with-raw} 
@samp{-p --raw} の同義語。

@item  @samp{--indent-heuristic} 
diffハンクの境界をずらす(shift)ヒューリスティックを有効にして、パッチを読みやすくします。 これがデフォルトです。

@item  @samp{--no-indent-heuristic} 
インデントヒューリスティック(indent heuristic)を無効にします。

@item  @samp{--minimal} 
より多くの時間を費やして、可能な限り最小のdiffが生成されるようにします。

@item  @samp{--patience} 
"patience diff" アルゴリズムを使用してdiffを生成します。

@item  @samp{--histogram} 
"histogram diff" アルゴリズムを使用してdiffを生成します。

@item  @samp{--anchored=<text>} 
"anchored diff" アルゴリズムを使用してdiffを生成します。

このオプションは複数回指定できます。

行がソースと宛先の両方に存在し、1回だけ存在し、このテキストで始まる場合、このアルゴリズムは、その行が出力に削除または追加として表示されないようにします。内部で
"patience diff" アルゴリズムを使用します。

@item  @samp{--diff-algorithm=@{patience|minimal|histogram|myers@}} 
diffアルゴリズムを選択します。その派生(variants)は以下のとおりです:

@table @asis

@item  @samp{default}, @samp{myers} 
基本的な貪欲な差分アルゴリズム(greedy diff algorithm)。現在、これがデフォルトです。

@item  @samp{minimal} 
より多くの時間を費やして、可能な限り最小のdiffが生成されるようにします。

@item  @samp{patience} 
パッチを生成する時に "patience diff" アルゴリズムを使います。

@item  @samp{histogram} 
このアルゴリズムは、忍耐アルゴリズム(patience algorithm)を拡張して、「発生率の低い共通要素をサポート」(support
low-occurrence common elements)します。
@end table

たとえば、 あなたが @samp{diff.algorithm}
変数をデフォルト以外の値に設定した上で、それでもデフォルト値を使用する場合は、@samp{--diff-algorithm=default}
オプションを使用する必要があります。

@item  @samp{--stat[=<width>[,<name-width>[,<count>]]]} 
diffstatを生成します。
デフォルトでは、必要なだけのスペースがファイル名部分に使用され、残りはグラフ部分に使用されます。最大幅はデフォルトで端末幅、または端末に接続されていない場合は80桁であり、
@samp{<width>} で上書きできます。ファイル名部分の幅は、コンマの後に別の幅 @samp{<name-width>}
を指定することで制限できます。グラフ部分の幅は、 @samp{--stat-graph-width=<width>}
(統計グラフを生成するすべてのコマンドに影響します)を使用するか、 @samp{diff.statGraphWidth=<width>} ( @samp{git
format-patch} に影響しません)を設定することによって制限できます。3番目のパラメータ @samp{<count>}
を指定することにより、出力を最初の @samp{<count>} 行に制限し、それに @samp{...} が続く形にできます。

これらのパラメータは、 @samp{--stat-width=<width>} と @samp{--stat-name-width=<name-width>} と
@samp{--stat-count=<count>} を使用して個別に設定することもできます。

@item  @samp{--compact-summary} 
ファイルの作成や削除( "new" または "gone" 。オプションでシンボリックリンクの場合は "+l"
)、diffstatのモード変更(実行可能ビットを追加または削除する場合は、それぞれ "+x" または "-x"
)など、拡張ヘッダー情報の要約を出力します。情報はファイル名部分とグラフ部分の間に置かれます。本機能は @samp{--stat} の機能を含んでいます。

@item  @samp{--numstat} 
@samp{--stat`に似ていますが、プログラムで処理しやすい(machine
friendly)ように、追加および削除された行数を10進表記とパス名で省略形なしで表示します。バイナリファイルの場合、 `0 0} の代わりに2つの
@samp{-} を出力します。

@item  @samp{--shortstat} 
変更されたファイルの総数と、追加および削除された行の数を含む @samp{--stat} 形式の最後の行のみを出力します。

@item  @samp{-X[<param1,param2,...>]} 
@itemx  @samp{--dirstat[=<param1,param2,...>]} 
各サブディレクトリの相対的な変更量の分布を出力します。 @samp{--dirstat}
の動作は、パラメータのコンマ区切りリストを渡すことでカスタマイズできます。デフォルトは、 @samp{diff.dirstat}
構成変数によって制御されます(git-config(1) 参照)。以下のパラメータを使用できます:

@table @asis

@item  @samp{changes} 
ソースから削除された、または宛先に追加された行をカウントして、dirstat数を計算します。これは、ファイル内の純粋なコード移動の量を無視します。つまり、ファイル内の行の再配置は、他の変更ほどカウントされません。これは、パラメーターが指定されていない場合のデフォルトの動作です。

@item  @samp{lines} 
通常の行ベースのdiff分析を実行し、削除/追加された行数を合計して、dirstat数を計算します。
(バイナリファイルの場合、バイナリファイルには行の概念がないため、代わりに64バイトのチャンクをカウントします)。 これは @samp{changes}
動作よりも高価な @samp{--dirstat} 動作ですが、他の変更と同じようにファイル内の再配置された行をカウントします。結果の出力は、他の
@samp{--*stat} オプションから得られるものと一致しています。

@item  @samp{files} 
変更されたファイルの数を数えて、dirstat数を計算します。変更された各ファイルは、dirstat分析で等しくカウントされます。これは、ファイルの内容をまったく調べる必要がないため、計算コストが最もかからない
@samp{--dirstat} の動作です。

@item  @samp{cumulative} 
親ディレクトリの子ディレクトリの変更も同様にカウントします。 @samp{cumulative}(累積的)
を使用する場合、報告されるパーセンテージの合計が100%を超える場合があることに注意してください。デフォルトの(非累積的な)動作は、@samp{noncumulative}
パラメーターで指定できます。

@item  <limit> 
整数パラメーターは、カットオフパーセント(デフォルトでは3%)を指定します。指定の割合より少ないディレクトリは、出力に表示されません。
@end table

例: 変更されたファイルの総数の10%未満のディレクトリを無視し、親ディレクトリに子ディレクトリの数を累積しながら、変更されたファイルをカウント:
@samp{--dirstat=files,10,cumulative}

@item  @samp{--cumulative} 
@samp{--dirstat=cumulative} と同義語

@item  @samp{--dirstat-by-file[=<param1,param2>...]} 
@samp{--dirstat=files,param1,param2...} と同義語

@item  @samp{--summary} 
作成、名前変更、モード変更などの拡張ヘッダー情報の短い要約(condensed summary)を出力します。

@item  @samp{--patch-with-stat} 
@samp{-p --stat} と同義語。

@item  @samp{-z} 
@samp{--raw} または @samp{--numstat} または @samp{--name-only} または @samp{--name-status} が指定されている場合は
パス名を変更せず、出力フィールドターミネータとしてNULLを使用してください。

このオプションがないと、構成変数 @samp{core.quotePath} で説明されているように、 通常の文字以外(unusual
characters)を含むパス名が引用符で囲まれます(git-config(1) 参照)。

@item  @samp{--name-only} 
変更されたファイルの名前のみを表示します。 多くの場合、ファイル名はUTF-8でエンコードされます。 詳細については、
git-log(1) のマニュアルページにあるエンコーディングに関する議論(the discussion about
encoding)を参照してください。

@item  @samp{--name-status} 
変更されたファイルの名前とステータスのみを表示します。ステータス文字の意味については、 @samp{--diff-filter}
オプションの説明を参照してください。 @samp{--name-only} と同じように、ファイル名はしばしばUTF-8でエンコードされます。

@item  @samp{--submodule[=<format>]} 
サブモジュールの違いをどのように表示するかを指定します。 @samp{--submodule=short} を指定する場合、 @emph{short}
形式が使用されます。この形式は、範囲の最初と最後にコミットの名前を表示するだけです。 @samp{--submodule} または
@samp{--submodule=log} が指定されている場合、 @emph{log} 形式が使用されます。この形式では、
git-submodule(1) @samp{summary} のように範囲内のコミットが一覧表示されます。 @samp{--submodule=diff}
が指定されている場合、 @emph{diff}
形式が使用されます。この形式は、コミット範囲間のサブモジュールの内容の変更のインラインdiffを示します。configオプションが設定されていない場合、デフォルトは
@samp{diff.submodule} または @emph{short} 形式です。

@item  @samp{--color[=<when>]} 
色付きのdiffを表示します。 @samp{--color} (つまり、 @emph{=<when>} ) は @samp{--color=always} と同じです。
@emph{<when>} は、 @samp{always} または @samp{never} または @samp{auto} のいずれかになります。
@samp{color.ui} と @samp{color.diff} 構成設定で
変更できます。

@item  @samp{--no-color} 
カラーdiffをオフにします。
これは、構成設定(configuration settings)を上書きするために使用できます。
@samp{--color=never} と同じです。

@item  @samp{--color-moved[=<mode>]} 
ソースコードの移動した行を別の色にします。
これは、 @samp{diff.colorMoved} 構成設定によって変更できます。
<mode>は、オプションが指定されていない場合はデフォルトで @emph{no} になり、
モードが指定されていないオプションが指定されている場合は @emph{zebra} になります。
モードは以下のいずれかでなければなりません:

@table @asis

@item  no 
移動行をハイライトしません。

@item  default 
@samp{zebra} の同義語です。これは、将来、より賢明なモードに変更される可能性があります。

@item  plain 
ある場所で追加され、別の場所で削除された行は、 @emph{color.diff.newMoved} で色付けされます。 同様に、
@emph{color.diff.oldMoved}
は、差分の別の場所に追加された削除された行に使用されます。このモードは移動された行をピックアップしますが、コードのブロックが順列なしで移動されたかどうかを判断することはレビューではあまり役に立ちません。

@item  blocks 
少なくとも20文字の英数字の移動テキストのブロックが貪欲に検出されます。検出されたブロックは、 @emph{color.diff.@{old,new@}Moved}
色のいずれかを使用して色付けされます。隣接するブロックを区別することはできません。

@item  zebra 
移動されたテキストのブロックは、 @emph{blocks} モードの場合と同様に検出されます。 ブロックは、
@emph{color.diff.@{old,new@}Moved} 色または @emph{color.diff.@{old,new@}MovedAlternative}
色のいずれかを使用して色付けされます。2つの色の間の変化は、新しいブロックが検出されたことを示します。

@item  dimmed-zebra 
@emph{zebra}
に似ていますが、移動されたコードの重要でない部分の追加の調光(dimmed)が実行されます。隣接する2つのブロックの境界線は興味深いと見なされ、残りは興味深いものではありません。
@samp{dimmed_zebra} は非推奨の同義語です。
@end table

@item  @samp{--no-color-moved} 
移動検出をオフにします。 これは、構成設定を上書きするために使用できます。 @samp{--color-moved=no} と同じです。

@item  @samp{--color-moved-ws=<modes>} 
これは、 @samp{--color-moved} の移動検出を実行するときに空白を無視する方法を設定します。
@samp{diff.colorMovedWS} 構成設定で設定できます。
これらのモードは、コンマ区切りのリストとして指定できます:

@table @asis

@item  no 
移動行検出を実行するときに、空白(whitespace)を無視しない。

@item  ignore-space-at-eol 
行末(EOL)での空白(whitespace)の変更を無視します。

@item  ignore-space-change 
空白(whitespace)の数の変更は無視してください。これは、行末の空白(whitespace)を無視し、1つ以上の空白文字(whitespace
characters)の他のすべてのシーケンスを同等と見なします。

@item  ignore-all-space 
行を比較するときは空白(whitespace)を無視します。これにより、一方の行に空白があり、もう一方の行に空白がない場合でも、違いは無視されます。

@item  allow-indentation-change 
最初に移動検出で空白(whitespace)を無視し、空白(whitespace)の変更が行ごとに同じである場合にのみ、移動されたコードブロックをブロックにグループ化します。
これは他のモードと互換性がありません。
@end table

@item  @samp{--no-color-moved-ws} 
移動検出を実行するときは、空白(whitespace)を無視しないでください。これは、構成設定を上書きするために使用できます。
@samp{--color-moved-ws=no} と同じです。

@item  @samp{--word-diff[=<mode>]} 
<mode> を使用して変更された単語を区切ることにより、単語のdiffを表示します。デフォルトでは、単語は空白で区切られます。 以下の
@samp{--word-diff-regex} を参照してください。 <mode> のデフォルトは 'plain’です。 <mode>
は以下のいずれかである必要があります:

@table @asis

@item  color 
変更された単語(word)を色のみを使用して強調表示します。 @samp{--color} を意味します。

@item  plain 
単語を @samp{[-removed-]} および @samp{@{+added+@}} として表示します。
区切り文字が入力に表示されている場合、区切り文字をエスケープしようとしないため、出力があいまいになる可能性があります。

@item  porcelain 
スクリプトの使用を目的とした特別な行ベースの形式を使用します。追加/削除/無変更については、通常の統一されたdiff形式で印刷され、行の先頭の
@samp{+}/@samp{-}/` ` 文字で始まり、行の終わりまで続きます。入力の改行は、それ自体の行のチルダ @samp{~} で表されます。

@item  none 
単語(word)のdiffを再度無効にします。
@end table

注意: 最初のモードの名前にもかかわらず、有効になっている場合、すべてのモードで変更された部分を強調するために色が使用されることに注意してください。

@item  @samp{--word-diff-regex=<regex>} 
空白以外を単語と見なす代わりに、 <regex> を使用して単語が何であるかを決定します。また、すでに有効になっていない限り、この機能は
@samp{--word-diff} の機能を含んでいます。

<regex> の重複しないマッチはすべて、単語と見なされます。これらのマッチの間のすべては空白と見なされ、違いを見つけるためとしては無視されます！
正規表現に @samp{|[^[:space:]]}
を追加して、空白以外のすべての文字とマッチすることを確認することをお勧めします。改行を含むマッチは、改行で黙って切り捨てられます！

たとえば、 @samp{--word-diff-regex=.} は各文字を単語として扱い、それに応じて文字ごとの違いを表示します。

正規表現は、diffドライバーまたは構成オプション(configuration option)を介して設定することもできます。
gitattributes(5) または git-config(1)
を参照してください。これを指定すると、diffドライバーまたは構成設定(configuration
settings)が明示的にオーバーライドされます。diffドライバーは構成設定を上書きします。

@item  @samp{--color-words[=<regex>]} 
@samp{--word-diff=color} に @samp{--word-diff-regex=<regex>}
を加えたものに相当します(正規表現が指定されている場合)。

@item  @samp{--no-renames} 
構成ファイルにデフォルトで指定されている場合でも、名前変更の検出をオフにします。

@item  @samp{--[no-]rename-empty} 
名前変更ソースとして空のブロブを使用するかどうか。

@item  @samp{--check} 
変更によって競合マーカーまたは空白エラーが発生した場合に警告します。空白エラーと見なされるものは、 @samp{core.whitespace}
構成によって制御されます。
デフォルトでは、末尾の空白(空白のみで構成される行を含む)と、行の最初のインデント内で直後にタブ文字が続くスペース文字は、空白エラーと見なされます。問題が見つかった場合は、ゼロ以外のステータスで終了します。なお、
--exit-code とは互換性がありません。

@item  @samp{--ws-error-highlight=<kind>} 
diffの @samp{context} または @samp{old} または @samp{new} 行の空白エラーを強調表示します。複数の値はコンマで区切られ、 @samp{none}
は前の値をリセットし、 @samp{default} はリストを @samp{new} にリセットし、 @samp{all} は old、new、context
の省略形です。このオプションが指定されておらず、構成変数 @samp{diff.wsErrorHighlight} が設定されていない場合、 @samp{new}
行の空白エラーのみが強調表示されます。空白エラーは @samp{color.diff.whitespace} で色分けされています。

@item  @samp{--full-index} 
パッチ形式の出力を生成するときは、最初の一握りの文字(first handful of
characters)の代わりに、「インデックス」行にイメージ前およびイメージ後の完全ブロブオブジェクト名を表示します。

@item  @samp{--binary} 
@samp{--full-index} に加えて、 @samp{git-apply} で適用できるバイナリ差分を出力します。
@samp{--patch} の機能を含んでいます。

@item  @samp{--abbrev[=<n>]} 
完全な40バイトの16進オブジェクト名をdiff-raw形式の出力とdiff-treeヘッダー行に表示する代わりに、オブジェクトを一意に参照する、少なくとも
@emph{<n>} 桁の16進数の長さの最短のプレフィックスを表示します。diffパッチ出力形式では、 @samp{--full-index} が優先されます。つまり、
@samp{--full-index} が指定されている場合、 @samp{--abbrev} に関係なく、完全なブロブ名が表示されます。デフォルト以外の桁数は、
@samp{--abbrev=<n>} で指定できます。

@item  @samp{-B[<n>][/<m>]} 
@itemx  @samp{--break-rewrites[=[<n>][/<m>]]} 
完全な書き換えの変更を削除と作成のペアに分割します。これには以下の2つの目的があります:

これは、ファイルの完全な書き換えに相当する変更が、コンテキストとしてテキストで一致する非常に少数の行と混合された一連の削除と挿入としてではなく、古いものすべての単一の削除とそれに続く
すべての新しいものを1回挿入し、数値 @samp{m} が -B オプションのこの側面を制御します(デフォルトは60%)。 @samp{-B/70%}
は、Gitがそれを完全な書き換えと見なすために、元の30%未満が結果に残る必要があることを指定します(つまり、結果のパッチは、コンテキスト行と混合された一連の削除と挿入になります)。

-M と一緒に使用すると、完全に書き換えられたファイルも名前変更のソースと見なされ(通常、 -M
は、消えたファイルのみを名前変更のソースと見なします)、数 @samp{n} が -Bオプションのこの側面を制御します(デフォルトは50%)。 @samp{-B20%}
は、ファイルのサイズの20%以上と比較して、追加および削除を伴う変更が、別のファイルへの名前変更の可能なソースとして取得される資格があることを指定します。

@item  @samp{-M[<n>]} 
@itemx  @samp{--find-renames[=<n>]} 
名前の変更(renames)を検知する。
@samp{n} が指定されている場合、それは類似性インデックスのしきい値です
(つまり、ファイルのサイズと比較した追加/削除の量)。
たとえば、 @samp{-M90%} は、ファイルの90%以上が変更されていない場合、
Gitが削除/追加のペアを名前変更と見なす必要があることを意味します。
@samp{%} 記号がない場合、数値は小数として読み取られ、その前に小数点が付きます。
つまり、 @samp{-M5} は0.5になるため、@samp{-M50%} と同じになります。
同様に、 @samp{-M05} は @samp{-M5%} と同じです。
検出を正確な名前変更に制限するには、 @samp{-M100%} を使用します。
デフォルトの類似性インデックスは50%です。

@item  @samp{-C[<n>]} 
@itemx  @samp{--find-copies[=<n>]} 
名前と同様コピーを検出します。 @samp{--find-copies-harder} @samp{も参照してください。 `n} を指定すると、 @samp{-M<n>}
と同じ意味になります。

@item  @samp{--find-copies-harder} 
パフォーマンス上の理由から、デフォルトでは、 @samp{-C}
オプションは、コピーの元のファイルが同じ変更組(changeset)で変更された場合にのみコピーを検索します。このフラグにより、コマンドは変更されていないファイルをコピー元の候補として検査します。これは大規模なプロジェクトでは非常にコストのかかる操作であるため、注意して使用してください。
複数の @samp{-C} オプションを指定しても同じ効果があります。

@item  @samp{-D} 
@itemx  @samp{--irreversible-delete} 
削除するプレイメージ(preimage)を省略します。つまり、ヘッダーのみを出力し、プレイメージと @samp{/dev/null}
の差分は出力しません。結果のパッチは、 @samp{patch} または @samp{git apply}
で適用されることを意図していません。これは、変更後にテキストを確認することに集中したい人のためだけのものです。さらに、出力には明らかに、そのようなパッチを手動でも逆に適用するのに十分な情報が不足しているため、オプションの名前が付けられています。

@samp{-B} と併用する場合は、削除/作成ペアの削除部分のプリイメージ(preimage)も省略してください。

@item  @samp{-l<num>} 
@samp{-M} および @samp{-C}
オプションには、名前変更/コピーのサブセットを安価に検出できるいくつかの準備手順が含まれ、その後に、残りのすべてのペアになっていない宛先をすべての関連ソースと比較する徹底的なフォールバック部分が続きます。(名前の変更の場合、残りのペアになっていないソースのみが関係します。コピーの場合、すべての元のソースが関係します)。Nのソースと宛先の場合、この徹底的なチェックのコストは
O(N^2)
です。このオプションは、関係するソース/宛先ファイルの数が指定された数を超えた場合に、名前変更/コピー検出の完全な部分が実行されないようにします。デフォルトは
diff.renameLimit です。 値0は無制限として扱われることに注意してください。

@item  @samp{--diff-filter=[(A|C|D|M|R|T|U|X|B)...[*]]} 
追加(Add)・コピー(Copy)・削除(Delete)・変更(Modify)・名前変更(Rename)されたファイル、タイプが変更されたファイル(T)、マージされていないファイル(U)、不明なファイル(X)、またはペアリングが壊れているファイル(B)のみを選択します。フィルタ文字(無しも含む)の任意の組み合わせを使用できます。
組み合わせに @samp{*} (全てまたは無し)が追加されると、比較で他の基準に一致するファイルがある場合、すべてのパスが選択されます。
他の基準に一致するファイルがない場合、何も選択されません。

また、逆に、除外したい時はこれらの各大文字指定を小文字にして指定します。例えば @samp{--diff-filter=ad}
は、追加および削除されたパスを除外します。

注意:すべてのdiffがすべてのタイプを特徴とするわけではないことに注意してください。
たとえば、インデックスから作業ツリーへのdiffにエントリを追加することはできません(diffに含まれるパスのセットは、インデックスの内容によって制限されるため)。
同様に、これらのタイプの検出が無効になっている場合、コピーおよび名前変更されたエントリは表示されません。

@item  @samp{-S<string>} 
ファイル内の指定の文字列(つまり、 addition 、deletion)の出現回数の差分を調べます。スクリプターが使用することを目的としています。

(構造体など)コードの正確なブロックを探していて、そのブロックが最初に作成されてからの履歴を知りたい場合に便利です。この機能を繰り返し使用して、プリイメージ(preimage)内の興味深いブロックを
@samp{-S} にフィードバックし、そしてあなたはそれをブロックの最初のバージョンを取得するまで続けます。

バイナリファイルも検索されます。

@item  @samp{-G<regex>} 
パッチテキストに <regex> にマッチする 追加/削除 された行が含まれている差分を探します。

@samp{-S<regex> --pickaxe-regex} と @samp{-G<regex>}
の違いを説明するために、同じファイル内で以下のdiffを使用してコミットすることを検討してください:

@example
+    return frotz(nitfol, two->ptr, 1, 0);
...
-    hit = frotz(nitfol, mf2.ptr, 1, 0);
@end example


@samp{git log -G"frotz\(nitfol"} はこのコミットを表示しますが、 @samp{git log -S"frotz\(nitfol"
--pickaxe-regex} は表示しません(その文字列の出現回数が変更されなかったため)。

@samp{--text} が提供されていない限り、 textconv フィルターのないバイナリファイルのパッチは無視されます。

詳細については gitdiffcore(7) の @emph{pickaxe} エントリを参照してください。

@item  @samp{--find-object=<object-id>} 
指定されたオブジェクトの出現回数を変更する違いを探します。 @samp{-S}
と同様に、引数だけが異なり、特定の文字列ではなく特定のオブジェクトIDを検索します。

オブジェクトは、ブロブまたはサブモジュールのコミットにすることができます。 これは、 @samp{git-log} の @samp{-t}
オプションがツリーも探すことを意味します。

@item  @samp{--pickaxe-all} 
@samp{-S} または @samp{-G} が変更を見つけたら、 <string>
の変更を含むファイルだけでなく、その変更セット(changeset)のすべての変更を表示します。

@item  @samp{--pickaxe-regex} 
@samp{-S} に指定した <string> を拡張POSIX正規表現として扱います。

@item  @samp{-O<orderfile>} 
ファイルが出力に表示される順序を制御します。これは @samp{diff.orderFile}
構成変数をオーバーライドします(git-config(1) 参照)。 @samp{diff.orderFile} をキャンセルするには、
@samp{-O/dev/null} を使用します。

出力順序は、 <orderfile>
内のglobパターンの順序によって決定されます。最初のパターンに一致するパス名を持つすべてのファイルが最初に出力され、2番目のパターンに一致する(ただし最初のパターンには一致しない)パス名を持つすべてのファイルが次に出力されます。パス名がどのパターンとも一致しないすべてのファイルは、ファイルの最後に暗黙のすべて一致パターンがあるかのように、最後に出力されます。複数のパス名のランクが同じである場合(同じパターンに一致するが、以前のパターンには一致しない)、相互の出力順序は通常の順序です。

<orderfile> は以下のとおりパースされます:

@itemize 

@item
空白行は無視されるため、読みやすくするための区切りとして使用できます。

@item
ハッシュ ("@samp{#}") で始まる行は無視されるため、コメントに使用できます。
パターンがハッシュで始まる場合は、パターンの先頭にバックスラッシュ(訳注:日本では環境により円記号)("@samp{\}") を追加します。

@item
他の各行には、単一のパターンが含まれています。
@end itemize

パターンは、 FNM_PATHNAME フラグなしで fnmatch(3)
に使用されるパターンと同じ構文とセマンティクスを持ちますが、最終的なパス名コンポーネントをいくつも削除するとパターンと一致する場合、パス名もパターンと一致する点が異なります。
たとえば、パターン "@samp{foo*bar}" は、 "@samp{fooasdfbar}" および "@samp{foo/bar/baz/asdf}" と一致しますが、
"@samp{foobarx}" とは一致しません。

@item  @samp{--skip-to=<file>} 
@itemx  @samp{--rotate-to=<file>} 
名前付き <file> の前のファイルを出力から破棄するか(スキップして)、出力の最後に移動させます(ローテーションさせます)。 これらは主に @samp{git
difftool} コマンドを使用するために考案されたものであり、それ以外の場合はあまり役に立たない可能性があります。

@item  @samp{-R} 
2つの入力を交換します。 つまり、インデックスまたはディスク上のファイルとツリーの内容の違いを表示します。

@item  @samp{--relative[=<path>]} 
@itemx  @samp{--no-relative} 
プロジェクトのサブディレクトリから実行する場合、このオプションを使用して、ディレクトリ外の変更を除外し、それに関連するパス名を表示するように指示できます。サブディレクトリ(ベアリポジトリなど)にいない場合は、引数として
<path> を指定することで、出力を作成するサブディレクトリに名前を付けることができます。 @samp{--no-relative`は、
`diff.relative} 設定オプションと以前の @samp{--relative} の両方を打ち消すために使用できます。

@item  @samp{-a} 
@itemx  @samp{--text} 
すべてのファイルをテキストとして扱います。

@item  @samp{--ignore-cr-at-eol} 
比較を行うときは、行末のキャリッジリターン(carriage-return)を無視します。

@item  @samp{--ignore-space-at-eol} 
行末(EOL)での空白(whitespace)の変更を無視します。

@item  @samp{-b} 
@itemx  @samp{--ignore-space-change} 
空白(whitespace)の数の変更は無視してください。これは、行末の空白(whitespace)を無視し、1つ以上の空白文字(whitespace
characters)の他のすべてのシーケンスを同等と見なします。

@item  @samp{-w} 
@itemx  @samp{--ignore-all-space} 
行を比較するときは空白を無視します。 これにより、一方の行に空白があり、もう一方の行に空白がない場合でも、違いは無視されます。

@item  @samp{--ignore-blank-lines} 
全て空白の行の変更は無視します。

@item  @samp{-I<regex>} 
@itemx  @samp{--ignore-matching-lines=<regex>} 
すべての行が <regex> にマッチする変更を無視します。このオプションは複数回指定できます。

@item  @samp{--inter-hunk-context=<lines>} 
指定された行数までの差分ハンク間のコンテキストを表示し、それによって互いに近いハンクを融合します。デフォルトは
@samp{diff.interHunkContext} で、設定オプションが設定されていない場合は0です。

@item  @samp{-W} 
@itemx  @samp{--function-context} 
関数全体を各変更のコンテキスト行として表示します。関数名は、 @samp{git diff}
がパッチハンクヘッダーを処理するのと同じ方法で決定されます(gitattributes(5) の @emph{Defining a custom
hunk-header} を参照)。

@item  @samp{--exit-code} 
diff(1）と同様のコードでプログラムを終了させます。つまり、違いがあった場合は 1 で終了し、 0 は違いがないことを意味します。

@item  @samp{--quiet} 
プログラムのすべての出力を無効にします。 @samp{--exit-code} を意味します。

@item  @samp{--ext-diff} 
外部diffヘルパーの実行を許可します。 gitattributes(5) を使用して外部diffドライバーを設定する場合は、
git-log(1) およびその仲間と一緒にこのオプションを使用する必要があります。

@item  @samp{--no-ext-diff} 
外部diffドライバーを禁止します。

@item  @samp{--textconv} 
@itemx  @samp{--no-textconv} 
バイナリファイルを比較するときに、外部テキスト変換フィルターの実行を許可(または禁止)します。 詳細については、
gitattributes(5)
を参照してください。textconvフィルターは通常、一方向の変換であるため、結果のdiffは人間の消費に適していますが、適用(apply)することはできません。このため、textconvフィルターは、
git-diff(1) および git-log(1) に対してのみデフォルトで有効になりますが、
git-format-patch(1) またはdiff配管コマンドに対しては有効になりません。

@item  @samp{--ignore-submodules[=<when>]} 
diff生成のサブモジュールへの変更を無視します。 <when> は、
none・untracked・dirty・allのいずれかになります。これがデフォルトです。noneを使用すると、追跡されていないファイルまたは変更されたファイルが含まれている場合、またはそのHEADがスーパープロジェクトに記録されているコミットと異なる場合にサブモジュールが変更されたと見なされ、
git-config(1) または gitmodules(5) の
ignoreオプションの設定をオーバーライドするために使用できます。untrackedが使用されている場合、サブモジュールには追跡されていないコンテンツのみが含まれている場合、サブモジュールはダーティとは見なされません(ただし、変更されたコンテンツはスキャンされます)。「dirty」を使用すると、サブモジュールの作業ツリーへのすべての変更が無視され、スーパープロジェクトに格納されているコミットへの変更のみが表示されます(これは1.7.0までの動作でした)。「all」を使用すると、サブモジュールへのすべての変更が非表示になります。

@item  @samp{--src-prefix=<prefix>} 
"a/" の代わりに、与えられたソースプレフィックス(source prefix)を表示します。

@item  @samp{--dst-prefix=<prefix>} 
"b/" の代わりに、指定された宛先プレフィックス(destination prefix)を表示します。

@item  @samp{--no-prefix} 
送信元(source)または宛先(destination)のプレフィックスを表示しません。

@item  @samp{--line-prefix=<prefix>} 
出力のすべての行に追加のプレフィックスを付加します。

@item  @samp{--ita-invisible-in-index} 
デフォルトでは、 "git add -N" によって追加されたエントリは、 "git diff" に既存の空のファイルとして表示され、 "git
diff --cached" に新しいファイルとして表示されます。このオプションを使用すると、エントリは "git diff"
では新しいファイルとして表示され、 "git diff --cached" では存在しません。このオプションは、
@samp{--ita-visible-in-index} で元に戻すことができます。どちらのオプションも実験的なものであり、将来削除される可能性があります。
@end table

これらの一般的なオプションの詳細については、 gitdiffcore(7) も参照してください。

@table @asis

@item  @samp{-1 --base} 
@itemx  @samp{-2 --ours} 
@itemx  @samp{-3 --theirs} 
Compare the working tree with the "base" version (stage #1), "our branch"
(stage #2) or "their branch" (stage #3).  The index contains these stages
only for unmerged entries i.e.  while resolving conflicts.  See
git-read-tree(1) section "3-Way Merge" for detailed information.

@item  @samp{-0} 
Omit diff output for unmerged entries and just show "Unmerged".  Can be used
only when comparing the working tree with the index.

@item  <path>… 
The <paths> parameters, when given, are used to limit the diff to the named
paths (you can give directory names and get diff for all files under them).
@end table

@noindent

@chapheading Raw output format

@samp{git-diff-index} と @samp{git-diff-tree} と @samp{git-diff-files} と @samp{git diff --raw}
からの生の出力形式は非常に似ています。

これらのコマンドはすべて、2つのセットを比較します。なお、比較されるものは異なります:

@table @asis

@item  git-diff-index <tree-ish> 
<tree-ish> とファイルシステム上のファイルを比較します。

@item  git-diff-index --cached <tree-ish> 
<tree-ish> とインデックスを比較します。

@item  git-diff-tree [-r] <tree-ish-1> <tree-ish-2> [<pattern>…] 
2つの引数で指定されたツリーを比較します。

@item  git-diff-files [<pattern>…] 
インデックスとファイルシステム上のファイルを比較します。
@end table

"git-diff-tree"
コマンドは、比較対象のハッシュ値を出力することで出力を開始します。その後、すべてのコマンドは、変更されたファイルごとに1つの出力行を出力します。

出力行は以下のようにフォーマットされます:

@example
in-place edit  :100644 100644 bcd1234 0123456 M file0
copy-edit      :100644 100644 abcd123 1234567 C68 file1 file2
rename-edit    :100644 100644 abcd123 1234567 R86 file1 file3
create         :000000 100644 0000000 1234567 A file4
delete         :100644 000000 1234567 0000000 D file5
unmerged       :000000 000000 0000000 0000000 U file6
@end example


つまり、左から右へ:

@enumerate 

@item
コロン(:)

@item
"src" のモード。作成(creation)またはマージされていない(unmerged)場合は 000000

@item
空白

@item
"dst" のモード。作成(creation)またはマージされていない(unmerged)場合は 000000

@item
空白

@item
"src" のsha1。作成(creation)またはマージされていない(unmerged)場合は 0@{40@}

@item
空白

@item
"dst" のsha1。作成(creation)またはマージされていない(unmerged)または作業ツリーにある場合は 0@{40@}

@item
空白

@item
ステータスの後に、オプションの「スコア数」("score" number)が続きます

@item
@samp{-z} オプションが使用されている場合はタブまたはNUL

@item
"src" のパス

@item
@samp{-z} オプションが使用されている場合タブまたはNUL。ステータスCまたはRにのみ存在します

@item
"dst" のパス。ステータスCまたはRにのみ存在します

@item
LFでレコードを終了します。 @samp{-z} オプションが使用されている場合はNULでレコードを終了します。
@end enumerate

ステータス文字の種類は以下のとおり:

@itemize 

@item
A: ファイルの追加

@item
C: ファイルを新しいファイルにコピー

@item
D: ファイルの削除

@item
M: ファイルの内容やモードの変更

@item
R: ファイル名の名前変更

@item
T: ファイルのタイプを変更

@item
U: ファイルはマージされていません(コミットする前にマージを完了する必要があります)

@item
X: 「不明な」変更タイプ(おそらくバグです。報告してください)
@end itemize

ステータス文字CとRの後には常にスコアが続きます(移動またはコピーのソースとターゲットの間の類似性のパーセンテージを示します)。ステータス文字Mの後には、ファイルの書き換えのスコア(非類似度のパーセンテージを示す)が続く場合があります。

<sha1> は、ファイルがファイルシステム上で新規で、インデックスと同期していない場合、すべて0として表示されます。

例:

@example
:100644 100644 5be4a4a 0000000 M file.c
@end example


@samp{-z} オプションを指定しない場合、構成変数 @samp{core.quotePath} で説明されているように、通常の文字以外(unusual
characters)を含むパス名が引用符で囲まれます(git-config(1) 参照)。 @samp{-z}
を使用すると、ファイル名がそのまま出力され、行はNULバイトで終了します。

@noindent

@chapheading diff format for merges

"git-diff-tree" と "git-diff-files" と "git-diff --raw" は、 @samp{-c} または @samp{--cc}
オプションを使用して、マージコミットに対してもdiff出力を生成できます。出力は、以下の点で上記の形式とは異なります:

@enumerate 

@item
親ごとにコロン(:)があります

@item
より多くの "src" モードと "src" sha1があります

@item
statusは、各親のステータス文字を連結したものです

@item
オプションの「スコア数」はありません

@item
ファイルのタブ区切りのパス名
@end enumerate

@samp{-c} および ` -cc` の場合、履歴のいずれかの側でファイルの名前が変更された場合でも、宛先(dst)または最終パスのみが表示されます。
@samp{--combined-all-paths} を使用すると、各親のパスの名前が表示され、それに続いてマージコミットのパスの名前が表示されます。

例: @samp{--combined-all-paths} を使用しない @samp{-c} および @samp{--cc} の場合:

@example
::100644 100644 100644 fabadb8 cc95eb0 4866510 MM       desc.c
::100755 100755 100755 52b7a2d 6d1ac04 d2ac7d7 RM       bar.sh
::100644 100644 100644 e07d6c5 9042e82 ee91881 RR       phooey.c
@end example


例: @samp{-c} または @samp{--cc} のいずれかに @samp{--combined-all-paths} が追加された場合:

@example
::100644 100644 100644 fabadb8 cc95eb0 4866510 MM       desc.c  desc.c  desc.c
::100755 100755 100755 52b7a2d 6d1ac04 d2ac7d7 RM       foo.sh  bar.sh  bar.sh
::100644 100644 100644 e07d6c5 9042e82 ee91881 RR       fooey.c fuey.c  phooey.c
@end example


注意: 'combined diff’は、すべての親から変更されたファイルのみをリストすることに注意してください。

@noindent

@chapheading Generating patch text with -p

git-diff(1) 、 git-log(1) 、 git-show(1) 、
git-diff-index(1) 、 git-diff-tree(1) 、
git-diff-files(1) に @samp{-p} オプションを付けて実行するとパッチテキストを生成します。パッチテキストの作成は、
@samp{GIT_EXTERNAL_DIFF} と @samp{GIT_DIFF_OPTS} 環境変数( git(1) 参照)、および @samp{diff}
属性( gitattributes(5) 参照)を介してカスタマイズできます。

-pオプションが生成するものは、従来のdiff形式とは少々異なります:

@enumerate 

@item
先行して、以下のような "git diff" ヘッダーがあります:

@example
diff --git a/file1 b/file2
@end example

名前の変更/コピーが含まれない限り、 @samp{a/} と @samp{b/} のファイル名は同じです。 特に、作成または削除の場合でも、 @samp{a/} または @samp{b/}
ファイル名の代わりに @samp{/dev/ null} が使用されることはありません。

名前変更/コピーが含まれる場合、 @samp{file1} と`file2`
は、それぞれ名前変更/コピーのソースファイルの名前と、名前変更/コピーが生成するファイルの名前を示します。

@item
その後に、1つ以上の拡張ヘッダー行達が続きます:

@example
old mode <mode>
new mode <mode>
deleted file mode <mode>
new file mode <mode>
copy from <path>
copy to <path>
rename from <path>
rename to <path>
similarity index <number>
dissimilarity index <number>
index <hash>..<hash> <mode>
@end example

ファイルモードは、ファイルタイプとファイル許可ビットを含む6桁の8進数として出力されます。

拡張ヘッダーのパス名には、 @samp{a/} および @samp{b/} プレフィックスは含まれません。

類似インデックス(similarity index)は変更されていない行のパーセンテージであり、非類似インデックス(dissimilarity
index)は変更された行のパーセンテージです。これは切り捨てられた整数であり、その後にパーセント記号が続きます。したがって、100％の類似インデックス値は2つの等しいファイルを表し、100％の非類似性は古いファイルから新しいファイルに移行された行がないことを意味します。

インデックス行には、変更前後のブロブオブジェクト名が含まれます。 <mode>
は、ファイルモードが変更されない場合に含まれます。それ以外の場合、別々の行は古いモードと新しいモードを示します。

@item
通常の文字でないキャラクタ(\"unusual\" characters)を含むパス名は、構成変数 @samp{core.quotePath}
で説明されているように引用符で囲まれています( git-config(1)参照)。

@item
出力内のすべての @samp{file1} ファイルはコミット前のファイルを参照し、すべての @samp{file2}
ファイルはコミット後のファイルを参照します。各変更を各ファイルに順番に適用するのは誤りです。たとえば、以下のパッチはaとbを交換します:

@example
diff --git a/a b/b
rename from a
rename to b
diff --git a/b b/a
rename from b
rename to a
@end example

@item
ハンクのヘッダーには、ハンクが適用される関数の名前が記載されています。特定の言語に合わせてこれを調整する方法の詳細については、
gitattributes(5) の "Defining a custom hunk-header" を参照してください。
@end enumerate

@noindent

@chapheading Combined diff format

diffを生成するコマンドは、マージを表示するときに @samp{-c} または @samp{--cc} オプションを使用して「合成diff」(combined
diff)を生成できます。これは git-diff(1) または git-show(1)
でのマージを表示するときのデフォルトの形式です。 注意: これらのコマンドのいずれかに適切な @samp{--diff-merges}
オプションを指定して、特定の形式で差分を強制的に生成できることにも注意してください。

合成diff形式は以下のようになります:

@example
diff --combined describe.c
index fabadb8,cc95eb0..4866510
--- a/describe.c
+++ b/describe.c
@@@@@@ -98,20 -98,12 +98,20 @@@@@@
        return (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;
  @}

- static void describe(char *arg)
 -static void describe(struct commit *cmit, int last_one)
++static void describe(char *arg, int last_one)
  @{
 +      unsigned char sha1[20];
 +      struct commit *cmit;
        struct commit_list *list;
        static int initialized = 0;
        struct commit_name *n;

 +      if (get_sha1(arg, sha1) < 0)
 +              usage(describe_usage);
 +      cmit = lookup_commit_reference(sha1);
 +      if (!cmit)
 +              usage(describe_usage);
 +
        if (!initialized) @{
                initialized = 1;
                for_each_ref(get_name);
@end example


@enumerate 

@item
まず "git diff"  ヘッダーがあり、以下のようになります( @samp{-c} オプションが使用されている場合):

@example
diff --combined file
@end example

または、以下のようになります( @samp{--cc} オプションが使用されている場合):

@example
diff --cc file
@end example

@item
その後に1つ以上の拡張ヘッダー行が続きます(以下の例は、2つの親とのマージを示しています):

@example
index <hash>,<hash>..<hash>
mode <mode>,<mode>..<mode>
new file mode <mode>
deleted file mode <mode>,<mode>
@end example

@samp{mode <mode>,<mode>..<mode>} 行は、<mode> の少なくとも1つが他の <mode>
と異なる場合にのみ表示されます。検出されたコンテンツの移動(名前の変更とコピーの検出)に関する情報を含む拡張ヘッダーは、2つの <tree-ish>
のdiffで機能するように設計されており、合成diff形式では使用されません。

@item
その後に2行の from-file/to-file ヘッダーが続きます

@example
--- a/file
+++ b/file
@end example

従来の統一diff形式の2行ヘッダーと同様に、 @samp{/dev/null} は、作成または削除されたファイルを通知するために使用されます。

ただし、 --combined-all-paths  オプションが指定されている場合、2行の from-file/to-file の代わりに、 N+1
行の from-file/to-file ヘッダーが取得されます。ここで、 N はマージコミットの親の数です。

@example
--- a/file
--- a/file
--- a/file
+++ b/file
@end example

この拡張形式は、名前変更またはコピー検出がアクティブな場合に役立ち、別の親のファイルの元の名前を確認できます。

@item
チャンクヘッダーの形式が変更され、誤って @samp{patch-p1}
にフィードされるのを防ぎます。合成差分形式は、マージコミットの変更を確認するために作成されたものであり、適用されることを意図したものではありません。この変更は、拡張された「インデックス」ヘッダーの変更に似ています:

@example
@@@@@@ <from-file-range> <from-file-range> <to-file-range> @@@@@@
@end example

合成diff形式のチャンクヘッダーには親の数+1の @samp{@@} 文字があります。
@end enumerate

従来の統一diff形式とは異なり、2つのファイルAとBが、 @samp{-} (マイナスはAに表示されますが、Bでは削除されます) または @samp{+}
(プラスはAにはありませんが、Bには追加されます)、または @samp{" "}（スペースは変更なし)
プレフィックスを持つ単一の列で表示される場合、この形式は2つ以上のファイル file1, file2,… を1つのファイルXと比較し、Xが各
fileN とどのように異なるかを示します。ファイルNごとに1つの列が出力行の前に追加され、Xの行が出力行とどのように異なるかを示します。

列Nの @samp{-} 文字は、その行が fileN に表示されているが、結果には表示されていないことを意味します。 列Nの @samp{+}
文字は、結果に行が表示され、 fileN にその行がないことを意味します(つまり、その親の観点から見て行が追加されたことを示す)。

上記の出力例では、関数のシグネチャが両方のファイルから見て変更されています(したがって、 file1 と file2 の両方から2つの @samp{-}
が削除され、さらに @samp{++} が追加されたため、 file1 と file2 のどちらにも表示されません)。また、他の8行は file1 と同じですが、
file2 には表示されません(したがって、接頭辞として @samp{+} が付けられます)。

@samp{git diff-tree -c} で表示される場合、マージコミットの親をマージ結果と比較します(つまり、 file1..fileN が親です)。
@samp{git diff-files -c} で表示される場合、2つの未解決のマージ親を作業ツリーファイルと比較します(つまり、 file1
はステージ2、別名「私たちのバージョン」、 file2 はステージ3、別名「彼らのバージョン」です)。

@noindent

@chapheading other diff formats

@samp{--summary} オプションは、新しく追加、削除、名前変更、およびコピーされたファイルを説明します。@samp{--stat} オプションは、
diffstat(1) グラフ を出力に追加します。これらのオプションは、 @samp{-p}
などの他のオプションと組み合わせることができ、人間が読むことを目的としています。

名前の変更またはコピーを伴う変更を表示する場合、 @samp{--stat}
出力は、パス名の共通のプレフィックスとサフィックスを組み合わせることにより、パス名をコンパクトにフォーマットします。
たとえば、4行を変更(modify)しながら @samp{arch/i386/Makefile} を @samp{arch/x86/Makefile}
に移動(move)する変更(change)は、次のように表示されます:

@example
arch/@{i386 => x86@}/Makefile    |   4 +--
@end example


@samp{--numstat} オプションは diffstat(1) 情報を提供しますが、人間ではなくソフトウェアで読むのを容易にするように設計されています。
@samp{--numstat} 出力のエントリは以下のようになります:

@example
1       2       README
3       1       arch/@{i386 => x86@}/Makefile
@end example


この形式は、左から右へ:

@enumerate 

@item
追加行数

@item
タブ

@item
削除行数

@item
タブ

@item
パス名(おそらく rename/copy 情報を含む)

@item
改行
@end enumerate

@samp{-z} 出力オプションが有効な場合、出力は以下のようにフォーマットされます:

@example
1       2       README NUL
3       1       NUL arch/i386/Makefile NUL arch/x86/Makefile NUL
@end example


これは:

@enumerate 

@item
追加行数

@item
タブ

@item
削除行数

@item
タブ

@item
NUL(rename/copy された場合のみ存在します)

@item
プリイメージのパス名

@item
NUL(rename/copy された場合のみ存在します)

@item
ポストイメージのパス名(rename/copy された場合のみ存在します)

@item
NUL
@end enumerate

名前が変更された場合のプリイメージパスの前の追加の @samp{NUL}
は、出力を読み取るスクリプトが、先読みせずに、読み取られている現在のレコードがシングルパスレコードであるか、名前変更/コピーレコードであるか、を判断できるようにするためです。追加および削除された行を読み取った後、
@samp{NUL} まで読み取るとパス名が生成されますが、それが @samp{NUL} の場合、レコードには2つのパスが表示されます。

@noindent

@chapheading EXAMPLES

@table @asis

@item  Various ways to check your working tree 
@example
$ git diff            (1)
$ git diff --cached   (2)
$ git diff HEAD       (3)
@end example


@table @asis

@item @pxref{CO1-1,,(1)}
Changes in the working tree not yet staged for the next commit.

@item @pxref{CO1-2,,(2)}
Changes between the index and your last commit; what you would be committing
if you run @samp{git commit} without @samp{-a} option.

@item @pxref{CO1-3,,(3)}
Changes in the working tree since your last commit; what you would be
committing if you run @samp{git commit -a}
@end table

@item  Comparing with arbitrary commits 
@example
$ git diff test            (1)
$ git diff HEAD -- ./test  (2)
$ git diff HEAD^ HEAD      (3)
@end example


@table @asis

@item @pxref{CO2-1,,(1)}
Instead of using the tip of the current branch, compare with the tip of
"test" branch.

@item @pxref{CO2-2,,(2)}
Instead of comparing with the tip of "test" branch, compare with the tip of
the current branch, but limit the comparison to the file "test".

@item @pxref{CO2-3,,(3)}
Compare the version before the last commit and the last commit.
@end table

@item  Comparing branches 
@example
$ git diff topic master    (1)
$ git diff topic..master   (2)
$ git diff topic...master  (3)
@end example


@table @asis

@item @pxref{CO3-1,,(1)}
Changes between the tips of the topic and the master branches.

@item @pxref{CO3-2,,(2)}
Same as above.

@item @pxref{CO3-3,,(3)}
Changes that occurred on the master branch since when the topic branch was
started off it.
@end table

@item  Limiting the diff output 
@example
$ git diff --diff-filter=MRC            (1)
$ git diff --name-status                (2)
$ git diff arch/i386 include/asm-i386   (3)
@end example


@table @asis

@item @pxref{CO4-1,,(1)}
Show only modification, rename, and copy, but not addition or deletion.

@item @pxref{CO4-2,,(2)}
Show only names and the nature of change, but not actual diff output.

@item @pxref{CO4-3,,(3)}
Limit diff output to named subtrees.
@end table

@item  Munging the diff output 
@example
$ git diff --find-copies-harder -B -C  (1)
$ git diff -R                          (2)
@end example


@table @asis

@item @pxref{CO5-1,,(1)}
Spend extra cycles to find renames, copies and complete rewrites (very
expensive).

@item @pxref{CO5-2,,(2)}
Output diff in reverse.
@end table
@end table

@noindent

@chapheading SEE ALSO

diff(1), git-difftool(1), git-log(1),
gitdiffcore(7), git-format-patch(1), git-apply(1),
git-show(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-difftool,,,Top
@chapheading Name

git-difftool — Show changes using common diff tools

@noindent

@chapheading Synopsis

@display
git difftool [<options>] [<commit> [<commit>]] [--] [<path>…]
@end display


@noindent

@chapheading DESCRIPTION

@emph{git difftool} is a Git command that allows you to compare and edit files
between revisions using common diff tools.  @emph{git difftool} is a frontend to
@emph{git diff} and accepts the same options and arguments. See
git-diff(1).

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-d} 
@itemx  @samp{--dir-diff} 
Copy the modified files to a temporary location and perform a directory diff
on them. This mode never prompts before launching the diff tool.

@item  @samp{-y} 
@itemx  @samp{--no-prompt} 
Do not prompt before launching a diff tool.

@item  @samp{--prompt} 
Prompt before each invocation of the diff tool.  This is the default
behaviour; the option is provided to override any configuration settings.

@item  @samp{--rotate-to=<file>} 
Start showing the diff for the given path, the paths before it will move to
end and output.

@item  @samp{--skip-to=<file>} 
Start showing the diff for the given path, skipping all the paths before it.

@item  @samp{-t <tool>} 
@itemx  @samp{--tool=<tool>} 
Use the diff tool specified by <tool>.  Valid values include emerge,
kompare, meld, and vimdiff. Run @samp{git difftool --tool-help} for the list of
valid <tool> settings.

If a diff tool is not specified, @emph{git difftool} will use the configuration
variable @samp{diff.tool}.  If the configuration variable @samp{diff.tool} is not set,
@emph{git difftool} will pick a suitable default.

You can explicitly provide a full path to the tool by setting the
configuration variable @samp{difftool.<tool>.path}. For example, you can
configure the absolute path to kdiff3 by setting
@samp{difftool.kdiff3.path}. Otherwise, @emph{git difftool} assumes the tool is
available in PATH.

Instead of running one of the known diff tools, @emph{git difftool} can be
customized to run an alternative program by specifying the command line to
invoke in a configuration variable @samp{difftool.<tool>.cmd}.

When @emph{git difftool} is invoked with this tool (either through the @samp{-t} or
@samp{--tool} option or the @samp{diff.tool} configuration variable)  the configured
command line will be invoked with the following variables available:
@samp{$LOCAL} is set to the name of the temporary file containing the contents of
the diff pre-image and @samp{$REMOTE} is set to the name of the temporary file
containing the contents of the diff post-image.  @samp{$MERGED} is the name of
the file which is being compared. @samp{$BASE} is provided for compatibility with
custom merge tool commands and has the same value as @samp{$MERGED}.

@item  @samp{--tool-help} 
Print a list of diff tools that may be used with @samp{--tool}.

@item  @samp{--[no-]symlinks} 
@emph{git difftool}'s default behavior is create symlinks to the working tree
when run in @samp{--dir-diff} mode and the right-hand side of the comparison
yields the same content as the file in the working tree.

Specifying @samp{--no-symlinks} instructs @emph{git difftool} to create copies
instead.  @samp{--no-symlinks} is the default on Windows.

@item  @samp{-x <command>} 
@itemx  @samp{--extcmd=<command>} 
Specify a custom command for viewing diffs.  @emph{git-difftool} ignores the
configured defaults and runs @samp{$command $LOCAL $REMOTE} when this option is
specified.  Additionally, @samp{$BASE} is set in the environment.

@item  @samp{-g} 
@itemx  @samp{--[no-]gui} 
When @emph{git-difftool} is invoked with the @samp{-g} or @samp{--gui} option the default
diff tool will be read from the configured @samp{diff.guitool} variable instead
of @samp{diff.tool}. The @samp{--no-gui} option can be used to override this
setting. If @samp{diff.guitool} is not set, we will fallback in the order of
@samp{merge.guitool}, @samp{diff.tool}, @samp{merge.tool} until a tool is found.

@item  @samp{--[no-]trust-exit-code} 
@emph{git-difftool} invokes a diff tool individually on each file.  Errors
reported by the diff tool are ignored by default.  Use @samp{--trust-exit-code}
to make @emph{git-difftool} exit when an invoked diff tool returns a non-zero
exit code.

@emph{git-difftool} will forward the exit code of the invoked tool when
@samp{--trust-exit-code} is used.
@end table

See git-diff(1) for the full list of supported options.

@noindent

@chapheading CONFIG VARIABLES

@emph{git difftool} falls back to @emph{git mergetool} config variables when the
difftool equivalents have not been defined.

@table @asis

@item  diff.tool 
The default diff tool to use.

@item  diff.guitool 
The default diff tool to use when @samp{--gui} is specified.

@item  difftool.<tool>.path 
Override the path for the given tool.  This is useful in case your tool is
not in the PATH.

@item  difftool.<tool>.cmd 
Specify the command to invoke the specified diff tool.

See the @samp{--tool=<tool>} option above for more details.

@item  difftool.prompt 
Prompt before each invocation of the diff tool.

@item  difftool.trustExitCode 
Exit difftool if the invoked diff tool returns a non-zero exit status.

See the @samp{--trust-exit-code} option above for more details.
@end table

@noindent

@chapheading SEE ALSO

@table @asis

@item  git-diff(1) 
Show changes between commits, commit and working tree, etc

@item  git-mergetool(1) 
Run merge conflict resolution tools to resolve merge conflicts

@item  git-config(1) 
Get and set repository or global options
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-fast-export,,,Top
@chapheading Name

git-fast-export — Git data exporter

@noindent

@chapheading Synopsis

@display
git fast-export [<options>] | git fast-import
@end display


@noindent

@chapheading DESCRIPTION

This program dumps the given revisions in a form suitable to be piped into
@emph{git fast-import}.

You can use it as a human-readable bundle replacement (see
git-bundle(1)), or as a format that can be edited before being fed
to @emph{git fast-import} in order to do history rewrites (an ability relied on
by tools like @emph{git filter-repo}).

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--progress=<n>} 
Insert @emph{progress} statements every <n> objects, to be shown by @emph{git
fast-import} during import.

@item  @samp{--signed-tags=(verbatim|warn|warn-strip|strip|abort)} 
Specify how to handle signed tags.  Since any transformation after the
export can change the tag names (which can also happen when excluding
revisions) the signatures will not match.

When asking to @emph{abort} (which is the default), this program will die when
encountering a signed tag.  With @emph{strip}, the tags will silently be made
unsigned, with @emph{warn-strip} they will be made unsigned but a warning will be
displayed, with @emph{verbatim}, they will be silently exported and with @emph{warn},
they will be exported, but you will see a warning.

@item  @samp{--tag-of-filtered-object=(abort|drop|rewrite)} 
Specify how to handle tags whose tagged object is filtered out.  Since
revisions and files to export can be limited by path, tagged objects may be
filtered completely.

When asking to @emph{abort} (which is the default), this program will die when
encountering such a tag.  With @emph{drop} it will omit such tags from the
output.  With @emph{rewrite}, if the tagged object is a commit, it will rewrite
the tag to tag an ancestor commit (via parent rewriting; see
git-rev-list(1))

@item  @samp{-M} 
@itemx  @samp{-C} 
Perform move and/or copy detection, as described in the git-diff(1)
manual page, and use it to generate rename and copy commands in the output
dump.

Note that earlier versions of this command did not complain and produced
incorrect results if you gave these options.

@item  @samp{--export-marks=<file>} 
Dumps the internal marks table to <file> when complete.  Marks are written
one per line as @samp{:markid SHA-1}. Only marks for revisions are dumped; marks
for blobs are ignored.  Backends can use this file to validate imports after
they have been completed, or to save the marks table across incremental
runs.  As <file> is only opened and truncated at completion, the same path
can also be safely given to --import-marks.  The file will not be written if
no new object has been marked/exported.

@item  @samp{--import-marks=<file>} 
Before processing any input, load the marks specified in <file>.  The input
file must exist, must be readable, and must use the same format as produced
by --export-marks.

@item  @samp{--mark-tags} 
In addition to labelling blobs and commits with mark ids, also label tags.
This is useful in conjunction with @samp{--export-marks} and @samp{--import-marks},
and is also useful (and necessary) for exporting of nested tags.  It does
not hurt other cases and would be the default, but many fast-import
frontends are not prepared to accept tags with mark identifiers.

Any commits (or tags) that have already been marked will not be exported
again.  If the backend uses a similar --import-marks file, this allows for
incremental bidirectional exporting of the repository by keeping the marks
the same across runs.

@item  @samp{--fake-missing-tagger} 
Some old repositories have tags without a tagger.  The fast-import protocol
was pretty strict about that, and did not allow that.  So fake a tagger to
be able to fast-import the output.

@item  @samp{--use-done-feature} 
Start the stream with a @emph{feature done} stanza, and terminate it with a
@emph{done} command.

@item  @samp{--no-data} 
Skip output of blob objects and instead refer to blobs via their original
SHA-1 hash.  This is useful when rewriting the directory structure or
history of a repository without touching the contents of individual files.
Note that the resulting stream can only be used by a repository which
already contains the necessary objects.

@item  @samp{--full-tree} 
This option will cause fast-export to issue a "deleteall" directive for each
commit followed by a full list of all files in the commit (as opposed to
just listing the files which are different from the commit’s first parent).

@item  @samp{--anonymize} 
Anonymize the contents of the repository while still retaining the shape of
the history and stored tree.  See the section on @samp{ANONYMIZING} below.

@item  @samp{--anonymize-map=<from>[:<to>]} 
Convert token @samp{<from>} to @samp{<to>} in the anonymized output. If @samp{<to>} is
omitted, map @samp{<from>} to itself (i.e., do not anonymize it). See the section
on @samp{ANONYMIZING} below.

@item  @samp{--reference-excluded-parents} 
By default, running a command such as @samp{git fast-export master~5..master}
will not include the commit master~5 and will make master~4 no
longer have master~5 as a parent (though both the old master~4
and new master~4 will have all the same files).  Use
--reference-excluded-parents to instead have the stream refer to commits in
the excluded range of history by their sha1sum.  Note that the resulting
stream can only be used by a repository which already contains the necessary
parent commits.

@item  @samp{--show-original-ids} 
Add an extra directive to the output for commits and blobs, @samp{original-oid
<SHA1SUM>}.  While such directives will likely be ignored by importers such
as git-fast-import, it may be useful for intermediary filters (e.g. for
rewriting commit messages which refer to older commits, or for stripping
blobs by id).

@item  @samp{--reencode=(yes|no|abort)} 
Specify how to handle @samp{encoding} header in commit objects.  When asking to
@emph{abort} (which is the default), this program will die when encountering such
a commit object.  With @emph{yes}, the commit message will be re-encoded into
UTF-8.  With @emph{no}, the original encoding will be preserved.

@item  @samp{--refspec} 
Apply the specified refspec to each ref exported. Multiple of them can be
specified.

@item  [<git-rev-list-args>…] 
A list of arguments, acceptable to @emph{git rev-parse} and @emph{git rev-list}, that
specifies the specific objects and references to export.  For example,
@samp{master~10..master} causes the current master reference to be exported along
with all objects added since its 10th ancestor commit and (unless the
--reference-excluded-parents option is specified) all files common to
master~9 and master~10.
@end table

@noindent

@chapheading EXAMPLES

@example
$ git fast-export --all | (cd /empty/repository && git fast-import)
@end example


This will export the whole repository and import it into the existing empty
repository.  Except for reencoding commits that are not in UTF-8, it would
be a one-to-one mirror.

@example
$ git fast-export master~5..master |
        sed "s|refs/heads/master|refs/heads/other|" |
        git fast-import
@end example


This makes a new branch called @emph{other} from @emph{master~5..master} (i.e. if
@emph{master} has linear history, it will take the last 5 commits).

Note that this assumes that none of the blobs and commit messages referenced
by that revision range contains the string @emph{refs/heads/master}.

@noindent

@chapheading ANONYMIZING

If the @samp{--anonymize} option is given, git will attempt to remove all
identifying information from the repository while still retaining enough of
the original tree and history patterns to reproduce some bugs. The goal is
that a git bug which is found on a private repository will persist in the
anonymized repository, and the latter can be shared with git developers to
help solve the bug.

With this option, git will replace all refnames, paths, blob contents,
commit and tag messages, names, and email addresses in the output with
anonymized data.  Two instances of the same string will be replaced
equivalently (e.g., two commits with the same author will have the same
anonymized author in the output, but bear no resemblance to the original
author string). The relationship between commits, branches, and tags is
retained, as well as the commit timestamps (but the commit messages and
refnames bear no resemblance to the originals). The relative makeup of the
tree is retained (e.g., if you have a root tree with 10 files and 3 trees,
so will the output), but their names and the contents of the files will be
replaced.

If you think you have found a git bug, you can start by exporting an
anonymized stream of the whole repository:

@example
$ git fast-export --anonymize --all >anon-stream
@end example


Then confirm that the bug persists in a repository created from that stream
(many bugs will not, as they really do depend on the exact repository
contents):

@example
$ git init anon-repo
$ cd anon-repo
$ git fast-import <../anon-stream
$ ... test your bug ...
@end example


If the anonymized repository shows the bug, it may be worth sharing
@samp{anon-stream} along with a regular bug report. Note that the anonymized
stream compresses very well, so gzipping it is encouraged. If you want to
examine the stream to see that it does not contain any private data, you can
peruse it directly before sending. You may also want to try:

@example
$ perl -pe 's/\d+/X/g' <anon-stream | sort -u | less
@end example


which shows all of the unique lines (with numbers converted to "X", to
collapse "User 0", "User 1", etc into "User X"). This produces a much
smaller output, and it is usually easy to quickly confirm that there is no
private data in the stream.

Reproducing some bugs may require referencing particular commits or paths,
which becomes challenging after refnames and paths have been anonymized. You
can ask for a particular token to be left as-is or mapped to a new
value. For example, if you have a bug which reproduces with @samp{git rev-list
sensitive -- secret.c}, you can run:

@example
$ git fast-export --anonymize --all \
      --anonymize-map=sensitive:foo \
      --anonymize-map=secret.c:bar.c \
      >stream
@end example


After importing the stream, you can then run @samp{git rev-list foo -- bar.c} in
the anonymized repository.

Note that paths and refnames are split into tokens at slash boundaries.  The
command above would anonymize @samp{subdir/secret.c} as something like
@samp{path123/bar.c}; you could then search for @samp{bar.c} in the anonymized
repository to determine the final pathname.

To make referencing the final pathname simpler, you can map each path
component; so if you also anonymize @samp{subdir} to @samp{publicdir}, then the final
pathname would be @samp{publicdir/bar.c}.

@noindent

@chapheading LIMITATIONS

Since @emph{git fast-import} cannot tag trees, you will not be able to export the
linux.git repository completely, as it contains a tag referencing a tree
instead of a commit.

@noindent

@chapheading SEE ALSO

git-fast-import(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-fast-import,,,Top
@chapheading Name

git-fast-import — Backend for fast Git data importers

@noindent

@chapheading Synopsis

@display
frontend | git fast-import [<options>]
@end display


@noindent

@chapheading DESCRIPTION

This program is usually not what the end user wants to run directly.  Most
end users want to use one of the existing frontend programs, which parses a
specific type of foreign source and feeds the contents stored there to @emph{git
fast-import}.

fast-import reads a mixed command/data stream from standard input and writes
one or more packfiles directly into the current repository.  When EOF is
received on standard input, fast import writes out updated branch and tag
refs, fully updating the current repository with the newly imported data.

The fast-import backend itself can import into an empty repository (one that
has already been initialized by @emph{git init}) or incrementally update an
existing populated repository.  Whether or not incremental imports are
supported from a particular foreign source depends on the frontend program
in use.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--force} 
Force updating modified existing branches, even if doing so would cause
commits to be lost (as the new commit does not contain the old commit).

@item  @samp{--quiet} 
Disable the output shown by --stats, making fast-import usually be silent
when it is successful.  However, if the import stream has directives
intended to show user output (e.g. @samp{progress} directives), the corresponding
messages will still be shown.

@item  @samp{--stats} 
Display some basic statistics about the objects fast-import has created, the
packfiles they were stored into, and the memory used by fast-import during
this run.  Showing this output is currently the default, but can be disabled
with --quiet.

@item  @samp{--allow-unsafe-features} 
Many command-line options can be provided as part of the fast-import stream
itself by using the @samp{feature} or @samp{option} commands. However, some of these
options are unsafe (e.g., allowing fast-import to access the filesystem
outside of the repository). These options are disabled by default, but can
be allowed by providing this option on the command line.  This currently
impacts only the @samp{export-marks}, @samp{import-marks}, and
@samp{import-marks-if-exists} feature commands.

@example
Only enable this option if you trust the program generating the fast-import
stream! This option is enabled automatically for remote-helpers that use the
`import` capability, as they are already trusted to run their own code.
@end example
@end table

@noindent

@heading Options for Frontends

@table @asis

@item  @samp{--cat-blob-fd=<fd>} 
Write responses to @samp{get-mark}, @samp{cat-blob}, and @samp{ls} queries to the file
descriptor <fd> instead of @samp{stdout}.  Allows @samp{progress} output intended for
the end-user to be separated from other output.

@item  @samp{--date-format=<fmt>} 
Specify the type of dates the frontend will supply to fast-import within
@samp{author}, @samp{committer} and @samp{tagger} commands.  See “Date Formats” below for
details about which formats are supported, and their syntax.

@item  @samp{--done} 
Terminate with error if there is no @samp{done} command at the end of the
stream.  This option might be useful for detecting errors that cause the
frontend to terminate before it has started to write a stream.
@end table

@noindent

@heading Locations of Marks Files

@table @asis

@item  @samp{--export-marks=<file>} 
Dumps the internal marks table to <file> when complete.  Marks are written
one per line as @samp{:markid SHA-1}.  Frontends can use this file to validate
imports after they have been completed, or to save the marks table across
incremental runs.  As <file> is only opened and truncated at checkpoint (or
completion) the same path can also be safely given to --import-marks.

@item  @samp{--import-marks=<file>} 
Before processing any input, load the marks specified in <file>.  The input
file must exist, must be readable, and must use the same format as produced
by --export-marks.  Multiple options may be supplied to import more than one
set of marks.  If a mark is defined to different values, the last file wins.

@item  @samp{--import-marks-if-exists=<file>} 
Like --import-marks but instead of erroring out, silently skips the file if
it does not exist.

@item  @samp{--[no-]relative-marks} 
After specifying --relative-marks the paths specified with --import-marks=
and --export-marks= are relative to an internal directory in the current
repository.  In git-fast-import this means that the paths are relative to
the .git/info/fast-import directory. However, other importers may use a
different location.

Relative and non-relative marks may be combined by interweaving
--(no-)-relative-marks with the --(import|export)-marks= options.
@end table

@noindent

@heading Submodule Rewriting

@table @asis

@item  @samp{--rewrite-submodules-from=<name>:<file>} 
@itemx  @samp{--rewrite-submodules-to=<name>:<file>} 
Rewrite the object IDs for the submodule specified by <name> from the values
used in the from <file> to those used in the to <file>. The from marks
should have been created by @samp{git fast-export}, and the to marks should have
been created by @samp{git fast-import} when importing that same submodule.

<name> may be any arbitrary string not containing a colon character, but the
same value must be used with both options when specifying corresponding
marks.  Multiple submodules may be specified with different values for
<name>. It is an error not to use these options in corresponding pairs.

These options are primarily useful when converting a repository from one
hash algorithm to another; without them, fast-import will fail if it
encounters a submodule because it has no way of writing the object ID into
the new hash algorithm.
@end table

@noindent

@heading Performance and Compression Tuning

@table @asis

@item  @samp{--active-branches=<n>} 
Maximum number of branches to maintain active at once.  See “Memory
Utilization” below for details.  Default is 5.

@item  @samp{--big-file-threshold=<n>} 
Maximum size of a blob that fast-import will attempt to create a delta for,
expressed in bytes.  The default is 512m (512 MiB).  Some importers may wish
to lower this on systems with constrained memory.

@item  @samp{--depth=<n>} 
Maximum delta depth, for blob and tree deltification.  Default is 50.

@item  @samp{--export-pack-edges=<file>} 
After creating a packfile, print a line of data to <file> listing the
filename of the packfile and the last commit on each branch that was written
to that packfile.  This information may be useful after importing projects
whose total object set exceeds the 4 GiB packfile limit, as these commits
can be used as edge points during calls to @emph{git pack-objects}.

@item  @samp{--max-pack-size=<n>} 
Maximum size of each output packfile.  The default is unlimited.

@item  fastimport.unpackLimit 
See git-config(1)
@end table

@noindent

@chapheading PERFORMANCE

The design of fast-import allows it to import large projects in a minimum
amount of memory usage and processing time.  Assuming the frontend is able
to keep up with fast-import and feed it a constant stream of data, import
times for projects holding 10+ years of history and containing 100,000+
individual commits are generally completed in just 1-2 hours on quite modest
(~$2,000 USD) hardware.

Most bottlenecks appear to be in foreign source data access (the source just
cannot extract revisions fast enough) or disk IO (fast-import writes as fast
as the disk will take the data).  Imports will run faster if the source data
is stored on a different drive than the destination Git repository (due to
less IO contention).

@noindent

@chapheading DEVELOPMENT COST

A typical frontend for fast-import tends to weigh in at approximately 200
lines of Perl/Python/Ruby code.  Most developers have been able to create
working importers in just a couple of hours, even though it is their first
exposure to fast-import, and sometimes even to Git.  This is an ideal
situation, given that most conversion tools are throw-away (use once, and
never look back).

@noindent

@chapheading PARALLEL OPERATION

Like @emph{git push} or @emph{git fetch}, imports handled by fast-import are safe to
run alongside parallel @samp{git repack -a -d} or @samp{git gc} invocations, or any
other Git operation (including @emph{git prune}, as loose objects are never used
by fast-import).

fast-import does not lock the branch or tag refs it is actively importing.
After the import, during its ref update phase, fast-import tests each
existing branch ref to verify the update will be a fast-forward update (the
commit stored in the ref is contained in the new history of the commit to be
written).  If the update is not a fast-forward update, fast-import will skip
updating that ref and instead prints a warning message.  fast-import will
always attempt to update all branch refs, and does not stop on the first
failure.

Branch updates can be forced with --force, but it’s recommended that this
only be used on an otherwise quiet repository.  Using --force is not
necessary for an initial import into an empty repository.

@noindent

@chapheading TECHNICAL DISCUSSION

fast-import tracks a set of branches in memory.  Any branch can be created
or modified at any point during the import process by sending a @samp{commit}
command on the input stream.  This design allows a frontend program to
process an unlimited number of branches simultaneously, generating commits
in the order they are available from the source data.  It also simplifies
the frontend programs considerably.

fast-import does not use or alter the current working directory, or any file
within it.  (It does however update the current Git repository, as
referenced by @samp{GIT_DIR}.)  Therefore an import frontend may use the working
directory for its own purposes, such as extracting file revisions from the
foreign source.  This ignorance of the working directory also allows
fast-import to run very quickly, as it does not need to perform any costly
file update operations when switching between branches.

@noindent

@chapheading INPUT FORMAT

With the exception of raw file data (which Git does not interpret)  the
fast-import input format is text (ASCII) based.  This text based format
simplifies development and debugging of frontend programs, especially when a
higher level language such as Perl, Python or Ruby is being used.

fast-import is very strict about its input.  Where we say SP below we mean
@strong{exactly} one space.  Likewise LF means one (and only one) linefeed and HT
one (and only one) horizontal tab.  Supplying additional whitespace
characters will cause unexpected results, such as branch names or file names
with leading or trailing spaces in their name, or early termination of
fast-import when it encounters unexpected input.

@noindent

@heading Stream Comments

To aid in debugging frontends fast-import ignores any line that begins with
@samp{#} (ASCII pound/hash) up to and including the line ending @samp{LF}.  A comment
line may contain any sequence of bytes that does not contain an LF and
therefore may be used to include any detailed debugging information that
might be specific to the frontend and useful when inspecting a fast-import
data stream.

@noindent

@heading Date Formats

The following date formats are supported.  A frontend should select the
format it will use for this import by passing the format name in the
--date-format=<fmt> command-line option.

@table @asis

@item  @samp{raw} 
This is the Git native format and is @samp{<time> SP <offutc>}.  It is also
fast-import’s default format, if --date-format was not specified.

The time of the event is specified by @samp{<time>} as the number of seconds
since the UNIX epoch (midnight, Jan 1, 1970, UTC) and is written as an ASCII
decimal integer.

The local offset is specified by @samp{<offutc>} as a positive or negative offset
from UTC.  For example EST (which is 5 hours behind UTC)  would be expressed
in @samp{<tz>} by “-0500” while UTC is “+0000”.  The local offset does not
affect @samp{<time>}; it is used only as an advisement to help formatting
routines display the timestamp.

If the local offset is not available in the source material, use “+0000”,
or the most common local offset.  For example many organizations have a CVS
repository which has only ever been accessed by users who are located in the
same location and time zone.  In this case a reasonable offset from UTC
could be assumed.

Unlike the @samp{rfc2822} format, this format is very strict.  Any variation in
formatting will cause fast-import to reject the value, and some sanity
checks on the numeric values may also be performed.

@item  @samp{raw-permissive} 
This is the same as @samp{raw} except that no sanity checks on the numeric epoch
and local offset are performed.  This can be useful when trying to filter or
import an existing history with e.g. bogus timezone values.

@item  @samp{rfc2822} 
This is the standard email format as described by RFC 2822.

An example value is “Tue Feb 6 11:22:18 2007 -0500”.  The Git parser is
accurate, but a little on the lenient side.  It is the same parser used by
@emph{git am} when applying patches received from email.

Some malformed strings may be accepted as valid dates.  In some of these
cases Git will still be able to obtain the correct date from the malformed
string.  There are also some types of malformed strings which Git will parse
wrong, and yet consider valid.  Seriously malformed strings will be
rejected.

Unlike the @samp{raw} format above, the time zone/UTC offset information
contained in an RFC 2822 date string is used to adjust the date value to UTC
prior to storage.  Therefore it is important that this information be as
accurate as possible.

If the source material uses RFC 2822 style dates, the frontend should let
fast-import handle the parsing and conversion (rather than attempting to do
it itself) as the Git parser has been well tested in the wild.

Frontends should prefer the @samp{raw} format if the source material already uses
UNIX-epoch format, can be coaxed to give dates in that format, or its format
is easily convertible to it, as there is no ambiguity in parsing.

@item  @samp{now} 
Always use the current time and time zone.  The literal @samp{now} must always be
supplied for @samp{<when>}.

This is a toy format.  The current time and time zone of this system is
always copied into the identity string at the time it is being created by
fast-import.  There is no way to specify a different time or time zone.

This particular format is supplied as it’s short to implement and may be
useful to a process that wants to create a new commit right now, without
needing to use a working directory or @emph{git update-index}.

If separate @samp{author} and @samp{committer} commands are used in a @samp{commit} the
timestamps may not match, as the system clock will be polled twice (once for
each command).  The only way to ensure that both author and committer
identity information has the same timestamp is to omit @samp{author} (thus
copying from @samp{committer}) or to use a date format other than @samp{now}.
@end table

@noindent

@heading Commands

fast-import accepts several commands to update the current repository and
control the current import process.  More detailed discussion (with
examples) of each command follows later.

@table @asis

@item  @samp{commit} 
Creates a new branch or updates an existing branch by creating a new commit
and updating the branch to point at the newly created commit.

@item  @samp{tag} 
Creates an annotated tag object from an existing commit or branch.
Lightweight tags are not supported by this command, as they are not
recommended for recording meaningful points in time.

@item  @samp{reset} 
Reset an existing branch (or a new branch) to a specific revision.  This
command must be used to change a branch to a specific revision without
making a commit on it.

@item  @samp{blob} 
Convert raw file data into a blob, for future use in a @samp{commit} command.
This command is optional and is not needed to perform an import.

@item  @samp{alias} 
Record that a mark refers to a given object without first creating any new
object.  Using --import-marks and referring to missing marks will cause
fast-import to fail, so aliases can provide a way to set otherwise pruned
commits to a valid value (e.g. the nearest non-pruned ancestor).

@item  @samp{checkpoint} 
Forces fast-import to close the current packfile, generate its unique SHA-1
checksum and index, and start a new packfile.  This command is optional and
is not needed to perform an import.

@item  @samp{progress} 
Causes fast-import to echo the entire line to its own standard output.  This
command is optional and is not needed to perform an import.

@item  @samp{done} 
Marks the end of the stream. This command is optional unless the @samp{done}
feature was requested using the @samp{--done} command-line option or @samp{feature
done} command.

@item  @samp{get-mark} 
Causes fast-import to print the SHA-1 corresponding to a mark to the file
descriptor set with @samp{--cat-blob-fd}, or @samp{stdout} if unspecified.

@item  @samp{cat-blob} 
Causes fast-import to print a blob in @emph{cat-file --batch} format to the file
descriptor set with @samp{--cat-blob-fd} or @samp{stdout} if unspecified.

@item  @samp{ls} 
Causes fast-import to print a line describing a directory entry in @emph{ls-tree}
format to the file descriptor set with @samp{--cat-blob-fd} or @samp{stdout} if
unspecified.

@item  @samp{feature} 
Enable the specified feature. This requires that fast-import supports the
specified feature, and aborts if it does not.

@item  @samp{option} 
Specify any of the options listed under OPTIONS that do not change stream
semantic to suit the frontend’s needs. This command is optional and is not
needed to perform an import.
@end table

@noindent

@heading commit

Create or update a branch with a new commit, recording one logical change to
the project.

@example
        'commit' SP <ref> LF
        mark?
        original-oid?
        ('author' (SP <name>)? SP LT <email> GT SP <when> LF)?
        'committer' (SP <name>)? SP LT <email> GT SP <when> LF
        ('encoding' SP <encoding>)?
        data
        ('from' SP <commit-ish> LF)?
        ('merge' SP <commit-ish> LF)*
        (filemodify | filedelete | filecopy | filerename | filedeleteall | notemodify)*
        LF?
@end example

where @samp{<ref>} is the name of the branch to make the commit on.  Typically
branch names are prefixed with @samp{refs/heads/} in Git, so importing the CVS
branch symbol @samp{RELENG-1_0} would use @samp{refs/heads/RELENG-1_0} for the value
of @samp{<ref>}.  The value of @samp{<ref>} must be a valid refname in Git.  As @samp{LF}
is not valid in a Git refname, no quoting or escaping syntax is supported
here.

A @samp{mark} command may optionally appear, requesting fast-import to save a
reference to the newly created commit for future use by the frontend (see
below for format).  It is very common for frontends to mark every commit
they create, thereby allowing future branch creation from any imported
commit.

The @samp{data} command following @samp{committer} must supply the commit message (see
below for @samp{data} command syntax).  To import an empty commit message use a 0
length data.  Commit messages are free-form and are not interpreted by Git.
Currently they must be encoded in UTF-8, as fast-import does not permit
other encodings to be specified.

Zero or more @samp{filemodify}, @samp{filedelete}, @samp{filecopy}, @samp{filerename},
@samp{filedeleteall} and @samp{notemodify} commands may be included to update the
contents of the branch prior to creating the commit.  These commands may be
supplied in any order.  However it is recommended that a @samp{filedeleteall}
command precede all @samp{filemodify}, @samp{filecopy}, @samp{filerename} and @samp{notemodify}
commands in the same commit, as @samp{filedeleteall} wipes the branch clean (see
below).

The @samp{LF} after the command is optional (it used to be required).  Note that
for reasons of backward compatibility, if the commit ends with a @samp{data}
command (i.e. it has no @samp{from}, @samp{merge}, @samp{filemodify}, @samp{filedelete},
@samp{filecopy}, @samp{filerename}, @samp{filedeleteall} or @samp{notemodify} commands) then two
@samp{LF} commands may appear at the end of the command instead of just one.

@noindent

@subheading author

An @samp{author} command may optionally appear, if the author information might
differ from the committer information.  If @samp{author} is omitted then
fast-import will automatically use the committer’s information for the
author portion of the commit.  See below for a description of the fields in
@samp{author}, as they are identical to @samp{committer}.

@noindent

@subheading committer

The @samp{committer} command indicates who made this commit, and when they made
it.

Here @samp{<name>} is the person’s display name (for example “Com M Itter”) and
@samp{<email>} is the person’s email address (“cm@@example.com”).  @samp{LT} and
@samp{GT} are the literal less-than (\x3c)  and greater-than (\x3e) symbols.
These are required to delimit the email address from the other fields in the
line.  Note that @samp{<name>} and @samp{<email>} are free-form and may contain any
sequence of bytes, except @samp{LT}, @samp{GT} and @samp{LF}.  @samp{<name>} is typically UTF-8
encoded.

The time of the change is specified by @samp{<when>} using the date format that
was selected by the --date-format=<fmt> command-line option.  See “Date
Formats” above for the set of supported formats, and their syntax.

@noindent

@subheading encoding

The optional @samp{encoding} command indicates the encoding of the commit
message.  Most commits are UTF-8 and the encoding is omitted, but this
allows importing commit messages into git without first reencoding them.

@noindent

@subheading from

The @samp{from} command is used to specify the commit to initialize this branch
from.  This revision will be the first ancestor of the new commit.  The
state of the tree built at this commit will begin with the state at the
@samp{from} commit, and be altered by the content modifications in this commit.

Omitting the @samp{from} command in the first commit of a new branch will cause
fast-import to create that commit with no ancestor. This tends to be desired
only for the initial commit of a project.  If the frontend creates all files
from scratch when making a new branch, a @samp{merge} command may be used instead
of @samp{from} to start the commit with an empty tree.  Omitting the @samp{from}
command on existing branches is usually desired, as the current commit on
that branch is automatically assumed to be the first ancestor of the new
commit.

As @samp{LF} is not valid in a Git refname or SHA-1 expression, no quoting or
escaping syntax is supported within @samp{<commit-ish>}.

Here @samp{<commit-ish>} is any of the following:

@itemize 

@item
The name of an existing branch already in fast-import’s internal branch
table.  If fast-import doesn’t know the name, it’s treated as a SHA-1
expression.

@item
A mark reference, @samp{:<idnum>}, where @samp{<idnum>} is the mark number.

The reason fast-import uses @samp{:} to denote a mark reference is this character
is not legal in a Git branch name.  The leading @samp{:} makes it easy to
distinguish between the mark 42 (@samp{:42}) and the branch 42 (@samp{42} or
@samp{refs/heads/42}), or an abbreviated SHA-1 which happened to consist only of
base-10 digits.

Marks must be declared (via @samp{mark}) before they can be used.

@item
A complete 40 byte or abbreviated commit SHA-1 in hex.

@item
Any valid Git SHA-1 expression that resolves to a commit.  See “SPECIFYING
REVISIONS” in gitrevisions(7) for details.

@item
The special null SHA-1 (40 zeros) specifies that the branch is to be
removed.
@end itemize

The special case of restarting an incremental import from the current branch
value should be written as:

@example
        from refs/heads/branch^0
@end example


The @samp{^0} suffix is necessary as fast-import does not permit a branch to
start from itself, and the branch is created in memory before the @samp{from}
command is even read from the input.  Adding @samp{^0} will force fast-import to
resolve the commit through Git’s revision parsing library, rather than its
internal branch table, thereby loading in the existing value of the branch.

@noindent

@subheading merge

Includes one additional ancestor commit.  The additional ancestry link does
not change the way the tree state is built at this commit.  If the @samp{from}
command is omitted when creating a new branch, the first @samp{merge} commit will
be the first ancestor of the current commit, and the branch will start out
with no files.  An unlimited number of @samp{merge} commands per commit are
permitted by fast-import, thereby establishing an n-way merge.

Here @samp{<commit-ish>} is any of the commit specification expressions also
accepted by @samp{from} (see above).

@noindent

@subheading filemodify

Included in a @samp{commit} command to add a new file or change the content of an
existing file.  This command has two different means of specifying the
content of the file.

@table @asis

@item  External data format 
The data content for the file was already supplied by a prior @samp{blob}
command.  The frontend just needs to connect it.

@example
        'M' SP <mode> SP <dataref> SP <path> LF
@end example

Here usually @samp{<dataref>} must be either a mark reference (@samp{:<idnum>})  set
by a prior @samp{blob} command, or a full 40-byte SHA-1 of an existing Git blob
object.  If @samp{<mode>} is @samp{040000`} then @samp{<dataref>} must be the full 40-byte
SHA-1 of an existing Git tree object or a mark reference set with
@samp{--import-marks}.

@item  Inline data format 
The data content for the file has not been supplied yet.  The frontend wants
to supply it as part of this modify command.

@example
        'M' SP <mode> SP 'inline' SP <path> LF
        data
@end example

See below for a detailed description of the @samp{data} command.
@end table

In both formats @samp{<mode>} is the type of file entry, specified in octal.  Git
only supports the following modes:

@itemize 

@item
@samp{100644} or @samp{644}: A normal (not-executable) file.  The majority of files in
most projects use this mode.  If in doubt, this is what you want.

@item
@samp{100755} or @samp{755}: A normal, but executable, file.

@item
@samp{120000}: A symlink, the content of the file will be the link target.

@item
@samp{160000}: A gitlink, SHA-1 of the object refers to a commit in another
repository. Git links can only be specified by SHA or through a commit
mark. They are used to implement submodules.

@item
@samp{040000}: A subdirectory.  Subdirectories can only be specified by SHA or
through a tree mark set with @samp{--import-marks}.
@end itemize

In both formats @samp{<path>} is the complete path of the file to be added (if
not already existing) or modified (if already existing).

A @samp{<path>} string must use UNIX-style directory separators (forward slash
@samp{/}), may contain any byte other than @samp{LF}, and must not start with double
quote (@samp{"}).

A path can use C-style string quoting; this is accepted in all cases and
mandatory if the filename starts with double quote or contains @samp{LF}. In
C-style quoting, the complete name should be surrounded with double quotes,
and any @samp{LF}, backslash, or double quote characters must be escaped by
preceding them with a backslash (e.g., @samp{"path/with\n, \\ and \" in it"}).

The value of @samp{<path>} must be in canonical form. That is it must not:

@itemize 

@item
contain an empty directory component (e.g. @samp{foo//bar} is invalid),

@item
end with a directory separator (e.g. @samp{foo/} is invalid),

@item
start with a directory separator (e.g. @samp{/foo} is invalid),

@item
contain the special component @samp{.} or @samp{..} (e.g. @samp{foo/./bar} and @samp{foo/../bar}
are invalid).
@end itemize

The root of the tree can be represented by an empty string as @samp{<path>}.

It is recommended that @samp{<path>} always be encoded using UTF-8.

@noindent

@subheading filedelete

Included in a @samp{commit} command to remove a file or recursively delete an
entire directory from the branch.  If the file or directory removal makes
its parent directory empty, the parent directory will be automatically
removed too.  This cascades up the tree until the first non-empty directory
or the root is reached.

@example
        'D' SP <path> LF
@end example

here @samp{<path>} is the complete path of the file or subdirectory to be removed
from the branch.  See @samp{filemodify} above for a detailed description of
@samp{<path>}.

@noindent

@subheading filecopy

Recursively copies an existing file or subdirectory to a different location
within the branch.  The existing file or directory must exist.  If the
destination exists it will be completely replaced by the content copied from
the source.

@example
        'C' SP <path> SP <path> LF
@end example

here the first @samp{<path>} is the source location and the second @samp{<path>} is
the destination.  See @samp{filemodify} above for a detailed description of what
@samp{<path>} may look like.  To use a source path that contains SP the path must
be quoted.

A @samp{filecopy} command takes effect immediately.  Once the source location has
been copied to the destination any future commands applied to the source
location will not impact the destination of the copy.

@noindent

@subheading filerename

Renames an existing file or subdirectory to a different location within the
branch.  The existing file or directory must exist. If the destination
exists it will be replaced by the source directory.

@example
        'R' SP <path> SP <path> LF
@end example

here the first @samp{<path>} is the source location and the second @samp{<path>} is
the destination.  See @samp{filemodify} above for a detailed description of what
@samp{<path>} may look like.  To use a source path that contains SP the path must
be quoted.

A @samp{filerename} command takes effect immediately.  Once the source location
has been renamed to the destination any future commands applied to the
source location will create new files there and not impact the destination
of the rename.

Note that a @samp{filerename} is the same as a @samp{filecopy} followed by a
@samp{filedelete} of the source location.  There is a slight performance
advantage to using @samp{filerename}, but the advantage is so small that it is
never worth trying to convert a delete/add pair in source material into a
rename for fast-import.  This @samp{filerename} command is provided just to
simplify frontends that already have rename information and don’t want
bother with decomposing it into a @samp{filecopy} followed by a @samp{filedelete}.

@noindent

@subheading filedeleteall

Included in a @samp{commit} command to remove all files (and also all
directories) from the branch.  This command resets the internal branch
structure to have no files in it, allowing the frontend to subsequently add
all interesting files from scratch.

@example
        'deleteall' LF
@end example

This command is extremely useful if the frontend does not know (or does not
care to know) what files are currently on the branch, and therefore cannot
generate the proper @samp{filedelete} commands to update the content.

Issuing a @samp{filedeleteall} followed by the needed @samp{filemodify} commands to
set the correct content will produce the same results as sending only the
needed @samp{filemodify} and @samp{filedelete} commands.  The @samp{filedeleteall} approach
may however require fast-import to use slightly more memory per active
branch (less than 1 MiB for even most large projects); so frontends that can
easily obtain only the affected paths for a commit are encouraged to do so.

@noindent

@subheading notemodify

Included in a @samp{commit} @samp{<notes_ref>} command to add a new note annotating a
@samp{<commit-ish>} or change this annotation contents.  Internally it is similar
to filemodify 100644 on @samp{<commit-ish>} path (maybe split into
subdirectories). It’s not advised to use any other commands to write to the
@samp{<notes_ref>} tree except @samp{filedeleteall} to delete all existing notes in
this tree.  This command has two different means of specifying the content
of the note.

@table @asis

@item  External data format 
The data content for the note was already supplied by a prior @samp{blob}
command.  The frontend just needs to connect it to the commit that is to be
annotated.

@example
        'N' SP <dataref> SP <commit-ish> LF
@end example

Here @samp{<dataref>} can be either a mark reference (@samp{:<idnum>})  set by a prior
@samp{blob} command, or a full 40-byte SHA-1 of an existing Git blob object.

@item  Inline data format 
The data content for the note has not been supplied yet.  The frontend wants
to supply it as part of this modify command.

@example
        'N' SP 'inline' SP <commit-ish> LF
        data
@end example

See below for a detailed description of the @samp{data} command.
@end table

In both formats @samp{<commit-ish>} is any of the commit specification
expressions also accepted by @samp{from} (see above).

@noindent

@heading mark

Arranges for fast-import to save a reference to the current object, allowing
the frontend to recall this object at a future point in time, without
knowing its SHA-1.  Here the current object is the object creation command
the @samp{mark} command appears within.  This can be @samp{commit}, @samp{tag}, and @samp{blob},
but @samp{commit} is the most common usage.

@example
        'mark' SP ':' <idnum> LF
@end example

where @samp{<idnum>} is the number assigned by the frontend to this mark.  The
value of @samp{<idnum>} is expressed as an ASCII decimal integer.  The value 0 is
reserved and cannot be used as a mark.  Only values greater than or equal to
1 may be used as marks.

New marks are created automatically.  Existing marks can be moved to another
object simply by reusing the same @samp{<idnum>} in another @samp{mark} command.

@noindent

@heading original-oid

Provides the name of the object in the original source control system.
fast-import will simply ignore this directive, but filter processes which
operate on and modify the stream before feeding to fast-import may have uses
for this information

@example
        'original-oid' SP <object-identifier> LF
@end example

where @samp{<object-identifier>} is any string not containing LF.

@noindent

@heading tag

Creates an annotated tag referring to a specific commit.  To create
lightweight (non-annotated) tags see the @samp{reset} command below.

@example
        'tag' SP <name> LF
        mark?
        'from' SP <commit-ish> LF
        original-oid?
        'tagger' (SP <name>)? SP LT <email> GT SP <when> LF
        data
@end example

where @samp{<name>} is the name of the tag to create.

Tag names are automatically prefixed with @samp{refs/tags/} when stored in Git,
so importing the CVS branch symbol @samp{RELENG-1_0-FINAL} would use just
@samp{RELENG-1_0-FINAL} for @samp{<name>}, and fast-import will write the
corresponding ref as @samp{refs/tags/RELENG-1_0-FINAL}.

The value of @samp{<name>} must be a valid refname in Git and therefore may
contain forward slashes.  As @samp{LF} is not valid in a Git refname, no quoting
or escaping syntax is supported here.

The @samp{from} command is the same as in the @samp{commit} command; see above for
details.

The @samp{tagger} command uses the same format as @samp{committer} within @samp{commit};
again see above for details.

The @samp{data} command following @samp{tagger} must supply the annotated tag message
(see below for @samp{data} command syntax).  To import an empty tag message use a
0 length data.  Tag messages are free-form and are not interpreted by Git.
Currently they must be encoded in UTF-8, as fast-import does not permit
other encodings to be specified.

Signing annotated tags during import from within fast-import is not
supported.  Trying to include your own PGP/GPG signature is not recommended,
as the frontend does not (easily) have access to the complete set of bytes
which normally goes into such a signature.  If signing is required, create
lightweight tags from within fast-import with @samp{reset}, then create the
annotated versions of those tags offline with the standard @emph{git tag}
process.

@noindent

@heading reset

Creates (or recreates) the named branch, optionally starting from a specific
revision.  The reset command allows a frontend to issue a new @samp{from} command
for an existing branch, or to create a new branch from an existing commit
without creating a new commit.

@example
        'reset' SP <ref> LF
        ('from' SP <commit-ish> LF)?
        LF?
@end example

For a detailed description of @samp{<ref>} and @samp{<commit-ish>} see above under
@samp{commit} and @samp{from}.

The @samp{LF} after the command is optional (it used to be required).

The @samp{reset} command can also be used to create lightweight (non-annotated)
tags.  For example:

@example
reset refs/tags/938
from :938
@end example

would create the lightweight tag @samp{refs/tags/938} referring to whatever
commit mark @samp{:938} references.

@noindent

@heading blob

Requests writing one file revision to the packfile.  The revision is not
connected to any commit; this connection must be formed in a subsequent
@samp{commit} command by referencing the blob through an assigned mark.

@example
        'blob' LF
        mark?
        original-oid?
        data
@end example

The mark command is optional here as some frontends have chosen to generate
the Git SHA-1 for the blob on their own, and feed that directly to
@samp{commit}.  This is typically more work than it’s worth however, as marks are
inexpensive to store and easy to use.

@noindent

@heading data

Supplies raw data (for use as blob/file content, commit messages, or
annotated tag messages) to fast-import.  Data can be supplied using an exact
byte count or delimited with a terminating line.  Real frontends intended
for production-quality conversions should always use the exact byte count
format, as it is more robust and performs better.  The delimited format is
intended primarily for testing fast-import.

Comment lines appearing within the @samp{<raw>} part of @samp{data} commands are
always taken to be part of the body of the data and are therefore never
ignored by fast-import.  This makes it safe to import any file/message
content whose lines might start with @samp{#}.

@table @asis

@item  Exact byte count format 
The frontend must specify the number of bytes of data.

@example
        'data' SP <count> LF
        <raw> LF?
@end example

where @samp{<count>} is the exact number of bytes appearing within @samp{<raw>}.  The
value of @samp{<count>} is expressed as an ASCII decimal integer.  The @samp{LF} on
either side of @samp{<raw>} is not included in @samp{<count>} and will not be included
in the imported data.

The @samp{LF} after @samp{<raw>} is optional (it used to be required) but
recommended.  Always including it makes debugging a fast-import stream
easier as the next command always starts in column 0 of the next line, even
if @samp{<raw>} did not end with an @samp{LF}.

@item  Delimited format 
A delimiter string is used to mark the end of the data.  fast-import will
compute the length by searching for the delimiter.  This format is primarily
useful for testing and is not recommended for real data.

@example
        'data' SP '<<' <delim> LF
        <raw> LF
        <delim> LF
        LF?
@end example

where @samp{<delim>} is the chosen delimiter string.  The string @samp{<delim>} must
not appear on a line by itself within @samp{<raw>}, as otherwise fast-import will
think the data ends earlier than it really does.  The @samp{LF} immediately
trailing @samp{<raw>} is part of @samp{<raw>}.  This is one of the limitations of the
delimited format, it is impossible to supply a data chunk which does not
have an LF as its last byte.

The @samp{LF} after @samp{<delim> LF} is optional (it used to be required).
@end table

@noindent

@heading alias

Record that a mark refers to a given object without first creating any new
object.

@example
        'alias' LF
        mark
        'to' SP <commit-ish> LF
        LF?
@end example

For a detailed description of @samp{<commit-ish>} see above under @samp{from}.

@noindent

@heading checkpoint

Forces fast-import to close the current packfile, start a new one, and to
save out all current branch refs, tags and marks.

@example
        'checkpoint' LF
        LF?
@end example

Note that fast-import automatically switches packfiles when the current
packfile reaches --max-pack-size, or 4 GiB, whichever limit is smaller.
During an automatic packfile switch fast-import does not update the branch
refs, tags or marks.

As a @samp{checkpoint} can require a significant amount of CPU time and disk IO
(to compute the overall pack SHA-1 checksum, generate the corresponding
index file, and update the refs) it can easily take several minutes for a
single @samp{checkpoint} command to complete.

Frontends may choose to issue checkpoints during extremely large and long
running imports, or when they need to allow another Git process access to a
branch.  However given that a 30 GiB Subversion repository can be loaded
into Git through fast-import in about 3 hours, explicit checkpointing may
not be necessary.

The @samp{LF} after the command is optional (it used to be required).

@noindent

@heading progress

Causes fast-import to print the entire @samp{progress} line unmodified to its
standard output channel (file descriptor 1) when the command is processed
from the input stream.  The command otherwise has no impact on the current
import, or on any of fast-import’s internal state.

@example
        'progress' SP <any> LF
        LF?
@end example

The @samp{<any>} part of the command may contain any sequence of bytes that does
not contain @samp{LF}.  The @samp{LF} after the command is optional.  Callers may wish
to process the output through a tool such as sed to remove the leading part
of the line, for example:

@example
frontend | git fast-import | sed 's/^progress //'
@end example

Placing a @samp{progress} command immediately after a @samp{checkpoint} will inform
the reader when the @samp{checkpoint} has been completed and it can safely access
the refs that fast-import updated.

@noindent

@heading get-mark

Causes fast-import to print the SHA-1 corresponding to a mark to stdout or
to the file descriptor previously arranged with the @samp{--cat-blob-fd}
argument. The command otherwise has no impact on the current import; its
purpose is to retrieve SHA-1s that later commits might want to refer to in
their commit messages.

@example
        'get-mark' SP ':' <idnum> LF
@end example

See “Responses To Commands” below for details about how to read this
output safely.

@noindent

@heading cat-blob

Causes fast-import to print a blob to a file descriptor previously arranged
with the @samp{--cat-blob-fd} argument.  The command otherwise has no impact on
the current import; its main purpose is to retrieve blobs that may be in
fast-import’s memory but not accessible from the target repository.

@example
        'cat-blob' SP <dataref> LF
@end example

The @samp{<dataref>} can be either a mark reference (@samp{:<idnum>})  set previously
or a full 40-byte SHA-1 of a Git blob, preexisting or ready to be written.

Output uses the same format as @samp{git cat-file --batch}:

@example
<sha1> SP 'blob' SP <size> LF
<contents> LF
@end example

This command can be used where a @samp{filemodify} directive can appear, allowing
it to be used in the middle of a commit.  For a @samp{filemodify} using an inline
directive, it can also appear right before the @samp{data} directive.

See “Responses To Commands” below for details about how to read this
output safely.

@noindent

@heading ls

Prints information about the object at a path to a file descriptor
previously arranged with the @samp{--cat-blob-fd} argument.  This allows printing
a blob from the active commit (with @samp{cat-blob}) or copying a blob or tree
from a previous commit for use in the current one (with @samp{filemodify}).

The @samp{ls} command can also be used where a @samp{filemodify} directive can appear,
allowing it to be used in the middle of a commit.

@table @asis

@item  Reading from the active commit 
This form can only be used in the middle of a @samp{commit}.  The path names a
directory entry within fast-import’s active commit.  The path must be quoted
in this case.

@example
        'ls' SP <path> LF
@end example

@item  Reading from a named tree 
The @samp{<dataref>} can be a mark reference (@samp{:<idnum>}) or the full 40-byte
SHA-1 of a Git tag, commit, or tree object, preexisting or waiting to be
written.  The path is relative to the top level of the tree named by
@samp{<dataref>}.

@example
        'ls' SP <dataref> SP <path> LF
@end example
@end table

See @samp{filemodify} above for a detailed description of @samp{<path>}.

Output uses the same format as @samp{git ls-tree <tree> -- <path>}:

@example
<mode> SP ('blob' | 'tree' | 'commit') SP <dataref> HT <path> LF
@end example

The <dataref> represents the blob, tree, or commit object at <path> and can
be used in later @emph{get-mark}, @emph{cat-blob}, @emph{filemodify}, or @emph{ls} commands.

If there is no file or subtree at that path, @emph{git fast-import} will instead
report

@example
missing SP <path> LF
@end example

See “Responses To Commands” below for details about how to read this
output safely.

@noindent

@heading feature

Require that fast-import supports the specified feature, or abort if it does
not.

@example
        'feature' SP <feature> ('=' <argument>)? LF
@end example

The <feature> part of the command may be any one of the following:

@table @asis

@item  date-format 
@itemx  export-marks 
@itemx  relative-marks 
@itemx  no-relative-marks 
@itemx  force 
Act as though the corresponding command-line option with a leading @samp{--} was
passed on the command line (see OPTIONS, above).

@item  import-marks 
@itemx  import-marks-if-exists 
Like --import-marks except in two respects: first, only one "feature
import-marks" or "feature import-marks-if-exists" command is allowed per
stream; second, an --import-marks= or --import-marks-if-exists command-line
option overrides any of these "feature" commands in the stream; third,
"feature import-marks-if-exists" like a corresponding command-line option
silently skips a nonexistent file.

@item  get-mark 
@itemx  cat-blob 
@itemx  ls 
Require that the backend support the @emph{get-mark}, @emph{cat-blob}, or @emph{ls} command
respectively.  Versions of fast-import not supporting the specified command
will exit with a message indicating so.  This lets the import error out
early with a clear message, rather than wasting time on the early part of an
import before the unsupported command is detected.

@item  notes 
Require that the backend support the @emph{notemodify} (N)  subcommand to the
@emph{commit} command.  Versions of fast-import not supporting notes will exit
with a message indicating so.

@item  done 
Error out if the stream ends without a @emph{done} command.  Without this
feature, errors causing the frontend to end abruptly at a convenient point
in the stream can go undetected.  This may occur, for example, if an import
front end dies in mid-operation without emitting SIGTERM or SIGKILL at its
subordinate git fast-import instance.
@end table

@noindent

@heading option

Processes the specified option so that git fast-import behaves in a way that
suits the frontend’s needs.  Note that options specified by the frontend are
overridden by any options the user may specify to git fast-import itself.

@example
    'option' SP <option> LF
@end example

The @samp{<option>} part of the command may contain any of the options listed in
the OPTIONS section that do not change import semantics, without the leading
@samp{--} and is treated in the same way.

Option commands must be the first commands on the input (not counting
feature commands), to give an option command after any non-option command is
an error.

The following command-line options change import semantics and may therefore
not be passed as option:

@itemize 

@item
date-format

@item
import-marks

@item
export-marks

@item
cat-blob-fd

@item
force
@end itemize

@noindent

@heading done

If the @samp{done} feature is not in use, treated as if EOF was read.  This can
be used to tell fast-import to finish early.

If the @samp{--done} command-line option or @samp{feature done} command is in use, the
@samp{done} command is mandatory and marks the end of the stream.

@noindent

@chapheading RESPONSES TO COMMANDS

New objects written by fast-import are not available immediately.  Most
fast-import commands have no visible effect until the next checkpoint (or
completion).  The frontend can send commands to fill fast-import’s input
pipe without worrying about how quickly they will take effect, which
improves performance by simplifying scheduling.

For some frontends, though, it is useful to be able to read back data from
the current repository as it is being updated (for example when the source
material describes objects in terms of patches to be applied to previously
imported objects).  This can be accomplished by connecting the frontend and
fast-import via bidirectional pipes:

@example
mkfifo fast-import-output
frontend <fast-import-output |
git fast-import >fast-import-output
@end example

A frontend set up this way can use @samp{progress}, @samp{get-mark}, @samp{ls}, and
@samp{cat-blob} commands to read information from the import in progress.

To avoid deadlock, such frontends must completely consume any pending output
from @samp{progress}, @samp{ls}, @samp{get-mark}, and @samp{cat-blob} before performing writes
to fast-import that might block.

@noindent

@chapheading CRASH REPORTS

If fast-import is supplied invalid input it will terminate with a non-zero
exit status and create a crash report in the top level of the Git repository
it was importing into.  Crash reports contain a snapshot of the internal
fast-import state as well as the most recent commands that lead up to the
crash.

All recent commands (including stream comments, file changes and progress
commands) are shown in the command history within the crash report, but raw
file data and commit messages are excluded from the crash report.  This
exclusion saves space within the report file and reduces the amount of
buffering that fast-import must perform during execution.

After writing a crash report fast-import will close the current packfile and
export the marks table.  This allows the frontend developer to inspect the
repository state and resume the import from the point where it crashed.  The
modified branches and tags are not updated during a crash, as the import did
not complete successfully.  Branch and tag information can be found in the
crash report and must be applied manually if the update is needed.

An example crash:

@example
$ cat >in <<END_OF_INPUT
# my very first test commit
commit refs/heads/master
committer Shawn O. Pearce <spearce> 19283 -0400
# who is that guy anyway?
data <<EOF
this is my commit
EOF
M 644 inline .gitignore
data <<EOF
.gitignore
EOF
M 777 inline bob
END_OF_INPUT
@end example

@example
$ git fast-import <in
fatal: Corrupt mode: M 777 inline bob
fast-import: dumping crash report to .git/fast_import_crash_8434
@end example

@example
$ cat .git/fast_import_crash_8434
fast-import crash report:
    fast-import process: 8434
    parent process     : 1391
    at Sat Sep 1 00:58:12 2007
@end example

@example
fatal: Corrupt mode: M 777 inline bob
@end example

@example
Most Recent Commands Before Crash
---------------------------------
  # my very first test commit
  commit refs/heads/master
  committer Shawn O. Pearce <spearce> 19283 -0400
  # who is that guy anyway?
  data <<EOF
  M 644 inline .gitignore
  data <<EOF
* M 777 inline bob
@end example

@example
Active Branch LRU
-----------------
    active_branches = 1 cur, 5 max
@end example

@example
pos clock name ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 1)      0 refs/heads/master
@end example

@example
Inactive Branches
-----------------
refs/heads/master:
  status      : active loaded dirty
  tip commit  : 0000000000000000000000000000000000000000
  old tree    : 0000000000000000000000000000000000000000
  cur tree    : 0000000000000000000000000000000000000000
  commit clock: 0
  last pack   :
@end example

@example
------------------- END OF CRASH REPORT
@end example

@noindent

@chapheading TIPS AND TRICKS

The following tips and tricks have been collected from various users of
fast-import, and are offered here as suggestions.

@noindent

@heading Use One Mark Per Commit

When doing a repository conversion, use a unique mark per commit (@samp{mark
:<n>}) and supply the --export-marks option on the command line.
fast-import will dump a file which lists every mark and the Git object SHA-1
that corresponds to it.  If the frontend can tie the marks back to the
source repository, it is easy to verify the accuracy and completeness of the
import by comparing each Git commit to the corresponding source revision.

Coming from a system such as Perforce or Subversion this should be quite
simple, as the fast-import mark can also be the Perforce changeset number or
the Subversion revision number.

@noindent

@heading Freely Skip Around Branches

Don’t bother trying to optimize the frontend to stick to one branch at a
time during an import.  Although doing so might be slightly faster for
fast-import, it tends to increase the complexity of the frontend code
considerably.

The branch LRU builtin to fast-import tends to behave very well, and the
cost of activating an inactive branch is so low that bouncing around between
branches has virtually no impact on import performance.

@noindent

@heading Handling Renames

When importing a renamed file or directory, simply delete the old name(s)
and modify the new name(s) during the corresponding commit.  Git performs
rename detection after-the-fact, rather than explicitly during a commit.

@noindent

@heading Use Tag Fixup Branches

Some other SCM systems let the user create a tag from multiple files which
are not from the same commit/changeset.  Or to create tags which are a
subset of the files available in the repository.

Importing these tags as-is in Git is impossible without making at least one
commit which “fixes up” the files to match the content of the tag.  Use
fast-import’s @samp{reset} command to reset a dummy branch outside of your normal
branch space to the base commit for the tag, then commit one or more file
fixup commits, and finally tag the dummy branch.

For example since all normal branches are stored under @samp{refs/heads/} name
the tag fixup branch @samp{TAG_FIXUP}.  This way it is impossible for the fixup
branch used by the importer to have namespace conflicts with real branches
imported from the source (the name @samp{TAG_FIXUP} is not
@samp{refs/heads/TAG_FIXUP}).

When committing fixups, consider using @samp{merge} to connect the commit(s)
which are supplying file revisions to the fixup branch.  Doing so will allow
tools such as @emph{git blame} to track through the real commit history and
properly annotate the source files.

After fast-import terminates the frontend will need to do @samp{rm
.git/TAG_FIXUP} to remove the dummy branch.

@noindent

@heading Import Now, Repack Later

As soon as fast-import completes the Git repository is completely valid and
ready for use.  Typically this takes only a very short time, even for
considerably large projects (100,000+ commits).

However repacking the repository is necessary to improve data locality and
access performance.  It can also take hours on extremely large projects
(especially if -f and a large --window parameter is used).  Since repacking
is safe to run alongside readers and writers, run the repack in the
background and let it finish when it finishes.  There is no reason to wait
to explore your new Git project!

If you choose to wait for the repack, don’t try to run benchmarks or
performance tests until repacking is completed.  fast-import outputs
suboptimal packfiles that are simply never seen in real use situations.

@noindent

@heading Repacking Historical Data

If you are repacking very old imported data (e.g. older than the last year),
consider expending some extra CPU time and supplying --window=50 (or higher)
when you run @emph{git repack}.  This will take longer, but will also produce a
smaller packfile.  You only need to expend the effort once, and everyone
using your project will benefit from the smaller repository.

@noindent

@heading Include Some Progress Messages

Every once in a while have your frontend emit a @samp{progress} message to
fast-import.  The contents of the messages are entirely free-form, so one
suggestion would be to output the current month and year each time the
current commit date moves into the next month.  Your users will feel better
knowing how much of the data stream has been processed.

@noindent

@chapheading PACKFILE OPTIMIZATION

When packing a blob fast-import always attempts to deltify against the last
blob written.  Unless specifically arranged for by the frontend, this will
probably not be a prior version of the same file, so the generated delta
will not be the smallest possible.  The resulting packfile will be
compressed, but will not be optimal.

Frontends which have efficient access to all revisions of a single file (for
example reading an RCS/CVS ,v file) can choose to supply all revisions of
that file as a sequence of consecutive @samp{blob} commands.  This allows
fast-import to deltify the different file revisions against each other,
saving space in the final packfile.  Marks can be used to later identify
individual file revisions during a sequence of @samp{commit} commands.

The packfile(s) created by fast-import do not encourage good disk access
patterns.  This is caused by fast-import writing the data in the order it is
received on standard input, while Git typically organizes data within
packfiles to make the most recent (current tip) data appear before
historical data.  Git also clusters commits together, speeding up revision
traversal through better cache locality.

For this reason it is strongly recommended that users repack the repository
with @samp{git repack -a -d} after fast-import completes, allowing Git to
reorganize the packfiles for faster data access.  If blob deltas are
suboptimal (see above) then also adding the @samp{-f} option to force
recomputation of all deltas can significantly reduce the final packfile size
(30-50% smaller can be quite typical).

Instead of running @samp{git repack} you can also run @samp{git gc --aggressive},
which will also optimize other things after an import (e.g. pack loose
refs). As noted in the "AGGRESSIVE" section in git-gc(1) the
@samp{--aggressive} option will find new deltas with the @samp{-f} option to
git-repack(1). For the reasons elaborated on above using
@samp{--aggressive} after a fast-import is one of the few cases where it’s known
to be worthwhile.

@noindent

@chapheading MEMORY UTILIZATION

There are a number of factors which affect how much memory fast-import
requires to perform an import.  Like critical sections of core Git,
fast-import uses its own memory allocators to amortize any overheads
associated with malloc.  In practice fast-import tends to amortize any
malloc overheads to 0, due to its use of large block allocations.

@noindent

@heading per object

fast-import maintains an in-memory structure for every object written in
this execution.  On a 32 bit system the structure is 32 bytes, on a 64 bit
system the structure is 40 bytes (due to the larger pointer sizes).  Objects
in the table are not deallocated until fast-import terminates.  Importing 2
million objects on a 32 bit system will require approximately 64 MiB of
memory.

The object table is actually a hashtable keyed on the object name (the
unique SHA-1).  This storage configuration allows fast-import to reuse an
existing or already written object and avoid writing duplicates to the
output packfile.  Duplicate blobs are surprisingly common in an import,
typically due to branch merges in the source.

@noindent

@heading per mark

Marks are stored in a sparse array, using 1 pointer (4 bytes or 8 bytes,
depending on pointer size) per mark.  Although the array is sparse,
frontends are still strongly encouraged to use marks between 1 and n, where
n is the total number of marks required for this import.

@noindent

@heading per branch

Branches are classified as active and inactive.  The memory usage of the two
classes is significantly different.

Inactive branches are stored in a structure which uses 96 or 120 bytes (32
bit or 64 bit systems, respectively), plus the length of the branch name
(typically under 200 bytes), per branch.  fast-import will easily handle as
many as 10,000 inactive branches in under 2 MiB of memory.

Active branches have the same overhead as inactive branches, but also
contain copies of every tree that has been recently modified on that
branch.  If subtree @samp{include} has not been modified since the branch became
active, its contents will not be loaded into memory, but if subtree @samp{src}
has been modified by a commit since the branch became active, then its
contents will be loaded in memory.

As active branches store metadata about the files contained on that branch,
their in-memory storage size can grow to a considerable size (see below).

fast-import automatically moves active branches to inactive status based on
a simple least-recently-used algorithm.  The LRU chain is updated on each
@samp{commit} command.  The maximum number of active branches can be increased or
decreased on the command line with --active-branches=.

@noindent

@heading per active tree

Trees (aka directories) use just 12 bytes of memory on top of the memory
required for their entries (see “per active file” below).  The cost of a
tree is virtually 0, as its overhead amortizes out over the individual file
entries.

@noindent

@heading per active file entry

Files (and pointers to subtrees) within active trees require 52 or 64 bytes
(32/64 bit platforms) per entry.  To conserve space, file and tree names are
pooled in a common string table, allowing the filename “Makefile” to use
just 16 bytes (after including the string header overhead) no matter how
many times it occurs within the project.

The active branch LRU, when coupled with the filename string pool and lazy
loading of subtrees, allows fast-import to efficiently import projects with
2,000+ branches and 45,114+ files in a very limited memory footprint (less
than 2.7 MiB per active branch).

@noindent

@chapheading SIGNALS

Sending @strong{SIGUSR1} to the @emph{git fast-import} process ends the current packfile
early, simulating a @samp{checkpoint} command.  The impatient operator can use
this facility to peek at the objects and refs from an import in progress, at
the cost of some added running time and worse compression.

@noindent

@chapheading SEE ALSO

git-fast-export(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-fetch-pack,,,Top
@chapheading Name

git-fetch-pack — 別のリポジトリから不足しているオブジェクトを受け取ります

@noindent

@chapheading Synopsis

@display
git fetch-pack [--all] [--quiet|-q] [--keep|-k] [--thin] [--include-tag]
        [--upload-pack=<git-upload-pack>]
        [--depth=<n>] [--no-progress]
        [-v] <repository> [<refs>…]
@end display


@noindent

@chapheading DESCRIPTION

通常は、代わりにこのコマンドの上位レベルのラッパーである @samp{git fetch} を使用することをお勧めします。

おそらくはリモートリポジトリで @emph{git-upload-pack} を起動し、このリポジトリから不足しているオブジェクトを送信し、名前付きの head
を更新するよう問合せます。ローカルで利用可能なコミットの一覧は、ローカルの refs/ 階層をスキャンして見つけ、相手側で実行されている
@samp{git-upload-pack} に送信されます。

このコマンドは、ローカル側に共通の祖先コミットがない場合には、リモート側から要求された参照を完了するためにすべてをダウンロードするよう機能縮退します。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--all} 
すべてのリモート参照をフェッチします。

@item  @samp{--stdin} 
stdinから参照のリストを1行に1つずつ取得します。このオプションに加えてコマンドラインで参照が指定されている場合、stdinからの参照はコマンドラインでの参照の後に処理されます。

このオプションと一緒に @samp{--stateless-rpc}
を指定する場合、参照のリストはパケット形式(pkt-line)である必要があります。各refは個別のパケットに含まれている必要があり、リストはフラッシュパケットで終了している必要があります。

@item  @samp{-q} 
@itemx  @samp{--quiet} 
@samp{-q} フラグを @samp{git unpack-objects} に渡します。 これにより、クローン作成プロセスのおしゃべりが減ります。

@item  @samp{-k} 
@itemx  @samp{--keep} 
受信したデータに対して @samp{git unpack-objects}
を呼び出さないでください。代わりに、そのデータから単一のパックファイルを作成し、オブジェクトデータベースに保存してください。このオプションが2回指定された場合、パックは再パックに対してロックされます(the
pack is locked against repacking)。

@item  @samp{--thin} 
ネットワークトラフィックを軽減するために、パックに含まれないオブジェクトを元に、オブジェクトを差分化(デルタ化)して記録する「薄い」パック(thin
pack)をフェッチします。

@item  @samp{--include-tag} 
リモート側がサポートしている場合、タグが参照するオブジェクトがダウンロードされると、注釈付きタグオブジェクトが他のオブジェクトと同じ接続(same
connection)でダウンロードされます。それ以外の場合、呼び出し元は、このオプションで使用できるタグを決定する必要があります。

@item  @samp{--upload-pack=<git-upload-pack>} 
あなたの $PATHに見つからない場合は、これを使用して、リモート側の @samp{git-upload-pack}
へのパスを指定します。sshdをインストールすると、ログインシェル用のユーザーの環境設定スクリプト(@samp{.bash_profile}
など)が無視され、プライベートにインストールされたgitがシステムのデフォルトの$PATHで見つけられない場合があります。推奨される別の回避策は、
@samp{.bashrc} に $PATHを設定することですが、このフラグは、(ほとんどのものを.bash_profileに設定して、)中身の無い
@samp{.bashrc} ファイルを使用して非対話型シェルのオーバーヘッドを支払いたくない人向けです。

@item  @samp{--exec=<git-upload-pack>} 
@samp{--upload-pack=<git-upload-pack>} と同じ。

@item  @samp{--depth=<n>} 
フェッチを n 以下の祖先チェーンに制限します。 @samp{git-upload-pack}
は、特別な深さ2147483647が指定された場合、その深さの祖先チェーンがある場合でも、それを無限として扱います。

@item  @samp{--shallow-since=<date>} 
浅いリポジトリ(shallow repository)の履歴を更に深くするか更に浅くするかして、 <date>
以降の到達可能なすべてのコミットを含めます。

@item  @samp{--shallow-exclude=<revision>} 
浅いリポジトリ(shallow
repository)の履歴を深くするか浅くするかして、指定されたリモートブランチまたはタグから到達可能なコミットを除外します。このオプションは複数回指定できます。

@item  @samp{--deepen-relative} 
引数 @samp{--depth} は、各リモートブランチ履歴の先端からではなく、現在の浅い境界(shallow boundary)からのコミット数を指定します。

@item  @samp{--no-progress} 
進捗状況を表示しないでください。

@item  @samp{--check-self-contained-and-connected} 
受信したパックが自己完結型で接続されている場合は、 "connectivity-ok" を出力します。

@item  @samp{-v} 
おしゃべりになります。

@item  <repository> 
リモートリポジトリへのURL。

@item  <refs>… 
更新元のリモートヘッド。これは $GIT_DIR に関連しています(例: @samp{HEAD} 、 @samp{refs/heads/master}
)。指定しない場合は、リモート側が持つすべてのヘッドから更新します。

リモートがオプション @samp{uploadpack.allowTipSHA1InWant} または
@samp{uploadpack.allowReachableSHA1InWant} または @samp{uploadpack.allowAnySHA1InWant}
を有効にしている場合、それらはリモートに存在する 16進40桁 sha1 である可能性があります。
@end table

@noindent

@chapheading SEE ALSO

git-fetch(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-fetch,,,Top
@chapheading Name

git-fetch — Download objects and refs from another repository

@noindent

@chapheading Synopsis

@display
git fetch [<options>] [<repository> [<refspec>…]]
git fetch [<options>] <group>
git fetch --multiple [<options>] [(<repository> | <group>)…]
git fetch --all [<options>]
@end display


@noindent

@chapheading DESCRIPTION

Fetch branches and/or tags (collectively, "refs") from one or more other
repositories, along with the objects necessary to complete their histories.
Remote-tracking branches are updated (see the description of <refspec> below
for ways to control this behavior).

By default, any tag that points into the histories being fetched is also
fetched; the effect is to fetch tags that point at branches that you are
interested in.  This default behavior can be changed by using the --tags or
--no-tags options or by configuring remote.<name>.tagOpt.  By using a
refspec that fetches tags explicitly, you can fetch tags that do not point
into branches you are interested in as well.

@emph{git fetch} can fetch from either a single named repository or URL, or from
several repositories at once if <group> is given and there is a
remotes.<group> entry in the configuration file.  (See
git-config(1)).

When no remote is specified, by default the @samp{origin} remote will be used,
unless there’s an upstream branch configured for the current branch.

The names of refs that are fetched, together with the object names they
point at, are written to @samp{.git/FETCH_HEAD}.  This information may be used by
scripts or other git commands, such as git-pull(1).

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--all} 
Fetch all remotes.

@item  @samp{-a} 
@itemx  @samp{--append} 
Append ref names and object names of fetched refs to the existing contents
of @samp{.git/FETCH_HEAD}.  Without this option old data in @samp{.git/FETCH_HEAD}
will be overwritten.

@item  @samp{--atomic} 
Use an atomic transaction to update local refs. Either all refs are updated,
or on error, no refs are updated.

@item  @samp{--depth=<depth>} 
Limit fetching to the specified number of commits from the tip of each
remote branch history. If fetching to a @emph{shallow} repository created by @samp{git
clone} with @samp{--depth=<depth>} option (see git-clone(1)), deepen or
shorten the history to the specified number of commits. Tags for the
deepened commits are not fetched.

@item  @samp{--deepen=<depth>} 
Similar to --depth, except it specifies the number of commits from the
current shallow boundary instead of from the tip of each remote branch
history.

@item  @samp{--shallow-since=<date>} 
Deepen or shorten the history of a shallow repository to include all
reachable commits after <date>.

@item  @samp{--shallow-exclude=<revision>} 
Deepen or shorten the history of a shallow repository to exclude commits
reachable from a specified remote branch or tag.  This option can be
specified multiple times.

@item  @samp{--unshallow} 
If the source repository is complete, convert a shallow repository to a
complete one, removing all the limitations imposed by shallow repositories.

If the source repository is shallow, fetch as much as possible so that the
current repository has the same history as the source repository.

@item  @samp{--update-shallow} 
By default when fetching from a shallow repository, @samp{git fetch} refuses refs
that require updating .git/shallow. This option updates .git/shallow and
accept such refs.

@item  @samp{--negotiation-tip=<commit|glob>} 
By default, Git will report, to the server, commits reachable from all local
refs to find common commits in an attempt to reduce the size of the
to-be-received packfile. If specified, Git will only report commits
reachable from the given tips.  This is useful to speed up fetches when the
user knows which local ref is likely to have commits in common with the
upstream ref being fetched.

This option may be specified more than once; if so, Git will report commits
reachable from any of the given commits.

The argument to this option may be a glob on ref names, a ref, or the
(possibly abbreviated) SHA-1 of a commit. Specifying a glob is equivalent to
specifying this option multiple times, one for each matching ref name.

See also the @samp{fetch.negotiationAlgorithm} and @samp{push.negotiate} configuration
variables documented in git-config(1), and the @samp{--negotiate-only}
option below.

@item  @samp{--negotiate-only} 
Do not fetch anything from the server, and instead print the ancestors of
the provided @samp{--negotiation-tip=*} arguments, which we have in common with
the server.

Internally this is used to implement the @samp{push.negotiate} option, see
git-config(1).

@item  @samp{--dry-run} 
Show what would be done, without making any changes.

@item  @samp{--[no-]write-fetch-head} 
Write the list of remote refs fetched in the @samp{FETCH_HEAD} file directly
under @samp{$GIT_DIR}.  This is the default.  Passing @samp{--no-write-fetch-head}
from the command line tells Git not to write the file.  Under @samp{--dry-run}
option, the file is never written.

@item  @samp{-f} 
@itemx  @samp{--force} 
When @emph{git fetch} is used with @samp{<src>:<dst>} refspec it may refuse to update
the local branch as discussed
in the @samp{<refspec>} part below.
This option overrides that check.

@item  @samp{-k} 
@itemx  @samp{--keep} 
Keep downloaded pack.

@item  @samp{--multiple} 
Allow several <repository> and <group> arguments to be specified. No
<refspec>s may be specified.

@item  @samp{--[no-]auto-maintenance} 
@itemx  @samp{--[no-]auto-gc} 
Run @samp{git maintenance run --auto} at the end to perform automatic repository
maintenance if needed. (@samp{--[no-]auto-gc} is a synonym.)  This is enabled by
default.

@item  @samp{--[no-]write-commit-graph} 
Write a commit-graph after fetching. This overrides the config setting
@samp{fetch.writeCommitGraph}.

@item  @samp{--prefetch} 
Modify the configured refspec to place all refs into the @samp{refs/prefetch/}
namespace. See the @samp{prefetch} task in git-maintenance(1).

@item  @samp{-p} 
@itemx  @samp{--prune} 
Before fetching, remove any remote-tracking references that no longer exist
on the remote.  Tags are not subject to pruning if they are fetched only
because of the default tag auto-following or due to a --tags option.
However, if tags are fetched due to an explicit refspec (either on the
command line or in the remote configuration, for example if the remote was
cloned with the --mirror option), then they are also subject to
pruning. Supplying @samp{--prune-tags} is a shorthand for providing the tag
refspec.

See the PRUNING section below for more details.

@item  @samp{-P} 
@itemx  @samp{--prune-tags} 
Before fetching, remove any local tags that no longer exist on the remote if
@samp{--prune} is enabled. This option should be used more carefully, unlike
@samp{--prune} it will remove any local references (local tags) that have been
created. This option is a shorthand for providing the explicit tag refspec
along with @samp{--prune}, see the discussion about that in its documentation.

See the PRUNING section below for more details.

@item  @samp{-n} 
@itemx  @samp{--no-tags} 
By default, tags that point at objects that are downloaded from the remote
repository are fetched and stored locally.  This option disables this
automatic tag following. The default behavior for a remote may be specified
with the remote.<name>.tagOpt setting. See git-config(1).

@item  @samp{--refmap=<refspec>} 
When fetching refs listed on the command line, use the specified refspec
(can be given more than once) to map the refs to remote-tracking branches,
instead of the values of @samp{remote.*.fetch} configuration variables for the
remote repository.  Providing an empty @samp{<refspec>} to the @samp{--refmap} option
causes Git to ignore the configured refspecs and rely entirely on the
refspecs supplied as command-line arguments. See section on "Configured
Remote-tracking Branches" for details.

@item  @samp{-t} 
@itemx  @samp{--tags} 
Fetch all tags from the remote (i.e., fetch remote tags @samp{refs/tags/*} into
local tags with the same name), in addition to whatever else would otherwise
be fetched.  Using this option alone does not subject tags to pruning, even
if --prune is used (though tags may be pruned anyway if they are also the
destination of an explicit refspec; see @samp{--prune}).

@item  @samp{--recurse-submodules[=yes|on-demand|no]} 
This option controls if and under what conditions new commits of populated
submodules should be fetched too. It can be used as a boolean option to
completely disable recursion when set to @emph{no} or to unconditionally recurse
into all populated submodules when set to @emph{yes}, which is the default when
this option is used without any value. Use @emph{on-demand} to only recurse into
a populated submodule when the superproject retrieves a commit that updates
the submodule’s reference to a commit that isn’t already in the local
submodule clone. By default, @emph{on-demand} is used, unless
@samp{fetch.recurseSubmodules} is set (see git-config(1)).

@item  @samp{-j} 
@itemx  @samp{--jobs=<n>} 
Number of parallel children to be used for all forms of fetching.

If the @samp{--multiple} option was specified, the different remotes will be
fetched in parallel. If multiple submodules are fetched, they will be
fetched in parallel. To control them independently, use the config settings
@samp{fetch.parallel} and @samp{submodule.fetchJobs} (see git-config(1)).

Typically, parallel recursive and multi-remote fetches will be faster. By
default fetches are performed sequentially, not in parallel.

@item  @samp{--no-recurse-submodules} 
Disable recursive fetching of submodules (this has the same effect as using
the @samp{--recurse-submodules=no} option).

@item  @samp{--set-upstream} 
If the remote is fetched successfully, add upstream (tracking) reference,
used by argument-less git-pull(1) and other commands. For more
information, see @samp{branch.<name>.merge} and @samp{branch.<name>.remote} in
git-config(1).

@item  @samp{--submodule-prefix=<path>} 
Prepend <path> to paths printed in informative messages such as "Fetching
submodule foo".  This option is used internally when recursing over
submodules.

@item  @samp{--recurse-submodules-default=[yes|on-demand]} 
This option is used internally to temporarily provide a non-negative default
value for the --recurse-submodules option.  All other methods of configuring
fetch’s submodule recursion (such as settings in gitmodules(5) and
git-config(1)) override this option, as does specifying
--[no-]recurse-submodules directly.

@item  @samp{-u} 
@itemx  @samp{--update-head-ok} 
By default @emph{git fetch} refuses to update the head which corresponds to the
current branch.  This flag disables the check.  This is purely for the
internal use for @emph{git pull} to communicate with @emph{git fetch}, and unless you
are implementing your own Porcelain you are not supposed to use it.

@item  @samp{--upload-pack <upload-pack>} 
When given, and the repository to fetch from is handled by @emph{git fetch-pack},
@samp{--exec=<upload-pack>} is passed to the command to specify non-default path
for the command run on the other end.

@item  @samp{-q} 
@itemx  @samp{--quiet} 
Pass --quiet to git-fetch-pack and silence any other internally used git
commands. Progress is not reported to the standard error stream.

@item  @samp{-v} 
@itemx  @samp{--verbose} 
Be verbose.

@item  @samp{--progress} 
Progress status is reported on the standard error stream by default when it
is attached to a terminal, unless -q is specified. This flag forces progress
status even if the standard error stream is not directed to a terminal.

@item  @samp{-o <option>} 
@itemx  @samp{--server-option=<option>} 
Transmit the given string to the server when communicating using protocol
version 2.  The given string must not contain a NUL or LF character.  The
server’s handling of server options, including unknown ones, is
server-specific.  When multiple @samp{--server-option=<option>} are given, they
are all sent to the other side in the order listed on the command line.

@item  @samp{--show-forced-updates} 
By default, git checks if a branch is force-updated during fetch. This can
be disabled through fetch.showForcedUpdates, but the --show-forced-updates
option guarantees this check occurs.  See git-config(1).

@item  @samp{--no-show-forced-updates} 
By default, git checks if a branch is force-updated during fetch. Pass
--no-show-forced-updates or set fetch.showForcedUpdates to false to skip
this check for performance reasons. If used during @emph{git-pull} the --ff-only
option will still check for forced updates before attempting a fast-forward
update. See git-config(1).

@item  @samp{-4} 
@itemx  @samp{--ipv4} 
Use IPv4 addresses only, ignoring IPv6 addresses.

@item  @samp{-6} 
@itemx  @samp{--ipv6} 
Use IPv6 addresses only, ignoring IPv4 addresses.

@item  <repository> 
フェッチまたはプル操作のソースである「リモート」リポジトリ。このパラメーターは、URL(以下の GIT URLS 
セクションを参照)またはリモートの名前(以下の REMOTES  セクションを参照)のいずれかです。

@item  <group> 
構成ファイル内のリモート。 <group> の値としてリポジトリーのリストを参照する名前。(git-config(1) を参照)。

@item  <refspec> 
フェッチするrefと更新するローカルrefを指定します。コマンドラインに <refspec> がない場合、フェッチするrefは代わりに
@samp{remote.<repository>.fetch} 変数から読み取られます。
(下記 CONFIGURED REMOTE-TRACKING BRANCHES (@pxref{[CRTB]}) 参照)

<refspec> パラメータの組織は、オプションのプラス @samp{+} に続いて ソースの <src> 、コロン @samp{:} 宛先refの <dst>
の順です。 <dst> が空の場合、コロン(@samp{:})は省略できます。 <src>
は通常、refですが、フルスペルの16進オブジェクト名にすることもできます。

<refspec> の <src> には、単純なパターン一致を示すための @samp{*}
が含まれている場合があります。このようなrefspecは、同じプレフィックスを持つ任意のrefに一致するglobのように機能します。パターン<refspec>では、
<src> と <dst> の両方に @samp{*} が含まれている必要があります。 @samp{*}
をソースから一致したコンテンツに置き換えることにより、refを宛先にマッピングします。

refspecの前に @samp{^}
が付いている場合、それはネガティブのrefspecとして解釈されます。このようなrefspecは、フェッチするrefや更新するローカルrefを指定するのではなく、除外するrefを指定します。
refは、少なくとも1つのポジティブ(通常)のrefspecと一致し、ネガティブのrefspecと一致しない場合、一致すると見なされます。ネガティブのrefspecは、特定のrefが含まれないように、パターンrefspecのスコープを制限するのに役立ちます。ネガティブのrefspecは、それ自体がパターンrefspecである可能性があります。
ただし、 <src> のみを含めることができ、 <dst> を指定することはできません。 フルスペルの16進オブジェクト名もサポートされていません。

@samp{tag <tag>} は、 @samp{refs/tags/<tag>:refs/tags/<tag>}
と同じ意味です。指定されたタグまでのすべてをフェッチするように要求します。

<src> に一致するリモートrefがフェッチされ、 <dst> が空の文字列でない場合は、それに一致するローカルrefを更新しようとします。

その更新が @samp{--force}
なしで許可されるかどうかは、フェッチ先のref名前空間、フェッチされるオブジェクトのタイプ、および更新がfast-forwardであると見なされるかどうかによって異なります。一般に、プッシュする場合と同じルールがフェッチに適用されます。それらが何であるかについては、
git-push(1)の @samp{<refspec>...} セクションを参照してください。 @emph{git fetch}
に固有の例外ルールを以下に示します。

Gitバージョン2.20までは、 git-push(1) でプッシュする場合とは異なり、 @samp{refs/tags/*} の更新は、
refspec に @samp{+} がなくても(または @samp{--force}
指定が無くても)受け入れられます。フェッチするとき、リモートからのすべてのタグ更新を強制フェッチとしていました。Gitバージョン2.20以降では、
@samp{refs/tags/*} を更新するためのフェッチは、プッシュする場合と同じように機能します。 つまり refspecに @samp{+} が無い場合(または
@samp{--force} が無い場合)、更新は拒否されます。

git-push(1) でプッシュするときとは異なり、 @samp{refs/@{tags,heads@}/*} 以外の更新は、 refspecに
@samp{+} がなくても(あるいは @samp{--force}
指定が無くても)受け付けられます。例えば、ツリーオブジェクトとブロブを交換したり、あるコミットを、祖先を持たない別のコミットと交換したりできます。

git-push(1) でプッシュする場合とは異なり、これらのルールを修正する構成はなく、 @samp{pre-receive} フックに類似した
@samp{pre-fetch} フックのようなものはありません。

git-push(1)
を使用したプッシュと同様に、更新として許可されないものに関する上記のすべてのルールは、refspec先頭にオプションで @samp{+} をに追加する(または
@samp{--force} コマンドラインオプションを使用する)ことでオーバーライドできます。これに対する唯一の例外は、 @samp{refs/heads/*}
名前空間が非コミットオブジェクトを受け入れるように強制することはないということです。

@quotation

@strong{Note}

フェッチするリモートブランチが定期的に巻き戻されてリベースされることがわかっている場合、その新しい先端は(最後にフェッチしたときにリモートトラッキングブランチに保存された)以前の先端の子孫ではないことが予想されます。あなたは
@samp{+}
記号を使用して、そのようなブランチにnon-fast-forwardの更新が必要であることを指示します。この操作でブランチがリポジトリで使用可能になることを決定または宣言する方法はありません。プルするユーザーは、これがブランチの予想される使用パターンであることを知っている必要があります。
@end quotation

@item  @samp{--stdin} 
Read refspecs, one per line, from stdin in addition to those provided as
arguments. The "tag <name>" format is not supported.
@end table

@noindent

@chapheading GIT URLS

一般に、URLには、トランスポートプロトコル、リモートサーバーのアドレス、およびリポジトリへのパスに関する情報が含まれています。トランスポートプロトコルによっては、一部の情報が欠落している場合があります。

Gitはsshとgitとhttpとhttpsプロトコルをサポートします(さらにftpとftpsをフェッチに使用できますが、これは非効率的で非推奨です。使用しないでください)。

ネイティブトランスポート(つまり、 git://
URL)は認証を行わないため、セキュリティで保護されていないネットワークでは注意して使用する必要があります。

以下の構文を使用できます:

@itemize 

@item
ssh://[user@@]host.xz[:port]/path/to/repo.git/

@item
git://host.xz[:port]/path/to/repo.git/

@item
http[s]://host.xz[:port]/path/to/repo.git/

@item
ftp[s]://host.xz[:port]/path/to/repo.git/
@end itemize

代替のscpのような構文をsshプロトコルで使用することもできます:

@itemize 

@item
[user@@]host.xz:path/to/repo.git/
@end itemize

この構文は、最初のコロン(:)の前にスラッシュがない場合にのみ認識されます。これは、コロンを含むローカルパスを区別するのに役立ちます。たとえば、ローカルパス
@samp{foo:bar} を、絶対パスまたは @samp{./foo:bar} として指定して、 ssh url として誤って解釈されないようにすることができます。

sshおよびgitプロトコルは、さらに ~username 拡張をサポートします:

@itemize 

@item
ssh://[user@@]host.xz[:port]/~[user]/path/to/repo.git/

@item
git://host.xz[:port]/~[user]/path/to/repo.git/

@item
[user@@]host.xz:/~[user]/path/to/repo.git/
@end itemize

Gitでもネイティブにサポートされているローカルリポジトリの場合、以下の構文を使用できます:

@itemize 

@item
/path/to/repo.git/

@item
file:///path/to/repo.git/
@end itemize

これらの2つの構文は、前者が @samp{--local} オプションの機能を含むクローン作成の場合を除いて、ほとんど同等です。 詳細については、
git-clone(1) を参照してください。

「git clone」と「git fetch」と「git pull」は、「git push」と違って適切なバンドルファイルを受け入れます。
git-bundle(1) を参照してください。

Gitが特定のトランスポートプロトコルを処理する方法を知らない場合、Gitは @emph{remote-<transport>}
リモートヘルパー(存在する場合)を使用しようとします。リモートヘルパーを明示的に要求するには、以下の構文を使用できます:

@itemize 

@item
<transport>::<address>
@end itemize

ここで、 <address>
は、パス、サーバーとパス、または呼び出されている特定のリモートヘルパーによって認識される任意のURLのような文字列です。詳細については、
gitremote-helpers(7) を参照してください。

同じ名前のリモートリポジトリが多数あり、それらに異なる形式を使用する場合(あなたの使用するURLが機能するURLに書き換えられるように)、以下の形式の構成セクションを作成できます:

@example
        [url "<actual url base>"]
                insteadOf = <other url base>
@end example


例えば、以下のようになります:

@example
        [url "git://git.host.xz/"]
                insteadOf = host.xz:/path/to/
                insteadOf = work:
@end example


"work:repo.git" や "host.xz:/path/to/repo.git"
のようなURLは、任意のコンテキストで、"git://git.host.xz/repo.git" に書き換えられます。

プッシュ専用のURLを書き換えたい場合は、以下の形式の構成セクションを作成できます:

@example
        [url "<actual url base>"]
                pushInsteadOf = <other url base>
@end example


例えば、以下のようになります:

@example
        [url "ssh://example.org/"]
                pushInsteadOf = git://example.org/
@end example


"git://example.org/path/to/repo.git" のようなURLは、プッシュの場合は
"ssh://example.org/path/to/repo.git" に書き換えられますが、プルは引き続き元のURLのままです。

@noindent

@chapheading REMOTES

@samp{<repository>} 引数として、URLの代わりに以下のいずれかの名前を使用できます:

@itemize 

@item
Git構成ファイル(configuration file)内のリモート(remote)として、 @samp{$GIT_DIR/config} または

@item
@samp{$GIT_DIR/remotes} ディレクトリ内のファイル または

@item
@samp{$GIT_DIR/branches} ディレクトリ内のファイル
@end itemize

これらはすべて、gitがデフォルトで使用するrefspecをそれぞれ含んでいるため、コマンドラインからrefspecを省略できます。

@noindent

@heading Named remote in configuration file

あなたは、 git-remote(1) を使うか、または git-config(1) を使うか、または
@samp{$GIT_DIR/config}
ファイルを手動で編集して、これ以前に構成したリモートの名前から選択できます。このリモートのURLは、リポジトリへのアクセスに使用されます。コマンドラインでrefspecを指定しない場合、このリモートのrefspecがデフォルトで使用されます。構成ファイルのエントリは以下のようになります:

@example
        [remote "<name>"]
                url = <url>
                pushurl = <pushurl>
                push = <refspec>
                fetch = <refspec>
@end example


@samp{<pushurl>} はプッシュにのみ使用されます。 これはオプションであり、デフォルトは @samp{<url>} です。

@noindent

@heading Named file in $GIT_DIR/remotes

あなたは、 @samp{$GIT_DIR/remotes}
でファイル名を指定できます。このファイルのURLは、リポジトリへのアクセスに使用されます。コマンドラインでrefspecを指定しない場合、このファイルのrefspecがデフォルトとして使用されます。このファイルの形式は以下のとおりです:

@example
        URL: one of the above URL format
        Push: <refspec>
        Pull: <refspec>
@end example


@samp{Push:} 行は @emph{git push} で使用され、 @samp{Pull:} 行は @emph{git pull} と @emph{git fetch}
で使用されます。追加のブランチマッピングのために、複数の @samp{Push:} および @samp{Pull:} 行を指定できます。

@noindent

@heading Named file in $GIT_DIR/branches

@samp{$GIT_DIR/branches} でファイル名を指定できます。このファイルのURLは、リポジトリへのアクセスに使用されます。
このファイルの形式は以下のとおりです:

@example
        <url>#<head>
@end example


@samp{<url>} は必須です。 @samp{#<head>} はオプションです。

コマンドラインで指定しない場合、操作に応じて、gitは以下のrefspecのいずれかを使用します。 @samp{<branch>} は
@samp{$GIT_DIR/branchs} 内のこのファイルの名前であり、 @samp{<head>`はデフォルトで `master} になります。

git fetch は以下を使用します:

@example
        refs/heads/<head>:refs/heads/<branch>
@end example


git push は以下を使用します:

@example
        HEAD:refs/heads/<head>
@end example


@noindent

@chapheading CONFIGURED REMOTE-TRACKING BRANCHES

You often interact with the same remote repository by regularly and
repeatedly fetching from it.  In order to keep track of the progress of such
a remote repository, @samp{git fetch} allows you to configure
@samp{remote.<repository>.fetch} configuration variables.

Typically such a variable may look like this:

@example
[remote "origin"]
        fetch = +refs/heads/*:refs/remotes/origin/*
@end example


This configuration is used in two ways:

@itemize 

@item
When @samp{git fetch} is run without specifying what branches and/or tags to
fetch on the command line, e.g. @samp{git fetch origin} or @samp{git fetch},
@samp{remote.<repository>.fetch} values are used as the refspecs—they specify
which refs to fetch and which local refs to update.  The example above will
fetch all branches that exist in the @samp{origin} (i.e. any ref that matches the
left-hand side of the value, @samp{refs/heads/*}) and update the corresponding
remote-tracking branches in the @samp{refs/remotes/origin/*} hierarchy.

@item
When @samp{git fetch} is run with explicit branches and/or tags to fetch on the
command line, e.g. @samp{git fetch origin master}, the <refspec>s given on the
command line determine what are to be fetched (e.g. @samp{master} in the example,
which is a short-hand for @samp{master:}, which in turn means "fetch the @emph{master}
branch but I do not explicitly say what remote-tracking branch to update
with it from the command line"), and the example command will fetch @emph{only}
the @emph{master} branch.  The @samp{remote.<repository>.fetch} values determine which
remote-tracking branch, if any, is updated.  When used in this way, the
@samp{remote.<repository>.fetch} values do not have any effect in deciding @emph{what}
gets fetched (i.e. the values are not used as refspecs when the command-line
lists refspecs); they are only used to decide @emph{where} the refs that are
fetched are stored by acting as a mapping.
@end itemize

The latter use of the @samp{remote.<repository>.fetch} values can be overridden
by giving the @samp{--refmap=<refspec>} parameter(s) on the command line.

@noindent

@chapheading PRUNING

Git has a default disposition of keeping data unless it’s explicitly thrown
away; this extends to holding onto local references to branches on remotes
that have themselves deleted those branches.

If left to accumulate, these stale references might make performance worse
on big and busy repos that have a lot of branch churn, and e.g. make the
output of commands like @samp{git branch -a --contains <commit>} needlessly
verbose, as well as impacting anything else that’ll work with the complete
set of known references.

These remote-tracking references can be deleted as a one-off with either of:

@example
# While fetching
$ git fetch --prune <name>

# Only prune, don't fetch
$ git remote prune <name>
@end example


To prune references as part of your normal workflow without needing to
remember to run that, set @samp{fetch.prune} globally, or @samp{remote.<name>.prune}
per-remote in the config. See git-config(1).

Here’s where things get tricky and more specific. The pruning feature
doesn’t actually care about branches, instead it’ll prune local ←→
remote-references as a function of the refspec of the remote (see
@samp{<refspec>} and CONFIGURED REMOTE-TRACKING BRANCHES (@pxref{[CRTB]}) above).

Therefore if the refspec for the remote includes
e.g. @samp{refs/tags/*:refs/tags/*}, or you manually run e.g. @samp{git fetch --prune
<name> "refs/tags/*:refs/tags/*"} it won’t be stale remote tracking branches
that are deleted, but any local tag that doesn’t exist on the remote.

This might not be what you expect, i.e. you want to prune remote @samp{<name>},
but also explicitly fetch tags from it, so when you fetch from it you delete
all your local tags, most of which may not have come from the @samp{<name>}
remote in the first place.

So be careful when using this with a refspec like @samp{refs/tags/*:refs/tags/*},
or any other refspec which might map references from multiple remotes to the
same local namespace.

Since keeping up-to-date with both branches and tags on the remote is a
common use-case the @samp{--prune-tags} option can be supplied along with
@samp{--prune} to prune local tags that don’t exist on the remote, and
force-update those tags that differ. Tag pruning can also be enabled with
@samp{fetch.pruneTags} or @samp{remote.<name>.pruneTags} in the config. See
git-config(1).

The @samp{--prune-tags} option is equivalent to having @samp{refs/tags/*:refs/tags/*}
declared in the refspecs of the remote. This can lead to some seemingly
strange interactions:

@example
# These both fetch tags
$ git fetch --no-tags origin 'refs/tags/*:refs/tags/*'
$ git fetch --no-tags --prune-tags origin
@end example


The reason it doesn’t error out when provided without @samp{--prune} or its
config versions is for flexibility of the configured versions, and to
maintain a 1=1 mapping between what the command line flags do, and what the
configuration versions do.

It’s reasonable to e.g. configure @samp{fetch.pruneTags=true} in @samp{~/.gitconfig}
to have tags pruned whenever @samp{git fetch --prune} is run, without making
every invocation of @samp{git fetch} without @samp{--prune} an error.

Pruning tags with @samp{--prune-tags} also works when fetching a URL instead of a
named remote. These will all prune tags not found on origin:

@example
$ git fetch origin --prune --prune-tags
$ git fetch origin --prune 'refs/tags/*:refs/tags/*'
$ git fetch <url of origin> --prune --prune-tags
$ git fetch <url of origin> --prune 'refs/tags/*:refs/tags/*'
@end example


@noindent

@chapheading OUTPUT

The output of "git fetch" depends on the transport method used; this section
describes the output when fetching over the Git protocol (either locally or
via ssh) and Smart HTTP protocol.

The status of the fetch is output in tabular form, with each line
representing the status of a single ref. Each line is of the form:

@example
 <flag> <summary> <from> -> <to> [<reason>]
@end example


The status of up-to-date refs is shown only if the --verbose option is used.

In compact output mode, specified with configuration variable fetch.output,
if either entire @samp{<from>} or @samp{<to>} is found in the other string, it will be
substituted with @samp{*} in the other string. For example, @samp{master ->
origin/master} becomes @samp{master -> origin/*}.

@table @asis

@item  flag 
A single character indicating the status of the ref:

@table @asis

@item  (space) 
for a successfully fetched fast-forward;

@item  @samp{+} 
for a successful forced update;

@item  @samp{-} 
for a successfully pruned ref;

@item  @samp{t} 
for a successful tag update;

@item  @samp{*} 
for a successfully fetched new ref;

@item  @samp{!} 
for a ref that was rejected or failed to update; and

@item  @samp{=} 
for a ref that was up to date and did not need fetching.
@end table

@item  summary 
For a successfully fetched ref, the summary shows the old and new values of
the ref in a form suitable for using as an argument to @samp{git log} (this is
@samp{<old>..<new>} in most cases, and @samp{<old>...<new>} for forced
non-fast-forward updates).

@item  from 
The name of the remote ref being fetched from, minus its @samp{refs/<type>/}
prefix. In the case of deletion, the name of the remote ref is "(none)".

@item  to 
The name of the local ref being updated, minus its @samp{refs/<type>/} prefix.

@item  reason 
A human-readable explanation. In the case of successfully fetched refs, no
explanation is needed. For a failed ref, the reason for failure is
described.
@end table

@noindent

@chapheading EXAMPLES

@itemize 

@item
Update the remote-tracking branches:

@example
$ git fetch origin
@end example


The above command copies all branches from the remote refs/heads/ namespace
and stores them to the local refs/remotes/origin/ namespace, unless the
branch.<name>.fetch option is used to specify a non-default refspec.

@item
Using refspecs explicitly:

@example
$ git fetch origin +seen:seen maint:tmp
@end example


This updates (or creates, as necessary) branches @samp{seen} and @samp{tmp} in the
local repository by fetching from the branches (respectively)  @samp{seen} and
@samp{maint} from the remote repository.

The @samp{seen} branch will be updated even if it does not fast-forward, because
it is prefixed with a plus sign; @samp{tmp} will not be.

@item
Peek at a remote’s branch, without configuring the remote in your local
repository:

@example
$ git fetch git://git.kernel.org/pub/scm/git/git.git maint
$ git log FETCH_HEAD
@end example


The first command fetches the @samp{maint} branch from the repository at
@samp{git://git.kernel.org/pub/scm/git/git.git} and the second command uses
@samp{FETCH_HEAD} to examine the branch with git-log(1).  The fetched
objects will eventually be removed by git’s built-in housekeeping (see
git-gc(1)).
@end itemize

@noindent

@chapheading SECURITY

フェッチおよびプッシュプロトコルは、共有することを意図していない一方の側が他方のリポジトリからデータを盗むのを防ぐようには設計されていません。悪意のある者から保護する必要のあるプライベートデータがある場合、最善のオプションはそれを別のリポジトリに保存することです。これは、クライアントとサーバーの両方に適用されます。特に、サーバー上の名前空間は、読み取りアクセス制御には効果的ではありません。リポジトリ全体への読み取りアクセスで信頼できるクライアントにのみ、名前空間への読み取りアクセスを許可する必要があります。

既知の攻撃ベクトル(attack vectors)は以下のとおりです:

@enumerate 

@item
被害者は、明示的に共有することを意図していないオブジェクトのIDをアドバタイズする "have"
行を送信しますが、他にもIDを持っている者が居る場合は、転送を最適化するために使用できます。攻撃者はオブジェクトID
Xを選択して盗み、refをXに送信しますが、被害者はすでにXのコンテンツを持っているため、Xのコンテンツを送信する必要はありません。
これで、被害者は攻撃者がXを持っていると信じ、Xのコンテンツを後で攻撃者に送り返します。
(この攻撃は、クライアントがアクセスできる名前空間にXへのrefを作成してフェッチすることにより、クライアントがサーバー上で実行するのが最も簡単です。サーバーがクライアント上で実行する最も可能性の高い方法は、Xをパブリックブランチにマージし、ユーザーがこのブランチで追加の作業を行い、マージに気付かずにサーバーにプッシュバックすることを期待します。)

@item
#1 と同様に、攻撃者は盗むオブジェクトID
Xを選択します。被害者は、攻撃者がすでに持っているオブジェクトYを送信し、攻撃者はYではなくXを持っていると誤って主張するため、被害者はYをXに対するデルタとして送信します。デルタは、攻撃者にYに類似したXの領域を明らかにします。
@end enumerate

@noindent

@chapheading BUGS

Using --recurse-submodules can only fetch new commits in already checked out
submodules right now. When e.g. upstream added a new submodule in the just
fetched commits of the superproject the submodule itself cannot be fetched,
making it impossible to check out that submodule later without having to do
a fetch again. This is expected to be fixed in a future Git version.

@noindent

@chapheading SEE ALSO

git-pull(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-filter-branch,,,Top
@chapheading Name

git-filter-branch — Rewrite branches

@noindent

@chapheading Synopsis

@display
git filter-branch [--setup <command>] [--subdirectory-filter <directory>]
        [--env-filter <command>] [--tree-filter <command>]
        [--index-filter <command>] [--parent-filter <command>]
        [--msg-filter <command>] [--commit-filter <command>]
        [--tag-name-filter <command>] [--prune-empty]
        [--original <namespace>] [-d <directory>] [-f | --force]
        [--state-branch <branch>] [--] [<rev-list options>…]
@end display


@noindent

@chapheading WARNING

@emph{git filter-branch} has a plethora of pitfalls that can produce non-obvious
manglings of the intended history rewrite (and can leave you with little
time to investigate such problems since it has such abysmal performance).
These safety and performance issues cannot be backward compatibly fixed and
as such, its use is not recommended.  Please use an alternative history
filtering tool such as @uref{https://github.com/newren/git-filter-repo/,git filter-repo}.  If you still need to use @emph{git filter-branch}, please
carefully read @ref{SAFETY} (and @ref{PERFORMANCE}) to learn about the land
mines of filter-branch, and then vigilantly avoid as many of the hazards
listed there as reasonably possible.

@noindent

@chapheading DESCRIPTION

Lets you rewrite Git revision history by rewriting the branches mentioned in
the <rev-list options>, applying custom filters on each revision.  Those
filters can modify each tree (e.g. removing a file or running a perl rewrite
on all files) or information about each commit.  Otherwise, all information
(including original commit times or merge information) will be preserved.

The command will only rewrite the @emph{positive} refs mentioned in the command
line (e.g. if you pass @emph{a..b}, only @emph{b} will be rewritten).  If you specify
no filters, the commits will be recommitted without any changes, which would
normally have no effect.  Nevertheless, this may be useful in the future for
compensating for some Git bugs or such, therefore such a usage is permitted.

@strong{NOTE}: This command honors @samp{.git/info/grafts} file and refs in
the @samp{refs/replace/} namespace.
If you have any grafts or replacement refs defined, running this command
will make them permanent.

@strong{WARNING}! The rewritten history will have different object names for all
the objects and will not converge with the original branch.  You will not
be able to easily push and distribute the rewritten branch on top of the
original branch.  Please do not use this command if you do not know the
full implications, and avoid using it anyway, if a simple single commit
would suffice to fix your problem.  (See the "RECOVERING FROM UPSTREAM
REBASE" section in git-rebase(1) for further information about
rewriting published history.)

Always verify that the rewritten version is correct: The original refs, if
different from the rewritten ones, will be stored in the namespace
@emph{refs/original/}.

Note that since this operation is very I/O expensive, it might be a good
idea to redirect the temporary directory off-disk with the @samp{-d} option,
e.g. on tmpfs.  Reportedly the speedup is very noticeable.

@noindent

@heading Filters

The filters are applied in the order as listed below.  The <command>
argument is always evaluated in the shell context using the @emph{eval} command
(with the notable exception of the commit filter, for technical reasons).
Prior to that, the @samp{$GIT_COMMIT} environment variable will be set to contain
the id of the commit being rewritten.  Also, GIT_AUTHOR_NAME,
GIT_AUTHOR_EMAIL, GIT_AUTHOR_DATE, GIT_COMMITTER_NAME, GIT_COMMITTER_EMAIL,
and GIT_COMMITTER_DATE are taken from the current commit and exported to the
environment, in order to affect the author and committer identities of the
replacement commit created by git-commit-tree(1) after the filters
have run.

If any evaluation of <command> returns a non-zero exit status, the whole
operation will be aborted.

A @emph{map} function is available that takes an "original sha1 id" argument and
outputs a "rewritten sha1 id" if the commit has been already rewritten, and
"original sha1 id" otherwise; the @emph{map} function can return several ids on
separate lines if your commit filter emitted multiple commits.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--setup <command>} 
This is not a real filter executed for each commit but a one time setup just
before the loop. Therefore no commit-specific variables are defined yet.
Functions or variables defined here can be used or modified in the following
filter steps except the commit filter, for technical reasons.

@item  @samp{--subdirectory-filter <directory>} 
Only look at the history which touches the given subdirectory.  The result
will contain that directory (and only that) as its project root. Implies
@ref{Remap to ancestor}.

@item  @samp{--env-filter <command>} 
This filter may be used if you only need to modify the environment in which
the commit will be performed.  Specifically, you might want to rewrite the
author/committer name/email/time environment variables (see
git-commit-tree(1) for details).

@item  @samp{--tree-filter <command>} 
This is the filter for rewriting the tree and its contents.  The argument is
evaluated in shell with the working directory set to the root of the checked
out tree.  The new tree is then used as-is (new files are auto-added,
disappeared files are auto-removed - neither .gitignore files nor any other
ignore rules @strong{HAVE ANY EFFECT}!).

@item  @samp{--index-filter <command>} 
This is the filter for rewriting the index.  It is similar to the tree
filter but does not check out the tree, which makes it much faster.
Frequently used with @samp{git rm --cached --ignore-unmatch ...}, see EXAMPLES
below.  For hairy cases, see git-update-index(1).

@item  @samp{--parent-filter <command>} 
This is the filter for rewriting the commit’s parent list.  It will receive
the parent string on stdin and shall output the new parent string on
stdout.  The parent string is in the format described in
git-commit-tree(1): empty for the initial commit, "-p parent" for a
normal commit and "-p parent1 -p parent2 -p parent3 …" for a merge commit.

@item  @samp{--msg-filter <command>} 
This is the filter for rewriting the commit messages.  The argument is
evaluated in the shell with the original commit message on standard input;
its standard output is used as the new commit message.

@item  @samp{--commit-filter <command>} 
This is the filter for performing the commit.  If this filter is specified,
it will be called instead of the @emph{git commit-tree} command, with arguments
of the form "<TREE_ID> [(-p <PARENT_COMMIT_ID>)…]" and the log message on
stdin.  The commit id is expected on stdout.

As a special extension, the commit filter may emit multiple commit ids; in
that case, the rewritten children of the original commit will have all of
them as parents.

You can use the @emph{map} convenience function in this filter, and other
convenience functions, too.  For example, calling @emph{skip_commit "$@@"} will
leave out the current commit (but not its changes! If you want that, use
@emph{git rebase} instead).

You can also use the @samp{git_commit_non_empty_tree "$@@"} instead of @samp{git
commit-tree "$@@"} if you don’t wish to keep commits with a single parent and
that makes no change to the tree.

@item  @samp{--tag-name-filter <command>} 
This is the filter for rewriting tag names. When passed, it will be called
for every tag ref that points to a rewritten object (or to a tag object
which points to a rewritten object).  The original tag name is passed via
standard input, and the new tag name is expected on standard output.

The original tags are not deleted, but can be overwritten; use
"--tag-name-filter cat" to simply update the tags.  In this case, be very
careful and make sure you have the old tags backed up in case the conversion
has run afoul.

Nearly proper rewriting of tag objects is supported. If the tag has a
message attached, a new tag object will be created with the same message,
author, and timestamp. If the tag has a signature attached, the signature
will be stripped. It is by definition impossible to preserve signatures. The
reason this is "nearly" proper, is because ideally if the tag did not change
(points to the same object, has the same name, etc.)  it should retain any
signature. That is not the case, signatures will always be removed, buyer
beware. There is also no support for changing the author or timestamp (or
the tag message for that matter). Tags which point to other tags will be
rewritten to point to the underlying commit.

@item  @samp{--prune-empty} 
Some filters will generate empty commits that leave the tree untouched.
This option instructs git-filter-branch to remove such commits if they have
exactly one or zero non-pruned parents; merge commits will therefore remain
intact.  This option cannot be used together with @samp{--commit-filter}, though
the same effect can be achieved by using the provided
@samp{git_commit_non_empty_tree} function in a commit filter.

@item  @samp{--original <namespace>} 
Use this option to set the namespace where the original commits will be
stored. The default value is @emph{refs/original}.

@item  @samp{-d <directory>} 
Use this option to set the path to the temporary directory used for
rewriting.  When applying a tree filter, the command needs to temporarily
check out the tree to some directory, which may consume considerable space
in case of large projects.  By default it does this in the @samp{.git-rewrite/}
directory but you can override that choice by this parameter.

@item  @samp{-f} 
@itemx  @samp{--force} 
@emph{git filter-branch} refuses to start with an existing temporary directory or
when there are already refs starting with @emph{refs/original/}, unless forced.

@item  @samp{--state-branch <branch>} 
This option will cause the mapping from old to new objects to be loaded from
named branch upon startup and saved as a new commit to that branch upon
exit, enabling incremental of large trees. If @emph{<branch>} does not exist it
will be created.

@item  <rev-list options>… 
Arguments for @emph{git rev-list}.  All positive refs included by these options
are rewritten.  You may also specify options such as @samp{--all}, but you must
use @samp{--} to separate them from the @emph{git filter-branch} options. Implies
@ref{Remap to ancestor}.
@end table

@noindent

@heading Remap to ancestor

By using git-rev-list(1) arguments, e.g., path limiters, you can
limit the set of revisions which get rewritten. However, positive refs on
the command line are distinguished: we don’t let them be excluded by such
limiters. For this purpose, they are instead rewritten to point at the
nearest ancestor that was not excluded.

@noindent

@chapheading EXIT STATUS

On success, the exit status is @samp{0}.  If the filter can’t find any commits to
rewrite, the exit status is @samp{2}.  On any other error, the exit status may be
any other non-zero value.

@noindent

@chapheading EXAMPLES

Suppose you want to remove a file (containing confidential information or
copyright violation) from all commits:

@example
git filter-branch --tree-filter 'rm filename' HEAD
@end example


However, if the file is absent from the tree of some commit, a simple @samp{rm
filename} will fail for that tree and commit.  Thus you may instead want to
use @samp{rm -f filename} as the script.

Using @samp{--index-filter} with @emph{git rm} yields a significantly faster version.
Like with using @samp{rm filename}, @samp{git rm --cached filename} will fail if the
file is absent from the tree of a commit.  If you want to "completely
forget" a file, it does not matter when it entered history, so we also add
@samp{--ignore-unmatch}:

@example
git filter-branch --index-filter 'git rm --cached --ignore-unmatch filename' HEAD
@end example


Now, you will get the rewritten history saved in HEAD.

To rewrite the repository to look as if @samp{foodir/} had been its project root,
and discard all other history:

@example
git filter-branch --subdirectory-filter foodir -- --all
@end example


Thus you can, e.g., turn a library subdirectory into a repository of its
own.  Note the @samp{--} that separates @emph{filter-branch} options from revision
options, and the @samp{--all} to rewrite all branches and tags.

To set a commit (which typically is at the tip of another history) to be the
parent of the current initial commit, in order to paste the other history
behind the current history:

@example
git filter-branch --parent-filter 'sed "s/^\$/-p <graft-id>/"' HEAD
@end example


(if the parent string is empty - which happens when we are dealing with the
initial commit - add graftcommit as a parent).  Note that this assumes
history with a single root (that is, no merge without common ancestors
happened).  If this is not the case, use:

@example
git filter-branch --parent-filter \
        'test $GIT_COMMIT = <commit-id> && echo "-p <graft-id>" || cat' HEAD
@end example


or even simpler:

@example
git replace --graft $commit-id $graft-id
git filter-branch $graft-id..HEAD
@end example


To remove commits authored by "Darl McBribe" from the history:

@example
git filter-branch --commit-filter '
        if [ "$GIT_AUTHOR_NAME" = "Darl McBribe" ];
        then
                skip_commit "$@@";
        else
                git commit-tree "$@@";
        fi' HEAD
@end example


The function @emph{skip_commit} is defined as follows:

@example
skip_commit()
@{
        shift;
        while [ -n "$1" ];
        do
                shift;
                map "$1";
                shift;
        done;
@}
@end example


The shift magic first throws away the tree id and then the -p parameters.
Note that this handles merges properly! In case Darl committed a merge
between P1 and P2, it will be propagated properly and all children of the
merge will become merge commits with P1,P2 as their parents instead of the
merge commit.

@strong{NOTE} the changes introduced by the commits, and which are not reverted
by subsequent commits, will still be in the rewritten branch. If you want
to throw out @emph{changes} together with the commits, you should use the
interactive mode of @emph{git rebase}.

You can rewrite the commit log messages using @samp{--msg-filter}.  For example,
@emph{git svn-id} strings in a repository created by @emph{git svn} can be removed
this way:

@example
git filter-branch --msg-filter '
        sed -e "/^git-svn-id:/d"
'
@end example


If you need to add @emph{Acked-by} lines to, say, the last 10 commits (none of
which is a merge), use this command:

@example
git filter-branch --msg-filter '
        cat &&
        echo "Acked-by: Bugs Bunny <bunny@@bugzilla.org>"
' HEAD~10..HEAD
@end example


The @samp{--env-filter} option can be used to modify committer and/or author
identity.  For example, if you found out that your commits have the wrong
identity due to a misconfigured user.email, you can make a correction,
before publishing the project, like this:

@example
git filter-branch --env-filter '
        if test "$GIT_AUTHOR_EMAIL" = "root@@localhost"
        then
                GIT_AUTHOR_EMAIL=john@@example.com
        fi
        if test "$GIT_COMMITTER_EMAIL" = "root@@localhost"
        then
                GIT_COMMITTER_EMAIL=john@@example.com
        fi
' -- --all
@end example


To restrict rewriting to only part of the history, specify a revision range
in addition to the new branch name.  The new branch name will point to the
top-most revision that a @emph{git rev-list} of this range will print.

Consider this history:

@example
     D--E--F--G--H
    /     /
A--B-----C
@end example


To rewrite only commits D,E,F,G,H, but leave A, B and C alone, use:

@example
git filter-branch ... C..H
@end example


To rewrite commits E,F,G,H, use one of these:

@example
git filter-branch ... C..H --not D
git filter-branch ... D..H --not C
@end example


To move the whole tree into a subdirectory, or remove it from there:

@example
git filter-branch --index-filter \
        'git ls-files -s | sed "s-\t\"*-&newsubdir/-" |
                GIT_INDEX_FILE=$GIT_INDEX_FILE.new \
                        git update-index --index-info &&
         mv "$GIT_INDEX_FILE.new" "$GIT_INDEX_FILE"' HEAD
@end example


@noindent

@chapheading CHECKLIST FOR SHRINKING A REPOSITORY

git-filter-branch can be used to get rid of a subset of files, usually with
some combination of @samp{--index-filter} and @samp{--subdirectory-filter}.  People
expect the resulting repository to be smaller than the original, but you
need a few more steps to actually make it smaller, because Git tries hard
not to lose your objects until you tell it to.  First make sure that:

@itemize 

@item
You really removed all variants of a filename, if a blob was moved over its
lifetime.  @samp{git log --name-only --follow --all -- filename} can help you
find renames.

@item
You really filtered all refs: use @samp{--tag-name-filter cat -- --all} when
calling git-filter-branch.
@end itemize

Then there are two ways to get a smaller repository.  A safer way is to
clone, that keeps your original intact.

@itemize 

@item
Clone it with @samp{git clone file:///path/to/repo}.  The clone will not have the
removed objects.  See git-clone(1).  (Note that cloning with a plain
path just hardlinks everything!)
@end itemize

If you really don’t want to clone it, for whatever reasons, check the
following points instead (in this order).  This is a very destructive
approach, so @strong{make a backup} or go back to cloning it.  You have been
warned.

@itemize 

@item
Remove the original refs backed up by git-filter-branch: say @samp{git
for-each-ref --format="%(refname)" refs/original/ | xargs -n 1 git
update-ref -d}.

@item
Expire all reflogs with @samp{git reflog expire --expire=now --all}.

@item
Garbage collect all unreferenced objects with @samp{git gc --prune=now} (or if
your git-gc is not new enough to support arguments to @samp{--prune}, use @samp{git
repack -ad; git prune} instead).
@end itemize

@noindent

@chapheading PERFORMANCE

The performance of git-filter-branch is glacially slow; its design makes it
impossible for a backward-compatible implementation to ever be fast:

@itemize 

@item
In editing files, git-filter-branch by design checks out each and every
commit as it existed in the original repo.  If your repo has @samp{10^5} files
and @samp{10^5} commits, but each commit only modifies five files, then
git-filter-branch will make you do @samp{10^10} modifications, despite only
having (at most) @samp{5*10^5} unique blobs.

@item
If you try and cheat and try to make git-filter-branch only work on files
modified in a commit, then two things happen

@itemize 

@item
you run into problems with deletions whenever the user is simply trying to
rename files (because attempting to delete files that don’t exist looks like
a no-op; it takes some chicanery to remap deletes across file renames when
the renames happen via arbitrary user-provided shell)

@item
even if you succeed at the map-deletes-for-renames chicanery, you still
technically violate backward compatibility because users are allowed to
filter files in ways that depend upon topology of commits instead of
filtering solely based on file contents or names (though this has not been
observed in the wild).
@end itemize

@item
Even if you don’t need to edit files but only want to e.g. rename or remove
some and thus can avoid checking out each file (i.e. you can use
--index-filter), you still are passing shell snippets for your filters.
This means that for every commit, you have to have a prepared git repo where
those filters can be run.  That’s a significant setup.

@item
Further, several additional files are created or updated per commit by
git-filter-branch.  Some of these are for supporting the convenience
functions provided by git-filter-branch (such as map()), while others are
for keeping track of internal state (but could have also been accessed by
user filters; one of git-filter-branch’s regression tests does so).  This
essentially amounts to using the filesystem as an IPC mechanism between
git-filter-branch and the user-provided filters.  Disks tend to be a slow
IPC mechanism, and writing these files also effectively represents a forced
synchronization point between separate processes that we hit with every
commit.

@item
The user-provided shell commands will likely involve a pipeline of commands,
resulting in the creation of many processes per commit.  Creating and
running another process takes a widely varying amount of time between
operating systems, but on any platform it is very slow relative to invoking
a function.

@item
git-filter-branch itself is written in shell, which is kind of slow.  This
is the one performance issue that could be backward-compatibly fixed, but
compared to the above problems that are intrinsic to the design of
git-filter-branch, the language of the tool itself is a relatively minor
issue.

@itemize 

@item
Side note: Unfortunately, people tend to fixate on the written-in-shell
aspect and periodically ask if git-filter-branch could be rewritten in
another language to fix the performance issues.  Not only does that ignore
the bigger intrinsic problems with the design, it’d help less than you’d
expect: if git-filter-branch itself were not shell, then the convenience
functions (map(), skip_commit(), etc) and the @samp{--setup} argument could no
longer be executed once at the beginning of the program but would instead
need to be prepended to every user filter (and thus re-executed with every
commit).
@end itemize
@end itemize

The @uref{https://github.com/newren/git-filter-repo/,git filter-repo} tool is an
alternative to git-filter-branch which does not suffer from these
performance problems or the safety problems (mentioned below). For those
with existing tooling which relies upon git-filter-branch, @emph{git filter-repo}
also provides
@uref{https://github.com/newren/git-filter-repo/blob/master/contrib/filter-repo-demos/filter-lamely,filter-lamely},
a drop-in git-filter-branch replacement (with a few caveats).  While
filter-lamely suffers from all the same safety issues as git-filter-branch,
it at least ameliorates the performance issues a little.

@noindent

@chapheading SAFETY

git-filter-branch is riddled with gotchas resulting in various ways to
easily corrupt repos or end up with a mess worse than what you started with:

@itemize 

@item
Someone can have a set of "working and tested filters" which they document
or provide to a coworker, who then runs them on a different OS where the
same commands are not working/tested (some examples in the git-filter-branch
manpage are also affected by this).  BSD vs. GNU userland differences can
really bite.  If lucky, error messages are spewed.  But just as likely, the
commands either don’t do the filtering requested, or silently corrupt by
making some unwanted change.  The unwanted change may only affect a few
commits, so it’s not necessarily obvious either.  (The fact that problems
won’t necessarily be obvious means they are likely to go unnoticed until the
rewritten history is in use for quite a while, at which point it’s really
hard to justify another flag-day for another rewrite.)

@item
Filenames with spaces are often mishandled by shell snippets since they
cause problems for shell pipelines.  Not everyone is familiar with find
-print0, xargs -0, git-ls-files -z, etc.  Even people who are familiar with
these may assume such flags are not relevant because someone else renamed
any such files in their repo back before the person doing the filtering
joined the project.  And often, even those familiar with handling arguments
with spaces may not do so just because they aren’t in the mindset of
thinking about everything that could possibly go wrong.

@item
Non-ascii filenames can be silently removed despite being in a desired
directory.  Keeping only wanted paths is often done using pipelines like
@samp{git ls-files | grep -v ^WANTED_DIR/ | xargs git rm}.  ls-files will only
quote filenames if needed, so folks may not notice that one of the files
didn’t match the regex (at least not until it’s much too late).  Yes,
someone who knows about core.quotePath can avoid this (unless they have
other special characters like \t, \n, or "), and people who use ls-files -z
with something other than grep can avoid this, but that doesn’t mean they
will.

@item
Similarly, when moving files around, one can find that filenames with
non-ascii or special characters end up in a different directory, one that
includes a double quote character.  (This is technically the same issue as
above with quoting, but perhaps an interesting different way that it can and
has manifested as a problem.)

@item
It’s far too easy to accidentally mix up old and new history.  It’s still
possible with any tool, but git-filter-branch almost invites it.  If lucky,
the only downside is users getting frustrated that they don’t know how to
shrink their repo and remove the old stuff.  If unlucky, they merge old and
new history and end up with multiple "copies" of each commit, some of which
have unwanted or sensitive files and others which don’t.  This comes about
in multiple different ways:

@itemize 

@item
the default to only doing a partial history rewrite (@emph{--all} is not the
default and few examples show it)

@item
the fact that there’s no automatic post-run cleanup

@item
the fact that --tag-name-filter (when used to rename tags) doesn’t remove
the old tags but just adds new ones with the new name

@item
the fact that little educational information is provided to inform users of
the ramifications of a rewrite and how to avoid mixing old and new history.
For example, this man page discusses how users need to understand that they
need to rebase their changes for all their branches on top of new history
(or delete and reclone), but that’s only one of multiple concerns to
consider.  See the "DISCUSSION" section of the git filter-repo manual page
for more details.
@end itemize

@item
Annotated tags can be accidentally converted to lightweight tags, due to
either of two issues:

@itemize 

@item
Someone can do a history rewrite, realize they messed up, restore from the
backups in refs/original/, and then redo their git-filter-branch command.
(The backup in refs/original/ is not a real backup; it dereferences tags
first.)

@item
Running git-filter-branch with either --tags or --all in your <rev-list
options>.  In order to retain annotated tags as annotated, you must use
--tag-name-filter (and must not have restored from refs/original/ in a
previously botched rewrite).
@end itemize

@item
Any commit messages that specify an encoding will become corrupted by the
rewrite; git-filter-branch ignores the encoding, takes the original bytes,
and feeds it to commit-tree without telling it the proper encoding.  (This
happens whether or not --msg-filter is used.)

@item
Commit messages (even if they are all UTF-8) by default become corrupted due
to not being updated — any references to other commit hashes in commit
messages will now refer to no-longer-extant commits.

@item
There are no facilities for helping users find what unwanted crud they
should delete, which means they are much more likely to have incomplete or
partial cleanups that sometimes result in confusion and people wasting time
trying to understand.  (For example, folks tend to just look for big files
to delete instead of big directories or extensions, and once they do so,
then sometime later folks using the new repository who are going through
history will notice a build artifact directory that has some files but not
others, or a cache of dependencies (node_modules or similar) which couldn’t
have ever been functional since it’s missing some files.)

@item
If --prune-empty isn’t specified, then the filtering process can create
hoards of confusing empty commits

@item
If --prune-empty is specified, then intentionally placed empty commits from
before the filtering operation are also pruned instead of just pruning
commits that became empty due to filtering rules.

@item
If --prune-empty is specified, sometimes empty commits are missed and left
around anyway (a somewhat rare bug, but it happens…)

@item
A minor issue, but users who have a goal to update all names and emails in a
repository may be led to --env-filter which will only update authors and
committers, missing taggers.

@item
If the user provides a --tag-name-filter that maps multiple tags to the same
name, no warning or error is provided; git-filter-branch simply overwrites
each tag in some undocumented pre-defined order resulting in only one tag at
the end.  (A git-filter-branch regression test requires this surprising
behavior.)
@end itemize

Also, the poor performance of git-filter-branch often leads to safety
issues:

@itemize 

@item
Coming up with the correct shell snippet to do the filtering you want is
sometimes difficult unless you’re just doing a trivial modification such as
deleting a couple files.  Unfortunately, people often learn if the snippet
is right or wrong by trying it out, but the rightness or wrongness can vary
depending on special circumstances (spaces in filenames, non-ascii
filenames, funny author names or emails, invalid timezones, presence of
grafts or replace objects, etc.), meaning they may have to wait a long time,
hit an error, then restart.  The performance of git-filter-branch is so bad
that this cycle is painful, reducing the time available to carefully
re-check (to say nothing about what it does to the patience of the person
doing the rewrite even if they do technically have more time available).
This problem is extra compounded because errors from broken filters may not
be shown for a long time and/or get lost in a sea of output.  Even worse,
broken filters often just result in silent incorrect rewrites.

@item
To top it all off, even when users finally find working commands, they
naturally want to share them.  But they may be unaware that their repo
didn’t have some special cases that someone else’s does.  So, when someone
else with a different repository runs the same commands, they get hit by the
problems above.  Or, the user just runs commands that really were vetted for
special cases, but they run it on a different OS where it doesn’t work, as
noted above.
@end itemize

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-fmt-merge-msg,,,Top
@chapheading Name

git-fmt-merge-msg — git-fmt-merge-msg-マージコミットメッセージを生成します

@noindent

@chapheading Synopsis

@display
git fmt-merge-msg [-m <message>] [--log[=<n>] | --no-log]
git fmt-merge-msg [-m <message>] [--log[=<n>] | --no-log] -F <file>
@end display


@noindent

@chapheading DESCRIPTION

標準入力からマージされたオブジェクトのリストを取得し、マージコミットに使用される適切なコミットメッセージを生成します。通常は、 @emph{git merge}
の @emph{<merge-message>} 引数として渡されます。

このコマンドは主に、 @emph{git merge} を自動的に呼び出すスクリプトによる内部使用を目的としています。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--log[=<n>]} 
ブランチ名に加えて、マージされている実際のコミットからの1行説明をログメッセージに入力します。各マージ親からの最大で <n>
のコミットが使用されます(<n> が省略されている場合は20)。これは、 @samp{merge.log} 構成変数をオーバーライドします。

@item  @samp{--no-log} 
マージされる実際のコミットからの1行説明をリストしません。

@item  @samp{--[no-]summary} 
@samp{--log} や @samp{--no-log} の同義語。これは非推奨であり、将来削除される予定です。

@item  @samp{-m <message>} 
@itemx  @samp{--message <message>} 
ログメッセージの最初の行に、ブランチ名の代わりに <message> を使用します。 @samp{--log} で使用します。

@item  @samp{-F <file>} 
@itemx  @samp{--file <file>} 
標準入力の代わりに <file> からマージされたオブジェクトのリストを取得します。
@end table

@noindent

@chapheading CONFIGURATION

@table @asis

@item  merge.branchdesc 
ブランチ名に加えて、それらに関連付けられたブランチの説明テキストをログメッセージに入力します。デフォルトはfalseです。

@item  merge.log 
ブランチ名に加えて、マージされる実際のコミットからの最大「指定の数」の親コミットの1行説明をログメッセージに入力します。デフォルトはfalseで、trueは20の同義語です。

@item  merge.suppressDest 
統合ブランチの名前に一致するグロブをこの複数値の構成変数(multi-valued configuration
variable)に追加することにより、これらの統合ブランチへのマージに対して計算されるデフォルトのマージメッセージは、タイトルから「into
<branch name>」を省略します。

空の値を持つ要素を使用して、以前の構成エントリから蓄積されたグロブのリストをクリアできます。 @samp{merge.suppressDest}
変数が定義されていない場合、下位互換性のためにデフォルト値の @samp{master} が使用されます。

@item  merge.summary 
@samp{merge.log} の同義語。これは非推奨であり、将来削除される予定です。
@end table

@noindent

@chapheading EXAMPLES

@example
$ git fetch origin master
$ git fmt-merge-msg --log <$GIT_DIR/FETCH_HEAD
@end example


「origin」リモートからの「master」ブランチのマージを説明するログメッセージを出力します。

@noindent

@chapheading SEE ALSO

git-merge(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-for-each-ref,,,Top
@chapheading Name

git-for-each-ref — 各refに関する情報を出力します

@noindent

@chapheading Synopsis

@display
git for-each-ref [--count=<count>] [--shell|--perl|--python|--tcl]
                   [(--sort=<key>)…] [--format=<format>] [<pattern>…]
                   [--points-at=<object>]
                   [--merged[=<object>]] [--no-merged[=<object>]]
                   [--contains[=<object>]] [--no-contains[=<object>]]
@end display


@noindent

@chapheading DESCRIPTION

@samp{<pattern>} に一致するすべてのrefを繰り返し、指定された @samp{<key>} の組に従って並べ替えた後、指定の @samp{<format>}
に従って表示します。 @samp{<count>} が指定されている場合は、その数のrefを表示した後で停止します。 @samp{<format>}
のプレースホルダで差し込みされる値は、オプションで、指定のホストプログラム言語の文字列リテラルとなるようクォートでき、そのホストプログラム言語で直接評価できます。

@noindent

@chapheading OPTIONS

@table @asis

@item  <pattern>… 
1つ以上のパターンが指定されている場合、少なくとも1つのパターンに一致する参照のみが表示されます。fnmatch(3)
を使用するか、文字通り(lietrally)に書くかです。文字通りに書いた場合場合、完全に一致するか、最初からスラッシュ(@samp{/})まで一致するかです。

@item  @samp{--count=<count>} 
デフォルトでは、コマンドは @samp{<pattern>} に一致するすべてのrefを表示します。このオプションは、指定の数のrefを表示した後に停止します。

@item  @samp{--sort=<key>} 
並べ替えるフィールド名。 プレフィックス @samp{-`を使用して、値の降順で並べ替えます。 並べ替えるフィールド名を指定しない場合 `refname}
が使用されます。 @samp{--sort=<key>} オプションは複数回使用できます。その場合、最後のキーが主キー(primary key)になります。

@item  @samp{--format=<format>} 
表示されているrefとそれが指すオブジェクトを @samp{%(fieldname)} によってを差し込みする書式文字列。 @samp{fieldname}
の前にアスタリスク(@samp{*})が付いていて、refがタグオブジェクトを指している場合は、(タグオブジェクトのフィールドではなく)タグオブジェクトが参照するオブジェクトのフィールドの値を使用します。このオプションを指定しない場合、
@samp{<format>} はデフォルトで @samp{%(objectname) SPC %(objecttype) TAB %(refname)} です。また
@samp{%%} は @samp{%} を差し込み、 @samp{%xx} (@samp{xx} は16進数)は16進コード @samp{xx} の文字を差し込みます。 たとえば、@samp{%00} は
@samp{\0} (NUL) を、 @samp{%09} は @samp{\t} (TAB) を、 @samp{%0a}  は @samp{\n} (LF) を、それぞれ差し込みます。

@item  @samp{--color[=<when>]} 
@samp{--format} オプションで指定された色を尊重します。 @samp{<when>} フィールドは @samp{always} または @samp{never} または
@samp{auto} のいずれかでなければなりません(@samp{<when>} がない場合は、 @samp{always} が指定されたかのように動作します)。

@item  @samp{--shell} 
@itemx  @samp{--perl} 
@itemx  @samp{--python} 
@itemx  @samp{--tcl} 
指定した場合、  @samp{%(fieldname)}
プレースホルダーを置き換える文字列は、指定のホストプログラム言語に適した文字列リテラルとしてクォートします。これは、直接「評価」(eval)できるスクリプトレットを作成することを目的としています。

@item  @samp{--points-at=<object>} 
指定のオブジェクトを指すrefのみをリストします。

@item  @samp{--merged[=<object>]} 
指定のコミット(指定されていない場合はHEAD)から先端に到達できるrefのみをリストします。

@item  @samp{--no-merged[=<object>]} 
指定のコミット(指定されていない場合はHEAD)から先端に到達できないrefのみをリストします。

@item  @samp{--contains[=<object>]} 
指定のコミット(指定されていない場合はHEAD)を含むrefのみをリストします。

@item  @samp{--no-contains[=<object>]} 
指定のコミット(指定されていない場合はHEAD)を含まないrefのみをリストします。

@item  @samp{--ignore-case} 
refの並べ替え(sort)とフィルタリングでは英大文字小文字を区別しません。
@end table

@noindent

@chapheading FIELD NAMES

参照オブジェクトの構造化フィールドのさまざまな値を使用して、結果の出力に差し込みしたり、ソートキーとして使用したりできます。

すべてのオブジェクトで、以下の名前を使用できます:

@table @asis

@item  refname 
refの名前( $GIT_DIR/ の後の部分)。refのあいまいでない短い名前の場合は、 @samp{:short} を追加します。オプション
core.warnAmbiguousRefs は、厳密な省略形モードを選択するために使用されます。 @samp{lstrip=<N>}
(@samp{rstrip=<N>}) が追加された場合、refnameの前(後ろ)からスラッシュ(@samp{/})で区切られたパスの部分を`<N>` 個削除します(例:
@samp{%(refname:lstrip=2)} は @samp{refs/tags/foo} を @samp{foo} に変換し、 @samp{%(refname:rstrip=2)}
は @samp{refs/tags/foo} を @samp{refs} に変換します。 @samp{<N>}
が負の数の場合、指定された端から必要な数のパスコンポーネントを削除して、 @samp{-<N>} パス部分を残します(たとえば、
@samp{%(refname:lstrip=-2)} は @samp{refs/tags/foo} を @samp{tags/foo} に変換し、
@samp{%(refname:rstrip=-1)} は @samp{refs/tags/foo} を @samp{refs}
に変換します)。refに十分な数のパス部品がない場合、正の <N>
でストリッピングすると結果は空の文字列になり、負の<N>でストリッピングすると完全なrefnameになります。どちらもエラーではありません。

@samp{strip} は @samp{lstrip} の同義語として使用できます。

@item  objecttype 
オブジェクトのタイプ( @samp{blob} 、@samp{tree} 、 @samp{commit} 、@samp{tag} )。

@item  objectsize 
オブジェクトのサイズ(@samp{git cat-file -s} がレポートするものと同じです)。 @samp{:disk}
を追加して、オブジェクトがディスク上で占めるサイズをバイト単位で取得できます。以下の「CAVEATS」(注意事項)セクションのディスク上のサイズに関する注記を参照してください。

@item  objectname 
オブジェクト名(別名SHA-1)。オブジェクト名のあいまいでない省略形については、 @samp{:short}
を追加してください。目的の長さのオブジェクト名の省略形については、  @samp{:short=<length>} を追加します。ここで、最小の長さは
MINIMUM_ABBREV です。一意のオブジェクト名を確保するために、指定の長さを超える場合があります。

@item  deltabase 
デルタとして保存されている場合、これは指定されたオブジェクトのデルタベースのオブジェクト名に展開されます。それ以外の場合は、ヌルオブジェクト名(すべてゼロ)に展開されます。

@item  upstream 
表示されたrefから「上流」(upstream)と見なすことができるローカル参照の名前。 上記の @samp{refname} と同じように、 @samp{:short}
や @samp{:lstrip} や @samp{:rstrip} を尊重します。さらに、 @samp{:track} は @samp{[ahead N, behind M]} を表示し、
@samp{:trackshort} は @samp{>} (ahead) または @samp{<} (behind) または "<>" (ahead and behind) または
"=" (in sync) という簡潔なバージョンを表示します。 @samp{:track} は不明なアップストリーム参照が検出されるたびに @samp{[gone]}
も出力します。 @samp{:track,nobracket} を追加すると角かっこ(@samp{[} と @samp{]} )無しで追跡情報を表示します（つまり、 @samp{ahead
N, behind M} )。

リモート追跡ブランチの @samp{%(upstream)} と @samp{%(upstream:remotename)} と
@samp{%(upstream:remoteref)`は、それぞれリモートの名前と追跡されたリモートrefの名前を参照します。つまり、 refspec
`%(upstream:remoteref):%(upstream)} を使用して @samp{%(upstream:remotename)}
からフェッチすることにより、リモートト追跡ブランチを明示的かつ個別に更新できます。

refに追跡情報が関連付けられていない場合、効果はありません。 @samp{nobracket}
以外のすべてのオプションは相互に排他的ですが、一緒に使用する場合は最後のオプションが選択されます。

@item  push 
表示されたrefの @samp{@@@{push@}} の場所を表すローカルrefの名前。 @samp{upstream} と同様に @samp{:short} ・ @samp{:lstrip} ・
@samp{:rstrip} ・ @samp{:track} ・ @samp{:trackshort} ・ @samp{:remotename} ・ @samp{:remoteref}
オプションを尊重します。 @samp{@@@{push@}} refが設定されていない場合、空の文字列を生成します。

@item  HEAD 
HEADが現在のref (チェックアウトされたブランチ)と一致する場合は @samp{*} 、それ以外の場合は ' ' 。

@item  color 
出力色を変更します。 その後に @samp{:<colorname>} が続きます。色の名前は、 git-config(1)
の「CONFIGURATION FILE」セクションの「Values」で説明されています。 たとえば、 @samp{%(color:bold red)} です。

@item  align 
コンテンツを %(align:…) から %(end) の間で左揃え、中央揃え、または右揃えにします。 @samp{align:} の後には、
@samp{width=<width>} と @samp{position=<position>} がコンマ(@samp{,})で区切られた任意の順序で続きます。ここで、
@samp{<position>} は left または right または middle のいずれかで、@samp{<position>} の デフォルトは left で
@samp{<width>} のデフォルトは配置されたコンテンツの全長です。 簡潔にするために、 @samp{width=} および/または @samp{position=}
プレフィックスを省略して、代わりに裸の <width> および <position> を使用することができます。 たとえば、
@samp{%(align:<width>,<position>)} です。 コンテンツの長さがwidthよりも大きい場合、位置合わせは実行されません。
@samp{--quote} とともに使用すると、 %(align:…) から %(end)
の間のすべてがクォートされまれますが、ネストされている場合は、最上位レベルのみがクォートされます。

@item  if 
%(if) … %(then) … %(end) または %(if) … %(then) … %(else) … %(end) として使用されます。
%(if) の後に値または文字列リテラルを持つアトムがある場合は、 %(then) の後のすべてが出力されます。そうでない場合、 %(else)
アトムが使用されている場合は、 %(else) の後のすべてが出力されます。 %(then) の前の文字列を評価するときはスペースを無視します。これは、
@samp{*} または ` ` のいずれかを出力する %(HEAD) アトムを使用し、 HEAD ref にのみ if 条件を適用する場合に役立ちます。
@samp{:equals=<string>} または @samp{:notequals=<string>} を追加して、 %(if:…) アトムと %(then)
アトムの間の値を指定された文字列と比較します。(訳注:つまり、 %(if) から %(then) の間がconditionである)

@item  symref 
与えられたシンボリックrefが参照するref。シンボリックrefでない場合、何も出力されません。上記の @samp{refname} と同じ方法で、
@samp{:short} と @samp{:lstrip} と @samp{:rstrip} オプションを尊重します。

@item  worktreepath 
リンクされたワークツリー(linked
worktree)でチェックアウトされている場合、refがチェックアウトされているワークツリーへの絶対パス。それ以外の場合は空文字列です。
@end table

上記に加えて、commitとtagオブジェクトの場合、ヘッダーフィールド名(@samp{tree} と @samp{parent} と @samp{object} と @samp{type}
と @samp{tag})を使用して、ヘッダーフィールドの値を指定できます。 フィールド @samp{tree} と @samp{parent} は、 @samp{objectname}
と同じように、修飾子 @samp{:short} や @samp{:short=<length>} とともに使用することもできます。

commitオブジェクトとtagオブジェクトの場合、特別な @samp{creatordate} フィールドと @samp{creator}
フィールドは、オブジェクトタイプに応じて、 @samp{committer} または @samp{tagger}
フィールドの適切な日付またはname-email-dateタプルに対応します。これらは、注釈付きタグと軽量タグの組み合わせでの作業を目的としています。

name-email-dateタプルを値として持つフィールド(@samp{author} と @samp{committer} と
@samp{tagger})には、名前付きコンポーネントを抽出するために @samp{name} と @samp{email} と @samp{date}
の接尾辞を付けることができます。メールフィールド(@samp{authoremail} と @samp{committeremail} と
@samp{taggeremail})の場合、 @samp{:trim} を追加すると山かっこ(@samp{<}, @samp{>})なしでメールを取得し、 @samp{:localpart}
を追加すると電子メールアドレスをトリミングして @samp{@@} 記号の前の部分を取得できます。

オブジェクトの生データは @samp{raw} です。

@table @asis

@item  raw:size 
オブジェクトの生データサイズ。
@end table

注意: @samp{--format=%(raw)} は、 @samp{--python} や @samp{--shell} や @samp{--tcl}
と一緒に使用できないことに注意してください。これらのプログラム言語は、文字列変数タイプで任意のバイナリデータをサポートしていない可能性があるためです。

コミットまたはタグオブジェクト内のメッセージは @samp{contents} であり、そこから @samp{contents:<part>}
を使用して以下によりさまざまな部分を抽出できます:

@table @asis

@item  contents:size 
コミットメッセージまたはタグメッセージのバイト単位のサイズ。

@item  contents:subject 
メッセージの最初の段落(通常は1行)は、コミットまたはタグメッセージの「件名」(subject)と見なされます。 @samp{contents：subject}
の代わりに、フィールド @samp{subject} を使用して同じ結果を取得することもできます。 @samp{subject} に追加できる @samp{:sanitize}
は、件名行をファイル名に適した形にします。

@item  contents:body 
コミットメッセージまたはタグメッセージの「件名」に続く残りの部分。

@item  contents:signature 
タグのオプションのGPG署名。

@item  contents:lines=N 
メッセージの最初の N行。
@end table

加えて、 git-interpret-trailers(1) によって解釈されるトレーラーは、 @samp{trailers[:options]}
として(または履歴エイリアス @samp{contents:trailers[:options]} を使用して)取得されます。有効な [:option]
値については、 git-log(1) の @samp{trailers} セクションを参照してください。

並べ替えの目的のため、数値のフィールドは数値順で並べ替えられます(@samp{objectsize} 、@samp{authordate} 、
@samp{committerdate} 、@samp{creatordate} 、
@samp{taggerdate})。他のすべてのフィールドは、バイト値の順序で並べ替えられます。

バージョンで並べ替えるオプションもあります。これは、フィールド名 @samp{version:refname} またはそのエイリアス @samp{v:refname}
を使用して行うことができます。

いずれの場合も、refによって参照されるオブジェクトに適用できないフィールドを参照するフィールド名はエラーを引き起こしません。代わりに空文字列を返します。

日付タイプフィールドの特殊なケースとして、 @samp{:}
の後に日付フォーマット名を追加して日付のフォーマットを指定できます(git-rev-list(1) の @samp{--date}
オプションのが取る値を参照してください)。

%(align) や %(if) などの一部のアトムには、常に対応する %(end) が必要です。 %(align) や %(if)
などの一部のアトムを「開始アトム」(opening atoms)と呼び、 %($open) と表記することもあります。

スクリプト言語固有のクォートが有効な場合、トップレベルの開始アトムとそれに対応する %(end)
の間のすべてが、トップレベル開始アトムのセマンティクスに従って評価され、そのトップレベルからの結果のみがクォートされます。

@noindent

@chapheading EXAMPLES

フォーマットされたテキストを直接生成する例。 直近の3つのタグ付きコミットを表示します:

@example
#!/bin/sh

git for-each-ref --count=3 --sort='-*authordate' \
--format='From: %(*authorname) %(*authoremail)
Subject: %(*subject)
Date: %(*authordate)
Ref: %(*refname)

%(*body)
' 'refs/tags'
@end example


出力でのshell evalの使用を示す簡単な例で、@samp{--shell} の使用を示しています。 すべてのheadのプレフィックスを一覧表示します:

@example
#!/bin/sh

git for-each-ref --shell --format="ref=%(refname)" refs/heads | \
while read entry
do
        eval "$entry"
        echo `dirname $ref`
done
@end example


タグに関するもう少し手の込んだレポートで、スクリプト全体のフォーマットである可能性があることを示しています:

@example
#!/bin/sh

fmt='
        r=%(refname)
        t=%(*objecttype)
        T=$@{r#refs/tags/@}

        o=%(*objectname)
        n=%(*authorname)
        e=%(*authoremail)
        s=%(*subject)
        d=%(*authordate)
        b=%(*body)

        kind=Tag
        if test "z$t" = z
        then
                # could be a lightweight tag
                t=%(objecttype)
                kind="Lightweight tag"
                o=%(objectname)
                n=%(authorname)
                e=%(authoremail)
                s=%(subject)
                d=%(authordate)
                b=%(body)
        fi
        echo "$kind $T points at a $t object $o"
        if test "z$t" = zcommit
        then
                echo "The commit was authored by $n $e
at $d, and titled

    $s

Its message reads as:
"
                echo "$b" | sed -e "s/^/    /"
                echo
        fi
'

eval=`git for-each-ref --shell --format="$fmt" \
        --sort='*objecttype' \
        --sort=-taggerdate \
        refs/tags`
eval "$eval"
@end example


%(if) … %(then) … %(else) … %(end) の使用法を示す例。 これにより、現在のブランチの前にアスタリスクが付けられます。

@example
git for-each-ref --format="%(if)%(HEAD)%(then)* %(else)  %(end)%(refname:short)" refs/heads/
@end example


%(if) … %(then) … %(end) の使用法を示す例。 存在する場合、これは作者名を出力します。

@example
git for-each-ref --format="%(refname)%(if)%(authorname)%(then) Authored by: %(authorname)%(end)"
@end example


@noindent

@chapheading CAVEATS

注意:
ディスク上のオブジェクトのサイズは正確に報告されますが、どのrefまたはオブジェクトがディスクの使用に関与しているかについて結論を出す際には注意が必要です。パックされた非デルタオブジェクトのサイズは、それに対してデルタするオブジェクトのサイズよりもはるかに大きい場合がありますが、ベースとデルタのオブジェクトの選択は任意であり、再パック中に変更される可能性があります。

注意:
オブジェクトの複数のコピーがオブジェクトデータベースに存在する可能性があることにも注意してください。この場合、どのコピーのサイズまたはデルタベースが報告されるかは未定義です。

@noindent

@chapheading NOTES

複数の @samp{--contains} フィルターと @samp{--no-contains} フィルターを組み合わせる場合、少なくとも1つの @samp{--contains}
コミットを含み、 @samp{--no-contains} コミットを含まない参照のみが表示されます。

複数の @samp{--merged} フィルターと @samp{--no-merged} フィルターを組み合わせると、少なくとも1つの @samp{--merged}
コミットから到達可能で、 @samp{--no-merged} コミットのいずれからも到達できない参照のみが表示されます。

@noindent

@chapheading SEE ALSO

git-show-ref(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-for-each-repo,,,Top
@chapheading Name

git-for-each-repo — リポジトリのリストでGitコマンドを実行します

@noindent

@chapheading Synopsis

@display
git for-each-repo --config=<config> [--] <arguments>
@end display


@noindent

@chapheading DESCRIPTION

リポジトリのリストでGitコマンドを実行します。既知のオプションや @samp{--} の、後ろの引数は、Gitサブプロセスの引数として使用されます。

！！このコマンドは実験的なものです！！動作が変わる可能性があります！！

たとえば、以下を使用して、 @samp{maintenance.repo} 構成変数に格納されているリポジトリのリストのそれぞれに対して maintenance
を実行できます。

@example
git for-each-repo --config=maintenance.repo maintenance run
@end example


これにより、複数値の構成変数である @samp{maintenance.repo} の各値である @samp{<repo>} ごとに @samp{git -C <repo>
maintenance run} が実行されます。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--config=<config>} 
指定された構成変数を、絶対パス名を格納する複数値リストとして使用します。そのパスのリストを繰り返して(iterate)、指定された引数を実行します。

これらの構成値は、利用可能な場合、システム、グローバル、およびローカルのGit構成からロードされます。 @samp{git for-each-repo}
がGitリポジトリではないディレクトリで実行される場合、システムとグローバル設定のみが使用されます。
@end table

@noindent

@chapheading SUBPROCESS BEHAVIOR

@samp{git -C <repo> <arguments>} サブプロセスがゼロ以外の終了コードを返す場合、 @samp{git for-each-repo}
プロセスはそれ以上のサブプロセスを実行せずにその終了コードを返します。

各 @samp{git -C <repo> <arguments>} サブプロセスは、標準のファイルデスクリプタ @samp{stdin} と @samp{stdout} と
@samp{stderr} を継承します。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-format-patch,,,Top
@chapheading Name

git-format-patch — 電子メール送信用のパッチを準備します

@noindent

@chapheading Synopsis

@display
git format-patch [-k] [(-o|--output-directory) <dir> | --stdout]
                   [--no-thread | --thread[=<style>]]
                   [(--attach|--inline)[=<boundary>] | --no-attach]
                   [-s | --signoff]
                   [--signature=<signature> | --no-signature]
                   [--signature-file=<file>]
                   [-n | --numbered | -N | --no-numbered]
                   [--start-number <n>] [--numbered-files]
                   [--in-reply-to=<message id>] [--suffix=.<sfx>]
                   [--ignore-if-in-upstream]
                   [--cover-from-description=<mode>]
                   [--rfc] [--subject-prefix=<subject prefix>]
                   [(--reroll-count|-v) <n>]
                   [--to=<email>] [--cc=<email>]
                   [--[no-]cover-letter] [--quiet]
                   [--[no-]encode-email-headers]
                   [--no-notes | --notes[=<ref>]]
                   [--interdiff=<previous>]
                   [--range-diff=<previous> [--creation-factor=<percent>]]
                   [--filename-max-length=<n>]
                   [--progress]
                   [<common diff options>]
                   [ <since> | <revision range> ]
@end display


@noindent

@chapheading DESCRIPTION

UNIXメールボックスに似た形式で、コミットごとに1つの「メッセージ」に「パッチ」を含む各非マージコミットを準備します。このコマンドの出力は、電子メールの送信や「git
am」での使用に便利です。

コマンドによって生成される「メッセージ」は、以下の3つの部分で構成されます:

@itemize 

@item
短いメタデータヘッダー。「file(1)」などのプログラムが、ファイルがこのコマンドからの出力であることを認識できるように「From
<commit>」と、固定の日付スタンプ「Mon Sep 17 00:00:00 2001」で始まり、 作者ID(author
identity)や作者の日付(author date)や変更のタイトル(title of the
change)(コミットログメッセージの最初の段落から取得)が記入されたフィールドがあります。

@item
コミットログメッセージの2番目以降の段落。

@item
コミットとその親の間の「diff-p—stat」出力(linkgit: git-diff[1] 参照)である「パッチ」。
@end itemize

ログメッセージとパッチは、3本のダッシュ(@samp{---})で区切られています。

操作するコミットを指定する方法は2つあります。

@enumerate 

@item
A single commit, <since>, specifies that the commits leading to the tip of
the current branch that are not in the history that leads to the <since> to
be output.

@item
Generic <revision range> expression (see "SPECIFYING REVISIONS" section in
gitrevisions(7)) means the commits in the specified range.
@end enumerate

The first rule takes precedence in the case of a single <commit>.  To apply
the second rule, i.e., format everything since the beginning of history up
until <commit>, use the @samp{--root} option: @samp{git format-patch --root
<commit>}.  If you want to format only <commit> itself, you can do this with
@samp{git format-patch -1 <commit>}.

By default, each output file is numbered sequentially from 1, and uses the
first line of the commit message (massaged for pathname safety) as the
filename. With the @samp{--numbered-files} option, the output file names will
only be numbers, without the first line of the commit appended.  The names
of the output files are printed to standard output, unless the @samp{--stdout}
option is specified.

If @samp{-o} is specified, output files are created in <dir>.  Otherwise they are
created in the current working directory. The default path can be set with
the @samp{format.outputDirectory} configuration option.  The @samp{-o} option takes
precedence over @samp{format.outputDirectory}.  To store patches in the current
working directory even when @samp{format.outputDirectory} points elsewhere, use
@samp{-o .}. All directory components will be created.

By default, the subject of a single patch is "[PATCH] " followed by the
concatenation of lines from the commit message up to the first blank line
(see the DISCUSSION section of git-commit(1)).

When multiple patches are output, the subject prefix will instead be "[PATCH
n/m] ".  To force 1/1 to be added for a single patch, use @samp{-n}.  To omit
patch numbers from the subject, use @samp{-N}.

If given @samp{--thread}, @samp{git-format-patch} will generate @samp{In-Reply-To} and
@samp{References} headers to make the second and subsequent patch mails appear as
replies to the first mail; this also generates a @samp{Message-Id} header to
reference.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-p} 
@itemx  @samp{--no-stat} 
diffstatsなしでプレーンパッチを生成します。

@item  @samp{-U<n>} 
@itemx  @samp{--unified=<n>} 
通常の3行ではなく、<n> 行の内容でdiffを生成します。

@item  @samp{--output=<file>} 
stdout ではなく指定のファイルに出力します。

@item  @samp{--output-indicator-new=<char>} 
@itemx  @samp{--output-indicator-old=<char>} 
@itemx  @samp{--output-indicator-context=<char>} 
生成されたパッチの新しい行、古い行、またはコンテキスト行を示すために使用される文字を指定します。 通常、それらはそれぞれ @emph{+} 、 @emph{-} 、 ' '
です。

@item  @samp{--indent-heuristic} 
diffハンクの境界をずらす(shift)ヒューリスティックを有効にして、パッチを読みやすくします。 これがデフォルトです。

@item  @samp{--no-indent-heuristic} 
インデントヒューリスティック(indent heuristic)を無効にします。

@item  @samp{--minimal} 
より多くの時間を費やして、可能な限り最小のdiffが生成されるようにします。

@item  @samp{--patience} 
"patience diff" アルゴリズムを使用してdiffを生成します。

@item  @samp{--histogram} 
"histogram diff" アルゴリズムを使用してdiffを生成します。

@item  @samp{--anchored=<text>} 
"anchored diff" アルゴリズムを使用してdiffを生成します。

このオプションは複数回指定できます。

行がソースと宛先の両方に存在し、1回だけ存在し、このテキストで始まる場合、このアルゴリズムは、その行が出力に削除または追加として表示されないようにします。内部で
"patience diff" アルゴリズムを使用します。

@item  @samp{--diff-algorithm=@{patience|minimal|histogram|myers@}} 
diffアルゴリズムを選択します。その派生(variants)は以下のとおりです:

@table @asis

@item  @samp{default}, @samp{myers} 
基本的な貪欲な差分アルゴリズム(greedy diff algorithm)。現在、これがデフォルトです。

@item  @samp{minimal} 
より多くの時間を費やして、可能な限り最小のdiffが生成されるようにします。

@item  @samp{patience} 
パッチを生成する時に "patience diff" アルゴリズムを使います。

@item  @samp{histogram} 
このアルゴリズムは、忍耐アルゴリズム(patience algorithm)を拡張して、「発生率の低い共通要素をサポート」(support
low-occurrence common elements)します。
@end table

たとえば、 あなたが @samp{diff.algorithm}
変数をデフォルト以外の値に設定した上で、それでもデフォルト値を使用する場合は、@samp{--diff-algorithm=default}
オプションを使用する必要があります。

@item  @samp{--stat[=<width>[,<name-width>[,<count>]]]} 
diffstatを生成します。
デフォルトでは、必要なだけのスペースがファイル名部分に使用され、残りはグラフ部分に使用されます。最大幅はデフォルトで端末幅、または端末に接続されていない場合は80桁であり、
@samp{<width>} で上書きできます。ファイル名部分の幅は、コンマの後に別の幅 @samp{<name-width>}
を指定することで制限できます。グラフ部分の幅は、 @samp{--stat-graph-width=<width>}
(統計グラフを生成するすべてのコマンドに影響します)を使用するか、 @samp{diff.statGraphWidth=<width>} ( @samp{git
format-patch} に影響しません)を設定することによって制限できます。3番目のパラメータ @samp{<count>}
を指定することにより、出力を最初の @samp{<count>} 行に制限し、それに @samp{...} が続く形にできます。

これらのパラメータは、 @samp{--stat-width=<width>} と @samp{--stat-name-width=<name-width>} と
@samp{--stat-count=<count>} を使用して個別に設定することもできます。

@item  @samp{--compact-summary} 
ファイルの作成や削除( "new" または "gone" 。オプションでシンボリックリンクの場合は "+l"
)、diffstatのモード変更(実行可能ビットを追加または削除する場合は、それぞれ "+x" または "-x"
)など、拡張ヘッダー情報の要約を出力します。情報はファイル名部分とグラフ部分の間に置かれます。本機能は @samp{--stat} の機能を含んでいます。

@item  @samp{--numstat} 
@samp{--stat`に似ていますが、プログラムで処理しやすい(machine
friendly)ように、追加および削除された行数を10進表記とパス名で省略形なしで表示します。バイナリファイルの場合、 `0 0} の代わりに2つの
@samp{-} を出力します。

@item  @samp{--shortstat} 
変更されたファイルの総数と、追加および削除された行の数を含む @samp{--stat} 形式の最後の行のみを出力します。

@item  @samp{-X[<param1,param2,...>]} 
@itemx  @samp{--dirstat[=<param1,param2,...>]} 
各サブディレクトリの相対的な変更量の分布を出力します。 @samp{--dirstat}
の動作は、パラメータのコンマ区切りリストを渡すことでカスタマイズできます。デフォルトは、 @samp{diff.dirstat}
構成変数によって制御されます(git-config(1) 参照)。以下のパラメータを使用できます:

@table @asis

@item  @samp{changes} 
ソースから削除された、または宛先に追加された行をカウントして、dirstat数を計算します。これは、ファイル内の純粋なコード移動の量を無視します。つまり、ファイル内の行の再配置は、他の変更ほどカウントされません。これは、パラメーターが指定されていない場合のデフォルトの動作です。

@item  @samp{lines} 
通常の行ベースのdiff分析を実行し、削除/追加された行数を合計して、dirstat数を計算します。
(バイナリファイルの場合、バイナリファイルには行の概念がないため、代わりに64バイトのチャンクをカウントします)。 これは @samp{changes}
動作よりも高価な @samp{--dirstat} 動作ですが、他の変更と同じようにファイル内の再配置された行をカウントします。結果の出力は、他の
@samp{--*stat} オプションから得られるものと一致しています。

@item  @samp{files} 
変更されたファイルの数を数えて、dirstat数を計算します。変更された各ファイルは、dirstat分析で等しくカウントされます。これは、ファイルの内容をまったく調べる必要がないため、計算コストが最もかからない
@samp{--dirstat} の動作です。

@item  @samp{cumulative} 
親ディレクトリの子ディレクトリの変更も同様にカウントします。 @samp{cumulative}(累積的)
を使用する場合、報告されるパーセンテージの合計が100%を超える場合があることに注意してください。デフォルトの(非累積的な)動作は、@samp{noncumulative}
パラメーターで指定できます。

@item  <limit> 
整数パラメーターは、カットオフパーセント(デフォルトでは3%)を指定します。指定の割合より少ないディレクトリは、出力に表示されません。
@end table

例: 変更されたファイルの総数の10%未満のディレクトリを無視し、親ディレクトリに子ディレクトリの数を累積しながら、変更されたファイルをカウント:
@samp{--dirstat=files,10,cumulative}

@item  @samp{--cumulative} 
@samp{--dirstat=cumulative} と同義語

@item  @samp{--dirstat-by-file[=<param1,param2>...]} 
@samp{--dirstat=files,param1,param2...} と同義語

@item  @samp{--summary} 
作成、名前変更、モード変更などの拡張ヘッダー情報の短い要約(condensed summary)を出力します。

@item  @samp{--no-renames} 
構成ファイルにデフォルトで指定されている場合でも、名前変更の検出をオフにします。

@item  @samp{--[no-]rename-empty} 
名前変更ソースとして空のブロブを使用するかどうか。

@item  @samp{--full-index} 
パッチ形式の出力を生成するときは、最初の一握りの文字(first handful of
characters)の代わりに、「インデックス」行にイメージ前およびイメージ後の完全ブロブオブジェクト名を表示します。

@item  @samp{--binary} 
@samp{--full-index} に加えて、 @samp{git-apply} で適用できるバイナリ差分を出力します。

@item  @samp{--abbrev[=<n>]} 
完全な40バイトの16進オブジェクト名をdiff-raw形式の出力とdiff-treeヘッダー行に表示する代わりに、オブジェクトを一意に参照する、少なくとも
@emph{<n>} 桁の16進数の長さの最短のプレフィックスを表示します。diffパッチ出力形式では、 @samp{--full-index} が優先されます。つまり、
@samp{--full-index} が指定されている場合、 @samp{--abbrev} に関係なく、完全なブロブ名が表示されます。デフォルト以外の桁数は、
@samp{--abbrev=<n>} で指定できます。

@item  @samp{-B[<n>][/<m>]} 
@itemx  @samp{--break-rewrites[=[<n>][/<m>]]} 
完全な書き換えの変更を削除と作成のペアに分割します。これには以下の2つの目的があります:

これは、ファイルの完全な書き換えに相当する変更が、コンテキストとしてテキストで一致する非常に少数の行と混合された一連の削除と挿入としてではなく、古いものすべての単一の削除とそれに続く
すべての新しいものを1回挿入し、数値 @samp{m} が -B オプションのこの側面を制御します(デフォルトは60%)。 @samp{-B/70%}
は、Gitがそれを完全な書き換えと見なすために、元の30%未満が結果に残る必要があることを指定します(つまり、結果のパッチは、コンテキスト行と混合された一連の削除と挿入になります)。

-M と一緒に使用すると、完全に書き換えられたファイルも名前変更のソースと見なされ(通常、 -M
は、消えたファイルのみを名前変更のソースと見なします)、数 @samp{n} が -Bオプションのこの側面を制御します(デフォルトは50%)。 @samp{-B20%}
は、ファイルのサイズの20%以上と比較して、追加および削除を伴う変更が、別のファイルへの名前変更の可能なソースとして取得される資格があることを指定します。

@item  @samp{-M[<n>]} 
@itemx  @samp{--find-renames[=<n>]} 
名前の変更(renames)を検知する。
@samp{n} が指定されている場合、それは類似性インデックスのしきい値です
(つまり、ファイルのサイズと比較した追加/削除の量)。
たとえば、 @samp{-M90%} は、ファイルの90%以上が変更されていない場合、
Gitが削除/追加のペアを名前変更と見なす必要があることを意味します。
@samp{%} 記号がない場合、数値は小数として読み取られ、その前に小数点が付きます。
つまり、 @samp{-M5} は0.5になるため、@samp{-M50%} と同じになります。
同様に、 @samp{-M05} は @samp{-M5%} と同じです。
検出を正確な名前変更に制限するには、 @samp{-M100%} を使用します。
デフォルトの類似性インデックスは50%です。

@item  @samp{-C[<n>]} 
@itemx  @samp{--find-copies[=<n>]} 
名前と同様コピーを検出します。 @samp{--find-copies-harder} @samp{も参照してください。 `n} を指定すると、 @samp{-M<n>}
と同じ意味になります。

@item  @samp{--find-copies-harder} 
パフォーマンス上の理由から、デフォルトでは、 @samp{-C}
オプションは、コピーの元のファイルが同じ変更組(changeset)で変更された場合にのみコピーを検索します。このフラグにより、コマンドは変更されていないファイルをコピー元の候補として検査します。これは大規模なプロジェクトでは非常にコストのかかる操作であるため、注意して使用してください。
複数の @samp{-C} オプションを指定しても同じ効果があります。

@item  @samp{-D} 
@itemx  @samp{--irreversible-delete} 
削除するプレイメージ(preimage)を省略します。つまり、ヘッダーのみを出力し、プレイメージと @samp{/dev/null}
の差分は出力しません。結果のパッチは、 @samp{patch} または @samp{git apply}
で適用されることを意図していません。これは、変更後にテキストを確認することに集中したい人のためだけのものです。さらに、出力には明らかに、そのようなパッチを手動でも逆に適用するのに十分な情報が不足しているため、オプションの名前が付けられています。

@samp{-B} と併用する場合は、削除/作成ペアの削除部分のプリイメージ(preimage)も省略してください。

@item  @samp{-l<num>} 
@samp{-M} および @samp{-C}
オプションには、名前変更/コピーのサブセットを安価に検出できるいくつかの準備手順が含まれ、その後に、残りのすべてのペアになっていない宛先をすべての関連ソースと比較する徹底的なフォールバック部分が続きます。(名前の変更の場合、残りのペアになっていないソースのみが関係します。コピーの場合、すべての元のソースが関係します)。Nのソースと宛先の場合、この徹底的なチェックのコストは
O(N^2)
です。このオプションは、関係するソース/宛先ファイルの数が指定された数を超えた場合に、名前変更/コピー検出の完全な部分が実行されないようにします。デフォルトは
diff.renameLimit です。 値0は無制限として扱われることに注意してください。

@item  @samp{-O<orderfile>} 
ファイルが出力に表示される順序を制御します。これは @samp{diff.orderFile}
構成変数をオーバーライドします(git-config(1) 参照)。 @samp{diff.orderFile} をキャンセルするには、
@samp{-O/dev/null} を使用します。

出力順序は、 <orderfile>
内のglobパターンの順序によって決定されます。最初のパターンに一致するパス名を持つすべてのファイルが最初に出力され、2番目のパターンに一致する(ただし最初のパターンには一致しない)パス名を持つすべてのファイルが次に出力されます。パス名がどのパターンとも一致しないすべてのファイルは、ファイルの最後に暗黙のすべて一致パターンがあるかのように、最後に出力されます。複数のパス名のランクが同じである場合(同じパターンに一致するが、以前のパターンには一致しない)、相互の出力順序は通常の順序です。

<orderfile> は以下のとおりパースされます:

@itemize 

@item
空白行は無視されるため、読みやすくするための区切りとして使用できます。

@item
ハッシュ ("@samp{#}") で始まる行は無視されるため、コメントに使用できます。
パターンがハッシュで始まる場合は、パターンの先頭にバックスラッシュ(訳注:日本では環境により円記号)("@samp{\}") を追加します。

@item
他の各行には、単一のパターンが含まれています。
@end itemize

パターンは、 FNM_PATHNAME フラグなしで fnmatch(3)
に使用されるパターンと同じ構文とセマンティクスを持ちますが、最終的なパス名コンポーネントをいくつも削除するとパターンと一致する場合、パス名もパターンと一致する点が異なります。
たとえば、パターン "@samp{foo*bar}" は、 "@samp{fooasdfbar}" および "@samp{foo/bar/baz/asdf}" と一致しますが、
"@samp{foobarx}" とは一致しません。

@item  @samp{--skip-to=<file>} 
@itemx  @samp{--rotate-to=<file>} 
名前付き <file> の前のファイルを出力から破棄するか(スキップして)、出力の最後に移動させます(ローテーションさせます)。 これらは主に @samp{git
difftool} コマンドを使用するために考案されたものであり、それ以外の場合はあまり役に立たない可能性があります。

@item  @samp{--relative[=<path>]} 
@itemx  @samp{--no-relative} 
プロジェクトのサブディレクトリから実行する場合、このオプションを使用して、ディレクトリ外の変更を除外し、それに関連するパス名を表示するように指示できます。サブディレクトリ(ベアリポジトリなど)にいない場合は、引数として
<path> を指定することで、出力を作成するサブディレクトリに名前を付けることができます。 @samp{--no-relative`は、
`diff.relative} 設定オプションと以前の @samp{--relative} の両方を打ち消すために使用できます。

@item  @samp{-a} 
@itemx  @samp{--text} 
すべてのファイルをテキストとして扱います。

@item  @samp{--ignore-cr-at-eol} 
比較を行うときは、行末のキャリッジリターン(carriage-return)を無視します。

@item  @samp{--ignore-space-at-eol} 
行末(EOL)での空白(whitespace)の変更を無視します。

@item  @samp{-b} 
@itemx  @samp{--ignore-space-change} 
空白(whitespace)の数の変更は無視してください。これは、行末の空白(whitespace)を無視し、1つ以上の空白文字(whitespace
characters)の他のすべてのシーケンスを同等と見なします。

@item  @samp{-w} 
@itemx  @samp{--ignore-all-space} 
行を比較するときは空白を無視します。 これにより、一方の行に空白があり、もう一方の行に空白がない場合でも、違いは無視されます。

@item  @samp{--ignore-blank-lines} 
全て空白の行の変更は無視します。

@item  @samp{-I<regex>} 
@itemx  @samp{--ignore-matching-lines=<regex>} 
すべての行が <regex> にマッチする変更を無視します。このオプションは複数回指定できます。

@item  @samp{--inter-hunk-context=<lines>} 
指定された行数までの差分ハンク間のコンテキストを表示し、それによって互いに近いハンクを融合します。デフォルトは
@samp{diff.interHunkContext} で、設定オプションが設定されていない場合は0です。

@item  @samp{-W} 
@itemx  @samp{--function-context} 
関数全体を各変更のコンテキスト行として表示します。関数名は、 @samp{git diff}
がパッチハンクヘッダーを処理するのと同じ方法で決定されます(gitattributes(5) の @emph{Defining a custom
hunk-header} を参照)。

@item  @samp{--ext-diff} 
外部diffヘルパーの実行を許可します。 gitattributes(5) を使用して外部diffドライバーを設定する場合は、
git-log(1) およびその仲間と一緒にこのオプションを使用する必要があります。

@item  @samp{--no-ext-diff} 
外部diffドライバーを禁止します。

@item  @samp{--textconv} 
@itemx  @samp{--no-textconv} 
バイナリファイルを比較するときに、外部テキスト変換フィルターの実行を許可(または禁止)します。 詳細については、
gitattributes(5)
を参照してください。textconvフィルターは通常、一方向の変換であるため、結果のdiffは人間の消費に適していますが、適用(apply)することはできません。このため、textconvフィルターは、
git-diff(1) および git-log(1) に対してのみデフォルトで有効になりますが、
git-format-patch(1) またはdiff配管コマンドに対しては有効になりません。

@item  @samp{--ignore-submodules[=<when>]} 
diff生成のサブモジュールへの変更を無視します。 <when> は、
none・untracked・dirty・allのいずれかになります。これがデフォルトです。noneを使用すると、追跡されていないファイルまたは変更されたファイルが含まれている場合、またはそのHEADがスーパープロジェクトに記録されているコミットと異なる場合にサブモジュールが変更されたと見なされ、
git-config(1) または gitmodules(5) の
ignoreオプションの設定をオーバーライドするために使用できます。untrackedが使用されている場合、サブモジュールには追跡されていないコンテンツのみが含まれている場合、サブモジュールはダーティとは見なされません(ただし、変更されたコンテンツはスキャンされます)。「dirty」を使用すると、サブモジュールの作業ツリーへのすべての変更が無視され、スーパープロジェクトに格納されているコミットへの変更のみが表示されます(これは1.7.0までの動作でした)。「all」を使用すると、サブモジュールへのすべての変更が非表示になります。

@item  @samp{--src-prefix=<prefix>} 
"a/" の代わりに、与えられたソースプレフィックス(source prefix)を表示します。

@item  @samp{--dst-prefix=<prefix>} 
"b/" の代わりに、指定された宛先プレフィックス(destination prefix)を表示します。

@item  @samp{--no-prefix} 
送信元(source)または宛先(destination)のプレフィックスを表示しません。

@item  @samp{--line-prefix=<prefix>} 
出力のすべての行に追加のプレフィックスを付加します。

@item  @samp{--ita-invisible-in-index} 
デフォルトでは、 "git add -N" によって追加されたエントリは、 "git diff" に既存の空のファイルとして表示され、 "git
diff --cached" に新しいファイルとして表示されます。このオプションを使用すると、エントリは "git diff"
では新しいファイルとして表示され、 "git diff --cached" では存在しません。このオプションは、
@samp{--ita-visible-in-index} で元に戻すことができます。どちらのオプションも実験的なものであり、将来削除される可能性があります。
@end table

これらの一般的なオプションの詳細については、 gitdiffcore(7) も参照してください。

@table @asis

@item  @samp{-<n>} 
Prepare patches from the topmost <n> commits.

@item  @samp{-o <dir>} 
@itemx  @samp{--output-directory <dir>} 
Use <dir> to store the resulting files, instead of the current working
directory.

@item  @samp{-n} 
@itemx  @samp{--numbered} 
Name output in @emph{[PATCH n/m]} format, even with a single patch.

@item  @samp{-N} 
@itemx  @samp{--no-numbered} 
Name output in @emph{[PATCH]} format.

@item  @samp{--start-number <n>} 
Start numbering the patches at <n> instead of 1.

@item  @samp{--numbered-files} 
Output file names will be a simple number sequence without the default first
line of the commit appended.

@item  @samp{-k} 
@itemx  @samp{--keep-subject} 
Do not strip/add @emph{[PATCH]} from the first line of the commit log message.

@item  @samp{-s} 
@itemx  @samp{--signoff} 
Add a @samp{Signed-off-by} trailer to the commit message, using the committer
identity of yourself.  See the signoff option in git-commit(1) for
more information.

@item  @samp{--stdout} 
Print all commits to the standard output in mbox format, instead of creating
a file for each one.

@item  @samp{--attach[=<boundary>]} 
Create multipart/mixed attachment, the first part of which is the commit
message and the patch itself in the second part, with @samp{Content-Disposition:
attachment}.

@item  @samp{--no-attach} 
Disable the creation of an attachment, overriding the configuration setting.

@item  @samp{--inline[=<boundary>]} 
Create multipart/mixed attachment, the first part of which is the commit
message and the patch itself in the second part, with @samp{Content-Disposition:
inline}.

@item  @samp{--thread[=<style>]} 
@itemx  @samp{--no-thread} 
Controls addition of @samp{In-Reply-To} and @samp{References} headers to make the
second and subsequent mails appear as replies to the first.  Also controls
generation of the @samp{Message-Id} header to reference.

オプションの <style> 引数は、 @samp{shallow} または @samp{deep} のいずれかです。
「shallow」スレッドは、すべてのメールをシリーズの先頭に返信します。先頭は、送付状と @samp{--in-reply-to}
と最初のパッチメールからこの順序で選択されます。「deep」スレッドは、すべてのメールを前のメールへの返信にします。

The default is @samp{--no-thread}, unless the @samp{format.thread} configuration is
set.  If @samp{--thread} is specified without a style, it defaults to the style
specified by @samp{format.thread} if any, or else @samp{shallow}.

Beware that the default for @emph{git send-email} is to thread emails itself.  If
you want @samp{git format-patch} to take care of threading, you will want to
ensure that threading is disabled for @samp{git send-email}.

@item  @samp{--in-reply-to=<message id>} 
Make the first mail (or all the mails with @samp{--no-thread}) appear as a reply
to the given <message id>, which avoids breaking threads to provide a new
patch series.

@item  @samp{--ignore-if-in-upstream} 
Do not include a patch that matches a commit in <until>..<since>.  This will
examine all patches reachable from <since> but not from <until> and compare
them with the patches being generated, and any patch that matches is
ignored.

@item  @samp{--cover-from-description=<mode>} 
ブランチの説明を使用して、送付状のどの部分に自動的に入力されるかを制御します。

@samp{<mode>} が @samp{message} または @samp{default}
の場合、送付状の件名にプレースホルダーテキストが入力されます。送付状の本文には、ブランチの説明が入力されます。
これは、構成またはコマンドラインオプションが指定されていない場合のデフォルトモードです。

@samp{<mode>} が @samp{subject}
の場合、ブランチの説明の最初の段落を送付状の件名に入力します。ブランチの説明の残りの部分は、送付状の本文に入力されます。

@samp{<mode>} が @samp{auto} の場合、 ブランチの説明の最初の段落 > 100バイト なら、モードは @samp{message} になり、そうでない場合は
@samp{subject} が使用されます。

@samp{<mode>} が @samp{none} の場合、送付状の件名と本文の両方にプレースホルダーテキストが入力されます。

@item  @samp{--subject-prefix=<subject prefix>} 
件名の標準の @emph{[PATCH]} プレフィックスの代わりに、 @emph{[<subjectprefix>]}
を使用してください。これにより、パッチシリーズの有用な命名が可能になり、 @samp{--numbered} オプションと組み合わせることができます。

@item  @samp{--filename-max-length=<n>} 
標準の64バイトの代わりに、生成された出力ファイル名を約 @emph{<n>} バイトに切り捨て(短すぎると、値が適切な長さに黙って引き上げられます)。
デフォルトは @samp{format.filenameMaxLength} 構成変数の値、または構成されていない場合は64です。

@item  @samp{--rfc} 
@samp{--subject-prefix="RFC PATCH"} のエイリアス。 RFCは「Request For
Comments」を意味します。アプリケーションではなく、議論のために実験的なパッチを送信するときにこれを使用します。

@item  @samp{-v <n>} 
@itemx  @samp{--reroll-count=<n>} 
Mark the series as the <n>-th iteration of the topic. The output filenames
have @samp{v<n>} prepended to them, and the subject prefix ("PATCH" by default,
but configurable via the @samp{--subject-prefix} option) has ` v<n>` appended to
it.  E.g.  @samp{--reroll-count=4} may produce @samp{v4-0001-add-makefile.patch} file
that has "Subject: [PATCH v4 1/20] Add makefile" in it.  @samp{<n>} does not have
to be an integer (e.g. "--reroll-count=4.4", or "--reroll-count=4rev2" are
allowed), but the downside of using such a reroll-count is that the
range-diff/interdiff with the previous version does not state exactly which
version the new interation is compared against.

@item  @samp{--to=<email>} 
Add a @samp{To:} header to the email headers. This is in addition to any
configured headers, and may be used multiple times.  The negated form
@samp{--no-to} discards all @samp{To:} headers added so far (from config or command
line).

@item  @samp{--cc=<email>} 
Add a @samp{Cc:} header to the email headers. This is in addition to any
configured headers, and may be used multiple times.  The negated form
@samp{--no-cc} discards all @samp{Cc:} headers added so far (from config or command
line).

@item  @samp{--from} 
@itemx  @samp{--from=<ident>} 
Use @samp{ident} in the @samp{From:} header of each commit email. If the author ident
of the commit is not textually identical to the provided @samp{ident}, place a
@samp{From:} header in the body of the message with the original author. If no
@samp{ident} is given, use the committer ident.

Note that this option is only useful if you are actually sending the emails
and want to identify yourself as the sender, but retain the original author
(and @samp{git am} will correctly pick up the in-body header). Note also that
@samp{git send-email} already handles this transformation for you, and this
option should not be used if you are feeding the result to @samp{git send-email}.

@item  @samp{--add-header=<header>} 
Add an arbitrary header to the email headers.  This is in addition to any
configured headers, and may be used multiple times.  For example,
@samp{--add-header="Organization: git-foo"}.  The negated form @samp{--no-add-header}
discards @strong{all} (@samp{To:}, @samp{Cc:}, and custom) headers added so far from config
or command line.

@item  @samp{--[no-]cover-letter} 
In addition to the patches, generate a cover letter file containing the
branch description, shortlog and the overall diffstat.  You can fill in a
description in the file before sending it out.

@item  @samp{--encode-email-headers} 
@itemx  @samp{--no-encode-email-headers} 
Encode email headers that have non-ASCII characters with "Q-encoding"
(described in RFC 2047), instead of outputting the headers
verbatim. Defaults to the value of the @samp{format.encodeEmailHeaders}
configuration variable.

@item  @samp{--interdiff=<previous>} 
As a reviewer aid, insert an interdiff into the cover letter, or as
commentary of the lone patch of a 1-patch series, showing the differences
between the previous version of the patch series and the series currently
being formatted. @samp{previous} is a single revision naming the tip of the
previous series which shares a common base with the series being formatted
(for example @samp{git format-patch --cover-letter --interdiff=feature/v1 -3
feature/v2}).

@item  @samp{--range-diff=<previous>} 
As a reviewer aid, insert a range-diff (see git-range-diff(1))  into
the cover letter, or as commentary of the lone patch of a 1-patch series,
showing the differences between the previous version of the patch series and
the series currently being formatted.  @samp{previous} can be a single revision
naming the tip of the previous series if it shares a common base with the
series being formatted (for example @samp{git format-patch --cover-letter
--range-diff=feature/v1 -3 feature/v2}), or a revision range if the two
versions of the series are disjoint (for example @samp{git format-patch
--cover-letter --range-diff=feature/v1~3..feature/v1 -3 feature/v2}).

Note that diff options passed to the command affect how the primary product
of @samp{format-patch} is generated, and they are not passed to the underlying
@samp{range-diff} machinery used to generate the cover-letter material (this may
change in the future).

@item  @samp{--creation-factor=<percent>} 
Used with @samp{--range-diff}, tweak the heuristic which matches up commits
between the previous and current series of patches by adjusting the
creation/deletion cost fudge factor. See git-range-diff(1))  for
details.

@item  @samp{--notes[=<ref>]} 
@itemx  @samp{--no-notes} 
3つの破線(@samp{---})行の後に、コミットのnotes (linkgit: git-notes[1] を参照)を追加します。

The expected use case of this is to write supporting explanation for the
commit that does not belong to the commit log message proper, and include it
with the patch submission. While one can simply write these explanations
after @samp{format-patch} has run but before sending, keeping them as Git notes
allows them to be maintained between versions of the patch series (but see
the discussion of the @samp{notes.rewrite} configuration options in
git-notes(1) to use this workflow).

The default is @samp{--no-notes}, unless the @samp{format.notes} configuration is set.

@item  @samp{--[no-]signature=<signature>} 
Add a signature to each message produced. Per RFC 3676 the signature is
separated from the body by a line with '-- ' on it. If the signature option
is omitted the signature defaults to the Git version number.

@item  @samp{--signature-file=<file>} 
署名がファイルから読み取られることを除いて、 @samp{--signature} と同じように機能します。

@item  @samp{--suffix=.<sfx>} 
Instead of using @samp{.patch} as the suffix for generated filenames, use
specified suffix.  A common alternative is @samp{--suffix=.txt}.  Leaving this
empty will remove the @samp{.patch} suffix.

Note that the leading character does not have to be a dot; for example, you
can use @samp{--suffix=-patch} to get @samp{0001-description-of-my-change-patch}.

@item  @samp{-q} 
@itemx  @samp{--quiet} 
生成されたファイルの名前を標準出力に出力しないでください。

@item  @samp{--no-binary} 
Do not output contents of changes in binary files, instead display a notice
that those files changed.  Patches generated using this option cannot be
applied properly, but they are still useful for code review.

@item  @samp{--zero-commit} 
コミットのハッシュの代わりに、各パッチのFromヘッダーにすべてゼロのハッシュを出力します。

@item  @samp{--[no-]base[=<commit>]} 
Record the base tree information to identify the state the patch series
applies to.  See the BASE TREE INFORMATION section below for details. If
<commit> is "auto", a base commit is automatically chosen. The @samp{--no-base}
option overrides a @samp{format.useAutoBase} configuration.

@item  @samp{--root} 
Treat the revision argument as a <revision range>, even if it is just a
single commit (that would normally be treated as a <since>).  Note that root
commits included in the specified range are always formatted as creation
patches, independently of this flag.

@item  @samp{--progress} 
パッチが生成されるときに、stderrへ進捗レポートを表示します。
@end table

@noindent

@chapheading CONFIGURATION

You can specify extra mail header lines to be added to each message,
defaults for the subject prefix and file suffix, number patches when
outputting more than one patch, add "To:" or "Cc:" headers, configure
attachments, change the patch output directory, and sign off patches with
configuration variables.

@example
[format]
        headers = "Organization: git-foo\n"
        subjectPrefix = CHANGE
        suffix = .txt
        numbered = auto
        to = <email>
        cc = <email>
        attach [ = mime-boundary-string ]
        signOff = true
        outputDirectory = <directory>
        coverLetter = auto
        coverFromDescription = auto
@end example


@noindent

@chapheading DISCUSSION

The patch produced by @emph{git format-patch} is in UNIX mailbox format, with a
fixed "magic" time stamp to indicate that the file is output from
format-patch rather than a real mailbox, like so:

@example
From 8f72bad1baf19a53459661343e21d6491c3908d3 Mon Sep 17 00:00:00 2001
From: Tony Luck <tony.luck@@intel.com>
Date: Tue, 13 Jul 2010 11:42:54 -0700
Subject: [PATCH] =?UTF-8?q?[IA64]=20Put=20ia64=20config=20files=20on=20the=20?=
 =?UTF-8?q?Uwe=20Kleine-K=C3=B6nig=20diet?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

arch/arm config files were slimmed down using a python script
(See commit c2330e286f68f1c408b4aa6515ba49d57f05beae comment)

Do the same for ia64 so we can have sleek & trim looking
...
@end example


Typically it will be placed in a MUA’s drafts folder, edited to add timely
commentary that should not go in the changelog after the three dashes, and
then sent as a message whose body, in our example, starts with "arch/arm
config files were…".  On the receiving end, readers can save interesting
patches in a UNIX mailbox and apply them with git-am(1).

When a patch is part of an ongoing discussion, the patch generated by @emph{git
format-patch} can be tweaked to take advantage of the @emph{git am --scissors}
feature.  After your response to the discussion comes a line that consists
solely of "@samp{-- >8 --}" (scissors and perforation), followed by the patch
with unnecessary header fields removed:

@example
...
> So we should do such-and-such.

Makes sense to me.  How about this patch?

-- >8 --
Subject: [IA64] Put ia64 config files on the Uwe Kleine-König diet

arch/arm config files were slimmed down using a python script
...
@end example


When sending a patch this way, most often you are sending your own patch, so
in addition to the "@samp{From $SHA1 $magic_timestamp}" marker you should omit
@samp{From:} and @samp{Date:} lines from the patch file.  The patch title is likely to
be different from the subject of the discussion the patch is in response to,
so it is likely that you would want to keep the Subject: line, like the
example above.

@noindent

@heading パッチの破損のチェック

多くのメーラーは、適切に設定されていないと空白(whitespace)を破損します。破損の一般的な2つのタイプは以下のとおりです:

@itemize 

@item
どの空白(whitespace)もない空のコンテキスト行。

@item
先頭に1つの余分な空白(whitespace)がある空でないコンテキスト行。
@end itemize

あなたのMUAが正しく設定されているかどうかをテストする方法のひとつは以下のとおりです:

@itemize 

@item
リストとメンテナのアドレスを含まない To: 行 と Cc: 行 を除き、全く同じ方法で、パッチを自分自身に送信します。

@item
そのパッチをUNIXメールボックス形式のファイルに保存します。それを a.patch と呼ぶことにしましょう。

@item
それをapplyします:

@example
$ git fetch <project> master:test-apply
$ git switch test-apply
$ git restore --source=HEAD --staged --worktree :/
$ git am a.patch
@end example
@end itemize

これが正しく適用されない場合、さまざまな理由が考えられます。

@itemize 

@item
The patch itself does not apply cleanly.  That is @emph{bad} but does not have
much to do with your MUA.  You might want to rebase the patch with
git-rebase(1) before regenerating it in this case.

@item
The MUA corrupted your patch; "am" would complain that the patch does not
apply.  Look in the .git/rebase-apply/ subdirectory and see what @emph{patch}
file contains and check for the common corruption patterns mentioned above.

@item
While at it, check the @emph{info} and @emph{final-commit} files as well.  If what is
in @emph{final-commit} is not exactly what you would want to see in the commit
log message, it is very likely that the receiver would end up hand editing
the log message when applying your patch.  Things like "Hi, this is my first
patch.\n" in the patch e-mail should come after the three-dash line that
signals the end of the commit message.
@end itemize

@noindent

@chapheading MUA-SPECIFIC HINTS

さまざまなメーラーを使用してパッチをインラインで正常に送信する方法に関するヒントをいくつか。

@noindent

@heading GMail

GMail does not have any way to turn off line wrapping in the web interface,
so it will mangle any emails that you send.  You can however use "git
send-email" and send your patches through the GMail SMTP server, or use any
IMAP email client to connect to the google IMAP server and forward the
emails through that.

For hints on using @emph{git send-email} to send your patches through the GMail
SMTP server, see the EXAMPLE section of git-send-email(1).

For hints on submission using the IMAP interface, see the EXAMPLE section of
git-imap-send(1).

@noindent

@heading Thunderbird

By default, Thunderbird will both wrap emails as well as flag them as being
@emph{format=flowed}, both of which will make the resulting email unusable by
Git.

There are three different approaches: use an add-on to turn off line wraps,
configure Thunderbird to not mangle patches, or use an external editor to
keep Thunderbird from mangling the patches.

@noindent

@subheading Approach #1 (add-on)

Install the Toggle Word Wrap add-on that is available from
@uref{https://addons.mozilla.org/thunderbird/addon/toggle-word-wrap/,https://addons.mozilla.org/thunderbird/addon/toggle-word-wrap/} It adds a
menu entry "Enable Word Wrap" in the composer’s "Options" menu that you can
tick off. Now you can compose the message as you otherwise do (cut + paste,
@emph{git format-patch} | @emph{git imap-send}, etc), but you have to insert line
breaks manually in any text that you type.

@noindent

@subheading Approach #2 (configuration)

Three steps:

@enumerate 

@item
Configure your mail server composition as plain text: Edit…Account
Settings…Composition & Addressing, uncheck "Compose Messages in HTML".

@item
Configure your general composition window to not wrap.

In Thunderbird 2: Edit..Preferences..Composition, wrap plain text messages
at 0

In Thunderbird 3: Edit..Preferences..Advanced..Config Editor.  Search for
"mail.wrap_long_lines".  Toggle it to make sure it is set to @samp{false}. Also,
search for "mailnews.wraplength" and set the value to 0.

@item
Disable the use of format=flowed: Edit..Preferences..Advanced..Config
Editor.  Search for "mailnews.send_plaintext_flowed".  Toggle it to make
sure it is set to @samp{false}.
@end enumerate

After that is done, you should be able to compose email as you otherwise
would (cut + paste, @emph{git format-patch} | @emph{git imap-send}, etc), and the
patches will not be mangled.

@noindent

@subheading Approach #3 (external editor)

The following Thunderbird extensions are needed: AboutConfig from
@uref{http://aboutconfig.mozdev.org/,http://aboutconfig.mozdev.org/} and External Editor from
@uref{http://globs.org/articles.php?lng=en&pg=8,http://globs.org/articles.php?lng=en&pg=8}

@enumerate 

@item
Prepare the patch as a text file using your method of choice.

@item
Before opening a compose window, use Edit→Account Settings to uncheck the
"Compose messages in HTML format" setting in the "Composition & Addressing"
panel of the account to be used to send the patch.

@item
In the main Thunderbird window, @emph{before} you open the compose window for the
patch, use Tools→about:config to set the following to the indicated values:

@example
        mailnews.send_plaintext_flowed  => false
        mailnews.wraplength             => 0
@end example


@item
Open a compose window and click the external editor icon.

@item
In the external editor window, read in the patch file and exit the editor
normally.
@end enumerate

Side note: it may be possible to do step 2 with about:config and the
following settings but no one’s tried yet.

@example
        mail.html_compose                       => false
        mail.identity.default.compose_html      => false
        mail.identity.id?.compose_html          => false
@end example


There is a script in contrib/thunderbird-patch-inline which can help you
include patches with Thunderbird in an easy way. To use it, do the steps
above and then use the script as the external editor.

@noindent

@heading KMail

This should help you to submit patches inline using KMail.

@enumerate 

@item
Prepare the patch as a text file.

@item
Click on New Mail.

@item
Go under "Options" in the Composer window and be sure that "Word wrap" is
not set.

@item
Use Message → Insert file… and insert the patch.

@item
Back in the compose window: add whatever other text you wish to the message,
complete the addressing and subject fields, and press send.
@end enumerate

@noindent

@chapheading BASE TREE INFORMATION

The base tree information block is used for maintainers or third party
testers to know the exact state the patch series applies to. It consists of
the @emph{base commit}, which is a well-known commit that is part of the stable
part of the project history everybody else works off of, and zero or more
@emph{prerequisite patches}, which are well-known patches in flight that is not
yet part of the @emph{base commit} that need to be applied on top of @emph{base
commit} in topological order before the patches can be applied.

The @emph{base commit} is shown as "base-commit: " followed by the 40-hex of the
commit object name.  A @emph{prerequisite patch} is shown as
"prerequisite-patch-id: " followed by the 40-hex @emph{patch id}, which can be
obtained by passing the patch through the @samp{git patch-id --stable} command.

Imagine that on top of the public commit P, you applied well-known patches
X, Y and Z from somebody else, and then built your three-patch series A, B,
C, the history would be like:

@example
---P---X---Y---Z---A---B---C
@end example

With @samp{git format-patch --base=P -3 C} (or variants thereof, e.g. with
@samp{--cover-letter} or using @samp{Z..C} instead of @samp{-3 C} to specify the range),
the base tree information block is shown at the end of the first message the
command outputs (either the first patch, or the cover letter), like this:

@example
base-commit: P
prerequisite-patch-id: X
prerequisite-patch-id: Y
prerequisite-patch-id: Z
@end example


For non-linear topology, such as

@example
---P---X---A---M---C
    \         /
     Y---Z---B
@end example

You can also use @samp{git format-patch --base=P -3 C} to generate patches for A,
B and C, and the identifiers for P, X, Y, Z are appended at the end of the
first message.

If set @samp{--base=auto} in cmdline, it will track base commit automatically,
the base commit will be the merge base of tip commit of the remote-tracking
branch and revision-range specified in cmdline.  For a local branch, you
need to track a remote branch by @samp{git branch --set-upstream-to} before using
this option.

@noindent

@chapheading EXAMPLES

@itemize 

@item
Extract commits between revisions R1 and R2, and apply them on top of the
current branch using @emph{git am} to cherry-pick them:

@example
$ git format-patch -k --stdout R1..R2 | git am -3 -k
@end example


@item
Extract all commits which are in the current branch but not in the origin
branch:

@example
$ git format-patch origin
@end example


For each commit a separate file is created in the current directory.

@item
Extract all commits that lead to @emph{origin} since the inception of the
project:

@example
$ git format-patch --root origin
@end example


@item
The same as the previous one:

@example
$ git format-patch -M -B origin
@end example


Additionally, it detects and handles renames and complete rewrites
intelligently to produce a renaming patch.  A renaming patch reduces the
amount of text output, and generally makes it easier to review.  Note that
non-Git "patch" programs won’t understand renaming patches, so use it only
when you know the recipient uses Git to apply your patch.

@item
Extract three topmost commits from the current branch and format them as
e-mailable patches:

@example
$ git format-patch -3
@end example

@end itemize

@noindent

@chapheading CAVEATS

Note that @samp{format-patch} will omit merge commits from the output, even if
they are part of the requested range. A simple "patch" does not include
enough information for the receiving end to reproduce the same merge commit.

@noindent

@chapheading SEE ALSO

git-am(1), git-send-email(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-fsck-objects,,,Top
@chapheading Name

git-fsck-objects — データベース内のオブジェクトの接続性(connectivity)と有効性(validity)を検証(verify)します

@noindent

@chapheading Synopsis

@display
git fsck-objects …
@end display


@noindent

@chapheading DESCRIPTION

これは git-fsck(1) の同義語です。 git-fsck(1) の文書を参照してください。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-fsck,,,Top
@chapheading Name

git-fsck — データベース内のオブジェクトの接続性(connectivity)と有効性(validity)を検証します

@noindent

@chapheading Synopsis

@display
git fsck [--tags] [--root] [--unreachable] [--cache] [--no-reflogs]
         [--[no-]full] [--strict] [--verbose] [--lost-found]
         [--[no-]dangling] [--[no-]progress] [--connectivity-only]
         [--[no-]name-objects] [<object>*]
@end display


@noindent

@chapheading DESCRIPTION

データベース内のオブジェクトの接続性(connectivity)と有効性(validity)を検証します

@noindent

@chapheading OPTIONS

@table @asis

@item  <object> 
到達不能追跡のheadとして扱うオブジェクト。

オブジェクトが指定されていない場合、 @emph{git fsck} はデフォルトでインデックスファイルと、 @samp{refs}
名前空間内のすべてのSHA-1参照と、(@samp{--no-reflogs} が与えられて無い場合)すべてのreflogsを、headとして使用します。

@item  @samp{--unreachable} 
存在するが、どの参照ノードからも到達できないオブジェクトを印刷します。

@item  @samp{--[no-]dangling} 
存在するが「直接」使用されることのないオブジェクトを印刷します(デフォルト)。 @samp{--no-dangling}
を使用して、この情報を出力から省略することができます。

@item  @samp{--root} 
ルートノードを報告します。

@item  @samp{--tags} 
タグを報告します。

@item  @samp{--cache} 
インデックスに記録されているオブジェクトを、到達不能追跡のheadノードとしても考慮します。

@item  @samp{--no-reflogs} 
reflogのエントリによってのみ参照されるコミットが到達可能であるとは見なさないようにします。このオプションは、以前はrefに含まれていたが、現在は含まれていないが、対応するreflogに残っているコミットを検索することのみを目的としています。

@item  @samp{--full} 
GIT_OBJECT_DIRECTORY（$GIT_DIR/objects)
内のオブジェクトだけでなく、GIT_ALTERNATE_OBJECT_DIRECTORIES または
$GIT_DIR/objects/info/alternates にリストされている代替オブジェクトプール、および
$GIT_DIR/objects/pack
にあるパックされたGitアーカイブにあるオブジェクトもチェックします。サブディレクトリを代替オブジェクトプールにパックします。いまやこれがデフォルトになりました。
@samp{--no-full} でオフにできます。

@item  @samp{--connectivity-only} 
到達可能なオブジェクトの接続のみをチェックし、到達可能なタグ、コミット、またはツリーによって参照されるオブジェクトが存在することを確認します。これにより、ブロブの読み取りを完全に回避することで操作が高速化されます(ただし、参照されたブロブが存在するかどうかは引き続きチェックされます)。
これにより、コミットとツリーの破損が検出されますが、セマンティックチェック(フォーマットエラーなど)は行われません。ブロブオブジェクトの破損はまったく検出されません。

到達不能なタグ、コミット、およびツリーにもアクセスして、履歴のぶら下がっているセグメントのヒントを見つけることができます。この出力を気にせず、さらに高速化したい場合は、
@samp{--no-dangling} を使用してください。

@item  @samp{--strict} 
より厳密なチェックを有効にします。つまり、古いバージョンのGitによって作成された g+w
ビットセットで記録されたファイルモードをキャッチします。Linuxカーネル、Git自体、スパースリポジトリなどの既存のリポジトリには、このチェックをトリガーする古いオブジェクトがありますが、このフラグを使用して新しいプロジェクトをチェックすることをお勧めします。

@item  @samp{--verbose} 
おしゃべりになります。

@item  @samp{--lost-found} 
タイプに応じて、ぶら下がっているオブジェクトを .git/lost-found/commit/ または .git/lost-found/other/
に書き込みます。オブジェクトがブロブの場合、コンテンツはそのオブジェクト名ではなくファイルに書き込まれます。

@item  @samp{--name-objects} 
到達可能なオブジェクトの名前を表示する場合、SHA-1に加えて、それらがどのように到達可能であるかを説明する名前も表示します。
git-rev-parse(1) と互換性があります。 例えば @samp{HEAD@@@{1234567890@}~25^2:src/}

@item  @samp{--[no-]progress} 
@samp{--no-progress} または @samp{--verbose}
が指定されていない限り、進行状況ステータスは、端末に接続されている場合、デフォルトで標準エラーストリームに報告されます。 @samp{--progress}
は、標準エラーストリームが端末に送信されていない場合でも、進行状況出力を強制します。
@end table

@noindent

@chapheading CONFIGURATION

@table @asis

@item  fsck.<msg-id> 
fsck中に、gitは、現在のバージョンのgitでは生成されず、 @samp{transfer.fsckObjects}
が設定されている場合はネットワーク経由で送信されない、レガシーデータの問題を検出する場合があります。この機能は、そのようなデータを含むレガシーリポジトリの操作をサポートすることを目的としています。

@samp{fsck.<msg-id>} 設定は、 git-fsck(1) によって取得されますが、代わりに、そのようなデータセット
@samp{receive.fsck.<msg-id>} のプッシュを受け入れるか、または、クローンまたはフェッチのセットである
@samp{fetch.fsck.<msg-id>} を使用します。

この文書の残りの部分では、簡潔にするために @samp{fsck.*} 変数について説明していますが、対応する @samp{receive.fsck.*} 変数と
@samp{fetch.<msg-id>.*} 変数にも同じことが当てはまります。

@samp{color.ui} や @samp{core.editor} のような変数とは異なり、 @samp{receive.fsck.<msg-id>} と
@samp{fetch.fsck.<msg-id>} 変数は、設定されていない場合、 @samp{fsck.<msg-id>}
構成にフォールバックしません。さまざまな状況で同じfsck設定を均一に構成するには、3つすべてを同じ値に設定する必要があります。

@samp{fsck.<msg-id>} が設定されている場合、 @samp{fsck.<msg-id>} の値を @samp{error} 、 @samp{warn} 、@samp{ignore}
のいずれか一つとすることにより、エラーを警告に切り替える事もでき、その逆も可能です。そして @samp{<msg-id>}
の部分はメッセージIDです。便利なように、fsckはエラー/警告メッセージの前にメッセージIDを付けます。たとえば「missingEmail:
invalid author/committer line - missing email」は、 @samp{fsck.missingEmail =
ignore} を設定するとその問題が非表示になることを意味します。

一般に、これらの問題のあるオブジェクトが共有する破損の種類をリストして無視するのではなく、 @samp{fsck.skipList}
に問題のある既存のオブジェクトを列挙することをお勧めします。前者を実行すると、同じ破損の新しいインスタンスが見過ごされる可能性があります。

不明な @samp{fsck.<msg-id>} 値を設定すると、fsckが停止(die)しますが、 @samp{receive.fsck.<msg-id>} や
@samp{fetch.fsck.<msg-id>} に対して同じことを行うと、gitは単に警告するだけです。

@item  fsck.skipList 
非致命的な理由により既に壊れている(broken)ことが分かっているため無視する必要があるオブジェクト名(1行につき1つの省略されてないSHA-1)のリストへのパス。Git
2.20
以降では、コメント(@samp{#})文字から行末までと、空行と、先頭と末尾の空白(whitespace)は無視されます。それより古いバージョンでは1行につき1つのSHA-1以外は全てエラーになります。

この機能は、無効なコミッターの電子メールアドレスなど、初期のコミットにもかかわらず、安全に無視できるエラーを含む、確立されたプロジェクトを受け入れる必要がある場合に役立ちます。
注意: この設定では、corruptオブジェクトをスキップすることはできません。

@samp{fsck.<msg-id>} と同様に、この変数に対応する @samp{receive.fsck.skipList} 派生と
@samp{fetch.fsck.skipList} 派生があります。

@samp{color.ui} や @samp{core.editor} のような変数とは異なり、 @samp{receive.fsck.skipList} 変数と
@samp{fetch.fsck.skipList} 変数は、設定されていない場合、 @samp{fsck.skipList}
構成にフォールバックしません。さまざまな状況で同じfsck設定を均一に構成するには、3つすべてを同じ値に設定する必要があります。

古いバージョンのGit(2.20より前)では、オブジェクト名リストを並べ替える必要があることが文書化されています。これは必須ではなく、オブジェクト名は任意の順序で表示できますが、リストを読み取るときに、内部バイナリ検索実装の目的でリストが並べ替えられているかどうかを追跡しました。これにより、既に並べ替えられたリストでは作業を節約できます。膨大なリストがない限り、リストを事前に並べ替える必要はありませんでした。
Gitバージョン2.20以降では、代わりにハッシュ実装が使用されるため、リストを事前に並べ替える必要はありません。
@end table

@noindent

@chapheading DISCUSSION

git-fsckは、SHA-1と一般的なオブジェクトの健全性をテストし、結果として得られる到達可能性とその他すべてを完全に追跡します。検出した破損(オブジェクトの欠落または不良)を出力し、
@samp{--unreachable}
フラグを使用すると、存在するが指定されたheadノード(または上記デフォルト達)のいずれからも到達できないオブジェクトも出力します。

つまり、それは、あなたのバックアップや、他のアーカイブで見つけなければならない破損したオブジェクトです(つまり、あなたは、それらを削除して、他の誰かが破損したオブジェクトを持っていることを期待して、他のサイトと「rsync」を実行できます)。

core.commitGraph が true の場合、 commit-graph ファイルも「git commit-graph
verify」を使用して検査されます。 git-commit-graph(1) を参照してください。

@noindent

@chapheading Extracted Diagnostics

@table @asis

@item  unreachable <type> <object> 
<type> というタイプである <object>
というオブジェクトは、表示されるツリーまたはコミットのいずれにおいても、実際には直接または間接的に参照されていません。これは、指定していない別のルートノードがあるか、ツリーが破損していることを意味している可能性があります。ルートノードを見逃していない場合は、到達不能なノードは使用できないため、削除することをお勧めします。

@item  missing <type> <object> 
この <type> というタイプの <object> というオブジェクトは参照されていますが、データベースに存在しません。

@item  dangling <type> <object> 
この <type> タイプの <object> というオブジェクトはデータベースに存在しますが、「直接」使用されることはありません。
ぶら下がっているコミットはルートノードである可能性があります。

@item  hash mismatch <object> 
データベースに、ハッシュがオブジェクトデータベースの値と一致しないオブジェクトがあります。これは、深刻なデータ整合性の問題を示しています。
@end table

@noindent

@chapheading Environment Variables

@table @asis

@item  GIT_OBJECT_DIRECTORY 
オブジェクトデータベースのルート(通常は $GIT_DIR/objects )を指定するために使用されます

@item  GIT_INDEX_FILE 
インデックスのインデックスファイルを指定するために使用されます

@item  GIT_ALTERNATE_OBJECT_DIRECTORIES 
追加のオブジェクトデータベースルートを指定するために使用されます(通常は未設定)
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-gc,,,Top
@chapheading Name

git-gc — 不要なファイルをクリーンアップし、ローカルリポジトリを最適化する

@noindent

@chapheading Synopsis

@display
git gc [--aggressive] [--auto] [--quiet] [--prune=<date> | --no-prune] [--force] [--keep-largest-pack]
@end display


@noindent

@chapheading DESCRIPTION

ファイルリビジョンの圧縮(ディスクスペースの削減とパフォーマンスの向上)または、「git
add」の以前の呼び出しから作成された可能性のある到達不能オブジェクトの削除または、refのパッキングまたは、reflogの剪定(prune)または、メタデータまたは古い作業ツリーのrerere、など、現在のリポジトリ内で多数のハウスキーピングタスクを実行します。
commit-graphなどの補助インデックスも更新される場合があります。

オブジェクトを作成する一般的な磁器コマンド操作を実行すると、最後のメンテナンス以降にリポジトリが大幅に拡張されているかどうかが確認され、拡張されている場合は、
@samp{git gc} が自動的に実行されます。この動作を無効にする方法については、以下の @samp{gc.auto} を参照してください。

@samp{git gc}
を手動で実行する必要があるのは、そのような磁器コマンドを定期的に実行せずにオブジェクトをリポジトリに追加する場合、1回限りのリポジトリ最適化を行う場合などです。最適ではない大量インポートをクリーンアップします。インポートの場合の詳細については、
git-fast-import(1)の「PACKFILE OPTIMIZATION」セクションを参照してください。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--aggressive} 
通常、「git gc」は非常に高速に実行され、ディスクスペースの使用率とパフォーマンスは良好です。このオプションを使用すると、「git
gc」はリポジトリをより積極的に最適化できますが、時間がかかります。この最適化の効果は割と持続性があります。詳細については、以下の「AGGRESSIVE」セクションを参照してください。

@item  @samp{--auto} 
このオプションを使用すると、「git gc」はハウスキーピングが必要かどうかを確認します。 そうでない場合は、作業を実行せずに終了します。

このヒューリスティックな作業がどのように機能するかについては、以下の「CONFIGURATION」セクションの「gc.auto」オプションを参照してください。

@samp{gc.auto} や @samp{gc.autoPackLimit}
などの構成オプションの制限を超えてハウスキーピングがトリガーされると、他のすべてのハウスキーピングタスク（rerere、working
tree、reflogなど）も実行されます。

@item  @samp{--prune=<date>} 
指定の日付より古いルーズオブジェクトを削除します(デフォルトは2週間前で、構成変数 @samp{gc.pruneExpire} で上書きできます)。
@samp{--prune=now}
は、日付に関係なく緩いオブジェクトを削除し、別のプロセスが同時にリポジトリに書き込んでいる場合に破損のリスクが高まります。以下の「NOTES」を参照してください。
@samp{--prune} はデフォルトでオンになっています。

@item  @samp{--no-prune} 
任意のルーズオブジェクトを剪定しません。

@item  @samp{--quiet} 
すべての進捗レポートを抑制します。

@item  @samp{--force} 
このリポジトリで別の @samp{git gc} インスタンスが実行されている場合でも、 @samp{git gc} を強制的に実行します。

@item  @samp{--keep-largest-pack} 
最大のパックと @samp{.keep} ファイルでマークされたパックを除くすべてのパックが1つのパックに統合されます。このオプションを使用すると、
@samp{gc.bigPackThreshold} は無視されます。
@end table

@noindent

@chapheading AGGRESSIVE

@samp{--aggressive} オプションが指定されている場合、 git-repack(1) は @samp{-f}
フラグを指定して呼び出され、次に @samp{--no-reuse-delta} が git-pack-objects(1)
に渡されます。これにより、既存のデルタが破棄されて再計算され、再パッキングに多くの時間を費します。

この効果は割と長続きします。例えばパックとルーズオブジェクトが互いに合体すると、そのパック内の既存のデルタが再利用される可能性がありますが、代わりに新しいパックから次善のデルタを選択する場合もあります。

さらに、 @samp{--aggressive} を指定すると、 git-repack(1) に渡される @samp{--depth} と
@samp{--window} オプションが微調整されます。以下の @samp{gc.aggressiveDepth} と @samp{gc.aggressiveWindow}
設定を参照してください。より大きなウィンドウサイズを使用することで、より最適なデルタを見つける可能性が高くなります。

カスタマイズされたパフォーマンスベンチマークを実行せずに、特定のリポジトリでこのオプションを使用することはおそらく価値がありません。それにはもっと時間がかかり、結果として生じるスペース/デルタの最適化はそれだけの価値があるかもしれませんし、そうでないかもしれません。これをまったく使用しないことは、ほとんどのユーザーとそのリポジトリにとって正しいトレードオフです。

@noindent

@chapheading CONFIGURATION

以下の文書は git-config(1) にあるものと同じです:

@table @asis

@item  gc.aggressiveDepth 
@samp{git gc --aggressive}
で使用されるデルタ圧縮アルゴリズムで使用される深さパラメーター。これはデフォルトで50に設定されています。これは @samp{--aggressive}
が使用されていない場合の @samp{--depth} オプションのデフォルトです。

詳細については git-repack(1) の @samp{--depth} オプションの文書を参照してください。

@item  gc.aggressiveWindow 
@samp{git gc --aggressive}
で使用されるデルタ圧縮アルゴリズムで使用されるウィンドウサイズパラメータ。これはデフォルトで250に設定されています。これは、 @samp{--window}
のデフォルト値の10よりもはるかに積極的なウィンドウサイズです。

詳細については、 git-repack(1) の @samp{--window} オプションの文書を参照してください。

@item  gc.auto 
リポジトリにおおよそ指定の値より多くのルーズオブジェクトがある場合、 @samp{git gc --auto}
はそれらをパックします。一部の磁器コマンドは、このコマンドを使用して、軽量のガベージコレクションを時々実行します。デフォルト値は6700です。

これを0に設定すると、ルーズオブジェクトの数に基づく自動パッキングが無効にななります。また、他のヒューリスティックな @samp{git gc --auto}
が、 @samp{gc.autoPackLimit} などの作業があるかどうかを判断するためにこの値を使用します。

@item  gc.autoPackLimit 
リポジトリに @samp{* .keep} ファイルでマークされていないパックがこの設定値より多くある場合、 @samp{git gc --auto}
はそれらを1つの大きなパックに統合します。デフォルト値は50です。これを0に設定すると、無効になります。 @samp{gc.auto}
を0に設定すると、この設定も無効になります。

以下の @samp{gc.bigPackThreshold} 構成変数を参照してください。この設定を使用中は、自動パックの制限がどのように機能するかに影響します。

@item  gc.autoDetach 
システムがサポートしている場合は @samp{git gc --auto} は即座戻り、実行はバックグラウンドで行われます。デフォルトはtrueです。

@item  gc.bigPackThreshold 
ゼロ以外の場合、 @samp{git gc} の実行時に、この設定値より大きいすべてのパックが保持されます。これは @samp{--keep-largest-pack}
と非常に似ていますが、最大のパックだけでなく、しきい値を満たす全てのパックが保持される点が異なります。デフォルトはゼロです。 @emph{k} 、 @emph{m} 、
@emph{g} の一般的な単位接尾辞がサポートされています。

注意: 保持されるパックの数が gc.autoPackLimit
を超える場合、この構成変数は無視され、基本パックを除くすべてのパックが再パックされることに注意してください。再パック後、パックの数は
gc.autoPackLimit を下回り、再び gc.bigPackThreshold が尊重されるでしょう。

@samp{git repack} がスムーズに実行されると推定されるメモリ量が利用できず、かつ、 @samp{gc.bigPackThreshold}
が設定されていない場合、最大のパックも除外されます(これは、 @samp{--keep-largest-pack} を指定して @samp{git gc}
を実行するのと同じです)。

@item  gc.writeCommitGraph 
trueの場合、 git-gc(1) が実行されると、 gcはcommit-graphファイルを書き換えます。 @samp{git gc
--auto} を使用する場合、ハウスキーピングが必要な場合はコミットグラフが更新されます。デフォルトはtrueです。詳細については
git-commit-graph(1) を参照してください。

@item  gc.logExpiry 
ファイルgc.logが存在する場合、 @samp{git gc --auto}
はそのコンテンツを出力し、そのファイルが「gc.logExpiry」より古い場合を除いて、実行する代わりにステータス0で終了します。デフォルトは「1.day」です。その他の値の指定方法については
@samp{gc.pruneExpire} を参照してください。

@item  gc.packRefs 
リポジトリで @samp{git pack-refs} を実行すると、HTTPなどの馬鹿プロトコル(dumb transport) を介して 1.5.1.2
より前のGitバージョンではクローンが作成できなくなります。この変数は、「git gc」が「git
pack-refs」を実行するかどうかを決定します。これを @samp{notbare}
に設定して、すべての非ベアリポジトリ内で有効にするか、ブール値に設定することができます。 デフォルトは @samp{true} です。

@item  gc.pruneExpire 
「git gc」を実行すると、@samp{prune --expire 2.weeks.ago} が呼び出されます。この構成変数で猶予期間をオーバーライドします。
値「now」を使用してこの猶予期間を無効にし、到達不能なオブジェクトを常にすぐに剪定(prune)するか、「never」を使用して剪定を抑制することができます。この機能は「git
gc」がリポジトリに書き込む別のプロセスと同時に実行される場合の破損を防ぐのに役立ちます。 git-gc(1)
の「NOTES」セクションを参照してください。

@item  gc.worktreePruneExpire 
@emph{git gc} が実行されると、 @samp{git worktree prune --expire3.months.ago}
が呼び出されます。この構成変数を使用して、別の猶予期間を設定できます。値「now」を使用して猶予期間を無効にし、
@samp{$GIT_DIR/worktrees} をすぐに剪定(prune)するか、「never」を使用して剪定を抑制することができます。

@item  gc.reflogExpire 
@itemx  gc.<pattern>.reflogExpire 
「git reflog
expire」は、この時間より古いreflogエントリを削除します。デフォルトは90日です。値「now」はすべてのエントリをすぐに期限切れにし、「never」は期限切れを完全に抑制します。中央に「<pattern>」(例:「refs/stash」)がある場合、設定は
<pattern> に一致するrefにのみ適用されます。

@item  gc.reflogExpireUnreachable 
@itemx  gc.<pattern>.reflogExpireUnreachable 
@emph{git reflog expire} は、この時間より古いreflogエントリを削除し、現在の先端(the current
tip)から到達不能にします。デフォルトは30日です。値「now」はすべてのエントリをすぐに期限切れにし、「never」は期限切れを完全に抑制します。中央に「<pattern>」(例:「refs/stash」)がある場合、設定は
<pattern> に一致するrefにのみ適用されます。

これらのタイプのエントリは通常、 @samp{git commit--amend} または @samp{git rebase}
を使用した結果として作成され、修正またはリベースが発生する前のコミットです。これらの変更は現在のプロジェクトの一部ではないため、ほとんどのユーザーはそれらをより早く期限切れにしたいと思うでしょう。そのため、デフォルトは
@samp{gc.reflogExpire} よりも積極的です。

@item  gc.rerereResolved 
以前に解決した競合するマージの記録は、「git rerere
gc」が実行されるときに、この設定値で指定の日数保持されます。より人間が読める「1.month.ago」などを使用することもできます。デフォルトは60日です。
git-rerere(1) を参照してください。

@item  gc.rerereUnresolved 
@emph{git rerere gc}
が実行されると、解決していない競合するマージの記録がこの設定値の日数保持されます。より人間が読める「1.month.ago」などを使用することもできます。デフォルトは15日です。
git-rerere(1) を参照してください。
@end table

@noindent

@chapheading NOTES

@emph{git gc}
は、リポジトリ内のどこかで参照されているオブジェクトを削除しないように非常に努力しています。特に、現在のブランチとタグのセットによって参照されるオブジェクトだけでなく、インデックス、リモートトラッキングブランチ、reflog（後で修正または巻き戻されたブランチのコミットを参照する可能性がある）などによって参照されるオブジェクトも保持されます。それ以外の場合は、
refs/* 名前空間にあります。オブジェクトに添付された(「git notes」によって作成された種類の)
noteは、オブジェクトの存続に寄与しないことに注意してください。一部のオブジェクトが削除されることを期待していて、削除されない場合は、それらの場所をすべて確認し、それらの参照を削除することが理にかなっているかどうかを判断してください。

一方、「git
gc」が別のプロセスと同時に実行されると、他のプロセスが使用しているが参照を作成していないオブジェクトが削除されるリスクがあります。これにより、他のプロセスが失敗したり、他のプロセスが後で削除されたオブジェクトへの参照を追加した場合にリポジトリが破損したりする可能性があります。
Gitには、この問題を大幅に軽減する2つの機能があります:

@enumerate 

@item
@samp{--prune} の日付よりも新しい変更時刻を持つオブジェクトは、そこから到達可能なすべてのモノと共にに保持されます。

@item
データベースにオブジェクトを追加するほとんどの操作は、オブジェクトがすでに存在する場合はその変更時刻を更新して、 #1 が適用されるようにします。
@end enumerate

ただし、これらの機能は完全なソリューションには及ばないため、コマンドを同時に実行するユーザーは、破損のリスクを抱えて生活する必要があります(実際にはリスクは低いようです)。

@noindent

@chapheading HOOKS

@samp{git gc --auto} コマンドは、 @emph{pre-auto-gc} フックを実行します。 詳細については、 githooks(5)
を参照してください。

@noindent

@chapheading SEE ALSO

git-prune(1) git-reflog(1) git-repack(1)
git-rerere(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-get-tar-commit-id,,,Top
@chapheading Name

git-get-tar-commit-id — git-archiveを使用して作成されたアーカイブからコミットIDを抽出します

@noindent

@chapheading Synopsis

@display
git get-tar-commit-id
@end display


@noindent

@chapheading DESCRIPTION

@emph{git archive}
によって作成されたtarアーカイブを標準入力から読み取り、そこに保存されているコミットIDを抽出します。入力の最初の1024バイトのみを読み取るため、実行時間はtarアーカイブのサイズに大きく影響されることはありません。

コミットIDが見つからない場合、 @emph{git get-tar-commit-id} は何も出力せずリターンコード1を返すだけです。これは、アーカイブが
@emph{git archive} を使用して作成されていない場合、または @emph{git archive}
の最初のパラメーターが、コミットIDまたはタグではなくツリーIDだった場合に発生する可能性があります。(訳注:入力がtarアーカイブで無い場合はstderrにtarアーカイブで無い旨のエラー出力があり、exit
code は 128。入力がtarアーカイブの場合で、コミットIDが見つからない場合は表記どおりstdout/stderr出力一切無しでexit
code 1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-grep,,,Top
@chapheading Name

git-grep — Print lines matching a pattern

@noindent

@chapheading Synopsis

@display
git grep [-a | --text] [-I] [--textconv] [-i | --ignore-case] [-w | --word-regexp]
           [-v | --invert-match] [-h|-H] [--full-name]
           [-E | --extended-regexp] [-G | --basic-regexp]
           [-P | --perl-regexp]
           [-F | --fixed-strings] [-n | --line-number] [--column]
           [-l | --files-with-matches] [-L | --files-without-match]
           [(-O | --open-files-in-pager) [<pager>]]
           [-z | --null]
           [ -o | --only-matching ] [-c | --count] [--all-match] [-q | --quiet]
           [--max-depth <depth>] [--[no-]recursive]
           [--color[=<when>] | --no-color]
           [--break] [--heading] [-p | --show-function]
           [-A <post-context>] [-B <pre-context>] [-C <context>]
           [-W | --function-context]
           [--threads <num>]
           [-f <file>] [-e] <pattern>
           [--and|--or|--not|(|)|-e <pattern>…]
           [--recurse-submodules] [--parent-basename <basename>]
           [ [--[no-]exclude-standard] [--cached | --no-index | --untracked] | <tree>…]
           [--] [<pathspec>…]
@end display


@noindent

@chapheading DESCRIPTION

Look for specified patterns in the tracked files in the work tree, blobs
registered in the index file, or blobs in given tree objects.  Patterns are
lists of one or more search expressions separated by newline characters.  An
empty string as search expression matches all lines.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--cached} 
Instead of searching tracked files in the working tree, search blobs
registered in the index file.

@item  @samp{--no-index} 
Search files in the current directory that is not managed by Git.

@item  @samp{--untracked} 
In addition to searching in the tracked files in the working tree, search
also in untracked files.

@item  @samp{--no-exclude-standard} 
Also search in ignored files by not honoring the @samp{.gitignore}
mechanism. Only useful with @samp{--untracked}.

@item  @samp{--exclude-standard} 
Do not pay attention to ignored files specified via the @samp{.gitignore}
mechanism.  Only useful when searching files in the current directory with
@samp{--no-index}.

@item  @samp{--recurse-submodules} 
Recursively search in each submodule that is active and checked out in the
repository.  When used in combination with the <tree> option the prefix of
all submodule output will be the name of the parent project’s <tree>
object. This option has no effect if @samp{--no-index} is given.

@item  @samp{-a} 
@itemx  @samp{--text} 
Process binary files as if they were text.

@item  @samp{--textconv} 
Honor textconv filter settings.

@item  @samp{--no-textconv} 
Do not honor textconv filter settings.  This is the default.

@item  @samp{-i} 
@itemx  @samp{--ignore-case} 
Ignore case differences between the patterns and the files.

@item  @samp{-I} 
Don’t match the pattern in binary files.

@item  @samp{--max-depth <depth>} 
For each <pathspec> given on command line, descend at most <depth> levels of
directories. A value of -1 means no limit.  This option is ignored if
<pathspec> contains active wildcards.  In other words if "a*" matches a
directory named "a*", "*" is matched literally so --max-depth is still
effective.

@item  @samp{-r} 
@itemx  @samp{--recursive} 
Same as @samp{--max-depth=-1}; this is the default.

@item  @samp{--no-recursive} 
Same as @samp{--max-depth=0}.

@item  @samp{-w} 
@itemx  @samp{--word-regexp} 
Match the pattern only at word boundary (either begin at the beginning of a
line, or preceded by a non-word character; end at the end of a line or
followed by a non-word character).

@item  @samp{-v} 
@itemx  @samp{--invert-match} 
Select non-matching lines.

@item  @samp{-h} 
@itemx  @samp{-H} 
By default, the command shows the filename for each match.  @samp{-h} option is
used to suppress this output.  @samp{-H} is there for completeness and does not
do anything except it overrides @samp{-h} given earlier on the command line.

@item  @samp{--full-name} 
When run from a subdirectory, the command usually outputs paths relative to
the current directory.  This option forces paths to be output relative to
the project top directory.

@item  @samp{-E} 
@itemx  @samp{--extended-regexp} 
@itemx  @samp{-G} 
@itemx  @samp{--basic-regexp} 
Use POSIX extended/basic regexp for patterns.  Default is to use basic
regexp.

@item  @samp{-P} 
@itemx  @samp{--perl-regexp} 
Use Perl-compatible regular expressions for patterns.

Support for these types of regular expressions is an optional compile-time
dependency. If Git wasn’t compiled with support for them providing this
option will cause it to die.

@item  @samp{-F} 
@itemx  @samp{--fixed-strings} 
Use fixed strings for patterns (don’t interpret pattern as a regex).

@item  @samp{-n} 
@itemx  @samp{--line-number} 
Prefix the line number to matching lines.

@item  @samp{--column} 
Prefix the 1-indexed byte-offset of the first match from the start of the
matching line.

@item  @samp{-l} 
@itemx  @samp{--files-with-matches} 
@itemx  @samp{--name-only} 
@itemx  @samp{-L} 
@itemx  @samp{--files-without-match} 
Instead of showing every matched line, show only the names of files that
contain (or do not contain) matches.  For better compatibility with @emph{git
diff}, @samp{--name-only} is a synonym for @samp{--files-with-matches}.

@item  @samp{-O[<pager>]} 
@itemx  @samp{--open-files-in-pager[=<pager>]} 
Open the matching files in the pager (not the output of @emph{grep}).  If the
pager happens to be "less" or "vi", and the user specified only one pattern,
the first file is positioned at the first match automatically. The @samp{pager}
argument is optional; if specified, it must be stuck to the option without a
space. If @samp{pager} is unspecified, the default pager will be used (see
@samp{core.pager} in git-config(1)).

@item  @samp{-z} 
@itemx  @samp{--null} 
Use \0 as the delimiter for pathnames in the output, and print them
verbatim. Without this option, pathnames with "unusual" characters are
quoted as explained for the configuration variable core.quotePath (see
git-config(1)).

@item  @samp{-o} 
@itemx  @samp{--only-matching} 
Print only the matched (non-empty) parts of a matching line, with each such
part on a separate output line.

@item  @samp{-c} 
@itemx  @samp{--count} 
Instead of showing every matched line, show the number of lines that match.

@item  @samp{--color[=<when>]} 
Show colored matches.  The value must be always (the default), never, or
auto.

@item  @samp{--no-color} 
Turn off match highlighting, even when the configuration file gives the
default to color output.  Same as @samp{--color=never}.

@item  @samp{--break} 
Print an empty line between matches from different files.

@item  @samp{--heading} 
Show the filename above the matches in that file instead of at the start of
each shown line.

@item  @samp{-p} 
@itemx  @samp{--show-function} 
Show the preceding line that contains the function name of the match, unless
the matching line is a function name itself.  The name is determined in the
same way as @samp{git diff} works out patch hunk headers (see @emph{Defining a custom
hunk-header} in gitattributes(5)).

@item  @samp{-<num>} 
@itemx  @samp{-C <num>} 
@itemx  @samp{--context <num>} 
Show <num> leading and trailing lines, and place a line containing @samp{--}
between contiguous groups of matches.

@item  @samp{-A <num>} 
@itemx  @samp{--after-context <num>} 
Show <num> trailing lines, and place a line containing @samp{--} between
contiguous groups of matches.

@item  @samp{-B <num>} 
@itemx  @samp{--before-context <num>} 
Show <num> leading lines, and place a line containing @samp{--} between
contiguous groups of matches.

@item  @samp{-W} 
@itemx  @samp{--function-context} 
Show the surrounding text from the previous line containing a function name
up to the one before the next function name, effectively showing the whole
function in which the match was found. The function names are determined in
the same way as @samp{git diff} works out patch hunk headers (see @emph{Defining a
custom hunk-header} in gitattributes(5)).

@item  @samp{--threads <num>} 
Number of grep worker threads to use.  See @samp{grep.threads} in @emph{CONFIGURATION}
for more information.

@item  @samp{-f <file>} 
Read patterns from <file>, one per line.

Passing the pattern via <file> allows for providing a search pattern
containing a \0.

Not all pattern types support patterns containing \0. Git will error out if
a given pattern type can’t support such a pattern. The @samp{--perl-regexp}
pattern type when compiled against the PCRE v2 backend has the widest
support for these types of patterns.

In versions of Git before 2.23.0 patterns containing \0 would be silently
considered fixed. This was never documented, there were also odd and
undocumented interactions between e.g. non-ASCII patterns containing \0 and
@samp{--ignore-case}.

In future versions we may learn to support patterns containing \0 for more
search backends, until then we’ll die when the pattern type in question
doesn’t support them.

@item  @samp{-e} 
The next parameter is the pattern. This option has to be used for patterns
starting with @samp{-} and should be used in scripts passing user input to grep.
Multiple patterns are combined by @emph{or}.

@item  @samp{--and} 
@itemx  @samp{--or} 
@itemx  @samp{--not} 
@itemx  ( … ) 
Specify how multiple patterns are combined using Boolean expressions.
@samp{--or} is the default operator.  @samp{--and} has higher precedence than @samp{--or}.
@samp{-e} has to be used for all patterns.

@item  @samp{--all-match} 
When giving multiple pattern expressions combined with @samp{--or}, this flag is
specified to limit the match to files that have lines to match all of them.

@item  @samp{-q} 
@itemx  @samp{--quiet} 
Do not output matched lines; instead, exit with status 0 when there is a
match and with non-zero status when there isn’t.

@item  <tree>… 
Instead of searching tracked files in the working tree, search blobs in the
given trees.

@item  -- 
Signals the end of options; the rest of the parameters are <pathspec>
limiters.

@item  <pathspec>… 
If given, limit the search to paths matching at least one pattern.  Both
leading paths match and glob(7) patterns are supported.

For more details about the <pathspec> syntax, see the @emph{pathspec} entry in
gitglossary(7).
@end table

@noindent

@chapheading EXAMPLES

@table @asis

@item  @samp{git grep 'time_t' -- '*.[ch]'} 
Looks for @samp{time_t} in all tracked .c and .h files in the working directory
and its subdirectories.

@item  @samp{git grep -e '#define' --and \( -e MAX_PATH -e PATH_MAX \)} 
Looks for a line that has @samp{#define} and either @samp{MAX_PATH} or @samp{PATH_MAX}.

@item  @samp{git grep --all-match -e NODE -e Unexpected} 
Looks for a line that has @samp{NODE} or @samp{Unexpected} in files that have lines
that match both.

@item  @samp{git grep solution -- :^Documentation} 
Looks for @samp{solution}, excluding files in @samp{Documentation}.
@end table

@noindent

@chapheading NOTES ON THREADS

The @samp{--threads} option (and the grep.threads configuration) will be ignored
when @samp{--open-files-in-pager} is used, forcing a single-threaded execution.

When grepping the object store (with @samp{--cached} or giving tree objects),
running with multiple threads might perform slower than single threaded if
@samp{--textconv} is given and there’re too many text conversions. So if you
experience low performance in this case, it might be desirable to use
@samp{--threads=1}.

@noindent

@chapheading CONFIGURATION

@table @asis

@item  grep.lineNumber 
If set to true, enable @samp{-n} option by default.

@item  grep.column 
If set to true, enable the @samp{--column} option by default.

@item  grep.patternType 
Set the default matching behavior. Using a value of @emph{basic}, @emph{extended},
@emph{fixed}, or @emph{perl} will enable the @samp{--basic-regexp}, @samp{--extended-regexp},
@samp{--fixed-strings}, or @samp{--perl-regexp} option accordingly, while the value
@emph{default} will return to the default matching behavior.

@item  grep.extendedRegexp 
If set to true, enable @samp{--extended-regexp} option by default. This option is
ignored when the @samp{grep.patternType} option is set to a value other than
@emph{default}.

@item  grep.threads 
Number of grep worker threads to use. If unset (or set to 0), Git will use
as many threads as the number of logical cores available.

@item  grep.fullName 
If set to true, enable @samp{--full-name} option by default.

@item  grep.fallbackToNoIndex 
If set to true, fall back to git grep --no-index if git grep is executed
outside of a git repository.  Defaults to false.
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-gui,,,Top
@chapheading Name

git-gui — Gitのための移植性の高いGUI

@noindent

@chapheading Synopsis

@display
git gui [<command>] [arguments]
@end display


@noindent

@chapheading DESCRIPTION

Gitの為の Tcl/Tk ベースのGUIです。「git
gui」は、ユーザーが新しいコミットを作成し、既存のコミットを修正し、ブランチを作成し、ローカルマージを実行し、リモートリポジトリにフェッチ/プッシュすることでリポジトリに変更を加えることができるようにすることに重点を置いています。

@emph{gitk} とは異なり、 @emph{git gui} はコミットの生成と単一ファイルの注釈に焦点を合わせており、プロジェクトの履歴は表示しません。
ただし、「git gui」内から「gitk」セッションを開始するためのメニュー操作を提供します。

「git gui」は、すべての一般的なUNIXシステム、Mac OS
X、およびWindows(CygwinとMSYSの両方)で動作することが知られています。可能な限り、OS固有のユーザーインターフェイスガイドラインに従い、「git
gui」を各OSのユーザーにとってかなり自然なインターフェイスにしようとしています。

@noindent

@chapheading COMMANDS

@table @asis

@item  blame 
指定されたバージョンの指定されたファイル(または指定されていない場合は作業ディレクトリ)でblameビューアを起動します。

@item  browser 
指定されたコミット内のすべてのファイルを表示するツリーブラウザを起動します。ブラウザで選択したファイルをblemeビューアで開きます。

@item  citool 
@emph{git gui}
を開始し、シェルを終了してシェルに戻る前に、正確に1つのコミットを行うように調整します。インターフェイスはコミットアクションのみに制限されているため、アプリケーションの起動時間がわずかに短縮され、メニューバーが簡素化されます。

@item  version 
現在実行中の「git gui」のバージョンを表示します。
@end table

@noindent

@chapheading Examples

@table @asis

@item  @samp{git gui blame Makefile} 
現在の作業ディレクトリにあるファイル「Makefile」の内容を表示し、各行の元の作成者と、その行を現在の場所に移動した人の両方に注釈を付けます。コミットされていないファイルには注釈が付けられ、(存在する場合)コミットされていない変更は「まだコミットされていません」と明示されます。

@item  @samp{git gui blame v0.99.8 Makefile} 
リビジョン「v0.99.8」の「Makefile」の内容を表示し、各行に注釈を付けます。上記の例とは異なり、ファイルは作業ディレクトリではなくオブジェクトデータベースから読み取られます。

@item  @samp{git gui blame --line=100 Makefile} 
上記のように注釈をロードし、100行目を中心にビューを自動的にスクロールします。

@item  @samp{git gui citool} 
1つのコミットを行い、完了したらシェルに戻ります。このコマンドは、コミットを行う以外の方法でウィンドウが閉じられた場合、ゼロ以外の終了コードを返します。

@item  @samp{git gui citool --amend} 
インターフェイスの「Amend Last Commit」モードを自動的に開始します。

@item  @samp{git gui citool --nocommit} 
通常のcitoolとして動作しますが、コミットを行う代わりに、ゼロの終了コードで終了します。インデックスにマージされていないエントリが含まれていないことを引き続きチェックするため、
git-mergetool(1) のGUIバージョンとして使用できます。

@item  @samp{git citool} 
@samp{git gui citool} (上記)と同じです。

@item  @samp{git gui browser maint} 
@emph{maint} ブランチのツリーのブラウザを表示します。ブラウザで選択したファイルは、内部のblameビューアで表示できます。
@end table

@noindent

@chapheading SEE ALSO

@table @asis

@item  gitk(1) 
Gitリポジトリブラウザ。 ブランチ、コミット履歴、ファイルの差分を表示します。 gitkは、「git
gui」のリポジトリ視覚化操作によって開始されるユーティリティです。
@end table

@noindent

@chapheading Other

「git
gui」は実際には独立したプロジェクトとして維持されていますが、エンドユーザーの便宜のために安定したバージョンがGitスイートの一部として配布されています。

@emph{git gui} プロジェクトの公式リポジトリは以下の場所にあります:

@example
https://github.com/prati0100/git-gui.git/
@end example

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-hash-object,,,Top
@chapheading Name

git-hash-object — オブジェクトIDを計算し、オプションでファイルからブロブを作成する

@noindent

@chapheading Synopsis

@display
git hash-object [-t <type>] [-w] [--path=<file>|--no-filters] [--stdin [--literally]] [--] <file>…
git hash-object [-t <type>] [-w] --stdin-paths [--no-filters]
@end display


@noindent

@chapheading DESCRIPTION

指定のファイル(作業ツリーの外部にある可能性あり)の内容を使用して、指定されたタイプのオブジェクトのオブジェクトID値を計算し、オブジェクトIDを標準出力に報告します。オプションで結果のオブジェクトをオブジェクトデータベースに書き込みます。
<type> が指定されていない場合、デフォルトで「blob」になります。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-t <type>} 
タイプの指定(デフォルト: "blob")。

@item  @samp{-w} 
実際にオブジェクトをオブジェクトデータベースに書き込みます。

@item  @samp{--stdin} 
ファイルからではなく、標準入力からオブジェクトを読み取ります。

@item  @samp{--stdin-paths} 
コマンドラインからではなく、標準入力から1行に1つずつファイル名を読み取ります。

@item  @samp{--path} 
指定されたパスにあるオブジェクトをハッシュします。ファイルの場所はハッシュ値に直接影響しませんが、パスを使用して、オブジェクトデータベースに配置する前にオブジェクトに適用するGitフィルターを決定し、フィルターを適用した結果、実際のブロブを配置します。オブジェクトデータベースへの入力は、指定されたファイルとは異なる場合があります。このオプションは主に、作業ディレクトリの外部にある一時ファイルまたは標準入力から読み取られたファイルをハッシュする場合に役立ちます。

@item  @samp{--no-filters} 
行末変換など、属性メカニズムによって選択された入力フィルターを無視して、コンテンツをそのままハッシュします。 ファイルが標準入力から読み取られる場合、
@samp{--path} オプションが指定されていない限り、これは常に暗黙に指定されたものとみなします。

@item  @samp{--literally} 
@samp{--stdin}
が、標準のオブジェクトパースやgit-fsckチェックに合格しない可能性のあるガベージをハッシュして緩いオブジェクトにできるようにします。Git自体のストレステストや、野生で遭遇した破損または偽のオブジェクトの特性の再現に役立ちます。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-help,,,Top
@chapheading Name

git-help — Display help information about Git

@noindent

@chapheading Synopsis

@display
git help [-a|--all [--[no-]verbose]] [-g|--guides]
           [-i|--info|-m|--man|-w|--web] [COMMAND|GUIDE]
@end display


@noindent

@chapheading DESCRIPTION

With no options and no COMMAND or GUIDE given, the synopsis of the @emph{git}
command and a list of the most commonly used Git commands are printed on the
standard output.

If the option @samp{--all} or @samp{-a} is given, all available commands are printed
on the standard output.

If the option @samp{--guides} or @samp{-g} is given, a list of the Git concept guides
is also printed on the standard output.

If a command, or a guide, is given, a manual page for that command or guide
is brought up. The @emph{man} program is used by default for this purpose, but
this can be overridden by other options or configuration variables.

If an alias is given, git shows the definition of the alias on standard
output. To get the manual page for the aliased command, use @samp{git COMMAND
--help}.

Note that @samp{git --help ...} is identical to @samp{git help ...} because the former
is internally converted into the latter.

To display the git(1) man page, use @samp{git help git}.

This page can be displayed with @emph{git help help} or @samp{git help --help}

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-a} 
@itemx  @samp{--all} 
Prints all the available commands on the standard output. This option
overrides any given command or guide name.

@item  @samp{--verbose} 
When used with @samp{--all} print description for all recognized commands. This
is the default.

@item  @samp{-c} 
@itemx  @samp{--config} 
List all available configuration variables. This is a short summary of the
list in git-config(1).

@item  @samp{-g} 
@itemx  @samp{--guides} 
Prints a list of the Git concept guides on the standard output. This option
overrides any given command or guide name.

@item  @samp{-i} 
@itemx  @samp{--info} 
Display manual page for the command in the @emph{info} format. The @emph{info} program
will be used for that purpose.

@item  @samp{-m} 
@itemx  @samp{--man} 
Display manual page for the command in the @emph{man} format. This option may be
used to override a value set in the @samp{help.format} configuration variable.

By default the @emph{man} program will be used to display the manual page, but
the @samp{man.viewer} configuration variable may be used to choose other display
programs (see below).

@item  @samp{-w} 
@itemx  @samp{--web} 
Display manual page for the command in the @emph{web} (HTML)  format. A web
browser will be used for that purpose.

The web browser can be specified using the configuration variable
@samp{help.browser}, or @samp{web.browser} if the former is not set. If none of these
config variables is set, the @emph{git web--browse} helper script (called by
@emph{git help}) will pick a suitable default. See
git-web--browse(1) for more information about this.
@end table

@noindent

@chapheading CONFIGURATION VARIABLES

@noindent

@heading help.format

If no command-line option is passed, the @samp{help.format} configuration
variable will be checked. The following values are supported for this
variable; they make @emph{git help} behave as their corresponding command- line
option:

@itemize 

@item
"man" corresponds to @emph{-m|--man},

@item
"info" corresponds to @emph{-i|--info},

@item
"web" or "html" correspond to @emph{-w|--web}.
@end itemize

@noindent

@heading help.browser, web.browser and browser.<tool>.path

The @samp{help.browser}, @samp{web.browser} and @samp{browser.<tool>.path} will also be
checked if the @emph{web} format is chosen (either by command-line option or
configuration variable). See @emph{-w|--web} in the OPTIONS section above and
git-web--browse(1).

@noindent

@heading man.viewer

The @samp{man.viewer} configuration variable will be checked if the @emph{man} format
is chosen. The following values are currently supported:

@itemize 

@item
"man": use the @emph{man} program as usual,

@item
"woman": use @emph{emacsclient} to launch the "woman" mode in emacs (this only
works starting with emacsclient versions 22),

@item
"konqueror": use @emph{kfmclient} to open the man page in a new konqueror tab
(see @emph{Note about konqueror} below).
@end itemize

Values for other tools can be used if there is a corresponding
@samp{man.<tool>.cmd} configuration entry (see below).

Multiple values may be given to the @samp{man.viewer} configuration
variable. Their corresponding programs will be tried in the order listed in
the configuration file.

For example, this configuration:

@example
        [man]
                viewer = konqueror
                viewer = woman
@end example


will try to use konqueror first. But this may fail (for example, if DISPLAY
is not set) and in that case emacs' woman mode will be tried.

If everything fails, or if no viewer is configured, the viewer specified in
the @samp{GIT_MAN_VIEWER} environment variable will be tried.  If that fails too,
the @emph{man} program will be tried anyway.

@noindent

@heading man.<tool>.path

You can explicitly provide a full path to your preferred man viewer by
setting the configuration variable @samp{man.<tool>.path}. For example, you can
configure the absolute path to konqueror by setting
@emph{man.konqueror.path}. Otherwise, @emph{git help} assumes the tool is available in
PATH.

@noindent

@heading man.<tool>.cmd

When the man viewer, specified by the @samp{man.viewer} configuration variables,
is not among the supported ones, then the corresponding @samp{man.<tool>.cmd}
configuration variable will be looked up. If this variable exists then the
specified tool will be treated as a custom command and a shell eval will be
used to run the command with the man page passed as arguments.

@noindent

@heading Note about konqueror

When @emph{konqueror} is specified in the @samp{man.viewer} configuration variable, we
launch @emph{kfmclient} to try to open the man page on an already opened
konqueror in a new tab if possible.

For consistency, we also try such a trick if @emph{man.konqueror.path} is set to
something like @samp{A_PATH_TO/konqueror}. That means we will try to launch
@samp{A_PATH_TO/kfmclient} instead.

If you really want to use @emph{konqueror}, then you can use something like the
following:

@example
        [man]
                viewer = konq

        [man "konq"]
                cmd = A_PATH_TO/konqueror
@end example


@noindent

@heading Note about git config --global

Note that all these configuration variables should probably be set using the
@samp{--global} flag, for example like this:

@example
$ git config --global help.format web
$ git config --global web.browser firefox
@end example


as they are probably more user specific than repository specific.  See
git-config(1) for more information about this.

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-http-backend,,,Top
@chapheading Name

git-http-backend — Server side implementation of Git over HTTP

@noindent

@chapheading Synopsis

@display
git http-backend
@end display


@noindent

@chapheading DESCRIPTION

A simple CGI program to serve the contents of a Git repository to Git
clients accessing the repository over http:// and https:// protocols.  The
program supports clients fetching using both the smart HTTP protocol and the
backwards-compatible dumb HTTP protocol, as well as clients pushing using
the smart HTTP protocol. It also supports Git’s more-efficient "v2" protocol
if properly configured; see the discussion of @samp{GIT_PROTOCOL} in the
ENVIRONMENT section below.

It verifies that the directory has the magic file "git-daemon-export-ok",
and it will refuse to export any Git directory that hasn’t explicitly been
marked for export this way (unless the @samp{GIT_HTTP_EXPORT_ALL} environmental
variable is set).

By default, only the @samp{upload-pack} service is enabled, which serves @emph{git
fetch-pack} and @emph{git ls-remote} clients, which are invoked from @emph{git fetch},
@emph{git pull}, and @emph{git clone}.  If the client is authenticated, the
@samp{receive-pack} service is enabled, which serves @emph{git send-pack} clients,
which is invoked from @emph{git push}.

@noindent

@chapheading SERVICES

These services can be enabled/disabled using the per-repository
configuration file:

@table @asis

@item  http.getanyfile 
This serves Git clients older than version 1.6.6 that are unable to use the
upload pack service.  When enabled, clients are able to read any file within
the repository, including objects that are no longer reachable from a branch
but are still present.  It is enabled by default, but a repository can
disable it by setting this configuration item to @samp{false}.

@item  http.uploadpack 
This serves @emph{git fetch-pack} and @emph{git ls-remote} clients.  It is enabled by
default, but a repository can disable it by setting this configuration item
to @samp{false}.

@item  http.receivepack 
This serves @emph{git send-pack} clients, allowing push.  It is disabled by
default for anonymous users, and enabled by default for users authenticated
by the web server.  It can be disabled by setting this item to @samp{false}, or
enabled for all users, including anonymous users, by setting it to @samp{true}.
@end table

@noindent

@chapheading URL TRANSLATION

To determine the location of the repository on disk, @emph{git http-backend}
concatenates the environment variables PATH_INFO, which is set automatically
by the web server, and GIT_PROJECT_ROOT, which must be set manually in the
web server configuration.  If GIT_PROJECT_ROOT is not set, @emph{git
http-backend} reads PATH_TRANSLATED, which is also set automatically by the
web server.

@noindent

@chapheading EXAMPLES

All of the following examples map @samp{http://$hostname/git/foo/bar.git} to
@samp{/var/www/git/foo/bar.git}.

@table @asis

@item  Apache 2.x 
Ensure mod_cgi, mod_alias, and mod_env are enabled, set GIT_PROJECT_ROOT (or
DocumentRoot) appropriately, and create a ScriptAlias to the CGI:

@example
SetEnv GIT_PROJECT_ROOT /var/www/git
SetEnv GIT_HTTP_EXPORT_ALL
ScriptAlias /git/ /usr/libexec/git-core/git-http-backend/

# This is not strictly necessary using Apache and a modern version of
# git-http-backend, as the webserver will pass along the header in the
# environment as HTTP_GIT_PROTOCOL, and http-backend will copy that into
# GIT_PROTOCOL. But you may need this line (or something similar if you
# are using a different webserver), or if you want to support older Git
# versions that did not do that copying.
#
# Having the webserver set up GIT_PROTOCOL is perfectly fine even with
# modern versions (and will take precedence over HTTP_GIT_PROTOCOL,
# which means it can be used to override the client's request).
SetEnvIf Git-Protocol ".*" GIT_PROTOCOL=$0
@end example


To enable anonymous read access but authenticated write access, require
authorization for both the initial ref advertisement (which we detect as a
push via the service parameter in the query string), and the receive-pack
invocation itself:

@example
RewriteCond %@{QUERY_STRING@} service=git-receive-pack [OR]
RewriteCond %@{REQUEST_URI@} /git-receive-pack$
RewriteRule ^/git/ - [E=AUTHREQUIRED:yes]

<LocationMatch "^/git/">
        Order Deny,Allow
        Deny from env=AUTHREQUIRED

        AuthType Basic
        AuthName "Git Access"
        Require group committers
        Satisfy Any
        ...
</LocationMatch>
@end example


If you do not have @samp{mod_rewrite} available to match against the query
string, it is sufficient to just protect @samp{git-receive-pack} itself, like:

@example
<LocationMatch "^/git/.*/git-receive-pack$">
        AuthType Basic
        AuthName "Git Access"
        Require group committers
        ...
</LocationMatch>
@end example


In this mode, the server will not request authentication until the client
actually starts the object negotiation phase of the push, rather than during
the initial contact.  For this reason, you must also enable the
@samp{http.receivepack} config option in any repositories that should accept a
push. The default behavior, if @samp{http.receivepack} is not set, is to reject
any pushes by unauthenticated users; the initial request will therefore
report @samp{403 Forbidden} to the client, without even giving an opportunity for
authentication.

To require authentication for both reads and writes, use a Location
directive around the repository, or one of its parent directories:

@example
<Location /git/private>
        AuthType Basic
        AuthName "Private Git Access"
        Require group committers
        ...
</Location>
@end example


To serve gitweb at the same url, use a ScriptAliasMatch to only those URLs
that @emph{git http-backend} can handle, and forward the rest to gitweb:

@example
ScriptAliasMatch \
        "(?x)^/git/(.*/(HEAD | \
                        info/refs | \
                        objects/(info/[^/]+ | \
                                 [0-9a-f]@{2@}/[0-9a-f]@{38@} | \
                                 pack/pack-[0-9a-f]@{40@}\.(pack|idx)) | \
                        git-(upload|receive)-pack))$" \
        /usr/libexec/git-core/git-http-backend/$1

ScriptAlias /git/ /var/www/cgi-bin/gitweb.cgi/
@end example


To serve multiple repositories from different gitnamespaces(7) in a
single repository:

@example
SetEnvIf Request_URI "^/git/([^/]*)" GIT_NAMESPACE=$1
ScriptAliasMatch ^/git/[^/]*(.*) /usr/libexec/git-core/git-http-backend/storage.git$1
@end example


@item  Accelerated static Apache 2.x 
Similar to the above, but Apache can be used to return static files that are
stored on disk.  On many systems this may be more efficient as Apache can
ask the kernel to copy the file contents from the file system directly to
the network:

@example
SetEnv GIT_PROJECT_ROOT /var/www/git

AliasMatch ^/git/(.*/objects/[0-9a-f]@{2@}/[0-9a-f]@{38@})$          /var/www/git/$1
AliasMatch ^/git/(.*/objects/pack/pack-[0-9a-f]@{40@}.(pack|idx))$ /var/www/git/$1
ScriptAlias /git/ /usr/libexec/git-core/git-http-backend/
@end example


This can be combined with the gitweb configuration:

@example
SetEnv GIT_PROJECT_ROOT /var/www/git

AliasMatch ^/git/(.*/objects/[0-9a-f]@{2@}/[0-9a-f]@{38@})$          /var/www/git/$1
AliasMatch ^/git/(.*/objects/pack/pack-[0-9a-f]@{40@}.(pack|idx))$ /var/www/git/$1
ScriptAliasMatch \
        "(?x)^/git/(.*/(HEAD | \
                        info/refs | \
                        objects/info/[^/]+ | \
                        git-(upload|receive)-pack))$" \
        /usr/libexec/git-core/git-http-backend/$1
ScriptAlias /git/ /var/www/cgi-bin/gitweb.cgi/
@end example


@item  Lighttpd 
Ensure that @samp{mod_cgi}, @samp{mod_alias}, @samp{mod_auth}, @samp{mod_setenv} are loaded,
then set @samp{GIT_PROJECT_ROOT} appropriately and redirect all requests to the
CGI:

@example
alias.url += ( "/git" => "/usr/lib/git-core/git-http-backend" )
$HTTP["url"] =~ "^/git" @{
        cgi.assign = ("" => "")
        setenv.add-environment = (
                "GIT_PROJECT_ROOT" => "/var/www/git",
                "GIT_HTTP_EXPORT_ALL" => ""
        )
@}
@end example


To enable anonymous read access but authenticated write access:

@example
$HTTP["querystring"] =~ "service=git-receive-pack" @{
        include "git-auth.conf"
@}
$HTTP["url"] =~ "^/git/.*/git-receive-pack$" @{
        include "git-auth.conf"
@}
@end example


where @samp{git-auth.conf} looks something like:

@example
auth.require = (
        "/" => (
                "method" => "basic",
                "realm" => "Git Access",
                "require" => "valid-user"
               )
)
# ...and set up auth.backend here
@end example


To require authentication for both reads and writes:

@example
$HTTP["url"] =~ "^/git/private" @{
        include "git-auth.conf"
@}
@end example

@end table

@noindent

@chapheading ENVIRONMENT

@emph{git http-backend} relies upon the @samp{CGI} environment variables set by the
invoking web server, including:

@itemize 

@item
PATH_INFO (if GIT_PROJECT_ROOT is set, otherwise PATH_TRANSLATED)

@item
REMOTE_USER

@item
REMOTE_ADDR

@item
CONTENT_TYPE

@item
QUERY_STRING

@item
REQUEST_METHOD
@end itemize

The @samp{GIT_HTTP_EXPORT_ALL} environmental variable may be passed to
@emph{git-http-backend} to bypass the check for the "git-daemon-export-ok" file
in each repository before allowing export of that repository.

The @samp{GIT_HTTP_MAX_REQUEST_BUFFER} environment variable (or the
@samp{http.maxRequestBuffer} config variable) may be set to change the largest
ref negotiation request that git will handle during a fetch; any fetch
requiring a larger buffer will not succeed.  This value should not normally
need to be changed, but may be helpful if you are fetching from a repository
with an extremely large number of refs.  The value can be specified with a
unit (e.g., @samp{100M} for 100 megabytes). The default is 10 megabytes.

Clients may probe for optional protocol capabilities (like the v2 protocol)
using the @samp{Git-Protocol} HTTP header. In order to support these, the
contents of that header must appear in the @samp{GIT_PROTOCOL} environment
variable. Most webservers will pass this header to the CGI via the
@samp{HTTP_GIT_PROTOCOL} variable, and @samp{git-http-backend} will automatically copy
that to @samp{GIT_PROTOCOL}. However, some webservers may be more selective about
which headers they’ll pass, in which case they need to be configured
explicitly (see the mention of @samp{Git-Protocol} in the Apache config from the
earlier EXAMPLES section).

The backend process sets GIT_COMMITTER_NAME to @emph{$REMOTE_USER} and
GIT_COMMITTER_EMAIL to @emph{$@{REMOTE_USER@}@@http.$@{REMOTE_ADDR@}}, ensuring
that any reflogs created by @emph{git-receive-pack} contain some identifying
information of the remote user who performed the push.

All @samp{CGI} environment variables are available to each of the hooks invoked
by the @emph{git-receive-pack}.

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-http-fetch,,,Top
@chapheading Name

git-http-fetch — HTTPでリモートGitリポジトリからダウンロード

@noindent

@chapheading Synopsis

@display
git http-fetch [-c] [-t] [-a] [-d] [-v] [-w filename] [--recover] [--stdin | --packfile=<hash> | <commit>] <url>
@end display


@noindent

@chapheading DESCRIPTION

HTTPでリモートGitリポジトリからダウンロード

このコマンドは常にすべてのオブジェクトを取得します。歴史的に、ダウンロードするオブジェクトを選択するには、 @samp{-a} と @samp{-c} と @samp{-t}
の3つのオプションがありました。それらは現在、何も警告を出さずに無視されます。

@noindent

@chapheading OPTIONS

@table @asis

@item  commit-id 
プルするハッシュ、または [URL]/refs/ 下のファイル名 のいずれか。

@item  @samp{-a, -c, -t} 
これらのオプションは、歴史的な理由により無視されます。

@item  @samp{-v} 
ダウンロードしたものを報告します。

@item  @samp{-w <filename>} 
転送が完了した後、ローカル側ドの $GIT_DIR/refs/<filename> の下のファイル名にcommit-idを書き込みます。

@item  @samp{--stdin} 
(この場合は期待されていない)コマンドラインのコミットIDの代わりに、 @emph{githttp-fetch} は標準入力からの行を以下の形式であると期待します

@example
<commit-id>['\t'<filename-as-in--w>]
@end example

@item  @samp{--packfile=<hash>} 
内部使用のみ。 (この場合は期待されていない)コマンドラインのコミットIDの代わりに、 @emph{git http-fetch}
は指定されたURLで直接パックファイルをフェッチし、 index-pack を使用して対応する .idx ファイルと .keep
ファイルを生成します。ハッシュは一時ファイルの名前を決定するために使用され、任意です。 index-pack の出力は stdout に出力されます。
@samp{--index-pack-args} が必要です。

@item  @samp{--index-pack-args=<args>} 
内部使用のみ。 ダウンロードしたパックの内容に対して実行するコマンド。引数はスペースで区切られURLエンコードされます。

@item  @samp{--recover} 
ターゲットから到達可能なすべてのものがフェッチされていることを確認します。以前のフェッチが中断された後に使用されます。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-http-push,,,Top
@chapheading Name

git-http-push — HTTP/DAV を介してオブジェクトを別のリポジトリにプッシュする

@noindent

@chapheading Synopsis

@display
git http-push [--all] [--dry-run] [--force] [--verbose] <url> <ref> [<ref>…]
@end display


@noindent

@chapheading DESCRIPTION

リモートに不足しているオブジェクトをリモートリポジトリに送信し、リモートブランチを更新します。

@strong{注} : libcurlが7.16より古い場合、このコマンドは一時的に無効になります。
これは、組み合わせが機能しないことが報告されており、
リポジトリが破損する場合があるためです。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--all} 
リモートリポジトリが現在の状態で完全であると想定しません。また、ローカルrefの履歴全体のすべてのオブジェクトがリモートリポジトリに存在することを確認します。

@item  @samp{--force} 
通常、コマンドは、上書きに使用されたローカルrefの祖先ではないリモートrefの更新を拒否します。このフラグはこのチェックを無効にします。これが意味するのは、リモートリポジトリがコミットを失う可能性があるということです。注意して使用してください。

@item  @samp{--dry-run} 
実際に更新を送信する以外はすべて行います。

@item  @samp{--verbose} 
ローカルでウォークされているオブジェクトのリストと、リモートリポジトリに正常に送信されたオブジェクトのリストを報告します。

@item  @samp{-d} 
@itemx  @samp{-D} 
リモートリポジトリから <ref> を削除します。指定のブランチをリモートHEADにすることはできません。 @samp{-d}
を指定する場合は、以下の他の条件も満たす必要があります:

@itemize 

@item
リモートHEADは、ローカルに存在するオブジェクトに名前解決(resolve)できなければなりません。

@item
指定のブランチは、ローカルに存在するオブジェクトに名前解決(resolve)します。

@item
指定のブランチは、リモートHEADの祖先です。
@end itemize

@item  <ref>… 
更新したいリモートrefs
@end table

@noindent

@chapheading SPECIFYING THE REFS

@emph{<ref>} 指定は、単一のパターン、またはコロン ":"
で区切られた、そのようなパターンのペアのいずれかです(これは、ref名にコロンを含めることができないことを意味します)。 単一のパターン
@emph{<name>} は、 @emph{<name>:<name>} の短縮形です。

各パターンペアは、送信元側(コロンの前)と宛先側(コロンの後)で構成されます。プッシュされるrefは、ソース側に一致する一致を見つけることによって決定され、プッシュされる場所は、宛先側を使用して決定されます。

@itemize 

@item
<src> がローカルrefの1つと正確に一致しない場合は、エラーになります。

@item
<dst> がどのリモートrefとも一致しない場合、以下のどちらかです

@itemize 

@item
"refs/" で始まる必要があります。この場合、文字通り <dst> が宛先として使用されます。

@item
<src> == <dst> かつ <src> に一致するrefは、リモートrefのセットに存在してはなりません。ローカルで一致するref <src>
は、宛先の名前として使用されます。
@end itemize
@end itemize

@samp{--force} の指定が無く、<dst> が存在しない場合または <dst> が <src>
の適切なサブセット(つまり、祖先)である場合のみリモートに保存されます。 "fast-forward check"
(早送りチェック)と呼ばれるこのチェックは、リモートrefを誤って上書きして、そこから他の人のコミットを失うことを回避するために実行されます。

@samp{--force} を使用すると、すべてのrefに対して fast-forward check が無効になります。

オプションで、<ref> パラメーターの前に「+」記号を付けて、そのrefでのみ fast-forward check を無効にすることができます。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-imap-send,,,Top
@chapheading Name

git-imap-send — 標準入力からIMAPフォルダへパッチのコレクションを送信します

@noindent

@chapheading Synopsis

@display
git imap-send [-v] [-q] [--[no-]curl]
@end display


@noindent

@chapheading DESCRIPTION

このコマンドは、 @samp{git format-patch}
で生成されたmailboxをIMAPドラフトフォルダーにアップロードします。これにより、mailboxファイルを直接読み取ることができないメールクライアントを使用している場合と同じように、パッチを送信できます。このコマンドは、電子メールのフィールドが「From」、「Date」、「Subject」の順になっている一般的なmailboxでも機能します。

一般的な使用法は以下のようになります:

git format-patch --signoff --stdout --attach origin | git imap-send

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-v} 
@itemx  @samp{--verbose} 
にぎやかにしろや。

@item  @samp{-q} 
@itemx  @samp{--quiet} 
静かにしろや。

@item  @samp{--curl} 
トンネリングしない限り、libcurl を使用してIMAPサーバーと通信します。Gitが USE_CURL_FOR_IMAP_SEND
オプションを設定せずにビルドされた場合は無視されます。

@item  @samp{--no-curl} 
libcurl を使用する代わりに、git独自のIMAPルーチンを使用してIMAPサーバーと通信します。Gitが NO_OPENSSL
オプションを設定してビルドされた場合は無視されます。
@end table

@noindent

@chapheading CONFIGURATION

このツールを使用するには、 @samp{imap.folder} と、 @samp{imap.tunnel} または @samp{imap.host}
のいずれかを、適切な値に設定する必要があります。

@table @asis

@item  imap.folder 
メールをドロップするフォルダー。通常はドラフトフォルダーです。
例：「INBOX.Drafts」とか「INBOX/Drafts」とか「[Gmail]/Drafts」です。必須です。

@item  imap.tunnel 
サーバーへの直接ネットワーク接続を使用する代わりに、コマンドがパイプされるIMAPサーバーへのトンネルをセットアップするために使用されるコマンド。
imap.host が設定されていない場合に必須です。

@item  imap.host 
サーバーを識別するURL。 非セキュア接続には @samp{imap://} プレフィックスを使用し、セキュア接続には @samp{imaps://}
プレフィックスを使用します。 imap.tunnel が設定されている場合は無視されますが、それ以外の場合は必須です。

@item  imap.user 
サーバーにログインするときに使用するユーザー名。

@item  imap.pass 
サーバーにログインするときに使用するパスワード。

@item  imap.port 
サーバー上で接続する整数のポート番号。 デフォルトは、 imap:// ホストの場合は143、 imaps:// ホストの場合は993です。
imap.tunnel が設定されている場合は無視されます。

@item  imap.sslverify 
SSL/TLS接続で使用されるサーバー証明書の検証を有効/無効にするブール値。デフォルトは @samp{true} です。 imap.tunnel
が設定されている場合は無視されます。

@item  imap.preformattedHTML 
パッチを送信するときにhtmlエンコーディングの使用を有効/無効にするブール値。 htmlでエンコードされたパッチは <pre>
で囲まれ、コンテンツタイプは text/html になります。皮肉なことに、このオプションを有効にすると、Thunderbirdはパッチを
plane/text の format=fixed メールとして送信します。デフォルトは @samp{false} です。

@item  imap.authMethod 
IMAPサーバーでの認証の認証方法を指定します。GitがNO_CURLオプションを使用してビルドされた場合、curlバージョンが7.34.0より古い場合、またはgit-imap-sendを
@samp{--no-curl} オプションを指定して実行している場合、サポートされるメソッドは @emph{CRAM-MD5}
のみです。これが設定されていない場合、「git imap-send」は基本的なIMAPプレーンテキストLOGINコマンドを使用します。
@end table

@noindent

@chapheading EXAMPLES

トンネル(tunnel)モード使用:

@example
[imap]
    folder = "INBOX.Drafts"
    tunnel = "ssh -q -C user@@example.com /usr/bin/imapd ./Maildir 2> /dev/null"
@end example

直接(direct)モード使用:

@example
[imap]
    folder = "INBOX.Drafts"
    host = imap://imap.example.com
    user = bob
    pass = p4ssw0rd
@end example

SSLで直接モードを使用:

@example
[imap]
    folder = "INBOX.Drafts"
    host = imaps://imap.example.com
    user = bob
    pass = p4ssw0rd
    port = 123
    ; sslVerify = false
@end example

@quotation

@strong{Note}

接続の問題が、セットアップしようとしている(またはセットアップ済の)プライベートサーバー @samp{example.com}
で使用している証明書が正しく検証されていないことが原因であると思われる場合、トラブルシューティング中に @samp{sslVerify=false}
を使用することをお勧めします。
@end quotation

GmailのIMAPインターフェースの使用:

@example
[imap]
        folder = "[Gmail]/Drafts"
        host = imaps://imap.gmail.com
        user = user@@gmail.com
        port = 993
@end example


@quotation

@strong{Note}

"Folder doesn’t exist" というエラーが発生した場合は、代わりに @samp{folder = "[Google Mail]/Drafts"}
を使用する必要があります。
@end quotation

@quotation

@strong{Note}

Gmailアカウントが英語以外の言語に設定されている場合、 "Drafts" フォルダの名前がローカライズされます。
@end quotation

コミットを送信する準備ができたら、以下のコマンドを実行します:

@example
$ git format-patch --cover-letter -M --stdout origin/master | git imap-send
@end example

メールクライアントで行の折り返しを無効にしてください(GmailのWebインターフェイスは何があっても行を折り返すため、実際のIMAPクライアント(real
IMAP client)を使用する必要があります)。

@noindent

@chapheading CAUTION

電子メールプログラムによって送信される電子メールメッセージがプロジェクトの基準を満たしていることを確認するのは、依然としてあなたの責任です。多くのプロジェクトは、パッチを電子メールに添付することを好みません。一部のメールエージェントは、パッチを失敗させる方法でパッチを変換します(たとえば、行を折り返し、format=flowed
として送信します)。これをチェックしておかないと、怒りの炎があなたを襲います。

特に Thunderbird は問題があることが知られています。
Thunderbird のユーザーは右記のWebページにアクセスして詳細を確認できます:
@uref{http://kb.mozillazine.org/Plain_text_e-mail_-_Thunderbird#Completely_plain_email,http://kb.mozillazine.org/Plain_text_e-mail_-_Thunderbird#Completely_plain_email}

@noindent

@chapheading SEE ALSO

git-format-patch(1), git-send-email(1), mbox(5)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-index-pack,,,Top
@chapheading Name

git-index-pack — 既存のパックされたアーカイブのパックインデックスファイル構築

@noindent

@chapheading Synopsis

@display
git index-pack [-v] [-o <index-file>] [--[no-]rev-index] <pack-file>
git index-pack --stdin [--fix-thin] [--keep] [-v] [-o <index-file>]
                  [--[no-]rev-index] [<pack-file>]
@end display


@noindent

@chapheading DESCRIPTION

指定されたファイルからパックされたアーカイブ(.pack)を読み取り、そのためのパックインデックスファイル(.idx)を作成します。オプションで、指定されたパックの逆インデックス(reverse-index)(.rev)を書き込みます。パックされたアーカイブは、パックインデックスとともに、Gitリポジトリの
objects/pack/ ディレクトリに配置できます。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-v} 
進捗状況など、何が起こっているかについて詳しく説明します。

@item  @samp{-o <index-file>} 
生成されたパックインデックスを指定のファイルに書き込みます。このオプションがない場合、パックインデックスファイルの名前は、 .pack を .idx
に置き換えることにより、パックされたアーカイブファイルの名前から作成されます(パックされたアーカイブの名前が .pack
で終わらない場合、プログラムは失敗します)。

@item  @samp{--[no-]rev-index} 
このフラグが指定されている場合、指定されたパックに対応する逆インデックス(reverse index)(@samp{.rev} ファイル)を生成します。
@samp{--verify} が指定されている場合は、既存の逆インデックスが正しいことを確認し保証(ensure)します。
@samp{pack.writeReverseIndex} よりも優先されます。

@item  @samp{--stdin} 
このフラグが指定されると、コマンドラインの代わりにパックがstdinから読み取られ、コピーが <pack-file> に書き込まれます。
<pack-file> が指定されていない場合、パックは現在のGitリポジトリの objects/pack/
ディレクトリに書き込まれ、デフォルト名はパックの内容から決定されます。 <pack-file> が指定されていない場合は、 @samp{--keep}
を使用して、このプロセスと @samp{git repack} の間の競合状態を防ぐことを検討してください。

@item  @samp{--fix-thin} 
デルタ化オブジェクトが基づいている除外されたオブジェクトをパックに追加することにより、 @samp{git pack-objects --thin}
によって生成された「薄い」パックを修正します(詳細は git-pack-objects(1) を参照)。
このオプションは、@samp{--stdin} と組み合わせた場合にのみ意味があります。

@item  @samp{--keep} 
インデックスを最終的な宛先に移動する前に、関連するパックファイル用に空の .keep ファイルを作成します。このオプションは通常、 @samp{--stdin}
と一緒に指定する必要があります。これは、パックに含まれるオブジェクトを使用するようにrefを更新する前に、 @samp{git repack}
プロセスが新しく構築されたパックとインデックスを同時に削除しないようにするためです。

@item  @samp{--keep=<msg>} 
@samp{--keep} のように、インデックスを最終的な宛先に移動する前に .keep ファイルを作成しますが、空のファイルを作成するのではなく、 .keep
ファイル内で <msg> の後にLFを配置します。 後ですべての .keep ファイル内で <msg>
メッセージを検索して、使い古されたものを見つけることができます。

@item  @samp{--index-version=<version>[,<offset>]} 
これは、テストスイートでのみ使用することを目的としています。
生成されたパックインデックスのバージョンを強制し、指定されたオフセットにあるオブジェクトに64ビットインデックスエントリを強制することができます。

@item  @samp{--strict} 
パックに壊れたオブジェクトやリンクが含まれている場合は、終了します(die)。

@item  @samp{--progress-title} 
内部使用のみ。

プログレスバーのタイトルを設定します。 タイトルはデフォルトで「Receiving objects」(オブジェクトの受信)であり、 @samp{--stdin}
が指定されている場合は「Indexing objects」(オブジェクトのインデックス作成)です。

@item  @samp{--check-self-contained-and-connected} 
パックに壊れたリンクが含まれている場合は終了(die)します。内部使用のみ。

@item  @samp{--fsck-objects} 
内部使用のみ。

パックに壊れたオブジェクトが含まれている場合は終了(die)します。 存在しない .gitmodulesblob
を指すツリーがパックに含まれている場合、 pack/idx
ファイルの名前に含まれるハッシュの後に、(呼び出し元が確認できるように)そのブロブのハッシュを出力します(「Notes」参照)。

@item  @samp{--threads=<n>} 
デルタを解決するときに生成するスレッドの数を指定します。これには、インデックスパックを pthreads
でコンパイルする必要があります。そうでない場合、このオプションは警告とともに無視されます。これは、マルチプロセッサマシンでのパッキング時間を短縮することを目的としています。ただし、デルタ検索ウィンドウに必要なメモリ量は、スレッド数で乗算されます。0を指定すると、GitはCPUの数を自動検出し、最大3つのスレッドを使用します。

@item  @samp{--max-input-size=<size>} 
パックが <size> を超える場合は、終了(die)します。

@item  @samp{--object-format=<hash-algorithm>} 
パックに指定するオブジェクト形式(ハッシュアルゴリズム)を指定します。有効な値は @samp{sha1} と @samp{sha256} (有効な場合)
です。デフォルトは、(@samp{extensions.objectFormat}
で設定する、)現在のリポジトリのアルゴリズム、または値が設定されていないかリポジトリの外部にある場合は @emph{sha1} です。

このオプションは @samp{--stdin} オプションと一緒に使用することはできません。

このオプションは実験的なものです！ SHA-256のサポートは実験的なものであり、まだ初期段階です。
SHA-256リポジトリは、通常、「通常の」SHA-1リポジトリと作業を共有できません。
たとえば、SHA-256リポジトリに関連するGit内部ファイル形式は、下位互換性のない方法で変更される可能性があると想定する必要があります。テスト目的でのみ
@samp{--object-format=sha256} を使用してください。
@end table

@noindent

@chapheading NOTES

一旦インデックスが作成されると、 pack/idx ファイルの名前に含まれるハッシュがstdoutに出力されます。 @samp{--stdin}
も使用された場合、これには @samp{pack\t} または新しい.keepファイルが正常に作成された場合は @samp{keep\t}
のいずれかのプレフィックスが付きます。
.これは、上記の @samp{git repack} との競合を防ぐためにロックとして使用されているkeepファイルを
削除するのに役立ちます。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-init-db,,,Top
@chapheading Name

git-init-db — 空のGitリポジトリを作成

@noindent

@chapheading Synopsis

@display
git init-db [-q | --quiet] [--bare] [--template=<template_directory>] [--separate-git-dir <git dir>] [--shared[=<permissions>]]
@end display


@noindent

@chapheading DESCRIPTION

これは git-init(1) の同義語です。 git-init(1) コマンドの文書を参照してください。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-init,,,Top
@chapheading Name

git-init — Create an empty Git repository or reinitialize an existing one

@noindent

@chapheading Synopsis

@display
git init [-q | --quiet] [--bare] [--template=<template_directory>]
          [--separate-git-dir <git dir>] [--object-format=<format>]
          [-b <branch-name> | --initial-branch=<branch-name>]
          [--shared[=<permissions>]] [directory]
@end display


@noindent

@chapheading DESCRIPTION

This command creates an empty Git repository - basically a @samp{.git} directory
with subdirectories for @samp{objects}, @samp{refs/heads}, @samp{refs/tags}, and template
files.  An initial branch without any commits will be created (see the
@samp{--initial-branch} option below for its name).

If the @samp{$GIT_DIR} environment variable is set then it specifies a path to
use instead of @samp{./.git} for the base of the repository.

If the object storage directory is specified via the @samp{$GIT_OBJECT_DIRECTORY}
environment variable then the sha1 directories are created underneath -
otherwise the default @samp{$GIT_DIR/objects} directory is used.

Running @emph{git init} in an existing repository is safe. It will not overwrite
things that are already there. The primary reason for rerunning @emph{git init}
is to pick up newly added templates (or to move the repository to another
place if --separate-git-dir is given).

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-q} 
@itemx  @samp{--quiet} 
Only print error and warning messages; all other output will be suppressed.

@item  @samp{--bare} 
Create a bare repository. If @samp{GIT_DIR} environment is not set, it is set to
the current working directory.

@item  @samp{--object-format=<format>} 
Specify the given object format (hash algorithm) for the repository.  The
valid values are @emph{sha1} and (if enabled) @emph{sha256}.  @emph{sha1} is the default.

このオプションは実験的なものです！ SHA-256のサポートは実験的なものであり、まだ初期段階です。
SHA-256リポジトリは、通常、「通常の」SHA-1リポジトリと作業を共有できません。
たとえば、SHA-256リポジトリに関連するGit内部ファイル形式は、下位互換性のない方法で変更される可能性があると想定する必要があります。テスト目的でのみ
@samp{--object-format=sha256} を使用してください。

@item  @samp{--template=<template_directory>} 
Specify the directory from which templates will be used.  (See the "TEMPLATE
DIRECTORY" section below.)

@item  @samp{--separate-git-dir=<git dir>} 
Instead of initializing the repository as a directory to either @samp{$GIT_DIR}
or @samp{./.git/}, create a text file there containing the path to the actual
repository.  This file acts as filesystem-agnostic Git symbolic link to the
repository.

If this is reinitialization, the repository will be moved to the specified
path.

@item  @samp{-b <branch-name>} 
@itemx  @samp{--initial-branch=<branch-name>} 
Use the specified name for the initial branch in the newly created
repository.  If not specified, fall back to the default name (currently
@samp{master}, but this is subject to change in the future; the name can be
customized via the @samp{init.defaultBranch} configuration variable).

@item  @samp{--shared[=(false|true|umask|group|all|world|everybody|0xxx)]} 
Specify that the Git repository is to be shared amongst several users.  This
allows users belonging to the same group to push into that repository.  When
specified, the config variable "core.sharedRepository" is set so that files
and directories under @samp{$GIT_DIR} are created with the requested
permissions.  When not specified, Git will use permissions reported by
umask(2).

The option can have the following values, defaulting to @emph{group} if no value
is given:

@table @asis

@item  @emph{umask} (or @emph{false}) 
Use permissions reported by umask(2). The default, when @samp{--shared} is not
specified.

@item  @emph{group} (or @emph{true}) 
Make the repository group-writable, (and g+sx, since the git group may be
not the primary group of all users). This is used to loosen the permissions
of an otherwise safe umask(2) value. Note that the umask still applies to
the other permission bits (e.g. if umask is @emph{0022}, using @emph{group} will not
remove read privileges from other (non-group) users). See @emph{0xxx} for how to
exactly specify the repository permissions.

@item  @emph{all} (or @emph{world} or @emph{everybody}) 
Same as @emph{group}, but make the repository readable by all users.

@item  @emph{0xxx} 
@emph{0xxx} is an octal number and each file will have mode @emph{0xxx}. @emph{0xxx} will
override users' umask(2) value (and not only loosen permissions as @emph{group}
and @emph{all} does). @emph{0640} will create a repository which is group-readable,
but not group-writable or accessible to others. @emph{0660} will create a repo
that is readable and writable to the current user and group, but
inaccessible to others.
@end table
@end table

By default, the configuration flag @samp{receive.denyNonFastForwards} is enabled
in shared repositories, so that you cannot force a non fast-forwarding push
into it.

If you provide a @emph{directory}, the command is run inside it. If this
directory does not exist, it will be created.

@noindent

@chapheading TEMPLATE DIRECTORY

Files and directories in the template directory whose name do not start with
a dot will be copied to the @samp{$GIT_DIR} after it is created.

The template directory will be one of the following (in order):

@itemize 

@item
the argument given with the @samp{--template} option;

@item
the contents of the @samp{$GIT_TEMPLATE_DIR} environment variable;

@item
the @samp{init.templateDir} configuration variable; or

@item
the default template directory: @samp{/usr/share/git-core/templates}.
@end itemize

The default template directory includes some directory structure, suggested
"exclude patterns" (see gitignore(5)), and sample hook files.

The sample hooks are all disabled by default. To enable one of the sample
hooks rename it by removing its @samp{.sample} suffix.

See githooks(5) for more general info on hook execution.

@noindent

@chapheading EXAMPLES

@table @asis

@item  Start a new Git repository for an existing code base 
@example
$ cd /path/to/my/codebase
$ git init      (1)
$ git add .     (2)
$ git commit    (3)
@end example


@table @asis

@item @pxref{CO1-1,,(1)}
Create a /path/to/my/codebase/.git directory.

@item @pxref{CO1-2,,(2)}
Add all existing files to the index.

@item @pxref{CO1-3,,(3)}
Record the pristine state as the first commit in the history.
@end table
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-instaweb,,,Top
@chapheading Name

git-instaweb — gitwebで作業リポジトリをインスタントにブラウズします

@noindent

@chapheading Synopsis

@display
git instaweb [--local] [--httpd=<httpd>] [--port=<port>]
               [--browser=<browser>]
git instaweb [--start] [--stop] [--restart]
@end display


@noindent

@chapheading DESCRIPTION

ローカルリポジトリを参照するための @samp{gitweb} とWebサーバーを設定するための簡単なスクリプト。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-l} 
@itemx  @samp{--local} 
WebサーバーをローカルIP(127.0.0.1)にのみバインドします。

@item  @samp{-d} 
@itemx  @samp{--httpd} 
実行されるHTTPデーモンのコマンドライン。コマンドラインオプションはここで指定でき、構成ファイルはコマンドラインの最後に追加されます。現在、apache2、lighttpd、mongoose、plackup、python、webrickがサポートされています。（デフォルト：lighttpd）

@item  @samp{-m} 
@itemx  @samp{--module-path} 
モジュールパス(httpdがApacheの場合にのみ必要)。(デフォルト: /usr/lib/apache2/modules )

@item  @samp{-p} 
@itemx  @samp{--port} 
httpdをバインドするポート番号。(デフォルト: 1234)

@item  @samp{-b} 
@itemx  @samp{--browser} 
gitwebページを表示するために使用する必要があるWebブラウザー。これは、gitwebインスタンスのURLとともに @emph{git
web--browse} ヘルパースクリプトに渡されます。詳細については、 git-web--browse(1)
を参照してください。スクリプトが失敗した場合、URLはstdoutに出力されます。

@item  start 
@itemx  @samp{--start} 
httpdインスタンスを開始して本コマンドを終了します。新しいインスタンスを生成するために、必要に応じて構成ファイルを再生成します。

@item  stop 
@itemx  @samp{--stop} 
httpdインスタンスを停止して本コマンドを終了します。これにより、新しいインスタンスを生成するための構成ファイルが生成されたり、ブラウザーが閉じられたりすることはありません。

@item  restart 
@itemx  @samp{--restart} 
httpdインスタンスを再起動して本コマンドを終了します。 新しいインスタンスを生成するために、必要に応じて構成ファイルを再生成します。
@end table

@noindent

@chapheading CONFIGURATION

あなたは .git/config で構成を指定できます

@example
[instaweb]
        local = true
        httpd = apache2 -f
        port = 4321
        browser = konqueror
        modulePath = /usr/lib/apache2/modules
@end example


構成変数 @samp{instaweb.browser} が設定されていない場合に、@samp{web.browser} が定義されていれば、代わりに
@samp{web.browser} が使用されます。詳細については、 git-web--browse(1) を参照してください。

@noindent

@chapheading SEE ALSO

gitweb(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-interpret-trailers,,,Top
@chapheading Name

git-interpret-trailers — コミットメッセージの構造化情報を追加またはパースします

@noindent

@chapheading Synopsis

@display
git interpret-trailers [<options>] [(--trailer <token>[(=|:)<value>])…] [<file>…]
git interpret-trailers [<options>] [--parse] [<file>…]
@end display


@noindent

@chapheading DESCRIPTION

コミットメッセージの自由形式の部分の最後に、RFC 822 電子メールヘッダーに似たトレーラー(trailer)行の、追加またはパースを支援します。

このコマンドは、<file> 引数または、
<file>が指定されていない場合は標準入力のいずれかから、いくつかのパッチまたはコミットメッセージを読み取ります。 @samp{--parse}
が指定されている場合、出力はパースされたトレーラーで構成されます。

それ以外の場合、このコマンドは、 @samp{--trailer}
オプション(存在する場合)を使用して渡された引数を、各入力ファイルのコミットメッセージ部分に適用します。結果は標準出力に出力されます。

一部の構成変数は、 @samp{--trailer}
引数が各コミットメッセージに適用される方法と、コミットメッセージ内の既存のトレーラーが変更される方法を制御します。また、トレーラーを自動的に追加することもできます。

デフォルトでは、 @samp{--trailer} で指定された @emph{<token>=<value>} または @emph{<token>:<value>}
引数は、既存の最後のトレーラーのペア(<token>,
<value>)が指定のペア異なる場合(または、既存のに無い場合)にのみ、指定したモノが既存のトレーラーの後に追加されます。
<token>と<value>の部分は、先頭と末尾の空白がトリミングされ、以下のようなメッセージとして出力されます:

@example
token: value
@end example


これは、トリミングされた<token>と<value>が `: ` (1つのコロンとそれに続く1つのスペース)で区切られることを意味します。

デフォルトでは、新しいトレーラーは既存のすべてのトレーラーの後に出力されます。既存のトレーラーがない場合は、出力のコミットメッセージ部分の後に新しいトレーラーが出力されます。コミットメッセージ部分の最後に空白しかない行が存在しない場合は、新しいトレーラーの前に空行を1行追加します。

既存のトレーラーは、(i)すべてのトレーラーであるか、または、(ii)少なくとも1つのGit生成またはユーザー構成のトレーラーを含む少なくとも25％のトレーラーで構成される、1行以上のグループが入力メッセージから抽出されます。グループの前には、1行以上の空行(または空白のみの行)が必要です。グループは、メッセージの最後にあるか、
@samp{---}
で始まる行の前の最後の非空白行である必要があります(その後にスペースまたは行の終わりが続きます)。このような3つのマイナス記号(@samp{---})は、メッセージのパッチ部分を開始します。
以下の @samp{--no-divider} も参照してください。

トレーラーを読み取る場合、トークンと区切り文字と値の後に空白(whitespaces)を含めることができます。トークンと値の中に空白を含めることもできます。値は、RFC
822の "folding"(折りたたみ)のように、空白で始まる後続の各行で複数の行に分割される場合があります。

注意:
トレーラーはRFC822ヘッダー規則の多くに従うことを意図してませんし、従わないことに注意してください。たとえば、それらはエンコーディング規則や、おそらく他の多くの規則に従いません。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--in-place} 
その場でファイルを編集します。

@item  @samp{--trim-empty} 
トレーラーの <value>
部分に空白(whitespace)のみが含まれている場合、結果のメッセージからトレーラー全体が削除されます。これは、新しいトレーラーだけでなく、既存のトレーラーにも適用されます。

@item  @samp{--trailer <token>[(=|:)<value>]} 
入力メッセージのトレーラーとして適用する必要があるペア（<token>、<value>）を指定します。詳しくはこのコマンドの説明を参照してください。

@item  @samp{--where <placement>} 
@itemx  @samp{--no-where} 
すべての新しいトレーラーが追加される場所を指定します。 @samp{--where} で指定する設定は、すべての構成変数をオーバーライドし、 @emph{--where}
または @emph{--no-where} が次に出現するまですべての @samp{--trailer} オプションに適用されます。 <placement>
として可能な値は、 @samp{after} または @samp{before} または @samp{end} または @samp{start} です。

@item  @samp{--if-exists <action>} 
@itemx  @samp{--no-if-exists} 
メッセージに同じ <token> を持つトレーラーがすでに少なくとも1つある場合に、実行される操作を指定します。 @samp{--if-exists}
で指定する設定は、すべての構成変数をオーバーライドし、 @samp{--if-exists} または @samp{--no-if-exists} が次に出現するまですべての
@samp{--trailer} オプションに適用されます。可能な操作は、 @samp{addIfDifferent} または
@samp{addIfDifferentNeighbor} または @samp{add} または @samp{replace} または @samp{doNothing} です。

@item  @samp{--if-missing <action>} 
@itemx  @samp{--no-if-missing} 
メッセージに同じ <token> を持つ他のトレーラーがない場合に実行される操作を指定します。 @samp{--if-missing}
で指定する設定は、すべての構成変数をオーバーライドし、 @samp{--if-missing} または @samp{--no-if-missing}
が次に出現するまですべての @samp{--trailer} オプションに適用されます。可能な操作は @samp{doNothing} または @samp{add} です。

@item  @samp{--only-trailers} 
トレーラーのみを出力し、入力の他の部分は出力しません。

@item  @samp{--only-input} 
入力に存在するトレーラーのみを出力します。コマンドラインや、構成された @samp{trailer.*} ルールに従って追加することはありません。

@item  @samp{--unfold} 
トレーラーの複数行に渡る先頭空白による継続を解除して、各トレーラーが1行で完結するよう出力します。

@item  @samp{--parse} 
@samp{--only-trailers --only-input --unfold} の便利なエイリアス。

@item  @samp{--no-divider} 
@samp{---} をコミットメッセージの終わりとして扱わないでください。(電子メールや `git
format-patch`の出力が含まれておらず、)入力にコミットメッセージ自体だけが含まれていることがわかっている場合にこれを使用します。
@end table

@noindent

@chapheading CONFIGURATION VARIABLES

@table @asis

@item  trailer.separators 
このオプションは、どの文字がトレーラー区切り文字として認識されるかを示します。 デフォルトでは、 @samp{:}
のみがトレーラー区切り文字として認識されます。ただし、他のgitコマンドとの互換性のために、コマンドラインでは @samp{=} が常に受け入れられます。

このオプションで指定された最初の1文字は、このトレーラーの構成で別の区切り文字が指定されていない場合に使用されるデフォルトの文字になります。

たとえば、このオプションの値が "%=$" の場合、 @emph{<token><sep><value>} の形式を使用し、<sep> に @samp{%} または @samp{=}
または @samp{$} と、空白達を含む行のみトレーラーと見なされます。 また、 @samp{%}
がデフォルトの区切り文字として使用されるため、デフォルトでは、トレーラーは @samp{<token>% <value>}
と出力されます(デフォルトの場合はこのようにトークンと値の間に1つの区切り文字列の最初の文字(パーセント記号)と「1つのスペース」が出力されます)。

@item  trailer.where 
このオプションは、新しいトレーラーが追加される場所を示します。

これは、デフォルトの @samp{end} の他に @samp{start} または @samp{after} または @samp{before} にすることができます。

@samp{end} の場合、新しいトレーラーはそれぞれ、既存のトレーラーの最後に出力されます。

@samp{start} の場合、新しい各トレーラーは、既存のトレーラーの最後ではなく、最初に出力されます。

@samp{after} の場合、新しいトレーラーはそれぞれ、同じ <token> を持つ最後のトレーラーの直後に出力されます。

@samp{before} の場合、新しい各トレーラーは、同じ <token> を持つ最初のトレーラーの直前に出力されます。

@item  trailer.ifexists 
このオプションを使用すると、メッセージに同じ <token> を持つトレーラーがすでに少なくとも1つある場合に、実行する操作を選択できます。

このオプションの有効な値は、 @samp{addIfDifferentNeighbor} (デフォルト)、 または @samp{addIfDifferent} または
@samp{add} または @samp{replace} または @samp{doNothing} です。

@samp{addIfDifferentNeighbor}
を使用すると、同一のペア(<token>、<value>)のトレーラーが、新しいトレーラーが追加される行の上または下にない場合にのみ、新しいトレーラーが追加されます。

@samp{addIfDifferent}
を使用すると、同じペア(<token>、<value>)のトレーラーがメッセージに含まれていない場合にのみ、新しいトレーラーが追加されます。

@samp{add}
を使用すると、同じペア（<token>、<value>）のトレーラーがすでにメッセージに含まれている場合でも、新しいトレーラーが追加されます。

@samp{replace} を使用すると、同じ <token>
を持つ既存のトレーラーが削除され、新しいトレーラーが追加されます。削除されるトレーラーは、新しいトレーラーが追加される場所に最も近い(同じ
<token> を持つ)トレーラーになります。

@samp{doNothing} を使用すると、何も実行されません。 つまり、メッセージに同じ <token>
を持つトレーラーがすでに存在する場合、新しいトレーラーは追加されません。

@item  trailer.ifmissing 
このオプションを使用すると、メッセージに同じ <token> を持つトレーラーがまだない場合に実行する操作を選択できます。

このオプションの有効な値は、 @samp{add} (デフォルト)と @samp{doNothing} です。

`add`を使用すると、新しいトレーラーが追加されます。

@samp{doNothing} を使用すると、何も実行されません。

@item  trailer.<token>.key 
この キー(key) は、トレーラーで <token>
の代わりに使用されます。このキーの後ろに、区切り文字を出力してから、いくつかのスペース文字を出力できます。デフォルトでは、有効な区切り文字は @samp{:}
のみですが、これは @samp{trailer.separators} 構成変数を使用して変更できます。

トレーラーを追加するときに、この構成値内に区切り文字がある場合、 <token>
とデフォルトの区切り文字の両方(つまり、<token><区切り文字><空白1つ>)がキーで置き換えられます。

@item  trailer.<token>.where 
このオプションは、「trailer.where」構成変数と同じ値を取り、指定された <token>
を持つトレーラーに対してそのオプションで指定されたものをオーバーライドします。

@item  trailer.<token>.ifexists 
このオプションは、「trailer.ifexists」構成変数と同じ値を取り、指定された <token>
を持つトレーラーに対してそのオプションで指定されたものをオーバーライドします。

@item  trailer.<token>.ifmissing 
このオプションは、「trailer.ifmissing」構成変数と同じ値を取り、指定された <token>
を持つトレーラーに対してそのオプションで指定されたものをオーバーライドします。

@item  trailer.<token>.command 
このオプションは、指定のコマンドに引数として何も渡さないことを除いて、 @samp{trailer.<token>.cmd}
と同じように動作します。代わりに、文字列に最初に現れる置換文字列 $ARG のみ、引数として渡される値に置き換えられます。

@emph{trailer.<token>.command} オプションは非推奨になり’trailer.<token>.cmd'
が採用されました。これは、ユーザーのコマンドの $ARG が一度だけ置き換えられることと、 $ARG を置き換える独創的な方法が安全でないためです。

@emph{trailer.<token>.cmd} と @emph{trailer.<token>.command} の両方が同じ<token>で指定されている場合、
@emph{trailer.<token>.cmd} が使用され、 @emph{trailer.<token>.command} は無視されます。

@item  trailer.<token>.cmd 
このオプションを使用して、呼び出されるシェルコマンドを指定できます。最初の1回は、指定の <token> を持つトレーラーを自動的に追加し、その後、毎回
@emph{--trailer <token>=<value>} 引数を使用して、このオプションが生成するトレーラーの <value> を変更します。

指定のコマンドを最初に呼び出して、指定の <token> のトレーラーを追加すると、動作は、「git
interpret-trailers」コマンドの先頭に特別な @samp{--trailer <token>=<value>}
引数が追加されたかのように振る舞います。ここで、 <value> は、先頭と末尾の空白が削除された、コマンドからの標準出力と見なされます。

いくつかの @samp{--trailer <token>=<value>' 引数がコマンドラインで渡された場合、同じ <token>
を持つこれらの引数ごとにコマンドが1回呼び出されます。そして、これらの引数の <value>
部分は、もしあれば、最初の引数としてコマンドに渡されます。このようにして、コマンドは `--trailer <token>=<value>}
引数で渡された <value> から計算された <value> を生成できます。
@end table

@noindent

@chapheading EXAMPLES

@itemize 

@item
「Signed-off-by」キーを使用して「sign」トレーラーを構成してから、これらのトレーラーのうち2つをメッセージに追加します:

@example
$ git config trailer.sign.key "Signed-off-by"
$ cat msg.txt
subject

message
$ cat msg.txt | git interpret-trailers --trailer 'sign: Alice <alice@@example.com>' --trailer 'sign: Bob <bob@@example.com>'
subject

message

Signed-off-by: Alice <alice@@example.com>
Signed-off-by: Bob <bob@@example.com>
@end example


@item
@samp{--in-place} オプションを使用して、メッセージファイルをその場で編集します:

@example
$ cat msg.txt
subject

message

Signed-off-by: Bob <bob@@example.com>
$ git interpret-trailers --trailer 'Acked-by: Alice <alice@@example.com>' --in-place msg.txt
$ cat msg.txt
subject

message

Signed-off-by: Bob <bob@@example.com>
Acked-by: Alice <alice@@example.com>
@end example


@item
最後のコミットをパッチとして抽出し、それに「Cc」トレーラーと「Reviewed-by」トレーラーを追加します:

@example
$ git format-patch -1
0001-foo.patch
$ git interpret-trailers --trailer 'Cc: Alice <alice@@example.com>' --trailer 'Reviewed-by: Bob <bob@@example.com>' 0001-foo.patch >0001-bar.patch
@end example


@item
「Signed-off-by: 」がまだない場合にのみ、作者情報を含む「Signed-off-by:
」を自動的に追加するコマンドを伴って「sign」トレーラーを構成し、それがどのように機能するかを示します:

@example
$ git config trailer.sign.key "Signed-off-by: "
$ git config trailer.sign.ifmissing add
$ git config trailer.sign.ifexists doNothing
$ git config trailer.sign.command 'echo "$(git config user.name) <$(git config user.email)>"'
$ git interpret-trailers <<EOF
> EOF

Signed-off-by: Bob <bob@@example.com>
$ git interpret-trailers <<EOF
> Signed-off-by: Alice <alice@@example.com>
> EOF

Signed-off-by: Alice <alice@@example.com>
@end example


@item
trailer.fix.key に 区切り文字 @samp{#}
を含み、その後ろにスペースを含まないキーを使用して「fix」トレーラーを構成し、それがどのように機能するかを示します:

@example
$ git config trailer.separators ":#"
$ git config trailer.fix.key "Fix #"
$ echo "subject" | git interpret-trailers --trailer fix=42
subject

Fix #42
@end example


@item
cmdを使用して「ヘルプ」トレーラーを構成します。スクリプト @samp{glog-find-author}
を使用して、gitリポジトリのgitログから指定された作成者IDを検索し、その動作を示します。

@example
$ cat ~/bin/glog-find-author
#!/bin/sh
test -n "$1" && git log --author="$1" --pretty="%an <%ae>" -1 || true
$ git config trailer.help.key "Helped-by: "
$ git config trailer.help.ifExists "addIfDifferentNeighbor"
$ git config trailer.help.cmd "~/bin/glog-find-author"
$ git interpret-trailers --trailer="help:Junio" --trailer="help:Couder" <<EOF
> subject
>
> message
>
> EOF
subject

message

Helped-by: Junio C Hamano <gitster@@pobox.com>
Helped-by: Christian Couder <christian.couder@@gmail.com>
@end example


@item
cmdを使用して @emph{ref} トレーラーを構成し、スクリプト @samp{glog-grep}
を使用して、gitリポジトリのgitログから最後の関連するコミットをgrepし、それがどのように機能するかを示します。

@example
$ cat ~/bin/glog-grep
#!/bin/sh
test -n "$1" && git log --grep "$1" --pretty=reference -1 || true
$ git config trailer.ref.key "Reference-to: "
$ git config trailer.ref.ifExists "replace"
$ git config trailer.ref.cmd "~/bin/glog-grep"
$ git interpret-trailers --trailer="ref:Add copyright notices." <<EOF
> subject
>
> message
>
> EOF
subject

message

Reference-to: 8bc9a0c769 (Add copyright notices., 2005-04-07)
@end example


@item
関連するコミットの件名を出力し、それがどのように機能するかを示すコマンドを使用して、「see」トレーラーを構成します:

@example
$ git config trailer.see.key "See-also: "
$ git config trailer.see.ifExists "replace"
$ git config trailer.see.ifMissing "doNothing"
$ git config trailer.see.command "git log -1 --oneline --format=\"%h (%s)\" --abbrev-commit --abbrev=14 \$ARG"
$ git interpret-trailers <<EOF
> subject
>
> message
>
> see: HEAD~2
> EOF
subject

message

See-also: fe3187489d69c4 (subject of related commit)
@end example


@item
空の値を持ついくつかのトレーラーを使用してコミットテンプレートを構成し(sedを使用してトレーラーの後に末尾のスペースを出力および保持します)、次に、「git
interpret-trailers」を使用するcommit-msgフックを構成して、値が空のトレーラーを削除し、「git-version」トレーラーを追加します:

@example
$ sed -e 's/ Z$/ /' >commit_template.txt <<EOF
> ***subject***
>
> ***message***
>
> Fixes: Z
> Cc: Z
> Reviewed-by: Z
> Signed-off-by: Z
> EOF
$ git config commit.template commit_template.txt
$ cat >.git/hooks/commit-msg <<EOF
> #!/bin/sh
> git interpret-trailers --trim-empty --trailer "git-version: \$(git describe)" "\$1" > "\$1.new"
> mv "\$1.new" "\$1"
> EOF
$ chmod +x .git/hooks/commit-msg
@end example

@end itemize

@noindent

@chapheading SEE ALSO

git-commit(1), git-format-patch(1), git-config(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-log,,,Top
@chapheading Name

git-log — コミットのログを表示

@noindent

@chapheading Synopsis

@display
git log [<options>] [<revision range>] [[--] <path>…]
@end display


@noindent

@chapheading DESCRIPTION

コミットのログを表示します。

指定されたコミットから「親」リンクをたどることによって到達可能なコミットをリストしますが、その前に @emph{^}
が付いているコミットから到達可能なコミットは除外します。デフォルトでは、出力は時系列の逆順で表示されます。

これは集合演算と考えることができます。 コマンドラインで指定されたコミットのいずれかから到達可能なコミットのセットを形成し、 @emph{^}
が前に付いたコミットのいずれかから到達可能なコミットがそのセットから差し引かれます。差し引かれた残りのコミットは、コマンドの出力に出力されるものです。他のさまざまなオプションとパスパラメータ(pats
parameters)を使用して、結果をさらに制限できます。

したがって、以下のコマンド:

@example
$ git log foo bar ^baz
@end example


は、「 @emph{foo} または @emph{bar} から到達可能であるが、 @emph{baz} からは到達できないすべてのコミットをリストする」を意味します。

特別な表記 "@emph{<commit1>}..@emph{<commit2>}" は、 "^@emph{<commit1>} @emph{<commit2>}"
の省略形として使用できます。たとえば、以下のどちらかを同じ意味で使用できます:

@example
$ git log origin..HEAD
$ git log HEAD ^origin
@end example


もう1つの特別な表記法は、マージに役立つ "@emph{<commit1>}…@emph{<commit2>}"
です。結果として得られるコミットのセットは、2つのオペランド間の対称差(symmetric difference)です。以下の2つのコマンドは同等です:

@example
$ git log A B --not $(git merge-base --all A B)
$ git log A...B
@end example


このコマンドは、 git-rev-list(1) コマンドに適用可能なオプションを使用して、表示内容と方法を制御し、そして
git-diff(1) コマンドに適用可能なオプションを使用して、各コミットによって導入される変更の表示方法を制御します。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--follow} 
ファイル名が途中でリネームされていてもそこで中断することなく、そのファイルの一覧を続けて表示します(単一のファイルに対してのみ機能します)。

@item  @samp{--no-decorate} 
@itemx  @samp{--decorate[=short|full|auto|no]} 
表示されているコミットのref名を出力します。 @emph{short} が指定されている場合、ref名の接頭辞 @emph{refs/heads/} と
@emph{refs/tags/} と @emph{refs/remotes/} は出力されません。 @emph{full}
が指定されている場合、完全なref名(接頭辞を含む)が出力されます。@emph{auto} が指定されている場合、出力が端末に送られると、ref名は
@emph{short} が指定されているかのように表示され、それ以外の場合はref名は表示されません。オプション @samp{--decorate} は
@samp{--decorate=short} の省略形です。構成されている場合はデフォルトで構成値の @samp{log.decorate}
になり、構成されていない場合は @samp{auto} になります。

@item  @samp{--decorate-refs=<pattern>} 
@itemx  @samp{--decorate-refs-exclude=<pattern>} 
@samp{--decorate-refs}
が指定されていない場合は、すべてのrefが含まれているように見せかけます。候補ごとに、@samp{--decorate-refs-exclude}
に指定されたパターンのいずれにもマッチしない場合、または @samp{--decorate-refs}
に指定されたパターンのいずれにもマッチしない場合は、装飾に使用しないでください。 @samp{log.excludeDecoration}
構成オプションを使用すると、装飾からrefを除外できますが、明示的な @samp{--decorate-refs} パターンは
@samp{log.excludeDecoration} のマッチングをオーバーライドします。

@item  @samp{--source} 
各コミットがコマンドラインで指定のコミットのいずれかから到達できる祖先である場合、当該コミット毎にコマンドラインで指定のコミットのref名で表示します。

@item  @samp{--[no-]mailmap} 
@itemx  @samp{--[no-]use-mailmap} 
mailmapファイルを使用して、作者名(author names)とコミッター名(committer names)と電子メールアドレス(email
addresses)を、正式な本名と電子メールアドレスにマップします。 git-shortlog(1) 参照。

@item  @samp{--full-diff} 
このフラグがない場合、 @samp{git log -p <path>...}
は、指定されたパスに関連(touch)するコミットを示し、その指定されたパスについての差分を取ります。これにより、指定されたパスに関連するコミットの完全な差分が表示されます。これは、
"<path>…" がコミットのみを制限し、それらのコミットの差分を制限しないことを意味します。

これは、例えば @samp{--stat} によって生成されたものなど、すべての差分ベースの出力タイプに影響することに注意してください。

@item  @samp{--log-size} 
各コミットの出力に “log size <number>” という行を含めます。ここで、 <number>
はそのコミットのメッセージの長さ(バイト単位)です。プログラムがスペースをコミットのメッセージ読み込み前に割り当てられるようにして、 @samp{git log}
出力からログメッセージを読み取るツールを高速化することを目的としています。

@item  @samp{-L<start>,<end>:<file>} 
@itemx  @samp{-L:<funcname>:<file>} 
@emph{<file>} 内で、 @emph{<start>,<end>} 、または関数名 regex @emph{<funcname>}
で指定された行範囲をトレースします。pathspec
リミッターを指定することはできません。これは現在、単一のリビジョンから開始するウォークに制限されています。つまり、0個または1個の正のリビジョン引数のみを指定でき、
@emph{<start>} と @emph{<end>} (または @emph{<funcname>})
が開始リビジョンに存在する必要があります。このオプションは複数回指定できます。これは @samp{--patch} オプションの機能を内包しています。パッチ出力は
@samp{--no-patch} を使用して抑制できますが、他の差分形式(つまり、 @samp{--raw}、 @samp{--numstat}、 @samp{--shortstat}、
@samp{--dirstat}、 @samp{--summary}、 @samp{--name-only}、 @samp{--name-status}、
@samp{--check})は現在実装されていません。

@emph{<start>} と @emph{<end>} は、以下のいずれかの形式です:

@itemize 

@item
number

@emph{<start>} または @emph{<end>} が数値の場合、絶対行番号を指定します(行は1から数えます)。

@item
@samp{/regex/}

この形式は、指定されたPOSIX正規表現に一致する最初の行を使用します。 @emph{<start>} が正規表現の場合、前の @samp{-L}
範囲の末尾から検索します。それ以外の場合は、ファイルの先頭から検索します。 @emph{<start>} が @samp{^/regex/}
の場合、ファイルの先頭から検索します。 @emph{<end>} が正規表現の場合、 @emph{<start>} で指定された行から検索開始します。

@item
+offset or -offset

これは <end> に対してのみ有効であり、 <start> で指定された行の前後の行数を指定します。
@end itemize

@emph{<start>} および @emph{<end>} の代わりに @samp{:<funcname>} が指定されている場合、これは @emph{<funcname>}
に一致する最初の関数名行から次の関数名行までの範囲を示す正規表現です。 @samp{:<funcname>} は、前の @samp{-L}
範囲の末尾から検索します。それ以外の場合は、ファイルの先頭から検索します。 @samp{^:<funcname>} はファイルの先頭から検索します。関数名は、
@samp{git diff} がパッチハンクヘッダーを処理するのと同じ方法で決定されます(gitattributes(5) の
@emph{Defining a custom hunk-header} 参照)。

@item  <revision range> 
指定されたリビジョン範囲のコミットのみを表示します。 <revision range> が指定されていない場合、デフォルトで @samp{HEAD}
(つまり、現在のコミットにつながる履歴全体)になります。 @samp{origin..HEAD}
は、現在のコミット(つまり、@samp{HEAD})から到達可能なすべてのコミットを指定しますが、`origin`からは指定しません。 <revision
range> の綴り方の完全なリストについては、 gitrevisions(7) の「Specifying
Ranges」節を参照してください。

@item  [--] <path>… 
指定されたパスに一致するファイルがどのようになったかを説明するのに必要十分なコミットのみを表示します。詳細およびその他の簡略化モードについては、以下の
@emph{History Simplification} を参照してください。

混乱が生じた場合、パスをオプションまたはリビジョン範囲から分離するために、パスの前に @samp{--} を付ける必要がある場合があります。
@end table

@noindent

@heading Commit Limiting

ここで説明されている特別な表記法を使用してリストする必要があるコミットの範囲を指定することに加えて、追加のコミット制限が適用される場合があります。

より多くのオプションを使用すると、通常、出力がさらに制限されます(たとえば、@samp{--since=<date1>`は}<date1>@samp{より新しいコミットに制限され、}--grep=<pattern>@samp{と一緒に使用すると、ログメッセージに}<pattern>`と一致する行があるコミットにさらに制限されます)。

注意: これらは、`--reverse`などのコミット順序およびフォーマットオプションの前に適用されることに注意してください。

@table @asis

@item  @samp{-<number>} 
@itemx  @samp{-n <number>} 
@itemx  @samp{--max-count=<number>} 
出力するコミットの数を制限します。

@item  @samp{--skip=<number>} 
コミット出力の表示を開始する前に、'number’個のコミットをスキップします。

@item  --since=<date> 
@itemx  @samp{--after=<date>} 
指定の日付よりも新しいコミットを表示します。

@item  @samp{--until=<date>} 
@itemx  @samp{--before=<date>} 
指定の日付より古いコミットを表示します。

@item  @samp{--author=<pattern>} 
@itemx  @samp{--committer=<pattern>} 
コミット出力を、指定されたパターン(正規表現)に一致する作者(author)/コミッター(committer)ヘッダー行を持つものに制限します。複数の
@samp{--author=<pattern>} がある場合、作者が指定されたパターンのいずれかに一致するコミットが選択されます(複数の
@samp{--committer=<pattern>} の場合も同様)。

@item  @samp{--grep-reflog=<pattern>} 
コミット出力を、指定されたパターン(正規表現)に一致するreflogエントリを持つものに制限します。複数の`--grep-reflog`を使用すると、指定されたパターンのいずれかに一致するreflogメッセージを持つコミットが選択されます。`--walk-reflogs`が使用されていない限り、このオプションを使用するとエラーになります。

@item  @samp{--grep=<pattern>} 
コミット出力を、指定されたパターン(正規表現)に一致するログメッセージを持つものに制限します。複数の`--grep=<pattern>@samp{を使用すると、指定されたパターンのいずれかにメッセージが一致するコミットが選択されます(全てに一致するコミットだけを選択したい場合、}--all-match`を参照してください)。

`--notes`が有効な場合、ノートからのメッセージは、ログメッセージの一部であるかのようにマッチングされます。

@item  @samp{--all-match} 
コミット出力を、少なくとも1つに一致するものではなく、指定されたすべての`--grep`に一致するものに制限します。

@item  @samp{--invert-grep} 
コミット出力を、`--grep=<pattern>`で指定されたパターンと一致しないログメッセージを持つものに制限します。

@item  @samp{-i} 
@itemx  @samp{--regexp-ignore-case} 
大文字小文字に関係なく、正規表現の制限パターンに一致します。

@item  @samp{--basic-regexp} 
制限パターンを基本正規表現として扱います。これがデフォルトです。

@item  @samp{-E} 
@itemx  @samp{--extended-regexp} 
制限パターンを、デフォルトの基本正規表現の代わりに拡張正規表現として扱います。

@item  @samp{-F} 
@itemx  @samp{--fixed-strings} 
制限パターンを固定文字列として扱います(パターンを正規表現として解釈しないでください)。

@item  @samp{-P} 
@itemx  @samp{--perl-regexp} 
制限パターンをPerl互換の正規表現として扱います。

これらのタイプの正規表現のサポートは、コンパイル時オプションに依存します。Gitが当該のサポート付きでコンパイルされていない場合、このオプションを提供すると、Gitが死にます(die)。

@item  @samp{--remove-empty} 
指定されたパスがツリーから見えなくなったら停止(stop)します。

@item  @samp{--merges} 
マージコミットのみを印刷します。これは`--min-parents=2`とまったく同じです。

@item  @samp{--no-merges} 
複数の親を持つコミットを出力しない。これは`--max-parents=1`とまったく同じです。

@item  @samp{--min-parents=<number>} 
@itemx  @samp{--max-parents=<number>} 
@itemx  @samp{--no-min-parents} 
@itemx  @samp{--no-max-parents} 
量の多少に関わらず、とにかく複数の親コミットがあるコミットのみを表示します。特に、@samp{--max-parents=1`は}--no-merges`と同じであり、@samp{--min-parents=2`は}--merges`と同じです。@samp{--max-parents=0`はすべてのルートコミットを提供し、}--min-parents=3`はすべてのタコ足マージ(octopus
merges)を示します。

@samp{--no-min-parents`と}--no-max-parents`は、これらの制限を(制限なしに)再度リセットします。同等の形式は、@samp{--min-parents=0}(すべてのコミットに0個以上の親があります)および`--max-parents=-1`(マイナスの数は上限がないことを示します)です。

@item  @samp{--first-parent} 
マージコミットを確認したら、最初の親コミットのみを探索します。このオプションは、特定のトピックブランチの進化を表示するときに、より良い概要を提供できます。トピックブランチへのマージは、時々更新されるアップストリームに調整することだけである傾向があり、このオプションを使用すると、そのようなマージによって履歴に取り込まれた個々のコミットを無視できます。

このオプションは、マージコミットのデフォルトのdiff形式も`first-parent`に変更します。詳細については、`--diff-merges=first-parent`を参照してください。

@item  @samp{--not} 
次に現れる`--not`までの間、後続のすべてのリビジョン指定子の'^'プレフィックス(またはその欠如)の意味を逆にします。

@item  @samp{--all} 
‘refs/`内のすべてのrefが`HEAD`とともに、コマンドラインに’<commit>'としてリストされているかのように見せかけます。

@item  @samp{--branches[=<pattern>]} 
‘refs/heads`内のすべてのrefがコマンドラインに’<commit>'としてリストされているかのように見せかけます。@emph{<pattern>'が指定されている場合、ブランチを指定されたシェルグロブ(shell
glob)に一致するものに制限します。パターンに}?@emph{または}*'または'[@emph{がない場合、最後に}/*'が含まれます。

@item  @samp{--tags[=<pattern>]} 
‘refs/tags`内のすべてのrefがコマンドラインに’<commit>'としてリストされているかのように見せかけます。@emph{<pattern>'が指定されている場合は、指定されたシェルグロブ(shell
glob)に一致するタグにタグを制限します。パターンに}?@emph{または}*'または'[@emph{がない場合、最後に}/*'が含まれます。

@item  @samp{--remotes[=<pattern>]} 
‘refs/remotes`内のすべてのrefがコマンドラインに’<commit>'としてリストされているかのように見せかけます。@emph{<pattern>'が指定されている場合、リモート追跡ブランチを指定されたシェルグロブ(shell
glob)に一致するものに制限します。パターンに}?@emph{または}*'または'[@emph{がない場合、最後に}/*'が含まれます。

@item  @samp{--glob=<glob-pattern>} 
シェルグロブ'<glob-pattern>'に一致するすべてのrefがコマンドラインに'<commit>'としてリストされているかのように見せかけます。先頭の’refs/@emph{は、欠落している場合は自動的に先頭に追加されます。パターンに}?@emph{または}*'または'[@emph{がない場合、最後に}/*'が含まれます。

@item  @samp{--exclude=<glob-pattern>} 
次の`--all`または`--branches`または`--tags`または`--remotes`または`--glob`が別の方法で考慮する'<glob-pattern>'に一致するrefを含めないでください。このオプションを繰り返すと、次の`--all`または`--branches`または`--tags`または`--remotes`または`--glob`オプションまで除外パターンが蓄積されます(他のオプションまたは引数は、蓄積されたパターンをクリアしません)。

与えられたパターンは、それぞれ`--branches`または`
--tags`または`--remotes`に適用される場合、‘refs/heads`または`refs/tags`または`refs/remotes`で始まるべきではありません。@samp{--glob`または}--all`に適用する場合は、`refs/`で始める必要があります。末尾の’/*'を意図している場合は、明示的に指定する必要があります。

@item  @samp{--reflog} 
reflogsで言及されているすべてのオブジェクトがコマンドラインに`<commit>`としてリストされているかのように見せかけます。

@item  @samp{--alternate-refs} 
代替リポジトリのref先端として言及されているすべてのオブジェクトがコマンドラインにリストされているかのように見せかけます。代替リポジトリは、オブジェクトディレクトリが`objects/info/alternates`で指定されているリポジトリです。インクルードされたオブジェクトのセットは、`core.alternateRefsCommand`などによって変更できます。git-config(1)を参照してください。

@item  @samp{--single-worktree} 
デフォルトでは、作業ツリーが複数ある場合、@samp{--all`と}-reflog`と`--indexed-objects`では、すべての作業ツリーが検査されます(git-worktree(1)を参照)。このオプションは、現在の作業ツリーのみを調べるように強制します。

@item  @samp{--ignore-missing} 
入力に無効なオブジェクト名が含まれている場合、そもそもその不正な入力が行われていないかのように見せかけます。

@item  @samp{--bisect} 
コマンドラインで、bad bisection ref @samp{refs/bisect/bad} がリストされ、その後に @samp{--not} と good
bisection ref @samp{refs/bisect/good-*} が続くかのように見せかけます。

@item  @samp{--stdin} 
コマンドラインにリストされている'<commit>'に加えて、標準入力からそれらを読み取ります。`--`区切り文字が表示された場合は、コミットの読み取りを停止し、パスの読み取りを開始して結果を制限します。

@item  @samp{--cherry-mark} 
@samp{--cherry-pick}（以下を参照）と同様ですが、同等のコミットを省略せずに`=@samp{と印し、同等でないコミットを}+`と印します。

@item  @samp{--cherry-pick} 
コミットの組を対称差(symmetric difference)に制限する場合、「反対側」の別のコミットと同じ変更を導入するコミットを省略します。

たとえば、@samp{A`と`B`の2つのブランチがある場合、それらの片側だけですべてのコミットを一覧表示する通常の方法は、}--left-right`を使用することです(`--left-right`オプションの説明の以下の例を参照してください)。ただし、他のブランチからは(ブランチAと重複しない)厳選されたコミットが表示されます(たとえば、「3rd
onb」はブランチAからチェリーピックされる可能性があります)。このオプションを使用すると、そのようなコミットのペアは出力から除外されます。

@item  @samp{--left-only} 
@itemx  @samp{--right-only} 
リストは、対称差のそれぞれの側でのみコミットします。つまり、@samp{--left-right`で `<}
と印されるのだけか、あるいは`--left-right`で`>`と印されるものだけです。

たとえば、@samp{--cherry-pick --right-only
A...B`は、`A`にある、または`A`のコミットとパッチと同等のコミットを`B`から省略します。つまり、これは`git cherry A
B`からの}+@samp{コミットをリストします。より正確に書くと、}--cherry-pick --right-only
--no-merges`により正確なリストを提供します。

@item  @samp{--cherry} 
`--right-only --cherry-mark
--no-merges`の同義語です。出力を私たちの側のコミットに制限し、フォークされた履歴の反対の側に適用されたものを、`git cherry
upstream mybranch`と同様に`git log --cherry upstream…mybranch`で印するのに役立ちます。

@item  @samp{-g} 
@itemx  @samp{--walk-reflogs} 
コミットの祖先チェーンをたどる代わりに、reflogエントリを最新のものから古いものに移動します。このオプションを使用する場合、除外するコミットを指定することはできません(つまり、'^commit’や'commit1..commit2’や'commit1...commit2’表記は使用できません)。

(明らかな理由で、)@samp{oneline`と`reference`以外の}--pretty`形式では、これにより、出力にreflogから取得された2行の追加情報が含まれます。出力のreflog指定子は、@samp{ref@@@{Nth@}}(@samp{Nth`はreflogの逆時系列インデックス(reverse-chronological
index))または`ref@@@{timestamp@}}(そのエントリのタイムスタンプ付き)として表示されます。表示は下記のいくつかのルールに依存します:

@enumerate 

@item
開始点が @samp{ref@@@{Nth@}} として指定されている場合は、インデックス形式を表示します。

@item
開始点が @samp{ref@@@{now@}} として指定されている場合は、タイムスタンプ形式を表示します。

@item
上記のどちらも使用されていないが、コマンドラインで`--date`が指定されている場合は、`--date`で要求された形式でタイムスタンプを表示します。

@item
それ以外の場合は、インデックス形式を表示します。
@end enumerate

@samp{--pretty =
oneline`では、コミットメッセージの前にこの情報が同じ行に付けられます。このオプションを}--reverse`と組み合わせることはできません。git-reflog(1)も参照してください。

`--pretty=reference`では、この情報はまったく表示されません。

@item  @samp{--merge} 
マージが失敗した後、競合があり、マージするすべてのheadに存在しないファイルに関連(touch)するrefを表示します。

@item  @samp{--boundary} 
除外された境界コミットを出力します。 境界コミットの前には `-`が付いています。
@end table

@noindent

@heading History Simplification

特定の<path>を変更するコミットなど、履歴の一部のみに関心がある場合があります。ただし、「履歴の簡略化」(History
Simplification)は2つの部分から成ります。履歴を簡略化するためにはさまざまな戦略があるためです。その1つはコミットの選択であり、もう1つはそれを行う方法です。

以下のオプションは、表示するコミットを選択します:

@table @asis

@item  <paths> 
指定された<パス>を変更するコミットが選択されます。

@item  @samp{--simplify-by-decoration} 
いくつかのブランチまたはタグによって参照されるコミットが選択されます。
@end table

注意: 意味のある重要な履歴のために、追加のコミットを表示できることに注意してください。

以下のオプションは、簡略化の実行方法に影響します。

@table @asis

@item  Default mode 
履歴を、ツリーの最終状態を説明する最も単純な履歴に単純化します。最終結果が同じである場合(つまり、同じコンテンツのブランチをマージする場合)、いくつかの傍流ブランチ(side
branches)を削除するため、最も単純です。

@item  @samp{--show-pulls} 
デフォルトモードからのすべてのコミットを含めますが、最初の親へのTREESAMEではなく、後の親へのTREESAMEであるマージコミットも含めます。このモードは、ブランチに変更を「最初に導入した」マージコミットを表示するのに役立ちます。(訳注:TREESAME=pathspecが全く同一であるツリー)

@item  @samp{--full-history} 
デフォルトモードと同じですが、一部の履歴を削除しません。

@item  @samp{--dense} 
選択したコミットのみが表示され、重大で意味のある履歴を持つコミットもいくつか表示されます。

@item  @samp{--sparse} 
簡略化された履歴内のすべてのコミットが表示されます。

@item  @samp{--simplify-merges} 
このマージに寄与する選択されたコミットがないため、結果の履歴からいくつかの不要なマージを削除するための`--full-history`への追加オプション。

@item  @samp{--ancestry-path} 
表示するコミットの範囲が指定されている場合(たとえば、@emph{commit1..commit2’または’commit2 ^commit1})、
@emph{commit1} と @emph{commit2} の間の祖先チェーンに直接存在するコミットのみ、つまり、 @emph{commit1} の子孫であり、
@emph{commit2} の祖先であるコミットを表示します。
@end table

より詳細な説明は以下のとおりです。

<paths> として @samp{foo} を指定したとします。 @samp{foo} !TREESAME
を変更するコミットを呼び出し、残りをTREESAMEと呼びます。( @samp{foo}
のためにフィルタリングされた差分では、それぞれ異なって見えたりたり等しく見えたりします。）

以下、簡略化設定の違いを説明するために、同じ履歴例を使います。このコミットグラフでは、ファイル @samp{foo} をフィルタリングしていると想定しています:

@example
          .-A---M---N---O---P---Q
         /     /   /   /   /   /
        I     B   C   D   E   Y
         \   /   /   /   /   /
          `-------------'   X
@end example


履歴 A---Q の水平線は、各マージの最初の親と見なされます。その各コミットは以下のとおりです:

@itemize 

@item
@samp{I} は最初のコミットであり、ファイル @samp{foo} が内容 “asdf” で存在し、ファイル @samp{quux} は内容 “quux”
で存在します。最初のコミットは空のツリーと比較されるため、@samp{I} は !TREESAME です。

@item
@samp{A} では、 @samp{foo} には “foo” だけが含まれています。

@item
@samp{B} には @samp{A} と同じ変更が含まれています。そのマージ @samp{M} は些細なことであり、したがってすべての親にとって TREESAME です。

@item
@samp{C} は @samp{foo} を変更しませんが、そのマージ @samp{N} はそれを “foobar” に変更するので、どの親にとっても TREESAME
ではありません。

@item
@samp{D} は @samp{foo} を “baz” に設定します。そのマージ @samp{O} は、 @samp{N} と @samp{D} から “foobarbaz”
への文字列を結合します。つまり、どの親にとっても TREESAME ではありません。

@item
@samp{E} は @samp{quux} を “xyzzy” に変更し、そのマージ @samp{P} は文字列を “quuxxyzzy” に結合します。 @samp{P} は
@samp{O} に対して TREESAME ですが、 @samp{E} に対してはそうではありません。

@item
@samp{X} は、新ファイル @samp{side} を追加し、 @samp{Y} がそれを変更した独立したルートコミットです。 @samp{Y} は @samp{X}
へのTREESAMEです。そのマージ @samp{Q} は @samp{P} に @samp{side} を追加し、 @samp{Q} は @samp{P} にはTREESAMEですが、@samp{Y}
に対してはそうではありません。
@end itemize

@samp{rev-list} は、 @samp{--full-history} および/または、( @samp{--parents} または @samp{--children}
を介して)親の書き換えが使用されているかどうかに基づいて、コミットを含めたり除外したりして、履歴を逆方向にウォークスルーします。以下の設定が可能です。

@table @asis

@item  Default mode 
コミットは、どの親に対してもTREESAMEでない場合に含まれます(これは変更できますが、以下の @samp{--sparse}
を参照してください)。コミットがマージであり、一方の親に対するTREESAMEであった場合は、その親のみをフォローします。(TREESAMEの親が複数ある場合でも、そのうちの1つだけをフォローします)。それ以外の場合は、すべての親をフォローします。

これにより、以下のようになります:

@example
          .-A---N---O
         /     /   /
        I---------D
@end example


TREESAMEの親のみに従うルールが利用可能な場合は、 @samp{B} を検討対象から完全に削除したことに注意してください。 @samp{C} は @samp{N}
を介して考慮されましたが、しかしそれはTREESAMEです。ルートコミットは空のツリーと比較されるため、 @samp{I} は !TREESAME です。

親子関係は @samp{--parents} でのみ表示されますが、デフォルトモードで選択されたコミットには影響しないため、親の行を示しました。

@item  @samp{--full-history without parent rewriting} 
このモードは、デフォルトとはある一点で異なります。つまり、いずれかの親に対してTREESAMEであっても、常にマージのすべての親に従います。マージの複数の側にコミットが含まれている場合でも、これはマージ自体が含まれていることを意味するものではありません！
例では以下のようになります。

@example
        I  A  B  N  D  O  P  Q
@end example


@samp{M} は、両方の親にとってTREESAMEであるため、除外されました。 @samp{E} と @samp{C} と @samp{B} をすべて巡りましたが、 @samp{B} だけが
!TREESAME だったので、他は表示されません。

注意:
親の書き換え(rewrite)がないと、コミット間の親子関係について話す(talk)ことは実際には不可能であるため、それらが切断されている(disconnected)ことを示していることに注意してください。

@item  @samp{--full-history with parent rewriting} 
通常のコミットは !TREESAME の場合にのみ含まれます(これは変更できますが、以下の @samp{--sparse} を参照してください)。

マージは常に含まれます。ただし、親リストは書き直されます。各親に沿って、自分自身に含まれていないコミットを削除します。 これにより以下のようになります。

@example
          .-A---M---N---O---P---Q
         /     /   /   /   /
        I     B   /   D   /
         \   /   /   /   /
          `-------------'
@end example


上記を書き直さずに @samp{--full-history} と比較してください。 @samp{E} はTREESAMEであるため削除されましたが、Pの親リストは @samp{E}
の親 @samp{I} を含むように書き直されていることに注意してください。 @samp{C} と @samp{N} および @samp{X} と @samp{Y} と @samp{Q}
についても同じことが起こりました。
@end table

上記の設定に加えて、あなたはTREESAMEが包含に影響を与えるかどうかを変更できます:

@table @asis

@item  @samp{--dense} 
巡ったコミットは、親にとってTREESAMEでない場合に含まれます。

@item  @samp{--sparse} 
巡ったすべてのコミットが含まれます。

@samp{--full-history}
がなくても、これによりマージが単純化されることに注意してください。親の1つがTREESAMEの場合、その1つだけに従うため、マージの反対側を巡ることはありません。

@item  @samp{--simplify-merges} 
最初に、親を書き換えた @samp{--full-history} と同じ方法で履歴グラフを作成します(上記を参照)。

それから、以下のルールに従って、各コミット @samp{C} を最終履歴内の置換 @samp{C'} に単純化します:

@itemize 

@item
@samp{C'} を @samp{C} にセットします。

@item
@samp{C'} の各親 @samp{P} をその簡略化された @samp{P'}
に置き換えます。その過程で、他の親の祖先であるか、ルートである親を削除すると、TREESAMEが空のツリーにコミットされ、重複が削除されますが、TREESAMEであるすべての親を削除しないように注意してください。

@item
この親の書き換え後、 @samp{C'} がルートまたはマージコミット(0または >1 の親を持つ)、境界コミット、または
!TREESAMEである場合、それは残ります。それ以外の場合は、唯一の親に置き換えられます。
@end itemize

この効果は、親の書き換えを使用した @samp{--full-history} と比較することで最もよく示されます。例は以下のようになります:

@example
          .-A---M---N---O
         /     /       /
        I     B       D
         \   /       /
          `---------'
@end example


注意: @samp{--full-history} に対する @samp{N} と @samp{P} と @samp{Q} の主な違いに注意してください:

@itemize 

@item
@samp{N} の親リストは、他の親 @samp{M} の祖先であるため、 @samp{I} が削除されました。それでも、 !TREESAME なので @samp{N} が残りました。

@item
@samp{P} の親リストも同様に @samp{I} が削除されました。 @samp{P} は、親が1つで TREESAMEであるため、完全に削除されました。

@item
@samp{Q} の親リストでは、 @samp{Y} が @samp{X} に簡略化されていました。その後、 @samp{X} はTREESAMEルートであったため、削除されました。 @samp{Q}
は、親が1つで TREESAMEであるため、完全に削除されました。
@end itemize
@end table

利用可能な別の簡略化モードがあります:

@table @asis

@item  @samp{--ancestry-path} 
表示されるコミットを、指定されたコミット範囲内の “from” コミットと “to”
コミットの間の祖先チェーンに直接あるコミットに制限します。つまり、 “to” コミットの祖先であるコミットと “from”
コミットの子孫であるコミットのみを表示します。

ユースケースの例として、以下のコミット履歴について考えます:

@example
            D---E-------F
           /     \       \
          B---C---G---H---I---J
         /                     \
        A-------K---------------L--M
@end example


通常の @emph{D..M} は、 @samp{M} の祖先であるコミットのセットを計算しますが、 @samp{D} の祖先であるコミットは除外します。 これは、「 @samp{M} には
@samp{D} には存在しなかったものがある」という意味で、 @samp{D} 以降の @samp{M`に至るまでの歴史に何が起こったのかを知るのに役立ちます。この例の結果は、
`A} と @samp{B} (そしてもちろん @samp{D} 自体)を除くすべてのコミットになります。

ただし、 @samp{M} のコミットが @samp{D} で入ったバグで汚染されており、修正が必要な場合は、実際には @samp{D} の子孫である @emph{D..M}
のサブセットのみを表示する必要があります。つまり、 @samp{C} と @samp{K} を除外します。これはまさに @samp{--ancestry-path}
オプションが行うことです。これを @emph{D..M} 範囲に適用すると、以下のようになります:

@example
                E-------F
                 \       \
                  G---H---I---J
                               \
                                L--M
@end example

@end table

別のオプション @samp{--show-pulls} について説明する前に、新しいサンプル履歴を作成する必要があります。

簡略化された履歴を見るときにユーザーが直面する一般的な問題は、ファイルを変更したことがわかっているコミットが、ファイルの簡略化された履歴に表示されないことです。そこで、新しい例を示し、その場合に
@samp{--full-history} や @samp{--simplify-merges} などのオプションがどのように機能するかを示しましょう。

@example
          .-A---M-----C--N---O---P
         /     / \  \  \/   /   /
        I     B   \  R-'`-Z'   /
         \   /     \/         /
          \ /      /\        /
           `---X--'  `---Y--'
@end example


この例では、 @samp{I} が @samp{file.txt} を作成し、それが @samp{A} と`B` と @samp{X}
にてさまざまな方法で変更されたとします。ひとり親のコミット @samp{C} と @samp{Z} と @samp{Y} は @samp{file.txt} を変更していません。マージコミット
@samp{M} は、マージの競合を解決して、 @samp{A} と @samp{B}
の両方の変更を含めることによって作成されたため、どちらにもTREESAMEではありません。ただし、マージコミット @samp{R} は、 @samp{M} の
@samp{file.txt`の内容を無視し、 `X} の @samp{file.txt} の内容のみを取得することによって作成されました。 したがって、 @samp{R} は
@samp{X} へのTREESAMEですが、 @samp{M} はそうではありません。最後に、 @samp{N} を作成するための自然なマージ解決は、 @samp{R} で
@samp{file.txt} の内容を取得することです。したがって、 @samp{N} は @samp{C} ではなく @samp{R} へのTREESAMEです。マージコミット @samp{O} と
@samp{P} は、最初の親にはTREESAMEですが、2番目の親である @samp{Z} と @samp{Y} にはついてはそうではありません。

デフォルトモードを使用する場合、 @samp{N} と @samp{R}
は両方ともTREESAMEの親を持っているため、これらのエッジはウォークされ、他のエッジは無視されます。結果の履歴グラフは以下のとおりです:

@example
        I---X
@end example


@samp{--full-history} を使用する場合、Gitはすべてのエッジを巡ります。これにより、コミット @samp{A} と @samp{B} と マージ @samp{M}
が検出されますが、マージコミット @samp{O} と @samp{P} も明らかになります。 親を書き換えると、結果のグラフは以下のようになります:

@example
          .-A---M--------N---O---P
         /     / \  \  \/   /   /
        I     B   \  R-'`--'   /
         \   /     \/         /
          \ /      /\        /
           `---X--'  `------'
@end example


ここで、マージコミット @samp{O} と @samp{P} は、実際には @samp{file.txt} への変更を提供しなかったため、余分なノイズを提供します。古いバージョンの
@samp{file.txt}
に基づいたトピックのみをマージしました。これは、多くの寄稿者が並行して作業し、トピックブランチを単一のトランクに沿ってマージするワークフローを使用するリポジトリの一般的な問題です。開発に関係のないマージが
@samp{--full-history} の結果に表示されます。

@samp{--simplify-merges} オプションを使用すると、コミット @samp{O} と @samp{P} が結果から消えます。 これは、 @samp{O} と @samp{P}
の書き直された2番目の親が、最初の親から到達可能であるためです。これらのエッジが削除されると、コミットは、親にとってTREESAMEである単一の親のコミットのように見えます。これはコミット
@samp{N} にも発生し、以下のような履歴ビューが表示されます:

@example
          .-A---M--.
         /     /    \
        I     B      R
         \   /      /
          \ /      /
           `---X--'
@end example


このビューでは、 @samp{A} と @samp{B} と @samp{X} からの重要なひとり親の変更がすべて表示されます。また、慎重に解決されたマージ @samp{M}
とそれほど慎重に解決されていないマージ @samp{R} も表示されます。これは通常、コミット @samp{A} と @samp{B}
がデフォルトのビューの履歴から「消えた」理由を判断するのに十分な情報です。ただし、このアプローチにはいくつかの問題があります。

最初の問題はパフォーマンスです。以前のオプションとは異なり、 @samp{--simplify-merges}
オプションでは、単一の結果を返す前にコミット履歴全体をウォークする必要があります。これにより、非常に大規模なリポジトリでこのオプションを使用するのが難しくなる可能性があります。

2番目の問題は監査の1つです。多くの寄稿者が同じリポジトリで作業している場合、どのマージコミットが重要なブランチに変更を導入したかが重要です。上記の問題のあるマージ
@samp{R} は、重要なブランチにマージするために使用されたマージコミットではない可能性があります。 代わりに、マージ @samp{N} を使用して @samp{R} と @samp{X}
を重要なブランチにマージしました。このコミットには、変更 @samp{X} がコミットメッセージの @samp{A} と @samp{B}
からの変更を上書きするようになった理由に関する情報が含まれている可能性があります。

@table @asis

@item  @samp{--show-pulls} 
デフォルトの履歴に表示されるコミットに加えて、最初の親にはTREESAMEではなく、後の親にはTREESAMEである各マージコミットを表示します。

マージコミットが @samp{--show-pulls} に含まれている場合、マージは別のブランチから変更を「プル」したかのように扱われます。この例で
@samp{--show-pulls} を使用すると(他のオプションは使用しない場合、)結果のグラフは行かのようになります:

@example
        I---X---R---N
@end example


ここで、コミット @samp{X} と @samp{R} をそれぞれベースブランチにプルしたため、マージコミット @samp{R} と @samp{N}
が含まれています。これらのマージは、コミット @samp{A} と @samp{B} がデフォルトの履歴に表示されない理由です。

@samp{--show-pulls} が @samp{--simplify-merges} とペアになっている場合、グラフには必要なすべての情報が含まれます:

@example
          .-A---M--.   N
         /     /    \ /
        I     B      R
         \   /      /
          \ /      /
           `---X--'
@end example


@samp{M} は @samp{R} から到達可能であるため、 @samp{N} から @samp{M} へのエッジが単純化されていることに注意してください。ただし、 @samp{N} は、変更
@samp{R} をメインブランチに「プル」したため、重要なコミットとして履歴に表示されます。
@end table

@samp{--simplify-by-decoration}
オプションを使用すると、タグで参照されていないコミットを省略して、履歴のトポロジの全体像のみを表示できます。コミットは、(1)タグによって参照されている場合、または
(2)コマンドラインで指定されたパスの内容を変更した場合に、!TREESAMEとしてマークされます(つまり、上記の履歴簡略化ルールの後に保持されます)。他のすべてのコミットはTREESAMEとしてマークされます(簡略化される可能性があります)。

@noindent

@heading Commit Ordering

デフォルトでは、コミットは新しい順に表示されます。

@table @asis

@item  @samp{--date-order} 
すべての子が表示されるまで親を表示しませんが、それ以外の場合はコミットタイムスタンプの順序でコミットを表示します。

@item  @samp{--author-date-order} 
すべての子が表示されるまで親を表示しませんが、それ以外の場合は、作者(author)のタイムスタンプ順にコミットを表示します。

@item  @samp{--topo-order} 
すべての子が表示されるまで親を表示せず、複数の履歴行が混在するコミットを表示しないようにします。

たとえば、以下のようなコミット履歴があります:

@example
    ---1----2----4----7
        \              \
         3----5----6----8---
@end example


ここで、数字はコミットタイムスタンプの順序を示し、 @samp{gitrev-list} と @samp{--date-order}
のある友達は、タイムスタンプの順序でコミットを示します。つまり、8 7 6 5 4 3 2 1

@samp{--topo-order} を使用すると、8 6 5 3 7 4 2 1（または8 7 4 2 6 5 3
1）が表示されます。2つの並列開発トラックからのコミットが混在して表示されないようにするために、いくつかの古いコミットが新しいコミットの前に表示されます。

@item  @samp{--reverse} 
表示するように選択したコミットを逆の順序で出力します(上記の Commit Limiting 節を参照)。 @samp{--walk-reflogs}
と組み合わせることはできません。
@end table

@noindent

@heading Object Traversal

これらのオプションは、主にGitリポジトリのパッキングを対象としています。

@table @asis

@item  @samp{--unsorted-input} 
コミット時間で時系列の逆順に並べ替えるのではなく、コマンドラインで指定された順序でコミットを表示します。@samp{--no-walk} または
@samp{--no-walk=sorted} と組み合わせることはできません。

@item  @samp{--no-walk[=(sorted|unsorted)]} 
指定されたコミットのみを表示し、祖先をトラバースしない。範囲が指定されている場合、これは効果がありません。引数 @samp{unsorted}
が指定されている場合、コミットはコマンドラインで指定された順序で表示されます。それ以外の場合( @samp{sorted}
または引数が指定されていない場合)、コミットはコミット時間の逆順に表示されます。 @samp{--graph} と組み合わせることはできません。 @samp{sorted}
または引数が指定されていない場合、 @samp{--unsorted-input} と組み合わせることはできません。

@item  @samp{--do-walk} 
以前の @samp{--no-walk} を上書きします。
@end table

@noindent

@heading Commit Formatting

@table @asis

@item  @samp{--pretty[=<format>]} 
@itemx  @samp{--format=<format>} 
コミットログの内容を指定された形式できれいに印刷(pretty-print)します。 @emph{<format>} は
oneline・short・medium・full・fuller・reference・email・raw・format:<string>・tformat:<string>
のいずれかになります。 @emph{<format>} が上記のいずれでもなく、 @emph{%placeholder} が含まれている場合、
@emph{--pretty=tformat:<format>} が指定されたかのように動作します。

各フォーマットの詳細については、 "PRETTY FORMATS" セクションを参照してください。 @emph{=<format>}
の部分を省略すると、デフォルトで @emph{medium} になります。

注意: リポジトリー構成でデフォルトのpretty formatを指定できます(git-config(1) 参照)。

@item  @samp{--abbrev-commit} 
40バイトの16進コミットオブジェクト名全体を表示する代わりに、オブジェクトに一意の名前を付けるプレフィックスを表示します。
"--abbrev=<n>" (表示されている場合はdiff出力も変更します)オプションを使用して、プレフィックスの最小長を指定できます。

これにより、80桁幅の端末を使用している人にとって "--pretty=oneline" がずっと読みやすくなるはずです。

@item  @samp{--no-abbrev-commit} 
完全な40バイトの16進コミットオブジェクト名を表示します。 これにより、明示的または "--oneline"
などの他のオプションによって暗黙的に示される @samp{--abbrev-commit} が無効になります。また、 @samp{log.abbrevCommit}
変数をオーバーライドします。

@item  @samp{--oneline} 
これは、 "--pretty=oneline --abbrev-commit" を一緒に使用するための省略形です。

@item  @samp{--encoding=<encoding>} 
コミットオブジェクトは、ログメッセージに使用される文字エンコードをエンコードヘッダーに記録します。このオプションを使用して、ユーザーが好むエンコーディングでコミットログメッセージを再コーディングするようにコマンドに指示できます。配管以外のコマンドの場合、これはデフォルトでUTF-8になります。オブジェクトが
@samp{X} でエンコードされていると主張し、 @samp{X}
で出力している場合、オブジェクトをそのまま出力することに注意してください。これは、元のコミットの無効なシーケンスが出力にコピーされる可能性があることを意味します。同様に、
iconv(3) コミットの変換に失敗した場合、警告とともに元のオブジェクトをそのまま出力します。

@item  @samp{--expand-tabs=<n>} 
@itemx  @samp{--expand-tabs} 
@itemx  @samp{--no-expand-tabs} 
出力に表示する前に、ログメッセージでタブ展開を実行します(タブ幅を <n> とみなして <n> 境界に揃うように空白で調整する)。
@samp{--expand-tabs} は @samp{--expand-tabs=8} の省略形であり、 @samp{--no-expand-tabs} は
@samp{--expand-tabs=0} の省略形です。タブの展開を無効にします。

デフォルトでは、タブはログメッセージを4つのスペースでインデントするきれいな形式(pretty formats)で展開されます(つまり、デフォルトの
@emph{medium} と’full' と @emph{fuller})。

@item  @samp{--notes[=<ref>]} 
コミットログメッセージを表示するときに、コミットに注釈を付けるnotes(git-notes(1)
参照)を表示します。これは、コマンドラインに @samp{--pretty} 、@samp{--format} または @samp{--oneline}
オプションが指定されていない場合の、 @samp{git log} と @samp{git show} と ` git whatchanged` コマンドのデフォルトです。

デフォルトでは、表示されるnotesは、 @samp{core.notesRef} および @samp{notes.displayRef}
変数(または対応する環境変数オーバーライド)にリストされているnote refからのものです。詳細については git-config(1)
を参照してください。

オプションの @emph{<ref>} 引数を使用して、refを使用して表示するnotesを検索します。 refは、 @samp{refs/notes/}
で始まる完全なrefnameを指定できます。 @samp{notes/} で始まるか、 @samp{refs/} で始まるか、それ以外で始まる場合、
@samp{refs/notes/} が接頭辞として付けられ、refのフルネームを形成します。

複数の --notes オプションを組み合わせて、表示するノートを制御できます。 例: "--notes=foo" は "refs/notes/foo"
からのnotesのみを表示します。 "--notes=foo --notes" は、 "refs/notes/foo" とデフォルトのnotes
ref(s) の両方のnotesを表示します。

@item  @samp{--no-notes} 
notesを表示しないでください。 これは、notesが表示されるnotes refのリストをリセットすることにより、上記の @samp{--notes}
オプションを無効にします。 オプションは、コマンドラインで指定された順序で解析されます。 "--notes --notes=foo --no-notes
--notes=bar" は、 "refs/notes/bar" からのnotesのみを表示します。

@item  @samp{--show-notes[=<ref>]} 
@itemx  @samp{--[no-]standard-notes} 
これらのオプションは非推奨です。 代わりに、上記の --notes/--no-notes オプションを使用してください。

@item  @samp{--show-signature} 
署名を @samp{gpg --verify} に渡して、署名されたコミットオブジェクトの有効性を確認し、出力を表示します。

@item  @samp{--relative-date} 
@samp{--date=relative} と同じ。

@item  @samp{--date=<format>} 
@samp{--pretty} を使用する場合など、人間が読める形式で表示される日付に対してのみ有効になります。 @samp{log.date} 構成変数(config
variable)は、logコマンドの @samp{--date}
オプションのデフォルト値を設定します。デフォルトでは、日付は元のタイムゾーン(コミッターの、または作者のいずれか)で表示されます。フォーマットに
@samp{-local} が追加されている場合(例: @samp{iso-local} )、代わりにユーザーのローカルタイムゾーンが使用されます。

@samp{--date=relative} は、現在の時刻を基準にした日付を示します。例: “2 hours ago” 。 @samp{-local} オプションは
@samp{--date = relative} には効果がありません。

@samp{--date=local} は @samp{--date=default-local} のエイリアスです。

@samp{--date=iso} (または @samp{--date=iso8601} )は、タイムスタンプをISO 8601のような形式で表示します。厳密なISO
8601形式との違いは以下のとおりです:

@itemize 

@item
@samp{T} 日付/時刻区切り文字の代わりにスペース

@item
時間とタイムゾーンの間のスペース

@item
タイムゾーンの時間と分の間にコロンがありません
@end itemize

@samp{--date=iso-strict} (または @samp{--date=iso8601-strict} )は、タイムスタンプを厳密なISO
8601形式で表示します。

@samp{--date=rfc} (または @samp{--date=rfc2822} )は、RFC
2822形式のタイムスタンプを示します。これは、電子メールメッセージでよく見られます。

@samp{--date=short} は、日付のみを表示し、時刻は表示せず、 @samp{YYYY-MM-DD} 形式で表示します。

@samp{--date=raw} は、エポック(1970-01-01 00:00:00 UTC)からの秒数、スペース、UTCからのオフセット(@samp{+} または
@samp{-} の付いた4桁数字で、最初の2つは時間、次の2つは分です)。つまり、タイムスタンプが @samp{strftime("%s %z")}
でフォーマットされているかのようになります。 @samp{-local}
オプションは、seconds-since-epoch値(常にUTCで測定されます)には影響しませんが、付随するタイムゾーン値を切り替えることに注意してください。

@samp{--date=human}
は、タイムゾーンが現在のタイムゾーンと一致しない場合はタイムゾーンを表示し、一致する場合は日付全体を印刷しません(つまり、「今年」の日付の場合は年の印刷をスキップしますが、何があったか覚えてるような過去数日については日付自体もスキップします)。
古い日付の場合、時と分も省略されます。

@samp{--date=unix} は、日付をUnixエポックタイムスタンプ(1970年からの秒数)として表示します。 @samp{--raw}
と同様に、これは常にUTCであるため、 ` -local` は効果がありません。

@samp{--date=format:...} は、内部で処理される%zと%Zを除いて、フォーマット @samp{...} をあなたのシステムの @samp{strftime}
に送ります。 @samp{--date=format:%c}
を使用して、システムロケールの推奨形式で日付を表示します。フォーマットプレースホルダーの完全なリストについては、 @samp{strftime}
マニュアルを参照してください。 @samp{-local} を使用する場合、正しい構文は @samp{--date=format-local:...} です。

@samp{--date=default} はデフォルトの形式であり、いくつかの例外を除いて @samp{--date=rfc2822} に似ています:

@itemize 

@item
曜日の後にコンマはありません

@item
ローカルタイムゾーンを使用する場合、タイムゾーンは省略されます
@end itemize

@item  @samp{--parents} 
コミットの親も出力します( "commit parent…" の形式で)。親の書き換えも可能にします。上記の @emph{History
Simplification} 参照してください。

@item  @samp{--children} 
コミットの子も出力します( "commit child…" の形式で)。親の書き換えも可能にします。上記の @emph{History
Simplification} を参照してください。

@item  @samp{--left-right} 
対称差のどちら側からコミットに到達できるかをマークします。左側からのコミットには`<@samp{が付けられ、右側からのコミットには
`>`が付けられます。}--boundary`と組み合わせると、それらのコミットの前に`-`が付きます。

たとえば、以下のトポロジーの場合:

@example
             y---b---b  branch B
            / \ /
           /   .
          /   / \
         o---x---a---a  branch A
@end example


以下のような出力が得られます:

@example
        $ git rev-list --left-right --boundary --pretty=oneline A...B

        >bbbbbbb... 3rd on b
        >bbbbbbb... 2nd on b
        <aaaaaaa... 3rd on a
        <aaaaaaa... 2nd on a
        -yyyyyyy... 1st on b
        -xxxxxxx... 1st on a
@end example


@item  @samp{--graph} 
出力の左側に、コミット履歴のテキストベースのグラフィック表現を描画します。グラフ履歴を適切に描画するために、コミットの間に余分な行が出力される可能性があります。
@samp{--no-walk} と組み合わせることはできません。

これにより、親の書き換えが可能になります。上記の @emph{History Simplification} を参照してください。

これは、デフォルトで @samp{--topo-order} オプションを意味しますが、 @samp{--date-order} オプションも指定できます。

@item  @samp{--show-linear-break[=<barrier>]} 
--graph
を使用しない場合、すべての履歴ブランチがフラット化されるため、2つの連続するコミットが線形ブランチに属していないことがわかりにくくなる可能性があります。このオプションは、その場合、それらの間に障壁を置きます。
@samp{<barrier>} が指定されている場合、デフォルトの障壁文字列の代わりに @samp{<barrier>} が表示されます。
@end table

@noindent

@chapheading PRETTY FORMATS

コミットがマージであり、 pretty-format が @emph{oneline} または @emph{email} または @emph{raw} でない場合、
@emph{Author:} 行の前に追加の行が挿入されます。この行は "Merge: "
で始まり、先祖のコミットのハッシュがスペースで区切られて出力されます。履歴の表示を制限している場合、たとえば、特定のディレクトリまたはファイルに関連する変更のみに関心がある場合、リストされたコミットは必ずしも
@strong{直接} の親コミットのリストではない可能性があることに注意してください。

いくつかの組み込みフォーマットがあります。そして以下で説明するように、 pretty.<name> 構成オプション(config
option)を別のフォーマット名または @emph{format:}
文字列に設定することで、追加のフォーマットを定義できます(git-config(1)
参照)。組み込みフォーマットの詳細は以下のとおりです:

@itemize 

@item
@emph{oneline}

@example
<hash> <title line>
@end example

これは、可能な限りコンパクトになるように設計されています。

@item
@emph{short}

@example
commit <hash>
Author: <author>
@end example

@example
<title line>
@end example

@item
@emph{medium}

@example
commit <hash>
Author: <author>
Date:   <author date>
@end example

@example
<title line>
@end example

@example
<full commit message>
@end example

@item
@emph{full}

@example
commit <hash>
Author: <author>
Commit: <committer>
@end example

@example
<title line>
@end example

@example
<full commit message>
@end example

@item
@emph{fuller}

@example
commit <hash>
Author:     <author>
AuthorDate: <author date>
Commit:     <committer>
CommitDate: <committer date>
@end example

@example
<title line>
@end example

@example
<full commit message>
@end example

@item
@emph{reference}

@example
<abbrev hash> (<title line>, <short author date>)
@end example

この形式は、コミットメッセージ内の別のコミットを参照するために使用され、 @samp{--pretty='format:%C(auto)%h (%s,
%ad)'} と同じです。 デフォルトでは、別の @samp{--date} オプションが明示的に指定されていない限り、日付は @samp{--date=short}
でフォーマットされます。formatプレースホルダーを使用する他の @samp{format:} と同様に、その出力は、 @samp{--decorate} や
@samp{--walk-reflogs} などの他のオプションの影響を受けません。

@item
@emph{email}

@example
From <hash> <date>
From: <author>
Date: <author date>
Subject: [PATCH] <title line>
@end example

@example
<full commit message>
@end example

@item
@emph{mboxrd}

@emph{email} と同様ですが、コミットメッセージの "From " で始まる行(前に0個以上の ">" が付いている)は ">"
でクォートされているため、新しいコミットの開始と混同されることはありません。

@item
@emph{raw}

@emph{raw} 形式は、コミットオブジェクトに格納されているとおりにコミット全体を正確に表示します。とりわけ --abbrev または
--no-abbrev
のどちらが使用されているかに関係なく、ハッシュは完全に表示され、「親」(parents)情報は、移植や履歴の単純化を考慮せずに、真の親のコミットを示します。この形式は、コミットの表示方法に影響しますが、いわゆる
@samp{git log --raw} の差分の表示方法ではありません。生のdiff形式で完全なオブジェクト名を取得するには、 @samp{--no-abbrev}
を使用します。

@item
@emph{format:<string>}

@emph{format:<string>} 形式を使用すると、表示する情報を指定できます。注意: これはprintf書式に少し似ていますが、 @emph{\n}
の代わりに @emph{%n} を使用して改行を取得するという例外に注意してください。

例:  @emph{format:"The author of %h was %an, %ar%nThe title was >>%s<<%n"}
は以下のように表示されます:

@example
The author of fe6e0ee was Junio C Hamano, 23 hours ago
The title was >>t4119: test autocomputing -p<n> for traditional diff input.<<
@end example


さて、以下がプレースホルダー達です:

@itemize 

@item
単一のリテラル文字に展開されるプレースホルダー:

@table @asis

@item  @emph{%n} 
改行(newline)

@item  @emph{%%} 
'%'そのもの

@item  @emph{%x00} 
16進数のバイト値を出力
@end table

@item
うしろのプレースホルダーのフォーマッティングに影響するプレースホルダー:

@table @asis

@item  @emph{%Cred} 
赤色に切り替える

@item  @emph{%Cgreen} 
緑色に切り替える

@item  @emph{%Cblue} 
青色に切り替える。

@item  @emph{%Creset} 
色をリセットする

@item  @emph{%C(…)} 
git-config(1) の "CONFIGURATION FILE" 節の Values で説明されている色の指定。
デフォルトでは、色はログ出力が有効になっている場合にのみ表示されます（ @samp{color.diff} または ` color.ui` または
@samp{--color`によって、ターミナルに行く場合は前者の `auto} 設定を尊重します)。 @samp{%C(auto,...)} は、 default
の歴史的同義語として受け入れられます(例: @samp{%C(auto,red)})。 @samp{%C(always,...)}
を指定すると、色が有効になっていない場合でも色が表示されます(この形式やgitが色付けする可能性のある他のすべてのものを含め、出力全体の色を有効にするために
@samp{--color = always} の使用を検討してください)。 @samp{auto} のみ(つまり、 @samp{%C(auto)}
)は、色が再び切り替わるまで、続くプレースホルダーで自動色付けをオンにします。

@item  @emph{%m} 
左(@samp{<}) または 右(@samp{>}) または 境界 (@samp{-}) の印

@item  @emph{%w([<w>[,<i1>[,<i2>]]])} 
git-shortlog(1) の -w オプションのように、
行の折り返しを切り替えます。

@item  @emph{%<(<N>[,trunc|ltrunc|mtrunc])} 
次のプレースホルダーに少なくともN列を使用させ、
必要に応じて右側にスペースを埋め込みます。オプションで、出力がN列より長い場合は、先頭(ltrunc)または中間(mtrunc)または末尾(trunc)で切り捨てます。注意:
切り捨ては、 N >= 2 でのみ正しく機能することに注意してください。

@item  @emph{%<|(<N>)} 
次のプレースホルダーを少なくともN番目の列まで取得し、
必要に応じて右側にスペースを埋め込みます

@item  @emph{%>(<N>)}, @emph{%>|(<N>)} 
それぞれ @emph{%<(<N>)} 、 @emph{%<|(<N>)} に似ていますが、
左側にスペースが埋め込まれています

@item  @emph{%>>(<N>)}, @emph{%>>|(<N>)} 
@emph{%>(<N>)} 、 @emph{%>|(<N>)} とそれぞれ似ていますが、
次のプレースホルダーが指定されたよりも多くのスペースを取り、その左側にスペースがある場合は、それらのスペースを使用します。

@item  @emph{%><(<N>)}, @emph{%><|(<N>)} 
それぞれ @emph{%<(<N>)} 、 @emph{%<|(<N>)} に似ていますが、
両側にパディングがあります(つまり、テキストが中央に配置されます)
@end table

@item
コミットから抽出された情報に展開するプレースホルダー:

@table @asis

@item  @emph{%H} 
コミットハッシュ

@item  @emph{%h} 
省略されたコミットハッシュ

@item  @emph{%T} 
ツリーハッシュ

@item  @emph{%t} 
省略されたツリーハッシュ

@item  @emph{%P} 
親のハッシュ達

@item  @emph{%p} 
省略された親のハッシュ達

@item  @emph{%an} 
作者名

@item  @emph{%aN} 
作者名( .mailmap に関しては、git-shortlog(1) または
git-blame(1) を参照)

@item  @emph{%ae} 
作者電子メールアドレス

@item  @emph{%aE} 
作者電子メールアドレス(.mailmap に関しては git-shortlog(1) または
git-blame(1) を参照)

@item  @emph{%al} 
作者電子メールアドレスアカウント名(local-part)( @emph{@@} の前の部分)

@item  @emph{%aL} 
作者電子メールアドレスアカウント名(local-part)(@emph{%al} 参照) .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%ad} 
作成日(フォーマットに関しては --date= オプション参照)

@item  @emph{%aD} 
作成日 RFC2822形式

@item  @emph{%ar} 
作成日 相対(relative)形式

@item  @emph{%at} 
作成日 UNIXタイムスタンプ形式

@item  @emph{%ai} 
作成日 ISO 8601風形式

@item  @emph{%aI} 
作成日 厳密なISO 8601形式

@item  @emph{%as} 
作成日 短い形式(@samp{YYYY-MM-DD})

@item  @emph{%ah} 
作成日 human形式( git-rev-list(1) の @samp{--date=human}
オプションのようなかんじ)

@item  @emph{%cn} 
コミッター名

@item  @emph{%cN} 
コミッター名( .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%ce} 
コミッター電子メールアドレス

@item  @emph{%cE} 
コミッター電子メールアドレス(.mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%cl} 
コミッター電子メールアドレスアカウント名(local-part)( @emph{@@} の前の部分)

@item  @emph{%cL} 
コミッター電子メールアドレスアカウント名(local-part)( @emph{%cl} 参照) .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%cd} 
コミッター日付(フォーマットに関しては --date= オプション参照)

@item  @emph{%cD} 
コミッター日付 RFC2822形式

@item  @emph{%cr} 
コミッター日付 相対(relative)形式

@item  @emph{%ct} 
コミッター日付 UNIXタイムスタンプ形式

@item  @emph{%ci} 
コミッター日付 ISO 8601風形式

@item  @emph{%cI} 
コミッター日付 厳密なISO 8601形式

@item  @emph{%cs} 
コミッター日付 短い形式(@samp{YYYY-MM-DD})

@item  @emph{%ch} 
コミッター日付 human形式(git-rev-list(1) の @samp{--date=human}
オプションのようなかんじ)

@item  @emph{%d} 
ref名 git-log(1) の --decorate オプションみたいなの

@item  @emph{%D} 
" (", ")" で囲ってないref名

@item  @emph{%(describe[:options])} 
git-describe(1) のような人間が読める名前。
説明できないコミットの場合は空の文字列。 @samp{describe}
文字列の後には、コロンと0個以上のカンマ区切りオプションを続けることができます。タグが同時に追加または削除されると、説明に一貫性がなくなる可能性があります。

@itemize 

@item
@emph{match=<pattern>}:  "refs/tags/" プレフィックスを除いて、指定された @samp{glob(7)}
パターンに一致するタグのみを考慮します。

@item
@emph{exclude=<pattern>}: "refs/tags/" プレフィックスを除いて、指定された @samp{glob(7)}
パターンに一致するタグを考慮しないでください。
@end itemize

@item  @emph{%S} 
コミットに到達したコマンドラインで指定されたref名
( @samp{git log --source} など)は、 @samp{git log} でのみ機能します

@item  @emph{%e} 
エンコーディング

@item  @emph{%s} 
件名(subject)

@item  @emph{%f} 
ファイル名に適した、サニタイズされた件名

@item  @emph{%b} 
本文(body)

@item  @emph{%B} 
生本文(raw body)(ラップされてない件名と本文)

@item  @emph{%N} 
コミットノート(commit notes)

@item  @emph{%GG} 
署名されたコミットの為のGPSからの生の検証メッセージ

@item  @emph{%G?} 
良い(good)な(有効な)署名の場合は "G" 、
悪い(bad)な署名の場合は "B" 、有効性が不明(unknown)な良い署名の場合は "U" 、期限切れ(eXpired)の良い署名の場合は "X"
、期限切れのキーで作成された良い署名の場合は "Y" 、取り消されたキーによって作成された良い署名の場合は "R"
、署名を確認できない場合(キーの欠落など)は "E" 、署名がない場合は "N" を表示します。

@item  @emph{%GS} 
署名されたコミットの署名者の名前を表示する

@item  @emph{%GK} 
署名されたコミットに署名するために使用されるキーを表示する

@item  @emph{%GF} 
署名されたコミットに署名するために使用されるキーのフィンガープリントを表示する

@item  @emph{%GP} 
署名されたコミットに署名するためにサブキーが使用された
主キーのフィンガープリントを表示します

@item  @emph{%GT} 
署名されたコミットに署名するために使用されるキーの信頼レベル(trust level)を表示します

@item  @emph{%gD} 
reflogセレクター(例:@samp{refs/stash@@@{1@}} or @samp{refs/stash@@@{2 minutes ago@}})
この形式は、 @samp{-g} オプションで説明されている規則に従います。 @samp{@@} の前の部分は、コマンドラインで指定されたrefnameです(したがって、
@samp{git log -g refs/heads/master} は @samp{refs/heads/master@@@{0@}} を生成します)。

@item  @emph{%gd} 
短縮されたreflogセレクター。 @samp{%gD} と同じですが、
人間が読みやすいようにrefname部分が短縮されています(したがって、 @samp{refs/heads/master} は単に @samp{master}
になります)。

@item  @emph{%gn} 
reflog ID名

@item  @emph{%gN} 
reflog ID名( .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%ge} 
reflog ID 電子メールアドレス

@item  @emph{%gE} 
reflog ID 電子メールアドレス( .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%gs} 
reflog 件名

@item  @emph{%(trailers[:options])} 
git-interpret-trailers(1) によって解釈されるようにボディのトレーラーを表示します。
@samp{trailers}
文字列の後には、コロンと0個以上のカンマ区切りオプションを続けることができます。いずれかのオプションが複数回提供された場合、それぞれ最後のものが優先されます。

ブール値オプションは、オプションの値 @samp{[=<BOOL>]} を受け入れます。 値 @samp{true} 、@samp{false} 、 @samp{on} 、@samp{off}
などはすべて受け入れられます。 git-config(1) の "EXAMPLES" の "boolean"
サブセクションを参照してください。ブール値オプションが値なしで指定された場合、それは有効を指定した事になります。

@itemize 

@item
@emph{key=<K>}
は指定されたキーを持つトレーラーのみを表示します。マッチングは大文字と小文字を区別せずに行われ、末尾のコロンはオプションです。オプションが複数回指定されている場合、いずれかのキーに一致するトレーラー行が表示されます。このオプションは自動的に
@samp{only} オプションを有効にして、トレーラーブロック内の非トレーラー行が非表示になるようにします。それが望ましくない場合は、
@samp{only=false} で無効にすることができます。 たとえば、 @samp{%(trailers:key=Reviewed-by)} は、キーが
`Reviewed-by`のトレーラー行を表示します。

@item
@emph{only[=<BOOL>]} はトレーラーブロックに非トレーラー行を含めるかどうかを選択します。

@item
@emph{separator=<SEP>}
はトレーラー行の間に挿入される区切り文字を指定します。このオプションが指定されていない場合、各トレーラー行は改行文字で終了します。文字列SEPには、上記のリテラルフォーマットコードが含まれる場合があります。区切り文字としてコンマを使用するには、次のオプションとして解析されないよう
@samp{%x2C} を使用する必要があります。 たとえば、 %(trailers:key=Ticket,separator=%x2C )` は、キーが
"Ticket" であるすべてのトレーラー行をカンマとスペースで区切って表示します。

@item
@emph{unfold[=<BOOL>]} は interpret-trailer の @samp{--unfold}
オプションが指定されたかのように動作させます。たとえば、 @samp{%(trailers:only,unfold=true)}
が展開され、すべてのトレーラー行が表示されます。

@item
@emph{keyonly[=<BOOL>]} トレーラーのキー部分のみを表示。

@item
@emph{valueonly[=<BOOL>]} トレーラーの値部分のみ表示。

@item
@emph{key_value_separator=<SEP>}
トレーラー行の間に挿入される区切り文字を指定します。このオプションが指定されていない場合、各トレーラーのキーと値のペアは ": " で区切られます。
それ以外の場合は、上記の @emph{separator=<SEP>} と同じセマンティクスを共有します。
@end itemize
@end table
@end itemize
@end itemize

@quotation

@strong{Note}

一部のプレースホルダーは、リビジョントラバーサルエンジンに指定された他のオプションに依存する場合があります。 たとえば、 @samp{%g*}
reflogオプションは、reflogエントリをトラバースしない限り(たとえば、 @samp{git log
-g`によって)空の文字列を挿入します。コマンドラインで `--decorate} がまだ指定されていない場合、 @samp{%d} と @samp{%D}
プレースホルダーは「短い」(short)装飾形式を使用します。
@end quotation

プレースホルダーの @emph{%} の後に @samp{+}
(プラス記号)を追加すると、プレースホルダーが空でない文字列に展開される場合に限り、展開の直前に改行が挿入されます。

プレースホルダーの @emph{%} の後に @samp{-}
(マイナス記号)を追加すると、プレースホルダーが空の文字列に展開された場合にのみ、展開の直前の連続するすべての改行が削除されます。

プレースホルダーの @emph{%} の後に ` `
(スペース)を追加すると、プレースホルダーが空でない文字列に展開される場合に限り、展開の直前にスペースが挿入されます。

@itemize 

@item
@emph{tformat:}

@emph{tformat:} 形式は、 "separator" セマンティクスの代わりに "terminator" セマンティクスを提供することを除いて、
@emph{format:} とまったく同じように機能します。
つまり、各コミットには、エントリ間に区切り文字を配置するのではなく、メッセージターミネータ文字(通常は改行)が追加されます。
これは、「1行」形式と同様に、1行形式の最終エントリが新しい行で適切に終了することを意味します。 例えば:

@example
$ git log -2 --pretty=format:%h 4da45bef \
  | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
4da45be
7134973 -- NO NEWLINE

$ git log -2 --pretty=tformat:%h 4da45bef \
  | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
4da45be
7134973
@end example


加えて、 @samp{%} が含まれている認識されない文字列は、その前に @samp{tformat:} があるかのように解釈(interpret)されます。
たとえば、以下の2つは同等です:

@example
$ git log -2 --pretty=tformat:%h 4da45bef
$ git log -2 --pretty=%h 4da45bef
@end example

@end itemize

@noindent

@chapheading DIFF FORMATTING

デフォルトでは、 @samp{git log} はdiff出力を生成しません。以下のオプションを使用して、各コミットによって行われた変更を表示できます。

注意: @samp{--diff-merges} のバリエーション(短い @samp{-m}、 @samp{-c}、 @samp{--cc}
オプションを含む)の1つが明示的に指定されていない限り、マージコミットはdiffを表示しませんし、@samp{--patch`のようなdiff書式が選択されていても、}-S`のような検索オプションと一致しません。例外は、`--first-parent`が使用されている場合です。この場合、`first-parent`がデフォルトの書式です。

@table @asis

@item  @samp{-p} 
@itemx  @samp{-u} 
@itemx  @samp{--patch} 
パッチを生成します(generating patches に関するセクションを参照)。

@item  @samp{-s} 
@itemx  @samp{--no-patch} 
diff出力を抑制します。デフォルトでパッチを表示する @samp{git show} のようなコマンド、または @samp{--patch}
の効果をキャンセルする場合に便利です。

@item  @samp{--diff-merges=(off|none|on|first-parent|1|separate|m|combined|c|dense-combined|cc)} 
@itemx  @samp{--no-diff-merges} 
マージコミットに使用するdiff形式を指定します。 @samp{--first-parent} が使用されている場合を除き、デフォルトは
@samp{off} です。使用されている場合は、 @samp{first-parent} がデフォルトです。

@table @asis

@item  @samp{--diff-merges=(off|none)} 
@itemx  @samp{--no-diff-merges} 
マージコミットのdiffの出力を無効にします。暗黙の値を上書きするのに便利です。

@item  @samp{--diff-merges=on} 
@itemx  @samp{--diff-merges=m} 
@itemx  @samp{-m} 
このオプションにより、マージコミットのdiff出力がデフォルトの形式で表示されます。 @samp{-m} は、 @samp{-p}
も指定されている場合にのみ出力を生成します。デフォルトの形式は、 @samp{log.diffMerges} 構成パラメーター(configuration
parameter)を使用して変更できます。デフォルト値は @samp{separate} です。

@item  @samp{--diff-merges=first-parent} 
@itemx  @samp{--diff-merges=1} 
このオプションにより、マージコミットは最初の親に関してのみ完全なdiffを表示します。

@item  @samp{--diff-merges=separate} 
これにより、マージコミットは各親に関して完全なdiffを表示します。親ごとに個別のログエントリとdiffが生成されます。

@item  @samp{--diff-merges=combined} 
@itemx  @samp{--diff-merges=c} 
@end table

@item  @samp{-c:} 
このオプションを使用すると、マージコミットのdiff出力は、親と結果のペアごとの差分を一度に1つずつ表示するのではなく、各親からの差分をマージ結果に同時に表示します。さらに、すべての親から変更されたファイルのみが一覧表示されます。
@samp{-c} は @samp{-p} の機能を含んでいます。

@table @asis

@item  @samp{--diff-merges=dense-combined} 
@itemx  @samp{--diff-merges=cc} 
@itemx  @samp{--cc} 
このオプションを使用すると、 @samp{--diff-merges=Combined}
によって生成される出力は、親のコンテンツに2つの派生(variants)しかない、興味のないハンクを省略してさらに圧縮され、マージ結果は変更なしでそのうちの1つを選択します。
@samp{--cc} は @samp{-p} の機能を含んでいます。
@end table

@item  @samp{--combined-all-paths} 
このフラグにより、結合された差分(マージコミットに使用)にすべての親からのファイルの名前が一覧表示されます。したがって、これは
@samp{--diff-merges=[dense-]combined}
が使用されている場合にのみ有効であり、ファイル名の変更が検出された場合(つまり、名前の変更またはコピーの検出が要求された場合)にのみ役立つ可能性があります。

@item  @samp{-U<n>} 
@itemx  @samp{--unified=<n>} 
通常の3行ではなく、<n> 行の内容でdiffを生成します。
@samp{--patch} の機能を含んでいます。

@item  @samp{--output=<file>} 
stdout ではなく指定のファイルに出力します。

@item  @samp{--output-indicator-new=<char>} 
@itemx  @samp{--output-indicator-old=<char>} 
@itemx  @samp{--output-indicator-context=<char>} 
生成されたパッチの新しい行、古い行、またはコンテキスト行を示すために使用される文字を指定します。 通常、それらはそれぞれ @emph{+} 、 @emph{-} 、 ' '
です。

@item  @samp{--raw} 
コミットごとに、生の差分形式を使用して変更の概要を表示します。
git-diff(1) の "RAW OUTPUT FORMAT" セクションを参照してください。
これは、ログ自体をraw形式で表示することとは異なります。
これは @samp{--format=raw} で
実現できます。

@item  @samp{--patch-with-raw} 
@samp{-p --raw} の同義語。

@item  @samp{-t} 
diff出力にツリーオブジェクトを表示します。

@item  @samp{--indent-heuristic} 
diffハンクの境界をずらす(shift)ヒューリスティックを有効にして、パッチを読みやすくします。 これがデフォルトです。

@item  @samp{--no-indent-heuristic} 
インデントヒューリスティック(indent heuristic)を無効にします。

@item  @samp{--minimal} 
より多くの時間を費やして、可能な限り最小のdiffが生成されるようにします。

@item  @samp{--patience} 
"patience diff" アルゴリズムを使用してdiffを生成します。

@item  @samp{--histogram} 
"histogram diff" アルゴリズムを使用してdiffを生成します。

@item  @samp{--anchored=<text>} 
"anchored diff" アルゴリズムを使用してdiffを生成します。

このオプションは複数回指定できます。

行がソースと宛先の両方に存在し、1回だけ存在し、このテキストで始まる場合、このアルゴリズムは、その行が出力に削除または追加として表示されないようにします。内部で
"patience diff" アルゴリズムを使用します。

@item  @samp{--diff-algorithm=@{patience|minimal|histogram|myers@}} 
diffアルゴリズムを選択します。その派生(variants)は以下のとおりです:

@table @asis

@item  @samp{default}, @samp{myers} 
基本的な貪欲な差分アルゴリズム(greedy diff algorithm)。現在、これがデフォルトです。

@item  @samp{minimal} 
より多くの時間を費やして、可能な限り最小のdiffが生成されるようにします。

@item  @samp{patience} 
パッチを生成する時に "patience diff" アルゴリズムを使います。

@item  @samp{histogram} 
このアルゴリズムは、忍耐アルゴリズム(patience algorithm)を拡張して、「発生率の低い共通要素をサポート」(support
low-occurrence common elements)します。
@end table

たとえば、 あなたが @samp{diff.algorithm}
変数をデフォルト以外の値に設定した上で、それでもデフォルト値を使用する場合は、@samp{--diff-algorithm=default}
オプションを使用する必要があります。

@item  @samp{--stat[=<width>[,<name-width>[,<count>]]]} 
diffstatを生成します。
デフォルトでは、必要なだけのスペースがファイル名部分に使用され、残りはグラフ部分に使用されます。最大幅はデフォルトで端末幅、または端末に接続されていない場合は80桁であり、
@samp{<width>} で上書きできます。ファイル名部分の幅は、コンマの後に別の幅 @samp{<name-width>}
を指定することで制限できます。グラフ部分の幅は、 @samp{--stat-graph-width=<width>}
(統計グラフを生成するすべてのコマンドに影響します)を使用するか、 @samp{diff.statGraphWidth=<width>} ( @samp{git
format-patch} に影響しません)を設定することによって制限できます。3番目のパラメータ @samp{<count>}
を指定することにより、出力を最初の @samp{<count>} 行に制限し、それに @samp{...} が続く形にできます。

これらのパラメータは、 @samp{--stat-width=<width>} と @samp{--stat-name-width=<name-width>} と
@samp{--stat-count=<count>} を使用して個別に設定することもできます。

@item  @samp{--compact-summary} 
ファイルの作成や削除( "new" または "gone" 。オプションでシンボリックリンクの場合は "+l"
)、diffstatのモード変更(実行可能ビットを追加または削除する場合は、それぞれ "+x" または "-x"
)など、拡張ヘッダー情報の要約を出力します。情報はファイル名部分とグラフ部分の間に置かれます。本機能は @samp{--stat} の機能を含んでいます。

@item  @samp{--numstat} 
@samp{--stat`に似ていますが、プログラムで処理しやすい(machine
friendly)ように、追加および削除された行数を10進表記とパス名で省略形なしで表示します。バイナリファイルの場合、 `0 0} の代わりに2つの
@samp{-} を出力します。

@item  @samp{--shortstat} 
変更されたファイルの総数と、追加および削除された行の数を含む @samp{--stat} 形式の最後の行のみを出力します。

@item  @samp{-X[<param1,param2,...>]} 
@itemx  @samp{--dirstat[=<param1,param2,...>]} 
各サブディレクトリの相対的な変更量の分布を出力します。 @samp{--dirstat}
の動作は、パラメータのコンマ区切りリストを渡すことでカスタマイズできます。デフォルトは、 @samp{diff.dirstat}
構成変数によって制御されます(git-config(1) 参照)。以下のパラメータを使用できます:

@table @asis

@item  @samp{changes} 
ソースから削除された、または宛先に追加された行をカウントして、dirstat数を計算します。これは、ファイル内の純粋なコード移動の量を無視します。つまり、ファイル内の行の再配置は、他の変更ほどカウントされません。これは、パラメーターが指定されていない場合のデフォルトの動作です。

@item  @samp{lines} 
通常の行ベースのdiff分析を実行し、削除/追加された行数を合計して、dirstat数を計算します。
(バイナリファイルの場合、バイナリファイルには行の概念がないため、代わりに64バイトのチャンクをカウントします)。 これは @samp{changes}
動作よりも高価な @samp{--dirstat} 動作ですが、他の変更と同じようにファイル内の再配置された行をカウントします。結果の出力は、他の
@samp{--*stat} オプションから得られるものと一致しています。

@item  @samp{files} 
変更されたファイルの数を数えて、dirstat数を計算します。変更された各ファイルは、dirstat分析で等しくカウントされます。これは、ファイルの内容をまったく調べる必要がないため、計算コストが最もかからない
@samp{--dirstat} の動作です。

@item  @samp{cumulative} 
親ディレクトリの子ディレクトリの変更も同様にカウントします。 @samp{cumulative}(累積的)
を使用する場合、報告されるパーセンテージの合計が100%を超える場合があることに注意してください。デフォルトの(非累積的な)動作は、@samp{noncumulative}
パラメーターで指定できます。

@item  <limit> 
整数パラメーターは、カットオフパーセント(デフォルトでは3%)を指定します。指定の割合より少ないディレクトリは、出力に表示されません。
@end table

例: 変更されたファイルの総数の10%未満のディレクトリを無視し、親ディレクトリに子ディレクトリの数を累積しながら、変更されたファイルをカウント:
@samp{--dirstat=files,10,cumulative}

@item  @samp{--cumulative} 
@samp{--dirstat=cumulative} と同義語

@item  @samp{--dirstat-by-file[=<param1,param2>...]} 
@samp{--dirstat=files,param1,param2...} と同義語

@item  @samp{--summary} 
作成、名前変更、モード変更などの拡張ヘッダー情報の短い要約(condensed summary)を出力します。

@item  @samp{--patch-with-stat} 
@samp{-p --stat} と同義語。

@item  @samp{-z} 
改行(newline)ではなく、NULでコミットを区切ります。

また、 @samp{--raw} または @samp{--numstat}
を指定した場合は、パス名を難読化(munge)したり、出力フィールドターミネータとしてNULを使用したりしないでください。

このオプションがないと、構成変数 @samp{core.quotePath} で説明されているように、 通常の文字以外(unusual
characters)を含むパス名が引用符で囲まれます(git-config(1) 参照)。

@item  @samp{--name-only} 
変更されたファイルの名前のみを表示します。 多くの場合、ファイル名はUTF-8でエンコードされます。 詳細については、
git-log(1) のマニュアルページにあるエンコーディングに関する議論(the discussion about
encoding)を参照してください。

@item  @samp{--name-status} 
変更されたファイルの名前とステータスのみを表示します。ステータス文字の意味については、 @samp{--diff-filter}
オプションの説明を参照してください。 @samp{--name-only} と同じように、ファイル名はしばしばUTF-8でエンコードされます。

@item  @samp{--submodule[=<format>]} 
サブモジュールの違いをどのように表示するかを指定します。 @samp{--submodule=short} を指定する場合、 @emph{short}
形式が使用されます。この形式は、範囲の最初と最後にコミットの名前を表示するだけです。 @samp{--submodule} または
@samp{--submodule=log} が指定されている場合、 @emph{log} 形式が使用されます。この形式では、
git-submodule(1) @samp{summary} のように範囲内のコミットが一覧表示されます。 @samp{--submodule=diff}
が指定されている場合、 @emph{diff}
形式が使用されます。この形式は、コミット範囲間のサブモジュールの内容の変更のインラインdiffを示します。configオプションが設定されていない場合、デフォルトは
@samp{diff.submodule} または @emph{short} 形式です。

@item  @samp{--color[=<when>]} 
色付きのdiffを表示します。 @samp{--color} (つまり、 @emph{=<when>} ) は @samp{--color=always} と同じです。
@emph{<when>} は、 @samp{always} または @samp{never} または @samp{auto} のいずれかになります。

@item  @samp{--no-color} 
カラーdiffをオフにします。
@samp{--color=never} と同じです。

@item  @samp{--color-moved[=<mode>]} 
ソースコードの移動した行を別の色にします。
<mode>は、オプションが指定されていない場合はデフォルトで @emph{no} になり、
モードが指定されていないオプションが指定されている場合は @emph{zebra} になります。
モードは以下のいずれかでなければなりません:

@table @asis

@item  no 
移動行をハイライトしません。

@item  default 
@samp{zebra} の同義語です。これは、将来、より賢明なモードに変更される可能性があります。

@item  plain 
ある場所で追加され、別の場所で削除された行は、 @emph{color.diff.newMoved} で色付けされます。 同様に、
@emph{color.diff.oldMoved}
は、差分の別の場所に追加された削除された行に使用されます。このモードは移動された行をピックアップしますが、コードのブロックが順列なしで移動されたかどうかを判断することはレビューではあまり役に立ちません。

@item  blocks 
少なくとも20文字の英数字の移動テキストのブロックが貪欲に検出されます。検出されたブロックは、 @emph{color.diff.@{old,new@}Moved}
色のいずれかを使用して色付けされます。隣接するブロックを区別することはできません。

@item  zebra 
移動されたテキストのブロックは、 @emph{blocks} モードの場合と同様に検出されます。 ブロックは、
@emph{color.diff.@{old,new@}Moved} 色または @emph{color.diff.@{old,new@}MovedAlternative}
色のいずれかを使用して色付けされます。2つの色の間の変化は、新しいブロックが検出されたことを示します。

@item  dimmed-zebra 
@emph{zebra}
に似ていますが、移動されたコードの重要でない部分の追加の調光(dimmed)が実行されます。隣接する2つのブロックの境界線は興味深いと見なされ、残りは興味深いものではありません。
@samp{dimmed_zebra} は非推奨の同義語です。
@end table

@item  @samp{--no-color-moved} 
移動検出をオフにします。 これは、構成設定を上書きするために使用できます。 @samp{--color-moved=no} と同じです。

@item  @samp{--color-moved-ws=<modes>} 
これは、 @samp{--color-moved} の移動検出を実行するときに空白を無視する方法を設定します。
これらのモードは、コンマ区切りのリストとして指定できます:

@table @asis

@item  no 
移動行検出を実行するときに、空白(whitespace)を無視しない。

@item  ignore-space-at-eol 
行末(EOL)での空白(whitespace)の変更を無視します。

@item  ignore-space-change 
空白(whitespace)の数の変更は無視してください。これは、行末の空白(whitespace)を無視し、1つ以上の空白文字(whitespace
characters)の他のすべてのシーケンスを同等と見なします。

@item  ignore-all-space 
行を比較するときは空白(whitespace)を無視します。これにより、一方の行に空白があり、もう一方の行に空白がない場合でも、違いは無視されます。

@item  allow-indentation-change 
最初に移動検出で空白(whitespace)を無視し、空白(whitespace)の変更が行ごとに同じである場合にのみ、移動されたコードブロックをブロックにグループ化します。
これは他のモードと互換性がありません。
@end table

@item  @samp{--no-color-moved-ws} 
移動検出を実行するときは、空白(whitespace)を無視しないでください。これは、構成設定を上書きするために使用できます。
@samp{--color-moved-ws=no} と同じです。

@item  @samp{--word-diff[=<mode>]} 
<mode> を使用して変更された単語を区切ることにより、単語のdiffを表示します。デフォルトでは、単語は空白で区切られます。 以下の
@samp{--word-diff-regex} を参照してください。 <mode> のデフォルトは 'plain’です。 <mode>
は以下のいずれかである必要があります:

@table @asis

@item  color 
変更された単語(word)を色のみを使用して強調表示します。 @samp{--color} を意味します。

@item  plain 
単語を @samp{[-removed-]} および @samp{@{+added+@}} として表示します。
区切り文字が入力に表示されている場合、区切り文字をエスケープしようとしないため、出力があいまいになる可能性があります。

@item  porcelain 
スクリプトの使用を目的とした特別な行ベースの形式を使用します。追加/削除/無変更については、通常の統一されたdiff形式で印刷され、行の先頭の
@samp{+}/@samp{-}/` ` 文字で始まり、行の終わりまで続きます。入力の改行は、それ自体の行のチルダ @samp{~} で表されます。

@item  none 
単語(word)のdiffを再度無効にします。
@end table

注意: 最初のモードの名前にもかかわらず、有効になっている場合、すべてのモードで変更された部分を強調するために色が使用されることに注意してください。

@item  @samp{--word-diff-regex=<regex>} 
空白以外を単語と見なす代わりに、 <regex> を使用して単語が何であるかを決定します。また、すでに有効になっていない限り、この機能は
@samp{--word-diff} の機能を含んでいます。

<regex> の重複しないマッチはすべて、単語と見なされます。これらのマッチの間のすべては空白と見なされ、違いを見つけるためとしては無視されます！
正規表現に @samp{|[^[:space:]]}
を追加して、空白以外のすべての文字とマッチすることを確認することをお勧めします。改行を含むマッチは、改行で黙って切り捨てられます！

たとえば、 @samp{--word-diff-regex=.} は各文字を単語として扱い、それに応じて文字ごとの違いを表示します。

正規表現は、diffドライバーまたは構成オプション(configuration option)を介して設定することもできます。
gitattributes(5) または git-config(1)
を参照してください。これを指定すると、diffドライバーまたは構成設定(configuration
settings)が明示的にオーバーライドされます。diffドライバーは構成設定を上書きします。

@item  @samp{--color-words[=<regex>]} 
@samp{--word-diff=color} に @samp{--word-diff-regex=<regex>}
を加えたものに相当します(正規表現が指定されている場合)。

@item  @samp{--no-renames} 
構成ファイルにデフォルトで指定されている場合でも、名前変更の検出をオフにします。

@item  @samp{--[no-]rename-empty} 
名前変更ソースとして空のブロブを使用するかどうか。

@item  @samp{--check} 
変更によって競合マーカーまたは空白エラーが発生した場合に警告します。空白エラーと見なされるものは、 @samp{core.whitespace}
構成によって制御されます。
デフォルトでは、末尾の空白(空白のみで構成される行を含む)と、行の最初のインデント内で直後にタブ文字が続くスペース文字は、空白エラーと見なされます。問題が見つかった場合は、ゼロ以外のステータスで終了します。なお、
--exit-code とは互換性がありません。

@item  @samp{--ws-error-highlight=<kind>} 
diffの @samp{context} または @samp{old} または @samp{new} 行の空白エラーを強調表示します。複数の値はコンマで区切られ、 @samp{none}
は前の値をリセットし、 @samp{default} はリストを @samp{new} にリセットし、 @samp{all} は old、new、context
の省略形です。このオプションが指定されておらず、構成変数 @samp{diff.wsErrorHighlight} が設定されていない場合、 @samp{new}
行の空白エラーのみが強調表示されます。空白エラーは @samp{color.diff.whitespace} で色分けされています。

@item  @samp{--full-index} 
パッチ形式の出力を生成するときは、最初の一握りの文字(first handful of
characters)の代わりに、「インデックス」行にイメージ前およびイメージ後の完全ブロブオブジェクト名を表示します。

@item  @samp{--binary} 
@samp{--full-index} に加えて、 @samp{git-apply} で適用できるバイナリ差分を出力します。
@samp{--patch} の機能を含んでいます。

@item  @samp{--abbrev[=<n>]} 
完全な40バイトの16進オブジェクト名をdiff-raw形式の出力とdiff-treeヘッダー行に表示する代わりに、オブジェクトを一意に参照する、少なくとも
@emph{<n>} 桁の16進数の長さの最短のプレフィックスを表示します。diffパッチ出力形式では、 @samp{--full-index} が優先されます。つまり、
@samp{--full-index} が指定されている場合、 @samp{--abbrev} に関係なく、完全なブロブ名が表示されます。デフォルト以外の桁数は、
@samp{--abbrev=<n>} で指定できます。

@item  @samp{-B[<n>][/<m>]} 
@itemx  @samp{--break-rewrites[=[<n>][/<m>]]} 
完全な書き換えの変更を削除と作成のペアに分割します。これには以下の2つの目的があります:

これは、ファイルの完全な書き換えに相当する変更が、コンテキストとしてテキストで一致する非常に少数の行と混合された一連の削除と挿入としてではなく、古いものすべての単一の削除とそれに続く
すべての新しいものを1回挿入し、数値 @samp{m} が -B オプションのこの側面を制御します(デフォルトは60%)。 @samp{-B/70%}
は、Gitがそれを完全な書き換えと見なすために、元の30%未満が結果に残る必要があることを指定します(つまり、結果のパッチは、コンテキスト行と混合された一連の削除と挿入になります)。

-M と一緒に使用すると、完全に書き換えられたファイルも名前変更のソースと見なされ(通常、 -M
は、消えたファイルのみを名前変更のソースと見なします)、数 @samp{n} が -Bオプションのこの側面を制御します(デフォルトは50%)。 @samp{-B20%}
は、ファイルのサイズの20%以上と比較して、追加および削除を伴う変更が、別のファイルへの名前変更の可能なソースとして取得される資格があることを指定します。

@item  @samp{-M[<n>]} 
@itemx  @samp{--find-renames[=<n>]} 
diffを生成する場合は、コミットごとに名前の変更を検出して報告します。
履歴をトラバースしながら名前を変更してファイルをフォローする方法については、
@samp{--follow} を参照してください。
@samp{n} が指定されている場合、それは類似性インデックスのしきい値です
(つまり、ファイルのサイズと比較した追加/削除の量)。
たとえば、 @samp{-M90%} は、ファイルの90%以上が変更されていない場合、
Gitが削除/追加のペアを名前変更と見なす必要があることを意味します。
@samp{%} 記号がない場合、数値は小数として読み取られ、その前に小数点が付きます。
つまり、 @samp{-M5} は0.5になるため、@samp{-M50%} と同じになります。
同様に、 @samp{-M05} は @samp{-M5%} と同じです。
検出を正確な名前変更に制限するには、 @samp{-M100%} を使用します。
デフォルトの類似性インデックスは50%です。

@item  @samp{-C[<n>]} 
@itemx  @samp{--find-copies[=<n>]} 
名前と同様コピーを検出します。 @samp{--find-copies-harder} @samp{も参照してください。 `n} を指定すると、 @samp{-M<n>}
と同じ意味になります。

@item  @samp{--find-copies-harder} 
パフォーマンス上の理由から、デフォルトでは、 @samp{-C}
オプションは、コピーの元のファイルが同じ変更組(changeset)で変更された場合にのみコピーを検索します。このフラグにより、コマンドは変更されていないファイルをコピー元の候補として検査します。これは大規模なプロジェクトでは非常にコストのかかる操作であるため、注意して使用してください。
複数の @samp{-C} オプションを指定しても同じ効果があります。

@item  @samp{-D} 
@itemx  @samp{--irreversible-delete} 
削除するプレイメージ(preimage)を省略します。つまり、ヘッダーのみを出力し、プレイメージと @samp{/dev/null}
の差分は出力しません。結果のパッチは、 @samp{patch} または @samp{git apply}
で適用されることを意図していません。これは、変更後にテキストを確認することに集中したい人のためだけのものです。さらに、出力には明らかに、そのようなパッチを手動でも逆に適用するのに十分な情報が不足しているため、オプションの名前が付けられています。

@samp{-B} と併用する場合は、削除/作成ペアの削除部分のプリイメージ(preimage)も省略してください。

@item  @samp{-l<num>} 
@samp{-M} および @samp{-C}
オプションには、名前変更/コピーのサブセットを安価に検出できるいくつかの準備手順が含まれ、その後に、残りのすべてのペアになっていない宛先をすべての関連ソースと比較する徹底的なフォールバック部分が続きます。(名前の変更の場合、残りのペアになっていないソースのみが関係します。コピーの場合、すべての元のソースが関係します)。Nのソースと宛先の場合、この徹底的なチェックのコストは
O(N^2)
です。このオプションは、関係するソース/宛先ファイルの数が指定された数を超えた場合に、名前変更/コピー検出の完全な部分が実行されないようにします。デフォルトは
diff.renameLimit です。 値0は無制限として扱われることに注意してください。

@item  @samp{--diff-filter=[(A|C|D|M|R|T|U|X|B)...[*]]} 
追加(Add)・コピー(Copy)・削除(Delete)・変更(Modify)・名前変更(Rename)されたファイル、タイプが変更されたファイル(T)、マージされていないファイル(U)、不明なファイル(X)、またはペアリングが壊れているファイル(B)のみを選択します。フィルタ文字(無しも含む)の任意の組み合わせを使用できます。
組み合わせに @samp{*} (全てまたは無し)が追加されると、比較で他の基準に一致するファイルがある場合、すべてのパスが選択されます。
他の基準に一致するファイルがない場合、何も選択されません。

また、逆に、除外したい時はこれらの各大文字指定を小文字にして指定します。例えば @samp{--diff-filter=ad}
は、追加および削除されたパスを除外します。

注意:すべてのdiffがすべてのタイプを特徴とするわけではないことに注意してください。
たとえば、インデックスから作業ツリーへのdiffにエントリを追加することはできません(diffに含まれるパスのセットは、インデックスの内容によって制限されるため)。
同様に、これらのタイプの検出が無効になっている場合、コピーおよび名前変更されたエントリは表示されません。

@item  @samp{-S<string>} 
ファイル内の指定の文字列(つまり、 addition 、deletion)の出現回数の差分を調べます。スクリプターが使用することを目的としています。

(構造体など)コードの正確なブロックを探していて、そのブロックが最初に作成されてからの履歴を知りたい場合に便利です。この機能を繰り返し使用して、プリイメージ(preimage)内の興味深いブロックを
@samp{-S} にフィードバックし、そしてあなたはそれをブロックの最初のバージョンを取得するまで続けます。

バイナリファイルも検索されます。

@item  @samp{-G<regex>} 
パッチテキストに <regex> にマッチする 追加/削除 された行が含まれている差分を探します。

@samp{-S<regex> --pickaxe-regex} と @samp{-G<regex>}
の違いを説明するために、同じファイル内で以下のdiffを使用してコミットすることを検討してください:

@example
+    return frotz(nitfol, two->ptr, 1, 0);
...
-    hit = frotz(nitfol, mf2.ptr, 1, 0);
@end example


@samp{git log -G"frotz\(nitfol"} はこのコミットを表示しますが、 @samp{git log -S"frotz\(nitfol"
--pickaxe-regex} は表示しません(その文字列の出現回数が変更されなかったため)。

@samp{--text} が提供されていない限り、 textconv フィルターのないバイナリファイルのパッチは無視されます。

詳細については gitdiffcore(7) の @emph{pickaxe} エントリを参照してください。

@item  @samp{--find-object=<object-id>} 
指定されたオブジェクトの出現回数を変更する違いを探します。 @samp{-S}
と同様に、引数だけが異なり、特定の文字列ではなく特定のオブジェクトIDを検索します。

オブジェクトは、ブロブまたはサブモジュールのコミットにすることができます。 これは、 @samp{git-log} の @samp{-t}
オプションがツリーも探すことを意味します。

@item  @samp{--pickaxe-all} 
@samp{-S} または @samp{-G} が変更を見つけたら、 <string>
の変更を含むファイルだけでなく、その変更セット(changeset)のすべての変更を表示します。

@item  @samp{--pickaxe-regex} 
@samp{-S} に指定した <string> を拡張POSIX正規表現として扱います。

@item  @samp{-O<orderfile>} 
ファイルが出力に表示される順序を制御します。これは @samp{diff.orderFile}
構成変数をオーバーライドします(git-config(1) 参照)。 @samp{diff.orderFile} をキャンセルするには、
@samp{-O/dev/null} を使用します。

出力順序は、 <orderfile>
内のglobパターンの順序によって決定されます。最初のパターンに一致するパス名を持つすべてのファイルが最初に出力され、2番目のパターンに一致する(ただし最初のパターンには一致しない)パス名を持つすべてのファイルが次に出力されます。パス名がどのパターンとも一致しないすべてのファイルは、ファイルの最後に暗黙のすべて一致パターンがあるかのように、最後に出力されます。複数のパス名のランクが同じである場合(同じパターンに一致するが、以前のパターンには一致しない)、相互の出力順序は通常の順序です。

<orderfile> は以下のとおりパースされます:

@itemize 

@item
空白行は無視されるため、読みやすくするための区切りとして使用できます。

@item
ハッシュ ("@samp{#}") で始まる行は無視されるため、コメントに使用できます。
パターンがハッシュで始まる場合は、パターンの先頭にバックスラッシュ(訳注:日本では環境により円記号)("@samp{\}") を追加します。

@item
他の各行には、単一のパターンが含まれています。
@end itemize

パターンは、 FNM_PATHNAME フラグなしで fnmatch(3)
に使用されるパターンと同じ構文とセマンティクスを持ちますが、最終的なパス名コンポーネントをいくつも削除するとパターンと一致する場合、パス名もパターンと一致する点が異なります。
たとえば、パターン "@samp{foo*bar}" は、 "@samp{fooasdfbar}" および "@samp{foo/bar/baz/asdf}" と一致しますが、
"@samp{foobarx}" とは一致しません。

@item  @samp{--skip-to=<file>} 
@itemx  @samp{--rotate-to=<file>} 
名前付き <file> の前のファイルを出力から破棄するか(スキップして)、出力の最後に移動させます(ローテーションさせます)。 これらは主に @samp{git
difftool} コマンドを使用するために考案されたものであり、それ以外の場合はあまり役に立たない可能性があります。

@item  @samp{-R} 
2つの入力を交換します。 つまり、インデックスまたはディスク上のファイルとツリーの内容の違いを表示します。

@item  @samp{--relative[=<path>]} 
@itemx  @samp{--no-relative} 
プロジェクトのサブディレクトリから実行する場合、このオプションを使用して、ディレクトリ外の変更を除外し、それに関連するパス名を表示するように指示できます。サブディレクトリ(ベアリポジトリなど)にいない場合は、引数として
<path> を指定することで、出力を作成するサブディレクトリに名前を付けることができます。 @samp{--no-relative`は、
`diff.relative} 設定オプションと以前の @samp{--relative} の両方を打ち消すために使用できます。

@item  @samp{-a} 
@itemx  @samp{--text} 
すべてのファイルをテキストとして扱います。

@item  @samp{--ignore-cr-at-eol} 
比較を行うときは、行末のキャリッジリターン(carriage-return)を無視します。

@item  @samp{--ignore-space-at-eol} 
行末(EOL)での空白(whitespace)の変更を無視します。

@item  @samp{-b} 
@itemx  @samp{--ignore-space-change} 
空白(whitespace)の数の変更は無視してください。これは、行末の空白(whitespace)を無視し、1つ以上の空白文字(whitespace
characters)の他のすべてのシーケンスを同等と見なします。

@item  @samp{-w} 
@itemx  @samp{--ignore-all-space} 
行を比較するときは空白を無視します。 これにより、一方の行に空白があり、もう一方の行に空白がない場合でも、違いは無視されます。

@item  @samp{--ignore-blank-lines} 
全て空白の行の変更は無視します。

@item  @samp{-I<regex>} 
@itemx  @samp{--ignore-matching-lines=<regex>} 
すべての行が <regex> にマッチする変更を無視します。このオプションは複数回指定できます。

@item  @samp{--inter-hunk-context=<lines>} 
指定された行数までの差分ハンク間のコンテキストを表示し、それによって互いに近いハンクを融合します。デフォルトは
@samp{diff.interHunkContext} で、設定オプションが設定されていない場合は0です。

@item  @samp{-W} 
@itemx  @samp{--function-context} 
関数全体を各変更のコンテキスト行として表示します。関数名は、 @samp{git diff}
がパッチハンクヘッダーを処理するのと同じ方法で決定されます(gitattributes(5) の @emph{Defining a custom
hunk-header} を参照)。

@item  @samp{--ext-diff} 
外部diffヘルパーの実行を許可します。 gitattributes(5) を使用して外部diffドライバーを設定する場合は、
git-log(1) およびその仲間と一緒にこのオプションを使用する必要があります。

@item  @samp{--no-ext-diff} 
外部diffドライバーを禁止します。

@item  @samp{--textconv} 
@itemx  @samp{--no-textconv} 
バイナリファイルを比較するときに、外部テキスト変換フィルターの実行を許可(または禁止)します。 詳細については、
gitattributes(5)
を参照してください。textconvフィルターは通常、一方向の変換であるため、結果のdiffは人間の消費に適していますが、適用(apply)することはできません。このため、textconvフィルターは、
git-diff(1) および git-log(1) に対してのみデフォルトで有効になりますが、
git-format-patch(1) またはdiff配管コマンドに対しては有効になりません。

@item  @samp{--ignore-submodules[=<when>]} 
diff生成のサブモジュールへの変更を無視します。 <when> は、
none・untracked・dirty・allのいずれかになります。これがデフォルトです。noneを使用すると、追跡されていないファイルまたは変更されたファイルが含まれている場合、またはそのHEADがスーパープロジェクトに記録されているコミットと異なる場合にサブモジュールが変更されたと見なされ、
git-config(1) または gitmodules(5) の
ignoreオプションの設定をオーバーライドするために使用できます。untrackedが使用されている場合、サブモジュールには追跡されていないコンテンツのみが含まれている場合、サブモジュールはダーティとは見なされません(ただし、変更されたコンテンツはスキャンされます)。「dirty」を使用すると、サブモジュールの作業ツリーへのすべての変更が無視され、スーパープロジェクトに格納されているコミットへの変更のみが表示されます(これは1.7.0までの動作でした)。「all」を使用すると、サブモジュールへのすべての変更が非表示になります。

@item  @samp{--src-prefix=<prefix>} 
"a/" の代わりに、与えられたソースプレフィックス(source prefix)を表示します。

@item  @samp{--dst-prefix=<prefix>} 
"b/" の代わりに、指定された宛先プレフィックス(destination prefix)を表示します。

@item  @samp{--no-prefix} 
送信元(source)または宛先(destination)のプレフィックスを表示しません。

@item  @samp{--line-prefix=<prefix>} 
出力のすべての行に追加のプレフィックスを付加します。

@item  @samp{--ita-invisible-in-index} 
デフォルトでは、 "git add -N" によって追加されたエントリは、 "git diff" に既存の空のファイルとして表示され、 "git
diff --cached" に新しいファイルとして表示されます。このオプションを使用すると、エントリは "git diff"
では新しいファイルとして表示され、 "git diff --cached" では存在しません。このオプションは、
@samp{--ita-visible-in-index} で元に戻すことができます。どちらのオプションも実験的なものであり、将来削除される可能性があります。
@end table

これらの一般的なオプションの詳細については、 gitdiffcore(7) も参照してください。

@noindent

@chapheading Generating patch text with -p

git-diff(1) 、 git-log(1) 、 git-show(1) 、
git-diff-index(1) 、 git-diff-tree(1) 、
git-diff-files(1) に @samp{-p} オプションを付けて実行するとパッチテキストを生成します。パッチテキストの作成は、
@samp{GIT_EXTERNAL_DIFF} と @samp{GIT_DIFF_OPTS} 環境変数( git(1) 参照)、および @samp{diff}
属性( gitattributes(5) 参照)を介してカスタマイズできます。

-pオプションが生成するものは、従来のdiff形式とは少々異なります:

@enumerate 

@item
先行して、以下のような "git diff" ヘッダーがあります:

@example
diff --git a/file1 b/file2
@end example

名前の変更/コピーが含まれない限り、 @samp{a/} と @samp{b/} のファイル名は同じです。 特に、作成または削除の場合でも、 @samp{a/} または @samp{b/}
ファイル名の代わりに @samp{/dev/ null} が使用されることはありません。

名前変更/コピーが含まれる場合、 @samp{file1} と`file2`
は、それぞれ名前変更/コピーのソースファイルの名前と、名前変更/コピーが生成するファイルの名前を示します。

@item
その後に、1つ以上の拡張ヘッダー行達が続きます:

@example
old mode <mode>
new mode <mode>
deleted file mode <mode>
new file mode <mode>
copy from <path>
copy to <path>
rename from <path>
rename to <path>
similarity index <number>
dissimilarity index <number>
index <hash>..<hash> <mode>
@end example

ファイルモードは、ファイルタイプとファイル許可ビットを含む6桁の8進数として出力されます。

拡張ヘッダーのパス名には、 @samp{a/} および @samp{b/} プレフィックスは含まれません。

類似インデックス(similarity index)は変更されていない行のパーセンテージであり、非類似インデックス(dissimilarity
index)は変更された行のパーセンテージです。これは切り捨てられた整数であり、その後にパーセント記号が続きます。したがって、100％の類似インデックス値は2つの等しいファイルを表し、100％の非類似性は古いファイルから新しいファイルに移行された行がないことを意味します。

インデックス行には、変更前後のブロブオブジェクト名が含まれます。 <mode>
は、ファイルモードが変更されない場合に含まれます。それ以外の場合、別々の行は古いモードと新しいモードを示します。

@item
通常の文字でないキャラクタ(\"unusual\" characters)を含むパス名は、構成変数 @samp{core.quotePath}
で説明されているように引用符で囲まれています( git-config(1)参照)。

@item
出力内のすべての @samp{file1} ファイルはコミット前のファイルを参照し、すべての @samp{file2}
ファイルはコミット後のファイルを参照します。各変更を各ファイルに順番に適用するのは誤りです。たとえば、以下のパッチはaとbを交換します:

@example
diff --git a/a b/b
rename from a
rename to b
diff --git a/b b/a
rename from b
rename to a
@end example

@item
ハンクのヘッダーには、ハンクが適用される関数の名前が記載されています。特定の言語に合わせてこれを調整する方法の詳細については、
gitattributes(5) の "Defining a custom hunk-header" を参照してください。
@end enumerate

@noindent

@chapheading Combined diff format

diffを生成するコマンドは、マージを表示するときに @samp{-c} または @samp{--cc} オプションを使用して「合成diff」(combined
diff)を生成できます。これは git-diff(1) または git-show(1)
でのマージを表示するときのデフォルトの形式です。 注意: これらのコマンドのいずれかに適切な @samp{--diff-merges}
オプションを指定して、特定の形式で差分を強制的に生成できることにも注意してください。

合成diff形式は以下のようになります:

@example
diff --combined describe.c
index fabadb8,cc95eb0..4866510
--- a/describe.c
+++ b/describe.c
@@@@@@ -98,20 -98,12 +98,20 @@@@@@
        return (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;
  @}

- static void describe(char *arg)
 -static void describe(struct commit *cmit, int last_one)
++static void describe(char *arg, int last_one)
  @{
 +      unsigned char sha1[20];
 +      struct commit *cmit;
        struct commit_list *list;
        static int initialized = 0;
        struct commit_name *n;

 +      if (get_sha1(arg, sha1) < 0)
 +              usage(describe_usage);
 +      cmit = lookup_commit_reference(sha1);
 +      if (!cmit)
 +              usage(describe_usage);
 +
        if (!initialized) @{
                initialized = 1;
                for_each_ref(get_name);
@end example


@enumerate 

@item
まず "git diff"  ヘッダーがあり、以下のようになります( @samp{-c} オプションが使用されている場合):

@example
diff --combined file
@end example

または、以下のようになります( @samp{--cc} オプションが使用されている場合):

@example
diff --cc file
@end example

@item
その後に1つ以上の拡張ヘッダー行が続きます(以下の例は、2つの親とのマージを示しています):

@example
index <hash>,<hash>..<hash>
mode <mode>,<mode>..<mode>
new file mode <mode>
deleted file mode <mode>,<mode>
@end example

@samp{mode <mode>,<mode>..<mode>} 行は、<mode> の少なくとも1つが他の <mode>
と異なる場合にのみ表示されます。検出されたコンテンツの移動(名前の変更とコピーの検出)に関する情報を含む拡張ヘッダーは、2つの <tree-ish>
のdiffで機能するように設計されており、合成diff形式では使用されません。

@item
その後に2行の from-file/to-file ヘッダーが続きます

@example
--- a/file
+++ b/file
@end example

従来の統一diff形式の2行ヘッダーと同様に、 @samp{/dev/null} は、作成または削除されたファイルを通知するために使用されます。

ただし、 --combined-all-paths  オプションが指定されている場合、2行の from-file/to-file の代わりに、 N+1
行の from-file/to-file ヘッダーが取得されます。ここで、 N はマージコミットの親の数です。

@example
--- a/file
--- a/file
--- a/file
+++ b/file
@end example

この拡張形式は、名前変更またはコピー検出がアクティブな場合に役立ち、別の親のファイルの元の名前を確認できます。

@item
チャンクヘッダーの形式が変更され、誤って @samp{patch-p1}
にフィードされるのを防ぎます。合成差分形式は、マージコミットの変更を確認するために作成されたものであり、適用されることを意図したものではありません。この変更は、拡張された「インデックス」ヘッダーの変更に似ています:

@example
@@@@@@ <from-file-range> <from-file-range> <to-file-range> @@@@@@
@end example

合成diff形式のチャンクヘッダーには親の数+1の @samp{@@} 文字があります。
@end enumerate

従来の統一diff形式とは異なり、2つのファイルAとBが、 @samp{-} (マイナスはAに表示されますが、Bでは削除されます) または @samp{+}
(プラスはAにはありませんが、Bには追加されます)、または @samp{" "}（スペースは変更なし)
プレフィックスを持つ単一の列で表示される場合、この形式は2つ以上のファイル file1, file2,… を1つのファイルXと比較し、Xが各
fileN とどのように異なるかを示します。ファイルNごとに1つの列が出力行の前に追加され、Xの行が出力行とどのように異なるかを示します。

列Nの @samp{-} 文字は、その行が fileN に表示されているが、結果には表示されていないことを意味します。 列Nの @samp{+}
文字は、結果に行が表示され、 fileN にその行がないことを意味します(つまり、その親の観点から見て行が追加されたことを示す)。

上記の出力例では、関数のシグネチャが両方のファイルから見て変更されています(したがって、 file1 と file2 の両方から2つの @samp{-}
が削除され、さらに @samp{++} が追加されたため、 file1 と file2 のどちらにも表示されません)。また、他の8行は file1 と同じですが、
file2 には表示されません(したがって、接頭辞として @samp{+} が付けられます)。

@samp{git diff-tree -c} で表示される場合、マージコミットの親をマージ結果と比較します(つまり、 file1..fileN が親です)。
@samp{git diff-files -c} で表示される場合、2つの未解決のマージ親を作業ツリーファイルと比較します(つまり、 file1
はステージ2、別名「私たちのバージョン」、 file2 はステージ3、別名「彼らのバージョン」です)。

@noindent

@chapheading EXAMPLES

@table @asis

@item  @samp{git log --no-merges} 
コミット履歴全体を表示しますが、マージはスキップします

@item  @samp{git log v2.6.12.. include/scsi drivers/scsi} 
バージョン @emph{v2.6.12} 以降で @samp{include/scsi} または @samp{drivers/scsi}
サブディレクトリ内のファイルの変更がある、すべてのコミットを表示します

@item  @samp{git log --since="2 weeks ago" -- gitk} 
@emph{gitk} ファイルの変更について過去2週間の範囲で表示します。`--`は*ブランチ*名 @emph{gitk} と混同しないようにするために必要です。

@item  @samp{git log --name-status release..test} 
「test」ブランチにはあるがまだ「release」ブランチにはないコミットを、各コミットが変更するパスのリストとともに表示します。

@item  @samp{git log --follow builtin/rev-list.c} 
ファイルに現在の名前が付けられる前に発生したコミット(訳注:つまりファイル名が変更される前の当該ファイル)を含め、`builtin/rev-list.c`を変更したコミットを表示します。

@item  @samp{git log --branches --not --remotes=origin} 
ローカルブランチ’origin’にあり、'origin’のリモートトラッキングブランチのいずれにも存在していないコミットを表示します。

@item  @samp{git log master --not --remotes=*/master} 
ローカルmasterにはあるが、リモートリポジトリmasterブランチにはないすべてのコミットを表示します。

@item  @samp{git log -p -m --first-parent} 
変更の差分を含む履歴を表示しますが、‘`main
branch’'の観点からのみ、マージされたブランチからのコミットをスキップし、マージによって導入された変更の完全な差分を表示します。これは、単一の統合ブランチにとどまり、そのブランチにすべてのトピックブランチをマージするという厳格なポリシーに従う場合にのみ意味があります。

@item  @samp{git log -L '/int main/',/^@}/:main.c} 
ファイル`main.c`の関数`main()`が時間の経過とともにどのように進化したかを示します。

@item  @samp{git log -3} 
表示するコミットの数を3個に制限します。
@end table

@noindent

@chapheading DISCUSSION

Gitは、ある程度までは文字エンコードに依存しません。

@itemize 

@item
ブロブオブジェクトの内容は、解釈されていないバイトのシーケンスです。コアレベルでのエンコーディング変換はありません。

@item
パス名はUTF-8正規化形式C(UTF-8 normalization form
C)でエンコードされます。これは、ツリーオブジェクト、インデックスファイル、ref名、およびコマンドライン引数、環境変数、構成ファイル(
@samp{.git/config} (git-config(1) 参照) と gitignore(5) と
gitattributes(5) と gitmodules(5)) のパス名に適用されます。

コアレベルのGitは、パス名を単に非NULバイトのシーケンスとして扱い、パス名をエンコードする変換はありません(MacとWindowsを除く)。したがって、非ASCIIパス名の使用は、レガシー拡張ASCIIエンコーディングを使用するプラットフォームやファイルシステムでもほとんど機能します。ただし、そのようなシステムで作成されたリポジトリは、UTF-8ベースのシステム(Linux、Mac、Windowsなど)では正しく機能しません。その逆も同様です。さらに、多くのGitベースのツールは、パス名がUTF-8であると単純に想定しており、他のエンコーディングを正しく表示できません。

@item
コミットログメッセージは通常UTF-8でエンコードされますが、他の拡張ASCIIエンコードもサポートされています。これには、ISO-8859-x、CP125xなどが含まれますが、UTF-16/32、EBCDIC、およびCJKマルチバイトエンコーディング(GBK、Shift-JIS、Big5、EUC-x、CP9xxなど)は含まれません。
@end itemize

我々はコミットログメッセージをUTF-8でエンコードすることをお勧めしますが、コアとGit
Porcelainはどちらも、プロジェクトでUTF-8を強制しないように設計されています。特定のプロジェクトのすべての参加者がレガシーエンコーディングを使用する方が便利だと感じた場合、Gitはそれを禁止しません。
ただし、覚えておくべきことがいくつかあります。

@enumerate 

@item
@emph{git commit} と @emph{git commit-tree}
は、プロジェクトがレガシーエンコーディングを使用していることを明示的に指定しない限り、与えられたコミットログメッセージが有効なUTF-8文字列のように見えない場合に警告を発します。明示的に指定する方法は、以下のように、
@samp{.git/config} ファイルに @samp{i18n.commitEncoding} を含めることです。

@example
[i18n]
        commitEncoding = ISO-8859-1
@end example


上記の設定で作成されたコミットオブジェクトは、 @samp{encoding} ヘッダーに @samp{i18n.commitEncoding} の値を記録します。
これは、後でそれらを見る他の人々を助けるためです。このヘッダーがないということは、コミットログメッセージがUTF-8でエンコードされていることを意味します。

@item
@emph{git log} と @emph{git show} と @emph{git blame} とその仲間たちは、コミットオブジェクトの @samp{encoding}
ヘッダーを見て、特に指定がない限り、ログメッセージをUTF-8に再コーディングしようとします。あなたは以下のように、 @samp{.git/config}
ファイルの @samp{i18n.logOutputEncoding} を使用して目的の出力エンコーディングを指定できます。

@example
[i18n]
        logOutputEncoding = ISO-8859-1
@end example


この構成変数がない場合は、代わりに @samp{i18n.commitEncoding} の値が使用されます。
@end enumerate

UTF-8への再コーディングは必ずしも可逆的な操作ではないため、我々はコミットが行われたときにコミットログメッセージを再コーディングしないことを意図的に選択したことに注意してください。

@noindent

@chapheading CONFIGURATION

コア変数については git-config(1) を、diff生成に関連する設定については git-diff(1)
を参照してください。

@table @asis

@item  format.pretty 
`--format`オプションのデフォルト。(上記’Pretty Formats’を参照してください。)デフォルトは`medium`です。

@item  i18n.logOutputEncoding 
ログを表示するときに使用するエンコーディング。(上記’Discussion’を参照してください。)デフォルトでは、設定されている場合は
@samp{i18n.commitEncoding} の値になり、そうでない場合は UTF-8 になります。

@item  log.date 
人間が読める形式の日付のデフォルト形式。(@samp{--date`オプションと比べてみてください。)デフォルトは "default" です。これは、`Sat
May 8 19:35:34 2010 -0500} のような日付を書き込むことを意味します。

フォーマットが"auto:foo"に設定されていて、かつ、ページャーが使用されている場合、フォーマット "foo"
が日付フォーマットに使用されます。それ以外の場合は"default"が使用されます。

@item  log.follow 
@samp{true`の場合、`git
log`は、単一の<path>が指定されたときに}--follow`オプションが使用されたかのように機能します。これには`--follow`と同じ制限があります。つまり、複数のファイルを追跡するために使用することはできず、非線形履歴(non-linear
history)ではうまく機能しません。

@item  log.showRoot 
`false`の場合、`git log`および関連するコマンドは最初のコミットを大きな作成イベント(big creation
event)として扱いません。`git log -p`出力のルートコミットは、差分を添付せずに表示されます。デフォルトは `true`です。

@item  log.showSignature 
@samp{true`の場合、`git log`および関連するコマンドは}--show-signature`オプションが渡されたかのように動作します。

@item  mailmap.* 
git-shortlog(1) 参照。

@item  notes.displayRef 
`core.notesRef`または`GIT_NOTES_REF`によって設定されたデフォルトに加えて、コマンドの`log`ファミリーでコミットメッセージを表示するときにメモを読み取るためのrefs。git-notes(1)を参照してください。

省略されていないref名またはグロブ(glob)である可能性があり、複数回指定される可能性があります。存在しないrefsに対しては警告が発行されますが、どのrefsとも一致しないグロブ(glob)は黙って無視されます。

この設定は、@samp{--no-notes`オプションで無効にしたり、`GIT_NOTES_DISPLAY_REF`環境変数で上書きしたり、}--notes=<ref>`オプションで上書きしたりできます。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-ls-files,,,Top
@chapheading Name

git-ls-files — インデックスと作業ツリーのファイルに関する情報を表示する

@noindent

@chapheading Synopsis

@display
git ls-files [-z] [-t] [-v] [-f]
                (--[cached|deleted|others|ignored|stage|unmerged|killed|modified])*
                (-[c|d|o|i|s|u|k|m])*
                [--eol]
                [--deduplicate]
                [-x <pattern>|--exclude=<pattern>]
                [-X <file>|--exclude-from=<file>]
                [--exclude-per-directory=<file>]
                [--exclude-standard]
                [--error-unmatch] [--with-tree=<tree-ish>]
                [--full-name] [--recurse-submodules]
                [--abbrev[=<n>]] [--] [<file>…]
@end display


@noindent

@chapheading DESCRIPTION

これにより、インデックス内のファイルリストが実際の作業ディレクトリリストとマージされ、2つのさまざまな組み合わせが表示されます。

以下の1つ以上のオプションを使用して、表示されるファイルを判別できます:

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-c} 
@itemx  @samp{--cached} 
キャッシュされたファイルを出力に表示します(デフォルト)

@item  @samp{-d} 
@itemx  @samp{--deleted} 
削除されたファイルを出力に表示します

@item  @samp{-m} 
@itemx  @samp{--modified} 
変更されたファイルを出力に表示

@item  @samp{-o} 
@itemx  @samp{--others} 
その他(たとえば 追跡されていない)ファイルを出力に表示します

@item  @samp{-i} 
@itemx  @samp{--ignored} 
無視されたファイル(ignored
files)のみを出力に表示します。インデックのファイルを表示する場合は、除外パターンに一致するファイルのみを印刷してください。
「その他」のファイルを表示する場合は、除外パターンに一致するファイルのみを表示してください。標準の無視ルールは自動的にアクティブ化されないため、少なくとも1つの
@samp{--exclude*} オプションが必要です。

@item  @samp{-s} 
@itemx  @samp{--stage} 
ステージングされたコンテンツのモードビット、オブジェクト名、ステージ番号を出力に表示します。

@item  @samp{--directory} 
ディレクトリ全体が「その他」に分類される場合は、(末尾にスラッシュを付けて)そのディレクトリ名だけを表示し、ディレクトリの内容を表示しないでください。

@item  @samp{--no-empty-directory} 
空のディレクトリをリストしないでください。 @samp{--directory} を指定していないと効果がありません。

@item  @samp{-u} 
@itemx  @samp{--unmerged} 
マージされていないファイルを出力に表示します(@samp{--stage} の機能を含む)

@item  @samp{-k} 
@itemx  @samp{--killed} 
checkout-indexを成功させるために、ファイル/ディレクトリの競合のために削除する必要があるファイルシステム上のファイルを表示します。

@item  @samp{-z} 
\ 0出力での行の終了であり、ファイルをクォートしません。 詳細については、以下の「OUTPUT」を参照してください。

@item  @samp{--deduplicate} 
ファイル名のみが表示されている場合は、マージ中に複数のステージがあること、または  @samp{--deleted} と @samp{--modified}
オプションを同時に指定することで発生する可能性のある重複を抑制します。 @samp{-t} または @samp{--unmerged} または @samp{--stage}
オプションのいずれかが使用されている場合、このオプションは効果がありません。

@item  @samp{-x <pattern>} 
@itemx  @samp{--exclude=<pattern>} 
パターンに一致する追跡されていないファイルをスキップします。パターンはシェルワイルドカードパターンであることに注意してください。
詳細については、以下の「EXCLUDE PATTERNS」を参照してください。

@item  @samp{-X <file>} 
@itemx  @samp{--exclude-from=<file>} 
<file> から除外パターンを読み取ります。1行に1つづつです。

@item  @samp{--exclude-per-directory=<file>} 
各ディレクトリとサブディレクトリにのみ適用される、追加の除外パターンを、そのディレクトリの <file> から読み取ります。(通常は
@samp{.gitignore} )

@item  @samp{--exclude-standard} 
標準のGit除外を追加します:  .git/info/exclude と 各ディレクトリの .gitignore と ユーザーのグローバル除外ファイル。

@item  @samp{--error-unmatch} 
<file> がインデックスに現れない場合は、これをエラーとして扱います(1を返します)。

@item  @samp{--with-tree=<tree-ish>} 
@samp{--error-unmatch} を使用して、ユーザーが指定した <file>（つまり、パスパターン）引数をパスに展開する場合、名前付きの
<tree-ish> がまだ存在するためにインデックスから削除されたパスを装います。 このオプションを @samp{-s} または @samp{-u}
オプションと一緒に使用しても意味がありません。

@item  @samp{-t} 
この機能は準非推奨です。スクリプト化の目的では、 git-status(1) @samp{--porcelain} と
git-diff-files(1) @samp{--name-status}
がほとんどの場合優れた代替手段であり、さらにユーザーフレンドリーな代替手段については、 git-status(1) @samp{--short}
または git-diff(1) @samp{--name-status} をご覧下さい。

このオプションは、各行の先頭にある以下のタグ(スペースが続く)でファイルのステータスを識別します:

@table @asis

@item  H 
cached

@item  S 
skip-worktree

@item  M 
unmerged

@item  R 
removed/deleted

@item  C 
modified/changed

@item  K 
to be killed

@item  ? 
other
@end table

@item  @samp{-v} 
@samp{-t}
に似ていますが、「変更されていないと仮定する」とマークされたファイルには小文字を使用します(git-update-index(1)
を参照)。

@item  @samp{-f} 
@samp{-t} に似ていますが、「fsmonitor
valid」とマークされているファイルには小文字を使用します(git-update-index(1) を参照)。

@item  @samp{--full-name} 
サブディレクトリから実行する場合、コマンドは通常、現在のディレクトリからの相対パスを出力します。
このオプションは、プロジェクトの最上位ディレクトリを基準にしたパスを強制的に出力します。

@item  @samp{--recurse-submodules} 
リポジトリ内のアクティブなサブモジュールごとに ls-files を再帰的に呼び出します。 現在、 @samp{--cached}
モードのみがサポートされています。

@item  @samp{--abbrev[=<n>]} 
40バイトの16進数のオブジェクト行全体を表示する代わりに、オブジェクトを一意に参照する、少なくとも <n>
の長さ16進数の長さの最短のプレフィックスを表示します。デフォルト以外の桁数は、 @samp{--abbrev=<n>} で指定できます。

@item  @samp{--debug} 
ファイルを説明する各行の後に、そのキャッシュエントリに関するデータを追加します。これは、手動検査のために可能な限り多くの情報を表示することを目的としています。正確な形式は予告なく変更される可能性があります。

@item  @samp{--eol} 
ファイルの <eolinfo> と <eolattr> を表示します。 <eolinfo>
は、「text」属性が「auto」の場合(または設定されておらず、 core.autocrlf が false
でない場合)にGitが使用するファイルコンテンツIDです。 <eolinfo>
は、「-text」、「none」、「lf」、「crlf」、「mixed」、「」のいずれかです。

「」は、ファイルが通常のファイルではない、インデックスにない、または作業ツリーでアクセスできないことを意味します。

<eolattr> は、チェックアウトまたはコミット時に使用される属性であり、「」・「-text」・「text」・「text=auto」・「text
eol=lf」・「text eol=crlf」 のいずれかです。 Git 2.10以降では「text=auto eol=lf」と「text=auto
eol=crlf」がサポートされています。

通常のファイルの場合、インデックス("i/<eolinfo>")と作業ツリー("w/<eolinfo>")の両方の<eolinfo>が表示され、そのうしろに
"attr/<eolattr>" が続きます。

@item  @samp{--} 
これ以降の引数をオプションとして解釈しないでください。

@item  <file> 
表示するファイル。ファイルが指定されていない場合、他の指定された基準に一致するすべてのファイルが表示されます。
@end table

@noindent

@chapheading OUTPUT

@emph{git ls-files} は、 @samp{--stage}
が指定されていない限り、ファイル名を出力するだけです。指定されている場合は、以下のように出力されます:

@example
[<tag> ]<mode> <object> <stage> <file>
@end example

@emph{git ls-files --eol} の場合:
i/<eolinfo><SPACES>w/<eolinfo><SPACES>attr/<eolattr><SPACE*><TAB><file>

@samp{git ls-files --unmerged} と @samp{git ls-files --stage}
を使用して、マージされていないパスの詳細情報を調べることができます。

マージされていないパスの場合、単一の モード/SHA-1 ペアを記録する代わりに、インデックスは最大3つのそのようなペアを記録します。
ステージ1のツリーOから一つと、ステージ2のAから一つと、ステージ3のBからの一つです。この情報は、ユーザー(または磁器コマンド)がパスに最終的に記録する内容を確認するために使用できます。(状態の詳細については、
git-read-tree(1) を参照してください)

@samp{-z} オプションを指定しない場合、構成変数 @samp{core.quotePath}
で説明されているように、「異常な」文字を含むパス名がクォートされます(git-config(1) を参照)。 @samp{-z}
を使用すると、ファイル名がそのまま出力され、行はNULバイトで終了します。

@noindent

@chapheading EXCLUDE PATTERNS

@emph{git ls-files} は、ディレクトリツリーをトラバースし、フラグ @samp{--others} または @samp{--ignored}
が指定されている場合に表示するファイルを検索するときに、「除外パターン」(exclude patterns)のリストを使用できます。
gitignore(5) は、除外パターンの形式を指定します。

これらの除外パターンは、以下の順序で取得されます:

@enumerate 

@item
コマンドラインフラグ @samp{--exclude=<pattern>} は、単一のパターンを指定します。
パターンは、コマンドラインに現れるのと同じ順序で並べられます。

@item
コマンドラインフラグ @samp{--exclude-from=<file>} は、パターンのリストを含むファイルを指定します。
パターンは、ファイルに現れるのと同じ順序で並べられます。

@item
コマンドラインフラグ @samp{--exclude-per-directory=<name> ` は、 'git ls-files'
が調べる各ディレクトリ内のファイルの名前(通常は `.gitignore} )を指定します。
より深いディレクトリ内のファイルが優先されます。パターンは、ファイルに現れるのと同じ順序で並べられます。
@end enumerate

コマンドラインで @samp{--exclude} で指定されたパターン、または @samp{--exclude-from}
で指定されたファイルから読み取られたパターンは、ディレクトリツリーの最上位を基準にしています。 @samp{--exclude-per-directory}
で指定されたファイルから読み取られたパターンは、パターンファイルが置かれているディレクトリを基準にしています。

@noindent

@chapheading SEE ALSO

git-read-tree(1), gitignore(5)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-ls-remote,,,Top
@chapheading Name

git-ls-remote — リモートリポジトリの参照を一覧表示する

@noindent

@chapheading Synopsis

@display
git ls-remote [--heads] [--tags] [--refs] [--upload-pack=<exec>]
              [-q | --quiet] [--exit-code] [--get-url] [--sort=<key>]
              [--symref] [<repository> [<refs>…]]
@end display


@noindent

@chapheading DESCRIPTION

リモートリポジトリで有効な参照を、関連するコミットIDとともに表示します。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-h} 
@itemx  @samp{--heads} 
@itemx  @samp{-t} 
@itemx  @samp{--tags} 
それぞれ、refs/heads と refs/tags のみに制限します。これらのオプションは相互に排他的ではありません。両方を指定すると、
refs/heads と refs/tags に保存されている参照が表示されます。コマンドラインで他に何も指定せずに使用された @samp{git
ls-remote -h} は、他のgitサブコマンドと同じようにヘルプを提供することに注意してください。

@item  @samp{--refs} 
ピーリングされたタグ(peeled tag)や @samp{HEAD} のような疑似参照(pseudoref)を出力に表示しないでください。

@item  @samp{-q} 
@itemx  @samp{--quiet} 
stderrにリモートURLを出力しないでください。

@item  @samp{--upload-pack=<exec>} 
リモートホストの「git-upload-pack」のフルパスを指定します。これにより、SSH経由でアクセスされ、SSHデーモンがユーザーによって構成されたPATHを使用しないリポジトリからの参照を一覧表示できます。

@item  @samp{--exit-code} 
リモートリポジトリに一致する参照が見つからない場合は、ステータス「2」で終了します。通常、コマンドはステータス「0」で終了し、一致する参照が見つかったかどうかに関係なく、リモートリポジトリと正常に通信したことを示します。

@item  @samp{--get-url} 
@samp{url.<base>.insteadOf}
構成設定(git-config(1)を参照)を考慮して、指定されたリモートリポジトリのURLを展開し、リモートと通信せずに終了します。

@item  @samp{--symref} 
それが指すオブジェクトに加えて、シンボリックrefを表示するときに、それが指す基になるrefを表示します。 現在、upload-packはsymref
HEADのみを表示するため、ls-remoteによって表示されるのはこれだけです。

@item  @samp{--sort=<key>} 
指定されたキーに基づいて並べ替えます。接頭辞 @samp{-} を使用して、値の降順で並べ替えます。 @samp{version:refname} または
@samp{v:refname} をサポートします(タグ名はバージョンとして扱われます)。 @samp{version:refname} のソート順は、
@samp{versionsort.suffix} 構成変数の影響も受ける可能性があります。 その他の並べ替えオプションについては
git-for-each-ref(1) を参照してください。ただし、オブジェクト自体へのアクセスを必要とする
@samp{committerdate} のようなキーは、オブジェクトがまだリモートからフェッチされていないrefに対しては機能せず、 @samp{missing
object} エラーが発生することに注意してください。

@item  @samp{-o <option>} 
@itemx  @samp{--server-option=<option>} 
プロトコルバージョン2を使用して通信する場合は、指定された文字列をサーバーに送信します。指定された文字列には、NULまたはLF文字を含めることはできません。
複数の @samp{--server-option=<option>} が指定されている場合、それらはコマンドラインにリストされている順序で送信されます。

@item  <repository> 
クエリする「リモート」リポジトリ。 このパラメーターは、URLまたはリモートの名前のいずれかです(git-fetch(1) の「GIT
URLS」と「REMOTES」セクションを参照してください)。

@item  <refs>… 
指定しない場合、 @samp{--heads} と @samp{--tags} でフィルタリングを行った後のすべての参照が表示されます。 <refs>…
を指定すると、指定したパターンに一致する参照のみが表示されます。
@end table

@noindent

@chapheading EXAMPLES

@example
$ git ls-remote --tags ./.
d6602ec5194c87b0fc87103ca4d67251c76f233a        refs/tags/v0.99
f25a265a342aed6041ab0cc484224d9ca54b6f41        refs/tags/v0.99.1
7ceca275d047c90c0c7d5afb13ab97efdf51bd6e        refs/tags/v0.99.3
c5db5456ae3b0873fc659c19fafdde22313cc441        refs/tags/v0.99.2
0918385dbd9656cab0d1d81ba7453d49bbc16250        refs/tags/junio-gpg-pub
$ git ls-remote http://www.kernel.org/pub/scm/git/git.git master seen rc
5fe978a5381f1fbad26a80e682ddd2a401966740        refs/heads/master
c781a84b5204fb294c9ccc79f8b3baceeb32c061        refs/heads/seen
$ git remote add korg http://www.kernel.org/pub/scm/git/git.git
$ git ls-remote --tags korg v\*
d6602ec5194c87b0fc87103ca4d67251c76f233a        refs/tags/v0.99
f25a265a342aed6041ab0cc484224d9ca54b6f41        refs/tags/v0.99.1
c5db5456ae3b0873fc659c19fafdde22313cc441        refs/tags/v0.99.2
7ceca275d047c90c0c7d5afb13ab97efdf51bd6e        refs/tags/v0.99.3
@end example


@noindent

@chapheading SEE ALSO

git-check-ref-format(1).

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-ls-tree,,,Top
@chapheading Name

git-ls-tree — ツリーオブジェクトの内容を一覧表示します

@noindent

@chapheading Synopsis

@display
git ls-tree [-d] [-r] [-t] [-l] [-z]
            [--name-only] [--name-status] [--full-name] [--full-tree] [--abbrev[=<n>]]
            <tree-ish> [<path>…]
@end display


@noindent

@chapheading DESCRIPTION

「/bin/ls -a」が現在の作業ディレクトリで行うことのように、特定のツリーオブジェクトの内容を一覧表示します。 ただし以下の点に注意してください:

@itemize 

@item
動作は「/bin/ls」の動作とは少し異なり、「<path>」は一致するパターンのリストのみを示します。 したがって、( @samp{-r}
なしで)ディレクトリ名を指定すると動作が異なり、引数の順序は重要ではありません。

@item
@emph{<path>}
が現在の作業ディレクトリを基準にして取得されるという点で、動作は「/bin/ls」の動作と似ています。例えば、あなたの現在の作業ディレクトリが「sub」で、その下にサブディレクトリ「dir」がある場合は、「git
ls-tree -r HEAD dir」を実行すると、「dir」ツリーの内容を一覧表示できます(つまり、「HEAD」の「sub/dir」)
。あなたが、ルートレベル以外のツリーを直接指定したいとします(たとえば @samp{git ls-tree -r HEAD:sub dir}
と指定します)。しかし、この場合は結果として @samp{HEAD} コミットで @samp{sub/sub/dir}
を要求したことになります(そしてそんなディレクトリはないので何も表示されない)。ただし、 @samp{--full-tree}
プションを渡すと、現在の作業ディレクトリを無視できます(つまり、 @samp{git ls-tree --fulltree -r HEAD:sub dir}
とすれば意図したとおりに動く)
@end itemize

@noindent

@chapheading OPTIONS

@table @asis

@item  <tree-ish> 
ツリーっぽい何か(tree-ish)のID

@item  @samp{-d} 
名前付きツリーエントリ自体のみを表示し、その子供たちは表示しません。

@item  @samp{-r} 
サブツリーに再帰的に入っていきます

@item  @samp{-t} 
サブツリーに再帰的入っていく場合でも、ツリーエントリを表示します。 @samp{-r} が渡されなかった場合は効果がありません。 @samp{-d} は @samp{-t}
の意味を含んでいます。

@item  @samp{-l} 
@itemx  @samp{--long} 
ブロブ(ファイル)エントリのオブジェクトサイズを表示します。

@item  @samp{-z} 
@samp{\0} (NULバイト)出力での行終了であり、ファイル名をクォートしません。 詳細については、以下の OUTPUT FORMAT を参照してください。

@item  @samp{--name-only} 
@itemx  @samp{--name-status} 
(「long」出力ではなく)ファイル名のみを1行に1つずつリストします。

@item  @samp{--abbrev[=<n>]} 
40バイトの16進オブジェクト行全体を表示する代わりに、オブジェクトを一意に参照できる、少なくとも @emph{<n>}
以上の長さの最短のプレフィックスを表示します。デフォルト以外の桁数は @samp{--abbrev=<n>}
で指定できます。(訳注:手元ではデフォルトは10桁で表示された。 @samp{--abbrev=1} とすると5桁(一部6桁)表示となった)

@item  @samp{--full-name} 
現在の作業ディレクトリに関連するパス名を表示する代わりに、フルパス名を表示します。

@item  @samp{--full-tree} 
現在の作業ディレクトリを無視して、ルートレベルを起点として一覧表示します。 @samp{--full-name} の意味を含んでいます。

@item  [<path>…] 
パスが指定されたら、それらを表示します(これは実際には生のパス名ではなく、一致するパターンのリストであることに注意してください)。
それ以外の場合は、ツリーのルートレベルを唯一のパス引数として暗黙的に使用します。
@end table

@noindent

@chapheading Output Format

@example
<mode> SP <type> SP <object> TAB <file>
@end example

この出力形式は、「git update-index」の「--index-info—stdin」が期待するものと互換性があります。

@samp{-l} オプションを使用すると、形式が以下のように変わります

@example
<mode> SP <type> SP <object> SP <object size> TAB <file>
@end example

<object>
で識別されるオブジェクトサイズはバイト単位で指定され、最小幅7文字で右寄せされます。オブジェクトサイズは、ブロブ(ファイル)エントリに対してのみ指定されます。他のエントリの場合、サイズの代わりに
@samp{-} 文字が使用されます。

@samp{-z} オプションを指定しない場合、構成変数 @samp{core.quotePath}
で説明されているように、「異常な」文字を含むパス名が引用符で囲まれます(git-config(1) を参照)。 @samp{-z}
を使用すると、ファイル名がそのまま出力され、行はNULバイトで終了します。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-mailinfo,,,Top
@chapheading Name

git-mailinfo — 単一の電子メールメッセージからパッチと作成者を抽出します

@noindent

@chapheading Synopsis

@display
git mailinfo [-k|-b] [-u | --encoding=<encoding> | -n]
               [--[no-]scissors] [--quoted-cr=<action>]
               <msg> <patch>
@end display


@noindent

@chapheading DESCRIPTION

標準入力から単一の電子メールメッセージを読み取り、コミットログメッセージを <msg> ファイルに書き込み、パッチを <patch>
ファイルに書き込みます。作者名と電子メールアドレスと電子メールの件名は、コミットを作成する @samp{git am}
で使用するために標準出力に書き出されます。通常、このコマンドをユーザーが直接使用する必要はありません。代わりに git-am(1)
を参照してください。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-k} 
通常、プログラムは、 @samp{Subject:}
ヘッダー行から電子メール特有の断片文字列を取り除き、コミットログメッセージのタイトル行を取り出します。このオプションは、この変更をある程度防ぎ、
@samp{git format-patch -k} 出力を読み返すために使用する場合に最も役立つようにします。

具体的には、以下のものがなくなるまでは削除を行います:

@itemize 

@item
先頭と末尾の空白(whitespace)を削除。

@item
先頭の @samp{Re:} や @samp{re:} や @samp{:} を削除。

@item
先頭のブラケットで囲まれた文字列( @samp{[} 〜 @samp{]} 、
通常は @samp{[PATCH]} ) 。
@end itemize

最後に、空白類(whitespace)は単一のASCIIスペース文字(\x20)に正規化されます。

@item  @samp{-b} 
@samp{-k} が有効でない場合、 先頭のブラケット @samp{[} と @samp{]}
のペアで囲まれたすべての文字列が削除されます。このオプションは、括弧で囲まれた文字列に @samp{PATCH}
という単語が含まれているペアのみに削除を制限します。

@item  @samp{-u} 
コミットログメッセージ、作者名、作者の電子メールアドレスは電子メールから取得され、MIME転送エンコーディングを最小限にデコードした後、それらを変換することにより、
@samp{i18n.commitEncoding} (デフォルトはUTF-8)
で指定された文字セットに再コーディングされます。これは以前はオプションでしたが、現在はデフォルトです。

注意: このフラグがあっても、パッチは常に文字セット変換なしでそのまま使用されることに注意してください。

@item  @samp{--encoding=<encoding>} 
@samp{-u} に似ています。 ただし、再コーディング時には、 @samp{i18n.commitEncoding}
で指定された文字セットまたはUTF-8の代わりに、ここで指定した文字セットが使用されます。

@item  @samp{-n} 
メタデータのすべての文字セットの再コーディングを無効にします。

@item  @samp{-m} 
@itemx  @samp{--message-id} 
コミットメッセージの最後にあるMessage-IDヘッダーをコピーします。これは、コミットをメーリングリストのディスカッションに関連付けるのに役立ちます。

@item  @samp{--scissors} 
本文で切り取り線(例えば @samp{-- >8 --} )の前にあるすべてを取り除きます。
この線は、はさみ(scissors)とミシン目マークを表しており、その行でメッセージをカットするように読者に要求するために使用されます。パッチの前のメッセージの本文にその行が表示されている場合、このオプションを使用すると、その行の前のすべて(切り取り線の行自体を含む)が無視されます(訳注:
@samp{>8} や @samp{8<} は「ハサミ」を示す絵文字)。

これは、返信するメッセージに関するコメントと提案を含むディスカッションスレッドでメッセージを開始し、パッチの送信でメッセージを終了し、ディスカッションと提案されたコミットログメッセージの開始を切り取り線で区切る場合に役立ちます。

これは、構成オプション mailinfo.scissors を使用してデフォルトで有効にできます。

@item  @samp{--no-scissors} 
切り取り線を無視します。 mailinfo.scissors 設定を上書きするのに便利です。

@item  @samp{--quoted-cr=<action>} 
base64またはquoted-printableエンコーディングで送信された電子メールメッセージを処理し、デコードされた行が単純なLFではなくCRLFで終了する場合の操作(action)を指定。

有効な操作(action)は:

@itemize 

@item
@samp{nowarn}: そのようなCRLFが見つかった場合、Gitは何もしません。

@item
@samp{warn}: そのようなCRLFが見つかった場合、
Gitはメッセージごとに警告を発行します。

@item
@samp{strip}: GitはそれらのCRLFをLFに変換します。
@end itemize

デフォルトの操作(action)は、構成オプション @samp{mailinfo.quotedCR}
で設定できます。そのような構成オプションが設定されていない場合、 @samp{warn} が使用されます。

@item  <msg> 
電子メールから抽出されたコミットログメッセージ。通常、電子メールの件名から抽出したタイトル行は除きます。

@item  <patch> 
電子メールから抽出されたパッチ。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-mailsplit,,,Top
@chapheading Name

git-mailsplit — 簡易 UNIX mbox 分割プログラム

@noindent

@chapheading Synopsis

@display
git mailsplit [-b] [-f<nn>] [-d<prec>] [--keep-cr] [--mboxrd]
                -o<directory> [--] [(<mbox>|<Maildir>)…]
@end display


@noindent

@chapheading DESCRIPTION

mboxファイルまたはMaildirを指定のディレクトリ内でファイルのリストに分割し("0001" "0002"
..)、そこからさらに処理できるようにします。

@quotation

@strong{Important}

Maildirの分割は、ファイル名が正しい順序でパッチを出力するためにソートされていることに依存しています。
@end quotation

@noindent

@chapheading OPTIONS

@table @asis

@item  <mbox> 
分割するmboxファイル。指定しない場合、mboxは標準入力から読み取られます。

@item  <Maildir> 
分割するMaildirのルート。このディレクトリには、cur と tmp とnew サブディレクトリが含まれている必要があります。

@item  @samp{-o<directory>} 
個々のメッセージを配置するディレクトリ。

@item  @samp{-b} 
ファイルがFrom行で始まらない場合は、エラーにするのではなく、単一のメールメッセージであると想定してください。

@item  @samp{-d<prec>} 
先行ゼロを含むデフォルトの4桁の代わりに、生成するファイル名に異なる桁数を指定できます。

@item  @samp{-f<nn>} 
出力ファイル名の最初の <nn> 番号までをスキップします。たとえば、 -f3 が指定されている場合は、番号を0004から始めます。

@item  @samp{--keep-cr} 
@samp{\r\n} で終わる行から @samp{\r} を削除しないでください。

@item  @samp{--mboxrd} 
入力は「mboxrd」形式であり、 "^>+From " 行のエスケープは逆になります。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-maintenance,,,Top
@chapheading Name

git-maintenance — Run tasks to optimize Git repository data

@noindent

@chapheading Synopsis

@display
git maintenance run [<options>]
@end display


@noindent

@chapheading DESCRIPTION

Run tasks to optimize Git repository data, speeding up other Git commands
and reducing storage requirements for the repository.

Git commands that add repository data, such as @samp{git add} or @samp{git fetch}, are
optimized for a responsive user experience. These commands do not take time
to optimize the Git data, since such optimizations scale with the full size
of the repository while these user commands each perform a relatively small
action.

The @samp{git maintenance} command provides flexibility for how to optimize the
Git repository.

@noindent

@chapheading SUBCOMMANDS

@table @asis

@item  register 
Initialize Git config values so any scheduled maintenance will start running
on this repository. This adds the repository to the @samp{maintenance.repo}
config variable in the current user’s global config and enables some
recommended configuration values for @samp{maintenance.<task>.schedule}. The
tasks that are enabled are safe for running in the background without
disrupting foreground processes.

The @samp{register} subcommand will also set the @samp{maintenance.strategy} config
value to @samp{incremental}, if this value is not previously set. The
@samp{incremental} strategy uses the following schedule for each maintenance
task:

@itemize 

@item
@samp{gc}: disabled.

@item
@samp{commit-graph}: hourly.

@item
@samp{prefetch}: hourly.

@item
@samp{loose-objects}: daily.

@item
@samp{incremental-repack}: daily.
@end itemize

@samp{git maintenance register} will also disable foreground maintenance by
setting @samp{maintenance.auto = false} in the current repository. This config
setting will remain after a @samp{git maintenance unregister} command.

@item  run 
Run one or more maintenance tasks. If one or more @samp{--task} options are
specified, then those tasks are run in that order. Otherwise, the tasks are
determined by which @samp{maintenance.<task>.enabled} config options are true. By
default, only @samp{maintenance.gc.enabled} is true.

@item  start 
Start running maintenance on the current repository. This performs the same
config updates as the @samp{register} subcommand, then updates the background
scheduler to run @samp{git maintenance run --scheduled} on an hourly basis.

@item  stop 
Halt the background maintenance schedule. The current repository is not
removed from the list of maintained repositories, in case the background
maintenance is restarted later.

@item  unregister 
Remove the current repository from background maintenance. This only removes
the repository from the configured list. It does not stop the background
maintenance processes from running.
@end table

@noindent

@chapheading TASKS

@table @asis

@item  commit-graph 
The @samp{commit-graph} job updates the @samp{commit-graph} files incrementally, then
verifies that the written data is correct. The incremental write is safe to
run alongside concurrent Git processes since it will not expire @samp{.graph}
files that were in the previous @samp{commit-graph-chain} file. They will be
deleted by a later run based on the expiration delay.

@item  prefetch 
The @samp{prefetch} task updates the object directory with the latest objects
from all registered remotes. For each remote, a @samp{git fetch} command is
run. The configured refspec is modified to place all requested refs within
@samp{refs/prefetch/}. Also, tags are not updated.

This is done to avoid disrupting the remote-tracking branches. The end users
expect these refs to stay unmoved unless they initiate a fetch.  With
prefetch task, however, the objects necessary to complete a later real fetch
would already be obtained, so the real fetch would go faster.  In the ideal
case, it will just become an update to a bunch of remote-tracking branches
without any object transfer.

@item  gc 
Clean up unnecessary files and optimize the local repository. "GC" stands
for "garbage collection," but this task performs many smaller tasks. This
task can be expensive for large repositories, as it repacks all Git objects
into a single pack-file. It can also be disruptive in some situations, as it
deletes stale data. See git-gc(1) for more details on garbage
collection in Git.

@item  loose-objects 
The @samp{loose-objects} job cleans up loose objects and places them into
pack-files. In order to prevent race conditions with concurrent Git
commands, it follows a two-step process. First, it deletes any loose objects
that already exist in a pack-file; concurrent Git processes will examine the
pack-file for the object data instead of the loose object. Second, it
creates a new pack-file (starting with "loose-")  containing a batch of
loose objects. The batch size is limited to 50 thousand objects to prevent
the job from taking too long on a repository with many loose objects. The
@samp{gc} task writes unreachable objects as loose objects to be cleaned up by a
later step only if they are not re-added to a pack-file; for this reason it
is not advisable to enable both the @samp{loose-objects} and @samp{gc} tasks at the
same time.

@item  incremental-repack 
The @samp{incremental-repack} job repacks the object directory using the
@samp{multi-pack-index} feature. In order to prevent race conditions with
concurrent Git commands, it follows a two-step process. First, it calls @samp{git
multi-pack-index expire} to delete pack-files unreferenced by the
@samp{multi-pack-index} file. Second, it calls @samp{git multi-pack-index repack} to
select several small pack-files and repack them into a bigger one, and then
update the @samp{multi-pack-index} entries that refer to the small pack-files to
refer to the new pack-file. This prepares those small pack-files for
deletion upon the next run of @samp{git multi-pack-index expire}.  The selection
of the small pack-files is such that the expected size of the big pack-file
is at least the batch size; see the @samp{--batch-size} option for the @samp{repack}
subcommand in git-multi-pack-index(1). The default batch-size is
zero, which is a special case that attempts to repack all pack-files into a
single pack-file.

@item  pack-refs 
The @samp{pack-refs} task collects the loose reference files and collects them
into a single file. This speeds up operations that need to iterate across
many references. See git-pack-refs(1) for more information.
@end table

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--auto} 
When combined with the @samp{run} subcommand, run maintenance tasks only if
certain thresholds are met. For example, the @samp{gc} task runs when the number
of loose objects exceeds the number stored in the @samp{gc.auto} config setting,
or when the number of pack-files exceeds the @samp{gc.autoPackLimit} config
setting. Not compatible with the @samp{--schedule} option.

@item  @samp{--schedule} 
When combined with the @samp{run} subcommand, run maintenance tasks only if
certain time conditions are met, as specified by the
@samp{maintenance.<task>.schedule} config value for each @samp{<task>}.  This config
value specifies a number of seconds since the last time that task ran,
according to the @samp{maintenance.<task>.lastRun} config value. The tasks that
are tested are those provided by the @samp{--task=<task>} option(s) or those with
@samp{maintenance.<task>.enabled} set to true.

@item  @samp{--quiet} 
Do not report progress or other information over @samp{stderr}.

@item  @samp{--task=<task>} 
If this option is specified one or more times, then only run the specified
tasks in the specified order. If no @samp{--task=<task>} arguments are specified,
then only the tasks with @samp{maintenance.<task>.enabled} configured as @samp{true}
are considered.  See the @emph{TASKS} section for the list of accepted @samp{<task>}
values.

@item  @samp{--scheduler=auto|crontab|systemd-timer|launchctl|schtasks} 
When combined with the @samp{start} subcommand, specify the scheduler for running
the hourly, daily and weekly executions of @samp{git maintenance run}.  Possible
values for @samp{<scheduler>} are @samp{auto}, @samp{crontab} (POSIX), @samp{systemd-timer}
(Linux), @samp{launchctl} (macOS), and @samp{schtasks} (Windows). When @samp{auto} is
specified, the appropriate platform-specific scheduler is used; on Linux,
@samp{systemd-timer} is used if available, otherwise @samp{crontab}. Default is
@samp{auto}.
@end table

@noindent

@chapheading TROUBLESHOOTING

The @samp{git maintenance} command is designed to simplify the repository
maintenance patterns while minimizing user wait time during Git commands.  A
variety of configuration options are available to allow customizing this
process. The default maintenance options focus on operations that complete
quickly, even on large repositories.

Users may find some cases where scheduled maintenance tasks do not run as
frequently as intended. Each @samp{git maintenance run} command takes a lock on
the repository’s object database, and this prevents other concurrent @samp{git
maintenance run} commands from running on the same repository. Without this
safeguard, competing processes could leave the repository in an
unpredictable state.

The background maintenance schedule runs @samp{git maintenance run} processes on
an hourly basis. Each run executes the "hourly" tasks. At midnight, that
process also executes the "daily" tasks. At midnight on the first day of the
week, that process also executes the "weekly" tasks. A single process
iterates over each registered repository, performing the scheduled tasks for
that frequency. Depending on the number of registered repositories and their
sizes, this process may take longer than an hour.  In this case, multiple
@samp{git maintenance run} commands may run on the same repository at the same
time, colliding on the object database lock. This results in one of the two
tasks not running.

If you find that some maintenance windows are taking longer than one hour to
complete, then consider reducing the complexity of your maintenance
tasks. For example, the @samp{gc} task is much slower than the
@samp{incremental-repack} task. However, this comes at a cost of a slightly
larger object database. Consider moving more expensive tasks to be run less
frequently.

Expert users may consider scheduling their own maintenance tasks using a
different schedule than is available through @samp{git maintenance start} and Git
configuration options. These users should be aware of the object database
lock and how concurrent @samp{git maintenance run} commands behave.  Further, the
@samp{git gc} command should not be combined with @samp{git maintenance run}
commands. @samp{git gc} modifies the object database but does not take the lock
in the same way as @samp{git maintenance run}. If possible, use @samp{git maintenance
run --task=gc} instead of @samp{git gc}.

The following sections describe the mechanisms put in place to run
background maintenance by @samp{git maintenance start} and how to customize them.

@noindent

@chapheading BACKGROUND MAINTENANCE ON POSIX SYSTEMS

The standard mechanism for scheduling background tasks on POSIX systems is
cron(8). This tool executes commands based on a given schedule. The current
list of user-scheduled tasks can be found by running @samp{crontab -l}.  The
schedule written by @samp{git maintenance start} is similar to this:

@example
# BEGIN GIT MAINTENANCE SCHEDULE
# The following schedule was created by Git
# Any edits made in this region might be
# replaced in the future by a Git command.

0 1-23 * * * "/<path>/git" --exec-path="/<path>" for-each-repo --config=maintenance.repo maintenance run --schedule=hourly
0 0 * * 1-6 "/<path>/git" --exec-path="/<path>" for-each-repo --config=maintenance.repo maintenance run --schedule=daily
0 0 * * 0 "/<path>/git" --exec-path="/<path>" for-each-repo --config=maintenance.repo maintenance run --schedule=weekly

# END GIT MAINTENANCE SCHEDULE
@end example


The comments are used as a region to mark the schedule as written by Git.
Any modifications within this region will be completely deleted by @samp{git
maintenance stop} or overwritten by @samp{git maintenance start}.

The @samp{crontab} entry specifies the full path of the @samp{git} executable to
ensure that the executed @samp{git} command is the same one with which @samp{git
maintenance start} was issued independent of @samp{PATH}. If the same user runs
@samp{git maintenance start} with multiple Git executables, then only the latest
executable is used.

These commands use @samp{git for-each-repo --config=maintenance.repo} to run @samp{git
maintenance run --schedule=<frequency>} on each repository listed in the
multi-valued @samp{maintenance.repo} config option. These are typically loaded
from the user-specific global config. The @samp{git maintenance} process then
determines which maintenance tasks are configured to run on each repository
with each @samp{<frequency>} using the @samp{maintenance.<task>.schedule} config
options. These values are loaded from the global or repository config
values.

If the config values are insufficient to achieve your desired background
maintenance schedule, then you can create your own schedule. If you run
@samp{crontab -e}, then an editor will load with your user-specific @samp{cron}
schedule. In that editor, you can add your own schedule lines. You could
start by adapting the default schedule listed earlier, or you could read the
crontab(5) documentation for advanced scheduling techniques. Please do use
the full path and @samp{--exec-path} techniques from the default schedule to
ensure you are executing the correct binaries in your schedule.

@noindent

@chapheading BACKGROUND MAINTENANCE ON LINUX SYSTEMD SYSTEMS

While Linux supports @samp{cron}, depending on the distribution, @samp{cron} may be an
optional package not necessarily installed. On modern Linux distributions,
systemd timers are superseding it.

If user systemd timers are available, they will be used as a replacement of
@samp{cron}.

In this case, @samp{git maintenance start} will create user systemd timer units
and start the timers. The current list of user-scheduled tasks can be found
by running @samp{systemctl --user list-timers}. The timers written by @samp{git
maintenance start} are similar to this:

@example
$ systemctl --user list-timers
NEXT                         LEFT          LAST                         PASSED     UNIT                         ACTIVATES
Thu 2021-04-29 19:00:00 CEST 42min left    Thu 2021-04-29 18:00:11 CEST 17min ago  git-maintenance@@hourly.timer git-maintenance@@hourly.service
Fri 2021-04-30 00:00:00 CEST 5h 42min left Thu 2021-04-29 00:00:11 CEST 18h ago    git-maintenance@@daily.timer  git-maintenance@@daily.service
Mon 2021-05-03 00:00:00 CEST 3 days left   Mon 2021-04-26 00:00:11 CEST 3 days ago git-maintenance@@weekly.timer git-maintenance@@weekly.service
@end example


One timer is registered for each @samp{--schedule=<frequency>} option.

The definition of the systemd units can be inspected in the following files:

@example
~/.config/systemd/user/git-maintenance@@.timer
~/.config/systemd/user/git-maintenance@@.service
~/.config/systemd/user/timers.target.wants/git-maintenance@@hourly.timer
~/.config/systemd/user/timers.target.wants/git-maintenance@@daily.timer
~/.config/systemd/user/timers.target.wants/git-maintenance@@weekly.timer
@end example


@samp{git maintenance start} will overwrite these files and start the timer again
with @samp{systemctl --user}, so any customization should be done by creating a
drop-in file, i.e. a @samp{.conf} suffixed file in the
@samp{~/.config/systemd/user/git-maintenance@@.service.d} directory.

@samp{git maintenance stop} will stop the user systemd timers and delete the
above mentioned files.

For more details, see @samp{systemd.timer(5)}.

@noindent

@chapheading BACKGROUND MAINTENANCE ON MACOS SYSTEMS

While macOS technically supports @samp{cron}, using @samp{crontab -e} requires
elevated privileges and the executed process does not have a full user
context. Without a full user context, Git and its credential helpers cannot
access stored credentials, so some maintenance tasks are not functional.

Instead, @samp{git maintenance start} interacts with the @samp{launchctl} tool, which
is the recommended way to schedule timed jobs in macOS. Scheduling
maintenance through @samp{git maintenance (start|stop)} requires some @samp{launchctl}
features available only in macOS 10.11 or later.

Your user-specific scheduled tasks are stored as XML-formatted @samp{.plist}
files in @samp{~/Library/LaunchAgents/}. You can see the currently-registered
tasks using the following command:

@example
$ ls ~/Library/LaunchAgents/org.git-scm.git*
org.git-scm.git.daily.plist
org.git-scm.git.hourly.plist
org.git-scm.git.weekly.plist
@end example


One task is registered for each @samp{--schedule=<frequency>} option. To inspect
how the XML format describes each schedule, open one of these @samp{.plist} files
in an editor and inspect the @samp{<array>} element following the
@samp{<key>StartCalendarInterval</key>} element.

@samp{git maintenance start} will overwrite these files and register the tasks
again with @samp{launchctl}, so any customizations should be done by creating
your own @samp{.plist} files with distinct names. Similarly, the @samp{git maintenance
stop} command will unregister the tasks with @samp{launchctl} and delete the
@samp{.plist} files.

To create more advanced customizations to your background tasks, see
launchctl.plist(5) for more information.

@noindent

@chapheading BACKGROUND MAINTENANCE ON WINDOWS SYSTEMS

Windows does not support @samp{cron} and instead has its own system for
scheduling background tasks. The @samp{git maintenance start} command uses the
@samp{schtasks} command to submit tasks to this system. You can inspect all
background tasks using the Task Scheduler application. The tasks added by
Git have names of the form @samp{Git Maintenance (<frequency>)}.  The Task
Scheduler GUI has ways to inspect these tasks, but you can also export the
tasks to XML files and view the details there.

Note that since Git is a console application, these background tasks create
a console window visible to the current user. This can be changed manually
by selecting the "Run whether user is logged in or not" option in Task
Scheduler. This change requires a password input, which is why @samp{git
maintenance start} does not select it by default.

If you want to customize the background tasks, please rename the tasks so
future calls to @samp{git maintenance (start|stop)} do not overwrite your custom
tasks.

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-merge-base,,,Top
@chapheading Name

git-merge-base — Find as good common ancestors as possible for a merge

@noindent

@chapheading Synopsis

@display
git merge-base [-a|--all] <commit> <commit>…
git merge-base [-a|--all] --octopus <commit>…
git merge-base --is-ancestor <commit> <commit>
git merge-base --independent <commit>…
git merge-base --fork-point <ref> [<commit>]
@end display


@noindent

@chapheading DESCRIPTION

@emph{git merge-base} finds best common ancestor(s) between two commits to use in
a three-way merge.  One common ancestor is @emph{better} than another common
ancestor if the latter is an ancestor of the former.  A common ancestor that
does not have any better common ancestor is a @emph{best common ancestor}, i.e. a
@emph{merge base}.  Note that there can be more than one merge base for a pair of
commits.

@noindent

@chapheading OPERATION MODES

As the most common special case, specifying only two commits on the command
line means computing the merge base between the given two commits.

More generally, among the two commits to compute the merge base from, one is
specified by the first commit argument on the command line; the other commit
is a (possibly hypothetical) commit that is a merge across all the remaining
commits on the command line.

As a consequence, the @emph{merge base} is not necessarily contained in each of
the commit arguments if more than two commits are specified. This is
different from git-show-branch(1) when used with the @samp{--merge-base}
option.

@table @asis

@item  @samp{--octopus} 
Compute the best common ancestors of all supplied commits, in preparation
for an n-way merge.  This mimics the behavior of @emph{git show-branch
--merge-base}.

@item  @samp{--independent} 
Instead of printing merge bases, print a minimal subset of the supplied
commits with the same ancestors.  In other words, among the commits given,
list those which cannot be reached from any other.  This mimics the behavior
of @emph{git show-branch --independent}.

@item  @samp{--is-ancestor} 
Check if the first <commit> is an ancestor of the second <commit>, and exit
with status 0 if true, or with status 1 if not.  Errors are signaled by a
non-zero status that is not 1.

@item  @samp{--fork-point} 
Find the point at which a branch (or any history that leads to <commit>)
forked from another branch (or any reference)  <ref>. This does not just
look for the common ancestor of the two commits, but also takes into account
the reflog of <ref> to see if the history leading to <commit> forked from an
earlier incarnation of the branch <ref> (see discussion on this mode below).
@end table

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-a} 
@itemx  @samp{--all} 
Output all merge bases for the commits, instead of just one.
@end table

@noindent

@chapheading DISCUSSION

Given two commits @emph{A} and @emph{B}, @samp{git merge-base A B} will output a commit
which is reachable from both @emph{A} and @emph{B} through the parent relationship.

For example, with this topology:

@example
         o---o---o---B
        /
---o---1---o---o---o---A
@end example

the merge base between @emph{A} and @emph{B} is @emph{1}.

Given three commits @emph{A}, @emph{B} and @emph{C}, @samp{git merge-base A B C} will compute
the merge base between @emph{A} and a hypothetical commit @emph{M}, which is a merge
between @emph{B} and @emph{C}.  For example, with this topology:

@example
       o---o---o---o---C
      /
     /   o---o---o---B
    /   /
---2---1---o---o---o---A
@end example

the result of @samp{git merge-base A B C} is @emph{1}.  This is because the equivalent
topology with a merge commit @emph{M} between @emph{B} and @emph{C} is:

@example
       o---o---o---o---o
      /                 \
     /   o---o---o---o---M
    /   /
---2---1---o---o---o---A
@end example

and the result of @samp{git merge-base A M} is @emph{1}.  Commit @emph{2} is also a common
ancestor between @emph{A} and @emph{M}, but @emph{1} is a better common ancestor, because
@emph{2} is an ancestor of @emph{1}.  Hence, @emph{2} is not a merge base.

The result of @samp{git merge-base --octopus A B C} is @emph{2}, because @emph{2} is the
best common ancestor of all commits.

When the history involves criss-cross merges, there can be more than one
@emph{best} common ancestor for two commits.  For example, with this topology:

@example
---1---o---A
    \ /
     X
    / \
---2---o---o---B
@end example

both @emph{1} and @emph{2} are merge-bases of A and B.  Neither one is better than the
other (both are @emph{best} merge bases).  When the @samp{--all} option is not given,
it is unspecified which best one is output.

A common idiom to check "fast-forward-ness" between two commits A and B is
(or at least used to be) to compute the merge base between A and B, and
check if it is the same as A, in which case, A is an ancestor of B.  You
will see this idiom used often in older scripts.

@example
A=$(git rev-parse --verify A)
if test "$A" = "$(git merge-base A B)"
then
        ... A is an ancestor of B ...
fi
@end example

In modern git, you can say this in a more direct way:

@example
if git merge-base --is-ancestor A B
then
        ... A is an ancestor of B ...
fi
@end example

instead.

@noindent

@chapheading Discussion on fork-point mode

After working on the @samp{topic} branch created with @samp{git switch -c topic
origin/master}, the history of remote-tracking branch @samp{origin/master} may
have been rewound and rebuilt, leading to a history of this shape:

@example
                 o---B2
                /
---o---o---B1--o---o---o---B (origin/master)
        \
         B0
          \
           D0---D1---D (topic)
@end example

where @samp{origin/master} used to point at commits B0, B1, B2 and now it points
at B, and your @samp{topic} branch was started on top of it back when
@samp{origin/master} was at B0, and you built three commits, D0, D1, and D, on
top of it.  Imagine that you now want to rebase the work you did on the
topic on top of the updated origin/master.

In such a case, @samp{git merge-base origin/master topic} would return the parent
of B0 in the above picture, but B0^..D is @strong{not} the range of commits you
would want to replay on top of B (it includes B0, which is not what you
wrote; it is a commit the other side discarded when it moved its tip from B0
to B1).

@samp{git merge-base --fork-point origin/master topic} is designed to help in
such a case.  It takes not only B but also B0, B1, and B2 (i.e. old tips of
the remote-tracking branches your repository’s reflog knows about) into
account to see on which commit your topic branch was built and finds B0,
allowing you to replay only the commits on your topic, excluding the commits
the other side later discarded.

Hence

@example
$ fork_point=$(git merge-base --fork-point origin/master topic)
@end example

will find B0, and

@example
$ git rebase --onto origin/master $fork_point topic
@end example

will replay D0, D1 and D on top of B to create a new history of this shape:

@example
                 o---B2
                /
---o---o---B1--o---o---o---B (origin/master)
        \                   \
         B0                  D0'--D1'--D' (topic - updated)
          \
           D0---D1---D (topic - old)
@end example

A caveat is that older reflog entries in your repository may be expired by
@samp{git gc}.  If B0 no longer appears in the reflog of the remote-tracking
branch @samp{origin/master}, the @samp{--fork-point} mode obviously cannot find it and
fails, avoiding to give a random and useless result (such as the parent of
B0, like the same command without the @samp{--fork-point} option gives).

Also, the remote-tracking branch you use the @samp{--fork-point} mode with must
be the one your topic forked from its tip.  If you forked from an older
commit than the tip, this mode would not find the fork point (imagine in the
above sample history B0 did not exist, origin/master started at B1, moved to
B2 and then B, and you forked your topic at origin/master^ when
origin/master was B1; the shape of the history would be the same as above,
without B0, and the parent of B1 is what @samp{git merge-base origin/master
topic} correctly finds, but the @samp{--fork-point} mode will not, because it is
not one of the commits that used to be at the tip of origin/master).

@noindent

@chapheading See also

git-rev-list(1), git-show-branch(1), git-merge(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-merge-file,,,Top
@chapheading Name

git-merge-file — 3方向ファイルマージを実行する

@noindent

@chapheading Synopsis

@display
git merge-file [-L <current-name> [-L <base-name> [-L <other-name>]]]
        [--ours|--theirs|--union] [-p|--stdout] [-q|--quiet] [--marker-size=<n>]
        [--[no-]diff3] <current-file> <base-file> <other-file>
@end display


@noindent

@chapheading DESCRIPTION

@emph{git merge-file} は、 @samp{<base-file>} から @samp{<other-file>} へのすべての変更を
@samp{<current-file>} に組み込みます。結果は通常 @samp{<current-file>} に入ります。 @emph{git merge-file}
は、元のファイルへの個別の変更を組み合わせるのに役立ちます。 @samp{<base-file>} がオリジナルであり、 @samp{<current-file>} と
@samp{<other-file>} の両方が @samp{<base-file>} の変更であるとすると、 @emph{git merge-file} は両方の変更を結合します。

@samp{<current-file>} と @samp{<other-file>}
の両方の行の共通セグメントに変更がある場合、競合が発生します。競合が見つかった場合、「git merge-file」は通常、警告を出力し、
@samp{<<<<<<<} および @samp{>>>>>>>} マーカーを含む行で競合を囲みます。典型的な競合は以下のようになります:

@example
<<<<<<< A
lines in file A
=======
lines in file B
>>>>>>> B
@end example

競合がある場合、ユーザーは結果を編集して、選択肢の1つを削除する必要があります。 ただし @samp{--ours} または @samp{--theirs} または
@samp{--union} オプションが有効な場合、これらの競合は、 @samp{<current-file>} の行または @samp{<other-file>}
の行または両方からの行を優先して解決します。競合マーカーの長さは @samp{--marker-size} オプションで指定できます。

このプログラムの終了値は、エラーの場合は負数であり、それ以外の場合は競合した数です(競合たくさんの場合は127に切り捨てられます)。マージがクリーンだった場合、終了値は0です。

@emph{git merge-file} は、RCS用マージの最小限のクローンになるように設計されています。つまり git(1)
に必要なRCSのマージ機能をすべて実装します。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-L <label>} 
このオプションは最大3回指定でき、競合レポートで対応するファイル名の代わりに使用するラベルを指定します。 つまり @samp{git merge-file -L
x -L y -L z a b c} は、ファイルa、b、cからではなく、ファイルx、y、zから来たように見える出力を生成します。

@item  @samp{-p} 
@samp{<current-file>} を上書きする代わりに、結果を標準出力に送信します。

@item  @samp{-q} 
静かにします(quiet)。競合について警告しないでください。

@item  @samp{--diff3} 
「diff3」スタイルで競合を表示します。

@item  @samp{--ours} 
@itemx  @samp{--theirs} 
@itemx  @samp{--union} 
ファイルに競合を残す代わりに、競合部分の、our (または their または 両方)側に有利な競合解決します。
@end table

@noindent

@chapheading EXAMPLES

@table @asis

@item  @samp{git merge-file README.my README README.upstream} 
README以降のREADME.myとREADME.upstreamの変更を組み合わせて、それらをマージしようとし、結果をREADME.myに書き込みます。

@item  @samp{git merge-file -L a -L b -L c tmp/a123 tmp/b234 tmp/c345} 
tmp/a123 と tmp/c345 をベースの tmp/b234 とマージしますが、 @samp{tmp/a123} と @samp{tmp/c345}
の代わりにラベル @samp{a} と @samp{c} を使用します。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-merge-index,,,Top
@chapheading Name

git-merge-index — マージが必要なファイルのマージを実行します

@noindent

@chapheading Synopsis

@display
git merge-index [-o] [-q] <merge-program> (-a | [--] <file>*)
@end display


@noindent

@chapheading DESCRIPTION

これにより、インデックス内の <file>
が検索され、マージエントリがある場合は、それらのファイルのSHA-1ハッシュが引数1、2、3（ファイルがない場合は空の引数）として、および、引数4として
<file> が渡されます。引数1、2、3の3つのファイルのファイルモードは、引数5、6、7として渡されます。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--} 
これ以後の引数をオプションとして解釈しないでください。

@item  @samp{-a} 
インデックス内のマージが必要なすべてのファイルに対してマージを実行します。

@item  @samp{-o} 
最初に失敗したマージで停止するのではなく、すべてを一度に実行します。前のマージでエラーが返された場合でもマージを続行し、すべてのマージ後にエラーコードを返します。

@item  @samp{-q} 
マージプログラムの失敗について文句を言わないでください(マージプログラムの失敗は通常、マージ中の競合を示します)。
これは、カスタムメッセージを送信する可能性のある磁器コマンド用です。
@end table

@emph{git merge-index} が複数の <file> (または @samp{-a}
)で呼び出された場合、それらを順番に処理し、マージがゼロ以外の終了コードを返した場合にのみ停止します。

通常、これは、RCSパッケージの「マージ」コマンドのGitの模倣を呼び出すスクリプトで実行されます。

@emph{git merge-one-file} というサンプルスクリプトがディストリビューションに含まれています。

警告！警告！警告！
Gitの「オブジェクトのマージ順序」は、RCSの「マージ」プログラムのオブジェクトのマージ順序とは異なります。上記の順番では、オリジナルが最初です。しかし、3方向マージプログラム「マージ」の引数の順序は、オリジナルを中央に置きます。理由は聞かないで…

例:

@example
torvalds@@ppc970:~/merge-test> git merge-index cat MM
This is MM from the original tree.              # original
This is modified MM in the branch A.            # merge1
This is modified MM in the branch B.            # merge2
This is modified MM in the branch B.            # current contents
@end example


または

@example
torvalds@@ppc970:~/merge-test> git merge-index cat AA MM
cat: : No such file or directory
This is added AA in the branch A.
This is added AA in the branch B.
This is added AA in the branch B.
fatal: merge program failed
@end example


後者の例は、何かがエラーを返した後、「git
merge-index」がマージの試行を停止する方法を示しています(つまり、「cat」は元のファイルに存在しなかったため、AAファイルのエラーを返しました。
@emph{git merge-index} はMMをマージしようとさえしませんでした)。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-merge-one-file,,,Top
@chapheading Name

git-merge-one-file — git-merge-indexで使用する標準のヘルパープログラム

@noindent

@chapheading Synopsis

@display
git merge-one-file
@end display


@noindent

@chapheading DESCRIPTION

これは、 @emph{git merge-index} で行われた簡単なマージの後にマージを解決するために、 @emph{git read-tree -m}
で使用する標準のヘルパープログラムです。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-merge-tree,,,Top
@chapheading Name

git-merge-tree — インデックスに触れずに(without touching)3者間マージを表示する

@noindent

@chapheading Synopsis

@display
git merge-tree <base-tree> <branch1> <branch2>
@end display


@noindent

@chapheading DESCRIPTION

3つのツリーっぽいものを読み取り、些細なマージ結果と競合するステージを標準出力に出力します。 これは、3者間の @emph{git read-tree -m}
と似ていますが、結果をインデックスに格納する代わりに、コマンドはエントリを標準出力に出力します。

これは、インデックスの外部でマージ結果を計算し、結果をインデックスに戻すために、より高いレベルのスクリプトによって使用されることを意図しています。
このため、コマンドからの出力では、 <branch1> ツリーに一致するエントリが省略されます。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-merge,,,Top
@chapheading Name

git-merge — Join two or more development histories together

@noindent

@chapheading Synopsis

@display
git merge [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]
        [--no-verify] [-s <strategy>] [-X <strategy-option>] [-S[<keyid>]]
        [--[no-]allow-unrelated-histories]
        [--[no-]rerere-autoupdate] [-m <msg>] [-F <file>] [<commit>…]
git merge (--continue | --abort | --quit)
@end display


@noindent

@chapheading DESCRIPTION

Incorporates changes from the named commits (since the time their histories
diverged from the current branch) into the current branch.  This command is
used by @emph{git pull} to incorporate changes from another repository and can be
used by hand to merge changes from one branch into another.

Assume the following history exists and the current branch is "@samp{master}":

@example
          A---B---C topic
         /
    D---E---F---G master
@end example


Then "@samp{git merge topic}" will replay the changes made on the @samp{topic} branch
since it diverged from @samp{master} (i.e., @samp{E}) until its current commit (@samp{C})
on top of @samp{master}, and record the result in a new commit along with the
names of the two parent commits and a log message from the user describing
the changes.

@example
          A---B---C topic
         /         \
    D---E---F---G---H master
@end example


The second syntax ("@samp{git merge --abort}") can only be run after the merge
has resulted in conflicts. @emph{git merge --abort} will abort the merge process
and try to reconstruct the pre-merge state. However, if there were
uncommitted changes when the merge started (and especially if those changes
were further modified after the merge was started), @emph{git merge --abort} will
in some cases be unable to reconstruct the original (pre-merge)
changes. Therefore:

@strong{Warning}: Running @emph{git merge} with non-trivial uncommitted changes is
discouraged: while possible, it may leave you in a state that is hard to
back out of in the case of a conflict.

The third syntax ("@samp{git merge --continue}") can only be run after the merge
has resulted in conflicts.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--commit} 
@itemx  @samp{--no-commit} 
Perform the merge and commit the result. This option can be used to override
--no-commit.

With --no-commit perform the merge and stop just before creating a merge
commit, to give the user a chance to inspect and further tweak the merge
result before committing.

Note that fast-forward updates do not create a merge commit and therefore
there is no way to stop those merges with --no-commit.  Thus, if you want to
ensure your branch is not changed or updated by the merge command, use
--no-ff with --no-commit.

@item  @samp{--edit} 
@itemx  @samp{-e} 
@itemx  @samp{--no-edit} 
Invoke an editor before committing successful mechanical merge to further
edit the auto-generated merge message, so that the user can explain and
justify the merge. The @samp{--no-edit} option can be used to accept the
auto-generated message (this is generally discouraged).
The @samp{--edit} (or @samp{-e}) option is still useful if you are giving a draft
message with the @samp{-m} option from the command line and want to edit it in
the editor.

Older scripts may depend on the historical behaviour of not allowing the
user to edit the merge log message. They will see an editor opened when they
run @samp{git merge}. To make it easier to adjust such scripts to the updated
behaviour, the environment variable @samp{GIT_MERGE_AUTOEDIT} can be set to @samp{no}
at the beginning of them.

@item  @samp{--cleanup=<mode>} 
This option determines how the merge message will be cleaned up before
committing. See git-commit(1) for more details. In addition, if the
@emph{<mode>} is given a value of @samp{scissors}, scissors will be appended to
@samp{MERGE_MSG} before being passed on to the commit machinery in the case of a
merge conflict.

@item  @samp{--ff} 
@itemx  @samp{--no-ff} 
@itemx  @samp{--ff-only} 
Specifies how a merge is handled when the merged-in history is already a
descendant of the current history.  @samp{--ff} is the default unless merging an
annotated (and possibly signed) tag that is not stored in its natural place
in the @samp{refs/tags/} hierarchy, in which case @samp{--no-ff} is assumed.

With @samp{--ff}, when possible resolve the merge as a fast-forward (only update
the branch pointer to match the merged branch; do not create a merge
commit).  When not possible (when the merged-in history is not a descendant
of the current history), create a merge commit.

With @samp{--no-ff}, create a merge commit in all cases, even when the merge
could instead be resolved as a fast-forward.

With @samp{--ff-only}, resolve the merge as a fast-forward when possible.  When
not possible, refuse to merge and exit with a non-zero status.

@item  @samp{-S[<keyid>]} 
@itemx  @samp{--gpg-sign[=<keyid>]} 
@itemx  @samp{--no-gpg-sign} 
GPG-sign the resulting merge commit. The @samp{keyid} argument is optional and
defaults to the committer identity; if specified, it must be stuck to the
option without a space. @samp{--no-gpg-sign} is useful to countermand both
@samp{commit.gpgSign} configuration variable, and earlier @samp{--gpg-sign}.

@item  @samp{--log[=<n>]} 
@itemx  @samp{--no-log} 
In addition to branch names, populate the log message with one-line
descriptions from at most <n> actual commits that are being merged. See also
git-fmt-merge-msg(1).

With --no-log do not list one-line descriptions from the actual commits
being merged.

@item  @samp{--signoff} 
@itemx  @samp{--no-signoff} 
コミットログメッセージの最後に、コミッターによる「Signed-off-by」トレーラーを追加します。signoffの意味は、コミットしているプロジェクトによって異なります。たとえば、コミッターがプロジェクトのライセンスに基づいて作品を提出する権利を持っていることを証明したり、開発者の原産地証明書などの寄稿者の代表に同意したりする場合があります。(LinuxカーネルおよびGitプロジェクトで使用されるものについては、http：//developercertificate.orgを参照してください)。プロジェクトでsignoffがどのように使用されるかを理解するには、貢献しているプロジェクトのドキュメントまたはリーダーシップ(leadership)を参照してください。

@samp{--no-signoff} オプションを使用すると、コマンドラインで以前の @samp{--signoff} オプションを無効にすることができます。

@item  @samp{--stat} 
@itemx  @samp{-n} 
@itemx  @samp{--no-stat} 
Show a diffstat at the end of the merge. The diffstat is also controlled by
the configuration option merge.stat.

With -n or --no-stat do not show a diffstat at the end of the merge.

@item  @samp{--squash} 
@itemx  @samp{--no-squash} 
Produce the working tree and index state as if a real merge happened (except
for the merge information), but do not actually make a commit, move the
@samp{HEAD}, or record @samp{$GIT_DIR/MERGE_HEAD} (to cause the next @samp{git commit}
command to create a merge commit).  This allows you to create a single
commit on top of the current branch whose effect is the same as merging
another branch (or more in case of an octopus).

With --no-squash perform the merge and commit the result. This option can be
used to override --squash.

With --squash, --commit is not allowed, and will fail.

@item  @samp{--no-verify} 
This option bypasses the pre-merge and commit-msg hooks.  See also
githooks(5).

@item  @samp{-s <strategy>} 
@itemx  @samp{--strategy=<strategy>} 
Use the given merge strategy; can be supplied more than once to specify them
in the order they should be tried.  If there is no @samp{-s} option, a built-in
list of strategies is used instead (@samp{ort} when merging a single head,
@samp{octopus} otherwise).

@item  @samp{-X <option>} 
@itemx  @samp{--strategy-option=<option>} 
Pass merge strategy specific option through to the merge strategy.

@item  @samp{--verify-signatures} 
@itemx  @samp{--no-verify-signatures} 
Verify that the tip commit of the side branch being merged is signed with a
valid key, i.e. a key that has a valid uid: in the default trust model, this
means the signing key has been signed by a trusted key.  If the tip commit
of the side branch is not signed with a valid key, the merge is aborted.

@item  @samp{--summary} 
@itemx  @samp{--no-summary} 
Synonyms to --stat and --no-stat; these are deprecated and will be removed
in the future.

@item  @samp{-q} 
@itemx  @samp{--quiet} 
Operate quietly. Implies --no-progress.

@item  @samp{-v} 
@itemx  @samp{--verbose} 
Be verbose.

@item  @samp{--progress} 
@itemx  @samp{--no-progress} 
Turn progress on/off explicitly. If neither is specified, progress is shown
if standard error is connected to a terminal.  Note that not all merge
strategies may support progress reporting.

@item  @samp{--autostash} 
@itemx  @samp{--no-autostash} 
Automatically create a temporary stash entry before the operation begins,
record it in the special ref @samp{MERGE_AUTOSTASH} and apply it after the
operation ends.  This means that you can run the operation on a dirty
worktree.  However, use with care: the final stash application after a
successful merge might result in non-trivial conflicts.

@item  @samp{--allow-unrelated-histories} 
By default, @samp{git merge} command refuses to merge histories that do not share
a common ancestor.  This option can be used to override this safety when
merging histories of two projects that started their lives independently. As
that is a very rare occasion, no configuration variable to enable this by
default exists and will not be added.

@item  @samp{-m <msg>} 
Set the commit message to be used for the merge commit (in case one is
created).

If @samp{--log} is specified, a shortlog of the commits being merged will be
appended to the specified message.

The @emph{git fmt-merge-msg} command can be used to give a good default for
automated @emph{git merge} invocations. The automated message can include the
branch description.

@item  @samp{-F <file>} 
@itemx  @samp{--file=<file>} 
Read the commit message to be used for the merge commit (in case one is
created).

If @samp{--log} is specified, a shortlog of the commits being merged will be
appended to the specified message.

@item  @samp{--rerere-autoupdate} 
@itemx  @samp{--no-rerere-autoupdate} 
Allow the rerere mechanism to update the index with the result of
auto-conflict resolution if possible.

@item  @samp{--overwrite-ignore} 
@itemx  @samp{--no-overwrite-ignore} 
Silently overwrite ignored files from the merge result. This is the default
behavior. Use @samp{--no-overwrite-ignore} to abort.

@item  @samp{--abort} 
Abort the current conflict resolution process, and try to reconstruct the
pre-merge state. If an autostash entry is present, apply it to the worktree.

If there were uncommitted worktree changes present when the merge started,
@emph{git merge --abort} will in some cases be unable to reconstruct these
changes. It is therefore recommended to always commit or stash your changes
before running @emph{git merge}.

@emph{git merge --abort} is equivalent to @emph{git reset --merge} when @samp{MERGE_HEAD}
is present unless @samp{MERGE_AUTOSTASH} is also present in which case @emph{git merge
--abort} applies the stash entry to the worktree whereas @emph{git reset --merge}
will save the stashed changes in the stash list.

@item  @samp{--quit} 
Forget about the current merge in progress. Leave the index and the working
tree as-is. If @samp{MERGE_AUTOSTASH} is present, the stash entry will be saved
to the stash list.

@item  @samp{--continue} 
After a @emph{git merge} stops due to conflicts you can conclude the merge by
running @emph{git merge --continue} (see "HOW TO RESOLVE CONFLICTS" section
below).

@item  <commit>… 
Commits, usually other branch heads, to merge into our branch.  Specifying
more than one commit will create a merge with more than two parents
(affectionately called an Octopus merge).

If no commit is given from the command line, merge the remote-tracking
branches that the current branch is configured to use as its upstream.  See
also the configuration section of this manual page.

When @samp{FETCH_HEAD} (and no other commit) is specified, the branches recorded
in the @samp{.git/FETCH_HEAD} file by the previous invocation of @samp{git fetch} for
merging are merged to the current branch.
@end table

@noindent

@chapheading PRE-MERGE CHECKS

Before applying outside changes, you should get your own work in good shape
and committed locally, so it will not be clobbered if there are conflicts.
See also git-stash(1).  @emph{git pull} and @emph{git merge} will stop without
doing anything when local uncommitted changes overlap with files that @emph{git
pull}/@emph{git merge} may need to update.

To avoid recording unrelated changes in the merge commit, @emph{git pull} and
@emph{git merge} will also abort if there are any changes registered in the index
relative to the @samp{HEAD} commit.  (Special narrow exceptions to this rule may
exist depending on which merge strategy is in use, but generally, the index
must match HEAD.)

If all named commits are already ancestors of @samp{HEAD}, @emph{git merge} will exit
early with the message "Already up to date."

@noindent

@chapheading FAST-FORWARD MERGE

Often the current branch head is an ancestor of the named commit.  This is
the most common case especially when invoked from @emph{git pull}: you are
tracking an upstream repository, you have committed no local changes, and
now you want to update to a newer upstream revision.  In this case, a new
commit is not needed to store the combined history; instead, the @samp{HEAD}
(along with the index) is updated to point at the named commit, without
creating an extra merge commit.

This behavior can be suppressed with the @samp{--no-ff} option.

@noindent

@chapheading TRUE MERGE

Except in a fast-forward merge (see above), the branches to be merged must
be tied together by a merge commit that has both of them as its parents.

A merged version reconciling the changes from all branches to be merged is
committed, and your @samp{HEAD}, index, and working tree are updated to it.  It
is possible to have modifications in the working tree as long as they do not
overlap; the update will preserve them.

When it is not obvious how to reconcile the changes, the following happens:

@enumerate 

@item
The @samp{HEAD} pointer stays the same.

@item
The @samp{MERGE_HEAD} ref is set to point to the other branch head.

@item
Paths that merged cleanly are updated both in the index file and in your
working tree.

@item
For conflicting paths, the index file records up to three versions: stage 1
stores the version from the common ancestor, stage 2 from @samp{HEAD}, and stage
3 from @samp{MERGE_HEAD} (you can inspect the stages with @samp{git ls-files -u}).
The working tree files contain the result of the "merge" program; i.e. 3-way
merge results with familiar conflict markers @samp{<<<} @samp{===} @samp{>>>}.

@item
No other changes are made.  In particular, the local modifications you had
before you started merge will stay the same and the index entries for them
stay as they were, i.e. matching @samp{HEAD}.
@end enumerate

If you tried a merge which resulted in complex conflicts and want to start
over, you can recover with @samp{git merge --abort}.

@noindent

@chapheading MERGING TAG

When merging an annotated (and possibly signed) tag, Git always creates a
merge commit even if a fast-forward merge is possible, and the commit
message template is prepared with the tag message.  Additionally, if the tag
is signed, the signature check is reported as a comment in the message
template. See also git-tag(1).

When you want to just integrate with the work leading to the commit that
happens to be tagged, e.g. synchronizing with an upstream release point, you
may not want to make an unnecessary merge commit.

In such a case, you can "unwrap" the tag yourself before feeding it to @samp{git
merge}, or pass @samp{--ff-only} when you do not have any work on your own. e.g.

@example
git fetch origin
git merge v1.2.3^0
git merge --ff-only v1.2.3
@end example


@noindent

@chapheading HOW CONFLICTS ARE PRESENTED

During a merge, the working tree files are updated to reflect the result of
the merge.  Among the changes made to the common ancestor’s version,
non-overlapping ones (that is, you changed an area of the file while the
other side left that area intact, or vice versa) are incorporated in the
final result verbatim.  When both sides made changes to the same area,
however, Git cannot randomly pick one side over the other, and asks you to
resolve it by leaving what both sides did to that area.

By default, Git uses the same style as the one used by the "merge" program
from the RCS suite to present such a conflicted hunk, like this:

@example
Here are lines that are either unchanged from the common
ancestor, or cleanly resolved because only one side changed.
<<<<<<< yours:sample.txt
Conflict resolution is hard;
let's go shopping.
=======
Git makes conflict resolution easy.
>>>>>>> theirs:sample.txt
And here is another line that is cleanly resolved or unmodified.
@end example


The area where a pair of conflicting changes happened is marked with markers
@samp{<<<<<<<}, @samp{=======}, and @samp{>>>>>>>}.  The part before the @samp{=======} is
typically your side, and the part afterwards is typically their side.

The default format does not show what the original said in the conflicting
area.  You cannot tell how many lines are deleted and replaced with Barbie’s
remark on your side.  The only thing you can tell is that your side wants to
say it is hard and you’d prefer to go shopping, while the other side wants
to claim it is easy.

An alternative style can be used by setting the "merge.conflictStyle"
configuration variable to "diff3".  In "diff3" style, the above conflict may
look like this:

@example
Here are lines that are either unchanged from the common
ancestor, or cleanly resolved because only one side changed.
<<<<<<< yours:sample.txt
Conflict resolution is hard;
let's go shopping.
|||||||
Conflict resolution is hard.
=======
Git makes conflict resolution easy.
>>>>>>> theirs:sample.txt
And here is another line that is cleanly resolved or unmodified.
@end example


In addition to the @samp{<<<<<<<}, @samp{=======}, and @samp{>>>>>>>} markers, it uses
another @samp{|||||||} marker that is followed by the original text.  You can
tell that the original just stated a fact, and your side simply gave in to
that statement and gave up, while the other side tried to have a more
positive attitude.  You can sometimes come up with a better resolution by
viewing the original.

@noindent

@chapheading HOW TO RESOLVE CONFLICTS

After seeing a conflict, you can do two things:

@itemize 

@item
Decide not to merge.  The only clean-ups you need are to reset the index
file to the @samp{HEAD} commit to reverse 2. and to clean up working tree changes
made by 2. and 3.; @samp{git merge --abort} can be used for this.

@item
Resolve the conflicts.  Git will mark the conflicts in the working tree.
Edit the files into shape and @emph{git add} them to the index.  Use @emph{git commit}
or @emph{git merge --continue} to seal the deal. The latter command checks
whether there is a (interrupted) merge in progress before calling @emph{git
commit}.
@end itemize

You can work through the conflict with a number of tools:

@itemize 

@item
Use a mergetool.  @samp{git mergetool} to launch a graphical mergetool which will
work you through the merge.

@item
Look at the diffs.  @samp{git diff} will show a three-way diff, highlighting
changes from both the @samp{HEAD} and @samp{MERGE_HEAD} versions.

@item
Look at the diffs from each branch. @samp{git log --merge -p <path>} will show
diffs first for the @samp{HEAD} version and then the @samp{MERGE_HEAD} version.

@item
Look at the originals.  @samp{git show :1:filename} shows the common ancestor,
@samp{git show :2:filename} shows the @samp{HEAD} version, and @samp{git show :3:filename}
shows the @samp{MERGE_HEAD} version.
@end itemize

@noindent

@chapheading EXAMPLES

@itemize 

@item
Merge branches @samp{fixes} and @samp{enhancements} on top of the current branch,
making an octopus merge:

@example
$ git merge fixes enhancements
@end example


@item
Merge branch @samp{obsolete} into the current branch, using @samp{ours} merge
strategy:

@example
$ git merge -s ours obsolete
@end example


@item
Merge branch @samp{maint} into the current branch, but do not make a new commit
automatically:

@example
$ git merge --no-commit maint
@end example


This can be used when you want to include further changes to the merge, or
want to write your own merge commit message.

You should refrain from abusing this option to sneak substantial changes
into a merge commit.  Small fixups like bumping release/version name would
be acceptable.
@end itemize

@noindent

@chapheading MERGE STRATEGIES

The merge mechanism (@samp{git merge} and @samp{git pull} commands) allows the backend
@emph{merge strategies} to be chosen with @samp{-s} option.  Some strategies can also
take their own options, which can be passed by giving @samp{-X<option>} arguments
to @samp{git merge} and/or @samp{git pull}.

@table @asis

@item  ort 
This is the default merge strategy when pulling or merging one branch.  This
strategy can only resolve two heads using a 3-way merge algorithm.  When
there is more than one common ancestor that can be used for 3-way merge, it
creates a merged tree of the common ancestors and uses that as the reference
tree for the 3-way merge.  This has been reported to result in fewer merge
conflicts without causing mismerges by tests done on actual merge commits
taken from Linux 2.6 kernel development history.  Additionally this strategy
can detect and handle merges involving renames.  It does not make use of
detected copies.  The name for this algorithm is an acronym ("Ostensibly
Recursive’s Twin") and came from the fact that it was written as a
replacement for the previous default algorithm, @samp{recursive}.

The @emph{ort} strategy can take the following options:

@table @asis

@item  ours 
This option forces conflicting hunks to be auto-resolved cleanly by favoring
@emph{our} version.  Changes from the other tree that do not conflict with our
side are reflected in the merge result.  For a binary file, the entire
contents are taken from our side.

This should not be confused with the @emph{ours} merge strategy, which does not
even look at what the other tree contains at all.  It discards everything
the other tree did, declaring @emph{our} history contains all that happened in
it.

@item  theirs 
This is the opposite of @emph{ours}; note that, unlike @emph{ours}, there is no
@emph{theirs} merge strategy to confuse this merge option with.

@item  ignore-space-change 
@itemx  ignore-all-space 
@itemx  ignore-space-at-eol 
@itemx  ignore-cr-at-eol 
Treats lines with the indicated type of whitespace change as unchanged for
the sake of a three-way merge.  Whitespace changes mixed with other changes
to a line are not ignored.  See also git-diff(1) @samp{-b}, @samp{-w},
@samp{--ignore-space-at-eol}, and @samp{--ignore-cr-at-eol}.

@itemize 

@item
If @emph{their} version only introduces whitespace changes to a line, @emph{our}
version is used;

@item
If @emph{our} version introduces whitespace changes but @emph{their} version includes
a substantial change, @emph{their} version is used;

@item
Otherwise, the merge proceeds in the usual way.
@end itemize

@item  renormalize 
This runs a virtual check-out and check-in of all three stages of a file
when resolving a three-way merge.  This option is meant to be used when
merging branches with different clean filters or end-of-line normalization
rules.  See "Merging branches with differing checkin/checkout attributes" in
gitattributes(5) for details.

@item  no-renormalize 
Disables the @samp{renormalize} option.  This overrides the @samp{merge.renormalize}
configuration variable.

@item  find-renames[=<n>] 
Turn on rename detection, optionally setting the similarity threshold.  This
is the default. This overrides the @emph{merge.renames} configuration variable.
See also git-diff(1) @samp{--find-renames}.

@item  rename-threshold=<n> 
Deprecated synonym for @samp{find-renames=<n>}.

@item  subtree[=<path>] 
This option is a more advanced form of @emph{subtree} strategy, where the
strategy makes a guess on how two trees must be shifted to match with each
other when merging.  Instead, the specified path is prefixed (or stripped
from the beginning) to make the shape of two trees to match.
@end table

@item  recursive 
This can only resolve two heads using a 3-way merge algorithm.  When there
is more than one common ancestor that can be used for 3-way merge, it
creates a merged tree of the common ancestors and uses that as the reference
tree for the 3-way merge.  This has been reported to result in fewer merge
conflicts without causing mismerges by tests done on actual merge commits
taken from Linux 2.6 kernel development history.  Additionally this can
detect and handle merges involving renames.  It does not make use of
detected copies.  This was the default strategy for resolving two heads from
Git v0.99.9k until v2.33.0.

The @emph{recursive} strategy takes the same options as @emph{ort}.  However, there
are three additional options that @emph{ort} ignores (not documented above) that
are potentially useful with the @emph{recursive} strategy:

@table @asis

@item  patience 
Deprecated synonym for @samp{diff-algorithm=patience}.

@item  diff-algorithm=[patience|minimal|histogram|myers] 
Use a different diff algorithm while merging, which can help avoid mismerges
that occur due to unimportant matching lines (such as braces from distinct
functions).  See also git-diff(1) @samp{--diff-algorithm}.  Note that
@samp{ort} specifically uses @samp{diff-algorithm=histogram}, while @samp{recursive}
defaults to the @samp{diff.algorithm} config setting.

@item  no-renames 
Turn off rename detection. This overrides the @samp{merge.renames} configuration
variable.  See also git-diff(1) @samp{--no-renames}.
@end table

@item  resolve 
This can only resolve two heads (i.e. the current branch and another branch
you pulled from) using a 3-way merge algorithm.  It tries to carefully
detect criss-cross merge ambiguities.  It does not handle renames.

@item  octopus 
This resolves cases with more than two heads, but refuses to do a complex
merge that needs manual resolution.  It is primarily meant to be used for
bundling topic branch heads together.  This is the default merge strategy
when pulling or merging more than one branch.

@item  ours 
This resolves any number of heads, but the resulting tree of the merge is
always that of the current branch head, effectively ignoring all changes
from all other branches.  It is meant to be used to supersede old
development history of side branches.  Note that this is different from the
-Xours option to the @emph{recursive} merge strategy.

@item  subtree 
This is a modified @samp{ort} strategy. When merging trees A and B, if B
corresponds to a subtree of A, B is first adjusted to match the tree
structure of A, instead of reading the trees at the same level. This
adjustment is also done to the common ancestor tree.
@end table

With the strategies that use 3-way merge (including the default, @emph{ort}), if
a change is made on both branches, but later reverted on one of the
branches, that change will be present in the merged result; some people find
this behavior confusing.  It occurs because only the heads and the merge
base are considered when performing a merge, not the individual commits.
The merge algorithm therefore considers the reverted change as no change at
all, and substitutes the changed version instead.

@noindent

@chapheading CONFIGURATION

@table @asis

@item  merge.conflictStyle 
Specify the style in which conflicted hunks are written out to working tree
files upon merge.  The default is "merge", which shows a @samp{<<<<<<<} conflict
marker, changes made by one side, a @samp{=======} marker, changes made by the
other side, and then a @samp{>>>>>>>} marker.  An alternate style, "diff3", adds
a @samp{|||||||} marker and the original text before the @samp{=======} marker.

@item  merge.defaultToUpstream 
If merge is called without any commit argument, merge the upstream branches
configured for the current branch by using their last observed values stored
in their remote-tracking branches.  The values of the @samp{branch.<current
branch>.merge} that name the branches at the remote named by
@samp{branch.<current branch>.remote} are consulted, and then they are mapped via
@samp{remote.<remote>.fetch} to their corresponding remote-tracking branches, and
the tips of these tracking branches are merged. Defaults to true.

@item  merge.ff 
By default, Git does not create an extra merge commit when merging a commit
that is a descendant of the current commit. Instead, the tip of the current
branch is fast-forwarded. When set to @samp{false}, this variable tells Git to
create an extra merge commit in such a case (equivalent to giving the
@samp{--no-ff} option from the command line). When set to @samp{only}, only such
fast-forward merges are allowed (equivalent to giving the @samp{--ff-only} option
from the command line).

@item  merge.verifySignatures 
If true, this is equivalent to the --verify-signatures command line
option. See git-merge(1) for details.

@item  merge.branchdesc 
ブランチ名に加えて、それらに関連付けられたブランチの説明テキストをログメッセージに入力します。デフォルトはfalseです。

@item  merge.log 
ブランチ名に加えて、マージされる実際のコミットからの最大「指定の数」の親コミットの1行説明をログメッセージに入力します。デフォルトはfalseで、trueは20の同義語です。

@item  merge.suppressDest 
統合ブランチの名前に一致するグロブをこの複数値の構成変数(multi-valued configuration
variable)に追加することにより、これらの統合ブランチへのマージに対して計算されるデフォルトのマージメッセージは、タイトルから「into
<branch name>」を省略します。

空の値を持つ要素を使用して、以前の構成エントリから蓄積されたグロブのリストをクリアできます。 @samp{merge.suppressDest}
変数が定義されていない場合、下位互換性のためにデフォルト値の @samp{master} が使用されます。

@item  merge.renameLimit 
The number of files to consider in the exhaustive portion of rename
detection during a merge.  If not specified, defaults to the value of
diff.renameLimit.  If neither merge.renameLimit nor diff.renameLimit are
specified, currently defaults to 7000.  This setting has no effect if rename
detection is turned off.

@item  merge.renames 
Whether Git detects renames.  If set to "false", rename detection is
disabled. If set to "true", basic rename detection is enabled.  Defaults to
the value of diff.renames.

@item  merge.directoryRenames 
Whether Git detects directory renames, affecting what happens at merge time
to new files added to a directory on one side of history when that directory
was renamed on the other side of history.  If merge.directoryRenames is set
to "false", directory rename detection is disabled, meaning that such new
files will be left behind in the old directory.  If set to "true", directory
rename detection is enabled, meaning that such new files will be moved into
the new directory.  If set to "conflict", a conflict will be reported for
such paths.  If merge.renames is false, merge.directoryRenames is ignored
and treated as false.  Defaults to "conflict".

@item  merge.renormalize 
Tell Git that canonical representation of files in the repository has
changed over time (e.g. earlier commits record text files with CRLF line
endings, but recent ones use LF line endings).  In such a repository, Git
can convert the data recorded in commits to a canonical form before
performing a merge to reduce unnecessary conflicts.  For more information,
see section "Merging branches with differing checkin/checkout attributes" in
gitattributes(5).

@item  merge.stat 
Whether to print the diffstat between ORIG_HEAD and the merge result at the
end of the merge.  True by default.

@item  merge.autoStash 
When set to true, automatically create a temporary stash entry before the
operation begins, and apply it after the operation ends.  This means that
you can run merge on a dirty worktree.  However, use with care: the final
stash application after a successful merge might result in non-trivial
conflicts.  This option can be overridden by the @samp{--no-autostash} and
@samp{--autostash} options of git-merge(1).  Defaults to false.

@item  merge.tool 
Controls which merge tool is used by git-mergetool(1).  The list
below shows the valid built-in values.  Any other value is treated as a
custom merge tool and requires that a corresponding mergetool.<tool>.cmd
variable is defined.

@item  merge.guitool 
Controls which merge tool is used by git-mergetool(1) when the
-g/--gui flag is specified. The list below shows the valid built-in values.
Any other value is treated as a custom merge tool and requires that a
corresponding mergetool.<guitool>.cmd variable is defined.

@itemize 

@item
araxis

@item
bc

@item
bc3

@item
bc4

@item
codecompare

@item
deltawalker

@item
diffmerge

@item
diffuse

@item
ecmerge

@item
emerge

@item
examdiff

@item
guiffy

@item
gvimdiff

@item
gvimdiff1

@item
gvimdiff2

@item
gvimdiff3

@item
kdiff3

@item
meld

@item
nvimdiff

@item
nvimdiff1

@item
nvimdiff2

@item
nvimdiff3

@item
opendiff

@item
p4merge

@item
smerge

@item
tkdiff

@item
tortoisemerge

@item
vimdiff

@item
vimdiff1

@item
vimdiff2

@item
vimdiff3

@item
winmerge

@item
xxdiff
@end itemize

@item  merge.verbosity 
Controls the amount of output shown by the recursive merge strategy.  Level
0 outputs nothing except a final error message if conflicts were
detected. Level 1 outputs only conflicts, 2 outputs conflicts and file
changes.  Level 5 and above outputs debugging information.  The default is
level 2.  Can be overridden by the @samp{GIT_MERGE_VERBOSITY} environment
variable.

@item  merge.<driver>.name 
Defines a human-readable name for a custom low-level merge driver.  See
gitattributes(5) for details.

@item  merge.<driver>.driver 
Defines the command that implements a custom low-level merge driver.  See
gitattributes(5) for details.

@item  merge.<driver>.recursive 
Names a low-level merge driver to be used when performing an internal merge
between common ancestors.  See gitattributes(5) for details.

@item  branch.<name>.mergeOptions 
Sets default options for merging into branch <name>. The syntax and
supported options are the same as those of @emph{git merge}, but option values
containing whitespace characters are currently not supported.
@end table

@noindent

@chapheading SEE ALSO

git-fmt-merge-msg(1), git-pull(1), gitattributes(5),
git-reset(1), git-diff(1), git-ls-files(1),
git-add(1), git-rm(1), git-mergetool(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-mergetool--lib,,,Top
@chapheading Name

git-mergetool--lib — 共通 Gitマージツール シェル スクリプレット群

@noindent

@chapheading Synopsis

@display
TOOL_MODE=(diff|merge) . "$(git --exec-path)/git-mergetool--lib"
@end display


@noindent

@chapheading DESCRIPTION

これは、全くもってエンドユーザー向けコマンドではありません。この文書は、磁器風のスクリプトを研究している、および/または
新しいスクリプトを書いている人々を対象としています。

@emph{git-mergetool--lib}
スクリプトレットは、Gitマージツールを操作するための関数を設定するために、他のシェルスクリプトから(
`.`を使用して)呼び出される(source)されるように設計されています。

@emph{git-mergetool--lib} を(sourceで)実行する前に、スクリプトで @samp{TOOL_MODE}
を設定して、以下にリストされている関数の操作モードを定義する必要があります。 @emph{diff} と @emph{merge} は有効な値です。

@noindent

@chapheading FUNCTIONS

@table @asis

@item  get_merge_tool 
マージツールを返します。推測されたマージツールを返した場合、戻りコードは1です。それ以外の場合は0です。適切なGUIツールを検索するために、
@emph{$GIT_MERGETOOL_GUI} を @emph{true} に設定できます。

@item  get_merge_tool_cmd 
マージツールのカスタムコマンドを返します。

@item  get_merge_tool_path 
マージツールのカスタムパスを返します。

@item  initialize_merge_tool 
マージツール固有の関数をスコープに入れて、使用またはオーバーライドできるようにします。

@item  run_merge_tool 
ツール名と true/false フラグを指定してマージツールを起動し、マージベースが存在するかどうかを示します。 @emph{$MERGED} ・
@emph{$LOCAL} ・ @emph{$REMOTE} ・ @emph{$BASE} は、マージツールで使用するために定義する必要があります。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-mergetool,,,Top
@chapheading Name

git-mergetool — マージ競合解決ツールを実行して、マージ競合を解決します

@noindent

@chapheading Synopsis

@display
git mergetool [--tool=<tool>] [-y | --[no-]prompt] [<file>…]
@end display


@noindent

@chapheading DESCRIPTION

@samp{git mergetool} を使用して、いくつかのマージユーティリティの1つを実行し、マージの競合を解決します。通常、 @samp{git merge}
の後に実行されます。

1つ以上の <file>
パラメーターが指定されている場合、マージツールプログラムが実行され、その各ファイルの違いが解決されます(競合のないものはスキップされます)。ディレクトリを指定すると、そのパスにあるすべての未解決のファイルが含まれます。ファイル名が指定されていない場合、
@samp{git mergetool} は、マージで競合するすべてのファイルに対してマージツールプログラムを実行します。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-t <tool>} 
@itemx  @samp{--tool=<tool>} 
<tool> で指定したマージ解決プログラムを使用します。 有効な値には
emerge、gvimdiff、kdiff3、meld、vimdiff、tortoisemerge が含まれます。有効な <tool>
設定のリストについては、 @samp{git mergetool --tool-help} を実行してください。

マージ解決プログラムが指定されていない場合、 @samp{git mergetool} は構成変数 @samp{merge.tool} を使用します。 構成変数
@samp{merge.tool} が設定されていない場合、 @emph{git mergetool} は適切なデフォルトを選択します。

あなたは構成変数 @samp{mergetool.<tool>.path} を設定することにより、ツールへのフルパスを明示的に指定できます。たとえば、
@samp{mergetool.kdiff3.path} を設定することにより、kdiff3への絶対パスを構成できます。それ以外の場合、 @emph{git
mergetool} はツールがPATHで使用可能であると想定します。

既知のマージツールプログラムの1つを実行する代わりに、構成変数 @samp{mergetool.<tool>.cmd}
で呼び出すコマンドラインを指定することにより、 @emph{git mergetool} をカスタマイズして代替プログラムを実行できます。

( @samp{-t} または @samp{--tool} または @samp{merge.tool} 構成変数のいずれかを介して)  @samp{git mergetool}
をこのツールで呼び出すと、構成されたコマンドラインが呼び出され、 @samp{$BASE}
がマージの共通ベースを含む一時ファイルの名前に設定され、使用可能な場合、 @samp{$LOCAL}
は現在のブランチのファイルの内容を含む一時ファイルの名前に設定され、 @samp{$REMOTE}
はマージされるファイルの内容を含む一時ファイルの名前に設定され、 @samp{$REMOTE}
はマージされるファイルの内容を含む一時ファイルの名前に設定されます。

カスタムマージツールがその終了コードでマージ解決の成功を正確に示している場合、構成変数 @samp{mergetool.<tool>.trustExitCode}
を @samp{true} に設定できます。それ以外の場合、 @samp{git mergetool}
は、カスタムツールが終了した後、解決の成功を示すようにユーザーに促します。

@item  @samp{--tool-help} 
@samp{--tool} で使用できるマージツールのリストを出力します。

@item  @samp{-y} 
@itemx  @samp{--no-prompt} 
マージ解決プログラムを呼び出す前にプロンプトを表示しないでください。これは、マージ解決プログラムが @samp{--tool} オプションまたは
@samp{merge.tool} 構成変数で明示的に指定されている場合のデフォルトです。

@item  @samp{--prompt} 
マージ解決プログラムを呼び出す前にプロンプトを表示して、ユーザーにパス(path)をスキップする機会を与えます。

@item  @samp{-g} 
@itemx  @samp{--gui} 
@samp{git-mergetool} が @samp{-g} または @samp{--gui} オプションを伴って呼び出されると、デフォルトのマージツールは
@samp{merge.tool} ではなく設定された @samp{merge.guitool} 変数から読み取られます。 @samp{merge.guitool}
が設定されていない場合、 @samp{merge.tool} で構成されたツールにフォールバックします。

@item  @samp{--no-gui} 
これにより、以前の @samp{-g} または @samp{--gui} 設定が上書きされ、デフォルトのマージツールは構成された @samp{merge.tool}
変数から読み取られます。

@item  @samp{-O<orderfile>} 
<orderfile> で指定された順序でファイルを処理します。これには、1行に1つのシェルグロブパターンがあります。 これは
@samp{diff.orderFile} 構成変数をオーバーライドします(git-config(1) を参照)。
@samp{diff.orderFile} をキャンセルするには、 @samp{-O/dev/null} を使用します。
@end table

@noindent

@chapheading CONFIGURATION

@table @asis

@item  mergetool.<tool>.path 
Override the path for the given tool.  This is useful in case your tool is
not in the PATH.

@item  mergetool.<tool>.cmd 
Specify the command to invoke the specified merge tool.  The specified
command is evaluated in shell with the following variables available: @emph{BASE}
is the name of a temporary file containing the common base of the files to
be merged, if available; @emph{LOCAL} is the name of a temporary file containing
the contents of the file on the current branch; @emph{REMOTE} is the name of a
temporary file containing the contents of the file from the branch being
merged; @emph{MERGED} contains the name of the file to which the merge tool
should write the results of a successful merge.

@item  mergetool.<tool>.hideResolved 
Allows the user to override the global @samp{mergetool.hideResolved} value for a
specific tool. See @samp{mergetool.hideResolved} for the full description.

@item  mergetool.<tool>.trustExitCode 
For a custom merge command, specify whether the exit code of the merge
command can be used to determine whether the merge was successful.  If this
is not set to true then the merge target file timestamp is checked and the
merge assumed to have been successful if the file has been updated,
otherwise the user is prompted to indicate the success of the merge.

@item  mergetool.meld.hasOutput 
Older versions of @samp{meld} do not support the @samp{--output} option.  Git will
attempt to detect whether @samp{meld} supports @samp{--output} by inspecting the
output of @samp{meld --help}.  Configuring @samp{mergetool.meld.hasOutput} will make
Git skip these checks and use the configured value instead.  Setting
@samp{mergetool.meld.hasOutput} to @samp{true} tells Git to unconditionally use the
@samp{--output} option, and @samp{false} avoids using @samp{--output}.

@item  mergetool.meld.useAutoMerge 
When the @samp{--auto-merge} is given, meld will merge all non-conflicting parts
automatically, highlight the conflicting parts and wait for user decision.
Setting @samp{mergetool.meld.useAutoMerge} to @samp{true} tells Git to unconditionally
use the @samp{--auto-merge} option with @samp{meld}.  Setting this value to @samp{auto}
makes git detect whether @samp{--auto-merge} is supported and will only use
@samp{--auto-merge} when available.  A value of @samp{false} avoids using
@samp{--auto-merge} altogether, and is the default value.

@item  mergetool.hideResolved 
During a merge Git will automatically resolve as many conflicts as possible
and write the @emph{MERGED} file containing conflict markers around any conflicts
that it cannot resolve; @emph{LOCAL} and @emph{REMOTE} normally represent the versions
of the file from before Git’s conflict resolution. This flag causes @emph{LOCAL}
and @emph{REMOTE} to be overwriten so that only the unresolved conflicts are
presented to the merge tool. Can be configured per-tool via the
@samp{mergetool.<tool>.hideResolved} configuration variable. Defaults to @samp{false}.

@item  mergetool.keepBackup 
After performing a merge, the original file with conflict markers can be
saved as a file with a @samp{.orig} extension.  If this variable is set to
@samp{false} then this file is not preserved.  Defaults to @samp{true} (i.e. keep the
backup files).

@item  mergetool.keepTemporaries 
When invoking a custom merge tool, Git uses a set of temporary files to pass
to the tool. If the tool returns an error and this variable is set to
@samp{true}, then these temporary files will be preserved, otherwise they will be
removed after the tool has exited. Defaults to @samp{false}.

@item  mergetool.writeToTemp 
Git writes temporary @emph{BASE}, @emph{LOCAL}, and @emph{REMOTE} versions of conflicting
files in the worktree by default.  Git will attempt to use a temporary
directory for these files when set @samp{true}.  Defaults to @samp{false}.

@item  mergetool.prompt 
Prompt before each invocation of the merge resolution program.
@end table

@noindent

@chapheading TEMPORARY FILES

@samp{git mergetool} は、マージの解決中に @samp{*.orig} バックアップファイルを作成します。これらは、ファイルがマージされ、その @samp{git
mergetool} セッションが完了したら安全に削除できます。

@samp{mergetool.keepBackup} 構成変数を @samp{false} に設定すると、ファイルが正常にマージされたときに、 @samp{git
mergetool} がバックアップを自動的に削除します。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-mktag,,,Top
@chapheading Name

git-mktag — 追加の検証(extra validation)でタグオブジェクトを作成します

@noindent

@chapheading Synopsis

@display
git mktag
@end display


@noindent

@chapheading DESCRIPTION

標準入力でタグの内容を読み取り、タグオブジェクトを作成します。 出力は、新しいタグの <object> IDです。

このコマンドは、 git-hash-object(1) を @samp{-t tag -w --stdin}
オプションで呼び出すのとほとんど同じです。例:以下は両方とも、 @samp{my-tag}
ファイル中からタグの記述を見つけ、見つけたタグの記述からをタグオブジェクトを作成して書き込みます。

@example
git mktag <my-tag
git hash-object -t tag -w --stdin <my-tag
@end example

git-hash-object(1) の違いは、タグが git-fsck(1)
チェックに合格しない場合、タグを書き込む前にmktagが停止することです。

mktagで実行される「fsck」チェックは、すべての @samp{fsck.<msg-id>} メッセージが警告からエラーに昇格されるという点で
git-fsck(1) がデフォルトで実行するものよりも厳密(strict)です(たとえば、tagger行の欠落はエラーです)。

オブジェクトの余分なヘッダーもmktagではエラーになりますが、 git-fsck(1) では無視されます。この追加のチェックは、適切な
@samp{fsck.<msg-id>} 変数を設定することでオフにできます:

@example
git -c fsck.extraHeaderEntry=ignore mktag <my-tag-with-headers
@end example

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--strict} 
デフォルトでは、mktagは git-fsck(1) の @samp{--strict} モードに相当するものをオンにします。無効にするには、
@samp{--no-strict} を使用します。
@end table

@noindent

@chapheading Tag Format

このコマンドの標準入力に供給されるタグ署名ファイル(tag signature file)は、非常に単純な固定形式です。それは以下の4行からなります。

@example
object <hash>
type <typename>
tag <tagname>
tagger <tagger>
@end example

この後ろにいくつかのオプションの自由形式のメッセージが続きます(古いGitによって作成された一部のタグには @samp{tagger}
行がない場合があります)。メッセージが存在する場合は、ヘッダーとは空白行で区切られます。メッセージ部分には、Git自体は気にしない署名が含まれている場合がありますが、それはgpgで確認できます。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-mktree,,,Top
@chapheading Name

git-mktree — ls-tree形式のテキストからツリーオブジェクトを構築する

@noindent

@chapheading Synopsis

@display
git mktree [-z] [--missing] [--batch]
@end display


@noindent

@chapheading DESCRIPTION

非再帰的な @samp{ls-tree}
出力形式で標準入力を読み取り、ツリーオブジェクトを作成します。ツリーエントリの順序はmktreeによって正規化されるため、入力を事前に並べ替える必要はありません。構築されたツリーオブジェクトのオブジェクト名が標準出力に書き出されます。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-z} 
通常の ls-tree 出力形式の代わりに、(行終端がNULLである) @samp{ls-tree -z} 出力形式を読み取ります。

@item  @samp{--missing} 
欠落しているオブジェクトを許可します。
(このオプションなしでの)デフォルトの動作では、各ツリーエントリのSHA1が、存在するオブジェクトを識別していることを確認します。なお、このオプションは、常に欠落していることが許可されている
gitlink エントリ(別名「サブモジュール」)の処理には影響しません。

@item  @samp{--batch} 
終了せずに、複数のツリーオブジェクトの構築をする事を許可します。入力の各ツリーは、空白行1行で区切られています。最後の改行はオプションです。注意:
@samp{-z} オプションを使用すると、行はNUL終端になります。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-multi-pack-index,,,Top
@chapheading Name

git-multi-pack-index — multi-pack-indexを書き出し・検証します

@noindent

@chapheading Synopsis

@display
git multi-pack-index [--object-dir=<dir>] [--[no-]progress]
        [--preferred-pack=<pack>] [--[no-]bitmap] <subcommand>
@end display


@noindent

@chapheading DESCRIPTION

multi-pack-index (MIDX) ファイルを書き出し・検証します。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--object-dir=<dir>} 
Gitオブジェクトの場所として、指定されたディレクトリを使用します。 現在のMIDXファイルについては
@samp{<dir>/packs/multi-pack-index} をチェックし、インデックスを作成するパックファイルについては @samp{<dir>/packs}
をチェックします。

@samp{<dir>} は、現在のリポジトリの代替(alternate)である必要があります。

@item  @samp{--[no-]progress} 
進行状況を明示的にオン/オフにします。どちらも指定されていない場合、標準エラーが端末に接続されていれば進行状況が表示されます。
@end table

以下のサブコマンドを使用できます:

@table @asis

@item  write 
新しいMIDXファイルを書き込みます。 @samp{write} サブコマンドでは、以下のオプションを使用できます:

@table @asis

@item  @samp{--preferred-pack=<pack>} 
オプションで、複数のパックに同じオブジェクトが含まれている場合に使用されるタイブレークパッキング(tie-breaking pack)を指定します。 @samp{<pack>} には少なくとも1つのオブジェクトが含まれている必要があります。与えられていない場合、mtimeが最も低いパックを優先して採用(ties are broken)します。

@item  @samp{--[no-]bitmap} 
マルチパックビットマップ(multi-pack bitmap)を書き込むかどうかを制御します。
@end table

@item  verify 
MIDXファイルの内容を検証(verify)します。

@item  expire 
MIDXファイルによって追跡されているが、MIDXによって参照されているオブジェクトがないパックファイルを削除します。その後、MIDXファイルを書き直して、これらのパックファイルへのすべての参照を削除します。

@item  repack 
マルチパックインデックス(multi-pack-index)によって参照される小さなパックファイル(pack-files)にオブジェクトを含む新しいパックファイルを作成します。
@samp{--batch-size=<size>}
引数で指定されたサイズがゼロの場合、マルチパックインデックスによって参照されるすべてのオブジェクトを含むパックを作成します。ゼロ以外のバッチサイズの場合は、パックを古いものから新しいものへと調べてパックファイルを選択します。マルチパックインデックスによって参照されるパック内のオブジェクトの数をカウントすることにより、「予想サイズ」を計算します。次に、予想サイズをパック内のオブジェクトの総数で割り、パックサイズを掛けます。パックのセットが少なくともバッチサイズの合計予想サイズになるまで、またはすべてのパックファイルが考慮されるまで、予想サイズがバッチサイズよりも小さいパックを選択します。パックファイルが1つだけ選択されている場合は、何もしません。
新しいパックファイルが作成された場合は、マルチパックインデックスを書き直して(rewrite)、新しいパックファイルを参照します。後で @samp{git
multi-pack-index expire} を実行すると、このバッチの一部であったパックファイルが削除されます。

@samp{repack.packKeptObjects} が @samp{false`の場合、 `.keep}
ファイルが関連付けられているパックファイルはバッチで再パックするために選択されません。
@end table

@noindent

@chapheading EXAMPLES

@itemize 

@item
現在の.gitフォルダーにpackfilesのMIDXファイルを書き込みます。

@example
$ git multi-pack-index write
@end example


@item
対応するビットマップを使用して、現在の @samp{.git} フォルダー内のpackfilesのMIDXファイルを書き込みます。

@example
$ git multi-pack-index write --preferred-pack=<pack> --bitmap
@end example


@item
代替オブジェクトストア(alternate object store)にパックファイルのMIDXファイルを書き込みます。

@example
$ git multi-pack-index --object-dir <alt> write
@end example


@item
現在の @samp{.git} フォルダー内のpackfilesのMIDXファイルを検証(verify)します。

@example
$ git multi-pack-index verify
@end example

@end itemize

@noindent

@chapheading SEE ALSO

マルチパックインデックス機能の詳細については、 @uref{technical/multi-pack-index.html,The Multi-Pack-Index Design Document} と @uref{technical/pack-format.html,The Multi-Pack-Index Format} を参照してください。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-mv,,,Top
@chapheading Name

git-mv — ファイルまたはディレクトリまたはシンボリックリンクを移動(move)または名前変更(rename)します

@noindent

@chapheading Synopsis

@display
git mv <options>… <args>…
@end display


@noindent

@chapheading DESCRIPTION

ファイルまたはディレクトリまたはシンボリックリンクを移動または名前変更します。

@example
git mv [-v] [-f] [-n] [-k] <source> <destination>
git mv [-v] [-f] [-n] [-k] <source> ... <destination directory>
@end example

最初の形式では、ファイル・シンボリックリンク・ディレクトリのいずれかである必要がある <source> の名前を <destination>
に変更します。2番目の形式では、最後の引数は既存のディレクトリである必要があります。指定のソースはこのディレクトリに移動されます。

正常に完了するとインデックスは更新されますが、変更はコミットする必要があります。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-f} 
@itemx  @samp{--force} 
ターゲットが存在する場合でも、ファイルの名前変更または移動を強制します

@item  @samp{-k} 
エラー状態になる移動または名前変更をスキップします。ソースが存在せず、Gitによって制御されていない場合、または @samp{-f}
が指定されていない限り、ソースが既存のファイルを上書きする場合、エラーが発生します。

@item  @samp{-n} 
@itemx  @samp{--dry-run} 
何も操作しない。何が起こるかを示すだけです。

@item  @samp{-v} 
@itemx  @samp{--verbose} 
移動するファイルの名前を報告します。
@end table

@noindent

@chapheading SUBMODULES

gitfile(つまり、Gitバージョン1.7.8以降で複製された)を使用してサブモジュールを移動すると、gitfileとcore.worktreeの設定が更新され、サブモジュールが新しい場所で機能するようになります。また、
gitmodules(5) ファイルの submodule.<name>.path
設定を更新し、そのファイルをステージングしようとします( @samp{-n} が使用されている場合を除く)。

@noindent

@chapheading BUGS

スーパープロジェクトの更新により、入力されたサブモジュールが移動されるたびに(たとえば、移動の前後でコミットを切り替える場合)、古いサブモジュールのチェックアウトは古い場所に残り、空のディレクトリが新しい場所に表示されます。新しい場所にサブモジュールを再度入力するには、後で「git
submodule
update」を実行する必要があります。古いディレクトリの削除は、gitfileを使用している場合にのみ安全です。そうでなければ、サブモジュールの履歴も削除されます。再帰的なサブモジュールの更新が実装されている場合、これらの手順は廃止されるでしょう。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-name-rev,,,Top
@chapheading Name

git-name-rev — 指定のrevのシンボリック名を検索します

@noindent

@chapheading Synopsis

@display
git name-rev [--tags] [--refs=<pattern>]
               ( --all | --stdin | <commit-ish>… )
@end display


@noindent

@chapheading DESCRIPTION

@emph{gitrev-parse} で解析可能な任意の形式で指定されたリビジョンの、人間にとって読みやすい記号名を検索します。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--tags} 
ブランチ名は使用せず、コミットに名前を付けるためにタグのみを使用します

@item  @samp{--refs=<pattern>} 
名前が特定のシェルパターンに一致するrefのみを使用します。
パターンは、ブランチ名、タグ名、または完全修飾ref名のいずれかです。複数回指定する場合は、指定したシェルパターンのいずれかに名前が一致するrefsを使用します。
@samp{--no-refs} を使用して、既に指定済のrefパターンをクリアします。

@item  @samp{--exclude=<pattern>} 
名前が特定のシェルパターンと一致するrefは使用しない。
パターンは、ブランチ名、タグ名、または完全修飾ref名のいずれかです。複数回指定された場合、指定されたパターンのいずれかに一致するrefは除外されます。
@samp{--refs} と一緒に使用すると、refは少なくとも1つの @samp{--refs} パターンに一致し、 @samp{--exclude}
パターンに一致しない場合にのみ一致として使用されます。 @samp{--no-exclude} を使用して、除外パターンのリストをクリアします。

@item  @samp{--all} 
すべてのrefから到達可能なすべてのコミットを一覧表示します

@item  @samp{--stdin} 
16死ん40文字のSHA-1($hexとする)をすべて "$hex ($rev_name)" に置き換えて、stdinを変換します。
@samp{--name-only} と一緒に使用する場合は、"$rev_name" に置き換えて、 $hex
を完全に省略します。スクリプトで使用することを目的としています。

@item  @samp{--name-only} 
SHA-1と名前の両方を印刷する代わりに、名前のみを印刷します。 @samp{--tags} を指定すると、通常のタグプレフィックス "tags/"
も名前から省略され、 `git-describe`の出力とより厳密に一致します。

@item  @samp{--no-undefined} 
参照が未定義の場合、 @samp{undefined} を出力する代わりに、エラーコード != 0 で終了します。

@item  @samp{--always} 
一意を保つように省略されたコミットオブジェクトをフォールバックとして表示します。
@end table

@noindent

@chapheading EXAMPLES

コミットが与えられたら、そのローカルrefsとの相対的な位置を見つけます。 誰かがその素晴らしいコミット
33db5f4d9027a10e477ccf054b2c1ab94f74c85a
についてあなたに述べたとしましょう。もちろん、あなたはそのコミットを調べますが、そこでは何が起こったのかを教えてくれるだけで、文脈は教えてくれません。

@emph{git name-rev} に入力します:

@example
% git name-rev 33db5f4d9027a10e477ccf054b2c1ab94f74c85a
33db5f4d9027a10e477ccf054b2c1ab94f74c85a tags/v0.99~940
@end example


あなたは今や、v0.99より前に940のリビジョンが発生したことが分かりましたね。

別の方法:

@example
% git log | git name-rev --stdin
@end example


@noindent

@chapheading GIT

Part of the git(1) suite

@node git-notes,,,Top
@chapheading Name

git-notes — Add or inspect object notes

@noindent

@chapheading Synopsis

@display
git notes [list [<object>]]
git notes add [-f] [--allow-empty] [-F <file> | -m <msg> | (-c | -C) <object>] [<object>]
git notes copy [-f] ( --stdin | <from-object> [<to-object>] )
git notes append [--allow-empty] [-F <file> | -m <msg> | (-c | -C) <object>] [<object>]
git notes edit [--allow-empty] [<object>]
git notes show [<object>]
git notes merge [-v | -q] [-s <strategy> ] <notes-ref>
git notes merge --commit [-v | -q]
git notes merge --abort [-v | -q]
git notes remove [--ignore-missing] [--stdin] [<object>…]
git notes prune [-n] [-v]
git notes get-ref
@end display


@noindent

@chapheading DESCRIPTION

Adds, removes, or reads notes attached to objects, without touching the
objects themselves.

By default, notes are saved to and read from @samp{refs/notes/commits}, but this
default can be overridden.  See the OPTIONS, CONFIGURATION, and ENVIRONMENT
sections below.  If this ref does not exist, it will be quietly created when
it is first needed to store a note.

A typical use of notes is to supplement a commit message without changing
the commit itself. Notes can be shown by @emph{git log} along with the original
commit message. To distinguish these notes from the message stored in the
commit object, the notes are indented like the message, after an unindented
line saying "Notes (<refname>):" (or "Notes:" for @samp{refs/notes/commits}).

Notes can also be added to patches prepared with @samp{git format-patch} by using
the @samp{--notes} option. Such notes are added as a patch commentary after a
three dash separator line.

To change which notes are shown by @emph{git log}, see the "notes.displayRef"
configuration in git-log(1).

See the "notes.rewrite.<command>" configuration for a way to carry notes
across commands that rewrite commits.

@noindent

@chapheading SUBCOMMANDS

@table @asis

@item  list 
List the notes object for a given object. If no object is given, show a list
of all note objects and the objects they annotate (in the format "<note
object> <annotated object>").  This is the default subcommand if no
subcommand is given.

@item  add 
Add notes for a given object (defaults to HEAD). Abort if the object already
has notes (use @samp{-f} to overwrite existing notes).  However, if you’re using
@samp{add} interactively (using an editor to supply the notes contents), then -
instead of aborting - the existing notes will be opened in the editor (like
the @samp{edit} subcommand).

@item  copy 
Copy the notes for the first object onto the second object (defaults to
HEAD). Abort if the second object already has notes, or if the first object
has none (use -f to overwrite existing notes to the second object). This
subcommand is equivalent to: @samp{git notes add [-f] -C $(git notes list
<from-object>) <to-object>}

In @samp{--stdin} mode, take lines in the format

@example
<from-object> SP <to-object> [ SP <rest> ] LF
@end example


on standard input, and copy the notes from each <from-object> to its
corresponding <to-object>.  (The optional @samp{<rest>} is ignored so that the
command can read the input given to the @samp{post-rewrite} hook.)

@item  append 
Append to the notes of an existing object (defaults to HEAD).  Creates a new
notes object if needed.

@item  edit 
Edit the notes for a given object (defaults to HEAD).

@item  show 
Show the notes for a given object (defaults to HEAD).

@item  merge 
Merge the given notes ref into the current notes ref.  This will try to
merge the changes made by the given notes ref (called "remote") since the
merge-base (if any) into the current notes ref (called "local").

If conflicts arise and a strategy for automatically resolving conflicting
notes (see the "NOTES MERGE STRATEGIES" section) is not given, the "manual"
resolver is used. This resolver checks out the conflicting notes in a
special worktree (@samp{.git/NOTES_MERGE_WORKTREE}), and instructs the user to
manually resolve the conflicts there.  When done, the user can either
finalize the merge with @emph{git notes merge --commit}, or abort the merge with
@emph{git notes merge --abort}.

@item  remove 
Remove the notes for given objects (defaults to HEAD). When giving zero or
one object from the command line, this is equivalent to specifying an empty
note message to the @samp{edit} subcommand.

@item  prune 
Remove all notes for non-existing/unreachable objects.

@item  get-ref 
Print the current notes ref. This provides an easy way to retrieve the
current notes ref (e.g. from scripts).
@end table

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-f} 
@itemx  @samp{--force} 
When adding notes to an object that already has notes, overwrite the
existing notes (instead of aborting).

@item  @samp{-m <msg>} 
@itemx  @samp{--message=<msg>} 
Use the given note message (instead of prompting).  If multiple @samp{-m} options
are given, their values are concatenated as separate paragraphs.  Lines
starting with @samp{#} and empty lines other than a single line between
paragraphs will be stripped out.

@item  @samp{-F <file>} 
@itemx  @samp{--file=<file>} 
Take the note message from the given file.  Use @emph{-} to read the note message
from the standard input.  Lines starting with @samp{#} and empty lines other than
a single line between paragraphs will be stripped out.

@item  @samp{-C <object>} 
@itemx  @samp{--reuse-message=<object>} 
Take the given blob object (for example, another note) as the note
message. (Use @samp{git notes copy <object>} instead to copy notes between
objects.)

@item  @samp{-c <object>} 
@itemx  @samp{--reedit-message=<object>} 
Like @emph{-C}, but with @samp{-c} the editor is invoked, so that the user can further
edit the note message.

@item  @samp{--allow-empty} 
Allow an empty note object to be stored. The default behavior is to
automatically remove empty notes.

@item  @samp{--ref <ref>} 
Manipulate the notes tree in <ref>.  This overrides @samp{GIT_NOTES_REF} and the
"core.notesRef" configuration.  The ref specifies the full refname when it
begins with @samp{refs/notes/}; when it begins with @samp{notes/}, @samp{refs/} and
otherwise @samp{refs/notes/} is prefixed to form a full name of the ref.

@item  @samp{--ignore-missing} 
Do not consider it an error to request removing notes from an object that
does not have notes attached to it.

@item  @samp{--stdin} 
Also read the object names to remove notes from the standard input (there is
no reason you cannot combine this with object names from the command line).

@item  @samp{-n} 
@itemx  @samp{--dry-run} 
Do not remove anything; just report the object names whose notes would be
removed.

@item  @samp{-s <strategy>} 
@itemx  @samp{--strategy=<strategy>} 
When merging notes, resolve notes conflicts using the given strategy. The
following strategies are recognized: "manual" (default), "ours", "theirs",
"union" and "cat_sort_uniq".  This option overrides the
"notes.mergeStrategy" configuration setting.  See the "NOTES MERGE
STRATEGIES" section below for more information on each notes merge strategy.

@item  @samp{--commit} 
Finalize an in-progress @emph{git notes merge}. Use this option when you have
resolved the conflicts that @emph{git notes merge} stored in
.git/NOTES_MERGE_WORKTREE. This amends the partial merge commit created by
@emph{git notes merge} (stored in .git/NOTES_MERGE_PARTIAL) by adding the notes
in .git/NOTES_MERGE_WORKTREE. The notes ref stored in the
.git/NOTES_MERGE_REF symref is updated to the resulting commit.

@item  @samp{--abort} 
Abort/reset an in-progress @emph{git notes merge}, i.e. a notes merge with
conflicts. This simply removes all files related to the notes merge.

@item  @samp{-q} 
@itemx  @samp{--quiet} 
When merging notes, operate quietly.

@item  @samp{-v} 
@itemx  @samp{--verbose} 
When merging notes, be more verbose.  When pruning notes, report all object
names whose notes are removed.
@end table

@noindent

@chapheading DISCUSSION

Commit notes are blobs containing extra information about an object (usually
information to supplement a commit’s message).  These blobs are taken from
notes refs.  A notes ref is usually a branch which contains "files" whose
paths are the object names for the objects they describe, with some
directory separators included for performance reasons @footnote{Permitted
pathnames have the form @emph{bf}@samp{/}@emph{fe}@samp{/}@emph{30}@samp{/}@emph{…}@samp{/}@emph{680d5a…}: a sequence
of directory names of two hexadecimal digits each followed by a filename
with the rest of the object ID.}.

Every notes change creates a new commit at the specified notes ref.  You can
therefore inspect the history of the notes by invoking, e.g., @samp{git log -p
notes/commits}.  Currently the commit message only records which operation
triggered the update, and the commit authorship is determined according to
the usual rules (see git-commit(1)).  These details may change in
the future.

It is also permitted for a notes ref to point directly to a tree object, in
which case the history of the notes can be read with @samp{git log -p -g
<refname>}.

@noindent

@chapheading NOTES MERGE STRATEGIES

The default notes merge strategy is "manual", which checks out conflicting
notes in a special work tree for resolving notes conflicts
(@samp{.git/NOTES_MERGE_WORKTREE}), and instructs the user to resolve the
conflicts in that work tree.  When done, the user can either finalize the
merge with @emph{git notes merge --commit}, or abort the merge with @emph{git notes
merge --abort}.

Users may select an automated merge strategy from among the following using
either -s/--strategy option or configuring notes.mergeStrategy accordingly:

"ours" automatically resolves conflicting notes in favor of the local
version (i.e. the current notes ref).

"theirs" automatically resolves notes conflicts in favor of the remote
version (i.e. the given notes ref being merged into the current notes ref).

"union" automatically resolves notes conflicts by concatenating the local
and remote versions.

"cat_sort_uniq" is similar to "union", but in addition to concatenating the
local and remote versions, this strategy also sorts the resulting lines, and
removes duplicate lines from the result. This is equivalent to applying the
"cat | sort | uniq" shell pipeline to the local and remote versions. This
strategy is useful if the notes follow a line-based format where one wants
to avoid duplicated lines in the merge result.  Note that if either the
local or remote version contain duplicate lines prior to the merge, these
will also be removed by this notes merge strategy.

@noindent

@chapheading EXAMPLES

You can use notes to add annotations with information that was not available
at the time a commit was written.

@example
$ git notes add -m 'Tested-by: Johannes Sixt <j6t@@kdbg.org>' 72a144e2
$ git show -s 72a144e
[...]
    Signed-off-by: Junio C Hamano <gitster@@pobox.com>

Notes:
    Tested-by: Johannes Sixt <j6t@@kdbg.org>
@end example


In principle, a note is a regular Git blob, and any kind of (non-)format is
accepted.  You can binary-safely create notes from arbitrary files using
@emph{git hash-object}:

@example
$ cc *.c
$ blob=$(git hash-object -w a.out)
$ git notes --ref=built add --allow-empty -C "$blob" HEAD
@end example


(You cannot simply use @samp{git notes --ref=built add -F a.out HEAD} because
that is not binary-safe.)  Of course, it doesn’t make much sense to display
non-text-format notes with @emph{git log}, so if you use such notes, you’ll
probably need to write some special-purpose tools to do something useful
with them.

@noindent

@chapheading CONFIGURATION

@table @asis

@item  core.notesRef 
Notes ref to read and manipulate instead of @samp{refs/notes/commits}.  Must be
an unabbreviated ref name.  This setting can be overridden through the
environment and command line.

@item  notes.mergeStrategy 
Which merge strategy to choose by default when resolving notes conflicts.
Must be one of @samp{manual}, @samp{ours}, @samp{theirs}, @samp{union}, or @samp{cat_sort_uniq}.
Defaults to @samp{manual}.  See "NOTES MERGE STRATEGIES" section above for more
information on each strategy.

This setting can be overridden by passing the @samp{--strategy} option.

@item  notes.<name>.mergeStrategy 
Which merge strategy to choose when doing a notes merge into
refs/notes/<name>.  This overrides the more general "notes.mergeStrategy".
See the "NOTES MERGE STRATEGIES" section above for more information on each
available strategy.

@item  notes.displayRef 
Which ref (or refs, if a glob or specified more than once), in addition to
the default set by @samp{core.notesRef} or @samp{GIT_NOTES_REF}, to read notes from
when showing commit messages with the @emph{git log} family of commands.  This
setting can be overridden on the command line or by the
@samp{GIT_NOTES_DISPLAY_REF} environment variable.  See git-log(1).

@item  notes.rewrite.<command> 
When rewriting commits with <command> (currently @samp{amend} or @samp{rebase}), if
this variable is @samp{false}, git will not copy notes from the original to the
rewritten commit.  Defaults to @samp{true}.  See also "@samp{notes.rewriteRef}" below.

This setting can be overridden by the @samp{GIT_NOTES_REWRITE_REF} environment
variable.

@item  notes.rewriteMode 
When copying notes during a rewrite, what to do if the target commit already
has a note.  Must be one of @samp{overwrite}, @samp{concatenate}, @samp{cat_sort_uniq}, or
@samp{ignore}.  Defaults to @samp{concatenate}.

This setting can be overridden with the @samp{GIT_NOTES_REWRITE_MODE} environment
variable.

@item  notes.rewriteRef 
When copying notes during a rewrite, specifies the (fully qualified) ref
whose notes should be copied.  May be a glob, in which case notes in all
matching refs will be copied.  You may also specify this configuration
several times.

Does not have a default value; you must configure this variable to enable
note rewriting.

Can be overridden with the @samp{GIT_NOTES_REWRITE_REF} environment variable.
@end table

@noindent

@chapheading ENVIRONMENT

@table @asis

@item  @samp{GIT_NOTES_REF} 
Which ref to manipulate notes from, instead of @samp{refs/notes/commits}.  This
overrides the @samp{core.notesRef} setting.

@item  @samp{GIT_NOTES_DISPLAY_REF} 
Colon-delimited list of refs or globs indicating which refs, in addition to
the default from @samp{core.notesRef} or @samp{GIT_NOTES_REF}, to read notes from when
showing commit messages.  This overrides the @samp{notes.displayRef} setting.

A warning will be issued for refs that do not exist, but a glob that does
not match any refs is silently ignored.

@item  @samp{GIT_NOTES_REWRITE_MODE} 
When copying notes during a rewrite, what to do if the target commit already
has a note.  Must be one of @samp{overwrite}, @samp{concatenate}, @samp{cat_sort_uniq}, or
@samp{ignore}.  This overrides the @samp{core.rewriteMode} setting.

@item  @samp{GIT_NOTES_REWRITE_REF} 
When rewriting commits, which notes to copy from the original to the
rewritten commit.  Must be a colon-delimited list of refs or globs.

If not set in the environment, the list of notes to copy depends on the
@samp{notes.rewrite.<command>} and @samp{notes.rewriteRef} settings.
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-p4,,,Top
@chapheading Name

git-p4 — Perforceリポジトリからのインポートと、Perforceリポジトリへのsubmit

@noindent

@chapheading Synopsis

@display
git p4 clone [<sync options>] [<clone options>] <p4 depot path>…
git p4 sync [<sync options>] [<p4 depot path>…]
git p4 rebase
git p4 submit [<submit options>] [<master branch name>]
@end display


@noindent

@chapheading DESCRIPTION

このコマンドは、Gitを使用してp4リポジトリと対話する方法を提供します。

'git p4 clone’を使用して既存のp4リポジトリから新しいGitリポジトリを作成し、1つ以上のp4デポパス(depot
path)を指定します。'git
p4sync’を使用してp4の変更からの新しいコミットを組み込みます。'sync’コマンドは、他のp4デポパスからの新しいブランチを含めるためにも使用されます。'git
p4 submit’を使用してGitの変更をp4に送信します。 コマンド’git p4
rebase’は同期を実行し、現在のブランチを更新されたp4リモートブランチにリベースします。

@noindent

@chapheading EXAMPLES

@itemize 

@item
リポジトリをクローンします:

@example
$ git p4 clone //depot/path/project
@end example


@item
新しく作成されたGitリポジトリでいくつかの作業を行います:

@example
$ cd project
$ vi foo.h
$ git commit -a -m "edited foo.h"
@end example


@item
p4からの最近の変更でGitリポジトリを更新し、あなたの作業ツリーにリベースします:

@example
$ git p4 rebase
@end example


@item
あなたのコミットを送信しp4へ戻します:

@example
$ git p4 submit
@end example

@end itemize

@noindent

@chapheading COMMANDS

@noindent

@heading Clone

通常、'git p4 clone’は、既存のp4リポジトリから新しいGitディレクトリを作成するために使用されます:

@example
$ git p4 clone //depot/path/project
@end example


これは以下の事を行います:

@enumerate 

@item
@emph{project} というサブディレクトリに空のGitリポジトリを作成します。

@item
指定されたp4デポパス(p4 depot path)からGitブランチ @emph{refs/remotes/p4/master}
の単一のコミットにヘッドリビジョンの全内容をインポートします。

@item
このリモートからローカルブランチ @emph{master} を作成し、チェックアウトします。
@end enumerate

Gitでp4履歴全体を再現するには、デポパス(dept path)で @emph{@@all} 修飾子を使用します:

@example
$ git p4 clone //depot/path/project@@all
@end example


@noindent

@heading Sync

p4リポジトリで開発が継続されていて、それらの変更をGitリポジトリに取り込むには以下を使用します:

@example
$ git p4 sync
@end example


このコマンドは、p4の新しい変更を検出し、Gitがコミットするときにそれらをインポートします。

P4リポジトリは、 @emph{git p4 sync} を使用して既存のGitリポジトリに追加することもできます:

@example
$ mkdir repo-git
$ cd repo-git
$ git init
$ git p4 sync //path/in/your/perforce/depot
@end example


これにより、指定したデポが既存のGitリポジトリの @emph{refs/remotes/p4/master} にインポートされます。 @samp{--branch}
オプションを使用して、p4コンテンツに使用する別のブランチを指定することも可能です。

Gitリポジトリにブランチ @samp{refs/remotes/origin/p4} が含まれている場合、これらは @samp{git p4 sync}
実行中に最初にフェッチされて調べ(consult)られます。p4から直接インポートするのは、Gitリモートから変更をプルするよりもかなり遅いため、これは複数開発者環境(multi-developer
environment)で役立ちます。

複数のブランチがある場合、 @samp{git p4 sync} を実行すると、「BRANCH
DETECTION」アルゴリズムが自動的に使用され、新しい変更を適切なブランチに分割しようとします。 これを @samp{--branch}
オプションでオーバーライドして、更新するブランチを1つだけ指定できます。

@noindent

@heading Rebase

一般的な動作パターンは、p4デポから最新の変更をフェッチし、それらをローカルのコミットされていない変更とマージすることです。多くの場合、p4リポジトリはすべてのコードの最終的な場所であるため、リベース作業フローは理にかなっています。このコマンドは、
@samp{git p4 sync} に続いて @samp{git rebase} を実行して、更新されたp4の変更に加えてローカルコミットを移動します。

@example
$ git p4 rebase
@end example


@noindent

@heading Submit

Gitリポジトリからp4リポジトリに変更を送信するには、別のp4クライアントワークスペース(p4 client workspace)が必要です。
これは、 @samp{P4CLIENT} 環境変数またはGit構成変数 @samp{git-p4.client}
を使用して指定する必要があります。p4クライアントは存在する必要がありますが、クライアントルート(client
root)がまだ存在しない場合は、クライアントルートが作成されて入力されます。

現在のGitブランチにはあるが、 @samp{p4/master} ブランチにはないすべての変更を送信するには、以下を使用します:

@example
$ git p4 submit
@end example


現在のブランチ以外のブランチを指定するには、以下を使用します:

@example
$ git p4 submit topicbranch
@end example


単一のコミットまたはコミットの範囲を指定するには、以下を使用します:

@example
$ git p4 submit --commit <sha1>
$ git p4 submit --commit <sha1..sha1>
@end example


アップストリーム参照は一般的には @emph{refs/remotes/p4/master} ですが、 @samp{--origin=}
コマンドラインオプションを使用してオーバーライドできます。

p4の変更は、ユーザーが @samp{git p4 submit} を呼び出すと作成されます。 @samp{--preserve-user}
オプションを使用すると、Gitコミットの作者(author)に応じて所有権が変更されます。このオプションには、 @samp{p4 protect}
を使用して付与できるp4の管理者権限が必要です。

送信する代わりに変更を保存するには、以下のように @samp{--shelve} と @samp{--update-shelve} を使用します:

@example
$ git p4 submit --shelve
$ git p4 submit --update-shelve 1234 --update-shelve 2345
@end example


@noindent

@heading Unshelve

Unshelvingは、棚上げされたP4チェンジリスト(shelved P4 changelist)を取得し、ブランチ
refs/remotes/p4-unshelved/<changelist> で同等のgit commitを生成します。

git
commitは、現在のoriginリビジョン(デフォルトではHEAD)を基準にして作成されます。親コミットはoriginに基づいて作成され、次にunshelveコミットはそれに基づいて作成されます。

originリビジョンは、 @samp{--origin} オプションで変更できます。

refs/remotes/p4-unshelved のターゲットブランチがすでに存在する場合、古いブランチの名前が変更されます。

@example
$ git p4 sync
$ git p4 unshelve 12345
$ git show p4-unshelved/12345
<submit more changes via p4 to the same files>
$ git p4 unshelve 12345
<refuses to unshelve until git is in sync with p4 again>
@end example


@noindent

@chapheading OPTIONS

@noindent

@heading General options

cloneを除くすべてのコマンドは、これらのオプションを受け入れます。

@table @asis

@item  @samp{--git-dir <dir>} 
@samp{GIT_DIR} 環境変数を設定します。 git(1) 参照。

@item  @samp{-v} 
@itemx  @samp{--verbose} 
より多くの進捗情報を提供します。
@end table

@noindent

@heading Sync options

これらのオプションは、最初の「クローン」(clone)操作と後続の「同期」(sync)操作で使用できます。

@table @asis

@item  @samp{--branch <ref>} 
変更を @samp{refs/remotes/p4/master} ではなく <ref> にインポートします。 <ref>が @samp{refs/}
で始まる場合は、そのまま使用されます。それ以外の場合、 @samp{p4/} で始まらない場合は、その接頭辞が追加されます。

デフォルトでは、 @samp{refs/} で始まらない<ref>は、リモート追跡ブランチの名前として扱われます(@samp{refs/remotes/}
の下)。この動作は、 @samp{--import-local} オプションを使用して変更できます。

<ref> のデフォルトは "master" です。

この例では、新しい remote "p4/proj2" を既存のGitリポジトリにインポートします:

@example
    $ git init
    $ git p4 sync --branch=refs/remotes/p4/proj2 //depot/proj2
@end example


@item  @samp{--detect-branches} 
ブランチ検出アルゴリズムを使用して、p4の新しいパスを見つけます。 これは、以下の「BRANCH DETECTION」で解説してあります。

@item  @samp{--changesfile <file>} 
<file> にリストされているp4変更番号(p4 change numbers)を1行に1つずつ正確にインポートします。 通常、 @samp{git p4}
は、現在のp4リポジトリの状態を検査し、インポートする必要のある変更を検出します。

@item  @samp{--silent} 
進捗情報を出力しません。

@item  @samp{--detect-labels} 
デポパス(depot
paths)に関連付けられているラベルをp4に問い合わせ、Gitにタグとして追加します。新しいチェンジリストに関連付けられたラベルのみをインポートするため、有用性は限られています。非推奨です。

@item  @samp{--import-labels} 
p4からGitにラベルをインポートします。

@item  @samp{--import-local} 
デフォルトでは、p4ブランチは @samp{refs/remotes/p4/} に保存され、 git-branch(1)
およびその他のコマンドによってリモート追跡ブランチとして扱われます。 このオプションは、代わりにp4ブランチを @samp{refs/heads/p4/}
に配置します。このオプション使用後、今後の同期操作では、 @samp{refs/heads} でp4ブランチを見つけることができるように、
@samp{--import-local} も指定する必要があることに注意してください。

@item  @samp{--max-changes <n>} 
指定されたリビジョン指定子(revision specifier)に含まれる変更の全範囲ではなく、最大で <n>
個の変更をインポートします。通常の使用法は、リビジョン指定子として @samp{@@all} を使用しますが、 @samp{--max-changes 1000}
を使用して、リビジョン履歴全体ではなく、最後の1000リビジョンのみをインポートします。

@item  @samp{--changes-block-size <n>} 
@samp{@@all} などのリビジョン指定子を特定の変更番号のリストに変換するときに使用する内部ブロックサイズ。変換の変更の完全なリストを見つけるために @samp{p4
changes} への単一の呼び出しを使用する代わりに、 @samp{p4 changes -m}
への一連の呼び出しがあり、それぞれが指定のサイズの変更の1ブロックを要求します。デフォルトのブロックサイズは500で、通常はこれが適切です。

@item  @samp{--keep-path} 
デフォルトでは、p4デポパスからGitへのファイル名のマッピングには、デポパス全体の削除が含まれます。このオプションを使用すると、完全なp4デポパスがGitに保持されます。
たとえば、パス @samp{//depot/main/foo/bar.c} は、 @samp{//depot/main/} からインポートすると、 @samp{foo/bar.c}
になります。 @samp{--keep-path`を使用すると、Gitパスは代わりに `depot/main/foo/bar.c} になります。

@item  @samp{--use-client-spec} 
クライアント仕様(client spec)を使用して、p4でinterestingファイルのリストを見つけます。以下の「CLIENT
SPEC」セクションを参照してください。

@item  @samp{-/ <path>} 
クローン作成または同期時に、選択したデポパスを除外します。
@end table

@noindent

@heading Clone options

これらのオプションは、上記の「sync」オプションとともに、最初の「clone」で使用できます。

@table @asis

@item  @samp{--destination <directory>} 
Gitリポジトリを作成する場所。 指定しない場合、p4デポパス(p4 depot
path)の最後のコンポーネントを使用して新しいディレクトリを作成します。

@item  @samp{--bare} 
ベアクローン(bare clone)を実行します。 git-clone(1) を参照してください。
@end table

@noindent

@heading Submit options

これらのオプションを使用して、「git p4 submit」の動作を変更できます。

@table @asis

@item  @samp{--origin <commit>} 
p4に送信するコミットが識別される上流の場所。デフォルトでは、これは @samp{HEAD} から到達可能な最新のp4コミットです。

@item  @samp{-M} 
名前の変更(renames)を検出します。 git-diff(1)
を参照してください。名前の変更は、p4ででは明示的な「移動」操作を使用して表されます。コピーを検出するための対応するオプションはありませんが、移動とコピーの両方に変数があります。

@item  @samp{--preserve-user} 
p4に送信する前に、p4の変更を再作成(re-author)してください。このオプションには、p4管理者権限が必要です。

@item  @samp{--export-labels} 
Gitからタグをp4ラベルとしてエクスポートします。Gitで見つかったタグは、perforce 作業ディレクトリに適用されます。

@item  @samp{-n} 
@itemx  @samp{--dry-run} 
どのコミットがp4に送信されるかだけを表示します。Gitまたはp4の状態を変更しないでください。

@item  @samp{--prepare-p4-only} 
通常の送信操作と同様に、p4ワークスペースにコミットを適用し、p4でファイルを開いたり、追加したり、削除したりします。
最後の「p4送信」を発行しません。代わりに、手動で送信する方法または元に戻す方法に関するメッセージを表示します。このオプションは、最初の(最も古い)コミット後に常に停止(stop)します。Gitタグはp4にエクスポートされません。

@item  @samp{--shelve} 
送信する代わりに、一連の棚上げされたチェンジリスト(shelved
changelists)を作成します。各シェルフ(shelve)を作成した後、関連するファイルは元に戻され(revert)/削除(delete)されます。保留中のコミットが複数ある場合は、複数のシェルフが作成されます。

@item  @samp{--update-shelve CHANGELIST} 
このコミットで既存の棚上げされたチェンジリスト(shelved changelist)を更新します。 @samp{--shelve}
の指定を含んでいます。複数の棚上げされたチェンジリストに対して繰り返します。

@item  @samp{--conflict=(ask|skip|quit)} 
p4にコミットを適用すると、競合が発生する可能性があります。
これが発生した場合、デフォルトの動作("ask")は、このコミットをスキップして続行するか、終了するかを尋ねる動作です。このオプションを使用すると、プロンプトをバイパスして、競合するコミットを自動的にスキップしたり、プロンプトを表示せずにコミットの適用を中止(quit)したりできます。

@item  @samp{--branch <branch>} 
送信後、デフォルトの p4/master の代わりに、この名前付きブランチを同期します。詳細については、上記の「Sync
options」セクションを参照してください。

@item  @samp{--commit <sha1>|<sha1..sha1>} 
現在のGitブランチにある変更の完全なリストではなく、指定されたコミットまたはコミットの範囲のみを送信します。

@item  @samp{--disable-rebase} 
すべてのコミットが正常に送信された後の自動リベースを無効にします。 git-p4.disableRebase で設定することもできます。

@item  @samp{--disable-p4sync} 
コミットが送信された後、Perforceからのp4/masterの自動同期を無効にします。 @samp{--disable-rebase}
の指定を含んでいます。git-p4.disableP4Sync で設定することもできます。 可能であれば、 origin/master
との同期は引き続き続行されます。
@end table

@noindent

@chapheading Hooks for submit

@noindent

@heading p4-pre-submit

@samp{p4-pre-submit}
フックが存在し、実行可能である場合に実行されます。フックはパラメータを受け取らず、標準入力からも何も受け取りません。このスクリプトをゼロ以外のステータスで終了すると、
@samp{git-p4 submit} が起動しなくなります。 @samp{--no-verify} コマンドラインオプションでバイパスできます。

使用シナリオの１つは、フックで単体テストを実行することです。

@noindent

@heading p4-prepare-changelist

@samp{p4-prepare-changelist} フックは、デフォルトのチェンジリストメッセージを準備した直後、エディタが起動する前に実行されます。
これは、変更リストのテキストを含むファイルの名前という1つのパラメーターを取ります。スクリプトをゼロ以外のステータスで終了すると、プロセスが中止(abort)されます。

フックの目的は、メッセージファイルをその場で編集することであり、 @samp{--no-verify}
オプションによって抑制されることはありません。このフックは、 @samp{--prepare-p4-only} が設定されている場合でも呼び出されます。

@noindent

@heading p4-changelist

@samp{p4-changelist} フックは、ユーザーがチェンジリストメッセージを編集した後に実行されます。 @samp{--no-verify}
オプションでバイパスできます。提案されたチェンジリストテキストを保持するファイルの名前という単一のパラメータを取ります。ゼロ以外のステータスで終了すると、コマンドは中止(abort)されます。

フックはチェンジリストファイルの編集を許可されており、テキストをプロジェクトの標準形式に正規化するために使用できます。
また、メッセージファイルを検査した後に送信を拒否するために使用することもできます。

@noindent

@heading p4-post-changelist

@samp{p4-post-changelist} フックは、submitがP4で正常に発生した後に呼び出されます。
これはパラメーターを必要とせず、主に通知を目的としており、git p4 submitアクションの結果に影響を与えることはできません。

@noindent

@heading Rebase options

これらのオプションを使用して、「git p4 rebase」の動作を変更できます。

@table @asis

@item  @samp{--import-labels} 
p4ラベルのインポート。
@end table

@noindent

@heading Unshelve options

@table @asis

@item  @samp{--origin} 
棚上げされたP4チェンジリスト(shelved P4 changelist)が比較される git refspec を設定します。デフォルトは
p4/master です。
@end table

@noindent

@chapheading DEPOT PATH SYNTAX

@samp{git p4 sync} と @samp{gitp4 clone}
へのp4デポパス引数は、1つ以上のスペースで区切られたp4デポパスにすることができ、最後にオプションのp4リビジョン指定子があります:

@table @asis

@item  "//depot/my/project" 
そのツリーの下の「#head」変更内のすべてのファイルを含む1つのコミットをインポートします。

@item  "//depot/my/project@@all" 
そのデポパスの履歴の変更ごとに1つのコミットをインポートします。

@item  "//depot/my/project@@1,6" 
1から6の変更のみをインポートする。

@item  "//depot/proj1@@all //depot/proj2@@all" 
両方の名前付きのデポパスからのすべての変更を単一のリポジトリにインポートします。これらのディレクトリの下にあるファイルのみが含まれます。
Gitには、「proj1」と「proj2」ごとのサブディレクトリはありません。複数のデポパスを指定する場合は、@samp{--destination}
オプションを使用する必要があります。 リビジョン指定子は、各デポパスで同じように指定する必要があります。
同じ名前のファイルがデポパスにある場合、ファイルの最新バージョンのパスがGitに表示されるパスになります。
@end table

p4リビジョン指定子の完全な構文については、「p4 help revisions」を参照してください。

@noindent

@chapheading CLIENT SPEC

p4クライアントの仕様は、 @samp{p4 client}
コマンドで維持され、他のフィールドの中でも、デポがクライアントリポジトリにマップされる方法を指定するビューが含まれています。 @samp{clone} と
@samp{sync`コマンドは、 `--use-client-spec} オプションが指定されているか、または useClientSpec
変数がtrueの場合に、クライアント仕様(client spec)を参照できます。 @samp{git p4 clone}
の後、useClientSpec変数がリポジトリ構成ファイルに自動的に設定されます。これにより、将来の @samp{git p4 submit}
コマンドが正しく機能するようになります。 submitコマンドは変数のみを調べ、コマンドラインオプションはありません。

p4ビューの完全な構文は、「p4 help views」に記載されています。 @samp{git p4} は、ビュー構文のサブセットのみを認識します。
複数行のマッピング、「+」のオーバーレイ、「-」の除外、空白の前後の二重引用符(@samp{"})を理解します。可能なワイルドカードのうち、 @samp{git p4} は
@samp{...} のみを処理し、パスの最後にある場合にのみ処理します。 @samp{git p4} は、未実装のワイルドカードに遭遇すると文句を言います。

バグ: オーバーラップマッピングの実装にはバグがあります。複数のデポパスがオーバーレイを介してリポジトリ内の同じ場所にマップされる場合、 @samp{git
p4} は間違ったパスを選択する可能性があります。 これは、 @samp{git p4} 専用のクライアント仕様を使用せずに解決するのは困難です。

クライアントの名前は、複数の方法で @samp{git p4} に指定できます。 変数 @samp{git-p4.client} が存在する場合は、それが優先されます。
それ以外の場合は、クライアントを決定する通常のp4メカニズムが使用されます。それは、環境変数 @samp{P4CLIENT} または`P4CONFIG`
によって参照されるファイル または ローカルホスト名 です。

@noindent

@chapheading BRANCH DETECTION

P4には、Gitと同じブランチの概念はありません。代わりに、p4はそのコンテンツをディレクトリツリーとして編成します。慣例により、さまざまな論理ブランチがツリー内のさまざまな場所にあります。
@samp{p4 branch} コマンドは、ツリー内の異なる領域間のマッピングを維持し、関連するコンテンツを示すために使用されます。 @samp{git p4}
は、これらのマッピングを使用してブランチの関係を判別できます。

対象のすべてのブランチが単一のデポパスのサブディレクトリとして存在するリポジトリがある場合、クローン作成または同期時に
@samp{--detect-branches} を使用して、 @samp{git p4}
がp4内のサブディレクトリを自動的に検出し、これらをGitのブランチとして生成できます。

たとえば、P4リポジトリ構造が以下の場合:

@example
//depot/main/...
//depot/branch1/...
@end example


そして、「p4 branch -o branch1」は、以下のようなビューライン(View line)を表示します:

@example
//depot/main/... //depot/branch1/...
@end example


それから、以下の @emph{git p4 clone} コマンドを実行します:

@example
git p4 clone --detect-branches //depot@@all
@end example


@samp{refs/remotes/p4/} には @samp{//depot/main} 用の @samp{master} というブランチと @samp{//depot/branch1}
用の @samp{depot/branch1} というブランチが別々に作成されることになります。

ただし、ブランチのように使用できるようにするために、p4でブランチを作成する必要はありません。ブランチ関係を自動的に推測することは難しいため、Git構成設定
@samp{git-p4.branchList} を使用して、ブランチ関係を明示的に識別することができます。これは、単純なp4ブランチ仕様のような
"source:destination" ペアのリストであり、 "source" と "destination"
はp4リポジトリ内のパス要素です。上記の例は、p4ブランチの存在に依存していました。 p4ブランチがない場合、同じ結果が以下の場合に発生します:

@example
git init depot
cd depot
git config git-p4.branchList main:branch1
git p4 clone --detect-branches //depot@@all .
@end example


@noindent

@chapheading PERFORMANCE

@samp{git p4} で使用される高速インポートメカニズムは、 @samp{git p4 sync}
の呼び出しごとに1つのパックファイルを作成します。通常、Gitガベージ圧縮(git-gc(1))は、これらをより少ないパックファイルに自動的に圧縮しますが、
@samp{git repack -adf} を明示的に呼び出すと、パフォーマンスが向上する場合があります。

@noindent

@chapheading CONFIGURATION VARIABLES

以下の構成設定を使用して、 @samp{git p4} の振る舞いを変更できます。全てを見たい時は「git-p4」セクションを参照してください。

@noindent

@heading General variables

@table @asis

@item  git-p4.user 
すべてのp4コマンドのオプションとして、 @samp{-u <user>} で指定されるユーザー。代わりに環境変数 @samp{P4USER} を使用することができます。

@item  git-p4.password 
すべてのp4コマンドのオプションとして、 @samp{-P <password>} で指定されるパスワード。代わりに環境変数 @samp{P4PASS}
を使用することができます。

@item  git-p4.port 
すべてのp4コマンドのオプションとして @samp{-p <port>} で指定されるポート。代わりに、環境変数 @samp{P4PORT} を使用することができます。

@item  git-p4.host 
全てのp4コマンドのオプションとして @samp{-h <host>} で指定されるホスト。代わりに環境変数 @samp{P4HOST} を使用することができます。

@item  git-p4.client 
全てのp4コマンドのオプションとして @samp{-c <client>} で指定されるクライアント。クライアントスペック(client
spec)を含んでいます。

@item  git-p4.retries 
ネットワークがタイムアウトした場合にp4コマンド(特に @samp{p4 sync})を再試行する回数を指定します。デフォルト値は 3
です。再試行を無効にする場合、またはp4バージョンが再試行をサポートしていない場合(2012.2より前)は、値を0に設定します。
@end table

@noindent

@heading Clone and sync variables

@table @asis

@item  git-p4.syncFromOrigin 
他のGitリポジトリからコミットをインポートする方がp4からインポートするよりもはるかに高速であるため、Gitのリモートで最初にp4の変更を見つけるメカニズムが存在します。
@samp{refs/remote/origin/p4} の下にブランチが存在する場合、それらはp4から同期するときにフェッチされて使用されます。 この変数を
@samp{false} に設定して、この動作を無効にすることができます。

@item  git-p4.branchUser 
ブランチ検出のフェーズの一つでは、p4ブランチを調べて、インポートする新しいブランチを見つけます。デフォルトでは、すべてのブランチが検査されます。
このオプションは、検索を、変数で指定した単一のユーザーが所有するものだけに制限します。

@item  git-p4.branchList 
ブランチ検出が有効になっている場合にインポートされるブランチのリスト。各エントリは、コロン(@samp{:})で区切られたブランチ名のペアである必要があります。以下の例では、branchAとbranchBの両方がmainから作成されたことを宣言しています:

@example
git config       git-p4.branchList main:branchA
git config --add git-p4.branchList main:branchB
@end example


@item  git-p4.ignoredP4Labels 
無視するp4ラベルのリスト。これは、インポートできないラベルが検出されると自動的に作成されます。

@item  git-p4.importLabels 
@samp{--import-labels} に従って、p4ラベルをgitにインポートします。

@item  git-p4.labelImportRegexp 
この正規表現にマッチするp4ラベルのみがインポートされます。 デフォルト値は @samp{[a-zA-Z0-9_\-.]+$} です。

@item  git-p4.useClientSpec 
対象のp4デポパスを識別するためにp4クライアント仕様(p4 client spec)を使用する必要があることを指定します。これは、オプション
@samp{--use-client-spec} を指定するのと同じです。上記の「CLIENT SPEC」セクションを参照してください。
この変数はブール値であり、p4クライアントの名前ではありません。

@item  git-p4.pathEncoding 
Perforceは、元のOSによって指定されたパスのエンコーディングを保持します。 Gitは、UTF-8としてエンコードされたパスを想定しています。
この設定を使用して、PERFORCEがパスに使用したエンコーディングをgit-p4に通知します。
このエンコーディングは、パスのエンコーディングをUTF-8に変換するために使用されます。例として、Windows上のPERFORCEは、パス名をエンコードするために
"cp1252" を使用することがよくあります。

@item  git-p4.largeFileSystem 
大きな(バイナリ)ファイルに使用されるシステムを指定します。ラージファイルシステム(large file systems)は @samp{git p4
submit} コマンドをサポートしていないことに注意してください。 現在、Git LFSのみが実装されています(詳細については、
@uref{https://git-lfs.github.com/,https://git-lfs.github.com/} を参照してください)。このオプションを使用して以下のように構成するには、Git
LFSコマンドライン拡張機能をダウンロードしてインストールします:

@example
git config       git-p4.largeFileSystem GitLFS
@end example


@item  git-p4.largeFileExtensions 
リスト内のファイル拡張子に一致するすべてのファイルは、ラージファイルシステムによって処理されます。 拡張子の前に @samp{.} を付けないでください。

@item  git-p4.largeFileThreshold 
非圧縮サイズがしきい値を超えるすべてのファイルは、ラージファイルシステム(large file
system)によって処理されます。デフォルトでは、しきい値はバイト単位で定義されています。 単位を変更するには、接尾辞k、m、gを追加します。

@item  git-p4.largeFileCompressedThreshold 
圧縮サイズがしきい値を超えるすべてのファイルは、ラージファイルシステム(large file
system)によって処理されます。このオプションを使用すると、クローン/同期プロセスの速度が低下する可能性があります。デフォルトでは、しきい値はバイト単位で定義されています。
単位を変更するには、接尾辞k、m、gを追加します。

@item  git-p4.largeFilePush 
大きなファイルをサーバーに自動的にプッシュするかどうかを定義するブール変数。

@item  git-p4.keepEmptyCommits 
このブールオプションがtrueに設定されている場合、除外されたファイルのみを含むチェンジリストは空のコミットとしてインポートされます。

@item  git-p4.mapUser 
P4 user をGitのnameとemail addressにマッピングします。以下の形式の文字列を使用して、マッピングを作成します:

@example
git config --add git-p4.mapUser "p4user = First Last <mail@@address.com>"
@end example


マッピングは、P4からのユーザー情報を上書きします。複数のP4ユーザーのマッピングを定義できます。
@end table

@noindent

@heading Submit variables

@table @asis

@item  git-p4.detectRenames 
名前の変更(renames)を検出します。git-diff(1) を参照してください。 これは、true または、false または
@samp{git diff -M} で期待されるスコアになります。

@item  git-p4.detectCopies 
コピーを検出します。 git-diff(1) を参照してください。 これは、true または false または @samp{git diff
-C} で期待されるスコアになります。

@item  git-p4.detectCopiesHarder 
コピーをより厳しく検出します。 git-diff(1) を参照してください。 ブール値です。

@item  git-p4.preserveUser 
送信時に、誰が @samp{git p4 submit}
を呼び出したかに関係なく、Git作者(author)を反映するように変更を再作成(re-author)します。

@item  git-p4.allowMissingP4Users 
@samp{preserveUser} がtrueの場合、 @samp{git p4}
は通常、p4ユーザーマップで作者(author)が見つからない場合に停止(die)します。この設定は、それを気にせずに変更を送信します。

@item  git-p4.skipSubmitEdit 
送信プロセスは、各p4変更が送信される前にエディタを呼び出します。ただし、この設定がtrueの場合、編集手順はスキップされます。

@item  git-p4.skipSubmitEditCheck 
p4変更メッセージを編集した後、 @samp{git p4}
は、ファイルの変更時刻を調べて、説明が実際に変更されたことを確認します。このオプションは、その変更時刻を調べるテストを無効にします。

@item  git-p4.allowSubmit 
デフォルトでは、任意のブランチを @samp{git p4 submit} 操作のソースとして使用できます。
この構成変数が設定されている場合、指定されたブランチのみを送信ソースとして使用できます。ブランチ名は短い名前(@samp{refs/heads/}
は不可)である必要があり、スペースを入れずにコンマ(@samp{,})で区切る必要があります。

@item  git-p4.skipUserNameCheck 
@samp{git p4 submit} を実行しているユーザーがp4ユーザーマップに存在しない場合、 @samp{git p4}
は終了(exit)します。このオプションは、関係なく送信を強制するために使用できます。

@item  git-p4.attemptRCSCleanup 
有効にすると、 @samp{git p4submit} はRCSキーワード($Header$
など)のクリーンアップを試みます。そうしないと、マージの競合が発生し、送信が続行できなくなります。
このオプションは、現時点では実験的なものと見なす必要があります。

@item  git-p4.exportLabels 
@samp{--export-labels} に従って、Gitタグをp4ラベルにエクスポートします。

@item  git-p4.labelExportRegexp 
この正規表現にマッチするp4ラベルのみがエクスポートされます。 デフォルト値は @samp{[a-zA-Z0-9_\-.]+$} です。

@item  git-p4.conflict 
@samp{--conflict} に従って、p4との競合が見つかった場合の送信動作を指定します。デフォルトの動作は「ask」です。

@item  git-p4.disableRebase 
送信後に p4/master に対してツリーをリベースしないでください。

@item  git-p4.disableP4Sync 
送信後に p4/master を Perforce と同期しないでください。 git-p4.disableRebase の指定を含んでいます。
@end table

@noindent

@chapheading IMPLEMENTATION DETAILS

@itemize 

@item
p4からのチェンジセットは、Git fast-import を使用してインポートされます。

@item
クローン作成または同期には、p4クライアントは必要ありません。ファイルの内容は @samp{p4 print} を使用して収集されます。

@item
送信するには、Gitリポジトリと同じ場所にないp4クライアントが必要です。パッチは、このp4クライアントに一度に1つずつ適用され、そこから送信されます。

@item
@samp{git p4} によってインポートされた各コミットには、ログメッセージの最後にp4デポの場所と変更番号を示す行があります。 この行は、後の @samp{git
p4 sync} 操作で、どのp4の変更が新しいかを知るために使用されます。
@end itemize

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-pack-objects,,,Top
@chapheading Name

git-pack-objects — オブジェクトのパックされたアーカイブを作成する

@noindent

@chapheading Synopsis

@display
git pack-objects [-q | --progress | --all-progress] [--all-progress-implied]
        [--no-reuse-delta] [--delta-base-offset] [--non-empty]
        [--local] [--incremental] [--window=<n>] [--depth=<n>]
        [--revs [--unpacked | --all]] [--keep-pack=<pack-name>]
        [--stdout [--filter=<filter-spec>] | base-name]
        [--shallow] [--keep-true-parents] [--[no-]sparse] < object-list
@end display


@noindent

@chapheading DESCRIPTION

標準入力からオブジェクトのリストを読み取り、指定されたベース名を持つ1つ以上のパックされたアーカイブをディスクに書き込むか、パックされたアーカイブを標準出力に書き出します。

パックされたアーカイブは、2つのリポジトリ間でオブジェクトのセットを転送するための効率的な方法であり、アクセス効率の高いアーカイブ形式でもあります。パックされたアーカイブでは、オブジェクトはその全体を圧縮したものとして、または他のオブジェクトとの差分として保存されます。後者はしばしばデルタ(delta)と呼ばれます。

パックされたアーカイブ形式(.pack)は、自己完結型であるように設計されているため、それ以上の情報がなくても解凍できます。したがって、デルタが依存する各オブジェクトがパック内に存在する必要があります。

パックインデックスファイル(.idx)が、パック内のオブジェクトへの高速でランダムなアクセスのために生成されます。インデックスファイル(.idx)とパックされたアーカイブ(.pack)の両方を
$GIT_OBJECT_DIRECTORY の pack/ サブディレクトリ（または $GIT_ALTERNATE_OBJECT_DIRECTORIES
の任意のディレクトリ)に配置すると、Gitはパックアーカイブから読み取ることができます。

@emph{git unpack-objects}
コマンドは、パックされたアーカイブを読み取り、パックに含まれるオブジェクトを「1ファイル1オブジェクト」形式に展開できます。これは通常、ピアによる効率的なネットワーク転送のためにパックがオンザフライで作成されるときに、smart-pullコマンドによって実行されます。

@noindent

@chapheading OPTIONS

@table @asis

@item  base-name 
ファイルのペア(.packと.idx)に書き込み、そして、 <base-name>
を使用して、作成されたファイルの名前を決定します。このオプションを使用すると、ペアの2つのファイルが
<base-name>-<SHA-1>.@{pack,idx@} ファイルに書き込まれます。
<SHA-1>は、パックの内容に基づくハッシュであり、コマンドの標準出力にも書き込まれます。

@item  @samp{--stdout} 
パックの内容(.packファイルに書き込まれる内容)を標準出力に書き込みます。

@item  @samp{--revs} 
個々のオブジェクト名ではなく、標準入力からリビジョン引数を読み取ります。リビジョン引数は、 @samp{git rev-list} と同じ方法で処理され、
@samp{--objects}
フラグはその「commit」引数を使用して、出力するオブジェクトのリストを作成します。結果のリストのオブジェクトはパックされます。リビジョンに加えて、
@samp{--not} または @samp{--shallow <SHA-1>} 行も受け入れられます。

@item  @samp{--unpacked} 
これは @samp{--revs}
の指定を含んでいます。標準入力から読み取られたリビジョン引数のリストを処理するときは、オブジェクトのパッキングを未だパックされていないオブジェクトに制限してください。

@item  @samp{--all} 
これは @samp{--revs} の指定を含んでいます。標準入力から読み取られたリビジョン引数のリストに加えて、 @samp{refs/}
の下のすべてのrefが含まれるように指定してあるかのように振る舞います。

@item  @samp{--include-tag} 
参照するオブジェクトが結果のパックファイルに含まれている場合は、要求されていない注釈付きタグを含めます。これは、ネイティブGitクライアントに新しいタグを送信するのに役立ちます。

@item  @samp{--stdin-packs} 
オブジェクト名やリビジョン引数ではなく、標準入力からパックファイル(例: @samp{pack-1234abcd.pack})のベース名を読み取ります。
結果のパックには、除外されたパック( @samp{^`で始まる)にリストされているオブジェクトを除く、含まれているパック(}^`
で始まらないもの)にリストされているすべてのオブジェクトが含まれます。

互換性のある @samp{--unpacked} を除いて、` --revs` または、 @samp{--revs} を含むオプション(` --all`
など)とは互換性がありません。

@item  @samp{--window=<n>} 
@itemx  @samp{--depth=<n>} 
これらの2つのオプションは、パックに含まれるオブジェクトをデルタ圧縮を使用して格納する方法に影響します。オブジェクトは最初にタイプとサイズ、および、オプションで名前で、内部的にソートされ、
@samp{--window} 内の他のオブジェクトと比較されて、デルタ圧縮を使用することでスペースが節約されるかどうかが確認されます。  @samp{--depth}
は、最大デルタ深度を制限します。
深くしすぎると、必要なオブジェクトに到達するために差分データを何度も適用する必要があるため、パック解凍側のパフォーマンスに影響します。

@samp{--window} のデフォルト値は10で、 @samp{--depth} のデフォルト値は50です。 @samp{--depth} の最大深度は4095です。

@item  @samp{--window-memory=<n>} 
このオプションは、 @samp{--window} に加えて追加の制限を提供します。ウィンドウサイズは、メモリ内で @samp{<n>}
バイトを超えないように動的に縮小されます。これは、大きなオブジェクトと小さなオブジェクトが混在するリポジトリで、大きなウィンドウでメモリを使い果たさないようにしつつ、小さなオブジェクトには大きなウィンドウを活用できるようにするために有効です。サイズには、「k」または「m」または「g」の接尾辞を付けることができます。
@samp{--window-memory=0} は、メモリ使用量を無制限にします。デフォルトは、 @samp{pack.windowMemory}
構成変数から取得されます。

@item  @samp{--max-pack-size=<n>} 
めったにないシナリオですが、ファイルシステム上に特定のサイズより大きいファイルを作成できない場合があります。このオプションを使用して、出力パックファイルをそれぞれ指定されたサイズ以下の複数の独立したパックファイルに分割するようにコマンドに指示できます。
サイズには、「k」または「m」または「g」の接尾辞を付けることができます。許可される最小サイズは1MiBに制限されています。 構成変数
@samp{pack.packSizeLimit}
が設定されていない限り、デフォルトは無制限です。このオプションを使用すると、リポジトリが大きくなり、速度が低下する可能性があることに注意してください。
@samp{pack.packSizeLimit} の説明を参照してください。

@item  @samp{--honor-pack-keep} 
このフラグにより、.keepファイルを含むローカルパックにすでに含まれているオブジェクトは、他の方法でパックされていたとしても無視されます。

@item  @samp{--keep-pack=<pack-name>} 
このフラグにより、指定のパックにすでに含まれているオブジェクトは、他の方法でパックされていたとしても無視されます。 @samp{<pack-name>}
は、先頭にディレクトリ名がないパックファイル名です(例:
@samp{pack-123.pack})。このオプションは、複数のパックを保持するために複数回指定できます。

@item  @samp{--incremental} 
このフラグにより、すでにパックされているオブジェクトは、他の方法でパックされていたとしても無視されます。

@item  @samp{--local} 
このフラグにより、代替オブジェクトストアから借用されたオブジェクトは、他の方法でパックされていたとしても無視されます。

@item  @samp{--non-empty} 
少なくとも1つのオブジェクトが含まれる場合にのみパックされたアーカイブを作成します。

@item  @samp{--progress} 
@samp{-q}
が指定されていない場合、進行状況は、端末に接続されている場合、デフォルトで標準エラーストリームに報告されます。このフラグは、標準エラーストリームが端末に送信されていない場合でも、進行状況を強制します。

@item  @samp{--all-progress} 
@samp{--stdout}
を指定すると、進行状況レポートはオブジェクトのカウントおよび圧縮フェーズでは表示されますが、書き込みフェーズでは禁止されます。その理由は、場合によっては、出力ストリームが別のコマンドに直接リンクされており、受信パックデータを処理するときに独自の進行状況を表示したい場合があるためです。このフラグは
@samp{--progress} に似ていますが、 @samp{--stdout} が使用されている場合でも、書き込みフェーズの進行状況レポートを強制する点が異なります。

@item  @samp{--all-progress-implied} 
これは、進行状況の表示がアクティブになるたびに @samp{--all-progress} の指定を含ませるために使用されます。 @samp{--all-progress}
とは異なり、このフラグは実際には進行状況の表示を強制しません。

@item  @samp{-q} 
このフラグにより、コマンドは標準エラーストリームで進行状況を報告しなくなります。

@item  @samp{--no-reuse-delta} 
既存のパックがあるリポジトリに、パックされたアーカイブを作成する場合、コマンドは既存のデルタを再利用します。これにより、パックがわずかに最適化されない場合があります。このフラグは、既存のデルタを再利用せずに最初から計算するようにコマンドに指示します。

@item  @samp{--no-reuse-object} 
このフラグは、削除されていないオブジェクトを含め、既存のオブジェクトデータをまったく再利用しないようにコマンドに指示し、すべてを強制的に再圧縮します。
これは、 @samp{--no-reuse-delta}
の指定を含みます。パックされたデータに異なる圧縮レベルを大規模に適用する必要がある曖昧模糊なケースでのみ役立ちます。

@item  @samp{--compression=<n>} 
生成するパック内の新しく圧縮するデータの圧縮レベルを指定します。指定しない場合、パックの圧縮レベルは pack.compression
、core.compression の順で取得します。どちらも設定されていない場合は、zlibのデフォルトである -1
になります。ソースに関係なくすべてのデータに均一な圧縮レベルを強制する場合は、 @samp{-no-reuse-object} オプションを追加します。

@item  @samp{--[no-]sparse} 
@samp{--revs}
オプションと組み合わせた場合、「スパース」(sparse)アルゴリズムを切り替えて、パックに含めるオブジェクトを決定します。このアルゴリズムは、新しいオブジェクトを導入するパスに現れるツリーのみをウォークします。これは、小さな変更を送信するためのパックを計算するときに、パフォーマンスに大きなメリットをもたらす可能性があります。ただし、含まれているコミットに特定の種類の直接名前変更(direct
renames)含まれている場合は、パックファイルに追加のオブジェクトが追加される可能性があります。このオプションが含まれていない場合、デフォルトで
@samp{pack.useSparse} の値になります。 @samp{pack.useSparse} の値は、特に指定されていない限りtrueです。

@item  @samp{--thin} 
ネットワーク転送を減らすために、送信者と受信者の間の共通オブジェクトを省略して「薄い」(thin)パックを作成します。このオプションは、
@samp{--stdout} と組み合わせた場合にのみ意味があります。

注意: 薄いパックは、必要なオブジェクトを省略するという理由でパックされたアーカイブ形式に違反するため、Gitは自己完結型にしないと使用できません。
@samp{git index-pack --fix-thin} (git-index-pack(1)
を参照)を使用して、自己完結型のプロパティを復元します。

@item  @samp{--shallow} 
浅いリポジトリ(shallow repository)を持つクライアントに提供されるパックを最適化します。このオプションを @samp{--thin}
と組み合わせると、速度を犠牲にしてパックを小さくすることができます。

@item  @samp{--delta-base-offset} 
パックされたアーカイブは、デルタのベースオブジェクトを20バイトのオブジェクト名またはストリーム内のオフセットのいずれかで表現できますが、Gitの古いバージョンは後者を理解していません。
デフォルトでは、 @samp{git pack-objects}
は互換性を高めるために前者の形式のみを使用します。このオプションを使用すると、コマンドで後者の形式を使用してコンパクトにすることができます。平均デルタチェーンの長さに応じて、このオプションは通常、結果のパックファイルを3〜5パーセント縮小します。

注意: 最新のGitでは、 @samp{git gc} (git-gc(1) 参照)や @samp{git repack}
(git-repack(1)
参照)などの磁器コマンドは、あなたのリポジトリ内のファイルをパックファイルに入れるときに、デフォルトでこのオプションを渡します。バンドルを作成する
@samp{git bundle} (git-bundle(1) 参照)も同様です。

@item  @samp{--threads=<n>} 
最適なデルタマッチングを検索するときに生成するスレッドの数を指定します。これには、pack-objectsをpthreadでコンパイルする必要があります。そうでない場合、このオプションは警告とともに無視されます。これは、マルチプロセッサマシンでのパッキング時間を短縮することを目的としています。ただし、デルタ検索ウィンドウに必要なメモリ量は、スレッド数で乗算されます。
0を指定すると、GitはCPUの数を自動検出し、それに応じてスレッドの数を設定します。

@item  @samp{--index-version=<version>[,<offset>]} 
これは、テストスイートでのみ使用することを目的としています。生成するパックインデックスのバージョンを強制し、指定のオフセット上にあるオブジェクトに64ビットインデックスエントリを強制することができます。

@item  @samp{--keep-true-parents} 
このオプションを使用すると、graftsによって隠されている親はそれでもパックされます。

@item  @samp{--filter=<filter-spec>} 
@samp{--stdout} が必要です。結果のパックファイルから特定のオブジェクト(通常はブロブ)を省略します。 有効な @samp{<filter-spec>}
形式ついては、 git-rev-list(1) を参照してください。

@item  @samp{--no-filter} 
以前の任意の @samp{--filter=} 引数をオフにします。

@item  @samp{--missing=<missing-action>} 
将来の「partial clone」(部分クローン)開発に役立つデバッグオプション。このオプションは、欠落しているオブジェクトの処理方法を指定します。

@emph{--missing=error}
は、欠落しているオブジェクトが検出された場合に、pack-objectsがエラーで停止することを要求します。リポジトリが部分クローン(partial
clone)の場合は、欠落していると言う前に、欠落しているオブジェクトをフェッチしようとします。 @emph{--missing=error}
がデフォルトの操作です。

@emph{--missing=allow-any} は、欠落しているオブジェクトが検出された場合でも、オブジェクトの走査(object
traversal)を続行できます。欠落しているオブジェクトのフェッチは発生しません。欠落しているオブジェクトは、結果から警告無しに黙って省略されます。

@emph{--missing=allow-promisor} は @emph{allow-any}
に似ていますが、オブジェクトの走査は、「予想される」promisorが欠落しているオブジェクトに対してのみ続行できます。欠落しているオブジェクトのフェッチは発生しません。予期しないオブジェクトの欠落により、エラーが発生します。

@item  @samp{--exclude-promisor-objects} 
promisorリモートにあることがわかっているオブジェクトを省略します。
(このオプションは、ローカルで作成されたオブジェクトのみを操作することを目的としているため、再パックするときに、ローカルで作成されたオブジェクト[.promisor
なし]とpromisorリモートのオブジェクト[.promisor あり]の区別を維持します。) これは部分クローン(partial
clone)で使用されます。

@item  @samp{--keep-unreachable} 
@samp{--unpacked=} オプションで指定されたパック内の参照から到達不能なオブジェクトは、 @samp{*.keep}
ファイルでマークされたパック内にない到達可能オブジェクトに加えて、結果のパックに追加されます。 これは @samp{--revs} の指定を含んでいます。

@item  @samp{--pack-loose-unreachable} 
到達不能な緩いオブジェクト(loose objects)をパックします(そしてそれらの緩いオブジェクトを削除します)。 これは @samp{--revs}
の指定を含んでいます。

@item  @samp{--unpack-unreachable} 
到達不能なオブジェクトは緩い(loose)オブジェクト形式のままにしてください。これは @samp{--revs} の指定を含んでいます。

@item  @samp{--delta-islands} 
「islands」に基づいてデルタのマッチを制限します。 以下の DELTA ISLANDS を参照してください。
@end table

@noindent

@chapheading DELTA ISLANDS

可能な場合、 @samp{pack-objects}
は既存のディスク上のデルタを再利用して、その場で新しいデルタを検索する必要がないようにします。これは、フェッチを提供するための重要な最適化です。つまりこれは、サーバーがほとんどのオブジェクトの展開作業を回避し、ディスクから直接バイトを送信できることを意味するためです。この最適化は、受信側が持っていない(そしてまだ送信していない)ベースに対するデルタとしてオブジェクトが保存されている場合は機能しません。その場合、サーバーはデルタを「壊し」、CPUコストの高い新しいデルタを見つける必要があります。したがって、パフォーマンスにとって重要なのは、ディスク上のデルタ関係にあるオブジェクトのセットが、クライアントがフェッチするものと一致することです。

通常のリポジトリでは、これは自動的に機能する傾向があります。オブジェクトのほとんどはブランチとタグから到達可能であり、それがクライアントがフェッチするものです。サーバー上で検出されたデルタは、クライアントが既に持っているモノとこれから持つ予定のオブジェクトの間にある可能性があります。

ただし、一部のリポジトリ設定では、いくつかの関連しているが別個のref先端のグループがあり、クライアントはそれらのグループを個別にフェッチする傾向があります。
たとえば、単一の共有オブジェクトストアでリポジトリの複数の「フォーク」をホストし、クライアントがそれらを @samp{GIT_NAMESPACE}
を介して個別のリポジトリとして、または代替メカニズムを使用して個別のリポジトリとして表示できるようにする場合を考えてみます。素朴な再パックでは、オブジェクトの最適なデルタが、別のフォークでのみ検出されるベースに対してのものであることがわかる場合があります。ただし、クライアントがフェッチするとき、クライアントにはベースオブジェクトがないため、その場で新しいデルタを見つける必要があります。

関連するオブジェクトを指す @samp{refs/heads/} と @samp{refs/tags/}
のほかに多くの参照がある場合(たとえば一部のホスティングプロバイダーで使用される @samp{refs/pull} や @samp{refs/Changes}
)、同様の状況が存在する可能性があります。デフォルトでは、クライアントはヘッドとタグのみをフェッチし、それらの他のグループでのみ見つかったオブジェクトに対するデルタをそのまま送信することはできません。

デルタ島(delta islands)は、refを個別の「島」にグループ化できるようにすることで、この問題を解決します。
Pack-objectsは、どのオブジェクトがどの島から到達可能かを計算し、全く @samp{A} 島に存在しないベースに対してオブジェクト @samp{A}
からデルタを作成することを拒否します。これにより、パックがわずかに大きくなります(デルタ化の機会を逃すため)が、1つの島のフェッチで、島の境界を越えるためにその場でデルタを再計算する必要がないことが保証されます。

デルタ島(delta islands)で再パックする場合、デルタ窓は、構成によって禁止されている候補で詰まる傾向があります。大きな @samp{--window}
で再梱包することが助けになります(コンテンツに対して計算を行う前に、島に基づいて一部のオブジェクトペアを拒否できるため、他の方法ほど長くはかかりません)。

島は、複数回指定できる @samp{pack.island} オプションを介して構成されます。各値は、refnames
に一致する左アンカーの正規表現(left-anchored regular expressions)です。 例えば:

@example
[pack]
island = refs/heads/
island = refs/tags/
@end example


ヘッドとタグを島に配置します(名前は空の文字列です。名前の詳細については、以下を参照してください)。 これらの正規表現に一致しない参照(例:
@samp{refs/pull/123})は、どの島にもありません。 したがって、 @samp{refs/pull/}
からのみ到達可能(ヘッドやタグは不可)のオブジェクトは、 @samp{refs/heads/} のベースとして使用される候補にはなりません。

参照は「名前」に基づいて島にグループ化され、同じ名前を生成する2つの正規表現は同じ島にあると見なされます。名前は、正規表現で間に「-」ダッシュがあるキャプチャグループを連結することにより、正規表現から計算されます(訳注:[0-9]+
の部分)。(キャプチャグループがない場合、上記の例のように、名前は空の文字列になります。) これにより、任意の数の島を作成できます。
ただし、このようなキャプチャグループは最大14個しかサポートされていません。

たとえば、各フォークの参照を @samp{refs/virtual/ID} に格納するとします。ここで、 @samp{ID} は数値識別子です。 次に、以下を構成します:

@example
[pack]
island = refs/virtual/([0-9]+)/heads/
island = refs/virtual/([0-9]+)/tags/
island = refs/virtual/([0-9]+)/(pull)/
@end example


これにより、各フォークのヘッドとタグがそれぞれの島( "1234” などの名前)に配置され、それぞれのプルrefsが独自の "1234-pull"
になります。

注意:
「最後の1つが勝つ」順序を使用して、正規表現ごとに1つの島を選択することに注意してください(これにより、リポジトリ固有の構成がユーザー全体の構成よりも優先されます)。

@noindent

@chapheading CONFIGURATION

さまざまな構成変数がパッキングに影響します。 git-config(1) を参照してください( pack および delta
を検索してください)。

特に、デルタ圧縮は、 @samp{core.bigFileThreshold} 構成変数より大きいオブジェクト、および属性 @samp{delta}
がfalseに設定されているファイルでは使用されません。

@noindent

@chapheading SEE ALSO

git-rev-list(1) git-repack(1) git-prune-packed(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-pack-redundant,,,Top
@chapheading Name

git-pack-redundant — 無駄なパックファイルを探す

@noindent

@chapheading Synopsis

@display
git pack-redundant [ --verbose ] [ --alt-odb ] < --all | .pack filename … >
@end display


@noindent

@chapheading DESCRIPTION

このプログラムは、リポジトリ内のどのパックが無駄であるかを計算します。あなたがリポジトリのルートにいる場合、出力は @samp{xargsrm}
へのパイプに適しています。

@emph{git pack-redundant}
は、標準入力のオブジェクトのリストを受け入れます。無駄でない必要なパックを確認するとき、指定した任意のオブジェクトはすべて無視されます。これにより、到達不能なオブジェクトを含むパックを削除する場合に、以下のコマンドが役立ちます。

git fsck --full --unreachable | cut -d ' ' -f3 | \ git pack-redundant --all
| xargs rm

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--all} 
すべてのパックを処理します。コマンドラインのファイル名はすべて無視されます。

@item  @samp{--alt-odb} 
代替オブジェクトディレクトリのパックに存在するオブジェクトがローカルパックに存在する必要なしとします。

@item  @samp{--verbose} 
いくつかの統計をstderrに出力します。 パフォーマンスの低下はわずかです。
@end table

@noindent

@chapheading SEE ALSO

git-pack-objects(1) git-repack(1)
git-prune-packed(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-pack-refs,,,Top
@chapheading Name

git-pack-refs — 効率的なリポジトリアクセスのためにヘッド(heads)とタグ(tags)をパックします

@noindent

@chapheading Synopsis

@display
git pack-refs [--all] [--no-prune]
@end display


@noindent

@chapheading DESCRIPTION

旧来、ブランチとタグのヒント(まとめて「refs」と呼ばれます)は、refごとに1つのファイルを @samp{$GIT_DIR/refs}
ディレクトリの下のディレクトリ(サブディレクトリ)に保存していました。多くのブランチヒントは頻繁に更新される傾向がありますが、ほとんどのタグと一部のブランチヒントは更新されません。リポジトリに数百または数千のタグがある場合、この
1ファイル毎に1ref形式 はストレージを浪費し、パフォーマンスを低下させます。

このコマンドは、refを単一のファイル @samp{$GIT_DIR/packed-refs}
に保存することにより、ストレージとパフォーマンスの問題を解決するために使用されます。旧来の @samp{$GIT_DIR/refs}
ディレクトリ階層にrefがない場合、このファイルの中から探し、見つかればそれが使用されます。

その後のブランチの更新では、常に @samp{$GIT_DIR/refs} ディレクトリ階層の下に新しいファイルが作成されます。

refが多すぎるリポジトリを処理するための推奨される方法は、refを @samp{--all} で一度パックし、ときどき @samp{git pack-refs}
を実行することです。タグは定義上静止しており、変更されることは期待されていません。ブランチヘッドは最初の @samp{pack-refs --all}
でパックされますが、現在アクティブなブランチヘッドのみはアンパックされ、その後 @samp{pack-refs} ( @samp{--all}
なし)ではアンパックされたままになります。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--all} 
このコマンドはデフォルトでは、すでにパックされているすべてのタグとrefをパックし、他のrefはそのままにします。これは、ブランチが積極的に開発されることが期待されており、そのヒントをパックしてもパフォーマンスが向上しないためです。このオプションを使用すると、ブランチのヒントもパックされます。
歴史的な関心のある多くのブランチがあるリポジトリに役立ちます。

@item  @samp{--no-prune} 
コマンドは通常、それらをパックした後、 @samp{$GIT_DIR/refs} 階層の下の緩いrefを削除します。このオプションは、そうしないように指示します。
@end table

@noindent

@chapheading BUGS

pack-refs メカニズムが導入される前に作成された古い文書では、 "branch <branch> exists" という意味の場合でも
".git/refs/heads/<branch> file exists" などと紹介される場合があります。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-patch-id,,,Top
@chapheading Name

git-patch-id — パッチの一意のIDを計算します

@noindent

@chapheading Synopsis

@display
git patch-id [--stable | --unstable]
@end display


@noindent

@chapheading DESCRIPTION

標準入力からパッチを読み取り、そのパッチIDを計算します。

「パッチID」は、パッチに関連付けられたファイル差分のSHA-1の合計に過ぎず、空白と行番号は無視されます。そのため、「適度に安定」していますが、同時に適度に一意です。つまり、同じ「パッチID」を持つ2つのパッチは、ほぼ同じものであることが保証されています。

つまり、これを使用して、重複している可能性のあるコミットを探すことができます。

@emph{git diff-tree}
出力を処理する場合、パッチの前にコミットのオブジェクト名が付いているという事実を利用して、2つの40バイトの16進文字列を出力します。最初の文字列はパッチIDで、2番目の文字列はコミットIDです。これを使用して、パッチIDからコミットIDへのマッピングを作成できます。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--stable} 
パッチIDとして「安定した」ハッシュの合計を使用します。 このオプションを使用すると:

@itemize 

@item
パッチを構成するファイル差分を並べ替えても、IDには影響しません。特に、 "-O<orderfile>"
の異なる2つの設定で同じ2つのツリーを比較することによって生成された2つのパッチは、同じパッチIDになります。これにより、計算結果をキーとして使用して、
2本のツリー間の変更に関するメタ情報にインデックスを付ける事ができます。

@item
結果として、 "-O<orderfile>" を使用せずに取得されたdiff出力で使用された場合でも、 git 1.9
以前で生成された値、または「unstable」ハッシュ(以下 @samp{--unstable}
を参照)が構成されたときに生成された値とは異なります。これにより、そのような「不安定な」または過去のパッチIDを格納している既存のデータベースが使用できなくなります。

@example
patchid.stable が true に設定されている場合は、こちらがデフォルトになります。
@end example
@end itemize

@item  @samp{--unstable} 
パッチIDとして「不安定な」ハッシュを使用します。このオプションを使用すると、生成される結果は git1.9 以前で生成される patch-id
値と互換性があります。git 1.9
以前で作成されたパッチIDを保存している既存のデータベースを使用しているユーザー(並べ替えられたパッチを処理しないユーザー)は、このオプションを使用することをお勧めします。

@example
※これがデフォルトです。
@end example
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-prune-packed,,,Top
@chapheading Name

git-prune-packed — すでにパックファイルにある余分なオブジェクトを削除します

@noindent

@chapheading Synopsis

@display
git prune-packed [-n|--dry-run] [-q|--quiet]
@end display


@noindent

@chapheading DESCRIPTION

このプログラムは、 パックファイルに現在存在するすべてのオブジェクトを、 @samp{$GIT_OBJECT_DIRECTORY}
で検索し、独立したオブジェクトディレクトリでも検索します。

余分なオブジェクトはすべて削除されます。

パックは、個別に圧縮され、デルタ圧縮が適用され、単一のファイルに格納され、関連付けられたインデックスファイルを持つオブジェクトのコレクションです。

パックは、ミラーシステム、バックアップエンジン、ディスクストレージなどの負荷を軽減するために使用されます。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-n} 
@itemx  @samp{--dry-run} 
実際にオブジェクトを削除するのではなく、削除されるはずのオブジェクトの表示のみを行います。

@item  @samp{-q} 
@itemx  @samp{--quiet} 
進行状況インジケーターを黙らせます。
@end table

@noindent

@chapheading SEE ALSO

git-pack-objects(1) git-repack(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-prune,,,Top
@chapheading Name

git-prune — オブジェクトデータベースで、到達不能なすべてのオブジェクトを剪定(prune)します

@noindent

@chapheading Synopsis

@display
git prune [-n] [-v] [--progress] [--expire <time>] [--] [<head>…]
@end display


@noindent

@chapheading DESCRIPTION

@quotation

@strong{Note}

ほとんどの場合、ユーザーは @emph{git prune} を呼び出す @emph{git gc} を実行する必要があります。
以下の「NOTES」セクションを参照してください。
@end quotation

これは、 @samp{refs/} で使用可能なすべてのrefを使用して @emph{git fsck --unreachable}
を実行し、オプションでコマンドラインで指定されたオブジェクトの追加セットを使用して、オブジェクトデータベースのこれらのヘッドオブジェクトから到達できないすべてのアンパックされたオブジェクトを剪定(prune)します。さらに、「git
prune-packed」を実行することにより、パック内にも同じモノがあるアンパックされたオブジェクトを剪定します。
また、どのrefからも到達できないエントリを .git/shallow から削除(removes)します。

注意: 到達不能なパックされたオブジェクトが残ることに注意してください。これが望ましくない場合は、 git-repack(1)
を参照してください。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-n} 
@itemx  @samp{--dry-run} 
何も削除しません。何が削除される予定かを報告するだけです。

@item  @samp{-v} 
@itemx  @samp{--verbose} 
削除されたすべてのオブジェクトを報告します。

@item  @samp{--progress} 
進捗状況を表示します。

@item  @samp{--expire <time>} 
<time> より古いルーズオブジェクトのみを期限切れにします。

@item  @samp{--} 
これ以降の引数をオプションとして解釈しないでください。

@item  <head>… 
我々の任意の参照から到達可能なオブジェクトに加えて、リストされた <head>s から到達可能なオブジェクトを保持します。
@end table

@noindent

@chapheading EXAMPLES

リポジトリで使用されていないオブジェクト、またはリポジトリから @samp{.git/objects/info/alternates}
を介して借用しているオブジェクトを剪定(prune)するには:

@example
$ git prune $(cd ../another && git rev-parse --all)
@end example


@noindent

@chapheading NOTES

ほとんどの場合、ユーザーは「git prune」を直接呼び出す必要はありませんが、代わりに「git
gc」を呼び出す必要があります。これは、他の多くのハウスキーピングタスクとともに剪定(plune)を処理します。

剪定(prune)の対象と見なされるオブジェクトの説明については、「git fsck」の @samp{--unreachable} オプションを参照してください。

@noindent

@chapheading SEE ALSO

git-fsck(1), git-gc(1), git-reflog(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-pull,,,Top
@chapheading Name

git-pull — Fetch from and integrate with another repository or a local branch

@noindent

@chapheading Synopsis

@display
git pull [<options>] [<repository> [<refspec>…]]
@end display


@noindent

@chapheading DESCRIPTION

Incorporates changes from a remote repository into the current branch.  If
the current branch is behind the remote, then by default it will
fast-forward the current branch to match the remote.  If the current branch
and the remote have diverged, the user needs to specify how to reconcile the
divergent branches with @samp{--rebase} or @samp{--no-rebase} (or the corresponding
configuration option in @samp{pull.rebase}).

More precisely, @samp{git pull} runs @samp{git fetch} with the given parameters and
then depending on configuration options or command line flags, will call
either @samp{git rebase} or @samp{git merge} to reconcile diverging branches.

<repository> should be the name of a remote repository as passed to
git-fetch(1).  <refspec> can name an arbitrary remote ref (for
example, the name of a tag) or even a collection of refs with corresponding
remote-tracking branches (e.g.,
refs/heads/*:refs/remotes/origin/*), but usually it is the
name of a branch in the remote repository.

Default values for <repository> and <branch> are read from the "remote" and
"merge" configuration for the current branch as set by git-branch(1)
@samp{--track}.

Assume the following history exists and the current branch is "@samp{master}":

@example
          A---B---C master on origin
         /
    D---E---F---G master
        ^
        origin/master in your repository
@end example


Then "@samp{git pull}" will fetch and replay the changes from the remote @samp{master}
branch since it diverged from the local @samp{master} (i.e., @samp{E})  until its
current commit (@samp{C}) on top of @samp{master} and record the result in a new
commit along with the names of the two parent commits and a log message from
the user describing the changes.

@example
          A---B---C origin/master
         /         \
    D---E---F---G---H master
@end example


See git-merge(1) for details, including how conflicts are presented
and handled.

In Git 1.7.0 or later, to cancel a conflicting merge, use @samp{git reset
--merge}.  @strong{Warning}: In older versions of Git, running @emph{git pull} with
uncommitted changes is discouraged: while possible, it leaves you in a state
that may be hard to back out of in the case of a conflict.

If any of the remote changes overlap with local uncommitted changes, the
merge will be automatically canceled and the work tree untouched.  It is
generally best to get any local changes in working order before pulling or
stash them away with git-stash(1).

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-q} 
@itemx  @samp{--quiet} 
This is passed to both underlying git-fetch to squelch reporting of during
transfer, and underlying git-merge to squelch output during merging.

@item  @samp{-v} 
@itemx  @samp{--verbose} 
Pass --verbose to git-fetch and git-merge.

@item  @samp{--[no-]recurse-submodules[=yes|on-demand|no]} 
This option controls if new commits of populated submodules should be
fetched, and if the working trees of active submodules should be updated,
too (see git-fetch(1), git-config(1) and
gitmodules(5)).

If the checkout is done via rebase, local submodule commits are rebased as
well.

If the update is done via merge, the submodule conflicts are resolved and
checked out.
@end table

@noindent

@heading Options related to merging

@table @asis

@item  @samp{--commit} 
@itemx  @samp{--no-commit} 
Perform the merge and commit the result. This option can be used to override
--no-commit.
Only useful when merging.

With --no-commit perform the merge and stop just before creating a merge
commit, to give the user a chance to inspect and further tweak the merge
result before committing.

Note that fast-forward updates do not create a merge commit and therefore
there is no way to stop those merges with --no-commit.  Thus, if you want to
ensure your branch is not changed or updated by the merge command, use
--no-ff with --no-commit.

@item  @samp{--edit} 
@itemx  @samp{-e} 
@itemx  @samp{--no-edit} 
Invoke an editor before committing successful mechanical merge to further
edit the auto-generated merge message, so that the user can explain and
justify the merge. The @samp{--no-edit} option can be used to accept the
auto-generated message (this is generally discouraged).

Older scripts may depend on the historical behaviour of not allowing the
user to edit the merge log message. They will see an editor opened when they
run @samp{git merge}. To make it easier to adjust such scripts to the updated
behaviour, the environment variable @samp{GIT_MERGE_AUTOEDIT} can be set to @samp{no}
at the beginning of them.

@item  @samp{--cleanup=<mode>} 
This option determines how the merge message will be cleaned up before
committing. See git-commit(1) for more details. In addition, if the
@emph{<mode>} is given a value of @samp{scissors}, scissors will be appended to
@samp{MERGE_MSG} before being passed on to the commit machinery in the case of a
merge conflict.

@item  @samp{--ff-only} 
Only update to the new history if there is no divergent local history.  This
is the default when no method for reconciling divergent histories is
provided (via the --rebase=* flags).

@item  @samp{--ff} 
@itemx  @samp{--no-ff} 
When merging rather than rebasing, specifies how a merge is handled when the
merged-in history is already a descendant of the current history.  If
merging is requested, @samp{--ff} is the default unless merging an annotated (and
possibly signed) tag that is not stored in its natural place in the
@samp{refs/tags/} hierarchy, in which case @samp{--no-ff} is assumed.

With @samp{--ff}, when possible resolve the merge as a fast-forward (only update
the branch pointer to match the merged branch; do not create a merge
commit).  When not possible (when the merged-in history is not a descendant
of the current history), create a merge commit.

With @samp{--no-ff}, create a merge commit in all cases, even when the merge
could instead be resolved as a fast-forward.

@item  @samp{-S[<keyid>]} 
@itemx  @samp{--gpg-sign[=<keyid>]} 
@itemx  @samp{--no-gpg-sign} 
GPG-sign the resulting merge commit. The @samp{keyid} argument is optional and
defaults to the committer identity; if specified, it must be stuck to the
option without a space. @samp{--no-gpg-sign} is useful to countermand both
@samp{commit.gpgSign} configuration variable, and earlier @samp{--gpg-sign}.

@item  @samp{--log[=<n>]} 
@itemx  @samp{--no-log} 
In addition to branch names, populate the log message with one-line
descriptions from at most <n> actual commits that are being merged. See also
git-fmt-merge-msg(1).
Only useful when merging.

With --no-log do not list one-line descriptions from the actual commits
being merged.

@item  @samp{--signoff} 
@itemx  @samp{--no-signoff} 
コミットログメッセージの最後に、コミッターによる「Signed-off-by」トレーラーを追加します。signoffの意味は、コミットしているプロジェクトによって異なります。たとえば、コミッターがプロジェクトのライセンスに基づいて作品を提出する権利を持っていることを証明したり、開発者の原産地証明書などの寄稿者の代表に同意したりする場合があります。(LinuxカーネルおよびGitプロジェクトで使用されるものについては、http：//developercertificate.orgを参照してください)。プロジェクトでsignoffがどのように使用されるかを理解するには、貢献しているプロジェクトのドキュメントまたはリーダーシップ(leadership)を参照してください。

@samp{--no-signoff} オプションを使用すると、コマンドラインで以前の @samp{--signoff} オプションを無効にすることができます。

@item  @samp{--stat} 
@itemx  @samp{-n} 
@itemx  @samp{--no-stat} 
Show a diffstat at the end of the merge. The diffstat is also controlled by
the configuration option merge.stat.

With -n or --no-stat do not show a diffstat at the end of the merge.

@item  @samp{--squash} 
@itemx  @samp{--no-squash} 
Produce the working tree and index state as if a real merge happened (except
for the merge information), but do not actually make a commit, move the
@samp{HEAD}, or record @samp{$GIT_DIR/MERGE_HEAD} (to cause the next @samp{git commit}
command to create a merge commit).  This allows you to create a single
commit on top of the current branch whose effect is the same as merging
another branch (or more in case of an octopus).

With --no-squash perform the merge and commit the result. This option can be
used to override --squash.

With --squash, --commit is not allowed, and will fail.

Only useful when merging.

@item  @samp{--no-verify} 
This option bypasses the pre-merge and commit-msg hooks.  See also
githooks(5).
Only useful when merging.

@item  @samp{-s <strategy>} 
@itemx  @samp{--strategy=<strategy>} 
Use the given merge strategy; can be supplied more than once to specify them
in the order they should be tried.  If there is no @samp{-s} option, a built-in
list of strategies is used instead (@samp{ort} when merging a single head,
@samp{octopus} otherwise).

@item  @samp{-X <option>} 
@itemx  @samp{--strategy-option=<option>} 
Pass merge strategy specific option through to the merge strategy.

@item  @samp{--verify-signatures} 
@itemx  @samp{--no-verify-signatures} 
Verify that the tip commit of the side branch being merged is signed with a
valid key, i.e. a key that has a valid uid: in the default trust model, this
means the signing key has been signed by a trusted key.  If the tip commit
of the side branch is not signed with a valid key, the merge is aborted.

Only useful when merging.

@item  @samp{--summary} 
@itemx  @samp{--no-summary} 
Synonyms to --stat and --no-stat; these are deprecated and will be removed
in the future.

@item  @samp{--autostash} 
@itemx  @samp{--no-autostash} 
Automatically create a temporary stash entry before the operation begins,
record it in the special ref @samp{MERGE_AUTOSTASH} and apply it after the
operation ends.  This means that you can run the operation on a dirty
worktree.  However, use with care: the final stash application after a
successful merge might result in non-trivial conflicts.

@item  @samp{--allow-unrelated-histories} 
By default, @samp{git merge} command refuses to merge histories that do not share
a common ancestor.  This option can be used to override this safety when
merging histories of two projects that started their lives independently. As
that is a very rare occasion, no configuration variable to enable this by
default exists and will not be added.

Only useful when merging.

@item  @samp{-r} 
@itemx  @samp{--rebase[=false|true|merges|preserve|interactive]} 
When true, rebase the current branch on top of the upstream branch after
fetching. If there is a remote-tracking branch corresponding to the upstream
branch and the upstream branch was rebased since last fetched, the rebase
uses that information to avoid rebasing non-local changes.

When set to @samp{merges}, rebase using @samp{git rebase --rebase-merges} so that the
local merge commits are included in the rebase (see git-rebase(1)
for details).

When set to @samp{preserve} (deprecated in favor of @samp{merges}), rebase with the
@samp{--preserve-merges} option passed to @samp{git rebase} so that locally created
merge commits will not be flattened.

When false, merge the upstream branch into the current branch.

When @samp{interactive}, enable the interactive mode of rebase.

See @samp{pull.rebase}, @samp{branch.<name>.rebase} and @samp{branch.autoSetupRebase} in
git-config(1) if you want to make @samp{git pull} always use @samp{--rebase}
instead of merging.

@quotation

@strong{Note}

This is a potentially @emph{dangerous} mode of operation.  It rewrites history,
which does not bode well when you published that history already.  Do @strong{not}
use this option unless you have read git-rebase(1) carefully.
@end quotation

@item  @samp{--no-rebase} 
This is shorthand for --rebase=false.
@end table

@noindent

@heading Options related to fetching

@table @asis

@item  @samp{--all} 
Fetch all remotes.

@item  @samp{-a} 
@itemx  @samp{--append} 
Append ref names and object names of fetched refs to the existing contents
of @samp{.git/FETCH_HEAD}.  Without this option old data in @samp{.git/FETCH_HEAD}
will be overwritten.

@item  @samp{--atomic} 
Use an atomic transaction to update local refs. Either all refs are updated,
or on error, no refs are updated.

@item  @samp{--depth=<depth>} 
Limit fetching to the specified number of commits from the tip of each
remote branch history. If fetching to a @emph{shallow} repository created by @samp{git
clone} with @samp{--depth=<depth>} option (see git-clone(1)), deepen or
shorten the history to the specified number of commits. Tags for the
deepened commits are not fetched.

@item  @samp{--deepen=<depth>} 
Similar to --depth, except it specifies the number of commits from the
current shallow boundary instead of from the tip of each remote branch
history.

@item  @samp{--shallow-since=<date>} 
Deepen or shorten the history of a shallow repository to include all
reachable commits after <date>.

@item  @samp{--shallow-exclude=<revision>} 
Deepen or shorten the history of a shallow repository to exclude commits
reachable from a specified remote branch or tag.  This option can be
specified multiple times.

@item  @samp{--unshallow} 
If the source repository is complete, convert a shallow repository to a
complete one, removing all the limitations imposed by shallow repositories.

If the source repository is shallow, fetch as much as possible so that the
current repository has the same history as the source repository.

@item  @samp{--update-shallow} 
By default when fetching from a shallow repository, @samp{git fetch} refuses refs
that require updating .git/shallow. This option updates .git/shallow and
accept such refs.

@item  @samp{--negotiation-tip=<commit|glob>} 
By default, Git will report, to the server, commits reachable from all local
refs to find common commits in an attempt to reduce the size of the
to-be-received packfile. If specified, Git will only report commits
reachable from the given tips.  This is useful to speed up fetches when the
user knows which local ref is likely to have commits in common with the
upstream ref being fetched.

This option may be specified more than once; if so, Git will report commits
reachable from any of the given commits.

The argument to this option may be a glob on ref names, a ref, or the
(possibly abbreviated) SHA-1 of a commit. Specifying a glob is equivalent to
specifying this option multiple times, one for each matching ref name.

See also the @samp{fetch.negotiationAlgorithm} and @samp{push.negotiate} configuration
variables documented in git-config(1), and the @samp{--negotiate-only}
option below.

@item  @samp{--negotiate-only} 
Do not fetch anything from the server, and instead print the ancestors of
the provided @samp{--negotiation-tip=*} arguments, which we have in common with
the server.

Internally this is used to implement the @samp{push.negotiate} option, see
git-config(1).

@item  @samp{--dry-run} 
Show what would be done, without making any changes.

@item  @samp{-f} 
@itemx  @samp{--force} 
When @emph{git fetch} is used with @samp{<src>:<dst>} refspec it may refuse to update
the local branch as discussed
in the @samp{<refspec>} part of the git-fetch(1)
documentation.
This option overrides that check.

@item  @samp{-k} 
@itemx  @samp{--keep} 
Keep downloaded pack.

@item  @samp{--prefetch} 
Modify the configured refspec to place all refs into the @samp{refs/prefetch/}
namespace. See the @samp{prefetch} task in git-maintenance(1).

@item  @samp{-p} 
@itemx  @samp{--prune} 
Before fetching, remove any remote-tracking references that no longer exist
on the remote.  Tags are not subject to pruning if they are fetched only
because of the default tag auto-following or due to a --tags option.
However, if tags are fetched due to an explicit refspec (either on the
command line or in the remote configuration, for example if the remote was
cloned with the --mirror option), then they are also subject to
pruning. Supplying @samp{--prune-tags} is a shorthand for providing the tag
refspec.

@item  @samp{--no-tags} 
By default, tags that point at objects that are downloaded from the remote
repository are fetched and stored locally.  This option disables this
automatic tag following. The default behavior for a remote may be specified
with the remote.<name>.tagOpt setting. See git-config(1).

@item  @samp{--refmap=<refspec>} 
When fetching refs listed on the command line, use the specified refspec
(can be given more than once) to map the refs to remote-tracking branches,
instead of the values of @samp{remote.*.fetch} configuration variables for the
remote repository.  Providing an empty @samp{<refspec>} to the @samp{--refmap} option
causes Git to ignore the configured refspecs and rely entirely on the
refspecs supplied as command-line arguments. See section on "Configured
Remote-tracking Branches" for details.

@item  @samp{-t} 
@itemx  @samp{--tags} 
Fetch all tags from the remote (i.e., fetch remote tags @samp{refs/tags/*} into
local tags with the same name), in addition to whatever else would otherwise
be fetched.  Using this option alone does not subject tags to pruning, even
if --prune is used (though tags may be pruned anyway if they are also the
destination of an explicit refspec; see @samp{--prune}).

@item  @samp{-j} 
@itemx  @samp{--jobs=<n>} 
Number of parallel children to be used for all forms of fetching.

If the @samp{--multiple} option was specified, the different remotes will be
fetched in parallel. If multiple submodules are fetched, they will be
fetched in parallel. To control them independently, use the config settings
@samp{fetch.parallel} and @samp{submodule.fetchJobs} (see git-config(1)).

Typically, parallel recursive and multi-remote fetches will be faster. By
default fetches are performed sequentially, not in parallel.

@item  @samp{--set-upstream} 
If the remote is fetched successfully, add upstream (tracking) reference,
used by argument-less git-pull(1) and other commands. For more
information, see @samp{branch.<name>.merge} and @samp{branch.<name>.remote} in
git-config(1).

@item  @samp{--upload-pack <upload-pack>} 
When given, and the repository to fetch from is handled by @emph{git fetch-pack},
@samp{--exec=<upload-pack>} is passed to the command to specify non-default path
for the command run on the other end.

@item  @samp{--progress} 
Progress status is reported on the standard error stream by default when it
is attached to a terminal, unless -q is specified. This flag forces progress
status even if the standard error stream is not directed to a terminal.

@item  @samp{-o <option>} 
@itemx  @samp{--server-option=<option>} 
Transmit the given string to the server when communicating using protocol
version 2.  The given string must not contain a NUL or LF character.  The
server’s handling of server options, including unknown ones, is
server-specific.  When multiple @samp{--server-option=<option>} are given, they
are all sent to the other side in the order listed on the command line.

@item  @samp{--show-forced-updates} 
By default, git checks if a branch is force-updated during fetch. This can
be disabled through fetch.showForcedUpdates, but the --show-forced-updates
option guarantees this check occurs.  See git-config(1).

@item  @samp{--no-show-forced-updates} 
By default, git checks if a branch is force-updated during fetch. Pass
--no-show-forced-updates or set fetch.showForcedUpdates to false to skip
this check for performance reasons. If used during @emph{git-pull} the --ff-only
option will still check for forced updates before attempting a fast-forward
update. See git-config(1).

@item  @samp{-4} 
@itemx  @samp{--ipv4} 
Use IPv4 addresses only, ignoring IPv6 addresses.

@item  @samp{-6} 
@itemx  @samp{--ipv6} 
Use IPv6 addresses only, ignoring IPv4 addresses.

@item  <repository> 
フェッチまたはプル操作のソースである「リモート」リポジトリ。このパラメーターは、URL(以下の GIT URLS 
セクションを参照)またはリモートの名前(以下の REMOTES  セクションを参照)のいずれかです。

@item  <refspec> 
フェッチするrefと更新するローカルrefを指定します。コマンドラインに <refspec> がない場合、フェッチするrefは代わりに
@samp{remote.<repository>.fetch} 変数から読み取られます。
(git-fetch(1) の
「CONFIGURED REMOTE-TRACKING BRANCHES」セクション参照)

<refspec> パラメータの組織は、オプションのプラス @samp{+} に続いて ソースの <src> 、コロン @samp{:} 宛先refの <dst>
の順です。 <dst> が空の場合、コロン(@samp{:})は省略できます。 <src>
は通常、refですが、フルスペルの16進オブジェクト名にすることもできます。

<refspec> の <src> には、単純なパターン一致を示すための @samp{*}
が含まれている場合があります。このようなrefspecは、同じプレフィックスを持つ任意のrefに一致するglobのように機能します。パターン<refspec>では、
<src> と <dst> の両方に @samp{*} が含まれている必要があります。 @samp{*}
をソースから一致したコンテンツに置き換えることにより、refを宛先にマッピングします。

refspecの前に @samp{^}
が付いている場合、それはネガティブのrefspecとして解釈されます。このようなrefspecは、フェッチするrefや更新するローカルrefを指定するのではなく、除外するrefを指定します。
refは、少なくとも1つのポジティブ(通常)のrefspecと一致し、ネガティブのrefspecと一致しない場合、一致すると見なされます。ネガティブのrefspecは、特定のrefが含まれないように、パターンrefspecのスコープを制限するのに役立ちます。ネガティブのrefspecは、それ自体がパターンrefspecである可能性があります。
ただし、 <src> のみを含めることができ、 <dst> を指定することはできません。 フルスペルの16進オブジェクト名もサポートされていません。

@samp{tag <tag>} は、 @samp{refs/tags/<tag>:refs/tags/<tag>}
と同じ意味です。指定されたタグまでのすべてをフェッチするように要求します。

<src> に一致するリモートrefがフェッチされ、 <dst> が空の文字列でない場合は、それに一致するローカルrefを更新しようとします。

その更新が @samp{--force}
なしで許可されるかどうかは、フェッチ先のref名前空間、フェッチされるオブジェクトのタイプ、および更新がfast-forwardであると見なされるかどうかによって異なります。一般に、プッシュする場合と同じルールがフェッチに適用されます。それらが何であるかについては、
git-push(1)の @samp{<refspec>...} セクションを参照してください。 @emph{git fetch}
に固有の例外ルールを以下に示します。

Gitバージョン2.20までは、 git-push(1) でプッシュする場合とは異なり、 @samp{refs/tags/*} の更新は、
refspec に @samp{+} がなくても(または @samp{--force}
指定が無くても)受け入れられます。フェッチするとき、リモートからのすべてのタグ更新を強制フェッチとしていました。Gitバージョン2.20以降では、
@samp{refs/tags/*} を更新するためのフェッチは、プッシュする場合と同じように機能します。 つまり refspecに @samp{+} が無い場合(または
@samp{--force} が無い場合)、更新は拒否されます。

git-push(1) でプッシュするときとは異なり、 @samp{refs/@{tags,heads@}/*} 以外の更新は、 refspecに
@samp{+} がなくても(あるいは @samp{--force}
指定が無くても)受け付けられます。例えば、ツリーオブジェクトとブロブを交換したり、あるコミットを、祖先を持たない別のコミットと交換したりできます。

git-push(1) でプッシュする場合とは異なり、これらのルールを修正する構成はなく、 @samp{pre-receive} フックに類似した
@samp{pre-fetch} フックのようなものはありません。

git-push(1)
を使用したプッシュと同様に、更新として許可されないものに関する上記のすべてのルールは、refspec先頭にオプションで @samp{+} をに追加する(または
@samp{--force} コマンドラインオプションを使用する)ことでオーバーライドできます。これに対する唯一の例外は、 @samp{refs/heads/*}
名前空間が非コミットオブジェクトを受け入れるように強制することはないということです。

@quotation

@strong{Note}

フェッチするリモートブランチが定期的に巻き戻されてリベースされることがわかっている場合、その新しい先端は(最後にフェッチしたときにリモートトラッキングブランチに保存された)以前の先端の子孫ではないことが予想されます。あなたは
@samp{+}
記号を使用して、そのようなブランチにnon-fast-forwardの更新が必要であることを指示します。この操作でブランチがリポジトリで使用可能になることを決定または宣言する方法はありません。プルするユーザーは、これがブランチの予想される使用パターンであることを知っている必要があります。
@end quotation

@quotation

@strong{Note}

@emph{git pull} コマンドラインに直接複数の <refspec> をリストすることと、 <repository> の構成に複数の
@samp{remote.<repository>.fetch} エントリを含めることと、明示的な <refspec> パラメーターなしで @emph{git pull}
コマンドを実行することには違いがあります。コマンドラインに明示的にリストされている <refspec>
は、フェッチ後に常に現在のブランチにマージされます。いいかえると、複数のリモートrefをリストする場合 @samp{git pull}
はOctopusマージを作成します。一方、コマンドラインに明示的な <refspec> パラメータをリストしない場合 @emph{git pull} は
@samp{remote.<repository>.fetch} 構成で見つかったすべての <refspec> をフェッチし、最初に見つかった <refspec>
のみを現在のブランチにマージします。これはリモートrefからOctopusを作成することはめったに行われない為ですが、複数のリモートヘッドを追跡するために複数のリモートヘッドを一度にフェッチすると便利なことがよくあります。
@end quotation
@end table

@noindent

@chapheading GIT URLS

一般に、URLには、トランスポートプロトコル、リモートサーバーのアドレス、およびリポジトリへのパスに関する情報が含まれています。トランスポートプロトコルによっては、一部の情報が欠落している場合があります。

Gitはsshとgitとhttpとhttpsプロトコルをサポートします(さらにftpとftpsをフェッチに使用できますが、これは非効率的で非推奨です。使用しないでください)。

ネイティブトランスポート(つまり、 git://
URL)は認証を行わないため、セキュリティで保護されていないネットワークでは注意して使用する必要があります。

以下の構文を使用できます:

@itemize 

@item
ssh://[user@@]host.xz[:port]/path/to/repo.git/

@item
git://host.xz[:port]/path/to/repo.git/

@item
http[s]://host.xz[:port]/path/to/repo.git/

@item
ftp[s]://host.xz[:port]/path/to/repo.git/
@end itemize

代替のscpのような構文をsshプロトコルで使用することもできます:

@itemize 

@item
[user@@]host.xz:path/to/repo.git/
@end itemize

この構文は、最初のコロン(:)の前にスラッシュがない場合にのみ認識されます。これは、コロンを含むローカルパスを区別するのに役立ちます。たとえば、ローカルパス
@samp{foo:bar} を、絶対パスまたは @samp{./foo:bar} として指定して、 ssh url として誤って解釈されないようにすることができます。

sshおよびgitプロトコルは、さらに ~username 拡張をサポートします:

@itemize 

@item
ssh://[user@@]host.xz[:port]/~[user]/path/to/repo.git/

@item
git://host.xz[:port]/~[user]/path/to/repo.git/

@item
[user@@]host.xz:/~[user]/path/to/repo.git/
@end itemize

Gitでもネイティブにサポートされているローカルリポジトリの場合、以下の構文を使用できます:

@itemize 

@item
/path/to/repo.git/

@item
file:///path/to/repo.git/
@end itemize

これらの2つの構文は、前者が @samp{--local} オプションの機能を含むクローン作成の場合を除いて、ほとんど同等です。 詳細については、
git-clone(1) を参照してください。

「git clone」と「git fetch」と「git pull」は、「git push」と違って適切なバンドルファイルを受け入れます。
git-bundle(1) を参照してください。

Gitが特定のトランスポートプロトコルを処理する方法を知らない場合、Gitは @emph{remote-<transport>}
リモートヘルパー(存在する場合)を使用しようとします。リモートヘルパーを明示的に要求するには、以下の構文を使用できます:

@itemize 

@item
<transport>::<address>
@end itemize

ここで、 <address>
は、パス、サーバーとパス、または呼び出されている特定のリモートヘルパーによって認識される任意のURLのような文字列です。詳細については、
gitremote-helpers(7) を参照してください。

同じ名前のリモートリポジトリが多数あり、それらに異なる形式を使用する場合(あなたの使用するURLが機能するURLに書き換えられるように)、以下の形式の構成セクションを作成できます:

@example
        [url "<actual url base>"]
                insteadOf = <other url base>
@end example


例えば、以下のようになります:

@example
        [url "git://git.host.xz/"]
                insteadOf = host.xz:/path/to/
                insteadOf = work:
@end example


"work:repo.git" や "host.xz:/path/to/repo.git"
のようなURLは、任意のコンテキストで、"git://git.host.xz/repo.git" に書き換えられます。

プッシュ専用のURLを書き換えたい場合は、以下の形式の構成セクションを作成できます:

@example
        [url "<actual url base>"]
                pushInsteadOf = <other url base>
@end example


例えば、以下のようになります:

@example
        [url "ssh://example.org/"]
                pushInsteadOf = git://example.org/
@end example


"git://example.org/path/to/repo.git" のようなURLは、プッシュの場合は
"ssh://example.org/path/to/repo.git" に書き換えられますが、プルは引き続き元のURLのままです。

@noindent

@chapheading REMOTES

@samp{<repository>} 引数として、URLの代わりに以下のいずれかの名前を使用できます:

@itemize 

@item
Git構成ファイル(configuration file)内のリモート(remote)として、 @samp{$GIT_DIR/config} または

@item
@samp{$GIT_DIR/remotes} ディレクトリ内のファイル または

@item
@samp{$GIT_DIR/branches} ディレクトリ内のファイル
@end itemize

これらはすべて、gitがデフォルトで使用するrefspecをそれぞれ含んでいるため、コマンドラインからrefspecを省略できます。

@noindent

@heading Named remote in configuration file

あなたは、 git-remote(1) を使うか、または git-config(1) を使うか、または
@samp{$GIT_DIR/config}
ファイルを手動で編集して、これ以前に構成したリモートの名前から選択できます。このリモートのURLは、リポジトリへのアクセスに使用されます。コマンドラインでrefspecを指定しない場合、このリモートのrefspecがデフォルトで使用されます。構成ファイルのエントリは以下のようになります:

@example
        [remote "<name>"]
                url = <url>
                pushurl = <pushurl>
                push = <refspec>
                fetch = <refspec>
@end example


@samp{<pushurl>} はプッシュにのみ使用されます。 これはオプションであり、デフォルトは @samp{<url>} です。

@noindent

@heading Named file in $GIT_DIR/remotes

あなたは、 @samp{$GIT_DIR/remotes}
でファイル名を指定できます。このファイルのURLは、リポジトリへのアクセスに使用されます。コマンドラインでrefspecを指定しない場合、このファイルのrefspecがデフォルトとして使用されます。このファイルの形式は以下のとおりです:

@example
        URL: one of the above URL format
        Push: <refspec>
        Pull: <refspec>
@end example


@samp{Push:} 行は @emph{git push} で使用され、 @samp{Pull:} 行は @emph{git pull} と @emph{git fetch}
で使用されます。追加のブランチマッピングのために、複数の @samp{Push:} および @samp{Pull:} 行を指定できます。

@noindent

@heading Named file in $GIT_DIR/branches

@samp{$GIT_DIR/branches} でファイル名を指定できます。このファイルのURLは、リポジトリへのアクセスに使用されます。
このファイルの形式は以下のとおりです:

@example
        <url>#<head>
@end example


@samp{<url>} は必須です。 @samp{#<head>} はオプションです。

コマンドラインで指定しない場合、操作に応じて、gitは以下のrefspecのいずれかを使用します。 @samp{<branch>} は
@samp{$GIT_DIR/branchs} 内のこのファイルの名前であり、 @samp{<head>`はデフォルトで `master} になります。

git fetch は以下を使用します:

@example
        refs/heads/<head>:refs/heads/<branch>
@end example


git push は以下を使用します:

@example
        HEAD:refs/heads/<head>
@end example


@noindent

@chapheading MERGE STRATEGIES

The merge mechanism (@samp{git merge} and @samp{git pull} commands) allows the backend
@emph{merge strategies} to be chosen with @samp{-s} option.  Some strategies can also
take their own options, which can be passed by giving @samp{-X<option>} arguments
to @samp{git merge} and/or @samp{git pull}.

@table @asis

@item  ort 
This is the default merge strategy when pulling or merging one branch.  This
strategy can only resolve two heads using a 3-way merge algorithm.  When
there is more than one common ancestor that can be used for 3-way merge, it
creates a merged tree of the common ancestors and uses that as the reference
tree for the 3-way merge.  This has been reported to result in fewer merge
conflicts without causing mismerges by tests done on actual merge commits
taken from Linux 2.6 kernel development history.  Additionally this strategy
can detect and handle merges involving renames.  It does not make use of
detected copies.  The name for this algorithm is an acronym ("Ostensibly
Recursive’s Twin") and came from the fact that it was written as a
replacement for the previous default algorithm, @samp{recursive}.

The @emph{ort} strategy can take the following options:

@table @asis

@item  ours 
This option forces conflicting hunks to be auto-resolved cleanly by favoring
@emph{our} version.  Changes from the other tree that do not conflict with our
side are reflected in the merge result.  For a binary file, the entire
contents are taken from our side.

This should not be confused with the @emph{ours} merge strategy, which does not
even look at what the other tree contains at all.  It discards everything
the other tree did, declaring @emph{our} history contains all that happened in
it.

@item  theirs 
This is the opposite of @emph{ours}; note that, unlike @emph{ours}, there is no
@emph{theirs} merge strategy to confuse this merge option with.

@item  ignore-space-change 
@itemx  ignore-all-space 
@itemx  ignore-space-at-eol 
@itemx  ignore-cr-at-eol 
Treats lines with the indicated type of whitespace change as unchanged for
the sake of a three-way merge.  Whitespace changes mixed with other changes
to a line are not ignored.  See also git-diff(1) @samp{-b}, @samp{-w},
@samp{--ignore-space-at-eol}, and @samp{--ignore-cr-at-eol}.

@itemize 

@item
If @emph{their} version only introduces whitespace changes to a line, @emph{our}
version is used;

@item
If @emph{our} version introduces whitespace changes but @emph{their} version includes
a substantial change, @emph{their} version is used;

@item
Otherwise, the merge proceeds in the usual way.
@end itemize

@item  renormalize 
This runs a virtual check-out and check-in of all three stages of a file
when resolving a three-way merge.  This option is meant to be used when
merging branches with different clean filters or end-of-line normalization
rules.  See "Merging branches with differing checkin/checkout attributes" in
gitattributes(5) for details.

@item  no-renormalize 
Disables the @samp{renormalize} option.  This overrides the @samp{merge.renormalize}
configuration variable.

@item  find-renames[=<n>] 
Turn on rename detection, optionally setting the similarity threshold.  This
is the default. This overrides the @emph{merge.renames} configuration variable.
See also git-diff(1) @samp{--find-renames}.

@item  rename-threshold=<n> 
Deprecated synonym for @samp{find-renames=<n>}.

@item  subtree[=<path>] 
This option is a more advanced form of @emph{subtree} strategy, where the
strategy makes a guess on how two trees must be shifted to match with each
other when merging.  Instead, the specified path is prefixed (or stripped
from the beginning) to make the shape of two trees to match.
@end table

@item  recursive 
This can only resolve two heads using a 3-way merge algorithm.  When there
is more than one common ancestor that can be used for 3-way merge, it
creates a merged tree of the common ancestors and uses that as the reference
tree for the 3-way merge.  This has been reported to result in fewer merge
conflicts without causing mismerges by tests done on actual merge commits
taken from Linux 2.6 kernel development history.  Additionally this can
detect and handle merges involving renames.  It does not make use of
detected copies.  This was the default strategy for resolving two heads from
Git v0.99.9k until v2.33.0.

The @emph{recursive} strategy takes the same options as @emph{ort}.  However, there
are three additional options that @emph{ort} ignores (not documented above) that
are potentially useful with the @emph{recursive} strategy:

@table @asis

@item  patience 
Deprecated synonym for @samp{diff-algorithm=patience}.

@item  diff-algorithm=[patience|minimal|histogram|myers] 
Use a different diff algorithm while merging, which can help avoid mismerges
that occur due to unimportant matching lines (such as braces from distinct
functions).  See also git-diff(1) @samp{--diff-algorithm}.  Note that
@samp{ort} specifically uses @samp{diff-algorithm=histogram}, while @samp{recursive}
defaults to the @samp{diff.algorithm} config setting.

@item  no-renames 
Turn off rename detection. This overrides the @samp{merge.renames} configuration
variable.  See also git-diff(1) @samp{--no-renames}.
@end table

@item  resolve 
This can only resolve two heads (i.e. the current branch and another branch
you pulled from) using a 3-way merge algorithm.  It tries to carefully
detect criss-cross merge ambiguities.  It does not handle renames.

@item  octopus 
This resolves cases with more than two heads, but refuses to do a complex
merge that needs manual resolution.  It is primarily meant to be used for
bundling topic branch heads together.  This is the default merge strategy
when pulling or merging more than one branch.

@item  ours 
This resolves any number of heads, but the resulting tree of the merge is
always that of the current branch head, effectively ignoring all changes
from all other branches.  It is meant to be used to supersede old
development history of side branches.  Note that this is different from the
-Xours option to the @emph{recursive} merge strategy.

@item  subtree 
This is a modified @samp{ort} strategy. When merging trees A and B, if B
corresponds to a subtree of A, B is first adjusted to match the tree
structure of A, instead of reading the trees at the same level. This
adjustment is also done to the common ancestor tree.
@end table

With the strategies that use 3-way merge (including the default, @emph{ort}), if
a change is made on both branches, but later reverted on one of the
branches, that change will be present in the merged result; some people find
this behavior confusing.  It occurs because only the heads and the merge
base are considered when performing a merge, not the individual commits.
The merge algorithm therefore considers the reverted change as no change at
all, and substitutes the changed version instead.

@noindent

@chapheading DEFAULT BEHAVIOUR

Often people use @samp{git pull} without giving any parameter.  Traditionally,
this has been equivalent to saying @samp{git pull origin}.  However, when
configuration @samp{branch.<name>.remote} is present while on branch @samp{<name>},
that value is used instead of @samp{origin}.

In order to determine what URL to use to fetch from, the value of the
configuration @samp{remote.<origin>.url} is consulted and if there is not any
such variable, the value on the @samp{URL:} line in @samp{$GIT_DIR/remotes/<origin>}
is used.

In order to determine what remote branches to fetch (and optionally store in
the remote-tracking branches) when the command is run without any refspec
parameters on the command line, values of the configuration variable
@samp{remote.<origin>.fetch} are consulted, and if there aren’t any,
@samp{$GIT_DIR/remotes/<origin>} is consulted and its @samp{Pull:} lines are used.  In
addition to the refspec formats described in the OPTIONS section, you can
have a globbing refspec that looks like this:

@example
refs/heads/*:refs/remotes/origin/*
@end example


A globbing refspec must have a non-empty RHS (i.e. must store what were
fetched in remote-tracking branches), and its LHS and RHS must end with
@samp{/*}.  The above specifies that all remote branches are tracked using
remote-tracking branches in @samp{refs/remotes/origin/} hierarchy under the same
name.

The rule to determine which remote branch to merge after fetching is a bit
involved, in order not to break backward compatibility.

If explicit refspecs were given on the command line of @samp{git pull}, they are
all merged.

When no refspec was given on the command line, then @samp{git pull} uses the
refspec from the configuration or @samp{$GIT_DIR/remotes/<origin>}.  In such
cases, the following rules apply:

@enumerate 

@item
If @samp{branch.<name>.merge} configuration for the current branch @samp{<name>}
exists, that is the name of the branch at the remote site that is merged.

@item
If the refspec is a globbing one, nothing is merged.

@item
Otherwise the remote branch of the first refspec is merged.
@end enumerate

@noindent

@chapheading EXAMPLES

@itemize 

@item
Update the remote-tracking branches for the repository you cloned from, then
merge one of them into your current branch:

@example
$ git pull
$ git pull origin
@end example


Normally the branch merged in is the HEAD of the remote repository, but the
choice is determined by the branch.<name>.remote and branch.<name>.merge
options; see git-config(1) for details.

@item
Merge into the current branch the remote branch @samp{next}:

@example
$ git pull origin next
@end example


This leaves a copy of @samp{next} temporarily in FETCH_HEAD, and updates the
remote-tracking branch @samp{origin/next}.  The same can be done by invoking
fetch and merge:

@example
$ git fetch origin
$ git merge origin/next
@end example

@end itemize

If you tried a pull which resulted in complex conflicts and would want to
start over, you can recover with @emph{git reset}.

@noindent

@chapheading SECURITY

フェッチおよびプッシュプロトコルは、共有することを意図していない一方の側が他方のリポジトリからデータを盗むのを防ぐようには設計されていません。悪意のある者から保護する必要のあるプライベートデータがある場合、最善のオプションはそれを別のリポジトリに保存することです。これは、クライアントとサーバーの両方に適用されます。特に、サーバー上の名前空間は、読み取りアクセス制御には効果的ではありません。リポジトリ全体への読み取りアクセスで信頼できるクライアントにのみ、名前空間への読み取りアクセスを許可する必要があります。

既知の攻撃ベクトル(attack vectors)は以下のとおりです:

@enumerate 

@item
被害者は、明示的に共有することを意図していないオブジェクトのIDをアドバタイズする "have"
行を送信しますが、他にもIDを持っている者が居る場合は、転送を最適化するために使用できます。攻撃者はオブジェクトID
Xを選択して盗み、refをXに送信しますが、被害者はすでにXのコンテンツを持っているため、Xのコンテンツを送信する必要はありません。
これで、被害者は攻撃者がXを持っていると信じ、Xのコンテンツを後で攻撃者に送り返します。
(この攻撃は、クライアントがアクセスできる名前空間にXへのrefを作成してフェッチすることにより、クライアントがサーバー上で実行するのが最も簡単です。サーバーがクライアント上で実行する最も可能性の高い方法は、Xをパブリックブランチにマージし、ユーザーがこのブランチで追加の作業を行い、マージに気付かずにサーバーにプッシュバックすることを期待します。)

@item
#1 と同様に、攻撃者は盗むオブジェクトID
Xを選択します。被害者は、攻撃者がすでに持っているオブジェクトYを送信し、攻撃者はYではなくXを持っていると誤って主張するため、被害者はYをXに対するデルタとして送信します。デルタは、攻撃者にYに類似したXの領域を明らかにします。
@end enumerate

@noindent

@chapheading BUGS

Using --recurse-submodules can only fetch new commits in already checked out
submodules right now. When e.g. upstream added a new submodule in the just
fetched commits of the superproject the submodule itself cannot be fetched,
making it impossible to check out that submodule later without having to do
a fetch again. This is expected to be fixed in a future Git version.

@noindent

@chapheading SEE ALSO

git-fetch(1), git-merge(1), git-config(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-push,,,Top
@chapheading Name

git-push — Update remote refs along with associated objects

@noindent

@chapheading Synopsis

@display
git push [--all | --mirror | --tags] [--follow-tags] [--atomic] [-n | --dry-run] [--receive-pack=<git-receive-pack>]
           [--repo=<repository>] [-f | --force] [-d | --delete] [--prune] [-v | --verbose]
           [-u | --set-upstream] [-o <string> | --push-option=<string>]
           [--[no-]signed|--signed=(true|false|if-asked)]
           [--force-with-lease[=<refname>[:<expect>]] [--force-if-includes]]
           [--no-verify] [<repository> [<refspec>…]]
@end display


@noindent

@chapheading DESCRIPTION

Updates remote refs using local refs, while sending objects necessary to
complete the given refs.

You can make interesting things happen to a repository every time you push
into it, by setting up @emph{hooks} there.  See documentation for
git-receive-pack(1).

When the command line does not specify where to push with the @samp{<repository>}
argument, @samp{branch.*.remote} configuration for the current branch is
consulted to determine where to push.  If the configuration is missing, it
defaults to @emph{origin}.

When the command line does not specify what to push with @samp{<refspec>...}
arguments or @samp{--all}, @samp{--mirror}, @samp{--tags} options, the command finds the
default @samp{<refspec>} by consulting @samp{remote.*.push} configuration, and if it
is not found, honors @samp{push.default} configuration to decide what to push
(See git-config(1) for the meaning of @samp{push.default}).

When neither the command-line nor the configuration specify what to push,
the default behavior is used, which corresponds to the @samp{simple} value for
@samp{push.default}: the current branch is pushed to the corresponding upstream
branch, but as a safety measure, the push is aborted if the upstream branch
does not have the same name as the local one.

@noindent

@chapheading OPTIONS

@table @asis

@item  <repository> 
The "remote" repository that is destination of a push operation.  This
parameter can be either a URL (see the section GIT URLS  below) or
the name of a remote (see the section REMOTES  below).

@item  <refspec>… 
Specify what destination ref to update with what source object.  The format
of a <refspec> parameter is an optional plus @samp{+}, followed by the source
object <src>, followed by a colon @samp{:}, followed by the destination ref
<dst>.

The <src> is often the name of the branch you would want to push, but it can
be any arbitrary "SHA-1 expression", such as @samp{master~4} or @samp{HEAD} (see
gitrevisions(7)).

The <dst> tells which ref on the remote side is updated with this
push. Arbitrary expressions cannot be used here, an actual ref must be
named.  If @samp{git push [<repository>]} without any @samp{<refspec>} argument is set
to update some ref at the destination with @samp{<src>} with
@samp{remote.<repository>.push} configuration variable, @samp{:<dst>} part can be
omitted—such a push will update a ref that @samp{<src>} normally updates without
any @samp{<refspec>} on the command line.  Otherwise, missing @samp{:<dst>} means to
update the same ref as the @samp{<src>}.

If <dst> doesn’t start with @samp{refs/} (e.g. @samp{refs/heads/master}) we will try
to infer where in @samp{refs/*} on the destination <repository> it belongs based
on the type of <src> being pushed and whether <dst> is ambiguous.

@itemize 

@item
If <dst> unambiguously refers to a ref on the <repository> remote, then push
to that ref.

@item
If <src> resolves to a ref starting with refs/heads/ or refs/tags/, then
prepend that to <dst>.

@item
Other ambiguity resolutions might be added in the future, but for now any
other cases will error out with an error indicating what we tried, and
depending on the @samp{advice.pushUnqualifiedRefname} configuration (see
git-config(1)) suggest what refs/ namespace you may have wanted to
push to.
@end itemize

The object referenced by <src> is used to update the <dst> reference on the
remote side. Whether this is allowed depends on where in @samp{refs/*} the <dst>
reference lives as described in detail below, in those sections "update"
means any modifications except deletes, which as noted after the next few
sections are treated differently.

The @samp{refs/heads/*} namespace will only accept commit objects, and updates
only if they can be fast-forwarded.

The @samp{refs/tags/*} namespace will accept any kind of object (as commits,
trees and blobs can be tagged), and any updates to them will be rejected.

It’s possible to push any type of object to any namespace outside of
@samp{refs/@{tags,heads@}/*}. In the case of tags and commits, these will be
treated as if they were the commits inside @samp{refs/heads/*} for the purposes
of whether the update is allowed.

I.e. a fast-forward of commits and tags outside @samp{refs/@{tags,heads@}/*} is
allowed, even in cases where what’s being fast-forwarded is not a commit,
but a tag object which happens to point to a new commit which is a
fast-forward of the commit the last tag (or commit) it’s
replacing. Replacing a tag with an entirely different tag is also allowed,
if it points to the same commit, as well as pushing a peeled tag,
i.e. pushing the commit that existing tag object points to, or a new tag
object which an existing commit points to.

Tree and blob objects outside of @samp{refs/@{tags,heads@}/*} will be treated the
same way as if they were inside @samp{refs/tags/*}, any update of them will be
rejected.

All of the rules described above about what’s not allowed as an update can
be overridden by adding an the optional leading @samp{+} to a refspec (or using
@samp{--force} command line option). The only exception to this is that no amount
of forcing will make the @samp{refs/heads/*} namespace accept a non-commit
object. Hooks and configuration can also override or amend these rules, see
e.g. @samp{receive.denyNonFastForwards} in git-config(1) and
@samp{pre-receive} and @samp{update} in githooks(5).

Pushing an empty <src> allows you to delete the <dst> ref from the remote
repository. Deletions are always accepted without a leading @samp{+} in the
refspec (or @samp{--force}), except when forbidden by configuration or hooks. See
@samp{receive.denyDeletes} in git-config(1) and @samp{pre-receive} and
@samp{update} in githooks(5).

The special refspec @samp{:} (or @samp{+:} to allow non-fast-forward updates)  directs
Git to push "matching" branches: for every branch that exists on the local
side, the remote side is updated if a branch of the same name already exists
on the remote side.

@samp{tag <tag>} means the same as @samp{refs/tags/<tag>:refs/tags/<tag>}.

@item  @samp{--all} 
Push all branches (i.e. refs under @samp{refs/heads/}); cannot be used with other
<refspec>.

@item  @samp{--prune} 
Remove remote branches that don’t have a local counterpart. For example a
remote branch @samp{tmp} will be removed if a local branch with the same name
doesn’t exist any more. This also respects refspecs, e.g.  @samp{git push --prune
remote refs/heads/*:refs/tmp/*} would make sure that remote @samp{refs/tmp/foo}
will be removed if @samp{refs/heads/foo} doesn’t exist.

@item  @samp{--mirror} 
Instead of naming each ref to push, specifies that all refs under @samp{refs/}
(which includes but is not limited to @samp{refs/heads/}, @samp{refs/remotes/}, and
@samp{refs/tags/})  be mirrored to the remote repository.  Newly created local
refs will be pushed to the remote end, locally updated refs will be force
updated on the remote end, and deleted refs will be removed from the remote
end.  This is the default if the configuration option
@samp{remote.<remote>.mirror} is set.

@item  @samp{-n} 
@itemx  @samp{--dry-run} 
Do everything except actually send the updates.

@item  @samp{--porcelain} 
Produce machine-readable output.  The output status line for each ref will
be tab-separated and sent to stdout instead of stderr.  The full symbolic
names of the refs will be given.

@item  @samp{-d} 
@itemx  @samp{--delete} 
All listed refs are deleted from the remote repository. This is the same as
prefixing all refs with a colon.

@item  @samp{--tags} 
All refs under @samp{refs/tags} are pushed, in addition to refspecs explicitly
listed on the command line.

@item  @samp{--follow-tags} 
Push all the refs that would be pushed without this option, and also push
annotated tags in @samp{refs/tags} that are missing from the remote but are
pointing at commit-ish that are reachable from the refs being pushed.  This
can also be specified with configuration variable @samp{push.followTags}.  For
more information, see @samp{push.followTags} in git-config(1).

@item  @samp{--[no-]signed} 
@itemx  @samp{--signed=(true|false|if-asked)} 
GPG-sign the push request to update refs on the receiving side, to allow it
to be checked by the hooks and/or be logged.  If @samp{false} or @samp{--no-signed},
no signing will be attempted.  If @samp{true} or @samp{--signed}, the push will fail
if the server does not support signed pushes.  If set to @samp{if-asked}, sign if
and only if the server supports signed pushes.  The push will also fail if
the actual call to @samp{gpg --sign} fails.  See git-receive-pack(1) for
the details on the receiving end.

@item  @samp{--[no-]atomic} 
Use an atomic transaction on the remote side if available.  Either all refs
are updated, or on error, no refs are updated.  If the server does not
support atomic pushes the push will fail.

@item  @samp{-o <option>} 
@itemx  @samp{--push-option=<option>} 
Transmit the given string to the server, which passes them to the
pre-receive as well as the post-receive hook. The given string must not
contain a NUL or LF character.  When multiple @samp{--push-option=<option>} are
given, they are all sent to the other side in the order listed on the
command line.  When no @samp{--push-option=<option>} is given from the command
line, the values of configuration variable @samp{push.pushOption} are used
instead.

@item  @samp{--receive-pack=<git-receive-pack>} 
@itemx  @samp{--exec=<git-receive-pack>} 
Path to the @emph{git-receive-pack} program on the remote end.  Sometimes useful
when pushing to a remote repository over ssh, and you do not have the
program in a directory on the default $PATH.

@item  @samp{--[no-]force-with-lease} 
@itemx  @samp{--force-with-lease=<refname>} 
@itemx  @samp{--force-with-lease=<refname>:<expect>} 
Usually, "git push" refuses to update a remote ref that is not an ancestor
of the local ref used to overwrite it.

This option overrides this restriction if the current value of the remote
ref is the expected value.  "git push" fails otherwise.

Imagine that you have to rebase what you have already published.  You will
have to bypass the "must fast-forward" rule in order to replace the history
you originally published with the rebased history.  If somebody else built
on top of your original history while you are rebasing, the tip of the
branch at the remote may advance with their commit, and blindly pushing with
@samp{--force} will lose their work.

This option allows you to say that you expect the history you are updating
is what you rebased and want to replace. If the remote ref still points at
the commit you specified, you can be sure that no other people did anything
to the ref. It is like taking a "lease" on the ref without explicitly
locking it, and the remote ref is updated only if the "lease" is still
valid.

@samp{--force-with-lease} alone, without specifying the details, will protect all
remote refs that are going to be updated by requiring their current value to
be the same as the remote-tracking branch we have for them.

@samp{--force-with-lease=<refname>}, without specifying the expected value, will
protect the named ref (alone), if it is going to be updated, by requiring
its current value to be the same as the remote-tracking branch we have for
it.

@samp{--force-with-lease=<refname>:<expect>} will protect the named ref (alone),
if it is going to be updated, by requiring its current value to be the same
as the specified value @samp{<expect>} (which is allowed to be different from the
remote-tracking branch we have for the refname, or we do not even have to
have such a remote-tracking branch when this form is used).  If @samp{<expect>}
is the empty string, then the named ref must not already exist.

Note that all forms other than @samp{--force-with-lease=<refname>:<expect>} that
specifies the expected current value of the ref explicitly are still
experimental and their semantics may change as we gain experience with this
feature.

"--no-force-with-lease" will cancel all the previous --force-with-lease on
the command line.

A general note on safety: supplying this option without an expected value,
i.e. as @samp{--force-with-lease} or @samp{--force-with-lease=<refname>} interacts
very badly with anything that implicitly runs @samp{git fetch} on the remote to
be pushed to in the background, e.g. @samp{git fetch origin} on your repository
in a cronjob.

The protection it offers over @samp{--force} is ensuring that subsequent changes
your work wasn’t based on aren’t clobbered, but this is trivially defeated
if some background process is updating refs in the background. We don’t have
anything except the remote tracking info to go by as a heuristic for refs
you’re expected to have seen & are willing to clobber.

If your editor or some other system is running @samp{git fetch} in the background
for you a way to mitigate this is to simply set up another remote:

@example
git remote add origin-push $(git config remote.origin.url)
git fetch origin-push
@end example

Now when the background process runs @samp{git fetch origin} the references on
@samp{origin-push} won’t be updated, and thus commands like:

@example
git push --force-with-lease origin-push
@end example

Will fail unless you manually run @samp{git fetch origin-push}. This method is of
course entirely defeated by something that runs @samp{git fetch --all}, in that
case you’d need to either disable it or do something more tedious like:

@example
git fetch              # update 'master' from remote
git tag base master    # mark our base point
git rebase -i master   # rewrite some commits
git push --force-with-lease=master:base master:master
@end example

I.e. create a @samp{base} tag for versions of the upstream code that you’ve seen
and are willing to overwrite, then rewrite history, and finally force push
changes to @samp{master} if the remote version is still at @samp{base}, regardless of
what your local @samp{remotes/origin/master} has been updated to in the
background.

Alternatively, specifying @samp{--force-if-includes} as an ancillary option along
with @samp{--force-with-lease[=<refname>]} (i.e., without saying what exact
commit the ref on the remote side must be pointing at, or which refs on the
remote side are being protected) at the time of "push" will verify if
updates from the remote-tracking refs that may have been implicitly updated
in the background are integrated locally before allowing a forced update.

@item  @samp{-f} 
@itemx  @samp{--force} 
Usually, the command refuses to update a remote ref that is not an ancestor
of the local ref used to overwrite it.  Also, when @samp{--force-with-lease}
option is used, the command refuses to update a remote ref whose current
value does not match what is expected.

This flag disables these checks, and can cause the remote repository to lose
commits; use it with care.

Note that @samp{--force} applies to all the refs that are pushed, hence using it
with @samp{push.default} set to @samp{matching} or with multiple push destinations
configured with @samp{remote.*.push} may overwrite refs other than the current
branch (including local refs that are strictly behind their remote
counterpart).  To force a push to only one branch, use a @samp{+} in front of the
refspec to push (e.g @samp{git push origin +master} to force a push to the
@samp{master} branch). See the @samp{<refspec>...} section above for details.

@item  @samp{--[no-]force-if-includes} 
Force an update only if the tip of the remote-tracking ref has been
integrated locally.

This option enables a check that verifies if the tip of the remote-tracking
ref is reachable from one of the "reflog" entries of the local branch based
in it for a rewrite. The check ensures that any updates from the remote have
been incorporated locally by rejecting the forced update if that is not the
case.

If the option is passed without specifying @samp{--force-with-lease}, or
specified along with @samp{--force-with-lease=<refname>:<expect>}, it is a
"no-op".

Specifying @samp{--no-force-if-includes} disables this behavior.

@item  @samp{--repo=<repository>} 
This option is equivalent to the <repository> argument. If both are
specified, the command-line argument takes precedence.

@item  @samp{-u} 
@itemx  @samp{--set-upstream} 
For every branch that is up to date or successfully pushed, add upstream
(tracking) reference, used by argument-less git-pull(1) and other
commands. For more information, see @samp{branch.<name>.merge} in
git-config(1).

@item  @samp{--[no-]thin} 
These options are passed to git-send-pack(1). A thin transfer
significantly reduces the amount of sent data when the sender and receiver
share many of the same objects in common. The default is @samp{--thin}.

@item  @samp{-q} 
@itemx  @samp{--quiet} 
Suppress all output, including the listing of updated refs, unless an error
occurs. Progress is not reported to the standard error stream.

@item  @samp{-v} 
@itemx  @samp{--verbose} 
Run verbosely.

@item  @samp{--progress} 
Progress status is reported on the standard error stream by default when it
is attached to a terminal, unless -q is specified. This flag forces progress
status even if the standard error stream is not directed to a terminal.

@item  @samp{--no-recurse-submodules} 
@itemx  @samp{--recurse-submodules=check|on-demand|only|no} 
May be used to make sure all submodule commits used by the revisions to be
pushed are available on a remote-tracking branch.  If @emph{check} is used Git
will verify that all submodule commits that changed in the revisions to be
pushed are available on at least one remote of the submodule. If any commits
are missing the push will be aborted and exit with non-zero status. If
@emph{on-demand} is used all submodules that changed in the revisions to be
pushed will be pushed. If on-demand was not able to push all necessary
revisions it will also be aborted and exit with non-zero status. If @emph{only}
is used all submodules will be recursively pushed while the superproject is
left unpushed. A value of @emph{no} or using @samp{--no-recurse-submodules} can be
used to override the push.recurseSubmodules configuration variable when no
submodule recursion is required.

@item  @samp{--[no-]verify} 
Toggle the pre-push hook (see githooks(5)).  The default is
--verify, giving the hook a chance to prevent the push.  With --no-verify,
the hook is bypassed completely.

@item  @samp{-4} 
@itemx  @samp{--ipv4} 
Use IPv4 addresses only, ignoring IPv6 addresses.

@item  @samp{-6} 
@itemx  @samp{--ipv6} 
Use IPv6 addresses only, ignoring IPv4 addresses.
@end table

@noindent

@chapheading GIT URLS

一般に、URLには、トランスポートプロトコル、リモートサーバーのアドレス、およびリポジトリへのパスに関する情報が含まれています。トランスポートプロトコルによっては、一部の情報が欠落している場合があります。

Gitはsshとgitとhttpとhttpsプロトコルをサポートします(さらにftpとftpsをフェッチに使用できますが、これは非効率的で非推奨です。使用しないでください)。

ネイティブトランスポート(つまり、 git://
URL)は認証を行わないため、セキュリティで保護されていないネットワークでは注意して使用する必要があります。

以下の構文を使用できます:

@itemize 

@item
ssh://[user@@]host.xz[:port]/path/to/repo.git/

@item
git://host.xz[:port]/path/to/repo.git/

@item
http[s]://host.xz[:port]/path/to/repo.git/

@item
ftp[s]://host.xz[:port]/path/to/repo.git/
@end itemize

代替のscpのような構文をsshプロトコルで使用することもできます:

@itemize 

@item
[user@@]host.xz:path/to/repo.git/
@end itemize

この構文は、最初のコロン(:)の前にスラッシュがない場合にのみ認識されます。これは、コロンを含むローカルパスを区別するのに役立ちます。たとえば、ローカルパス
@samp{foo:bar} を、絶対パスまたは @samp{./foo:bar} として指定して、 ssh url として誤って解釈されないようにすることができます。

sshおよびgitプロトコルは、さらに ~username 拡張をサポートします:

@itemize 

@item
ssh://[user@@]host.xz[:port]/~[user]/path/to/repo.git/

@item
git://host.xz[:port]/~[user]/path/to/repo.git/

@item
[user@@]host.xz:/~[user]/path/to/repo.git/
@end itemize

Gitでもネイティブにサポートされているローカルリポジトリの場合、以下の構文を使用できます:

@itemize 

@item
/path/to/repo.git/

@item
file:///path/to/repo.git/
@end itemize

これらの2つの構文は、前者が @samp{--local} オプションの機能を含むクローン作成の場合を除いて、ほとんど同等です。 詳細については、
git-clone(1) を参照してください。

「git clone」と「git fetch」と「git pull」は、「git push」と違って適切なバンドルファイルを受け入れます。
git-bundle(1) を参照してください。

Gitが特定のトランスポートプロトコルを処理する方法を知らない場合、Gitは @emph{remote-<transport>}
リモートヘルパー(存在する場合)を使用しようとします。リモートヘルパーを明示的に要求するには、以下の構文を使用できます:

@itemize 

@item
<transport>::<address>
@end itemize

ここで、 <address>
は、パス、サーバーとパス、または呼び出されている特定のリモートヘルパーによって認識される任意のURLのような文字列です。詳細については、
gitremote-helpers(7) を参照してください。

同じ名前のリモートリポジトリが多数あり、それらに異なる形式を使用する場合(あなたの使用するURLが機能するURLに書き換えられるように)、以下の形式の構成セクションを作成できます:

@example
        [url "<actual url base>"]
                insteadOf = <other url base>
@end example


例えば、以下のようになります:

@example
        [url "git://git.host.xz/"]
                insteadOf = host.xz:/path/to/
                insteadOf = work:
@end example


"work:repo.git" や "host.xz:/path/to/repo.git"
のようなURLは、任意のコンテキストで、"git://git.host.xz/repo.git" に書き換えられます。

プッシュ専用のURLを書き換えたい場合は、以下の形式の構成セクションを作成できます:

@example
        [url "<actual url base>"]
                pushInsteadOf = <other url base>
@end example


例えば、以下のようになります:

@example
        [url "ssh://example.org/"]
                pushInsteadOf = git://example.org/
@end example


"git://example.org/path/to/repo.git" のようなURLは、プッシュの場合は
"ssh://example.org/path/to/repo.git" に書き換えられますが、プルは引き続き元のURLのままです。

@noindent

@chapheading REMOTES

@samp{<repository>} 引数として、URLの代わりに以下のいずれかの名前を使用できます:

@itemize 

@item
Git構成ファイル(configuration file)内のリモート(remote)として、 @samp{$GIT_DIR/config} または

@item
@samp{$GIT_DIR/remotes} ディレクトリ内のファイル または

@item
@samp{$GIT_DIR/branches} ディレクトリ内のファイル
@end itemize

これらはすべて、gitがデフォルトで使用するrefspecをそれぞれ含んでいるため、コマンドラインからrefspecを省略できます。

@noindent

@heading Named remote in configuration file

あなたは、 git-remote(1) を使うか、または git-config(1) を使うか、または
@samp{$GIT_DIR/config}
ファイルを手動で編集して、これ以前に構成したリモートの名前から選択できます。このリモートのURLは、リポジトリへのアクセスに使用されます。コマンドラインでrefspecを指定しない場合、このリモートのrefspecがデフォルトで使用されます。構成ファイルのエントリは以下のようになります:

@example
        [remote "<name>"]
                url = <url>
                pushurl = <pushurl>
                push = <refspec>
                fetch = <refspec>
@end example


@samp{<pushurl>} はプッシュにのみ使用されます。 これはオプションであり、デフォルトは @samp{<url>} です。

@noindent

@heading Named file in $GIT_DIR/remotes

あなたは、 @samp{$GIT_DIR/remotes}
でファイル名を指定できます。このファイルのURLは、リポジトリへのアクセスに使用されます。コマンドラインでrefspecを指定しない場合、このファイルのrefspecがデフォルトとして使用されます。このファイルの形式は以下のとおりです:

@example
        URL: one of the above URL format
        Push: <refspec>
        Pull: <refspec>
@end example


@samp{Push:} 行は @emph{git push} で使用され、 @samp{Pull:} 行は @emph{git pull} と @emph{git fetch}
で使用されます。追加のブランチマッピングのために、複数の @samp{Push:} および @samp{Pull:} 行を指定できます。

@noindent

@heading Named file in $GIT_DIR/branches

@samp{$GIT_DIR/branches} でファイル名を指定できます。このファイルのURLは、リポジトリへのアクセスに使用されます。
このファイルの形式は以下のとおりです:

@example
        <url>#<head>
@end example


@samp{<url>} は必須です。 @samp{#<head>} はオプションです。

コマンドラインで指定しない場合、操作に応じて、gitは以下のrefspecのいずれかを使用します。 @samp{<branch>} は
@samp{$GIT_DIR/branchs} 内のこのファイルの名前であり、 @samp{<head>`はデフォルトで `master} になります。

git fetch は以下を使用します:

@example
        refs/heads/<head>:refs/heads/<branch>
@end example


git push は以下を使用します:

@example
        HEAD:refs/heads/<head>
@end example


@noindent

@chapheading OUTPUT

The output of "git push" depends on the transport method used; this section
describes the output when pushing over the Git protocol (either locally or
via ssh).

The status of the push is output in tabular form, with each line
representing the status of a single ref. Each line is of the form:

@example
 <flag> <summary> <from> -> <to> (<reason>)
@end example


If --porcelain is used, then each line of the output is of the form:

@example
 <flag> \t <from>:<to> \t <summary> (<reason>)
@end example


The status of up-to-date refs is shown only if --porcelain or --verbose
option is used.

@table @asis

@item  flag 
A single character indicating the status of the ref:

@table @asis

@item  (space) 
for a successfully pushed fast-forward;

@item  @samp{+} 
for a successful forced update;

@item  @samp{-} 
for a successfully deleted ref;

@item  @samp{*} 
for a successfully pushed new ref;

@item  @samp{!} 
for a ref that was rejected or failed to push; and

@item  @samp{=} 
for a ref that was up to date and did not need pushing.
@end table

@item  summary 
For a successfully pushed ref, the summary shows the old and new values of
the ref in a form suitable for using as an argument to @samp{git log} (this is
@samp{<old>..<new>} in most cases, and @samp{<old>...<new>} for forced
non-fast-forward updates).

For a failed update, more details are given:

@table @asis

@item  rejected 
Git did not try to send the ref at all, typically because it is not a
fast-forward and you did not force the update.

@item  remote rejected 
The remote end refused the update.  Usually caused by a hook on the remote
side, or because the remote repository has one of the following safety
options in effect: @samp{receive.denyCurrentBranch} (for pushes to the checked
out branch), @samp{receive.denyNonFastForwards} (for forced non-fast-forward
updates), @samp{receive.denyDeletes} or @samp{receive.denyDeleteCurrent}.  See
git-config(1).

@item  remote failure 
The remote end did not report the successful update of the ref, perhaps
because of a temporary error on the remote side, a break in the network
connection, or other transient error.
@end table

@item  from 
The name of the local ref being pushed, minus its @samp{refs/<type>/} prefix. In
the case of deletion, the name of the local ref is omitted.

@item  to 
The name of the remote ref being updated, minus its @samp{refs/<type>/} prefix.

@item  reason 
A human-readable explanation. In the case of successfully pushed refs, no
explanation is needed. For a failed ref, the reason for failure is
described.
@end table

@noindent

@chapheading NOTE ABOUT FAST-FORWARDS

When an update changes a branch (or more in general, a ref) that used to
point at commit A to point at another commit B, it is called a fast-forward
update if and only if B is a descendant of A.

In a fast-forward update from A to B, the set of commits that the original
commit A built on top of is a subset of the commits the new commit B builds
on top of.  Hence, it does not lose any history.

In contrast, a non-fast-forward update will lose history.  For example,
suppose you and somebody else started at the same commit X, and you built a
history leading to commit B while the other person built a history leading
to commit A.  The history looks like this:

@example
      B
     /
 ---X---A
@end example


Further suppose that the other person already pushed changes leading to A
back to the original repository from which you two obtained the original
commit X.

The push done by the other person updated the branch that used to point at
commit X to point at commit A.  It is a fast-forward.

But if you try to push, you will attempt to update the branch (that now
points at A) with commit B.  This does @emph{not} fast-forward.  If you did so,
the changes introduced by commit A will be lost, because everybody will now
start building on top of B.

The command by default does not allow an update that is not a fast-forward
to prevent such loss of history.

If you do not want to lose your work (history from X to B) or the work by
the other person (history from X to A), you would need to first fetch the
history from the repository, create a history that contains changes done by
both parties, and push the result back.

You can perform "git pull", resolve potential conflicts, and "git push" the
result.  A "git pull" will create a merge commit C between commits A and B.

@example
      B---C
     /   /
 ---X---A
@end example


Updating A with the resulting merge commit will fast-forward and your push
will be accepted.

Alternatively, you can rebase your change between X and B on top of A, with
"git pull --rebase", and push the result back.  The rebase will create a new
commit D that builds the change between X and B on top of A.

@example
      B   D
     /   /
 ---X---A
@end example


Again, updating A with this commit will fast-forward and your push will be
accepted.

There is another common situation where you may encounter non-fast-forward
rejection when you try to push, and it is possible even when you are pushing
into a repository nobody else pushes into. After you push commit A yourself
(in the first picture in this section), replace it with "git commit --amend"
to produce commit B, and you try to push it out, because forgot that you
have pushed A out already. In such a case, and only if you are certain that
nobody in the meantime fetched your earlier commit A (and started building
on top of it), you can run "git push --force" to overwrite it. In other
words, "git push --force" is a method reserved for a case where you do mean
to lose history.

@noindent

@chapheading EXAMPLES

@table @asis

@item  @samp{git push} 
Works like @samp{git push <remote>}, where <remote> is the current branch’s
remote (or @samp{origin}, if no remote is configured for the current branch).

@item  @samp{git push origin} 
Without additional configuration, pushes the current branch to the
configured upstream (@samp{branch.<name>.merge} configuration variable) if it has
the same name as the current branch, and errors out without pushing
otherwise.

The default behavior of this command when no <refspec> is given can be
configured by setting the @samp{push} option of the remote, or the @samp{push.default}
configuration variable.

For example, to default to pushing only the current branch to @samp{origin} use
@samp{git config remote.origin.push HEAD}.  Any valid <refspec> (like the ones in
the examples below) can be configured as the default for @samp{git push origin}.

@item  @samp{git push origin :} 
Push "matching" branches to @samp{origin}. See <refspec> in the
OPTIONS (@pxref{[OPTIONS]}) section above for a description of "matching" branches.

@item  @samp{git push origin master} 
Find a ref that matches @samp{master} in the source repository (most likely, it
would find @samp{refs/heads/master}), and update the same ref
(e.g. @samp{refs/heads/master}) in @samp{origin} repository with it.  If @samp{master} did
not exist remotely, it would be created.

@item  @samp{git push origin HEAD} 
A handy way to push the current branch to the same name on the remote.

@item  @samp{git push mothership master:satellite/master dev:satellite/dev} 
Use the source ref that matches @samp{master} (e.g. @samp{refs/heads/master})  to
update the ref that matches @samp{satellite/master} (most probably
@samp{refs/remotes/satellite/master}) in the @samp{mothership} repository; do the same
for @samp{dev} and @samp{satellite/dev}.

See the section describing @samp{<refspec>...} above for a discussion of the
matching semantics.

This is to emulate @samp{git fetch} run on the @samp{mothership} using @samp{git push} that
is run in the opposite direction in order to integrate the work done on
@samp{satellite}, and is often necessary when you can only make connection in one
way (i.e. satellite can ssh into mothership but mothership cannot initiate
connection to satellite because the latter is behind a firewall or does not
run sshd).

After running this @samp{git push} on the @samp{satellite} machine, you would ssh into
the @samp{mothership} and run @samp{git merge} there to complete the emulation of @samp{git
pull} that were run on @samp{mothership} to pull changes made on @samp{satellite}.

@item  @samp{git push origin HEAD:master} 
Push the current branch to the remote ref matching @samp{master} in the @samp{origin}
repository. This form is convenient to push the current branch without
thinking about its local name.

@item  @samp{git push origin master:refs/heads/experimental} 
Create the branch @samp{experimental} in the @samp{origin} repository by copying the
current @samp{master} branch.  This form is only needed to create a new branch or
tag in the remote repository when the local name and the remote name are
different; otherwise, the ref name on its own will work.

@item  @samp{git push origin :experimental} 
Find a ref that matches @samp{experimental} in the @samp{origin} repository
(e.g. @samp{refs/heads/experimental}), and delete it.

@item  @samp{git push origin +dev:master} 
Update the origin repository’s master branch with the dev branch, allowing
non-fast-forward updates.  @strong{This can leave unreferenced commits dangling in
the origin repository.} Consider the following situation, where a
fast-forward is not possible:

@example
            o---o---o---A---B  origin/master
                     \
                      X---Y---Z  dev
@end example


The above command would change the origin repository to

@example
                      A---B  (unnamed branch)
                     /
            o---o---o---X---Y---Z  master
@end example


Commits A and B would no longer belong to a branch with a symbolic name, and
so would be unreachable.  As such, these commits would be removed by a @samp{git
gc} command on the origin repository.
@end table

@noindent

@chapheading SECURITY

フェッチおよびプッシュプロトコルは、共有することを意図していない一方の側が他方のリポジトリからデータを盗むのを防ぐようには設計されていません。悪意のある者から保護する必要のあるプライベートデータがある場合、最善のオプションはそれを別のリポジトリに保存することです。これは、クライアントとサーバーの両方に適用されます。特に、サーバー上の名前空間は、読み取りアクセス制御には効果的ではありません。リポジトリ全体への読み取りアクセスで信頼できるクライアントにのみ、名前空間への読み取りアクセスを許可する必要があります。

既知の攻撃ベクトル(attack vectors)は以下のとおりです:

@enumerate 

@item
被害者は、明示的に共有することを意図していないオブジェクトのIDをアドバタイズする "have"
行を送信しますが、他にもIDを持っている者が居る場合は、転送を最適化するために使用できます。攻撃者はオブジェクトID
Xを選択して盗み、refをXに送信しますが、被害者はすでにXのコンテンツを持っているため、Xのコンテンツを送信する必要はありません。
これで、被害者は攻撃者がXを持っていると信じ、Xのコンテンツを後で攻撃者に送り返します。
(この攻撃は、クライアントがアクセスできる名前空間にXへのrefを作成してフェッチすることにより、クライアントがサーバー上で実行するのが最も簡単です。サーバーがクライアント上で実行する最も可能性の高い方法は、Xをパブリックブランチにマージし、ユーザーがこのブランチで追加の作業を行い、マージに気付かずにサーバーにプッシュバックすることを期待します。)

@item
#1 と同様に、攻撃者は盗むオブジェクトID
Xを選択します。被害者は、攻撃者がすでに持っているオブジェクトYを送信し、攻撃者はYではなくXを持っていると誤って主張するため、被害者はYをXに対するデルタとして送信します。デルタは、攻撃者にYに類似したXの領域を明らかにします。
@end enumerate

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-quiltimport,,,Top
@chapheading Name

git-quiltimport — quilt(キルト)パッチセットを現在のブランチに適用します

@noindent

@chapheading Synopsis

@display
git quiltimport [--dry-run | -n] [--author <author>] [--patches <dir>]
                [--series <file>] [--keep-non-patch]
@end display


@noindent

@chapheading DESCRIPTION

quiltパッチセットを現在のGitブランチに適用し、quiltパッチセットに存在するパッチ境界、パッチ順序、およびパッチの説明を保持します。

パッチごとに、コードはパッチの説明から作者を抽出しようとします。それが失敗した場合は、 @samp{--author} で指定された作者にフォールバックします。
@samp{--author} フラグが指定されていない場合、パッチの説明が表示され、ユーザーはパッチの作者をインタラクティブに入力するように求められます。

パッチの説明に件名が見つからない場合、パッチ名はGitの説明の1行の件名として保持されます。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-n} 
@itemx  @samp{--dry-run} 
一連(series)のパッチをウォークスルーし、パッチをコミットするために必要なすべての情報が見つからない場合は警告します。この記事の執筆時点では、欠落している作者情報のみを警告します。

@item  @samp{--author Author Name <Author Email>} 
パッチの説明に作者情報が見つからない場合に使用する作者名と電子メールアドレス。

@item  @samp{--patches <dir>} 
quiltパッチを見つけるためのディレクトリ。

パッチディレクトリのデフォルトは、 patches または @samp{$QUILT_PATCHES} 環境変数の値です。

@item  @samp{--series <file>} 
キルトシリーズファイル(quilt series file)。

シリーズファイルのデフォルトは、 <patches>/series または @samp{$QUILT_SERIES} 環境変数の値です。

@item  @samp{--keep-non-patch} 
@samp{-b} フラグを @emph{git mailinfo} に渡します(git-mailinfo(1) 参照)。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-range-diff,,,Top
@chapheading Name

git-range-diff — Compare two commit ranges (e.g. two versions of a branch)

@noindent

@chapheading Synopsis

@display
git range-diff [--color=[<when>]] [--no-color] [<diff-options>]
        [--no-dual-color] [--creation-factor=<factor>]
        [--left-only | --right-only]
        ( <range1> <range2> | <rev1>…<rev2> | <base> <rev1> <rev2> )
@end display


@noindent

@chapheading DESCRIPTION

This command shows the differences between two versions of a patch series,
or more generally, two commit ranges (ignoring merge commits).

To that end, it first finds pairs of commits from both commit ranges that
correspond with each other. Two commits are said to correspond when the diff
between their patches (i.e. the author information, the commit message and
the commit diff) is reasonably small compared to the patches' size. See
``Algorithm`` below for details.

Finally, the list of matching commits is shown in the order of the second
commit range, with unmatched commits being inserted just after all of their
ancestors have been shown.

There are three ways to specify the commit ranges:

@itemize 

@item
@samp{<range1> <range2>}: Either commit range can be of the form @samp{<base>..<rev>},
@samp{<rev>^!} or @samp{<rev>^-<n>}. See @samp{SPECIFYING RANGES} in
gitrevisions(7) for more details.

@item
@samp{<rev1>...<rev2>}. This is equivalent to @samp{<rev2>..<rev1> <rev1>..<rev2>}.

@item
@samp{<base> <rev1> <rev2>}: This is equivalent to @samp{<base>..<rev1>
<base>..<rev2>}.
@end itemize

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--no-dual-color} 
When the commit diffs differ, ‘git range-diff` recreates the original diffs’
coloring, and adds outer -/+ diff markers with the @strong{background} being
red/green to make it easier to see e.g.  when there was a change in what
exact lines were added.

Additionally, the commit diff lines that are only present in the first
commit range are shown "dimmed" (this can be overridden using the
@samp{color.diff.<slot>} config setting where @samp{<slot>} is one of @samp{contextDimmed},
@samp{oldDimmed} and @samp{newDimmed}), and the commit diff lines that are only
present in the second commit range are shown in bold (which can be
overridden using the config settings @samp{color.diff.<slot>} with @samp{<slot>} being
one of @samp{contextBold}, @samp{oldBold} or @samp{newBold}).

This is known to @samp{range-diff} as "dual coloring". Use @samp{--no-dual-color} to
revert to color all lines according to the outer diff markers (and
completely ignore the inner diff when it comes to color).

@item  @samp{--creation-factor=<percent>} 
Set the creation/deletion cost fudge factor to @samp{<percent>}.  Defaults to

@enumerate 

@item
Try a larger value if @samp{git range-diff} erroneously considers a large
change a total rewrite (deletion of one commit and addition of another), and
a smaller one in the reverse case.  See the ``Algorithm`` section below for
an explanation why this is needed.
@end enumerate

@item  @samp{--left-only} 
Suppress commits that are missing from the first specified range (or the
"left range" when using the @samp{<rev1>...<rev2>} format).

@item  @samp{--right-only} 
Suppress commits that are missing from the second specified range (or the
"right range" when using the @samp{<rev1>...<rev2>} format).

@item  @samp{--[no-]notes[=<ref>]} 
This flag is passed to the @samp{git log} program (see git-log(1)) that
generates the patches.

@item  <range1> <range2> 
Compare the commits specified by the two ranges, where @samp{<range1>} is
considered an older version of @samp{<range2>}.

@item  <rev1>…<rev2> 
Equivalent to passing @samp{<rev2>..<rev1>} and @samp{<rev1>..<rev2>}.

@item  <base> <rev1> <rev2> 
Equivalent to passing @samp{<base>..<rev1>} and @samp{<base>..<rev2>}.  Note that
@samp{<base>} does not need to be the exact branch point of the
branches. Example: after rebasing a branch @samp{my-topic}, @samp{git range-diff
my-topic@@@{u@} my-topic@@@{1@} my-topic} would show the differences introduced by
the rebase.
@end table

@samp{git range-diff} also accepts the regular diff options (see
git-diff(1)), most notably the @samp{--color=[<when>]} and @samp{--no-color}
options. These options are used when generating the "diff between patches",
i.e. to compare the author, commit message and diff of corresponding old/new
commits. There is currently no means to tweak most of the diff options
passed to @samp{git log} when generating those patches.

@noindent

@chapheading OUTPUT STABILITY

The output of the @samp{range-diff} command is subject to change. It is intended
to be human-readable porcelain output, not something that can be used across
versions of Git to get a textually stable @samp{range-diff} (as opposed to
something like the @samp{--stable} option to git-patch-id(1)). There’s
also no equivalent of git-apply(1) for @samp{range-diff}, the output is
not intended to be machine-readable.

This is particularly true when passing in diff options. Currently some
options like @samp{--stat} can, as an emergent effect, produce output that’s
quite useless in the context of @samp{range-diff}. Future versions of
@samp{range-diff} may learn to interpret such options in a manner specific to
@samp{range-diff} (e.g. for @samp{--stat} producing human-readable output which
summarizes how the diffstat changed).

@noindent

@chapheading CONFIGURATION

This command uses the @samp{diff.color.*} and @samp{pager.range-diff} settings (the
latter is on by default).  See git-config(1).

@noindent

@chapheading EXAMPLES

When a rebase required merge conflicts to be resolved, compare the changes
introduced by the rebase directly afterwards using:

@example
$ git range-diff @@@{u@} @@@{1@} @@
@end example


A typical output of @samp{git range-diff} would look like this:

@example
-:  ------- > 1:  0ddba11 Prepare for the inevitable!
1:  c0debee = 2:  cab005e Add a helpful message at the start
2:  f00dbal ! 3:  decafe1 Describe a bug
    @@@@ -1,3 +1,3 @@@@
     Author: A U Thor <author@@example.com>

    -TODO: Describe a bug
    +Describe a bug
    @@@@ -324,5 +324,6
      This is expected.

    -+What is unexpected is that it will also crash.
    ++Unexpectedly, it also crashes. This is a bug, and the jury is
    ++still out there how to fix it best. See ticket #314 for details.

      Contact
3:  bedead < -:  ------- TO-UNDO
@end example


In this example, there are 3 old and 3 new commits, where the developer
removed the 3rd, added a new one before the first two, and modified the
commit message of the 2nd commit as well its diff.

When the output goes to a terminal, it is color-coded by default, just like
regular @samp{git diff}'s output. In addition, the first line (adding a commit)
is green, the last line (deleting a commit) is red, the second line (with a
perfect match) is yellow like the commit header of @samp{git show}'s output, and
the third line colors the old commit red, the new one green and the rest
like @samp{git show}'s commit header.

A naive color-coded diff of diffs is actually a bit hard to read, though, as
it colors the entire lines red or green. The line that added "What is
unexpected" in the old commit, for example, is completely red, even if the
intent of the old commit was to add something.

To help with that, @samp{range} uses the @samp{--dual-color} mode by default. In this
mode, the diff of diffs will retain the original diff colors, and prefix the
lines with -/+ markers that have their @strong{background} red or green, to make it
more obvious that they describe how the diff itself changed.

@noindent

@chapheading Algorithm

The general idea is this: we generate a cost matrix between the commits in
both commit ranges, then solve the least-cost assignment.

The cost matrix is populated thusly: for each pair of commits, both diffs
are generated and the "diff of diffs" is generated, with 3 context lines,
then the number of lines in that diff is used as cost.

To avoid false positives (e.g. when a patch has been removed, and an
unrelated patch has been added between two iterations of the same patch
series), the cost matrix is extended to allow for that, by adding fixed-cost
entries for wholesale deletes/adds.

Example: Let commits @samp{1--2} be the first iteration of a patch series and
@samp{A--C} the second iteration. Let’s assume that @samp{A} is a cherry-pick of @samp{2,}
and @samp{C} is a cherry-pick of @samp{1} but with a small modification (say, a fixed
typo). Visualize the commits as a bipartite graph:

@example
    1            A

    2            B

                 C
@end example


We are looking for a "best" explanation of the new series in terms of the
old one. We can represent an "explanation" as an edge in the graph:

@example
    1            A
               /
    2 --------'  B

                 C
@end example


This explanation comes for "free" because there was no change. Similarly @samp{C}
could be explained using @samp{1}, but that comes at some cost c>0 because of the
modification:

@example
    1 ----.      A
          |    /
    2 ----+---'  B
          |
          `----- C
          c>0
@end example


In mathematical terms, what we are looking for is some sort of a minimum
cost bipartite matching; ‘1` is matched to @samp{C} at some cost, etc. The
underlying graph is in fact a complete bipartite graph; the cost we
associate with every edge is the size of the diff between the two commits’
patches. To explain also new commits, we introduce dummy nodes on both
sides:

@example
    1 ----.      A
          |    /
    2 ----+---'  B
          |
    o     `----- C
          c>0
    o            o

    o            o
@end example


The cost of an edge @samp{o--C} is the size of @samp{C}'s diff, modified by a fudge
factor that should be smaller than 100%. The cost of an edge @samp{o--o} is
free. The fudge factor is necessary because even if @samp{1} and @samp{C} have nothing
in common, they may still share a few empty lines and such, possibly making
the assignment @samp{1--C}, @samp{o--o} slightly cheaper than @samp{1--o}, @samp{o--C} even if
@samp{1} and @samp{C} have nothing in common. With the fudge factor we require a much
larger common part to consider patches as corresponding.

The overall time needed to compute this algorithm is the time needed to
compute n+m commit diffs and then n*m diffs of patches, plus the time needed
to compute the least-cost assignment between n and m diffs. Git uses an
implementation of the Jonker-Volgenant algorithm to solve the assignment
problem, which has cubic runtime complexity. The matching found in this case
will look like this:

@example
    1 ----.      A
          |    /
    2 ----+---'  B
       .--+-----'
    o -'  `----- C
          c>0
    o ---------- o

    o ---------- o
@end example


@noindent

@chapheading SEE ALSO

git-log(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-read-tree,,,Top
@chapheading Name

git-read-tree — Reads tree information into the index

@noindent

@chapheading Synopsis

@display
git read-tree [[-m [--trivial] [--aggressive] | --reset | --prefix=<prefix>]
                [-u [--exclude-per-directory=<gitignore>] | -i]]
                [--index-output=<file>] [--no-sparse-checkout]
                (--empty | <tree-ish1> [<tree-ish2> [<tree-ish3>]])
@end display


@noindent

@chapheading DESCRIPTION

Reads the tree information given by <tree-ish> into the index, but does not
actually @strong{update} any of the files it "caches". (see:
git-checkout-index(1))

Optionally, it can merge a tree into the index, perform a fast-forward
(i.e. 2-way) merge, or a 3-way merge, with the @samp{-m} flag.  When used with
@samp{-m}, the @samp{-u} flag causes it to also update the files in the work tree with
the result of the merge.

Trivial merges are done by @emph{git read-tree} itself.  Only conflicting paths
will be in unmerged state when @emph{git read-tree} returns.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-m} 
Perform a merge, not just a read.  The command will refuse to run if your
index file has unmerged entries, indicating that you have not finished
previous merge you started.

@item  @samp{--reset} 
Same as -m, except that unmerged entries are discarded instead of
failing. When used with @samp{-u}, updates leading to loss of working tree
changes will not abort the operation.

@item  @samp{-u} 
After a successful merge, update the files in the work tree with the result
of the merge.

@item  @samp{-i} 
Usually a merge requires the index file as well as the files in the working
tree to be up to date with the current head commit, in order not to lose
local changes.  This flag disables the check with the working tree and is
meant to be used when creating a merge of trees that are not directly
related to the current working tree status into a temporary index file.

@item  @samp{-n} 
@itemx  @samp{--dry-run} 
Check if the command would error out, without updating the index or the
files in the working tree for real.

@item  @samp{-v} 
Show the progress of checking files out.

@item  @samp{--trivial} 
Restrict three-way merge by @emph{git read-tree} to happen only if there is no
file-level merging required, instead of resolving merge for trivial cases
and leaving conflicting files unresolved in the index.

@item  @samp{--aggressive} 
Usually a three-way merge by @emph{git read-tree} resolves the merge for really
trivial cases and leaves other cases unresolved in the index, so that
porcelains can implement different merge policies.  This flag makes the
command resolve a few more cases internally:

@itemize 

@item
when one side removes a path and the other side leaves the path unmodified.
The resolution is to remove that path.

@item
when both sides remove a path.  The resolution is to remove that path.

@item
when both sides add a path identically.  The resolution is to add that path.
@end itemize

@item  @samp{--prefix=<prefix>} 
Keep the current index contents, and read the contents of the named tree-ish
under the directory at @samp{<prefix>}.  The command will refuse to overwrite
entries that already existed in the original index file.

@item  @samp{--exclude-per-directory=<gitignore>} 
When running the command with @samp{-u} and @samp{-m} options, the merge result may
need to overwrite paths that are not tracked in the current branch.  The
command usually refuses to proceed with the merge to avoid losing such a
path.  However this safety valve sometimes gets in the way.  For example, it
often happens that the other branch added a file that used to be a generated
file in your branch, and the safety valve triggers when you try to switch to
that branch after you ran @samp{make} but before running @samp{make clean} to remove
the generated file.  This option tells the command to read per-directory
exclude file (usually @emph{.gitignore}) and allows such an untracked but
explicitly ignored file to be overwritten.

@item  @samp{--index-output=<file>} 
Instead of writing the results out to @samp{$GIT_INDEX_FILE}, write the resulting
index in the named file.  While the command is operating, the original index
file is locked with the same mechanism as usual.  The file must allow to be
rename(2)ed into from a temporary file that is created next to the usual
index file; typically this means it needs to be on the same filesystem as
the index file itself, and you need write permission to the directories the
index file and index output file are located in.

@item  @samp{--[no-]recurse-submodules} 
Using --recurse-submodules will update the content of all active submodules
according to the commit recorded in the superproject by calling read-tree
recursively, also setting the submodules' HEAD to be detached at that
commit.

@item  @samp{--no-sparse-checkout} 
Disable sparse checkout support even if @samp{core.sparseCheckout} is true.

@item  @samp{--empty} 
Instead of reading tree object(s) into the index, just empty it.

@item  @samp{-q} 
@itemx  @samp{--quiet} 
Quiet, suppress feedback messages.

@item  <tree-ish#> 
The id of the tree object(s) to be read/merged.
@end table

@noindent

@chapheading MERGING

If @samp{-m} is specified, @emph{git read-tree} can perform 3 kinds of merge, a single
tree merge if only 1 tree is given, a fast-forward merge with 2 trees, or a
3-way merge if 3 or more trees are provided.

@noindent

@heading Single Tree Merge

If only 1 tree is specified, @emph{git read-tree} operates as if the user did not
specify @samp{-m}, except that if the original index has an entry for a given
pathname, and the contents of the path match with the tree being read, the
stat info from the index is used. (In other words, the index’s stat()s take
precedence over the merged tree’s).

That means that if you do a @samp{git read-tree -m <newtree>} followed by a @samp{git
checkout-index -f -u -a}, the @emph{git checkout-index} only checks out the stuff
that really changed.

This is used to avoid unnecessary false hits when @emph{git diff-files} is run
after @emph{git read-tree}.

@noindent

@heading Two Tree Merge

Typically, this is invoked as @samp{git read-tree -m $H $M}, where $H is the head
commit of the current repository, and $M is the head of a foreign tree,
which is simply ahead of $H (i.e. we are in a fast-forward situation).

When two trees are specified, the user is telling @emph{git read-tree} the
following:

@enumerate 

@item
The current index and work tree is derived from $H, but
the user may have local changes in them since $H.

@item
The user wants to fast-forward to $M.
@end enumerate

In this case, the @samp{git read-tree -m $H $M} command makes sure that no local
change is lost as the result of this "merge".  Here are the "carry forward"
rules, where "I" denotes the index, "clean" means that index and work tree
coincide, and "exists"/"nothing" refer to the presence of a path in the
specified commit:

@example
        I                   H        M        Result
       -------------------------------------------------------
     0  nothing             nothing  nothing  (does not happen)
     1  nothing             nothing  exists   use M
     2  nothing             exists   nothing  remove path from index
     3  nothing             exists   exists,  use M if "initial checkout",
                                     H == M   keep index otherwise
                                     exists,  fail
                                     H != M

        clean I==H  I==M
       ------------------
     4  yes   N/A   N/A     nothing  nothing  keep index
     5  no    N/A   N/A     nothing  nothing  keep index

     6  yes   N/A   yes     nothing  exists   keep index
     7  no    N/A   yes     nothing  exists   keep index
     8  yes   N/A   no      nothing  exists   fail
     9  no    N/A   no      nothing  exists   fail

     10 yes   yes   N/A     exists   nothing  remove path from index
     11 no    yes   N/A     exists   nothing  fail
     12 yes   no    N/A     exists   nothing  fail
     13 no    no    N/A     exists   nothing  fail

        clean (H==M)
       ------
     14 yes                 exists   exists   keep index
     15 no                  exists   exists   keep index

        clean I==H  I==M (H!=M)
       ------------------
     16 yes   no    no      exists   exists   fail
     17 no    no    no      exists   exists   fail
     18 yes   no    yes     exists   exists   keep index
     19 no    no    yes     exists   exists   keep index
     20 yes   yes   no      exists   exists   use M
     21 no    yes   no      exists   exists   fail
@end example

In all "keep index" cases, the index entry stays as in the original index
file.  If the entry is not up to date, @emph{git read-tree} keeps the copy in the
work tree intact when operating under the -u flag.

When this form of @emph{git read-tree} returns successfully, you can see which of
the "local changes" that you made were carried forward by running @samp{git
diff-index --cached $M}.  Note that this does not necessarily match what
@samp{git diff-index --cached $H} would have produced before such a two tree
merge.  This is because of cases 18 and 19 --- if you already had the
changes in $M (e.g. maybe you picked it up via e-mail in a patch form), @samp{git
diff-index --cached $H} would have told you about the change before this
merge, but it would not show in @samp{git diff-index --cached $M} output after
the two-tree merge.

Case 3 is slightly tricky and needs explanation.  The result from this rule
logically should be to remove the path if the user staged the removal of the
path and then switching to a new branch.  That however will prevent the
initial checkout from happening, so the rule is modified to use M (new tree)
only when the content of the index is empty.  Otherwise the removal of the
path is kept as long as $H and $M are the same.

@noindent

@heading 3-Way Merge

Each "index" entry has two bits worth of "stage" state. stage 0 is the
normal one, and is the only one you’d see in any kind of normal use.

However, when you do @emph{git read-tree} with three trees, the "stage" starts
out at 1.

This means that you can do

@example
$ git read-tree -m <tree1> <tree2> <tree3>
@end example


and you will end up with an index with all of the <tree1> entries in
"stage1", all of the <tree2> entries in "stage2" and all of the <tree3>
entries in "stage3".  When performing a merge of another branch into the
current branch, we use the common ancestor tree as <tree1>, the current
branch head as <tree2>, and the other branch head as <tree3>.

Furthermore, @emph{git read-tree} has special-case logic that says: if you see a
file that matches in all respects in the following states, it "collapses"
back to "stage0":

@itemize 

@item
stage 2 and 3 are the same; take one or the other (it makes no difference -
the same work has been done on our branch in stage 2 and their branch in
stage 3)

@item
stage 1 and stage 2 are the same and stage 3 is different; take stage 3 (our
branch in stage 2 did not do anything since the ancestor in stage 1 while
their branch in stage 3 worked on it)

@item
stage 1 and stage 3 are the same and stage 2 is different take stage 2 (we
did something while they did nothing)
@end itemize

The @emph{git write-tree} command refuses to write a nonsensical tree, and it
will complain about unmerged entries if it sees a single entry that is not
stage 0.

OK, this all sounds like a collection of totally nonsensical rules, but it’s
actually exactly what you want in order to do a fast merge. The different
stages represent the "result tree" (stage 0, aka "merged"), the original
tree (stage 1, aka "orig"), and the two trees you are trying to merge (stage
2 and 3 respectively).

The order of stages 1, 2 and 3 (hence the order of three <tree-ish>
command-line arguments) are significant when you start a 3-way merge with an
index file that is already populated.  Here is an outline of how the
algorithm works:

@itemize 

@item
if a file exists in identical format in all three trees, it will
automatically collapse to "merged" state by @emph{git read-tree}.

@item
a file that has @emph{any} difference what-so-ever in the three trees will stay
as separate entries in the index. It’s up to "porcelain policy" to determine
how to remove the non-0 stages, and insert a merged version.

@item
the index file saves and restores with all this information, so you can
merge things incrementally, but as long as it has entries in stages 1/2/3
(i.e., "unmerged entries") you can’t write the result. So now the merge
algorithm ends up being really simple:

@itemize 

@item
you walk the index in order, and ignore all entries of stage 0, since
they’ve already been done.

@item
if you find a "stage1", but no matching "stage2" or "stage3", you know it’s
been removed from both trees (it only existed in the original tree), and you
remove that entry.

@item
if you find a matching "stage2" and "stage3" tree, you remove one of them,
and turn the other into a "stage0" entry. Remove any matching "stage1" entry
if it exists too.  .. all the normal trivial rules ..
@end itemize
@end itemize

You would normally use @emph{git merge-index} with supplied @emph{git merge-one-file}
to do this last step.  The script updates the files in the working tree as
it merges each path and at the end of a successful merge.

When you start a 3-way merge with an index file that is already populated,
it is assumed that it represents the state of the files in your work tree,
and you can even have files with changes unrecorded in the index file.  It
is further assumed that this state is "derived" from the stage 2 tree.  The
3-way merge refuses to run if it finds an entry in the original index file
that does not match stage 2.

This is done to prevent you from losing your work-in-progress changes, and
mixing your random changes in an unrelated merge commit.  To illustrate,
suppose you start from what has been committed last to your repository:

@example
$ JC=`git rev-parse --verify "HEAD^0"`
$ git checkout-index -f -u -a $JC
@end example


You do random edits, without running @emph{git update-index}.  And then you
notice that the tip of your "upstream" tree has advanced since you pulled
from him:

@example
$ git fetch git://.... linus
$ LT=`git rev-parse FETCH_HEAD`
@end example


Your work tree is still based on your HEAD ($JC), but you have some edits
since.  Three-way merge makes sure that you have not added or modified index
entries since $JC, and if you haven’t, then does the right thing.  So with
the following sequence:

@example
$ git read-tree -m -u `git merge-base $JC $LT` $JC $LT
$ git merge-index git-merge-one-file -a
$ echo "Merge with Linus" | \
  git commit-tree `git write-tree` -p $JC -p $LT
@end example


what you would commit is a pure merge between $JC and $LT without your
work-in-progress changes, and your work tree would be updated to the result
of the merge.

However, if you have local changes in the working tree that would be
overwritten by this merge, @emph{git read-tree} will refuse to run to prevent
your changes from being lost.

In other words, there is no need to worry about what exists only in the
working tree.  When you have local changes in a part of the project that is
not involved in the merge, your changes do not interfere with the merge, and
are kept intact.  When they @strong{do} interfere, the merge does not even start
(@emph{git read-tree} complains loudly and fails without modifying anything).  In
such a case, you can simply continue doing what you were in the middle of
doing, and when your working tree is ready (i.e. you have finished your
work-in-progress), attempt the merge again.

@noindent

@chapheading SPARSE CHECKOUT

"Sparse checkout" allows populating the working directory sparsely.  It uses
the skip-worktree bit (see git-update-index(1)) to tell Git whether
a file in the working directory is worth looking at.

@emph{git read-tree} and other merge-based commands (@emph{git merge}, @emph{git
checkout}…) can help maintaining the skip-worktree bitmap and working
directory update. @samp{$GIT_DIR/info/sparse-checkout} is used to define the
skip-worktree reference bitmap. When @emph{git read-tree} needs to update the
working directory, it resets the skip-worktree bit in the index based on
this file, which uses the same syntax as .gitignore files.  If an entry
matches a pattern in this file, skip-worktree will not be set on that
entry. Otherwise, skip-worktree will be set.

Then it compares the new skip-worktree value with the previous one. If
skip-worktree turns from set to unset, it will add the corresponding file
back. If it turns from unset to set, that file will be removed.

While @samp{$GIT_DIR/info/sparse-checkout} is usually used to specify what files
are in, you can also specify what files are @emph{not} in, using negate
patterns. For example, to remove the file @samp{unwanted}:

@example
/*
!unwanted
@end example


Another tricky thing is fully repopulating the working directory when you no
longer want sparse checkout. You cannot just disable "sparse checkout"
because skip-worktree bits are still in the index and your working directory
is still sparsely populated. You should re-populate the working directory
with the @samp{$GIT_DIR/info/sparse-checkout} file content as follows:

@example
/*
@end example


Then you can disable sparse checkout. Sparse checkout support in @emph{git
read-tree} and similar commands is disabled by default. You need to turn
@samp{core.sparseCheckout} on in order to have sparse checkout support.

@noindent

@chapheading SEE ALSO

git-write-tree(1); git-ls-files(1); gitignore(5);
git-sparse-checkout(1);

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-rebase,,,Top
@chapheading Name

git-rebase — 別のベースの先端のその先頭にコミットを再適用します

@noindent

@chapheading Synopsis

@display
git rebase [-i | --interactive] [<options>] [--exec <cmd>]
        [--onto <newbase> | --keep-base] [<upstream> [<branch>]]
git rebase [-i | --interactive] [<options>] [--exec <cmd>] [--onto <newbase>]
        --root [<branch>]
git rebase (--continue | --skip | --abort | --quit | --edit-todo | --show-current-patch)
@end display


@noindent

@chapheading DESCRIPTION

<branch>が指定されている場合、 @emph{git rebase} は他の処理を行う前に自動で @samp{git switch <branch>}
を実行します。それ以外の場合は、現在のブランチに残ります。

<upstream> が指定されていない場合、 branch.<name>.remote と branch.<name>.merge
オプションで構成されたアップストリーム(詳細は git-config(1) を参照)および @samp{--fork-point}
オプションが想定されています。現在のブランチを使用していない場合、または現在のブランチにアップストリームが構成されていない場合、リベースは中止されます。

現在のブランチでコミットによって行われたが、<upstream>にないすべての変更は、一時領域に保存されます。 これは @samp{git log
<upstream>..HEAD} で表示されるのと同じコミットのセットで、または @samp{--fork-point} がアクティブな場合 @samp{git log
'fork_point'..HEAD} で表示されるのと同じコミットのセットで、または @samp{--root} オプションが指定されている場合 @samp{git
log HEAD} で表示されるのと同じコミットのセットです。

現在のブランチは<upstream>にリセットされ、または @samp{--onto}
オプションが指定されている場合は<newbase>にリセットされます。これは、 @samp{git reset --hard <upstream>}
(または<newbase>)とまったく同じ効果があります。 ORIG_HEADは、リセット前にブランチの先端を指すように設定されています。

以前に一時領域に保存されたコミットは、現在のブランチに1つずつ順番に再適用されます。注意: @samp{HEAD..<upstream>}
でのコミットと同一のテキスト変更を導入するHEADでのコミットは省略されることに注意してください(つまり、異なるコミットメッセージまたはタイムスタンプで、アップストリームで既に受け入れ済のパッチはスキップされます)。

マージに失敗すると、このプロセスが完全には自動で行われなくなる事があります。あなたは、このようなマージの失敗を解決し、そして @samp{git rebase
--continue} を実行する必要があります。 別のオプションとしては、 @samp{git rebase --skip}
でマージの失敗を引き起こしたコミットをバイパスすることです。そして、元の<branch>をチェックアウトし、@samp{.git/rebase-apply}
作業ファイルを削除するには、代わりにコマンド @samp{git rebase --abort} を使用します。

以下の履歴が存在し、現在のブランチが「topic」であると想定します:

@example
          A---B---C topic
         /
    D---E---F---G master
@end example


この時点で、以下のコマンドのどちらかを実行します:

@example
git rebase master
git rebase master topic
@end example

そうすると以下のようになります:

@example
                  A'--B'--C' topic
                 /
    D---E---F---G master
@end example


@strong{注意:} 後者の形式は、@samp{git checkout topic} の後に @samp{git rebase master} が続く省略形です。
リベースが終了すると、
@samp{topic} はチェックアウトされたブランチのままになります。

(たとえば、アップストリームに適用されたパッチをメールで送信したため)アップストリームブランチにすでに行った変更が含まれている場合、そのコミットはスキップされ、警告が発行されます(@samp{merge}
バックエンドが使用されている場合)。たとえば、以下の履歴で @samp{git rebase master} を実行します(@samp{A'} と @samp{A}
は同じ変更セットを導入しますが、コミッター情報は異なります):

@example
          A---B---C topic
         /
    D---E---A'---F master
@end example


その結果は

@example
                   B'---C' topic
                  /
    D---E---A'---F master
@end example


これは、あるブランチに基づいてトピックブランチを別のブランチに移植し、 @samp{rebase --onto}
を使用して、トピックブランチを後者のブランチからフォークしたふりをする方法です。

まず、「topic」がブランチ「next」に基づいているとしましょう。
たとえば「topic」で開発された機能は、「next」にあるいくつかの機能に依存しています。

@example
    o---o---o---o---o  master
         \
          o---o---o---o---o  next
                           \
                            o---o---o  topic
@end example


我々は @emph{topic} をブランチ @emph{master}
からフォークさせたいのです。たとえば「topic」が依存する機能が、より安定した「master」ブランチにマージされたためです。
ツリーを以下のようにしたいわけです:

@example
    o---o---o---o---o  master
        |            \
        |             o'--o'--o'  topic
         \
          o---o---o---o---o  next
@end example


これは、以下のコマンドを使用して取得できます:

@example
git rebase --onto master next topic
@end example

@samp{--onto} オプションの別の例は、ブランチの一部をリベースすることです。 以下のような状況の場合:

@example
                            H---I---J topicB
                           /
                  E---F---G  topicA
                 /
    A---B---C---D  master
@end example


そして、以下のコマンドを実行します

@example
git rebase --onto master topicA topicB
@end example

そうすると結果は以下のようになります:

@example
                 H'--I'--J'  topicB
                /
                | E---F---G  topicA
                |/
    A---B---C---D  master
@end example


これは、topicBがtopicAに依存していない場合に役立ちます。

コミットの範囲は、リベースで削除することもできます。以下の状況の場合:

@example
    E---F---G---H---I---J  topicA
@end example


そして、以下のコマンドを実行します

@example
git rebase --onto topicA~5 topicA~3 topicA
@end example

そうすると、以下のようにコミットFとGが削除されます:

@example
    E---H'---I'---J'  topicA
@end example


これは、FとGに何らかの欠陥がある場合、または、topicAの一部であってはならない場合に役立ちます。注意: @samp{--onto}
と<upstream>パラメーターの引数は、任意の有効なコミットっぽい何か(commit-ish)にすることができることに注意してください。

競合が発生した場合、「git rebase」は最初の問題のあるコミットで停止し、ツリーに競合マーカーを残します。 @emph{git diff}
を使用して、マーカー(<<<<<<)を見つけ、編集して競合を解決できます。編集するファイルごとに、競合が解決されたことをGitに通知する必要があります。通常、これは以下の方法で行います。

@example
git add <filename>
@end example

競合を手動で解決し、あなたが欲する解決策でインデックスを更新した後、以下のコマンドでリベースプロセスを続行できます。

@example
git rebase --continue
@end example

あるいは、「git rebase」を元に戻す(undo)こともできます

@example
git rebase --abort
@end example

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--onto <newbase>} 
新しいコミットを作成する開始点。 @samp{--onto}
オプションが指定されていない場合、開始点は<upstream>です。これは、既存のブランチ名だけでなく、任意の有効なコミットである可能性があります。

特別な場合として、マージベースが1つしかない場合は、AとBのマージベースのショートカットとして "A...B"
を使用できます。最大でAとBのいずれかを省略できます。その場合、デフォルトでHEADになります。

@item  @samp{--keep-base} 
<upstream> <branch> のマージベースへの新しいコミットを作成する開始点を設定します。 @samp{git rebase --keep-base
<upstream> <branch>} を実行することは @samp{git rebase --onto <upstream>... <upstream>}
を実行することと同じです。

このオプションは、アップストリームブランチの先頭で機能を開発している場合に役立ちます。この機能が働いている間に、アップストリームのブランチが進むことがあり、アップストリームの先頭にリベースを続けるのは得策ではなく、ベースのコミットをそのままにしておくことがあります。

このオプションと @samp{--fork-point}
はどちらも<upstream>と<branch>の間のマージベースを検索します。しかし、このオプションは新しいコミットが作成される「開始点」としてマージベースを使用します。一方
@samp{--fork-point} はマージベースを使用して、リベースされる「コミットのセット」を決定します。

以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。

@item  <upstream> 
比較するアップストリームブランチ。既存のブランチ名だけでなく、任意の有効なコミットである可能性があります。デフォルトは、現在のブランチ用に構成されたアップストリームです。

@item  <branch> 
作業するブランチ。デフォルトはHEADです。

@item  @samp{--continue} 
マージの競合を解決した後、リベースプロセスを再開します。

@item  @samp{--abort} 
リベース操作を中止(abort)し、HEADを元のブランチにリセットします。リベース操作の開始時に<branch>が指定された場合、HEADは<branch>にリセットされます。それ以外の場合、HEADはリベース操作が開始されたときの位置にリセットされます。

@item  @samp{--quit} 
リベース操作を中止(abort)しますが、HEADは元のブランチにリセットされません。その結果、インデックスと作業ツリーも変更されません。
@samp{--autostash} を使用して一時的なstashエントリが作成された場合、それはstashリストに保存されます。

@item  @samp{--apply} 
適用戦略(applying strategies)を使用してリベースします(内部で @samp{git-am}
を呼び出します)。このオプションは、マージバックエンドがapplyのすべてを処理すると、将来的には動作しなくなる可能性があります。

以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。

@item  @samp{--empty=@{drop,keep,ask@}} 
任意のアップストリームコミットの、開始時は空ではなく、かつ、クリーンでは無いチェリーピックであるが、(すでにアップストリームの変更のサブセットが含まれているため、)リベース後に空になるコミットを処理する方法。dropを使用すると、空になるコミットはドロップされます(これがデフォルトです)。keepを使用すると、そのようなコミットは保持されます。
ask
を使用すると、空のコミットが適用されるとリベースが停止し、ドロップするか、ファイルをさらに編集するか、空の変更をコミットするかを選択できます(@samp{--interactive}
の指定を含んでいます)。@samp{--exec} などの他のオプションでは、-i /
-interactiveが明示的に指定されていない限り、デフォルトのドロップが使用されます。

注意: (@samp{--no-keep-empty}
が指定されていない場合、)空で開始するコミットは保持され、(@samp{--reapply-cherry-picks} が渡されない限り)準備ステップとして、(
@samp{git log --cherry-mark ...} によって決定される)クリーンなチェリーピックであるコミットが検出・ドロップされます。

以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。

@item  @samp{--no-keep-empty} 
@itemx  @samp{--keep-empty} 
Do not keep commits that start empty before the rebase (i.e. that do not
change anything from its parent) in the result.  The default is to keep
commits which start empty, since creating such commits requires passing the
--allow-empty override flag to @samp{git commit}, signifying that a user is very
intentionally creating such a commit and thus wants to keep it.

Usage of this flag will probably be rare, since you can get rid of commits
that start empty by just firing up an interactive rebase and removing the
lines corresponding to the commits you don’t want.  This flag exists as a
convenient shortcut, such as for cases where external tools generate many
empty commits and you want them all removed.

空では開始されないが、リベース後に空になるコミットについては、 @samp{--empty} フラグを参照してください。

以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。

@item  @samp{--reapply-cherry-picks} 
@itemx  @samp{--no-reapply-cherry-picks} 
Reapply all clean cherry-picks of any upstream commit instead of
preemptively dropping them. (If these commits then become empty after
rebasing, because they contain a subset of already upstream changes, the
behavior towards them is controlled by the @samp{--empty} flag.)

By default (or if @samp{--no-reapply-cherry-picks} is given), these commits will
be automatically dropped.  Because this necessitates reading all upstream
commits, this can be expensive in repos with a large number of upstream
commits that need to be read.  When using the @samp{merge} backend, warnings will
be issued for each dropped commit (unless @samp{--quiet} is given). Advice will
also be issued unless @samp{advice.skippedCherryPicks} is set to false (see
git-config(1)).

@samp{--reapply-cherry-picks}
を使用すると、リベースはすべてのアップストリームコミットの読み取りを放棄できるため、パフォーマンスが向上する可能性があります。

以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。

@item  @samp{--allow-empty-message} 
No-op.  Rebasing commits with an empty message used to fail and this option
would override that behavior, allowing commits with empty messages to be
rebased.  Now commits with an empty message do not cause rebasing to halt.

以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。

@item  @samp{--skip} 
現在のパッチをスキップして、リベースプロセスを再開します。

@item  @samp{--edit-todo} 
対話的リベース中にToDoリストを編集します。

@item  @samp{--show-current-patch} 
対話的なリベース、または、競合のためにリベースが停止されたときに、現在のパッチを表示します。 これは @samp{git show REBASE_HEAD}
と同等です。

@item  @samp{-m} 
@itemx  @samp{--merge} 
マージ戦略(merging strategies)を使用してリベースします(デフォルト)。

Note that a rebase merge works by replaying each commit from the working
branch on top of the <upstream> branch.  Because of this, when a merge
conflict happens, the side reported as @emph{ours} is the so-far rebased series,
starting with <upstream>, and @emph{theirs} is the working branch.  In other
words, the sides are swapped.

以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。

@item  @samp{-s <strategy>} 
@itemx  @samp{--strategy=<strategy>} 
デフォルトの @samp{ort} の代わりに、指定のマージ戦略を使用します。 このオプションは @samp{--merge} の指定を含んでいます。

Because @emph{git rebase} replays each commit from the working branch on top of
the <upstream> branch using the given strategy, using the @emph{ours} strategy
simply empties all patches from the <branch>, which makes little sense.

以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。

@item  @samp{-X <strategy-option>} 
@itemx  @samp{--strategy-option=<strategy-option>} 
Pass the <strategy-option> through to the merge strategy.  This implies
@samp{--merge} and, if no strategy has been specified, @samp{-s ort}.  Note the
reversal of @emph{ours} and @emph{theirs} as noted above for the @samp{-m} option.

以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。

@item  @samp{--rerere-autoupdate} 
@itemx  @samp{--no-rerere-autoupdate} 
可能であれば、rerereメカニズムが自動競合解決の結果でインデックスを更新できるようにします。

@item  @samp{-S[<keyid>]} 
@itemx  @samp{--gpg-sign[=<keyid>]} 
@itemx  @samp{--no-gpg-sign} 
GPG-sign commits. The @samp{keyid} argument is optional and defaults to the
committer identity; if specified, it must be stuck to the option without a
space. @samp{--no-gpg-sign} is useful to countermand both @samp{commit.gpgSign}
configuration variable, and earlier @samp{--gpg-sign}.

@item  @samp{-q} 
@itemx  @samp{--quiet} 
静かにします。このオプションは @samp{--no-stat} を含んでいます。

@item  @samp{-v} 
@itemx  @samp{--verbose} 
おしゃべりになります。 @samp{--stat} を含んでいます。

@item  @samp{--stat} 
最後のリベース以降にアップストリームで変更されたもののdiffstatを表示します。 diffstatは、構成オプション rebase.stat
によっても制御されます。

@item  @samp{-n} 
@itemx  @samp{--no-stat} 
リベースプロセスの一部としてdiffstatを表示しないでください。

@item  @samp{--no-verify} 
このオプションは、リベース前のフックをバイパスします。 githooks(5) も参照してください。

@item  @samp{--verify} 
プリリベースフック(pre-rebase hook)の実行を許可します。これがデフォルトです。このオプションは、 @samp{--no-verify}
をオーバーライドするために使用できます。 githooks(5) も参照してください。

@item  @samp{-C<n>} 
Ensure at least <n> lines of surrounding context match before and after each
change.  When fewer lines of surrounding context exist they all must match.
By default no context is ever ignored.  Implies --apply.

以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。

@item  @samp{--no-ff} 
@itemx  @samp{--force-rebase} 
@itemx  @samp{-f} 
Individually replay all rebased commits instead of fast-forwarding over the
unchanged ones.  This ensures that the entire history of the rebased branch
is composed of new commits.

You may find this helpful after reverting a topic branch merge, as this
option recreates the topic branch with fresh commits so it can be remerged
successfully without needing to "revert the reversion" (see the
@uref{howto/revert-a-faulty-merge.html,revert-a-faulty-merge How-To} for
details).

@item  @samp{--fork-point} 
@itemx  @samp{--no-fork-point} 
<branch>によって導入されたコミットを計算するときに、reflogを使用して、<upstream>と<branch>の間の、より一般的な祖先を見つけます。

When --fork-point is active, @emph{fork_point} will be used instead of <upstream>
to calculate the set of commits to rebase, where @emph{fork_point} is the result
of @samp{git merge-base --fork-point <upstream> <branch>} command (see
git-merge-base(1)).  If @emph{fork_point} ends up being empty, the
<upstream> will be used as a fallback.

コマンドラインで<upstream>が指定されている場合、デフォルトは @samp{--no-fork-point} です。それ以外の場合、デフォルトは
@samp{--fork-point} です。

If your branch was based on <upstream> but <upstream> was rewound and your
branch contains commits which were dropped, this option can be used with
@samp{--keep-base} in order to drop those commits from your branch.

以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。

@item  @samp{--ignore-whitespace} 
差分を調整しようとするときは、空白の違いを無視してください。現在、各バックエンドはこの振る舞いの近似を実装しています:

apply backend: When applying a patch, ignore changes in whitespace in
context lines. Unfortunately, this means that if the "old" lines being
replaced by the patch differ only in whitespace from the existing file, you
will get a merge conflict instead of a successful patch application.

merge backend: Treat lines with only whitespace changes as unchanged when
merging. Unfortunately, this means that any patch hunks that were intended
to modify whitespace and nothing else will be dropped, even if the other
side had no changes that conflicted.

@item  @samp{--whitespace=<option>} 
このフラグは、パッチを適用する「git apply」プログラム(git-apply(1) を参照)に渡されます。 @samp{--apply}
の意味を含んでいます。

以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。

@item  @samp{--committer-date-is-author-date} 
Instead of using the current time as the committer date, use the author date
of the commit being rebased as the committer date. This option implies
@samp{--force-rebase}.

@item  @samp{--ignore-date} 
@itemx  @samp{--reset-author-date} 
Instead of using the author date of the original commit, use the current
time as the     author date of the rebased commit.  This option implies
@samp{--force-rebase}.

以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。

@item  @samp{--signoff} 
Add a @samp{Signed-off-by} trailer to all the rebased commits. Note that if
@samp{--interactive} is given then only commits marked to be picked, edited or
reworded will have the trailer added.

以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。

@item  @samp{-i} 
@itemx  @samp{--interactive} 
Make a list of the commits which are about to be rebased.  Let the user edit
that list before rebasing.  This mode can also be used to split commits (see
SPLITTING COMMITS below).

The commit list format can be changed by setting the configuration option
rebase.instructionFormat.  A customized instruction format will
automatically have the long commit hash prepended to the format.

以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。

@item  @samp{-r} 
@itemx  @samp{--rebase-merges[=(rebase-cousins|no-rebase-cousins)]} 
By default, a rebase will simply drop merge commits from the todo list, and
put the rebased commits into a single, linear branch.  With
@samp{--rebase-merges}, the rebase will instead try to preserve the branching
structure within the commits that are to be rebased, by recreating the merge
commits. Any resolved merge conflicts or manual amendments in these merge
commits will have to be resolved/re-applied manually.

By default, or when @samp{no-rebase-cousins} was specified, commits which do not
have @samp{<upstream>} as direct ancestor will keep their original branch point,
i.e. commits that would be excluded by git-log(1)'s
@samp{--ancestry-path} option will keep their original ancestry by default. If
the @samp{rebase-cousins} mode is turned on, such commits are instead rebased
onto @samp{<upstream>} (or @samp{<onto>}, if specified).

The @samp{--rebase-merges} mode is similar in spirit to the deprecated
@samp{--preserve-merges} but works with interactive rebases, where commits can be
reordered, inserted and dropped at will.

It is currently only possible to recreate the merge commits using the @samp{ort}
merge strategy; different merge strategies can be used only via explicit
@samp{exec git merge -s <strategy> [...]} commands.

以下の「REBASING MERGES」(マージのリベース)および「INCOMPATIBLE
OPTIONS」(互換性のないオプション)も参照してください。

@item  @samp{-p} 
@itemx  @samp{--preserve-merges} 
[DEPRECATED: use @samp{--rebase-merges} instead] Recreate merge commits instead
of flattening the history by replaying commits a merge commit
introduces. Merge conflict resolutions or manual amendments to merge commits
are not preserved.

This uses the @samp{--interactive} machinery internally, but combining it with
the @samp{--interactive} option explicitly is generally not a good idea unless
you know what you are doing (see BUGS below).

以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。

@item  @samp{-x <cmd>} 
@itemx  @samp{--exec <cmd>} 
Append "exec <cmd>" after each line creating a commit in the final
history. <cmd> will be interpreted as one or more shell commands. Any
command that fails will interrupt the rebase, with exit code 1.

@samp{--exec} の1つのインスタンスを複数のコマンドで使用することにより、複数のコマンドを実行できます:

@example
git rebase -i --exec "cmd1 && cmd2 && ..."
@end example

または、複数の @samp{--exec} を指定します:

@example
git rebase -i --exec "cmd1" --exec "cmd2" --exec ...
@end example

@samp{--autosquash} が使用されている場合、「exec」行は中間コミットに追加されず、各スカッシュ/修正シリーズの最後にのみ現れます。

これは内部で @samp{--interactive} 機構を使用しますが、明示的な @samp{--interactive} の指定なしで実行できます。

以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。

@item  @samp{--root} 
Rebase all commits reachable from <branch>, instead of limiting them with an
<upstream>.  This allows you to rebase the root commit(s) on a branch.  When
used with --onto, it will skip changes already contained in <newbase>
(instead of <upstream>) whereas without --onto it will operate on every
change.  When used together with both --onto and --preserve-merges, @emph{all}
root commits will be rewritten to have <newbase> as parent instead.

以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。

@item  @samp{--autosquash} 
@itemx  @samp{--no-autosquash} 
When the commit log message begins with "squash! …" or "fixup! …" or
"amend! …", and there is already a commit in the todo list that matches
the same @samp{...}, automatically modify the todo list of @samp{rebase -i}, so that
the commit marked for squashing comes right after the commit to be modified,
and change the action of the moved commit from @samp{pick} to @samp{squash} or @samp{fixup}
or @samp{fixup -C} respectively. A commit matches the @samp{...} if the commit subject
matches, or if the @samp{...} refers to the commit’s hash. As a fall-back,
partial matches of the commit subject work, too. The recommended way to
create fixup/amend/squash commits is by using the @samp{--fixup},
@samp{--fixup=amend:} or @samp{--fixup=reword:} and @samp{--squash} options respectively of
git-commit(1).

If the @samp{--autosquash} option is enabled by default using the configuration
variable @samp{rebase.autoSquash}, this option can be used to override and
disable this setting.

以下の「INCOMPATIBLE OPTIONS」セクションもご覧下さい。

@item  @samp{--autostash} 
@itemx  @samp{--no-autostash} 
Automatically create a temporary stash entry before the operation begins,
and apply it after the operation ends.  This means that you can run rebase
on a dirty worktree.  However, use with care: the final stash application
after a successful rebase might result in non-trivial conflicts.

@item  @samp{--reschedule-failed-exec} 
@itemx  @samp{--no-reschedule-failed-exec} 
失敗した @samp{exec} コマンドを自動的に再スケジュールします。 これは、対話モード(または @samp{--exec}
オプションが提供された場合)でのみ意味があります。

Even though this option applies once a rebase is started, it’s set for the
whole rebase at the start based on either the @samp{rebase.rescheduleFailedExec}
configuration (see git-config(1) or "CONFIGURATION" below) or
whether this option is provided. Otherwise an explicit
@samp{--no-reschedule-failed-exec} at the start would be overridden by the
presence of @samp{rebase.rescheduleFailedExec=true} configuration.
@end table

@noindent

@chapheading INCOMPATIBLE OPTIONS

これら、

@itemize 

@item
@samp{--apply}

@item
@samp{--whitespace}

@item
@samp{-C}
@end itemize

は、以下のオプションと互換性がありません:

@itemize 

@item
@samp{--merge}

@item
@samp{--strategy}

@item
@samp{--strategy-option}

@item
@samp{--allow-empty-message}

@item
@samp{--[no-]autosquash}

@item
@samp{--rebase-merges}

@item
@samp{--preserve-merges}

@item
@samp{--interactive}

@item
@samp{--exec}

@item
@samp{--no-keep-empty}

@item
@samp{--empty=}

@item
@samp{--reapply-cherry-picks}

@item
@samp{--edit-todo}

@item
@samp{--onto} と組み合わせて使用する場合の @samp{--root}
@end itemize

加えて、以下のオプションの組み合わせには互換性がありません:

@itemize 

@item
@samp{--preserve-merges} かつ @samp{--interactive}

@item
@samp{--preserve-merges} かつ @samp{--signoff}

@item
@samp{--preserve-merges} かつ @samp{--rebase-merges}

@item
@samp{--preserve-merges} かつ @samp{--empty=}

@item
@samp{--preserve-merges} かつ @samp{--ignore-whitespace}

@item
@samp{--preserve-merges} かつ @samp{--committer-date-is-author-date}

@item
@samp{--preserve-merges} かつ @samp{--ignore-date}

@item
@samp{--keep-base} かつ @samp{--onto}

@item
@samp{--keep-base} かつ @samp{--root}

@item
@samp{--fork-point} かつ @samp{--root}
@end itemize

@noindent

@chapheading 振る舞いの違い

git rebase has two primary backends: apply and merge.  (The apply backend
used to be known as the @emph{am} backend, but the name led to confusion as it
looks like a verb instead of a noun.  Also, the merge backend used to be
known as the interactive backend, but it is now used for non-interactive
cases as well.  Both were renamed based on lower-level functionality that
underpinned each.) There are some subtle differences in how these two
backends behave:

@noindent

@heading 空のコミット

The apply backend unfortunately drops intentionally empty commits, i.e.
commits that started empty, though these are rare in practice.  It also
drops commits that become empty and has no option for controlling this
behavior.

The merge backend keeps intentionally empty commits by default (though with
-i they are marked as empty in the todo list editor, or they can be dropped
automatically with --no-keep-empty).

Similar to the apply backend, by default the merge backend drops commits
that become empty unless -i/--interactive is specified (in which case it
stops and asks the user what to do).  The merge backend also has an
--empty=@{drop,keep,ask@} option for changing the behavior of handling commits
that become empty.

@noindent

@heading ディレクトリ名変更の検知

Due to the lack of accurate tree information (arising from constructing fake
ancestors with the limited information available in patches), directory
rename detection is disabled in the apply backend.  Disabled directory
rename detection means that if one side of history renames a directory and
the other adds new files to the old directory, then the new files will be
left behind in the old directory without any warning at the time of rebasing
that you may want to move these files into the new directory.

ディレクトリ名変更の検出は、マージバックエンドと連携して、このような場合に警告を提供します。

@noindent

@heading Context

The apply backend works by creating a sequence of patches (by calling
@samp{format-patch} internally), and then applying the patches in sequence
(calling @samp{am} internally).  Patches are composed of multiple hunks, each
with line numbers, a context region, and the actual changes.  The line
numbers have to be taken with some fuzz, since the other side will likely
have inserted or deleted lines earlier in the file.  The context region is
meant to help find how to adjust the line numbers in order to apply the
changes to the right lines.  However, if multiple areas of the code have the
same surrounding lines of context, the wrong one can be picked.  There are
real-world cases where this has caused commits to be reapplied incorrectly
with no conflicts reported.  Setting diff.context to a larger value may
prevent such types of problems, but increases the chance of spurious
conflicts (since it will require more lines of matching context to apply).

マージバックエンドは、関連する各ファイルの完全なコピーを使って動作し、これらの種類の問題からファイルを保護します。

@noindent

@heading Labelling of conflicts markers

When there are content conflicts, the merge machinery tries to annotate each
side’s conflict markers with the commits where the content came from.  Since
the apply backend drops the original information about the rebased commits
and their parents (and instead generates new fake commits based off limited
information in the generated patches), those commits cannot be identified;
instead it has to fall back to a commit summary.  Also, when
merge.conflictStyle is set to diff3, the apply backend will use "constructed
merge base" to label the content from the merge base, and thus provide no
information about the merge base commit whatsoever.

マージバックエンドは、履歴の両側で完全なコミットで動作するため、そのような制限はありません。

@noindent

@heading フック

The apply backend has not traditionally called the post-commit hook, while
the merge backend has.  Both have called the post-checkout hook, though the
merge backend has squelched its output.  Further, both backends only call
the post-checkout hook with the starting point commit of the rebase, not the
intermediate commits nor the final commit.  In each case, the calling of
these hooks was by accident of implementation rather than by design (both
backends were originally implemented as shell scripts and happened to invoke
other commands like @emph{git checkout} or @emph{git commit} that would call the
hooks).  Both backends should have the same behavior, though it is not
entirely clear which, if any, is correct.  We will likely make rebase stop
calling either of these hooks in the future.

@noindent

@heading Interruptability

The apply backend has safety problems with an ill-timed interrupt; if the
user presses Ctrl-C at the wrong time to try to abort the rebase, the rebase
can enter a state where it cannot be aborted with a subsequent @samp{git rebase
--abort}.  The merge backend does not appear to suffer from the same
shortcoming.  (See
@uref{https://lore.kernel.org/git/20200207132152.GC2868@@szeder.dev/,https://lore.kernel.org/git/20200207132152.GC2868@@szeder.dev/} for details.)

@noindent

@heading Commit Rewording

When a conflict occurs while rebasing, rebase stops and asks the user to
resolve.  Since the user may need to make notable changes while resolving
conflicts, after conflicts are resolved and the user has run @samp{git rebase
--continue}, the rebase should open an editor and ask the user to update the
commit message.  The merge backend does this, while the apply backend
blindly applies the original commit message.

@noindent

@heading Miscellaneous differences

ほとんどの人がおそらく取るに足らないと考えるであろうが、完全性のためにいくつかの振る舞いの違いについて言及します:

@itemize 

@item
Reflog: 2つのバックエンドは、reflogで行われた変更を説明するときに異なる表現を使用しますが、どちらも「リベース」という単語を使用します。

@item
Progress, informational, and error messages: The two backends provide
slightly different progress and informational messages.  Also, the apply
backend writes error messages (such as "Your files would be overwritten…")
to stdout, while the merge backend writes them to stderr.

@item
状態ディレクトリ: 2つのバックエンドは、.git/ の下の異なるディレクトリに状態を保持します
@end itemize

@noindent

@chapheading MERGE STRATEGIES

The merge mechanism (@samp{git merge} and @samp{git pull} commands) allows the backend
@emph{merge strategies} to be chosen with @samp{-s} option.  Some strategies can also
take their own options, which can be passed by giving @samp{-X<option>} arguments
to @samp{git merge} and/or @samp{git pull}.

@table @asis

@item  ort 
This is the default merge strategy when pulling or merging one branch.  This
strategy can only resolve two heads using a 3-way merge algorithm.  When
there is more than one common ancestor that can be used for 3-way merge, it
creates a merged tree of the common ancestors and uses that as the reference
tree for the 3-way merge.  This has been reported to result in fewer merge
conflicts without causing mismerges by tests done on actual merge commits
taken from Linux 2.6 kernel development history.  Additionally this strategy
can detect and handle merges involving renames.  It does not make use of
detected copies.  The name for this algorithm is an acronym ("Ostensibly
Recursive’s Twin") and came from the fact that it was written as a
replacement for the previous default algorithm, @samp{recursive}.

The @emph{ort} strategy can take the following options:

@table @asis

@item  ours 
This option forces conflicting hunks to be auto-resolved cleanly by favoring
@emph{our} version.  Changes from the other tree that do not conflict with our
side are reflected in the merge result.  For a binary file, the entire
contents are taken from our side.

This should not be confused with the @emph{ours} merge strategy, which does not
even look at what the other tree contains at all.  It discards everything
the other tree did, declaring @emph{our} history contains all that happened in
it.

@item  theirs 
This is the opposite of @emph{ours}; note that, unlike @emph{ours}, there is no
@emph{theirs} merge strategy to confuse this merge option with.

@item  ignore-space-change 
@itemx  ignore-all-space 
@itemx  ignore-space-at-eol 
@itemx  ignore-cr-at-eol 
Treats lines with the indicated type of whitespace change as unchanged for
the sake of a three-way merge.  Whitespace changes mixed with other changes
to a line are not ignored.  See also git-diff(1) @samp{-b}, @samp{-w},
@samp{--ignore-space-at-eol}, and @samp{--ignore-cr-at-eol}.

@itemize 

@item
If @emph{their} version only introduces whitespace changes to a line, @emph{our}
version is used;

@item
If @emph{our} version introduces whitespace changes but @emph{their} version includes
a substantial change, @emph{their} version is used;

@item
Otherwise, the merge proceeds in the usual way.
@end itemize

@item  renormalize 
This runs a virtual check-out and check-in of all three stages of a file
when resolving a three-way merge.  This option is meant to be used when
merging branches with different clean filters or end-of-line normalization
rules.  See "Merging branches with differing checkin/checkout attributes" in
gitattributes(5) for details.

@item  no-renormalize 
Disables the @samp{renormalize} option.  This overrides the @samp{merge.renormalize}
configuration variable.

@item  find-renames[=<n>] 
Turn on rename detection, optionally setting the similarity threshold.  This
is the default. This overrides the @emph{merge.renames} configuration variable.
See also git-diff(1) @samp{--find-renames}.

@item  rename-threshold=<n> 
Deprecated synonym for @samp{find-renames=<n>}.

@item  subtree[=<path>] 
This option is a more advanced form of @emph{subtree} strategy, where the
strategy makes a guess on how two trees must be shifted to match with each
other when merging.  Instead, the specified path is prefixed (or stripped
from the beginning) to make the shape of two trees to match.
@end table

@item  recursive 
This can only resolve two heads using a 3-way merge algorithm.  When there
is more than one common ancestor that can be used for 3-way merge, it
creates a merged tree of the common ancestors and uses that as the reference
tree for the 3-way merge.  This has been reported to result in fewer merge
conflicts without causing mismerges by tests done on actual merge commits
taken from Linux 2.6 kernel development history.  Additionally this can
detect and handle merges involving renames.  It does not make use of
detected copies.  This was the default strategy for resolving two heads from
Git v0.99.9k until v2.33.0.

The @emph{recursive} strategy takes the same options as @emph{ort}.  However, there
are three additional options that @emph{ort} ignores (not documented above) that
are potentially useful with the @emph{recursive} strategy:

@table @asis

@item  patience 
Deprecated synonym for @samp{diff-algorithm=patience}.

@item  diff-algorithm=[patience|minimal|histogram|myers] 
Use a different diff algorithm while merging, which can help avoid mismerges
that occur due to unimportant matching lines (such as braces from distinct
functions).  See also git-diff(1) @samp{--diff-algorithm}.  Note that
@samp{ort} specifically uses @samp{diff-algorithm=histogram}, while @samp{recursive}
defaults to the @samp{diff.algorithm} config setting.

@item  no-renames 
Turn off rename detection. This overrides the @samp{merge.renames} configuration
variable.  See also git-diff(1) @samp{--no-renames}.
@end table

@item  resolve 
This can only resolve two heads (i.e. the current branch and another branch
you pulled from) using a 3-way merge algorithm.  It tries to carefully
detect criss-cross merge ambiguities.  It does not handle renames.

@item  octopus 
This resolves cases with more than two heads, but refuses to do a complex
merge that needs manual resolution.  It is primarily meant to be used for
bundling topic branch heads together.  This is the default merge strategy
when pulling or merging more than one branch.

@item  ours 
This resolves any number of heads, but the resulting tree of the merge is
always that of the current branch head, effectively ignoring all changes
from all other branches.  It is meant to be used to supersede old
development history of side branches.  Note that this is different from the
-Xours option to the @emph{recursive} merge strategy.

@item  subtree 
This is a modified @samp{ort} strategy. When merging trees A and B, if B
corresponds to a subtree of A, B is first adjusted to match the tree
structure of A, instead of reading the trees at the same level. This
adjustment is also done to the common ancestor tree.
@end table

With the strategies that use 3-way merge (including the default, @emph{ort}), if
a change is made on both branches, but later reverted on one of the
branches, that change will be present in the merged result; some people find
this behavior confusing.  It occurs because only the heads and the merge
base are considered when performing a merge, not the individual commits.
The merge algorithm therefore considers the reverted change as no change at
all, and substitutes the changed version instead.

@noindent

@chapheading NOTES

共有リポジトリで「git rebase」を使用することの意味を理解する必要があります。 下記の「RECOVERING FROM UPSTREAM
REBASE」も参照してください。

When the git-rebase command is run, it will first execute a "pre-rebase"
hook if one exists.  You can use this hook to do sanity checks and reject
the rebase if it isn’t appropriate.  Please see the template pre-rebase hook
script for an example.

完了すると、<branch>が現在のブランチになります。

@noindent

@chapheading INTERACTIVE MODE

対話的にリベースするということは、リベースされるコミットを編集する機会があることを意味します。コミットを並べ替えたり、削除したりできます(不良パッチやその他の不要なパッチを削除します)。

対話的モードは、以下の種類の作業の流れを対象としています:

@enumerate 

@item
素晴らしいアイデアを思いついた

@item
コードをハックハック

@item
提出用のシリーズを準備する

@item
送信
@end enumerate

ここで、(2)は、以下のいくつかの内容で構成されています

a) 通常

@enumerate 

@item
コミットに値する何かを終える

@item
コミット
@end enumerate

b) 独立した修正

@enumerate 

@item
何かが機能しないことに気付く

@item
そいつを修正する

@item
それをコミット
@end enumerate

Sometimes the thing fixed in b.2. cannot be amended to the not-quite perfect
commit it fixes, because that commit is buried deeply in a patch series.
That is exactly what interactive rebase is for: use it after plenty of "a"s
and "b"s, by rearranging and editing commits, and squashing multiple commits
into one.

あなたがそのまま保持したい最後のコミットから開始します:

@example
git rebase -i <after-this-commit>
@end example

An editor will be fired up with all the commits in your current branch
(ignoring merge commits), which come after the given commit.  You can
reorder the commits in this list to your heart’s content, and you can remove
them.  The list looks more or less like this:

@example
pick deadbee The oneline of this commit
pick fa1afe1 The oneline of the next commit
...
@end example


The oneline descriptions are purely for your pleasure; @emph{git rebase} will not
look at them but at the commit names ("deadbee" and "fa1afe1" in this
example), so do not delete or edit the names.

By replacing the command "pick" with the command "edit", you can tell @emph{git
rebase} to stop after applying that commit, so that you can edit the files
and/or the commit message, amend the commit, and continue rebasing.

リベースを中断するには(「edit」コマンドと同じように、ただし最初にコミットを選択せずに)、「break」コマンドを使用します。

コミットのコミットメッセージを編集するだけの場合は、コマンド「pick」をコマンド「reword」に置き換えます。

コミットを削除するには、コマンド「pick」を「drop」に置き換えるか、マッチする行を削除します。

If you want to fold two or more commits into one, replace the command "pick"
for the second and subsequent commits with "squash" or "fixup".  If the
commits had different authors, the folded commit will be attributed to the
author of the first commit.  The suggested commit message for the folded
commit is the concatenation of the first commit’s message with those
identified by "squash" commands, omitting the messages of commits identified
by "fixup" commands, unless "fixup -c" is used.  In that case the suggested
commit message is only the message of the "fixup -c" commit, and an editor
is opened allowing you to edit the message.  The contents (patch) of the
"fixup -c" commit are still incorporated into the folded commit. If there is
more than one "fixup -c" commit, the message from the final one is used.
You can also use "fixup -C" to get the same behavior as "fixup -c" except
without opening an editor.

@emph{git rebase} will stop when "pick" has been replaced with "edit" or when a
command fails due to merge errors. When you are done editing and/or
resolving conflicts you can continue with @samp{git rebase --continue}.

For example, if you want to reorder the last 5 commits, such that what was
HEAD~4 becomes the new HEAD. To achieve that, you would call @emph{git rebase}
like this:

@example
$ git rebase -i HEAD~5
@end example


そして、最初のパッチをリストの最後に移動します。

たとえば、あなたが以下のような歴史を持っているなら、マージコミットを再作成することをお勧めします:

@example
           X
            \
         A---M---B
        /
---o---O---P---Q
@end example


あなたは「A」から「Q」までのサイドブランチをリベースしたいとします。 現在のHEADが「B」であることを確認して

@example
$ git rebase -i -r --onto Q O
@end example


Reordering and editing commits usually creates untested intermediate steps.
You may want to check that your history editing did not break anything by
running a test, or at least recompiling at intermediate points in history by
using the "exec" command (shortcut "x").  You may do so by creating a todo
list like this one:

@example
pick deadbee Implement feature XXX
fixup f1a5c00 Fix to feature XXX
exec make
pick c0ffeee The oneline of the next commit
edit deadbab The oneline of the commit after
exec cd subdir; make test
...
@end example


The interactive rebase will stop when a command fails (i.e. exits with non-0
status) to give you an opportunity to fix the problem. You can continue with
@samp{git rebase --continue}.

The "exec" command launches the command in a shell (the one specified in
@samp{$SHELL}, or the default shell if @samp{$SHELL} is not set), so you can use shell
features (like "cd", ">", ";" …). The command is run from the root of the
working tree.

@example
$ git rebase -i --exec "make test"
@end example


このコマンドを使用すると、中間コミットがコンパイル可能であることを確認できます。ToDoリストは以下のようになります:

@example
pick 5928aea one
exec make test
pick 04d0fda two
exec make test
pick ba46169 three
exec make test
pick f4593f9 four
exec make test
@end example


@noindent

@chapheading コミットの分割

In interactive mode, you can mark commits with the action "edit".  However,
this does not necessarily mean that @emph{git rebase} expects the result of this
edit to be exactly one commit.  Indeed, you can undo the commit, or you can
add other commits.  This can be used to split a commit into two:

@itemize 

@item
Start an interactive rebase with @samp{git rebase -i <commit>^}, where <commit>
is the commit you want to split.  In fact, any commit range will do, as long
as it contains that commit.

@item
分割するコミットを、アクション「edit」でマークします。

@item
When it comes to editing that commit, execute @samp{git reset HEAD^}.  The effect
is that the HEAD is rewound by one, and the index follows suit.  However,
the working tree stays the same.

@item
Now add the changes to the index that you want to have in the first commit.
You can use @samp{git add} (possibly interactively) or @emph{git gui} (or both) to do
that.

@item
最新の適切なコミットメッセージを使用して、最新の「現在のインデックス」をコミットします。

@item
作業ツリーがクリーンになるまで、最後の2つの手順を繰り返します。

@item
@samp{git rebase --continue} でリベースを続行します。
@end itemize

If you are not absolutely sure that the intermediate revisions are
consistent (they compile, pass the testsuite, etc.) you should use @emph{git
stash} to stash away the not-yet-committed changes after each commit, test,
and amend the commit if fixes are necessary.

@noindent

@chapheading RECOVERING FROM UPSTREAM REBASE

Rebasing (or any other form of rewriting) a branch that others have based
work on is a bad idea: anyone downstream of it is forced to manually fix
their history.  This section explains how to do the fix from the
downstream’s point of view.  The real fix, however, would be to avoid
rebasing the upstream in the first place.

To illustrate, suppose you are in a situation where someone develops a
@emph{subsystem} branch, and you are working on a @emph{topic} that is dependent on
this @emph{subsystem}.  You might end up with a history like the following:

@example
    o---o---o---o---o---o---o---o  master
         \
          o---o---o---o---o  subsystem
                           \
                            *---*---*  topic
@end example


@emph{subsystem} が @emph{master} に対してリベースされる場合、以下が発生します:

@example
    o---o---o---o---o---o---o---o  master
         \                       \
          o---o---o---o---o       o'--o'--o'--o'--o'  subsystem
                           \
                            *---*---*  topic
@end example


これで通常どおり開発を続行し、最終的に「topic」を「subsystem」にマージすると、「subsystem」からのコミットは永久に複製されたままになります:

@example
    o---o---o---o---o---o---o---o  master
         \                       \
          o---o---o---o---o       o'--o'--o'--o'--o'--M  subsystem
                           \                         /
                            *---*---*-..........-*--*  topic
@end example


Such duplicates are generally frowned upon because they clutter up history,
making it harder to follow.  To clean things up, you need to transplant the
commits on @emph{topic} to the new @emph{subsystem} tip, i.e., rebase @emph{topic}.  This
becomes a ripple effect: anyone downstream from @emph{topic} is forced to rebase
too, and so on!

以下のサブセクションで議論する2種類の修正があります:

@table @asis

@item  簡単な場合: 変更は文字通り同じ(same) 
これは、 @emph{subsystem} のリベースが単純なリベースであり、競合がなかった場合に発生します。

@item  難しい場合: 変更は同じではありません 
This happens if the @emph{subsystem} rebase had conflicts, or used
@samp{--interactive} to omit, edit, squash, or fixup commits; or if the upstream
used one of @samp{commit --amend}, @samp{reset}, or a full history rewriting command
like @uref{https://github.com/newren/git-filter-repo,@samp{filter-repo}}.
@end table

@noindent

@heading 簡単な場合

Only works if the changes (patch IDs based on the diff contents) on
@emph{subsystem} are literally the same before and after the rebase @emph{subsystem}
did.

In that case, the fix is easy because @emph{git rebase} knows to skip changes
that are already present in the new upstream (unless
@samp{--reapply-cherry-picks} is given). So if you say (assuming you’re on
@emph{topic})

@example
    $ git rebase subsystem
@end example


あなたは修正された履歴で終わります。

@example
    o---o---o---o---o---o---o---o  master
                                 \
                                  o'--o'--o'--o'--o'  subsystem
                                                   \
                                                    *---*---*  topic
@end example


@noindent

@heading 難しい場合

@emph{subsystem} の変更がリベース前の変更に正確に対応していない場合、事態はさらに複雑になります。

@quotation

@strong{Note}

While an "easy case recovery" sometimes appears to be successful
even in the hard case, it may have unintended consequences.  For
example, a commit that was removed via @samp{git rebase
--interactive} will be @strong{resurrected}!
@end quotation

The idea is to manually tell @emph{git rebase} "where the old @emph{subsystem} ended
and your @emph{topic} began", that is, what the old merge base between them was.
You will have to find a way to name the last commit of the old @emph{subsystem},
for example:

@itemize 

@item
With the @emph{subsystem} reflog: after @emph{git fetch}, the old tip of @emph{subsystem}
is at @samp{subsystem@@@{1@}}.  Subsequent fetches will increase the number.  (See
git-reflog(1).)

@item
@emph{topic’の先端に関連して: 'topic} に3つのコミットがあることを知っているので、 @emph{subsystem} の古い先端は @samp{topic~3}
でなければなりません。
@end itemize

次に、あなたは以下のように言って、古い @samp{subsystem..topic} を新しい先端に移植できます(reflogの場合、すでに @emph{topic}
にいると仮定します):

@example
    $ git rebase --onto subsystem subsystem@@@{1@}
@end example


The ripple effect of a "hard case" recovery is especially bad: @emph{everyone}
downstream from @emph{topic} will now have to perform a "hard case" recovery too!

@noindent

@chapheading REBASING MERGES

The interactive rebase command was originally designed to handle individual
patch series. As such, it makes sense to exclude merge commits from the todo
list, as the developer may have merged the then-current @samp{master} while
working on the branch, only to rebase all the commits onto @samp{master}
eventually (skipping the merge commits).

However, there are legitimate reasons why a developer may want to recreate
merge commits: to keep the branch structure (or "commit topology") when
working on multiple, inter-related branches.

In the following example, the developer works on a topic branch that
refactors the way buttons are defined, and on another topic branch that uses
that refactoring to implement a "Report a bug" button. The output of @samp{git
log --graph --format=%s -5} may look like this:

@example
*   Merge branch 'report-a-bug'
|\
| * Add the feedback button
* | Merge branch 'refactor-button'
|\ \
| |/
| * Use the Button class for all buttons
| * Extract a generic Button class from the DownloadButton one
@end example


The developer might want to rebase those commits to a newer @samp{master} while
keeping the branch topology, for example when the first topic branch is
expected to be integrated into @samp{master} much earlier than the second one,
say, to resolve merge conflicts with changes to the DownloadButton class
that made it into @samp{master}.

This rebase can be performed using the @samp{--rebase-merges} option.  It will
generate a todo list looking like this:

@example
label onto

# Branch: refactor-button
reset onto
pick 123456 Extract a generic Button class from the DownloadButton one
pick 654321 Use the Button class for all buttons
label refactor-button

# Branch: report-a-bug
reset refactor-button # Use the Button class for all buttons
pick abcdef Add the feedback button
label report-a-bug

reset onto
merge -C a1b2c3 refactor-button # Merge 'refactor-button'
merge -C 6f5e4d report-a-bug # Merge 'report-a-bug'
@end example


In contrast to a regular interactive rebase, there are @samp{label}, @samp{reset} and
@samp{merge} commands in addition to @samp{pick} ones.

The @samp{label} command associates a label with the current HEAD when that
command is executed. These labels are created as worktree-local refs
(@samp{refs/rewritten/<label>}) that will be deleted when the rebase
finishes. That way, rebase operations in multiple worktrees linked to the
same repository do not interfere with one another. If the @samp{label} command
fails, it is rescheduled immediately, with a helpful message how to proceed.

The @samp{reset} command resets the HEAD, index and worktree to the specified
revision. It is similar to an @samp{exec git reset --hard <label>}, but refuses
to overwrite untracked files. If the @samp{reset} command fails, it is
rescheduled immediately, with a helpful message how to edit the todo list
(this typically happens when a @samp{reset} command was inserted into the todo
list manually and contains a typo).

The @samp{merge} command will merge the specified revision(s) into whatever is
HEAD at that time. With @samp{-C <original-commit>}, the commit message of the
specified merge commit will be used. When the @samp{-C} is changed to a
lower-case @samp{-c}, the message will be opened in an editor after a successful
merge so that the user can edit the message.

If a @samp{merge} command fails for any reason other than merge conflicts (i.e.
when the merge operation did not even start), it is rescheduled immediately.

By default, the @samp{merge} command will use the @samp{ort} merge strategy for
regular merges, and @samp{octopus} for octopus merges.  One can specify a default
strategy for all merges using the @samp{--strategy} argument when invoking
rebase, or can override specific merges in the interactive list of commands
by using an @samp{exec} command to call @samp{git merge} explicitly with a
@samp{--strategy} argument.  Note that when calling @samp{git merge} explicitly like
this, you can make use of the fact that the labels are worktree-local refs
(the ref @samp{refs/rewritten/onto} would correspond to the label @samp{onto}, for
example) in order to refer to the branches you want to merge.

Note: the first command (@samp{label onto}) labels the revision onto which the
commits are rebased; The name @samp{onto} is just a convention, as a nod to the
@samp{--onto} option.

It is also possible to introduce completely new merge commits from scratch
by adding a command of the form @samp{merge <merge-head>}. This form will
generate a tentative commit message and always open an editor to let the
user edit it. This can be useful e.g. when a topic branch turns out to
address more than a single concern and wants to be split into two or even
more topic branches. Consider this todo list:

@example
pick 192837 Switch from GNU Makefiles to CMake
pick 5a6c7e Document the switch to CMake
pick 918273 Fix detection of OpenSSL in CMake
pick afbecd http: add support for TLS v1.3
pick fdbaec Fix detection of cURL in CMake on Windows
@end example


The one commit in this list that is not related to CMake may very well have
been motivated by working on fixing all those bugs introduced by switching
to CMake, but it addresses a different concern. To split this branch into
two topic branches, the todo list could be edited like this:

@example
label onto

pick afbecd http: add support for TLS v1.3
label tlsv1.3

reset onto
pick 192837 Switch from GNU Makefiles to CMake
pick 918273 Fix detection of OpenSSL in CMake
pick fdbaec Fix detection of cURL in CMake on Windows
pick 5a6c7e Document the switch to CMake
label cmake

reset onto
merge tlsv1.3
merge cmake
@end example


@noindent

@chapheading CONFIGURATION

@table @asis

@item  rebase.backend 
Default backend to use for rebasing.  Possible choices are @emph{apply} or
@emph{merge}.  In the future, if the merge backend gains all remaining
capabilities of the apply backend, this setting may become unused.

@item  rebase.stat 
Whether to show a diffstat of what changed upstream since the last
rebase. False by default.

@item  rebase.autoSquash 
If set to true enable @samp{--autosquash} option by default.

@item  rebase.autoStash 
When set to true, automatically create a temporary stash entry before the
operation begins, and apply it after the operation ends.  This means that
you can run rebase on a dirty worktree.  However, use with care: the final
stash application after a successful rebase might result in non-trivial
conflicts.  This option can be overridden by the @samp{--no-autostash} and
@samp{--autostash} options of git-rebase(1).  Defaults to false.

@item  rebase.missingCommitsCheck 
If set to "warn", git rebase -i will print a warning if some commits are
removed (e.g. a line was deleted), however the rebase will still proceed. If
set to "error", it will print the previous warning and stop the rebase, @emph{git
rebase --edit-todo} can then be used to correct the error. If set to
"ignore", no checking is done.  To drop a commit without warning or error,
use the @samp{drop} command in the todo list.  Defaults to "ignore".

@item  rebase.instructionFormat 
A format string, as specified in git-log(1), to be used for the todo
list during an interactive rebase.  The format will automatically have the
long commit hash prepended to the format.

@item  rebase.abbreviateCommands 
If set to true, @samp{git rebase} will use abbreviated command names in the todo
list resulting in something like this:

@example
        p deadbee The oneline of the commit
        p fa1afe1 The oneline of the next commit
        ...
@end example


instead of:

@example
        pick deadbee The oneline of the commit
        pick fa1afe1 The oneline of the next commit
        ...
@end example


Defaults to false.

@item  rebase.rescheduleFailedExec 
Automatically reschedule @samp{exec} commands that failed. This only makes sense
in interactive mode (or when an @samp{--exec} option was provided).  This is the
same as specifying the @samp{--reschedule-failed-exec} option.

@item  rebase.forkPoint 
If set to false set @samp{--no-fork-point} option by default.

@item  sequence.editor 
リベース命令ファイル(rebase instruction file)を編集するために @samp{git rebase -i}
によって使用されるテキストエディタ。この値は、使用時にシェルによって解釈されることを意図しています。 これは、
@samp{GIT_SEQUENCE_EDITOR}
環境変数によってオーバーライドできます。構成されていない場合は、代わりにデフォルトのコミットメッセージエディタが使用されます。
@end table

@noindent

@chapheading BUGS

The todo list presented by the deprecated @samp{--preserve-merges --interactive}
does not represent the topology of the revision graph (use @samp{--rebase-merges}
instead).  Editing commits and rewording their commit messages should work
fine, but attempts to reorder commits tend to produce counterintuitive
results.  Use @samp{--rebase-merges} in such scenarios instead.

For example, an attempt to rearrange

@example
1 --- 2 --- 3 --- 4 --- 5
@end example


to

@example
1 --- 2 --- 4 --- 3 --- 5
@end example


by moving the "pick 4" line will result in the following history:

@example
        3
       /
1 --- 2 --- 4 --- 5
@end example


@noindent

@chapheading GIT

Part of the git(1) suite

@node git-receive-pack,,,Top
@chapheading Name

git-receive-pack — Receive what is pushed into the repository

@noindent

@chapheading Synopsis

@display
git-receive-pack <directory>
@end display


@noindent

@chapheading DESCRIPTION

Invoked by @emph{git send-pack} and updates the repository with the information
fed from the remote end.

This command is usually not invoked directly by the end user.  The UI for
the protocol is on the @emph{git send-pack} side, and the program pair is meant
to be used to push updates to remote repository.  For pull operations, see
git-fetch-pack(1).

The command allows for creation and fast-forwarding of sha1 refs
(heads/tags) on the remote end (strictly speaking, it is the local end
@emph{git-receive-pack} runs, but to the user who is sitting at the send-pack
end, it is updating the remote.  Confused?)

There are other real-world examples of using update and post-update hooks
found in the Documentation/howto directory.

@emph{git-receive-pack} honours the receive.denyNonFastForwards config option,
which tells it if updates to a ref should be denied if they are not
fast-forwards.

A number of other receive.* config options are available to tweak its
behavior, see git-config(1).

@noindent

@chapheading OPTIONS

@table @asis

@item  <directory> 
The repository to sync into.

@item  @samp{--http-backend-info-refs} 
Used by git-http-backend(1) to serve up
@samp{$GIT_URL/info/refs?service=git-receive-pack} requests. See
@samp{--http-backend-info-refs} in git-upload-pack(1).
@end table

@noindent

@chapheading PRE-RECEIVE HOOK

Before any ref is updated, if $GIT_DIR/hooks/pre-receive file exists and is
executable, it will be invoked once with no parameters.  The standard input
of the hook will be one line per ref to be updated:

@example
sha1-old SP sha1-new SP refname LF
@end example

The refname value is relative to $GIT_DIR; e.g. for the master head this is
"refs/heads/master".  The two sha1 values before each refname are the object
names for the refname before and after the update.  Refs to be created will
have sha1-old equal to 0@{40@}, while refs to be deleted will have sha1-new
equal to 0@{40@}, otherwise sha1-old and sha1-new should be valid objects in
the repository.

When accepting a signed push (see git-push(1)), the signed push
certificate is stored in a blob and an environment variable @samp{GIT_PUSH_CERT}
can be consulted for its object name.  See the description of @samp{post-receive}
hook for an example.  In addition, the certificate is verified using GPG and
the result is exported with the following environment variables:

@table @asis

@item  @samp{GIT_PUSH_CERT_SIGNER} 
The name and the e-mail address of the owner of the key that signed the push
certificate.

@item  @samp{GIT_PUSH_CERT_KEY} 
The GPG key ID of the key that signed the push certificate.

@item  @samp{GIT_PUSH_CERT_STATUS} 
The status of GPG verification of the push certificate, using the same
mnemonic as used in @samp{%G?} format of @samp{git log} family of commands (see
git-log(1)).

@item  @samp{GIT_PUSH_CERT_NONCE} 
The nonce string the process asked the signer to include in the push
certificate.  If this does not match the value recorded on the "nonce"
header in the push certificate, it may indicate that the certificate is a
valid one that is being replayed from a separate "git push" session.

@item  @samp{GIT_PUSH_CERT_NONCE_STATUS} 
@table @asis

@item  @samp{UNSOLICITED} 
"git push --signed" sent a nonce when we did not ask it to send one.

@item  @samp{MISSING} 
"git push --signed" did not send any nonce header.

@item  @samp{BAD} 
"git push --signed" sent a bogus nonce.

@item  @samp{OK} 
"git push --signed" sent the nonce we asked it to send.

@item  @samp{SLOP} 
"git push --signed" sent a nonce different from what we asked it to send
now, but in a previous session.  See @samp{GIT_PUSH_CERT_NONCE_SLOP} environment
variable.
@end table

@item  @samp{GIT_PUSH_CERT_NONCE_SLOP} 
"git push --signed" sent a nonce different from what we asked it to send
now, but in a different session whose starting time is different by this
many seconds from the current session.  Only meaningful when
@samp{GIT_PUSH_CERT_NONCE_STATUS} says @samp{SLOP}.  Also read about
@samp{receive.certNonceSlop} variable in git-config(1).
@end table

This hook is called before any refname is updated and before any
fast-forward checks are performed.

If the pre-receive hook exits with a non-zero exit status no updates will be
performed, and the update, post-receive and post-update hooks will not be
invoked either.  This can be useful to quickly bail out if the update is not
to be supported.

See the notes on the quarantine environment below.

@noindent

@chapheading UPDATE HOOK

Before each ref is updated, if $GIT_DIR/hooks/update file exists and is
executable, it is invoked once per ref, with three parameters:

@example
$GIT_DIR/hooks/update refname sha1-old sha1-new
@end example

The refname parameter is relative to $GIT_DIR; e.g. for the master head this
is "refs/heads/master".  The two sha1 arguments are the object names for the
refname before and after the update.  Note that the hook is called before
the refname is updated, so either sha1-old is 0@{40@} (meaning there is no
such ref yet), or it should match what is recorded in refname.

The hook should exit with non-zero status if it wants to disallow updating
the named ref.  Otherwise it should exit with zero.

Successful execution (a zero exit status) of this hook does not ensure the
ref will actually be updated, it is only a prerequisite.  As such it is not
a good idea to send notices (e.g. email) from this hook.  Consider using the
post-receive hook instead.

@noindent

@chapheading POST-RECEIVE HOOK

After all refs were updated (or attempted to be updated), if any ref update
was successful, and if $GIT_DIR/hooks/post-receive file exists and is
executable, it will be invoked once with no parameters.  The standard input
of the hook will be one line for each successfully updated ref:

@example
sha1-old SP sha1-new SP refname LF
@end example

The refname value is relative to $GIT_DIR; e.g. for the master head this is
"refs/heads/master".  The two sha1 values before each refname are the object
names for the refname before and after the update.  Refs that were created
will have sha1-old equal to 0@{40@}, while refs that were deleted will have
sha1-new equal to 0@{40@}, otherwise sha1-old and sha1-new should be valid
objects in the repository.

The @samp{GIT_PUSH_CERT*} environment variables can be inspected, just as in
@samp{pre-receive} hook, after accepting a signed push.

Using this hook, it is easy to generate mails describing the updates to the
repository.  This example script sends one mail message per ref listing the
commits pushed to the repository, and logs the push certificates of signed
pushes with good signatures to a logger service:

@example
#!/bin/sh
# mail out commit update information.
while read oval nval ref
do
        if expr "$oval" : '0*$' >/dev/null
        then
                echo "Created a new ref, with the following commits:"
                git rev-list --pretty "$nval"
        else
                echo "New commits:"
                git rev-list --pretty "$nval" "^$oval"
        fi |
        mail -s "Changes to ref $ref" commit-list@@mydomain
done
# log signed push certificate, if any
if test -n "$@{GIT_PUSH_CERT-@}" && test $@{GIT_PUSH_CERT_STATUS@} = G
then
        (
                echo expected nonce is $@{GIT_PUSH_NONCE@}
                git cat-file blob $@{GIT_PUSH_CERT@}
        ) | mail -s "push certificate from $GIT_PUSH_CERT_SIGNER" push-log@@mydomain
fi
exit 0
@end example


The exit code from this hook invocation is ignored, however a non-zero exit
code will generate an error message.

Note that it is possible for refname to not have sha1-new when this hook
runs.  This can easily occur if another user modifies the ref after it was
updated by @emph{git-receive-pack}, but before the hook was able to evaluate it.
It is recommended that hooks rely on sha1-new rather than the current value
of refname.

@noindent

@chapheading POST-UPDATE HOOK

After all other processing, if at least one ref was updated, and if
$GIT_DIR/hooks/post-update file exists and is executable, then post-update
will be called with the list of refs that have been updated.  This can be
used to implement any repository wide cleanup tasks.

The exit code from this hook invocation is ignored; the only thing left for
@emph{git-receive-pack} to do at that point is to exit itself anyway.

This hook can be used, for example, to run @samp{git update-server-info} if the
repository is packed and is served via a dumb transport.

@example
#!/bin/sh
exec git update-server-info
@end example


@noindent

@chapheading QUARANTINE ENVIRONMENT

When @samp{receive-pack} takes in objects, they are placed into a temporary
"quarantine" directory within the @samp{$GIT_DIR/objects} directory and migrated
into the main object store only after the @samp{pre-receive} hook has
completed. If the push fails before then, the temporary directory is removed
entirely.

This has a few user-visible effects and caveats:

@enumerate 

@item
Pushes which fail due to problems with the incoming pack, missing objects,
or due to the @samp{pre-receive} hook will not leave any on-disk data. This is
usually helpful to prevent repeated failed pushes from filling up your disk,
but can make debugging more challenging.

@item
Any objects created by the @samp{pre-receive} hook will be created in the
quarantine directory (and migrated only if it succeeds).

@item
The @samp{pre-receive} hook MUST NOT update any refs to point to quarantined
objects. Other programs accessing the repository will not be able to see the
objects (and if the pre-receive hook fails, those refs would become
corrupted). For safety, any ref updates from within @samp{pre-receive} are
automatically rejected.
@end enumerate

@noindent

@chapheading SEE ALSO

git-send-pack(1), gitnamespaces(7)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-reflog,,,Top
@chapheading Name

git-reflog — reflog情報を管理します

@noindent

@chapheading Synopsis

@display
git reflog <subcommand> <options>
@end display


@noindent

@chapheading DESCRIPTION

このコマンドは、さまざまなサブコマンドと、サブコマンドに応じて異なるオプションを取ります:

@display
git reflog [show] [log-options] [<ref>]
git reflog expire [--expire=<time>] [--expire-unreachable=<time>]
        [--rewrite] [--updateref] [--stale-fix]
        [--dry-run | -n] [--verbose] [--all [--single-worktree] | <refs>…]
git reflog delete [--rewrite] [--updateref]
        [--dry-run | -n] [--verbose] ref@@@{specifier@}…
git reflog exists <ref>
@end display


参照ログ(reference logs)、または "reflogs"
は、ブランチのヒントやその他の参照がローカルリポジトリで更新された時期を記録します。reflogは、参照の古い値を指定するために、さまざまなGitコマンドで役立ちます。
たとえば、 @samp{HEAD@@@{2@}} は「HEADが2移動前にあった位置」を意味し、 @samp{master@@@{one.week.ago@}}
は「masterがこのローカルリポジトリで1週間前を指していた位置」を意味する等々。詳細については gitrevisions(7)
を参照してください。

このコマンドは、reflogに記録された情報を管理します。

「show」サブコマンド(サブコマンドの指定がない場合のデフォルトでもあります)は、コマンドライン(またはデフォルトでは「HEAD」)で指定される参照のログを表示します。
reflogは最近のすべてのアクションをカバーし、さらに @samp{HEAD} reflogはブランチの切り替えを記録します。 @samp{git reflog
show} は @samp{git log -g --abbrev-commit --pretty=oneline} のエイリアスです。詳細については
git-log(1) を参照してください。

「expire」サブコマンドは、古いreflogエントリを刈り取ります。「expire」時間より古いエントリ、または「expire-unreachable」時間より古く、現在の先端から到達できないエントリがreflogから削除されます。これは通常、エンドユーザーが直接使用することはありません。代わりに、
git-gc(1) を参照してください。

「delete」サブコマンドは、reflogから単一のエントリを削除します。 その引数は「正確な」エントリである必要があります(例: @samp{git
reflog delete master@@@{2@}} )。 このサブコマンドは、通常、エンドユーザーが直接使用することもありません。

「exists」サブコマンドは、refにreflogがあるかどうかをチェックします。reflogが存在する場合はゼロのステータスで終了し、存在しない場合はゼロ以外のステータスで終了します。

@noindent

@chapheading OPTIONS

@noindent

@heading showサブコマンド用オプション

@samp{git reflog show} は、 @samp{git log} で受け入れられるすべてのオプションを受け入れます。

@noindent

@heading expireサブコマンド用オプション

@table @asis

@item  @samp{--all} 
すべての参照のreflogを処理します。

@item  @samp{--single-worktree} 
デフォルトでは、 @samp{--all} が指定されている場合、すべての作業ツリーからのreflogが処理されます。
このオプションは、処理を現在の作業ツリーからのreflogのみに制限します。

@item  @samp{--expire=<time>} 
指定された時間より古いエントリを刈り取ります。このオプションが指定されていない場合、有効期限は構成設定 @samp{gc.reflogExpire}
から取得され、デフォルトで90日になります。 @samp{--expire=all} は、年齢に関係なくエントリを削除します。 @samp{--expire=never}
は、到達可能なエントリの刈り取りをオフにします(しかし、 @samp{--expire-unreachable} を参照してください)。

@item  @samp{--expire-unreachable=<time>} 
ブランチの現在の先端から到達できない @samp{<time>} より古いエントリを刈り取ります。このオプションが指定されていない場合、有効期限は構成設定
@samp{gc.reflogExpireUnreachable} から取得され、デフォルトで30日になります。
@samp{--expire-unreachable=all} は、年齢に関係なく、到達不能なエントリを刈り取ります。
@samp{--expire-unreachable=never} は、到達不能なエントリの早期刈り取りをオフにします(しかし、 @samp{--expire}
を参照してください)。

@item  @samp{--updateref} 
以前の最上位エントリが刈り取りされた場合は、最上位のreflogエントリの値(つまり、 <ref>@@@{0@}
)への参照を更新します。(このオプションは、シンボリック参照では無視されます。)

@item  @samp{--rewrite} 
reflogエントリーの前任者が刈り込まれてしまった場合、その「古い」SHA-1を、現在の前任者にあるエントリーの「新しい」SHA-1フィールドと等しくなるように調整します。

@item  @samp{--stale-fix} 
「壊れたコミット」(broken
commits)を指すreflogエントリを削除します。壊れたコミットとは、どのリファレンスヒントからも到達できず、直接または間接的に、欠落しているコミットまたはツリーまたはブロブオブジェクトを参照するコミットです。

これの計算では、到達可能なすべてのオブジェクトのトラバースが含まれます。つまり、 @samp{git prune}
と同じコストがかかります。これは主に、reflogによって参照されるオブジェクトを保護しなかった古いバージョンのGitを使用したガベージコレクションによって引き起こされた破損を修正することを目的としています。

@item  @samp{-n} 
@itemx  @samp{--dry-run} 
実際にエントリの刈り取りは行いません。何が刈り取られるかを表示するだけです。

@item  @samp{--verbose} 
画面に追加情報を出力します。
@end table

@noindent

@heading deleteサブコマンド用オプション

@samp{git reflog delete} は、オプション @samp{--updateref} と @samp{-rewrite} と @samp{-n} と @samp{--dry-run}
と` --verbose` を受け入れます。これらは、 @samp{expire} で使用される場合と同じ意味です。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-remote-ext,,,Top
@chapheading Name

git-remote-ext — スマートトランスポートを外部コマンドにブリッジします。

@noindent

@chapheading Synopsis

@display
git remote add <nick> "ext::<command>[ <arguments>…]"
@end display


@noindent

@chapheading DESCRIPTION

このリモートヘルパーは、指定の @samp{<command>} を使用してリモートGitサーバーに接続します。

指定の @samp{<command>} のstdinに書き込んだデータは、git:// サーバーまたは git-upload-pack または
git-receive-pack または (状況に応じて)git-upload-archive に送信されるものと見なし、かつ、 <command>
のstdoutからの読み取りは、同一のサービスから受信されたものと見なされます。

コマンドと引数は、エスケープされていない空白で区切られます。

以下のシーケンスには特別な意味があります:

@table @asis

@item  `% ` 
コマンドまたは引数のリテラル空白

@item  @samp{%%} 
リテラルのパーセント文字

@item  @samp{%s} 
Gitが呼び出したいサービスの名前(receive-pack または upload-pack または upload-archive)に置き換えられます。

@item  @samp{%S} 
Gitが呼び出したいサービスの長い名前(long name)(git-receive-pack または git-upload-pack または
git-upload-archive)に置き換えられます。

@item  @samp{%G} (引数の最初の文字列である必要があります) 
この引数は @samp{<command>}
には渡されません。その代わりにヘルパーは、サービスフィールドが適切な値に設定され、かつ、リポジトリフィールドが引数の残りの部分に設定された状態でリモート側に
git:// サービス要求(request)を送信することから開始します。デフォルトでは、そのような要求は送信されません。

これはリモート側の git:// サーバーへトンネルを介してアクセスする場合に便利です。

@item  @samp{%V} (引数の最初の文字列である必要があります) 
この引数は @samp{<command>} には渡されません。その代わりに git://
サービス要求でvhostフィールドを(引数の残りの部分に)設定します。デフォルトでは、(送信の場合)そのような要求でvhostを送信しません。
@end table

@noindent

@chapheading ENVIRONMENT VARIABLES

@table @asis

@item  GIT_TRANSLOOP_DEBUG 
設定されている場合、さまざまな読み取り/書き込みに関するデバッグ情報を出力します。
@end table

@noindent

@chapheading ENVIRONMENT VARIABLES PASSED TO COMMAND

@table @asis

@item  GIT_EXT_SERVICE 
サービスヘルパーが呼び出す必要のある長い名前(git-upload-pack など)を設定します。

@item  GIT_EXT_SERVICE_NOPREFIX 
サービスヘルパーが呼び出す必要のある名前(upload-pack など)を設定します。
@end table

@noindent

@chapheading EXAMPLES

このリモートヘルパーは、 @samp{git fetch <URL>} 、 @samp{git clone <URL>} 、 @samp{git push <URL>} 、 @samp{git
remote add <nick> <URL>} などのコマンドを使用するときに、Gitによって透過的に使用され、 <URL>は @samp{ext::}
で始まります。 例:

@table @asis

@item  "ext::ssh -i /home/foo/.ssh/somekey user@@host.example %S @emph{foo/repo}" 
host.example:foo/repo と同様ですが、キーペアとして /home/foo/.ssh/somekey
を使用し、リモート側のユーザーとしてuserを使用します。 これにより、 .ssh/config を編集する必要がなくなります。

@item  "ext::socat -t3600 - ABSTRACT-CONNECT:/git-server %G/somerepo" 
抽象名前空間アドレス(abstract namespace address) /git-server でgitプロトコルを介してアクセス可能なパス
/somerepo を持つリポジトリを表します。

@item  "ext::git-server-alias foo %G/repo" 
ヘルパープログラム @samp{git-server-alias foo} を使用してアクセスされるパス /repo
を持つリポジトリを表します。リポジトリへのパスとリクエストのタイプは、コマンドラインではなく、通常の git://
プロトコルのようにプロトコルストリームの一部として渡されます。

@item  "ext::git-server-alias foo %G/repo %Vfoo" 
ヘルパープログラム @samp{git-server-alias foo} を使用してアクセスされるパス /repo
を持つリポジトリを表します。プロトコルストリームで渡されるリモートサーバーのホスト名は「foo」になります(これにより、複数の仮想Gitサーバーがリンクレベルのアドレスを共有できるようになります)。

@item  "ext::git-server-alias foo %G/repo% with% spaces %Vfoo" 
ヘルパープログラム @samp{git-server-alias foo} を使用してアクセスされるパス @samp{/repo with spaces}
のリポジトリを表します。プロトコルストリームで渡されるリモートサーバーのホスト名は「foo」になります(これにより、複数の仮想Gitサーバーがリンクレベルのアドレスを共有できるようになります)。

@item  "ext::git-ssl foo.example /bar" 
ヘルパープログラム @samp{git-ssl foo.example /bar}
を使用してアクセスされるリポジトリを表します。リクエストのタイプは、ヘルパーが環境変数を使用して決定できます(上記参照)。
@end table

@noindent

@chapheading SEE ALSO

gitremote-helpers(7)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-remote-fd,,,Top
@chapheading Name

git-remote-fd — スマートトランスポートストリームを呼び出し元に反映します(Reflect smart transport stream back to caller)

@noindent

@chapheading Synopsis

"fd::<infd>[,<outfd>][/<anything>]" (as URL)

@noindent

@chapheading DESCRIPTION

このヘルパーは、指定のファイルデスクリプタを使用してリモートGitサーバーに接続します。これはエンドユーザー向けではなく、git
fetch、pushまたはarchiveを呼び出すプログラムとスクリプトを対象としています。

<infd> のみが指定されている場合は、リモートGitサーバー(git-upload-pack、git-receive-pack または
git-upload-archive)に接続されている双方向ソケットであると見なされます。 <infd> と <outfd>
の両方が指定されている場合、それらはリモートGitサーバーに接続されているパイプであると見なされます( <infd> は入力パイプ、 <outfd>
は出力パイプです)。

このヘルパーが開始される前に、ハンドシェイク手順(git:// のサービスリクエストの送信など)がすでに完了していることを前提としています。

<anything>
は任意の文字列にすることができます。それは無視されます。これは、URLが何らかのコンテキストで表示される場合に、URLでユーザーに情報を提供するためのものです。

@noindent

@chapheading ENVIRONMENT VARIABLES

@table @asis

@item  GIT_TRANSLOOP_DEBUG 
設定されている場合、さまざまな 読み取り/書き込み に関するデバッグ情報を出力します。
@end table

@noindent

@chapheading EXAMPLES

@table @asis

@item  @samp{git fetch fd::17 master} 
ファイルデスクリプタ #17 使用して master を Fetch し、 git-upload-pack と通信します。

@item  @samp{git fetch fd::17/foo master} 
同上。

@item  @samp{git push fd::7,8 master (as URL)} 
master を push し、ファイルデスクリプタ #7 を使用して git-receive-pack からデータを読み取り、ファイルデスクリプタ
#8 を使用して同じサービスにデータを書き込みます。

@item  @samp{git push fd::7,8/bar master} 
同上。
@end table

@noindent

@chapheading SEE ALSO

gitremote-helpers(7)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-remote,,,Top
@chapheading Name

git-remote — Manage set of tracked repositories

@noindent

@chapheading Synopsis

@display
git remote [-v | --verbose]
git remote add [-t <branch>] [-m <master>] [-f] [--[no-]tags] [--mirror=(fetch|push)] <name> <url>
git remote rename <old> <new>
git remote remove <name>
git remote set-head <name> (-a | --auto | -d | --delete | <branch>)
git remote set-branches [--add] <name> <branch>…
git remote get-url [--push] [--all] <name>
git remote set-url [--push] <name> <newurl> [<oldurl>]
git remote set-url --add [--push] <name> <newurl>
git remote set-url --delete [--push] <name> <url>
git remote [-v | --verbose] show [-n] <name>…
git remote prune [-n | --dry-run] <name>…
git remote [-v | --verbose] update [-p | --prune] [(<group> | <remote>)…]
@end display


@noindent

@chapheading DESCRIPTION

Manage the set of repositories ("remotes") whose branches you track.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-v} 
@itemx  @samp{--verbose} 
Be a little more verbose and show remote url after name.  NOTE: This must be
placed between @samp{remote} and subcommand.
@end table

@noindent

@chapheading COMMANDS

With no arguments, shows a list of existing remotes.  Several subcommands
are available to perform operations on the remotes.

@table @asis

@item  @emph{add} 
Add a remote named <name> for the repository at <url>.  The command @samp{git
fetch <name>} can then be used to create and update remote-tracking branches
<name>/<branch>.

With @samp{-f} option, @samp{git fetch <name>} is run immediately after the remote
information is set up.

With @samp{--tags} option, @samp{git fetch <name>} imports every tag from the remote
repository.

With @samp{--no-tags} option, @samp{git fetch <name>} does not import tags from the
remote repository.

By default, only tags on fetched branches are imported (see
git-fetch(1)).

With @samp{-t <branch>} option, instead of the default glob refspec for the
remote to track all branches under the @samp{refs/remotes/<name>/} namespace, a
refspec to track only @samp{<branch>} is created.  You can give more than one @samp{-t
<branch>} to track multiple branches without grabbing all branches.

With @samp{-m <master>} option, a symbolic-ref @samp{refs/remotes/<name>/HEAD} is set
up to point at remote’s @samp{<master>} branch. See also the set-head command.

When a fetch mirror is created with @samp{--mirror=fetch}, the refs will not be
stored in the @emph{refs/remotes/} namespace, but rather everything in @emph{refs/} on
the remote will be directly mirrored into @emph{refs/} in the local
repository. This option only makes sense in bare repositories, because a
fetch would overwrite any local commits.

When a push mirror is created with @samp{--mirror=push}, then @samp{git push} will
always behave as if @samp{--mirror} was passed.

@item  @emph{rename} 
Rename the remote named <old> to <new>. All remote-tracking branches and
configuration settings for the remote are updated.

In case <old> and <new> are the same, and <old> is a file under
@samp{$GIT_DIR/remotes} or @samp{$GIT_DIR/branches}, the remote is converted to the
configuration file format.

@item  @emph{remove} 
@itemx  @emph{rm} 
Remove the remote named <name>. All remote-tracking branches and
configuration settings for the remote are removed.

@item  @emph{set-head} 
Sets or deletes the default branch (i.e. the target of the symbolic-ref
@samp{refs/remotes/<name>/HEAD}) for the named remote. Having a default branch
for a remote is not required, but allows the name of the remote to be
specified in lieu of a specific branch. For example, if the default branch
for @samp{origin} is set to @samp{master}, then @samp{origin} may be specified wherever you
would normally specify @samp{origin/master}.

With @samp{-d} or @samp{--delete}, the symbolic ref @samp{refs/remotes/<name>/HEAD} is
deleted.

With @samp{-a} or @samp{--auto}, the remote is queried to determine its @samp{HEAD}, then
the symbolic-ref @samp{refs/remotes/<name>/HEAD} is set to the same branch. e.g.,
if the remote @samp{HEAD} is pointed at @samp{next}, @samp{git remote set-head origin -a}
will set the symbolic-ref @samp{refs/remotes/origin/HEAD} to
@samp{refs/remotes/origin/next}. This will only work if
@samp{refs/remotes/origin/next} already exists; if not it must be fetched first.

Use @samp{<branch>} to set the symbolic-ref @samp{refs/remotes/<name>/HEAD}
explicitly. e.g., @samp{git remote set-head origin master} will set the
symbolic-ref @samp{refs/remotes/origin/HEAD} to
@samp{refs/remotes/origin/master}. This will only work if
@samp{refs/remotes/origin/master} already exists; if not it must be fetched
first.

@item  @emph{set-branches} 
Changes the list of branches tracked by the named remote.  This can be used
to track a subset of the available remote branches after the initial setup
for a remote.

The named branches will be interpreted as if specified with the @samp{-t} option
on the @samp{git remote add} command line.

With @samp{--add}, instead of replacing the list of currently tracked branches,
adds to that list.

@item  @emph{get-url} 
Retrieves the URLs for a remote. Configurations for @samp{insteadOf} and
@samp{pushInsteadOf} are expanded here. By default, only the first URL is listed.

With @samp{--push}, push URLs are queried rather than fetch URLs.

With @samp{--all}, all URLs for the remote will be listed.

@item  @emph{set-url} 
Changes URLs for the remote. Sets first URL for remote <name> that matches
regex <oldurl> (first URL if no <oldurl> is given) to <newurl>. If <oldurl>
doesn’t match any URL, an error occurs and nothing is changed.

With @samp{--push}, push URLs are manipulated instead of fetch URLs.

With @samp{--add}, instead of changing existing URLs, new URL is added.

With @samp{--delete}, instead of changing existing URLs, all URLs matching regex
<url> are deleted for remote <name>.  Trying to delete all non-push URLs is
an error.

Note that the push URL and the fetch URL, even though they can be set
differently, must still refer to the same place.  What you pushed to the
push URL should be what you would see if you immediately fetched from the
fetch URL.  If you are trying to fetch from one place (e.g. your upstream)
and push to another (e.g.  your publishing repository), use two separate
remotes.

@item  @emph{show} 
Gives some information about the remote <name>.

With @samp{-n} option, the remote heads are not queried first with @samp{git ls-remote
<name>}; cached information is used instead.

@item  @emph{prune} 
Deletes stale references associated with <name>. By default, stale
remote-tracking branches under <name> are deleted, but depending on global
configuration and the configuration of the remote we might even prune local
tags that haven’t been pushed there. Equivalent to @samp{git fetch --prune
<name>}, except that no new references will be fetched.

See the PRUNING section of git-fetch(1) for what it’ll prune
depending on various configuration.

With @samp{--dry-run} option, report what branches would be pruned, but do not
actually prune them.

@item  @emph{update} 
Fetch updates for remotes or remote groups in the repository as defined by
@samp{remotes.<group>}. If neither group nor remote is specified on the command
line, the configuration parameter remotes.default will be used; if
remotes.default is not defined, all remotes which do not have the
configuration parameter @samp{remote.<name>.skipDefaultUpdate} set to true will
be updated.  (See git-config(1)).

With @samp{--prune} option, run pruning against all the remotes that are updated.
@end table

@noindent

@chapheading DISCUSSION

The remote configuration is achieved using the @samp{remote.origin.url} and
@samp{remote.origin.fetch} configuration variables.  (See git-config(1)).

@noindent

@chapheading EXIT STATUS

On success, the exit status is @samp{0}.

When subcommands such as @emph{add}, @emph{rename}, and @emph{remove} can’t find the remote
in question, the exit status is @samp{2}. When the remote already exists, the
exit status is @samp{3}.

On any other error, the exit status may be any other non-zero value.

@noindent

@chapheading EXAMPLES

@itemize 

@item
Add a new remote, fetch, and check out a branch from it

@example
$ git remote
origin
$ git branch -r
  origin/HEAD -> origin/master
  origin/master
$ git remote add staging git://git.kernel.org/.../gregkh/staging.git
$ git remote
origin
staging
$ git fetch staging
...
From git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/staging
 * [new branch]      master     -> staging/master
 * [new branch]      staging-linus -> staging/staging-linus
 * [new branch]      staging-next -> staging/staging-next
$ git branch -r
  origin/HEAD -> origin/master
  origin/master
  staging/master
  staging/staging-linus
  staging/staging-next
$ git switch -c staging staging/master
...
@end example


@item
Imitate @emph{git clone} but track only selected branches

@example
$ mkdir project.git
$ cd project.git
$ git init
$ git remote add -f -t master -m master origin git://example.com/git.git/
$ git merge origin
@end example

@end itemize

@noindent

@chapheading SEE ALSO

git-fetch(1) git-branch(1) git-config(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-repack,,,Top
@chapheading Name

git-repack — リポジトリ内のアンパックオブジェクトをパックする

@noindent

@chapheading Synopsis

@display
git repack [-a] [-A] [-d] [-f] [-F] [-l] [-n] [-q] [-b] [--window=<n>] [--depth=<n>] [--threads=<n>] [--keep-pack=<pack-name>]
@end display


@noindent

@chapheading DESCRIPTION

このコマンドは、現在パック内に存在しないすべてのオブジェクトを1つのパックに結合するために使用されます。また、既存のパックを単一のより効率的なパックに再編成するために使用することもできます。

パックは、個別に圧縮され、デルタ圧縮が適用され、関連付けられたインデックスファイルとともに単一のファイルに格納されたオブジェクトのコレクションです。

パックは、ミラーシステム、バックアップエンジン、ディスクストレージなどの負荷を軽減するために使用されます。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-a} 
パックされていないオブジェクトを段階的にパックする代わりに、参照されるすべてのものを1つのパックにパックします。プライベート開発に使用されるリポジトリをパックする場合に特に便利です。
@samp{-d} と一緒に使用します。 これにより、 @samp{git prune} が残したオブジェクトがクリーンアップされますが、 @samp{git fsck --full
--dangling} ではぶら下がりを表示します。

馬鹿プロトコル(dumb
protocol)を介してフェッチするユーザーは、含まれているオブジェクトを取得するために、そのパック内にすでにローカルにある他のオブジェクトの数に関係なく、まったく新しいパックをフェッチする必要があることに注意してください。

promisorパックファイルは個別に再パックされます。 @samp{.promisor}
ファイルに関連付けられているパックファイルがある場合、これらのパックファイルは別の個別パックに再パックされ、新しい個別パックに対応する、空の
@samp{.promisor} ファイルが書き込まれます。

@item  @samp{-A} 
@samp{-d} を使用しない限り @samp{-a} と同じです。
それから、前のパックの到達不能なオブジェクトは、古いパックに残されるのではなく、looseになって、パックされていないオブジェクトになります。再パックする場合でも、到達不能なオブジェクトが意図的にパックに追加されることはありません。このオプションは、到達不能なオブジェクトが古いパックに残されて、古いパックごと削除されることによって、すぐに削除されてしまうのを防ぎます。代わりに、loose到達不能オブジェクトは、以下の
「git gc」呼び出しで通常の有効期限ルールに従って剪定されます。 git-gc(1) を参照してください。

@item  @samp{-d} 
パック後、新しく作成されたパックによって既存のパックの一部が冗長になる場合は、冗長パックを削除してください。 また、「git
prune-packed」を実行して、冗長なルーズオブジェクトファイルを削除します。

@item  @samp{-l} 
@samp{--local} オプションを @emph{git pack-objects} に渡します。 git-pack-objects(1)
を参照してください。

@item  @samp{-f} 
@samp{--no-reuse-delta} オプションを @samp{git-pack-objects} に渡します。
git-pack-objects(1) を参照してください。

@item  @samp{-F} 
@samp{--no-reuse-object} オプションを @samp{git-pack-objects} に渡します。
git-pack-objects(1) を参照してください。

@item  @samp{-q} 
`-q`オプションを @emph{git pack-objects} に渡します。 git-pack-objects(1) を参照してください。

@item  @samp{-n} 
@emph{git update-server-info}
でサーバー情報を更新しないでください。このオプションは、HTTPまたはFTPを介してこのリポジトリ(またはその直接のコピー)を公開するために必要なローカルカタログファイルの更新をスキップします。
git-update-server-info(1) を参照してください。

@item  @samp{--window=<n>} 
@itemx  @samp{--depth=<n>} 
これらの2つのオプションは、パックに含まれるオブジェクトがデルタ圧縮を使用して格納される方法に影響します。オブジェクトは最初にタイプ、サイズ、およびオプションで名前で内部的にソートされ、
@samp{--window} 内の他のオブジェクトと比較されて、デルタ圧縮を使用することでスペースが節約されるかどうかが確認されます。 @samp{--depth}
は最大デルタ深度を制限します。深くしすぎると、必要なオブジェクトに到達するためにデルタデータを何度も適用する必要があるため、アンパッカー側(unpacker
side)のパフォーマンスに影響します。

@samp{--window} のデフォルト値は10で、 @samp{--depth} は50です。最大深度(maximum depth)は4095です。

@item  @samp{--threads=<n>} 
このオプションは @samp{git pack-objects} に渡されます。

@item  @samp{--window-memory=<n>} 
このオプションは、 @samp{--window} に加えて追加の制限を提供します。ウィンドウサイズは、メモリ内で @emph{<n>}
バイトを超えないように動的に縮小されます。これは、大きなウィンドウと小さなオブジェクトが混在するリポジトリで、大きなウィンドウでメモリが不足しないようにするのに役立ちますが、小さなオブジェクトは大きなウィンドウを利用できます。
サイズには、「k」または「m」または「g」の接尾辞を付けることができます。 @samp{--window-memory=0} は、メモリ使用量を無制限にします。
デフォルトは、 @samp{pack.windowMemory} 構成変数から取得されます。 実際のメモリ使用量は、制限に
git-pack-objects(1) で使用されるスレッド数を掛けたものになることに注意してください。

@item  @samp{--max-pack-size=<n>} 
各出力パックファイルの最大サイズ。
サイズには、「k」または「m」または「g」の接尾辞を付けることができます。許可される最小サイズは1MiBに制限されています。
指定した場合、複数のパックファイルが作成される可能性があります。これにより、ビットマップインデックスの作成も妨げられます。構成変数
@samp{pack.packSizeLimit}
が設定されていない限り、デフォルトは無制限です。このオプションを使用すると、リポジトリが大きくなり、速度が低下する可能性があることに注意してください。
@samp{pack.packSizeLimit} の説明を参照してください。

@item  @samp{-b} 
@itemx  @samp{--write-bitmap-index} 
再パックの一部として到達可能性ビットマップインデックスを書き込みます。ビットマップは到達可能なすべてのオブジェクトを参照できる必要があるため、これは
@samp{-a} または @samp{-A} とともに使用する場合にのみ意味があります。このオプションは、 @samp{repack.writeBitmaps}
の設定を上書きします。複数のパックファイルが作成されている場合、このオプションは効果がありません。

@item  @samp{--pack-kept-objects} 
再パックするときは @samp{.keep} ファイルにオブジェクトを含めます。 @samp{pack-objects} が終了した後も @samp{.keep}
パックを削除しないことに注意してください。これは、オブジェクトを複製する可能性があることを意味しますが、これにより、プッシュまたはフェッチが同時に発生する場合にオプションを安全に使用できます。このオプションを指定すると、ビットマップ化されたパックファイルに必要なオブジェクトが確実に含まれるため、通常、
@samp{-b} または @samp{repack.writeBitmaps} を使用してビットマップを書き込む場合にのみ役立ちます。

@item  @samp{--keep-pack=<pack-name>} 
指定されたパックを再パックから除外します。 これは、パックに @samp{.keep} ファイルがあるのと同じです。 @samp{<pack-name>}
は、先頭にディレクトリがないパックファイル名です(例:
@samp{pack-123.pack})。このオプションは、複数のパックを保持するために複数回指定できます。

@item  @samp{--unpack-unreachable=<when>} 
到達不能なオブジェクトのパックをほどく(loose)ときは、 @samp{<when>} より古いオブジェクトをわざわざほどきません。これは、フォローアップで行う
@samp{git prune} によってすぐに剪定されるオブジェクトの書き込みを最適化するために使用できます。

@item  @samp{-k} 
@itemx  @samp{--keep-unreachable} 
@samp{-ad}
と一緒に使用すると、既存のパックから到達できないオブジェクトは、削除されるのではなく、パックファイルの最後に追加されます。さらに、到達不能なlooseオブジェクトはパックされます(そしてそれらのlooseオブジェクトは削除されます)。

@item  @samp{-i} 
@itemx  @samp{--delta-islands} 
@samp{--delta-islands} オプションを @samp{git-pack-objects} に渡します。
git-pack-objects(1) を参照してください。

@item  @samp{-g=<factor>} 
@itemx  @samp{--geometric=<factor>} 
結果のパック構造を、連続する各パックに、次に大きいパックのオブジェクト数の少なくとも @samp{<factor>} 倍が含まれるように配置します。

@samp{git repack} が、等比数列を確実にするために1つに再パックする必要があるパックファイルの「切り分け」を決断することによってこれを保証します。
大きいパックファイルの多く(そのパックに含まれるオブジェクトの数による)がそのまま残るように、パックファイルの最小セットを選択します。

他の再パックモードとは異なり、梱包するオブジェクトのセットは、「ロールアップ」(rolled-up)されるパックのセットによって一意に決定されます。言い換えれば、等比数列を復元するために組み合わせる必要があると判断されたパックです。

@samp{--unpacked} が指定されている場合、ルーズオブジェクトは、到達可能性に関係なく、この「ロールアップ」に暗黙的に含まれます。
これは将来変更される可能性があります。このオプション(大幅に異なる再パックモードを意味する)は、 @samp{git repack}
の他のすべてのオプションの組み合わせで機能することが保証されていません。
@end table

@noindent

@chapheading CONFIGURATION

さまざまな構成変数がパッキングに影響します。 git-config(1)
を参照してください(「pack」と「delta」を検索してください)。

デフォルトでは、コマンドは @samp{--delta-base-offset} オプションを @emph{gitpack-objects}
に渡します。これにより、通常、パックはわずかに小さくなりますが、生成されたパックは、バージョン1.4.4より古いバージョンのGitと互換性がありません。直接またはダムhttpプロトコルを介して、このような古いバージョンのGitとリポジトリを共有する必要がある場合は、構成変数
@samp{repack.UseDeltaBaseOffset} を @samp{false}
に設定して再パックする必要があります。この場合、必要に応じて変換がオンザフライで実行されるため、ネイティブプロトコルを介した古いGitバージョンからのアクセスではこのオプションの影響を受けません。

デルタ圧縮は、 @samp{core.bigFileThreshold} 構成変数より大きいオブジェクト、および属性 @samp{delta}
がfalseに設定されているファイルでは使用されません。

@noindent

@chapheading SEE ALSO

git-pack-objects(1) git-prune-packed(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-replace,,,Top
@chapheading Name

git-replace — オブジェクトを置き換えるためのrefsの作成、一覧表示、削除

@noindent

@chapheading Synopsis

@display
git replace [-f] <object> <replacement>
git replace [-f] --edit <object>
git replace [-f] --graft <commit> [<parent>…]
git replace [-f] --convert-graft-file
git replace -d <object>…
git replace [--format=<format>] [-l [<pattern>]]
@end display


@noindent

@chapheading DESCRIPTION

@samp{refs/replace/} 名前空間に @emph{replace} 参照を追加します。

@emph{replace} 参照の名前は、置き換えられるオブジェクトのSHA-1です。 @emph{replace}
参照の内容は、置き換えるオブジェクトのSHA-1です。

置き換えられるオブジェクトと置き換えるオブジェクトは同じタイプである必要があります。 この制限は、 @samp{-f} を使用して迂回(bypass)できます。

@samp{-f} が指定されていない限り、 @emph{replace} 参照はまだ存在していてはなりません。

置換されるオブジェクトと置換するオブジェクトに他の制限はありません。マージコミットは非マージコミットに置き換えることができ、その逆も可能です。

置換する参照は、デフォルトでは、到達可能性トラバーサル(剪定(prune)とパックと転送とfsck)実行するコマンドを除くすべてのGitコマンドで使用されます。

@emph{git} の直後に @samp{--no-replace-objects} オプションを使用すると、任意のコマンドでの置換参照の使用を無効にすることができます。

たとえば、 コミット @emph{foo} がコミット @emph{bar} に置き換えられた場合:

@example
$ git --no-replace-objects cat-file commit foo
@end example


上記は、コミット @emph{foo} に関する情報を表示します。

@example
$ git cat-file commit foo
@end example


これはコミット @emph{bar} に関する情報を表示します。

@samp{GIT_NO_REPLACE_OBJECTS} 環境変数は、 @samp{--no-replace-objects}
オプションと同じ効果を達成するように設定できます。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-f} 
@itemx  @samp{--force} 
同じオブジェクトの既存の置換refが存在する場合、(失敗するのではなく)上書きされます。

@item  @samp{-d} 
@itemx  @samp{--delete} 
指定されたオブジェクトの既存の置換refsを削除します。

@item  @samp{--edit <object>} 
オブジェクトのコンテンツを対話的に編集します。 <object>
の既存のコンテンツは一時ファイルにきれいに表示(pretty-printed)され、そのファイルでエディタが起動され、エディタの編集結果がパースされて
<object> と同じタイプの新しいオブジェクトが作成されます。続いて、置換refが作成され、 <object>
が新しく作成されたオブジェクトに置き換えられます。エディタの選択方法の詳細については git-var(1) を参照してください。

@item  @samp{--raw} 
編集するときにきれいに出力されたものではなく、生のオブジェクトの内容を提供します。現在、これはツリーにのみ影響し、バイナリ形式で表示されます。これは扱いが難しいですが、きれいに出力できないほど破損しているツリーを修復するときに役立ちます。バイナリデータをきれいに読み書きできるようにエディタを設定する必要がある場合があることに注意してください。

@item  @samp{--graft <commit> [<parent>...]} 
graftコミットを作成します。 <commit> と同じ内容で新しいコミットが作成されますが、その親は <commit> の親ではなく
[<parent>…] になります。続けて、置換refが作成され、 <commit> が新しく作成されたコミットに置き換えられます。
@samp{--convert-graft-file} を使用して @samp{$GIT_DIR/info/grafts}
ファイルを変換し、代わりに置換refsを使用します。

@item  @samp{--convert-graft-file} 
@samp{$GIT_DIR/info/grafts}
のすべてのエントリに対してgraftコミットを作成し、成功するとそのファイルを削除します。目的は、現在非推奨のgraftファイルからの移行の為にユーザーを支援することです。

@item  @samp{-l <pattern>} 
@itemx  @samp{--list <pattern>} 
指定されたパターンに一致する(またはパターンが指定されていない場合はすべての)オブジェクトの置換refをリストします。引数なしで「git
replace」と入力すると、すべての置換refが一覧表示されます。

@item  @samp{--format=<format>} 
リストするときに、指定の <format> を使用します。これには、「short」および「medium」および「long」のいずれかになります。
省略した場合、フォーマットはデフォルトで「short」になります。
@end table

@noindent

@chapheading FORMATS

以下の形式を使用できます:

@itemize 

@item
@emph{short}:
<置換された sha1>

@item
@emph{medium}:
<置換された sha1> → <置換する sha1>

@item
@emph{long}:
<置換された sha1> (<置換された sha1 のタイプ>) → <置換する sha1> (<置換する sha1 のタイプ>)
@end itemize

@noindent

@chapheading CREATING REPLACEMENT OBJECTS

git-hash-object(1) と git-rebase(1) と
@uref{https://github.com/newren/git-filter-repo,git-filter-repo} は、他のgitコマンドの中でも特に
既存のオブジェクトから置換オブジェクトを作成するために使用されます。 @samp{--edit} オプションを @emph{git replace}
と一緒に使用して、既存のオブジェクトを編集することで置換オブジェクトを作成することもできます。

コミットの文字列の一部である多くの、ブロブまたはツリーまたはコミットを置き換える場合は、コミットの置換文字列を作成してから、コミットのターゲット文字列の先端にあるコミットのみを、コミットの置換文字列の先端にあるコミットに置き換えることができます。

@noindent

@chapheading BUGS

置き換えられたブロブまたはツリーをそれらを置き換えるものと比較すると、正しく機能しません。 また、 @samp{git reset --hard}
を使用して置換されたコミットに戻ると、ブランチは置換されたコミットではなく置換されたコミットに移動します。

保留中のオブジェクトに関連する「git rev-list」を使用すると、他の問題が発生する可能性があります。

@noindent

@chapheading SEE ALSO

git-hash-object(1) git-rebase(1) git-tag(1)
git-branch(1) git-commit(1) git-var(1)
git(1) @uref{https://github.com/newren/git-filter-repo,git-filter-repo}

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-request-pull,,,Top
@chapheading Name

git-request-pull — 保留中の変更の概要を生成します

@noindent

@chapheading Synopsis

@display
git request-pull [-p] <start> <url> [<end>]
@end display


@noindent

@chapheading DESCRIPTION

アップストリームプロジェクトに変更をツリーにプルするように要求するリクエストを生成します。標準出力に出力される要求は、ブランチの説明で始まり、変更を要約し、どこからプルできるかを示します。

アップストリームプロジェクトには  @samp{<start>} という名前のコミットがあると予想され、出力では、そのコミット以降に行った変更を
@samp{<url>`という名前のリポジトリの、}<end>` という名前のコミットまで統合するように求められます。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-p} 
出力にパッチテキストを含めます。

@item  <start> 
開始コミット。これは、すでにアップストリーム履歴に存在するコミットを指定します。

@item  <url> 
プル元のリポジトリURL。

@item  <end> 
終了コミット(省略時デフォルトはHEAD)。プルを要求している履歴の先端にあるコミットを指定します。

@samp{<url>} で指定されたリポジトリの、ローカルにあるrefとは異なるrefの先端にコミットがある場合、「ローカル名 コロン(:)
リモート名」である、 @samp{<local>:<remote>} 構文を使用することができます。
@end table

@noindent

@chapheading EXAMPLES

@samp{v1.0} リリースの上にある @samp{master} ブランチで作業を構築し、それをプロジェクトに統合したいとします。
まず、他の人が見ることができるように、その変更をパブリックリポジトリにプッシュします:

@example
git push https://git.ko.xz/project master
@end example

それから、あなたは以下のコマンドを実行します:

@example
git request-pull v1.0 https://git.ko.xz/project master
@end example

これにより、アップストリームへのリクエストが生成され、 @samp{v1.0} リリースと @samp{master}
の間の変更が要約されて、パブリックリポジトリからプルされます。

ローカルにあるブランチとは名前が異なるブランチに変更をプッシュする場合、例えば、

@example
git push https://git.ko.xz/project master:for-linus
@end example

それからあなたはそれをプルするように頼むことができます

@example
git request-pull v1.0 https://git.ko.xz/project master:for-linus
@end example

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-rerere,,,Top
@chapheading Name

git-rerere — 競合するマージの記録された競合解決決定を再利用する

@noindent

@chapheading Synopsis

@display
git rerere [clear|forget <pathspec>|diff|remaining|status|gc]
@end display


@noindent

@chapheading DESCRIPTION

比較的長期間存続するトピックブランチを使用するワークフローでは、開発者は、トピックブランチが完了するまで(「リリース」ブランチにマージされるか、アップストリームに送信されて受け入れられるまで)、同じ競合を何度も解決する必要がある場合があります。

このコマンドは、最初の手動マージにて、自動マージ結果の競合とそれに対応した手動解決結果を記録しておいて、以後の自動マージ結果の競合に、その記録した手動競合解決決定を適用することにより、この処理において開発者を支援します。

@quotation

@strong{Note}

あなたがこのコマンドを有効にするには、構成変数 @samp{rerere.enabled} を設定する必要があります。
@end quotation

@noindent

@chapheading COMMANDS

通常、「git rerere」は、引数やユーザーの介入なしで実行されます。 ただし、動作状態との対話を可能にするいくつかのコマンドがあります。

@table @asis

@item  @emph{clear} 
マージ競合解決決定を中止する場合は、rerereが使用するメタデータをリセットします。 @samp{git am [--skip|--abort]} または
@samp{git rebase [--skip|--abort]} を呼び出すと、このコマンドが自動的に呼び出されます。

@item  @emph{forget} <pathspec> 
<pathspec> の現在の競合について rerere が記録した競合解決決定をリセットします。

@item  @emph{diff} 
競合解決決定の現在の状態の差分を表示します。これは、ユーザーが競合を解決している間に何が変更されたかを追跡するのに役立ちます。追加の引数は、PATHにインストールされているシステムの「diff」コマンドに直接渡されます。

@item  @emph{status} 
マージ競合解決決定がrerereで記録される競合のあるパスをプリントする。

@item  @emph{remaining} 
rerereによって自動解決されていない競合のあるパスをプリントする。これには、競合するサブモジュールなど、rerereで競合解決決定を追跡できないパスが含まれます。

@item  @emph{gc} 
ずっと前に発生した競合するマージのレコードを剪定(prune)します。デフォルトでは、15日より古い未解決の競合と、60日より古い解決済みの競合は剪定されます。これらのデフォルトは、それぞれ
@samp{gc.rerereUnresolved} および @samp{gc.rerereResolved} 構成変数を介して制御されます。
@end table

@noindent

@chapheading DISCUSSION

トピックブランチが分岐してからマスターブランチ(またはアップストリーム)が触れた重複領域をトピックブランチが変更する場合、トピックブランチをアップストリームにプッシュする準備ができる前であっても、最新のマスターでテストすることをお勧めします:

@example
              o---*---o topic
             /
    o---o---o---*---o---o master
@end example


このようなテストでは、マスターとトピックを何らかの方法でマージする必要があります。これを行う1つの方法は、マスターをトピックブランチにプルすることです:

@example
        $ git switch topic
        $ git merge master

              o---*---o---+ topic
             /           /
    o---o---o---*---o---o master
@end example


@samp{*} でマークされたコミットは、同じファイルの同じ領域にアクセスします。 @samp{+}
でマークされたコミットを作成するときに競合を解決する必要があります。次に、結果をテストして、進行中の作業が最新のマスターにあるもので引き続き機能することを確認できます。

このテストマージの後、トピックの作業を続行するには2つの方法があります。最も簡単なのは、テストマージコミット @samp{+}
の上に構築することです。トピックブランチでの作業の準備ができたら、トピックブランチをマスターにプルするか、アップストリームにプルするように依頼します。ただし、その時点で、テストマージ
@samp{+} 以降、マスターまたはアップストリームが進んでいる可能性があります。その場合、最終的なコミットグラフは以下のようになります:

@example
        $ git switch topic
        $ git merge master
        $ ... work on both topic and master branches
        $ git switch master
        $ git merge topic

              o---*---o---+---o---o topic
             /           /         \
    o---o---o---*---o---o---o---o---+ master
@end example


けれども、トピックブランチの存続期間が長い場合、トピックブランチにはそのような「マスターからのマージ」コミットが多数含まれることになり、開発履歴が不必要に乱雑になります。Linuxカーネルメーリングリストの読者は、サブシステムのメンテナが「役に立たないマージ」でいっぱいのブランチからプルするように要求したときに、Linusがテストマージの頻度が高すぎると不平を言ったことを覚えているかもしれません。

別の方法として、トピックブランチでテストマージをクリーンに保つために、テストマージを吹き飛ばし、テストマージの前に、先端の先に構築し続けることができます:

@example
        $ git switch topic
        $ git merge master
        $ git reset --hard HEAD^ ;# rewind the test merge
        $ ... work on both topic and master branches
        $ git switch master
        $ git merge topic

              o---*---o-------o---o topic
             /                     \
    o---o---o---*---o---o---o---o---+ master
@end example


これにより、トピックブランチの準備が整い、マスターブランチにマージされたときに、マージコミットが1つだけ残ります。 このマージでは、 @samp{*}
でマークされたコミットによって導入された競合を解決する必要があります。ただし、この競合は、多くの場合、吹き飛ばしたテストマージを作成したときに解決した競合と同じです。
@emph{git rerere} は、以前の手動解決からの情報を使用して、この最後の競合するマージを解決するのに役立ちます。

競合する自動マージの直後に「git rerere」コマンドを実行すると、それらの中の、通常の競合マーカー @samp{<<<<<<<} と @samp{=======} と
@samp{>>>>>>>} を使用して、競合する作業ツリーファイルが記録されます。後で、競合の解決が完了した後、「git
rerere」を再度実行すると、これらのファイルの解決された状態が記録されます。
masterのトピックブランチへのテストマージを作成したときにこれを行ったとします。

次回、同じ競合する自動マージを確認した後、「git
rerere」を実行すると、以前の競合する自動マージ、以前の手動解決、および現在の競合する自動マージの間で3方向のマージが実行されます。この3方向マージが正常に解決される場合、結果は作業ツリーファイルに書き出されるため、手動で解決する必要はありません。注意:
@emph{git rerere} はインデックスファイルをそのままにしておくので、結果に満足のいく場合は、 @samp{git diff} (または @samp{git diff
-c})を使用して最終的な健全性チェックを行い、そして、 @emph{git add} する必要があることに注意してください。

より便利な方法として、「git merge」は、失敗した自動マージで終了すると自動的に「git rerere」を呼び出し、「git
rerere」は、新しい競合の場合は手動解決を記録し、そうでない場合は以前の手動解決を再利用します。「git
commit」は、マージ結果をコミットするときに「git rerere」も呼び出します。
これが意味することは、（rerere.enabled構成変数を有効にする以外に）自分で特別なことをする必要がないということです。

この例では、テストマージを実行すると、手動の競合解決決定が記録され、記録された競合解決決定が引き続き適用可能である限り、後で更新されたマスターブランチとトピックブランチを使用して実際のマージを実行するときに再利用されます。

「git rerere」レコードの情報は、「git rebase」を実行するときにも使用されます。
テストマージを吹き飛ばし、トピックブランチで開発を続けた後:

@example
              o---*---o-------o---o topic
             /
    o---o---o---*---o---o---o---o   master

        $ git rebase master topic

                                  o---*---o-------o---o topic
                                 /
    o---o---o---*---o---o---o---o   master
@end example


@samp{git rebase master topic}
を実行して、トピックをアップストリームに送信する準備ができる前に最新の状態にすることができます。これにより、3方向マージにフォールバックし、前に解決したテストマージと同じように競合します。
「git rerere」は「git rebase」によって実行され、この競合を解決するのに役立ちます。

[注] @emph{git rerere}
は、ファイル内の競合マーカーに依存して競合を検出します。ファイルに競合マーカーのある行と同じように見える行がすでに含まれている場合、「git
rerere」は競合解決の記録に失敗する可能性があります。これを回避するには、 gitattributes(5) の
@samp{conflict-marker-size} 設定を使用できます。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-reset,,,Top
@chapheading Name

git-reset — Reset current HEAD to the specified state

@noindent

@chapheading Synopsis

@display
git reset [-q] [<tree-ish>] [--] <pathspec>…
git reset [-q] [--pathspec-from-file=<file> [--pathspec-file-nul]] [<tree-ish>]
git reset (--patch | -p) [<tree-ish>] [--] [<pathspec>…]
git reset [--soft | --mixed [-N] | --hard | --merge | --keep] [-q] [<commit>]
@end display


@noindent

@chapheading DESCRIPTION

In the first three forms, copy entries from @samp{<tree-ish>} to the index.  In
the last form, set the current branch head (@samp{HEAD}) to @samp{<commit>},
optionally modifying index and working tree to match.  The
@samp{<tree-ish>}/@samp{<commit>} defaults to @samp{HEAD} in all forms.

@table @asis

@item  @emph{git reset} [-q] [<tree-ish>] [--] <pathspec>… 
@itemx  @emph{git reset} [-q] [--pathspec-from-file=<file> [--pathspec-file-nul]] [<tree-ish>] 
These forms reset the index entries for all paths that match the
@samp{<pathspec>} to their state at @samp{<tree-ish>}.  (It does not affect the
working tree or the current branch.)

This means that @samp{git reset <pathspec>} is the opposite of @samp{git add
<pathspec>}. This command is equivalent to @samp{git restore
[--source=<tree-ish>] --staged <pathspec>...}.

After running @samp{git reset <pathspec>} to update the index entry, you can use
git-restore(1) to check the contents out of the index to the working
tree. Alternatively, using git-restore(1) and specifying a commit
with @samp{--source}, you can copy the contents of a path out of a commit to the
index and to the working tree in one go.

@item  @emph{git reset} (--patch | -p) [<tree-ish>] [--] [<pathspec>…] 
Interactively select hunks in the difference between the index and
@samp{<tree-ish>} (defaults to @samp{HEAD}).  The chosen hunks are applied in reverse
to the index.

This means that @samp{git reset -p} is the opposite of @samp{git add -p}, i.e.  you
can use it to selectively reset hunks. See the “Interactive Mode” section
of git-add(1) to learn how to operate the @samp{--patch} mode.

@item  @emph{git reset} [<mode>] [<commit>] 
This form resets the current branch head to @samp{<commit>} and possibly updates
the index (resetting it to the tree of @samp{<commit>}) and the working tree
depending on @samp{<mode>}. If @samp{<mode>} is omitted, defaults to @samp{--mixed}. The
@samp{<mode>} must be one of the following:

@table @asis

@item  @samp{--soft} 
Does not touch the index file or the working tree at all (but resets the
head to @samp{<commit>}, just like all modes do). This leaves all your changed
files "Changes to be committed", as @samp{git status} would put it.

@item  @samp{--mixed} 
Resets the index but not the working tree (i.e., the changed files are
preserved but not marked for commit) and reports what has not been
updated. This is the default action.

If @samp{-N} is specified, removed paths are marked as intent-to-add (see
git-add(1)).

@item  @samp{--hard} 
Resets the index and working tree. Any changes to tracked files in the
working tree since @samp{<commit>} are discarded.

@item  @samp{--merge} 
Resets the index and updates the files in the working tree that are
different between @samp{<commit>} and @samp{HEAD}, but keeps those which are different
between the index and working tree (i.e. which have changes which have not
been added).  If a file that is different between @samp{<commit>} and the index
has unstaged changes, reset is aborted.

In other words, @samp{--merge} does something like a @samp{git read-tree -u -m
<commit>}, but carries forward unmerged index entries.

@item  @samp{--keep} 
Resets index entries and updates files in the working tree that are
different between @samp{<commit>} and @samp{HEAD}.  If a file that is different
between @samp{<commit>} and @samp{HEAD} has local changes, reset is aborted.

@item  @samp{--[no-]recurse-submodules} 
When the working tree is updated, using --recurse-submodules will also
recursively reset the working tree of all active submodules according to the
commit recorded in the superproject, also setting the submodules' HEAD to be
detached at that commit.
@end table
@end table

See "Reset, restore and revert" in git(1) for the differences
between the three commands.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-q} 
@itemx  @samp{--quiet} 
@itemx  @samp{--no-quiet} 
Be quiet, only report errors. The default behavior is set by the
@samp{reset.quiet} config option. @samp{--quiet} and @samp{--no-quiet} will override the
default behavior.

@item  @samp{--pathspec-from-file=<file>} 
Pathspec is passed in @samp{<file>} instead of commandline args. If @samp{<file>} is
exactly @samp{-} then standard input is used. Pathspec elements are separated by
LF or CR/LF. Pathspec elements can be quoted as explained for the
configuration variable @samp{core.quotePath} (see git-config(1)). See
also @samp{--pathspec-file-nul} and global @samp{--literal-pathspecs}.

@item  @samp{--pathspec-file-nul} 
Only meaningful with @samp{--pathspec-from-file}. Pathspec elements are separated
with NUL character and all other characters are taken literally (including
newlines and quotes).

@item  -- 
Do not interpret any more arguments as options.

@item  <pathspec>… 
Limits the paths affected by the operation.

For more details, see the @emph{pathspec} entry in gitglossary(7).
@end table

@noindent

@chapheading EXAMPLES

@table @asis

@item  Undo add 
@example
$ edit                                     (1)
$ git add frotz.c filfre.c
$ mailx                                    (2)
$ git reset                                (3)
$ git pull git://info.example.com/ nitfol  (4)
@end example


@table @asis

@item @pxref{CO1-1,,(1)}
You are happily working on something, and find the changes in these files
are in good order.  You do not want to see them when you run @samp{git diff},
because you plan to work on other files and changes with these files are
distracting.

@item @pxref{CO1-2,,(2)}
Somebody asks you to pull, and the changes sound worthy of merging.

@item @pxref{CO1-3,,(3)}
However, you already dirtied the index (i.e. your index does not match the
@samp{HEAD} commit).  But you know the pull you are going to make does not affect
@samp{frotz.c} or @samp{filfre.c}, so you revert the index changes for these two
files.  Your changes in working tree remain there.

@item @pxref{CO1-4,,(4)}
Then you can pull and merge, leaving @samp{frotz.c} and @samp{filfre.c} changes still
in the working tree.
@end table

@item  Undo a commit and redo 
@example
$ git commit ...
$ git reset --soft HEAD^      (1)
$ edit                        (2)
$ git commit -a -c ORIG_HEAD  (3)
@end example


@table @asis

@item @pxref{CO2-1,,(1)}
This is most often done when you remembered what you just committed is
incomplete, or you misspelled your commit message, or both.  Leaves working
tree as it was before "reset".

@item @pxref{CO2-2,,(2)}
Make corrections to working tree files.

@item @pxref{CO2-3,,(3)}
"reset" copies the old head to @samp{.git/ORIG_HEAD}; redo the commit by starting
with its log message.  If you do not need to edit the message further, you
can give @samp{-C} option instead.

See also the @samp{--amend} option to git-commit(1).
@end table

@item  Undo a commit, making it a topic branch 
@example
$ git branch topic/wip          (1)
$ git reset --hard HEAD~3       (2)
$ git switch topic/wip          (3)
@end example


@table @asis

@item @pxref{CO3-1,,(1)}
You have made some commits, but realize they were premature to be in the
@samp{master} branch.  You want to continue polishing them in a topic branch, so
create @samp{topic/wip} branch off of the current @samp{HEAD}.

@item @pxref{CO3-2,,(2)}
Rewind the master branch to get rid of those three commits.

@item @pxref{CO3-3,,(3)}
Switch to @samp{topic/wip} branch and keep working.
@end table

@item  Undo commits permanently 
@example
$ git commit ...
$ git reset --hard HEAD~3   (1)
@end example


@table @asis

@item @pxref{CO4-1,,(1)}
The last three commits (@samp{HEAD}, @samp{HEAD^}, and @samp{HEAD~2}) were bad and you do
not want to ever see them again.  Do @strong{not} do this if you have already given
these commits to somebody else.  (See the "RECOVERING FROM UPSTREAM REBASE"
section in git-rebase(1) for the implications of doing so.)
@end table

@item  Undo a merge or pull 
@example
$ git pull                         (1)
Auto-merging nitfol
CONFLICT (content): Merge conflict in nitfol
Automatic merge failed; fix conflicts and then commit the result.
$ git reset --hard                 (2)
$ git pull . topic/branch          (3)
Updating from 41223... to 13134...
Fast-forward
$ git reset --hard ORIG_HEAD       (4)
@end example


@table @asis

@item @pxref{CO5-1,,(1)}
Try to update from the upstream resulted in a lot of conflicts; you were not
ready to spend a lot of time merging right now, so you decide to do that
later.

@item @pxref{CO5-2,,(2)}
"pull" has not made merge commit, so @samp{git reset --hard} which is a synonym
for @samp{git reset --hard HEAD} clears the mess from the index file and the
working tree.

@item @pxref{CO5-3,,(3)}
Merge a topic branch into the current branch, which resulted in a
fast-forward.

@item @pxref{CO5-4,,(4)}
But you decided that the topic branch is not ready for public consumption
yet.  "pull" or "merge" always leaves the original tip of the current branch
in @samp{ORIG_HEAD}, so resetting hard to it brings your index file and the
working tree back to that state, and resets the tip of the branch to that
commit.
@end table

@item  Undo a merge or pull inside a dirty working tree 
@example
$ git pull                         (1)
Auto-merging nitfol
Merge made by recursive.
 nitfol                |   20 +++++----
 ...
$ git reset --merge ORIG_HEAD      (2)
@end example


@table @asis

@item @pxref{CO6-1,,(1)}
Even if you may have local modifications in your working tree, you can
safely say @samp{git pull} when you know that the change in the other branch does
not overlap with them.

@item @pxref{CO6-2,,(2)}
After inspecting the result of the merge, you may find that the change in
the other branch is unsatisfactory.  Running @samp{git reset --hard ORIG_HEAD}
will let you go back to where you were, but it will discard your local
changes, which you do not want.  @samp{git reset --merge} keeps your local
changes.
@end table

@item  Interrupted workflow 
Suppose you are interrupted by an urgent fix request while you are in the
middle of a large change.  The files in your working tree are not in any
shape to be committed yet, but you need to get to the other branch for a
quick bugfix.

@example
$ git switch feature  ;# you were working in "feature" branch and
$ work work work      ;# got interrupted
$ git commit -a -m "snapshot WIP"                 (1)
$ git switch master
$ fix fix fix
$ git commit ;# commit with real log
$ git switch feature
$ git reset --soft HEAD^ ;# go back to WIP state  (2)
$ git reset                                       (3)
@end example


@table @asis

@item @pxref{CO7-1,,(1)}
This commit will get blown away so a throw-away log message is OK.

@item @pxref{CO7-2,,(2)}
This removes the @emph{WIP} commit from the commit history, and sets your working
tree to the state just before you made that snapshot.

@item @pxref{CO7-3,,(3)}
At this point the index file still has all the WIP changes you committed as
@emph{snapshot WIP}.  This updates the index to show your WIP files as
uncommitted.

See also git-stash(1).
@end table

@item  Reset a single file in the index 
Suppose you have added a file to your index, but later decide you do not
want to add it to your commit. You can remove the file from the index while
keeping your changes with git reset.

@example
$ git reset -- frotz.c                      (1)
$ git commit -m "Commit files in index"     (2)
$ git add frotz.c                           (3)
@end example


@table @asis

@item @pxref{CO8-1,,(1)}
This removes the file from the index while keeping it in the working
directory.

@item @pxref{CO8-2,,(2)}
This commits all other changes in the index.

@item @pxref{CO8-3,,(3)}
Adds the file to the index again.
@end table

@item  Keep changes in working tree while discarding some previous commits 
Suppose you are working on something and you commit it, and then you
continue working a bit more, but now you think that what you have in your
working tree should be in another branch that has nothing to do with what
you committed previously. You can start a new branch and reset it while
keeping the changes in your working tree.

@example
$ git tag start
$ git switch -c branch1
$ edit
$ git commit ...                            (1)
$ edit
$ git switch -c branch2                     (2)
$ git reset --keep start                    (3)
@end example


@table @asis

@item @pxref{CO9-1,,(1)}
This commits your first edits in @samp{branch1}.

@item @pxref{CO9-2,,(2)}
In the ideal world, you could have realized that the earlier commit did not
belong to the new topic when you created and switched to @samp{branch2}
(i.e. @samp{git switch -c branch2 start}), but nobody is perfect.

@item @pxref{CO9-3,,(3)}
But you can use @samp{reset --keep} to remove the unwanted commit after you
switched to @samp{branch2}.
@end table

@item  Split a commit apart into a sequence of commits 
Suppose that you have created lots of logically separate changes and
committed them together. Then, later you decide that it might be better to
have each logical chunk associated with its own commit. You can use git
reset to rewind history without changing the contents of your local files,
and then successively use @samp{git add -p} to interactively select which hunks
to include into each commit, using @samp{git commit -c} to pre-populate the
commit message.

@example
$ git reset -N HEAD^                        (1)
$ git add -p                                (2)
$ git diff --cached                         (3)
$ git commit -c HEAD@@@{1@}                    (4)
...                                         (5)
$ git add ...                               (6)
$ git diff --cached                         (7)
$ git commit ...                            (8)
@end example


@table @asis

@item @pxref{CO10-1,,(1)}
First, reset the history back one commit so that we remove the original
commit, but leave the working tree with all the changes. The -N ensures that
any new files added with @samp{HEAD} are still marked so that @samp{git add -p} will
find them.

@item @pxref{CO10-2,,(2)}
Next, we interactively select diff hunks to add using the @samp{git add -p}
facility. This will ask you about each diff hunk in sequence and you can use
simple commands such as "yes, include this", "No don’t include this" or even
the very powerful "edit" facility.

@item @pxref{CO10-3,,(3)}
Once satisfied with the hunks you want to include, you should verify what
has been prepared for the first commit by using @samp{git diff --cached}. This
shows all the changes that have been moved into the index and are about to
be committed.

@item @pxref{CO10-4,,(4)}
Next, commit the changes stored in the index. The @samp{-c} option specifies to
pre-populate the commit message from the original message that you started
with in the first commit. This is helpful to avoid retyping it. The
@samp{HEAD@@@{1@}} is a special notation for the commit that @samp{HEAD} used to be at
prior to the original reset commit (1 change ago).  See
git-reflog(1) for more details. You may also use any other valid
commit reference.

@item @pxref{CO10-5,,(5)}
You can repeat steps 2-4 multiple times to break the original code into any
number of commits.

@item @pxref{CO10-6,,(6)}
Now you’ve split out many of the changes into their own commits, and might
no longer use the patch mode of @samp{git add}, in order to select all remaining
uncommitted changes.

@item @pxref{CO10-7,,(7)}
Once again, check to verify that you’ve included what you want to. You may
also wish to verify that git diff doesn’t show any remaining changes to be
committed later.

@item @pxref{CO10-8,,(8)}
And finally create the final commit.
@end table
@end table

@noindent

@chapheading DISCUSSION

The tables below show what happens when running:

@example
git reset --option target
@end example


to reset the @samp{HEAD} to another commit (@samp{target}) with the different reset
options depending on the state of the files.

In these tables, @samp{A}, @samp{B}, @samp{C} and @samp{D} are some different states of a
file. For example, the first line of the first table means that if a file is
in state @samp{A} in the working tree, in state @samp{B} in the index, in state @samp{C} in
@samp{HEAD} and in state @samp{D} in the target, then @samp{git reset --soft target} will
leave the file in the working tree in state @samp{A} and in the index in state
@samp{B}.  It resets (i.e. moves) the @samp{HEAD} (i.e. the tip of the current branch,
if you are on one) to @samp{target} (which has the file in state @samp{D}).

@example
working index HEAD target         working index HEAD
----------------------------------------------------
 A       B     C    D     --soft   A       B     D
                          --mixed  A       D     D
                          --hard   D       D     D
                          --merge (disallowed)
                          --keep  (disallowed)
@end example

@example
working index HEAD target         working index HEAD
----------------------------------------------------
 A       B     C    C     --soft   A       B     C
                          --mixed  A       C     C
                          --hard   C       C     C
                          --merge (disallowed)
                          --keep   A       C     C
@end example

@example
working index HEAD target         working index HEAD
----------------------------------------------------
 B       B     C    D     --soft   B       B     D
                          --mixed  B       D     D
                          --hard   D       D     D
                          --merge  D       D     D
                          --keep  (disallowed)
@end example

@example
working index HEAD target         working index HEAD
----------------------------------------------------
 B       B     C    C     --soft   B       B     C
                          --mixed  B       C     C
                          --hard   C       C     C
                          --merge  C       C     C
                          --keep   B       C     C
@end example

@example
working index HEAD target         working index HEAD
----------------------------------------------------
 B       C     C    D     --soft   B       C     D
                          --mixed  B       D     D
                          --hard   D       D     D
                          --merge (disallowed)
                          --keep  (disallowed)
@end example

@example
working index HEAD target         working index HEAD
----------------------------------------------------
 B       C     C    C     --soft   B       C     C
                          --mixed  B       C     C
                          --hard   C       C     C
                          --merge  B       C     C
                          --keep   B       C     C
@end example

@samp{reset --merge} is meant to be used when resetting out of a conflicted
merge. Any mergy operation guarantees that the working tree file that is
involved in the merge does not have a local change with respect to the index
before it starts, and that it writes the result out to the working tree. So
if we see some difference between the index and the target and also between
the index and the working tree, then it means that we are not resetting out
from a state that a mergy operation left after failing with a conflict. That
is why we disallow @samp{--merge} option in this case.

@samp{reset --keep} is meant to be used when removing some of the last commits in
the current branch while keeping changes in the working tree. If there could
be conflicts between the changes in the commit we want to remove and the
changes in the working tree we want to keep, the reset is disallowed. That’s
why it is disallowed if there are both changes between the working tree and
@samp{HEAD}, and between @samp{HEAD} and the target. To be safe, it is also disallowed
when there are unmerged entries.

The following tables show what happens when there are unmerged entries:

@example
working index HEAD target         working index HEAD
----------------------------------------------------
 X       U     A    B     --soft  (disallowed)
                          --mixed  X       B     B
                          --hard   B       B     B
                          --merge  B       B     B
                          --keep  (disallowed)
@end example

@example
working index HEAD target         working index HEAD
----------------------------------------------------
 X       U     A    A     --soft  (disallowed)
                          --mixed  X       A     A
                          --hard   A       A     A
                          --merge  A       A     A
                          --keep  (disallowed)
@end example

@samp{X} means any state and @samp{U} means an unmerged index.

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-restore,,,Top
@chapheading Name

git-restore — 作業ツリーファイルを復元します

@noindent

@chapheading Synopsis

@display
git restore [<options>] [--source=<tree>] [--staged] [--worktree] [--] <pathspec>…
git restore [<options>] [--source=<tree>] [--staged] [--worktree] --pathspec-from-file=<file> [--pathspec-file-nul]
git restore (-p|--patch) [<options>] [--source=<tree>] [--staged] [--worktree] [--] [<pathspec>…]
@end display


@noindent

@chapheading DESCRIPTION

復元ソースからのコンテンツを使用して、作業ツリー内の指定されたパスを復元します。パスが追跡されているが、復元ソースに存在しない場合、復元ソースと一致するように削除されます。

このコマンドを使用して、 @samp{--staged} を使用してインデックスのコンテンツを復元したり、 @samp{--staged--worktree}
を使用して作業ツリーとインデックスの両方を復元したりすることもできます。

デフォルトでは、 @samp{--staged} が指定されている場合、コンテンツは @samp{HEAD}
から復元され、そうでない場合はインデックスから復元されます。別のコミットから復元するには、 @samp{--source} を使用します。

3つのコマンドの違いについては、 git(1) の "Reset, restore and revert" を参照してください。

!!このコマンドは実験的なものです。 動作が変わる可能性があります!!

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-s <tree>} 
@itemx  @samp{--source=<tree>} 
指定のツリーのコンテンツを使用して、作業ツリーファイルを復元します。ソースツリーに関連付けられているコミット、ブランチ、またはタグに名前を付けてソースツリーを指定するのが一般的です。

このオプションを指定しない場合で、 @samp{--staged} が指定されている場合は @samp{HEAD}
から、それ以外の場合はインデックスから内容が復元されます。

特別な場合として、マージベースが1つしかない場合は、 @samp{A} と @samp{B} のマージベースのショートカットとして @samp{A...B} を使用できます。 @samp{A}
と @samp{B} の片方を省略できます。その場合、省略した方はデフォルトで @samp{HEAD} になります。

@item  @samp{-p} 
@itemx  @samp{--patch} 
復元ソースと復元場所の違いでハンクを対話的に選択します。 @samp{--patch} モードの操作方法については、 git-add(1)
の「Interactive Mode」セクションを参照してください。

注意: @samp{--patch} はpathspecを受け入れることができず、変更されたすべてのパスを復元するように求められることに注意してください。

@item  @samp{-W} 
@itemx  @samp{--worktree} 
@itemx  @samp{-S} 
@itemx  @samp{--staged} 
復元場所を指定します。どちらのオプションも指定されていない場合、デフォルトで作業ツリーが復元されます。 @samp{--staged}
を指定すると、インデックスのみが復元されます。両方を指定すると、両方が復元されます。

@item  @samp{-q} 
@itemx  @samp{--quiet} 
静かにします。フィードバックメッセージを抑制します。 @samp{--no-progress} を含んでいます。

@item  @samp{--progress} 
@itemx  @samp{--no-progress} 
@samp{--quiet} が指定されていない限り、進行状況は、端末に接続されている場合、デフォルトで標準エラーストリームに報告されます。このフラグは、
@samp{--quiet} に関係なく、端末に接続されていない場合でも進行状況のレポートを有効にします。

@item  @samp{--ours} 
@itemx  @samp{--theirs} 
作業ツリー内のファイルをインデックスから復元する場合は、マージされていないパスにステージ#2(@emph{ours})または#3(@emph{theirs})を使用します。

注意: @samp{git rebase`と `git pull --rebase}
での作業中、「ours」と「theirs」が入れ替わっているように見える場合があることに注意してください。 詳細については、
git-checkout(1) の同じオプションの説明を参照してください。

@item  @samp{-m} 
@itemx  @samp{--merge} 
作業ツリー上のファイルをインデックスから復元する場合は、マージされていないパスで競合するマージを再作成してください。

@item  @samp{--conflict=<style>} 
上記の @samp{--merge} オプションと同じですが、競合するハンクの表示方法を変更し、 @samp{merge.conflictStyle}
構成変数をオーバーライドします。
可能な値は「merge」(デフォルト)と「diff3」(「merge」スタイルで表示されるものに加えて、元のコンテンツを表示します)です。

@item  @samp{--ignore-unmerged} 
作業ツリー上のファイルをインデックスから復元するときに、マージされていないエントリがあり、 @samp{--ours} 、@samp{--theirs} 、
@samp{--merge} または @samp{--conflict}
のいずれも指定されていない場合は、操作を中止しないでください。作業ツリー上のマージされていないパスはそのままになります。

@item  @samp{--ignore-skip-worktree-bits} 
スパースチェックアウトモード(sparse checkout mode)では、デフォルトでは、 @samp{<pathspec>} に一致するエントリと、
$GIT_DIR/info/sparse-checkout のスパースパターンのみが更新されます。このオプションは、スパースパターンを無視し、
@samp{<pathspec>} 内のすべてのファイルを無条件に復元します。

@item  @samp{--recurse-submodules} 
@itemx  @samp{--no-recurse-submodules} 
@samp{<pathspec>}
がアクティブなサブモジュールを指定し、復元場所に作業ツリーが含まれている場合、このオプションが指定されている場合にのみサブモジュールが更新されます。この場合、その作業ツリーはスーパープロジェクトに記録されたコミットに復元されます。ローカルの変更は上書きされます。何も使用されていない場合(または
@samp{--no-recurse-submodules} の場合)、サブモジュールの作業ツリーは更新されません。
git-checkout(1) と同様に、これはサブモジュールの @samp{HEAD} を切り離します(detach)。

@item  @samp{--overlay} 
@itemx  @samp{--no-overlay} 
オーバーレイモード(overlay mode)では、コマンドは復元時にファイルを削除しません。オーバーレイなしモード(no-overlay
mode)では、 @samp{--source} ツリーに表示されない追跡ファイルが削除され、 @samp{<tree>} と完全に一致するようになります。
デフォルトはオーバーレイなしモード(no-overlay mode)です。

@item  @samp{--pathspec-from-file=<file>} 
pathspecは、コマンドライン引数の代わりに @samp{<file>} で渡されます。 @samp{<file>} が正確に @samp{-}
の場合、標準入力が使用されます。pathspec要素はLFまたはCR/LFで区切られます。pathspec要素は、構成変数
@samp{core.quotePath} で説明されているように引用できます(git-config(1) 参照)。
@samp{--pathspec-file-nul} およびグローバルの @samp{--literal-pathspecs} も参照してください。

@item  @samp{--pathspec-file-nul} 
@samp{--pathspec-from-file}
でのみ意味があります。pathspec要素はNUL文字で区切られ、他のすべての文字は文字通りに解釈されます(改行と引用符を含む)。

@item  @samp{--} 
これより後ろの引数をオプションとして解釈しないでください。

@item  <pathspec>… 
操作の影響を受けるパスを制限します。

詳細については、 gitglossary(7) の「pathspec」エントリを参照してください。
@end table

@noindent

@chapheading EXAMPLES

以下のシーケンスは、 @samp{master} ブランチに切り替え、@samp{Makefile} を2つ前のリビジョンに戻し、誤って hello.c
を削除して、インデックスから戻します。

@example
$ git switch master
$ git restore --source master~2 Makefile  (1)
$ rm -f hello.c
$ git restore hello.c                     (2)
@end example


@table @asis

@item @pxref{CO1-1,,(1)}
別のコミットからファイルを取り出します

@item @pxref{CO1-2,,(2)}
インデックスから hello.c を復元します。
@end table

あなたが、インデックス内のバージョンと一致するように「すべての」Cソースファイルを復元する場合は、以下のように書くことができます。

@example
$ git restore '*.c'
@end example


注意: @samp{*.c} を囲む引用符に注意してください。 ファイル @samp{hello.c}
は、作業ツリーに存在しなくなった場合でも復元されます。これは、ファイルグロブがインデックス内のエントリを照合するために使用されるためです(シェルによる作業ツリー内ではありません)。

現在のディレクトリ内のすべてのファイルを復元するには

@example
$ git restore .
@end example


または、@emph{top} pathspec魔法を使用してすべての作業ツリーファイルを復元します(gitglossary(7) 参照)。

@example
$ git restore :/
@end example


@samp{HEAD} のバージョンと一致するようにインデックス内のファイルを復元するには(これは git-reset(1)
を使用するのと同じです)

@example
$ git restore --staged hello.c
@end example


または、インデックスと作業ツリーの両方を復元できます(これは、 git-checkout(1) を使用する場合と同じです)。

@example
$ git restore --source=HEAD --staged --worktree hello.c
@end example


または、より実用的で読みにくい短い形式:

@example
$ git restore -s@@ -SW hello.c
@end example


@noindent

@chapheading SEE ALSO

git-checkout(1), git-reset(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-rev-list,,,Top
@chapheading Name

git-rev-list — コミットオブジェクトを新しい順に一覧表示します

@noindent

@chapheading Synopsis

@display
git rev-list [<options>] <commit>… [[--] <path>…]
@end display


@noindent

@chapheading DESCRIPTION

指定されたコミットから「親」リンクをたどることによって到達可能なコミットをリストしますが、その前に @emph{^}
が付いているコミットから到達可能なコミットは除外します。デフォルトでは、出力は時系列の逆順で表示されます。

これは集合演算と考えることができます。 コマンドラインで指定されたコミットのいずれかから到達可能なコミットのセットを形成し、 @emph{^}
が前に付いたコミットのいずれかから到達可能なコミットがそのセットから差し引かれます。差し引かれた残りのコミットは、コマンドの出力に出力されるものです。他のさまざまなオプションとパスパラメータ(pats
parameters)を使用して、結果をさらに制限できます。

したがって、以下のコマンド:

@example
$ git rev-list foo bar ^baz
@end example


は、「 @emph{foo} または @emph{bar} から到達可能であるが、 @emph{baz} からは到達できないすべてのコミットをリストする」を意味します。

特別な表記 "@emph{<commit1>}..@emph{<commit2>}" は、 "^@emph{<commit1>} @emph{<commit2>}"
の省略形として使用できます。たとえば、以下のどちらかを同じ意味で使用できます:

@example
$ git rev-list origin..HEAD
$ git rev-list HEAD ^origin
@end example


もう1つの特別な表記法は、マージに役立つ "@emph{<commit1>}…@emph{<commit2>}"
です。結果として得られるコミットのセットは、2つのオペランド間の対称差(symmetric difference)です。以下の2つのコマンドは同等です:

@example
$ git rev-list A B --not $(git merge-base --all A B)
$ git rev-list A...B
@end example


'rev-list’は、コミットの祖先グラフ作成およびトラバースする機能を提供するため、非常に重要なGitコマンドです。 このため、'git
bisect’や'git repack’などのさまざまなコマンドで使用できるようにするさまざまなオプションがあります。

@noindent

@chapheading OPTIONS

@noindent

@heading Commit Limiting

ここで説明されている特別な表記法を使用してリストする必要があるコミットの範囲を指定することに加えて、追加のコミット制限が適用される場合があります。

より多くのオプションを使用すると、通常、出力がさらに制限されます(たとえば、@samp{--since=<date1>`は}<date1>@samp{より新しいコミットに制限され、}--grep=<pattern>@samp{と一緒に使用すると、ログメッセージに}<pattern>`と一致する行があるコミットにさらに制限されます)。

注意: これらは、`--reverse`などのコミット順序およびフォーマットオプションの前に適用されることに注意してください。

@table @asis

@item  @samp{-<number>} 
@itemx  @samp{-n <number>} 
@itemx  @samp{--max-count=<number>} 
出力するコミットの数を制限します。

@item  @samp{--skip=<number>} 
コミット出力の表示を開始する前に、'number’個のコミットをスキップします。

@item  --since=<date> 
@itemx  @samp{--after=<date>} 
指定の日付よりも新しいコミットを表示します。

@item  @samp{--until=<date>} 
@itemx  @samp{--before=<date>} 
指定の日付より古いコミットを表示します。

@item  @samp{--max-age=<timestamp>} 
@itemx  @samp{--min-age=<timestamp>} 
コミット出力を指定された時間範囲に制限します。

@item  @samp{--author=<pattern>} 
@itemx  @samp{--committer=<pattern>} 
コミット出力を、指定されたパターン(正規表現)に一致する作者(author)/コミッター(committer)ヘッダー行を持つものに制限します。複数の
@samp{--author=<pattern>} がある場合、作者が指定されたパターンのいずれかに一致するコミットが選択されます(複数の
@samp{--committer=<pattern>} の場合も同様)。

@item  @samp{--grep-reflog=<pattern>} 
コミット出力を、指定されたパターン(正規表現)に一致するreflogエントリを持つものに制限します。複数の`--grep-reflog`を使用すると、指定されたパターンのいずれかに一致するreflogメッセージを持つコミットが選択されます。`--walk-reflogs`が使用されていない限り、このオプションを使用するとエラーになります。

@item  @samp{--grep=<pattern>} 
コミット出力を、指定されたパターン(正規表現)に一致するログメッセージを持つものに制限します。複数の`--grep=<pattern>@samp{を使用すると、指定されたパターンのいずれかにメッセージが一致するコミットが選択されます(全てに一致するコミットだけを選択したい場合、}--all-match`を参照してください)。

@item  @samp{--all-match} 
コミット出力を、少なくとも1つに一致するものではなく、指定されたすべての`--grep`に一致するものに制限します。

@item  @samp{--invert-grep} 
コミット出力を、`--grep=<pattern>`で指定されたパターンと一致しないログメッセージを持つものに制限します。

@item  @samp{-i} 
@itemx  @samp{--regexp-ignore-case} 
大文字小文字に関係なく、正規表現の制限パターンに一致します。

@item  @samp{--basic-regexp} 
制限パターンを基本正規表現として扱います。これがデフォルトです。

@item  @samp{-E} 
@itemx  @samp{--extended-regexp} 
制限パターンを、デフォルトの基本正規表現の代わりに拡張正規表現として扱います。

@item  @samp{-F} 
@itemx  @samp{--fixed-strings} 
制限パターンを固定文字列として扱います(パターンを正規表現として解釈しないでください)。

@item  @samp{-P} 
@itemx  @samp{--perl-regexp} 
制限パターンをPerl互換の正規表現として扱います。

これらのタイプの正規表現のサポートは、コンパイル時オプションに依存します。Gitが当該のサポート付きでコンパイルされていない場合、このオプションを提供すると、Gitが死にます(die)。

@item  @samp{--remove-empty} 
指定されたパスがツリーから見えなくなったら停止(stop)します。

@item  @samp{--merges} 
マージコミットのみを印刷します。これは`--min-parents=2`とまったく同じです。

@item  @samp{--no-merges} 
複数の親を持つコミットを出力しない。これは`--max-parents=1`とまったく同じです。

@item  @samp{--min-parents=<number>} 
@itemx  @samp{--max-parents=<number>} 
@itemx  @samp{--no-min-parents} 
@itemx  @samp{--no-max-parents} 
量の多少に関わらず、とにかく複数の親コミットがあるコミットのみを表示します。特に、@samp{--max-parents=1`は}--no-merges`と同じであり、@samp{--min-parents=2`は}--merges`と同じです。@samp{--max-parents=0`はすべてのルートコミットを提供し、}--min-parents=3`はすべてのタコ足マージ(octopus
merges)を示します。

@samp{--no-min-parents`と}--no-max-parents`は、これらの制限を(制限なしに)再度リセットします。同等の形式は、@samp{--min-parents=0}(すべてのコミットに0個以上の親があります)および`--max-parents=-1`(マイナスの数は上限がないことを示します)です。

@item  @samp{--first-parent} 
マージコミットを確認したら、最初の親コミットのみを探索します。このオプションは、特定のトピックブランチの進化を表示するときに、より良い概要を提供できます。トピックブランチへのマージは、時々更新されるアップストリームに調整することだけである傾向があり、このオプションを使用すると、そのようなマージによって履歴に取り込まれた個々のコミットを無視できます。

@item  @samp{--not} 
次に現れる`--not`までの間、後続のすべてのリビジョン指定子の'^'プレフィックス(またはその欠如)の意味を逆にします。

@item  @samp{--all} 
‘refs/`内のすべてのrefが`HEAD`とともに、コマンドラインに’<commit>'としてリストされているかのように見せかけます。

@item  @samp{--branches[=<pattern>]} 
‘refs/heads`内のすべてのrefがコマンドラインに’<commit>'としてリストされているかのように見せかけます。@emph{<pattern>'が指定されている場合、ブランチを指定されたシェルグロブ(shell
glob)に一致するものに制限します。パターンに}?@emph{または}*'または'[@emph{がない場合、最後に}/*'が含まれます。

@item  @samp{--tags[=<pattern>]} 
‘refs/tags`内のすべてのrefがコマンドラインに’<commit>'としてリストされているかのように見せかけます。@emph{<pattern>'が指定されている場合は、指定されたシェルグロブ(shell
glob)に一致するタグにタグを制限します。パターンに}?@emph{または}*'または'[@emph{がない場合、最後に}/*'が含まれます。

@item  @samp{--remotes[=<pattern>]} 
‘refs/remotes`内のすべてのrefがコマンドラインに’<commit>'としてリストされているかのように見せかけます。@emph{<pattern>'が指定されている場合、リモート追跡ブランチを指定されたシェルグロブ(shell
glob)に一致するものに制限します。パターンに}?@emph{または}*'または'[@emph{がない場合、最後に}/*'が含まれます。

@item  @samp{--glob=<glob-pattern>} 
シェルグロブ'<glob-pattern>'に一致するすべてのrefがコマンドラインに'<commit>'としてリストされているかのように見せかけます。先頭の’refs/@emph{は、欠落している場合は自動的に先頭に追加されます。パターンに}?@emph{または}*'または'[@emph{がない場合、最後に}/*'が含まれます。

@item  @samp{--exclude=<glob-pattern>} 
次の`--all`または`--branches`または`--tags`または`--remotes`または`--glob`が別の方法で考慮する'<glob-pattern>'に一致するrefを含めないでください。このオプションを繰り返すと、次の`--all`または`--branches`または`--tags`または`--remotes`または`--glob`オプションまで除外パターンが蓄積されます(他のオプションまたは引数は、蓄積されたパターンをクリアしません)。

与えられたパターンは、それぞれ`--branches`または`
--tags`または`--remotes`に適用される場合、‘refs/heads`または`refs/tags`または`refs/remotes`で始まるべきではありません。@samp{--glob`または}--all`に適用する場合は、`refs/`で始める必要があります。末尾の’/*'を意図している場合は、明示的に指定する必要があります。

@item  @samp{--reflog} 
reflogsで言及されているすべてのオブジェクトがコマンドラインに`<commit>`としてリストされているかのように見せかけます。

@item  @samp{--alternate-refs} 
代替リポジトリのref先端として言及されているすべてのオブジェクトがコマンドラインにリストされているかのように見せかけます。代替リポジトリは、オブジェクトディレクトリが`objects/info/alternates`で指定されているリポジトリです。インクルードされたオブジェクトのセットは、`core.alternateRefsCommand`などによって変更できます。git-config(1)を参照してください。

@item  @samp{--single-worktree} 
デフォルトでは、作業ツリーが複数ある場合、@samp{--all`と}-reflog`と`--indexed-objects`では、すべての作業ツリーが検査されます(git-worktree(1)を参照)。このオプションは、現在の作業ツリーのみを調べるように強制します。

@item  @samp{--ignore-missing} 
入力に無効なオブジェクト名が含まれている場合、そもそもその不正な入力が行われていないかのように見せかけます。

@item  @samp{--stdin} 
コマンドラインにリストされている'<commit>'に加えて、標準入力からそれらを読み取ります。`--`区切り文字が表示された場合は、コミットの読み取りを停止し、パスの読み取りを開始して結果を制限します。

@item  @samp{--quiet} 
標準出力には何も出力しないでください。この形式は主に、呼び出し元が終了ステータスをテストして、オブジェクトの範囲が完全に接続されているかどうかを確認できるようにすることを目的としています。出力をフォーマットする必要がないため、stdoutを`/dev/null`にリダイレクトするよりも高速です。

@item  @samp{--disk-usage} 
通常の出力を抑制します。代わりに、選択したコミットまたはオブジェクトによってディスク上のストレージに使用されたバイトの合計を出力します。これは、出力が(特に`--use-bitmap-index`を伴った場合)はるかに高速に実行されることを除いて、出力を`git
cat-file --batch-check=@emph{%(objectsize:disk)}`にパイプすることと同じです。"on-disk
storage"の意味する制限については、git-cat-file(1)の`CAVEATS`節を参照してください。

@item  @samp{--cherry-mark} 
@samp{--cherry-pick}（以下を参照）と同様ですが、同等のコミットを省略せずに`=@samp{と印し、同等でないコミットを}+`と印します。

@item  @samp{--cherry-pick} 
コミットの組を対称差(symmetric difference)に制限する場合、「反対側」の別のコミットと同じ変更を導入するコミットを省略します。

たとえば、@samp{A`と`B`の2つのブランチがある場合、それらの片側だけですべてのコミットを一覧表示する通常の方法は、}--left-right`を使用することです(`--left-right`オプションの説明の以下の例を参照してください)。ただし、他のブランチからは(ブランチAと重複しない)厳選されたコミットが表示されます(たとえば、「3rd
onb」はブランチAからチェリーピックされる可能性があります)。このオプションを使用すると、そのようなコミットのペアは出力から除外されます。

@item  @samp{--left-only} 
@itemx  @samp{--right-only} 
リストは、対称差のそれぞれの側でのみコミットします。つまり、@samp{--left-right`で `<}
と印されるのだけか、あるいは`--left-right`で`>`と印されるものだけです。

たとえば、@samp{--cherry-pick --right-only
A...B`は、`A`にある、または`A`のコミットとパッチと同等のコミットを`B`から省略します。つまり、これは`git cherry A
B`からの}+@samp{コミットをリストします。より正確に書くと、}--cherry-pick --right-only
--no-merges`により正確なリストを提供します。

@item  @samp{--cherry} 
`--right-only --cherry-mark
--no-merges`の同義語です。出力を私たちの側のコミットに制限し、フォークされた履歴の反対の側に適用されたものを、`git cherry
upstream mybranch`と同様に`git log --cherry upstream…mybranch`で印するのに役立ちます。

@item  @samp{-g} 
@itemx  @samp{--walk-reflogs} 
コミットの祖先チェーンをたどる代わりに、reflogエントリを最新のものから古いものに移動します。このオプションを使用する場合、除外するコミットを指定することはできません(つまり、'^commit’や'commit1..commit2’や'commit1...commit2’表記は使用できません)。

(明らかな理由で、)@samp{oneline`と`reference`以外の}--pretty`形式では、これにより、出力にreflogから取得された2行の追加情報が含まれます。出力のreflog指定子は、@samp{ref@@@{Nth@}}(@samp{Nth`はreflogの逆時系列インデックス(reverse-chronological
index))または`ref@@@{timestamp@}}(そのエントリのタイムスタンプ付き)として表示されます。表示は下記のいくつかのルールに依存します:

@enumerate 

@item
開始点が @samp{ref@@@{Nth@}} として指定されている場合は、インデックス形式を表示します。

@item
開始点が @samp{ref@@@{now@}} として指定されている場合は、タイムスタンプ形式を表示します。

@item
上記のどちらも使用されていないが、コマンドラインで`--date`が指定されている場合は、`--date`で要求された形式でタイムスタンプを表示します。

@item
それ以外の場合は、インデックス形式を表示します。
@end enumerate

@samp{--pretty =
oneline`では、コミットメッセージの前にこの情報が同じ行に付けられます。このオプションを}--reverse`と組み合わせることはできません。git-reflog(1)も参照してください。

`--pretty=reference`では、この情報はまったく表示されません。

@item  @samp{--merge} 
マージが失敗した後、競合があり、マージするすべてのheadに存在しないファイルに関連(touch)するrefを表示します。

@item  @samp{--boundary} 
除外された境界コミットを出力します。 境界コミットの前には `-`が付いています。

@item  @samp{--use-bitmap-index} 
(使用可能な場合は、)パックビットマップインデックスを使用して、トラバーサルを高速化しようと試みます。`--objects`でトラバースする場合、ツリーとブロブには関連するパスが出力されないことに注意してください。

@item  @samp{--progress=<header>} 
オブジェクトが対称になるときに、stderrに進捗レポートを表示します。`<header>`テキストは、進行状況が更新されるたびに印刷されます。
@end table

@noindent

@heading History Simplification

特定の<path>を変更するコミットなど、履歴の一部のみに関心がある場合があります。ただし、「履歴の簡略化」(History
Simplification)は2つの部分から成ります。履歴を簡略化するためにはさまざまな戦略があるためです。その1つはコミットの選択であり、もう1つはそれを行う方法です。

以下のオプションは、表示するコミットを選択します:

@table @asis

@item  <paths> 
指定された<パス>を変更するコミットが選択されます。

@item  @samp{--simplify-by-decoration} 
いくつかのブランチまたはタグによって参照されるコミットが選択されます。
@end table

注意: 意味のある重要な履歴のために、追加のコミットを表示できることに注意してください。

以下のオプションは、簡略化の実行方法に影響します。

@table @asis

@item  Default mode 
履歴を、ツリーの最終状態を説明する最も単純な履歴に単純化します。最終結果が同じである場合(つまり、同じコンテンツのブランチをマージする場合)、いくつかの傍流ブランチ(side
branches)を削除するため、最も単純です。

@item  @samp{--show-pulls} 
デフォルトモードからのすべてのコミットを含めますが、最初の親へのTREESAMEではなく、後の親へのTREESAMEであるマージコミットも含めます。このモードは、ブランチに変更を「最初に導入した」マージコミットを表示するのに役立ちます。(訳注:TREESAME=pathspecが全く同一であるツリー)

@item  @samp{--full-history} 
デフォルトモードと同じですが、一部の履歴を削除しません。

@item  @samp{--dense} 
選択したコミットのみが表示され、重大で意味のある履歴を持つコミットもいくつか表示されます。

@item  @samp{--sparse} 
簡略化された履歴内のすべてのコミットが表示されます。

@item  @samp{--simplify-merges} 
このマージに寄与する選択されたコミットがないため、結果の履歴からいくつかの不要なマージを削除するための`--full-history`への追加オプション。

@item  @samp{--ancestry-path} 
表示するコミットの範囲が指定されている場合(たとえば、@emph{commit1..commit2’または’commit2 ^commit1})、
@emph{commit1} と @emph{commit2} の間の祖先チェーンに直接存在するコミットのみ、つまり、 @emph{commit1} の子孫であり、
@emph{commit2} の祖先であるコミットを表示します。
@end table

より詳細な説明は以下のとおりです。

<paths> として @samp{foo} を指定したとします。 @samp{foo} !TREESAME
を変更するコミットを呼び出し、残りをTREESAMEと呼びます。( @samp{foo}
のためにフィルタリングされた差分では、それぞれ異なって見えたりたり等しく見えたりします。）

以下、簡略化設定の違いを説明するために、同じ履歴例を使います。このコミットグラフでは、ファイル @samp{foo} をフィルタリングしていると想定しています:

@example
          .-A---M---N---O---P---Q
         /     /   /   /   /   /
        I     B   C   D   E   Y
         \   /   /   /   /   /
          `-------------'   X
@end example


履歴 A---Q の水平線は、各マージの最初の親と見なされます。その各コミットは以下のとおりです:

@itemize 

@item
@samp{I} は最初のコミットであり、ファイル @samp{foo} が内容 “asdf” で存在し、ファイル @samp{quux} は内容 “quux”
で存在します。最初のコミットは空のツリーと比較されるため、@samp{I} は !TREESAME です。

@item
@samp{A} では、 @samp{foo} には “foo” だけが含まれています。

@item
@samp{B} には @samp{A} と同じ変更が含まれています。そのマージ @samp{M} は些細なことであり、したがってすべての親にとって TREESAME です。

@item
@samp{C} は @samp{foo} を変更しませんが、そのマージ @samp{N} はそれを “foobar” に変更するので、どの親にとっても TREESAME
ではありません。

@item
@samp{D} は @samp{foo} を “baz” に設定します。そのマージ @samp{O} は、 @samp{N} と @samp{D} から “foobarbaz”
への文字列を結合します。つまり、どの親にとっても TREESAME ではありません。

@item
@samp{E} は @samp{quux} を “xyzzy” に変更し、そのマージ @samp{P} は文字列を “quuxxyzzy” に結合します。 @samp{P} は
@samp{O} に対して TREESAME ですが、 @samp{E} に対してはそうではありません。

@item
@samp{X} は、新ファイル @samp{side} を追加し、 @samp{Y} がそれを変更した独立したルートコミットです。 @samp{Y} は @samp{X}
へのTREESAMEです。そのマージ @samp{Q} は @samp{P} に @samp{side} を追加し、 @samp{Q} は @samp{P} にはTREESAMEですが、@samp{Y}
に対してはそうではありません。
@end itemize

@samp{rev-list} は、 @samp{--full-history} および/または、( @samp{--parents} または @samp{--children}
を介して)親の書き換えが使用されているかどうかに基づいて、コミットを含めたり除外したりして、履歴を逆方向にウォークスルーします。以下の設定が可能です。

@table @asis

@item  Default mode 
コミットは、どの親に対してもTREESAMEでない場合に含まれます(これは変更できますが、以下の @samp{--sparse}
を参照してください)。コミットがマージであり、一方の親に対するTREESAMEであった場合は、その親のみをフォローします。(TREESAMEの親が複数ある場合でも、そのうちの1つだけをフォローします)。それ以外の場合は、すべての親をフォローします。

これにより、以下のようになります:

@example
          .-A---N---O
         /     /   /
        I---------D
@end example


TREESAMEの親のみに従うルールが利用可能な場合は、 @samp{B} を検討対象から完全に削除したことに注意してください。 @samp{C} は @samp{N}
を介して考慮されましたが、しかしそれはTREESAMEです。ルートコミットは空のツリーと比較されるため、 @samp{I} は !TREESAME です。

親子関係は @samp{--parents} でのみ表示されますが、デフォルトモードで選択されたコミットには影響しないため、親の行を示しました。

@item  @samp{--full-history without parent rewriting} 
このモードは、デフォルトとはある一点で異なります。つまり、いずれかの親に対してTREESAMEであっても、常にマージのすべての親に従います。マージの複数の側にコミットが含まれている場合でも、これはマージ自体が含まれていることを意味するものではありません！
例では以下のようになります。

@example
        I  A  B  N  D  O  P  Q
@end example


@samp{M} は、両方の親にとってTREESAMEであるため、除外されました。 @samp{E} と @samp{C} と @samp{B} をすべて巡りましたが、 @samp{B} だけが
!TREESAME だったので、他は表示されません。

注意:
親の書き換え(rewrite)がないと、コミット間の親子関係について話す(talk)ことは実際には不可能であるため、それらが切断されている(disconnected)ことを示していることに注意してください。

@item  @samp{--full-history with parent rewriting} 
通常のコミットは !TREESAME の場合にのみ含まれます(これは変更できますが、以下の @samp{--sparse} を参照してください)。

マージは常に含まれます。ただし、親リストは書き直されます。各親に沿って、自分自身に含まれていないコミットを削除します。 これにより以下のようになります。

@example
          .-A---M---N---O---P---Q
         /     /   /   /   /
        I     B   /   D   /
         \   /   /   /   /
          `-------------'
@end example


上記を書き直さずに @samp{--full-history} と比較してください。 @samp{E} はTREESAMEであるため削除されましたが、Pの親リストは @samp{E}
の親 @samp{I} を含むように書き直されていることに注意してください。 @samp{C} と @samp{N} および @samp{X} と @samp{Y} と @samp{Q}
についても同じことが起こりました。
@end table

上記の設定に加えて、あなたはTREESAMEが包含に影響を与えるかどうかを変更できます:

@table @asis

@item  @samp{--dense} 
巡ったコミットは、親にとってTREESAMEでない場合に含まれます。

@item  @samp{--sparse} 
巡ったすべてのコミットが含まれます。

@samp{--full-history}
がなくても、これによりマージが単純化されることに注意してください。親の1つがTREESAMEの場合、その1つだけに従うため、マージの反対側を巡ることはありません。

@item  @samp{--simplify-merges} 
最初に、親を書き換えた @samp{--full-history} と同じ方法で履歴グラフを作成します(上記を参照)。

それから、以下のルールに従って、各コミット @samp{C} を最終履歴内の置換 @samp{C'} に単純化します:

@itemize 

@item
@samp{C'} を @samp{C} にセットします。

@item
@samp{C'} の各親 @samp{P} をその簡略化された @samp{P'}
に置き換えます。その過程で、他の親の祖先であるか、ルートである親を削除すると、TREESAMEが空のツリーにコミットされ、重複が削除されますが、TREESAMEであるすべての親を削除しないように注意してください。

@item
この親の書き換え後、 @samp{C'} がルートまたはマージコミット(0または >1 の親を持つ)、境界コミット、または
!TREESAMEである場合、それは残ります。それ以外の場合は、唯一の親に置き換えられます。
@end itemize

この効果は、親の書き換えを使用した @samp{--full-history} と比較することで最もよく示されます。例は以下のようになります:

@example
          .-A---M---N---O
         /     /       /
        I     B       D
         \   /       /
          `---------'
@end example


注意: @samp{--full-history} に対する @samp{N} と @samp{P} と @samp{Q} の主な違いに注意してください:

@itemize 

@item
@samp{N} の親リストは、他の親 @samp{M} の祖先であるため、 @samp{I} が削除されました。それでも、 !TREESAME なので @samp{N} が残りました。

@item
@samp{P} の親リストも同様に @samp{I} が削除されました。 @samp{P} は、親が1つで TREESAMEであるため、完全に削除されました。

@item
@samp{Q} の親リストでは、 @samp{Y} が @samp{X} に簡略化されていました。その後、 @samp{X} はTREESAMEルートであったため、削除されました。 @samp{Q}
は、親が1つで TREESAMEであるため、完全に削除されました。
@end itemize
@end table

利用可能な別の簡略化モードがあります:

@table @asis

@item  @samp{--ancestry-path} 
表示されるコミットを、指定されたコミット範囲内の “from” コミットと “to”
コミットの間の祖先チェーンに直接あるコミットに制限します。つまり、 “to” コミットの祖先であるコミットと “from”
コミットの子孫であるコミットのみを表示します。

ユースケースの例として、以下のコミット履歴について考えます:

@example
            D---E-------F
           /     \       \
          B---C---G---H---I---J
         /                     \
        A-------K---------------L--M
@end example


通常の @emph{D..M} は、 @samp{M} の祖先であるコミットのセットを計算しますが、 @samp{D} の祖先であるコミットは除外します。 これは、「 @samp{M} には
@samp{D} には存在しなかったものがある」という意味で、 @samp{D} 以降の @samp{M`に至るまでの歴史に何が起こったのかを知るのに役立ちます。この例の結果は、
`A} と @samp{B} (そしてもちろん @samp{D} 自体)を除くすべてのコミットになります。

ただし、 @samp{M} のコミットが @samp{D} で入ったバグで汚染されており、修正が必要な場合は、実際には @samp{D} の子孫である @emph{D..M}
のサブセットのみを表示する必要があります。つまり、 @samp{C} と @samp{K} を除外します。これはまさに @samp{--ancestry-path}
オプションが行うことです。これを @emph{D..M} 範囲に適用すると、以下のようになります:

@example
                E-------F
                 \       \
                  G---H---I---J
                               \
                                L--M
@end example

@end table

別のオプション @samp{--show-pulls} について説明する前に、新しいサンプル履歴を作成する必要があります。

簡略化された履歴を見るときにユーザーが直面する一般的な問題は、ファイルを変更したことがわかっているコミットが、ファイルの簡略化された履歴に表示されないことです。そこで、新しい例を示し、その場合に
@samp{--full-history} や @samp{--simplify-merges} などのオプションがどのように機能するかを示しましょう。

@example
          .-A---M-----C--N---O---P
         /     / \  \  \/   /   /
        I     B   \  R-'`-Z'   /
         \   /     \/         /
          \ /      /\        /
           `---X--'  `---Y--'
@end example


この例では、 @samp{I} が @samp{file.txt} を作成し、それが @samp{A} と`B` と @samp{X}
にてさまざまな方法で変更されたとします。ひとり親のコミット @samp{C} と @samp{Z} と @samp{Y} は @samp{file.txt} を変更していません。マージコミット
@samp{M} は、マージの競合を解決して、 @samp{A} と @samp{B}
の両方の変更を含めることによって作成されたため、どちらにもTREESAMEではありません。ただし、マージコミット @samp{R} は、 @samp{M} の
@samp{file.txt`の内容を無視し、 `X} の @samp{file.txt} の内容のみを取得することによって作成されました。 したがって、 @samp{R} は
@samp{X} へのTREESAMEですが、 @samp{M} はそうではありません。最後に、 @samp{N} を作成するための自然なマージ解決は、 @samp{R} で
@samp{file.txt} の内容を取得することです。したがって、 @samp{N} は @samp{C} ではなく @samp{R} へのTREESAMEです。マージコミット @samp{O} と
@samp{P} は、最初の親にはTREESAMEですが、2番目の親である @samp{Z} と @samp{Y} にはついてはそうではありません。

デフォルトモードを使用する場合、 @samp{N} と @samp{R}
は両方ともTREESAMEの親を持っているため、これらのエッジはウォークされ、他のエッジは無視されます。結果の履歴グラフは以下のとおりです:

@example
        I---X
@end example


@samp{--full-history} を使用する場合、Gitはすべてのエッジを巡ります。これにより、コミット @samp{A} と @samp{B} と マージ @samp{M}
が検出されますが、マージコミット @samp{O} と @samp{P} も明らかになります。 親を書き換えると、結果のグラフは以下のようになります:

@example
          .-A---M--------N---O---P
         /     / \  \  \/   /   /
        I     B   \  R-'`--'   /
         \   /     \/         /
          \ /      /\        /
           `---X--'  `------'
@end example


ここで、マージコミット @samp{O} と @samp{P} は、実際には @samp{file.txt} への変更を提供しなかったため、余分なノイズを提供します。古いバージョンの
@samp{file.txt}
に基づいたトピックのみをマージしました。これは、多くの寄稿者が並行して作業し、トピックブランチを単一のトランクに沿ってマージするワークフローを使用するリポジトリの一般的な問題です。開発に関係のないマージが
@samp{--full-history} の結果に表示されます。

@samp{--simplify-merges} オプションを使用すると、コミット @samp{O} と @samp{P} が結果から消えます。 これは、 @samp{O} と @samp{P}
の書き直された2番目の親が、最初の親から到達可能であるためです。これらのエッジが削除されると、コミットは、親にとってTREESAMEである単一の親のコミットのように見えます。これはコミット
@samp{N} にも発生し、以下のような履歴ビューが表示されます:

@example
          .-A---M--.
         /     /    \
        I     B      R
         \   /      /
          \ /      /
           `---X--'
@end example


このビューでは、 @samp{A} と @samp{B} と @samp{X} からの重要なひとり親の変更がすべて表示されます。また、慎重に解決されたマージ @samp{M}
とそれほど慎重に解決されていないマージ @samp{R} も表示されます。これは通常、コミット @samp{A} と @samp{B}
がデフォルトのビューの履歴から「消えた」理由を判断するのに十分な情報です。ただし、このアプローチにはいくつかの問題があります。

最初の問題はパフォーマンスです。以前のオプションとは異なり、 @samp{--simplify-merges}
オプションでは、単一の結果を返す前にコミット履歴全体をウォークする必要があります。これにより、非常に大規模なリポジトリでこのオプションを使用するのが難しくなる可能性があります。

2番目の問題は監査の1つです。多くの寄稿者が同じリポジトリで作業している場合、どのマージコミットが重要なブランチに変更を導入したかが重要です。上記の問題のあるマージ
@samp{R} は、重要なブランチにマージするために使用されたマージコミットではない可能性があります。 代わりに、マージ @samp{N} を使用して @samp{R} と @samp{X}
を重要なブランチにマージしました。このコミットには、変更 @samp{X} がコミットメッセージの @samp{A} と @samp{B}
からの変更を上書きするようになった理由に関する情報が含まれている可能性があります。

@table @asis

@item  @samp{--show-pulls} 
デフォルトの履歴に表示されるコミットに加えて、最初の親にはTREESAMEではなく、後の親にはTREESAMEである各マージコミットを表示します。

マージコミットが @samp{--show-pulls} に含まれている場合、マージは別のブランチから変更を「プル」したかのように扱われます。この例で
@samp{--show-pulls} を使用すると(他のオプションは使用しない場合、)結果のグラフは行かのようになります:

@example
        I---X---R---N
@end example


ここで、コミット @samp{X} と @samp{R} をそれぞれベースブランチにプルしたため、マージコミット @samp{R} と @samp{N}
が含まれています。これらのマージは、コミット @samp{A} と @samp{B} がデフォルトの履歴に表示されない理由です。

@samp{--show-pulls} が @samp{--simplify-merges} とペアになっている場合、グラフには必要なすべての情報が含まれます:

@example
          .-A---M--.   N
         /     /    \ /
        I     B      R
         \   /      /
          \ /      /
           `---X--'
@end example


@samp{M} は @samp{R} から到達可能であるため、 @samp{N} から @samp{M} へのエッジが単純化されていることに注意してください。ただし、 @samp{N} は、変更
@samp{R} をメインブランチに「プル」したため、重要なコミットとして履歴に表示されます。
@end table

@samp{--simplify-by-decoration}
オプションを使用すると、タグで参照されていないコミットを省略して、履歴のトポロジの全体像のみを表示できます。コミットは、(1)タグによって参照されている場合、または
(2)コマンドラインで指定されたパスの内容を変更した場合に、!TREESAMEとしてマークされます(つまり、上記の履歴簡略化ルールの後に保持されます)。他のすべてのコミットはTREESAMEとしてマークされます(簡略化される可能性があります)。

@noindent

@heading Bisection Helpers

@table @asis

@item  @samp{--bisect} 
含まれるコミットと除外されるコミットのほぼ中間にある1つのコミットオブジェクトに出力を制限します。(存在する場合)bad bisection ref
@samp{refs/bisect/bad} が含まれるコミットに追加され、（存在する場合)good bisection ref
@samp{refs/bisect/good-*} が除外されるコミットに追加されることに注意してください。したがって、 @samp{refs/bisect/}
にrefsがないと仮定すると、

@example
        $ git rev-list --bisect foo ^bar ^baz
@end example


は、2つのコマンドの出力である中間点(midpoint)を出力します

@example
        $ git rev-list foo ^midpoint
        $ git rev-list midpoint ^bar ^baz
@end example


上記は、ほぼ同じ長さになります。 したがって、回帰を導入する変更を見つけることは、バイナリ検索(binary
search)に還元されます。コミットチェーンの長さが1になるまで、新しい中間点(midpoint)を繰り返し生成してテストします。

@item  @samp{--bisect-vars} 
これは、 @samp{refs/bisect/} 内のrefが使用されないこと、およびシェルによって評価される準備ができているテキストを出力することを除いて、
@samp{--bisect} と同じように計算されます。これらの行は、中間点リビジョンの名前を変数 @samp{bisect_rev} に割り当て、
@samp{bisect_rev} が @samp{bisect_nr} にテストされた後にテストされるコミットの予想数、 @samp{bisect_rev} が
@samp{bisect_good`に適していることが判明した場合にテストされるコミットの予想数、 `bisect_rev} が @samp{bisect_bad}
に不適切であることが判明した場合にテストされるコミットの予想数、および現在 @samp{bisect_all} に二等分しているコミットの数です。

@item  @samp{--bisect-all} 
これにより、含まれるコミットと除外されるコミットの間のすべてのコミットオブジェクトが、含まれるコミットと除外されるコミットまでの距離順に出力されます。
@samp{refs/bisect/} のrefは使用されません。それらから最も遠いものが最初に表示されます。(これは @samp{--bisect}
によって表示される唯一のものです。)

これは、何らかの理由(たとえば、コンパイルできない場合など)でそれらの一部をテストすることを避けたい場合に、テストするための適切なコミットを簡単に選択できるため便利です。

このオプションは @samp{--bisect-vars} と一緒に使用できます。この場合、ソートされたすべてのコミットオブジェクトの後に、
@samp{--bisect-vars} が単独で使用された場合と同じテキストが表示されます。
@end table

@noindent

@heading Commit Ordering

デフォルトでは、コミットは新しい順に表示されます。

@table @asis

@item  @samp{--date-order} 
すべての子が表示されるまで親を表示しませんが、それ以外の場合はコミットタイムスタンプの順序でコミットを表示します。

@item  @samp{--author-date-order} 
すべての子が表示されるまで親を表示しませんが、それ以外の場合は、作者(author)のタイムスタンプ順にコミットを表示します。

@item  @samp{--topo-order} 
すべての子が表示されるまで親を表示せず、複数の履歴行が混在するコミットを表示しないようにします。

たとえば、以下のようなコミット履歴があります:

@example
    ---1----2----4----7
        \              \
         3----5----6----8---
@end example


ここで、数字はコミットタイムスタンプの順序を示し、 @samp{gitrev-list} と @samp{--date-order}
のある友達は、タイムスタンプの順序でコミットを示します。つまり、8 7 6 5 4 3 2 1

@samp{--topo-order} を使用すると、8 6 5 3 7 4 2 1（または8 7 4 2 6 5 3
1）が表示されます。2つの並列開発トラックからのコミットが混在して表示されないようにするために、いくつかの古いコミットが新しいコミットの前に表示されます。

@item  @samp{--reverse} 
表示するように選択したコミットを逆の順序で出力します(上記の Commit Limiting 節を参照)。 @samp{--walk-reflogs}
と組み合わせることはできません。
@end table

@noindent

@heading Object Traversal

これらのオプションは、主にGitリポジトリのパッキングを対象としています。

@table @asis

@item  @samp{--objects} 
リストされたコミットによって参照されるオブジェクトのオブジェクトIDを出力します。 したがって、 @samp{--objects foo ^bar}
「コミットオブジェクトが @emph{bar} であるが @emph{foo}
でない場合にダウンロードする必要があるすべてのオブジェクトIDを送ってください」という意味です。

@item  @samp{--in-commit-order} 
ツリーIDとブロブのIDをコミット順に出力します。 ツリーIDとブロブのIDは、コミットによって最初に参照された後に出力されます。

@item  @samp{--objects-edge} 
@samp{--objects} に似ていますが、接頭辞 “-” 文字が付いた除外されたコミットのIDも出力します。これは
git-pack-objects(1)
によって使用され、ネットワークトラフィックを削減するために、これらの除外されたコミットに含まれるオブジェクトに基づいてオブジェクトを削除された形式で記録する「薄い」パック(thin
pack)を構築します。

@item  @samp{--objects-edge-aggressive} 
@samp{--objects-edge}
に似ていますが、時間がかかるという犠牲を払って、除外されたコミットを見つけためにもっともっと頑張ります。これは、@samp{--objects-edge}
の代わりに使用されて浅いリポジトリ(shallow repositories)用の「薄い」パック(thin pack)を構築します。

@item  @samp{--indexed-objects} 
インデックスで使用されるすべてのツリーとブロブがコマンドラインにリストされているかのように見せかけます。 注意: たぶんあなたは一緒に
@samp{--objects} も使用したいと思うでしょう。

@item  @samp{--unpacked} 
@samp{--objects} と一緒の時のみ役立ちます。パックに含まれていないオブジェクトIDを出力します。

@item  @samp{--object-names} 
@samp{--objects} と一緒の時のみ役立ちます。見つかったオブジェクトIDの名前を出力します。これがデフォルトの動作です。

@item  @samp{--no-object-names} 
@samp{--objects} と一緒の時のみ役立ちます。見つかったオブジェクトIDの名前は出力されません。これにより、 @samp{--object-names}
が反転します。 このフラグを使用すると、 git-cat-file(1) などのコマンドで出力をより簡単に解析できます。

@item  @samp{--filter=<filter-spec>} 
@samp{--objectsほげほげ}
のどれかと一緒の時のみ役立ちます。印刷されたオブジェクトのリストからオブジェクト(通常はブロブ)を省略します。@emph{<filter-spec>}
は、以下のいずれかになります:

@emph{--filter=blob:none} の形式では、すべてのブロブが省略されます。

@emph{--filter=blob:limit=<n>[kmg]}
の形式では、nバイトまたは指定の単位より大きいブロブが省略されます。nはゼロの場合があります。
接尾辞kとmとgを使用して、KiBまたはMiBまたはGiBの単位にすることができます。 たとえば、 @emph{blob:limit=1k} は
@emph{blob:limit=1024} と同じです。

@emph{--filter=object:type=(tag|commit|tree|blob)}
の形式では、要求されたタイプではないすべてのオブジェクトが省略されます。

@emph{--filter=sparse:oid=<blob-ish>} の形式は、ブロブ(またはブロブ式) @emph{<blob-ish>}
に含まれるsparse-checkout仕様を使用して、 要求されたrefsでsparse checkoutに必要のないブロブを省略します。

@emph{--filter=tree:<depth>} の形式は、ルートツリーからの深さが >= <depth>
(オブジェクトがトラバースされたコミットの複数の深さにある場合の最小深さ)であるすべてのブロブとツリーを省略します。 <depth>=0
は、コマンドライン(または --stdin が使用されている場合は標準入力)に明示的に含まれていない限り、ツリーやブロブを含みません。
<depth>=1 は、 <commit>
から到達可能なコミットまたは明示的に指定されたオブジェクトによって直接参照されるツリーとブロブのみが含まれます。 <depth>=2 は
<depth>=1 に似ていますが、明示的に指定されたコミットまたはツリーから削除されたもう1つのレベルのツリーとブロブも含まれます。

注意: ファイルシステム上の任意のパスから読み取れる形式である @emph{--filter=sparse:path=<path>}
は、セキュリティ上の理由から削除されたことに注意してください。

複数の @emph{--filter=}
フラグを指定して、フィルターを組み合わせることができます。指定の全てのフィルターで受け入れられるオブジェクトのみが含まれます。

@emph{--filter=combine:<filter1>+<filter2>+…<filterN>}
の形式を使用して、複数のフィルターを組み合わせることができますが、これは @emph{--filter}
フラグを繰り返すよりもずっとずっと難しく、通常は必要はありません。フィルタは @emph{+} で結合され、個々のフィルタは %
エンコードされます(つまり、URLエンコードされます)。 @emph{+} と @emph{%}
文字に加えて、次の文字は予約されており、エンコードする必要があります: @samp{~!@@#$^&*()[]@{@}\;",<>?}@samp{'`}
およびASCIコード @samp{0x20} 以下の全ての文字(空白(space)と改行(newline)を含む)。

他の任意の文字もエンコードできます。 たとえば、 @emph{combine:tree:3+blob:none} と
@emph{combine:tree%3A3+blob%3Anone} は同等です。

@item  @samp{--no-filter} 
以前の @samp{--filter=} 引数をすべてオフにします。

@item  @samp{--filter-provided-objects} 
明示的に提供されたオブジェクトのリストをフィルタリングします。そうしないと、どのフィルターとも一致しなくても常に出力されます。 @samp{--filter=}
と一緒に使った時のみ役に立ちます。

@item  @samp{--filter-print-omitted} 
@samp{--filter=} と一緒の時のみ役立ちます。フィルタによって省略されたオブジェクトのリストを出力します。オブジェクトIDの前には “~”
文字が付いています。

@item  @samp{--missing=<missing-action>} 
将来の「部分クローン」(partial clone)開発に役立つデバッグオプション。このオプションは、欠落しているオブジェクトの処理方法を指定します。

@emph{--missing=error} の形式は、欠落しているオブジェクトが検出された場合に、rev-list
がエラーで停止することを要求します。これがデフォルトのアクションです。

@emph{--missing=allow-any}
の形式を使用すると、欠落しているオブジェクトが検出された場合でも、オブジェクトの走査を続行できます。欠落しているオブジェクトは、結果から黙って省略されます。

@emph{--missing=allow-promisor} の形式は @emph{allow-any} に似ていますが、オブジェクトのトラバーサルは、 EXPECTED
promisor が欠落しているオブジェクトに対してのみ続行できます。予期しない欠落したオブジェクトはエラーを発生させます。

@emph{--missing=print} の形式は @emph{allow-any}
に似ていますが、欠落しているオブジェクトのリストも出力します。オブジェクトIDの前には “?” 文字が付いています。

@item  @samp{--exclude-promisor-objects} 
(内部使用のみ。) promisor境界でのオブジェクトトラバーサルをプレフィルターします。これは部分クローン(partial
clone)で使用されます。これは、欠落しているオブジェクトに関するエラーを単に黙らせるのではなく、トラバーサルを制限するため、
@samp{--missing=allow-promisor} よりも強力です。

@item  @samp{--unsorted-input} 
コミット時間で時系列の逆順に並べ替えるのではなく、コマンドラインで指定された順序でコミットを表示します。@samp{--no-walk} または
@samp{--no-walk=sorted} と組み合わせることはできません。

@item  @samp{--no-walk[=(sorted|unsorted)]} 
指定されたコミットのみを表示し、祖先をトラバースしない。範囲が指定されている場合、これは効果がありません。引数 @samp{unsorted}
が指定されている場合、コミットはコマンドラインで指定された順序で表示されます。それ以外の場合( @samp{sorted}
または引数が指定されていない場合)、コミットはコミット時間の逆順に表示されます。 @samp{--graph} と組み合わせることはできません。 @samp{sorted}
または引数が指定されていない場合、 @samp{--unsorted-input} と組み合わせることはできません。

@item  @samp{--do-walk} 
以前の @samp{--no-walk} を上書きします。
@end table

@noindent

@heading Commit Formatting

これらのオプションを使用すると、 git-rev-list(1) より専門的なコミットログツールのファミリーである
git-log(1) や git-show(1) や  git-whatchanged(1)
と同様に機能します。

@table @asis

@item  @samp{--pretty[=<format>]} 
@itemx  @samp{--format=<format>} 
コミットログの内容を指定された形式できれいに印刷(pretty-print)します。 @emph{<format>} は
oneline・short・medium・full・fuller・reference・email・raw・format:<string>・tformat:<string>
のいずれかになります。 @emph{<format>} が上記のいずれでもなく、 @emph{%placeholder} が含まれている場合、
@emph{--pretty=tformat:<format>} が指定されたかのように動作します。

各フォーマットの詳細については、 "PRETTY FORMATS" セクションを参照してください。 @emph{=<format>}
の部分を省略すると、デフォルトで @emph{medium} になります。

注意: リポジトリー構成でデフォルトのpretty formatを指定できます(git-config(1) 参照)。

@item  @samp{--abbrev-commit} 
40バイトの16進コミットオブジェクト名全体を表示する代わりに、オブジェクトに一意の名前を付けるプレフィックスを表示します。
"--abbrev=<n>" (表示されている場合はdiff出力も変更します)オプションを使用して、プレフィックスの最小長を指定できます。

これにより、80桁幅の端末を使用している人にとって "--pretty=oneline" がずっと読みやすくなるはずです。

@item  @samp{--no-abbrev-commit} 
完全な40バイトの16進コミットオブジェクト名を表示します。 これにより、明示的または "--oneline"
などの他のオプションによって暗黙的に示される @samp{--abbrev-commit} が無効になります。また、 @samp{log.abbrevCommit}
変数をオーバーライドします。

@item  @samp{--oneline} 
これは、 "--pretty=oneline --abbrev-commit" を一緒に使用するための省略形です。

@item  @samp{--encoding=<encoding>} 
コミットオブジェクトは、ログメッセージに使用される文字エンコードをエンコードヘッダーに記録します。このオプションを使用して、ユーザーが好むエンコーディングでコミットログメッセージを再コーディングするようにコマンドに指示できます。配管以外のコマンドの場合、これはデフォルトでUTF-8になります。オブジェクトが
@samp{X} でエンコードされていると主張し、 @samp{X}
で出力している場合、オブジェクトをそのまま出力することに注意してください。これは、元のコミットの無効なシーケンスが出力にコピーされる可能性があることを意味します。同様に、
iconv(3) コミットの変換に失敗した場合、警告とともに元のオブジェクトをそのまま出力します。

@item  @samp{--expand-tabs=<n>} 
@itemx  @samp{--expand-tabs} 
@itemx  @samp{--no-expand-tabs} 
出力に表示する前に、ログメッセージでタブ展開を実行します(タブ幅を <n> とみなして <n> 境界に揃うように空白で調整する)。
@samp{--expand-tabs} は @samp{--expand-tabs=8} の省略形であり、 @samp{--no-expand-tabs} は
@samp{--expand-tabs=0} の省略形です。タブの展開を無効にします。

デフォルトでは、タブはログメッセージを4つのスペースでインデントするきれいな形式(pretty formats)で展開されます(つまり、デフォルトの
@emph{medium} と’full' と @emph{fuller})。

@item  @samp{--show-signature} 
署名を @samp{gpg --verify} に渡して、署名されたコミットオブジェクトの有効性を確認し、出力を表示します。

@item  @samp{--relative-date} 
@samp{--date=relative} と同じ。

@item  @samp{--date=<format>} 
@samp{--pretty} を使用する場合など、人間が読める形式で表示される日付に対してのみ有効になります。 @samp{log.date} 構成変数(config
variable)は、logコマンドの @samp{--date}
オプションのデフォルト値を設定します。デフォルトでは、日付は元のタイムゾーン(コミッターの、または作者のいずれか)で表示されます。フォーマットに
@samp{-local} が追加されている場合(例: @samp{iso-local} )、代わりにユーザーのローカルタイムゾーンが使用されます。

@samp{--date=relative} は、現在の時刻を基準にした日付を示します。例: “2 hours ago” 。 @samp{-local} オプションは
@samp{--date = relative} には効果がありません。

@samp{--date=local} は @samp{--date=default-local} のエイリアスです。

@samp{--date=iso} (または @samp{--date=iso8601} )は、タイムスタンプをISO 8601のような形式で表示します。厳密なISO
8601形式との違いは以下のとおりです:

@itemize 

@item
@samp{T} 日付/時刻区切り文字の代わりにスペース

@item
時間とタイムゾーンの間のスペース

@item
タイムゾーンの時間と分の間にコロンがありません
@end itemize

@samp{--date=iso-strict} (または @samp{--date=iso8601-strict} )は、タイムスタンプを厳密なISO
8601形式で表示します。

@samp{--date=rfc} (または @samp{--date=rfc2822} )は、RFC
2822形式のタイムスタンプを示します。これは、電子メールメッセージでよく見られます。

@samp{--date=short} は、日付のみを表示し、時刻は表示せず、 @samp{YYYY-MM-DD} 形式で表示します。

@samp{--date=raw} は、エポック(1970-01-01 00:00:00 UTC)からの秒数、スペース、UTCからのオフセット(@samp{+} または
@samp{-} の付いた4桁数字で、最初の2つは時間、次の2つは分です)。つまり、タイムスタンプが @samp{strftime("%s %z")}
でフォーマットされているかのようになります。 @samp{-local}
オプションは、seconds-since-epoch値(常にUTCで測定されます)には影響しませんが、付随するタイムゾーン値を切り替えることに注意してください。

@samp{--date=human}
は、タイムゾーンが現在のタイムゾーンと一致しない場合はタイムゾーンを表示し、一致する場合は日付全体を印刷しません(つまり、「今年」の日付の場合は年の印刷をスキップしますが、何があったか覚えてるような過去数日については日付自体もスキップします)。
古い日付の場合、時と分も省略されます。

@samp{--date=unix} は、日付をUnixエポックタイムスタンプ(1970年からの秒数)として表示します。 @samp{--raw}
と同様に、これは常にUTCであるため、 ` -local` は効果がありません。

@samp{--date=format:...} は、内部で処理される%zと%Zを除いて、フォーマット @samp{...} をあなたのシステムの @samp{strftime}
に送ります。 @samp{--date=format:%c}
を使用して、システムロケールの推奨形式で日付を表示します。フォーマットプレースホルダーの完全なリストについては、 @samp{strftime}
マニュアルを参照してください。 @samp{-local} を使用する場合、正しい構文は @samp{--date=format-local:...} です。

@samp{--date=default} はデフォルトの形式であり、いくつかの例外を除いて @samp{--date=rfc2822} に似ています:

@itemize 

@item
曜日の後にコンマはありません

@item
ローカルタイムゾーンを使用する場合、タイムゾーンは省略されます
@end itemize

@item  @samp{--header} 
コミットの内容をraw形式で出力します。各レコードはNUL文字で区切られます。

@item  @samp{--no-commit-header} 
"commit" を含むヘッダー行と、指定された形式の前に出力されたオブジェクトIDを抑制します。これは組み込みフォーマットには影響しません。
カスタムフォーマットのみが影響を受けます。

@item  @samp{--commit-header} 
以前の @samp{--no-commit-header} を上書きします。

@item  @samp{--parents} 
コミットの親も出力します( "commit parent…" の形式で)。親の書き換えも可能にします。上記の @emph{History
Simplification} 参照してください。

@item  @samp{--children} 
コミットの子も出力します( "commit child…" の形式で)。親の書き換えも可能にします。上記の @emph{History
Simplification} を参照してください。

@item  @samp{--timestamp} 
生のコミットタイムスタンプを出力します。

@item  @samp{--left-right} 
対称差のどちら側からコミットに到達できるかをマークします。左側からのコミットには`<@samp{が付けられ、右側からのコミットには
`>`が付けられます。}--boundary`と組み合わせると、それらのコミットの前に`-`が付きます。

たとえば、以下のトポロジーの場合:

@example
             y---b---b  branch B
            / \ /
           /   .
          /   / \
         o---x---a---a  branch A
@end example


以下のような出力が得られます:

@example
        $ git rev-list --left-right --boundary --pretty=oneline A...B

        >bbbbbbb... 3rd on b
        >bbbbbbb... 2nd on b
        <aaaaaaa... 3rd on a
        <aaaaaaa... 2nd on a
        -yyyyyyy... 1st on b
        -xxxxxxx... 1st on a
@end example


@item  @samp{--graph} 
出力の左側に、コミット履歴のテキストベースのグラフィック表現を描画します。グラフ履歴を適切に描画するために、コミットの間に余分な行が出力される可能性があります。
@samp{--no-walk} と組み合わせることはできません。

これにより、親の書き換えが可能になります。上記の @emph{History Simplification} を参照してください。

これは、デフォルトで @samp{--topo-order} オプションを意味しますが、 @samp{--date-order} オプションも指定できます。

@item  @samp{--show-linear-break[=<barrier>]} 
--graph
を使用しない場合、すべての履歴ブランチがフラット化されるため、2つの連続するコミットが線形ブランチに属していないことがわかりにくくなる可能性があります。このオプションは、その場合、それらの間に障壁を置きます。
@samp{<barrier>} が指定されている場合、デフォルトの障壁文字列の代わりに @samp{<barrier>} が表示されます。

@item  @samp{--count} 
リストされたコミットの数を示す数値を出力し、他のすべての出力を抑制します。 @samp{--left-right}
と一緒に使用する場合は、代わりに、タブで区切って、左右のコミットのカウントを出力します。 @samp{--cherry-mark}
と一緒に使用する場合は、これらのカウントからパッチの同等のコミットを省略し、タブで区切られた同等のコミットのカウントを出力します。
@end table

@noindent

@chapheading PRETTY FORMATS

コミットがマージであり、 pretty-format が @emph{oneline} または @emph{email} または @emph{raw} でない場合、
@emph{Author:} 行の前に追加の行が挿入されます。この行は "Merge: "
で始まり、先祖のコミットのハッシュがスペースで区切られて出力されます。履歴の表示を制限している場合、たとえば、特定のディレクトリまたはファイルに関連する変更のみに関心がある場合、リストされたコミットは必ずしも
@strong{直接} の親コミットのリストではない可能性があることに注意してください。

いくつかの組み込みフォーマットがあります。そして以下で説明するように、 pretty.<name> 構成オプション(config
option)を別のフォーマット名または @emph{format:}
文字列に設定することで、追加のフォーマットを定義できます(git-config(1)
参照)。組み込みフォーマットの詳細は以下のとおりです:

@itemize 

@item
@emph{oneline}

@example
<hash> <title line>
@end example

これは、可能な限りコンパクトになるように設計されています。

@item
@emph{short}

@example
commit <hash>
Author: <author>
@end example

@example
<title line>
@end example

@item
@emph{medium}

@example
commit <hash>
Author: <author>
Date:   <author date>
@end example

@example
<title line>
@end example

@example
<full commit message>
@end example

@item
@emph{full}

@example
commit <hash>
Author: <author>
Commit: <committer>
@end example

@example
<title line>
@end example

@example
<full commit message>
@end example

@item
@emph{fuller}

@example
commit <hash>
Author:     <author>
AuthorDate: <author date>
Commit:     <committer>
CommitDate: <committer date>
@end example

@example
<title line>
@end example

@example
<full commit message>
@end example

@item
@emph{reference}

@example
<abbrev hash> (<title line>, <short author date>)
@end example

この形式は、コミットメッセージ内の別のコミットを参照するために使用され、 @samp{--pretty='format:%C(auto)%h (%s,
%ad)'} と同じです。 デフォルトでは、別の @samp{--date} オプションが明示的に指定されていない限り、日付は @samp{--date=short}
でフォーマットされます。formatプレースホルダーを使用する他の @samp{format:} と同様に、その出力は、 @samp{--decorate} や
@samp{--walk-reflogs} などの他のオプションの影響を受けません。

@item
@emph{email}

@example
From <hash> <date>
From: <author>
Date: <author date>
Subject: [PATCH] <title line>
@end example

@example
<full commit message>
@end example

@item
@emph{mboxrd}

@emph{email} と同様ですが、コミットメッセージの "From " で始まる行(前に0個以上の ">" が付いている)は ">"
でクォートされているため、新しいコミットの開始と混同されることはありません。

@item
@emph{raw}

@emph{raw} 形式は、コミットオブジェクトに格納されているとおりにコミット全体を正確に表示します。とりわけ --abbrev または
--no-abbrev
のどちらが使用されているかに関係なく、ハッシュは完全に表示され、「親」(parents)情報は、移植や履歴の単純化を考慮せずに、真の親のコミットを示します。この形式は、コミットの表示方法に影響しますが、いわゆる
@samp{git log --raw} の差分の表示方法ではありません。生のdiff形式で完全なオブジェクト名を取得するには、 @samp{--no-abbrev}
を使用します。

@item
@emph{format:<string>}

@emph{format:<string>} 形式を使用すると、表示する情報を指定できます。注意: これはprintf書式に少し似ていますが、 @emph{\n}
の代わりに @emph{%n} を使用して改行を取得するという例外に注意してください。

例:  @emph{format:"The author of %h was %an, %ar%nThe title was >>%s<<%n"}
は以下のように表示されます:

@example
The author of fe6e0ee was Junio C Hamano, 23 hours ago
The title was >>t4119: test autocomputing -p<n> for traditional diff input.<<
@end example


さて、以下がプレースホルダー達です:

@itemize 

@item
単一のリテラル文字に展開されるプレースホルダー:

@table @asis

@item  @emph{%n} 
改行(newline)

@item  @emph{%%} 
'%'そのもの

@item  @emph{%x00} 
16進数のバイト値を出力
@end table

@item
うしろのプレースホルダーのフォーマッティングに影響するプレースホルダー:

@table @asis

@item  @emph{%Cred} 
赤色に切り替える

@item  @emph{%Cgreen} 
緑色に切り替える

@item  @emph{%Cblue} 
青色に切り替える。

@item  @emph{%Creset} 
色をリセットする

@item  @emph{%C(…)} 
git-config(1) の "CONFIGURATION FILE" 節の Values で説明されている色の指定。
デフォルトでは、色はログ出力が有効になっている場合にのみ表示されます（ @samp{color.diff} または ` color.ui` または
@samp{--color`によって、ターミナルに行く場合は前者の `auto} 設定を尊重します)。 @samp{%C(auto,...)} は、 default
の歴史的同義語として受け入れられます(例: @samp{%C(auto,red)})。 @samp{%C(always,...)}
を指定すると、色が有効になっていない場合でも色が表示されます(この形式やgitが色付けする可能性のある他のすべてのものを含め、出力全体の色を有効にするために
@samp{--color = always} の使用を検討してください)。 @samp{auto} のみ(つまり、 @samp{%C(auto)}
)は、色が再び切り替わるまで、続くプレースホルダーで自動色付けをオンにします。

@item  @emph{%m} 
左(@samp{<}) または 右(@samp{>}) または 境界 (@samp{-}) の印

@item  @emph{%w([<w>[,<i1>[,<i2>]]])} 
git-shortlog(1) の -w オプションのように、
行の折り返しを切り替えます。

@item  @emph{%<(<N>[,trunc|ltrunc|mtrunc])} 
次のプレースホルダーに少なくともN列を使用させ、
必要に応じて右側にスペースを埋め込みます。オプションで、出力がN列より長い場合は、先頭(ltrunc)または中間(mtrunc)または末尾(trunc)で切り捨てます。注意:
切り捨ては、 N >= 2 でのみ正しく機能することに注意してください。

@item  @emph{%<|(<N>)} 
次のプレースホルダーを少なくともN番目の列まで取得し、
必要に応じて右側にスペースを埋め込みます

@item  @emph{%>(<N>)}, @emph{%>|(<N>)} 
それぞれ @emph{%<(<N>)} 、 @emph{%<|(<N>)} に似ていますが、
左側にスペースが埋め込まれています

@item  @emph{%>>(<N>)}, @emph{%>>|(<N>)} 
@emph{%>(<N>)} 、 @emph{%>|(<N>)} とそれぞれ似ていますが、
次のプレースホルダーが指定されたよりも多くのスペースを取り、その左側にスペースがある場合は、それらのスペースを使用します。

@item  @emph{%><(<N>)}, @emph{%><|(<N>)} 
それぞれ @emph{%<(<N>)} 、 @emph{%<|(<N>)} に似ていますが、
両側にパディングがあります(つまり、テキストが中央に配置されます)
@end table

@item
コミットから抽出された情報に展開するプレースホルダー:

@table @asis

@item  @emph{%H} 
コミットハッシュ

@item  @emph{%h} 
省略されたコミットハッシュ

@item  @emph{%T} 
ツリーハッシュ

@item  @emph{%t} 
省略されたツリーハッシュ

@item  @emph{%P} 
親のハッシュ達

@item  @emph{%p} 
省略された親のハッシュ達

@item  @emph{%an} 
作者名

@item  @emph{%aN} 
作者名( .mailmap に関しては、git-shortlog(1) または
git-blame(1) を参照)

@item  @emph{%ae} 
作者電子メールアドレス

@item  @emph{%aE} 
作者電子メールアドレス(.mailmap に関しては git-shortlog(1) または
git-blame(1) を参照)

@item  @emph{%al} 
作者電子メールアドレスアカウント名(local-part)( @emph{@@} の前の部分)

@item  @emph{%aL} 
作者電子メールアドレスアカウント名(local-part)(@emph{%al} 参照) .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%ad} 
作成日(フォーマットに関しては --date= オプション参照)

@item  @emph{%aD} 
作成日 RFC2822形式

@item  @emph{%ar} 
作成日 相対(relative)形式

@item  @emph{%at} 
作成日 UNIXタイムスタンプ形式

@item  @emph{%ai} 
作成日 ISO 8601風形式

@item  @emph{%aI} 
作成日 厳密なISO 8601形式

@item  @emph{%as} 
作成日 短い形式(@samp{YYYY-MM-DD})

@item  @emph{%ah} 
作成日 human形式( git-rev-list(1) の @samp{--date=human}
オプションのようなかんじ)

@item  @emph{%cn} 
コミッター名

@item  @emph{%cN} 
コミッター名( .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%ce} 
コミッター電子メールアドレス

@item  @emph{%cE} 
コミッター電子メールアドレス(.mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%cl} 
コミッター電子メールアドレスアカウント名(local-part)( @emph{@@} の前の部分)

@item  @emph{%cL} 
コミッター電子メールアドレスアカウント名(local-part)( @emph{%cl} 参照) .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%cd} 
コミッター日付(フォーマットに関しては --date= オプション参照)

@item  @emph{%cD} 
コミッター日付 RFC2822形式

@item  @emph{%cr} 
コミッター日付 相対(relative)形式

@item  @emph{%ct} 
コミッター日付 UNIXタイムスタンプ形式

@item  @emph{%ci} 
コミッター日付 ISO 8601風形式

@item  @emph{%cI} 
コミッター日付 厳密なISO 8601形式

@item  @emph{%cs} 
コミッター日付 短い形式(@samp{YYYY-MM-DD})

@item  @emph{%ch} 
コミッター日付 human形式(git-rev-list(1) の @samp{--date=human}
オプションのようなかんじ)

@item  @emph{%d} 
ref名 git-log(1) の --decorate オプションみたいなの

@item  @emph{%D} 
" (", ")" で囲ってないref名

@item  @emph{%(describe[:options])} 
git-describe(1) のような人間が読める名前。
説明できないコミットの場合は空の文字列。 @samp{describe}
文字列の後には、コロンと0個以上のカンマ区切りオプションを続けることができます。タグが同時に追加または削除されると、説明に一貫性がなくなる可能性があります。

@itemize 

@item
@emph{match=<pattern>}:  "refs/tags/" プレフィックスを除いて、指定された @samp{glob(7)}
パターンに一致するタグのみを考慮します。

@item
@emph{exclude=<pattern>}: "refs/tags/" プレフィックスを除いて、指定された @samp{glob(7)}
パターンに一致するタグを考慮しないでください。
@end itemize

@item  @emph{%S} 
コミットに到達したコマンドラインで指定されたref名
( @samp{git log --source} など)は、 @samp{git log} でのみ機能します

@item  @emph{%e} 
エンコーディング

@item  @emph{%s} 
件名(subject)

@item  @emph{%f} 
ファイル名に適した、サニタイズされた件名

@item  @emph{%b} 
本文(body)

@item  @emph{%B} 
生本文(raw body)(ラップされてない件名と本文)

@item  @emph{%GG} 
署名されたコミットの為のGPSからの生の検証メッセージ

@item  @emph{%G?} 
良い(good)な(有効な)署名の場合は "G" 、
悪い(bad)な署名の場合は "B" 、有効性が不明(unknown)な良い署名の場合は "U" 、期限切れ(eXpired)の良い署名の場合は "X"
、期限切れのキーで作成された良い署名の場合は "Y" 、取り消されたキーによって作成された良い署名の場合は "R"
、署名を確認できない場合(キーの欠落など)は "E" 、署名がない場合は "N" を表示します。

@item  @emph{%GS} 
署名されたコミットの署名者の名前を表示する

@item  @emph{%GK} 
署名されたコミットに署名するために使用されるキーを表示する

@item  @emph{%GF} 
署名されたコミットに署名するために使用されるキーのフィンガープリントを表示する

@item  @emph{%GP} 
署名されたコミットに署名するためにサブキーが使用された
主キーのフィンガープリントを表示します

@item  @emph{%GT} 
署名されたコミットに署名するために使用されるキーの信頼レベル(trust level)を表示します

@item  @emph{%gD} 
reflogセレクター(例:@samp{refs/stash@@@{1@}} or @samp{refs/stash@@@{2 minutes ago@}})
この形式は、 @samp{-g} オプションで説明されている規則に従います。 @samp{@@} の前の部分は、コマンドラインで指定されたrefnameです(したがって、
@samp{git log -g refs/heads/master} は @samp{refs/heads/master@@@{0@}} を生成します)。

@item  @emph{%gd} 
短縮されたreflogセレクター。 @samp{%gD} と同じですが、
人間が読みやすいようにrefname部分が短縮されています(したがって、 @samp{refs/heads/master} は単に @samp{master}
になります)。

@item  @emph{%gn} 
reflog ID名

@item  @emph{%gN} 
reflog ID名( .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%ge} 
reflog ID 電子メールアドレス

@item  @emph{%gE} 
reflog ID 電子メールアドレス( .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%gs} 
reflog 件名

@item  @emph{%(trailers[:options])} 
git-interpret-trailers(1) によって解釈されるようにボディのトレーラーを表示します。
@samp{trailers}
文字列の後には、コロンと0個以上のカンマ区切りオプションを続けることができます。いずれかのオプションが複数回提供された場合、それぞれ最後のものが優先されます。

ブール値オプションは、オプションの値 @samp{[=<BOOL>]} を受け入れます。 値 @samp{true} 、@samp{false} 、 @samp{on} 、@samp{off}
などはすべて受け入れられます。 git-config(1) の "EXAMPLES" の "boolean"
サブセクションを参照してください。ブール値オプションが値なしで指定された場合、それは有効を指定した事になります。

@itemize 

@item
@emph{key=<K>}
は指定されたキーを持つトレーラーのみを表示します。マッチングは大文字と小文字を区別せずに行われ、末尾のコロンはオプションです。オプションが複数回指定されている場合、いずれかのキーに一致するトレーラー行が表示されます。このオプションは自動的に
@samp{only} オプションを有効にして、トレーラーブロック内の非トレーラー行が非表示になるようにします。それが望ましくない場合は、
@samp{only=false} で無効にすることができます。 たとえば、 @samp{%(trailers:key=Reviewed-by)} は、キーが
`Reviewed-by`のトレーラー行を表示します。

@item
@emph{only[=<BOOL>]} はトレーラーブロックに非トレーラー行を含めるかどうかを選択します。

@item
@emph{separator=<SEP>}
はトレーラー行の間に挿入される区切り文字を指定します。このオプションが指定されていない場合、各トレーラー行は改行文字で終了します。文字列SEPには、上記のリテラルフォーマットコードが含まれる場合があります。区切り文字としてコンマを使用するには、次のオプションとして解析されないよう
@samp{%x2C} を使用する必要があります。 たとえば、 %(trailers:key=Ticket,separator=%x2C )` は、キーが
"Ticket" であるすべてのトレーラー行をカンマとスペースで区切って表示します。

@item
@emph{unfold[=<BOOL>]} は interpret-trailer の @samp{--unfold}
オプションが指定されたかのように動作させます。たとえば、 @samp{%(trailers:only,unfold=true)}
が展開され、すべてのトレーラー行が表示されます。

@item
@emph{keyonly[=<BOOL>]} トレーラーのキー部分のみを表示。

@item
@emph{valueonly[=<BOOL>]} トレーラーの値部分のみ表示。

@item
@emph{key_value_separator=<SEP>}
トレーラー行の間に挿入される区切り文字を指定します。このオプションが指定されていない場合、各トレーラーのキーと値のペアは ": " で区切られます。
それ以外の場合は、上記の @emph{separator=<SEP>} と同じセマンティクスを共有します。
@end itemize
@end table
@end itemize
@end itemize

@quotation

@strong{Note}

一部のプレースホルダーは、リビジョントラバーサルエンジンに指定された他のオプションに依存する場合があります。 たとえば、 @samp{%g*}
reflogオプションは、reflogエントリをトラバースしない限り(たとえば、 @samp{git log
-g`によって)空の文字列を挿入します。コマンドラインで `--decorate} がまだ指定されていない場合、 @samp{%d} と @samp{%D}
プレースホルダーは「短い」(short)装飾形式を使用します。
@end quotation

プレースホルダーの @emph{%} の後に @samp{+}
(プラス記号)を追加すると、プレースホルダーが空でない文字列に展開される場合に限り、展開の直前に改行が挿入されます。

プレースホルダーの @emph{%} の後に @samp{-}
(マイナス記号)を追加すると、プレースホルダーが空の文字列に展開された場合にのみ、展開の直前の連続するすべての改行が削除されます。

プレースホルダーの @emph{%} の後に ` `
(スペース)を追加すると、プレースホルダーが空でない文字列に展開される場合に限り、展開の直前にスペースが挿入されます。

@itemize 

@item
@emph{tformat:}

@emph{tformat:} 形式は、 "separator" セマンティクスの代わりに "terminator" セマンティクスを提供することを除いて、
@emph{format:} とまったく同じように機能します。
つまり、各コミットには、エントリ間に区切り文字を配置するのではなく、メッセージターミネータ文字(通常は改行)が追加されます。
これは、「1行」形式と同様に、1行形式の最終エントリが新しい行で適切に終了することを意味します。 例えば:

@example
$ git log -2 --pretty=format:%h 4da45bef \
  | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
4da45be
7134973 -- NO NEWLINE

$ git log -2 --pretty=tformat:%h 4da45bef \
  | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
4da45be
7134973
@end example


加えて、 @samp{%} が含まれている認識されない文字列は、その前に @samp{tformat:} があるかのように解釈(interpret)されます。
たとえば、以下の2つは同等です:

@example
$ git log -2 --pretty=tformat:%h 4da45bef
$ git log -2 --pretty=%h 4da45bef
@end example

@end itemize

@noindent

@chapheading EXAMPLES

@itemize 

@item
現在のブランチから到達可能なコミットのリストを出力します。

@example
git rev-list HEAD
@end example


@item
このブランチのコミットのリストを出力しますが、アップストリームブランチのは表示しません。

@example
git rev-list @@@{upstream@}..HEAD
@end example


@item
作者(author)とコミットメッセージを使用してコミットをフォーマットします(磁器コマンドのgit-log(1)も参照)。

@example
git rev-list --format=medium HEAD
@end example


@item
コミットとその差分をフォーマットします(これを単一のプロセスで実行できる磁器コマンドのgit-log(1)も参照してください)。

@example
git rev-list HEAD |
git diff-tree --stdin --format=medium -p
@end example


@item
現在のブランチで、`Documentation`ディレクトリ内のファイルに関連(touch)したコミットのリストを出力します。

@example
git rev-list HEAD -- Documentation/
@end example


@item
任意のブランチ・タグ・@uref{mailto:他のrefから過去1年間に作者you@@example.comが作成したコミットのリストを出力します,他のrefから過去1年間に作者you@@example.comが作成したコミットのリストを出力します}。

@example
git rev-list --author=you@@example.com --since=1.year.ago --all
@end example


@item
現在のブランチから到達可能なオブジェクトのリストを出力します(つまり、すべてのコミットと、それらに含まれるブロブとツリー)。

@example
git rev-list --objects HEAD
@end example


@item
到達可能なすべてのオブジェクトのディスクサイズ、reflogから到達可能なオブジェクト、およびパックされた合計サイズを比較します。これにより、`git
repack
-ad`を実行すると(到達不能なオブジェクトを削除することで)リポジトリのサイズが減少するかどうか、およびreflogの有効期限が切れる(expire)ことによってリポジトリのサイズ減少に役立つかどうかがわかります。

@example
# reachable objects
git rev-list --disk-usage --objects --all
# plus reflogs
git rev-list --disk-usage --objects --all --reflog
# total disk size used
du -c .git/objects/pack/*.pack .git/objects/??/*
# alternative to du: add up "size" and "size-pack" fields
git count-objects -v
@end example


@item
現在のブランチで使用されているオブジェクトを除いて、各ブランチのディスクサイズを報告します。
これにより、リポジトリサイズの肥大化の原因となっているイレギュラー値を見つけることができます(たとえば、誰かが誤って大きなビルドアーティファクトをコミットしたためとか)。

@example
git for-each-ref --format='%(refname)' |
while read branch
do
        size=$(git rev-list --disk-usage --objects HEAD..$branch)
        echo "$size $branch"
done |
sort -n
@end example


@item
(別のグループを除いた)refsの単一のグループのブランチのディスク上のサイズを比較します。1つのリポジトリに複数のリモートからのオブジェクトを混在させる場合、これにより、リポジトリ内で、どのリモートがどれだけ占めているかを示すことができます(`origin`のサイズを基準値として使用)。

@example
git rev-list --disk-usage --objects --remotes=$suspect --not --remotes=origin
@end example

@end itemize

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-rev-parse,,,Top
@chapheading Name

git-rev-parse — パラメータを選択してもみもみします。

@noindent

@chapheading Synopsis

@display
git rev-parse [<options>] <args>…
@end display


@noindent

@chapheading DESCRIPTION

多くのGit磁器コマンドは、内部で使用されベースとなる @samp{git rev-list} コマンド用のフラグとパラメーターの組み合わせと、 @samp{git
rev-list} の下流で使用する他のコマンドのフラグとパラメーターの組み合わせを使用します。このコマンドは、それらを識別するために使用されます。

@noindent

@chapheading OPTIONS

@noindent

@heading Operation Modes

これらの各オプションは、コマンドラインの最初にある必要があります。

@table @asis

@item  @samp{--parseopt} 
オプション解析モードで @samp{git rev-parse} を使用します(以下の PARSEOPT セクションを参照)。

@item  @samp{--sq-quote} 
シェルクォートモードで @emph{git rev-parse} を使用します(以下の SQ-QUOTE セクションを参照)。以下の @samp{--sq}
オプションとは対照的に、このモードはクォートのみを実行します。コマンド入力に対して他に何も行われません。
@end table

@noindent

@heading Options for --parseopt

@table @asis

@item  @samp{--keep-dashdash} 
@samp{--parseopt} モードでのみ意味があります。 オプションパーサーに、最初に出会った @samp{--} をスキップするのではなく、エコー出力(echo
out)するように指示します。

@item  @samp{--stop-at-non-option} 
@samp{--parseopt}
モードでのみ意味があります。オプションパーサーを最初の非オプション引数で停止させます。これは、オプション自体を受け取るサブコマンドを解析するために使用できます。

@item  @samp{--stuck-long} 
@samp{--parseopt} モードでのみ意味があります。可能な場合は長い形式でオプションを出力し、それらの引数を固定(stick)します。
@end table

@noindent

@heading Options for Filtering

@table @asis

@item  @samp{--revs-only} 
@samp{git rev-list} コマンド用ではないフラグやパラメーターを出力しないでください。

@item  @samp{--no-revs} 
@samp{git rev-list} コマンド用のフラグとパラメーターを出力しないでください。

@item  @samp{--flags} 
非フラグパラメータを出力しないでください。

@item  @samp{--no-flags} 
フラグパラメータを出力しないでください。
@end table

@noindent

@heading Options for Output

@table @asis

@item  @samp{--default <arg>} 
ユーザーが指定したパラメーターがない場合は、代わりに @samp{<arg>} を使用してください。

@item  @samp{--prefix <arg>} 
@samp{git rev-parse} が作業ツリーの @samp{<arg>} サブディレクトリから呼び出されたかのように動作します。相対ファイル名は、接頭辞が
@samp{<arg>} であるかのように解決され、その形式で出力されます。

これを使用して、引数をサブディレクトリで実行されるコマンドに変換し、リポジトリの最上位に移動した後も使用できるようにすることができます。 例えば:

@example
prefix=$(git rev-parse --show-prefix)
cd "$(git rev-parse --show-toplevel)"
# rev-parse provides the -- needed for 'set'
eval "set $(git rev-parse --sq --prefix "$prefix" -- "$@@")"
@end example


@item  @samp{--verify} 
正確に1つのパラメーターが提供されていること、およびそれがオブジェクト・データベースへのアクセスに使用できる生の20バイトのSHA-1に変換できることを検証します。もしそうなら、それを標準出力に出力します。それ以外の場合は、エラー出力になります。

出力が実際にオブジェクトデータベース内のオブジェクトに名前を付けていること、および/または必要な特定のタイプのオブジェクトとして使用できることを確認したい場合は、パラメータに
@samp{^@{type@}} 皮むき演算子(peeling operator)を追加できます。 たとえば、 @samp{git rev-parse
"$VAR^@{commit@}"} は、 @samp{$VAR}
がコミットっぽい既存のオブジェクト(つまりコミット、またはコミットを指す注釈付きタグ)に名前を付けることを確認します。 @samp{$VAR}
が任意のタイプの既存のオブジェクトに名前を付けるようにするには、 @samp{git rev-parse "$VAR^@{object@}"} を使用できます。

注意: 信頼できないソースからの名前を検証(verify)する場合は、name引数が別のオプションと間違えられないように、
@samp{--end-of-options} の使用が賢明です。

@item  @samp{-q} 
@itemx  @samp{--quiet} 
@samp{--verify}
モードでのみ意味があります。最初の引数が有効なオブジェクト名でない場合は、エラーメッセージを出力しないでください。代わりに、ゼロ以外のステータスで黙って終了(exit)します。有効なオブジェクト名のSHA-1は、成功するとstdoutに出力されます。

@item  @samp{--sq} 
通常、出力はフラグとパラメータごとに1行になります。このオプションは、シェルによって消費されるための適切に引用された1行の出力を作成します。パラメータに空白と改行が含まれていると予想される場合に便利です(たとえば、
pickaxe @samp{-S} with @emph{git diff-*} )。 @samp{--sq-quote}
オプションとは対照的に、コマンド入力は通常どおり解釈されます。

@item  @samp{--short[=length]} 
@samp{--verify} と同じですが、オブジェクト名を少なくとも @samp{length} 文字の一意のプレフィックスに短縮します。最小の長さは4で、デフォルトは
@samp{core.abbrev} 構成変数の有効な値です(git-config(1)を参照)。

@item  @samp{--not} 
オブジェクト名を表示するときは、それらに @samp{@{caret@}} というプレフィックスを付け、逆に既に、 @samp{@{caret@}}
プレフィックスを持っているオブジェクト名からは @samp{@{caret@}} プレフィックスを削除します。

@item  @samp{--abbrev-ref[=(strict|loose)]} 
オブジェクト名のあいまいでない短い名前。オプション core.warnAmbiguousRefs は、厳密な省略形モードを選択するために使用されます。

@item  @samp{--symbolic} 
通常、オブジェクト名はSHA-1形式で出力されます(可能な場合は @samp{@{caret@}}
プレフィックス付き)。このオプションを使用すると、入力されたオリジナルにできるだけ近い形式で出力されます。

@item  @samp{--symbolic-full-name} 
これは @samp{--symbolic} に似ていますが、ref(つまり、ブランチ名とタグ名。または、残念ながら @samp{master} と名付けられたタグがあるとき
@samp{master} ブランチに名前を付けたい場合はより明確な @samp{heads/master} 形式である)ではない入力を省略し、完全なrefname(例:
"refs/heads/master")として表示します。
@end table

@noindent

@heading Options for Objects

@table @asis

@item  @samp{--all} 
@samp{refs/} で見つかったすべての参照を表示します。

@item  @samp{--branches[=pattern]} 
@itemx  @samp{--tags[=pattern]} 
@itemx  @samp{--remotes[=pattern]} 
すべてのブランチまたはタグまたはリモートトラッキングブランチをそれぞれ表示します(つまり、それぞれ @samp{refs/heads} または
@samp{refs/tags} または @samp{refs/remotes} で見つかったref)。

@samp{pattern} が指定されている場合、指定されたシェルグロブに一致するrefのみが表示されます。パターンにグロビング文字(@samp{?} または @samp{*}
または @samp{[})が含まれていない場合は、 @samp{/*} を追加することでプレフィックス一致に変換されます。

@item  @samp{--glob=pattern} 
シェルグロブパターン @samp{pattern} に一致するすべてのrefを表示します。 パターンが @samp{refs/}
で始まらない場合、自動的に先頭に追加されます。パターンにグロビング文字(@samp{?} または @samp{*} または @samp{[})が含まれていない場合は、 @samp{/*}
を追加することでプレフィックス一致に変換されます。

@item  @samp{--exclude=<glob-pattern>} 
このオプションに続く @samp{--all} または @samp{--branches} または @samp{--tags} または @samp{--remotes} または
@samp{--glob} がそれぞれ考慮する @emph{<glob-pattern>} に一致するrefを含めないでください。このオプションを繰り返すと、次の
@samp{--all} または @samp{--branches} または @samp{--tags} または @samp{--remotes} または @samp{--glob}
オプションまで除外パターンが蓄積されます(他のオプションや引数は蓄積されたパターンをクリアしませんされません)。

与えられたパターンは、それぞれ @samp{--branches} または @samp{--tags} または @samp{--remotes} に適用される場合、それぞれ
@samp{refs/heads} 、 @samp{refs/tags} 、@samp{refs/remotes} で始まるべきではありません。 @samp{--glob} または
@samp{--all} に適用する場合は、 @samp{refs/} で始める必要があります。末尾の @emph{/*}
を意図している場合は、それを明示的に指定する必要があります。

@item  @samp{--disambiguate=<prefix>} 
名前が、指定されたプレフィックスで始まるすべてのオブジェクトを表示します。 <prefix>
は、リポジトリ内のすべてのオブジェクトを誤ってリストしないように、少なくとも4桁の16進数である必要があります。
@end table

@noindent

@heading Options for Files

@table @asis

@item  @samp{--local-env-vars} 
リポジトリローカルな GIT_* 環境変数を一覧表示します(例: GIT_DIRまたはGIT_WORK_TREE、ただしGIT_EDITORは除く)。
変数が設定されている場合でも、変数の名前のみがリストされ、値はリストされません。

@item  @samp{--path-format=(absolute|relative)} 
他の特定のオプションの動作を制御します。absolute(絶対)を指定すると、これらのオプションによって出力されるパスは絶対パスかつ正規化されます。relative(相対)を指定すると、可能であれば、パスは現在の作業ディレクトリからの相対パスになります。デフォルトは対象の、他の特定のオプションそれぞれ固有です。

このオプションは複数回指定でき、コマンドラインの最後か、またはこのオプションの次のインスタンスかの、いずれかに続くコマンドラインの引数にのみ影響します。
@end table

以下のオプションは @samp{--path-format} による変更対象です:

@table @asis

@item  @samp{--git-dir} 
定義されている場合は @samp{$GIT_DIR} を表示します。それ以外の場合は、 @samp{.git}
ディレクトリへのパスを表示します。表示されているパスは、相対の場合、現在の作業ディレクトリからの相対パスです。

@samp{$GIT_DIR}
が定義されておらず、現在のディレクトリがGitリポジトリまたは作業ツリーにあることが検出されない場合は、標準エラー出力にメッセージを出力し、ゼロ以外のステータスで終了(exit)します。

@item  @samp{--git-common-dir} 
定義されている場合は @samp{$GIT_COMMON_DIR} を表示し、そうでない場合は @samp{$GIT_DIR} を表示します。

@item  @samp{--resolve-git-dir <path>} 
<path> が有効なリポジトリまたは有効なリポジトリを指す gitfile であるかどうかを確認し、リポジトリの場所を出力します。 <path> が
gitfile の場合、実際のリポジトリへの解決されたパス(resoluved path)が出力されます。

@item  @samp{--git-path <path>} 
@samp{$GIT_DIR/<path>} を解決し、
$GIT_OBJECT_DIRECTORY、$GIT_INDEX_FILE…などの他のパス再配置変数を考慮に入れます。 たとえば、
$GIT_OBJECT_DIRECTORY が @samp{/foo/bar} に設定されている場合、 @samp{git rev-parse --git-path
objects/abc} は @samp{/foo/bar/abc} を返します。

@item  @samp{--show-toplevel} 
作業ツリーの最上位ディレクトリの(デフォルトでは絶対)パスを表示します。作業ツリーがない場合は、エラーを報告します。

@item  @samp{--show-superproject-working-tree} 
現在のリポジトリをサブモジュールとして使用するスーパープロジェクトの作業ツリー(存在する場合)のルート(root)の絶対パスを表示します。現在のリポジトリがどのプロジェクトでもサブモジュールとして使用されていない場合は、何も出力しません。

@item  @samp{--shared-index-path} 
共有インデックスファイル(shared index file)へのパスを分割インデックスモード(split index
mode)で表示します。分割インデックスモードで無い場合は空です。
@end table

以下のオプションは、 @samp{--path-format} の影響を受けません:

@table @asis

@item  @samp{--absolute-git-dir} 
@samp{--git-dir} に似ていますが、その出力は常に正規化された絶対パスです。

@item  @samp{--is-inside-git-dir} 
現在の作業ディレクトリがリポジトリディレクトリ(訳注: 通常 @samp{.git} ディレクトリ)の下にある場合は @samp{true} 、それ以外の場合は
@samp{false} と出力します。

@item  @samp{--is-inside-work-tree} 
現在の作業ディレクトリがリポジトリの作業ツリー内にある場合は @samp{true} 、それ以外の場合は @samp{false} と出力します。(訳注 @samp{.git}
ディレクトリ内では @samp{false})

@item  @samp{--is-bare-repository} 
ベアリポジトリの場合は @samp{true} 、それ以外の場合は @samp{false} を出力。

@item  @samp{--is-shallow-repository} 
shallowリポジトリの場合は @samp{true} 、そうでない場合は @samp{false} を出力します。

@item  @samp{--show-cdup} 
コマンドがサブディレクトリから呼び出された場合は、現在のディレクトリを基準にした最上位ディレクトリのパスを表示します(通常は @samp{../}
のシーケンスまたは空の文字列)。(訳注:作業ディレクトリ内じゃない時はエラー)

@item  @samp{--show-prefix} 
コマンドがサブディレクトリから呼び出された場合は、最上位ディレクトリを基準にした現在のディレクトリのパスを表示します。(訳注:作業ディレクトリ内じゃない時はエラー)

@item  @samp{--show-object-format[=(storage|input|output)]} 
@samp{.git}
ディレクトリ内でリポジトリのために使われるストレージ(storage)、または入力(input)、または出力(output)に使われるオブジェクト形式(ハッシュアルゴリズム)を表示します。入力(input)の場合、複数のアルゴリズムがスペースで区切られて出力される場合があります。形式を指定しない場合、デフォルトは
@samp{storage} です。
@end table

@noindent

@heading Other Options

@table @asis

@item  @samp{--since=datestring} 
@itemx  @samp{--after=datestring} 
日付文字列をパースし、 @samp{git rev-list} に対応する @samp{-max-age=} パラメーターを出力します。

@item  @samp{--until=datestring} 
@itemx  @samp{--before=datestring} 
日付文字列をパースし、 @samp{git rev-list} に対応する @samp{--min-age=} パラメーターを出力します。

@item  <args>… 
パースされるフラグとパラメーター。
@end table

@noindent

@chapheading SPECIFYING REVISIONS

リビジョンパラメータ @samp{<rev>}
は必ずしもそうとは限りませんが、通常はコミットオブジェクトに名前を付けます。これは、いわゆる「拡張SHA-1」構文を使用します。
オブジェクト名を綴るにはさまざまな方法があります。このリストの終わり近くにリストされているものは、コミットに含まれているツリーとブロブに名前を付けています。

@quotation

@strong{Note}

この文書は、gitで見られる「生の」構文を示しています。シェルおよびその他のUIでは、特殊文字を保護し、単語の分割を回避するために、追加の引用符が必要になる場合があります。
@end quotation

@table @asis

@item  @samp{<sha1>} 例: @samp{dae86e1950b1277e545cee180551750029cfe735}, @samp{dae86e} 
完全なSHA-1オブジェクト名(40バイトの16進文字列)、またはリポジトリ内で一意の先頭のsubstring。例えば
dae86e1950b1277e545cee180551750029cfe735 と dae86e はどちらも、リポジトリ内にオブジェクト名が
dae86e で始まる他のオブジェクトがない場合、全く同じコミットオブジェクトに名前を付けます。

@item  @samp{<describeOutput>} 例: @samp{v1.7.4.2-679-g3bee7fb} 
@samp{git describe}
からの出力。つまり、現在のコミットから最も近いタグ。オプションで、ダッシュ(-)とそのタグ以降現在のコミットが何番目になるかの数が続き、その後にダッシュ(-)、「g」、および省略されたオブジェクト名が続きます。

@item  @samp{<refname>} 例: @samp{master}, @samp{heads/master}, @samp{refs/heads/master} 
シンボリックref名。例えば @samp{master} は通常、 @samp{refs/heads/master} によって参照されるコミットオブジェクトを意味します。
@samp{heads/master} と @samp{tags/master} の両方がある場合は、あなたは @samp{heads/master}
と明示的に指定して、どちらを意味するかをGitに伝えることができます。 あいまいな場合、 @samp{<refname>}
は、以下のルールに従い最初の一致を採用ことで明確になります:

@enumerate 

@item
もし @samp{$GIT_DIR/<refname>} が存在するならば、それはあなたが指定した通りのものです(これは通常、@samp{HEAD} と
@samp{FETCH_HEAD} と @samp{ORIG_HEAD} と @samp{MERGE_HEAD} と @samp{CHERRY_PICK_HEAD} のみで役に立ちます)

@item
でなければ @samp{refs/<refname>} が存在すればそれを採用します。

@item
でなければ @samp{refs/tags/<refname>} が存在すればそれを採用します。

@item
でなければ @samp{refs/heads/<refname>} が存在すればそれを採用します。

@item
でなければ @samp{refs/remotes/<refname>} が存在すればそれを採用します。

@item
でなければ @samp{refs/remotes/<refname>/HEAD} が存在すればそれを採用します。

@samp{HEAD} は、作業ツリーの変更に基づいたコミットに名前を付けます。 @samp{FETCH_HEAD} は、最後の @samp{git fetch}
呼び出しでリモートリポジトリからフェッチしたブランチを記録します。 @samp{ORIG_HEAD} は、 @samp{HEAD}
を大幅に移動するコマンドによって作成され、操作前の @samp{HEAD}
の位置を記録します。これにより、ブランチの先端を実行前の状態に簡単に戻すことができます。 @samp{MERGE_HEAD} は、 @samp{git
merge`を実行するときにブランチにマージするコミットを記録します。 `CHERRY_PICK_HEAD} は、 @samp{git cherry-pick}
を実行したときにチェリーピックしているコミットを記録します。

注意: 上記の @samp{refs/*} の場合、 @samp{$GIT_DIR/refs} ディレクトリまたは @samp{$GIT_DIR/packed-refs}
ファイルのいずれかから発生する可能性があることに注意してください。ref名のエンコードは指定されていませんが、一部の出力処理ではUTF-8でref名を想定する場合があるため、UTF-8が推奨されます。
@end enumerate

@item  @samp{@@} 
@samp{@@} 単独では @samp{HEAD} のショートカットを意味します。

@item  @samp{[<refname>]@@@{<date>@}} 例: @samp{master@@\@{yesterday\@}}, @samp{HEAD@@@{5 minutes ago@}} 
refの後に接尾辞 @samp{@@} が続き、日付指定が中括弧のペアで囲まれています(例: @samp{\@{yesterday\@}} 、 @samp{@{1 month 2 weeks
3 days 1 hour 1 second ago@}} 、@samp{@{1979-02-26 18:30:00@}}
)。これは以前の時点でのrefの値を指定します。この接尾辞は、ref名の直後にのみ使用でき、refには既存のログ(
@samp{$GIT_DIR/logs/<ref>} )が必要です。これは、特定の時点での @strong{ローカル}
refの状態を検索することに注意してください。たとえば、先週ローカルの @samp{master}
ブランチに何があったか、です。特定の時間に行われたコミットを確認する場合は、 @samp{--since} と @samp{--until} を参照してください。

@item  @samp{<refname>@@@{<n>@}} 例: @samp{master@@\@{1\@}} 
refの後に接尾辞 @samp{@@} が続き、数の指定が中括弧のペアで囲まれている場合(たとえば @samp{\@{1\@}},
@samp{\@{15\@}})、そのrefのn個前の値を指定します。たとえば @samp{master@@\@{1\@}} は @samp{master} の直前の値であり、
@samp{master@@\@{5\@}} は @samp{master} の5個前の値です。この接頭辞は、ref名の直後にのみ使用でき、refには既存のログ(
@samp{$GIT_DIR/logs/<refname>} )が必要です。

@item  @samp{@@@{<n>@}} 例: @samp{@@\@{1\@}} 
空のref部分で @samp{@@} コンストラクトを使用して、現在のブランチのreflogエントリを取得できます。たとえば、あなたがブランチ @samp{blabla}
を使用している場合、 @samp{@@\@{1\@}} は @samp{blabla@@\@{1\@}} と同じ意味になります。

@item  @samp{@@@{-<n>@}} 例: @samp{@@@{-1@}} 
構成 @samp{@@@{-<n>@}} は、現在のブランチ/コミットの前にチェックアウトされた<n>番目のブランチ/コミットを意味します。

@item  @emph{[<branchname>]@@@{upstream@}} 例: @emph{master@@@{upstream@}}, @emph{@@@{u@}} 
ブランチ名の接尾辞 @emph{@@@{upstream@}} (短縮形
@emph{<branchname>@@@{u@}})は、branchnameで指定されたブランチの上部に構築するように設定されているブランチを指します(@samp{branch.<name>.remote}
と @samp{branch.<name>.merge}
によって設定されます)。ブランチ名が欠落してい場合は、デフォルトで現在のブランチ名になります。これらの接尾辞は、大文字で綴る場合にも受け入れられ、大文字と小文字を問わず同じ意味になります。

@item  @emph{[<branchname>]@@@{push@}} 例: @emph{master@@@{push@}}, @emph{@@@{push@}} 
接尾辞 @emph{@@@{push@}} は、 @samp{branchname} がチェックアウトされているときに @samp{git push}
が実行された場合(またはブランチ名が指定されていない場合は現在の @samp{HEAD}
)、「プッシュ先」のブランチを報告します。もちろん、プッシュ先はリモートリポジトリにあるため、そのブランチに対応するローカルトラッキングブランチ(つまり、
@samp{refs/remotes/} 内の何か)を報告します。

ここで、よりはっきり分かる例を以下に示します:

@example
$ git config push.default current
$ git config remote.pushdefault myfork
$ git switch -c mybranch origin/master

$ git rev-parse --symbolic-full-name @@@{upstream@}
refs/remotes/origin/master

$ git rev-parse --symbolic-full-name @@@{push@}
refs/remotes/myfork/mybranch
@end example


注意: この例では、ある場所からプルして別の場所にプッシュする三角形のワークフローを設定していることに注意してください。非三角形のワークフローでは、
@emph{@@@{push@}} は @emph{@@@{upstream@}} と同じであり、このようなことをする必要はありません。

この接尾辞は大文字で綴る場合にも受け入れられ、大文字と小文字を問わず同じことを意味します。

@item  @emph{<rev>^[<n>]} 例: @emph{HEAD^, v1.5.1^0} 
リビジョンパラメータの接尾辞 @emph{^} は、そのコミットオブジェクトの最初の親を意味します。 @emph{^<n>} は <n>
番目の親を意味します(つまり、 @emph{<rev>^} は @emph{<rev>^1} と同じです)。特別ルールとして、
@emph{<rev>^0} はコミット自体を意味し、 @emph{<rev>}
がコミットオブジェクトを参照するタグオブジェクトのオブジェクト名である場合に使用されます。

@item  @emph{<rev>~[<n>]} 例: @emph{HEAD~, master~3} 
リビジョンパラメータの接尾辞 @emph{~} は、そのコミットオブジェクトの最初の親を意味します。リビジョンパラメータの接尾辞
@emph{~<n>} は、最初の親のみに続く、指定されたコミットオブジェクトの <n> 世代の祖先であるコミットオブジェクトを意味します。つまり、
@emph{<rev>~3} は @emph{<rev>^^^} と同じで、するってぇと
@emph{<rev>^1^1^1} と同じということです。この形式については以下の図を参照してください。

@item  @emph{<rev>^@{<type>@}} 例: @emph{v0.99.8^@{commit@}} 
接尾辞 @emph{^} の後に中括弧のペアで囲まれたオブジェクトタイプ名が続くということは、タイプ @emph{<type>}
のオブジェクトが見つかるか、オブジェクトを逆参照できなくなるまで、 @emph{<rev>}
でオブジェクトを再帰的に逆参照する(この場合は、いろいろ一旦飲み込んでしまったのを吐きもどすような感じだぬ)ことを意味します。 たとえば、
@emph{<rev>} がコミットっぽい場合、 @emph{<rev>^@{commit@}} は対応するコミットオブジェクトを記述します。同様に、
@emph{<rev>} がツリーっぽい場合、 @emph{<rev>^@{tree@}} は対応するツリーオブジェクトを記述します。
@emph{<rev>^0} は @emph{<rev>^@{commit@}} の省略形です。

@emph{<rev>^@{object@}} を使用すると、 @emph{<rev>} がタグである必要がなく、 @emph{<rev>} を逆参照することなく、
@emph{<rev>}
が存在するオブジェクトに名前を付けることができます。なお、タグはすでにオブジェクトであるため、オブジェクトに到達するために一度も逆参照する必要はありません。

@emph{<rev>^@{tag@}} を使用して、 @emph{<rev>} が既存のタグオブジェクトを確実に識別することができます。

@item  @emph{<rev>^@{@}} 例: @emph{v0.99.8^@{@}} 
接尾辞 @emph{^}
の後に空のブレースペアが続くということは、オブジェクトがタグである可能性があることを意味し、タグ以外のオブジェクトが見つかるまでタグを再帰的に逆参照します。

@item  @emph{<rev>^@{/<text>@}} 例: @emph{HEAD^@{/fix nasty bug@}} 
リビジョンパラメータの接尾辞 @emph{^} と、それに続くスラッシュで始まるテキストを含む中括弧のペアは、以下の @emph{:/fix nasty
bug} 構文と同じですが、 @emph{^} の前の @emph{<rev>} から到達可能な一致する最も若いコミットを返す点が異なります。

@item  @emph{:/<text>} 例: @emph{:/fix nasty bug} 
コロンに続いてスラッシュそしてそれに続くテキストは、コミットメッセージが指定された正規表現と一致するコミットを示します。この名前は、HEADを含む任意のrefから到達可能な最も若い一致するコミットを返します。正規表現は、コミットメッセージの任意の部分に一致できます。文字列で始まるメッセージを照合するには、たとえば、
@emph{:/^foo} とします。特別なシーケンス @emph{:/!} はマッチングの修飾子用に予約されています。ます。 @emph{:/!-foo} は一致の否定を実行し、
@emph{:/!!foo} はリテラル @emph{!} 後に @emph{foo} が続く文字列とマッチします。 @emph{:/!}
で始まるその他のシーケンスは今のところ予約されています。指定されたテキストによっては、シェルにより追加の引用符が必要になる場合があります。

@item  @emph{<rev>:<path>} 例: @emph{HEAD:README}, @emph{master:./README} 
接尾辞 @emph{:}
の後にパス(path)を続けると、コロンの前の部分によって名前が付けられたツリー風のオブジェクト内の、指定されたパスにあるブロブまたはツリーに名前が付けられます。
@emph{./} または @emph{../}
で始まるパスは、現在の作業ディレクトリからの相対パスです。指定のパスは、作業ツリーのルートディレクトリからの相対パスに変換されます。これは、作業ツリーと同じツリー構造を持つコミットまたはツリーからブロブまたはツリーをアドレス指定するのに最も役立ちます。

@item  @emph{:[<n>:]<path>} 例: @emph{:0:README}, @emph{:README} 
コロンに、オプションでステージ番号(0〜3)とコロンが続き、それにパスが続くと、指定されたパスのインデックス内のブロブオブジェクトに名前を付けます。ステージ番号省略(およびそれに続くコロン)は、ステージ0エントリーを示します。マージ作業中、ステージ1は共通の祖先、ステージ2はターゲットブランチのバージョン(通常は現在のブランチ)、ステージ3はマージされるブランチのバージョンです。
@end table

以下はJon Loeligerによる図解です。コミットノードBとCはどちらもコミットノードAの親です。親コミットは左から右に順序付けられます。

@example
G   H   I   J
 \ /     \ /
  D   E   F
   \  |  / \
    \ | /   |
     \|/    |
      B     C
       \   /
        \ /
         A
@end example

@example
A =      = A^0
B = A^   = A^1     = A~1
C =      = A^2
D = A^^  = A^1^1   = A~2
E = B^2  = A^^2
F = B^3  = A^^3
G = A^^^ = A^1^1^1 = A~3
H = D^2  = B^^2    = A^^^2  = A~2^2
I = F^   = B^3^    = A^^3^
J = F^2  = B^3^2   = A^^3^2
@end example

@noindent

@chapheading SPECIFYING RANGES

@samp{git log} などの履歴トラバースコマンドは、単一のコミットだけでなく、一連のコミットで動作します。

これらのコマンドの場合、前のセクションで説明した表記法を使用して単一のリビジョンを指定することは、指定のコミットから「到達可能」なコミットの組を意味します。

複数のリビジョンを指定するということは、指定のコミットのいずれかから到達可能なコミットの組を意味します。

コミットの到達可能な組は、コミット自体とその祖先チェーン内のコミットです。

以下に示すように、接続されたコミット(connected commits)の組(「リビジョン範囲」(revision
range)と呼ばれる)を指定するためのいくつかの表記法があります。

@noindent

@heading Commit Exclusions

@table @asis

@item  @emph{^<rev>} (カレット)記法 
とある到達可能なコミットをコミット達から除外するには、接頭辞 @emph{^} 表記を使用します。 例えば @emph{^r1 r2} は @emph{r2}
から到達可能なコミットだけども、 @emph{r1} から到達可能なコミット(つまり @emph{r1} とその祖先)は除外する事を意味します。
@end table

@noindent

@heading Dotted Range Notations

@table @asis

@item  @emph{..} (2ドット)範囲記法 
@emph{^r1 r2} 操作は頻繁に表示されるため、省略形があります。(上記の SPECIFYING REVISIONS
で説明されている構文に従って名前が付けられている)2つのコミット @emph{r1} と @emph{r2} がある場合、あなたは @emph{^r1 r2}
によってr1から到達可能なコミットを取り除き、r2から到達可能なコミットを要求できます。そしてこれは @emph{r1..r2} と書くことができます。

@item  @emph{...} (3ドット)対称差記法 
似た表記 @emph{r1...r2} は @emph{r1} と @emph{r2} の対称差と呼ばれ、 @emph{r1 r2 --not $(git merge-base --all
r1 r2)} として定義されます。 これは、 @emph{r1} (左側)または @emph{r2}
(右側)のいずれかから到達可能であるが、両方からは到達できないコミットの組です。
@end table

これらの2つの省略表記では、一方の端を省略して、デフォルトでHEADにすることができます。たとえば、 @emph{origin..} は
@emph{origin..HEAD} の省略形であり、「originブランチから分岐(fork)してから何をしましたか？」と尋ねます。 同様に、
@emph{..origin} は @emph{HEAD..origin} の省略形であり、「私がそれらから分岐してから、originは何をしましたか？」と尋ねます。
@emph{..} は @emph{HEAD..HEAD} を意味することに注意してください。これは、HEADから到達可能および到達不能の両方の空の範囲です。

2つの異なる範囲を取るように特別に設計されたコマンド(たとえば、2つの範囲を比較するための "git range-diff R1 R2" )
は存在しますが、それらは例外です。特に明記されていない限り、一連のコミットを操作するすべての "git"
コマンドは、単一のリビジョン範囲で機能します。言い換えると、2つの「2ドット範囲表記」を隣り合わせに記述します。

@example
$ git log A..B C..D
@end example

ほとんどのコマンドでは2つのリビジョン範囲を指定しません。代わりに、接続された単一のコミットの組、つまりBまたはDのいずれかから到達可能であるが、AまたはCのどちらからも到達可能でないコミットの組に名前を付けます。線形履歴では、以下のようになります:

@example
---A---B---o---o---C---D
@end example

AとBはCから到達可能であるため、これら2つの2ドット範囲記法で指定されたリビジョン範囲は単一のコミットDです。

@noindent

@heading Other <rev>^ Parent Shorthand Notations

コミットとその親コミットによって形成される組に名前を付けるために、マージコミットに特に役立つ他の3つの省略形が存在します。

@samp{r1@{caret@}@@} 表記は、 @samp{r1} のすべての親を意味します。

@samp{r1@{caret@}!} 表記には コミット @samp{r1} が含まれますが、そのすべての親は除外されます。この表記自体は、単一のコミット @samp{r1}
を示します。

@samp{<rev>@{caret@}-[<n>]} 表記には @samp{<rev>} が含まれますが、 <n> 番目の親(つまり、
@samp{<rev>@{caret@}<n>..<rev>} の省略形)は除外されます。 <n> が指定されていない場合は @samp{<n>} = 1
とみなします。これは通常、 @samp{<commit>@{caret@}-} を渡すだけで、マージコミット @samp{<commit>}(@samp{<commit>}
自体を含む)でマージされたブランチ内のすべてのコミットを取得できるマージコミットに役立ちます。

@samp{<rev>@{caret@}<n>} は単一のコミット親を指定することに関するものでしたが、これらの3つの表記はその親も考慮します。たとえば、
@samp{HEAD@{caret@}2@{caret@}@@} と言うことはできますが、 @samp{HEAD@{caret@}@@@{caret@}2} と言うことはできません。

@noindent

@chapheading Revision Range Summary

@table @asis

@item  @samp{<rev>} 
<rev> から到達可能なコミット(つまり <rev> とその祖先)を含めます。

@item  @samp{@{caret@}<rev>} 
<rev> から到達可能なコミット(つまり <rev> とその祖先)を除外します。

@item  @samp{<rev1>..<rev2>} 
<rev2> から到達可能なコミットを含めますが、 <rev1> から到達可能なコミットは除外します。 <rev1> または <rev2>
のいずれかを省略すると、それらはそれぞれデフォルトで @samp{HEAD} になります。

@item  @samp{<rev1>\...<rev2>} 
<rev1> または <rev2> のいずれかから到達可能なコミットを含めますが、両方から到達可能なコミットは除外します。 <rev1> または
<rev2> のいずれかを省略すると、それらはそれぞれデフォルトで @samp{HEAD} になります。

@item  @samp{<rev>@{caret@}@@} 例: @samp{HEAD@{caret@}@@} 
接尾辞 @samp{@{caret@}} の後にアットマーク(@samp{@@})を付けることは、 @samp{<rev>}
のすべての親をリストすることと同じです(つまり、親から到達可能なものはすべて含まれますが、コミット自体は含まれません)。

@item  @samp{<rev>@{caret@}!} 例: @samp{HEAD@{caret@}!} 
接尾辞 @samp{@{caret@}} の後に感嘆符(@samp{!})を付けることは、コミット @samp{<rev>} を指定し、そのすべての親の前に @samp{@{caret@}}
を付けてそれら(およびその祖先)を除外することと同じです。

@item  @samp{<rev>@{caret@}-<n>} 例: @samp{HEAD@{caret@}-, HEAD@{caret@}-2} 
@samp{<rev>@{caret@}<n>..<rev>} と同等であり、 @samp{<n>} が指定されていない場合は @samp{<n>} = 1 です。
@end table

上記のLoeliger図解を使用したいくつかの例を以下に示します。表記の拡張と選択は、それぞれ段階が分かるようステップを踏んで説明してあります:

@example
   Args   Expanded arguments    Selected commits
   D                            G H D
   D F                          G H I J D F
   ^G D                         H D
   ^D B                         E I J F B
   ^D B C                       E I J F B C
   C                            I J F C
   B..C   = ^B C                C
   B...C  = B ^F C              G H D E B C
   B^-    = B^..B
          = ^B^1 B              E I J F B
   C^@@    = C^1
          = F                   I J F
   B^@@    = B^1 B^2 B^3
          = D E F               D G H E F I J
   C^!    = C ^C^@@
          = C ^C^1
          = C ^F                C
   B^!    = B ^B^@@
          = B ^B^1 ^B^2 ^B^3
          = B ^D ^E ^F          B
   F^! D  = F ^I ^J D           G H D F
@end example

@noindent

@chapheading PARSEOPT

@samp{--parseopt} モードでは、 @samp{git rev-parse}
は、オプションをもみもみして、Cビルトインと同じ機能をシェルスクリプトにもたらすのに役立ちます。これは、 @samp{getopt(1)}
と少し似た、オプションの正規化機能です(たとえば、単一のスイッチの集合を分割します)。

パースおよび理解できるオプションの仕様を標準入力で受け取り、引数を正規化されたものに置き換えるために、@samp{sh(1)} @samp{eval}
に適した文字列をエコーします。エラーが発生した場合は、標準エラーストリームで使用状況を出力し、コード129で終了します。

注: 結果を @samp{eval} に渡すときは、必ず引用符で囲んでください。例については、以下を参照してください。

@noindent

@heading Input Format

@samp{git rev-parse --parseopt} 入力形式は完全にテキストベースです。 @samp{--}
のみを含む行で区切られた2つの部分から構成されます。セパレーターの前の行(1つ以上である必要があります)が使用例に使用されます。区切り文字の後の行は、オプションを示しています。

オプションの各行の形式はいかのとおりです:

@example
<opt-spec><flags>*<arg-hint>? SP+ help LF
@end example


@table @asis

@item  @samp{<opt-spec>} 
この形式は、短いオプション1文字で、続いてコンマ(@emph{,})で区切り、そして長いオプション名があります。少なくとも短長のうち1つは必要ですが、両方揃ってなくてもいいです。
@samp{<flags>} 文字を含めることはできません。 @samp{h,help} や @samp{dry-run} や @samp{f} は正しい @samp{<opt-spec>} の例です。

@item  @samp{<flags>} 
@samp{<flags>} とは  @samp{*} または @samp{=} または @samp{?} または @samp{!} です。

@itemize 

@item
オプションが引数を取る場合は、 @samp{=} を使用します。

@item
@samp{?} の使用は、オプションがオプションの引数を取ることを意味します。オプションの引数を明確に解析できるようにするには、おそらく
@samp{--stuck-long} モードを使用する必要があります。

@item
@samp{*} を使用すると、このオプションが @samp{-h} 引数に対して生成された使用法にリストされてはならないことを意味します。
gitcli(7) に記載されているように、 @samp{--help-all} には表示されます。

@item
@samp{！} を使用すると、対応する否定されたlongオプションを使用可能にしません。
@end itemize

@item  @samp{<arg-hint>} 
@samp{<arg-hint>} は、指定された場合、引数を取るオプションのヘルプ出力で引数の名前として使用されます。 @samp{<arg-hint>}
は最初の空白で終了します。複数単語の引数ヒントで単語を区切りたい時は、ダッシュを使う通例です。
@end table

スペースを取り除いた後の行の残りの部分は、オプションに関連付けられたヘルプとして使用されます。

空白行は無視され、この仕様に一致しない行はオプショングループヘッダーとして使用されます(意図的にそのような行を作成するためにはスペースで行を開始します)。

@noindent

@heading Example

@example
OPTS_SPEC="\
some-command [<options>] <args>...

some-command does foo and bar!
--
h,help    show the help

foo       some nifty option --foo
bar=      some cool option --bar with an argument
baz=arg   another cool option --baz with a named argument
qux?path  qux may take a path argument but has meaning by itself

  An option group Header
C?        option C with an optional argument"

eval "$(echo "$OPTS_SPEC" | git rev-parse --parseopt -- "$@@" || echo exit $?)"
@end example


@noindent

@heading Usage text

上記の例で @samp{"$@@"} が @samp{-h} または @samp{--help} の場合、以下の使用法テキストが表示されます:

@example
usage: some-command [<options>] <args>...

    some-command does foo and bar!

    -h, --help            show the help
    --foo                 some nifty option --foo
    --bar ...             some cool option --bar with an argument
    --baz <arg>           another cool option --baz with a named argument
    --qux[=<path>]        qux may take a path argument but has meaning by itself

An option group Header
    -C[...]               option C with an optional argument
@end example


@noindent

@chapheading SQ-QUOTE

@samp{--sq-quote} モードでは、 @samp{git rev-parse} は、 @samp{sh(1)} @samp{eval}
に適した1行を標準出力にエコーします。この行は、 @samp{--sq-quote}
に続く引数を正規化することによって作成されます。引数をクォートする以外に何も行いません。

出力がシェル引用符で囲まれる前に、コマンド入力を @samp{git rev-parse} によって通常どおりに解釈するには @samp{--sq}
オプションを参照してください。

@noindent

@heading Example

@example
$ cat >your-git-script.sh <<\EOF
#!/bin/sh
args=$(git rev-parse --sq-quote "$@@")   # quote user-supplied arguments
command="git frotz -n24 $args"          # and use it inside a handcrafted
                                        # command line
eval "$command"
EOF

$ sh your-git-script.sh "a b'c"
@end example


@noindent

@chapheading EXAMPLES

@itemize 

@item
現在のコミットのオブジェクト名を出力します:

@example
$ git rev-parse --verify HEAD
@end example


@item
$REV シェル変数のリビジョンからコミットオブジェクト名を出力します:

@example
$ git rev-parse --verify --end-of-options $REV^@{commit@}
@end example


$REV が空であるか、有効なリビジョンでない場合エラーになります。

@item
上記と同様ですが…:

@example
$ git rev-parse --default master --verify --end-of-options $REV
@end example


これは、 $REV が空の場合、masterからのコミットオブジェクト名が出力されます。
@end itemize

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-revert,,,Top
@chapheading Name

git-revert — いくつかの既存のコミットを元に戻します

@noindent

@chapheading Synopsis

@display
git revert [--[no-]edit] [-n] [-m parent-number] [-s] [-S[<keyid>]] <commit>…
git revert (--continue | --skip | --abort | --quit)
@end display


@noindent

@chapheading DESCRIPTION

1つ以上の既存のコミットが与えられた場合、関連するパッチによって導入された変更を元に戻し、それらを記録するいくつかの新しいコミットを記録します。これには、作業ツリーがクリーンである必要があります(HEADコミットからの変更はありません)。

注意: @samp{git revert}
は、いくつかの新しいコミットを記録して、以前のコミットの効果を元に戻すために使用されます(多くの場合、障害のあるコミットのみ)。あなたが作業ディレクトリ内のコミットされていないすべての変更を破棄したい場合は、
git-reset(1) 、特に @samp{--hard}
オプションについて参照すべきです。あなたが別のコミットから特定のファイルを抽出したい場合は、 git-restore(1) 、特に
@samp{--source}
オプションについて参照すべきです。これらは作業ディレクトリ内のコミットされていない変更を破棄するため、これらの選択肢には注意してください。

3つのコマンドの違いについては、 git(1) の「Reset, restore and revert」を参照してください。

@noindent

@chapheading OPTIONS

@table @asis

@item  <commit>… 
元に戻すためのコミットを指定。コミット名を綴る方法のより完全なリストについては、 gitrevisions(7)
を参照してください。コミットのセットを指定することもできますが、デフォルトではトラバーサルは実行されません。
git-rev-list(1) と、その @samp{--no-walk} オプションを参照してください。

@item  @samp{-e} 
@itemx  @samp{--edit} 
このオプションを使用すると、 @samp{git revert} は「戻し」(the
revert)をコミットする前にあなたにコミットメッセージを編集させます。これは、端末からコマンドを実行する場合のデフォルトです。

@item  @samp{-m parent-number} 
@itemx  @samp{--mainline parent-number} 
通常、マージのどの筋を本線(mainline)と見なすかわからないため、マージを元に戻すことはできません。
このオプションは、本線とする親番号(1から始まる)を指定し、指定された親を基準にして変更を元に戻すことができます。

マージコミットを戻す(revert)と、そのマージによってもたらされたツリーの変更が不要になることが宣言されます。その結果、その後に行われるマージでは、先に戻されたマージの先祖ではないコミットによってもたらされたツリーの変更のみが適用されます。これはあなたの望むところかもしれませんし、そうでないかもしれません。

詳細については、 @uref{howto/revert-a-faulty-merge.html,revert-a-faulty-merge How-To}
(誤ったマージの取り消し方法)を参照してください。

@item  @samp{--no-edit} 
このオプションを使うと、 @emph{git revert} はコミットメッセージエディタを起動しません。

@item  @samp{--cleanup=<mode>} 
このオプションは、コミットメッセージがコミット機構に渡される前にどのようにクリーンアップされるかを決定します。詳細については、git-commit(1)
を参照してください。 特に、競合が発生した場合、 <mode> に値 @samp{scissors} が指定されていると、渡される前に、MERGE_MSG
に切り取り線が追加されます。

@item  @samp{-n} 
@itemx  @samp{--no-commit} 
通常、コマンドは、どのコミットが元に戻されたかを示すコミットログメッセージを含むいくつかのコミットを自動的に作成します。このフラグは、名前付きコミットを作業ツリーとインデックスに戻すために必要な変更を適用(apply)しますが、コミットは行いません。さらに、このオプションを使用する場合、インデックスはHEADコミットと一致する必要はありません。
revertは、あなたのインデックスの開始状態に対して行われます。

これは、複数のコミットの効果を連続してインデックスにrevertする場合に役立ちます。

@item  @samp{-S[<keyid>]} 
@itemx  @samp{--gpg-sign[=<keyid>]} 
@itemx  @samp{--no-gpg-sign} 
GPG署名コミット。 @samp{keyid}
引数はオプションであり、デフォルトはコミッターIDになります。指定する場合は、スペースなしでオプションに指定する必要があります。
@samp{--no-gpg-sign} は、 @samp{commit.gpgSign} 構成変数と、 それより前で指定された @samp{--gpg-sign}
の両方を打ち消すのに役立ちます。

@item  @samp{-s} 
@itemx  @samp{--signoff} 
コミットメッセージの最後に @samp{Signed-off-by} トレーラーを追加します。 詳細については、 git-commit(1) の
signoff オプションを参照してください。

@item  @samp{--strategy=<strategy>} 
指定されたマージ戦略を使用します。指定できるのは一度だけです。詳細については、 git-merge(1) の「MERGE
STRATEGIES」セクションを参照してください。

@item  @samp{-X<option>} 
@itemx  @samp{--strategy-option=<option>} 
マージ戦略固有のオプションをマージ戦略に渡します。詳細については、 git-merge(1) を参照してください。

@item  @samp{--rerere-autoupdate} 
@itemx  @samp{--no-rerere-autoupdate} 
可能であれば、rerereメカニズムの自動競合解決の結果でインデックスを更新できるようにします。
@end table

@noindent

@chapheading SEQUENCER SUBCOMMANDS

@table @asis

@item  @samp{--continue} 
@samp{.git/sequencer}
の情報を使用して、進行中の操作の続行を行います。失敗したcherry-pickまたはrevertの競合を解決した後、続行するために使用できます。

@item  @samp{--skip} 
現在のコミットをスキップして、残りのシーケンスを続行します。

@item  @samp{--quit} 
進行中の今回の操作を忘れてください。チェリーピックまたはrevertに失敗した後、シーケンサーの状態をクリアするために使用できます。

@item  @samp{--abort} 
操作をキャンセルして、シーケンス操作前の状態に戻ります。
@end table

@noindent

@chapheading EXAMPLES

@table @asis

@item  @samp{git revert HEAD~3} 
HEADの最後から4番目のコミットで指定された変更を元に戻し、元に戻した変更を使用して新しいコミットを作成します。

@item  @samp{git revert -n master~5..master~2} 
コミットによって行われた変更を、masterの最後から5番目のコミット(それ自身を含む)から、masterの最後から3番目のコミット(それ自身を含む)に戻しますが、元に戻した変更でコミットを作成しないでください。元に戻すと、作業ツリーとインデックスのみが変更されます。
@end table

@noindent

@chapheading SEE ALSO

git-cherry-pick(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-rm,,,Top
@chapheading Name

git-rm — Remove files from the working tree and from the index

@noindent

@chapheading Synopsis

@display
git rm [-f | --force] [-n] [-r] [--cached] [--ignore-unmatch]
          [--quiet] [--pathspec-from-file=<file> [--pathspec-file-nul]]
          [--] [<pathspec>…]
@end display


@noindent

@chapheading DESCRIPTION

Remove files matching pathspec from the index, or from the working tree and
the index. @samp{git rm} will not remove a file from just your working
directory. (There is no option to remove a file only from the working tree
and yet keep it in the index; use @samp{/bin/rm} if you want to do that.) The
files being removed have to be identical to the tip of the branch, and no
updates to their contents can be staged in the index, though that default
behavior can be overridden with the @samp{-f} option.  When @samp{--cached} is given,
the staged content has to match either the tip of the branch or the file on
disk, allowing the file to be removed from just the index. When
sparse-checkouts are in use (see git-sparse-checkout(1)), @samp{git rm}
will only remove paths within the sparse-checkout patterns.

@noindent

@chapheading OPTIONS

@table @asis

@item  <pathspec>… 
Files to remove.  A leading directory name (e.g. @samp{dir} to remove @samp{dir/file1}
and @samp{dir/file2}) can be given to remove all files in the directory, and
recursively all sub-directories, but this requires the @samp{-r} option to be
explicitly given.

The command removes only the paths that are known to Git.

File globbing matches across directory boundaries.  Thus, given two
directories @samp{d} and @samp{d2}, there is a difference between using @samp{git rm 'd*'}
and @samp{git rm 'd/*'}, as the former will also remove all of directory @samp{d2}.

For more details, see the @emph{pathspec} entry in gitglossary(7).

@item  @samp{-f} 
@itemx  @samp{--force} 
Override the up-to-date check.

@item  @samp{-n} 
@itemx  @samp{--dry-run} 
Don’t actually remove any file(s).  Instead, just show if they exist in the
index and would otherwise be removed by the command.

@item  @samp{-r} 
Allow recursive removal when a leading directory name is given.

@item  -- 
This option can be used to separate command-line options from the list of
files, (useful when filenames might be mistaken for command-line options).

@item  @samp{--cached} 
Use this option to unstage and remove paths only from the index.  Working
tree files, whether modified or not, will be left alone.

@item  @samp{--ignore-unmatch} 
Exit with a zero status even if no files matched.

@item  @samp{-q} 
@itemx  @samp{--quiet} 
@samp{git rm} normally outputs one line (in the form of an @samp{rm} command)  for
each file removed. This option suppresses that output.

@item  @samp{--pathspec-from-file=<file>} 
Pathspec is passed in @samp{<file>} instead of commandline args. If @samp{<file>} is
exactly @samp{-} then standard input is used. Pathspec elements are separated by
LF or CR/LF. Pathspec elements can be quoted as explained for the
configuration variable @samp{core.quotePath} (see git-config(1)). See
also @samp{--pathspec-file-nul} and global @samp{--literal-pathspecs}.

@item  @samp{--pathspec-file-nul} 
Only meaningful with @samp{--pathspec-from-file}. Pathspec elements are separated
with NUL character and all other characters are taken literally (including
newlines and quotes).
@end table

@noindent

@chapheading REMOVING FILES THAT HAVE DISAPPEARED FROM THE FILESYSTEM

There is no option for @samp{git rm} to remove from the index only the paths that
have disappeared from the filesystem. However, depending on the use case,
there are several ways that can be done.

@noindent

@heading Using “git commit -a”

If you intend that your next commit should record all modifications of
tracked files in the working tree and record all removals of files that have
been removed from the working tree with @samp{rm} (as opposed to @samp{git rm}), use
@samp{git commit -a}, as it will automatically notice and record all removals.
You can also have a similar effect without committing by using @samp{git add -u}.

@noindent

@heading Using “git add -A”

When accepting a new code drop for a vendor branch, you probably want to
record both the removal of paths and additions of new paths as well as
modifications of existing paths.

Typically you would first remove all tracked files from the working tree
using this command:

@example
git ls-files -z | xargs -0 rm -f
@end example


and then untar the new code in the working tree. Alternately you could
@emph{rsync} the changes into the working tree.

After that, the easiest way to record all removals, additions, and
modifications in the working tree is:

@example
git add -A
@end example


See git-add(1).

@noindent

@heading Other ways

If all you really want to do is to remove from the index the files that are
no longer present in the working tree (perhaps because your working tree is
dirty so that you cannot use @samp{git commit -a}), use the following command:

@example
git diff --name-only --diff-filter=D -z | xargs -0 git rm --cached
@end example


@noindent

@chapheading SUBMODULES

Only submodules using a gitfile (which means they were cloned with a Git
version 1.7.8 or newer) will be removed from the work tree, as their
repository lives inside the .git directory of the superproject. If a
submodule (or one of those nested inside it)  still uses a .git directory,
@samp{git rm} will move the submodules git directory into the superprojects git
directory to protect the submodule’s history. If it exists the
submodule.<name> section in the gitmodules(5) file will also be
removed and that file will be staged (unless --cached or -n are used).

A submodule is considered up to date when the HEAD is the same as recorded
in the index, no tracked files are modified and no untracked files that
aren’t ignored are present in the submodules work tree.  Ignored files are
deemed expendable and won’t stop a submodule’s work tree from being removed.

If you only want to remove the local checkout of a submodule from your work
tree without committing the removal, use git-submodule(1) @samp{deinit}
instead. Also see gitsubmodules(7) for details on submodule removal.

@noindent

@chapheading EXAMPLES

@table @asis

@item  @samp{git rm Documentation/\*.txt} 
Removes all @samp{*.txt} files from the index that are under the @samp{Documentation}
directory and any of its subdirectories.

Note that the asterisk @samp{*} is quoted from the shell in this example; this
lets Git, and not the shell, expand the pathnames of files and
subdirectories under the @samp{Documentation/} directory.

@item  @samp{git rm -f git-*.sh} 
Because this example lets the shell expand the asterisk (i.e. you are
listing the files explicitly), it does not remove @samp{subdir/git-foo.sh}.
@end table

@noindent

@chapheading BUGS

Each time a superproject update removes a populated submodule (e.g. when
switching between commits before and after the removal) a stale submodule
checkout will remain in the old location. Removing the old directory is only
safe when it uses a gitfile, as otherwise the history of the submodule will
be deleted too. This step will be obsolete when recursive submodule update
has been implemented.

@noindent

@chapheading SEE ALSO

git-add(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-send-email,,,Top
@chapheading Name

git-send-email — Send a collection of patches as emails

@noindent

@chapheading Synopsis

@display
git send-email [<options>] <file|directory|rev-list options>…
git send-email --dump-aliases
@end display


@noindent

@chapheading DESCRIPTION

Takes the patches given on the command line and emails them out.  Patches
can be specified as files, directories (which will send all files in the
directory), or directly as a revision list.  In the last case, any format
accepted by git-format-patch(1) can be passed to git send-email.

The header of the email is configurable via command-line options.  If not
specified on the command line, the user will be prompted with a ReadLine
enabled interface to provide the necessary information.

There are two formats accepted for patch files:

@enumerate 

@item
mbox format files

This is what git-format-patch(1) generates.  Most headers and MIME
formatting are ignored.

@item
The original format used by Greg Kroah-Hartman’s @emph{send_lots_of_email.pl}
script

This format expects the first line of the file to contain the "Cc:" value
and the "Subject:" of the message as the second line.
@end enumerate

@noindent

@chapheading OPTIONS

@noindent

@heading Composing

@table @asis

@item  @samp{--annotate} 
Review and edit each patch you’re about to send. Default is the value of
@samp{sendemail.annotate}. See the CONFIGURATION section for
@samp{sendemail.multiEdit}.

@item  @samp{--bcc=<address>,...} 
Specify a "Bcc:" value for each email. Default is the value of
@samp{sendemail.bcc}.

This option may be specified multiple times.

@item  @samp{--cc=<address>,...} 
Specify a starting "Cc:" value for each email.  Default is the value of
@samp{sendemail.cc}.

This option may be specified multiple times.

@item  @samp{--compose} 
Invoke a text editor (see GIT_EDITOR in git-var(1))  to edit an
introductory message for the patch series.

When @samp{--compose} is used, git send-email will use the From, Subject, and
In-Reply-To headers specified in the message. If the body of the message
(what you type after the headers and a blank line) only contains blank (or
Git: prefixed) lines, the summary won’t be sent, but From, Subject, and
In-Reply-To headers will be used unless they are removed.

Missing From or In-Reply-To headers will be prompted for.

See the CONFIGURATION section for @samp{sendemail.multiEdit}.

@item  @samp{--from=<address>} 
Specify the sender of the emails.  If not specified on the command line, the
value of the @samp{sendemail.from} configuration option is used.  If neither the
command-line option nor @samp{sendemail.from} are set, then the user will be
prompted for the value.  The default for the prompt will be the value of
GIT_AUTHOR_IDENT, or GIT_COMMITTER_IDENT if that is not set, as returned by
"git var -l".

@item  @samp{--reply-to=<address>} 
Specify the address where replies from recipients should go to.  Use this if
replies to messages should go to another address than what is specified with
the --from parameter.

@item  @samp{--in-reply-to=<identifier>} 
Make the first mail (or all the mails with @samp{--no-thread}) appear as a reply
to the given Message-Id, which avoids breaking threads to provide a new
patch series.  The second and subsequent emails will be sent as replies
according to the @samp{--[no-]chain-reply-to} setting.

So for example when @samp{--thread} and @samp{--no-chain-reply-to} are specified, the
second and subsequent patches will be replies to the first one like in the
illustration below where @samp{[PATCH v2 0/3]} is in reply to @samp{[PATCH 0/2]}:

@example
[PATCH 0/2] Here is what I did...
  [PATCH 1/2] Clean up and tests
  [PATCH 2/2] Implementation
  [PATCH v2 0/3] Here is a reroll
    [PATCH v2 1/3] Clean up
    [PATCH v2 2/3] New tests
    [PATCH v2 3/3] Implementation
@end example

Only necessary if --compose is also set.  If --compose is not set, this will
be prompted for.

@item  @samp{--subject=<string>} 
Specify the initial subject of the email thread.  Only necessary if
--compose is also set.  If --compose is not set, this will be prompted for.

@item  @samp{--to=<address>,...} 
Specify the primary recipient of the emails generated. Generally, this will
be the upstream maintainer of the project involved. Default is the value of
the @samp{sendemail.to} configuration value; if that is unspecified, and --to-cmd
is not specified, this will be prompted for.

This option may be specified multiple times.

@item  @samp{--8bit-encoding=<encoding>} 
When encountering a non-ASCII message or subject that does not declare its
encoding, add headers/quoting to indicate it is encoded in <encoding>.
Default is the value of the @emph{sendemail.assume8bitEncoding}; if that is
unspecified, this will be prompted for if any non-ASCII files are
encountered.

Note that no attempts whatsoever are made to validate the encoding.

@item  @samp{--compose-encoding=<encoding>} 
Specify encoding of compose message. Default is the value of the
@emph{sendemail.composeencoding}; if that is unspecified, UTF-8 is assumed.

@item  @samp{--transfer-encoding=(7bit|8bit|quoted-printable|base64|auto)} 
Specify the transfer encoding to be used to send the message over SMTP.
7bit will fail upon encountering a non-ASCII message.  quoted-printable can
be useful when the repository contains files that contain carriage returns,
but makes the raw patch email file (as saved from a MUA) much harder to
inspect manually.  base64 is even more fool proof, but also even more
opaque.  auto will use 8bit when possible, and quoted-printable otherwise.

Default is the value of the @samp{sendemail.transferEncoding} configuration
value; if that is unspecified, default to @samp{auto}.

@item  @samp{--xmailer} 
@itemx  @samp{--no-xmailer} 
Add (or prevent adding) the "X-Mailer:" header.  By default, the header is
added, but it can be turned off by setting the @samp{sendemail.xmailer}
configuration variable to @samp{false}.
@end table

@noindent

@heading Sending

@table @asis

@item  @samp{--envelope-sender=<address>} 
Specify the envelope sender used to send the emails.  This is useful if your
default address is not the address that is subscribed to a list. In order to
use the @emph{From} address, set the value to "auto". If you use the sendmail
binary, you must have suitable privileges for the -f parameter.  Default is
the value of the @samp{sendemail.envelopeSender} configuration variable; if that
is unspecified, choosing the envelope sender is left to your MTA.

@item  @samp{--sendmail-cmd=<command>} 
Specify a command to run to send the email. The command should be
sendmail-like; specifically, it must support the @samp{-i} option.  The command
will be executed in the shell if necessary.  Default is the value of
@samp{sendemail.sendmailcmd}.  If unspecified, and if --smtp-server is also
unspecified, git-send-email will search for @samp{sendmail} in @samp{/usr/sbin},
@samp{/usr/lib} and $PATH.

@item  @samp{--smtp-encryption=<encryption>} 
Specify the encryption to use, either @emph{ssl} or @emph{tls}.  Any other value
reverts to plain SMTP.  Default is the value of @samp{sendemail.smtpEncryption}.

@item  @samp{--smtp-domain=<FQDN>} 
Specifies the Fully Qualified Domain Name (FQDN) used in the HELO/EHLO
command to the SMTP server.  Some servers require the FQDN to match your IP
address.  If not set, git send-email attempts to determine your FQDN
automatically.  Default is the value of @samp{sendemail.smtpDomain}.

@item  @samp{--smtp-auth=<mechanisms>} 
Whitespace-separated list of allowed SMTP-AUTH mechanisms. This setting
forces using only the listed mechanisms. Example:

@example
$ git send-email --smtp-auth="PLAIN LOGIN GSSAPI" ...
@end example


If at least one of the specified mechanisms matches the ones advertised by
the SMTP server and if it is supported by the utilized SASL library, the
mechanism is used for authentication. If neither @emph{sendemail.smtpAuth} nor
@samp{--smtp-auth} is specified, all mechanisms supported by the SASL library can
be used. The special value @emph{none} maybe specified to completely disable
authentication independently of @samp{--smtp-user}

@item  @samp{--smtp-pass[=<password>]} 
Password for SMTP-AUTH. The argument is optional: If no argument is
specified, then the empty string is used as the password. Default is the
value of @samp{sendemail.smtpPass}, however @samp{--smtp-pass} always overrides this
value.

Furthermore, passwords need not be specified in configuration files or on
the command line. If a username has been specified (with @samp{--smtp-user} or a
@samp{sendemail.smtpUser}), but no password has been specified (with
@samp{--smtp-pass} or @samp{sendemail.smtpPass}), then a password is obtained using
@emph{git-credential}.

@item  @samp{--no-smtp-auth} 
Disable SMTP authentication. Short hand for @samp{--smtp-auth=none}

@item  @samp{--smtp-server=<host>} 
If set, specifies the outgoing SMTP server to use (e.g.  @samp{smtp.example.com}
or a raw IP address).  If unspecified, and if @samp{--sendmail-cmd} is also
unspecified, the default is to search for @samp{sendmail} in @samp{/usr/sbin},
@samp{/usr/lib} and $PATH if such a program is available, falling back to
@samp{localhost} otherwise.

For backward compatibility, this option can also specify a full pathname of
a sendmail-like program instead; the program must support the @samp{-i} option.
This method does not support passing arguments or using plain command
names.  For those use cases, consider using @samp{--sendmail-cmd} instead.

@item  @samp{--smtp-server-port=<port>} 
Specifies a port different from the default port (SMTP servers typically
listen to smtp port 25, but may also listen to submission port 587, or the
common SSL smtp port 465); symbolic port names (e.g. "submission" instead of
587)  are also accepted. The port can also be set with the
@samp{sendemail.smtpServerPort} configuration variable.

@item  @samp{--smtp-server-option=<option>} 
If set, specifies the outgoing SMTP server option to use.  Default value can
be specified by the @samp{sendemail.smtpServerOption} configuration option.

The --smtp-server-option option must be repeated for each option you want to
pass to the server. Likewise, different lines in the configuration files
must be used for each option.

@item  @samp{--smtp-ssl} 
Legacy alias for @emph{--smtp-encryption ssl}.

@item  @samp{--smtp-ssl-cert-path} 
Path to a store of trusted CA certificates for SMTP SSL/TLS certificate
validation (either a directory that has been processed by @emph{c_rehash}, or a
single file containing one or more PEM format certificates concatenated
together: see verify(1) -CAfile and -CApath for more information on
these). Set it to an empty string to disable certificate
verification. Defaults to the value of the @samp{sendemail.smtpsslcertpath}
configuration variable, if set, or the backing SSL library’s compiled-in
default otherwise (which should be the best choice on most platforms).

@item  @samp{--smtp-user=<user>} 
Username for SMTP-AUTH. Default is the value of @samp{sendemail.smtpUser}; if a
username is not specified (with @samp{--smtp-user} or @samp{sendemail.smtpUser}), then
authentication is not attempted.

@item  @samp{--smtp-debug=0|1} 
Enable (1) or disable (0) debug output. If enabled, SMTP commands and
replies will be printed. Useful to debug TLS connection and authentication
problems.

@item  @samp{--batch-size=<num>} 
Some email servers (e.g. smtp.163.com) limit the number emails to be sent
per session (connection) and this will lead to a failure when sending many
messages.  With this option, send-email will disconnect after sending $<num>
messages and wait for a few seconds (see --relogin-delay)  and reconnect, to
work around such a limit.  You may want to use some form of credential
helper to avoid having to retype your password every time this happens.
Defaults to the @samp{sendemail.smtpBatchSize} configuration variable.

@item  @samp{--relogin-delay=<int>} 
Waiting $<int> seconds before reconnecting to SMTP server. Used together
with --batch-size option.  Defaults to the @samp{sendemail.smtpReloginDelay}
configuration variable.
@end table

@noindent

@heading Automating

@table @asis

@item  @samp{--no-[to|cc|bcc]} 
Clears any list of "To:", "Cc:", "Bcc:" addresses previously set via config.

@item  @samp{--no-identity} 
Clears the previously read value of @samp{sendemail.identity} set via config, if
any.

@item  @samp{--to-cmd=<command>} 
Specify a command to execute once per patch file which should generate patch
file specific "To:" entries.  Output of this command must be single email
address per line.  Default is the value of @emph{sendemail.tocmd} configuration
value.

@item  @samp{--cc-cmd=<command>} 
Specify a command to execute once per patch file which should generate patch
file specific "Cc:" entries.  Output of this command must be single email
address per line.  Default is the value of @samp{sendemail.ccCmd} configuration
value.

@item  @samp{--[no-]chain-reply-to} 
If this is set, each email will be sent as a reply to the previous email
sent.  If disabled with "--no-chain-reply-to", all emails after the first
will be sent as replies to the first email sent.  When using this, it is
recommended that the first file given be an overview of the entire patch
series. Disabled by default, but the @samp{sendemail.chainReplyTo} configuration
variable can be used to enable it.

@item  @samp{--identity=<identity>} 
A configuration identity. When given, causes values in the
@emph{sendemail.<identity>} subsection to take precedence over values in the
@emph{sendemail} section. The default identity is the value of
@samp{sendemail.identity}.

@item  @samp{--[no-]signed-off-by-cc} 
If this is set, add emails found in the @samp{Signed-off-by} trailer or Cc: lines
to the cc list. Default is the value of @samp{sendemail.signedoffbycc}
configuration value; if that is unspecified, default to --signed-off-by-cc.

@item  @samp{--[no-]cc-cover} 
If this is set, emails found in Cc: headers in the first patch of the series
(typically the cover letter) are added to the cc list for each email
set. Default is the value of @emph{sendemail.cccover} configuration value; if
that is unspecified, default to --no-cc-cover.

@item  @samp{--[no-]to-cover} 
If this is set, emails found in To: headers in the first patch of the series
(typically the cover letter) are added to the to list for each email
set. Default is the value of @emph{sendemail.tocover} configuration value; if
that is unspecified, default to --no-to-cover.

@item  @samp{--suppress-cc=<category>} 
Specify an additional category of recipients to suppress the auto-cc of:

@itemize 

@item
@emph{author} will avoid including the patch author.

@item
@emph{self} will avoid including the sender.

@item
@emph{cc} will avoid including anyone mentioned in Cc lines in the patch header
except for self (use @emph{self} for that).

@item
@emph{bodycc} will avoid including anyone mentioned in Cc lines in the patch body
(commit message) except for self (use @emph{self} for that).

@item
@emph{sob} will avoid including anyone mentioned in the Signed-off-by trailers
except for self (use @emph{self} for that).

@item
@emph{misc-by} will avoid including anyone mentioned in Acked-by, Reviewed-by,
Tested-by and other "-by" lines in the patch body, except Signed-off-by (use
@emph{sob} for that).

@item
@emph{cccmd} will avoid running the --cc-cmd.

@item
@emph{body} is equivalent to @emph{sob} + @emph{bodycc} + @emph{misc-by}.

@item
@emph{all} will suppress all auto cc values.
@end itemize

Default is the value of @samp{sendemail.suppresscc} configuration value; if that
is unspecified, default to @emph{self} if --suppress-from is specified, as well
as @emph{body} if --no-signed-off-cc is specified.

@item  @samp{--[no-]suppress-from} 
If this is set, do not add the From: address to the cc: list.  Default is
the value of @samp{sendemail.suppressFrom} configuration value; if that is
unspecified, default to --no-suppress-from.

@item  @samp{--[no-]thread} 
If this is set, the In-Reply-To and References headers will be added to each
email sent.  Whether each mail refers to the previous email (@samp{deep}
threading per @emph{git format-patch} wording) or to the first email (@samp{shallow}
threading) is governed by "--[no-]chain-reply-to".

If disabled with "--no-thread", those headers will not be added (unless
specified with --in-reply-to).  Default is the value of the
@samp{sendemail.thread} configuration value; if that is unspecified, default to
--thread.

It is up to the user to ensure that no In-Reply-To header already exists
when @emph{git send-email} is asked to add it (especially note that @emph{git
format-patch} can be configured to do the threading itself).  Failure to do
so may not produce the expected result in the recipient’s MUA.
@end table

@noindent

@heading Administering

@table @asis

@item  @samp{--confirm=<mode>} 
Confirm just before sending:

@itemize 

@item
@emph{always} will always confirm before sending

@item
@emph{never} will never confirm before sending

@item
@emph{cc} will confirm before sending when send-email has automatically added
addresses from the patch to the Cc list

@item
@emph{compose} will confirm before sending the first message when using
--compose.

@item
@emph{auto} is equivalent to @emph{cc} + @emph{compose}
@end itemize

Default is the value of @samp{sendemail.confirm} configuration value; if that is
unspecified, default to @emph{auto} unless any of the suppress options have been
specified, in which case default to @emph{compose}.

@item  @samp{--dry-run} 
Do everything except actually send the emails.

@item  @samp{--[no-]format-patch} 
When an argument may be understood either as a reference or as a file name,
choose to understand it as a format-patch argument (@samp{--format-patch})  or as
a file name (@samp{--no-format-patch}). By default, when such a conflict occurs,
git send-email will fail.

@item  @samp{--quiet} 
Make git-send-email less verbose.  One line per email should be all that is
output.

@item  @samp{--[no-]validate} 
Perform sanity checks on patches.  Currently, validation means the
following:

@itemize 

@item
Invoke the sendemail-validate hook if present (see githooks(5)).

@item
Warn of patches that contain lines longer than
998 characters unless a suitable transfer encoding
(@emph{auto}, @emph{base64}, or @emph{quoted-printable}) is used;
this is due to SMTP limits as described by
@uref{http://www.ietf.org/rfc/rfc5322.txt,http://www.ietf.org/rfc/rfc5322.txt}.
@end itemize

Default is the value of @samp{sendemail.validate}; if this is not set, default to
@samp{--validate}.

@item  @samp{--force} 
Send emails even if safety checks would prevent it.
@end table

@noindent

@heading Information

@table @asis

@item  @samp{--dump-aliases} 
Instead of the normal operation, dump the shorthand alias names from the
configured alias file(s), one per line in alphabetical order. Note, this
only includes the alias name and not its expanded email addresses.  See
@emph{sendemail.aliasesfile} for more information about aliases.
@end table

@noindent

@chapheading CONFIGURATION

@table @asis

@item  sendemail.aliasesFile 
To avoid typing long email addresses, point this to one or more email
aliases files.  You must also supply @samp{sendemail.aliasFileType}.

@item  sendemail.aliasFileType 
Format of the file(s) specified in sendemail.aliasesFile. Must be one of
@emph{mutt}, @emph{mailrc}, @emph{pine}, @emph{elm}, or @emph{gnus}, or @emph{sendmail}.

What an alias file in each format looks like can be found in the
documentation of the email program of the same name. The differences and
limitations from the standard formats are described below:

@table @asis

@item  sendmail 
@itemize 

@item
Quoted aliases and quoted addresses are not supported: lines that
contain a @samp{"} symbol are ignored.

@item
Redirection to a file (@samp{/path/name}) or pipe (@samp{|command}) is not
supported.

@item
File inclusion (@samp{:include: /path/name}) is not supported.

@item
Warnings are printed on the standard error output for any
explicitly unsupported constructs, and any other lines that are not
recognized by the parser.
@end itemize
@end table

@item  sendemail.multiEdit 
If true (default), a single editor instance will be spawned to edit files
you have to edit (patches when @samp{--annotate} is used, and the summary when
@samp{--compose} is used). If false, files will be edited one after the other,
spawning a new editor each time.

@item  sendemail.confirm 
Sets the default for whether to confirm before sending. Must be one of
@emph{always}, @emph{never}, @emph{cc}, @emph{compose}, or @emph{auto}. See @samp{--confirm} in the
previous section for the meaning of these values.
@end table

@noindent

@chapheading EXAMPLES

@noindent

@heading Use gmail as the smtp server

To use @emph{git send-email} to send your patches through the GMail SMTP server,
edit ~/.gitconfig to specify your account settings:

@example
[sendemail]
        smtpEncryption = tls
        smtpServer = smtp.gmail.com
        smtpUser = yourname@@gmail.com
        smtpServerPort = 587
@end example


If you have multi-factor authentication set up on your Gmail account, you
will need to generate an app-specific password for use with @emph{git
send-email}. Visit
@uref{https://security.google.com/settings/security/apppasswords,https://security.google.com/settings/security/apppasswords} to create it.

If you do not have multi-factor authentication set up on your Gmail account,
you will need to allow less secure app access. Visit
@uref{https://myaccount.google.com/lesssecureapps,https://myaccount.google.com/lesssecureapps} to enable it.

Once your commits are ready to be sent to the mailing list, run the
following commands:

@example
$ git format-patch --cover-letter -M origin/master -o outgoing/
$ edit outgoing/0000-*
$ git send-email outgoing/*
@end example

The first time you run it, you will be prompted for your credentials.  Enter
the app-specific or your regular password as appropriate.  If you have
credential helper configured (see git-credential(1)), the password
will be saved in the credential store so you won’t have to type it the next
time.

Note: the following core Perl modules that may be installed with your
distribution of Perl are required: MIME::Base64, MIME::QuotedPrint,
Net::Domain and Net::SMTP.  These additional Perl modules are also required:
Authen::SASL and Mail::Address.

@noindent

@chapheading SEE ALSO

git-format-patch(1), git-imap-send(1), mbox(5)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-send-pack,,,Top
@chapheading Name

git-send-pack — Push objects over Git protocol to another repository

@noindent

@chapheading Synopsis

@display
git send-pack [--all] [--dry-run] [--force] [--receive-pack=<git-receive-pack>]
                [--verbose] [--thin] [--atomic]
                [--[no-]signed|--signed=(true|false|if-asked)]
                [<host>:]<directory> [<ref>…]
@end display


@noindent

@chapheading DESCRIPTION

Usually you would want to use @emph{git push}, which is a higher-level wrapper of
this command, instead. See git-push(1).

Invokes @emph{git-receive-pack} on a possibly remote repository, and updates it
from the current repository, sending named refs.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--receive-pack=<git-receive-pack>} 
Path to the @emph{git-receive-pack} program on the remote end.  Sometimes useful
when pushing to a remote repository over ssh, and you do not have the
program in a directory on the default $PATH.

@item  @samp{--exec=<git-receive-pack>} 
Same as --receive-pack=<git-receive-pack>.

@item  @samp{--all} 
Instead of explicitly specifying which refs to update, update all heads that
locally exist.

@item  @samp{--stdin} 
Take the list of refs from stdin, one per line. If there are refs specified
on the command line in addition to this option, then the refs from stdin are
processed after those on the command line.

If @samp{--stateless-rpc} is specified together with this option then the list of
refs must be in packet format (pkt-line). Each ref must be in a separate
packet, and the list must end with a flush packet.

@item  @samp{--dry-run} 
Do everything except actually send the updates.

@item  @samp{--force} 
Usually, the command refuses to update a remote ref that is not an ancestor
of the local ref used to overwrite it.  This flag disables the check.  What
this means is that the remote repository can lose commits; use it with care.

@item  @samp{--verbose} 
Run verbosely.

@item  @samp{--thin} 
Send a "thin" pack, which records objects in deltified form based on objects
not included in the pack to reduce network traffic.

@item  @samp{--atomic} 
Use an atomic transaction for updating the refs. If any of the refs fails to
update then the entire push will fail without changing any refs.

@item  @samp{--[no-]signed} 
@itemx  @samp{--signed=(true|false|if-asked)} 
GPG-sign the push request to update refs on the receiving side, to allow it
to be checked by the hooks and/or be logged.  If @samp{false} or @samp{--no-signed},
no signing will be attempted.  If @samp{true} or @samp{--signed}, the push will fail
if the server does not support signed pushes.  If set to @samp{if-asked}, sign if
and only if the server supports signed pushes.  The push will also fail if
the actual call to @samp{gpg --sign} fails.  See git-receive-pack(1) for
the details on the receiving end.

@item  @samp{--push-option=<string>} 
Pass the specified string as a push option for consumption by hooks on the
server side.  If the server doesn’t support push options, error out.  See
git-push(1) and githooks(5) for details.

@item  <host> 
A remote host to house the repository.  When this part is specified,
@emph{git-receive-pack} is invoked via ssh.

@item  <directory> 
The repository to update.

@item  <ref>… 
The remote refs to update.
@end table

@noindent

@chapheading SPECIFYING THE REFS

There are three ways to specify which refs to update on the remote end.

With @samp{--all} flag, all refs that exist locally are transferred to the remote
side.  You cannot specify any @emph{<ref>} if you use this flag.

Without @samp{--all} and without any @emph{<ref>}, the heads that exist both on the
local side and on the remote side are updated.

When one or more @emph{<ref>} are specified explicitly (whether on the command
line or via @samp{--stdin}), it can be either a single pattern, or a pair of such
pattern separated by a colon ":" (this means that a ref name cannot have a
colon in it).  A single pattern @emph{<name>} is just a shorthand for
@emph{<name>:<name>}.

Each pattern pair consists of the source side (before the colon)  and the
destination side (after the colon).  The ref to be pushed is determined by
finding a match that matches the source side, and where it is pushed is
determined by using the destination side. The rules used to match a ref are
the same rules used by @emph{git rev-parse} to resolve a symbolic ref name. See
git-rev-parse(1).

@itemize 

@item
It is an error if <src> does not match exactly one of the local refs.

@item
It is an error if <dst> matches more than one remote refs.

@item
If <dst> does not match any remote ref, either

@itemize 

@item
it has to start with "refs/"; <dst> is used as the destination literally in
this case.

@item
<src> == <dst> and the ref that matched the <src> must not exist in the set
of remote refs; the ref matched <src> locally is used as the name of the
destination.
@end itemize
@end itemize

Without ‘--force`, the <src> ref is stored at the remote only if <dst> does
not exist, or <dst> is a proper subset (i.e. an ancestor) of <src>.  This
check, known as "fast-forward check", is performed in order to avoid
accidentally overwriting the remote ref and lose other peoples’ commits from
there.

With @samp{--force}, the fast-forward check is disabled for all refs.

Optionally, a <ref> parameter can be prefixed with a plus @emph{+} sign to
disable the fast-forward check only on that ref.

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-sh-i18n--envsubst,,,Top
@chapheading Name

git-sh-i18n--envsubst — i18nフォールバック用のGit独自のenvsubst(1)

@noindent

@chapheading Synopsis

@display
eval_gettext () @{
        printf "%s" "$1" | (
                export PATH $(git sh-i18n--envsubst --variables "$1");
                git sh-i18n--envsubst "$1"
        )
@}
@end display


@noindent

@chapheading DESCRIPTION

これは、全くもってエンドユーザーが実行するコマンドではありません。この文書は、配管スクリプトを研究している、および/または新しいスクリプトを作成している人々を対象としています。

@emph{git sh-i18n--envsubst} は、GNU gettextパッケージに付属するGNU @samp{envsubst(1)}
プログラムのGit用簡略版です。これは、 git-sh-i18n(1) によって内部的に使用され、 @samp{eval_gettext}
関数に渡された変数を差し込みます。

インターフェイスについては何も約束されていません。また、このプログラムが次のバージョンのGitで警告なしに消えることはありません。使用しないでください。(No
promises are made about the interface, or that this program won’t disappear
without warning in the next version of Git. Don’t use it.)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-sh-i18n,,,Top
@chapheading Name

git-sh-i18n — シェルスクリプトのためのGit用i18nセットアップコード

@noindent

@chapheading Synopsis

@display
. "$(git --exec-path)/git-sh-i18n"
@end display


@noindent

@chapheading DESCRIPTION

これは、全くもってエンドユーザーが実行するコマンドではありません。この文書は、磁器風のスクリプトを研究している、および/または新しいスクリプトを書いている人々を対象としています。

'git sh-i18n
スクリプトレットは、シェルスクリプト内に実装されたGitの磁器プログラムによって、(@samp{.`を使用してsourceコマンドで)実行されるように設計されています。
これは、 `gettext.sh} スクリプトを介してアクセス可能なGNU @samp{gettext} および @samp{eval_gettext}
関数のラッパーを提供し、GNU gettextのないシステムではこれらが自動的に使われます(pass-through fallbacks)。

@noindent

@chapheading FUNCTIONS

@table @asis

@item  gettext 
現在、 @samp{printf(1)}
のラッパーとして実装されているダミーのフォールスルー関数。今後のバージョンでは、実際のgettext実装に置き換えられる事でしょう。

@item  eval_gettext 
現在、 @samp{printf(1)} のラッパーとして実装されているダミーのフォールスルー関数で、その変数達は
git-sh-i18n--envsubst(1)
ヘルパーによって展開されます。今後のバージョンでは、実際のgettext実装に置き換えられる事でしょう。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-sh-setup,,,Top
@chapheading Name

git-sh-setup — 一般的なGitシェルスクリプトのセットアップコード

@noindent

@chapheading Synopsis

@display
. "$(git --exec-path)/git-sh-setup"
@end display


@noindent

@chapheading DESCRIPTION

これは、エンドユーザーが実行するコマンドではありません。この文書は、磁器風のスクリプトを研究している、および/または
新しいスクリプトを書いている人々を対象としています。

@emph{git sh-setup} スクリプトレットは、他のシェルスクリプトから( @samp{.}
を使用して)実行(source)され、通常のGitディレクトリと、いくつかのヘルパーシェル関数を指す、いくつかの環境変数を設定するように設計されています。

実行(source)前に、スクリプトでいくつかの環境変数を設定する必要があります。@samp{USAGE} (および存在する場合は @samp{LONG_USAGE}
)は、 @samp{usage()}
シェル関数によって与えられるメッセージを定義するために使用されます。スクリプトが作業ツリーのサブディレクトリから実行できる場合は、
@samp{SUBDIRECTORY_OK} を設定できます(一部のコマンドは実行できません)。

スクリプトレットは @samp{GIT_DIR} と @samp{GIT_OBJECT_DIRECTORY} シェル変数を設定しますが、それらを環境にエクスポートしません。

@noindent

@chapheading FUNCTIONS

@table @asis

@item  die 
提供されたエラーメッセージを標準エラーストリームに出力した後に終了します。

@item  usage 
使用法メッセージで die します。

@item  set_reflog_action 
すでに設定されていない限り、 @samp{GIT_REFLOG_ACTION}
環境変数を指定の文字列(通常はプログラムの名前)に設定します。スクリプトが、refを更新する @samp{git}
コマンドを実行するたびに、この文字列の値を使用してreflogエントリが作成され、どのコマンドがrefを更新したかの記録が残されます。

@item  git_editor 
特定のファイルに対してユーザーが選択したエディター(GIT_EDITOR または core.editor または VISUAL または
EDITOR)を実行しますが、エディターが指定されておらず、端末がダムの場合はエラーになります。

@item  is_bare_repository 
@samp{true} または @samp{false}
を標準出力ストリームに出力して、リポジトリがベアリポジトリであるかどうか(つまり、関連する作業ツリーがないかどうか)を示します。

@item  cd_to_toplevel 
作業ツリーのトップレベルまでchdirを実行します。

@item  require_work_tree 
現在のディレクトリがリポジトリの作業ツリー内にあるかどうかを確認し、そうでない場合は停止(die)します。

@item  require_work_tree_exists 
リポジトリに関連付けられている作業ツリーが存在するかどうかを確認し、存在しない場合は停止(die)します。多くの場合、cd_to_toplevelを呼び出す前に実行されますが、作業ツリーがない場合は実行できません。

@item  require_clean_work_tree <action> [<hint>] 
リポジトリに関連付けられている作業ツリーとインデックスに、追跡されたファイルへのコミットされていない変更がないことを確認します。それ以外の場合は、
@samp{Cannot <action>: <reason>. <hint>} の形式のエラーメッセージを出力し、dieします。 例:

@example
require_clean_work_tree rebase "Please commit or stash them."
@end example


@item  get_author_ident_from_commit 
特定のコミットの GIT_AUTHOR_NAME と GIT_AUTHOR_EMAIL と GIT_AUTHOR_DATE
変数を設定するためにevalで使用するコードを出力します。

@item  create_virtual_base 
最初のファイルを変更して、2番目のファイルと共通の行だけが残るようにします。共通の資料が不十分な場合、最初のファイルは空のままになります。
結果は、3方向マージの仮想ベース入力として適しています。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-shell,,,Top
@chapheading Name

git-shell — GitのみのSSHアクセス用の制限付きログインシェル

@noindent

@chapheading Synopsis

@display
chsh -s $(command -v git-shell) <user>
git clone <user>@@localhost:/path/to/repo.git
ssh <user>@@localhost
@end display


@noindent

@chapheading DESCRIPTION

これは、制限されたGitアクセスを提供するためのSSHアカウントのログインシェルです。プル/プッシュ機能を実装するサーバー側のGitコマンドと、ユーザーのホームディレクトリの
@samp{git-shell-commands} という名前のサブディレクトリにあるカスタムコマンドの実行のみを許可します。

@noindent

@chapheading COMMANDS

@emph{git shell} は、 @samp{-c} オプションの後に以下のコマンドを受け入れます:

@table @asis

@item  @emph{git receive-pack <argument>} 
@itemx  @emph{git upload-pack <argument>} 
@itemx  @emph{git upload-archive <argument>} 
対応するサーバー側コマンドを呼び出して、クライアントの「git push」または「git fetch」または「git archive
--remote」リクエストをサポートします。

@item  @emph{cvs server} 
CVSサーバーを模倣します。 git-cvsserver(1) 参照。
@end table

@samp{~/git-shell-commands} ディレクトリが存在する場合、 @emph{git shell} は、ユーザーのホームディレクトリから
"@samp{git-shell-commands/<command> <arguments>}" を実行することにより他のカスタムコマンドも処理します。

@noindent

@chapheading INTERACTIVE USE

デフォルトでは、上記のコマンドは @samp{-c} オプションでのみ実行できます。シェルはインタラクティブではありません。

@samp{~/git-shell-commands} ディレクトリが存在する場合、 @emph{git shell}
をインタラクティブに実行することもできます(引数なしで)。 @samp{help} コマンドが @samp{git-shell-commands}
ディレクトリにある場合、許可されたアクションの概要をユーザーに提供するために実行されます。次に、 `git> `
プロンプトが表示され、「git-shell-commands」ディレクトリから任意のコマンドを入力することができます。「exit」を使用すれば接続を閉じることができます。

通常、このモードは、ユーザーがアクセスできるリポジトリの一覧表示、リポジトリの作成、削除、名前変更、またはリポジトリの説明と権限の変更を可能にする管理インターフェイスとして使用されます。

@samp{no-interactive-login} コマンドが存在する場合、それが実行され、対話型シェルが中止(abort)されます。

@noindent

@chapheading EXAMPLES

インタラクティブログインを無効にするには、代わりにgreeting(挨拶)を表示します:

@example
$ chsh -s /usr/bin/git-shell
$ mkdir $HOME/git-shell-commands
$ cat >$HOME/git-shell-commands/no-interactive-login <<\EOF
#!/bin/sh
printf '%s\n' "Hi $USER! You've successfully authenticated, but I do not"
printf '%s\n' "provide interactive shell access."
exit 128
EOF
$ chmod +x $HOME/git-shell-commands/no-interactive-login
@end example


git-cvsserverアクセスを有効にするには(なお、git-shell-commandsディレクトリを作成するとインタラクティブログインが可能になるため、通常、上記の「no-interactive-login」の例が前提条件として必要です):

@example
$ cat >$HOME/git-shell-commands/cvs <<\EOF
if ! test $# = 1 && test "$1" = "server"
then
        echo >&2 "git-cvsserver only handles \"server\""
        exit 1
fi
exec git cvsserver server
EOF
$ chmod +x $HOME/git-shell-commands/cvs
@end example


@noindent

@chapheading SEE ALSO

ssh(1), git-daemon(1), contrib/git-shell-commands/README

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-shortlog,,,Top
@chapheading Name

git-shortlog — 'git log' の出力を要約します。

@noindent

@chapheading Synopsis

@display
git shortlog [<options>] [<revision range>] [[--] <path>…]
git log --pretty=short | git shortlog [<options>]
@end display


@noindent

@chapheading DESCRIPTION

'git log’の出力を、リリースアナウンスに含めるのに適した形式で要約します。各コミットは、作者とタイトルごとにグループ化されます。

加えて、「[PATCH]」はコミットの説明から削除されます。

コマンドラインでリビジョンが渡されず、かつ、標準入力が端末ではないかまたは現在のブランチがない場合、「git
shortlog」は、現在のリポジトリを参照せずに、標準入力から読み取られたログの概要を出力します。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-n} 
@itemx  @samp{--numbered} 
作者のアルファベット順ではなく、作者のコミット数に従って出力を並べ替えます。

@item  @samp{-s} 
@itemx  @samp{--summary} 
コミットの説明を抑制し、コミット数の要約のみを提供します。

@item  @samp{-e} 
@itemx  @samp{--email} 
各作者のメールアドレスを表示します。

@item  @samp{--format[=<format>]} 
コミットの件名の代わりに、他の情報を使用して各コミットを説明します。 @samp{<format>} は、 @samp{* [%h] %s} など 、 @samp{git log}
の @samp{--format} オプションで受け入れられる任意の文字列にすることができます。 (git-log(1) の「PRETTY
FORMATS」セクションを参照してください。)

@example
pretty-printされた各コミットは、表示される前に再ラップ(rewrapp)されます。
@end example

@item  @samp{--group=<type>} 
グループは @samp{<type>} に基づいてコミットします。 @samp{--group} オプションが指定されていない場合、デフォルトは @samp{author} です。
@samp{<type>} は以下のいずれかです:

@itemize 

@item
@samp{author} : コミットは作成者ごとにグループ化されます

@item
@samp{committer} : コミットはコミッターによってグループ化されます( @samp{-c} と同じ)

@item
@samp{trailer:<field>} : @samp{<field>}
は大文字と小文字を区別しないコミットメッセージトレーラーとして解釈されます(git-interpret-trailers(1)
参照)。たとえば、プロジェクトで @samp{Reviewed-by} のトレーラーを使用している場合、 @samp{git shortlog -ns
--group=trailer:reviewed-by} を使用して誰がレビューしているかを確認できます。

注意:
トレーラーを含まないコミットはカウントされないことに注意してください。同様に、複数のトレーラーを使用したコミット(複数のサインオフなど)は、複数回カウントされる場合があります(ただし、そのコミットの一意のトレーラー値ごとに1回のみです)。

shortlog は、各トレーラー値を @samp{name <email>} ID としてパースしようとします。成功すると、mailmapが適用され、
@samp{--email} オプションが指定されていない限りemailは省略されます。値をIDとして解析できない場合は、その文言通りに取得されます。
@end itemize

@samp{--group} が複数回指定されている場合、コミットは各値でカウントされます(ただし、そのコミットの一意の値ごとに1回だけカウントされます)。
たとえば、 @samp{git shortlog --group=author --group=trailer:co-authored-by}
は、authorとco-authorの両方をカウントします。

@item  @samp{-c} 
@itemx  @samp{--committer} 
@samp{--group=committer} のエイリアスです。

@item  @samp{-w[<width>[,<indent1>[,<indent2>]]]} 
各行を @samp{width} で折り返すことにより、出力を行折り返します。各エントリの最初の行は @samp{indent1} スペースでインデントされ、2行目以降は
@samp{indent2} スペースでインデントされます。 @samp{width} と @samp{indent1} と @samp{indent2}
のデフォルトは、それぞれ76と6と9です。

widthが @samp{0} (ゼロ)の場合、出力の行を折り返すことなくインデントします。

@item  <revision range> 
指定のリビジョン範囲のコミットのみを表示します。 <revision range> が指定されていない場合、デフォルトで @samp{HEAD}
(つまり、現在のコミットにつながる履歴全体)になります。 @samp{origin..HEAD} は、現在のコミット(つまり、 @samp{HEAD}
)から到達可能なすべてのコミットを指定しますが、 @samp{origin} からは指定しません。 <revision range>
のスペルの完全なリストについては、 gitrevisions(7) の「Specifying
Ranges」セクションを参照してください。

@item  [--] <path>… 
指定されたパスに一致するファイルがどのように作成されたかを説明するのに十分なコミットのみを検討してください。

混乱が生じた場合、パスをオプションまたはリビジョン範囲から分離するために、パスの前に @samp{--} を付ける必要がある場合があります。
@end table

@noindent

@heading Commit Limiting

ここで説明されている特別な表記法を使用してリストする必要があるコミットの範囲を指定することに加えて、追加のコミット制限が適用される場合があります。

より多くのオプションを使用すると、通常、出力がさらに制限されます(たとえば、@samp{--since=<date1>`は}<date1>@samp{より新しいコミットに制限され、}--grep=<pattern>@samp{と一緒に使用すると、ログメッセージに}<pattern>`と一致する行があるコミットにさらに制限されます)。

注意: これらは、`--reverse`などのコミット順序およびフォーマットオプションの前に適用されることに注意してください。

@table @asis

@item  @samp{-<number>} 
@itemx  @samp{-n <number>} 
@itemx  @samp{--max-count=<number>} 
出力するコミットの数を制限します。

@item  @samp{--skip=<number>} 
コミット出力の表示を開始する前に、'number’個のコミットをスキップします。

@item  --since=<date> 
@itemx  @samp{--after=<date>} 
指定の日付よりも新しいコミットを表示します。

@item  @samp{--until=<date>} 
@itemx  @samp{--before=<date>} 
指定の日付より古いコミットを表示します。

@item  @samp{--author=<pattern>} 
@itemx  @samp{--committer=<pattern>} 
コミット出力を、指定されたパターン(正規表現)に一致する作者(author)/コミッター(committer)ヘッダー行を持つものに制限します。複数の
@samp{--author=<pattern>} がある場合、作者が指定されたパターンのいずれかに一致するコミットが選択されます(複数の
@samp{--committer=<pattern>} の場合も同様)。

@item  @samp{--grep-reflog=<pattern>} 
コミット出力を、指定されたパターン(正規表現)に一致するreflogエントリを持つものに制限します。複数の`--grep-reflog`を使用すると、指定されたパターンのいずれかに一致するreflogメッセージを持つコミットが選択されます。`--walk-reflogs`が使用されていない限り、このオプションを使用するとエラーになります。

@item  @samp{--grep=<pattern>} 
コミット出力を、指定されたパターン(正規表現)に一致するログメッセージを持つものに制限します。複数の`--grep=<pattern>@samp{を使用すると、指定されたパターンのいずれかにメッセージが一致するコミットが選択されます(全てに一致するコミットだけを選択したい場合、}--all-match`を参照してください)。

`--notes`が有効な場合、ノートからのメッセージは、ログメッセージの一部であるかのようにマッチングされます。

@item  @samp{--all-match} 
コミット出力を、少なくとも1つに一致するものではなく、指定されたすべての`--grep`に一致するものに制限します。

@item  @samp{--invert-grep} 
コミット出力を、`--grep=<pattern>`で指定されたパターンと一致しないログメッセージを持つものに制限します。

@item  @samp{-i} 
@itemx  @samp{--regexp-ignore-case} 
大文字小文字に関係なく、正規表現の制限パターンに一致します。

@item  @samp{--basic-regexp} 
制限パターンを基本正規表現として扱います。これがデフォルトです。

@item  @samp{-E} 
@itemx  @samp{--extended-regexp} 
制限パターンを、デフォルトの基本正規表現の代わりに拡張正規表現として扱います。

@item  @samp{-F} 
@itemx  @samp{--fixed-strings} 
制限パターンを固定文字列として扱います(パターンを正規表現として解釈しないでください)。

@item  @samp{-P} 
@itemx  @samp{--perl-regexp} 
制限パターンをPerl互換の正規表現として扱います。

これらのタイプの正規表現のサポートは、コンパイル時オプションに依存します。Gitが当該のサポート付きでコンパイルされていない場合、このオプションを提供すると、Gitが死にます(die)。

@item  @samp{--remove-empty} 
指定されたパスがツリーから見えなくなったら停止(stop)します。

@item  @samp{--merges} 
マージコミットのみを印刷します。これは`--min-parents=2`とまったく同じです。

@item  @samp{--no-merges} 
複数の親を持つコミットを出力しない。これは`--max-parents=1`とまったく同じです。

@item  @samp{--min-parents=<number>} 
@itemx  @samp{--max-parents=<number>} 
@itemx  @samp{--no-min-parents} 
@itemx  @samp{--no-max-parents} 
量の多少に関わらず、とにかく複数の親コミットがあるコミットのみを表示します。特に、@samp{--max-parents=1`は}--no-merges`と同じであり、@samp{--min-parents=2`は}--merges`と同じです。@samp{--max-parents=0`はすべてのルートコミットを提供し、}--min-parents=3`はすべてのタコ足マージ(octopus
merges)を示します。

@samp{--no-min-parents`と}--no-max-parents`は、これらの制限を(制限なしに)再度リセットします。同等の形式は、@samp{--min-parents=0}(すべてのコミットに0個以上の親があります)および`--max-parents=-1`(マイナスの数は上限がないことを示します)です。

@item  @samp{--first-parent} 
マージコミットを確認したら、最初の親コミットのみを探索します。このオプションは、特定のトピックブランチの進化を表示するときに、より良い概要を提供できます。トピックブランチへのマージは、時々更新されるアップストリームに調整することだけである傾向があり、このオプションを使用すると、そのようなマージによって履歴に取り込まれた個々のコミットを無視できます。

@item  @samp{--not} 
次に現れる`--not`までの間、後続のすべてのリビジョン指定子の'^'プレフィックス(またはその欠如)の意味を逆にします。

@item  @samp{--all} 
‘refs/`内のすべてのrefが`HEAD`とともに、コマンドラインに’<commit>'としてリストされているかのように見せかけます。

@item  @samp{--branches[=<pattern>]} 
‘refs/heads`内のすべてのrefがコマンドラインに’<commit>'としてリストされているかのように見せかけます。@emph{<pattern>'が指定されている場合、ブランチを指定されたシェルグロブ(shell
glob)に一致するものに制限します。パターンに}?@emph{または}*'または'[@emph{がない場合、最後に}/*'が含まれます。

@item  @samp{--tags[=<pattern>]} 
‘refs/tags`内のすべてのrefがコマンドラインに’<commit>'としてリストされているかのように見せかけます。@emph{<pattern>'が指定されている場合は、指定されたシェルグロブ(shell
glob)に一致するタグにタグを制限します。パターンに}?@emph{または}*'または'[@emph{がない場合、最後に}/*'が含まれます。

@item  @samp{--remotes[=<pattern>]} 
‘refs/remotes`内のすべてのrefがコマンドラインに’<commit>'としてリストされているかのように見せかけます。@emph{<pattern>'が指定されている場合、リモート追跡ブランチを指定されたシェルグロブ(shell
glob)に一致するものに制限します。パターンに}?@emph{または}*'または'[@emph{がない場合、最後に}/*'が含まれます。

@item  @samp{--glob=<glob-pattern>} 
シェルグロブ'<glob-pattern>'に一致するすべてのrefがコマンドラインに'<commit>'としてリストされているかのように見せかけます。先頭の’refs/@emph{は、欠落している場合は自動的に先頭に追加されます。パターンに}?@emph{または}*'または'[@emph{がない場合、最後に}/*'が含まれます。

@item  @samp{--exclude=<glob-pattern>} 
次の`--all`または`--branches`または`--tags`または`--remotes`または`--glob`が別の方法で考慮する'<glob-pattern>'に一致するrefを含めないでください。このオプションを繰り返すと、次の`--all`または`--branches`または`--tags`または`--remotes`または`--glob`オプションまで除外パターンが蓄積されます(他のオプションまたは引数は、蓄積されたパターンをクリアしません)。

与えられたパターンは、それぞれ`--branches`または`
--tags`または`--remotes`に適用される場合、‘refs/heads`または`refs/tags`または`refs/remotes`で始まるべきではありません。@samp{--glob`または}--all`に適用する場合は、`refs/`で始める必要があります。末尾の’/*'を意図している場合は、明示的に指定する必要があります。

@item  @samp{--reflog} 
reflogsで言及されているすべてのオブジェクトがコマンドラインに`<commit>`としてリストされているかのように見せかけます。

@item  @samp{--alternate-refs} 
代替リポジトリのref先端として言及されているすべてのオブジェクトがコマンドラインにリストされているかのように見せかけます。代替リポジトリは、オブジェクトディレクトリが`objects/info/alternates`で指定されているリポジトリです。インクルードされたオブジェクトのセットは、`core.alternateRefsCommand`などによって変更できます。git-config(1)を参照してください。

@item  @samp{--single-worktree} 
デフォルトでは、作業ツリーが複数ある場合、@samp{--all`と}-reflog`と`--indexed-objects`では、すべての作業ツリーが検査されます(git-worktree(1)を参照)。このオプションは、現在の作業ツリーのみを調べるように強制します。

@item  @samp{--ignore-missing} 
入力に無効なオブジェクト名が含まれている場合、そもそもその不正な入力が行われていないかのように見せかけます。

@item  @samp{--bisect} 
コマンドラインで、bad bisection ref @samp{refs/bisect/bad} がリストされ、その後に @samp{--not} と good
bisection ref @samp{refs/bisect/good-*} が続くかのように見せかけます。

@item  @samp{--stdin} 
コマンドラインにリストされている'<commit>'に加えて、標準入力からそれらを読み取ります。`--`区切り文字が表示された場合は、コミットの読み取りを停止し、パスの読み取りを開始して結果を制限します。

@item  @samp{--cherry-mark} 
@samp{--cherry-pick}（以下を参照）と同様ですが、同等のコミットを省略せずに`=@samp{と印し、同等でないコミットを}+`と印します。

@item  @samp{--cherry-pick} 
コミットの組を対称差(symmetric difference)に制限する場合、「反対側」の別のコミットと同じ変更を導入するコミットを省略します。

たとえば、@samp{A`と`B`の2つのブランチがある場合、それらの片側だけですべてのコミットを一覧表示する通常の方法は、}--left-right`を使用することです(`--left-right`オプションの説明の以下の例を参照してください)。ただし、他のブランチからは(ブランチAと重複しない)厳選されたコミットが表示されます(たとえば、「3rd
onb」はブランチAからチェリーピックされる可能性があります)。このオプションを使用すると、そのようなコミットのペアは出力から除外されます。

@item  @samp{--left-only} 
@itemx  @samp{--right-only} 
リストは、対称差のそれぞれの側でのみコミットします。つまり、@samp{--left-right`で `<}
と印されるのだけか、あるいは`--left-right`で`>`と印されるものだけです。

たとえば、@samp{--cherry-pick --right-only
A...B`は、`A`にある、または`A`のコミットとパッチと同等のコミットを`B`から省略します。つまり、これは`git cherry A
B`からの}+@samp{コミットをリストします。より正確に書くと、}--cherry-pick --right-only
--no-merges`により正確なリストを提供します。

@item  @samp{--cherry} 
`--right-only --cherry-mark
--no-merges`の同義語です。出力を私たちの側のコミットに制限し、フォークされた履歴の反対の側に適用されたものを、`git cherry
upstream mybranch`と同様に`git log --cherry upstream…mybranch`で印するのに役立ちます。

@item  @samp{-g} 
@itemx  @samp{--walk-reflogs} 
コミットの祖先チェーンをたどる代わりに、reflogエントリを最新のものから古いものに移動します。このオプションを使用する場合、除外するコミットを指定することはできません(つまり、'^commit’や'commit1..commit2’や'commit1...commit2’表記は使用できません)。

(明らかな理由で、)@samp{oneline`と`reference`以外の}--pretty`形式では、これにより、出力にreflogから取得された2行の追加情報が含まれます。出力のreflog指定子は、@samp{ref@@@{Nth@}}(@samp{Nth`はreflogの逆時系列インデックス(reverse-chronological
index))または`ref@@@{timestamp@}}(そのエントリのタイムスタンプ付き)として表示されます。表示は下記のいくつかのルールに依存します:

@enumerate 

@item
開始点が @samp{ref@@@{Nth@}} として指定されている場合は、インデックス形式を表示します。

@item
開始点が @samp{ref@@@{now@}} として指定されている場合は、タイムスタンプ形式を表示します。

@item
上記のどちらも使用されていないが、コマンドラインで`--date`が指定されている場合は、`--date`で要求された形式でタイムスタンプを表示します。

@item
それ以外の場合は、インデックス形式を表示します。
@end enumerate

@samp{--pretty =
oneline`では、コミットメッセージの前にこの情報が同じ行に付けられます。このオプションを}--reverse`と組み合わせることはできません。git-reflog(1)も参照してください。

`--pretty=reference`では、この情報はまったく表示されません。

@item  @samp{--merge} 
マージが失敗した後、競合があり、マージするすべてのheadに存在しないファイルに関連(touch)するrefを表示します。

@item  @samp{--boundary} 
除外された境界コミットを出力します。 境界コミットの前には `-`が付いています。
@end table

@noindent

@heading History Simplification

特定の<path>を変更するコミットなど、履歴の一部のみに関心がある場合があります。ただし、「履歴の簡略化」(History
Simplification)は2つの部分から成ります。履歴を簡略化するためにはさまざまな戦略があるためです。その1つはコミットの選択であり、もう1つはそれを行う方法です。

以下のオプションは、表示するコミットを選択します:

@table @asis

@item  <paths> 
指定された<パス>を変更するコミットが選択されます。

@item  @samp{--simplify-by-decoration} 
いくつかのブランチまたはタグによって参照されるコミットが選択されます。
@end table

注意: 意味のある重要な履歴のために、追加のコミットを表示できることに注意してください。

以下のオプションは、簡略化の実行方法に影響します。

@table @asis

@item  Default mode 
履歴を、ツリーの最終状態を説明する最も単純な履歴に単純化します。最終結果が同じである場合(つまり、同じコンテンツのブランチをマージする場合)、いくつかの傍流ブランチ(side
branches)を削除するため、最も単純です。

@item  @samp{--show-pulls} 
デフォルトモードからのすべてのコミットを含めますが、最初の親へのTREESAMEではなく、後の親へのTREESAMEであるマージコミットも含めます。このモードは、ブランチに変更を「最初に導入した」マージコミットを表示するのに役立ちます。(訳注:TREESAME=pathspecが全く同一であるツリー)

@item  @samp{--full-history} 
デフォルトモードと同じですが、一部の履歴を削除しません。

@item  @samp{--dense} 
選択したコミットのみが表示され、重大で意味のある履歴を持つコミットもいくつか表示されます。

@item  @samp{--sparse} 
簡略化された履歴内のすべてのコミットが表示されます。

@item  @samp{--simplify-merges} 
このマージに寄与する選択されたコミットがないため、結果の履歴からいくつかの不要なマージを削除するための`--full-history`への追加オプション。

@item  @samp{--ancestry-path} 
表示するコミットの範囲が指定されている場合(たとえば、@emph{commit1..commit2’または’commit2 ^commit1})、
@emph{commit1} と @emph{commit2} の間の祖先チェーンに直接存在するコミットのみ、つまり、 @emph{commit1} の子孫であり、
@emph{commit2} の祖先であるコミットを表示します。
@end table

より詳細な説明は以下のとおりです。

<paths> として @samp{foo} を指定したとします。 @samp{foo} !TREESAME
を変更するコミットを呼び出し、残りをTREESAMEと呼びます。( @samp{foo}
のためにフィルタリングされた差分では、それぞれ異なって見えたりたり等しく見えたりします。）

以下、簡略化設定の違いを説明するために、同じ履歴例を使います。このコミットグラフでは、ファイル @samp{foo} をフィルタリングしていると想定しています:

@example
          .-A---M---N---O---P---Q
         /     /   /   /   /   /
        I     B   C   D   E   Y
         \   /   /   /   /   /
          `-------------'   X
@end example


履歴 A---Q の水平線は、各マージの最初の親と見なされます。その各コミットは以下のとおりです:

@itemize 

@item
@samp{I} は最初のコミットであり、ファイル @samp{foo} が内容 “asdf” で存在し、ファイル @samp{quux} は内容 “quux”
で存在します。最初のコミットは空のツリーと比較されるため、@samp{I} は !TREESAME です。

@item
@samp{A} では、 @samp{foo} には “foo” だけが含まれています。

@item
@samp{B} には @samp{A} と同じ変更が含まれています。そのマージ @samp{M} は些細なことであり、したがってすべての親にとって TREESAME です。

@item
@samp{C} は @samp{foo} を変更しませんが、そのマージ @samp{N} はそれを “foobar” に変更するので、どの親にとっても TREESAME
ではありません。

@item
@samp{D} は @samp{foo} を “baz” に設定します。そのマージ @samp{O} は、 @samp{N} と @samp{D} から “foobarbaz”
への文字列を結合します。つまり、どの親にとっても TREESAME ではありません。

@item
@samp{E} は @samp{quux} を “xyzzy” に変更し、そのマージ @samp{P} は文字列を “quuxxyzzy” に結合します。 @samp{P} は
@samp{O} に対して TREESAME ですが、 @samp{E} に対してはそうではありません。

@item
@samp{X} は、新ファイル @samp{side} を追加し、 @samp{Y} がそれを変更した独立したルートコミットです。 @samp{Y} は @samp{X}
へのTREESAMEです。そのマージ @samp{Q} は @samp{P} に @samp{side} を追加し、 @samp{Q} は @samp{P} にはTREESAMEですが、@samp{Y}
に対してはそうではありません。
@end itemize

@samp{rev-list} は、 @samp{--full-history} および/または、( @samp{--parents} または @samp{--children}
を介して)親の書き換えが使用されているかどうかに基づいて、コミットを含めたり除外したりして、履歴を逆方向にウォークスルーします。以下の設定が可能です。

@table @asis

@item  Default mode 
コミットは、どの親に対してもTREESAMEでない場合に含まれます(これは変更できますが、以下の @samp{--sparse}
を参照してください)。コミットがマージであり、一方の親に対するTREESAMEであった場合は、その親のみをフォローします。(TREESAMEの親が複数ある場合でも、そのうちの1つだけをフォローします)。それ以外の場合は、すべての親をフォローします。

これにより、以下のようになります:

@example
          .-A---N---O
         /     /   /
        I---------D
@end example


TREESAMEの親のみに従うルールが利用可能な場合は、 @samp{B} を検討対象から完全に削除したことに注意してください。 @samp{C} は @samp{N}
を介して考慮されましたが、しかしそれはTREESAMEです。ルートコミットは空のツリーと比較されるため、 @samp{I} は !TREESAME です。

親子関係は @samp{--parents} でのみ表示されますが、デフォルトモードで選択されたコミットには影響しないため、親の行を示しました。

@item  @samp{--full-history without parent rewriting} 
このモードは、デフォルトとはある一点で異なります。つまり、いずれかの親に対してTREESAMEであっても、常にマージのすべての親に従います。マージの複数の側にコミットが含まれている場合でも、これはマージ自体が含まれていることを意味するものではありません！
例では以下のようになります。

@example
        I  A  B  N  D  O  P  Q
@end example


@samp{M} は、両方の親にとってTREESAMEであるため、除外されました。 @samp{E} と @samp{C} と @samp{B} をすべて巡りましたが、 @samp{B} だけが
!TREESAME だったので、他は表示されません。

注意:
親の書き換え(rewrite)がないと、コミット間の親子関係について話す(talk)ことは実際には不可能であるため、それらが切断されている(disconnected)ことを示していることに注意してください。

@item  @samp{--full-history with parent rewriting} 
通常のコミットは !TREESAME の場合にのみ含まれます(これは変更できますが、以下の @samp{--sparse} を参照してください)。

マージは常に含まれます。ただし、親リストは書き直されます。各親に沿って、自分自身に含まれていないコミットを削除します。 これにより以下のようになります。

@example
          .-A---M---N---O---P---Q
         /     /   /   /   /
        I     B   /   D   /
         \   /   /   /   /
          `-------------'
@end example


上記を書き直さずに @samp{--full-history} と比較してください。 @samp{E} はTREESAMEであるため削除されましたが、Pの親リストは @samp{E}
の親 @samp{I} を含むように書き直されていることに注意してください。 @samp{C} と @samp{N} および @samp{X} と @samp{Y} と @samp{Q}
についても同じことが起こりました。
@end table

上記の設定に加えて、あなたはTREESAMEが包含に影響を与えるかどうかを変更できます:

@table @asis

@item  @samp{--dense} 
巡ったコミットは、親にとってTREESAMEでない場合に含まれます。

@item  @samp{--sparse} 
巡ったすべてのコミットが含まれます。

@samp{--full-history}
がなくても、これによりマージが単純化されることに注意してください。親の1つがTREESAMEの場合、その1つだけに従うため、マージの反対側を巡ることはありません。

@item  @samp{--simplify-merges} 
最初に、親を書き換えた @samp{--full-history} と同じ方法で履歴グラフを作成します(上記を参照)。

それから、以下のルールに従って、各コミット @samp{C} を最終履歴内の置換 @samp{C'} に単純化します:

@itemize 

@item
@samp{C'} を @samp{C} にセットします。

@item
@samp{C'} の各親 @samp{P} をその簡略化された @samp{P'}
に置き換えます。その過程で、他の親の祖先であるか、ルートである親を削除すると、TREESAMEが空のツリーにコミットされ、重複が削除されますが、TREESAMEであるすべての親を削除しないように注意してください。

@item
この親の書き換え後、 @samp{C'} がルートまたはマージコミット(0または >1 の親を持つ)、境界コミット、または
!TREESAMEである場合、それは残ります。それ以外の場合は、唯一の親に置き換えられます。
@end itemize

この効果は、親の書き換えを使用した @samp{--full-history} と比較することで最もよく示されます。例は以下のようになります:

@example
          .-A---M---N---O
         /     /       /
        I     B       D
         \   /       /
          `---------'
@end example


注意: @samp{--full-history} に対する @samp{N} と @samp{P} と @samp{Q} の主な違いに注意してください:

@itemize 

@item
@samp{N} の親リストは、他の親 @samp{M} の祖先であるため、 @samp{I} が削除されました。それでも、 !TREESAME なので @samp{N} が残りました。

@item
@samp{P} の親リストも同様に @samp{I} が削除されました。 @samp{P} は、親が1つで TREESAMEであるため、完全に削除されました。

@item
@samp{Q} の親リストでは、 @samp{Y} が @samp{X} に簡略化されていました。その後、 @samp{X} はTREESAMEルートであったため、削除されました。 @samp{Q}
は、親が1つで TREESAMEであるため、完全に削除されました。
@end itemize
@end table

利用可能な別の簡略化モードがあります:

@table @asis

@item  @samp{--ancestry-path} 
表示されるコミットを、指定されたコミット範囲内の “from” コミットと “to”
コミットの間の祖先チェーンに直接あるコミットに制限します。つまり、 “to” コミットの祖先であるコミットと “from”
コミットの子孫であるコミットのみを表示します。

ユースケースの例として、以下のコミット履歴について考えます:

@example
            D---E-------F
           /     \       \
          B---C---G---H---I---J
         /                     \
        A-------K---------------L--M
@end example


通常の @emph{D..M} は、 @samp{M} の祖先であるコミットのセットを計算しますが、 @samp{D} の祖先であるコミットは除外します。 これは、「 @samp{M} には
@samp{D} には存在しなかったものがある」という意味で、 @samp{D} 以降の @samp{M`に至るまでの歴史に何が起こったのかを知るのに役立ちます。この例の結果は、
`A} と @samp{B} (そしてもちろん @samp{D} 自体)を除くすべてのコミットになります。

ただし、 @samp{M} のコミットが @samp{D} で入ったバグで汚染されており、修正が必要な場合は、実際には @samp{D} の子孫である @emph{D..M}
のサブセットのみを表示する必要があります。つまり、 @samp{C} と @samp{K} を除外します。これはまさに @samp{--ancestry-path}
オプションが行うことです。これを @emph{D..M} 範囲に適用すると、以下のようになります:

@example
                E-------F
                 \       \
                  G---H---I---J
                               \
                                L--M
@end example

@end table

別のオプション @samp{--show-pulls} について説明する前に、新しいサンプル履歴を作成する必要があります。

簡略化された履歴を見るときにユーザーが直面する一般的な問題は、ファイルを変更したことがわかっているコミットが、ファイルの簡略化された履歴に表示されないことです。そこで、新しい例を示し、その場合に
@samp{--full-history} や @samp{--simplify-merges} などのオプションがどのように機能するかを示しましょう。

@example
          .-A---M-----C--N---O---P
         /     / \  \  \/   /   /
        I     B   \  R-'`-Z'   /
         \   /     \/         /
          \ /      /\        /
           `---X--'  `---Y--'
@end example


この例では、 @samp{I} が @samp{file.txt} を作成し、それが @samp{A} と`B` と @samp{X}
にてさまざまな方法で変更されたとします。ひとり親のコミット @samp{C} と @samp{Z} と @samp{Y} は @samp{file.txt} を変更していません。マージコミット
@samp{M} は、マージの競合を解決して、 @samp{A} と @samp{B}
の両方の変更を含めることによって作成されたため、どちらにもTREESAMEではありません。ただし、マージコミット @samp{R} は、 @samp{M} の
@samp{file.txt`の内容を無視し、 `X} の @samp{file.txt} の内容のみを取得することによって作成されました。 したがって、 @samp{R} は
@samp{X} へのTREESAMEですが、 @samp{M} はそうではありません。最後に、 @samp{N} を作成するための自然なマージ解決は、 @samp{R} で
@samp{file.txt} の内容を取得することです。したがって、 @samp{N} は @samp{C} ではなく @samp{R} へのTREESAMEです。マージコミット @samp{O} と
@samp{P} は、最初の親にはTREESAMEですが、2番目の親である @samp{Z} と @samp{Y} にはついてはそうではありません。

デフォルトモードを使用する場合、 @samp{N} と @samp{R}
は両方ともTREESAMEの親を持っているため、これらのエッジはウォークされ、他のエッジは無視されます。結果の履歴グラフは以下のとおりです:

@example
        I---X
@end example


@samp{--full-history} を使用する場合、Gitはすべてのエッジを巡ります。これにより、コミット @samp{A} と @samp{B} と マージ @samp{M}
が検出されますが、マージコミット @samp{O} と @samp{P} も明らかになります。 親を書き換えると、結果のグラフは以下のようになります:

@example
          .-A---M--------N---O---P
         /     / \  \  \/   /   /
        I     B   \  R-'`--'   /
         \   /     \/         /
          \ /      /\        /
           `---X--'  `------'
@end example


ここで、マージコミット @samp{O} と @samp{P} は、実際には @samp{file.txt} への変更を提供しなかったため、余分なノイズを提供します。古いバージョンの
@samp{file.txt}
に基づいたトピックのみをマージしました。これは、多くの寄稿者が並行して作業し、トピックブランチを単一のトランクに沿ってマージするワークフローを使用するリポジトリの一般的な問題です。開発に関係のないマージが
@samp{--full-history} の結果に表示されます。

@samp{--simplify-merges} オプションを使用すると、コミット @samp{O} と @samp{P} が結果から消えます。 これは、 @samp{O} と @samp{P}
の書き直された2番目の親が、最初の親から到達可能であるためです。これらのエッジが削除されると、コミットは、親にとってTREESAMEである単一の親のコミットのように見えます。これはコミット
@samp{N} にも発生し、以下のような履歴ビューが表示されます:

@example
          .-A---M--.
         /     /    \
        I     B      R
         \   /      /
          \ /      /
           `---X--'
@end example


このビューでは、 @samp{A} と @samp{B} と @samp{X} からの重要なひとり親の変更がすべて表示されます。また、慎重に解決されたマージ @samp{M}
とそれほど慎重に解決されていないマージ @samp{R} も表示されます。これは通常、コミット @samp{A} と @samp{B}
がデフォルトのビューの履歴から「消えた」理由を判断するのに十分な情報です。ただし、このアプローチにはいくつかの問題があります。

最初の問題はパフォーマンスです。以前のオプションとは異なり、 @samp{--simplify-merges}
オプションでは、単一の結果を返す前にコミット履歴全体をウォークする必要があります。これにより、非常に大規模なリポジトリでこのオプションを使用するのが難しくなる可能性があります。

2番目の問題は監査の1つです。多くの寄稿者が同じリポジトリで作業している場合、どのマージコミットが重要なブランチに変更を導入したかが重要です。上記の問題のあるマージ
@samp{R} は、重要なブランチにマージするために使用されたマージコミットではない可能性があります。 代わりに、マージ @samp{N} を使用して @samp{R} と @samp{X}
を重要なブランチにマージしました。このコミットには、変更 @samp{X} がコミットメッセージの @samp{A} と @samp{B}
からの変更を上書きするようになった理由に関する情報が含まれている可能性があります。

@table @asis

@item  @samp{--show-pulls} 
デフォルトの履歴に表示されるコミットに加えて、最初の親にはTREESAMEではなく、後の親にはTREESAMEである各マージコミットを表示します。

マージコミットが @samp{--show-pulls} に含まれている場合、マージは別のブランチから変更を「プル」したかのように扱われます。この例で
@samp{--show-pulls} を使用すると(他のオプションは使用しない場合、)結果のグラフは行かのようになります:

@example
        I---X---R---N
@end example


ここで、コミット @samp{X} と @samp{R} をそれぞれベースブランチにプルしたため、マージコミット @samp{R} と @samp{N}
が含まれています。これらのマージは、コミット @samp{A} と @samp{B} がデフォルトの履歴に表示されない理由です。

@samp{--show-pulls} が @samp{--simplify-merges} とペアになっている場合、グラフには必要なすべての情報が含まれます:

@example
          .-A---M--.   N
         /     /    \ /
        I     B      R
         \   /      /
          \ /      /
           `---X--'
@end example


@samp{M} は @samp{R} から到達可能であるため、 @samp{N} から @samp{M} へのエッジが単純化されていることに注意してください。ただし、 @samp{N} は、変更
@samp{R} をメインブランチに「プル」したため、重要なコミットとして履歴に表示されます。
@end table

@samp{--simplify-by-decoration}
オプションを使用すると、タグで参照されていないコミットを省略して、履歴のトポロジの全体像のみを表示できます。コミットは、(1)タグによって参照されている場合、または
(2)コマンドラインで指定されたパスの内容を変更した場合に、!TREESAMEとしてマークされます(つまり、上記の履歴簡略化ルールの後に保持されます)。他のすべてのコミットはTREESAMEとしてマークされます(簡略化される可能性があります)。

@noindent

@chapheading MAPPING AUTHORS

See gitmailmap(5).

注意: (標準入力でログの内容を処理するため) @samp{git shortlog} がリポジトリの外部で実行される場合、現在のディレクトリで
@samp{.mailmap} ファイルが検索されることに注意してください。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-show-branch,,,Top
@chapheading Name

git-show-branch — ブランチとそのコミットを表示します

@noindent

@chapheading Synopsis

@display
git show-branch [-a|--all] [-r|--remotes] [--topo-order | --date-order]
                [--current] [--color[=<when>] | --no-color] [--sparse]
                [--more=<n> | --list | --independent | --merge-base]
                [--no-name | --sha1-name] [--topics]
                [(<rev> | <glob>)…]
git show-branch (-g|--reflog)[=<n>[,<base>]] [--list] [<ref>]
@end display


@noindent

@chapheading DESCRIPTION

<rev> または <glob> (または、 refs/heads および/または refs/tags
の下のすべてのref)で名前が付けられたコミットから始まるコミットの祖先グラフを半視覚的に表示します。

一度に29を超えるブランチとコミットを表示することはできません。

コマンドラインで <rev> または <glob> が指定されていない場合は、 @samp{showbranch.default}
の複数値(multi-valued)の構成アイテムを使用します。

@noindent

@chapheading OPTIONS

@table @asis

@item  <rev> 
通常はブランチヘッドまたはタグに名前を付ける任意の拡張SHA-1式 (gitrevisions(7) 参照)。

@item  <glob> 
refs/ の下のブランチ名またはタグ名に一致するグロブパターン。 たとえば、 refs/heads/topic
の下に多くのトピックブランチがある場合、 @samp{topic/*} を指定するとそれらすべてが表示されます。

@item  @samp{-r} 
@itemx  @samp{--remotes} 
リモート追跡ブランチを表示します。

@item  @samp{-a} 
@itemx  @samp{--all} 
リモート追跡ブランチとローカルブランチの両方を表示します。

@item  @samp{--current} 
このオプションを使用すると、コマンドラインに指定されていない場合に表示されるrevのリストに現在のブランチが含まれます。

@item  @samp{--topo-order} 
デフォルトでは、ブランチとそのコミットは新しい順に表示されます。このオプションを使用すると、トポロジカル順に表示されます(つまり、子孫のコミットは親の前に表示されます)。

@item  @samp{--date-order} 
このオプションは、すべての子の前に親が来ないという意味で @samp{--topo-order}
に似ていますが、それ以外の場合、コミットはコミット日に従って順序付けられます。

@item  @samp{--sparse} 
デフォルトでは、出力には、表示されている1つの先端からのみ到達可能なマージが省略されています。このオプションにより、それらが表示されます。

@item  @samp{--more=<n>} 
通常、コマンドは、すべてのブランチの共通の祖先であるコミットを表示すると出力を停止します。このフラグは、それを超えて共通のコミットを <n>
回表示するようコマンドに指示します。 <n>が負の場合、コミットの祖先ツリーを表示せずに、指定された<reference>のみを表示します。

@item  @samp{--list} 
@samp{--more=-1} と同義です。

@item  @samp{--merge-base} 
コミットリストを表示する代わりに、指定されたコミットの可能なマージベースを決定します。すべてのマージベースは、指定されたすべてのコミットに含まれます。
これは、 git-merge-base(1) が3つ以上のコミットの場合を処理する方法とは異なります。

@item  @samp{--independent} 
与えられた <reference> のうち、他の <reference> から到達できないもののみを表示します。

@item  @samp{--no-name} 
各コミットの名前付け文字列(naming strings)を表示しません。

@item  @samp{--sha1-name} 
ヘッドからコミットに到達するためのパスを使用してコミットに名前を付ける代わりに(たとえば、「master」の祖父母を意味する「master~2」)、オブジェクト名の一意のプレフィックスを使用してコミットに名前を付けます。

@item  @samp{--topics} 
指定された最初のブランチにないコミットのみを表示します。これは、すでに開発のメインラインにあるコミットを非表示にすることで、トピックブランチを追跡するのに役立ちます。
@samp{git show-branch --topics master topic1 topic2} を指定すると、 @samp{git rev-list
@{caret@}master topic1 topic2} で指定されたリビジョンが表示されます。

@item  @samp{-g} 
@itemx  @samp{--reflog[=<n>[,<base>]] [<ref>]} 
指定された参照の最新の参照ログエントリを<n>個表示します。<base>が指定されている場合、<n>エントリはそのエントリから戻ります。
<base>は、カウントまたは日付として指定できます。
明示的な<ref>パラメータが指定されていない場合、デフォルトで現在のブランチ(またはデタッチされている場合は @samp{HEAD} )になります。

@item  @samp{--color[=<when>]} 
所属するブランチに対応する各コミットのステータス記号(@samp{*} @samp{！} @samp{+} @samp{-} )に色を付けます。値は always (デフォルト) または
never または auto である必要があります。

@item  @samp{--no-color} 
構成ファイルでデフォルトのカラー出力が指定されている場合でも、カラー出力をオフにします。 @samp{--color=never} と同じです。
@end table

@samp{--more@@ と `-list} と @samp{-independent} と @samp{--merge-base}
オプションは相互に排他的であることに注意してください。

@noindent

@chapheading OUTPUT

N <references> が与えられた場合、最初のN行はコミットメッセージからの各1行説明です。 $GIT_DIR/HEAD
が指すブランチヘッドには、アスタリスクの @samp{*} 文字が接頭辞として付けられ、他のヘッドには、 @samp{!} 文字が接頭辞として付けられます。

これらのN行に続いて、コミットごとに1行のログが表示され、N桁インデントされます。 コミットがI番目のブランチにある場合、I番目のインデント文字は
@samp{+} 記号を示します。それ以外の場合は、スペースが表示されます。 マージコミットは @samp{-}
記号で示されます。各コミットは、そのコミットに名前を付けるための拡張SHA-1として使用できる短い名前が表示されます。

以下の例は、「master」と「fixes」と「mhf」の3つのブランチを示しています:

@example
$ git show-branch master fixes mhf
* [master] Add 'git show-branch'.
 ! [fixes] Introduce "reset type" flag to "git reset"
  ! [mhf] Allow "+remote:local" refspec to cause --force when fetching.
---
  + [mhf] Allow "+remote:local" refspec to cause --force when fetching.
  + [mhf~1] Use git-octopus when pulling more than one heads.
 +  [fixes] Introduce "reset type" flag to "git reset"
  + [mhf~2] "git fetch --force".
  + [mhf~3] Use .git/remote/origin, not .git/branches/origin.
  + [mhf~4] Make "git pull" and "git fetch" default to origin
  + [mhf~5] Infamous 'octopus merge'
  + [mhf~6] Retire git-parse-remote.
  + [mhf~7] Multi-head fetch.
  + [mhf~8] Start adding the $GIT_DIR/remotes/ support.
*++ [master] Add 'git show-branch'.
@end example


これらの3つのブランチはすべて、共通のコミット[master]から分岐し、そのコミットメッセージは「Add 'git
show-branch'」です。「fixes」ブランチは、「gitreset」に「Resettype」フラグを導入するコミットを1つ追加します。「mhf」ブランチは、他の多くのコミットを追加します。
現在のブランチは「master」です。

@noindent

@chapheading EXAMPLES

プライマリブランチを @samp{refs/heads}
のすぐ下に置き、トピックブランチをそのサブディレクトリに保持する場合は、構成ファイルに以下の情報を含めると役立つ場合があります:

@example
[showbranch]
        default = --topo-order
        default = heads/*
@end example


これにより、追加のパラメータがない @samp{git show-branch}
は、プライマリブランチのみを表示します。さらに、トピックブランチにいる場合は、それも表示されます。

@example
$ git show-branch --reflog="10,1 hour ago" --list master
@end example


これは、1時間前の時点で先端から戻った10個のreflogエントリを示しています。 @samp{--list}
がない場合、出力には、これらのヒントがトポロジ的に相互にどのように関連しているかも示されます。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-show-index,,,Top
@chapheading Name

git-show-index — パックされたアーカイブインデックスを表示する

@noindent

@chapheading Synopsis

@display
git show-index [--object-format=<hash-algorithm>]
@end display


@noindent

@chapheading DESCRIPTION

標準入力から、(git-pack-objects(1) または git-index-pack(1)
で作成の)Gitパックファイルの、 @samp{.idx} ファイルを読み取り、その内容をダンプします。
出力は、行ごとに1つのオブジェクトで構成され、各行には2つまたは3つのスペースで区切られた複数列が含まれます:

@itemize 

@item
最初の列は、対応するパックファイル内のオブジェクトのバイト単位のオフセットです。

@item
2番目の列はオブジェクトのオブジェクトIDです

@item
インデックスバージョンが2以上の場合、3番目の列にはオブジェクトデータのCRC32が含まれます
@end itemize

オブジェクトは、インデックスファイルで見つかった順序で出力されます。(正しく作成されたファイルであれば、)インデックスファイルはオブジェクトIDソートされていなければなりません。

注意: あなたは git-verify-pack(1)
を呼び出すと、パックファイルに関する情報をよりたくさん取得できます。けれども、このコマンド(show-index)はインデックスファイル自体のみを考慮するため、より高速で柔軟性があります。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--object-format=<hash-algorithm>} 
インデックスファイルのためのオブジェクト形式(ハッシュアルゴリズム)を指定します。有効な値は @emph{sha1} および (有効な場合) @emph{sha256}
です。 デフォルトは、現在のリポジトリのアルゴリズム(@samp{extensions.objectFormat}
で設定)、または値が設定されていないかリポジトリの外部にある場合は @emph{sha1} です。

このオプションは実験的なものです！ SHA-256のサポートは実験的なものであり、まだ初期段階です。
SHA-256リポジトリは、通常、「通常の」SHA-1リポジトリと作業を共有できません。
たとえば、SHA-256リポジトリに関連するGit内部ファイル形式は、下位互換性のない方法で変更される可能性があると想定する必要があります。テスト目的でのみ
@samp{--object-format=sha256} を使用してください。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-show-ref,,,Top
@chapheading Name

git-show-ref — ローカルリポジトリ内の参照を一覧表示します

@noindent

@chapheading Synopsis

@display
git show-ref [-q|--quiet] [--verify] [--head] [-d|--dereference]
             [-s|--hash[=<n>]] [--abbrev[=<n>]] [--tags]
             [--heads] [--] [<pattern>…]
git show-ref --exclude-existing[=<pattern>]
@end display


@noindent

@chapheading DESCRIPTION

ローカルリポジトリで使用可能な参照を、関連するコミットIDとともに表示します。結果はパターンを使用してフィルタリングでき、タグはオブジェクトIDに逆参照できます。さらに、特定のrefが存在するかどうかをテストするために使用できます。

デフォルトでは、タグとヘッドとリモートrefを表示します。

@samp{--exclude-existing} 形式は、逆を行うフィルターです。
stdinから1行に1つのrefを読み取り、ローカルリポジトリに存在しないものを表示します。

@samp{.git} ディレクトリの下のファイルに直接アクセスするために、このユーティリティの使用をお勧めします。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--head} 
通常は検索除外される場合でも、HEAD参照を表示します。

@item  @samp{--heads} 
@itemx  @samp{--tags} 
それぞれ「refs/heads」と「refs/tags」に制限します。これらのオプションは相互に排他的ではありません。
両方を指定すると、「refs/heads」と「refs/tags」に保存されている参照が表示されます。

@item  @samp{-d} 
@itemx  @samp{--dereference} 
タグをオブジェクトIDにも逆参照します。 @samp{@{caret@}@{@}} が追加されて表示されます。

@item  @samp{-s} 
@itemx  @samp{--hash[=<n>]} 
参照名ではなく、SHA-1ハッシュのみを表示します。 @samp{--dereference}
と組み合わせると、逆参照されたタグがSHA-1の後に依然として表示されます。

@item  @samp{--verify} 
正確な参照パスを要求することにより、より厳密な参照チェックを有効にします。エラーコード1を返す以外に、 @samp{--quiet}
が指定されていない場合はエラーメッセージも出力します。

@item  @samp{--abbrev[=<n>]} 
オブジェクト名を省略します。 @samp{--hash} を使用する場合は @samp{--hash --abbrev} と言う必要はなく、 @samp{--hash=n}
で十分です。

@item  @samp{-q} 
@itemx  @samp{--quiet} 
結果をstdoutに出力しないでください。 @samp{--verify} と組み合わせると、参照が存在するかどうかをサイレントにチェックするために使用できます。

@item  @samp{--exclude-existing[=<pattern>]} 
"@samp{^(?:<anything>\s)?<refname>(?:\^@{@})?$}"
形式でstdinからrefを読み取り、そのそれぞれに対して以下のアクションを実行するフィルターとして @emph{git show-ref} を使います:
(1) 行末の @samp{@{caret@}@{@}} を削除します
(2) パターンが指定されていて、refnameとヘッドが一致(head-match)しない場合は無視
(3) refnameが整形式(well-formed)のrefnameでない場合は警告し、スキップします
(4) refnameがローカルリポジトリに存在するrefである場合は無視
(5) それ以外の場合は、行を出力します。

@item  <pattern>… 
1つ以上のパターンに一致する参照を表示します。パターンはフルネームの末尾から一致し、完全な部品のみが一致します。
「master」は「refs/heads/master」や「refs/remotes/origin/master」や「refs/tags/jedi/master」と一致しますが、「refs/heads/mymaster」とか「refs/remotes/master/jedi」とは一致しません
。
@end table

@noindent

@chapheading OUTPUT

出力形式: <SHA-1 ID><空白><参照名>

@example
$ git show-ref --head --dereference
832e76a9899f560a90ffd62ae2ce83bbeff58f54 HEAD
832e76a9899f560a90ffd62ae2ce83bbeff58f54 refs/heads/master
832e76a9899f560a90ffd62ae2ce83bbeff58f54 refs/heads/origin
3521017556c5de4159da4615a39fa4d5d2c279b5 refs/tags/v0.99.9c
6ddc0964034342519a87fe013781abf31c6db6ad refs/tags/v0.99.9c^@{@}
055e4ae3ae6eb344cbabf2a5256a49ea66040131 refs/tags/v1.0rc4
423325a2d24638ddcc82ce47be5e40be550f4507 refs/tags/v1.0rc4^@{@}
...
@end example


( @samp{--dereference} ではなく) @samp{--hash} を使用する場合の出力形式: <SHA-1 ID>

@example
$ git show-ref --heads --hash
2e3ba0114a1f52b47df29743d6915d056be13278
185008ae97960c8d551adcd9e23565194651b5d1
03adf42c988195b50e1a1935ba5fcbc39b2b029b
...
@end example


@noindent

@chapheading EXAMPLES

タグやヘッドなど、「master」と呼ばれるすべての参照を表示するには、参照の名前付け階層の深さに関係なく、以下を使用します:

@example
        git show-ref master
@end example


これには、「refs/heads/master」だけでなく、「refs/remote/other-repo/master」も表示されます(そのような参照が存在する場合)。

@samp{--verify} フラグを使用する場合、コマンドには正確なパスが必要です:

@example
        git show-ref --verify refs/heads/master
@end example


これは「master」と呼ばれる正確なブランチにのみ一致します。

一致するものがない場合、「git show-ref」はエラーコード1を返し、検証の場合はエラーメッセージを表示します。

スクリプトの場合は、 @samp{--quiet} フラグを使用して静かにするように要求できます。これにより、以下のようにできます

@example
        git show-ref --quiet --verify -- "refs/heads/$headname" ||
                echo "$headname is not a valid branch"
@end example


これは、特定のブランチが存在するかどうかを確認します(実際には結果を表示したくないので、あいまいな部分一致で問題が発生しないように、完全なrefnameを使用します)。

タグのみ、または適切なブランチヘッドのみを表示するには、それぞれ「--tags」かつ/または「--heads」を使用します(両方を使用すると、タグとヘッドが表示されますが、
refs/ サブディレクトリの下にある他のランダムな参照は表示されません)。

タグオブジェクトの自動逆参照を行うには、「-d」または「--dereference」フラグを使用して、以下のことができるようにします

@example
        git show-ref --tags --dereference
@end example


これは、すべてのタグのリストを、それらが逆参照するものと一緒に取得します。

@noindent

@chapheading FILES

@samp{.git/refs/*}, @samp{.git/packed-refs}

@noindent

@chapheading SEE ALSO

git-for-each-ref(1), git-ls-remote(1),
git-update-ref(1), gitrepository-layout(5)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-show,,,Top
@chapheading Name

git-show — さまざまなタイプのオブジェクトを表示

@noindent

@chapheading Synopsis

@display
git show [<options>] [<object>…]
@end display


@noindent

@chapheading DESCRIPTION

1つまたはそれ以上のオブジェクト(ブロブ・ツリー・タグ・コミット)を表示します。

コミットの場合、ログメッセージとテキストの差分が表示されます。 また、 @emph{git diff-tree --cc}
によって生成された特別な形式でマージコミットを示します。

タグの場合、タグメッセージと参照オブジェクトが表示されます。

ツリーの場合は、名前が表示されます(@samp{--name-only} オプション付きの @emph{git ls-tree} 相当)。

プレーンブロブの場合は、プレーンコンテンツが表示されます。

このコマンドは、「git diff-tree」コマンドに適用可能なオプションを使用して、コミットによって導入された変更の表示方法を制御します。

このマニュアルページでは、最も頻繁に使用されるオプションについてのみ説明します。

@noindent

@chapheading OPTIONS

@table @asis

@item  <object>… 
表示するオブジェクトの名前(デフォルトは「HEAD」)。オブジェクト名を綴る方法のより完全なリストについては、
gitrevisions(7) の「SPECIFYING REVISIONS」セクションを参照してください。

@item  @samp{--pretty[=<format>]} 
@itemx  @samp{--format=<format>} 
コミットログの内容を指定された形式できれいに印刷(pretty-print)します。 @emph{<format>} は
oneline・short・medium・full・fuller・reference・email・raw・format:<string>・tformat:<string>
のいずれかになります。 @emph{<format>} が上記のいずれでもなく、 @emph{%placeholder} が含まれている場合、
@emph{--pretty=tformat:<format>} が指定されたかのように動作します。

各フォーマットの詳細については、 "PRETTY FORMATS" セクションを参照してください。 @emph{=<format>}
の部分を省略すると、デフォルトで @emph{medium} になります。

注意: リポジトリー構成でデフォルトのpretty formatを指定できます(git-config(1) 参照)。

@item  @samp{--abbrev-commit} 
40バイトの16進コミットオブジェクト名全体を表示する代わりに、オブジェクトに一意の名前を付けるプレフィックスを表示します。
"--abbrev=<n>" (表示されている場合はdiff出力も変更します)オプションを使用して、プレフィックスの最小長を指定できます。

これにより、80桁幅の端末を使用している人にとって "--pretty=oneline" がずっと読みやすくなるはずです。

@item  @samp{--no-abbrev-commit} 
完全な40バイトの16進コミットオブジェクト名を表示します。 これにより、明示的または "--oneline"
などの他のオプションによって暗黙的に示される @samp{--abbrev-commit} が無効になります。また、 @samp{log.abbrevCommit}
変数をオーバーライドします。

@item  @samp{--oneline} 
これは、 "--pretty=oneline --abbrev-commit" を一緒に使用するための省略形です。

@item  @samp{--encoding=<encoding>} 
コミットオブジェクトは、ログメッセージに使用される文字エンコードをエンコードヘッダーに記録します。このオプションを使用して、ユーザーが好むエンコーディングでコミットログメッセージを再コーディングするようにコマンドに指示できます。配管以外のコマンドの場合、これはデフォルトでUTF-8になります。オブジェクトが
@samp{X} でエンコードされていると主張し、 @samp{X}
で出力している場合、オブジェクトをそのまま出力することに注意してください。これは、元のコミットの無効なシーケンスが出力にコピーされる可能性があることを意味します。同様に、
iconv(3) コミットの変換に失敗した場合、警告とともに元のオブジェクトをそのまま出力します。

@item  @samp{--expand-tabs=<n>} 
@itemx  @samp{--expand-tabs} 
@itemx  @samp{--no-expand-tabs} 
出力に表示する前に、ログメッセージでタブ展開を実行します(タブ幅を <n> とみなして <n> 境界に揃うように空白で調整する)。
@samp{--expand-tabs} は @samp{--expand-tabs=8} の省略形であり、 @samp{--no-expand-tabs} は
@samp{--expand-tabs=0} の省略形です。タブの展開を無効にします。

デフォルトでは、タブはログメッセージを4つのスペースでインデントするきれいな形式(pretty formats)で展開されます(つまり、デフォルトの
@emph{medium} と’full' と @emph{fuller})。

@item  @samp{--notes[=<ref>]} 
コミットログメッセージを表示するときに、コミットに注釈を付けるnotes(git-notes(1)
参照)を表示します。これは、コマンドラインに @samp{--pretty} 、@samp{--format} または @samp{--oneline}
オプションが指定されていない場合の、 @samp{git log} と @samp{git show} と ` git whatchanged` コマンドのデフォルトです。

デフォルトでは、表示されるnotesは、 @samp{core.notesRef} および @samp{notes.displayRef}
変数(または対応する環境変数オーバーライド)にリストされているnote refからのものです。詳細については git-config(1)
を参照してください。

オプションの @emph{<ref>} 引数を使用して、refを使用して表示するnotesを検索します。 refは、 @samp{refs/notes/}
で始まる完全なrefnameを指定できます。 @samp{notes/} で始まるか、 @samp{refs/} で始まるか、それ以外で始まる場合、
@samp{refs/notes/} が接頭辞として付けられ、refのフルネームを形成します。

複数の --notes オプションを組み合わせて、表示するノートを制御できます。 例: "--notes=foo" は "refs/notes/foo"
からのnotesのみを表示します。 "--notes=foo --notes" は、 "refs/notes/foo" とデフォルトのnotes
ref(s) の両方のnotesを表示します。

@item  @samp{--no-notes} 
notesを表示しないでください。 これは、notesが表示されるnotes refのリストをリセットすることにより、上記の @samp{--notes}
オプションを無効にします。 オプションは、コマンドラインで指定された順序で解析されます。 "--notes --notes=foo --no-notes
--notes=bar" は、 "refs/notes/bar" からのnotesのみを表示します。

@item  @samp{--show-notes[=<ref>]} 
@itemx  @samp{--[no-]standard-notes} 
これらのオプションは非推奨です。 代わりに、上記の --notes/--no-notes オプションを使用してください。

@item  @samp{--show-signature} 
署名を @samp{gpg --verify} に渡して、署名されたコミットオブジェクトの有効性を確認し、出力を表示します。
@end table

@noindent

@chapheading PRETTY FORMATS

コミットがマージであり、 pretty-format が @emph{oneline} または @emph{email} または @emph{raw} でない場合、
@emph{Author:} 行の前に追加の行が挿入されます。この行は "Merge: "
で始まり、先祖のコミットのハッシュがスペースで区切られて出力されます。履歴の表示を制限している場合、たとえば、特定のディレクトリまたはファイルに関連する変更のみに関心がある場合、リストされたコミットは必ずしも
@strong{直接} の親コミットのリストではない可能性があることに注意してください。

いくつかの組み込みフォーマットがあります。そして以下で説明するように、 pretty.<name> 構成オプション(config
option)を別のフォーマット名または @emph{format:}
文字列に設定することで、追加のフォーマットを定義できます(git-config(1)
参照)。組み込みフォーマットの詳細は以下のとおりです:

@itemize 

@item
@emph{oneline}

@example
<hash> <title line>
@end example

これは、可能な限りコンパクトになるように設計されています。

@item
@emph{short}

@example
commit <hash>
Author: <author>
@end example

@example
<title line>
@end example

@item
@emph{medium}

@example
commit <hash>
Author: <author>
Date:   <author date>
@end example

@example
<title line>
@end example

@example
<full commit message>
@end example

@item
@emph{full}

@example
commit <hash>
Author: <author>
Commit: <committer>
@end example

@example
<title line>
@end example

@example
<full commit message>
@end example

@item
@emph{fuller}

@example
commit <hash>
Author:     <author>
AuthorDate: <author date>
Commit:     <committer>
CommitDate: <committer date>
@end example

@example
<title line>
@end example

@example
<full commit message>
@end example

@item
@emph{reference}

@example
<abbrev hash> (<title line>, <short author date>)
@end example

この形式は、コミットメッセージ内の別のコミットを参照するために使用され、 @samp{--pretty='format:%C(auto)%h (%s,
%ad)'} と同じです。 デフォルトでは、別の @samp{--date} オプションが明示的に指定されていない限り、日付は @samp{--date=short}
でフォーマットされます。formatプレースホルダーを使用する他の @samp{format:} と同様に、その出力は、 @samp{--decorate} や
@samp{--walk-reflogs} などの他のオプションの影響を受けません。

@item
@emph{email}

@example
From <hash> <date>
From: <author>
Date: <author date>
Subject: [PATCH] <title line>
@end example

@example
<full commit message>
@end example

@item
@emph{mboxrd}

@emph{email} と同様ですが、コミットメッセージの "From " で始まる行(前に0個以上の ">" が付いている)は ">"
でクォートされているため、新しいコミットの開始と混同されることはありません。

@item
@emph{raw}

@emph{raw} 形式は、コミットオブジェクトに格納されているとおりにコミット全体を正確に表示します。とりわけ --abbrev または
--no-abbrev
のどちらが使用されているかに関係なく、ハッシュは完全に表示され、「親」(parents)情報は、移植や履歴の単純化を考慮せずに、真の親のコミットを示します。この形式は、コミットの表示方法に影響しますが、いわゆる
@samp{git log --raw} の差分の表示方法ではありません。生のdiff形式で完全なオブジェクト名を取得するには、 @samp{--no-abbrev}
を使用します。

@item
@emph{format:<string>}

@emph{format:<string>} 形式を使用すると、表示する情報を指定できます。注意: これはprintf書式に少し似ていますが、 @emph{\n}
の代わりに @emph{%n} を使用して改行を取得するという例外に注意してください。

例:  @emph{format:"The author of %h was %an, %ar%nThe title was >>%s<<%n"}
は以下のように表示されます:

@example
The author of fe6e0ee was Junio C Hamano, 23 hours ago
The title was >>t4119: test autocomputing -p<n> for traditional diff input.<<
@end example


さて、以下がプレースホルダー達です:

@itemize 

@item
単一のリテラル文字に展開されるプレースホルダー:

@table @asis

@item  @emph{%n} 
改行(newline)

@item  @emph{%%} 
'%'そのもの

@item  @emph{%x00} 
16進数のバイト値を出力
@end table

@item
うしろのプレースホルダーのフォーマッティングに影響するプレースホルダー:

@table @asis

@item  @emph{%Cred} 
赤色に切り替える

@item  @emph{%Cgreen} 
緑色に切り替える

@item  @emph{%Cblue} 
青色に切り替える。

@item  @emph{%Creset} 
色をリセットする

@item  @emph{%C(…)} 
git-config(1) の "CONFIGURATION FILE" 節の Values で説明されている色の指定。
デフォルトでは、色はログ出力が有効になっている場合にのみ表示されます（ @samp{color.diff} または ` color.ui` または
@samp{--color`によって、ターミナルに行く場合は前者の `auto} 設定を尊重します)。 @samp{%C(auto,...)} は、 default
の歴史的同義語として受け入れられます(例: @samp{%C(auto,red)})。 @samp{%C(always,...)}
を指定すると、色が有効になっていない場合でも色が表示されます(この形式やgitが色付けする可能性のある他のすべてのものを含め、出力全体の色を有効にするために
@samp{--color = always} の使用を検討してください)。 @samp{auto} のみ(つまり、 @samp{%C(auto)}
)は、色が再び切り替わるまで、続くプレースホルダーで自動色付けをオンにします。

@item  @emph{%m} 
左(@samp{<}) または 右(@samp{>}) または 境界 (@samp{-}) の印

@item  @emph{%w([<w>[,<i1>[,<i2>]]])} 
git-shortlog(1) の -w オプションのように、
行の折り返しを切り替えます。

@item  @emph{%<(<N>[,trunc|ltrunc|mtrunc])} 
次のプレースホルダーに少なくともN列を使用させ、
必要に応じて右側にスペースを埋め込みます。オプションで、出力がN列より長い場合は、先頭(ltrunc)または中間(mtrunc)または末尾(trunc)で切り捨てます。注意:
切り捨ては、 N >= 2 でのみ正しく機能することに注意してください。

@item  @emph{%<|(<N>)} 
次のプレースホルダーを少なくともN番目の列まで取得し、
必要に応じて右側にスペースを埋め込みます

@item  @emph{%>(<N>)}, @emph{%>|(<N>)} 
それぞれ @emph{%<(<N>)} 、 @emph{%<|(<N>)} に似ていますが、
左側にスペースが埋め込まれています

@item  @emph{%>>(<N>)}, @emph{%>>|(<N>)} 
@emph{%>(<N>)} 、 @emph{%>|(<N>)} とそれぞれ似ていますが、
次のプレースホルダーが指定されたよりも多くのスペースを取り、その左側にスペースがある場合は、それらのスペースを使用します。

@item  @emph{%><(<N>)}, @emph{%><|(<N>)} 
それぞれ @emph{%<(<N>)} 、 @emph{%<|(<N>)} に似ていますが、
両側にパディングがあります(つまり、テキストが中央に配置されます)
@end table

@item
コミットから抽出された情報に展開するプレースホルダー:

@table @asis

@item  @emph{%H} 
コミットハッシュ

@item  @emph{%h} 
省略されたコミットハッシュ

@item  @emph{%T} 
ツリーハッシュ

@item  @emph{%t} 
省略されたツリーハッシュ

@item  @emph{%P} 
親のハッシュ達

@item  @emph{%p} 
省略された親のハッシュ達

@item  @emph{%an} 
作者名

@item  @emph{%aN} 
作者名( .mailmap に関しては、git-shortlog(1) または
git-blame(1) を参照)

@item  @emph{%ae} 
作者電子メールアドレス

@item  @emph{%aE} 
作者電子メールアドレス(.mailmap に関しては git-shortlog(1) または
git-blame(1) を参照)

@item  @emph{%al} 
作者電子メールアドレスアカウント名(local-part)( @emph{@@} の前の部分)

@item  @emph{%aL} 
作者電子メールアドレスアカウント名(local-part)(@emph{%al} 参照) .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%ad} 
作成日(フォーマットに関しては --date= オプション参照)

@item  @emph{%aD} 
作成日 RFC2822形式

@item  @emph{%ar} 
作成日 相対(relative)形式

@item  @emph{%at} 
作成日 UNIXタイムスタンプ形式

@item  @emph{%ai} 
作成日 ISO 8601風形式

@item  @emph{%aI} 
作成日 厳密なISO 8601形式

@item  @emph{%as} 
作成日 短い形式(@samp{YYYY-MM-DD})

@item  @emph{%ah} 
作成日 human形式( git-rev-list(1) の @samp{--date=human}
オプションのようなかんじ)

@item  @emph{%cn} 
コミッター名

@item  @emph{%cN} 
コミッター名( .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%ce} 
コミッター電子メールアドレス

@item  @emph{%cE} 
コミッター電子メールアドレス(.mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%cl} 
コミッター電子メールアドレスアカウント名(local-part)( @emph{@@} の前の部分)

@item  @emph{%cL} 
コミッター電子メールアドレスアカウント名(local-part)( @emph{%cl} 参照) .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%cd} 
コミッター日付(フォーマットに関しては --date= オプション参照)

@item  @emph{%cD} 
コミッター日付 RFC2822形式

@item  @emph{%cr} 
コミッター日付 相対(relative)形式

@item  @emph{%ct} 
コミッター日付 UNIXタイムスタンプ形式

@item  @emph{%ci} 
コミッター日付 ISO 8601風形式

@item  @emph{%cI} 
コミッター日付 厳密なISO 8601形式

@item  @emph{%cs} 
コミッター日付 短い形式(@samp{YYYY-MM-DD})

@item  @emph{%ch} 
コミッター日付 human形式(git-rev-list(1) の @samp{--date=human}
オプションのようなかんじ)

@item  @emph{%d} 
ref名 git-log(1) の --decorate オプションみたいなの

@item  @emph{%D} 
" (", ")" で囲ってないref名

@item  @emph{%(describe[:options])} 
git-describe(1) のような人間が読める名前。
説明できないコミットの場合は空の文字列。 @samp{describe}
文字列の後には、コロンと0個以上のカンマ区切りオプションを続けることができます。タグが同時に追加または削除されると、説明に一貫性がなくなる可能性があります。

@itemize 

@item
@emph{match=<pattern>}:  "refs/tags/" プレフィックスを除いて、指定された @samp{glob(7)}
パターンに一致するタグのみを考慮します。

@item
@emph{exclude=<pattern>}: "refs/tags/" プレフィックスを除いて、指定された @samp{glob(7)}
パターンに一致するタグを考慮しないでください。
@end itemize

@item  @emph{%S} 
コミットに到達したコマンドラインで指定されたref名
( @samp{git log --source} など)は、 @samp{git log} でのみ機能します

@item  @emph{%e} 
エンコーディング

@item  @emph{%s} 
件名(subject)

@item  @emph{%f} 
ファイル名に適した、サニタイズされた件名

@item  @emph{%b} 
本文(body)

@item  @emph{%B} 
生本文(raw body)(ラップされてない件名と本文)

@item  @emph{%N} 
コミットノート(commit notes)

@item  @emph{%GG} 
署名されたコミットの為のGPSからの生の検証メッセージ

@item  @emph{%G?} 
良い(good)な(有効な)署名の場合は "G" 、
悪い(bad)な署名の場合は "B" 、有効性が不明(unknown)な良い署名の場合は "U" 、期限切れ(eXpired)の良い署名の場合は "X"
、期限切れのキーで作成された良い署名の場合は "Y" 、取り消されたキーによって作成された良い署名の場合は "R"
、署名を確認できない場合(キーの欠落など)は "E" 、署名がない場合は "N" を表示します。

@item  @emph{%GS} 
署名されたコミットの署名者の名前を表示する

@item  @emph{%GK} 
署名されたコミットに署名するために使用されるキーを表示する

@item  @emph{%GF} 
署名されたコミットに署名するために使用されるキーのフィンガープリントを表示する

@item  @emph{%GP} 
署名されたコミットに署名するためにサブキーが使用された
主キーのフィンガープリントを表示します

@item  @emph{%GT} 
署名されたコミットに署名するために使用されるキーの信頼レベル(trust level)を表示します

@item  @emph{%gD} 
reflogセレクター(例:@samp{refs/stash@@@{1@}} or @samp{refs/stash@@@{2 minutes ago@}})
この形式は、 @samp{-g} オプションで説明されている規則に従います。 @samp{@@} の前の部分は、コマンドラインで指定されたrefnameです(したがって、
@samp{git log -g refs/heads/master} は @samp{refs/heads/master@@@{0@}} を生成します)。

@item  @emph{%gd} 
短縮されたreflogセレクター。 @samp{%gD} と同じですが、
人間が読みやすいようにrefname部分が短縮されています(したがって、 @samp{refs/heads/master} は単に @samp{master}
になります)。

@item  @emph{%gn} 
reflog ID名

@item  @emph{%gN} 
reflog ID名( .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%ge} 
reflog ID 電子メールアドレス

@item  @emph{%gE} 
reflog ID 電子メールアドレス( .mailmap に関しては
git-shortlog(1) または git-blame(1) 参照)

@item  @emph{%gs} 
reflog 件名

@item  @emph{%(trailers[:options])} 
git-interpret-trailers(1) によって解釈されるようにボディのトレーラーを表示します。
@samp{trailers}
文字列の後には、コロンと0個以上のカンマ区切りオプションを続けることができます。いずれかのオプションが複数回提供された場合、それぞれ最後のものが優先されます。

ブール値オプションは、オプションの値 @samp{[=<BOOL>]} を受け入れます。 値 @samp{true} 、@samp{false} 、 @samp{on} 、@samp{off}
などはすべて受け入れられます。 git-config(1) の "EXAMPLES" の "boolean"
サブセクションを参照してください。ブール値オプションが値なしで指定された場合、それは有効を指定した事になります。

@itemize 

@item
@emph{key=<K>}
は指定されたキーを持つトレーラーのみを表示します。マッチングは大文字と小文字を区別せずに行われ、末尾のコロンはオプションです。オプションが複数回指定されている場合、いずれかのキーに一致するトレーラー行が表示されます。このオプションは自動的に
@samp{only} オプションを有効にして、トレーラーブロック内の非トレーラー行が非表示になるようにします。それが望ましくない場合は、
@samp{only=false} で無効にすることができます。 たとえば、 @samp{%(trailers:key=Reviewed-by)} は、キーが
`Reviewed-by`のトレーラー行を表示します。

@item
@emph{only[=<BOOL>]} はトレーラーブロックに非トレーラー行を含めるかどうかを選択します。

@item
@emph{separator=<SEP>}
はトレーラー行の間に挿入される区切り文字を指定します。このオプションが指定されていない場合、各トレーラー行は改行文字で終了します。文字列SEPには、上記のリテラルフォーマットコードが含まれる場合があります。区切り文字としてコンマを使用するには、次のオプションとして解析されないよう
@samp{%x2C} を使用する必要があります。 たとえば、 %(trailers:key=Ticket,separator=%x2C )` は、キーが
"Ticket" であるすべてのトレーラー行をカンマとスペースで区切って表示します。

@item
@emph{unfold[=<BOOL>]} は interpret-trailer の @samp{--unfold}
オプションが指定されたかのように動作させます。たとえば、 @samp{%(trailers:only,unfold=true)}
が展開され、すべてのトレーラー行が表示されます。

@item
@emph{keyonly[=<BOOL>]} トレーラーのキー部分のみを表示。

@item
@emph{valueonly[=<BOOL>]} トレーラーの値部分のみ表示。

@item
@emph{key_value_separator=<SEP>}
トレーラー行の間に挿入される区切り文字を指定します。このオプションが指定されていない場合、各トレーラーのキーと値のペアは ": " で区切られます。
それ以外の場合は、上記の @emph{separator=<SEP>} と同じセマンティクスを共有します。
@end itemize
@end table
@end itemize
@end itemize

@quotation

@strong{Note}

一部のプレースホルダーは、リビジョントラバーサルエンジンに指定された他のオプションに依存する場合があります。 たとえば、 @samp{%g*}
reflogオプションは、reflogエントリをトラバースしない限り(たとえば、 @samp{git log
-g`によって)空の文字列を挿入します。コマンドラインで `--decorate} がまだ指定されていない場合、 @samp{%d} と @samp{%D}
プレースホルダーは「短い」(short)装飾形式を使用します。
@end quotation

プレースホルダーの @emph{%} の後に @samp{+}
(プラス記号)を追加すると、プレースホルダーが空でない文字列に展開される場合に限り、展開の直前に改行が挿入されます。

プレースホルダーの @emph{%} の後に @samp{-}
(マイナス記号)を追加すると、プレースホルダーが空の文字列に展開された場合にのみ、展開の直前の連続するすべての改行が削除されます。

プレースホルダーの @emph{%} の後に ` `
(スペース)を追加すると、プレースホルダーが空でない文字列に展開される場合に限り、展開の直前にスペースが挿入されます。

@itemize 

@item
@emph{tformat:}

@emph{tformat:} 形式は、 "separator" セマンティクスの代わりに "terminator" セマンティクスを提供することを除いて、
@emph{format:} とまったく同じように機能します。
つまり、各コミットには、エントリ間に区切り文字を配置するのではなく、メッセージターミネータ文字(通常は改行)が追加されます。
これは、「1行」形式と同様に、1行形式の最終エントリが新しい行で適切に終了することを意味します。 例えば:

@example
$ git log -2 --pretty=format:%h 4da45bef \
  | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
4da45be
7134973 -- NO NEWLINE

$ git log -2 --pretty=tformat:%h 4da45bef \
  | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
4da45be
7134973
@end example


加えて、 @samp{%} が含まれている認識されない文字列は、その前に @samp{tformat:} があるかのように解釈(interpret)されます。
たとえば、以下の2つは同等です:

@example
$ git log -2 --pretty=tformat:%h 4da45bef
$ git log -2 --pretty=%h 4da45bef
@end example

@end itemize

@noindent

@chapheading DIFF FORMATTING

以下のオプションを使用して、 @samp{git show} がdiff出力を生成する方法を変更できます。

@table @asis

@item  @samp{-p} 
@itemx  @samp{-u} 
@itemx  @samp{--patch} 
パッチを生成します(generating patches に関するセクションを参照)。

@item  @samp{-s} 
@itemx  @samp{--no-patch} 
diff出力を抑制します。デフォルトでパッチを表示する @samp{git show} のようなコマンド、または @samp{--patch}
の効果をキャンセルする場合に便利です。

@item  @samp{--diff-merges=(off|none|on|first-parent|1|separate|m|combined|c|dense-combined|cc)} 
@itemx  @samp{--no-diff-merges} 
マージコミットに使用するdiff形式を指定します。 @samp{--first-parent} が使用されている場合を除き、デフォルトは
@samp{dense-combined} です。使用されている場合は、 @samp{first-parent} がデフォルトです。

@table @asis

@item  @samp{--diff-merges=(off|none)} 
@itemx  @samp{--no-diff-merges} 
マージコミットのdiffの出力を無効にします。暗黙の値を上書きするのに便利です。

@item  @samp{--diff-merges=on} 
@itemx  @samp{--diff-merges=m} 
@itemx  @samp{-m} 
このオプションにより、マージコミットのdiff出力がデフォルトの形式で表示されます。 @samp{-m} は、 @samp{-p}
も指定されている場合にのみ出力を生成します。デフォルトの形式は、 @samp{log.diffMerges} 構成パラメーター(configuration
parameter)を使用して変更できます。デフォルト値は @samp{separate} です。

@item  @samp{--diff-merges=first-parent} 
@itemx  @samp{--diff-merges=1} 
このオプションにより、マージコミットは最初の親に関してのみ完全なdiffを表示します。

@item  @samp{--diff-merges=separate} 
これにより、マージコミットは各親に関して完全なdiffを表示します。親ごとに個別のログエントリとdiffが生成されます。

@item  @samp{--diff-merges=combined} 
@itemx  @samp{--diff-merges=c} 
@end table

@item  @samp{-c:} 
このオプションを使用すると、マージコミットのdiff出力は、親と結果のペアごとの差分を一度に1つずつ表示するのではなく、各親からの差分をマージ結果に同時に表示します。さらに、すべての親から変更されたファイルのみが一覧表示されます。
@samp{-c} は @samp{-p} の機能を含んでいます。

@table @asis

@item  @samp{--diff-merges=dense-combined} 
@itemx  @samp{--diff-merges=cc} 
@itemx  @samp{--cc} 
このオプションを使用すると、 @samp{--diff-merges=Combined}
によって生成される出力は、親のコンテンツに2つの派生(variants)しかない、興味のないハンクを省略してさらに圧縮され、マージ結果は変更なしでそのうちの1つを選択します。
@samp{--cc} は @samp{-p} の機能を含んでいます。
@end table

@item  @samp{--combined-all-paths} 
このフラグにより、結合された差分(マージコミットに使用)にすべての親からのファイルの名前が一覧表示されます。したがって、これは
@samp{--diff-merges=[dense-]combined}
が使用されている場合にのみ有効であり、ファイル名の変更が検出された場合(つまり、名前の変更またはコピーの検出が要求された場合)にのみ役立つ可能性があります。

@item  @samp{-U<n>} 
@itemx  @samp{--unified=<n>} 
通常の3行ではなく、<n> 行の内容でdiffを生成します。
@samp{--patch} の機能を含んでいます。

@item  @samp{--output=<file>} 
stdout ではなく指定のファイルに出力します。

@item  @samp{--output-indicator-new=<char>} 
@itemx  @samp{--output-indicator-old=<char>} 
@itemx  @samp{--output-indicator-context=<char>} 
生成されたパッチの新しい行、古い行、またはコンテキスト行を示すために使用される文字を指定します。 通常、それらはそれぞれ @emph{+} 、 @emph{-} 、 ' '
です。

@item  @samp{--raw} 
コミットごとに、生の差分形式を使用して変更の概要を表示します。
git-diff(1) の "RAW OUTPUT FORMAT" セクションを参照してください。
これは、ログ自体をraw形式で表示することとは異なります。
これは @samp{--format=raw} で
実現できます。

@item  @samp{--patch-with-raw} 
@samp{-p --raw} の同義語。

@item  @samp{-t} 
diff出力にツリーオブジェクトを表示します。

@item  @samp{--indent-heuristic} 
diffハンクの境界をずらす(shift)ヒューリスティックを有効にして、パッチを読みやすくします。 これがデフォルトです。

@item  @samp{--no-indent-heuristic} 
インデントヒューリスティック(indent heuristic)を無効にします。

@item  @samp{--minimal} 
より多くの時間を費やして、可能な限り最小のdiffが生成されるようにします。

@item  @samp{--patience} 
"patience diff" アルゴリズムを使用してdiffを生成します。

@item  @samp{--histogram} 
"histogram diff" アルゴリズムを使用してdiffを生成します。

@item  @samp{--anchored=<text>} 
"anchored diff" アルゴリズムを使用してdiffを生成します。

このオプションは複数回指定できます。

行がソースと宛先の両方に存在し、1回だけ存在し、このテキストで始まる場合、このアルゴリズムは、その行が出力に削除または追加として表示されないようにします。内部で
"patience diff" アルゴリズムを使用します。

@item  @samp{--diff-algorithm=@{patience|minimal|histogram|myers@}} 
diffアルゴリズムを選択します。その派生(variants)は以下のとおりです:

@table @asis

@item  @samp{default}, @samp{myers} 
基本的な貪欲な差分アルゴリズム(greedy diff algorithm)。現在、これがデフォルトです。

@item  @samp{minimal} 
より多くの時間を費やして、可能な限り最小のdiffが生成されるようにします。

@item  @samp{patience} 
パッチを生成する時に "patience diff" アルゴリズムを使います。

@item  @samp{histogram} 
このアルゴリズムは、忍耐アルゴリズム(patience algorithm)を拡張して、「発生率の低い共通要素をサポート」(support
low-occurrence common elements)します。
@end table

たとえば、 あなたが @samp{diff.algorithm}
変数をデフォルト以外の値に設定した上で、それでもデフォルト値を使用する場合は、@samp{--diff-algorithm=default}
オプションを使用する必要があります。

@item  @samp{--stat[=<width>[,<name-width>[,<count>]]]} 
diffstatを生成します。
デフォルトでは、必要なだけのスペースがファイル名部分に使用され、残りはグラフ部分に使用されます。最大幅はデフォルトで端末幅、または端末に接続されていない場合は80桁であり、
@samp{<width>} で上書きできます。ファイル名部分の幅は、コンマの後に別の幅 @samp{<name-width>}
を指定することで制限できます。グラフ部分の幅は、 @samp{--stat-graph-width=<width>}
(統計グラフを生成するすべてのコマンドに影響します)を使用するか、 @samp{diff.statGraphWidth=<width>} ( @samp{git
format-patch} に影響しません)を設定することによって制限できます。3番目のパラメータ @samp{<count>}
を指定することにより、出力を最初の @samp{<count>} 行に制限し、それに @samp{...} が続く形にできます。

これらのパラメータは、 @samp{--stat-width=<width>} と @samp{--stat-name-width=<name-width>} と
@samp{--stat-count=<count>} を使用して個別に設定することもできます。

@item  @samp{--compact-summary} 
ファイルの作成や削除( "new" または "gone" 。オプションでシンボリックリンクの場合は "+l"
)、diffstatのモード変更(実行可能ビットを追加または削除する場合は、それぞれ "+x" または "-x"
)など、拡張ヘッダー情報の要約を出力します。情報はファイル名部分とグラフ部分の間に置かれます。本機能は @samp{--stat} の機能を含んでいます。

@item  @samp{--numstat} 
@samp{--stat`に似ていますが、プログラムで処理しやすい(machine
friendly)ように、追加および削除された行数を10進表記とパス名で省略形なしで表示します。バイナリファイルの場合、 `0 0} の代わりに2つの
@samp{-} を出力します。

@item  @samp{--shortstat} 
変更されたファイルの総数と、追加および削除された行の数を含む @samp{--stat} 形式の最後の行のみを出力します。

@item  @samp{-X[<param1,param2,...>]} 
@itemx  @samp{--dirstat[=<param1,param2,...>]} 
各サブディレクトリの相対的な変更量の分布を出力します。 @samp{--dirstat}
の動作は、パラメータのコンマ区切りリストを渡すことでカスタマイズできます。デフォルトは、 @samp{diff.dirstat}
構成変数によって制御されます(git-config(1) 参照)。以下のパラメータを使用できます:

@table @asis

@item  @samp{changes} 
ソースから削除された、または宛先に追加された行をカウントして、dirstat数を計算します。これは、ファイル内の純粋なコード移動の量を無視します。つまり、ファイル内の行の再配置は、他の変更ほどカウントされません。これは、パラメーターが指定されていない場合のデフォルトの動作です。

@item  @samp{lines} 
通常の行ベースのdiff分析を実行し、削除/追加された行数を合計して、dirstat数を計算します。
(バイナリファイルの場合、バイナリファイルには行の概念がないため、代わりに64バイトのチャンクをカウントします)。 これは @samp{changes}
動作よりも高価な @samp{--dirstat} 動作ですが、他の変更と同じようにファイル内の再配置された行をカウントします。結果の出力は、他の
@samp{--*stat} オプションから得られるものと一致しています。

@item  @samp{files} 
変更されたファイルの数を数えて、dirstat数を計算します。変更された各ファイルは、dirstat分析で等しくカウントされます。これは、ファイルの内容をまったく調べる必要がないため、計算コストが最もかからない
@samp{--dirstat} の動作です。

@item  @samp{cumulative} 
親ディレクトリの子ディレクトリの変更も同様にカウントします。 @samp{cumulative}(累積的)
を使用する場合、報告されるパーセンテージの合計が100%を超える場合があることに注意してください。デフォルトの(非累積的な)動作は、@samp{noncumulative}
パラメーターで指定できます。

@item  <limit> 
整数パラメーターは、カットオフパーセント(デフォルトでは3%)を指定します。指定の割合より少ないディレクトリは、出力に表示されません。
@end table

例: 変更されたファイルの総数の10%未満のディレクトリを無視し、親ディレクトリに子ディレクトリの数を累積しながら、変更されたファイルをカウント:
@samp{--dirstat=files,10,cumulative}

@item  @samp{--cumulative} 
@samp{--dirstat=cumulative} と同義語

@item  @samp{--dirstat-by-file[=<param1,param2>...]} 
@samp{--dirstat=files,param1,param2...} と同義語

@item  @samp{--summary} 
作成、名前変更、モード変更などの拡張ヘッダー情報の短い要約(condensed summary)を出力します。

@item  @samp{--patch-with-stat} 
@samp{-p --stat} と同義語。

@item  @samp{-z} 
改行(newline)ではなく、NULでコミットを区切ります。

また、 @samp{--raw} または @samp{--numstat}
を指定した場合は、パス名を難読化(munge)したり、出力フィールドターミネータとしてNULを使用したりしないでください。

このオプションがないと、構成変数 @samp{core.quotePath} で説明されているように、 通常の文字以外(unusual
characters)を含むパス名が引用符で囲まれます(git-config(1) 参照)。

@item  @samp{--name-only} 
変更されたファイルの名前のみを表示します。 多くの場合、ファイル名はUTF-8でエンコードされます。 詳細については、
git-log(1) のマニュアルページにあるエンコーディングに関する議論(the discussion about
encoding)を参照してください。

@item  @samp{--name-status} 
変更されたファイルの名前とステータスのみを表示します。ステータス文字の意味については、 @samp{--diff-filter}
オプションの説明を参照してください。 @samp{--name-only} と同じように、ファイル名はしばしばUTF-8でエンコードされます。

@item  @samp{--submodule[=<format>]} 
サブモジュールの違いをどのように表示するかを指定します。 @samp{--submodule=short} を指定する場合、 @emph{short}
形式が使用されます。この形式は、範囲の最初と最後にコミットの名前を表示するだけです。 @samp{--submodule} または
@samp{--submodule=log} が指定されている場合、 @emph{log} 形式が使用されます。この形式では、
git-submodule(1) @samp{summary} のように範囲内のコミットが一覧表示されます。 @samp{--submodule=diff}
が指定されている場合、 @emph{diff}
形式が使用されます。この形式は、コミット範囲間のサブモジュールの内容の変更のインラインdiffを示します。configオプションが設定されていない場合、デフォルトは
@samp{diff.submodule} または @emph{short} 形式です。

@item  @samp{--color[=<when>]} 
色付きのdiffを表示します。 @samp{--color} (つまり、 @emph{=<when>} ) は @samp{--color=always} と同じです。
@emph{<when>} は、 @samp{always} または @samp{never} または @samp{auto} のいずれかになります。

@item  @samp{--no-color} 
カラーdiffをオフにします。
@samp{--color=never} と同じです。

@item  @samp{--color-moved[=<mode>]} 
ソースコードの移動した行を別の色にします。
<mode>は、オプションが指定されていない場合はデフォルトで @emph{no} になり、
モードが指定されていないオプションが指定されている場合は @emph{zebra} になります。
モードは以下のいずれかでなければなりません:

@table @asis

@item  no 
移動行をハイライトしません。

@item  default 
@samp{zebra} の同義語です。これは、将来、より賢明なモードに変更される可能性があります。

@item  plain 
ある場所で追加され、別の場所で削除された行は、 @emph{color.diff.newMoved} で色付けされます。 同様に、
@emph{color.diff.oldMoved}
は、差分の別の場所に追加された削除された行に使用されます。このモードは移動された行をピックアップしますが、コードのブロックが順列なしで移動されたかどうかを判断することはレビューではあまり役に立ちません。

@item  blocks 
少なくとも20文字の英数字の移動テキストのブロックが貪欲に検出されます。検出されたブロックは、 @emph{color.diff.@{old,new@}Moved}
色のいずれかを使用して色付けされます。隣接するブロックを区別することはできません。

@item  zebra 
移動されたテキストのブロックは、 @emph{blocks} モードの場合と同様に検出されます。 ブロックは、
@emph{color.diff.@{old,new@}Moved} 色または @emph{color.diff.@{old,new@}MovedAlternative}
色のいずれかを使用して色付けされます。2つの色の間の変化は、新しいブロックが検出されたことを示します。

@item  dimmed-zebra 
@emph{zebra}
に似ていますが、移動されたコードの重要でない部分の追加の調光(dimmed)が実行されます。隣接する2つのブロックの境界線は興味深いと見なされ、残りは興味深いものではありません。
@samp{dimmed_zebra} は非推奨の同義語です。
@end table

@item  @samp{--no-color-moved} 
移動検出をオフにします。 これは、構成設定を上書きするために使用できます。 @samp{--color-moved=no} と同じです。

@item  @samp{--color-moved-ws=<modes>} 
これは、 @samp{--color-moved} の移動検出を実行するときに空白を無視する方法を設定します。
これらのモードは、コンマ区切りのリストとして指定できます:

@table @asis

@item  no 
移動行検出を実行するときに、空白(whitespace)を無視しない。

@item  ignore-space-at-eol 
行末(EOL)での空白(whitespace)の変更を無視します。

@item  ignore-space-change 
空白(whitespace)の数の変更は無視してください。これは、行末の空白(whitespace)を無視し、1つ以上の空白文字(whitespace
characters)の他のすべてのシーケンスを同等と見なします。

@item  ignore-all-space 
行を比較するときは空白(whitespace)を無視します。これにより、一方の行に空白があり、もう一方の行に空白がない場合でも、違いは無視されます。

@item  allow-indentation-change 
最初に移動検出で空白(whitespace)を無視し、空白(whitespace)の変更が行ごとに同じである場合にのみ、移動されたコードブロックをブロックにグループ化します。
これは他のモードと互換性がありません。
@end table

@item  @samp{--no-color-moved-ws} 
移動検出を実行するときは、空白(whitespace)を無視しないでください。これは、構成設定を上書きするために使用できます。
@samp{--color-moved-ws=no} と同じです。

@item  @samp{--word-diff[=<mode>]} 
<mode> を使用して変更された単語を区切ることにより、単語のdiffを表示します。デフォルトでは、単語は空白で区切られます。 以下の
@samp{--word-diff-regex} を参照してください。 <mode> のデフォルトは 'plain’です。 <mode>
は以下のいずれかである必要があります:

@table @asis

@item  color 
変更された単語(word)を色のみを使用して強調表示します。 @samp{--color} を意味します。

@item  plain 
単語を @samp{[-removed-]} および @samp{@{+added+@}} として表示します。
区切り文字が入力に表示されている場合、区切り文字をエスケープしようとしないため、出力があいまいになる可能性があります。

@item  porcelain 
スクリプトの使用を目的とした特別な行ベースの形式を使用します。追加/削除/無変更については、通常の統一されたdiff形式で印刷され、行の先頭の
@samp{+}/@samp{-}/` ` 文字で始まり、行の終わりまで続きます。入力の改行は、それ自体の行のチルダ @samp{~} で表されます。

@item  none 
単語(word)のdiffを再度無効にします。
@end table

注意: 最初のモードの名前にもかかわらず、有効になっている場合、すべてのモードで変更された部分を強調するために色が使用されることに注意してください。

@item  @samp{--word-diff-regex=<regex>} 
空白以外を単語と見なす代わりに、 <regex> を使用して単語が何であるかを決定します。また、すでに有効になっていない限り、この機能は
@samp{--word-diff} の機能を含んでいます。

<regex> の重複しないマッチはすべて、単語と見なされます。これらのマッチの間のすべては空白と見なされ、違いを見つけるためとしては無視されます！
正規表現に @samp{|[^[:space:]]}
を追加して、空白以外のすべての文字とマッチすることを確認することをお勧めします。改行を含むマッチは、改行で黙って切り捨てられます！

たとえば、 @samp{--word-diff-regex=.} は各文字を単語として扱い、それに応じて文字ごとの違いを表示します。

正規表現は、diffドライバーまたは構成オプション(configuration option)を介して設定することもできます。
gitattributes(5) または git-config(1)
を参照してください。これを指定すると、diffドライバーまたは構成設定(configuration
settings)が明示的にオーバーライドされます。diffドライバーは構成設定を上書きします。

@item  @samp{--color-words[=<regex>]} 
@samp{--word-diff=color} に @samp{--word-diff-regex=<regex>}
を加えたものに相当します(正規表現が指定されている場合)。

@item  @samp{--no-renames} 
構成ファイルにデフォルトで指定されている場合でも、名前変更の検出をオフにします。

@item  @samp{--[no-]rename-empty} 
名前変更ソースとして空のブロブを使用するかどうか。

@item  @samp{--check} 
変更によって競合マーカーまたは空白エラーが発生した場合に警告します。空白エラーと見なされるものは、 @samp{core.whitespace}
構成によって制御されます。
デフォルトでは、末尾の空白(空白のみで構成される行を含む)と、行の最初のインデント内で直後にタブ文字が続くスペース文字は、空白エラーと見なされます。問題が見つかった場合は、ゼロ以外のステータスで終了します。なお、
--exit-code とは互換性がありません。

@item  @samp{--ws-error-highlight=<kind>} 
diffの @samp{context} または @samp{old} または @samp{new} 行の空白エラーを強調表示します。複数の値はコンマで区切られ、 @samp{none}
は前の値をリセットし、 @samp{default} はリストを @samp{new} にリセットし、 @samp{all} は old、new、context
の省略形です。このオプションが指定されておらず、構成変数 @samp{diff.wsErrorHighlight} が設定されていない場合、 @samp{new}
行の空白エラーのみが強調表示されます。空白エラーは @samp{color.diff.whitespace} で色分けされています。

@item  @samp{--full-index} 
パッチ形式の出力を生成するときは、最初の一握りの文字(first handful of
characters)の代わりに、「インデックス」行にイメージ前およびイメージ後の完全ブロブオブジェクト名を表示します。

@item  @samp{--binary} 
@samp{--full-index} に加えて、 @samp{git-apply} で適用できるバイナリ差分を出力します。
@samp{--patch} の機能を含んでいます。

@item  @samp{--abbrev[=<n>]} 
完全な40バイトの16進オブジェクト名をdiff-raw形式の出力とdiff-treeヘッダー行に表示する代わりに、オブジェクトを一意に参照する、少なくとも
@emph{<n>} 桁の16進数の長さの最短のプレフィックスを表示します。diffパッチ出力形式では、 @samp{--full-index} が優先されます。つまり、
@samp{--full-index} が指定されている場合、 @samp{--abbrev} に関係なく、完全なブロブ名が表示されます。デフォルト以外の桁数は、
@samp{--abbrev=<n>} で指定できます。

@item  @samp{-B[<n>][/<m>]} 
@itemx  @samp{--break-rewrites[=[<n>][/<m>]]} 
完全な書き換えの変更を削除と作成のペアに分割します。これには以下の2つの目的があります:

これは、ファイルの完全な書き換えに相当する変更が、コンテキストとしてテキストで一致する非常に少数の行と混合された一連の削除と挿入としてではなく、古いものすべての単一の削除とそれに続く
すべての新しいものを1回挿入し、数値 @samp{m} が -B オプションのこの側面を制御します(デフォルトは60%)。 @samp{-B/70%}
は、Gitがそれを完全な書き換えと見なすために、元の30%未満が結果に残る必要があることを指定します(つまり、結果のパッチは、コンテキスト行と混合された一連の削除と挿入になります)。

-M と一緒に使用すると、完全に書き換えられたファイルも名前変更のソースと見なされ(通常、 -M
は、消えたファイルのみを名前変更のソースと見なします)、数 @samp{n} が -Bオプションのこの側面を制御します(デフォルトは50%)。 @samp{-B20%}
は、ファイルのサイズの20%以上と比較して、追加および削除を伴う変更が、別のファイルへの名前変更の可能なソースとして取得される資格があることを指定します。

@item  @samp{-M[<n>]} 
@itemx  @samp{--find-renames[=<n>]} 
diffを生成する場合は、コミットごとに名前の変更を検出して報告します。
履歴をトラバースしながら名前を変更してファイルをフォローする方法については、
@samp{--follow} を参照してください。
@samp{n} が指定されている場合、それは類似性インデックスのしきい値です
(つまり、ファイルのサイズと比較した追加/削除の量)。
たとえば、 @samp{-M90%} は、ファイルの90%以上が変更されていない場合、
Gitが削除/追加のペアを名前変更と見なす必要があることを意味します。
@samp{%} 記号がない場合、数値は小数として読み取られ、その前に小数点が付きます。
つまり、 @samp{-M5} は0.5になるため、@samp{-M50%} と同じになります。
同様に、 @samp{-M05} は @samp{-M5%} と同じです。
検出を正確な名前変更に制限するには、 @samp{-M100%} を使用します。
デフォルトの類似性インデックスは50%です。

@item  @samp{-C[<n>]} 
@itemx  @samp{--find-copies[=<n>]} 
名前と同様コピーを検出します。 @samp{--find-copies-harder} @samp{も参照してください。 `n} を指定すると、 @samp{-M<n>}
と同じ意味になります。

@item  @samp{--find-copies-harder} 
パフォーマンス上の理由から、デフォルトでは、 @samp{-C}
オプションは、コピーの元のファイルが同じ変更組(changeset)で変更された場合にのみコピーを検索します。このフラグにより、コマンドは変更されていないファイルをコピー元の候補として検査します。これは大規模なプロジェクトでは非常にコストのかかる操作であるため、注意して使用してください。
複数の @samp{-C} オプションを指定しても同じ効果があります。

@item  @samp{-D} 
@itemx  @samp{--irreversible-delete} 
削除するプレイメージ(preimage)を省略します。つまり、ヘッダーのみを出力し、プレイメージと @samp{/dev/null}
の差分は出力しません。結果のパッチは、 @samp{patch} または @samp{git apply}
で適用されることを意図していません。これは、変更後にテキストを確認することに集中したい人のためだけのものです。さらに、出力には明らかに、そのようなパッチを手動でも逆に適用するのに十分な情報が不足しているため、オプションの名前が付けられています。

@samp{-B} と併用する場合は、削除/作成ペアの削除部分のプリイメージ(preimage)も省略してください。

@item  @samp{-l<num>} 
@samp{-M} および @samp{-C}
オプションには、名前変更/コピーのサブセットを安価に検出できるいくつかの準備手順が含まれ、その後に、残りのすべてのペアになっていない宛先をすべての関連ソースと比較する徹底的なフォールバック部分が続きます。(名前の変更の場合、残りのペアになっていないソースのみが関係します。コピーの場合、すべての元のソースが関係します)。Nのソースと宛先の場合、この徹底的なチェックのコストは
O(N^2)
です。このオプションは、関係するソース/宛先ファイルの数が指定された数を超えた場合に、名前変更/コピー検出の完全な部分が実行されないようにします。デフォルトは
diff.renameLimit です。 値0は無制限として扱われることに注意してください。

@item  @samp{--diff-filter=[(A|C|D|M|R|T|U|X|B)...[*]]} 
追加(Add)・コピー(Copy)・削除(Delete)・変更(Modify)・名前変更(Rename)されたファイル、タイプが変更されたファイル(T)、マージされていないファイル(U)、不明なファイル(X)、またはペアリングが壊れているファイル(B)のみを選択します。フィルタ文字(無しも含む)の任意の組み合わせを使用できます。
組み合わせに @samp{*} (全てまたは無し)が追加されると、比較で他の基準に一致するファイルがある場合、すべてのパスが選択されます。
他の基準に一致するファイルがない場合、何も選択されません。

また、逆に、除外したい時はこれらの各大文字指定を小文字にして指定します。例えば @samp{--diff-filter=ad}
は、追加および削除されたパスを除外します。

注意:すべてのdiffがすべてのタイプを特徴とするわけではないことに注意してください。
たとえば、インデックスから作業ツリーへのdiffにエントリを追加することはできません(diffに含まれるパスのセットは、インデックスの内容によって制限されるため)。
同様に、これらのタイプの検出が無効になっている場合、コピーおよび名前変更されたエントリは表示されません。

@item  @samp{-S<string>} 
ファイル内の指定の文字列(つまり、 addition 、deletion)の出現回数の差分を調べます。スクリプターが使用することを目的としています。

(構造体など)コードの正確なブロックを探していて、そのブロックが最初に作成されてからの履歴を知りたい場合に便利です。この機能を繰り返し使用して、プリイメージ(preimage)内の興味深いブロックを
@samp{-S} にフィードバックし、そしてあなたはそれをブロックの最初のバージョンを取得するまで続けます。

バイナリファイルも検索されます。

@item  @samp{-G<regex>} 
パッチテキストに <regex> にマッチする 追加/削除 された行が含まれている差分を探します。

@samp{-S<regex> --pickaxe-regex} と @samp{-G<regex>}
の違いを説明するために、同じファイル内で以下のdiffを使用してコミットすることを検討してください:

@example
+    return frotz(nitfol, two->ptr, 1, 0);
...
-    hit = frotz(nitfol, mf2.ptr, 1, 0);
@end example


@samp{git log -G"frotz\(nitfol"} はこのコミットを表示しますが、 @samp{git log -S"frotz\(nitfol"
--pickaxe-regex} は表示しません(その文字列の出現回数が変更されなかったため)。

@samp{--text} が提供されていない限り、 textconv フィルターのないバイナリファイルのパッチは無視されます。

詳細については gitdiffcore(7) の @emph{pickaxe} エントリを参照してください。

@item  @samp{--find-object=<object-id>} 
指定されたオブジェクトの出現回数を変更する違いを探します。 @samp{-S}
と同様に、引数だけが異なり、特定の文字列ではなく特定のオブジェクトIDを検索します。

オブジェクトは、ブロブまたはサブモジュールのコミットにすることができます。 これは、 @samp{git-log} の @samp{-t}
オプションがツリーも探すことを意味します。

@item  @samp{--pickaxe-all} 
@samp{-S} または @samp{-G} が変更を見つけたら、 <string>
の変更を含むファイルだけでなく、その変更セット(changeset)のすべての変更を表示します。

@item  @samp{--pickaxe-regex} 
@samp{-S} に指定した <string> を拡張POSIX正規表現として扱います。

@item  @samp{-O<orderfile>} 
ファイルが出力に表示される順序を制御します。これは @samp{diff.orderFile}
構成変数をオーバーライドします(git-config(1) 参照)。 @samp{diff.orderFile} をキャンセルするには、
@samp{-O/dev/null} を使用します。

出力順序は、 <orderfile>
内のglobパターンの順序によって決定されます。最初のパターンに一致するパス名を持つすべてのファイルが最初に出力され、2番目のパターンに一致する(ただし最初のパターンには一致しない)パス名を持つすべてのファイルが次に出力されます。パス名がどのパターンとも一致しないすべてのファイルは、ファイルの最後に暗黙のすべて一致パターンがあるかのように、最後に出力されます。複数のパス名のランクが同じである場合(同じパターンに一致するが、以前のパターンには一致しない)、相互の出力順序は通常の順序です。

<orderfile> は以下のとおりパースされます:

@itemize 

@item
空白行は無視されるため、読みやすくするための区切りとして使用できます。

@item
ハッシュ ("@samp{#}") で始まる行は無視されるため、コメントに使用できます。
パターンがハッシュで始まる場合は、パターンの先頭にバックスラッシュ(訳注:日本では環境により円記号)("@samp{\}") を追加します。

@item
他の各行には、単一のパターンが含まれています。
@end itemize

パターンは、 FNM_PATHNAME フラグなしで fnmatch(3)
に使用されるパターンと同じ構文とセマンティクスを持ちますが、最終的なパス名コンポーネントをいくつも削除するとパターンと一致する場合、パス名もパターンと一致する点が異なります。
たとえば、パターン "@samp{foo*bar}" は、 "@samp{fooasdfbar}" および "@samp{foo/bar/baz/asdf}" と一致しますが、
"@samp{foobarx}" とは一致しません。

@item  @samp{--skip-to=<file>} 
@itemx  @samp{--rotate-to=<file>} 
名前付き <file> の前のファイルを出力から破棄するか(スキップして)、出力の最後に移動させます(ローテーションさせます)。 これらは主に @samp{git
difftool} コマンドを使用するために考案されたものであり、それ以外の場合はあまり役に立たない可能性があります。

@item  @samp{-R} 
2つの入力を交換します。 つまり、インデックスまたはディスク上のファイルとツリーの内容の違いを表示します。

@item  @samp{--relative[=<path>]} 
@itemx  @samp{--no-relative} 
プロジェクトのサブディレクトリから実行する場合、このオプションを使用して、ディレクトリ外の変更を除外し、それに関連するパス名を表示するように指示できます。サブディレクトリ(ベアリポジトリなど)にいない場合は、引数として
<path> を指定することで、出力を作成するサブディレクトリに名前を付けることができます。 @samp{--no-relative`は、
`diff.relative} 設定オプションと以前の @samp{--relative} の両方を打ち消すために使用できます。

@item  @samp{-a} 
@itemx  @samp{--text} 
すべてのファイルをテキストとして扱います。

@item  @samp{--ignore-cr-at-eol} 
比較を行うときは、行末のキャリッジリターン(carriage-return)を無視します。

@item  @samp{--ignore-space-at-eol} 
行末(EOL)での空白(whitespace)の変更を無視します。

@item  @samp{-b} 
@itemx  @samp{--ignore-space-change} 
空白(whitespace)の数の変更は無視してください。これは、行末の空白(whitespace)を無視し、1つ以上の空白文字(whitespace
characters)の他のすべてのシーケンスを同等と見なします。

@item  @samp{-w} 
@itemx  @samp{--ignore-all-space} 
行を比較するときは空白を無視します。 これにより、一方の行に空白があり、もう一方の行に空白がない場合でも、違いは無視されます。

@item  @samp{--ignore-blank-lines} 
全て空白の行の変更は無視します。

@item  @samp{-I<regex>} 
@itemx  @samp{--ignore-matching-lines=<regex>} 
すべての行が <regex> にマッチする変更を無視します。このオプションは複数回指定できます。

@item  @samp{--inter-hunk-context=<lines>} 
指定された行数までの差分ハンク間のコンテキストを表示し、それによって互いに近いハンクを融合します。デフォルトは
@samp{diff.interHunkContext} で、設定オプションが設定されていない場合は0です。

@item  @samp{-W} 
@itemx  @samp{--function-context} 
関数全体を各変更のコンテキスト行として表示します。関数名は、 @samp{git diff}
がパッチハンクヘッダーを処理するのと同じ方法で決定されます(gitattributes(5) の @emph{Defining a custom
hunk-header} を参照)。

@item  @samp{--ext-diff} 
外部diffヘルパーの実行を許可します。 gitattributes(5) を使用して外部diffドライバーを設定する場合は、
git-log(1) およびその仲間と一緒にこのオプションを使用する必要があります。

@item  @samp{--no-ext-diff} 
外部diffドライバーを禁止します。

@item  @samp{--textconv} 
@itemx  @samp{--no-textconv} 
バイナリファイルを比較するときに、外部テキスト変換フィルターの実行を許可(または禁止)します。 詳細については、
gitattributes(5)
を参照してください。textconvフィルターは通常、一方向の変換であるため、結果のdiffは人間の消費に適していますが、適用(apply)することはできません。このため、textconvフィルターは、
git-diff(1) および git-log(1) に対してのみデフォルトで有効になりますが、
git-format-patch(1) またはdiff配管コマンドに対しては有効になりません。

@item  @samp{--ignore-submodules[=<when>]} 
diff生成のサブモジュールへの変更を無視します。 <when> は、
none・untracked・dirty・allのいずれかになります。これがデフォルトです。noneを使用すると、追跡されていないファイルまたは変更されたファイルが含まれている場合、またはそのHEADがスーパープロジェクトに記録されているコミットと異なる場合にサブモジュールが変更されたと見なされ、
git-config(1) または gitmodules(5) の
ignoreオプションの設定をオーバーライドするために使用できます。untrackedが使用されている場合、サブモジュールには追跡されていないコンテンツのみが含まれている場合、サブモジュールはダーティとは見なされません(ただし、変更されたコンテンツはスキャンされます)。「dirty」を使用すると、サブモジュールの作業ツリーへのすべての変更が無視され、スーパープロジェクトに格納されているコミットへの変更のみが表示されます(これは1.7.0までの動作でした)。「all」を使用すると、サブモジュールへのすべての変更が非表示になります。

@item  @samp{--src-prefix=<prefix>} 
"a/" の代わりに、与えられたソースプレフィックス(source prefix)を表示します。

@item  @samp{--dst-prefix=<prefix>} 
"b/" の代わりに、指定された宛先プレフィックス(destination prefix)を表示します。

@item  @samp{--no-prefix} 
送信元(source)または宛先(destination)のプレフィックスを表示しません。

@item  @samp{--line-prefix=<prefix>} 
出力のすべての行に追加のプレフィックスを付加します。

@item  @samp{--ita-invisible-in-index} 
デフォルトでは、 "git add -N" によって追加されたエントリは、 "git diff" に既存の空のファイルとして表示され、 "git
diff --cached" に新しいファイルとして表示されます。このオプションを使用すると、エントリは "git diff"
では新しいファイルとして表示され、 "git diff --cached" では存在しません。このオプションは、
@samp{--ita-visible-in-index} で元に戻すことができます。どちらのオプションも実験的なものであり、将来削除される可能性があります。
@end table

これらの一般的なオプションの詳細については、 gitdiffcore(7) も参照してください。

@noindent

@chapheading Generating patch text with -p

git-diff(1) 、 git-log(1) 、 git-show(1) 、
git-diff-index(1) 、 git-diff-tree(1) 、
git-diff-files(1) に @samp{-p} オプションを付けて実行するとパッチテキストを生成します。パッチテキストの作成は、
@samp{GIT_EXTERNAL_DIFF} と @samp{GIT_DIFF_OPTS} 環境変数( git(1) 参照)、および @samp{diff}
属性( gitattributes(5) 参照)を介してカスタマイズできます。

-pオプションが生成するものは、従来のdiff形式とは少々異なります:

@enumerate 

@item
先行して、以下のような "git diff" ヘッダーがあります:

@example
diff --git a/file1 b/file2
@end example

名前の変更/コピーが含まれない限り、 @samp{a/} と @samp{b/} のファイル名は同じです。 特に、作成または削除の場合でも、 @samp{a/} または @samp{b/}
ファイル名の代わりに @samp{/dev/ null} が使用されることはありません。

名前変更/コピーが含まれる場合、 @samp{file1} と`file2`
は、それぞれ名前変更/コピーのソースファイルの名前と、名前変更/コピーが生成するファイルの名前を示します。

@item
その後に、1つ以上の拡張ヘッダー行達が続きます:

@example
old mode <mode>
new mode <mode>
deleted file mode <mode>
new file mode <mode>
copy from <path>
copy to <path>
rename from <path>
rename to <path>
similarity index <number>
dissimilarity index <number>
index <hash>..<hash> <mode>
@end example

ファイルモードは、ファイルタイプとファイル許可ビットを含む6桁の8進数として出力されます。

拡張ヘッダーのパス名には、 @samp{a/} および @samp{b/} プレフィックスは含まれません。

類似インデックス(similarity index)は変更されていない行のパーセンテージであり、非類似インデックス(dissimilarity
index)は変更された行のパーセンテージです。これは切り捨てられた整数であり、その後にパーセント記号が続きます。したがって、100％の類似インデックス値は2つの等しいファイルを表し、100％の非類似性は古いファイルから新しいファイルに移行された行がないことを意味します。

インデックス行には、変更前後のブロブオブジェクト名が含まれます。 <mode>
は、ファイルモードが変更されない場合に含まれます。それ以外の場合、別々の行は古いモードと新しいモードを示します。

@item
通常の文字でないキャラクタ(\"unusual\" characters)を含むパス名は、構成変数 @samp{core.quotePath}
で説明されているように引用符で囲まれています( git-config(1)参照)。

@item
出力内のすべての @samp{file1} ファイルはコミット前のファイルを参照し、すべての @samp{file2}
ファイルはコミット後のファイルを参照します。各変更を各ファイルに順番に適用するのは誤りです。たとえば、以下のパッチはaとbを交換します:

@example
diff --git a/a b/b
rename from a
rename to b
diff --git a/b b/a
rename from b
rename to a
@end example

@item
ハンクのヘッダーには、ハンクが適用される関数の名前が記載されています。特定の言語に合わせてこれを調整する方法の詳細については、
gitattributes(5) の "Defining a custom hunk-header" を参照してください。
@end enumerate

@noindent

@chapheading Combined diff format

diffを生成するコマンドは、マージを表示するときに @samp{-c} または @samp{--cc} オプションを使用して「合成diff」(combined
diff)を生成できます。これは git-diff(1) または git-show(1)
でのマージを表示するときのデフォルトの形式です。 注意: これらのコマンドのいずれかに適切な @samp{--diff-merges}
オプションを指定して、特定の形式で差分を強制的に生成できることにも注意してください。

合成diff形式は以下のようになります:

@example
diff --combined describe.c
index fabadb8,cc95eb0..4866510
--- a/describe.c
+++ b/describe.c
@@@@@@ -98,20 -98,12 +98,20 @@@@@@
        return (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;
  @}

- static void describe(char *arg)
 -static void describe(struct commit *cmit, int last_one)
++static void describe(char *arg, int last_one)
  @{
 +      unsigned char sha1[20];
 +      struct commit *cmit;
        struct commit_list *list;
        static int initialized = 0;
        struct commit_name *n;

 +      if (get_sha1(arg, sha1) < 0)
 +              usage(describe_usage);
 +      cmit = lookup_commit_reference(sha1);
 +      if (!cmit)
 +              usage(describe_usage);
 +
        if (!initialized) @{
                initialized = 1;
                for_each_ref(get_name);
@end example


@enumerate 

@item
まず "git diff"  ヘッダーがあり、以下のようになります( @samp{-c} オプションが使用されている場合):

@example
diff --combined file
@end example

または、以下のようになります( @samp{--cc} オプションが使用されている場合):

@example
diff --cc file
@end example

@item
その後に1つ以上の拡張ヘッダー行が続きます(以下の例は、2つの親とのマージを示しています):

@example
index <hash>,<hash>..<hash>
mode <mode>,<mode>..<mode>
new file mode <mode>
deleted file mode <mode>,<mode>
@end example

@samp{mode <mode>,<mode>..<mode>} 行は、<mode> の少なくとも1つが他の <mode>
と異なる場合にのみ表示されます。検出されたコンテンツの移動(名前の変更とコピーの検出)に関する情報を含む拡張ヘッダーは、2つの <tree-ish>
のdiffで機能するように設計されており、合成diff形式では使用されません。

@item
その後に2行の from-file/to-file ヘッダーが続きます

@example
--- a/file
+++ b/file
@end example

従来の統一diff形式の2行ヘッダーと同様に、 @samp{/dev/null} は、作成または削除されたファイルを通知するために使用されます。

ただし、 --combined-all-paths  オプションが指定されている場合、2行の from-file/to-file の代わりに、 N+1
行の from-file/to-file ヘッダーが取得されます。ここで、 N はマージコミットの親の数です。

@example
--- a/file
--- a/file
--- a/file
+++ b/file
@end example

この拡張形式は、名前変更またはコピー検出がアクティブな場合に役立ち、別の親のファイルの元の名前を確認できます。

@item
チャンクヘッダーの形式が変更され、誤って @samp{patch-p1}
にフィードされるのを防ぎます。合成差分形式は、マージコミットの変更を確認するために作成されたものであり、適用されることを意図したものではありません。この変更は、拡張された「インデックス」ヘッダーの変更に似ています:

@example
@@@@@@ <from-file-range> <from-file-range> <to-file-range> @@@@@@
@end example

合成diff形式のチャンクヘッダーには親の数+1の @samp{@@} 文字があります。
@end enumerate

従来の統一diff形式とは異なり、2つのファイルAとBが、 @samp{-} (マイナスはAに表示されますが、Bでは削除されます) または @samp{+}
(プラスはAにはありませんが、Bには追加されます)、または @samp{" "}（スペースは変更なし)
プレフィックスを持つ単一の列で表示される場合、この形式は2つ以上のファイル file1, file2,… を1つのファイルXと比較し、Xが各
fileN とどのように異なるかを示します。ファイルNごとに1つの列が出力行の前に追加され、Xの行が出力行とどのように異なるかを示します。

列Nの @samp{-} 文字は、その行が fileN に表示されているが、結果には表示されていないことを意味します。 列Nの @samp{+}
文字は、結果に行が表示され、 fileN にその行がないことを意味します(つまり、その親の観点から見て行が追加されたことを示す)。

上記の出力例では、関数のシグネチャが両方のファイルから見て変更されています(したがって、 file1 と file2 の両方から2つの @samp{-}
が削除され、さらに @samp{++} が追加されたため、 file1 と file2 のどちらにも表示されません)。また、他の8行は file1 と同じですが、
file2 には表示されません(したがって、接頭辞として @samp{+} が付けられます)。

@samp{git diff-tree -c} で表示される場合、マージコミットの親をマージ結果と比較します(つまり、 file1..fileN が親です)。
@samp{git diff-files -c} で表示される場合、2つの未解決のマージ親を作業ツリーファイルと比較します(つまり、 file1
はステージ2、別名「私たちのバージョン」、 file2 はステージ3、別名「彼らのバージョン」です)。

@noindent

@chapheading EXAMPLES

@table @asis

@item  @samp{git show v1.0.0} 
タグ @samp{v1.0.0} と、タグが指すオブジェクトを表示します。

@item  @samp{git show v1.0.0^@{tree@}} 
タグ @samp{v1.0.0} が指すツリーを表示します。

@item  @samp{git show -s --format=%s v1.0.0^@{commit@}} 
タグ @samp{v1.0.0} が指すコミットの件名を表示します。

@item  @samp{git show next~10:Documentation/README} 
ブランチ @samp{next} の最後から10番目のコミットで最新であったファイル @samp{Documentation/README} の内容を表示します。

@item  @samp{git show master:Makefile master:t/Makefile} 
ブランチ @samp{master} の先頭にあるMakefileの内容を連結して表示します。
@end table

@noindent

@chapheading DISCUSSION

Gitは、ある程度までは文字エンコードに依存しません。

@itemize 

@item
ブロブオブジェクトの内容は、解釈されていないバイトのシーケンスです。コアレベルでのエンコーディング変換はありません。

@item
パス名はUTF-8正規化形式C(UTF-8 normalization form
C)でエンコードされます。これは、ツリーオブジェクト、インデックスファイル、ref名、およびコマンドライン引数、環境変数、構成ファイル(
@samp{.git/config} (git-config(1) 参照) と gitignore(5) と
gitattributes(5) と gitmodules(5)) のパス名に適用されます。

コアレベルのGitは、パス名を単に非NULバイトのシーケンスとして扱い、パス名をエンコードする変換はありません(MacとWindowsを除く)。したがって、非ASCIIパス名の使用は、レガシー拡張ASCIIエンコーディングを使用するプラットフォームやファイルシステムでもほとんど機能します。ただし、そのようなシステムで作成されたリポジトリは、UTF-8ベースのシステム(Linux、Mac、Windowsなど)では正しく機能しません。その逆も同様です。さらに、多くのGitベースのツールは、パス名がUTF-8であると単純に想定しており、他のエンコーディングを正しく表示できません。

@item
コミットログメッセージは通常UTF-8でエンコードされますが、他の拡張ASCIIエンコードもサポートされています。これには、ISO-8859-x、CP125xなどが含まれますが、UTF-16/32、EBCDIC、およびCJKマルチバイトエンコーディング(GBK、Shift-JIS、Big5、EUC-x、CP9xxなど)は含まれません。
@end itemize

我々はコミットログメッセージをUTF-8でエンコードすることをお勧めしますが、コアとGit
Porcelainはどちらも、プロジェクトでUTF-8を強制しないように設計されています。特定のプロジェクトのすべての参加者がレガシーエンコーディングを使用する方が便利だと感じた場合、Gitはそれを禁止しません。
ただし、覚えておくべきことがいくつかあります。

@enumerate 

@item
@emph{git commit} と @emph{git commit-tree}
は、プロジェクトがレガシーエンコーディングを使用していることを明示的に指定しない限り、与えられたコミットログメッセージが有効なUTF-8文字列のように見えない場合に警告を発します。明示的に指定する方法は、以下のように、
@samp{.git/config} ファイルに @samp{i18n.commitEncoding} を含めることです。

@example
[i18n]
        commitEncoding = ISO-8859-1
@end example


上記の設定で作成されたコミットオブジェクトは、 @samp{encoding} ヘッダーに @samp{i18n.commitEncoding} の値を記録します。
これは、後でそれらを見る他の人々を助けるためです。このヘッダーがないということは、コミットログメッセージがUTF-8でエンコードされていることを意味します。

@item
@emph{git log} と @emph{git show} と @emph{git blame} とその仲間たちは、コミットオブジェクトの @samp{encoding}
ヘッダーを見て、特に指定がない限り、ログメッセージをUTF-8に再コーディングしようとします。あなたは以下のように、 @samp{.git/config}
ファイルの @samp{i18n.logOutputEncoding} を使用して目的の出力エンコーディングを指定できます。

@example
[i18n]
        logOutputEncoding = ISO-8859-1
@end example


この構成変数がない場合は、代わりに @samp{i18n.commitEncoding} の値が使用されます。
@end enumerate

UTF-8への再コーディングは必ずしも可逆的な操作ではないため、我々はコミットが行われたときにコミットログメッセージを再コーディングしないことを意図的に選択したことに注意してください。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-sparse-checkout,,,Top
@chapheading Name

git-sparse-checkout — Initialize and modify the sparse-checkout configuration, which reduces the checkout to a set of paths given by a list of patterns.

@noindent

@chapheading Synopsis

@display
git sparse-checkout <subcommand> [options]
@end display


@noindent

@chapheading DESCRIPTION

Initialize and modify the sparse-checkout configuration, which reduces the
checkout to a set of paths given by a list of patterns.

THIS COMMAND IS EXPERIMENTAL. ITS BEHAVIOR, AND THE BEHAVIOR OF OTHER
COMMANDS IN THE PRESENCE OF SPARSE-CHECKOUTS, WILL LIKELY CHANGE IN THE
FUTURE.

@noindent

@chapheading COMMANDS

@table @asis

@item  @emph{list} 
Describe the patterns in the sparse-checkout file.

@item  @emph{init} 
Enable the @samp{core.sparseCheckout} setting. If the sparse-checkout file does
not exist, then populate it with patterns that match every file in the root
directory and no other directories, then will remove all directories tracked
by Git. Add patterns to the sparse-checkout file to repopulate the working
directory.

To avoid interfering with other worktrees, it first enables the
@samp{extensions.worktreeConfig} setting and makes sure to set the
@samp{core.sparseCheckout} setting in the worktree-specific config file.

When @samp{--cone} is provided, the @samp{core.sparseCheckoutCone} setting is also
set, allowing for better performance with a limited set of patterns (see
@emph{CONE PATTERN SET} below).

Use the @samp{--[no-]sparse-index} option to toggle the use of the sparse index
format. This reduces the size of the index to be more closely aligned with
your sparse-checkout definition. This can have significant performance
advantages for commands such as @samp{git status} or @samp{git add}.  This feature is
still experimental. Some commands might be slower with a sparse index until
they are properly integrated with the feature.

@strong{WARNING:} Using a sparse index requires modifying the index in a way
that is not completely understood by external tools. If you have trouble
with this compatibility, then run @samp{git sparse-checkout init --no-sparse-index}
to rewrite your index to not be sparse. Older versions of Git will not
understand the sparse directory entries index extension and may fail to
interact with your repository until it is disabled.

@item  @emph{set} 
Write a set of patterns to the sparse-checkout file, as given as a list of
arguments following the @emph{set} subcommand. Update the working directory to
match the new patterns. Enable the core.sparseCheckout config setting if it
is not already enabled.

When the @samp{--stdin} option is provided, the patterns are read from standard
in as a newline-delimited list instead of from the arguments.

When @samp{core.sparseCheckoutCone} is enabled, the input list is considered a
list of directories instead of sparse-checkout patterns. The command writes
patterns to the sparse-checkout file to include all files contained in those
directories (recursively) as well as files that are siblings of ancestor
directories. The input format matches the output of @samp{git ls-tree
--name-only}.  This includes interpreting pathnames that begin with a double
quote (") as C-style quoted strings.

@item  @emph{add} 
Update the sparse-checkout file to include additional patterns.  By default,
these patterns are read from the command-line arguments, but they can be
read from stdin using the @samp{--stdin} option. When @samp{core.sparseCheckoutCone}
is enabled, the given patterns are interpreted as directory names as in the
@emph{set} subcommand.

@item  @emph{reapply} 
Reapply the sparsity pattern rules to paths in the working tree.  Commands
like merge or rebase can materialize paths to do their work (e.g. in order
to show you a conflict), and other sparse-checkout commands might fail to
sparsify an individual file (e.g. because it has unstaged changes or
conflicts).  In such cases, it can make sense to run @samp{git sparse-checkout
reapply} later after cleaning up affected paths (e.g. resolving conflicts,
undoing or committing changes, etc.).

@item  @emph{disable} 
Disable the @samp{core.sparseCheckout} config setting, and restore the working
directory to include all files. Leaves the sparse-checkout file intact so a
later @emph{git sparse-checkout init} command may return the working directory to
the same state.
@end table

@noindent

@chapheading SPARSE CHECKOUT

"Sparse checkout" allows populating the working directory sparsely.  It uses
the skip-worktree bit (see git-update-index(1)) to tell Git whether
a file in the working directory is worth looking at. If the skip-worktree
bit is set, then the file is ignored in the working directory. Git will not
populate the contents of those files, which makes a sparse checkout helpful
when working in a repository with many files, but only a few are important
to the current user.

The @samp{$GIT_DIR/info/sparse-checkout} file is used to define the skip-worktree
reference bitmap. When Git updates the working directory, it updates the
skip-worktree bits in the index based on this file. The files matching the
patterns in the file will appear in the working directory, and the rest will
not.

To enable the sparse-checkout feature, run @samp{git sparse-checkout init} to
initialize a simple sparse-checkout file and enable the
@samp{core.sparseCheckout} config setting. Then, run @samp{git sparse-checkout set} to
modify the patterns in the sparse-checkout file.

To repopulate the working directory with all files, use the @samp{git
sparse-checkout disable} command.

@noindent

@chapheading FULL PATTERN SET

By default, the sparse-checkout file uses the same syntax as @samp{.gitignore}
files.

While @samp{$GIT_DIR/info/sparse-checkout} is usually used to specify what files
are included, you can also specify what files are @emph{not} included, using
negative patterns. For example, to remove the file @samp{unwanted}:

@example
/*
!unwanted
@end example


@noindent

@chapheading CONE PATTERN SET

The full pattern set allows for arbitrary pattern matches and complicated
inclusion/exclusion rules. These can result in O(N*M) pattern matches when
updating the index, where N is the number of patterns and M is the number of
paths in the index. To combat this performance issue, a more restricted
pattern set is allowed when @samp{core.sparseCheckoutCone} is enabled.

The accepted patterns in the cone pattern set are:

@enumerate 

@item
@strong{Recursive:} All paths inside a directory are included.

@item
@strong{Parent:} All files immediately inside a directory are included.
@end enumerate

In addition to the above two patterns, we also expect that all files in the
root directory are included. If a recursive pattern is added, then all
leading directories are added as parent patterns.

By default, when running @samp{git sparse-checkout init}, the root directory is
added as a parent pattern. At this point, the sparse-checkout file contains
the following patterns:

@example
/*
!/*/
@end example


This says "include everything in root, but nothing two levels below root."

When in cone mode, the @samp{git sparse-checkout set} subcommand takes a list of
directories instead of a list of sparse-checkout patterns. In this mode, the
command @samp{git sparse-checkout set A/B/C} sets the directory @samp{A/B/C} as a
recursive pattern, the directories @samp{A} and @samp{A/B} are added as parent
patterns. The resulting sparse-checkout file is now

@example
/*
!/*/
/A/
!/A/*/
/A/B/
!/A/B/*/
/A/B/C/
@end example


Here, order matters, so the negative patterns are overridden by the positive
patterns that appear lower in the file.

If @samp{core.sparseCheckoutCone=true}, then Git will parse the sparse-checkout
file expecting patterns of these types. Git will warn if the patterns do not
match.  If the patterns do match the expected format, then Git will use
faster hash- based algorithms to compute inclusion in the sparse-checkout.

In the cone mode case, the @samp{git sparse-checkout list} subcommand will list
the directories that define the recursive patterns. For the example
sparse-checkout file above, the output is as follows:

@example
$ git sparse-checkout list
A/B/C
@end example


If @samp{core.ignoreCase=true}, then the pattern-matching algorithm will use a
case-insensitive check. This corrects for case mismatched filenames in the
@emph{git sparse-checkout set} command to reflect the expected cone in the
working directory.

When changing the sparse-checkout patterns in cone mode, Git will inspect
each tracked directory that is not within the sparse-checkout cone to see if
it contains any untracked files. If all of those files are ignored due to
the @samp{.gitignore} patterns, then the directory will be deleted. If any of the
untracked files within that directory is not ignored, then no deletions will
occur within that directory and a warning message will appear. If these
files are important, then reset your sparse-checkout definition so they are
included, use @samp{git add} and @samp{git commit} to store them, then remove any
remaining files manually to ensure Git can behave optimally.

@noindent

@chapheading SUBMODULES

If your repository contains one or more submodules, then submodules are
populated based on interactions with the @samp{git submodule} command.
Specifically, @samp{git submodule init -- <path>} will ensure the submodule at
@samp{<path>} is present, while @samp{git submodule deinit [-f] -- <path>} will remove
the files for the submodule at @samp{<path>} (including any untracked files,
uncommitted changes, and unpushed history).  Similar to how sparse-checkout
removes files from the working tree but still leaves entries in the index,
deinitialized submodules are removed from the working directory but still
have an entry in the index.

Since submodules may have unpushed changes or untracked files, removing them
could result in data loss.  Thus, changing sparse inclusion/exclusion rules
will not cause an already checked out submodule to be removed from the
working copy.  Said another way, just as @samp{checkout} will not cause
submodules to be automatically removed or initialized even when switching
between branches that remove or add submodules, using @samp{sparse-checkout} to
reduce or expand the scope of "interesting" files will not cause submodules
to be automatically deinitialized or initialized either.

Further, the above facts mean that there are multiple reasons that "tracked"
files might not be present in the working copy: sparsity pattern application
from sparse-checkout, and submodule initialization state.  Thus, commands
like @samp{git grep} that work on tracked files in the working copy may return
results that are limited by either or both of these restrictions.

@noindent

@chapheading SEE ALSO

git-read-tree(1) gitignore(5)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-stage,,,Top
@chapheading Name

git-stage — ファイルの内容をステージング領域に追加

@noindent

@chapheading Synopsis

@display
git stage args…
@end display


@noindent

@chapheading DESCRIPTION

これは git-add(1) の同義語です。 git-add(1) の文書を参照してください。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-stash,,,Top
@chapheading Name

git-stash — Stash the changes in a dirty working directory away

@noindent

@chapheading Synopsis

@display
git stash list [<log-options>]
git stash show [-u|--include-untracked|--only-untracked] [<diff-options>] [<stash>]
git stash drop [-q|--quiet] [<stash>]
git stash ( pop | apply ) [--index] [-q|--quiet] [<stash>]
git stash branch <branchname> [<stash>]
git stash [push [-p|--patch] [-k|--[no-]keep-index] [-q|--quiet]
             [-u|--include-untracked] [-a|--all] [-m|--message <message>]
             [--pathspec-from-file=<file> [--pathspec-file-nul]]
             [--] [<pathspec>…]]
git stash clear
git stash create [<message>]
git stash store [-m|--message <message>] [-q|--quiet] <commit>
@end display


@noindent

@chapheading DESCRIPTION

Use @samp{git stash} when you want to record the current state of the working
directory and the index, but want to go back to a clean working directory.
The command saves your local modifications away and reverts the working
directory to match the @samp{HEAD} commit.

The modifications stashed away by this command can be listed with @samp{git stash
list}, inspected with @samp{git stash show}, and restored (potentially on top of
a different commit) with @samp{git stash apply}.  Calling @samp{git stash} without any
arguments is equivalent to @samp{git stash push}.  A stash is by default listed
as "WIP on @emph{branchname} …", but you can give a more descriptive message on
the command line when you create one.

The latest stash you created is stored in @samp{refs/stash}; older stashes are
found in the reflog of this reference and can be named using the usual
reflog syntax (e.g. @samp{stash@@@{0@}} is the most recently created stash,
@samp{stash@@@{1@}} is the one before it, @samp{stash@@@{2.hours.ago@}} is also
possible). Stashes may also be referenced by specifying just the stash index
(e.g. the integer @samp{n} is equivalent to @samp{stash@@@{n@}}).

@noindent

@chapheading COMMANDS

@table @asis

@item  push [-p|--patch] [-k|--[no-]keep-index] [-u|--include-untracked] [-a|--all] [-q|--quiet] [-m|--message <message>] [--pathspec-from-file=<file> [--pathspec-file-nul]] [--] [<pathspec>…] 
Save your local modifications to a new @emph{stash entry} and roll them back to
HEAD (in the working tree and in the index).  The <message> part is optional
and gives the description along with the stashed state.

For quickly making a snapshot, you can omit "push".  In this mode,
non-option arguments are not allowed to prevent a misspelled subcommand from
making an unwanted stash entry.  The two exceptions to this are @samp{stash -p}
which acts as alias for @samp{stash push -p} and pathspec elements, which are
allowed after a double hyphen @samp{--} for disambiguation.

@item  save [-p|--patch] [-k|--[no-]keep-index] [-u|--include-untracked] [-a|--all] [-q|--quiet] [<message>] 
This option is deprecated in favour of @emph{git stash push}.  It differs from
"stash push" in that it cannot take pathspec.  Instead, all non-option
arguments are concatenated to form the stash message.

@item  list [<log-options>] 
List the stash entries that you currently have.  Each @emph{stash entry} is
listed with its name (e.g. @samp{stash@@@{0@}} is the latest entry, @samp{stash@@@{1@}} is
the one before, etc.), the name of the branch that was current when the
entry was made, and a short description of the commit the entry was based
on.

@example
stash@@@{0@}: WIP on submit: 6ebd0e2... Update git-stash documentation
stash@@@{1@}: On master: 9cc0589... Add git-stash
@end example


The command takes options applicable to the @emph{git log} command to control
what is shown and how. See git-log(1).

@item  show [-u|--include-untracked|--only-untracked] [<diff-options>] [<stash>] 
Show the changes recorded in the stash entry as a diff between the stashed
contents and the commit back when the stash entry was first created.  By
default, the command shows the diffstat, but it will accept any format known
to @emph{git diff} (e.g., @samp{git stash show -p stash@@@{1@}} to view the second most
recent entry in patch form).  If no @samp{<diff-option>} is provided, the default
behavior will be given by the @samp{stash.showStat}, and @samp{stash.showPatch} config
variables. You can also use @samp{stash.showIncludeUntracked} to set whether
@samp{--include-untracked} is enabled by default.

@item  pop [--index] [-q|--quiet] [<stash>] 
Remove a single stashed state from the stash list and apply it on top of the
current working tree state, i.e., do the inverse operation of @samp{git stash
push}. The working directory must match the index.

Applying the state can fail with conflicts; in this case, it is not removed
from the stash list. You need to resolve the conflicts by hand and call @samp{git
stash drop} manually afterwards.

@item  apply [--index] [-q|--quiet] [<stash>] 
Like @samp{pop}, but do not remove the state from the stash list. Unlike @samp{pop},
@samp{<stash>} may be any commit that looks like a commit created by @samp{stash push}
or @samp{stash create}.

@item  branch <branchname> [<stash>] 
Creates and checks out a new branch named @samp{<branchname>} starting from the
commit at which the @samp{<stash>} was originally created, applies the changes
recorded in @samp{<stash>} to the new working tree and index.  If that succeeds,
and @samp{<stash>} is a reference of the form @samp{stash@@@{<revision>@}}, it then drops
the @samp{<stash>}.

This is useful if the branch on which you ran @samp{git stash push} has changed
enough that @samp{git stash apply} fails due to conflicts. Since the stash entry
is applied on top of the commit that was HEAD at the time @samp{git stash} was
run, it restores the originally stashed state with no conflicts.

@item  clear 
Remove all the stash entries. Note that those entries will then be subject
to pruning, and may be impossible to recover (see @emph{Examples} below for a
possible strategy).

@item  drop [-q|--quiet] [<stash>] 
Remove a single stash entry from the list of stash entries.

@item  create 
Create a stash entry (which is a regular commit object) and return its
object name, without storing it anywhere in the ref namespace.  This is
intended to be useful for scripts.  It is probably not the command you want
to use; see "push" above.

@item  store 
Store a given stash created via @emph{git stash create} (which is a dangling
merge commit) in the stash ref, updating the stash reflog.  This is intended
to be useful for scripts.  It is probably not the command you want to use;
see "push" above.
@end table

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-a} 
@itemx  @samp{--all} 
This option is only valid for @samp{push} and @samp{save} commands.

All ignored and untracked files are also stashed and then cleaned up with
@samp{git clean}.

@item  @samp{-u} 
@itemx  @samp{--include-untracked} 
@itemx  @samp{--no-include-untracked} 
When used with the @samp{push} and @samp{save} commands, all untracked files are also
stashed and then cleaned up with @samp{git clean}.

When used with the @samp{show} command, show the untracked files in the stash
entry as part of the diff.

@item  @samp{--only-untracked} 
This option is only valid for the @samp{show} command.

Show only the untracked files in the stash entry as part of the diff.

@item  @samp{--index} 
This option is only valid for @samp{pop} and @samp{apply} commands.

Tries to reinstate not only the working tree’s changes, but also the index’s
ones. However, this can fail, when you have conflicts (which are stored in
the index, where you therefore can no longer apply the changes as they were
originally).

@item  @samp{-k} 
@itemx  @samp{--keep-index} 
@itemx  @samp{--no-keep-index} 
This option is only valid for @samp{push} and @samp{save} commands.

All changes already added to the index are left intact.

@item  @samp{-p} 
@itemx  @samp{--patch} 
This option is only valid for @samp{push} and @samp{save} commands.

Interactively select hunks from the diff between HEAD and the working tree
to be stashed.  The stash entry is constructed such that its index state is
the same as the index state of your repository, and its worktree contains
only the changes you selected interactively.  The selected changes are then
rolled back from your worktree. See the “Interactive Mode” section of
git-add(1) to learn how to operate the @samp{--patch} mode.

The @samp{--patch} option implies @samp{--keep-index}.  You can use @samp{--no-keep-index}
to override this.

@item  @samp{--pathspec-from-file=<file>} 
This option is only valid for @samp{push} command.

Pathspec is passed in @samp{<file>} instead of commandline args. If @samp{<file>} is
exactly @samp{-} then standard input is used. Pathspec elements are separated by
LF or CR/LF. Pathspec elements can be quoted as explained for the
configuration variable @samp{core.quotePath} (see git-config(1)). See
also @samp{--pathspec-file-nul} and global @samp{--literal-pathspecs}.

@item  @samp{--pathspec-file-nul} 
This option is only valid for @samp{push} command.

Only meaningful with @samp{--pathspec-from-file}. Pathspec elements are separated
with NUL character and all other characters are taken literally (including
newlines and quotes).

@item  @samp{-q} 
@itemx  @samp{--quiet} 
This option is only valid for @samp{apply}, @samp{drop}, @samp{pop}, @samp{push}, @samp{save},
@samp{store} commands.

Quiet, suppress feedback messages.

@item  -- 
This option is only valid for @samp{push} command.

Separates pathspec from options for disambiguation purposes.

@item  <pathspec>… 
This option is only valid for @samp{push} command.

The new stash entry records the modified states only for the files that
match the pathspec.  The index entries and working tree files are then
rolled back to the state in HEAD only for these files, too, leaving files
that do not match the pathspec intact.

For more details, see the @emph{pathspec} entry in gitglossary(7).

@item  <stash> 
This option is only valid for @samp{apply}, @samp{branch}, @samp{drop}, @samp{pop}, @samp{show}
commands.

A reference of the form @samp{stash@@@{<revision>@}}. When no @samp{<stash>} is given,
the latest stash is assumed (that is, @samp{stash@@@{0@}}).
@end table

@noindent

@chapheading DISCUSSION

A stash entry is represented as a commit whose tree records the state of the
working directory, and its first parent is the commit at @samp{HEAD} when the
entry was created.  The tree of the second parent records the state of the
index when the entry is made, and it is made a child of the @samp{HEAD} commit.
The ancestry graph looks like this:

@example
       .----W
      /    /
-----H----I
@end example

where @samp{H} is the @samp{HEAD} commit, @samp{I} is a commit that records the state of
the index, and @samp{W} is a commit that records the state of the working tree.

@noindent

@chapheading EXAMPLES

@table @asis

@item  Pulling into a dirty tree 
When you are in the middle of something, you learn that there are upstream
changes that are possibly relevant to what you are doing.  When your local
changes do not conflict with the changes in the upstream, a simple @samp{git
pull} will let you move forward.

However, there are cases in which your local changes do conflict with the
upstream changes, and @samp{git pull} refuses to overwrite your changes.  In such
a case, you can stash your changes away, perform a pull, and then unstash,
like this:

@example
$ git pull
 ...
file foobar not up to date, cannot merge.
$ git stash
$ git pull
$ git stash pop
@end example


@item  Interrupted workflow 
When you are in the middle of something, your boss comes in and demands that
you fix something immediately.  Traditionally, you would make a commit to a
temporary branch to store your changes away, and return to your original
branch to make the emergency fix, like this:

@example
# ... hack hack hack ...
$ git switch -c my_wip
$ git commit -a -m "WIP"
$ git switch master
$ edit emergency fix
$ git commit -a -m "Fix in a hurry"
$ git switch my_wip
$ git reset --soft HEAD^
# ... continue hacking ...
@end example


You can use @emph{git stash} to simplify the above, like this:

@example
# ... hack hack hack ...
$ git stash
$ edit emergency fix
$ git commit -a -m "Fix in a hurry"
$ git stash pop
# ... continue hacking ...
@end example


@item  Testing partial commits 
You can use @samp{git stash push --keep-index} when you want to make two or more
commits out of the changes in the work tree, and you want to test each
change before committing:

@example
# ... hack hack hack ...
$ git add --patch foo            # add just first part to the index
$ git stash push --keep-index    # save all other changes to the stash
$ edit/build/test first part
$ git commit -m 'First part'     # commit fully tested change
$ git stash pop                  # prepare to work on all other changes
# ... repeat above five steps until one commit remains ...
$ edit/build/test remaining parts
$ git commit foo -m 'Remaining parts'
@end example


@item  Recovering stash entries that were cleared/dropped erroneously 
If you mistakenly drop or clear stash entries, they cannot be recovered
through the normal safety mechanisms.  However, you can try the following
incantation to get a list of stash entries that are still in your
repository, but not reachable any more:

@example
git fsck --unreachable |
grep commit | cut -d\  -f3 |
xargs git log --merges --no-walk --grep=WIP
@end example

@end table

@noindent

@chapheading SEE ALSO

git-checkout(1), git-commit(1), git-reflog(1),
git-reset(1), git-switch(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-status,,,Top
@chapheading Name

git-status — Show the working tree status

@noindent

@chapheading Synopsis

@display
git status [<options>…] [--] [<pathspec>…]
@end display


@noindent

@chapheading DESCRIPTION

Displays paths that have differences between the index file and the current
HEAD commit, paths that have differences between the working tree and the
index file, and paths in the working tree that are not tracked by Git (and
are not ignored by gitignore(5)). The first are what you @emph{would}
commit by running @samp{git commit}; the second and third are what you @emph{could}
commit by running @emph{git add} before running @samp{git commit}.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-s} 
@itemx  @samp{--short} 
Give the output in the short-format.

@item  @samp{-b} 
@itemx  @samp{--branch} 
Show the branch and tracking info even in short-format.

@item  @samp{--show-stash} 
Show the number of entries currently stashed away.

@item  @samp{--porcelain[=<version>]} 
Give the output in an easy-to-parse format for scripts.  This is similar to
the short output, but will remain stable across Git versions and regardless
of user configuration. See below for details.

The version parameter is used to specify the format version.  This is
optional and defaults to the original version @emph{v1} format.

@item  @samp{--long} 
Give the output in the long-format. This is the default.

@item  @samp{-v} 
@itemx  @samp{--verbose} 
In addition to the names of files that have been changed, also show the
textual changes that are staged to be committed (i.e., like the output of
@samp{git diff --cached}). If @samp{-v} is specified twice, then also show the changes
in the working tree that have not yet been staged (i.e., like the output of
@samp{git diff}).

@item  @samp{-u[<mode>]} 
@itemx  @samp{--untracked-files[=<mode>]} 
Show untracked files.

The mode parameter is used to specify the handling of untracked files.  It
is optional: it defaults to @emph{all}, and if specified, it must be stuck to the
option (e.g. @samp{-uno}, but not @samp{-u no}).

The possible options are:

@itemize 

@item
@emph{no}     - Show no untracked files.

@item
@emph{normal} - Shows untracked files and directories.

@item
@emph{all}    - Also shows individual files in untracked directories.
@end itemize

When @samp{-u} option is not used, untracked files and directories are shown
(i.e. the same as specifying @samp{normal}), to help you avoid forgetting to add
newly created files.  Because it takes extra work to find untracked files in
the filesystem, this mode may take some time in a large working tree.
Consider enabling untracked cache and split index if supported (see @samp{git
update-index --untracked-cache} and @samp{git update-index --split-index}),
Otherwise you can use @samp{no} to have @samp{git status} return more quickly without
showing untracked files.

The default can be changed using the status.showUntrackedFiles configuration
variable documented in git-config(1).

@item  @samp{--ignore-submodules[=<when>]} 
Ignore changes to submodules when looking for changes. <when> can be either
"none", "untracked", "dirty" or "all", which is the default.  Using "none"
will consider the submodule modified when it either contains untracked or
modified files or its HEAD differs from the commit recorded in the
superproject and can be used to override any settings of the @emph{ignore} option
in git-config(1) or gitmodules(5). When "untracked" is used
submodules are not considered dirty when they only contain untracked content
(but they are still scanned for modified content). Using "dirty" ignores all
changes to the work tree of submodules, only changes to the commits stored
in the superproject are shown (this was the behavior before 1.7.0). Using
"all" hides all changes to submodules (and suppresses the output of
submodule summaries when the config option @samp{status.submoduleSummary} is
set).

@item  @samp{--ignored[=<mode>]} 
Show ignored files as well.

The mode parameter is used to specify the handling of ignored files.  It is
optional: it defaults to @emph{traditional}.

The possible options are:

@itemize 

@item
@emph{traditional} - Shows ignored files and directories, unless
--untracked-files=all is specified, in which case
individual files in ignored directories are
displayed.

@item
@emph{no}          - Show no ignored files.

@item
@emph{matching}    - Shows ignored files and directories matching an
ignore pattern.
@end itemize

When @emph{matching} mode is specified, paths that explicitly match an ignored
pattern are shown. If a directory matches an ignore pattern, then it is
shown, but not paths contained in the ignored directory. If a directory does
not match an ignore pattern, but all contents are ignored, then the
directory is not shown, but all contents are shown.

@item  @samp{-z} 
Terminate entries with NUL, instead of LF.  This implies the
@samp{--porcelain=v1} output format if no other format is given.

@item  @samp{--column[=<options>]} 
@itemx  @samp{--no-column} 
Display untracked files in columns. See configuration variable
@samp{column.status} for option syntax. @samp{--column} and @samp{--no-column} without
options are equivalent to @emph{always} and @emph{never} respectively.

@item  @samp{--ahead-behind} 
@itemx  @samp{--no-ahead-behind} 
Display or do not display detailed ahead/behind counts for the branch
relative to its upstream branch.  Defaults to true.

@item  @samp{--renames} 
@itemx  @samp{--no-renames} 
Turn on/off rename detection regardless of user configuration.  See also
git-diff(1) @samp{--no-renames}.

@item  @samp{--find-renames[=<n>]} 
Turn on rename detection, optionally setting the similarity threshold.  See
also git-diff(1) @samp{--find-renames}.

@item  <pathspec>… 
See the @emph{pathspec} entry in gitglossary(7).
@end table

@noindent

@chapheading OUTPUT

The output from this command is designed to be used as a commit template
comment.  The default, long format, is designed to be human readable,
verbose and descriptive.  Its contents and format are subject to change at
any time.

The paths mentioned in the output, unlike many other Git commands, are made
relative to the current directory if you are working in a subdirectory (this
is on purpose, to help cutting and pasting). See the status.relativePaths
config option below.

@noindent

@heading Short Format

In the short-format, the status of each path is shown as one of these forms

@example
XY PATH
XY ORIG_PATH -> PATH
@end example

where @samp{ORIG_PATH} is where the renamed/copied contents came
from. @samp{ORIG_PATH} is only shown when the entry is renamed or copied. The
@samp{XY} is a two-letter status code.

The fields (including the @samp{->}) are separated from each other by a single
space. If a filename contains whitespace or other nonprintable characters,
that field will be quoted in the manner of a C string literal: surrounded by
ASCII double quote (34) characters, and with interior special characters
backslash-escaped.

There are three different types of states that are shown using this format,
and each one uses the @samp{XY} syntax differently:

@itemize 

@item
When a merge is occurring and the merge was successful, or outside of a
merge
situation, @samp{X} shows the status of the index and @samp{Y} shows the status of the
working tree.

@item
When a merge conflict has occurred and has not yet been resolved, @samp{X} and
@samp{Y}
show the state introduced by each head of the merge, relative to the common
ancestor. These paths are said to be @emph{unmerged}.

@item
When a path is untracked, @samp{X} and @samp{Y} are always the same, since they are
unknown to the index. @samp{??} is used for untracked paths. Ignored files are
not listed unless @samp{--ignored} is used; if it is, ignored files are indicated
by @samp{!!}.
@end itemize

Note that the term @emph{merge} here also includes rebases using the default
@samp{--merge} strategy, cherry-picks, and anything else using the merge
machinery.

In the following table, these three classes are shown in separate sections,
and these characters are used for @samp{X} and @samp{Y} fields for the first two
sections that show tracked paths:

@itemize 

@item
' ' = unmodified

@item
@emph{M} = modified

@item
@emph{A} = added

@item
@emph{D} = deleted

@item
@emph{R} = renamed

@item
@emph{C} = copied

@item
@emph{U} = updated but unmerged
@end itemize

@example
X          Y     Meaning
-------------------------------------------------
         [AMD]   not updated
M        [ MD]   updated in index
A        [ MD]   added to index
D                deleted from index
R        [ MD]   renamed in index
C        [ MD]   copied in index
[MARC]           index and work tree matches
[ MARC]     M    work tree changed since index
[ MARC]     D    deleted in work tree
[ D]        R    renamed in work tree
[ D]        C    copied in work tree
-------------------------------------------------
D           D    unmerged, both deleted
A           U    unmerged, added by us
U           D    unmerged, deleted by them
U           A    unmerged, added by them
D           U    unmerged, deleted by us
A           A    unmerged, both added
U           U    unmerged, both modified
-------------------------------------------------
?           ?    untracked
!           !    ignored
-------------------------------------------------
@end example

Submodules have more state and instead report
M    the submodule has a different HEAD than
recorded in the index
m    the submodule has modified content
?    the submodule has untracked files
since modified content or untracked files in a submodule cannot be added
via @samp{git add} in the superproject to prepare a commit.

@emph{m} and @emph{?} are applied recursively. For example if a nested submodule in a
submodule contains an untracked file, this is reported as @emph{?} as well.

If -b is used the short-format status is preceded by a line

@example
## branchname tracking info
@end example

@noindent

@heading Porcelain Format Version 1

Version 1 porcelain format is similar to the short format, but is guaranteed
not to change in a backwards-incompatible way between Git versions or based
on user configuration. This makes it ideal for parsing by scripts.  The
description of the short format above also describes the porcelain format,
with a few exceptions:

@enumerate 

@item
The user’s color.status configuration is not respected; color will always be
off.

@item
The user’s status.relativePaths configuration is not respected; paths shown
will always be relative to the repository root.
@end enumerate

There is also an alternate -z format recommended for machine parsing. In
that format, the status field is the same, but some other things change.
First, the @emph{->} is omitted from rename entries and the field order is
reversed (e.g @emph{from -> to} becomes @emph{to from}). Second, a NUL (ASCII 0)
follows each filename, replacing space as a field separator and the
terminating newline (but a space still separates the status field from the
first filename).  Third, filenames containing special characters are not
specially formatted; no quoting or backslash-escaping is performed.

Any submodule changes are reported as modified @samp{M} instead of @samp{m} or single
@samp{?}.

@noindent

@heading Porcelain Format Version 2

Version 2 format adds more detailed information about the state of the
worktree and changed items.  Version 2 also defines an extensible set of
easy to parse optional headers.

Header lines start with "#" and are added in response to specific command
line arguments.  Parsers should ignore headers they don’t recognize.

@noindent

@subheading Branch Headers

If @samp{--branch} is given, a series of header lines are printed with
information about the current branch.

@example
Line                                     Notes
------------------------------------------------------------
# branch.oid <commit> | (initial)        Current commit.
# branch.head <branch> | (detached)      Current branch.
# branch.upstream <upstream_branch>      If upstream is set.
# branch.ab +<ahead> -<behind>           If upstream is set and
                                         the commit is present.
------------------------------------------------------------
@end example

@noindent

@subheading Changed Tracked Entries

Following the headers, a series of lines are printed for tracked entries.
One of three different line formats may be used to describe an entry
depending on the type of change.  Tracked entries are printed in an
undefined order; parsers should allow for a mixture of the 3 line types in
any order.

Ordinary changed entries have the following format:

@example
1 <XY> <sub> <mH> <mI> <mW> <hH> <hI> <path>
@end example

Renamed or copied entries have the following format:

@example
2 <XY> <sub> <mH> <mI> <mW> <hH> <hI> <X><score> <path><sep><origPath>
@end example

@example
Field       Meaning
--------------------------------------------------------
<XY>        A 2 character field containing the staged and
            unstaged XY values described in the short format,
            with unchanged indicated by a "." rather than
            a space.
<sub>       A 4 character field describing the submodule state.
            "N..." when the entry is not a submodule.
            "S<c><m><u>" when the entry is a submodule.
            <c> is "C" if the commit changed; otherwise ".".
            <m> is "M" if it has tracked changes; otherwise ".".
            <u> is "U" if there are untracked changes; otherwise ".".
<mH>        The octal file mode in HEAD.
<mI>        The octal file mode in the index.
<mW>        The octal file mode in the worktree.
<hH>        The object name in HEAD.
<hI>        The object name in the index.
<X><score>  The rename or copy score (denoting the percentage
            of similarity between the source and target of the
            move or copy). For example "R100" or "C75".
<path>      The pathname.  In a renamed/copied entry, this
            is the target path.
<sep>       When the `-z` option is used, the 2 pathnames are separated
            with a NUL (ASCII 0x00) byte; otherwise, a tab (ASCII 0x09)
            byte separates them.
<origPath>  The pathname in the commit at HEAD or in the index.
            This is only present in a renamed/copied entry, and
            tells where the renamed/copied contents came from.
--------------------------------------------------------
@end example

Unmerged entries have the following format; the first character is a "u" to
distinguish from ordinary changed entries.

@example
u <xy> <sub> <m1> <m2> <m3> <mW> <h1> <h2> <h3> <path>
@end example

@example
Field       Meaning
--------------------------------------------------------
<XY>        A 2 character field describing the conflict type
            as described in the short format.
<sub>       A 4 character field describing the submodule state
            as described above.
<m1>        The octal file mode in stage 1.
<m2>        The octal file mode in stage 2.
<m3>        The octal file mode in stage 3.
<mW>        The octal file mode in the worktree.
<h1>        The object name in stage 1.
<h2>        The object name in stage 2.
<h3>        The object name in stage 3.
<path>      The pathname.
--------------------------------------------------------
@end example

@noindent

@subheading Other Items

Following the tracked entries (and if requested), a series of lines will be
printed for untracked and then ignored items found in the worktree.

Untracked items have the following format:

@example
? <path>
@end example

Ignored items have the following format:

@example
! <path>
@end example

@noindent

@subheading Pathname Format Notes and -z

When the @samp{-z} option is given, pathnames are printed as is and without any
quoting and lines are terminated with a NUL (ASCII 0x00)  byte.

Without the @samp{-z} option, pathnames with "unusual" characters are quoted as
explained for the configuration variable @samp{core.quotePath} (see
git-config(1)).

@noindent

@chapheading CONFIGURATION

The command honors @samp{color.status} (or @samp{status.color} — they mean the same
thing and the latter is kept for backward compatibility) and
@samp{color.status.<slot>} configuration variables to colorize its output.

If the config variable @samp{status.relativePaths} is set to false, then all
paths shown are relative to the repository root, not to the current
directory.

If @samp{status.submoduleSummary} is set to a non zero number or true (identical
to -1 or an unlimited number), the submodule summary will be enabled for the
long format and a summary of commits for modified submodules will be shown
(see --summary-limit option of git-submodule(1)). Please note that
the summary output from the status command will be suppressed for all
submodules when @samp{diff.ignoreSubmodules} is set to @emph{all} or only for those
submodules where @samp{submodule.<name>.ignore=all}. To also view the summary for
ignored submodules you can either use the --ignore-submodules=dirty command
line option or the @emph{git submodule summary} command, which shows a similar
output but does not honor these settings.

@noindent

@chapheading BACKGROUND REFRESH

By default, @samp{git status} will automatically refresh the index, updating the
cached stat information from the working tree and writing out the
result. Writing out the updated index is an optimization that isn’t strictly
necessary (@samp{status} computes the values for itself, but writing them out is
just to save subsequent programs from repeating our computation). When
@samp{status} is run in the background, the lock held during the write may
conflict with other simultaneous processes, causing them to fail. Scripts
running @samp{status} in the background should consider using @samp{git
--no-optional-locks status} (see git(1) for details).

@noindent

@chapheading SEE ALSO

gitignore(5)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-stripspace,,,Top
@chapheading Name

git-stripspace — 不要な空白(whitespace)を削除します

@noindent

@chapheading Synopsis

@display
git stripspace [-s | --strip-comments]
git stripspace [-c | --comment-lines]
@end display


@noindent

@chapheading DESCRIPTION

コミットメッセージ・メモ・タグ・ブランチの説明などのテキストを標準の入力から読み取り、Gitで使用されている作法でクリーンアップします。

引数なしの場合、この作法は以下のようになります:

@itemize 

@item
全ての行の末尾の空白(whitespace)を取り除く

@item
複数の連続する空行を1つの空行に折りたたむ

@item
入力の最初と最後から空行を削除

@item
必要に応じて、欠落している @emph{\n} を最後の行に追加します。
@end itemize

入力がすべて空白文字(whitespace characters)で構成されている場合、出力は生成されません。

@strong{注意} これはメタデータのクリーニングを目的としています。リポジトリ内のパッチまたは
ファイルの空白を修正するには、 git-apply(1) の @samp{--whitespace=fix}
モードをお勧めします。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-s} 
@itemx  @samp{--strip-comments} 
コメント文字で始まるすべての行をスキップして削除します(デフォルトは @emph{#} )。

@item  @samp{-c} 
@itemx  @samp{--comment-lines} 
各行の前にコメント文字と空白を付けます。行は自動的に改行で終了します。 空行では、コメント文字のみが先頭に追加されます。
@end table

@noindent

@chapheading EXAMPLES

以下のようなノイズの多い入力があるとします。 @emph{$} は行の終わりを示しています:

@example
|A brief introduction   $
|   $
|$
|A new paragraph$
|# with a commented-out line    $
|explaining lots of stuff.$
|$
|# An old paragraph, also commented-out. $
|      $
|The end.$
|  $
@end example


@emph{git stripspace} を引数無しで実行すると以下のようになります:

@example
|A brief introduction$
|$
|A new paragraph$
|# with a commented-out line$
|explaining lots of stuff.$
|$
|# An old paragraph, also commented-out.$
|$
|The end.$
@end example


@emph{git stripspace --strip-comments} を使うと以下のようになります:

@example
|A brief introduction$
|$
|A new paragraph$
|explaining lots of stuff.$
|$
|The end.$
@end example


@noindent

@chapheading GIT

Part of the git(1) suite

@node git-submodule,,,Top
@chapheading Name

git-submodule — サブモジュールを初期化、更新、または検査します

@noindent

@chapheading Synopsis

@display
git submodule [--quiet] [--cached]
git submodule [--quiet] add [<options>] [--] <repository> [<path>]
git submodule [--quiet] status [--cached] [--recursive] [--] [<path>…]
git submodule [--quiet] init [--] [<path>…]
git submodule [--quiet] deinit [-f|--force] (--all|[--] <path>…)
git submodule [--quiet] update [<options>] [--] [<path>…]
git submodule [--quiet] set-branch [<options>] [--] <path>
git submodule [--quiet] set-url [--] <path> <newurl>
git submodule [--quiet] summary [<options>] [--] [<path>…]
git submodule [--quiet] foreach [--recursive] <command>
git submodule [--quiet] sync [--recursive] [--] [<path>…]
git submodule [--quiet] absorbgitdirs [--] [<path>…]
@end display


@noindent

@chapheading DESCRIPTION

サブモジュールを検査、更新、管理します。

サブモジュールの詳細については、 gitsubmodules(7) を参照してください。

@noindent

@chapheading COMMANDS

引数なしで、既存のサブモジュールのステータスを示します。 サブモジュールで操作を実行するために、いくつかのサブコマンドを使用できます。

@table @asis

@item  add [-b <branch>] [-f|--force] [--name <name>] [--reference <repository>] [--depth <depth>] [--] <repository> [<path>] 
現在のプロジェクトの次にコミットされるチェンジセットへの指定のパスで、指定のポジトリをサブモジュールとして追加します。現在のプロジェクトは「スーパープロジェクト」と呼ばれます。

<repository> は、新しいサブモジュールの元リポジトリのURLです。これは、絶対URLまたは、( @samp{./} または @samp{../}
で始まる場合、)スーパープロジェクトのデフォルトのリモートリポジトリに相対的な場所のいずれかです(スーパープロジェクト @samp{bar.git}
のすぐ隣にあるリポジトリ @samp{foo.git} を指定するには、 @samp{./foo.git} の代わりに @samp{../foo.git}
を使用する必要があることに注意してください — 相対 URL の規則に従っていれば、期待通りになるでしょう — Git における相対 URL
の評価は相対ディレクトリの場合と同じだからです)。

デフォルトのリモートは、現在のブランチのリモート追跡ブランチのリモートです。そのようなリモート追跡ブランチが存在しないか、または、HEADが切り離されている場合、「origin」がデフォルトのリモートであると見なされます。
スーパープロジェクトにデフォルトのリモートが構成されていない場合、スーパープロジェクトはそれ自身に権限のあるアップストリームであり、代わりに現在の作業ディレクトリが使用されます。

オプションの引数 <path> は、複製されたサブモジュールがスーパープロジェクト内で存在するための相対的な場所です。 <path>
が指定されていない場合、ソースリポジトリの正規部分(canonical part)が使用されます(@samp{/path/to/repo.git}
の場合は「repo」、 @samp{host.xz:foo/.git} の場合は「foo」)。 <path>
が存在し、すでに有効なGitリポジトリである場合、クローンを作成せずにコミット用にステージングされます。 <path> は、 @samp{--name}
を使用して論理名を指定しない限り、構成エントリでサブモジュールの論理名としても使用されます。

指定のURLは、スーパープロジェクトのクローンを作成する後続のユーザーが使用できるように @samp{.gitmodules} に記録されます。
URLがスーパープロジェクトのリポジトリに関連して指定されている場合、スーパープロジェクトとサブモジュールのリポジトリは同じ相対位置にまとめられ、スーパープロジェクトのURLのみを指定する必要があると想定します。
git-submoduleは、 @samp{.gitmodules} の相対URLを使用してサブモジュールを正しく検索します。

@item  status [--cached] [--recursive] [--] [<path>…] 
サブモジュールの状態を表示します。これにより、各サブモジュールの現在チェックアウトされているコミットの SHA-1 が、サブモジュールのパスと
SHA-1 の @emph{git describe} の出力と共に出力されます。各 SHA-1 には、サブモジュールが初期化されていない場合は @emph{-}
、現在チェックアウトされているサブモジュールコミットが、含まれているリポジトリのインデックスにある SHA-1 と一致しない場合は @emph{+}
、サブモジュールにマージ競合がある場合は @emph{U} 、 という接頭辞が付く可能性があります。

@samp{--cached} が指定されている場合、このコマンドは代わりに、各サブモジュールのスーパープロジェクトに記録されたSHA-1を出力します。

@samp{--recursive} が指定されている場合、このコマンドはネストされたサブモジュールに再帰し、それらのステータスも表示します。

あなたがインデックスまたはHEADに記録されたコミットに関して、現在初期化されているサブモジュールの変更のみに関心がある場合は、
git-status(1) および git-diff(1)
もその情報を提供します(サブモジュールの作業ツリーへの変更も報告します)。

@item  init [--] [<path>…] 
インデックスに記録されたサブモジュール(他の場所で追加およびコミットされたサブモジュール)を初期化するには、 @samp{.git/config} に
@samp{submodule.$name.url} を設定します。テンプレートとして @samp{.gitmodules}
と同じ設定を使用します。URLが相対的な場合は、デフォルトのリモートを使用して解決されます。デフォルトのリモートがない場合、現在のリポジトリはアップストリームであると見なされます。

オプションの <path> 引数は、初期化されるサブモジュールを制限します。パスが指定されておらず、 submodule.active
が構成されている場合、アクティブになるように構成されたサブモジュールが初期化されます。そうでない場合、すべてのサブモジュールが初期化されます。

存在する場合は、 @samp{submodule.$name.update} の値もコピーします。このコマンドは、 @samp{.git/config}
の既存の情報を変更しません。あなたは次に、ローカル設定用に @samp{.git/config} のサブモジュールクローンURLをカスタマイズして、 @samp{git
submodule update} に進むことができます。サブモジュールの場所をカスタマイズする予定がない場合は、明示的な「init」ステップなしで
@samp{git submodule update --init} を使用することもできます。

デフォルトのリモートの定義については、add サブコマンドを参照してください。

@item  deinit [-f|--force] (--all|[--] <path>…) 
指定のサブモジュールの登録を解除します。つまり、@samp{.git/config} から @emph{submodule.$name}
セクション全体をその作業ツリーとともに削除します。さらに @samp{git submodule update} と @samp{git submodule
foreach} と @samp{git submodule sync} を呼び出すと、
未登録のサブモジュールが再び初期化されるまでスキップされるので、作業ツリーにあるサブモジュールのローカルチェックアウトをもうこれ以上やりたくない場合は、このコマンドを使用してください。

コマンドをpathspecなしで実行すると、間違いを防ぐために、すべてを無効にするのではなく、エラーが発生します。

@samp{--force} が指定されている場合、サブモジュールの作業ツリーは、ローカルの変更が含まれていても削除されます。

あなたが本当にリポジトリからサブモジュールを削除してコミットしたい場合は、代わりに git-rm(1)
を使用してください。削除オプションについては、 gitsubmodules(7) を参照してください。

@item  update [--init] [--remote] [-N|--no-fetch] [--[no-]recommend-shallow] [-f|--force] [--checkout|--rebase|--merge] [--reference <repository>] [--depth <depth>] [--recursive] [--jobs <n>] [--[no-]single-branch] [--] [<path>…] 
登録されたサブモジュールを更新して、欠落しているサブモジュールのクローンを作成し、サブモジュールで欠落しているコミットをフェッチし、サブモジュールの作業ツリーを更新して、スーパープロジェクトが期待するものと一致させます。「更新」は、コマンドラインオプションと
@samp{submodule.<name>.update} 構成変数の値に応じていくつかの方法で実行できます。
コマンドラインオプションは、構成変数よりも優先されます。 どちらも指定されていない場合、「checkout」が実行されます。 コマンドラインと
@samp{submodule.<name>.update} 構成の両方でサポートされる「update」手順は以下のとおりです:

@table @asis

@item  checkout 
スーパープロジェクトに記録されたコミットは、
切り離されたHEAD(detached HEAD)のサブモジュール(submodule)でチェックアウトされます。
@end table

+
@samp{--force} が指定された場合、サブモジュールは(@samp{git checkout --force}
を使って)チェックアウトされます。たとえ含んでいるリポジトリのインデックスで指定されたコミットが、すでにサブモジュールでチェックアウトしたコミットに一致していてもです。

@table @asis

@item  rebase 
サブモジュールの現在のブランチは、
スーパープロジェクトに記録されたコミットに基づいてリベースされます。

@item  merge 
スーパープロジェクトに記録されたコミットは、
サブモジュールの現在のブランチにマージされます。
@end table

以下の「update」手順は、 @samp{submodule.<name>.update} 構成変数を介してのみ使用できます:

@table @asis

@item  custom command 
単一の引数
(スーパープロジェクトに記録されたコミットのsha1)をとる
任意のシェルコマンドが実行されます。
@samp{submodule.<name>.update} が @samp{!command} に設定されている場合、
感嘆符(@samp{!})の後の残りはカスタムコマンドです。

@item  none 
サブモジュールは更新されません。
@end table

サブモジュールがまだ初期化されておらず、  @samp{.gitmodules} に格納されている設定を使用するだけの場合、 あなたは @samp{--init}
オプションを使用してサブモジュールを自動的に初期化できます。

@samp{--recursive} が指定されている場合、このコマンドは登録されたサブモジュールに再帰し、その中でネストされたサブモジュールを更新します。

@item  set-branch (-b|--branch) <branch> [--] <path> 
@itemx  set-branch (-d|--default) [--] <path> 
サブモジュールのデフォルトのリモート追跡ブランチを設定します。 @samp{--branch} オプションを使用すると、リモートブランチを指定できます。
@samp{--default} オプションを使用すると、 submodule.<name>.branch
構成キーを削除し、これにより、追跡ブランチはデフォルトでリモートの「HEAD」になります。

@item  set-url [--] <path> <newurl> 
指定されたサブモジュールのURLを <newurl> に設定します。そしてその次に、サブモジュールの新しいリモートURL構成を自動的に同期します。

@item  summary [--cached|--files] [(-n|--summary-limit) <n>] [commit] [--] [<path>…] 
指定のコミット(デフォルトはHEAD)と 作業ツリー/インデックス
の間のコミットの概要を表示します。問い合わせがサブモジュールの場合、指定のスーパープロジェクトコミットと、インデックスまたは作業ツリー(@samp{--cached}
によって切り替えられる)の間のサブモジュール内の一連のコミットが表示されます。オプション @samp{--files}
が指定されている場合は、スーパープロジェクトのインデックスとサブモジュールの作業ツリーの間の、サブモジュールでの一連のコミットを表示します(このオプションでは、
@samp{--cached} オプションを使用したり、明示的なコミットを提供したりすることはできません)。

git-diff(1) で @samp{--submodule=log} オプションを使用すると、その情報も提供されます。

@item  foreach [--recursive] <command> 
チェックアウトされた各サブモジュールで任意のシェルコマンドを評価します。このコマンドは、変数 $name と $sm_path と
$displaypath と $sha1 と$toplevel にアクセスできます。$name は、 @samp{.gitmodules}
の関連するサブモジュールセクションの名前で、 $sm_path は、直接のスーパープロジェクト(immediate
superproject)に記録されているサブモジュールのパスで、 $displaypath
には、現在の作業ディレクトリからサブモジュールのルートディレクトリへの相対パスが含まれ、 $sha1 は、直接のスーパープロジェクト(immediate
superproject)に記録されているコミットで、 $toplevel は、直接のスーパープロジェクト(immediate
superproject)のトップレベルへの絶対パスです。Windowsでの @samp{$PATH} との競合を避けるために、 @samp{$path} 変数は
@samp{$sm_path}
変数の非推奨の同義語になっていることに注意してください。スーパープロジェクトで定義されているがチェックアウトされていないサブモジュールは、このコマンドでは無視されます。@samp{--quiet}
が指定されていない限り、foreachはコマンドを評価する前に各サブモジュールの名前を出力します。  @samp{--recursive}
が指定されている場合、サブモジュールは再帰的にトラバースされます(つまり、指定のシェルコマンドはネストされたサブモジュールでも評価されます)。
サブモジュールのコマンドからゼロ以外の値が返されると、処理が終了(terminate)します。これは、コマンドの最後に @samp{|| :}
を追加することでオーバーライドできます。

例として、以下のコマンドは、各サブモジュールのパスと現在チェックアウトされているコミットを表示します:

@example
git submodule foreach 'echo $sm_path `git rev-parse HEAD`'
@end example


@item  sync [--recursive] [--] [<path>…] 
サブモジュールのリモートURL構成設定を @samp{.gitmodules} で指定された値に同期します。 これは、@samp{.git/config}
にすでにURLエントリがあるサブモジュールにのみ影響します(これは、初期化されたとき、または新しく追加されたときの場合です)。これは、サブモジュールのURLがアップストリームで変更され、それに応じてローカルリポジトリを更新する必要がある場合に役立ちます。

@samp{git submodule sync} はすべてのサブモジュールを同期しますが、 @samp{git submodule sync -- A} はサブモジュール
"A" のみを同期します。

@samp{--recursive} が指定されている場合、このコマンドは登録されたサブモジュールに再帰し、その中でネストされたサブモジュールを同期します。

@item  absorbgitdirs 
サブモジュールのgitディレクトリがサブモジュール内にある場合、サブモジュールのgitディレクトリをそのスーパープロジェクトの
@samp{$GIT_DIR/modules} パスに移動し、次に、 @samp{core.worktree}
を設定して、gitディレクトリとその作業ディレクトリを接続し、そして、スーパープロジェクトのgitディレクトリに埋め込んだサブモジュールのgitディレクトリを指す
.git ファイルを追加します。

独立して複製され、後でサブモジュールまたは古いセットアップとして追加されたリポジトリでは、スーパープロジェクトのgitディレクトリに埋め込まれるのではなく、サブモジュール内にサブモジュールのgitディレクトリがあります。

このコマンドはデフォルトで再帰的に実行されます。
@end table

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-q} 
@itemx  @samp{--quiet} 
エラーメッセージのみを出力します。

@item  @samp{--progress} 
このオプションは、addおよびupdateコマンドにのみ有効です。 @samp{-q}
が指定されていない限り、進行状況は、端末に接続されている場合、デフォルトで標準エラーストリームに報告されます。このフラグは、標準エラーストリームが端末に送信されていない場合でも、進行状況を強制します。

@item  @samp{--all} 
このオプションは、deinitコマンドに対してのみ有効です。 作業ツリーのすべてのサブモジュールの登録を解除します。

@item  @samp{-b <branch>} 
@itemx  @samp{--branch <branch>} 
サブモジュールとして追加するリポジトリのブランチ。ブランチの名前は、@samp{update --remote} の @samp{.gitmodules} に
@samp{submodule.<name>.branch} として記録されます。 特別な値 @samp{.}
は、サブモジュール内のブランチの名前が現在のリポジトリ内の現在のブランチと同じ名前でなければならないことを示すために使用されます。オプションが指定されていない場合、デフォルトでリモートの「HEAD」になります。

@item  @samp{-f} 
@itemx  @samp{--force} 
このオプションは、addとdeinitとupdateコマンドにのみ有効です。addを実行するときは、無視されるサブモジュールパスの追加を許可します。
deinitを実行するときは、ローカルの変更が含まれている場合でも、サブモジュールの作業ツリーが削除されます。
updateを実行するときは(checkout手順でのみ有効)、別のコミットに切り替えるときにサブモジュールのローカル変更を破棄し、そして、含まれているリポジトリのインデックスにリストされているコミットがサブモジュールでチェックアウトされたコミットと一致する場合でも、常にサブモジュールでチェックアウト操作を実行します。

@item  @samp{--cached} 
このオプションは、statusコマンドとsummaryコマンドにのみ有効です。これらのコマンドは通常、サブモジュールHEADにあるコミットを使用しますが、このオプションを使用すると、代わりにインデックスに格納されているコミットが使用されます。

@item  @samp{--files} 
このオプションは、summaryコマンドにのみ有効です。
このコマンドを使用すると、インデックス内のコミットと、サブモジュールHEAD内のコミットが比較されます。

@item  @samp{-n} 
@itemx  @samp{--summary-limit} 
このオプションは、summaryコマンドにのみ有効です。 サマリーサイズ(合計で表示されるコミットの数)を制限します。
0を指定すると、要約が無効になります。 負の数は無制限(デフォルト)を意味します。この制限は、変更されたサブモジュールにのみ適用されます。
追加/削除/タイプ変更された サブモジュールのサイズは常に1に制限されます。

@item  @samp{--remote} 
このオプションは、updateコマンドに対してのみ有効です。
スーパープロジェクトの記録されたSHA-1を使用してサブモジュールを更新する代わりに、サブモジュールのリモート追跡ブランチのステータスを使用します。
使用されるリモートはブランチのリモート(@samp{branch.<name>.remote})で、デフォルトは @samp{origin} です。
使用されるリモートブランチのデフォルトはリモートの @samp{HEAD} ですが、ブランチ名は、 @samp{.git / config} または
@samp{.gitmodules} のいずれかで @samp{submodule.<name>.branch}
オプションを設定することでオーバーライドできます(@samp{.git / config} が優先されます)。

これは、サポートされている更新手順(@samp{--checkout} 、@samp{--rebase}
など)のいずれでも機能します。唯一の変更は、ターゲットSHA-1のソースです。 たとえば、 @samp{submodule update --remote
--merge} はアップストリームのサブモジュールの変更をサブモジュールにマージし、 @samp{submodule update --merge}
はスーパープロジェクトのgitlinkの変更をサブモジュールにマージします。

現在の追跡ブランチの状態を確認するために、 @samp{update --remote}
はSHA-1を計算する前にサブモジュールのリモートリポジトリをフェッチします。フェッチしたくない場合は、 @samp{submodule update
--remote --no-fetch} を使用する必要があります。

このオプションを使用して、アップストリームサブプロジェクトからの変更をサブモジュールの現在のHEADと統合します。または、サブモジュールから @samp{git
pull} を実行することもできます。これは、リモートブランチ名を除いて同等です。@samp{update --remote}
はデフォルトのアップストリームリポジトリと @samp{submodule.<name>.branch} を使用し、 @samp{git pull} はサブモジュールの
@samp{branch.<name>.merge} を使用します。スーパープロジェクトでデフォルトのアップストリームブランチを配布する場合は
@samp{submodule.<name>.branch} を、サブモジュール自体で作業しているときによりネイティブな感じが必要な場合は
@samp{branch.<name>.merge} を使用してください。

@item  @samp{-N} 
@itemx  @samp{--no-fetch} 
このオプションは、updateコマンドに対してのみ有効です。リモートサイトから新しいオブジェクトをフェッチしません。

@item  @samp{--checkout} 
このオプションは、updateコマンドに対してのみ有効です。サブモジュールの切り離されたHEAD(detached
HEAD)のスーパープロジェクトに記録されたコミットをチェックアウトします。これはデフォルトの動作です。このオプションの主な用途は、
@samp{checkout} 以外の値に設定されたときに @samp{submodule.$name.update} をオーバーライドすることです。  キー
@samp{submodule.$name.update} が明示的に設定されていないか、 @samp{checkout}
に設定されている場合、このオプションが暗黙に指定されています。

@item  @samp{--merge} 
このオプションは、updateコマンドに対してのみ有効です。 スーパープロジェクトに記録されたコミットをサブモジュールの現在のブランチにマージします。
このオプションを指定すると、サブモジュールのHEADは切り離されません。
マージの失敗によりこの処理が妨げられる場合は、通常の競合解決ツールを使用して、サブモジュール内で発生する競合を解決する必要があります。 キー
@samp{submodule.$name.update} が @samp{merge} に設定されている場合、このオプションが暗黙に指定されます。

@item  @samp{--rebase} 
このオプションは、updateコマンドに対してのみ有効です。 現在のブランチをスーパープロジェクトに記録されたコミットにリベースします。
このオプションを指定すると、サブモジュールのHEADは切り離されません。 マージの失敗によりこのプロセスが妨げられる場合は、
git-rebase(1) を使用してこれらの失敗を解決する必要があります。 キー @samp{submodule.$name.update} が
@samp{rebase} に設定されている場合、このオプションが暗黙に指定されます。

@item  @samp{--init} 
このオプションは、updateコマンドに対してのみ有効です。更新する前に、これまで @samp{git submodule init}
が呼び出されていないすべてのサブモジュールを初期化します。

@item  @samp{--name} 
このオプションは、addコマンドに対してのみ有効です。 サブモジュールの名前を、デフォルトのパスではなく、指定の文字列に設定します。
名前はディレクトリ名として有効である必要があり、 @samp{/} で終わらせることはできません。

@item  @samp{--reference <repository>} 
このオプションは、addとupdateコマンドにのみ有効です。これらのコマンドでは、リモートリポジトリのクローンを作成する必要がある場合があります。その場合、このオプションを
git-clone(1) コマンドに渡します。

@strong{注意}: git-clone(1) の @samp{--reference} と @samp{--shared} と @samp{--dissociate}
オプションに関するNOTEを注意深く読んでいない限り、
このオプションを使用しないでください。

@item  @samp{--dissociate} 
このオプションは、addとupdateコマンドにのみ有効です。これらのコマンドでは、リモートリポジトリのクローンを作成する必要がある場合があります。その場合、このオプションを
git-clone(1) コマンドに渡します。

@strong{注意}: @samp{--reference} オプションについては NOTE を参照してください。

@item  @samp{--recursive} 
このオプションは、foreachとupdateとstatusとsyncコマンドにのみ有効です。サブモジュールを再帰的にトラバースします。この操作は、現在のリポジトリのサブモジュールだけでなく、それらのサブモジュール内のネストされたサブモジュール(など)でも実行されます。

@item  @samp{--depth} 
このオプションは、addとupdateコマンドに有効です。 指定のリビジョン数に切り捨てられた履歴を持つ「浅い」クローン(shallow
clone)を作成します。 git-clone(1) を参照してください。

@item  @samp{--[no-]recommend-shallow} 
このオプションは、updateコマンドに対してのみ有効です。サブモジュールの初期クローンは、デフォルトで @samp{.gitmodules}
ファイルによって提供される推奨される @samp{submodule.<name>.shallow} を使用します。
提案を無視するには、@samp{--no-recommend-shallow} を使用します。

@item  @samp{-j <n>} 
@itemx  @samp{--jobs <n>} 
このオプションは、updateコマンドに対してのみ有効です。多くのジョブと並行して新しいサブモジュールのクローンを作成します。デフォルトは
@samp{submodule.fetchJobs} オプションです。

@item  @samp{--[no-]single-branch} 
このオプションは、updateコマンドに対してのみ有効です。 HEAD または、 @samp{--branch}
で指定されたブランチは、更新中に1つのブランチのみを複製します

@item  <path>… 
サブモジュールへのパス。これを指定すると、指定したパスで見つかったサブモジュールでのみ動作するようにコマンドが制限されます。(この引数はaddでは必須です)。
@end table

@noindent

@chapheading FILES

サブモジュールを初期化するとき、含まれているリポジトリの最上位ディレクトリにある @samp{.gitmodules}
ファイルを使用して、各サブモジュールのURLを検索します。 このファイルは、 @samp{$GIT_DIR/config}
と同じ方法でフォーマットする必要があります。各サブモジュールURLのキーは、「submodule.$name.url」です。 詳細については、
gitmodules(5) を参照してください。

@noindent

@chapheading SEE ALSO

gitsubmodules(7), gitmodules(5).

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-svn,,,Top
@chapheading Name

git-svn — Bidirectional operation between a Subversion repository and Git

@noindent

@chapheading Synopsis

@display
git svn <command> [<options>] [<arguments>]
@end display


@noindent

@chapheading DESCRIPTION

@emph{git svn} is a simple conduit for changesets between Subversion and Git.  It
provides a bidirectional flow of changes between a Subversion and a Git
repository.

@emph{git svn} can track a standard Subversion repository, following the common
"trunk/branches/tags" layout, with the --stdlayout option.  It can also
follow branches and tags in any layout with the -T/-t/-b options (see
options to @emph{init} below, and also the @emph{clone} command).

Once tracking a Subversion repository (with any of the above methods), the
Git repository can be updated from Subversion by the @emph{fetch} command and
Subversion updated from Git by the @emph{dcommit} command.

@noindent

@chapheading COMMANDS

@table @asis

@item  @emph{init} 
Initializes an empty Git repository with additional metadata directories for
@emph{git svn}.  The Subversion URL may be specified as a command-line argument,
or as full URL arguments to -T/-t/-b.  Optionally, the target directory to
operate on can be specified as a second argument.  Normally this command
initializes the current directory.

@table @asis

@item  -T<trunk_subdir> 
@itemx  --trunk=<trunk_subdir> 
@itemx  -t<tags_subdir> 
@itemx  --tags=<tags_subdir> 
@itemx  -b<branches_subdir> 
@itemx  --branches=<branches_subdir> 
@itemx  -s 
@itemx  --stdlayout 
These are optional command-line options for init.  Each of these flags can
point to a relative repository path (--tags=project/tags) or a full url
(--tags=https://foo.org/project/tags).  You can specify more than one --tags
and/or --branches options, in case your Subversion repository places tags or
branches under multiple paths.  The option --stdlayout is a shorthand way of
setting trunk,tags,branches as the relative paths, which is the Subversion
default. If any of the other options are given as well, they take
precedence.

@item  --no-metadata 
Set the @emph{noMetadata} option in the [svn-remote] config.  This option is not
recommended, please read the @emph{svn.noMetadata} section of this manpage before
using this option.

@item  --use-svm-props 
Set the @emph{useSvmProps} option in the [svn-remote] config.

@item  --use-svnsync-props 
Set the @emph{useSvnsyncProps} option in the [svn-remote] config.

@item  --rewrite-root=<URL> 
Set the @emph{rewriteRoot} option in the [svn-remote] config.

@item  --rewrite-uuid=<UUID> 
Set the @emph{rewriteUUID} option in the [svn-remote] config.

@item  --username=<user> 
For transports that SVN handles authentication for (http, https, and plain
svn), specify the username.  For other transports (e.g. @samp{svn+ssh://}), you
must include the username in the URL,
e.g. @samp{svn+ssh://foo@@svn.bar.com/project}

@item  --prefix=<prefix> 
This allows one to specify a prefix which is prepended to the names of
remotes if trunk/branches/tags are specified.  The prefix does not
automatically include a trailing slash, so be sure you include one in the
argument if that is what you want.  If --branches/-b is specified, the
prefix must include a trailing slash.  Setting a prefix (with a trailing
slash) is strongly encouraged in any case, as your SVN-tracking refs will
then be located at "refs/remotes/$prefix/@strong{", which is compatible with Git’s
own remote-tracking ref layout (refs/remotes/$remote/}). Setting a prefix is
also useful if you wish to track multiple projects that share a common
repository.  By default, the prefix is set to @emph{origin/}.

@quotation

@strong{Note}

Before Git v2.0, the default prefix was "" (no prefix). This meant that
SVN-tracking refs were put at "refs/remotes/*", which is incompatible with
how Git’s own remote-tracking refs are organized.  If you still want the old
default, you can get it by passing @samp{--prefix ""} on the command line
(@samp{--prefix=""} may not work if your Perl’s Getopt::Long is < v2.37).
@end quotation

@item  --ignore-refs=<regex> 
When passed to @emph{init} or @emph{clone} this regular expression will be preserved
as a config key.  See @emph{fetch} for a description of @samp{--ignore-refs}.

@item  --ignore-paths=<regex> 
When passed to @emph{init} or @emph{clone} this regular expression will be preserved
as a config key.  See @emph{fetch} for a description of @samp{--ignore-paths}.

@item  --include-paths=<regex> 
When passed to @emph{init} or @emph{clone} this regular expression will be preserved
as a config key.  See @emph{fetch} for a description of @samp{--include-paths}.

@item  --no-minimize-url 
When tracking multiple directories (using --stdlayout, --branches, or --tags
options), git svn will attempt to connect to the root (or highest allowed
level) of the Subversion repository.  This default allows better tracking of
history if entire projects are moved within a repository, but may cause
issues on repositories where read access restrictions are in place.  Passing
@samp{--no-minimize-url} will allow git svn to accept URLs as-is without
attempting to connect to a higher level directory.  This option is off by
default when only one URL/branch is tracked (it would do little good).
@end table

@item  @emph{fetch} 
Fetch unfetched revisions from the Subversion remote we are tracking.  The
name of the [svn-remote "…"] section in the $GIT_DIR/config file may be
specified as an optional command-line argument.

This automatically updates the rev_map if needed (see
@emph{$GIT_DIR/svn/**/.rev_map.*} in the FILES section below for details).

@table @asis

@item  --localtime 
Store Git commit times in the local time zone instead of UTC.  This makes
@emph{git log} (even without --date=local) show the same times that @samp{svn log}
would in the local time zone.

This doesn’t interfere with interoperating with the Subversion repository
you cloned from, but if you wish for your local Git repository to be able to
interoperate with someone else’s local Git repository, either don’t use this
option or you should both use it in the same local time zone.

@item  --parent 
Fetch only from the SVN parent of the current HEAD.

@item  --ignore-refs=<regex> 
Ignore refs for branches or tags matching the Perl regular expression. A
"negative look-ahead assertion" like
@samp{^refs/remotes/origin/(?!tags/wanted-tag|wanted-branch).*$} can be used to
allow only certain refs.

@display
config key: svn-remote.<name>.ignore-refs
@end display


If the ignore-refs configuration key is set, and the command-line option is
also given, both regular expressions will be used.

@item  --ignore-paths=<regex> 
This allows one to specify a Perl regular expression that will cause
skipping of all matching paths from checkout from SVN.  The @samp{--ignore-paths}
option should match for every @emph{fetch} (including automatic fetches due to
@emph{clone}, @emph{dcommit}, @emph{rebase}, etc) on a given repository.

@display
config key: svn-remote.<name>.ignore-paths
@end display


If the ignore-paths configuration key is set, and the command-line option is
also given, both regular expressions will be used.

Examples:

@table @asis

@item  Skip "doc*" directory for every fetch 
@example
--ignore-paths="^doc"
@end example


@item  Skip "branches" and "tags" of first level directories 
@example
--ignore-paths="^[^/]+/(?:branches|tags)"
@end example

@end table

@item  --include-paths=<regex> 
This allows one to specify a Perl regular expression that will cause the
inclusion of only matching paths from checkout from SVN.  The
@samp{--include-paths} option should match for every @emph{fetch} (including automatic
fetches due to @emph{clone}, @emph{dcommit}, @emph{rebase}, etc) on a given
repository. @samp{--ignore-paths} takes precedence over @samp{--include-paths}.

@display
config key: svn-remote.<name>.include-paths
@end display


@item  --log-window-size=<n> 
Fetch <n> log entries per request when scanning Subversion history.  The
default is 100. For very large Subversion repositories, larger values may be
needed for @emph{clone}/@emph{fetch} to complete in reasonable time. But overly large
values may lead to higher memory usage and request timeouts.
@end table

@item  @emph{clone} 
Runs @emph{init} and @emph{fetch}.  It will automatically create a directory based on
the basename of the URL passed to it; or if a second argument is passed; it
will create a directory and work within that.  It accepts all arguments that
the @emph{init} and @emph{fetch} commands accept; with the exception of @samp{--fetch-all}
and @samp{--parent}.  After a repository is cloned, the @emph{fetch} command will be
able to update revisions without affecting the working tree; and the
@emph{rebase} command will be able to update the working tree with the latest
changes.

@table @asis

@item  --preserve-empty-dirs 
Create a placeholder file in the local Git repository for each empty
directory fetched from Subversion.  This includes directories that become
empty by removing all entries in the Subversion repository (but not the
directory itself).  The placeholder files are also tracked and removed when
no longer necessary.

@item  --placeholder-filename=<filename> 
Set the name of placeholder files created by --preserve-empty-dirs.
Default: ".gitignore"
@end table

@item  @emph{rebase} 
This fetches revisions from the SVN parent of the current HEAD and rebases
the current (uncommitted to SVN) work against it.

This works similarly to @samp{svn update} or @emph{git pull} except that it preserves
linear history with @emph{git rebase} instead of @emph{git merge} for ease of
dcommitting with @emph{git svn}.

This accepts all options that @emph{git svn fetch} and @emph{git rebase} accept.
However, @samp{--fetch-all} only fetches from the current [svn-remote], and not
all [svn-remote] definitions.

Like @emph{git rebase}; this requires that the working tree be clean and have no
uncommitted changes.

This automatically updates the rev_map if needed (see
@emph{$GIT_DIR/svn/**/.rev_map.*} in the FILES section below for details).

@table @asis

@item  -l 
@itemx  --local 
Do not fetch remotely; only run @emph{git rebase} against the last fetched commit
from the upstream SVN.
@end table

@item  @emph{dcommit} 
Commit each diff from the current branch directly to the SVN repository, and
then rebase or reset (depending on whether or not there is a diff between
SVN and head).  This will create a revision in SVN for each commit in Git.

When an optional Git branch name (or a Git commit object name)  is specified
as an argument, the subcommand works on the specified branch, not on the
current branch.

Use of @emph{dcommit} is preferred to @emph{set-tree} (below).

@table @asis

@item  --no-rebase 
After committing, do not rebase or reset.

@item  --commit-url <URL> 
Commit to this SVN URL (the full path).  This is intended to allow existing
@emph{git svn} repositories created with one transport method (e.g. @samp{svn://} or
@samp{http://} for anonymous read) to be reused if a user is later given access
to an alternate transport method (e.g. @samp{svn+ssh://} or @samp{https://}) for
commit.

@display
config key: svn-remote.<name>.commiturl
config key: svn.commiturl (overwrites all svn-remote.<name>.commiturl options)
@end display


Note that the SVN URL of the commiturl config key includes the SVN branch.
If you rather want to set the commit URL for an entire SVN repository use
svn-remote.<name>.pushurl instead.

Using this option for any other purpose (don’t ask) is very strongly
discouraged.

@item  --mergeinfo=<mergeinfo> 
Add the given merge information during the dcommit
(e.g. @samp{--mergeinfo="/branches/foo:1-10"}). All svn server versions can store
this information (as a property), and svn clients starting from version 1.5
can make use of it. To specify merge information from multiple branches, use
a single space character between the branches
(@samp{--mergeinfo="/branches/foo:1-10 /branches/bar:3,5-6,8"})

@display
config key: svn.pushmergeinfo
@end display


This option will cause git-svn to attempt to automatically populate the
svn:mergeinfo property in the SVN repository when possible. Currently, this
can only be done when dcommitting non-fast-forward merges where all parents
but the first have already been pushed into SVN.

@item  --interactive 
Ask the user to confirm that a patch set should actually be sent to SVN.
For each patch, one may answer "yes" (accept this patch), "no" (discard this
patch), "all" (accept all patches), or "quit".

@emph{git svn dcommit} returns immediately if answer is "no" or "quit", without
committing anything to SVN.
@end table

@item  @emph{branch} 
Create a branch in the SVN repository.

@table @asis

@item  -m 
@itemx  --message 
Allows to specify the commit message.

@item  -t 
@itemx  --tag 
Create a tag by using the tags_subdir instead of the branches_subdir
specified during git svn init.

@item  -d<path> 
@itemx  --destination=<path> 
If more than one --branches (or --tags) option was given to the @emph{init} or
@emph{clone} command, you must provide the location of the branch (or tag) you
wish to create in the SVN repository.  <path> specifies which path to use to
create the branch or tag and should match the pattern on the left-hand side
of one of the configured branches or tags refspecs.  You can see these
refspecs with the commands

@example
git config --get-all svn-remote.<name>.branches git config --get-all
svn-remote.<name>.tags
@end example

where <name> is the name of the SVN repository as specified by the -R option
to @emph{init} (or "svn" by default).

@item  --username 
Specify the SVN username to perform the commit as.  This option overrides
the @emph{username} configuration property.

@item  --commit-url 
Use the specified URL to connect to the destination Subversion repository.
This is useful in cases where the source SVN repository is read-only.  This
option overrides configuration property @emph{commiturl}.

@example
git config --get-all svn-remote.<name>.commiturl
@end example

@item  --parents 
Create parent folders. This parameter is equivalent to the parameter
--parents on svn cp commands and is useful for non-standard repository
layouts.
@end table

@item  @emph{tag} 
Create a tag in the SVN repository. This is a shorthand for @emph{branch -t}.

@item  @emph{log} 
This should make it easy to look up svn log messages when svn users refer to
-r/--revision numbers.

The following features from ‘svn log’ are supported:

@table @asis

@item  -r <n>[:<n>] 
@itemx  --revision=<n>[:<n>] 
is supported, non-numeric args are not: HEAD, NEXT, BASE, PREV, etc …

@item  -v 
@itemx  --verbose 
it’s not completely compatible with the --verbose output in svn log, but
reasonably close.

@item  --limit=<n> 
is NOT the same as --max-count, doesn’t count merged/excluded commits

@item  --incremental 
supported
@end table

New features:

@table @asis

@item  --show-commit 
shows the Git commit sha1, as well

@item  --oneline 
our version of --pretty=oneline
@end table

@quotation

@strong{Note}

SVN itself only stores times in UTC and nothing else. The regular svn client
converts the UTC time to the local time (or based on the TZ=
environment). This command has the same behaviour.
@end quotation

Any other arguments are passed directly to @emph{git log}

@item  @emph{blame} 
Show what revision and author last modified each line of a file. The output
of this mode is format-compatible with the output of ‘svn blame’ by
default. Like the SVN blame command, local uncommitted changes in the
working tree are ignored; the version of the file in the HEAD revision is
annotated. Unknown arguments are passed directly to @emph{git blame}.

@table @asis

@item  --git-format 
Produce output in the same format as @emph{git blame}, but with SVN revision
numbers instead of Git commit hashes. In this mode, changes that haven’t
been committed to SVN (including local working-copy edits) are shown as
revision 0.
@end table

@item  @emph{find-rev} 
When given an SVN revision number of the form @emph{rN}, returns the
corresponding Git commit hash (this can optionally be followed by a tree-ish
to specify which branch should be searched).  When given a tree-ish, returns
the corresponding SVN revision number.

@table @asis

@item  -B 
@itemx  --before 
Don’t require an exact match if given an SVN revision, instead find the
commit corresponding to the state of the SVN repository (on the current
branch) at the specified revision.

@item  -A 
@itemx  --after 
Don’t require an exact match if given an SVN revision; if there is not an
exact match return the closest match searching forward in the history.
@end table

@item  @emph{set-tree} 
You should consider using @emph{dcommit} instead of this command.  Commit
specified commit or tree objects to SVN.  This relies on your imported fetch
data being up to date.  This makes absolutely no attempts to do patching
when committing to SVN, it simply overwrites files with those specified in
the tree or commit.  All merging is assumed to have taken place
independently of @emph{git svn} functions.

@item  @emph{create-ignore} 
Recursively finds the svn:ignore property on directories and creates
matching .gitignore files. The resulting files are staged to be committed,
but are not committed. Use -r/--revision to refer to a specific revision.

@item  @emph{show-ignore} 
Recursively finds and lists the svn:ignore property on directories.  The
output is suitable for appending to the $GIT_DIR/info/exclude file.

@item  @emph{mkdirs} 
Attempts to recreate empty directories that core Git cannot track based on
information in $GIT_DIR/svn/<refname>/unhandled.log files.  Empty
directories are automatically recreated when using "git svn clone" and "git
svn rebase", so "mkdirs" is intended for use after commands like "git
checkout" or "git reset".  (See the svn-remote.<name>.automkdirs config file
option for more information.)

@item  @emph{commit-diff} 
Commits the diff of two tree-ish arguments from the command-line.  This
command does not rely on being inside a @samp{git svn init}-ed repository.  This
command takes three arguments, (a) the original tree to diff against, (b)
the new tree result, (c) the URL of the target Subversion repository.  The
final argument (URL) may be omitted if you are working from a @emph{git
svn}-aware repository (that has been @samp{init}-ed with @emph{git svn}).  The
-r<revision> option is required for this.

The commit message is supplied either directly with the @samp{-m} or @samp{-F} option,
or indirectly from the tag or commit when the second tree-ish denotes such
an object, or it is requested by invoking an editor (see @samp{--edit} option
below).

@table @asis

@item  -m <msg> 
@itemx  --message=<msg> 
Use the given @samp{msg} as the commit message. This option disables the @samp{--edit}
option.

@item  -F <filename> 
@itemx  --file=<filename> 
Take the commit message from the given file. This option disables the
@samp{--edit} option.
@end table

@item  @emph{info} 
Shows information about a file or directory similar to what ‘svn info’
provides.  Does not currently support a -r/--revision argument.  Use the
--url option to output only the value of the @emph{URL:} field.

@item  @emph{proplist} 
Lists the properties stored in the Subversion repository about a given file
or directory.  Use -r/--revision to refer to a specific Subversion revision.

@item  @emph{propget} 
Gets the Subversion property given as the first argument, for a file.  A
specific revision can be specified with -r/--revision.

@item  @emph{propset} 
Sets the Subversion property given as the first argument, to the value given
as the second argument for the file given as the third argument.

Example:

@example
git svn propset svn:keywords "FreeBSD=%H" devel/py-tipper/Makefile
@end example


This will set the property @emph{svn:keywords} to @emph{FreeBSD=%H} for the file
@emph{devel/py-tipper/Makefile}.

@item  @emph{show-externals} 
Shows the Subversion externals.  Use -r/--revision to specify a specific
revision.

@item  @emph{gc} 
Compress $GIT_DIR/svn/<refname>/unhandled.log files and remove
$GIT_DIR/svn/<refname>/index files.

@item  @emph{reset} 
Undoes the effects of @emph{fetch} back to the specified revision.  This allows
you to re-@emph{fetch} an SVN revision.  Normally the contents of an SVN revision
should never change and @emph{reset} should not be necessary.  However, if SVN
permissions change, or if you alter your --ignore-paths option, a @emph{fetch}
may fail with "not found in commit" (file not previously visible) or
"checksum mismatch" (missed a modification).  If the problem file cannot be
ignored forever (with --ignore-paths) the only way to repair the repo is to
use @emph{reset}.

Only the rev_map and refs/remotes/git-svn are changed (see
@emph{$GIT_DIR/svn/**/.rev_map.*} in the FILES section below for details).
Follow @emph{reset} with a @emph{fetch} and then @emph{git reset} or @emph{git rebase} to move
local branches onto the new tree.

@table @asis

@item  -r <n> 
@itemx  --revision=<n> 
Specify the most recent revision to keep.  All later revisions are
discarded.

@item  -p 
@itemx  --parent 
Discard the specified revision as well, keeping the nearest parent instead.

@item  Example: 
Assume you have local changes in "master", but you need to refetch "r2".

@example
    r1---r2---r3 remotes/git-svn
                \
                 A---B master
@end example


Fix the ignore-paths or SVN permissions problem that caused "r2" to be
incomplete in the first place.  Then:

@display
git svn reset -r2 -p
git svn fetch
@end display


@example
    r1---r2'--r3' remotes/git-svn
      \
       r2---r3---A---B master
@end example


Then fixup "master" with @emph{git rebase}.  Do NOT use @emph{git merge} or your
history will not be compatible with a future @emph{dcommit}!

@display
git rebase --onto remotes/git-svn A^ master
@end display


@example
    r1---r2'--r3' remotes/git-svn
                \
                 A'--B' master
@end example

@end table
@end table

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--shared[=(false|true|umask|group|all|world|everybody)]} 
@itemx  @samp{--template=<template_directory>} 
Only used with the @emph{init} command.  These are passed directly to @emph{git init}.

@item  @samp{-r <arg>} 
@itemx  @samp{--revision <arg>} 
Used with the @emph{fetch} command.

This allows revision ranges for partial/cauterized history to be supported.
$NUMBER, $NUMBER1:$NUMBER2 (numeric ranges), $NUMBER:HEAD, and BASE:$NUMBER
are all supported.

This can allow you to make partial mirrors when running fetch; but is
generally not recommended because history will be skipped and lost.

@item  - 
@itemx  @samp{--stdin} 
Only used with the @emph{set-tree} command.

Read a list of commits from stdin and commit them in reverse order.  Only
the leading sha1 is read from each line, so @emph{git rev-list --pretty=oneline}
output can be used.

@item  @samp{--rmdir} 
Only used with the @emph{dcommit}, @emph{set-tree} and @emph{commit-diff} commands.

Remove directories from the SVN tree if there are no files left behind.  SVN
can version empty directories, and they are not removed by default if there
are no files left in them.  Git cannot version empty directories.  Enabling
this flag will make the commit to SVN act like Git.

@display
config key: svn.rmdir
@end display


@item  @samp{-e} 
@itemx  @samp{--edit} 
Only used with the @emph{dcommit}, @emph{set-tree} and @emph{commit-diff} commands.

Edit the commit message before committing to SVN.  This is off by default
for objects that are commits, and forced on when committing tree objects.

@display
config key: svn.edit
@end display


@item  @samp{-l<num>} 
@itemx  @samp{--find-copies-harder} 
Only used with the @emph{dcommit}, @emph{set-tree} and @emph{commit-diff} commands.

They are both passed directly to @emph{git diff-tree}; see
git-diff-tree(1) for more information.

@display
config key: svn.l
config key: svn.findcopiesharder
@end display


@item  @samp{-A<filename>} 
@itemx  @samp{--authors-file=<filename>} 
Syntax is compatible with the file used by @emph{git cvsimport} but an empty
email address can be supplied with @emph{<>}:

@example
        loginname = Joe User <user@@example.com>
@end example


If this option is specified and @emph{git svn} encounters an SVN committer name
that does not exist in the authors-file, @emph{git svn} will abort operation. The
user will then have to add the appropriate entry.  Re-running the previous
@emph{git svn} command after the authors-file is modified should continue
operation.

@display
config key: svn.authorsfile
@end display


@item  @samp{--authors-prog=<filename>} 
If this option is specified, for each SVN committer name that does not exist
in the authors file, the given file is executed with the committer name as
the first argument.  The program is expected to return a single line of the
form "Name <email>" or "Name <>", which will be treated as if included in
the authors file.

Due to historical reasons a relative @emph{filename} is first searched relative
to the current directory for @emph{init} and @emph{clone} and relative to the root of
the working tree for @emph{fetch}. If @emph{filename} is not found, it is searched
like any other command in @emph{$PATH}.

@display
config key: svn.authorsProg
@end display


@item  @samp{-q} 
@itemx  @samp{--quiet} 
Make @emph{git svn} less verbose. Specify a second time to make it even less
verbose.

@item  @samp{-m} 
@itemx  @samp{--merge} 
@itemx  @samp{-s<strategy>} 
@itemx  @samp{--strategy=<strategy>} 
@itemx  @samp{-p} 
@itemx  @samp{--rebase-merges} 
@itemx  @samp{--preserve-merges (DEPRECATED)} 
These are only used with the @emph{dcommit} and @emph{rebase} commands.

Passed directly to @emph{git rebase} when using @emph{dcommit} if a @emph{git reset} cannot
be used (see @emph{dcommit}).

@item  @samp{-n} 
@itemx  @samp{--dry-run} 
This can be used with the @emph{dcommit}, @emph{rebase}, @emph{branch} and @emph{tag} commands.

For @emph{dcommit}, print out the series of Git arguments that would show which
diffs would be committed to SVN.

For @emph{rebase}, display the local branch associated with the upstream svn
repository associated with the current branch and the URL of svn repository
that will be fetched from.

For @emph{branch} and @emph{tag}, display the urls that will be used for copying when
creating the branch or tag.

@item  @samp{--use-log-author} 
When retrieving svn commits into Git (as part of @emph{fetch}, @emph{rebase}, or
@emph{dcommit} operations), look for the first @samp{From:} line or @samp{Signed-off-by}
trailer in the log message and use that as the author string.

@display
config key: svn.useLogAuthor
@end display


@item  @samp{--add-author-from} 
When committing to svn from Git (as part of @emph{set-tree} or @emph{dcommit}
operations), if the existing log message doesn’t already have a @samp{From:} or
@samp{Signed-off-by} trailer, append a @samp{From:} line based on the Git commit’s
author string.  If you use this, then @samp{--use-log-author} will retrieve a
valid author string for all commits.

@display
config key: svn.addAuthorFrom
@end display

@end table

@noindent

@chapheading ADVANCED OPTIONS

@table @asis

@item  @samp{-i<GIT_SVN_ID>} 
@itemx  @samp{--id <GIT_SVN_ID>} 
This sets GIT_SVN_ID (instead of using the environment).  This allows the
user to override the default refname to fetch from when tracking a single
URL.  The @emph{log} and @emph{dcommit} commands no longer require this switch as an
argument.

@item  @samp{-R<remote name>} 
@itemx  @samp{--svn-remote <remote name>} 
Specify the [svn-remote "<remote name>"] section to use, this allows SVN
multiple repositories to be tracked.  Default: "svn"

@item  @samp{--follow-parent} 
This option is only relevant if we are tracking branches (using one of the
repository layout options --trunk, --tags, --branches, --stdlayout). For
each tracked branch, try to find out where its revision was copied from, and
set a suitable parent in the first Git commit for the branch.  This is
especially helpful when we’re tracking a directory that has been moved
around within the repository.  If this feature is disabled, the branches
created by @emph{git svn} will all be linear and not share any history, meaning
that there will be no information on where branches were branched off or
merged.  However, following long/convoluted histories can take a long time,
so disabling this feature may speed up the cloning process. This feature is
enabled by default, use --no-follow-parent to disable it.

@display
config key: svn.followparent
@end display

@end table

@noindent

@chapheading CONFIG FILE-ONLY OPTIONS

@table @asis

@item  svn.noMetadata 
@itemx  svn-remote.<name>.noMetadata 
This gets rid of the @emph{git-svn-id:} lines at the end of every commit.

This option can only be used for one-shot imports as @emph{git svn} will not be
able to fetch again without metadata. Additionally, if you lose your
@emph{$GIT_DIR/svn/**/.rev_map.*} files, @emph{git svn} will not be able to rebuild
them.

The @emph{git svn log} command will not work on repositories using this, either.
Using this conflicts with the @emph{useSvmProps} option for (hopefully) obvious
reasons.

This option is NOT recommended as it makes it difficult to track down old
references to SVN revision numbers in existing documentation, bug reports,
and archives.  If you plan to eventually migrate from SVN to Git and are
certain about dropping SVN history, consider
@uref{https://github.com/newren/git-filter-repo,git-filter-repo} instead.
filter-repo also allows reformatting of metadata for ease-of-reading and
rewriting authorship info for non-"svn.authorsFile" users.

@item  svn.useSvmProps 
@itemx  svn-remote.<name>.useSvmProps 
This allows @emph{git svn} to re-map repository URLs and UUIDs from mirrors
created using SVN::Mirror (or svk) for metadata.

If an SVN revision has a property, "svm:headrev", it is likely that the
revision was created by SVN::Mirror (also used by SVK).  The property
contains a repository UUID and a revision.  We want to make it look like we
are mirroring the original URL, so introduce a helper function that returns
the original identity URL and UUID, and use it when generating metadata in
commit messages.

@item  svn.useSvnsyncProps 
@itemx  svn-remote.<name>.useSvnsyncprops 
Similar to the useSvmProps option; this is for users of the svnsync(1)
command distributed with SVN 1.4.x and later.

@item  svn-remote.<name>.rewriteRoot 
This allows users to create repositories from alternate URLs.  For example,
an administrator could run @emph{git svn} on the server locally (accessing via
file://) but wish to distribute the repository with a public http:// or
svn:// URL in the metadata so users of it will see the public URL.

@item  svn-remote.<name>.rewriteUUID 
Similar to the useSvmProps option; this is for users who need to remap the
UUID manually. This may be useful in situations where the original UUID is
not available via either useSvmProps or useSvnsyncProps.

@item  svn-remote.<name>.pushurl 
Similar to Git’s @samp{remote.<name>.pushurl}, this key is designed to be used in
cases where @emph{url} points to an SVN repository via a read-only transport, to
provide an alternate read/write transport. It is assumed that both keys
point to the same repository. Unlike @emph{commiturl}, @emph{pushurl} is a base
path. If either @emph{commiturl} or @emph{pushurl} could be used, @emph{commiturl} takes
precedence.

@item  svn.brokenSymlinkWorkaround 
This disables potentially expensive checks to workaround broken symlinks
checked into SVN by broken clients.  Set this option to "false" if you track
a SVN repository with many empty blobs that are not symlinks.  This option
may be changed while @emph{git svn} is running and take effect on the next
revision fetched.  If unset, @emph{git svn} assumes this option to be "true".

@item  svn.pathnameencoding 
This instructs git svn to recode pathnames to a given encoding.  It can be
used by windows users and by those who work in non-utf8 locales to avoid
corrupted file names with non-ASCII characters.  Valid encodings are the
ones supported by Perl’s Encode module.

@item  svn-remote.<name>.automkdirs 
Normally, the "git svn clone" and "git svn rebase" commands attempt to
recreate empty directories that are in the Subversion repository.  If this
option is set to "false", then empty directories will only be created if the
"git svn mkdirs" command is run explicitly.  If unset, @emph{git svn} assumes
this option to be "true".
@end table

Since the noMetadata, rewriteRoot, rewriteUUID, useSvnsyncProps and
useSvmProps options all affect the metadata generated and used by @emph{git svn};
they @strong{must} be set in the configuration file before any history is imported
and these settings should never be changed once they are set.

Additionally, only one of these options can be used per svn-remote section
because they affect the @emph{git-svn-id:} metadata line, except for rewriteRoot
and rewriteUUID which can be used together.

@noindent

@chapheading BASIC EXAMPLES

Tracking and contributing to the trunk of a Subversion-managed project
(ignoring tags and branches):

@example
# Clone a repo (like git clone):
        git svn clone http://svn.example.com/project/trunk
# Enter the newly cloned directory:
        cd trunk
# You should be on master branch, double-check with 'git branch'
        git branch
# Do some work and commit locally to Git:
        git commit ...
# Something is committed to SVN, rebase your local changes against the
# latest changes in SVN:
        git svn rebase
# Now commit your changes (that were committed previously using Git) to SVN,
# as well as automatically updating your working HEAD:
        git svn dcommit
# Append svn:ignore settings to the default Git exclude file:
        git svn show-ignore >> .git/info/exclude
@end example


Tracking and contributing to an entire Subversion-managed project (complete
with a trunk, tags and branches):

@example
# Clone a repo with standard SVN directory layout (like git clone):
        git svn clone http://svn.example.com/project --stdlayout --prefix svn/
# Or, if the repo uses a non-standard directory layout:
        git svn clone http://svn.example.com/project -T tr -b branch -t tag --prefix svn/
# View all branches and tags you have cloned:
        git branch -r
# Create a new branch in SVN
        git svn branch waldo
# Reset your master to trunk (or any other branch, replacing 'trunk'
# with the appropriate name):
        git reset --hard svn/trunk
# You may only dcommit to one branch/tag/trunk at a time.  The usage
# of dcommit/rebase/show-ignore should be the same as above.
@end example


The initial @emph{git svn clone} can be quite time-consuming (especially for
large Subversion repositories). If multiple people (or one person with
multiple machines) want to use @emph{git svn} to interact with the same
Subversion repository, you can do the initial @emph{git svn clone} to a
repository on a server and have each person clone that repository with @emph{git
clone}:

@example
# Do the initial import on a server
        ssh server "cd /pub && git svn clone http://svn.example.com/project [options...]"
# Clone locally - make sure the refs/remotes/ space matches the server
        mkdir project
        cd project
        git init
        git remote add origin server:/pub/project
        git config --replace-all remote.origin.fetch '+refs/remotes/*:refs/remotes/*'
        git fetch
# Prevent fetch/pull from remote Git server in the future,
# we only want to use git svn for future updates
        git config --remove-section remote.origin
# Create a local branch from one of the branches just fetched
        git checkout -b master FETCH_HEAD
# Initialize 'git svn' locally (be sure to use the same URL and
# --stdlayout/-T/-b/-t/--prefix options as were used on server)
        git svn init http://svn.example.com/project [options...]
# Pull the latest changes from Subversion
        git svn rebase
@end example


@noindent

@chapheading REBASE VS. PULL/MERGE

Prefer to use @emph{git svn rebase} or @emph{git rebase}, rather than @emph{git pull} or
@emph{git merge} to synchronize unintegrated commits with a @emph{git svn}
branch. Doing so will keep the history of unintegrated commits linear with
respect to the upstream SVN repository and allow the use of the preferred
@emph{git svn dcommit} subcommand to push unintegrated commits back into SVN.

Originally, @emph{git svn} recommended that developers pulled or merged from the
@emph{git svn} branch.  This was because the author favored @samp{git svn set-tree B}
to commit a single head rather than the @samp{git svn set-tree A..B} notation to
commit multiple commits. Use of @emph{git pull} or @emph{git merge} with @samp{git svn
set-tree A..B} will cause non-linear history to be flattened when committing
into SVN and this can lead to merge commits unexpectedly reversing previous
commits in SVN.

@noindent

@chapheading MERGE TRACKING

While @emph{git svn} can track copy history (including branches and tags) for
repositories adopting a standard layout, it cannot yet represent merge
history that happened inside git back upstream to SVN users.  Therefore it
is advised that users keep history as linear as possible inside Git to ease
compatibility with SVN (see the CAVEATS section below).

@noindent

@chapheading HANDLING OF SVN BRANCHES

If @emph{git svn} is configured to fetch branches (and --follow-branches is in
effect), it sometimes creates multiple Git branches for one SVN branch,
where the additional branches have names of the form @emph{branchname@@nnn} (with
nnn an SVN revision number).  These additional branches are created if @emph{git
svn} cannot find a parent commit for the first commit in an SVN branch, to
connect the branch to the history of the other branches.

Normally, the first commit in an SVN branch consists of a copy
operation. @emph{git svn} will read this commit to get the SVN revision the
branch was created from. It will then try to find the Git commit that
corresponds to this SVN revision, and use that as the parent of the
branch. However, it is possible that there is no suitable Git commit to
serve as parent.  This will happen, among other reasons, if the SVN branch
is a copy of a revision that was not fetched by @emph{git svn} (e.g. because it
is an old revision that was skipped with @samp{--revision}), or if in SVN a
directory was copied that is not tracked by @emph{git svn} (such as a branch that
is not tracked at all, or a subdirectory of a tracked branch). In these
cases, @emph{git svn} will still create a Git branch, but instead of using an
existing Git commit as the parent of the branch, it will read the SVN
history of the directory the branch was copied from and create appropriate
Git commits.  This is indicated by the message "Initializing parent:
<branchname>".

Additionally, it will create a special branch named
@emph{<branchname>@@<SVN-Revision>}, where <SVN-Revision> is the SVN revision
number the branch was copied from.  This branch will point to the newly
created parent commit of the branch.  If in SVN the branch was deleted and
later recreated from a different version, there will be multiple such
branches with an @emph{@@}.

Note that this may mean that multiple Git commits are created for a single
SVN revision.

An example: in an SVN repository with a standard trunk/tags/branches layout,
a directory trunk/sub is created in r.100.  In r.200, trunk/sub is branched
by copying it to branches/. @emph{git svn clone -s} will then create a branch
@emph{sub}. It will also create new Git commits for r.100 through r.199 and use
these as the history of branch @emph{sub}. Thus there will be two Git commits for
each revision from r.100 to r.199 (one containing trunk/, one containing
trunk/sub/). Finally, it will create a branch @emph{sub@@200} pointing to the new
parent commit of branch @emph{sub} (i.e. the commit for r.200 and trunk/sub/).

@noindent

@chapheading CAVEATS

For the sake of simplicity and interoperating with Subversion, it is
recommended that all @emph{git svn} users clone, fetch and dcommit directly from
the SVN server, and avoid all @emph{git clone}/@emph{pull}/@emph{merge}/@emph{push} operations
between Git repositories and branches.  The recommended method of exchanging
code between Git branches and users is @emph{git format-patch} and @emph{git am}, or
just 'dcommit’ing to the SVN repository.

Running @emph{git merge} or @emph{git pull} is NOT recommended on a branch you plan to
@emph{dcommit} from because Subversion users cannot see any merges you’ve made.
Furthermore, if you merge or pull from a Git branch that is a mirror of an
SVN branch, @emph{dcommit} may commit to the wrong branch.

If you do merge, note the following rule: @emph{git svn dcommit} will attempt to
commit on top of the SVN commit named in

@example
git log --grep=^git-svn-id: --first-parent -1
@end example


You @emph{must} therefore ensure that the most recent commit of the branch you
want to dcommit to is the @emph{first} parent of the merge.  Chaos will ensue
otherwise, especially if the first parent is an older commit on the same SVN
branch.

@emph{git clone} does not clone branches under the refs/remotes/ hierarchy or any
@emph{git svn} metadata, or config.  So repositories created and managed with
using @emph{git svn} should use @emph{rsync} for cloning, if cloning is to be done at
all.

Since @emph{dcommit} uses rebase internally, any Git branches you @emph{git push} to
before @emph{dcommit} on will require forcing an overwrite of the existing ref on
the remote repository.  This is generally considered bad practice, see the
git-push(1) documentation for details.

Do not use the --amend option of git-commit(1) on a change you’ve
already dcommitted.  It is considered bad practice to --amend commits you’ve
already pushed to a remote repository for other users, and dcommit with SVN
is analogous to that.

When cloning an SVN repository, if none of the options for describing the
repository layout is used (--trunk, --tags, --branches, --stdlayout), @emph{git
svn clone} will create a Git repository with completely linear history,
where branches and tags appear as separate directories in the working copy.
While this is the easiest way to get a copy of a complete repository, for
projects with many branches it will lead to a working copy many times larger
than just the trunk. Thus for projects using the standard directory
structure (trunk/branches/tags), it is recommended to clone with option
@samp{--stdlayout}. If the project uses a non-standard structure, and/or if
branches and tags are not required, it is easiest to only clone one
directory (typically trunk), without giving any repository layout options.
If the full history with branches and tags is required, the options
@samp{--trunk} / @samp{--branches} / @samp{--tags} must be used.

When using multiple --branches or --tags, @emph{git svn} does not automatically
handle name collisions (for example, if two branches from different paths
have the same name, or if a branch and a tag have the same name).  In these
cases, use @emph{init} to set up your Git repository then, before your first
@emph{fetch}, edit the $GIT_DIR/config file so that the branches and tags are
associated with different name spaces.  For example:

@example
branches = stable/*:refs/remotes/svn/stable/*
branches = debug/*:refs/remotes/svn/debug/*
@end example

@noindent

@chapheading CONFIGURATION

@emph{git svn} stores [svn-remote] configuration information in the repository
$GIT_DIR/config file.  It is similar the core Git [remote] sections except
@emph{fetch} keys do not accept glob arguments; but they are instead handled by
the @emph{branches} and @emph{tags} keys.  Since some SVN repositories are oddly
configured with multiple projects glob expansions such those listed below
are allowed:

@example
[svn-remote "project-a"]
        url = http://server.org/svn
        fetch = trunk/project-a:refs/remotes/project-a/trunk
        branches = branches/*/project-a:refs/remotes/project-a/branches/*
        branches = branches/release_*:refs/remotes/project-a/branches/release_*
        branches = branches/re*se:refs/remotes/project-a/branches/*
        tags = tags/*/project-a:refs/remotes/project-a/tags/*
@end example


Keep in mind that the @samp{*} (asterisk) wildcard of the local ref
(right of the @samp{:}) @strong{must} be the farthest right path component;
however the remote wildcard may be anywhere as long as it’s an
independent path component (surrounded by @samp{/} or EOL).   This
type of configuration is not automatically created by @emph{init} and
should be manually entered with a text-editor or using @emph{git config}.

Also note that only one asterisk is allowed per word. For example:

@example
branches = branches/re*se:refs/remotes/project-a/branches/*
@end example

will match branches @emph{release}, @emph{rese}, @emph{re123se}, however

@example
branches = branches/re*s*e:refs/remotes/project-a/branches/*
@end example

will produce an error.

It is also possible to fetch a subset of branches or tags by using a
comma-separated list of names within braces. For example:

@example
[svn-remote "huge-project"]
        url = http://server.org/svn
        fetch = trunk/src:refs/remotes/trunk
        branches = branches/@{red,green@}/src:refs/remotes/project-a/branches/*
        tags = tags/@{1.0,2.0@}/src:refs/remotes/project-a/tags/*
@end example


Multiple fetch, branches, and tags keys are supported:

@example
[svn-remote "messy-repo"]
        url = http://server.org/svn
        fetch = trunk/project-a:refs/remotes/project-a/trunk
        fetch = branches/demos/june-project-a-demo:refs/remotes/project-a/demos/june-demo
        branches = branches/server/*:refs/remotes/project-a/branches/*
        branches = branches/demos/2011/*:refs/remotes/project-a/2011-demos/*
        tags = tags/server/*:refs/remotes/project-a/tags/*
@end example


Creating a branch in such a configuration requires disambiguating which
location to use using the -d or --destination flag:

@example
$ git svn branch -d branches/server release-2-3-0
@end example


Note that git-svn keeps track of the highest revision in which a branch or
tag has appeared. If the subset of branches or tags is changed after
fetching, then $GIT_DIR/svn/.metadata must be manually edited to remove (or
reset) branches-maxRev and/or tags-maxRev as appropriate.

@noindent

@chapheading FILES

@table @asis

@item  $GIT_DIR/svn/**/.rev_map.* 
Mapping between Subversion revision numbers and Git commit names.  In a
repository where the noMetadata option is not set, this can be rebuilt from
the git-svn-id: lines that are at the end of every commit (see the
@emph{svn.noMetadata} section above for details).

@emph{git svn fetch} and @emph{git svn rebase} automatically update the rev_map if it
is missing or not up to date.  @emph{git svn reset} automatically rewinds it.
@end table

@noindent

@chapheading BUGS

We ignore all SVN properties except svn:executable.  Any unhandled
properties are logged to $GIT_DIR/svn/<refname>/unhandled.log

Renamed and copied directories are not detected by Git and hence not tracked
when committing to SVN.  I do not plan on adding support for this as it’s
quite difficult and time-consuming to get working for all the possible
corner cases (Git doesn’t do it, either).  Committing renamed and copied
files is fully supported if they’re similar enough for Git to detect them.

In SVN, it is possible (though discouraged) to commit changes to a tag
(because a tag is just a directory copy, thus technically the same as a
branch). When cloning an SVN repository, @emph{git svn} cannot know if such a
commit to a tag will happen in the future. Thus it acts conservatively and
imports all SVN tags as branches, prefixing the tag name with @emph{tags/}.

@noindent

@chapheading SEE ALSO

git-rebase(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-switch,,,Top
@chapheading Name

git-switch — ブランチを切り替える

@noindent

@chapheading Synopsis

@display
git switch [<options>] [--no-guess] <branch>
git switch [<options>] --detach [<start-point>]
git switch [<options>] (-c|-C) <new-branch> [<start-point>]
git switch [<options>] --orphan <new-branch>
@end display


@noindent

@chapheading DESCRIPTION

指定のブランチに切り替えます。作業ツリーとインデックスは、ブランチに一致するように更新されます。新規コミットは、全てこのブランチの先端に追加されることになります。

オプションで、同じ名前のリモートブランチから自動的に @samp{-c} や @samp{-C} を使用して新しいブランチを作成するか(@samp{--guess}
参照)、あるいは切り替え時に @samp{--detach} を使用して任意のブランチから作業ツリーをデタッチできます。

ブランチを切り替えるには、クリーンなインデックスと作業ツリーは必要ありません(つまり、「HEAD」との違いはありません)。ただし、操作によってローカル変更が失われる場合、
@samp{--discard-changes} または @samp{--merge} で特に指示されない限り、操作は中止されます。

!!このコマンドは実験的なものです。 動作が変わる可能性があります!!

@noindent

@chapheading OPTIONS

@table @asis

@item  <branch> 
切り替え先のブランチ

@item  <new-branch> 
新ブランチの名前

@item  <start-point> 
新ブランチの開始点。 @samp{<start-point>}
を指定すると、HEADが現在指し示している場所以外の履歴内の場所に基づいてブランチを作成できます。(または、 @samp{--detach}
の場合、他の場所から検査してデタッチすることができます。)

@samp{@@@{-N@}} 構文を使用して、「git switch」または「git
checkout」操作を使用して切り替えられた最後からN番目のブランチ/コミットを参照できます。 @samp{@@@{-1@}} と同義の @samp{-}
を指定することもできます。これは、2つのブランチをすばやく切り替えたり、誤って切り替えたブランチを元に戻したりするためによく使用されます。

特別な場合として、マージベースが1つしかない場合は、 @samp{A} と @samp{B} のマージベースのショートカットとして @samp{A...B} を使用できます。 @samp{A}
と @samp{B} のうち片方を省略できます。その場合、省略した方はデフォルトで @samp{HEAD} になります。

@item  @samp{-c <new-branch>} 
@itemx  @samp{--create <new-branch>} 
ブランチに切り替える前に、 @samp{<start-point>} で始まる @samp{<new-branch>}
という名前の新しいブランチを作成します。これは以下に代わる便利なショートカットです:

@example
$ git branch <new-branch>
$ git switch <new-branch>
@end example


@item  @samp{-C <new-branch>} 
@itemx  @samp{--force-create <new-branch>} 
@samp{--create`と似ていますが、 `<new-branch>} がすでに存在する場合、 @samp{<start-point>}
にリセットされる点が異なります。これは以下に代わる便利なショートカットです:

@example
$ git branch -f <new-branch>
$ git switch <new-branch>
@end example


@item  @samp{-d} 
@itemx  @samp{--detach} 
検査と破棄可能な実験のためのコミットに切り替えます。詳細については、 git-checkout(1) の「DETACHED
HEAD」セクションを参照してください。

@item  @samp{--guess} 
@itemx  @samp{--no-guess} 
@samp{<branch>} が見つからないが、名前が一致するリモートが正確に1つだけあり(@samp{<remote>}
と呼びます)、それに追跡ブランチが存在する場合は、以下と同等のものとして扱います。

@example
$ git switch -c <branch> --track <remote>/<branch>
@end example


ブランチが複数のリモートに存在し、そのうちの1つが @samp{checkout.defaultRemote} 構成変数によって名前が付けられている場合、
@samp{<branch>} がすべてのリモートで一意でなくても、曖昧さ回避の目的でそのブランチを使用します。例えば、 @samp{<branch>}
があいまいであるが、 @emph{origin} リモートに存在する場合、そこからリモートブランチを常にチェックアウトするには、これを
@samp{checkout.defaultRemote=origin} と設定します。 git-config(1) の
@samp{checkout.defaultRemote} も参照してください。

@samp{--guess} がデフォルトの動作です。無効にするには、 @samp{--no-guess} を使用します。

デフォルトの動作は、 @samp{checkout.guess} 構成変数で設定できます。

@item  @samp{-f} 
@itemx  @samp{--force} 
@samp{--discard-changes} のエイリアス。

@item  @samp{--discard-changes} 
インデックスまたは作業ツリーが @samp{HEAD} と異なっていても続行します。インデックスと作業ツリーの両方が、切り替え先(switching
target)に一致するように復元されます。 @samp{--recurse-submodules}
が指定されている場合、サブモジュールの内容も切り替え先に一致するように復元されます。これは、ローカルの変更を破棄するために使用されます。

@item  @samp{-m} 
@itemx  @samp{--merge} 
現在のブランチと切り替え先のブランチの間で異なる1つ以上のファイルにローカルの変更がある場合、コマンドは、変更をコンテキストに保持するためにブランチの切り替えを拒否します。
ただし、このオプションを使用すると、現在のブランチ、作業ツリーの内容、および新しいブランチの間の3方向のマージが実行され、新しいブランチに移動します。

マージの競合が発生すると、競合するパスのインデックスエントリはマージされないままになり、競合を解決し、解決されたパスを @samp{git add}
(またはマージによってパスが削除される場合は @samp{git rm})でマークする必要があります。

@item  @samp{--conflict=<style>} 
上記の @samp{--merge} オプションと同じですが、競合するハンクの表示方法を変更し、 @samp{merge.conflictStyle}
構成変数をオーバーライドします。指定可能な値は「merge」(デフォルト)と「diff3」(「merge」スタイルで表示されるものに加えて、元のコンテンツを表示)です。

@item  @samp{-q} 
@itemx  @samp{--quiet} 
静かにします。フィードバックメッセージを抑制します。

@item  @samp{--progress} 
@itemx  @samp{--no-progress} 
@samp{--quiet} が指定されていない限り、進行状況は、端末に接続されている場合、デフォルトで標準エラーストリームに報告されます。このフラグは、
@samp{--quiet} に関係なく、端末に接続されていない場合でも進行状況のレポートを有効にします。

@item  @samp{-t} 
@itemx  @samp{--track} 
新しいブランチを作成するときは、 "upstream" 構成をセットアップします。 @samp{-c} が暗黙に指定されたものと見なします。詳細については、
git-branch(1) の @samp{--track} を参照してください。

@samp{-c}
オプションが指定されていない場合、新しいブランチの名前は、対応するリモート用に構成されたrefspecのローカル部分を調べ、次に、最初の部分を「*」まで削除することにより、リモート追跡ブランチから取得されます。これは、
@samp{origin/hack} (または @samp{remotes/origin/hack} あるいは
@samp{refs/remotes/origin/hack})から分岐するときに、ローカルブランチとして @samp{hack}
を使用するように指示します。指定された名前にスラッシュ(/)がない場合、または上記の推測の結果が空の名前になる場合、推測は中止されます。このような場合は、
@samp{-c} を使用して明示的に名前を付けることができます。

@item  @samp{--no-track} 
@samp{branch.autoSetupMerge} 構成変数がtrueであっても、 "upstream" 構成をセットアップしない。

@item  @samp{--orphan <new-branch>} 
@samp{<new-branch>} という名前の新しい 「孤立した」(orphan)ブランチを作成します。追跡中のファイルはすべて削除されます。

@item  @samp{--ignore-other-worktrees} 
@samp{git switch}
は、必要なrefが別のワークツリーによってすでにチェックアウトされている場合に拒否します。このオプションを使用すると、とにかくrefをチェックアウトできます。つまり、refは複数のワークツリーで保持できます。

@item  @samp{--recurse-submodules} 
@itemx  @samp{--no-recurse-submodules} 
@samp{--recurse-submodules}
を使用すると、スーパープロジェクト(親プロジェクト)に記録されたコミットに従って、すべてのアクティブなサブモジュールのコンテンツが更新されます。何も使用されていない(または
@samp{--no-recurse-submodules})場合、サブモジュールの作業ツリーは更新されません。 git-submodule(1)
と同様に、これはサブモジュールの @samp{HEAD} を切り離します(detach)。
@end table

@noindent

@chapheading EXAMPLES

以下のコマンドは "master" ブランチに切り替えます:

@example
$ git switch master
@end example


間違ったブランチで作業した後、正しいブランチへの切り替えは以下を使用して行われます:

@example
$ git switch mytopic
@end example


ただし、「間違った」ブランチと正しい「mytopic」ブランチは、ローカルで変更したファイルが異なる場合があります。その場合、上記のswitchは以下のように失敗します:

@example
$ git switch mytopic
error: You have local changes to 'frotz'; not switching branches.
@end example


コマンドに @samp{-m} フラグを指定すると、3方向のマージを試行します:

@example
$ git switch -m mytopic
Auto-merging frotz
@end example


この3者間マージの後、ローカルの変更はインデックスファイルに登録されないため、 @samp{git diff}
は、新しいブランチの先端以降に行った変更を示します。

mytopicに切り替える前に前のブランチ(つまり、 "master" ブランチ)に戻すには:

@example
$ git switch -
@end example


どのコミットからでも新しいブランチを成長させることができます。たとえば、 "HEAD~3" に切り替えて、ブランチ "fixup" を作成します:

@example
$ git switch -c fixup HEAD~3
Switched to a new branch 'fixup'
@end example


同じ名前のリモートブランチから新しいブランチを開始する場合:

@example
$ git switch new-topic
Branch 'new-topic' set up to track remote branch 'new-topic' from 'origin'
Switched to a new branch 'new-topic'
@end example


新しいブランチを作成せずに、一時的な検査または実験のためにコミット @samp{HEAD~3} をチェックアウトするには:

@example
$ git switch --detach HEAD~3
HEAD is now at 9fc9555312 Merge branch 'cc/shared-index-permbits'
@end example


一時的な検査または実験のために行ったことに維持する価値があることが判明した場合は、(切り替えることなく)、いつでも新しい名前を作成できます:

@example
$ git switch -c good-surprises
@end example


@noindent

@chapheading SEE ALSO

git-checkout(1), git-branch(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-symbolic-ref,,,Top
@chapheading Name

git-symbolic-ref — シンボリックrefの読み取り、変更、および削除

@noindent

@chapheading Synopsis

@display
git symbolic-ref [-m <reason>] <name> <ref>
git symbolic-ref [-q] [--short] <name>
git symbolic-ref --delete [-q] <name>
@end display


@noindent

@chapheading DESCRIPTION

引数が1つ与えられると、指定されたシンボリックrefが参照するブランチヘッドを読み取り、 @samp{.git/} ディレクトリを基準にしてそのパスを出力します。
通常、作業ツリーがどのブランチにあるかを確認するには、 <name> 引数として @samp{HEAD} を指定します。

2つの引数を与えると、指定されたブランチ <ref> を指すようにシンボリックref <name> を作成または更新します。

@samp{--delete} と追加の引数を指定すると、指定されたシンボリックrefが削除されます。

シンボリックrefは、 @samp{ref: refs/} で始まる文字列を格納する通常のファイルです。 たとえば、 @samp{.git/HEAD} は、内容が
@samp{ref: refs/heads/master} である通常のファイルです。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-d} 
@itemx  @samp{--delete} 
シンボリックref <name> を削除します。

@item  @samp{-q} 
@itemx  @samp{--quiet} 
<name> がシンボリックrefではなく、切り離されたHEAD(detached HEAD)である場合は、エラーメッセージを発行しないでください。
代わりに、ゼロ以外のステータスで何も言わずに終了します。

@item  @samp{--short} 
<name> の値をシンボリックrefとして表示する場合は、値を短くする事を試みます。例えば @samp{refs/heads/master} から
@samp{master} へ。

@item  @samp{-m} 
<name> のreflogを <reason> で更新します。これは、シンボリックrefを作成または更新する場合にのみ有効です。
@end table

@noindent

@chapheading NOTES

以前は、 @samp{.git/HEAD} は @samp{refs/heads/master} を指すシンボリックリンクでした。別のブランチに切り替えたい場合は、 @samp{ln
-sf refs/heads/newbranch .git/HEAD} を実行し、現在のブランチを確認したい場合は、 @samp{readlink
.git/HEAD} を実行しました。
ただし、シンボリックリンクは完全に移植可能ではないため、非推奨になり、(上記のとおり)シンボリックrefがデフォルトで使用されます。

@emph{git symbolic-ref}
は、シンボリックrefの内容が正しく出力された場合はステータス0で終了し、要求された名前がシンボリックrefでない場合はステータス1で終了し、別のエラーが発生した場合は128で終了します。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-tag,,,Top
@chapheading Name

git-tag — Create, list, delete or verify a tag object signed with GPG

@noindent

@chapheading Synopsis

@display
git tag [-a | -s | -u <keyid>] [-f] [-m <msg> | -F <file>] [-e]
        <tagname> [<commit> | <object>]
git tag -d <tagname>…
git tag [-n[<num>]] -l [--contains <commit>] [--no-contains <commit>]
        [--points-at <object>] [--column[=<options>] | --no-column]
        [--create-reflog] [--sort=<key>] [--format=<format>]
        [--merged <commit>] [--no-merged <commit>] [<pattern>…]
git tag -v [--format=<format>] <tagname>…
@end display


@noindent

@chapheading DESCRIPTION

Add a tag reference in @samp{refs/tags/}, unless @samp{-d/-l/-v} is given to delete,
list or verify tags.

Unless @samp{-f} is given, the named tag must not yet exist.

If one of @samp{-a}, @samp{-s}, or @samp{-u <keyid>} is passed, the command creates a @emph{tag}
object, and requires a tag message.  Unless @samp{-m <msg>} or @samp{-F <file>} is
given, an editor is started for the user to type in the tag message.

If @samp{-m <msg>} or @samp{-F <file>} is given and @samp{-a}, @samp{-s}, and @samp{-u <keyid>} are
absent, @samp{-a} is implied.

Otherwise, a tag reference that points directly at the given object (i.e., a
lightweight tag) is created.

A GnuPG signed tag object will be created when @samp{-s} or @samp{-u <keyid>} is
used.  When @samp{-u <keyid>} is not used, the committer identity for the current
user is used to find the GnuPG key for signing.         The configuration variable
@samp{gpg.program} is used to specify custom GnuPG binary.

Tag objects (created with @samp{-a}, @samp{-s}, or @samp{-u}) are called "annotated" tags;
they contain a creation date, the tagger name and e-mail, a tagging message,
and an optional GnuPG signature. Whereas a "lightweight" tag is simply a
name for an object (usually a commit object).

Annotated tags are meant for release while lightweight tags are meant for
private or temporary object labels. For this reason, some git commands for
naming objects (like @samp{git describe}) will ignore lightweight tags by
default.

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-a} 
@itemx  @samp{--annotate} 
Make an unsigned, annotated tag object

@item  @samp{-s} 
@itemx  @samp{--sign} 
Make a GPG-signed tag, using the default e-mail address’s key.  The default
behavior of tag GPG-signing is controlled by @samp{tag.gpgSign} configuration
variable if it exists, or disabled otherwise.  See git-config(1).

@item  @samp{--no-sign} 
Override @samp{tag.gpgSign} configuration variable that is set to force each and
every tag to be signed.

@item  @samp{-u <keyid>} 
@itemx  @samp{--local-user=<keyid>} 
Make a GPG-signed tag, using the given key.

@item  @samp{-f} 
@itemx  @samp{--force} 
Replace an existing tag with the given name (instead of failing)

@item  @samp{-d} 
@itemx  @samp{--delete} 
Delete existing tags with the given names.

@item  @samp{-v} 
@itemx  @samp{--verify} 
Verify the GPG signature of the given tag names.

@item  @samp{-n<num>} 
<num> specifies how many lines from the annotation, if any, are printed when
using -l. Implies @samp{--list}.

The default is not to print any annotation lines.  If no number is given to
@samp{-n}, only the first line is printed.  If the tag is not annotated, the
commit message is displayed instead.

@item  @samp{-l} 
@itemx  @samp{--list} 
List tags. With optional @samp{<pattern>...}, e.g. @samp{git tag --list 'v-*'}, list
only the tags that match the pattern(s).

Running "git tag" without arguments also lists all tags. The pattern is a
shell wildcard (i.e., matched using fnmatch(3)). Multiple patterns may be
given; if any of them matches, the tag is shown.

This option is implicitly supplied if any other list-like option such as
@samp{--contains} is provided. See the documentation for each of those options
for details.

@item  @samp{--sort=<key>} 
Sort based on the key given.  Prefix @samp{-} to sort in descending order of the
value. You may use the --sort=<key> option multiple times, in which case the
last key becomes the primary key. Also supports "version:refname" or
"v:refname" (tag names are treated as versions). The "version:refname" sort
order can also be affected by the "versionsort.suffix" configuration
variable.  The keys supported are the same as those in @samp{git for-each-ref}.
Sort order defaults to the value configured for the @samp{tag.sort} variable if
it exists, or lexicographic order otherwise. See git-config(1).

@item  @samp{--color[=<when>]} 
Respect any colors specified in the @samp{--format} option. The @samp{<when>} field
must be one of @samp{always}, @samp{never}, or @samp{auto} (if @samp{<when>} is absent, behave
as if @samp{always} was given).

@item  @samp{-i} 
@itemx  @samp{--ignore-case} 
Sorting and filtering tags are case insensitive.

@item  @samp{--column[=<options>]} 
@itemx  @samp{--no-column} 
Display tag listing in columns. See configuration variable @samp{column.tag} for
option syntax. @samp{--column} and @samp{--no-column} without options are equivalent
to @emph{always} and @emph{never} respectively.

This option is only applicable when listing tags without annotation lines.

@item  @samp{--contains [<commit>]} 
Only list tags which contain the specified commit (HEAD if not
specified). Implies @samp{--list}.

@item  @samp{--no-contains [<commit>]} 
Only list tags which don’t contain the specified commit (HEAD if not
specified). Implies @samp{--list}.

@item  @samp{--merged [<commit>]} 
Only list tags whose commits are reachable from the specified commit (@samp{HEAD}
if not specified).

@item  @samp{--no-merged [<commit>]} 
Only list tags whose commits are not reachable from the specified commit
(@samp{HEAD} if not specified).

@item  @samp{--points-at <object>} 
Only list tags of the given object (HEAD if not specified). Implies
@samp{--list}.

@item  @samp{-m <msg>} 
@itemx  @samp{--message=<msg>} 
Use the given tag message (instead of prompting).  If multiple @samp{-m} options
are given, their values are concatenated as separate paragraphs.  Implies
@samp{-a} if none of @samp{-a}, @samp{-s}, or @samp{-u <keyid>} is given.

@item  @samp{-F <file>} 
@itemx  @samp{--file=<file>} 
Take the tag message from the given file.  Use @emph{-} to read the message from
the standard input.  Implies @samp{-a} if none of @samp{-a}, @samp{-s}, or @samp{-u <keyid>} is
given.

@item  @samp{-e} 
@itemx  @samp{--edit} 
The message taken from file with @samp{-F} and command line with @samp{-m} are usually
used as the tag message unmodified.  This option lets you further edit the
message taken from these sources.

@item  @samp{--cleanup=<mode>} 
This option sets how the tag message is cleaned up.  The @emph{<mode>} can be one
of @emph{verbatim}, @emph{whitespace} and @emph{strip}.  The @emph{strip} mode is default. The
@emph{verbatim} mode does not change message at all, @emph{whitespace} removes just
leading/trailing whitespace lines and @emph{strip} removes both whitespace and
commentary.

@item  @samp{--create-reflog} 
Create a reflog for the tag. To globally enable reflogs for tags, see
@samp{core.logAllRefUpdates} in git-config(1).  The negated form
@samp{--no-create-reflog} only overrides an earlier @samp{--create-reflog}, but
currently does not negate the setting of @samp{core.logAllRefUpdates}.

@item  @samp{--format=<format>} 
A string that interpolates @samp{%(fieldname)} from a tag ref being shown and the
object it points at.  The format is the same as that of
git-for-each-ref(1).  When unspecified, defaults to
@samp{%(refname:strip=2)}.

@item  <tagname> 
The name of the tag to create, delete, or describe.  The new tag name must
pass all checks defined by git-check-ref-format(1).  Some of these
checks may restrict the characters allowed in a tag name.

@item  <commit> 
@itemx  <object> 
The object that the new tag will refer to, usually a commit.  Defaults to
HEAD.
@end table

@noindent

@chapheading CONFIGURATION

By default, @emph{git tag} in sign-with-default mode (-s) will use your committer
identity (of the form @samp{Your Name <your@@email.address>}) to find a key.  If
you want to use a different default key, you can specify it in the
repository configuration as follows:

@example
[user]
    signingKey = <gpg-keyid>
@end example


@samp{pager.tag} is only respected when listing tags, i.e., when @samp{-l} is used or
implied. The default is to use a pager.  See git-config(1).

@noindent

@chapheading DISCUSSION

@noindent

@heading On Re-tagging

What should you do when you tag a wrong commit and you would want to re-tag?

If you never pushed anything out, just re-tag it. Use "-f" to replace the
old one. And you’re done.

But if you have pushed things out (or others could just read your repository
directly), then others will have already seen the old tag. In that case you
can do one of two things:

@enumerate 

@item
The sane thing.  Just admit you screwed up, and use a different name. Others
have already seen one tag-name, and if you keep the same name, you may be in
the situation that two people both have "version X", but they actually have
@emph{different} "X"'s.  So just call it "X.1" and be done with it.

@item
The insane thing.  You really want to call the new version "X" too, @emph{even
though} others have already seen the old one. So just use @emph{git tag -f}
again, as if you hadn’t already published the old one.
@end enumerate

However, Git does @strong{not} (and it should not) change tags behind users
back. So if somebody already got the old tag, doing a @emph{git pull} on your
tree shouldn’t just make them overwrite the old one.

If somebody got a release tag from you, you cannot just change the tag for
them by updating your own one. This is a big security issue, in that people
MUST be able to trust their tag-names.  If you really want to do the insane
thing, you need to just fess up to it, and tell people that you messed
up. You can do that by making a very public announcement saying:

@example
Ok, I messed up, and I pushed out an earlier version tagged as X. I
then fixed something, and retagged the *fixed* tree as X again.

If you got the wrong tag, and want the new one, please delete
the old one and fetch the new one by doing:

        git tag -d X
        git fetch origin tag X

to get my updated tag.

You can test which tag you have by doing

        git rev-parse X

which should return 0123456789abcdef.. if you have the new version.

Sorry for the inconvenience.
@end example


Does this seem a bit complicated? It @strong{should} be. There is no way that it
would be correct to just "fix" it automatically.  People need to know that
their tags might have been changed.

@noindent

@heading On Automatic following

If you are following somebody else’s tree, you are most likely using
remote-tracking branches (eg. @samp{refs/remotes/origin/master}).  You usually
want the tags from the other end.

On the other hand, if you are fetching because you would want a one-shot
merge from somebody else, you typically do not want to get tags from there.
This happens more often for people near the toplevel but not limited to
them.  Mere mortals when pulling from each other do not necessarily want to
automatically get private anchor point tags from the other person.

Often, "please pull" messages on the mailing list just provide two pieces of
information: a repo URL and a branch name; this is designed to be easily
cut&pasted at the end of a @emph{git fetch} command line:

@example
Linus, please pull from

        git://git..../proj.git master

to get the following updates...
@end example


becomes:

@example
$ git pull git://git..../proj.git master
@end example


In such a case, you do not want to automatically follow the other person’s
tags.

One important aspect of Git is its distributed nature, which largely means
there is no inherent "upstream" or "downstream" in the system.  On the face
of it, the above example might seem to indicate that the tag namespace is
owned by the upper echelon of people and that tags only flow downwards, but
that is not the case.  It only shows that the usage pattern determines who
are interested in whose tags.

A one-shot pull is a sign that a commit history is now crossing the boundary
between one circle of people (e.g. "people who are primarily interested in
the networking part of the kernel") who may have their own set of tags
(e.g. "this is the third release candidate from the networking group to be
proposed for general consumption with 2.6.21 release") to another circle of
people (e.g. "people who integrate various subsystem improvements").  The
latter are usually not interested in the detailed tags used internally in
the former group (that is what "internal" means).  That is why it is
desirable not to follow tags automatically in this case.

It may well be that among networking people, they may want to exchange the
tags internal to their group, but in that workflow they are most likely
tracking each other’s progress by having remote-tracking branches.  Again,
the heuristic to automatically follow such tags is a good thing.

@noindent

@heading On Backdating Tags

If you have imported some changes from another VCS and would like to add
tags for major releases of your work, it is useful to be able to specify the
date to embed inside of the tag object; such data in the tag object affects,
for example, the ordering of tags in the gitweb interface.

To set the date used in future tag objects, set the environment variable
GIT_COMMITTER_DATE (see the later discussion of possible values; the most
common form is "YYYY-MM-DD HH:MM").

For example:

@example
$ GIT_COMMITTER_DATE="2006-10-02 10:31" git tag -s v1.0.1
@end example


@noindent

@chapheading DATE FORMATS

@samp{GIT_AUTHOR_DATE} と @samp{GIT_COMMITTER_DATE} 環境変数は、以下の日付形式をサポートします:

@table @asis

@item  Git internal format 
これは @samp{<unix timestamp> <time zone offset>} ここで、 @samp{<unix timestamp>}
UNIXエポックからの秒数です。 @samp{<time zone offset>} はUTCからの正または負のオフセットです。
たとえば、CET(UTCより1時間進んでいます)は @samp{+0100} です。

@item  RFC 2822 
RFC 2822で説明されている標準の電子メール形式。たとえば、 @samp{Thu, 07 Apr 2005 22:13:13 +0200} 。

@item  ISO 8601 
ISO 8601規格で指定されている日時(例: @samp{2005-04-07T22:13:13})。パーサは、 @samp{T}
文字の代わりにスペースも受け入れます。秒の小数部分は無視されます。たとえば、 @samp{2005-04-07T22:13:13.019} は
@samp{2005-04-07T22:13:13} として扱われます。

@quotation

@strong{Note}

日付部分は、上記に加えて、 @samp{YYYY.MM.DD} または @samp{MM/DD/YYYY} または @samp{DD.MM.YYYY} 形式が受け入れられます。
@end quotation
@end table

@noindent

@chapheading NOTES

複数の @samp{--contains} フィルターと @samp{--no-contains} フィルターを組み合わせる場合、少なくとも1つの @samp{--contains}
コミットを含み、 @samp{--no-contains} コミットを含まない参照のみが表示されます。

複数の @samp{--merged} フィルターと @samp{--no-merged} フィルターを組み合わせると、少なくとも1つの @samp{--merged}
コミットから到達可能で、 @samp{--no-merged} コミットのいずれからも到達できない参照のみが表示されます。

@noindent

@chapheading SEE ALSO

git-check-ref-format(1).  git-config(1).

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-unpack-file,,,Top
@chapheading Name

git-unpack-file — ブロブの内容を含む一時(temporary)ファイルを作成します

@noindent

@chapheading Synopsis

@display
git unpack-file <blob>
@end display


@noindent

@chapheading DESCRIPTION

sha1で指定されたブロブの内容を保持するファイルを作成します。
一時(temporary)ファイルの名前を次の形式で返します:
.merge_file_XXXXX

@noindent

@chapheading OPTIONS

@table @asis

@item  <blob> 
ブロブIDである必要があります
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-unpack-objects,,,Top
@chapheading Name

git-unpack-objects — パックされたアーカイブからオブジェクトを取り出します

@noindent

@chapheading Synopsis

@display
git unpack-objects [-n] [-q] [-r] [--strict]
@end display


@noindent

@chapheading DESCRIPTION

標準入力からパックされたアーカイブ(.pack)を読み取り、そこに含まれるオブジェクトを展開して、"loose"
形式(ファイルごとに1つのオブジェクト)でリポジトリに書き込みます。

リポジトリにすでに存在するオブジェクトは、パックファイルから取り出されません。したがって、ターゲットリポジトリ内に存在するパックファイルでこのコマンドを使用しても、何も取り出されません。

新しいパックを生成して既存のパックを置き換えるオプションについては、 git-repack(1) を参照してください。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-n} 
ドライランします。
実際にオブジェクトを取り出さずにパックファイルを確認するのみです。

@item  @samp{-q} 
このコマンドは通常、進捗率を表示しますが、このフラグはそれを抑制します。

@item  @samp{-r} 
破損したパックファイルから取り出そうとすると、コマンドは最初の破損で終了します。このフラグは破損があっても続行し、できるだけ多くのオブジェクトを回復するために最善を尽くすことを指示します。

@item  @samp{--strict} 
壊れたコンテンツやリンクを含むオブジェクトをリポジトリに書き込まない

@item  @samp{--max-input-size=<size>} 
入力サイズが <size> より大きい場合は何もせず終了します。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-update-index,,,Top
@chapheading Name

git-update-index — Register file contents in the working tree to the index

@noindent

@chapheading Synopsis

@display
git update-index
             [--add] [--remove | --force-remove] [--replace]
             [--refresh] [-q] [--unmerged] [--ignore-missing]
             [(--cacheinfo <mode>,<object>,<file>)…]
             [--chmod=(+|-)x]
             [--[no-]assume-unchanged]
             [--[no-]skip-worktree]
             [--[no-]ignore-skip-worktree-entries]
             [--[no-]fsmonitor-valid]
             [--ignore-submodules]
             [--[no-]split-index]
             [--[no-|test-|force-]untracked-cache]
             [--[no-]fsmonitor]
             [--really-refresh] [--unresolve] [--again | -g]
             [--info-only] [--index-info]
             [-z] [--stdin] [--index-version <n>]
             [--verbose]
             [--] [<file>…]
@end display


@noindent

@chapheading DESCRIPTION

Modifies the index. Each file mentioned is updated into the index and any
@emph{unmerged} or @emph{needs updating} state is cleared.

See also git-add(1) for a more user-friendly way to do some of the
most common operations on the index.

The way @emph{git update-index} handles files it is told about can be modified
using the various options:

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--add} 
If a specified file isn’t in the index already then it’s added.  Default
behaviour is to ignore new files.

@item  @samp{--remove} 
If a specified file is in the index but is missing then it’s removed.
Default behavior is to ignore removed file.

@item  @samp{--refresh} 
Looks at the current index and checks to see if merges or updates are needed
by checking stat() information.

@item  @samp{-q} 
Quiet.  If --refresh finds that the index needs an update, the default
behavior is to error out.  This option makes
@emph{git update-index} continue anyway.

@item  @samp{--ignore-submodules} 
Do not try to update submodules.  This option is only respected when passed
before --refresh.

@item  @samp{--unmerged} 
If --refresh finds unmerged changes in the index, the default
behavior is to error out.  This option makes @emph{git update-index}
continue anyway.

@item  @samp{--ignore-missing} 
Ignores missing files during a --refresh

@item  @samp{--cacheinfo <mode>,<object>,<path>} 
@itemx  @samp{--cacheinfo <mode> <object> <path>} 
Directly insert the specified info into the index.  For backward
compatibility, you can also give these three arguments as three separate
parameters, but new users are encouraged to use a single-parameter form.

@item  @samp{--index-info} 
Read index information from stdin.

@item  @samp{--chmod=(+|-)x} 
Set the execute permissions on the updated files.

@item  @samp{--[no-]assume-unchanged} 
When this flag is specified, the object names recorded for the paths are not
updated.  Instead, this option sets/unsets the "assume unchanged" bit for
the paths.  When the "assume unchanged" bit is on, the user promises not to
change the file and allows Git to assume that the working tree file matches
what is recorded in the index.  If you want to change the working tree file,
you need to unset the bit to tell Git.  This is sometimes helpful when
working with a big project on a filesystem that has very slow lstat(2)
system call (e.g. cifs).

Git will fail (gracefully) in case it needs to modify this file in the index
e.g. when merging in a commit; thus, in case the assumed-untracked file is
changed upstream, you will need to handle the situation manually.

@item  @samp{--really-refresh} 
Like @samp{--refresh}, but checks stat information unconditionally, without
regard to the "assume unchanged" setting.

@item  @samp{--[no-]skip-worktree} 
When one of these flags is specified, the object name recorded for the paths
are not updated. Instead, these options set and unset the "skip-worktree"
bit for the paths. See section "Skip-worktree bit" below for more
information.

@item  @samp{--[no-]ignore-skip-worktree-entries} 
Do not remove skip-worktree (AKA "index-only") entries even when the
@samp{--remove} option was specified.

@item  @samp{--[no-]fsmonitor-valid} 
When one of these flags is specified, the object name recorded for the paths
are not updated. Instead, these options set and unset the "fsmonitor valid"
bit for the paths. See section "File System Monitor" below for more
information.

@item  @samp{-g} 
@itemx  @samp{--again} 
Runs @emph{git update-index} itself on the paths whose index entries are
different from those from the @samp{HEAD} commit.

@item  @samp{--unresolve} 
Restores the @emph{unmerged} or @emph{needs updating} state of a file during a merge
if it was cleared by accident.

@item  @samp{--info-only} 
Do not create objects in the object database for all <file> arguments that
follow this flag; just insert their object IDs into the index.

@item  @samp{--force-remove} 
Remove the file from the index even when the working directory still has
such a file. (Implies --remove.)

@item  @samp{--replace} 
By default, when a file @samp{path} exists in the index, @emph{git update-index}
refuses an attempt to add @samp{path/file}.  Similarly if a file @samp{path/file}
exists, a file @samp{path} cannot be added.  With --replace flag, existing
entries that conflict with the entry being added are automatically removed
with warning messages.

@item  @samp{--stdin} 
Instead of taking list of paths from the command line, read list of paths
from the standard input.  Paths are separated by LF (i.e. one path per line)
by default.

@item  @samp{--verbose} 
Report what is being added and removed from index.

@item  @samp{--index-version <n>} 
Write the resulting index out in the named on-disk format version.
Supported versions are 2, 3 and 4. The current default version is 2 or 3,
depending on whether extra features are used, such as @samp{git add -N}.

Version 4 performs a simple pathname compression that reduces index size by
30%-50% on large repositories, which results in faster load time. Version 4
is relatively young (first released in 1.8.0 in October 2012). Other Git
implementations such as JGit and libgit2 may not support it yet.

@item  @samp{-z} 
Only meaningful with @samp{--stdin} or @samp{--index-info}; paths are separated with
NUL character instead of LF.

@item  @samp{--split-index} 
@itemx  @samp{--no-split-index} 
Enable or disable split index mode. If split-index mode is already enabled
and @samp{--split-index} is given again, all changes in $GIT_DIR/index are pushed
back to the shared index file.

These options take effect whatever the value of the @samp{core.splitIndex}
configuration variable (see git-config(1)). But a warning is emitted
when the change goes against the configured value, as the configured value
will take effect next time the index is read and this will remove the
intended effect of the option.

@item  @samp{--untracked-cache} 
@itemx  @samp{--no-untracked-cache} 
Enable or disable untracked cache feature. Please use
@samp{--test-untracked-cache} before enabling it.

These options take effect whatever the value of the @samp{core.untrackedCache}
configuration variable (see git-config(1)). But a warning is emitted
when the change goes against the configured value, as the configured value
will take effect next time the index is read and this will remove the
intended effect of the option.

@item  @samp{--test-untracked-cache} 
Only perform tests on the working directory to make sure untracked cache can
be used. You have to manually enable untracked cache using
@samp{--untracked-cache} or @samp{--force-untracked-cache} or the
@samp{core.untrackedCache} configuration variable afterwards if you really want
to use it. If a test fails the exit code is 1 and a message explains what is
not working as needed, otherwise the exit code is 0 and OK is printed.

@item  @samp{--force-untracked-cache} 
Same as @samp{--untracked-cache}. Provided for backwards compatibility with older
versions of Git where @samp{--untracked-cache} used to imply
@samp{--test-untracked-cache} but this option would enable the extension
unconditionally.

@item  @samp{--fsmonitor} 
@itemx  @samp{--no-fsmonitor} 
Enable or disable files system monitor feature. These options take effect
whatever the value of the @samp{core.fsmonitor} configuration variable (see
git-config(1)). But a warning is emitted when the change goes
against the configured value, as the configured value will take effect next
time the index is read and this will remove the intended effect of the
option.

@item  -- 
Do not interpret any more arguments as options.

@item  <file> 
Files to act on.  Note that files beginning with @emph{.} are discarded. This
includes @samp{./file} and @samp{dir/./file}. If you don’t want this, then use cleaner
names.  The same applies to directories ending @emph{/} and paths with @emph{//}
@end table

@noindent

@chapheading USING --REFRESH

@samp{--refresh} does not calculate a new sha1 file or bring the index up to date
for mode/content changes. But what it @strong{does} do is to "re-match" the stat
information of a file with the index, so that you can refresh the index for
a file that hasn’t been changed but where the stat entry is out of date.

For example, you’d want to do this after doing a @emph{git read-tree}, to link up
the stat index details with the proper files.

@noindent

@chapheading USING --CACHEINFO OR --INFO-ONLY

@samp{--cacheinfo} is used to register a file that is not in the current working
directory.  This is useful for minimum-checkout merging.

To pretend you have a file at path with mode and sha1, say:

@example
$ git update-index --add --cacheinfo <mode>,<sha1>,<path>
@end example


@samp{--info-only} is used to register files without placing them in the object
database.  This is useful for status-only repositories.

Both @samp{--cacheinfo} and @samp{--info-only} behave similarly: the index is updated
but the object database isn’t.  @samp{--cacheinfo} is useful when the object is
in the database but the file isn’t available locally.  @samp{--info-only} is
useful when the file is available, but you do not wish to update the object
database.

@noindent

@chapheading USING --INDEX-INFO

@samp{--index-info} is a more powerful mechanism that lets you feed multiple
entry definitions from the standard input, and designed specifically for
scripts.  It can take inputs of three formats:

@enumerate 

@item
mode SP type SP sha1          TAB path

This format is to stuff @samp{git ls-tree} output into the index.

@item
mode         SP sha1 SP stage TAB path

This format is to put higher order stages into the index file and matches
@emph{git ls-files --stage} output.

@item
mode         SP sha1          TAB path

This format is no longer produced by any Git command, but is and will
continue to be supported by @samp{update-index --index-info}.
@end enumerate

To place a higher stage entry to the index, the path should first be removed
by feeding a mode=0 entry for the path, and then feeding necessary input
lines in the third format.

For example, starting with this index:

@example
$ git ls-files -s
100644 8a1218a1024a212bb3db30becd860315f9f3ac52 0       frotz
@end example


you can feed the following input to @samp{--index-info}:

@example
$ git update-index --index-info
0 0000000000000000000000000000000000000000      frotz
100644 8a1218a1024a212bb3db30becd860315f9f3ac52 1       frotz
100755 8a1218a1024a212bb3db30becd860315f9f3ac52 2       frotz
@end example


The first line of the input feeds 0 as the mode to remove the path; the
SHA-1 does not matter as long as it is well formatted.  Then the second and
third line feeds stage 1 and stage 2 entries for that path.  After the
above, we would end up with this:

@example
$ git ls-files -s
100644 8a1218a1024a212bb3db30becd860315f9f3ac52 1       frotz
100755 8a1218a1024a212bb3db30becd860315f9f3ac52 2       frotz
@end example


@noindent

@chapheading USING “ASSUME UNCHANGED” BIT

Many operations in Git depend on your filesystem to have an efficient
@samp{lstat(2)} implementation, so that @samp{st_mtime} information for working tree
files can be cheaply checked to see if the file contents have changed from
the version recorded in the index file.  Unfortunately, some filesystems
have inefficient @samp{lstat(2)}.  If your filesystem is one of them, you can set
"assume unchanged" bit to paths you have not changed to cause Git not to do
this check.  Note that setting this bit on a path does not mean Git will
check the contents of the file to see if it has changed — it makes Git to
omit any checking and assume it has @strong{not} changed.  When you make changes to
working tree files, you have to explicitly tell Git about it by dropping
"assume unchanged" bit, either before or after you modify them.

In order to set "assume unchanged" bit, use @samp{--assume-unchanged} option.  To
unset, use @samp{--no-assume-unchanged}. To see which files have the "assume
unchanged" bit set, use @samp{git ls-files -v} (see git-ls-files(1)).

The command looks at @samp{core.ignorestat} configuration variable.  When this is
true, paths updated with @samp{git update-index paths...} and paths updated with
other Git commands that update both index and working tree (e.g. @emph{git apply
--index}, @emph{git checkout-index -u}, and @emph{git read-tree -u}) are automatically
marked as "assume unchanged".  Note that "assume unchanged" bit is @strong{not} set
if @samp{git update-index --refresh} finds the working tree file matches the
index (use @samp{git update-index --really-refresh} if you want to mark them as
"assume unchanged").

@noindent

@chapheading EXAMPLES

To update and refresh only the files already checked out:

@example
$ git checkout-index -n -f -a && git update-index --ignore-missing --refresh
@end example


@table @asis

@item  On an inefficient filesystem with @samp{core.ignorestat} set 
@example
$ git update-index --really-refresh              (1)
$ git update-index --no-assume-unchanged foo.c   (2)
$ git diff --name-only                           (3)
$ edit foo.c
$ git diff --name-only                           (4)
M foo.c
$ git update-index foo.c                         (5)
$ git diff --name-only                           (6)
$ edit foo.c
$ git diff --name-only                           (7)
$ git update-index --no-assume-unchanged foo.c   (8)
$ git diff --name-only                           (9)
M foo.c
@end example


@table @asis

@item @pxref{CO1-1,,(1)}
forces lstat(2) to set "assume unchanged" bits for paths that match index.

@item @pxref{CO1-2,,(2)}
mark the path to be edited.

@item @pxref{CO1-3,,(3)}
this does lstat(2) and finds index matches the path.

@item @pxref{CO1-4,,(4)}
this does lstat(2) and finds index does @strong{not} match the path.

@item @pxref{CO1-5,,(5)}
registering the new version to index sets "assume unchanged" bit.

@item @pxref{CO1-6,,(6)}
and it is assumed unchanged.

@item @pxref{CO1-7,,(7)}
even after you edit it.

@item @pxref{CO1-8,,(8)}
you can tell about the change after the fact.

@item @pxref{CO1-9,,(9)}
now it checks with lstat(2) and finds it has been changed.
@end table
@end table

@noindent

@chapheading SKIP-WORKTREE BIT

Skip-worktree bit can be defined in one (long) sentence: When reading an
entry, if it is marked as skip-worktree, then Git pretends its working
directory version is up to date and read the index version instead.

To elaborate, "reading" means checking for file existence, reading file
attributes or file content. The working directory version may be present or
absent. If present, its content may match against the index version or
not. Writing is not affected by this bit, content safety is still first
priority. Note that Git @emph{can} update working directory file, that is marked
skip-worktree, if it is safe to do so (i.e.  working directory version
matches index version)

Although this bit looks similar to assume-unchanged bit, its goal is
different from assume-unchanged bit’s. Skip-worktree also takes precedence
over assume-unchanged bit when both are set.

@noindent

@chapheading SPLIT INDEX

This mode is designed for repositories with very large indexes, and aims at
reducing the time it takes to repeatedly write these indexes.

In this mode, the index is split into two files, $GIT_DIR/index and
$GIT_DIR/sharedindex.<SHA-1>. Changes are accumulated in $GIT_DIR/index, the
split index, while the shared index file contains all index entries and
stays unchanged.

All changes in the split index are pushed back to the shared index file when
the number of entries in the split index reaches a level specified by the
splitIndex.maxPercentChange config variable (see git-config(1)).

Each time a new shared index file is created, the old shared index files are
deleted if their modification time is older than what is specified by the
splitIndex.sharedIndexExpire config variable (see git-config(1)).

To avoid deleting a shared index file that is still used, its modification
time is updated to the current time every time a new split index based on
the shared index file is either created or read from.

@noindent

@chapheading UNTRACKED CACHE

This cache is meant to speed up commands that involve determining untracked
files such as @samp{git status}.

This feature works by recording the mtime of the working tree directories
and then omitting reading directories and stat calls against files in those
directories whose mtime hasn’t changed. For this to work the underlying
operating system and file system must change the @samp{st_mtime} field of
directories if files in the directory are added, modified or deleted.

You can test whether the filesystem supports that with the
@samp{--test-untracked-cache} option. The @samp{--untracked-cache} option used to
implicitly perform that test in older versions of Git, but that’s no longer
the case.

If you want to enable (or disable) this feature, it is easier to use the
@samp{core.untrackedCache} configuration variable (see git-config(1))
than using the @samp{--untracked-cache} option to @samp{git update-index} in each
repository, especially if you want to do so across all repositories you use,
because you can set the configuration variable to @samp{true} (or @samp{false}) in
your @samp{$HOME/.gitconfig} just once and have it affect all repositories you
touch.

When the @samp{core.untrackedCache} configuration variable is changed, the
untracked cache is added to or removed from the index the next time a
command reads the index; while when @samp{--[no-|force-]untracked-cache} are
used, the untracked cache is immediately added to or removed from the index.

Before 2.17, the untracked cache had a bug where replacing a directory with
a symlink to another directory could cause it to incorrectly show files
tracked by git as untracked. See the "status: add a failing test showing a
core.untrackedCache bug" commit to git.git. A workaround for that is (and
this might work for other undiscovered bugs in the future):

@example
$ git -c core.untrackedCache=false status
@end example


This bug has also been shown to affect non-symlink cases of replacing a
directory with a file when it comes to the internal structures of the
untracked cache, but no case has been reported where this resulted in wrong
"git status" output.

There are also cases where existing indexes written by git versions before
2.17 will reference directories that don’t exist anymore, potentially
causing many "could not open directory" warnings to be printed on "git
status". These are new warnings for existing issues that were previously
silently discarded.

As with the bug described above the solution is to one-off do a "git status"
run with @samp{core.untrackedCache=false} to flush out the leftover bad data.

@noindent

@chapheading FILE SYSTEM MONITOR

This feature is intended to speed up git operations for repos that have
large working directories.

It enables git to work together with a file system monitor (see the
"fsmonitor-watchman" section of githooks(5)) that can inform it as
to what files have been modified. This enables git to avoid having to
lstat() every file to find modified files.

When used in conjunction with the untracked cache, it can further improve
performance by avoiding the cost of scanning the entire working directory
looking for new files.

If you want to enable (or disable) this feature, it is easier to use the
@samp{core.fsmonitor} configuration variable (see git-config(1)) than
using the @samp{--fsmonitor} option to @samp{git update-index} in each repository,
especially if you want to do so across all repositories you use, because you
can set the configuration variable in your @samp{$HOME/.gitconfig} just once and
have it affect all repositories you touch.

When the @samp{core.fsmonitor} configuration variable is changed, the file system
monitor is added to or removed from the index the next time a command reads
the index. When @samp{--[no-]fsmonitor} are used, the file system monitor is
immediately added to or removed from the index.

@noindent

@chapheading CONFIGURATION

The command honors @samp{core.filemode} configuration variable.  If
your repository is on a filesystem whose executable bits are
unreliable, this should be set to @emph{false} (see git-config(1)).
This causes the command to ignore differences in file modes recorded
in the index and the file mode on the filesystem if they differ only on
executable bit.   On such an unfortunate filesystem, you may
need to use @emph{git update-index --chmod=}.

Quite similarly, if @samp{core.symlinks} configuration variable is set to @emph{false}
(see git-config(1)), symbolic links are checked out as plain files,
and this command does not modify a recorded file mode from symbolic link to
regular file.

The command looks at @samp{core.ignorestat} configuration variable.  See @emph{Using
"assume unchanged" bit} section above.

The command also looks at @samp{core.trustctime} configuration variable.  It can
be useful when the inode change time is regularly modified by something
outside Git (file system crawlers and backup systems use ctime for marking
files processed) (see git-config(1)).

The untracked cache extension can be enabled by the @samp{core.untrackedCache}
configuration variable (see git-config(1)).

@noindent

@chapheading NOTES

Users often try to use the assume-unchanged and skip-worktree bits to tell
Git to ignore changes to files that are tracked.  This does not work as
expected, since Git may still check working tree files against the index
when performing certain operations.  In general, Git does not provide a way
to ignore changes to tracked files, so alternate solutions are recommended.

For example, if the file you want to change is some sort of config file, the
repository can include a sample config file that can then be copied into the
ignored name and modified.  The repository can even include a script to
treat the sample file as a template, modifying and copying it automatically.

@noindent

@chapheading SEE ALSO

git-config(1), git-add(1), git-ls-files(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-update-ref,,,Top
@chapheading Name

git-update-ref — Update the object name stored in a ref safely

@noindent

@chapheading Synopsis

@display
git update-ref [-m <reason>] [--no-deref] (-d <ref> [<oldvalue>] | [--create-reflog] <ref> <newvalue> [<oldvalue>] | --stdin [-z])
@end display


@noindent

@chapheading DESCRIPTION

Given two arguments, stores the <newvalue> in the <ref>, possibly
dereferencing the symbolic refs.  E.g. @samp{git update-ref HEAD <newvalue>}
updates the current branch head to the new object.

Given three arguments, stores the <newvalue> in the <ref>, possibly
dereferencing the symbolic refs, after verifying that the current value of
the <ref> matches <oldvalue>.  E.g. @samp{git update-ref refs/heads/master
<newvalue> <oldvalue>} updates the master branch head to <newvalue> only if
its current value is <oldvalue>.  You can specify 40 "0" or an empty string
as <oldvalue> to make sure that the ref you are creating does not exist.

It also allows a "ref" file to be a symbolic pointer to another ref file by
starting with the four-byte header sequence of "ref:".

More importantly, it allows the update of a ref file to follow these
symbolic pointers, whether they are symlinks or these "regular file symbolic
refs".  It follows @strong{real} symlinks only if they start with "refs/":
otherwise it will just try to read them and update them as a regular file
(i.e. it will allow the filesystem to follow them, but will overwrite such a
symlink to somewhere else with a regular filename).

If --no-deref is given, <ref> itself is overwritten, rather than the result
of following the symbolic pointers.

In general, using

@example
git update-ref HEAD "$head"
@end example

should be a @emph{lot} safer than doing

@example
echo "$head" > "$GIT_DIR/HEAD"
@end example

both from a symlink following standpoint @strong{and} an error checking
standpoint.  The "refs/" rule for symlinks means that symlinks that point to
"outside" the tree are safe: they’ll be followed for reading but not for
writing (so we’ll never write through a ref symlink to some other tree, if
you have copied a whole archive by creating a symlink tree).

With @samp{-d} flag, it deletes the named <ref> after verifying it still contains
<oldvalue>.

With @samp{--stdin}, update-ref reads instructions from standard input and
performs all modifications together.  Specify commands of the form:

@example
update SP <ref> SP <newvalue> [SP <oldvalue>] LF
create SP <ref> SP <newvalue> LF
delete SP <ref> [SP <oldvalue>] LF
verify SP <ref> [SP <oldvalue>] LF
option SP <opt> LF
start LF
prepare LF
commit LF
abort LF
@end example

With @samp{--create-reflog}, update-ref will create a reflog for each ref even if
one would not ordinarily be created.

Quote fields containing whitespace as if they were strings in C source code;
i.e., surrounded by double-quotes and with backslash escapes.  Use 40 "0"
characters or the empty string to specify a zero value.  To specify a
missing value, omit the value and its preceding SP entirely.

Alternatively, use @samp{-z} to specify in NUL-terminated format, without
quoting:

@example
update SP <ref> NUL <newvalue> NUL [<oldvalue>] NUL
create SP <ref> NUL <newvalue> NUL
delete SP <ref> NUL [<oldvalue>] NUL
verify SP <ref> NUL [<oldvalue>] NUL
option SP <opt> NUL
start NUL
prepare NUL
commit NUL
abort NUL
@end example

In this format, use 40 "0" to specify a zero value, and use the empty string
to specify a missing value.

In either format, values can be specified in any form that Git recognizes as
an object name.  Commands in any other format or a repeated <ref> produce an
error.  Command meanings are:

@table @asis

@item  update 
Set <ref> to <newvalue> after verifying <oldvalue>, if given.  Specify a
zero <newvalue> to ensure the ref does not exist after the update and/or a
zero <oldvalue> to make sure the ref does not exist before the update.

@item  create 
Create <ref> with <newvalue> after verifying it does not exist.  The given
<newvalue> may not be zero.

@item  delete 
Delete <ref> after verifying it exists with <oldvalue>, if given.  If given,
<oldvalue> may not be zero.

@item  verify 
Verify <ref> against <oldvalue> but do not change it.  If <oldvalue> is zero
or missing, the ref must not exist.

@item  option 
Modify behavior of the next command naming a <ref>.  The only valid option
is @samp{no-deref} to avoid dereferencing a symbolic ref.

@item  start 
Start a transaction. In contrast to a non-transactional session, a
transaction will automatically abort if the session ends without an explicit
commit. This command may create a new empty transaction when the current one
has been committed or aborted already.

@item  prepare 
Prepare to commit the transaction. This will create lock files for all
queued reference updates. If one reference could not be locked, the
transaction will be aborted.

@item  commit 
Commit all reference updates queued for the transaction, ending the
transaction.

@item  abort 
Abort the transaction, releasing all locks if the transaction is in prepared
state.
@end table

If all <ref>s can be locked with matching <oldvalue>s simultaneously, all
modifications are performed.  Otherwise, no modifications are performed.
Note that while each individual <ref> is updated or deleted atomically, a
concurrent reader may still see a subset of the modifications.

@noindent

@chapheading LOGGING UPDATES

If config parameter "core.logAllRefUpdates" is true and the ref is one under
"refs/heads/", "refs/remotes/", "refs/notes/", or a pseudoref like HEAD or
ORIG_HEAD; or the file "$GIT_DIR/logs/<ref>" exists then @samp{git update-ref}
will append a line to the log file "$GIT_DIR/logs/<ref>" (dereferencing all
symbolic refs before creating the log name) describing the change in ref
value.  Log lines are formatted as:

@example
oldsha1 SP newsha1 SP committer LF
@end example

Where "oldsha1" is the 40 character hexadecimal value previously stored in
<ref>, "newsha1" is the 40 character hexadecimal value of <newvalue> and
"committer" is the committer’s name, email address and date in the standard
Git committer ident format.

Optionally with -m:

@example
oldsha1 SP newsha1 SP committer TAB message LF
@end example

Where all fields are as described above and "message" is the value supplied
to the -m option.

An update will fail (without changing <ref>) if the current user is unable
to create a new log file, append to the existing log file or does not have
committer information available.

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-update-server-info,,,Top
@chapheading Name

git-update-server-info — ダムサーバー(dumb servers)を支援するために補助情報ファイル(auxiliary info file)を更新する

@noindent

@chapheading Synopsis

@display
git update-server-info
@end display


@noindent

@chapheading DESCRIPTION

オンザフライパック生成(on-the-fly pack generations)を行わないダムサーバー(dumb
server)は、クライアントがサーバーの参照とパックを検出できるように、 $GIT_DIR/info と
$GIT_OBJECT_DIRECTORY/info ディレクトリにいくつかの補助情報ファイル(auxiliary information
files)を持っている必要があります。このコマンドは、そのような補助ファイルを生成します。

@noindent

@chapheading OUTPUT

現在、このコマンドは以下のファイルを更新します。それらの目的の説明については、 gitrepository-layout(5)
を参照してください:

@itemize 

@item
objects/info/packs

@item
info/refs
@end itemize

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-upload-archive,,,Top
@chapheading Name

git-upload-archive — アーカイブを git-archive に送り返す

@noindent

@chapheading Synopsis

@display
git upload-archive <directory>
@end display


@noindent

@chapheading DESCRIPTION

@emph{git archive --remote} によって呼び出され、生成されたアーカイブをGitプロトコルを介して送信します。

このコマンドは通常、エンドユーザーによって直接呼び出されることはありません。 プロトコルのUIは @emph{git archive}
側にあり、プログラムのペアはリモートリポジトリからアーカイブを取得するために使用することを目的としています。

@noindent

@chapheading SECURITY

履歴から削除されたが、まだ剪定(prune)されてない可能性のあるオブジェクトのプライバシーを保護するために、 @samp{git-upload-archive}
は、リポジトリのrefから到達できないコミットおよびツリーのアーカイブの提供を回避します。ただし、オブジェクトの到達可能性の計算には計算コストがかかるため、
@samp{git-upload-archive} は、より厳密でありながらチェックしやすい一連のルールを実装します。

@enumerate 

@item
クライアントは、refが直接指すコミットまたはツリーを要求できます。 例: @samp{git archive --remote=origin v1.0}

@item
クライアントは、 @samp{ref：path} 構文を使用して、コミットまたはツリー内のサブツリーを要求できます。例: @samp{git archive
--remote=origin v1.0:Documentation}

@item
最終結果に到達できる場合でも、クライアントは他のsha1式を使用できません。 たとえば、refから結果に到達できる場合でも、 @samp{master^}
のような相対コミットや @samp{abcd1234} のようなリテラルsha1は許可されません。
@end enumerate

注意:
3番目の規則3は、プライバシーに影響を与えない多くの場合を許可しないことに注意してください。これらのルールはgitの将来のバージョンで変更される可能性があり、
@samp{git archive --remote} によってアクセスされるサーバーは、これらの正確なルールに従う場合と従わない場合があります。

構成オプション @samp{uploadArchive.allowUnreachable}
がtrueの場合、これらの規則は無視され、クライアントは任意のsha1式を使用できます。これは、到達不能なオブジェクトのプライバシーを気にしない場合、またはオブジェクトデータベースが非スマートhttp経由でアクセスできるようにすでに公開されている場合に役立ちます。

@noindent

@chapheading OPTIONS

@table @asis

@item  <directory> 
tarアーカイブを取得するリポジトリ。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-upload-pack,,,Top
@chapheading Name

git-upload-pack — パックされたオブジェクトをgit-fetch-packに送り返す

@noindent

@chapheading Synopsis

@display
git-upload-pack [--[no-]strict] [--timeout=<n>] [--stateless-rpc]
                  [--advertise-refs] <directory>
@end display


@noindent

@chapheading DESCRIPTION

@emph{git fetch-pack} によって呼び出され、通信の反対側で欠落しているオブジェクトを調べ、パッキング後にそれらを送信します。

このコマンドは通常、エンドユーザーによって直接呼び出されることはありません。プロトコルのUIは「git
fetch-pack」側にあり、プログラムのペアはリモートリポジトリから更新をプルするために使用されることを目的としています。プッシュ操作については、「git
send-pack」を参照してください。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--[no-]strict} 
<directory> Gitディレクトリでない場合、 <directory>/.git/ を試さない

@item  @samp{--timeout=<n>} 
非アクティブになった <n> 秒後に転送を中断します。

@item  @samp{--stateless-rpc} 
stdinとstdoutを使用して 読み取り/書き込み
サイクルを1回だけ実行します。これは、プログラムが要求を読み取り、応答を書き込み、終了する必要があるHTTP POST要求処理モデルに適合します。

@item  @samp{--http-backend-info-refs} 
git-http-backend(1) が、 @samp{$GIT_URL/info/refs?service=git-upload-pack}
リクエストを処理するために使用します。 @uref{technical/http-protocol.html,the HTTP transfer  protocols} 文書の「Smart Clients」および @uref{technical/protocol-v2.html,the Git  Wire Protocol@comma{} Version 2} 文書の「HTTP Transport」を参照してください。なお、
git-receive-pack(1) でも同様です。

@item  <directory> 
同期元のリポジトリ。
@end table

@noindent

@chapheading ENVIRONMENT

@table @asis

@item  @samp{GIT_PROTOCOL} 
ワイヤープロトコルをハンドシェイクするために使用される内部変数。サーバー管理者は、この変数を渡すことができるようにいくつかのトランスポートを構成する必要がある場合があります。
git(1) のdiscussionを参照してください。
@end table

@noindent

@chapheading SEE ALSO

gitnamespaces(7)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-var,,,Top
@chapheading Name

git-var — Git論理変数を表示します

@noindent

@chapheading Synopsis

@display
git var ( -l | <variable> )
@end display


@noindent

@chapheading DESCRIPTION

Git論理変数を出力します。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-l} 
論理変数をリストします。さらに、Git構成ファイル .git/config のすべての変数も一覧表示されます。
(ただし、構成変数を一覧表示する機能は非推奨になり、 @samp{git config -l} が採用されました。)
@end table

@noindent

@chapheading EXAMPLES

@example
$ git var GIT_AUTHOR_IDENT
Eric W. Biederman <ebiederm@@lnxi.com> 1121223278 -0600
@end example

@noindent

@chapheading VARIABLES

@table @asis

@item  GIT_AUTHOR_IDENT 
コードの作者。

@item  GIT_COMMITTER_IDENT 
コードの一部をGitに入れた人。

@item  GIT_EDITOR 
Gitコマンドで使用するためのテキストエディタ。この値は、使用時にシェルによって解釈されることを意図しています。例: @samp{~/bin/vi} 、
@samp{$SOME_ENVIRONMENT_VARIABLE} 、 @samp{"C:\Program Files\Vim\gvim.exe" --nofork} 。
優先順位は、 @samp{$GIT_EDITOR} 環境変数 、@samp{core.editor} 構成、 @samp{$VISUAL} 、@samp{$EDITOR}
、そしてコンパイル時に選択されるデフォルト(通常は @emph{vi})です。

@item  GIT_PAGER 
Gitコマンドで使用するためのテキストビューア(例: less)。値はシェルによって解釈されることを意図しています。 優先順位は、
@samp{$GIT_PAGER} 環境変数、 @samp{core.pager} 構成、 @samp{$PAGER} 、そしてコンパイル時に選択されるデフォルト(通常は
@emph{less})です。
@end table

@noindent

@chapheading SEE ALSO

git-commit-tree(1) git-tag(1) git-config(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-verify-commit,,,Top
@chapheading Name

git-verify-commit — コミットのGPG署名を確認します。

@noindent

@chapheading Synopsis

@display
git verify-commit <commit>…
@end display


@noindent

@chapheading DESCRIPTION

@emph{git commit -S} によって作成されたGPG署名を検証します。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--raw} 
通常の人間が読める形式の出力ではなく、生のgpgステータス出力を、標準エラーに出力します。

@item  @samp{-v} 
@itemx  @samp{--verbose} 
検証する前に、コミットオブジェクトの内容を出力します。

@item  <commit>… 
GitコミットオブジェクトのSHA-1 ID。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-verify-pack,,,Top
@chapheading Name

git-verify-pack — パックされたGitアーカイブファイルを検証する

@noindent

@chapheading Synopsis

@display
git verify-pack [-v|--verbose] [-s|--stat-only] [--] <pack>.idx …
@end display


@noindent

@chapheading DESCRIPTION

@emph{git pack-objects}
コマンドで作成されたパックされたGitアーカイブの指定のidxファイルを読み取り、idxファイルと、対応するパックファイルが正しいことを確認します。

@noindent

@chapheading OPTIONS

@table @asis

@item  <pack>.idx … 
確認するidxファイル(複数ファイル指定可)

@item  @samp{-v} 
@itemx  @samp{--verbose} 
パックを確認した後、パックに含まれるオブジェクトのリストとデルタチェーン長のヒストグラムを表示します。

@item  @samp{-s} 
@itemx  @samp{--stat-only} 
パックの内容を確認せず、デルタチェーン長のヒストグラムのみを表示します。 @samp{--verbose} を使用すると、オブジェクトのリストも表示されます。

@item  -- 
これ以降の引数をオプションとして解釈しないでください。
@end table

@noindent

@chapheading OUTPUT FORMAT

オプション -v を指定する場合、使用される形式は以下のとおりです:

@example
SHA-1 type size size-in-packfile offset-in-packfile
@end example

は、パックで削除されていないオブジェクトの場合です。そして、

@example
SHA-1 type size size-in-packfile offset-in-packfile depth base-SHA-1
@end example

は、削除されたオブジェクトの場合です。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-verify-tag,,,Top
@chapheading Name

git-verify-tag — タグのGPG署名を確認する

@noindent

@chapheading Synopsis

@display
git verify-tag [--format=<format>] <tag>…
@end display


@noindent

@chapheading DESCRIPTION

@emph{git tag} によって作成されたgpg署名を検証します。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--raw} 
通常の人間が読める形式の出力の代わりに、生のgpgステータス出力を標準エラーに出力します。

@item  @samp{-v} 
@itemx  @samp{--verbose} 
検証する前に、タグオブジェクトの内容を出力します。

@item  <tag>… 
GitタグオブジェクトのSHA-1 ID。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-version,,,Top
@chapheading Name

git-version — Gitに関するバージョン情報を表示する

@noindent

@chapheading Synopsis

@display
git version [--build-options]
@end display


@noindent

@chapheading DESCRIPTION

オプションが指定されていない場合、 @emph{git} のバージョンが標準出力に出力されます。

@samp{git --version} は @samp{git version} と同じであることに注意してください。これは、前者が内部で後者に変換されるためです。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--build-options} 
診断目的でgitがどのように構築されたかに関する追加情報を含めます。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-web--browse,,,Top
@chapheading Name

git-web--browse — Webブラウザを起動するためのGitヘルパースクリプト

@noindent

@chapheading Synopsis

@display
git web--browse [<options>] <url|file>…
@end display


@noindent

@chapheading DESCRIPTION

このスクリプトは、引数として渡されたURLとファイルを、可能な限り、既に開いているWebブラウザーの新しいタブにHTMLページとして表示しようとします。

現在、以下のブラウザ(またはコマンド)がサポートされています:

@itemize 

@item
firefox (これは、KDEを使用しない場合のX Windowのデフォルトです)

@item
iceweasel

@item
seamonkey

@item
iceape

@item
chromium (chromium-browser としてもサポートされています)

@item
google-chrome (chromeとしてもサポートされています)

@item
konqueror (これはKDEのデフォルトです。以下の「Note about konqueror」を参照してください)

@item
opera

@item
w3m (これはグラフィカル環境以外のデフォルトです)

@item
elinks

@item
links

@item
lynx

@item
dillo

@item
open (これはMac OS X GUIのデフォルトです)

@item
start (これはMinGWのデフォルトです)

@item
cygstart (これはCygwinのデフォルトです)

@item
xdg-open
@end itemize

カスタムコマンドを指定することもできます。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-b <browser>} 
@itemx  @samp{--browser=<browser>} 
指定のブラウザを使用します。サポートされているブラウザのリストに含まれている必要があります。

@item  @samp{-t <browser>} 
@itemx  @samp{--tool=<browser>} 
同上。

@item  @samp{-c <conf.var>} 
@itemx  @samp{--config=<conf.var>} 
CONF.VAR はGit構成ファイルで検索されます。設定されている場合、その値は使用するブラウザを指定します。
@end table

@noindent

@chapheading CONFIGURATION VARIABLES

@noindent

@heading CONF.VAR( -c 由来) と web.browser

Webブラウザーは、 @samp{-c} (または @samp{--config})コマンドラインオプションで渡される構成変数、または前者が使用されていない場合は
@samp{web.browser} 構成変数を使用して指定できます。

@noindent

@heading browser.<tool>.path

あなたは構成変数 @samp{browser.<tool>.path} を設定することにより、希望するブラウザーへのフルパスを明示的に指定できます。たとえば、
@samp{browser.firefox.path} を設定することで、Firefoxへの絶対パスを設定できます。それ以外の場合、 @samp{git
web@{litdd@}browse} はツールがPATH上にあると想定します。

@noindent

@heading browser.<tool>.cmd

オプションまたは構成変数で指定されたブラウザーがサポートされているブラウザーに含まれていない場合、対応する @samp{browser.<tool>.cmd}
構成変数が検索されます。 この変数が存在する場合、 @samp{git web@{litdd@}browse}
は指定されたツールをカスタムコマンドとして扱い、シェルのevalを使用してURLを引数として渡してコマンドを実行します。

@noindent

@chapheading NOTE ABOUT KONQUEROR

@emph{konqueror} がコマンドラインオプションまたは構成変数で指定されている場合、可能であれば、 @emph{kfmclient}
を起動して、既に開いているkonquerorのHTMLマニュアルページを新しいタブで開こうとします。

一貫性を保つために、 @samp{browser.konqueror.path} が @samp{A_PATH_TO/konqueror}
のように設定されている場合にも、このようなトリックを試します。 つまり、代わりに @samp{A_PATH_TO/kfmclient} を起動しようと試みます。

あなたが本当に @samp{konqueror} の使用を望むのなら、あなたは以下のようなものを使用できます:

@example
        [web]
                browser = konq

        [browser "konq"]
                cmd = A_PATH_TO/konqueror
@end example


@noindent

@heading 注意: git-config --global について

注意: これらの構成変数は、おそらく以下のように @samp{--global} フラグを使用して設定する必要があることに注意してください:

@example
$ git config --global web.browser firefox
@end example


なぜなら、おそらくリポジトリ固有よりもユーザー固有であるためです。詳細については、 git-config(1) を参照してください。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-whatchanged,,,Top
@chapheading Name

git-whatchanged — 各コミットでの差分のログを表示

@noindent

@chapheading Synopsis

@display
git whatchanged <option>…
@end display


@noindent

@chapheading DESCRIPTION

各コミットのコミットログとdiff出力を表示します。

新規ユーザーは、これの代わりに git-log(1) を使用することをお勧めします。 @samp{whatchanged} コマンドは基本的に
git-log(1) と同じですが、デフォルトでは生の形式の差分出力を表示し、マージをスキップします。

このコマンドは主に歴史的な理由で保持されています。@samp{git log} が発明されるずっと前に Linux kernel mailing list
を読んで Gitを学んだ多くの人々の指は、このコマンドをタイプするよう訓練されています。

@noindent

@chapheading Examples

@table @asis

@item  @samp{git whatchanged -p v2.6.12.. include/scsi drivers/scsi} 
include/scsi または drivers/scsi サブディレクトリ内のファイルを変更したバージョン @emph{v2.6.12}
以降のコミットをパッチとして表示する

@item  @samp{git whatchanged --since="2 weeks ago" -- gitk} 
過去2週間の変更をファイル @emph{gitk} に表示します。 "--" は、「ブランチ名 @emph{gitk} 」との混同を避けるために必要です。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-worktree,,,Top
@chapheading Name

git-worktree — 複数の作業ツリーを管理します

@noindent

@chapheading Synopsis

@display
git worktree add [-f] [--detach] [--checkout] [--lock [--reason <string>]] [-b <new-branch>] <path> [<commit-ish>]
git worktree list [--porcelain]
git worktree lock [--reason <string>] <worktree>
git worktree move <worktree> <new-path>
git worktree prune [-n] [-v] [--expire <expire>]
git worktree remove [-f] <worktree>
git worktree repair [<path>…]
git worktree unlock <worktree>
@end display


@noindent

@chapheading DESCRIPTION

同一のリポジトリに接続されている複数の作業ツリーを管理します。

gitリポジトリは複数の作業ツリーをサポートできるため、一度に複数のブランチをチェックアウトできます。@samp{git worktree add}
を使用すると、新しい作業ツリーがリポジトリに関連付けられます。この新しい作業ツリーは、git-init(1) または
git-clone(1) によって作成された「メイン作業ツリー」(main working
tree)とは対照的に、「リンクされた作業ツリー」(linked working
tree)と呼ばれます。リポジトリには、1つのメイン作業ツリー(ベアリポジトリでない場合)と、0個以上のリンクされた作業ツリーがあります。あなたがリンクされた作業ツリーを使い終わったら、
@samp{git worktree remove} で削除します。

最も単純な形式では、 @samp{git worktree add <path>} は、名前が @samp{<path>}
の最後のコンポーネントである新しいブランチを自動的に作成します。これは、あなたが新しいトピックで作業する場合に便利です。たとえば、 @samp{git
worktree add ../hotfix} は、新しいブランチ @samp{hotfix} を作成し、パス @samp{../hotfix}
でチェックアウトします。代わりに、既存のブランチの新しい作業ツリーで作業するには、 @samp{git worktree add <path> <branch>}
を使用します。一方、既存の開発を妨げることなく実験的な変更やテストを行う場合は、ブランチに関連付けられていない「使い捨て」の作業ツリーを作成すると便利なことがよくあります。たとえば、
@samp{git worktree add -d <path>} は、現在のブランチと同じコミットで、切り離された`HEAD`(detached
HEAD)を持つ新しい作業ツリーを作成します。

@samp{git worktree remove}
を使用せずに作業ツリーを削除すると、リポジトリにある関連する管理ファイル(後述の「DETAILS」参照)が最終的には自動的に削除されます(git-config(1)
の @samp{gc.worktreePruneExpire} 参照)。または、メインまたはリンクされた作業ツリーで、古い管理ファイルをクリーンアップするために
@samp{git worktree prune} を実行できます。

リンクされた作業ツリーが、常にマウントされているとは限らないポータブルデバイスまたはネットワーク共有に保存されている場合、@samp{git worktree
lock} コマンドを、オプションで
`--reason`を指定して、作業ツリーがロックされている理由を説明して発行することで、管理ファイルが刈り込み(prune)されないようにすることができます。

@noindent

@chapheading COMMANDS

@table @asis

@item  add <path> [<commit-ish>] 
@samp{<path>} を作成し、それに @samp{<commit-ish>} をチェックアウトします。 新しい作業ディレクトリは現在のリポジトリにリンクされ、
@samp{HEAD} や @samp{index} などの作業ディレクトリ固有のファイルを除くすべてを共有します。便宜上、 @samp{<commit-ish>} は裸の @samp{-}
である場合があり、これは @samp{@@@{-1@}} と同義です。

上記 @samp{<commit-ish>} がブランチ名(以下 @samp{<branch>} とします)で見つからず、 @samp{-b} や @samp{-B} や @samp{--detach}
のいずれも使用されていないが、名前が一致する1つのリモート(以下 @samp{<remote>} とします)には追跡ブランチが存在する場合、上記は以下と同等です:

@example
$ git worktree add --track -b <branch> <path> <remote>/<branch>
@end example


ブランチが複数のリモートに存在し、そのうちの1つが @samp{checkout.defaultRemote} 設定変数によって名付けられた場合、
@samp{<branch>} がすべてのリモートでユニークでなくても、曖昧さをなくすためにその1つを使用します。例えば、
@samp{checkout.defaultRemote=origin} と設定すると、 @samp{<branch>} があいまいで、かつ @samp{origin}
リモートに存在する場合、常にそこからリモートブランチをチェックアウトすることができます。git-config(1) にある
@samp{checkout.defaultRemote} も参照してください。

@samp{<commit-ish>} が省略され、 @samp{-b} も @samp{-B} も @samp{--detach} も使用されていない場合、便宜上、新しい作業ツリーは
@samp{$(basename <path>)} にちなんで名付けらたブランチ(@samp{<branch>} とします)に関連付けられます。@samp{<branch>}
が存在しない場合、 @samp{-b <branch>} が指定されたかのように、 @samp{HEAD}
に基づく新しいブランチが自動的に作成されます。@samp{<branch>`が存在する場合で、他の場所でチェックアウトされていない場合は、新しい作業ツリーでチェックアウトされます。存在しない場合、コマンドは作業ツリーの作成を拒否します(}--force`
が使用されている場合を除く)。

@item  list 
各作業ツリーの詳細を一覧表示します。 メインの作業ツリーが最初にリストされ、次にリンクされた各作業ツリーがリストされます。
出力の詳細に含まれるのは、作業ツリーがベア(bare)であるかどうか、現在チェックアウトされているリビジョン、現在チェックアウトされているブランチ(または、存在しない場合は「切り離されたHEAD」(detached
HEAD))、ワークツリーがロックされている場合は「locked」、 @samp{prune}
コマンドによってワークツリーを刈り込みできる場合は「prunable」です。

@item  lock 
作業ツリーが常にマウントされているとは限らないポータブルデバイスまたはネットワーク共有上にある場合は、管理ファイルが自動的に刈り込み(prune)されないように、ツリーをロックします。
これにより、移動や削除も防止されます。 オプションで、@samp{--reason} を使用してロックの理由を指定します。

@item  move 
作業ツリーを新しい場所に移動します。このコマンドでは、メインの作業ツリーまたはサブモジュールを含むリンクされた作業ツリーを移動できないことに注意してください。(ただし、
@samp{git worktree repair}
コマンドを使用すると、メインの作業ツリーを手動で移動した場合に、リンクされた作業ツリーとの接続を再確立できます。)

@item  prune 
@samp{$GIT_DIR/worktrees} の作業ツリー情報を刈り込みます(prune)。

@item  remove 
作業ツリーを削除します。削除できるのは、クリーンな作業ツリー(追跡してないファイルが無く、かつ、追跡ファイルの変更が無い場合)のみです。汚れた作業ツリーまたはサブモジュールのあるツリーは、
@samp{--force} を使用して削除できます。メインの作業ツリーは削除できません。

@item  repair [<path>…] 
可能であれば、外部要因によって破損または古くなった作業ツリー管理ファイルを修復します。

たとえば、メインの作業ツリー(またはベアリポジトリ(bare
repository))を移動すると、リンクされた作業ツリーはそれを見つけることができなくなります。メインの作業ツリーで @samp{repair}
を実行すると、リンクされた作業ツリーからメインの作業ツリーへの接続が再確立されます。

同様に、リンクされた作業ツリーが @samp{git worktree move} を使用せずに移動された場合、メインの作業ツリー(またはベアリポジトリ(bare
repository))はそれを見つけることができません。直近に移動した作業ツリー内で @samp{repair}
を実行すると、接続が再確立されます。リンクされた作業ツリーが複数移動された場合、各作業ツリーの新しい @samp{<path>} を引数として任意の作業ツリーから
@samp{repair} を実行すると、指定されたすべてのパスへの接続が再確立されます。

メイン作業ツリーとリンクされた作業ツリーの両方が手動で移動された場合、メイン作業ツリーで @samp{repair} を実行し、リンクされた各作業ツリーの新しい
@samp{<path>} を指定すると、両方向のすべての接続が再確立されます。

@item  unlock 
作業ツリーのロックを解除(unlock)して、刈り込(prune)みまたは移動(move)または削除(delete)できるようにします。
@end table

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{-f} 
@itemx  @samp{--force} 
デフォルトでは、@samp{<commit-ish>} がブランチ名であり、別の作業ツリーによってすでにチェックアウトされている場合、または @samp{<path>}
がすでに作業ツリーに割り当てられているが欠落している場合(たとえば、 @samp{<path>`が手動で削除された場合)、`add}
は新しい作業ツリーの作成を拒否します。このオプションは、これらの安全装置(safeguards)をオーバーライドします。欠落しているがロックされている作業ツリーパスを追加するには、@samp{--force}
を2回指定します。

@samp{--force} が2回指定されていない限り、 @samp{move}
はロックされた作業ツリーの移動を拒否します。移動先がすでに他の作業ツリーに割り当てられているが欠落している場合(たとえば、 @samp{<new-path>}
が手動で削除された場合)は、 @samp{--force} は移動を続行できます。移動先がロックされている場合は、 @samp{--force} を2回使用します。

@samp{--force} が使用されていない限り、 @samp{remove} は汚れた作業ツリー(unclean working
tree)の削除を拒否します。ロックされた作業ツリーを削除するには、@samp{--force} を2回指定します。

@item  @samp{-b <new-branch>} 
@itemx  @samp{-B <new-branch>} 
@samp{add} を使用して、 @samp{<commit-ish>} から開始する @samp{<new-branch>} という名前の新しいブランチを作成し、
@samp{<new-branch>} を新しい作業ツリーにチェックアウトします。 @samp{<commit-ish>} を省略すると、デフォルトで @samp{HEAD}
になります。 デフォルトでは、 @samp{-b} は、新しいブランチがすでに存在する場合、それを作成することを拒否します。 @samp{-B}
はこの安全装置をオーバーライドし、 @samp{<new-branch>} を @samp{<commit-ish>} にリセットします。

@item  @samp{-d} 
@itemx  @samp{--detach} 
@samp{add} を使用して、新しい作業ツリーで @samp{HEAD} を切り離します(detach)。 git-checkout(1)
の「DETACHED HEAD」を参照してください。

@item  @samp{--[no-]checkout} 
デフォルトでは、 @samp{add} は @samp{<commit-ish>} をチェックアウトしますが、 @samp{--no-checkout}
を使用して、スパースチェックアウト(suppress checkout)の構成などのカスタマイズを行うためにチェックアウトを抑制することができます。
git-read-tree(1) の「Sparse checkout」を参照してください。

@item  @samp{--[no-]guess-remote} 
@samp{<commit-ish>} を伴わずに @samp{worktree add <path>} を使用し、 @samp{HEAD} から新しいブランチを作成する代わりに、
@samp{<path>}
のベース名に一致する追跡ブランチが１つリモートにだけ存在する場合、新しいブランチをそのリモート追跡ブランチに基づいて作成し、そのリモート追跡ブランチを新しいブランチの「アップストリーム」としてマークします。

これは、 @samp{worktree.guessRemote} 構成オプションを使用してデフォルトの動作として設定することもできます。

@item  @samp{--[no-]track} 
新しいブランチを作成するときに、 @samp{<commit-ish>} がブランチである場合は、新しいブランチの「アップストリーム」としてマークします。
@samp{<commit-ish>} がリモート追跡ブランチの場合、これの振る舞いがデフォルトです。詳細については、
git-branch(1)の @samp{--track} を参照してください。

@item  @samp{--lock} 
作成後は、作業ツリーをロックしたままにします。 これは、 @samp{git worktree add} の後に @samp{git worktree lock}
するのと同等ですが、競合状態(race condition)はありません。

@item  @samp{-n} 
@itemx  @samp{--dry-run} 
@samp{prune} では、何も削除しないでください。何が削除されるかを報告するだけです。

@item  @samp{--porcelain} 
@samp{list}
を使用すると、スクリプトの解析が容易な形式で出力されます。この形式は、Gitのバージョン間で、ユーザー構成に関係なく安定しています。詳細については、後述します。

@item  @samp{-q} 
@itemx  @samp{--quiet} 
@samp{add} を使用して、フィードバックメッセージを抑制します。

@item  @samp{-v} 
@itemx  @samp{--verbose} 
@samp{prune} を使用して、すべての削除を報告します。

@samp{list} を使用して、ワークツリーに関する追加情報を出力します(後述)。

@item  @samp{--expire <time>} 
@samp{prune} と共に使うと、 @samp{<time>} より古い未使用の作業ツリーのみを期限切れにします。

@samp{list} と共に使うと、 @samp{<time>}
より古い場合は、欠落している作業ツリーに刈り込み可能(prunable)という注釈(annotate)を付けます。

@item  @samp{--reason <string>} 
@samp{lock} または @samp{add --lock} と共に使用して、作業ツリーがロックされている理由の説明とします。

@item  <worktree> 
作業ツリーは、相対パスまたは絶対パスのいずれかで識別できます。

作業ツリーのパスの最後のパスコンポーネントが作業ツリー間で一意である場合、それを使用して作業ツリーを識別できます。 たとえば、
@samp{/abc/def/ghi} と @samp{/abc/def/ggg} の2つの作業ツリーしかない場合、前の作業ツリーを指すには、 @samp{ghi} または
@samp{def/ghi} で十分です。
@end table

@noindent

@chapheading REFS

複数の作業ツリーでは、一部のrefはすべての作業ツリー間で共有される場合があり、一部のrefはローカルです。 一例として、作業ツリーごとに異なる
@samp{HEAD} があります。このセクションでは、共有ルールと、ある作業ツリーのrefに別の作業ツリーからアクセスする方法について説明します。

一般に、すべての疑似ref(pseudo refs)は作業ツリーごとにあり、そして、@samp{refs/} で始まるすべての参照は共有されます。 疑似refは、
@samp{$GIT_DIR/refs} 内ではなく、 @samp{$GIT_DIR} の直下にある @samp{HEAD} のようなものです。 ただし、例外があります。
@samp{refs/bisect} 内のrefと @samp{refs/worktree} は共有されません。

作業ツリーごとのrefには、別の作業ツリーから、 @samp{main-worktree} と @samp{worktrees}
の2つの特別なパスを介してアクセスできます。 @samp{main-worktree} はメインの作業ツリーから作業ごとのツリーrefへのアクセスを提供し、
@samp{worktrees} すべてのリンクされた作業ツリーへのアクセスを提供します。

たとえば、 @samp{main-worktree/HEAD} または @samp{main-worktree/refs/bisect/good}
は、それぞれメインの作業ツリーの @samp{HEAD} および @samp{refs/bisect/good ` と同じ値に解決されます。 同様に、
`worktrees/foo/HEAD} または @samp{worktrees/bar/refs/bisect/bad} は
@samp{$GIT_COMMON_DIR/worktrees/foo/HEAD} および
@samp{$GIT_COMMON_DIR/worktrees/bar/refs/bisect/bad} と同じです。

refにアクセスするのに @samp{$GIT_DIR} の内部を直接調べないことをお勧めします。代わりに、refを正しく処理する
git-rev-parse(1) や git-update-ref(1) などのコマンドを使用してください。

@noindent

@chapheading CONFIGURATION FILE

デフォルトでは、リポジトリの @samp{config} ファイルはすべての作業ツリー間で共有されます。構成変数 @samp{core.bare} または
@samp{core.worktree} が構成ファイルにすでに存在する場合、それらはメインの作業ツリーにのみ適用されます。

作業ツリーに固有の構成を作成するには、 @samp{worktreeConfig} 拡張機能をオンにします。例:

@example
$ git config extensions.worktreeConfig true
@end example


このモードでは、指定の構成は @samp{git rev-parse --git-path config.worktree} が指すパスに残ります。 @samp{git
config --worktree}
を使用して、このファイルの構成を追加または更新できます。古いバージョンのGitは、この拡張機能を備えたリポジトリへのアクセスを拒否します。

注意: このファイルでは、 @samp{core.bare} と @samp{core.worktree} が例外扱いされないことに注意してください。 それらが
@samp{$GIT_DIR/config} に存在する場合は、メインの作業ツリーの @samp{config.worktree}
に移動する必要があります。この機会に、共有したくない他の構成を確認して、すべての作業ツリーに移動することもできます。

@itemize 

@item
@samp{core.worktree} と @samp{core.bare} は決して共有しないでください

@item
すべての作業ツリーに常にスパースチェックアウト(sparse checkout)を使用することが確実でない限りは、作業ツリーごとに
@samp{core.sparseCheckout} をお勧めします。
@end itemize

@noindent

@chapheading DETAILS

リンクされた各作業ツリーには、リポジトリの @samp{$ GIT_DIR/worktrees`ディレクトリにプライベートサブディレクトリがあります。
プライベートサブディレクトリの名前は通常、リンクされた作業ツリーのパスのベース名であり、一意にするために番号が追加される場合があります。たとえば、
`$GIT_DIR=/path/main/.git} の場合、コマンド @samp{git worktree add /path/other/test-next
next} はリンクされた作業ツリーを @samp{/path/other/test-next`に作成し、そしてまた
`$GIT_DIR/worktrees/test-next} ディレクトリ(または、 @samp{test-next} がすでに実行されている場合は、
@samp{$GIT_DIR/worktrees/test-next1} ディレクトリ)を作成します。

リンクされた作業ツリー内で、 @samp{$GIT_DIR} は、このプライベートディレクトリを指すように設定され(例では
@samp{/path/main/.git/worktrees/test-next} )、 @samp{$GIT_COMMON_DIR} はメインの作業ツリーの
@samp{$GIT_DIR} (例では @samp{/path/main/.git}
)を指すように設定されます。これらの設定は、リンクされた作業ツリーの最上位ディレクトリにある @samp{.git} ファイルで行われます。

@samp{git rev-parse --git-path} によるパス解決では、パスに応じて @samp{$GIT_DIR} または @samp{$GIT_COMMON_DIR}
のいずれかが使用されます。たとえば、リンクされた作業ツリーでは、 @samp{git rev-parse --git-path HEAD} は
@samp{/path/main/.git/worktrees/test-next/HEAD}
を返します(@samp{/path/other/test-next/.git/HEAD} や @samp{/path/main/.git/HEAD}
ではありません)。一方、 @samp{git rev-parse --git-path refs/heads/master} は
@samp{$GIT_COMMON_DIR} を使用し、 @samp{/path/main/.git/refs/heads/ master} を返します。refは、
@samp{refs/bisect} と @samp{refs/worktree} を除くすべての作業ツリーで共有されるためです。

詳細については、 gitrepository-layout(5) を参照してください。 経験則では、 @samp{$GIT_DIR}
内の何かに直接アクセスする必要がある場合、パスが @samp{$GIT_DIR} または @samp{$GIT_COMMON_DIR}
のどちらに属するかについては何も想定していません。 @samp{git rev-parse --git-path} を使用して、最終的なパスを取得してください。

リンクされた作業ツリーを手動で移動する場合は、エントリのディレクトリにある @samp{gitdir} ファイルを更新する必要があります。
たとえば、リンクされた作業ツリーが @samp{/newpath/test-next} に移動され、その @samp{.git} ファイルが
@samp{/path/main/.git/worktrees/test-next} を指しているならば、代わりに
@samp{/path/main/.git/worktrees/test-next/gitdir} を更新し @samp{/newpath/test-next}
を参照するようにします。もっといいのは、 @samp{git worktree repair} を実行して、接続を自動的に再確立することです。

@samp{$GIT_DIR/worktrees}
エントリが刈り込み(prune)されないようにする(これは、エントリの作業ツリーがポータブルデバイスに保存されている場合など、状況によっては便利です)には、
@samp{git worktree lock} コマンドを使用します。このコマンドは @samp{locked}
という名前のファイルをエントリのディレクトリに追加します。ファイルには、理由(reason)がプレーンテキストで含まれています。たとえば、リンクされた作業ツリーの
@samp{.git} ファイルが @samp{/path/main/.git/worktrees/test-next} を指しているならば、
@samp{/path/main/.git/worktrees/test-next/locked} という名前のファイルは @samp{test-next}
エントリが刈り込み(pruned)されるのを防ぎます。詳細については、 gitrepository-layout(5)
を参照してください。

@samp{extensions.worktreeConfig} が有効になっている場合、設定ファイル
@samp{.git/worktrees/<id>/config.worktree} は @samp{.git/config} の後に読み込まれます。

@noindent

@chapheading LIST OUTPUT FORMAT

@samp{worktreelist} コマンドには2つの出力形式があります。デフォルトの形式では、詳細が1行に複数列で表示されます。例えば:

@example
$ git worktree list
/path/to/bare-source            (bare)
/path/to/linked-worktree        abcd1234 [master]
/path/to/other-linked-worktree  1234abc  (detached HEAD)
@end example


このコマンドは、状態に応じて、各作業ツリーの注釈(annotations)も表示します。これらの注釈は以下のとおりです:

@itemize 

@item
@samp{locked} : 作業ツリーがロックされている場合。

@item
@samp{prunable} : 作業ツリーが @samp{git worktree prune} を介して刈り込みできる場合。
@end itemize

@example
$ git worktree list
/path/to/linked-worktree    abcd1234 [master]
/path/to/locked-worktree    acbd5678 (brancha) locked
/path/to/prunable-worktree  5678abc  (detached HEAD) prunable
@end example


これらの注釈(annotations)については、理由(reason)も利用できる可能性があり、これは冗長モード(verbose
mode)を使用して確認できます。そして、注釈はインデントされた次の行に移動され、その後に追加情報が続きます。

@example
$ git worktree list --verbose
/path/to/linked-worktree              abcd1234 [master]
/path/to/locked-worktree-no-reason    abcd5678 (detached HEAD) locked
/path/to/locked-worktree-with-reason  1234abcd (brancha)
        locked: working tree path is mounted on a portable device
/path/to/prunable-worktree            5678abc1 (detached HEAD)
        prunable: gitdir file points to non-existent location
@end example


注意: 追加情報が利用可能な場合、注釈は次の行に移動されることに注意してください。そうでない場合、注釈は作業ツリー自体と同じ行にとどまります。

@noindent

@heading Porcelain Format

磁器コマンドのフォーマットは、属性ごとに1行あります。 属性は、単一のスペースで区切られたラベルと値でリストされます。ブール属性(@samp{bare} や
@samp{detached} など)はラベルとしてのみリストされ、値がtrueの場合にのみ存在します。 一部の属性(@samp{locked}
など)は、ラベルとしてのみリストすることも、理由が利用可能かどうかに応じて値とともにリストすることもできます。作業ツリーの最初の属性は常に
@samp{worktree} であり、空の行はレコードの終わりを示します。例えば:

@example
$ git worktree list --porcelain
worktree /path/to/bare-source
bare

worktree /path/to/linked-worktree
HEAD abcd1234abcd1234abcd1234abcd1234abcd1234
branch refs/heads/master

worktree /path/to/other-linked-worktree
HEAD 1234abc1234abc1234abc1234abc1234abc1234a
detached

worktree /path/to/linked-worktree-locked-no-reason
HEAD 5678abc5678abc5678abc5678abc5678abc5678c
branch refs/heads/locked-no-reason
locked

worktree /path/to/linked-worktree-locked-with-reason
HEAD 3456def3456def3456def3456def3456def3456b
branch refs/heads/locked-with-reason
locked reason why is locked

worktree /path/to/linked-worktree-prunable
HEAD 1233def1234def1234def1234def1234def1234b
detached
prunable gitdir file points to non-existent location
@end example


ロック理由に改行などの「異常な」文字が含まれている場合、それらはエスケープされ、構成変数 @samp{core.quotePath}
で説明されているように理由全体がクォートされます(git-config(1) 参照)。例えば:

@example
$ git worktree list --porcelain
...
locked "reason\nwhy is locked"
...
@end example


@noindent

@chapheading EXAMPLES

リファクタリングセッションの真っ最中に、上司がやって来て、あなたに、すぐに何かを修正するように要求します。 通常、
git-stash(1)
を使用して変更を一時的に保存しますが、作業ツリーは、(新しいファイル、移動されたファイル、削除されたファイル、その他の断片が散らばっていて)混乱状態にあります。あなたはそれのいずれかを邪魔する危険を冒したくありません。あなたは代わりに、一時的にリンクされた作業ツリーを作成して緊急修正を行い、完了したらそれを削除してから、以前のリファクタリングセッションを再開することにします。

@example
$ git worktree add -b emergency-fix ../temp master
$ pushd ../temp
# ... hack hack hack ...
$ git commit -a -m 'emergency fix for boss'
$ popd
$ git worktree remove ../temp
@end example


@noindent

@chapheading BUGS

一般的な複数チェックアウト(multiple
checkout)はまだ実験段階であり、サブモジュールのサポートは不完全です。スーパープロジェクトを複数チェックアウトすることはお勧めしません。

@noindent

@chapheading GIT

Part of the git(1) suite

@node git-write-tree,,,Top
@chapheading Name

git-write-tree — 現在のインデックスからツリーオブジェクトを作成します

@noindent

@chapheading Synopsis

@display
git write-tree [--missing-ok] [--prefix=<prefix>/]
@end display


@noindent

@chapheading DESCRIPTION

現在のインデックスを使用してツリーオブジェクトを作成します。新しいツリーオブジェクトの名前が標準出力に出力されます。

インデックスは完全にマージされた状態である必要があります。

概念的には、 @emph{git write-tree} は、現在のインデックスの内容をツリーファイルのセットに sync()
します。現在ディレクトリに実際にあるものと一致させるには、 @emph{git write-tree} を実行する前に @emph{git update-index}
フェイズを実行する必要があります。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--missing-ok} 
通常、 @emph{git write-tree}
は、ディレクトリによって参照されるオブジェクトがオブジェクトデータベースに存在することを保証します。このオプションは、このチェックを無効にします。

@item  @samp{--prefix=<prefix>/} 
サブディレクトリ @samp{<prefix>}
を表すツリーオブジェクトを書き込みます。これは、指定されたサブディレクトリにあるサブプロジェクトのツリーオブジェクトを書き込むために使用できます。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node git,,,Top
@chapheading Name

git — くだらないコンテンツトラッカー

@noindent

@chapheading Synopsis

@display
git [--version] [--help] [-C <path>] [-c <name>=<value>]
    [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
    [-p|--paginate|-P|--no-pager] [--no-replace-objects] [--bare]
    [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
    [--super-prefix=<path>] [--config-env=<name>=<envvar>]
    <command> [<args>]
@end display


@noindent

@chapheading DESCRIPTION

Gitは、高速でスケーラブルな分散型リビジョン管理システムであり、高レベルの操作と内部へのフルアクセスの両方を提供する非常に豊富なコマンドセットを備えています。

始めは gittutorial(7) を参照してください。次に、便利な最小限のコマンドセットについては
giteveryday(7) を参照してください。 @uref{user-manual.html,Git User’s Manual}
には、より詳細な紹介があります。

あなたが基本的な概念をマスターしたら、このページに戻ってGitが提供するコマンドを学ぶことができます。「git help
command」を使用して、個々のGitコマンドについて詳しく知ることができます。 gitcli(7)
のマニュアルページには、コマンドラインコマンド構文の概要が記載されています。

最新のGitドキュメントの、フォーマットされ、ハイパーリンクされたコピーは、
@uref{https://git.github.io/htmldocs/git.html,https://git.github.io/htmldocs/git.html} または @uref{https://git-scm.com/docs,https://git-scm.com/docs}
で表示できます。

@noindent

@chapheading OPTIONS

@table @asis

@item  @samp{--version} 
@emph{git} プログラムの元となったGitスイートのバージョンを出力します。

このオプションは内部で @samp{git version ...} に変換されるので、 git-version(1)
コマンドと同じオプションを受け入れます。 @samp{--help} も指定されている場合は @samp{--version} よりも優先されます。

@item  @samp{--help} 
概要と、最も一般的に使用されるコマンドのリストを出力します。 オプション @samp{--all} または @samp{-a}
を指定すると、使用可能なすべてのコマンドが出力されます。Gitコマンドが明示された場合、このオプションはそのコマンドのマニュアルページを表示します。

マニュアルページの表示方法を制御するために、他のオプションを使用できます。@samp{git --help ...} は内部で @samp{git help ...}
に変換されるため、詳細については git-help(1) を参照してください。

@item  @samp{-C <path>} 
現在の作業ディレクトリではなく、「<path>」でgitが開始されたかのように実行します。 複数の @samp{-C}
オプションが指定されている場合、後続の「非絶対 @samp{-C <path> ` 」は、それぞれ先行する `-C <path>} に関連して解釈されます。
'<path>'は存在するが空の場合(例: @samp{-C" "})の場合、現在の作業ディレクトリは変更されません。

このオプションは、パス名の解釈が @samp{-C} オプションによって引き起こされる作業ディレクトリに対して行われるという点で、 @samp{--git-dir} や
@samp{--work-tree} のようなパス名を期待するオプションに影響します。たとえば、以下の2つの呼び出しは同等です:

@example
git --git-dir=a.git --work-tree=b -C c status
git --git-dir=c/a.git --work-tree=c/b status
@end example

@item  @samp{-c <name>=<value>} 
構成パラメーターをコマンドに渡します。指定された値は、構成ファイルの値を上書きします。 <name>は、「git
config」(ドットで区切られたサブキー)でリストされているものと同じ形式である必要があります。

@samp{git -c foo.bar ...} で @samp{=} を省略することは許可されており、その場合 @samp{foo.bar} を(設定ファイルの
@samp{[foo]bar} と同様に)ブール値のtrueに設定することに注意してください。等号と空の値(@samp{git -c foo.bar= ...}
など)を含むと、 @samp{foo.bar} が空の文字列に設定されます。 @samp{git config --type=bool} ではこれを @samp{false}
に変換します。

@item  @samp{--config-env=<name>=<envvar>} 
@samp{-c <name>=<value>} と同様に、構成変数 @emph{<name>} に値を指定します。ここで、 <envvar>
は、値を取得する環境変数の名前です。 @samp{-c}
とは異なり、値を空の文字列に直接設定するためのショートカットはありません。代わりに、環境変数自体を空の文字列に設定する必要があります。
@samp{<envvar>} が環境に存在しない場合はエラーになります。 @samp{<envvar>} には等号を含めることはできません。これは、 @samp{<name>}
に等号が含まれている場合のあいまいさを避けるためです。

これは、あなたが一時的な構成オプションをgitに渡したいが、他のプロセスで、あなたのコマンドライン(たとえば
@samp{/proc/self/cmdline})は読み取れるが、あなたの環境(たとえば
@samp{/proc/self/environ})は読み取れない可能性があるOS上で作業している場合に役立ちます。この動作はLinuxのデフォルトですが、あなたのシステムでは設定されてない場合があります。

注意:これにより、機密情報が値の一部である @samp{http.extraHeader}
などの変数のセキュリティが追加される可能性がありますが、機密情報をキーの一部にすることができるモノ、例えば
@samp{url.<base>.insteadOf} は使用できません。

@item  @samp{--exec-path[=<path>]} 
あなたのコアGitプログラムがインストールされている場所へのパス。これは、 GIT_EXEC_PATH
環境変数を設定することによっても制御できます。パスが指定されていない場合、「git」は現在の設定を出力して終了します。

@item  @samp{--html-path} 
GitのHTMLドキュメントがインストールされているパスを末尾のスラッシュなしで印刷し、終了します。

@item  @samp{--man-path} 
このバージョンのGitのマニュアルページのmanpath(@samp{man(1)} 参照)を印刷して終了します。

@item  @samp{--info-path} 
このバージョンのGitを文書化したInfoファイルがインストールされているパスを印刷して終了します。

@item  @samp{-p} 
@itemx  @samp{--paginate} 
標準出力が端末の場合は、すべての出力を @emph{less} (または設定されている場合は $PAGER )にパイプします。これにより、
@samp{pager.<cmd>} 構成オプションが上書きされます(以下の「Configuration Mechanism」セクションを参照)。

@item  @samp{-P} 
@itemx  @samp{--no-pager} 
Git出力をページャーにパイプしないでください。

@item  @samp{--git-dir=<path>} 
リポジトリ(".git" ディレクトリ)へのパスを設定します。これは、 @samp{GIT_DIR}
環境変数を設定することによっても制御できます。現在の作業ディレクトリへの絶対パスまたは相対パスにすることができます。

このオプションを使用して @samp{.git} ディレクトリの場所を指定すると、 (リポジトリとトップレベルの作業ツリーを検出できる、) @samp{.git}
サブディレクトリを持つディレクトリを検索しようとするリポジトリ検出機能がオフになり、あなたが作業ツリーの最上位にいるとGitに通知します。あなたが作業ツリーの最上位ディレクトリにいない場合は、
@samp{--work-tree=<path>} オプション(または @samp{GIT_WORK_TREE}
環境変数)を使用して、作業ツリーの最上位がどこにあるかをGitに通知する必要があります。

@samp{<path>} で開始されたかのようにgitを実行したい場合は、 @samp{git -C <path>} を使用します。

@item  @samp{--work-tree=<path>} 
作業ツリーへのパスを設定します。絶対パスまたは現在の作業ディレクトリからの相対パスにすることができます。これは、
GIT_WORK_TREE環境変数とcore.worktree構成変数を設定することによっても制御できます(詳細については、
git-config(1) の core.worktree を参照してください)。

@item  @samp{--namespace=<path>} 
Git名前空間を設定します。詳細については linkgit: gitnamespaces[7] を参照してください。 @samp{GIT_NAMESPACE}
環境変数を設定するのと同じです。

@item  @samp{--super-prefix=<path>} 
現在、内部使用のみです。リポジトリの上位からそのリポジトリのルートまでのパスを与えるプレフィックスを設定します。1つの使用法は、サブモジュールに、それを呼び出したスーパープロジェクトに関するコンテキストを与えることです。

@item  @samp{--bare} 
リポジトリをベアリポジトリとして扱います。GIT_DIR環境が設定されていない場合は、現在の作業ディレクトリに設定されます。

@item  @samp{--no-replace-objects} 
Gitオブジェクトを置き換えるための置換refを使用しません。 詳細については git-replace(1) を参照してください。

@item  @samp{--literal-pathspecs} 
パススペックを文字通り扱います(つまり globbing 無し、 pathspec magic 無しです)。 これは、
@samp{GIT_LITERAL_PATHSPECS} 環境変数を @samp{1} に設定するのと同じです。

@item  @samp{--glob-pathspecs} 
すべてのパススペックにグロブマジック(glob magic)を追加します。 これは、 @samp{GIT_GLOB_PATHSPECS} 環境変数を @samp{1}
に設定するのと同じです。 個々のパススペックで globbing を無効にするには、パススペックマジック @samp{:(literal)} を使用します。

@item  @samp{--noglob-pathspecs} 
すべてのパススペックにリテラルマジック(literal magic)を追加します。これは、 @samp{GIT_NOGLOB_PATHSPECS} 環境変数を
@samp{1} に設定するのと同じです。個々のパススペックでグロブを有効にするには、パススペックマジック @samp{:(glob)} を使用します。

@item  @samp{--icase-pathspecs} 
すべてのパススペックに icase magic を追加します。 これは、 @samp{GIT_ICASE_PATHSPECS} 環境変数を @samp{1}
に設定するのと同じです。

@item  @samp{--no-optional-locks} 
ロック(lock)を必要とするオプションの操作は実行しないでください。これは、 @samp{GIT_OPTIONAL_LOCKS} を @samp{0}
に設定するのと同じです。

@item  @samp{--list-cmds=group[,group...]} 
コマンドをグループ別に一覧表示します。これは 内部/実験的
なオプションであり、将来変更または削除される可能性があります。サポートされているグループは、builtins、parseopt(parse-optionsを使用するbuiltinコマンド)、main(libexecディレクトリ内のすべてのコマンド)、その他(git-プレフィックスを持つ
@samp{$PATH} 内の他のすべてのコマンド)、list-<category> (command-list.txt 内の categories
を参照)、nohelpers(ヘルパーコマンドを除く)、alias、config(構成変数 completion.commands
から取得したコマンドリスト)、です。
@end table

@noindent

@chapheading GIT COMMANDS

私達はGitを、高レベル(porcelain;磁器)コマンドと低レベル(plumbing;配管)コマンドに分けています。

@noindent

@chapheading High-level commands (porcelain)

磁器コマンドは、メインコマンド群といくつかの補助ユーティリティに分けられます。

@noindent

@heading Main porcelain commands

@table @asis

@item  git-add(1) 
Add file contents to the index.

@item  git-am(1) 
Apply a series of patches from a mailbox.

@item  git-archive(1) 
名前付きツリーからファイルのアーカイブを作成します.

@item  git-bisect(1) 
Use binary search to find the commit that introduced a bug.

@item  git-branch(1) 
List, create, or delete branches.

@item  git-bundle(1) 
Move objects and refs by archive.

@item  git-checkout(1) 
ブランチの切り替え、または作業ツリーファイルの復元を行います。.

@item  git-cherry-pick(1) 
Apply the changes introduced by some existing commits.

@item  git-citool(1) 
git-commitのグラフィカルな代替手段.

@item  git-clean(1) 
作業ツリーから追跡されていないファイルを削除する.

@item  git-clone(1) 
Clone a repository into a new directory.

@item  git-commit(1) 
Record changes to the repository.

@item  git-describe(1) 
Give an object a human readable name based on an available.

@item  git-diff(1) 
Show changes between commits, commit and working tree, etc.

@item  git-fetch(1) 
Download objects and refs from another repository.

@item  git-format-patch(1) 
電子メール送信用のパッチを準備します.

@item  git-gc(1) 
不要なファイルをクリーンアップし、ローカルリポジトリを最適化する.

@item  git-grep(1) 
Print lines matching a pattern.

@item  git-gui(1) 
Gitのための移植性の高いGUI.

@item  git-init(1) 
Create an empty Git repository or reinitialize an existing one.

@item  git-log(1) 
コミットのログを表示.

@item  git-maintenance(1) 
Run tasks to optimize Git repository data.

@item  git-merge(1) 
Join two or more development histories together.

@item  git-mv(1) 
ファイルまたはディレクトリまたはシンボリックリンクを移動(move)または名前変更(rename)します.

@item  git-notes(1) 
Add or inspect object notes.

@item  git-pull(1) 
Fetch from and integrate with another repository or a local.

@item  git-push(1) 
Update remote refs along with associated objects.

@item  git-range-diff(1) 
Compare two commit ranges (e.g. two versions of a branch).

@item  git-rebase(1) 
別のベースの先端のその先頭にコミットを再適用します.

@item  git-reset(1) 
Reset current HEAD to the specified state.

@item  git-restore(1) 
作業ツリーファイルを復元します.

@item  git-revert(1) 
いくつかの既存のコミットを元に戻します.

@item  git-rm(1) 
Remove files from the working tree and from the index.

@item  git-shortlog(1) 
@emph{git log} の出力を要約します。.

@item  git-show(1) 
さまざまなタイプのオブジェクトを表示.

@item  git-sparse-checkout(1) 
Initialize and modify the sparse-checkout.

@item  git-stash(1) 
Stash the changes in a dirty working directory away.

@item  git-status(1) 
Show the working tree status.

@item  git-submodule(1) 
サブモジュールを初期化、更新、または検査します.

@item  git-switch(1) 
ブランチを切り替える.

@item  git-tag(1) 
Create, list, delete or verify a tag object signed with GPG.

@item  git-worktree(1) 
複数の作業ツリーを管理します.

@item  gitk(1) 
Gitリポジトリブラウザ.
@end table

@noindent

@heading Ancillary Commands(補助コマンド)

操作コマンド:

@table @asis

@item  git-config(1) 
リポジトリオプションまたはグローバルオプションを、取得および設定する.

@item  git-fast-export(1) 
Git data exporter.

@item  git-fast-import(1) 
Backend for fast Git data importers.

@item  git-filter-branch(1) 
Rewrite branches.

@item  git-mergetool(1) 
マージ競合解決ツールを実行して、マージ競合を解決します.

@item  git-pack-refs(1) 
効率的なリポジトリアクセスのためにヘッド(heads)とタグ(tags)をパックします.

@item  git-prune(1) 
オブジェクトデータベースで、到達不能なすべてのオブジェクトを剪定(prune)します.

@item  git-reflog(1) 
reflog情報を管理します.

@item  git-remote(1) 
Manage set of tracked repositories.

@item  git-repack(1) 
リポジトリ内のアンパックオブジェクトをパックする.

@item  git-replace(1) 
オブジェクトを置き換えるためのrefsの作成、一覧表示、削除.
@end table

問合せコマンド:

@table @asis

@item  git-annotate(1) 
指定ファイルの各行のコミット情報を表示.

@item  git-blame(1) 
Show what revision and author last modified each line of a file.

@item  git-bugreport(1) 
ユーザーがバグ報告を提出するための情報を収集する.

@item  git-count-objects(1) 
パックされていない(unpack)オブジェクトの数とそのディスク消費量を計量します.

@item  git-difftool(1) 
Show changes using common diff tools.

@item  git-fsck(1) 
データベース内のオブジェクトの接続性(connectivity)と有効性(validity)を検証します.

@item  git-help(1) 
Display help information about Git.

@item  git-instaweb(1) 
gitwebで作業リポジトリをインスタントにブラウズします.

@item  git-merge-tree(1) 
インデックスに触れずに(without touching)3者間マージを表示する.

@item  git-rerere(1) 
競合するマージの記録された競合解決決定を再利用する.

@item  git-show-branch(1) 
ブランチとそのコミットを表示します.

@item  git-verify-commit(1) 
コミットのGPG署名を確認します。.

@item  git-verify-tag(1) 
タグのGPG署名を確認する.

@item  git-whatchanged(1) 
各コミットでの差分のログを表示.

@item  gitweb(1) 
Git Webインターフェイス(GitリポジトリのためのWebフロントエンド).
@end table

@noindent

@heading Interacting with Others(他者との交流)

これらのコマンドは、電子メールを利用したパッチを介して、他のSCMや人々と対話するためのものです。

@table @asis

@item  git-archimport(1) 
GNU Arch リポジトリをGitにインポートします.

@item  git-cvsexportcommit(1) 
単一のコミットをCVSチェックアウトにエクスポートします.

@item  git-cvsimport(1) 
Salvage your data out of another SCM people love to hate.

@item  git-cvsserver(1) 
A CVS server emulator for Git.

@item  git-imap-send(1) 
標準入力からIMAPフォルダへパッチのコレクションを送信します.

@item  git-p4(1) 
Perforceリポジトリからのインポートと、Perforceリポジトリへのsubmit.

@item  git-quiltimport(1) 
quilt(キルト)パッチセットを現在のブランチに適用します.

@item  git-request-pull(1) 
保留中の変更の概要を生成します.

@item  git-send-email(1) 
Send a collection of patches as emails.

@item  git-svn(1) 
Bidirectional operation between a Subversion repository and Git.
@end table

@noindent

@heading Reset, restore and revert

同様の名前の3つのコマンドがあります。それは @samp{git reset} と @samp{git restore} と @samp{git revert} です。

@itemize 

@item
git-revert(1) は、他のコミットによって行われた変更を元に戻す新しいコミットを作成することです。

@item
git-restore(1)
は、インデックスまたは別のコミットから作業ツリー内のファイルを復元することです。このコマンドはブランチを更新しません。このコマンドを使用して、別のコミットからインデックス内のファイルを復元することもできます。

@item
git-reset(1)
は、ブランチを更新し、ブランチにコミットを追加または削除するために先端ポインタが指し示す先端(tip)を移動させることです。この操作により、コミット履歴が変更されます。

@samp{git restore} と重複しますが、 @samp{git reset} はインデックスを復元するためにも使用できます。
@end itemize

@noindent

@chapheading Low-level commands (plumbing)

Gitには独自の磁器コマンドレイヤーが含まれていますが、代替磁器コマンドの開発をサポートするには、その低レベルのコマンドで十分です。このような磁器コマンドの開発者は
git-update-index(1) と git-read-tree(1) を読むことから始めるといいでしょう。

これらの低レベルコマンドへのインターフェイス(入力、出力、オプションのセット、セマンティクス)は、これらのコマンドが主にスクリプトで使用されるため、磁器レベルのコマンドよりもはるかに安定していることを意味します。
一方、磁器コマンドへのインターフェースは、エンドユーザーエクスペリエンスを向上させるために変更される可能性があります。

以下の説明では、低レベルのコマンドを、オブジェクト(リポジトリ、インデックス、作業ツリー内)を操作するコマンドと、オブジェクトに問い合わせて比較するコマンドと、リポジトリ間でオブジェクトと参照を移動するコマンドに、分けています。

@noindent

@heading Manipulation commands(操作コマンド)

@table @asis

@item  git-apply(1) 
Apply a patch to files and/or to the index.

@item  git-checkout-index(1) 
Copy files from the index to the working tree.

@item  git-commit-graph(1) 
Gitコミットグラフファイル(commit-graph file)の書き出しと検証(verify).

@item  git-commit-tree(1) 
新しいコミットオブジェクトを作成します.

@item  git-hash-object(1) 
オブジェクトIDを計算し、オプションでファイルからブロブを作成する.

@item  git-index-pack(1) 
既存のパックされたアーカイブのパックインデックスファイル構築.

@item  git-merge-file(1) 
3方向ファイルマージを実行する.

@item  git-merge-index(1) 
マージが必要なファイルのマージを実行します.

@item  git-mktag(1) 
追加の検証(extra validation)でタグオブジェクトを作成します.

@item  git-mktree(1) 
ls-tree形式のテキストからツリーオブジェクトを構築する.

@item  git-multi-pack-index(1) 
multi-pack-indexを書き出し・検証します.

@item  git-pack-objects(1) 
オブジェクトのパックされたアーカイブを作成する.

@item  git-prune-packed(1) 
すでにパックファイルにある余分なオブジェクトを削除します.

@item  git-read-tree(1) 
Reads tree information into the index.

@item  git-symbolic-ref(1) 
シンボリックrefの読み取り、変更、および削除.

@item  git-unpack-objects(1) 
パックされたアーカイブからオブジェクトを取り出します.

@item  git-update-index(1) 
Register file contents in the working tree to the index.

@item  git-update-ref(1) 
Update the object name stored in a ref safely.

@item  git-write-tree(1) 
現在のインデックスからツリーオブジェクトを作成します.
@end table

@noindent

@heading Interrogation commands(問合せコマンド)

@table @asis

@item  git-cat-file(1) 
Provide content or type and size information for repository.

@item  git-cherry(1) 
アップストリームにまだ適用されていないコミットを検索する.

@item  git-diff-files(1) 
作業ツリーとインデックス内のファイルを比較します.

@item  git-diff-index(1) 
ツリーを作業ツリーまたはインデックスと比較します.

@item  git-diff-tree(1) 
2つのツリーオブジェクト間で、ブロブの内容とモードを比較します.

@item  git-for-each-ref(1) 
各refに関する情報を出力します.

@item  git-for-each-repo(1) 
リポジトリのリストでGitコマンドを実行します.

@item  git-get-tar-commit-id(1) 
git-archiveを使用して作成されたアーカイブからコミットIDを抽出します.

@item  git-ls-files(1) 
インデックスと作業ツリーのファイルに関する情報を表示する.

@item  git-ls-remote(1) 
リモートリポジトリの参照を一覧表示する.

@item  git-ls-tree(1) 
ツリーオブジェクトの内容を一覧表示します.

@item  git-merge-base(1) 
Find as good common ancestors as possible for a merge.

@item  git-name-rev(1) 
指定のrevのシンボリック名を検索します.

@item  git-pack-redundant(1) 
無駄なパックファイルを探す.

@item  git-rev-list(1) 
コミットオブジェクトを新しい順に一覧表示します.

@item  git-rev-parse(1) 
パラメータを選択してもみもみします。.

@item  git-show-index(1) 
パックされたアーカイブインデックスを表示する.

@item  git-show-ref(1) 
ローカルリポジトリ内の参照を一覧表示します.

@item  git-unpack-file(1) 
ブロブの内容を含む一時(temporary)ファイルを作成します.

@item  git-var(1) 
Git論理変数を表示します.

@item  git-verify-pack(1) 
パックされたGitアーカイブファイルを検証する.
@end table

一般に、問い合わせコマンドは作業ツリー内のファイルには影響しません。

@noindent

@heading Syncing repositories(リポジトリの同期)

@table @asis

@item  git-daemon(1) 
Gitリポジトリ用のほんまにシンプルなサーバー.

@item  git-fetch-pack(1) 
別のリポジトリから不足しているオブジェクトを受け取ります.

@item  git-http-backend(1) 
Server side implementation of Git over HTTP.

@item  git-send-pack(1) 
Push objects over Git protocol to another repository.

@item  git-update-server-info(1) 
ダムサーバー(dumb servers)を支援するために補助情報ファイル(auxiliary info.
@end table

以下は、上記で使用されるヘルパーコマンドです。エンドユーザーは通常、これらを直接使用することはありません。

@table @asis

@item  git-http-fetch(1) 
HTTPでリモートGitリポジトリからダウンロード.

@item  git-http-push(1) 
HTTP/DAV を介してオブジェクトを別のリポジトリにプッシュする.

@item  git-receive-pack(1) 
Receive what is pushed into the repository.

@item  git-shell(1) 
GitのみのSSHアクセス用の制限付きログインシェル.

@item  git-upload-archive(1) 
アーカイブを git-archive に送り返す.

@item  git-upload-pack(1) 
パックされたオブジェクトをgit-fetch-packに送り返す.
@end table

@noindent

@heading Internal helper commands(内部ヘルパーコマンド)

これらは、他のコマンドで使用される内部ヘルパーコマンドです。エンドユーザーは通常、これらを直接使用することはありません。

@table @asis

@item  git-check-attr(1) 
gitattributes情報を表示.

@item  git-check-ignore(1) 
gitignoreや除外ファイルのデバッグ.

@item  git-check-mailmap(1) 
連絡先(contacts)の、正式な名前と電子メールアドレスを表示.

@item  git-check-ref-format(1) 
参照名が整形式であることを確認します.

@item  git-column(1) 
データを複数列表示する.

@item  git-credential(1) 
ユーザー資格情報の取得と保存.

@item  git-credential-cache(1) 
パスワードを一時的にメモリに保存するヘルパー.

@item  git-credential-store(1) 
資格情報をディスクに保存するヘルパー.

@item  git-fmt-merge-msg(1) 
git-fmt-merge-msg-マージコミットメッセージを生成します.

@item  git-interpret-trailers(1) 
コミットメッセージの構造化情報を追加またはパースします.

@item  git-mailinfo(1) 
単一の電子メールメッセージからパッチと作成者を抽出します.

@item  git-mailsplit(1) 
簡易 UNIX mbox 分割プログラム.

@item  git-merge-one-file(1) 
git-merge-indexで使用する標準のヘルパープログラム.

@item  git-patch-id(1) 
パッチの一意のIDを計算します.

@item  git-sh-i18n(1) 
シェルスクリプトのためのGit用i18nセットアップコード.

@item  git-sh-setup(1) 
一般的なGitシェルスクリプトのセットアップコード.

@item  git-stripspace(1) 
不要な空白(whitespace)を削除します.
@end table

@noindent

@chapheading Guides(ガイド)

以下のドキュメントページ群は、Gitの概念に関するガイドです。

@table @asis

@item  gitattributes(5) 
パスごとの属性の定義.

@item  gitcli(7) 
Gitコマンドラインのインターフェイスと規則.

@item  gitcore-tutorial(7) 
開発者のためのGit coreチュートリアル.

@item  gitcredentials(7) 
Gitにユーザー名とパスワードを提供する.

@item  gitcvs-migration(7) 
CVSユーザー向けGit.

@item  gitdiffcore(7) 
diff出力の微調整.

@item  giteveryday(7) 
Git日常利用に役立つ最小限のコマンドセット.

@item  gitfaq(7) 
Gitの使用に関するよくある質問(FAQ).

@item  gitglossary(7) 
Git用語集.

@item  githooks(5) 
Gitで使われるフック.

@item  gitignore(5) 
無視する、意図的に追跡しないファイルを指定します.

@item  gitmailmap(5) 
作者(author)/コミッター(committer) および/または 電子メールアドレス(E-Mail.

@item  gitmodules(5) 
サブモジュールプロパティの定義.

@item  gitnamespaces(7) 
Git名前空間.

@item  gitremote-helpers(7) 
リモートリポジトリと対話するためのヘルパープログラム群.

@item  gitrepository-layout(5) 
Gitリポジトリの間取り.

@item  gitrevisions(7) 
Gitのリビジョンと範囲を指定する.

@item  gitsubmodules(7) 
あるリポジトリを別のリポジトリ内にマウントする.

@item  gittutorial(7) 
Git入門.

@item  gittutorial-2(7) 
Git入門パート2.

@item  gitworkflows(7) 
Gitで推奨の作業手順の概要.
@end table

@noindent

@chapheading Configuration Mechanism(構成メカニズム)

Gitは、単純なテキスト形式を使用して、リポジトリごとおよびユーザーごとのカスタマイズを保存します。 このような構成ファイルは以下のようになります:

@example
#
# A '#' or ';' character indicates a comment.
#

; core variables
[core]
        ; Don't trust file modes
        filemode = false

; user identity
[user]
        name = "Junio C Hamano"
        email = "gitster@@pobox.com"
@end example


さまざまなコマンドが構成ファイルから読み取られ、それに応じて操作が調整されます。構成メカニズムのリストと詳細については、
git-config(1) を参照してください。

@noindent

@chapheading Identifier Terminology(識別子の用語)

@table @asis

@item  <object> 
任意のタイプのオブジェクトのオブジェクト名を現します。

@item  <blob> 
BLOBオブジェクト名を現します。

@item  <tree> 
ツリーオブジェクト名を示します。

@item  <commit> 
コミットオブジェクト名を示します。

@item  <tree-ish> 
ツリーまたはコミットまたはタグオブジェクト名を示します。 <tree-ish> 引数を取るコマンドは、最終的には <tree>
オブジェクトを操作したいので、 <tree> を指す <commit> オブジェクトと <tag>
オブジェクトは自動的に逆参照(dereference)されます。(訳注: tree-ish;ツリーっぽいナニかの意)

@item  <commit-ish> 
コミットまたはタグオブジェクト名を示します。 <commit-ish> 引数を取るコマンドは、最終的には <commit>
オブジェクトを操作したいので、 <commit> を指す <tag>オブジェクトを自動的に逆参照します。

@item  <type> 
オブジェクトタイプが必要であることを示します。 現在、 @samp{blob} または @samp{tree} または @samp{commit} または @samp{tag}
のいずれかです。

@item  <file> 
ファイル名を示します。ほとんどの場合、 @samp{GIT_INDEX_FILE} が記述するツリー構造のルートを基準にしています。
@end table

@noindent

@chapheading Symbolic Identifiers

<object> を受け入れるGitコマンドでは、以下の記号表記も使用できます:

@table @asis

@item  HEAD 
現在のブランチのヘッドを現します。

@item  <tag> 
有効なタグ名(つまり @samp{refs/tags/<tag>} ref)。

@item  <head> 
有効なhead名(つまり @samp{refs/heads/<head>} ref)。
@end table

オブジェクト名のスペルのより完全なリストについては、 gitrevisions(7) の「SPECIFYING
REVISIONS」セクションを参照してください。

@noindent

@chapheading File/Directory Structure

gitrepository-layout(5) 文書を参照してください。

各フックの詳細については githooks(5) をご覧下さい。

高レベルのSCMは、 @samp{$GIT_DIR} で追加情報を提供および管理する場合があります。

@noindent

@chapheading Terminology(用語)

gitglossary(7) を参照してください。

@noindent

@chapheading Environment Variables(環境変数)

さまざまなGitコマンドは、以下の環境変数を使用します:

@noindent

@heading The Git Repository

これらの環境変数は、「すべての」コアGitコマンドに適用されます。 Nb: Gitの上位にあるSCMSによって 使用/オーバーライド
される可能性があることに注意してください。したがって、外部のフロントエンドを使用する場合は注意が必要です。

@table @asis

@item  @samp{GIT_INDEX_FILE} 
この環境変数は、代替インデックスファイルを指定できます。指定しない場合、デフォルトの @samp{$GIT_DIR/index} が使用されます。

@item  @samp{GIT_INDEX_VERSION} 
この環境変数を使用すると、新しいリポジトリのインデックスバージョンを指定できます。「既存のインデックスファイルには影響しません」。デフォルトでは、バージョン2または3のインデックスファイルが使用されます。詳細については、
git-update-index(1) を参照してください。

@item  @samp{GIT_OBJECT_DIRECTORY} 
オブジェクトストレージディレクトリがこの環境変数を介して指定されている場合、 sha1
ディレクトリがその下に作成されます。それ以外の場合は、デフォルトの @samp{$GIT_DIR/objects} ディレクトリが使用されます。

@item  @samp{GIT_ALTERNATE_OBJECT_DIRECTORIES} 
Gitオブジェクトは不変であるため、古いオブジェクトを共有の読み取り専用ディレクトリにアーカイブできます。この変数は、Gitオブジェクトの検索に使用できるGitオブジェクトディレクトリの
@samp{:} で区切られた(Windowsでは @samp{;} で区切られた)リストを指定します。新しいオブジェクトはこれらのディレクトリに書き込まれません。

@samp{"}
(二重引用符;\x22)で始まるエントリは、Cスタイルの引用符で囲まれたパスとして解釈され、先頭と末尾の二重引用符が削除され、バックスラッシュ(@samp{\'
\x5c);のエスケープが尊重されます。たとえば、値 `"path-with-\"-and-:-in-it":vanilla-path} には
@samp{path-with-"-and-:-in-it} と @samp{vanilla-path} の2つのパスがあります。

@item  @samp{GIT_DIR} 
@samp{GIT_DIR} 環境変数が設定されている場合、リポジトリのベースにデフォルトの @samp{.git} の代わりに使用するパスを指定します。
@samp{--git-dir} コマンドラインオプションもこの値を設定します。

@item  @samp{GIT_WORK_TREE} 
作業ツリーのルートへのパスを設定します。 これは、 @samp{--work-tree} コマンドラインオプションと core.worktree
構成変数でも制御できます。

@item  @samp{GIT_NAMESPACE} 
Git名前空間(Git namespace)を設定します。詳細については、 gitnamespaces(7) を参照してください。
@samp{--namespace} コマンドラインオプションもこの値を設定します。

@item  @samp{GIT_CEILING_DIRECTORIES} 
これは、コロン(@samp{:})で区切られた絶対パスのリストである必要があります。設定されている場合、これは、リポジトリディレクトリを探すときにGitがchdirを実行してはいけないディレクトリのリストです(読み込みの遅いネットワークディレクトリを除外する場合に便利です)。コマンドラインまたは環境で設定されている現在の作業ディレクトリまたはGIT_DIRは除外されません。通常、Gitはこのリストのエントリを読み取り、現在のディレクトリと比較するために存在する可能性のあるシンボリックリンクを解決する必要があります。ただし、このアクセスが遅い場合でも、リストに空のエントリを追加して、後続のエントリがシンボリックリンクではなく、解決する必要がないことをGitに通知できます。
例: @samp{GIT_CEILING_DIRECTORIES=/maybe/symlink::/very/slow/non/symlink}

@item  @samp{GIT_DISCOVERY_ACROSS_FILESYSTEM} 
@samp{.git}
リポジトリディレクトリがないディレクトリで実行すると、Gitはそれより親のディレクトリでそのようなディレクトリを見つけて作業ツリーの最上位を見つけようとしますが、デフォルトではファイルシステムの境界を越えません。この環境変数をtrueに設定して、ファイルシステムの境界で停止しないようにGitに指示できます。
@samp{GIT_CEILING_DIRECTORIES} と同様に、これは @samp{GIT_DIR}
またはコマンドラインで設定された明示的なリポジトリディレクトリには影響しません。

@item  @samp{GIT_COMMON_DIR} 
この変数にパスが設定されている場合、通常は $GIT_DIR
にある非ワークツリーファイルが、代わりにこのパスから取得されます。HEADやインデックスなどのワークツリー固有のファイルは $GIT_DIR
から取得されます。詳細については、 gitrepository-layout(5) と git-worktree(1)
を参照してください。この変数は GIT_INDEX_FILE や GIT_OBJECT_DIRECTORY
などの他のパス変数よりも優先順位が低くなります。

@item  @samp{GIT_DEFAULT_HASH} 
この変数が設定されている場合、新しいリポジトリのデフォルトのハッシュアルゴリズムはこの値に設定されます。
現在、この値はクローン作成時は無視され、代わりに、リモートリポジトリの設定が使用されます。デフォルトは「sha1」です。この変数は実験的です！(「THIS
VARIABLE IS EXPERIMENTAL!」)  git-init(1) の @samp{--object-format}
を参照してください。
@end table

@noindent

@heading Git Commits

@table @asis

@item  @samp{GIT_AUTHOR_NAME} 
コミットまたはタグオブジェクトを作成するとき、またはreflogを書き込むときに、作者IDで使用される、人間が読める名前。 @samp{user.name} と
@samp{author.name} の構成設定を上書きします。

@item  @samp{GIT_AUTHOR_EMAIL} 
コミットまたはタグオブジェクトを作成するとき、またはreflogを書き込むときに作者IDで使用される電子メールアドレス。 @samp{user.email} と
@samp{author.email} の設定を上書きします。

@item  @samp{GIT_AUTHOR_DATE} 
commitまたはtagオブジェクトを作成するとき、またはreflogを書き込むときに作者IDに使用される日付。有効な形式については、
git-commit(1) を参照してください。

@item  @samp{GIT_COMMITTER_NAME} 
コミットオブジェクトまたはタグオブジェクトを作成するとき、またはreflogを書き込むときに、コミッターIDで使用される、人間が読める形式の名前。
@samp{user.name} と @samp{committer.name} の設定を上書きします。

@item  @samp{GIT_COMMITTER_EMAIL} 
コミットまたはタグオブジェクトを作成するとき、またはreflogを書き込むときに作者IDで使用される電子メールアドレス。 @samp{user.email} と
@samp{committer.email} の設定を上書きします。

@item  @samp{GIT_COMMITTER_DATE} 
コミットオブジェクトまたはタグオブジェクトを作成するとき、またはreflogを書き込むときにコミッターIDに使用される日付。有効な形式については、
git-commit(1) を参照してください。

@item  @samp{EMAIL} 
他の関連する環境変数または構成設定が設定されていない場合に、作者とコミッターのIDで使用される電子メールアドレス。
@end table

@noindent

@heading Git Diffs

@table @asis

@item  @samp{GIT_DIFF_OPTS} 
有効な設定は、統一された差分(unified diff)が作成されたときに表示されるコンテキスト行の数を設定するための @samp{--unified=??}
または @samp{-u??} だけです。これは、Git diff コマンドラインで渡される @samp{-U} または @samp{--unified}
のオプション値よりも優先されます。

@item  @samp{GIT_EXTERNAL_DIFF} 
環境変数 @samp{GIT_EXTERNAL_DIFF}
が設定されている場合、それによって指定されたプログラムが呼び出されてdiffが生成され、Gitは組み込みのdiff機構を使用しません。
追加または削除または変更されたパスの場合、 @samp{GIT_EXTERNAL_DIFF} は以下の7つのパラメーターで呼び出されます:

@example
path old-file old-hex old-mode new-file new-hex new-mode
@end example

これは:

@item  <old|new>-file 
GIT_EXTERNAL_DIFF が <old|new> の内容を読み取るために
使用できるファイルです。

@item  <old|new>-hex 
16進40桁のSHA-1ハッシュです。

@item  <old|new>-mode 
8進数で表現されたファイルモードです。

ファイルパラメータは、ユーザーの作業ファイル(たとえば "git-diff-files" の @samp{new-file} )、または @samp{/dev/null}
(たとえば、新しいファイルが追加されたときの @samp{old-file} )、または一時ファイル(たとえば インデックスの @samp{old-file})
を指し示す事ができます。 @samp{GIT_EXTERNAL_DIFF} は、一時ファイルの削除(unlink)を心配する必要はありません。一時ファイルは
@samp{GIT_EXTERNAL_DIFF} の指定したプログラムの呼び出しが終了すると削除されます。

パスがマージされていない場合、 @samp{GIT_EXTERNAL_DIFF} は1つのパラメーター <path> で呼び出されます。

パス @samp{GIT_EXTERNAL_DIFF} が呼び出されるたびに、 @samp{GIT_DIFF_PATH_COUNTER} と
@samp{GIT_DIFF_PATH_TOTAL} の2つの環境変数が設定されます。

@item  @samp{GIT_DIFF_PATH_COUNTER} 
パスごとに1ずつインクリメントされる1で始まるカウンター。

@item  @samp{GIT_DIFF_PATH_TOTAL} 
パスの総数。
@end table

@noindent

@heading other

@table @asis

@item  @samp{GIT_MERGE_VERBOSITY} 
再帰的マージ戦略(recursive merge strategy)によって表示される出力の量を制御する数値。 merge.verbosity
をオーバーライドします。 git-merge(1) を参照してください

@item  @samp{GIT_PAGER} 
この環境変数は @samp{$PAGER} をオーバーライドします。 空の文字列または値 "cat"に設定されている場合、Gitはページャーを起動しません。
git-config(1) の @samp{core.pager} オプションも参照してください。

@item  @samp{GIT_PROGRESS_DELAY} 
オプションの進行状況インジケーターを表示する前に遅延する秒数を制御する数値。デフォルトは2です。

@item  @samp{GIT_EDITOR} 
この環境変数は、 @samp{$EDITOR} と @samp{$VISUAL}
をオーバーライドします。インタラクティブモードでエディタを起動するときに、いくつかのGitコマンドで使用されます。 git-var(1)
と git-config(1) の @samp{core.editor} オプションも参照してください。

@item  @samp{GIT_SEQUENCE_EDITOR} 
この環境変数は、インタラクティブリベース(interactive
rebase)のtodoリストを編集するときに、構成されたGitエディタをオーバーライドします。 git-rebase(1) と
git-config(1) の @samp{sequence.editor} オプションも参照してください。

@item  @samp{GIT_SSH} 
@itemx  @samp{GIT_SSH_COMMAND} 
これらの環境変数のいずれかが設定されている場合、 @emph{git fetch} と @emph{git push} は、リモートシステムに接続する必要があるときに、
@emph{ssh} の代わりに指定されたコマンドを使用します。設定されたコマンドに渡されるコマンドラインパラメータは、 ssh.variant
によって決定されます。詳細については、 git-config(1) の @samp{ssh.variant} オプションを参照してください。

@samp{$GIT_SSH_COMMAND} は @samp{$GIT_SSH}
よりも優先され、シェルによって解釈されます。これにより、追加の引数を含めることができます。 一方、 @samp{$GIT_SSH}
は、プログラムへのパスである必要があります(追加の引数が必要な場合は、ラッパーシェルスクリプトにすることができます)。

通常、個人の @samp{.ssh/config}
ファイルを使用して必要なオプションを設定する方が簡単です。詳細については、あなたのお手元のsshのドキュメントを参照してください。

@item  @samp{GIT_SSH_VARIANT} 
この環境変数が設定されている場合、 @samp{GIT_SSH} ・ ` GIT_SSH_COMMAND` ・ @samp{core.sshCommand} が
OpenSSH・plink・tortoiseplinkのいずれを参照しているかにかかわらず、Gitの自動検出をオーバーライドします。この変数は、同じ目的を果たす構成設定
@samp{ssh.variant} をオーバーライドします。

@item  @samp{GIT_ASKPASS} 
この環境変数が設定されている場合、パスワードまたはパスフレーズを取得する必要があるGitコマンド(HTTPまたはIMAP認証など)は、コマンドライン引数として適切なプロンプトを使用してこのプログラムを呼び出し、そのプログラムの標準出力からパスワードを読み取ります。
git-config(1)の @samp{core.askPass} オプションも参照してください。

@item  @samp{GIT_TERMINAL_PROMPT} 
この環境変数が @samp{0} に設定されている場合、gitは端末でプロンプトを表示しません(たとえば、HTTP認証を要求する場合)。

@item  @samp{GIT_CONFIG_GLOBAL} 
@itemx  @samp{GIT_CONFIG_SYSTEM} 
グローバルまたはシステムレベルの構成ファイルからではなく、指定されたファイルから構成を取得します。 @samp{GIT_CONFIG_SYSTEM}
が設定されている場合、ビルド時に定義されたシステム構成ファイル(通常は @samp{/etc/gitconfig})は読み取られません。同様に、
@samp{GIT_CONFIG_GLOBAL} が設定されている場合、 @samp{$HOME/.gitconfig} も
@samp{$XDG_CONFIG_HOME/git/config} も読み取られません。 @samp{/dev/null}
に設定すると、それぞれのレベルの構成ファイルの読み取りをスキップできます。

@item  @samp{GIT_CONFIG_NOSYSTEM} 
システム全体の @samp{$(prefix)/etc/gitconfig} ファイルからの設定の読み取りをスキップするかどうか。 この環境変数を @samp{$HOME}
や @samp{$XDG_CONFIG_HOME} と一緒に使用して、厄介なスクリプトの予測可能な環境を作成するか、または、バグのある
@samp{/etc/gitconfig} ファイルを使用しないように一時的に設定して、十分な権限を持つ誰かが修正するのを待つこともできます。

@item  @samp{GIT_FLUSH} 
この環境変数が @samp{1} に設定されている場合、
@emph{git blame} (インクリメンタルモード)、 @emph{git rev-list} 、 @emph{git log} 、
@emph{git check-attr} 、 @emph{git check-ignore} などのコマンドは、
各レコードがフラッシュされた後に出力ストリームを強制的にフラッシュします。
この変数が @samp{0} に設定されている場合、
これらのコマンドの出力は、完全にバッファリングされた入出力を使用して実行されます。
この環境変数が設定されていない場合、
Gitは、標準出力がファイルにリダイレクトされているように見えるかどうかに基づいて、
バッファリングするか、またはレコード指向のフラッシュを選択します。

@item  @samp{GIT_TRACE} 
一般的なトレースメッセージを有効にします。例えば、エイリアス拡張や、組み込みコマンド実行や、外部コマンド実行 においてです。

この変数が @samp{1} または @samp{2} または @samp{true}
に設定されている場合(比較では英大文字小文字は区別されません)、トレースメッセージがstderrに出力されます。

変数が2より大きく10より小さい整数値(訳注:つまり 2 < 変数 <
10)に設定されている場合、(厳密には、)Gitはこの値を、開いているファイルデスクリプターとして解釈し、トレースメッセージをこのファイルデスクリプターに書き込もうとします。

または、変数が絶対パス('/'文字で始まる)に設定されている場合、Gitはこれをファイルパスとして解釈し、トレースメッセージをそのファイルに追加しようとします。

変数の設定を解除(unset)するか、空(empty) または @samp{0} または @samp{false}
(英大文字小文字を区別しない)に設定すると、トレースメッセージが無効になります。

@item  @samp{GIT_TRACE_FSMONITOR} 
ファイルシステムモニター拡張機能(filesystem monitor
extension)のトレースメッセージを有効にします。使用可能なトレース出力オプションについては、 @samp{GIT_TRACE} を参照してください。

@item  @samp{GIT_TRACE_PACK_ACCESS} 
任意のパックへのすべてのアクセスに対してトレースメッセージを有効にします。アクセスごとに、パックファイル名とパック内のオフセットが記録されます。これは、パック関連のパフォーマンスの問題のトラブルシューティングに役立つ場合があります。使用可能なトレース出力オプションについては、
@samp{GIT_TRACE} を参照してください。

@item  @samp{GIT_TRACE_PACKET} 
特定のプログラムに出入りするすべてのパケットのトレースメッセージを有効にします。これは、オブジェクトネゴシエーションまたはその他のプロトコルの問題のデバッグに役立ちます。
"PACK" で始まるパケットではトレースがオフになります(ただし、以下の @samp{GIT_TRACE_PACKFILE}
を参照してください)。使用可能なトレース出力オプションについては、 @samp{GIT_TRACE} を参照してください。

@item  @samp{GIT_TRACE_PACKFILE} 
特定のプログラムによって送受信されたパックファイルのトレースを有効にします。他のトレース出力とは異なり、このトレースは垂れ流しです。ヘッダーやバイナリデータの引用はありません。あなたはこれを、ファイルを端末に表示したり、他のトレース出力と混合したりするのではなく、ほぼ確実に、ファイル(たとえば、
@samp{GIT_TRACE_PACKFILE=/tmp/my.pack} )に転送する必要があります。

注意: これは現在、クローンとフェッチのクライアント側にのみ実装されていることに注意してください。

@item  @samp{GIT_TRACE_PERFORMANCE} 
パフォーマンス関連のトレースメッセージを有効にします。例えば、各Gitコマンドの合計実行時間です。使用可能なトレース出力オプションについては、
@samp{GIT_TRACE} を参照してください。

@item  @samp{GIT_TRACE_REFS} 
refデータベースでの操作のトレースメッセージを有効にします。使用可能なトレース出力オプションについては、 @samp{GIT_TRACE} を参照してください。

@item  @samp{GIT_TRACE_SETUP} 
Gitがセットアップフェーズを完了した後、@samp{.git}
と作業ツリーと現在の作業ディレクトリを出力するトレースメッセージを有効にします。使用可能なトレース出力オプションについては、 @samp{GIT_TRACE}
を参照してください。

@item  @samp{GIT_TRACE_SHALLOW} 
浅い(shallow)リポジトリの フェッチ/クローン のデバッグに役立つトレースメッセージを有効にします。使用可能なトレース出力オプションについては、
@samp{GIT_TRACE} を参照してください。

@item  @samp{GIT_TRACE_CURL} 
gitトランスポートプロトコルのすべての着信および発信データ(descriptive
information;説明情報を含む)のcurlフルトレースダンプを有効にします。これは、コマンドラインで curl @samp{--trace-ascii}
を実行するのと似ています。使用可能なトレース出力オプションについては、 @samp{GIT_TRACE} を参照してください。

@item  @samp{GIT_TRACE_CURL_NO_DATA} 
curlトレースが有効になっている場合(上記の @samp{GIT_TRACE_CURL}
を参照)、データをダンプしないでください(つまり、情報行とヘッダー(info lines and headers)のみをダンプします)。

@item  @samp{GIT_TRACE2} 
「trace2」ライブラリからのより詳細なトレースメッセージを有効にします。 @samp{GIT_TRACE2}
からの出力は、人間が読みやすいように単純なテキストベースの形式です。

この変数が @samp{1} または @samp{2} または @samp{true}
に設定されている場合(比較では英大文字小文字は区別されません)、トレースメッセージがstderrに出力されます。

変数が2より大きく10より小さい整数値(訳注:つまり 2 < 変数 <
10)に設定されている場合、(厳密には、)Gitはこの値を、開いているファイルデスクリプターとして解釈し、トレースメッセージをこのファイルデスクリプターに書き込もうとします。

あるいは、変数が絶対パス(`/`文字で始まる)に設定されている場合、Gitはこれをファイルパスとして解釈し、トレースメッセージをそのファイルに追加しようとします。パスがすでに存在し、ディレクトリである場合、トレースメッセージは、SIDの最後のコンポーネントと(ファイル名の衝突を回避するための)オプションのカウンタに従って名前が付けられた、そのディレクトリ内のファイル(プロセスごとに1つ)に書き込まれます。

加えて、変数が @samp{af_unix:[<socket_type>:]<absolute-pathname>}
に設定されている場合、GitはパスをUnixドメインソケットとして開こうとします。ソケットタイプは、 @samp{stream} または @samp{dgram}
のいずれかです。

変数の設定を解除(unset)するか、空(empty) または @samp{0} または @samp{false}
(英大文字小文字を区別しない)に設定すると、トレースメッセージが無効になります。

完全な詳細については @uref{technical/api-trace2.html,Trace2 documentation} を参照してください。

@item  @samp{GIT_TRACE2_EVENT} 
この設定は、ソフトウェア処理(machine
interpretation)に適したJSONベースの形式で書き込みます。利用可能なトレース出力オプションについては @samp{GIT_TRACE2}
を、詳細については @uref{technical/api-trace2.html,Trace2 documentation} を参照してください。

@item  @samp{GIT_TRACE2_PERF} 
@samp{GIT_TRACE2} で利用可能なテキストベースのメッセージに加えて、この設定はネスト領域(nesting
regions)を理解するための列ベース(column-based)のフォーマットを書き込みます。利用可能なトレース出力オプションについては
@samp{GIT_TRACE2} を、完全な詳細については @uref{technical/api-trace2.html,Trace2  documentation} を参照してください。

@item  @samp{GIT_TRACE_REDACT} 
デフォルトでは、トレースがアクティブ化されると、Gitはクッキーと「Authorization:」ヘッダーと「Proxy-Authorization:」ヘッダーの値を編集します。この編集を防ぐには、この変数を
@samp{0} に設定します。

@item  @samp{GIT_LITERAL_PATHSPECS} 
この変数を @samp{1} に設定すると、Gitはすべてのパススペックをグロブパターンとしてではなく文字通りに処理します。たとえば、
@samp{GIT_LITERAL_PATHSPECS=1 git log -- '*.c'} を実行すると、グロブ @samp{*.c} が一致するパスではなく、パス
@samp{*.c} に接触するコミットが検索されます。リテラルパスをGitにフィードする場合(たとえば、以前に @samp{git ls-tree} や @samp{--raw}
diff output などによって与えられたパス)にこれが必要になる場合があります。

@item  @samp{GIT_GLOB_PATHSPECS} 
この変数を @samp{1} に設定すると、Gitはすべてのパススペックをグロブパターン(別名 グロブマジック(glob magic))として扱います。

@item  @samp{GIT_NOGLOB_PATHSPECS} 
この変数を @samp{1} に設定すると、Gitはすべてのパススペックをリテラル(別名 リテラルマジック(literal magic))として扱います。

@item  @samp{GIT_ICASE_PATHSPECS} 
この変数を @samp{1} に設定すると、Gitはすべてのパススペックの英大文字小文字を区別しないものとして扱います。

@item  @samp{GIT_REFLOG_ACTION} 
refが更新されると、reflogエントリが作成され、refの新旧の値に加えて、refが更新された理由(通常はrefを更新した高レベルコマンドの名前)を追跡します。スクリプト化された磁器コマンドは、
@samp{git-sh-setup}
のset_reflog_actionヘルパー関数を使用して、エンドユーザーがトップレベルコマンドとして呼び出したときにその名前をこの変数に設定して、reflogの本文(body)に記録できます。

@item  @samp{GIT_REF_PARANOIA} 
@samp{1}
に設定されている場合、refのリストを反復処理するときに、壊れた、または名前の悪いrefを含めます。通常の破損していないリポジトリでは、これは何もしません。ただし、これを有効にすると、refが壊れている場合にgitが一部の操作を検出して中止するのに役立つ場合があります。
Gitは、 git-prune(1)
のような破壊的な操作を実行するときに、この変数を自動的に設定します。あなたが、操作がすべてのrefに影響を与えていることを確認したい場合(たとえば、バックアップを作成するためにリポジトリのクローンを作成しているため)を除いて、あなた自身で設定する必要はありません。

@item  @samp{GIT_ALLOW_PROTOCOL} 
コロン(@samp{:})で区切られたプロトコルのリストが設定されている場合、 @samp{protocol.allow} が @samp{never}
に設定され、リストされた各プロトコルでは、 @samp{protocol.<name>.allow} が @samp{always}
に設定されているかのように振る舞います(既存の構成をオーバーライドします)。言い換えると、言及されていないプロトコルは許可されません(つまり、これはホワイトリストであり、ブラックリストではありません)。詳細については、
git-config(1) の @samp{protocol.allow} の説明を参照してください。

@item  @samp{GIT_PROTOCOL_FROM_USER} 
@samp{user} 状態に構成されている fetch/push/clone によって使用されるプロトコルを妨げるには、 @samp{0}
に設定します。これは、信頼できないリポジトリからの再帰的なサブモジュールの初期化を制限したり、信頼できない可能性のあるURLをgitコマンドにフィードするプログラムに役立ちます。詳細については、
git-config(1) を参照してください。

@item  @samp{GIT_PROTOCOL} 
内部使用のみ。ワイヤープロトコルのハンドシェイクで使用されます。オプションで値 @emph{key[=value]} を持つ、
コロン(@emph{:})で区切られたリストを含んでいます。不明なキーと値は無視する必要があります。

注意:この変数が一部のトランスポートを通過できるようにサーバーを構成する必要がある場合があることに注意してください。ローカルリポジトリ(つまり、
@samp{file://} またはファイルシステムパス)にアクセスするとき、および @samp{git://} プロトコルを介して自動的に伝播されます。
git-over-http の場合、ほとんどの構成で自動的に機能するはずですが、 git-http-backend(1)
の説明を参照してください。 git-over-ssh
の場合、クライアントがこの変数を渡すことができるようにsshサーバーを構成する必要がある場合があります(たとえば、OpenSSHで @samp{AcceptEnv
GIT_PROTOCOL} を使用することにより)。

この構成はオプションです。変数が伝播されない場合、クライアントは元の "v0"
プロトコルにフォールバックします(ただし、パフォーマンスの向上や機能の一部を見逃す可能性があります)。この変数は現在、cloneとfetchにのみ影響します。pushにはまだ使用されていません(ただし、将来的に使用される可能性があります)。

@item  @samp{GIT_OPTIONAL_LOCKS} 
@samp{0} に設定すると、Gitは、ロックを取得する必要のあるオプションのサブ操作を実行せずに、要求された操作を完了します。たとえば、これにより、@samp{git
status}
が副作用としてインデックスを更新するのを防ぐことができます。これは、リポジトリ上の他の操作とのロック競合を引き起こしたくない、バックグラウンドで実行されているプロセスに役立ちます。デフォルトは
@samp{1} です。

@item  @samp{GIT_REDIRECT_STDIN} 
@itemx  @samp{GIT_REDIRECT_STDOUT} 
@itemx  @samp{GIT_REDIRECT_STDERR} 
Windowsのみ: 標準の入力/出力/エラーハンドルを環境変数で指定されたパスにリダイレクトできるようにします。これは、
@samp{CreateProcess()}
を介して標準ハンドルを渡す標準的な方法がオプションではないマルチスレッドアプリケーションで特に役立ちます。これは、ハンドルを継承可能としてマークする必要があるためです(したがって、生成された「すべて」のプロセスがそれらを継承し、通常のGit操作をブロックする可能性があります)。主な使用目的は、通信に名前付きパイプを使用することです(例:
@samp{\\.\pipe\my-git-stdin-123})。

2つの特別な値がサポートされています。@samp{off} は対応する標準ハンドルを閉じるだけです。そして、 @samp{GIT_REDIRECT_STDERR} が
@samp{2>&1} の場合、標準エラーは標準出力と同じハンドルにリダイレクトされます。

@item  @samp{GIT_PRINT_SHA1_ELLIPSIS} (deprecated) 
(非推奨): @samp{yes} に設定されている場合、(省略形の)SHA-1値の後に省略記号を出力します。これは、切り離されたHEAD(detached
HEAD)の表示(git-checkout(1))と生のdiff出力(git-diff(1))に影響します。上記の場合に省略記号を印刷することはもはや適切であるとは見なされておらず、そのサポートは(この変数と一緒に)近い将来削除される可能性があります。
@end table

@noindent

@chapheading Discussion

以下の詳細については、 @uref{user-manual.html#git-concepts,Git concepts chapter of the user-manual} および gitcore-tutorial(7) から入手できます。

Gitプロジェクトは通常、最上位に @samp{.git} サブディレクトリがある作業ディレクトリで構成されます。 @samp{.git}
ディレクトリには、プロジェクトの完全な履歴を表す圧縮オブジェクトデータベース、その履歴を作業ツリーの現在のコンテンツにリンクする「インデックス」ファイル、タグやブランチヘッドなど、その履歴への名前付きポインタが含まれています。

オブジェクトデータベースには、主に3つのタイプのオブジェクトが含まれています。ファイルデータを保持するブロブ(blob)。ディレクトリ階層を構築するためのブロブやその他のツリーを指すツリー(tree)。そしてコミット(commit)は、それぞれが単一のツリーといくつかの親コミットを参照します。

コミットは、他のシステムが「チェンジセット」または「バージョン」と呼ぶものと同等であり、プロジェクトの履歴のステップを表し、各親は直前のステップを表します。複数の親とのコミットは、それぞれ独立していた開発ラインの統合(マージ;merge)を表します。

すべてのオブジェクトは、その内容のSHA-1ハッシュによって名前が付けられ、通常は40桁の16進数の文字列として記述されます。このような名前はグローバルに一意です。コミットに至るまでの履歴全体は、そのコミットだけに署名することで保証できます。この目的のために、4番目のオブジェクトタイプであるタグ(tag)が提供されます。

最初に作成されたとき、オブジェクトは個々のファイルに保存されますが、効率を上げるために、後で「パックファイル」にまとめて圧縮される場合があります。

ref(refs)と呼ばれる名前付きポインターは、履歴の中で興味深い点を指し示しています。refには、オブジェクトのSHA-1名または別のrefの名前を含めることができます。名前が
@samp{ref/head/}
で始まるrefには、開発中のブランチの最新のコミット(または「head」)のSHA-1名が含まれます。対象のタグのSHA-1名は、
@samp{ref/tags/} の下に保存されます。 @samp{HEAD} という名前の特別な参照には、現在チェックアウトされているブランチの名前が含まれています。

インデックスファイルは、すべてのパスのリストと、パスごとのブロブオブジェクトと属性のセットで初期化されます。ブロブオブジェクトは、現在のブランチの先端にあるファイルの内容を表します。属性(最終変更時刻、サイズなど)は、作業ツリー内の対応するファイルから取得されます。作業ツリーへのその後の変更は、これらの属性を比較することで見つけることができます。インデックスは新しいコンテンツで更新される可能性があり、新しいコミットはインデックスに保存されているコンテンツから作成される可能性があります。

インデックスは、特定のパス名の複数のエントリ(「ステージ」と呼ばれる)を格納することもできます。これらのステージは、マージの進行中に、マージされていないさまざまなバージョンのファイルを保持するために使用されます。

@noindent

@chapheading FURTHER DOCUMENTATION

Gitの使用を開始するには、「description」セクションのリファレンスを参照してください。
以下は、初めてのユーザーにとっては、おそらく必要以上に詳細です。

@uref{user-manual.html#git-concepts,Git concepts chapter of the user-manual}
と gitcore-tutorial(7) はどちらも、基盤となるGitアーキテクチャの概要を示しています。

おすすめの作業手順の概要については gitworkflows(7) を参照してください。

いくつかの便利な実例について @uref{howto-index.html,howto} 文書もご覧下さい。

Git内部については @uref{technical/api-index.html,Git API documentation} に記載されています。

CVSから移行するユーザーには gitcvs-migration(7) も読んで欲しいです。

@noindent

@chapheading Authors

GitはLinus Torvalds(リーナス トーバルズ)によって開始され、現在はJunio C Hamano(濱野
純)によって保守されています。Gitメーリングリスト <@uref{mailto:git@@vger.kernel.org,git@@vger.kernel.org}> から多くの貢献がありました。
@uref{http://www.openhub.net/p/git/contributors/summary,http://www.openhub.net/p/git/contributors/summary} は、貢献者のより完全なリストを提供します。

あなたが git.git 自体のクローンを持っている場合、 git-shortlog(1) と git-blame(1)
の出力は、プロジェクトの特定の部分の作者を表示することができます。

@noindent

@chapheading Reporting Bugs

開発とメンテナンスが主に行われるGitメーリングリスト <@uref{mailto:git@@vger.kernel.org,git@@vger.kernel.org}>
にバグを報告してください。そこにメッセージを送信するためにリストに登録する必要はありません。以前のバグレポートやその他の議論については、
@uref{https://lore.kernel.org/git,https://lore.kernel.org/git} メーリングリストアーカイブを参照してください。

セキュリティに関連する問題は、Gitセキュリティメーリングリスト <@uref{mailto:git-security@@googlegroups.com,git-security@@googlegroups.com}>
に非公開で投稿する必要があります。

@noindent

@chapheading SEE ALSO

gittutorial(7), gittutorial-2(7), giteveryday(7),
gitcvs-migration(7), gitglossary(7),
gitcore-tutorial(7), gitcli(7), @uref{user-manual.html,The Git User’s Manual}, gitworkflows(7)

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitattributes,,,Top
@chapheading Name

gitattributes — パスごとの属性の定義

@noindent

@chapheading Synopsis

$GIT_DIR/info/attributes, .gitattributes

@noindent

@chapheading DESCRIPTION

@samp{gitattributes} ファイルは、パス名に属性(attributes)を与える単純なテキストファイルです。

@samp{gitattributes} ファイルの各行は以下の形式です:

@example
pattern attr1 attr2 ...
@end example

つまり、パターンの後に空白(whitespaces)で区切られた属性リストが続きます。先頭と末尾の空白は無視されます。 @emph{#}
で始まる行は無視されます。
二重引用符(@samp{"})で始まるパターンは、Cスタイルでクォートされます。パターンが問題のパスと一致すると、その行にリストされている属性がそのパスに与えられます。

各属性は、特定のパスに対して以下のいずれかの状態になる可能性があります:

@table @asis

@item  set(設定) 
パスには、特別な値 @samp{true} を持つ属性があります。これは、属性リストにその属性の名前のみをリストすることによって指定されます。

@item  unset(設定解除) 
パスには、特別な値 @samp{false} を持つ属性があります。 これは、属性リストにダッシュ @samp{-}
で始まる属性の名前をリストすることによって指定されます。

@item  Set to a value(値を設定) 
パスには、指定の文字列値を持つ属性があります。これは、属性の名前の後に等号 @samp{=} とその値を、属性リストにリストすることによって指定されます。

@item  unspecified(未指定) 
パスに一致するパターンはなく、パスに属性があるかどうかはわかりません。パスの属性は未指定(unspecified)であると言われます。
@end table

複数のパターンがパスに一致する場合、後の行が前の行をオーバーライドします。このオーバーライドは属性ごとに行われます。

パターンがパスと一致するルールは、以下のいくつかの例外を除いて、 @samp{.gitignore} ファイル(gitignore(5)
参照)と同じです:

@itemize 

@item
否定パターンは使えません

@item
ディレクトリに一致するパターンは、そのディレクトリ内のパスに再帰的に一致しません(したがって、属性ファイルで末尾のスラッシュの @samp{path/}
構文を使用しても意味がありません。代わりに @samp{path/**} を使用してください)
@end itemize

パスに割り当てる属性を決定するとき、Gitは、(優先順位が最も高い) @samp{$GIT_DIR/info/attributes}
ファイルと、問題のパスと同じディレクトリにある @samp{.gitattributes}
ファイルと、作業ツリーの最上位までその親ディレクトリを参照します(@samp{.gitattributes}
を含むディレクトリが問題のパスから離れるほど、優先順位は低くなります)。最後に、(優先順位が最も低い)グローバルファイルとシステム全体のファイルが考慮されます。

@samp{.gitattributes}
ファイルが作業ツリーにない場合、インデックス内のパスがフォールバックとして使用されます。チェックアウト処理では、インデックスの
@samp{.gitattributes} が使用され、作業ツリーのファイルがフォールバックとして使用されます。

単一のリポジトリのみに影響を与えたい(つまり、そのリポジトリの1人のユーザーのワークフローに固有のファイルに属性を割り当てる)場合は、属性を
@samp{$GIT_DIR/info/attributes}
ファイルに配置する必要があります。バージョン管理して他のリポジトリに配布する必要がある属性(つまり、すべてのユーザーが関心を持つ属性)は、
@samp{.gitattributes} ファイルに入れる必要があります(git-config(1) を参照)。
あるユーザーのすべてのリポジトリに影響を与える属性は、 @samp{core.attributesFile}
構成オプションで指定されたファイルに配置する必要があり、そのデフォルト値は $XDG_CONFIG_HOME/git/attributes です。
$XDG_CONFIG_HOME が設定されていないか空の場合、代わりに $HOME/.config/git/attributes
が使用されます。システム上のすべてのユーザーの属性は、 @samp{$(prefix)/etc/gitattributes} ファイルに配置する必要があります。

しばしばあなたは、 Unspecified(未指定)状態へのパスの属性の設定をオーバーライドする必要があります。これは、感嘆符 @samp{!}
が前に付いた属性の名前をリストすることで行えます。

@noindent

@chapheading EFFECTS

Gitによる特定の操作は、特定の属性をパスに割り当てることによって影響を受ける可能性があります。
現在、以下の操作は属性対応(attributes-aware)です。

@noindent

@heading Checking-out and checking-in

これらの属性は、 @samp{git switch} や @samp{git checkout} や @samp{git merge}
などのコマンドが実行されたときに、リポジトリに保存されているコンテンツが作業ツリーファイルにコピーされる方法に影響します。 また、Gitが @samp{git
add} や @samp{git commit} する時に準備したコンテンツをリポジトリの作業ツリーに保存する方法にも影響します。

@noindent

@subheading text

この属性は、行末の正規化を有効にして制御します。テキストファイルが正規化されると、その行末はリポジトリ内でLFに変換されます。作業ディレクトリ内で使用される行末スタイルを制御するには、単一のファイルには
@samp{eol} 属性を使用し、すべてのテキストファイルには @samp{core.eol} 構成変数を使用します。 @samp{core.autocrlf} を @samp{true}
または @samp{input} に設定すると、 @samp{core.eol} がオーバーライドされることに注意してください(git-config(1)
のこれらのオプションの定義を参照してください)。

@table @asis

@item  set(設定) 
パスに @samp{text}
属性を設定すると、行末の正規化が有効になり、パスがテキストファイルとしてマークされます。行末変換は、コンテンツタイプを推測せずに行われます。

@item  unset(設定解除) 
パスの @samp{text} 属性を設定解除(unset)すると、チェックインまたはチェックアウト時に行末変換を試行しないようにGitに指示します。

@item  Set to string value "auto" 
@samp{text} の値が "auto"
に設定されている場合、パスは自動行末変換用にマークされます。Gitがコンテンツがテキストであると判断した場合、その行末はチェックイン時にLFに変換されます。ファイルがCRLFでコミットされている場合、変換は行われません。

@item  unspecified(未指定) 
@samp{text} 属性が指定されていない場合、Gitは @samp{core.autocrlf} 構成変数を使用してファイルを変換する必要があるかどうかを判断します。
@end table

その他の値の場合、Gitは @samp{text} が未指定(unspecified)であるかのように動作します。

@noindent

@subheading eol

この属性は、作業ディレクトリ内で使用される特定の行末スタイルを設定します。コンテンツチェックなしで行末変換を可能にし、@samp{text}
属性を効果的に設定します。インデックスにあるCRLF行末のパスにこの属性を設定すると、パスがダーティと見なされる可能性があることに注意してください。インデックスにパスを再度追加すると、インデックスの行末が正規化されます。

@table @asis

@item  文字列値 "crlf" を設定 
この設定により、Gitはチェックイン時にこのファイルの行末を正規化し、ファイルがチェックアウトされるときにCRLFに変換します。

@item  文字列値 "lf" を設定 
この設定により、Gitはチェックイン時に行末をLFに正規化し、ファイルがチェックアウトされたときにCRLFに変換されないようにします。
@end table

@noindent

@subheading crlf 属性との下位互換性

下位互換性のために、 @samp{crlf} 属性は以下のように解釈されます:

@example
crlf            text
-crlf           -text
crlf=input      eol=lf
@end example


@noindent

@subheading 行末変換

Gitは通常、ファイルの内容をそのままにしますが、リポジトリ内で行末をLFに正規化し、オプションで、ファイルがチェックアウトされたときにCRLFに変換するように構成できます。

あなたが作業しているリポジトリに関係なく、あなたの作業ディレクトリ内でCRLF行末を設定したいだけの場合は、属性を使用せずに構成変数
@samp{core.autocrlf} を設定できます。

@example
[core]
        autocrlf = true
@end example


これにより、テキストファイルの正規化は強制されませんが、リポジトリに導入するテキストファイルの行末は、追加時にLFに正規化され、リポジトリですでに正規化されているファイルは正規化されたままになります。

貢献者(contributor)がリポジトリに導入するテキストファイルの行末が正規化されていることを確認する場合は、「全て」のファイルに対して
@samp{text} 属性を "auto" に設定できます。

@example
*       text=auto
@end example


属性を使用すると、行末の変換方法をきめ細かく制御できます。以下は、Gitが @samp{.txt} と、@samp{.vcproj} と @samp{.sh} ファイルを正規化し、
@samp{.vcproj} ファイルがCRLFを持ち、 @samp{.sh} ファイルが作業ディレクトリでLFを持っていることを確認し、@samp{.jpg}
ファイルがその内容に関係なく正規化されないようにする例です。

@example
*               text=auto
*.txt           text
*.vcproj        text eol=crlf
*.sh            text eol=lf
*.jpg           -text
@end example


@quotation

@strong{Note}

中央リポジトリへのプッシュとプルを使用してクロスプラットフォームプロジェクトで @samp{text = auto}
変換が有効になっている場合、CRLFを含むテキストファイルを正規化する必要があります。
@end quotation

クリーンな作業ディレクトリから始めます:

@example
$ echo "* text=auto" >.gitattributes
$ git add --renormalize .
$ git status        # 正規化されるファイルを表示
$ git commit -m "Introduce end-of-line normalization"
@end example


正規化してはならないファイルが @samp{git status} に表示される場合は、 @samp{git add -u} を実行する前に、以下のように @samp{text}
属性の設定を解除してください。

@example
manual.pdf      -text
@end example


逆に、Gitが検出しないテキストファイルは、以下のように正規化を手動で有効にすることができます。

@example
weirdchars.txt  text
@end example


@samp{core.safecrlf} が "true" または "warn" に設定されている場合、Gitは変換が @samp{core.autocrlf}
の現在の設定に対して可逆的であるかどうかを確認します。 "true" の場合、Gitは不可逆的な変換を拒否します。 "warn"
の場合、Gitは警告を出力するだけで、元に戻せない変換を受け入れます。作業ツリー内のファイルに対してこのような変換が行われるのを防ぐための安全トリガーがありますが、いくつかの例外がありますが、しかし…

@itemize 

@item
@emph{git add} 自体は作業ツリー内のファイルに影響を与えません。その次に行うチェックアウトは影響を与えるため、セーフティーがトリガーされます:

@item
パッチでテキストファイルを更新するための @samp{git apply}
は作業ツリー内のファイルに影響を与えますが、操作はテキストファイルに関するものであり、CRLF変換は行末の不整合の修正に関するものであるため、セーフティーはトリガーされません。

@item
@samp{git diff} 自体は作業ツリー内のファイルに影響を与えません。多くの場合、次に @samp{git add}
する予定の変更を検査するために実行されます。潜在的な問題を早期に発見するために、セーフティーがトリガーされます。
@end itemize

@noindent

@subheading working-tree-encoding

Gitは、ASCIIまたはそのスーパーセットの1つ(UTF-8、ISO-8859-1など)でエンコードされたファイルをテキストファイルとして認識します。他の特定のエンコーディング(UTF-16など)でエンコードされたファイルはバイナリとして解釈されるため、組み込みのGitテキスト処理ツール(@samp{git
diff} など)や、ほとんどのGitWebフロントエンドはデフォルトでこれらのファイルのコンテンツを視覚化しません 。

このような場合、 @samp{working-tree-encoding}
属性を使用して作業ディレクトリ内のファイルのエンコーディングをGitに指示できます。この属性を持つファイルがGitに追加されると、Gitは指定されたエンコーディングからUTF-8にコンテンツを再エンコードします。最後に、GitはUTF-8でエンコードされたコンテンツを内部データ構造(「インデックス」と呼ばれます)に格納します。チェックアウト時に、コンテンツは指定されたエンコーディングに再エンコードされます。

注意: @samp{working-tree-encoding} 属性を使用すると、いくつかの落とし穴があることに注意してください:

@itemize 

@item
(2018年3月現在、)代替のGit実装(JGitやlibgit2など)やGit古いバージョンは、 @samp{working-tree-encoding}
属性をサポートしていません。リポジトリで @samp{working-tree-encoding}
属性を使用する場合は、リポジトリを使用するすべてのクライアントがそれをサポートしていることを確認することを強くお勧めします。

たとえば、Microsoft Visual Studio
リソースファイル(@samp{*.rc})またはPowerShellスクリプトファイル(@samp{*.ps1})は、UTF-16でエンコードされる場合があります。
@samp{*.ps1} をUTF-16のファイルとして宣言し、 @samp{working-tree-encoding} が有効なGitクライアントで @samp{foo.ps1}
を追加すると、 @samp{foo.ps1} はUTF-8として内部に保存されます。 @samp{working-tree-encoding}
をサポートしていないクライアントは、 @samp{foo.ps1}
をUTF-8でエンコードされたファイルとしてチェックアウトします。これは通常、このファイルのユーザーに問題を引き起こします。

@samp{working-tree-encoding} 属性をサポートしないGitクライアントが新しいファイル @samp{bar.ps1} を追加した場合、
@samp{bar.ps1`は内部に「現状のまま」(この例ではおそらくUTF-16として)保存されます。そしてそれに対して、
`working-tree-encoding}
をサポートするクライアントは、内部コンテンツをUTF-8として解釈し、チェックアウト時にUTF-16に変換しようとします。その操作は失敗し、エラーが発生します。

@item
コンテンツを非UTFエンコーディングに再エンコードすると、変換がUTF-8ラウンドトリップセーフではない可能性があるため、エラーが発生する可能性があります。
エンコーディングがラウンドトリップセーフではないと思われる場合は、それを @samp{core.checkRoundtripEncoding}
に追加して、Gitにラウンドトリップエンコーディングをチェックさせます(git-config(1) を参照)。
SHIFT-JIS(日本語文字セット)はUTF-8でラウンドトリップ問題があることが知られており、デフォルトでチェックされています。

@item
コンテンツを再エンコードするには、計算機資源が必要なため、特定のGit操作(@samp{git checkout} や @samp{git add}
など)の速度を低下させる可能性があります。
@end itemize

@samp{working-tree-encoding}
属性は、ファイルをUTF-8エンコーディングで保存できない場合や、Gitでコンテンツをテキストとして処理できるようにする場合にのみ使用してください。

例として、 あなたの @emph{*.ps1}
ファイルがバイトオーダーマーク(BOM)付きでUTF-16エンコードされており、Gitであなたのプラットフォームに基づいて自動行末変換を実行する場合、以下の属性を使用します。

@example
*.ps1           text working-tree-encoding=UTF-16
@end example


あなたの @emph{* .ps1}
ファイルがBOMなしでUTF-16リトルエンディアンでエンコードされており、Gitで作業ディレクトリのWindows行末を使用する場合は、以下の属性を使用します(BOMを使用したUTF-16リトルエンディアンが必要な場合、
@samp{UTF-16LE} の代わりに @samp{UTF-16LE-BOM} を使用します)。あいまいさを避けるために @samp{working-tree-encoding}
属性を使用する場合は、行末を @samp{eol} で明示的に定義することを強くお勧めします。

@example
*.ps1           text working-tree-encoding=UTF-16LE eol=CRLF
@end example


あなたは以下のコマンドを使用して、あなたのプラットフォームで使用可能なすべてのエンコーディングのリストを取得できます:

@example
iconv --list
@end example


ファイルのエンコーディングがわからない場合、あなたは @samp{file} コマンドを使用してエンコーディングを推測できます:

@example
file foo.ps1
@end example


@noindent

@subheading ident

パスに属性 @samp{ident} が設定されている場合、Gitはチェックアウト時にブロブオブジェクト内の @samp{$Id$} を @samp{$Id:}
に置き換え、その後に40文字の16進ブロブオブジェクト名が続き、その後にドル記号 @samp{$} が続きます。ワークツリーファイルで @samp{$Id:} で始まり、
@samp{$} で終わるバイトシーケンスは、チェックイン時に @samp{$Id$} に置き換えられます。

@noindent

@subheading filter

filter` 属性には、構成で指定されたフィルタドライバの名前を文字列で指定することができます。

フィルタドライバは、 @samp{clean} コマンドと @samp{smudge}
コマンドで構成されており、どちらも指定しないでおくことができます。チェックアウト時に、 @samp{smudge}
コマンドが指定されると、コマンドはその標準入力からブロブオブジェクトを供給され、その標準出力はワークツリーファイルを更新するために使用されます。同様に、
@samp{clean}
コマンドはチェックイン時にワークツリーファイルの内容を変換するために使用されます。デフォルトでは、これらのコマンドは単一のブロブのみを処理して終了します。長時間実行される
@samp{process} フィルターが @samp{clean} および/または @samp{smudge}
フィルターの代わりに使用される場合、Gitは単一のGitコマンドの存続期間中、単一のフィルターコマンド呼び出しですべてのブロブを処理できます。例えば
@samp{git --all} を追加します。長時間実行される @samp{process}
フィルターが構成されている場合、構成された単一のブロブフィルターよりも常に優先されます。 @samp{process}
フィルターとの通信に使用されるプロトコルの説明については、以下のセクションを参照してください。

コンテンツフィルタリングの用途の1つは、プラットフォームやファイルシステムやユーザーが使用しやすい形にコンテンツをもみもみ(massage)することです。この操作モードでは、ここでのキーワードは「より便利」であり、「使用できないものを使用可能にする」ではありません。
つまり、誰かがフィルタードライバーの定義を設定解除した場合、または適切なフィルタープログラムを持っていない場合でも、プロジェクトは引き続き使用可能である必要があります。

コンテンツフィルタリングのもう1つの用途は、リポジトリに直接使用できないコンテンツ(Gitの外部に保存されている実際のコンテンツを参照するUUIDや暗号化されたコンテンツなど)を保存し、チェックアウト時に使用可能な形式に変換することです(例:
外部コンテンツをダウンロードする、または暗号化されたコンテンツを復号化する)。

これらの2つのフィルターの振る舞い異なり、デフォルトでは、フィルターは前者と見なされ、コンテンツをより便利な形にもみもみ(massage)します。構成にフィルタードライバー定義がないか、ゼロ以外のステータスで終了するフィルタードライバーはエラーではありませんが、フィルターを無操作パススルーにします。

filter.<driver>.required 構成変数を @samp{true}
に設定することにより、フィルター自体が使用できないコンテンツを使用可能なコンテンツに変換することを宣言できます。

注意: clean フィルターを変更するたびに、リポジトリを再正規化する必要があります: $ git add --renormalize

たとえば、 @samp{.gitattributes} で、あなたはパスに @samp{filter} 属性を割り当てるとします。

@example
*.c     filter=indent
@end example


次に、あなたは以下のように @samp{.git/config} で @samp{filter.indent.clean} と @samp{filter.indent.smudge}
構成を定義して、ソースファイルがチェックインされたとき(@samp{clean} が実行されます)と、チェックアウトされたとき(コマンドが @samp{cat}
であるため、変更は行われません)、にCプログラムの内容を変更するコマンドのペアを指定します。

@example
[filter "indent"]
        clean = indent
        smudge = cat
@end example


最良の結果を得るには、 @samp{clean} を2回実行しても出力を変更しないでください("clean→clean" は "clean"
と同等である必要があります)。また、複数の @samp{smudge} コマンドで @samp{clean}
の出力を変更しないでください("smudge→smudge→clean" は "clean” と同等である必要があります)。
以下のmergingセクションを参照してください。

"indent"
フィルターは、この点で適切に動作します。すでに正しくインデントされている入力は変更されません。この場合、smudgeフィルターがないということは、cleanフィルターが自身の出力を変更せずに受け入れる必要があることを意味します。

保存されたコンテンツを使用可能にするためにフィルターが成功する必要がある場合は、構成でフィルターが @samp{required}
(必須)であることを宣言できます:

@example
[filter "crypt"]
        clean = openssl enc ...
        smudge = openssl enc -d ...
        required
@end example


フィルタコマンドラインのシーケンス @samp{%f}
は、フィルタが機能しているファイルの名前に置き換えられます。フィルタはこれをキーワード置換で使用する場合があります。例えば:

@example
[filter "p4"]
        clean = git-p4-filter --clean %f
        smudge = git-p4-filter --smudge %f
@end example


注意: @samp{%f}
は、作業中のパスの名前であることに注意してください。フィルタリングされているバージョンによっては、ディスク上の対応するファイルが存在しないか、内容が異なる場合があります。したがって、smudgeおよびcleanコマンドは、ディスク上のファイルにアクセスしようとするのではなく、標準入力で提供されるコンテンツのフィルターとしてのみ機能する必要があります。

@noindent

@subheading Long Running Filter Process

フィルタコマンド(文字列値)が @samp{filter.<driver>.process}
を介して定義されている場合、Gitは単一のGitコマンドの存続期間中、単一のフィルタ呼び出しですべてのブロブを処理できます。
これは、長時間実行プロセスプロトコル( technical/long-running-process-protocol.txt
にて説明)を使用して実現されます。

Gitは、クリーニング(cleaned)またはスマッジング(smudged)が必要な最初のファイルを検出すると、フィルターを開始してハンドシェイクを実行します。ハンドシェイクでは、Gitによって送信されるウェルカムメッセージは
"git-filter-client" であり、プロトコルバージョン2("version=2")のみがサポートされ、サポートされる機能は "clean"
と "smudge" と ”delay" です。

その後、Gitはフラッシュパケットで終了する "key=value"
ペアのリストを送信します。リストには、少なくとも(サポートされている機能に基づく)フィルターコマンドと、リポジトリルートを基準にしてフィルタリングするファイルのパス名が含まれます。フラッシュパケットの直後に、Gitはコンテンツを0個以上のpkt-lineパケットに分割して送信し、フラッシュパケットを送信してコンテンツを終了します。フィルタは、コンテンツと最終的なフラッシュパケットを受信する前に、応答を送信してはならないことに注意してください。
また、 "key=value" ペアの「value」には「=」文字を含めることができますが、キーには含めることはできません。

@example
packet:          git> command=smudge
packet:          git> pathname=path/testfile.dat
packet:          git> 0000
packet:          git> CONTENT
packet:          git> 0000
@end example


フィルタは、フラッシュパケットで終了する "key=value" ペアのリストで応答することが期待されます。フィルタで問題が発生しない場合は、リストに
"success"
ステータスが含まれている必要があります。これらのパケットの直後に、フィルターはコンテンツを0個以上のpkt-lineパケットで送信し、最後にフラッシュパケットを送信することが期待されます。最後に、フラッシュパケットで終了する
"key=value"
ペアの2番目のリストが必要です。フィルタは、2番目のリストのステータスを変更したり、空のリストでステータスをそのまま維持したりできます。空のリストは、フラッシュパケットで終了する必要があることに注意してください。

@example
packet:          git< status=success
packet:          git< 0000
packet:          git< SMUDGED_CONTENT
packet:          git< 0000
packet:          git< 0000  # empty list, keep "status=success" unchanged!
@end example


結果のコンテンツが空の場合、フィルターは "success" ステータスとフラッシュパケットで応答して、空のコンテンツを通知することが期待されます。

@example
packet:          git< status=success
packet:          git< 0000
packet:          git< 0000  # empty content!
packet:          git< 0000  # empty list, keep "status=success" unchanged!
@end example


フィルタがコンテンツを処理できない、または処理したくない場合は、 "error" ステータスで応答することが期待されます。

@example
packet:          git< status=error
packet:          git< 0000
@end example


フィルタの処理中にエラーが発生した場合、コンテンツが(部分的または完全に)送信された後、ステータス "error" を送信できます。

@example
packet:          git< status=success
packet:          git< 0000
packet:          git< HALF_WRITTEN_ERRONEOUS_CONTENT
packet:          git< 0000
packet:          git< status=error
packet:          git< 0000
@end example


フィルタがGitプロセスの存続期間中、コンテンツと将来のコンテンツを処理できない、または処理したくない場合は、プロトコルの任意の時点で "abort"
ステータスで応答することが期待されます。

@example
packet:          git< status=abort
packet:          git< 0000
@end example


"error"/"abort" ステータスが設定されている場合、Gitはフィルタープロセスを停止も再開もしません。 ただし、Gitは
@samp{filter.<driver>.required`フラグに従って終了コードを設定し、 `filter.<driver>.clean} /
@samp{filter.<driver>.smudge} メカニズムの振る舞いを真似っこします。

通信中にフィルターが停止した場合、またはプロトコルに準拠していない場合、Gitはフィルタープロセスを停止し、処理が必要な次のファイルでフィルターを再開します。
@samp{filter.<driver>.required} フラグの設定によっては、Gitはそれをエラーとして解釈します。

@noindent

@subheading Delay

フィルタが "delay" 機能をサポートしている場合、Gitはフィルタコマンドとパス名の後にフラグ "can-delay"
を送信できます。このフラグは、コンテンツなしでステータス "delayed"
とフラッシュパケットで応答することにより、フィルターが現在のブロブのフィルタリングを遅らせることができることを示します(たとえば、ネットワーク遅延を補正するため)。

@example
packet:          git> command=smudge
packet:          git> pathname=path/testfile.dat
packet:          git> can-delay=1
packet:          git> 0000
packet:          git> CONTENT
packet:          git> 0000
packet:          git< status=delayed
packet:          git< 0000
@end example


フィルタが "delay" 機能をサポートしている場合は、 "list_available_blobs"
コマンドをサポートしている必要があります。Gitがこのコマンドを送信すると、フィルターは、以前に遅延されて現在使用可能なブロブを表すパス名のリストを返すことが期待されます。リストはフラッシュパケットで終了する必要があり、その後に
"success" ステータスが続き、これもフラッシュパケットで終了します。
遅延パスのブロブがまだ利用できない場合、フィルターは少なくとも1つのブロブが利用可能になるまで応答をブロックすることが期待されます。フィルタは、空のリストを送信することで、遅延ブロブがなくなったことをGitに伝えることができます。フィルタが空のリストで応答するとすぐに、Gitは質問を停止します。この時点でGitが受信していないすべてのブロブは欠落していると見なされ、エラーが発生します。

@example
packet:          git> command=list_available_blobs
packet:          git> 0000
packet:          git< pathname=path/testfile.dat
packet:          git< pathname=path/otherfile.dat
packet:          git< 0000
packet:          git< status=success
packet:          git< 0000
@end example


Gitはパス名を受け取った後、対応するブロブを再度要求します。これらのリクエストには、パス名と空のコンテンツセクションが含まれています。フィルターは、上記で説明した通常の方法で汚れたコンテンツ(smudged
content)に応答することが期待されます。

@example
packet:          git> command=smudge
packet:          git> pathname=path/testfile.dat
packet:          git> 0000
packet:          git> 0000  # empty content!
packet:          git< status=success
packet:          git< 0000
packet:          git< SMUDGED_CONTENT
packet:          git< 0000
packet:          git< 0000  # empty list, keep "status=success" unchanged!
@end example


@noindent

@subheading Example

長時間実行されるフィルターのデモの実装は、Gitコアリポジトリにある  @samp{contrib/long-running-filter/example.pl}
にあります。 独自の長時間実行フィルタープロセスを開発する場合は、 @samp{GIT_TRACE_PACKET}
環境変数がデバッグに非常に役立ちます(git(1) を参照)。

既存の @samp{filter.<driver>.clean} や @samp{filter.<driver>.smudge} コマンドを
@samp{filter.<driver>.process}
で使用できないことに注意してください。前者は後者とは異なるプロセス間通信プロトコルを使用するからです。

@noindent

@subheading チェックイン/チェックアウト属性間の相互作用

チェックインのコードの流れでは、ワークツリーファイルは最初に(指定され、対応するドライバーが定義されている場合、) @samp{filter}
ドライバーで変換され、次に結果が(指定されている場合) `ident`で処理され、最後に(指定されて適用可能な場合) `text`で処理されます。

チェックアウトのコードの流れでは、ブロブコンテンツは最初に @samp{text} で変換され、次に @samp{ident} で変換され、 @samp{filter}
に送られます。

@noindent

@subheading チェックイン/チェックアウト属性が異なるブランチをマージする

clean/smudge フィルターや text/eol/ident
属性の追加など、そのファイルの正規リポジトリ形式を変更する属性をファイルに追加した場合、属性が配置されていない場所で何かをマージすると、通常、マージの競合が発生します。

これらの不必要なマージの競合を防ぐために、Gitは、 @samp{merge.renormalize}
構成変数を設定することにより、3方向マージを解決するときに、ファイルの3つのステージすべての仮想チェックアウトとチェックインを実行するように指示できます。これにより、チェックイン変換によって引き起こされた変更によって、変換されたファイルが変換されていないファイルとマージされるときに、誤ったマージの競合が発生するのを防ぐことができます。

「smudge→clean」の結果がすでに汚されている(smudged)ファイルでも「clean」と同じ出力になる限り、この戦略はすべてのフィルター関連の競合を自動的に解決します。このように機能しないフィルターは、手動で解決する必要がある追加のマージ競合を引き起こす可能性があります。

@noindent

@heading Generating diff text

@noindent

@subheading diff

属性 @samp{diff}
は、Gitが特定のファイルのdiffを生成する方法に影響を与えます。パスのテキストパッチを生成するか、パスをバイナリファイルとして扱うかをGitに指示できます。
また、ハンクヘッダーの @samp{@@@@ -k,l +n,m @@@@}
行に表示される行に影響を与えたり、外部コマンドを使用して差分を生成するようにGitに指示したり、差分を生成する前にバイナリファイルをテキスト形式に変換するようにGitに依頼したりすることもできます。

@table @asis

@item  set(設定) 
@samp{diff} 属性が設定されているパスは、NULなどのテキストファイルには通常表示されないバイト値が含まれている場合でも、テキストとして扱われます。

@item  unset(設定解除) 
@samp{diff} 属性が設定されていないパスは、 @samp{Binary files differ} (バイナリファイル差分)
(または、バイナリパッチが有効になっている場合、バイナリパッチ) を生成します。

@item  unspecified(未指定) 
@samp{diff} 属性が指定されていないパスは、最初にその内容が検査され、テキストのように見え、 core.bigFileThreshold
よりも小さい場合は、テキストとして扱われます。さもなければ @samp{Binary files differ} (バイナリファイル差分) が生成されます。

@item  String(文字列値) 
指定されたdiffドライバーを使用してdiffが表示されます。以下のセクションで説明するように、各ドライバーは1つ以上のオプションを指定できます。diffドライバー「foo」のオプションは、Git構成ファイルの「diff.foo」セクションの構成変数によって定義されます。
@end table

@noindent

@subheading 外部diffドライバーの定義

diffドライバの定義は @samp{gitattributes} ファイルではなく @samp{gitconfig}
で行われるため、厳密に言えば、このマニュアルページはそれについて話すのには間違った場所はありますが…

外部diffドライバー @samp{jcdiff} を定義するには、以下のように @samp{$GIT_DIR/config} ファイル(または
@samp{$HOME/.gitconfig} ファイル)にセクションを追加します:

@example
[diff "jcdiff"]
        command = j-c-diff
@end example


Git は @samp{diff} 属性が @samp{jcdiff} に設定されているパスの diff を表示する必要がある場合、上記の設定で指定したコマンド、つまり
@samp{j-c-diff} を 7 つのパラメータで、 @samp{GIT_EXTERNAL_DIFF} プログラムが呼ばれるのと同じように呼び出します。 詳しくは
git(1) を参照してください。

@noindent

@subheading Defining a custom hunk-header

テキストdiff出力の変更の各グループ(ハンク(hunk)と呼ばれます)には、以下の形式の行が接頭辞として付けられます:

@example
@@@@ -k,l +n,m @@@@ TEXT
@end example

これはハンクヘッダー(hunk header)と呼ばれます。 "TEXT"
の部分は、デフォルトでは、アルファベットまたは、アンダースコア(@samp{_})または、ドル記号(@samp{$})で始まる行です。 これは、GNU @emph{diff -p}
出力が使用するものとマッチします。ただし、このデフォルトの選択は一部のコンテンツには適していないため、カスタマイズされたパターンを使用して選択を行うことができます。

最初に、 .gitattributesで、パスに @samp{diff} 属性を割り当てます。

@example
*.tex   diff=tex
@end example


次に、 @samp{diff.tex.xfuncname} 構成を定義して、ハンクヘッダー "TEXT"
として表示する行にマッチする正規表現を指定します。以下のように、 @samp{$GIT_DIR/config} ファイル(または
@samp{$HOME/.gitconfig} ファイル)にセクションを追加します:

@example
[diff "tex"]
        xfuncname = "^(\\\\(sub)*section\\@{.*)$"
@end example


注意: 単一レベルのバックスラッシュは構成ファイルパーサーによって使用されるため、バックスラッシュを2重にする必要があります。
上記のパターンは、バックスラッシュで始まり、行の終わりまで、 @samp{sub} 、 @samp{section} 、 @samp{@{} の順に0回以上出現する行を選択します。

これを簡単にするための組み込みパターンがいくつかあり、 @samp{tex} はその1つであるため、構成ファイルに上記を書き込む必要はありません(これは、
@samp{.gitattributes} を介して属性メカニズムで有効にする必要があります)。以下の組み込みパターンを使用できます:

@itemize 

@item
@samp{ada} はAda言語のソースコードに適しています。

@item
@samp{bash} はBourne-Againシェル言語(bash)のソースコードに適しています。POSIXシェル関数定義のスーパーセットをカバーしています。

@item
@samp{bibtex} はBibTeXでコード化されたリファレンスを持つファイルに適しています。

@item
@samp{cpp} はC言語とC++言語のソースコードに適しています。

@item
@samp{csharp} はC#言語のソースコードに適しています。

@item
@samp{css} はCSS(cascading style sheets)に適しています。

@item
@samp{dts} は devicetree (DTS) ファイルに適しています。

@item
@samp{elixir} はElixir言語のソースコードに適しています。

@item
@samp{fortran} はFORTRAN言語のソースコードに適しています。

@item
@samp{fountain} はFountain文書に適しています。

@item
@samp{golang} はGo言語のソースコードに適しています。

@item
@samp{html} は HTML/XHTML 文書に適しています。

@item
@samp{java} はJava言語のソースコードに適しています。

@item
@samp{markdown} はMarkdown文書に適しています。

@item
@samp{matlab} はMATLABとOctave言語のソースコードに適しています。

@item
@samp{objc} はObjective-C言語のソースコードに適しています。

@item
@samp{pascal} は Pascal/Delphi 言語のソースコードに適しています。

@item
@samp{perl} はPerl言語のソースコードに適しています。

@item
@samp{php} はPHP言語のソースコードに適しています。

@item
@samp{python} はPython言語のソースコードに適しています。

@item
@samp{ruby} はRuby言語のソースコードに適しています。

@item
@samp{rust} はRust言語のソースコードに適しています。

@item
@samp{scheme} はScheme言語のソースコードに適しています。

@item
@samp{tex} はLaTeX文書のソースコードに適しています。
@end itemize

@noindent

@subheading Customizing word diff

@samp{diff.*.wordRegex} 構成変数で適切な正規表現を指定することにより、 @samp{git diff --word-diff}
が単語を1行に分割するために使用するルールをカスタマイズできます。たとえば、TeXでは、バックスラッシュとそれに続く一連の文字がコマンドを形成しますが、そのようなコマンドのいくつかは、空白を介さずに一緒に実行できます。それらを分離するには、以下のように
@samp{$GIT_DIR/config} ファイル(または @samp{$HOME/.gitconfig} ファイル)で正規表現を使用します:

@example
[diff "tex"]
        wordRegex = "\\\\[a-zA-Z]+|[@{@}]|\\\\.|[^\\@{@}[:space:]]+"
@end example


前のセクションにリストされているすべての言語には組み込みのパターンが用意されています。

@noindent

@subheading バイナリファイルのテキスト差分の取得

一部のバイナリファイルのテキスト変換バージョンの差分を確認することが望ましい場合があります。たとえば、ワードプロセッサ文書をASCIIテキスト表現に変換し、テキストの差分を表示することができます。この変換によって一部の情報が失われますが、結果のdiffは人間が見るのに役立ちます(ただし、直接適用(apply)することはできません)。

@samp{textconv}
configオプションは、そのような変換を実行するためのプログラムを定義するために使用されます。プログラムは、変換するファイルの名前である単一の引数を取り、結果のテキストをstdoutに生成する必要があります。

たとえば、バイナリ情報の代わりにファイルのexif情報の差分を表示するには(exifツールがインストールされていると仮定して)、以下のセクションを
@samp{$GIT_DIR/config} ファイル(または `$HOME/.gitconfig ファイル)に追加します:

@example
[diff "jpg"]
        textconv = exif
@end example


@quotation

@strong{Note}

テキスト変換は通常、一方向の変換です。この例では、実際の画像コンテンツを失い、テキストデータのみに焦点を当てています。これは、textconvによって生成されたdiffが適用(apply)に適していないことを意味します。このため、テキスト変換を実行するのは、
@samp{git diff} と @samp{git log} ファミリーのコマンド(つまり、log、whatchanged、show)のみです。 @samp{git
format-patch}
はこの出力を生成しません。バイナリファイルのテキスト変換された差分を誰かに送信したい場合(たとえば、行った変更をすばやく伝達するため)、それを別個に生成し、送信する通常のバイナリ差分に加えてコメントとして送信する必要があります。
@end quotation

特に @samp{git log -p}
を使用して大量のテキスト変換を行う場合、テキスト変換が遅くなる可能性があるため、Gitは出力をキャッシュし、将来の差分で使用するメカニズムを提供します。
キャッシュを有効にするには、diffドライバーの構成で「cachetextconv」変数を設定します。 例えば:

@example
[diff "jpg"]
        textconv = exif
        cachetextconv = true
@end example


これにより、各ブロブで「exif」を実行した結果が無期限にキャッシュされます。diffドライバーのtextconv構成変数を変更すると、Gitはキャッシュエントリを自動的に無効にし、textconvフィルターを再実行します。キャッシュを手動で無効にしたい場合(たとえば、「exif」のバージョンが更新され、より良い出力が生成されようになった等)、
@samp{git update-ref -d refs/notes/textconv/jpg} を使用してキャッシュを手動で削除できます(
ここで、「jpg」は上記の例のように、diffドライバーの名前です)。

@noindent

@subheading textconvと外部diffの選択

あなたがリポジトリ内のバイナリまたは特別にフォーマットされたブロブの違いを表示したい場合は、外部のdiffコマンドを使用するか、textconvを使用してそれらを差分可能(diff-able)なテキストフォーマットに変換するかを選択できます。どちらの方法を選択するかは、状況に完全に依存します。

外部diffコマンドを使用する利点は、柔軟性です。行指向の変更を見つける必要はありません。また、出力が統一されたdiff(unified
diff)に似ている必要もありません。あなたはあなたのデータ形式に最も適した方法で変更を自由に見つけて報告できます。

それと比較すると、textconvははるかに制限的です。データを行指向のテキスト形式に変換すると、Gitは通常のdiffツールを使用して出力を生成します。この方法を選択することにはいくつかの利点があります:

@enumerate 

@item
容易に使えます。多くの場合、独自の差分を実行するよりも、バイナリからテキストへの変換を作成する方がはるかに簡単です。多くの場合、既存のプログラム(つまり
exif や odt2txt)をtextconvフィルターとして使用できます。

@item
Gitのdiff機能。変換ステップのみを自分で実行することで、カラー化、単語diff、マージ用の複合diffなど、Gitのdiff機能の多くを引き続き利用できます。

@item
キャッシュ機能。 textconvキャッシングは、 @samp{git log -p} を実行してトリガーするような、繰り返されるdiffを高速化できます。
@end enumerate

@noindent

@subheading ファイルをバイナリとしてマークする

Gitは通常、コンテンツの先頭を調べることで、ブロブにテキストデータとバイナリデータのどちらが含まれているかを正しく推測します。ただし、ブロブにファイルの後半にバイナリデータが含まれている、またはコンテンツが技術的にはテキスト文字で構成されているものの、人間の読者には不明瞭であるために、あなたは、その推測を上書きしたい場合があります。たとえば、多くのポストスクリプトファイルにはASCII文字しか含まれていません(つまりテキストデータです)が、ノイズが多く意味のないdiffが生成されます。

ファイルをバイナリとしてマークする最も簡単な方法は、 @samp{.gitattributes} ファイルでdiff属性を設定解除(unset)することです。

@example
*.ps -diff
@end example


これにより、Gitは通常の差分ではなく @samp{Binary files differ}
(バイナリファイルの差分)(またはバイナリパッチが有効になっている場合はバイナリパッチ)を生成します。

しかしながら、他のdiffドライバー属性を指定することもできます。 たとえば、 @samp{textconv}
を使用してポストスクリプトファイルをASCII表現に変換し、人間が表示できるようにしたい場合があるけども、それ以外の場合はバイナリファイルとして扱いたいとします。
@samp{-diff} 属性 と @samp{diff=ps} 属性の両方を指定することはできません。 解決策は、 @samp{diff.*.binary}
構成オプションを使用することです:

@example
[diff "ps"]
  textconv = ps2ascii
  binary = true
@end example


@noindent

@heading Performing a three-way merge

@noindent

@subheading merge

属性 @samp{merge} は、 @samp{git merge} 中にファイルレベルのマージが必要な場合にファイルの3つのバージョンをマージする方法や、 @samp{gitr
evert} や @samp{git cherry-pick} などの他のコマンドに、影響します。

@table @asis

@item  set(設定) 
組み込みの３方向マージドライバーは、 @samp{RCS} スイートの @emph{merge}
コマンドと同様の方法でコンテンツをマージするために使用されます。これは通常のテキストファイルに適しています。

@item  unset(設定解除) 
現在のブランチのバージョンを暫定的なマージ結果として取得し、マージに競合があることを宣言します。これは、明確に定義されたマージセマンティクスを持たないバイナリファイルに適しています。

@item  unspecified(未指定) 
デフォルトでは、これは @samp{merge} 属性が設定されている場合と同じ組み込みの３方向マージドライバーを使用します。 ただし、
@samp{merge.default} 構成変数は、 @samp{merge}
属性未指定(unspecified)のパスで使用される別のマージドライバーに名前を付けることができます。

@item  String(文字列値) 
3方向マージは、指定のカスタムマージドライバーを使用して実行されます。組み込みの3方向マージドライバーは、「text」ドライバーを要求することで明示的に指定できます。
現在のブランチを取得する組み込みドライバーは、「binary」を要求することで指定できます。
@end table

@noindent

@subheading Built-in merge drivers

@samp{merge} 属性を介して要求できる、いくつかの組み込みの低レベルのマージドライバーが定義されています。

@table @asis

@item  text 
テキストファイルの通常の3方向ファイルレベルのマージ。 競合する領域は、競合マーカー @samp{<<<<<<<} と @samp{=======} と @samp{>>>>>>>}
でマークされます。ブランチのバージョンは @samp{=======} マーカーの前に表示され、マージされたブランチのバージョンは @samp{=======}
マーカーの後に表示されます。

@item  binary 
ブランチのバージョンを作業ツリーに保持しますが、ユーザーが整理できるようにパスを競合状態のままにします。

@item  union 
テキストファイルに対して3方向のファイルレベルのマージを実行しますが、競合マーカーを残すのではなく、両方のバージョンから行を取得します。これにより、結果のファイルに追加された行がランダムな順序で残る傾向があり、ユーザーは結果を確認すべきです。影響を理解していない場合は、これを使用してはいけません。
@end table

@noindent

@subheading Defining a custom merge driver

マージドライバの定義は、 @samp{gitattributes} ファイルではなく @samp{.git/config}
ファイルで行われるため、厳密に言えば、このマニュアルページはそれについて話すのに間違った場所ではありますが…

カスタムマージドライバー @samp{filfre} を定義するには、以下のように @samp{$GIT_DIR/config} ファイル(または
@samp{$HOME/.gitconfig} ファイル)にセクションを追加します:

@example
[merge "filfre"]
        name = feel-free merge driver
        driver = filfre %O %A %B %L %P
        recursive = binary
@end example


@samp{merge.*.name} 変数は、ドライバーに人間が読める名前を付けます。

@samp{merge.*.driver}
変数の値は、祖先のバージョン(@samp{%O})と、現在のバージョン(@samp{%A})と、他のブランチのバージョン(@samp{%B})をマージするために実行するコマンドを作成するために使用されます。これらの3つのトークンは、コマンドラインの構築時にこれらのバージョンの内容を保持する一時ファイルの名前に置き換えられます。さらに、
@samp{%L} は競合マーカーのサイズに置き換えられます(以下を参照)。

マージドライバーは、マージの結果を @samp{%A}
という名前のファイルに上書きして残し、それらを正常にマージできた場合はゼロステータスで終了し、競合があった場合は非ゼロで終了することが期待されます。

@samp{merge.*.recursive}
変数は、複数の祖先が存在する場合に、共通の祖先間の内部マージのためにマージドライバーが呼び出されるときに使用する他のマージドライバーを指定します。指定しない場合、ドライバー自体が内部マージと最終マージの両方に使用されます。

マージドライバーは、プレースホルダー @samp{%P} を介して、マージされた結果が格納されるパス名を知ります。

@noindent

@subheading conflict-marker-size

この属性は、競合するマージ中に作業ツリーファイルに残る競合マーカーの長さを制御します。値を正の整数に設定するだけで、意味のある効果があります。

たとえば、 ファイル @samp{Documentation/git-merge.txt} の結果をマージすると競合するときに、@samp{.gitattributes}
で(通常の7文字の長さではなく)はるかに長い競合マーカーを残すようにマージ機構に指示できます。

@example
Documentation/git-merge.txt     conflict-marker-size=32
@end example


@noindent

@heading Checking whitespace errors

@noindent

@subheading whitespace

@example
 `core.whitespace` 設定変数を使用すると、プロジェクト内のすべてのパスに対して 'diff' と 'apply'
が空白エラー(whitespace errors)をどうみなすかを定義します(linkgit:git-config[1]
を参照)。この属性では、あなたはパスごとに細かく制御できます。
@end example

@table @asis

@item  set(設定) 
Gitでチェックできる全てのタイプの潜在的な空白エラーを通知します。タブ幅は @samp{core.whitespace} 構成変数の値から取得されます。

@item  unset(設定解除) 
何もエラーとして通知しません。

@item  unspecified(未指定) 
@samp{core.whitespace} 構成変数の値を使用して、エラーとして通知する内容を決定します。

@item  String(文字列値) 
@samp{core.whitespace} 構成変数と同じ形式で、通知すべき一般的な空白の問題のコンマ区切りリストを指定します。
@end table

@noindent

@heading Creating an archive

@noindent

@subheading export-ignore

属性 @samp{export-ignore} を持つファイルとディレクトリはアーカイブファイルに追加されません。

@noindent

@subheading export-subst

属性 @samp{export-subst}
がファイルに設定されている場合、Gitはこのファイルをアーカイブに追加するときにいくつかのプレースホルダーを展開します。展開は、コミットIDの可用性に依存します。たとえば
git-archive(1) にコミットやタグの代わりにツリーが与えられている場合、置換は行われません。プレースホルダーは、
git-log(1) のオプション @samp{--pretty=format:} のプレースホルダーと同じですが、ファイル内で
@samp{$Format:PLACEHOLDERS$} のようにラップする必要がある点が異なります。 例えば、 文字列 @samp{$Format:%H$}
は、コミットハッシュに置き換えられます。ただし、DoS攻撃(denial-of-service attacks)を回避するために、アーカイブごとに1つの
@samp{%(describe)} プレースホルダーのみが展開されます。

@noindent

@heading Packing objects

@noindent

@subheading delta

属性 @samp{delta} がfalseに設定されているパスのブロブに対して、デルタ圧縮は試行されません。

@noindent

@heading Viewing files in GUI tools

@noindent

@subheading encoding

この属性の値は、関連するファイルの内容を表示するためにGUIツール(gitk(1) や git-gui(1)
など)で使用される文字エンコードを指定します。注意: パフォーマンス上の考慮事項により、 gitk(1)
は、オプションでファイルごとのエンコーディングを手動で有効にしない限り、この属性を使用しないことに注意してください。

この属性が設定されていないか、値が無効な場合は、代わりに @samp{gui.encoding}
構成変数の値が使用されます(git-config(1) を参照)。

@noindent

@chapheading USING MACRO ATTRIBUTES

追跡中のバイナリファイルに、行末変換を適用したり、テキストの差分を作成したりする必要はありません。あなたは、たとえば以下のように指定する必要があります。

@example
*.jpg -text -diff
@end example


しかし、多くの属性がある場合、これはめんどくさいです。マクロ属性を使用すると、あなたは設定時に他の多くの属性を同時に設定または設定解除する属性を定義できます。システムは、組み込みのマクロ属性
@samp{binary} を認識します:

@example
*.jpg binary
@end example


「binary」属性を設定すると、上記のように「text」属性と「diff」属性の設定も解除されます。マクロ属性は「set」のみであることに注意してください。ただし、1つを設定すると、他の属性をsetまたはunsetしたり、他の属性を「Unspecified」状態に戻したりする事があります。

@noindent

@chapheading DEFINING MACRO ATTRIBUTES

カスタムマクロ属性は、最上位のgitattributesファイル(@samp{$GIT_DIR/info/attributes} または、作業ツリーの最上位にある
` .gitattributes`
ファイルまたは、グローバルgitattributesファイルまたは、システム全体のgitattributesファイル)でのみ定義でき、作業ツリーサブディレクトリの
@samp{.gitattributes} ファイルでは定義できません。 組み込みのマクロ属性「binary」は、以下のものと同等です:

@example
[attr]binary -diff -merge -text
@end example


@noindent

@chapheading NOTES

作業ツリーの @samp{.gitattributes} ファイルにアクセスするとき、Gitはシンボリックリンクをたどりません。
これにより、ファイルシステムからではなく、インデックスまたはツリーからファイルにアクセスする場合の動作の一貫性が保たれます。

@noindent

@chapheading EXAMPLES

これらの以下の3つの @samp{gitattributes} ファイルがある場合:

@example
(in $GIT_DIR/info/attributes)

a*      foo !bar -baz

(in .gitattributes)
abc     foo bar baz

(in t/.gitattributes)
ab*     merge=filfre
abc     -foo -bar
*.c     frotz
@end example


パス @samp{t/abc} に与えられる属性は、以下のように計算されます:

@enumerate 

@item
(問題のパスと同じディレクトリにある) @samp{t/.gitattributes} を調べることにより、Gitは最初の行が一致することを検出します。
@samp{merge} 属性が設定されます。 また、2行目が一致し、属性 @samp{foo} と `bar`が設定解除(unseet)されていることもわかります。

@item
次に (親ディレクトリにある) @samp{.gitattributes} を調べ、最初の行がマッチすることを確認します。しかし、
@samp{t/.gitattributes}  ファイルでは、このパスに対して @samp{merge} や @samp{foo} や @samp{bar}
属性をどのように与えるべきかを既に決めているので、@samp{foo} と @samp{bar} は設定解除(unset)のままにしています。属性 @samp{baz}
がsetされます。

@item
最後に、 @samp{$GIT_DIR/info/attributes}
を調べます。このファイルは、ツリー内の設定を上書きするために使用されます。最初の行がマッチして @samp{foo} がsetされ、 @samp{bar}
が指定解除(unset)の状態に戻され、 @samp{baz} が設定解除(unset)されます。
@end enumerate

その結果、 @samp{t/abc} への属性の割り当ては以下のようになります:

@example
foo     set to true
bar     unspecified
baz     set to false
merge   set to string value "filfre"
frotz   unspecified
@end example


@noindent

@chapheading SEE ALSO

git-check-attr(1).

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitcli,,,Top
@chapheading Name

gitcli — Gitコマンドラインのインターフェイスと規則

@noindent

@chapheading Synopsis

gitcli

@noindent

@chapheading DESCRIPTION

このマニュアルでは Git CLI 全体で使用される規則について説明します。

多くのコマンドは、引数としてリビジョン(revisions)(それはほとんどの場合「コミット」(commits)ですが、文脈とコマンドによっては「ツリーっぽい」(tree-ish)場合もあります)と、パス(paths)を取ります。ルールは以下のとおりです:

@itemize 

@item
リビジョン達が最初に来て、その次にパス達が来ます。 例えば、 @samp{git diff v1.0 v2.0 arch/x86 include/asm-x86}
では @samp{v1.0} と @samp{v2.0} はリビジョン達であり、 @samp{arch/x86} と @samp{include/asm-x86} はパス達です。

@item
引数がリビジョンまたはパスのいずれかと誤解される可能性がある場合は、それらの間に @samp{--} を配置することで曖昧さを解消できます。例えば、 @samp{git
diff -- HEAD}
は、「作業ツリーにHEADというファイルがあります。インデックスにステージングしたバージョンと、そのファイルの作業ツリーにあるバージョンとの変更を表示してください」であり、「HEADコミットとワークツリー全体の違いを表示する」ではありません。後者を求めるには
@samp{git diff HEAD --} とします。

@item
@samp{--}
を明示しなくても、Gitは合理的な推測を行いますが、あいまいな場合はエラーが発生し、あなたに明確にするように求めます。例えば、作業ツリーにHEADというファイルがある場合、
@samp{git diff HEAD} はあいまいであり、曖昧さを解消するには、 @samp{git diff HEAD --} または  @samp{git diff --
HEAD} のいずれかを指定する必要があります。

@item
一部のコマンドでは、 @samp{--}
はリビジョンとパスを明確に区別するために使われるため、これら一部のコマンドでオプションとリビジョンを分離するために使用することはできません。これら一部のコマンドではオプションとリビジョンを分離するために
@samp{--end-of-options} を使用できます(これら以外のパスのリビジョンを区別しないコマンドでも機能します。その場合、
@samp{--end-of-options} は単に @samp{--} のエイリアスです)。

ランダムなユーザー入力を処理することが期待されるスクリプトを作成するときは、適切な場所に曖昧さ回避の @samp{--}
を配置することにより、どの引数がどれであるかを明示することをお勧めします。

@item
多くのコマンドではパスにワイルドカードを使用できますが、シェルによってワイルドカードが取得されないように保護する必要があります。以下の2つの意味は異なります:

@example
$ git restore *.c
$ git restore \*.c
@end example


前者を使用すると、シェルでfileglobを展開でき、作業ツリー内の
C言語ソースファイル(dot-C)をインデックス内のバージョンで上書きするように要求されます。後者は @samp{*.c}
をGitに渡し、作業ツリーにチェックアウトするパターンに一致するインデックス内のパスを要求しています。@samp{git add hello.c; rm
hello.c} を実行後、前者では作業ツリーに @samp{hello.c} は表示されませんが、後者では表示されます。

@item
ファイルシステムの @samp{.} (ピリオド)が現在のディレクトリを参照するのと同じように、Gitでリポジトリ名として @samp{.} を使用すること(a
dot-repository)は相対パスであり、あなたの現在のリポジトリを意味します。
@end itemize

Gitのスクリプトを作成するときに従う必要のある「フラグ」(flag)に関するルールは以下のとおりです:

@itemize 

@item
ダッシュで繋がない形式(non-dashed form)のGitコマンドを使用することをお勧めします。つまり、 @samp{git-foo} よりは @samp{git
foo} を使用すべきです。

@item
短いオプションは分割して単語に区切ります( @samp{git foo -ab} よりも @samp{git foo -a -b}
を優先します。前者は機能しない事があります)。

@item
コマンドラインオプションが引数を取る場合は、串刺し形式(stuck' form) を使用します。つまり、短いオプションの場合は @samp{git foo -o
Arg} の代わりに @samp{git foo -oArg} を記述し、長いオプションの場合は @samp{git foo --long-opt Arg} の代わりに
@samp{git foo --long-opt=Arg} を記述します。オプションのオプション引数をとるオプションは、串刺し形式で記述する必要があります。

@item
コマンドにリビジョンパラメータを指定するときは、そのパラメータが作業ツリー内のファイルの名前と混同されないことを確認してください。例えば、 @samp{git
log -1 HEAD} とは記述せず、@samp{git log -1 HEAD --} と記述します。作業ツリーに @samp{HEAD}
というファイルがある場合、前者は機能しません。

@item
多くのコマンドでは、長いオプション @samp{--option} を一意であるかぎり短いプレフィックスのみに省略できます(たとえば、名前が @samp{opt}
で始まるオプションが他にない場合は、 @samp{--opt} と入力して @samp{--option}
フラグを呼び出すことができます)。ただし、スクリプトを作成するときは、省略してはいけません。なぜならGitのより新しいバージョンで、名前が同じプレフィックスを共有する新しいオプションが導入される可能性があるからです。例えば
@samp{--optimize} が導入されると、以前は一意であった短いプレフィックス(@samp{--option} , @samp{--opt})を一意では無くしてしまいます。
@end itemize

@noindent

@chapheading ENHANCED OPTION PARSER

Git 1.5.4シリーズ以降、多くのGitコマンド(この文書の執筆時点ではすべてではありませんが)は、拡張オプションパーサーを備えています。

以下は、この拡張オプションパーサーによって提供される機能のリストです。

@noindent

@heading Magic Options

拡張オプションパーサーがアクティブになっているコマンドはすべて、いくつかの魔法のコマンドラインオプション(magic command-line
options)を理解します:

@table @asis

@item  @samp{-h} 
コマンドの、かなり整った使用法を提供します。

@example
$ git describe -h
usage: git describe [<options>] <commit-ish>*
   or: git describe [<options>] --dirty

    --contains            find the tag that comes after the commit
    --debug               debug search strategy on stderr
    --all                 use any ref
    --tags                use any tag, even unannotated
    --long                always use long format
    --abbrev[=<n>]        use <n> digits to display SHA-1s
@end example


注意: 一部のサブコマンド(例: @samp{git grep} )は、コマンドラインに @samp{-h}
以外のものがある場合、動作が異なる場合がありますが、コマンドラインに何も含まれていない @samp{git subcmd -h}
は、一貫して使用法を提供することを目的としています。

@item  @samp{--help-all} 
一部のGitコマンドは、配管コマンドにのみ使用されるオプションまたは非推奨のオプションを取り、そのようなオプションはデフォルトの使用法から隠されています。
このオプションはオプションの完全なリストを提供します。
@end table

@noindent

@heading 否定オプション

長いオプションは、接頭辞 @samp{--no-} を付けることで無効にできます。 たとえば、 @samp{git branch} にはオプション @samp{--track}
があります。これはデフォルトで @emph{on} です。 @samp{--no-track} を使用して、その動作をオーバーライドできます。 @samp{--color} と
@samp{--no-color} についても同じことが言えます。

@noindent

@heading 短いオプションのおまとめ

拡張オプションパーサーをサポートするコマンドを使用すると、短いオプションをおまとめできます。これは、たとえば、 @samp{git rm -rf} や @samp{git
clean -fdx} を使用できることを意味します。

@noindent

@heading 長いオプションの省略

拡張オプションパーサーをサポートするコマンドは、クソ詳しく長いオプションの一意なプレフィックスを受け入れますが、これは注意して使用してください。
たとえば、 @samp{git commit --amen} は @samp{git commit --amend}
と入力したかのように動作しますが、これは、後のバージョンのGitが同じプレフィックスを共有する別のオプションを導入するまでのみ当てはまります。例えば
@samp{git commit --amenity} オプションが導入されたら一意で無くなります。

@noindent

@heading Separating argument from the option

コマンドラインで、オプションの必須パラメータを単に区切られた単語として記述することができます。これは、以下のすべての使い方が機能することを意味します:

@example
$ git foo --long-opt=Arg
$ git foo --long-opt Arg
$ git foo -oArg
$ git foo -o Arg
@end example


ただし、これは必須ではないオプションの値を持つスイッチでは許可されていません。その場合は串刺し形式を使用する必要があります:

@example
$ git describe --abbrev HEAD     # correct
$ git describe --abbrev=10 HEAD  # correct
$ git describe --abbrev 10 HEAD  # NOT WHAT YOU MEANT
@end example


@noindent

@chapheading 注意：よく混同されるオプションに関する注記

作業ツリーおよび/またはインデックス内のファイルを処理できる多くのコマンドは、 @samp{--cached} および/または @samp{--index}
オプションを使用できます。インデックスは元々キャッシュと呼ばれていたため、これら2つは同義語であると誤解されることがあります。ちゃいます。これらの2つのオプションは非常に異なることを意味します。

@itemize 

@item
@samp{--cached} オプションは、通常は作業ツリー内のファイルで機能するコマンドに、「インデックスのみで」機能するように要求するために使用されます。
たとえば、 @samp{git grep} をコミットせずに使用して、どのコミットから文字列を検索するかを指定すると、通常は作業ツリー内のファイルで機能しますが、
@samp{--cached} オプションを使用するとインデックス内の文字列を検索します。

@item
@samp{--index}
オプションは、通常は作業ツリー内のファイルで機能するコマンドに、「インデックスにも」影響を与えるように要求するために使用されます。たとえば、 @samp{git
stash apply} は通常、stashエントリに記録された変更を作業ツリーにマージしますが、 @samp{--index}
オプションを使用すると、インデックスへの変更もマージします。
@end itemize

@samp{git apply`コマンドは、 `--cached} または @samp{--index}
のいずれかを伴って使用できます(同時に使用することはできません。通常、このコマンドは作業ツリー内のファイルにのみ影響しますが、 @samp{--index}
を使用すると、ファイルとそのインデックスエントリの両方にパッチが適用され、 @samp{--cached} を使用すると、インデックスエントリのみが変更されます。

詳細については @uref{https://lore.kernel.org/git/7v64clg5u9.fsf@@assigned-by-dhcp.cox.net/,https://lore.kernel.org/git/7v64clg5u9.fsf@@assigned-by-dhcp.cox.net/}
と @uref{https://lore.kernel.org/git/7vy7ej9g38.fsf@@gitster.siamese.dyndns.org/,https://lore.kernel.org/git/7vy7ej9g38.fsf@@gitster.siamese.dyndns.org/}
も参照してください。

作業ツリー および/または インデックス内のファイルに対しても機能する他のいくつかのコマンドは、 @samp{--staged} および/または
@samp{--worktree} を取ることができます。

@itemize 

@item
@samp{--staged} は @samp{--cached}
とまったく同じです。これは、作業ツリーではなく、インデックスでのみ機能するようにコマンドに要求するために使用されます。

@item
@samp{--worktree} は反対に、インデックスではなく、作業ツリーのみで作業するようにコマンドに要求します。

@item
2つのオプションを一緒に指定して、インデックスと作業ツリーの両方で作業するようにコマンドに要求することができます。
@end itemize

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitcore-tutorial,,,Top
@chapheading Name

gitcore-tutorial — 開発者のためのGit coreチュートリアル

@noindent

@chapheading Synopsis

git *

@noindent

@chapheading DESCRIPTION

このチュートリアルでは、「コア」(core)Gitコマンドを使用してGitリポジトリを設定および操作する方法について説明します。

あなたがGitをリビジョン管理システムとして使用する必要がある場合は、「A Tutorial Introduction to Git」(
linkgit: gittutorial[7] )または @uref{user-manual.html,the Git User Manual}
から始めることをお勧めします。

しかしながら、Gitの内部を理解したい場合は、これら低レベルのツールを理解しておくと役に立ちます。

コアGit(core
Git)は「配管」(plumbing)と呼ばれることが多く、その上に「磁器」(porcelain)と呼ばれるより美しいユーザーインターフェイスがあります。配管コマンドを直接使用することはあまりありませんが、磁器コマンドが使えない時に配管コマンドでどうするかを知っておくのは良い事です。

このドキュメントが最初に作成されたとき、多くの磁器コマンドはシェルスクリプトでした。説明を簡単にするために、配管がどのように組み合わされて磁器コマンドを形成するかを示す例としていまだそれらを使用しています。ソースツリーには、参照用に
contrib/examples/
にこれらのスクリプトの一部が含まれています。これらは最早シェルスクリプトとして実装されなくなりましたが、それでも、配管レイヤーコマンドの機能の説明は引き続き有効です。

@quotation

@strong{Note}

より深い技術的な詳細は、多くの場合 Note 欄になっています。最初の読書ではスキップしてかまいません。
@end quotation

@noindent

@chapheading Creating a Git repository

新しいGitリポジトリの作成はこれ以上ないほど簡単です。すべてのGitリポジトリは空から始まります。必要なのは、作業ツリーとして使用するサブディレクトリを見つけることだけです。まったく新しいプロジェクトの場合は、それは空のものか、あるいは、Gitにインポートする既存の作業ツリーのいずれかです。

私達の最初の例において、既存のファイルを使用せずに、まったく新しいリポジトリを最初から開始します。これを「git-tutorial」と呼ぶことにします。起動するには、そのサブディレクトリを作成し、そのサブディレクトリに入って、
@samp{git init} を使用してGitインフラストラクチャを初期化します:

@example
$ mkdir git-tutorial
$ cd git-tutorial
$ git init
@end example


そうすると、Gitは以下のように答えます

@example
Initialized empty Git repository in .git/
@end example


これは、奇妙なことを何もしていないこと、そして新しいプロジェクト用にローカルの @samp{.git}
ディレクトリセットアップを作成したことを示すGit流のやり方です。これで @samp{.git} ディレクトリができ、@emph{ls}
でそれを調べることができます。新しい空のプロジェクトの場合、特に、以下の3つのエントリが表示されます:

@itemize 

@item
@samp{ref: refs/heads/master} という内容の @samp{HEAD} というファイル。これはシンボリックリンクに似ており、 @samp{HEAD}
ファイルは @samp{refs/heads/master} を指します。

@samp{HEAD} リンクが指すファイルがまだ存在しないという事実について心配する必要はありません。まだあなたは @samp{HEAD}
開発ブランチを開始するコミットを作成していないからです。

@item
プロジェクトのすべてのオブジェクトを含む @samp{objects}
というサブディレクトリ。オブジェクトを直接見る理由は何も無いはずですが、これらのオブジェクトがリポジトリ内のすべての実際の「データ」を含むものであることを知りたい場合があります。

@item
オブジェクトへの参照を含む @samp{refs} と呼ばれるサブディレクトリ。
@end itemize

特に、 @samp{refs} サブディレクトリには、それぞれ @samp{heads} と @samp{tags}
という名前の2つのサブディレクトリが含まれます。それらは、名前が示すとおりに機能します。つまり、開発のさまざまな「ヘッド」(先頭)(別名「ブランチ」)への参照と、リポジトリ内の特定のバージョンに名前を付けるために作成した「タグ」への参照が含まれます。

注: 特別な @samp{master} ヘッドがデフォルトのブランチであるため、作成された @samp{.git/HEAD}
ファイルは、まだ存在していなくてもそれを指します。基本的に、 @samp{HEAD} リンクは常に現在作業しているブランチを指しているはずであり、いつも
@samp{master} ブランチでの作業から始まることを期待します。

けれども、これは単なる慣例であり、ブランチには任意の名前を付けることができ、あなたは「master」ブランチを持つ必要はありません。ただし、多くのGitツールは
@samp{.git/HEAD} が最初から有効であると想定します。

@quotation

@strong{Note}

「オブジェクト」は、その160ビットのSHA-1ハッシュ、別名「オブジェクト名」によって識別され、オブジェクトへの参照は、常にそのSHA-1名の16進表現の40バイトです。
@samp{refs} サブディレクトリ内のファイルには、これらの16進参照(通常、末尾に @samp{\n}
があります)が含まれていると予想されるため、実際にあなたのツリーにデータを入力し始めると、これらの @samp{refs}
サブディレクトリにはこれらの参照を含む41バイトのファイルが多数表示されるはずです。
@end quotation

@quotation

@strong{Note}

上級ユーザーは、このチュートリアルを終了した後、 gitrepository-layout(5) を確認することをお勧めします。
@end quotation

これで、あなたの最初のGitリポジトリが作成されました。もちろん、空なのであまり役に立ちません。なので、データの入力を始めましょう。

@noindent

@chapheading Populating a Git repository

我々はシンプルかつ愚直に行きたいと思います、まずは簡単なファイルをいくつか入力して、その感触をつかむことから始めます。

あなたのGitリポジトリに保持したいランダムファイルを作成することから始めます。これがどのように機能するかを理解するために、いくつかの悪い例から始めます:

@example
$ echo "Hello World" >hello
$ echo "Silly example" >example
@end example


これで、あなたの作業ツリー(working tree)(別名「作業ディレクトリ」(working
directory))に2つのファイルが作成されましたが、実際にあなたの作業をチェックインするには、以下の2つの手順を実行する必要があります:

@itemize 

@item
@emph{index} ファイル(別名 @emph{cache} ）に作業ツリーの状態に関する情報を入力します。

@item
そのインデックスファイルをオブジェクトとしてコミットします。
@end itemize

最初のステップは至極簡単です。作業ツリーへの変更についてGitに通知する場合は、 @samp{git update-index}
プログラムを使用します。このプログラムは通常、更新するファイル名のリストを取得しますが、些細な間違いを避けるために、 @samp{--add}
フラグを使用して新しいエントリを追加すること(または
`--remove`でエントリを削除すること)を明示的に指定しない限り、インデックスへの新しいエントリの追加(または既存のものを削除)することを拒否します。

したがって、作成した2つのファイルをインデックスに追加するには、以下のようにします

@example
$ git update-index --add hello example
@end example


これで、あなたはGitにこれら2つのファイルを追跡するように指示しました。

実際、上記を行った後にオブジェクトディレクトリを調べると、Gitがオブジェクトデータベースに2つの新しいオブジェクトを追加していることがわかります。上記の手順を正確に実行した場合は、あなたは以下のように実行できます

@example
$ ls .git/objects/??/*
@end example


そうすると以下の２つのファイルが見えます:

@example
.git/objects/55/7db03de997c86a4a028e1ebd3a1ceb225be238
.git/objects/f2/4c74a2e500f5ee1332c86b94199f52b1d1d962
@end example


これは、それぞれ「557db…」および「f24c7…」という名前のオブジェクトに対応します。

必要に応じて、 @samp{git cat-file}
を使用してこれらのオブジェクトを確認できますが、オブジェクトのファイル名ではなく、オブジェクト名を使用する必要があります:

@example
$ git cat-file -t 557db03de997c86a4a028e1ebd3a1ceb225be238
@end example


ここで、 @samp{-t} は @emph{git cat-file} に、オブジェクトの「タイプ」が何であるかを通知させます。
Gitは、「blob」(ブロブ)オブジェクト(つまり、通常のファイル)があることを通知し、あなたは以下のコマンドで内容を表示できます。

@example
$ git cat-file blob 557db03
@end example


"Hello World" が出力されます。オブジェクト @samp{557db03} は、ファイル @samp{hello} の内容そのものです。

@quotation

@strong{Note}

そのオブジェクトをファイル @samp{hello}
自体と混同しないでください。オブジェクトは文字通りファイルの特定の「内容」(contents)であり、後でファイル @samp{hello}
の内容を変更しても、先ほど見たオブジェクトは変更されません。オブジェクトは不変(immutable)です。
@end quotation

@quotation

@strong{Note}

2番目の例は、ほとんどの場所でオブジェクト名を最初の数桁の16進数にのみに省略できることを示しています。
@end quotation

とにかく、前述したように、通常、オブジェクト自体を実際に確認することはありません。40文字の長い16進名を入力することは、通常は行いたくないことです。上記の余談は、「git
update-index」が魔法のようなことをし、実際にファイルの内容をGitオブジェクトデータベースに保存したことを現しています。

インデックスを更新すると、他のことも行います。それは、 @samp{.git/index}
ファイルの作成です。これは、現在の作業ツリーを説明するインデックスであり、とても注意を払う必要があります。
繰り返しになりますが、通常はインデックスファイル自体について心配することはありませんが、ここまでファイルを実際にはGitに「チェックイン」しておらず、Gitに「伝えただけ」であることに注意する必要があります。

しなしながら、Gitはそれらについて知っているため、最も基本的なGitコマンドのいくつかを使用して、ファイルを操作したり、ファイルのステータスを確認したりできます。

特に、この時点ではこの2つのファイルをGitにチェックインしないでください。私達は、最初に、@samp{hello} に別の行を追加することから始めます:

@example
$ echo "It's a new day for git" >>hello
@end example


これで、Gitに以前の @samp{hello} の状態について伝えたので、 @emph{git diff-files}
コマンドを使用して、古いインデックスと比較してツリーで何が変更されたかをGitに尋ねることができます:

@example
$ git diff-files
@end example


おっと、これはあまり読みやすくないですね。これは @emph{diff}
の独自の内部バージョンを吐き出すだけですが、その内部バージョンは、「hello」が変更されたこと、および古いオブジェクトの内容が別のものに置き換えられたことに気付いたことを示しています。

読みやすくするために、 @samp{-p} フラグを使用して、 @emph{git diff-files} にパッチとして差分を出力するように指示できます:

@example
$ git diff-files -p
diff --git a/hello b/hello
index 557db03..263414f 100644
--- a/hello
+++ b/hello
@@@@ -1 +1,2 @@@@
 Hello World
+It's a new day for git
@end example


つまり、これは @samp{hello} に別の行を追加することによって引き起された変更の diff です。

言い換えると、 @emph{git diff-files}
は、常に、インデックスに記録されているものと、現在作業ツリーにあるものとの違いを示しています。これはとても便利です。

@samp{git diff-files -p} の一般的な省略形は、 @samp{git diff} と書くことで、左記と同一の事を行います。

@example
$ git diff
diff --git a/hello b/hello
index 557db03..263414f 100644
--- a/hello
+++ b/hello
@@@@ -1 +1,2 @@@@
 Hello World
+It's a new day for git
@end example


@noindent

@chapheading Committing Git state

次に、私達はGitの次の段階に進みます。これは、Gitが知っているファイルをインデックスより取得し、それらを実際のツリーとしてコミットすることです。これは次の2つのフェーズで行います。「ツリー」オブジェクトの作成し、そして、ツリーが何であるかについての説明と、私たちがどのようにしてその状態に到達したかについての情報とともに、その「ツリー」オブジェクトを「コミット」オブジェクトとしてコミットします。

ツリーオブジェクトの作成は至極簡単で、 @samp{git write-tree} を使用します。オプションやその他の入力はありません。 @samp{git
write-tree}
は現在のインデックスの状態を取得し、そのインデックス全体を記述するオブジェクトを書き込みます。つまり、現在、すべての異なるファイル名をそれらのコンテンツ(およびそれらのアクセス許可)と結び付けており、Gitの「ディレクトリ」オブジェクトに相当するものを作成します:

@example
$ git write-tree
@end example


これにより、結果のツリーの名前が出力されます。この場合(私が説明したとおり正確に実行した場合)、以下のようになっているべきです

@example
8988da15d077d4829fc51d8544c097def6644dbb
@end example


これは、別のワケワカメなオブジェクト名です。繰り返しになりますが、あなたは必要に応じて、 @samp{git cat-file -t 8988d...}
を使用して、今回のオブジェクトが「ブロブ」オブジェクトではなく「ツリー」オブジェクトであることを確認できます( @samp{git cat-file}
を使用して、生のオブジェクトの内容を実際に出力することもできますが、主にごちゃごちゃしたバイナリが見れるだけであまり面白くありません)。

しかしながら、通常は @samp{git commit-tree} コマンドを使用してツリーをコミットオブジェクトにコミットするため、通常は @samp{git
write-tree} を単独で使用することはありません。 実際のところ @samp{git write-tree} を単独で使用するのではなく、その結果を
@samp{git commit-tree} へ引数として渡す方が簡単です。

@emph{git commit-tree} は通常、いくつかの引数を取ります。 @samp{git commit-tree}
はコミットの「親」が何であるかを知りたいのですが、これはこの新しいリポジトリでの最初のコミットであり、親がないため、ツリーのオブジェクト名を渡すだけで済みます。ただし、
@samp{git commit-tree}
は、標準入力からコミットメッセージを取得することも必要です。そしてコミットの結果のオブジェクト名を標準出力に書き出します。

ここで、 @samp{HEAD} が指す @samp{.git/refs/heads/master}
ファイルを作成します。このファイルには、masterブランチのツリーのてっぺん(top-of-tree)への参照が含まれているはずです。これはまさに「git
commit-tree」が吐き出すものなので、一連の単純なシェルコマンドでこれをすべて行うことができます:

@example
$ tree=$(git write-tree)
$ commit=$(echo 'Initial commit' | git commit-tree $tree)
$ git update-ref HEAD $commit
@end example


この場合に限り、他の何にも関係のないまったく新しいコミットが作成されます。
通常、これはプロジェクトに対して「1回だけ」行います。このコミットはこの後のすべてのコミットの親になります。

繰り返しますが、通常、これを実際に手作業で行うことはありません。 これらすべてを実行する @samp{git commit} という便利なスクリプトがあります。
したがって、あなたは代わりに @samp{git commit} と記述すれば、上記の魔法のスクリプトが実行されます。

@noindent

@chapheading Making a change

以前、ファイル @samp{hello} で @samp{git update-index} を実行し、その後 @samp{hello} を変更して、 @samp{hello}
の新しい状態を、インデックスファイルに保存した状態と比較したことを覚えていますか？

さらに、 私が @samp{git write-tree}
は「インデックス」ファイルの内容をツリーに書き込むと言ったことを思い出してください。したがって、コミットしたのは、実際にはファイル @samp{hello}
の「元の内容」であり、新しい内容ではありません。これは、インデックスの状態と作業ツリーの状態の違い、および私達が何かをコミットした場合でもそれらが一致する必要がない事を示すために意図的に行いました。

以前と同様に、git-tutorialプロジェクトで @samp{git diff-files -p}
を実行した場合でも、前回と同一の差異が見られます。つまり、何かをコミットすることによってインデックスファイルが変更されていないということです。ただし、私達は何かをコミットしたので、新しいコマンド
@samp{git diff-index} の使用方法を学ぶこともできます:

インデックスファイルと作業ツリーの違いを示した @samp{git diff-files} とは異なり、 @samp{gitdiff-index}
はコミットされたツリーと、インデックスファイルまたは作業ツリーとの違いを示します。言い換えると、 @samp{git diff-index}
はツリーとの差分することを望んでおり、コミットする前は、そもそも差分するモノがなかったため、差分を行うことができませんでした。

しかし、今や私達は以下のようにできます

@example
$ git diff-index -p HEAD
@end example


(ここで、@samp{-p} は @samp{git diff-files} のと同じ意味です。)
同一の差異が表示されますが、理由はまったく異なります。これは、作業ツリーを、インデックスファイルではなく、作成したツリーと比較しています。たまたまこれら2つが明らかに同じであるため、私達は同じ結果を得たのです。

繰り返しになりますが、これは一般的な操作であるため、以下のように短縮することもできます

@example
$ git diff HEAD
@end example


これで、結局は上記のようなことをやってくれます。

つまり、 @samp{git diff-index｀ は通常、ツリーを作業ツリーと比較しますが、 `--cached}
フラグを指定すると、代わりにインデックスキャッシュの内容と比較し、現在の作業ツリーの状態を完全に無視するように指示します。我々はインデックスファイルをHEADに書き込んだばかりなので、
@samp{git diff-index --cached -p HEAD} を実行すると、空の差分セットを返すはずで、これは正に指示したとおりの結果です。

@quotation

@strong{Note}

@samp{git diff-index}
は実際には「常に」その比較にインデックスを使用するため、ツリーを作業ツリーと比較すると言ったことは厳密には正確ではありません。特に、比較するファイルのリスト(「メタデータ」(meta-data))は、
@samp{--cached} フラグが使用されているかどうかに関係なく、常にインデックスファイルから取得されます。 @samp{--cached}
フラグは、実際には、比較されるファイルの「内容」が作業ツリーからのものであるか否かを決定するだけです。

これを理解するのは難しいことでは無く、すぐにあなたは、Gitが明示的に通知されていないファイルを知らない(または気にしない)ことに気付きます。Gitは比較するファイルを「探す」ことは決してありません。ファイルが何であるかを教えて貰えることを期待しており、それがインデックスの目的なのです。
@end quotation

ただし、私達の次のステップは、私達の行った変更をコミットすることです。繰り返しますが、何が起こっているのかを理解するために、「作業ツリーの内容」と「インデックスファイル」と「コミットされたツリー」の違いに注意してください。私達がコミットしたい作業ツリーに変更があり、私達は常にインデックスファイルを処理する必要があるため、したがって、私達が最初に行う必要があるのは、インデックスキャッシュを更新することです:

@example
$ git update-index hello
@end example


(注意: Gitはファイルについてすでに知っていたので、私達は今回は @samp{--add} フラグを必要としなかったことに注意してください)。

注意: ここで、個別の @samp{git diff-@{asterisk@}} バージョンには何が起こるでしょうか。我々がインデックス内の @samp{hello}
を更新した後、 @samp{git diff-files -p} は、違いを示さなくなりましたが、 @samp{git diff-index -p HEAD}
は、現在の状態がコミットした状態とは異なることを示しています。 実際、 @samp{git diff-index} は、 @samp{--cached}
フラグを使用するかどうかに関係なく同一の違いを示します。これは、インデックスは作業ツリーと一貫性があるためです。

これで、我々はインデックス内の @samp{hello}
を更新したので、我々は新しいバージョンをコミットできます。我々はもう一度手動でツリーを作成し、ツリーをコミットすることでそれを行うことができます(今回は、
@samp{-p HEAD}
フラグを使用して、HEADが新しいコミットの「親」であり、これが最初のコミットではなくなったことをコミットに通知する必要があります)。しかし、あなたはすでに一度この手作業を経験済みですので、今回は役立つスクリプトを使用してみましょう:

@example
$ git commit
@end example


これにより、あなたがコミットメッセージを書き込むためのエディタが起動し、あなたがさっきやった事についてちょっぴり教えてくれます。

あなたが必要なメッセージを書き込むと、 @samp{#}
で始まるすべての行が削除され、残りはこの変更のコミットメッセージとして使用されます。あなたがこの時点で結局何もコミットしたくないと判断した場合(あなたは引き続き編集してインデックスを更新できます)、あなたは空のメッセージを残すことができます。それ以外の場合、
@samp{git commit} は変更をコミットします。

これで、最初の実際のGitコミットが完了しました。 @samp{git commit}
が実際に何をするのかを知りたい場合は、お気軽に調査してください。役立つ(？)コミットメッセージヘッダーを生成するための非常に単純なシェルスクリプトがいくつかあり、そして実際にコミット自体を行ういくつかのワンライナーがあります(@samp{git
commit})。

@noindent

@chapheading Inspecting Changes

変更を作成することは便利ですが、後で何が変更されたかを知ることができればさらに便利です。このための最も便利なコマンドは、diffファミリーのもう1つ、つまり
@samp{git diff-tree} です。

@samp{git diff-tree}
には任意の2つのツリーを指定でき、それらの間の違いがわかります。けれども、おそらくもっと一般的には、あなたはコミットオブジェクトを1つだけ与えることができ、そうすると、そのコミット自体の親を把握し、違いを直接表示します。したがって、すでに数回見たのと同一のdiffを取得するために、以下のようにすることができます

@example
$ git diff-tree -p HEAD
@end example


(繰り返しになりますが、 @samp{-p} は人間が読めるパッチとして違いを表示することを意味します)、(@samp{HEAD}
が指す)最後のコミットが実際に何を変更したかを表示します。

@quotation

@strong{Note}

以下は、さまざまな @samp{diff-@{asterisk@}} コマンドが物事を比較する方法を表す、Jon Loeliger によるアスキーアートです。

@example
            diff-tree
             +----+
             |    |
             |    |
             V    V
          +-----------+
          | Object DB |
          |  Backing  |
          |   Store   |
          +-----------+
            ^    ^
            |    |
            |    |  diff-index --cached
            |    |
diff-index  |    V
            |  +-----------+
            |  |   Index   |
            |  |  "cache"  |
            |  +-----------+
            |    ^
            |    |
            |    |  diff-files
            |    |
            V    V
          +-----------+
          |  Working  |
          | Directory |
          +-----------+
@end example
@end quotation

さらに興味深いことに、 @samp{git diff-tree} に @samp{--pretty}
フラグを指定することもできます。これにより、コミットメッセージと作者とコミットの日付も表示され、一連のdiff全体を表示するように指示します。または、「黙って」(silent)と指示して、差分をまったく表示せずに実際のコミットメッセージを表示することもできます。

実際には、 (リビジョンのリストを生成する) @samp{git rev-list} プログラムと一緒に使うことで、 @samp{git diff-tree}
は、正に変更の源泉と化します。 @samp{git rev-list} の出力を @samp{git diff-tree --stdin}
にパイプする簡単なスクリプトを使用して、 @samp{git log} や @samp{git log -p} などをエミュレートできます。これは正に初期バージョンの
@samp{git log} が実装された方法でした。

@noindent

@chapheading Tagging a version

Gitには、「軽い」(light)タグと「注釈付きタグ」(annotated tag)の2種類のタグがあります。

「軽い」タグは、 ヘッドと呼ぶ代わりに @samp{.git/refs/tags/}
サブディレクトリに配置することを除いて、技術的にはブランチ以上のものではありません。したがって、最も単純な形式のタグは以下のようになります

@example
$ git tag my-first-tag
@end example


これは、現在の HEAD を @samp{.git/refs/tags/my-first-tag}
ファイルに書き込むだけです。その後は、その特定の状態にこのシンボル名を使用できます。たとえば、以下のことができます

@example
$ git diff my-first-tag
@end example


あなたの現在の状態をそのタグとdiffします。この時点では明らかに空のdiffになりますが、あなたが開発とコミットを続ければ、タグを「アンカーポイント」として使用して、あなたがタグを付けてから何が変更されたかを確認できます。

「注釈付きタグ」(annotated
tag)は現実には実際のGitオブジェクトです。タグ付けする状態へのポインタだけでなく、小さなタグ名とメッセージ、およびオプションで「はい、あなたは実際にそのタグを作成した」というPGP署名もあります。これらの注釈付きタグは、
@samp{git tag}  に対して @samp{-a} または @samp{-s} フラグを使用して作成します:

@example
$ git tag -s <tagname>
@end example


これは現在の`HEAD`に署名します(しかし、あなたはタグ付けするものを指定する別の引数を指定することもできます。たとえば、 @samp{git tag
<tagname> mybranch} を使用して現在の @samp{mybranch} ポイントにタグを付けることができます)。

あなたは、通常は、メジャーリリースなどの署名付きタグ付けのみを行いますが、軽量タグ(light-weight
tags)は、あなたがマーキングしたい時に便利です。つまり、特定のポイントを覚えておきたいと思ったときはいつでも、そのポイントのプライベートタグを作成するだけで、その時点の状態の適切なシンボル名が得られます。

@noindent

@chapheading Copying repositories

Gitリポジトリは通常、完全に自給自足で再配置可能です。たとえば、CVSとは異なり、「リポジトリ」と「作業ツリー」という別個の概念はありません。Gitリポジトリは通常、作業ツリーであり、ローカルのGit情報は
@samp{.git} サブディレクトリに隠されています。他には何もありません。あなたが見たそのままです。

@quotation

@strong{Note}

あなたは、追跡中のディレクトリからGitの内部情報を分割するようにGitに指示できますが、我々は今のところはそれを無視します。なぜならそれは、通常のプロジェクトの仕組みでなく、本当に特別な用途のためだけのものだからです。よって、「Git情報は、それが記述する作業ツリーに常に直接関連付けられている」という概念は技術的には100%正確ではない可能性がありますが、通常はそれで通ります。
@end quotation

これには2つの意味があります:

@itemize 

@item
あなたが、作成したチュートリアルリポジトリに飽きてしまった場合(または間違えて最初からやり直したい場合)は、単純に以下のようにするだけです

@example
$ rm -rf git-tutorial
@end example


そしてそれはなくなります。外部リポジトリはありませんし、あなたが作成したプロジェクト以外に履歴はありません。

@item
あなたがGitリポジトリを移動または複製する場合は、あなたはそうすることができます。 @samp{git clone}
コマンドがありますが、リポジトリ(と、それに伴うすべての完全な履歴とともに)のコピーを作成するだけの場合は、通常の @samp{cp -a
git-tutorial new-git-tutorial} を使用して作成できます。

注意:
Gitリポジトリを移動またはコピーした場合、Gitインデックスファイル(さまざまな情報、特に関連するファイルの「統計」情報の一部をキャッシュする)を更新する必要がある可能性があることに注意してください。したがって、
@samp{cp -a} を実行して新しいコピーを作成した後、あなたは以下を実行する必要があります

@example
$ git update-index --refresh
@end example


これは、新しいリポジトリで、インデックスファイルが最新であることを確認します。
@end itemize

注意:
2番目のポイントは、PC間でも当てはまることに注意してください。scpやrsyncやwget等々、通常のコピーメカニズムを使用してリモートGitリポジトリを複製できます。

リモートリポジトリをコピーするときは、あなたは、これを行うときに少なくともインデックスキャッシュを更新する必要があります。特に、他の人のリポジトリでは、インデックスキャッシュが既知の状態(あなたには、彼らが何をしたのか、まだチェックインしていないのかわかりません)にあることを確認する必要があるため、通常は
@samp{git update-index} の前に以下のようにします。

@example
$ git read-tree --reset HEAD
$ git update-index --refresh
@end example


これにより、@samp{HEAD} が指すツリーからインデックス全体が再構築されます。それはインデックスの内容を @samp{HEAD} にリセットし、 @samp{git
update-index}
がすべてのインデックスエントリをチェックアウトされたファイルと一致させるようにします。元のリポジトリの作業ツリーにコミットされていない変更があった場合、
@samp{git update-index --refresh} はそれらに気づき、更新する必要があることをあなたに通知します。

上記は以下のように簡単に書くこともできます

@example
$ git reset
@end example


実際、一般的なGitコマンドの組み合わせの多くは、 @samp{git xyz}
インターフェースを使用してスクリプト化できます。あなたは、さまざまなgitスクリプトが何をするかを見るだけで、物事を学ぶことができます。たとえば、
@samp{git reset} は、以前は上記2行を記述したものでした。ただし、 @samp{git status} や @samp{git commit}
などのいくつかは、基本的なGitコマンドを中心とした少し複雑なスクリプトです。

多くの(ほとんどの？)パブリックリモートリポジトリには、チェックアウトされたファイルやインデックスファイルすら含まれず、実際のコアGitファイルのみが含まれます。このようなリポジトリには通常、
@samp{.git} サブディレクトリすらなく、すべてのGitファイルが直接リポジトリにあります。

このような「生の」Gitリポジトリのあなた独自のローカルな活きたコピー(local live
copy)を作成するには、最初にプロジェクト用の独自のサブディレクトリを作成し、次に生のリポジトリの内容を @samp{.git}
ディレクトリにコピーします。たとえば、Gitリポジトリのあなた独自のコピーを作成するには、以下のようにします

@example
$ mkdir my-git
$ cd my-git
$ rsync -rL rsync://rsync.kernel.org/pub/scm/git/git.git/ .git
@end example


これに、以下が続きます

@example
$ git read-tree HEAD
@end example


インデックスにデータを入力します。ただし、これでインデックスにデータが入力され、すべてのGit内部ファイルが作成されましたが、実際に作業するツリーファイルがないことに気付くでしょう。
それらを取得するには、以下のようにしてそれらをチェックアウトします

@example
$ git checkout-index -u -a
@end example


ここで、 @samp{-u} フラグは、(後で更新する必要がないように)チェックアウトでインデックスを最新の状態に保つことを意味し、 @samp{-a}
フラグは「すべてのファイルをチェックアウトする」ことを意味します(古いコピーまたはチェックアウトされたツリーの古いバージョンがある場合は、最初に
@samp{-f} フラグを追加して、 @samp{git checkout-index} に古いファイルの上書きを「強制」するように指示する必要がある事があります)。

繰り返しますが、これはすべて以下のように簡略化できます

@example
$ git clone git://git.kernel.org/pub/scm/git/git.git/ my-git
$ cd my-git
$ git checkout
@end example


これは正に上記のすべてを行います。

これで、あなたは、他の誰か誰か(またはあなた自身の)のリモートリポジトリをコピーし、チェックアウトすることに成功しました。

@noindent

@chapheading Creating a new branch

Gitのブランチは、実際には @samp{.git/refs/}
サブディレクトリ内からGitオブジェクトデータベースへのポインタにすぎません。すでに説明したように、@samp{HEAD}
ブランチはこれらのオブジェクトポインタの1つへのシンボリックリンクにすぎません。

あなたはプロジェクト履歴の任意のポイントを選択し、そのオブジェクトのSHA-1名を @samp{.git/refs/heads/}
の下のファイルに書き込むだけで、いつでも新しいブランチを作成できます。任意のファイル名(実際にはサブディレクトリ名)を使用できますが、慣例では、「通常の」ブランチ(normal
branch)は「master」と呼ばれます。 ただし、これは単なる慣例であり、強制されるものではありません。

これを例として示すために、以前使用したgit-tutorialリポジトリに戻り、その中にブランチを作成しましょう。これを行うには、あなたは新しいブランチをチェックアウトしたいと言うだけです:

@example
$ git switch -c mybranch
@end example


現在の @samp{HEAD} 位置に基づいて新しいブランチを作成し、それに切り替えます。

@quotation

@strong{Note}

あなたが、履歴の現在のHEAD以外の時点で新しいブランチを開始することを決定した場合は、 @samp{git switch}
にチェックアウトの起点を指定するだけで開始できます。 言い換えれば、以前に作ったタグまたはブランチがある場合は以下のようにします。

@example
$ git switch -c mybranch earlier-commit
@end example


そうすると、これは以前のコミットにて新しいブランチ @samp{mybranch} を作成し、その時の状態をチェックアウトします。
@end quotation

以下のように実行することで、あなたはいつでも元の @samp{master} ブランチに戻ることができます

@example
$ git switch master
@end example


(または、その他のブランチ名を指定します。) そして、あなたがたまたまどのブランチにいるのかを忘れた場合は、単純に以下のようにします。

@example
$ cat .git/HEAD
@end example


とすると、それが指している場所を教えてくれます。あなたが持っているブランチのリストを取得するには、以下のようにします。

@example
$ git branch
@end example


これは、以前は、 @samp{ls .git/refs/heads}
を囲む単純なスクリプトにすぎませんでした。それはそれとして、これは、現在使用しているブランチの前にアスタリスクが表示されます。

実際にチェックアウトして切り替えることなく、新しいブランチを作成したい場合があります。その場合は、以下のコマンドを使用してください

@example
$ git branch <branchname> [startingpoint]
@end example


これは単にブランチを作成しますが、それ以上は何もしません。 その後 — そのブランチで実際に開発することを決定したら — 引数としてブランチ名を使用して、通常の `git switch `を使用してそのブランチに切り替えることができます。

@noindent

@chapheading Merging two branches

ブランチを持つことのアイデアの1つは、ブランチでいくつかの(おそらく実験的な)作業を行い、最終的にそれをメインブランチにマージすることです。したがって、元の
@samp{master} ブランチと同じである、上記の @samp{mybranch}
を作成したと仮定して、我々がそのブランチにいることを確認し、そこでいくつかの作業を行いましょう。

@example
$ git switch mybranch
$ echo "Work, work, work" >>hello
$ git commit -m "Some work." -i hello
@end example


ここでは、 @samp{hello} に別の行を追加し、 @samp{-i}
フラグ(コミット時にこれまでにインデックスファイルに対して行ったことに加えて、そのファイルを「含める」ようにGitに指示)を使用してファイル名を
@samp{git commit} に直接指定する、 @samp{git update-index hello} と @samp{git commit}
の両方を実行するための省略形を使用しました。 @samp{-m} フラグは、コマンドラインからコミットログメッセージを指定するためのものです。

ここで、もう少し面白くするために、他の誰かが元のブランチで何らかの作業を行っていると仮定し、マスターブランチに戻って同じファイルを別の方法で編集することにより、それをシミュレートします:

@example
$ git switch master
@end example


ここで、 @samp{hello} の内容を確認して、あなたが @samp{mybranch} で行った作業が含まれていないことに注目してください。その作業は
@samp{master} ブランチではまったく行われていないためです。確認後、以下のようにします

@example
$ echo "Play, play, play" >>hello
$ echo "Lots of fun" >>example
$ git commit -m "Some fun." -i hello example
@end example


masterブランチもいい感じになってきました。

いまや、2つのブランチがあり、あなたは完了した作業をマージすることにしました。
その前に、何が起こっているのかを確認するのに役立つクールなグラフィカルツールを紹介しましょう:

@example
$ gitk --all
@end example


あなたのブランチ(これが @samp{--all} の意味です。通常は、現在の @samp{HEAD}
が表示されます)とその履歴の両方をグラフィカルに表示します。また、それらがどのようにして共通のソースから得られたのかを正確に確認することもできます。

とにかく、 @emph{gitk} を終了( @samp{^Q} または Fileメニュー)し、 @samp{mybranch} ブランチで行った作業を @samp{master}
ブランチ（現在は @samp{HEAD} でもあります)にマージすることにします。これを行うために、 @samp{git merge}
と呼ばれる優れたスクリプトがあり、それは、あなたがどのブランチを解決したいのか、そのマージが何なのかを知りたがっています:

@example
$ git merge -m "Merge work in mybranch" mybranch
@end example


マージを自動的に解決できる場合は、最初の引数がコミットメッセージとして使用されます。

さて、今回は、マージを手動で修正する必要がある状況を意図的に作成したので、Gitは可能な限り多くのことを自動的に実行(この場合は、 @samp{mybranch}
ブランチの、差異がない @samp{example} ファイルをマージするだけ)した上で、以下のように言います:

@example
        Auto-merging hello
        CONFLICT (content): Merge conflict in hello
        Automatic merge failed; fix conflicts and then commit the result.
@end example


これは、「自動マージ」(Automatic merge)を実行したら @samp{hello} の競合が原因で失敗したと表示しています。

でも心配無用。これにより、あなたがCVSを使ったことがあるなら既に慣れている形式で @samp{hello} に競合を残したので、エディタで @samp{hello}
を開いて、なんとかして修正しましょう。私は `hello`に4行すべてが含まれるようにすることを提案することにします:

@example
Hello World
It's a new day for git
Play, play, play
Work, work, work
@end example


手動マージに満足したら、以下の手順を実行します。

@example
$ git commit -i hello
@end example


これは、現在マージをコミットしていることを非常に大声で警告します(今回は正しい事をしているので、警告は気にしないでください)。また、あなたは @samp{git
merge} 遊園地でのあなたの冒険についての小さなマージメッセージを書くことができます。

完了したら、 @samp{gitk --all} を起動して、履歴がどのように表示されるかをグラフィカルに確認します。 @samp{mybranch}
はまだ存在していることに注意してください。これに切り替えて、必要に応じて作業を続けることができます。 @samp{mybranch}
ブランチにはそのマージが含まれませんが、次回 @samp{master}
ブランチにてそれをマージするときに、Gitはそれがどのようにマージされたかを知っているため、再度マージを行う必要はありません。

X-Window環境で常に作業するわけではない場合、もう1つの便利ツールは、 @samp{git show-branch} です。

@example
$ git show-branch --topo-order --more=1 master mybranch
* [master] Merge work in mybranch
 ! [mybranch] Some work.
--
-  [master] Merge work in mybranch
*+ [mybranch] Some work.
*  [master^] Some fun.
@end example


最初の2行は、ツリーの最上位コミットのタイトル付の2つのブランチを示しています。あなたは現在(アスタリスク @samp{*} 文字に注意)、 @samp{master}
ブランチを使用しており、その後の出力行は、 @samp{master} ブランチに含まれるコミットと、 @samp{mybranch}
ブランチの行の2桁目(@samp{+})を表示するために使用されます。3つのコミットがタイトルとともに表示されます。それらはすべて1桁目に空白以外の文字があり(
@samp{*} は現在のブランチでの通常のコミットを示し、@samp{-} はマージコミットです)、これはそれらが現在 @samp{master}
ブランチの一部であることを意味します。 @samp{mybranch}
はmasterブランチからのこれらのコミットを組み込むためにマージされていないため、「Some work」コミットのみが2桁目にプラスの @samp{+}
文字を持っています。コミットログメッセージの前の括弧内の文字列は、コミットに名前を付けるために使用できる短い名前です。上記の例では、 "master"
と "mybranch" がブランチヘッドです。 "master^" は "master"
ブランチヘッドの最初の親です。より複雑なケースを確認したい場合は、 gitrevisions(7) を参照してください。

@quotation

@strong{Note}

@emph{--more=1} オプションがないと、 @emph{[mybranch]} コミット は @emph{master} と @emph{mybranch}
の両方の先端の共通の祖先であるため、 @samp{git show-branch} は '[master^] コミットを出力しません。詳細については、
git-show-branch(1) を参照してください。
@end quotation

@quotation

@strong{Note}

マージ後に @samp{master} ブランチにさらにコミットがあった場合、@samp{git show-branch}
はデフォルトではマージコミット自体を表示しません。この場合、マージコミットを表示するには、 @samp{--sparse} オプションを指定する必要があります。
@end quotation

さて、あなたが @samp{mybranch} ですべての作業を行ったとしましょう。そして、あなたの努力の成果がついに @samp{master}
ブランチに統合されました。あなたは `mybranch`に戻り、 @emph{git merge}
を実行して、「アップストリームの変更」をあなたのブランチに戻しましょう。

@example
$ git switch mybranch
$ git merge -m "Merge upstream changes." master
@end example


これは以下のようなものを出力します(実際のコミットオブジェクト名は異なります)

@example
Updating from ae3a2da... to a80b4aa....
Fast-forward (no commit created; -m option ignored)
 example | 1 +
 hello   | 1 +
 2 files changed, 2 insertions(+)
@end example


あなたのブランチにはすでに @samp{master}
ブランチにマージされたもの以外のものが含まれていなかったため、マージ操作は実際にはマージを実行しませんでした。代わりに、あなたのブランチのツリーのトップを
@samp{master} ブランチのツリーのトップに更新しました。これはしばしば「早送り」(fast-forward)マージと呼ばれます。

あなたは再び @samp{gitk --all} を実行して、コミットの祖先がどのように見えるかを確認するか、 @samp{show-branch} を実行して表示します。

@example
$ git show-branch master mybranch
! [master] Merge work in mybranch
 * [mybranch] Merge work in mybranch
--
-- [master] Merge work in mybranch
@end example


@noindent

@chapheading Merging external work

通常、自分のブランチとマージするよりも、他の誰かのとマージする方がはるかに一般的です。そして、Gitを使用すると、これも非常に簡単になります。事実、
@samp{git merge} を実行するのとそれほど違いはありません。 実際、リモートマージは、「リモートリポジトリから一時的タグ(temporary
tag)に作業をフェッチする」だけで、その後に @samp{git merge} が続きます。

リモートリポジトリからのフェッチは、ご想像の通り、 @samp{git fetch} によって行われます:

@example
$ git fetch <remote-repository>
@end example


以下の転送方法(transport)のいずれかを使用して、ダウンロード元のリポジトリに名前を付けることができます:

@table @asis

@item  SSH 
@samp{remote.machine:/path/to/repo.git/} または

@samp{ssh://remote.machine/path/to/repo.git/}

この転送方法(transport)はアップロードとダウンロードの両方に使用でき、リモートマシンへの @samp{ssh}
を介したログイン権限が必要です。転送元と転送先が持つヘッドコミットを交換し、オブジェクトの最小組を(限定的に)転送することにより、反対側に欠けているオブジェクトの組を見つけます。これは、リポジトリ間でGitオブジェクトを交換するための最も効率的な方法です。

@item  ローカルディレクトリ 
@samp{/path/to/repo.git/}

この転送方法はSSH転送と同じですが、 @samp{ssh} を介してリモートマシンでもう一方の端を実行する代わりに、 @samp{sh}
を使用してローカルマシンで転送元と転送先で実行します。

@item  Gitネイティブ 
@samp{git://remote.machine/path/to/repo.git/}

この転送方法は、匿名(anonymous)でダウンロードするために設計されました。SSH転送と同様に、ダウンストリーム側にないオブジェクトの組を検出し、最小のオブジェクトの組を(限定的)転送します。

@item  HTTP(S) 
@samp{http://remote.machine/path/to/repo.git/}

http URL や https URL からのダウンローダーは、最初に、 @samp{repo.git/refs/}
ディレクトリの下にある指定のref名を調べて、リモートサイトから最上位のコミットオブジェクト名を獲得し、それから、そのコミットオブジェクトのオブジェクト名を使用して
@samp{repo.git/objects/xx/xxx...}
からダウンロードすることにより、コミットオブジェクトの取得を試みます。次に、そのコミットオブジェクトを読み取り、その親コミットと関連するツリーオブジェクトを見つけます。必要なすべてのオブジェクトを取得するまで、このプロセスを繰り返します。この動作のため、これらは「コミットウォーカー」(commit
walkers)と呼ばれることもあります。

「コミットウォーカー」(commit
walkers)は、Gitネイティブ転送のようにGit対応のスマートサーバーを必要としないため、「バカ転送」(dumb
transports)と呼ばれることもあります。ディレクトリインデックスさえサポートしていないストックHTTPサーバーで十分です。
ただし、バカ転送ダウンローダー(dumb transport downloaders)を支援するには、 @samp{git update-server-info}
を使用してリポジトリを準備する必要があります。
@end table

リモートリポジトリからフェッチしたら、あなたはそれを現在のブランチに「マージ」します。

ただし、「フェッチ」してすぐに「マージ」するのは非常に一般的なことなので、 @samp{git pull} を使えば簡単に実行できます:

@example
$ git pull <remote-repository>
@end example


そして、オプションで、リモート側のブランチ名を2番目の引数として指定します。

@quotation

@strong{Note}

あなたが持ちたいブランチの数のローカルリポジトリを保持し、ブランチ間のマージと同様に @samp{git pull}
でそれらの間のマージを行うことで、ブランチを全く使用しないことも可能です。このアプローチの利点は、チェックアウトされた各々「ブランチ」のファイルの組を保持できることです。複数の開発ラインを同時に調整すると、切り替えが簡単になる場合があります。もちろん、複数の作業ツリーを保持するためにディスク使用量を増やすという代償を払うことにはなりますが、最近のディスク容量は安価です。
@end quotation

あなたは同じリモートリポジトリからしばしばプルする可能性があります。なので略記法として、リモートリポジトリのURLをローカルリポジトリの設定ファイルに以下のように保存できます:

@example
$ git config remote.linus.url http://www.kernel.org/pub/scm/git/git.git/
@end example


そして、完全なURLの代わりに @samp{git pull} で "linus" キーワードを使用します。

例:

@enumerate 

@item
@samp{git pull linus}

@item
@samp{git pull linus tag v0.99.1}
@end enumerate

上記は以下と同じです:

@enumerate 

@item
@samp{git pull http://www.kernel.org/pub/scm/git/git.git/ HEAD}

@item
@samp{git pull http://www.kernel.org/pub/scm/git/git.git/ tag v0.99.1}
@end enumerate

@noindent

@chapheading How does the merge work?

このチュートリアルでは、動作しない磁器コマンドに対処するために配管コマンドがどのように機能するかを示していますが、これまでのところ、マージが実際にどのように機能するかについては説明していません。あなたがこのチュートリアルを初めて読む時は、「Publishing
your work」セクションにスキップして、後でここに戻ってくることをお勧めします。

上記を了承したとして、続きをやります。例を示すために、 @samp{hello} ファイルと @samp{example}
ファイルを使用した以前のリポジトリに戻り、マージ前の状態に戻しましょう:

@example
$ git show-branch --more=2 master mybranch
! [master] Merge work in mybranch
 * [mybranch] Merge work in mybranch
--
-- [master] Merge work in mybranch
+* [master^2] Some work.
+* [master^] Some fun.
@end example


@samp{git merge} を実行する前は、 @samp{master} ヘッドが "Some fun." コミット、 @samp{mybranch}  ヘッドが "Some
work." コミットだったことを思い出してください。

@example
$ git switch -C mybranch master^2
$ git switch master
$ git reset --hard master^
@end example


巻き戻し後、コミット構造は以下のようになります:

@example
$ git show-branch
* [master] Some fun.
 ! [mybranch] Some work.
--
*  [master] Some fun.
 + [mybranch] Some work.
*+ [master^] second commit.
@end example


これで、手動でマージを試す準備ができました。

@samp{git merge} コマンドは、2つのブランチをマージするときに、3方向マージアルゴリズムを使用します。
まず、それらの間の共通の祖先を見つけます。使用するコマンドは @samp{git merge-base} です:

@example
$ mb=$(git merge-base HEAD mybranch)
@end example


このコマンドは、共通の祖先のコミットオブジェクト名を標準出力に書き込むため、我々は次のステップで使用するため、その出力を変数にキャプチャしました。ちなみに、今回は、共通の祖先コミットは「second
commit.」コミットです。あなたはそれを以下のように言うことができます:

@example
$ git name-rev --name-only --tags $mb
my-first-tag
@end example


共通の祖先コミットを見つけた後の、2番目のステップは以下のとおりです:

@example
$ git read-tree -m -u $mb HEAD mybranch
@end example


これは、すでに見たのと同じ @samp{git read-tree} コマンドですが、前の例とは異なり、3つのツリーが必要です。
これにより、各ツリーの内容がインデックスファイルの異なる「ステージ」に読み込まれます(最初のツリーはステージ1に、2番目はステージ2に、等)。3つのツリーを3つのステージに読み取った後、3つのステージで同じパスがある場合はステージ0に「折りたたまれます」(collapsed)。また、3つのステージのうちの2つで同じパスは、ステージ0に折りたたまれ、ステージ1と異なるステージ2またはステージ3のいずれかからSHA-1を取得します(つまり、共通の祖先から片側だけが変更されます)。

「折りたたみ」(collapsing)操作の後、3つのツリーで異なるパスはゼロ以外のステージに残されます。この時点で、以下のコマンドを使用してインデックスファイルを調査できます:

@example
$ git ls-files --stage
100644 7f8b141b65fdcee47321e399a2598a235a032422 0       example
100644 557db03de997c86a4a028e1ebd3a1ceb225be238 1       hello
100644 ba42a2a96e3027f3333e13ede4ccf4498c3ae942 2       hello
100644 cc44c73eb783565da5831b4d820c962954019b69 3       hello
@end example


私達の2つのファイルのみの例では、変更されていないファイルがなかったため、 @samp{example} のみが折りたたまれました。
しかし、実際の大規模なプロジェクトでは、1回のコミットで変更されるファイルの数が少ない場合、この「折りたたみ」はほとんどのパスをかなり迅速にマージする傾向があり、ゼロ以外のステージでの実際の変更はほんの一握りになります。

ゼロ以外のステージのみを確認するには、 @samp{--unmerged} フラグを使用します:

@example
$ git ls-files --unmerged
100644 557db03de997c86a4a028e1ebd3a1ceb225be238 1       hello
100644 ba42a2a96e3027f3333e13ede4ccf4498c3ae942 2       hello
100644 cc44c73eb783565da5831b4d820c962954019b69 3       hello
@end example


マージの次のステップは、3方向マージを使用して、これら3つのバージョンのファイルをマージすることです。これは、 @samp{git merge-index}
コマンドの引数の1つとして @samp{git merge-one-file} コマンドを指定することによって行われます:

@example
$ git merge-index git-merge-one-file hello
Auto-merging hello
ERROR: Merge conflict in hello
fatal: merge program failed
@end example


@samp{git merge-one-file}
スクリプトは、これら3つのバージョンを記述するためのパラメーターを使用して呼び出され、マージ結果を作業ツリーに残す役割を果たします。
これはかなり単純なシェルスクリプトであり、最終的にはRCSスイートから @samp{merge}
プログラムを呼び出して、ファイルレベルの3方向マージを実行します。今回は、 @samp{merge}
は競合を検出し、競合マークのあるマージ結果が作業ツリーに残ります。これは、この時点で @samp{ls-files --stage}
を再度実行すると確認できます:

@example
$ git ls-files --stage
100644 7f8b141b65fdcee47321e399a2598a235a032422 0       example
100644 557db03de997c86a4a028e1ebd3a1ceb225be238 1       hello
100644 ba42a2a96e3027f3333e13ede4ccf4498c3ae942 2       hello
100644 cc44c73eb783565da5831b4d820c962954019b69 3       hello
@end example


これは、 @samp{git merge} が制御を返した後のインデックスファイルと作業ファイルの状態であり、競合するマージを解決できるようにします。 パス
@samp{hello} はまだマージされておらず、この時点で @samp{git diff}
で表示されるのは、ステージ2(つまり、あなたのバージョン)との違いであることに注意してください。

@noindent

@chapheading Publishing your work

そういうわけで、私達はリモートリポジトリから他の人の作業を使用することはできますが、他の人がリポジトリからプルできるようにリポジトリを作成するには、あなたはどうすればよいのでしょうか？

あなたのプライマリリポジトリが @samp{.git}
サブディレクトリとしてその下にぶら下がっているあなたの作業ツリーで実際の作業を行っています。あなたはそのリポジトリにリモートでアクセスできるようにして、そこからプルするように人々に依頼することも可能ですが、実際には、それは通常の方法ではありません。推奨される方法は、パブリックリポジトリを用意し、他の人がアクセスできるようにすることです。あなたのプライマリ作業ツリーに加えた変更がよい状態になったら、そこからパブリックリポジトリを更新します。これはしばしば「プッシュ」(pushing)と呼ばれます。

@quotation

@strong{Note}

このパブリックリポジトリはさらにミラーリングされる可能性があり、それが @samp{kernel.org} のGitリポジトリの管理方法です。
@end quotation

ローカル(プライベート)リポジトリからリモート(パブリック)リポジトリに変更を公開するには、リモートマシンでの書き込み権限が必要です。単一のコマンド
@samp{git-receive-pack} を実行するには、そこにSSHアカウントが必要です。

まず、パブリックリポジトリを格納する空のリポジトリをリモートマシンに作成する必要があります。この空のリポジトリは、後でプッシュすることで、データが設定され、最新の状態に保たれる。明らかに、このリポジトリの作成は1度だけ実行する必要があります。

@quotation

@strong{Note}

@samp{git push} は、ローカルマシンでは @samp{git send-pack} 、リモートマシンでは @samp{git-receive-pack}
というコマンドのペアを使用します。ネットワークを介した2つのコマンドの間の通信は、内部でSSH接続を使用します。
@end quotation

あなたのプライベートリポジトリのGitディレクトリは通常 @samp{.git}
ですが、パブリックリポジトリはプロジェクト名にちなんで名付けられていることがよくあります。つまり @samp{<project>.git} です。 プロジェクト
@samp{my-git} のこのようなパブリックリポジトリを作成しましょう。リモートマシンにログインした後、以下のように空のディレクトリを作成します:

@example
$ mkdir my-git.git
@end example


次に、 @emph{git init} を実行してそのディレクトリをGitリポジトリにしますが、今回はその名前が通常の @samp{.git}
ではないため、我々は少し異なる方法で処理します:

@example
$ GIT_DIR=my-git.git git init
@end example


あなたが選択した転送方法(transport)を介して変更をプルする他のユーザーがこのディレクトリを使用できることを確認してください。 また、あなたは
@samp{$PATH} 上に @emph{git-receive-pack} プログラムがあることを確認する必要があります。

@quotation

@strong{Note}

sshdの多くのインストールでは、あなたがプログラムを直接実行するときに、ログインシェルとしてあなたのシェルが呼び出されません。これが意味するのは、ログインシェルが
@samp{bash} の場合、 @samp{.bashrc} のみが読み取られ、 @samp{.bash_profile} は読み取られないということです。 回避策として、あなたが
@samp{git-receive-pack} プログラムを実行できるように、 @samp{.bashrc} で  @samp{$PATH} を設定していることを確認してください。
@end quotation

@quotation

@strong{Note}

あなたがこのリポジトリを公開してhttp経由でアクセスする場合は、この時点で @samp{mv
my-git.git/hooks/post-update.sample my-git.git/hooks/post-update}
を実行する必要があります。これにより、このリポジトリにプッシュするたびに、 @samp{git update-server-info} が実行されます。
@end quotation

これで、あなたの「パブリックリポジトリ」であなたの変更を受け入れる準備が整いました。あなたのプライベートリポジトリがあるマシンに戻ってください。
そこから、以下のコマンドを実行します:

@example
$ git push <public-host>:/path/to/my-git.git master
@end example


これにより、あなたのパブリックリポジトリが同期され、指定のブランチヘッド(つまり、この場合は
@samp{master})と、あなたの現在のリポジトリ内のそれらから到達可能なオブジェクトが一致します。

実例として、以下は私のパブリックGitリポジトリを更新する方法です。Kernel.orgミラーネットワークは、他の公開されているマシンへの伝播を処理します:

@example
$ git push master.kernel.org:/pub/scm/git/git.git/
@end example


@noindent

@chapheading Packing your repository

以前、私達は作成したGitオブジェクトごとに @samp{.git/objects/??/}
ディレクトリの下に1つのファイルが保存されていることを確認しました。この表現は、アトミックかつ安全に作成するには効率的ですが、ネットワークを介した転送にはそれほど便利ではありません。Gitオブジェクトは、作成されると不変であるため、「一緒にパックする」ことでストレージを最適化する方法があります。以下のコマンド

@example
$ git repack
@end example


は、あなたのためにそれをします。チュートリアルの例に従うと、これまでに約17個のオブジェクトが @samp{.git/objects/??/}
ディレクトリに蓄積されているはずです。 @samp{git repack} は、パックしたオブジェクトの数を示し、パックされたファイルを
@samp{.git/objects/pack} ディレクトリに保存します。

@quotation

@strong{Note}

@samp{.git/objects/pack} ディレクトリに @samp{pack-*.pack} と @samp{pack-*.idx}
の2つのファイルがあります。これらは互いに密接に関連しているため、何らかの理由で手動で別のリポジトリにコピーする場合は、必ず一緒にコピーする必要があります。前者はパック内のオブジェクトからのすべてのデータを保持し、後者はランダムアクセスのためのインデックスを保持します。
@end quotation

あなたが病的なほど疑り深い場合は、 @samp{git verify-pack}
コマンドを実行すると、破損したパックがあるかどうかが検出されますが、あまり心配する必要はありません。私たちのプログラムは常に完璧です ;-)

オブジェクトをパックしたら、既にパックファイルに取り込まれている、パックされていないオブジェクトを残す必要はありません。

@example
$ git prune-packed
@end example


これは、あなたのためにそれらを削除します。

あなたがもの好きならば、@samp{git prune-packed} を実行する前後に @samp{find .git/objects -type f}
を実行してみてください。 また、 @samp{git count-objects} は、リポジトリ内でパックされていないオブジェクト(unpacked
objects)の数と、それらが消費しているスペースの量を示します。

@quotation

@strong{Note}

パックされたリポジトリでは比較的大きなパックに含まれるオブジェクトが比較的少ない可能性があるため、HTTP転送(transport)での @samp{git
pull}
は少々面倒です。パブリックリポジトリから多くのHTTPプルが予想される場合は、頻繁に再パックして整理するか、まったく行わないことをお勧めします。
@end quotation

この時点で再度 @samp{git repack} を実行すると、「Nothing new to
pack.」(新しくパックするものはありません)と表示されます。あなたが開発を続行して変更を蓄積してから、 @samp{git repack}
を再度実行すると、前回リポジトリをパックして以降に作成されたオブジェクトを含む新しいパックが作成されます。最初のインポートの直後にプロジェクトをパックし(プロジェクトを最初から開始する場合を除く)、プロジェクトの活発度度に応じて、時々
@samp{git repack} を実行することをお勧めします。

リポジトリが @samp{git push} と @samp{git pull}
を介して同期される場合、転送元リポジトリにてパックされてたオブジェクトは通常、転送先ではアンパックされて保存されます。これにより、転送元と転送先で異なるパッキング戦略を使用できますが、両方のリポジトリを時々再パックする必要がある場合もあります。

@noindent

@chapheading Working with Others

Gitは真に分散されたシステムですが、多くの場合、開発者の非公式な階層でプロジェクト編成すると便利です。Linuxカーネル開発はこの方法で実行されます。
@uref{https://web.archive.org/web/20120915203609/http://www.xenotime.net/linux/mentor/linux-mentoring-2006.pdf,Randy Dunlap’s presentation} の (17ページ "Merges to Mainline") にイラストがあります。

この階層は純粋に「非公式」であることを強調しておく必要があります。この階層が意味する「パッチフローのチェーン」を強制するようなGitでの必須のものは何もありません。あなたはただ1つのリモートリポジトリからプルする必要はありません。

「プロジェクト指揮」(project lead)の推奨作業フローは以下のようになります:

@enumerate 

@item
あなたのローカルマシンで、あなたのプライマリリポジトリを準備します。あなたの作業はそこで行います。

@item
他の人がアクセスできる公開リポジトリを準備します。

他の人がバカ転送プロトコル(dumb transport
protocols)(HTTP)を介してリポジトリからプルしている場合、このリポジトリを「バカ転送フレンドリー」(dumb transport
friendly)に保つ必要があります。 @samp{git init} 後、標準テンプレートからコピーした
@samp{$GIT_DIR/hooks/post-update.sample} には、 @samp{git update-server-info}
の呼び出しが含まれますが、あなたは @samp{mv post-update.sample post-update}
を使用してフックを手動で有効にする必要があります。これにより、 @samp{git update-server-info}
が必要なファイルを最新の状態に保つことができます。

@item
あなたのプライマリリポジトリから公開リポジトリにプッシュします。

@item
公開リポジトリを @samp{git repack}
します。これにより、オブジェクトの初期セットをベースラインとして含む大きなパックが確立されます。リポジトリからのプルに使用される転送方法(transport)がパックされたリポジトリ(packed
repositories)をサポートしている場合は、 @samp{git prune} が使える可能性があります。

@item
あなたはプライマリリポジトリで作業を続けます。あなたの変更は、あなた独自の変更や、電子メールで受信するパッチや、「サブシステム保守者」の「公開」リポジトリをプルした結果のマージを含んでいます。

あなたはこのプライベートリポジトリはいつでも再パックできます。

@item
あなたの変更を公開リポジトリにプッシュし、公開します。

@item
時々、公開リポジトリを @samp{git repack} します。 手順5に戻り、作業を続行します。
@end enumerate

そのプロジェクトに取り組んでいて、独自の「公開リポジトリ」を持つ「サブシステム保守者」に推奨される作業サイクルは以下のようになります:

@enumerate 

@item
「プロジェクト指揮」の公開リポジトリ上で @samp{git clone} を実行して、あなたの作業リポジトリを準備します。初期クローン作成に使用されるURLは、
remote.origin.url 構成変数に格納されます。

@item
「プロジェクト指揮」の人と同じように、他の人がアクセスできる公開リポジトリを準備します。

@item
「プロジェクト指揮」リポジトリが同じマシン上にある場合を除き、パックされたファイルを「プロジェク指揮」の公開リポジトリからあなたの公開リポジトリにコピーします。後者の場合、あなたは
@samp{objects/info/alternates} ファイルを使用して、借用しているリポジトリを指すことができます。

@item
あなたのプライマリリポジトリから公開リポジトリにプッシュします。@samp{git repack}
を実行し、そして、リポジトリからのプルに使用される転送方法(transport)がパックされたリポジトリ(packed
repositories)をサポートしている場合は @samp{git prune} を実行します。

@item
あなたのプライマリリポジトリで作業を続けます。あなたの変更には、あなた独自の変更や、電子メールで受信するパッチや、「プロジェクト指揮」と場合によっては「サブサブシステム保守者」の「公開」リポジトリをプルした結果のマージが含まれます。

あなたはこのプライベートリポジトリはいつでも再パックできます。

@item
あなたの変更をあなたの公開リポジトリにプッシュし、「プロジェクト指揮」と、場合によっては「サブサブシステム保守者」にプルするように依頼します。

@item
時々、公開リポジトリを @samp{git repack} します。 手順5に戻り、作業を続行します。
@end enumerate

「公開」リポジトリを持たない「個人開発者」に推奨される作業サイクルは多少異なります。以下のようになります:

@enumerate 

@item
「プロジェクト指揮」(またはサブシステムで作業している場合は「サブシステム保守者」)の公開リポジトリを @samp{git clone}
して、あなたの作業リポジトリを準備します。初期クローン作成に使用されるURLは、 remote.origin.url 構成変数に格納されます。

@item
あなたは、あなたのリポジトリの @emph{master} ブランチで作業を行います。

@item
時々、あなたのアップストリームの公開リポジトリから @samp{git fetcho rigin} を実行します。これは @samp{git pull}
の前半のみを実行しますが、マージはしません。公開リポジトリのヘッドは @samp{.git/refs/remotes/origin/master}
に保存されています。

@item
@samp{git cherry origin} を使用して、どのパッチが受け入れられたかを確認したり、 @samp{git rebase origin}
を使用して、あなたのマージされていない変更を更新されたアップストリームに転送します。

@item
@samp{git format-patch origin} を使用して、アップストリームへの電子メール送信用のパッチを準備し、送信します。
手順2に戻り、作業を続行します。
@end enumerate

@noindent

@chapheading Working with Others, Shared Repository Style

あなたがCVS界隈から来ていたら、前のセクションで提案された協力のスタイルはあなたにとって新しいものかもしれません。でも心配する必要はありません。
Gitは、おそらくあなたもよく知っている「共有公開リポジトリ」(shared public
repository)スタイルの協同作業をサポートしています。

詳細については gitcvs-migration(7) を参照してください。

@noindent

@chapheading Bundling your work together

あなたは一度に複数のことに取り組む可能性があります。Gitでブランチを使用すると、これらの多かれ少なかれ独立したタスクを簡単に管理できます。

私達は2つのブランチを使用した「fun and
work」の例で、ブランチがどのように機能するかはすでに見てきました。ブランチが3つ以上ある場合も、考え方は同じです。  @samp{master}
ヘッドから始めて、 @samp{master} ブランチにいくつかの新しいコードがあり、 @samp{commit-fix} ブランチと @samp{diff-fix}
ブランチに2つの独立した修正があるとします:

@example
$ git show-branch
! [commit-fix] Fix commit message normalization.
 ! [diff-fix] Fix rename detection.
  * [master] Release candidate #1
---
 +  [diff-fix] Fix rename detection.
 +  [diff-fix~1] Better common substring algorithm.
+   [commit-fix] Fix commit message normalization.
  * [master] Release candidate #1
++* [diff-fix~2] Pretty-print messages.
@end example


両方の修正は十分にテストされており、この時点で、両方をマージする必要があります。あなたは以下のように、最初に @samp{diff-fix} でマージし、次に
@samp{commit-fix} でマージする事ができます:

@example
$ git merge -m "Merge fix in diff-fix" diff-fix
$ git merge -m "Merge fix in commit-fix" commit-fix
@end example


この結果は以下のようになります:

@example
$ git show-branch
! [commit-fix] Fix commit message normalization.
 ! [diff-fix] Fix rename detection.
  * [master] Merge fix in commit-fix
---
  - [master] Merge fix in commit-fix
+ * [commit-fix] Fix commit message normalization.
  - [master~1] Merge fix in diff-fix
 +* [diff-fix] Fix rename detection.
 +* [diff-fix~1] Better common substring algorithm.
  * [master~2] Release candidate #1
++* [master~3] Pretty-print messages.
@end example


しかしながら、あなたが持っているものが真に独立した変更のセットである場合、最初に一方のブランチにマージし、次にもう一方のブランチにマージする特別な理由はありません(もし順序が重要な場合は、それらは定義上独立しているとは言えません)。代わりに、これら2つのブランチを現在のブランチに一度にマージすることができます。まずは、今行ったことを元に戻して、最初からやり直しましょう。
@samp{master~2} にリセットすることにより、これら2つのマージの前のmasterブランチを取得する必要があります:

@example
$ git reset --hard master~2
@end example


@samp{git show-branch} すれば、先ほど行った2つの @samp{git merge} の前の状態と一致することを確認できます。 次に、2つの @samp{git
merge} コマンドを連続して実行する代わりに、これら2つのブランチヘッドをマージします(これは「making an
Octopus」(タコ足メイク)として知られています):

@example
$ git merge commit-fix diff-fix
$ git show-branch
! [commit-fix] Fix commit message normalization.
 ! [diff-fix] Fix rename detection.
  * [master] Octopus merge of branches 'diff-fix' and 'commit-fix'
---
  - [master] Octopus merge of branches 'diff-fix' and 'commit-fix'
+ * [commit-fix] Fix commit message normalization.
 +* [diff-fix] Fix rename detection.
 +* [diff-fix~1] Better common substring algorithm.
  * [master~1] Release candidate #1
++* [master~2] Pretty-print messages.
@end example


注意:
可能であるからいって必ずしもタコ足(octopus)をやるべきではない、ということに注意してください。タコ足(octopus)は有効な方法であり、2つ以上の独立した変更を同時にマージする場合、コミット履歴を簡単に表示できることがよくあります。しかし、マージしているブランチのいずれかとマージの競合があり、手動で解決する必要がある場合は、これは、これらのブランチで発生した開発が結局独立していないことを示しています。そうすると、あなたは、どうして一度に2つをマージして、競合をどのように解決したか、および一方の側で行われた変更をもう一方の側よりも優先した理由を文書化しなければならなくなります。そうしないと、プロジェクトの履歴を追跡するのが難しくなり、簡単ではなくなります。

@noindent

@chapheading SEE ALSO

gittutorial(7), gittutorial-2(7),
gitcvs-migration(7), git-help(1), giteveryday(7),
@uref{user-manual.html,The Git User’s Manual}

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitcredentials,,,Top
@chapheading Name

gitcredentials — Gitにユーザー名とパスワードを提供する

@noindent

@chapheading Synopsis

@example
git config credential.https://example.com.username myusername
git config credential.helper "$helper $options"
@end example


@noindent

@chapheading DESCRIPTION

Gitは、操作を実行するためにユーザーからの資格情報を必要とする場合があります。たとえば、HTTP経由でリモートリポジトリにアクセスするために、ユーザー名とパスワードを要求する必要がある場合があります。このマニュアルでは、Gitがこれらの資格情報を要求するために使用するメカニズムと、これらの資格情報を繰り返し入力しないようにするためのいくつかの機能について説明します。

@noindent

@chapheading REQUESTING CREDENTIALS

資格情報ヘルパーが定義されていない場合、Gitは以下の戦略でユーザーにユーザー名とパスワードを要求します:

@enumerate 

@item
@samp{GIT_ASKPASS}
環境変数が設定されている場合、その環境変数で指定したプログラムが呼び出されます。コマンドラインでプログラムによって適切なプロンプトが表示され、ユーザーの入力が標準出力から読み取られます。

@item
それ以外の場合、 @samp{core.askPass} 構成変数が設定されていると、その値は上記と同様に使用されます。

@item
それ以外の場合、@samp{SSH_ASKPASS} 環境変数が設定されていると、その値は上記と同様に使用されます。

@item
それ以外の場合、端末でユーザーの入力が促されます。
@end enumerate

@noindent

@chapheading AVOIDING REPETITION

同じ資格情報を何度も入力するのは面倒な場合があります。 Gitには、この煩わしさを軽減する2つの方法があります:

@enumerate 

@item
指定の認証コンテキストのためのユーザー名の静的構成。

@item
パスワードをキャッシュまたは保存するため、またはシステムパスワードウォレットまたはキーチェーンと対話するための資格情報ヘルパー。
@end enumerate

1つ目は、パスワードに使用できる安全なストレージがない場合に簡単で適切です。これは通常、以下を構成に追加することによって設定します:

@example
[credential "https://example.com"]
        username = me
@end example


一方、資格情報ヘルパーは、Gitがユーザー名とパスワードの両方を要求できる外部プログラムです。これらは通常、OSまたは他のプログラムによって提供される安全なストレージとインターフェイスします。

ヘルパーを使用するには、最初に使用するヘルパーを選択する必要があります。Gitには現在、以下のヘルパーが含まれています:

@table @asis

@item  cache 
資格情報をメモリに短期間キャッシュします。 詳細については git-credential-cache(1) を参照してください。

@item  store 
資格情報をディスクに無期限に保存します。詳細については git-credential-store(1) を参照してください。
@end table

サードパーティのヘルパーがインストールされている場合もあります。 @samp{git help -a} の出力で @samp{credential-*}
を検索し、個々のヘルパーのドキュメントを参照してください。あなたが使いたいヘルパーを選んだら、その名前を credential.helper
変数に入力することで、Gitにそのヘルパーを使用するように指示できます。

@enumerate 

@item
ヘルパーを探す。

@example
$ git help -a | grep credential-
credential-foo
@end example


@item
その説明を読む。

@example
$ git help credential-foo
@end example


@item
Gitにそれを使用するように伝えます。

@example
$ git config --global credential.helper foo
@end example

@end enumerate

@noindent

@chapheading CREDENTIAL CONTEXTS

Gitは、各資格情報がURLによって定義されたコンテキストを持っていると見なします。このコンテキストは、コンテキスト固有の構成を検索するために使用され、すべてのヘルパーに渡されます。ヘルパーは、これを安全なストレージへのインデックスとして使用できます。

たとえば、 @samp{https://example.com/foo.git}
にアクセスしていると想像してください。Gitが構成ファイルを調べてセクションがこのコンテキストに一致するかどうかを確認するとき、コンテキストが構成ファイル内のパターンのより具体的なサブセットである場合、Gitは2つが一致すると見なします。たとえば、設定ファイルに以下がある場合:

@example
[credential "https://example.com"]
        username = foo
@end example


これはマッチします。両方のプロトコルが同じで、かつ、両方のホストが同じであり、かつ、パターンURLはパス部分を気にしないからです。ただし、以下のコンテキストは一致しません:

@example
[credential "https://kernel.org"]
        username = foo
@end example


なぜならホスト名が異なるためです。 また、 @samp{foo.example.com} とは一致しません。
Gitは、2つのホストが同じドメインの一部であるかどうかを考慮せずに、ホスト名を正確に比較します。 同様に、 @samp{http://example.com}
の設定エントリは一致しません。Gitはプロトコルを正確に比較します。 ただし、 @samp{http.<url>.*}
オプションと同様に、ドメイン名やその他のパターンマッチングにワイルドカードを使用できます。

パターンURLにパス部分が含まれている場合、これも完全に一致する必要があります。コンテキスト
@samp{https://example.com/bar/baz.git} は(@samp{https://example.com}
部分の照合に加えてパス部分も一致する) @samp{https://example.com/bar/baz.git} の設定エントリとは一致しますが、
@samp{https://example.com/bar} 構成エントリとは一致しません。

@noindent

@chapheading CONFIGURATION OPTIONS

コンテキストのオプションは、 @samp{credential.*} (すべての資格情報に適用) または @samp{credential.<url>.*}
のいずれかで構成できます。ここで、 <url> は上記のコンテキストと一致します。

以下のオプションは、どちらの場所でも使用できます:

@table @asis

@item  helper 
外部資格情報ヘルパーの名前、および関連するオプション。ヘルパー名が絶対パスでない場合は、文字列 @samp{git credential-}
が先頭に追加されます。結果の文字列はシェルによって実行されます(たとえば、これを @samp{foo --option=bar} に設定すると、シェルを介して
@samp{git credential-foo --option=bar} が実行されます。例については使用するヘルパーのマニュアルを参照してください。

@samp{credential.helper} 構成変数のインスタンスが複数ある場合、各ヘルパーが順番に試行され、ユーザー名 または パスワード または
何も提供しない 場合があります。Gitがユーザー名とパスワードの両方を取得すると、それ以上ヘルパーは試行されません。

@samp{credential.helper}
が空の文字列に設定されている場合、これによりヘルパーリストが空にリセットされます(したがって、空の文字列ヘルパーを構成し、その後に必要なヘルパーのセットを構成することで、優先度の低い構成ファイルによって設定されたヘルパーをオーバーライドできます)。

@item  username 
URLに指定されていない場合のデフォルトのユーザー名。

@item  useHttpPath 
デフォルトでは、Gitはhttp URLのパス部分を外部ヘルパーを介して照合する価値があるとは見なしません。 これは、
@samp{https://example.com/foo.git} に保存されている資格情報が @samp{https://example.com/bar.git}
にも使用されることを意味します。これらの場合を区別したい場合は、このオプションを「true」に設定してください。
@end table

@noindent

@chapheading CUSTOM HELPERS

あなた独自のカスタムヘルパーを作成して、資格情報を保持している任意のシステムとインターフェイスすることができます。

資格情報ヘルパーは、資格情報を長期ストレージとの間でフェッチまたは保存するためにGitによって実行されるプログラムです(「長期」とは単一のGitプロセスよりも単純に長いという意味です。たとえば、資格情報はメモリ内に数分間、またはディスク上で無期限に保存される場合があります)。

各ヘルパーは、構成変数 @samp{credential.helper} の単一の文字列で指定されます(その他 git-config(1)
を参照)。文字列はGitによって、以下のルールを使用して実行されるコマンドに変換されます:

@enumerate 

@item
ヘルパー文字列が "!" で始まる場合、それはシェルスニペットと見なされ、 "!" の後のすべてが コマンドになります。

@item
それ以外の場合、ヘルパー文字列が絶対パスで始まる場合は、文字列がそのままコマンドとして扱われます。

@item
それ以外の場合は、文字列 "git credential-" がヘルパー文字列の前に付加され、その結果がコマンドになります。
@end enumerate

結果のコマンドには「operation」引数が追加され(詳細は下記参照)、結果はシェルによって実行されます。

仕様の例を以下に示します:

@example
# run "git credential-foo"
[credential]
        helper = foo

# same as above, but pass an argument to the helper
[credential]
        helper = "foo --bar=baz"

# the arguments are parsed by the shell, so use shell
# quoting if necessary
[credential]
        helper = "foo --bar='whitespace arg'"

# you can also use an absolute path, which will not use the git wrapper
[credential]
        helper = "/path/to/my/helper --with-arguments"

# or you can specify your own shell snippet
[credential "https://example.com"]
        username = your_user
        helper = "!f() @{ test \"$1\" = get && echo \"password=$(cat $HOME/.secret)\"; @}; f"
@end example


一般的に、上記の ルール(3）は、ユーザーが指定するのが最も簡単です。資格情報ヘルパーの作成者は、プログラムに
"git-credential-$NAME" という名前を付け、インストール中に @samp{$PATH} または @samp{$GIT_EXEC_PATH}
に配置して、ユーザーが @samp{git config credential.helper $NAME}
を有効にできるようにすることで、ユーザーを支援するように努める必要があります。

ヘルパーが実行されると、コマンドラインに以下のいずれかの「操作」引数が追加されます:

@table @asis

@item  @samp{get} 
一致する資格情報が存在する場合は、それを返します。

@item  @samp{store} 
ヘルパーに該当する場合は、資格情報を保存します。

@item  @samp{erase} 
もしあれば、ヘルパーのストレージから一致する資格情報を削除します。
@end table

資格情報の詳細は、ヘルパーの標準入力ストリームで提供されます。正確な形式は、 @samp{git credential} 配管コマンドの 入力/出力形式
と同じです(詳細な仕様については、 git-credential(1) の「INPUT/OUTPUT
FORMAT」のセクションを参照してください)。

`get`操作の場合、ヘルパーは標準出力の属性のリストを同じ形式で作成する必要があります(一般的な属性については
git-credential(1)
を参照してください)。ヘルパーはサブセットを自由に作成できます。提供するのに役立つものがない場合は、値をまったく作成しません。提供された属性は、Gitの資格情報サブシステムによってすでに知られている属性を上書きします。

すべての属性を上書きすることが可能ですが、正常に動作するヘルパーは、ユーザー名とパスワード以外の属性については上書きしないようにする必要があります。

ヘルパーが @samp{true} または @samp{1} の値で @samp{quit}
属性を出力した場合、それ以上のヘルパーは参照されず、ユーザーにプロンプトも表示されません(資格情報が提供されていない場合、操作は失敗します)。

同様に、ユーザー名とパスワードの両方が提供されると、ヘルパーに相談することはありません。

@samp{store} または @samp{erase} 操作の場合、ヘルパーの出力は無視されます。

ヘルパーが要求された操作の実行に失敗した場合、または潜在的な問題をユーザーに通知する必要がある場合、ヘルパーは標準エラー出力に書き込むことがあります。

要求された操作(読み取り専用ストアなど)をサポートしていない場合は、要求を黙って無視する必要があります。

ヘルパーが他の操作を受け取った場合、ヘルパーはその要求を黙って無視する必要があります。これにより、将来の操作を追加する余地が残ります(古いヘルパーは新しい要求を無視するだけです)。

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitcvs-migration,,,Top
@chapheading Name

gitcvs-migration — CVSユーザー向けGit

@noindent

@chapheading Synopsis

@display
git cvsimport *
@end display


@noindent

@chapheading DESCRIPTION

GitはCVSとは異なり、すべての作業ツリーにはプロジェクト履歴の完全なコピーを含むリポジトリが含まれており、他のどのリポジトリよりも決定的に重要であるリポジトリなどというものはありません。ただし、あなたはユーザーが同期できる単一の共有リポジトリを指定することで、CVSモデルをエミュレートできます。このドキュメントでは、その方法について説明します。

Gitに関する基本的な知識が必要ですが、 gittutorial(7) と gitglossary(7)
を理解しておけば十分です。

@noindent

@chapheading 共有リポジトリに対面する開発

ホスト foo.com の /pub/repo.git
に共有リポジトリが設定されているとします。次に、個々のコミッターは、以下コマンドを使用してssh経由で共有リポジトリのクローンを作成できます:

@example
$ git clone foo.com:/pub/repo.git/ my-project
$ cd my-project
@end example


そしてハックハックします。 @samp{cvs update} に相当するものは以下です

@example
$ git pull origin
@end example


これは、クローン操作以降に他の人が行った可能性のあるすべての作業をマージします。作業ツリーにコミットされていない変更がある場合は、まずは @samp{git
pull} を実行する前にコミットしてください。

@quotation

@strong{Note}

@samp{pull} コマンドは、最初の @samp{git clone}
コマンドによって設定された構成変数によって、更新をどこから取得するかを認識しています。詳細については、 @samp{git config -l} および
git-config(1) のマニュアルページを参照してください。
@end quotation

まずあなたの変更をコミットしてから、その後 @samp{git push} コマンドを使用することで、あなたの変更を採用して共有リポジトリを更新できます:

@example
$ git push origin master
@end example


それらのコミットを共有リポジトリに「プッシュ」します。他の誰かが最近リポジトリを更新した場合、「cvs commit」のように「git
push」が文句を言います。その場合、プッシュを再試行する前に変更をプルする必要があります。

上記の @samp{git push} コマンドで、更新するリモートブランチの名前(@samp{master})を指定します。これを省略した場合、 @samp{git push}
は、ローカルリポジトリ内のブランチと同じ名前を持つリモートリポジトリ内のブランチを更新しようとします。したがって、最後の「プッシュ」は以下のいずれかで実行できます:

@example
$ git push origin
$ git push foo.com:/pub/project.git/
@end example


上記は共有リポジトリに @samp{master} 以外のブランチがない限りは動作します。

@noindent

@chapheading Setting Up a Shared Repository

私達は、プロジェクトのGitリポジトリをすでに作成しているか、または最初からまたはtarballから作成したか(gittutorial(7)
を参照)、または既存のCVSリポジトリからインポートした(次のセクションを参照)と想定しします。

あなたの既存のリポジトリが /home/alice/myproject
にあると想定します。新しい「ベア」リポジトリ(作業ツリーのないリポジトリ)を作成し、あなたのプロジェクトをそのリポジトリにフェッチします:

@example
$ mkdir /pub/my-repo.git
$ cd /pub/my-repo.git
$ git --bare init --shared
$ git --bare fetch /home/alice/myproject master:master
@end example


次に、すべてのチームメンバーにこのリポジトリへの読み取り/書き込みアクセスを許可します。これを行う簡単な方法の1つは、すべてのチームメンバーにリポジトリがホストされているマシンへのsshアクセスを許可することです。マシン上で完全なシェルを提供したくない場合は、ユーザーがGitのプッシュとプルのみを実行できる制限付きシェルがあります。
git-shell(1) を参照してください。

コミッター全員を同じグループに入れ、リポジトリをそのグループで書き込み可能にします:

@example
$ chgrp -R $group /pub/my-repo.git
@end example


コミッターが作成するディレクトリが他のグループメンバーによって書き込みおよび検索できるように、コミッターのumaskが027であることを確認してください。

@noindent

@chapheading Importing a CVS archive

@quotation

@strong{Note}

これらの手順では、gitに付属している @samp{git-cvsimport}
スクリプトを使用しますが、他のインポーターがより良い結果を提供する場合があります。他のオプションについては、
git-cvsimport(1) のthe noteを参照してください。
@end quotation

まず、 @uref{https://github.com/andreyvit/cvsps,https://github.com/andreyvit/cvsps}
からバージョン2.1以降のcvspsをインストールし、あなたの $PATH
に含まれていることを確認します。次に、あなたが関心を持っているプロジェクトのチェックアウトされたCVS作業ディレクトリにcdして、
git-cvsimport(1) を実行します:

@example
$ git cvsimport -C <destination> <module>
@end example


これにより、指定されたCVSモジュールのGitアーカイブがディレクトリ <destination> に必要に応じて作成され、配置されます。

インポートは、すべてのファイルのすべてのリビジョンをCVSからチェックアウトします。聞いた限りでは、cvsimportは1秒あたり平均約20個のリビジョンを処理できるので、中規模のプロジェクトの場合、これには数分以上かかることはありません。大規模なプロジェクトやリモートリポジトリには時間がかかる場合があります。

メインtrunkは @samp{origin}
という名前のGitブランチに保存され、追加のCVSブランチは同じ名前のGitブランチに保存されます。メインtrunkの最新バージョンも
`master`ブランチにチェックアウトされたままなので、すぐにあなた独自の変更を追加し始めることができます。

インポートはインクリメンタルであるため、来月再度呼び出すと、その間に行われたCVS更新がフェッチされます。これが機能するためには、インポートされたブランチを変更してはなりません。代わりに、独自の変更のために新しいブランチを作成し、必要に応じてインポートされたブランチをマージします。

あなたが共有リポジトリが必要な場合は、上記のように、あなたはインポートされたディレクトリのベアクローンを作成する必要があります。次に、増分インポートをマージするために、インポートされたディレクトリを別の開発クローンとして扱います。

@noindent

@chapheading Advanced Shared Repository Management

Gitでは、特定の箇所で実行される「フック」(hooks)と呼ばれるスクリプトを指定できます。これらを使用して、たとえば、共有リポジトリへのすべてのコミットをメーリングリストに送信することができます。
githooks(5) を参照してください。

更新フックを使用して、よりきめ細かいアクセス許可を適用できます。
@uref{howto/update-hook-example.html,Controlling access to branches using update hooks} (更新フックを使用したブランチへのアクセスの制御) を参照してください。

@noindent

@chapheading Providing CVS Access to a Git Repository

開発者が引き続きCVSを使用できるように、Gitリポジトリへの真のCVSアクセスを提供することも可能です。詳細については、
git-cvsserver(1) を参照してください。

@noindent

@chapheading Alternative Development Models

CVSユーザーは、開発者のグループに共通のリポジトリへのコミットアクセスを与えることに慣れています。これまで見てきたように、これはGitでも可能です。ただし、Gitの分散性により、他の開発モデルが利用可能になるため、最初に、そのうちのどれがプロジェクトにより適しているかどうかを検討することをお勧めします。

たとえば、プロジェクトのプライマリ公開リポジトリを保守するために1人の人を選択できます。次に、他の開発者がこのリポジトリのクローンを作成し、それぞれが独自のクローンで作業します。満足のいく一連の変更がある場合、変更を含むブランチからプルするように保守者に依頼します。保守者は変更を確認し、プライマリリポジトリにプルします。プライマリリポジトリは、他の開発者が調整を維持するために必要に応じてプルします。
Linuxカーネルおよびその他のプロジェクトは、このモデルのバリエーションを使用します。

少人数のグループでは、開発者は中央の保守者を必要とせずに、互いのリポジトリから変更をプルするだけで済みます。

@noindent

@chapheading SEE ALSO

gittutorial(7), gittutorial-2(7),
gitcore-tutorial(7), gitglossary(7), giteveryday(7),
@uref{user-manual.html,The Git User’s Manual}

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitdiffcore,,,Top
@chapheading Name

gitdiffcore — diff出力の微調整

@noindent

@chapheading Synopsis

@display
git diff *
@end display


@noindent

@chapheading DESCRIPTION

diffコマンド @samp{gitdiff-index} と @samp{git diff-files} と @samp{git diff-tree} は、 @samp{diff}
出力を表示する前に、従来とは異なる方法で検出した差異を操作するように指示できます。この操作を総称して「diffcore変換」(diffcore
transformation)と呼びます。この短いノートでは、それらが何であるか、およびそれらを使用して、従来の種類よりも理解しやすい @samp{diff}
出力を生成する方法について説明します。

@noindent

@chapheading The chain of operation

@samp{git diff-@{asterisk@}} ファミリの仕事は、まずは2つのファイルセットを比較することです:

@itemize 

@item
@samp{git diff-index} は、 (@samp{--cached}
フラグが使用されていない場合)ツリーオブジェクトと作業ディレクトリの内容を比較するか、または(` --cached`
フラグが使用されている場合)ツリーオブジェクトとインデックスファイルの内容を比較します。

@item
@samp{git diff-files} は、インデックスファイルと作業ディレクトリの内容を比較します。

@item
@samp{git diff-tree} は、2つのツリーオブジェクトの内容を比較します。
@end itemize

これらすべての場合において、コマンド自体は、最初にオプションで、コマンドラインで指定されたパススペックによって2つのファイルの組を限定し、結果として得られる2つのファイルの組の対応するパスを比較します。

パススペックは、diffが動作するワールドを制限するために使用されます。これらは、指定されたパス名の組の外側にあるファイルペア(filepairs)を削除します。例えば。ファイルペアの入力組が含まれている場合:

@example
:100644 100644 bcd1234... 0123456... M junkfile
@end example


しかし、コマンドの呼び出しが @samp{git diff-files myfile} の場合、 @samp{myfile}
のみが考慮されているため、junkfileエントリがリストから削除されます。

比較の結果は、これらのコマンドから、 `-p｀
オプションが使用されていない場合に出力されるものと同様の形式で、内部的に「diffcore」と呼ばれるものに渡されます。例えば

@example
in-place edit  :100644 100644 bcd1234... 0123456... M file0
create         :000000 100644 0000000... 1234567... A file4
delete         :100644 000000 1234567... 0000000... D file5
unmerged       :000000 000000 0000000... 0000000... U file6
@end example


diffcoreメカニズムには、そのような比較結果のリストが提供され(それぞれが「ファイルペア」(filepair)と呼ばれますが、この時点ではそれぞれ1つのファイルについて話します)、そのようなリストを別のリストに変換します。現在、そのような変換(transformations)は5つあります:

@itemize 

@item
diffcore-break

@item
diffcore-rename

@item
diffcore-merge-broken

@item
diffcore-pickaxe

@item
diffcore-order

@item
diffcore-rotate
@end itemize

これらは順番に適用されます。 @samp{git diff-@{asterisk@}}
コマンド群の探索のファイルペアのセットは、diffcore-breakへの入力として使用されます。diffcore-breakからの出力は、次の変換への入力として使用されます。そして、最終結果が出力ルーチンに渡され、diff-raw形式(マニュアルの
@samp{git diff-@{asterisk@}} コマンド の「Output
format」セクションを参照)またはdiff-patch形式のいずれかが生成されます。

@noindent

@chapheading diffcore-break: 完全な書き換えを分割するため

操作チェーンの2番目の変換(transformation)はdiffcore-breakで、 @samp{git diff-@{asterisk@}} コマンド群の
@samp{-B}
オプションによって制御されます。これは、「完全な書き換え」を表すファイルペアを検出し、そして、そのようなファイルペアを削除と作成を表す2つのファイルペアに分割するために使用されます。例えば、入力に以下のファイルペアが含まれている場合:

@example
:100644 100644 bcd1234... 0123456... M file0
@end example


そして、ファイル "file0" が完全に書き換えられたことを検出すると、以下のように変更されます:

@example
:100644 000000 bcd1234... 0000000... D file0
:000000 100644 0000000... 0123456... A file0
@end example


ファイルペアを切断する(break)目的で、diffcore-breakは、変更前後のファイルの内容(つまり、上記の例では、SHA-1コンテンツIDとして
@samp{bcd1234...} と @samp{0123456...}
を持つコンテンツ)の間の変更の程度を調べます。元のコンテンツの削除と新しい素材の挿入の量が合計され、「ブレークスコア」(break
score)を超えると、ファイルペアが2つに分割されます。ブレークスコアのデフォルトは、元のサイズと結果の小さい方のサイズの50%であり(つまり、編集によってファイルが縮小される場合は、結果のサイズが使用されます。編集によってファイルが長くなる場合は、元のサイズが使用されます)、
@samp{-B} オプションの後に数字を付けることでカスタマイズできます(たとえば、 @samp{-B75} で75%にするように指示します)。

@noindent

@chapheading diffcore-rename: 名前変更とコピーを検出するため

この変換(transformation)は、名前変更とコピーを検出するために使用され、 @samp{git diff-@{asterisk@}} コマンド群の
@samp{-M} オプション(名前変更検出用）と @samp{-C}
オプション(コピーも検出するため)によって制御されます。入力にこれらのファイルペアが含まれている場合:

@example
:100644 000000 0123456... 0000000... D fileX
:000000 100644 0000000... 0123456... A file0
@end example


ここで、削除されたファイルfileXの内容は、作成されたファイルfile0の内容と十分に類似しているため、名前変更検出はこれらのファイルペアをマージして以下を作成します:

@example
:100644 100644 0123456... 0123456... R100 fileX file0
@end example


@samp{-C} オプションを使用すると、変更されたファイルと削除されたファイル( @samp{--find-copies-harder}
オプションが使用されている場合は、変更されていないファイルも)の元の内容が、名前変更/コピー
操作のソースファイルの候補と見なされます。入力がこれらのファイルペアのようなものである場合、変更されたファイルfileYと新しく作成されたファイルfile0について以下のようになります:

@example
:100644 100644 0123456... 1234567... M fileY
:000000 100644 0000000... bcd3456... A file0
@end example


fileYの元の内容とfile0の結果の内容が比較され、それらが十分に類似している場合は、以下のように変更されます:

@example
:100644 100644 0123456... 1234567... M fileY
:100644 100644 0123456... bcd3456... C100 fileY file0
@end example


名前の変更とコピーの検出の両方で、diffcore-breakで使用されるのと同じ「変更の範囲」(extent of
changes)アルゴリズムを使用して、2つのファイルが「十分に類似」しているかどうかを判断し、デフォルトの50%とは異なる類似スコアを使用するようにカスタマイズできます。
@samp{-M} または @samp{-C} オプションの後に番号を付けます(たとえば、 @samp{-M8} で 8/10 = 80% にするように指示します)。

注意:
名前変更検出がオンで、コピーとブレークの両方の検出がオフの場合、名前変更検出は、ファイル名を同じに保ちながらファイルがディレクトリ間で移動されるかどうかを最初にチェックする予備ステップを追加することに注意してください。
別のディレクトリから削除された同じ名前のファイルと内容が十分に類似しているファイルがディレクトリに追加されている場合、それらを名前変更としてマークし、後の2次ステップ(一致しないすべてのファイルをペアごとに比較して、コンテンツの類似性が最も高いことによって決定される「最良の」一致を見つけるステップ)から除外します。したがって、たとえば、削除された
docs/ext.txt と追加された docs/config/ext.txt が十分に類似している場合、それらは名前変更としてマークされ、削除された
docs/ext.txt にさらに類似している可能性のある、追加された docs/ext.md が後のステップで名前変更先と見なされないようにします。
このため、予備の「同じファイル名に一致」ステップでは、少し高いしきい値を使用してファイルペアを名前変更としてマークし、他の候補をより適切に一致させることを検討しなくなります。
この予備ステップでは、ファイルごとに最大で1つの比較が行われます。したがって、正確な名前変更が検出された後、ディレクトリ階層全体にext.txtファイルがいくつか残っている場合は、これらのファイルのこの準備手順をスキップできます。

注意: @samp{-C} オプションを @samp{--find-copies-harder} オプションとともに使用すると、 @samp{git diff-@{asterisk@}}
コマンド群は、変更されていないファイルペアと変更されたファイルペアをdiffcoreメカニズムに送ります。これにより、コピー検出器は、ファイルの速度を低下させる代わりに、変更されていないファイルをコピーソース候補と見なすことができます。
@samp{--find-copies-harder} がないと、 @samp{git diff-@{asterisk@}}
コマンド群は、コピーされたファイルがたまたま同じチェンジセットで変更された場合にのみコピーを検出できます。

@noindent

@chapheading diffcore-merge-broken: 完全な書き換えを元に戻すため

この変換は、diffcore-breakによって分割したファイルペアをマージするために使用され、 diffcore-rename によって
rename/copy に変換されず、単一の変更に戻されます。これは、diffcore-breakが使用されている場合は常に実行されます。

分割したファイルペアをマージする目的で、 diffcore-break および diffcore-rename
で使用されるものとは異なる「変更の範囲」の計算を使用します。オリジナルからの削除のみをカウントし、挿入はカウントしません。100行のドキュメントから10行だけを削除した場合、新しい1000行のドキュメントを作成するために910行を追加しても、完全な書き換えは行われたとは見なしません。
diffcore-break は、 diffcore-renameがそのようなファイルペアを 名前変更/コピー
検出の候補と見なすのを助けるためにそのような場合のを分割しますが、その方法で分割したファイルペアが他のファイルペアと一致して 名前変更/コピー
を作成しなかった場合、この変換でそれらをマージして「元の変更」に戻します 。

「変更の範囲」パラメータは、 @samp{-B}
に2番目の数値を指定することで、デフォルトの80%から微調整できます(つまり、元のマテリアルの80%以上が削除されない限り、分割されたペアは1つの変更にマージされます)。以下のように指定できます:

@itemize 

@item
@samp{-B50/60} (diffcore-breakに50%の「ブレークスコア」を与え、diffcore-merge-brokenに60%を与えます)。

@item
@samp{-B/60} (上記と同じです。diffcore-breakのデフォルトは50%であるため)。
@end itemize

注意:以前の実装では、個別の作成パッチと削除パッチとして分割したペアが残っていたことに注意してください。これは不必要なハックであり、最新の実装では常にすべての分割されたペアが変更にマージされます。ただし、結果のパッチ出力は、
@samp{-}
で始まる古いバージョンのコンテンツ全体を表示することにより、このような完全な書き換えの場合に簡単に確認できるように、異なる形式になっています。その後に、接頭辞
@samp{+} が付いた新しいバージョンのコンテンツ全体が続きます。

@noindent

@chapheading diffcore-pickaxe: 指定の文字列(string)の追加/削除の検知のため

この変換により、ファイルペアの組が、特定の方法でプリイメージとポストイメージの間で指した文字列を変更するものに制限されます。
@samp{-S<テキストのブロック>} および @samp{-G<正規表現>} オプションは、これらの文字列を検索するさまざまな方法を指定するために使用されます。

@samp{-S<テキストブロック>}
は、指定されたテキストのブロックの出現回数がプリイメージとポストイメージで異なるファイルペアを検出します。定義上、ファイル内の移動は検出されません。また、チェンジセットが対象の文字列に影響を与えずにファイルを大規模に移動すると、通常どおりdiffcore-renameが開始され、@samp{-S}
はファイルペアを省略します(その文字列の出現回数は、名前変更で検出されたファイルペアで変更されなかったため)。 @samp{--pickaxe-regex}
と一緒に使用する場合、<テキストブロック>は、リテラル文字列ではなく、マッチする拡張POSIX正規表現として扱います。

@samp{-G<正規表現>}
(grep文法)は、指定された正規表現にマッチする行が追加または削除されたテキスト差分を持つファイルペアを検出します。これは、ノイズであるファイル内の移動(またはrename-detectionが同じファイルと見なすもの)を検出することを意味します。実装はdiffを2回実行してgrepsしますが、これは非常にコストがかかる可能性があります。高速化のため、textconvフィルタがないバイナリファイルは無視されます。

@samp{-S} または @samp{-G} を @samp{--pickaxe-all} なしで使用すると、それぞれの基準に一致するファイルペアのみが出力に保持されます。
@samp{--pickaxe-all}
が使用されている場合、1つのファイルペアでもチェンジセット内のそれぞれの基準に一致すると、チェンジセット全体が保持されます。この振る舞いは、チェンジセット全体のコンテキストでの変更のレビューを容易にするために設計されています。

@noindent

@chapheading diffcore-order: ファイル名に基づいて出力をソートするため

これは、ユーザー(またはプロジェクト)の好みに応じてファイルペアを並べ替えるために使用され、 @samp{git diff-@{asterisk@}} コマンド群の
@samp{-O} オプションによって制御されます。

これは、各行がシェルグロブパターンであるテキストファイルを取ります。ファイルの前の行のグロブパターンに一致するファイルペアは、後の行に一致するファイルペアの前に出力され、どのグロブパターンにも一致しないファイルペアは最後に出力されます。

例として、コアGitの一般的な orderfile おそらく以下のようになります:

@example
README
Makefile
Documentation
*.h
*.c
t
@end example


@noindent

@chapheading diffcore-rotate: 出力開始パス(path)を変更するため

この変換は1つのパス名を取り、ファイルペアのセットをローテーションして、指定されたパス名のファイルペアが最初に来るようにします。オプションで、その前にあるパスを破棄します。これは、
@samp{--skip-to} および @samp{--rotate-to}
オプションを実装するために使用されます。指定されたパス名がファイルペアのセットにない場合はエラーになりますが、 @samp{git log `
ファミリーのコマンドで使用するとエラーになることはありません。 `git log}
コマンドで表示されるすべてのコミットによって特定のパスが変更されることを期待するのは不合理だからです。このため、 @samp{git log}
と一緒に使用すると、指定されたパス名と同じように並べ替えられるファイルペア、または最初に並べ替えられるファイルペアが出力の開始場所になります。

この変換をdiffcore-orderと組み合わせて使用すると、diffcore-orderが有効な場合、この変換への入力がソートされない可能性があるため、予期しない結果が生成されます。

@noindent

@chapheading SEE ALSO

git-diff(1), git-diff-files(1), git-diff-index(1),
git-diff-tree(1), git-format-patch(1), git-log(1),
gitglossary(7), @uref{user-manual.html,The Git User’s Manual}

@noindent

@chapheading GIT

Part of the git(1) suite

@node giteveryday,,,Top
@chapheading Name

giteveryday — Git日常利用に役立つ最小限のコマンドセット

@noindent

@chapheading Synopsis

Git日常利用の為の20程度のコマンド

@noindent

@chapheading DESCRIPTION

日常のGit利用に役立つコマンドの小さなセットを説明するため、Gitユーザーを大きく4つのカテゴリに分類します。

@itemize 

@item
開発者個人(スタンドアローン) (@pxref{[STANDALONE]}) のコマンドは
一人で作業する人でも、コミットする人には不可欠です。

@item
他の人と一緒に作業する場合は、開発者個人(グループプロジェクト参加者) (@pxref{[PARTICIPANT]})
セクションにリストされているコマンドも必要になります。

@item
インテグレーター (@pxref{[INTEGRATOR]}) 役の人々は、
上記に加えて更に幾つかのコマンドを学ぶ必要があります。

@item
リポジトリ管理 (@pxref{[ADMINISTRATION]}) コマンドは、
Gitリポジトリの管理と提供を担当するシステム管理者向けです。
@end itemize

@noindent

@chapheading Individual Developer (Standalone)

独立した個々の開発者は、他の人とパッチを交換せず、以下のコマンドを使用して、単一のリポジトリで単独で作業します。

@itemize 

@item
git-init(1) 新しいリポジトリを作成します。

@item
git-log(1) 何が起こったのか確認します。

@item
git-switch(1) と git-branch(1) ブランチを切り替えます。

@item
git-add(1) インデックスファイルを管理します。

@item
git-diff(1) と git-status(1) を使用して、あなたは何をしている最中か確認します。

@item
git-commit(1) を使用して、現在のブランチを進めます。

@item
git-restore(1) を使用して、変更を元に戻します(undo)。

@item
git-merge(1) は、ローカルブランチ間でマージします。

@item
git-rebase(1) は、トピックブランチを保守します。

@item
git-tag(1) を使用して、既知のポイントをマークします。
@end itemize

@noindent

@heading Examples

@table @asis

@item  新しいリポジトリの開始点としてtarballを使用します 
@example
$ tar zxf frotz.tar.gz
$ cd frotz
$ git init
$ git add . (1)
$ git commit -m "import of frotz source tree."
$ git tag v2.43 (2)
@end example


@table @asis

@item @pxref{CO1-1,,(1)}
あなたが現在いるディレクトリ下のすべてをaddします。

@item @pxref{CO1-2,,(2)}
軽量で注釈のないタグを作成します。
@end table

@item  トピックブランチを作成して開発します 
@example
$ git switch -c alsa-audio (1)
$ edit/compile/test
$ git restore curses/ux_audio_oss.c (2)
$ git add curses/ux_audio_alsa.c (3)
$ edit/compile/test
$ git diff HEAD (4)
$ git commit -a -s (5)
$ edit/compile/test
$ git diff HEAD^ (6)
$ git commit -a --amend (7)
$ git switch master (8)
$ git merge alsa-audio (9)
$ git log --since='3 days ago' (10)
$ git log v2.43.. curses/ (11)
@end example


@table @asis

@item @pxref{CO2-1,,(1)}
新しいトピックブランチを作成します。

@item @pxref{CO2-2,,(2)}
@samp{curses/ux_audio_oss.c} で失敗した変更を元に戻します(revert)。

@item @pxref{CO2-3,,(3)}
あなたは新しいファイルを追加したかどうかをGitに伝える必要があります。 後で @samp{git commit -a} を実行すると、削除と変更が捕捉されます。

@item @pxref{CO2-4,,(4)}
コミットしようとしている変更を確認します。

@item @pxref{CO2-5,,(5)}
あなたがテストしたと署名(sign-off)して、全てをコミットします。

@item @pxref{CO2-6,,(6)}
前のコミットを含むすべての変更を確認します。

@item @pxref{CO2-7,,(7)}
元のメッセージを流用して、以前のコミットを修正し、すべての新しい変更を追加します。

@item @pxref{CO2-8,,(8)}
masterブランチに切り替えます。

@item @pxref{CO2-9,,(9)}
トピックブランチをあなたのmasterブランチへマージします。

@item @pxref{CO2-10,,(10)}
コミットログを確認します。出力を制限する他の形式を組み合わせて、 @samp{-10} (最大10個のコミットを表示）、 @samp{--until=2005-12-10}
などを含めることができます。

@item @pxref{CO2-11,,(11)}
@samp{v2.43} タグ以降 、@samp{curses/} ディレクトリにあるものに影響を与える変更のみを表示します。
@end table
@end table

@noindent

@chapheading Individual Developer(Participant;グループプロジェクト参加者)

グループプロジェクトの参加者として作業する開発者個人は、他の人と連絡する方法を学ぶ必要があり、スタンドアロンの開発者個人が必要とするコマンドに加えて、これらのコマンドを使用します。

@itemize 

@item
git-clone(1) をアップストリームから実行して、あなたのローカルリポジトリを準備します。

@item
git-pull(1) と git-fetch(1) により、 "origin"
をアップストリームと共に最新の状態に保ちます。

@item
CVSスタイルの共有リポジトリワークフローを採用している場合、共有リポジトリのために git-push(1) を使います。

@item
Linuxカーネルスタイルのパブリックフォーラムワークフローを採用している場合に、 git-format-patch(1)
は電子メール送信を準備します。

@item
git-send-email(1) を使用して、MUAによる破損なしに電子メール送信を送信します。

@item
git-request-pull(1) を使用して、あなたのアップストリームがプルする変更の概要を作成します。
@end itemize

@noindent

@heading Examples

@table @asis

@item  アップストリームのクローンを作成して作業します。 変更をアップストリームに送ります。 
@example
$ git clone git://git.kernel.org/pub/scm/.../torvalds/linux-2.6 my2.6
$ cd my2.6
$ git switch -c mine master (1)
$ edit/compile/test; git commit -a -s (2)
$ git format-patch master (3)
$ git send-email --to="person <email@@example.com>" 00*.patch (4)
$ git switch master (5)
$ git pull (6)
$ git log -p ORIG_HEAD.. arch/i386 include/asm-i386 (7)
$ git ls-remote --heads http://git.kernel.org/.../jgarzik/libata-dev.git (8)
$ git pull git://git.kernel.org/pub/.../jgarzik/libata-dev.git ALL (9)
$ git reset --hard ORIG_HEAD (10)
$ git gc (11)
@end example


@table @asis

@item @pxref{CO3-1,,(1)}
master から新ブランチ @samp{mine} を作成し、 @samp{mine} でチェックアウトします。

@item @pxref{CO3-2,,(2)}
必要に応じてこの作業を繰り返します。

@item @pxref{CO3-3,,(3)}
masterに関連して、あなたのブランチからパッチを抽出します。

@item @pxref{CO3-4,,(4)}
そしてそれらを電子メールで送ります。

@item @pxref{CO3-5,,(5)}
@samp{master} に戻り、最新情報を確認する準備をします

@item @pxref{CO3-6,,(6)}
@samp{git pull} はデフォルトで @samp{origin} からフェッチし、現在のブランチにマージします。

@item @pxref{CO3-7,,(7)}
プルした直後に、前回チェックしてから上流で行われた変更を、関心のある領域でのみ確認します。

@item @pxref{CO3-8,,(8)}
(不明な場合)外部リポジトリのブランチ名を確認します。

@item @pxref{CO3-9,,(9)}
指定のリポジトリから、指定のブランチ @samp{ALL} をフェッチしマージします。

@item @pxref{CO3-10,,(10)}
プルしたのを元に戻します。(revert)

@item @pxref{CO3-11,,(11)}
ガベージコレクションは、元に戻されたプルからゴミオブジェクト(leftover objects)を収集します。
@end table

@item  別のリポジトリにプッシュします。 
@example
satellite$ git clone mothership:frotz frotz (1)
satellite$ cd frotz
satellite$ git config --get-regexp '^(remote|branch)\.' (2)
remote.origin.url mothership:frotz
remote.origin.fetch refs/heads/*:refs/remotes/origin/*
branch.master.remote origin
branch.master.merge refs/heads/master
satellite$ git config remote.origin.push \
           +refs/heads/*:refs/remotes/satellite/* (3)
satellite$ edit/compile/test/commit
satellite$ git push origin (4)

mothership$ cd frotz
mothership$ git switch master
mothership$ git merge satellite/master (5)
@end example


@table @asis

@item @pxref{CO4-1,,(1)}
マザーシップ機には、ホームディレクトリの下にfrotzリポジトリがあります。そこからクローンを作成して、サテライト機でリポジトリを開始します。

@item @pxref{CO4-2,,(2)}
cloneは、これらの構成変数をデフォルトで設定します。 これは、マザーシップ機のブランチをフェッチしてローカルの @samp{remotes/origin/*}
リモートトラッキングブランチに保存するために @samp{git pull} を手配します。

@item @pxref{CO4-3,,(3)}
すべてのローカルブランチをマザーシップ機の対応するブランチにプッシュするために @samp{git push} を手配します。

@item @pxref{CO4-4,,(4)}
pushは、マザーシップ機の @samp{remotes/satellite/*}
リモートトラッキングブランチへすべての作業をstashします。これをバックアップ方法として使用できます。同様に、あなたはそのマザーシップ機があなたから「フェッチされた」ふりをすることができます(アクセスが一方的な場合に便利です)。

@item @pxref{CO4-5,,(5)}
マザーシップ機で、サテライト機で行われた作業をmasterブランチにマージします。
@end table

@item  Branch off of a specific tag. 
@example
$ git switch -c private2.6.14 v2.6.14 (1)
$ edit/compile/test; git commit -a
$ git checkout master
$ git cherry-pick v2.6.14..private2.6.14 (2)
@end example


@table @asis

@item @pxref{CO5-1,,(1)}
よく知られている(ただし多少遅れている)タグに基づいてプライベートブランチを作成します。

@item @pxref{CO5-2,,(2)}
forward port all changes in @samp{private2.6.14} branch to @samp{master} branch
without a formal "merging". Or longhand + @samp{git format-patch -k -m --stdout
v2.6.14..private2.6.14 |
git am -3 -k}
@end table
@end table

別の参加者送信メカニズム(participant submission mechanism)は、 @samp{git request-pull} または
pull-request
メカニズム(GitHub（www.github.com）で使用されているものなど)を使用して、あなたの貢献をあなたのアップストリームに通知します。

@noindent

@chapheading インテグレーター

グループプロジェクトのインテグレーターとして機能するかなり中心的な人物は、他の人が行った変更を受け取り、それらをレビューして統合し、参加者が必要とするコマンドに加えて以下のコマンドを使用して、他の人が使用できるように結果を公開します。

このセクションのコマンドは、GitHub（www.github.com）で @samp{git request-pull} または pull-request
に応答するユーザーが、他のユーザーの作業を履歴に統合するために使用することもできます。 リポジトリの部分担当リーダー(sub-area
lieutenant)は、参加者とインテグレーターの両方として機能します。

@itemize 

@item
git-am(1) を使用して、寄稿者から電子メールで送信されて来たパッチを適用します。

@item
git-pull(1) を使用して、信頼できる部分担当リーダーの分からマージします。

@item
git-format-patch(1) を準備し、提案された代替案を寄稿者に送信します。

@item
git-revert(1) は、失敗したコミットを元に戻します。(revert)

@item
git-push(1) を使用して、最先端を公開します。
@end itemize

@noindent

@heading Examples

@table @asis

@item  典型的なGitインテグレーターの一日。 
@example
$ git status (1)
$ git branch --no-merged master (2)
$ mailx (3)
& s 2 3 4 5 ./+to-apply
& s 7 8 ./+hold-linus
& q
$ git switch -c topic/one master
$ git am -3 -i -s ./+to-apply (4)
$ compile/test
$ git switch -c hold/linus && git am -3 -i -s ./+hold-linus (5)
$ git switch topic/one && git rebase master (6)
$ git switch -C seen next (7)
$ git merge topic/one topic/two && git merge hold/linus (8)
$ git switch maint
$ git cherry-pick master~4 (9)
$ compile/test
$ git tag -s -m "GIT 0.99.9x" v0.99.9x (10)
$ git fetch ko && for branch in master maint next seen (11)
    do
        git show-branch ko/$branch $branch (12)
    done
$ git push --follow-tags ko (13)
@end example


@table @asis

@item @pxref{CO6-1,,(1)}
どちらかといえば、あなたが途中で何をしていたかを見てください。

@item @pxref{CO6-2,,(2)}
@samp{master} にマージされていないのがどのブランチかを確認してください。他の統合ブランチ(@samp{maint} 、` next` 、
@samp{seen})についても同様です。

@item @pxref{CO6-3,,(3)}
メールを読んだり、該当するものを保存したり、準備が整っていないものを保存したりします(他のメールリーダーも利用できます)。

@item @pxref{CO6-4,,(4)}
あなたの署名伴って、対話的にそれらを適用します。

@item @pxref{CO6-5,,(5)}
必要に応じてトピックブランチを作成し、再度署名して適用します。

@item @pxref{CO6-6,,(6)}
masterにマージされていない、または安定したブランチの一部として公開されていない内部トピックブランチをリベースします。

@item @pxref{CO6-7,,(7)}
next から 毎回 @samp{seen} を再スタートします。

@item @pxref{CO6-8,,(8)}
そして、まだ調理中のトピックブランチをバンドルします。

@item @pxref{CO6-9,,(9)}
深刻な修正をバックポートします。

@item @pxref{CO6-10,,(10)}
署名付きタグを作成します。

@item @pxref{CO6-11,,(11)}
masterがすでにpushされたものを超えて誤って巻き戻されていないことを確認してください。

@item @pxref{CO6-12,,(12)}
@samp{git show-branch} からの出力では、 @samp{master} には @samp{ko/master} が持つすべてのものが含まれ、 @samp{next} には
@samp{ko/next} が持つすべてのものが含まれる必要があります。

@item @pxref{CO6-13,,(13)}
プッシュされた履歴を指す新しいタグとともに、最先端をプッシュします。
@end table
@end table

この例では、 @samp{ko} の省略形はkernel.orgにあるGitメンテナのリポジトリを指しており、以下のようになります:

@example
(in .git/config)
[remote "ko"]
        url = kernel.org:/pub/scm/git/git.git
        fetch = refs/heads/*:refs/remotes/ko/*
        push = refs/heads/master
        push = refs/heads/next
        push = +refs/heads/seen
        push = refs/heads/maint
@end example


@noindent

@chapheading リポジトリ管理

リポジトリ管理者は、以下のツールを使用して、開発者によるリポジトリへのアクセスを設定および維持します。

@itemize 

@item
git-daemon(1) を使用して、リポジトリからの匿名ダウンロードを許可します。

@item
git-shell(1) は、共有中央リポジトリユーザーの「制限付きログインシェル」として使用できます。

@item
git-http-backend(1) は、フェッチサービスとプッシュサービスの両方を可能にする
Git-over-HTTP(スマートhttp)のサーバー側実装を提供します。

@item
gitweb(1) は、GitリポジトリへのWebフロントエンドを提供します。これは、 git-instaweb(1)
スクリプトを使用して設定できます。
@end itemize

@uref{howto/update-hook-example.html,update hook howto}
には、共有中央リポジトリを管理する良い例があります。

さらに、以下のような他の広く展開されているホスティング、ブラウジング、レビューソリューションがいくつかあります:

@itemize 

@item
gitolite 、 gerrit code review 、 cgit 、その他。
@end itemize

@noindent

@heading Examples

@table @asis

@item  @samp{/etc/services} では以下を前提としています 
@example
$ grep 9418 /etc/services
git             9418/tcp                # Git Version Control System
@end example


@item  Run git-daemon to serve /pub/scm from inetd. 
@example
$ grep git /etc/inetd.conf
git     stream  tcp     nowait  nobody \
  /usr/bin/git-daemon git-daemon --inetd --export-all /pub/scm
@end example


実際の行は1行で書く必要があります。

@item  Run git-daemon to serve /pub/scm from xinetd. 
@example
$ cat /etc/xinetd.d/git-daemon
# default: off
# description: The Git server offers access to Git repositories
service git
@{
        disable = no
        type            = UNLISTED
        port            = 9418
        socket_type     = stream
        wait            = no
        user            = nobody
        server          = /usr/bin/git-daemon
        server_args     = --inetd --export-all --base-path=/pub/scm
        log_on_failure  += USERID
@}
@end example


あなたの xinetd(8) のドキュメントとセットアップを確認してください。これはFedoraシステムからのものです。その他は異なる場合があります。

@item  Give push/pull only access to developers using git-over-ssh. 
例えばこのように使います: @samp{$ git push/pull ssh://host.xz/pub/scm/project}

@example
$ grep git /etc/passwd (1)
alice:x:1000:1000::/home/alice:/usr/bin/git-shell
bob:x:1001:1001::/home/bob:/usr/bin/git-shell
cindy:x:1002:1002::/home/cindy:/usr/bin/git-shell
david:x:1003:1003::/home/david:/usr/bin/git-shell
$ grep git /etc/shells (2)
/usr/bin/git-shell
@end example


@table @asis

@item @pxref{CO7-1,,(1)}
ログインシェルは /usr/bin/git-shell に設定されており、 @samp{git push} と @samp{git pull}
以外は許可されていません。ユーザーはマシンへのsshアクセスを必要とします。

@item @pxref{CO7-2,,(2)}
多くのディストリビューションでは、 /etc/shells にはログインシェルとして使用されるものをリストする必要があります。
@end table

@item  CVS-style shared repository. 
@example
$ grep git /etc/group (1)
git:x:9418:alice,bob,cindy,david
$ cd /home/devo.git
$ ls -l (2)
  lrwxrwxrwx   1 david git    17 Dec  4 22:40 HEAD -> refs/heads/master
  drwxrwsr-x   2 david git  4096 Dec  4 22:40 branches
  -rw-rw-r--   1 david git    84 Dec  4 22:40 config
  -rw-rw-r--   1 david git    58 Dec  4 22:40 description
  drwxrwsr-x   2 david git  4096 Dec  4 22:40 hooks
  -rw-rw-r--   1 david git 37504 Dec  4 22:40 index
  drwxrwsr-x   2 david git  4096 Dec  4 22:40 info
  drwxrwsr-x   4 david git  4096 Dec  4 22:40 objects
  drwxrwsr-x   4 david git  4096 Nov  7 14:58 refs
  drwxrwsr-x   2 david git  4096 Dec  4 22:40 remotes
$ ls -l hooks/update (3)
  -r-xr-xr-x   1 david git  3536 Dec  4 22:40 update
$ cat info/allowed-users (4)
refs/heads/master       alice\|cindy
refs/heads/doc-update   bob
refs/tags/v[0-9]*       david
@end example


@table @asis

@item @pxref{CO8-1,,(1)}
開発者を同じgitグループに配置します。

@item @pxref{CO8-2,,(2)}
そして、共有リポジトリをグループで書き込み可能にします。

@item @pxref{CO8-3,,(3)}
ブランチポリシーの制御には、 Documentation/howto/ の Carl による update-hook の例を使用してください。

@item @pxref{CO8-4,,(4)}
alice と cindy はmasterにプッシュでき、bobだけがdoc-updateにプッシュできます。
davidはリリースマネージャーであり、バージョンタグを作成してプッシュできる唯一の人物です。
@end table
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitfaq,,,Top
@chapheading Name

gitfaq — Gitの使用に関するよくある質問(FAQ)

@noindent

@chapheading Synopsis

gitfaq

@noindent

@chapheading DESCRIPTION

このFAQの例では、 @samp{bash} や @samp{dash} などの標準のPOSIXシェルと、ホスティングプロバイダー @samp{git.example.org}
にアカウント @samp{author} を持つユーザー A U Thor を想定しています。

@noindent

@chapheading Configuration

@table @asis


@item  @samp{user.name} には何を入れるべきですか？ 
個人名、通常は名前とファミリーネームを使用した形式を入力する必要があります。たとえば、Gitの現在のメンテナは "Junio C Hamano" (濱野
純)を使用しています。 これは、コミットするたびに保存される名前の部分になります。

この構成は、リモートサービスへの認証には影響しません。 そのためには、 git-config(1) の
@samp{credential.username} を参照してください。

@item  @samp{http.postBuffer} は実際には何をしますか？ 
このオプションは、HTTPまたはHTTPSを介してデータをリモートにプッシュするときにGitが使用するバッファーのサイズを変更します。データがこのサイズより大きい場合、GitのHTTPサポートを処理するlibcurlは、プッシュされたデータのサイズが事前にわからないため、チャンク転送エンコーディングを使用します。

リモートサーバーまたは中間のプロキシが、(チャンク転送エンコーディングを導入している) HTTP/1.1
をサポートしていないか、チャンクデータが壊れていることがわかっている場合を除いて、この値をデフォルトサイズのままにしておくことは問題ありません。これは一般的なプッシュ問題の解決策として、(誤って)提案されることがよくありますが、ほとんどすべてのサーバーとプロキシが少なくとも
HTTP/1.1 はサポートしているため、この値を上げてもほとんどのプッシュ問題は解決されません。 HTTP/1.1
とチャンク転送エンコーディングを正しくサポートしていなかったサーバーまたはプロキシは、大量のトラフィックを遮断するため、今日のインターネットでは無用の長物です。

注意:
この値を増やすと、GitがHTTPまたはHTTPSを介して行うすべての関連プッシュで使用されるメモリが増えることに注意してください。これは、すべてが使用されているかどうかに関係なく、バッファ全体が割り当てられるためです。したがって、別の値が必要であることが確実でない限り、デフォルトのままにしておくことをお勧めします。

@item  別のエディタを構成するにはどうすればよいですか？ 
Git専用のエディターを指定していない場合は、デフォルトで、「VISUAL」または「EDITOR」環境変数を使用して構成したエディターが使用されます。どちらも指定されていない場合は、システムのデフォルト(通常は「vi」)が使用されます。
@samp{vi} は使いにくい、または別のエディターを好む人もいるため、使用するエディターを変更することが望ましい場合があります。

エディタを必要とするプログラム用に、あなたがエディタを構成したい場合、シェル構成(つまり、 @samp{~/.bashrc} とか
@samp{~/.zshenv})を編集して、 @samp{EDITOR} または @samp{VISUAL}
環境変数に適切な値に設定する行を含めることができます。たとえば、エディタ @samp{nano} が必要な場合は、以下のように記述できます:

@example
export VISUAL=nano
@end example


あなたがGit専用のエディタを構成したい場合は、 @samp{core.editor} 構成 または @samp{GIT_EDITOR}
環境変数を設定できます。これらのオプションが参照される順序の詳細については git-var(1) を参照してください。

注意:
いずれの場合も、エディタの値はシェルに渡されるため、スペースを含む引数は適切に引用符で囲む必要があることに注意してください。さらに、エディタが呼び出されたとき、通常ターミナルからデタッチするタイプのエディタ場合は、それを行わないようにする引数を指定して指定する必要があります。そうしないと、Gitはエディタでの変更を認識しません。
Windowsでこれらの問題の両方に対処する構成の例は、構成 @samp{"C:\Program Files\Vim\gvim.exe" --nofork}
です。これは、空白を含んだファイル名をクォートし、プロセスのバックグラウンド実行を回避するため @samp{--nofork} オプションを指定します。
@end table

@noindent

@chapheading Credentials

@table @asis


@item  HTTPでプッシュするときに資格情報を指定するにはどうすればよいですか？ 
これを行う最も簡単な方法は、 @samp{credential.helper}
構成を介して資格情報ヘルパーを使用することです。ほとんどのシステムは、システム資格情報マネージャーと統合するための標準的な選択肢を提供します。たとえば、Git
for
Windowsは「wincred」資格情報マネージャーを提供し、macOSは「osxkeychain」資格情報マネージャーを提供し、標準デスクトップ環境を備えたUnixシステムは「libsecret」資格情報マネージャーを使用できます。
これらはすべて、パスワードまたはトークンを安全に保つために暗号化されたストアに資格情報を保存します。

さらに、ホームディレクトリのファイルに保存する @samp{store}
資格情報マネージャー、または資格情報を永続的に保存しないが、特定の時間、資格情報の入力を求められないようにする @samp{cache}
資格情報マネージャーを使用できます。

プロンプトが表示されたら、パスワードを入力することもできます。
URLにパスワード(パーセントエンコードする必要があります)を配置することは可能ですが、これは全然安全じゃ無く、誤って資格情報が公開される可能性があるため、お勧めしません。

@item  環境変数からパスワードまたはトークンを読み取るにはどうすればよいですか？ 
@samp{credential.helper}
構成オプションは、標準出力で資格情報プロトコルを生成する任意のシェルコマンドを受け取ることもできます。これは、たとえば、資格情報をコンテナに渡すときに役立ちます。

このようなシェルコマンドは、オプション値を感嘆符(@samp{!})で開始することで指定できます。パスワードまたはトークンが @samp{GIT_TOKEN}
に保存されている場合は、以下のコマンドを実行して資格情報ヘルパーを設定できます:

@example
$ git config credential.helper \
        '!f() @{ echo username=author; echo "password=$GIT_TOKEN"; @};f'
@end example


@item  資格情報マネージャーに保存したパスワードまたはトークンを変更するにはどうすればよいですか？ 
通常、パスワードまたはトークンが無効な場合、Gitはそれを消去し、新しいものを要求します。ただし、これが常に発生するとは限りません。パスワードまたはトークンを変更するには、既存の資格情報を消去してください。そうすればGitが新しい資格情報の入力を求めます。資格情報を消去するには、以下の構文を使用します(ユーザー名(「author」の部分)とホスト名(「git.example.org」の部分)をあなた自身のに置き換えてください):

@example
$ echo url=https://author@@git.example.org | git credential reject
@end example


@item  HTTPを使用して同じホスティングプロバイダーで複数のアカウントを使用するにはどうすればよいですか？ 
通常、これらのアカウントを区別する最も簡単な方法は、URLでユーザー名を使用することです。 たとえば、 @samp{git.example.org} にアカウント
@samp{author} と @samp{committer} がある場合、URLに
@uref{https://author@@git.example.org/org1/project1.git,https://author@@git.example.org/org1/project1.git} と
@uref{https://committer@@git.example.org/org2/project2.git,https://committer@@git.example.org/org2/project2.git}
を使用できます。このように、資格情報ヘルパーを使用すると、アカウントの正しい資格情報が自動的に検索されます。すでにリモートを設定している場合は @samp{git
remote set-url origin https://author@@git.example.org/org1/project1.git}
としてURLを変更できます(詳細は git-remote(1) を参照)。

@item  SSHを使用して同じホスティングプロバイダーで複数のアカウントを使用するにはどうすればよいですか？ 
SSHをサポートするほとんどのホスティングプロバイダーでは、単一のキーペアがユーザーを一意に識別します。したがって、複数のアカウントを使用するには、アカウントごとにキーペアを作成する必要があります。適度に最新のOpenSSHバージョンを使用している場合は
@samp{ssh-keygen -t ed25519 -f ~/.ssh/id_committer}
などとして新しいキーペアを作成できます。次に、公開鍵(この場合は @samp{~/.ssh/id_committer.pub} ※拡張子 @samp{.pub} に注意)
をホスティングプロバイダーに登録できます。

ほとんどのホスティングプロバイダーは、プッシュに単一のSSHアカウントを使用します。つまり、すべてのユーザーが @samp{git} アカウント(例:
@samp{git@@git.example.org})にプッシュします。プロバイダーの場合は、SSHで複数のエイリアスを設定して、使用するキーペアを明確にすることができます。たとえば、以下のようなのを
@samp{~/.ssh/config} に記述して、適切な秘密鍵ファイルに置き換えることができます:

@example
# This is the account for author on git.example.org.
Host example_author
        HostName git.example.org
        User git
        # This is the key pair registered for author with git.example.org.
        IdentityFile ~/.ssh/id_author
        IdentitiesOnly yes
# This is the account for committer on git.example.org.
Host example_committer
        HostName git.example.org
        User git
        # This is the key pair registered for committer with git.example.org.
        IdentityFile ~/.ssh/id_committer
        IdentitiesOnly yes
@end example


こうすれば、あなたはプッシュURLを調整して、 @samp{git@@example.org} の代わりに @samp{git@@example_author} または
@samp{git@@example_committer} を使用できます(例: @samp{git remote set-url
git@@example_author:org1/project1.git}) 。
@end table

@noindent

@chapheading Common Issues

@table @asis


@item  前回のコミットでミスをしました。どうすれば変更できますか？ 
作業ツリーに適切な変更を加え、必要に応じて @samp{git add <file>} または @samp{git rm <file>} を実行してステージングしてから、
@samp{git commit --amend}
を実行できます。変更はコミットに含まれ、コミットメッセージを再度編集するように求められます。元のメッセージをそのまま使用したい場合は、
@samp{--no-edit} オプションを伴ってて @samp{git commit}
を使用するか、または、エディタが開いたら何もせず保存して終了して済ませることもできます。

@item  バグで変更を加えましたが、それは既にメインブランチに含まれてしまっています。どうすれば元に戻すことができますか？ 
これに対処する通常の方法は、 @samp{git revert}
を使用することです。これにより、元の変更が行われて貴重な貢献であった、という履歴が保持されるとともに、元の変更に問題があったためにそれらの変更を元に戻す新しいコミットも導入されます。revertのコミットメッセージは、復帰(revert)されたコミットを示し、通常、復帰(revert)が行われた理由に関する説明を含むように編集されます。

@item  追跡されているファイルへの変更を無視するにはどうすればよいですか？ 
Gitはこれを行う方法を提供していません。
その理由は、チェックアウト中など、Gitがこのファイルを上書きする必要がある場合、ファイルへの変更が貴重で保持されるべきかどうか、または無関係で安全に破棄できるかどうかがわからないためです。したがって、安全なルートを取り、常にそれらを保存する必要があります。

@samp{git update-index}
の特定の機能、つまり、assume-unchangedビットとskip-worktreeビットを使おうとするのは魅力的ですが、これらはこの目的には適切に機能しないため、このように使用しないでください。

あなたの目的が構成ファイルを変更することの場合は、テンプレートまたはデフォルトのセットであるファイルをリポジトリにチェックインして、一緒にコピーして必要に応じて変更できると便利なことがよくあります。この場合の変更されたファイルは、誤ってコミットすることを防ぐために、通常は無視されます。

@item  さまざまなファイルを無視するようにGitに依頼したはずなのに、それらはまだ追跡されています 
@samp{gitignore} ファイルは、Gitによって追跡されていない特定のファイルが追跡されないままであることを保証します。ただし、特定のファイルが
@samp{.gitignore} に追加される前に追跡されている場合は追跡されたままになります。ファイル/パターン を追跡解除して無視するには、 @samp{git rm
--cached <file/pattern>} を使用し、 <file> に一致するパターンを @samp{.gitignore} に追加します。詳細については
gitignore(5) を参照してください。

@item  フェッチまたはプルのどちらを実行すればよいか知るにはどうすればよいですか？ 
フェッチは、作業ツリーや現在のブランチを変更せずに、リモートリポジトリからの最新の変更のコピーを保存します。その後、自由に、アップストリームの変更を検査、マージ、リベース、または無視することができます。プルは、フェッチとその直後のマージまたはリベースで構成されます。
git-pull(1) を参照してください。
@end table

@noindent

@chapheading Merging and Rebasing

@table @asis


@item  寿命の長いブランチをスカッシュマージとマージすると、どのような問題が発生する可能性がありますか？ 
一般に、スカッシュマージを使用して2つのブランチを複数回マージすると、さまざまな問題が発生する可能性があります。これには、GUIを使用した場合、または
@samp{...`表記を使用して範囲を表す場合に、 `git log}
出力で追加のコミットが表示されることや、競合を何度も再解決する必要がある可能性が含まれます。

Gitが2つのブランチ間で通常のマージを行う場合、正確に3者が考慮されます。2つのブランチと、通常は2つのコミットの共通の祖先である「マージベース」(merge
base)と呼ばれる3番目のコミットです。マージの結果は、マージベースと各headの間の変更の合計です。2つのブランチを通常のマージコミットでマージすると、新しい共通の祖先を持つ、新しいコミットが発生し、再度マージされるときはそれが最終的なマージベースになります。そうすると、Gitは、マージベースの前に発生した変更を考慮する必要がないため、以前に解決した競合を再解決する必要がありません。

スカッシュマージを実行する場合、マージコミットは作成されません。代わりに、一方の側からの変更は、もう一方の側への通常のコミットとして適用されます。つまり、これらのブランチのマージベースは変更されないため、Gitが次のマージを実行するときに、前回考慮したすべての変更と新しい変更が考慮されます。つまり、競合を再解決する必要があるかもしれません。
同様に、 @samp{git diff} または @samp{git log} またはGUIで @samp{...}
表記を使用すると、元のマージベース以降のすべての変更が表示されます。

結果として、2つの長期間有効なブランチを繰り返しマージする場合は、常に通常のマージコミットを使用するのが最善です。

@item  2つのブランチに変更を加えた後、それを1つに戻した場合、それら2つのブランチのマージに変更が含まれるのはなぜですか？ 
デフォルトでは、Gitがマージを行うとき、それは「ort」戦略と呼ばれる戦略を使用します。これは、派手な3者間マージ(fancy three-way
merge)を行います。
このような場合、Gitはマージを実行するときに、正確に3つのポイントを考慮します。2つのheadと、通常はこれらのコミットの共通の祖先である「マージベース」(merge
base)と呼ばれる3番目のポイントです。 Gitは、これらのブランチで発生した履歴や個々のコミットをまったく考慮しません。

その結果、両方の側に変更があり、一方の側がその変更を元に戻した場合、結果には変更が含まれます。
これは、コードが一方の側で変更され、もう一方の側では正味の変更がないためです。このシナリオでは、Gitが変更を採用します。

これが問題になる場合は、代わりにリベースを実行して、ブランチを他のブランチに戻すことでリベースすることができます。このシナリオでのリベースは変更を元に戻します。これは、リベースが元に戻すことを含め、個々のコミットを適用するためです。リベースは書き換え履歴(rewrite
history)をリベースするため、問題がない場合を除いて、公開されたブランチのリベースは避けてください。詳細については、
git-rebase(1)のNOTESセクションを参照してください。
@end table

@noindent

@chapheading Hooks

@table @asis


@item  フックを使用して、ユーザーが特定の変更を行うのを妨げるにはどうすればよいですか？ 
これらの変更を行うための唯一の安全な場所は、リモートリポジトリ(つまり、Gitサーバー)で、通常は @samp{pre-receive}
フックまたは継続的インテグレーション(CI)システムです。これらは、ポリシーを効果的に実施できる場所です。

@samp{pre-commit} フック(または、コミットメッセージの場合は @samp{commit-msg}
フック)を使用してこれらをチェックするのが一般的です。これは、単独の開発者として作業していて、ツールが役立つことを望んでいる場合に最適です。ただし、開発者のマシンでフックを使用することは、ユーザーが(他のさまざまな方法の中でも)気付かれることなく
@samp{--no-verify} でこれらのフックをバイパスできるため、ポリシーコントロールとしては効果的ではありません。
Gitは、ユーザーがローカルリポジトリを管理していることを前提としており、これを防止したり、ユーザーを攻撃したりすることはありません。

さらに、一部の上級ユーザーは、「pre-commit」フックが、一時的なコミットを使用して進行中の作業をステージングしたり、修正コミットを作成したりするワークフローの障害であると感じているため、とにかくこれらの種類のチェックはサーバーに押しやることをお勧めします。
@end table

@noindent

@chapheading Cross-Platform Issues

@table @asis


@item  Windowsを使用していますが、テキストファイルがバイナリとして検出されます。 
Gitは、テキストファイルをUTF-8として保存する場合に最適に機能します。Windows上の多くのプログラムはUTF-8をサポートしていますが、Gitがバイナリとして検出するリトルエンディアンのUTF-16形式を使用していないプログラムもあります。プログラムでUTF-8を使用できない場合は、これらのファイルをUTF-8としてリポジトリに保存しながら、ファイルをチェックアウトするエンコードを示す作業ツリーエンコーディング(working
tree encoding)を指定できます。これにより、 git-diff(1)
などのツールを期待どおりに機能させながら、ツールを機能させることができます。

これを行うには、 @samp{working-tree-encoding} 属性を使用して gitattributes(5)
パターンを指定できます。たとえば、以下のパターンは、Windowsで一般的なエンコーディングである UTF-16LE-BOM
を使用するようにすべてのC言語ファイルを設定します:

@example
*.c     working-tree-encoding=UTF-16LE-BOM
@end example


これを有効にするには、 @samp{git add --renormalize}
を実行する必要があります。プラットフォーム間で使用されるプロジェクトでこれらの変更を行う場合は、ユーザーごとの構成ファイルまたは
@samp{$GIT_DIR/info/attributes} の構成ファイルで行う必要があることに注意してください。リポジトリ内の
@samp{.gitattributes} ファイルは、リポジトリのすべてのユーザーに適用されます。

行末の正規化については以下のエントリを参照してください。属性ファイルの詳細については、gitattributes(5)
を参照してください。

@item  Windowsの git diff はファイルの最後に @samp{^M} があると表示します。 
デフォルトでは、GitはファイルがUnixの行末で保存されることを想定しています。そのため、Windowsの行末の一部であるキャリッジリターン(@samp{^M})は、末尾の空白と見なされるため、表示されます。Gitはデフォルトで、既存の行ではなく、新しい行にのみ末尾の空白を表示します。

ファイルをUnixの行末でリポジトリに保存し、プラットフォームの行末に自動的に変換できます。 これを行うには、構成オプション @samp{core.eol} を
@samp{native} に設定し、以下のエントリで、ファイルをテキストまたはバイナリとして構成する方法について確認してください。

行末からキャリッジリターン(CR;\x0d)を削除したくない場合は、 @samp{core.whitespace}
設定を使用してこの動作を制御することもできます。

@item  常に変更されるファイルがあるのはなぜですか？ 
内部的には、Gitは常にファイル名をバイトのシーケンスとして保存し、エンコードや大文字と小文字の区別は行いません。
ただし、WindowsとmacOSはどちらも、デフォルトでファイル名に対して大文字と小文字を区別します。その結果、大文字と小文字が区別される場合にのみ名前が異なる複数のファイルまたはディレクトリが作成される可能性があります。Gitはこれを問題なく処理できますが、ファイルシステムはこれらのファイルの1つしか保存できないため、Gitが他のファイルを読み取ってその内容を確認すると、変更されているように見えます。

ファイルが1つだけになるように、ファイルの1つを削除することをお勧めします。これは、以下のようなコマンド(2つのファイル @samp{AFile.txt}
と`afile.txt` を想定)を使用して、他の点ではクリーンな作業ツリーで実行できます:

@example
$ git rm --cached AFile.txt
$ git commit -m 'Remove files conflicting in case'
$ git checkout .
@end example


これにより、ディスクへの変更は回避され、追加のファイルは削除されます。プロジェクトでは、この問題が再発しないように、すべて小文字の名前などの命名規則を採用することをお勧めします。このような規則は、
@samp{pre-receive} フックを使用して、または継続的インテグレーション(CI)システムにてチェックできます。

システムでスマッジまたはクリーンフィルター(a smudge or clean
filter)が使用されているが、スマッジまたはクリーンフィルターを実行せずにファイルが以前にコミットされた場合、任意のプラットフォームで永続的に変更されたファイルが発生する可能性もあります。これを修正するには、他の点ではクリーンな作業ツリーで以下を実行します:

@example
$ git add --renormalize .
@end example


@item  Gitにファイルを保存するための推奨の方法は何ですか？ 
Gitはあらゆるタイプのあらゆるファイルを保存および処理できますが、他の設定よりもうまく機能する設定がいくつかあります。一般に、テキストファイルは、LF(Unixスタイル)で終わるバイト順マーク(BOM)なしでUTF-8に保存することをお勧めします。また、コミットメッセージでUTF-8(ここでもBOMなし)を使用することをお勧めします。これらは、プラットフォーム間や
@samp{git diff} や @samp{git merge} などのツールで最適に機能する設定です。

さらに、テキストベースまたは非テキストベースのストレージ形式を選択できる場合は、ファイルをテキスト形式で保存し、必要に応じて他の形式に変換することをお勧めします。たとえば、1行に1つのレコードを持つテキストベースのSQLダンプは、実際のデータベースファイルよりも差分とマージにはるかに適しています。同様に、MarkdownやAsciiDocなどのテキストベースの形式は、MicrosoftWordやPDFなどのバイナリ形式よりもうまく機能します。

同様に、バイナリ依存関係(共有ライブラリやJARファイルなど)を格納したり、リポジトリに製品をビルドしたりすることは、通常はお勧めしません。依存関係とビルド製品は、リポジトリに保存されている参照、URL、ハッシュのみを使用して、アーティファクトサーバーまたはパッケージサーバーに保存するのが最適です。

また、 gitattributes(5)
ファイルを設定して、どのファイルがテキストでどのファイルがバイナリであるかを明示的にマークすることをお勧めします。Gitに推測させたい場合は、属性
@samp{text=auto} を設定できます。 たとえば、一部のプロジェクトでは以下の設定が適切な場合があります:

@example
# By default, guess.
*       text=auto
# Mark all C files as text.
*.c     text
# Mark all JPEG files as binary.
*.jpg   binary
@end example


これらの設定は、ツールがパッチなどの出力に適切な形式を選択するのに役立ち、プラットフォームに適切な行末コードでファイルがチェックアウトされます。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitglossary,,,Top
@chapheading Name

gitglossary — Git用語集

@noindent

@chapheading Synopsis

*

@noindent

@chapheading DESCRIPTION

@table @asis

@item  alternate object database 
代役(alternate)メカニズムを介して、 リポジトリ (@pxref{[def_repository]}) は
オブジェクトデータベース (@pxref{[def_object_database]}) の一部を "alternate" (代役)
呼ばれる別のオブジェクトデータベースから継承できます。

@item  bare repository 
ベアリポジトリは通常、適切な名前のディレクトリ (@pxref{[def_directory]})で、接尾辞は @samp{.git}
で、リビジョン管理下にあるファイルのローカルでチェックアウトされたコピーはありません。つまり、通常は非表示の @samp{.git}
サブディレクトリに存在するすべてのGit管理ファイルと制御ファイルは、代わりに @samp{repository.git}
ディレクトリに直接存在し、他のファイルは存在せず、チェックアウトされません。通常、公開リポジトリの発行者は、ベアリポジトリを利用可能にします。

@item  blob object(ブロブオブジェクト) 
型の無いオブジェクト (@pxref{[def_object]})。例:ファイルの中身。

@item  branch 
「ブランチ」は開発ラインです。ブランチの最新のコミット (@pxref{[def_commit]})は、そのブランチの先端(the tip of that
branch)と呼ばれます。ブランチの先端はブランチhead (@pxref{[def_head]})によって参照され、ブランチで追加の開発が行われると前進します。単一のGit
リポジトリ (@pxref{[def_repository]})は任意の数のブランチを追跡できますが、あなたの作業ツリー (@pxref{[def_working_tree]})はそのうちの1つ(「current
branch」(現在のブランチ)または「checked out branch」(チェックアウトされたブランチ))に関連付けられ、
HEAD (@pxref{[def_HEAD]}) はそのブランチを指します。

@item  cache 
廃止。 index (@pxref{[def_index]}) を使ってください。

@item  chain(チェーン,チェイン) 
オブジェクトのリスト。リスト内の各 オブジェクト (@pxref{[def_object]}) には、その後ろへの参照が含まれます(たとえば、
コミット (@pxref{[def_commit]}) の後ろはその 親 (@pxref{[def_parent]}) の1つである可能性があります)。

@item  changeset 
"コミット (@pxref{[def_commit]})" の BitKeeper/cvsps
での言い方です。Gitで変更を保存せず状態を保存するため、Gitでコミットを「changeset」と呼ぶのはナンセンスです。

@item  checkout 
作業ツリー (@pxref{[def_working_tree]})の全部または一部をオブジェクトデータベース (@pxref{[def_object_database]})のツリーオブジェクト (@pxref{[def_tree_object]})またはブロブ (@pxref{[def_blob_object]})で更新し、作業ツリー全体が新しいブランチ (@pxref{[def_branch]})を指している場合は、インデックス (@pxref{[def_index]})とHEAD (@pxref{[def_HEAD]})を更新する操作。

@item  cherry-picking(チェリーピック,チェリーピッキング) 
SCM (@pxref{[def_SCM]}) の専門用語では、 "cherry pick"
(つまみ食い)とは、一連の変更(通常はコミット)から変更のサブセットを選択し、それらを別のコードベースの上に新しい一連の変更として記録することを意味します。Gitでは、これは
"git cherry-pick"
コマンドによって実行され、既存のコミット (@pxref{[def_commit]})によって導入された変更を抽出し、現在のブランチ (@pxref{[def_branch]})の先端に基づいてそれを新しいコミットとして記録します。

@item  clean 
現在のhead (@pxref{[def_head]})が参照するリビジョン>と<<def_working_tree (@pxref{[def_revision]})が完全に一致(correspond)しているのであれば、その作業ツリー (@pxref{[def_working_tree]})はクリーンです。「dirty (@pxref{[def_dirty]})」も参照下さい。

@item  commit 
名詞として:
Gitの履歴における一つのポイント。プロジェクトの履歴全体は、相互に関連する一連のコミットとして表されます。「コミット」という言葉は、他のリビジョン管理システムが「リビジョン」または「バージョン」という言葉を使用するのと同じ場所で、Gitによってよく使用されます。
コミットオブジェクト (@pxref{[def_commit_object]}) の省略形としても使用されます。

動詞として(コミットする):
インデックス (@pxref{[def_index]})の現在の状態を表す新しいコミットを作成し、その新しいコミットをポイントするようにHEAD (@pxref{[def_HEAD]})を進めることにより、プロジェクトの状態の新しいスナップショットをGit履歴に保存する操作。

@item  commit object 
親 (@pxref{[def_parent]})、コミッター、作者、日付、保存されたリビジョンの最上位ディレクトリ (@pxref{[def_directory]})に対応するツリーオブジェクト (@pxref{[def_tree_object]})など、特定のリビジョン (@pxref{[def_revision]})に関する情報を含むオブジェクト (@pxref{[def_object]})。

@item  commit-ish (also committish)(コミットっぽい;コミット風) 
コミットオブジェクト (@pxref{[def_commit_object]})または、コミットオブジェクト (@pxref{[def_commit_object]})に再帰的に逆参照可能なオブジェクト (@pxref{[def_object]})。
コミットオブジェクト (@pxref{[def_commit_object]})や、コミットオブジェクト (@pxref{[def_commit_object]})を指すタグオブジェクト (@pxref{[def_tag_object]})や、コミットオブジェクト (@pxref{[def_commit_object]})を指すタグオブジェクト (@pxref{[def_tag_object]})を指すタグオブジェクト (@pxref{[def_tag_object]})などは全てcommit-ish(commit-ishes)です。

@item  core Git 
Gitの基本的なデータ構造とユーティリティ。これは、限定的なソースコード管理ツールのみです。

@item  DAG 
有向非巡回グラフ(Directed acyclic graph)。 コミットオブジェクト (@pxref{[def_commit_object]})
は、(有向の)親を持ち、コミットオブジェクトのグラフが非巡回(同じ オブジェクト (@pxref{[def_object]}) で開始・終了する
チェイン (@pxref{[def_chain]}) はありません)であるため有向非巡回グラフを形成します。

@item  dangling object 
(ぶらぶら揺れるオブジェクト)他の到達不能オブジェクト (@pxref{[def_unreachable_object]})からでも到達できない到達不能オブジェクト (@pxref{[def_unreachable_object]})。
danglingオブジェクトには、リポジトリ (@pxref{[def_repository]})内の任意のrefまたはオブジェクト (@pxref{[def_object]})からの参照はありません。

@item  detached HEAD 
通常、HEAD (@pxref{[def_HEAD]})はブランチ (@pxref{[def_branch]})の名前を格納し、HEADが示す履歴を操作するコマンドは、HEADが指すブランチの先端につながる履歴を操作します。
ただし、Gitでは、必ずしも特定のブランチの先端ではない任意のコミット (@pxref{[def_commit]})をチェックアウト (@pxref{[def_checkout]})することもできます。このような状態のHEADを「detached」(切り離されている、デタッチされている)と呼びます。

注意: 現在のブランチの履歴を操作するコマンド(たとえば、その上に新しい履歴を構築するための @samp{git
commit})は、HEADがデタッチされている間も機能することに注意してください。それらは、ブランチに影響を与えることなく、更新された履歴の先端を指すようにHEADを更新します。現在のブランチに関する情報を更新または照会するコマンド(たとえば、現在のブランチが統合するリモートトラッキングブランチを設定する
@samp{git branch --set-upstream-to})は、この状態で問い合わせる(実際の)現在のブランチがないため、明らかに機能しません。

@item  directory 
あなたが "ls" で得られる一覧の事 :-)

@item  dirty 
作業ツリー (@pxref{[def_working_tree]})で、現在のブランチ (@pxref{[def_branch]})に対してコミット (@pxref{[def_commit]})されてない変更が含まれている場合、「作業ツリー (@pxref{[def_working_tree]})はダーティーである」と言われます。

@item  evil merge 
邪悪なマージとは、どの 親 (@pxref{[def_parent]}) にも表示されない変更を導入する マージ (@pxref{[def_merge]}) です。

@item  fast-forward 
fast-forward(早送り)は、とあるリビジョン (@pxref{[def_revision]})に、その子孫である別のブランチ (@pxref{[def_branch]})の変更をマージする特殊なタイプのマージ (@pxref{[def_merge]})です。このような場合、新しいマージ (@pxref{[def_merge]})コミット (@pxref{[def_commit]})を行うのではなく、マージするブランチと同じリビジョンを指すようにブランチを更新するだけです。これは、リモートリポジトリ (@pxref{[def_repository]})のリモート追跡ブランチ (@pxref{[def_remote_tracking_branch]})で頻繁に発生します。

@item  fetch 
ブランチ (@pxref{[def_branch]})をフェッチするということは、リモートリポジトリ (@pxref{[def_repository]})からブランチのhead         ref (@pxref{[def_head_ref]})を取得して、ローカルのオブジェクトデータベース (@pxref{[def_object_database]})に欠落しているオブジェクトを見つけ、そして欠落したオブジェクトを取得することを意味します。
git-fetch(1) も参照してください。

@item  file system 
リーナス・トーバルズは当初、Gitをユーザー空間ファイルシステム、つまりファイルとディレクトリを保持するインフラストラクチャとして設計しました。これにより、Gitの効率と速度が保証されました。

@item  Git archive 
リポジトリ (@pxref{[def_repository]}) の同義語(arch people 向け)。

@item  gitfile 
実際のリポジトリであるディレクトリを指す、作業ツリーのルートにあるプレーンファイル @samp{.git}

@item  grafts 
graftsは、コミットの偽の祖先情報を記録することで、他の点では異なる2つの開発ラインを結合できます。こうすることで、あるコミット (@pxref{[def_commit]})が持つ親 (@pxref{[def_parent]})の組を、コミット作成時に記録されたものとは異なるものとして
Git に見せかけることができるのです。これは @samp{.git/info/grafts} ファイルを介して構成されます。

注意: graftsメカニズムは時代遅れであり、リポジトリ間でオブジェクトを転送する際に問題が発生する可能性があることに注意してください。
同じことを行うためのより柔軟で堅牢なシステムについては、 git-replace(1) を参照してください。

@item  hash 
Gitの文脈では オブジェクト名 (@pxref{[def_object_name]}) と同義語。

@item  head 
ブランチ (@pxref{[def_branch]}) の先端にある コミット (@pxref{[def_commit]}) への、 名付けられた参照 (@pxref{[def_ref]})
です。パックされた参照を使用する場合を除いて、headは @samp{$GIT_DIR/refs/heads/} ディレクトリのファイルに保存されます。
(linkgit: git-pack-refs[1] を参照してください。)

@item  HEAD 
現在のブランチ (@pxref{[def_branch]})。
より詳細に言うと、あなたの作業ツリー (@pxref{[def_working_tree]})は通常、HEADによって参照されるツリーの状態から派生します。HEADは、リポジトリ内のhead (@pxref{[def_head]})達のうちの一つへの参照です。ただし、detached         HEAD (@pxref{[def_detached_HEAD]})をの場合は、任意のコミットを直接参照しています。

@item  head ref 
head (@pxref{[def_head]}) の同義語。

@item  hook 
いくつかのGitコマンドの通常の実行中に、開発者が機能を追加したりチェックしたりできるようにするオプションのスクリプトを呼び出します。通常、フックを使用すると、コマンドを事前に確認して中止することができ、そしてまた、操作の完了後に事後通知を行うことができます。フックスクリプトは
@samp{$GIT_DIR/hooks/} ディレクトリにあり、ファイル名から @samp{.sample}
サフィックスを削除するだけで有効になります。以前のバージョンのGitでは、それらを実行可能にする必要がありました。

@item  index 
状態情報を含むファイルのコレクションで、その内容はオブジェクトとして保存されます。インデックスは、あなたの作業ツリー (@pxref{[def_working_tree]})の保存バージョンです。正直なところ、これには、マージ (@pxref{[def_merge]})のときに使用される、作業ツリーの2番目および3番目のバージョンを含めることもできます。

@item  index entry 
インデックス (@pxref{[def_index]})に保存されている特定のファイルに関する情報。マージ (@pxref{[def_merge]})が開始されたが、まだ終了していない場合(つまり、インデックスにそのファイルの複数のバージョンが含まれている場合)、インデックスエントリをマージ解除(unmerge)できます。

@item  master 
デフォルトの開発 ブランチ (@pxref{[def_branch]}) 。 Git リポジトリ (@pxref{[def_repository]})
を作成するたびに、「master」という名前のブランチが作成され、アクティブなブランチになります。
ほとんどのローカル開発に含まれていますが、これは純粋に慣例によるものであり、必須ではありません。

@item  merge 
動詞として:
別のブランチ (@pxref{[def_branch]})(あるいは外部のリポジトリ (@pxref{[def_repository]})から)の内容を現在のブランチに取り込むこと。マージされたブランチが別のリポジトリからのものである場合、これは最初にリモートブランチをフェッチ (@pxref{[def_fetch]})し、次に結果を現在のブランチにマージすることによって行われます。このフェッチ操作とマージ操作の組み合わせは、プル(pull) (@pxref{[def_pull]})と呼ばれます。マージは、ブランチが分岐してから行われた変更を識別し、それらすべての変更を一緒に適用する自動プロセスによって実行されます。変更が競合する場合は、マージを完了するために手動による介入が必要になる場合があります。

名詞として:
fast-forward (@pxref{[def_fast_forward]})でない限り、マージ成功の結果として、マージされたブランチ (@pxref{[def_branch]})の先端を親 (@pxref{[def_parent]})に持つ新しいコミット (@pxref{[def_commit]})が作成されます。このコミットは「マージコミット」と呼ばれます。または単に「マージ」と呼ばれることもあります。

@item  object(オブジェクト) 
Gitの保管ユニット(unit of storage)。その内容による SHA-1 (@pxref{[def_SHA1]})
によって一意に識別されます。したがって、オブジェクトを変更することはできません。

@item  object database 
「オブジェクト」の組を格納し、個々のオブジェクト (@pxref{[def_object]})はそのオブジェクト名 (@pxref{[def_object_name]})によって識別されます。オブジェクトは通常、
@samp{$GIT_DIR/objects/} にあります。

@item  object identifier(オブジェクトID) 
object name (@pxref{[def_object_name]}) (オブジェクト名)の同義語

@item  object name(オブジェクト名) 
オブジェクト> の一意の識別子。オブジェクト名は通常、40文字の16進文字列で表されます。一般に         <<def_SHA1 (@pxref{[def_object]}) とも呼ばれます。

@item  object type(オブジェクトタイプ) 
「コミット (@pxref{[def_commit_object]}) 識別子」または「ツリー (@pxref{[def_tree_object]})
識別子」または「タグ (@pxref{[def_tag_object]}) 識別子」または「ブロブ (@pxref{[def_blob_object]}) 識別子」のいずれかで、
オブジェクト (@pxref{[def_object]}) のタイプを表します。

@item  octopus 
3つ以上(more than two)のブランチをマージします

@item  origin 
デフォルトの上流(upstream)リポジトリ (@pxref{[def_repository]})。ほとんどのプロジェクトには、追跡する上流プロジェクトが少なくとも1つあります。デフォルトでは、「origin」がその目的で使用されます。新しい上流更新分は、
origin/name-of-upstream-branch という名前の
リモート追跡ブランチ (@pxref{[def_remote_tracking_branch]})にフェッチされます。これは、 @samp{git branch-r}
を使用して確認できます。

@item  overlay 
@samp{cp -R}
が宛先ディレクトリの内容を更新するのと同様に、ファイルを更新して作業ディレクトリに追加するのみで削除を行いません。これは、インデックス (@pxref{[def_index]})またはツリー風の何か(tree-ish) (@pxref{[def_tree-ish]})からファイルをチェックアウトするときのcheckout (@pxref{[def_checkout]})のデフォルトモードです。対照的に、オーバーレイなしモード(no-overlay
mode)では、 @samp{rsync --delete} と同様に、ソース側に存在しない追跡ファイルは削除されます。

@item  pack 
1つのファイルに圧縮されたオブジェクトの組(スペースを節約するため、またはそれらを効率的に送信するため)。

@item  pack index 
パックの内容に効率的にアクセスするのに役立つ、パック (@pxref{[def_pack]})内のオブジェクトの識別子とその他の情報のリスト。

@item  pathspec 
Gitコマンドでパスを制限するために使用されるパターン。

pathspecsは、「git ls-files」、「git ls-tree」、「git add」、「git grep」、「git diff」、「git
checkout」、および、ツリーまたはワークツリーのサブセットへの操作の為にスコープを制限する他の多くのコマンドのコマンドラインで使用されます。パスが現在のディレクトリまたはトップレベルのどちらを基準にしているかについては、各コマンドのドキュメントを参照してください。
pathspecの構文は以下のとおりです:

@itemize 

@item
どのパスもそれ自体と一致します

@item
最後がスラッシュであるpathspecは、ディレクトリプレフィックスを表します。そのpathspecのスコープは、そのサブツリーに制限されています。

@item
pathspecの残りの部分は、pathnameの残りの部分のパターンです。 ディレクトリプレフィックスに関連するパスは、 fnmatch(3)
を使用してそのパターンと照合されます。特に、 @emph{*} と @emph{?} はディレクトリ区切り文字と一致させる事ができます。
@end itemize

たとえば、 @samp{Documentation/*.jpg} は、 @samp{Documentation/chapter_1/figure_1.jpg}
を含む、Documentationサブツリー内のすべての @samp{.jpg} ファイルと一致します。

コロン(@samp{:})で始まるpathspecには特別な意味があります。短い形式では、先頭のコロン(@samp{:})の後に0個以上の「魔法記号」(magic
signature)(オプションで別のコロン(@samp{:})で終了)が続き、残りはパスと照合するパターンです。「魔法記号」は、英数字、グロブ、正規表現の特殊文字でもコロンでもないASCII記号で構成されます。パターンが「魔法記号」シンボルセットに属さず、コロンではない文字で始まる場合、「魔法記号」を終了するオプションのコロンは省略できます。

長い形式では、先頭のコロン(@samp{:})の後に開き括弧(@samp{(}) 、0個以上の「魔法単語」(magic
words)のコンマ区切りリスト、および閉じ括弧(@samp{)}) が続き、残りは次のパターンです。パスと一致します。

コロンのみのpathspecは、「pathspecがない」ことを意味します。 この形式は、他のpathspecと組み合わせないでください。

@table @asis

@item  top 
魔法単語 @samp{top} (魔法記号: @samp{/})は、サブディレクトリ内からコマンドを実行している場合でも、作業ツリーのルートからパターンを一致させます。

@item  literal 
@samp{*} または @samp{?} などのパターンのワイルドカードはリテラル文字として扱われます。

@item  icase 
(英文字の)大文字小文字区別せずにマッチ

@item  glob 
Gitはパターンを、 FNM_PATHNAMEフラグを指定した fnmatch(3)
に消費されるのに適したシェルグロブとして扱います。パターン内のワイルドカードは、パス名内の / と一致しません。
たとえば、「Documentation/*.html」は「Documentation/git.html」と一致しますが、「Documentation/ppc/ppc.html」または「tools/perf/Documentation/perf.html」とは一致しません。

フルパス名と一致するパターンの2つの連続するアスタリスク @samp{**} は、特別な意味を持つ場合があります:

@itemize 

@item
先頭の @samp{**} の後にスラッシュが続く場合は、すべてのディレクトリで一致することを意味します。たとえば、 @samp{**/foo} は、パターン @samp{foo}
と同じように、ファイルまたはディレクトリ @samp{foo} のどこにでも一致します。 @samp{**/foo/bar} は、ディレクトリ @samp{foo}
の直下にあるファイルまたはディレクトリ @samp{bar} と一致します。

@item
末尾の @samp{/**} は、内部のすべてに一致します(matches everything inside)。たとえば、 @samp{abc/**} は、
@samp{.gitignore} ファイルの場所を基準にして、ディレクトリ "abc" 内のすべてのファイルと無限の深さで一致します。

@item
スラッシュの後に2つの連続するアスタリスクが続く場合、スラッシュは0個以上のディレクトリに一致します。 たとえば、 @samp{a/**/b} は @samp{a/b} 、
@samp{a/x/b} 、@samp{a/x/y/b} などと一致します。

@item
他の連続するアスタリスクは無効と見なされます。

グロブ魔法はリテラル魔法と互換性がありません。
@end itemize

@item  attr 
@samp{attr:} の後には、スペースで区切られた「属性要件」(attribute
requirements)のリストがあります。パスが一致すると見なされるには、これらすべてを満たす必要があります。これは、通常の非魔法pathspecパターンマッチングに追加されます。
gitattributes(5) 参照。

パスの各属性要件は、以下のいずれかの形式を取ります:

@itemize 

@item
@samp{ATTR} では、属性 @samp{ATTR} を設定する必要があります。

@item
@samp{-ATTR} では、属性 @samp{ATTR} が設定されていない必要があります。

@item
@samp{ATTR = VALUE} では、属性 @samp{ATTR} を文字列 @samp{VALUE} に設定する必要があります。

@item
@samp{!ATTR} では、属性 @samp{ATTR} が指定されていない必要があります。

注意: ツリーオブジェクトと照合する場合、属性は、指定されたツリーオブジェクトからではなく、作業ツリーから取得されることに注意してください。
@end itemize

@item  exclude 
パスが非除外パススペックと一致すると、すべての除外パススペック(魔法記号: @samp{!} またはその同義語
@samp{^})が実行されます。一致する場合、パスは無視されます。非除外パススペックがない場合、パススペックなしで呼び出されたかのように、除外が結果セットに適用されます。
@end table

@item  parent(親) 
コミットオブジェクト (@pxref{[def_commit_object]})には、開発ラインで論理的に前にあったもののリスト、つまり親が含まれています(あるいは、前・親が無い場合は空です)。

@item  pickaxe 
pickaxe (@pxref{[def_pickaxe]})(ピカクス;十字鋤;鶴嘴;つるはし)という用語は、特定のテキスト文字列を追加または削除する変更を選択するのに役立つdiffcoreルーチンのオプションを指します。
@samp{--pickaxe-all}
オプションを使用すると、特定のテキスト行などを導入または削除した完全なチェンジセット (@pxref{[def_changeset]})を表示するために使用できます。
git-diff(1) を参照してください。

@item  plumbing(配管) 
core Git (@pxref{[def_core_git]}) のキュートな呼び方。

@item  porcelain(磁器) 
core         Git (@pxref{[def_core_git]})に依存するプログラムとプログラムスイートのキュートな名前で、コアGitへの高レベルのアクセスを示します。磁器(porcelain)は、配管(plumbing) (@pxref{[def_plumbing]})よりも多くのSCM (@pxref{[def_SCM]})インターフェースを公開します。

@item  per-worktree ref 
グローバルではなく、ワークツリー (@pxref{[def_working_tree]})ごとのref。これは現在、HEAD (@pxref{[def_HEAD]})と
@samp{refs/bisect/} で始まるすべての参照のみですが、のちには普通でない他の参照が含まれる可能性があります。

@item  pseudoref 
疑似参照(pseudoref)は @samp{$GIT_DIR}
の下にあるファイルのクラスであり、rev-parseしたときrefのように動作しますが、それはgitによって特別扱されます。疑似参照はすべて大文字の名前を持ち、かつ、常にSHA-1 (@pxref{[def_SHA1]})とそれに続く空白(whitespace)で構成される行で始まります。したがって、HEADは疑似参照ではありません。なぜならHEADはシンボリック参照である場合があるためです。オプションで、いくつかの追加データが含まれる場合があります。例としては
@samp{MERGE_HEAD} と @samp{CHERRY_PICK_HEAD} があります。 per-worktree         refs (@pxref{[def_per_worktree_ref]}) とは異なり、これらのファイルはシンボリックrefにすることはできず、reflogを含めることはできません。
また、通常のref更新機構を使用して更新することもできません。代わりに、ファイルに直接書き込むことによって更新されます。ただし、それらはrefであるかのように読み取ることができるため、
@samp{git rev-parse MERGE_HEAD} は機能します。

@item  pull 
ブランチ (@pxref{[def_branch]})をプルするとは、それをフェッチ (@pxref{[def_fetch]})しマージ (@pxref{[def_merge]})することを意味します。
git-pull(1) も参照してください。

@item  push 
ブランチ (@pxref{[def_branch]})をプッシュするとは、リモートリポジトリ (@pxref{[def_repository]})からブランチのヘッド参照 (@pxref{[def_head_ref]})を取得し、それがブランチのローカルヘッド参照の祖先であるかどうかを確認し、そしてその場合ローカルヘッド参照から到達可能 (@pxref{[def_reachable]})であり、かつ、リモートリポジトリに欠落しているすべてのオブジェクトを、リモートオブジェクトデータベース (@pxref{[def_object_database]})に持っていき、リモートヘッド参照を更新します。リモートヘッド (@pxref{[def_head]})がローカルヘッドの祖先でない場合、プッシュは失敗します。

@item  reachable(到達可能) 
特定のコミット (@pxref{[def_commit]})のすべての祖先は、その特定のコミットから到達可能(reachable)であると言われます。より一般的には、タグ (@pxref{[def_tag]})付けしたものだったり、親またはツリーへのコミットオブジェクト (@pxref{[def_commit_object]})だったり、ツリー (@pxref{[def_tree_object]})に含まれるツリーやブロブだったり、をたどるチェーン (@pxref{[def_chain]})によって、あるオブジェクト (@pxref{[def_object]})から別のオブジェクト (@pxref{[def_object]})に到達できる場合に到達が可能です。

@item  rebase 
一連の変更をブランチ (@pxref{[def_branch]})から別のベースに再適用し、そのブランチのヘッド (@pxref{[def_head]})を再適用した結果にリセットします。

@item  ref 
オブジェクト名または別のrefを指す @samp{refs/} で始まる名前(例: @samp{refs/heads/master};別のrefを指すrefは
シンボリックref (@pxref{[def_symref]}) と呼ぶ)。便宜上、Gitコマンドの引数として使用する場合は @samp{refs/}
を省略できる場合があります。詳細については gitrevisions(7) を参照してください。 refs は
repository (@pxref{[def_repository]}) に保存されます。

ref名前空間は階層的です。さまざまなサブ階層がさまざまな目的で使用されます(たとえば、 @samp{refs/heads/}
階層はローカルブランチを表すために使用されます)。

@samp{refs/} で始まらない特別な目的のrefがいくつかあります。最も注目すべき例は @samp{HEAD} です。

@item  reflog 
reflogは、refのローカルの「履歴」を示します。
つまり、このリポジトリの最後の3番目のリビジョンが何であったか、およびこのリポジトリの昨日の午後9時14分時点での「現在の状態」が何であったかを知ることができます。詳細については
git-reflog(1) を参照してください。

@item  refspec 
「refspec」は、フェッチ (@pxref{[def_fetch]})やプッシュ (@pxref{[def_push]})によって使用され、リモートref (@pxref{[def_ref]})とローカルrefの間のマッピングを記述します。

@item  remote repository 
同じプロジェクトを追跡するために使用されるが、別の場所にあるリポジトリ (@pxref{[def_repository]})。リモートと通信するには、フェッチ (@pxref{[def_fetch]})またはプッシュ (@pxref{[def_push]})を参照してください。

@item  remote-tracking branch 
別のリポジトリ (@pxref{[def_repository]})からの変更を追跡するために使用されるref (@pxref{[def_ref]})。 これは通常、
@samp{refs/remotes/foo/bar}
のように見え(「foo」という名前のリモートで「bar」という名前のブランチを追跡することを示します)、構成されたフェッチrefspec (@pxref{[def_refspec]})の右側(right-hand-side)に一致します。リモート追跡ブランチには、直接の変更を含めたり、ローカルコミットを行ったりしないでください。

@item  repository 
<<
def_ref,refs>>のコレクションと、refから到達可能 (@pxref{[def_reachable]})なすべてのオブジェクトを含むオブジェクトデータベース (@pxref{[def_object_database]})。1つまたは複数の磁器 (@pxref{[def_porcelain]})コマンドからのメタデータが付随している可能性があります。リポジトリは、代替メカニズム (@pxref{[def_alternate_object_database]})を介してオブジェクトデータベースを他のリポジトリと共有できます。

@item  resolve 
失敗した自動 マージ (@pxref{[def_merge]}) が残したものを手動で修正する操作。

@item  revision 
コミット (@pxref{[def_commit]}) (名詞) の同義語

@item  rewind(巻き戻し) 
開発の一部を破棄する、つまり、 head (@pxref{[def_head]}) を以前の リビジョン (@pxref{[def_revision]}) に割り当てる。

@item  SCM 
Source code management (tool).

@item  SHA-1 
セキュアハッシュアルゴリズム1(Secure Hash Algorithm 1);暗号化ハッシュ関数。
Git界隈ではオブジェクト名 (@pxref{[def_object_name]})の同義語として使用されます。

@item  shallow clone 
ほとんどの場合 shallowリポジトリ (@pxref{[def_shallow_repository]}) の同義語ですが、この言い方は、 @samp{git clone
--depth=...} コマンドを実行して作成されたこと明言したものです。

@item  shallow repository 
浅いリポジトリ(shallow repository)には不完全な履歴があり、そのコミットの一部では親が削除されて(cauterized
away)います(言い換えると、Gitは、コミットオブジェクトに記録があっても、これらのコミットには親がないふりをするように指示されます)。これは、アップストリームで記録された実際の履歴がはるかに大きい場合でも、プロジェクトの最近の履歴のみに関心がある場合に役立つことがあります。浅いリポジトリは、
git-clone(1) に @samp{--depth} オプションを指定することで作成され、その履歴は後で
git-fetch(1) で深めることができます。

@item  stash entry 
ダーティ (@pxref{[def_dirty]}) な作業ディレクトリの内容とインデックスを、将来の再利用のために一時的に保存するのに使用される
オブジェクト (@pxref{[def_object]}) 。

@item  submodule 
とあるリポジトリの内部で、それとは別個のプロジェクトの履歴を保持する リポジトリ (@pxref{[def_repository]})
(ここで、その、とあるリポジトリを スーパープロジェクト (@pxref{[def_superproject]}) と呼びます)。

@item  superproject 
作業ツリー内の他のプロジェクトのリポジトリを サブモジュール (@pxref{[def_submodule]}) として参照する
リポジトリ (@pxref{[def_repository]}) 。
スーパープロジェクトは、含まれているサブモジュールのコミットオブジェクトの名前を知っています(ただし、そのコピーは保持していません)。

@item  symref 
シンボリックref(シンボリック参照): SHA-1 (@pxref{[def_SHA1]}) ID自体を含む代わりに「ref:
refs/some/thing」の形式であり、参照されると、この参照を再帰的に逆参照します。 @emph{HEAD (@pxref{[def_HEAD]})}
はsymrefの代表的な例です。シンボリックrefは git-symbolic-ref(1) コマンドで操作されます。

@item  tag 
任意のタイプのオブジェクトを指す @samp{refs/tags/} 名前空間の下のref (@pxref{[def_ref]})(通常、タグは
タグ (@pxref{[def_tag_object]}) または コミットオブジェクト (@pxref{[def_commit_object]})
のいずれかを指します)。head (@pxref{[def_head]})とは対照的に、タグは @samp{commit}
コマンドによって更新されません。Gitタグは、Lispタグとは何の関係もありません(Git界隈では、それはオブジェクトタイプ (@pxref{[def_object_type]})と呼ばれます)。タグは通常、コミットの祖先チェーン (@pxref{[def_chain]})の特定のポイントをマークするために使用されます。

@item  tag object 
別のオブジェクトを指すref (@pxref{[def_ref]})を含むオブジェクト (@pxref{[def_object]})。これには、コミットオブジェクト (@pxref{[def_commit_object]})のようにメッセージを含めることができます。またPGP署名を含めることもでき、その場合、「署名付きタグオブジェクト」(signed
tag object)と呼ばれます。

@item  topic branch 
開発者が概念的な開発ラインを識別するために使用する通常のGitブランチ (@pxref{[def_branch]})。(従来のSCMに比べて)ブランチは非常に簡単で処理コストが掛からないため、それぞれが非常に明確に定義された概念または小さな増分であるが関連する変更を含む、いくつかの小さなブランチを持つことが望ましい場合がよくあります。

@item  tree 
作業ツリー (@pxref{[def_working_tree]})、または、ツリーオブジェクト (@pxref{[def_tree_object]})とそれに依存するブロブ (@pxref{[def_blob_object]})やツリーオブジェクト(つまり、作業ツリーの保存された表現)、のいずれか。

@item  tree object 
ファイル名とモードのリスト、および関連するブロブやツリーオブジェクトへのrefを含むオブジェクト (@pxref{[def_object]})。<<
def_tree,ツリー>>とディレクトリ (@pxref{[def_directory]})は同じ意味です。

@item  tree-ish (also treeish) 
ツリーっぽい何か。ツリーオブジェクトに再帰的に逆参照できる ツリーオブジェクト (@pxref{[def_tree_object]}) または
オブジェクト (@pxref{[def_object]}) です。 コミットオブジェクト (@pxref{[def_commit_object]}) を逆参照すると、その
リビジョン (@pxref{[def_revision]}) の最上位 ディレクトリ>         に対応するツリーオブジェクトが生成されます。※右記は全てツリーっぽい(tree-ish)モノです:         <<def_commit-ish (@pxref{[def_directory]}) 、ツリーオブジェクト、ツリーオブジェクトを指す
タグオブジェクト (@pxref{[def_tag_object]}) 、タグオブジェクトを指すタグオブジェクト

@item  unmerged index 
マージされていないインデックスエントリ (@pxref{[def_index_entry]})を含むインデックス (@pxref{[def_index]})。

@item  unreachable object 
ブランチ (@pxref{[def_branch]}) または タグ (@pxref{[def_tag]}) またはその他の参照から 到達可能 (@pxref{[def_reachable]})
ではない(辿れない、ポイントされてない) オブジェクト (@pxref{[def_object]}) 。

@item  upstream branch 
当該のブランチからマージされる(または当該のブランチがリベースされる)デフォルトのブランチ (@pxref{[def_branch]})。これは、
@samp{branch.<name>.remote} や @samp{branch.<name>.merge} を介して構成されます。Aのアップストリームブランチが
@samp{origin/B} の場合、「Aは @samp{origin/B} を追跡しています」と言うことがあります。

@item  working tree 
実際にチェックアウトされたファイル群のツリー。 作業ツリーには通常、 HEAD (@pxref{[def_HEAD]})
コミットのツリーの内容に加えて、任意の、まだコミットされていないローカルの変更が含まれています。
@end table

@noindent

@chapheading SEE ALSO

gittutorial(7), gittutorial-2(7),
gitcvs-migration(7), giteveryday(7),
@uref{user-manual.html,The Git User’s Manual}

@noindent

@chapheading GIT

Part of the git(1) suite

@node githooks,,,Top
@chapheading Name

githooks — Gitで使われるフック

@noindent

@chapheading Synopsis

$GIT_DIR/hooks/* (or `git config core.hooksPath`/*)

@noindent

@chapheading DESCRIPTION

フック(hook)は、フックディレクトリ(hooks
directory)に配置して、gitの実行の特定の時点でアクションをトリガーできるプログラムです。実行可能ビットが設定されていないフックは無視されます。

デフォルトでは、フックディレクトリ(ooks directory)は @samp{$GIT_DIR/hooks} ですが、これは @samp{core.hooksPath}
構成変数を介して変更できます(git-config(1) を参照)。

Gitはフックを呼び出す前に、ベアリポジトリでは作業ディレクトリを
$GIT_DIRに変更し、非ベアリポジトリではの作業ディレクトリを作業ツリーのルートに変更します。例外は、プッシュ中にトリガーされるフック(@emph{pre-receive}
、@emph{update} 、@emph{post-receive} 、@emph{post-update} 、@emph{push-to-checkout})で、常に $GIT_DIR
で実行されます。

フックは、環境変数やコマンドライン引数やstdinを介して引数を取得できます。詳細については、以下の各フックのドキュメントを参照してください。

@samp{git init} は、その構成に応じて、フックを新しいリポジトリにコピーする場合があります。詳細については、 git-init(1)
の「TEMPLAT
EDIRECTORY」セクションを参照してください。このドキュメントの残りの部分で「デフォルトのフック」について言及している場合は、Gitに付属しているデフォルトのテンプレートについて説明しています。

現在サポートされているフックを以下に説明します。

@noindent

@chapheading HOOKS

@noindent

@heading applypatch-msg

このフックは git-am(1)
によって呼び出されます。単一のパラメータとして、提案するコミットログメッセージを保持するファイルの名前を取ります。ゼロ以外のステータスで終了すると、パッチを適用する前に
@samp{git am} が中止されます。

フックを使用すると、メッセージファイルを所定の場所で編集でき、メッセージをプロジェクトの標準形式に正規化するために使用できます。
また、メッセージファイルを検査した後にコミットを拒否するために使用することもできます。

デフォルトの @samp{applypatch-msg} フックが有効になっている場合に @samp{commit-msg} フックが有効になっていれば、
@samp{commit-msg} フックを実行します。

@noindent

@heading pre-applypatch

このフックは git-am(1)
によって呼び出されます。これはパラメーターを受け取らず、パッチが適用された後、コミットが行われる前に呼び出されます。

これがゼロ以外のステータスで終了する場合、パッチの適用後に作業ツリーはコミットされません。

現在の作業ツリーを検査し、特定のテストに合格しない場合はコミットを拒否するために使用できます。

デフォルトの @samp{pre-applypatch} フックが有効になっている場合に @samp{pre-commit} フックが有効になっている場合は、
@samp{pre-commit} フックが実行されます。

@noindent

@heading post-applypatch

このフックは git-am(1)
によって呼び出されます。これはパラメーターを受け取らず、パッチが適用されてコミットが行われた後に呼び出されます。

このフックは主に通知用であり、 @samp{git am} の結果に影響を与えることはできません。

@noindent

@heading pre-commit

このフックは git-commit(1) によって呼び出され、 @samp{--no-verify}
オプションでバイパスできます。パラメータを必要とせず、提案したコミットログメッセージを取得してコミットする前に呼び出されます。このスクリプトをゼロ以外のステータスで終了すると、コミットを作成する前に
@samp{git commit} コマンドが中止(abort)されます。

デフォルトの @samp{pre-commit}
フックを有効にすると、末尾に空白がある行の導入をキャッチし、そのような行が見つかるとコミットを中止(abort)します。

すべての @samp{git commit} フックは環境変数 $GIT_EDITOR を @samp{GIT_EDITOR=:} とすれば、
コミットメッセージを変更するためのエディターを起動しません。

デフォルトの @samp{pre-commit} フックが有効になっていて、かつ、 @samp{hooks.allownonascii}
構成オプションが設定されていないかfalseに設定されている場合、非ASCIIファイル名の使用を防止します。

@noindent

@heading pre-merge-commit

このフックは git-merge(1) によって呼び出され、 @samp{--no-verify}
オプションでバイパスできます。パラメータを必要とせず、マージが正常に実行された後、提案したコミットログメッセージを取得してコミットする前に呼び出されます。このスクリプトをゼロ以外のステータスで終了すると、コミットを作成する前に
@samp{git merge} コマンドが中止(abort)されます。

デフォルトの @samp{pre-merge-commit} フックが有効になっている場合に @samp{pre-commit} フック後者が有効になっている場合は、
@samp{pre-commit} フックが実行されます。

このフックは環境変数 $GIT_EDITOR を @samp{GIT_EDITOR=:} とすれば、 コミットメッセージを変更するためのエディターを起動しません。

マージを自動的に実行できない場合は、競合を解決し、結果を個別にコミットする必要があります(git-merge(1)
参照)。その時点では、このフックは実行されませんが、 @samp{pre-commit} が有効になっている場合は @samp{pre-commit}
フックが実行されます。

@noindent

@heading prepare-commit-msg

このフックは、デフォルトのログメッセージを準備した直後、エディターを起動する前に、 git-commit(1) によって呼び出されます。

1つから3つのパラメーターを取ります。
1つ目は、内容がコミットログメッセージであるファイルの名前です。2番目はコミットメッセージのソースであり、@samp{message}(@samp{-m} または @samp{-F}
オプションが指定された場合)、 @samp{template}( @samp{-t} オプションが指定された場合、または構成オプション @samp{commit.template}
が設定されている場合)、 @samp{merge}(コミットがマージであるか、 @samp{.git/MERGE_MSG} ファイルが存在する場合)、 @samp{squash}(
@samp{.git/SQUASH_MSG} ファイルが存在する場合)、または @samp{commit}( @samp{-c} または @samp{-C} または @samp{--amend}
オプションが指定された場合)に続いて(3つ目のパラメータとして) commitオブジェクト名。

終了ステータスがゼロ以外の場合、 @samp{git commit} は中止(abort)されます。

フックの目的は、メッセージファイルを所定の位置で編集することであり、 @samp{--no-verify}
オプションによって抑制されることはありません。ゼロ以外ステータスでの終了は、フックの失敗を意味し、コミットを中止(abort)します。pre-commitフックの代わりとして使用すべきではありません。

Gitに付属するサンプルの @samp{prepare-commit-msg} フックは、コミットテンプレートのコメント部分にあるヘルプメッセージを削除します。

@noindent

@heading commit-msg

このフックは git-commit(1) と git-merge(1) によって呼び出され、 @samp{--no-verify}
オプションでバイパスできます。単一のパラメータとして提案されたコミットログメッセージを保持するファイルの名前を取ります。ゼロ以外のステータスで終了すると、コマンドは中止(abort)されます。

フックを使用すると、メッセージファイルを所定の場所で編集でき、メッセージをプロジェクトの標準形式に正規化するために使用できます。
また、メッセージファイルを検査した後にコミットを拒否するために使用することもできます。

デフォルトの @samp{commit-msg} フックを有効にすると、重複する @samp{Signed-off-by}
トレーラーが検出され、見つかった場合はコミットが中止(abort)されます。

@noindent

@heading post-commit

このフックは git-commit(1) によって呼び出されます。パラメータを必要とせず、コミットが行われた後に呼び出されます。

このフックは主に通知用であり、 @samp{git commit} の結果に影響を与えることはできません。

@noindent

@heading pre-rebase

このフックは git-rebase(1)
によって呼び出され、ブランチがリベースされるのを防ぐために使用できます。フックは、1つまたは2つのパラメーターで呼び出すことができます。最初のパラメーターは、シリーズがフォークされたアップストリームです。2番目のパラメーターは、リベースされるブランチであり、現在のブランチをリベースするときは設定されません。

@noindent

@heading post-checkout

このフックは、ワークツリーを更新した後に git-checkout(1) または git-switch(1)
が実行されたときに呼び出されます。フックには、以前のHEADのref、新しいHEADのref(変更されている場合と変更されていない場合があります)、およびチェックアウトがブランチチェックアウト(ブランチの変更、flag=1)あるいはファイルのチェックアウト(インデックスからファイルを取得、flag=0)のいずれかであるかどうかを示すフラグ、の3つのパラメーターが与えられます。このフックは、フックの終了ステータスがこれら2つのコマンドの終了ステータスになることを除いて、
@samp{git switch} または @samp{git checkout} の結果に影響を与えることはできません。

これは @samp{--no-checkout} (@samp{-n})オプションが使用されていない限り、 git-clone(1)の後でも実行されます。
フックに指定された最初のパラメーターは null-refで、2番目は新しいHEADのrefであり、フラグは常に1です。@samp{--no-checkout}
が使用されていない限り、 @samp{git worktree add} についても同様です。

このフックを使用して、リポジトリの有効性チェックを実行したり、以前のHEADとの違いを自動表示したり、作業ディレクトリのメタデータプロパティを設定したりできます。

@noindent

@heading post-merge

このフックは git-merge(1) によって呼び出されます。これは、ローカルリポジトリで @samp{git pull}
が実行されたときに発生します。フックは単一のパラメーター、つまり、実行されているマージがスカッシュマージ(squash
merge)であるかどうかを指定するステータスフラグを受け取ります。このフックは @samp{git merge}
の結果に影響を与えることはできず、競合が原因でマージが失敗した場合は実行されません。

このフックを対応するpre-commitフックと組み合わせて使用すると、作業ツリーに関連付けられている任意の形式のメタデータ(たとえば、権限/所有権、ACLSなど)を保存および復元できます。これを行う方法の例については、
contrib/hooks/setgitperms.perl を参照してください。

@noindent

@heading pre-push

このフックは git-push(1)
によって呼び出され、プッシュが行われないようにするために使用できます。フックは、宛先リモートの名前と場所を提供する2つのパラメーターで呼び出されます。名前付きリモートが使用されていない場合、両方の値は同一になります。

何をプッシュするかについての情報は、フックの標準入力に次の形式の行で提供されます:

@example
<local ref> SP <local object name> SP <remote ref> SP <remote object name> LF
@end example

たとえば、コマンド @samp{git push origin master:foreign} を実行すると、フックは以下のような行を受け取ります:

@example
refs/heads/master 67890 refs/heads/foreign 12345
@end example

ただし、完全なオブジェクト名が提供されます。外部参照がまだ存在しない場合、 <remote object name>
はすべてゼロのオブジェクト名になります。refを削除する場合は、 <local ref> が @samp{(delete)} として提供され、 @samp{<local
object name>} がすべてゼロのオブジェクト名になります。ローカルコミットが拡張可能な名前以外の名前(@samp{HEAD~}
やオブジェクト名など)で指定された場合は、最初に指定されたとおりに提供されます。

このフックがゼロ以外のステータスで終了した場合、 @samp{git push}
は何もプッシュせずに中止(abort)します。プッシュが拒否された理由に関する情報は、標準エラーに書き込むことでユーザーに送信される場合があります。

@noindent

@heading pre-receive

このフックは、 @samp{git push} に反応し、リポジトリ内の参照を更新するときに、 git-receive-pack(1)
によって呼び出されます。リモートリポジトリのrefの更新を開始する直前に、pre-receiveフックが呼び出されます。その終了ステータスによって、更新の成功または失敗が決まります。

このフックは、受信操作に対して1回実行されます。引数は必要ありませんが、更新される各refについて、標準入力で以下の形式の行を受け取ります:

@example
<old-value> SP <new-value> SP <ref-name> LF
@end example

ここで、 @samp{<old-value>} は、refに保存されている古いオブジェクト名です。 @samp{<new-value>}
はrefに格納される新しいオブジェクト名です。 @samp{<ref-name>} はrefのフルネームです。 新しいrefを作成する場合、
@samp{<old-value>} はすべてゼロのオブジェクト名です。

フックがゼロ以外のステータスで終了した場合、どのrefも更新されません。フックがゼロで終了する場合でも、個々のrefの更新は@emph{update} (@pxref{update})フックによって防ぐことができます。

標準出力と標準エラー出力の両方がもう一方の側の @samp{git send-pack} に転送(forward)されるため、ユーザーにメッセージを @samp{echo}
するだけで済みます。

@samp{git push --push-option=...} のコマンドラインで指定された、プッシュオプションの数は環境変数
@samp{GIT_PUSH_OPTION_COUNT} から読み取ることができ、オプション自体は @samp{GIT_PUSH_OPTION_0} 、
@samp{GIT_PUSH_OPTION_1} 、 …
から読み取る事ができます。プッシュオプションフェーズを使用しないように取り決めた場合、環境変数は設定されません。クライアントがプッシュオプションの使用を選択したが、何も送信しない場合、カウント変数はゼロ、つまり
@samp{GIT_PUSH_OPTION_COUNT=0} に設定されます。

いくつかの注意点については、 git-receive-pack(1) の「Quarantine
Environment」のセクションを参照してください。

@noindent

@heading update

このフックは、 @samp{git push} に反応し、リポジトリ内の参照を更新するときに、 git-receive-pack(1)
によって呼び出されます。リモートリポジトリのrefを更新する直前に、 update
フックが呼び出されます。その終了ステータスによって、ref更新の成功または失敗が決まります。

フックは、更新されるrefごとに1回実行され、以下の3つのパラメーターを取ります:

@itemize 

@item
更新されるrefの名前

@item
refに保存されている古いオブジェクト名

@item
refに格納される新しいオブジェクト名
@end itemize

更新フックがゼロステータスで終了すると、refを更新できます。ゼロ以外のステータスで終了すると、 @samp{git receive-pack}
はそのrefを更新できなくなります。

このフックは、オブジェクト名が古いオブジェクト名で指定されたコミットオブジェクトの子孫であるコミットオブジェクトであることを確認することにより、特定のrefでの「強制」更新を防ぐために使用できます。つまり、「早送りのみ」(fast-forward
only)のポリシーを適用します。

また、 old..new
ステータスをログに記録するために使用することもできます。ただし、ブランチのセット全体を認識しているわけではないため、単純に使用すると、refごとに1つの電子メールが送信されることになります。そのためには@emph{post-receive} (@pxref{post-receive})フックの方が適しています。

ユーザーのアクセスをネットワーク経由のgitコマンドのみに制限する環境では、このフックを使用して、ファイルシステムの所有権やグループメンバーシップに依存せずにアクセス制御を実装できます。ログインシェルを使用してユーザーのアクセスをgitコマンドのみに制限する方法については、
git-shell(1) を参照してください。

標準出力と標準エラー出力の両方がもう一方の側の @samp{git send-pack} に転送(forward)されるため、ユーザーにメッセージを @samp{echo}
するだけで済みます。

デフォルトの @samp{update} フックが有効になっている場合 — および @samp{hooks.allowunannotated}
構成オプションが設定されていないかfalseに設定されている場合 — 注釈のないタグ(unannotated tags)がプッシュされるのを防ぎます。

@noindent

@heading proc-receive

このフックは git-receive-pack(1) によって呼び出されます。サーバーが複数値の構成変数
@samp{receive.procReceiveRefs} を設定し、そして @samp{receive-pack}
に送信されるコマンドの参照名が一致する場合、これらのコマンドは、内部の @samp{execute_commands()}
関数ではなく、このフックによって実行されます。このフックは、関連する参照を更新し、結果を @samp{receive-pack} に報告する役割を果たします。

このフックは、受信操作に対して1回実行されます。引数は取りませんが、pkt-line形式のプロトコルを使用して @samp{receive-pack}
と通信し、コマンド、プッシュオプションを読み取り、結果を送信します。行かのプロトコルの例では、文字 @samp{S} は @samp{receive-pack}
を表し、文字 @samp{H} はこのフックを表します。

@example
# Version and features negotiation.
S: PKT-LINE(version=1\0push-options atomic...)
S: flush-pkt
H: PKT-LINE(version=1\0push-options...)
H: flush-pkt
@end example

@example
# Send commands from server to the hook.
S: PKT-LINE(<old-oid> <new-oid> <ref>)
S: ... ...
S: flush-pkt
# Send push-options only if the 'push-options' feature is enabled.
S: PKT-LINE(push-option)
S: ... ...
S: flush-pkt
@end example

@example
# Receive result from the hook.
# OK, run this command successfully.
H: PKT-LINE(ok <ref>)
# NO, I reject it.
H: PKT-LINE(ng <ref> <reason>)
# Fall through, let 'receive-pack' to execute it.
H: PKT-LINE(ok <ref>)
H: PKT-LINE(option fall-through)
# OK, but has an alternate reference.  The alternate reference name
# and other status can be given in option directives.
H: PKT-LINE(ok <ref>)
H: PKT-LINE(option refname <refname>)
H: PKT-LINE(option old-oid <old-oid>)
H: PKT-LINE(option new-oid <new-oid>)
H: PKT-LINE(option forced-update)
H: ... ...
H: flush-pkt
@end example

@emph{proc-receive}
フックの各コマンドは、疑似参照(pseudo-reference)を指す場合があり、そのold-oidとして常にゼロオールドを持ちます。一方、
@samp{proc-receive} フックは代替参照(alternate
reference)を更新する可能性があり、代替参照はゼロ以外のold-oidで既に存在する可能性があります。この場合、このフックは @samp{option}
ディレクティブを使用して、先頭の @samp{ok} ディレクティブによって指定された参照の拡張属性を報告します。

このフックのコマンドの報告は、入力と同じ順序である必要があります。 @samp{proc-receive}
フックの終了ステータスは、アトミックプッシュ(atomic push)が使用されていない限り、送信したコマンドグループの成功または失敗のみを決定します。

@noindent

@heading post-receive

このフックは、 @samp{git push} に反応し、リポジトリ内の参照を更新するときに、 git-receive-pack(1)
によって呼び出されます。すべてのrefが更新された後、リモートリポジトリで実行されます。

このフックは、受信操作に対して1回実行されます。引数は取りませんが、 @emph{pre-receive} (@pxref{pre-receive})
フックが標準入力で行うのと同じ情報を取得します。

このフックは、実際の作業が完了した後に呼び出されるため、 @samp{git receive-pack} の結果には影響しません。

これは、名前に加えてすべてのrefの古い値と新しい値の両方を取得するという点で、 @emph{post-update} (@pxref{post-update})
フックに取って代わります。

標準出力と標準エラー出力の両方がもう一方の側の @samp{git send-pack} に転送(forward)されるため、ユーザーにメッセージを @samp{echo}
するだけで済みます。

デフォルトの @samp{post-receive} フックは空ですが、Gitディストリビューションの @samp{contrib/hooks}
ディレクトリにサンプルスクリプト @samp{post-receive-email} があり、コミットメールの送信を実装しています。

@samp{git push --push-option=...} のコマンドラインで指定された、プッシュオプションの数は環境変数
@samp{GIT_PUSH_OPTION_COUNT} から読み取ることができ、オプション自体は @samp{GIT_PUSH_OPTION_0} 、
@samp{GIT_PUSH_OPTION_1} 、 …
から読み取る事ができます。プッシュオプションフェーズを使用しないように取り決めた場合、環境変数は設定されません。クライアントがプッシュオプションの使用を選択したが、何も送信しない場合、カウント変数はゼロ、つまり
@samp{GIT_PUSH_OPTION_COUNT=0} に設定されます。

@noindent

@heading post-update

このフックは、 @samp{git push} に反応し、リポジトリ内の参照を更新するときに、 git-receive-pack(1)
によって呼び出されます。すべてのrefが更新された後、リモートリポジトリで実行されます。

可変数のパラメーターを取ります。各パラメーターは、実際に更新されたrefの名前です。

このフックは主に通知用であり、 @samp{git receive-pack} の結果に影響を与えることはできません。

@emph{post-update} フックは、プッシュされたヘッドが何であるかを知ることができますが、元の値と更新された値が何であるかを知らないため、
logold..new を実行するのに適した場所ではありません。
@emph{post-receive} (@pxref{post-receive})フックは、参照の元の値と更新された値の両方を取得するので、必要に応じて、このフックの代わりに検討することもできます。

有効にすると、デフォルトの @samp{post-update} フックが @samp{git update-server-info} を実行して、バカ転送(dumb
transports)(例:HTTP)で使用される情報を最新の状態に保ちます。
HTTP経由でアクセスできるGitリポジトリを公開している場合は、あなたはおそらくこのフックを有効にする必要があります。

標準出力と標準エラー出力の両方がもう一方の側の @samp{git send-pack} に転送(forward)されるため、ユーザーにメッセージを @samp{echo}
するだけで済みます。

@noindent

@heading reference-transaction

このフックは、参照の更新を実行するGitコマンドによって呼び出されます。参照トランザクションが、準備またはコミットまたは中止されるたびに実行されるため、複数回呼び出される可能性があります。このフックはシンボリック参照をカバーしていません(ただし、将来変更される可能性があります)。

フックは引数を1つだけ取りますが、これは指定された参照トランザクションの現在の状態です:

@itemize 

@item
"prepared" : すべての参照更新がトランザクションのキューに入れられ、参照がディスク上でロックされました。

@item
"committed": 参照トランザクションがコミットされ、すべての参照にそれぞれの新しい値が追加されました。

@item
"aborted": 参照トランザクションが中止され、変更は実行されず、ロックが解放されました。
@end itemize

トランザクションに追加された参照更新ごとに、フックは標準入力で以下の形式の行を受け取ります:

@example
<old-value> SP <new-value> SP <ref-name> LF
@end example

ここで、 @samp{<old-value>} は、参照トランザクションに渡された古いオブジェクト名です。 @samp{<new-value>}
はrefに格納される新しいオブジェクト名であり、 @samp{<ref-name>}
はrefのフルネームです。現在の値に関係なく参照を強制的に更新する場合、または参照を新たに作成する場合は、 @samp{<old-value>}
はすべてゼロのオブジェクト名です。あなたは、これらのケースを区別するために、 @samp{gitrev-parse} を介して @samp{<ref-name>}
の現在の値を調べることができます。

フックの終了ステータスは、「prepared」(準備済み)状態を除くすべての状態で無視されます。「prepared」状態では、ゼロ以外の終了ステータスにより、トランザクションが中止(abort)されます。その場合、フックは「中止」状態で呼び出さることはありません。

@noindent

@heading push-to-checkout

プッシュが現在チェックアウトされているブランチを更新しようと試み、かつ、 @samp{receive.denyCurrentBranch} 構成変数が
@samp{updateInstead} に設定されている場合、このフックは、 @samp{git push} に反応し、リポジトリ内の参照を更新するときに、
git-receive-pack(1)
によって呼び出されます。作業ツリーとリモートリポジトリのインデックスが現在チェックアウトされているコミットと異なる場合、このようなプッシュはデフォルトで拒否されます。作業ツリーとインデックスの両方が現在のコミットと一致する場合、それらは、ブランチの新しくプッシュされた先端に一致するように更新されます。このフックは、デフォルトの動作をオーバーライドするために使用されます。

フックは、現在のブランチの先端が更新されるコミットを受け取ります。ゼロ以外のステータスで終了してプッシュを拒否できます(そうする場合は、インデックスまたは作業ツリーを変更してはいけません)。または、作業ツリーとインデックスに必要な変更を加えて、現在のブランチの先端が新しいコミットに更新されたときにそれらを目的の状態にし、ゼロステータスで終了することもできます。

例えば、フックは単純に @samp{git read-tree -u -m HEAD "$1"} を実行して、@samp{git push} と逆方向に実行する @samp{git
fetch} をエミュレートすることができます。 @samp{git read-tree -u -m} の二木形式(two-tree
form)は、ブランチの違いを妨げない範囲で作業ツリー(working tree)のローカル変更を維持しながらブランチを切り替える @samp{git
switch} や @samp{git checkout} と本質的に同じものだからです。

@noindent

@heading pre-auto-gc

このフックは @samp{git gc --auto} によって呼び出されます(git-gc(1)
を参照)。パラメータを必要とせず、このスクリプトをゼロ以外のステータスで終了させると、 @samp{git gc --auto} が中止(abort)されます。

@noindent

@heading post-rewrite

このフックは、commitを書き換えるコマンド(@samp{--amend} や git-rebase(1) から呼び出された場合の
git-commit(1) 。ただし、 git-fast-import(1)や
@uref{https://github.com/newren/git-filter-repo,git-filter-repo}
などの完全な履歴(再)書き込みツールは通常、呼び出さないでください！)によって呼び出されます。その最初の引数は、それが呼び出されたコマンドを示します。それは現在、@samp{amend}
または @samp{rebase} のいずれかです。将来、コマンドに依存する引数がさらに渡される可能性があります。

フックは、stdinから、書き換えられたコミットのリストを以下の形式で受け取ります。

@example
<old-object-name> SP <new-object-name> [ SP <extra-info> ] LF
@end example

@samp{extra-info} もコマンド依存です。空の場合、先行するSPも省略されます。現在、 @samp{extra-info} を渡すコマンドはありません。

フックは常に、自動noteコピー(git-config(1)の @samp{notes.rewrite.<command>}
参照)が発生した後に実行されるため、フックはこれらのnoteにアクセスできます。

以下のコマンド固有のコメントが適用されます:

@table @asis

@item  rebase 
@emph{squash} 操作と @emph{fixup}
操作の場合、スカッシュされたすべてのコミットは、スカッシュされたコミットに書き換えられたものとしてリストされます。これは、同じ「new-object-name」を共有する複数の行があることを意味します。

コミットは、リベースによって処理された順序でリストされることが保証されています。
@end table

@noindent

@heading sendemail-validate

このフックは git-send-email(1)
によって呼び出されます。単一のパラメーターとして、送信する電子メールを保持するファイルの名前を取ります。ゼロ以外のステータスで終了すると、電子メールを送信する前に
@samp{git send-email} が中止(abort)されます。

@noindent

@heading fsmonitor-watchman

このフックは、使用するフックのバージョンに応じて、構成オプション @samp{core.fsmonitor} が
@samp{.git/hooks/fsmonitor-watchman} または @samp{.git/hooks/fsmonitor-watchmanv2}
に設定されている場合に呼び出されます。

バージョン1は、バージョン(つまり、1)と、1970年1月1日の0:00から経過したナノ秒単位の時間の、2つの引数を取ります。

バージョン2は、バージョン(つまり、2)と、トークン以降の変更を識別するために使用されるトークンの、2つの引数を取ります。ウォッチマン(watchman)の場合、これはクロックID(clock
id)になります。このバージョンでは、新しいトークンの後のファイルのリストの前にNULを付けて標準出力しなければなりません。

フックは、要求された時間以降に変更された可能性のある作業ディレクトリ内のすべてのファイルのリストをstdoutに出力する必要があります。潜在的な変更を見逃さないように、ロジックは包括的(inclusive)である必要があります。パスは、作業ディレクトリのルートを基準にして、単一のNULで区切る必要があります。

実際に変更されていないファイルを含めてもかまいません。新しく作成および削除されたファイルを含むすべての変更を含める必要があります。ファイルの名前を変更するときは、古い名前と新しい名前の両方を含める必要があります。

Gitは、指定のパス名に基づいて、変更をチェックするファイルと、追跡されていないファイルをチェックするディレクトリを制限します。

gitに「すべてのファイルが変更されました」と伝えるための最適化された方法は、ファイル名 @samp{/} を返すことです。

終了ステータスは、gitがフックからのデータを使用して検索を制限するかどうかを決定します。エラーが発生すると、すべてのファイルとフォルダーの検証にフォールバックします。

@noindent

@heading p4-changelist

このフックは @samp{git-p4 submit} によって呼び出されます。

@samp{p4-changelist} フックは、ユーザーがチェンジリストメッセージ(changelist message)を編集した後に実行されます。
@samp{--no-verify}
オプションでバイパスできます。提案されたチェンジリストテキストを保持するファイルの名前という単一のパラメータを取ります。ゼロ以外のステータスで終了すると、コマンドは中止(abort)されます。

フックはチェンジリストファイル(changelist
file)の編集を許可されており、テキストをプロジェクトの標準形式に正規化するために使用できます。また、メッセージファイルを検査した後に送信を拒否するために使用することもできます。

詳細については、 @samp{git-p4 submit --help} を実行してください。

@noindent

@heading p4-prepare-changelist

このフックは @samp{git-p4 submit} によって呼び出されます。

@samp{p4-prepare-changelist} フックは、デフォルトのチェンジリストメッセージ(changelist
message)を準備した直後、エディタが起動する前に実行されます。これは、チェンジリストのテキストを含むファイルの名前という1つのパラメーターを取ります。スクリプトをゼロ以外のステータスで終了すると、プロセスが中止(abort)されます。

フックの目的は、メッセージファイルを所定の位置で編集することであり、@samp{--no-verify} オプションによって抑制されることはありません。
このフックは、 @samp{--prepare-p4-only} が設定されている場合でも呼び出されます。

詳細については、 @samp{git-p4 submit --help} を実行してください。

@noindent

@heading p4-post-changelist

このフックは @samp{git-p4 submit} によって呼び出されます。

@samp{p4-post-changelist}
フックは、送信(submit)がP4で正常に発生した後に呼び出されます。これはパラメーターを必要とせず、主に通知を目的としており、git p4
submitアクションの結果に影響を与えることはできません。

詳細については、 @samp{git-p4 submit --help} を実行してください。

@noindent

@heading p4-pre-submit

このフックは @samp{git-p4 submit}
によって呼び出されます。これはパラメータをとらず、標準入力から何も取りません。このスクリプトをゼロ以外のステータスで終了すると、 @samp{git-p4
submit} の起動を妨げます。 @samp{--no-verify} コマンドラインオプションでバイパスできます。詳細については、 @samp{git-p4
submit --help} を実行してください。

@noindent

@heading post-index-change

このフックは、インデックスが read-cache.c の do_write_locked_index に書き込まれるときに呼び出されます。

フックに渡される最初のパラメーターは、更新される作業ディレクトリのインジケーターです。「1」は作業ディレクトリが更新されたことを意味し、「0」は作業ディレクトリが更新されなかったことを意味します。

フックに渡される2番目のパラメーターは、インデックスが更新され、 skip-worktree
ビットが変更された可能性があるかどうかを示すインジケーターです。「1」はskip-worktreeビットが更新された可能性があることを意味し、「0」は更新されなかったことを意味します。

フックの実行時に "1" に設定するパラメーターは1つだけです。 両方のパラメータを "1" に設定してはいけません。

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitignore,,,Top
@chapheading Name

gitignore — 無視する、意図的に追跡しないファイルを指定します

@noindent

@chapheading Synopsis

$XDG_CONFIG_HOME/git/ignore, $GIT_DIR/info/exclude, .gitignore

@noindent

@chapheading DESCRIPTION

@samp{gitignore} ファイルは、Gitが無視する必要のある意図的に追跡しないファイルを指定します。
Gitによってすでに追跡されているファイルは影響を受けません。 詳細については、以下のNOTESを参照してください。

@samp{gitignore} ファイルの各行にはパターンを指定します。パスを無視するかどうかを決定するとき、Gitは通常、複数のソースからの
@samp{gitignore}
パターンを、最高から最低の順に以下の優先順位でチェックします(各レベルの優先順位内では最後に一致するパターンが結果を決定します)。

@itemize 

@item
パターンは、それらをサポートするコマンドのコマンドラインから読み取られます。

@item
そのパスから見て同じディレクトリまたは親ディレクトリ(作業ツリーの最上位まで)にある @samp{.gitignore}
ファイルから読み取られたパターン。ディレクトリの上位レベルのファイルのパターンは、@samp{.gitignore}
ファイルを含むディレクトリまでディレクトリ下位レベルの @samp{.gitignore} ファイルのパターンによって上書きされますこれらのパターンは、
@samp{.gitignore} ファイルのあるディレクトリを基準にしてマッチします。
プロジェクトは通常、リポジトリにそのような、プロジェクトビルドの部品として生成されたファイルのパターンを含んだ @samp{.gitignore}
ファイルを含みます。(訳注:各サブディレクトリに .gigignore ファイルを含む事ができ、各ディレクトリの .gitignore
はその親ディレクトリまたはその上位ディレクトリの .gitignore をオーバーライドする)

@item
パターンは @samp{$GIT_DIR/info/exclude} から読み取られます。

@item
構成変数 @samp{core.excludesFile} で指定されたファイルから読み取られたパターン。
@end itemize

パターンを配置するファイルは、パターンの使用方法によって異なります。

@itemize 

@item
バージョン管理され、クローンを介して他のリポジトリに配布される必要があるパターン(つまり、すべての開発者が無視したいファイル)は、
@samp{.gitignore} ファイルに入れる必要があります。

@item
特定のリポジトリに固有であるが、他の関連するリポジトリと共有する必要のないパターン(たとえば、リポジトリ内に存在するが1人のユーザーのワークフローに固有の補助ファイル)は、
@samp{$GIT_DIR/info/exclude} ファイルに配置する必要があります。

@item
ユーザーがすべての状況でGitに無視させたいパターン(たとえば、選択したユーザーのエディタによって生成されたバックアップファイルまたは一時ファイル)は、通常、ユーザーの
@samp{~/.gitconfig} の @samp{core.excludesFile} で指定されたファイルに入ります。デフォルト値は
$XDG_CONFIG_HOME/git/ignore です。 $XDG_CONFIG_HOME が設定されていないか空の場合、代わりに
$HOME/.config/git/ignore が使用されます。
@end itemize

@emph{gitls-files} や @emph{git read-tree} などの基盤となるGit配管ツールは、コマンドラインオプションで指定された
@samp{gitignore} パターンを読み取るか、コマンドラインオプションで指定されたファイルから読み取ります。「git status」や「git
add」などの高レベルのGitツールは、上記で指定されたソースからのパターンを使用します。

@noindent

@chapheading PATTERN FORMAT

@itemize 

@item
空行はどのファイルともマッチしないため、読みやすくするための区切りとして使えます。

@item
@samp{#} で始まる行はコメントとして機能します。 @samp{#} で始まるパターンの最初の @samp{#} の前にはバックスラッシュ(「@samp{\}」)を置きます。

@item
末尾の空白は、バックススラッシュ(@samp{\})でクォートされていない限り無視されます。

@item
パターンを否定するオプションのプレフィックス @samp{!}
。以前のパターンで除外されたマッチするファイルは、再び含まれるようになります。そのファイルの親ディレクトリが除外されている場合、そのファイルを再インクルードすることはできません。Gitはパフォーマンス上の理由から除外されたディレクトリを一覧表示しないため、含まれているファイルのパターンは、それらがどこで定義されていても効果がありません。
リテラル @samp{!} で始まるパターンの場合は、最初の @samp{!} の前にバックスラッシュ(@samp{\})を付けます(例: @samp{\!important!.txt})。

@item
スラッシュ @samp{/} はディレクトリ区切り文字として使用されます。区切り文字は、 @samp{.gitignore}
検索パターンの最初、中間、または最後に発生する可能性があります。

@item
パターンの先頭または中間(あるいはその両方)に区切り文字がある場合、パターンは特定の @samp{.gitignore}
ファイル自体のディレクトリレベルに関連しています。そうしないと、パターンは  @samp{.gitignore}
レベルより下の任意のレベルでも一致する可能性があります。

@item
パターンの最後に区切り文字がある場合、パターンはディレクトリのみに一致します。それ以外の場合、パターンはファイルとディレクトリの両方に一致する可能性があります。

@item
たとえば、パターン @samp{doc/frotz/} は @samp{doc/frotz} ディレクトリと一致しますが、 @samp{a/doc/frotz}
ディレクトリとは一致しません。 ただし、 @samp{frotz/} は @samp{frotz} およびディレクトリである @samp{a/frotz}
と一致します(すべてのパスは @samp{.gitignore} ファイルのあるディレクトリからの相対パスです)。

@item
アスタリスク(@samp{*})はスラッシュ(@samp{/})以外のものと一致します。文字 @samp{?}  は、 @samp{/} 以外の任意の1文字と一致します。 範囲表記、例えば
@samp{[a-zA-Z]} は、範囲内の文字の1つと一致させるために使用できます。詳細については、 fnmatch3）および FNM_PATHNAME
フラグを参照してください。
@end itemize

フルパス名と一致するパターンの、2つの連続するアスタリスク(@samp{**})は、以下の特別な意味を持つ場合があります:

@itemize 

@item
先頭の @samp{**} の後にスラッシュ(@samp{/})が続く場合は、すべてのディレクトリで一致することを意味します。 たとえば、 @samp{**/foo} は、パターン
@samp{foo} と同じように、任意の場所のファイルまたはディレクトリ @samp{foo} と一致します。  @samp{**/foo/bar} は、ディレクトリ @samp{foo}
の直下にあるファイルまたはディレクトリ @samp{bar} と一致します。

@item
末尾の @samp{/**} は内部のすべてに一致します。 たとえば、 @samp{abc/**} は、 @samp{.gitignore} ファイルの場所を基準にして、ディレクトリ
@samp{abc} 内のすべてのファイルと無限の深さで一致します。

@item
スラッシュ(@samp{/})の後に2つの連続するアスタリスク(@samp{**})が続く場合、スラッシュは0個以上のディレクトリに一致します。たとえば、 @samp{a/**/b}
は @samp{a/b} や @samp{a/x/b} や @samp{a/x/y/b} などと一致します。

@item
他の連続するアスタリスクは通常のアスタリスクと見なされ、以前のルールに従って一致します。
@end itemize

@noindent

@chapheading CONFIGURATION

オプションの構成変数 @samp{core.excludesFile} は、 @samp{$GIT_DIR/info/exclude}
と同様に、除外するファイル名のパターンを含むファイルへのパスを示します。 @samp{$GIT_DIR/info/exclude}
のパターンに加えて、excludeファイルのパターンが使用されます。

@noindent

@chapheading NOTES

gitignoreファイルの目的は、Gitによって未だ追跡されていない特定のファイルがGitによって追跡される事が無いようにすることです。

現在追跡されているファイルの追跡を停止するには、 @samp{git rm --cached} を使用します。

作業ツリーの @samp{.gitignore}
ファイルにアクセスするとき、Gitはシンボリックリンクをたどりません。これにより、ファイルシステムからではなく、インデックスまたはツリーからファイルにアクセスする場合の動作の一貫性が保たれます。

@noindent

@chapheading EXAMPLES

@itemize 

@item
パターン @samp{hello.*} は、名前が @samp{hello.}
で始まるすべてのファイルまたはフォルダーにマッチします。これをディレクトリのみに制限し、そのサブディレクトリには制限したくない場合は、パターンの前にスラッシュを付けることができます。つまり、
@samp{/hello.*} とします。このパターンは @samp{hello.txt} や @samp{hello.c} とマッチしますが、 @samp{a/hello.java}
とはマッチしません。

@item
パターン @samp{foo/} は、ディレクトリ @samp{foo} とその下のパスに一致しますが、通常のファイルまたはシンボリックリンク @samp{foo}
には一致しません(これは、Gitでのpathspecの一般的な動作方法と一致します)

@item
パターン @samp{doc/frotz} と @samp{/doc/frotz} は、どの @samp{.gitignore}
ファイルでも同じ効果があります。つまり、パターンの中間にスラッシュ(@samp{/})がある場合、先頭のスラッシュは関係ありません。

@item
パターン @samp{foo/*} は、 @samp{foo/test.json} (通常のファイル) や @samp{foo/bar}
(ディレクトリ)とマッチしますが、パターンのアスタリスク(@samp{*})がスラッシュ(@samp{/})を含む @samp{bar/hello.c} とマッチしないため、
@samp{foo/bar/hello.c} (通常のファイル)とは一致しません。
@end itemize

@example
    $ git status
    [...]
    # Untracked files:
    [...]
    #       Documentation/foo.html
    #       Documentation/gitignore.html
    #       file.o
    #       lib.a
    #       src/internal.o
    [...]
    $ cat .git/info/exclude
    # ignore objects and archives, anywhere in the tree.
    *.[oa]
    $ cat Documentation/.gitignore
    # ignore generated html files,
    *.html
    # except foo.html which is maintained by hand
    !foo.html
    $ git status
    [...]
    # Untracked files:
    [...]
    #       Documentation/foo.html
    [...]
@end example


別の例:

@example
    $ cat .gitignore
    vmlinux*
    $ ls arch/foo/kernel/vm*
    arch/foo/kernel/vmlinux.lds.S
    $ echo '!/vmlinux*' >arch/foo/kernel/.gitignore
@end example


2番目の .gitignore は、Gitが @samp{arch/foo/kernel/vmlinux.lds.S} を無視するのを防ぎます。

特定のディレクトリ @samp{foo/bar} 以外のすべてを除外する例(@samp{/*} に注意してください。スラッシュ(@samp{/})なしでワイルドカード(@samp{*})は、
@samp{foo/bar} 内のすべても除外します):

@example
    $ cat .gitignore
    # exclude everything except directory foo/bar
    /*
    !/foo
    /foo/*
    !/foo/bar
@end example


@noindent

@chapheading SEE ALSO

git-rm(1), gitrepository-layout(5),
git-check-ignore(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitk,,,Top
@chapheading Name

gitk — Gitリポジトリブラウザ

@noindent

@chapheading Synopsis

@display
gitk [<options>] [<revision range>] [--] [<path>…]
@end display


@noindent

@chapheading DESCRIPTION

リポジトリまたは選択したコミットのセットの変更を表示します。
これには、コミットグラフの視覚化、各コミットに関連する情報、および各リビジョンのツリー内のファイルの表示が含まれます。

@noindent

@chapheading OPTIONS

表示するリビジョンを制御するために、gitkは @samp{git rev-list} コマンドに適用できるほとんどのオプションをサポートしています。 また、
@samp{git diff-*}
コマンド群に適用できるいくつかのオプションをサポートして、各コミットによって導入される変更の表示方法を制御します。最後に、いくつかのgitk固有のオプションをサポートします。

gitkは通常、コマンドラインパーサーの制限により、串刺し形式(sticked form)の引数を持つオプションのみを理解します(linkgit:
gitcli[7] を参照)。

@noindent

@heading rev-list options and arguments

このマニュアルページでは、最も頻繁に使用されるオプションについてのみ説明しています。 完全なリストについては、
git-rev-list(1) を参照してください。

@table @asis

@item  @samp{--all} 
全ての参照(ブランチ、タグ、等)を表示します。

@item  @samp{--branches[=<pattern>]} 
@itemx  @samp{--tags[=<pattern>]} 
@itemx  @samp{--remotes[=<pattern>]} 
すべてのブランチ(タグ、リモートブランチ、等)がコマンドラインに <commit> としてリストされているかのように見せかけます。 <pattern>
が指定されている場合、参照を指定されたシェルグロブに一致するものに制限します。

@item  @samp{--since=<date>} 
指定の日付よりも新しいコミットを表示します。

@item  @samp{--until=<date>} 
指定の日付より古いコミットを表示します。

@item  @samp{--date-order} 
可能な場合は、コミットを日付順で並べ替えます。

@item  @samp{--merge} 
マージの試みが競合で停止した後、競合するファイルを変更し、マージされるすべてのヘッドに存在しない2つのブランチ間(つまり、HEADとMERGE_HEAD)の履歴のコミットを表示します。

@item  @samp{--left-right} 
対称差のどちら側からコミットに到達できるかをマークします。左側からのコミットには @samp{<} 記号が接頭辞として付けられ、右側からのコミットには @samp{>}
記号が付けられます。

@item  @samp{--full-history} 
@samp{<path>...} で履歴をフィルタリングする場合、一部の履歴は削除されません。(詳細な説明については、 git-log(1)
の「History simplification」を参照してください。)

@item  @samp{--simplify-merges} 
@samp{--full-history}
への追加オプションで、このマージに寄与する選択されたコミットがないため、結果の履歴からいくつかの不要なマージを削除します。(詳細な説明については、
git-log(1) の「History simplification」を参照してください。)

@item  @samp{--ancestry-path} 
表示するコミットの範囲が指定されている(例: @samp{commit1..commit2} または @samp{commit2 @{caret@}commit1})場合、
commit1とcommit2の間の祖先チェーンに直接存在するコミット、つまりcommit1の子孫であり、commit2の祖先でもあるコミットのみを表示します。(詳細な説明については、
linkgit：git-log[1] の「History simplification」を参照してください。)

@item  @samp{-L<start>,<end>:<file>} 
@itemx  @samp{-L:<funcname>:<file>} 
@emph{<file>} 内で、 @emph{<start>,<end>} 、または関数名 regex @emph{<funcname>}
で指定された行範囲をトレースします。pathspec
リミッターを指定することはできません。これは現在、単一のリビジョンから開始するウォークに制限されています。つまり、0個または1個の正のリビジョン引数のみを指定でき、
@emph{<start>} と @emph{<end>} (または @emph{<funcname>})
が開始リビジョンに存在する必要があります。このオプションは複数回指定できます。これは @samp{--patch} オプションの機能を内包しています。パッチ出力は
@samp{--no-patch} を使用して抑制できますが、他の差分形式(つまり、 @samp{--raw}、 @samp{--numstat}、 @samp{--shortstat}、
@samp{--dirstat}、 @samp{--summary}、 @samp{--name-only}、 @samp{--name-status}、
@samp{--check})は現在実装されていません。

@emph{<start>} と @emph{<end>} は、以下のいずれかの形式です:

@itemize 

@item
number

@emph{<start>} または @emph{<end>} が数値の場合、絶対行番号を指定します(行は1から数えます)。

@item
@samp{/regex/}

この形式は、指定されたPOSIX正規表現に一致する最初の行を使用します。 @emph{<start>} が正規表現の場合、前の @samp{-L}
範囲の末尾から検索します。それ以外の場合は、ファイルの先頭から検索します。 @emph{<start>} が @samp{^/regex/}
の場合、ファイルの先頭から検索します。 @emph{<end>} が正規表現の場合、 @emph{<start>} で指定された行から検索開始します。

@item
+offset or -offset

これは <end> に対してのみ有効であり、 <start> で指定された行の前後の行数を指定します。
@end itemize

@emph{<start>} および @emph{<end>} の代わりに @samp{:<funcname>} が指定されている場合、これは @emph{<funcname>}
に一致する最初の関数名行から次の関数名行までの範囲を示す正規表現です。 @samp{:<funcname>} は、前の @samp{-L}
範囲の末尾から検索します。それ以外の場合は、ファイルの先頭から検索します。 @samp{^:<funcname>} はファイルの先頭から検索します。関数名は、
@samp{git diff} がパッチハンクヘッダーを処理するのと同じ方法で決定されます(gitattributes(5) の
@emph{Defining a custom hunk-header} 参照)。

@item  <revision range> 
表示するリビジョンを制限します。これは、指定されたリビジョンからの表示を意味する単一のリビジョンのいずれか、または、"@emph{<from>}..@emph{<to>}"
形式の範囲で、 <from> から <to>
までのすべてのリビジョンを表示することもできます。注意:より高度なリビジョン選択を適用できることに注意してください。オブジェクト名のスペルのより完全なリストについては、
gitrevisions(7) を参照してください。

@item  <path>… 
指定されたパス内のファイルにアクセスするモノだけにコミットを制限します。注意:リビジョン名に関するあいまいさを避けるために、 @samp{--}
を使用してパスを先行するオプションから分離することに注意してください。
@end table

@noindent

@heading gitk-specific options

@table @asis

@item  @samp{--argscmd=<command>} 
gitkが表示するリビジョン範囲を決定する必要があるたびに実行されるコマンド。このコマンドは、標準出力に、表示される追加のリビジョンのリストを1行に1つずつ出力することが期待されています。表示するコミットのセットが更新ごとに異なる可能性がある場合は、<リビジョン範囲>
を明示的に指定する代わりにこれを使用してください。

@item  @samp{--select-commit=<ref>} 
グラフを読み込んだ後、指定したコミットを選択します。デフォルトの動作は、 @samp{-select-commit=HEAD} を指定するのと同じです。
@end table

@noindent

@chapheading Examples

@table @asis

@item  gitk v2.6.12.. include/scsi drivers/scsi 
バージョン「v2.6.12」以降の変更で、include/scsiまたはdrivers/scsiサブディレクトリ内で変更されたファイルを表示する

@item  gitk --since="2 weeks ago" -- gitk 
ファイル @samp{gitk} について過去2週間の変更を表示します。 @samp{--} は、ブランチ名 @samp{gitk} と混同されるのを避けるために必要です。

@item  gitk --max-count=100 --all -- Makefile 
ファイル @samp{Makefile} に加えられた最大100個の変更を表示します。現在のブランチの変更だけを探すのではなく、すべてのブランチを調べます。
@end table

@noindent

@chapheading Files

ユーザー構成と設定は以下の場所に保存されます:

@itemize 

@item
存在すれば @samp{$XDG_CONFIG_HOME/git/gitk} です。でなければ、

@item
存在すれば @samp{$HOME/.gitk} です。
@end itemize

上記のいずれも存在しない場合は、デフォルトで @samp{$XDG_CONFIG_HOME/git/gitk} が作成されて使用されます。
@emph{$XDG_CONFIG_HOME} が設定されていない場合、すべての場合でデフォルトで @samp{$HOME/.config} になります。

@noindent

@chapheading History

Gitkは最初のグラフィカルリポジトリブラウザでした。それはtcl/tkで書かれています。

@samp{gitk}
は実際には独立したプロジェクトとして維持されていますが、エンドユーザーの便宜のために安定したバージョンがGitスイートの一部として配布されています。

gitk-git/ は、 Paul Mackerras のgitkプロジェクトからのものです:

@example
git://ozlabs.org/~paulus/gitk
@end example

@noindent

@chapheading SEE ALSO

@table @asis

@item  @emph{qgit(1)} 
Qtを使用してC++で記述されたリポジトリブラウザです。

@item  @emph{tig(1)} 
Ncursesを使用してCで記述された最小限のリポジトリブラウザーとGitツールの出力ハイライト。
@end table

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitmailmap,,,Top
@chapheading Name

gitmailmap — 作者(author)/コミッター(committer) および/または 電子メールアドレス(E-Mail addresses)をマップします

@noindent

@chapheading Synopsis

$GIT_WORK_TREE/.mailmap

@noindent

@chapheading DESCRIPTION

ファイル @samp{.mailmap} がリポジトリのトップレベルに存在する場合、または @samp{mailmap.file} とか @samp{mailmap.blob}
構成オプション(git-config(1) 参照)が指す場所(ファイルパスとかブロブ)に存在する場合は、
作者とコミッターの名前と電子メールアドレスを、正規の本名と電子メールアドレスにマッピングするために使用されます。

@noindent

@chapheading SYNTAX

@emph{#} 文字から行末まではコメントで、空白行は無視されます。

単純な形式では、ファイルの各行は、作成の正規の本名、空白、および名前にマップするためにコミットで使用される電子メールアドレス(@emph{<} と @emph{>}
で囲まれている)で構成されます。 例えば:

@example
Proper Name <commit@@email.xx>
@end example

より複雑な形式では:

@example
<proper@@email.xx> <commit@@email.xx>
@end example

で、これにより、メールマップはコミット用の電子メールアドレスのみを置き換えることができます。そして:

@example
Proper Name <proper@@email.xx> <commit@@email.xx>
@end example

では、mailmapは、指定されたコミット用電子メールアドレスに一致するコミッターの名前と電子メールのアドレス両方を置き換えることができます。そして:

@example
Proper Name <proper@@email.xx> Commit Name <commit@@email.xx>
@end example

では、mailmapは、指定されたコミッターの名前と電子メールアドレスの両方に一致するコミッターの名前と電子メールの両方を置き換えることができます。

電子メールアドレスと名前の両方が大文字と小文字を区別せずに照合されます。たとえば、以下は上記の @emph{Commit Name
<commit@@email.xx>} とも一致します:

@example
Proper Name <proper@@email.xx> CoMmIt NaMe <CoMmIt@@EmAiL.xX>
@end example

@noindent

@chapheading NOTES

作業ツリーの @samp{.mailmap} ファイルにアクセスするとき、Gitはシンボリックリンクをたどりません。
これにより、ファイルがインデックスまたはツリーからアクセスされたときとファイルシステムからアクセスされたときの動作の一貫性が保たれます。

@noindent

@chapheading EXAMPLES

あなたの履歴には、JaneとJoeの2人の作者(authors)によるコミットが含まれています。これらの作成の名前は、リポジトリにいくつかの形式で表示されます:

@example
Joe Developer <joe@@example.com>
Joe R. Developer <joe@@example.com>
Jane Doe <jane@@example.com>
Jane Doe <jane@@laptop.(none)>
Jane D. <jane@@desktop.(none)>
@end example


ここで、Joeが当初は、ミドルネームを使用することを望み、Janeが彼女の家族名を完全に綴ることを好むとします。名前を修正するための
@samp{.mailmap} ファイルは以下のようになります:

@example
Joe R. Developer <joe@@example.com>
Jane Doe <jane@@example.com>
Jane Doe <jane@@desktop.(none)>
@end example


注意: 名前を修正するためだけに、 @emph{<jane@@laptop.(none)>}
のnamesをマップする必要はないことに注意してください。ただし、明らかに壊れた @emph{<jane@@laptop.(none)>} と
@emph{<jane@@desktop.(none)>}
というの電子メールアドレスをそのままにしておくことは、通常、希望するものではありません。したがって、これらも修正する @samp{.mailmap}
ファイルは以下のとおりです:

@example
Joe R. Developer <joe@@example.com>
Jane Doe <jane@@example.com> <jane@@laptop.(none)>
Jane Doe <jane@@example.com> <jane@@desktop.(none)>
@end example


最後に、JoeとJaneが電子メールアドレスを共有しているが、名前は共有していないとしましょう。バグ報告システムによって生成された履歴にそれぞれのコミットを含めるとします。つまり、履歴には以下のように名前があらわれます:

@example
Joe <bugs@@example.com>
Jane <bugs@@example.com>
@end example


これらのケースも処理する完全な @samp{.mailmap} ファイル(上記の例に2行追加)は以下のようになります:

@example
Joe R. Developer <joe@@example.com>
Jane Doe <jane@@example.com> <jane@@laptop.(none)>
Jane Doe <jane@@example.com> <jane@@desktop.(none)>
Joe R. Developer <joe@@example.com> Joe <bugs@@example.com>
Jane Doe <jane@@example.com> Jane <bugs@@example.com>
@end example


@noindent

@chapheading SEE ALSO

git-check-mailmap(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitmodules,,,Top
@chapheading Name

gitmodules — サブモジュールプロパティの定義

@noindent

@chapheading Synopsis

$GIT_WORK_TREE/.gitmodules

@noindent

@chapheading DESCRIPTION

Git作業ツリーの最上位ディレクトリにある @samp{.gitmodules} ファイルは、 git-config(1)
の構文を持つテキストファイルです。

このファイルには、サブモジュールごとに1つのサブセクションが含まれており、サブセクションの値はサブモジュールの名前です。名前は、 @samp{git
submodule add} の @samp{--name}
プションでカスタマイズされていない限り、サブモジュールが追加されたパス名として使用されます。各サブモジュールセクションには、以下の必須キーも含まれています:

@table @asis

@item  submodule.<name>.path 
サブモジュールがチェックアウトされると予想される、Git作業ツリーの最上位ディレクトリを基準にしたパスを定義します。 パス名は`/`
で終わらせてはいけません。 すべてのサブモジュールパスは、 @samp{.gitmodules} ファイル内で一意である必要があります。

@item  submodule.<name>.url 
サブモジュールリポジトリのクローンを作成できるURLを定義します。 これは、 git-clone(1)
に渡す準備ができている絶対URLか、 ( @samp{./} または @samp{../}
で始まる場合)スーパープロジェクトの、元のリポジトリ(superproject’s origin repository)から相対的な場所のいずれかです。
@end table

さらに、いくつかのオプションのキーがあります:

@table @asis

@item  submodule.<name>.update 
名前付きサブモジュールのデフォルトの更新手順を定義します。つまり、スーパープロジェクトの @samp{git submodul eupdate}
コマンドによってサブモジュールが更新される方法を定義します。これは、同一名称の構成変数を初期化するために @samp{git submodule init}
によってのみ使用されます。 ここで許可される値は、「checkout」、「rebase」、「merge」、「none」です。 それらの意味については、
git-submodule(1)
の「update」コマンドの説明を参照してください。セキュリティ上の理由から、「!command」形式は受け入れられません。

@item  submodule.<name>.branch 
アップストリームサブモジュールの更新を追跡するためのリモートブランチ名。このオプションが指定されていない場合のデフォルトは、リモートのHEADになります。
別な値 @samp{.}
は、サブモジュール内のブランチ名が現在のリポジトリ内の現在のブランチ名と同一でなければならないことを示すために使用されます。詳細については、
git-submodule(1) の @samp{--remote} ドキュメントを参照してください。

@item  submodule.<name>.fetchRecurseSubmodules 
このオプションは、このサブモジュールの再帰的フェッチを制御するために使用できます。このオプションがスーパープロジェクトの @samp{.git/config}
のサブモジュールのエントリにも存在する場合、そこでの設定は @samp{.gitmodules}
にある設定を上書きします。コマンドラインで両方の設定を上書きするには、 @samp{--[no-]recurse-submodules} オプションを @samp{git
fetch} と @samp{git pull} で使用します。

@item  submodule.<name>.ignore 
どのような状況で @samp{git status} とdiffファミリーがサブモジュールを変更済みとして表示するかを定義します。指定できるのは以下の値です:

@table @asis

@item  all 
サブモジュールが変更されたと見なされる事は決してありません(
ただし、ステータスの出力には表示され、ステージングされるとコミット
されます)。

@item  dirty 
サブモジュールの作業ツリーへのすべての変更は無視され、
サブモジュールの「HEAD」とスーパープロジェクトで記録された状態との間の
コミットされた違いのみが考慮されます。

@item  untracked 
サブモジュール内の追跡されていないファイル(untracked files)のみが無視されます。
追跡中のファイルへのコミットされた違いと変更が
表示されます。

@item  none 
サブモジュールへの変更は無視されず、コミットされたすべての違い、
および追跡されたファイルと追跡されていないファイルへの変更が表示されます。
これはデフォルトのオプションです。
@end table

このオプションがスーパープロジェクトの @samp{.git/config} のサブモジュールのエントリにも存在する場合、そこでの設定は
@samp{.gitmodules} にある設定を上書きします。

@samp{--ignore-submodules} オプションを使用すると、コマンドラインで両方の設定を上書きできます。 @samp{git submodule}
コマンドは、この設定の影響を受けません。

@item  submodule.<name>.shallow 
trueに設定すると、ユーザーが明示的に非浅いクローン(non-shallow
clone)を要求しない限り、このサブモジュールのクローンは浅いクローン(shallow clone)(履歴の深さ1)として実行されます。
@end table

@noindent

@chapheading NOTES

Gitは、作業ツリー内の @samp{.gitmodules}
ファイルをシンボリックリンクにすることを許可せず、そのようなツリーエントリのチェックアウトを拒否します。これにより、ファイルがインデックスまたはツリーからアクセスされたときとファイルシステムからアクセスされたときの動作の一貫性が保たれ、Gitがファイルの内容のセキュリティチェックを確実に実施できるようになります。

@noindent

@chapheading EXAMPLES

以下の @samp{.gitmodules} ファイルについて考えてみます:

@example
[submodule "libfoo"]
        path = include/foo
        url = git://foo.com/git/lib.git

[submodule "libbar"]
        path = include/bar
        url = git://bar.com/git/lib.git
@end example


これは、@samp{libfoo} と @samp{libbar} の2つのサブモジュールを定義します。 これらはパス @samp{include/foo} と
@samp{include/bar}
でチェックアウトされることが期待されており、両方のサブモジュールに対して、サブモジュールのクローン作成に使用できるURLが指定されています。

@noindent

@chapheading SEE ALSO

git-submodule(1), gitsubmodules(7), git-config(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitnamespaces,,,Top
@chapheading Name

gitnamespaces — Git名前空間

@noindent

@chapheading Synopsis

@display
GIT_NAMESPACE=<namespace> git upload-pack
GIT_NAMESPACE=<namespace> git receive-pack
@end display


@noindent

@chapheading DESCRIPTION

Gitは、単一のリポジトリのrefを複数の名前空間に分割することをサポートしています。各名前空間には、独自のブランチ、タグ、およびHEADがあります。Gitは、オブジェクトストアを共有し、すべてのrefを
git-gc(1) などの操作に公開しながら、プル元とプッシュ先の独立したリポジトリとして各名前空間を公開できます。

複数のリポジトリを単一のリポジトリの名前空間として保存すると、同じソースの複数のブランチを保存する場合など、同じオブジェクトの重複コピーを保存することを回避できます。代替メカニズムは、重複を回避するための同様のサポートを提供しますが、名前空間が行うのに対し、代替は、継続的なメンテナンスなしでリポジトリに追加された新しいオブジェクト間の重複を防止しません。

名前空間を指定するには、 @samp{GIT_NAMESPACE} 環境変数に名前空間を設定します。 ref名前空間ごとに、Gitは対応するrefを
@samp{refs/namespaces/} の下のディレクトリに保存します。 たとえば、 @samp{GIT_NAMESPACE=foo} はrefを
@samp{refs/namespaces/foo/} の下に保存します。 git(1) の @samp{--namespace}
オプションを使用して名前空間を指定することもできます。

注意: @samp{/} を含む名前空間は、名前空間の階層に拡張されることに注意してください。たとえば、 @samp{GIT_NAMESPACE=foo/bar}
はrefを @samp{refs/namespaces/foo/refs/namespaces/bar/} の下に保存します。 これにより、
@samp{GIT_NAMESPACE} のパスが階層的に動作するため、 @samp{GIT_NAMESPACE=foo/bar} でクローンを作成すると、
@samp{GIT_NAMESPACE=foo} でクローンを作成してそのリポジトリから @samp{GIT_NAMESPACE=bar}
でクローンを作成するのと同じ結果が得られます。また、 @samp{foo/refs/heads/}
などの奇妙な名前空間パスとのあいまいさを回避します。そうしないと、 @samp{refs} ディレクトリ内で ディレクトリ/ファイル
の競合が発生する可能性があります。

git-upload-pack(1) と git-receive-pack(1) は、 @samp{GIT_NAMESPACE}
で指定されているようにrefの名前を書き換えます。 git-upload-pack と git-receive-pack
は、指定された名前空間外のすべてのrefを無視します。

スマートHTTPサーバー git-http-backend(1) は、 GIT_NAMESPACE
をバックエンドプログラムに渡します。リポジトリの名前空間をリポジトリとして公開するための設定例については、
git-http-backend(1) を参照してください。

簡単なローカルテストには、あなたは git-remote-ext(1) を使用できます:

@example
git clone ext::'git --namespace=foo %s /tmp/prefixed.git'
@end example


@noindent

@chapheading SECURITY

フェッチおよびプッシュプロトコルは、共有することを意図していない一方の側が他方のリポジトリからデータを盗むのを防ぐようには設計されていません。悪意のある者から保護する必要のあるプライベートデータがある場合、最善のオプションはそれを別のリポジトリに保存することです。これは、クライアントとサーバーの両方に適用されます。特に、サーバー上の名前空間は、読み取りアクセス制御には効果的ではありません。リポジトリ全体への読み取りアクセスで信頼できるクライアントにのみ、名前空間への読み取りアクセスを許可する必要があります。

既知の攻撃ベクトル(attack vectors)は以下のとおりです:

@enumerate 

@item
被害者は、明示的に共有することを意図していないオブジェクトのIDをアドバタイズする "have"
行を送信しますが、他にもIDを持っている者が居る場合は、転送を最適化するために使用できます。攻撃者はオブジェクトID
Xを選択して盗み、refをXに送信しますが、被害者はすでにXのコンテンツを持っているため、Xのコンテンツを送信する必要はありません。
これで、被害者は攻撃者がXを持っていると信じ、Xのコンテンツを後で攻撃者に送り返します。
(この攻撃は、クライアントがアクセスできる名前空間にXへのrefを作成してフェッチすることにより、クライアントがサーバー上で実行するのが最も簡単です。サーバーがクライアント上で実行する最も可能性の高い方法は、Xをパブリックブランチにマージし、ユーザーがこのブランチで追加の作業を行い、マージに気付かずにサーバーにプッシュバックすることを期待します。)

@item
#1 と同様に、攻撃者は盗むオブジェクトID
Xを選択します。被害者は、攻撃者がすでに持っているオブジェクトYを送信し、攻撃者はYではなくXを持っていると誤って主張するため、被害者はYをXに対するデルタとして送信します。デルタは、攻撃者にYに類似したXの領域を明らかにします。
@end enumerate

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitremote-helpers,,,Top
@chapheading Name

gitremote-helpers — リモートリポジトリと対話するためのヘルパープログラム群

@noindent

@chapheading Synopsis

@display
git remote-<transport> <repository> [<URL>]
@end display


@noindent

@chapheading DESCRIPTION

リモートヘルパープログラムは通常、エンドユーザーが直接使用することはありませんが、Gitがネイティブでサポートしていないリモートリポジトリと対話する必要がある場合にGitによって呼び出されます。
特定のヘルパーは、ここに記載されている機能のサブセットを実装します。
Gitがリモートヘルパーを使用してリポジトリと対話する必要がある場合、Gitは独立したプロセスとしてヘルパーを生成し、ヘルパーの標準入力にコマンドを送信し、ヘルパーの標準出力からの結果を期待します。
リモートヘルパーはGitから独立したプロセスとして実行されるため、新しいヘルパーを追加するためにGitを再リンクする必要も、ヘルパーをGitの実装にリンクする必要もありません。

すべてのヘルパーは @samp{capabilities}
(機能)コマンドをサポートする必要があります。これは、ヘルパーが受け入れる他のコマンドをGitが決定するために使用します。これらの他のコマンドを使用して、リモート参照の検出と更新や、オブジェクトデータベースとリモートリポジトリ間のオブジェクトの転送や、ローカルオブジェクトストアの更新を行うことができます。

Gitには、 @samp{git-remote-http} や、 @samp{git-remote-https} や、 @samp{git-remote-ftp} や、
@samp{git-remote-ftps} などのさまざまな転送(transport)プロトコルを処理する "curl"
ファミリーのリモートヘルパーが付属しています。これらは、機能(capabilities)として、 @samp{fetch} と @samp{option} と @samp{push}
を実装します。

@noindent

@chapheading INVOCATION

リモートヘルパープログラムは、1つまたは(オプションで)2つの引数を使用して呼び出されます。最初の引数は、Gitのようにリモートリポジトリを指定します。それは設定されたリモートの名前またはURLのいずれかです。2番目の引数はURLを指定します。
通常は @samp{<transport>://<address>} の形式ですが、任意の文字列を使用できます。 @samp{GIT_DIR}
環境変数はリモートヘルパー用に設定されており、追加データを保存する場所や、補助Gitコマンドを呼び出すディレクトリを決定するために使用できます。

Gitが @samp{<transport>://<address>} の形式のURLを検出すると、ここで、 @samp{<transport>}
はネイティブに処理できないプロトコルで、2番目の引数として完全なURLを使用して @samp{git remote-<transport>}
を自動的に呼び出します。そのようなURLがコマンドラインで直接検出された場合は最初の引数は2番目の引数と同じであり、構成されたリモートで検出された場合最初の引数はそのリモートの名前です。

@samp{<transport>::<address>} の形式のURLは、2番目の引数として @samp{<address>} を使用して @samp{git
remote-<transport>} を呼び出すようにGitに明示的に指示します。このようなURLがコマンドラインで直接検出された場合最初の引数は
@samp{<address>} であり、構成されたリモートで検出された場合最初の引数はそのリモートの名前です。

さらに、構成されたリモートで @samp{remote.<name>.vcs} が @samp{<transport>} に設定されている場合、Gitは最初の引数として
@samp{<name>} を使用して @samp{git remote-<transport>} を明示的に呼び出します。  @samp{remote.<name>.url}
が設定されている場合は、2番目の引数は @samp{remote.<name>.url} です。 @samp{remote.<name>.url}
が設定されてない場合、2番目の引数は省略されます。

@noindent

@chapheading INPUT FORMAT

Gitは、リモートヘルパーの標準入力にコマンドのリストを1行に1つずつ送信します。 最初のコマンドは常に @samp{capabilities}
(機能)コマンドであり、これに応答して、リモートヘルパーはサポートする機能のリスト(以下を参照)とそれに続く空白行を出力する必要があります。機能コマンドへの応答により、Gitがコマンドストリームの残りの部分で使用するコマンドが決まります。

コマンドストリームは空白行で終了します。場合によっては(関連するコマンドのドキュメントに示されています)、この空白行の後に他のプロトコル(packプロトコルなど)のペイロードが続きますが、他の場合は入力の終了を示します。

@noindent

@heading Capabilities

各リモートヘルパーは、コマンド群のサブセットのみをサポートすることが期待されています。ヘルパーがサポートする操作は、 @samp{capabilities}
コマンドへの応答でGitに宣言されます(以下のCOMMANDSを参照)。

以下に、定義されているすべての機能をリストし、それぞれについて、その機能を持つヘルパーが提供しなければならないコマンドをリストします。

@noindent

@subheading Capabilities for Pushing

@table @asis

@item  @emph{connect} 
gitのネイティブpackfileプロトコルを使用した通信のために、 @samp{git receive-pack}(プッシュ用)、 @samp{git
upload-pack} などへの接続を試みることができます。これには、双方向の全二重接続が必要です。

サポートされているコマンド: @emph{connect}

@item  @emph{stateless-connect} 
実験的:内部使用のみ。 gitのワイヤープロトコル バージョン2を使用して、通信のためにリモートサーバーへの接続を試みることができます。詳細については、
stateless-connect コマンドのドキュメントを参照してください。

サポートされているコマンド: @emph{stateless-connect}.

@item  @emph{push} 
リモートrefを発見する事ができ、そして、ローカルコミットとそれらに至るまでの履歴を、新規または既存のリモートrefにプッシュする事ができます。

サポートされているコマンド: @emph{list for-push}, @emph{push}.

@item  @emph{export} 
リモートrefを発見し、指定のオブジェクトを高速インポートストリームからリモートrefにプッシュできます。

サポートされているコマンド: @emph{list for-push}, @emph{export}.
@end table

ヘルパーが @samp{connect}
を広告(advertise)する場合、Gitは可能であればそれを使用し、接続時にヘルパーが要求すると別の機能にフォールバックします(「COMMANDS」セクションの
@samp{connect} コマンド参照)。  @samp{push} と @samp{export} のどちらかを選択する場合、Gitは @samp{push}
を優先します。他のフロントエンドには、他の優先順位がある場合があります。

@table @asis

@item  @emph{no-private-update} 
@samp{refspec} 機能を使用する場合、gitは通常、プッシュが成功するとプライベートrefを更新します。リモートヘルパーが機能
@samp{no-private-update} を宣言すると、この更新は無効になります。
@end table

@noindent

@subheading Capabilities for Fetching

@table @asis

@item  @emph{connect} 
Gitのネイティブpackfileプロトコルを使用した通信のために、 @samp{git upload-pack}(フェッチ用)、 @samp{git
receive-pack} などへの接続を試みることができます。これには、双方向の全二重接続が必要です。

サポートされているコマンド: @emph{connect}

@item  @emph{stateless-connect} 
実験的:内部使用のみ。 gitのワイヤープロトコル バージョン2を使用して、通信のためにリモートサーバーへの接続を試みることができます。詳細については、
stateless-connect コマンドのドキュメントを参照してください。

サポートされているコマンド: @emph{stateless-connect}.

@item  @emph{fetch} 
リモートrefを発見し、それらから到達可能なオブジェクトをローカルオブジェクトストアに転送できます。

サポートされているコマンド: @emph{list}, @emph{fetch}.

@item  @emph{import} 
リモートrefを発見し、それらから到達可能なオブジェクトを高速インポート形式(fast-import format)のストリームとして出力できます。

サポートされているコマンド: @emph{list}, @emph{import}.

@item  @emph{check-connectivity} 
クローンを要求(request)されたときに、受信したパックが、自己完結しており、そして、接続されていることを保証できます。
@end table

ヘルパーが @samp{connect}
を広告(advertise)する場合、Gitは可能であればそれを使用し、接続時にヘルパーが要求すると別の機能にフォールバックします(「COMMANDS」セクションの
@samp{connect} コマンド参照)。  @samp{fetch} と @samp{import} のどちらかを選択する場合、Gitは @samp{fetch}
を優先します。他のフロントエンドには、他の優先順位がある場合があります。

@noindent

@subheading Miscellaneous capabilities

@table @asis

@item  @emph{option} 
他のコマンドの実行方法に影響を与える @samp{verbosity} (stderrに書き込む出力量)や、 @samp{depth} (浅いクローン(shallow
clone)の場合に必要な履歴量)などの設定を指定します。

@item  @emph{refspec} <refspec> 
@samp{import} または @samp{export} を実装するリモートヘルパーの場合、この機能により、 @samp{refs/heads} または
@samp{refs/remotes} に直接書き込む代わりに、refsをプライベート名前空間に制約できます。 @samp{import}
機能を提供するすべてのインポーターがこれを使用することをお勧めします。 @samp{export} では必須です。

機能 @samp{refspec refs/heads/*:refs/svn/origin/branches/*} を広告(advertise)するヘルパーは、
@samp{import refs/heads/topic} と問われた時に出力されるストリームは
、@samp{refs/svn/origin/branches/topic} ref を更新します。

この機能は複数回広告できます。最初に適用可能なrefspecが優先されます。この機能でアドバタイズされるrefspecの(@samp{:}
の)左側は、listコマンドによって報告されるすべてのrefをカバーする必要があります。 @samp{refspec} 機能が広告されていない場合は暗黙の
@samp{refspec *:*} が設定されています。

分散型バージョン管理システム用のリモートヘルパーを作成する場合は、リポジトリのローカルコピーを保持して対話することをお勧めします。プライベート名前空間refsがこのローカルリポジトリを指すようにし、refs/remotes
名前空間はリモートリポジトリを追跡するために使用されます。

@item  @emph{bidi-import} 
これにより、 @samp{import} 機能が変更されます。fast-importコマンドの @samp{cat-blob} と @samp{ls}
をリモートヘルパーが使用して、fast-importのメモリにすでに存在するブロブとツリーに関する情報を取得できます。これには、fast-importからリモートヘルパーへのチャネルが必要です。
@samp{import} に加えて広告される場合、Gitはfast-importからリモートヘルパーのstdinへのパイプを確立します。
したがって、Gitとfast-importは両方ともリモートヘルパーのstdinに接続されています。Gitは複数のコマンドをリモートヘルパーに送信できるため、データをfast-importに送信する前に、
@samp{bidi-import} を使用するヘルパーがバッチのすべての @samp{import} コマンドをバッファリングする必要があります。
これは、ヘルパーのstdinでコマンドと、fast-import高速インポート応答が混在するのを防ぐためです。

@item  @emph{export-marks} <file> 
これにより、 @samp{export} 機能が変更され、完了時に内部マークテーブル(internal marks
table)を<file>にダンプするようにGitに指示します。詳細については git-fast-export(1) の
@samp{--export-marks=<file>} を参照してください。

@item  @emph{import-marks} <file> 
これにより、 @samp{export} 機能が変更され、入力を処理する前に<file>で指定したマークをロードするようにGitに指示します。詳細については
git-fast-export(1) の @samp{--import-marks=<file>} を参照してください。

@item  @emph{signed-tags} 
これにより、 @samp{export} 機能が変更され、 @samp{--signed-tags=verbatim} を
linkgit：git-fast-export[1]に渡すようにGitに指示します。この機能がない場合、Gitは
@samp{--signed-tags=warn-strip} を使用します。

@item  @emph{object-format} 
これは、ヘルパーが明示的なハッシュアルゴリズム拡張(explicit hash algorithm
extension)を使用してリモート側と対話できることを示しています。
@end table

@noindent

@chapheading COMMANDS

コマンドは、ヘルパーの標準入力に、呼び出し元によって1行に1つずつ与えられます。

@table @asis

@item  @emph{capabilities} 
ヘルパーの機能を1行に1つずつリスト出力し、空白行で終わります。各機能の前に @samp{*}
を付けることができます。これは、リモートヘルパーを使うGitのバージョンで理解することが必須であることを示します。不明な必須機能は致命的なエラーです。

このコマンドのサポートは必須です。

@item  @emph{list} 
refを1行に1つずつ、 @samp{<value> <name> [<attr> ...]} の形式で一覧出力します。 値は、16進のsha1ハッシュ
または、symrefの場合は @samp{@@<dest>} または、キーと値のペアの場合は @samp{:<keyword> <value>} または、 `？｀
の場合はヘルパーがrefの値を取得できなかったことを示します。
nameの後には、スペースで区切られたattributes(属性)のリストが続きます。認識されない属性は無視されます。リストは空白行で終わります。

現在定義されている属性のリストについては、「REF LIST
ATTRIBUTES」を参照してください。現在定義されているキーワードのリストについては、「REF LIST KEYWORDS」を参照してください。

ヘルパーに「fetch」または「import」機能がある場合にサポートされます。

@item  @emph{list for-push} 
@samp{list}
と似ていますが、呼び出し元が結果のrefリストでプッシュコマンドを準備したい場合にのみ使用される点が異なります。プッシュとフェッチの両方をサポートするヘルパーは、これを使用して、
@samp{list} の出力が使用される操作を区別し、実行する必要のある作業の量を減らすことができます。

ヘルパーに "push" または "export" 機能がある場合にサポートされます。

@item  @emph{option} <name> <value> 
転送(transport)ヘルパーオプション <name> を <value> に設定します。出力は、 @samp{ok}(オプションが正常に設定された)または、
@samp{unsupported}(オプションが認識されない)または、 @samp{error
<msg>}(オプション<name>はサポートされていますが、<value>は無効です)のいずれかを含む単一行です。オプションは他のコマンドの前に設定する必要があり、それらのコマンドの動作に影響を与える可能性があります。

現在定義されているオプションのリストについては、OPTIONSを参照してください。

ヘルパーに "option" 機能がある場合にサポートされます。

@item  @emph{fetch} <sha1> <name> 
指定されたオブジェクトをフェッチし、必要なオブジェクトをデータベースに書き込みます。fetchコマンドは、1行に1つずつバッチで送信され、空白行で終了します。
同じバッチ内のすべてのfetchコマンドが完了すると、1行の空白行を出力します。この方法でフェッチできるのは、sha1を使用した @samp{list}
の出力で報告されたオブジェクトのみです。

オプションで、refが適切に更新されるまでパックを保持している @samp{$GIT_DIR/objects/pack} の下のファイルのフルパスを示す
@samp{lock<file>} 行を出力できます。パスは @samp{.keep} で終わる必要があります。これは、keepコンポーネントのみを指定して、
<pack,idx,keep>
タプルに名前を付けるメカニズムです。保持されたパックは、フェッチが完了するまでそのオブジェクトが参照されない場合でも、並列再パック(concurrent
repack)によって削除されません。 @samp{.keep} ファイルはフェッチの終了時に削除されます。

オプション @samp{check-connectivity}
が要求された場合、クローンが自己完結型(self-contained)で接続されていれば、ヘルパーは @samp{connectivity-ok}
を出力する必要があります。

ヘルパーに "fetch" 機能がある場合にサポートされます。

@item  @emph{push} +<src>:<dst> 
指定された ローカル <src> コミットまたはブランチを、 <dst>で記述されたリモートブランチにプッシュします。 1つ以上の @samp{push}
コマンドのバッチシーケンスは空白行で終了します(pushへの参照が1つしかない場合は、単一の @samp{push}
コマンドの後に空白行が続きます)。たとえば、以下は @samp{push} の2つのバッチであり、最初のはリモートヘルパーに、ローカル参照 @samp{master}
をリモート参照 @samp{master} にプッシュし、ローカル @samp{HEAD} をリモート @samp{branch} にプッシュするように要求します。2番目のは ref
@samp{foo} を ref @samp{bar} にプッシュするように要求します(@emph{+} によって要求された強制更新です)。

@example
push refs/heads/master:refs/heads/master
push HEAD:refs/heads/branch
\n
push +refs/heads/foo:refs/heads/bar
\n
@end example


最後の @samp{push} コマンドの後、バッチの終了空白行の前に、0個以上のプロトコルオプションを入力できます。

プッシュが完了すると、1つ以上の @samp{ok <dst>} または @samp{error <dst> <why>?}
行を出力して、プッシュされた各参照の成功または失敗を示します。ステータスレポートの出力は空白行で終了します。オプションフィールド <why>
は、LFが含まれている場合、Cスタイルの文字列でクォートされる場合があります。

ヘルパーに "push" 機能がある場合にサポートされます。

@item  @emph{import} <name> 
名前付きrefの現在の値をインポートするfast-importストリームを生成します。履歴を効率的に構築するために、必要に応じて他の参照を追加でインポートする場合があります。スクリプトは、ヘルパー固有のプライベート名前空間に書き込みます。名前付きrefの値は、「refspec」機能からのrefspecをrefの名前に適用することによって派生した、この名前空間内の場所に書き込む必要があります。

他のバージョン管理システムとの相互運用性に特に役立ちます。

@samp{push} と同様に、1つ以上の @samp{import} のバッチシーケンスは空白行で終了します。 @samp{import} の各バッチごとに、リモートヘルパーは
@samp{done} コマンドで終了する fast-import ストリームを生成する必要があります。

@samp{bidi-import}
機能を使用する場合は、ヘルパーのstdinでの、コマンドとfast-import応答の混合を防ぐために、fast-importへのデータの送信を開始する前にバッチシーケンスを完全にバッファリングする必要があることに注意してください。

ヘルパーに "import" 機能がある場合にサポートされます。

@item  @emph{export} 
後続の入力は、リモートにプッシュする必要のあるオブジェクトを含むfast-importストリーム( @samp{git fast-export}
によって生成される)の一部であることをリモートヘルパーに指示します。

他のバージョン管理システムとの相互運用性に特に役立ちます。

@samp{export-marks} と @samp{import-marks} 機能は、指定されている場合、 @samp{git fast-export｀
に渡される限り、このコマンドに影響します。 `git fast-export} は、ローカルオブジェクトのマークのテーブルを ロード/保存 します。
これは、増分操作の実装に使用できます。

ヘルパーに "export" 機能がある場合にサポートされます。

@item  @emph{connect} <service> 
指定のサービスに接続します。ヘルパーの標準入力と標準出力は、リモート側で指定指定のサービスに接続されます(gitプレフィックスはサービス名に含まれているので、例えばフェッチはサービスとして
@samp{git-upload-pack} を使用します)。このコマンドに対する有効な応答は、空行(接続が確立されました)と、 @samp{fallback}
(スマート転送サポートなし、バカ転送(dumb
transports)にフォールバック)と、エラーメッセージが印刷された状態で終了するだけです(接続できません、フォールバックしようと気にしないで)。肯定(空)応答が改行で終了すると、サービスの出力が開始されます。接続が終了すると、リモートヘルパーは終了します。

ヘルパーに "connect" 機能がある場合にサポートされます。

@item  @emph{stateless-connect} <service> 
実験的: 内部使用のみ。
gitのワイヤープロトコルバージョン2を使用して通信するために、指定のリモートサービスに接続します。このコマンドへの有効な応答は、空行(接続が確立されました)と、
@samp{fall back}
(スマート転送サポートなし、バカ転送にフォールバック)と、エラーメッセージ出力するだけです(接続できません。わざわざフォールバックしようとしないでください)。
正の(空の)応答を終了する改行の後、サービスの出力が開始されます。
メッセージ(要求と応答の両方)は、0個以上のPKT-LINEで構成され、フラッシュパケットで終了する必要があります。
応答メッセージには、応答の終了を示すフラッシュパケットの後に応答終了パケットがあります。
クライアントは、サーバーが要求と応答のペアの間に状態を保持することを期待してはなりません。接続が終了すると、リモートヘルパーが終了します。

ヘルパーに "stateless-connect" 機能がある場合にサポートされます。
@end table

致命的なエラーが発生した場合、プログラムはエラーメッセージをstderrに書き込み、終了します。呼び出し元は、子が現在のコマンドに対する有効な応答を完了せずに接続を閉じた場合に、適切なエラーメッセージを出力することを期待します。

ヘルパーによって報告された機能から判断できるように、追加のコマンドがサポートされる場合があります。

@noindent

@chapheading REF LIST ATTRIBUTES

'list’コマンドは、各refの後に属性(attribute)のリストが続くことがあるrefのリストを生成します。以下のrefリスト属性(ref
list attributes)が定義されています。

@table @asis

@item  @emph{unchanged} 
このrefは、最後にインポートまたはフェッチしたときから変更されていませんが、ヘルパーは必ずしもどの値が生成されたかを判別することはできるわけではありません。
@end table

@noindent

@chapheading REF LIST KEYWORDS

listコマンドは、キーと値のペア(key-value pairs)のリストを生成する場合があります。以下のキーが定義されています。

@table @asis

@item  @emph{object-format} 
refは指定のハッシュアルゴリズムを使用しています。このキーワードは、サーバーとクライアントの両方がオブジェクト形式の拡張機能(object-format
extension)をサポートしている場合にのみ使用されます。
@end table

@noindent

@chapheading OPTIONS

以下のオプションは、リモートヘルパーに option 機能がある場合にGitによって定義され、(適切な状況下で)設定されます。

@table @asis

@item  @emph{option verbosity} <n> 
ヘルパーによって表示されるメッセージの詳細度を変更します。 <n>の値0は、プロセスが静かに動作し、ヘルパーがエラー出力のみを生成することを意味します。
1は冗長性のデフォルトレベルであり、<n>の値が大きさは、コマンドラインで渡される @samp{-v} フラグの数に対応します。

@item  @emph{option progress} @{@emph{true}|@emph{false}@} 
コマンド実行中に転送(transport)ヘルパーによって表示される進行状況メッセージを有効(または無効)にします。

@item  @emph{option depth} <depth> 
浅いリポジトリ(shallow repository)の履歴を深めます。

@item  'option deepen-since <timestamp> 
時間に基づいて浅いリポジトリ(shallow repository)の履歴を深めます。

@item  'option deepen-not <ref> 
refを除く浅いリポジトリ(shallow repository)の履歴を深めます。複数回使用できます。

@item  @emph{option deepen-relative @{'true}|@emph{false}@} 
現在の境界に比べて浅いリポジトリの履歴を深めます。 「option depth」で使用する場合にのみ有効です。

@item  @emph{option followtags} @{@emph{true}|@emph{false}@} 
有効にすると、フェッチコマンド中にタグが指すオブジェクトが転送された場合、ヘルパーは注釈付きのタグオブジェクトを自動的にフェッチする必要があります。
タグがヘルパーによってフェッチされない場合、通常、2番目のフェッチコマンドが送信され、タグを具体的に要求します。一部のヘルパーは、このオプションを使用して2番目のネットワーク接続を回避できる場合があります。

@item  @emph{option dry-run} @{@emph{true}|@emph{false}@} 
trueの場合、操作が正常に完了したふりをしますが、実際にはリポジトリデータを変更しません。 ほとんどのヘルパーの場合、これはサポートされている場合、
@samp{push} にのみ適用されます。

@item  @emph{option servpath <c-style-quoted-path>} 
次の接続のサービスパス(@samp{--upload-pack} 、@samp{--receive-pack} など)を設定します。
リモートヘルパーはこのオプションをサポートする場合がありますが、接続要求が発生する前に、設定されているこのオプションに依存してはなりません。

@item  @emph{option check-connectivity} @{@emph{true}|@emph{false}@} 
ヘルパーにクローンの接続を確認(check)するように依頼(request)します。

@item  @emph{option force} @{@emph{true}|@emph{false}@} 
ヘルパーに強制更新を実行するように依頼(request)します。デフォルトは @samp{false} です。

@item  @emph{option cloning} @{@emph{true}|@emph{false}@} 
これがクローンリクエストであることをヘルパーに通知します(つまり、現在のリポジトリは空であることが保証されています)。

@item  @emph{option update-shallow} @{@emph{true}|@emph{false}@} 
新しいrefで必要な場合は、 .git/shallow を拡張できるようにします。

@item  @emph{option pushcert} @{@emph{true}|@emph{false}@} 
GPG署名プッシュ。

@item  'option push-option <string> 
<string>をプッシュオプションとして送信します。プッシュオプションにはLFまたはNUL文字を含めることはできないため、文字列はエンコードされません。

@item  @emph{option from-promisor} @{@emph{true}|@emph{false}@} 
これらのオブジェクトがpromisorからフェッチされていることを示します。

@item  @emph{option no-dependents} @{@emph{true}|@emph{false}@} 
依存関係ではなく、必要なオブジェクトのみをフェッチする必要があることを示します。

@item  @emph{option atomic} @{@emph{true}|@emph{false}@} 
プッシュするときは、リモートサーバーに単一のアトミックトランザクションで参照を更新するように要求します。
成功すると、すべての参照が更新されるか、何も更新されません。 リモート側がこの機能をサポートしていない場合、プッシュは失敗します。

@item  @emph{option object-format} @{@emph{true}|algorithm@} 
@samp{true}
の場合、呼び出し元がハッシュアルゴリズム情報をリモートから返すことを望んでいることを示します。このモードは、参照をフェッチするときに使用されます。

アルゴリズムに設定されている場合は、発信者がそのアルゴリズムを使用してリモート側と対話することを希望していることを示します。
@end table

@noindent

@chapheading SEE ALSO

git-remote(1)

git-remote-ext(1)

git-remote-fd(1)

git-fast-import(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitrepository-layout,,,Top
@chapheading Name

gitrepository-layout — Gitリポジトリの間取り

@noindent

@chapheading Synopsis

$GIT_DIR/*

@noindent

@chapheading DESCRIPTION

Gitリポジトリには2つの風味があります:

@itemize 

@item
作業ツリーのルートにある @samp{.git} ディレクトリ

@item
bare(裸の)リポジトリである(つまり、独自の作業ツリーがない)「<project>.git」ディレクトリ。通常、このディレクトリにプッシュしてフェッチすることにより、他のユーザーと履歴を交換するために使用されます。
@end itemize

@strong{注}: また、作業ツリーのルートにプレーンテキストファイル @samp{.git} を作成できます。
このファイルには、リポジトリがある実際のディレクトリを指す @samp{gitdir: <path>} が含まれています。
このメカニズムは、サブモジュールチェックアウトの作業ツリーによく使用され、
サブモジュールを含むスーパープロジェクトで、
サブモジュールを持たないブランチを「git checkout」できるようにします。
@samp{checkout} は、サブモジュールリポジトリを失うことなく、
サブモジュール作業ツリー全体を削除する必要があります。

以下のものがGitリポジトリに存在する可能性があります。

@table @asis

@item  objects 
このリポジトリに関連付けられているオブジェクトストア。通常、オブジェクトストアは自給自足です(つまり、そこにあるオブジェクトによって参照されるすべてのオブジェクトもそこにあります)が、それに違反する方法はいくつかあります。

@enumerate 

@item
浅いクローン(shallow clone)を作成することにより、不完全であるがローカルで使用可能なリポジトリを作成できます。
git-clone(1) を参照してください。

@item
@samp{objects/info/alternates} または @samp{$GIT_ALTERNATE_OBJECT_DIRECTORIES}
メカニズムを使用して、他のオブジェクトストアからオブジェクトを「借用」(borrow)することができます。この種の不完全なオブジェクトストアを持つリポジトリは、馬鹿プロトコル(dumb
transport)で使用するために公開するのには適していませんが、それ以外の場合は「objects/info/alternates」が借用するオブジェクトストアを指している限り問題ありません。

$GIT_COMMON_DIR
が設定されている場合、このディレクトリは無視され、代わりに「$GIT_COMMON_DIR/objects」が使用されます。
@end enumerate

@item  objects/[0-9a-f][0-9a-f] 
新しく作成されたオブジェクトは、独自のファイルに保存されます。オブジェクトは、sha1オブジェクト名の最初の2文字を使用して、256個のサブディレクトリに分散され、
@samp{objects} 自体のディレクトリエントリの数を管理可能な数に保ちます。ここにあるオブジェクトは、「アンパックオブジェクト」(unpacked
obuject)(または「ルーズオブジェクト」(loose object))と呼ばれることがよくあります。

@item  objects/pack 
パック(多くのオブジェクトを圧縮形式で格納するファイルと、ランダムにアクセスできるようにするためのインデックスファイル)は、このディレクトリにあります。

@item  objects/info 
オブジェクトストアに関する追加情報は、このディレクトリに記録されます。

@item  objects/info/packs 
このファイルは、馬鹿プロトコルがこのオブジェクトストアで使用可能なパックを検出するのに役立ちます。リポジトリが馬鹿プロトコル用に公開されている場合は、パックを追加または削除するたびに、
@samp{git update-server-info} を実行して、このファイルを最新の状態に保つ必要があります。 @emph{git repack}
はデフォルトでこれを行います。

@item  objects/info/alternates 
このファイルは、このオブジェクトストアがオブジェクトを借用(borrow)する代替オブジェクトストアへのパスを、1行に1つのパス名で記録します。ネイティブGitツールがローカルで使用するだけでなく、HTTP
fetcher
もリモートで使用しようとすることに注意してください。これは通常、代替ファイルに相対パス(リポジトリではなくオブジェクトデータベースに対して！)がある場合は機能しますが、ファイルシステムとWeb
URLの絶対パスが同じでない限り、絶対パスを使用する場合は機能しません。 @samp{objects/info/http-alternates}
も参照してください。

@item  objects/info/http-alternates 
このファイルは、このオブジェクトストアがオブジェクトを借用(borrow)する代替オブジェクトストアへのURLを記録し、リポジトリがHTTP経由でフェッチされるときに使用されます。

@item  refs 
参照(reference)は、このディレクトリのサブディレクトリに保存されます。 @emph{git prune}
コマンドは、このディレクトリとそのサブディレクトリに見つかったrefsから到達可能なオブジェクトを認識し保持します。$GIT_COMMON_DIRが設定されていて、代わりに「$GIT_COMMON_DIR/refs」が使用される場合、このディレクトリは無視されます(refs/bisectとrefs/rewrittenとrefs/worktreeを除く)。

@item  refs/heads/@samp{name} 
ブランチ @samp{name} のツリーの先端(tip-of-the-tree)のコミットオブジェクトを記録します

@item  refs/tags/@samp{name} 
オブジェクト名を記録します(必ずしもコミットオブジェクト、またはコミットオブジェクトを指すタグオブジェクトである必要はありません)。

@item  refs/remotes/@samp{name} 
リモートリポジトリからコピーされたブランチのツリーの先端(tip-of-the-tree)のコミットオブジェクトを記録します。

@item  refs/replace/@samp{<obj-sha1>} 
@samp{<obj-sha1>} を置き換えるオブジェクトのSHA-1を記録します。これはinfo/graftsに似ており、
git-replace(1) によって内部的に使用および保守されます。
このようなrefsはリポジトリ間で交換できますが、graftsは交換できません。

@item  packed-refs 
refs/heads/ や refs/tags/ と同じ情報を記録し、そして friends がより効率的な方法で記録します。
git-pack-refs(1) を参照してください。 $GIT_COMMON_DIR
が設定されている場合、このファイルは無視され、代わりに「$GIT_COMMON_DIR/packed-refs」が使用されます。

@item  HEAD 
現在アクティブなブランチを説明する @samp{refs/heads/}
名前空間へのシンボリックref(symref;glossaryを参照)。リポジトリが作業ツリーに関連付けられていない場合(つまり、ベアリポジトリの場合)はあまり意味がありませんが、有効なGitリポジトリにはHEADファイルが「必要」です。一部の磁器コマンドは、これを使用して、リポジトリの指定された「デフォルト」ブランチ(通常は「master」)を推測する場合があります。名前付きブランチ
@emph{name}
が(まだ)存在しない場合も合法です。一部のレガシー設定では、現在のブランチを指すシンボリックref(symref)ではなくシンボリックリンクです。

HEADは、現在のブランチを指すシンボリックref(symref)である代わりに、特定のコミットを直接記録することもできます。このような状態は「detached
HEAD」と呼ばれることがよくあります。詳細については git-checkout(1)を参照してください。

@item  config 
リポジトリ固有の構成ファイル。 $GIT_COMMON_DIR
が設定されている場合、このファイルは無視され、代わりに「$GIT_COMMON_DIR/config」が使用されます。

@item  config.worktree 
複数の作業ディレクトリ設定の、メイン作業ディレクトリための、作業ディレクトリ固有の構成ファイル(git-worktree(1)
を参照)。

@item  branches 
@emph{git fetch} や @emph{git pull} や @emph{git push}
へのURLを指定するために使用される短縮形を格納するための、少々非推奨の方法。ファイルは @samp{branches/<name>} として保存でき、
@emph{repository} 引数の代わりに @emph{name} をこれらのコマンドに指定できます。詳細については、 git-fetch(1) の
REMOTES セクションを参照してください。この機構はレガシーであり、最新のリポジトリには見られない可能性があります。 $GIT_COMMON_DIR
が設定されている場合、このディレクトリは無視され、代わりに「$GIT_COMMON_DIR/branches」が使用されます。

@item  hooks 
フックは、さまざまなGitコマンドで使用されるカスタマイズスクリプトです。 @emph{git init}
を実行すると、いくつかのサンプルフックがインストールされますが、デフォルトではすべて無効になっています。有効にするには、ファイル名から
@samp{.sample} サフィックスを削除して名前を変更する必要があります。各フックの詳細については、 githooks(5)
をお読みください。 $GIT_COMMON_DIR
が設定されている場合、このディレクトリは無視され、代わりに「$GIT_COMMON_DIR/hooks」が使用されます。

@item  common 
複数の作業ツリーが使用されている場合、 $GIT_DIR
内のほとんどのファイルは、いくつかの既知の例外を除いて、各作業ツリー毎とにありますです。ただし、「common」の下にあるすべてのファイルは、すべての作業ツリー間で共有されます。

@item  index 
リポジトリの現在のインデックスファイル。通常、ベアリポジトリには見つかりません。

@item  sharedindex.<SHA-1> 
$GIT_DIR/indexおよびその他の一時(temporary)インデックスファイルによって参照される共有インデックス部分。スプリットインデックスモード(split
index mode)でのみ有効です。

@item  info 
リポジトリに関する追加情報は、このディレクトリに記録されます。 $GIT_COMMON_DIR
が設定されている場合、このディレクトリは無視され、代わりに「$GIT_COMMON_DIR/info」が使用されます。

@item  info/refs 
このファイルは、馬鹿プロトコル(dumb
transports)がこのリポジトリで使用可能なrefsを検出するのに役立ちます。リポジトリが馬鹿プロトコル(dumb
transports)用に公開されている場合、このファイルは、タグまたはブランチが作成または変更されるたびに、「git
update-server-info」によって再生成される必要があります。これは通常、リポジトリに「git
push」したときに「git-receive-pack」コマンドによって実行される「hooks/update」フックから実行されます。

@item  info/grafts 
このファイルは、コミットが実際に作成された方法とは異なる親のセットを装うために、偽のコミットの祖先情報を記録します。1行に1つのレコードは、スペースで区切られ、改行で終了する40バイトの16進オブジェクト名をリストすることにより、コミットとその偽の親を記述します。

graftsメカニズムは古臭く、リポジトリ間でオブジェクトを転送する際に問題が発生する可能性があることに注意してください。
同じことを行うためのより柔軟で堅牢なシステムについては、 git-replace(1) を参照してください。

@item  info/exclude 
このファイルは、磁器コマンドの慣例により、除外パターンリストを格納します。 @samp{.gitignore} は、ディレクトリごとの無視ファイルです。「git
status」、「git add」、「git rm」、「git
clean」はこの除外パターンリストを調べますが、コアGitコマンドはこの除外パターンリストを調べません。 gitignore(5)
も参照してください。

@item  info/attributes 
ディレクトリごとの @samp{.gitattributes} ファイルと同様に、パスに割り当てる属性を定義します。
gitattributes(5) も参照してください。

@item  info/sparse-checkout 
このファイルには、スパースチェックアウトパターン(sparse checkout patterns)が格納されています。
git-read-tree(1) も参照してください。

@item  remotes 
@emph{git fetch} と @emph{git pull} と @emph{git push}
コマンドを介してリモートリポジトリと対話するときに使用するURLの省略形とデフォルトのref名を格納します。詳細については、
git-fetch(1)のREMOTESセクションを参照してください。このメカニズムはレガシーであり、最新のリポジトリには見られない可能性があります。
$GIT_COMMON_DIR
が設定されている場合、このディレクトリは無視され、代わりに「$GIT_COMMON_DIR/remotes」が使用されます。

@item  logs 
refに加えられた変更の記録は、このディレクトリに保存されます。詳細については、 git-update-ref(1)
を参照してください。
$GIT_COMMON_DIRが設定されていて、代わりに「$GIT_COMMON_DIR/logs」が使用される場合、このディレクトリは無視されます(但し、logs/HEADを除く)。

@item  logs/refs/heads/@samp{name} 
@samp{name} という名前のブランチ先端(branch tip)に加えられたすべての変更を記録します。

@item  logs/refs/tags/@samp{name} 
@samp{name} という名前のタグに加えられたすべての変更を記録します。

@item  shallow 
これは @samp{info/grafts} に似ていますが、内部的に使用され、浅いクローンメカニズム(shallow clone
mechanism)によって維持されます。 git-clone(1) と git-fetch(1) の
@samp{--depth} オプションを参照してください。
$GIT_COMMON_DIRが設定されている場合、このファイルは無視され、代わりに「$GIT_COMMON_DIR/shallow」が使用されます。

@item  commondir 
このファイルが存在する場合、明示的に設定されていなければ、 $GIT_COMMON_DIR (git(1)
を参照)はこのファイルで指定されたパスに設定されます。指定されたパスが相対パスの場合、それは$GIT_DIRからの相対パスです。commondirのあるリポジトリは、「commondir」が指すリポジトリがないと不完全です。

@item  modules 
サブモジュールのgitリポジトリが含まれています。

@item  worktrees 
リンクされた作業ツリー(linked working
trees)の管理データが含まれています。各サブディレクトリには、リンクされた作業ツリーの作業ツリー関連部分が含まれています。
$GIT_COMMON_DIRが設定されている場合、このディレクトリは無視され、代わりに「$GIT_COMMON_DIR/worktrees」が使用されます。

@item  worktrees/<id>/gitdir 
ここを指す .git
ファイルに戻る絶対パスを含むテキストファイル。これは、リンクされたリポジトリが手動で削除されているかどうかを確認するために使用され、このディレクトリをこれ以上保持する必要はありません。
このファイルのmtimeは、リンクされたリポジトリにアクセスするたびに更新する必要があります。

@item  worktrees/<id>/locked 
このファイルが存在する場合、リンクされた作業ツリーがポータブルデバイス上にあり、使用できない可能性があります。このファイルが存在すると、 @samp{git
worktree prune} によって @samp{worktrees/<id>}
が自動または手動で剪定(prune)されるのを防ぎます。ファイルには、リポジトリがロックされている理由を説明する文字列が含まれている場合があります。

@item  worktrees/<id>/config.worktree 
作業ディレクトリ固有の構成ファイル。
@end table

@noindent

@chapheading Git Repository Format Versions

すべてのgitリポジトリは、その @samp{config} ファイルの` core.repositoryformatversion`
数値のバージョンが印されています。この数値のバージョンは、ディスク上のリポジトリデータを操作するためのルールを指定します。
ディスク上のリポジトリから告知された特定のバージョンを理解しないgitの実装は、そのリポジトリで動作してはなりません。それを動作させと、間違った結果を生み出すだけでなく、実際にデータを失うリスクがあります。

このルールのため、バージョンアップは最小限に抑える必要があります。代わりに、我々は一般的に以下の戦略を好みます:

@itemize 

@item
個々のデータファイル(インデックス、パックファイルなど)のフォーマットバージョン番号をバージョンアップします。これにより、非互換性がそれらのファイルのみに制限されます。

@item
古いクライアントで使用すると正常に機能制限される(gracefully
degrade)新しいデータを導入します(たとえば、パックビットマップファイルは古いクライアントでは無視され、提供される最適化を利用しません)。
@end itemize

リポジトリ全体の形式のバージョンアップは、個別にバージョン管理できない部分だけにするべきです。たとえば、オブジェクトの到達可能性ルール、またはrefをロックするためのルールを変更する場合、リポジトリ形式バージョンのバージョンアップが必要になります。

注意: これは、リポジトリのディスクコンテンツに直接アクセスする場合にのみ適用されることに注意してください。 フォーマット @samp{0}
のみを理解する古いクライアントは、サーバープロセスがフォーマット @samp{1} を理解している限り、フォーマット @samp{1} を使用して @samp{git://}
を介してリポジトリに接続できます。

バージョンアップをお披露目するための推奨される戦略(リポジトリ全体または単一ファイル)は、gitに新しい形式を読み取るように教え、(実験用または古いgitとの下位互換性については気にしないでいいように)構成スイッチまたはコマンドラインオプションを使用して新しい形式を記述できるようにすることです。その後、読み取り機能が一般的になるまでの長い期間の後、デフォルトを新しい形式の書き込みに切り替える場合があります。

現在定義されているフォーマットバージョンは以下のとおりです:

@noindent

@heading Version 0

これは、gitの初期バージョンで定義されている形式であり、リポジトリディレクトリ、リポジトリ構成ファイル、オブジェクトおよびrefストレージの形式が含まれま
すが、これらに限定されません。gitの完全な動作を記述することは、このドキュメントの役割ではありません。

@noindent

@heading Version 1

この形式は、以下の例外を除いて、バージョン `0`と同じです:

@enumerate 

@item
@samp{core.repositoryformatversion} 変数を読み取る場合、バージョン1をサポートするgit実装は、構成ファイルの
@samp{extensions} セクションにある構成キーも読み取る必要があります。

@item
バージョン1リポジトリが、実行中のgitが実装していない @samp{extensions.*}
キーを指定している場合、操作の続行は禁止です。同様に、既知のキーの値が実装によって理解されない場合、操作の続行は禁止です。
@end enumerate

注意: 設定ファイルに拡張機能(extension)の指定が無い場合は、 @samp{core.repositoryformatversion} を @samp{0}
に設定する必要があります(`1`に設定してもメリットはなく、リポジトリはgitの古い実装と互換性がなくなります)。

このドキュメントは、拡張機能のマスターリストとして機能します。新しい拡張機能を定義したい実装は、名前を主張するために、ここにそれを書き留めておく必要があります。

定義されている拡張機能は以下のとおりです:

@noindent

@subheading noop

この拡張機能は、gitの動作をまったく変更しません。 これは、フォーマット1の互換性をテストする場合にのみ役立ちます。

@noindent

@subheading preciousObjects

設定キー @samp{extensions.preciousObjects} が @samp{true}
に設定されている場合、リポジトリ内のオブジェクトを削除してはなりません(たとえば、 @samp{git-prune} または @samp{git repack -d}
など)。

@noindent

@subheading partialclone

設定キー @samp{extensions.partialclone}
が設定されている場合、リポジトリが部分クローンで作成された(または後で部分フェッチを実行した)こと、およびリモートが特定の不要なオブジェクトの送信を省略した可能性があることを示します。
このようなリモートはpromisor remoteと呼ばれ、将来、このような省略されたオブジェクトをすべてフェッチできることを約束します。

このキーの値は、promisor remoteの名前です。

@noindent

@subheading worktreeConfig

設定されている場合、デフォルトでは、「git
config」はGIT_DIRの「config」ファイルと「config.worktree」ファイルの両方からこの順序で読み取ります。複数の作業ディレクトリモードでは、「config.worktree」が作業ディレクトリごとにある間（つまり、
GIT_COMMON_DIR/worktrees/<id>/config.worktree にあります)、「config」ファイルは共有されます。

@noindent

@chapheading SEE ALSO

git-init(1), git-clone(1), git-fetch(1),
git-pack-refs(1), git-gc(1), git-checkout(1),
gitglossary(7), @uref{user-manual.html,The Git User’s Manual}

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitrevisions,,,Top
@chapheading Name

gitrevisions — Gitのリビジョンと範囲を指定する

@noindent

@chapheading Synopsis

gitrevisions

@noindent

@chapheading DESCRIPTION

多くのGitコマンドは、リビジョンパラメーターを引数として取ります。コマンドに応じて、特定のコミットを示します。リビジョングラフをたどるコマンド(git-log(1)
など)の場合は、そのコミットから到達可能なすべてのコミットを示します。リビジョングラフをたどるコマンドの場合、リビジョンの範囲を明示的に指定することもできます。

さらに、一部のGitコマンド(git-show(1) や git-push(1)
など)は、コミット以外のオブジェクトを示すリビジョンパラメーターを受け取ることもできます。例えば、ブロブ(ファイル)またはツリー(ファイルのディレクトリ)です。

@noindent

@chapheading SPECIFYING REVISIONS

リビジョンパラメータ @samp{<rev>}
は必ずしもそうとは限りませんが、通常はコミットオブジェクトに名前を付けます。これは、いわゆる「拡張SHA-1」構文を使用します。
オブジェクト名を綴るにはさまざまな方法があります。このリストの終わり近くにリストされているものは、コミットに含まれているツリーとブロブに名前を付けています。

@quotation

@strong{Note}

この文書は、gitで見られる「生の」構文を示しています。シェルおよびその他のUIでは、特殊文字を保護し、単語の分割を回避するために、追加の引用符が必要になる場合があります。
@end quotation

@table @asis

@item  @samp{<sha1>} 例: @samp{dae86e1950b1277e545cee180551750029cfe735}, @samp{dae86e} 
完全なSHA-1オブジェクト名(40バイトの16進文字列)、またはリポジトリ内で一意の先頭のsubstring。例えば
dae86e1950b1277e545cee180551750029cfe735 と dae86e はどちらも、リポジトリ内にオブジェクト名が
dae86e で始まる他のオブジェクトがない場合、全く同じコミットオブジェクトに名前を付けます。

@item  @samp{<describeOutput>} 例: @samp{v1.7.4.2-679-g3bee7fb} 
@samp{git describe}
からの出力。つまり、現在のコミットから最も近いタグ。オプションで、ダッシュ(-)とそのタグ以降現在のコミットが何番目になるかの数が続き、その後にダッシュ(-)、「g」、および省略されたオブジェクト名が続きます。

@item  @samp{<refname>} 例: @samp{master}, @samp{heads/master}, @samp{refs/heads/master} 
シンボリックref名。例えば @samp{master} は通常、 @samp{refs/heads/master} によって参照されるコミットオブジェクトを意味します。
@samp{heads/master} と @samp{tags/master} の両方がある場合は、あなたは @samp{heads/master}
と明示的に指定して、どちらを意味するかをGitに伝えることができます。 あいまいな場合、 @samp{<refname>}
は、以下のルールに従い最初の一致を採用ことで明確になります:

@enumerate 

@item
もし @samp{$GIT_DIR/<refname>} が存在するならば、それはあなたが指定した通りのものです(これは通常、@samp{HEAD} と
@samp{FETCH_HEAD} と @samp{ORIG_HEAD} と @samp{MERGE_HEAD} と @samp{CHERRY_PICK_HEAD} のみで役に立ちます)

@item
でなければ @samp{refs/<refname>} が存在すればそれを採用します。

@item
でなければ @samp{refs/tags/<refname>} が存在すればそれを採用します。

@item
でなければ @samp{refs/heads/<refname>} が存在すればそれを採用します。

@item
でなければ @samp{refs/remotes/<refname>} が存在すればそれを採用します。

@item
でなければ @samp{refs/remotes/<refname>/HEAD} が存在すればそれを採用します。

@samp{HEAD} は、作業ツリーの変更に基づいたコミットに名前を付けます。 @samp{FETCH_HEAD} は、最後の @samp{git fetch}
呼び出しでリモートリポジトリからフェッチしたブランチを記録します。 @samp{ORIG_HEAD} は、 @samp{HEAD}
を大幅に移動するコマンドによって作成され、操作前の @samp{HEAD}
の位置を記録します。これにより、ブランチの先端を実行前の状態に簡単に戻すことができます。 @samp{MERGE_HEAD} は、 @samp{git
merge`を実行するときにブランチにマージするコミットを記録します。 `CHERRY_PICK_HEAD} は、 @samp{git cherry-pick}
を実行したときにチェリーピックしているコミットを記録します。

注意: 上記の @samp{refs/*} の場合、 @samp{$GIT_DIR/refs} ディレクトリまたは @samp{$GIT_DIR/packed-refs}
ファイルのいずれかから発生する可能性があることに注意してください。ref名のエンコードは指定されていませんが、一部の出力処理ではUTF-8でref名を想定する場合があるため、UTF-8が推奨されます。
@end enumerate

@item  @samp{@@} 
@samp{@@} 単独では @samp{HEAD} のショートカットを意味します。

@item  @samp{[<refname>]@@@{<date>@}} 例: @samp{master@@\@{yesterday\@}}, @samp{HEAD@@@{5 minutes ago@}} 
refの後に接尾辞 @samp{@@} が続き、日付指定が中括弧のペアで囲まれています(例: @samp{\@{yesterday\@}} 、 @samp{@{1 month 2 weeks
3 days 1 hour 1 second ago@}} 、@samp{@{1979-02-26 18:30:00@}}
)。これは以前の時点でのrefの値を指定します。この接尾辞は、ref名の直後にのみ使用でき、refには既存のログ(
@samp{$GIT_DIR/logs/<ref>} )が必要です。これは、特定の時点での @strong{ローカル}
refの状態を検索することに注意してください。たとえば、先週ローカルの @samp{master}
ブランチに何があったか、です。特定の時間に行われたコミットを確認する場合は、 @samp{--since} と @samp{--until} を参照してください。

@item  @samp{<refname>@@@{<n>@}} 例: @samp{master@@\@{1\@}} 
refの後に接尾辞 @samp{@@} が続き、数の指定が中括弧のペアで囲まれている場合(たとえば @samp{\@{1\@}},
@samp{\@{15\@}})、そのrefのn個前の値を指定します。たとえば @samp{master@@\@{1\@}} は @samp{master} の直前の値であり、
@samp{master@@\@{5\@}} は @samp{master} の5個前の値です。この接頭辞は、ref名の直後にのみ使用でき、refには既存のログ(
@samp{$GIT_DIR/logs/<refname>} )が必要です。

@item  @samp{@@@{<n>@}} 例: @samp{@@\@{1\@}} 
空のref部分で @samp{@@} コンストラクトを使用して、現在のブランチのreflogエントリを取得できます。たとえば、あなたがブランチ @samp{blabla}
を使用している場合、 @samp{@@\@{1\@}} は @samp{blabla@@\@{1\@}} と同じ意味になります。

@item  @samp{@@@{-<n>@}} 例: @samp{@@@{-1@}} 
構成 @samp{@@@{-<n>@}} は、現在のブランチ/コミットの前にチェックアウトされた<n>番目のブランチ/コミットを意味します。

@item  @emph{[<branchname>]@@@{upstream@}} 例: @emph{master@@@{upstream@}}, @emph{@@@{u@}} 
ブランチ名の接尾辞 @emph{@@@{upstream@}} (短縮形
@emph{<branchname>@@@{u@}})は、branchnameで指定されたブランチの上部に構築するように設定されているブランチを指します(@samp{branch.<name>.remote}
と @samp{branch.<name>.merge}
によって設定されます)。ブランチ名が欠落してい場合は、デフォルトで現在のブランチ名になります。これらの接尾辞は、大文字で綴る場合にも受け入れられ、大文字と小文字を問わず同じ意味になります。

@item  @emph{[<branchname>]@@@{push@}} 例: @emph{master@@@{push@}}, @emph{@@@{push@}} 
接尾辞 @emph{@@@{push@}} は、 @samp{branchname} がチェックアウトされているときに @samp{git push}
が実行された場合(またはブランチ名が指定されていない場合は現在の @samp{HEAD}
)、「プッシュ先」のブランチを報告します。もちろん、プッシュ先はリモートリポジトリにあるため、そのブランチに対応するローカルトラッキングブランチ(つまり、
@samp{refs/remotes/} 内の何か)を報告します。

ここで、よりはっきり分かる例を以下に示します:

@example
$ git config push.default current
$ git config remote.pushdefault myfork
$ git switch -c mybranch origin/master

$ git rev-parse --symbolic-full-name @@@{upstream@}
refs/remotes/origin/master

$ git rev-parse --symbolic-full-name @@@{push@}
refs/remotes/myfork/mybranch
@end example


注意: この例では、ある場所からプルして別の場所にプッシュする三角形のワークフローを設定していることに注意してください。非三角形のワークフローでは、
@emph{@@@{push@}} は @emph{@@@{upstream@}} と同じであり、このようなことをする必要はありません。

この接尾辞は大文字で綴る場合にも受け入れられ、大文字と小文字を問わず同じことを意味します。

@item  @emph{<rev>^[<n>]} 例: @emph{HEAD^, v1.5.1^0} 
リビジョンパラメータの接尾辞 @emph{^} は、そのコミットオブジェクトの最初の親を意味します。 @emph{^<n>} は <n>
番目の親を意味します(つまり、 @emph{<rev>^} は @emph{<rev>^1} と同じです)。特別ルールとして、
@emph{<rev>^0} はコミット自体を意味し、 @emph{<rev>}
がコミットオブジェクトを参照するタグオブジェクトのオブジェクト名である場合に使用されます。

@item  @emph{<rev>~[<n>]} 例: @emph{HEAD~, master~3} 
リビジョンパラメータの接尾辞 @emph{~} は、そのコミットオブジェクトの最初の親を意味します。リビジョンパラメータの接尾辞
@emph{~<n>} は、最初の親のみに続く、指定されたコミットオブジェクトの <n> 世代の祖先であるコミットオブジェクトを意味します。つまり、
@emph{<rev>~3} は @emph{<rev>^^^} と同じで、するってぇと
@emph{<rev>^1^1^1} と同じということです。この形式については以下の図を参照してください。

@item  @emph{<rev>^@{<type>@}} 例: @emph{v0.99.8^@{commit@}} 
接尾辞 @emph{^} の後に中括弧のペアで囲まれたオブジェクトタイプ名が続くということは、タイプ @emph{<type>}
のオブジェクトが見つかるか、オブジェクトを逆参照できなくなるまで、 @emph{<rev>}
でオブジェクトを再帰的に逆参照する(この場合は、いろいろ一旦飲み込んでしまったのを吐きもどすような感じだぬ)ことを意味します。 たとえば、
@emph{<rev>} がコミットっぽい場合、 @emph{<rev>^@{commit@}} は対応するコミットオブジェクトを記述します。同様に、
@emph{<rev>} がツリーっぽい場合、 @emph{<rev>^@{tree@}} は対応するツリーオブジェクトを記述します。
@emph{<rev>^0} は @emph{<rev>^@{commit@}} の省略形です。

@emph{<rev>^@{object@}} を使用すると、 @emph{<rev>} がタグである必要がなく、 @emph{<rev>} を逆参照することなく、
@emph{<rev>}
が存在するオブジェクトに名前を付けることができます。なお、タグはすでにオブジェクトであるため、オブジェクトに到達するために一度も逆参照する必要はありません。

@emph{<rev>^@{tag@}} を使用して、 @emph{<rev>} が既存のタグオブジェクトを確実に識別することができます。

@item  @emph{<rev>^@{@}} 例: @emph{v0.99.8^@{@}} 
接尾辞 @emph{^}
の後に空のブレースペアが続くということは、オブジェクトがタグである可能性があることを意味し、タグ以外のオブジェクトが見つかるまでタグを再帰的に逆参照します。

@item  @emph{<rev>^@{/<text>@}} 例: @emph{HEAD^@{/fix nasty bug@}} 
リビジョンパラメータの接尾辞 @emph{^} と、それに続くスラッシュで始まるテキストを含む中括弧のペアは、以下の @emph{:/fix nasty
bug} 構文と同じですが、 @emph{^} の前の @emph{<rev>} から到達可能な一致する最も若いコミットを返す点が異なります。

@item  @emph{:/<text>} 例: @emph{:/fix nasty bug} 
コロンに続いてスラッシュそしてそれに続くテキストは、コミットメッセージが指定された正規表現と一致するコミットを示します。この名前は、HEADを含む任意のrefから到達可能な最も若い一致するコミットを返します。正規表現は、コミットメッセージの任意の部分に一致できます。文字列で始まるメッセージを照合するには、たとえば、
@emph{:/^foo} とします。特別なシーケンス @emph{:/!} はマッチングの修飾子用に予約されています。ます。 @emph{:/!-foo} は一致の否定を実行し、
@emph{:/!!foo} はリテラル @emph{!} 後に @emph{foo} が続く文字列とマッチします。 @emph{:/!}
で始まるその他のシーケンスは今のところ予約されています。指定されたテキストによっては、シェルにより追加の引用符が必要になる場合があります。

@item  @emph{<rev>:<path>} 例: @emph{HEAD:README}, @emph{master:./README} 
接尾辞 @emph{:}
の後にパス(path)を続けると、コロンの前の部分によって名前が付けられたツリー風のオブジェクト内の、指定されたパスにあるブロブまたはツリーに名前が付けられます。
@emph{./} または @emph{../}
で始まるパスは、現在の作業ディレクトリからの相対パスです。指定のパスは、作業ツリーのルートディレクトリからの相対パスに変換されます。これは、作業ツリーと同じツリー構造を持つコミットまたはツリーからブロブまたはツリーをアドレス指定するのに最も役立ちます。

@item  @emph{:[<n>:]<path>} 例: @emph{:0:README}, @emph{:README} 
コロンに、オプションでステージ番号(0〜3)とコロンが続き、それにパスが続くと、指定されたパスのインデックス内のブロブオブジェクトに名前を付けます。ステージ番号省略(およびそれに続くコロン)は、ステージ0エントリーを示します。マージ作業中、ステージ1は共通の祖先、ステージ2はターゲットブランチのバージョン(通常は現在のブランチ)、ステージ3はマージされるブランチのバージョンです。
@end table

以下はJon Loeligerによる図解です。コミットノードBとCはどちらもコミットノードAの親です。親コミットは左から右に順序付けられます。

@example
G   H   I   J
 \ /     \ /
  D   E   F
   \  |  / \
    \ | /   |
     \|/    |
      B     C
       \   /
        \ /
         A
@end example

@example
A =      = A^0
B = A^   = A^1     = A~1
C =      = A^2
D = A^^  = A^1^1   = A~2
E = B^2  = A^^2
F = B^3  = A^^3
G = A^^^ = A^1^1^1 = A~3
H = D^2  = B^^2    = A^^^2  = A~2^2
I = F^   = B^3^    = A^^3^
J = F^2  = B^3^2   = A^^3^2
@end example

@noindent

@chapheading SPECIFYING RANGES

@samp{git log} などの履歴トラバースコマンドは、単一のコミットだけでなく、一連のコミットで動作します。

これらのコマンドの場合、前のセクションで説明した表記法を使用して単一のリビジョンを指定することは、指定のコミットから「到達可能」なコミットの組を意味します。

複数のリビジョンを指定するということは、指定のコミットのいずれかから到達可能なコミットの組を意味します。

コミットの到達可能な組は、コミット自体とその祖先チェーン内のコミットです。

以下に示すように、接続されたコミット(connected commits)の組(「リビジョン範囲」(revision
range)と呼ばれる)を指定するためのいくつかの表記法があります。

@noindent

@heading Commit Exclusions

@table @asis

@item  @emph{^<rev>} (カレット)記法 
とある到達可能なコミットをコミット達から除外するには、接頭辞 @emph{^} 表記を使用します。 例えば @emph{^r1 r2} は @emph{r2}
から到達可能なコミットだけども、 @emph{r1} から到達可能なコミット(つまり @emph{r1} とその祖先)は除外する事を意味します。
@end table

@noindent

@heading Dotted Range Notations

@table @asis

@item  @emph{..} (2ドット)範囲記法 
@emph{^r1 r2} 操作は頻繁に表示されるため、省略形があります。(上記の SPECIFYING REVISIONS
で説明されている構文に従って名前が付けられている)2つのコミット @emph{r1} と @emph{r2} がある場合、あなたは @emph{^r1 r2}
によってr1から到達可能なコミットを取り除き、r2から到達可能なコミットを要求できます。そしてこれは @emph{r1..r2} と書くことができます。

@item  @emph{...} (3ドット)対称差記法 
似た表記 @emph{r1...r2} は @emph{r1} と @emph{r2} の対称差と呼ばれ、 @emph{r1 r2 --not $(git merge-base --all
r1 r2)} として定義されます。 これは、 @emph{r1} (左側)または @emph{r2}
(右側)のいずれかから到達可能であるが、両方からは到達できないコミットの組です。
@end table

これらの2つの省略表記では、一方の端を省略して、デフォルトでHEADにすることができます。たとえば、 @emph{origin..} は
@emph{origin..HEAD} の省略形であり、「originブランチから分岐(fork)してから何をしましたか？」と尋ねます。 同様に、
@emph{..origin} は @emph{HEAD..origin} の省略形であり、「私がそれらから分岐してから、originは何をしましたか？」と尋ねます。
@emph{..} は @emph{HEAD..HEAD} を意味することに注意してください。これは、HEADから到達可能および到達不能の両方の空の範囲です。

2つの異なる範囲を取るように特別に設計されたコマンド(たとえば、2つの範囲を比較するための "git range-diff R1 R2" )
は存在しますが、それらは例外です。特に明記されていない限り、一連のコミットを操作するすべての "git"
コマンドは、単一のリビジョン範囲で機能します。言い換えると、2つの「2ドット範囲表記」を隣り合わせに記述します。

@example
$ git log A..B C..D
@end example

ほとんどのコマンドでは2つのリビジョン範囲を指定しません。代わりに、接続された単一のコミットの組、つまりBまたはDのいずれかから到達可能であるが、AまたはCのどちらからも到達可能でないコミットの組に名前を付けます。線形履歴では、以下のようになります:

@example
---A---B---o---o---C---D
@end example

AとBはCから到達可能であるため、これら2つの2ドット範囲記法で指定されたリビジョン範囲は単一のコミットDです。

@noindent

@heading Other <rev>^ Parent Shorthand Notations

コミットとその親コミットによって形成される組に名前を付けるために、マージコミットに特に役立つ他の3つの省略形が存在します。

@samp{r1@{caret@}@@} 表記は、 @samp{r1} のすべての親を意味します。

@samp{r1@{caret@}!} 表記には コミット @samp{r1} が含まれますが、そのすべての親は除外されます。この表記自体は、単一のコミット @samp{r1}
を示します。

@samp{<rev>@{caret@}-[<n>]} 表記には @samp{<rev>} が含まれますが、 <n> 番目の親(つまり、
@samp{<rev>@{caret@}<n>..<rev>} の省略形)は除外されます。 <n> が指定されていない場合は @samp{<n>} = 1
とみなします。これは通常、 @samp{<commit>@{caret@}-} を渡すだけで、マージコミット @samp{<commit>}(@samp{<commit>}
自体を含む)でマージされたブランチ内のすべてのコミットを取得できるマージコミットに役立ちます。

@samp{<rev>@{caret@}<n>} は単一のコミット親を指定することに関するものでしたが、これらの3つの表記はその親も考慮します。たとえば、
@samp{HEAD@{caret@}2@{caret@}@@} と言うことはできますが、 @samp{HEAD@{caret@}@@@{caret@}2} と言うことはできません。

@noindent

@chapheading Revision Range Summary

@table @asis

@item  @samp{<rev>} 
<rev> から到達可能なコミット(つまり <rev> とその祖先)を含めます。

@item  @samp{@{caret@}<rev>} 
<rev> から到達可能なコミット(つまり <rev> とその祖先)を除外します。

@item  @samp{<rev1>..<rev2>} 
<rev2> から到達可能なコミットを含めますが、 <rev1> から到達可能なコミットは除外します。 <rev1> または <rev2>
のいずれかを省略すると、それらはそれぞれデフォルトで @samp{HEAD} になります。

@item  @samp{<rev1>\...<rev2>} 
<rev1> または <rev2> のいずれかから到達可能なコミットを含めますが、両方から到達可能なコミットは除外します。 <rev1> または
<rev2> のいずれかを省略すると、それらはそれぞれデフォルトで @samp{HEAD} になります。

@item  @samp{<rev>@{caret@}@@} 例: @samp{HEAD@{caret@}@@} 
接尾辞 @samp{@{caret@}} の後にアットマーク(@samp{@@})を付けることは、 @samp{<rev>}
のすべての親をリストすることと同じです(つまり、親から到達可能なものはすべて含まれますが、コミット自体は含まれません)。

@item  @samp{<rev>@{caret@}!} 例: @samp{HEAD@{caret@}!} 
接尾辞 @samp{@{caret@}} の後に感嘆符(@samp{!})を付けることは、コミット @samp{<rev>} を指定し、そのすべての親の前に @samp{@{caret@}}
を付けてそれら(およびその祖先)を除外することと同じです。

@item  @samp{<rev>@{caret@}-<n>} 例: @samp{HEAD@{caret@}-, HEAD@{caret@}-2} 
@samp{<rev>@{caret@}<n>..<rev>} と同等であり、 @samp{<n>} が指定されていない場合は @samp{<n>} = 1 です。
@end table

上記のLoeliger図解を使用したいくつかの例を以下に示します。表記の拡張と選択は、それぞれ段階が分かるようステップを踏んで説明してあります:

@example
   Args   Expanded arguments    Selected commits
   D                            G H D
   D F                          G H I J D F
   ^G D                         H D
   ^D B                         E I J F B
   ^D B C                       E I J F B C
   C                            I J F C
   B..C   = ^B C                C
   B...C  = B ^F C              G H D E B C
   B^-    = B^..B
          = ^B^1 B              E I J F B
   C^@@    = C^1
          = F                   I J F
   B^@@    = B^1 B^2 B^3
          = D E F               D G H E F I J
   C^!    = C ^C^@@
          = C ^C^1
          = C ^F                C
   B^!    = B ^B^@@
          = B ^B^1 ^B^2 ^B^3
          = B ^D ^E ^F          B
   F^! D  = F ^I ^J D           G H D F
@end example

@noindent

@chapheading SEE ALSO

git-rev-parse(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitsubmodules,,,Top
@chapheading Name

gitsubmodules — あるリポジトリを別のリポジトリ内にマウントする

@noindent

@chapheading Synopsis

@example
.gitmodules, $GIT_DIR/config
@end example

@example
git submodule
git <command> --recurse-submodules
@end example


@noindent

@chapheading DESCRIPTION

サブモジュール(submodule)は、別のリポジトリ内に埋め込まれたリポジトリです。サブモジュールにはサブモジュール独自の履歴があります。
それが埋め込まれているリポジトリはスーパープロジェクト(superproject)と呼ばれます。

ファイルシステムでは、サブモジュールは通常(常にではありませんが。以下のFORMSを参照)、(i)スーパープロジェクトの
@samp{$GIT_DIR/modules/}
ディレクトリの下にあるGitディレクトリや、(ii)スーパープロジェクトの作業ディレクトリ内の作業ディレクトリや、(i)の指すサブモジュールの作業ディレクトリのルートにある
@samp{.git} ファイルで構成されます。

サブモジュールのGitディレクトリが @samp{$GIT_DIR/modules/foo/} にあり、作業ディレクトリが @samp{path/to/bar/}
にあるとすると、スーパープロジェクトは、ツリーの @samp{path/to/bar} にある @samp{gitlink}
エントリと、@samp{submodule.foo.path = path/to/bar} 形式の @samp{.gitmodules} ファイル(linkgit:
gitmodules[5] を参照)のエントリを介してサブモジュールを追跡します。

@samp{gitlink} エントリには、スーパープロジェクトがサブモジュールの作業ディレクトリにあると予想するコミットのオブジェクト名が含まれています。

@samp{.gitmodules} ファイルのセクション @samp{submodule.foo.*} は、Gitの磁器レイヤーに追加のヒントを提供します。 たとえば、
@samp{submodule.foo.url} 設定は、サブモジュールを取得する場所を指定します。

サブモジュールは、少なくとも2つの異なるユースケースに使用できます:

@enumerate 

@item
独立した履歴を維持しながら別のプロジェクトを使用。サブモジュールを使用すると、両方のプロジェクトの履歴を分離したまま、あなた独自の作業ツリー内に別のプロジェクトの作業ツリーを含めることができます。また、サブモジュールは任意のバージョンに固定できるため、別のプロジェクトは、スーパープロジェクトに影響を与えることなく独立して開発でき、スーパープロジェクトプロジェクトが必要とした場合にのみ別プロジェクトを新しいバージョンに固定できます。

@item
(論理的に単一の)プロジェクトを複数のリポジトリに分割し、それらを結び付けます。これを使用して、Gitの実装の現在の制限を克服し、よりきめ細かいアクセスを実現できます:

@table @asis

@item  Gitリポジトリのサイズ 
現在の形式では、
Gitは、ツリー間のデルタ計算によって圧縮されていないコンテンツを含む大規模なリポジトリではスケールアップが十分にできません。
たとえば、あなたはサブモジュールを使用して大きなバイナリアセットを保持し、
これらのリポジトリを浅く複製して、
ローカルに大きな履歴がないようにすることができます。

@item  転送サイズ 
現在の形式では、Gitは作業ツリー全体が存在する必要があります。
部分的なツリーをフェッチまたはクローンで転送することはできません。
あなたが作業しているプロジェクトが、
スーパープロジェクトのサブモジュールとして結合された複数のリポジトリで構成されている場合は、
関心のないリポジトリの作業ツリーをフェッチすることを回避できます。

@item  アクセス制御 
サブモジュールへのユーザーアクセスを制限することにより、
さまざまなユーザーの読み取り/書き込みポリシーを実装できます。
@end table
@end enumerate

@noindent

@chapheading The configuration of submodules

サブモジュール操作は、以下のメカニズムを使用して構成(configure)できます(優先順位の高い順です):

@itemize 

@item
パススペックの一部としてサブモジュールを使用することをサポートするコマンドのコマンドライン。
ほとんどのコマンドには、サブモジュールに再帰するかどうかを指定するブールフラグ @samp{--recurse-submodules} があります。 例としては、
@samp{grep} や @samp{checkout} があります。 @samp{fetch} や @samp{push}
などの一部のコマンドは、サブモジュールがどのように影響を受けるかを指定できる列挙型を取ります。

@item
サブモジュール内の構成。 これには、サブモジュール内の @samp{$GIT_DIR/config} だけでなく、サブモジュール内のコマンドの動作を指定する
@samp{.gitattributes} または @samp{.gitignore} ファイルなどのツリー内の設定も含まれます。

たとえば、スーパープロジェクトで @samp{git status --ignore-submodules=none} を実行すると、サブモジュールの
@samp{.gitignore} ファイルの効果が確認できます。これは、サブモジュールの @samp{.gitignore} ファイルに注意を払いながらサブモジュールで
@samp{status} を実行することにより、サブモジュールの作業ディレクトリから情報を収集します。

サブモジュールの @samp{$GIT_DIR/config} ファイルは、スーパープロジェクトで @samp{git push
--recurse-submodules=check}
を実行すると機能します。これは、サブモジュールにリモートに公開されていない変更があるかどうかをチェックするためです。リモートは、通常どおりサブモジュールの
@samp{$GIT_DIR/config} ファイルで構成されます。

@item
スーパープロジェクトの構成ファイル @samp{$GIT_DIR/config} 。Gitはアクティブなサブモジュールのみ再帰します(以下の「ACTIVE
SUBMODULES」セクションを参照)。

サブモジュールがまだ初期化されていない場合、サブモジュール内の構成(configuration)はまだ存在しないため、たとえば、サブモジュールを取得する場所はここで構成されます。

@item
スーパープロジェクト内の @samp{.gitmodules}
ファイル。プロジェクトは通常、このファイルを使用して、サブモジュールの名前とパスの間に必要なマッピングについて、上流のリポジトリコレクションのデフォルトを提案します。

このファイルは主に、スーパープロジェクト内のサブモジュールの名前とパスの間のマッピングとして機能し、サブモジュールのGitディレクトリを見つけることができます。

サブモジュールが初期化されていない場合、これはサブモジュール構成が見つかる唯一の場所です。
これは、サブモジュールを取得する場所を指定するための最後のフォールバックとして機能します。
@end itemize

@noindent

@chapheading FORMS

サブモジュールは以下の形式をとることができます:

DESCRIPTIONで説明されている、Gitディレクトリと、作業ディレクトリと、 @samp{gitlink} と、
`.gitmodules`エントリ、を含む基本形式。

「古い形式」のサブモジュール: @samp{.git} ディレクトリが埋め込まれた作業ディレクトリと、スーパープロジェクトの @samp{gitlink} および
@samp{.gitmodules} エントリの追跡。 これは通常、古いバージョンのGitを使用して生成されたリポジトリにあります。

+
これらの古い形式のリポジトリを手動で構築することは可能です。

+
非初期化(deinitialized)または削除されると(以下を参照)、サブモジュールのGitディレクトリはスーパープロジェクトの
@samp{$GIT_DIR/modules/<name>/} に自動的に移動されます。

非初期化された(deinitialized)サブモジュール: @samp{gitlink} と @samp{.gitmodules}
エントリがありますが、サブモジュールの作業ディレクトリはありません。サブモジュールのGitディレクトリは、Gitディレクトリを初期化解除した後も保持されているため、そこにある可能性があります。
代わりに、作業ディレクトリであるはずのディレクトリが空になります。

+
サブモジュールは、 @samp{git submodule deinit}
を実行することで非初期化(deinitialized)できます。このコマンドは、作業ディレクトリを空にするだけでなく、スーパープロジェクトの
@samp{$GIT_DIR/config} ファイルのみを変更するため、スーパープロジェクトの履歴は影響を受けません。 これは、 @samp{git submodule
init} を使用して元に戻すことができます。

削除されたサブモジュール: サブモジュールは、 @samp{git rm <submodule path> && git commit}
を実行することで削除できます。これは、 @samp{git revert} を使用して元に戻すことができます。

+
削除すると、スーパープロジェクトの追跡データが削除されます。これは、 @samp{gitlink} エントリと @samp{.gitmodules}
ファイルのセクションの両方です。サブモジュールの作業ディレクトリはファイルシステムから削除されますが、Gitディレクトリは、別のリポジトリからフェッチすることなく過去のコミットをチェックアウトできるようにするために保持されます。

+
サブモジュールを完全に削除するには、手動で @samp{$GIT_DIR/modules/<name>/} を削除します。

@noindent

@chapheading ACTIVE SUBMODULES

サブモジュールがアクティブと見なされるには、

@enumerate 

@item
if @samp{submodule.<name>.active} が @samp{true} に設定されている

or

@item
if サブモジュールのパスが @samp{submodule.active} のパススペックと一致する

or

@item
if  @samp{submodule.<name>.url} が設定されている
@end enumerate

これらは上記の順序で評価されます。

例:

@example
  [submodule "foo"]
    active = false
    url = https://example.org/foo
  [submodule "bar"]
    active = true
    url = https://example.org/bar
  [submodule "baz"]
    url = https://example.org/baz
@end example


上記の構成では、サブモジュール @samp{bar} と @samp{baz} のみがアクティブになります。 @samp{bar} は上記(1)により、 @samp{baz}
は上記(3)によりアクティブになります。 (1)が(3)よりも優先されるため、 @samp{foo} は非アクティブです。

上記(1)と(2)でサブモジュールがアクティブでないことを指定している場合は、(3)は歴史的遺物であり、無視されることに注意してください。 つまり、
@samp{submodule.<name>.active} が @samp{false} に設定されている場合、またはサブモジュールのパスが
@samp{submodule.active} のパススペックで除外されている場合、URLは存在するかどうかは関係ありません。これを以下の例に示します。

@example
  [submodule "foo"]
    active = true
    url = https://example.org/foo
  [submodule "bar"]
    url = https://example.org/bar
  [submodule "baz"]
    url = https://example.org/baz
  [submodule "bob"]
    ignore = true
  [submodule]
    active = b*
    active = :(exclude) baz
@end example


ここでは、 baz を除くすべてのサブモジュール(foo、bar、bob)がアクティブになっています。 foo
はそれ自体のアクティブフラグによるものであり、他のすべては submodule active パススペック によるものです。これは、 .url
フィールドの存在に関係なく、baz を除く @emph{b} で始まるすべてのサブモジュールもアクティブであることを指定します。

@noindent

@chapheading Workflow for a third party library

@example
  # サブモジュールの追加
  git submodule add <url> <path>

  # ときどきサブモジュールを新しいバージョンに更新します:
  git -C <path> checkout <new version>
  git add <path>
  git commit -m "update submodule to new version"

  # スーパープロジェクト内でサブモジュールのリストを表示します
  git submodule status

  # サブモジュールの削除については、「FORMS」を参照してください
@end example


@noindent

@chapheading Workflow for an artificially split repo

@example
  # 関連するコマンドの再帰(recursion)を有効にし、
  # 対象のコマンドがデフォルトでサブモジュールで再帰処理するようにします
  git config --global submodule.recurse true

  # 他のほとんどのコマンドとは異なり、
  # cloneには独自の再帰フラグが必要です:
  git clone --recurse <URL> <directory>
  cd <directory>

  # (ソース)コードを知る為に取得する
  git grep foo
  git ls-files --recurse-submodules
@end example


@quotation

@strong{Note}

@samp{git ls-files} もまた、それ独自の @samp{--recurse-submodules} フラグが必要です。
@end quotation

@example
  # 新しいコードを得る
  git fetch
  git pull --rebase

  # 作業ツリーの変更
  git checkout
  git reset
@end example


@noindent

@chapheading Implementation details

サブモジュールを含むリポジトリのクローンを作成またはプルする場合、デフォルトではサブモジュールはチェックアウトされません。クローンにサブモジュールに再帰するように指示できます。
@samp{git submodule} の @samp{init} および @samp{update}
サブコマンドは、チェックアウトされたサブモジュールを維持し、作業ツリーの適切なリビジョンに維持します。 または、 @samp{submodule.recurse}
を設定して @samp{checkout} をサブモジュールに再帰させることもできます( @samp{submodule.recurse}
は他のGitコマンドにも影響することに注意してください。完全なリストについてはgit-config(1) を参照してください)。

@noindent

@chapheading SEE ALSO

git-submodule(1), gitmodules(5).

@noindent

@chapheading GIT

Part of the git(1) suite

@node gittutorial-2,,,Top
@chapheading Name

gittutorial-2 — Git入門パート2

@noindent

@chapheading Synopsis

@display
git *
@end display


@noindent

@chapheading DESCRIPTION

このGit入門パート2を読む前に、 gittutorial(7) (Git入門)を読んで下さい。

この入門の目的は、Gitのアーキテクチャの2つの基本的な部分(オブジェクトデータベースとインデックスファイル)を紹介し、残りのGit文書を理解するために必要なすべてのものを読者に提供することです。

@noindent

@chapheading The Git object database

新しいプロジェクトを開始して、履歴を少々作成しましょう:

@example
$ mkdir test-project
$ cd test-project
$ git init
Initialized empty Git repository in .git/
$ echo 'hello world' > file.txt
$ git add .
$ git commit -a -m "initial commit"
[master (root-commit) 54196cc] initial commit
 1 file changed, 1 insertion(+)
 create mode 100644 file.txt
$ echo 'hello world!' >file.txt
$ git commit -a -m "add emphasis"
[master c4d59f3] add emphasis
 1 file changed, 1 insertion(+), 1 deletion(-)
@end example


さて、ここで、Gitがコミットで返してきた7桁の16進数は一体何でしょうか？

入門のパート1で、コミットには名前が付いていることがわかりました。Git履歴内のすべてのオブジェクトは、40桁の16進名で保存されていることがわかりました。その名前は、オブジェクトの内容のSHA-1ハッシュです。特に、これにより、Gitが同じデータを2回保存することはなく(同一のデータには同一のSHA-1名が付けられるため)、Gitオブジェクトの内容が変更されることはありません(オブジェクトの名前も変更されるため)。ここでの7文字の16進文字列は、このような40文字の長さの文字列の略語です。
略語は、明確である限り(訳注:その環境で一意になる限り)、40文字の16進文字列を使用できるすべての場所で使用できます。

上記の例に従って作成したコミットオブジェクトのコンテンツは、コミットオブジェクトが作成された時刻とコミットを実行した人の名前を記録するため、上記とは異なるSHA-1ハッシュを生成することが期待されます。

@samp{cat-file}
コマンドを使用して、この特定のオブジェクトについてGitに問い合わせることができます。上記の例から40桁の16進数をコピーするのではなく、あなたの手元で実行したバージョンの16進数を使用してください。40桁すべての16進数を入力する手間を省くために、数文字に短縮できることに注目です:

@example
$ git cat-file -t 54196cc2
commit
$ git cat-file commit 54196cc2
tree 92b8b694ffb1675e5975148e1121810081dbdffe
author J. Bruce Fields <bfields@@puzzle.fieldses.org> 1143414668 -0500
committer J. Bruce Fields <bfields@@puzzle.fieldses.org> 1143414668 -0500

initial commit
@end example


ツリーは、それぞれがファイルに対応する、1つ以上のブロブ(blob)オブジェクトを参照できます。さらに、ツリーは他のツリーオブジェクトを参照することもできるため、ディレクトリ階層が作成されます。
ls-tree を使用して任意のツリーの内容を調べることができます(その際、SHA-1の最初の部分を指定するだけで十分なことを忘れないでください)。

@example
$ git ls-tree 92b8b694
100644 blob 3b18e512dba79e4c8300dd08aeb37f8e728b8dad    file.txt
@end example


これで、このツリーには1つのファイルが含まれていることがわかります。SHA-1ハッシュは、そのファイルのデータへの参照(reference)です:

@example
$ git cat-file -t 3b18e512
blob
@end example


「blob」は単なるファイルデータであり、cat-fileで調べることもできます:

@example
$ git cat-file blob 3b18e512
hello world
@end example


注意:
これは古いファイルデータであることに注意してください。つまり、Gitが最初のツリーに対する応答で名付けたオブジェクトは、最初のコミットで記録されたディレクトリ状態のスナップショットを持つツリーです。

これらのオブジェクトはすべて、Gitディレクトリ内部にSHA-1名で保存されます:

@example
$ find .git/objects/
.git/objects/
.git/objects/pack
.git/objects/info
.git/objects/3b
.git/objects/3b/18e512dba79e4c8300dd08aeb37f8e728b8dad
.git/objects/92
.git/objects/92/b8b694ffb1675e5975148e1121810081dbdffe
.git/objects/54
.git/objects/54/196cc2703dc165cbd373a65a4dcf22d50ae7f7
.git/objects/a0
.git/objects/a0/423896973644771497bdc03eb99d5281615b51
.git/objects/d0
.git/objects/d0/492b368b66bdabf2ac1fd8c92b39d3db916e59
.git/objects/c4
.git/objects/c4/d59f390b9cfd4318117afde11d601c1085f241
@end example


そして、これらのファイルの内容は、圧縮されたデータに加えて、ファイルの長さとタイプを識別するヘッダーだけです。
タイプは、blob、tree、commit、tag のいずれかです。

見つけるのが最も簡単なコミットはHEADコミットで、これは .git/HEAD から見つけることができます:

@example
$ cat .git/HEAD
ref: refs/heads/master
@end example


ご覧のとおり、これにより、現在どのブランチを使用しているかがわかります。 @samp{.git}
ディレクトリの下にあるファイルに名前を付ける事でこれを私達に知らせます。このディレクトリ自体には、コミットオブジェクトを参照するSHA-1名が含まれていて、
cat-file で調べることができます:

@example
$ cat .git/refs/heads/master
c4d59f390b9cfd4318117afde11d601c1085f241
$ git cat-file -t c4d59f39
commit
$ git cat-file commit c4d59f39
tree d0492b368b66bdabf2ac1fd8c92b39d3db916e59
parent 54196cc2703dc165cbd373a65a4dcf22d50ae7f7
author J. Bruce Fields <bfields@@puzzle.fieldses.org> 1143418702 -0500
committer J. Bruce Fields <bfields@@puzzle.fieldses.org> 1143418702 -0500

add emphasis
@end example


ここでの「tree」オブジェクトは、ツリーの新しい状態を指します:

@example
$ git ls-tree d0492b36
100644 blob a0423896973644771497bdc03eb99d5281615b51    file.txt
$ git cat-file blob a0423896
hello world!
@end example


そして「親」オブジェクトは前のコミットを参照します:

@example
$ git cat-file commit 54196cc2
tree 92b8b694ffb1675e5975148e1121810081dbdffe
author J. Bruce Fields <bfields@@puzzle.fieldses.org> 1143414668 -0500
committer J. Bruce Fields <bfields@@puzzle.fieldses.org> 1143414668 -0500

initial commit
@end example


そのツリーオブジェクトは最初に調べたツリーであり、このコミットには親がないという点でレアです。

多くのコミットでは親が1つしかないですが、
複数の親を持つコミットも割とあります。
その場合、コミットはマージを表し、
親参照はマージされたブランチのヘッドを指します。

ブロブ・ツリー・コミット以外に残っているオブジェクトのタイプは「タグ」だけです。これについてはここでは説明しません。 詳細については、
git-tag(1) を参照してください。

これで、Gitがオブジェクトデータベースを使用してプロジェクトの履歴を表す方法がわかりました:

@itemize 

@item
「コミット」オブジェクトは、履歴の特定のポイントでのディレクトリツリーのスナップショットを表す「ツリー」オブジェクトを指し、「親」コミットを、プロジェクト履歴にどのように接続されているかを示すために参照します。

@item
「ツリー」オブジェクトは単一のディレクトリの状態を表し、ディレクトリ名をファイルデータを含む「ブロブ」オブジェクトとサブディレクトリ情報を含む「ツリー」オブジェクトに関連付けます。

@item
「ブロブ」オブジェクトには、他の構造でないファイルデータが含まれています。

@item
各ブランチのヘッドにあるコミットオブジェクトへの参照は、 .git/refs/heads/ の下のファイルに保存されます。

@item
現在のブランチの名前は .git/HEAD に保存されます。
@end itemize

注意: ちなみに、多くのコマンドは引数としてツリーを使用することに注意してください。
しかし、上で見ることができるように、ツリーは多くの異なる方法(そのツリーのSHA-1名、そのツリーを参照するコミットの名前、そのツリーを参照するヘッドを持つブランチの名前など)で参照できます。そのツリーのSHA-1名、ツリーを参照するコミットの名前、ヘッドが参照するブランチの名前
そのツリーなどに-そしてそのようなコマンドのほとんどはこれらの名前のいずれかを受け入れることができます。

コマンドの概要では、「tree-ish」(ツリーっぽい)という単語がそのような引数を示すために使用されることがあります。

@noindent

@chapheading The index file

コミットを作成するために使用している主なツールは @samp{git-commit -a}
です。これは、作業ツリーに加えたすべての変更を含むコミットを作成します。しかし、特定のファイルの変更のみをコミットしたい場合はどうでしょうか？
または、特定のファイルの特定(一部の)の変更のみをコミットしたい場合はどうでしょうか？

コミット作成の秘密を知れば、コミットを作成するより柔軟な方法があることがわかります。

我々のテストプロジェクトを続けて、file.txt を再び変更しましょう:

@example
$ echo "hello world, again" >>file.txt
@end example


しかし、今回はすぐにコミットするのではなく、中間のステップを踏んで、何が起こっているかを追跡するために途中でdiffを要求しましょう:

@example
$ git diff
--- a/file.txt
+++ b/file.txt
@@@@ -1 +1,2 @@@@
 hello world!
+hello world, again
$ git add file.txt
$ git diff
@end example


最後の差分は空ですが、新しいコミットは行われておらず、ヘッドにはまだ新しい行が含まれていないからです:

@example
$ git diff HEAD
diff --git a/file.txt b/file.txt
index a042389..513feba 100644
--- a/file.txt
+++ b/file.txt
@@@@ -1 +1,2 @@@@
 hello world!
+hello world, again
@end example


つまり、「git diff」はヘッド以外のものと比較しているのです。比較しているのは、実際にはインデックスファイルです。これはバイナリ形式で
.git/index に保存されていますが、その内容はls-filesで調べることができます:

@example
$ git ls-files --stage
100644 513feba2e53ebbd2532419ded848ba19de88ba00 0       file.txt
$ git cat-file -t 513feba2
blob
$ git cat-file blob 513feba2
hello world!
hello world, again
@end example


したがって、「git
add」が行ったことは、新しいブロブを格納し、それへの参照をインデックスファイルに配置することでした。ファイルを再度変更すると、新しい変更が「git
diff」出力に反映されていることがわかります:

@example
$ echo 'again?' >>file.txt
$ git diff
index 513feba..ba3da7b 100644
--- a/file.txt
+++ b/file.txt
@@@@ -1,2 +1,3 @@@@
 hello world!
 hello world, again
+again?
@end example


正しい引数を使用すると、 @emph{git diff}
は、作業ディレクトリと最後のコミットの違い、またはインデックスと最後のコミットの違いを示すこともできます:

@example
$ git diff HEAD
diff --git a/file.txt b/file.txt
index a042389..ba3da7b 100644
--- a/file.txt
+++ b/file.txt
@@@@ -1 +1,3 @@@@
 hello world!
+hello world, again
+again?
$ git diff --cached
diff --git a/file.txt b/file.txt
index a042389..513feba 100644
--- a/file.txt
+++ b/file.txt
@@@@ -1 +1,2 @@@@
 hello world!
+hello world, again
@end example


何度でも私達は「git commit」( @samp{-a}
オプションなし）を使用して新しいコミットを作成することができ、コミットされた状態にはインデックスファイルに保存されている変更のみが含まれ、作業ツリーにのみ残っている追加の変更が含まれていないことを確認できます:

@example
$ git commit -m "repeat"
$ git diff HEAD
diff --git a/file.txt b/file.txt
index 513feba..ba3da7b 100644
--- a/file.txt
+++ b/file.txt
@@@@ -1,2 +1,3 @@@@
 hello world!
 hello world, again
+again?
@end example


つまり、デフォルトでは、「git commit」は、作業ツリーではなく、インデックスを使用してコミットを作成します。 コミットでの @samp{-a}
オプションの指定は、最初に作業ツリーのすべての変更をインデックスに反映するように指示します。

最後に、インデックスファイルに対する「git add」の効果を確認しておきましょう:

@example
$ echo "goodbye, world" >closing.txt
$ git add closing.txt
@end example


@emph{git add} の効果は、インデックスファイルに1つのエントリを追加することでした:

@example
$ git ls-files --stage
100644 8b9743b20d4b15be3955fc8d5cd2b09cd2336138 0       closing.txt
100644 513feba2e53ebbd2532419ded848ba19de88ba00 0       file.txt
@end example


そして、 cat-file でわかるように、この新しいエントリはファイルの現在の内容を参照しています:

@example
$ git cat-file blob 8b9743b2
goodbye, world
@end example


「status」コマンドは、状況の概要をすばやく取得するための便利な方法です:

@example
$ git status
ブランチ master
コミット予定の変更点:
  (use "git restore --staged <file>..." to unstage)

        new file:   closing.txt

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)

        modified:   file.txt
@end example


closeing.txtの現在の状態はインデックスファイルにキャッシュされているため、「コミット予定の変更点」(Changes to be
committed)としてリストされます。 file.txtには、インデックスに反映されていない作業ディレクトリの変更があるため、「Changes
not staged for commit」とマークされています。 この時点で、「git
commit」を実行すると、（新しいコンテンツを含む)closeing.txtが追加されたコミットが作成されますが、file.txtは変更されませんでした。

また、裸の @samp{git diff}
はfile.txtへの変更を示しますが、closeing.txtの追加は示しません。これは、インデックスファイルのcloseing.txtのバージョンが作業ディレクトリのバージョンと同じであるためです。

インデックスファイルは、新しいコミットのステージング領域であることに加えて、ブランチをチェックアウトするときにオブジェクトデータベースからも入力され、マージ操作に関係するツリーを保持するためにも使用されます。詳細については、
gitcore-tutorial(7) および関連するマニュアルページを参照してください。

@noindent

@chapheading What next?

この期に及んでは、あなたはgitコマンドのマニュアルページを読むために必要なすべてを知っている必要があります。それを始めるのに適した場所の1つは、
giteveryday(7) に記載されているコマンドを使用することです。また、あなたは gitglossary(7)
で不明な専門用語を調べる事もできます。

@uref{user-manual.html,Git User’s Manual} は、Gitのより包括的な紹介を提供します。

gitcvs-migration(7)
は、CVSリポジトリをGitにインポートする方法を説明し、CVSのような方法でGitを使用する方法を示しています。

Gitの使用に関する興味深い例については、 @uref{howto-index.html,howtos} を参照してください。

Git開発者向けに、 gitcore-tutorial(7)
で、新しいコミットの作成などに関連する低レベルのGitメカニズムについて詳しく説明しています。

@noindent

@chapheading SEE ALSO

gittutorial(7), gitcvs-migration(7),
gitcore-tutorial(7), gitglossary(7), git-help(1),
giteveryday(7), @uref{user-manual.html,The Git User’s Manual}

@noindent

@chapheading GIT

Part of the git(1) suite

@node gittutorial,,,Top
@chapheading Name

gittutorial — Git入門

@noindent

@chapheading Synopsis

@display
git *
@end display


@noindent

@chapheading DESCRIPTION

このチュートリアルでは、新しいプロジェクトをGitにインポートし、変更を加え、他の開発者と変更を共有する方法について説明します。

Gitを使用してプロジェクトをフェッチする方に主な関心がある場合、たとえば、最新バージョンをテストする場合は、
@uref{user-manual.html,The Git User’s Manual} の最初の2つの章から始めることをお勧めします。

注意: まず最初に、 あなたは @samp{git log --graph} などのコマンドの文書を以下のようにして入手する事ができます:

@example
$ man git-log
@end example


または:

@example
$ git help log
@end example


後者では。あなたが選択したマニュアルビューアを使用できます。詳細については git-help(1) を参照してください。

操作を行う前に、名前と公開メールアドレスを使用してあなた自身をGitに紹介する(introduce
yourself)ことをお勧めします。これを行う最も簡単な方法は以下のとおりです:

@example
$ git config --global user.name "Your Name Comes Here"
$ git config --global user.email you@@yourdomain.example.com
@end example


@noindent

@chapheading Importing a new project

既にtarball project.tar.gz があると仮定します。あなたは以下にしてそれをGitリビジョン管理下に置くことができます。

@example
$ tar xzf project.tar.gz
$ cd project
$ git init
@end example


Gitは以下のメッセージを返すでしょう

@example
Initialized empty Git repository in .git/
@end example


これで作業ディレクトリが初期化されました。あなたは ".git" という名前の新しいディレクトリが作成されていることに気付くかもしれません。

次に、Gitに、現在のディレクトリ(@emph{.} に注意)の下にあるすべてのファイルの内容のスナップショットを「git add」で取得するように指示します:

@example
$ git add .
@end example


このスナップショットは、Gitが「インデックス」と呼ぶ一時的な足場領域(temporary staging area)に保存されました。 @emph{git
commit} を使用して、インデックスの内容をリポジトリに永続的に保存できます:

@example
$ git commit
@end example


これにより、コミットメッセージの入力を求められます。 これで、プロジェクトの最初のバージョンがGitに保存されました。

@noindent

@chapheading Making changes

いくつかのファイルを変更してから、更新された内容をインデックスに追加します:

@example
$ git add file1 file2 file3
@end example


これで、コミットする準備ができました。 @samp{--cached} オプションを指定した「git
diff」を使用して、何がコミットされようとしているのかを確認できます:

@example
$ git diff --cached
@end example


(@samp{--cached} を指定しない場合、「git diff」は、編集を行ったがまだインデックスに追加されていない変更を表示します。）あなたは「git
status」を使用して状況の簡単な要約を取得することもできます:

@example
$ git status
On branch master
Changes to be committed:
Your branch is up to date with 'origin/master'.
  (use "git restore --staged <file>..." to unstage)

        modified:   file1
        modified:   file2
        modified:   file3
@end example


さらに調整が必要な場合は、ここで調整してから、新しく変更したコンテンツをインデックスに追加します。
最後に、以下のコマンドであなたの変更をコミットします。

@example
$ git commit
@end example


これにより、変更を説明するメッセージの入力を再度求められ、プロジェクトの新しいバージョンが記録されます。

または、事前に「git add」を実行する代わりに、あなたは以下を使用できます。

@example
$ git commit -a
@end example


これにより、変更された(ただし新規ではない)ファイルが自動的に認識され、それらがインデックスに追加され、コミットされます。それらがすべて1つのステップで実行されます。

コミットメッセージに関する注意:
必須ではありませんが、コミットメッセージは、変更を要約した1行の短い(50文字未満)行で始まり、空行が1行あり、その後にさらに詳細な説明が続くようにすることをお勧めします。コミットメッセージの最初の空白行までのテキストはコミットタイトルとして扱われ、そのタイトルはGit全体で使用されます。たとえば、
git-format-patch(1)
はコミットを電子メールに変換し、件名としてコミットタイトル、本文として残りのコミットメッセージを使用します。

@noindent

@chapheading Git tracks content not files

【Gitはファイルではなくコンテンツを追跡する】多くのリビジョン管理システムは、新しいファイルへの変更の追跡を開始するようにシステムに指示する
@samp{add} コマンドを提供します。 Gitの @samp{add} コマンドは、よりシンプルで強力な機能を実行します。 @samp{git add}
'は、新しいファイルと新しく変更されたファイルの両方に使用されます。どちらの場合も、指定されたファイルのスナップショットを取得し、そのコンテンツをインデックスにステージングして、次のコミットにすぐに含めることができます。

@noindent

@chapheading Viewing project history

あなたはいつでも、以下を使用して変更の履歴を表示できます

@example
$ git log
@end example


あなたが各ステップで完全な差分も表示したい場合は、以下を使用してください

@example
$ git log -p
@end example


多くの場合、以下のような変更の概要は、各ステップの感触をつかむのに役立ちます

@example
$ git log --stat --summary
@end example


@noindent

@chapheading Managing branches

単一のGitリポジトリで、開発の複数のブランチを維持できます。「experimental」という名前の新しいブランチを作成するには、以下のようにします。

@example
$ git branch experimental
@end example


そして、以下のようにすることができます

@example
$ git branch
@end example


そうすると、既存のすべてのブランチのリストが表示されます。

@example
  experimental
* master
@end example


「experimental」ブランチは作成したばかりのブランチであり、「master」ブランチは自動的に作成されたデフォルトのブランチです。アスタリスク(@samp{*})は、現在使用しているブランチを示します。そして以下のようにタイプします。

@example
$ git switch experimental
@end example


するとexperimentalブランチに切り替えます。次に、ファイルを編集し、変更をコミットして、masterブランチに戻ります:

@example
(edit file)
$ git commit -a
$ git switch master
@end example


その変更はexperimentalブランチで行われ、masterブランチに戻ったため、その変更が表示されなくなったことを確認します。

masterブランチで別の変更を加えることができます:

@example
(edit file)
$ git commit -a
@end example


この時点で、2つのブランチは分岐しており、それぞれに異なる変更が加えられています。experimentalで行った変更をmasterにマージするには、以下を実行します

@example
$ git merge experimental
@end example


変更が競合しない場合は、これで完了です。 競合がある場合、競合を示すマーカーが問題のあるファイルに残されます。

@example
$ git diff
@end example


とすると、これを表示します。あなたが競合を解決するためにファイルを編集したら

@example
$ git commit -a
@end example


とすると、マージの結果をコミットします。そして最後に、

@example
$ gitk
@end example


とすると、結果の履歴の優れたグラフィック表現が表示されます。

この時点で、以下のコマンドでexperimentalブランチを削除できます

@example
$ git branch -d experimental
@end example


このコマンドは、experimentalブランチでの変更がすでに現在のブランチにあることを確認します。

あなたがブランチクレイジーアイデアで開発し、それを後悔しているなら、あなたはいつでもブランチを(マージせずに)削除することができます

@example
$ git branch -D crazy-idea
@end example


ブランチのコストは安くて、かつ操作は簡単なので、これは何かを一時的に試す良い方法です。

@noindent

@chapheading Using Git for collaboration

アリス(Alice)が /home/alice/project
にGitリポジトリを使用して新しいプロジェクトを開始し、同じマシンにホームディレクトリを持っているボブ(Bob)が貢献したいとします。

ボブは以下のように始めます:

@example
bob$ git clone /home/alice/project myrepo
@end example


これにより、アリスのリポジトリのクローンを含む新しいディレクトリ「myrepo」が作成されます。クローンは元のプロジェクトと同等の立場にあり、元のプロジェクトの履歴の独自のコピーを所有しています。

次に、ボブはいくつかの変更を加えてコミットします:

@example
(edit files)
bob$ git commit -a
(repeat as necessary)
@end example


準備ができたら、ボブはアリスに /home/bob/myrepo のリポジトリから変更をプルするように指示します。アリスはこれを以下のように行います:

@example
alice$ cd /home/alice/project
alice$ git pull /home/bob/myrepo master
@end example


これにより、ボブの「master」ブランチからの変更がアリスの現在のブランチにマージされます。その間にアリスが自分で変更を加えた場合は、競合を手動で修正する必要があります。

つまり「pull」コマンドは2つの操作を実行します。リモートブランチから変更をフェッチしてから、それらを現在のブランチにマージします。

一般に、アリスが「プル」を開始する前に、アリス自身のローカルの変更をコミットすることを望んでいることに注意してください。ボブの作業が、履歴が分岐してからアリスが行ったことと競合する場合、アリスは作業ツリーとインデックスを使用して競合を解決し、既存のアリス自身のローカル変更は競合解決プロセスの障害となります(Gitは引き続きフェッチを実行しますが、マージを拒否します。アリスは、何らかの方法でアリス自身のローカルの変更を取り除き、再度プルする必要があります)。

アリスは、「fetch」コマンドを使用して、マージせずにボブが行ったことを確認できます。
これにより、アリスはボブが何をしたかを特別な記号「FETCH_HEAD」を使用して検査し、プルする価値があるかどうかを判断できます。

@example
alice$ git fetch /home/bob/myrepo master
alice$ git log -p HEAD..FETCH_HEAD
@end example


この操作は、アリスがアリス自身のローカルの変更をコミットしていない場合でも安全です。 範囲表記 @samp{HEAD..FETCH_HEAD}
は、「FETCH_HEADから到達可能なすべてのものを表示し、HEADから到達可能なものはすべて除外する」ことを意味します。
このコマンドで、アリスは、現在の状態（HEAD）につながるすべてのことをすでに知っているとして、ボブが持っている状態（FETCH_HEAD）で、かつ、アリスが持っていないモノを確認します。

アリスが、ボブとの履歴が分岐してから何をしたかを視覚化したい場合は、以下のコマンドを実行できます:

@example
$ gitk HEAD..FETCH_HEAD
@end example


これは、前に「git log」で見たのと同じ2ドットの範囲表記を使用します。

アリスは、フォークして以来、アリスとボブの両方が何をしたかを見たいと思うかもしれません。その場合、アリスはは2ドット形式の代わりに3ドット形式を使用できます:

@example
$ gitk HEAD...FETCH_HEAD
@end example


これは、「どちらか一方から到達可能なものはすべて表示し、両方から到達可能なものはすべて除外する」ことを意味します。

これらの範囲表記は、gitkと「git log」の両方で使用できることに注意してください。

ボブが何をしたかを調べた後、緊急のことがなければ、アリスはボブからプルせずに作業を続けることを決定するかもしれません。ボブの履歴にアリスがすぐに必要とするものがある場合、アリスは最初に進行中の作業をstashし、「プル」を実行し、最後に結果の履歴に加えて進行中の作業をunstashすることを選択できます。

小さな緊密なグループで作業している場合、同じリポジトリを何度も操作することは珍しくありません。リモートリポジトリの省略形を定義すると、作業は以下のように簡単になります:

@example
alice$ git remote add bob /home/bob/myrepo
@end example


これにより、アリスは「git
fetch」コマンドを使用して、「pull」操作の最初の部分を自分のブランチとマージせずに、以下のコマンドを使用して単独で実行できます:

@example
alice$ git fetch bob
@end example


直接書いた形式とは異なり、アリスが「git
remote」で設定したリモートリポジト省略形を使用してボブからフェッチする場合、フェッチされたものはリモート追跡ブランチ(この場合は「bob/master」）に保存されます。
したがって、以下のようにすると:

@example
alice$ git log -p master..bob/master
@end example


ボブがアリスのmasterブランチから分岐してから行ったすべての変更のリストを示します。

これらの変更を調べた後、アリスは変更をアリス自身のmasterブランチにマージできます。

@example
alice$ git merge bob/master
@end example


この「マージ」は、以下のように「アリス自身のリモート追跡ブランチからプルする」ことによっても実行できます:

@example
alice$ git pull . remotes/bob/master
@end example


注意: コマンドラインで他に何が指定されているかに関係なく、 @samp{git pull} は常に現在のブランチにマージされることに注意してください。

その後、ボブは以下を使用してアリスの最新の変更でボブのリポジトリを更新できます

@example
bob$ git pull
@end example


注意:
ボブはアリスのリポジトリへのパスを指定する必要がないことに注意してください。ボブがアリスのリポジトリのクローンを作成したとき、Gitはアリスのリポジトリの場所をリポジトリ構成に保存し、その場所がプルに使用されます。

@example
bob$ git config --get remote.origin.url
/home/alice/project
@end example


( @emph{git clone} によって作成される完全な構成は、 @samp{git config -l} を使用して表示でき、
git-config(1) のマニュアルページで各オプションの意味を説明しています。)

Gitは、「origin/master」という名前でアリスのmasterブランチの当初の綺麗なコピー(pristine copy)も保持しています。

@example
bob$ git branch -r
  origin/master
@end example


ボブが後で別のホストから作業することを決定した場合でも、sshプロトコルを使用してクローンとプルを実行できます:

@example
bob$ git clone alice.org:/home/alice/project myrepo
@end example


代わりに、Gitのネイティブプロトコルや、httpを使用できます。詳細については、 git-pull(1) を参照してください。

Gitは、さまざまなユーザーが変更をプッシュする中央リポジトリを使用して、CVSのようなモードで使用することもできます。
git-push(1) と gitcvs-migration(7) を参照してください。

@noindent

@chapheading Exploring history

Gitの履歴は、相互に関連する一連のコミットとして表されます。 @emph{git log}
コマンドでこれらのコミットを一覧表示できることはすでに見てきました。注意:
各gitログエントリの最初の行には、コミットの名前も示されていることに注意してください:

@example
$ git log
commit c82a22c39cbc32576f64f5c6b3f24b99ea8149c7
Author: Junio C Hamano <junkio@@cox.net>
Date:   Tue May 16 17:18:22 2006 -0700

    merge-base: Clarify the comments on post processing.
@end example


このコミットの詳細を確認するには、この名前を「git show」に与えます。

@example
$ git show c82a22c39cbc32576f64f5c6b3f24b99ea8149c7
@end example


ただし、コミットを参照する方法は他にもあります。あなたはコミットを一意に識別するのに十分な長さであれば名前の最初の部分だけを指定できます:

@example
$ git show c82a22c39c   # the first few characters of the name are
                        # usually enough
$ git show HEAD         # the tip of the current branch
$ git show experimental # the tip of the "experimental" branch
@end example


通常、あらゆるコミットには、プロジェクトの以前の状態を指す1つの「親」コミットがあります:

@example
$ git show HEAD^  # to see the parent of HEAD
$ git show HEAD^^ # to see the grandparent of HEAD
$ git show HEAD~4 # to see the great-great grandparent of HEAD
@end example


注意: マージコミットには複数の親が含まれる場合があることに注意してください:

@example
$ git show HEAD^1 # show the first parent of HEAD (same as HEAD^)
$ git show HEAD^2 # show the second parent of HEAD
@end example


コミットに独自の名前を付けることもできます。

@example
$ git tag v2.5 1b2e1d63ff
@end example


と実行すると、1b2e1d63ff
は「v2.5」という名前で参照できます。この名前を他の人と共有する場合(たとえば、リリースバージョンを識別するため)、「タグ」オブジェクトを作成し、おそらくそれに署名する必要があります。
詳細については git-tag(1) を参照してください。

コミットを知る必要のあるGitコマンドは、これらの名前のいずれかを指定することができます。 例えば:

@example
$ git diff v2.5 HEAD     # compare the current HEAD to v2.5
$ git branch stable v2.5 # start a new branch named "stable" based
                         # at v2.5
$ git reset --hard HEAD^ # reset your current branch and working
                         # directory to its state at HEAD^
@end example


最後のコマンドには注意してください。作業ディレクトリの変更が失われるだけでなく、このブランチからそれ以降のすべてのコミットも削除されます。このブランチがそれらのコミットを含む唯一のブランチである場合、それらは失われます。また、他の開発者がプルする公開ブランチで「git
reset」を使用しないでください。他の開発者に不必要なマージを強制して、履歴をクリーンアップしてしまうためです。プッシュした変更を元に戻す必要がある場合は、代わりに「git
revert」を使用してください。

@emph{git grep} コマンドは、プロジェクトの任意のバージョンで文字列を検索できます。

@example
$ git grep "hello" v2.5
@end example


これは、v2.5で出現するすべての「hello」を検索します。

以下のようにコミット名を省略すると、「git grep」は現在のディレクトリで管理しているファイルを検索します。

@example
$ git grep "hello"
@end example


これは、Gitによって追跡されているファイルだけですばやく検索する方法です。

多くのGitコマンドは、さまざまな方法で指定できる一連のコミットも指定できます。 @emph{git log} の例を以下に示します:

@example
$ git log v2.5..v2.6            # commits between v2.5 and v2.6
$ git log v2.5..                # commits since v2.5
$ git log --since="2 weeks ago" # commits from the last 2 weeks
$ git log v2.5.. Makefile       # commits since v2.5 which modify
                                # Makefile
@end example


'git log’にコミットの「範囲」を与えることもできます。ここで、最初のコミットは必ずしも2番目の祖先とは限りません。
たとえば、ブランチの「stable」と「master」の先端が、しばらく前に共通のコミットから分岐した場合、

@example
$ git log stable..master
@end example


とすると、masterブランチで行われたコミットはリストされますが、stableブランチに対しては行われません。

@example
$ git log master..stable
@end example


とすると、stableブランチで行われたコミットのリストが表示されますが、masterブランチに対しては表示されません。

「git
log」コマンドには弱点があります。コミットを一覧として表示する必要があることです。履歴に分岐してからマージされた開発ラインがある場合、「git
log」がそれらのコミットを提示する順序は無意味な順序になります。

複数のコントリビューター（LinuxカーネルやGit自体など）を持つほとんどのプロジェクトでは、頻繁にマージが行われ、「gitk」はそれらの履歴をより適切に視覚化できます。

@example
$ gitk --since="2 weeks ago" drivers/
@end example


これは、「drivers」ディレクトリの下のファイルを変更した過去2週間のコミットからのコミットを参照できます。 (注:
Ctrlキーを押しながら「-」または「+」を押すと、gitkのフォントサイズを調整できます。）

最後に、ファイル名を取得するほとんどのコマンドでは、オプションで、ファイルの特定のバージョンを指定するために、任意のファイル名の前にコミットを付けることができます:

@example
$ git diff v2.5:Makefile HEAD:Makefile.in
@end example


@emph{git show} を使用して、任意のファイルを表示することもできます:

@example
$ git show v2.5:Makefile
@end example


@noindent

@chapheading Next Steps

このチュートリアルは、プロジェクトの基本的な分散リビジョン管理を実行するのに十分なはずです。ただし、Gitの奥深さとパワーを完全に理解するには、Gitの基礎となる2つの簡単なアイデアを理解する必要があります:

@itemize 

@item
オブジェクトデータベースは、あなたのプロジェクトの履歴（ファイル、ディレクトリ、コミット）を格納するために使用されるかなり洗練されたシステムです。

@item
インデックスファイルは、ディレクトリツリーの状態のキャッシュであり、コミットの作成、作業ディレクトリのチェックアウト、およびマージに関係するさまざまなツリーの保持に使用されます。
@end itemize

このチュートリアルのパート2では、オブジェクトデータベース、インデックスファイル、およびGitを最大限に活用するために必要なその他のいくつかのガラクタについて説明します。
linkgit: gittutorial-2[7] をご覧下さい。

すぐにそれを続けたくない場合は、この時点で興味深いかもしれない他のいくつかのより道は以下のとおりです:

@itemize 

@item
git-format-patch(1) 、git-am(1):
これらは一連のgitコミットを電子メールで送信されたパッチに変換します。その逆も同様です。電子メールで送信されたパッチに大きく依存するLinuxカーネルなどのプロジェクトで役立ちます。

@item
git-bisect(1):
プロジェクトにデグレがある場合、バグを追跡する1つの方法は、履歴を検索して、原因となる正確なコミットを見つけることです。 Git
bisectは、そのコミットの二分木検索を実行するのに役立ちます。マージされたブランチが多数ある複雑な非線形履歴の場合でも、最適に近い検索を実行するのに十分賢いです。

@item
gitworkflows(7): 推奨される作業の流れの概要を示します。

@item
giteveryday(7): 20コマンド程度で綴る日々のGit。

@item
gitcvs-migration(7): CVSユーザー向けのGit。
@end itemize

@noindent

@chapheading SEE ALSO

gittutorial-2(7), gitcvs-migration(7),
gitcore-tutorial(7), gitglossary(7), git-help(1),
gitworkflows(7), giteveryday(7), @uref{user-manual.html,The Git User’s Manual}

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitweb.conf,,,Top
@chapheading Name

gitweb.conf — Gitweb(Git Webインターフェイス)構成ファイル

@noindent

@chapheading Synopsis

/etc/gitweb.conf, /etc/gitweb-common.conf, $GITWEBDIR/gitweb_config.perl

@noindent

@chapheading DESCRIPTION

Web上でGitリポジトリを表示するためのgitweb CGIスクリプトは、設定ファイルとしてperlスクリプト断片を使用します。  @samp{our
$variable = value} を使用して変数を設定できます。 @samp{#} 文字から行末までのテキストは無視されます。
詳細については、「perlsyn(1)」を参照してください。

とある例:

@example
# gitweb configuration file for http://git.example.org
#
our $projectroot = "/srv/git"; # FHS recommendation
our $site_name = 'Example.org >> Repos';
@end example


構成ファイルは、 @samp{gitweb.cgi} スクリプトが生成されたときにgitwebに組み込み済みのデフォルト設定を上書きするために使用されます。

gitweb CGI自体の構成設定を変更することもできますが、それらの変更はアップグレード時に失われます。構成設定は、デフォルト名が
@samp{gitweb_config.perl}
のCGIスクリプトと同じディレクトリ内のファイルに配置される場合もあります。これにより、シンボリックリンクを使用して、構成が異なる複数のgitwebインスタンスを作成できます。

注意: 一部の構成は、gitweb全体ではなく、リポジトリごとに制御できることに注意してください。 gitweb(1)の manpage
の「Per-repository gitweb configuration」サブセクションを参照してください。

@noindent

@chapheading DISCUSSION

gitwebは、以下のソースから以下の順序で構成データを読み取ります:

@itemize 

@item
組み込み値(ビルド段階で設定されるものもあります)

@item
共通のシステム全体の構成ファイル(デフォルトは @samp{/etc/gitweb-common.conf})

@item
インスタンスごとの構成ファイル(デフォルトでは、インストールされたgitwebと同じディレクトリにある @samp{gitweb_config.perl}
になります)。または、存在しない場合は、システム全体の構成ファイル(デフォルトは @samp{/etc/gitweb.conf})にフォールバックします。
@end itemize

後から構成ファイルで得られた値は、上記の順序で先に得られた値を上書きします。

共通のシステム全体の構成ファイルや、フォールバックシステム全体の構成ファイルや、インスタンスごとの構成ファイルの場所は、ビルド時のMakefile構成変数、それぞれ
@samp{GITWEB_CONFIG_COMMON} と @samp{GITWEB_CONFIG_SYSTEM} と @samp{GITWEB_CONFIG}
を使用して定義されます。

あなたは環境変数 @samp{GITWEB_CONFIG_COMMON} と @samp{GITWEB_CONFIG_SYSTEM} と @samp{GITWEB_CONFIG}
を空でない値に設定することにより、実行時にgitweb構成ファイルの場所をオーバーライドすることもできます。

構成ファイルの構文はPerlの構文です。これらのファイルは、Perlコード(gitweb自体が記述されている言語)の断片としてそれらをsourceすることによって処理されるためです。
変数は通常、 (@samp{our $variable = <value>;} のように) @samp{our}
修飾子を使用して設定され、新しいバージョンのgitwebがとある変数を使用しなくなったために、とある変数の宣言で停止(stop)する構文エラーを回避します。

あなたは read_config_file()
サブルーチンを使用して、他の構成ファイルを含めることができます。たとえば、(Gitリポジトリ管理ツールの1つである)Gitoliteを介してリポジトリを表示するための、アクセス制御に関連するgitweb構成を別のファイルに入れたい場合があります。例えばそれが
@samp{/etc/gitweb-gitolite.conf} にあるとすると、それを含めるには以下のようにします。

@example
read_config_file("/etc/gitweb-gitolite.conf");
@end example


これを、使用されているgitweb構成ファイルのどこか、例えばインストールごとのgitweb構成ファイルに置きます。 注意:
read_config_file()は、読み取ったファイルが存在することを自分自身でチェックし、見つからない場合は何もしないことに注意してください。
また、インクルードファイルのエラーも処理します。

一部のインストールでは、構成ファイルがまったくないデフォルトの構成が完全に機能する場合があります。それでも、構成ファイルはgitwebの動作をさまざまな方法でカスタマイズまたは微調整するのに役立ち、構成可能な
@samp{%features} 変数を使用して明示的に有効にしない限り、一部のオプション機能は有効になりません(以下の「Configuring gitweb
features」セクションも参照)。

@noindent

@chapheading CONFIGURATION VARIABLES

設定変数の中には、gitwebのビルド時にデフォルト値が設定されるものがあります(CGIスクリプトに埋め込まれています) — その場合は、その事実を記述しています。 gitwebのビルドとインストールについては、gitwebの INSTALL ファイルを参照してください。

@noindent

@heading Location of repositories

以下で説明する構成変数は、gitwebがGitリポジトリを見つける方法、およびリポジトリが表示およびアクセスされる方法を制御します。

gitweb(1)の manpage の「Repositories」以降のサブセクションも参照してください。

@table @asis

@item  $projectroot 
プロジェクトパスの前に付加されるファイルシステム絶対パス。リポジトリへのパスは @samp{$projectroot/$project} です。 インストール時に
@samp{$GITWEB_PROJECTROOT} に設定します。gitwebがリポジトリを見つけるには、この変数を正しく設定する必要があります。

たとえば、 @samp{$projectroot} が @samp{/srv/git} に設定されている場合、gitweb構成ファイルに以下のように入力します:

@example
our $projectroot = "/srv/git";
@end example


これは以下のようになります

@example
http://git.example.com/gitweb.cgi?p=foo/bar.git
@end example


そして以下はpath_infoベースの同等のものです

@example
http://git.example.com/gitweb.cgi/foo/bar.git
@end example


これはファイルシステムのパス @samp{/srv/git/foo/bar.git} にマップされます。

@item  $projects_list 
プロジェクトを一覧表示するプレーンテキストファイルの名前、またはプロジェクトをスキャンするディレクトリの名前。

プロジェクトリストファイルには、1行に1つのプロジェクトがリストされ、各行の形式は以下のとおりです

@example
<URI-encoded filesystem path to repository> SP <URI-encoded repository owner>
@end example


この変数のデフォルト値は、インストール時に @samp{GITWEB_LIST}
makefile変数によって決定されます。この変数が空の場合、gitwebはフォールバックして @samp{$projectroot}
ディレクトリのリポジトリをスキャンします。

@item  $project_maxdepth 
@samp{$projects_list} 変数が設定されていない場合、gitwebはファイルシステムを再帰的にスキャンしてGitリポジトリを探します。
@samp{$project_maxdepth} は、 @samp{$projectroot} (開始点)を基準にしてトラバーサル深度を制限するために使用されます。
これは、@samp{$project_maxdepth} よりも @samp{$projectroot} から離れているディレクトリがスキップされることを意味します。

これは純粋にパフォーマンスの最適化であり、元々は再帰的なディレクトリトラバーサルが遅い MacOS X
を対象としています。Gitwebはシンボリックリンクをたどりますが、重複するファイルやディレクトリを無視して循環を検出します。

この変数のデフォルト値は、ビルド時の構成変数 @samp{GITWEB_PROJECT_MAXDEPTH} によって決定されます。デフォルトは2007です。

@item  $export_ok 
この(変数の値のファイル名の)ファイルが(リポジトリに)存在する場合にのみリポジトリを表示します。この変数がtrueと評価された場合にのみ有効です。
@samp{GITWEB_EXPORT_OK} を設定することにより、gitwebを構築するときに設定できます。 このパスは @samp{GIT_DIR}
からの相対パスです。 git-daemon[1] は、 @samp{--export-all} で開始されていない限り、
@samp{git-daemon-export-ok} を使用します。デフォルトでは、この変数は設定されていません。つまり、この機能はオフになっています。

@item  $export_auth_hook 
表示するリポジトリを決定するために使用される関数。このサブルーチンは、プロジェクトへのフルパスという1つのパラメーターを受け取る必要があり、trueを返した場合、そのプロジェクトはプロジェクトリストに含まれ、
@samp{$export_ok} と $@samp{projects_list} と @samp{$projects_maxdepth}
とで説明されている他の要件を満たしている限り、gitwebからアクセスできます。例:

@example
our $export_auth_hook = sub @{ return -e "$_[0]/git-daemon-export-ok"; @};
@end example


上記は代わりに、以下のように @samp{$export_ok} を使用して行うことができますが

@example
our $export_ok = "git-daemon-export-ok";
@end example


設定されていない場合(デフォルト)は、この機能はが無効になっています。

より複雑な例として、 gitweb(1) manpage の「Controlling access to Git
repositories」サブセクションも参照してください。

@item  $strict_export 
概要ページにも表示されているリポジトリの表示のみを許可します。これにより、たとえば、 @samp{$ export_ok}
ファイルは、リポジトリが表示されているかどうかだけでなく、リポジトリが使用可能かどうかを判断します。 @samp{$projects_list}
がプロジェクトのリストを含むファイルを指している場合、リストされているリポジトリのみがgitwebで使用できます。
@samp{GITWEB_STRICT_EXPORT}
を介してgitwebの構築中に設定できます。デフォルトでは、この変数は設定されていません。つまり、プロジェクトリストページから非表示になっている(たとえば、
`$projects_listファイルにリストされいない)リポジトリに直接のアクセスができます。
@end table

@noindent

@heading Finding files

以下の構成変数は、ファイルの場所をgitwebに指示します。これらの変数の値は、ファイルシステム上のパスです。

@table @asis

@item  $GIT 
使用するコアgit実行可能ファイル。デフォルトでは @samp{$GIT_BINDIR/git} に設定されており、これはデフォルトで
@samp{$(bindir)/git} に設定されています。バイナリパッケージからインストールされたGitを使用する場合は、通常、これを
@samp{/usr/bin/git} に設定する必要があります。Webサーバーに適切なPATHが通っている場合、これは単に @samp{git} になる可能性があります。
セキュリティの観点から、gitバイナリへの絶対パスを使用することをお勧めします。複数のGitバージョンがインストールされている場合は、gitバイナリへの絶対パスを使用して、使用するバージョンを選択できます。gitwebが機能するには、(正しく)設定する必要があります。

@item  $mimetypes_file 
@samp{/etc/mime.types} を試す前に、(ファイル名拡張子に基づいて)MIMEタイプを推測するために使用するファイル。 @strong{NOTE}
このパスは、相対的である場合、CGIスクリプトではなく、現在のGitリポジトリに相対的であると見なされます。 設定されていない場合、
@samp{/etc/mime.types} のみが使用されます(@samp{/etc/mime.types} がファイルシステムに存在する場合)。
mimetypesファイルが見つからない場合、ファイルの拡張子に基づくmimetypeの推測は無効になります。デフォルトでは設定されていません。

@item  $highlight_bin 
使用するhighlight実行可能ファイルのパス(パラメーターと出力に関して仮定してあるため、 @uref{http://www.andre-simon.de,http://www.andre-simon.de}
からのものである必要があります)。デフォルトでは @samp{highlight}
に設定されています。WebサーバーのPATHが通ったところにインストールされていない場合は、highlight実行可能ファイルへのフルパスを設定します。gitwebが実際に構文の強調表示(syntax
highlighting)を使用するには、 @samp{highlight} 機能を設定する必要があることに注意してください。

@strong{注意} : ファイルを強調表示するには、その構文タイプを検出し、
その構文を @samp{highlight} でサポートする必要があります。
デフォルトの構文検出は最小限であり、
デフォルトで検出されない多くのサポートされている構文タイプがあります。
構文検出を追加するには、3つのオプションがあります。
1番目と2番目の優先順位は @samp{%highlight_basename} と @samp{%highlight_ext} で、
これらはベース名(完全なファイル名、たとえば @samp{Makefile})と拡張子(たとえば @samp{sh})に基づいて検出します。
これらのハッシュのキーはそれぞれベース名と拡張子であり、
指定されたキーの値は、@samp{--syntax<syntax>} を介して @samp{highlight} に渡される構文の名前です。
最後の優先順位は、
ファイルの最初の行に基づいて言語を検出するための @samp{Shebang} 正規表現の @samp{highlight} 構成です
(たとえば、行 @samp{#!/bin/bash} とマッチします)。
highlightのドキュメントとデフォルトの設定を参照してください。
詳細については、 @samp{/etc/highlight/filetypes.conf} を参照してください。

たとえば、ホストしているリポジトリがPHPファイルに @samp{phtml}
拡張子を使用していて、それらのファイルに正しい構文を強調表示したい場合は、gitweb構成に以下を追加できます:

@example
our %highlight_ext;
$highlight_ext@{'phtml'@} = 'php';
@end example

@end table

@noindent

@heading Links and their targets

以下で説明する構成変数は、いくつかのgitwebリンクを構成します。ターゲットと外観(テキストまたは画像)、およびページの前提条件(スタイルシート、favicon、画像、スクリプト)の場所です。
通常、 @samp{@@stylesheets} 変数を除いて、デフォルト値のままになります。

@table @asis

@item  @samp{@@stylesheets} 
スタイルシートのURIのリスト(ページのベースURIからの相対パス)。複数のスタイルシートを指定する場合があります。たとえば、 @samp{gitweb.css}
をベースとして使用し、サイト固有の変更を別のスタイルシートに追加して、gitwebのアップグレードを容易にします。 たとえば、あなたが @samp{site}
スタイルシートを追加するには以下のようにします

@example
push @@stylesheets, "gitweb-site.css";
@end example


これをgitweb構成ファイルに追加します。相対パスであるこれらの値は、gitwebのベースURIを基準にしています。

このリストには、gitwebの標準スタイルシートのURIが含まれている必要があります。gitwebスタイルシートのデフォルトURIは、ビルド時に
@samp{GITWEB_CSS} makefile変数を使用して設定できます。デフォルト値は @samp{static/gitweb.css} (または、
@samp{CSSMIN} 変数が定義されている場合、つまり、ビルド中にCSS minifierが使用されている場合は
@samp{static/gitweb.min.css} ) です。

@strong{注意}: 古いgitwebで使用されていた従来の @samp{$stylesheet} 構成変数もあります。
`$stylesheet`変数が定義されている場合、
この変数によって指定されたCSSスタイルシートのみがgitwebによって使用されます。

@item  $logo 
Webサーバー上で @samp{git-logo.png}
を配置する場所を指定します。または、72x27サイズの汎用ロゴのURIを指します。この画像は、各gitwebページの右上隅に表示され、Atomフィードのロゴとして使用されます。
gitwebのベースURIからの相対パスです。 @samp{GITWEB_LOGO} 変数を使用してgitwebを構築するときに調整できます。デフォルトでは
@samp{static/git-logo.png} に設定されています。

@item  $favicon 
Webサーバー上で @samp{git-favicon.png} を配置する場所を指します。または、 @samp{image/png}
タイプとして提供されるfaviconの汎用URIを指します。favicon(Webサイトアイコン)をサポートするWebブラウザーは、favicon(Webサイトアイコン)をブラウザーのURLバーに表示し、ブックマークのサイト名の横に表示する場合があります。gitwebのベースURIからの相対パスです。
@samp{GITWEB_FAVICON} 変数を使用してビルド時に調整できます。 デフォルトでは @samp{static/git-favicon.png}
に設定されています。

@item  $javascript 
Webサーバー上で @samp{gitweb.js}
を配置する場所を指します。より一般的には、gitwebで使用されるJavaScriptコードのURIを指します。
gitwebのベースURIを基準にしています。 @samp{GITWEB_JS} ビルド時構成変数を使用してビルド時に設定できます。

デフォルト値は、 @samp{static/gitweb.js} または @samp{JSMIN} ビルド変数が定義されている場合、つまりビルド時にJavaScript
minifierが使用されている場合は @samp{static/gitweb.min.js} です。 @strong{注意}
この単一のファイルは、複数の個別のJavaScriptモジュール達から生成されます。

@item  $home_link 
すべてのページの上部にあるホームリンク(home link)のターゲット(パンくずリスト(breadcrumbs)ビューの最初の部分)。
デフォルトでは、現在のページの絶対URIに設定されます(@samp{$my_uri} 変数の値、または @samp{$my_uri} が未定義または空の文字列の場合は
@samp{/} に設定されます)。

@item  $home_link_str 
すべてのページの上部にある「home link」のラベルで、@samp{$home_link}
に誘導します(通常、プロジェクトリストを含むメインのgitwebページです)。 @samp{<home link> / <project> / <action>}
は、gitwebの「パンくずリスト」の最初のコンポーネントとして使用されます。 @samp{GITWEB_HOME_LINK_STR}
変数を使用してビルド時に設定できます。このリンクからプロジェクトのリストが表示されるため、デフォルトではラベルは "projects"
に設定されています。もう1つの一般的な選択肢は、サイトの名前に設定することです。生のHTMLとして扱われるため、信頼できないソースからは設定しないでください。

@item  @samp{@@extra_breadcrumbs} 
ホームリンクの前のパンくずリスト(breadcrumb
trail)の先頭に、gitwebサーバーをホストする組織や部門など、gitwebプロジェクトリストの論理的に「上位」にあたるページに追加される追加のリンク。リストの各要素は配列への参照であり、要素0はリンクテキスト(@samp{$home_link_str}
相当)で、要素1はターゲットURL(@samp{$home_link} 相当)です。

たとえば、以下の設定では、 @samp{home/dev/projects/ ...} のようなパンくずリストが生成されます。ここで、 @samp{projects}
はホームリンクです。

@example
    our @@extra_breadcrumbs = (
      [ 'home' => 'https://www.example.org/' ],
      [ 'dev'  => 'https://dev.example.org/' ],
    );
@end example


@item  $logo_url 
@itemx  $logo_label 
Gitロゴリンク(または、別のロゴ画像を使用することを選択した場合はサイトのロゴ)の、URIとラベル(タイトル)。デフォルトでは、これらは両方ともGitホームページ
@uref{https://git-scm.com,https://git-scm.com} を参照します。 過去には、 @uref{https://www.kernel.org,https://www.kernel.org}
のGitのドキュメントを参照していました。
@end table

@noindent

@heading Changing gitweb’s look

あなたは、以下で説明する変数を使用して、gitwebによって生成されたページの外観を調整できます。サイト名を変更したり、すべてのページに共通のヘッダーとフッターを追加したり、メインページ(プロジェクトリストページ)に、このgitwebインストールの説明を追加したりできます。

@table @asis

@item  $site_name 
ページタイトルに表示される、サイト名または組織名です。 ブックマークなどを分かりやすくするために、何か説明的なものに設定してください。
この変数が設定されていない場合、あるいは設定されていても、gitweb は @samp{SERVER_NAME} CGI環境変数の値を使用して、サイト名を
"$SERVER_NAME Git" に設定し、この環境変数が設定されていない場合(例: gitweb
がスタンドアローンのスクリプトとして起動している場合など)は "Untitled Git" に設定します。

ビルド時に @samp{GITWEB_SITENAME} を使用して設定できます。 デフォルトでは設定されていません。

@item  $site_html_head_string 
各ページの<head>セクションに含まれるHTMLスニペット。ビルド時に @samp{GITWEB_SITE_HTML_HEAD_STRING}
を使用して設定できます。 デフォルト値はありません。

@item  $site_header 
各ページの先頭にインクルードされるHTMLを記述したファイル名。 @samp{gitweb.cgi}  スクリプトを含むディレクトリからの相対パスです。
ビルド時に @samp{GITWEB_SITE_HEADER} を使用して設定することができる。デフォルト値はありません。

@item  $site_footer 
各ページの下部にインクルードされるHTMLを含むファイルの名前。 @samp{gitweb.cgi} スクリプトを含むディレクトリに相対的です。ビルド時に
@samp{GITWEB_SITE_FOOTER} を使用して設定できます。 デフォルト値はありません。

@item  $home_text 
存在すればgitwebプロジェクトの概要ページ(@samp{projects_list} ビュー)にインクルードされるHTMLファイルの名前。
@samp{gitweb.cgi} スクリプトを含むディレクトリに相対的です。デフォルト値は、 @samp{GITWEB_HOMETEXT}
変数を使用してビルド時に調整できます。デフォルトでは @samp{indextext.html} に設定されています。

@item  $projects_list_description_width 
プロジェクトリストの「説明」列の幅(文字数)。長い説明は切り捨てられます(単語の境界で切り取ろうと試みます)。完全な説明は、(通常はマウスオーバーで表示される)title属性にあります。デフォルトは25ですが、長いプロジェクトの説明を使用する場合は小さすぎる可能性があります。

@item  $default_projects_order 
プロジェクトリストページでのプロジェクトの順序のデフォルト値。これは、プロジェクトリストを明示的に並べ替えない場合に使用される順序を意味します(URLに
@samp{o} CGIクエリパラメータがない場合)。 有効な値は、「none」(並べ替えなし)、「project」(プロジェクトはプロジェクト名、つまり「$
projectroot」からのリポジトリへのパス)、「descr」(プロジェクトの説明)、「owner」、「age」(最新のコミットの日付) です。

デフォルト値は @samp{project} です。不明な値は、ソートされていないことを意味します。
@end table

@noindent

@heading Changing gitweb’s behavior

これらの構成変数は、gitwebの「内部」動作を制御します。

@table @asis

@item  $default_blob_plain_mimetype 
mimetypeチェックで他のタイプが生成されない場合の、blob_plain (raw)ビューのデフォルトのmimetype。デフォルトでは
"text/plain" です。 Gitwebは、 @samp{$mimetypes_file} (設定されていてfileが存在する場合)と
@samp{/etc/mime.types} ファイルを使用して、ファイル名の拡張子に基づいて表示するファイルのmimetypeを推測します。(
mime.types(5) manpage を参照してください。gitwebではファイル名拡張子ルールのみがサポートされています。)

@item  $default_text_plain_charset 
テキストファイルのデフォルトの文字セット。これが設定されていない場合は、Webサーバー構成が使用されます。デフォルトでは設定されていません(unset)。

@item  $fallback_encoding 
行にUTF-8以外の文字が含まれている場合、Gitwebはこの文字セットを想定します。フォールバックデコードはエラーチェックなしで使用されるため、「utf-8」にすることもできます。値は有効なエンコーディングである必要があります。
リストについては、 Encoding::Supported (3pm) の manpage
を参照してください。デフォルトは「latin1」、別名「iso-8859-1」です。

@item  @samp{@@diff_opts} 
git-diffおよびgit-diff-treeの検出オプションの名前を変更します。デフォルトは ('-M') です。コピーも検出するには
('-C') または ('-C', '-C'）に設定するか、名前変更を検出したくない場合は () 、つまり空のリストに設定します。

@strong{注意} 名前の変更、特にコピーの検出は、CPUにかなりの負荷がかかる可能性があります。
また、Git以外のツールでは、
上記のオプションで生成されたパッチで問題が発生する可能性があることにも注意してください。
特に、ファイルのコピー ('-C') またはcriss-cross名前変更 ('-B') が含まれる場合はそうです。
@end table

@noindent

@heading Some optional features and policies

ほとんどの機能は @samp{%feature}
ハッシュを介して構成されます。ただし、追加のgitweb機能の一部は、以下で説明する変数を使用してオンにして構成できます。gitwebの外観を制御する構成変数の傍にあるこのリストには、gitwebの管理側を構成する変数が含まれています。(例:
クロスサイトスクリプティングの防止。ご存知のとおり、これは副作用として「要約」ページの外観や負荷制限に影響します)

@table @asis

@item  @samp{@@git_base_url_list} 
GitベースURLのリスト。これらのURL群は、プロジェクトの概要ページに表示される、プロジェクトを取得する場所を説明するURLを生成するために使用されます。このリストの各要素の完全なフェッチURLは
@samp{$git_base_url/$project} です。 複数のベースURLを設定できます(たとえば、1つは @samp{git://} プロトコル用、もう1つは
@samp{http://} プロトコル用)。

注意: リポジトリごとの構成は、 @samp{$GIT_DIR/cloneurl} ファイルで設定することも、プロジェクト構成の、複数値の
@samp{gitweb.url} 構成変数の値として設定することもできます。リポジトリごとの構成は、 @samp{@@git_base_url_list}
要素とプロジェクト名で構成される値よりも優先されます。

あなたは @samp{GITWEB_BASE_URL} ビルド時構成変数を設定することにより、ビルド時に単一の値(1つの entry/item
だけを持つリスト)を設定できます。デフォルトでは、 ()
、つまり空のリストに設定されています。これは、gitwebがプロジェクト名から(フェッチのための)プロジェクトURLを作成しようとしないことを意味します。

@item  $projects_list_group_categories 
プロジェクトリストページでカテゴリ別にプロジェクトをグループ化できるようにするかどうか。プロジェクトのカテゴリは、各リポジトリの構成の
@samp{$GIT_DIR/category} ファイル、または @samp{gitweb.category}
変数によって決定されます。デフォルトでは無効になっています(0に設定)。

@item  $project_list_default_category 
何も指定されていないプロジェクトのデフォルトカテゴリ。
これが空の文字列に設定されている場合、そのようなプロジェクトは未分類のままで、分類されたプロジェクトの上に表示されます。
プロジェクトカテゴリが有効になっている場合、つまり @samp{$projects_list_group_categories}
がtrueの場合にのみ使用されます。デフォルトでは "" (空文字列)に設定されています。

@item  $prevent_xss 
trueの場合、リポジトリ内のコンテンツがクロスサイトスクリプティング(XSS)攻撃を開始するのを防ぐために、一部のgitweb機能が無効になっています。リポジトリのコンテンツを信頼できない場合は、これをtrueに設定します。デフォルトではFalse(0に設定)。

@item  $maxload 
gitwebクエリに応答する最大負荷を設定するために使用されます。サーバーの負荷がこの値を超えると、gitwebは「503 Service
Unavailable」エラーを返します。 gitwebがその値を判別できない場合、サーバーの負荷は0と見なされます。 現在、Linuxでのみ動作し、
@samp{/proc/loadavg} を使用します。 負荷は、システム上でアクティブなタスクの数 — 実際に実行されているプロセス —         が最後の1分間に平均化されたものです。

この機能をオフにするには、 @samp{$maxload} を未定義の値(undef)に設定します。デフォルト値は300です。

@item  $omit_age_column 
trueの場合、プロジェクトリストページの最新のコミットの日付の列を省略します。リポジトリごとに少しのI/Oとフォークを節約できます。

@item  $omit_owner 
trueの場合、リポジトリ所有者に関する情報を表示できなくなります。

@item  $per_request_config 
これがコードへの参照に設定されている場合、リクエストごとに1回実行されます。この方法で、セッションごとに構成の一部を変更設定できます。たとえば、gitweb構成ファイルで以下のコードを使用する場合があります

@example
our $per_request_config = sub @{
        $ENV@{GL_USER@} = $cgi->remote_user || "gitweb";
@};
@end example


@samp{$per_request_config}
がコードへの参照でない場合、ブール値として解釈されます。trueの場合、gitwebはリクエストごとに1回設定ファイルを処理し、falseの場合、gitwebは実行されるたびに1回だけ設定ファイルを処理します。デフォルトではtrueです(1に設定)。

@strong{注意}:  @samp{$my_url} と @samp{$my_uri} と  @samp{$base_url} は、すべてのリクエストの発生前にデフォルト値で上書きされるため、
変更する場合は、必ずこの変数をtrueに設定するか、
必要な変更を行うコードへの参照を設定してください。

この変数は、mod_perl、FastCGI、Plackupなどの単一のgitwebインスタンスを使用して複数のリクエストを処理する永続的なWeb環境を使用する場合にのみ重要です。
@end table

@noindent

@heading Other variables

通常、あなたは以下で説明する構成変数を変更(調整)する必要はありません。 それらは正しい値にするために、gitwebが自動で設定する必要があります。

@table @asis

@item  $version 
Gitwebバージョン。gitweb.perlからgitweb.cgiを作成するときに自動的に設定されます。たとえば、あなたが変更したgitwebを実行している場合は、変更することをお勧めします。

@example
our $version .= " with caching";
@end example


あなたがキャッシュのサポートがある、変更バージョンのgitwebを実行する場合。この変数は純粋に情報提供用であり、たとえばHTMLヘッダーの「generator」メタヘッダー内で使われます。

@item  $my_url 
@itemx  $my_uri 
gitwebスクリプトの完全なURLと絶対URL。以前のバージョンのgitwebでは、これらの変数を設定する必要があるかもしれませんが、今では設定する必要はありません。
まだ設定する必要がある場合は、 @samp{$per_request_config} を参照してください。

@item  $base_url 
gitwebによって生成されたページ内の相対URLのベースURL(例えば、相対URLの場合は @emph{$logo} 、 @emph{$favicon} 、
@emph{@@stylesheets})が必要で、空でないPATH_INFOを持つURLに対してのみ @emph{<base href="$base_url">}
が必要でした。通常、gitwebはその値を正しく設定し、この変数に $my_uri や "/"
などを設定する必要はありません。あなたがとにかくそれをオーバーライドする必要がある場合は、 @emph{$per_request_config}
を参照してください。
@end table

@noindent

@chapheading CONFIGURING GITWEB FEATURES

多くのgitweb機能は、 @samp{%feature}
ハッシュ(連想配列)を使用して有効化(または無効化)および構成できます。gitweb機能の名前は、このハッシュのキーです。

各 @samp{％feature} ハッシュ(連想配列)要素はハッシュへの参照であり、以下の構造を持っています:

@example
"<feature_name>" => @{
        "sub" => <feature-sub (subroutine)>,
        "override" => <allow-override (boolean)>,
        "default" => [ <options>... ]
@},
@end example


一部の機能は、プロジェクトごとにオーバーライドできません。 これらの機能の場合、適切な @samp{%feature}
ハッシュ要素の構造はより単純な形式になります:

@example
"<feature_name>" => @{
        "override" => 0,
        "default" => [ <options>... ]
@},
@end example


上記にはご覧のとおり、'sub' 要素がありません。

機能構成の各部分の意味を以下に説明します:

@table @asis

@item  default 
機能パラメータ(存在する場合)のリスト(配列への参照)。特定の機能を切り替える(有効または無効にする)ためにも使用されます。

注意: 機能が構成パラメーターを受け入れない場合でも、現在は常に配列への参照であり、'default'
はオンまたはオフにするためにのみ使用されることに注意してください。 このような場合は、この要素を @samp{[1]} に設定して機能をオンにし、 @samp{[0]}
に設定して機能を解除します。「Examples例」セクションの「blame」機能に関する一節も参照してください。

パラメータを受け入れる(設定可能な)機能を無効にするには、この要素を空のリスト、つまり @samp{[]} に設定する必要があります。

@item  override 
このフィールドにtrue値がある場合、指定の機能はオーバーライド可能です。つまり、リポジトリごとに構成(または 有効/無効 化)できます。

通常、指定の「<feature>」は、リポジトリごとのGit構成ファイルの @samp{gitweb.<feature>} 構成変数を介して構成できます。

@strong{注意} デフォルトではオーバーライド可能な機能はありません。

@item  sub 
実装の内部詳細。重要なのは、このフィールドが存在しない場合、特定の機能のリポジトリごとのオーバーライドはサポートされないということです。

あなたはgitweb構成ファイルでこれを変更する必要はありません。
@end table

@noindent

@heading Features in %feature

@samp{%feature}
ハッシュを介して構成可能なgitweb機能を以下に示します。これは完全なリストであるべきですが、最終的に信頼できる完全なリストはgitweb.cgiソースコードにあり、機能はそのコメントで説明されています。

@table @asis

@item  blame 
「blame」および「blame_incremental」ブロブビューを有効にし、各行にそれを変更した最後のコミットを表示します。
git-blame(1) を参照してください。 これはCPUに非常に負荷がかかる可能性があるため、デフォルトでは無効になっています。

この機能は、リポジトリの @samp{gitweb.blame} 構成変数(ブール値)を介してリポジトリごとに構成できます。

@item  snapshot 
「snapshot」アクションを有効にして構成します。これにより、ユーザーは、 git-archive(1)
によって生成され、そして、場合によってはさらに圧縮された、任意のツリーまたはコミットの圧縮アーカイブをダウンロードできます。大規模なプロジェクトがある場合、これにより大量のトラフィックが発生する可能性があります。

'default' の値は、提供するスナップショット形式の名前のリストであり、 @samp{%known_snapshot_formats}
ハッシュで定義されています。サポートされている形式には、"tgz"、"tbz2"、"txz" (gzip/bzip2/xz
で圧縮されたtarアーカイブ)、および "zip" が含まれます。完全なリストについては、gitwebのソースを参照してください。
デフォルトでは、"tgz"のみが提供されます。

この機能は、リポジトリの @samp{gitweb.snapshot}
構成変数を介してリポジトリごとに構成できます。この変数には、書式のコンマ区切りリストが含まれるか、スナップショットを無効にする場合は @samp{none}
が含まれます。不明な値は無視されます。

@item  grep 
grep検索を有効にします。これにより、現在選択されているツリー(ディレクトリ)内で指定の文字列を含むファイルが一覧表示されます。
git-grep(1) を参照してください。 もちろん、これは潜在的にCPUを集中的に使用する可能性があります。
デフォルトで有効になっています。

この機能は、リポジトリの @samp{gitweb.grep} 構成変数(ブール値)を介してリポジトリごとに構成できます。

@item  pickaxe 
いわゆるpickaxe検索を有効にします。これにより、ファイル内の特定の文字列を導入または削除したコミットが一覧表示されます。
これは実用的で、「blame」アクションの非常に高速な代替手段ですが、それでもCPUに負荷がかかる可能性があります。 デフォルトで有効になっています。

pickaxe検索については、 git-log(1) で説明されています(詳細については gitdiffcore(7)
のpickaxeエントリの @samp{-S<string>} オプションを参照してください)。

この機能は、リポジトリの @samp{gitweb.pickaxe} 構成変数(ブール値)を設定することにより、リポジトリごとに構成できます。

@item  show-sizes 
@samp{ls -l} と同様に、別の列の「ツリー」ビューにブロブ(通常のファイル)のサイズを表示できるようにします。
git-ls-tree(1) のmanpageにある @samp{-l}
オプションの説明を参照してください。これにはちょびっとI/Oコストがかかります。デフォルトで有効になっています。

この機能は、リポジトリの @samp{gitweb.showSizes} 構成変数(ブール値)を介してリポジトリごとに構成できます。

@item  patches 
コミットのリストを電子メール(プレーンテキスト)出力形式で表示する「パッチ」ビューを有効にして構成します。
git-format-patch(1) も参照してください。 この値は、「パッチ」ビューで生成されたパッチセット内のパッチの最大数です。
@emph{default}
フィールドを、パッチビューを無効にするための単一の項目を含むリストまたは空のリストに設定するか、制限を削除するために単一の負の数を含むリストに設定します。デフォルト値は16です。

この機能は、リポジトリの @samp{gitweb.patches} 構成変数(整数)を介してリポジトリごとに構成できます。

@item  avatar 
アバター(avatar)のサポート。この機能を有効にすると、「shortlog」や「commit」などのビューに、各コミッターと作成者の電子メールに関連付けられたアバターが表示されます。

現在利用可能なプロバイダーは、 gravatar と picon です。
一度に選択できるプロバイダーは1つだけです(「default」は要素1つだけのリストです)。不明なプロバイダーが指定されている場合、この機能は無効になります。
@strong{注意} 一部のプロバイダーでは、追加のPerlパッケージをインストールする必要がある場合があります。 詳細については、
@samp{gitweb/INSTALL} を参照してください。

この機能は、リポジトリの @samp{gitweb.avatar} 構成変数を介してリポジトリごとに構成できます。

アイコンとアバターのピクセルサイズを含む @samp{%avatar_size} も参照してください( "default" は "log" や
"shortlog" などの1行モノに使用され、 "double" は "commit"、"commitdiff"、"tag"
などの2行モノに使用されます)。デフォルトのフォントサイズまたは行の高さが変更された場合は、これらの値を変更すること(たとえば、
@samp{@@stylesheets} にCSSスタイルシートを追加するなど)が適切な場合があります。

@item  email-privacy 
生成されたHTMLなどのコンテンツの電子メールアドレスを改訂します。これにより、Gitログの作者/コミッターおよびコメントセクションから取得された電子メールアドレスを不明瞭にします。
これは、アドレスを収集して悪用するWebクローラーを妨害することを目的としています。このようなクローラーはrobots.txtを尊重しない場合があります。
注意:
ユーザーとユーザーツールもアドレスが編集されたものとして表示されることに注意してください。Gitwebがワークフローの最後のステップではない場合、後続のステップは、受け取った情報が編集されているために誤動作する可能性があります。デフォルトでは無効になっています。

@item  highlight 
「ブロブ」ビューでサーバー側構文ハイライトサポートします。@samp{$height_bin}
プログラムが使用可能である必要があるため(上記の「構成変数」セクションの、この変数の説明を参照)、デフォルトで無効になっています。

この機能は、リポジトリの @samp{gitweb.highlight} 構成変数(ブール値)を介してリポジトリごとに構成できます。

@item  remote_heads 
「ヘッド」リストにリモートヘッド(リモート追跡ブランチ)を表示できるようにします。ほとんどの場合、リモート追跡ブランチのリストは不要な内部プライベート詳細であるため、この機能はデフォルトで無効になっています。
git-instaweb(1) は、通常、ローカルリポジトリを参照するために使用され、この機能を有効にして使用します。

この機能は、リポジトリの @samp{gitweb.remote_heads} 構成変数(ブール値)を介してリポジトリごとに構成できます。
@end table

以下の、残りの機能は、プロジェクトごとにオーバーライドすることはできません。

@table @asis

@item  search 
テキスト検索を有効にします。これにより、作者(author)または、コミッターまたは、コミットテキストが特定の文字列に一致するコミットが一覧表示されます。
git-log(1) のmanpage にある @samp{--author} と @samp{--committer} と @samp{--grep}
オプションの説明を参照してください。デフォルトで有効になっています。

プロジェクト固有のオーバーライドはサポートされていません。

@item  forks 
この機能が有効になっている場合、gitwebは、プロジェクトルート(ベース名)のサブディレクトリ内のプロジェクトを既存のプロジェクトのフォークと見なします。
@samp{$projname.git} プロジェクトごとに、 @samp{$projname/}
ディレクトリ内のプロジェクトとそのサブディレクトリはメインプロジェクトリストに表示されません。代わりに、  @samp{$projname} の横に @samp{+}
マークが表示されます。これは、すべてのフォーク(@samp{$projname/} サブディレクトリ内のすべてのプロジェクト)を一覧表示する "forks"
ビューにリンクしています。さらに、プロジェクトの「fork」ビューは、プロジェクトの概要ページからリンクされています。

プロジェクトリストがファイルから取得された場合( @samp{$projects_list}
はファイルを指している)、フォーク(fork)は、そのファイルのメインプロジェクトの後にリストされている場合にのみ認識されます。

プロジェクト固有のオーバーライドはサポートされていません。

@item  actions 
すべてのプロジェクトページのアクションバーへのカスタムリンクを挿入します。これにより、あなたはgitwebに統合されているサードパーティのスクリプトにリンクできます。

「default」値は、 @samp{("<label>", "<link>", "<position>")}
という3要素組形式の、リストで構成されます。ここで、 "position" は、リンクを挿入するラベルです。  "link" はフォーマット文字列で、
@samp{%n} はプロジェクト名に展開され、 @samp{%f} はファイルシステム内のプロジェクトパス(つまり
"$projectroot/$project")に展開され、 @samp{%h} は現在のハッシュ(@samp{h} gitwebパラメーター)、 @samp{%b}
は現在のハッシュベース(@samp{hb} 'gitwebパラメーター) です。@samp{%%} は @samp{%} に展開されます。

たとえば、このページが作成された時点で、 @uref{http://repo.or.cz,http://repo.or.cz}
Gitホスティングサイトは、グラフィカルログを有効にするために次のように設定しました(サードパーティツール git-browser を使用):

@example
$feature@{'actions'@}@{'default'@} =
        [ ('graphiclog', '/git-browser/by-commit.html?r=%n', 'summary')];
@end example


これにより、「summary」リンクの後に「graphiclog」というタイトルのリンクが追加され、クエリパラメータとして @samp{r=<project>}
を渡して、 @samp{git-browser} スクリプトへ誘導します。

プロジェクト固有のオーバーライドはサポートされていません。

@item  timed 
ページフッター(ページの下部)に各ページを生成して表示するのにかかった時間とGitコマンドの数を表示できるようにします。たとえば、フッターには次のように含まれます。「This
page took 6.53325 seconds and 13 Git commands to
generate.」(このページの生成には6.53325秒と13のGitコマンドが必要でした。)。デフォルトでは無効になっています。

プロジェクト固有のオーバーライドはサポートされていません。

@item  javascript-timezone 
JavaScriptを介してgitweb出力の日付の共通タイムゾーンを変更する機能を有効にして構成します。
gitweb出力の日付には、「commit」ビューと「commitdiff」ビューと「log」ビューでのauthordateとcommitterdate、および「tag」ビューでのtaggerdateが含まれます。デフォルトで有効になっています。

値は、3つの値のリストです。デフォルトのタイムゾーン(default time
zone)(クライアントが他のタイムゾーンを選択してCookieに保存していない場合)と、選択したタイムゾーンを保存するCookieの名前と、操作の日付をマークアップするために使用されるCSSクラスです。この機能をオフにする場合は、「default」を空のリストに設定します。つまり
@samp{[]} 。

通常のgitweb構成ファイルでは、最初の、(default)タイムゾーンのみを変更し、他の要素はデフォルト値のままにします:

@example
$feature@{'javascript-timezone'@}@{'default'@}[0] = "utc";
@end example


ここに示されている構成例は、下位互換性と上位互換性が保証されています。

タイムゾーンの値は、
"local"(ブラウザが使用するローカルタイムゾーンの場合)、"utc"(JavaScriptまたは、この機能が無効になっている場合にgitwebが使用するもの)、または
"@samp{0200" のような "}/-HHMM" 形式の数値のタイムゾーンにすることができます。

プロジェクト固有のオーバーライドはサポートされていません。

@item  extra-branch-refs 
"refs" の下にある、ブランチのrefとして使用される追加ディレクトリのリスト。たとえば、gerrit のセットアップで、refs/heads/
以下のすべてのブランチが公式のもので、push-after-review のもの、そして refs/sandbox/, refs/wip,
refs/other 以下のブランチはより広いパーミッションを持つユーザーのものである場合、あなたはこの変数を以下のように設定したいと思うことでしょう。

@example
$feature@{'extra-branch-refs'@}@{'default'@} =
        ['sandbox', 'wip', 'other'];
@end example


この機能は、 $feature@{@emph{extra-branch-refs}@}@{@emph{override}@} をtrueに設定した後、リポジトリの
@samp{gitweb.extraBranchRefs}
構成変数を介して、リポジトリごとに構成できます。これには、スペースで区切られたrefのリストが含まれます。 例:

@example
[gitweb]
        extraBranchRefs = sandbox wip other
@end example


gitweb.extraBranchRefsは実際には複数値の構成変数であるため、以下の例も正しくて、結果は上記のスニペットと同じです:

@example
[gitweb]
        extraBranchRefs = sandbox
        extraBranchRefs = wip other
@end example


「gitcheck-ref-format」の精査に合格しないrefを指定するとエラーになります。 重複した値はフィルタリングされます。
@end table

@noindent

@chapheading EXAMPLES

blameと、pickaxe検索と、スナップショットのサポート("tar.gz" と "zip"
のスナップショットを許可)を有効にし、個々のプロジェクトでそれらをオフにできるようにするには、GITWEB_CONFIGファイルに以下のように入力します:

@example
$feature@{'blame'@}@{'default'@} = [1];
$feature@{'blame'@}@{'override'@} = 1;

$feature@{'pickaxe'@}@{'default'@} = [1];
$feature@{'pickaxe'@}@{'override'@} = 1;

$feature@{'snapshot'@}@{'default'@} = ['zip', 'tgz'];
$feature@{'snapshot'@}@{'override'@} = 1;
@end example


スナップショット機能のオーバーライドを許可する場合は、グローバルに無効にするスナップショット形式を指定できます。必要なコマンドラインオプション(圧縮レベルの設定など)を追加することもできます。
たとえば、gitweb構成ファイルに以下の行を追加することで、Zip圧縮スナップショットを無効にし、
gzip(1)をレベル6で実行するように設定できます:

@example
$known_snapshot_formats@{'zip'@}@{'disabled'@} = 1;
$known_snapshot_formats@{'tgz'@}@{'compressor'@} = ['gzip','-6'];
@end example

@noindent

@chapheading BUGS

フォールバック構成ファイル(@samp{/etc/gitweb.conf})とその場所をオーバーライドする環境変数(@emph{GITWEB_CONFIG_SYSTEM})に、「fallback」の役割を反映した名前が付いていると、デバッグが容易になります。
現在の名前は、作業セットアップを壊さないように保持されます。

@noindent

@chapheading ENVIRONMENT

インスタンスごとおよびシステム全体の構成ファイルの場所は、以下の環境変数を使用してオーバーライドできます:

@table @asis

@item  GITWEB_CONFIG 
インスタンスごとの構成ファイルの場所を設定します。

@item  GITWEB_CONFIG_SYSTEM 
フォールバックするシステム全体の構成ファイルの場所を設定します。 このファイルは、インスタンスごとのファイルが存在しない場合にのみ読み取られます。

@item  GITWEB_CONFIG_COMMON 
共通のシステム全体の構成ファイルの場所を設定します。
@end table

@noindent

@chapheading FILES

@table @asis

@item  @samp{gitweb_config.perl} 
これは、インスタンスごとの構成ファイルのデフォルト名です。このファイルの形式は前述のとおりです。

@item  @samp{/etc/gitweb.conf} 
これは、フォールバックするシステム全体の構成ファイルのデフォルト名です。このファイルは、インスタンスごとの構成変数が見つからない場合にのみ使用されます。

@item  @samp{/etc/gitweb-common.conf} 
これは、共通システム全体の構成ファイルのデフォルト名です。
@end table

@noindent

@chapheading SEE ALSO

gitweb(1), git-instaweb(1)

@emph{gitweb/README}, @emph{gitweb/INSTALL}

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitweb,,,Top
@chapheading Name

gitweb — Git Webインターフェイス(GitリポジトリのためのWebフロントエンド)

@noindent

@chapheading Synopsis

gitwebの使用を開始するには、Gitリポジトリから git-instaweb(1)
を実行します。これにより、Webサーバーが構成および起動され、gitwebを指すWebブラウザーが実行されます。

@noindent

@chapheading DESCRIPTION

Gitwebは、GitリポジトリへのWebインターフェイスを提供します。その機能は以下のとおりです:

@itemize 

@item
共通のルートを持つ複数のGitリポジトリを表示します。

@item
リポジトリのすべてのリビジョンをブラウズします。

@item
リポジトリ内の任意のリビジョンのファイルの内容を表示します。

@item
ブランチのリビジョンログ、ファイルとディレクトリの履歴を表示して、何がいつ、誰によって変更されたかを表示します。

@item
(有効になっている場合)ファイルの blame/annotation の詳細を表示します。

@item
任意のブランチに対して、コミットのRSSおよびAtomフィードを生成します。フィードは、最新のWebブラウザーで自動検出可能です。

@item
リビジョンで変更されたすべてのものを表示し、一度に1つずつリビジョンをステップ表示して、リポジトリの履歴を表示します。

@item
指定した検索語にマッチするコミットメッセージのコミットを検索します。
@end itemize

gitweb自体を使用してブラウズできるgitwebソースコードについては、
@uref{http://repo.or.cz/w/git.git/tree/HEAD:/gitweb/,http://repo.or.cz/w/git.git/tree/HEAD:/gitweb/} を参照してください。

@noindent

@chapheading CONFIGURATION

gitwebの動作のさまざまな側面は、構成ファイル @samp{gitweb_config.perl} または @samp{/etc/gitweb.conf}
を介して制御できます。詳細については gitweb.conf(5) を参照してください。

@noindent

@heading Repositories

Gitwebは、1つ以上のGitリポジトリからの情報を表示できます。
これらのリポジトリはすべてローカルファイルシステム上にあり、共通のリポジトリルートを共有する必要があります。つまり、すべてが単一の親リポジトリの下にある必要があります(ただし、「Advanced
web server setup」セクションの「Webserver configuration with multiple projects'
root」(複数のプロジェクトのルートを使用したWebサーバーの構成)サブセクションも参照してください)。

@example
our $projectroot = '/path/to/parent/directory';
@end example


@samp{$projectroot} のデフォルト値は @samp{/pub/git} です。 gitwebのビルド中に、@samp{GITWEB_PROJECTROOT}
ビルド構成変数を介して変更できます。

デフォルトでは、 @samp{$projectroot} の下にあるすべてのGitリポジトリが表示され、gitwebで利用できます。
プロジェクトのリストは、デフォルトで @samp{$projectroot}
ディレクトリをスキャンしてGitリポジトリを探します(オブジェクトデータベースをより正確に言うと、gitwebは作業領域に関心がなく、「裸の」(bare)リポジトリを表示するのに最適です)。

gitwebのリポジトリの名前は、@samp{$projectroot} を基準にした @samp{$GIT_DIR} (そのオブジェクトデータベース)へのパスです。
したがって、リポジトリ $repoは @samp{$projectroot/$repo} にあります。

@noindent

@heading Projects list file format

$projectroot
から始まるファイルシステムをスキャンしてgitwebにリポジトリを検索させる代わりに、(いくつかの追加情報を含む)プロジェクトのリストを含むプレーンテキストファイルを指すように
@samp{$projects_list} を設定することにより、事前生成された表示可能なプロジェクトのリストを提供できます。

このファイルは以下の形式を使用します:

@itemize 

@item
1行に1つのレコード(プロジェクト/リポジトリ用)。行の継続(改行のエスケープ)はサポートされていません。

@item
先頭と末尾の空白(whitespace)は無視されます。

@item
空白(whitespace)で区切られたフィールド。 空白(whitespace)はすべてフィールド区切り文字として使用できます(Perlの
"@samp{split(" ", $line)}" ルール)。

@item
フィールドは、RFC 3986のセクション2.1(Percent-Encoding)で定義されているmodified URI
encoding、または「Query string
encoding」(@uref{https://en.wikipedia.org/wiki/Query_string#URL_encoding,https://en.wikipedia.org/wiki/Query_string#URL_encoding}
参照)を使用します。違いは次のとおりです。 そのSP（` @samp{）は `@{plus@}} としてエンコードできます(したがって、 @samp{@{plus@}}
もパーセントエンコードする必要があります)。

予約文字は次のとおりです: @samp{%} (エンコードに使用)と、 @samp{@{plus@}} (スペースのエンコードに使用可能)と
SP・TAB・LFを含むPerlで定義されているすべての空白文字(レコード内のフィールドの区切りに使用)。

@item
現在認識されているフィールドは以下のとおりです:

@table @asis

@item  <repository path> 
@samp{$projectroot} に相対的なリポジトリ GIT_DIR へのパス

@item  <repository owner> 
リポジトリの所有者、できればフルネームまたは電子メール、またはその両方として表示されます
@end table
@end itemize

あなたはgitwebから直接project_indexアクション(プロジェクトリストページの TXT
リンク)を使用して、プロジェクトリストインデックスファイルを生成できます。 以下の「Generating projects list using
gitweb」(gitwebを使用したプロジェクトリストの生成)セクションも参照してください。

内容例:

@example
foo.git       Joe+R+Hacker+<joe@@example.com>
foo/bar.git   O+W+Ner+<owner@@example.org>
@end example


デフォルトでは、このファイルはプロジェクトリストページに「表示」されるプロジェクトのみを制御します(注意:正しく認識されたGitリポジトリを指していないエントリはgitwebによって表示されないことに注意してください)。あなたはプロジェクトがプロジェクトリストページに表示されていない場合でも、gitwebURLを手動で作成することでプロジェクトを表示できます。
@samp{$strict_export} 構成変数(gitweb.conf(5)
参照)をtrueに設定すると、概要ページにも表示されるリポジトリのみを表示許可します(つまり、プロジェクトリストファイルに明示的にリストされているプロジェクトのみのアクセス)。

@noindent

@heading Generating projects list using gitweb

私達はGITWEB_CONFIGにはデフォルトのMakefile値、つまり「gitweb_config.perl」があると想定しています。
@samp{gitweb_make_index.perl} ファイルに以下を入れてください:

@example
read_config_file("gitweb_config.perl");
$projects_list = $projectroot;
@end example


次に、以下のスクリプトを作成して、GITWEB_LISTビルド構成変数(またはgitweb構成の @samp{$projects_list}
変数)に適した形式でプロジェクトのリストを取得します。

@example
#!/bin/sh

export GITWEB_CONFIG="gitweb_make_index.perl"
export GATEWAY_INTERFACE="CGI/1.1"
export HTTP_ACCEPT="*/*"
export REQUEST_METHOD="GET"
export QUERY_STRING="a=project_index"

perl -- /var/www/cgi-bin/gitweb.cgi
@end example


このスクリプトを実行し、その出力をファイルに保存します。このファイルは、プロジェクトリストファイルとして使用できます。つまり
@samp{$projects_list} にそのファイル名を設定できます。

@noindent

@heading Controlling access to Git repositories

デフォルトでは、 @samp{$projectroot} の下にあるすべてのGitリポジトリが表示され、gitwebで利用できます。
ただし、あなたはgitwebがリポジトリへのアクセスを制御する方法を構成できます。

@itemize 

@item
「Projects list file
format」のセクションで説明したように、プロジェクトリストファイルにリポジトリを選択的に含め、それを指すように @samp{$ projects_list}
gitweb構成変数を設定することにより、どのプロジェクトを「表示」するかを制御できます。 @samp{$strict_export}
を設定すると、プロジェクトリストファイルを使用して、「利用可能な」リポジトリを制御することもできます。

@item
あなたはgitweb構成ファイルの @samp{$export_ok}
変数を使用して、明示的にエクスポートされたリポジトリのみを一覧表示して表示できるようにgitwebを構成できます。
gitweb.conf(5) のmanpageを参照してください。 trueと評価された場合、gitwebは、 @samp{$export_ok}
を評価したファイル名のファイルがオブジェクトデータベースに存在する場合にのみリポジトリを表示します(つまりディレクトリに @samp{$export_ok}
を評価した値のファイル名のマジックファイルがある場合)。

たとえば、 git-daemon(1)は、デフォルトで(@samp{--export-all} オプションが使用されていない限り)、
@samp{git-daemon-export-ok} ファイルを持つリポジトリに対してのみプルを許可します。以下のように追加します

@example
our $export_ok = "git-daemon-export-ok";
@end example


こうすると、gitwebを表示し、 @samp{git://} プロトコルを介してフェッチできるリポジトリへのアクセスのみを許可します。

@item
最後に、リポジトリごとに呼び出される任意のperlサブルーチンを指定して、リポジトリをエクスポートできるかどうかを判断することができます。サブルーチンは、プロジェクト(リポジトリ)への絶対パスを唯一のパラメータ(つまり、
@samp{$projectroot/$ project} )として受け取ります。

たとえば、mod_perlを使用してスクリプトを実行し、リポジトリにバカHTTPプロトコル認証(dumb HTTP protocol
authentication)を構成している場合、以下のフックを使用して、ユーザーがファイルの読み取りを許可されている場合にのみアクセスを許可できます。

@example
$export_auth_hook = sub @{
        use Apache2::SubRequest ();
        use Apache2::Const -compile => qw(HTTP_OK);
        my $path = "$_[0]/HEAD";
        my $r    = Apache2::RequestUtil->request;
        my $sub  = $r->lookup_file($path);
        return $sub->filename eq $path
            && $sub->status == Apache2::Const::HTTP_OK;
@};
@end example

@end itemize

@noindent

@heading Per-repository gitweb configuration

gitwebに表示される個々のリポジトリを構成するには、Gitリポジトリの @samp{GIT_DIR} にファイルを作成するか、リポジトリ構成変数を設定します(
@samp{GIT_DIR/config} で。 git-config(1) 参照)。

あなたはリポジトリ内で以下のファイルを使用できます:

@table @asis

@item  README.html 
gitwebプロジェクトの「summary」ページの @samp{<div>}
ブロック要素内にインクルードされるhtmlファイル(HTMLブロック)。プロジェクトのより長い説明、リンクの提供(たとえば、プロジェクトのホームページへ)などに使用できます。これは、XSS防止がオフの場合にのみ認識されます(@samp{$prevent_xss}
はfalseです。 gitweb.conf(5)
参照)。XSS防止がオンになっているときにREADMEを安全に含める方法は、将来的には解決される可能性があります。

@item  description (または @samp{gitweb.description}) 
短いプロジェクトの(リポジトリの)1行説明(プロジェクトリストページでは @samp{$ projects_list_description_width}
に長さをつめます。デフォルトでは25文字です。 gitweb.conf(5) 参照)。プレーンテキストファイルです。
HTMLはエスケープされます。デフォルトで以下のように設定されています

@example
Unnamed repository; edit this file to name it for gitweb.
@end example


リポジトリ作成中にテンプレートから引用されます。テンプレートは通常は @samp{/usr/share/git-core/templates/}
にインストールされます。 @samp{gitweb.description} リポジトリ構成変数を使用できますが、ファイルが優先されます。

@item  category (または @samp{gitweb.category}) 
プロジェクトの単一行カテゴリ。 @samp{$projects_list_group_categories}
が有効になっている場合にプロジェクトをグループ化するために使用されます。(ファイルと構成変数が設定されていない)デフォルトでは、分類されていないプロジェクトは
@samp{$project_list_default_category} カテゴリに入れられます。 @samp{gitweb.category}
リポジトリ構成変数を使用できますが、ファイルが優先されます。

構成変数`$projects_list_group_categories` と @samp{$project_list_default_category} は
gitweb.conf(5) で説明されています。

@item  cloneurl (または 複数値変数の @samp{gitweb.url}) 
1行に1つずつ、リポジトリURL(クローンとフェッチに使用)を含むファイル。プロジェクトの概要ページに表示されます。そのために複数値の
@samp{gitweb.url} リポジトリ設定変数を使用できますが、ファイルが優先されます。

これは、グローバルプレフィックスベースの @samp{@@git_base_url_list} gitweb
設定変数をリポジトリ毎用に拡張/改造したものです(gitweb.conf(5) 参照)。

@item  gitweb.owner 
@samp{gitweb.owner} リポジトリ設定変数を使用して、リポジトリの所有者を設定できます。 プロジェクトリストと概要ページに表示されます。

これが設定されていない場合、 @samp{$projects_list} が設定されていなければ(unset)、(gitweb は @samp{$projectroot}
をスキャンしてリポジトリを探し、)ファイルシステムディレクトリの所有者(GECOSフィールド、つまり「getpwuid(3)」の実名フィールド経由)が使用されます。
@samp{$projects_list}
がリポジトリのリストを含むファイルを指している場合、プロジェクト所有者はデフォルトで、指定されたリポジトリのこのファイルの値になります。

@item  various @samp{gitweb.*} config variables (in config) 
詳細なリストと説明については、 @samp{%feature} ハッシュ(連想配列)の説明をお読みください。 gitweb.conf(5)
の「Configuring gitweb features」(gitweb機能の構成)セクションも参照してください。
@end table

@noindent

@chapheading ACTIONS, AND URLS

gitwebは、path_info
(コンポーネント)ベースのURLを使用することも、クエリパラメーターを介して必要なすべての情報を渡すこともできます。一般的なgitweb
URLは、次の以下の5つのコンポーネントに分類されます:

@example
.../gitweb.cgi/<repo>/<action>/<revision>:/<path>?<arguments>
@end example


@table @asis

@item  repo 
アクションが実行されるリポジトリ。

利用可能なすべてのプロジェクトをリストするアクションを除く、すべてのアクションには、どのような形式でも、このパラメーターが必要です。

@item  action 
実行されるアクション。 デフォルトは、リポジトリが設定されていない場合は @samp{projects_list} 、それ以外の場合は @samp{summary} です。

@item  revision 
表示されるリビジョン。デフォルトはHEADです。

@item  path 
それを必要とするアクション用の、アクションが実行される <repository> 内のパス。

@item  arguments 
アクションの振る舞いを制御する任意の引数。
@end table

一部のアクションでは、2つのリビジョン、場合によっては2つのパス名を指定する必要があります。最も一般的な形式では、このようなpath_info(コンポーネント)ベースの
gitweb URL では以下のようになります:

@example
.../gitweb.cgi/<repo>/<action>/<revision_from>:/<path_from>..<revision_to>:/<path_to>?<arguments>
@end example


各アクションはサブルーチンとして実装され、%actions
ハッシュ(連想配列)に存在する必要があります。一部のアクションはデフォルトで無効になっており、機能メカニズムを介してオンにする必要があります。たとえば、
@samp{blame} ビューを有効にするには、gitweb構成ファイルに以下を追加します:

@example
$feature@{'blame'@}@{'default'@} = [1];
@end example


@noindent

@heading Actions:

標準のアクションは以下のとおりです:

@table @asis

@item  project_list 
利用可能なGitリポジトリを一覧表示します。 URLにリポジトリが指定されていない場合、これがデフォルトのコマンドです。

@item  summary 
指定されたリポジトリに関する要約を表示します。
これは、URLにアクションが指定されておらず、リポジトリのみが指定されている場合のデフォルトのコマンドです。

@item  heads 
@itemx  remotes 
特定のリポジトリ内の、すべてのローカル、またはすべてのリモート追跡ブランチを一覧表示します。

後者は、構成されていない限り、デフォルトでは使用できません。

@item  tags 
指定のリポジトリ内のすべてのタグ(軽量および注釈付き)を一覧表示します。

@item  blob 
@itemx  tree 
指定のリポジトリパス内のファイルとディレクトリの指定のリビジョンを表示します。これは、URLにアクションが指定されておらず、パスが指定されている場合のデフォルトのコマンドです。

@item  blob_plain 
指定されたリポジトリ内の指定されたパスとリビジョンのファイルの生データを返します。このアクションへのリンクは @samp{raw} とマークされています。

@item  blobdiff 
同一ファイルの2つのリビジョンの間の違いを示します。

@item  blame 
@itemx  blame_incremental 
ファイルのblame(注釈とも呼ばれる)情報を表示します。行ごとに、その行が最後に変更されたリビジョンと、変更をコミットしたユーザーが表示されます。(設定されている場合は、JavaScriptが有効なときに自動的に使用される、)インクリメンタルバージョンは、Ajaxを使用して、指定されたファイルのコンテンツにblame情報をインクリメンタルに追加します。

このアクションは、パフォーマンス上の理由からデフォルトでは無効になっています。

@item  commit 
@itemx  commitdiff 
リポジトリ内の特定のコミットに関する情報を表示します。 @samp{commit} ビューにはコミットに関する情報がより詳細に表示され、 @samp{commitdiff}
アクションには特定のコミットの変更セットが表示されます。

@item  patch 
git-am(1) で適用するのに適した、プレーンテキストのメール形式でコミットを返します。

@item  tag 
特定の注釈付きタグ(タグオブジェクト)を表示します。

@item  log 
@itemx  shortlog 
(特定のリビジョンから開始の)特定のブランチのログ情報(コミットメッセージまたはコミット件名)を表示します。

shortlogビューはよりコンパクトです。1行に1つのコミットが表示されます。

@item  history 
指定されたリビジョンから開始して、指定されたリポジトリパス内のファイルまたはディレクトリの履歴を表示します(デフォルトはHEAD、つまりデフォルトのブランチ)。

このビューは「shortlog」ビューに似ています。

@item  rss 
@itemx  atom 
リポジトリへの変更のRSS(またはAtom)フィードを生成します。
@end table

@noindent

@chapheading WEBSERVER CONFIGURATION

このセクションでは、gitwebを実行するようにいくつかの一般的なWebサーバーを構成する方法について説明します。いずれの場合も、例の
@samp{/path/to/gitweb} は、インストールしたgitwebを実行したディレクトリであり、 @samp{gitweb_config.perl}
を含んでいます。

あなたが、以下にリストされていない Web サーバーを gitweb
用に構成した場合は、将来のリリースに含めることができるように、ぜひ手順を送ってください。

@noindent

@heading Apache as CGI

Apacheは、gitwebがインストールされているディレクトリでCGIスクリプトをサポートするように設定する必要があります。 それが
@samp{/var/www/cgi-bin} ディレクトリであると仮定しましょう。

@example
ScriptAlias /cgi-bin/ "/var/www/cgi-bin/"

<Directory "/var/www/cgi-bin">
    Options Indexes FollowSymlinks ExecCGI
    AllowOverride None
    Order allow,deny
    Allow from all
</Directory>
@end example


この構成では、リポジトリをブラウズするためのフルパスは以下のようになります:

@example
http://server/cgi-bin/gitweb.cgi
@end example

@noindent

@heading Apache with mod_perl, via ModPerl::Registry

あなたはgitwebでmod_perlを使用できます。このサポートを有効にするには、mod_perl 1.xの場合は Apache::Registry
をインストールする必要があり、また、 mod_perl 2.x の場合は ModPerl::Registry をインストールする必要があります。

gitwebが @samp{/var/www/perl} にインストールされていると仮定すると、以下のApache構成(mod_perl
2.xの場合)が適切です。

@example
Alias /perl "/var/www/perl"

<Directory "/var/www/perl">
    SetHandler perl-script
    PerlResponseHandler ModPerl::Registry
    PerlOptions +ParseHeaders
    Options Indexes FollowSymlinks +ExecCGI
    AllowOverride None
    Order allow,deny
    Allow from all
</Directory>
@end example


この構成では、リポジトリをブラウズするためのフルパスは以下のようになります:

@example
http://server/perl/gitweb.cgi
@end example

@noindent

@heading Apache with FastCGI

GitwebはApache＋FastCGIで動作します。 まず、 gitweb.cgiの名前を変更するか、コピーするか、シンボリックリンクして
gitweb.fcgi にする必要があります。gitwebが @samp{/usr/share/gitweb}
ディレクトリにインストールされていると仮定しましょう。以下のApache構成が適しています(スマン。これれはテストされていません！)

@example
FastCgiServer /usr/share/gitweb/gitweb.cgi
ScriptAlias /gitweb /usr/share/gitweb/gitweb.cgi

Alias /gitweb/static /usr/share/gitweb/static
<Directory /usr/share/gitweb/static>
    SetHandler default-handler
</Directory>
@end example


この構成では、リポジトリをブラウズするためのフルパスは以下のようになります:

@example
http://server/gitweb
@end example

@noindent

@chapheading ADVANCED WEB SERVER SETUP

これらの例はすべてリクエストの書き換えを使用しており、 @samp{mod_rewrite}
(または同等のもの。以下の例はApache用に記述されています)が必要です。

@noindent

@heading Single URL for gitweb and for fetching

gitwebと あなたの @samp{http://} リポジトリの両方に1つのURLが必要な場合は、以下のようにApacheを構成できます:

@example
<VirtualHost *:80>
    ServerName    git.example.org
    DocumentRoot  /pub/git
    SetEnv        GITWEB_CONFIG   /etc/gitweb.conf

    # turning on mod rewrite
    RewriteEngine on

    # make the front page an internal rewrite to the gitweb script
    RewriteRule ^/$  /cgi-bin/gitweb.cgi

    # make access for "dumb clients" work
    RewriteRule ^/(.*\.git/(?!/?(HEAD|info|objects|refs)).*)?$ \
                /cgi-bin/gitweb.cgi%@{REQUEST_URI@}  [L,PT]
</VirtualHost>
@end example


上記の構成では、あなたのパブリックリポジトリが @samp{/pub/git} 下にあり、クローン可能なGit
URLとブラウズ可能なgitwebインターフェイスの両方として @samp{http://git.domain.org/dir-under-pub-git}
としてサービス提供することを想定しています。あなたの git-daemon(1) を @samp{--base-path=/pub/git
--export-all} を伴って開始すると、まったく同じパスで @samp{git://} URLを使用することもできます。

環境変数 @samp{GITWEB_CONFIG} を設定すると、名前付きファイル(つまり、この例では
@samp{/etc/gitweb.conf})をgitwebの構成として使用するようにgitwebに指示します。
上記の例では、実際には必要ありません。構成ファイルが組み込み(gitwebのコンパイル中) や @samp{gitweb_config.perl} や
@samp{/etc/gitweb.conf} とは異なる場所にある場合にのみ必要です。 詳細、特に優先順位ルールに関する情報については、
gitweb.conf(5) を参照してください。

あなたが例の書き換えルールを使用する場合は、gitweb構成ファイル(以下の例の
@samp{/etc/gitweb.conf})に以下のようなものも必要になる場合があります:

@example
@@stylesheets = ("/some/absolute/path/gitweb.css");
$my_uri    = "/";
$home_link = "/";
$per_request_config = 1;
@end example


今どきでは、gitwebは必要に応じて、(相対リンクのベースURIを設定するために、)HTMLベースタグを作成する必要があるため、自動的に機能するはずです。

@noindent

@heading Webserver configuration with multiple projects' root

あなたが複数のプロジェクトルートでgitwebを使用する場合は、以下の方法でApache仮想ホストとgitweb構成ファイルを編集できます。

(Apache構成ファイル内の)仮想ホスト構成は以下のようになります:

@example
<VirtualHost *:80>
    ServerName    git.example.org
    DocumentRoot  /pub/git
    SetEnv        GITWEB_CONFIG  /etc/gitweb.conf

    # turning on mod rewrite
    RewriteEngine on

    # make the front page an internal rewrite to the gitweb script
    RewriteRule ^/$  /cgi-bin/gitweb.cgi  [QSA,L,PT]

    # look for a public_git folder in unix users' home
    # http://git.example.org/~<user>/
    RewriteRule ^/\~([^\/]+)(/|/gitweb.cgi)?$   /cgi-bin/gitweb.cgi \
                [QSA,E=GITWEB_PROJECTROOT:/home/$1/public_git/,L,PT]

    # http://git.example.org/+<user>/
    #RewriteRule ^/\+([^\/]+)(/|/gitweb.cgi)?$  /cgi-bin/gitweb.cgi \
                 [QSA,E=GITWEB_PROJECTROOT:/home/$1/public_git/,L,PT]

    # http://git.example.org/user/<user>/
    #RewriteRule ^/user/([^\/]+)/(gitweb.cgi)?$ /cgi-bin/gitweb.cgi \
                 [QSA,E=GITWEB_PROJECTROOT:/home/$1/public_git/,L,PT]

    # defined list of project roots
    RewriteRule ^/scm(/|/gitweb.cgi)?$ /cgi-bin/gitweb.cgi \
                [QSA,E=GITWEB_PROJECTROOT:/pub/scm/,L,PT]
    RewriteRule ^/var(/|/gitweb.cgi)?$ /cgi-bin/gitweb.cgi \
                [QSA,E=GITWEB_PROJECTROOT:/var/git/,L,PT]

    # make access for "dumb clients" work
    RewriteRule ^/(.*\.git/(?!/?(HEAD|info|objects|refs)).*)?$ \
                /cgi-bin/gitweb.cgi%@{REQUEST_URI@}  [L,PT]
</VirtualHost>
@end example


ここで、実際のプロジェクトルートはWebサーバーから  @samp{GITWEB_PROJECT_ROOT}
環境変数を介してgitwebに渡されるため、gitweb構成ファイル(上記の例では
@samp{/etc/gitweb.conf})に以下の行を入れる必要があります:

@example
$projectroot = $ENV@{'GITWEB_PROJECTROOT'@} || "/pub/git";
@end example


@strong{Note} これはリクエストごとに設定する必要があるため、
@samp{$ per_request_config} はfalseであるか、
上記を @samp{$per_request_config} によって参照されるコードに含める必要があります。

これらの構成により、2つのことが可能になります。 まず、サーバーの各UNIXユーザー(@samp{<user>})は、 @samp{~/public_git/} にある
gitweb Gitリポジトリを以下のURLで参照できます:

@example
http://git.example.org/~<user>/
@end example

あなたがサーバーでこの機能を使用したくない場合は、2番目の書き換えルールを削除してください。

仮想ホストですでに @samp{mod_userdir} を使用している場合、または最初の文字として `~`
を使用したくない場合は、2番目の書き換えルールをコメント化または削除し、必要に応じてそれ以降のいずれかをコメント化解除します。

次に、 @samp{/pub/scm/} と @samp{/var/git/} にあるリポジトリには、 @samp{http://git.example.org/scm/} と
@samp{http://git.example.org/var/}
からアクセスできます。3番目や4番目のような書き換えルールを追加することで、必要な数のプロジェクトルートを追加できます。

@noindent

@heading PATH_INFO usage

あなたがgitwebでPATH_INFOの使用を有効にするには以下のようにします

@example
$feature@{'pathinfo'@}@{'default'@} = [1];
@end example


あなたのgitweb構成ファイルで、あなたのサーバーが以下の形式のURLを消費および生成するようにサーバーを設定することができます

@example
http://git.example.com/project.git/shortlog/sometag
@end example

つまり、以下のような構成を使用して、 @samp{gitweb.cgi} 部分を使用しません。この構成では、 @samp{/var/www/gitweb}
がWebサーバーのDocumentRootであり、gitweb.cgiスクリプトと補完的な静的ファイル(スタイルシート、favicon、JavaScript)が含まれていることを前提としています:

@example
<VirtualHost *:80>
        ServerAlias git.example.com

        DocumentRoot /var/www/gitweb

        <Directory /var/www/gitweb>
                Options ExecCGI
                AddHandler cgi-script cgi

                DirectoryIndex gitweb.cgi

                RewriteEngine On
                RewriteCond %@{REQUEST_FILENAME@} !-f
                RewriteCond %@{REQUEST_FILENAME@} !-d
                RewriteRule ^.* /gitweb.cgi/$0 [L,PT]
        </Directory>
</VirtualHost>
@end example


書き換えルールは、既存の静的ファイルが適切に提供されることを保証しますが、他のURLはPATH_INFOパラメーターとしてgitwebに渡されます。

@strong{注意} この場合、 @samp{@@stylesheets} と @samp{$my_uri} と @samp{$home_link} の特別な設定は必要ありません。
ただし、あなたのプロジェクトの .git ディレクトリへの「ダムクライアント」(dumb client)アクセスは失われます
(「Single URL for gitweb and for fetching」セクションで説明されています)。
後者の可能な回避策は次のとおりです。
つまり、あなたのプロジェクトのルートディレクトリ(例: @samp{/pub/git})に、
.git拡張子なしで名前を付けたプロジェクト(例: @samp{/pub/git/project.git} の代わりに @samp{/pub/git/project})を作成し、Apacheを以下のように構成します:

@example
<VirtualHost *:80>
        ServerAlias git.example.com

        DocumentRoot /var/www/gitweb

        AliasMatch ^(/.*?)(\.git)(/.*)?$ /pub/git$1$3
        <Directory /var/www/gitweb>
                Options ExecCGI
                AddHandler cgi-script cgi

                DirectoryIndex gitweb.cgi

                RewriteEngine On
                RewriteCond %@{REQUEST_FILENAME@} !-f
                RewriteCond %@{REQUEST_FILENAME@} !-d
                RewriteRule ^.* /gitweb.cgi/$0 [L,PT]
        </Directory>
</VirtualHost>
@end example


追加のAliasMatchにより、

@example
http://git.example.com/project.git
@end example

これはプロジェクトのGitディレクトリへの生のアクセスを提供します(プロジェクトのクローンを作成できるようにします)。

@example
http://git.example.com/project
@end example

これは人間に優しいgitwebアクセスを提供します。

この解決策100%安全ではありません。つまり、プロジェクトに @samp{git/}
で始まる名前付きref(ブランチ、タグ)がある場合、以下のようなパスがあります

@example
http://git.example.com/project/command/abranch..git/abranch
@end example

これは404エラーで失敗します。

@noindent

@chapheading BUGS

お手数ですが、メールの件名に「gitweb」を入れて、@uref{mailto:バグや機能のリクエストをgit@@vger.kernel.orgに報告してください,バグや機能のリクエストをgit@@vger.kernel.orgに報告してください}。

@noindent

@chapheading SEE ALSO

gitweb.conf(5), git-instaweb(1)

@samp{gitweb/README}, @samp{gitweb/INSTALL}

@noindent

@chapheading GIT

Part of the git(1) suite

@node gitworkflows,,,Top
@chapheading Name

gitworkflows — Gitで推奨の作業手順の概要

@noindent

@chapheading Synopsis

@display
git *
@end display


@noindent

@chapheading DESCRIPTION

この文書は、 @samp{git.git}
自体に使用されるワークフロー要素のいくつかを書き留めて動機付けしようとしています。一般に多くのアイデアが当てはまりますが、関係者が少ない小規模なプロジェクトではこのような完全なワークフローが必要になることはめったにありません。

私たちが、すぐに参照できるように一連の「ルール」を作ったのは、本当にみんなのモチベーションを高めるためです。ですから常に文字通りに解釈する必要はありません。このような文章よりも、自分の行動に対する正当な理由を大切にしてください。

@noindent

@chapheading SEPARATE CHANGES

原則として、変更を小さな論理ステップに分割し、それぞれでコミットするようにしてください。それらは一貫性があり、その後のコミットとは独立して機能し、テストスイートに合格する必要があります。これにより、レビュープロセスがはるかに簡単になり、その履歴は、たとえば
git-blame(1) や git-bisect(1)を使用して後で検査や分析する時にはるかに役立ちます。

これを実現するには、最初から作業を小さなステップに分割してみてください。1つの大きなコミットを複数に分割するよりも、いくつかのコミットをまとめる方が常に簡単です。途中で小さすぎる、または不完全なステップを作成することを恐れないでください。いつでも後で戻って、公開する前に
@samp{git rebase --interactive} を使用してコミットを編集できます。 @samp{git stash push --keep-index}
を使用して、他のコミットされていない変更とは無関係にテストスイートを実行できます。 git-stash(1)
の「EXAMPLES」セクションを参照してください。

@noindent

@chapheading MANAGING BRANCHES

あるブランチから別のブランチへの変更を含めるために使用できる2つの主要なツールがあります。 git-merge(1) と
git-cherry-pick(1) です。

マージには多くの利点があるため、マージだけで可能な限り多くの問題を解決しようとしています。
cherry-pickingまだ時々役に立ちます。例については、以下の「Merging upwards」を参照してください。

最も重要なことは、マージはブランチレベルで機能し、チェリーピッキングはコミットレベルで機能することです。これは、マージが1、10、または1000のコミットからの変更を同じように簡単に引き継ぐことができることを意味します。つまり、ワークフローは多数の貢献者(および貢献)に対してはるかに適切にスケーリングされます。マージコミットは、すべての親からのすべての変更が含まれた「約束」(promise)であるため、マージも理解しやすくなります。

もちろん、トレードオフがあります。マージには、より慎重なブランチ管理が必要です。以下のサブセクションでは、重要なポイントについて説明します。

@noindent

@heading Graduation

特定の機能が実験的なもの(experimental)から安定したもの(stable)に変わると、ソフトウェアの対応するブランチ間でも「段階的に」(graduates)移行します。
@samp{git.git} は以下の「統合ブランチ」(integration branches)を使用します:

@itemize 

@item
@emph{maint} は、次の「メンテナンスリリース」(maintenance
release)、つまり最後にリリースされた安定バージョンの更新に入るコミットを追跡します

@item
@emph{master} は、次のリリースに入る予定のコミットを追跡します。

@item
@emph{next} は、masterの安定性をテストするトピックのテストブランチとして意図されています。
@end itemize

少し異なる方法で使用される4番目の公式ブランチがあります:

@itemize 

@item
@emph{seen} (メンテナによって表示されるパッチ)は、まだ含める準備が整っていないモノの統合ブランチです(以下の「Integration
Branches」を参照)。
@end itemize

4つのブランチのそれぞれは、通常、その上のブランチの直接の子孫です。

概念的には、機能(feature)は不安定なブランチ(通常は「next」または「seen」)に入り、十分に安定している(stable)と見なされると、次のリリースのために「master」に「卒業」(graduates)します。

@noindent

@heading Merging upwards

上記の「downwards
graduation」(下向きの卒業)は、実際に下向きにマージすることによって実行することはできません。なぜなら、不安定なブランチの「すべての」変更が安定したブランチにマージされるためです。
したがって、以下のようになります:

@strong{Merge upwards}

修正を必要とするサポートされている最も古いブランチに常に修正をコミットします。 次に、 (定期的に)統合ブランチを互いに上向きにマージします。

これにより、修正のフローが非常によく制御されます。たとえば、修正を適用したことに気付いた場合。 @emph{maint} でも必要な @emph{master}
は、(git-cherry-pick(1)
を使用して)下向きにチェリーピックする必要があります。これは数回発生しますが、頻繁に実行しない限り心配する必要はありません。

@noindent

@heading Topic branches

重要な機能を実装するにはいくつかのパッチが必要であり、その存続期間中に追加のバグ修正または改善が行われる可能性があります。

統合ブランチですべてを直接コミットすると、多くの問題が発生します。不正なコミットは元に戻せないため、1つずつ元に戻す必要があります。これにより、変更のグループの一部を元に戻すのを忘れると、混乱した履歴とエラーが発生する可能性があります。並行して作業すると、変更がごちゃまぜになり、さらに混乱が生じます。

「topic branches」(トピックブランチ)を使用すると、これらの問題が解決されます。名前はかなり自明ですが、上記の「merge
upwards」(上向きにマージ)ルールに由来する警告があります:

@strong{Topic branches}

すべてのトピック(機能、バグ修正など)のサイドブランチを作成します。最終的にマージする最も古い統合ブランチでフォークします。

そうすれば、以下のように多くのことが非常に自然に実行できます:

@itemize 

@item
機能/バグ修正を統合ブランチに取り込むには、それをマージするだけです。その間にトピックがさらに進化した場合は、再度マージしてください。
(必ずしも最初に最も古い統合ブランチにマージする必要はないことに注意してください。たとえば、最初にバグ修正を next
にマージし、テスト時間を与え、安定していることがわかったら maint にマージできます。)

@item
トピックの作業を続行するためにブランチ other の新機能が必要な場合は、 other を topic にマージします。
(ただし、これを「習慣的に」行わないでください。以下を参照してください。)

@item
分岐したブランチが間違っていることに気づき、それを「過去にさかのぼって」移動したい場合は、 git-rebase(1)
を使用してください。
@end itemize

注意: 最後の項目が他の2つと衝突することに注意してください。他の場所でマージされたトピックは、リベースしないでください。
git-rebase(1) の「RECOVERING FROM UPSTREAM REBASE」に関するセクションを参照してください。

(通常は理由もなく)「習慣的に」統合ブランチをあなたのトピックにマージすること(つまり、トピックを拡張し、定期的に上流からマージし続けること)は眉をひそめられる行為であることを指摘しておく必要があります。

@strong{明確に定義されたポイントでのみ下流にマージします}

正当な理由がある場合を除いて、ダウンストリームにマージしないでください。正当な理由とは、例えば、アップストリームAPIの変更がブランチに影響する、ブランチがアップストリームにきれいにマージされなくなりました、等です。

正当な理由以外の場合、マージされたトピックには、(激しくバラバラの)突然の複数の変更が含まれます。結果として生じる多くの小さなマージは、履歴を大幅に混乱させます。後でファイルの履歴を調査する人は、そのマージが開発中のトピックに影響を与えたかどうかを確認する必要があります。アップストリームは、誤って「より安定した」ブランチにマージされることさえあるかも等々。

@noindent

@heading 使い捨て統合

先程の話題についていうと、多くの小さなトピックブランチがあり、あなたはそれらがどのように相互作用するのかワケワカメに思うことがあるでしょう。それらをマージしたらちゃんと機能しないかも？
そして、このようなマージは簡単に元に戻せないため、我々はこれらに対して「安定した」場所でのマージは避けたいと考えています。

もちろん、解決策は、元に戻すことができるマージを作成することです。つまり、使い捨てブランチ(throw-away branch)にマージします。

@strong{Throw-away integration branches}

いくつかのトピックの相互作用をテストするには、それらを使い捨てのブランチにマージします。あなたは決してそのようなブランチに基づいて作業を行ってはいけません！

テストの直後にこのブランチが削除されることを(非常に)明確にすると、このブランチを公開して、たとえば、テスターがこのブランチを操作できるようにしたり、他の開発者が進行中の作業に互換性があるかどうかを確認したりすることもできます。
@samp{git.git} には、「seen」と呼ばれるそのような公式の使い捨て統合ブランチがあります。

@noindent

@heading Branch management for a release

上記のマージアプローチを使用していると仮定すると、プロジェクトをリリースするときに、追加のブランチ管理作業を行う必要があります。

「master」は次の機能(feature)リリースに入るコミットを追跡するため、機能(feature)リリースは「master」ブランチから作成されます。

@emph{master} ブランチは、 @emph{maint}
のスーパーセットであると想定されています。この条件が満たされない場合、「maint」には「master」に含まれていないコミットが含まれています。したがって、「maint」のコミットによって表される修正は、機能(feature)リリースには含まれません。

@emph{master} が実際に @emph{maint} のスーパーセットであることを確認するには、 @samp{git log} を使用します:

@strong{「master」が「maint」のスーパーセットであることを確認(verify)します:}

@samp{git log master..maint}

このコマンドは、コミットを一切リストしないはずです。そうでない場合は、「master」をチェックアウトし、「maint」をマージします。

これで、あなたは機能(feature)リリースの作成に進むことができます。リリースバージョンを示すタグを「master」の先端に適用します:

@strong{Release tagging}

@samp{git tag -s -m "Git X.Y.Z" vX.Y.Z master}

あなたは新しいタグをパブリックGitサーバーにプッシュする必要があります(以下の「DISTRIBUTED
WORKFLOWS」参照)。これにより、プロジェクトを追跡している他のユーザーがタグを利用できるようになります。プッシュでは、更新後のフックをトリガーして、リリースtarballの作成や事前にフォーマットされたドキュメントページなどのリリース関連の項目を実行することもできます。

同様に、メンテナンスリリースの場合、「maint」はリリースされるコミットを追跡します。ゆえに、タグのリリース手順では、「master」ではなく「maint」にタグを付けてプッシュするだけです。

@noindent

@heading 機能リリース後のメンテナンスブランチ管理

機能(feature)リリース後、あなたはメンテナンスブランチを管理する必要があります。

まず、直近のリリースより前に行われた機能リリースのメンテナンス修正を引き続きリリースする場合は、その前のリリースのコミットを追跡するために別のブランチを作成する必要があります。

これを行うために、現在のメンテナンスブランチは、以前のリリースバージョン番号で名前が付けられた別のブランチにコピーされます(例:
maint-X.Y.(Z-1) ここでX.Y.Zは現在のリリースとする)。

@strong{Copy maint}

@samp{git branch maint-X.Y.(Z-1) maint}

'maint’ブランチは、新しくリリースされたコードに早送り(fast-forwarded)され、現在のリリースのメンテナンス修正を追跡できるようになります:

@strong{Update maint to new release}

@itemize 

@item
@samp{git checkout maint}

@item
@samp{git merge --ff-only master}
@end itemize

早送り(fast-forwarded)ではないためにマージが失敗した場合は、機能リリースで「maint」のいくつかの修正が欠落している可能性があります。前のセクションで説明したようにブランチのコンテンツを検証(verify)した場合、これは発生しません。

@noindent

@heading 機能リリース後の「next」と「seen」のブランチ管理

機能のリリース後、統合ブランチ @emph{next} は、オプションで、 @emph{next} の残りのトピックを使用して、 @emph{master}
の先端から巻き戻されて再構築される場合があります:

@strong{Rewind and rebuild next}

@itemize 

@item
@samp{git switch -C next master}

@item
@samp{git merge ai/topic_in_next1}

@item
@samp{git merge ai/topic_in_next2}

@item
…
@end itemize

これを行うことの利点は、「next」の履歴がクリーンになることです。
たとえば、「next」にマージされた一部のトピックは、最初は有望に見えたかもしれませんが、後で望ましくないか時期尚早であることがわかりました。このような場合、トピックは「next」から元に戻され(revert)ますが、一度マージされて元に戻されたという事実は履歴に残ります。「next」を再作成することで、そのようなトピックの別の化身に再試行するためのきれいな状態を与えることができます。機能のリリースは、これを行うための履歴上の良い地点です。

これを行う場合は、「next」が巻き戻されて再構築されたことを示す公開アナウンスを行う必要があります。

「seen」についても、同じの巻き戻しと再構築のプロセスを行います。なお、上記のとおり「seen」は使い捨てのブランチであるため、公の発表は必要ありません。

@noindent

@chapheading DISTRIBUTED WORKFLOWS

前セクションを読んだ今となっては、あなたはトピックを管理する方法を知っておくべきです。
一般的に、プロジェクトに取り組んでいるのはあなただけではないので、あなたの仕事は共有しなければなりません。

大まかに言えば、マージとパッチという2つの重要な作業フローがあります。重要な違いは、マージ作業フローはマージを含む完全な履歴を伝播できますが、パッチは伝播できないことです。両方の作業フローを並行して使用できます。@samp{git.git}
では、サブシステムメンテナのみがマージ作業フローを使用し、他のすべての作業フローはパッチを送信します。

注意:
メンテナは、インクルードするために提出されたすべてのコミット/パッチが遵守しなければならない「Signed-off-by」要件などの制限を課すことができることに注意してください。より詳細な情報については、プロジェクトのドキュメントを参照してください。

@noindent

@heading Merge workflow

マージ作業フローは、上流(upstream)と下流(downstream)の間でブランチをコピーすることによって機能します。上流では、貢献の結果を公式の履歴に統合することができます。下流では、公式の履歴に基づいて作業します。

これに使用できる主なツールは3つあります:

@itemize 

@item
git-push(1) は、ブランチをリモートリポジトリにコピーします。通常は、関係者全員が読み取れるリポジトリにコピーします。

@item
git-fetch(1) は、リモートブランチをあなたのリポジトリにコピーします。

@item
git-pull(1) は、フェッチしてマージするのを一度に行います。
@end itemize

注意: 最後の点に注意してください。 実際にリモートブランチをマージする場合を除いて @samp{git pull} を使用しないでください。

変更を取得するのは簡単です:

@strong{push/pull: branches/topics の公開}

@samp{git push <remote> <branch>} を実行、そして、どこからフェッチできるかをみんなに伝えます。

あなたは今の所メールなどの他の手段で人々に伝えなければなりません。 (Gitは git-request-pull(1)
を提供して、このタスクを簡素化するために、事前にフォーマットされたプルリクエストをアップストリームのメンテナーに送信します。 )

統合ブランチの最新のコピーを取得したいだけの場合は、最新の状態に保つのも簡単です:

@strong{push/pull: 最新の状態に保つ}

最新の状態に保つには @samp{git fetch <remote>} または @samp{git remote update} を使います。

次に、以前に説明したように、安定したリモートからトピックブランチをフォークするだけです。

あなたがメンテナであり、他の人のトピックブランチを統合ブランチにマージしたい場合、他の人々は通常、メールでそうするようにリクエストを送信してきます。そのようなリクエストは以下のようになります

@example
Please pull from
    <url> <branch>
@end example


その場合、 @samp{git pull} は、以下のように、フェッチとマージを一度に実行できます。

@strong{Push/pull: Merging remote topics}

@samp{git pull <url> <branch>}

場合によっては、メンテナが下流(downstream)から変更をプルしようとすると、マージの競合が発生することがあります。
この場合、下流にマージを実行して競合を彼ら自身で解決するように依頼できます(おそらく、彼らは競合を解決する方法をよりよく知っているでしょう)。これは、下流が上流(upsteram)からマージする必要があるまれなケースの1つです。

@noindent

@heading Patch workflow

あなたが変更を電子メールの形式でアップストリームに送信する貢献者の場合は、通常どおりトピックブランチを使用する必要があります(上記参照)。 次に、
git-format-patch(1)
を使用して、対応する電子メールを生成します(メンテナの作業が楽になるため、手動でフォーマットするよりもこれを使うのを強く推奨します)。

@strong{format-patch/am: Publishing branches/topics}

@itemize 

@item
@samp{git format-patch -M upstream..topic} を使用して、事前に形式が決まっているパッチファイルに変換します

@item
@samp{git send-email --to=<recipient> <patches>}
@end itemize

使用上の注意については、 git-format-patch(1) と git-send-email(1)
のmanpageを参照してください。

あなたのパッチがもはや現在の上流(upstream)に適用されなくなったとメンテナが告げた場合は、トピックをリベースする必要があります(format-patch
マージができないため、マージを使用できません):

@strong{format-patch/am: Keeping topics up to date}

@samp{git pull --rebase <url> <branch>}

あなたはその後、リベース中に競合を修正できます。おそらくあなたはメール以外であなたのトピックを公開していないので、それをリベースすることは問題ではありません。

あなたがこのようなパッチシリーズを受け取った場合(メンテナとして、または送信先のメーリングリストの読者として)、メールをファイルに保存し、新しいトピックブランチを作成し、
@samp{git am} を使用してコミットをインポートします:

@strong{format-patch/am: Importing patches}

@samp{git am < patch}

指摘する価値のある機能の1つは、競合が発生した場合に役立つ3方向マージです。 @samp{git am -3}
は、パッチに含まれるインデックス情報を使用して、マージベースを把握します。他のオプションについては git-am(1)
を参照してください。

@noindent

@chapheading SEE ALSO

gittutorial(7), git-push(1), git-pull(1),
git-merge(1), git-rebase(1), git-format-patch(1),
git-send-email(1), git-am(1)

@noindent

@chapheading GIT

Part of the git(1) suite

@bye
